Jesus dude, is this how your code reviews with colleagues go? You can be corrective and helpful without being hostile.
&gt; According to this ... That author has come to a silly conclusion. Of course the method is async, and works exactly as you would expect it to. Why would you be able to operate on a stream simultaneously? They maintain state, for example, the current read position.
I'm not being on the defense, I'm just showing you the source of peoples confusion, also I'm a different person then what mentioned it.
So you are. I retract my statement.
When its this bad? No, usually I don't even bother talking to them and go straight to their manager. This isn't one or two minor mistakes. Every step of the way demonstrates more and more problems, some of them quite fundamental. And what's worse is people eat this crap up. 89% of the people who saw this article up-voted it despite it having no redeeming qualities. It's like we're congratulating him for having race conditions and hard-coded strings.
Sadly not. I’m using the Windows Forms WebBrowser control, and the registry key is needed to change the compatibility mode of the control. It’s not my own data that I’m storing in the registry.
So, I don't know how the `Record` base class is implemented -- if you have it to where there is a bunch of logic that looks like this... if (signature == "SPSM") { //parse the data and assign relevant info to properties } ... then there is a better way than having a monster base class. In fact, the base class shouldn't know about the implementations of its subclass. So, I am going to suggest using the following pattern that uses Microsoft's [Managed Extensibility Framework (MEF)](https://docs.microsoft.com/en-us/dotnet/framework/mef/). First, add a reference to `System.ComponentModel.Composition`. Then create the following interface: **IRecord.cs:** public interface IRecord { void ProcessData(byte[] data); } The `IRecord` interface will be implemented on classes that process the input data (i.e `SuperSimpleRecord`). However, we need to also tag those classes with an attribute that not only tags the class with the "SPSM" signature but also *exports* the `IRecord` component. We will have to create a metadata interface that has the `Signature` property in order to identify the implementer of `IRecord`. **IRecordMetadata.cs:** public interface IRecordMetadata { string Signature { get; } } Now we need to make the `RecordAttribute` class. **RecordAttribute.cs:** [AttributeUsage(AttributeTargets.Class, AllowMultiple = false), MetadataAttribute] public class RecordAttribute : ExportAttribute, IRecordMetadata { public string Signature { get; set; } public RecordAttribute(string signature) : base(typeof(IRecord)) { this.Signature = signature; } } The `RecordAttribute` inherits from the `ExportAttribute`. The `ExportAttribute` exports the type `IRecord` and will allow us to import it later via MEF. The attribute implements `IRecordMetadata` so we can identify the signature that belongs to the specific implementer of `IRecord`. **SuperSimpleRecord.cs:** [Record("SPSM")] public class SuperSimpleRecord : IRecord { public int Foo { get; set; } public string Bar { get; set; } public void ProcessData(byte[] data) { //process data to assign Foo and Bar their values Console.WriteLine("Data processed for SPSM."); } } The [Record("SPSM")] declaration at the top of the `SuperSimpleRecord` class is tagging the class with the "SPSM" signature as well as exporting `IRecord`. It is important to note that the class must implement `IRecord`, otherwise you will get a composition error during run time. The `ProcessData` method will house all of the logic needed to parse the input data and assign the relevant properties to the class, in this case `Foo` and `Bar`. Now we need a way to import the components we've exported. **RecordService.cs** public static class RecordService { public static IDictionary&lt;string, IRecord&gt; GetRecordProcessors(Assembly source) { var result = new Dictionary&lt;string, IRecord&gt;(); var aggregate = new AggregateCatalog(); aggregate.Catalogs.Add(new AssemblyCatalog(source)); var container = new CompositionContainer(aggregate); var components = container.GetExports&lt;IRecord, IRecordMetadata&gt;(); foreach (var component in components) { result.Add(component.Metadata.Signature, component.Value); } return result; } } The `GetRecordProcessors()` method takes an assembly. This assembly must contain the implementation of the types we are exporting. The method creates a `CompositionContainer` and imports every class in the specified assembly that has the `RecordAttribute` (which has also implemented `IRecord`). We then iterate over the components and add them to a dictionary where the signature is the key and the `IRecord` instance is the value. This dictionary is then returned. Putting it all together... **Program.cs:** class Program { static void Main(string[] args) { var source = typeof(Program).Assembly; IDictionary&lt;string, IRecord&gt; processors = RecordService.GetRecordProcessors(source); byte[] data = GetData(); string signature = GetSignature(data); if (processors.ContainsKey(signature)) { Console.WriteLine(signature); processors[signature].ProcessData(data); } } static byte[] GetData() { //get data return new byte[0]; } static string GetSignature(byte[] data) { //determine signature and return it return "SPSM"; } } Output: SPSM Data processed for SPSM. `GetData()` and `GetSignature()` are pseudo methods -- I don't know how you are retrieving your data nor do I know how to parse that data for the signature. We grab the source assembly from the `Program` type (assuming all of the `IRecord` exports are in the same assembly that this `Program` class is in) and use it to retrieve all of the `IRecord` implementations that were exported via the `RecordAttribute`. The data is retrieved and the signature is parsed and both are then used to retrieve the right `IRecord` instance and then call the `IRecord.ProcessData()` method. By simply adding a new class that implements `IRecord` and is tagged with the `RecordAttribute` for a different signature, the `RecordService.GetRecordProcessors()` method will automagically include it in the collection that is returned. I don't know the specifics of what your `Record` base class is doing, the format of the files, etc., so I am not sure if any of this helps you. If all of your parsing and assignment logic is in the `Record` base class, this will cause you to strip out all of the parsing logic for each record type and put them in their own classes. As a side note, you can harvest all of the assemblies in a directory for exported types by using a `DirectoryCatalog` instead of an `AssemblyCatalog`. Instead of an `Assembly` instance, the `DirectoryCatalog` takes a string path. This is really nice for a plugin architecture where the assemblies that are in particular folder are unknown. When I have used it for plugin architectures, I had a 'plugins' directory next to my executable for this exact purpose. I also had all of the interfaces that were intended to be used in plugins in their own assembly so both the application and plugins can reference it. MEF benefits from generics here, too. I didn't use generics, but I have implemented a `MefImporter`class to generically handle the importing logic. Here is an example: public static class MefImporter { public static T Import&lt;T&gt;(Assembly source) { var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new AssemblyCatalog(source)); var container = new CompositionContainer(catalog); return container.GetExport&lt;T&gt;().Value; } } The above Import method assumes that the source assembly contains a single class that emits the specified generic type, but you get the idea -- it is fairly easy to tweak it to return a collection of exported components. Also, the method `CompositionContainer.GetExport` returns a `Lazy&lt;T&gt;` type, so that is why `.Value` is used. This is useful if you don't want to instantiate the types right away. Instead of MEF, you could also use the Factory Pattern -- you pass in the signature to the Factory and the method returns the right `IRecord` object to process the data. This isn't as cool though :-D
This would imply I want to do testing, i fucking hate unit testing! But i'm sure it's great.
In my opinion using a DI container to produce controllers and dependencies can be used no matter the size of the project. It removes a lot of boiler plate constructor setup. However I am very opposed to the idea that DI containers should completely replace normal constructor usage. I never use the DI container directly. I don't want my code to have a dependency on a DI container. It's completely unnecessary as it makes dependencies implicit rather than explicit which is hell in unit testing scenarios. To avoid having to update a million tests if a constructor changes I simply write a class that sets up dependencies explicitly.
It isn't bad once you get the hang of it. It does have horrific documentation though, and googling for help with WiX will often return results for the Wix website creator or it will return information that is either no longer valid or shows older ways of doing things (like using the Upgrade element instead of the MajorUpgrade element).
Totally agree there. We share this view. 
Good code is readable code. This doesn't leak memory. The garbage collector will make sure of that. You spend much more time reading code than writing it, and if performance is not a problem, readability in my opinion should therefore always win. We're talking maybe 10 bytes allocated that live for the duration of the method call. How is that not nano optimization? 
I mentioned a large part, but I will elaborate and correct it to say except the OCP. Thanks for the feedback! 
I have a bit, I think it’s a pretty weird monster of Frankenstein to be honest. I think they’ve failed to integrate the OO parts and ML together nicely. Once C# gets proper pattern matching and support for algebraic data types I think any desire I have left to *really* try F# will be gone.
I am aware of that, it is pseudo code. I will elaborate that. By injecting the bar reference into the constructor and following the open/closed principle, you make it so you can test the "bar" class once in separation, and then in your other tests you can focus on testing just "foo". You don't have to write as much setup code for "bar" when you then test "foo". 
This kata was not about code quality. It demonstrates testability. I don't care about hard coded strings and race conditions here at all as I tried to emphasize in the first part of the description. 
Yes, but what then when you have to test UserService? You end up setting up faking and mocking and preparation for all of BaseService's functionality too. And you do that in every service test. With composition, you can safely test the two individually. 
Yes and that is what the interface segregation principle is about, I know. I actually emphasize that later but I will make it more clear here that we are purposely ignoring it. Remember we're demonstrating testability, not clean code necessarily. I want the kata to be easy to understand from a testability aspect all the way through. Thanks for the feedback! 
This is not supposed to demonstrate clean code. At all. It is supposed to demonstrate testability as I also stated at first. If I made the code clean, it would just clutter the understanding. But thanks for your feedback! 
This is a temporary step. You see in later steps we get rid of it again. It's to ensure our application doesn't have any new bugs while we don't have coverage to prevent it. See the cleaning the code section. 
Yes, I don't care about 50 bytes of memory that is wasted until the garbage collector cleans it up after its very short lifetime. This is what an IOC container does under the hood too. It's like as if people forget that objects are not heavy to create at all. Also this is a temporary step, and the kata is not supposed to focus on clean code or good code as I emphasized in the start of the repository, but testability entirely. The configuration details for the mail sender are not there because I want the kata to have as little code as possible. It needs to be easy to understand, not be clean and perfect. As for the hard coded values, same principle. Not clean code, but it is enough to demonstrate testability. 
Those 3 copies are exactly what an IOC container would do per default as well - and again, this is not to demonstrate clean code - it is to be as small as possible and yet demonstrate testability. It is also a temporary step. You can see we clean it up in later steps. And really - are we concerned about 30 bytes of memory that only lives until cleaned up by the garbage collector, for the lifetime of the object, which is brief? As for the constructor, yes I could use a Func. I wanted this to be understandable by all levels of programmers and very easy to read though. That's also why I put all classes in the same file. Thanks for your feedback - I will try to make some of these points more clear in the repository.
I'm working on software that will create Windows installers that can do what you want with the registry. I'll hook you up with a free copy as a beta tester if you want. Just PM me if you are interested. It uses WIX as the backend so it handles all the messiness for you 
Yeah sure, I'm totally with you on keeping the examples free of clutter and on point. :)
Believe me, you dont want to touch lazy loading. Why would you use that in desktop apps? They are (should be) usually separated from the database by several layers of abstractions and services. So it is only a concern on the server side (unless you are using an embedded DB like SQLite, but there you will encounter a myriad of other problems and lazy loading will be the last of your concerns). I really didnt mean to go full autism mode but saying that lazy loading is a very important feature is eh, not really correct when basically every expert in the industry advices against it.
Once again thanks, I added a note that emphasizes the above.
I have emphasized some of the points now in the kata. Please look again. Thanks for your feedback!
Thanks for your feedback - I have now "fixed" the code and turned it into "real" code to avoid confusion.
Thanks for the feedback - I have now emphasized this more clearly in the kata.
Thanks for your feedback - I have now emphasized this in the kata to make it more clear.
Testing can be fun when you can write a test in 10 minutes that tests something that took 3 days to make. But no one wants it to be painful. Follow my kata - I'm sure you'll like the end-result. There's a certain satisfaction (especially with Visual Studio's live unit testing feature) about everything turning green!
I have now emphasized in the kata that it's a temporary step.
In the Solution Explorer pane, right click on the setup project name and select View &gt; Registry. You have to look at the old VS 2010 documentation for more info on it: https://msdn.microsoft.com/en-us/library/w4dsy50b(v=vs.100).aspx. It used to be integrated into Visual Studio up until VS 2010, then it was dropped in VS 2012. After public outcry, it was added back as the extension in your link, but Microsoft hasn't done much to update the doc's as far as I know. WiX is far more powerful, but IMHO before you can really understand the documentation, you need to have a decent understanding of how Windows installers work. Then, you get to wade through XML Hell in order to create a simple installer. It is the way to go for a professional installer, but for a quickie setup, VS Installer Projects are a nice alternative.
I have now added more emphasis on the kata to explain these lacks.
In that case, leave it as is. This is a kata for object oriented programming, not functional. Thanks for your feedback though! Maybe I should emphasize this in the kata.
As for point 3, I need a factory here, to fake out the "creation" of new objects. How else would you be able to fake out the CustomFileWriter object being created in the Log method?
Out of curiousity, can you find a source saying it was referring to inheritance? I can't find it anywhere.
I've written logging frameworks which is why I "know" this is an optimisation you would ultimately want to make. Premature optimisation doesn't mean you can't write optimised code first and optimised doesn't have to mean "made more performant". Experience tells me this design could be simpler and more performant, so readability would be better as well as performance. Performance is always a priority eventually, the smart money doesn't put off until tomorrow what can easily be done today. Purposefully ignoring an optimisation now is a judgement call. It may work out or it might generate technical debt. Ignoring, or worst, actively suppressing what your experience tells you in the name of TDD is not canon. For some reason people use an abbreviated TDD workflow which goes. 1) write a test 2) prove it fails 3) write some code that makes the test pass 4) profit The correct workflow includes 5) revise, tidy, optimise 6) retest 7) repeat from 5) until satisfied. Performance is always important, excessive allocations are a code smell, why do extra work when you don't need to. It's not more readable, it's less because when you read code you expand each line with metadata. "Create a new file writer and write to it" comes with the metadata "This class is not designed to be reused". In this specific case, that of a logger, my spidersense tingles because your logger won't work in multithreaded code. The writer won't be able to get a hold of the log file so your log won't be written and an exception will propagate back. But look, all that said, I really liked your work and we've gone beyond your original topic which was doing a refactoring Kata into a more hypothetical space. Please take this on board as a) intended to be constructive criticism and helpful b) subject to the vagaries of a dozen competing approaches to solving the same problem. 
He said: &gt; If your static class is actually stateless You start with &gt; Let's say you want to test the class Program, and it is static. In its static constructor it increments a private static variable called foo with 1. If you have a private static variable, then the class is not stateless.
I agree entirely with your points, but the kata must remain simple and focus on testability, ignoring clean code and performance. I may do a clean code kata later. Can you point to the concrete case where it is both more readable and higher performance? Remember the kata needs to clearly show what has been done in each step, and we want the reader to be able to understand the code as easily as possible. If it was a production logger I also would have introduced the concept of sinks etc. 
&gt;Here's a hint for you. When there is a one-to-one mapping between your interfaces and your classes, you are probably doing something wrong. Mate, your point is fine but why do you need to make it in such a dickish manner? 
THANK YOU! I tried right-clicking on everything, and even right-clicked in the correct place and then looked in the Add menu. I did not think to look in the View menu.
Ah wow good point! I totally missed that very important note at the top. Haha. But then I agree with him entirely. 
I think you are missing the point of what this kata is about. It is focusing on testability, then leaving out other topics to make it easy to understand the core fokus. If it was a kata about clean code or what else, then that should be the focus, but note here.
I would go for the [TestDataBuilder](http://robdmoore.id.au/blog/2013/05/26/test-data-generation-the-right-way-object-mother-test-data-builders-nsubstitute-nbuilder/) pattern. I have used [TestStack.Dossier](https://www.nuget.org/packages/TestStack.Dossier/) and [Bogus](https://www.nuget.org/packages/Bogus/). Both are awesome.
Your values for greenTrafficLight, yellowTrafficLight and redTrafficLight are never changed from their instantiated value of 5.0f. In the first update call, RedTrafficState() is called. If YellowTime &gt;= RedTime then it transitions to green. 5.0f == 5.0f so the transition happens. In the next update, you'll update if RedTime &gt; GreenTime which will never be the case because they are both 5.0f. As it never updates to the next state (because you're not updating your light time values), it gets stuck on the green state.
One more alternative [NReco.Data](https://github.com/nreco/data/) - if you are looking something lighweight like Dapper but with abstract queries and automated SQL commands generation.
They're his friends, this isn't going to be distributed. Short of utilising a server, this is the best simple option
Thanks for the reply - as I said in my other post, I've now found the registry editor. Unfortunately I can't get it to work. Can I pick your brains as to why that might be? I've got a .reg file that contains the relevant keys. If I double-click the .reg file and manually import them, everything works fine. I've imported the same .reg file into the installer, I can see the keys in the installer's registry display, but when I run the installer the keys don't get add to the target computer. I've looked everywhere I can think of for any settings that might be wrong, etc, but I can't find anything that would cause this. In case it's relevant, the contents of the .reg file are: Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION] "FastESignIn.exe"=dword:00002af8 **Edit** - never mind, I found a StackOverflow page which explains that it's because I've got a 32-bit installer. I think I'll be able to fix it now. (Further edit - yep, changing the installer to target x64 instead of x86 did the trick.) Leaving this here though, in case it helps someone else. [The relevant Stackoverflow link](https://stackoverflow.com/questions/11199093/visual-studio-2010-setup-project-registry-editor-doesnt-work).
Not easily, no. There are various third-party "lambda parser" and scripting libraries that can do things like this, though. If simple `x == "y"` expressions are all you need, it may be easier to solve this with a handwritten "select name -&gt; value" statement or by using reflection to automate it.
I think we need some context here :)
This is usually accomplished by using [Expression Trees](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/how-to-use-expression-trees-to-build-dynamic-queries): &gt; For example, an application might provide a user interface that enables the end user to specify one or more predicates to filter the data. In order to use LINQ for querying, this kind of application must use expression trees to create the LINQ query at runtime. I have some [code here that does something similar](https://github.com/waf/Formic/blob/master/Formic/Utility/Expressions.cs).
&gt; Personally I think DbUtils.Execute() is more readable than new DbUtils().Execute(); I find this stuff unreadable. I try to think about code as a document primarily for other developers and myself not for the computer. I avoid pre-optimization almost entirely (some patterns include inherent optimizations) and work to write code that is testable and maintainable as the primary goal. This means I find the use of static Util or even utility singleton classes to be an anti pattern as if you were writing a specification for the requirement you are developing you would not write a bullet that says "and dbutils formats the object". Rather through good interface design and composition (avoid inheritance where possible though interface inheritance is OK) you create object instances that map to real items/concepts that are shared across the business. When you simply cannot get there because its just a damn adder function used on 3 common types then use the ability to create extension methods making adding those niggly little static utils much cleaner to manage and easier to read for others. Rather than something like DbUtils.Execute(object). You have something like: object.Action(parameter=null); The challenge is design patterns matter so much more with this strategy and naming becomes a more serious consideration. However the payoff in having code nearly so readable that non-coders can see you fulfilled the requirement spec is huge.
If using EF this will apply. I use entity framework and followed this article: https://msdn.microsoft.com/en-us/data/dn314431.aspx 
So you want to parse the powershell script and take values out of? Why not just have a resource file that both C# and powershell target? The values could just be an CSV file, XML or something that is naively parseable.
You can wind up tightly coupled when you use information about the implementation that isn't part of the exposed contract. If the signature for A.Foo() returns an IEnumerable&lt;Bar&gt;, but the calling code knows that A (or the implementation of A that will be used) uses a List&lt;Bar&gt; underneath, you wind up tightly coupled to A (i. e. relying on its implementation) when you treat it like an already-reified collection. But, you probably already know that, and are just being cranky.
What situations would you use the DB intializers vs migrations? When doing code first
Ok, I will grant you that one. But that's why I argue that `A.Foo()` should return `BarCollection` rather than `IEnumerable&lt;Bar&gt;`. If you give someone a full collection API, rather than the rather anemic one offered by IEnumerable, they won't go hunting for implementation details. I've lost track of the number of time I've written this function: IList&lt;T&gt; ToListSafe&lt;T&gt; (IEnumerable&lt;T&gt; source) if (source is IList&lt;T&gt;) return (IList&lt;T&gt;)source; else return source.ToList();
Testability does not require eliminating inheritance. Nor does inheritance make testing harder to understand. Further more, clean code and testable code go hand in hand. You don't need to sacrifice one for the sake of the other. 
You should open an issue over at the OpenTK issue tracker on Github - there's been some button changes lately, and there's a good chance this is something that slipped through the cracks.
&gt; How else would you be able to fake out the CustomFileWriter object being created in the Log method? Easy, you don't. Its a bad design that is going to create unnecessary GC pressure. If you want to swap out the CustomFileWriter do it once when the parent object is created. You don't need to keep doing it over and over again.
&gt; This is not supposed to demonstrate clean code. Then start over. If you are going to take the time to write examples, take the time to write good examples. Write ever line of code like it is something that will go into a production system. Otherwise people are going to copy your code as-is and then wonder why their logger keeps crashing. **** Think of it this way. Would you be happy if a potential employer saw this and said, "I'm not going to hire this guy. His code is littered with race conditions."?
How many times is that logger going to be called? How many times are you going to unnecessarily trigger GC cycles? While it is true that any one GC allocation is probably not going to matter, they add up fast. *** Moreover, it is completely unnecessary. You aren't actually gaining any functionality this way. It just makes you look sloppy. 
&gt; ignoring clean code and performance. Stop saying that. It completely discredits everything you're trying to do.
Migrations are if you change your Model. Maybe you add a Email property or Age property to your Person class. So with code first you're more than likely to use migrations. Using Drop initializers is only viable for testing and academic purposes, you're losing all your data after all. I believe Drop initializers stop working once migrations are enabled. You'll have to explicitly delete the database.
Yes, because I'm fallible and can find no over way to express my outrage at people who put out intentionally bad code in their examples. 
Let me guess: they regret it as I expect most (all?) of the mentioned companies don't even attempt to implement MVVM correctly? The developers go right back to old winforms habits and make everything tightly coupled, making WPF a pain as the application is developed. Been the story at my workplace. Can't ask a designer to make a pretty GUI when the GUI is bound to the logic, they would have to be familiar with the code to even test what they make. Can't make easily changed logic if the other parts of the code expects a certain GUI structure.
DB initalizers is for seeding the database (adding required data to do integrated testing and user testing). This is necessary when starting the project from scratch. This is also nice when your testing database is full of junk from persistent testing. I don't use them for unit testing. You must use migrations to build the database structure so it can be used.
I think you are looking for this: https://dynamiclinq.codeplex.com/documentation There is a NuGet for it too -- have used it before. --- However, my suggestion is to build to query from a object so that you aren't dealing with strings... something like... public class OrderBy { public string Property{get;set;} public bool Descending {get;set;} } public List&lt;Incident&gt; GetAllIncidentsWhereParameters(IEnumerable&lt;OrderBy&gt; sorts) { ... var firstSort = sorts.First(); System.Reflection.PropertyInfo prop = typeof(Incident).GetProperty(firstSort.Property); var querySorted = query.OrderBy(x =&gt; prop.GetValue(x, null), firstSort.Descending); foreach(var sort in sorts.Skip(1)) { System.Reflection.PropertyInfo prop = typeof(Incident).GetProperty(sort.Property); querySorted = querySorted.ThenBy(x =&gt; prop.GetValue(x, null), sort.Descending); } ... } Take this with a grain of salt as it is not tested and just regurgitated..
Can you use them in together? I thought if you use migrations you just initialize your db using that seed method that looks like context.Entity.AddorUpdate()
You can introduce code that has state by accident later, especially if 'you' is 'another developer who doesn't realize the consequences'. If you do that in a static class, you can cause a subtle disaster in your tests by creating state that spans many test lifetimes. You cannot accidentally add static state to instance classes.
Is this something useful: http://www.blackwasp.co.uk/RuntimeCompilation.aspx
Don't mess around with the 2008 Linq.Dynamic, use https://github.com/StefH/System.Linq.Dynamic.Core
Depends on how you set it up. You could even force the initalization. The initalizer for us runs every time the migration runs (push to the database). However to deploy to production we generate the change script, so the initalizer doesn't run again for production ever.
While it might not have been my personal preference, I have used dynamic linq extensively. If you just need something quick and dirty (i.e. you don't care about validating your expression strings), and your lambdas are relatively simple, it works well.
As I stated above, it was a contrived example. For database work, I likely would have a regular class and follow general best practices. My point is more about methods like `Math.Round(1.2)`. It doesn't make sense to have a new instance of "Math," and it's pretty obvious (readable) what's going on here.
Literally anything can happen in the future; you can only do so much to prepare for the unknown, and this is not specific to what kind of class you're working with. In reality, the code will be rejected in a code review. If it is not, then the tests will fail, and the code will be fixed.
I put a lock on my door for the same reason I don't use static types: I'd rather "make it harder to do wrong" than "trust wrong will never happen". When we're talking example-sized problems it's really easy to say "code review won't miss this". When we're talking 2 nights before a critical deadline and a changeset involving a dozen files, well...
you would have to hook into the mechanism that resolves a controller based on the request: "Custom IHttpControllerSelector" https://www.strathweb.com/2013/08/customizing-controller-discovery-in-asp-net-web-api/ but this is WAY more complicated that using a DI container. why do you say "complexity of a container" ? maybe learn some simple DI concepts. DI containers are a simple concept. becoming familiar with one is as simple as picking one and just checking some documentation / samples.
It only makes sense to focus on if it also makes the kata more readable and easier to understand. That's all I'm saying. How is that discrediting anything? It's just a kata. It demonstrates one thing. It's not supposed to teach you to become a professional programmer in all aspects. 
100.000 GCs would probably be noticeable yes, but this is ridiculous to care about in my opinion. It is not unnecessary. It makes the kata simple to understand and still demonstrates testability. I don't care if it looks sloppy code quality wise, because that's not what it's trying to demonstrate.
All Googles lead to that 2000 line linq.dynamic 'library' that MS pooped out into their samples folder in 2008. Please use the updated and developed fork instead https://github.com/StefH/System.Linq.Dynamic.Core
The problem is that real production examples are long and take time to get into. Here I have roughly 100 lines in one file that is quick and easy for any programmer to read. A katas purpose is education within one specific field. Nothing else. People copying this needs to learn the consequences of not understanding what they are copying. I have added a gazillion warnings everywhere that this is not production code, especially after your feedback. I even highlight the areas where the code is not perfect. Look at the kata again. That is also why I am not concerned of anyone seeing this because they can read that I am aware of the faults, and that they are deliberate. 
In this example, the custom file writers file name has the log level of the log method inside of it, so I have to create a new one every time. Please read the step in the kata carefully. It doesn't matter if it's a bad design decision. This very well demonstrates an example of a type of object composition that could occur in production. 
Exactly my point! Thanks. 
&gt; The problem is that real production examples are long and take time to get into. Are you kidding me? Fixing the race condition in the file logger is as simple as adding a lock. (Assuming you ditch the stupid factory.) Sending a real email, maybe five or six lines of code. 
Please stop writing such horribly bad code for you examples. Kata's are suppose to be practice for doing things the right way.
I'm sure it's got some good functionality, but I've not seen any good tutorials on using it. Without tutorials, and without any good documentation, I don't think it's worth people's time to learn it. I can be doing other things.
I really don't understand how a bug in a static class is different than a bug anywhere else, except for the mechanics of what you're describing. It's not as if static classes are the only thing with state, or the only thing that can be carelessly altered. To your final point, such a changeset is problematic; your example perfectly describes why small commits are desired, and why critical changes should not occur so soon before release. This is a process issue, not a code issue.
When you divide two integers, the result is always an integer. Fractions are dropped. 0 x 100 = 0
fuck me lol, thank you!
You're doing integer math into a double, its going to ~~floor~~ *truncate* the value. Here's it fixed with console writes to explain wtf is going on. I didnt fix your final value check bug that adds it to descending no matter the value. I feel like the comments adequately explain where it messed up. private static void ExtractFlow() { List&lt;int&gt; tempDescendingList = new List&lt;int&gt;(); List&lt;int&gt; tempAscendingList = new List&lt;int&gt;(); for (int i = 0; i &lt; numbers.Length; i++) { if (i + 1 &lt; numbers.Length) { if (numbers[i] &lt; numbers[i + 1]) { tempAscendingList.Add(numbers[i]); Console.WriteLine($"Added {numbers[i]} to ascending"); } else { tempDescendingList.Add(i); Console.WriteLine($"Added {numbers[i]} to descending"); } } else if (i == numbers.Length) // this will never happen as your for loop breaks out when i &lt; numbers.Length { tempDescendingList.Add(numbers[i]); Console.WriteLine($"Added {numbers[i]} to descending"); // THIS IF BLOCK IS DOING THE SAME THING ON BOTH HALVES OF IT... so the if block is unnecessary //if (numbers[i] &lt; numbers[i - 1]) //{ // tempDescendingList.Add(numbers[i]); // Console.WriteLine($"Added {numbers[i]} to descending"); //} //else //{ // tempDescendingList.Add(numbers[i]); // Console.WriteLine($"Added {numbers[i]} to descending"); //} } else if (i == numbers.Length - 1) // I assume this is what you actually wanted... but there are a few ways to do this without these if blocks entirely. { tempDescendingList.Add(numbers[i]); Console.WriteLine($"Added {numbers[i]} to descending in the extra else if"); } } var descendingCount = tempDescendingList.Count; Console.WriteLine($"Descending Count {descendingCount}"); var ascendingCount = tempAscendingList.Count; Console.WriteLine($"Ascending Count {ascendingCount}"); var grrIntegerMathDescending = descendingCount / (ascendingCount + descendingCount); Console.WriteLine($"Grr math descending {grrIntegerMathDescending}"); var grrIntegerMathAscending = ascendingCount / (ascendingCount + descendingCount); Console.WriteLine($"Grr math ascending {grrIntegerMathAscending} also look at this values type {grrIntegerMathAscending.GetType()}"); var correctDescendingAverage = (double)descendingCount / (ascendingCount + descendingCount); Console.WriteLine($"Ahh much better math descending {correctDescendingAverage}"); var correctAscendingAverage = (double)ascendingCount / (ascendingCount + descendingCount); Console.WriteLine($"Ahh much better math ascending {correctAscendingAverage}"); double descendingAverage = correctDescendingAverage * 100; double asendingAverage = correctAscendingAverage * 100; Console.WriteLine("Asending average : " + asendingAverage); Console.WriteLine("Desending average : " + descendingAverage); }
you make me realise how sloppy of a programmer I am lol. This was a perfect answer, thank you!
I find breaking up statements helps a lot to find the bug. I did it for you here despite knowing what the problem was to better highlight it. Realistically that entire block could be trimmed down to a few lines but whether that's wise is another matter. Sometimes brevity hides what a function is doing from future you and other programmers. There is such a thing as being 'too cute.'
You just brought back a lot of memories from 2002. Wow.
In my opinion, this is bad practice. A better way to accomplish this would be to use reflection.
if the web application is sitting in front of a sql database you can use powershell to automate generating insert statements, while its not what you would do in production it is a quick and dirty method for generating a lot of data without a lot of dev overhead.
If it's not too much hassle, I'd like to improve my coding in general so if you wouldn't mind giving the trimmed down answer please?
There's a few trimmed down answers. One that comes to mind immediately and fairly easily is using LINQ but this code itself can be cleaner, but only marginally so. I only mentioned them because they are what I would consider fun 'challenges' for a novice programmer not honest solutions to this problem. It goes back to my point about brevity though. I'd advise avoiding 'cute' answers to problems outside of mental challenges as these ones built out like this will work just fine. In addition, the compiler will take what I've written and make it far cleaner in the end if you take out all those Console.WriteLines. It will recognize that variables like descendingCount and correctDescendingAverage are just parts of making descendingAverage and will not actually build them when compiled, as you only end up *really* using descendingAverage; Once you clean up your IF branches to remove the bug it will optimize the FOR/IF blocks too. Declaring variables readonly and const will also help the compiler remove inefficiencies left in your code for readability purposes as well. Edit: I forgot to mention that after posting that code earlier I realized you're missing the case for equality as well. Realistically you'd have three lists; ascending, equal, descending. Edit2: While fooling around with it another bug found... that 4 goes into descending when it is actually supposed to go into ascending.
Wow. That's a lot of useful information. :) I appreciate the help! I wasn't familiar with `System.ComponentModel.Composition` and it's something I need to consider using. I have a strong suspicion I re-implemented some of what's there. :*( &amp;nbsp; I'm not a software engineer, but a programmer writer (I read tons of code &amp; usually write small tutorials or simple internal tools). I'm not ever sure if I'm doing things the "right way" and very rarely am given the luxury of a code review. &amp;nbsp; I've been ripping things apart &amp; refactoring, so the codebase is a bit of a mess right now. This is roughly what I intended for final implementation. I don't know how "bad" the code is; other than me you're the first to see it. :P &amp;nbsp; **RecordStream.cs** &amp;nbsp; // Needs refactoring. public async Task&lt;int&gt; StreamRecordsAsync() { // This is to support concurrent async streams. MemoryStream memoryStream = new MemoryStream(StreamedBytes); int signatureLength = Record.SignatureLength; int byteSizeOfSignature = Record.SignatureLength * sizeof(char); byte[] signatureBuffer = new byte[byteSizeOfSignature]; using (memoryStream) { while ((memoryStream.EndOfStream != true) &amp;&amp; ((memoryStream.Length - memoryStream.Position) % byteSizeOfSignature == 0)) { memoryStream.ReadBlock(signatureBuffer, 0, byteSizeOfSignature); string signature = new string(DataFormat.Encoding.GetString(signatureBuffer).ToCharArray()); if (Regex.IsMatch(signature, Record.SignaturePattern)) { if (DataFormatHandler.IsSupportedSignature(signature)) { Type recordType = DataFormat.RecordTypes[signature]; RecordTypeInfo recordInfo = DataFormat.RecordTypeInfos[recordType]; if (recordInfo == null) { // This will only happen once per unique signature. recordInfo = DataFormat.ReflectOnRecord(recordType); } HeaderTypeInfo headerInfo = recordInfo.HeaderInfo; // Among the hundreds of record types // there are at least 3 kinds of record headers, // each with a set length. int headerLength = headerInfo.Length; byte[] headerBuffer = new byte[headerLength]; await memoryStream.ReadAsync(headerBuffer, 0, headerLength); dynamic recordHeader = RecordHeader.Construct(headerInfo, headerBuffer); // We need to know the length of field data bytes to pull out of the stream. // This usually is specified in the header's first int32 field. // But in one seldomly used header, the field defines the header length // PLUS data fields length. int fieldsLength= recordHeader.DataLength - headerInfo.Offset; byte[] fieldsBuffer = new byte[fieldsLength]; await memoryStream.ReadAsync(fieldsBuffer, 0, fieldsLength); dynamic record = Record.Construct(recordInfo, recordHeader, fieldBuffer); Records.Add(record); } else { // For records not supported natively: Records.Add(Record.Construct(signature, memoryStream)); } } } } } &amp;nbsp; And here is where a record gets instantiated: **Record.cs** &amp;nbsp; public static object Construct(RecordTypeInfo recordInfo, RecordHeader recordHeader, byte[] fieldBytes) { object[] parameters = new object[] { recordInfo, recordHeader, fieldBytes }; dynamic record = recordInfo.Constructor.Invoke(parameters); return record; } // And in the base constructor: internal Record(RecordHeader header, byte[] fields) { Header = header; List&lt;byte[]&gt; chunks = DivideFields(fields); // List&lt;byte[]&gt; // Chunks will either be binary data converted &amp; assigned to a member // OR preceded by a signature denoting the chunk is a // subrecord (a subrecord header followed by a collection of fields and/or subrecords). // // Unlike top-level records, subrecord signatures are not unique // (i.e. a WXYZ subrecord, depending on parent record, // could be an int, string, or a complex subrecord. // // This means subrecords should be streamed like other subrecords, // but their RecordInfo property must be obtained from their parent's // List&lt;FieldInfo&gt; FieldInfos property in the RecordTypeInfo property. AssignFields(); } &amp;nbsp; My original question about constants was from me wanting to easily give type information to users (i.e. `SuperSimpleRecord.Signature`, `SuperSimpleRecord.Info`, etc.) and me not being able to enforce implementation of those properties. I considered implementing these properties with accessors that check for cached reflection data in the dictionary, but it feels like bad form.
First of all, WPF, right? You want to create DataTemplates and a DataTemplateSelector &gt; Typically, you create a DataTemplateSelector when you have more than one DataTemplate for the same type of objects and you want to supply your own logic to choose a DataTemplate to apply based on the properties of each data object. https://msdn.microsoft.com/en-us/library/system.windows.controls.datatemplateselector(v=vs.110).aspx ListView example: http://dotnetpattern.com/wpf-listview-itemtemplateselector Create however many DataTemplates you feel you need and in your DataTemplateSelector assign a DataTemplate based on type.
Oh well, points for admitting it I guess. You're annoyed at "intentionally" bad code, I'm annoyed by people being jerks for no reason. 
Here's a few examples: /// &lt;summary&gt; /// Dont do this, but an example of alternative code /// &lt;/summary&gt; static void ExtractFlowBad() { List&lt;int&gt; tempDescendingList = new List&lt;int&gt;(); List&lt;int&gt; tempAscendingList = new List&lt;int&gt;(); for (int i = 0; i &lt; numbers.Length; i++) { try { if (numbers[i] &gt; numbers[i - 1]) { tempAscendingList.Add(numbers[i]); Console.WriteLine($"Added {numbers[i]} to ascending"); } else if(numbers[i] &lt; numbers[i - 1]) { tempDescendingList.Add(numbers[i]); Console.WriteLine($"Added {numbers[i]} to descending"); } // still doesnt deal with that pesky equivalent operator! } catch { tempAscendingList.Add(numbers[i]); Console.WriteLine($"Added {numbers[i]} to ascending"); } // deliberately writing code that will throw exceptions like this has a computational cost to be aware of. // Do not write production code like this. // Throwing exceptions is fine but throwing them to avoid logic is bad behavior } double descendingAverage = ((double)tempDescendingList.Count / (tempAscendingList.Count + tempDescendingList.Count)); double ascendingAverage = ((double)tempAscendingList.Count / (tempAscendingList.Count + tempDescendingList.Count)); Console.WriteLine($"Ascending average: {ascendingAverage.ToString("P")}"); Console.WriteLine($"Descending average: {descendingAverage.ToString("P")}"); } /// &lt;summary&gt; /// Better designed but if you wanted to it can still be cleaned up. This would be a good 'stopping' point imho /// &lt;/summary&gt; static void ExtractFlowMovingOnUp() { var tempDescendingList = new List&lt;int&gt;(); var tempAscendingList = new List&lt;int&gt;(); var tempEquivalentList = new List&lt;int&gt;(); for (int i = 0; i &lt; numbers.Length; i++) { // The i == 0 short circuits the right hand side of the expression before it can throw an exception // Note that the || operator short circuits while the | doesnt. There are very few instances where the // | operator is advisable over the || and can be a serious headache for locating bugs if (i == 0 || numbers[i] &gt; numbers[i - 1]) { tempAscendingList.Add(numbers[i]); // by using the nameof operator to reference the variable, in the event that you decide to change the name of it // the debug calls reference the correctly updated name now without you having to manually update all instances of it Debug.WriteLine($"Added {numbers[i]} to {nameof(tempAscendingList)}"); } else if (numbers[i] &lt; numbers[i - 1]) { tempDescendingList.Add(numbers[i]); Debug.WriteLine($"Added {numbers[i]} to {nameof(tempDescendingList)}"); } else { tempEquivalentList.Add(numbers[i]); Debug.WriteLine($"Added {numbers[i]} to {nameof(tempEquivalentList)}"); } } var descendingPercent = (double)tempDescendingList.Count / (numbers.Count()); var ascendingPercent = (double)tempAscendingList.Count / (numbers.Count()); var equivalentPercent = (double)tempEquivalentList.Count / (numbers.Count()); Console.WriteLine($"Ascending Percent: {ascendingPercent.ToString("P")}"); Console.WriteLine($"Descending Percent: {descendingPercent.ToString("P")}"); Console.WriteLine($"Equivalent Percent: {equivalentPercent.ToString("P")}"); } /// &lt;summary&gt; /// This is a 'cute' method /// &lt;/summary&gt; static void ExtractFlowProbablyTooFar() { var movementDictionaries = new Dictionary&lt;string, List&lt;int&gt;&gt;(); movementDictionaries.Add("Descending", new List&lt;int&gt;()); movementDictionaries.Add("Equivalent", new List&lt;int&gt;()); movementDictionaries.Add("Ascending", new List&lt;int&gt;()); for (int i = 0; i &lt; numbers.Length; i++) { var index = i == 0 ? 2 : numbers[i].CompareTo(numbers[i - 1]) + 1; movementDictionaries.ElementAt(index).Value.Add(numbers[i]); Debug.WriteLine($"Added {numbers[i]} to {movementDictionaries.ElementAt(index).Key}"); } foreach (var movDict in movementDictionaries) Console.WriteLine($"{movDict.Key} Percent: {((double)movDict.Value.Count / numbers.Count()).ToString("P")}"); }
But it is still not relevant, hence clutter.
No, testing does not require eliminating inheritance - I never said that. When inheritance is used for code-reuse instead of polymorphism though, it can make things easier to test if you switch to composition. Then please, enlighten me by submitting a pull request or being more specific about what needs to be done to make the code "clean". If it introduces more lines of code though, I will not add it in (unless it is very few lines). I have pointed out many times and in many ways in the kata all the fallacies and things to avoid. How is that not enough?
Please, feel free to enlighten me with a pull request. You could have written 5 pull requests by now instead of being so damn mad and offensive.
Exactly my point too. Statics are okay if it has no "object" dependencies, and does something simple (and understandable) that can still be tested without faking anything out.
Fixing all of the null reference exceptions, race conditions, and unnecessary memory allocations would be a great first step. 
Thank goodness there are people like you because the failed projects that result from this kind of thinking keep me in business.
I have to agree that the number of times this phrase has been thrown around in this post has bugged me quite a lot as well. The heart of the matter, I think, is that when you say this it makes it sound like the application of TDD (and testing in general, truly) is more important that the overall quality of the code. It feels inflexible. It seems dogmatic. It disturbs me even more in a kata, which is supposed to be a flow exercise on how to program. The focus of every step should drive home how to write good code. Clean, maintainable, and functional (working) code is almost always testable, so it should always be the goal.
Removed: Rule 4. If possible, provide code of your attempt and data types. If you can get your MySQL enum value to either an integer or string representation, then you can convert it to your enum type. If an in integer, you can just cast it: int mySqlEnum = 4; CSharpEnum enumValue = (CSharpEnum)mySqlEnum; If a string, if the values match the C# enum names, you can use the [`Enum.Parse`](https://msdn.microsoft.com/en-us/library/system.enum.parse%28v=vs.110%29.aspx) method. If neither of these are applicable, you can do it manually by creating a utility method that checks each possible value and returning the equivalent. For example: public static CSharpEnum ConvertMySqlEnum(MySqlEnum mysqlValue) { if (mysqlValue == "option 1") return CSharpEnum.FirstOption; else if (mysqlValue == "somethingElse") return CSharpEnum.AnotherOption; else throw new InvalidOperationException("Could not convert enum type."); } You'll probably have to alter that conversion method to however it makes sense for you. I have no idea how that mysql enum type is represented in C#.
You can do that, but you almost certainly don't want to. Can you give us a pinch more info as to what the application is? You can almost certainly accomplish what your goal with just a touch of reflection instead of getting into the hell that is run time compilation.
Assuming you don't want to use the standard library functions that do exactly this, there's still a much, much simpler way to do this. Think about how many binary digits there will be for each octal digit. 
&gt; sloppy Nah, learning.. No one knows a new language right off the bat.
Why do you need it dynamically from a string? Normally, you wouldn't want to execute any arbitrary string that you receive from an un-trusted source, but if it's all local it might be okay. I don't know if C# can do this but other scripting languages can via eval().
I was looking through the code, and this caught my eye: `await (Task.Run(() =&gt; DataSource.DatabaseMetadata.Preload()));` I looked into the `Preload()` method in Tortuga.Chain, and see that the method is not async. In fact, it, and the methods it calls, return `void` and not `Task`, and so are not awaitable. You may already know this; wrapping the call in `Task.Run` will cause an available thread to execute `Preload()`, while your original thread is now "awaiting" that thread's completion. No asynchronicity is accomplished by doing this, and now two threads are occupied. Simply calling `DataSource.DatabaseMetadata.Preload()` will give you the desired effect with a single thread, and this will allow you to remove `async` from the method prototype, which then removes the async state machine that would otherwise be compiled.
&gt; var index = i == 0 ? 2 : numbers[i].CompareTo(numbers[i - 1]) + 1; Can you explain, or link me to a .net page, for how to use the '?' character like you are doing in this line? Please and thank you.
That's intentional. It prevents the UI thread from being blocked while the Preload operation is running on a background thread. It's not really asynchronous, but it is concurrent. *** Ideally though I would go back and make an asynchronous version of preload. 
Generalizing to n lights is pretty pointless. If you have a traffic light with more than three lights it's almost certainly not just going to transition between the n states one after another, you're going to have either something like an advanced green or a pair of physical traffic lights that co-ordinate with each other. Or an even more basic complication of different lengths of time for each light.
[Conditional operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator)
Werd, I forgot about the WPF part. In that case, you may want to consider using cancellation tokens.
Yea, that's not a bad idea. I'll probably do that at the same time I make an async version of Preload.
&gt; (condition) ? (if true result) : (if false result) In that case above &gt; (is i == 0?) ? (if true, return 2) : (if false, return the comparison) Just keep in mind that both results must be the same object type. You cant* have the true result return a double and the false result return a Person object. ^^^^\* ^^^^There ^^^^is ^^^^a ^^^^method ^^^^to ^^^^do ^^^^it.... ^^^^but ^^^^don't ^^^^do ^^^^it ^^^^as ^^^^a ^^^^general ^^^^rule ^^^^99.99999999% ^^^^of ^^^^the ^^^^time Edit: As an aside, that 2 in there is an ugly magic number. The 0 and 1 are not, but that 2 would be a flag on a code review for me. Magic strings, on the other hand, abound in every response suggested thus far but those are not that big of a deal (imho) for the scope of the function by comparison to that 2.
Good point. I seemed to have tailored parts of my solution to his problem while generalizing other parts.
Hey, don't worry - almost everyone run into this :)
&gt; You're doing integer math into a double, its going to floor the value. It actually truncated it, not floor it. Flooring would mean that `3 / 2 == 1` and `-3 / 2 == -2`, but in C# the latter is `-1`.
I think you should try to search more than 1 second on google for "asp.net send automatic email". The first link describes exactly what you want to do...
Why 2002? Care to elaborate?
How so? I don't make the kind of mess that has to be cleaned up - my GUIs can easily be swapped out.
I think what you mean to say is "I've recently started learning asp.net". As for the actual question, it's quite vague, especially since your current project's state is currently in the "I would like to create a website" phase.
Plot twist: that Google search leads to this very thread
I left you some code review issues on your github, let me know what you think. I also have some general advice - learning how to write software well (how to be a software engineer) is much more than just learning how to use a language. One thing I tell people is that 'being good at a C#' is often not the right goal to have, or at best it's misleading. Yes, you should know how to use the language, but that's just the first step. Just because I know English doesn't mean I'm a good novelist; just knowing C# doesn't mean you're a good software developer. Ultimately, your job is to solve problems, and as such, problem-solving skills often are more important than familiarity with any one language. Yes, you should continue to learn the language. However, being a good software developer requires many different disciplines. * Knowing how the machine itself works - how instructions work, and how memory accesses work. What are memory barriers and why are they needed? Why do some low-level memory accesses have to be aligned to a certain byte boundary? What are the major differences between common 64-bit CPUs and 32-bit CPUs? What are caches? What's causes cache misses? * Knowing how the OS works as it applies to user programs - thread scheduling, IOs, process/thread priority, syscalls, memory allocation, virtual addressing/virtual memory. * Understanding concurrent and parallel execution; understanding threading, the many types of locks, and safe concurrent memory accesses in general. * Understanding how networking works - sockets, UDP, TCP, routing, switching, subnets, performance concerns, etc. * Understanding security - cryptography, authentication, authorization; understanding just how absolutely difficult security is to get right. * Understanding databases. Schema normalization to reduce duplicated data and make inconsistencies impossible; schema denormalization to improve performance - "Nosql" versus standard relational paradigms. * Software architecture - how to build large programs that solve problems by breaking the problem apart into smaller pieces, solving each part individually, and combining things back together. The hard part is designing things so that they can be broken apart, but put back together in a way that is useful to solving the problem. This takes years and years to learn well.. * Understanding object-oriented language concepts - polymorphism/interfaces/inheritance/virtual/override/etc. Encapsulation. Single Responsibility Principle. Liskov substitution principle. * ... man I could go on forever. Publish. Do projects. Get feedback. Solve something real-world and discover how much you like or dislike your implementation. Try to change your implementation and see how well or how poorly the design handles future improvements. Build big projects. Get experience with having to break things apart into smaller projects, and then systems of classes, and then classes, and then methods. Use code analysis tools like StyleCop, but evaluate their output with a critical eye; use them to figure out if you have problems you hadn't considered. For instance, your `DateTime.Parse()` code might work fine on your computer, but might break on my computer because my default formats are different. How do you handle culture-aware parsing and code in general? If you have any questions for any reason, shoot me a line and I'll try to help you as best I can.
Thank you! I will look into it! ;)
You can send emails with the System.Net.Mail using the SmtpClient class. If you google this you will find examples. However, this is not good to use in a production environment as your emails will most likely get flagged as spam. To do it properly, your best bet will be to use a third party service that sends emails on your behalf. Preferably you will own a domain such that you can set up DKIM signing with this provider. AWS Simple Email Service is very cheap and a pain to get working. SendGrid is a doddle to get working but costs quite a bit more. You will also need to set up a system where your users can opt out of automated emails.
thank you :) 
rofl
I agree, a bit of reflection with a join or group join (it's late I don't remember which you want here). 
This is way more constructive and easier to relate to than what /u/grauenwolf has been saying. Thank you. Can you come up with suggestions on how to improve the code quality without cluttering the code and making the kata harder to understand?
The trick to preventing flicker when drawing to controls is to use a buffer. First draw all your rectangles etc to an internal Bitmap, then draw the finished Bitmap onto the control. I've made a simple class for this a while back, [if you want to take a look](https://github.com/rakijah/CommonUtils/blob/master/CommonUtils/CommonClasses/DoubleBuffer.cs).
Removed: Rule 4.
Removed: Spam. Please familiarize yourself with the [Guidelines for self-promotion on reddit](https://www.reddit.com/wiki/selfpromotion) and participate in submissions and discussions outside of your own content.
Prepered should be prepared. Why not just pass in a Hashtable and use results added to that to match key/values?
Fields absolutely require memory allocation, and likely initialization too.
To the best of my understanding, yes. When a class is created allocates a single block of memory in which each field resides. So yes, it does impact memory usage but as for performance I would be on the side of saying no. The performance impact is negligible if your class only contains primitive types such as bools, ints, and floats. I'm sure someone else can correct me on anything I'm mistaken on but I thought I would leave my 2 cents worth seeing as there were no other replies. 
**EDIT :** I answered this post thinking it was in the C++ subreddit, my bad... This answer is primarily for C++, C# has different memory model, nonetheless the first sentence still applies. Yes, definitely. When you create an object it allocates memory to hold the content of the object, that means *at least* all the fields. Things can go in extra, for example virtual (function/base) tables takes up the size of pointer, there is also padding when fields are being aligned. As for performance, it all depends on if your fields constructors are heavy. Knowing that each field has itself fields that could have potentially heavy constructors etc ... In general you simply perform data initialization in constructors, you're not supposed to do logic, so it is fast enough. By default, primitive types are not initialized, but class and structs constructors are called. (for C# however it is different, see the comment under me)
I don't think this can be answered for all OO languages. The details are too likely to vary between languages and platforms. In C#, two objects with differing numbers of fields should really only require different amounts of memory if the total memory required by their respective components is different. If all field initialization is implicit (so, to the default value for the type of the field--null for references, 0 for values) and only the default, generated constructor is called, the cost of creating the objects ought to be the same, or very close. I did some tinkering with a decompiler to reach this conclusion, but you could probably do some pretty trivial benchmarking to confirm or deny it, if you're really worried about winning whatever argument you're having.
I am a big fan of DocFx https://dotnet.github.io/docfx/
Brings me back to my college days and recruiting floormates to join my digital gang to steal drugs, make money, etc. Staying up late to steal from the others in the game and waking up to see how much damage our gang took. Twas a lot of fun. I think the game was called Drug Wars. Maybe it was Gang Wars? Honestly I don't remember for sure but nonetheless it brought back the memories.
Try it and see for yourself. This is easy to benchmark.
&gt;primitive types are not initialized, but class and structs constructors are called In C#, all fields are guaranteed to be initialized to their default value, which in practice means they're all zeroed. Class fields will simply be null references, and structs can't have a custom parameterless constructor. An empty constructor without field initializers will not call any other constructors (other than its base constructor).
Yes, and no constructors are called. 
Ah yes, you're correct. I rarely do it so I couldn't remember correctly.
Outside a tight loop - who cares? Inside a tight loop - you'll want to preallocate your instances outside the loop.
Yes, he can be abrasive, but (ignoring delivery) I agreed with most of his points here. Honestly, I haven't looked at the whole repo in depth however, so I'll have to clone it tonight and get back to you. 
Worst answer here. I'd tell you why but I'm making the punishment fit the crime.
GC pressure is a concern. The more memory you allocate, the more often the garage collector has to run. When .NET first came out Microsoft talked a lot about how great mark-and-sweep garbage collection was. In particular, how allocations were simply a pointer increment instead of the expensive interlocked increment needed by reference counting style garbage collection used by COM. Also how their 3 generation GC is faster than older designs that only had a single generation. And that's all true, but over the last 5 or so years Microsoft has changed their tune. .NET's GC is faster than COM's GC. But "faster" and "fast" aren't the same thing. Garbage collection is still a major source of performance problems for many applications. So if you can avoid performing unnecessary allocations your application will be faster. **** Another consideration is object size. The larger the object, the fewer of them you can put in a single CPU cache line. CPU cache misses are really expensive. Even a L1 cache miss (i.e. data needs to be read from L2) can cost you 12 CPU cycles. Hitting actual RAM increases the penalty to a couple hundred cycles. ref: https://stackoverflow.com/questions/1126529/what-is-the-cost-of-an-l1-cache-miss 
I looked for the solution on google and found it on the first link. It's not nice to tell people to search, but you have to search by yourself if you want to be successful in programming. Asking for help without making the effort to go on google for a trivial question is not respectful IMO. 
Why? OP gets a definitive answer to their question under the circumstances most relevant to them. The only other answer that can be provided with certainty is "it depends". If you think my answer was bad because it was lazy, fine, here: https://pastebin.com/zMg06iZj tl;dr yes the number of properties and methods matters. 
This comes up. The recommendation is, "don't ask, just do it. If there is interest, you will know..."
That would be great, thanks! 
There are huge differences between OOP languages. In C#, you pay the heap allocation and 0-initialization for every object (class type instance). For structures (value types), you pay for 0-initialization. In C++, you can allocate objects on stack and they can be "embedded" in other objects, so you can avoid paying for the heap allocation a lot of the times. C++ also does not have 0-initialization by default. You can do it, but you don't need to, and people generally don't, because it is obviously faster to initialize members to the right value from the get-go. C# virtual machine should get tools to avoid heap allocation if not needed (java does that, it's called escape analysis), don't know when though.
Resharper has multiple classifications of code issues. Real-time inspection applies the green/yellow/red indicator based on whether there are warnings or errors. The inspection report may be showing things that are classified as hints and suggestions. Try grouping by issue severity.
Yeah, I get errors in code severity when running the resharper &gt; code issues in solution, but get different numbers when I press alt f11. I feel like there's something I'm missing here
Different inspection lists, maybe? Alt+F11 is Visual Studio's built-in code analysis. It and Resharper do not perform the same inspections.
This is actually pretty cool
Because op specifically asked what's going on at a lower level, not just if it was slower.
It's not lazy, it's arrogant and dismissive. It's not as bad as "Why would you want to know/do that?" I guess, so you have that. The number of methods doesn't have an effect on the time it takes to create an object. It is not the number of fields that affects the creation time it is the combined size of the fields + initialisation logic. 5 int fields will take roughly half the time of 5 long fields. One int[] of length 5 will take 5 times as long. Your example code will also show there's a sizable difference in how long it takes to allocation 100,000,000 Smalls against 100,000,000 more Smalls. You did well using the Stopwatch class and also running the comparison multiple times. 
And honestly, well done for posting some code. You're not lazy :)
Thanks - if it hadn't been for /u/TheManFromOregon pointing me in the right direction, I'd be biting your hand off for that. But it's fixed now, and I doubt I'll need to do it again in the near future so I'd be no use to you as a beta tester. Good luck with the project though!
&gt; Request for the permission of type 'System.Security.Permissions.FileIOPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed. :(
Ok, so even though it is a resharper icon, the solution analysis bootstraps visual studio, but inspection uses its own list. Confusing, but sort of makes sense. I'll do some tests
**[Fixed your link? Click here to recheck and delete this comment!](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=delete&amp;message=delete%20dnyejaa)** ***** Hi, I'm a bot that links Gyazo images directly to save bandwidth. Direct link: https://i.gyazo.com/aeb5de4ecf1287cfdd2f050a895f30ff.png Imgur mirror: https://i.imgur.com/dJoVYZy.png ^^[Sourcev2](https://github.com/Ptomerty/GyazoBot) ^^| ^^[Why?](https://github.com/Ptomerty/GyazoBot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/u/derpherp128) ^^| ^^[leavemealone](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=ignoreme&amp;message=ignoreme)
*Holy shit* that's even more useful than I thought. 
&gt; resharper icon This confuses me. I'm pretty sure the entire Analyze menu is built-in stuff, and I don't see any ReSharper icons in the menu (even under the ReSharper menu!). What version of Visual Studio and ReSharper are you using? Can you screenshot the menus you're looking at?
Here you go. I'm almost certain now, its just pre-friday brain farting. Going to try and turn off code analysis and just have the resharper inspection. See whether the tick represents resharpers analysis, rather than the microsoft rules in Analysis configuration. https://ibb.co/nL4LgG
User name doesn't check out.
How-would-you challenge is every day at work. 
Okay. That is a bit weird. Analyze-&gt;Run Code Analysis on Solution/Alt+F11 is the built-in/Microsoft analysis. It's run against the built code, and the errors/warnings show up in the error window, same as build errors, warnings, and messages. (I'm still curious to know what version of VS you're using, since it doesn't appear there on mine--there's an equivalent item, but that specific one + the keyboard shortcut shows under Build on the installs I have at work and at home, in VS2017 and VS2015.) That can definitely turn up different issues than the other two analysis features. "Errors/Warnings in Solution" is definitely a ReSharper thing. I haven't been paying attention to solution-wide analysis, lately, so I'm not 100% why that would disagree with ReSharper's on-demand code inspection. Memory suggests that the Solution Wide Analysis feature gets out of sync or is flakey for anything other than very small solutions and files, which is probably part of why I stopped paying attention to it/turned it off.
This wasn't always the case. When they were beta testing try.dot.net you could use Directory and File io. Including messing with the docket container. Shame they took it out. Being able to destroy a machine without damage is a super handy feature.
Can you point to any URls on how this uses Docker?
Oh yeah I remember that. It still didn't allow much write access, and the whole thing was chrooted (so no /etc/passwd access :( )
Anders H. wrote that. 😁
Oh yeah, mad props to the dude who pooped that out as a side project in 2008, just tired of seeing a million copies copy-pasted into projects when there's a better public version that incorporates all those added features already. Maybe butthurt over using an edited version myself adding a casting feature and feeling like a boss, only to find this fork with a better implementation later. Cheers!
I shouldn't post when drunk, sorry m8
https://blogs.msdn.microsoft.com/mvpawardprogram/2015/12/15/getting-started-with-net-and-docker/ https://blogs.msdn.microsoft.com/webdev/2016/11/16/new-docker-tools-for-visual-studio/ https://blogs.msdn.microsoft.com/dotnet/2017/05/25/using-net-and-docker-together/
Thanks. I was looking for more specifically how that site was supporting submitting code to a docker container. I understand docker and .net core.
https://www.codeproject.com/Tips/715891/Compiling-Csharp-Code-at-Runtime
very, very cool.
 Request for the permission of type 'System.Security.Permissions.EnvironmentPermission, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed. at System.Security.CodeAccessSecurityEngine.Check(Object demand, StackCrawlMark&amp; stackMark, Boolean isPermSet) at System.Security.CodeAccessSecurityEngine.Check(CodeAccessPermission cap, StackCrawlMark&amp; stackMark) at System.Security.CodeAccessPermission.Demand() at System.Environment.get_UserName() :(
https://stackoverflow.com/questions/1099266/c-sharp-assign-1-dimensional-array-to-2-dimensional-array-syntax https://stackoverflow.com/questions/12567329/multidimensional-array-vs
It took my face from my github profile picture. As for the Readme, there are plenty of examples? Not sure what you mean. 
In short, this is because a 2 dimensional array is not an array of arrays, it's actually a single dimensional array of one type, and the compiler performs some maths to map the two indices to a single address under the hood. It basically turns `array2[3,4]` into the equivalent of `array[3 * array.Lengh + 4]`. There's no such thing as `array2[0]`, because there's no semantics built into C# to get a slice of that underlying block of memory and turn it into another sub array - it's really problematic for GC and there are many reasons why you don't want to do that (However, we now have array slices, but these are pretty niche, are only really used for performance purposes, and are only allowed to exist on the stack). If you want to accomplish the scenario you posted, you can use a staggered array, which *is* an array of arrays. The syntax for that looks like: float[][] array2 = new float[2][] This means "make an array that is 2 long, that will hold float arrays". Note that when you do this, none of the sub arrays exist yet - they're all initialized to `null`. Each sub array needs to be assigned to a float array before it can be accessed, and each sub array can be a different length. 
i wish.
I'm so glad this got shot down in spectacular fashion. Automatic documentation of thrown exceptions and code warnings are more than good enough for most use cases.
The enum class issue is going to be fixed by more flexible extension methods (extension-everything). You write the enum, and then a static class of extensions for that enum, including extension methods, propertys, or operators. This allows high performance, non-classy integers, with all the benefits of having methods and properties hang off them. 
You mean the Facebook adaptation by Zynga? Wasn't that called Mafia Wars? Played that for a while. If I remember correctly it was like a good mix between oGame and Drug Wars. I'm porting the original back from the DOS days however, so sadly (?) no multiplayer. Might be a fun challenge for the next iteration to invent that for the console :)
Why do you have casts in your TypeScript for every options object? That should absolutely not be necessary.
* edited for formatting For starters, I went ahead and made some changes based on feedback from /u/graunenwolf * [Func over factory](https://www.reddit.com/r/csharp/comments/73zyu4/i_have_created_a_testability_kata_with_excercises/dnvhefu/) was actually a very nice suggestion that simplified the code. * [Eschew superfluous interfaces](https://www.reddit.com/r/csharp/comments/73zyu4/i_have_created_a_testability_kata_with_excercises/dnvhke2/) is a point that seems to have been lost on many developers in this age of IoC container worship. I give you a 2/5 instead of 0/5 on this one, though. Two get mocked in tests, which is *raison d'etre* enough for me. One is the now-dead factory. The other two were just unnecessary. Final total: Project down 3 files and 42 lines from where it started. They're sitting on a fork. I merged everything up through step 9. I looked at the IoC container addition in step 10, but I don't have energy to learn Autofac enough to figure out how to add the Func&lt;T,R&gt; dependency. Beyond the code itself, a fair amount of the feedback seems to be regarding your presentation of the material. Take for instance [inheritance vs SOLID](https://www.reddit.com/r/csharp/comments/73zyu4/i_have_created_a_testability_kata_with_excercises/dnvj9il/). This was on point. I can't even add anything to this, except that you asked for a source. [Wikipedia](https://en.wikipedia.org/wiki/Open/closed_principle#Meyer.27s_open.2Fclosed_principle) has your back. The [composition vs inheritance](https://www.reddit.com/r/csharp/comments/73zyu4/i_have_created_a_testability_kata_with_excercises/dnvj9tu/) argument was also good. The trick is that we *prefer* composition to inheritance. The degree of danger in using inheritance is magnified greatly by how far in violation of the SRP you are. If you're not, then this is low. A few points on the matter: * To your counter-example that using inheritance requires the duplication of many tests: Only at a glance. In practice, if you have public members in a parent class, then there should be an analogous test file. Ideally, each child object runs these tests, in addition to its own. This is also a validation of the LSP. * Typically my base classes have protected members that I want or need access to in the children. If I try to force composition in this instance, I must make my members public in the base and violate encapsulation. * Using composition over inheritance actually makes setup more involved, as you've now made the "parent" object a dependency. Getting [down with the static sickness](https://www.reddit.com/r/csharp/comments/73zyu4/i_have_created_a_testability_kata_with_excercises/dnvgob1/) is a good thing as well. /u/Ravek was on the same track when he spoke of functional principles and testing. Methods and objects that are [pure](https://en.wikipedia.org/wiki/Pure_function) are perfect candidates for acceptable static methods and objects. And last but not least, most - if not all - the rest of the feedback can be summed up by saying, "Don't stop now!" Throw in another refactor for magic strings. Another for [race conditions](https://www.reddit.com/r/csharp/comments/73zyu4/i_have_created_a_testability_kata_with_excercises/dnvi4if/). These things make the code safer, cleaner, and more testable. Now coming out the other end of this experience (which has apparently consumed my evening...), I think the problem is that "focus on testability, ignoring clean code and performance" isn't really properly conveying the idea that you want it to. Based on the blurb at the end of your readme, I'm going to guess that what you mean to be saying instead is, "the focus here is on refactoring code to adhere to SOLID principles" and then explain the additional possible refactors around concurrency and magic strings (if you really didn't want to make the changes for some reason, but it would be better to do so).
https://www.dotnetperls.com/jagged-2d-array-memory
Have you seen F#'s units of measre?
Does it support making html files yet without needing an inexplicable server running?
To simply make it easier for people to see what the object is called. They can then go and look it up in the github repo without having to clone the code themselves. It's entirely for that purpose alone. 
If you already have a fork, could you make a pull request and send that? Thanks a lot, very useful! Wow! Very impressive. 
I am curious about the downvotes. I wish more people would leave feedback as well, so that I can improve.
Thanks again. Information I already knew. I guess I was wondering what leads you to believe that the REPL implementation on those MS pages is using Monaco + Docker? Are you the developer that worked on it? What is your inside knowledge? Thanks for sharing.
Removed: Rule 3, Rule 4. Might be able to leverage the resources in /r/learnprogramming, /r/programmingbuddies, or the game/platform specific reddit (perhaps /r/unity3d?)
One thing you can improve on, what I always consider highly suspect: Don't commit build artifacts to source control. The ".d.ts", the ".js", and the ".js.map" files all do not belong to the source control. They're generated build artifacts.
Id post in r/Unity3D
Yep. Trying to do it in C# because i can.
What u/crozone said nails it. I'd only add that unless you're in need of performance, use List&lt;float&gt;, or List&lt;List&lt;float&gt;&gt; Will make your assignments like this a bit more sane. Another note is that there have been very few instances in my career where I've needed arrays of arrays. They do have their uses but often you will find arrays of objects who hold arrays more useful, especially when you decide you want to add more functionality.
This doesnt really seem like a C# question, more of a math question. Also I dont see how anyone can answer this better than you because you know what would make your game fun. However, I'll take a quick stab at it: You basically want to generate a single integer, which represents the item to spawn. 0 would be a completely neutral item, -1 would be a slightly negative item, -10 would be a really bad item. 1 would be a slightly good item, and 10 would be an amazing item. So you need a formula that generates an int between -10 and 10. There are a million ways to do this, but something like this might work: 10 - ( (currentlevel / maxlevel) * difficulty) - random.Next(0, 5) So thats starting from best possible score (10), subtract an amount that corresponds to his level and difficulty selection. Then also subtract a random amount to keep things interesting. 
Assign each of those a probability from 0 to 1. Multiply them together. See if the result exceeds your criteria for a negative result, or for a slightly higher result, gets them a positive result.
Does this support or enable something that typewriter doesn't?
Like I said: I wasn't able to fully integrate the changes in all branches because I didn't want to put the effort into learning autofac. That's why I didn't make a pull request.
What if you are using git for node packages 
I consider packages from a repository artifacts too. I would absolutely not add them to source control either. They're easily restored, and most repositories do not allow to delete packages (only unlist).
Yup, that pretty much sums it up.
Ah that's a shame. The changes without autofac would have still been fantastic. But I'll try to do it myself. Thank you so much! 
Well for one it doesn't require any tooling in your IDE. If used with gulp or grunt, it will automatically generate models for you even if you haven't compiled yet. It doesn't require getting to know some kind of template language either, and only needs your cs files to run. And then I believe this is also more flexible. Not sure because I haven't used typewriter a lot. 
But I think he means what if someone installs the package from the repo instead of from NPM. 
This was before Facebook. It was like a website and turn based.
Currently writing a mini command line app to demonstrate the different ways to unit test and mock C# code. I'm using CommandLineParser but there's a super annoying way it handles what I'm doing and IMO kind of defeats the purpose of using that in the first place. I'm going to give this a shot. Thanks!!
I would also add a "weight" multiplier to allow for a better tuning Edit: meant this in reply to xampl9
I had IT at work setup a VDI with fresh windows 10 and I left VS 2017 enterprise open with no project even opened once. It keeps crashing and I haven't logged into the machine in 4 days. 16GB ram.... definitely something wrong with VS memory usage.
I made some progress, it seems to have something to do with the fact that I have a list. I tried passing in IBaseB as a single item rather than a list and that seems to work.
While Cat and Dog inherit from Animal, and I can pass a Cat or a Dog instead of an Animal, it doesn’t mean I can pass a List&lt;Cat&gt; to a method that accepts a List&lt;Animal&gt; because within that method I could add a Dog to it when it is in fact a List&lt;Cat&gt;. Read on covariance and such and look into using IEnumerable&lt;Animal&gt; instead which will work as you need.
If you’re familiar with docker compose files and writable volumes this https://github.com/dotnet/docs/blob/master/docs/csharp/quick-starts/hello-world.yml Should give some insight.
Monaco is a code editor: https://github.com/Microsoft/monaco-editor ...sorry, couldn't resist :) But [according to Scott Hanselman on Twitter](https://twitter.com/shanselman/status/910956848001425408), it's using containers on linux, which (probably?) means docker. That was when they were beta testing [try.dot.net](https://github.com/dotnet/try) which looks like the same system that's powering the tutorial.
I would suggest an option to create both interfaces and classes. Because the initialization and typecasting syntax/behaviors are not identical for classes and interfaces, sometimes you actually need the class. A prime use case for this is testing : I want to instantiate an object of type X but only populate a small subset of properties. the &lt;&gt; syntax will not let you do that because it will claim the shape of the JSON does not meet the interface. But with a class you can just instantiate and populate the 2 fields you care about. 
/u/SirSooth is right. For help on a possible solution, can you post your code either via a link or use reddit code formatting to make things easier to understand? I am having trouble understanding what you are ultimately trying to do with the viewmodels. Also, instead of using "BaseA" or "Class1" for examples, you should be more specific. For example: BaseA =&gt; ViewModel BaseB =&gt; MemberViewModel Class1 =&gt; PrimeMemberViewModel Class2 =&gt; RegularMemberViewModel BaseC =&gt; ApplicantViewModel Class3 =&gt; LoanApplicantViewModel Class4 =&gt; MemberApplicantViewModel I hope that example conveys what I mean.
The listDrinks array has been created, but none of the items within it have been initialized. You're trying to access a property of a variable that hasn't been initialized. Once you initialize all the Drinks in listDrinks, this should be able to work. 
yeah, sorry about that, it's a little hard to explain. I'll read up on what /u/SirSooth posted and see if that helps. I figured if I just had to do a sum on a field available through the interface then any objects passed in would be fine as long as it implemented that interface.
you would have to play with the numbers a bit to match what you are looking for, but you could simply generate a random number between zero and the number of levels you have, subtract the difficulty, and if your random number is at or below the current level, you spawn negative. Otherwise spawn positive. int maxLevels = 30; int currentLevel = 10 int difficulty = 3; var r = new Random(DateTime.Now.Ticks).Next(0, maxLevels) - difficulty; bool spawnBadItem = (r &lt; currentLevel) ? true : false;
It’s not too bad but you probably want an injection framework like Autofac or something which will tidy it right up. 
Perfect, that works. I understand the risks of doing this but in my case I won't ever be adding to this list only doing a sum of a property so I should be fine. thanks :-)
LstDrinks[0] = new urcls(){prop = val} Edit: Also those fields you have are unused 
Yeah, what /u/Silamoth said. Drinks[] listDrinks = new Drinks[3]; Drinks drink = new Drinks(); drink.Name = "Whiskey"; drink.Price = 25; listDrinks[0] = drink;
Waiting for my bug report to get noticed. It's been &gt;3 months and it's *supposedly* under investigation.
Classes are reference types and initializing Drinks[3] array will create an array of null references. You'll need to instanciate array elements using _new_ keyword. It would work as is if drink would be structure.
In that case, would you mind providing a workaround for [the original issue](https://developercommunity.visualstudio.com/content/problem/75111/visual-studio-crashes-randomly-and-throws-exceptio.html)? Thank you!
Dots all connected. Scott is the man. Hopefully we will hear more about it like how they limited CPU time.
There is nothing inherently wrong with Reflection/Introspection but you should always be concerned when you come across it because people abuse it. Not only do they abuse it but they often walk around thinking that what they did is good, or cool, or some awesome hack but nineteen times out of twenty it is fragile, unmaintainable, and slow.
This is the other other option. Here is a similar question: https://stackoverflow.com/questions/11811856/attach-debugger-in-c-sharp-to-another-process
int ** void * const char *
Autofac is an IoC contrainer, it has absolutely nothing to do with what the OP is asking.
Autofac is an IoC contrainer, it has absolutely nothing to do with what the OP is asking.
It's sometime acceptable, but I would seriously advocate for documenting why would you use reflection for this particular problem. I use Meta-programming sometime when I'm working against the clock, for an example, instead of typing out query for each member of a class (some of those are 400+ members written by co-workers), I would simply grab a collection of properties for a class and query each one in a tiny snippet of code as opposed to making repeated calls.
And I would add: untestable. When using reflection, it become difficult to replace an instance with a mock so testing might become an hassle.
Nice! Great to learn.
Seems like a perfectly reasonable use of reflection to me. You may find that a plug-in or dependency injection framework does that for you, but it would still use reflection internally.
Everything you can do in C# has a use case. Reflection is no different, but I would caution against using it if you can come up with another solution that is clean. I would not consider what you have here to be bad practice.
I ended up doing it like this. Do I use a lot of memory this way? public void listAlcohol() { List&lt;Drinks&gt; alcoholList = new List&lt;Drinks&gt;(); alcoholList.Add(new Drinks("Whiskey",30)); alcoholList.Add(new Drinks("Beer", 12)); alcoholList.Add(new Drinks("Vodka",20)); alcoholList.Add(new Drinks("Gin",15)); for (int i = 0; i &lt; alcoholList.Count; i++) { Console.WriteLine($"#{i+1} {alcoholList[i].Name} {alcoholList[i].Price}"); } }
Good point.
On your drinks class since you are using automatic setters and getters you do not need your fields _name and _price. When you declare a property public string Name { get; set; } it will automatically create a private string _name; behind the scenes for you. Also, since you only have two properties I would create a constructor for Drinks (should be named Drink since it only holds a single drink definition) that takes a parameter for name and a parameter for price. public Drink(string name, double price) { this.Name = name; this.Price = price; } so when you declare a new Drink you do it like so listDrinks[0] = new Drink("Whiskey", 25); 
I wasn't too sure as I'm using C# and other than having to consider the game logic, the solution will come from there rather than the engine. Worth a shot though!
Well most people use c# with unity now a days, so it definitely wouldn't hurt!
I hope it works out for you. Let me know if you have questions.
I think this might be the easiest approach. I've got 60 levels, so I could choose a random between 0 and 100, then if random is below level + 20 spawn a negative. The 20 buffer on each side just gives a chance to still get a negative at low levels and a positive at high? 
It doesn't matter if you yourself won't ever do it, it matters whether the compiler would let anyone else do it. The short answer is that it won't. Have a read about **type safety**. *if* the compiler did let you do this, it's like saying "oh yeah, any animal can meow" where the reality is actually that any animal can make a noise. If you'd instead passed in a cow, that expectation of meowing would fail dismally when it actually moos.
This is fine.
If I understand your question, then you can do it, using "generic constraints". So you have a List of items that is based on Class A, but you don't know what actual class it is, and you want to be able to act on this list as ClassA items. Two options: You could cast the whole list to ClassA then act on it, but that's not great for performance. Option 2 is something like this: public static int CountThings&lt;T&gt; (this List&lt;T&gt; inputList) where T : ClassA { return inputList.Sum(something); } This could be implemented as an extension method so that any List of items that are based on ClassA could be asked for the answer. "where T : classA" says we'll take as type T (which is the generic of the list) any type that inherits from ClassA
https://en.wikipedia.org/wiki/Weighted_arithmetic_mean
That works fine, but you can also replace the for loop with a `foreach` for more clarity. int count = 0; foreach (Drinks drink in alcoholList) { Console.WriteLine($"#{count} {drink.Name} {drink.Price}"); count++; }
Have you tried using UserPrincipal.ChangePassword() instead?
 private bool _exchangeConnectionStatus = false; public bool ExchangeConnectionStatus { get { return _exchangeConnectionStatus; } } private void SetExchangeConnectionStatus(bool status) { _exchangeConnectionStatus = status; } Just use auto properties: public bool ExchangeConnectionStatus { get; private set; }
Nice. Wasn't even aware of auto props. Thank you!
Reflection to get a list of types like that is normal. Depending on your situation, it would probably be better to use the list to register stuff in an IOC rather than calling Activator yourself.
Use proper variables names for everything. e.g CalculateSearchDateTime(SearchMeasurement sm, double st) at a glance I have no idea what st does. 
street number. duuuhhh. /s
This guy gets it. Thank you though! It's the "little things". 
But sometimes those hacks *are* cool. :D https://pastebin.com/uZtm1DDA Context is returning an ApiResponse&lt;List&lt;string&gt;&gt; : ApiResponse, but not wanting to return ApiResponse.Error&lt;List&lt;string&gt;&gt;("Blah") for each check. So instead we use a Dynamic so that our object can be implicitly converted to an ApiResponse&lt;List&lt;string&gt;&gt; and then generating the correct type by looking at the stack trace and getting the calling method. Horribly slow, around 0.1 milliseconds, and risk of optimizer inlining things, but that wouldn't be possible on an Api controller since it would be called through a delegate or reflection. Wouldn't recommend using this, but the fact that things like that are possible is pretty neat.
Should be a public branch you can access and just pick up from there.
 if (ExchangeConnectionStatus == false) Could be written if (!ExchangeConnectionStatus) You also have this: if (sm == SearchMeasurement.Days) { dt = DateTime.Now.AddDays(-st); } if (sm == SearchMeasurement.Hours) { dt = DateTime.Now.AddHours(-st); } I'd probably go for: if (sm == SearchMeasurement.Days) dt = DateTime.Now.AddDays(-st); else if (sm == SearchMeasurement.Hours) dt = DateTime.Now.AddHours(-st); else throw new ArgumentException($"Unknown SearchMeasurement {sm}"); I guess you're already handling this with the "Unable to convert" exception, but I just thought this logic seemed clearer.
Thanks!
The Runspace class implements IDisposable. It's a good idea to wrap the scope of your local instances in a using block. 
I've started to use the "using" statement throughout other classes within this namespace. Recently read about "using" with disposable objects. The difference here is I need that runspace open, so I can run commands through it. I created a DisposeExchange() method in this class to manually clean things up. 
I tried a switch statement here but the issue wasn't with my statement. It was how I was setting the DateTime. I need to change this back to a switch statement. 
Yeah I didn’t give anywhere near enough detail there. I’ll try and do a better post tomorrow. 
It just makes maintaining code so much easier. For other people and you if you come back to it after ages. People seem to have a problem with long variable names but I can't think of a reason to use short ones, except loops and linq.
question here would be "what is it you are trying to achieve?". if you really need an instance of every Command in the assembly (and this is only run once) its probably a good way to do that. if you call it multiple times though you should cache the filtered types, or even the ConstructorInfo of the types standard constructor. a "better" way for this would be to create a textfile with a list of types that should be instantiated (namespace+typename). that gives support for extending this to external libraries, and with that, modding. this might be a bit of a hassle if you have many commands, or often add new ones, but it enforces something that is important in programming: seperate data and code. the logic that determines which commands are supposed to be instantiated is in some way data.
&gt;"oh yeah, any animal can meow" where the reality is actually that any animal can make a noise. If you'd instead passed in a cow, that expectation of meowing would fail dismally when it actually moos. /r/nocontext
Removed: Rule... uhh 7? Feel free to resubmit it but use a standard YouTube link (https://www.youtube.com/watch?v=Blo--Qio84w) instead of the embedded link.
Good read!
Ah, sorry..
If you don't plan to add (or modify in some way) then there is no need to use List&lt;T&gt;, IList&lt;T&gt;, not even ICollection&lt;T&gt;, for they all allow adding to or removing from the collection. That's why the compiler doesn't let you pass a List&lt;SubClass&gt; in place of a List&lt;BaseClass&gt;. It doesn't matter whether you do it or not. IEnumerable&lt;T&gt; instead only allows... enumerating them. No adding or removing. Which makes it safe to allow passing an IEnumerable&lt;SubClass&gt; in place of an IEnumerable&lt;BaseClass&gt;.
Good clarification - thanks for posting!
You can even put some code in them! I like to fire events from them sometimes; but you can do what you like in them. Though it does force you to go back to private backing fields. Note the use of the value keyword and the null conditional operator. In this example public delegate void ConnectionStatusChangedEvent(bool status); public event ConnectionStatusChangedEvent OnConnectionStatusChanged; private bool _exchangeConnectionStatus = false; public bool ExchangeConnectionStatus { set { OnConnectionStatusChanged?.Invoke(value); _exchangeConnectionStatus = value; }; get { return _exchangeConnectionStatus; }; } 
Me? No. I don't know that it is. All I know is that Docker is awesome and trendy right now.
GetPixel sounds like the right way to go - LockBits is only going to be useful if you have a managed bitmap. Are you calling GetColorAt multiple times? If so, you'll potentially want to take a screenshot, then sample from that. Also, where is the bottleneck specifically in your method? GetDesktopWindow? GetWindowDC? or GetPixel itself?
I use it exclusively for serialization, as I have bad memories from past experiences trying to maintain undocumented code that abuses metaprogramming. That said, some other comfortable applications for it may be the following: when it's internal to a library you create; when it's used for easily-definable tasks in your application, or maybe when it's a part of a library and *extensively* documented (and I'm sure there are many others). Documentation and maintainability issues are amplified with metaprogramming, and so long as they are appropriately handled, you should feel free to use it for the tasks where it's needed.
In general, the number of fields will effect instantiation performance, as each object needs it's own copy of it's fields, but number of methods should not, as each instance needs to reference a shared block of methods. (With the exception that classes with no virtual methods don't need said reference and are thus slightly smaller/faster) In practice, compilers and runtimes are so complex that it's hard to say much in general about what will and will not improve performance, and by how much. The best thing to do is to identify potential strategies for improving performance and then to try them. 
 // HACK HACK try { var mps = mp.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Where(x =&gt; x.Name == "_mediaPlayerState").First().GetValue(mp); var paused = (bool)mps.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Where(x =&gt; x.Name == "_paused").First().GetValue(mps); return paused; } catch (Exception) { // god knows what could have gone wrong return false; } } Yup, that's dirty.
Or just create a dynamic object in the way out of the api, and everyone wins without all the over head. As api response types dynamics are awesome.
Nice work! Others have already given feedback on the code, but I thought I'd give you a development tip. I'm not sure what editor you're using, but I'm guessing Visual Studio (if not, you should try it, there's a free version!). After you install that, install [a visual studio extension called SonarLint](http://www.sonarlint.org/visualstudio/) (free and open source). It will analyze your code and automatically give you feedback similar to what you received in this reddit thread. It's a great way to learn best practices as you code.
I didn't know about that either. That looks useful. 
&gt; OnConnectionStatusChanged?.Invoke(value); I know I could Google it but I'm willing to bet you're explanation will be much more hearty... What operational purpose does the question mark serve in this scenario? Also, pretty sweet you can use code inside! this makes things much, much more legible. I really appreciate the help!
So true - even with old Powershell scripts (I know, lame..) - I find myself frustrated with myself for many of those same reasons. Complacency can complicate the intended purpose of 'reusable' code. 
I do use VS.. I am not familiar with any extensions, really. I used something in ISE called IseSteroids which served that very purpose (among others). Thank you! I will 100% check this out.
Im not sure at all. As I said, I want to make a project beyond my level and this is the only problem. This spins on a true while with Thread.Sleep(40). It needs to track a pixel and whenever it changes color something happens instantly, the results are not instant, however.
If the item on the left is null it doesn't call the method. It means you don't have to do a null check on it before calling the method.
Look into how realtime screencap software works, then. See: https://stackoverflow.com/questions/5069104/fastest-method-of-screen-capturing for C++ish stuff - you're doing P/Invokes anyway. https://www.codeproject.com/Articles/5051/Various-methods-for-capturing-the-screen would also be a good start. Note being able to capture an abstract image vs being able to read a specific pixel are two different use cases - not sure how well they'll handle the "read" part unfortunately (e.g. because you can perform various optimizations if the screen buffer isn't accessible to the CPU).
This is a core concept in functional programming called 'fold' AKA reduce. Many functions over lists such as sum, product, string.Join can be implemented using fold. https://en.m.wikipedia.org/wiki/Fold_(higher-order_function)
In other framewoks aggregate I sometimes called reduce. Which is very similar to what the reduce does in Hadoop's map reduce for extremely large data sets. This is the essence of how problems like this are solved in a general way in functional programming. It separates the iteration logic away in a reusable method from the operation you want to apply.
LINQ uses strange names for functional methods that are more or less universally agreed on. Select -&gt; Map Aggregate -&gt; Reduce Where -&gt; Filter I guess they wanted to retain SQL like naming and named themselves into a corner?
As always the .NET naming is better than what the academia came up with
If by "strange" you mean "better". The only name which is worse in LINQ is Where (filter is obviously easier to understand) but I guess the similarity to SQL is worth it
LockBits won't help you here since you are handling a DC and not a bitmap. In terms of performance you are P/Invoking 4 times in your function, which could be part of the problem. The equivalent to GetDesktopWindow() &amp; GetWindowDC is GetDC(0) which gives you the same DC. You could also get the DC only once and then release it when you class object is finished, leaving you with only one P/Invoke.
I'd really appreciate a written code if it's short and your willing to help. Thanks!
U learn something everyday
Came here to say this! The naming bothers me sometimes, but I don’t know the history behind it. C# developers do seem more familiar with SQL than functional programming, but it always causes a mental fart for me.
Call GetDC (0) when your application starts and release it when the app is finished. Then you only have to call GetPixel in the method.
I need to constantly scan every frame of the screen. Will ir work?
 If you want a simple solution I can't think of a quicker way as you'll only be calling one method each time. The DC doesn't change so you only need to get it once then call GetPixel each time.
Coming from other functional languages, it's more "strange" than better.
I upvoted you because I agree, and I also don't feel you should have been downvoted either.
Make it a flag, with a default of off.
It is already not required. You decide. Either way works. 
`Camel-casing property names` **Please** make this the default, we shouldn't have to manually tell it to use proper Javascript/Typescript naming conventions (unless I'm not understanding README). It's so damn jarring working in both areas and then all your JS looks out of place because of the random naming convention violations.
The problem is that the main use case for this (i think) is generating Typescript models for DTOs that is transferred back and forth using AJAX. And the default in asp.net is to use pascal case, which would be catastrophic. 
Oh wow forget what I said. They changed it so that in the new asp.net core they use camel case as default. Thanks! I'll change it. 
HttpClient and WebClient work for external requests (not for file:// though). Although they have a max CPU time for each execution (a loop of 65535 times out :) ), I bet you can write some JS to hit the run button every so often and change the code text. I wonder if they aggregate CPU time to an IP.
Nearly all programmers are more familiar with SQL than any functional language. At least in 2005.
If you are exposing the ObservableCollection instance, WPF will listen to its events and update accordingly. If not, you could create a collection class you expose that implements INotifyCollectionChanged and forward the change events to it. Don't use INotifyPropertyChanged for collections. It resets the control that is bound to it.
It's called the elvis operator, for future reference ✌️
That poor keyboard of his takes a beating!
Good good. JSON.NET on it's own can be set to use proper casing too.
The nature of my current application requires a fair amount of reflection as it's spinning up, but stores each instances into a dictionary so I can check against the dictionary as I go forward instead of looking back on the object
Oh it can take it :)
That is beautiful. It is a charm writing in C#. I cannot thank you all enough for your help and input. 
It's a lovely language. No problem bro, enjoy.
You may get transactions across multiple distributed components using Ditributed Transactions Coordinator (built-in into Windows) or other similar service. It is not built-in into WebAPI itself for obvious reasons. As for others - role-based access is there by default, you may use roles with Authorize attribute. You may also customize it to use your own RBAC service to resolve usernames into list of roles. Secure conversation - HTTPS. Sorry for the late response, I am not too active redditor.
Bit in Typescript you can just do Partial&lt;InterfaceTypeHere&gt; to get a type of InterfaceTypeHere where all properties are optional. 
As the other comment said if you are binding to the same instance of the ObservableCollection, then the changes to the collection will be reflected across all your views. 
"Where" works itself into reading code as a sentence much easier. Select these items where this value equals 1 Which is probably what SQL was going for.
Don’t forget the first “M” in “MVVM”. It stands for “model”. The view models keep state that is specific to that view, but the model keeps state that may be shared across different views. Generally the model is the real state, and the view model state is only valid while that view is around. Don’t try to keep all your state in view models alone. Basically what I’m saying is that this collection should be in a shared model object. A static is one way to share that, but it’s probably not the best way. It’s better to create one when you start up and then pass it around as needed. 
Considering one of the features of LINQ is that it maps to SQL queries, I think that's exactly the reason why we have Select and Where instead of Map and Filter.
If the opacity of all the arrows starts at 1 then you do nothing every time. 
This code has been impossible to implement (most likely cause is me being an idiot) could you tell me how to get a value out of your code? I've tried implementing this in WinForms and now in a simple Console application. Literally all I want to be able to do is store cards in a list, one for the flop one for the turn, river player 1 and 2. But I can't get your code to work for me. Many thanks, Cristo
Yea, all the arrows start at 1, I need them to go to 0.5 when used.
Well, yes, I can write distributed transactions in C or whatever. That's not the point here. The point is that with WS-AtomicTransaction, you can get distributed transactions by doing **nothing but configuration**. Fair enough, role-based access control is similar when integrating with IIS, but **not** with WebAPI in of itself. As for HTTPS - no, HTTPS does not equal "secure conversation in WS sense. In fact, it is nowhere near. HTTPS offers no more than transport security. Secure converstation is more on the level of OAuth and OpenID, but those are entirely separate from WebAPI who, in itself, is completely oblivious to these questions.
I am derp.... if 0.5 not 1... Lol sorry &gt;.&lt;
Unless you want the control to be notified when the collection is swapped?
 var dealer = new SimpleDealer(); var card = dealer.DealCard(); // Then give the card to a player or whatever
I'm curious about the communities take on this as well, but I'll throw my two cents in as well. I don't think you need razor at all. I have done personal projects that only use Web Api controllers. For work projects, we use an MVC controller to render a razor page that is the entry point of the app, and everything else is static pages. That project is a SPA using angular. 
Is that assignable to a variable of the interface type?
Yes but in non-database code you often have only filter without select so where sounds strange.
You have no experience with SQL?
Wow, thanks for the speedy reply man! enjoy the rest of your weekend :)
No, but then why not just declare that as partial too? 
That's not the point. Considering it's called LINQ, maybe it is "better" to be SQL-esque, but I found it "strange" because of the language integrated part, where I would normally find functional vocabulary. More importantly, methods use query-based vocabulary too, and while I understand it's good design to not split the C# vocabulary, I'm just of the opinion that whether it was better or not, I find it strange. To be clear, taking into account when/why LINQ was specced, honestly it probably was the better choice.
That's really interesting, can you expand a bit more? To my (relatively inexperienced) mind, one advantage I can see of Razor is that it makes things like base layouts and partials quite easy. If you have a collection of static pages, won't you have a lot of repeated code such as the header and navigation?
You **could** mix backend-generated views with React / angular components in isolated sections, and I've done that in a couple of projects. It works, but it's ugly. Besides, you will soon see the benefits of just going full SPA, and drop Razor. It's just much cleaner, and you will not get the full benefits of React / angular before you do.
Correct. I never do that, but that works if you do.
Well it is a single page application, so the static files are not full on pages, but instead templates that are retrieved and inserted via AJAX calls.So the entry point, the page rendered by razor, is used to bootstrap the rest of the application. It will fetch all of the necessary scripts and templates, and the page will be rendered from those templates. I am less familiar with React, but it to will do much of the rendering client side. The philosophy of razor is to assemble a page on the server and give it to the client to view. The philosophy of front end frameworks is to give the client the pieces they need and let the client do the rendering. Now that is not to say that you can't use server side rendering (via razor or something else) and then just use a UI framework to make your code more structured and maintainable. I don't want to go to much into this, as I am not a front-end guy so take that with a grain of salt.
So are you quite pro SPA for any interactive/non-static website? If it's a site with a decent amount of different functionality which you want (at least from the user's point of view) to be on different pages, would you resort back to a Razor solution to avoid replication of "base layout" code, or would you still have it technically be a SPA but one that would load different components on the fly? (or something else?)
A few tips that helped me to reduce keyboard and mouse clicking within screencast audio recording: 1. Look into using a software-based "noise gate" as part of your audio recording process. 2. Physically isolate the mic from your desk. Lots of options available, but a cheap and practical solution is a boom mic stand. Something like [this](https://www.amazon.com/Samson-MK-10-Microphone-Boom-Stand/dp/B003CLIPHO). 3. A thin (2-3 mm) sheet of medium to high-density foam under your keyboard to help absorb sound. Hope this helps.
I think what I wanted to say was, that mixing doesn't really work. Do Razor or SPA, don't do both. I think that traditional MVC will be much simpler in most cases, but if you need to do not API or some very complex / smooth UI, at some point it will become feasible to do an SPA.
I am building a MVVM framework for ASP.NET with a couple of guys. https://github.com/riganti/dotvvm It is based on Knockout JS and allows building interactive web apps without the need to write tons of JavaScript. It supports both .NET Core and OWIN, and it has a nice integration in Visual Studio with IntelliSense. https://marketplace.visualstudio.com/items?itemName=TomasHerceg.DotVVMforVisualStudio-17892
With ReactiveUI it is really easy, you can create a IReactiveDerivedList from the original list (a ReactiveList on RXUI) on each ViewModel and only update the original List.
+1 Linq2DB is really fast and supports Linq
This. To expand, you can either pass the model (state) instance as an argument when creating each vm, or expose it via an underlying service layer. The latter is more common when that state originates from some persistent storage like a local drive or a Web service. Another, less elegant solution, is to use the messaging pattern to communicate between vms, but it's best for situations where the options aren't practical.
In general you don't need to use Razor with frameworks like React and Angular. Usually you only use it to make a start page where the JavaScript is initially loaded that powers the React/Angular app and maybe for a separate login page . You can also use the frontend framework for a small part of the app like rendering a grid but this is not done often. If you want to go this route Angular is not considered a good choice and React and especially vue.js is considered a better option. Apps developed from scratch usually go the full-SPA route.
&gt; Apps developed from scratch usually go the full-SPA route. Your post makes a lot of sense. The main question I have is about this last part. Imagine the situation if it's full SPA with different pieces of functionality. Say for examples it's an app that does banking and it's .NET API backend with a React frontend. You want the user to see different pages for UX purposes, one page for statements, another for graphs, another for budget planning, etc. If you are doing a full SPA, then isn't the the GET request when they hit the site going to be massive if it has to load all of those things in? Or could you load in different components on the fly when the user for example clicks on a page tab in a top navigation bar?
Don't mix them up. If you want to use Razor, use Razor. Your website will load each page independently like a classic website. Don't expect to easily achieve fancy UI interactions. You can go the jQuery route for basic stuff, but anything complex will end up as an unmanageable mess over years and developers. You can't use Angular because it is too infectious (it wants you to do everything its way) if you want to do a fancy thing in only a corner of your page, but React/Vue I think can be used. Though... ...if you want to fully embrace Angular/React/Vue whatever, don't use Razor. You don't need Razor anymore. You already have everything you need for the UI. Just abstract your business behind Web API and use it from the frontend app. Bonus: you now can use the same API on a different frontend app should you need, or from a mobile app, or even allow access to a 3rd party to your API.
For reading code, _where_ is certainly better than _filter_, but _map_ is a better fit than _select_ as it can be much more than merely _selecting_.
Or just use a class that implements the interface, like every other oop language in existence, and use the semantics that are universal?
Check out the new dotnet core SPA templates for a good starting point. 
I find the aggregate syntax opaque. What's wrong with the loop version? Sure, the LINQ is succinct. Why is that a win? When I was in high school learning FORTRAN (1969), we all thought we were cool if our code had fewer lines. That's immature, IMO. Mature developers value clarity over cleverness. We don't need to show off to our pals. We care about future programmers understanding our code. *The loop version will be understood by a LOT MORE C# developers.* I bet the loop version is faster, too -- though not enough faster to make a difference in most applications.
Great tips, I'll might just have a go at some of those.
Yep, I too prefer the loop version.
Have You considered using DoubleAnimation using System.Windows.Media.Animation; DoubleAnimation _doubleAnimation = new DoubleAnimation { To = 1 }; ArrowImage.BeginAnimation(OpacityProperty, _doubleAnimation);
Opacity seems to be a floating point data type which should never be compared using exact values! Use something like gather than 95% (if it's already at 50% it will certainly not trigger :-) Furthermore you could write something like "the first element in my array with an opacity greater or equal equal than ninety-five percent is set to fifty percent" 
&gt; then isn't the the GET request when they hit the site going to be massive if it has to load all of those things in? The templates are loaded when needed and then cached in the browser. The initial overhead lies only on scripts (vendor scripts and your own app code) which should be bundled and minified in production.
Generally you will have a compile process for your frontend code, more often than not using webpack. You can relatively easily split code for different routes into different files that are loaded on demand using dynamic imports.
Thank you for all the ideas everyone, I will look into this animation. But I got it working. if a1.Opacity = 0.5 { } else a1.Opacity = 0.5;
I'd be interested in seeing a real beneficial example of it in use. For the example in the video I'd agree, it just looks to be 'clever code' that reduces clarity and potentially leaves the next developer scratching their head. I wouldn't use it there personally. Interesting video though. I hadn't come across it before.
You mean the JS files? Yes, usually the first hit is expensive. There are some ways to reduce the size, for example if you have administrative part you may check server side if the user is administrator and only load the JS for the admin part for admin users. There are also various ways to load JS on demand and to load JS in specific order so it can begin executing while the unimportant parts are being loaded. However most of the times caching is enough. Because your whole app is packed in a couple of JS files (concatenated, minified, etc.) you only need to download them twice. When you open another URL the scripts are already there because it was your full client side code to begin with. One cool trick is to add the scripts in the end of the login page. The user can interact with it and log in as normal because the scripts are not needed on that page but when he is redirected to the normal view the scripts are already cached :)
&gt; Interesting video though. I hadn't come across it before. Ditto. I like how the guy presented it, the simple way and aggregate way producing the same results.
Do you always have to make 2 http requests? One to get the data, and one to get the markup? Then bind client side? That's always bugged me about a spa. Old school, server side rendering, you make one request, and the page comes with everything. But you're right, if you want to get fancy now in the browser, its jquery soup. 
Yea. The operator itself is called the null conditional operator. It my favorite operator in any language ever. Makes a lot of my old ugly classes beautiful to look at.
No, why? If I have var oldCars = cars.Where(car =&gt; car.Year &lt; 2008); it can be read as &gt; Old cars are cars where the year is before 2008 with no problem.
You do but there are different techniques, such as using a tool like webpack or grunt to package your angular app. This way you could package your markup and js to send at one time which results in a slightly larger initial load but quicker subsequent loads since every new "page" is already there. So then you can make requests for data only.
It's possible to lazy load the js needed to render a page. You can use. Net for bundling and minification of an angular app. For example: https://www.codeproject.com/Articles/1033076/Integrating-AngularJS-with-ASP-NET-MVC
The way I tend to think about it is that a SPA is good for an application, where you usually have long sessions, you front load the js, and then everything else is faster because you only need to fetch the raw data. But a standard non SPA site is good when your users have shorter sessions or even single page views (like maybe a blog), you will save a lot on the js side because you don't have to ship a a rendering library to the front end as that's done on the server side. This is just related to performance, there are a lot of other things too consider. 
You'll need Visual Studio Enterprise.
It's a good exercise, and how I was able to learn a lot in a short amount of time, from when I was a junior developer. It's not so much about being correct as it is about thinking about problems, so I totally endorse this. For fun, I did up a Java-style enum as close as I could think of it for 5 minutes of pondering: Fiddle Here: https://dotnetfiddle.net/lJ0wCK public class UsafRank : IEnumerable&lt;UsafRank&gt; { public string Paygrade { get; } public string Rank { get; } public string Abbreviation { get; } static UsafRank() { AirmanBasic = new UsafRank("E1", "Airman Basic", "AB"); Airman = new UsafRank("E2", "Airman", "Amn"); AirmanFirstClass = new UsafRank("E3", "Airman First Class", "A1C"); SeniorAirman = new UsafRank("E4", "Senior Airman", "SrA"); StaffSergeant = new UsafRank("E5", "Staff Sergeant", "SSgt"); TechnicalSergeant = new UsafRank("E6", "Technical Sergeant", "TSgt"); MasterSergeant = new UsafRank("E7", "Master Sergeant", "MSgt"); SeniorMasterSergeant = new UsafRank("E8", "Senior Master Sergeant", "SMSgt"); ChiefMasterSergeant = new UsafRank("E9", "Chief Master Sergeant", "CMSgt"); } public UsafRank() { } private UsafRank(string payGrade, string rank, string abbreviation) { Paygrade = payGrade; Rank = rank; Abbreviation = abbreviation; } // enum values public static UsafRank AirmanBasic; public static UsafRank Airman; public static UsafRank AirmanFirstClass; public static UsafRank SeniorAirman; public static UsafRank StaffSergeant; public static UsafRank TechnicalSergeant; public static UsafRank MasterSergeant; public static UsafRank SeniorMasterSergeant; public static UsafRank ChiefMasterSergeant; public IEnumerator&lt;UsafRank&gt; GetEnumerator() { yield return AirmanBasic; yield return Airman; yield return AirmanFirstClass; yield return SeniorAirman; yield return StaffSergeant; yield return TechnicalSergeant; yield return MasterSergeant; yield return SeniorMasterSergeant; yield return ChiefMasterSergeant; } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } public override string ToString() { return Rank; } } public class Airman { public string Name { get; } public UsafRank Rank { get; } public Airman(string name, UsafRank rank) { Name = name; Rank = rank; } public override string ToString() { return $"{Rank.Abbreviation} {Name}"; } } class Program { static void Main(string[] args) { // iterating over values var usafRanks = new UsafRank(); foreach(var rank in usafRanks) { Console.WriteLine($"{rank.Paygrade}: ({rank.Rank}) ({rank.Abbreviation})"); } // use as a static value var airman = new Airman("Stafford", UsafRank.StaffSergeant); Console.WriteLine($"Hello, {airman}!"); // use in a switch void Greet(Airman amn, string term) { Console.WriteLine($"This is {term} {amn.Name}"); } var colloquialGreeting = new Dictionary&lt;UsafRank, Action&gt; { {UsafRank.AirmanBasic, () =&gt; Greet(airman, "Airman")}, {UsafRank.Airman, () =&gt; Greet(airman, "Airman")}, {UsafRank.AirmanFirstClass, () =&gt; Greet(airman, "Airman")}, {UsafRank.SeniorAirman, () =&gt; Greet(airman, "Airman")}, {UsafRank.StaffSergeant, () =&gt; Greet(airman, "Sergeant")}, {UsafRank.TechnicalSergeant, () =&gt; Greet(airman, "Sergeant")}, {UsafRank.MasterSergeant, () =&gt; Greet(airman, "Sergeant")}, {UsafRank.SeniorMasterSergeant, () =&gt; Greet(airman, "Sergeant")}, {UsafRank.ChiefMasterSergeant, () =&gt; Greet(airman, "Chief")}, }; colloquialGreeting[airman.Rank](); } }
&gt; Considering one of the features of LINQ is that it maps to SQL queries That's not a feature of LINQ directly, it's just one of the many implementations of a provider.
I find the aggregate version easier to read and to understand. It also *tends* to make the developer think more about the code to write, instead of just putting a lot of stuff into loops.
Thought I'd weigh in with some of our experiences. We have a 50K lines of code app that is mostly razor. We don't use anything on the client except jquery and ajax (mostly) calls. We also have a webapi for many tasks which are called from the client. Like yours, it's essentially an SPA and performance really good. The fact that we can mix server generated razor , along with jquery &amp; ajax on the client make for a very powerful solution. Yes it's not the sexiest and some of our dev's sneer at it (you should rewrite it in Angular or Vue whatever the latest and greatest is!). I would say that development time with Razor/Jquery is orders of magnitude faster than anything on the angular side (we have another app based on angular) and I should know as I track the time and pay the bills for both. We are looking at introducing new libraries/frameworks and the one I have most interest in is React. I think this would bring some additional benefits while not breaking everything we already have. 
When an array is created, its elements are initialized with the default value, which for reference types is NULL (no reference to any object). Hence the null reference exception -- you are trying to set properties of an instance of Drinks while not having any actual instance to do that with. What you need to do is this: &gt; Drinks[] listDrinks = new Drinks[] {new Drinks(), new Drinks(), new Drinks()}; or this: &gt; listDrinks[0] = new Drinks(); &gt; listDrinks[1] = new Drinks(); &gt; ... This could be done in a loop, too. Making Drinks a struct rather than a class would work too, since structs are treated as value types, so they cannot be null.
Ive done a mixed project as a tool for me to learn .net mvc and knockout which was the trend at the time, I ended up doing everything twice which was obviously pretty shit. Ironically I am back there now with an app that has 1 complex page and the rest is crud.. 
I think you need to explain in more detail what you are trying to do. 
Ok, the program is multilingual and according to the chosen language it creates folders. But if I choose different languages for each use, the program will be creating several different language folders. To solve this, I created/am trying to create a method that renames the folders created previously so that it does not find a pollution of folders and that does not lose the content within them.
Directory.Move if you're on the same volume, Directory.Copy then .Delete if you're not. You can't get around locked files other than to always .Copy, then somehow log failures to delete, then recopy and redelete later. It would still be many lines of code.
Thank you for the feedback. I'm still a bit lost to be honest. In my scenario the main view is composed of several viewmodels because they are bound to usercontrols that will most likely be used in other applications. I load an observablecollection from one viewmodel getting data from the model, but when i make an update to that collection all other viewmodels should be updated with that collection. Would you have an example on doing that? the problem i have is referring to that same instance of that collection to be shared amongst all the viewmodels and updated accordingly in the main view.
Recursion would probably help here.
Oh, I only read about Recursion once in a lifetime. On the files lock I can solve, the only problem right now is the mass renaming of directory and subfolders.
How frequently do you expect the user to change the language? To me renaming them seems not worth it since changing the language seems like an infrequent operation and renaming the directories seems likely to break other programs and backup tools.
What have you tried so far?
i used a nuget package named " Tweetinvi " , but i think is not workin g anymore . 
Do they not have APIs you can hit?
The Facebook SDK is available from nuget https://www.nuget.org/packages/Facebook. You can use google to find some examples of how to use the sdk. https://developer.twitter.com/en/docs/developer-utilities/twitter-libraries lists a few libraries for accessing Twitter. 
i've tried Facebook SDK but seems not working anymore . 
the program won't compile , i get an unknown error in the line where the software should connect to twitter . 
It is super hard to help if you don't show what you have
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using Tweetinvi; using Tweetinvi.Models; namespace testtweet { class Program { static void Main(string[] args) { Auth.SetUserCredentials("4ucxaDqrTgUotpasuZbkM7DBz", "BTyjvjSZqnGwjmB1dvRrXoK6L72FW8sBLcRTixJoCfI1P8u4TY", "1328926471-IRtyaSTKdll7LcgQHpHSSBqo908LFdJs6FaDMwm", "4nwo4H35AU3nvoHzR3Sw3vwz84RGiwl69VMsL0RMsa0xf"); var user = User.GetAuthenticatedUser(); Console.WriteLine(user); Console.ReadKey(); } } } 
Just so you know - you included your credentials. Now anyone can post as you. 
I feel like that's over engineering a problem. Why not just use symlinks?
What about using a fixed name for the folders, but using a desktop.ini file in each folder to modify the name displayed in Windows Explorer to something more friendly? Then you only have to create the folders once. When you want to rename them, you just change the label in devices.ini.
i know that , that's why i put invalid credentials my friend :) , just to show you exactly what i did . 
As has been mentioned, basically use one or the other. It's basically a tradeoff. Razor pages are simpler and take less time/effort to get running, but if you're planning on making an app that's going to get very dynamic and complex definitely use a js framework. I made a pretty complex site with razor and used jQuery/Ajax heavily, but I'm in the process of rewriting in angular and while it is 10x faster for the complex bits, I obviously wish I'd used I it from the beginning.
No dice, I can't get a value man - this is killing me, please help: static void Main(string[] args) { Console.WriteLine("Poker Hands, press Enter to random the flop..."); var answer = Console.ReadLine(); if (answer != null) { //Random Hand here: SimpleDealer sd = new SimpleDealer(); sd.DealCard(); for (int i = 0; i &lt; 3; i++) { var dealer = new SimpleDealer(); var card2 = dealer.DealCard(); Card test = card2; Console.WriteLine("This is a test: ", test); Console.ReadLine(); //old output: //Card p1 = new Card(); //Console.WriteLine("The value is:", p1.DisplayValue()); } } Console.ReadLine(); }
True, but was one of the main reasons the feature was developed in the first place.
I hope you are not literally hard coding credentials in a string like that. I've heard of plebs never being able to change their server names and things because the application they had some shoddy developer write to automate some of it assumes the server name.
The option is in a combobox on the initial screen to change the language of the program. When the user advances to the main screen of the software, the folders are created if they do not exist. Following the logic of someone sensible, there is no reason for him to start the software with languages different to each use, but to avoid problems in the future and in the course of software growth, I want to avoid this headache.
I had thought of this, however, I'm leaving it as a last option, as it's very intriguing that it's so easy to do this with the files and have so much trouble with some folders. I'm sorry if this sounds like freshness on my part.
Symlinks would not put myself in the same situation that I am avoiding?
&gt; It also tends to make the developer think more about the code to write Yeah, because you have to review the video, and try the syntax several times, before you get the aggregate to work. ;) But when you're done, you'll have something that stumps your co-workers. "Jeez that AngularBeginner must be smart, because I can't understand his friggin' code." Maybe you should put the loop version in as a comment, saying something like "The aggregate() call below does the same thing as this loop"). Just my two cents, worth every penny. ;)
I am not too familiar with creating events myself - but I have used a tool called Powershell Studio, very similar to Visual Studio (as far as building simple GUI's.. Powershell Studio uses the WinForms assemblies) - so I am used to handling GUI events (which I would imagine all events are generally handled similarly).. Does the delegate act as "the runner"? While the event would be the "gun" signaling the runner to start running?...but only at a certain time (lets say, when the race is scheduled to begin)..but in our case, setting/changing the _exchangeConnectionStatus; would kick of that event..? What is the delegate actually doing? It doesn't appear to be changing anything...? Still trying to understand how to write events programmatically vs using "built in events" via a form or some other .NET class... Thank you very much for your time and explanations - learning person to person (so to speak) vs Google is so much faster and more direct. :) 
If my co-worker can't understand such simple and basic code, I expect him to tell me. Then we can step aside and I help him understand it. I'd honestly never accept code like int sum = 0; foreach (var element in elements) { sum += element.Value; } just because someone doesn't know LINQ or lambdas and can write it like int sum = elements.Sum(x =&gt; x.Value);
And the win is *less code*? At the cost of having to explain it to your co-worker -- and your other co-worker -- and the new guy hired to maintain the code after your departure? The LINQ isn't efficient compared to the loop -- and every subsequent coder having to figure it out isn't efficient either. I bet you don't comment your code, right? I call that the *Coders New Clothes* syndrome: if you're not smart enough to figure it out, you shouldn't be in this business. Whereas my view is "If you're not smart enough to choose the easy-to-understand approach..."
A win is expressive code, not less code. And the LINQ functions are a lot more expressive than the procedure code. The `Sum` method is more expressive than the loop. But I absolutely do expect from future developers that they know basic functionality of the language and framework. And I comment absolutely my code, because I know that exactly that some day in a few years down the line someone else will take over.
&gt; And I comment absolutely my code, because I know that exactly that some day in a few years down the line someone else will take over. Ah, so you'll leave your development-time loop version of the functionality in as a comment! Smart! Also comment that "I prefer the aggregate() version below because it is more *expressive* (whatever the fuck that means)".
I expanded my post explicitly stating that I do not do what you say.
My plan is to store it in a list like this: for (int i = 0; i &lt; 3; i++) { var dealer = new SimpleDealer(); var card = dealer.DealCard(); Flop.Add(card);//null reference foreach(Card cd in Flop) { Console.WriteLine(Flop); } //Console.WriteLine(dealer.DealCard()); //Console.ReadLine(); //old output: //Card p1 = new Card(); //Console.WriteLine("The value is:", p1.DisplayValue()); } 
It’s fine to have multiple view models, but you should also have a model. The model holds the state that is shared. It’s just another class that holds state. It can implement `INotifyPropertyChanged` and have a property for your collection. The type of that property would be an `ObservableCollection`. Your view models can then have a property whose type is your model, and you can initialize the view models with the same shared instance of your model. Then you might set up your bindings like this: `{Binding Model.Collection}` (where “Model” is the name of the property on your view model that holds the model instance, and “Collection” is the name of the property on the model that holds the collection). 
&gt; Just because you haven't stayed up to date doesn't mean it's obscure shit. Now you've struck the nail on the head. I'm fairly adept with simple query syntax, but I haven't set out to master LINQ. So I'm being defensive. Thanks for pushing back. It's well past time for me to accept and *grok* LINQ.
Dude, you're not supposed to accept an argument on the internet. You're doing it wrong.
Why not just tell the user that you'll make new folders if they change the language? Moving folders or files around as a result of changing the language seems like surprising behavior that's unlikely to play nice with other software and be error prone due to locked files.
If it won't compile it should have more description than "unknown error".
Typically programs do not rename folders for language changes. That can lead to whole other mess of issues.
Oh, did I forget the /s ? /s /s (they cancel out)
Why does it matter what language the folder names are? Seems like you're creating a solution for a problem that doesn't exist.
I've been using this tool for years. This might give you some inspiration. http://hp.vector.co.jp/authors/VA014830/english/FlexRena/
Renaming directories based on language seems like something you shouldn't be doing. It's brittle, adds a ton of extra complexity and tracking, will fuck up anything that relies on the paths, and will probably not be expected. You'll probably not be able to find very many examples where it's done. What are these folders and why does renaming strike you as the best idea? You could create shortcuts.
I'm sorry of if I sound very stupid, but what dose the "[]" in "int[] values = ..." in line 10 mean? 
Make the DB table name goals?
yeah but the issue is why isn't it creating the db
Package manager console. Google how to configure a new database.
It means "int array". It holds a series of integer values. No prob!
Are you using EF (entity framework)?
Thank you, I don't know how I missed arrays for so long... I only very resent that I have met this in programming. 
My apologise for the horrendous formatting, here is the full code to give to a greater idea - also no vicious comments please! using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace Poker_Hands { class Program { public static Random rnd = new Random(); public static List&lt;Card&gt; Player1; public static List&lt;Card&gt; Player2; public static List&lt;Card&gt; Flop; public static Card Turn; public static Card River; public class SimpleDealer { private readonly ICollection&lt;Card&gt; _availableCards; private readonly Random _random; public SimpleDealer() { //All Cards are contained here: _availableCards = CreateCards(); _random = new Random(); } public Card DealCard() { // Should check if any cards exist. var cardIndex = _random.Next(0, _availableCards.Count); var card = _availableCards.ElementAt(cardIndex); _availableCards.Remove(card); return card; } private ICollection&lt;Card&gt; CreateCards() { var cards = new List&lt;Card&gt;(); for (int i = 1; i &lt;= 13; i++) { cards.Add(new Card(SuitType.Hearts, i)); cards.Add(new Card(SuitType.Clubs, i)); cards.Add(new Card(SuitType.Diamonds, i)); cards.Add(new Card(SuitType.Spades, i)); } return cards; } } public struct Card { public readonly SuitType Suit; public readonly int Value; public Card(SuitType suit, int value) { Suit = suit; Value = value; } public string DisplayValue() { // TODO Handle Ace, K, Q, J return $"{Suit.ToString()} {Value}"; } } public enum SuitType { Hearts = 0, Clubs = 1, Diamonds = 2, Spades = 3 } static void Main(string[] args) { SimpleDealer sdflop = new SimpleDealer(); Console.WriteLine("Poker Hands, press Enter to random the flop..."); var answer = Console.ReadLine(); if (answer != null) { Flop.Add(sdflop.DealCard());// Null Reference here //Doesn't show card Console.WriteLine(Convert.ToString(sdflop.DealCard())); foreach(Card cd in Flop) { Console.WriteLine(cd); } } Console.ReadLine(); } } }
You don’t appear to initialise the Flop list before trying to add to it
* have you set up your dbcontext correctly? * Did you do add-migration and did you update-database since you created the Goal class?
Do you just need the SQL? MySqlCommand cmd = new MySqlCommand("UPDATE test_panel" + " SET status ='" + strStatus + "'" + " WHERE ID= 118498;" , connec); MySqlDataReader dataReader = cmd.ExecuteReader();
Yeah exactly like that! Thank you! So then I would type "warning" for example between the quotations after strStatus? The part immediately after " Set status ='" would remain as is?
You would create a method that takes a directory and does something to its sub-directories as well as call itself on each of those directories. If you were changing names, you'd want the recursive call to come before changing the parent directory's name. [Here's a gist with the basic idea](https://gist.github.com/Mouaijin/ca8e17af4e500cbae5c81ba3f8aad95b)
You never initialize Flop for one, unless there's something left out here. Why are you upcasting your List to an ICollection anyway? That's just going to make writing and debugging harder for you, and you aren't doing anything here that remotely requires it. I would actually recommend shuffling up a list and making it a queue or a stack so you can just pop the next card off instead of making O(n) `Remove` calls for DealCard as well. Try stepping through the debugger to find out what your local value are right before the `Flop.Add` call, you'll probably see that `Flop` is null, rather than `sdflop.DealCard()` being null.
Web sockets might be of use for this scenario. 
Are you getting an error message? If not, what results are you getting that's unexpected?
The only issue I see is that `up` is apparently not declared, though it could be available in a higher scope 
I don't get no error 
No I declared is just is static variable is on top of my code 
Did you add the DbSet in your DbContext? public virtual DbSet&lt;Goal&gt; Goals { get; set; } 
signalr
The code doesn’t make any sense. You’re looping forever and not doing anything with the values you receive. 
Your formatting could be fixed by reading the formatting help, empty line before and after code, and *four spaces in front of each line.**
Is make sense I using the value from getupdate to make statements 
If u have idea plz help I only need to able to access the msg from outside loop 
Depends on the clients. If they are web apps you are limited to websockets/long polling with SignalR etc. If they are desktop or native mobile apps you can use whatever is supported by the plattform, raw TCP/udp sockets, akka.net etc. I think wcf is pretty outdated. I would look into gRPC
You have to set it in DbContext.
A message queue maybe your best option here. You may want to look into the publish-subscribe pattern and use something like RabbitMQ to hooks this all up: &amp;nbsp; https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern &amp;nbsp; https://www.rabbitmq.com/tutorials/tutorial-three-dotnet.html 
A delegate is just a variable that "holds the value" of a function definition; formally they are function pointers. The event "holds a list" of functions of the type of the delegate. When the event is fired, OnConnectionStatusChanged is called, the event goes through the list of functions added to it and calls them. So in this case, another class that needs to know when the connection status changes, say a UI component that shows a "Connected" label, you would define a function that has the same signature as the delegate. That is, you might define "void HandleConnectionStatusChanged(bool status)". Then you would "add" this function to the event with the syntax "OnConnectionStatusChanged += HandleConnectionStatusChanged". When, in the connection handling class, you call "OnConnectionStatusChanged?.Invoke(value)" then the event looks at its list and calls each function with the parameters passed to the event. 
This seems to me to be interesting, I'll check this out.
It's not entirely clear from your post, but you seem to have some misconceptions about how async/Tasks actually work and how they interact with threads. Combining `Task.Run` and an immediate `Task.Yield` makes no sense, for example. You also seem to be mixing synchronous and polling code with async code. You should use the async methods of the socket, then you don't need to worry about taxing the task scheduler so much, it'll only have to schedule a thread when an async operation completes (i.e. data is received or a client is connected).
`strStatus` would be your variable to change it to... if you want to hardcode "warning" you can do: + " SET status ='warning'" But yeah, you would want the string within single quotes.
The main function of this program involves manipulating these folders and your contents. If the program starts several folders it can end up disrupting the experience with program because the user needs to add files in these folders so that he can do what was program to do his work. I would consider this more as an act of precaution against user errors.
I thought that once a task thread had run the ReceiveAsync method It would just cause that single task thread to endlessly run the Receive method forever and that the loop would just own that thread forever, but that Task.YIeld would force the thread to put the loop task back into queue and it would go do something else. But now that I think about it that doesn't quite make sense. So calling await TryReceiveAsync(); will already do exactly what I just described then? (That would make sense) Still though, with hundreds of clients each having a separate task dedicated to their reading loop will that not have any adverse consequences? 
Thanks, I was curious about hard coding it but I just used the variable. Thanks again for your help!
In short is what I explained above. The program has as main function to manipulate the files contained in these folders move/copy/ rename to the target folder and with this I did not have the slightest problem. This is where I came to this impasse when I was reviewing the multilingual part of the software. My solution right away would be to move the files from these folders to the new folders, but there are a total of 13 folders which would make the solution code a bit long. So, in order not to lose the contents of this folder I came up with the idea of renaming.
I don't know what you are doing, but that loop is 100% pointless. Get rid of it.
But you declared it outside the scope of function. You need to declare "up" inside the function or pass it in as a variable. public async Task getTelegramMessage(int up) Looking at just this bit of code, you need to declare "up" inside the function.
Loop is for getting updates I don't need to do get update every time the loop is the main thing on my program
Its same up isn't the problem the problem is on msg I can't access it from outside the loop
Really, this is seeming to be the most effective solution at the moment. I'll try the other alternatives to try what I have in mind (rename) if it does not work, I'll create this warning.
That loop is infinite, as the condition is always true. I can only assume your problem is that you aren't reaching the final line, which is because control never exits the loop. I recommend watching some introductory C# tutorials on while loops. 
I know is infinite how I well refresh the getupdate without I need keep looping until I get the value I need from getupdate the problem isn't loop the problem is if I want access the msg from inside the loop I can access it but from outside I can't other than that's everything good for me 
Okay, thanks.
Unfortunately, I'm traveling today and I'll need a computer to help you solve your issue. I'll get back to you tomorrow.
Awaiting `Task.Delay` doesn't do anything that awaiting any other *uncompleted* task doesn't already do. I'm guessing the problem here is that you're constantly polling instead of using async IO consistently. If `TryReceiveAsync` looks something like async Task TryReceiveAsync() { if (socket.Poll(...)) await ...; } then it will complete synchronously most of the time and indeed loop constantly without yielding the thread (unless `Poll` returns true and an await is hit). When using the true async methods of the socket instead of polling, a reading loop would begin the read, yield the thread, and only be scheduled on another thread once data is received and the read call ends.
Wouldn't it throw a database hasn't been updated exception for the second bullet point?
Your problem is that the program never gets to the Console.Writeline(msg); line, because it never exits the loop. My guess is you're not seeing any output, and you're not understanding why. The line I listed above never executes, because while(true) simple runs those 3 statements within the brackets infinitely. If you want to see output, either move the Console.Writeline(msg) statement inside the loop, or change the while condition so it eventually exits.
Please let me know what you think, your feedback is appreciated.
Along with the other suggestions you might like to check out lidgren 
Thanks for not answering the question, but instead repeating a fact I had already mentioned.
This is correct. OP is missing the point of async. Go async on your native calls - no yield ever reqd.
I dont know if I understood what you want to do but I guess you are doing the loop for "refreshing" the message variable and you want that the las line output the value when the message is updated inside the loop. The bad news are that that's will not work, the line outside the loop will not run, never. You need to change your code, put the last instruction inside the loop, or use another approach.
Is it possible to send binary messages? Maybe I'm reading it wrong but it looks like just UTF8 strings are supported.
yes it is possible to send binary. You would have to have an object that has a field of type "byte[]". I have created a unit test demonstrating this: https://github.com/RhynoVDS/ObjectTransport/blob/master/ObjectTransport.tests/ObjectTransport_Receive.cs scroll down to line 249
You asked three questions, I answered two of them. And for the last: There's no alternative. But I never considered IntelliTest needed.
It's completely undocumented.
What sort of documentation are you looking for? I'm working on improving the readme.
It seems strange to bundle TCP and Serialization. It would make more sense to expose a stream based serialization API, which can be used with any stream including NetworkStream for TCP.
I've read the comments and looks like your crashes are related to out of memory issues, unfortunately I am on vacation this week so can't check the details but looks like issue is already under investigation and you provided all the information needed. I will take a look at it again once I am back in the office.
The network channel is injected into the ObjectTransport class via the constructor. All serialization occurs before it is passed to the network channel being used. At the moment I have only implemented a TCP network channel, but eventually I will have UDP,SSL channels all which will be injectable. These network channels themselves do not perform serialization infact, they are unaware of it.
Not op, but at first glance, code comments. Something to explain the methods as I'm looking at the code.
TIOBE is a joke, and OP is a spammer.
Yep, that will be in the next release for sure. Thanks.
That doesn't really explain why you can't leave the folder names alone and instead focus on localizing shortcuts. Even something like symlinks would be better, though still horribly hacky.
spammer might be a little strong, but their history certainly has a lot of self promotion.
&gt; TIOBE is a joke Pls elaborate.
It might be, but it is what most managers and HR drones use as part of their decisions.
Or from my experience c++ devs are just discovering versioning and open source. I know a lot of devs that still can barely use HG or GIT. They only use guis and couldn't tell you how most of it actually works.
If I told you to write the number 0 on a whiteboard and then add one to it over and over forever. When you finish that, tell me the number. What number would it be?
How is that even possible? There's no way to manage any decent sized software project without using some sort of revision control.
TIOBE aggregates google search data, poorly. Oh, so: * Java is over 4x as popular as JavaScript? * C is ~2x more popular than C++ and C#? * "Visual Basic .NET" is almost as popular as JavaScript? Please tell me more... It's almost like search terms can be ambiguous. Redmonk produces [indexes which are quite a bit more realistic](http://redmonk.com/sogrady/2017/06/08/language-rankings-6-17/).
That means u get an error
Its well never over I get what's u mean I'm using while (true) to refresh the getupdate I stop the loop when I get the value I need from the msg I don't run it forever is just until I get what's I want
I don't know if this even counts as functional but anyway. If it's functional why stop halfway? The method signature is: public static T LogEllapsedMs&lt;T&gt;(string formatMessage, Func&lt;T&gt; action) The string passed for fomatMessage is: "This thing took {0} ms" So a caller has to know that there are arguments passed that can be used with "{0}". To keep it functional, make the method signature like this: public static T LogEllapsedMs&lt;T&gt;(Func&lt;double, string&gt; formatMessage, Func&lt;T&gt; action) And then call it with this parameter: ellapsedMilliseconds =&gt; $"This thing took {ellapsedMilliseconds } ms"
"Functional style". It falls under the currently understood meaning of "functional style". *string formatMessage* is a reasonably well known .net convention. If something takes a string as the first parameter and especially if it includes "format" in the parameter name it probably follows this convention. Converting it to a Func doesn't make it more functional. The test for whether it's functional has more to do with whether there are side effects caused by state. The formatter used by default does actually depend on a bunch of state, regional settings, current time and so forth. But pursuing a functional agenda here would not net OP anything. Your solution **is** great for cases where you want to be able to swap formatters, it also makes it more testable for certain values of "testable". Chances are, in real code you might have a base implementation as you suggested with a method override calling your version and taking the format string (as per OP's signature). It would really over-complicate the article though. 
Lines 25 - 93 can be replaced with auto properties (as mentioned). Simply public TYPE PropertyName { get; } will do, since the private set is implied if you leave it out. Don't say: bool retBool = true; say var retBool = true; Always use var instead of an explicit type. Get into the habit and it'll make refactoring code much easier. There's a setting in VS to turn on a warning whenever you use an explicit type instead of var. I advise turning it on. if (ExchangeConnectionStatus == true) is redundant. Just: if (ExchangeConnectionStatus) will suffice. Never throw the base class Exception, always throw a derived class. throw new Exception("Already connected to Exchange!"); There's usually a good class already created but if not, there's a snipped to create one quickly. Go outside the class and type *exception* then press tab twice. Exception class created in the blink of an eye. string uri = "http://" + exchangeServer + "/PowerShell/"; again, var but also, never + strings like that. It's memory inefficient and looks ugly. Try instead putting a $ in front of the string and adding variables like this: var uri = $"http://{exchangeServer}/PowerShell/"; // build credentials object SecureString secPW = new SecureString(); foreach (char c in password) { secPW.AppendChar(c); } I wouldn't depend on so many comments, extract the code into a method and call it: var secPW = BuildCredentialsObject(password); Now, with a nicely named method you can remove the comment and the code looks after itself if someone refactors it/moves it etc. If you still find the code needs a bit of a comment summarise the method by typing three forward slashes above the method and VS will add a little template for you to create documentation. Try to make the methods readable and the names obvious to avoid documentation. if (posh.Streams.Error.Count &gt; 0 || result.Count != 1) I like to use posh.Streams.Error.Any() from the Sytem.Linq namespace as this is slightly more readable in my opinion and you don't have to count all the elements just to find out if there is at least one. This could be a massive speed improvement in certain situations. Again, use linq: SetExchangeSession(result[0]); should be one of: SetExchangeSession(result.First()); //There are multiple elements, I want the first one. At least one element exists SetExchangeSession(result.FirstOrDefault()); //There are either zero or multiple elements, I want the first SetExchangeSession(result.Single()); //I am sure there is only one element, and I want it. If there are multiple I have no way of choosing which to use, so throw an exception SetExchangeSession(result.SingleOrDefault()); //I am sure there is either one or zero elements, give me that element or the default of that type. If there are two or more I don't know how to handle that so throw an exception. depending on your situation. Your *GetMailboxServers* method could probably yield return an IEnumerable&lt;string&gt; instead of a list, but that's a bit longer to explain. Basically it'll lazily evaluate and only create the elements as you request them. If you actually need a list then there are better ways of doing it. (Like linq's ToList() method) bool isStartDateSet = String.IsNullOrEmpty(_searchStartDateTime) == true ? false : true; is easier to read if it's var isStartDateSet = !String.IsNullOrEmpty(_searchStartDateTime); Same with line 287. Personal preference but I prefer the lambda expressions for linq returnInfo = from r in psInvoke where r.Properties["Sender"].Value.ToString().EndsWith(newSuffix) == true select r; would be: returnInfo = psInvoke .Where(r =&gt; r.Properties["Sender"].Value.ToString().EndsWith(newSuffix)); Also, there aren't any unit tests. Before writing code you should write the unit test to test each part of it. Look up *Test Driven Development* for more information. You should *always* unit test code.
I mean devs made software before version control.. so my guess is that they think it's not that necessary to figure out how it works now.
It doesn't matter that you can't access msg from outside (which you can, by the way), because you'll never reach outside because the loop doesn't terminate.
Used to always get confused using undersore.js because of this, in underscore select is equivalent to filter/where
Okay, there's a lot wrong here in my opinion. &gt; string formatMessage is a reasonably well known .net convention. If something takes a string as the first parameter and especially if it includes "format" in the parameter name it **probably** follows this convention. "This thing took {0} ms" "This thing took {0} minutes and {1} seconds" (Guess as a client I have to try what happens) "This thing finished at "{0:y yy yyy yyyy}"" (I do get a date or do I? How the hell should I know) Strong typing is the keyword here. I hope you see this point. The formatter as you describe that depends *on a bunch of state, regional settings, current time and so forth* is the same as it is in my version. Even though there is no formatting going on when using doubles, especially there is no depending on current time... The code I've written compiles down to the same exact thing (string.Format) You think in a reasonable solution there would be inheritance for this? I don't go further into this point. But interesting what you think **real** code would look like.
Maybe I missed something then. Can you tell me what code is stopping the while loop? And under what condition will it be stopped?
Removed: Rule 3, Rule 7. Potentially plagiarism (hard to tell); the article is spammed/copied in quite a few places.
My bad for saying "base", I'm talking about method overloading; two methods with the same name and return type but different parameters. public static class ExampleMethodOverlodas { public static string ThisIsAMethod(string input) { return ThisIsAMethod(s =&gt; s, input); // I'm calling the 'base' version. } public static string ThisIsAMethod(Func&lt;string, string&gt; inputParser, string input) { return inputParser(input); } } I'm saying using the first parameter being a string with "format" in its name is an accepted C#/.Net convention. You're counter arguing it bypasses strong typing. The two statements are unrelated. Functional purity (a function being pure) means that the output is always the same for an input. Any code which supports C#'s string formatting cannot be pure. Some inputs will result in the same output, others will not. static void Main(string[] args) { Go("%K", DateTimeOffset.Now); Console.ReadKey(); } public static void Go(string format, DateTimeOffset input) { var result = input.ToString(format); Console.WriteLine(result); } But you're not talking about dates, you're talking about doubles. public static void Go(string format, double input) { var result = input.ToString(format, CultureInfo.CreateSpecificCulture("nl-NL")); var resultNative = input.ToString(format); Console.WriteLine(result + " - " + resultNative); } I'm in the UK where we use a . (period) to represent the decimal point. The crazy Eurolanders use a , (comma). OP's original code uses .ElapsedMilliseconds which is actually a long so we're both a little bit wrong :) Anyway, the tl;dr is that this is still a well known and well used convention. Type safety is a red herring.
Instead of writing a method that most people wouldn't know to call, this class should implement IDisposable and clean up those resources in it's Dispose method.
May I recommend the alternative `Stopwatch.StartNew()`?? Super simple change but it makes the code feel totally different.
/u/DevelopFrenzy why would I use something like this over ZeroMQ? Are message sends queued?
learn something new every day
You should try to avoid queries like this... you should replace Where ID= 118498 to Where ID=@someID and send a someID parameter. In this case, it's pretty safe because it's hard coded... but it's better to get out the the habit altogether... that way, if you do change this so the ID isn't constant it'll be easy to change without worrying about sql injection...
If you want to insert then you can turn identity insert off and on to allow this. https://docs.microsoft.com/en-us/sql/t-sql/statements/set-identity-insert-transact-sql
True, double instead of long was my mistake. That's what I meant with formatting anyway. There are no decimals to be formatted. 
Removed: Spam.
This is it right here. You'll need to create your data first with EF, then switch over to SQL Server Manager Studio and change the field, insert, switch back to identity and EF wont know you changed a think. I personally tend to do SQL first, but recent code first has shown usefulness. I've had to do this a few times. There may be a way to do this in EF, but honestly doing it in SQL is so simple and you do it once, you should just do it this way.
Great Thanks
next time for posting code - highlight all your code in Visual Studio (CTRL+A), then press tab, then paste it into reddit comment/submit box nicely formatted with ease 
Isn't it kind of strange that [,] is called multidimensional array and not a matrix? 
I don't understand how the language would affect the directory structure. Can't you implement some sort of a translation layer? aka 'english' -&gt; random-dir-name-here and if he changes the language you ask the user if he want's to keep the current "data". if yes you rewrite it in the translation layer?
And I would add: it's not really readable and it's not simple. If it can be avoided then better. I think it's better to make the code explicit and therefore more maintainable. But I guess that's a personal preference and not always doable.
&gt; I don't know if this even counts as functional but anyway I don't know if you mean your code or the author's code, but the *author's* code is definitely not functional, at least not in the "functional programming" meaning of the word. `LogEllapsedMs` calls `Debug.WriteLine`, which is an external dependency that could write to StdOut, StdErr, or a file. That's a big, glaring side-effect. `LogEllapsedMs` is not a pure function and *nothing that relies on it* can be considered pure either. It certainly looks functional, and it follows normal approaches for composition in functional programming, but that side-effect disqualifies it from being a pure function, and any code that used it would not be considered functional. That's fine, from a FP standpoint. You can't *avoid* side-effects in a practical FP program, you just push them as far away from your actual functionality as you possibly can. But the author's method, built in this way, represents a poison pill. It's not a good FP practice. 
Nested for loops are a simple way to do it. You could also use a convoluted linq statement if you want.
Hmm I tried nested loops but I'll go back and review. Thanks. 
Its well be stop if msg = "turn off"
How I can I access any idea plz 
&gt; string formatMessage is a reasonably well known .net convention. That should be taken out back and shot. It creates potential runtime exceptions out of things that 99% of the time are set in stone at compile-time (the string format) which would be better served by string interpolation. The other 1% of the time, when you actually need formats that change at runtime, you could do it better/acceptably an alternate way.
Each "cell" of a two dimensional array has both a row and a column, so what do you want exactly? 01 02 03 01 02 03 04 05 06 + 04 05 06 07 08 09 07 08 09 In the above what result are you hoping for?
Sounds like you are using data binding. Maybe the issues is it's doing two way binding. Perhaps this article will help: http://www.c-sharpcorner.com/blogs/wpf-binding-one-way-and-two-way1 
&gt; I'd be interested in seeing a real beneficial example of it in use. The main benefit to things like this is being able to chain extension methods that take collections/enumerations of elements to make composable and reusable logic. Consider https://projecteuler.net/problem=6 public static Func&lt;int, int&gt; Square = (value) =&gt; value * value; public static Func&lt;int, int, int&gt; Sum = (cumulativeValue, additionalValue) =&gt; cumulativeValue + additionalValue; public static IEnumerable&lt;int&gt; FirstNNaturalNumbers(n) { for(int i = 1; i &lt;= n; i++) { yield return i; } } public static void Main() { var input = 10; Func&lt;IEnumerable&lt;int&gt;&gt; values = () =&gt; FirstNNaturalNumbers(input); var answer = Square(values().Aggregate(Sum)) - values().Select(Square).Aggregate(Sum); Console.Writeline(answer) }
It's situationally appropriate. Not perfect but like everything, it's a balance. I'd be lying if I said I hadn't written code which screwed up purely because I forgot to update the format after deleting a variable from the params :) String interpolation is syntactic sugar and doesn't enforce type safety. //var weeeee = DateTime.UtcNow; var weeeee = 155; Console.WriteLine($"Weeeee = {weeeee:hh}"); This will show "hh" unless you swap the commented lines in which case it will show the hour. It's compiled into a composite call, something like string.Format("{0:hh}",weeee) ? Something like that. Honestly I have to look up the damn format strings every single time. I'm not really defending the practice, but it *is* an established .net convention.
each column is using binding to pull data. Adding "Mode=Oneway" to the binding prevents me from editing the cell. &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Header="Name" Binding="{Binding SourceName}" IsReadOnly="True" Width="*"/&gt; &lt;DataGridTextColumn Header="Description" Binding="{Binding SourceDescription}" IsReadOnly="True" Width="*"/&gt; &lt;DataGridTextColumn Header="#" Binding="{Binding Number}" IsReadOnly="False" Width="*"/&gt; &lt;DataGridTextColumn Header="Service" Binding="{Binding Service.Name}" IsReadOnly="True" Width="*"/&gt; &lt;DataGridTextColumn Header="Specification" Binding="{Binding Specification.Name}" IsReadOnly="True" Width="*"/&gt; &lt;DataGridTextColumn Header="Test" Binding="{Binding Insulation.Material.Name}" IsReadOnly="True" Width="*"/&gt; &lt;/DataGrid.Columns&gt;
Would it possible in your scenario to just clone the list, then bind your DataGrid to the new list?
I don't know what you mean by "clone". The list starts as a ReadOnlyCollection. I added the ListCollectionview to allow me to group similar objects and here I am.
 private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e) =&gt; e.Cancel = true; that worked to stop the data from being push. Thank you. Is that the only way to stop that two way communication?
Yes - same for me. I just get an error when I land on the main page (and also if I log in). I'm hoping they will actually fix it - I have a few things I want to get from there too.
Why is this functional and not just inversion of control for the benefit of re-use. Just follow SOLID
I added onto my original answer. Let me know if that doesn't work out
I don't see that in the code...
Yes because isn't necessary I need only way of access msg from outside loop and other I can handle myself 
Well, just wait for the loop to finish and then you should be able to access the variable at whatever it's final value was.
tl;dr: ctor&lt;tab&gt;&lt;tab&gt;
tl;dr: prop&lt;tab&gt;&lt;tab&gt;
Not sure what IDE you are using, but if you aren't using Visual Studio, you might want to give it a shot and use the debugger. Then you can see what msg is each iteration of the loop.
CodePlex is being shut down. All project owners have been advised to move their projects to GitHub. https://blogs.msdn.microsoft.com/bharry/2017/03/31/shutting-down-codeplex/
There are few things wrong with your code. You're declaring a new dealer every loop iteration, there should only be dealer for the game, just like in real life. Also your "This is a test:" line doesn't actually print the test value. You'd need something like Console.WriteLine("This is a test: {0}", test.Value); or Console.WriteLine($"This is a test: {test.Value}"); In any event, the code below works for me: static void Main(string[] args) { Console.WriteLine("Poker Hands, press Enter to random the flop..."); var answer = Console.ReadLine(); if (answer != null) { var dealer = new SimpleDealer(); var flop = new List&lt;Card&gt;(); for (int i = 0; i &lt; 3; i++) { flop.Add(dealer.DealCard()); } foreach (Card cd in flop) { Console.WriteLine(cd.DisplayValue()); } } Console.ReadLine(); } 
Hmm.. not sure if I understand your point about security. OAuth and OpenID are easily integrated into WebAPI services. It is not a part of the default configuration, but enabling it so straight-forward that it looks pretty much natural there. One thing that took me some time to make it work is OAuth for SignalR - those things are a bit hard to integrate, though also possible. I had to add an intermediate layer to take authentication tokens from parameters and put it into the headers.
I'm using visual studio msg be empty don't output nothing outside loop
I edited my other comment
Did the loop finish running?
You've been a saint cristo! Thank-you once again for the informative and helpful reply :)
Kind of sad, really. I LOVE GitHub and even their text editor Atom, but less competition is always bad for the consumer...
No never at less if the msg value got string predefine. By me the purpose of while true is to the keep checking if he receive msg from user that's why I'm using it 
Maybe this is just a specific use case, but you should probably be using the MVVM pattern and not directly binding to your model object (DWG). You should be creating view model objects. I'm not familiar with how DWG files are written, but what you should do is create a DWG model class which handles updating the underlying file. Then each view model object would have a reference to that model. You can have the view model implement some update function at which point you would take all of the records and update them. On mobile so I can't make a good code example but I'll try to make a good effort when I'm on a computer.
Removed: Rule 7, spam.
Removed: Rule 7, spam.
I'm not sure it simplifies anything in this particular example, but yeah with a more complex accumulator than Sum, I can see it could have its uses. Thanks.
Perfect - works exactly as I had hoped, enjoy your travels! Where are you travelling to out of interest Cristo?
Thanks for the tip saddertadder!
Will do, thanks for the reply Mouaijin :)
Whoops, my mistake - thank-you for the reply Scotty :)
Doesn't really answer OP's question though. He apparently knows it's shutting down.
On mobile so I can't respond properly (will do later), but I would take a look at CollectionViewSource and its Filter event. https://msdn.microsoft.com/en-us/library/system.windows.data.collectionviewsource(v=vs.110).aspx
Looks like CodePlex is just having issues right now.
the program is intended to be fairly small as I familiarize myself with how this API works and building an application in general. This issue popped up and has prevented me from going further. Getting the data and updating the objects hasn't been a problem. The way it is happening and when is the issue I am having. When I edit one of the cells the object shouldn't update. I didn't even know that it could. This would be fine except it throws and error in autocad.
Yea, I think so too. Even trying to access it throws errors.
I feel like I may be leading you in the wrong direction, but this solution will work, although a little more involved than some simple XAML. Since your `Item` class wasn't something created by you, you can't just go in and implement `ICloneable`. You can however create your own object that inherits from `Item` and then implements `ICloneable` like so public class MyItem: Item, ICloneable { public object Clone() { return MemberwiseClone(); } } then just create your new list based on `MyItem`. Of course, if `Item` happens to be a sealed class, then you'd be out of luck
"item" does not contain a constructor that takes 0 arguments no go on that one.
I hope it's temporary, I completely forgot about moving my old projects over.
First GotDotNet, then this. We're losing a wealth of resources, many of which won't be migrated. It's getting harder and harder for me to trust Microsoft.
It's not even necessarily *just* Microsoft, it's just any competition in general for GitHub is a good thing. I am so grateful that there's BitBucket - while I don't personally use it and I use GitHub myself, I am so glad GitHub isn't the only Git service out there.
&gt;I just want to pull a few bits of code out **before it shuts down.**
Would it be helpful, if there was a convenient way to identify a given folder, regardless of its current name? So regardless of the name, you can determine that the folder was originally named "ABC", and therefore it should be named to whatever "ABC" is in the newly-selected language? The win is avoiding having to test for the &lt;n&gt; possible names for any folder, i.e. number of folders * number of languages. Also, you could add languages without having to change your code that figures out which folder is which. You just have to test whether a given folder is "ABC". If that sounds helpful, then a way to do that is to store the "ABC" with the folder as an Alternate Data Stream (assuming you're using NTFS). I do this with my folder-renaming utility: store the original name before changing the name so I can restore the original if necessary. I can give you code for doing that. Works for file names too. It's maybe 30 lines of code (and lots of comments). &gt; however this method would many lines of codes. Why are you averse to many lines of code? If that's what it takes, that's what it takes!
Picture of error: https://imgur.com/a/ox2vE
Do you know what line this is breaking on? Also, this looks like homework so I'm not keen on just _giving_ you the answer. I would double check your assumptions about the size of arrays you're indexing into.
The download links are 404ing on me. E.g. http://wudt.codeplex.com/releases/captureDownload That should be a direct link to the source download of a project.
I think this line: lstStudents.SelectedItem = lstStudents.Items[randomNumber]; And yes it's hw but there's a lot more to the whole thing than just this that I have done, this is just one part I've spent over 2 hours trying to debug without any luck.
What is randomNumber? What is lstStudents.Items.Length? randomNumber == lstStudenst.Items.Length when you hit this error, hence the index error you're seeing. If you have time, take a break :) A clear mind will help you find the problem. If not, I'd suggest going through each iteration of the loop and watching how the lstStudents.Items changes.
randomNumber is a number that is randomly generated between 0 and the total number of students in the file which is imported elsewhere. I don't see where you are seeing lstStudents.Items.Length unless you're saying I'm supposed to use that. Is that when I'm using the .Count part earlier? 
A few things to consider that should help you get to the solution. 1. Inside your while loop you only randomize one number and you use that to access both students to add to the list. 2. You are grabbing that random number based on the length of the list, however you are also changing the length of the list when you remove an item. As the other poster said try to watch how the values are set while iterating through the loop paying close attention to the random number and the list of unrandomized students (lstStudents)
&gt; I don't see where you are seeing lstStudents.Items.Length Sorry, this was my fault. I assumed lstStudents.Items had a .Length property, but it looks like it has .Count instead which is fine; they should be the same thing. /u/Epic_Ariki had some good advice that's pointing you right to the problem. &gt; Inside your while loop you only randomize one number and you use that to access both students to add to the list. 
Hm ok so I need to reduce the length of the list every time one is removed? I'm sorry if this is something easy, the prof kind of introduced a lot of new concepts with this project. Unless I'm wrong I thought this part lstStudents.Select(); lstStudents.SelectedItem = lstStudents.Items[randomNumber]; Was selecting a new random number to use for the second group, or is that not doing that because I'm missing something?
Ok so it seems I need to account for the list losing one item every time one is moved which makes sense, I would have thought lstStudents.Items.Count Would go back and get an updated number so I added: randomNumber = random.Next(0, lstStudents.Items.Count); Before the second random number between 0 and the list size was used, but that isn't helping.
What is lstStudents.Items.Count when it fails with the newly added randomNumber? Is it still failing on other things or just when randomNumber is 0? Remember that you are removing 2 items in your loop; what happens if there are 7 students being divided into 2 groups? I'm assuming the last lines are now randomNumber = random.Next(0, lstStudents.Items.Count); // Selecting a new random student after removing the 1 added to group 1 lstStudents.Select(); lstStudents.SelectedItem = lstStudents.Items[randomNumber]; // Adding the randomly selected listbox item to the group 2 box lstGroup2.Items.Add(lstStudents.Items[randomNumber]); lstStudents.Items.Remove(lstStudents.SelectedItem); } 
The length of the list does reduce every time however the random object only generates a new random number when you call next. You are on to the right track with the change you made :) Before your code was basically saying int randomNumber = 5 // Say it grabbed 5 from Random.Next() lstStudents.SelectedItem = lstStudents.Items[5] lstStudents.Items.Remove(lstStudents.SelectedItem) lstStudents.SelectedItem = lstStudents.Items[5] lstStudents.Items.Remove(lstStudents.SelectedItem) But now it will correctly grab a new number based on the updated length of the list.
I think you're either missing how variables work, or how random.Next() works. randomNumber is not a synonym for random.Next(0, lstStudents.Items.Count). randomNumber is just a variable whose value got assigned that time you called random.Next. It's not going to change unless you assign something else to it. Similarly, random.Next is just a function. It returns values only when you call it.
Based on another response I added: randomNumber = random.Next(0, lstStudents.Items.Count); right before the part you are referencing, that still doesn't seem to solve it. I'm pretty sure I understand the issue but I guess I'm not sure what I need to do. 
It should have solved at least one of your problems where it was failing on the index being 2 or 4 (or any number greater than 0). It should now only be failing on the 0 edge case. 
Based on this https://imgur.com/a/9ykA5 I'm thinking 0? I'm not 100% sure if that's what we're looking for.
Right and that makes sense so I added randomNumber = random.Next(0, lstStudents.Items.Count); Which should be updating the variable value based on that function right?
your random number is 0, so you're trying to grab the first element of lstStudents. Check and see what items are left in lstStudents at that point where it's throwing the error
I got it working, the issue was with there being an odd number, it was trying to do group 2 when there were no students so I added an if statement to skip it if lstStudents == 0 Thank you for the help!
Yes, that's correct. It looks like you know how to use the debugger. Do you how to use a watch window? You can watch the value of arbitrary expressions as you step through your code (like lstStudents.Count, or lstStudents.Items[randomNumber]). You *are* stepping through the code, and not just running it and waiting for it to break, right?
Good for you, and I hope you're enjoying "struggling" with the code. Every time you figure out a problem like this, it makes the next one easier.
I'm actually not sure how to but I probably should, I was looking at the local window to see some of the variables updating.
Profs never teach it, but stepping through your code in the debugger is the number one skill that will get you over the beginner hump. Spend 10 minutes learning it now, it will save you hours in the future. [Here's a basic intro for Visual Studio.](https://blogs.msdn.microsoft.com/visualstudio/2015/08/11/introduction-to-debugging/)
I'll check it out, thanks!
Thanks for the offer but don't worry about it 😊 just pay it forward or something
You should create an example that fails the way you want it to and post it up in entirety for people to see what you are doing. At first blush I can see you are iterating through your collection at least n^1 times. Possibly more depending on what the rest of your code/bindings are doing. I see you are binding to a list, binding to an observable collection would allow changes to the data without interrupting the UI thread. I think there are also data filter converters or other tricks you could do with WPF but I have not played much with them. 
I may have missed something but most of the announcements I read earlier in the year made it pretty clear if you were not out before the summer then all bets were off. Even if they are keeping it online i would not expect a massive amount of response when something goes wrong. 
Sounds good, thanks again!
This is interesting, I have an interest in the code. I must have expressed myself badly because I do not have criticism against many lines of code, I have criticism against code repetition so that maintenance is not a headache, but if it differs from this situation, I love long codes that I only need to use once and if there is a need for maintenance I just need to change in a single place the working rules.
&gt;CodePlex will begin to go read-only the week of November 6th, 2017. For anyone curious https://codeplex.codeplex.com/wikipage?title=Moving%20CodePlex%20to%20read-only
Did you read https://codeplex.codeplex.com/wikipage?title=Moving%20CodePlex%20to%20read-only ?
You would need to implement the constructor for `Item` then pass in the parameters to the base constructor. Honestly, the more we go into it, the more I hate this solution. I feel like there's something way easier out there, but I just don't know what it is.
This function shows how to SAVE the original folder name (or "ABC"): /// &lt;summary&gt;Stash the folder's name as an NTFS extended attribute, if it hasn't been stashed already&lt;/summary&gt; /// &lt;param name="folder"&gt;Either the full path-name or just the folder (the path)&lt;/param&gt; attribute, if it hasn't been stashed already")] public static void SaveOriginalFolderName(string folder) { // So it can be restored later, if something goes wrong if (!Directory.Exists(folder)) { folder = Path.GetDirectoryName(folder); if (!Directory.Exists(folder)) throw new Exception("File does not exist: " + folder); } // Has the original name been stashed before? if (f.SetOrGetCustomAttribute(folder, "OriginalName").StartsWith("Failed")) // No { // Stash the folder name f.SetOrGetCustomAttribute(folder, "OriginalName", folder); } } The "OriginalName" is an arbitrary tag, that will be used to retrieve the stashed value later. To GET that value, you would just use one of the lines from above: string originalName = f.SetOrGetCustomAttribute(folder, "OriginalName"); 'f' is just the name of the static class that contains all my utility methods. Here's the method that does the work of stashing the string and retrieving it later: /// &lt;summary&gt;On NTFS, this will assign custom data using Alternate Data Streams to a file or folder&lt;/summary&gt; [f.ToolTipAttribute("On NTFS, this will assign custom data using Alternate Data Streams to a file or folder")] public static string SetOrGetCustomAttribute(string target, string contentLabel, string contentToAdd = "") { // This method creates (set) or read (get) a NTFS Alternate Data Stream. It uses the Trinet.Core.IO.Ntfs functionality // highlighted here: http://www.codeproject.com/Articles/2670/Accessing-alternative-data-streams-of-files-on-an. // CAUTION! This only works on files on NTFS, and the attributes are LOST if the files are copied to // a non-NTFS file system. Note that all (as far as I know) USB keys are FAT, not NTFS. // CAUTION! Arbitrarily, the content-to-add is limited to 100 characters. MORE results in an exception. // This can be changed as needed, by changing the hard-coded number in the code. This was necessary // because when resetting "false" to "true", the result was "truee" -- the "e" in "false" was not // being overwritten. To overwrite existing data, I had to pick a number of bytes to write. Thus, // when "true" is passed, 100 bytes are written so that "e" in "false" is obliterated. // The contentLabel MAY NOT contain any spaces! This method will remove them, though, if you want them for some reason. // Usage: contentToAdd, to SET an attribute (3 arguments), else you GET the attribute (just 2 arguments) // // // Set the UniqueID value to "12342134" // string writeResult = SetOrGetCustomAttribute(@"C:\videos\", "FolderName", @"C:\videos\"); // if (writeResult == "Failed") // ... it failed // // // Get the previously-set folder name (the GET is signified by there being no contentToAdd) // string readResult = SetOrGetCustomAttribute(copyFromFolder, "FolderName"); // if (readResult == "Failed") // ... it failed // // // If you're saving a file name, you probably want JUST the file name, not the path also // string writeFileResult = SetOrGetCustomAttribute(@"C:\videos\Program.cs", "FolderName", Path.GetFileName(@"C:\videos\Program.cs")); // if (writeFileResult == "Failed") // ... it failed // Signifies FAILURE, when getting an attribute that's not there string result = "Failed"; // Does the directory exist? Boolean isFolder = Directory.Exists(target); Boolean isFile = File.Exists(target); if (isFolder &amp;&amp; isFile) throw new ApplicationException("It's can't be BOTH a folder and a file?!: " + target); // HOYTFIX Make the file writeable? // f.RemoveFileReadOnlyAttribute(target); // Get the modified date, so it can be restored DateTime modifiedDate = f.LastModifiedDate(target); // Spaces in the content label cause a silent failure on the read or write (cannot tell which) string cleanContentLabel = contentLabel.Remove(" "); // HOYTFIX Remove all non-file characters? Tab will break it too, no doubt. // Are we setting or getting? AlternateDataStreamInfo info = null; if (f.Vs(contentToAdd)) // Setting (because content-to-add was passed) { // Content cannot contain :// which WILL be passed, if we're stashing the original folder name contentToAdd = contentToAdd.Replace(":", "`").ReplaceAll("\\", "~").Replace(" ", "#"); // Throw an exception if the content-to-add is too long const int maxContentLength = 200; if (contentToAdd.Length &gt; maxContentLength) throw new InvalidArgumentException("Content-to-add cannot exceed " + maxContentLength + " characters"); string paddedContentToAdd = contentToAdd + f.Spaces(maxContentLength - contentToAdd.Length); if (isFolder) { DirectoryInfo directoryInfo = new DirectoryInfo(target); info = directoryInfo.GetAlternateDataStream(cleanContentLabel, FileMode.Create); } else { FileInfo fileInfo = new FileInfo(target); info = fileInfo.GetAlternateDataStream(cleanContentLabel, FileMode.Create); } FileStream fs = info.OpenWrite(); byte[] contentAsBytes = paddedContentToAdd.ToBytes(); fs.Write(contentAsBytes, 0, paddedContentToAdd.Length * 2); // 2? Why? It makes it WORK, but... maybe, two bytes per character? fs.Close(); // Restore the modified date if (isFile) File.SetLastWriteTime(target, modifiedDate); else if (isFolder) { try { Directory.SetLastWriteTime(target, modifiedDate); } catch { } } result = "Success!"; } // Otherwise, get the previously-set attribute else { if (isFolder) { DirectoryInfo directoryInfo = new DirectoryInfo(target); if (directoryInfo.AlternateDataStreamExists(cleanContentLabel)) info = directoryInfo.GetAlternateDataStream(cleanContentLabel, FileMode.Open); } else { FileInfo fileInfo = new FileInfo(target); if (fileInfo.AlternateDataStreamExists(cleanContentLabel)) info = fileInfo.GetAlternateDataStream(cleanContentLabel, FileMode.Open); } if (info != null) { // Get the previously-stashed content using (TextReader reader = info.OpenText()) result = reader.ReadToEnd().Replace(Convert.ToChar(0x0).ToString(), "").Trim(); // Remove NULL characters and spaces // Convert it back, if it contains a path result = result.Replace("`", ":").ReplaceAll("~", "\\").Replace("#", " "); } else // The set hasn't been done! (Or the file was copied to a FAT partition) { result = "Failed: Attribute " + contentLabel + " does not exist on \r\n\t " + target; } } return result; // Success!, when setting content -- or the content, when getting content -- or Failed } The method uses a few of my methods, which might be obscure. f.LastModifiedDate() returns the folder's last modified date. f.Vs() is the equivalent of !string.IsNullOrWhiteSpace(). f.Spaces() returns a string containing the specified number of spaces. Let me know if there are other custom methods that I haven't explained. So your logic would be: At the outset, set all of the folder names to their default names, and stash that name IN each folder by calling SaveOriginalFolderName(). When the user selects a different language (or when you are applying the user's preferred language, once that has been determined), loop through the folders a) Call f.SetOrGetCustomAttribute(folder, "OriginalName") to get that original name b) Change that folder's name to the new-llanguage equivalent Maybe a method that takes the original name and a language returns the language's equivalent to that original name. Hope this helps. Let me know if I can clarify something. 
Ok, so you have a textbox with a `TextChanged` event and a binding to the text property &lt;TextBox TextChanged="FilterBox_TextChanged" Text="{Binding Path=Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"&gt; &lt;/TextBox&gt; We need to set the filter for your song collection when you're initializing your view model or however you decide to create your `ObservableCollection` of songs. CollectionViewSource.GetDefaultView(viewModel.Songs).Filter = Filter; //viewModel.Songs is just your collection Of course, `Filter` doesn't exist yet, so let's make that method with the proper signature and return true if your song contains the filtered text private bool TicketFilter(object item) { if (string.IsNullOrWhiteSpace(_viewModel?.Filter)) return true; var song= (Song)item; //or whatever your type is return song.ContainsText(_viewModel.Filter); } I decided to give my object a ContainsText extension method, but you can do this any way you want. It would probably look something like this public virtual bool ContainsText(string text) { string upperText = text.ToUpper(); return AlbumName.ToUpper().Contains(upperText) || SongName.ToUpper().Contains(upperText); } Then implement your text changed event to refresh the filter private void FilterBox_TextChanged(object sender, TextChangedEventArgs e) { CollectionViewSource.GetDefaultView(_viewModel.Tickets).Refresh(); } That's basically it. You can change much of that to fit your own rules, but this should let you filter with little lag 
It seems far more complicated than it should. I thought it would be simple to have a datagrid populated and only update info when I say so. 
It's official now: https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes
The difference between the two is: WS-SecureConversation/Security/Trust specifications are part of the WS stack (and e.g. WCF). OAuth is a client-side tech, made for user interaction, and completely separated from WebAPI. To those who know how to operate WS stack, can add *a lot* of security by doing not much more but configuration. Not so with OAuth/OpenID. I predict the following: OAuth/OpenID will end up being "configurable" in the same way with the WebAPIs, but that will be in several different ways, and eventually it will be standardized :-).
October of death. Getting ready for Halloween! AIM is dead. Windows Phone is dead. Codeplex is dead. Android phones approaching $1000. End of the world.... end of the world...
We had a temporary issue affecting login and a few other features. It should be resolved now - can you try again?
I'm not aware of the direct link you've shared above, but downloads from the button on the right side of http://wudt.codeplex.com should be working. Can you try from there?
Ahh, the intricacies of ctrl-tab and its options. I would've been lost without a video since I can't read and don't know what https://msdn.microsoft.com/en-us/library/a96fx0b9.aspx says
At the moment I think I understand, I'll try this. I will be applying this as soon as I finish or if I have any questions, I will be giving feedback. Thanks so much for the help. 
Have you tried VSTS?
C# is one of the best oop based language
There's so much wrong with this, it's really sad.
Cool, it's back. Thanks :)
Yeah, that's November. But yesterday I couldn't get to anything codeplex at all. Firefox showed a blank page, Chrome showed a cryptic error sometimes.
I'm out, I wanted some code other people wrote that I wasn't entirely aware was in there. MVVMLight still seems to be in there for example with no mirror or GitHub version
/u/fullstackweb, I really think this violates rule 7.
why ?
Where is this quality? It's an ad-ridden blog, filled with pointless buzzwords, poor punctuation a tiny embedded video. Where is this effort? The video is a shitty 20 seconds clip, with absolutely no sound, no voice, just a Notepad window with some written words. It's pointless. A mention of a shortcut, wohoo. No description what a breakpoint is, how it's useful, how to set breakpoint in lambdas, no mention of tracepoints or conditional breakpoints. It's literally just frigging mentioning a shortcut. Something you can say in one simple sentence.
Its for beginners not for professional and I am not using any add service on my blog and you cant expect a really long long video for tips and tricks.Regarding quality - I am an absolute beginner in the video production side and it will of course improve in the long run 
Do I miss some methods or is it my impression? out that there are some errors of arguments. In other words I got lost, so could you show me an example of this in action?
I think this is a very handy trick (well-known tho), but not only on vs, but in several microsoft (and non microsoft) software (sql server management studio, notepad++, etc). Particularly useful when doing sql scripts tho :)
Thanks for a very comprehensive answer. The thing is, I want the main source/list of Shows/Songs (xD) to be in the ```static AppGlobal``` class as shown in the 'MyShows binding for DataGrid' picture in the OP, or is that not the best way to do things? I am not using a ```ObservableCollection``` but just a normal List as the ```MyShows``` variable is never set, it only has a get accessor. I also have not worked with a ```CollectionViewSource``` before, is it part of the DataGrid? I see for your filter variable you just call a method without the need for a parameter, where as the one tutorial I followed required a parameter: public event PropertyChangedEventHandler PropertyChanged; protected void RaisePropertyChanged(string propertyName) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } So the main reason I did the filter and getting of shows is to be able to have custom search filters, but I see I could do it in your ```ContainsText``` extension method.
I'll def make a mock project and try reproduce it if I'm unable to get this solved. The thing is, what I stated in the OP, is that before using MVVM I was using a ListView and manually setting the ItemsSource and refreshing the .Items when I needed the view to refresh. This had no input lag at all, it was very fluid and fast, even on my low end laptop. Where as the current state on my laptop it can take up to 4s to load :( The reason I'm not using a ```ObservableCollection``` is because of the way I have the main source of Shows in ```AppGlobal``` static class which contains the User variable. The User.Shows is all the shows linked to the user (me in case of the video) I was not sure how I could change it to be able to use an OC.
Looks interesting, will give it a try at some point.
Removed: Rule 7, spam.
Removed: Rule 4. Please include the resources you're referencing. Also include any relevant code that you have. Also, include the platform/framework and operating system you're using.
I think it fixed the high CPU issue too (don't see it in release notes, or just missed it)
This is the code I referring to https://github.com/lolp1/Overlay.NET It comes with nuget build as well, however, It can't be worked on a fullscreen app. Just looking for a snippet how we could do it with a fullscreen app.
That totally makes sense. It's awesome learning new things.
I just implemented an interface on the base class that exposes only the two properties I need for the calculation in the derived class. As per /u/SirSooth suggestion I made the passed in parameter of type IEnumerator&lt;Interface&gt; and I was able to pass in all 4 classes into that function no problem.
I would advise against this approach because if later you would like to use a tracing tool like dotTrace your logger will be accounted for all performance bottlenecks because it executes action internally :( Prefer IDisposable approach instead.
In reference to u/_____blank's response, the *CollectionViewSource* is just another type of collection in the System.Windows.Data namespace. It's used with binding's just like any other collection. Example: public sealed class ViewModel { public CollectionViewSource Collection { get; } = new CollectionViewSource(): } Then in your view: &lt;DataGrid ItemsSource="{Binding Collection.View}" /&gt; *CollectionViewSource* is a special collection that allows filtering, and can then have it's *Refresh()* method called, which updates the view. In the MVVM pattern, you don't want to make the view objects that same as the model objects. In your example, the *Show* class appears to be your model objects. Each *Show* class should have a respective *ShowViewModel* class: public sealed class ShowViewModel : BindableBase { public ShowViewModel(Show model) { Title = model.Title; ReleaseYear = model.ReleaseYear; } public string Title { get; } public int ReleaseYear { get; } public bool HasText(string filter) { string upper = filter.ToUpper(); return upper.Contains(Title.ToUpper()) || upper.Contains(ReleaseYear); } } The reason we use *HasText(string)* is because we want the individual object to have knowledge of itself (and makes for a cleaner filtering function). In this example *BindableBase* is from the [Prism](https://github.com/PrismLibrary/Prism) framework. It also provides other useful classes, such as your *RelayCommand* (Prism calls it *DelegateCommand*). The reason u/_____blank uses *OnPropertyChange()* without providing an argument is because in Prism the OnPropertyChange method has the *[[CallerMemberName]](https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.callermembernameattribute(v=vs.110).aspx)* attribute for the parameter. This will resolve the caller member's name at runtime instead of the developer having to specify it. So instead of this: string _name; public string Name { get { return _name; } set { _name = value; OnPropertyChanged(nameof(Name)); } It's this: string _name; public string Name { get { return _name; } set { _name = value; OnPropertyChanged(); } Prism even goes a bit further and uses the *SetProperty(ref obj, object value)* method, which automatically calls *OnPropertyChange()* for you. Another performance issue worth noting, that has already been pointed out, is that you are iterating over your collection several times. In small sample sizes, this is okay. However, when you get into larger sample sizes or multiple search criteria you will have a severe performance hit. I would suggest performing some sort of throttle to your search, where it only attempts the search after typing has completed and not after each character. A simple fix for this is adding in the *Delay* property to your binding. &lt;TextBox Text="{Binding Title, Mode=TwoWay, Delay=500}" /&gt; This provides a delay of 500ms before the binding gets updated. Therefore, if you type a single character and wait .5s you will get a search to occur. However, as you continually type characters, the delay gets reset and only triggers after that delay occurs (therefore, hitting backspace a couple of times or holding it down doesn't trigger multiple filter calls). Another helpful performance boost to the DataGrid is to set the *VirtualizingStackPanel*'s *IsVirtualizing* and *VirtualizationMode* as follows: &lt;DataGrid ItemsSource="{Binding Collection}" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" /&gt; Another, more complicated implementation, is to implement a delay method using the *[CancellationTokenSource](https://msdn.microsoft.com/en-us/library/system.threading.cancellationtokensource(v=vs.110).aspx)* to perform actions and cancel actions that are no longer needed.
Nope, never even heard of it honestly.
Yes, it is possible. Look into using a Canvas control in your form.
I was looking for the source download, but it's working again. Must have been under heavy traffic earlier.
Bind the DataGrid to an `ObservableCollection&lt;Show&gt;`(i'll call it oc) and in the Textbox Filter PropertyChanged Event do foreach(show s in AppGlobal.Shows) { if(s.SeriesName.Contains(filtertext) { oc.Add(s); } }
Will do. Thanks.
When you edit a cell in a WPF DataGrid, the *CellEditEnding* event will cause the binding to be updated. In an example above, I see that you are setting IsReadOnly="False" on only one column - that is the only column that is going to be editable in your DataGrid (making sure you are aware). As far as your other issues are concerned, you really need to move away from binding directly to the model. Take a database for example - you don't want to bind to database values correctly. Not only would that be poor performance, but updates work much better in bulk (i.e. when you are done editing an entire record or when the user clicks a button to perform an update). I'm not familiar with DWG files, but from what your bindings look like I will try and put something together. So maybe something like this as your model (based off Prism MVVM): public sealed class DwgRecord { public int RecordId { get; private set; } public string Name { get; private set; } public SourceModel Source { get; private set; } public ServiceModel Service { get; private set; } public SpecificationModel Specification { get; private set; } public InsulationModel Insulation { get; private set; } public void Update(string name, string sourceDescription, string serviceName, ... ) { /* Update actual DWG here */ } } public sealed class DwgViewModel : BindableBase { public DwgViewModel(DwgRecord record) { Record = record; SourceName = Record.Name; /* initialization items here etc*/ UpdateCommand = new DelegateCommand(() =&gt; Record.Update(SourceName, SourceDescritption, ...)); } DwgRecord Record { get; } string _sourceName; public string SourceName { get { return _sourceName; } set { SetProperty(ref _sourceName, value); } } // Other binding objects here public DelegateCommand UpdateCommand { get; } } In this way, you can make changes to each record however many times you want, but it will only update the actual model file when you click the button to execute the UpdateCommand.
&gt; public sealed class DwgRecord &gt; { &gt; public int RecordId { get; private set; } &gt; public string Name { get; private set; } &gt; public SourceModel Source { get; private set; } &gt; public ServiceModel Service { get; private set; } &gt; public SpecificationModel Specification { get; private set; } &gt; public InsulationModel Insulation { get; private set; } &gt; All of that is already created when I use Job.Items(). The method in the Job class retrieves all the objects in the dwg and all of the properties that they contain (Name, Number, Specification, etc). I am not sure how I would Implement the DwgRecord class because that info is given to me in a readonlycollection. This is why I bound the Model directly to the UI. that is clearly not working but the way to separate this data seems to be more difficult than I anticipated.
A readonlycollection only means that the collection can be assigned during initialization or in the constructor. As such, if it were implemented: public sealed class JobItems { ReadOnlyCollection&lt;T&gt; DwgRecords { get; } public JobItems() { DwgRecords = new ReadOnlyCollection&lt;T&gt;(GetRecords()); IEnumerable&lt;T&gt; GetRecords() { /*API Gets records here*/ } } You should still be able to get all of the Job.Items(), iterate over them, and create them as ViewModel objects. Perhaps if you could give a little more context, such as a reference to the API you are using, an example project in its entirety that will exhibit your issues, etc I might be able to get a better picture as to how things are working.
I'm actually working on one. Problem is that I'm terrible with WPF. 
https://files.fm/u/hqa7cp9t that is the help file that comes with the software API. You won't be able to use or test the sample program that comes with it without autocad.
I finally found the one that works, working with a fullscreen app as well. This is the blog if anyone also interesting. http://spazzarama.com/2011/03/14/c-screen-capture-and-overlays-for-direct3d-9-10-and-11-using-api-hooks/
With C# you can make almost anything, including this, but targeting Windows Forms is a mistake. I suggest upgrading to WPF (at least) for performance.
It's fun coming up with the fillet algorithm. Write a spec and I'll (and others) will probably tell you where to look. 
Thank goodness! This is why I reverted back to 15.0. 
For learning I think Windows Forms is fine. It has a way lower barrier of entry than WPF.
Websockets is that same as saying i will write my application in assembly rather than using c++ or c#. It is extremely low level in comparison.
You should really do : var arrows = new Arrow[] {a1,a2,a3}; foreach(var arrow in arrows) { if(arrow.Opacity == 1) //do this else arrow.Opacity = 0.5 }
I honestly don't have a clue what you're talking about. XD
I'm not even sure which is used to make actual software. I thought it was Windows Form
Windows Forms is the oldest GUI framework, and is pretty much end of lifed. WPF is newer and still supported.
I know it's not a popular opinion in this sub, but please can we stop encouraging new projects to target anything other than Web for UI? There are perfectly good Web canvas and other UI options available. We are doing them a disservice to exclude the Mac and tablet markets from their available market.
For learning programming, stick to the console. For learning to make a GUI application, Windows Forms is probably a waste of time.
Read this: https://msdn.microsoft.com/en-us/library/windows/desktop/dn614993(v=vs.85).aspx
Youre making a drafting program and you dont know what a fillet is? Good lord...
You didn't know what a fillet is at some point either. Like I said, I'm teaching myself. Thanks for you input.
Are you making changes to the paths/files while enumerating? If so, it's plausible that the `EnumerateDirectories/EnumerateFiles` can return stale results. If so, use `GetDirectories` and `GetFiles` instead. Also, why the opening/closing of the files? In the second example, I'm not familiar with the `Alphaleonis` API, but is there a reason we're doing a `File.Exists` call with a _directory_ path? Also, seems to me that the second example doesn't do anything to match `dirpath` and `srcpath`. They're independent searches/results. Try debugging/outputting each path you're comparing and make sure they're linking up the way you expect. I'm not sure in your use case scenario, but if you're simply trying to mirror directories you could look into using something like Robocopy, or perhaps just simpler code, like some parts of [this StackOverflow answer](https://stackoverflow.com/a/32478835/1269654).
&gt;We are doing them a disservice to exclude the Mac and tablet markets from their available market. Who would use a full blown CAD program on a tablet? Also, UWP would allow the user to be able to use it on a Windows 10 tablet. It is important to know the market, if it is mostly Windows who cares if you don't have a Mac version? 
Have you set a breakpoint and stepped through the code line by line to see what actually happens? The first snippet is rather convoluted, but two things that come to mind: - Does `filename.Replace(StartDirectory, EndDirectory)` actually work as intended, or is it possible that `filename` doesn't match `StartDirectory` exactly (e.g. different capitalization, relative vs. absolute path etc.) - You should not be mutating shared state from within a `Parallel` loop (`filesSkipped` and `extraFiles`). Honestly, just get rid of the parallelization completely at least until you've got it working, that's just an extra can of worms. The second snippet makes no sense to me at all. For every directory in `EndDirectory` you look up every directory in `StartDirectory` and then then you check whether files with the name of the two directories you just looked up exists? What is the expected result, here?
I'm interested to see where you go with it. I've been a designer/drafter for 10 years and worked with every kind of drafting software imaginable. Shoot me questions if you have them and I promise I won't reply with cheeky comments... :P 
...why? WinForms is still very widely used. Personally I use it a lot for personal projects because of its simplicity. We use it a lot at work and still have support from (modern) companies who develop extra and fancy controls for WinForms. It might not be the most modern technology, but to call it useless for learning to create a GUI application seems a bit too far.
You said "at least" WPF. What would you actually recommend me using?
I'm not trying to make the next AutoCAD. It was pretty much just an idea that popped in my head and I thought it would be something good to learn.
Not really sure I'm clear on the question, but in WinForms you can set your form parameters as such: * WindowState : Maximized * FormBorderStyle : None * ShowntTaskbar : False * TopMost : True Then add the following anywhere in the form's code behind: &gt; protected override CreateParams CreateParams &gt; { &gt; get &gt; { &gt; const int csNoclose = 0x200; &gt; &gt; var cp = base.CreateParams; &gt; cp.ClassStyle |= csNoclose; &gt; return cp; &gt; } &gt; } That will prevent it from being closed by the user. Note that you will need to kill it from Task Manager or by stopping in Visual Studio.
I know, I deleted my comment. You're right. I have always wanted a very quick, web based drafting program. With some basic features like snapping and filleting. 
Honestly this is just a learning project for myself.
https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples#addref
Not sure if it's free for students or individual developers, but you can check https://www.mindfusion.eu/ for at least the trial. Will do most of the heavy lifting because what you are trying to do will become extremely complex at some point.
Wish I could help. I'm not sure how to begin making a *web based* one.
This is probably what you're after, let me know if you need any part explaining: public class Pair { public Pair(int x, int y) { X = x; Y = y; } public int X { get; set; } public int Y { get; set; } } class Program { static void Main(string[] args) { var array1 = new[] { new Pair(1, 2), new Pair(2, 3) }; var array2 = new[] { new Pair(5, 2), new Pair(7, 3) }; // { new Pair(6, 2), new Pair(9, 3) }; //The result you're after? var result = array1 .Zip(array2, (a1, a2) =&gt; new { First = a1, Second = a2 }) //Zip the two arrays together (Only works if they're the same size) .Select(s =&gt; new Pair(s.First.X + s.Second.X, s.First.Y)); //Project the zipped array into a new type where they're added together foreach (var item in result) Console.WriteLine($"Result: X:{item.X}, Y:{item.Y}"); } }
Use a loop?
Try it out here: https://dotnetfiddle.net/Wi7E6v
Thank you! 
have used 2 for loops itterating through the arrays twice filtering out different data. Was wondering if there was a more efficient method. 
I did a project like this for making reports for cookie-cutter structures. Elaborate on what you don't know and I'll try to fill you in?
Removed: Rule 4. This can be performed with a simple loop and `Int32.Parse`. A quick google search would have yielded quite a few results. For example: https://stackoverflow.com/a/23192738/1269654
Honestly it's probably best to assume I know nothing. Just the language and no knowledge of the needed frameworks. My plan was to just start with dragging and drawing lines and build from there. Guess it won't be that easy. :( And I don't think I need curved lines at the point. I can just use hard turns.
Here you go: https://dotnetfiddle.net/uOimK5
Well, the convenient solution is of course LINQ. If you're not allowed to use those then presumably you're supposed to write your own manual solution, so I'm not entirely sure what exactly you're looking for. Something that does the same as LINQ but isn't called LINQ so you can get around the rule? The `Array` class has some convenience methods for filtering, resizing etc. For a manual implementation, the two obvious solutions are: 1. Allocate a larger array first, count while filtering, then copy to a smaller array 2. Count first how many match the filter, then allocate the smaller array and do the filtering again
You're very welcome. You're welcome to send me a message with questions at any time, and good luck learning C#!
or UWP
Fixes visual studio crashing/freezes when debugging. Yay, that was really annoying 
Strange how CAD is still a desktop application, they must not have got the memo about using a Web UI.
Most CAD software still uses technology from the 80's... And is extremely data security sensitive. Most engineering firms would not have people draft on web based solutions simply due to security reasons. But, drafting is slowly disappearing anyways, 3D modeling and data transfers (like BIM and .IFC) are taking it's place. 
WinForms is good for simple UIs but it's definitely showing its age with high-DPI scaling (haven't tried the DPI awareness option in .NET 4.6 though), as well as lacking data binding. Of course there's an infinite number of third-party solutions to solve that but at the end of the day it's more work than it has to be (unless you're supporting a legacy project/you're intimately familiar with a certain library). Also, no nice things like transitions, effects, DataTemplate, etc unless of course you use a library with all of that stuff built in. WPF is better but it can be very tricky to wrangle sometimes. Built in data binding is a huge plus, but I still find myself wanting to do something that's almost impossible to do with the base framework classes nicely, so I end up having to create a custom implementation of something or break the MVVM pattern. Even using something like the Android layout framework makes it feel overcomplicated at times. Still, once you've gotten a good grasp on XAML I feel like it's faster to write a UI using data binding rather than creating one in WinForms then manually wiring your controls up. Ultimately the current state of UI development in .NET really feels like it's between a rock and a hard place.
Actually your approach is perfect. Start with some code to get a line on the screen, figure out how to read the mouse click, then mouse move, build it up in little steps. Big tip, don't get hung up on keeping code, or wasting time or getting it right. Change things, throw code away, start again if you have to, it's always twice as fast the second time, three times the third... Winforms was great, it's still very powerful but you'll struggle to find good resources on the internet these days. WPF is lovely, UWP is like WPF but only works on Windows 10. It is supposedly the future (like Silverlight). I wrote something similar in Winforms a long time ago. If I did it again I'd use UWP. I use WPF at work.
Have a look on [CodePen.io](Codepen.io). There are lots of examples showing how to do almost anything, all running live with the code so you can edit and see what changes.
Thanks, I saw that and tried var state = CSharpScript.RunAsync(File.ReadAllText(modPath + "system/scripts/test.cs"), ScriptOptions.Default.WithReferences(typeof(Ship).Assembly), this); And I'm still getting the same error.
Sounds like you're targeting the wrong version of the assembly at runtime? Maybe check what .Net version your project is targeting? And make sure there aren't multiple projects targeting different versions that might somehow stuff things up?
I feel like this is a bit of misrepresentation in the dev world. I started in WinForms in 2003. My code was terrible, just like anyone else at the start. I had no mentors. It was years before I stumbled into resources like Code Complete, and even longer before I saw any value in unit testing or design patterns. Even well into my career, I saw patterns like MVC as "things architecture astronauts do because they don't actually have to ship software". That is why WPF was so hard to me when I first encountered it. Things make more sense in WPF if you're used to a high degree of isolation and you have some experience with Presentation Model patterns like MVVM. But it turned out all the "extra stuff" I had to learn like Dependency Properties was there to make these patterns easier. Setting up some MVC-like framework in WinForms is a major pain in the ass. There are practically no tools to help you with it. What "data binding" exists only does so in terms of extremely arcane interfaces that were designed as part of making very specific scenarios work, mostly "DataSet &lt;-&gt; DataGridView". And it turned out once I stumbled through that, *everything else* got easier. Cocoa revolves around MvC and many Obj-C features are things I wish C# had. Android's UI framework feels sort of like WPF. Xamarin's UI framework IS WPF. No one's writing code "the WinForms way" outside of WinForms anymore except students. If I could go back to the beginning, there is a list of books like *Head-First Design Patterns* and *The Art of Unit Testing* I'd make myself read. I would have got myself on the "isolation" bus much earlier. I think if I had done that, WPF wouldn't have been so much of a shock and I could've adopted it more easily. I don't think the problem is WPF is inherently hard to learn. I think the problem is we train new developers to believe "architecture is hard stuff" which means they don't invest time in it. It's as if we're basketball coaches but we tell our players not to focus on their 3-point shots "because you'll just miss it anyway." 
Thanks for the advice! I'll start a new UWP and start learning. UWP uses .NET and XAML right?
In visual studio there will be a references section under your project. Simply make a reference to the assembly which contains a namespace with the Ship object's implementation.
Yes exactly :) I posted a link on one of your other posts in this thread with a web based resource as well, but basically just believe in yourself and don't worry if it doesn't work well first time :)
&gt; &gt; Thats exactly the way I did the manual implementation. I guess once one function is setup for the processing I could just call it when ever I needed it. Also I my teacher said all work around including shortcuts from the array class as I have to show processing in my code.
That's why I said "(at least)".
WPF if you want to target &lt; Windows 10, UWP otherwise. If you decide to make a 3D application, then you should probably use Unity.
WinForms will continue being supported in perpetuity. It performs incredibly well, and with today's Visual Studio 15.4 update, is even drastically easier to package and publish to the Windows Store.
&gt; as well as lacking data binding Since when doesn't WinForms have data-binding?
Winforms is a dead framework. I call it a waste of time because the GUI is quite different to everything that came after it. Learning WPF is valuable for UWP as they share most of the same markup language, and Winforms doesn't even have a markup language. There are very few good reasons for using Winforms over WPF or UWP on Windows. The only use case I can think of is to target Mono and run on Linux, but due to how old the framework is, most users probably won't appreciate the result. 
Winforms is dead and outdated. WPF is a complete replacement on Windows and does everything better. Nobody looking for apps in the Windows Store will appreciate coming across a desktop-bridged Windows Forms app. You should have seen the disappointment on r/surface when people found out the Spotify app in the store was the same electron shit that it is now. People go to the store for UWP apps. They go there for touch-friendly, modern apps. 
See my edit
See my edit
Thanks! That looks like it got it!
Wildcards are one of the few things being agreed on universally, unix based systems like linux or macOS just like windows NT all used * for a wildcard. Unless you want to support another operating system which is not unix-based and also not windows based I'd say you shouldn't worry about it.
Usually, it's a good idea to use `Path.Combine` instead of manually combining strings with `Path.DirectorySeparatorChar`. But it depends on what you're doing. As for file extensions: Yes, there are some differences, but you usually won't care about them. Managed .NET assemblies have the ".dll" extension on all platforms. Some other differences: Executable files: * Windows: .exe * Others: (extensionless) Shared libraries * Windows: .dll * Linux: .so * OSX: .dylib
My guess is on the first one the call to OpenOrCreate is getting you. You are creating the file with that call so of course it'll be there. My guess is you added that because you got an exception calling it when trying to open the file with the previous call. Gotta have an existing file to get a handle to it...right? Second one I suspect you can figure out on your own if you print out the dirpath and srcpath while it runs. I'm guessing you'll see quite a few more entries than you suspect.
Don't pass true here: public static ManualResetEvent wait_handle = new ManualResetEvent(true); By passing true, as soon as the thread is started, WaitOne() will imediatelly return instead of blocking. [See here for more info](https://msdn.microsoft.com/en-us/library/system.threading.manualresetevent.manualresetevent(v=vs.110).aspx)
 what I need pass false if u have any idea how to solve it I appreciate it
How ironic
You get downvotes because you said something stupid. You assume there is only one "good" way of doing it and everyone should be encouraged to do it like that. Oh and discrediting perfectly functional and commonly used software because there is something newer out there. The choice of technology is always depending on your needs. For example, the projects I typically work on do not require me to worry about tablets or Mac. Why would I pick something based on requirements that I don't have? Furthermore, front-end web development can be a lot more complicated than making a simple application in WinForms. I do both front-end web dev as well as application development and creating a WinForms application is a million times easier than setting up and actually understanding any front-end project along with its technologies, outside of plain html/css/js. 
Looks like all .NET languages were left off. C#, VB.NET and F# are missing.
Yes. Instead of: public static ManualResetEvent wait_handle = new ManualResetEvent(true); Use: public static ManualResetEvent wait_handle = new ManualResetEvent(false); This way, the new thread will block until you press the letter "r". P.S. I fixed the link in my previous comment.
Pointless in c# unless you're dealing with another system where reusing that systems objects is more efficient. Let the gc worry about it.
Its not working Its not start automatic I need press r and its don't pause when I change true with false
Woah I thought Unity was just for games. I never thought about using to actually make software (even though games are technically software)
Thanks for the great advice :)
Object pooling absolutely makes sense for certain expensive allocations. Prime examples are `StringBuilder` and other buffers. 
It's marketed at gamers, but if you wanted to make a 3D modelling app for instance, it makes sense to leverage the 3D capabilities of the engine. A game engine may be a bit overkill for 2D work however.
Are you aware of frameworks like DevExpress or Telerik? You can easily make very modern looking applications with that. The reason to use WinForms is its simplicity. We also use it due to certain 3rd party application constraints, although this isn't "legacy" support. 
use Unity3D
You'd think they were asking, "outside of C#, what would you use?"
I am aware of controls from these companies, though personally I haven't used them. Once you know WPF, I don't think using Winforms is any simpler. I think it's just as easy to do the basics if you already know them. If you don't know them, then better to learn something more modern and keep your skills current.
Pointless in C#? Garbage collection, for all of its wonders, is horribly inefficient. If you know you're rapidly going to be using objects with a high overhead, creating a pool of them for reuse makes a lot of sense. For example, in a web app that needs to create database connections frequently, I've implemented an object pool for `SqlConnectionStringBuilder` since we burn through them pretty quickly and there's no reason to dispose of them. It's based off of the [Roslyn object pool](https://github.com/dotnet/roslyn/blob/master/src/Dependencies/PooledObjects/ObjectPool%601.cs). The [Roslyn team also avoids GC as much as possible](http://mattwarren.org/2014/06/10/roslyn-code-base-performance-lessons-part-2/) because of their performance requirements. That's not to say that the average developer needs to care. But if you're concerned enough about memory use to try to implement an ObjectPool, you'll know that [allocations have a cost, deallocations have a huge cost, and pool access is cheap](http://adamsitnik.com/Array-Pool/).
Feedback on your class: - `ConcurrentBag` uses thread-local storage and does some odd thread coordination in the background if the current thread's pool has been exhausted. I'd use a regular array and worry about how best to safely access that. - `MaxSize` should be read-only - If `AutoClearTimeout` is a constant value, when not make it `static readonly`? If it's not, then it really should be a property so that you can control access to it. - Is there a reason for `try`\`finally` in `TryTake`? - Rather than have a "trimmer" that has to keep track of everything over your limit, why not just keep track of the values under `MaxLimit` and anything else that gets returned gets disposed of immediately? That way you don't have to worry about `_localAbsMaxSize`. - You have a lot of lines that `null` variables out, but it isn't clear that any of that is necessary. As long as there isn't a bi-directional dependency, the GC will figure out how to deallocate the objects. - It's not clear what the behavior of `Dump` is for. It looks like it resets `ObjectPool`, but that's what `Clear` does. - In `async` methods that only do one thing, you can return the `async` keyword and return the `Task` itself (so long as it doesn't use resources that get disposed of; so avoid this trick with `using` blocks). This eliminates the need for the async state machine to be generated and used for this method. In general, I think you'd be well-served looking at the example of what the Roslyn team did in the comment I posted earlier.
Wow. Thank you. Great feedback. Will implement your suggestions.
Yeah I've thought of that and I've also heard that comment before. I typically am fine with the GC... But I feel like there are cases where an ObjectPool can help with some efficiency. Only for rare cases tho.
So use an array instead? Kind of like the existing bag to handle thread safety. Seems like id have to write more code to get the same result.
And since when is arduino a language?
Nulls... I think im just overly aggressive here because I like to be sure the references are released preemptively when dispose is called. It's a habit I picked up so that if certain methods get called after dispose, I can be sure there's 1) a NullReferenceException. 2) no unintended consequences after death. Probably overkill. But does it really hurt?
And many other languages, and Arduino which isn't a language. Feel like this might have been written in marketing - it has just the right flavour of ignorance. That is - someone who knows enough terms to think they know stuff about a field, but stands out like a sore thumb when talking with people who genuinely know stuff about said field.
If you care about performance that much, and you're going to be hitting this class often enough from different threads, then yes, I'd do that. It's not a ton more work; if you look at the Roslyn example, it uses the `Interlocked` class with an integer to keep the index thread-safe. As long as you don't touch anything but the index you've been given, you don't need to worry about the thread-safety of the array itself.
I feel like there is context that we aren't aware of that may better explain the options. 
His comment was far too wide sweeping and needlessly negative. Object pools have their place.
Sure, it's an additional instruction that needs to be executed for no reason. That's not normally a huge performance concern, but in your case, every bit counts. As far as the issue around working with an object that's already been disposed, that seems like a code organization and hygiene problem. The thing that owns the disposable object alone should be cognizant of its life cycle.
Also, the phrase "coding languages" is a pretty glaring hint.
There isn't. Here are the questions leading up to this question: 1. Which of the following activities, if any, best describe how you spend the majority of your time at work? (Select all that apply) 1. In the past 12 months, have you influenced the purchase and/or use of any technology solutions or the selection of vendors/suppliers that build technology solutions for your organization? 1. Previously you mentioned that you have influenced the purchase or the use of some technology in your organization. Please select the highest level of the organization that you influenced. 1. Do you personally control a portion of the technology budget for the entire organization? 1. In a typical work week, how many hours, in total, do you and/or the team you manage spend writing code for software applications, websites, devices, or services? 1. Do you play a role in deciding which development platforms, tools, or frameworks you use or if they should reside on premises or in the cloud? 1. Where do your development platforms, tools, and frameworks mainly reside? Your results may vary based on how you answer some of the questions.
UPDATE: I sent a tweet to @windowsinsider around the same time I posted this. Since that time they have added an option for C#.
What about other collection types like a LinkedList or a Queue? LinkedList because of it's dynamic size. Or maybe even a simplified version of a linked list that only uses the last node to pull from? I'm weary of the array and maintaining the index. But I see your point that it could be done and you're only allocating memory for the max size. Hmm... 
But doesn't setting these references to null, assist the GC in doing it's job? Sorry for my ignorance here. I may be making too many assumptions. If the values don't change, is it better to set them as readonly? Are there optimizations that occur when readonly is set?
&gt; lacking data binding Data Binding with Windows Forms 2.0, by Brian Noyes
These guys would strongly disagree with you: https://www.onshape.com/ Click on the video link, watch and then restate "CAD is still a desktop application". I expect version control, forking, multi-user live updates, mobile viewers and RBAC have nothing to do with CAD either. How do you propose implementing multi-user live updates across multiple sites? I suggest SignalR might be involved. So you're going to need a web server. How are you going to serialise these updates? Probably JSON, and RBAC? Probably REST. But UI is XAML? hahaha. no. Most of all, fuck Mac users, because they are losers? Truly 1980's thinking.
Coca Cola would disagree with you. https://www.onshape.com/cad-blog/coca-cola-uses-onshape-to-improve-beverage-equipment-at-14000-mcdonalds-restaurants
This is Brandon from the Windows Insider Program Team at Microsoft. Thanks for reporting. We're getting this fixed as we speak. 
Dang, quick response. I like that.
 * Will look into using something else other than ConcurrentBag&lt;T&gt;. Still not sure yet. * Fixed AutoClearTimeout and MaxSize to be read only properties set/overridden by the constructor. * try/finally around TryTake... Overthinking it. Fixed. * Trimmer: in practice this concept of a trimmer, maxSize, and absMaxSize is a way preventing over-aggressive disposing of objects. You may have a 'spurt' of objects returning to the pool that get immediately re-used on the next tick before the trimmer executes and then the trimmer isn't needed. So the trimmer gets cancelled when the size drops below. Only in the case of returning to the pool when absMaxSize is reached do you immediately dispose. In a nutshell, it's a buffer. :| * The nulls everywhere is a difficult one for me to let go of because of all the madness I've experienced in a multi-threaded environment. By swapping a value with null, then disposing, I'm certain not to allow any other threads from doing unexpected things before I decide to dispose. I also imagine that for the delegates (not disposable) that they could be part of another class reference and holding on to that reference may cause a delay in cleanup. I think I just have a problem with trusting the GC 100%. :( * Clear iteratively removes items from the pool allowing for items to be taken along the way. Dump says "give them all to me now" (unmanage) and replaces the underlying pool. This has some usefulness if you want to reclaim a group of objects in mass possibly before disposing the object pool. I will definitely look at your comment and the Roslyn example. :) Huge thanks!
Thanks Brandon. I was glad C# was added to the list as quick as it was when I went in to get the text for a previous comment.
They will disagree until they have a data breech and some secret Cola dispenser technology gets in the hands of one of their direct competitors... Great concept but their situation is very unique. I would wager not many credible engineering companies have a turn over so high that software installs become problematic... That part made me laugh.
Is perl used anymore since cgi-bin went the way of the dinosaurs?
Not really. The object still exists in memory. All you're doing is getting rid of your reference to it. The GC will still have to find all possible references to the object by walking down every reference from the root, and then reclaim all the unused memory. The GC is a really tricky topic that my understanding just scratches the surface of. Actually, `readonly` [defeats some optimizations](https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/). This is more about enforcing your code contract, though.
If you used one of those data structures, you'd have to make sure that they were thread-safe, which they aren't by default. That would involve locking collection access, which is much slower than just handling atomic updates to an integer. For as hard as lockless multithreaded code is in general, this is probably the easiest case to implement correctly.
Very rarely.
I full agree with you, but I just felt like I need to defend the GC from being called *horribly inefficient*. It's actually incredibly efficient; it's just that it's also very general-purpose, and sometimes specific needs require circumventing it. And of course, don't forget, that memory pooling is not a technique only employed by languages with GCs; doing a whole load of `malloc`/`free`s isn't exactly great for performance either!
You're right, I should soften that stance. The GC team has been making a lot of really great improvements, as well. I'm just bitter because I'm stuck on 4.5 without a good path forward in the near future.
You are only checking the Console.ReadLine once. Try put that in a loop.
Generally Arduino when referring to it as a language means C or C++ depending on the variant. The weird thing is that both of those we already listed.
Right. Totally get where you're going. Again, super appreciate the feedback. I looked over Roslyn's code and yeah, they do some interesting stuff. I don't want to get to crazy yet, but it's giving me ideas on how to improve.
Interesting so... If someone were to care at that level: ``` ushort _maxSize; public ushort MaxSize =&gt; _maxSize; ``` Is better as long as you only request ```_maxSize``` internally.
Might find this interesting: https://stackoverflow.com/questions/2950955/concurrentbagmytype-vs-listmytype
Also interesting: https://stackoverflow.com/questions/4785622/why-is-concurrentbagt-so-slow-in-net-4-0-am-i-doing-it-wrong
What coding languages do you use when you write code for software applications, websites, devices or services? (select all that apply) * Sand * I am hungry * Taylor Swift * On a third Wednesday of the month * Steep slope * Tungsten light reflections 
Usually crippling depression and tears.
Is this largely drawing, or have you got some basic level of relationships happening?
&gt; -Sob gently because the only graphical knowledge I have is with winforms. [It's ok. It gets better.](https://image.spreadshirtmedia.com/image-server/v1/mp/compositions/T210A2PA330PT17X25Y0D1009266928S55/views/1,width=300,height=300,appearanceId=2,backgroundColor=E8E8E8/software-development-process-shirt-men-s-t-shirt.jpg) But seriously, great work! Keep it up! Probably the next/first big thing to go from here is to break up your `BasicCAD.cs` file into separate class files. After that, move the various fields of the `BasicClass` form (e.g., `CurrentPosition`, `CommandHistory`, etc) into classes. Try to move the CAD logic to exist as pure logic separate from dependencies on WinForms. Use WinForms purely as an input/output layer. Anyhow, great job hacking something together quickly!
&gt; Your results may vary based on how you answer some of the questions. 
My job has software written in winforms that is still being updated. It's certainly not a waste of time in the professional world...
/r/CorporateFacepalm 
So Taylor Swift?
WPF can get in the way of getting shit done. If databinding is wrong for whatever reason WPF can take the JS/PHP route of failing silently. If you want a graphics context (say OpenGL, Direct3D or Vulkan) for a CAD app that's downright trivial in Forms but in WPF you have to consider that it already runs in a Direct3D context. WinForms is simple to grasp and it works in more places than WPF.
Honestly if you've done all of your coding in C# or similar languages I can understand that, lists have replaced arrays in most contexts. I don't see them very often myself.
You can program an Arduino direct from Visual Studio now. Actually there has been a plug in around since at least 2014. IoT was a big Microsoft push (no idea if it still is). 
What coding languages do you use when you write code for websites? &lt;No tickbox for JavaScript&gt; So much fail.
It's the programming equivalent of BDSM.
And php is a noose?
They would likely write node and/or jquery. Not javascript :P
is there a reason for using a CollectionViewSource over a plain list other than it allows filtering and it's Refresh() method? Also, why did you make the ViewModel class sealed? &gt; In the MVVM pattern, you don't want to make the view objects that same as the model objects. In your example, the Show class appears to be your model objects. Each Show class should have a respective ShowViewModel class Is it bad practice to use the same objects for both? I can already see it making for cleaner models for my app as I have some properties in my ```Show``` class that is there purely for the binding. I also use JSON to save data of the models so I have many ```[JsonIgnore]``` attributes for the properties. I'm not too sure where I would instantiate ShowViewModel for each of my Show models in the list. Where would that be done? &gt;In this example BindableBase is from the Prism framework Is Prism found on Nuget? &gt; ... A simple fix for this is adding in the Delay property to your binding. Oh my word, that is great. I had seen Delay before but never thought of looking it up to see what it does exactly. &gt; Another helpful performance boost to the DataGrid is to set the VirtualizingStackPanel's IsVirtualizing and VirtualizationMode as follows I'll give it a google to see more of what this does as I have. I have only recently started using DataGrids in WPF, where as before I used it a bit in WinForms.
Yeah I think I just got lazy and went with a get accessor to do all the work. I can still call PropertyChanged for ```MyShows``` list and then it updates, but each time it needs to do a lot of iterations. Bad code is bad :)
[There](https://channel9.msdn.com/Events/Build/2016/B829#time=12m46s) are many [reasons](https://channel9.msdn.com/Events/Build/2016/B829#time=17m50s) for why [we need](https://channel9.msdn.com/Events/Build/2015/2-692#time=4m02s) UWP, besides the phone. See [more here.](https://channel9.msdn.com/Events/Build/2017/B8011) In addition, this also gives you better Windows integration, [granular privacy control](https://www.howtogeek.com/221864/digging-into-and-understanding-windows-10s-privacy-settings/), improved [battery life](https://youtu.be/GJ2ClkCImtM?t=3576), and modern UI apps have better [fullscreen multi-tasking.](https://www.reddit.com/r/Windows10/comments/65t3tg/so_edge_has_fullscreen/dgd496f/) UWP apps are very capable. For example, [Adobe Experience Design](http://www.adobe.com/products/experience-design.html) is a full fledged professional creative UWP app, distributed outside the Microsoft Store. Also many Windows devices sold these days have [pen &amp; touch screens, or are 2-in-1 tablets that benefit a lot from full proper UWP apps.](https://np.reddit.com/r/Surface/comments/6pnk4q/windows_10_tablet_mode_woes/) There is also Xbox, HoloLens, IoT that use UWP. And although the Windows Mobile platform is being phased out, doesn't mean that there won't be small mobile telephony capable devices (Andromeda) running full Windows on ARM in the near future.
"arduino" is a framework, not a language. there are no new keywords or no new syntax. your ino file is basically a cpp file. 
Web, unless for some specific reason related to the nature of the application a Internet/intranet version is not feasible. 
Web for most things, especially those which require access outside the office. Desktop for some, mostly inhouse related issues. Console for maintenance or recurring automated tasks etc.
Low quality clickbait with incorrect samples.
Honest question - is this typical for this subreddit? I've subscribed ~2 days ago and a large percentage of recent posts seems to be similar to this; I must say I'm seriously considering unsubbing if this is what this is all about...
No, only three loops exist. "while loop do-while loop for loop"
That's fair enough. I wouldn't recommend anyone learning winforms just so they can maintain someone elses ancient project however. If you are looking for employment, you will probably find that learning the newer technologies make you more valuable.
Removed: Rule 7, spam.
Unfortunately, a decent chunk. Lots of people learning and thinking they can just whip together some introductory/learning video going over the basics then spam it via "social media" (that is, reddit). We do have rules against this (Rule 7), and such submissions are regularly removed. Best to just report it and move on.
Not typical no, but it's there's been a significant increase over the past 6 months or so - not just here, it's all over reddit. People think they can get their ad revenue by posting low quality, low effort blog spam and blast it everywhere they can. 
&gt; No tickbox for JavaScript Aaaah, a man can dream :)
Hello /u/ortund, As the the `.g.` in the name indicates, this is a generated file. It usually contains UI related code that is generated from a designer file. most common cases are WinForms or WPF, where the from the information provided in the designer or XAML file, a `.g` file is generated. This file contains the code that will generate your window/control during runtime. Usually this file is automatically regenerated. You can run into hiccups when you rename files, controls or namespaces, as you did. Most easy solution: Delete your entire `obj` folder. It's not needed, it will be automatically regenerated. If the error persists, make sure you check your designer files. What framework are you using? If you use WPF, it could very well be that you still reference the `DataViewModels` namespace in one of your XAML files.
Awesome! Thank you, I really appreciate the advice! So what I’m hearing is that ideally, the Main WinForm class has nothing in it but it’s own events referencing the instances of these other classes? I still declare those instances within the form class, correct? (E.g. `Partial class BasicCad : Form` `{` ` private void BasicCad_on_Load_event()` ` {` ` Shape.gridSystem = new gridSystem()` Or do I move all of the instanstantiation(?) to a different place in the code? (Ideally) 
Relationships as in adding and checking constraints on / between features? Nope, not yet! That’s up on the todo list. I feel like coincident constraints will be easy, but adding and adjusting dimensions after the fact might be a bear.
Can you share the code of the controller? In particular I'm interested in the imported namespaces, but other issues might stick out too. I'd just rule out that you didn't accidentally use the MVC version of the `ActionName`-Attribute, but the HTTP (Web API) one. At first glance everything looks correctly. Not directly an answer, but a suggestion: Did you consider using attribute routing? I find it much easier to deal with, and much easier to comprehend than the traditional route table approach. It's fairly well documented here: https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2
Added the formula to a desmos graph so you can play with it: https://www.desmos.com/calculator/zqzznerh3b
&gt; is there a reason for using a CollectionViewSource over a plain list other than it allows filtering and it's Refresh() method? *CollectionViewSource* is simply a specialized collection that has filtering and refreshing built-in - why reinvent the wheel when .NET provides something like this for you? &gt; Also, why did you make the ViewModel class sealed? Just a force of habit on my part, since that's part of the coding standard that I adhere to. If the intent is to not have the class be inherited, it's best to set it as sealed. That way in any time in the future, other developers can look at your code and know that you never intended the class to be inheritable. There are also other special cases where you can use sealed within classes, but you can read the documentation on that. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed &gt; Is it bad practice to use the same objects for both? I can already see it making for cleaner models for my app as I have some properties in my Show class that is there purely for the binding. I also use JSON to save data of the models so I have many [JsonIgnore] attributes for the properties. Yes, that's the whole point of using the MVVM framework. Your view should not have any knowledge of your model. On top of that, like you already mentioned, there is code specifically used for interaction with the view in your view model. Your model doesn't need to know about that, nor should it. &gt; I'm not too sure where I would instantiate ShowViewModel for each of my Show models in the list. Where would that be done? Here's a better example to help you: /// &lt;summary&gt;The main view model that exposes the collection to the view&lt;/summary&gt; sealed class ShowsWindowViewModel : BindableBase { string _filterText; public ShowsWindowViewModel() { Collection.Source = new ShowDatabase().GetShows().Select(show =&gt; new ShowViewModel(show)); Collection.Filter += Filter; } public CollectionViewSource Collection { get; } = new CollectionViewSource(); public string FilterText { get { return _filterText; } set { SetProperty(ref _filterText, value); Collection.View.Refresh(); } } void Filter(object sender, FilterEventArgs e) { if (e.Item is ShowViewModel show) e.Accepted = show.HasText(FilterText); } } /// &lt;summary&gt;View model class of a show that provides search capability&lt;/summary&gt; sealed class ShowViewModel { public ShowViewModel(Show model) { Name = model.Name; Director = model.Director; Network = model.Network; ReleaseYear = model.ReleaseYear; } public string Name { get; } public string Director { get; } public string Network { get; } public int ReleaseYear { get; } public bool HasText(string filter) { var upper = filter.ToUpper().Split(new []{" "}, StringSplitOptions.RemoveEmptyEntries).Distinct(); return upper.All(term =&gt; SearchTerms.Any(search =&gt; search.Contains(term))); } string[] SearchTerms { get { return new[] { Name, Director, Network, ReleaseYear.ToString() }; } } } /// &lt;summary&gt;Model class for a show&lt;/summary&gt; sealed class Show { public Show(string name, string director, string network, int releaseYear) { Name = name; Director = director; Network = network; ReleaseYear = releaseYear; } public string Name { get; } public string Director { get; } public string Network { get; } public int ReleaseYear { get; } } /// &lt;summary&gt;A "fake" database for demonstration purposes&lt;/summary&gt; sealed class ShowDatabase { public IEnumerable&lt;Show&gt; GetShows() { return new[] { new Show("Show 1", "Director 1", "Network", 1989), new Show("Show 2", "Director 1", "Network", 1968), new Show("Show 3", "Director 2", "Network 2", 1986) }; } } &gt; Is Prism found on Nuget? You Betcha! [Prism.Wpf](https://www.nuget.org/packages/Prism.Wpf/) and [Prism.Core](https://www.nuget.org/packages/Prism.Core/) Some more [helpful documentation on grouping, sorting, and filtering](https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/how-to-group-sort-and-filter-data-in-the-datagrid-control) in WPF Datagrids
Honestly, you won't get any serious work done. What are you trying to do?
Pretty much. Try to limit your interconnectedness with WinForms to GUI and input/output interactions as much as reasonably possible. It can be difficult to setup automated tests if your code is intertwined/dependent on the UI platform. Plus, if you decided you wanted to try porting this to WPF, the less coupled to WinForms you are, the easier the task is. I know it's not always possible to 100% separate yourself from the platform, and especially for learning materials, I wouldn't consider it absolutely necessary to achieve. But it'll be another good learning opportunity. Imagine if you will, rewriting the CAD backend so you could run it in a console application. Ignore the visual representation (because it's a console application), but imagine being able to call methods to create lines/arcs/shapes at targeted locations, then methods you can use to query the current state (and say, report the X/Y location of shapes). If you get to that point, that's pretty much the ultimate. At that point, running it in other platforms becomes (relatively) trivial, and in all likelihood, you can create automated tests for most (or all) aspects of your backend CAD logic. Regarding the class structure, perhaps you can create a centralized application class that houses all the virtual components of your CAD logic. It exposes (in one form or another) all the inputs you can use to change the CAD state, and all the outputs for you to read the CAD state. It would also be responsible for housing your `gridSystem` and other components. In turn, your `BasicCad` form would just instantiate/setup this centralized CAD class and hook into its various methods/properties to update your GUI or feed user input into changing the CAD state.
Exactly. For instance, on #2 if you didn't have any influence than what I have as #3 won't be there. That would change the overall numbering. Therefore, the language question might be #7. 
SwiftOnSecurity
I'm looking for something for use with personal projects. I often feel like adding to them when I'm on a train or elsewhere without access to Visual Studio, so a mobile app would be useful in this instance.
You might be best served with a lightweight laptop, to be honest. Imagine writing code without tab completion or easy access to special characters.
Ok. My GAC has system.web.extensions 3.5.0.0 and my web.config has it defined as 4.0.0.0. I'm working with .net 4.6.1. How do I get system.web.extensions 4.0.0.0 into my project? 
/r/surrealmemes 
Fixed it using attribute routing. Seems like a much better and easier option to just slam the route directly on the method instead. Thanks for the suggestion!
I've experimented with the [Roslyn object pool](https://github.com/dotnet/roslyn/blob/master/src/Dependencies/PooledObjects/ObjectPool%601.cs). I particularly like the leak tracker while debugging (though this doesn't work nicely if you want a library) and the design where the first item is outside the bag of items (should be considerably faster to go this way instead of storing the hot item in an array). I also like the leaky bucket effect used in Free to make that faster under a high concurrency situation. 
I charge next to nothing for school assignment. - Get the input numbers in a List&lt;int&gt; - Order that List - Get the median by accessing the count/2 item of that list. When you have an even number of items in your list, do you want to output the average of the 2 center items or just the first one? Google is your friend. Use it. 
1. minor nit, line 105: `this.AssertIsAlive();` remove `this` 2. You shouldn't have 2 methods with signatures that vary by only `ref` (`public void Give(ref T item)` vs `public void Give(T item)`) because it can make the class difficult to use from other .NET languages. 3. The reference parameter version is entirely unnecessary since `T` is a class anyway (I see the pattern you are using and disagree with it in general). 4. Trimming is pointless complexity. 
Removed: Rule 4. Please include relevant code you have of your attempt. Otherwise, break the problem down into steps. Collecting user input and putting it a collection (array or list). To sort a collection you can use the [`Array.Sort`](https://msdn.microsoft.com/en-us/library/system.array.sort%28v=vs.110%29.aspx) or [`List.Sort`](https://msdn.microsoft.com/en-us/library/3da4abas%28v=vs.110%29.aspx) method (whichever is applicable for your code). Then you can grab the middle entry of that sorted collection. If there are an even number of entries, you can choose to round up or round down, or calculate the average between the two middle numbers.
any chance you would speak to how it got left off to begin with? c# and .net are the primary tools we have for programming windows (and now mac and linux!) so how those got left off should be telling to start with.
Xamarin has a great popularity in web development community. It is used by 1.4 million developers around the globe and by 15,000 companies from over 120 countries in different industries such as media, transportation, finance, healthcare, and gaming. Xamarin also seems to offer a lot of advantages over mobile app development. It has shortened development time to 90%, almost-full code reusability and great performance that nearly equals native app performance. The only one is that some Xamarin tools for mobile development are not for free. Still, it is worth of attention of any mobile app developer, because Xamarin mobile application development for Android and Xamarin mobile application development for iOS are clearly the most practical way to go. Besides, [Xamarin mobile developer salary](https://mobilunity.com/blog/comparison-of-xamarin-developers-salary-in-different-countries/) is also quite high. Make sure yourself visiting our blog. 
My problem turned out to be that the service was returning the location by lot number/property, but i was looking for the physical location. I've since found a way to rework what i needed.
That's going to be a big "it depends". I do scientific computing for companies which have jobs that cannot hav project files stored anywhere but designated areas.
That's pretty interesting! I like the combo of static properties with a private constructor &amp; the use of `GetEnumerator()`. I never thought of doing that. I have to admit though I'm not sure I understand the use of `colloquialGreetingSwitch`. I sometimes have methods where I want to avoid enums, but I can't restrict values to a set of constants in a static class. This looks like a good replacement. It would be cool if this were generalized &amp; reposted. I'd like to hear community feedback. Mind if I do that &amp; give a callout to you? Not sure what a good name is... `ConstrainedValues`? 
Web and it's heading more towards web. mostly because it's more of a pain to remotely rollout software updates to different devices, offices, operating systems and countries. Though sometimes things can't be done on the web so an app will be needed
hmm interesting... 
Oh, I should also point out, don't beat yourself up about learning/using WinForms. It's a perfectly fine, if outdated, platform to _learn_ the initial bits of programming and C#. Once you start getting a handle on the language and .NET (which it seems you're starting to), then you can shift sideways into WPF or what-have-you. You may not want to build a large-scale, long-term application on WinForms, but for learning purposes, it's perfectly valid.
Kind of surprised people jumped on Arduino first before any "does html count as coding?" arguments.
I'll start: I don't like it. Method implementation does not belong in an interface.
I like it as I want to inherit many classes. This is essentially the same thing. 
That's the new Microsoft! Praise Nadella!
This opens the door for multiple inheritance in C#, but I don't think that's a good thing.
But there is Perl!
Why not?
Add to cookie container and httpclient will use https://stackoverflow.com/a/12374486
An interface is a contract. It is not the implementation of that contract.
Add this like &gt; &lt;add name="ReportViewerWebControlHandler" preCondition="integratedMode" verb="*" path="Reserved.ReportViewerWebControl.axd" type="Microsoft.Reporting.WebForms.HttpHandler" resourceType="Unspecified"/&gt; Do your web.config under system.webServer.handlers
An interface remains a contract. This feature does not change anything about this.
WPF Apps are also used heavily in different sectors. It is ideal for apps that presents lot of data in Grids or Charts. 
&gt; This feature does not change anything about that. Debatable. It's still a contract, but now it contains things that the consumer of the interface doesn't care/need to know about.
 DateTime.Today.AddYears(-1)
It's absolutely not debatable, it's a fact. The contract just says "This method exists, you can call it", and that stays as it is. There is a method implementation. It doesn't matter where the implementation was defined, it only matters that there is one. The consumer of the interface (I assume you mean the one who calls the interface methods) doesn't know or care about the **default** implementation. All it cares about is that the contract remains: There is an implementation that can be called.
Desktop ties a business to a platform (windows/mac etc). Web does not. Would never advise any business to go with desktop development on it's own any more.
Pfft perl is a gem of a language.
I also don't like it, but I guess we'll have to live with it for Java interoperability.
&gt; The consumer of the interface (I assume you mean the one who calls the interface methods) doesn't know or care about the default implementation. All it cares about is that the contract remains Fair enough, but I think having the implementation in the interface just makes it more confusing as far as separating what is responsible for what. If there really needs to be a base implementation of a method, I think that belongs in a base class, not the interface. &gt; Any other argument against the feature? It opens the door to multiple inheritance. I don't think that's a feature that we need/want.
I can see myself using this in very narrow contexts for utility interfaces that are tedium and I'll rarely change. INotifyPropertyChanged is #1 on this list, it's almost criminal C# has no syntax sugar for automatically supporting it on a type. Beyond that, I think it's a code smell. Overusing inheritance leads to many well-documented problems, and using composition via interfaces is one solution to those problems. Think, "Ostrich is a bird that can't Fly()" or "Penguin is a bird that can Swim() and can't Fly()" or "A flying fish is a Fish that can Fly() and Swim()." The point is you don't want things in your type that have nothing to do with the type, and you sure as Hell don't want to be special-handling NotSupportedException all over your hierarchy. If this feature is used with discipline, you won't paint yourself into those corners. Part of why I like interfaces as they are is you *can't* paint yourself into corners with them. I don't think this is an evil feature, but I think it makes it easier to do things that cause problems. Like default instances in VB, I strongly question if this will be a good thing for C#. Unlike default instances in VB, this isn't a 100% obviously bad idea. 
K. Will do! No.1 Fixed. No.2&amp;3... Initially I only had Give(ref T item) because I wanted to enforce/entice the consumer to not hold onto a reference. I would agree with your statement tho. Fixed. No.4... This ends up being useful in chaotic high-volume scenarios where the amount in the pool is transient and of course you don't want to inline synchronous cleanup code if you don't have to. It defers cleanup/trimming (instead of every 'Give()') till it makes sense. I understand if you don't agree, but please elaborate.
 IEnumerable&lt;Datetime&gt; dates = GetData(); var result = dates.GroupBy(d =&gt; d.Year).Select(g =&gt; new { Year = g.Key, Count = g.Count() }); Should do it. Sorry I'm on mobile so I've no idea if that'll compile. Might have made a typo. 
Cool. What would be a scenario where you would use this?
Tests
It's building with knots and nooses, so Macramé.
Can you elaborate or give an example?
Yes, the VS memory usage raises with pretty much every interaction with the UI (opening a context menu, dialog window, even showing a tooltip affects it) and the worst part is that memory isn't beeing freed afterwards) Thank you, I appreciate it!
&gt; I never thought of doing that. I have to admit though I'm not sure I understand the use of colloquialGreetingSwitch So there's a popular opinion that actual `switch()` statements aren't very OOP, and some even consider them design smells in the OOP world. I have no problem with them, but like you said, they're limited to primitive values. I believe switch statements with more than a couple cases will compile down to a jump table which can end up using more memory (as I currently understand)... Dictionaries are arguably more performant and they solve the primitive value limitation. So that's what you're seeing me do there... switch(someValue) { case "value1": DoStuff(); break; case "value2": DoOtherStuff(); break; } is essentially the same as var dictSwitch = new Dictionary&lt;string, Action&gt; { {"value1", () =&gt; &lt;do stuff logic&gt;}, {"value2", () =&gt; &lt;do stuff 2 logic&gt;} } dictSwitch[someValue](); NOTE: Recent versions of C# have some other wizardry that is possible with switches that I haven't really dug into yet, so I'm not sure what is possible now. The trick with complex objects in my dictionary switch example is that you'll usually need to override the Equals() method so that the keys can match, but that can be abstracted (as I do in my value objects in DDD projects). It isn't necessary in this particular case because the values being compared all refer to the same static instance. 
Here's an age old example. Assume you'd like **DateTime.Now** to return a specific date for unit testing purposes without having to update your code, you could shim it like so: Shim shim = Shim.Replace(() =&gt; DateTime.Now).With(() =&gt; new DateTime(2004, 4, 4)); Now surround any code with: PoseContext.Isolate(() =&gt; { // Any code that calls DateTime.Now in here will always return the value you specified in the Replace delegate part of the shim }
Thanks.
But it does mention HTML!
Yeah, your rough around the edges approach isn't going to win you many fans nor people who want to help you.
Interesting. C# 7.0 has pattern matching, and you can switch on a type (ex. `switch (someShape) { case Square square: ...`). You can also add `when` and specify a set of conditions (ex. `case Rectangle square when square.Top == square.Right &amp;&amp; square.Right == square.Bottom &amp;&amp; square.Bottom == square.Left: ...`). 
Very cool! I also would be intrigued to find out what this could be used for...
Nice! Graphing the possible distributions is an excellent idea. I did something similiar when messing around with randomness in a game. You can almost draw the shape you want, then convert it into a forumla later, rather than the other way around.
There are times where I have a generic interface and I find myself implementing the same non-generic methods across classes. Having a default implementation would really help solve this.
You were right, I missed the OpenOrCreate. But I ended up scrapping filestream in place of just using an IEnumerate list of FileInfo and then for looping through LinQ which seems to work great.
If these classes share a functionality you can create an interface, let's call it ICard. Let both of your classes implement this interface and then create a List&lt;ICard&gt;. This list now can contain both of your classes. Look up "polymorphism" for more information. 
Yeah the so the problem was the filename.replace would only look at if the items were in both start and end, which defeats the purpose of the check. If you do reverse it will throw a FileNotFound and DirectoryNotFound. Which would work if I catch them and then loop through it, but I decided the best thing to do was instead use a IEnumerate list of FileInfo and then loop through using LinQ to find the differences between the two. It works well enough, and isn't much more taxing than what I was doing anyways.
I would suggest not having a `HighCard` class altogether. Just make them all `Card` and have a property on it indicating if it's a `HighCard` or `LowCard`. For example: public bool IsHighCard { get { return this.Value &gt; 10 || this.Value == 1; } } public bool IsLowCard { get { return this.Value &gt; 2 &amp;&amp; this.Value &lt;= 10; } } (I'm assuming that in your model, "Ace" is `1`. You can change it if it's `14` instead.) Then when you want to sort the different lists, you just filter on those properties: List&lt;Card&gt; highCards = myDeck.Where(card =&gt; card.IsHighCard).ToList(); List&lt;Card&gt; lowCards = myDeck.Where(card =&gt; card.IsLowCard).ToList(); Another option, if you still _really really want it_, is to have `Card` represent _any_ card of _any_ value, then have a `HighCard` which inherits from `Card`, and `LowCard` which inherits from `Card`. (or have `Card` be an interface) But I think this would just cause headaches for you. Fundamentally, a "high card" is still a "card". It just has an attribute/property that it is considered a high card. It probably ought not be modeled as a completely separate object class. That would be like saying, you have a `SpadeCard`, `DiamondCard`, or a `TwoCard`, `QueenCard`, which in turn means you'd have to have a `QueenHeartsCard`. Or a `RedCard` vs `BlackCard`. You'll lose your mind. Cards are cards. Just like in real life, if you split a deck into one pile of face cards, and one pile of number cards, you don't magically fundamentally change what the card _is_, you just associate/group them in a different way.
I ended up scrapping filestream in place of just using an IEnumerate list of FileInfo and then for looping through LinQ which seems to work great. But my second example was me trying something, while having tension headaches that have been plaguing me all week. I see now why that was dumb. Yeah I know there are other options, but I am building this app for a specific reason and I need these features to be internal to the app. I am sure I could use some 3rd party feature and work it in, but that is more work and headache than just brewing my own. Also I would rather do it with a predefined buffer size that I can control than file.copy, which I think uses the standard filecopy win32 api if I remember right.
&gt; Having a default implementation would really help solve this. This can already be accomplished with a base class. To me, the idea of a "default implementation" belongs in a base class, and not in an interface.
It is basically an extension method that can overwritten by the implementing class. It avoids the need for an abstract base class that contains "default" implementations of virtual functions.
&gt; I can see myself using this in very narrow contexts...Beyond that, I think it's a code smell. 100% this.
I saw this other post here in the sub: https://www.reddit.com/r/csharp/comments/75m5m7/feedback_i_hacked_together_a_verybasic_c_winform/ I don't know if that's what you have in mind
Yup I second this, it’s not appropriate, just because Java did it doesn’t mean it’s the right thing to do. The example of adding a new method causing issues, is true, but it can be solved by other means. Such as add the new functionality as a second interface. 
Can you target version 3.5 instead and see if it changes? You can edit the project file in notepad if you can't do it through vs
Actually it does, it adds implementation, which isn’t appropriate. 
So this would be a compile-time substitution?
So you could probably make the enum implementation work with that :)
Actually, shoot. This isn't even useful for INotifyPropertyChanged unless you can declare non-public members. What I want out of an INPC utility class is a helper method that raises the PropertyChanged event with a specific property name. There is no reason at all for that method to be public. I want it virtual protected, no more visible. But with an interface everything has to be public, right? I don't like the notion of all my ViewModels suddenly gaining a new public method or two. So I'm going to keep doing what I do: shoving INPC in a ViewModelBase that everything has to inherit. I really wish we were getting syntax sugar for THAT. I can't figure out the use case for "default interface implementations". Until I see one I'm going to think it's a stupid pet trick. I understand it can bring you multiple inheritance. I've read for 20 years that can lead you down some dark paths. What happens when two interfaces cause the diamond problem? If you have to treat that like an explicit interface implementation, isn't that breaking the Interface Segregation Principle by forcing you to cast to specific types before making certain calls? I'm actually sort of mad we get this instead of 10-years-too-late property change syntax sugar. 
Actually, shoot. This isn't even useful for INotifyPropertyChanged unless you can declare non-public members. What I want out of an INPC utility class is a helper method that raises the PropertyChanged event with a specific property name. There is no reason at all for that method to be public. I want it virtual protected, no more visible. But with an interface everything has to be public, right? I don't like the notion of all my ViewModels suddenly gaining a new public method or two. So I'm going to keep doing what I do: shoving INPC in a ViewModelBase that everything has to inherit. I really wish we were getting syntax sugar for THAT. I can't figure out the use case for "default interface implementations". Until I see one I'm going to think it's a stupid pet trick. I understand it can bring you multiple inheritance. I've read for 20 years that can lead you down some dark paths. What happens when two interfaces cause the diamond problem? If you have to treat that like an explicit interface implementation, isn't that breaking the Interface Segregation Principle by forcing you to cast to specific types before making certain calls? I'm actually sort of mad we get this instead of 10-years-too-late property change syntax sugar. 
This does not change the fact that the interface remains a contract. The contract ensures that specific methods are available. The location of the implementation does not matter.
1. You probably should have a `Card` class, which `HighCard` &amp; `LowCard` derive from. I'd guess you'd also want `Card` to contain a `Suits Suits` property, where `Suits` is an enumeration. I'd also create some interfaces: `IDiscardable`, `IShowable`. You can use them &amp; add `Discard()` and `Show()` to both the `Card` class &amp; a `Hand` class. So you'd have something like this: public class Card IShowable, IDiscardable { public Suits Suit; /* Suits.Clubs, Suits.Diamonds, Suits.Hearts, Suits.Spades */ public bool IsWildcard { get; } = false; public void Show() { /* Code to display card. */ } public void Discard() { /* Code to discard. */ } } public class Hand : IShowable, IDiscardable { public List&lt;Card&gt; Cards { get; } = new List&lt;Card&gt;(); /* Add properties, fields, constructors, events, etc. */ public void Show() { foreach (Card card in Cards) { Card.Show(); } } /* Implement Discard() the same way. */ } public class Deck : IShuffable, IDrawable { public List&lt;Card&gt; Cards { get; } = new List&lt;Card&gt;(); /* More properties, fields, constructors, methods, etc. */ public void Remove(params Card[] cards) { /* Code. */ } public void Shuffle(int iterations = DefaultShuffleIterations) { /* Code. */ } public List&lt;Card&gt; Draw(int number = MaxHandSize) { /* for loop that gets cards at index i then removes them */ } } public class Player { public string Name { get; } public Hand Hand { get; } /* More properties, fields, constructors, methods, etc. */ } // Might want to make this static. public class TexasHoldEm : PokerGame { public List&lt;Player&gt; Players { get; } = new List&lt;Player&gt; Players(); public List&lt;Card&gt; Wildcards { get; } = new List&lt;Card&gt;(); public Deck Deck { get; } public Hand CommunityCards { get; } public TexasHoldEm(List&lt;Player&gt; players, List&lt;Card&gt; wildcards = null, List&lt;Card&gt; removed = null) : base(players, wildcards, removed) { /* Code. */ } /* More properties, fields, constructors, methods, etc. */ public void Dole() { foreach (Player player in Players) { Player.Hand = Deck.Draw(MaxHandSize); } } 
&gt; Fair enough, but I think having the implementation in the interface just makes it more confusing as far as separating what is responsible for what. Can you elaborate on this? What and how does it make something more confusing to you? It's a change in the language that needs to be learned, sure. But that's the case with every other feature too. &gt; If there really needs to be a base implementation of a method, I think that belongs in a base class, not the interface. Base classes do not solve the issue that default interface implementations try to solve, mainly - Allowing to evolve the interface without causing breaking changes - Avoiding boiler plate code &gt; It opens the door to multiple inheritance. I don't think that's a feature that we need/want. It does not open the door to multiple inheritance at all. Multiple inheritance would require significant changes in the CLR, which are not going to happen. Those things are unrelated.
Runtime.
In order to satisfy most of the feedback I've received (huge thanks again), I've broken the ObjectPool into two classes. One that doesn't auto trim (```SimpleObjectPool&lt;T&gt;```) and one that does (```ObjectPool&lt;T&gt;```). I've also spent a good amount of time ensuring thread safety so that if the pool is disposed, but something still has access to it, subsequent calls will simply work as if the pool has a ```MaxSize``` of zero. Therefore avoiding any unnecessary exceptions. https://www.nuget.org/packages/Open.Disposable.ObjectPool/1.0.2 https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/SimpleObjectPool.cs https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/ObjectPool.cs 
&gt; Can you elaborate on this? What and how does it make something more confusing to you? Interfaces are contracts that define *what* can be done - not *how* it is done. By moving method implementation to an interface, it is now responsible for *how* something is done. This blurs the lines of what an interface has been up until now. &gt; It does not open the door to multiple inheritance at all. What happens when you have two interfaces, `ISomeInterface` and `ISomeOtherInterface`, and they both define a default implementation of `DefaultMethod()`. If `SomeClass` implements both interfaces, now you're dealing with multiple inheritance problems -- which `DefaultMethod()` takes precedence?
Swift has this, titled Protocol Default Implementations. It’s incredibly powerful and one of the reasons I find Swift so robust. It promotes composition over inheritance :)
&gt; Interfaces are contracts that define what can be done - not how it is done. By moving method implementation to an interface, that interface is now responsible for how something is done. They still define *what* can be done. They optionally and **additionally** can now provide a implementation. But the main point, *what*, still stands unchanged. &gt; This blurs the lines of what an interface has been up until now. That very much depends on what you have seen an interface as. I always saw interfaces as contracts, something that remains unchanged. I focus on the contract part, you seem to focus on the "no implementation" part. &gt; What happens when you have two interfaces, ISomeInterface and ISomeOtherInterface, and they both define a default implementation of DefaultMethod(). If SomeClass implements both interfaces, now you're dealing with multiple inheritance problems -- which DefaultMethod() takes precedence? I did not yet take a look at the precise implementation, but I'd assume that the default implementations are implemented as explicit interface implementations. Then the problem you describe would not be issue. And there is no multiple inheritance problem. Multiple inheritance problems mostly come from having **state** in both bases, but the default interface implementations don't provide any state.
I don't like this either. It introduces an entirely new code smell into C#. If you want a method implementation, do so in an abstract class that inherits from the interface. This entire feature blurs the line between abstraction and concretion.
&gt; I understand it can bring you multiple inheritance. That is often thrown around, but it's actually not true. This is unrelated to multiple inheritance. It will not bring MI.
This was posted like 8 hours or so after I made this post. Interesting. XD
Really? That doesn't seem feasible.
It basically takes an Action, disassembles it, and then reassembles the IL with changes - then compile to a delegate and run. All done with reflection.
It's rewriting the block of code (lambda as Expression) passed into the PoseContext.Isolate method. Not replacing the method on, for example, the Console object. Is that correct OP? I've only scanned the source. Also what was wrong with Focks?? 
So: public interface IBird { BirdWings Wings { get; set; } void Fly() { Wings.Flap(); } } public interface IAirplane { Engine Engine { get; set; } public void Fly() { Engine.Start(); } } public class BadIdea : IBird, IAirplane { } Is this a compiler error? If not, what happens if I: var foo = new BadIdea(); foo.Fly(); 
Thank you again for your advice, I spent some time today working through the project and pulled he entirety of what is now the “cadSystem” into a cad.dll class library That’s now up on github at: https://github.com/dankelley2/CADLib In win forms, I now just have to initialize the CadSystem, the cadSystem owns objects for: * gridSystem * shapeSystem * commandHistory * IO (new, going to use for serializing and exporting drawings/parsing commands) I broke some minor stuff along the way, but most of it seems to be working! Also, with the advice regarding win forms as a learning platform; that’s what I’m hoping, it’s nice because everything sticks within C# when working with them, and there are plenty of controls that make implementing higher level concepts a bit easier. Thank you again for the help!
As far as I understood the proposal so far, the explicit interface implementation is provided via explicit interface implementation. That means what you have is simply a compiler error. But this would work: `((IBird)foo).Fly()` and `((IAirplane)foo).Fly()`.
But default interface implementations solve this case more elegantly. You can only have a single base class - so everyone would need to implement this on their own. If they already have a base class, they need to expand on that one, which is not always possible. With the default interface implementation it just works. Neatly. A point is removing this useless clutter boilerplate code that everyone always implements in their own base classes, over and over again. If I provide an interface as a library owner, I surely could provide a base class. But I could not expect everyone to use it, as they likely have their own already. With default interface implementations I can still provide a very saneful (if applicable) default implementation, without the limitations of base classes.
&gt; very narrow contexts So narrow that I can't see myself ever using it. I read about the motivations for making this and I really think its only suited to large APIs sets that are used by a lot of people, like the built-in collections are. 
Apart from the interface implementation, that code is already legal in C#. `IBird.Fly` and `IAirplane.Fly` are two different methods that can co-exist in a single type. You can't call `BadIdea.Fly()` because there is no implicit method implementation in the class, only `((IBird)BadIdea).Fly()` in which case there is no ambiguity. This on the other hand will be illegal: public interface IFlying { void Fly(); } public interface IBird : IFlying { void IFlying.Fly() { ... } } public interface IAirplane : IFlying { void IFlying.Fly() { ... } } public class BadIdea : IBird, IAirplane // Error: No most specific implementation if IFlying.Fly { }
And autocorrect constantly trying to "help"
You raised questions that caused me to go check out the feature in GitHub. I was worried about this situation: public interface IBird { BirdWings Wings { get; set; } void Fly() { Wings.Flap(); } } public interface IAirplane { Engine Engine { get; set; } public void Fly() { Engine.Start(); } } public class BadIdea : IBird, IAirplane { } I wondered what might happen if: var foo = new BadIdea(); foo.Fly(); It seems like in the current design that is illegal: "default implementation" methods are treated like "explicit interface implementation" methods. I'd have to: IBird cast = (IBird)foo; cast.Fly(); I'm assuming there is syntax for an implementor to promote a particular implementation, but not interested enough to look for that. I bet whether they have syntax for it or not this would work: public void Fly() { ((IBird)this).Fly(); } There's also discussion of allowing static and private methods (with implementation). That puts my INotifyPropertyChanged example back on the table. It seems like the main use cases driving the feature are: * Versioning: you can add default implementations to published APIs without breaking existing clients. * "Traits": You can provide an algorithm that has some dependencies, and implementors get the algorithm after providing dependencies. * Xamarin. ("Compatibility with Java/Swift libraries that have the feature.) I'm sure someone can come up with some good concrete examples, but I'm satisfied it's not "100% stupid". 
My first question is what happens when implemented interface methods have the same signature but come from different interfaces? Which one gets called?
Thanks for answering those few questions! &gt; If the intent is to not have the class be inherited, it's best to set it as sealed. Didn't know that, good to know. I'm going to try implement the ShowsWindowViewModel. I did try earlier with the CollectionView but it wouldn't update the items when I used the ```Refresh()``` method. I'm still not entirely sure how it would work with my main list source in my static ```AppGlobal``` class. Will I need to call it like this? Collection.Source = AppGlobal.User.Shows.Select(show =&gt; new ShowViewModel(show)); How will I update that source now when ```AppGlobal.User.Shows``` updates?
I think `INotifyPropertyChanged` will not be practical either way because you can neither raise an implementing class's events from outside the class nor implement an event from within an interface.
One of the general rules about multithreaded code is that anything that can happen, will. You have this code: var p = _pool; if (p==null || p.Count &gt;= _localAbsMaxSize) { // Getting too big, dispose immediately... (item as IDisposable)?.Dispose(); } else { _recycler?.Invoke(item); p.Add(item); if (p.Count &gt; _maxSize) _trimmer?.Defer(500); } Imagine for some reason the calls to this method get into the `else` and then the thread sleeps. There is no actual limit on the number of items being stored in the underlying bag. If the `_recycler` call was expensive, this could have some measurable impact on performance as you are unable to control how often that happens. For a more reliable design you could remove the bit ` || p.Count &gt;= _localAbsMaxSize`, or you could use something other than a `ConcurrentBag&lt;T&gt;` like an array implementation. 
If I'm not mistaken this could be leveraged to make a library for mutation testing, no?
Yes that is absolutely correct. Pose just felt like a better name than Focks :)
Both names are good but Focks makes me smile. I could have a team meeting about Focks :)
Did you mean "statistics"?
Nice work!
Your view model has no knowledge of the selected item. If you're able to use tag helpers, you can implement the dropdown like this: &lt;div class="col-md-10"&gt; &lt;label asp-for="Type"&gt;&lt;/label&gt; &lt;select class="form-control" asp-for="Type" asp-items="@(new SelectList(Model.GoalTypes, "Id", "Type"))"&gt;&lt;/select&gt; &lt;/div&gt; where `Model.GoalTypes` is your list of goals. If that doesn't do it, let me know if you're using MVC5 or core
The same that already happens when you explicitly implement multiple interfaces with overlapping member names in a single type. It doesn't matter, because you need to refer to the method via its interface.
Yes of course 
So it forces you to explicitly implement it, With the current way you can just implement one method to meet the two interfaces ?
Although personally for that I just do: ``` /// &lt;summary&gt; /// Provides an abstraction over retrieving the date and time. This is to allow for deterministic unit testing. /// &lt;/summary&gt; public interface IDateTimeProvider { /// &lt;summary&gt; /// Gets the date time. /// &lt;/summary&gt; /// &lt;returns&gt; /// The DateTime /// &lt;/returns&gt; DateTime GetDateTime(); } ``` And then use a mocking library.
Don't get me wrong, i think this is definitely a cool package, but I'd view this as a code smell (a quite common one actually). Noda Time is a library that exists for exactly this purpose. It makes working with date times easier, but also provides a layer of abstraction that improves testability. http://nodatime.org/1.2.x/userguide/testing
It doesn't force the implementing class to implement the method since the implementation already exists in the interface, that's the whole point after all. But it is accessed the same way as an explicitly implemented method.
Excuse my ignorance, here's a noob question: is Noda Time at all related to the Joda library in java? I code in both .NET and Java and have experience with Joda. If Noda was similar I'd probably adopt it to keep the transition between languages simple(r) for a noob. http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html
The DateTime example was purely for illustrative purposes. This library is for more than just DateTime. Imagine a scenario where you'd have to test/overwrite legacy functionality whose code you don't have access to
That's exactly why abstract classes exist. An interface is a contract on what the public API of an object is, not what it does, it's up to whoever implements that interface to define what the methods/properties do. Meanwhile an abstract class provides a default implementation that is typical of all derived classes, and if for some reason a derived class needs that method to do something different it will override it. Default interface method implementations are a bad idea in my opinion. We already have a way to provide a default implementation of something (a virtual method in a non-sealed class), we don't need two.
Yes! Definitely, that is the rule I live by. Anything can happen. And the intent is to make sure if by chance the object pool is disposed, that it will still continue gracefully. So totally agree. Hopefully the recycler isn't doing anything stupid, but I see your point, this call could effectively 'pile-up' as a spurt of items gets returned to the pool and subsequently recycled (and delayed). Originally this would be resolved because of the nature of the trimming function would fix this after the fact. I'm definitely going to make changes based upon your observation. Nice catch, thanks. In respect to using another collection, I've looked at other implementations including Roslyn's and I worry that I'll be having to do my own synchronizations. Looking at ConcurrentBag&lt;T&gt;'s latest implementation it sounds pretty solid and doesn't have the performance hiccups of the past. 
I understand it is illustrative, and this isn't about your library at all. My concern, and why I pointed this out as a code smell, is that regardless of whether or not your library allows a delegate to be used instead of an actual call to DateTime.Now, the actual code being tested is not anymore testable. It's dependency on the date time is not expressed to its consumer, and therefore you have to know you need to have this shim rather than the code saying "I need something that can give me a date". &gt;Imagine a scenario where you'd have to test/overwrite legacy functionality whose code you don't have access to I think that's a great use case. For places where you don't control the code, have to work with some 3rd party library, or just some ugly legacy stuff that you're trying to isolate, then sure. But if you could avoid it, then I'd steer away from doing something like this example.
Yes it's the same. Jon Skeet wrote Noda Time. I'm not sure if he had a hand in Joda Time too. http://nodatime.org/1.3.x/userguide/rationale
I'll give it a try. We heavily use fakes in our unit tests but it has its limitations. How does Pose handle parallel test execution?
All types. That said they all have a web backend. We build mobile, desktop, web, outlook plugins, etc. But they all talk to servers.
As someone who doesn't like destroying their code base with interfaces for every tiny little thing, I appreciate the flexibility of Pose.
&gt; How does Pose handle parallel test execution? I haven't tested this particular case. I'd appreciate it if you could take it for a spin and let me know how it went
What happens if I, say, kick off a thread or task inside of the context?
This would be great for legacy code where you need to write tests before you start major refactoring.
Web. Eventually everything will go to web. 
Maybe you can provide the code you're trying to use? Are you trying to do something like this? myContainer.Register&lt;IMyInterface, ClassImpl&gt;(); myContainer.Register&lt;IMyInterface, AnotherClassImpl&gt;(); myContainer.Register&lt;IMyInterface, YetAnotherClassImpl&gt;();
Because then it wouldn't know which implementation of the interface to inject. With dependency injection you typically may have multiple different implementations of an interface for different scenarios (e.g. one for local testing and a different one for production), but you only use one of them at a time (per container at least).
Yep, exactly like that. The only way I could do it was making each class have their own interface. 
So how do you cope with the example below? I was reduced to renaming my interfaces to be unique. myContainer.Register&lt;IMyInterface, ClassImpl&gt;(); myContainer.Register&lt;IMyInterface, AnotherClassImpl&gt;(); myContainer.Register&lt;IMyInterface, YetAnotherClassImpl&gt;(); 
Ok, but then what class/impl/instance do you get when you call this? myContainer.GetInstance&lt;IMyInterface&gt;(); ClassImpl, AnotherClassImpl, or YetAnotherClassImpl?
It sounds like you're trying to have interfaces do too much. EG, you probably want a single logging interface. So you define ILoggingManager with your various levels of log writing, etc etc. You then define two loggers: one for unit tests, and one for production/QA. The unit tests ILoggingManager does nothing, while the prod/QA one does all the logging you'd expect. That's when the SimpleInjector stuff gets useful; you want to register the test logger when it's being used in unit tests, and register the production/QA otherwise. If you're running into situations where you're trying to inject multiple types of the same interfaces, it probably means you need to split your interfaces into doing less work, and only need one implementation of each interface for everything to get done satisfactorily.
Why do you want to do that? How can it tell which implementation you want if you register multiple ones?
Well, you don't. That doesn't really make sense. What is the result you expect here? You have a class that needs an `IMyInterface` and want it to be injected, which of those should SimpleInjector use? 
They would need to share an interface or base type. You would then create a list of CardBase or ICard
so... compile time, then?
The release of Visual Studio 2017 around March also introduced the new .csproj file. If you right click on your project in the Solution Explorer, you can see it by selecting "Edit [project name].csproj". This is basically just the project.json but as XML instead of JSON. I think the most recent beginner tutorial for ASP.NET Core on PluralSight is specifically about building an API ( https://app.pluralsight.com/library/courses/asp-dotnet-core-api-building-first/table-of-contents ). I thought it was pretty good, but I have been working with .NET Core for a little while now. I'm afraid most of the instructional material you'll find at this point is going to be a bit inconsistent with the current version of VS2017 and ASP.NET Core 2. The most up-to-date resources will be the documentation ( https://docs.microsoft.com/en-us/aspnet/core/ ) and the Visual Studio channel on YouTube ( https://www.youtube.com/user/VisualStudio/videos ). Those aren't quite as structured as a complete PluralSight tutorial or book, but there is a good guide to getting up and running with an MVC project ( https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/ ).
No, at runtime. That's one of the features of reflection.
... so it's duck punching?
OK, I'll take a step back. I have 3 classes Diceroll, Diceroll2, and Diceroll3. The purpose of the classes is to roll 1, 2 or 3 dice. I have one interface I want to use IDiceroll that goes with each of the classes, to make sure they have the same methods. I made a factory to choose which class to use public DiceRollFactory(IDiceRoll DiceRoll, IDiceRoll DiceRoll2, IDiceRoll DiceRoll3) It injects in the dependencies, and a factory chooses which class to run and returns back a list of dice rolls public List&lt;string&gt; Factory(int ID){} All is happy, until I run in at which time I have to duplicate the IDiceroll interface because it can work container.Register&lt;IDiceRolls, DiceRoll&gt;(); container.Register&lt;IDiceRoll2, DiceRoll2&gt;(); container.Register&lt;IDiceRoll3, DiceRoll3&gt;(); container.Register&lt;IDiceRollFactory, DiceRollFactory&gt;(); Now it works, but has defeated the point of using the IDiceroll interface as I now have 3 of them. 
OK maybe I am getting the wrong idea about Injection. I see it is a way of 'instantiating ' the class at the composition Root, so the program knows it exists. Otherwise the program won't run as I get an error of &gt;SimpleInjector.ActivationException: 'The constructor of type DiceRollFactory contains the parameter with name 'DiceRoll2' and type IDiceRoll2 that is not registered. Please ensure IDiceRoll2 is registered, or change the constructor of DiceRollFactory.'
Thank you for the thoughtful response. I will check out his course.
Are you wanting a list of multiple arrays that you can add additional arrays to? That would look something like this: List&lt;string[]&gt; listOfArrays = new List&lt;string[]&gt;(); string[] stringArray = new string[2]; listOfArrays.Add(stringArray); A List can have new elements added to it and will increase it's size to fit them. An array has it's size set when you make it (the string[2] part of your code) and you can't increase that size. That's why an array does not have an Add method. Does that answer your question?
If the choosing logic is in the factory, you could inject the factory to your classes constructors. Some Ioc containers so let you register multiple classes and you can get them all by putting IEnumerable&lt;IDiceRoll&gt; as a constructor parameter. Problem after that is how does your factory know which one is which, unless you do some runtime type checking. But really, your injector is acting as your factory, soooo... Now, many iocs allow you to key a registration, so it acts like a dictionary. You'd request a function that takes an int number of dice and returns an instance. I'm not familiar with your specific ioc, but it'd be something like Register&lt;func&lt;int, idiceroll&gt;&gt;(x ...).AsKeyed(1)
Perhaps you want to register a collection of IDiceRoll as shown [in the documentation here](https://simpleinjector.readthedocs.io/en/latest/using.html#batch-registering-collections) or only registering the factory, depending on how you're using them.
Good luck?
The meaning of your inputs is established by contention/documentation and not expressed by the parameter type. That is, public DiceRollFactory(IDiceRoll DiceRoll, IDiceRoll DiceRoll2, IDiceRoll DiceRoll3) There's nothing that distinguishes `IDiceRoll DiceRoll` from `IDiceRoll DiceRoll3` that expresses that the first parameter there is intended to represent a single dice roll, whereas the other represents a 3 dice roll. At this point, the way you've designed the constructor signature, you have to enforce the intent manually: container.Register&lt;IDiceRollFactory&gt;(() =&gt; new DiceRollFactory(new DiceRoll(), new DiceRoll2(), new DiceRoll3()); I've seen other DI frameworks where you can specify/tag dependencies with a string, but I don't think SimpleInjector supports it. That is, you'd have some signature like: container.Register&lt;IDiceRoll, DiceRoll&gt;("1 roll"); container.Register&lt;IDiceRoll, DiceRoll2&gt;("2 rolls"); container.Register&lt;IDiceRoll, DiceRoll3&gt;("3 rolls"); container.Register&lt;IDiceRollFactory&gt;(() =&gt; new DiceRollFactory(container.GetInstance&lt;IDiceRoll&gt;("1 roll"), container.GetInstance&lt;IDiceRoll&gt;("2 rolls"), container.GetInstance&lt;IDiceRoll&gt;("3 rolls")); But I don't know if this is particularly useful for you here. If you like, you can specially tag your classes with special interfaces that inherit from the base interface. That is: public class DiceRoll2 : IDiceRoll2 { } public interface IDiceRoll2 : IDiceRoll { } Where you have `IDiceRoll1`, `IDiceRoll2`, `IDiceRoll3` which all inherit from `IDiceRoll`. Your factory constructor signature would then be: public DiceRollFactory(IDiceRoll1 DiceRoll, IDiceRoll2 DiceRoll2, IDiceRoll3 DiceRoll3) Then your DI usage: container.Register&lt;IDiceRoll1, DiceRoll&gt;(); container.Register&lt;IDiceRoll2, DiceRoll2&gt;(); container.Register&lt;IDiceRoll3, DiceRoll3&gt;(); container.Register&lt;IDiceRollFactory, DiceRollFactory&gt;(); Which... now I realize is pretty much what you have. But at least by inheriting `IDiceRoll` as a base interface, it might help to reduce duplication. But ultimately, it seems like you're trying to tag/specify the different roll styles but failing to express that in your type system. I also don't know about your implementation, but seems to me that _this particular example_ could be better served by supplying a single `IDiceRoll` which makes a single roll, and your factory can serve/roll that single roller multiple times depending on the requested number of rolls.
Looks like you want the `Roll()` method (or whatever it's called) in `IDiceRoll` to have a parameter to specify the number of die to roll. You don't need multiple implementations of the interface to accomplish this functionality.
Removed: Rule 4. You'll have to make an attempt. There's nothing that will do this as-is. You'll have to read the content of both files, combine them together perhaps as a big `string`, then output it back to a file. There are various methods on the `String` class that you can use to search/replace the `|` character.
Honestly, why even bother having ```IsLowCard```? It's repeating yourself. ```!IsHighCard``` has the same effect. Always keep DRY in mind. **D**on't **R**epeat **Y**ourself.
I considered this, but I figured I'd just put both implementations as it might be a bit more understandable. I probably ought to have mentioned it at least as an option. I definitely agree, in such a binary situation, it's definitely preferable, not just for DRY purposes, but also to avoid possible bugs where cards could accidentally belong to both high and low groups, or belong to neither.
If you want to add logg to loggar, you should call loggar.Add(logg), not logg.Add(loggar). There are however several other issues with your code that will make it misbehave. 
It did help a bit clearing up things a bit but I'm still having trouble with the **for** loop as it's only supposed to let me write 2 lines then go to break, but it's letting me write infinite lines. [picture related](https://imgur.com/a/KXYDM)
So much java I don't even
Say out loud what your while loop is doing 
-.- fixed it. I'm so slow.
It’s like Swift all over again.. until .NET Core matured a bit more, it’s likely you’ll have to rely mostly on the official (read: up to date) Microsoft docs, which are actually quite good nowadays. This situation has me wary of using .NET Core on anything but Windows, as I have found myself spending a lot of time trying to, for example, get unit tests to run with VS Mac.
You don't mean to inject any old `IDiceRoll` into the constructor, yet that is what you've written. You could get a `TwentySidedDiceRoll`. You could get them in a different order. It would all be valid, yet your factory logic would break. Just specify `DiceRoll1`, `DiceRoll2` and `DiceRoll3` instead of `IDiceRoll` instances in the constructor signature.
But abstract classes don't solve the issue (one of multiple) that default interface implementation try to solve. If I'm a library author and I provide an interface. I know the implementation of one of the interfaces methods is the same in 99 % of the cases, so I'd want to provide a default implementation. Sure, I could provide a base class in my library.. But it will be no use in most of the cases, as the consumer already has an existing base class in most cases. So the trivial method has to implemented again, needless boilerplate clutter code. With default interface implementation it would still work, it's much more flexible than the limited base class approach. To summarize and use your words: We already have a **limited** way to provide a default implementation of something. Default interface implementations expand on this and make it more wildly applicable.
I am not trying to make a perfect tool ;-) I guess it fails with extensability. I want to get a working template of DI with a container to better learn, and teach what it does.
That just sounds like it's trying to open the door to multiple inheritance, which has its own set of problems and in my opinion is even worse. One base class and multiple interfaces is a perfectly adequate setup for C#. I can count the number of times I've thought "It would be useful to inherit from multiple classes right now" on one hand, and after thinking that and being forced to re-think what I was doing it was trivial to rework things around single-inheritance and the code was not any poorer in quality for it. I feel like MI and default interface method implementations (DIMI?) just have the potential to cause more problems than they solve. The only three notable examples of languages with MI/DIMI are C++, Python, and Java. Python and C++ are not the greatest examples of good OOP and "because Java does it too" is how we got stuck with array covariance.
Thats true :-) But I want to use multiple interfaces in this example, as an example of multiple interfaces.
&gt; That just sounds like it's trying to open the door to multiple inheritance, which has its own set of problems and in my opinion is even worse. This is thrown in so often, but it's simply not true and completely unrelated. This has nothing to do with MI. And most MI issues come from states, but default interface implementations can't have state. &gt; One base class and multiple interfaces is a perfectly adequate setup for C#. Maybe in your cases. But the case I described for library authors (including the .NET framework) is real, and it's annoying. When I need to implement an interface, I hate this stupid boilerplate code. Why do I need to write it? I can't use the provide base class, I already have one. The suggestion from you to just use base classes is increasing the need for MI. Default interface implementation is not opening the door to MI, it's keeping it shut. &gt; just have the potential to cause more problems than they solve. Can you name one? &gt; The only three notable examples of languages with MI/DIMI are C++, Python, and Java. Python and C++ are not the greatest examples of good OOP and "because Java does it too" is how we got stuck with array covariance. You're again mixing up multiple inheritance and default interface implementations. Those features are unrelated, they work **completely** different. The notable languages are Swift and Java, both do not support MI, but do support default interface implementation.
Thanks for taking the time to make some great points. RegisterCollection didn't work for me either. :-)
OK, so right now it blows up because the container can't decide which of the nine solutions to your question is the one you want. You need to ask it a question that has one answer.
Ok well... You inspired me to go a bit overkill. So start by looking at this first: https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/SimpleObjectPool.cs In this case, now if generation is long running for any reason, the .Take()/.TakeAsync() operation will return an object from the pool as soon as one is available. https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/SimpleObjectPool.cs#L81-L118 I could do this without async/await, but as I understand it, isn't the async/await pattern facilitation re-entrance for cases where async/await is being used by the consumer? It wouldn't be hard to revert away from it. --- The API is much simpler now. 2 sub classes: https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/RecyclableObjectPool.cs So instead of recycling immediately, the items being returned to the pool (if a recycle function is provided) are then added to a recycleQueue which can have it's items removed from the queue before processing a recycle if a dispose is happening or a sub-class is trimming. https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/ObjectPool.cs (inherits from RecyclableObjectPool) Effectively the same desired behavior as before. Now there's no auto-clear unless specified. You would only use this version if you cared about trimming which is now specified by TrimmedSize. --- All of these options seem to work as expected in testing. But I'm ready to hear the heavy criticism or "Dataflow Overkill", or why not an array, etc. :P I think there's something clean and robust about Dataflow blocks. The SimpleObjectPool benefits a bit as well for long running generators. 
And now it's 3 classes. :P
Nice! I use fakes, which generally works fine, but the idea that there is no intermediate assembly being generated with Pose is nice. Plus, fakes messes with code coverage metrics in our CI build system, so this could be a potential replacement for us! I'll give it a shot and let you know.
That is both awesome and terrifying in equal measure! Thanks!
It's pronounced "see sharp" not "she sharp", dude.
Haha accent issue. Thanks for pointing out, will work on it.
Thumbs up for actually taking the time and reading the proposal.
&gt; not "she sharp" Triggered!
&gt; Such as add the new functionality as a second interface. Artificially splitting up interfaces is not a solution either. If you need methods from both interfaces (which should be the case if the intention was to add the method to the first interface right away), then now you need to either check two types using the `is` or `as` operator, or pass two arguments (both interfaces) instead of just one. Or you add yet another interface that inherits from the other two and add even more type clutter. And if later you need another method, you add even more mess.