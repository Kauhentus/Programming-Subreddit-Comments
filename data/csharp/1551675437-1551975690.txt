Sounds like pure pain wrote these words.
I think that learning to make a game was a good premise to learning a language. In my case Unity was a good way to get acquainted with C#. I would recommend you do the same as there are a crazy amount of tutorials and bases from which to extract some knowledge on the topic of C# Mind you, I’m not saying to get into game development, I’m just saying that I found it to be a much more rewarding way to see the fruits of your work/knowledge much more quickly. 
How is nodeJS exciting? I send a lot of time helping people get out of that corner. New devs getting in on that and then ending up stuck up shit creak when security and actually performance is a requirement. It's great for somethings, yes. But don't put it in the category of something to switch to. It's a tool, like a hammer. Don't hammer in a screw.
I'd say C# is a great first language but when you really want to try out your lower level skills definitely move to C for the fundamentals. It helped me along with data structures and better process understanding
🤔
As someone who is working with major companies as a vendor, no. This isn't a true statement. A lot of them were on Java, but since Oracle made licensing a thing, they are either going OpenJDK or to alternatives, such as .net or other platforms. Especially in the financial sector, one of the slowest moving sectors.
As a C# developer, I've had to use Java and C++ in projects. Never isolate yourself.
it's seems like everything on the web is tending towards javascript. that's why i referred to it as exciting. 
wow! it's safe to say c# has gone ahead of Java in recent times 
that's something else I'm thinking, taking the job will draw me back in the .Net space and I'll be behind when it's time to get another job later
Tiobe isn't a true representation of popularity because of the way it measures. It's a good idea and insightful, but all automated popularity indexes are biased in the manner in which they measure. 
Deep, bro. 
Front end has been JS for years because theres little option for client side actions in a web browser. NodeJS isnt a center part of that trend, though it has many uses. Like a interpretor for Typescript for Angular or as a quick localhost client for middleware. Not as a web technology by itself. With web assembly being more implemented though, there are great alternatives coming. Blazor, for example, let's your write C# in both front end and back end totally JS free! Learn JavaScript, for sure, but use it as a tool. It'll be useful in many occasions. But I wouldn't say it's **the future **
thanks very much. 
We're thinking of switching in the mid-term, and we plan to clean some third-party dependencies for that (moving to custom and OSS code). Will be a good opportunity.
That is ... hilariously bad. Even ignoring all the issues with search terms used, it doesn't account for the large number of historical results in previously-popular languages. I feel like you'd get better results just with Google Trends, e.g. https://trends.google.com/trends/explore?date=all&amp;q=%2Fm%2F07657k,%2Fm%2F07sbkfb,%2Fm%2F02p97,%2Fm%2F05z1_, which at least gives an indication of searches over time. And even then that's not a great indicator of popularity or usage.
Try TypeScript in VSCode. Or even plain JavaScript in VSCode with TypeScript definitions of any libraries you use. It feels a lot closer to the IDE experience of traditional statically-typed languages.
Also... [A great environment for C# scripting is available,](https://msdn.microsoft.com/en-us/magazine/mt614271.aspx) and Visual Studio is an amazingly good environment for learning.
I started with C# a few weeks ago with Bob Table's beginner tutorial...it's taken a few frustrating sessions but I'm finally grasping the basics and it's starting to make a little sense at least! Excited for the future .
Probably (definitely) not what you want, but I thought it would be funny: using System; //You can 'using' anything here. using Console = HackyHack.Console; namespace Name { public static class Class1 { public static void Main() { bool bf01 = false; bool bf02 = false; //Write ANYTHING you want..... //And get the output: //bf01: true bf02: true Console.WriteLine(string.Format("bf01: {0} \r\n bf02: {1}\r\n", bf01, bf02)); //bf01&amp;bf02: false Console.WriteLine(string.Format("bf01&amp;bf02: {0}", bf01 &amp; bf02)); System.Console.ReadLine(); return; } } } and then somewhere: namespace HackyHack { public static class Console { public static void WriteLine(string input) { var specialCase = string.Format("bf01: {0} \r\n bf02: {1}\r\n", false, false); if (input == specialCase) System.Console.WriteLine(string.Format("bf01: {0} \r\n bf02: {1}\r\n", true, true)); else System.Console.WriteLine(input); } } } &amp;#x200B;
&gt; Another relevant factoid is that start-ups very rarely want to use Microsoft tools. Here is a Quora discussion of which language is best for start-ups. C# is barely mentioned. Java, Python and Ruby are recommended about 5 times as much. Start-ups like open source tools because they're free. It's good that Microsoft is moving quickly in that direction, but (in 2016, now?) Startups can use Visual Studio Community for up to 5 engineers on the team for free. When the company can afford its 6th engineer at $100k/year+ I think we will probably be able to swing the $540/year per dev for VS Pro, especially considering the impressive productivity benefits VS provides.
People might not agree with me but Python is a good first language because it has a really simple syntax so at first you can just focus on all the other stuff without having to worry too much about forgetting a semicolon somewhere or something like that. That's my perspective
If you're looking for a dev job in the Seattle area, I'd put put C# and Javascript as the top learning priorities. Working at MS is a worthy goal, but there are lots of other places around here that use the same toolchain just because there's a lot of local talent familiar with the same tools. 
It was written in 2016, so c#7 and older versions aren't covered
&gt; Since there are many questions about the way the TIOBE index is assembled, a special page is devoted to its definition. Basically the calculation comes down to counting hits for the search query +"&lt;language&gt; programming"
The thing about online rankings is that if you give accurate rankings people are less likely to post them and talk about how unexpected (or obviously wrong) they are, which means fewer clicks. So coming up with something thats completely cuckoo but just plausible enough that it doesn't look like poor satire is actually the *goal* here.
I work in both languages, it has been pretty good for the last 20 years. Languages are pretty similar, both have some plus and some minus over the other. Basically you just have to know the differences, and here is another table, building on similar examples from others, but with JEE focus. .NET|Java :--------:|:--------: ASP.NET Forms | JSF ASP.NET MVC | MVC (with JAX-RS) ASP.NET Web API | JAX-RS Dapper.NET | myBatis , jOOQ MSBuild | Ant / Ivy, Maven, Gradle Forms | Swing WPF | JavaFX Attributes| Annotations MEF| Services ADO.NET|JDBC Application Domain|Classloaders IIS| Tomcat, Websphere, JBoss Sharepoint, Sitecore, Umbraco | Liferay
&gt; As a developer, if you don't know how the build works, then you're not a fully functioning member of the team. That seems like a silly thing to say. If people need to know the internals of the build system to do their work, how much is the build system actually helping? I might as well just do my own compilation from the command line at that point.
Well, this hits close to home.
Ooh, subverting the challenge is also fun. How about this: bf01 = true; bf02 = true; unsafe { fixed (char* c = "bf01&amp;bf02: {0}") { c[11] = 'F'; c[12] = 'a'; c[13] = 'l'; c[14] = 's'; c[15] = 'e'; // leaving the bounds of the string, hopefully we don't overwrite anything important ((int*)c)[-1] += 2; // the GC really won't like this, but this program doesn't run long enough to notice } } 
Don't punish yourself. Don't "try" to speak out and stand for yourself, do it. Don't feel guilty for job hunting, it is about your health and you deserve a job that will keep you healthy and alive. Look at it this way, you leaving is a minor inconvenience for them. But you staying is a much bigger problem. Start taking interviews now. Or stay at your current job, and do not complain because it is your decision after all.
Please try to find another job that’s not eating you up. There is no need in react skills or some other fancy stuff. A solid base and willing to learn on the job is fine. Just look around and get some interviews. 
C# 7 doesn't have big changes either. Just lookup some blog post about it and you are up to date.
I keep lying to myself that I'll get around to F#, but each time I try it I realise I'm not smart enough for it.
Does this mess with interned string? I love it!
My first serious attempt at coding was in c#. I started with the bob tabor free online course and it really set me on the right path, I thought it was excellent. I did have some html experience and odds and ends from music creation (syntactically similar to C, I think). Also so many resources for c# if youre teaching yourself! 
There is only one way out of this situation: out. You are trying to fix the Titanic alone 5 minutes before the collision. Be honest and abandon the ship.
UWP is dead
Even before it ever had a chance to fly.
Oh man this sounds pretty familiar. &amp;#x200B; I m 1 1/2 years into a job that promised to move its webform stack to mvc during the interview process. And it looks like the move will be postponed - again - to 2020. Its really draining to constantly advocate for change. Especially in an environment which likes talking about how Agile it is, but rejects any change towards more agile methods. Information hoarding, tons of work that bypasses the backlog, non cooperative POs etc. you may know the drill. I try to offset this by doing side projects in .net core. But awesome as that is it also highlights all the deficits and technical debt you encounter 9-5. Where everything is a .ToList(). And performance is treated as an arcane black box. &amp;#x200B; I hope you can make your current gig work out for you. Or find a more fulfilling job. Developing software can be an amazing, energizing task in the right environment.
&gt;It's nice to be here among my python-hating friends. &amp;#x200B; Python is strongly typed.
If you have some money on the side, quit right now. What you describe is hell. What you describe is a toxic environment absolutely not suitable for any kind of work the least for a one man show do it all dev. Have you killed small React babies recently to deserve this? One thing is sure. You continue down that road and soon you won't be able to code anything. And you will need much more time to recover than 3 months. Burn-out is a heavy condition. And it grows out of frustration and helplessness not out of too much work.
Down vote me all you want, but your last statement is very stupid, how old are you that you can't even attempt to make some research before coming here? If this is going to be how you're going approach to programming, please do something else. This is beyond Point number 5 of the r/csharp rules. You're asking for "good online resources"... please make yourself a favour and read this [https://www.reddit.com/r/csharp/comments/3xn6sm/welcome\_to\_rcsharp\_read\_this\_post\_before/](https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/) PLENTY OF RESOURCES!!! &amp;#x200B; Now downvote me, but at my eyes you're not a novice trying your best effort, you're a lazy John Doe that wants everything made for you, without you making any effort. &amp;#x200B; Bye. 
Don't worry about your skills stagnating while you were there. It sounds like everything you've tried to do is correct and you will have learnt a lot unpicking bad stuff. When you "stand up for yourself" don't frame it as standing up for *yourself*. The risks are not to you, you can (and should) leave. The risk is to the enterprise. Pick the top n problems, perhaps 3-5 depending on how long you think it would take to describe them and discuss them. Make it clear *these are the top n problems, there are more*. For each present three things: Describe the problem (don't be too technical), why the problem is a problem and its risks, finally propose a solution, preferably costed which for you means how long it would take. Explain that with BAU (Business As Usual) work, stuff like updating copy, there is no time available to resolve these issues. The options are, free up time (be careful, they'll offer to free you for 2 days a week but you'll still get BAU requests all day any way), ignore them, or add a new person. Ideally they'd hire you a helper, a junior to hand over as much of the BAU stuff as possible. Good luck, and don't feel guilty. 
I know. Right. What a paradigm shift. But a few thing are coming I to C# from functional world and it is awesome. I suppose doing code Katas is a good start. 
You will get biased opinions on the C# subreddit :) To be the devil's advocate, I'd actually recommend starting with C, so you learn how memory works, which will go a long way helping you optimize your code without even noticing it.
Nonsense https://reddit.com/r/WPDev/comments/aukscn/mozilla_is_looking_to_contract_with_someone_to/
You're in a lose-lose situation. The best situation you can achieve is that you accomplish what sort of is expected from you: keep the webforms trainwreck working. However to get there you have to make a long list of sacrifices that won't make life easier for you. So as life has no respawns, you can do 2 things: 1) change the project and make the project how you wanted it to or 2) go work somewhere else. Both have pro/cons. The latter doesn't guarantee that things are better at a new job, they might actually be worse: as there is high demand for software engineers, it might very well be your next employer is understaffed and/or has hired every bozo who can type so the workforce isn't up to what you need. It also might be heaven on earth, but it's a gamble. The former has the downside that you practically have to do all the work and no-one is going to help you. This might suck at first, but it's also a great opportunity to learn how to deal with that: that you can pull a project like that, that you can do these things. But it has to be kept into perspective: if the amount of work and pressure is simply too much, you can't simply soldier on, you won't succeed. So if you don't really want to take the gamble of changing jobs, I'd talk to your manager, illustrate the situation in the most worst possible phrasing and make suggestions what can be done to get out of it. That's what managers like: a choice what to pick to get out of a sucky situation. Chances are you might get what you need. Good luck.
Yes
Not currently, but that sounds like a great idea for the next release! I'm not exactly sure what work it would entail, though I imagine there's probably something I can do to tell RestSharp to route its queries through a given proxy. I don't know of any proxies that I'll be able to use to test it, but I can probably fit it in to the 1.1.0 release, assuming it can be done without refactoring half the codebase, of course.
https://twitter.com/maartenballiauw/status/1102452760971218946?s=19 Preview next week probably
I've been trying to make a tiny library of attributes to check for required claims on authorization in ASP.NET Core - most of it is pretty easy, but I was planning to have it accept stuff like a Func&lt;bool&gt; too, which seems to be impossible due to attributes only accepting primitive types..
Except you can assign undefined, which is different from removing the property.
Can you please explain what ".ToList()" problem is? I'm very curious.
Make sure you document all of this and share it with your boss. If they try and blame you you can just point them to all the complaints you documented.
That Quora thing is from 2014. Since then: TypeScript(*), VS Code, .NET Core. Just puttin that out there. *: 1.0 [announced](https://devblogs.microsoft.com/typescript/announcing-typescript-1-0/) same day as that quora, oddly
I've been in this position, and let me tell you, you'll be OK Firstly, start writing your ideas down, people take more notice when they cant say they haven't seen it. &amp;#x200B; Put everything in no more than 2 pages, call them "Pitches, incremental fixes, feature forward fixes" whatever fits the organisation Use this format Problem,Cost,Fix, Benefit &amp;#x200B; Next put together procedures for code standards and reviews, with formal feedback and measuring pass/fail rate. &amp;#x200B; Next put together a "triage plan" for live issues, stating who should be contacted, how live fixes should go out, and how problems should be autopsied. &amp;#x200B; Now with all this you can put together a hiring plan , and show how to better spend 200 bucks an hour. &amp;#x200B; Now your thinking "Yeah but they'll ignore me" . No problem, you've just demonstrated you can run a department, instigate change, suggest fixes for problems and produce quality documentation. Who's skills are stagnating now ? 
I'm guessing they're misusing 'eager loading' by taking whole data sets into memory up front instead of just the parts that are needed.
Seriously this. You are in a contract with your company and they are getting way more from you than you are from them. The only person that can change that is you, because why would they want to? 
CustomerId
Man, that sucks. My job has honestly ruined my life depriving me of skills, damaging my health, my pay sucks and my work life balance is so-so. Every day is another day I should have quit and every day it becomes harder to actually quit. Don't end up like this, leave now and forget about it because life is too short. 
whatever is already in use. OrderID or OrderId? Consistency is most important. (But Im voting for CustomerId) 
С is the best language to start with, if you want to become a good programmer and not another code monkey who only knows muh WEB and nothing about computers. I personally started with C and now i work as C# developer, knowing C helped me a lot with grasping advanced C# concepts and writing better code in general (not forgetting about performance while also using high-level concepts and abstractions)
I vote ID. “Id” can also refer to the part of your personality that is animalistic and uncontrolled. Perhaps Customer Id could be for those jerks that treat employees like crap just for doing their jobs. Or that person that won’t tip at a restaurant. 
Having worked in management positions I'm sure the people at the top would want to know this. They people at the top are blind and you are their eyes and ears. I am sure the this NFP has a CEO. Send him pretty much what you have written here and tell him you want to rewrite it in something like Umbraco 8 or you are gonna leave.
Structs are one kind of type classification. Classes are another. They enable you to organize your code and keep related data and behavior bundled together. Classes and Structs have different semantics though. Keep reading and you learn about them. Just sticking all your data and methods into your main class is a terrible way to organize your program.
If ID is an acronym it should be uppercase, if Id isn't it shouldn't be. It's somewhat up to interpretation so you will probably come across both, remain consistent with what you are working on.
Right on the money. 
If you're doing React work on a headless CMS then you're at the forefront of CMS development.
so in theory i would use multiple structs if i had a program that had a significant number of variables even after simplification of the quantity of variables, and these would be grouped together based off certain processes where they may be involved together or even data types/structures? for example a struct containing integers, a struct containing strings and a struct containing arrays?
Visually ID stands out better IMO despite it not being “grammatically” correct it is what it is called IRL so why not use it so. 
He means “static” typing.
Well a struct or class usually represents a 'thing'. Pretty vague but let me give you an example. public struct PersonInfo { public string FirstName { get; private set; } public string LastName { get; private set; } public DateTime DateOfBirth { get; private set; } } From memory, structs are mostly used to represent something that doesnt change (or in my example, unlikely to change). You could use this to store a list of different people. Someone else can probably add a lot more information than I ever could, but I just wanted to give a rudimentary example.
Some general advice, speaking as someone who worked at a job that they grew to detest very quickly - if you are not happy, start looking elsewhere as soon as possible. I spent over a year working at a gig that started throwing up red flags - evidence of a toxic environment - literally weeks after I joined, and I should have called it quits then and there. Instead I laboured on for over a year in the vain hope that things would improve over time, and that was without doubt the most stressful period in my career so far. I dreaded going into work in the morning, and I went home tired and unhappy every evening. At the end of the day, your own well being should be your top priority. One of the perks of being a developer is that we have the luxury of being in very high demand, so don't hesistate to take advantage of that and jump ship.
customerId or my linter gets angry
A good example for a struct would be if you have an X and a Y coordinate representing a pixel on the screen. You could have two separate variables or fields for that, but _since they represent a single, logical piece of information_, they can be grouped into a class or struct. Since there are only two integers, and they can be made immutable (i.e. you can’t change its values, you can only do operations that result in new values, like with operations on numbers), a struct would be a good candidate. See also here: https://stackoverflow.com/a/3943154
The way I see it, applying for a new job is also a skill that you need to develop. So look at it from the positive side and regard your current situation a great starting point in learning how to become a master in applying for a new job! Do not hesitate, or be afraid. Just go and find a new job! Also, when doing the interview you can very well use your current situation as the motivation for finding a new job. Just don't be too negative about it. Just say that you like to have a working situation where you feel that you will be able to solve most requests. This will filter out any employer that has the same bad situation as your current one. 
`Ad` or `AD` for `Advertisement`?
.NET Core web api
Blazor is not production ready, but well worth checking out if it's not a mission critical project (i.e paying customers, which it sounds like you won't have). You could also look into Razor Components, it's effectively Blazor but server-side - imo right now Razor Components is the better option, it's easier to debug mainly, you can put in breakpoints and step through your code like any normal .NET application. MVC is fine but a bit out-dated, if you want to stick with pure .NET then it's your best option right now if you need something with a guarantee of stability. It's also going to have the least steep learning curve. The other option is using a WebAPI back-end with a SPA framework for the front-end, something like VueJS, that imo is a better architecture in general, and it completely de-couples your back-end and front-end, and you'll learn a lot about writing good REST apis, which is a skill that is going to have a LOT of mileage - the downside is learning two completely different technologies, and Vue and other SPAs have quite a steep learning curve in general. I'm personally using Razor Components for my current side-project, which i'm absolutely loving and becoming a big proponent of, so i'd encourage you to at least do some reading/tutorials and see what you think. Again, if it's not a mission-critical project it's absolutely fine, albeit pre-release.
Python accepts semicolons at the end of statements. 
Class =&gt; Reference type, stored on the heap, which is basically a "blob" of memory managed by the garbage collector. When you create a class, the Garba collector allocates a memory for it. Struct =&gt; Value type, stored on the stack, along with your local variables. &amp;#x200B; There are several differences, [here](http://net-informations.com/faq/general/valuetype-referencetype.htm) is a good explanation about the difference between value and reference types.
Yield should only be used if you want delayed execution. It has an overhead and can cause nasty bugs if you are not careful. 
I can't get a gauge on how big your company is, but if you're interested in improving things, maybe consider pushing your concerns up the food chain. don't go behind your boss's back, include her in it. but my company is about 300 people, and I can go to the CTO or CEO if there are issues like this. C-people care about dollars, and what you're describing is lots of excess waste and you likely have several ideas about how to save some significant money. go ahead and start looking, too. that doesn't mean you will leave, but at least get an idea of what's out there. and let your company know. something like "I don't want to screw you guys, but I can't work under these conditions."... good luck! 
Another example would be the [DateTime](https://referencesource.microsoft.com/#mscorlib/system/datetime.cs) and [TimeSpan](https://referencesource.microsoft.com/#mscorlib/system/timespan.cs) struct. Thanks to those structs you can do things like this: var startDate = new DateTime(2019, 01, 01); var endDate = new DateTime(2019, 03, 04); var daysSinceStart = (startDate - endDate).TotalDays; Console.WriteLine(daysSinceStart); Instead of: var startYear = 2019; var startMonth = 01; var startDay = 01; var endDay = 2019; var endMonth = 03; var endDay = 04; var daysSinceStart = // some complex logic to calculate the number of days between two dates
Sorry to hear about your frustrations. I think many of us have been there at some point, probably early on in our careers. I'm not sure if you're asking for advice or not but I will try to give you some anyway... don't put too much pressure on yourself because of timelines that are set by the company! If the code is a mess, you're the only person handling all this stuff, and the help you have is not actually helpful, then things are going to be late, be poor quality, etc. The company needs to understand this. If they want high quality code that ships on time, they will need to hire high quality help. It is not your job to pick up the slack for their lack of hiring effort. Work your 40 hrs a week at a steady pace and when things don't get done, they don't get done. That is the indicator to them that they should be hiring more people to help. Take it as a chance to learn how to refactor a crappy legacy code base into something manageable and then when you find a better position, feel free to take it with that knowledge.
Thanks a lot for your input. I'll checkout Razor and MVC to see which one might be the better choice for the job. I'll try to keep it pure .NET without VueJS.
I have had arguments with people who actually believe Java's generics are better than .NETs... idk man, the koolaid must be tasty.
Later today I'll get the 3.0 tool chain up and running and try to reproduce. Any suggestion to get around the allocating from stack causing wrong answers? Or is that fixed in 3.0?
&gt; Struct =&gt; Value type, stored on the stack, along with your local variables. Stored on the stack **or** the heap.
So it sounds like I can fix the incorrect result by using Vector.Create instead of broadcast. And I already moved the stackalloc earlier in the call chain. But based on that it still sounds like the performance will 33% slower. 
lmao
&gt;Class =&gt; Reference type, stored on the heap, which is basically a "blob" of memory managed by the garbage collector. When you create a class, the Garba collector allocates a memory for it. The CLR also has the option to allocate a contiguous block of memory on the stack, which can be used for, for example, arrays (which are definitely classes). Also, the Garbage Collector does not allocate memory.
&gt; The CLR also has the option to allocate a contiguous block of memory on the stack, which can be used for, for example, arrays (which are definitely classes). True, but the OP is obviously a newbie in these stuffs, so making stuffs mor complicated not a good idea. &gt; Also, the Garbage Collector does not allocate memory. [Yes it does](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals): &gt; \[...\] The garbage collector allocates and frees virtual memory for you on the managed heap. At least as far as I know, the garbage collector handles the managed heap, and the objects in it.
People argued strongly against var in C# too, but it turns out it's fine cause the compiler is wicked smahrt.
They look similar, but they behave slightly different, in ways which matter in *some* situations. 1. To reduce allocations. It is quicker to allocate things on the stack, vs the heap. This is ideal for data processing/encoding/etc. 2. They are passed by value, not reference. Think of situations where you need to pass a structure into a method. Within that method, you can be certain that the fields/values aren't being changed. That is because you have a copy of the struct (with same values). If you used a class, the caller could be mutating that value (from a different thread). It is a good way to "snapshot" your data. I'm sure there is more, but these are the reasons I choose to use them.
Huh. You're totally right. In my head, it doesn't make a lot of sense for the GC to be managing the heaps, but it apparently does.
Structs are value types allocated on the stack. This has a few semantic implications and a lot of memory implications that require a lot of low-level understanding of .NET memory management to grok. 90% of C# developers go an entire career without encountering a situation where "use a struct" was the solution to a bottleneck. The other 10% vastly overestimates how many people write code at their scale. But I also smell in your question the hints of a related, important question. It seems like you'd also ask, "What's the point of classes?" Classes are how C# code is organized. If you put everything into one file, you can only write code up to a certain complexity before even you get lost within it. Programs are easier to maintain if we group methods and data that are logically related within individual classes. The current software engineering trend promotes the unintuitive idea that a program with 100 50-line classes is easier to understand than a program with 5 1,000 line classes. Don't worry too much about 'how to split them up' immediately. If you're just starting, it's better to focus on "making it work". Once you're pretty comfy with C#, I strongly recommend the book *Working Effectively with Legacy Code* if you're pursuing a career. That book covers techniques for converting "bad" code that isn't properly separated into "good" code that is. Which is exactly how you learn to split things up properly! In fact, 15 years into my career, sometimes that's still how I get to the "good" code. I just write it the "bad" way first since I know it will work, then progressively tear it apart until it's "good".
Well, string in .NET is a special case; it's a reference type that behaves like a value type. So it's not like java is wrong here, it's just .NET operators overloads made it silly not to make it standard.
Already did, but they are kind of silent =/
Scripts, good. Apps, bad.
I'm living through this as a beginner now - all the things that is to be learned, it's not easy to distinguish between what is deprecated and what you're expected to know. Plowing through .NET libraries and documentation, much of it feels like a graveyard of wasted potential. Microsoft overengineers some solution that that from the outside looks incredible, but no one uses it because programming these days is just sending json back and forth.
Removed: Rule 3. You might have some luck at /r/unity3D or the [official forums.](https://forum.unity.com/) If when you say "Step" you mean an "STP" file, then maybe you can look into general file format converters.
The QML/.NET Core integration is stable. Me (and others) are using it in production on embedded devices. https://imgur.com/a/rZwkOy2 https://github.com/qmlnet/qmlnet PS: I'm the author. 
There is also Qml.Net: https://github.com/qmlnet/qmlnet
IMHO Java is "wrong" to allow a fundamental type like String behave in a non-intuitive way.
&gt; stay at your current job, and do not complain because it is your decision after all. Not saying this is OP, but - Frequently people who stay in a 1 or 2 person "dev shop" do so because, while their pay in salary is low, their pay in ego is high - they love being the hero, the "smart guy" at the office, etc.
Nope.
No, classes and structs represent concepts. The classic examples are cars and animals. For instance, a `Car` class would have data (fields) detailing the features of the car (like how many wheels and doors it has, and its max speed), and behavior (methods) that allow the car to do things (like move to a specified position).
struct foo { int x, int y } array of foo looks this in memory: \[x,y,x,y,x,y,x,y\] &amp;#x200B; class bar{int x, int y } array of bar looks like this in memory: \[pointer to x, pointer to y, pointer to x, pointer to y\] where each pointer points somewhere randomish in the ram of your computer &amp;#x200B; &amp;#x200B; accessing ram is very slow, \~200times slower than your cpu can run. computers get around this by caching contiguous data when you request something. So in the above case, when you access the first x in the array of structs, you get the next few x and ys down in the cpu cache ready to go. &amp;#x200B; in the class case, the next x and y values are likely not in cache, as they are not contiguous. the \*pointers\* are ready to go but you may get a cache miss to get to the actual data, and that will be very slow. &amp;#x200B; so the overall speed in iterating over the struct of xy vs the class of xy can be VERY different. memory use is different too,and amount of things that need to be collected by the GC is different. &amp;#x200B; but, if the struct had many values in it, and you didn't need to use all of those values when iterating, then it could end up \*less\* efficient than using classes. just depends on your data and how you access it. &amp;#x200B; &amp;#x200B;
But an acronym *is* an abbreviation, surely? Acronyms are inconsistent things - 'NASA', but also 'laser'. ID is an abbreviation, but not an acronym or the initials of two words. In the real world, you'd have to show ID to buy beer, or even show id, but not show Id. (Although after beer, your Id may show itself.) Anyway, that's all just waffle. In C#, the official MS guidelines are that two-letter abbreviations (such as ID or IO) should both be upper-case (or both lower-case, in the case of variables such as \_idOfCustomer or ioStream), and that larger abbreviations go camelCase, such as httpException or ftpServer): [https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1709-identifiers-should-be-cased-correctly?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1709-identifiers-should-be-cased-correctly?view=vs-2017) You wouldn't have to go far to find counterexamples, though.
One of those times where the name of something (i.e Garbage Collector) doesn't convey its *entire* scope, unfortunately. I didn't know the GC allocates memory either until reading y'all's back and forth here.
Exactly, for quick scripts and prototypes is really good but I still remember the headaches that I got when I tried to use it to build a feature rich Telegram bot.
Your choice is between MVC, RazorPages and Angular or React coupled with a WebApi
I was about to quit programming after trying C++. I tried C# and boyyyy, it is a really good language for beginners.
Microsoft‘s guidelines recommend CustomerId
Yeah, it's misnamed. It's the *memory manager*. It both allocates new stuff for you and collects your "garbage" and deallocates it. But they didn't call it a "memory manager" because that would confuse people that remember QEMM and the like. And they called it a "garbage collector" because that's what most programmers are going to need to remember about it the most... it collects your discarded references and cleans up after you.
I'm pretty much in the same position as OP, the difference being this is my first job as a software dev. I've had senior developers secretly tell me the place where I work is easily the worst of almost a dozen other places they've worked. Basically, they were concerned that I spent 4 years in college to learn comp sci and this was my first experience, and they didn't think it would be fair if I just stopped programming altogether because of this place. To be honest, he was right on the money despite me never telling him that I was considering leaving it all and going into construction, or that I spent a year going to therapy during lunch because I had singled out a favorite telephone pole to speed into on my commute. But that's beside the point. Anyways, my question is how exactly do you go about finding another job when you already have one? I know sending apps and stuff is a thing, but there is next to no privacy where I work. It's an "open office" where the cubicle walls are only 4ft high. All of the rooms have glass walls specifically so people can see you inside. My workday is 9 to 6, so I HAVE to talk to prospective employers during work hours. And then there is the firm they hire to track "employee data" which is reportedly so invasive they are probably aware of this post right now. The best solution I have without rousing suspicion or getting hammered down is that I try to take calls during lunch while I sit in a strip mall parking lot like I'm a drug dealer or something. How do normal people try to find new jobs while currently employed?
They're not consistent on this: &gt;A special case is made for two-letter acronyms in which both letters are capitalized, as shown in the following identifier: IOStream You'd think that would *definitely* cover "ID", which is almost universally abbreviated that way in the "real world," but no: &gt; Pascal: Id &gt; &gt;Camel: id &gt; &gt;Not: ID
Barely...they are taking away the option to automatically create a UWP project in a Xamarin.Forms project in VS2019.
A lot of universities use c# as the first language, including my own. It is not as hard as C but you can't cheat as much when compared to java.
IO is technically two words where Id is shorthand for identification. 
Linguistically, ID is an abbreviation, not an acronym, since it's short for "identity" or "identifier" :) IO, on the other hand, *is* an acronym (actually an initialism) representing input/output
&gt;But an acronym is an abbreviation, surely? Acronyms are word-like initial-isms. B.A.S.I.C. or M.O.D.O.K. It's passe now to make the acronym itself meaningful and relevant; usually the original meaning is completely lost and the acronym only functions as jargon for a specific specialized audience. Abbreviations are much simpler, shortened by contraction or abridging, by simply dropping letters. Their connection with the lengthier original is usually clear, sometimes obvious. "Fan" for "fanatic," "email" for "electronic mail," "etc" for "et cetera," etc. I would say "I.D." is an initialism but not an abbreviation or an acronym. "Eye-eee" is so common in spoken English, though, that's it's pretty much a word of its own. Written "Id" it sure doesn't look like "eye-dee," so I think "ID" makes sense.
This is one of my favorite C# tech interview questions. Too many programmers just parrot the line that we saw above, that reference types are allocated on the heap, while value types on the stack. Whoever first came up with that characterization did a grave disservice.
An acronym is not an abbreviation. It's taking the first letter of each word vs shortening a word.
Squares are rectangles, rectangles aren't squares ;) Merriam-Webster says that acronyms are a type of abbreviation, but that doesn't mean rules that apply to acronyms necessarily apply to abbreviations as a whole. https://www.merriam-webster.com/dictionary/acronym But I'm sure you can find examples in Microsoft's own source that "violate" the standards, so the most important thing is consistency.
We are really blessed in this industry to have the option of finding new high paying jobs relatively easy. Take advantage of that. I put my foot down long ago and no longer put up with bullshit, I simply start looking when a company starts to give me issues (which we should be doing anyways since it usually results in huge increases in salary).
Yeah, that's my point, all sorts of different types of abbreviation have their own styles, and even they're not consistent. Microsoft steps away from describing what sort of thing they are and focuses on how they're written, and bases rules on that. Then adds exceptions!
my coworkers would say CUstomer_iD
An abbreviation can apply to a word or a whole phrase.
Id
&gt;Linguistically, ID is just an abbreviation, not an acronym That's true. When you say it, out loud or while reading, do you say "eyed", as in "identifier", or do you say "eye-dee" as if you were spelling out the letters, one by one?
IOStream is Short for InputOutputStream, CustomerId is short for CustomerIdentifier, so Id is just logical
https://abbreviations.yourdictionary.com/articles/what-is-the-difference-between-an-abbreviation-and-an-acroynm.html while an acronym is a type of abbriviation it has a specific definition. And since they specifically say acronym I feel my point is correct. But may have been world incorrectly.
Not sure what you're getting at, capitalizing an abbreviation doesn't make it an acronym. Is APT (apartment) an acronym?
&gt; IOStream is Short for InputOutputStream Their guideline is that other initialisms like HTML should be lowercase, though. "IO" is recommended as an exception. I think the most important thing to remember is that any set of guidelines like this will to some extent be arbitrary and not entirely self-consistent. It's therefore a waste of time to pursue perfect self-consistency.
Java is "wrong" because it doesn't allow operator overloading, too. Which is why String behaves in a stupid way. At least they made "+" into a concatenation operator for String... but then they just stopped doing things that made sense.
I don't think that agile is a silver bullet, but properly run developers get a chance to estimate how long things will take and the hour capacity is set at \~37.5 hours/week. I probably make 80% of the average salary in our area, but I have an ear-to-ear grin, 30 days off a year, and a great environment. 
You used SAX for JSON? *boggle* It's literally the "Simple API for **XML**", and is equivalent (more or less) to .Net's System.Xml namespace. If they've added JSON support to SAX, then I'd say Java's a bit more "lost" than I imagined it to be.
&gt; Not sure what you're getting at We all treat "ID" as if it were an initialism in every way that matters. We write it that way, we speak it that way. &gt;Is APT (apartment) It's interesting that you provided this as an example of a commonly-capitalized abbreviation yet (correctly) felt the need to explain what it meant, too. I believe "Apt." is more common, more correct, and more clear. Outside the context of an address label, it's not obvious what "APT" might mean. In contrast, though, in the English-speaking world, at least, everyone knows what "ID" means, because it's so pervasive.
Use a class unless you explicitly need a struct. Off the top of my head, this would be: * When you want to construct arrays of the thing and want fast initialization and destruction * When marshalling data to a native C or C++ data structure and you have to organize memory precisely * When you want to treat an object as if it's a primitive type like int or double
*acessing RAM is very slow* HDD: *Hold my beer*
&gt; Forms ... Swing What? No AWT?! :trollface:
It could have been for xml; I really don't remember so much. It's been a while. But I just remember it being lacking compared to the .net world. I can't imagine java has something as good as newtonsoft at this point, just as an example.
I really don't like the way backer variables work. They clutter up the list code explorer. I Really dislike the underscore (I understand this isn't a requirement but seems semi common). If i am gonna expand it out. I like the look/feel of just using more traditional getters and setters. just a personal preference I guess
Well, this is not compilable code. I can't see originalDog and clonedDog declaration. You are using static code in your classes, it is difficult to read what you want to do. If you want to check reference equality you may use ReferenceEquals method ([https://docs.microsoft.com/en-us/dotnet/api/system.object.referenceequals?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.object.referenceequals?view=netframework-4.7.2)). 
to be honest maybe I just don't like Properties at all. the more I think about it I don't think I like how they just pretend to be public fields. I would really just rather use full on getters and setters and private variables. Seems more straight forward and honest IMHO. 
nope probably some other language completely. or just making it up in my head. 
I guess the point is that arguing over what is and isn't an abbreviation doesn't really get you any closer to answering the question about what form it should take in your code - you can't really define rules that divide symbols into those categories when the categories themselves aren't consistent. &amp;#x200B; &amp;#x200B;
convention seems misleading. In my online research into c# convention it seems to pretty clear that the official word is that underscores should not be used in code you have written (i.e. not in compiler generated code) . But alas the c folk I work with did it anyway
well that is probably true. but that just means winforms is even older. but at least declarative UI is the current standard. Procedural us with out flow layouts is just ugly for anything moderately complex
Ah... so you don't remember details... OK. No biggie. I wouldn't put it past the Java community to do something boneheaded like that, though. "Here's an XML parser! Use it for JSON, because *reasons*!"
I was in a soul sucking dev job once, and finding a new job became my second job after work. It took a few months to find something that met my new, higher, standards, but it was worth it. If you have to take an interview call during work hours, don't feel bad about it. I did the same thing, I know other devs have too, and most phone calls don't last too long.
HDs also benefit from contiguous access :D 
This is the correct answer. It would be nice if we all wrote greenfield applications but most often we are working with an existing code base. Always lean toward consistency with the rest of the code even if it goes against convention unless you intend on making some refactoring commits to bring the rest of the codebase inline with convention. 
In terms of performance: * In local and parameter contexts, they have no GC overhead and are only tracked for their ref type roots * No allocation overhead - stack allocation is basically a no op * Data locality - no need for an extra layer of indirection through a pointer * Easier interop - no object header or type tag, can easily be passed into unmanaged code * No threading issues - pass by value means each pass gets a new copy (except for class fields, managed pointers for byref semantics, and unmanaged pointers, but I'll ignore them)
I always go with Id, but display ID to the user. I use IO over Io, though.
huge learning curve? I mean there is still a wysiwyg editor for xaml. and xaml is far from hard to learn. Its basically HTML. It being old isn't what makes it bad. It's dated procedural UI is what makes it bad. It's not the way things are done elsewhere in the modern world and really makes life a pain in the ass. Exact placement and the inability to edit the raw designer code is pretty awful too. 
That has nothing to do with structs. &amp;#x200B; [https://gist.github.com/Dispersia/fe648ea3ab146da025b8ddfcf48c5e0c](https://gist.github.com/Dispersia/fe648ea3ab146da025b8ddfcf48c5e0c) &amp;#x200B; You can do that just fine with classes.
C# uses PascalCase and camelCase depending of the situation, this will help you: [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions)
 Why would you ever ask that question? The entire point is that C# developers shouldn't need to know that. Someone caring about how the CLR internally manages memory you have no control over should in no way affect their ability to actually write C#.
This was me at every job where I was an IT guy at a non-IT company - about the first 11 years of my career. Working for an IT company changed everything. I'm working just as hard, but I finally feel valued as a person.
Why would you avoid C? At its core its incredibly simple, there isn't a lot to it and doesn't come with the 50+ ways of doing something wrong that C++ does. Sure you have to do a little memory management, but it's not that bad.
Quit!!!!!
Just for making it simple: Console.WriteLine(string.Format("bf01: {0} bf02: {1}\\r\\n", !bf01, !bf02)); this will give the output: bf01: true bf02: true
Wanted to add some performance numbers to this from a program that uses structs. Changing the structs to classes makes the program 33% slower and the program takes 42% more ram. On top of that the program now pauses once in a while due to the GC kicking in.
Dude, in time you have wriiten this post you could have polish/update your cv and send it over to bunch of recruiters. I do not know where do you live but I can guarantee you that you will find new job in software development in no time. Stop complaining, do your job as best as you can and find a new one quick. Do not feel guilty about leaving toxic enviornment that causes you stress and health issues. You do not owe them nothing. Just leave. It is just a job. 
 &gt; m_CUstomers-ID FTFY
* When you have 2 or more unrelated variables that you want to pass around together
I'm definitely excited to see how this shapes up! I'd be super stoked if they would do something like a Fluent Design library to accompany it (similar what Google has with Angular / Angular Material).
It does because it says only capitalise when it's a two letter acronym. Which Id isn't. So don't capitalise. 
1. Designer is absolute trash and shouldn't be used 2. It's not xaml that's hard it's the framework and a completely different way of structuring / writing your code.
I did mention that. 
I'm partial to ID as it stands for identity document. 
Or an acronym meaning identity document. Which is where the scism comes from
C is not really simple, but rather minimal. If you have sufficient programming experience, the minimalism is perceived as simplicity. Most people I talk to want to get in to something where C isn’t really (directly) relevant in most cases. Things like web dev, mobile app dev, application dev etc. If they start out with C and want to pursue one of those things, they’ll almost always have to make the switch.
This is the correct answer and I will fight anyone who say otherwise
Yes. At some point in following tutorials the syntax will start to mentally click. After that the learning curve flattens out for a bit.
No. C# 8.0 will RTM at the same time as .NET Core 3.0. That will be later than VS2019 RTM. 
Not in this context though. ProductId is shorthand for Product Identifier.
4 spaces... I forget too. In case you want to edit.
Your post doesn't include the ref function you seem to have a problem with
Does this apply to .NET Core at all?
&gt;but im a little confused as to why when i perform clonedDog.mutateLimbs(2) it also add two limbs to the limb count of the original dog. how ever if i was to pass the clonedDog as a ref to another method and perform the same proccess, it only adds two limbs to the cloned dog. It shouldn't do that. Are you sure you're doing what you think you're doing? You're only showing us one version of the code. It would be much easier to figure out what's going on (for us AND for you) if you provide the code for the non-ref version and its output and the code for the ref version and its output. How do you know what this does if you're not even sure it will compile?
Depending on the object in question: **Local:** customerId **Field:** _customerId **Property:** CustomerId
Network card: pff, amateurs.
That's a tuple.
It's important because it has performance implications. Boxing and unboxing are expensive operations and can murder performance if it happens in your inner loop.
oRdErId
That's exactly why I'm asking you, why not just expand it? I'm make it even easier. Type propfull, press [Tab] twice. There's your full getter and setter, modify at your leisure. Job done.
this is gonna sound bad/petty. BUT. because I don't want to use a _var (underscore prefix) and that is the established convention in this code. I see them and I just get this horrible angry feeling in my gut. so if I could not expand them then I could legitimately get rid of all the underscores and make my day better :-P
I was going to say ID because of the acronym aspect, but System.Io is a good counter, as is System.Linq and System.Sql, or wherever the hell those are. You get the idea.
Living up to that name there mate. All that time spent getting triggered by underscores could be spent coding, oh what a world that'd be.
Does the GetInvoice method give you a single serialized object when there's only one invoice, but a serialized array when there's more than one? If so, this may work: List&lt;Objects.InvoiceDetails&gt; invoiceDetails = tskSalesOrder.Result.Trim().StartsWith('[') ? JsonConvert.DeserializeObject&lt;List&lt;Objects.InvoiceDetails&gt;&gt;(tskSalesOrder.Result) : new List&lt;Objects.InvoiceDetails&gt;() { JsonConvert.DeserializeObject&lt;Objects.InvoiceDetails&gt;(tskSalesOrder.Result) }; 
So just do it... Lol
Yeah I don't agree with this. First off, if they are truly unrelated, they shouldn't be paired together. Just deal with them separately. Second, even if you meant to say "related," a tuple performs this job just fine. The only reason you would want to use a value type (struct) here is if you want behavior inherent to value types.
Or in registers. Which from the IL perspective is on the stack but from the CPU perspective is very different.
If you care that much about performance then why are you using C# instead of C++ or C or Assembly? You should really only care about real world examples where the performance difference is noticable. If anything, proficiency with profiler use is a lot more important - that's how I learned the art way about the difference between a large array of classes vs structs. I highly disagree that these esoteric textbook/manual definitions are useful as interview questions. Programmers who actually encounter this situation won't parrot this language, and those who parrot this language don't necessarily understand it.
Of course you need to know that. Performance matters.
https://insights.stackoverflow.com/survey/2018/ It has been fairly steady in the stack overflow polls.
Optical media drive: *laughs with lasers*
I didn’t know you could pack 3 and more values into a tuple. Need to refresh my knowledge on the new features...
Terrible answer. Classes and structs in C# are fundamentally different, not at all like C++.
Mars deep-space connection: *Laughs 20 minutes later*
* A bulleted list needs * Two return characters * Between each list item
What exactly did I say that was incorrect? I pointed out that they have different semantics. The fact that they both provide similar functionality, as far as code organization goes, is an obvious fact. I never said that they were interchangeable.
The correct answer is `CustomerKey`. This completely eliminates the Id vs ID question and is more accurate since it is a database key, not a identification number. (Which is important when you need both.) 
That's why they created FXCop and added a rule to prevent new code from making the mistake of violating their naming conventions. 
Despite all of the "WinForms is dead!", "WPF is dead!", and/or "UWP is dead!" bleating around here, there sure is a pretty prominent place for all three of them in that brand-spanking-new official tutorial...
nice explanation, no bs
I'm not the one using it as an interview question. I don't use anything language specific when I interview people because I am more interested in how the think and operate than the trivia of a language. I'm just stating that C# developers should know about the subtle problems that can emerge when using structs. Just because you are using C# doesn't mean that you suddenly stop caring about performance. There are many reasons to choose C# over C++, none of which mean you should completely ignore performance. For the most part, I only care about boxing as a performance problem when it is in a tight loop on your critical path. Thankfully, it is also the type of thing that shows up prominently in a profiler when you have a performance issue.
Thanks for the downvote. See for example: https://softwareengineering.stackexchange.com/questions/92339/when-do-you-use-a-struct-instead-of-a-class https://www.dotnetperls.com/struct-versus-class (incomplete but describes behavior difference between classes and structs and also explains why classes should almost always be preferred) https://stackoverflow.com/questions/13049/whats-the-difference-between-struct-and-class-in-net https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct And many others. You describe structs and classes to essentially be the same. This is objectively *wrong.*
Lol, what the fuck are you talking about? I did no such thing.
The differences are more than just semantics.
Okay cool, but since the topic of this entire chain is interview question it's only natural to assume you followed the topic of the conversation. &gt;Just because you are using C# doesn't mean that you suddenly stop caring about performance. I never said this.
&gt; If anything, proficiency with profiler use is a lot more important And then the profiler shows that the application is constantly busy with garbage collection, because you allocate million of tiny value-like objects that would better have been structs. And then suddenly the difference matters again and needs to be understood by the developer. There's a reason why the development teams behind .NET Core and ASP.NET Core focus heavily on this point, and why recent C# versions introduced a lot of features to reduce allocations.
&gt; Just because you are using C# doesn't mean that you suddenly stop caring about performance. It does, for me. C# is plenty fast. If I'm doing something super-speed dependent like electronic stock trading, then I choose a different language cause I'll lose $millions when the garbage collector kicks in. I'm not sure I've *ever* worked on an app where C# was a significant contributor to execution speed. Network, yes of course. Database, *hell* yes. Not the C# code.
Would love to hear your podcast. But can't find it on my podcast app (pocket casts). Only listen to podcasts while driving. 
I fully agree with understanding boxing and unboxing, but that does not mean you have to know how the CLR is going to transfer from stack to heap (and really if you are given an opportunity to box in a performant critical area, you've already messed up). &amp;#x200B; Knowing not to allocate unneccessary objects doesn't mean you understand how GC is trying to clean it up, is all I'm trying to say.
&gt;And then the profiler shows that the application is constantly busy with garbage collection, because you allocate million of tiny value-like objects that would better have been structs. And then suddenly the difference matters again and needs to be understood by the developer. Thanks for repeating what I said. Thanks also for confirming my point: ask about real world scenarios, not esoteric definitions. And also make sure that this case actually comes up in your codebase (it wouldn't have come up in ours if not for specific functionality).
Thanks! Trying to get it submitted everywhere now that the first episode has released (most won't accept it no episodes in list) Should be there soon!
It is not an "esoteric definition". It's basic functionality of the language you use, and you should be aware of the basics. And yes, performance is relevant in my code base.
Erm... You could always use Touple... Besides, why pass around variables that are unrelated 'together'?
This is a mighty set of tools for power developers who want to go for maximum performance, I love it :)
The correct answer is consistency with the existing codebase. Otherwise, when I go to the liquor store, I have to show my ID, therefore I store the CustomerID.
ASP.NET Core web api and a javascript framework is your best "state-of-the-art" at the moment in my opinion. React, Angular, or Vue are the big 3 JS frameworks.
Great link. thanks. I don't get it though. [Removing Java](https://trends.google.com/trends/explore?date=all&amp;geo=US&amp;q=C%23,JavaScript,Python) from your selections makes it possible to see the trends for the other three. Interest in C# peaked in 2005 with 59 (somethings?) and is presently at 20. As expected, Python is ascending. I *do not* comprehend JavaScript's decline from 99 in 2004 to 27 now -- not when the web is surging and JavaScript is the language in the browser (and node). It makes me skeptical again about what the hell the trends mean?!?! 
Following the c# style guide it should be Id. The reason why it is like that it's because Id is not an acronym but an abbreviation. It's IOStream because IO is an acronym.
Learned something new, thanks!!
Java is like C# only with like half the features. 
e for exception!
The 2018 poll has C# at 34% popularity. It was also 34% in [2017](https://insights.stackoverflow.com/survey/2017). This poll: https://insights.stackoverflow.com/survey/2016 Has C# at: * 2013: 44.7% * 2014: 37.6% * 2015: 31.6% * 2016: 30.9% That's a pretty precipitous decline. I guess the 2017 and 2018 34% means that C# made a minor comeback (because of Core?). I'm glad it's not still declining.
ID is an acronym for Identification Document. 
I've read that three or more letters should be Pascal, and two or less should be All-caps, such as IO, UI, etc. Id apparently is the exception to the rule. Personally I think it just looks better as "ClientId"
It's not generally considered good practice as far as I know though
I might be mistaken, but you couldn’t use more than 2 values/objects in a tuple prior to c# 7. Besides, tuple is a class itself, ValueTuple was also introduced in C# 7. By unrelated values I mean, for example, if your method needs to return a certain value plus some meta information for future processing, storing. Sometimes you need it, sometimes you don’t. 
Disagree. The job market is booming right now but unless your mental health is such that you really can't carry on there I think it would be unwise to quit without having another job lined up It weakens your negotiating position, adds pressure to accept another job that maybe isn't quite right and may lead to a longer period of unemployment than you initially anticipated. My advice is to just flick your linkedin status to "open to opportunities" and let the recruiters do their thing. They're annoying most of the time, but when you need them they're pretty useful
otherwise
I think from what he described, his mental health is quite near of a breakdown. Only he knows whether his financial condition is good enough to stay without a job for a while vs. his mental health is bad enough to quit immediately. One factor I can anticipate however. From what he describes he knows his stuff around SW development on a above average level. It won't take long for a new opportunity to arise. Being without job also opens possibility to prepare better for interviews. And foremost it clears his mind and he can regain some self-value again. 
Up to 8, then you start nesting, and questioning your life choices...
Yeah, I got an invalid url when I tried to add the [https://www.dotnetbytes.fm/rss](https://www.dotnetbytes.fm/rss) url to my podcast app (Podcast Player for Android) I'll wait a few days and see if it's just a propagation issue. 
Operator Overloading is planning to be worked on after Value Types are added to the language. As to whether it will make String's more intuitive, I can't say.
if you are interested in learning more about SIMD, I did a talk for a Rust group a while back that will get you up to speed. While the talk uses Rust, the intrinsics are the same (it is hardware instructions after all!), so the knowledge is 95% transferable. [https://www.youtube.com/watch?v=4Gs\_CA\_vm3o](https://www.youtube.com/watch?v=4Gs_CA_vm3o) &amp;#x200B; Really looking forward to this new capability in .NET, the performance gap between C/Rust and F#/C# will get very small.
Do you have more details? It's hard to understand what you are asking. * What's in the file? * Where are the variables? * What are you doing to the variables? * Why do you need CodeDom?
You should still care about performance in any application, even if you aren't doing fintech. The difference between an operation taking a second versus an operation taking 100ms is very noticeable to a user or to how much you have to pay for hardware (real or virtual) to handle your server-side load. Boxing in a tight loop can lead to that performance hit. As for language choice, I've seen fintech applications in Ruby and Python. Heck I've seen some in JavaScript. C# would be fine, especially with the concurrent and server background garbage collection modes enabled. Profile when you see a problem. If there isn't a problem, there is no need to profile. The most common language specific issues I've seen are: 1) `string.Format` only takes objects as a parameter. So passing a primitive will implicitly box it to an object. You can avoid the boxing by invoking `ToString` yourself. This is most dangerous in a loop and I've seen it when aggregating and logging the results of many network calls within an orchestrator component. 2) Building up a string by using strings instead of `StringBuilder`. 3) Improperly sizing collections when first creating them. The expansion operation when something like `ArrayList` or `ArrayList&lt;T&gt;` needs to grow is O(n) where n is the current size of the collection. So when creating a big collection all at once, you can incur a huge overhead if you don't pre-allocate the collection properly. Same for `StringBuilder`. All of these operation will leave many short-lived objects in the heap. Creating and allocating them takes time and it will increase the frequency of GCs. That said, most performance issues are architectural, not language gotchas and profilers can also show you things like how the big multi-threaded application you inherited is secretly singled threaded because of a single lock everything must go through that is buried deep in the application's guts.
Yeah I mean I can't speak for the OP. I'd just be very cautious. If you have to do it you have to do it. But if you are feeling stable enough to stick it out, it's almost certainly a better option. Slightly biased as partner left her (non software engineering) job last year over mental health issues and it suuuucked for her. Shook her feelings of self worth, her confidence in interviews, made it harder to get another job, lots of boredom. It was almost as bad as the job had been really. She had no choice with what the job had been doing to her but it was a really tough 6 months to get her health back to a point where she could get another job, her offers were probably lower than they otherwise would have been, and she's still feeling shaken now. Setting all that aside though, you'll just get lower offers from potential employers if they don't feel they have to compete with your current setup. r/financialadvice are pretty evangelical on the whole "don't quit without something else lined up" thing and I am with them on this one. Anyway, if none of that sways you - agree to disagree I guess :)
No problem, let me see if I can explain: - The file is a custom configuration file. It has a customized beginning/end of file, and each line is a configuration line I would like to pass over to my variables - The variables are in the class, the custom configuration file has the names of the variables exactly - I am taking the "values" of the configuration lines, and applying them to variables, per line - Not sure I need CodeDom, but all answers are pointing that way. So OK, let me state that there are currently 4 lines in my custom configuration file. Within my `foreach` statement, it checks each configuration file, and creates a line I would like to execute. example, the `string variableSet = variableName + " = " + variableValue + ";";` line essentially makes `variableSet` look like: `variableName = variableValue;` or, actual example: `titleBar = "Title Bar Text";` The only reason I'm wanting to run the string as a command is because the string changes for each `foreach` loop for each line... so I want to execute each line, holding variable name/value that I want to declare/assign values respectively. Is... there something super simple that I'm missing to execute these single lines of c# buried in a string?
Interesting - first issue I've had/heard with the RSS (I've submitted it to Apple, Google, Spotify, and was able to add it directly in PocketCasts. &amp;#x200B; Please let me know if you aren't able to get it at some point - I'll do some more investigation and see if theres something special about the way the Podcast player handles RSS.
You completely miss the point.
You make your own params class is what you do...
struct\*
Yep, unless the method in question is publicly entangled with lots of consumers. By which time it's too late and time to create `SomeMethodEx` (I was gonna say 'or a struct' but yeah boxing...)
Depends on what it is. With tools like XAML Pad/Kaxaml in the past for WPF, I did most prototyping by hand there and then copied it into VS. Or there's the live edit for smaller tweaks.
You can reduce the overhead by using a mutable struct as enumerator (like List&lt;T&gt; does) Though mutable struct are weird and usually ***BAD*** practice
Oooo. I like this.
Are you trying to set these variables on 1 large objects or nested objects or what ? Cause if so why not use reflection to access the properties with the correct names
Thanks! As it happens, had to add brackets around the result. Then it worked.
Found it now. Will listen on the way to work tomorrow. 
Awesome, thanks!
My favorite structs are read only structs :)
I'm trying to set the variables within the class. I'm not sure I understand how to use reflection, in this context or at all (I'm green to all of the advanced portions of c#)
That's part of the **.NET Framework Design Guidelines**.
You need to write it as `[m_CUstomers-ID ]`, otherwise the trailing space in the column name is lost. -- Yes, I've seen real code like that. 
Tuples have been around since .net framework 4, see: https://docs.microsoft.com/en-us/dotnet/api/system.tuple?view=netframework-4.7.2 What c# 7 introduces is new syntax, looks like.
Immutable data's trendy, since the javascript kids are all over functional patterns now, maybe structs will come back into vogue? :D
Dear god
C# is really good about maintaining version compatibility, its very rarely something you need to worry about. The Yellow Book covers C# 6 I believe (on 7 now, soon to be 8), but really there hasn't been anything added to the language that is necessary to include in a beginner book. Don't worry at all about it being out of date should you choose to read it. Everything inside is completely relevant. It won't teach you everything about the language, but its a great introduction to learn the fundamentals. 
DON'T! NEVER. EVER. Use the freaking Winforms, gtk#, wpf, xamarin, mfc, Qt, win32, but please stop this madness. 
Very useful stuff, I've been working with them for a while. Biggest shame is the lack of heap alignment specifiers - GC doesn't support more than 8 byte alignment I believe, so using AVX2 is difficult
I was actually thinking about something like this recently. I know it's cool to hate electron these days but everyone said the same of node when it first came out and it's thriving after 7 years or so. I think electron is honestly the future, just slightly ahead of its time. Reductions in memory consumption, increases in startup times, and consumer tech just generally getting better will, I believe, make electron the goto cross platform ui toolkit within a couple years. Being able to use C# for business logic is nice, too. The same works for really any language, which is cool. 
I think the only thing from C#7 that might make its way into a beginner book are Tuples. &amp;#x200B;
The funny thing is that it actually worked. My IDE automatically inserts the brackets even if I don't need them and my ORM was ignoring the trailing space when matching column and property names. It was only when I had to hand write some SQL I realized that the space was there.
Off site tape backup storage: still snoring days later
I don't think your boss is at fault, they are trying to help you by hiring an expensive agency. I suggest getting in the middle road of you like it there ( they don't seem bad) and request a different agency. Because they cause more harm than good. Ask for an additional Dev if it's possible. Try to refactor slowly, while trying to realize reality. You can't fix all of it in a short time. Just face it, your request here means that you care. Now, talk to your boss. Ask for an audience on Friday and when he asks why, don't go into detail. He will think that you want to quit. Explain to him that you have it really hard. That the help from the agency is giving you more work instead of less. And request a change, because it's hard to cope with it. It's not an easy fix, but perhaps you should ask for someone to handle the internal support more, instead of outsourcing the infrastructure. That will also be cheaper. Your boss is already trying to help you, now talk with him/her.
Great so now I just replace all of my classes with structs!! I think you need to be careful when stating such numbers without code examples in a beginner thread. In a pass-by-reference/pass-by-value or allocation code example/benchmark the values won’t be like that.
I'm not quite sure what you are trying to achieve here. You might be over engineering and blinding yourself (and us) in the process. Inferring slightly, it seems like you have a config file that had a list of keys and values or Key1="value1"; Key2="value2"; That may be terminated by a semi colon or just a new line?? Am I on the right track? If so are the keys known keys? Ie are they from a fixed set of keys? Are can they just be made up and expected to work?
I will also listen tomorrow on my way to work. The next episode of the Office will be bumped 
Blinding myself and over-engineering seems to be my forte... The config file with keys and values are terminated with a new line. The keys are known keys with default values. The custom config file was made to be "easier to read" for anyone who wants to enter data manually. The purpose of this config file is to be read during installation. If the file exists, replace values in file with values in app.config. So, ultimately, I am trying to use a completely customized "Config file" that is just "made up code" for a lack of better terms, being read by the program on install, and replacing values in the XML app.config file with the values in the custom config file. Hope this helps at all, I'm still lost and about to approach it completely different to avoid being stuck. Been working on this specific project of "read custom configuration file on install" for a while, and now I'm stuck at this line, it seems.
First of all, I don't think that companies consider your experience on tools (yes programming languages are tools) but they examine your problem solving skills. In other words, they examine your algorithmic skills. &amp;#x200B; But if you ask how a good C# programmer looks like, consider the following technologies: * **SQL server**, usually you will see C#/MS SQL Server and Java/Oracle combinations * **ASP .Net Core** for web APIs development * **Linq** * **Entity Framework** * **NUnit**, which is a testing framework * **NSubstitute**, to instantiate mocks * **Autofac**, for dependency injection * **Powershell** &amp;#x200B; Apart from the tools you should have a general idea around some OOP topics like the: * **SOLID**, **DRY**, **KISS**, **YAGNI** * **Dependency Injection**, what is DI and why is it useful? &amp;#x200B; Moreover, it's good to take a look at: * **Microservices** * **Docker** * **Vagrant**
Yea in C there is something like 30 instructions, where as in C# there is like 100. In that sense C is simple, but I think that ironically makes it harder to approach as a beginner. Because higher level abstractions like classes, threads, or various data structures aren't supported at the language level, people create roll their own implementations far more commonly than in a language like C#. The fact the standard library is so small means there ends up being hundreds of different "general-purpose libraries" that people use to accomplish the same things. In C# you'll see someone writing LINQ statements and know instantly whats happening, whereas with C there is a high chance they are using some library or have written some construction of their own you have to dissect before you can understand. Not hating on C or your comment, just that I think its simplicity as a language doesn't make it simple. 
So there will be some details to iron out but I think there will be options from the simple and hacky to elegant and complicated of visa versa. I think you could just parse the file into a dictionary of string,string. You can first initialise the dictionary with all the keys and their default values. Then you read each line of your config file, split on the Equals and take the first part as the key into your dictionary and the second as the value Does that make sense? Have I missed a vital requirement? 
I thought AD was Active Directory?
What you write is quite reasonable. In the end it's his choice. We make here some heavy assumptions. Only he knows how it really is. I wish him lot of strength to endure and wisdom to decide.
No that actually makes perfect sense. I came across a Dictionary resolution during my searches, but I just wanted to make sure I wasn't missing something simple like System.ExecuteStringAsCode(string). I think that will be the ultimate answer to my question... "Yes, it is only possible to compile a string and run it as a command" I need to approach this differently. Thanks!
I love C# and Visual Studio, but [Intellij IDEA](https://www.jetbrains.com/idea/) is pretty amazing. It provides top notch support for all sorts of languages through plugins, and i couldn't agree more with what you said. If you aren't happy with any of the tools you can just write your own with the Intellij Platform SDK, and many of the base features of the IDE are actually just plugins themselves you can browse the source for to learn from.
&gt; wasn't missing something simple like System.ExecuteStringAsCode(string). This is an awful, terrible security hole and you're better off doing everything you can to find alternatives. You're much better off trying the suggestion of parsing into a dict if you can manage it. Also assuming you *have* to use this custom configuration style instead of something more common like JSON or XML.
Not sure if trolling or not
Ready? 3..2..1.. FIGHT!
[https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/zzdt0e7f(v=vs.85)](https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/zzdt0e7f(v=vs.85))
Go through each line, parse out the variable name and variable value. Then retrieve the property on your class via reflections and set its value. Psuedocode: var obj = new ConfigClass(); // contains TitleBar, etc. public string properties foreach(var line in file) { var name = ParseVariableName(line); var value = ParseVariableValue(line); var prop = typeof(ConfigClass).GetProperty(name); prop.SetValue(obj, value); } https://docs.microsoft.com/en-us/dotnet/api/system.type.getproperty?view=netframework-4.7.2#System_Type_GetProperty_System_String_ https://docs.microsoft.com/en-us/dotnet/api/system.reflection.propertyinfo.setvalue?view=netframework-4.7.2
This is a great example of how ORMs can be awesome and horrible at the same time. They hide shitty design like this
Yeah that's what someone else just mentioned I should do (Dict) Yeah, I'm really just trying to grasp the concept of code in general, so I'm learning about "don't do that"'s along the way. I would prefer JSON, but I don't think there is a built in method for JSON, and I've already parsed out the config file, just need to feed the variables into the Dict and go from there. I'm still learning... :)
https://www.nuget.org/packages/Newtonsoft.Json/ Even Microsoft uses it (if you have any recent ASP.NET code it probably came bundled with it)
This is part of the reason I'm adding to my ORM so that I can use it as the basis of a database analysis tool. There's lots of DBA-centric tools, but I don't think anyone is making a DB tool that helps developers find and fix design problems.
While there are 'running it as code' options they are over complicated for this useful case in my opinion and you also have the security concerns of running unknown code in your system which is a big security hole that takes time and effort the ensure it is plugged. But just for info there are options using the Roslyn compiler API which I think has pretty much replaced CodeDom and also a slight curve ball is CSX which is like c sharp scripting files which could work. But like I said I think all of that is over engineering and leaves lots of security issues 
Won't the compiler just inline the function or you can aggressively inline it to avoid the duplication of a struct?
What I keep waiting on are actual stats that show functional software is easier to develop/maintain (for some subset of things at least) without significant performance penalty. Instead all I ever read is how it's mathematically nice...
You can ask C# to inline, but you can't force it to. Surprisingly small functions don't get inlined sometimes, and inlining behavior can change with different JIT versions so it isn't something you ever want to count on. But yes, that *could* happen. You can also pass a ref to the struct to avoid copying. 
Thank you for this! I am going the JSON route on my next project for sure. :)
$5 No
I guess I am more amazed by his lack of using previews. Which it seems the tools you used actually provide. 
So glad i chose C# as my main programming language. Only gets better and better. My only dream now is to be able to export native aot compiled binaries for all platforms, videogames included. 
I have been using DevExpress Reporting for the past few months. It's expensive but so far it's working quite well. All reporting tools work pretty much the same but I haven't run into any situations that the tool doesn't support (so far). There aren't really any good tools for ad-hoc reporting. I generally try to talk my clients out of that requirement. If your back-end is SQL Server, you could also look into SQL Server Reporting Services.
Of course it's on Medium...
Yes do that, that way we probably will soon need terabytes of ram pushing us into a new age or computing! 😂
 You need to setup a multi tenant database schema. This tutorial should get you most of the way: http://ericsmasal.com/2018/05/30/add-multi-tenancy-to-asp-net-core-identity/
&gt; GC doesn't support more than 8 byte alignment [yet](https://github.com/dotnet/corefx/issues/31787).
Ooh, this is cool. I've always only used React coupled with Electron. I've toyed briefly with the idea of tossing C# into the mix, but this is way more than just toying.
Yeah. It definitely is popular to hate on Electron, but it's also really ubiquitous. I mean we have Slack, Discord, VSCode, just to mention a few. Honestly, they're not that problematic either. Discord takes up around ~140MB for me. I'm sitting on 16 gigs. RAM is dirt cheap, in 2019 there's really no excuse to build or get a rig with only 4 gigs. We're not in 2008 anymore.
As someone who is just starting out, can someone explain why this is bad?
So yeah, it was just propagation lag. It works now
How is this different than Vector&lt;T&gt;? https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector-1?view=netcore-2.2
No, it’s still pretty popular to hate node. The ecosystem is an absolute cesspool. 
Electron is a RAM guzzling machine. The nice thing about it is that it’s incredibly easy to get a desktop electron app to look just like your website, however, the cost is dreadful performance. 
Imagine you want to build a cross platform desktop application with a GUI. The classic way to do this is to use a toolkit which allows you to build and place components and attach interactions to these components. The toolkit takes your code and turns it into lower level code that renders UI elements on each of the platforms. Gtk, wpf, and Qt are pretty popular for this! Of course, these all come with varying levels of tooling as well as their own varying learning curves and sometimes there are bugs in weird parts on certain operating systems, but that's just software, you know? But... Every web developer already knows one way to build and place components and attach interactions to them: HTML! And we don't need to build a rendering system for html, Google already did that: it's chrome! So electron basically bundles parts of the Chromium browser together with some extra APIs that you generally need for desktop applications (like menus, interfacing with the file systems, etc), and then you just wrote code just like it's a web app, but it's a desktop app! This is awesome for businesses who want to write a desktop application, have a number of developers with experience building web apps, and don't want to invest time and money in either hiring new people or training current developers on a new toolkit. It's also great for hobbyist web developers to be able to build desktop apps. It also has the benefit that you can share almost all the code between the desktop app and your web app (slack, for example). But.. As with all things in programming, there are tradeoffs. The biggest tradeoff is that there is a lot of overhead in basically launching a new chrome browser with your application. Compare an average electron app (say, Discord) with an average native desktop application and you can definitely feel the difference, even on really fast machines. I personally believe that these complaints are exaggerated, however. There are also electron applications that are shining examples of greatness: VSCode, for example. It just goes to show that, as per normal, good developers will produce good quality and subpar developers will produce subpar quality, and electron is just the next in a long line of tools that allow more developers to release a specific class of applications, and thus we get to see an influx of subpar quality. 
I'm glad I picked f# for my main programming language too
Holy this explanation Batman. This was worded amazingly and such a great description of everything. Thank you!
I.D. stands for identity document
Vector&lt;T&gt; is a leaky abstraction over multiple platforms with limited usability. It's never trivial to port existing SIMD code from other languges supporting real intrinsics (eg. because Vector&lt;T&gt;.Count is architecture dependant, missing elementary intrinsics etc.) The new SIMD intrinsics are mapped to platform instructions in a direct and transparent way. It's kinda WYSIWYG.
So what's happening to all the code that depends on System.Numerics and thus uses Vector&lt;T&gt;? Is it going to use the new API? Is there any benefit to doing so?
No it doesn't, it just needs an empty line before the start of the list For example * this * doesn't * work * but * this * does
`System.Runtime.Intrinsics` provides low level access to almost all of the CPU instructions and the number of apis is huge, so this is the x86 set: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86?view=netcore-3.0 however they only work on the specfic CPUs they are supported on so you need to check `.IsSupported` of the various types and the Jit will branch eliminate the unsupported paths.
I can't see your constructors call order. if "Main" class requires "Nested" class working, then "Main" constructor should do that work. &amp;#x200B; public Main () { this.Nested = new Nested(this); } 
In this day and age that's only an issue if you either doing a specialized high performance application or are dirt cheap about your hardware, which in that case you're not saving any money by paying for more expensive developers.
I'm still learning so I may be incorrect or misunderstanding, but I like reading discussions and getting involved where I can. Apologies if I'm off base or annoying or missing something. I know you said this isn't your actual code, but what I see in this, it looks like your property names are lower case? So `class Main` has a property of the `Nested` type called `nested` and `class Nested` has a `bool` property called `test`. So if case sensitive and you're accessing those properties of the classes, wouldn't it have to be `Main.nested.test = false`? That's what I noticed after giving it some thought, but I still have lots to learn so may be unaware of some C# functionality. 
But regarding vectors and SIMD, is there any reason to use this over Vector&lt;T&gt;?
Which brings to me to one of my few complaints of Go...
If you are happy with `Vector&lt;T&gt;` and it does everything you want then you should be ok; the new apis allow you to refine it further and open up other hardware acceleration that isn't captured via `Vector&lt;T&gt;`; it also introduces the new sized types `Vector128&lt;T&gt;` and `Vector256&lt;T&gt;` 
Subscribed! Will be listening tomorrow on the way to work tomorrow.
So no reason to port existing code? I assume Numerics will continue to use Vector&lt;T&gt;?
Why do you need both Electron and React? Can't you build a desktop app in just C#?
This isn’t a syntax issue, it’s a reference issue. But thanks for trying, keep learning!
Can you provide your own proof of this or are.you just repeating what you've read? I use discord, vscode and slack. I have 12 gb of RAM and cpu from 2012. My PC is not the best. It all works fine. I don't see any issues with electron
I am building something similar using CEF instead of Electron and communicating with the C# host over the WebSocket protocol. I’d choose something better in a jiff. But modern day front end development has devolved into the lowest common factor between web and desktop and mobile. So HTML it is.
Oh dude... you're lucky to be doing it now... the way it used to be... jfc.. i just can't... 
This post has been removed: spam
Post has been removed: rule 4, posts must be made with effort.
What kind of reports are you trying to make? SSQS, PDF, ect.. ?
O word, thanks for your response. :) I guess my line of thinking, I didn't see it so much as a syntax error but that `Main` did not have an object named `Nested` (it had an object called `nested` with a lowercase n, of the type `Nested`). So trying to call `Main.Nested` would return a null reference (since there's not an object called `Nested`), but calling `Main.nested` would work. Anyway, just wanted to explain my thought there. Thanks very much for the encouragement and insight. If you ever need help with a simple for loop, I'm your guy! Lol. Thanks again, good luck!
iOS always annoys me. IsiOS or IsIOS uhg
Meh, even with RAM abundance that's not the only drawback to Electron. The thing it does worst is abuse CPU usage - Slack can take a ridiculous amount of CPU time when you're using it and worse yet, it stays just *barely* active enough in the background so it eats through your battery too (if on a laptop). That's the problem Electron will always have. Sure, it's easy to develop when you have such a massive amount of already written code at your fingertips, but then a simple messaging program takes an absurd amount of resources to do what a single core pentium chip from the nineties could do on IRC.
Sub'd
You really like lists huh?
Sorry, I meant to get back to you earlier. There are a few ways to download the HTML from a URL. This StackOverflow post has a few examples how to do so. Once you got the HTML string, you can feed that into AngleSharp or HtmlAgilityPack: https://stackoverflow.com/questions/599275/how-can-i-download-html-source-in-c-sharp
Over in Rustland there's an interesting crossplatform toolkit called [Azul](https://github.com/maps4print/azul), which seems to have a similar idea to Electron, but with less performance impact hopefully. Instead of packaging Chromium it packages Mozilla's WebRenderer. Currently you can only style Azul apps with CSS, but there are plans for an HTML-like XML format for GUIs. As I understand it it only packages the bit you really need, the renderer. Admittedly I've never used Electron myself, so I'm not sure how much of Chromium it actually packages. It's not a C# thing obviously, and it's still in very early stages (UI in Rust is in its infancy in general) but it seems to have the right idea to me.
I fucking love a hot sexy generic list of tuples 
My pick is Vue. Imo a reasonable balance of structure and productivity.
CustomerId in C#, CustomerID in the database :)
Go read a book on databases, Date, Benyon, Codd... You choose.
Did not catch that, so good eye. But still, wasn’t a syntax issue. I guess the reference needed passed through the constructor.
Wow, thank you. Is there a reason why it only works inside of the constructor?
You had me at WebForms. quit. I can relate to almost all of what your saying. I've been guilty of trying to ride out storms etc, I'm doing it right now myself and I'm literally walking up every day and telling myself to man up and quit. I'm part way through a large project and don't want to leave them completely screwed so I'm thinking of giving them a longer notice period (2 months instead of one) to give them a chance to hire and to get some things in order. 
But really, OP should only do this if absolutely needed. I suspect this isn’t the best solution to their problem. 
You should try launching postman. It's an Electron app that can use 600MB just to send one GET request. 
1. Just downloaded it and it's actually 500mb, not 600mb. 2. So? RAM is useless when it's not used. 3. Other apps (like Slack, Discord, and VSCode) are closer to 200mb to 300mb. Postman may be poorly ported.
Electron running Blazor might be nice too
I did some quick benchmarks when the new stuff came in a month or so ago. It's a hair faster, but IMO not worth the effort.
I listened to your first podcast. I liked it. Only problem was that I couldn't hear half of what the co host was saying. It was like he was in the other end of the room.
Perhaps you could totally exclude the assets of the installer, and add a check at startup of your application if the specified assets are there, and then download them from a centralised location? Or add a download step in the installer process?
The whole point of the exercise is to minimize the number of steps necessary. That said, I've resorted to creating my own extension, using it to rename a zip, made of folders and a manifest file detailing how to extract those folders, which shortcuts to create, and which executable to run. The installer app itself, when launched on its own, copies itself to the user's local appdata folder, and launches it. That copy then associates itself with my custom extension. The user then downloads our install package, double clicks it, and the installer opens up, prompting the user to press "OK" or allowing them to change some basic settings based on whether or not I allow it in the manifest.
Been same place. I was headhuntet for awesome new gig and was promised to work with Dotnet core and build lot's of new stuff. When I start I was handed a PHP project even though I had never worked with PHP before... The lead developer on the project had quit his job. I started having panic attacks had to keep the product afloat. I quit my job with no new job in sight. I wanted my personal health to be more important than income. I was lucky and found a new job 14 day's after that had all what I was looking for.
I do a lot of heavy VM work, so an app taking up 500+MB in RAM because it’s poorly optimized is not acceptable. 
Arrays of NVMe drives can sustain higher throughput than DDR4 RAM.
What’s wrong about medium?
Lets say you have related data of different types: struct Dog { public string Name; public int Age; } Now you can make an Array of Dogs, but you couldn't make an Array of string and int without any grouping. Dog[] dogs = new Dog[1234]; So without structs or classes, you'd need two lists: string[] dogNames = new string[1234]; int[] dogAges = new int[1234]; that would be really annoying. But why not just use classes all the time? You can, it's just a performance issue. When you create an array of class-instances, every array element is a pointer to an object. When you create an array of structs, every array element is the struct itself, containing all the fields you defined in the struct. This is very important, when e.g. you iterate over an array and check for some condition. In the class-case, you'll follow all the pointers to evaluate the conditions, which means you'll Access many different memory locations, which is slow (because memory is just slow if it's not cached). In the struct-case, you'll only access the memory area from the array and even in order, which means that you'll have as few page loads as possible. 
Or a closure.
Well, tuples (at least the new ones, which should be used) are themselves structs, so that's not really a good comparison. It depends more on do you want to name the bundle of data or use it ad hoc.
I believe you can only reference this inside a method not during initialization. 
A closure can be either a class or a struct, so that is redundant.
Can you explain it a little bit more, I'm quite confused about what you want to achieve.
Why not just serialise / deserialise the class from xml or json? Unless you have to writing your own parser seems like a pain. If you really want to do it this way you'll need to use reflection as others have said.
This code is not correct. The static methods in animal cannot use this for starters. Can you post your full code to paste bin or something.
The way I have done this in the past is to create 2 new tables: Organisation &amp; User profile. This allows you do a 1:1 with aspnetusers &lt;-&gt; userprofile and a n:1 with userprofile &lt;-&gt; organisation. You then can just extend your user service to include the methods to get the user org etc... The user profile also allows you to extend the user info without messing around with the aspnetusers table allowing you to keep your custom logic seperate in the case you need to migrate to a different auth framework. You can also modify the claims in the login process to add the userprofile id and org id to the claims so that you don't need to look this up everytime. Keep in mind you are throwing the overhead of this to the user and if the user changes organisation (or the value of anything in the claims) they will need to log out and log back in again.
Yeah this would be a pretty massive change! I would be so happy if they did this. But seems like a pretty massive change. Like you said they could generate all possible overloads but that could become huge.
In this [picture](https://imgur.com/a/HB6FRvd), only 3 of the 100 measuring channels are currently shown graphically. Suppose the red line represents the measuring channel "X" and the possible cause of the marked peak (see black arrow) should be determined. Now I ask myself if there is a way how ican find an anomaly in the other measuring channel at the time when the peak starts, in order to be able to determine which measuring channel is the cause (at the time) of the marked peak. &amp;#x200B; All measuring channels are connected by physical laws. Therefore, they have a connection but I do not know how exactly. Consequently, I can not easily program mathematical equations. &amp;#x200B; Therefore, my program should list only potential measurement channels that come as a cause in question. &amp;#x200B; I hope I could explain it better this time.
YAH !!!! 
The exception won't be thrown due to delayed execution. The method won't be run until you foreach the result. So the test will pass.
Fixed, thanks for your feedback! 
Nice
That's certainly odd. I can understand the low level instruction wrappers, but why introduce a new Vector if it isn't any better and if the old one is widely used?
It has mattered plenty on the high traffic web service I work on. Optimization of c# code has saved compute costs and reduced response time, and not insignificantly. I also don't mean "whoops we unnecessarily used an O(n^(3)) algo on a large collection in a tight loop" optimization, but more like "we can cut 7% cpu utilization and reduce total GC wait time by 35% if we use a pools of pre-allocated strings, one below and several above the 85kB LOB size, writing behind the pointer to fix them to a shorter length as needed" and "we can reduce cpu utilization by another 3% if we re-implement string.Join for use in these hot paths."
Would it be possible to take a mean average of all channels in the specified timeframe and then single out the ones above the average? This is very basic but it might give you a starting point. I am sorry if this is not helpful. Your question is a little hard to understand and I forgive that since you said you used Google translate.
Very nice!
Repost: https://www.reddit.com/r/csharp/comments/awj23w/c_8_is_introducing_records_a_new_lightweight_type/ And the title of the blog post is misleading, as it is not yet clear whether it will be in a 8.x version.
The existing Vector&lt;T&gt; API-s will keep function as before. Actually, they got better because there are many bugfixes shipped with .NET Core 3.0. However, it is just very hard to evolve / extend the capabilities of the Vector&lt;T&gt; API because of it's leaky design. To list a few elemental missing features: - SIMD support for integer division - Bit shifting - Shuffle operations So the .NET team decided to step a bit closer to the metal, which is a much better fit for many advanced SIMD scenarios. For this they had to introduce new, statically-sized vector types were, because SIMD registers are also statically-sized for a given instruction set.
My point was any captured variable can be either, which will always end up on the heap.
And that is wrong. Closures can be structs as well, and then they're not on the heap.
InputOutput are 2 different words, so we have I/O, Input-Output, Input/Output, etc. While Identifier is one word, so I is from the ftrst word, O - is from the second word, D is from the same word Identifier :) But actually IMHO it is better to choose any variant and to propagate it anywhere :)
This code was merely an example, I had some coursework that used this. I'll make changes when I next see the script
Sweet, I recently started programming in kotlin and saw they have data classes and really wished something was available in C#. 
Can you post the code you already have?
My understanding is a closure cannot be a struct as it is a delegate type that the cli will turn into an unspeakable class. A value type captured in said closure will then be referenced within that class and thus (most likely) end up on the heap.
I would advise using classes instead of the dictionary inception you have there.
Closures for local functions are structs. https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQBEJinANjASQDsYIFsBjCAgWwAdcIaITYBLAeyIBoATEANQAfAAIAGAAQiAjAG4AsACgRAZikAmCQGEJAbyUTDUtSIAsEgLIAKAJR6DRx2xIS2EgLwSxCxY8dmJABUUGFsPAD4paQBOKzYbH0cAXyUkoA=== private struct &lt;&gt;c__DisplayClass0_0 { ... }
And where are you stuck? What have you tried so far?
The file manipulation pieces can be handled by System.IO. Invoke-RestMethod is done with HttpClient. As for actually executing the downloaded script, I'm not positive on that one. I've never done it so I'll have to let someone else help there. 
So far I've only tried downloading and calling the file. I can download it but then I can't get it run the script.
Yeah I've got it downloaded but can't run it
Have you tried this? https://www.codeproject.com/Articles/18229/How-to-run-PowerShell-scripts-from-C
I love it. I spent about a month on co-op implementing easy POJOs (Java's POCOs) and seeing this coming to C# has me excited. 
"A later C# version" has been introducing Records since C# 7, it seems. :(
It’s like VB and Pascal had a baby... 
I'd go with B. A sounds quite unsafe. If token expired, then it expired, lol.
Yes. This is still pretty pie-in-the-sky, as far as C# goes. They wanted it in 7, but couldn't make it happen. They wanted in 8, and can't make it happen. It might be in an upcoming point release, but doesn't have a targeted release. It's pretty definitely maybe happening someday, real soon now. In the meantime, maybe people could brush up on their code generating skills. This isn't a terrible application for some T4, if you're doing a lot of it.
so planB is the way to go? 
The point of a refresh token, at least for me, is so that I can revoke a users access to the API by revoking the refresh token. Without it they won't be able to get a new JWT to authenticate with the API.
The refresh token is good so you don’t have to keep sending credentials back and forth and store them on a client app. If you have a JavaScript or mobile app client that requires authentication, do you want to store the credentials or ask the user for them every ~5 minutes? The solution there is just to use a refresh token so you can get new access tokens with that and never have credentials stored anywhere except where your back end authentication is.
I mean, you can even control what tokens you've signed, so no need to use refresh tokens. But ofc sometimes you want to allow an other app to write token tokens for your app and that "controlling" approach would require some other things
are you saying after jwt token has been created, the expiration date can be extended? 
Language team say things like: 'We want to introduce records after C# 8.0 but of course everything in this talk is a subject to change' C# devs write blogposts like: 'Records are coming in C# 8.x'
records are evolution of primary constructors from C# 6 so I'd say it is older than 7
You can create new jwt with new exp date and ban previous AFAIK It's impossible to insert new expiration date to the same token because token with new values should be different than previous (with the same secret_key)
Solid, pace is ok, not too slow, informative. Just please fix co-host sound levels, it was borderline too low at times.
&gt; This isn’t a terrible application for some T4 Yes it is? The point here is to encourage people to use stronger typing. Make an e-mail address not a string, but a type. Make weight not a decimal, but its own type. Yes, code generation can get you there, but what people are really looking for is an environment that encourages this. T4 is the opposite of that. &gt; It might be in an upcoming point release, but doesn’t have a targeted release. Technically, the championing issue still has an 8.0 Candidate milestone, but that’s only because it previous had a 7.2(?) Candidate milestone. The feature has been discussed to death for years, and I’m fairly certain — unlike the author of that article — that if we do see it, it’ll be a tentpole of a 9.0, not an also-ran in an 8.x. There’ll be Made videos about how great it’s going to be.
yeah, which means plan B is the way to go
Seen that, still do whatever the code is doing unless you are updating sprocs of course. After all there should be a mapping class/file somewhere handling the translation. 
Removed: Duplicate.
I will be in the same situation. We have "quiet rooms" spread throughout the office which are tiny little glass-enclosed offices where people can take phone calls without making all your cubemates want to kill you. Or sometimes I will go on a walk outside, although it's been too damn cold lately
&gt; Yes, code generation can get you there, but what people are really looking for is an environment that encourages this. T4 is the opposite of that. Regardless, if you're doing a lot of immutable POCOs or wrapper types like that, you build the T4 templates for each purpose once and use them to generate new types from parameterized input. It's obviously not as good as having the feature as part of the language, but it's better than writing it over again, every time, and it's better than not doing it at all. I certainly didn't say T4 is great: it's a pain in the tuchus, and the support for it in VS is practically non-existent. But, if the choice is T4 or nothing, well ... &gt; The feature has been discussed to death for years, and I’m fairly certain Yes, that was the primary point I was making. It's a feature I'm interested in, but I'm not going to hold my breath on it, either. It'll be available when it's available, maybe, and it would be better to invest in alternate strategies for accomplishing the same thing, in the meantime.
Yep. I had a dev write a method that did yield and then immediately used it to do with a call ToList... Had to have a talk to make sure he understood what yield actually does. 
It sucks being a solo dev, I miss having people to learn from. At my previous job, our enterprise architect took me under his wing and taught me almost everything I know about effective systems design. He introduced me to automated testing and inversion of control, pointed me towards Code Complete and the Pragmatic Programmer, and checked my OMG SHINY NEW FRAMEWORK! impulses. Here, I can coast on fumes for weeks at a time if I desire and no one would notice. Part of my reasoning for taking this job was that I would get a lot of autonomy and would be able to set all my preferred practices as policy. But turns out that most people don't give a shit about policy in a 1-man dev shop. Turns out trying to set up a CI/CD pipeline from scratch is really freakin hard, although that probably should have been obvious.
I was supposed to get an assistant of sorts this year who would handle support requests and tickets, but unfortunately that got shot down. There's a lot of politics at play, but that's a story for another day. 
 Dictionary&lt;int,char&gt; location = new Dictionary&lt;int,char&gt;(); string sentence = "Hello world"; var Position = 0; List&lt;int&gt; lPosition = new List&lt;int&gt;(); foreach (char letter in sentence) { location.Add(Position,letter); if (letter == 'l') lPosition.Add(Position); Position++; } for (int i = 0; i &lt; lPosition.Count; i++) { Console.WriteLine($" Lower case L was found in position {lPosition[i]} of the string"); } foreach (var item in location) { Console.WriteLine($"in {item.Key} was found the char {item.Value}"); }
Thanks so much, I don't know why I haven't thought it! 😁
Get out of there!!! :) Seriously, the way you identify the problems, have a plan for resolving them, and deal, with day to day stuff is great. The fact you don't have the resources to do everything is irrelevant if you job hunt.
All of that is familiar. I was told from the get-go this was an MVC project, but when I first got access to the codebase I was not a happy camper. This year I was supposed to start laying the groundwork for a transition to .NET Core and MVC, but that isn't happening. We're locked in with this vendor and as long as I have to cooperate with them, they are going to do their best to fuck everything up. I think it is time to move on. The way I look at it, our platform is supposed to provide productivity. It honestly feels like this site would be easier to deal with if it was just a static site generator, it's really irritating fighting your technology stack every day. Not quite sure what I want to move on to, but it definitely does not involve Web Forms. I worked at a consultancy for 3 years prior to this and it was super stressful (pretty toxic company), but the technical challenges were so exciting I was able to put up with a lot of bullshit for a long time.
I appreciate your perspective. Mental health is a pretty serious thing for me right now...I have severe depression and anxiety and this job is not doing me any favors in that department. I don't think I'm gonna lose my shit if I don't quit within 24 hours, I definitely need to pace myself. In the past, I have committed to the first job offer I received. I never tried to negotiate or be open to different opportunities. Sometimes it worked out alright, oftentimes it was not very satisfying. If I needed to, I could quit and float myself until I secured another job, but for the time being I am going to try and show up every day and leave things a little better than I found them.
Self-worth is something I never learned...I never felt good enough or worthy of good things. I would say I am an above-average programmer, and a lot of my identity is caught up in my professional status. When I was a consultant I was #1 in the department for hours billed all three years I was there because I lived off of that external validation. I need to start working on having an independent sense of identity and feeling worthy once I am able to stabilize my situation. Fuck mental illness and shame-based narratives :( 
We're 40ish people. My boss is incredibly supportive, probably the most supportive IT manager I have ever been fortunate enough to work for. But there are some cultural issues with the company that I don't see us overcoming anytime soon. This is probably true of most environments, but we have lots of managers afraid of change, way too many managers in general (not really sure why we need 3 marketing managers) and incredibly poor communication. So many people hide in meetings all day and there's a huge vibe that senior leadership doesn't trust employees. That's why we moved to the open office layout. They don't trust employees to work at home more than 1 day a week, which kind of sucks when you really need to concentrate. We spent a ton of money hiring organizational change consultants to teach us how to solve these issues and it was a spectacular waste of time and money.
Fasho, this is what I needed to hear. I've always felt guilty advocating for my needs and I just needed to spill my guts to a bunch of strangers online. I started cleaning up my resume last night, have some tech meetups lined up, it's time to do this deal!
According to [the MSDN for your function](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=netframework-4.7.2) `Path.Combine`, you cannot use rooted paths in the second argument. &gt;This method is intended to concatenate individual strings into a single string that represents a file path. However, if an argument other than the first contains a rooted path, any previous path components are ignored, and the returned string begins with that rooted path component. As an alternative to the Combine method, consider using the Join or TryJoin methods. Change `string modFolder` to `".minecraft\\mods";` and it will work.
Unfortunately, I don't think there is much more that can be done. We are locked in with some terrible vendors that I don't want to deal with anymore. It's really demoralizing when you streamline your site, but your e-commerce vendor takes 20 seconds to load a page because they make 180 requests to load the home page of your store. It's like what the hell am I even doing here?
Sorry that's happened to you :/ I hope you can find something that makes you happy. I dropped out of university to become an EMT...by the time I realized that was a mistake I was out of touch with the tech world, had no credentialing, and a fair bit of trauma that totally was not worth $14/hr. I was able to move in with my parents and teach myself C# again and get a job, there's hope!
That makes more sense. Thanks. I'm not sure when I'll ever use it over the existing options, but I'll keep it in mind.
I think I definitely wanted some advice, I also just needed to unload a wall of text onto the Internets. Your advice about the steady base is really key for me. At some of my past jobs, hero programming was a large part of the business strategy. Projects were delivered on time because 2 guys would stay up for 40 hours straight to hack something together that would work for the demo. It's way too easy for me to try and save the world to compensate for a lack of resources.
Yeah that's how I was thinking. Primary constructors was the first I heard of this and thought it was neat, then it was pushed to C#7, then 7 pushed it to 8... 
Because you don't have a default constructor. If you want to initialize after, you could add default constructor. &amp;#x200B; public Nested(){ } var nested = new Nested(); nested.Main = main;
Unfortunately it's more buzzword bingo than any sort of real agile process we introduced. I'm expected to deliver features every 3 weeks, but I haven't been handed any requirements because the stakeholders are all too busy to define what they want. No standups to make them aware of these issues because again, they're too busy. Delivering things is difficult when you don't have any stable environments to deploy to - right now there are inexplicable differences in all our environments that I can't explain, I just know I am sick of copy + paste + pray deployment procedures. Yesterday I didn't get to write a single line of code because I keep getting asked to perform random support tasks. The feedback I get is that everything is equally urgent :/
I don't think anybody's going to (or should) do your work for you, op.
My boss kicks ass, no doubt about it. But we're not getting any funding for an additional dev (we have to factor all custom dev requests for other departments in our budget so we get screwed over) and they denied her request to get a junior level dev to handle support tickets for me. We are contractually locked in with this vendor for at least the rest of the year - using their hosting environments and their SCM repo. I've made it clear how much the vendor is hurting, I have pointed out multiple security issues they have caused and documented several instances where we have lost data because of their negligence. We were failing PCI Compliance because of them as well. It's partially my ego, but it is really demoralizing seeing them bill $200/hr to write substandard code while I am stuck picking up the pieces.
I am going to give them a whole month of notice. I'd start documenting things now, but there's so much on the backlog I can't even fit that in right now.
It will be used hundreds of times in a large codebase if you use these types of classes. This is quite common.
Medium is the breeding grounds of bootcamp kids who dream of making the next Facebook with node, Mongo and crypto. Hosted on ElectronOS, preferably - a Linux kernel rewritten in Javascript running as microservices in Electron environment. 
Can someone explain how this is different than structs? AFAIK structs in C# are ideally in practice readonly data objects.
But can't native C# create attractive UIs or no?
It's syntactic sugar for a type declaration, so it's meant to delegate a bunch of standard boilerplate code (e. g. implementing Equals()) to the compiler. Structs are just value types: they can be mutable or immutable, and don't come with any more comparison logic than any other object does, by default.
How are you getting the client object and how does your code store/use it? Because it sounds like one function is disposing the object before it gets used by the other.
Absolutely spot on, worked a treat. Thanks so much. :)
Don't hold your breath. This was slated for C#7, then pushed to point versions, then pushed to C#8, now being pushed to point versions... Unless ASP .NET Core MVC or (apparently) people writing ASM-optimized routines on .NET Core hardware projects decide they need these, we'll see this announcement for C#9.
The real question is what kind of reports do you want to generate? Excel, PDF, html?
This seems a little shady, I don't want to say 100% this is for distributing a trojan, but that's what it seems like at a glance. What are you making?
If you can’t change your situation, maybe at least try to change your perception? You actually have far more freedom to try new things and make quick pivots than most. It sucks not having more experienced people to live from but at the same time you have an opportunity to chart your own curriculum, so to speak. Leverage it to gain practical experience in a tech you’re really passionate about?
You do definitely want to consider the additional work and complexity of a custom file format, versus a standard like JSON. That said, JSON is somewhat crap for configuration files and is only used for it so much because of it's general popularity. There are other standardized formats for configuration files that have advantages over JSON and will have implementations available in .Net (yaml would be one, for example). Also, if you do ever want to dynamically execute some code from a string, there are libraries to help with the heavy lifting, like https://github.com/pvginkel/Expressions
It seems that you program keeps reading data from 100 sensors during all the measurements. The program try to find a sensor that matches special data peak patterns. You may try to match data and pattern with first two big peaks, and calculate errs between data and pattern.
welcome to the holy war. ask 10 programmers this question and you will get 17 answers. If its green field pick one and go with it, for c# the Microsoft recommended is Id. For legacy code that already uses one or the other, just follow what they have and go on. there is no grand argument for one being better than the other and the work to change it can possibly introduce weird bugs. 
At work we use a script that is run on new installs of windows. It allows us to install quite a lot of programs depending on what PC it's going on and also changes some settings depends on what version of Windows it's run on. It's not a trojan. I can send you the repo I just don't want to post it publicly.
I honestly don't want extensions at a top level. If I know my functionality is provided by an extension, I want one place to look for it. Core Visual Studio functionality shouldn't be cluttered by the extensions.
Thanks ok, It just seemed a little shady looking at this specific question. Have you figured out the answer to your q? &amp;#x200B;
Those are pretty interesting optimizations! &gt; "we can reduce cpu utilization by another 3% if we re-implement string.Join for use in these hot paths." Does this mean that C#'s native string.Join is inefficiently implemented? Or did you have to re-implement it to take advantage of the pre-allocated strings?
Cheers man, I'm trying to sort it out but it's difficult working a job that is as mind numbing as it is tedious to then come home and get in what learning I can before needing to sleep. I meant what I said though, if I could take my own advice I would. I think sometimes to try and get a place to change it's going to take such an extreme effort that you just have to be very sure it's worth what it will cost you to do it. Hope it works out whatever you decide to do! 
What effort could I put here? I didnt found anything about it on Google / Stack
It was a separate improvement not related to pre-allocated strings. I would not say string.Join is inefficiently implemented, but if you can apply more restrictions than the general case, it is common to be able to find performance improvements. string.Join for example contains several sanity/bounds/null/etc. checks that were unnecessary for much of our use. The biggest improvement I got by replacing string.Join was in the method used to actually copy the bytes over from the source to the destination. string.Join uses Buffer.Memcpy, but I found it much quicker to use a technique based on [this code](https://github.com/neuecc/Utf8Json/blob/master/src/Utf8Json/Internal/UnsafeMemory.Low.cs).
&gt; string in .NET is a special case Not in the way you say it. You can overload the equality operator in any type, and you make your reference types behave like value types as well.
 You may want to look into partial views for the different products. a partial view is a view that you can “embed” (not the correct term though) in a page to represent a piece of related information. Take a peek : https://www.tutorialsteacher.com/mvc/partial-view-in-asp.net-mvc
Thanks for the link to that code. It is *so far* beyond my understanding, though. Are you a CS grad? I started with FORTRAN in 1969, moved to C, then PowerBuilder, then C#. I still write code like a FORTRAN programmer, esp. I write very long methods that encompass all the functionality I'm working on. I'm on board with DRY, but for me that's advanced engineering. Fortunately (??) my career is at end-of-life. I'll be surprised if I get another job. Thanks for taking the time to explain, even if the explanation is more than I can handle. 
Thank you for this, I'll give it a try! Do you have any specific tips on how to show products with corresponding locations? 
Really any course is never as good as actually building an app. The Pluralsight course and tests are great but can never replace \*just dong it\*. I'd advise you work out what kind of app you'd be interested in building (\*interested\* is critical) and just build it. You will then discover where the gaps in your knowledge lie and can better guide your future learning. I'd advise now that you work on [ASP.NET](https://ASP.NET) Core MVC and build out a site using that. You'll get stuck (I remember spending sleepless nights trying to 'get' [ASP.NET](https://ASP.NET) 1) but keep going and feel free to ask questions (StackOverflow is also fantastic as a resource or specific issues). Good luck and welcome to the developer club!
Thank you this seems to be exactly what i need.
I have some ideas for the site and I will get on to work. I was just curious on when to advance on, since people usually advice not to rush from one language to another without beign sure in the knowledge on a language you're currently learning. Thanks a lot for the tip and thanks for the warm welcome :) 
&gt; Are you a CS grad? I'm actually a high-school drop out and convicted felon.. Programming started to become a passion of mine before I was in middle-school, and I'm near 40 now. In my mid-20's I got my GED (in jail), got an Associate of Arts degree (in prison), and then did a year towards a CS degree at a good state university - but I was already working as a developer and for a variety of reasons I didn't feel like it made much sense to continue. That code may look complicated, but ultimately it's fairly simple. It's locking down a byte array or string with the fixed statement so that the garbage collector doesn't move it. A line like this `*(int*)(pDst) = *(int*)(pSrc);` is just copying 4 bytes from the memory pointed to by pSrc into the memory pointed to by pDst. `(int*)` tells the compiler that even though pSrc is a pointer to a byte array, treat it like it was a pointer to an int. The outer `*` is the dereference operator, which just gets the value in memory at the location pointed to by pSrc or set the value in memory at the location pointed to by pDst. &gt; obviously inane assertion that optimization of C# code isn't necessary To be fair, you can do an awful lot without ever having to delve into optimization at this level.
But if you don't want them there, it's much easier to remove the menus through the customize option. Trying to manually rebuild an extension's menu at the top level (for those of us who like it) would be ridiculously tedious, and likely require that we do it every time our extension update. Plus, those custom would would likely fall apart for extensions that modify submenus programmatically.
The problem with coding is that learning 'in the abstract' is super tricky. As I say you'll work out what you don't know (and actually need) far more quickly if you have a goal in mind ('how do I save user input to a database?', 'How do I let users log in?') lead you down all sorts of rabbit holes trying to find a solution. It's kind of where the fun lies! 
Has anybody read the article? The first paragraph - POCOs aren't DTOs, POCO means the class is independent of frameworks and libraries, they absolutely can have methods, and your whole domain model should be implemented using POCOs.
I'd like it if it were configurable because I feel like neither of us are alone 
Yeah, i know, thanks for all the help! 
That's the real truth. Moving it without giving us the option of keeping it like it was is the kinda thing that grinds a lot of folks the wrong way!
You're only supposed to add code in this section: //Write ANYTHING you want..... //And get the output:
Yeah, for some things I don't care about a preview, but eventually you have to see the result before you ship it! :)
I'm guessing you're using your models directly on your pages. Look into using ViewModels and the MVVM pattern. The ViewModel class contains only the properties you need for display on your page. Run one or two queries to retrieve the necessary data. Convert the results of those queries into your ViewModel class. 
I feel like I always make a mess of it, and not realizing there's some standardized way to approach a situation. Right now I have this big class of properties representing fields in a schematic revision frame. The actual field names are not very presentable, so I gave the properties reasonable names, then added the DescriptionAttribute to store the actual fieldname. In WPF, I now want to * Have a basic, simple input-form to not scare away users * Have a button at the top right to customize the form, * Get a dialog with two list boxes to add/remove fields (like Office 'customize ribbon') * Allow for these chosen fields and the values input to be saved as named templates/profiles &amp;#x200B; So, is it really just up to me to write a whole lot of reflection, or are there elegant ways to use attributes and existing code to do something similar?
So there's no bones about it; if you use Attributes you're going to be using reflection. However you can certainly dynamically add fields (or any UserControl) to a WPF control e.g., see [https://stackoverflow.com/questions/2814866/programmatically-add-controls-to-wpf-form](https://stackoverflow.com/questions/2814866/programmatically-add-controls-to-wpf-form)
The reflection to fetch the descriptionattribute is already done; the class does reflection on itself and creates an internal collection of FrameFields. What I'm wondering is if there's any standardized set of attributes that WPF uses which makes it fetch information automagically.
Not that I know of...but then I'm not much of a WPF fan tbh...
ASP.NET uses much of the same infrastructure I believe. I haven't put any time into it myself but I think the System.ComponentModel is pretty ubiquitous.
You mean Webforms I presume? Yeah possibly...haven't used Webforms for about a decade :)
Primary constructors sucked to be honest. They broke conventions for no good reason. Records are worth it. On the other hand it was immediately obvious that primary constructors sucked and this is why they were evolved almost instantly into records but that delayed them...
I have not
It's not necessarily "bad" and in fact MS is quietly investing heavily in it. I'll cover their material with a surprise twist at the end. HTML5 and JS got really damn good over the past 4 or 5 years. You can bundle a lot of really nice functionality in a page that runs fine in a browser. There are two major reasons why you can't just plop a .HTML file on your desktop and make an app out of it, though: 1. The browser is sandboxed and can't access a lot of things like the filesystem that applications will want to touch. 2. Each browser treats HTML/JS/CSS in slightly different ways so the UI or behavior might not be consistent. (* *This is actually not that big a deal for people who write JS apps, there are libraries and tools that do the work for you.*) Electron solves both of those problems. It only uses Chromium, the open-source fork of Chrome. It hosts the web content on a Node.js instance, and provides an API for the web page and that server to communicate. Since Node isn't sandboxed, that's how the Chromium instance can get at the filesystem and other goodies. This means you can write an app that looks and behaves the same on Mac OS, Linux, and Windows. The valid point is some of the biggest resource hogs on the planet are Electron apps. JS is a single-threaded model that really wasn't designed to do this much work efficiently. Node itself might have memory issues. But let's talk about the apps that use it. Slack stands out as really hated. Nobody really complains about Discord though. MS has Skype clients that are written in Electron, let's put that in the "hated" bucket by default. And nobody's really calling out VSCode for being Electron-based. I say it's a mixed-bag, it doesn't seem like Electron apps are universally resource hogs. But wait, there's more! MS just decided to abandon Edge's rendering engine and adopt Chromium. That means there is effectively no more Internet Explorer soon. One thing they mentioned is they'd like to make "Windows-specific optimizations". My speculation: they want to make Electron apps not suck on Microsoft-enhanced Chromium so Windows is the best platform for those apps. They can work on its JS implementation and rendering to do things more efficiently on Windows. They can also work within Node.js to fix that end of the equation. They're already invested in VSCode on this platform, they've already made Skype clients on that platform. It's plausible that the Office365 clients could run within it. It doesn't seem unlikely MS might adopt it as a blessed app platform. It's not like they've got a lot of Xamarin Forms apps running on Windows out there to prevent this move.
So instead of a snippet in the text editor, it's gonna be a snippet in the compiler. Won't that increase compile time? 
A while back, I wrote a web app that allows you to convert video files to GIFs using an embedded version of `ffmpeg`. I used a PowerShell script with the [PowerShell SDK](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation?view=powershellsdk-1.1.0) to handle the conversion. Parameters from the script were sent from an angular.js UI over Web API. Without worrying about the Web interface stuff, perhaps my [Scripts](https://github.com/JaimeStill/convert-to-gif/tree/master/VidToGif.Scripts) library in that project would help? The [Create-Gif.ps1](https://github.com/JaimeStill/convert-to-gif/tree/master/VidToGif.Scripts/Scripts) script is added as an [Embedded Resource](https://github.com/JaimeStill/convert-to-gif/blob/master/VidToGif.Scripts/VidToGif.Scripts.csproj#L55), and all of the logic for the interactions is included in the [Extensions](https://github.com/JaimeStill/convert-to-gif/tree/master/VidToGif.Scripts/Extensions) folder.
I don't know if calling out a single app that performs stupidly is indicative of a poor framework, it's more indicative of bad developers. If you don't agree, give me 10 minutes I can show you a .NET Core WinForms app that uses 18GB of RAM to display a single blue pixel so I guess we should all revert to MFC.
Plan B would always check the database before making the API call. I wouldn't recommend this if there are too many API calls involved.
do you have a better plan of how this can be done ? 
Structs are a thing you have to have some discipline to implement. You don't *have* to make them immutable. You don't *have* to implement their value equality logic. You don't *have* to make them comparable. If you don't, you lose almost all of their benefits, but the compiler doesn't enforce any of these constraints. Record types are implemented by the compiler, which means you *have* to meet all of those criteria and can't get them wrong. So not only do they save a lot of boilerplate, they eliminate an entire class of potential bugs. 
You need to retrieve that data from a database. The location will be a table. The product will be a table. The location identity key will be a foreign key in the product table. You should read the product table and render a view with the product data. Take a look at this walkthrough : https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/movie-database/create-a-movie-database-application-in-15-minutes-with-asp-net-mvc-cs
Awesome, that makes sense.
I don't see anything wrong with plan A at this moment. Ofcourse you will be making additional call for 1. Get new access token using refresh token 2. Additional call to protected API But you will be doing it only when your token expires and not always. * For us expiration time was 30min. But that completely depends on your needs. * Refresh token never expires(if I am not wrong) and it's there to provide you a new access token everytime you ask for one. Have a good day.
Devexpress has some wpf components that will do just that. Other UI libraries like telerik's will probably have same functionality. Maybe other UI frameworks have baked in support for that. 
the reason why I don't like plan A is because I have to check for 401 unauthorised for every api all , then call the protected api again . plan B might be easier to implement if I'm able intercept all api calls (middleware or filter) , then I can go ahead to check the expiry time, if it has expired then I can just inject the access/refresh token to the request 
double angle = Math.Atan2(pointB.Y - pointA.Y, pointB.X - pointA.X); myImage.TranslateTransform(-pointA.X, -pointA.Y); myImage.RotateTransform((float) angle, MatrixOrder.Append); myImage.TranslateTransform(pointA.X, pointA.Y, MatrixOrder.Append);
Try using a chart control instead.
Removed: Rule 4. You didn't include code of how you're working with the PictureBox controls or how you laid them out in your form. I suggest you make a new project from scratch which does nothing but display 2 PictureBox controls of different size that vertically align the way you want manually. Then see how to align 3 boxes. Then look how you might apply that alignment programmatically. Once you figure that out, you might be able to apply what you've learned to your dice rolling application.
Next try to build your own project site from scatch. keep it small in scope though. like a simple "NFL player" database with teams, their stats, and players on the team (maybe just do like a few players and not the entire bench lol) or make a magic the gathering or hearthstone "card wiki/database" site thats what I did to really get ASP NET
Yeah, my hoby is DnD, so i could make a small wiki on classes etc :) Thanks for advice! 
Well there's a couple of things here. &amp;#x200B; First off Dog myDog; myDog.isClean = false; dogWasher.WashDog(myDog); the isClean should be a property of the dog. not a global variable. &amp;#x200B; Secondly, if you use the ref keyword in your function yes, it would work. void WashDog(ref Dog theDog) { theDog.isClean = true; } but you would really make a function in the Dog class that does the thing itself. So you would do: public class Dog { bool isClean; public Dog() { isClean = false; } void WashDog() { this.isClean = true; } } &amp;#x200B;
&gt; Secondly, if you use the ref keyword in your function yes, it would work. Is there a benefit to using ref variables like this? I dont think I have ever had a reason to write a function like that. 
Here explained: https://docs.microsoft.com/en-us/dotnet/api/system.consolekeyinfo?view=netframework-4.7.2
Yeah there is no reason to have the ref in "ref Dog theDog" in the first WashDog() example
idk much about dnd but like Class Barbarian: int Intelligence 1 int Strength 10 List&lt;ability&gt; abilities() etc maybe the attributes would be an attribute class of properties and such 
Yeah i get it, will try my best :) 
Objects are actually pointers to memory where the object is stored, which means when you pass an object in, you're actually passing the pointer. When you access that variable within the method, it 'dereferences' the pointer and hits the memory where 'myDog' is stored. It doesn't matter what that object is passed into or how it is used. It will always be a pointer. This is important to note because if you do something like Dog myDog = newDog(); Dog yourDog = myDog; myDog.IsClean = true; Then `yourDog` will also be clean because you're setting the `yourDog` pointer to equal the pointer to `myDog` so they will point to the same memory space. So in your example, you pass `myDog` into `WashDog`, `WashDog` dereferences that pointer to access the `isClean` property and sets the `isClean` property in the memory where `myDog` is stored. 
&gt; but I though I heard something about C# passing by reference or something that led me to believe this didnt work. Passing by reference is the reason why it works. When you call dogWasher.WashDog(myDog), the method WashDog doesn't get a copy of the dog, it gets a reference to the same dog. So changing a thing of the dog will remain after the method returns because you've always been working with the same dog. Keep in mind though that not everything in C# is passed as a reference. Value types like int, float or bool will be copied if you pass them to another method, so if you pass it to another method and change it there you'll see that your original variable hasn't changed. PS: I've simplified a few things to keep it short and simple. If you want to learn how everything works in-depth, I'd suggest you to start reading [the official documentation about the different types in C#](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/types).
Oh and the second of these examples https://csharp.hotexamples.com/examples/System/ConsoleKeyInfo/-/php-consolekeyinfo-class-examples.html
So ConsoleKeyInfo is a struct. When ReadKey returns, you are getting a value struct that contains many pieces of info about the key pressed. When you output, through WriteLine, a variable of type ConsoleKeyInfo, WriteLine will attempt to call ToString() on that type to get a string to output. Many types complex in .NET have a default ToString() implementation of just returning the type name in a string. ConsoleKeyInfo is one of those types, so if you simply output a variable of that type, all you will get in the console is the type name of that variable. If you want to output details about the key pressed then you'll need to do things like. Console.WriteLine(keypressed.KeyChar) - so you can see the actual key pressed in that ***keypressed*** struct instance. As Remora80 linked, the docs for System.ConsoleKeyInfo has many other properties and fields about the key press, like if shift was pressed, or ctrl was pressed, for example. So you need to output SPECIFIC parts of the ***keypressed*** instance you got from ReadKey().
I'll take a look thanks!
short version: change `Console.WriteLine(keypressed);` to `Console.WriteLine(keypressed.KeyChar);` less short version: Console.WriteLine doesn't have an overload that takes a ConsoleKeyInfo, so it [takes it in as an object](https://docs.microsoft.com/en-us/dotnet/api/system.console.writeline?view=netframework-4.7.2#System_Console_WriteLine_System_Object_) instead. This will output the result of `keypressed.ToString()` which sticks to the [default implementation](https://docs.microsoft.com/en-us/dotnet/api/system.object.tostring?view=netframework-4.7.2#the-default-objecttostring-method) rather than reflecting the value in the KeyChar property.
Feel free to hit me up if you have any questions!
If you want to get the key use `Console.ReadKey().Key`
He was joking. 
Yes I too like to buy a nice sports car, then place it onto a semi truck's back/cargo thing for cars, then finally put it on a barge, and drive that barge FAST
In plan B you mention to use storage for storing expiry time. So that means * One call to storage to check if the token is still valid. This too would happen everytime before every API call. * If it is invalid/expired There will be call to -- Fetch new access token -- One call to storage to update token expiry time * Actual API call (new token in request header) If you are okay with plan B you should avoid using a database. A caching mechanism should be okay imo but never forget concurrency. In general, the fewer times you hit a database, the better.
Good on you for doing that. From my experience once you resign, regardless of the backlog if they have half a brain they'll allocate time for the documentation. Just make it clear that it's their choice if they want to work you to the bone until the moment you leave but they'll be in a worse place 
You could log information in textfiles?
It's for things like player position, so I need a way to get immediate feedback. Thanks though.
You can follow changes to a file and display them instantly
Thank you! This is a perfect explanation. Thanks everyone else as well. 
Interesting solution. I'll consider that as an option. Thanks!
What about extracting the endpoint URI and overwrite the server and port before instantiating the client? This way you can use the native AppSettings transformations to store the server and port you need based on the environment.
Its a nothing issue. I think its handy not having the resharper text on the Menu, of having to hunt through the submenus for extensions. 
I'm using the built in dependency injection to instantiate the client. I guess my question would include how to tell the default DI to instantiate the service with an EndpointConfiguration. 
Then use an alternative, it's why they exist. Fiddler is pretty good if you're on windows. 
You are describing an intranet site. You may not need internet access on that architecture. But, you will need a iis local server (if you want to run a localhost only app), or access to LAN and IIS server if you want a local network site. &amp;#x200B; If you are thiking on a isolated web page that runs locally on browser, [ASP.NET](https://ASP.NET) will not work.
NDepend
If you're doing a UWP app, sure. Otherwise, no. For that UWP app, you'll need to set up a solution with two projects in it. One for an JS UWP app, the other for a C# class library.
Can you give me details on the goal or themes of your podcast? Obviously it's .Net related, but what kind of topics or questions will you be tackling? Is this podcast a direct competitor to .Net Rocks or will your podcast cover an aspect that is missing from .Net Rocks. Note; I only use .Net Rocks as a comparison because its the only .Net podcast I listen to at the moment.
Clean Code and Code Complete. A must read for every developer.
this book is good - https://www.amazon.com/Professional-ASP-NET-MVC-Jon-Galloway/dp/1118794753/ref=sr_1_3?keywords=asp+mvc&amp;qid=1551824161&amp;s=gateway&amp;sr=8-3 its ASP MVC 5 though. the latest is "ASP MVC Core 3.0" which is more or less "ASP MVC 6" as the concepts are pretty much the same
having the monogame dll in your project shouldn't prevent you from opening up another window in any other way you want. I'm not sure how wpf works in .net core 3 (it does now right?) but it should still work fine. you could open up another monogame window and draw text there too. The easier thing to do is log to a text file and use a log viewer that updates it all the time. many such tools exist. 
How is Fiddler an alternative to Electron?
No, to Postman.
Do you work for LambdaTest? My understanding is the C# bindings for Selenium are actually slower than the Ruby and JavaScript bindings. It's been awhile since I've benchmarked this. Any thoughts on whether this is still true? THanks.
All the extra commentary but not a single person has answered my question... and sorry I know absolutely nothing about JS Frameworks.
Ok so for my app the basic idea is something like a random name/character generator. Something that can be used basically anywhere if its on the computer. The original app was just using a Windows Form. So it sounds like ASP.net isnt the way to go. With UWP I could develop the UI with JS and then create a separate project to work with the database in C#. Then have them reference each other?
No there is no benefit. Please don’t do it.
Yes you can. WinForms and WPF. UWP.
Now try to figure out what the ref keyword does on a reference type ;) 
Here's a template I made some time ago that makes use of both Monogame and Nez . https://github.com/Juhlinus/MonoGameNez
I’ve used devexpress for reports before. Kind of annoying to get the layout exact, but worked well. 
You could just add a second parameter to stringcheck and have the name of the array passed in there
Yea I just thought about that after I hit post..but, I'm a visual studio newbie, is there a way to replace (probably 100+) calls to this method which all pass different array names like that automatically?
It supposedly should work in the Preview build, which is why I'm confused. But yeah, from the suggestions it seems like using a log viewer is the way to go. As for MonoGame with Core, I created a new .NET Core 3.0 project, manually imported the files from my existing MonoGame project created in .NET Framework, and then imported the necessary NuGet packages and did some cleanup. Nothing fancy. I think I had to tell Visual Studio how to handle opening the MonoGame Content file. I tell you, working in Core is so much nicer.
There's probably a way to do it with regex but I would be no help with that. Sorry
Honestly, I like it as is. Extensions shouldn't clutter the space, especially if I don't need it. By nesting, they ensure that they have a consistent width to plan for and don't have to handle situations such as users having too many, or if screen resolutions change. If I'm using a menu option often enough to care about the extra click here, I'm binding it to a a key combination anyways.
Can you try formatting your post a little better? I can see in "source" you tried, but you need to either have a blank line between the paragraphs or at least two spaces at the end of the line.
Sorry to hear about your mental health issues. I can't empathise from direct experience but I have a lot of people in my life who suffer from depression and anxiety and it seems really tough. If the job isn't helping you then for sure look elsewhere. You owe them nothing. The recruiters are seriously great for this, it really takes all of the stress out of the job hunting process. If you've never used one before, the process for me recently was: - Recruiter gets in touch over LinkedIn - Recruiter sets up a call after work to go over what you're looking for - Recruiter sends you company profiles to review - You let the recruiter know which ones are interesting to you and they talk you up to the company. Pass on your resume. - Recruiter sets up a call with the interested employer for an initial chat. For me these were in the evenings or at lunch (I just went to my car to take the calls). Employers worked around me. - For the chats where both parties want to proceed the recruiter sets up an interview. With me, I told the recruiters that I was going to take a vacation day on a particular day and to get me as many interviews on that day as possible so that I wouldn't have to take much time off. Did 5 in one day - After interview, recruiter acts as a go between for you to negotiate compensation I basically found two recruiters I liked and had them compete with each other. It worked out pretty well. Notice that for almost all of that the recruiter drives the next action. You're in a funnel and just have to react to the next thing, the recruiter does all of the stuff that requires initiative. Everyone's depression is different but I know a lot of people struggle with the self motivation side of things. If that's a problem at all for you maybe it would be helpful to pass that responsibility onto someone else. If you'd like me to review your resume I'm happy to take a look at that, shoot me a pm. Otherwise best of luck. I'm sure it'll all work out sooner or later :)
Parallelism is evil. Shared read/write objects between threads is even more evil. If you want to use parallel tasks you should isolate inputs and outputs. Task will process the data inside of thread, then you sincronize thread results. You may get not expected results on your shared matrix, tasks will not start sequentally and will not end sequentially. Each thread has his own copy of matrix, not the original reference. 
Can you expand on this? I’m a programming student and I’m nearing the end of the track and I have people reaching out to me to build some small projects. I have never deployed a web site/app and have been searching for a proper stack to deploy them with. I guess my questions are- Can I just load up an MVC project on a server with .NET installed and it will run? How does ASP .NET interact with the database? How do I connect it to a database and interact with tables? I have also been learning some Python, how is the process of deploying an ASP .NET MVC project differ from using something like Flask or Django? 
Currently, no. There are [plans for the next C# version](https://github.com/dotnet/csharplang/blob/master/proposals/caller-argument-expression.md) to make this possible. The closest you can get for now is [to get the name of the method that is calling `stringcheck()`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute).
There is no problem with reading. Threads will use same memory for matrix, not copy.
When I run the program with smaller values in the parallel version, it takes a millisecond or two longer than the regular. But for bigger values, the parallel takes a much short time. Is that normal? 
You don't have infinite threads. .Net only allow N threads per Core, im a not sure, 4 or less. A lot of tasks created will be enqueued.
I created one or two so far. Would you have any tips regarding my code? 
I would make a new class for the array that includes a name and pass that in to your method. 
Code Maid
Pointer to a pointer, basically.
[removed]
Use a dictionary&lt;String, string[]&gt;
Having the method do both the duplicate checking and the reporting is a violation of the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle). If you split these two concerns into different methods, you won't have the problem. As an aside, I'd also consider the name of the function. stringcheck isn't very descriptive - it's checking a string... for what? (Is it checking a string, or an array of strings?) maybe something like HasDuplicates would be better? Knowing why you're checking for duplicates in 100+ places would help in advising on how to better architect this.
I think you can do that with expressions. Those will capture the names of the variable i think.
oh man now im gonna simdify my stuff
So, what’s unclear to me is how you intend on making this call to the protected resource. Is a single thread responsible for this? Or is it possible multiple threads may be requesting this resource... say for example, you have a proxy web service that communicates to the protected 3rd party service that requires the auth? Is there a planned throughout or request load you have in mind? How many services of yours may be doing this? Without knowing more I’ll assume more of a POC / sample setup: Your idea to get a new token upon 401 sounds good. I would use global cache which can do the sliding timeout to avoid excessive requests to their auth token. This prevents your db calls which should increase your general throughout assuming there is only 1 runtime you are concerned about. If upon getting the global cache the key is null, simply do the auth then to avoid the immediate 401 response on the protected resource. We often ask consumers of our apis to do similar things as these guys are typically Wordpress programmers with little to know interest in server side programming or implications of excessive calls. Of course there’s plenty more that can be done, but more detail would be required before I’d advise anything more. 
[ASP.NET](https://ASP.NET) Core MVC may be a possible solution. After you complete your app, you can pack it up. In any machine with .NET Core installed, you app can run the app with command **dotnet run**, then it run locally. Of course, it also can be deployed in a server, then any netuser can access it. For more details, you can refer to docs.
Is Oracle better than MS? Or for that matter is Google less evil than MS? I would be hard pressed to think so...
Maybe [raw input](https://docs.microsoft.com/en-us/windows/desktop/inputdev/about-raw-input) works better in that case? Just a guess though, I haven't tested it. 
Why do you want to do that? Variable names are just a design time construct. If the variables actually mean different things at run time (such that you’ll want to refer to them independently in things logs) you probably want to think about how they fit into your larger algorithm, possibly creating a different construct for storing and referencing them. 
Being the solo dev is rough. If I were in your shoes I would not hesitate to seek other employment opportunities. Mental health could be a huge factor here as this agency sounds brutal. I’m sure they got interns/ super green guys to do this project with little oversight from some tech leaders and ran with it. What I’ve learned in any position: Be clear and transparent. I’m not talking about being a conceded jerk, but : 1. Speak up in asking for clarification 2. Make sure expectations are set appropriately, if you let people walk over you with timelines and just roll over to people crushing your estimates,YOU will pay the price in overtime and any disappointments that come from it. 3. Reoccurring support is sign of technical debt and should be an easy case to sell to management as a refactor / clean up. Come prepared with theories on solutions and be considerate of what you think it will cost to follow through with it. If you come to them saying it’s a complete rewrite after it’s just completed your credibility may be lost. But I’m a little off track, so my last point for you: right now Software dev jobs are a plenty. You should be able to find something else that will enable you to grow and be mentored by other people interested in your field. You will really be in shock how this can change your entire outlook in the field/your career. Look around, interview, but still try to be effective at your job while you are there. Best of luck, it will get better my friend. 
Another idea would be to get the current [StackTrace](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace) and print the line number of the call to stringcheck.
Others have already put it better than I ever could. But my additional tip is this: Even if you can't yet quite grasp the theory as others have explained it. If you keep practicing your brain will pick up on patterns of correct use, and eventually the explanation will make sense. Just have faith in this process, and don't get too frustrated.
That can be more cleanly and efficiently done with the `[CallerMemberName]`/`[CallerLineNumber]` etc. attributes.
Idk about the other questions but I think var is just a placeholder for the type, syntactic sugar so you don’t need to write it out.
Wow that is a dense read. What benefits does being IEEE-compliant bring? Easier future changes? More predictable behavior? The head of the article didn't really explain that.
You could just go to the microsoft website and read the release notes for each c# update...that would give you a fairly compact summary of the changes. From there you could research or look for examples of anything you're still unclear about. And yes there are a LOT of changes.
i recommend C# In A Nutshell by Joseph Albahari
If it's really been that long, even generics weren't around yet. You might be better off just working through an up to date beginner course and skip the stuff you recognize. The MS docs have (an overview)[https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history).
Last time I coded C# professionally, generics were not around yet. For a mutable array you needed to use things like ArrayList and cast the contents to the type you wanted.
Most modern languages, standard libraries, and processors implement the IEEE standard for their floating-point types (in some capacity). Compliance helps ensure that the behavior for these IEEE types is consistent and predictable when you move between them (the languages, standard libraries or processors). &amp;#x200B; The parser in the language, for example, is and has been compliant. The language parser is used when you declare a literal like \`double pi = 3.14159265358979323846;\` which parses the literal to get the raw bits. However, the parser and formatter in the framework were not. This meant that if you did \`double result = double.Parse(pi.ToString());\` you would find that \`result != pi\`. &amp;#x200B; With the changes made for .NET Core 3.0, the parser and formatter in CoreFX should both be compliant with the IEEE standard. This means that both the language and the framework will now parse a given literal to the same value and trying to do \`double.Parse(doubleValue.ToString())\` will now always return \`doubleValue\`. This also means that the language and framework will have the same behavior as other languages or frameworks implementing the standard (most C/C++ compilers, Javascript, Python, Java, etc). &amp;#x200B; The standards also define a lot more than just how to parse strings and format values. They define the behavior for basic operations like addition/subtraction and for more complex operations like square root or Min/Max and there is continued work to make those compliant as well.
This is not from my code, just an example I made up. Anyways, it's just a home grown app for my use only that calls a function on a number of arrays, to pick a random element, and return it. I just wanted a way to check each array to see if I accidentally added a value more than once to the array. It's kinda just a cheesy chat bot I was working on, so it will do i.e.: "hi [name] did you enjoy your [action] ?" and then, name is like: {"John","James","Jane"} and action is like: {"dinner","movie","cruise","dinner"} It's real spaghetti code through and through, but as I said, it's not a serious project, I was just hoping there was a quick and easy to way to rid it of dupes.
I'm probably not like the usual person who posts here, this is just a simple useless chat bot I was working on, and I'm a C# newbie and that is how I started doing it, and it's not worth refactoring. So I was just looking for a way to rid a large amount of arrays that get passed to only one unique function, of dupes.
You could use this as a starting point - [https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history) or just pick up any C#8 book. **var** \- isn't anything special, it just says, 'Hey Compiler - you figure it out'. &amp;#x200B; &gt;Dictionary&lt;something, IEnumerable&lt;sometingElse&gt;&gt; lookup = new Dictionary&lt;something, IEnumerable&lt;sometingElse&gt;&gt;(); &gt; &gt;becomes &gt; &gt;var lookup = new Dictionary&lt;something, IEnumerable&lt;sometingElse&gt;&gt;(); &amp;#x200B; The (not so?) obvious complication of this is that the compiler needs to know what the type is. You can do: &gt;var myNewThing; Because the compiler doesn't know. Other things work but can be less obvious... &gt;var x = 5; Sure, we know x is five...but is that an int or a double or an int64 or what....(I think it defaults to int). If you want a different type of '5' you can use this shorthand: var d1 = 0d; //double var d2 = 0L; //decimal var d3 = 0f; //float Anyway - there are a million blogs that explain it better but 99% of the time you don't even have to think about it and in the debugger you can see what the type is. It's still strongly typed. 'dynamic' is a thing now, and that's totally different from var and it really means 'I dunno what type this is, just go with it...' &amp;#x200B;
When I search C# expressions, it is basically giving me basic stuff like "a = 2; // 2 is an expression". Is there another term for what you're referring to? 
That sounds pretty useful, I'll look into it, thanks.
yes I intend to use a cache to prevent database calls. it seems to me like jwt access token and refresh tokens may not be the best approach to achieve sliding expiration. plan A or B both have their trade offs. is there a standard way of achieving this? I'm not contented with the information I'm getting online 
In theory you could use the fluent API to achieve that in Entity Framework. I think at that point you \*might\* becoming a bit of a purist and it could be time to let go a bit.
The language is nothing alike now, nor is the class library (pretty much every type you used back then would be an antipatern today). Really better to pick a book and learn in from scratch and try to forget what you remember, the only bits that are still relevant are those that are common to many languages (basics of OOP and control flow), pretty much everything else changed
Is there any benefit to doing it with React vs using one of those?
plan A will require something like this if (response.status === 401) { // try getting the new access token and repeat the same request } This is OK if i have one request, but in the long run, as my app grows, and i add more and more fetch requests, it becomes unmaintainable. I'm basically duplicating this logic all across the app on every request. there should be a better way
plan A will require something like this if (response.status === 401) { // try getting the new access token and repeat the same request } This is OK if i have one request, but in the long run, as my app grows, and i add more and more fetch requests, it becomes unmaintainable. I'm basically duplicating this logic all across the app on every request. is there a better way to repeat the same request without having to include the code in all api calls? 
C# In Depth by Jon Skeet is the single best C# book out there. The next edition is coming out in about a month, but you can read the nearly completed version here: https://www.manning.com/books/c-sharp-in-depth-fourth-edition This book is often rightfully recommended for anyone seeking deeper knowledge of C#. But it's even more suited for your case, since it makes a point of highlighting how the language has evolved and gained new features over time.
Hey the postfix \`L\` produces an Int64 or long. FFor the decimal you want \`m\`
What have you been coding in during the past 13 years?
&gt;Core Visual Studio functionality shouldn't be cluttered by the extensions. What do you define as "core functionality"? Visual Studio is pretty modular and some menu points only exist if you installed the relevant VS extensions.
&gt; wpf works in .net core 3 (it does now right?) Windows only.
you could host with electron
What you call Core functionality is often an extension functionality. I use way more often analyzers from various extensions than the VS built-in analyzer, but now the VS built-in analyzers deserve a top-level menu and not the core extensions I use. The only right way to do this move is to let the user choose which extension should be in the Extension sub-menu and which extension should remain top-level, with top-level position set as default. 
Extensions indeed should be hidden in extensions menu.
dude wtf is that copy paste :D
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#overload-resolution &gt;Given two different types `T1` and `T2`, `T1` is a better conversion target than `T2` if no implicit conversion from `T2` to `T1` exists, and at least one of the following holds: &gt;- An implicit conversion from `T1` to `T2` exists &gt; [...] `char?` can be implicitly converted to `int?` but not the other way around, so `char?` is the better target. If you change the parameters to `int?` and `long?`, then `int?` is the better conversion target. If you change them to `double?` and `decimal?` then the call is ambiguous.
Why not have a repeat logic in the service which is making the http request?? We can easily have a common service method serving all get requests Example GetServiceData(url, token) { // Form http request // Add header // Make API call // Look for 401 in response /// If found fetch new access token /// Retry GetServiceData(sameUrl, new token) with max retry counter of 2 maybe // Finally return response to caller }
Technically, C# passes by value (unless ref is used). For objects, the values passed are references, though. 
hmm, I'll take a look at this, if I can have one common service method making all the api calls then I can go this route. thanks 
Autofac is my go to and used in big companies.
Use replace (Ctrl+H) with regular expressions (works in Visual Studio Code and Visual Studio, you must click in ".*" to enable regular expressions): stringcheck\(\s*(\b[_\w][_\w\d]*\b)\s*\); stringcheck($1, "$1"); The first line goes to the "Find..." input field, and the second one to the "Replace..." input field. Explanation: Find stringcheck, opening parentheses, maybe random space that you added by mistake, then "remember" a thing with word boundaries that begins with a letter or underscore and may contain more letter and underscores and maybe some digits, then stop remembering, then more random space, a closing parentheses and a semicolon. The thing that is remembered is available as $1 in the output.
You could search posts like this: http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison This link is a little dated. Also don’t forget about Microsoft’s new DI package. https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection?view=aspnetcore-2.2
It still needs to have a container instantiated then add the resolution manually (as far as I read the documentation). I'm surprised that the attribute mechanism is not more used for this kind of concern : ´´´ [AttributeThatTellsTheFrameworkThisShouldRegistered] public class CanBeInjected:ICanBeInjected { public CanBeInjected(){} } public class ClientClass{ [InjectHere] private ICanBeInjected _classMember; } ´´´ Is this possible in C# and if it is, is there a reason for it not being done ?
Thanks for your reply. And that's the thing, every articles that talks about IoC are outdated, like this is not a thing in C# anymore. I may need to precise that I'm working on .Net Framework 4.7.2 application. The link on the DI seems to be related to ASP.Net Core, which as far as I understood are 2 different things ?
Awesome.. thanks for the info. I was sure there was a method to it but had never really thought to look into that in practice.
I think that the Microsoft.Extensions.DependencyInjection package is a dotnet standard package. The Aspnetcore and EFCore frameworks rely on this package but you should be able to use it anywhere. It might miss a few features compared to the other DI frameworks out but I think the performance is excellent. https://github.com/aspnet/Extensions/tree/master/src/DependencyInjection https://www.claudiobernasconi.ch/2019/01/24/the-ultimate-list-of-net-dependency-injection-frameworks/
I’ve used Mermaid for this sort of thing before. https://mermaidjs.github.io/ A lot of folks at my work simply use MS Visio, though.
Except when using anonymous types where it’s essential. I’ve practically never used those myself, though. 
&gt; pretty much every type you used back then would be an antipatern today Well uhm... strong, int (and all other primitives), StringBuilder, tons of other non-collection like APIs. 
Not sure if we can even compare \`Selenium Bindings\` based on languages. ¯\\\_(ツ)\_/¯ Selenium bindings are there to help you code in language you prefer and still be able to use Selenium. &amp;#x200B; The more accurate comparison would be in language itself. So if the question is whether JavaScript or Ruby is faster than C# in accomplishing a set of automation tasks, then I can agree with you there. In my experience JavaScript is faster compared to C# but that again may be attributed to my incompetence with C#. I run a very lean NodeJS code from CLI whereas I used visual studio for C#. 
Unity does support registration by convention. You can for example register all Types for a given Interface automaticly or write a Simple Attribute to register your types. Injection via attribute is per default possible. Register with Attribute: container.RegisterTypes( AllClasses.FromLoadedAssemblies() .Where(t =&gt; t.GetCustomAttributes&lt;MyRegisterAttribute&gt;(true).Any()), WithMappings.FromMatchingInterface, WithName.Default, WithLifetime.ContainerControlled); Usage: [MyRegisterAttribute] public class CanBeInjected:ICanBeInjected { public CanBeInjected(){} } Resolve with Attribute: public class ClientClass { [Dependency] public ICanBeInjected ClassMember { get; set; } } 
Not webforms, I'm working with WPF. By the way, the "correct" approach is to use TypeConverters and the TypeDescriptor class for fancy-pantsy dynamic reflection.
I'd like to give more than one upvote :D
Ask them to fix it, or if there is an alternative endpoint or parameter you can pass to get the response in a more useful format, json, xml, csv, etc.
uhhh. I go outside, so battery life is important to me. And Electron completely destroys battery life. But sure, go on about RAM, like we give a fuck.
When it comes to collections though, you're right. You're not supposed to use ArrayList, HashTable, etc anymore but their generic equivalents. `var` is necessary because since C# 3, we have anonymous types. Like when you have a Person class with 10 properties but you only want to get the name and age: var query = from person in peopleCollection select new { person.Name, person.Age }; But it's useful lots of times. Typing out the entire type is often just boilerplate. C# has improved a lot since 1.0 and gotten a ton of awesome features. (also some 'meh' features) It's my favorite language.
So, the green channel causes the red channels spike in this example? So the problem you want to solve is that you have n Channel C_1 to C_n, you know there's a spike in C_i and you want to know which channel C_j, where1 &lt;= j &lt;= n, j != i, caused the spike. Do I understand it correctly? Do you have further restriction? Because if not, you'd have to find all anomalies (whatever that means), categorize them and then match every combination (powerset=exponential runtime) of anomalies with every anomaly that occurs after it. 
I don't know if the green channel causes the peak. It was just a random plot of some channels plus the one channel where the peaks should be analyzed. Yeah, so you understood it correctly! My problem is that I don't know if there exist any mathematical methods or not. Even if there are some I don't even know their names to Google them xD If not I have no clue how to start. 
Yes, you can. Although Xamarin shines in cross-platform development, where you are re-using your business logic (for example for Android and iOS), or your DTOs (for example with ASP.NET backend) or everything (when using Xamarin.Forms). I am not sure if using Xamarin just for Android is a best idea, but of course, you can use it this way (I am writing some apps only for Android, but I am using Xamarin.Forms).
Either you have to limit the amount of data you have to process, or you need to find an algorithm that can compute all these correlations faster than exponential time. You can reduce the amount of data e.g. by saying that the possible cause of a spike can be at most n seconds before the spike itself or by saying that it's not possible for multiple anomalies to cause a spike together. When you limit the amount of data, you can just calculate the correlation.
Great i will tell them , i gust was afraid that there is a solution in c# and am not aware of,because am new to c# but now i can go and send the mail :D , thank you.
https://stackoverflow.com/questions/793571/why-would-you-use-expressionfunct-rather-than-funct
If you want to deploy to iOS later on or only have C#-developers go with Xamarin. If this will be an Android-only application I'd recommend using Java / Kotlin.
can you be my dad
It's much more common in .Net to use convention-based registration, or to enumerate over the classes in your assemblies using reflection while looking for your own attributes to control registration. I'm not sure offhand of an IoC library that includes attributes you'd use to decorate implementation classes like you suggest - though I personally do add that in my apps. I strongly prefer SimpleInjector (see [Batch Registration](https://simpleinjector.readthedocs.io/en/latest/advanced.html#batch-registration)). Autofac has a nice set of advanced features, but I strongly recommend avoiding those and using the basics. For example, if you need a factory, write a factory; don't inject a Func&lt;IService&gt; to have the container give you a factory of sorts. Some IoC libraries are slow enough to matter. Ninject comes to mind.
Man, that is awesome!! I hope to do the same with my daughter. She's 4, so no homework yet. I was reading Code Complete this weekend while she was playing with her toys on the floor, and she wondered why I wasn't reading out loud and asked if I would read her my book. So I did, for about a half hour. I'm sure she didn't understand a word of it, but it's an early exposure, and it was pretty adorable!
That's great and all, but the point of doing the same problems over and over is to practice. He doesn't get to bring the program to the test.
**Roadmap for your kid** lol :v Teach him to hack &amp; spy on your neighbor = instant coder kid. Teach him to make overlay over games &amp; inject C# dll in process memory = future NSA kid. Teach him to make social media scrapers &amp; dox online people, send drugs to their home using silklane, then call cops by callerID spoofing = H4x0r God NSA Double Agent Snowden Kid Wish your kid luck. Tell him to enjoy with it. Maybe not teach the above lol, but show him. C# can be powerful.. as in real powerful. :)
Father introduced me to the gateway drug, Excel. Helped until Algebra where I needed it on my calculator by huffing TI-Basic. Freshman year I could only figure out how to program away my education with PERL. One professor shook me down for VBA work. I graduated with a degree in engineering with no friends, due to PHP. Did a bunch of weird shit overseas I don't want to talk about, but I did meet a buddy who showed me the C# light. Came back to America, did some engineering, then worked for a software company in C#. Have a kid who's ready to read. She's going to start on the right path... VBA.
God, please reformat your post :p. It’s pretty unreadable, at least on mobile. 
Your son will be a brilliant coder and go very far in life! keep it up😊
Your comment made me think of this Hacker News thread: https://news.ycombinator.com/item?id=19226140
sorry bro, i tried to reformat it , but at the moment i save it , it remove all tabs ! ://
Ok, Mom...
Funny story, I did get to program my maths stuff. I was 17 IIRC, and we were doing something so boring and repetitive that I asked my professor if I could just write a program to solve it. She was awesome, and she said yes. So for the next 2 hours the rest of the class kept solving the same problem by hand, and I was coding on a Java IDE on my phone... I was super happy when I finished coding the thing and solved all the 6/7 problems in 10 seconds. I have absolutely no idea why the problem was tho...
That is great!! Keep him interested in code.
1. Learning is best when it's interest based. If it goes off course, that just means it's on a different course. So no big deal that his kid learned something else instead. 2. Part of repetition is increasing your understanding with different examples. Programming provides a different perspective that helps solidify that understanding.
Actually the actual memory and CPU guzzlers there are neither of the two V8 (JavaScript) engines. Most RAM is wasted by the browser and most CPU by it's rendering engine. If OS vendors figured out a safe way to share the browser instance between Electron applications running on one users PC both memory and CPU waste would get contained after one application is launched, provided that app authors aren't irresponsible like the people behind the Slack app. And projects like Franz and Rambox prove that this is exactly right.
Oh well :p. For what it's worth, I don't think it handles tabs at all. It needs spaces. To get it formatted for reddit, each line must *start* with four spaces, as per the "formatting help" button when writing comments.
Learning how to write a program for a given task means you already understand the problem AND the solution - especially since the child recognized he has to do the same task again and again, which means he already understands the algorithm behind the task. And going through the whole process while he wrote the app with his dad likely made a much deeper memory about this task than any repetition could ever do.
Writing a program to solve a problem usually requires thoroughly understanding the problem. I believe that teaching someone a mathematical concept well is far superior to mindless mechanization of problem solving, which will probably get forgotten in less than a year by the student. Personally, as I've gotten into game engine programming, I found myself relearning the exact same stuff I studied years ago in school, because no one ever taught me the concepts. Teaching a kid mathematical concepts correctly from an early age can do wonders for his future education. The problem should never be "how do I multiply?", instead, teach the kid why and when to multiply and then give him a calculator or teach him how to multiply on paper. A tool needs a purpose.
Maybe the wpf client actually runs in the browser, like this: https://docs.microsoft.com/en-us/dotnet/framework/wpf/app-development/hosting-wpf-applications
I consider auto loading an anti pattern. It makes registration less transparent which can cause side effects. Registrations overwriting each other, substitution not working etc. I like manual registration of types in the composition root, usually in a module of some sort that can we reused in other contexts such as unit tests. 
Not really, the actual app is kind of running on a IIS and it is exposed on a port which through it sends data to the js client
Any time I learn a new topic, I program it. I find a bunch of example problems from books and use them as unit tests. I find a bunch of edge cases and can say that my program will do it well. Then I write the code to write a .Tex file for LaTex to throw it into a PDF so my coworkers think I know what I'm doing. My work is very iterative. Instead of guessing 10 parameters to check one concrete beam using a bunch of rules of thumb, I check all of them and show the deepest, most shallow, widest, most narrow, most steel, least steel, most economical, then I make a choice.
This wasn’t included in the original request, however, You write logic to encapsulate all this behavior to support additional protected api calls. Follow the DRY principles (don’t repeat yourself). There’s many ways to do this, copy pasting code is never a solution for something used more than 1 time. 
I’ve used charts and performance is one of the most important things. I can do the work to setup all the advanced features without many docs, but once you hit the charting library’s performance limit, you have to either accept it or move on to the next library that can support the performance you desire 
I think there are use cases for both. Every approach has it pros and cons. In fact I mainly use explicit registration and only use convention based registration for some special use cases (e.g. where the resolve is done by a special factory that is not know to the Sub Module that needs to register the type). Since op only asked for convention based registration i supplied that example.
Your major point is why I find it so interesting MS is investing in Chromium. "OS Vendors" won't *have* to figure out how to share the instance. MS is going to implement the Windows side and let the nerds figure out how to make Mac OS and Linux be good. "Embrace, Extend"... whatever comes next. I didn't omit the other platforms out of bias, I just don't see as much conversation about them as I do Electron apps. That could be a product of how I've made contacts. I've got some subjective comments about GTK# but this isn't really the place.
Und der Name des kleinen Mannes? Albert Einstein
I had printed reports in mind.
lol perfect response 
The goal of education shouldn't be to do well on tests, it should be to actually learn something.
I taught myself how to program my TI-86 in high school. Most days while the teacher was lecturing, I would look at the problems and write a program to solve the most common types I also went to a math competition in high school. I asked if I could use programs during the competition and my teacher said yes, as long as I wrote them during the competition. One problem asked for something like the smallest pair of numbers with some property and I had no idea how to solve it, so I wrote a program to just brute force it
I waist I could code on that kind of stuff. The more I look at older technology and the stuff people wrote on them, the more I fell like a kid playing around with LEGO-like OO languages....
Translation: "And the name of this man? Albert Einstein"
WPF app as a backend running through IIS ? What ???
I guess they didn't want to code Win service so they decided to host some sort of connection protocol inside WPF desktop application which routes through IIS, I guess. That is not the way to develop server-client solution.
check the latest Albahari book... 
So basically trying to make this crappy wpf a web app will result only in morea and more trouble? Since one of the problems is, that there is no really a deployment it is runn directly on iis if the app fails all of the data in the current seesion will be dropped.
My suggestion is that you limit number of threads you use. 
TI-86 BASIC was a really interesting language. Not great for anything super complicated, but I did make some cool games with it. The most interesting part was the low amount of memory on the calculator itself. You had to be really clever to optimize your program
Its practice to understand the method. If hd realized the pattern and understood the program, that means he already has enough information about that domain of problems already. More practice isnt going to change anything. Now if OP had just given his son the program without his son asking for it and without studying it together then you would be right.
&gt;I didn't know VS was unequipped with a report writer. Why it should be ? That is not compiler/lanugage/framework feature. Crystal Reports is one way to go if your backend is SQLServer. FYI. SQL Server Reporting Service is not "free". It is commercial feature for which you need to pay a license :)
In High school (So for me, 2002) I used a TI-83 and did something similar to what they did- Basically write programs to deal with certain "template" problems. The silly thing is I remember for the Final Exam, all they did was check the main program list, so if you archived the programs, you could get them back. Aside from programs to help me I wrote guessing games, a 3-D Graphing program, and a snake game.
Another option is QT which works everywhere.
ServiceStack.Text nuget seems to have what you need: [http://docs.servicestack.net/dump-utils](http://docs.servicestack.net/dump-utils)
Is it running in IIS, or is it just running as a desktop app and listening on a port for incoming requests? 
&gt;It all works fine. I don't see any issues with electron So running a single application which consumes half of GB in idle mode is acceptable to you ? Have you seen what they did with PostgreSql GUI ? It is freaking nightmare... unusable.
It' running on IIS (somehow) i still didn't catch that one how and listening on a port for request.
I also wrote a snake game! I included a "teacher" button to make it look like you were working and gave it to all my friends haha. My favorite program was a Connect 4 "AI" that was actually able to beat me maybe 1/2 of the time
&gt;Qt is very much still a contender It is not a contender... it is freaking standard for GUI design. I can't believe MS never bought it from Nokia :/ What we have is complete mess in GUI design. &amp;#x200B;
100% agree. Have you seen what they did to postgresql UI (electron version). What idiot thought building database GUI on top of html framework is a great idea ??? ... I mean... really ??? 
Electron came out from hell !!! I see people building all kind of unnecessary crap on top of this platform. Yeah... I love 100MB applications "Hello World" application which takes 1 GB of memory.
Is there any alternatives? I got like 30 ojbects printed into the console.
The kid sounds under 10 years old...
That’s a very small subset of all types, lets look at what was replaced now All non generic collections and the way you work with them All of the non generic code they had and pretty much anything that required casting to/from object LINQ and with it all the knowledge of how to work with collections. Everything they learned about ado.net has been replaced with higher level API. Anything they may know about UI applications has been replaced with newer UI Framework Anything about code access security is no longer relevant Anything about app domains is no longer relevant (.net core) Anything about code generation is completely different. Yes there are a few base type that didn’t change, but that’s almost nothing. I started C# professionally later than OP did (C# 2.0 IIRC) and out of a 1k page book on .net back then it would be ~= 100 pages still ok, 100 pages not wrong (but with terminology that isn’t up to date), and about 400 each of pages that would not work and pages that would be obsolete and not recommended. It is easier to relearn it than to learn the changes because at this point it’s mostly changes. Especially since they haven’t used it professionally for &gt; 10 years and aren’t even comfortable with all of that obsolete stuff anymore
At that point (when Nokia still owned Qt and were looking for a buyer) Microsoft was totally uninterested in crossplatform UI tooling, despite having their own nightmare of Mac ports. Besides, if they really wanted it, they could buy Digia out of pocket change (much like they did with Xamarin). Whoever decides the future of GUI tooling in Microsoft deeply believes the future is HTML5/JS. I'd put my money on them investing manpower in solving Electron and HTML5/JS desktop applications, rather than looking at any form of native cross-platform alternatives.
my mum was kicking my butt when I was a teenager programming 68000 assembly Amiga demo in the 80s, because I had an history exam to prepare
Wasn't aware of this new feature. Would've saved me a lot of redundant code over the years when using the `TryRemove` method on a `ConcurrentDictionary`, having to declare the out var for the removed item, but very rarely subsequently using it! A good addition imo. &amp;#x200B; `ConcurrentDictionary&lt;int, string&gt; _cd = new ConcurrentDictionary&lt;int, string&gt;();` `_cd.TryAdd(1, "One");` `_cd.TryAdd(2, "Two");` &amp;#x200B; `// Discard` `bool _removed1 = _cd.TryRemove(1, out _);` `// vs` `// Redundant variable declaration` `string _removedItem; // Never used other than as the out param in the call to TryRemove` `bool _removed2 = _cd.TryRemove(2, out _removedItem);`
0x80 is 1000 0000 in binary, so it's masking out all but the left-most bit (msb). Multiplying by two is the same as shifting all bits to the left one step. So it's checking the msb, then shifting a new bit in to the left-most slot, and repeats.
Console.WriteLine(JsonConvert.SerializeObject(yourObject));
Ahh, the bit shifting is the weird part for me. This clicks now. Thank you so much.
Well done.
This
It checks the bits of the byte in left to right order and returns true for each bit that is 1, and false if it's 0. bt *= 2 is the same as bt &lt;&lt;= 2. So if the byte is 65 (01000001), it will check the first bit (representing 128), and will return false. Then we shift the byte which makes it 10000010, and then check the left most bit again. This is repeated 8 times to check each bit.
You are mistaken or not explaining yourself properly. You cant host a WPF app in IIS as a WPF app is interactive... you must be missing a piece of the puzzle 
But can I host a wpf app on IIS and only stream data from it?
No. Wpf is interactive and IIS cannot run interactive code. You can host a website or web service on IIS that streams data from a WPF application I guess, although that's a terrible idea... 
So it seems I'm doomed. Don't get me wrong I myself am involved in kind of development with this idiotic let's call it architecture, and am braindead cause I come from a world where you actually have a web server and a framework that is a web framework, the college's that built this somehow even consider this a "good approach"
Do you have the code? It should be easy to tell which is which... do a tree or dir /r from the IIS directory and we will be able to tell you what kind of service IIS is hosting
Not atm. But when I get some infos I coule share.
Excel was the gateway for me too. Started by recording simple macros, then tweaking the code and seeing what happened. I hate working in VBA so I'll still record most things and clean it up, but it's definitely what got me into programming initially. Side note, I find explaining arrays in excel terms the most intuitive. A 1-d array is a single column. 2-d introduces a second column to the mix. 3-d includes multiple sheets, then into separate workbooks etc. I've rarely found a use for anything over 4d and that was only back in the vb6 days. 
&gt; I know that HttpClient = new HttpClient can cause problem, and I solved this by binding it using NInject DI. Whether that solved it depends on how Ninject creates the instance. It might very well be that Ninject just creates a new instance all the time and you gained nothing. &gt; But by newing the AuthenficationHeaderValue, can it cause trouble in the future? That is way too vague to give an answer too. It depends how that instance is used.
Recent C# versions introduced binary literals, which might make this more readable. You can replace 0x80 with 0b10000000.
[Yes, it's fine.](https://i.imgur.com/VmAJTWr.png) I still have half my ram left with VSCode (1 loaded project), Postman, Discord (in 4 servers) and non electron apps like Visual Studio 2017 and SQL Server 2017. I still have nealy half my ram available. Could they use less? Of course. Are they slowing down my computer? I've never noticed. They can use half GB of ram if they want - the benefits of them outweigh the cost.
[I use that, too.](https://i.imgur.com/VmAJTWr.png) Discord, Postman, VSCode and normal apps like VS 2017 and Sql Server 2017 = still have nearly half my ram left.
For your project what is considered a sufficient performance? Because we position ourselves as a "ultra super duper fast" performers (1 billion data points real time) and im just questioning if people actually need so much performance realistically 
You can also inline-declare variables. bool _removed2 = _cd.TryRemove(2, out var removedItem);
At work, I've purchased 3 commercial charting libraries. One was good with WPF databinding and limited performance, one had options between excellent performance &amp; no databinding and worse performance with databinding, and the other was just a feature of a signal analysis package but also had great performance if hosted inside a windows form frame. &amp;#x200B; If I had to rank my preference, I'd say performance is #1 because if it doesn't perform or lags it is distracting and doesn't do its job of conveying information in a reliable manner. Closely behind is having the desired chart/plot type (I need animated 3D charts that resemble terrain to model signal spectrum vs time) which I'm sure is somewhat of a crap-shoot for charting package developers. Ease of use is very important. Databinding is desired, but since this affects performance, is not required. &amp;#x200B; Believe it or not, to a certain extent, price is not considered. 
Recent C# versions introduced digit separators, which might make this more readable. You can replace 0b10000000 with 0b1000_0000. 
&gt; Sure, we know x is five...but is that an int or a double or an int64 or what.... We know that it is an `int` because we assign an integer literal to it.
This is really sweet. It reminds me of how my dad got me into coding. I was a tinkerer as a kid - I'd take PCs apart, put them together, install Windows in various configurations just to see how it worked. I was always curious about how to make an EXE. I really wanted to make my own programs but only knew the beginnings of HTML. So, we sat down one night, and coded a little program together in VB6. That was about 15 years ago, and I'm now a software engineer and studied computer science at university. You may not realize it now, OP, but you may have just influenced the rest of your boy's life just like my dad did with me. :)
How many am I using currently? 3? 
&gt; Whoever decides the future of GUI tooling in Microsoft deeply believes the future is HTML5/JS. I'd put my money on them investing manpower in solving Electron and HTML5/JS desktop applications, rather than looking at any form of native cross-platform alternatives. This is 100% what I believe. I think if MS were truly interested in cross-platform all-native solutions, we'd see them leveraging the investments they have. Instead, even though they *own* a product that does this, they've chosen to abandon one of their oldest and most iconic products to adopt the browser technology behind Electron. That seems important.
Yes, that's it. The reference only goes one-way, though. The UI project (JS UWP app) references the C# library. The library can't have any visibility into the UI project, otherwise, you'd have a circular reference.
I was attempting (and apparently failing) to explain in an easy to understand fashion. Literals existed as far back as c# 1.0 but plenty of people weren't familiar with it as a concept until the introduction of var. You can do double x = 5; Or you can do int x = 5; In both cases you are using '5', the compiler uses the explicit type you provide. When you use var and explain that the compiler will infer the type, it is often unclear to people what type x becomes when given the same value that could have been a double, int, uint, long, ushort, byte, sbyte, etc, etc.
&gt; I'm actually a high-school drop out and convicted felon.. Programming started to become a passion of mine before I was in middle-school, and I'm near 40 now. Awesome story! )
I’ll be honest, I’m not gonna read that on mobile. I’ve coded C# for many years, I know what was replaced. I was just making a comment that some very basic types are the same.
the function will be called every minute to refresh the data as some kind of datapoll. What do you think? :)
Perfectly balanced...
I kinda just gave it a shot and when I hit a wall I Googled it. At the end of the day the hardest part is finding something to break up into microservices or coming up with an idea to use microservices. If you are familiar with onion architecture, you could as a tester for yourself, turn your services into microservices, front those service with a webapi controller that has the same interface and see if you can get them to talk to each other. Just deving in VS with Kestral is fine for this type of learning. Next see if you can add docker compose files to the projects and wrap them up in containers so you can run each one as a seperate container.... even try and containerise your database. I honestly have no good links for you to try since the way I learn is starving myself from sleep by staying up and experimenting lol. Good luck!
Hmm, have you thought about writing a few example microservices and showing them off on github? If you can't get professional experience, you can still demonstrate sufficient levels of knowledge by showing off the source code and, hopefully, have a few deployed working examples that potential employers can play around with. Now, whether or not a potential employer will consider such projects as sufficient replacement for professional experience will be up to the individual employer. A lot of the problem might come from the fact that a non-programmer person, presumably an HR rep or whatnot, is filtering the resumes and are being really strict in how they interpret a resume that basically says "no professional microservice experience, has personal microservice projects". If your resume makes it to the hands of an actual developer, then, armed with personal microservice experience, you should be sitting pretty. I could be 100% wrong though. I wish you luck.
To add, we purchased a license for LightningChart and the performance was great and it has all of the chart types we need and had great documentation. However, at some version the process of validating the license change was a real pain in the neck due to our security restrictions of only being able to install the software on a non-networked computer. I don't remember the details but we had to stick to an older version for this reason. It's not the developer's fault, but these sorts of security restrictions do affect purchasing decisions.
This statement adds absolutely no relevant information.
You can reference WindowsBase from asp.net application and use WPF libraries for some stuff (e.g. we used it to make documents for printing as you can send XAML element to PrintQueue)
Sure, but understanding the fundamental problem and having a generic way to solve it is pretty good (if the son did the programming on its own). But that’s not the point. I think the son will have plenty more possibilities to do math. But this was a very good chance to introduce him to a (for kids) boring topic of programming. I did the same with my daughter when she invented a secret language for her friends. 
Microservices architecture is about dependency inversion. The first step is build low coupling components on the same assembly, then you can move that component to another physical place. Micorservices does not mean zero dependence components, its just another flavor of dependency. If you dont' care your quality standards, you will change your single application bug-gun for a new distributed bug-shotgun. &amp;#x200B; Uncle bob writes about this topic on "Clean Architecture" , i like his opinion about microservices architecture. &amp;#x200B; You will need strong qa skills (unit testing, mocking, automatic deploying) and strong architecture skills (SOLID, design patterns, DDD). Its too easy increase complexity on all system if you dont´t have proper cares.
&gt; the right path.. VB6 Easy there, Satan. Sounds like to notch parenting to me aside from that though!
Check out [EnsureFramework](https://www.nuget.org/packages/EnsureFramework/). You could write your own assertion like: public static class MyAssertions { public static IArgumentAssertionBuilder&lt;IEnumerable&lt;string&gt;&gt; DoesNotContainDuplicates(this IArgumentAssertionBuilder&lt;IEnumerable&lt;string&gt;&gt; @this) { if (@this.Distinct().Count() != @this.Count()) { throw new ArgumentException("Collection contains duplicates!", @this.ArgumentName); } return @this; } } Then you can just call: Ensure.Arg(()=&gt;stringarray).DoesNotContainDuplicates(); // or Ensure.Arg(stringarray, nameof(stringarray)).DoesNotContainDuplicates(); 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_soux_071] [Teaching my son to fall in love with code](https://www.reddit.com/r/u_soux_071/comments/ay0dpx/teaching_my_son_to_fall_in_love_with_code/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Most of the time, you create a folder for the web site (and set it up in the web server's config) and drop the files into that folder. Or, even easier, use VS to "Deploy" to the site. .Net Core web apps can run as a standalone app with an embedded server. I've never actually set one of these up, so someone else might be able to help you with this. Presumably, they're just like a CLI app (or at least that's how they look to me) except they have a run-loop instead of a start-to-finish execution setup. Database access is done through ADO.Net, regardless of the type of project you make. You can use it from the System.Data namespace. There are a number of libraries that abstract away much of the tedium of it, such as Dapper. There are also ORMs like Entity Framework. To configure the actual database connection during deployment, you use a connection string in a config file (or secure config container) which the app will use to set up the database context.
See... I know what the code above is LINQ code, but I have no idea what it does or how you would use it. What is the value of "query" after that?
Nothing professionally. I took a long break from work due to some family medical issues and then I went back to school. I was using Java in college, which was close enough to the C# that I knew to hit the ground running, but it is definitely uglier. I am looking forward to getting back to C#.
FYI: My tests in LINQPad show that this does not avoid the allocations - it is just syntax sugar - don't go and modify existing code if you think this will be a performance increase.
PHP arrays are just nested dictionaries. It looks like the key in these is a string, so that's at least pretty easy to work with. It's not appreciably different from JSON, except it uses () instead of {} and it puts [] around the keys. (It also looks like you stripped the inter-element commas from your example, but even if they're returning the response without them, it looks like you could use \n instead.) I bet there's a JSON library out there that lets you adapt those things.
This is awesome! Thank you so much for sharing.
Show us your code, and consider running questions like this past r/learncsharp.
Satan would teach their kid FoxPro. [sigh.. my company still has some foxpro we have to support for production stuff]
i have updated the OP &amp;#x200B;
Array? A notepad is an array. Each of the pages is the elements. The page number is the index. Give living example. Easier for him to illustrate. 
You don't "use" params. Split has an overload which takes any number of characters and split based on them. Like: string[] sentenceArray = sentence.Split(' ', ',','.');
Yes, I definitely won't be modifying existing code. But in future development it will allow cleaner code with a clearer intent, i.e. I don't need the removed item so it can safely be discarded. Also the MS Docs state: *Discards are equivalent to unassigned variables; they do not have a value. Because there is only a single discard variable, and that variable may not even be allocated storage,* ***discards can reduce memory allocations****.* So I guess there is potential for a performance increase depending on the use case. Still wouldn't re-write code though......
I don't understand this point of view. We think kids always need to "practice" things, but nobody would ever suggest an adult do something for "practice." I don't go to my job and unnecessarily do the same task five times in a row "just for practice." &amp;#x200B; &amp;#x200B;
It would be an anonymous object containing the properties in the select portion of the LINQ query. There is another syntax that uses methods which may be more familiar, but uses lambda syntax. var query = someCollection.Where(x =&gt; x.Name == "Foo").SingleOrDefault(); 
&gt; Console.WriteLine(sentenceArray.ToString()); This will try to output the high-level array _object_ to the console, rather than the array _entries._ To output the entries, a quick loop can be used: foreach(string word in sentenceArray) Console.WriteLine(word); Regarding using `params`, see the other comment and check the examples here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params
If you are unhappy/unfulfilled, try to find something better. Don't quit until you do. Repeat. &amp;#x200B; Note: I have worked for fortune 500's and startups... Both have their pros and cons. Startups can be chaotic, but you tend to get to work on greenfield projects (and sometimes have more room to try new tools). Enterprises can be more structured and predictable, but also a bit more boring. However, neither is always true.
Why? Just let him be a kid. He has time to fiddle with code when he grows up.
Why do you force your kid, let her play
/thread
Did you miss the part where it was her idea?
How old is he? I might be soon in the same situation and want to hook him too
Might wanna play with Python as an introductory language. It's easier to read and understand, and may be more intuitive for him
Ok, that is a good starting point. Then I would focus on getters/setters (should take you all of 2 seconds), then lambdas, delegates, and events. Once you understand those you are 90% of the way to catching up.
Yeah, anonymous types pretty much became outdated after a single version because they added new features the filled the same role but better.
This is how I passed math in High School. To be honest, I'm not great with most math stuff (got a lot better during college) and my memory is bad even though I have a CS degree. I programmed a calculator application that contained every formula I ever had to touch in classes. Instead of listening to the teacher during lectures, I would just start programming the formula. I had series of menus based on the classes I took and the chapters they were in, the formulas prompted for the missing variable(s), and then it would work it out step by step in both decimal and fractional formats. Giving the final answer at the end. Ended up selling it to other students for $50 a pop and made a few hundred.
What part do you need help with? Displaying it on a TV monitor is no different than a computer screen.
If you want to do it without using external libraries, you can use Reflection. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection
Apart from doing an array to print each of the words in your sentenceArray, you can also join them back like this. `Console.WriteLine($"{ string.Join(" ", sentenceArray}");` so this may help you later if you want to print them in other ways, or return them to its original state. 
Sounds like your mum was a real assembly expert.
I basically need help with the UI part how to design the gridview with updatable elements as shown https://imgur.com/KpPrENb
Do you have any previous knowledge in windows forms or wpf? Or is this all new to you?
Correct me if I'm wrong but wouldn't it be 'small man'? 
Serialize to text (like with a JSON library) and output the text. &amp;#x200B; If you only have objects of one or two ***types*** to display, on option is to just override the ToString() method and return what you want the output of that object to show, as the object overload of Console.WriteLine() just calles ToString of the object. &amp;#x200B; I think serialization to text is easier and more generic though.
i do have previous knowledge but it's not indepth for sure. I was thinking of any ui controls like devexpress/kendo ui etc which might provide the specific gridview looks. 
Kids get ideas from their parents. It reminds me of parents who send scientific projects to school competitions.
You are correct.
I had more time as a kid because I could program. 
For one thing you could use a database that natively supports this like CouchDB.
I'm assuming you don't have children, so maybe you've never really thought about the kind of parent you would be, but I don't think I'd be doing my job as a parent if I discouraged my child from learning skills that will enable her to be a productive member of society as she enters adulthood, so I'll do just about anything I can to foster her growth. I won't do her homework for her, as you're implying in your example of parents sending science projects, but I refuse to stifle her growth as a human being. If she wants to learn, I'd be doing her a great disservice by telling her "nah, go play kiddo, learnin's for grown ups"
Unfortunately this is not an option at my company.
&gt;4.Request-for-help posts should be made with effort &gt; &gt;Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a Minimal, Complete, and Verifiable Example. Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators. &amp;#x200B;
Some FoxPro? Our companies main selling application is FoxPro enhanced through .NET dll interop done by JSON converting &lt;-&gt; because some CLR types cannot be properly accessed by FoxPro (who knew?!)
I'm not crying, you're crying!
What is the list of types you aren't supposed to use any more and their generic equivalents? ArrayList is List, right? Hashtable is Dictionary? Are there any others?
How old is he?
I'll be your dad.
Wow. Would love to get my son into code. He loves to play games but very little interest so far in programming. He occasionally watches me while i work but gets bored quickly - not that I blame him.
Type of remote database? how often do you need updates? Is a connection always available? So many more questions I probably haven't asked to answer this. 
An anonymous object? I'm not sure what that is. How would you actually use it?
Getters and setters... Aren't they automatic now? Like public string Name { get; set; } rather than having to write the code manually? I think I understand lambdas although I do not see how they are more useful than writing a separate method. x = () =&gt; Console.WriteLine("test"); doesn't seem all that different to me than private void x() { Console.WriteLine("test"); } Events and delegates I was fuzzy on then and still fuzzy now. Events of web controls are methods that are fired when a particular action happens I think... No real idea what delegates are.
Also SQLite. I need updates whenever the user decides to record data which can range from 10 times a day to once per month. Connection is not always available on mobile devices. 
If you want to have the user provide a mood, you first need to change how you're getting their input. The following line will only take in one character: char ch = (char)Console.Read(); You need to change it to accept a string: string userChoice = Console.ReadLine(); It's also a better idea to adjust the user input rather than trying to adjust the tests: string userChoice = Console.ReadLine().ToLower(); If you need to keep the original string as well, you can always save a ToLower version in a different variable. Now that you have the info you want in a format that's easy to compare (a string in all one case), you can write simple comparisons in your "if" statements: if ( userChoice == "happy") { // your code here } You may also want to consider looking into/using a switch statement rather than a bunch of "if/else if" statements. 
There are answers on how to improve speed or why it is slow, but I didnt manage to find anything about "Why native bitmap do not have faster implementation".
It's an object that doesn't have a type, and arbitrary properties. Similar to creating an anonymous/untyped object in Javascript. In this case, we select a new Person object. var person = people.Where(x =&gt; x.Id == 1) .Select(x =&gt; new Person { Name = x.Name, Address = x.Address }); Console.WriteLine(person.Name); In this case, we select an anonymous/untyped object. var person = people.Where(x =&gt; x.Id == 1) .Select(x =&gt; new { Name = x.Name, Address = x.Address }) Here, person has some crazy compiler-generated type, but you'd use it just the same as any other variable. 
Time to play with a Raspberry PI?
It is not about doing homework for your kid, it's about pushing your kid to pursue your own dreams and to become someone you could not. Kids are not your projects. If kid wants to play or study of course you will be supportive in his original thoughts.
My son asked me why gravity is such a weak force compared to magnets. I told him I didn't know. Thanks for listening, all. 
Can you use dependency injection instead? Then if a new dad comes along we don't have to rip out that class from all over the place. TIA
Kudos for being truthful, now go and find out the answer. 
I listened and I enjoyed. As others have mentioned one of the presenters sound quality was a little low. Otherwise I thought the content and vibe was good. I'll definitely listen again. The only thing I thought, and it is more of curiosity more than anything, is does .NET news come fast enough to do a weekly show on it? I feel that this show covered most of the news of the last month or so. So I'm curious to see what the next shows bring 
Remove EF from your business components it's hard, very hard. You will need deflection layers, i prefer build EF objects equivalents in my business rules components. Using a IProvider&lt;MyEntity&gt; to abstract data context access (IProvider and Business Entities will live on Business assembly).Initially, this providers will live on domain objects, eventually i will be ready for move that objects to an DataSource speciallized assembly with EF Data context. The final step is change Datacontext to internal access. &amp;#x200B; You may add annotations to your business objects instead EF Objects.
The var type is an ienumerable. Linq returns ienumerable
This is so god damn wholesome. Thank you for existing and doing this!
&gt;I have a two problems: The ApplicationDbContext exists in the Domain layer, and the entities of the domain are tied to EntityFramework. That's only one problem: you don't have a domain layer, you have a data layer. Create a new .csproj with no reference to your data layer and that your data layer .csproj does not reference. Copy the data layer classes into the new project in a new namespace. Change your controllers (if this is an MCV thing; if there's some other access model then change the classes it uses instead) to accept the 'new' types and use AutoMapper to convert the 'new' types into your (currently more or less identical) data layer models when writing to the DB. Now you have two separate sets of models, neither of which has a dependency on the other, that you can modify independently. You just need to configure AutoMapper to do the correct mapping between them if you make changes to one without changing the other. You'll probably also want to separate your true 'domain' objects (that you do business logic on) from the DTOs (used for receiving requests and returning to callers) and use AutoMapper in the action methods to map the DTOs you receive from callers to the domain objects your services accept. If someone is creating a new purchase with a POST request, you should not trust them to choose the Id and User for you, so you would have a DTO like: public class PostPurchaseRequestDTO { public double PurchaseCost { get; set; } } and potentially respond to that request with a public class PostPurchaseResponseDTO { public double PurchaseCost { get; set; } // mapped from ApplicationUser on the assumption that // the full User object contains potentially sensitive information // that the caller does not need. This is just an example. public string UserName { get; set; } } &gt;Instead I create some repository interfaces that the Infrastructure class library instead can implement with the DbContext. Don't do this. It's fine for services to depend on the DbContext. 
It helps with mocking your dad too
You are at that point where what you need is practice probably more than reading books. Set yourself up with a series of practice problems, do a few each day. Also, I would suggest when you do them, maybe ALSO solving the same problem without linq. This might help give you an idea of what linq is actually doing, and to get an idea for how performance differs, and when linq isn't worth using. You can also browse the linq source code to have a deeper understanding of it. 
You're testing my patience.
My dad showed me autoexec.bat when I was 10! Thanks, both our dads. 
Personally , i found Xslt a better alternative to perform complex queries over xml files. Linq with xpath its an ass pain.
Great suggestions, thank you. I think I do need more practice. I sure would like to find something similar to regex tester but for LINQ. Have you ever run across something like this?
I agree with you in that Path makes more sense to me, but there some grouping situations where I have found XPath cannot help and I need the grouping/aggregate functions within LINQ.
It uses the .NET framework so my guess is that you are using a different version of the .Net Framework in your old project then is being used in the new Speech project. 
You could try sqlserver xml queries if you need to extract info (like a report). Its very slow but powerful
you can probably just set up a template console project that is effectively that for yourself pretty easily. 
You are an excellent father
Perhaps the best book on software development ever written. Love that your introducing your daughter to it early.
Emoji language
Okay I'll take a look. Also, I'm using visual studio 14. Could that be causing the problem?
&gt; realistically Ok.. rant time. Realistically the enterprise devs make poor data model decisions (or none at all), get surprised that their huge single table of datapoints without indexes or relations grows to unmanageble sizes, in their hurry to douse yet another fire they pick some proprietary solution that does all the writing super-fast but their API makes it impossible to extract the data in any meaningful way while also giving random custom OutOfMemoryExceptions you can't catch, based on magic numbers even though splitting the query and storing way bigger lists is no problem. There's still no way to tell that what the datapoint represents, other than its tag, and then manually look up that tag's description in a completely separate software that stores the data in dbase. Still no proper data model - the descriptions are abbreviated, it's impossible to simple look up keywords as there is no standard - most of it is ad-hoc by whichever engineer to finish the task at the time. Let this go on for a few years and eventually all the engineers and the developers will think that what you're saying is absolutely impossible and not even consider the option - they're happy with their 5 minute timeout queries to extract a few thousand points and create static reports. Yes, we need this much performance. It would be absolutely incredible to implement this kind of charting for our product. But no one will believe me and certainly wouldn't be willing to spend money because we currently "are able to retrieve data" as they told me in a meeting when I tried to explain why we need to use a proper SQL solution and data model for the billions of points we collect on a single project over the course of 6 months, out of dozens of projects. There was an initiative a while back where suddenly a separate data analytic company were supposed to find a solution for us - a developer spent days just extracting 500 GB of data that we sent as... csv So much juicy data to be extracted, correlated and analysed and sold as new products a massive industry would be very interested in, just collecting dust.
Basically, the classes in the System.Collections namespace have been replaced by the classes in the System.Collections.Generic namespace. ArrayList =&gt; List&lt;T&gt; HashTable =&gt; Dictionary&lt;TKey, TValue&gt; Queue =&gt; Queue&lt;T&gt; Stack =&gt; Stack&lt;T&gt; SortedList =&gt; SortedList&lt;TKey, TValue&gt; That's about it.
If I had written `select person` then `query` would have been of type `IEnumerable&lt;Person&gt;` but now it is an Enumerable of a type implemented by the compiler. You cannot write it out, so you have to use `var`. It is handy when for example you are querying a database. You can write the equivalent code in method syntax: var query = peopleCollection.Select(person =&gt; new { person.Name, person.Age }); &amp;#x200B;
Youre a good dad 
&gt; VB6 VB6 is where I started before finding the C# light. It's actually not that terrible, although it is a little different to .NET.
Does anyone know why gravity is such a weak force compared to the other fundamental forces?
The thing says it requires 2017 so maybe
Alright I'll give that a shot first. Thanks!
Yeah, [check this out](https://www.youtube.com/watch?v=S-VAL7Epn3o). Absolutely mind-blowing that these kids (at the time) basically wrote their own compression, shading and graphics.
Okay, let me give you a little puzzle that I apparently can't seem to solve. It's two-part, one very easy then suddenly it gets difficult. * Part 1 (easy): Make a Sphere class. * It has the properties: R, Volume, Surface * If you set the Volume, calculate and set R * Part 2 (hard?): Make an Ellipsoid class * It has the properties: X, Y, Z, Volume, Surface * If you set the Volume, recalculate X, Y, Z - retain the shape of the ellipsoid
/r/learnprogramming or /r/learncsharp 
Hope to be that dad one day :)
It could be done with HttpModule/HttpHandler(s), but that would be pretty crazy. Using a WPF app as a web app is pretty crazy to begin with, though. Is IIS maybe using Application Request Routing (ARR) to pass through requests to the WPF app? (meaning the WPF app might be handling TCP sockets itself, which would be even crazier)
This
&gt; he's going to start on the right path... VB6 CPS wants to know your location
Just turned 12. I started coding around the same time when I was a kid. GW Basic and MS DOS 2.1
He's 12. Same as as me when I started coding. 
Python over C#? Is nothing sacred? *grin*
My son too. He has a YouTube channel where he used to post Let's Play vids and rubiks cube puzzle solves. He's better than me at both. 
Go get em tiger
Problem reference not set to an instance of a problem. 
My dad threw a fucking java book at me and said learn!?!??
Why do Java Dads wear glasses? Because they don't C#! 
Yeah. I said it's like a list where each item can be accessed by its number. 
Shhh. Don't tell my wife. 
Thank you too. In candor I had a shit day at work and seeing all of these comments has made it a lot better. 
I thought it was because gravity isn't a force so much as a warp in spacetime. Forces are emitted from atoms whereas gravity is an expression of displaced space. 
Should have started with C++ and depth first search algorithms for trees. Amateur.
He's the better parts of my wife and I for sure. I'm a lucky man.
Hard to compete with YouTube these days. I remember all those hours I spent as a kid lost in code learning BASIC on my 286 PC with MS DOS.
and how exactly is he treating his daughter like a 'project'? there's a reason why he was reading silently to begin with .. he isn't trying to force anything on her. she wanted to hear him read aloud, and so hash_bang complied. maybe she'll be into it, maybe she won't, that's why hash_bang22 said he 'hopes'. kids aren't projects, but I think it's part of a parent's responsibility to push them into trying new things; help them pursue what they're into, and disregard what they're not into.
Yes, that is what a lambda is, but its usefulness will become more apparent when you understand delegates and events. These three features are really complimentary of each other. Delegates in simple terms make functions first class citizens. They allow you to assign and pass functions around just like objects. Events allow you to assign multiple functions to a single delegate so they all get called when the delegate is called. Lambdas are most often used as a way to assign a simple function that won't be reused to a delegate. This just helps to keep your code cleaner and more straightforward. Obviously, these topics are more complicated than this, but that should give you a good idea of the general purpose. 
This is absolutely the path I'd recommend to people... maybe just because it's the one I've followed. But that path got me a 40% raise this year, so... 🤷‍♂️ Excel has so many simple tools that make it easy to get quick, real world returns on small investments. That was massively motivating, and probably what's keeping a lot of people from having the drive to keep learning. Formulas, macros, VBA. Hell, you can learn the basics of APIs and database &amp; query logic through Power Query. The whole time, the object model is present but automatic enough for the user to ignore. I will defend excel till my dying day.
Each record Should have a hash. The hash should be stored locally and on the server. Assuming that local copy is by definition the most up to date version, you could query the list of hashes that are not in the server database on a regular basis and add them.
I think the key is "unnecessarily". If my job were to give a speech, sing or act in a play I'm pretty sure I'd still practice even if I had everything memorized. The job of a student is to learn how to do something and then demonstrate that they have learned it during a test. That means they have to commit something to memory longer than at least a day. Doing something over and over again is a proven way to commit things to memory. That's why many students cram the day before a test. They didn't really commit everything to memory and now need to rely on shorter term memory to get through the test. The job of an adult is to learn to do something and then do it. You're expected to practice as much as you need to in order to accomplish the goal, often on your own time. Adults are expected to have that discipline, kids not so much. That's why schools focus so much on repetition, especially at younger ages.
As a kid I hated all the "practice". As an adult I appreciate it. I look back and see that it taught me patience and how to concentrate among other intangible things. Practicing those smaller "trivial" things helped me to learn how to tackle larger problems. As a programmer I write a lot of code to handle multiple issues. Often is the case where I'll write code to solve a problem and it works fine. If I come back a week/month later I have completely forgotten how I solved the problem because I learned it once just so I could write the solution and from there let the program handle it. 
You could just you struct layout and shared memory... It would probably be faster.
Turns out, by learning assembly for the Amiga, you WERE doing history.
This is enough for me. Existential crisis averted.
all of the worlds best software breaks design principals at times. some of them even actively avoid them. just do what is simplest and works.
I have 4 gb ram, and postman used to take up 800mb sometimes. That's a big chunk of my ram. Which leads me to a question, is the onus on me as the user to buy a more powerful machine? or should the software try to be more resource efficient? In other words, is the user the problem in this particular situation? Regardless, I built a different tool called nightingale because postman consumed too my ram for my uses. Have you tried? Would be cool to get feedback. https://www.microsoft.com/en-us/p/nightingale-rest-api-client/9n2t6f9f5zdn 
My Tandy 1000 SX came with a little GW-BASIC reference guide ([exactly like this](http://www.antonis.de/qbebooks/gwbasman/)). I flipped through it and was so excited when I realized I could use LIST to view the source of all these BASIC games that I had. Good times! Very education too and probably the reason I'm a software developer today.
I would consider tying the steps together with a routing slip or saga. This way the individual steps are independent of each other and can be unit tested and swapped out easily. It also lets you continue processing where you left off. The results could all implement a generic interface (IProcessingResult&lt;T&gt;) where the generic parameter is the actual DateTime, string, int, or even a specific class.
Removed: Rule 4.
Well if you are already in a place with old code, then might as well use it. I mean anywhere that a method with out variables is called, and I am in that area anyway, I have two options: 1. Inline out var 2. Use discard Depending on the use case. But going around and changing everything just to change it? No. Do it in new code? Yes
Yes, in C# 7 you have two options that cleanup your code. 1. Inline out var 2. Discards
Fortunately testing your patience doesn't mean touching your private members.
&gt;I have no clue what asp-actions are in any of the .cshtml files. if you have cshtml files then that is no longer an api, it's a mvc app. asp-action is use to specify the action method of the anchor tag. they're alot of tutorials on building api with dotnet on youtube 
If a book works, ASP.Net core in action may be an option. Starts from hello world and then goes into most of the important features in depth.
this
The “params” keyword means that you can pass one or more characters to split the string on. In your case, you are only passing one character in, which is fine. It looks like you are splitting the words up correctly. In regards to outputting, you cannot directly print the list of strings directly onto the console. However you can use string.Join() For example Console.WriteLine(string.Join(‘ ‘, words));
That's the current conception, yeah, but more and more physicists are thinking this is a hack (the whole space-time warping from gravity) due to difficulties in unifying it. There are some interpretations where the reason that gravity is weak is because it's a force that is exerted in a higher dimension and it "leaks through" (is partitioned, really) through to our own and that's why it's weaker. But no one really knows is the honest answer. 
The best way to understand something is to code it.
&gt; .NET Core SDK installers will now Upgrade in Place So... like .net 4 became 4.5, 4.5.1 etc up to 4.8 or what it is now. Sounds good to me, the previous churn wasn't great.
I'm a self taught programmer; starting back around 1970 with dip switches and then moving through assembler and monitor language then basic, c, c+_+, c#, pascal, delphi, vbasic, fortran, cobol, forth.... My son can do puzzles I can't. I live in China and bought a plastic egg that comes to pieces and inside is a smaller egg and another even smaller inside that. Three layers, a 3d puzzle. I figured out how to get the first layer off and was stuck. He disassembled it entirely then asked me for help to put it back together - and I was completely unable to help. Never mind within a few days he had figured it out and put it all back together again. Me, him, and my daughter have a shared minecraft server we build villages in and design monster traps. I still cannot solve a rubik's cube (apart from the first layer) without instructions; if your son can that's awesome! I love the next generation of kids!
Also, keep in mind, LINQPad is not necessarily fully optimized release builds :) 
I feel like the blog post was a bit short and could have mentioned ValueTuples in combination with Deconstruct(-extension)-methods, it was more like an introduction into to the old (bad) tuples and the new into the language integrated ones 
Hmm. Maybe I can extend it and add what you suggested. Not a bad idea
My dad just gave a commodore 64 with a book about BASIC. When I was 13 - two years of playing games on c64 behind me - I was so bored that I picked up the book and started. Now I am 40 yo dev without any formal education. Writing code is and always was fun to me.
override the ToString method and the just print your objects.
To make your life a little easier I'd recommend having a look at [Flurl](https://flurl.io/) , which makes it easier to create Urls without errors and [Refit](https://github.com/reactiveui/refit) which acts as an interface in front of a REST API
Oh god why.
I would start with 2 projects in the solution: a library that provides the logic for the integration, and then a console application that references and uses the library. Once you have the core integration logic working you can decide if you want to create an ASP.NET front end instead, and your job will be easier because you already have a working library that you can reference to perform the integration logic.
I don't have issue with vb6 itself, my issue is people continue using it and legacy programs built in it and that can and does hold up progress. 
I'm using it whenever I can, it's great.
https://www.codewars.com/?language=csharp IIRC there's a lot of linq-ish tasks.
I prefer [lolcode](https://github.com/justinmeza/lolcode-spec/blob/master/v1.2/lolcode-spec-v1.2.md).
Now we're talking.
Have you tried VSCode? 
Yeah, me too to be honest. I used to use the Try pattern (like C#'s TryParse) but I switched to ValueTuples since they were released
Create your API first and don't focus on the Azure part for now. Hosting your API on Azure is basically right clicking on your project, clicking publish and entering your Azure credentials. I'd also not bother with containers (Docker), unless you want to learn about microservices as well. Check if you have access to [PluralSight](https://www.pluralsight.com/) through your work or school. They have really good courses on everything ASP Core related. I think Microsoft provides (partial) access through their Visual Studio subscription or their Azure for Students program. If not, you could try this tutorial from the documentation: https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.2&amp;tabs=visual-studio
I didn't try it more seriously yet How good is VSCode's debugger in compare to VS? 
Yea... but no - the code has to be "future proof" for a possible migration to .NET at sometime/year/eternity in the future &amp;#x200B; People here don't do coding based on a degree (unlike me -.-').. they don't understand "magic" (structs, P/Invoke, not to mention shared memory)
I can't say for sure, but I feel that VSCode is good enough to use for debugging as well. VS debugging is probably more powerful but that's my guess. Thing is with VSCode, there is probably some extension that will help you if you feel something is missing/lacking
Not quite... Only patch upgrades will upgrade in place since all applications would roll forward on SDK patches anyway. Minor and major upgrades won't install in-place. It may seem nice how framework installs in-place, but it makes it a compatibility nightmare where every change can break something silently in an upgrade. That risk is one of a few reasons that development of .NET framework has slowed in recent years. The teams working on .NET Core are not eager to end up in the same place again.
Take a look at [RestSharp](http://restsharp.org/). Ths makes making and handling REST request a little bit easier.
&gt;This shows all the work for this type of problem forever. For the whole universe! This is the kind of thinking you can't even teach most adults (trust me)...this shows rare natural intuition.
Excel is great. But It is not a database, and I dislike working with big numbers in it. But the crux of the issue is usually users not doing something right. 
[removed]
Just like in Java, that word is completely redundant
Sure. I wrote programs for randoms, but I require a spec. Also, I think sphere should have x, y, z, and r, and ,v and S_A are f(x). X,y, and z are not used actually, unless they are used to calculate r as distance from origin. Give me an example input and output for your sphere and ellipsoid. 
WTF man take it easy on us
register on any of the Kata sites (codewars, hackerearth, etc) and try to solve the problem mostly with a single LINQ query. &amp;#x200B; As suggested by /u/jackmott2 I found codewards good site to challenge your LINQ knowledge. codewars will have shortest puzzles you can solve with a single LINQ query. &amp;#x200B; &amp;#x200B;
Best thing: you can use it with async/await no more Result&lt;T&gt;.IsSuccess or Nullable&lt;T&gt;.HasValue (which does not work with references.. *sigh*)
Never thought of that to be honest
Resharper or rider will let you switch between linq and procedural code so you can see how expressions are shaped.
Very true.. it was just quick and easy while I was on the couch watching tv haha
Astronomy/Physics are kind of a hobby of mine. He's a [picture of the moon](https://i.imgur.com/hzOkoeo.jpg) that I took from my backyward. I'm not very good TBH but I do it for fun.
Check the Ninject documentation. There's very likely a way to run code after creation of your instance. Alternatively you can replace the way Ninject creates the instance with a custom method, and there assign your value.
When I read "understanding" I always think of "in-depth", but this is scratching the surface only.
I've still stuck to using the Try pattern because of the convenience of `out var` but I wonder if positional patterns in C# 8 would allow something like if (Parse(s) is (true, var parsed)) { }
If you google "Sphere volume" and "Ellipsoid volume" you'll get the equations. The Ellipsoid gets a bit trickier to solve. Easy enough to write the Get part of the Volume, not so much for the Set part struct Size { public double X { get; } public double Y { get; } public double Z { get; } public Size(double x, double y, double z) =&gt; (X, Y, Z) = (x, y, z); public Size(double radius) { X = Y = Z = radius; } public void Deconstruct(out double x, out double y, out double z) =&gt; (x, y, z) = (X, Y, Z); } class Ellipsoid { public double X { get =&gt; size.X; set =&gt; new Size(value, size.Y, size.Z); } public double Y { get =&gt; size.Y; set =&gt; new Size(size.X, value, size.Z); } public double Z { get =&gt; size.Z; set =&gt; new Size(size.X, size.Y, value); } public double Volume { get =&gt; GetVolume(size); set =&gt; SetVolume(value); } private Size size = default(Size); public Ellipsoid() { } public Ellipsoid(Size size) { this.size = size; } public Ellipsoid(double x, double y, double z) : this(new Size(x, y, z)) { } public static double GetVolume(Size size) { var (x, y, z) = size; var v = (4.0 / 3.0) * (Math.PI * x * y * z); return v; } private void SetVolume(double volume) { // TODO: find and set xyz, keeping the current ratios } }
When my folks bought us our first computer when I was a kid it came with a menu system called "Power Menu" and productivity suite called "First Choice" and the OS was called DR DOS. As I recall it didn't have BASIC. Somewhere along the way I got my hands on MS DOS 2 (or maybe 4 I don't recall) but it came with GW BASIC. Oh the HOURS I spent tinkering and trying to make my computer do something. Eventually I replaced Power Menu with my own BASIC app. It was truly horrid. It was all sequential and full of GOTO statements. I learned to get better over time. While still in high school I had a full time job at the local burger joint. I saved all of my money and bought myself a new PC with Windows 95. I got the VB6 education edition through my school and I couldn't believe how much BASIC had evolved since GW-BASIC. I had missed all of those iterations but I took to event driven programming right away. Eventually I learned how to incorporate and design classes and more complex patterns but I still miss the sheer joy I had as a kid discovering that from my thoughts things could happen.
Sorry, I usually check for duplicates
Thats why I didnt copy the original title.
Still a re-post, and the linked content is still wrong.
what have you done man?! you condemned your son to a lifetime of indenture to suffering...
If you google "Sphere volume" and "Ellipsoid volume" you'll get interactive equations. The Ellipsoid gets a bit trickier to solve. Easy enough to write the Get part of the Volume, not so much for the Set part struct Size { public double X { get; } public double Y { get; } public double Z { get; } public Size(double x, double y, double z) =&gt; (X, Y, Z) = (x, y, z); public Size(double radius) { X = Y = Z = radius; } public void Deconstruct(out double x, out double y, out double z) =&gt; (x, y, z) = (X, Y, Z); } class Ellipsoid { public double X { get =&gt; size.X; set =&gt; size = new Size(value, size.Y, size.Z); } public double Y { get =&gt; size.Y; set =&gt; size = new Size(size.X, value, size.Z); } public double Z { get =&gt; size.Z; set =&gt; size = new Size(size.X, size.Y, value); } public double Volume { get =&gt; GetVolume(size); set =&gt; SetVolume(value); } private Size size = default(Size); public Ellipsoid() { } public Ellipsoid(Size size) { this.size = size; } public Ellipsoid(double x, double y, double z) : this(new Size(x, y, z)) { } public static double GetVolume(Size size) { var (x, y, z) = size; var v = (4.0 / 3.0) * (Math.PI * x * y * z); return v; } private void SetVolume(double volume) { // TODO: find and set xyz, keeping the current ratios } }
Nah. I don't care what he does for a living as long as he's passionate about it. I think knowing how to code is a life skill that makes any career better.
Is this actually a thing? Plz tell me you know of a compiler that adheres to this spec
I disagree with the authors original assessment that they shouldn't create classes to be used just once, and that colors the rest of the presentation.
[removed]
[They seem to at least have an interpreter] (https://lolcode.org)
Yea, he missed some important parts like how this overcomes the fact that async methods can't have out parameters. 
I like using long form LINQ because as baller as a mini lamda statement is they really can be hard to understand. And I'm pretty sure the actual IL is the same.
I guess I need to dive in more
I guess I need to dive in more. I am new at all this :)
Hmm, I guess we will wait and see
Not you shouldn't per say, but here is an easier alternative
Man, people love to beat you down in this sub; surprised bloggers still share here. I thought it was a good post. Quickly covered some of the benefits in comparison to the shortcomings of its predecessor. Bonus points for pointing out some of the performance benefits. 👍
I use the FP approach https://github.com/nlkl/Optional
For example the way they're implemented. You write: &gt; System.Tuple never had named elements. But `System.ValueTuple` doesn't has named elements either: https://docs.microsoft.com/en-us/dotnet/api/system.valuetuple-7?view=netframework-4.7.2#fields Instead they're adding the `TupleElementNamesAttribute` to wherever named tuples are used, and that attributes get passed the names of the tuple elements. Nothing would have prevented the team from adding the same solution to `System.Tuple`. This also explains why seemingly incompatible tuples can be assigned to each other: void Main() { (string name, int age) = JobAndEmploymentYeras(); } (string name, int age) NameAndAge() =&gt; ("Bob", 50); (string job, int employmentYears) JobAndEmploymentYeras() =&gt; ("Builder", 10); 
NativeLibrary implementation is significant. That was holding at least a few folks back in Mono.
Pretty sure that's one of the reasons for the recursive pattern matching that comes with C# 8.0
Namespaces are generally used to organizing/categorizing functional code. This becomes increasingly important as the codebase grows. Imagine your code now is around a million lines in total. You would want to segment this into to categories that make sense. For example, you may have a slew of things you want to do that involve working with the file system. In that case, the .NET itself categorizes that in the System.IO namespace where you’d expect to see classes and functionality related to working with files, directories and so on. Going back to the million lines of code example. Having a class/namespace generic to where it literally can be doing work for anything is usually a bad sign of organization and typically causes confusion for a multi-developer environment. TLDR: Namespaces, classes and functions naming allow you to tell the intent behind what they do. Organization and thought behind this is vital for an ever growing project. 
If you read that part, you see they're giving a "range" of 100 patches. That's *a lot*, way more than a number of .NET versions (but less than a number of security-related fixes over all these years of .NET 4. The teams working on .NET Core have only a partial say in what will actually get upgraded. They might have a new version, but asking people to go to it is not cool - exactly for reasons of breaking changes, as you say. In the end, I am merely pointing out the natural forces that are at play: when a smaller number of people depend on you, you can "move fast and break things". Once you're established, that's less appealing to people - and we see that .NET Core acknowledges these forces. Neither is "good" or "bad" (to me), it's just how things are. Other software is known to mark certain releases as having "long term support" (LTS releases), that's also valid.
Now I just need VS to allow refactor renaming on the tuple identifiers.
Tho this alternative is less maintainable.
Me too, and for some reason each time I do it I think “why does it feel like this sucks?”
Very likely. I do not actually know German.
Eh, it's kinda fine. var number = int.TryParse(someText, out int num) ? num : -1;
You, Sir, are a hero.
Still no example input or output. A construction (I wrote structural software for a while) specification shouldn't delve into the means and methods of construction, but the desired output given an input. 
Thanks. Just to clarify, in the case of a small project is it acceptable to use a namespace to group a collection of global methods? Is it the way I've used namespaces in my example bad, or is it just bad that I used them at all? If it's the latter, what is an alternative to grouping methods (which are all related, but do different stuff) and making them globally accessible from other scripts? 
FYI, it is "per se" not "per say". 
Use Azure Functions
Spring cloud gateway is also an option
Thanks for listening! Agreed about the sound quality (its my side), and I'm working on it :). We mentioned in the episode about weekly, but I don't think we're going to go that route yet. We're planning bi-weekly at this point, and re-addressing as we go.
No, I don't think this is in competition with .NET Rocks. They do a lot of interviews, etc., but we're really just "news", as it pertains to .NET, C#, etc. There is likely overlap, but we have no plans of doing interviews, etc, at this point.
Thanks for listening! I'm working on the audio, trying to get that resolved before we record the next episode.
Thanks!
English is my second language. Thanks for the help
&gt;It's not a database Absolutely, but the organization concepts of a database are present. I'm talking more from a standpoint of an entree to the real stuff. And sometimes, you need a pseudo database more than you need a database. 
If you're starting out with a small project, it can be difficult to know exactly how to organise your code. You should make your best attempt to group together responsibilities, and break apart classes/namespaces that are too big or cumbersome. If your project is small, don't obsess over this; sometimes the best thing to do is to leave it. *However*, you should revisit this as your project grows in size and complexity. In your specific example, `Functions` is probably an acceptable name to use in this case. **But** be careful that this doesn't just become a dumping ground. Also, namespaces can organize classes across files, so a single file doesn't become too big and unwieldy.
Namespaces don't help you do this at all. In your example above, ResizeMyMeshOnImport can't be called without the MeshFunctions qualifier, except in a subclass (and that would be a terrible use of subclassing). One option would be extension methods. If these really are "Mesh functions", perhaps make them extension methods of Mesh (though from the name, it looks more like a function related to asset importing). eg. rather than: Mesh simpler = MeshFunctions.Decimate(bigMesh, 0.5); You might prefer: Mesh simpler = bigMesh.Decimate(0.5);
So many times when programming, I end up using technology and no idea that it has a name, which sometimes makes it difficult to google. Yesterday, we were having a problem with a couple libraries including this Tuple thing. I had no idea what it was or what it was used for, but it was automatically added to the test projects so, we worked on fixing it. Now I have a better understanding of tuples. I'll forget the name by tomorrow.
&gt; Now we all know Tuples, we heard of their existence in C#, saw them in a tutorial and decided not to use them, ever again because they were completely awkward and difficult to use. Thank you for the article and helping me to better understand tuples, or really, encouraging me to use them :)
Hmm, so instead of creating the whole namespace for specialised functions I apply on mesh, I add methods to the actual mesh class instead? In which case I can forget the namespace, as the functions I need become part of the actual Mesh class I am using. Is this right? If so, it's pretty neat, I haven't though of it before.
I am pushing towards ValueTuples not Tuples :)
Ensure that all elements are actually populated. Try this code instead of last loop. What happens? for(int j = 0; j &lt; stGrades.Length; j++) { string stName = stNames[j] string curvedGrade = curvedGrades[j]; lstGrades.Items.Add(stName.PadRight(50) + curvedGrade); }
If stNames[j] is a null value, the .ToString() call will throw an NRE. Just because the array is not null doesn't mean that the items *in* the array aren't null. Example: You could have a string array of {"blah", "foo", null, "bar", null, "baz"} and if you tried to loop through them and call .ToString() on each item, you'd get "blah", "foo", and then an NRE. You have to check those nulls. You can do it inline now, with the `?.` operator. Like this: `lstGrades.Items.Add(stNames[j]?.ToString()?.PadRight(50) + curvedGrades[j].ToString());` That way, if any of the items in stNames[] is null, it just skips it. It'll mess up your formatting, but you can probably find a way around that.
I think the reason is that your `btnAdd_Click` method isn't being called before you run `btnShow_Click` method. Then when you try to access `stNames`, it is still an array of size 100, where each value is `null`, because when you first instantiate your array you don't fill it with anything. So then `.toString()` is called on `null`, which is where the exception is created. As a code styling side note, instead of doing `.GetUpperBound(0) + 1` to get what is effectively the length of the array, I would simply access the array's `.Length` property. It is much clearer what the intent is. And if you're doing a simple loop over the entire thing anyways, then arguably a `foreach` would make the intent of your code even clearer.
It's returning the same error.
Well this got it to print...a bunch of times. But progress! Thanks for the advice.
I added a few shortcuts to mine as well (mainly format document), but I wanted to add a few more. Would you mind telling me what all of your buttons do? I need some ideas.
In order from the top left: * Back (to top menu) * Escape/Close * Peek Definition * Open TFS * Open VS * Build * Step-Into * Reformat * Find in Solution * Find Symbol * Run * Step Over * Refactor * Breakpoint * Go to definition
Neat
THIS. I WANT THIS
I got sucked into loving development when I was younger. Biggest mistake of my life. &amp;#x200B; Be a good dad and reverse course. Tell him to be a doctor.
You can try the MSBuild copy task. It had some odd behavior in the past with when the list of files to copy was determined, which led to using exec command with xcopy. https://docs.microsoft.com/en-us/visualstudio/msbuild/copy-task 
Thanks! One more question, where did you get your icon images? 
The VS2017 Image Library: https://www.microsoft.com/en-us/download/details.aspx?id=35825 - I had to re-export the SVGs at 72x72 but this didn't take long.
I know it's filling it in, but I do think having the array size set to a specific number is part of the problem. I think it's actually filling the array 100 times with whatever the last name I've added is.
I had no idea that this was a thing. Thanks again.
How about `string.Split`? Did you try anything before asking here? What did you try to search for? You treat this like your beginners support forum.
Modify data. Once all data is modified call `SaveChangesAsync` once.
I would definitely stay away from something like "functions". Sometimes, you do have some sort of "utilities" namespace, but it's generally not that generic. For example, one namespace I often find myself creating is a "Web.ConversionUtilities" (or similar) space that has things like special extension methods for formatting strings or other values for display -- but, that usually takes shape after I've found myself using the same formatting code a handful of times or it otherwise because hard to follow/maintain. My first iteration of namespaces almost always is something like "MyProject.Web", "MyProject.Core", and "MyProject.Infrastructure" because I tend to run with an "Onion Architecture" or "Clean Architecture" pattern, and that fits well. For a simple app, that's probably as far as I'll go, if I even need that much. When I do add namespaces, it's almost always done organically. When I start to get annoyed with how many classes are in a given folder, or I find that I'm dealing with two (or more) different concepts within a specific folder, I split the namespace. Sometimes that means adding sub-folders. Sometimes, it means adding peers. ReSharper helps the refactoring quite a bit, but it's not critical. I also understand that it could be debatable whether that sort of refactoring violates the Open/Closed principle, but I'm less dogmatic about that when we're talking internal APIs rather than changes that would cause me to go tweak another package. As an example of the thought process I use, let's take the idea of building a Quicken-like app. First pass, I'd put the domain model, core services, and interface definitions in the Quicken.Core namespace. The Quicken.Web namespace would have all the presentation logic, including any display models necessary, and would have initial sub-namespaces related to the MVC pattern (go look at the File-&gt;New-&gt;Project results for a web app). The Infrastructure would house the concretions of any data access and/or web service interfaces defined in the Core namespace. All these would, probably, be split into separate .NET projects, but that's optional. If I got a request to add 401(k) and other investments tracking to the app, I might give it a try with the existing namespaces, but I can almost guarantee that that'd end up with a separate domain model and services. The top-level application services (BankAccountService and the new InvestmentAccountService) would probably remain at the root Quicken.Core namespace, but I'd move most of the plumbing to sub-namespaces like "Quicken.Core.BankAccount" and "Quicken.Core.InvestmentAccount". If there was some inheritance going on (hopefully), odds are that I'd handle that in a "Quicken.Core.Base" namespace, though it depends on exactly how things like the Interface definitions played out (again, it's organic, most of the time). The Infrastructure namespace would get split to reflect the tweaks to the domain model and how it got persisted. The UI layer might end up reorganized into areas (Bank, Investment, etc.), with the MVC bits nested inside the areas -- this is a reasonably common pattern, so I won't go into too much detail. As an added note, I tend to look at things like reports as something that could be either presentation or persistence. I'd be very inclined to create an actual domain model for any given report (say, yearly income/expense by month) and then make that model available to both the UI, for onscreen reports, and the persistence, for saving to PDF (or whatever). That means that there's probably going to be a "Quicken.Core.Reporting" namespace and matching Web and Infrastructure namespaces. I \_probably\_ wouldn't try to mix in the bank account reporting with the bank account domain, for example. That comes from experience in knowing that reporting is usually not persisted or displayed in the same way and often spans across domains. It's also the sort of refactor that could happen organically, as the app grows. Hope that helps.
On which line? The first one in the loop? stNames null?
You should show your mapping. &gt; code that Eagerly loads related items of related items only works for IEnumerable&lt;T&gt; foreign keys That is incorrect. I eagerly load 1-to-1's all the time.
I took the simplest route the last time, which is why I completly rewrote this thing... again. but each re-write I learn new techniques, new patterns, talk to new developers and get gooder ideas (yes "gooder!") &amp;#x200B; I have an idea, and the other comment on here sums it up, which to me is also the simplest route. &amp;#x200B;
&gt;hey can update variables at completion. Nothing stops you from having each activity updating a specific variable and using this ne Thanks, what I am doing is I have a class based on an interface IWorkerResult. this interface has IEnumerable&lt;Bitmap&gt;Bitmaps {get;set;} IFileService Fileservice {get;set;} IImageEngine ImageEngine {get;set;} int EventIndex {get;set;} int CustomerId {get;set;} and much more. Each IWorker has a job to help build this house of data. I guess SRP can also relate to an entire class that has 1 function - Put the documents contents into the mobile app. and getting it to the mobile app just happens to take a lot of work. If a worker needs to use another worker I have an IWorkerUnion interface that takes &lt;T, D&gt; as params. :D &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Pretty awesome!
This is what I was excited for when I heard about value tuples, but by that time our codebase had adopted `Option&lt;T&gt;` and it turns out that's just as elegant, if not more. So I always ended up refactoring my value tuples to that.
Very comprehensive answer thanks, it's great to get an insight into what your approach is like! The banking app analogy was useful, as I could easily see how that could devolve into a big mess without good programming architecture. The main gist of it that I took away was that the usage of namespaces should occur naturally, where it seems glaringly obvious that two large aspects of an application should be split to avoid interference and to avoid potential confusion/conflict as you continue to grow the application. Since I have been using Unity I could look at how their API is structured, and some other examples to get more inspiration. Creating a namespace definitely seems like overkill for what I was planning to do (add some global functions), and generating extension methods seems like the more sensible route for now.
The one pictured is 150, the baby version is about 80 https://www.amazon.com/dp/B06XKNZT1P/ref=twister_B07BHGS7S3?_encoding=UTF8&amp;th=1
&gt; You also don't await your created tasks anywhere, so if something goes wrong you won't notice it. I think we might have some confusion about terms - unless I'm misunderstanding you (and I might well be), the tasks that I'm creating and adding to companies aren't actual tasks like `System.Threading.Tasks.Task`, they're just things that users of the system will do in relation to the particular company. So user could add a task called "UIF" and later will capture a timesheet entry in relation to the completion of work relevant to the company's UIF information. I should have included the structure of `BusinessTask` to clarify this, I think.
Thanks for the research kind stranger :) 
Your `Update` method returns a `Task`, and that is the `System.Threading.Tasks.Task`-Task. You are not awaiting those tasks anywhere.
 var result = Enumerable.Repeat(Regex.Match(str, @"([^_]+)_(\d+)"), 1).Select(m =&gt; (str: m.Groups[1].Value, number: int.Parse(m.Groups[2].Value))).First(); This is it. As simple as it gets.
Saw that as I was reading over things again. It's just a typo (I have a crappy habit of no copy-pasting when I make posts).
&gt; ValueTuples in combination with Deconstruct(-extension)-methods Can someone please share a blog post or an example of this? Preferable without using a switch statement. 
&gt; var result = Enumerable.Repeat(Regex.Match(str, @"([^_]+)_(\d+)"), 1).Select(m =&gt; (str: m.Groups[1].Value, number: int.Parse(m.Groups[2].Value))).First(); &gt; Console.WriteLine(result); Is it possible to have these two values as independent regex? 
&gt; Of course there's also the option of awaiting SaveChangesAsync directory on the page and not even bothering to go through the service for that but I'm not 100% clear on best practice in this case. My gut tells me I should use the service. Whoever is responsible of the `ApplicationDbContext` lifetime should save the changes. If you want it done in the `CompanyService`, then inject the db context to that class instead of passing it to a method. You need to get a better understanding of SRP and state handling.
i dont get whats the benefit to using the reperesntive keyboard shortcuts/resharper shortcuts
I don't have to remember them xD I can have lots of pages of shortcuts for different things.
I got one for Christmas and it is fantastic! Nice setup.
What are these tools used for? Looks neat.
&gt; You should show your mapping. modelBuilder.Entity("Models.AirsoftWeapon", b =&gt; { b.HasOne("Models.WeaponCategory", "Category") .WithMany("Weapons") .HasForeignKey("CategoryId"); b.HasOne("Models.Product", "Product") .WithOne("AirsoftWeapon") .HasForeignKey("Models.AirsoftWeapon", "ProductCode") .OnDelete(DeleteBehavior.Cascade); }); &gt; That is incorrect. I eagerly load 1-to-1's all the time. Eagerly loading the first level (`this._dbContext.Products.Where(m =&gt; m.Code == code).Include(p =&gt; p.AirsoftWeapon).Single()`) works for me too with no problem. The exception occurs when I try to load the second level too in a single query. Looking at the exception the ThenInclude expects the first relational property (in this case: `Product.AirsoftWeapon`) to be an IEnumerable&lt;&gt; because it is searcing for a property called `Inner` inside the type `IEnumerable&lt;AirsoftWeapony&gt;` and fails when it can't find any property with this type in the `Product` model.
Can’t tell if this is a joke. 😂
Ellipsoid: X = 1, Y = 2, X = 4 Volume should be 33.51 Now set Volume to 268,08 and give me X, Y, Z
Oh, I should have looked a little harder! Yeah, the student name that was entered fills the entire array, so if that student name is null then you're back to where you started. I would add a check like `string.IsNullOrWhiteSpace(studentName)` before you update the list to ensure it is at least a string with some relevant characters in it (hopefully a name). Another thing I would change is move the student name variable inside of the `btnAdd_Click` object since that is the only place you are using it, so the entire class doesn't need to know about it. You could do the same check for the other variables you are declaring in your class as well.
Ahh isee. i'm a pretty young developer and i play a lot of games and that makes me remember a lot of keyboard shortcuts more easily i guess 
 string yourString = “Split-String”; string[] stringArray = yourString.Split(“-“); Then to go through the array just do: Console.WriteLine(stringArray[0]); Console.WriteLine(stringArray[1]); Or: for (int i = 0; i &lt; stringArray.Count; i++) { Console.WriteLine(stringArray[i]); } OUTPUT: Split String
I guess you could use TPL dataflow and only on the connection between two blocks share some specific data. You’d probably end up with mainly TransformBlocks. The routing slip variables are not meant to contain a huge amount of data (they get serialized and persisted) and when you mention a collection of Bitmaps as a possible result, I suspect a lot of data is passed between the workers.
Namespaces help organize your code and libraries. Any class that does not define its own namespace will be added to the default namespace which could collide with other classes that have the same name.
You need to hook into it. You need to find what graphics library the game uses which is either OpenGL or DirectX, then you need a handle I believe to hook into it. Steam, Origin, and other game overlays like Fraps use the same implementation.
Thank you. It looks like xcopy was used in this case because it needed to recursively copy several files starting at a given directory. Adding an ItemGroup before the Copy resolves the issue. The project is now building on Linux and Wondows. 
yes a collection of bitmaps. Otherwise, I have to extract a bitmap, converted to a memory stream, and then stream that to the cloud. One by one. I guess I could do this in my union worker. Where I extracted bitmap and have a second object that gets passed in and that could be my file service. Hmm so the uploads we have there can be easily 300 pages. And 300 bitmap sand memory yes that could take up a lot of memory and affect performance.
Customizable sound / effect keys / app shortcuts for live streamers?