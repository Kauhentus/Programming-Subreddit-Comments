Thanks, I knew it goes outside, just missed it typing it in the browser :) Good point on `ToString()` as well, I took a look at the source and it doesn't look thread safe to me. I think a basic object lock is most appropriate here.
Others have already answered, but I think I have something I can contribute here. First and foremost, I highly recommend you do yourself a favor and go purchase _Concurrent Programming on Windows_ by Joe Duffy. Joe served in many roles at Microsoft, particularly in the parallel computing team, and has an excellent blog (albeit not posted to often) at [http://joeduffyblog.com](http://joeduffyblog.com). A lot of the book content is somewhat outdated, because it doesn't cover core features afforded to us as of .NET Framework 4.0 and higher (such as the Parallel API, or async/await). As far as his blog is concerned, the [15 Years of Concurrency post](http://joeduffyblog.com/2016/11/30/15-years-of-concurrency/) is a great start. The book, _Concurrent Programming on Windows_, is still worth reading. It talks about a lot of concurrency issues, introduces you to certain domain problems (such as the [ABA Problem](https://en.wikipedia.org/wiki/ABA_problem)), and serves as an excellent primer on how to perform concurrent programming correctly. His blog offers fantastic supplemental content as well, and will make a lot of sense to you after reading the book. The book uses C++ and C# for examples. I really don't know C++, and I was able to follow along easily enough. Joe also did an amazing job with his various references: at the end of each chapter, there are dozens of references of where you can go to learn more (though some links are now out of date, and you'd probably need to use the [Way Back Machine](https://archive.org/web/web.php)). Now, with all of this said, there are some core ideas that you should be aware of. The first is about what synchronization primitives are available to you, and what their scope is on the system (these are all explained in much greater detail in his book): * A `Mutex` is allocated in Windows ("system objects" for the duration of this list), and are thread-affine (meaning, the thread that acquired it must also release it). Waits are kernel-waits. * `Semaphore`s are non-thread affine system objects, and can serve as adequate substitutes for Mutexes when you need to start work on one thread, finish it on another thread, and release workers. Waits are kernel waits. * `ReaderWriterLock`s are system objects, and allow concurrent readers + dedicated writers. Waiting on this object is a kernel-wait. * `AutoResetEvent` is a system object, and releases one thread at a time, and automatically resets (hence the name) after calling it's `Set()` method * `ManualResetEvent` is a system object, and "wakes" all waiters when `Set()` is called. * `ReaderWriterLockSlim` is like it's counterpart, but it is implemented in the framework. It also minimizes allocation of system resources (outside the runtime) * `SemaphoreSlim` is like it's system counterpart, but implemented in the framework. It also supports asynchronous waits that observe cancellation tokens. * `ManualResetEventSlim` is like it's system counterpart, but implemented in the framework. * `CountdownEvent` is exclusive to the framework, and allows a certain number of tasks to complete before being signaled. Internally, it actually uses a `ManualResetEventSlim`. * CLR Locks (using the `lock` keyword, as you've done) are similar to Mutexes, but are general more powerfull. These are implemented and supported by the runtime. Using a `lock` is similar to a Mutex in that acquisition and release of a lock is thread-affine. Thread-affine means the thread that acquired a resource must also release it. If the acquiring thread doesn't release the acquired thread-affine resource, then you can [deadlock](https://en.wikipedia.org/wiki/Deadlock) your program. Suffice it to say that this is not a good situation to be in. Kernel waits, predictably, mean that you need to leave the .NET runtime and transition to Windows' wait implementation. The primitives in the CLR don't necessarily avoid kernel waits; rather, they try to optimize wait times, and fall back to kernel waits. To answer your central question: no, use of the `lock` keyword is not a hack. It's actually a best-practice when you have shared data being consumed by multiple threads _that concurrently access the same memory_. There are cases where it's entirely safe to access a shared data structure without any locks (or CAS instructions) at all, subject to some constraints. An example is having 8 threads accessing an 8000-unit array in a fork/join pattern: each thread takes 1000 members of the array, does the work, and at the end, the results are combined. Provided that the array is not changed, and the threads do not overlap each other, this is perfectly safe. I hope this is useful to you OP, and the rest of the internet.
In this case, you don't even need the separate `padlock` object, you could just use `lock (_buffer)`.
I don't think there is any reentrancy in the shown code, so using `lock` will work just as well and is simpler.
Captured variables are shared, but there are no such variables in your `Parallel.For` example, so the `local` variable is completely unnecessary.
&gt; Also it only works if the `ToString()` method of the `StringBuilder` is guaranteed to be thread safe in every cases It doesn't have to be thread-safe, it just has to avoid performing any mutations. Though such guarantee is not documented, so I think it's indeed better to use `lock` here.
There is no `StringBuffer` in .Net. Are you thinking of Java?
How is that code relevant to the question? I don't think copy&amp;pasting example code from documentation is useful. There are two cases where I think `Interlocked` can be useful: 1. You're doing something very simple that already has an `Interlocked` method specifically for that purpose, like `Interlocked.Increment`. 2. You really, truly know what you're doing and `lock` (and similar synchronization primitives) is not good enough. As far as I can tell, this situation does not fit either case, so I wouldn't recommend using `Interlocked`.
We've been using [Prince](www.princexml.com) to convert HTML to PDF. It has very robust css and paging support. It's not free though
if you just need the output strings unordered you could have them write the strings to a ConcurrentBag or other thread-safe collection, and then loop through the collection afterwards to append them.
This is new to me. Every time I've ever used a lock, I created a special object for it to use. So lock doesn't do anything to the data stored in an object? What exactly does a lock do, at a deeper level, where you can just feed it any random object? Also, this is unrelated. Just throwing it into this thread for convenience. There's an extremely simple way to handle multithreading if you aren't doing anything very complex. Like, if you have an ienumerable of something, and you want to utilize multithreading to chew through it quickly. You basically use it just like foreach. Replace foreach with Parallel.ForEach. You'll still have to use locking to keep threads from colliding. But it's a great way to utilize multithreading without having to deal with the typical thread management overhead.
If anyone's looking I ended up using the solution found here https://stackoverflow.com/questions/44629211/in-c-i-am-calling-a-public-api-which-has-a-api-limit-of-10-calls-per-second 
Correct. "no performing mutation" is more accurate, since concurrent reads are fine.
Succinct and tells you exactly what it does, it's basically idea :)
Could you be more specific? It's only used in a small handful of places.
Please watch this for some [best practices](https://www.youtube.com/watch?v=My2gAv5Vrkk)
Because C# is a static language. You know ahead of time what you're getting. With dynamic it could be anything. For an API, how are you supposed to know what fields or methods are on the dynamic variable? Unless you document it, but at that point why not just write a model? It's also extremely slow. Unless the dynamic variables underlying type and call site is the same every time; then the CLR will do some caching to speed things up. But if it's constantly changing, it will never be close to a statically typed object. You say it's only used in a few places, but you use it in GenericContainer where Generic JSON is just a dynamic Data property. That class is used everywhere. So is DynamicListingChild. It will be detrimental to performance. At that point you may as well use Python or some other dynamic language because that's what you're making the CLR do. I would not do an official release with it. Here's some better answers: https://stackoverflow.com/questions/31859016/is-the-use-of-dynamic-considered-a-bad-practice https://softwareengineering.stackexchange.com/questions/135160/shortcomings-of-using-dynamic-types-in-c
The first one creates a huge number of classes for all the units. Plus the performance issue that someone brought up above. The second one is similar to one I tried before, but the issue is that ideally the Enum would equate to a conversion factor, but you can't use doubles. So, I would have to use a bunch of switch cases to get it done. I have a workaround for now, but I am still copying 50 lines of various code for each class. So when I find an issue, I have to fix it in 20 or 30 structs. Ideally, I could use inheritance (but structs don't support it). Maybe I could use a generic struct with a bunch of concrete structs? Not sure if that makes sense, or is doable.
A lot of coding standards recommend prefer locking on an independent object, so it's not surprising if you've never seen otherwise. The `lock` keyword is a syntax sugar for Moniter.Enter / Moniter.Exit methods, much like `using` is sugar for IDisposable's Dispose method. Using those methods work with some hidden data on the object, but beyond that, I'm not sure what it does. For your unrelated question, short answer: Parallel LINQ Less short answer: Concurrency is a massive topic that you can slice, dice, and analyze from all sorts of angles. Rather than tackling that properly, here's a few useful things: * Low level locking, as discussed in this thread. * Data parallelism. This is what you've essentially described, where you operate on some flow of data. In C# this would be Parallel LINQ or Dataflows from the Task Parallel Library. * Futures/Promises, where you get a placeholder for a value that will exist in the future but may not exist yet. Examples include async/await, Task.Run, and a lot of other stuff from the Task Parallel Library. Models that are less popular in C#: * Actor model: Have independent "actors" that pass messages to each other, but otherwise operate on data independently. * Optimistic concurrency: Do multiple things hoping only one happens at a time. If there's a conflict, then one thread wins and the other threads rollback and retry.
Initial suspicion is that GetChannel(id) is returning null and you're attempting to SendMessageAsync to a null. I would check there and verify that the channel id is correct and is properly returning a value.
Code review: why not lock _buffer?
&gt; is it an evil hack? The proper term is *code smell*, because for whatever reason, “it stinks”. It’s not built in the best way possible, so like a creature with its internal organs placed on the outside, it’s going to go rotten pretty quickly.
This is the acceptable answer.
There are links posted to MS documentation, but no one seems to have linked the free online book ["Threading in C#" by Joseph Albahari](http://www.albahari.com/threading/) so I'm doing it here since it has been an invaluable resource for me when it comes to threading/synchronization in C#. [Part 2](http://www.albahari.com/threading/part2.aspx#_Locking) deals with locking in particular. &amp;#x200B; Maybe it should be added to the useful links section? &amp;#x200B;
&gt; So lock doesn't do anything to the data stored in an object? What exactly does a lock do, at a deeper level, where you can just feed it any random object? Object headers contain a field for locking and storing the base `object.GetHashCode` value. These are allocated lazily the first time an object is used in this way, if necessary. You can read more [here](https://blogs.msdn.microsoft.com/seteplia/2017/09/06/managed-object-internals-part-2-object-header-layout-and-the-cost-of-locking/) :) The guideline you are familiar with is to never lock on a non-private object, to prevent deadlocks. If `_buffer` was externally available, you could end up in a deadlock situation where both you and another thread attempt to lock it at the same time. It's for this reason `lock (this)` is [strongly discouraged](https://stackoverflow.com/questions/442564/avoid-synchronizedthis-in-java) - the C# model is that if you own an object, you're free to lock on it, which implies that that object cannot be locking on itself.
&gt; Now, I haven't looked to far into the code. That was just literally the first file I clicked on. You may actually be doing this, but you should be using something like JSON.NET to deserialize/serialize reddit api responses/requests into static .NET models. Already are. Check out the "Things" directory. &gt; You say it's only used in a few places, but you use it in GenericContainer where Generic JSON is just a dynamic Data property. The reason for this is because the JSON formatting in the Reddit API returns is variable for many endpoints. I had to create a few dynamic types to accommodate those. However, if you examine the Things more closely, you'll see that only a few of them resort to the use of dynamic for certain properties. &gt; I get the impression that instead of doing that, you're casting the JSON response into a dynamic object and manually populating the models from those dynamic objects. That's not correct at all. The JSON is deserialized directly into the Things class objects. I think you may have drawn some inaccurate assumptions based on the small amount of code you've examined thus far. You'll notice that I actually avoided the use of dynamic in nearly all instances. But there were a few cases where I believed and still believe that its use was appropriate for the circumstances. The only other major case where dynamic is used is in SendRequest&lt;T&gt;, which accepts any of the "Inputs" classes as a dynamic input to be used by RestSharp's RestRequest.AddObject method, enabling me to avoid having to write 70 different overloads to accommodate each of the inputs.
[https://www.youtube.com/watch?v=EuZa5qiERWM](https://www.youtube.com/watch?v=EuZa5qiERWM)
TL;DR: if it’s a console application, it will not. If it’s a GUI app (or maybe some web app also), it might. Result is just short for .Wait first, then get result.
&gt; Why are you trying to call an _async_-style method without using _await_? That is a huge code smell to me. Not necessarily. There can be good reasons to “escape” async at some points in an app. For console apps, only recently have you been able to bubble async all the way up in the first place.
It’s pretty obviously shoehorned, though. It’s just heuristics: there are several cases, generally involving struct and arrays, that can’t be checked correctly, there is no runtime support, there is no explicit forced unwrap language support (instead based on the compiler being able to see if you check the ref for null) etc., and it uses syntax shared with nullable value types while being completely different.
You can probably write programs without nullable references. Then you’d see no ?
That’s a bit uncalled for. 
&gt; No one is denying that this isn’t perfect, Well, there was a guy above saying it wasn’t shoehorned in. It kinda is.
I think he does. I think you are misunderstanding the comment. 
So the locking functionality is built into the base object class that every other class is built on? That's pretty interesting. Thanks for the great explanation. I have some more advanced C# books that I need to dive into, to understand this stuff at an even deeper level. I've been programming for damn near 30 years, so I understand most of what's going on. I just need to take a deep dive into a high level language like C# and get a better understanding of what it's actually doing behind the scenes. That's how my brain works, if I understand the nuts and bolts, then the larger concepts come together a lot better. I like knowing the how and why. The more I dive into C#, the more it impresses me. The people that built .Net are absolute geniuses. Far better than a piece of garbage like the Android libraries. I think Android's libraries are probably the worst I've ever seen.
In that case it really wouldn't matter if the switch was on or off.
Whether or not re-entrance to the same lock is possible would depend on the code outside of the class, in this case. However, one thread cannot execute two lines at the same time, so it wouldn't matter here for that reason.
In my opinion, that's terrible advice, because you're unnecessarily sending your work to the thread pool, and that may not be necessary. It's better to understand why the deadlock happens and ensure that you code in a way that doesn't cause it. If you're finding that third party code is causing this, then you will have to do something like that; but it should not be a go-to.
At the top of the solution explorer there's a button to show/hide files that aren't a part of your solution. This one: [https://i.imgur.com/n3tXB3s.png](https://i.imgur.com/n3tXB3s.png)
Tried using XUnit, NUnit and MSTest framework. Not really much of a difference except for the syntax and keywords used. But I like NUnit most because it is widely supported by third party sites and tools. 
It might be of use to look into working in a TDD (test driven development) flow. By doing so you're going through a cycle of Red, Green, Refactor. Red being you've written a test with no code and it will fail, green being the following step where you've written your code and the test is now passing and the refactor step is simply improving both the test and code to be less brittle. I personally found this the best way to learn how to write tests. From there I was able to write tests, post code (as much as TDD is a good workflow it can sometimes be very difficult to adhere to). Remember that a unit test is there to cover individual functionality, a single unit test to assert/expect the correct output for a single method. A one to one mapping to put it simply. In order for me or others to direct you to the best tutorial for unit testing it would be best to tell us the language you're using. To understand the concept of testing, the below link may work for you: https://www.test-institute.org/Introduction_To_Software_Testing.php 
I guess safer, in case buffer is being exposed outside of the class via a property not shown? &amp;#x200B;
Also, it is good to hear that you are considering to write tests for your method. It will really give you lots of benefits as you scale up your application. It would be much easier to refactor and will give you much more confidence to touch other developers code which is properly unit tested. Not to mention, unit tests can also serve as a running documentation on how a method should work. Good luck on your journey to worry free coding and quality work! 
We're in r/csharp so I'm using c#. 
&gt; it is widely supported by third party sites and tools Can you suggest me some of them?
&gt; Good luck on your journey to worry free coding and quality work! Thank you.
Ah sorry for that, was scrolling through my feed and didn't notice which subreddit. The Microsoft docs are pretty good and in-depth: https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2017 From there it depends which framework, I've used MSTest and NUnit, found NUnit to be more friendly. NUnit is also used by Unity, if you have any interest in game development. https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit https://www.infragistics.com/community/blogs/b/dhananjay_kumar/posts/getting-started-with-net-unit-testing-using-nunit Hope they help.
When inserting strings into SQL, they need to be between quotes, otherwise SQL assumes you're referencing another column. Try putting the string templates between single quotes, like this: "VALUES ('{value.ChampionName}', '{value.type}')" 
`Result` calls `InternalWait` on the task to wait for it to complete. `Wait` also calls `InternalWait` on the task to wait for it to complete. So yes, in this case the act exactly the same way.
nice one man i didn even relised i forgot the ' ', new question for you tho, what about bools? how do insert them?
i could use the qutaion when useing boolean aswell, guessing its since a bool retursn true/false as string? thanks for your help!
Jenkins and TeamCity for CI. We also use HipTest for tests management. 
Really, what crap. What prevents you from using parameters?
Normally you would use proper CommandParameters which would do all the heavy lifting for you. also the way you do it now is prone to one of the worst things in programming "Sql Injection" (feel invited to read up a few articles about it)
&lt;nativelanguage&gt; Uh en dansker herinde ;) &lt;/nativelanguage&gt; But quoation marks as thatotherguy pointed out Also doing sql like that opens op to SQL injection ( where the parameters in your object might be sql instructions. So you should sanitize and check the input - possible look into using dapper as a micro ORM :) 
These 4 simple steps seemed so easy when I started on test coverage - I have spent over a year on step 1 and we are still churning through a legacy app - looking forward to 2022 :) 1. Make all dependencies implement interfaces 2. Inject dependencies via constructors (I like to use Ninject with convention binding) 3. In your test project use Mocking to inject the dependencies and control their behavior 4. Write tests We avoid writing unit tests for database IO, instead we use them for calculations, model validation etc. For data IO we write integration tests and for Regression testing we use Selenium. For all of these we use Nunit because it works with Selenium. Does the site still break? Yes it does (but not as much as it used to!) &amp;#x200B; 
One thing to note is that when we started I hated it, now I love it. We can make a change and run our Unit and Integration tests, very quickly we find problems and we feel more confident when releasing. We can write a test based on what we expect to happen and then code against it. 
While it would be fine to lock on a private object, he said he was new to locking and I wanted to show him a good practice that would work in all scenarios.
Bools in SQL are bits, represented as integers. Maybe try something like (without quotes): `"VALUES ('{value.ChampionName}', '{value.type}', {value.NoobTrap ? 1 : 0})"` Depending on the data type of the original source of NoobTrap, maybe: `"VALUES ('{value.ChampionName}', '{value.type}', {value.NoobTrap.toLower() === 'true' ? 1 : 0})"` Not sure about best practices, though.
It's not exactly designed to be a functional language. Older definitions for SQL weren't even Turing Complete although I think that has changed. That's probably why people don't talk about it. 
Maybe later :) We created docker-compose/start scripts/k8s configuration for Java version: [https://github.com/asc-lab/micronaut-microservices-poc](https://github.com/asc-lab/micronaut-microservices-poc) On branch "master" you can see config without k8s (only docker-compose) with few scripts in scripts folder: [https://github.com/asc-lab/micronaut-microservices-poc/tree/master/scripts](https://github.com/asc-lab/micronaut-microservices-poc/tree/master/scripts) On branch "kubernetes" you can see configuration for k8s with ingress, prometheus for metrics, efk for logs, deployment on GCP/Azure/AWS/minikube.
What do you think about Greg Young's article? [http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/](http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/) Fragment: " When most people talk about CQRS they are really speaking about applying the CQRS pattern to the object that represents the service boundary of the application. Consider the following pseudo-code service definition. CustomerService void MakeCustomerPreferred(CustomerId) Customer GetCustomer(CustomerId) CustomerSet GetCustomersWithName(Name) CustomerSet GetPreferredCustomers() void ChangeCustomerLocale(CustomerId, NewLocale) void CreateCustomer(Customer) void EditCustomerDetails(CustomerDetails) Applying CQRS on this would result in two services: CustomerWriteService void MakeCustomerPreferred(CustomerId) void ChangeCustomerLocale(CustomerId, NewLocale) void CreateCustomer(Customer) void EditCustomerDetails(CustomerDetails) CustomerReadService Customer GetCustomer(CustomerId) CustomerSet GetCustomersWithName(Name) CustomerSet GetPreferredCustomers() That is it." And from Martin Fowler: [https://martinfowler.com/bliki/CQRS.html](https://martinfowler.com/bliki/CQRS.html)
yeah im well aware of it, but since its just a school proejct and the only thing that can be injected is my Azure database i got. also our lekotrs told us to not worry about it
yeah my bool is defined as a bit. but when im posting it takes it as im wrting true/false it seems, when i did this '{value.NoobTrap}' to my bool it worked all fine. also when try to post from my TypeScript app.
alternativly a website 
eh like this? 
yap, comments got me :) as mentoined before its a school project useing a Azure database, we got sorta told not to worry about SQL injections as for now. im on 3'rd semester only so still alot to learn
&amp;#x200B;
u shit
C# SQL parameters
Try Xamarin?
Just FWIW: I prefer NUnit to MSTest mainly for how parameterized tests work out. MSTest is better integrated with Visual Studio, but that doesn't matter so much if you're running tests with a third party tool of some sort.
Oh nice where are you studying ? And of course still lots to learn and that doesn't change when you get a job afterwards. 
your idea: *exists* me: is this a useless machine?
Zealand Institute for Buisness and Technology as far i remeber thats the english name, and my campus is in Roskilde. its an ever evovling industry or what its called, you get the point tho. 
We're using MSTest at work, but I'm honestly more comfortable with NUnit. If you're working in a team, use whatever the team standard is. If you're a team of one, use whichever is most convenient and comfortable--they're all pretty similar. The best thing to make stuff testable to try to reduce the unit under test to two separate parts: a method that takes arguments ("dependencies") and a result that contains data ("state"). In practice, it's likely that you will have to check for side effects by checking calls on your dependencies, too. If your system deals with other systems that are not directly under your control (e. g. the network, the file system, the database, the clock!), you probably want to wrap its interfaces to those external system in one or more interfaces, so that you can give the test a fake that will act deterministically--this makes it possible to test a bug that only occurs at 11:59 PM on the third Tuesday of the month during a leap year (or whatever). If you can do that, it's pretty straightforward to split each test into the arrange-act-assert flow. You *arrange* your dependencies by setting up their initial values, *act* by calling your method with the objects you arranged, and then *assert* the final state by using your test framework's assertion methods to verify the final state of everything. Unit tests are useful for *making your requirements concrete*. It is much less useful for verifying the internal behavior of your system. They also do not replace integration tests, which would include testing your system's interaction with the external systems you mocked up for the unit tests.
Team city is free for something like 20 builds
I think NUnit is the most widely used one.
I have a number of thoughts about Greg's article, but the first one is that several statements right after that psuedo code is the most important. &gt;This separation however enables us to do many interesting things architecturally, the largest is that it forces a break of the mental retardation that because the two use the same data they should also use the same data model... &gt;The largest possible benefit though is that it recognizes that their are different architectural properties when dealing with commands and queries … for example it allows us to host the two services differently eg: we can host the read service on 25 servers and the write service on two. The processing of commands and queries is fundamentally asymmetrical, and scaling the services symmetrically does not make a lot of sense. I'm not saying that splitting the query side and the command side into different classes isn't beneficial. It is, but the benefit at that point is purely from a code organization and logical standpoint. From a processing, infrastructure, or architectural standpoint, if the query and command side are all contained in the same DLL, then there's no difference and no benefit. In the quotes above Young is very quickly highlighting the benefits of taking the command and query step even further into completely separate services. You can scale them independently. You can think about the read side different from the write side. That's an incredible benefit, and incredibly relevant to the world of microservices. Young's conclusion at the end of the article actually sheds some light to the exact discussion we're having. &gt;Going through all of these we can see that CQRS itself is actually a fairly trivial pattern. What is interesting around CQRS is not CQRS itself but the architectural properties in the integration of the two services. In other words the interesting stuff is not really the CQRS pattern itself but in the architectural decisions that can be made around it. Don’t get me wrong there are a lot of interesting decisions that can be made around a system that has had CQRS applied … just don’t confuse all of those architectural decisions with CQRS itself. I included that last sentence, even though it weakens my point. Young is basically saying that CQRS is a pattern and the architectural possiblities that it allows are something different. I don't necessarily disagree with that, but I also think that he's introducing a concept and trying to make it approachable. He's mentioned the architecture, but he just wants to get across that thinking about it as a pattern is sufficient to understand it. My standpoint is that without the "interesting architectural decisions" that CQRS allows, then the pattern is kinda take it or leave it, and doesn't really offer many significant benefits to the application. When CQRS is implemented "just as a pattern", then it just ends up being half baked, and leaves some of the significant benefits that it offers on the table.
A robot that can hold your beer and pass it back using vocal command. Very useful when working on the computer, it will reduce the risk of spilling the beer on the keyboard to 0. Unless the robot overturns and spill himself the beers but then it's his fault, not yours. Cheers!
NUnit works great in Visual Studio for what it's worth.
What problem are you trying to solve? 
Log the exceptions you get when it fails to deserialize? XML deserialization errors can be pretty concise with line and character numbers. https://docs.microsoft.com/en-us/aspnet/web-api/overview/error-handling/web-api-global-error-handling
I was wondering if anyone would recommend this approach. It seems to perfectly serve the OP's purpose. Upvote from me!
I’ve seen async email functions used without await. That way the user isn’t stuck waiting for an email to fire off.
what does it mean by \`1. Make all dependencies implement interfaces\`. Please elaborate? 
You know what I need so can you suggest some document about (1)
Run it in debug mode and set breakpoints? I'm not positive you can do this with WebAPI but I have been doing it with Azure functions and it works great.
That exactly what I want to learn. 😁
&gt; Remember that a unit test is there to cover individual functionality, a single unit test to assert/expect the correct output for a single method. A one to one mapping to put it simply. I think it's a many-to-one mapping. If your method has a conditional it's tough to cover with a single test.
Just making SelectedCollection read-only (and just return either collection based on IsOldItems) should do the trick. No need for the backing field and the setter.
Yes, you are right, was taken away with an example I was using in my head. Did not factor in conditionals.
I'm not the one who wrote that reply but he meant this: if your class is using other classes to do the job (they are called collaborators), do not code against those classes directly. Code against interfaces they implement. This way for unit testing you can provide mock implementation of the interface.
How do I do this?
 public QueryableCollectionView SelectedCollection =&gt; isOldItems ? this.OldItemsCollection : this.NewItemsCollection;
"Theoretically, yes. A program does exist." I am aware that this comment is not helpful.
You might not like my answer, but I really think this is the truth. The first thing to accept is that unit testing is as hard as "normal" programming. You can read books to help you learn what to strive for, but the only way to start writing good, testable code is to try and fail dozens if not hundreds of times. Every time something is hard to test, ask yourself why. Then try to figure out how to solve that. Then, maybe that fails too. You keep repeating. The tools don't matter. Some of the unit testing frameworks are better than others, but none of the frameworks make it easier to test code that isn't testable. This is because you can't just start writing unit tests. You have to learn how to write code that is easy to test. After the past few months, the advice I want to give for that is you should learn to write good Ruby or JavaScript, but a lot of people scoff at that. Those languages lack a lot of the safety nets C# has, which means the developers who use them get very used to writing extremely modular code with very explicit dependencies. That happens to be the qualities that testable code requires! It helps to study the SOLID principles, because they are very tightly related. In particular, the concept of Inversion of Control (Dependency Injection) is very important. Code that doesn't use IoC doesn't tend to be easily testable, and code that is hard to test is hard to convert to IoC code. One reason it takes years to realize this is if you're writing a very small application, the amount of effort it takes to adopt IoC is greater than the amount of effort to implement any given feature. It helps to make damn well sure if you're writing GUI code, you use a pattern like MVC or MVVM. These patterns teach you the kinds of isolation concepts that are required for testable code. It helps to have an open mind, and see programming as a journey that will take you decades. From a C# slant, here are the books that helped me "get it": * *The Art of Unit Testing*, by Roy Osherove. * *Dependency Injection in .NET* by Mark Seeman * *Agile Principles, Patterns, and Practices in C#* by Robert Martin and Micah Martin * *Working Effectively with Legacy Code* by Michael Feathers * *Head-First Design Patterns* by Eric Freeman and Bert Bates (It's a Java book. Deal with it.) If you only pick one of those, pick up *Working Effectively with Legacy Code*. It talks about how to refactor code that is not easily testable into code that is testable. Since you aren't a testing expert, you aren't going to magically start writing "good" testable code any time soon. So this book will teach you how to convert the "bad" code to "good" code when you're done. When I was learning, I found this a lot more rewarding because I could finish a program, then after it worked start learning how I *should have* wrote it. I wish I could tell you it's fast. But it took me at least 6 years to accept unit testing. I write much better code than I used to because of it, but along the way I also started writing worse code. Experience matters, so pick something you like to do and do it constantly!
Look into something called “ModelState,” if you haven’t already. At the controller level, you have access to the model state and what (if any) errors it detected when binding. What I’ve done a few times is temporarily added code into the action that’s failing that accesses the model state in a variable, then inspect that object in the debugger when my action gets hit, looking for the errors.
This is the answer that should be up top. If your classes resist testing, it's because your classes need to be refactored to better apply good engineering practices such a SOLID and IoC. It has nothing to do with which test framework you use. 
The test framework shouldn't matter at all when it comes to writing testable code.
You can, but the issue is that I get a 404 if the XML model doesn't match ProductEnvelope EXACTLY, then the code doesn't even get executed. If our third-party client ends an string in a field that should be an int, I have to find it among several hundred fields by removing field-by-field until I can get it to work, and that throws up which field was causing the problem. public UpdateStock.response ModifyProductData([FromBody] FFXIFSAPI.Models.Product ifsProduct) { if (ifsProduct.Body.Product == null) { return NotFound(); } } &lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soap:Body&gt; &lt;Product&gt; &lt;SKU&gt;"178512"&lt;/SKU&gt; &lt;Barcode&gt;&lt;string&gt;5014539220029&lt;/string&gt;&lt;/Barcode&gt; &lt;Title&gt;&lt;![CDATA[Pearl Soap Large Bar]]&gt;&lt;/Title&gt; &lt;/Product&gt; &lt;/Body&gt; In this instance the SKU field is a string, in the Product model it is an Int field. In that example it will simply return a 404 with no clue as to what the issue is.
 static void Main(string[] args) { String Line1="Some Line"; Console.SetCursorPosition((int)((Console.WindowWidth - Line1.Length)/2.0f),1); Console.Write(Line1); String Line2 ="Another Line with text"; Console.SetCursorPosition((int)((Console.WindowWidth-Line2.Length)/2.0f),2); Console.Write(Line2); Console.ReadKey(); return; } 
Removed: Rule 3, Rule 4.
[http://prntscr.com/mb4noi](http://prntscr.com/mb4noi) &amp;#x200B; It is writing in the text. Sadly!
And I need to add a command for using the gradient. [http://prntscr.com/mb4ppr](http://prntscr.com/mb4ppr)
[Ninject is basically the worst DI container](http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison). The convention-based binding is nice, but you can do that with Reflection and any other container.
Being forced to program in Swift in school
Console.SetCursorPosition takes a column and a row. In the example I gave, it prints on row 1 and row 2 which is why it appears inside the text on your example. After you call the function that prints the multi-line log string the currsor will be on the line directly below it. You can replace the 1 in the first SetCursorPosition to Console.CursorTop Then replace Console.Write(Line1) with Console.WriteLine(line1) (Which will move the cursor down a line) so the second SetCursorPosition can also use Console.CursorTop. Or, the function that prints the multi-line logo can return a value indicating how many lines tall it is so you can alter the rows the additional lines appear on that way. 
You have to write code that follows the S.O.L.I.D programming principles. They are all important for unit testing, but the **S**ingle Responsibility, **I**nterface Segregation and **D**ependency Injection principles are perhaps more important for writing unit tests. For unit testing, you want to test the least amount of code at a time. Classes should be written such that all of its dependencies are injected via the constructor. There is *property* injection but it should only be used **sparingly** and only for truly *optional* dependencies. Most often, these "optional" dependencies can be declared in a constructor overload anyway. Methods on the class should only depend on 1) the parameters passed into it and 2) the dependencies of the class that was passed in via the constructor, if any. It is preferable that a method only relies on the parameters you've passed in as this makes unit testing easier, but this is not always possible nor is it often the best when concerned with the greater context of the design of the codebase. Unit tests should test the result of a single *public* method. We don't care about private methods as those are implementation details of the class. **Public**, in this sense, relates to the ability to see it ("it" being a class or member of a class) from another type, so "public" *here* includes **internal and protected members** as well. Each test needs to test the *least* amount of code. If you test a method that relies on the business logic of another class which may or may not rely on the business logic of yet another class (and so on), you'll end up writing an *integration* test, not a unit test. You see, you want to reduce the number of ways a unit test can fail with the target being only a single way to fail (which is why many people frown at multiple assertions in a test). In order to do that, you have to be able to mock certain types, especially when you want to test the result of a mwthod that doesn't return anything. This is where ISP and DIP principles become important. Hope this helps. 
I'm not sure why you have this dictionary? Since you have bools then you can only one of two keys; a false and a true value. Essentially, this code, as is, would remove _everything_ in your list if there is just a single item with a ProduceDate earlier than DateTime.Now - which I'm guessing would be always? Would a way would be to just iterate through all items that fits the condition, and remove them: var itemsToRemove = categories.Where(x =&gt; x.ProduceData &lt; DateTime.Now).ToArray(); foreach (var x in itemsToRemove) { categories.Remove(x); } There are probably also better ways of doing it, but this code should only remove the items that are too old, instead of everything.
None. 90% of the appeal of Core is that it runs on anything, and Microsoft sort of shit the bed by not maintaining that philosophy with their GUI rollout. If I could take one of my existing C# Windows only desktop applications and move it to Core (making it cross-platform) then hell yeah I'd do it in a heartbeat, but Winforms/WPF for Core just doesn't appeal to me, like at all, not unless it runs on Linux and Mac too.
GUI should be cross platform too, that’s the revolution we need for core.
 for (var i = 0; i &lt; categories.Count; i++) { if (categories[i].ProduceDate &lt; DateTime.Now) { categories.RemoveItem(categories[i]); } } Is probably minimally expensive, if you need to fire notifications on each removal.
I mean I have thoughts but ehhh.... I can't verbalize my thoughts on Reddit. I'd get banned.
Are you afraid of learning a useful, modern language that’s in high demand? You won’t forget C# by learning Swift.
This is so bad on so many levels
I see this as a step in the correct direction. And hope they at some point then make one of the UI frameworks cross platform
For example, for data access you would have it implement an interface and the class that relies on that would have the interface as a dependency in it's constructor. This allows you to either mock the interface to provide the data you want or to create test doubles (sounds nicer at first but can become unwieldy) that returns the data you want to test. This frees you from requiring a database in order to run your unit tests.
I'm pretty sure that won't work. I have a list, containing items A, B and C. Item [0] is A, item [1] is B and item [2] is C. Using your `for` loop, I check item [0], and decide to remove it. Now, item [0] is B, and item [1] is C. I then move onto the next iteration of the loop, increasing `i` so it now has the value 1, and I check item [1], which is C. At no point have I ever checked item B. The moral of the story is, if you're iterating through an object, never change the items in that object as you iterate through it. The answer given my /u/mSkull001 will work because, unlike yours, it iterates through one list (`itemsToRemove`) while changing another list (`categories`)
/r/badcode
If you have it as a List&lt;&gt;, is there a reason you don't just use the RemoveAll function? Also you are you wanting to use DateTime.Now vs [DateTime.Today](https://DateTime.Today)? &amp;#x200B; Example code: `List&lt;UnknownProduct&gt; categories = new List&lt;UnknownProduct&gt;();` `categories.Add(new UnknownProduct(DateTime.Now.AddDays(-1)));` `categories.Add(new UnknownProduct(DateTime.MinValue));` `categories.Add(new UnknownProduct(DateTime.Now.AddHours(-1)));` `categories.Add(new UnknownProduct(DateTime.MaxValue));` `categories.Add(new UnknownProduct(DateTime.Now.AddDays(1)));` &amp;#x200B; `int removeCount = categories.RemoveAll(x =&gt; x.ProduceDate &lt;` [`DateTime.Now`](https://DateTime.Now)`);` &amp;#x200B; `Console.WriteLine("Number of items removed: {0}", removeCount);` `Console.WriteLine("Remaining produce dates:");` `foreach (var cat in categories)` `{` `Console.WriteLine(cat.ProduceDate);` `}` &amp;#x200B; This produces the following (with today's date being 1/23/2019): Number of items removed: 3 Remaining produce dates: 12/31/9999 11:59:59 PM 1/24/2019 9:38:31 AM &amp;#x200B; &amp;#x200B; If you try and remove things in a loop, you're going to have a bad time.
This is a good time to use a `for` loop instead. for (int i = 0; i &lt; categories.Count; i++) { // because removing an item shifts all the other items down, // we repeat our test on the current index while (i &lt; categories.Count &amp;&amp; categories[i].ProduceDate DateTime.Now) { categories.RemoveAt(i); } } This would be the most efficient way to do it. However, /u/mSkull001's version is clearer and easier to understand. `categories.Remove(x)` is potentially O(n) because it has to look up the item each time before removing it, while my version takes advantage of the fact that you already have the index and ObservableCollection&lt;T&gt; has a RemoveItem(int) method.
Ugh. Walk that person to the door. 
This is incorrect. You'll miss one each time there are two in a row.
I thought about using a for loop as well, but I wanted to keep it simple; and I didn't want to assume it was a list since he has a custom collection type and might not have the index methods. If it is a list then I would just iterate backwards through the list to avoid the shifting issue.
Nothing until WCF is supported.
&gt;modern language that’s in high demand. haha, maybe in America, but that classroom is [literally the first time I've seen a mac in real life](https://imgur.com/a/hQVoqrI) . He is the most incompetent person that I've seen in my entire life. For instance, the test we did two weeks ago- the only kid who actually got something done with his shitty teaching got a D, and the kid who didn't even show up for the test got a C. He also managed to leak the teacher password within his FIRST WEEK there. We were also asked to fill out a google form to rate the school the other week. Every single person from my class wrote the teachers name in the "what do you not like about this school" field. i refuse to play by his games
If your app only accesses server resources, then you can use [WCF client side on core](https://github.com/dotnet/wcf). If you need server to host services... out of luck until someone gets time to port it. I could start migrating the client side for my app, because my client app doesn’t need the WCF ServiceHost. 
Everybody is making this way hard than it needs to be. One line that is no more difficult then your first line: int removeCount = categories.RemoveAll(x =&gt; x.ProduceDate &lt; DateTime.Now); I posted full sample code in my reply to OP.
I don't think any GUI I've written or any of my friends have written is going to get ported to .NET Core 3.0. The people I know who still work on Windows clients tend to meet one of these criteria: * They're supporting a VB6 application. * Their application has third-party libraries that are not .NET Core compatible and will never be compatible. * They do not have budget or resource approval to port to .NET Core. * They're under immense pressure to support Mac, iOS, and Android. .NET Core 3.0 support for WinForms/WPF doesn't deliver anything they need. Xamarin is more close to the kinds of promises they want, but moving from VB6/WinForms to Xamarin is akin to a full rewrite, and they don't have resources for it. They're also suspicious. They laughed at me because I advocated for WPF and adopted it. Then they laughed at me because I followed MS's advice and adopted Silverlight. Then they laughed harder when all of that was abandoned for another framework. Xamarin and UWP are the current things in line, and as far as those people are concerned we're a couple of years away from MS canning them in favor of something else, maybe a WebAssembly framework. Meanwhile, all of the concepts used in HTML/JS app development have remained fairly stable in that timeframe. Sure, stuff like React/Vue exists now, but they're framework versions of the tools everyone was writing themselves. So their new work is in Cordova or Electron or Angular/React/Vue. There are projects like Babel that promise to make the stuff they write today functional for decades. I can't imagine a significantly complex .NET project in any framework that will compile as-is after a decade. If it was from before the last 5 or 6 years, it's got no concept of "multiple CLR support" and its libraries probably wont' work. If it's from about that timeframe, it's likely using PCLs and that's a crapshoot. There aren't tools to handle this, because you can't really do much about a closed-source DLL from a vendor that went out of business. If MS wants them to keep making desktop clients on an MS stack, the MS client stack needs to be cross-platform. And MS needs to support it for at least 10 years before it's trusted. I think that means MS has lost the desktop client war, because this is not a world that wants single-platform desktop clients.
Yeah, iterating backwards would improve mine, as well. It would eliminate the need for the inner while loop.
Thanks, I will definitely keep an eye on this behaviour. Do you have a proposed garunteed solution?
Need both the client and server. 
Not to mention you will get an exception when you go past the size of the List/Array if you remove a single entry.
It should. I have WPF apps running on touchscreens in a manufacturing environment. No special programming was required.
As far as I'm aware, nothing like that exists as default functionality in winforms, but there are off the shelf solutions you could use: https://www.infragistics.com/products/windows-forms/frameworks/documents-framework https://documentation.devexpress.com/WindowsForms/105/Controls-and-Libraries/Printing-Exporting/Concepts/Print-Preview/Document-Viewer 
&gt; They do not have budget or resource approval to port to .NET Core. And for that there needs to be a compelling benefit to justify that cost. And at the moment I'm just not seeing it. 
SOAP? Are you exposing a matching WSDL? If so, WTF aren't they using it?
I think this is a blind spot for the MS team. From their end, it looks like they're making a strong commitment to long-term WinForms/WPF support by supporting them in .NET Core. But .NET Core isn't a one-click port. Everyone I know has at least one major dependency that won't work with .NET Core and is either too complex to port or third-party. So even if .NET Core is a strong commitment, to them it's "a strong commitment for new projects, which I'm not writing". The kind of griping I see from .NET Client devs is exactly what I saw from VB6 devs when .NET released.
Count is a property, and shouldn't get lifted by the compiler (so it should be re-evaluated on each pass). I confess to being to lazy to test, though.
You're right. I forgot to decrement i whenever an item is removed.
I'm not 100% sure, tbh, but I think because it's `.Count`, which is a property, rather than `.Length`, which is unchanging on an Array, it should be fine. If you did var count = categories.Count; for (var i = 0; i &lt; count; i++) Then yeah, it would run off the end of the list.
&gt;Not doing a case insensitive match 😂
&gt; If you have it as a List&lt;&gt;, is there a reason you don't just use the RemoveAll function? It's an ObservableCollection&lt;T&gt;, not a List&lt;T&gt;. It implements IList&lt;T&gt;, but RemoveAll is on List&lt;T&gt;, not IList&lt;T&gt;.
It’s probably easier to make Xamarin Forms work better on macOS and Windows 10 than to make WPF work at all on any non-Windows platform. There’s also Avalonia.
This is unfortunately spot on. Microsoft screwed up hard on deciding on a UI framework, dog fooding it, and then evolving it. It’s almost impossible at this point to argue for a Microsoft stack GUI app.
But at least .NET is a huge tech leap compared to VB6. Core just isn’t, and won’t be for a while.
Thanks for the advice. I considered this option from beginning. Perhaps you \`re right ;) Good luck in your projects)
I forgot to decrement i when an item is removed. I specifically used for to allow iteration through the collection as it was modified, so as to avoid duplicating a collection with 2.3 million items. I also used Remove(T), instead of RemoveAt(int) to allow the ObservableCollection to fire events, because RemoveAt(int) is non-virtual. Do give me a *little* credit.
It might be simpler and more efficient to use ConcurrentQueue&lt;string&gt;. Simply call Enqueue and TryQueue on lines or chunks of text; it takes care of the needed locking for you. What you have done, in a broader sense, is create a [monitor class](https://en.wikipedia.org/wiki/Monitor_(synchronization)). A monitor is a thread-safe class that simply wraps the operations of a non-thread-safe class with locks. This is fine, but it is not a panacea; if you do it everywhere, you may introduce a lot of unnecessary overhead and possibly deadlocks. In general, I would handle threading from the top-down. Building thread-safety into all of your helper classes introduces a lot of complexity.
Looks case insensitive to me! They're just lucky there aren't any particularly long SQL keywords...
It's "fun" to try and decide what's the worst level, because then you spot another level.
Cool, I graduated from there a year ago :) Not a bad school, though not the best either. You can lucky with the teachers.. Or not. 
.. I was wondering whether he generated the permutations, but clearly not since then the generation would just be in here. 
You should iterate backwards if you use a loop to remove items. Then you don't have to remember to modify your index variable, and you won't run into issues modifying the list in place (but that's really only important if you're using a foreach loop).
I noticed that after re-reading. I am really off today apparently. I got hung up on him saying he had a list in the first sentence.
I have a combination WPF/Cuda application that I can't wait to bring to Core 3.0. That way I can do the development on Linux and give the code to my windows users. This is a scientific analysis app so very low rollout
Thank you. I’ll actually be posting one of my keygens with the algorithm on GitHub most likely today so people can play around with it. I’ll make sure to give the link to the repository to you as a reply.
Something like this? https://www.c-sharpcorner.com/article/building-reports-from-a-dataset-using-reportviewer/
It's REST.
Yep, sorry. You are correct. I did not pay close enough attention that you used Count.
Just learn swift. The teacher is going to know that you are transpiling. The community is not going to help you be a brat.
I think you should copy the code with proper formatting and show an example of the results that person is getting before someone can attempt to help you with this question. Also, read rule 4.
How are you going to be doing the development on Linux when the GUI libraries in .NET Core 3 won't work on Linux?
You are a person that nobody can help. How can anybody possibly know what you mean? That is literally a list of strings, and nothing more. What image are you talking about? &amp;#x200B;
Watch this video https://youtu.be/frDKP-A71W0
Let me get their straight. 1. You are using a "REST" interface, but you are expecting your counterpart to send you SOAP-formatted XML. 2. You aren't offering them a WSDL or Swagger contact and instead are having them play guess-and-check with what you'll accept. Yea, your team deserves all of the time and energy wasted on tracking down parsing problems. You don't need help debugging. First you need to first apologize to the 3rd party, then you need to read up on how to use WSDL or Swagger.
Clearly you haven't been paying attention. There is already been a lot of Windows-only features offered for .NET Core. The intention was never for it to be a lowest common denominator, cross-platform only platform.
Idiocy or Job Security?
Are you hosting a WCF server in a desktop application? If not, then the lack of server-side WCF isn't really relevant to the conversation. 
NUnit and Moq work fine for me. I use DI and interfaces as much as possible
Nobody is going to watch a 36 minute video if you can't be bothered to compose even the slightest amount of effort in phrasing your question with the appropriate context.
Significant shared codebase between my middle tier and desktop applications. Not considering porting half the application or touching a communications stack that has been extremely stable for going on 10 years.
&gt; Meanwhile, all of the concepts used in HTML/JS app development have remained fairly stable in that timeframe. Ha! While I feel your pain regarding Silverlight, the JS world is far from stable. 
Goodbye to my "created" and "updated" datetime2 columns!
Webding font
I’ll wait for the promised migration of Windows forms 
Oh my
At somepoint these strings are mapped to images.
If you watched the video, you would see the part where he explains that if you have "Webdings" as font, it shows pictures. That's it. The character defined in the List are just some "icons" on the Webdings counterpart.
I could, but that's not the point. Even if this video would clarify everything, why did I have to ask and wait for it? You are the one that wanted help, and yet you make it difficult to help you by wasting everybodys time (including your own)...
Right ok then so basically this guy has a list of strings he uses a function to randomly assign a string from that list into label.text when he clicks start they come out as images. Ps am new sorry for being so stupid
If the data you're receiving isn't consistent, you might have to take more control of the serialization process. That would let you massage the data to work, or take whatever error handling measures you need. You would probably do that in a custom model binder or perhaps middleware if the solution is broadly applicable.
VB6 offered no meaningful upgrade path to .NET. From .NET Framework to .NET Core is possible if enough libraries are ported. There are some glaring gaps, but nothing like the complete memory model rewrite that is VB 6 to 7.
He's just weird... I tried to help him on different problems and one time he just refused to show me the code piece, and only wanted to send me a photo on fricking snapchat. I don't know... \*sigh\*
 string[] specialCharacterArr = new string[] { "select", "insert", "delete", "update", "alter", "create", "where" } for (int i = 0; i &lt; specialCharacterArr.Length; i++) { if (input.Contains(specialCharacterArr[i].ToLower) or input.Contains(specialCharacterArr[i].ToUpper)) { int stringLength = input.Length; for (int j = stringLength - 1; j &gt; 0; j--) { output = output.Insert(j, "-"); } } } &amp;#x200B;
If you're calling synchronous code, you're already occupying a thread. Depending on your execution context, that is likely already a threadpool thread. \`Task.Run\` isn't necessarily going to consume an additional thread. It's best not to do sync-over-async, but when you're stuck doing it, the solution isn't to write code that causes deadlocks. It's disingenuous to advise on writing code that is known to cause problems, especially when 3rd party code gets involved. If 3rd party code isn't involved, and you can take the time to "ensure you code in a way that doesn't cause it," then take the time to write fully asynchronous code, or heed the advice on the safest way to write sync-over-async.
Yeah. Thanks for that. No. We have a system that is up and running, we have an API for common calls (things like getting product information, lead times etc...). It's been in place for some time. Now, a third party software company has sold us an ERP system and we published our documentation to them. They, for some ungodly reason, can only send xml. As this is an "off the shelf" kind of deal, they got our documentation and want to use our API. We changed it to allow xml (instead of json, which is what we use), and they are calling our interfaces....only they keep getting 404s returned because they aren't formatting their xml to match our model....and then asking us to tell them which fields caused it to fail.
Performance and long term support. .NET Core was originally called .NET 5 for a reason. The .NET Framework has reached the end of the road and we really need to start looking at a migration path or we'll be locked out from any new .NET offerings in the future. Hell, it already doesn't support parts of C# 8. I'm not saying you need to take the leap immediately, but you should at least have plans for porting your non-UI code to .NET Standard. 
Probably not. It just wouldn't be that useful, as there are too many differences to translate and realistic amount of code. Outside of JS transpilers, you're not going to find much usable stuff besides vb.net to c# and vice-versa.
Specifically this part: [https://youtu.be/frDKP-A71W0?t=309](https://youtu.be/frDKP-A71W0?t=309)
http://www.catb.org/esr/faqs/smart-questions.html
I think he needs to understand that sometimes when you are learning you can spend hours if not days trying to figure something out. You can't just ask everything. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programminghorror] [Well... that's one way of doing it](https://www.reddit.com/r/programminghorror/comments/aj2mfl/well_thats_one_way_of_doing_it/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Sweet looks like I can use perfectly safe words like "drop" and "truncate".
This is slightly less bad. Still totally crazy. What's the point of inserting all those dashes?
nibba I don't even know how to use SQL
I could replace all of that with .ToLowerCase(). I don't think that's helping anyone stay employed.
&gt; I like using GetAwaiter().GetResult() because it unwraps the exception, whereas .Result and .Wait() will throw AggregateException, which is not very convenient. You can continue to use `GetAwaiter().GetResult()` with `Task.Run`.
Ignoring the obvious badness of this, can something like this still be executed? EXEC “dr” + “op table TableName”
Yeah, it must be difficult if someone complains about an area you are working in. Know the feeling. Don't get me wrong, .NET is absolutely amazing. Spend most of my day working with Java/C#/WPF it really is a nice language with a very well thought out API.
I did a quick test, and the `temp` variable is indeed optimized away when compiled in release mode, leading to the result `640437496`. This one produces `640437504` in release mode, even though the IDE complains about the "unnecessary" `float` cast and suggests removing it: static int C(float f, int n) { int i = (int)(float)(f * n); return i; } This one also works, without the warning: static int D(float f, int n) { int i = SinglePrecisionTruncate(f * n); return i; } [MethodImpl(MethodImplOptions.NoInlining)] static int SinglePrecisionTruncate(float value) { return (int)value; } However, even though these two work, I don't think the specification requires that they do, and a different compiler version could theoretically decide to optimize them differently. The excerpt I posted in another comment suggests that only "statics, array elements, and fields of classes" are required to respect the floating point precision limit.
Yes.
Post the code and a fucking actual description you mongoloid. How many times do you have to be told that?
Got it now no need to be so aggressive am only new 😔
Short version: A dependency is anything you rely on that you can't 100% substitute in-memory with a mock you wrote yourself. Anything that makes an out-of-memory call, such as network or disk IO, such as a REST API client or DB Repository. Anything that is a black box with state you have no control over, such as encryption/decryption classes which rely on OS-installed certificates.
They can only use xml because their product only support WS-*/SOAP. This is a pretty common scenario. Look at it... &lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"&gt; That is a SOAP envelope. All you need to do is bolt on a WCF service that exposes the same endpoints as your Web API endpoints. That will serve up a WSDL for them to consume. 
He uses Wingdings. A font. Did you get it? Thanks for wasting my time. Next time actually listen to the guy.
I'm unusually unskilled for this sub, so pardon my newb viewpoint on this but ... As someone with very light WPF experience I wanted to play with Avalonia as I found it super interesting and considered using it for the 2-3 GUI projects I've had in mind for a while but haven't come around to. I did manage to create something too, but: my god their documentation is nonexistant. I think they just expect you to know WPF and try WPF-things until they work in Avalonia but boy even that is no excuse to have half your docs say "#TODO" and the other half being barely a page long That said, still an awesome project and I'd love to contribute some to it one day.
Am sorry mate I skipped that part am a bit of a twat so left me be
Since this is an ObservableCollection you can’t use RemoveAll. So the next best thing I can think of is to use Where(). Something like this(written on phone so unsure if compiles): public async Task RemoveCategory (ObservableCollection&amp;lt;Category&amp;gt; categories) { categories = categories.Where(c =&gt; c.ProduceDate &lt; DateTime.Now).ToList(): }
r/shittyprogramming
I need it in a table similar to the second link, also need to have the engineering drawing attached, is that possible from report viewer?
That would be fine...we're not "allowed" to work on it, supposedly. This is mainly our issue...hence me looking for a quick solution to finding which fields aren't confirming.
If you make sure the entire call stack has no call continuation you won’t deadlock. You can do that by adding ConfigureAwait(false) in all places where you await. In library code you should always do this. Good read about best practices here: https://msdn.microsoft.com/en-us/magazine/jj991977.aspx
ToUpper/ToLower?? 
Yes, it works. I just tested it on your phone. If you'll notice, you no longer have table TableName. 
&gt; Working Effectively with Legacy Code Surprisingly, this book is available for free on [archive.org](https://archive.org/details/WorkingEffectivelyWithLegacyCode/page/n19).
An answer as vague as the question;I like it! Here, have my upvote!
One of my coworkers did something similar. Until a user with a name of Walter broke the app.
The key word that you need to search for in Tinzen, which is the modified Adroid OS for TVs and other embedded devices. Unfortunately, while it depends on the actual TV and tinzen versions you can basically just make web apps that can be run from the TV, you can't really control the TV: &gt;1. Can we control the tv through my own app?: Not really &gt;2. For any USB connected to the TV, can I browse through the USB contents somehow? : Probably not &gt;3. Stream a live TV directly to my app? : No &gt;4. Connect Set Top Box to android app and access channels? : Cable/Sat box, no. HDMI based control, probably not. Sometimes a TV will have an IR emitter that you can send IR codes, this requires wiring up an IR flasher. Boxes with IP control of can be controlled. No idea about Tinzen and rs232, but with a fancy TV this is a possibility. &gt;5. Can I control my app through the remote of a Smart TV using buttons or voice?: Yes. 
I didn't know that, thanks!
What... Why.... lmao
uhh ***I*** even do that. I was a shit developer in school and there sure isn't a way in hell that i'll ever get a dev job now that i'm out and have my degree. If this is the kind of person landing real jobs as developers, where's my 100k/year salary?!? Seriously this is a real piece of work.
Thanks, ill give those solutions a shot since there's free trials available. Much appreciated. 
What does this actually do?
&gt;That would be fine...we're not "allowed" to work on it, supposedly. Well then your managers owe you an apology. &gt; Maybe because it's in dotnetcore or something Ok, that's going to make it more difficult. .NET Core doesn't support WCF so here are some options: 1. Write an adapter layer in .NET Framework. It takes the SOAP calls and forwards them to the .NET Core project. 2. Just accept raw XML and manually parse it instead of using a deseralizer. (Yea, this is gonna suck.) 
That's not even the problem. They shouldn't be sanitizing input like that. Parametrized queries solves that instantly.
&gt; Everyone I know has at least one major dependency that won't work with .NET Core and is either too complex to port or third-party The compatibility shim eliminated a huge swath of that problem, though many don't have the test coverage to rely on it. We had an imaging library that we assumed would be our main blocker, but it seems to work fine under the shim. Turns out our last block is an old ORM that references the Linq2Sql lib.
 &gt; if (input.Contains(specialCharacterArr[i]) == true) For some reason this triggers me the most
look busy.
The string is used to look up the image. It's like googling "The Rock" and getting pictures of "The Rock".
I got it now haha
You pass everything you need to be printed as parameter, so your picture can be printed too. https://youtu.be/859BmmVOm8M For more complex table and what not you can draw lines, if a normal table don’t fits your needs. 
Option 1: Create a new class that wraps them both and exposes an unified API. This is often referred to a Facade or Adapter. Option 2: Create extension methods on one that make it look like the other. Both options are suitable when you don't have the ability to change the original class.
Ok, but why would I want to do that?
True, that is the real WTF here. But this bit of code is its own special snowflake of string parsing. 
I agree. I also tested some basic things in Avalonia only knowing a bit about WPF and it was really hard to understand when things went wrong. The documentation is basically non-existent. Even just simple examples and one-liners would be better than the current state of the docs.
If you start on the threadpool, then [Task.Run](https://Task.Run) will put you back onto the thread pool, sure. By my understanding, it could even be the same thread. It will also cause severe scalability issues in [ASP.NET](https://ASP.NET) applications, and is a waste of a thread jump in a UI application. So it's a bad solution for much of the time, and should be considered a last resort. Advising use of GetAwaiter().GetResult() is not causing deadlocks. The misuse of async and await within the execution path of the method that you're using GetAwaiter().GetResult() on is what causes problems, ultimately because the programmer does not understand what they are doing.
Would this be fast when it comes to loop through 2.3million objects?
Banned? I'd be put on a no fly list.
SQL Server ' exec sp_executesql 'dro' + 'p table users'; -- ' execute('dro' + 'p table users');-- MySql ' execute 'dro' + 'p table users'; --
/r/shittyprogramming
Im familiar with facade and adapter, the problem is that the classes structures and returns are quite the same but different references. Like a clone, but some static variables differs.
&gt; Thoughts? Nope, all thoughts left my head after reading that code.
The facade can create other facades to wrap the return values as well. It is incredibly tedious, but I've had to do it before.
Definitely not the fastest option. I think the fastest you could do would be something for loop running backwards, like I've suggested in another comment: var now = DateTime.now; // Also, no reason to keep calling this. for (int i = categories.Count; i &gt;= 0; i--) { if (categories[i].ProduceDate &lt; now) categories.RemoveAt(i); }
Lol
Your only making it worse for yourself.
Yeah, i think it is the only way.. thanks btw
The best part? Apparently, the "safe SQL" version of "please select the place where you want to sit" is "p---l---e---a---s---e--- ---s---e---l---e---c---t--- ---t---h---e--- ---p---l---a---c---e- -w-h-e-r-e- -y-o-u- -w-a-n-t- -t-o- -s-i-t".
lolyeah, that's what I was thinking. It's so silly. I really want to know what was going through this guy's head.
If you value your sanity, you will not try to figure that out.
Fucking Walter, always messing things up
But they don't catch all SQL keywords 🤔🤔🤔
No, that will not necessarily rid you of deadlocks. However, if that class has only one object that it ever locks and, while locking this object, never calls functions which lock objects in another class, then I believe it would be deadlock-free. 
When was this written? Do you happen to know?
is it BackColor you're after ? ForeColor is the color of the Text IIRC, so that'd likely be changing it from Black to Black...
I want to change the forecolor to white I tried that too and it didn’t work 
That looks NOTHING like the SQL sanitizer I tried to write myself. NOTHING! Ha ha ha! ...Anyone got a nice example of SQL sanitizing source code? So I can....compare mine....
I'm watching you...
It checks if the string contains any of the sql keywords (select, insert, etc), if it does it... inserts dashes between all the characters for some reason so "Select bla bla bla" becomes "S-e-l-e-c-t- -b-l-a- -b-l-a- -b-l-a". Idk what the tought process behind that was though.
And I thought my company's bastardized version of MVC was bad. This just takes the cake.
I have a print rendering engine, for thermal labeling printers, that I'd love to make cross-platform eventually dockeize. (either that or wait for Windows 10 Core Iot to add support for WPF which is unlikely to happen) My app currently relies heavily on WPF's DrawingVisual objects to build and render 1-bit b/w bitmaps. It's going to be really interesting to see what Core 3.0 WPF will have to offer, even though I expect my user case won't be supported. In any case, I'm planning to explore what's feasible with WPF for Core. 
I hurts in so many levels... 
&gt; If you start on the threadpool, then `Task.Run` will put you back onto the thread pool, sure. By my understanding, it could even be the same thread. When using `Task.Run` in this manner, you're guaranteed to resume on the same thread. That is why this is the preferred way to handle sync-over-async; you won't end up in a situation where another thread picks up the continuation and can't execute because the `SynchronizationContext` is waiting for your first thread to complete. &gt; It will also cause severe scalability issues in ASP.NET applications `Task.Run` will not consume any more threads than would be consumed by blocking execution in the first place. Either way, you're occupying a thread for the lifetime of the [a]synchronous work to complete. There is no magic in _not_ using `Task.Run` to block that prevents this. &gt; and is a waste of a thread jump in a UI application. Not using `Task.Run` will [possibly] cause a second thread to call the continuation because your first thread is blocked waiting for the synchronous work to complete. If your concern is the number of threads, consider that not using `Task.Run` for sync-over-async is likely to use a second thread. &gt; If you are dealing with code that has been written by bad programmers You are advising developers to block threads in an unsafe way when doing sync-over-async. It is precisely the code you recommend writing that requires the use of `Task.Run` to make sync-over-async as safe as possible.
Thanks a lot, bro. That’s the table where I kept all the pictures of my kids. 
Please forgive my stupid question. I am a brand new student to computer science and programming. I dont know how to program yet. However, I was told that you can inject php and other code into form elements and possibly break websites. Is it possible that this programmer is simply trying to catch and log any attempts at SQL inputs into form elements and log them in a way very easy to track later that will give you the user information if anyone that tried to use SQL statements into a form? Forgive my programming ignorance sorry.
No you can't, you'd get a "'string' does not contain a definition for 'ToLowerCase' and no extension method 'ToLowerCase' accepting a first argument of type 'string' could be found" error, and that's not helping anyone stay employed either ;)
only thing i can think of would be winforms' "UI Thread" whatnot, but IIRC if that were the issue you'd be getting errors when trying to set it. Try something like this: var label = labels[x]; label.Invoke((Action)(()=&gt;label.ForeColor = Color.Whatever)); That's all i got... Haven't touched much UI since Core dropped so im pretty rusty there heh.
I have yet to actually play with Avalonia, mind you. I do believe it's in its rather early stages. It's possible the open-sourcing of WPF (which will take a while) will help Avalonia become better faster, and/or become a more suitable migration path from WPF.
/facepalm I gasped and whined.
Maybe try typing your FromBody parameter as object rather than your model. This way you can at least see what's going on. Then maybe have nullable properties on your model to cover all your bases...?
Maybe for people who want to learn something, a summary of the problem could be interessting: obvious solution: - use sqlparameters Problems with his code (ignoring the obvious solution) - not using string.equal(..., IgnoreCase), or use string.ToLower() and only write lower case words in the array. - specialCharacterArr ( bad naming, b/c it is an array of words not characters) - catch on SystemException with uncommented log statement and no rethrow. - using an array for algorithms like this is not a good choice, using a hashmap for simply checking if a list contains a string is easy to implement and could improve performance. Anyone something else? 
Maybe he wanted to make the string safe, but also waste as much memory as possible and force as many garbage collections as possible while doing so.
string.Equals("select", StringComparison. OrdinalIgnoreCase)
Sure, in the long run, that's the reason. (I don't fault Microsoft at all for not wanting to further enhance an old runtime. I appreciate it — it's the right thing to do in the long run.) And for web apps and APIs, libraries, etc., that's fine. For mobile apps, it isn't really the present (Xamarin is still Mono), though, and for desktop apps, it's only a _possible_ future.
This is a fair point.
There are easier ways to compare strings and ignore their casing then listing all possible combinations. On top of that, he is using == true, which is redundant. Also the logging function is commented out. The replacement with - characters seems strange and weird also. It should just throw an error really. Other users also pointed our that it doesn't account for other injection methods like execute.
Removed: Rule 4.
`if ((input.Contains(specialCharacterArr[i]) == true) &amp;&amp; if (input.Contains(specialCharacterArr[i]) != false ) ) == true)` Fixed
The thing is, the longer we wait the more painful the upgrade process becomes. I've heard of far too many applications suck on old versions of .NET, Node, SQL Server, etc. In every case they pushed off upgrading year after year until it got to the point where the backlog of compatibility issues became so great that they couldn't afford to upgrade. I'm not saying that I like having to chase Microsoft's tail. This constant treadmill sucks, especially for people who have applications that aren't touched for months or years at a time.
Obviously it should have been written as if (!((input.Contains(specialCharacterArr[i]) == true) == false)) 
Wow, Winforms being brought over. I love that... I don't get why people don't like winforms anymore... it is so easy and strait forward... the only issue I've ever had with it is the difficulty to skin it, but if your writing business applications it's not really required.
Avalonia is still a research project. It may be years away from being stable enough to justify writing good documentation. 
I'll do that tomorrow. Cheers. Most are nullable already (went down that road already), some are not because we need them not to be null.
A past job had a massive search/replace function as it's "security" against SQL injection attacks, covering pretty much every reserved word followed by a space. Every so often we'd have a user complaining that "because" was being changed to "beca" in the middle of a sentence. Despite this, the business refused to sign off on the much-needed rewrite.
&gt; &gt; &gt; Turns out our last block is an old ORM that references the Linq2Sql lib. If you have some cash, this might do the trick: https://www.devart.com/linqconnect/
I wonder... how hard would it be to port the Mono version of WinForms to .NET Core.
Yeah, but if their absence is causing issues, you can check for the value once you're in the code. Set a default value and you're all set.
Oh FFS, this is a windows only extention to .netcore? Whats the point of that? Why would I bother porting my program from one windows locked language to another windows locked language. The primary gain for switching to .net core is cross platform compatibility... if all this is just to be able to build a windows only application in .netcore then forget it... I'll just wait it out until they come up with the ui that I would want to use becasue it grants an advantage. Otherwise it's just a lot of time lost to get to the same spot. 
this is the kind of information I know I need but I am probably gonna go with squirrel. Are you opposed to me sending you a private message here or there asking for more detail?
Just be glad I didn't drop your other table that had the pics of everyone else's kids. 
clickonce was giving me issues. I'm gonna give squirrel a shot today.
I'm not aware of any guarantee that it will be the same thread. As far as I'm aware, that would be an implementation detail and a potentially unstable assumption. I also think you have missed the point with [ASP.NET](https://ASP.NET). Stephen Cleary has, I believe, several articles on why [Task.Run](https://Task.Run) is bad for [ASP.NET](https://ASP.NET), such as this one: [https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html) &gt;Not using [Task.Run](https://Task.Run) will \[possibly\] cause a second thread to call the continuation because your first thread is blocked waiting for the synchronous work to complete. If your concern is the number of threads, consider that not using [Task.Run](https://Task.Run) for sync-over-async is likely to use a second thread. Avoiding [Task.Run](https://Task.Run) for the synchronous calling of async methods is no more likely to result in multi-threaded code than calling it asynchronously. In other words, Using GetAwaiter().GetResult() rather than awaiting will have no effect on how many threads are used. &gt;You are advising developers to block threads in an unsafe way when doing sync-over-async Absolutely not. GetAwaiter().GetResult() exists to call an async method in a synchronous manner, for the scenarios where you need to, such as in [ASP.NE](https://ASP.NET)T Filters. It's there because .Result and .Wait() throw less-convenient exceptions. What you are advising is for people to throw proper programming out of the window and just chuck the workload onto the thread pool. As we've covered, that's a terrible solution for [ASP.NET](https://ASP.NET). It's also a waste of a thread jump in a UI application. You're advising people to take the absolute lowest barrier solution they can find. If you are relying on bad code, you will have to consider wrapping it in a [Task.Run](https://Task.Run), but you should not stoop so low if given the choice, as it's just degrading the quality of your codebase, and your performance. &amp;#x200B;
you guys are awesome. This beats the hell out of stackoverflow.
equalsIgnoreCase()
Oh and containIgnoreCase()
Sadly I've seen worse.
Wow, thats a cool feature. Tank you. 
Yep. Fair point. I'll do just that. Thanks again.
Good luck! Hope it helps 
Pretty sure this is a joke
What bugs me is: 1) the new toolchain never _quite_ seems mature, 2) the old toolchain isn't maintained any more, 3) there's very little dogfooding on Microsoft's end (which in turn is part of the reason for 1). Chasing the tail is one thing. Chasing the tail of a dog that doesn't quite know where it's going and also sometimes randomly stops, then barks and says "well, we're not quite there yet!" is another.
Discards are the best feature, after var.
&gt; 3) there's very little dogfooding on Microsoft's end (which in turn is part of the reason for 1). I have to dispute that last point. It's not that they aren't using it, so much as every team is doing their own thing and it all gets shoved in so no one knows which is the "right way" to do something.
Thanks, i scrubbed through the link and might be able to make it work.
Just a minor correction. Dont test methods, test functionality. I know this will often end up the same but it is still an important distinction to remember.
Please note that the suggestion to use `Task.Run` to avoid deadlocks when you are forced to use sync-over-async comes from Stephen Cleary, as I posted in my original comment. As he is a source you trust, I advise you to continue following his advise. https://stackoverflow.com/a/44836942/1801382
&gt;back Minimally expensive like that its low cost? or high cost? 
Gets you a bonus if you’re compensated by lines-of-code written. 
If you know the code calling the Wait/Result is executing on the UI thread and the task is running on the thread pool then waiting is not going to cause a dead lock. It will just lock up the UI until the task is done. This is probably not an ideal situation, but is not a dead lock. &amp;#x200B; If the code calling the Wait/Result is executing on the UI thread, and so is the task, then you will definitely cause a deadlock. &amp;#x200B; If the code calling the Wait/Result is executing on the thread pool and the task is executing on the thread pool, then you might cause a dead lock if the task you are waiting on is waiting on your task. &amp;#x200B; You may also cause a \*fake\* deadlock that just feels like a dead lock if you've filled the thread pool with tasks that are waiting on other tasks that are not currently executing. Your app will appear to freeze for a period of time until the thread pool manager spins up more threads. If you code systematically keeps doing this the thread pool may continue to grow so large that the number of threads in the pool cause the system to slow due to the enormous amount of context switching between all the threads that a simply doing nothing but waiting. &amp;#x200B; So general rule of thumb, don't wait on async tasks unless you are really confident you know know the context of the caller and the task you are waiting on. &amp;#x200B; &amp;#x200B; &amp;#x200B;
# uff
&gt; That’s mostly helpful warning, but sometimes you really want to do fire-and-forget. Not with `Task` you don't. This risks your application throwing exceptions at non-deterministic times. This can happen if your async Task throws an exception that is caught during garbage collection. Don't fire-and-forget like this.
 string[] myOpinion = new string[] { "NO", "No","nO", "WTF","WTf","Wtf" "wtf","wtF","wTF", "MYYYYYYYYYYYYYYYYYYYYYY EYYYYYYYYYYYYYYYYYYYYESSSSSSSSSSSSSSSSSSSS" }; &amp;#x200B;
I've found over the years that you cannot attribute to malice what can be explained by ignorance. I know I've written plenty of shitty code over the years. Clearly they never consider `ToLower()` in this case.
r/thirdsub
&gt;I hate to say it, but I don't think we'll ever see .NET Core be as polished as the original Visual Studio.NET. Sure is looking that way. Cool stuff coming faster, but the bugs as well. They're joining the move fast and break things world. &gt;I have to dispute that last point. It's not that they aren't using it, so much as every team is doing their own thing and it all gets shoved in so no one knows which is the "right way" to do something. Just one example out of many: don't write VS Installer in Electron. Write it in WPF (or even WinForms) with .NET Core 3.0. Show us that it's a UI framework viable enough that _you yourselves_ are using it.
&gt;We are excited to announce the release of .NET Core 1.0, ASP.NET Core 1.0 and Entity Framework Core 1.0, available on Windows, OS X and Linux! .NET Core is a cross-platform, open source, and modular .NET platform for creating modern web apps, microservices, libraries and console applications. https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/ .NET Core from the beginning was meant to be cross-platform. *However*, Microsoft does acknowledge that .NET Core 3 with GUI frameworks are an exception to this, specifically because of how tightly coupled the frameworks being ported are to Windows APIs. It's basically a compromise to get everyone over to .NET Core so they can sunset .NET Framework.
[direct link to their survey](https://www.surveymonkey.com/r/BNLS9VR) cause god knows they aren't going to read the comments.
https://bertwagner.com/2017/09/12/how-unicode-homoglyphs-can-thwart-your-database-security/
Use parameters
I agree. I am assuming the writer knows the difference between a quality test and writing for the sake of having one. 
&gt; Oh FFS, this is a windows only extention to .netcore? It's hilarious that, every time someone writes about .NET Core 3.0, someone else is astonished that, no, WinForms and WPF are _not_ going cross-platform. It really speaks to how Microsoft screwed up the branding and marketing here. &gt; Whats the point of that? .NET Core is the new framework and runtime. An increasing amount of modern features, including several features in C# 8.0, is only available in .NET Core. The classic runtime in .NET Framework isn't getting updates except when absolutely required, which increasingly means never in a million years. The _framework_ still gets updates because doing so requires less work, and even those increasingly happen by providing NuGet packages (which, if you ask me, is fine). But runtime changes are basically not happening any more. So, the point: making WinForms and WPF work in .NET Core 3.0 means _making them work at all_ with modern runtime features, including various performance improvements.
Thanks a lot dude! I could spot some mistakes, but as a beginner I don't see all of them. Your explanations are helpful.
Banned? I'd be forced to join a black metal band.
WPF for .NET Core won't be cross-platform.
If only there was a way to generate all permutations of these words so you wouldn't have to write them all by hand. Then you could put it in a micro service. Simply do a get on http://aws.amazon.com/is_special_character/?word=selECt and parse the answer out from a 30 kb xml file.
I'll keep that in mind. We're not using L2S directly, but instead Subsonic, which reference and uses L2S internally. We have been swapping out sections for EF Core, but it's a decent size app with a 10+ year old code base so there's a lot to do.
&gt;modifiying the sql statements with inserting dashes is not a good solution Also fun it repeats if it sees more than one special word. Can probably manage at least a small DoS attack against this since it can trigger thousands or tens of thousands of allocations and GCs (depends on limits of input strings). Though I guess they're "lucky" they only insert dashes equal to the length of the starter string, so it's only polynomial memory growth rather than exponential.
My brain just exploded. Someone needs to be taken behind the shed for 50 lashes!
In US of A c# developer : 20,345 jobs Swift developer : 2,353 jobs So no.
I first saw this and thought, cool! Bring on the dusty old ascii art! I love that stuff, then it began to sink in... someone writes their code in excel! Smh
All he says is that it won't deadlock and is a valid solution from time to time. I interpret this to mean it's a valid solution, but not a primary solution, for the disadvantages it brings, e.g. the [ASP.NET](https://ASP.NET) issue he partly referenced. I don't believe he has ever advised this as a go-to. I've also realized that I didn't quite interpret some of your statements correctly. You said that using [Task.Run](https://Task.Run) in the case of running an async method synchronously is guaranteed to resume on the same thread, when starting on the thread pool. I take it you're referring to the method in the link you provided, which is "[Task.Run](https://Task.Run)(...).Result". This will never resume on the same thread, as the thread that executed this line has been blocked, so it has to continue on a different thread. What I meant was that, when awaiting [Task.Run](https://Task.Run) on the thread pool, I believe that it could be possible for the continuation to run on the same thread, as the thread is not blocked and has returned to the thread pool, so it should be available for assignment. This is not true when you block with .Result. This "[Task.Run](https://Task.Run)(...).Result" solution will always result in the use of an additional thread. That should be proof enough of why it's a last resort.
/r/ofcoursethatsathing
About the examples: RangeError: bad Memory initial size 
/r/fifthsub 
Well, hopefully it is one step closer to UI frameworks that actually is crossplatform. Stuff takes time I guess
use another browser....it seems firefox generates that
This induced a (thankfully short-lived) primal rage in me. Glad to see I'm not alone. 
. NET 1.0 was meant to be cross platform, that's why we have Environment.NewLine. 
You can see verbalisation!? How do I turn captions on?
&gt; Not with Task you don't. This risks your application throwing exceptions at non-deterministic times. Can you expand a bit on this? Assuming you're not running under classic ASP.Net. I ask because I'm relying on that in a dotnet core project at the moment.
Hmmm, I guess I am.
That had better be a joke, mister... 
They specifically say here, &gt; The primary selling points of .NET Core are: &gt; Cross-platform: Runs on Windows, macOS and Linux. Nothing that I said is wrong.
Just imagine, if you scale it to the point where you can ask for all the words _at the same time_! The possibilities are endless and your only bottlenecks are network, CPU, RAM, and the only single points of failure are aws and network. I can hardly think of a better solution.
There is a huge difference between "lowest common denominator, cross-platform only" and what .NET is. Java is an example of LCD. It does everything it can to lock you into the Java ecosystem at the expense of not being able to use any platform native functionality. .NET is all about giving you access to everything the OS has to offer. That's why it had p/invoke since day 1. That's why the standardized parts were OS agnostic despite much of it being Windows specific. If you want to complain about not having a GUI for linux I'm right behind you. But I see no reason to support the stance that just because some parts of .NET Core are cross platform we have to kill all of the OS specific parts. There's no benefit in that. 
typing that must of been a bitch
&gt; must of You probably meant **"must've"**! It's a contraction of "must have". --- ^(^^bleep ^bloop) ^I'm ^a ^bot. ^If ^you ^have ^any ^questions ^or ^I ^made ^an ^error, [^send ^me ^a ^message](https://www.reddit.com/message/compose?to=couldshouldwouldbot&amp;subject=Question&amp;message=Hello!+:\))^.
Low cost, *probably* in terms of memory used and execution time. HOWEVER, I'm probably wrong as it's written. See the discussion between u/RiPoint and u/mSkull001, and the comment from u/celluj34. Something like this would probably be best: for (var i = categories.Count - 1; i &gt;= 0; i--) { if (categories[i].ProduceDate &lt; DateTime.Now) { categories.RemoveAt(i); } } This: * doesn't require copying the collection, which is an O(n) operation that will consume memory for at least n references. * doesn't require checking IObservableCollection&lt;T&gt;.Count more than once, in case that's not an O(1) calculation for some reason. * still fires events for items being removed, which solutions that use LINQ to create a new collection will not do. * doesn't require backing out changes to the index variable, i, or nested loops. If you're *really* worried about execution time and memory usage, though, benchmark it.
Who said we had to kill the OS specific parts?
fire and forget is a code smell, but ultimately an exception on a "forgotten" task will crash your app. if you really must fire and forget, make an extension on task to wrap in a try catch, and make sure you do something with that exception. public static async void SafeFireAndForget(this Task t) { try { await t; } catch (Exception e) { // do something } } MyAsyncFunction().SafeFireAndForget(); but the best thing to do is await it in the right place. If you have background work to do, set up a real work queue and dedicated workers.
Least expensive, but I think the revised solution presented by u/mSkull001 should beat it for various reasons others have already pointed out. Plus, I still have it calling `RemoveItem()` (meant `Remove()`, but had a brain fart) and examining `DateTime.Now` on each iteration, and his/hers does not have those sorts of problems.
😐 Fck you!!!!!!!!
Just FWIW: * Replacing the collection seems like it defeats the point of using `ObservableCollection&lt;T&gt;`. * `List&lt;T&gt;` is not assignable to `ObservableCollection&lt;T&gt;`. * Assigning a new collection to the method parameter won't change the contents of the collection that was passed in.
The gist is that an unobserved exception sits around until it is observed in the finalizer as part of garbage collection. As garbage collection is generally non-deterministic, this means an exception thrown in a "fire-and-forget" Task will crash your application at an unpredictable point in time. More information [here](https://blogs.msdn.microsoft.com/pfxteam/2009/06/01/tasks-and-unhandled-exceptions/) and [here](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/exception-handling-task-parallel-library#ExceptionProp).
True on all accounts. If someone actually wanted to do it like this they could use the “ref” keyword on the parameter, but that makes it even uglier. 
What the actual fuck.
Which of his answer? he got 2.
The revised one, the second.
For what it's worth, I tried this out with a WinForms app on my Surface Pro. I created four buttons, each with one of the following clicks: * Click * MouseClick * MouseDown * MouseUp When using touch, all of the buttons functioned the same way so it seems that MouseDown (at least with WinForms) doesn't automatically work the same with touch input as with a mouse.
🎶 Baby shark do do de do 🎵
You mean W-a-l-t-e-r right ?
&gt; span&lt;t&gt; a new feature giving you more power to avoid allocations Where you are using Spans in business apps? liek srsly
ThaNK GooDnEss THaT REDdit DoEsNt HaVe AdvANCED SpElL ChEcK CapaBilitY! JuSt sWEAr In MIxED CAse!
https://docs.tcgplayer.com/docs/getting-started https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client
&gt;This is new to me. Every time I've ever used a lock, I created a special object for it to use. So lock doesn't do anything to the data stored in an object? What exactly does a lock do, at a deeper level, where you can just feed it any random object? The lock operation generates IL that references against that object's unique information. This is why you really do not want to lock on types, for instance, as other things can get that object's information and lock against it and cause deadlocks. The phraseology I learned was that you _take_ a lock _against_ an object. You don't lock an object, you don't have a lock object, you _take_ the lock _against_ an object. This hints towards what is really going on: the object is just used In theory you'd want a unique private object to lock against so that nothing outside the control of that object can lock against that object. In practice, any private instance of an object will do _so long as that object doesn't come from somewhere else_. The instance of the object must never be exposed. The easiest way to do this is `private object _lock = new object();` so it's good practice to do so.
Mommy shark do do do do do
You can attach a handler for unobserved exceptions so they don't crash your application. https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler.unobservedtaskexception?view=netframework-4.7.2
Best of luck in your software development career!
You can lead a coder to a keyboard but you can't make them think.
I know that. But if I can build my project against WPF for Core then I can start decoupling the print engine from the UI. Next step would be to get my print engine to run headless, and then to build a new web based fronted. Alternatively, considering the news about WASM.WinForms I'd be surprised if similar work isn't being done for WPF. At least by some small team who's still mourning the death of Silverlight. 
How do people like this even manage to ever even write code that compiles?
r/oof
Here's a sneak peek of /r/Oof using the [top posts](https://np.reddit.com/r/Oof/top/?sort=top&amp;t=year) of the year! \#1: [Oofed](https://i.redd.it/6rcdn45lgze11.jpg) | [16 comments](https://np.reddit.com/r/Oof/comments/95sqx3/oofed/) \#2: [oof](https://i.redd.it/ug1c8chqpp621.jpg) | [7 comments](https://np.reddit.com/r/Oof/comments/a9tvym/oof/) \#3: [Oof](https://i.redd.it/33tkwuzr3kr11.jpg) | [7 comments](https://np.reddit.com/r/Oof/comments/9n9v4t/oof/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
Daddy shark do do de do
and Grant.
Technical debt due: [https://en.wikipedia.org/wiki/Technical\_debt](https://en.wikipedia.org/wiki/Technical_debt)
It was meant to be `if ( input.Contains(specialCharacterArr[i]) ? 1: FALSE )` 
It's the gish gallop of bad coding. 
2019 ? Since the inception of C# when was this acceptable ?
Bind to the DoubleClick event of the listbox and then use .SelectedItem to get the one that was clicked.
If the collection is a list, this will be O(N\^2). Given 2.3 million objects, this is unfortunate, but if you are sticking with the ObservableCollection interface, there really isn't a better way. It would be faster if you had control over the collection at the expense of memory if you allocate a new collection and just copy over the ones you want and discard the old one. You can then implement the proper behavior for the observability of the collection.
Been there, done that, more than once. The good news is that this will hit the end of lifecycle sooner or later and the company will have to invest on upgrading it. If upper management gets behind the effort this really helps. The best way to do this is to show how much the old code base is costing them.
I feel this. Big time. A couple pieces of advice, if you want any. * Let your supervisor on this work know that there are some hidden costs you've found, kind of like an episode of Fixer Upper. You've got the flooring pried up only to find some rotting floorboards. There may be delays! * If there are any easy wins you can get out of the way early, that will sometimes buy you extra goodwill/padding in your schedule to do the necessary cleanup. People will know you are taking their business need seriously and will give you some space to do your thing. * Focus on basic "modularization." It doesn't need to be a full-blown object-oriented design to be fairly well organized code. Step through the code and watch which data is manipulated by which lines of code. Try to group them together. Large blocks can be refactored into small blocks. Copy-pasted chunks can be made into callable functions. Best of luck!
Sure, not a problem. Please message me whenever you would like.
[removed]
Start by marking everything internal instead of public. Change it back to public where you get a compiler error. Then use the dead code detector of your choice (FXCop, CodeRush, R#, etc.) to locate and remove unused code. This may dramatically reduce the amount of stuff you need to deal with. 
Step 2 is to segregate the globals according to where they are used. If only used by one class, put it in that class. Otherwise more it into classes with other globals that are related. The idea is to carve out small areas that you can then fix instead of trying to tackle it all at once. 
&gt; Without any Benchmark.Net data posted in the readme, I'm having to guess that Ceras is likely slower than most serializers, if only for the reason that it is difficult to write fast polymorphic serializers without using a lot of gymnastics. I think you'll like this then: https://github.com/rikimaru0345/Ceras#performance-benchmarks I'm finally done with at least some initial benchmarks (and a lot of optimization). You're right in that it's not easy, but I'm learning a lot :) 
This is the closest I could find https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.objecthandle?view=netframework-4.7.2#examples
None for us. Our app is deployed via ClickOnce (ugh), and I haven't heard anywhere that that will be available. We'll stay on Framework until a UI refresh and go Angular/.net. We also expecting a full stack rewrite in the next year or so. Sigh.
Tôi không thể không lưu lại câu trả lời này &gt; *Working Effectively with Legacy Code* by Michael Feathers It's quite long but I will read it all and the others. &amp;#x200B;
To the back door. They need to be put down.
They missed \`merge\`.
string[] trueArray = new string[]{ “true”, “True”, “TRue”, “TRUe”, “TRUE”, “tRue”, “tRUe”, “tRUE”} if (input.Contains(specialCharacterArr[i]).toString().Contains(trueArray[i])) Yeah I’m not writing the trueArray loop on mobile, I already regretted this comment halfway through. 
This isn't the smartest way to do it, but if I had to ship on Friday, I'd use canvasses, like a pleb. 
/r/seventhsub
That's why I always had a user named "O'Malley" when I was working the QA desk.
It certainly wasn't acceptable in the 1990's era VB community. Even before we worried about SQL injection attacks we still had to worry about normal, everyday text crashing the application because it someone wrote "Where did Tom O'Malley drop the table? -- On the floor."
My best guess is that the author was attempting to 'comment out' the 'bad' stuff, since a -- is a comment in TSQL.
[scunthorpe problem](https://en.m.wikipedia.org/wiki/Scunthorpe_problem) meets sql injection
Thank you for the reply. Imho, Tizen is built by Samsung and is different from Android TV OS. I intend to create a Xamarin Android app which would run on tablets and Android TV OS based Smart TVs alike. My domain is around audio/ video and here are some objectives I want to achieve. -Capture the input received from HDMI using C# and show the output in my android app at any location in a small window. -HDMI input could come from a set top box/ Camera/ Laptop or any other content stream. &gt;Can I control my app through the remote of a Smart TV using buttons or voice?: Yes. I intend to do this to change the channels. From what you said, I cannot control my set top box directly or through hdmi. I am not sure how we could do this using an IP
a smart dumb person would have generated the permutations of capitalization programmatically
The most fundamental problem: this should be handled by permissions within the database itself
Why did I look at this right before bed..jadslkjsajdlk;f
It's levels all the way down!
At least EXEC still works. 
It currently goes up to /r/seventythirdsub
I'm only doing it this way so i can store the data on a sql server, pretty much the only way i know how to, im still open to suggestions tho.
I will upload example code later for you 
I agree. It's a dangerous place. But if you know what you are doing, you will be fine. That's also why I wrote _really_.
LOOKS FINE 2 ME ?
According to that page it doesn't crash the application (if by that, you mean process) by default anymore : &gt;To make it easier for developers to write asynchronous code based on tasks, the .NET Framework 4.5 changes the default exception behavior for unobserved exceptions. Although unobserved exceptions still raise the UnobservedTaskException exception, the process does not terminate by default. Instead, the exception is handled by the runtime after the event is raised, regardless of whether an event handler observes the exception. 
LOL OMG
There might be a time when you have to connect using a raw socket and sanitize on your own, without parameters. (No, please, I don't hope so for anyone)
You can scale the AWS RAM and CPU but not the consumers RAM (because they got no money) Client side validation is cheaper though 
You say 'global'... do you mean static or public? If you mean static then I have no advice other than to treat it as a black box or re-write it. If you mean public then verify you are at the root of the issue. WinForms auto generates a lot of boilerplate code and you have to go out of your way to specify that the controls be public. If someone did go out of their way to make it public then it's most likely because they were trying to access them from somewhere else... and if this is a dynamically generated form there is a chance there might be a different class you haven't seen yet that actually instantiates this form and populates those values. Whether this would make your problems better or worse... depends on what you find. &amp;#x200B;
Maybe not the smartest, but at least stubborn and hard working.
Much appreciated :D
They missed "INsERT".
it does not matter if you have to worry about it or not, it's best practice to use parameters! Also the code looks cleaner and is more readable / maintainable. Here is the link: [https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.parameters?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.parameters?view=netframework-4.7.2)
Beautiful `??=` operator No more `get v ?? (v = new object ());`
[http://pietschsoft.com/post/2014/06/07/basic-comparison-of-c-and-apple-swift-programming-language-syntax](http://pietschsoft.com/post/2014/06/07/basic-comparison-of-c-and-apple-swift-programming-language-syntax) &amp;#x200B; Here is a basic comparison... this should help you program swift :P
I can't get that to work. I've changed it to: public UpdateStock.response ModifyProductData([FromBody] Object ifsProduct) ...but I can't even get it to execute the code now, I just get a 404 straight away. I've changed the type from application/xml to text, but that had the same result.
C# is more used in big company's, with inhouse developers, it will be very hard to find freelancing jobs in C# PHP / NodeJS would be a better bet for freelancing
For others playing with nullable reference types: the project-wide setting is now `&lt;NullableContextOptions&gt;enable&lt;/NullableContextOptions&gt;` instead of `&lt;NullableReferenceTypes&gt;true&lt;/NullableReferenceTypes&gt;`. The GUI doesn't appear to be there yet.
This reminds me of a post I saw on some programming Sub-Reddit a few weeks ago where a user had to enter a number between 1 - 100 and the code would determine if it was an odd or even number. Instead of a nice check if the number was divisible by 2, they created 2 lists: 1 with all odd numbers and one with all the even, and the code would check which group the number the input belongs too. The shock and horror.... This is a good learning opportunity for your colleague, I hope someone will go through a nicer solution with him! "We all need people to give us feedback. That's how we improve" :) 
&gt; Anyone something else? Just off a glance... - It doesn't check for null inputs - Use a `List&lt;string&gt;` instead of `string []` - The check is completely wrong, or at best doesn't make sense ("WALTER" will fail) - It doesn't check for semi-colons and single-quotes - `.Insert()` doesn't work the way the coder thinks it does... `output = input.Replace(u, new String('-', u.Length)));` (but really, use Linq)
I would recommend a back door in the top floor. Just kick them out.
That's assuming it's a database that supports this. Sqlite for example does not.
This is not really an answer to your question, but C# has an interface for a single method: `delegate`. If a single method is what's required, that might be a better fit: ```csharp namespace MyNamespace { public delegate void DoSomething(); public delegate DoSomething DoSomethingFactory(); public class INeedADoSomething { public INeedADoSomething(DoSomethingFactory doSomethingFactory) { } } } ```
I did think about this and I remember someone saying single method interfaces are perfect places to try using delegates or Funcs. My thought with this though is that I need something to contain the method I set in to the delegate, I'm guessing the benefit here is a could put a static method into the delegate, negating the need for an instance of a class. I'll take a look at my code and maybe I'll rework it. Thanks 
C# is great for local freelancing with big company's, for remote you will be in a very tough stop but not impossible. Considering your circumstances, you are probably better off with something like the LAMP stack or other popular open-source stacks.
Fake and doesn't even compile
[The new coloring](https://docs.microsoft.com/en-us/visualstudio/releases/2019/media/productivity-roslyncolors.png) looks nice.
Oooo. I was never a fan of VS' dark theme, it's so distracting. If they've managed to replicate VSCode's theme in Visual Studio I'll be as happy as Larry.
[https://ufile.io/jwnvb](https://ufile.io/jwnvb)
Is it a typo here on Reddit? Shouldn't object be lowercase?
Yes, I pasted it from my phone...probably auto-incorrected it. Should be lowercase.
Hmm...sounds like your best bet is to keep adding nullable properties to your model to cover all your bases. Dealing with XML is a little outside my wheelhouse so I'm afraid that's about all I got off the top of my head. Hope you figure it out. Good luck!
What are you missing. There are a couple of resharper refactorings I really like but I can't wait to ditch it. I wish it was more conponentised so I could have the three or four feature I like and ignore the rest. I like: * Fixing namespaces across the solution * Fixing string.format -&gt; string interpolation across solution * Changing List.Foreach to real foreach loop across whole solution * The project dependency map thing There's probably more but I can't think of them. 
&gt; meaning everytime the method gets called the array needs to be regenerated (on the stack). Well, it's generated on the heap since arrays are reference types, but still.
&gt; Use a List&lt;string&gt; instead of string [] This seems minor compared to the rest, and wouldn't really change anything. But yeah, as far as I am concerned, arrays don't need to exist in the language. I know... List&lt;T&gt; is implemented in terms of them, but other languages like Swift does ok without primitive *user accessible* arrays. &gt; output = input.Replace(u, new String('-', u.Length))); (but really, use Linq) "Linq" is just a word meaning "use some kind of ienumerable method". Why would it be better here? I mean, obviously the entire code sucks so..
Notepad is better 
&gt; Auto-fixer to replace `@$"` with `$@"` when typing interpolated verbatim string That's it, I'm switching!
Cheers. I've got it all working now, it was a struggle but it's there. It all feels a little unstable, for want of a better word. Thanks.
Could you edit the OP to include the solution? It would be very useful to reference this thread if I (or others) find myself in your situation at some point. 
You could try using Visual Studio Code which is a different light-weight editor. Not sure why the installer isn't working though. 
`str.ToLower()`
Using Linq refers to the replacement of string [] with List&lt;string&gt; The code is a classic example of "not even wrong". Besides the fact that it's not doing things correctly from the start (using an ORM/SQLParms), certain refactors are not even "seeable" with the current structure. For example, the loops can be replaced with: &gt; unsafeWords.ForEach(u =&gt; output = output.Replace(...)); And that's not even such a great refactor. The point is though that *this is not even visible* without first shifting to an enumerable type that supports LINQ.
Thank you!
No problem, if you have any further questions just ask. You can do alot with reports in winforms, like add some formatting expressions, in VBA like this: =IIF(Fields!someString.Value = "", dothis, dothat) Grouping, add pagenumbers etc
Thanks for the second paragraph, my autism kicked in.
The solution was really just doing what I did at the start; removing nodes until it starts working, and then I know that one is causing an issue. 
If you install a couple extensions you can get 99%.
Holy crap yes! Although I'll never get to transition until I get a new job. We're still stuck on 2015.
Lots of things, but the "find usages" thing is probably the most useful. The way that search result window is made is so much better than the built in thing that vs has. Also the "go to all" search thing. VS one that is pretty similar, but only visually. The resharper GoToAll command finds all sorts of stuff that I'm actually looking for, whereas the VS GoToAll feature finds way less. The resharper search seems to be really resistant against occasional typos, seems to include raw-text search as well, and remembers what item you selected last time for each search term (so next time they're ordered differently, so stuff you chose in the past appears first). Also some small refactorings like string interpolation, converting between for and foreach, and generating ctors that initialize fields.
For those wondering about C# 8: * if you're on C# 7, you're offered either this fixer, or to upgrade your project: "Upgrade this project to C# language version '8.0 *beta*'", and "Use interpolated verbatim string" (which swaps the chars) * if you're on C# 8, this isn't an error, and no fixer is offered
&gt;x =&gt; x.ProduceData &lt; DateTime.Now &amp;#x200B; &amp;#x200B; if( categories \[i\]. ProduceDate != null) if (categories \[i\]. ProduceDate &lt; [DateTime.Now](https://DateTime.Now) ) categories .RemoveAt(i); &amp;#x200B; Does this looks ok? The ProduceDate can sometime be null / unknown
You are only interested in groups where there is more than one item in the group. One way to do this is to filter the output of GroupBy with a Where call.
It doesn’t produce pairs, it groups values. You have four different values in the array so the answer is 4. You could use the result of the grouping to see which value you have an even number of and go from there. 
Oh wow, that's a great QOL improvement.
I'm just joking. This is ridiculously inefficient.
Thanks for taking the time to answer! That clears it up(kinda), gotta look up these pesky lambdas more
You could optimize most of it, by issuing a http://aws.amazon.com/is_special_character?words= where words would be set to string.Replace(" ", "+"); http://aws.amazon.com/is_special_character?words=sElct+frOm+"Hey+Jimmy" .... This way you would not need to make hundreds of requests, but just one ! Hell this is so efficient, i should implement it RIGHT NOW &amp;#x200B; /s
The string.format one seems like a few regex replace could do it pretty safely.
You've not seen the abominations my colleagues write then. 
I must have missed something in the question. Jo wonder my answer is so far off. 
Jetbrains FTW
 string.Format(FormatVariableFromDatabase, valueA, valueB); string.Format("{0}{0}{1}{0}{3}", Environment.NewLine, valueB, valueC, valueD); string.Format($"{{0}}{{0}}{valueB}{valueD}{{3}}", Environment.NewLine, valueB, valueC, valueD); First one is unfixable second one would be ok third one - yes this happens. In production.
So group by will create a list of IGroupings, that have a key (what you grouped by) and list of items that matched that key. You've got on the right track but now you need to remove ones where the count less than 2 (ie no pair just a single) and then the ones that are left you need to calculate how many pairs each group has. Since for the example you've given you'd end up with an IGrouping for '10' with 4 items so you need to sum the total number of pairs in each group. I'll leave that to you 
Which extensions do you have? I'm looking for one to fix namespaces across an entire solution. 
Sure.
[Roslynator](https://github.com/JosefPihrt/Roslynator) did enough for me to remove resharper and just regex replace the rest
If this is for SQL server its missing some of the most important commands aswell... Where is Exec and xp_cmdShell and SP_Configure? You could reconfigure the instance to allow xp_cmdshell calls, fire up an FTP connection, download a binary and execute it through this code quite easily. Its also missing declare and set so you could declare and set a SQL string containing encoded statements and run any select that way. Just encode like so: select cast('select getdate()' as varbinary(max)) Then plug the 0x binary string into a variable and execute it. declare @VarBin varbinary(max) = cast(0x73656C65637420676574646174652829 as varbinary(max)) declare @SQL nvarchar(max) = cast(@VarBin as varchar(max)) exec sp_executesql @SQL And it executes SELECT getdate() in a manner that this code would not stop. This is weapons grade numpty code and is very insecure.
The funny thing is, INsERT is in there, but it's not in order with the rest. And yes I only looked after I read your comment, so I first thought you were right even though you just made it up
That's the one and only thing I don't have an answer for. Fortunately it's not an end of the world problem. 
Ha, just released VS 2019 Preview 2 contains auto-fixer to replace @$" with $@" when typing interpolated verbatim string. What a timing.
You misunderstood MS. This is not about creating a GUI toolkit for .NET Core, but about giving WinForms/WPF the ability to run on both .NET framework and .NET Core. So, not an addition to .NET Core, but rewriting an old lib to be compatible with .NET Core.
cheers mate! it's downloaded and works. i think the issue is the internet connection (school internet), pretty locked down. 
I advise you don't use RabbitMQ.Client directly, use a library like EasyNetQ instead. However you should also consider that you don't want to be looping yourself. There are subscription consumers already. See here: https://www.rabbitmq.com/dotnet-api-guide.html#consuming
Even in 2019 there are people who are *new to programming and c#* and don't know there is this simple thing called "turning a lower case letter to upper case and vice versa". 
I was sold on "Updates downloaded in the background" About freakin time!
Don't tell the devs I work with, they still running 2012 and VSS...
Try Jetbrains Rider as a total replacement. 
I can see why you use it. And ultimately, the performance cost is nothing compared the network latency. &gt;Reddit API returns is variable for many endpoints. As in it returns the same properties but sometimes they are of different types? In that case I'd use custom JSON serializers, and have models that contain properties for both types where only the valid one is populated. &gt;since AddObject doesn't care. Because it can work with it doesn't mean it doesn't cost more cpu cycles and memory. The AddObject method accepts a generic parameter. This is so the runtime will generate specific code optimized for each generic type passed into it. Since you're passing a dynamic object into it, the runtime will only generate code for the dynamic type instead of specializing for a specific type. This means the code will not be optimized, it can't because the dynamic type can be anything. 
Ugh. We at least have a Team Foundation Server with a git interface running through VS. We have an old Silverlight project on 2012, but my main project right now is rewriting it for MVC and Vue
I've been working on a couple of open source projects but I'm not quite sure where is appropriate to "promote" them to get some feedback or interest. &amp;#x200B; Firestorm is the main one [https://github.com/connellw/Firestorm](https://github.com/connellw/Firestorm) - it's yet another REST API framework. CRUD operations, querying (e.g. ?name=Fred&amp;sort=age) and pagination are all be taken care of for you. You just define expressions for each field
The only thing I'm missing from VS (and vscode) is more javascript/typescript refactoring.
&gt; You no loner need to add Console.Read() calls to your console apps. Oh thank god. 
You are my hero.
The author of this code deserves 2 medals: 1 for the effort and 1 in case he looses the 1st one.
The other issues aside, the funniest thing is that "--" is the comment-marker in SQL, so a clever attacker might craft an injection attack by using keywords.
I happen to also be the administrator of our CI server. So I updated every project to C# 7.3, I updated the build server, and then when my colleagues could not build the project anymore I told them they just needed to update and learn the new syntax. 
I don't have any experience with Telerik controls, but DateTime doesn't have a null option. I'm not sure if you can provide the picker with a 'DateTime?' (nullable DateTime) source or not, but the reason you're getting 01.01.0001 is because as I said, DateTime isn't nullable. [https://www.dotnetperls.com/nullable-datetime](https://www.dotnetperls.com/nullable-datetime)
That's because it's The Real WTF. This is a Daily WTF post, right?
Clbuttic!
It works to set as null after I loop through the collection, but somehow, when I just get the data returned from DB, it is already set as this weird date, even though I already set in the model that the datetime is nullable.
Then your database column isn't nullable maybe?
[SQL Server Express Local DB] (https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-2016-express-localdb?view=sql-server-2017) would probably be what you're looking for. 
Why do you want to ditch resharper? &amp;#x200B; VS2017 and Resharper used to be terribly slow, but I think Jetbrains made massive improvements optimizing Resharper.
I see that the DataTableRows I'm using is setting it as Datetime, how can I do a check if the row.AsDateTime is actually null? &amp;#x200B; stagingContractMetaData.Date= row.AsDateTime("Date");
Does anyone know of an alternative to ZenSharp? It's one of my favorite ReSharper plugins, but it doesn't seem to have a VS extension alternative.
Sqlite may suite your purpose
Good to know. As someone who spends a lot of time hunting for answers on the internet, I would still kindly ask that the OP has the solution in it now that you've figured it out. It's sort of a "good citizen" thing to do 😁
I mean, it's your code, your choice... but I don't see any reason to bring singletons into the mix here... I see the Factory being a singleton, but I don't see any reason for the factory to return the same singleton on each call. The main reason I wouldn't do it is because if you had an Interface IDoSomethingElse which did require state tracking then you would have to have very different handling and functionality of the IDoSomething, and IDosomethingFactory vs the IDoSomethingElse and IDoSomethingElseFactory. If you do eventually require IDosomething to contain state information then the whole idea of using an IDoSomething Singleton needs to be closely re-examined. You say wastefully recreate an object each time... but if the object doesn't contain state information then there isn't any instance data being duplciated... the methods don't get copied for each instance... the 'wasted' memory is the size of an integer (without instance information). Also, since there is no instance data there is no extra memory allocation during initialization so you aren't saving much in the way of processing time either. So... it could work, there is nothing inherently wrong with it... I just don't think it is the best approach in terms of extensiblity and maintainability. 
didn't know about this. thanks!
i don't think we'll ever have every feature of resharper. resharper intellisense is so much better. and the code generation features are also awesome (equality, comparison, etc). but the most wanted thing for me in vs2019 (or an extension) is control shift click go to implementation.
It takes 5 characters, seven if you include spaces. It is just being more explicit. However, looking at that code they are initializing it immediately afterwards. I think that is useless to bother with the null. I would not do that personally. If it were not assigned for many lines - maybe. 
that's kind of a stretch. there are no extensions for the simple things that resharper does that vs or extensions don't. resharper displays things much better (search, find usages/references), refactorings are better and smarter. control-shift-click to go implementation. control click decompile to sources.. hopefully slowly we at least get these kind of simple enhancements.
This is probably a better question for r/learncsharp, but I think you're after: data.TradingEnd = row.IsNull("Date") ? row.AsDateTime("Date") : (DateTime?) null;
I can understand the assignment being lines afterwards, but *immediately* after the initialized null? Are there any benefits to doing so?
I doubt it. But I don't know what the CLR code would look like. The variable is already initialized to null by default so far as I know.
Reading things like this make me happy I'm the only developer at my company. I can upgrade to the newest version whenever I like. lol
This.
Sometimes you are forced to, and visual studio will tell you when you need to. Any other time I'd say don't, like in the first link you could just go Timer timer = new Timer...
In the first case, it allows the lambda being used by the Timer to access the Timer object that is being stored in `timer`. The compiler would otherwise spit back an error about `timer` being uninitialized. In the second case, initializing `Arr` to null before assigning it the results of `string.Split()` on the second is redundant. `Arr` isn't a great name and doesn't follow the usual style for local variable names, so I think it's probably just poor style.
&gt;FormatVariableFromDatabase I just became incredibly angry. Saving a format in the database. People do this?
So much win in this release. Thank you Visual Studio dev team! It's a big thumbs up from here.
That's exactly what I was thinking. The only thing I can come up with is if you need the variable declared outside a loop until the variable meets a criteria, then exit the loop or switch or if statement. But initializing to *null* and then immediately assigning it the next line is just what I wasn't sure about. &amp;#x200B;
&gt;data.TradingEnd = row.IsNull("Date") ? row.AsDateTime("Date") : (DateTime?) null; &amp;#x200B; Would this provide nullvalue?
These were my thoughts. In the first case the lambda is closing over the local variable and therefore it needs to be initialized. The second case is just messy code. In general one should prefer to not assign anything to a variable that isn't intended to be a valid value for it long term – but sometimes you have no choice.
But if your URLs are too long you'll run out of data. It's better to make many small requests. It's like with milk cartons. If you buy several and drink from a different one each time, they all last longer.
Pretty good so far, but I would scratch the comment about ConfigureAwait. It's a little premature and really UI developers don't generally have to think about it. (Library authors on the other hand...)
If you the users to be able to create their own templates, Ohh yes! 
It seems someone extended the previous "special**Character**Arr" functionality.
Well, just because you are stuck on 2015 doesn't mean 2019 isn't in your future. It would be nonsensical for the company to purchase VS2017 licenses if VS2019 has been released, unless I am missing something fundamental.
Better use an array: `public class Termine {` `public int[] Numerierung;` `}` &amp;#x200B; then you can do something like this: `Termine termine = new Termine();` `int anzahl = 3;` `termine.Numerierung = new int[anzahl];` `for(var i= 0;i&lt;anzahl;i++)` `{` `termine.Numerierung[i] = i+42;` `}`
wait wait wait hold the $%#&amp; up. Are you saying I don't have to wait 1-2 hours to do any real work when updating VS, that I can *gasp* keep using VS until the update is finished!?
No, it's a straight translation of your code, above. If you want null when `row.IsNull("Date")` is true, you want data.TradingEnd = row.IsNull("Date") ? (DateTime?) null : row.AsDateTime("Date");
Roslynator has all of those refactorings, I believe. I've been using it since 2017 came out, and don't miss R# at all.
&gt; And that’s not even such a good refactor. Especially not since .ForEach is considered somewhat deprecated. But I wasn’t questioning the code, which is clearly awful.
I already use Roslynator. 
You mean the guys that created Resharper? Are you suggesting people ditch Resharper for Rider - an IDE with Reshaper built-in?
.toLowerCase()
VS2015 was that for me.
My point is that I don't see any upgrade in this company's future.
Not if you're running NUnit tests. The built in runner sucks a fat one when compared to Resharper implementation.
Are you muttering Allah akbhar every 5 minutes?
I feel like I have all of these with Roslynator and Code Maid
Code maid. Not heard of that. Thank you very much. 
I also use [Code Maid](http://www.codemaid.net/) which helps do some of the resharper cleanup that I was missing
Cool, it's a bit more difficult to learn than Visual Studio because you have to set things up manually whereas Visual Studio comes working with everything already set up for you, but you can ask here for assistance and I'm sure we'll all be keen to help. 
I use Rider, never used resharper
You have made some great points there, thanks for the detailed reply. I think you are probably correct in essentially everything you've said, so I think I'll refactor 
i posted a [link](http://www.codemaid.net/) in my other comment about it
 string[] Arr = null; Arr = op.FileName.Split('.'); I consider this to be bad style. It should be string[] Arr = op.FileName.Split('.'); and if it were not in a tutorial I would use var Arr = op.FileName.Split('.'); (I normally use var everywhere, but if I'm writing an article or tutorial I'll be more explicit for the benefit of the reader.)
Fun fact, in VB you never need to initialize a local variable. It will always default to null/0/false automatically just like an instance or static field. While this makes the code more concise, it was later determined to be more error prone as you may read from a value that you accidentally forgot to set. So now VB has a compiler option to behave more like C#.
Also very common when handling localization. Sentences are structured very differently between languages and as such you have to move the substitution point around. So taking this example where you are putting in the number of items selected. ENGLISH: {0} items have been selected &amp;#x200B; GERMAN Es wurden {0} Artikel ausgewählt &amp;#x200B; Admittedly this is Google translate from English to German so I am sure a native speaker will tell me there is a better way to say it, but the point is the substitution point moved to make sense in the given language. &amp;#x200B; Extending the example from earlier, the full code might look something like this. &amp;#x200B; FormatVariableFromDatabase = GetSentenceForSelectedItems(lang); string.Format(FormatVariableFromDatabase, itemCount); &amp;#x200B;
VS2017 was the one that made me ditch VS2017. Rider full time for now. If VS2019 can perform better, then I'll consider it again.
I've avoided resharper for years, stoked my dragging-ass is going to pay off soon and I'll be able to just use vs + extensions. 
Shhhh don't help him with his homework
It's still a performance dumpster fire. 
And do you see your future in the company?
SQL Server has a fully featured developer edition and it's free. 
Try AxoCover, not as great as resharper, but a huge improvement compared to built in
I have a horrible feeling we have a project kicking about somewhere in maintenance mode which is for SharePoint 2007, which means VS2008 + WSPBuilder...
I use dark themes in VSCode and light in VStudio... only because my lazy ass is then easily able to tell which IDE I'm staring at.
I would recommend at least communicating changes before disrupting workflow in the future. By forcing everyone to upgrade visual studio you just cost the company a day of wages and possibly delayed the project (at least in this sprint) for the sake of new technology. A culture of DevOps encourages tight communication and ownership of the product, over tossing balls in each others court. You really should have given the team some lead time to update their projects and get up to speed.
Your points are very reasonable for any sane workshop. The word "sprint" would just elicit blank stares. We are so ineffective that stopping production for a day is arguably good as it prevents further damage.
Have you put a breakpoint in the catch block? There's also the exceptions window where you can set it to break on all CLR exceptions. That's useful too.
No. I've been trying to find a new job for a while
My favorite part of the new theme is class variables are still white, but local variables are all blue. You can very easily tell what is where now without knowing what you're using.
Being on VS 2012 is one thing... still being on VSS today is downright criminal.
Are you 100% sure it's not being executed? Have you put a breakpoint there? p.s. Please turn off caps lock.
Sorry about that but yep I put a break point and it wasn’t being executed 
Weird. I don't have any help for you but I'm gonna be watching this thread because now I'm curious :)
It's not my call unfortunately. They will get there, I just do my best to support them as their system administrator and work with them on pain points until we can upgrade 
No argument from me lol
Have your tried putting line 44 "labels\[x\].Enabled" to true?
Very impressive. Did you write all that or is it based on some existing open source CMS?
Why is everyone so eager to ditch resharper? I ask this as someone who has never used it.
Pretty sure if you search the extensions for namespace fixer one comes up. I used to have one.
That works you absolute legend not all hero’s wear capes
I started using it at work this week. I absolutely hate it. My home setup using free extensions is so much better.
Resharper is bloated and slow. Ditch it and live free!
OMG how did I miss that? :)
If you get really stuck Roslynpad is a great app for messing around with c#
&gt;Thank you. I’ll actually be posting one of my keygens with the algorithm on GitHub most likely today so people can play around with it. I’ll make sure to give the link to the repository to you as a reply. It will be wonderful!
The recent Preview 2 for VS 2019 says it includes a refactoring for matching the namespace name with the folder name. Is that what you mean?
&gt; I am trying to learn how to [...] What have you found/tried so far? There are some fairly dated articles on the topic (such as [this](https://blogs.msdn.microsoft.com/ericgu/2007/06/06/app-domains-and-dynamic-loading-the-lost-columns/) incomplete one, referenced in [this](https://www.codeproject.com/Articles/8832/Plug-in-Manager) article). However, they do cover some of the required topics for creating multiple `AppDomain` objects and passing information between them. There's a few things you'll need to consider for this - 1. You need to ensure that your secondary `AppDomain` is created in a way that allows your assembly to find any dependencies (either via GAC or cloning information from the base `AppDomain`). 2. Information being passed between the `AppDomain`s needs to be serializable or marshaled correctly. This is because the `AppDomain` objects are essentially treated as two separate applications and can't freely share objects. This is usually why you see cryptic errors when you try loading an assembly with `Assembly assembly = second_domain.Load(...);`. 3. You need to be *very careful* about where objects are created and methods are called. You can cause serialization errors if you start confusing which `AppDomain` is currently executing your code (due to the above reason). Since you're working with forms in a secondary `AppDomain`, you'll probably need to create a class specifically to managing access to the form. This is because forms cannot be marshaled across `AppDomain` boundaries.
Yes, I remember using a system like that at my last place. It was all over all the cshtml: `TranslationHelper.GetTranslation("Search_Results_Found", ViewBag.LanguageCode, results.Count());`
`universe_brain.jpg`
I have used a namespace fixer but it doesn't adjunct any corresponding using statements so could potentially introduce a bug where a type is relaxed with another type. Unlikely but possible. 
Did you debug your code? Set a breakpoint, then step through it line by line. Check each time if the value is as you expect it.
What calls this function and what happens after? Remember that async executes in it's own independent thread so the code will immediately continue on without waiting for the async to finish. If you want to execute code after the asynchronous uploud you should use the callback event.
You're telling it to just add 1 (one) on each loop. You need to tell it to add the value of the variable i.
Paste and include all required usings. Reference assembly. Those two lacking are amongst my biggest annoyances without R#. Is there a replacement?
This is such good advice, I hope the OP follows it. Debuggers are the best tool ever. If you learn to use it, you'll wonder how you ever programmed without it. Debuggers tell you what your code actually does, which can be different from what you THINK it does. You can read your code a hundred times, but until you step through it you don't really know what it really does. If somebody took away my debugger I'd find another job.
Your loop should be doing: answer = answer + i; not answer = answer + 1; 
VSS? Do you want me to call The Hague? I believe that counts as an international war crime.
Yes, and while it's done in legacy code, I never thought about changing it. What better solution to have a mail template be user configurable?
Extremely slow startup, slows down VS during working with it.
Does anyone have a replacement for the "Generate Equality Members" function that resharper has? It makes implementing IEquatable so easy.
Their test runner and "go to implementation" are the two things keeping them on my computer.
&gt;Anyway, I'm trying to debug this function but every time it hits the point where I'm uploading the picture, the program just shuts off. What am I doing wrong? Are you awaiting the task? What would cause a program to terminate before the upload happens: public void main(string[] args) { var result = UploadPicture("C:\myfoto"); // Result is a task Console.WriteLine(result); // Write task.toString() on the UploadPicture task. UploadPicture is not complete, result is still just a task, not the resulting string // We reached the end of the program, so the process will exit, causing the still-in-progress UploadPicture task not to finish } What would wait for the UploadPicture task to finish: public void main(string[] args) { var result = UploadPicture("C:\myfoto").GetAwaiter().GetResult(); // block until UploadPicture is complete and set the string result to the output of the function Console.WriteLine(result); // This is the actual result } 
By the way, as of C# 7.1, you’re able to make the main method asynchronous...I feel like that’s enough minor versions behind us now to deserve a mention.
https://curl.haxx.se/windows/ OR for powershell, the curl alias for invoke-webrequest are both usually acceptable. Just a note, asking for a password without masking is a problem. https://github.com/PontiacGTX/DownloadCMD/blob/master/dl.cs#L55 Use curl. CLI options are always going to be better than continuous prompting. Otherwise, you can't pass around command syntax. I didn't know this was valid syntax, but I wouldn't use it. https://github.com/PontiacGTX/DownloadCMD/blob/master/dl.cs#L62 I would also recommend maybe... some tests? There are no tests in your project; How do you even know it works? 
It goes back to c/c++ and earlier when declaring a variable would only specify where that variable would be located. It would not overwrite any values stored at that location, so... when you declare a new variable the value is undefined... undefined as in, it would be a non deterministic series of bits not even necessarily complying with any structural constraints the type might have. So, set it to null and the value is defined... as null but at least it is deterministic. 
I did not know that and that is actually quite useful, since I don't really like the .GetAwaiter().GetResult() hack.
You could try [net-vips](https://github.com/kleisauke/net-vips/), the C# binding for [libvips](https://libvips.github.io/libvips/). It's a lazy, streaming, demand-driven image processing library, so it can do operations like this without needing to load the whole image.
&gt; I'm still curious if there are ways to minimize the added latency of a whole api call and all that entails. Depends on the implementation of the service in between. But if your caching because the data doesn't change very much. I'd suggest caching it at the target application and using a something like a [HostedService](https://blogs.msdn.microsoft.com/cesardelatorre/2017/11/18/implementing-background-tasks-in-microservices-with-ihostedservice-and-the-backgroundservice-class-net-core-2-x/) to periodically update. That way you can scale depending on the requests. &amp;#x200B; &amp;#x200B;
Haha me and my teacher looked st this for half an hour and couldn’t get this
https://en.wikipedia.org/wiki/Rubber_duck_debugging When we read code, we often read what we THINK is there, not what's actually there. Show it to somebody else who isn't familiar with it, and they often magically spot that obvious thing that we should have seen hours ago. I had exactly that happen on Wednesday. I worked for the whole fucking day on something, and never got it to work. I posted my status report for the day describing that issue and a co-worker said 5 minutes later "have you tried X". Of course "X" was exactly what I needed and the thing was working a few minutes later.
Yeah...I believe async main compiles down to the same exact IL as using .GetAwaiter().GetResult() that you used in your example, but it does feel nice to write a console app that “looks” async all the way up and down the stack with the 7.1 syntax.
VS has had native project dependency lists for a long time
How do you get to it?
If you're adding one, you're merely counting the number of times you're in the loop. If you want to add the iteration number (1 the first time, 2 in the second, and so on), you need to have answer = answer + i;
Careful with the interpolation thing, had a case where the arg was a mutating function that was substituted multiple times, and broke when called multiple times as a result.
Is that the correct URL? Takes me to an online pharmacy.
Ok, i will look for a Debugger tutorial, thanks for your advice.
Wow, i read it a hundred times but didn´t see it. Thank you
Thank you.
Thanks, now i get it.
I won't have to update the Visual Studio Updater before I update Visual Studio for 3 hours?
You're very welcome. Keep doing it, it's a hard road, but it's worth it.
Thanks for the share, but why would people use this? If I need to download a file through cmd, (e.g., on Windows Server without the desktop experience), PowerShell can be use to download files. If I have the need to download files through a batch file or something, I would target use PowerShell too. I love building small utilities, but I think this particual tool arrived a couple of years to late to gain any traction. 
From the examples and usages I've seen, I don't usually care for it, especially when it is more reflection-like. I personally find code like the examples in the linked blog post to be slightly more difficult to read. I also think it makes it easier for people to use `object` excessively instead of putting thought into designing better types and interfaces (which can make it more difficult to find what types/interfaces/methods/properties/etc. are used where, can cause more issues to surface at run-time instead of build-time, hurt performance, etc.). My opinion may evolve after being subjected to it more, but so far I think the only pattern matching I feel good about using is checking for specific error codes in `catch` clauses. Though I did also feel dirty when I first started using JSON-based Cosmos, and now that feels normal to me...so ¯\\\_(ツ)\_/¯
Yeah, it takes a while to get the muscle memory into the eyes and fingers. I like the proposal, I can think of a few times in the last few weeks where I would have liked some of these features. 
For what it is worth, Resharper and the other extensions I have enabled load significantly faster with VS2019. I will have to do some more testing (been using 20+ project solutions), but it feels a lot closer to Rider. YMMV though, and I'd be curious to see if someone else has done any significant bench marking yet. 
GTFO. That place sounds like career suicide. 
I’ve been doing for programming for 6 months and the mistakes I make are also so stupid
My favourite horror story from this place. So, we start an inhuman crunch and over 2 months we do some real research and progress, but of course it's chaotic. It's time to merge the changes into the mainline. I painstakingly rebase and sort and generally polish the branch as much as I can, squashing ~150 commits into 70. And then the review stalls for 4 weeks because "there's just too many changes and they don't know how to review all of that stuff" (really). I suggest to go more or less commit by commit since I made sure the changes are as isolated as I could. Finally, a meeting is called. After a series of insane statements, the decision is made: my colleague will rebase and restructure the branch (note that at this point that branch is already rebased on develop) and will open a series of smaller pull requests to merge it gradually. 3 *months* later, they finally finish rebasing an already rebased branch. I find out that my colleague also decided to make a few changes in the process, re-opening a few bugs that were solved my branch and adding a few more in the process.
Fffuuuuuuuuuuuu
The one thing i use it for is ctrl click to fo to decompiled sources.
I am probably late to the party, I ditched Resharper a while back. I did miss it at occasions (specially), but not enough to enable it again. Since VS2019, I don't miss it either, and I can surely put the license cost to better use.
I haven't used Resharper so nice VS 2015. I'm wondering what people use it for now that VS can't do on it's own.
`Boss, I need to take rest of the day off. I need to restart my brain.`
I think it depends on how you write the code. IMHO, this is a less confusing version of the link example: static string Display(object o) { return o switch { Point p when (p.X == 0) &amp;&amp; (p.Y == 0 ) =&gt; "origin", Point p =&gt; $"({p.X}, {p.Y})", _ =&gt; "unknown" }; } Or static string Display(object o) =&gt; o switch { Point { X: 0, Y: 0 } =&gt; "origin", Point { X: var x, Y: var y } =&gt; $"({x}, {y})", _ =&gt; "unknown" };
Free career advice: learn all you can about debugging and techniques to become better at it. You will be doing a lot of it in the next 40 years. (Not snark - based on personal history)
Welcome to Winforms, the early years! It got gud eventually, but, yeah, the early years were a bunch of VB6 developers learning on the job :)
Over 30 years now and I still make stupid mistakes every day.
Sounds like it helped you discover a potential source of problems with code that mutates data unexpectedly.
I ditched it with VS2015.
How someone can start learning to build own nuget packages? 
I believe resharpers issues on more the way it interacts with visual studio rather then it necessarily being resharpers fault since rider is built from the ground up I think it works better from what I've read.
They're probably my most looked forward to feature of C# 8.0. It's really nice for pure functions that go from enum -&gt; some value. Replaced a lot of functions like Vector2 TakesEnum(Enum value, bool pred) { switch (value) { case Enum.First when pred: return new Vector2(0, 0); case Enum.First: return new Vector2(1, 1); case Enum.Second: return new Vector2(2, 2); // etc } } with Vector2 TakesEnum(Enum value, bool pred) =&gt; value switch { Enum.First when pred =&gt; new Vector2(0, 0), Enum.First =&gt; new Vector2(1, 1), Enum.Second =&gt; new Vector2(2, 2), // etc }; My two complaints with them is the lack of trailing commas and more annoyingly, non-exhaustiveness of enums.
They're not too difficult. I found the [official docs](https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli) really good. The short answer is just adding a bunch of extra tags in your csproj, like seen [here](https://github.com/benscabbia/AutoName.xUnit/blob/master/AutoName.xUnit/AutoName.xUnit.csproj). You then build your package and upload to nuget.
Thank you!
Ditched it years ago. Bye 👋 hello speed 
I love it. And they gonna finally redo switch completely too. Already using it in so many cool ways 
What does go to implementation do in resharper that it doesn't do in vanilla vs?
Dispather Datpather De other pather over der. 
You could try to use some lower level RPC e.g. raw TCP (maybe length prefixed TCP sending MessagePack) or UDP, Memory Mapped Files could also work 
Fellow noob here and SQLite is pretty good.
Huh, the fact you are thinking that annoys you and I barely understand why or what use case that has boggles my mind
&gt; the lack of trailing commas There's a minor religious debate about this on [csharplang#2098](https://github.com/dotnet/csharplang/issues/2098). In the end the decision was made to allow trailing commas, so expect them in the release version of C# 8.
&gt;Visual Studio updates will now be downloaded in the background. How many years have we asked for this!! Thank goodness!!
I do it to avoid the warning that gets emitted. I really only assing `null` if I do something similar to the following: FooBar fb = null; if (someCondition) { fb = new ExtendedFooBar(); } else { fb = new FooBar(); } Without the null assignment, a warning is usually emitted. However, I am often able to do something like this... FooBar fb = (someCondition) ? new ExtendedFooBar() : new FooBar(); ... which keeps it on one line. I choose one style over the other based on which one is more readable.
We use it on a 60+-project solution. It's night and day when Resharper is enabled and disabled. Even Visual Studio chugs a bit at the load, but Resharper seems to add a ton more load on top of it. I use the Filter extension/add-on to only load the handful of projects I need, so I'm not keeping all 60 projects open. 
Unrelated to the new switch syntax, I fucking love how using is now a declaration rather than a block.
Commenting to remind myself to check it out.
I am trying to defer having a strong opinion. My initial opinion is I don't feel like I'll end up using it much. It feels like it's a syntax for when "I'm not really sure what kind of object I have" which isn't how you're supposed to write C#. But I want it to release, and I want to have a chance to try and use it. The first few dozen times I try it'll seem clunky and stupid and make my code worse. So I'll sigh and stop using them for a while. Then I'll see someone use it for something clever and try again. After this few dozen tries, I'll find 2 or 3 of them stick out as worthy, but I'll still discard the majority as dumb pet tricks. After about a year of that, I'll have a decent intuition for when I need it and then I can comment on it if it's improved my life. But right now 99% of examples are, "Look how it makes `Point.ToString()` slightly easier!" I find that's a big problem when people try to sell new language features. They latch on to the most trivial and obvious use case that isn't actually much more difficult without the feature. I want some more interesting examples that take a github project to demonstrate. I'm way more excited about the `using` declaration syntax they described.
You mean [this](https://docs.microsoft.com/en-us/visualstudio/ide/reference/generate-equals-gethashcode-methods)?
I think this is the real highlight 
I concur
Using declarations are nice. But all this pattern stuff seems to be more convoluted and harder to understand than what we had before. Maybe its just that the examples are bad, but it will likely take me quite a while to get used to this (and maybe warm up to it). In my opinion C#8 is a pretty lackluster release (compared to what it could have been). For example, what about this: https://github.com/dotnet/csharplang/issues/107 It's one of the most requested and loved features, would have been perfect for C#8 :/
All in all I think it's pretty cool. What I find odd is that this seems to be a strong 1st level language feature where many of its use cases I would consider code smells... Can anybody give me some good examples of where this is used that isn't the result of exhausting all other appropriate design patterns / architectures 
I personally love the addition of the `Switch Expressions` syntax. When I saw the previous proposal of just augmenting Switch Statements, I was quite disappointed, but this syntax is much closer to what I'd expect from a sibling of F#.
As hdsrob mentioned, SQL Server Express Local DB is a great option. You could also go one step further and install the full SQL Server Express edition. Installs it as a service and is always running. It has a few limitations compared to the paid license versions, but nothing that will hinder your development. SQL Server Express only installs the database services though, not the management programs, so you would also want to download [SQL Server Management Studio](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017). Visual Studio 2017 and VS Code can also connect to and manage your SQL instances. Another option is MongoDB. Install it locally as a service, or run it on demand, and you have a document db available.
I'm looking forward to it. Switch expressions seem long overdue (and much more readable than chained/nested conditional expressions), and the upcoming pattern matching stuff should, ideally, have come with the pattern matching and tuple features in C# 7. I *am* bummed that so many of the really valuable features (e. g. AsyncEnumerable) are going to be tied to stuff that won't be delivered on .Net Framework, so I hope my employer fast tracks supporting .Net Core.
I love the new `switch` features, but I'm not a huge fan of the syntax. It just doesn't feel very idiomatic to C#.
At least for me it always works, even for source code in linked DLLs (assuming the source is available on your computer).
There are some more examples in the tests [here](https://github.com/twitchax/Sheller/blob/master/src/Test/BasicTests.cs).
public fields.. hundreds declared inside the main Form1.cs class.
Me and a fellow developer suggested a possible ditch &amp; rewrite today. Guess we'll see where that goes.. :)
Thanks for the suggestions (plan of attack).
Thanks!
hehe!
I think it has been too many years since I did anything in C# and I need to review the changes in the last few versions....
This looks promising https://stackoverflow.com/questions/1812944/how-to-integrate-paypal-with-winform-desktop-application
You didn’t happen to work in a small town in a restaurant converted into an office building at one time did you?
Very cool definitely looks promising, I'll look into this. 
Be explicit. Which refactorings are better, which plugins did you try? In what way is resharper intellisense better? From what I can tell the biggest thing resharper does is massively change all the default key bindings so that if you go back to the defaults it feels like nothing works properly. There's certainly a handful of things only resharper does, but they're not really things you do a lot, and if you are doing them a lot it's possible that you're doing something wrong. Resharper slows down VS significantly, to the extent that it's probably affecting your productivity more than the extra refactorings are saving you. 
Can you add some sample code? The question is vague. 
Sure! Give me a few minutes
What's the output you're looking for, count per unique value?
Seems like they’re trying to catch up to other languages with similar features but didn’t want to copy the syntax. So, this is about as readable as Ariel. (it’s a font nerd joke) More seriously, on initial viewing, the lack of punctuation feels difficult to follow. C# keeps getting patched with new syntax but it doesn’t feel like the new syntax takes into account the big picture.
Edited, let me know if I'm missing any more info.
Thanks! If the implementations for both are the same why not use PlayerObject in the signature and implement in the base class? I think I'm missing some detail. If you need to rely on specific attributes of the derived classss you will have to implement them separately. 
There are more usages other than matching instances of type object. 
How often do you actually use those though? Auto-Reference assemblies requires the library is already accessible, which is less and less the case with the way Microsoft is doing packages. Switching between linq and procedural is nice for learning, but why are you doing it on a regular basis? 
could you post your overridden `GetHashCode` method?
The main reason I have them separated is because the two classes have to have "awareness" of each other so that they interact differently (how yet I'm not sure but it'll definitely be implemented)... for example enemy+enemy, ally+ally, enemy+ally. If that's the case I may just have to use separate methods which I'm fine with doing tbh. It's not huge by any means, just thought I could do some consolidating :) Also what do you mean by "implement[ing] in the base class?
depending on what the method does, perhaps you could have it as an abstract method in `PlayerObject`, or and extension method `public string CheckAdj(this PlayerObject playerObject, char direction)`
 private void VerifyPayment { // some code PaymentType tp = GetPaymentType() ; var message = tp switch { Transfer t =&gt; $"Transfer {t.Id}: ${t.Total}", Cheque c =&gt; $"Cheque {c.Number}: {c.Date}", // more options }; 
Your error is a null reference exception. We would need to see some code.
In your first example a warning will not be emitted since after the if-else statement fb will be initialized one way or the other. 
You probably want to generalize the method. I assume the behavior is only different if the other object is an enemy (enemy + ally or ally + enemy) or if the other object is an ally (ally + ally or enemy + enemy). If that is the case, you would want a faction variable in the parent class, and then you can just add the checkAdj method to the parent class and check to see if the faction is different or the same. It you explicitly have very custom logic for each individual case, then you pretty much have to take the L, but your description is still too vague to make any conclusions. I am just guessing at this point.
Yes, sorry - see the updated post
I've posted the Key class, would you need to see anything else? Unfortunately it's part of a large project, so I'm trying to isolate the parts that are relevant. 
&gt; non-exhaustiveness of enums I wish C# had F#'s discriminated unions every day of my life :(
It crashes because you overwrote the inequality operator. The dictionary probably checks to make sure your key isn't null, so your b.\_num crashes.
The error I got highlighted the return in operator != and said b was null, so it definitely pays to read the exceptions first, or it is easy to get lost trying to fix something that isn't broken.
Wow, I didn't even realize I needed to anticipate that. Thank you! Is there any other tips you would give, generally speaking, when using reference types as Keys? I'm actually probably going to replace my Key class altogether with an enum. But I wanted to understand why I encountered the bug in the first place.
There is nothing wrong with using reference types as keys, just that they are not allowed to be null even though they are reference types. This was just a simple mistake when overriding operators. In your Equals function, you put != null, which is correct in the normal case for detecting null references, except that you just overrode the != operator, changing its behavior. I guess just don't forget to check for null. This should be less of an issue as they are going to add warnings for dereferencing nullable references without a check (though you might have to turn them all). Also, if you just want to use them as keys, you might not want to override == or != unless you really have to, since a Dictionary only cares about Equals and GetHashCode (you need both because it is possible there is a collision in the hash code but the two objects are not equal). I would say, refrain from overriding == or != unless the type is a value type because checking for null is so common. Rather, use Equals for reference types.
It is better (albeit not required) to explicitly implements `IEquatable&lt;T&gt;`, and also `IComparable&lt;T&gt;` if you want to use your key in sorted collections such as `SortedDictionary&lt;TKey, TValue&gt;`.
I can't tell exactly what you are trying to do so this may not be the right solution for the problem. using System; public enum PlayerType { Ally, Enemy } public abstract class PlayerObject&lt;T&gt; where T: PlayerObject&lt;T&gt; { private PlayerType Type { get { return (PlayerType)Enum.Parse(typeof(PlayerType),typeof(T).ToString()); } } public string CheckAdj(char direction) { return direction.ToString() + " - " + this.Type.ToString(); } } public class Ally : PlayerObject&lt;Ally&gt; {} public class Enemy : PlayerObject&lt;Enemy&gt; {} public class Program { public static void Main() { var ally = new Ally(); var enemy = new Enemy(); Console.WriteLine(ally.CheckAdj('U')); Console.WriteLine(enemy.CheckAdj('D')); } } https://dotnetfiddle.net/3UxI0s
Tbh, I'm just a novice and the exception didn't make much sense to me. I saw that the exception originated in the Equals function, where the != is called. I got confused because, when the dictionary was created, the Key was not null. And then later, when trying to access the value stored at that key, I suddenly had a null reference exception. In fact, the instance of Key used to store the value, and the instance of Key used to later retrieve it - both were the same instance. So I don't quite understand where the null value is even being introduced. 
Overall, I'm happy they're improving switch. I absolutely hate using the underscore as shorthand for default. Too bloody arcane.
The dictionary called your Equals function. Your Equals function returns type != null. type is a Key, so that calls your overloaded != function, placing type into a and null into b. Your != function calls b._num, but b is null.
 Vector2 TakesEnum(Enum value, bool pred) =&gt; (value, pred) switch { (First, true) =&gt; new Vector2(0, 0), (First, _) =&gt; new Vector2(1, 1), (Second, _) =&gt; new Vector2(2, 2), // etc };
You're right, I'm going to either replace it with a struct or just stick with an enum. Unfortunately, there's no need for a sorted dictionary because the values being stored have no real need of being sorted / aren't scalar - if I understand the issue correctly. The values are references to controllers for an MVC system.
switch pattern matching is influenced from F#, imho, so it takes thinking different before you see its usefulness.
For what I'm implementing now I think adding the method in the parent class is the way to go. I don't haven't nailed down exactly what the interactions (which is why the question was pretty vague) will be but for placeholder logic the ally+ally will be the same as enemy+enemy and the ally+enemy will be universal. Thank you so much for the help :)
What big picture are you talking about? They seem to be planning the language changes many versions ahead.
You need a payment provider, there are many to choose from though it may be a good idea to talk to the stake holder (if its not you) to check on fees. If the store already has a merchant account for CC processing there may be a API already available for your use (sometimes for an extra fee). You may also need to check with the provider on your proposed workflow, some processors will let you do a charge like you are thinking others will not for security reasons. I would suggest doing the swipe and pre-charging for some minimum amount of time like a parking meter.
If they are that different, then maybe they shouldn't extend the same parent class. In that case, I would switch to composition instead of inheritance (both reduce code duplication). In my opinion, the only reason to have a parent class is so that you can ignore the child types completely. The instant you have to do something that depends on the child types explicitly (aka can't be done by just overriding in the child class or having a shared function in the parent class), then it breaks that contract and inheritance is probably the wrong tool.
I’m not saying they aren’t planning. I’m saying they don’t have a consistent philosophy and vision for the language.
Ok, if I understand you correctly: 1. The dictionary receives my request for a value at the address of key: // say there is an instance of Key 'k' Foo foo = ExampleDictionary[k]; 2. So then the Dictionary object tries to use the overridden Equals function of the Key class: public override bool Equals(object obj) { var type = obj as Key; return type != null &amp;&amp; _num == type._num; } 3. But I've also overridden !=: public override bool Equals(object obj) { var type = obj as Key; return type **!=** null &amp;&amp; _num == type._num; } and in my != override, there is no null check: public static bool operator !=(Key a, Key b) { return a._num != b._num; } so b, being null, throws an exception. I can't access '_num' on b, because b is null. So my final question is, where is b coming from? Is b the key I passed to the dictionary (I assumed that was a)? Is it the key that is already stored in the dictionary? My confusion lies in that, so far as I can tell, there is only one instance of an object at play, they instance of key which I am using to get the value in the dictionary. And I assumed that was a. I know this must be like banging your head against a brick wall explaining this, I won't pretend I'm not being thick about it - so far I think I understand the mistake I am making and I really appreciate your help. 
Thank you, we're caught in this circle where you respond to my question in one comment thread, and then I've already posed the same question again in another --- woops! At this point, you've done your best to explain the issue, thank you!!! 
The issue is ReSharper and Visual Studio do a lot of the same work. There’s no way to disable Roslyn in VS so you can’t do anything about having both. I think this could be helped by leveraging Roslyn for a lot of the code analysis but JetBrains have been developing their own version for so long, they have no (announced) plans to change this.
Ah I see what you mean. After looking into it that's probably the pattern I have to use. Thanks again for the info!
Count per pair
Auto-reference: Probably true. linq/procedural: When I'm developing something step by step, I find the procedural way is mapping better to what I'm thinking. But once I'm done, it's nice to convert it to Linq which is easier to understand at a glance and looks better.
It’s heavily requested, but comes with many challenges. If it does ship, it will probably be with a more limited scope. Also, a feature being popular shouldn’t prevent a release from shipping in the meantime. Other major features like Extension Everything, Shapes, and Record Types also didn’t ship. Does anyone really want to postpone 8.x for years until everyone has their pet feature?
I like the functionality, but i don't like the syntax. seems convoluted and arcane. like c++ ...
The blog post has an example which is not "an easy ToString". &gt;static State ChangeState(State current, Transition transition, bool hasKey) =&gt; &gt;(current, transition) switch &gt;{ &gt;(Opened, Close) =&gt; Closed, &gt;(Closed, Open) =&gt; Opened, &gt;(Closed, Lock) when hasKey =&gt; Locked, &gt;(Locked, Unlock) when hasKey =&gt; Closed, &gt;_ =&gt; throw new InvalidOperationException($"Invalid transition") &gt; }; This is a great example. Our code has many if/else because of different states to be checked. This is finally a way to remove much boilerplate code in those checks.
How different are these two methods? If it’s just a small difference with most of it the same, you can have a method in the base class then override it in the derived class. In the override, you can call the method in the base class and modify the result in whatever way is unique in each base class before returning the result. 
Replacing : with =&gt; made me angry to read.
Fuck yeah! Using a couple of different DB connections can indent my code to the moon sometimes this is great.
To be fair, asking them to review 2 months of changes at once is... bad for everyone. If my colleague pulled that I'd not bother reading it as they obviously didn't put the thought in on their side. I create a side branch, cherry-picking and tweaking bigger changes progressively to review, as I shape them by doing real work on another branch. Then my colleagues see the shape starting very general to very specific with justification and steps along the way.
Why are you using Monodevelop anyway?
Just a personal preference here but I always use the Equals method as the source of truth and then the == and != Operators use the Equals method. It keeps your logic in once place.
Ok, so I am moderately competent with LINQ and Lambdas, but I have no idea what's going on in here.
This appears to be a common problem. Looks like the work around is to add the nuget package to the full framework assembly. Have a look here https://github.com/dotnet/standard/issues/506
You can always send feedback and use preview vs 2019, and tell em that u need
Welcome to the API world!
I would recommend against that practice because linq and the procedural code are not actually identical. They have different performance characteristics, different behaviours and may not even generate the same result. You just can't work with them the same way. That's not even counting async or parallel linq. Pick linq or procedural and stick with it. If you're writing and testing procedurally and then converting back and forth you're really not doing the job properly. 
&amp;#x200B; Even 2018.3? I think it works muuuuch better than a year ago. But if you less productive you shouldn't use it of course. 
Fyi, they experimented with colons but they changed it back upon DavidArno's request. https://github.com/dotnet/csharplang/issues/1054#issuecomment-386087859
&gt;home &amp;#x200B; Been using Resharper for many years so my workflow is completely centered around it. Why do you hate it? I'm not trying to convince you of anything, genuinely curious. Why is your home setup better? 
Less readable imo
You can go to some company as intern
I'd probably do something like this. Note implementing `IEquatable` and using `is` pattern matching and `?.` to avoid the `== null` problem with overloaded equality operators. Also used some expression-bodied members because I think it's cleaner for something that is logically a simple mathematical operation, but that's more of a stylistic choice. public class Key : IEquatable&lt;Key&gt; { private readonly int _num; public Key(int num) { _num = num; } public bool Equals(Key other) =&gt; other?._num == _num; public override bool Equals(object obj) =&gt; obj is Key other &amp;&amp; Equals(other); public static bool operator ==(Key a, Key b) =&gt; a?.Equals(b) ?? false; public static bool operator !=(Key a, Key b) =&gt; !(a == b); public override int GetHashCode() { return 436616847 + _num.GetHashCode(); } public override string ToString() { return $"{_num}"; } }
Try using Profiler. It tracks every query. You can export the results to Excel and filter the BS like “connection reset”.
I've never used them and don't know if they'll will let you charge in the way you want but I've heard good things about [Stripe](https://stripe.com/docs/api?lang=dotnet). 
With [target-typed new](https://github.com/dotnet/csharplang/blob/master/proposals/target-typed-new.md) it could become ```csharp Vector2 TakesEnum(Enum value, bool pred) =&gt; value switch { Enum.First when pred =&gt; new(0, 0), Enum.First =&gt; new(1, 1), Enum.Second =&gt; new(2, 2), // etc }; ```
I definitely see the use in these lambda switch functions, basically it's like the ternary operator, but with unlimited conditional cases, which can be really useful. But the syntax in my opinion is messy and less readable than a classic switch block and looks creepily like PHP.
I will check out Code maid. Thanks.
There are no lambdas or LINQ in that article.
Roslynator looks good. Maybe I can finally say goodbye resharper, and hello faster startup.
`=&gt;` fits in more with other functional/expression syntax in C# like lambdas and expression bodied members.
Still unsure of how I feel about target typed new outside of field/property initializers. That example does look clean though and I haven't thought of using it that way before...
Fab, makes it much easier to use the resource-initialization-is-acquisition pattern that was common in C++.
https://docs.microsoft.com/en-us/aspnet/mvc/overview/performance/profile-and-debug-your-aspnet-mvc-app-with-glimpse
Create a dictionary. Iterate over the list. If the number exists in the dictionary, increase count by one, otherwise add number to dictionary with count 1. Then print the dictionary. 
This is the same article being discussed [here](https://www.reddit.com/r/csharp/comments/ajfyql/what_do_you_think_of_the_new_pattern_matching/), FWIW.
If it needs to be per paid then modulo 2. 
I was similar to you. Self taught on a TI-89 age 11, then C++ age 13, then Java age 14. Finally got around to C#, SQL, JS (web stuff) around age 18. I took a few computer science courses in high school, but was normally just going through the motions on stuff that I had previously taught myself. I can honestly say that the most important part of computer science, software engineering, coding (whatever you want to call it) between the ages of 11 and 18 was that I was constantly _exploring_. I wrote one off projects for myself: a math helper or two on the calculator, a small game in C++ or Java, 3D graphing software in Java or C++, little utilities to get my work done faster in C#, maybe a Words with Friends cheating app or two (university roommates did not like this). I majored in nuclear engineering at university, and I did not take a single computer science course. However, my wife and I started a successful sorority recruitment software company in which my buddy and I did all of the coding. At first, we did it for free, and we did it just because I told my wife we could. I also took over development of the website for my student organization (also work I did for free). Somehow, I got an interview with Microsoft, and I have been working as a developer, program manager, or dev manager at Microsoft (or something similar) for 8 years now. Early last year, my wife and I sold the company (we started to charge a yearly fee when it took off). At the same time, though, I just recently wrote a [C# library](https://github.com/twitchax/Sheller) just for myself, and just because I enjoy it. I just want to impress upon you how valuable _just having fun with coding_ can be to your overall success in the long run. Making money is great, but you are also at a great point in your life to _just absorb_. There is something uniquely satisfying about coding something up just for yourself, or just because you thought it would be _fun_. If you snag a paying gig, then that's great, but I would recommend spending some quality time on what you "truly love" just to discover its joys. Best of luck, and have _fun_!
https://miniprofiler.com is a good tool for this, you can set it up to log all SQL calls and other things too
He's saying you can't develop for the project or ask for support. The MIT licence means you can use it for free.
As other people have mentioned the profiler is the way to go. I'll note that the few times I've had issues where I thought it was sql calls it was usually just one call that took way too damn long. Mix in someone who doesn't have a ton of sql experience with linq/entity framework and it's easy to write queries that are as performant as me on a sunday morning after drinking a bottle of jameson the night before. 
You should probably implement logging, there's a lot of frameworks and stuff built in to dotnet core. 
Here's the problem: that's _was_ the cherry picked side branch... I made it as small and as organised as I could but I couldn't do any less than that. They were also pretty much all correlated, so splitting it in smaller parts would leave each of them incomplete. And finally, they already knew the code. We are a very small shop doing automatic cutters. We had been working hard for months together and we had been cutting using that branch all that time, and the testers were involved. I didn't just dump 70 commits on them like that.
you might want to try out some "free trial" monitoring tool like dynatrace. easy to setup and collect the results &amp; execution times. Another way to rule out or troubleshoot SQL perf is to look at it from the SQL side, the default SQL server install already has stats on the most costly queries and counts/times. Just see if those are coming from your website.
It should go without saying that you shouldn't run a SQL Trace in production if you can help it :) if you do need that, make sure that your trace filter is as limited as possible
As others have suggested a trace would work fine. You can also pipe trace output into a SQL table. Grouping by the command text and getting a count will show if you are making many duplicate calls that could be cached in the app memory (stuff like static lookup lists). But your going to most likely have to spend some time running each command to get the query plan and see why its running slow. 
I've been messing with this api and so far its really easy to implement. thank you for your feedback. 
Honestly, you should learn to use the debugger. For your example, it breaks on the exact line that causes the issue and you can see the call stack that leads to it.
I love this tool. I've used it on and off for years. Goodbye N+1 queries in Entity Framework. 
You want to open the file in append mode. Check this SO answer. https://stackoverflow.com/questions/2398418/how-append-data-to-a-binary-file
Your == implementation is buggy. Comparing two null references should result in true.
Profiler is rather terrible in 2019 and is obsolete and will be removed in a future version. It had the potential to crash your production server. Extended events are the replacement, but you can't really beat monitoring software if there is any room in the budget.
Good to know! I haven’t worked with 2019 yet.
if you fear about the URL, you can put the query into JSON format and put it inside the request body, but then you have to use HTTP-POST 
Since you mentioned website I'm guessing the issues are in production. The best bet is to look at more holistic logging like solar winds database performance analyzer. It will help identify your slow queries and let you target your performance tuning efforts. If budget is an issue, look at Brent Ozar's scripts. He had lots of useful ones and they can help point in the right direction. The next step would be adding logging to your app to capture the queries that are being made. It will take some work but tracing statements will do wonders in the future when you run into other issues and need to turn on extremely detailed logging. I would try to avoid profiler since on a taxed server it adds additional load and has crashed production servers for me when I was newer to the performance tuning game. Good luck. Performance tuning is as much art as it is science. And sometimes the dark magic that only experience can teach.
I was all into WPF 8 years ago. I needed to do a lot of data visualizations. It seemed like the logical choice at the time. Compared to what is available for html vs WPF as far as data visualization goes it was a no brainer to ultimately just host a web browser within my WPF app. The pain was to host CEF instead of the built in IE browser so things just worked. Never been happier than to ditch expensive buggy commercial WPF controls that have a small user base against something like D3 which has a huge user base and plenty of tutorials and examples. Not sure why I would ever choose WPF over just a website or Electron these days- can’t imagine there are many devs interested in a windows only stack that hasn’t had much love over the past 5 years.
&gt;Using obj is Key &amp;&amp; Equals((Key)obj results in better IL code. Better in what sense, a few bytes smaller? I'm only really interested in the RyuJIT output. &gt;Your == implementation is buggy. Comparing two null references should result in true. Thanks, that was very sloppy. &gt;There is no need to call string.Format here. Just do num.ToString(). Yeah obviously, but I just copypasted that from the OP. 
I don't know, POST is longer than GET and I don't want to have to type too much. POST is 33% longer than GET so the strain on hands and wrists is considerable.
Profiler has been deprecated since the release of 2014. But even before that with ignite (now solar wind database performance analyzer) I haven't used profiler for performance tuning since 2010. The are just better more user friendly tools out there. The default trace is still really good for tracking other things like auto growth but extended events for a huge boost in 2014 that put even that use in question.
Is it possible to not redirect the stdout/stderr? I like to use libs like this for my build process.
I guess in terms of performance, profiler doesn’t offer much. I guess I thought OP just wanted to identify and see all queries and analyze afterwards. Performance tuning is something I’m trying to get caught up on. It’s not easy when you’re the dba, developer and project manager for a 1-man shop! What other tools do you suggest other than EE?
^ This. Most things are going web oriented for a variety of reasons. I can't see a justification for a company to invest money in WPF when Microsoft aren't even invested in it themselves anymore
Some sort of database logging tool. Red gate, sql sentry, or solar wind dpa (been using that one for 8 years now and love it). The next is ola hollengren's maintenance scripts (spelling on the name may be off) Third is almost anything by Brent Ozar. Fourth and finally ish is Adam mechanics sp who is active. The last two are more for in the moment than holistic but all is super useful.
I think WPF still has a lot of use for internal applications for the enterprise. I would rather use electron personally, but I have a perception that you can do more with a smaller memory footprint in WPF. Disclaimer: I haven’t touched WPF in almost two years and I might just be lying to myself. 
Fully agree! I started WPF, then saw Microsofts future path and they seem to be confused themselves.. They want to integrate web with WPF and UWP &amp; make something that less would use ultimately.. because web is the new easier development approach. Looking at current trends &amp; future possible technology, IoT is boosting, A.I is being *practically* implemented in IoT and surviallance is inevitable, so web apps &amp; web app security will be on rise for a long time to come. Looking at Desktops, new web centred systems are being experimened by *All* commercial os companies. Android/Fuschia will replace Windows if Google is clever enough to not make all apps just web based like ChromeOS(which is wack and just a sugarcated, locked up Linux distro). At the end: mobile systems will also be replaced by web apps because real time world wide connectivity and control. Which is great for the whole world in general.
I can see a trend that lots of our customers have always been working with WPF from ancient times, and they don't have the flexibility to change the way how they operate basically. It can be seen that all of the users are pretty much the ones that don't want to abandon it, due to habit. When it comes to the generation of devs that have started working on it, well I think that it is quite stagnant nowadays. 
&gt; Better in what sense? For performance what really matters is the JIT output and I don't feel like making guesses about what the assembly it outputs looks like. The IL will be vastly different. `obj is Key other &amp;&amp; Equals(other)` will be: IL_0000: ldarg.1 IL_0001: dup IL_0002: stloc.1 IL_0003: isinst Key IL_0008: brfalse.s IL_0019 IL_000a: ldloc.1 IL_000b: unbox.any Key IL_0010: stloc.0 IL_0011: ldarg.0 IL_0012: ldloc.0 IL_0013: call instance bool Key::Equals(valuetype Key) IL_0018: ret IL_0019: ldc.i4.0 IL_001a: ret `obj is Key &amp;&amp; Equals((Key)obj` will be: IL_0000: ldarg.1 IL_0001: isinst Key IL_0006: brfalse.s IL_0015 IL_0008: ldarg.0 IL_0009: ldarg.1 IL_000a: unbox.any Key IL_000f: call instance bool Key::Equals(valuetype Key) IL_0014: ret IL_0015: ldc.i4.0 IL_0016: ret Tho it seems the JITter will produce the same assembly for both IL codes, so I guess that argument is moot.
What a frustrating thread to read. I can understand the desire to not use trailing commas but I don't understand why you'd advocate for the compiler to forbid them for everyone just because it's not your personal choice.
wow that was a great story.
The commas or the enums? If the enums then same here.
Makes sense I suppose, you’re declaring and initializing a local variable so the C# compiler is going to emit instructions storing to and loading from the stack. But yeah it seems pretty basic for the JIT to enregister this local and then this difference disappears.
I use this and I just realized last night that errors that are in my api endpoints come back as html (of miniprofiler) for some reason. Haven't spent the time to figure out why yet but a warning to others that you may have side effects.
If you have an object, and there are multiple ways that object can be constructed depending on other criteria - than you must first initialize the object as a null. Then you check the aforementioned criteria to conditionally construct the object.
Thanks! Good stuff.
I've found the only use for WPF is purely for internal. It's just not practical for a client facing application. It will definitely be beaten out every time by a web app. 
I can't keep up with C# anymore.
Visual Studio doesn't run on Linux yet. Visual Studio code is pretty neat, but I won't use it for a large project. When doing any dev on Linux, Monodevelop will remain my goto until we can get something like Visual Studio for Mac (which is technically just a shiny version of Monodevelop any way)
Use a VM and move to .Net Core. Otherwise, have fun with Monodevelop.
Application insights would probably be a better option for figuring out why your site is slow, rather than just focusing on the SQL server.
They're mostly trying to catch up with F# I think.
Not natively, but the NuGet package OneOf can be used for this purpose
Location: Naperville, IL (US Central) Relocate: No Looking for C#/Python/C++ on Linux/Cloud. 20 years commercial software experience, 4 years remote. My last little project was a rewrite from Python to C# .NET Core on AWS Lambda, and I really enjoyed it. 
Correct me please if I'm wrong but do you need a hierarchy tree?..
Ah, that is probably what I need. Thank you, bit of a noob question but yes.
Maybe. [https://media.giphy.com/media/11p8Lr9eVeXq2Q/giphy.gif](https://media.giphy.com/media/11p8Lr9eVeXq2Q/giphy.gif)
What serialization format are you using? Depending on the format you can't just "append" (e.g. XML or JSON).
While APM tools are great... There's a lot you can find from SQL DMVs https://www.google.com/url?sa=i&amp;source=web&amp;cd=&amp;ved=2ahUKEwid6u26longAhVJ74MKHTdyArsQzPwBegQIARAC&amp;url=https%3A%2F%2Fwww.red-gate.com%2Fsimple-talk%2Fsql%2Fdatabase-administration%2F5-monitoring-queries-for-sql-server%2F&amp;psig=AOvVaw1SggnZn-GN2P_hhY6EtJQS&amp;ust=1548514038575121 Bah stupid APM link sorry
If you have access to LINQ: To store a list of all TopLevel objects with a LowerLevelObject1/2. Im guessing your objects are stored as properties on the object as lists. IEnumerable&lt;TopLevel&gt; withLowerObject = topLevels.Where(x =&gt; x.MidLevelObjects.Any(y =&gt; y.LowerLevelObjects1.Any() || y.LowerLevelObjects2.Any());
By that I mean having to handle the default case everywhere when matching enums such as: _ =&gt; throw new ArgumentException(nameof(value)) or _ =&gt; default I get why it's needed as technically the enum can be any value of the backing field but since it's all my code I know that it can't be any invalid value so it's just annoying unnecessary repetition. I wish there was some `[Exhaustive]` attribute or something for enums that would allow me to pinky swear to not cast arbitrary int values to those and allow me to omit the default case.
I'm biased, but WPF and UWP definitely have a future. There are just some apps that would be difficult or impossible to write as Web Apps. Does every app need to be a desktop application, no, but if an app involves a large amount of data, complicated user interactions, data acquisition, etc, desktop applications still make sense. There is also still a large portion of businesses still on Windows 7, so UWP is out for those businesses. UWP also imposes many restrictions on its API, so there are some applications that can't really use it either. 
I think I wored the question wrong. I don't want to write any code, I want to have 'TopLevelObject.cs' open and then be able to search the sub-object for 'LowerLevelObject1' in the IDE. So I can easily know what to type to use that object. At the moment I'm just trialing and erroring trying to find that sub object. More or less I want to be able to search 'TopLevelDomain' for 'LowLevelObject' and find the path I would need to be able to use to use LowLevel object. 
There is a way, but I don't remember. Also, you can make an installer yourself using [this](https://turbo.net/) thing
But `:` fits in more with the fact that a `switch` is a block of limited goto labels, just like it has been in all C-style languages for the last half-century. It's not a function. It's a multi-conditional multi-jump "routing" point to control program flow. If you just want a simple value mapping, build a constant map (like Dictionary&lt;YourEnum,MappedObject&gt;) and do a key lookup against it. You can even stick delegates into that dictionary and call them (and get "data-driven" control flow!) instead of using a switch statement. But the real improvement to `switch` in this update isn't the `=&gt;` syntax or the "it outputs a Task" thing. It's the fact that they've shoehorned T-SQL's `CASE` functionality into a traditional C-style language's `switch`. CASE allows you to specify a separate set of conditions using any in-scope values for each of the WHEN conditions. Instead of C-style `switch(blah)` and then you have to provide `case` values to compare 1-to-1 against "blah" for just equality, T-SQL allows you to do this: CASE WHEN @blah=1 AND @foo&lt;4 AND @bar IN (meh.whatever, i.dontcare) THEN output_value WHEN @blah &gt; @foo AND @bar &lt; GETDATE() THEN another_output_value WHEN @foo &lt;&gt; meh.whatever AND i.dontcare IN (@blah, @bar) THEN more_output ELSE default_output END Which you couldn't do in C#... until now. *That's* the real improvement here.
I've never used WPF for anything serious. I've used WinForms a few times for some quick one-off dev tools. I've experimented with UWP, but it's largely hobbled by the Microsoft Store. (Though it's fun to play around with the ten-foot stuff and deploy to my Xbox One...) But all *real* work has been web sites, web services, command line tools, and Windows services (yes, really!). Though I'd love to get a system-level "service" (daemon) running for a Linux deployment, I have yet to be assigned a project that requires one.
So for building desktop applications, is WPF still the way to go? 
It depends. If your application needs to be able to be run on pre-Windows 10 machines, then WPF is your choice. If the application only needs to run on Windows 10 machines and your application is fine with the UWP API restrictions and the Fluent Design Language UWP XAML brings, then you should go that route. Keep in mind that you have to be aware of exactly which version of Windows 10 your users are using, if they are running older installations, then WPF might be the better choice since older UWP API versions were much more restrictive.
I want to make an installer executable that will transfer the files to the program files folder, and overwrite existing ones when I build a newer one after making changes to the program.
To make an installer, I would suggest using one of the following: * Windows Installer XML Toolset (WiX) - steep learning curve but flexible and produces MSI's or executable bundles (the typical .exe installers), developed by Microsoft subsidiary FireGiant FWIW, Rob Menching, the creator WiX and CEO of FireGiant is also an ex-Microsoft employee, so WiX can be considered a Microsoft product. Note: this is NOT the website builder "Wix". * Click Once - easy to use and deploy updates, built into VS already, but has some limitations (you should google something like "limitations of Click Once applications .NET" To get the desktop folder path of the current user, use this: var desktopPath = Environment.GetFolderPath(SpecialFolder.Desktop); For more details on the `SpecialFolder` enum and its members, go [here](https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netframework-4.7.2).
Hold on to this moment. This is the moment when you understand nulls and how they happen. This is the moment so many developers don't ever have, and because of it, they develop an irrational fear of nulls.
Make a program that does this. Then use [this epic trick](https://hubpages.com/technology/How-To-Develop-a-Standalone-EXE-C-Application) to make a standalone version. Also, turbo changed, so don't use it.
I think WPF should be less strict and more HTML-alike in terms of syntax and structure. Being able to style elements without having to do workarounds would also help - just like with CSS. ..but in general, WPF is quite ok.
Cool beans
People always look at the downsides of UWP's restrictions. I however look at the good sides.
Azure Monitor Application Insights will do it for free.
There are some nice aspects to it for sure. Fluent Design is nice, compiled bindings, better HiDPI support, better multimonitor support, access to some nicer system APIs, but UWP is not a direct replacement for WPF/WinForms. There is overlap, but UWP is not a superset of WPF/WinForms. 
What work arounds? There is literally a &lt;style&gt; tag. I find XAML Styling a lot more straightforward than CSS.
There's a tool in VS that can build a class diagram for you. I think it's a good start for your problem. 
I see something like electron being more useful. Microsoft is using it to some degree. Just need it to be a little more space efficient.
I only use WPF when necessary which is normally times when I have to interface with hardware. I do really enjoy it and secretly wish that HTML6 is just XAML since it seems there's no limits to what you can do in XAML. People complain about deployment but ClickOnce works quite well to get your code out there. I've also written apps that need access to a users programs, for instance one app would take a Word template and fill it from the database and open Word for the user to do the final touches on a document. It's much harder to do stuff like that in a web app.
You're probably not going to get a paying job so young, but look into your school's "co-op" (/internship?) programs. I did a semester of co-op work in highschool, and while it was working in a computer repair shop, it was good experience and gave me a better grip on real jobs than the McDonald's where I was working at the time. Probably not going to pay you in highschool, though. Your best bet for making actual cash will be mobile apps. If you make a decent, simple app, you might be able to sell it for a couple bucks or stick a small ad in it and see some revenue. I wouldn't expect *too* much money from development at your stage, but putting in hobby work while you're fresh and young is an exponential investment. I was you, 15+ years ago. Taught myself 80% of what I knew coming out of highschool, made stupid video games and websites. I went into college (in canada, like a "more official" US community college) questioning shit I learned and continuing to build it myself. Did 2 internships, first as IT Help Desk and second as Network Admin type stuff. Finally in my graduate year got hired at a software company as a part-time employee, which eventually turned into full-time job, and from there it's been my career. The point being, stick with it, and don't be afraid to get a job that's only slightly related to the field. It'll get you contacts, work ethic, and introduce you to the type of office / business environments you'll probably end up in the future. Good luck!
&gt; have recently installed the installer project extension That's the easiest option. WiX is fairly complex. To use the Visual Studio Installer Project extension, follow these steps: * Open your solution in Visual Studio. * In the Project Explorer, right-click on the top-level solution and select Add &gt; New Project. * On the New Project dialog, select Other Project Types &gt; Visual Studio Installer &gt; Setup Project. * Then follow this: https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/2kt85ked(v%3dvs.100) 
They are using it where cross-platform support is desired. It still has many limitations in what you can do with it, since under the hood, it is still a web app.
What would be an example of a hard limitation? Considering we can add web assembly and native modules under the hood.
Thanks!
Profiler is fine short term if your trying to do performance troubleshooting. On a very highly utilized SQL instance it can easy up a ton of RAM in a short period of time and bring performance to a halt. Also a good reason to filter down where got can. With 2014 RTM and then SP1 (I believe) we had issues where extended events would stop working randomly so had to go back to a trace. We're on a newer version of SQL now so should revisit.
If you guys like these changes, then I implore you to check out F#. Nearly all of these features are lifted out of F# and implemented in a nice way in C#. Writing modern C# for line of business apps to me almost feels like writing F# but with a wonky syntax. 
This echoes my sentiment. WinForms is very productive for one-off dev tools with a limited lifespan. I used one of my projects for.. two years? But I'm too scared to even give it a sideways glance now. C# development patterns have changed too much. My *real* work is in web, and I dabble in mobile. I... heartily don't recommend mobile. If you have to fight your framework to get it to do what you want, you should probably use a different framework. For example, making UX improvements in Xamarin is *necessary* and *miserable*.
1. Memory usage is off the charts, so its kind of out for embedded applications or memory restricted applications, there are plenty of office computers with just 4 GB of memory around. 2. Accessing hardware is difficult, since you need to write a special module, where most desktop apps you can reference the assembly directly, and use pinvoke for C#, but there is less impedance mismatch. Why bother with a X-Platform API if you can't use it cross platform. 
what i think he is trying to say that way more properties should be in the base ui element instead of individual elements such as a border on every ui element instead of an extra border control
Hey I’m just curious what makes you feel this way. Do these features seem useful to you? It’s perfectly reasonable that this might seem useless depending on what kind of programming you do. Mostly, these are features you’d find in a functional programming language. 
I think it’s fair to say that ChromeOS is locked up Linux by design. It was never meant to be a rival to Windows. It aims to provide the advantages of Linux while not requiring any technical knowledge from the user. 
It's just so slow. You can get most of the features for much less resources.
Why are you trying to hold onto a reference to an MVC `Controller`?
Yes absolutely
Those caveats would have to be pretty intensive for WPF to have an advantage over web. Web is certainly capable of handling big data and complicated user interactions. The advantages of web deployment are just so strong that you would have to be pretty desperate for performance for desktop apps to have any kind of advantage over web. That window of opportunity for desktop apps to shine is only getting smaller. I don’t see any future for desktop applications outside of those with intense performance demands like editing software and gaming. 
I would love to totally embrace web over WPF, but I continue to struggle with the most fundamental part of building a GUI - layout. In WPF, once you spend the 30 min. or so to learn the layout algorithm (measure/arrange/render), you know basically all there is to know. The built-in panels act exactly as you would expect (you can easily guess the code for their OnMeasure and OnArrange methods), and it's straightforward to create custom panels to achieve arbitrarily complex layout. HTML/CSS, meanwhile, doesn't seem to have a layout system so much as an encyclopedia of layout rules, which interact with each other in obscure and unpredictable ways. Mysterious margins and paddings abound, and I feel like I have no way to reason about where they came from. I can't even get close to attempting something novel or complex. Am I missing something major, or is layout in HTML/CSS really as bad as it seems?
It has its followers but I never have preferred it over WinForms. Virtually all WPF apps I have used are super error prone. My company is phasing out it’s WPF platform entirely, but our Winform based client will never die.
She's been a walking zombie since Win8. The only reason WPF gets a change since 2010ish is due to VStudio being intimately tied to it. You see release notes like "We made X faster" or "Y loads more quickly". Nothing substantial. Remember- if it's not Azure, it's shit (in their mind).
I feel like the honest opinion is harsh. I invested heavily into WPF. I invested heavily into Silverlight. Then Microsoft abandoned them and pushed HTML 5 as the Way. Before anyone had a chance to process it, MS took it back and said their Windows 8 framework (which was so hasty they didn't have time to pick a not-trademarked name for it) was The Way. Then that was canned and replaced with UWP. Now UWP is great for Win10, but Xamarin is what they're going to push for cross-platform, and a Xamarin project isn't 100% the same as a UWP project. In short: MS hasn't let go of the notion that they want their GUI frameworks to be Windows-only, and very few people want a Windows-only framework. WPF's only future, unless MS changes their stance, is on Windows. It's not painless to go from WPF to Xamarin. It's not even a given that Xamarin is going to work on Windows/Mac/Linux in a cross-platform fashion this year. So the industry as a whole seems to be: * Adopting web clients, because browsers run everywhere. * Adopting frameworks like Cordova or Electron, that let them use HTML/JS since it runs everywhere. Will companies continue to want UWP/WPF apps? Probably. Some will probably only ever buy Windows desktops/tablets and aren't concerned with having a web frontend. I feel like those tend to be the "boring" end of the industry: their requirements are still the same as they were when we made fun of VB6 devs for taking the gigs. They tend to be the deep, internal enterprise systems. The software development industry as a whole has treated those jobs as the butt of jokes for decades, because they are the "lazy" developers who "learn one platform then nothing else". That doesn't mean it's bad gigs, but the sort of challenge they present isn't the kind most people find exciting when they're starting their career. I have 15 years of WinForms/WPF experience and it feels like it gets less relevant every year. Marketing that as "C# experience" feels better, and I'm pointing out I'm working a lot on Node and ASP .NET MVC on the side. I don't even use a Windows machine outside of work myself anymore. So Windows-only clients are useless to me. That's why almost every personal utility I write is a Node server these days. If the field settles down and MS gets some slack time to really make UWP shine, things could change. But I'm not betting the future will ever be a world where Windows is as dominant as it was from the 90s through the mid-2000s. That means "Windows-Specific" is serious albatross to carry if you want to do "new and exciting" instead of "maintenance".
My only major WinForms project was that WinMo one that I mentioned. And it *sucked*. The more I hear about iOS, Android, UWP, and Xamarin, the more I'm just of the opinion that *mobile development* is what sucks, regardless of the language, framework, or tools. On a mobile device, there's never enough screen space, the input paradigms are screwy, processing power is limited, and things you can normally rely on (storage, network, etc.) are missing entirely (or restricted to the point of being useless) or are unreliable (especially network connection availability). Compensating for this introduces *lots* of corner-case handling, which chews up already-limited resources and can even bloat code to the point that it destroys maintainability.
I'm really impressed by your story. It's nice finding other people that also like programming, but I'm not entirely like you since I started with C# this year when I was introduced to this. I will go further into what I currently feel is impossible. I remember feeling the same when I see other people's projects and stories online. But I shall not be intimidated! Goodbye and thank you.
Exactly that but shit...,xaml is fun to use compared to html CSS. The Grid to place your ui compo it s so good...
Profiler for detailed work. A decent APM for general use. New Relic is my favourite. How many calls to each table per minute, average time taken etc.
Why box yourself into legacy tech to support users who will have Win10 within a few years and most U.S. users have it now? The younger generation updates, at this point in time, we can stop catering to the .01-2% of your potential users that would fall in that category. Did you know in 2019, the government still mandates that all new development be compatible with IE11. They don't even test in Edge. They test in Chrome and IE11, never touch FireFox. Why? Old people still use IE11 on Win10 because they always used it and never even heard of edge...or heard bad things. All their computers have chrome on it now or edge. They waste time fixing IE11 only bugs all the time...
Using a proper CSS framework will make building webapps much easier. From that point on everything is just grids. I cannot imagine writing complex UIs in UWP or WPF!
You could easily create "custom" base UI elements that have borders or anything else you want on them. WPF also allows you to completely reskin controls without creating a new one.
I strongly prefer to have defined types used for most request and response bodies, so in your example I would go with your use of the simple \`MyType\` class. As you noted, it provides some level of validation. It allows you to add more properties to the request or response in the future without breaking existing clients. It also makes it very easy to know exactly what is expected (both by looking at code and by using things like generated Swagger documentation) and very easy to determine where each value is used within your service. I admit that I am near the far end of liking statically- and strongly-typed languages, but I have hated almost every use of \`dynamic\` I have ever seen. Its use has usually been motivated by developers not wanting to have to put any thought or effort into design, which then inevitably causes problems when maintaining any non-trivial codebase for any significant length of time.
&gt; From that point on everything is just grids. Sounds promising. Could you give an example of such a framework? 
Thanks for the input, your answer is what I suspected most people would think too, but I wasn't sure.
Oh yeah. I did custom controls for most of my time in WPF. What I love about WPF as opposed to HTML/CSS is if there isn't a layout that does the specific thing you want, you have the capability to go inside the system and define, with 2D geometry, what you are talking about. In CSS, your only option is always "make do with what you have."
That’s the one! 
The future is UWP.
I think both of these can be addressed. There is a serial module I need for electron. It is relatively simple and only had to be written by one person. The memory I think can be addressed by the complexity of web applications and possibly with more web assembly. But I think most of it is within the scope of the browser engine.
&gt;Why box yourself into legacy tech to support users who will have Win10 within a few years and most U.S. users have it now? enterprise.
Not everyone builds web apps, .net core doesn't quite fit with desktop apps just yet. 
To me Billy Hollis said it best when summarize web vs thick (wpf). Web is good for reach but for internal business applications wpf is far superior. There is such great turnover in the Javascript frameworks and all of them are trying to implement what wpf has natively when you talk about things like Angular, vuj.js...ect
Difficult to say. D3.js is so damn powerful, versatile, and useful across multiple platforms. There's no reason to use a WPF component for data vis unless you already have a WPF application you're maintaining. With Electron, NW.js, and Electrino, I don't see a use case for making a WPF application nowadays other than for something that may be heavy on hardware accelerated graphics (3D vis).
Installers are more complex than people realize. I’ve used WiX in the past, but like others have said, the learning curve is steep. Number one thing to know with it is that it’s declarative. You tell it where the files end up and it makes it happen. You do not write file copy statements. 
Yep, in projects involving rampant resource management (COM-based Office add-ins) I have tended to pick F# over C# simply because it had this feature.
There is lamda like syntax in the new switch expression 
I am posting this because I am under the impression that ImageSharp is the best image library available for .NET Core and if it can't be used freely in commercial projects it would leave a gap in the .NET ecosystem. Basically you will have to use wrapper libraries. In addition licensing issues are not only about money it is about keeping track of all the legal stuff.
Windows 7 still has 36% of the desktop windows market, Windows 10 has 39%. They only crossed each other back in November. If the trend continues, Windows 7 will still have a significant market share well into 2020. From a monetary standpoint, you would need a very compelling reason to forgo 20% of the market. Not to mention, architecturally, you can write a WPF application and "reskin" it in UWP without significant effort if you are careful.
That said, probably 90%+ of pattern matching in F# is on discriminated unions, which C# doesn't have (yet?). In that sense, F# actually backs up his hunch that it won't be used much.
If you're using SQL Server it has a tool called SQL Server Profiler. You can connect it to the DB and have it display all queries with the performance statistics as well.
I use both. WPF is a lot easier to style and I can do things like animation very easily. WinForms is good if you are dealing with grids of data. Its is a lot faster since there isn't the binding engine in the way.
So when are USB, NFC, device IO, Metal/Vukan/ES 3.2/DX 12 be properly supported by the Web?
Most of that is China, pirated Windows, not your potential users. Some of it is older HW. I know of a few governments that are on Win10. Win7 extended support is over this year. Even if I had global users to Target, 20% globally isn't much incentive, for me, to choose a legacy technology when that number is going to drop fast. You're going to lock yourself into dead tech that has a bigger impact on that products future than the potential lost users who are stuck in last decade. Luckily the younger users tend to want to stay updated with the latest, so the trend of stubborn people should be on the downfall. In my opinion, there's absolutely no valid excuse to support IE11, find better software if your vendor locked to dead shit. That's a stupid way to risk your entire business on old unsupported tech because they fail to invest in IT. The world moves forward, get used to it.
Wow, unbelievable. RIP ImageSharp. I don't believe there are any good graphics libraries for .NET anymore now then? Or have they actually improved the disaster that is System.Drawing for .NET Core?
Bootstrap is a popular one.
I've used WPF from the very beginning; really the power of it all is XAML and not necessarily what you think of WPF. It's simply the best UI 'platform' there is. UWP is a platform which can use XAML for designing its UI as well. If you are starting something new for Windows, definitely go UWP if this is a client side application. Microsoft has repeatedly (for years now) stated that UWP is there future for 'client' side device applications. You will hear "Windows 7" brought up, but its market share is declining every second, while Windows 10's keeps going up. Don't get distracted by the haters out there, do some research yourself. In any case both UWP and WPF allow you to work with XAML which is fantastic. Good luck.
If you don't like this state of affairs you could find some other way for the talented people who are working hard to get paid so they can keep doing it. &amp;#x200B;
I work on a huge, international, investment bank. We are still on Windows 7. We've been preparing to migrate for almost 18 months. IT people are supposed to be migrated first, but no one in my area has been migrated, and we haven't been told when our area will be migrated so the soonest it could happen would be mid 2019. I have friends at other large institutions, most are still on windows 7. Don't miss understand me, I want to be on Windows 10. I do my personal project in .Net Core and use Windows 10 at home. But I think it won't be until 2020 that Windows 7 will drop down to the point that devs don't need to worry about it. Extended support for Windows 7 doesn't run out until Jan 14, 2020. https://support.microsoft.com/en-us/help/13853/windows-lifecycle-fact-sheet, I think the latter half of 2019 will start seeing a large drop with a veritable cliff around Feb 2020 
They can ask for donations, which seems to work well for lots of large OSS projects.
Anywhere you start is a great place to start! :) C# first appeared in 2000, which is the same year I was coding on my calculator. Who knows, you may eventually learn a language that is just now being developed and will one day take off. The languages do not really matter: let your interests take you to whatever languages and projects best suit _you_.
&gt; It is expected that *all developers using Fody* become a Patron on OpenCollective.
If you speak to people who maintain large, popular OSS projects you will find that rarely do donations alone work out very well. Corporate sponsorship does sometimes, if you can get it. &amp;#x200B; &amp;#x200B;
&gt; we will switch to a dual licensing model similar to the one provided by ServiceStack I remember when ServiceStack used to be popular.. It was before they changed to dual license. That said, I use some paid imaging SDK's and they're generally a bit spendy ($,$$$). If they make it cheap like they claim and not licensed per-hosted domain/server/cpu core/etc. then it might not be that bad.
It's interesting, however, that makes the scope of these variables not so obvious, at least for me... on the other hand it should be the same as a normal variable -&gt; the scope will be the whole function, isn't it?
Yeah right, until that web app needs to access OS resources and then gets packed as an hungry Electron app.
Sorry I didn't read the whole thing. That seems to be not in the spirit of open source. I dont think I will use it anymore.
I would happily pay for this particular library but then I have to deal with the legal stuff. I kind of wish Microsoft pay them to keep the core library under Apache.
System.Drawing depends on Windows GDI doesn't it?
Maybe we can ask MS or The .NET Foundation to fund them? I mean this seems to be an important whole in the .NET Core ecosystem that needs to be filled somehow and MS are spending money on building .NET anyway
Uwp =&gt; webassembly https://platform.uno/
NFC is natively supported on every browser, you just have to make it Progressive Web App. Bluetooth too. Graphics is done on WebGL. USB and devices are no problem in Electron. WPF was ok, but it doesnt bring any advantage.
License changes aren't retroactive, so we should be able to fork ImageSharp's current version and maintain the permissive license on that fork.
We should push for enterprises to stop being that slow. There is no reason to not upgrade to something if its at most 6 months stable version.
Yeah... I don't know about you but I neither want nor have the ability to maintain this kind of library. The guys seem to be quite competent although my expertise in imaging is limited to judging the APIs I use, I know nothing about formats and algorithms.
Bootstrap, Bulma, Skeleton, Material UI, tons of them. But I advise to go vanilla. Learn CSS grid.
&gt;er when ServiceStack used to be popular.. It was before they changed to dual license. &gt; &gt;That said, I use some paid imaging SDK's and they're generally a bit spendy ($,$$$). If they make it cheap like they claim and not licensed per-hosted domain/server/cpu core/etc. then it might not definitely if someone has some contacts that could get something like that going, it would be great to get in touch with them. &amp;#x200B;
&gt; I invested heavily into Silverlight. Then Microsoft abandoned them and pushed HTML 5 as the Way. 2real4me /u/thestamp, can I temp-ban this poster for bringing back these old pains? That can count as "Rule 5 No hostility towards users for any reason", right?
If the current state of the library works for your needs, then you can keep using it. Perhaps we could build a community around an open fork of ImageSharp.
That's what I meant, have they improved that disaster for Core so it's platform independent now?
I hated it at the start because winforms let's you be lazy. But the things you can do with wpf make it awesome. Forms every application is the same, wpf you can be an individual. I think it will be here for awhile 
You don’t seem serious. 
It's really an unfortunate decision. I agree that the MIT license means it's open source, but when the maintainer adds something like this, it just confounds matters.
What you're asking for would essentially be [shapes](https://github.com/dotnet/csharplang/issues/164), which haven't made it into C# yet, and it's one of those features that gets brought up a couple of times a year but so far hasn't come to fruition. That being said, even if shapes existed, I don't know that this would be the right approach. Unless you have some unique constraints, I would recommend simply defining your expected type. You'll save yourself a lot of headache. Especially for any kind of forward facing API, a clear definition is nearly always stronger - it will also allow you to provide good API documentation or even auto-generated clients using something like swagger, rather than expecting your API consumers to just get it right and be intrinsically aware of any changes. Even if you're only consuming the API yourself, you'd severely limit both readability and maintainability with a dynamic here. Keep in mind also, that if your API is responding to requests from a third party that you don't control, and the requests are coming in with a non-binary form of serialization - say for example JSON in GitHub webhooks - you don't need your type to represent the entirety of the payload they're sending you, only the parts that you care about need to deserialize. This kind of approach should essentially yield you the same kind of result you're looking for. Dynamics are rarely the best answer to any given problem, in most cases all they're going to do for you is defer compile time errors in favor of runtime errors.
What is every browser? Do you think everyone is using the latest version of Chrome and Firefox? Electron is not Web. And you referring WebGL proves you don't know the difference between WebGL capabilities and the 3D APIs I mentioned.
Dynamic should be a last resort. Having a model like that is.
Well ImageSharp developers also deserve to pay their bills.
What about paying for the tools we use?
I am not even sure System.Drawing is in Core in any form.
Sure but maybe some corporation can be more supportive. For example certain corporation that maintains a framework that can't handle images :)
Video Editing software, 3D modeling software, photo editing software, real time data, working with any data sets larger than a few GB, apps that use data acquisition devices, just to name a few applications that would difficult to write in JS/Node/Electron.
&gt; There is this latent feeling that the F# team is never present when critical decisions for .NET are taken. Let's not forget, Don Syme was instrumental in adding reified generics to the runtime. However, i do agree that the C# team seems to drive most of the decision-making these days. 
Just want to point out that both 3D modeling and photo editing are already being done on the web. See Tinkercad as an example of 3D modeling. Sure its not 3D studio or Blender. But its possible. Photo editors have been done as well. I agree with you on the other examples - anything with large datasets or need data acquisition are not going to be possible. 
This is life of being a developer in Microsoft's ecosystem. You never seem to know when they will just decide to abandon something. Only they never actually abandon it, the replace it with something else and then also tell the devs "oh X isn't a replacement for Y, Y is still actively developed through maintenance updates". It's just this whole mess of Microsoft developing a technology, dropping it, but not communicating that it's no longer their focus. Just leaves this being sea of various technology platforms that overlap with each other and then guessing which one is there because it's an actual option and what is there because legacy. This is the case with WPF vs UWP.
&gt; I invested heavily into Silverlight To be fair, almost anyone with that relied on a plugin as a runtime and container had to abandon it and move over to HTML5. Even Adobe had to finally kill off Flash/Flex. 
Silverlight should be known as the S word...
Isn't [Magick.NET](https://github.com/dlemstra/Magick.NET) (ImageMagick wrapper) an option? It's what I used for both full framework and core tools as ImageSharp is still lacking proper tiff support
Just have the "commercial" project be Free Software too. Free Software refers to freedom, not price.
Because Azure is their cash cow now. Just a few years ago it was their desktop OS and MS Office. 
What do you mean by "not redirect". If you mean that you would like to print/consume it as it comes in, then yes! :) The interface exposes a `WithStandardOutputHandler` and `WithStandardErrorHandler` (you can attach as many as you like to each). The stdout example is [here](https://github.com/twitchax/Sheller/blob/master/src/Test/BasicTests.cs#L104).
Microsoft's very own recommendation is to use UWP for Windows applications going forward. See my other comment in here on that. They've now been saying this very same thing every single year at their //Build conference and haven't changed their tune. If you look at the change list for Windows 10 you will see tons of new APIs for UWP almost every month. Very little has been added to any other API, including Win32. The good news is that you can use your knowledge of WPF (XAML) which carries over very nicely to UWP (if your application uses XAML). Good luck! 
I just used it in a project for resizing images to be stored on Azure Blob Storage for our B2B ecomm platform to use. It has some quirks (some access violations can hard crash your process), but otherwise it works well on .net core and has many features. I like it.
You can run/sell/whatever UWP applications completely outside the Microsoft Store. The two are unrelated. 
Oh dear I sure hope not, haha! It was not a fun ride. I was not happy they followed me after I ran to Xamarin.
Very true, the haters won't acknowledge that, but I don't think MS cares as most of the haters won't be around next couple decades to complain. MS is looking to the future. UWP is a complete and radical departure from the 'old' ways of doing things and brings in a much better application platform in almost every way. 
Wpf and uwp are coming to the web woth web assembly, the new web will not be pure js anymore 
yeah, I mean the problem is that it still calls a non-managed external dll. But ImageMagick is an incredibly advanced image manipulation tool. Not as easy to understand as imagesharp, but more powerful.
While WinForms and WPF are open sourced and will be available I'm .net Core 3, it won't be platform independent. That's up to people forking it to do. WinForms and WPF are under MIT licensing. Just throwing that out there.
It would be amazing if WPF became available for Linux. It's great GUI library, it would drastically improve development of graphical apps for this system. One can dream.
&gt; Learn CSS grid Best intro to it here: https://cssgridgarden.com/ 
I don't have any issues dealing with images on .NET.
How do you do it?
Get out of here with your common sense! But all joking aside, I don't see the issue with all this. The library is still open source and you can include it in your open source project. If you have a closed source project then you most likely are earning money from it so its fare to pay for the work of everyone who built the library in the first place. Am i missing something?
There was no F# back when Don Syme was working on the runtime, so I don't see the relation.
&gt; I want to have 'TopLevelObject.cs' open and then be able to search the sub-object for 'LowerLevelObject1' in the IDE. I wonder if you're looking for Find Usages. It's in the context menu if you have Resharper and right-click `LowerLevelObject1` where the property (I assume) is defined. It is really tough to understand exactly what you're asking, though.
SharpDX
&gt; I kind of wish Microsoft pay them to keep the core library under Apache. It's already under MIT License https://www.nuget.org/packages/System.Drawing.Common https://github.com/dotnet/corefx/blob/master/LICENSE.TXT
A per developer license model is a pain to work with in any large organization where technically almost any dev can access the code and work with it, but only a small group usually works with the code. We're basically barred from per-developer licensing due to legal reasons, unless it's managed by a licensing server.
Only worst enterprises still use IE. Normal ones moved on.
It is: https://www.hanselman.com/blog/HowDoYouUseSystemDrawingInNETCore.aspx
Ok, I read the whole thing and the last sentence is the most important. &gt; I know this is kind of vague. Firm up what you want. What is the problem you're actually trying to solve, or what is the result you want? Short advice, hierarchies of derived classes will eventually make you cry. Conceptually, if you have a list of animals you can only do animalistic things. This basically includes breathing and being alive. After that you're into derivations. So my kitchen (I keep a lot of animals in my kitchen) is separated into a place I keep felines, and a place I keep canids. I do have a list which includes all the felines and canids because I need to keep a total count of the animals and whether they're alive. Other than that, there's no benefit in grouping them. Keep them in their respective cages and respect the difference between them. But honestly be careful of inheritance. It's a nightmare when you hit marsupials. The Duck-billed Platypus was a message to programmers that inheritance is going to hurt you. 
I don't really see a problem with this. Library authors want to be paid too, and it remains free for use in other open-source projects.
This is a GDI wrapper
I am not criticizing library authors I simply wish that MS would pay them to keep this under permissive license.
&gt; But that only works if I have the constructors, fields, etc... for Animals and derived classes set to public. If possible I'd like to keep the individual animal constructors (and everything else, really) protected, as they're not needed in the rest of the code I'm just going to address this a bit, and ignore the rest of the problems with what you're thinking. In order to achieve this hiding of constructors, you might create interfaces rather than classes - `IAnimal`, `ICanine`, `IGrayWolf`. You could then create nested, private classes inside `Animal` that implemented those interfaces. Then only `Animal` would have access to those constructors.
Lol. If I'm honest about the problem I'm actually trying to solve, then I'll probably realize (in my new programming ignorance) I went about this the wrong way and need to rewrite a bunch of code and learn a bunch more concepts to make it work. :) But really, objects may not have been the best way to go about this because I'm using them mostly for data relationships, I guess, mostly via the properties of the animals. So each Animal is an object and all have their own properties (e.g. a GrayWolf would have 6 total properties; some properties inherited from Animals: Breathes, IsAlive; some properties inherited from Canines: Barks, HasGoodSenseOfSmell; GrayWolf: Wild, SharpTeeth). Basically, in my main program, say I have a combobox and I want that to have all the individual animals in that, so when I select "GrayWolf", I have a textbox or whatever to display Breathes, IsAlive, Barks, HasGoodSenseOfSmell, Wild, SharpTeeth. And then I can take the GrayWolf object and do other things with that. Right now, literally all the properties are just strings and really I'm just using the objects to help convey data. But like I said, don't know tons about all the different features of programming so probably went about this the wrong way. 
Use the APIs from .NET Framework?
It depends on your sector but the financial industry is the worst. To this day most banks limit your password to max 12/16 char and no specials. That's an example of many terrible things in that organization. Nobody is perfect but what did they do and not do for the past few decades to be in that mess. IT moves fast, if you're not staying updated, you're going to be left behind. That goes for developers not wanting to learn new things, to businesses thinking a 10yr upgrade cycle is a good idea when their entire business depends on technology.... Most Businesses do not take security or technology seriously because it gets in the way of their money. They do not think it's worth the effort to do many things, later on they wished they had. Business needs to move faster with their tech, so many have failed because they are ignorant, arrogant, and don't take it as seriously as they should. The only reason the financial industry uses cobal and 90s versions of databases is pure breed and lack of investment. I'll never work in that sector, good luck.
In your example you suspect mid 2019 to 2020. You're building something new, why pick old tech when you're so close it likely won't even see release in 2019!
So how do you do it in .NET Core was my question. I did read though, you could do it with the system drawing API (which is relatively bad) but you have to have the native dependencies it wraps installed on the machine on Linux
Probably. I chose image sharp back when I had to choose a library because it is not a wrapper and because the APIs worked better than any of the alternatives.
Does Microsoft sponsor any .NET libraries other than Newtonsoft.Json? Honest question, it seems like a touchy thing to pick favorites among different libraries.
The problem is getting the place you work at to pay for something.
ImageSharp isn't for GUI's
I would have as well if they had tiff support. For what we are doing jpeg is not cutting it at all, so I followed it but never used it.
I am not aware of any other image libraries written in .NET (i.e. not wrappers of native projects)
&gt;Only worst enterprises still use IE. I think you just offended most of the health sector, if companies could have feelings. IE is still the norm in many businesses in Scandinavia, usually the bigger ones.
12 months is a long time. If I were writing the first line of code today, I'd still use WPF but be careful in my architecture to make moving to UWP easy. Limit code behind, keep all logic in the VM, encapsulate file access, etc.
Xamarin does seem to do a good job of doing that. But that's not dotnet core.
God I hate being a web developer.
Xamarin was a company that Microsoft acquired, that's very different from sponsoring an open-source project. I just checked, they don't actually sponsor Json.NET either, it's just the default JSON library because it's the #1 package on NuGet. (They're writing their own implementation now anyway.)
Yeah it is. Still I'd not use a wrapper with native dependencies that differ across operating systems and has inferior API.
I guess they can acquire them :)
That's assuming you ever get the go to refactor to change technologies. In my experience, once it goes to prod, the tech won't change. The business will deem it as a risk. Has that ever happened in your experience? In mine, you'll run into compromises and something will give and eventually you'll stop trying to make things easier for a major refactor that you'll never be able to do. I've had to make a new angular app in 1.5 because 2.0 was 'not stable' (it was in RC at the time). So did extra work to make updating to angular2 easier, we didn't use scope, we even added a decorators lib to make 1.x more like angular2+. We thought we would upgrade angular in a few months. Ha! More devs we're added who didn't care, I transferred teams, and that app is still angular 1.x and likely will be until the end of life. As soon as you say, I'll do this now and X later....you set yourself up for failure. Later never comes in the industry. How many times do you hear 'we will take the tech debt now and fix it later', how often does that happen??? 
https://www.geeksforgeeks.org/subset-sum-problem-dp-25/
Thnx, this help me alot
I said editing software, did you even read what I wrote or did the first sentence trigger you too much?
They’re not only already possible, but give it time. Browsers could barely handle static pages a decade ago just wait.
I work in healthcare. My company is an industry leader in our space. We target chrome exclusively.
That's not what we are talking about. We are talking about System.Drawing which is part of WinForms.
Then the complaint should be about the place you work at. If they intend to operate on a for-profit basis, other people should be allowed to charge for their work as well.
&gt; if it can't be used freely in commercial projects What was that again? &gt;commercial projects Not blaming you personally, but I'm sick of this attitude that I should be able to develop a commercial project on the back of everyone else giving me their shit for free. If ImageSharp need funding and can make it work by charging commercial customers while keeping it open source and free for others, good luck to them.
They incorporated the .NET Foundation https://dotnetfoundation.org/About
And I should mention that out of 400,000 source files and about 1,600,000 images created, I was only able to cause the process to crash with specific colorspace operations (attempting to add sRGB color profiles to an image that was already in sRGB) with one source file, so it's likely I just hit on a know bug or I was trying to do something unsupported.
Great! 😊 Did your product support IE once? Must have been nice to be able to just forget about IE when developing.
&gt; If you have a closed source project then you most likely are earning money from it Oh, sweet summer child....
But I never said ImageSharp should do something else. I think a company should sponsor them. Microsoft is giving away the whole .NET Core for free maybe they can spend a bit more and give these guys money. Better than hiring one more dev on the Xamarin team.
&gt;Not blaming you personally, &amp;#x200B;
The exact pattern you use will depends on what type of application you are writing - a web app, a desktop app, a console app, a mobile app etc. You may end up using several several patterns together. My comments that follow assume you are creating some type of business application such as an online store or a line-of-business application. One of the best things you can do is do is read up on n-tier. n-tier has been called by many names over the years however it remains a cornerstone which many other patterns can utilize or extend. The main thing you want to understand is that your business logic should be centralized and exposed as low-level library classes (.dll's). These classes can than be wrapped by other transport technologies such as WCF/REST/WebAPI controllers or accessed directly by one or many presentation-level applications. Be careful to not to allow business logic to creep into controllers and ViewModels where it cannot be re-packaged and re-used. Once you have your business logic (sometimes called service layer) squared away you can build websites, desktop apps, mobile apps, etc. that consume that logic. The exact pattern(s) you use for your presentation layer are up to you. The good news is that if your business logic is written properly you can consume it from just about any type of application regardless of what presentation pattern (MVVM, MVC, etc) or technology (XAML, Winforms, Javascript, HTML) you use. I wrote a very thin client called [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) that assists you in injecting your business logic into your presentation layer. [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) is useful if you want to target multiple database platforms (MSSQL, MySQL, SQLite, etc) or transports (in-process, REST, WCF, etc). The [Zamagon Demo](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) illustrates how both a web application and a desktop application can consume a single API - and call that API in-process or over HTPP. The [Zamagon Demo](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) also illustrates how to design your service layer using Entity Framework. You will definitely want to see how to create services and use the EF repository. [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) is intended for enterprise-level applications - it may be overkill for some smaller personal projects. In any case I hope it helps you.
I get that, but there are thousands of great open source libraries that are free. What rubs me the wrong way is that basically did a bait and switch. I get that it was a beta, but there was no mentions that they planned to switch to a commercial licensing model as far as I know.
This is very disappointing to say the least. I wish would would have mentioned somewhere that this library planned to require a commercial license after beta. &amp;#x200B; What disappointments me the most is there is no free alternatives for .Net Core. Everything else is a giant hack. &amp;#x200B; Can someone theoretically fork the Repo from a commit before license change and start a new branch that maintains the Apache license? How does this kind of thing work when a license is suddenly swapped out? &amp;#x200B;
EFProfiler
Try [InnoSetup](http://www.jrsoftware.org/isinfo.php)
Migrating from WPF to UWP is pretty easy with some caveats. Stick to the MVVM pattern, minimize code behind, follow good OO practices, use dependency injection. As long as your UI isn't too complex, migrating from WPF to UWPb should be straight forward. 
My point is that there doesn't seem to be anyone with the attitude you describe around :)
They mention it now with the release of the latest beta. It was also in their gitter channel discussed some time ago. Yes the library can be forked but who is going to maintain it on that very high quality level?
I'm not going to make some bullshit exaggerated statement like "I see it all the time", but I've definitely seen it around.
Sorry, didn't see the last sentence, on mobile. But to be fair "editing" and "large performance" represents a huge market segment. That's like saying you don't see much demand for tires outside of race cars and bikes.
&gt;Yes the library can be forked but who is going to maintain it on that very high quality level? Microsoft? ;)
If they are going to spend resources on maintaining it they can simply pay the guys to do it.
I work directly on both these technologies (most currently on the effort to move WPF to .NET Core 3 and open source) and everyone on the team definitely understands this. FWIW (and I know it's not much), the teams are working really hard to right these wrongs. WPF is here to stay, and I think there will be some really cool things in the future for UWP, as well as interop between the two. Web technologies are awesome, and I don't think anyone at Microsoft really has a problem with that. Sure, that may mean people are no longer forced to buy a Windows PC. That's good for everyone and just means Microsoft has to make Windows something people want to buy. 
I miss ServiceStack. I understand that mythz needed to earn some money for all of his hard work but it sadly wasn’t sooo much better than web API that we could sell it to our bosses. That said, his ideas drove Microsoft to be better. They should have just bought him into the team. 
You clearly have no idea how a community works, so you better let it be.
Eh, I think you have some mis conceptions on how investment Banks are structured. There are usually 3 silos, roughly speaking. Business, IT and shared services. Shared services maintain infrastructure, like desktop PCs, networking, servers, email, etc. IT does the software development. I'm in IT, I work on real time data analysis and visualization, which is why I do desktop development. We have folks doing ML, big data (PB of data), some block chain, CUDA. We use AWS and Azure. I personally use C#, F#, Scala and a proprietary distributed data processing language. All in all, we use a lot of cutting edge libraries. The shared services usually lags behind for various reasons. As a Dev, it's pretty interesting, I imagine not so much for sys admin, DBAs, etc.
&gt; Licenses will be charged per developer. Am I the only one that hates this kind of license? It's a pain in the ass if you got many developers and projects.
&gt; I remember when ServiceStack used to be popular We'd actually just discovered it shortly before that -- were actually ready to build our entire new ordering platform on it. Good thing the project stalled on our side; we'd have been in a tough spot.
There should have been additional text on the blog post to say we would be offering a one-time alternate perpetual license that would be unlimited for both developers and usage. I've updated the blog post to reflect that.
Please to explain. If your company doesn't pay for your tools,that is another matter entirely.
Wat?
Yes unfortunately I do have to agree with that... :/ I can't really complain about the company I work for now but I have worked for companies like that...
Doesn't appear targeted, more of an observation from a unfortunate perspective. But yea I agree that we should keep politics to a minimum. 