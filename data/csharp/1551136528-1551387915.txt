They keep advertising this "music to code buy" Bullshit. It makes no sense. 
It's a series of tracks written by one of the hosts, Carl Franklin. It's either that or they need to sponsor other companies/products in order to make a living. Personally, I think it's a cool idea and something I've considered purchasing. 
I think it is indeed written by one of them. Anyway which part is a cool idea? The fact that they can put together a bunch of sounds and market them as music to code by? Give me a break. There has never been a need for such a thing. 
I sure do like C# but I really don't understand how this can replace anything. The blazor examples I see will still use the regular DOM. And if you have an even moderately complex site you will need to modify this DOM? And to do that you apparently have to call global JavaScript functions. Sure if you have an application with a lot of heavy logic you can run that in c# and then provide the values to the global JS functions. But this is not a requirement for regular CRUD apps. Might be useful for games or something. But there are languages that you can use for that already. I did find an [issue](https://github.com/WebAssembly/proposals/issues/16) that appears to be addressing some of my complaints but it doesn't look like it's getting solved anytime soon.
It's just a bunch of songs designed to provide background music, to help you get in the zone when you're "deep" into coding. This is very common with developers, and I'd imagine it's a relatively popular product.
He started doing it in Pascal, then wrote Delphi1 in Pascal. From Delphi 2 upwards it was written in Delphi. Just the linker was C++
No worries, basically the majority of apps I’ve done in the finance/legal world are data and process driven, usually including forms for data entry, document attaching, workflows for approvals, passing messages to services etc so most of the work is done in the backend and the front end is basically just a UI over the API’s, they’re internal apps that rarely have the external clients/customers using them, so the main requirement for the front end is to be quick to make and quick to integrate with AD for authentication on against the existing logins and security groups for different departments. You can do this with a react front end of course or any of JS UI framework, but you’ll need to write your own authentication with AD, a separate controller to authenticate tokens against and to call the .net directory services to then authenticate with AD, which isn’t difficult really, but ASP.Net web apps are ready to go out of the box once you open the template. You just need to enable it and specify which groups have access on different controllers/actions etc. it’s really simple and rock solid. If we had a requirement for the app to go out to the public, or also be deployed on mobile we’d probably use react and eat that extra time to write our own auth, but it’s not on the horizon so it’s just easier to use all .net. We still use bootstrap, JQuery, CSS etc to make everything look good and have the basic functionality people expect from a modern web app, but the strengths for react etc are not super important in our requirements. The other reason is the other devs and support teams all know .net and the Microsoft world to a high level, so getting everyone to pick up react (or even decide on React vs Angular vs Vue etc) isn’t the best use of time. Sorry for rambling, I’ve actually been trying to find a use for react this week, as I’m enjoying it in my own projects so I’ve been thinking over it a lot! I hope that helps!
[ShareX.](https://getsharex.com/) Absolutely amazing program.
Never (Joking aside, read [this] (https://opensourceconnections.com/blog/2013/12/11/codds-relational-vision-has-nosql-come-full-circle/))
I can’t think of a reason but I don’t want to be narrowed minded.
Anytime, baby. JavaScript f'n sucks.
Javascript is fine.
I use to be the same way but after working with JavaScript a lot more and Typescript more recently, I actually really like it now. Could be Stockholm. Syndrome tho
Is this something that bypasses JavaScript completely?
Not that I am aware of.
That was incredibly well written. 
I hated web dev when I was in college too....bleh...and that served me equally as well as it did you. :-/
Can you use loops? 
No, not right now. We haven't learned them yet.
Blazor makes me laugh, right tool right job. I love c# but it feels like dotnet people are literally just not willing to budge until they write it (and probably use visual studio only) in c# or it's dumb. So much else out there, and it's working.... Why rewrite all stacks as c# or you can't code in? Blows me away ....
Blazor has already achieved .NET Standard in the browser and will be released [some time after 3.0](https://www.youtube.com/watch?v=WmDXgO0f-MQ&amp;t=48m37s) - Straight from the mouth of Dan Roth, Blazor project manager. "Experimental" doesn't mean "might not happen" - it means things will change and break from one release to the next. Have you messed with Razor Components ? It's good shit, and will be integrated with the rest of ASP.NET Core - so learning it won't be a waste of time. It'll be a good thing for those of us who've been doing things like WebAPI backend + Angular(TS) frontend, and maybe new developers will pick C# over JS whatnot. Or not... some people are a bit masochistic in their language/framework preferences it seems.
Even if Blazor dies, Web Assembly isn't going anywhere. The browser *will* support a wide variety of programming languages in the near future. And considering that JavaScript is a steaming pile of dog shit, I don't think it will be much of a competition once C#, Go, and Rust are an option.
You don't need to be diplomatic. The only people who don't hate JavaScript are the people who only know JavaScript.
Well it’s because JavaScript is a fucking cancerous mess, and has been for the past 5 years. If people could choose not to use it, maybe the language would finally be cleaned up. 
I am scared to get too excited about Blazor :(
Definitely Stockholm Syndrome. Quite common in our industry.
Yes. Desktop/mobile development.
**Update:** My "fix" has been to simply dump all XML data associated with that event to the CSV that is output (e.g. XDocument.Parse(eventRecord.ToXml()).ToString()). This may be a better solution in the log run anyway (for my use case) since it presents all data to the user for searching. Sorry for anyone that wants to duplicate the GUI "Event Viewer" behavior.
At this point as a professional .NET developer it is practically impossible to not learn a good deal of JavaScript the language unless you work as a Unity gamedev.
No problem, I can write other languages. Which non-JS language do you suggest we use instead of C#?
But muh Node apps!
Classic solution to the http://xyproblem.info/
Have you tried rewriting it in rust?
It depends on what you are wanting to store in your database. As the article that u/redditpostingM223540 links to, some things work better in one versus the other. For example, the company I work for has a multitude of both NoSQL and SQL databases. The SQL databases hold things like user information and report configuration data. The NoSQL databases hold things like multiple versions of the same document, web session information, and the like.
Can we get office Web Addins in C# to then!?
Will do. I’ll be creating a new post for it and I’ll definitely throw your name in the comments. Thanks for your interest, hopefully I’ll be able to help you. My code is great for CMD based applications and command console made in Unity as well. Also with the proper formatting and code modifications, you can make this work in standard text boxes and rich text boxes.
I think it is a bit of Stockholm Syndrome and a bit of Javascript does have a few redeeming values. When you combine it with Typescript which hides many of the issues people have with Javascript the ability to get near immediate feedback without having to compile feels nice. You get much more of that instant gratification that just makes you feel like you are always making progress. That is a nice feeling to have.
Great to hear. In VS pro check out the Locals panel and the Watch panel. Also don't be afraid to right click a line of code and Set Next Statement. I always set that one to a keyboard shortcut.
I’ll definitely be checking those out. Thank you!
Who wouldn't want to use their preferred language everywhere possible? 
Hey now, that's not true. Javascript is way better than it used to be. Browser implementation has largely normalized, it's got a robust package library that rivals nuget, and fills a niche that nothing else really touches. I'm really interested to see where blazor goes, but for now JS is the only game in town and very usable. 
The best programmers are troubleshooters. Troubleshooters will exhaust all tools at their disposal, wisely and carefully following their intuition. Avoiding the shotgun approach where appropriate to do so. Being honest, a lack of debugging skillsets are an automatic disqualification for anything other than a novice programmer. While jumping to the debugger too often and leaning on it for slow, iterative development isn't the best approach, complete ignorance of it is loads worse. I'd recommend taking a look at some courses offered by Lynda or the like. You'll find the debugging experience pretty similar across each version. Check out this one: [Visual Studio Essential Training: 06 Debug and Troubleshoot Code](https://www.lynda.com/Visual-Studio-tutorials/Visual-Studio-2015-Essentials-06-Debug-Troubleshoot-Code/433723-2.html?srchtrk=index%3a5%0alinktypeid%3a2%0aq%3adebug+visual+studio%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2) 
Thank you so much. I’ll definitely be checking these out too!
I mean, you can't really say it "fills a niche nothing else really touches" when people have been prohibited from using anything else for over two decades.
&gt; The NoSQL databases hold things like multiple versions of the same document, web session information, and the like. I find myself just using file/cloud storage for data that might otherwise fit NoSQL. It's faster, cheaper, more reliable and rarely is there some additional advantage to NoSQL for the use cases I seem to run into, anyway.
What does it do, exactly? Word-wrap strings for consoles, or does it support multiple columns/rows for formatting?
Columns, rows, header options, and footer options.
Slack's Mobile apps are built on top of Xamarin, which is C#
Nice, I've considered looking into something like that as an addition to my CLI parser.
well if you can't use loops all you can do is copy paste the same logic two more times
Then you will love this. My GitHub repo will be public in about 5 hours. Just adding in some last minute options for users. There is already a library out there but mine is half the code, 5 ms faster, optimized, provides more features, and is also a bit more modular which means adding new styles doesn’t require you, or I, to rewrite the code while the other competitor has his styling and formatting hardcoded in which also doesn’t display properly half the time. Mine also supports adding columns and rows as an array for more dynamic programming while the other guy makes you go through hoops to make it possible. Mine is more data driven, his uses heavy string manipulation and Linq making his code not very readable and difficult to understand what is going on. Not only that, his code jumps all over the place. I’m actually quite proud and pleased with my results.
I love the idea of Blazor and I've goofed around with it but sending DLLs to the user seems really silly. Does anyone know if they'll get around that when it's production ready?
What is the particular benefit to adopting NoSQL for web sessions vs using a database table for sessions? Just curious and trying to also figure out where NoSQL works better than relational.
If you've not done so already, take a look at unit testing too. i.e. verify in testing that values are what you expect them to be; so that if things change later, you'll know about it. 
I think it can be then made a nuget package then. AFAIK it's fairly simple.
I’ll look into it. Never made a nuget package before but I do love learning.
I've seen some tutorials, there was no obscure steps. And thank you in advance, I think you've done a great job!
Corba is an old technology with a couple of problems. Nowadays its all rest apis with micriservice architecture. 
This literally made me laugh for 5 minutes straight.
Lets agree to disagree
&gt; I love c# but it feels like dotnet people are literally just not willing to budge until they write it (and probably use visual studio only) in c# or it's dumb. &amp;#x200B; How is this any different than the "javascript people"? People have built tools to use Javascript for their server (node/express), the web (babel/webpack/vanilla JS), and mobile devices (react native). &amp;#x200B; What's wrong with me wanting to build my server in Asp Core, my front-end in Blazor and my native apps in Xamarin? &amp;#x200B; &amp;#x200B; &amp;#x200B;
It’s not a niche. It’s more like the great canyon. The amount of code that is today running in the browser is huge. And it would be great if we see a new player soon. 
Far from something that people really want. But it's a great start.
If you use a nullable boolean (bool?) you can have 3 states; Null prior to completion of first guess which then sets it to false, second completion sets it to true. Or use multiple switches to indicate which guess (isFirstComplete, isSecondComplete, isThirdComplete).
This isn't aimed at "the vast majority of developers", though, but rather at the .net people. Want to code in Ruby and JS? There's nothing stopping you. It's not like JS support will suddenly disappear from the browsers. Want to do it in .net? This will make your life easier. I'm not sure why your panties are in such a twist.
files in database?
.NET Standard 1.2 is extended in 1.6 which is extended by 2.0 DotNet Core 2.X implements .NET Standard 2.0 (1.0 up to 2.0) &amp;#x200B; from my own experience, reflection is not dramatically different. The way you load Assemblies is different though, since there are not more AppDomains.
If you're working with dynamic data that you have no control over and you need to be able to index and query that data on the fly. There are ways you can achieve that with a relational database but your life is going to be so much simpler with nosql.
&gt;where NoSQL works better than relational. in job requirements and cv, haha.
this would be incredible!
This is actually a pretty good alternative to the TreeView suggestion. Though it needs additional work for left padding / margin.
How can this be used in real-world web applications?
That's weird, because I use a dozen languages and Javascript is still one of my favorites.
That would be nice but at current stage forget it. Response time is a joke, size of the files is a joke. Most important, you can't directly affect the DOM, JS can.
from the replies, it seems there's no case to use Nosql ahead of relational database 
No. AWS S3, Azure Blob Storage, etc.
Manipulating strings is common scenario where this can be very beneficial. Instead of generating countless of short-lived string (with string.Substring), you can manipulate slices up until the moment you need to actually display it, at which point you will allocate the final string from the splice (or splices).
From your experience, were the dump questions actually on the exam you sat?
How is it silly sending DLLs to the client? Right now clients are importing tons of JS libraries when visiting SPAs or even conventional websites.
Hope it won't be Silverlight 2.0
Or a backend dev... hi
I'm with you. I've never had a problem with JS. I also don't see how having a compiled language for scripting makes sense.
Have you actually tried using something like blob storage as a 'database'? It's definitely not faster.
Hope the question explains what I am trying to achieve, otherwise ask away ;)
Just for fun, [I put together a small working demo](https://github.com/Ippo343/expander-demo). Of course there's no styling, but it seems like a good starting point to me. To be honest the TreeView approach is probably better, I was just curious to explore an alternative.
Silverlight was great
I'm a backend dev and I don't understand how that is possible.
Can confirm, it is slightly slow.
&gt;and has been for the past 5 years literally the opposite is the case, but yeah dude, go on :-D
I like Javascript too, especially with Node.js. But I won't mind having an alternate for front end scripting.
Che out Blazor ;)
The analogy was more about its ultimate demise :)
From a serializer I expect the ability to hit the pause button on the complete state of an object, private fields and all. I also expect, as much as is reasonable, no side effects from the deserialize action. To this end I would suggest you focus only on the fields of the objects - not the properties. Even auto implemented properties have backing fields that represent the actual memory storage, which you could access via reflection.
I'm rarely doing anything on strings that isn't guid.ToString() / date.ToString("format") or Path Combine. 
&gt; So in the serializer I'm working on the default setting so far was to only serialize public fields Since public fields are something we should generally avoid (we should use private fields and public properties), I would say this is definitely not the way to go. As for what is the correct way, the answer really is that it depends. If your serializer is intended mostly to be used for POCO types, just serializing public properties would be a good starting point. If you want it to be more general, which I think you do from looking at your github page, then serializing private fields, etc, would be important. &gt; Properties can (and often do have) side effects in their setters as well. Isn't the idea of serialization to be as unintrusive as possible? A deserialization causing side effects (unless explicitly intended) somehow doesn't sit that well with me If you can serialize all the private fields, it should, in theory, be possible to ignore properties completely. Question: is it possible, using reflection, to access the hidden backing fields that are created for auto-generated properties? I suspect it is possible but I'm not sure, I haven't tried it, but you'd need to check that, and as long as that works properly then I *think* that serializing all fields, including private fields, would do the job. But I'm going to have to think about it a lot more before I can say I'm sure of that.
[removed]
Silverlight was killed by Apple who refused to allow it on iOS in any form. That was the only thing that killed Silverlight. iOS already supports web assembly. Obviously Blazor needs more web assembly support, including things not standardized yet and Apple may block this but I somehow doubt it. Blazor will live or die on its own merits. There are some things that might make it fail. For example in recent .NET Rocks podcast they said compiled binaries are quite large so they prefer to interpret. That might be a serious problem that prevents good performance of Blazor apps. If Blazor is good and ships v1 nobody can stop it.
Good debugging tools are the most important things I'd say. I can't believe that so many people write in js, yet afaik it has no very good debugging tools.
Why? I never understood what people love about java-script so much? Sure anonymous functions are enormously useful, but the overall syntax of javascript is terrible in my opinion. There are a number of cool, and useful aspects of javascript, but since javascript has become so popular, many other languages have adopted these features. &amp;#x200B; What about javascript makes you want to use it over say perl, python or ruby?
I didn't watch it yet, but as I see there are databases on docker? You're brave.
You can run DB using Docker or not, there's really nothing to be brave about, it's just a sandbox for you process.
Yes, that is quite similar to how I see things as well (and pretty much what Ceras does!) In fact, I have used this exact idea previously to "force" serialization of some types (like ReadonlyCollection for example, [check it out here](https://github.com/rikimaru0345/Ceras/blob/6a34110a0e13ac0d1263c4c475e1bff56e0e01c1/src/Ceras/Config/TypeConfigDefaults.cs#L194-L206)). But generally doing serialization only by private fields (even including backing fields) is not possible because you'll get in a huge amount of trouble doing that. I've explored this quite a bit actually, check out this for example: https://github.com/rikimaru0345/Ceras/issues/11 Serializing private fields is all good and fine, but touching any `[CompilerGenerated]` stuff directly is a terrible idea (as illustrated in the issue :P). 
I'm not a massive fan of JS, but I use it when I have to. Pretty much every web browser has the ability to set breakpoints, step into, step over, watch variables, etc. Many IDEs also provide the same facilities and can link up with browsers so you use your regular IDE to debug the code while the code is running in the browser. Probably because I'm less proficient at web programming (not just JS, but CSS too), I find that I use the debugging tools that come built into browsers far more than I use the same tools when working in C#.
Would i copy and paste that in each of the 2 if statements where the player is wrong, so i copy of 4 more times or just twice?
&gt; Question: is it possible, using reflection, to access the hidden backing fields that are created for auto-generated properties? It's totally possible, yes. And it would be awesome if that would actually mean that we can just serialize all private fields and be done with it, but unfortunately that's not the case. First of all: Yes, Ceras can totally do that if you really want to. It's super flexible, it can even overwrite readonly fields, it can create objects without calling a constructor (not even the default ctor)... ## However... Serializing private fields is fine, but `[CompilerGenerated]` fields are pretty dangerous. No, not the fields themselves, but the fact that they're compiler generated. At first it looks like it's not a big deal (and for simple classes it isn't!). But there are two key parts that - when combined - really break everything: - You can **not** know the name of the backing field of a property. Yes, you can guess it, yes you can inspect how the compiler generates the name for auto-properties, sure. But what about assemblies that were created in VB? Or in F#? Or [in some other popular .net language???](https://en.wikipedia.org/wiki/Boo_(programming_language)) The name is different in every compiler... - Since you don't know the name of the backing fields with absolute certainty, you now can't know what's a auto-generated backing field and what isn't. So you try to serialize all private fields... [but that's a huuuuge mistake :P](https://github.com/rikimaru0345/Ceras/issues/11) Well, that turned out to be much longer than I intended at first :P 
Well Python is beautiful, so I wouldn't argue that one. But there's a lot going for Javascript too: * The developer tools are fantastic * Functions are a first-class citizen, and because functions are objects they're also easy to manipulate. * Objects can be interpreted as literals very easily. * Anonymous functions are useful as you mentioned, but they are even more powerful when used as closures or IIFEs. * JS is multi-paradigm and supports prototypal design, class-based, and event-based programming. * Web APIs already use JSON, which makes it very easy to import and use their data. * JS programs are easy to distribute. Loading a webpage is easier than running an exe, and much easier than downloading an interpreter (everyone already has a browser). * JS has tremendous library support via npm (and the standard library is getting pretty good too). * JS scripts are inherently open-source. They can be tweaked on the client-side to change their functionality. Javascript also has some blights ("this" keyword, default variable scoping, type equality), but I really enjoy working in the language.
About the file sizes, they said it will be reduced in the future by allowing unused classes/methods to be stripped out by the linker AND if you use a well know CDN, the .NET Runtime could be cached and the browser doesn't have to download it every time.
Yeah, I hope it work. Let's not forget about all those JS killers that no one even remember how they were called.
rust seems like a much better alternative
*^(Gollum, gollum)*
You've clearly looked into this far more than I have. So please take my comments to be nothing more than thought-provoking discussion-starters, and not answers! &gt; You can **not** know the name of the backing field of a property. No, you can't - but if you serialised *all* fields, it wouldn't matter. However..... &gt; So you try to serialize all private fields... but that's a huuuuge mistake I've skim-read the issue you linked to, and I'd agree that serializing Actions, etc, is going to get you into a world of hurt. So let's make a decision to rule those out for now. (Maybe we can come back to that later.) If we don't serialise fields of this type, then it follows that we also don't serialise properties which use those types as backing fields. A naive interpretation of this might be that we don't serialise properties which are Actions, etc. - I say "naive" because of course it's possible that an Int32 property uses an Action backing field, but at some point you have to draw the line and say "we don't support this".
I would prefer to serialize only what I explicitly tell it to. A contention I have with the built in serialization and newtonsoft.json. But, why exactly are you writing one when there are two capable solutions already?
Part of the answer to this is things like [XmlIgnoreAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlignoreattribute?view=netframework-4.7.2) and [JsonIgnoreAttribute](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonIgnoreAttribute.htm). By default, it's probably safe to serialize/deserialize any public field or property, but you'll need a mechanism for callers to identify exceptions, and likely will need to have some special cases for common types in the framework, like collections.
&gt; I would prefer to serialize only what I explicitly tell it to. A contention I have with the built in serialization and newtonsoft.json. That'd be dead simple with Ceras: ```csharp var config = new SerializerConfig(); config.DefaultTargets = TargetMember.None; ``` Then on your classes you'd just put the `[Include]` attribute on every field or property you want to have serialized. :) Alternatively you could use the `[MemberConfig]` attribute on your class or struct, which can make things a little easier. And for advanced use-cases you can always use `config.ConfigType&lt;MyClass&gt;()...`. &gt; But, why exactly are you writing one when there are two capable solutions already? There is no serializer that does all of the following things **at the same time**: - support for reference loops (like two `Person` objects having a `BestFriend` field, referring to each other) - extremely fast - ability to have version tolerance (robust against renaming, removing, adding members...) - no memory allocations (so little "GC-pressure") I only mentioned Json in my original post because I've looked at how it solved the problem I was describing. But as for using it for any projects... well, Json solves a very different problem than what I (and many others) need :D Newtonsoft.Json is very **very** slow compared to a binary-serializer. And the built-in binaryformatter has pretty much no settings or ways to customize it (and is surprisingly slow as well). Ceras can be [used as a networking protocol](https://www.rikidev.com/networking-with-ceras-part-1/) even. In high-performance scenarios (a game would be a perfect example), you'd run into problems with the other two mentioned serializers in no time... 
I've experienced and then read about fail stories with db in Docker. https://thehftguy.com/2017/02/23/docker-in-production-an-update/ https://thehftguy.com/2016/11/01/docker-in-production-an-history-of-failure/
Depending on the size: Just post a link here. I sometimes give my shit about random projects.
The flexibility has it's place, especially for smaller apps or quick prototypes. Typescript is nice and can make building larger apps a lot easier, but it requires a discipline to use correctly that most javascript developer lack IMO. Functional style javascript is very nice. First class support for functions, truthiness, and basic automatic type coersions are things that I miss when I move over to my c# projects. Ofcourse, when I move back to javascript I miss the static type/interface information and the tooling that allows.
&gt; No, you can't - but if you serialised all fields, it wouldn't matter. Naming of the private fields is an implementation detail. That **can** change between versions (tho it's unlikely). I wouldn't depend on such implementation details.
Please keep in mind, that it's been over 2-3 years ago and things have changed, yet again - infrastructural parts like databases, message bus etc. doesn't have to be run using containers - small &amp; stateless applications are the main scenario.
That's true but the blazor example loads many dlls (about 4mb). To start with that kind of weight is going to limit the use. Where in JS I believe something like webpack will try and only use what it needs. Right now Blazor sends the entire System.dll + System.Core.dll.
You can put on code review stack exchange - [https://codereview.stackexchange.com/](https://codereview.stackexchange.com/)
Hit me up, will do it for free.
Fucking morons of SO, I had my share of their stupidity too, seems you are better of just googling keywords, or goto https://github.com/quozd/awesome-dotnet and look in their WPF/Gui related links.
If they posted in a c# subreddit, wouldn't they know how to do Y?
At any point where you need to parse an uploaded file from a user. Just one example.
It's true Blazor still doesn't haves proper tree shaking but it's in their roadmap. Eventually it will only send the part of the libraries you are actually using in the code.
I'm also an oldie when it comes to programming....hell I've even used toggle switches. However, I do love using step into and breakpoints. 
Silverlight was a security nightmare. Like flash and activex etc. before it it eventually becomes to hard to keep patching.
Is that a code monkeys reference?
They have explicitly said that Blazor is not created to replace JS. And I don't think it ever will.
Yes, that's a good point. So - if we don't trust property setters to not have side effects, and we don't trust private fields to not have their name changed in future implementations, then how do we deserialise data reliably? It seems to me that we can't. So we have to assume that **either** setters can be trusted, **or** private fields won't change, and then choose a strategy accordingly. If a class doesn't follow our assumption, it can use an option on the serialiser to change the assumption. And if a class doesn't follow *either* of those rules, then it's physically impossilble to serialise and deserialise. So that just leaves one question - which of the two assumptions is most likely to be correct?
"This isn't part of my domain" doesn't necessarily make it a stupid pet trick. This kind of string/buffer manipulation is the bread and butter of I/O-heavy code. You can't do network or disk I/O without tons of annoying little arrays everywhere, and Span&lt;T&gt; lets one efficiently reuse and share them. It's also dang nice if your use case is "I parse data files in the GB and larger range", given that it's the same kind of I/O and proliferates the same ridiculous amount of buffer arrays along the way. It's good to know it's there in case you ever need to write something that can benefit. You don't have to study how it works until that day. It's sort of like knowing how to change a flat tire.
Must be! I wonder if OP is writing a god damn login page
DOM sopport is coming to WASM sand regardless it's fine in the meantime with a nice wrapper and low overhead. I can't speak for Blazor but in a framework benchmark rust WASM was just barely slower than raw JS at manipulating a 1000 row table
He's trying to do X, but his goal is actually to do Y. He think he found a way to solve his problem, so that's how he forms his question. A better way to ask is to state the actual problem.
It's on the bad days at work I just listen to that song on loop and feel lean into that while thinking about how my job "fulfills me in creative ways"
Really? Because the mess of node and npm doesn’t exist? 
Using setters is a decision of the person writing the class. If I use side-effects in the setter, then I want those to happen. The serializer should not try to circumvent that. It's a decision of the class author.
Nope. I've used a lot of other languages. JS is still my number 2(3 if you count typescript seperately). C# being the only one i like more
https://customers.microsoft.com/en-US/home?sq=&amp;ff=&amp;p=0
I mean. C# spends most of it's syntax time making garbage no one cares about and it isn't IMO much easier to read than JS. C# adds a lot of boilerplate for what ought to be simple tasks. JS for better or worse doesn't.
My only gripe about ExecuteQueryMultiple is that you have to do an Extract \*and\* a NextResult. Do you see lots of cases that you would want to do each operation separately? Would one operation to get a result and move to the next result be useful? Also, does NextResult return anything to indicate a success or "no more results"
how is that related to the language itself? it's hard to argue the language gotten worse post 2015.
I've been running some DBs inside docker containers and have yet to experience any issue. I've read the articles you linked in other comments, i don't know how docker was back in 2016 and yearly 2017 but i haven't had any issues with Debian 9 or Ubuntu 16.04/18.04. The author does give some good advice such as not storing data in the container (use volumes for that) but this part &gt;Once in a while, we look at which servers are dead and we force reboot them. currently is a dumb thing to do, It has been possible to say to a container to auto restart at least since early 2018 and even if the author means the docker service itself you can setup systemd (and probably init.d) to auto restart the service. If the server itself is "dead" the issue is probably not docker. Some tools have appeared that help with docker management as well.
Wow, IIRC Silverlight 1.0 could interact with the dom
It doesn't. 
Technically JS is compiled these days
Isn't the problem kinda that at this point, JS has turned far from a "scripting" language and might as well be compiled too. 
Hi, I'm a CodeReview regular and I'd like to give some tips to make sure your question won't be closed. 1. You need a fully functional piece of code 2. All the code up for review must be embedded in your posts. Links to GitHub repos will get the question closed. 3. Explain what your code is supposed to do 4. Find a representative title (so not "Plz review my c# code) If you think your code base is too big for it to be all in a post, consider putting a first module of your code in there and you'll just have to create more posts for other modules. It's a great community and people are really helpful. :)
Surely my second choice but it is a language that is harder to learn so it will be harder to hire people, let alone that the server ecosystem for Rust is not as mature as .NET
As someone who spends about 40% of my time doing code reviews I can tell you this without looking at it. It's shit and I totally would have built it in a different manner that is way better. Honestly just post it on here, chances are you'll get someone with some free time to look and give you some input. Side Note: The fact you're asking for this on your own accord makes me want to hire you. 
Bullshit.
Because that is what the language is now used for? 
Just post it, it could be interesting. 
If you had linked it here you might get a few free pointers. Not sure I'd count on and subreddit for that regularly, but occasionally sure.
&gt;Javascript is fine. null == undefined -&gt; true null &gt;= undefined -&gt; false What a beautiful and constant language.
Prohibited how? And from what? 
The article has a fairly common example. "I have a string, and I want to work with parts of the string." So anywhere you use `Split()` or `Substring()`, this helps you out. For small-scale applications the benefits aren't visible. For servers where you're paying by the second for CPU and memory usage, it's going to stack up.
I think the issue is that when you call `Cons_Paciente(iden)`, it's returning your View object to the original scope and then with `return View();`, you're completely ignoring that returned object. Try changing line 7 to `return Cons_Paciente(iden);`.
I don't disagree with any of that, really. I'm excited to see what comes of blazor as well as WASM in general. Javascript is definitely flawed for sure, but it isn't garbage anymore, and blanket statements like the one I responded too are definitely inaccurate.
Very confused why that was off topic as well.
IMHO, the only useful default is serializing all private fields, with exceptions on unsupported types like delegates, pointers, etc.. Serializing all public fields is useless on 99.99% of the code I've ever worked with. Serializing all public properties is useless on anything using readonly properties or private setters (depending on your definition of "public"), and subtly broken on types using some non-public properties or fields without corresponding properties. Either of these defaults either encourage the user to design their types in ways widely considered to be anti-patterns, don't work at all, or even worse appear to work and then cause hard to diagnose issues further down the road because some internal field wasn't initialized. At that point I'd rather require the user to always be specific about what should be serialized for every type.
You do not know, unfortunately. Javascript has some of the highest amount of tooling between interactive debuggers, live hot swapping of code, tons of static analysis etc. 
Prohibited because browsers by and large don’t implement other languages. IE had VBScript in its early days.
Npm isn't part of JS. You can and many devs do use alternative tools. .NET and nuget have their own issues. The only reason they don't get quite as ugly as npm is because they have a smaller community and are less accessible than nuget. In the time line where c# makes the webspace that attribute goes away.
Anyone that understands some tools are better for some task than other. Languages are tools. Loving a tool is weird.
Great points. I get the JavaScript-sucks meme and some of the hate is deserved but I think the language has come a long way and is headed in the right direction
[removed]
Wrong operator champ. 
Because SO is not for recommandations, it’s stated in the closed reason the question
Not exclusively, it's a part of the ecosystem that one is using when writing typescript react Vue angular etc. Without npm, modern websites would look different. 
Easy, be a dev week refuses to touch the front end. Source: My work has a front end dev and a back end dev that just horse trade problems if it's "not their part of the code". It's embarrassing IMO. 
I just feel like this was a bit subjective. He wasn't asking for a recommended library (aka - what is the best library for x) which causes all kinds of debate... he was asking for any option out there. That felt more exploratory, and less opinion based. I get that SO wants to prevent opinion based debates, but I don't feel like that is what OP was starting at all, and SO could provide good information there.
Doesn't Blazor have like crap performance. I don't see this being a thing for a long long time if it ever even does. 
Can look into it if you send me the link to your repo
Hey, I have that shirt. The back says "Make .NET great again"
Just store it as a heap.
NextResult() method returns the boolean values returned by DbDataReader.NextResult() method. There is a method called ExtractNext() where you do not need to call the NextResult() method explicitly. The difference is that, with NextResult() you are not committing the DbDataReader to be converted directly to a list of class objects (IEnumerable&lt;T&gt;). You can stream it as well by passing true to yielded argument.
We had to deploy it recently at work and we had to use a registry hack to allow it to run in ie. Which is ridiculous for a website haha
Generally if someone is serializing an object, they understand the pitfalls with getters/setters that don't directly map to a backing field. I personally like Newtonsoft's approach most, if it's public, try to serialize it, and if it's private, allow an option to serialize if explicitly set. Anyone who tries to serialize a complex non POCO object without realizing the associated issues has only themselves to blame.
They are heavily using this for XML and JSON parsers. You don't need to know it exists to benefit from it.
Just because I'm curious, why were you hesitant to embrace debugging? Debuggers have existed since the 70s, Lint being an example for debugging C, released in 1978. Even print debugging has been a practice used for a long time.
Span is very good when appropriate but I think the hype for it as applying to user applications is a bit overblown (it's mostly a tool for library developers and specific cases where optimization is needed). The vast majority of developers are mostly just working with passing around references and aren't hit with that copy by value cost in their code.
Yes, that is true, but this isn't an apples to oranges comparison. We aren't trying to saw a piece of wood with a hammer. Javascript and C# are the same type of tool, they are both saws. Just one is a hand saw and the other is an electric saw.
Hey sorry for the late reply! &gt; You've clearly looked into this far more than I have. So please take my comments to be nothing more than thought-provoking discussion-starters, and not answers! No worries, I'm really happy about any input and hearing other ideas/thoughts!! :) &gt; So let's make a decision to rule those out for now. (Maybe we can come back to that later.) If we don't serialise fields of this type, then it follows that we also don't serialise properties which use those types as backing fields. Yes, I've been there. Initially all delegates were banned. A little later I realized one special case (delegates to static-methods) that is *always* completely safe (in a "won't include unintended stuff" sense), so I added a setting for it. The same actually applies to instance-methods as well (so using the overload that takes the target object to bind to `Delegate.CreateDelegate(object, method)`). And yeah, the 3rd and final case is the "lambda" case; which is impossible to solve correctly in the general case. So that one is always banned with no option to turn it on. (Well, if someone really wanted to they could set `config.Advanced.SkipCompilerGeneratedFields = true;` and explicitly include the field manually) 
Damn near exclusively. And yes, they’d be better. JS is a cancer currently. 
&gt; Links to GitHub repos will get the question closed. They're always free to link to it, but only the posted code gets reviewed. Having the whole "app" can make it easier to start a review though, instead of needing to set up a bunch of stuff in VS.
No. They aren't. One is a dynamically typed, functional scripting tool the other is a statically typed, object orientated compiled language. Their architectures lend their benefits to very different tasks.
Yeah that's my thought as well. Almost all people do know what they're doing (the only exception being the beginners, but they'll learn) Also there are tons of ways to configure your types and many settings to help with those problems as well.
Yep you're right I didn't express myself correctly :)
Yeah, it gets the main Game object which contains all of the information about the game.
Newer at c#. Looking for freelance work. Willing to take odd jobs, but don't expect miracles. Just now gettimg comfortable coding for money. Asp, .net, and unity all fair game.
exactly, thank you :)
And the second line? &gt;== ?
Can you use recursion
Why would you ever expect null &gt;= undefined To equal true? 
As this seems like a beginner assignment (haven't learned loops yet) you are probably just expected to copy paste the code three times. The clever option is to recursively call main, but it would just be to show off.
Try it yourself! 
I did! It all worked! Thanks
I didn’t say anything against JavaScript. I just want an alternative after such a long time. 
I imagine that object should also have a method to get input. Otherwise, what they're asking from you isn't clear.
Even in browser? 
If you look into using a GroupBox \[ [GroupBox Class MSDN](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.groupbox?redirectedfrom=MSDN&amp;view=netframework-4.7.2) \] you could group the main categories. One can only be selected at once in that way, then you can ignore the disabling and checking of the 'other' side (house vs. condo). When someone clicks the buy button, that's where you can do the check of house vs. condo checked status, and gather the information accordingly. &amp;#x200B; The Property class is all kinds of special. Just because there is no real non-mathematical way of doing a lot of little bool checks. However, you can try to simplify it more. You could minimize the spread of the calculations by doing a simple calculation based on the bools before hand, then do the `list = &lt;some number&gt;` after wards in one step since they always have to calculate anyway. It's one way to do it. In the end, however, if your code is working you can always refine it afterwards. It really depends on the person grading it on how they 'want' the code to look. Because in the end, it is up to them on how you grade it. &amp;#x200B; Any programming sub is filled with people who give 'their opinions on how it should be done', but with school assignments, I think there are three important factors to take into consideration: 1. Hand it in Complete and On-Time 2. Make sure that the code functions the way it is supposed to 3. Ensure that the person who is grading it likes the code. Follow their coding practices so THEY find it easy to read. Do things your own way on your own projects, but their guidelines and coding practices they are teaching you are the way they expect assignments to be completed. So if it looks like something they would write, they are more inclined to think you paid attention in the classes to what they were teaching you and give you a higher mark. I'll do one section, see if you like it: if(House) { // Get The House Type Value float CalculatedHouseValue = 0.0f; if(HouseTypeSelection == 0) CalculatedHouseValue = townHouseValue; else if(HouseTypeSelection == 1) CalculatedHouseValue = semiDetachedValue; else if(HouseTypeSelection == 2) CalculatedHouseValue = detachedValue; // Room Value int CalculatedRoomValue = roomValue; if (TwoRooms) CalculatedRoomValue *= 2; else if(ThreeRooms) CalculatedRoomValue *= 3; else if(FourRooms) CalculatedRoomValue *= 4; // Bathroom Value float BathroomMultiplier = 1f; if (TwoAndHalfBath) BathroomMultiplier *= 1.5f; else if(TwoBaths) BathroomMultiplier *= 2f; else if(TowAndHalfBaths) BathroomMultiplier *= 2.5f; list = CalculatedHouseValue + CalculatedRoomValue + (bathRoomValue * BathroomMultiplier); } &amp;#x200B;
If you're referring to projects such as Node, I think it's a huge misuse of the language. JS is a front end scripting language for user side DOM manipulation. To use it for anything other than that is just foolish. But base JS when used for it's intended purpose does everything one could ask of it. 
If i'm not mistaken corba is a cross platform, cross language ipc framework? If yes, try grpc, microsft orleans, apache thrift. 
You might want to ask "how to do x" instead of "what library can I use to do x". 
Yes but it’s still against SO rules, they have to draw a line somewhere, you can disagree with where the line should be but it’s their site and they put the line there. Without the recommandation question and only asking how to implement something similar from scratch in a given UI Framework the question would surely have been allowed.
Jup, javascripts "instant gratification" feeling is probably why a lot of people became programmers. All a beginner need to get started is notepad and a browser. No compilers or build steps or command lines. No need for a UI framework or a drawing library to create graphics, one just need to learn HTML (and some basic css). And as one learns, one gradually add these. This is why I like javascript. But I prefer to work in stronger-typed languages. It fits better with how I think. I'm not good at memorizing, so in js I need to run short tests to check every assumption while I'm coding. I assume something returns a number, only to get a string. I assume a method returns null, but instead it retuns undefined, or zero. With typescript I only need to check it once; when I write the definition file. With c# i don't need to at all, the compiler tells me exactly what I might get back from a function (except what kind of exceptions i might get, unfortunately). *That* is a nice feeling to have.
Hit me up, I will do it for a $1!
It didn't work, i just run it and debug it. I entered the ConsPorId view an entered the string manually through a query in the url (ConsPorId?iden=1) and when debugging it, it showed that the string entered the method and through the return ConsPaciente(iden);. Then it went through the Cons\_Paciente method and it executed the return ( objPaciDB.Cons\_Paciente\_Espec(iden) ); but the view that came back was the same, the ConsPorId view.
Well, I actually did that in my SO post, but I don't really see what the difference between these two is. 
Yes there's a JIT compiler in most browsers as far as I know. I believe that's why you can get some small performance improvements with giving type hints in the source (something I was very surprised to hear about in ReasonML)
That is probably true and I also see the reason behind the off-topic tag. However, if there is a library, the answer would be "user lib x/y/z" anyway, so nothing really different. Anyhow, as it seems, there isn't one out there...
Yes definitely! I have support for attributes like that: https://github.com/rikimaru0345/Ceras/blob/master/src/Ceras/Attributes/CerasAttributes.cs#L14 As for collections, so far I have support for arrays, all `ICollection&lt;T&gt;`, ReadonlyCollection, and immutable collections. https://www.nuget.org/packages/Ceras.ImmutableCollections/ But I'm not entirely sure if that covers everything that people commonly use. I only realized I was missing support for ImmutableCollections after someone reported it.
Programmers love to tear apart code, i guess the trick is to get constructive criticism. However, if you put your code up on giyhub and linje it here youll get some free feedback. 
Would be better if you show your skills on your githubpage. Some projects and open source contributions. I think here is a regular post with jobs. Plus look at stackoverflow for jobs. But again, if you cannot show someone your skills it’s hard to get paid for them. 
I don't see how this supports your claims. Yes, Silverlight is deprecated so what?
Thanks! Working on building my profile out. I really appreciate the advice! 
It does because currently the Mono WASM runtime is just an IL interpreter, hopefully it gets enough attention to become a proper performant runtime in the future. Razor Components are actually quite fast in my experience so far though, granted it's not a model that caters towards certain use cases
Yes. Modern V8 has a compile step
`View()` is a constructor. The default constructor that has no parameters will take the name of the calling action, in this case `ConsPorId`, find the view with that name, render it, and serve it to the client. You can see all the overloads of the `View()` constructor [here](https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.controller.view?view=aspnet-mvc-5.2). So you need to save the model to a variable and pass it into the View constructor. Like [this](https://pastebin.com/333MvyHi). In this case it seems like you'll want to replace `YourViewName` with `Cons_Paciente` since it appears you have a view with that name. As long as that view has the correct model type of `IEnumerable&lt;Pacientes&gt;`, you should be able to access that data within the view.
None. There is no difference. It's just that one of these questions is more likely to be closed as off topic.
Go for it. We all started somewhere 
I would think that if you had an object that stored a list of parameters, you could make a datatemplate that does this. You would just have to save the file somewhere, perhaps a json with something like: JSON: { "Gradient1": { "Sections": [{ "start": 0.00, "end": 2.00, "colorFrom": "#FFFFFF", "colorTo": "#FFFF00", "alpha": 0.00 }, { "start": 0.00, "end": 2.00, "colorFrom": "#FFFFFF", "colorTo": "#FFFF00", "alpha": 0.00 } ] } } Class:public class Section public class SectionData { public double start { get; set; } public double end { get; set; } public string colorFrom { get; set; } public string colorTo { get; set; } public double alpha { get; set; } } public class Gradient { public List&lt;Section&gt; SectionData { get; set; } } public class GradientStorage { public Gradient GradientValues { get; set; } } &amp;#x200B;
great looking site, any tips on finding a good reviewer?
Oh ok. Prohibited is a strong word here. What you wanted to say was "there aren't really any alternatives" which is mostly true. For a good part of those decades, you could consider flash /actionscript an alternative to js, but not for a few years now. Hopefully WASM and projects like blazor will fix that. 
Radarr and Sonarr. Actually surprised me. 
This comment was a rollercoaster. 
I'll review it if you have a link but it might not be for another day or 2.
Sure, I agree with that. I was originally responding to the statement that the only people who like javascript are people who don't know any other languages. 
It was a security problem. It wouldn't run correctly without the registry hack. It's still completely possible to run silverlight and is still used more than it should be for enterprise applications.
I don't see how this is a security problem. Security problem is when something that shouldn't be allowed is allowed. That doesn't seem to be the case in your example.
&gt; Have you actually tried Yeah, my system serves over a billion requests a month, and makes at least that many requests to redis every day and to SQL and blob storage every week or so. Maybe AWS S3 is slower, it's been a few years since I've had anything of note on S3 and I didn't have as good of metrics in place back then. With small data, KV queries, and lightly loaded hosts redis, SQL, NoSQL, and blob are often equally fast. When the size of results grows, the gap widens, but the bigger advantages for blob related to speed are available scale and distribution of load. NoSQL can vary between providers, but SQL and Redis always require specific scaling actions. Instantly available scale and open overhead is order(s) of magnitude greater for storage with zero effort. The simplicity of utilizing HTTP caching on data stored in blob is also an advantage, and you're not going to find geo-redundant availability for anything near blob storage's cost.
I can tell by the way this was written that you started coding the UI first and the Property class afterwards. Try coding your 'model' first and keep UI related stuff out of it. Your UI-code should adjust itself to the 'model', not the other way around. Here's what I would change in your Property class: Don't make your backing fields public! Changing values from outside the class should be done through the property. Also, instead of using a property with a backing field that has no validation: public int amenitiesYesNo; public int AmenitiesYesNo { get { return amenitiesYesNo; } set { amenitiesYesNo = value; } } Use an auto property. I also changed the type and name to make the property more descriptive: public bool HasAmenities { get; set; } Instead of using magic numbers: public int houseTypeSelection; public int HouseTypeSelecion { get { return houseTypeSelection; } set { houseTypeSelection = value; } } Use an enum: public enum HouseType { TownHouse, SemiDetached, Detached, Condo } public HouseType TypeOfHouse { get; set; } Instead of this: public bool OneRoom { get { return oneRoom; } set { oneRoom = value; } } public bool TwoRooms { get { return twoRooms; } set { twoRooms = value; } } public bool ThreeRooms { get { return threeRooms; } set { threeRooms = value; } } public bool FourRooms { get { return fourRooms; } set { fourRooms = value; } } Do this: public int NumberOfRooms { get; set; } I'd do the same for the bathrooms: public decimal NumberOfBaths { get; set; } Your List-property isn't correct by the way. You keep appending strings instead of adding numbers. With the above changes you can rewrite it to this: public decimal ListingPrice { get { decimal value = 0; // Add the value of the house switch (TypeOfHouse) { case HouseType.TownHouse: value += townHouseValue; break; case HouseType.SemiDetached: value += semiDetachedValue; break; case HouseType.Detached: value += detachedValue; break; case HouseType.Condo: value += condoValue; break; default: throw new NotImplementedException($"Listing price is not implemented yet for houses of type '{TypeOfHouse}'."); } // Add the value of the rooms value += NumberOfRooms * roomValue; // Add the value of the bathrooms value += NumberOfBaths * bathRoomValue; return value; } }
Yea, just check their reviews. There are a lot of legit ones on there with a ton of experience, which is listed in their page along with peoples reviews. I really only had one guy who sorta over delivered, which sucked but the rest were really good. You can chat a little before starting a paid session which helps.
He had us at the first half not gonna lie.
Man, I would love to be able to put out my project somewhere and have people show me what I could do better. I'd *pay money* for that. Right now I'm doing ASP.NET Core 3.0 stuff but I can "make it work" but I have no idea if I'm doing things the "right" way or not. To have someone throw in comments and go "my dude, you need to do it like this... and..." would be wonderful. I'm hoping when I get it mostly working people will want to contribute one day. It's open source anyways (hardware/software inventory management stuff -- something I wish I would have had, for free, when I was green and in IT with a cheap manager).
It's disabled for security reasons. You have to explicitly go into to the registry and enable the feature that they locked down due to security concerns.
Looping would work (so you can learn using loops). If you are looking for a cleaner route, LINQ is your answer. :)
That could be a problem if this list grow a lot bigger, on worst case cenario, it would take o(n) to find the item. You can solve this with Dictionary&lt;int, Person&gt; where the first generic argument is the id. Dictionaries tend to take o(1) to find the item, where the key element has an unique hash. Or, if you must use List, and your id is sequential, you could use the index as an Id, and then, the deletion would not remove the item per se, but nullify it. 
I recommend supporting the `DataContract` and `DataMember` attributes. Most modern serializers honor these and it's what I've come to expect.
I highly suggest you pay someone. Because this way people will actually take this seriously and think and work things through. You can probably get some people to review small pieces of code ( &lt; 1000 LOC) for free, but your code has to work in a bigger project, so your reviewer should have that in mind. It's like posting one chapter of a book. Sure, you'll find people to read through 10 or 15 pages, but they won't catch inconsistencies in the overall story or characters of plot. &amp;#x200B; I'd offer my services for 8$/1000 LOC. I work on a middle-sized software for a logistics company and my colleagues and I review each others code constantly.
&gt; What if the property has a setter that relies on some field being set already? Then its a badly written class and you can't be expected to fix their mistakes. But there is the `DataMemberAttribute.Order` attribute when you should honor if set. So if someone does create a broken class, this will mitigate it. https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/data-member-order?view=netframework-4.7.2
Can you tell me two serializers that do this? (just so Im actually looking at the right ones). I'm not at all familiar with those attributes, but I will gladly take a look and implement support for those attributes. 
* DataContractSerializer (important for WCF) * That crappy JSON serializer that Microsoft made and no one uses anymore * Newtonsoft.JSON https://www.newtonsoft.com/json/help/html/DataContractAndDataMember.htm 
 Changing where (physically) the member will appear in the binary/byte array output is most likely impossible to do since I heavily rely on a custom order in Ceras. I could definitely change the order in which the members are SET when deserializing though, that should be easy as I'm reading all data into locals first, before then writing them to the members. That's the main intent behind the attribute right? 
Thanks!! I'll take a look and add that to my todo list. 
Let's do code review fridays
So this is my code: &amp;#x200B; public static void DeletePerson() { Console.Clear(); int num = 1; int person = 0; List&lt;int&gt; idNumberList = new List&lt;int&gt;(); int numOfPeople = peopleList.Count; foreach (object obj in peopleList) { var personFirstName = peopleList[person].firstName; var personLastName = peopleList[person].lastName; var personBirthYear = peopleList[person].birthYear; var personIDNumber = peopleList[person].idNumber; Console.WriteLine("{0}) Fisrt Name: " + personFirstName, num); Console.WriteLine(" Last Name: " + personLastName); Console.WriteLine(" Birth Year: " + personBirthYear); Console.WriteLine(" ID Number: " + personIDNumber); idNumberList.Add(personIDNumber); num++; person++; } Console.WriteLine("Please enter the ID number of the person you with to delete,"); Console.WriteLine("or type 'q' to go back to the main menu: "); string userInput = Console.ReadLine(); if (userInput == "q") { MainMenu(); } var isSelectionNumeric = int.TryParse(userInput, out int n); int convertedInput = Convert.ToInt32(userInput); int inputLength = userInput.Length; foreach (Object personObject in peopleList) { if (idNumberList.Contains(convertedInput)) { var personToDelete = peopleList.Single(d =&gt; d.idNumber == convertedInput); Console.WriteLine("Person with ID number: " + convertedInput + " will be deleted. Are you sure? Y/N"); string input = Console.ReadLine(); if (input == "y" || input == "Y") { peopleList.Remove(personToDelete); Console.Clear(); DeletePerson(); break; } else { DeletePerson(); break; } } else if (!idNumberList.Contains(convertedInput)) { Console.WriteLine("There was no person associated with that ID number. Please try again."); Console.ReadLine(); Console.Clear(); DeletePerson(); } } } It works so far. The only thing I had to find was the .Single(d =&gt; d.idNumber == convertedInput); I don't understand how that works really... &amp;#x200B;
Price may be too low. 1k lines of unfamiliar code would take at least 30-45 min to properly review at least. Worse if its terse and hard to follow.
Depends on the provider. For example, the DataContractSerializer requires that the XML stream have the fields in the same order as they are set. (This really pisses me off, because it means hand-edited XML silently broken.) *** As far as I'm concerned, if you honor `Order` for setting properties only objects, I couldn't care less what your wire format looks like.
COM is in more places in Windows than we care to imagine. UWP smells a lot like COM, too.
Might want to post it /r/learncsharp or /r/programming and /r/learnprogramming It think there you'd have a higher chance of finding someone who fits your description
Removed: Rule 1. Please use the monthly "Job Fair" sticky: https://www.reddit.com/r/csharp/comments/ar54k1/c_job_fair_february_2019/ (though this one is old and going away in 2 days. You want to wait until the March 16th sticky.) You can also try /r/ProgrammingBuddies.
This. But to add: If I blame myself, I need to be able to debug your library when I have 8 hours to figure out a bug before we decide whether we can proceed with a release because my code is wrong and I need to be able to clearly understand it's my fault, not yours.
This is very cool, but can someone explain to me *why* I would want to do this?
i want to build Desktop Applications with Html, Css and .NET Core
Not much of a reason except for a few niche case like if you have an existing wpf app that does heavy calculation and could benefit from intrinsics. Overall don’t really see the point
I attended a lecture at Ignite on converting existing web apps to .Net Core and man it sure seemed like a pain in the ass to do. If you don't need .Net Core functionality, I'd say there's no need.
Because to our bosses, "we're going to be upgrading our frameworks for the next two months to improve performance and maintainability" sounds better than "hey we really ain't got shit to do". 
First it allows you to use features that are only available core. It removes the need to install the various .Net frameworks. My understanding is core is generally faster but that may just be asp.net
Yes, many: [https://www.c-sharpcorner.com/article/type-of-methods-in-c-sharp/](https://www.c-sharpcorner.com/article/type-of-methods-in-c-sharp/)
This right here-- better touch controls, dealing with screen resolutions, but mostly shipping independently of installed frameworks.
It's to upscale the horizontal synergy with the cloud vector and create a massive vertical climb for the current sales model.
ОК. So what's the problem? Obviously it is not unsecure, the unsecure features are locked as they should be.
As I said it is quite common.
Your application will ship with .netcore. You'll get a performance increase and stuff like that. Basically netcore is the way of the future for Microsoft. 
XAML 
It's great for server software on any platform. You can now install server software by copying a directory of files. There are no dependencies on a specific OS-installed version of .NET. And it works on Windows, Linux and Mac OS. Might give Java a bit of well-needed competition. Both Java and C# will benefit from this.
&gt; My understanding is core is generally faster but that may just be asp.net It's not just ASP.NET. For example, [this article](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core/) lists perf improvements in .Net Core to some basic types like `List&lt;T&gt;`. Those are applicable to desktop applications too and I think they were not ported to .Net Framework.
One could use CoreRt and have standalone native apps i guess? No need for any dotnet runtime installed. 
Going forward, .Net Framework is not going to change much. That means it's fine if you continue using it for applications that are in maintenance mode, but I would seriously consider porting any actively developed apps to .Net Core 3.0. At the same time, I would probably wait until some time after it's been released.
Yes, it's rather cheap, but I don't want to charge people too much for their hobbies. 
Saw this post, and thought I'd make [this post](https://www.reddit.com/r/csharp/comments/auyrt6/can_i_buy_a_code_review/) about code reviews. Now I know https://codereview.stackexchange.com/ exists!
&gt; but mostly shipping independently of installed frameworks. Assuming your customer base is using Windows - You do realize that Windows installations these days comes pre-installed with the .NET Framework?
Something like [Electron.NET](https://github.com/ElectronNET/Electron.NET)? (I haven't actually used it, so I can't attest if it's any good.)
Fantastic! I'm subbed to this daily code challenge thing. I'll put up my more creative and complicated challenge results from time to time since my pet projects don't fit your guidelines. Thoughts? Thank you very much for answering!
We found, in our particular case, that the in-memory NoSQL database was faster at retrieving the session data. Additionally, our SQL servers are quite busy anyway and trying to use them for session data as well would have probably overburdened them.
If it's easy, you should. It's not going to be easy for a lot of the people that probably need to move the most. .NET Core performs better from top to bottom. It's where MS is spending their time on development right now. The "old" .NET Framework has dwindling support. The hanging sword in that scenario is always, "Which Windows update is going to be the one that drops support?" But I mean, if you feel like you can't or it's not worth the effort, it's MS's job to convince you otherwise. I spent a long time trying to get VB6 people to move to .NET. All of their apps still work on Windows 15+ years later. It seems like it always feels like MS is one step away from pulling the plug on older tech. The only things I've ever seen them pull the plug on is *new* tech like Silverlight. One could almost argue, due to the widespread mission-critical deployments involved, that MS must ethically support "old" .NET Framework forever. If your app is really complex, and especially if it depends on third-party libraries that aren't .NET Core compatible, you can't make this jump no matter how many neat tools MS writes to tell you they're incompatible. You can't "just" refactor away your dependency on a piece of $100k factory equipment from a defunct vendor. If you don't plan on maintaining your app more than about 2 years, the conversation's pretty moot, too. I'd start new projects in .NET Core if possible at this point. Especially since WinForms/WPF are compatible that's just smart.
Haha! Woo! I don't mind people ripping my stuff apart. My pride takes a beating, but it's better than being grilled over a shit update, or being forwarded reports of users suffering data loss or frustration.
Shmabey.
C# 8 is my reason
Nah, I've found that asking reddit\\forums directly for free services or specifics isn't too successful. Since it's my career, I'd rather find something more reliable and be willing pay.
Is the tooling for dotnet core really on par with netfx to fully shift over?
Why? I can't think of any UI framework more painful that HTML to use except MFC.
Holy shit. This is awesome. I go through books, udacity, pluralsight and stuff. But nothing really compares to a thinking meatbag pointing stuff out. And this service is that on tap. Thank you!
Nah, I'm not looking for a review here, I'm looking for \*where\* I can get reviews in future reliably.
Honestly, I'm not interested in this until we have the ability to compile an application into a single file. My biggest problem with WPF is distribution, not performance.
I just found my way here after asking for a code review. Trying out some MVVM with C# and wpf. Nice and easy. But just wanted somebody to check it’s a decent implementation. I’m a C/C++ guy professionally see. So having a C# type have a look would help loads. Make sure I’ve handled data binding the way you’d expect and all that stuff. 
&gt; I highly suggest you pay someone &amp;#x200B; I agree. See post title.
I'm guessing he left off a 0.
No, but you may find it to be good enough. ASP.NET Core is to that point (if you don't care about EF designers).
Yeah, that epiphany moment when someone shows you something you didnt know exist. Or vice versa.
Cheers buddy! 
Neither will .net core as WPF hasn’t been changing much, if there’s no new WPF features why would you care about being on core, it’s already mature as is. I don’t think it made much sense to port WPF to it to begin with without porting it to other platforms
yes, you're right. My reply was meant for all the people that suggested posting it on stackexchange or some other site for free.
Which has been replaced by .NET Core (aka .NET Framework 5).
Yea. I work with a guy who absolutely murdered me in code reviews for a long time. He's honestly the most intelligent programmer I've ever worked with and it made me a much better coder. 
Fair enough. 
I'm not aware of Unity being built with .NET. I was under the impression that it was a C++ app. Maybe it's part C# by this point? Bing is running on [ASP.NET](https://ASP.NET) Core (something), I believe.
&gt; Prohibited is a strong word here. Sure, but it's effectively true. You're not allowed, as a developer, to write code in, say, Ruby, that runs in the browser. The technical reasons for this area sort of secondary. In the long run, WebAssembly will fix that. &gt; What you wanted to say I'm not GP, actually.
You don't need to install .net core runtime. There's standalone deployment available through dotnet publish. Soon there also might be self contained aka single binary standalone deployment.
Venkat's 102-part C# tutorial series is absolutely fantastic: [https://www.youtube.com/playlist?list=PLAC325451207E3105](https://www.youtube.com/playlist?list=PLAC325451207E3105) I'm sure you will find it to be very helpful.
It's far better for most corners but lacking some major features here and there (namely a full static source analysis)
How about for WPF?
I'm not quite grasping the point of this post tbh.
You don't need to understand OOP in this moment. OOP is about complexity handling. Only when you start to suffer your own over-complexity decisions, its when you turn to view OOP paradigm (a lot of senior devs never understand this). You need to build small methods with a single responsability and a single concern. &amp;#x200B; A lot OOP courses talk about classes as the basic unit of programming on this paradigm. That is wrong, the true basic unit its the method. Solid methods make solid programs. Write good and clean methods!. &amp;#x200B; Eventually you will see patterns on your methods, a method with a lot of arguments?, you can refactorize and create an argument class. Similar executions on switch/case block, they could convert on polimorphism case.
It's against the rules. Plain and simple. 
Well that kinda doesn't count yet... At least in my book. NET Core 3.0 isn't even RC yet so the tooling obviously isn't 100% there yet.
The base library is certainly being improved, so if you want to use any of the new APIs, you'll have to switch. As for WPF itself, I wouldn't expect anything new in .Net Core 3.0. Beyond that, I have no idea what Microsoft's plans are. But I wouldn't be surprised if at least the community went on to improve some small annoyances.
Have you tried the nuget package costura.fody? I've used it for that exact purpose and it's worked pretty well. e: unless you mean to have that ability in core not framework, in which case nevermind 
Core is supposed to have the ability to compile to a single EXE... eventually. But if you are saying that I can have that now with .NET Framework I'll take it. 
Static source code analysis is there, just well hidden. It doesn't use the normal UI. There's a NuGet package that enables it, but I don't remember the name off the top of my head. 
Yes, costura.fody is what i search nuget for. You gotta make sure a certain file is in your project folder, and then when you build you get 1 exe, 1 pdb, 1 .config, and a bunch of xml files. You only need to distribute the exe, unless you use certain application settings that are stored in the .config, in which case you just include that 2nd file. I deploy/maintain dozens of .net apps for my job and it's great to only need the exe.
It's a great idea. I really recommend checking out some of the well voted questions to see the successful question format but I think it's a great idea
Here are two options for single executables with Core: [Warp](https://github.com/dgiagio/warp) and [BoxedApp](https://www.boxedapp.com/boxedapppacker/usecases/pack_dotnet_core_into_single_exe.html)
Sounds great. Thank you.
Neither can the OP I fear.
I wonder how much of Windows (like windows 10) is buitl with C# certainly most of the new apps are I think. They use UWP for the most part. like calculator, etc
Standardizing, I'd guess. Like how Discord builds their site and desktop app on Node/Electron.
DNC isn't shipped with Windows, like the full framework is. And DNC was intentionally made to be incompatible with previous versions.
And here I am thinking I'd never get to review code on codementor. Maybe I should actually pursue that...
I loved the Scott Allen course, but I had been brute forcing myself to churn out programs for a contractor, whom seemed pleased with my work (bless their hearts) at the time. So there was a lot of floundering in the water and getting a feel for how it *should* work, I was just a bad swimmer. I remember watching it thinking that if I had JUST been thrown into Csharp, many assumptions would still be missing. For me, it was just right. Enough knowledge to follow along, not enough to be bored. I've honestly not yet stumbled across a resource that teaches it well to someone that hasn't at least, as I did, jumped in with fists clenched and wishing you had a prehensile tail. I have no idea what that means. But it sounds appropriate. 
We do that already. The application business logic is written in C# as a WinForms project. The UI is written in HTML and hosted in the application through a Cef control. The two communicate over a WebSocket.
I know. I was simply pointing out that that specific benefit of using DNC on a Windows-based system is non-valid.
&gt; replaced by .NET Core (aka .NET Framework 5) They're actually independent. .NET Core is a cross-platform fork of the .NET Framework. It was never meant to replace it. .NET Framework 4.8 is coming with VS2019, and .NET 5 will come after that, whilst the .NET Core versions continue to be developed.
&gt; JS scripts are inherently open-source. They can be tweaked on the client-side to change their functionality. This is completely wrong though.
Not at all. Look into Local Overrides.
That still doesn't make the javascript anything like Open Source. Minified crap is just proprietary software.
Why are you being down voted? You are absolutely correct! Windows 10 comes with .Net Framework 4.5 by default (or maybe it's 4.7 now). Windows 7 is 4.0 by default (used to be 3.5). .Net Framework, per Microsoft, is not going away or bring replaced. They never said 4.8 is the last version either. It takes simple googling to see the news posted by Google. The ".net framework is going away" circlejerk on this Reddit is nuts. No one actually does ANY research and seems to base all their .net knowledge based on what they read on this subreddit alone in some kind of ridiculous game of telephone.
Incorrect.
You don't *need* to install various frameworks. Have you actually look into it?
All you listed is not an issue with .net framework however... WPF has touch controls and dpi. What .net core 3.0 brings (at this point only) is the ability to bundle your runtime environment. If you require .net core to be installed as a runtime by your user then they have .net core and .net framework both on Windows (talking just windows here since UI is what's being talked about. Mac/Linux isn't getting any UI)
https://devblogs.microsoft.com/dotnet/update-on-net-core-3-0-and-net-framework-4-8/
https://devblogs.microsoft.com/dotnet/update-on-net-core-3-0-and-net-framework-4-8/
That doesn't change the fact that the browser accepts direct Javascript. Not bytecode, nor machine language, but straight source code. You can minify, obfuscate, and generally mangle the source to your heart's content but it's still an *inherently open* language. That makes it hackable, which was the entirety of my point above.
.NET Framework 5 will never happen, and Core is absolutely the replacement in the long run. There are already features .NET Framework isn’t getting, including some in C# 8, and an increasing amount of runtime improvements.
Nothing in there contradicts it.
\&gt; This means that .NET Core will get new APIs and language features over time that .NET Framework cannot. [At Build I did a demo](https://channel9.msdn.com/Events/Build/2018/BRK2100) showing how the file APIs were faster on .NET Core. If we put those same changes into .NET Framework we could break existing applications, and we don’t want to do that. &amp;#x200B; it is the end, its only for legacy and old people now
Only if you can rely on all your customers to be on the framework you’re targeting (good luck with that).
Great. When will all runtime improvements come to .NET Framework? When will all C# 8 features come to .NET Framework? Probably never, because 1) iterating the runtime has proven hard, and 2) it makes little business sense when they have a better alternative.
That is correct on performance. But it does not say ".net framework will not get new APIs and Language features". It's important not to say that someone has said something, simply because you want to believe it. Microsoft very well can/could release .Net Framework 5.0 or never get passed 4.8.12345. It's OK to forecast! It's wrong for all these people who keep saying this information like it's fact to people who seriously don't know.
I straight up says .net core isn't replacing .net framework. And calling core essentially .net Framework 5 is just the users opinion.
You're probably right. Probably. But it isn't absolute fact.
also worth reading: https://visualstudiomagazine.com/articles/2018/10/10/net-keynote.aspx &gt; "We will continue to update the .NET Framework, but you'll see it slowing down," Massi said, noting developers primarily will see new security protocols or critical Windows features they can take advantage of, along with bug fixes and other things that maintain a very high compatibility bar so things don't get broken. - &gt; "So you shouldn't feel pressured to move off .NET Framework, but just know that it's going to be much more highly targeted compatible fixes kind of going forward and we recommend that all new development that you start on .NET is on .NET Core if possible," Massi said, noting that because Microsoft has very large product lines written on .NET Framework it's not going away. 
&gt; It straight up says .net core isn’t replacing .net framework. It isn’t, but it puts Fx in maintenance mode. It just doesn’t make sense for Microsoft to evolve both. They’ve learned lessons from Fx and Mono/Xamarin, and will eventually converge on Core. But they’ll continue to support add for a long time, because there’s a ton of legacy software out there (especially LOB). &gt; And calling core essentially .net Framework 5 is just the users opinion. Right. I don’t see a Fx 5.0 happening, though. Probably a few more minor releases instead; likely, we’ll end up with a 4.9, .10, .11, … at some point.
&gt; My understanding is core is generally faster but that may just be asp.net Its current got an issue showing the code samples, but examples of how [Core 2.0 is faster than Framework](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core/) in the base class libraries; and the a follow up [showing how Core 2.1 is faster than Core 2.0](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-2-1/)
https://learncs.org/
&gt; But it does not say “.net framework will not get new APIs and Language features”. It only gets the ones worth adding. In particular, they basically don’t want to touch the runtime any more, which rules out various performance improvements and also certain language features. &gt; It’s wrong for all these people who keep saying this information like it’s fact to people who seriously don’t know. You’re clinging to a misguided notion here. Fx isn’t quite in life support yet, but not that far away. Look at features in C# 8; half of them won’t work in Fx.
No, Microsoft has made it clear that the future of .Net Framework releases will be focused on what would usually be called support items. The truth is .Net Framework is going into legacy mode, and all the new development will be in .Net Core.
Dude, this is amazing. The only thing I'm confused with is how I would call everything to my form class without the overload? Also, how would I change the value of // Add the value of the rooms value += NumberOfRooms * roomValue; // Add the value of the bathrooms value += NumberOfBathrooms * bathRoomValue; this based on what Radio Buttons are selected? I'm sorry, I'm still having trouble grasping this concept.
Thanks, i am going to add that
Dude what is your deal, you seem to have attachment issues
In other words - "we're gonna do the absolute minimum possible to .NET Framework so that essentially it is virtually dead but we'll never say it's dead, but *wink wink* it's dead. But not really, cuz we never said it... but it is... except it's not. You know what we mean."
&gt;It's important not to say that someone has said something, simply because you want to believe it. It's also important to acknowledge which way the wind is blowing. The future is clearly .Net Core and it is just better. Whether .Net Framework gets future updates shouldn't matter to anyone.
I'm actually working in .net core. But people are getting super confused on this subject. It needs to be clear and not people blowing smoke.
Great post! Thanks.
[https://www.hanselman.com/blog/BrainstormingCreatingASmallSingleSelfcontainedExecutableOutOfANETCoreApplication.aspx](https://www.hanselman.com/blog/BrainstormingCreatingASmallSingleSelfcontainedExecutableOutOfANETCoreApplication.aspx)
It's pretty clear.. you are the one muddying the waters.. I don't think anyone thinks .net framework is going away.. Considering we still have all the ancient Windows API's still today... But it is definitely legacy
The feature I've so far only seen in JavaScript is object destructuring. const { name } = student; console.log(`Hello ${name}`); It makes it super simple to extract information from objects and build functions. I really wish python had something like that.
&gt; You can minify, obfuscate, and generally mangle the source to your heart's content but it's still an inherently open language No.
I see people telling others on here, daily. After seeing it again in today's .net core 3 thread I figured it needs to be posted as enough people here clearly don't know.
Removed: Rule 4.
Roslyn analyzers are there by far the better tooling but the amount of analyzer compared to full framework analyzers just isn't there yet.
Look into flurl library its free, and built for api https://flurl.io
I truly do not understand why some people refuse to accept that .NET Core is the future. It’s just how it goes. Microsoft have a relaxed a newer, better version of .NET that is becoming more and more feature complete. They have also said that the legacy framework will mostly just be receiving security updates and they recommend that any new projects are built using core. How are you still believing that Core isn’t where we need to go in the future?
Never mind that `NaN &lt;= NaN` has no business evaluating to true, guess all languages supporting good old IEEE 754 are fucked up.
I except it to throw an exception instead of breaking inequality properties. If something can't be ordered the comparison should fail instead of yielding inconsistent results.
Here’s how I’m going to port my native framework apps to core....I’m not. 
I've heard good things about it but his mic quality is terrible. It makes me feel weird and I can't understand what he's saying. Is it so good it's worth pushing through that?
You’re going to get downvoted here. For whatever reason there is this huge hardon in this sub for core, even though migration to it often doesn’t make sense. I feel like half the developers on Reddit are either CS students or head down developers with no understanding of the monetary impacts of conversions like this on a business. If it’s stable and meeting the needs of the client, you don’t touch it! If conversion makes sense because of growth or it saves money, then go for it! People need to stop acting like the only option is to do everything in core. 
Do people not believe it's the future? I think the confusion is about the future of Fx. I would assume Microsoft really wants to make sure existing customers aren't worried, and don't curse Microsoft for forcing them to port over when they didn't have to. If you don't feel the need to move off it, then don't.
I agree. In my experience though I am definitely coming across people who seem to think of the two platforms as having equal futures. So they’re still expecting plenty of new features to come to the legacy framework etc. 
&gt; I don't run into people outside Reddit who think this. Maybe these redditors are Java devs trying to spread confusion and fear.
apiKey = $('#apiKey').val(); authCode = $('#authCode').val(); var url = "https://api.ecobee.com/token" var data = "grant_type=ecobeePin&amp;code=".concat(authCode).concat("&amp;client_id=").concat(apiKey); $.post(url, data, function(resp) { var response = JSON.stringify(resp, null, 4); $('#tokenResponse').html(response); }, 'json'); create a class/model that has properties of public string grant_type {get;set;} public string code {get;set;} public string client_id {get;set;} create a new instance of this model and pass in the necessary values for the parameters. then send in your http post request 
Same here. My work currently mostly uses Java and some Frankenstein's monster-esque JSP. It's something alright. Thankfully I'm allowed to suggest different languages for future applications. I do so miss my cosy .NET
Yeah.
I guess could see that. I think if you were looking to build a desktop app for Windows (or have an existing one) it was unclear. Only UWPs ran netcore and there are plenty of legitimate reasons to not switch to UWP. But maybe if you're using .net for web development then it would be more obvious? Idk I'm just speculating at that point.
I think you’re absolutely right. I’m primarily develop web apps so yes perhaps it’s more obvious to me and my team!
Well there ya go! :) Yeah I think the future is pretty clear (and exciting imo!). Netcore3 hasn't officially released yet so I think it will just take a bit of time.
&gt; “Microsoft said 4.8 was the final one” Not that unlikely. &gt; “.net core is replacing .net framework” Depends on what replacing means. As the future platform for new projects? Yes, absolutely that’s what’s happening. &gt; It’s a common misconception on this subreddit. No, it’s a reading of the situation that you disagree with, perhaps because you are uncomfortable with it.
What’s there to fear? This is better than ever. .NET Core moves at a much faster pace than Fx ever did. It’s more open than Fx ever was. It runs on three platforms, much like Mono, so it will eventually be able to succeed that. And in more and more areas, it’s already a better version of .NET than Fx. Why would someone fear this?
Did I not say it's the future? I am doing all my new projects that arnt UI based (because my job strictly prohibits using an unofficial released .net core 3.0 in production) in .net core. Once I can, I will. However, the excitement is getting ahead of facts. People are getting confused and telling others on Reddit that .net framework is EOL, which it isn't. From an enterprise standpoint, which is where I am, .net framework isn't going anywhere anytime soon and it's actually tougher to get customers (not apps or websites) to get excited over something shiny and new.
Which obviously they are also incorrect. If people just read, rather than assume, there wouldn't be people on two extremes blasting false information.
&gt; Properties can (and often do have) side effects in their setters as well. Isn’t the idea of serialization to be as unintrusive as possible? Sure, but if I ask you to serialize my class, I can reasonably be expected to take care to avoid such side effects.
From where I come from, I do enterprise embedded "desktop" apps. So my mind is seldom on web where I often can't go. I come across all sorts of comments on Reddit saying to other desktop developers "dont use WPF, use .net core! You're on a dead end road!", And they get confused and start trying to figure out how to put a winform .net core 2.2 application on Windows 10 IoT for a payment terminal only to quickly find that's impossible. Which leads to my other annoyance. Dotnet is not a replacement word for ASP.Net. I think 90% of the confusion comes from new web developers not knowing that desktop apps are still required, relevant, and that .net core currently only addresses console and web.
Oh no... Why? I'd rather see non-Core DotNet dead like the JVM.
On the contrary, &gt; .NET Core is the open source, cross-platform, and fast-moving version of .NET. Because of its side-by-side nature it can take changes that we can’t risk applying back to .NET Framework. This means that .NET Core will get new APIs and language features over time that .NET Framework cannot. .NET Framework is now on support and 4.8 will be the last one. Sadly Microsoft cleverly did not migrate comments to the new blog engine, otherwise you would be able to read exactly this.
It is definitely ending but 4.8 isn't the end. The framework will be around a lot longer even after they stop updates. A lot of legacy systems run on the framework in government and financial sectors. But it will eventually be unsupported and if the opportunity arises to move a project to core without too many complications, then that opportunity should be taken.
Yeah, you're likely right. It *could* be the final one. It is replacing it, as people adapt, over time. But that's all based on how we feel about it. Not because it was announced or said by any official party. As a .net core developer and .net framework developer waiting for .net core 3 to release so I can officially use it in production in an enterprise environment, I am not uncomfortable. What does make me unconditionally annoyed is people telling others they need to switch based on their own feelings. .net core currently is for console and web. That's it. Which is another common misconception around here is everyone assumes you can or should build a website regardless of your project requirements. 
Yes they did, it was on the comment thread of that blog post. But they did not migrate the comments, so what we have left is the statement that .NET Framework will never get the .NET Core improvements nor C# 8 features like default methods in interfaces. &gt; .NET Core is the open source, cross-platform, and fast-moving version of .NET. Because of its side-by-side nature it can take changes that we can’t risk applying back to .NET Framework. This means that .NET Core will get new APIs and language features over time that *.NET Framework cannot.* 
&gt; .NET Core is the open source, cross-platform, and fast-moving version of .NET. Because of its side-by-side nature it can take changes that we can’t risk applying back to .NET Framework. This means that .NET Core will get new APIs and language features over time that **.NET Framework cannot**. 
&gt; .NET Core is the open source, cross-platform, and fast-moving version of .NET. Because of its side-by-side nature it can take changes that we can’t risk applying back to .NET Framework. This means that .NET Core will get new APIs and language features over time that **.NET Framework cannot**. 
It would help to read the stuff you post. &gt; .NET Core is the open source, cross-platform, and fast-moving version of .NET. Because of its side-by-side nature it can take changes that we can’t risk applying back to .NET Framework. This means that .NET Core will get new APIs and language features over time that **.NET Framework cannot**. 
Sure it does, on the link posted on this thread. &gt; .NET Core is the open source, cross-platform, and fast-moving version of .NET. Because of its side-by-side nature it can take changes that we can’t risk applying back to .NET Framework. This means that .NET Core will get new APIs and language features over time that **.NET Framework cannot**. And confirmed on the comments, which Microsoft did not migrate into the new blog engine.
The string is not meant to be sent as JSON, it's using url-form syntax. Instead of `await client.PostAsJsonAsync("token", model)`, try this: ``` var res = await client.PostAsync("token", new StringContent(data)); ``` As a side note: It's not recommended to dispose `HttpClient` (or use it in a `using` block). It makes it slower to use.
&gt; Sure it does, on the link posted on this thread. Very selective reading comprehension.
can you expand more on the " **new StringContent(data)** " so OP understands how to implement it.
&gt; Given these updates, we’re hearing a few common questions, such as “What does this mean for the future of .NET Framework?” and “Do I have to move off .NET Framework to remain supported?” While we’ll provide detailed answers below,** the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace.**
 (copied my comment from the same post in r/dotnet, that was deleted for some reasons) Not immediately, but as more and more applications either move to .Net Core or new one are being made, it will become the legacy component and eventually fade into oblivion (whether that takes a few years or a decade has yet to be shown). If you start a new app, you have almost no reasons to use .Net framework, because of the limitations presented in the blog post: * new features mostly going into .Net Core (both language and library) * slower file system access on .Net Framework * less frequent fixes on .Net framework (for the reasons mentioned in the blog post) * risky security updates on .Net framework (idem) So maybe it is too early to "spread" that .Net Core is replacing .Net Framework, but it is definitely going in that direction.
&gt; Given these updates, we’re hearing a few common questions, such as “What does this mean for the future of .NET Framework?” and “Do I have to move off .NET Framework to remain supported?” While we’ll provide detailed answers below, **the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace.**
&gt; Given these updates, we’re hearing a few common questions, such as “What does this mean for the future of .NET Framework?” and “Do I have to move off .NET Framework to remain supported?” While we’ll provide detailed answers below, **the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace.**
&gt; Given these updates, we’re hearing a few common questions, such as “What does this mean for the future of .NET Framework?” and “Do I have to move off .NET Framework to remain supported?” While we’ll provide detailed answers below, **the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace.**
&gt; You do realize that Windows installations these days comes pre-installed with the .NET Framework? Oh yeah, please tell me, which version? You can't rely on a Windows system having .NET 4.7 installed.
It would help if you read the stuff I post. &gt; Given these updates, we’re hearing a few common questions, such as “What does this mean for the future of .NET Framework?” and “Do I have to move off .NET Framework to remain supported?” While we’ll provide detailed answers below, **the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace.**
Not sure why it was deleted... :/ But as I said there, I agree. I just think it's important to not say Microsoft said something they didn't and spread it like it's fact. One thing I eagerly await for is .net core 3. In my field, web is not an option 90% of the time. I'll be forced to live in .net framework for quite a while.
&gt; Given these updates, we’re hearing a few common questions, such as “What does this mean for the future of .NET Framework?” and “Do I have to move off .NET Framework to remain supported?” While we’ll provide detailed answers below, **the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace.** You're on a roll here friend.
Absolutely
The JVM is very unfortunately not dead.
I need to know what I need to put in in a inherited button class which can be added to both forms 
I don't looking for job and I don't hire. I just looking for companion to talk.
it's a good idea, thanks
It is a dead framework, it ceased to be, it is an ex framework! /s
[removed]
It's just sleeping.
I remember these kinds of articles about the demise of silverlight https://www.grapecity.com/en/blogs/silverlight-aint-dead-yet-folks Infopath, And posts in 2015 abut the windows phone not being dead. ... and technically silverlight is supported until 2021, but one would still be foolish to start a new project with it...
The new version of Windows they started testing for 2020? I promise you it's a version of Windows built on the Linux kernel. 
The most beautiful thing would be that we can port a Wpf or Windows forms application to Mac os.
Windows 10 April 2018 Update (all editions) includes the .NET Framework 4.7.2 as an OS component, and it is installed by default. Later updates will include later version. Unless you absulutely require bleeding-edge .NET tech, you should be fine.
Windows 10 April 2018 Update (all editions) includes the .NET Framework 4.7.2 as an OS component, and it is installed by default. So yea - You actually can (Assuming you have a client that has Windows Updates enabled since they don't want themselves hacked to shite ;p)
&gt; .NET Framework 5 will never happen, and Core is absolutely the replacement in the long run. We shall see :p
&gt; Great. When will all runtime improvements come to .NET Framework? When will all C# 8 features come to .NET Framework? It's [open source](https://github.com/Microsoft/dotnet), so I guess whenever yourself or someone else decides to add them?
Mono does exist
Well, no. We won’t. It’s already been decided that .Net Framework is now done at 4.8. 
I recommend you to take a look at Prism (and optionally ReactiveProperty). It was really hard for me to understand the concept at first but it really helps to keep your code neat.
Ok, here I'm going to be that guy and counter argue your points: - Tooling could be better. The lack of fully featured REPL is annoying, try the clojure nrepl and haskell intero and you'll see what I'm talking abut - That's a feature of the fact that it's a functional language. Again, try other language like Clojure. It would be weird as fuck if that wasn't the case - Not sure what you mean by this - Closures are great but they are not js specific and they've been abused as models, objects with private state making it a pain in the ass when you want inter-operate - It actually only support prototype-based very poorly (good luck finding _this_), class based is just syntactic sugar on top of the IIFE objects, event driven is just a random connection you make between streams (good luck finding which stream emits which event) - I agree with this one - Oh you mean websites that implement click and scroll jacking? And the plethora of pseudo web applications like slack that cause your laptop to take-off? - There's a library for every mainstream language out there - C libraries and Linux distributions encourage the same thing 
Not really, at least not publicly. (And I’m guessing not privately either.) For instance, they might ship a 4.9 with Standard 2.1 support.
That doesn’t help for the sizeable amount of Enterprise folks still on Windows 7. (Not to mention Windows 10 folks with delayed updates.) Core doesn’t have this problem.
It’s not the end, just the beginning of the end.
You could do something like: private void btnBuy_Click(object sender, EventArgs e) { var buyer = new Buyer(txtFName.Text, txtLName.Text); var property = new Property(); if (radHouse.Checked) { property.TypeOfHouse = HouseType.TownHouse; } else if (radCondo.Checked) { property.TypeOfHouse = HouseType.Condo; } else if // etc... if (cboAmenities.SelectedIndex == 0) { property.HasAmenities = true; } else { property.HasAmenities = false; } // etc... lblOutput.Text = $"{buyer}, you have rented a house for {property.ListPrice}!"; } Or something like: public partial class Form1 : Form { private Property property = new Property(); public Form1() { // etc } private void rad1Bath_CheckedChanged(object sender, EventArgs e) { property.Bathrooms = 1; } private void rad1AndHalfBath_CheckedChanged(object sender, EventArgs e) { property.Bathrooms = 1.5; } private void rad2bath_CheckedChanged(object sender, EventArgs e) { property.Bathrooms = 2; } private void rad2andhalfbath_CheckedChanged(object sender, EventArgs e) { property.Bathrooms = 2.5; } private void btnBuy_Click(object sender, EventArgs e) { lblOutput.Text = $"{buyer}, you have rented a house for {property.ListPrice}!"; } // etc
Hit me up, I will do it for $100!.
Long live the king &amp;#x200B; [https://www.youtube.com/watch?v=bfyNlISf\_No](https://www.youtube.com/watch?v=bfyNlISf_No)
*OwO, what's this? * It's your **1st Cakeday** peppedx! ^(hug)
You're assuming the system is updated. Bad assumption.
Amen!
`StringContent` is just a built-in type that represents a http body containing a string
&gt;It has been possible to say to a container to auto restart at least since early 2018 and even if the author means the docker service itself you can setup systemd (and probably init.d) to auto restart the service. If the server itself is "dead" the issue is probably not docker. Docker daemon is stuck, trying to restart docker service does not work and system cannot even shutdown itself. Ive experienced it not that long time ago on Debian 8.
But I'm asking about scenerios where I can use them.
So people do not debug js in browser and pray with some console-logish libs when it is on backend?
One of the links you posted mentions that Debian 8 doesn't have everything needed to run docker so that might explain why you might experience some issues that i don't.
Would CoreRt yield smaller binary sizes then? Potentially faster execution? 
as of my last few tests, the corert native compiler needed tons of special configuration for a simple usecase that was using a bunch of generics. For whatever reason, i was not able to force (through rd.xml) the compiler to just include the whole binary, it always dropped metadata. &amp;#x200B; I really hope they can release a more forgiving compiler
And yet Oracle is making its best effort for everyone to hate it. Makes you wonder why people would chose Java for new developments today. But that's no the subject here, so maybe I should refrain from ranting too much about it.
.NET Framework 5.0 is called .NET Core 1.0. The name changed to provide a proper distinction between the two products.
I'd like to see that. The legacy stack at my current job is still on 4.5. And while we might be able (with great effort) to move to 4.7 soon, .Net Core will be a harder sell.
Well you can't install more than one .net Framework runtime on the same OS. Hence why backward compatibility is necessary for each incremental version, while .Net Core can (and sometimes does) have breaking changes.
It's really amusing how reluctant people are to move to New technology It's like that damn headphone jack topic that's been beaten to death. We love in a world where things change rapidly, and using a framework that's 15 years old isn't going to last forever. You can stay in the past, but the world keeps spinning and we're all moving forward. You can join and grow, or sit and stagnate. 
&gt;because my job strictly prohibits using an unofficial released .net core 3.0 in production) Get docker and build it anyway. They likely won't notice. I rebuilt our old ass Java apps in .net core and redeployed regardless, to much better project maintenance and performance. Sometimes you just can't wait for people to get on board to do what's right.
APIs and language features are not the only possible updates.
&gt;The legacy stack at my current job is still on 4.5. Some of ours is still on 4.0, and some customers are still stuck on 3.5 (-: &gt;And while we might be able (with great effort) to move to 4.7 soon, .Net Core will be a harder sell. I don't really have experience with doing so on customer-run production systems. I assume it requires a few Windows Updates?
Yeah, one can still get bug fixes and performance improvements, like any other product on long term support. VB6 runtime still supported on Windows 10.
SharePoint is nothing like ASP.NET. Unless you’re doing custom SharePoint work you should be able to do most of what you need out of the box - if you’re doing custom SharePoint I believe it will just be PowerShell, CSS &amp; HTML.. I don’t think you’ll see any C#.
Nothing gets a project moving quite like the last minute eh? :D
Lol, denial 
It'll be dead like Microsoft killed XP and then actually just put it on life support for years because they didn't want to piss off enterprise partners. I'm still cleaning up COM and VB6 code in our app. I have a feeling in a few years this company will have a huge .NET Core migration. 
&gt; It’s already been decided that .Net Framework is now done at 4.8. 4.8 is still in early access. That's like me saying "Oh - .NET Core is stopping at version 4" - It's an impossible claim to backup since it's still undecided.
Yeah, I found that I'd seen about half of the questions already prior to the exam - definitely worth going through as many as you can
The benefit of .NET Core is that it includes the entire runtime bundled into the executable, trimmed based off what is needed. The same benefit makes your smallest "Hello World!" program 5-10MB. So - It IS better - Assuming infinite speed and unlimited storage space. Until those requirements are met (1Gbps is the global norm, and 10TB+ HDD's are sold in low-end devices), .NET Framework will pretty much be the norm :p
Change requires work. If the benefit doesn't outweigh the cost... why would you want to change? Just change for change's sake?
If not, you're dealing with a malware-infested device (Whether you know it, or not ;p)
It’s been made clear that Framework isn’t going past 4.8, other than bug fixes or security patches 
Actually it would be `(Span&lt;char&gt;)string` or `(Span&lt;string&gt;)string[]` &amp;#x200B;
One of the ways would be to have variables in an array and then randomly take one of them and pass to the print function Random random = new Random(); int[] variables = { 1, 2, 3, 4 }; for (int i = 0; i &lt; 100; i++) { Console.WriteLine(variables[random.Next(variables.Length)]); }
It's unfortunate that you can't understand him. His mic quality is poor for the first \~30 videos, I believe it improves after that. Venkat is a great teacher and I think you will learn a lot from watching the videos, as long as you can understand him. I didn't have issues understanding him.
Well, if you want to random print something you will need to use the Random class. For an example : Random rnd = new Random(); int value = [rnd.Next](https://rnd.Next)(min number, max number); But, one question, do you know how to work with loops? If not, maybe that will be your starting point. Hope that this helps: [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for) [https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.7.2) Happy coding.
You already have the code to give you all Rows for that Phase, but only take a single response (which might even throw an exception, if there are any colliding usernames) &amp;#x200B; How about you show us some effort you made? Like some Code that tries to do what you want, with code comments on what's not working and what you'd expect it to do
Well, what is " $.connection.LogHub" ? You never set it, nor do you try to connect anywhere. Are you using some kind of magic that injects the connection code to your webform *or* do you just have no plan at all how this all is supposed to work and just expect it to work without any effort? 
Well it's ahead of time compile instead of jit. It might be faster for cold start but don't build on it expecting insane results. As for binary sizes I can't tell. Haven't used it much.
It really depends. Most of the time people in charge of these decisions aren't the ones who have to work with the systems. And I have a finite patience as far as tech debt goes. In this particular case, we had a bloated java/spring API layer that I've been trying to get approval on for months to re-write. Falls through the cracks, so "Fuck it, I'll just do it anyway" Did it in .net core during an all day "HR Training" complete with full unit/integration tests, now we don't have to deal with java/spring. So sometimes if there's push back and you're certain it will be a better outcome regardless, it's okay to just do it yourself.
I'm considering it in the future. I need a browser, mobile, and desktop app. Have an business app where we cant force customers to keep the server up to date. Mobile platforms can only have one client version in the store at a time. Have an existing Win32 client app. I'm thinking about going browser-based which fixes the mobile issue and allows me to keep one codebase for all. In the desktop my plan is to wrap browser screens in a WPF window. Once all Win32 screens are migrated to browser, we will probably just go pure browser, but for now it's a good solution to mix browser and Win32 together.
You will get IndexOutOfRangeException as the length of the array is bigger than indexes used.
There are jobs where that would get you fired if found out you know
I highly advise against using core3 in production, to build outside of CLI you have to use VS2019 which is presently an a unimaginable nightmare.
all good frameworks go to heaven
Who doesn't believe Core is the future? People are simply saying we have a buttload of enterprise level software written in .NET and no we're not going to take any time to rewrite it. We feel perfectly comfortable continuing with those projects indefinitely.
If I built something that worked better than what they had and they fired me over it, then I don't wanna be working there to begin with :)
&gt; I truly do not understand why some people refuse to accept that .NET Core is the future. When a "Hello World!" app shrinks below 5MB - Yell.
&gt; and using a framework that's 15 years old isn't going to last forever. Linux is 27 years old. Windows is 33 years old. Are you still using a 25+ year old operating system platform, or have you moved onto something "new" ?
There is a Random type: Random r = new Random(); int num = r.Next(4) + 1; You can store methods with the type Action Action command1 = () =&gt; Console.WriteLine("1"); And later execute them: command1(); But if the result is constant, like in your example, you don't need that, you can just do the Console.WriteLine in the loop and store the string values, probably in some kind of list. 
What issues have you had with it? It's been smooth sailing for me
Are you specifically wanting to, on each trip around the loop, output one of four different variables, or the output of one of four different functions? If your need is simple, you could use Ruchiachio's suggestion, of randomly picking one item from a numbered array: object[] variables = { Apple, Banana, Orange, Tomato }; or you could go with a switch statement: ``` Random random = new Random(); for (int i = 0; i &lt; 100; i++) { switch (random.Next(3)) { case 0: Console.WriteLine("Apple"); // a plain string break; case 1: Console.WriteLine(Banana); // the value of a variable break; case 2: Console.WriteLine(DoSomethingMoreComplexAndInteresting()); break; //etc. } } ``` 
If you know that .net core 3.0 is coming soon, and you intend to use it as soon as its available, then why are you concerned about the lifetime of .net fx? You've already established that you have no interest in taking advantage of future versions of .net fx it whether it sticks around or not
Most IDEs have the javascript debugger built in. I use VSCode for example and it's got pretty much everything I need: breakpoints, stepping through, stack trace, watches, local variables to the current scope... I'm pretty sure you can even debug node in visual studio and get pretty much the same experience as C#
Sounds like Microsoft, while not killing the framework outright, is basically putting it on maintenance status - and trying not to panic their customers who don't/can't convert to .NET Core.
by EF designers do you mean edmx files? That approach has been deprecated for years and the tooling completely removed as of VS 2015.
You know this sub is full of shit when you get downvoted for posting dev blogs from Microsoft!
I once took a week long training on this subject and still didn't understand it. Good luck.
To be fair, that article was written in 2010 and Silverlight had a lot of life left in it. It wasn't until 2015 or so that the "Silverlight isn't dead!" articles got really sad.
Youre not reading what I'm saying. I'm concerned with people making shit up and acting like it's fact, not that .net framework is very likely going to the pasture.
JS is *everyone's* "number 2". The sooner we can flush and wipe, the better off we'll be.
Yes it is. Mayan calendar ends at .NET 4.8.
Provide the source from Microsoft where they said that. It can't be something you feel or you read another guy post a comment on in Reddit comments section This is exactly what I'm talking about. It's misinformation to call it Net Framework 5.0. you're saying that to make a point and it's false. It's perfectly ok to say .net core will likely very soon replace .net framework! You don't need to pad the facts with false claims to try to sound correct.
Seriously. I'm facing that now. I know some teams that are going to ridiculous lengths to try to get a new project in Java going. It's simply because that's the language they are stronger in and they just have an emotional connection. It's not actually because they feel it's the right tool for the job.
Completely true.
&gt; The benefit of .NET Core is that it includes the entire runtime bundled into the executable, trimmed based off what is needed. Right, but that doesn't work entirely. On Windows 7, you need two updates; on Windows 8, you need one. &gt;The same benefit makes your smallest "Hello World!" program 5-10MB as opposed to 5-10kb. Sure, but that's not really a concern for me. "I would install your app, but it's too large" isn't really the kind of feedback I get. "I would install your app, but I would need admin permissions / I would need to sign off with the IT department", however, can slow a project down to a crawl.
I worked a few sharepoint projects early in my engineering career. Won’t go near the stuff anymore, if at all possible abort mission and run. 
That's what's been bugging me! People think I'm arguing I am afraid of .net core or I can't let go of .net framework. I love .net core, but my feeling is irrelevant! Our feelings don't grant us the right to just make shit sound like facts. It's turnings into politics here, where people are saying people said whatever and interpretation is turning into splitting hairs ... For christ sake, it's a framework. No need to become a zellot over the thing! Love .net core. Don't go say it's ".net Framework 5.0" because no one **said it was.**
I don't understand. * Microsoft says new development should use core. * Core will contain "bleeding edge" stuff whereas netfx will largely just receive security fixes and bug fixes. * Due to the above, netfx will effectively no longer receive new features. * An application that no longer receives new features is in "maintenance mode". * As time goes on and tech progresses, the disparity of what core can do compared to netfx will become more and more apparent such that starting a new netfx project would be equivalent to starting a new VB6 project as of today. So, while net48 might not be "the end", we aren't likely to see 4.9 *any time soon*. All other techs, Microsoft and others, will move to largely depend on netcore. I can only assume that many of those technologies, such as ubiquitous nuget packages, will eventually drop support for netfx altogether. All of the above kills the thing. How can it not? It is obvious that old Mike needs to keep supporting netfx for legacy apps, and while it isn't *technically* true that netfx is dead, saying that it *isn't* feels like a half-truth as well.
I'm sure they're going to make it easier and easier to help people convert. But since Visual Studio 2019 isn't released and .net Core 3 isn't released, they can't even hint at it yet. Enterprise customers would lose their shit.
You probably shouldn’t wait until the day of to start learning the tools you need to even start your project. You’re taking an L on this one
You’re up shit creek without a paddle. 
Ok. There are minor fixes. But we can agree that 4.x is the end. there will not be a 5.0. &amp;#x200B; Its as easy as that: stay with your 4.x Projects where you are. If you want to make new Projects: See if core is ready for that.
Makes sense.
Sharepoint work is not easy. I know people who have devoted several years of their career to become good at it. Please say you didn’t sign a contract with a customer to deliver something by tomorrow... 
Put a try/catch inside of your `async` method, most likely the errors are occurring asynchronously and are unhandled exceptions occurring outside the `main` thread. I've venture to guess you are attempting to update the GUI inside of the `async` thread which is causing your problem. You can use something like this within your anonymous async method: ` Application.Current.Dispatcher.Invoke(new Action(() =&gt; { MyResult.Text = result; })); ` Or, take a look at this guide on `SynchronizationContext`: [USING ASYNC AND AWAIT TO UPDATE THE UI THREAD](https://stephenhaunts.com/2014/10/14/using-async-and-await-to-update-the-ui-thread/)
It is not. But we'll most likely won't be seeing any major new features for. Net Framework. So it's for all intents and purposes a legacy, long term support framework from now on. I already migrated everything to Core and never looked back, but there's tons of legacy apps out there that will be needing that old. Net stays alive for some time. 
You can certainly define more build configurations beyond `Debug` and `Release`. However, how are these projects dependent on one another? Why not only reference the projects from one another in each combo that you need? I.E. - Project A dependent on Project B - Project B dependent on Project C - Project D dependent on A and B - Project E dependent on A and C In the above scenario, if you `Rebuild`: - A : A, B rebuilt - B : B, C rebuilt - C : C rebuilt - D : A, B, C rebuilt - E : A, B, C rebuilt Or are they not dependent on one another? If they are dependent one one another but you want certain ones rebuilt but others not, consider utilizing an output library / copy-to approach where the dependee library copies its output DLL to a relative folder where the dependent project references it indirectly. This will cause the dependent library *not* to re-compile the dependee.
Then folks will soon discover that 99% of their misgivings about JS were really the DOM and webstandards in general and will have their opinions of their favorite language sent to the netheralm. 
This has to be a joke, right? 
Sounds like a school project.
i just figured it out, soz i can just do: textBox.AppentText(string);
I thought SharePoint design was just drag and drop. Shocker when I realised that it's not 
Actually, it's Console.WriteLine();
Pluralsight is good, you can get a trial account.
It's supposed to be a basic team site which is customised. I promised my manager that I'll deliver it by the end of the day tomorrow
Show them a demo from the SharePoint site. Other than that - Good Luck!
Unfortunately, no. 
Realising it now!
Check out the Microsoft Virtual Academy, search for C# etc... Once you're done with set would suggest checking out w3resource and again, C# section. Not sure about books sorry. I find online simpler
Head first c# is great and it uses different techniques to help you grasp concepts. It's got some xaml stuff too you might want to check out but can probably skip it too.
Any solid tutorial that I could refer to? (Hopefully beginner friendly)
It would be counterproductive to improve .net framework at this point. For us non-web developers, we can't migrate much yet. But hopefully .net core 3 will be finalized soon.
net50 moniker used to be an alias for netcoreapp10. I believe in older SDKs it still works.
CLR via C#, Jeffrey Richter
I would honestly assume so! But Microsoft is being careful not to say they won't do that some day... Kind of like how they say "no more updates for Windows 7" and then released an update (albiet to get people off of Windows 7 haha)
Dont use the array. Just use "Logging": { "EnableLogging": true, "LogLevel":"Debug"} It works just like you want it to and is the way that microsoft sets up their logging code.
You actually seem to understand quite well. This post is not saying .net Framework is going to live long. It's to put an end to the people saying "Microsoft said .net framework 4.8 is the end". It likely is, but they said very directly on their blog that it will move forward, just at a slower pace. So no reason to misinform new comers to dotnet. People don't fact check when they read comments on Reddit most of the time.
&gt; this is an amazing time to be a .NET developer. As someone who wants to make offline applications - mobile apps or desktop apps - I really don't share this sentiment.
Not for WPF. You mean Xamarin Forms? It's pretty close, and is nice for some use cases!
Just wait for .net core 3.0 to hit. Microsoft will start likely putting out real timelines soon after.
Unfortunately it’s been years since I’ve looked at it so I can’t refer you to specific material. In general I like pluralsightfor training videos though, they have courses ranging from beginner to expert on almost every development topic under the sun. I’d start with a 30 day trial there. Additionally some more details about the project would be helpful here, is this for work or school? What are the requirements of the site? Asking even an experienced sharepoint developer to “build a site in 24 hours” is madness. Best of luck though, feel free to message me directly if you have any questions you think I could help with. 
The additional step is to store the various actions in an `Action[]` (array of `Actions`) then use the rand to pull which one from the array. var actions = new []{ new Action(), new Action()} //Actually create and add the actions Random r = new Random(); int num = r.Next(actions.Length); actions[num](); of course there would be better ways to do it but may be a fun way to play with the `Action` type.
AOT should result in larger files, not smaller. One IL instruction may be multiple machine code lines. Or at least that was the case in VB5 and 6 with pcode vs machine code. Though dead code removal plus AOT can be dramatically smaller. 
Fine to use the API yourself directly, however if you're finding its more effort than its worth might want to explore using an existing API wrapper for .NET. Biggest advantage in my perspective is not maintaining your code against changing API endpoints and focusing on what your code is trying to accomplish. https://github.com/i8beef/Ecobee
That was dnx50, but see where you're coming from.
Full support isn’t there, but you can generally get some usage out of Mono. 
They also "support" .net 3.5. Their statement doesn't mean what you think it means. 
&gt; And calling core essentially .net Framework 5 is just the users opinion No, that's it's original name. 
C# in a Nutshell is always good, although it is mainly a reference book so not the best read. It is very comprehensive though.
Core 3.0 gives that to you.
C# In-Depth by Jon Skeet New edition coming out in a month or so
Try this: &gt;Dispatcher.Invoke(()=&gt; { Textbox.Text+=number; Thread.Sleep(1); }); number is the number, textbox is your textbox. 
Write(""); &amp;#x200B; &amp;#x200B;
But we want it to end. That's good misinformation, because it pushes everything to Core.
Silverlight isn't a great example, since it was an NPAPI Application and all major browsers decided to deprecate NPAPI due to security issues and the advent of HTML5. It would be idiotic to continue supporting it since it doesn't work on modern browsers.
Windows 7 and 8 are both out of mainstream support and should not be supported by developers.
&gt; JS has tremendous library support via npm (and the standard library is getting pretty good too). The standard library very unimpressive, and the ecosystem is utter garbage. I often end up having to re-invent the wheel simply because the thing that I'm looking for is hidden among a million broken libraries trying to do the same thing. When I ask JS devs how I can find useful libraries, they tell me to search npmjs.com and order by popularity, which I find to be hilarious and sad at the same time. What's funny is that people keep complaining about `this` in JavaScript, and I've never hit any issues with it, ever.
Do you have a link or reference to this? I have a few people to show.
As often is the case, Haskell did it first: `NamedFieldPuns`.
Sharepoint is incredibly complex. Why was this left to the day before? 
Highly unlikely given that would require CLR changes and they really don't want to change the CLR.
[https://introprogramming.info/wp-content/uploads/2018/07/CSharp-Principles-Book-Nakov-v2018.pdf](https://introprogramming.info/wp-content/uploads/2018/07/CSharp-Principles-Book-Nakov-v2018.pdf)
&gt; it is the end, its only for legacy and old people now Oh fuck off. It’s completely unrelated to age. 
Do you have a link or reference that says Silverlight is dead? No, because that's not how MS works. They almost never explicitly say that a platform is done. Things just linger on long term support. 
Ok, I restored it. Good luck!
Yea, maybe a supernova that exploded a hundred years ago is going to irradiate the planet tomorrow night. Could it happen? Yes. Should we plan on it happening? No.
Technically two, though CLR 2 and 4 can have some bad interactions when loaded into the same process. 
That's pretty doubtful.
&gt; Don't go say it's ".net Framework 5.0" because no one said it was. Again, that is its original name. 
They still ship updates for windows 7 and 8, but do you see them being actively developed? No. This the is language they use for maintenance mode.
Can’t recommend it highly enough This book explains really well clr internals.
Yea, that means security bugs, high DPI, and maybe, if you're lucky, the occasional NuGet package. 
That's a pretty baseless and paranoid accusation. They're just programming tools - not fucking religions.
WPF has a lot of new features planned as part of Microsoft making drastic changes to Windows itself. Be patient though, these don't be out for a while longer. 
Hands down the best free book I have found
You can with Silverlight... oh wait.
That’s not something useful to tell an enterprise customer.
That’s my impression as well, hence my belief that there isn’t gonna be much action in Fx any more.
English - [https://introprogramming.info/wp-content/uploads/2013/07/Books/CSharpEn/Fundamentals-of-Computer-Programming-with-CSharp-Nakov-eBook-v2013.pdf](https://introprogramming.info/wp-content/uploads/2013/07/Books/CSharpEn/Fundamentals-of-Computer-Programming-with-CSharp-Nakov-eBook-v2013.pdf)
I would suggest checking out udemy.com and programming with mosh. They're pretty good to get started.
I am concerned that you are making a big deal out of nothing. I don't remember anyone saying 4.8 is the last framework release. I have seen people saying .net framework is dead but that is more a general statement which is most definitely true. 
 He is not using a 27 year old version of Linux, nor a 33 year old version of windows. That argument doesn't really hold up. That would be more like saying you're still on Windows 1.0, which hopefully no one is. You're using Windows 7/8/10 which are only a few years old, as the 33 year old version of windows did not hold up, the same way you're using .net core, as .net framework did not keep up.
Was net50 in early versions too
A hello world app is 313kb... what? If you mean because of self packaging, that's an option... you can always have a user just install .net core, just like what you do with .net framework.
Head First books are great and I recommend them too. I'd also suggest to use c# to solve a problem in your life. Make a program that checks if your garage door was left open, query an api to get the weather and send an sms to yourself if it's going to be too hot or cold that day, etc. Doing is better than reading. 
Might be a little much for a super beginner but a must read if you’re want to make a career out of c#.
Yes - And the latest version of the .NET Framework was last updated 9 months ago, so you can't call that 15 years old either :p Sure, if the latest version of the .NET Framework was 15 years old, then definately - But it's not.
Right... either way you need to add a closing quote when you provide an opening quote.
You don't actually need books. Look up some video tutorials and so on.
I really like the Effective C# books.
Fair point, just more so the point that software that is old and constantly patched to 'make things work' is going to be much different, even if that software was updated today, or rewritten today, is all I mean :)
Most of the comments you are seeing is because a Microsoft employee DID say it on the comment section of a blog post on Microsofts blog site before they migrated to a new blog system and didn't migrate any of the comments. Whether they did that on purpose to remove that one comment or just because they couldn't move them over, who knows. The main take away is they did put in that post that full framework is not getting any performance fixes because of backwards compatibility with past versions. They are not going to touch the main runtime. That most definitely means they are only going to be adding bug fixes and possibly little QOL fixes here and there. This is the same wording they use for every other product they put into maintenance mode. And to comment on your point about being an Enterprise developer, I get it. I was right there with you a few years ago. The problem is Enterprise means lagging behind and almost always being stuck on end of life components or frameworks. MS will always support the full framework just like VB6. The rest of the community has already moved on, though. MS throwing winforms into full framework is them giving Enterprise developers a way to hopefully be able to move into the future and get off platforms they know are not going to be given the love anymore.
Maybe it can be, but that's not what I was working on.
&gt; you can always have a user just install .net core ... Which sort of defeats the point of the whole "no pre-requisites" philosophy of .NET Core....
Came for the Skeet. &amp;#x200B;
I actually tried to find the original announcement this morning. I remember it being announced as .net 5 and how it was going to be like .net 2 was to Net 1.1, a completely new rewrite. Because of all the confusion with versioning from 2.0 to 3.5 and then to 4.0, they decided to rename it completely. That was a LONG time ago in developer years though. Lol
You seriously compare things like Windows 3.1 to 10 to prove your invalid agenda?
By that definition, any software that is frequently updated over a period of time should be scrapped. So, I guess we're scrapping Chrome, Firefox, IIS, Apache....
oof
Yellow book by rob miles is good. /r/learnprogramming has a good sidebar you can find c# resources in.
This one is free...and has CHEESE on its cover in it's latest revision: [http://www.csharpcourse.com](http://www.csharpcourse.com)
They were comparing the .NET Framework as a concept (Which was last updated last year) as being 15 years old, so I'm similarly using Windows (Which was updated this month) as being 33 years old by their own definition.
This.
I was more referring to the comment that a lot of us read before they removed all the comments on that blog post. I was hoping someone screen shot it....
FireFox was literally just rewritten, and Edge is being rewritten right now (even with it being new). Chromium received a pretty significant rewrite for Chrome, IIS and Apache (especially IIS) are dying in favor of nginx and caddy. So... yes, I stand by that statement
It absolutely is and what we tell our Enterprise customers. If they don't want to keep their systems patched and up to date, they can't run our software.
If you want something great but not easy/not tutorial mode to learn it from scratch to a professional level in one book i would suggest pro C# from troelsen, whichever is the latest version (i think currently that would be « Pro C# 7: With .NET and .NET Core »)
Can you provide an example of what you want to customize? Also what version of SP you would be referencing. It’s been a while but I might be able to point you to some topics, but like most have said this isn’t really a single day type project and can get ugly in a hurry.
Sorry I was being facetious, I don't actually think this.
 That is for servers, not for users. The entire point was because many servers lock down what you are allowed to install, and even internally in companies IT doesn't allow frequent framework updates. It's to circumvent that.
Hard to tell sometimes without the sarcasm emoji!
&gt; Is there some other tool or technique that I'm missing that would make it much easier to do what I'm trying to do here? What are you trying to do? Not build different combinations of projects - what's the problem you have and are trying to solve?
Thank you. 
That's fine, but between the practical result of losing a five-figure contract over someone still running an older OS (which is still in extended support) and the theoretical benefit of increased developer happiness because they get to use the bleeding edge™, I can't fault a company for sometimes opting for the former.
Understandable! I forget that in person, the inflection of my voice and body language would probably help convey the sarcasm. Neither of those were detectable in my comment. Now, if we only had brain implants that can help translate sarcasm this would all be fixed... ;)
And there is nothing to compare. The updates to Framework are orders of magnitudes less than to Core, Windows or anything properly supported.
UPDATE: Thanks it worked great, the only thing is that i had to sorround it with a try and catch, because when entering Ex: localhost/ConsPorId, i would get an internal server error because the string was null. I don't know if this is the normal procedure when doing MVC in C#, because when entering the view it automatically executes the controller method.
And yet MS was in a position to see that coming and until the very last day of Silverlight support insisted all developers should be writing Windows Clients in Silverlight unless they *needed* WPF. Right now I see these ways MS could send people: * "Keep writing VB6/WinForms/WPF, we'll support it forever." * "Switch to UWP, we're going to drop the things WPF depends on." * "Switch to Xamarin Forms, we're going to strongly support cross-platform applications going forward." * "Use Blazor, WebAssembly is our blessed application stack." * "Here's our enhanced Node/Chromium stack, we think you should write applications this way, it's even better on Windows." I could write an explanation for why any one of these gets the axe somewhere in the next 3-5 years. The only ones MS dogfoods are "legacy", UWP and Electron. My guess is the one they'll still support 5 years from now is one of those three.
Removed: Rule 3, Rule 4. Maybe /r/learncsharp, /r/learnprogramming, or maybe /r/programmingbuddies.
Where performance matters then C++ still rules. You could learn some cross platform C++ development with the Qt framework? If performance isn't an issue then Electron is a good bet. JavaScript or TypeScript and one of the big 3 UI frameworks (React, Angular Vue). You could try some native mobile development. Swift/iOS (ugh) or Android, Java or Kotlin. &amp;#x200B;
OOP is a larger concept than C#. Understanding it will help you in the long run, but for the moment. Pick something small that you might find useful. Like opening a file, reading through it and printing line x to the screen or something. There are many free resources you can use to help you through. Google, stack overflow, and MSDN will become close friends. Best way to understand while learning is to build something.
Pro C# 7: With .NET and .NET Core https://www.amazon.co.uk/dp/1484230175/ref=cm_sw_r_cp_api_i_suTDCbEGBZC36 Really very good. Teaches the modern fundamentals of OOP in a clear way, as well as comprehensive covering of C# and .NET features. 
&gt;number is the number, textbox is your textbox. Rofl
Rosylnator https://github.com/JosefPihrt/Roslynator
Actually you failed a test. And 8 ppl that gave you up vote :P 
[removed]
Thanks, i'll make sure to check this one too !!!
You actually gave me an great idea, thanks.
Here is a book about .NET platform: [https://github.com/sidristij/dotnetbook](https://github.com/sidristij/dotnetbook) Partially translated into English. For other chapters you can use Google Translate.
I didn't care at all until I started seeing an increase of misinformed posts to people who were asking questions. Specifically about "Microsoft says 4.8 is the last release". I figured enough people out there honestly believe that, that it needs to be addressed. It's fine if you haven't personally seen it, but for whatever reason I come across those comments daily.
Learning ASP in Core isn’t a bad idea if you’re not comfortable with it now. Desktop is near death, gotta pick up electron or pivot 
You mean you can't access the database from your Ubuntu server? Where is the database hosted? It's probably just a security issue. If it's on azure or something you just have to allow that IP to access your insyance
If somebody asks for a book, they probably did so for a reason. Video tutorials are the worst. Any time someone sends me a link, I look for a transcript or I skip it. Either type it out so I can go through it at my own pace, or don't bother pointing it out to me. I'm not flipping back and forth between windows just to rewind some damned video to repeat something I didn't quite catch. It takes a fraction of a second to look back a few words on a page, and multiple seconds (and a concentration break) to do the same to a video.
Not from what I remember. dnx was always the name before they went to dotnet. But I could have missed that if it was in some prerelease to 1.0.
Well, I'm using this: `services.AddDbContext&lt;SurveyContext&gt;(opt =&gt;` `opt.UseInMemoryDatabase("Survey DB"));` `services.AddMvc().SetCompatibilityVersion` `(CompatibilityVersion.Version_2_2);` Which seems to simply create a database on the fly when I run it from visual studio on my Windows development machine. When I deploy it to Ubuntu server, however, I just get a "page not found" error, despite having the right URL. 
oh i dont know, being unable to close files, being unable to install nuget packages, installing nuget packages only for them to uninstall themselves postbuild, menus just outright refusing to open, being unable to compile because the new console output locks the executable even after i stop debugging https://www.youtube.com/watch?v=yP4iVSFyWQ4
There's really no reason to dive into C++ the same way anymore. You can stay comfortably in the C# environment and use the new Span&lt;T&gt;, ref structs and readonly struct functionality to improve performance.
I'm glad it works. The reason you got an error this time was because you didn't have an parameterless overload of the action you were trying to invoke. I think you have it backwards: in .NET MVC, a route/URL is associated with a controller action. This route registration is performed in the `RouteConfig.cs` file on app startup. So when the user enters a URL, the compiler looks for the controller action that follows the registered route pattern (most commonly `controller/action`) and executes the action. Convention says these actions should (most of the time) retrieve a model, put it into a View, and return that view. So the View itself does not invoke the controller method/action. The action returns the View. That's a very simple illustration but it's the basics of the architecture ASP.NET MVC tries to follow. This internal server error occurred because the only action that the compiler found under `WhateverYourControllerIsCalled/ConsPorId` was `ConsPorId(string iden)` and when it couldn't glean a parameter from the URL, it didn't have a fallback parameterless method to invoke instead, hence the error. I don't recommend making parameterless overloads of every method though, because some pages should architecturally require parameters. It doesn't make sense to search for a patient by ID if you don't have their ID, you know? The user really SHOULD get an error when they don't enter a required parameter. It's up to you how to want to display those errors to end users.
Awww thanks man, looks great :D But the idea is to learn this deeper stuff myself so I can add C# to my CV (resume). But it does look good, I just downloaded it now. 
Agreed!
C# How to program
Thanks for the reply. Gone through the dumps, acting like they're test questions and can easily get most of them right. Then going through official test exams and doing around about the same.
By url are you using an IP or a named address? Did you just create the cname? Dns takes a day or two to update
Must read for any .Net developer
Step by Step Visual C#. That's the book we used at the college, and it teaches a lot of concepts.
calm down babe
Possible IndexOutOfRangeException where you determine the random number. selectedNames.Count() -1 where you’re setting the random number max 
Right, sorry. But really, I don’t think it’s very related to age. 
Great work, the first step is getting to the finish line. So here are some ideas. Don't hardcore the filename, get it from the application arguments. Wrap the body into a *try {} catch* block catching the most relevant exceptions to give user a nice error message of the problem, instead of a stack dump. `Thread.Sleep(2900)` call would be more legible like this `Thread.Sleep(TimeSpan.FromMilliseconds(29))` or even better just make a constant `Thread.Sleep(AnswerDelay)` Likewise "name" and "email" could be constants. Your use of *var* isn't regular. For example, I would rather write `var randomNumber = new Random();`, as the type is already explicit. Whereas I would probably write `XElement selectedNames`, to minimize my mouse overs on Select() or the variable name. Also test for missing values, in case the file isn't found, or the XML doesn't contain the data you are searching for. Some of these points are just a question of style, don't take them too seriously, and keep coding.
I think it's a great book, but not sure if it's the right one for a beginner 🤔
i dont either
That sounds interesting but it would be good to see some benchmarks. The main problem with C# for desktop development is cross platform apps. This is one area where C++/Qt (or perhaps Python/Qt) really shines. WPF feels old and useless to me these days. I wouldn't choose it for greenfield projects at this point.
Well no, I don't ever see the input, otherwise I wouldn't need to ask this question. I get the state of the game by calling 'API' functions, such as `game.GetMyShips()` or `game.GetMapWidth()` or other stuff.
I want Skeet to write a book on time management.
Of course it isn't the end. Windows still exists and that isn't going anywhere. WCF is still widely used and new applications are written in it. Basically .Net core for everything except when you need WCF or a desktop application.
&gt; I promise you it's a version of Windows built on the Linux kernel. I'm not sure you're in a position to commit to this statement.
Sams teach yourself visual c# (2010)
Add fTotalSalary += fSalary; after line 26. Also, copy and paste, don't post a picture of your code.
Outside the loop: fTotalSalary = 0; Inside the loop: fTotalSalary += float.Parse(Console.Readline());
A photo...of a monitor...of some code? Really?! Look at the `+=` operator, anyway.
 float fTotalSalary = 0; ... { Console.WriteLine("Enter salary: " ); fSalary = float.Parse(Console.ReadLine()); fTotalSalary = fTotalSalary + fSalary; }
First of all maybe try to broaden your horizon. I don't really understand what you mean by being a desktop developer. This job is about learning new things all the time. Look into modern web development using some JS library like Angular, server side web like ASP. NET MVC, mobile development using Xamarin, game development using Unity etc. What's stopping you? Seccondly WPF is just a UI framework. Software development is so much more. Software architecture, distributed systems, cloud services, dev-ops, testing, and 1000 other things. Start looking into that. A great start is the book Adaptive Code by Gary Hall. It's excellent. If you want to pick up another platform quickly I would suggest Xamarin. It's very similar to WPF when using the Xamarin Forms project type. Also uses XAML (not identical but still), MVVM etc. The Xamarin University has tons of free learning material. 
Now a days seems like we can’t decide if we wanna keep separating or concerns or combine them all.
Nah he just has to escape it properly 
I would probably do something more like this, except potentially abstracting to another class to make for easier unit testing... Had to change the XML function to make this work, but the idea remains the same! https://repl.it/repls/NormalYellowishDistributionsoftware 
&gt; hardcore nice one :) 
Uh... WPF? We're talking about .NET core here, WPF isn't there yet.
Same here, I like to be able to read code and tell what it does, rather than having random witchcraft
You can't install more than one 4.x framework. But the in place upgrades have been a nightmare for me in the past. I think it was the zip stuff that was different between versions. So it compiled fine but bombed with missing method exceptions.
To understand how long it will take to die: Microsoft still supports ASP.NET WebForms. The company I work at moved from WebForms to MVC in 2010.
If you write an article saying certain tech is dead at some point you will be right.
Am I required to read previous editions or I can just give straight to that new book?
https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#installer for english link
compEntries.xxx
Know how to use the built in performance tools. The CPU Profiler and the .NET Object Allocation Tracker are the most useful (the latter can use a LOT of RAM, btw). Other than that, some kind of MSIL analyzer. I use ILSpy. You'll get most of your performance gains from the previous two, however.
Thanks, just installed it. Looks like there's still no ability to create .Net Core desktop apps. I presume that following the procedures [here](https://github.com/dotnet/winforms/blob/master/Documentation/winforms-designer.md) will work... just trying that now. Does that mean it's going to be released like this? I find that a bit strange, since .Net Core desktop apps was the main selling point of .Net Core 3.
If you are good C# developer why are you afraid of anything? You needn't to mourn those few experiences you collected with WPF. It's not what makes you a good programmer. Understanding principles, algorithms and many many different technologies is what makes you valuable programmer. Proficiency in at least one wide spread language is of course a must, but WPF as technology is just tiny and replaceable part of a good developer's portfolio.
&gt; Provide the source from Microsoft where they said that. While it was in Beta during the Visual Studio 2015 Preview, the *very first* release of .NET Core was called ".NET Core 5". The 5 was used because it is intended, longer term, to completely replace the "Full" Framework. Since it was a new product, however, and it was not mature, it was later renamed to ".NET Core 1.0". Because that initial naming makes it pretty clear how it is positioned relative to the previous Framework versions, it seems exceedingly unlikely that the "Full Framework" .NET will ever have a 5.0 release. 
Actually it is. dotnetcore 3.0 introduced support for WPF and winforms.
Yes, holdover from Visual Studio 2015 Previews, it was called .NET Core 5, and called "net50" internally, and was later renamed to .NET Core 1.0 and thus you got netcoreapp1.0 and net50 became an alias temporarily so that projects could eventually be migrated.
Taking top comment to say thank you to everyone for your comments
Shhh, don't tell it that. I want Scala to target DotNet Core.
Not sure if recommend it as a first book, it says on the blurb it's for people with reasonable C# knowledge.
I believe this is false. Doing that would exclude the final entry from ever being selected. 
Which proves my point - .NET Core 1.0 is/was .NET Framework 5.0. Thus it's unlikely we'll get to see actual .NETFX 5.0, but you never know.
Well, that code will not compile. &amp;#x200B; Correct version: `Console.WriteLine("I"m the new guy");` 
&gt;I find that a bit strange, since .Net Core desktop apps was the main selling point of .Net Core 3. and EF6 support. 
I would suggest splitting your application into multiple functions instead of just doing it all in main. This is a mistake I made when I was starting out too, but the more comfortable you get with them the better your life will be :)
Thats not true. I recruit C# developers for a living and generally clients who want an MVC candidate aren't going to take a WPF candidate. Not saying OP couldnt learn but there is too much choice and clients can take their pick. You could cite isolated occurances to the contrary but not in general.
No need, they’re stand alone (mostly). I agree with others it shouldn’t be your first book or sole book but you should certainly have it in your toolbox.
I would put your code under the MIT license, put it on GitHub under an account you control and then hand the school the link. Basically give it to the world while still giving yourself the ability to easily use it as part of your portfolio. I would also ask the school that any changes be put into a pull request and brought back to the git hub repo so you can review and even update the changes with commentary if you desire. This was a HS project so I would not hold it too close to my chest, at the end of the day it's likely quite basic to a professional. Its better to have it out there and part of your portfolio. 
Just give it to them, think if it as good will, do you karma some good
Xml on C# code is evil. Try to not to marry your xml file structure (that is a detail not a policy) with your business rules. You may use serialization utils to create classes from your xml. XPaths, GetElement() or XmlDocuments childs produce a lot of messy code, changes on xml structure will throw runtime errors, not compilation errors.
Then I am sorry for the shortsightedness of your clients. I have recruited many people and I always prefer someone with solid base knowing maybe other technology than requested over someone knowing the wished technology but with gaps in the whole picture. It paid off every time.
Publish it on GitHub with a [copyleft](https://en.wikipedia.org/wiki/Copyleft) license, like [GPL3](http://gplv3.fsf.org/) or [CC BY-SA](https://creativecommons.org/licenses/by-sa/4.0/). That way you have a record of publishing it first, in case they try to claim it, with a license that requires they maintain attribution to you as the original author. If this is a truly serious concern, you may want to consult a lawyer. None of us here are lawyers. Well, some of us might be, but I doubt those who are would give free legal advise over the internet. Good luck!
I'm around semi-advanced. Bachelor in CS with 6 months of experience, so I think it might be a good read for me
&gt; `AnswerDelay` More like `ANSWER_DELAY`
I'm assuming when you say Functions, this is the same as Methods? public void DoSomething() { //code } public void PickWinner() { //code } &amp;#x200B;
more like the rebel `aNSWERdELAY`
I don't think that you need this: var selectedEmails = xdoc.Descendants("email").Select(selectedemailnodes =&gt; selectedemailnodes.Value); Unless you meant to add it to the finalWinnerOnConsole value.
Hi, thank you for the feedback. This was extremely useful. I'll make some changes over the next few days and update the post with the updates. I liked the idea of constants when I read about them, it's great to use it in a real app. Thanks for the reminder!
The **RC** release notes specifically say that winforms and wpf projects have to be created via dotnet new for now. Also NET Core 3.0 will not release with Visual Studio 2019 on April 2nd but a little later. Same with C# 8.0
Thanks for the feedback and code examples. &amp;#x200B; It's great reading through clean looking code and taking some ideas, best practice etc. &amp;#x200B; Thanks again.
It is false. The top of the range will never be output. https://docs.microsoft.com/en-us/dotnet/api/system.random?view=netframework-4.7.2
If you have experience with another language, I highly recommend Microsoft Visual C# Step by Step by John Sharp (9th ed.) Coming from Python and wanting to expand my professional toolbox, it was effortless to read! I can't recommend it enough to my colleagues.
Ah, that makes sense. Do you know if designer support is expected to be available at the same time as Core 3.0 is released?
Hi, I decided to take selectedEmails out of the StringBuilder as I live streamed the competition winner being selected using the application and didn't want to show personal details to the public on the company FB page. I guess when I refactor, I can remove this.
&gt;the first step is getting to the finish line r/restofthefuckingowl
&gt; Also I tend to use configuration["Logging:EnableLogging"] instead of automagical stuff when pulling config settings. Just one of the weird things i tend to do though. haha, the "automagical" stuff is plain old deserialization, and its done once and prevents typos. it also lets you file watch and inject updated settings to your app using ```IOptions&lt;TConfig&gt;```
Can you please post the English link in the description? [https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#installer](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#installer) 
a hold over from an earlier time (System.Configuration .net framework 3.5). Somethings are hard to let go of.
Currently reading The C# Player's Guide and I like the way it teaches a lot with little reading. If it comes to reading I have the attention span of a gold fish, so this method works for me
Use teams to create a team. Open the SharePoint site created with it. Customize it (maybe). Profit!!! 
Thanks! I think this will do. I'm kinda new to this but will dedicate to it in the future. Thank you
I use a few commercial ones. The Jetbrains DotX series are simple to use and effective. DotMemory also has a nuget library you can use in unit tests so you can test memory allocations in unit tests which is quite cool. ANTS is good, but expensive and complicated. I still think it's worth having a licence for it in the team. /u/unit0ne gives good advice. The VS tools have improved version on version and are amazing these days. Really the big thing to remember is, figure out what the problem is you're trying to solve. Write the code, make it work. There's a bit of an art to it, try and figure that "works" means you have enough overhead to see you through an N sized increase in usage so you're not caught out by a surge, but don't stress about it prematurely. 
100% https://goalkicker.com/CSharpBook/
if you want your UI responsive, you need to count in another thread. then for each number you count, you provide the UI the number. if you want to count slowly, you will need to wait/sleep for a bit between each number. the key part is updating the UI control (textbox) on the UI thread (using a dispatcher). you can't update it on the background/worker counting thread. Task.Factory.StartNew(() =&gt; { int count = 0; while (count &lt; 1000000) { count++; // increment counter Application.Current.Dispatcher.Invoke(() =&gt; { textbox.Text = count; })); // update textbox Text property on UI thread Thread.Sleep(1000); // sleep 1000ms (1s) } });
Why? 
Yes
Did they fix or something with remote code debugging via ssh? cuz this shit would be so useful, but it feels like it works from time to time
What is the point of the string builder? Why not just replace all of the 'finalWinnerOnConsole.AppendLine' with Console.Writeline'? finalWinnerOnConsole.AppendLine(Environment.NewLine); -- This is 2 empty lines. Might look better in the code to just do: finalWinnerOnConsole.AppendLine(); finalWinnerOnConsole.AppendLine(); // or 2x Console.Writeline(); for the same effect Also, why the delay? Just for dramatic pause? Do you really want to always wait for the answer? If you really want a dramatic delay or just to be silly, consider something like: int selectedNameIndex; Console.WriteLine("Press enter to select a winner"); do { do { selectedNameIndex = randomNumber.Next(0, selectedNames.Count()); Console.Write("The winner is: {0} \r", selectedNames.ElementAt(selectedNameIndex)); } while (! Console.KeyAvailable); } while (Console.ReadKey(true).Key != ConsoleKey.Enter); 
i wouldn't do this: `selectedNames = xdoc.Descendants("name").Select(selectednamesnodes =&gt; selectednamesnodes.Value); var selectedEmails = xdoc.Descendants("email").Select(selectedemailnodes =&gt; selectedemailnodes.Value);` instead i would get the random index based on child nodes count and then load the name and email of the winner
Yeah. I use C# mostly for desktop apps and games. Desktop apps are a no go for now. Game dev stuff was hard in the beginning but now it's pretty good. 
I’m sure your code is amazing but five years from now you’re going to look at it and think it’s really not that great. We all grow in this profession and stuff you wrote a year ago often doesn’t look so rosy now. Another point: if you’re worried about the school making money in your software, that’s probably very unlikely. 
Huh, thought most programming contest/hackathons stipulate that the code must be opensourced? If you still have access may want to check the contest submission rules etc b4 doing anything.
It will, but not yet if you are actually an employed developer.
AFAIK HTML Agility pack just downloads html, but if content is generated by javascript, then you'll probably have to use e.g Selenium.
Agenda? lol
Eh, useful for servers but not "for servers". It's for any situation where you can't have your code be dependent on a common framework being updated or not.
NDC, goto;
&gt;Looks like there's still no ability to create .Net Core desktop apps. There is for me. Have you installed .NET Core 3.0 preview?
FYI if anyone installs the the RC version, to opt out of the weird color changes do the following in Options: Environment -&gt; Preview Features -&gt; uncheck box for "Use enhanced colors for C# and Basic" after so many years using Visual Studio, I found this very small color change very grating and annoying.
FYI if anyone installs the the RC version, to opt out of the weird color changes do the following in Options: Environment -&gt; Preview Features -&gt; uncheck box for "Use enhanced colors for C# and Basic" after so many years using Visual Studio, I found this very small color change very grating and annoying.
Awesome! One last thing I'm having difficult with is trying to apply a String for each case that I can call to the ToString so that based on the HouseType the String would say the Type of the House, and if It's a Condo it would say whether or not it has Amenities. When I try to apply a String to the switch cases I get the error "A local or parameter named 'name' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter". 
&gt; The RC release notes specifically say that winforms and wpf projects have to be created via dotnet new for now. So I guess this is different for the preview branch? Cause I can create a Core WPF project is the GUI just fine. Hit F5, get a GUI.
What are you using for gamedev UI on core?
Which text? Is it in a textbox or something? You can always use Streamwriter to create text files and write into it. For example: &gt;string s = textbox1.Text; Streamwriter sw = new Streamwriter("file.txt"); sw.Write(s); sw.Close(); 
Those are Visual Studio Code colors? I'd say they're great finally not everything is just white, lol.
Ah - I hadn't spotted that. No, I didn't. It's pretty late here in the UK, so I'll have a go at installing it tomorrow morning.
If you do this, make sure to give them feedback. These are preview settings; if they don’t get much feedback that they’re controversial, they’ll make the feature mandatory for everyone. (I don’t personally mind the colors. I don’t think they quite got them right yet, though.)
It essentially looks like a timecard that people print out. So I need the label and the text box...all 30 of them at that.
So much this. 
Thanks for sharing
Skeet for the Came
I just dont want purple `try catch return` and wierd brown/tan like `Green.Brown` idk, once I get used to something its very hard to change
[Imgur album](https://imgur.com/a/XNfZzj5) with the same graphic for other programming languages - for comparison! | If you want more information on how these were created, it can be found [here](https://www.globalapptesting.com/blog/picking-apart-stackoverflow-what-bugs-developers-the-most)
This is my hands down reference for ideas / quickly remembering how to work with something.
I'm just using the server_ip:port/API/TodoItem, for example. I can ping the machine, and can gain access to the default Nginx page. The server is hosted on a Linux VM on azure.
Personally, I know two languages and currently learning my third, so I'll give you some advice from my experience: &amp;#x200B; In my opinion, the most effective way to learn a language is to immerse yourself in it, and the best way to do it is to watch movies in the language you are targeting. When I first started learning English in school, I was struggling a lot - attempting to memorize words and grammar rules in class was really difficult for me, and learning that way is really ineffective - it leads to you having to recall what you learned in class every time you try to understand a sentence in the language, and while computers are quite good at recalling information, humans are not. &amp;#x200B; Think about how you understand your mother tongue - you don't have to think about the meaning of every word, your brain just 'magically' understands the language. Now how do you achieve such a level in a different language? well, you learn it just like you learned your mother tongue when you were a baby - you simply have to listen to people speaking that language - A LOT. &amp;#x200B; For me, English started clicking when I started watching a lot of English YouTube videos - because I had some basic English from school, I could make out some of the things people were saying, and with time, I started understanding more and more words, and the language started making sense - I didn't have to think about the rules from class anymore, but rather things started feeling natural, until I achieved my current level of fluency. &amp;#x200B; From your post, I can tell you at least have some basic level of English, even if you needed the help of certain tools to write it. What I think your next step should be now, is to start watching YouTube videos, movies, TV shows, or any other form of English speaking content that you like - If you are in to gaming, explore the English YouTubers of your favorite game. If you like action movies - look for american action films. If you like comedy - find some English comedy you wanna watch. Whatever suits you, should just keep at it, and keep on listening to English on a daily basis. One important thing to note about this technique though, is that you should watch everything without subtitles, and just try to figure out what you can from what you hear - subtitles can slow your learning massively, and you might make no progress at all. If you are interested in more details about this technique, check out [this](https://www.youtube.com/watch?v=J_EQDtpYSNM) video. &amp;#x200B; Lastly, you should be ready for a long journey - learning a language is not done in one day, or in one month. It takes a long time, but you should keep going at it. As far as I know there are no shortcuts to learning languages, but listening to natives speak it on a consistent basis is the most effective way I know (surprisingly it's also the easiest way I know) to learn a language. &amp;#x200B; Hope this helps.
At some point I've tried to write my own. Really fun but for doing editors it's better to just use imgui. There's some bindings available for core. 
Thats ridicious... First, why would a c# guy switch to monkey-peanuts language js?Or java? Just bc desktop declines he doesnt need to abandon the whole. Net ecosystem. Btw I would not be surprised if "dieing" wpf would outlive all big 3 js frameworks combined..
##r/DataArt --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/9wy10w/ignore_list/)
They'll get you eventually. Why won't you use their api?
Visual Basic 6 is still supported in new versions of Windows. Do you want to bet your next application on it? What about Silverlight? It's still supported in IE? Want to use it instead of Angular? *** They are telling us not to panic about migrating our legacy code. That's it. Don't take this as a reason to build new code on .NET Framework if Core is an option. 
Well yeah, it's not even released yet.
And it broke the second I tried to create a netcore 3 winforms app
I wonder if a lot of these questions are actually about strings, or if example code just uses a lot of strings to illustrate the point. 
So in other words, as I suspected I have to force it with dotnet new.
on a similar note, i'm surprised `var` and `dynamic` are so tiny. A load of those "difference" instances must be about those two right ? 🤔
Strings can sometimes be confusing
I don't know if Docker, when running on Linux, can host Windows applications like it can on a Windows host, but if so, and since you say you aren't worried about the UI, you might be able to re-publish your apps as a container and run them that way.
Could you use a listbox and bind an observable collection of integer to that then implement notify property changed? 
Works well for me, smooth and feels faster than before. The new color scheme on code also looks really good.
It’s a high school project dude. You can either be absurdly protective and refuse, you can allow access with the threat of legal action if they take it, or you can just toss it up on github and make it open source. There’s no reason to protect such a thing. 
Building to android in xamarin is unbelievably fast. Wish the macOS client got a bit more love 
It sounds like you are trying to access the API via the IP address, which is returning the nginx default page but not routing to your app. You are running the app on a particular port, in which you are telling nginx to act as a reverse proxy and pass requests *to a specific domain* to that port. Simply making requests to your server will return the web server's default page unless you configure otherwise. You'll need to show us your nginx configuration to troubleshoot. This can also help you try and figure out where the problem is: [nginxconfig.io](https://nginxconfig.io/?0.php=false&amp;0.proxy)
*OwO, what's this? * It's your **3rd Cakeday** LoKSET! ^(hug)
Makes sense! Huge thanks!
"C# player's guide" is what I enjoyed reading. Maybe not among the best, but certainly the one I enjoyed the most to read and got through quickly as a result.
You can deploy your netcore app in a self-contained manner that wouldn't require installing libraries on the sub-system. Personally, I'd start with a clean project file for the latest netcore and then port all your code and references over, this of course depends on the size of your application whether it makes the most sense. There is also a guide [here](https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/) from Microsoft they've prepared for those porting over their old Windows app to netcore 3.0, which includes the capability to port *with Windows dependencies* aka for the GUI. I have plenty of netcore apps running entirely on the Linux-only subsystem, it's really become painless!
Don't worry, no one thinks that.
Damn, I've been waiting for that feature. 
Well someone else on this thread said it still works if you use the command line and do dotnet new winforms. Optionally you can do dotnet new winforms -o MyAppName to name it. Also if you don't know how to use those commands yet they're not that hard to learn. 
I keep all that RC / beta stuff off my machine. If I was more industrious I'd spin up a vm or something.
What annoys me is the lack of winforms gui editor in VS for dotnet core (unless this version has added it). 
Always exciting to code games, but it's very difficult to offer help without some context. What engine are you using? Or what language? 
You sound like you're trying to learn while you go, but without knowing some basics you're not going to understand how to even implement what someone could suggest to you. I promise if you take a few months to do some very basic learning of C#, you'll be able to do something like that quite easily.
unfortunately with the information you're giving us it's close to impossible to help you in any way! a script of what language? what engine are you using? etc.
I started off doing WPF development (because it was what I was hired to do), but spent enough free time learning ASP.NET / angular.js (now using the latest ASP.NET Core and Angular hotness) that I eventually migrated our entire app suite to this. WPF gave me a really good base for being good at back end development in ASP.NET and I'm glad that I still get to work with C# because I really enjoy it as a language. Broaden your horizons, break outside of your comfort zone, make sure to push yourself to learn new things every day, and don't be afraid of changing things up.
Had anyone found a way to stack tabs vertically? Like the custom document well with productivity power tools? That is the only reason I am not using VS2019 right now. 
Note that `.Select()` does not execute anything, it uses deferred execution. I never use XML but I believe `selectedNames` will just be an `IEnumerable&lt;string&gt;` that stores the selection logic you've made. `IEnumerable` types do not in general have info on count or indices. So when you call `selectedNames.Count()` it will enumerate over all of the descendants, find the ones called "name", select the name value, keep iterating until the end, and return the number of times it iterated. Then when you call `selectedNames.ElementAt(selectedNameIndex)` it will enumerate `selectedNameIndex` times and then return the value at that spot. Essentially you are doing the iteration and descendent/value selection twice. You could change this by adding `.ToList()` at the end of `selectedNames` declaration, then it will be a `List&lt;string&gt;` instead. The enumeration/selection will happen at the `.ToList()` call. Optionally you could change `selectedNames.Count()` to `selectedNames.Count` and `selectedNames.ElementAt(selectedNameIndex)` to `selectedNames[selectedNameIndex]`. This won't change the semantics though, the original method calls are smart enough to know it's from a `List&lt;string&gt;` and use that form anyway. **Likely not to make a huge difference in your case**, but it can if the amount of names is long enough. Indeed sometimes you may not want to instantiate a List, because it will require holding all of the names in memory. It's something to think about moving forward though, because this can be incredibly damning in loops, e.g.: ``` var people = // Some collection of people that you want to check are in the XML var selectedNames = xdoc.Descendants("name").Select(selectednamesnodes =&gt; selectednamesnodes.Value); foreach (var person in people) { if (selectedNames.Contains(person.Name)) { person.InXml = true; } } ``` Assuming `people` and `selectedNames` have the same count, this is a O(n^2) operation. By just adding the `.ToList()` it becomes O(n). 
He’s 12 and won’t go anymore into detail because he thinks his idea that’s already been done before will get stolen. Why make games if you aren’t studying the ones around you? Why make games if you haven’t even learned how to make them? Learning as you go is going to be a great loss in motivation after you find out a feature you need requires a novice programmer or artist. It will also lead to a major burnout. One request though, don’t post your questions here no more because you have not learned the language. You just asked us to write your script. We’re not here to write your shitty game idea for you, we don’t need Roblox 2.
Within 4 months we will have the designer for netcore 3.0 winforms. I saw a road map and they showed that their goal for Q2 fy2019 is to get that out.
He posted in r/csharp, thought that was obvious. And if you could use that information, what engine out there is easily accessible and widely available that has C# support? Unity.
He was pretty polite about it. Why be rude to a 12 year old? Do you feel better about yourself after posting that? Clearly he doesn't know the language yet. He just said he is trying to see what he is able to do. Most likely his secret novel idea isn't at all, but there is no need to be rude to him about it. He didn't ask anyone to write a script for him, he asked for help on writing a script. Hell, his question may be better directed to r/unity, but, again, no need to be rude about it. He also didn't call himself a programmer, but hammering into him that he isn't one seems, yet again, unnecessarily rude. You just come off as insecure and petty to be picking on a kid like that. I seriously do hope you are a child as well, because otherwise an adult doing this to a polite 12 year-old is pathetic and immature to a level that is hard to imagine.
If you remove `en-us` from the link, Microsoft will automatically localize it to your language 
Dark Mode 100%
It's out March 2nd, so just a couple of days now! I have the early access ebook already, liking it so far.
“I am a 12 year old programmer”, it’s right in the title for fucks sake. I hope you are a child too, because your reading and comprehension skills are much worse than this kids. If you want to write this kids game for him then be my guest, but Unity already has a great written API, several tutorials, and a huge and growing community. A horse can be lead to water but you can’t make it drink. If he isn’t willing to learn the language to his fullest ability and cherish the fact that an API exists as well for a plethora of documentation, then I spit in thee. I would help but he barely knows what he wants and I don’t want my name in the credits of Roblox 2 or Prunescape.
One nice thing is that it's written by the creator of LinqPad, and LinqPad provides a convenient option to download all the code samples from the book.
Removed: Rule 4.
Thank you. It's inspiring to hear that from you.
If you have any questions, feel free to hit me up on DM here. I like helping other people out because I know what it was like to have to find my way myself, and how helpful it would have been to have a solid mentor to get me where I am today.
Thanks a lot Haimeh.
Is visual studio for Mac still Xamarian studio with a new logo and splash screen?
i posted a bit before that mod, but refer to the stickied comment.
Thanks a lot.
This post has been removed. &amp;#x200B; **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
I'll allow it this time due to the discussion, but please be mindful of our subreddit rules: &amp;#x200B; **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
This guy isn’t really well known, but has an ok post here and there /s https://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx
Cool story. 
How do you know there's no reason to protect it? A commercial entity is using the OPs IP, fine. But they don't have any right to the source code just because of that. They're using a program to streamline a process, meaning it has commercial value, ergo he's well within his rights to seek advice and attempt to protect what's legally his.
I would give my high school the code of as many projects as I could.
I doubt you could consider a high school a commercial entity... At least where I live. 
Thanks for the help guys! It's been a busy day and I only had enough time to quickly try your suggestions. This time I did get a response, but its says "bad request error". I will have more time tomorrow to make sure I didnt miss anything and then post my code and more details from the error. Could you expand more on the side note about dispose? Or point me somewhere to learn more about what this is actually doing to make it slower? Thanks again!
Good question. Unity just wrote a good blog post talking about some of this, take a look: https://blogs.unity3d.com/2019/02/26/on-dots-c-c/
This is what I wanted to hear. In 2017 it's almost unusable 
im using unity and c#
I know a bit about c# and a lot about html, im advanced enough to know how to create a script in unity and set the input for the scripts. Im better at designing than scripting though so I need help. and being homeschooled in the middle of nowhere so I don't really have friends to help me out. don't go assuming im just a stupid wannabe scriptor because im 12
This explains some of the ramifications: [click](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/) 
I know a lot about html just not a lot about c# and that being the main language of unity I need help (also roblox is for dumbass 5 year olds)
* 1 - between 0 and 5x depending * 2 of course it depends, on many things! * 3 anything The question of "naive" C++ and C# is..tricky. Is the C# also naive? If you delve into unsafe C# and avoiding allocations and using the new platform intrinsics, you can beat naive C++, but then it isn't naive C#. But C and C++ give you the power to almost completely leverage the CPU, while C# has been offering more tools to that end lately, it still isn't as much. For instance with .NET Core3, you will finally get access to almost all of the SIMD intrinsics in SSE2, but I don't know about AVX2 and AVX512, or NEON, or ARM's newer SIMD stuff. All of that stuff is available in C and C++, and the C and C++ compilers will autovectorize a lot of code while the .NET jit will not (though the AOT compilation might) and of course, if you are using unity, they have the new burst compiler, which lets you write bits of code in a special subset of C# that gets compiled to very, very fast code. 
Love the "Thread.Sleep(2900);" that fakes a loading time lmao
You can use c# for anything. &amp;#x200B; If you are asking this question, its probably not something you need to worry about. Why? Because if you cannot answer the question yourself, there is no way you are going to build something where the performance difference is going to matter. &amp;#x200B; Just build the damn thing so that it works, worry about performance after it EXISTS. &amp;#x200B; Good luck! &amp;#x200B;
**duplicate**
Alright. Possible that I am wrong but I think the property that contains the string is called Text by every of these elements. Anyway, you can make a list with gui elements and than grab the text with a loop. Just like this (forgive me the mobile formating): List&lt;Label&gt; list = new List&lt;Label&gt;() { label1, label2, label3} ; string temp = ""; foreach(var item in list) { temp = item.Text + temp; } After putting all the text in a string you can write it in a textfile like I did in my earlier comment 
Hello guys I need help with my school project. I need someone to not only help fixing the code, but to also explain what I did wrong. Sorry iam new to programing and my English is not the best. It's called the back pack. The program needs to When you press 1. Save what ever you write when you press 2. Print out what you wrote when you press 3 empty the content when you press 4 quit the program This I as far as I have gotten. I think I need to declare a string outside the loop, but i can't get it to work. The menu also seems so loop i don't want it to so that. namespace project { class Program { static void Main(string[] args) { bool isrunning = true; while (isrunning) { Console.WriteLine("\n\tVälkommen till programmet!"); // flytta Console.WriteLine("\n\t[ 1 ] Add "); Console.WriteLine("\t[ 2 ] Print "); Console.WriteLine("\t[ 3 ] Empty "); Console.WriteLine("\t[ 4 ] quit "); Console.Write("\t Välj"); int option = Convert.ToInt32(Console.ReadLine()); string content = ""; if (option == 1) { Console.Write("\tLägg till: "); content += ", " + Console.ReadLine(); } else if (option == 2) { Console.WriteLine(content); } else if (option == 3) { content = ""; } else if (option == 4) { isrunning = false; } { } } } } } 
Thats true. I will not touch my .Net Full Projects until they need a replacement. Just want to warn everybody to not start with it or ignore learning Core.
The menu only loops if you put it inside the loop. If you don’t want it to loop put it outside the loop. I’d suggest to add a method ShowMenu() with the menu code inside to improve readability here. (Also you because you most probably want to show it again in case the user input is invalid.) You most probably want parse and not convert the string: Int32.TryParse(Console.Read..., out int selection) and show the menu again in case that returns false.
It's good that ``dynamic`` is tiny.
I thought that was developed by ms and that was built into vs 2019 lol
I need to keep it simple and use the thing i the chapters i have read. All i want is for the variable content not to empty itself and loop.
Glad I amused you haha. Seriously though , this is all very new to me so I was just playing around with the language and trying to figure things out! :)
Do you have an example of what you mean? 
Thanks :)
Hi, thanks for the reply. The point of using the string builder was because I had already used Console.Writeline 300 times building hello world applications so I wanted to try something different. As for the delay, again I'm just learning what things do and wanted a bit of a delay as I was live streaming the actual draw. Thanks for the code snippet, I'll try and re-create that when I make some changes to my code this week. &amp;#x200B;
don’t worry, i did that a lot when i started programming in c# :D (which was pretty much my first language btw)
This is C#, not C. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions
Check if you have the setting: Tools--&gt;Options --&gt; Projects and Solutions --&gt;.NET Core --&gt; Use preview of the .NET Core SDK
Mostly, yes. It’s an evolved MonoDevelop.
#BWHAT
...
Have fun un-installing all that junk when the full product comes out.
Yep, that works fine with .Net Core 3.0 preview installed. There still doesn't appear to be a visual editor though - I suspect the workaround in the link I posted area will still work, I'll give it a go later.
Try writing something that uses an api, like say, Google maps. Then write an api other programs can access to do something. Microservices are just like regular services, just, you know, smaller.
Reboot required on install, again :/
Just buy a cheap second have Mac Mini. You just need it for the compile that you push to the App Store.
yeah, but what about an api gateway? a discovering service? a message bus?
if you use xamarin nope
You did not answer my question. I want to develop apps in the go. That might be a working solution if I can make iOS apps without having to emulate.
Link?
It’s hard to say for sure without knowing what all other things you do with the computer and what other computers you have. For me, I buy powerful non-Apple gear and do all my work and coding on that. Then use the Mac Mini to compile the final app. Unity is my environment of choice for cross platform development of mobile apps.
A lot of **get**, but where is *set*?
No need to be sarcastic, you said you were getting into it. It seemed like a good idea to start with the basics. If you are already comfortable with that level of things, then that's a different story.
i wasn't sarcastic, i'm just looking for more info :)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/microservices] [where to getting started with microservices?](https://www.reddit.com/r/microservices/comments/avp853/where_to_getting_started_with_microservices/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It seems interesting, do you need any docker knowledge?
As far as I know, even for Xamarin you need XCode to sign your package before it can be deployed. XCode needs a Mac and a license sooo expensive. &amp;#x200B; I will add that the emulator was garbage and we used an iPhone to test our app. &amp;#x200B; Maybe the situation changed since, but the good news is you don't need high-end mac, the cheapest around might do the job
What about developing on the go? This is one of the things that is major for me. I have several laptops running Windows 10, their models don’t matter. I want to be able to develop on the go.
&gt; One of the apps I have made is a remote utility for Windows. I made the Windows part, now all I need to do is make the iOS and Android part that controls it and sends the instructions. I do not know if the apple store allows this. You might want to check before you do this :). **You will always need a mac to build your code for ios and to get it published**. It is inevitable. You can _write_ your code for iOS on Windows, but if you use Xamarin iOS and want to work on the screen layout, you need to be connected to a mac to render the view or just write it all by hand. Your options are: - write the code on a mac - use a remote build host for mac. This means you connect xamarin to a mac by internet and then it sends the code to the mac and the mac will compile it, sending back the results. This allows you to see the xamarin ios view and also use an ios emulator because it just emulates it on mac and sends the screen to windows :) You can use a service called "mac in the cloud" to rent a mac for money and shut it down when you dont need it. You could also buy a cheap old mac mini that would build your code. That is a one time purchase. Either way, if you build on windows, you have to connect the mac as a remote build host. This is very easy.
The [pairing guide](https://docs.microsoft.com/en-us/xamarin/ios/get-started/installation/windows/connecting-to-mac/) mention SSH for connecting, so presumably if you have fast connection, it's viable to VPN to your office/home network and connect there. If you want to develop offline on the go though.... it gotta be an actual macOS laptop.
&gt; They're using a program to streamline a process Replaces drawing names out of a hat. I'm sure that's saving the school district millions ◔_◔
A good start would be a direct sample from Microsoft (https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/) If you read this doc and study the sample repo (https://github.com/dotnet-architecture/eShopOnContainers) you should have an understanding of the Microservice Architecture in the Microsoft environment. 
Most people use properties for read-only, yet non-static variables, that's why set is smapler
Hi thanks for feedback. &amp;#x200B; Although I fear my level of C# is quite a bit beneath some of the things are are saying. I'm not quite sure I understand. &amp;#x200B;
very intreresting! thank you :)
IEnumerable&lt;TransformBlock&lt;string, OutputPipelineParams&gt;&gt; ServerPipeline() { yield return new TransformBlock&lt;string, OutputPipelineParams&gt;(async HTTP_IP =&gt; { OutputPipelineParams output = new OutputPipelineParams(); HttpListener listener; AutoResetEvent waitHandle = new AutoResetEvent(true); listener = new HttpListener(); listener.Prefixes.Add(HTTP_IP + ":" + 8183 + "/"); listener.Start(); HttpListenerContext sock = await listener.GetContextAsync(); waitHandle.WaitOne(); output = new OutputPipelineParams() { Responder = new HttpContextResponder { OutputContext = sock }, Data = Encoding.UTF8.GetBytes(sock.Request.RawUrl).AsMemory() }; return output; }); } Early thoughts on spinning it over a input of some sort.. for instance a excel file or a column in a csv E.g. foreach(var output in ServerPipeline()) { }
xamarin and xamarin forms dont need ios or android. just write once and publish to both platforms
It's private;
That was the first thing I did. 
Software Developer, almost 4 years of exp in .net/.net core/ azure devops/ microservices/ docker. &amp;#x200B; Currently working in London, looking for nice challenges where I can challenge myself and learn a lot! Also interested in remote jobs. &amp;#x200B;
Nah it should be fine without the reboot. I'm more concerned with how from the last preview to the release candidate they broke the functionality to create netcore desktop apps. You have to use dotnet new for the time being.
I didn't say I installed it.
#**I’m sorry, your question has been marked as a duplicate.**
I've fucked up my dev machine enough with VS installation craziness that I'm not going to risk it. Last time it took a week to get my machine back in dev order (mostly IT fuckup with expired backup images).
Thanks for this response - yes! That's exactly my problem. My Nginx default config file looks like this: `server {` `listen 80 default_server;` `# listen [::]:80 default_server deffered;` `return 444;` &amp;#x200B; `# SSL configuration` `#` `# listen 443 ssl default_server;` `# listen [::]:443 ssl default_server;` `#` `# Note: You should disable gzip for SSL traffic.` `# See:` [`https://bugs.debian.org/773332`](https://bugs.debian.org/773332) `#` `# Read up on ssl_ciphers to ensure a secure configuration.` `# See:` [`https://bugs.debian.org/765782`](https://bugs.debian.org/765782) `#` `# Self signed certs generated by the ssl-cert package` `# Don't use them in a production server!` `#` `# include snippets/snakeoil.conf;` &amp;#x200B; `root /var/www/html;` &amp;#x200B; `# Add index.php to the list if you are using PHP` `index index.html index.htm index.nginx-debian.html;` &amp;#x200B; `server_name` [`example.com`](https://example.com) `*.example.com;` &amp;#x200B; `location / {` `proxy_pass` [`http://localhost:5000`](http://localhost:5000)`;` `proxy_http_version 1.1;` `proxy_set_header Upgrade $http_upgrade;` `proxy_set_header Connection keep-alive;` `proxy_set_header Host $host;` `proxy_cache_bypass $http_upgrade;` `proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;` `proxy_set_header X-Forwarded-Proto $scheme;` `}` &amp;#x200B; `# pass the PHP scripts to FastCGI server listening on` [`127.0.0.1:9000`](https://127.0.0.1:9000) `#` `#location ~ \.php$ {` `# include snippets/fastcgi-php.conf;` `#` `# # With php7.0-cgi alone:` `# fastcgi_pass` [`127.0.0.1:9000`](https://127.0.0.1:9000)`;` `# # With php7.0-fpm:` `# fastcgi_pass unix:/run/php/php7.0-fpm.sock;` `#}` &amp;#x200B; `# deny access to .htaccess files, if Apache's document root` `# concurs with nginx's one` `#` `#location ~ /\.ht {` `# deny all;` `#}` `}` &amp;#x200B; &amp;#x200B; `# Virtual Host configuration for` [`example.com`](https://example.com) `#` `# You can move that to a different file under sites-available/ and symlink that` `# to sites-enabled/ to enable it.` `#` `#server {` `# listen 80;` `# listen [::]:80;` `#` `# server_name` [`example.com`](https://example.com)`;` `#` `# root /var/www/example.com;` `# index index.html;` `#` `# location / {` `# try_files $uri $uri/ =404;` `# }` `#}` Thanks for the link, I'll follow up with that now.
Ah, couldn't figure out why the Core 3.0 WPF stuff wasn't working, but a reboot fixed it.
Dude thank you so much for the help! I really appreciate it!
Thank you!!
Removed: Rule 5.
Removed: Rule 5.
It has go-live license and eventualy will update to final version. No need to uninstall anything
learn how to develop for web/mobile?
To publish or build the iOS app you NEED a mac with XCode or to use a remote service like Mac in the Cloud. You may be able to get away with a hackintosh, but I've heard mixed success on that (not that I've looked extensively).
&gt; wedev ? desktop ? database ? In webdev performance difference of C++ and C# is negligible mostly. In database (what do you mean by that? SQL querying?) all your work will be done by actual database. In desktop? Does performance for your case matter compared to development speed and safety?
Punta Cana, DR. Freelance with seven years of experience working with .net stack, specialized in Xamarin development but also feel confortable working with [asp.net/](https://asp.net/) [asp.net](https://asp.net) core. Looking for projects or part-times, open to full time for the correct position. You can find my portfolio [here](https://raulmonteroc.com/portfolio/)
im pretty sure its not necessary you can easily setup a cloud build on services like azure devops plugin your ios publish certs and auto push them into app store 
Rule 4. 
not sure what you mean by this.
You might want to tell your boss you aren't qualified to do what they want. Given the problem you are describing and the questions you are asking this might not go well for you. Most people appreciate honesty so it's best to be honest up front about how you will need a lot of time to learn. That being said, Entity framework is probably the easiest way for you do figure out how to talk to a database.
Rule 4 of the subreddit he means
&gt; I would also ask the school that any changes be put into a pull request and brought back to the git hub repo so you can review and even update the changes with commentary if you desire. So... release under GPL instead of MIT?
Look at the forum rules. Rule 4 is: **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
&gt;ave to develop and enterprise application that pulls and rights data to a company database. Is this possible through SQL and WinForm? I need the database to basically be like a cloud where you can pull data or write to it at anytime. Thanks in advance! This project is something that I am doing for college, not an actual company. But thanks for the help.
Have you received guidance or info up to this point, I'd hope you weren't thrown a project like this without some knowledge first. Either way, you can use winforms(or whatever else), a sql database and entity framework to do what you want
This post has been removed. &amp;#x200B; **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
&gt;ct like this without some knowledge first. &gt; &gt;Either way, you can use winforms(or whatever else), a sql database and entity framework Thanks for the help, and yes I have received guidance. It is a Enterprise Application Programming class (basically just a c# class). I don't have a database class until next year. The assignment was just to make a windows form app, but I want to do a little extra and maybe get extra credit lol. Anyways, thanks again for the help!
Pardon my ignorance, when I download the installer, the only options of installation are 2017 15.9 professional or Enterprise. Any thoughts why that may be? I am even retrieving the installer from the Visual Studio Benefits Products page.
I've removed this post, but I would recommend checking out [/r/learnprogramming](https://www.reddit.com/r/learnprogramming) or [/r/programmingbuddies](https://www.reddit.com/r/programmingbuddies) for guidance on general software development!
Actually, some do. They've come and argued about it in this subreddit.
Core 3.0 will change that.
It would be interesting if they ported Visual Studio to Core. That would be a huge bellwether for the way the wind is blowing in MS land. 
The fact that you work on a given tech or platform at your day job doesn't mean it have be the only one you use. As a developer you should be able to get a pulse on which platforms and languages can give you the most ROI (return of investment) for your time spent learning them. You already know C#, use that knowledge to your advantage and explore another of the .net platforms, this way the learning curve lessens by a lot and you'll have a new tool under your belt. Staying relevant in IT is simply to know a tech stack **really well** on a platform that is in demand. Knowing two will let you diversify and expand your opportunities.
Sure, DM me and I help you out. No need to pay for it.
That would be to compel them to do so. I wouldn't be so pushy. Not for this.
After installing resharper, visual studio intellisense flashes before resharper intellisense kicks in. It's very annoying for me. Does anyone have similar problem?
Thanks a lot for the advice
Might be a bit too early for that, but I wouldn't be surprised if that's the path MS takes 2 to 4 years from now.
i mean you don't have to load all the names and emails, you just need the contestants count. after you get the random index of the winning contestant you can then load its name and email unless you have to implement some sort of feature that requires all the names and all the emails.
I am actually OK with constants being all caps and including underscores. It makes it obvious that it is a constant which is actually important information to know since, upon compilation, that constant is evaluated and hardcoded into the *consuming* assembly. If that constant came from another assembly and the value of the constant was changed, the *consuming* assembly will need to be recompiled against that new version or it will continue to use the old value of the constant. Of course, all of this is only worth noting if we are implementing a constant -- whether or not one *should* implement a constant is another discussion. All said, to each their own (as far as constant naming conventions, anyway). Whether it is `ALL_CAPS` or `PascalCase`, it is OK with me (no hungarian or _ prefix). It would go a long way if VS highlighted constants differently, though.
If you are asking which is better. This sub will say it's C#. If you asked the Java sub they'd say Definitely C#.
That's a bad attitude kid. I was telling you exactly what I would want to be told. I wasn't even considering your age. Good luck.
Are you able to author the XML file or are you only able to read it? If the former is possible, you should look into XML serialization. The idea is that you can turn a class (preferably a class that is a data transfer object or DTO i.e just public properties with public gets and sets and NO behavior) into an XML file by serializing it. You can then *deserialize* the XML string/file back into an instance of that class later. The same can be done with many formats like JSON. Other than that, you should look at how and when to use `var` to remove some of the verbosity of code. For example: Random rng = new Random(); // stating Random twice is redundant var rng2 = new Random(); // better, Random isn't stated twice There are a few situations where you *have* to use var (like with anonymous types) but, generally, we use var to aid in readability. You don't want to use var if it nehatively impacts readability. Example: var result = MyClass.Execute(); // what is 'result'? I have to look at the Execute method to figure out what it is returning now. It could be returning an IResult object or maybe even an int32 exit code, who knows. var person = GetPerson() // since the variable and method names gives ud some context as to the type, it should be OK to use var here
That website is so poor on mobile! But interesting read nonetheless. 
The basics are pretty similar, the differences show mainly in class-structures. It also depends on what you would like to program. On one hand, I find Xamarin (Apps in C#) and Mono (Desktop-Applications for Linux in C#) not that good, while Java is pretty much a multi-plattform thing. On the other hand, C# has a lot of great features for windowsapplications and it completely dominates Java in the webapplication field with ASP.net
Every preview just hung both my Mac and windows machines. The bar isn’t high for Release quality these days
Buy any other book that isn't part of the Head First series. As to what language you should learn, from what I have seen there are still more jobs in Java out there than in C#. Though, I personally feel that C# is the better language.
Not UWP. I wonder what is their intention with it. I don't expect it going away given the upcoming lite version of Windows for Surface etc. will support win32 apps (WPF, WinForms) in some sort of vitualized mode, or no at all and the virtualized mode is for desktop. Can't remember which it is. 
You should be aware that it isn't always the case that methods == functions when we are talking about them. Sometimes, methods and functions are distinguished by whether or not they return something (i.e methods return `void` and functions actually return a value). Basically, methods just *do* something and functions do something + return something. Most of the time, though, when talking about these kinds of things, the words method and function are used interchangeably.
If you are confused by `O(n^2)` or `O(n)`, google something like "O-Notation in programming".
Ah fuck I messed up the title. I meant "Head first C# " lol. Sorry, I'll delete it.
Highly recommend. This book is a gigantic brick but there's a huge number of well presented information in it. 
You're talking about support for an old version. They are talking about support for the framework in general, and used the phrase "move forward and support". Not just, support. No misunderstanding on my part. They will likely continue to add some security fixes and things enterprise needs in terms of new features for a few years before calling out an EOS date.
Most likely.
For a complete programming beginner the choice is clearly the first.
This release candidate is garbage. Ghosting like crazy. I don't know how Microsoft can give us this steaming pile of crap and tell us it's a release candidate. 
They are clearly saying the word to move forward with it and said it would move at a slower rate than core. Probably to add things that are required for enterprise development, and new Windows 10 API features. No one is saying "they will continue to support .net 2.0!" You're splitting hairs.
So you want Roblox 2 then?
Would you be able to share the code you've tried? You shouldn't need regex for this. String.split will get you most of the way
String.Split doesn't work beyond the most simplistic use cases. It breaks very easily as soon as you start nesting quotation marks or commas inside of quotations. This is why you need regex
My 2 cents. I love C# in depth, and I believe it is simply imprescindible. However, having said that, it doesn’t try to teach the whole .net, but to teach a small (but really important) set of features in a really great depth. So, to summarise: clearly the wrong book to begin learning.net, but one of the 2 imprescindible ones (the other is CLR via C#)
Absolutely. My one gripe with it (shared by many books and tutorials) is that some sections refer to ‘projects’ written earlier in the book. Which is annoying if you try to skip ahead to the parts you need to know, and for some parts expects that you approach it cover to cover in a linear fashion. 
&gt; You can use c# for anything. An operating system kernel is probably a stretch. 
Continue down the dark alley that is regex, and somebody ought to end up getting hurt. Would rather look for a tokenizer.
Do you have working code for this?
&gt; It breaks very easily as soon as you start nesting quotation marks or commas inside of quotations. And why is that a problem? Just deal with it. &gt; This is why you need regex No, you absolutely don't need regex.
Sorry, I should have been more clear. If the parameters are always after the first space, we can use indexOf to split the string into two elements: command and parameters. Then we can split the parameters by comma. Trim each parameter and that should give you clean output of command and parameter list 
&gt;And why is that a problem? Just deal with it. It's a problem because your proposed solution doesn't work. Just saying "deal with it" isn't going to fix that. &gt;No, you absolutely don't need regex. Show me a complete working, elegant and performant solution that uses split then if you're so confident.
Check if you have the async intellisense on. Check under General &gt; Preview Features. If that's fixing it make sure to provide feedback.
If it was asynchronous it wouldn't be causing ghosting. That's the whole point of asynchronous. 
Do you have working code or is this speculation?
Nope. Last time I used a tokenizer was pascal like 20 years ago. I’m standing by my statement though...
&gt; It's a problem because your proposed solution doesn't work. Uhh... Sure it does. &gt; Show me a complete working, elegant and performant solution that uses split then if you're so confident. Quick hacked solution: var str = @"MyCommand 6,""Quote in ""the middle of a string"",5"; var firstSplit = str.Split(new[] { ' ' }, 2, StringSplitOptions.RemoveEmptyEntries); var command = firstSplit[0]; var myParams = ParseParams(firstSplit[1]).ToList(); IEnumerable&lt;string&gt; ParseParams(string query) { var s = query.Split(','); for (var i = 0; i &lt; s.Length; ++i) { var c = s[i]; while (c.StartsWith("\"") &amp;&amp; !c.EndsWith("\"")) { c += c[++i]; } yield return c; } } Can easily be improved in speed and memory usage, especially when making use of `Span&lt;T&gt;`.
"Then we can split the parameters by comma. " That breaks when: MyCommand 1,"hello,there,people",5 Like I said, it's not as easy as just using split That does not work because a single parameter may be a quoted comment that contains commas. Your method would split that single 
Asynchronous does not magically fix performance issues. Its a preview feature for a reason. Intellisense is noticeably slower and more sluggish with that feature enabled for me.
Try running the following through that: MyCommand 1,"2,3,4",5 
The resulting params are: 1 "234" 5 So everything alright.
That is not right the parameters are: 1 2,3,4 5
That was not clear from your post. And even if so: Just add a check for the quotes character and take a substring. Voila, done, easy peasy.
Well the intellisense couldn't have been making it slow because I wasn't even coding yet.
&gt;That was not clear from your post. It's very clear, the middle parameter is in quotation marks and is standard programming syntax for a literal. &gt;Just add a check for the quotes character and take a substring. Voila, done, easy peasy. But there may be moire nested quotation marks, even or uneven, and more commas. So do you keep making exceptions? This is the route I took and it ended up being a mess. This is why I asked for a finished working solution, not speculation. Thanks for your effort though. 
&gt; It's very clear, the middle parameter is in quotation marks and is standard programming syntax for a literal. It was clear that there are quotation marks, but it was not clear that you want them gone in your result. &gt; But there may be moire nested quotation marks, even or uneven, and more commas. So do you keep making exceptions? This is the route I took and it ended up being a mess. There's no need for any more exceptions. It works like that. Or do you have an example where it wouldn't work? Because your example set is very limited and leaves a lot of speculation open. &gt; This is why I asked for a finished working solution, not speculation. Still the question is open: What for? Homework? For commercial applications? You ask us to do your work, but then you respond very rude.
You're so one dimensional. The school is demanding the source code so that they can extend the functionality, that is abundantly clear, otherwise why bother. If it was as simple as you're implying they'd simply download visual studio, scaffold an ASP.NET Core App, and use entity framework to replicate the simple functionality they've currently got. Job done in less than a day. Schools are registered businesses, even if they don't make money or are owned by the government. There's more to this story than what's on the surface, if you can't see that than you've got blinders on to the world. OP is well entitled to not allow any commercial entity to simply acquire his property. He was very smart to only hand over the executable when they first got a hold of it.
There are Nuget packages out there that handle all of this. Most of them depend upon the idea that you will create a class that encapsulates all the possible parameters your code will accept. It then handles the wireup to them. Have you tried any of those yet?
&gt; It was clear that there are quotation marks, but it was not clear that you want them gone in your result. Yes it was, I literally spelled this out in my 6th example that was in my OP: MyCommand "5,6,7,something,5" //1 param &gt;There's no need for any more exceptions. It works like that. Or do you have an example where it wouldn't work? Because your example set is very limited and leaves a lot of speculation open. There is, because your example code *does not work*. There's no speculation at all, I mentioned in my OP how many parameters should be produced when there's commas inside of quotation marks. It's also a well known how quotation marks work in programming languages as literals. &gt;Still the question is open: What for? Homework? For commercial applications? You ask us to do your work, but then you respond very rude. It's for personal use. I'm not being rude at all. I know there's lots of gotchas with this, I asked in my OP for complete working solutions and not speculation. Yet that's exactly what I've got, speculation or code that doesn't work. All I've done is pointed this out. I appreciate the effort, but I asked for a working answer.
I think this is a little better.. :d public class PipelineTemplate { public struct OutputPipelineParams { public HttpContextResponder Responder; public ReadOnlyMemory&lt;byte&gt; Data; public AutoResetEvent WaitHandle; } private ILogger Logger { get; set; } private TemplateObjectHandler ObjectHandler { get; set; } public PipelineTemplate() { Logger = new ConsoleLogger(); ObjectHandler = new TemplateObjectHandler(new TemplateContainer&lt;TemplateObject&gt;(), Logger); } const int Port = 8183; public IEnumerable&lt;OutputPipelineParams&gt; Server(string HTTP_IP) { WaitHandle[] waitHandles; waitHandles = new WaitHandle[2]; for (int i = 0; i &lt; 2; ++i) { waitHandles[i] = new AutoResetEvent(true); } using (HttpListener listener = new HttpListener()) { listener.Prefixes.Add(HTTP_IP + ":" + Port + "/"); listener.Start(); while (true) { HttpListenerContext sock = listener.GetContext(); int WaitId = WaitHandle.WaitAny(waitHandles); yield return new OutputPipelineParams() { Responder = new HttpContextResponder { OutputContext = sock }, Data = Encoding.UTF8.GetBytes(sock.Request.RawUrl).AsMemory(), WaitHandle = waitHandles[WaitId] as AutoResetEvent }; } } } public bool CommandProcessor(OutputPipelineParams Command) { try { ReadOnlySpan&lt;byte&gt; sdata = Command.Data.Span; switch (Encoding.UTF8.GetString(sdata.Slice(0, sdata.IndexOf(Encoding.UTF8.GetBytes("=")) + 1).ToArray())) { case "/?reportname=": ObjectHandler.UpdateOrCreateHeaderOrContent(Command.Responder, sdata); break; case "/?getreport=": ObjectHandler.GetObjectHandlerReports(Command.Responder, sdata, false); break; case "/?showreports": StringBuilder sbdata = new StringBuilder(); sbdata.AppendLine("&lt;center&gt;&lt;p&gt;Available Reports&lt;/p&gt;&lt;table&gt;"); foreach (ReadOnlyMemory&lt;byte&gt; report in (from reportKeys in ObjectHandler.Container.TemplateObjects select reportKeys.NameOfReport).Distinct()) { sbdata.AppendLine("&lt;tr&gt;&lt;td&gt;" + Encoding.UTF8.GetString(report.ToArray()) + "&lt;/td&gt;&lt;/tr&gt;"); } sbdata.AppendLine("&lt;/table&gt;&lt;/center&gt;"); Command.Responder.WriteResponse(sbdata.ToString()); break; default: Cleanup(); return false; } Cleanup(); return true; } catch (Exception ex) { while (ex.InnerException != null) { ex = ex.InnerException; } Logger.LogError(ex, ex.Message); } Cleanup(); return false; void Cleanup() { Command.Responder.OutputContext.Response.Close(); Command.WaitHandle.Set(); } } } public class Program { public static void Main() { PipelineTemplate pipeline = new PipelineTemplate(); var Commands = (from output in pipeline.Server("http://127.0.0.1") where pipeline.CommandProcessor(output) == true select output).ToList(); } }
No I've not tried them. Do you happen to know the name of the packages? From what you've said they are mainly aimed at processing the command, which I don't need. It's literally just parsing the string into an array. Thanks.
Hello ziplock9000, I hope you have a wonderful day!
Try this one. I used it a couple times, found it to work very well. https://www.nuget.org/packages/CommandLineParser/
Indeed, we'll fix that asap, thanks 
Thanks I'll take a look at this :)
What do you mean by ghosting then?
&gt; Yes it was, I literally spelled this out in my 6th example that was in my OP: &gt; MyCommand "5,6,7,something,5" //1 param That only specifies that you want one parameter, but it does not specify if the parameter is `"5,6,7,something,5"` or `5,6,7,something,5`. &gt; I asked for a working answer. https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQBEJinANjASQDsYIFsBjCAgWwAdcIaITYBLAeyIBoYQE4PACYgA1AB8AAgAYABJICMAbgCwAKBnyFAFlUa5igHQAZNkQCOeyQCZp6yQGYtANnnWtAdnUBvdbP/yToquktqyALJQZgAUAJR+Ab5qASmyAPQAVAmpsgAqKDDR2TkBAEThAJ4Awhw0NFBEQqXcxSWy5dW19Y3NrSVEEADusqbIMAA8itIAfHGxem35Y0XJbWWVNXUNQrIK3NbcDtzavatr7Rtd26fn/gPDoxNT07Le7QrN7dafpQ4/J7IAL7zPr+JaFUGpDqbbo7W7w2TObgebgADhut2hVx6LTOa3uIzYY0mChmr3azh+Hh+6KBILxKXBK3hWK2jV23AAOqUABYQXC4Djc7gAVgx51ZsPF+KGhOJz3JpQ+3HafIFHB+YrpCxKTMhKUl20RXNKAEU4BxSLIzLJuTA+bIaGwhEJGLIOGBZFAtNJhWLcSzLmymgHbgTHiSyW9SpSVWaLVabXaHU6XW6PV6fZrStrIRk0pDMpC9QySob2dyRdwkSjkLUIPazABzUXc6Vtcsh/UBcNEp6kl7Rqs17h15iNogtrXAnU5fPFgrMzFB2Ec7kHI7aP3tssr66h869+UDxXKr6HY7Z3N4wHFYqOFzyMJMqbWoh0OAwFWviAADzoEAUKQQgwtsKoRgqf4AUBEBCAAClACBQDQ8R4kkbQAG6IbI0RQEBcBQLgoGNCqeHwIRCFIShsgALyyJRyAQJUADKPJsIUZgfjA9JtGwnq4fhhHETsACEdFQYBwHCah8L2ggHDDASACiv5UHQMCcEQ0SlAA6vJk6yBQ2JCIYpQ8SUfE4SJSlEHAzBIcAjCGMxEDmHALBUEpbmEdEEkwfBiHIaRgm4JRyGxDJtxyQpsjKapEDqZp2l6VwTayHQgU0CAOaiLIzEwAgzaGAAUhwMSlEonxkQRoWZRFs5AneeIPsEOGvkZwbgX2kYvBlVGxPRiGMSxbGFPlhUGZxn6Rf46ElFhCCyGAbAIGMzEMOxtFvlxzkbYU9wANoALrkgA5LI52AiqBx5QVzbrbg7EAPKJVwyCGAASkwHAYRASn0DAFQ2XdKDmTkC2GcZW3LatMAPexB3SEdDUpBDNAVGFNDINDK1rXtJgsE29q0XR7gAPyDatECY8g0Qw3jj0wAdChHbEhi5BwjxxLIICxbKEbjc2szSGDqSSB4OEdbCKrozT9KQooDg9ZTjE09Er5uWQFQzakc3nBD2N0ZrCAVLtjPRKd3CnaLbRgBwi3RBDbBbdISjWrI4yyO9xiE/abuiKIbA620esIhDFBbcgB1sMj3Y5IMbFutEFDOTAiEwMgOnsTy2ltgNABk+eyCJKc2UImfZ7npRmcHtyhwiAQR6IdHNDlXsHQHMco7ct5qHHYsKAo8gSyn+XpxX9pV2ZsgU6PcDAFM0R7IZBOTsTqCyNYA28xQ3c5L3bQHwEve9+o6hAA This is the code I provided, even with test cases. Only adjustments that were made: - Check for the no-param case to avoid accessing index out of bounds on the first split. - I forgot to add the delimiter when parsing quoted strings, silly me. - I added the check for the quotation mark to return the quoted strings in the way you wanted, as I suggested before. And now it's been like a 5 minute exercise. Still easy peasy lemon squeezy.
When the window doesn't respond and then it turns white. Basically it freezes up.
Oh. Well thats certainly a no-no. Have you reported the error using the Report a bug feature yet? Those reports will provide logs to the dev team so that they can eliminate the issue.
html, css, and javascript to be able to make the front end pretty would also be needed. Of course asp.net core and ef are big things in themselves as soon as you get beyond the simple
I have head first c# and is geared towards beginners, starts basic then builds upon that to build something actually useful. c# in depth is something that I have been looking at for a while but is getting a bit long in the tooth with .net core.
You can code anything in anything. Code is just instructions to a computer. https://github.com/CosmosOS/Cosmos/wiki/Develop-Your-Own-Operating-System-in-C%23-or-VB.NET "Can" != "Should"
MVC for file structure/class responsibility, and CSS (grid and flexbox) for styling
That I'll have to do. My ghosting issue could have been that there was too much going on. As soon as I closed another application it started working better.
That would be irrelevant to why your post was removed.
Removed: Rule 4.
Rule 4?
\&gt; posts on c# subreddit \&gt; wonders if anyone knows how to code in C# 🤔 btw homework style questions are not liked here. try /r/learnprogramming or /r/learncsharp 
Your fellow students, technical assistant or professor can help you.
&gt; You can code anything in anything. Code is just instructions to a computer. That’s not quite correct. Many languages have a runtime to support them, and this can definitely affect their viability as suitable languages for various purposes.
Yes, they should port WPF and Visual Studio to Electron!
Rule 4? &amp;#x200B;
Is MVC a part of asp.net core?
New to this, don't really know how to work reddit
It's polite to read the rules of a subreddit before posting there.
&gt; Rule 4: Request-for-help posts should be made with effort
Just put it on github with a licence that suites what you want.
&gt;Anything would help. Here, have some syntax: `{` `;` `}`
I dunno, this seems needlessly dismissive to me. I have to believe there exist some experts in c++ who never learned the slightest thing about c#. They might do really impressive, highly optimized stuff where every nanosecond matters. I worked at a HFT firm as a c# guy but they had teams that were c/c++ and even FGPA.... Some of them ran Linux on their workstations and seemed to actively avoid anything related to Microsoft. Sure, OP could have done research and answered this question without posting it, but that is true of 99% of what gets posted. I like to think I'm a decent enough developer, but there are tons of languages I've heard of but that I couldn't tell you at all what they would be suited for. I certainly couldn't tell you if an algorithm written in c# would run faster or slower than the equivalent in those other languages.
Didn't even know there were rules to posting
In 99% of subreddits, there are.
this is the first time that I have ever used reddit
I am not being dismissive of OP, but of his question. I am not dismissing the question to be negative, but to remove it as a roadblock keeping OP from getting started. I often had questions like this many moons ago, and they are a waste of time. OP should just get their idea working in the simplest way possible with the tech they are most comfortable with. If they succeed, they will have the understanding and context to answer that question. If they fail with their prototype, the question was irrelevant.
You can code anything in anything. Portability is a different question.
Yes, here is an overview and the basics. https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.2
Is your Hub class/SignalR configured in your Startup.cs?
The goal of questions like this are to determine if a language/platform/stack/tooling is well suited to a particular situation. Saying, "Just do it and see" doesn't scale. There are lots and lots of development options out there, and it didn't answer the question of how c# today compares to c++....I use c# all the time, and I would be interested in hearing an answer. But I'm not going to spend n months or even years learning to write fast and effective c++ to find out. I can name, at least, ten relevant programming languages. And for a language like c# you have to talk about more than just the language, at least in any traditional sense.... You can run c# with mono or dotnet core or the framework. Writing a non-trivial POC to test performance, particularly at scale, in N * M * O situations is a huge undertaking. N languages, M runtimes/compilers/interpreters/etc, and O environments. Yeah, sure, you can just do that and see, but it is a crazy amount of work. 
Sorry, this post has been removed. &amp;#x200B; **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. **If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work,** it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
Removed: Rule 4.
This post has been removed. &amp;#x200B; **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
This. I think OP is drastically overvaluing their high school project. Just let them have it under MIT and move on. 
~~GPL~~ Affero might be a much better idea if you're going to be that paranoid about it. GPL, IMO, is fairly outdated and may not be functionally much different than MIT given most software runs on the other side of a network connection these days. 
Use Affero/AGPL. Even GPL v3 doesn't compel source sharing over a network connection, and I think CC is more oriented towards artistic impression, thought it may work. IANAL. 
Only if it is distributed as a desktop app or OP's code runs client side (browser, mobile app, etc). In the modern age of heavily networked apps GPL is pretty weak. 
&gt; registered businesses Jesus fucking christ, dude.
If you want Roblox 2 man just say something. PayPal me and I’ll make your dream come true. I’ve got a professional studio full of one person willing to dedicate their life to your Roblox addiction.
You mad bro?
You're an idiot.
Async really is the way, especially if you call outside resources (who doesn't?) or have beefy processes. At the enterprise level it extends to event driven system architecture. Mind bending to learn at first but like anything it's easy once you get over the hump .
I guess your're right. Nice to see other's opinion.
I agree, I would not think about any of those things when doing something new. I would just build the new thing. Once you proof your concept, and you know more about the domain and the implementation, then you can ask this sort of question within a bounded context and get a (meaningful) answer. You are focusing on giving this guy a fish, I want him to practice fishing for a while.
But they'll use a mac to do that. What you should of said was you can use a cloud service to do it.
Blog is not mobile friend 👎
 Totally agree with you on that. To push more developers into asynchronous paradigm .net and core team are removing synchronous method calls at all from some of the apis already where async calls are more appropriate.
but the actual persom who will use the service wont need a mac themselves which is the purpose of this post lmfao
AFAIK everything is configurable, you can change font color and even background color.
All code in C# needs to be within a method, so you may be misunderstanding the instructions. Write the loops in the main method, as opposed to the bark/run methods.
**static void Main** is where you should put your loops.
Yeah that's what I meant, it needs to be outside of those methods
&gt;What I need to do is get Fido to bark five times using a while loop and to run 10 times using a for loop. The trick is the loops have to be outside the methods. Sounds like you just can't run the loops inside of the bark() and run() methods. Your main method is probably an okay place to run it for this assignment. You may need to ask for clarification, but based on your description, that is how I would interpret it. &amp;#x200B; Should be able to do your for loops in the main method. &amp;#x200B; As for Console.WriteLine("This program is written by FirstName LastName");, where did you try to put it? &amp;#x200B;
I've tried it in main(), I've tried it at the start. It needs to be the first thing that appears in the window.
 class Program { static void Main(string[] args) { Dog fido = new Dog(); fido.bark("Fido"); fido.run("Fido"); Console.Write("Hit any key to close"); Console.ReadKey(true); { int barking = 0; while (barking &lt; 5) { ++barking; } } } } } Like this? It executes but doesn't loop.
You have to write the two “console.writeline” lines in the Main method. The lines MUST write to the console. If they aren’t, it means you are launching an older version of the app. 