So you want exact behavior as if you were using an ORM, but you don't want to use ORM. Whats the point? If you really want that, just use nHibernate and you get everything for free. If you were to implement what you want "properly" you would just be copying the same behavior as provided by nHibernate.
Are any advanced courses coming?
One thing I'd add to the other comments here is that if you're trying to.lazy load orders because if you don't need to have them, you don't want to spend the computational resources on fetching them, then it's very likely that you have the wrong aggregate root defined. Customer, for all intents and purposes, looks like a value type. 
You can actually even use async/await. - [Needed BCL classes](https://github.com/kekekeks/MonoLib) (LINQ included) imported from Mono - [Code example](https://github.com/kekekeks/MonoLib/blob/master/Demo/MainForm.cs)
 * I'm asking about one piece of functionality, not a full reimplementation of NHibernate * Learning how to use NHibernate, or whatever, is not a trivial undertaking * ORM's force you to do things in a certain way * ORMSs are relatively slow 
But that "one piece of functionality" drags whole bunch of features with it if you want to make it usable. 1. You need to have a context within which the entities can lazy load. This is exactly same as Session in nHibernate 2. Entities will need lots of boilerplate code to facilitate the lazy loading (those question marks in your question). You can either write it by hand or make a code generator for it. That's what nHibernate does. 3. Ability to specify between eager and lazy load per query, per collection at runtime. nHibernate provides API for that. 4. It becomes possible to have two instances of one entity within one context. You need Identity Map to solve that. Again, nHibernate does that. IMO it will be easier to just learn nHibernate than trying to reimplement it. Also, did you profile your solution with both ORM to decide based on performance? And did you know pure SQL is faster than any Micro-ORM? /sarcasm 
Well I guess it's time to learn WPF...
the form controls, text entry fields, calendar control, and sliders are very clean. Also your animations are amazing. but do you think some of them (for example, the ripple animations on the buttons, and the circular spinner animations), feel weird with a mouse control instead of a touchscreen? Also, have you have any issues with text rendering in wpf? ive played around with TextRenderingMode="Aliased" but i cant get it to look perfect
Particularly the mouse over thing I'm not happy with, so might change that at some point. Tend to use: TextOptions.TextFormattingMode="Ideal" TextOptions.TextRenderingMode="ClearType" This works well on apps where the user can zoom in/out the content.
I would focus on one thing at a time, as others have said, maybe starting with C#. Microsoft Virtual Academy is good: http://www.microsoftvirtualacademy.com/training-topics/c-app-development As for Unity, yes, it can be used to produce crap but anything can. Unity can also be a tool for creating cool games in the right hands, and scale according to your budget (starting with $0). We developed our game using Unity and never looked back (http://codeoftanks.com). It's a 3-D PvP tank programming game but I wouldn't recommend trying to LEARN programming from it. It's more of a way to practice and sharpen skills and maybe experiment with AI, machine learning, etc.
Orders would be my root, and as was mentioned, lazy loading can easily lead to inconsistent states. Your root object should be 100% complete when returned from your persistence-to-domain translation layer.
thanks ill try that! anyways excellent work bro. have some gold!
&gt; Your root object should be 100% complete when returned from your persistence-to-domain translation layer. I don't see why this is a valid absolute. I would like to be able to programmatically write: foreach (order o in cust.Orders) {} But in the scenarios where I do not need to interact with the orders, I would like to not load them. When was this outlawed, and by who? If we have finally figured out the One True Way to write software, I would very much like to read that book.
&gt; I would strive towards a design where your data layer is called once per use case/action.... This is certainly **a** valid approach and I've seen it in many applications (GetByThis(), GetByThat(), GetByThisWithThisButNotThat(), etc etc etc) and in my *opinion* leads to a proliferation of just slightly different data loading functions. I'm not opposed to those existing, but in my opinion they should be the exception, and used in exceptional circumstances. An alternative approach, specifying the specific criteria *right where it is being consumed* is preferable. Indeed, full on ORM's generally all support this (implying it's not a craaaaazy idea?). And by not using an ORM, I am *potentially* giving this all up, or portions of it, I recognize that. &gt; LazyLoading is easy and comfortable when you write the code, but it makes it harder to reason about your code at a later point. I don't agree. &gt; For example, another developer might come along and implement a summary of all customers and their total order volume. He'd grab a list of the customers and then iterates over all the orders and sums up the values. We both know that is an incredibly stupid way to implement summation, and my design goals here absolutely in no way force you into that corner. Does it make it easier for an idiot programmer to do such a thing, sure, but that's an incredibly disingenuous argument in my opinion. &gt; ....and wether or not at another code paths that data has been fetched already or not and *wether it might have become stale already and needs to be refreshed*. This problem is not exclusive to lazy loading. I have trouble understanding this idea that there is only one way to write software. I've always believed it is a constant matter of tradeoffs, and choosing the one of many different and valid implementation patterns that best suits your particular use case, but there seems to be this new and growing culture where you **must** do things **exactly one way**, or you're an idiot. Maybe there is only one way, I don't know. 
The summation example was just that, an example. There are dozens of other ways in which a developer might cause unexpected triggers of lazy loads,and I have seen a lot of them. Another (in retrospect) stupid case was someone writing a CompareTo function for a business entity. Someone else later changes a nested collection of that entity to a lazy load. Suddenly, every comparison of that entity triggers a DB request. I'm not sure where you get the idea that I'm claiming that there is only one way to do something. My first post said that lazy loading is *often* considered an anti pattern. Not always. Not by decree of the Supreme Court of the mighty algorithmic Lords. I'm also not advocating ten million GetByThisOrThat() methods, but rather a clear divide between your data layer and your business layer over which you only pass valid and complete states. Incrementally building your data model can very easily lead to inconsistent or invalid states. Of course it doesn't have to lead to it, but it makes it very easy to miss invariants in your model. Other design models like domain driven design or CQRS make it harder to mess up that up.
I am **sincerely** just trying to come up with a reasonable architectural pattern where: a) Object relationships are exposed and programmatically navigable b) Lazy loading is supported I am completely genuine in trying to find a "good" way to accomplish the above, I honestly don't understand at all how this is such a controversial design. Can this be consumed in a non-efficient manner? *Of course it can*, almost any architecture can be consumed in an inefficient manner. There are benefits and drawbacks to any implementation, and which one you choose *varies* according to your particular needs. 
I'm sorry, but you are the one blocking all advice being tossed your way. ORMs have solved this problem for you. You don't want it. /u/AngularBeginner gave you the most painless way to implement what you want with the Lazy&lt;T&gt; Class, but rightfully commented that this isn't really a great design. So you don't want it. Others have tried to explain to you why it's not a great design. You don't want to hear it. If you want LazyLoading on your entities you need to have some sort of LazyLoading code in your entities. Either with the Lazy&lt;T&gt;-Class, or by hijacking the property getters/setters manually, or through something like Aspect-Oriented-Programming with PostSharp or some other framework. All of that are possible solutions, but I would consider all of them to be bad design, because you are mixing your business logic with your data access logic and give up control over your entities state.
No one said that you must do it in such and such way. Everyone offered suggestions on how you could do it and how they would do it. I might have been a bit negative, but in my experience if code can be used wrong, it will be used wrong. I'm a strong proponent of the principle of least surprise. 
You should first learn to program a language, once you have learnt at least one it will make everything like this much easier. I'd suggest learning C# first and then move on to Unity. If you want to make learning C# more fun make a hello world app in Unity. Do whatever but learn the fundaments of C# &amp; Programming first. 
Fair enough, I'm trying not to be negative as well but likely not entirely successful. I think the problem is while this is a seemingly simple question, it has massive underlying technical and philosophical dependencies. So when /u/AngularBeginner says something is a code smell, I have this urge to ask "why", but the reality is it's kind of a case of "If you wish to make an apple pie from scratch, you must first invent the universe", or, the underlying fundamental required knowledge to understand why it smells is so massive that it's not feasible for him to explain. I think maybe for practical purposes and to actually get something done, I may just abandon this lazy loading, or perhaps just not worry about it until I absolutely need it - so entities will still have related collections, they just won't be lazy loaded. But even so, I'm still at a bit of a loss as to where the code for physically populating the collections should reside - in class factories? (And we're back to where we started, just with a slightly different question.)
For starters, it looks like you are mixing your repo and model/entity classes. I'm not sure this design is going to get you anything. I am assuming all the create functionality for each object is different... so you would still need 300 'create' actions in the base controller.
You should probably look at the Repository Pattern for that.
And as a follow on, now that I know I can use this sort of hackery to initialize strings in a single pass, here is some code I wrote during the testing phase when I was generating hundreds of megabytes of strings to write to files as input: private unsafe static string MakeLongString( int length, Random rand ) { string resultString = new string( '\0', length ); fixed( char* resultPtr = resultString ) { for( int i = 0; i &lt; length; i++ ) { *( resultPtr + i ) = (char)( rand.Next( 0, 'z' - 'A' ) + 'A' ); } } return resultString; } That's a fun one.
I will. Thanks for your help and patience, it is much appreciated.
Ooh, there's actually a small bug in that. The rand invocation should be: rand.Next( 0, 'z' - 'A' + 1) Because Random returns values in the range `[x, y)`. 
The "right" way do it it is the same way NHibernate does: proxy classes. Having your `Customer` class know about lazy loading is a *huge* code smell. You shouldn't use the constructor (directly) to create customers, rather use a factory that generates "customers". Customer cust = factory.GetLazy&lt;Customer&gt;("some", "constructor", "values"); In the eager-loading case, you could even have the factory return a real Customer, assuming you don't need any other ORM-type features. For lazy loading, you'd return a proxy class (which I believe is usually a subclass with overridden properties). You would want to use an existing solution like [Castle Dynamic Proxies](http://www.castleproject.org/projects/dynamicproxy/) rather than implementing your own.
If it was up to me I'd just create a non protected subdomain.
Looks fantastic.
How I would do it: private static string GetMaskFromPattern(string pattern) { return pattern.Split(' ').Select(s =&gt; s.Contains('?') ? "?" : "x").Aggregate((i,j) =&gt; i + j); } private static byte[] GetBytesFromPattern(string pattern) { return pattern.Replace("??","0").Split(' ').Select(s =&gt; Byte.Parse(s,NumberStyles.HexNumber)).ToArray(); } I'd probably put them into a static class and change the signature to GetMaskFromPattern(this string pattern) so that I could just use myString.GetMaskFromPattern() and myString.GetBytesFromPattern.
Thanks for the suggestion! I am going to add links here as I come across them for myself and in case anyone else happens upon this thread. (If you know of any particularly good resources or examples please add.) http://www.castleproject.org/projects/dynamicproxy/ https://github.com/castleproject/Core/blob/master/docs/README.md https://github.com/castleproject/Core/blob/master/docs/dynamicproxy-introduction.md http://kozmic.net/dynamic-proxy-tutorial/ http://stackoverflow.com/questions/tagged/castle-dynamicproxy http://stackoverflow.com/questions/tagged/dynamic-proxy 
Sounds like a pretty neat solution. Apart from memory did you benchmark it to see if it was more performant?
1. You are wrong - http://stackoverflow.com/a/12948506/590774 2. Query Plan Caching is a thing - https://msdn.microsoft.com/en-us/library/bb738562.aspx 3. Further more, ORMs can compile queries application side - https://msdn.microsoft.com/en-us/library/vstudio/Bb896297(v=VS.100).aspx You actually know nothing about my specific DBA. But I can tell you this. Some DBAs want their development teams to use SPROCS simply because they only want to GRANT EXECUTE permissions and nothing else. Yes, they think it is for security. Some people don't like to live in the present times. But please don't conflate your wrong reasoning with a DBAs outdated reasoning. 
Good notes. I didn't spend a lot of time going in depth with it so much as converting it directly to LINQ expressions, so I'm sure there's room for improvement.
Yeah, check out the bottom of my answer on stack overflow. The alternative is `string.Concat( list.ToString() ) `. It uses slightly more memory because it causes two extra array copies (small effect though, 500k 64 bit pointers fit in 4 MB). Cpu is 25% worse than my unsafe method when dealing with lots of small strings, about equal when dealing with lots of big strings. So in the end all of this effort saves me 4 to 8 MB and little cpu :) 
I believe Cloudflare actually runs some Javascript to make sure it's running in a real browser, which probably dynamically computes the jschl_answer value.
I'd really suggest not going down this path. It forces your application down the CRUD oriented path where users are essentially editing database rows. Instead I'd find out what the workflow of the users are and design controllers/actions around that.
LIBRARIES? WE DON'T NEED NO STINKIN LIBRARIES!
Nicely done, OP. I am a fan. Doubly so because JUST this week I started putting together a few WPF apps for in house work tools. You are owed a beer.
Wow thanks a bunch actually. After messing around with google and msdn, my code much much smaller. Like 10 times smaller, actually lol. I made a pattern structure to hold the info I need since it is really small and passed around a lot and should not change really. This way I don't have to think about the extensions popping up out side of where they are needed. public PatternScanResult PerformPatternScan(Pattern pattern) { var data = GetData(pattern.Start, pattern.End) var pBytes = pattern.GetBytesFromPattern(); var pMask = pattern.GetMaskFromPattern(); var dLength = data.Length; for (var i = 0; i &lt; dLength; i++) { if (!pMask.Where((t, ii) =&gt; t == 'x' &amp;&amp; pBytes[ii] != data[ii + i]).Any()) return new PatternScanResult(this, i, "Found it? Test"); } throw new Exception("Pattern not found"); } 
Really liking these new additions in C# 6... I find myself barely touching fields now, properties are really reducing the code clutter for me.
Whomever originally authored this... please, do the rest of us a favor and change careers immediately. :-)
Yea, modifying a string in this manner can cause some strange hard to find bugs.
Some strings could in theory be located in read only memory. It's unlikely any issue for runtime generated strings though.
Doesn't the CloudFlare challenge change regularly? I solved this problem by using a headless browser and grabbing the cookies from the protected page. Be sure your user agent is the same for both your headless browser and whatever you're using in C#.
ndepend free trial perhaps?
I absolutely love your Toolkit! It's so easy to implement an existing solution. Thank you for all your work.
I use messenger all the time, bit I have no clue to what it does...
I have that book - I have used it as a reference. I'd say it's pretty comprehensive. Looks like it's got good reviews on Amazon as well.
Yeah I sent feedback on that page. It's not. You have to target 4.6. I run 2012 which meant installing the 4.6 targeting pack. Hilariously enough, since I had the 4.6 runtime installed, I could grab the method through IL generation or reflection, just couldn't use the vanilla compiler until I installed the targeting pack. That was frustrating until I realized the page was wrong. 
Do you mean the IDE Eclipse? A lot of people with suggest you read C# Head First. It helps you dive into it all. The IDE most people use is Visual Studio, and there exists a Mac version so I do not think it is necessary for you to have windows. My understanding (Feel free to correct me as I am fairly new to it as well) is that .NET is extended functionality for C# providing a whole host of tools and services designed to assist with creating robust web applications etc.. What were you asked to create exactly?
Everyone is commenting that this code sample is so, so wrong. Can someone please elaborate what is wrong here so that others like myself, who apparently cannot see the obvious, do not make the same mistakes?
If an exception occurs when you are logging a problem and you attempt to log that event ... I've seen this pattern in production code myself and it really needs to be used as a clue bat against whoever wrote it.
The "try" block attempts to perform the actual write. However, in the "catch" block, they attempt to do the exact same thing that already blew up somehow. Chances are, that, if it failed the first time it's going to fail again.
Its a method that attempts to log some information to a Logger, inside the Try block. But if the log fails (for any reason), then it wants to log the reason for the failure to the same log. Presumably, whatever caused the first log failure (causing the Catch block to execute) will cause the second attempt (inside the Catch block) to fail as well. A better practice would be to attempt to record log failures in a different location, like the system event log. So if the usual log location fails (maybe because the log file is locked/readonly), the system event log should still be available as a backup. It's also a bad practice to catch the generic Exception class. You should catch the specific exceptions that occur and handle them appropriately.
Since C# is part of .NET which was originally native to Windows platforms, Microsoft's IDE will always be the reference of choice unless a book or article is specifically devoted to using another IDE. I think your best option is to have a Windows computer or VM with Visual Studio installed. Eventually, as Microsoft attempts to push .NET across more platforms, you will start to see more support, but this is the infancy stages, and everyone is still trying to determine if they want to support this shift or let it die.
Yep, e.g. if you want the highest quality one you can do var highestQualityVideo = YouTubeService.Default .GetAllVideos("[URL]") .OrderByDescending(v =&gt; v.Resolution) .First(); EDIT: Formatting.
Oh now I understand, that could make things escalate quickly huh infinite logging
Concise and straightforward explanation. Thank you, I should have taken a better look at the catch block. 
Mono also doesn't implement the ASP.NET 4.5 Async Pipeline, which can be an issue if you want to develop server side applications that are a bit I/O heavy.
First of all, make sure you talk with your company's HR and find out what things you are allowed to ask about and what things you aren't. If your company doesn't have somebody (or they aren't knowledgable), do some googling on what questions you legally can't ask. There's some things that don't seem like a big deal, but are actually protected classes and could be used by somebody who doesn't get the job in a lawsuit. This is a pretty decent overview of what to take into consideration: http://hiring.monster.com/hr/hr-best-practices/small-business/conducting-an-interview/common-interview-questions.aspx That aside, it's also important to figure out what working the person would be like. How organized are they, how well do they communicate with others, what is their coding philosophy and style? (Working with somebody that uses really abstract naming and doesn't comment anything is not enjoyable). When getting to the technical questions, you want to cover two aspects: what the person already knows, and how well they can figure out new stuff. A few simple, specific technical question to start is good so you know if it's worth continuing the interview. Then move on to a little more abstract questions like structuring/architecture, or a hypothetical on setting up an MVC site and what their high-level plan would be. To finish the technical part, have a coding challenge where they outline a solution and explain their approach to you. Some technical questions/challenges: -How to create a hash table from a list of names. -Remove duplicate entries from a very large array. -How to detect a palindrome within text. Design/high level: -How would you design Facebook? -How would you design Battleship?
Won't that be remedied by the official release of .NET 5.0, as MS has told us .NET was going to be cross platform from then on?
I didn't see it mentioned, but double check that things are configured correctly and you have permission to Write.
No idea, not something I've looked at.
ahh come on man, dont torrent resharper. Support the developers. Its very reasonably priced, its only like 200 bucks for a personal copy
You could learn it with just MonoDevelop, but TBH Visual Studio is the de facto standard for most .NET programmers. I suggest getting Bootcamp (for Mac) or partitioning your hard drive (for Linux) and installing Windows 10 on it.
Very true. What I found interesting is that a lot of strings I expected to be in read-only memory were in fact writable. It looks like .Net doesn't try very much to segment memory types into read-only, read-write-noexec, etc. Here's something that you should *never, ever* do: static void Main() { Assembly current = Assembly.GetExecutingAssembly(); Console.Out.WriteLine( current.FullName ); unsafe { fixed( char* ptr = current.FullName ) { ptr[0] = 'J'; } } Console.Out.WriteLine( current.FullName ); Console.Out.Flush(); } Output: TestProject, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null JestProject, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null 
For what it's worth, and without commenting on the specific posted code since I can barely read it the way Alien Blue is formatting it on my phone, there are some production scenarios where you might have to resort to logging the failure of logging a failure. There are, for example, COM-related exceptions that will throw when you attempt to ToString them. Insane, I know, but it happens. Attempting to log such cases to an alternate destination would fail just the same, unless you try to log the reason for failure, rather than reattempting the same logging but elsewhere. 
The actual error I'm getting is caused by mixing of versions of the enterprise library logging block. Specifically, some of the code is using 3.x and another part is using 5.x. The code is mid-upgrade which caused the bug that led me to this bit of code.
If you look at the [documentation](https://msdn.microsoft.com/en-us/library/system.console.readline.aspx) for Console.ReadLine, you can see that it is declared "public static string ReadLine()". The "string" part indicates that the function will return a string to you; so to get the results, you assign it to a string variable. Since you already declare such a variable (string name = "";), you can simply use that one: string name = ""; name = Console.ReadLine(); 
I have implemented SignalR in a couple of different projects. I will say that it does indeed work as well as it seems. Don't get me wrong, you still need a decent pattern/infrastructure around it to make it work well. But (IMO) it can't be beat for simplifying interaction between browser and server.
Yeah it was the matter of where to place the code I was sortof confused but I believe I got it now thanks ;3
Could you provide an image/visualization of the kind of button you're trying to achieve? I can't find the Action Center button you're describing. You could try using a StackPanel in horizontal orientation (image left, text right for example) as the Button's content. For the invisible border, try playing with the Button's content's margin and/or the Button's padding. Tools like Snoop are really useful for these kinds of things, by the way, as they let you analyze and change the UI object's properties at runtime.
I just dropped a log...
I highly recommend [Essential C# 5.0](http://intellitect.com/essentialcsharp/). (6.0 comes out late September) It goes all the way from programming basics to the most advanced features C# has to offer, and doesn't miss anything.
The point is to only having to pass **one** parameter to your method, instead of many.
I mean the quickaction buttons on the bottom, like tablet mode, settings etc. http://i.imgur.com/iqkAX0u.png Edit: Alright nevermind i found it, it was indeed the padding... Padding="0" is literally all it took (doh), to get rid of this annoying clipping.
Definitely. It seems though that R# just sweeps the problem into the newly created type by adding a constructor that requires all the parameters to be input anyways, though. So the method is fine, until you find people doing something like var sm = new SettlementMemo(new SettlementMemoParams(/*All that data*/)) at which point why bother.
Yeah, sorry about that. Just gave your post a quick glance and didn't see any references to StringBuilder. Was just making sure you had evaluated all your options.
No worries :) I've been a little frustrated because *a lot* of people, especially on SO, have had the same response - "check out StringBuilder". And using it actually puts it into one of the worst classes of performance that I've analyzed as part of this.
I know your final solution may be the best solution for your particular problem, but the StringBuilder solution you described was not how you use a StringBuilder. To bring the StringBuilder to it's full potential you have to eliminate your intermediate List&lt;string&gt; step and use the StringBuilder everywhere, starting from your "content production methods" until the final step where you write the string to disk/network/db. Your solution would still be faster because StringBuilder does more internal safety checks. But "number of allocations"-wise a strict stringbuilder solution can be just as direct as your Buffer.MemoryCopy approach. 
I'm just saying it's comprehensive. I was already an experienced programmer when I got the book myself.
It works pretty well. It seems to scale better (from some very limited load testing I've done) pushing out many small messages, vs. fewer large messages. So my pattern is something like "If you need to send a message smaller than 4KB, go ahead and send it through SignalR. If it's larger than that, consider using SignalR to simply tell the client to load the data, then issue a WebAPI request for the payload". My 4KB boundary is probably not the right limit for all cases.
To get that kind of Button I'd make the content a Grid with three rows, the top and bottom auto-height (icon and text) and the second *-height (empty space in between), limit the size of the button on the button itself and left-align the elements in the first and third row. Of course that also works with two *-height rows, where the elements are top/bottom-left aligned. A simple vertically-oriented StackPanel with the elements left- and top/bottom-aligned probably works just as well. I didn't actually test these ideas, but that's how I would start out.
That wouldn't compile, so it's probably just an abbreviation.
It depends on what you mean, and even then I think my hackery would still be the correct answer (with some more work.. keep reading). Do you mean: 1) The content producers return strings, end of story, I need to find an efficient way to concatenate those strings directly into a single string object. Or do you mean: 2) The content production methods accept a StringBuilder and write their content directly to it, which I then later call ToString on. If you mean scenario 2, then I (mostly) agree with you. The content production methods write their character data to SB's internal arrays, and then SB later copies that data to the final string. If my content production methods produce 200 MB worth of character data, then the total amount of memory moved is 400 MB (once from the content producers to SB, another from SB to the concatenated string). Assuming the SB is pre-allocated, this should result in exactly minimal memory churn. Scenario one is my reality - I don't have the ability to change the content production methods or their signature, so I have to deal with them returning fully formed string objects. In this scenario, the best approaches start with collecting the strings in a List&lt;string&gt; and then either using my trick to concat, or very slightly less efficiently, using `string.Concat( list.ToArray() )`. Total memory used is 200 MB to make the string objects from the content producers, 4 MB for the `List&lt;string&gt;` that's 500k elements long, and 200 MB for the final concatenated string. ~400 MB of data allocated and copied. Using a StringBuilder, in any capacity, in scenario one is waste. I have to create the string objects (200 MB of allocations and copies), copy those string objects to the SB (200 MB of allocations and copies) and then copy the SB's arrays to the final concatenated string (200 MB of allocations and copies). I allocate 600 MB and copy 600 MB worth of data. ... In all of the cases we're considering here, we're assuming that all arrays and builders are all pre-allocated. Ok, but if that's true, then we can do even better: Lets take scenario two - pass a StringBuilder directly to the content producers so that no intermediate strings need to be allocated. ... But let's not pass a `StringBuilder`. Let's pass an `AntiduhStringBuilder` (which doesn't exist right now, but could, given the work I've done). Let me explain. We're using StringBuilders as one-time-use objects, just as a way to build a fully concatenated string - the end goal is to collect all of the data from the content producers and write them into a single concatenated string. So the idea would be that I pass an ASB to my content producers, they give me something (chars, char[]s, something), and I *directly* write that into a pre-allocated string. Rinse and repeat until the whole string is built. When you call `AntiduhStringBuilder.ToString()` to get your resulting concatenated string out, all it does is return the string it was writing to the entire time, and then mark itself as being un-writable (to prevent you from using it to accidentally write to a now-returned string). And now, counting content production, I have the absolutely lowest memory consumption and memory traffic (read/writes) possible, better than *any* other method discussed so far. ... I think I will make that class just for giggles, but it's a moot point for me - I can't change my content producers. I'm stuck with having to accept a ton of little string objects to be concatenated. And to that end, since arrays of pointers to strings are fairly cheap, a pre-allocated `List&lt;string&gt;` fed to my hackery is the one that performs the best.
I used the RelativePanel like this. &lt;Button x:Name="ExampleButton" Foreground="{ThemeResource ButtonForegroundThemeBrush}" Width="80" Height="80" Padding="0"&gt; &lt;RelativePanel Width="{Binding ElementName=ExampleButton, Path=ActualWidth}" Height="{Binding ElementName=ExampleButton, Path=ActualHeight}" HorizontalAlignment="Center" VerticalAlignment="Center"&gt; &lt;FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&amp;#xE160;" FontSize="16" RelativePanel.AlignLeftWithPanel="True" Margin="3"/&gt; &lt;TextBlock Text="Button" FontSize="12" RelativePanel.AlignBottomWithPanel="True" Margin="3"/&gt; &lt;/RelativePanel&gt; &lt;/Button&gt;
Hrm, actually making such a class `AntiduhStringBuilder` would be difficult. It would require the following semantics: * You provide the final required length (capacity) at time of construction, so that I can perform exactly one allocation. * When you call `ToString()` at the end, you cannot continue to use that `AntiduhStringBuilder` instance any more, else an exception will occur. This is so that you can't use it to write to the now-returned string (which is supposed to be immutable). * You cannot attempt to write more characters than capacity provided during construction (otherwise I'll have to reallocate which is exactly the thing I'm trying to avoid). * You must write exactly as many characters as indicated in the capacity, before calling `ToString()`. Most of those are pretty easy to swallow. The last one, not so much, and it's needed for a pretty important reason: If you ask me to pre-allocate a string that's 100 characters long, but then only write 80 characters, I'm still going to return to you a string 100 characters long and its going to be filled with '\0' characters in the spots that you didn't tell me to write to. I can't change the length of the string without even more hackery. So such a class is only useful when you know *exactly* how much data you're going to write, no more, no less.
Should I be using decimal for it? Thank you for your tips and I am inclined to agree with your assessment of the giant constructor and the redundancy of this refactoring. 
Different? I doubt it. There will probably be some new syntax, and probably be expanded. 
You are confusing .NET and C#.
if you can't change your content producers, yeah then you can't do anymore except beautifiying... Or spend some time looking at the mono stringbuilder implementation: https://github.com/mosa/Mono-Class-Libraries/blob/master/mcs/class/corlib/System.Text/StringBuilder.cs 
You could try the new Visual Studio Code IDE which runs on Mac and Linux as well as Windows though that would limit you to just web apps. Would be enough to get you going in C# though. https://code.visualstudio.com 
I blame him. This isn't the wizard's conclave; it's a community for c# enthusiasts of all levels. If he couldn't be bothered to be helpful he didn't have to waste anyone's time adding his two cents. Programming is hard enough without someone purposely trying to be a discouraging ass. Everyone else managed to give you a dose of reality as well as encouragement to continue learning. 
Install [Visual Studio Community 2015](https://www.visualstudio.com/products/visual-studio-community-vs) and create a "Console Application" (feel free to follow [this "Hello World" tutorial](https://msdn.microsoft.com/en-us/library/k1sx6ed2.aspx)). When you compile/run the application in Visual Studio, the exe will be automatically created in a "bin" subdirectory of the project.
Very good suggestion. 
...Implying you always wrote perfectly engineered code? Yeah, this is a glaring problem, but we've all at some point written shit that now makes you scratch your head and say wtf?
Do you browbeat every applicant with this self-congratulatory tripe? "Will you state a MVC controller is itself an action filter?" Puh-lease. Keep the "look what I know!" stuff for the review cycle and be human. I have numerous MVC apps and services in production in a large enterprise, interview every candidate that comes through, and I would NEVER devolve to this stuff. You'd get much further with a common-sense discussion about the relationships between Model - View - Controller in general, Microsoft's implementation, and how they've evolved. For table stakes, anyway.
Same here lol it's kinda disheartening sometimes in your own industry to feel that way regardless how infrequent. 
Addressing .NET, not C#, since that's how you asked the question. Will it be different? Well...sure. At that point, I expect you'll see the .NET runtime on more platforms. Also, it's likely that .NET devs in general will adhere to a more end-to-end approach to device ubiquity, ensuring that their app(s) run well on numerous platforms. Given the willingness of key players to open source compilers and languages, you'll likely see a higher level of collaboration and cooperation between teams writing in Swift / C# / [pickyourlanguage], with the runtime accomodating devs of more diverse disciplines. ........I hope.
To truly understand MVC you must fully 'grok' that the Controller itself is an ActionFilter. Failure of that leads to people just doing things out of rote memory and "because that's how it is". That's entirely fine for junior developers, acceptable for middle, but intolerable for senior level and beyond. Of course most people use patterns very poorly. Like building a MVC app with EF contexts in the controllers. This i squarely blame Microsoft on for making people believe it is a "standard practice" when there's probably not a single worse thing you could ever do in MVC. I can't even come up with a single answer on how i could **try** to make it worse. This dialog on ActionFilters is not some memory game. It is wether you understand MVC to its core or not. 
Read the documentation. Seriously, that's what it's there for.
I've been itching to find a use case for SignalR for a while. We implemented feedback from a data import into a webapp and it worked awesomely. I just struggled to find a use case to be honest. 
What do you mean by .net? What they've done with .net CoreCLR is huge and is a seismic shift already. I doubt there will be a bigger change than open sourcing the framework &amp; CLR and releasing CoreCLR. Thanks, this has inspired an interview question I can ask.
How well SignalR performs depends quite a bit on the infrastructure that supports it (like any software solution). Assuming you have a web farm scenario you'll probably want to go with the Redis backplain. You'll also want to put quite a bit of time into thinking about what your end goals are. I assume when one user uploads a 2 gig file you do not want to instantly send that file to all other connected users, but rather notify them of the files existence with some sort of UI to allow them to download/view the file if they so wish. As such I wouldn't bother using SignalR for the file upload as it works best with relatively small messages. Instead I'd just prop up an Api controller to handle the file upload and let SignalR dish out notifications of the file arrivals. Edit: I guess you didn't say anything about file uploads. However you did say large amounts of data. If you're clever the number of rows in the table shouldn't make much of a difference but how large the serialized row on the wire will. How large are we talking? If the serialized object isn't over 1 MB I wouldn't even worry.
thank you for having a real understanding
What about us who don't write web apps? 
The sarcasm is not strong with this one. ;-)
Great book. Highly recommended by my old professor. 
lol touché. 
&gt; Of course most people use patterns very poorly. Like building a MVC app with EF contexts in the controllers. This i squarely blame Microsoft on for making people believe it is a "standard practice" when there's probably not a single worse thing you could ever do in MVC. **I can't even come up with a single answer on how i could try to make it worse.** Put one in a view. :)
Microsoft open sourcing large (and increasingly more) parts of the framework could have a significant impact on .NET. My expectation is that the open sourced framework, if truly available and embraced on Mac and Linux, will kill of Mono at minimum. C# is a great language but the limiting factor has been its proprietary beginning and OS lock-in. Now that those are lifting it should breathe new life into the community. It's just sad because if MS had done this around the time of .NET 2 they could have cornered the market on languages and the surge of Ruby and Python would have been greatly diminished, if not eliminated, not to mention possibly wiping out Java. But alas, some might argue too little too late.
 &gt; Put one in a view. :) You pretty much just described @Html.Action While not needed commonly it can be used in some interesting ways for delivering self contained components to a view/layout page with adding more http request / latency of chained loading. I also think there's been work in Razor Webpages that for very basic stuff you can run without a controller in a very classic-asp-esque manner. 
I'll take the original Pricing calculator over using polymorphism here any day. Products are not polymorphic! Also the core premise here is just flawed. Why would you use an enum? Use decimal multiplier/discount. .9 for 10% off, .8 for 20%, 1.1 to raise prices temporarily. Products definitely should not be calculating their shipping, or cost, or taxes. All that belongs in Pricing Calculator. Showing code that sucks "if this else that then yo yo yo" isn't a rationale for attempting to build reality to look like a comp sci 201 textbook.
&gt;I use this feature almost everyday. It's included with resharper. What feature? You didn't say anything. I feel like i'm a master at resharper but they always have more buried in it.
 &gt;It's also a bad practice to catch the generic Exception class. You should catch the specific exceptions that occur and handle them appropriately. This is *mostly* nonsense. You catch specific exceptions that you **can handle**. Most exceptions are by definition, unhandlable. You want to **minimize** the number of catch(exception e). Best case is exactly once at the global level. But real world is fine for any proces that does batch work to not want 1 exception canceling a whole batch. When you use threading you will frequently have a catch per thread. The information you posted is just paroted 101 stuff and ignores the real world. Where things are wrong is having catch(exception e) in nearly every single method, when one at the top of the call chain would suffice. 
&gt;LIBRARIES? WE DON'T NEED NO STINKIN LIBRARIES! I felt like this was a microsoft library. OP confirmed this stating their issues with multiple versions of Enterprise Library logging is what brought this code under inspection.
You've just used a double negative! :P
&gt;Logging is so easy these days. Use one of the many libraries available. OP stated this is Enterprise Library Logging. EntLib is just always obnoxiously verbose and fragile, which ironic to call it enterprise.
Don't do it. Lazy loaded collections are a bane in software. This is the N+1 problem. Don't do it. All or nothing, never half.
OP stated it in a comment. Search for 5(dot)x
I would say the most important thing for working with SignalR is using backplane. You want High Availability (HA) and you want to ensure you don't build a solution that affinitizes to **exactly one** host. Moving to a push based model is a giant paradigm shift. It requires a totally different client/UI to accept push. Failing to immediately start with HA will lead you down a path of ultra-coupling the host and user, the most unscalable solution possible. This assumes you're a novice at full async / push apps which most of us are. It's just been so rarely done. Full push, is one of the rare areas i won't call myself an expert at, *yet*. It's just hard to sell business people on fundamentally changing the world. Where i used SignalR with great success was a full async app. Users would do stuff, it would trigger "long running" file generation. SignalR would ferry them the completed files. What was really special. We built navigation to be **server controlled**. SignalR could tell clients to navigate to a different page. This is game changing in a workflow app. Clients no longer orchestrate, full server ochestration of the user experience. So what was really unique that SignalR allows. We had our MVC web hosts. We had our backend worker hosts that were firewalled off from the interwebz. The workers built the files. The workers could talk to a web browser via SignalR + backplane (azure service bus specifically) even though a user's browser never once touched the worker hosts ever. **tl;dr** built system that a firewalled 'unwired' console app can control a user's web browser navigation.
So your asking how to get the first and last digits of the input? Just convert it to a string, then index the string at str[0] and str[str.Length-1]
I am receiving the error "System.Console' does not contain a definition for 'Readline' " For whatever reason it is allowing the readline in my code but not yours EDIT: fixed, thanks for the help.
In addition, as a general tip, unless the assignment requires you to use an array, there really should be no reason you are using one for this simple task. If you set it as int userNum = 0; you would end up making your code much more readable and it would save you the indexing costs. That said, the proper way to do it though would be to take the input and put it directly into a string, and then parse from there. As it is now, if the professor puts in a null or empty value, or even a value that isn't a number, or contains letters, then the program would crash string userInput = Console.ReadLine(); if (!string.IsNullOrWhiteSpace(userInput) { int userNumber; if (int.TryParse(userInput, out userNumber) { // Do Rest Here } else { Console.WriteLine("That is not a valid input"); } } else { Console.WriteLine("Please enter something"); } Then, if you wanted for some additional practice, you could wrap the whole thing in a while(true) and have it exit if the user types a specific value
The open source stuff frequently drills into p/invoke Win32 stuff... I don't know how useful it is in getting it on other platforms.
Ah sorry. Like op said, viewing project dependencies. The feature is included since r# 9, and can be found under resharper -&gt; architecture -&gt; show project dependencies (or something like that). You can also find this if you right click on a solution or project and then click on show project dependency graph.
Personally I'm ready for this: [AOT compilation of MSIL byte code to LLVM supported platforms](https://github.com/dotnet/llilc)
Rather than wasting your time with nonsense like SOLID, try reading some real design pattern books like the .NET Framework Design Guidelines. If you do you'll quickly see why .NET doesn't follow the Open/Close Principle.
In case you didn't see it, /u/killerrin added an addendum to his comment below that you really should use: check whether the string you received is a number. int temp = 0; string input = ""; do { Console.Clear(); Console.Write("Please enter a number: "); } while(!Int32.TryParse(input.Trim(), temp)); Console.WriteLine("First digit: {0}", input[0]); Console.WriteLine("Last digit: {0}", input[input.Length - 1]);
Let's hope people don't enter " 100 ", then ;)
So it's sad that they didn't corner the market? Sad for who besides MS?
Yes, absolutely. If you want to go full on with only Microsoft provided technologies, the release of .NET Core will remedy that situation. However, if you want to have any dependency that isn't part of the .NET platform or delivered as Azure specific functionality, you need to wait until that project supports .NET Core. If you want to deploy outside of Windows until then, the answer is still .NET on Mono. 
I think they're primarily focusing on pushing the UWP. There's already a few libraries out there that do what you're asking, although they're still quite early.
I'd say the java tools are harder to learn and aren't as refined as the ones MS puts out so if Microsoft open sources their languages java will eventually start lose popularity. Just my thoughts. 
Compared all annual leaves for all employees. It's the brutal way of handling it but only had 2 hours to implement it and create my own data to test it.... An improvement to that would be to sort the annual leaves by StartDate and this would greatly diminish the number of comparison among annual leaves
Because your code is an unreadable mess. The error says exactly what the error is: You're trying to read from a variable that has not been initialized (it never got a value). The compiler prevents you from this, as it is always a mistake. Either initialize the variable directly with a default value, or make sure **every** code path leads to an assignment to the variable before trying to read it. Most likely, somewhere in that mess, you're assigning a value to the variable in an if-block, but in case of the else-block there's no value assigned. The compiler knows that in case of the else-block there was never a value and it prevents you from using the variable.
Thanks for the help. I think I understand you. Is there a place I can post my code?
case sensitivity.
here is my code: http://pastebin.com/LrjzLHic
At least start learning how to write your own functions, which will greatly increase code readability and reduce obscure scoping errors like the one you discovered.
So I just need to declare the variables outside the case statements? Does that mean I cannot use values from one case to another for processing?
That's correct.. Switch statements are situational. Visual studio is smart enough to realize that case d can be hit without c, so it throws an error since it is out of scope. You can use values defined in one case for another.. I suggest you on a little research on singleton patterns! It'll solve your problem! Edit: also glancing at your code.. You should put all your case statements in to methods, and declare/set your constants at the class level. Your if statement starting with case d will not work 
as long as you declare them outside of the switch, you can use them in any case. 
It means exactly what it says. Remove the declaration since its already declared once outside the scope. In other words, do "email =" instead of "string email="
Wow yea. Another thing you can try is when you readline the input, add .ToLower() This will ensure you always get a lowercase string so you don't have to check for A or a. This will help to simplify what you've for going on there.
The code looks fine. A while would require you to break out of the loop when you find a value since the check is at the beginning. 
Don't worry about oop yet. Figure out how to segment your code into functions first so your main method is readable. Baby steps
If you are using Visual Studio there is a critical hotkey you will want to memorize. Ctl+J. Ctl+J pops up the intellisense menu on whatever your cursor is on. Intellisense is the little menu that pops up when you hit a period (.). With control "j" you can pop it up any time you want. Intellisense is not flawless but it is really really good at guessing what you meant to do. In this case it would have easily corrected Readline to ReadLine. 
Just a little piece of advice in regards to your first line of code: there's no real purpose to creating an array with only 1 item. Just use a regular, singular int.
To answer the second part of the question: you don't need to set i to 0 at the start of the for loop, it's just a control variable. If you wanted to output the values 20 through 40 in a size 60 array, you could just set i=20 and the end condition be i&lt;=40 instead of checking at the start of the loop if i is within those bounds.
Only instance and static variables are automatically initialized. All local variables (that is, variables that are declared within a function or property) must be initialized explicitly--even to the default value--before use. There isn't anything special about the `for` loop, it's just that typically loop variables are local variables whose scope is only the loop.
Fields (i.e. class/struct members) are initialized by default. Local variables (i.e. declarations within a method) are *not* initialized by default, and must be assigned a value before they may be accessed.
It's even a value-type, not a reference type. ;-)
On a tangent for sure but interesting. So do you generally agree that software "architecture style" in the Java and C# worlds, in practice as well as general recommendations online, tends towards the overly complex? It's strange to me how simultaneously you'll often read threads on HN where people openly ridicule this style, but then you can go to another site and genuinely smart (or maybe just over-educated) people are *passionately* advocating for just that type of design. Just seems so weird to me.
Sad in that I think C# and .NET are really great and more could have taken advantage and benefited from it if MS hadn't been so tight fisted with it. My meaning in "corner the market" isn't strictly financial (although I am sure MS would have benefited financially - as they usually do). But more focused on "mind share". Many dev's and many organizations specifically chose to not use .NET because it limited their choices and options WRT deployment and hardware flexibility and/or because it was closed source. Anders Hejlsberg is a genius and has spent his entire career creating systems that help developers be more productive and able to focus on what they are building (not so focused on how to build it). So, sad for the dev community at large really. Most of us want that "holy grail" language that is easy to work in, powerful when we need it but not needlessly complex, fun to use, and allows us to write code for anything in any situation. C# ticks a lot of those boxes but due to non-technical choices was held back from some of the cross-platform possibilities. In my career I've used over 20 languages to deliver production code. Java, Python, Ruby, Perl, Delphi, Cobol, Pascal, C, C++, C#, etc. Without a doubt C# is the "best" in my opinion (take that for what it's worth), with the exceptions I have mentioned (closed source, non-cross-platform, etc.). 
He's using a do while. It will loop again if the TryParse fails. Now, he isn't actually saving the trimmed string so it might end up outputting wrong data. Edit: I'm dumb and realize what you're saying. The is no Console.ReadLine
xD
If I am not scaling to multiple web servers should I still use a backplain? I mean is it something I can easily add later and avoid the complexity until it is needed? I have built some 2 products with this assumption in the past (one with SignalR beta) and I wonder if I did it wrong.
Just for the record it is not Microsoft SignalR. It is a community owned project so it is just SignalR
Do you have any good examples (e.g. github) of decent patterns using it?
There is no difference.
They are the same, for the most part, but you should use a reference. References point to the object in memory, pointers only point to the location meaning, that's the major difference. Plus, references are safer and leave less room for error due to being managed. finally, references are cheap. If you're still concerned make a build with each and benchmark them with a large data set. 
&gt; Most people build code that has absolute 0 reuse. Agreed, in my experience this seems to be the norm even with people who are very book smart *and* have many years experience programming, it's just so weird to me, it's almost as if the filling of the brain with technical content pushes out all capacity for basic logic and common sense. &gt; I think alot of this stems from "agile" that somewhere people associated agile to mean 'we don't plan anything'. With a comical belief that architecture is "emergent". This is my view for why things are terrible. Completely agree, it's almost like stopping and thinking for a bit "hmmm, I bet I know where this is going, I'm going to spend a a little extra time and code in some additional flexibility just in case" is breaking some cardinal rule. Obsession with YAGNI I suppose. If I could have the $ wasted on rewrites (because no one would listen to common sense) on the project I've been on for the last couple years, I'd have *easily* tripled my salary. I honestly think it's just going to keep getting worse as time goes on. But man, there is going to be a huuuuuge bill coming due across the world for maintenance on all the grandiose software that's been built during this period. 
Consider this advice: using System; public class Program { public static void Main() { Console.WriteLine("Hi, what is your name?"); //Asks user for their name. string name = Console.ReadLine(); //Sets name = to whatever they type. Console.WriteLine("Hi, {0}", name); //Replaces '{0}' with the user's name. Console.ReadLine(); //To pause the console before closing. } }
Many thanks ;3
They are the same. It's just a difference incarnation. One is referenced the other is dereferenced.
What are these libraries that are in the works?
I had some free time today, and like looking at code anyway. So i took the liberty to change some of your code to impliment different programming practices. I don't claim it to be perfect or near the best possible design, but hopefully gives you insight into different programming practices. If you have any questions, i'd be glad to answer them to the best of my ability. I did exclude some of your "features" due to not quiet understanding what you were trying to do. It features OOP, Recursive methods, methods, among other things. Like i said could probably use some more love, but its a start. http://pastebin.com/Mnj8wK5j
Of course you should always use by-reference, since that's a safe feature while pointers are unsafe, but this is not an object but an integer. A reference and pointer point to the exact same position in memory.
But "i.e." would mean the two are the same :) Anyway, I was just being pedantic. To rephrase your original sentence but with the same meaning: &gt; Fields, that is: class/struct members
[Eto](https://github.com/picoe/Eto) and [Xwt,](https://github.com/mono/xwt) both libraries that you can supposedly use today to create cross-platform desktop applications. It's like SWT but for .NET.
Interesting. I'll have to see how they evolve. Have you used either of these? If so, what are your thoughts on them?
I haven't really tried both of them to give any useful feedback to be honest, sorry. Eto does have [a Visual Studio extension](https://visualstudiogallery.msdn.microsoft.com/469490d7-b7b0-41b6-a60f-630be148e494) for it, however.
Cool. Thanks for the info!
What is the error you are getting? Looking at the code if (Info.KeyChar == "C") should be if (Info.KeyChar == 'C')
Glad you solved it, but why not leave the code for others to learn from?
Added ;3 (the actual code that it was, not corrected)
As someone that's been doing c#... a while... It's easy to guess that and understand exactly what and why, but leaving examples of buggy code and their fix for others who are just learning is really helpful, hence my comment.
Formatting is all messed up, here's a picture. http://i.imgur.com/1HEDMxv.png?1
 Console.Write("Enter the number of hours worked: "); double hours = Convert.ToDouble(Console.ReadLine()); Console.Write("Enter the payrate:"); double payRate = Convert.ToDouble(Console.ReadLine()); Console.Write("Enter marital status letter as (S)ingle, (M)arried, (W)idowed, or (D)ivorced:"); string maritalStatus = Console.ReadLine(); double taxRate; if (maritalStatus == ("m")) { taxRate = "0.15"; } else if (maritalStatus == ("s")) { taxRate = "0.22"; } else if (maritalStatus == ("w")) { taxRate = "0.13"; } else if (maritalStatus == ("d")) { taxRate = "0.23"; } else { Console.Write("Error with input."); } Console.ReadLine(); double grossPay = hours * payRate; Console.Write("Your gross pay is:" + grossPay); Console.ReadLine(); // break double netPay = grossPay * (1 - (taxRate)); Console.Write("Your net pay is:" + netPay);
http://materialdesigninxaml.net/
listView.Items.Add() is passed a ListItem, not a String. Hover over "Add" and it'll tell you what parameters the function expects. Generally Visual Studio will tell you what it wants; you just have to listen.
Doh, look at that, you're right. I've only ever added ListItems so I didn't realize it also accepted strings.
Thanks for your help, I made this. http://gfycat.com/FrenchDenseAnhinga [Here's the code](https://gist.github.com/LewisJohnson/14908c524d8e90f3a55b#file-backgroundfill-xaml)
That's awesome! No problem. :)
Resharper
You're running in app space when using xaml, you can't use a lot of the normal namespaces. When you search do something like "file io windows apps" and you'll get the hits you need. https://blogs.windows.com/buildingapps/2013/06/25/file-handling-with-windows-storage-apis/ 
Oh nice! thanks!
What does local variable initialization have to do with code verification? Variable definition happens in run time after the code has been verified. Variables may even not exist in run time.
Thanks.
Yes, thank you for the reply. you were very helpful. I got things straightened out! This sub is great, and such hasty replies!
No worries! Keep at it! 
ReSharper also points out usage of other C#6 features, like nameof operator or the conditional operator.
Does this work with ReSharper?
1. http://prntscr.com/8avvq6 Is it possible to border old-style-property (`string X` on my screenshot), but don't touch abstract methods? 2. Is there way to color customisation? 3. Stay Frosty options page in Options dialog said "An error occured loading this property page".
What would torrenting help? You can already download it. 
Presently, the colors it uses are the ones defined for "Keywords", "Identifiers" and "User Classes", "User Interfaces" and "User Enumerators" (the User xyz items I only had in Visual Studio 2015 and may have even been part of an extension I had installed ... I think it defaults to "Plain Text" when those are missing; I fixed that late last night but didn't push it to the repo - will do that this evening). Are you on VS 2013?
I am using DoubleAnimation to move Ellipse in one of my apps (http://www.blissgig.com/default.aspx?id=21) They move from left to right using c#, not xaml Ellipse Bubble = new Ellipse(); //- MOVE - DoubleAnimation animMove = new DoubleAnimation(); animMove.Duration = new Duration(TimeSpan.FromSeconds(20)); animMove.From = 2000 animMove.To = 400 Storyboard.SetTarget(animMove, Bubble); Storyboard.SetTargetProperty(animMove, new PropertyPath(Canvas.LeftProperty)); BubbleStoryboard.Children.Add(animMove); mMainWindow.BediaBubbles.Children.Add(Bubble); Canvas.SetTop(Bubble, iTop); BubbleStoryboard.Begin(); 
Literally no difference between OS or version... Sorry. Windows 10 is nice, get it if you want, no rush.
Well the open source community like github is a good place to start
Borderless winform with 100% transparency?
Thanks a lot for all the replies! 
Seconded. 
I had actually poked around there for a while but couldn't find anything. Is there a specific category/tag that that I can search for? (Sorry, I really don't know my way around GitHub) For example: I want to be able to drag and drop tabs to reorder them. Before I go writing that functionality myself I'd like to see what's out there (but I really don't see anything at all).
Are we talking a web app, winforms or WPF?
Does Perspex implement the same API as WPF, or is it just really similar?
Lol. A multi-platform windowing toolkit that doesn't work on any OS besides windows ATM. Funny. 
You are excused, I came in here to promote your toolkit also. Great work.
Are you calling the [CommitChanges()](https://msdn.microsoft.com/en-us/library/system.directoryservices.directoryentry.commitchanges) method after setting the property? Edit: I should have also asked, does the user calling the password change have the proper rights to do so?
&gt; It does, but not in the alpha version. RTFM! So what version does it work in? I want that one.
Yes and the user calling the command is the administrator account of the active directory. 
Perspex is a multiplatform project similar to WPF. WPF is a Windows subsystem that IS NOT cross-platform. Hence, the importance of this project.
Yup lol. This is what I don't understand. 
I am pretty sure Steam is using DirectX to accomplish this. I believe it is called a DirectX Overlay. 
this would work with excel and stuff but not fullscreen games since you need to get the dx or gl context of the game and use it to draw on it but for your needs a transparent window eith the size of the window should do the trick in case you need an example for direct x injection you can search for dota 2 translatir. it uses slimdx to draw ontop of a fullscreen game (but the actual programm is broken due to google translate chnages)
Under Windows and .NET 4.5+ :)
I'm not saying it's not important. I'm saying that calling it "the cross-platform .NET framework" in the title is extraordinarily - and I'm sure unintentionally - misleading.
did you check/set the correct UserAccountControl flag? Note In a Windows Server 2003-based domain, LOCK_OUT and PASSWORD_EXPIRED have been replaced with a new attribute called ms-DS-User-Account-Control-Computed. For more information about this new attribute, visit the following Web site: http://msdn2.microsoft.com/en-us/library/ms677840.aspx
yes for a little clipboard history tool i made, however im away from home for 2 days and unable to access it. if you still need a solution after that send me a message and i will try to help you out good luck
One of the most helpful articles I've used on MSDN provides a great [security overview](https://msdn.microsoft.com/en-us/library/bb669057\(v=vs.110\).aspx) of what to consider when building a .NET client application accessing MSSQL. Not a whole lot of tutorials directly in the articles, but it's a good starting point to figure out what's needed for secure database access. Also while the specifics only apply to MSSQL the general authentication concepts are pretty universal.
&gt; IObservable for binding Like [ReactiveProperty](https://github.com/runceel/ReactiveProperty)? 
What does your implementation of INotifyPropertyChanged look like? Usually you pass the name of the property as an argument for the event, but you might just have things set up way differently than what I'm used to. For example, using a super basic INotifyPropertyChanged: public event PropertyChangedEventHandler PropertyChanged; protected void RaisePropertyChangedEvent(string propertyName) { var handler = PropertyChanged; if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName)); } You would raise it like this public string FillTextSource { get { return _fillTextSource; } set { _fillTextSource = value; RaisePropertyChangedEvent("FillTextSource"); } } 
Screenshot added to readme.md :)
ahhh! so in my code its a '-10' but that's underlined as an invalid character. assuming the ten needs parenthesis or '-' is just invalid there? good eye!
I could kiss you! I paren'd the 10 like '-(10)'!! thank you, thank you thank you!
Just perusing this quickly... as a MechEng guy, this seems really odd way to go about things.
By using the [CallerMemberName](https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.callermembernameattribute.aspx) parameter attribute you can skip passing in the property name. The documentation lays out how it's used. Edit: bad link address. 
This is what I use
If you need to modify it statically, though that seems a bit questionable, you can make the property static. The backing field should also be static as well. In addition you need to make sure, as has been mentioned in other comments, that your property name is being used by the event. public static string FillTextSource { get { return FieldName ;} { set { FieldName = value ; OnPropertyChanged() ;} Sorry for the poor formatting, phones aren't made for coding. 
This is awesome. This was the most fun I've had with Windows 98! Can you add a high score table editable in Notepad? ;)
Perspex is the trademarked name of a line of acrylic. I know it's a different industry, but people can be lawsuity sometimes.
Awesome work.. Ive worked on something like this internally, looks good :)
&gt;As Windows 10 doesn't have Minesweeper Huh? https://www.microsoft.com/en-us/store/apps/microsoft-minesweeper/9wzdncrfhwcn
Open source community can make it better ;)
Ok, I'll rephrase: as Windows 10 doesn't have the classic minesweeper installed by default and has a store version which is free to download but has ads unless you pay, and is quite different in look and feel to the old classic XP version......
I submitted a couple of pull requests for a minor change. I'm a total noob with GitHub so I apologize if I screwed anything up.
What exactly are you trying to accomplish? Whatever is calling this method is getting a Dynamic back, so you can just `return val;` and be done. I'll admit I don't know everything about Dynamics, so maybe there is a reason to cast it, so you can try `Convert.ChangeType(val, typeof(valtype));` ~~That will change the runtime type if you really need to for some reason.~~
Haha it's ok, so am I, so we can screw it up together.
This isn't C#
`Convert.ChangeType` will not change the type, despite its name. It will convert the data, for instance from an integer to a string. Type conversion and type casting are separate things, although they have the same syntax in C#. What OP wants can't be done in the CLR, however, as you also state, it's not needed.
Thanks, I've never had a need for `Convert.ChangeType`.
That doesn't look like too C# specific, a lot of byte shifting, XORing and ternary expressions with byte arrays. Dictionaries are just maps.
Which parts of the file do you not understand? No one is going to explain a 400 line "snippet" to you here. If you could point out a specific part you don't understand then it would be a lot easier to help you.
IEnumerable&lt;T&gt; ~~and its descendents are~~ is covariant and not contravariant. You'll need to cast. addendum: List&lt;T&gt; is invariant. The following details Covariance and Contravariance in .NET with special regard to generics: https://msdn.microsoft.com/en-us/library/dd799517(v=vs.110).aspx
I'm having a hard time understanding what you mean, could you write out the syntax that's failing? Or a general idea of what you're looking for?
Only interfaces can have covariant type parameters: interface ICage&lt;out T&gt; { } // note the "out" class Cage&lt;T&gt; : ICage&lt;T&gt; { } ICage&lt;Animal&gt; myCage = new Cage&lt;Dog&gt;(); Also, generic type parameters may only be covariant if they are only used as return types, but not as arguments. So this works: interface ICage&lt;out T&gt; { T ReleaseAnimal(); } but this doesn't: interface ICage&lt;out T&gt; { void CageAnimal(T animal); }
Anything related to error correction and detection, pretty much. I want to know how it generates EDC (error detection code) and ECC (error correction code) for a given sector
You're right, you would have to have a static event that all of the instances subscribe to. This event would be raised by the setter, which causes all instances to raise their property changed event. 
I already tried it this way.... My problem is that while the first animation would take palce , several tens would be called in the mean time from the EventHandler . So none of them actually work . Also I do not have any preseted data for the coordinates as the coordinates are provided from the event handler by the HID 
You will need to do that by yourself. If you don't understand that well enough as a java programmer you won't be able to do anything with it even if we would describe it to you.
It isn't setting to AD that's the problem. Every article I read says it should but it isn't. Every other property writes correctly. 
I'm not trying to insult you, it's just as I said that this is no C# specific code. It's a lot of byte stuff that I don't understand either without knowing the details of what it tries to achieve. I understand that it's about error correction codes but there's a lot of magic numbers in there, a lot of byte manipulation that would look like this in Java, C#, C++ or probably Python. Half of the code could probably used as Java code without much change. For some explanation on bitwise and bit shift operations look here: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html As you can see the syntax is similar to identical.
"wrote in 2003" :)
&gt; Because most of the time, you don't care about the underlying implementation (unlike Java) This sentence makes absolutely no sense. Why would users of C# not care about the implementation, but users of Java would? Why would *anybody* not care about the performance characteristics of the implementation? LinkedList can be the right way to go in a lot of circumstances - particularly when you're rarely inserting at the end of list. **Edit:** To summarize my position, since it seems I'm attracting a lot of flaming, is that data structure choice matters, and that you should pick the structure that makes sense for your scenario. Linked list has its uses, List&lt;T&gt; has its uses, stacks have their uses, btrees have their uses .. so on and so forth. The argument I'm responding to is the position that "meh, list is good enough for just about everything, so why are you using a linked list?". I disagree with this exact statement: &gt; If you're worried about performance - for the overwhelmingly vast majority of cases you won't notice a slowdown. Internal to the implementation of List&lt;&gt; it has optimizations that almost always do the right thing.
&gt; @Html.DropDownListFor(model =&gt; Model.Role.Id, ViewBag.RoleId) Tried this, buuuut I'm getting a weird error: &gt; 'System.Web.Mvc.HtmlHelper&lt;Ortund.Models.User&gt;' has no applicable method named 'DropDownListFor' but appears to have an extension method by that name. Extension methods cannot be dynamically dispatched. Consider casting the dynamic arguments or calling the extension method without the extension method syntax. Not sure what to do about this...
Thanks for the answer. Yeah, others mentioned covariance and contravariance, I googled it and found some MSDN articles that explain the topic. It's enough bibliography to have fun with. &gt; That said, are you sure you need it? In any project with a medium or high complexity, at some point I feel I have to deal with the fact that dogs are animals and programmers are humans - even when used as type parameters. I'm surprised you say you've used it only once or twice. 
&gt; interface ICage&lt;out T&gt; &gt; { &gt; T ReleaseAnimal(); &gt; } You could also add a constraint to T: interface ICage&lt;out T&gt; where T : Animal { T ReleaseAnimal(); }
&gt; If you take something out of the cage you're guaranteed that it will be a Dog. However, when putting something in to the cage, then the interface only specifies that the cage can hold Animals. So you try putting a Cat into the cage, and you'll get a runtime exception as the cage only can hold Dogs. That's a good point. I've dealt with this problem in Java programs and now I understand why in C# they put this at the interface level.
Perhaps you are working at a more advanced level than I am, but if you have a list of animals and want one of those animals to behave as a dog you are going to have to cast the animal to a dog no matter what. If all you ever need is a List of animals, make a list of animals.
Java forces the selection of a list storage mechanism onto the programmer. C# prevents that abstraction from leaking by hiding the storage mechanism from the coder. Yes, you *can* choose to use a linked list in C#, but that would usually be because you are operating at the extremes of performance.
Just wanted to say thanks. I figured out the answer and edited my OP to show. If you have anything else to say please feel free. 
Just wanted to say thanks. I figured out the answer and edited my OP to show. If you have anything else to say please feel free. Also your answer in particular helped me. What I was doing was changing the password and I wanted the user to have to then reset it again upon login. I thought to myself how could the password change but not the flag. So I tried to do something simple like change the job title property and found it didn't work. I use Invoke to change password and not value. Perhaps there is something unique about the Invoke method I didn't know about. 
If you haven't bumped into it, yet, you may want to check up on c#'s virtual, override, and new (as it pertains to method declarations) keywords. IIRC, in Java, methods are virtual by default, so an object always exposes the most specialized behavior in its inheritance tree. In C#, inherited methods are *not* virtual unless explicitly specified, so the behavior is often dependent on the type of the reference, not just the type of the underlying object.
This makes absolutely no sense. The correct choice of data structure, regardless of its presentation, is one of the most important choices to make when designing software. Edit: Instead of downvoting, would someone care to explain their position?
Woah, he deleted the whole account.
That is true in academic and high-performance settings. In a general business environment, speed of delivery of working code is more important. While choosing the *wrong* data structure is bad, choosing one that is "good enough" that lets you deliver on time is almost always the right choice. Microsoft understands this, which is why List&lt;T&gt; abstracts that away. 
&gt; Yes, you can choose to use a linked list in C#, but that would usually be because you are operating at the extremes of performance. This statement is completely false. Using the right list implementation can mean 2 minutes or 2 milliseconds execution time. What if you're building a list by constantly inserting at the head? In a array-backed `List&lt;T&gt;` implementation, that means that every single insert requires copying all previous elements. Every operation gets more and more expensive. Inserting N elements means N^2 /2 moves. If you were using a Linked list, the insert time would be constant.
 &gt; `2. Setting a default value for C# Auto-implemented properties via DefaultValueAttribute It would be far more efficient to just set the default value in the constructor, rather than using reflection to run through each property, try to find the attribute, and set the value. The DefaultValue attribute is meant to be used by form designers to auto-fill default values on forms, not by the back-end code. &gt; `9. Undocumented C# Keywords __arglist __reftype __makeref __refvalue [...] you should be careful with them Yes. You should *also* be careful with WeakReference, BigInteger, Environment.FailFast, Parallel.For, and Parallel.ForEach.
&gt; That is true in academic and high-performance settings I disagree strongly with this statement. It matters when it matters. Have a tight loop that operates on a data structure? It's going to matter, and it could mean the difference between microseconds and seconds of execution time. This shows up in just about any piece of software in the world, from complicated apps like DBMSes, to enterprise apps / webapps like the Amazon store or Reddit, to simple text editors (compare the performance of notepad versus vim when opening large log files). Correct data structure decision can affect even the simplest of apps. &gt; In a general business environment, speed of delivery of working code is more important. Depends on your business environment. In one that cares about software quality, this is not true. In a business that just shits out software and doesn't care for correctness, CPU usage, security, privacy, power usage, yeah you're going to find that.. but they why are you working for someone like that? And in this case, it's only a question of *your* skill, not any priority of the business - you can make the choice and start using the data structure in seconds, its not like you have to make it yourself. Do you think a place like StackOverflow would run nearly as well as it does if they didn't have a strong focus on software quality? They're not even that complicated when it comes down to it, and they manage to host the entire stackexchange system on nothing more than a handful of servers. Code quality can save you a ton of cash if you're smart. I'll grant you, there are certainly times when you're storing no more than a handful of elements and spinning up a List&lt;T&gt; is no big deal. Yeah, its the go-to default type for simple don't-care storage. However, there are lots of parts where it matters what choices you make. Asymptotic behavior matters a lot when you're processing thousands and thousands of transactions. &gt; Microsoft understands this, which is why List&lt;T&gt; abstracts that away. I disagree entirely. Directly from MSDN: &gt; The List&lt;T&gt; class is the generic equivalent of the ArrayList class. It implements the IList&lt;T&gt; generic interface by using an array whose size is dynamically increased as required. The implementation and its consequences are directly discussed exactly where they should be in the documentation. It is an generically type, auto-growing array. ... If you think that making the right choice for data structure usage is not important, you've been only exposed to a very small class of software development. Furthermore, on a forum for the discussion of software development, why are you advocating for mediocrity? Of all places, wouldn't this be the place to discuss the right way to do it?
The type of `rt` is `System.Type`, not `Objects.Key`. To compare a Type variable to another type, use `rt.Equals(Objects.Key)`.
The first point is moot because C#6 introduces [auto-property default value initializers natively](http://www.kunal-chowdhury.com/2014/11/csharp-6-auto-property.html).
Hey guys, Some of us devs here at sporting solutions recently needed to find the difference between 2 C# objects. Rather than write it by hand for each type of object we wanted to diff, we wanted a library which could perform a diff between any 2 objects. We couldn't find an existing library for this, so decided to create our own - ObjectDiffer. It's available on nuget as [ObjectDiffer](https://www.nuget.org/packages/ObjectDiffer) Hopefully this will help some of you guys out if you're struggling with the same problem we were. The library is very early in development, so any pull requests would be very welcome :). 
You should code against an abstraction of the List, like IList, then you inject your specific implementation instance. That way the consuming code doesn't have to care about whether it's a linked list or an array or whatever, it just adds and removes things from some list. Then you can inject an implementation of IList that gives the best performance for your scenario. And it makes it easy to substitute a new implementation without having to change any code. In this fashion you can use the List and don't have to care about the implementation of the List. You care about it at your app root but you don't care about it in any of your code.
Great idea for a library and thanks for posting the project! Regarding your example regarding collection comparisons, admittedly it took me a bit of time to figure out what you were doing with your code. It might be more concise/obvious to show a different list, but with the same elements simply by having: var newList = oldList.ToList(); newList.Reverse(); or simply explicitly defining/adding the objects: var obj1 = new MyObj{Id = 1, Name = "object"}; var obj2 = new MyObj{Id = 1337, Name = "another object"}; var oldList = new List&lt;MyObj&gt;{obj1, obj2}; var newList = new List&lt;MyObj&gt;{obj2, obj1}; //note that they are added in reverse order Also, any particular reason why you don't also check for `Object.Equals(objA, objB)` in addition to the `GetHashCode()` check since we know that the hash code is not a sufficient indicator for equality? (EDIT: In fact, why use `GetHashCode` at all when you can use `Object.Equals(objA, objB)`?)
woah! this looks epic *-* Cheers mate :)
I completely understand that internally you should bind to the least specific interface you need - IList&lt;T&gt; for instance - and inject the instance necessary during construction/initialization/whatever. It's the first thing they teach you when learning polymorphism. I, too, took CS 101 15 years ago. However, the post I'm replying to is regarding the aspect of making that choice - he's questioning why would someone ever use a LinkedList vs a List. When making that choice, you certainly do care about the underlying implementation. The poster I'm replying to is making the case that it rarely matters which implementation you use, and thus their position is just to always use List&lt;T&gt; because its easy. To quote the poster: &gt; Is there a particular reason why you specifically chose to use a LinkedList? Because most of the time, you don't care about the underlying implementation (unlike Java), so creating a new List&lt;string&gt;() is good enough. I don't understand why there's a difference between C# and Java (because they don't provide different implementations that implement the same interface?). The poster is actively arguing against using LinkedList without considering why someone would; almost like they're exhibiting functional fixation. And they also said this: &gt; If you're worried about performance - for the overwhelmingly vast majority of cases you won't notice a slowdown. And I completely disagree - there are plenty of places in small, medium, and large apps where data structure choice matters.
yeah, we use autofac as a standard. I think this might be a situation where relying on the container isn't the best idea. I'd have be tempted to expose an array of ITypeDiffers off of the Differ object that are initialized to your default three in the constructor. Just allow people to add or remove as needed. Maybe have an overload that allows you to be explicit and whoever is implementing this library could wire up their DI container of choice there
Great suggestion, I'll update the readme now :). This part of the differ is a bit confusing - basically, we assume that the hashcodes of the objects are the same if they are *meant* to be equal (e.g. database objects with the same id), but if the `.Equals` method returns true we assume the objects are *actually* equal. You can override this by overriding the default equality comparer as in the readme.
That sounds like a really good idea, I'll implement this when I have a chance. I've created an issue that you can keep track of [here](https://github.com/sportingsolutions/ObjectDiffer/issues/2)
You're an idiot if you think correct data structure choice is premature optimization. Software *engineering* is about thinking about the design of the app and its goals, and making choices about the design of the app to meet those goals. Would you design a DBMS that uses arrays for its indexes? You'd be insane if you think that's true. What about a log parser and indexer? What about a persistent message queue? Data structure choice matters, big time. If you're not thinking about it, you're not a software engineer.
If I am reading this correctly then I believe you have fundamentally misunderstood the purpose of .GetHashCode, it is perfectly legal (and expected in normal .NET code) that different objects can have the same hash code. 
Great! When you do, consider adding a `public Differ(params ITypeDiffer[] typeDiffers)` constructor overload. That can also simplify the creation to: return new Differ( new PrimativeDiffer(), new EnumerableDiffer(new HashCodeQualityComparer()), new ObjectDiffer() );
Hmm. You may need to actually create a public action on your controller for this view to call into. public ActionResult Delete (int id) { return DeleteAsync(id); } private async Task&lt;ActionResult&gt; DeleteAsync(int id) { .... } or something like that
&gt; Software engineering is about thinking about the design of the app and its goals, and making choices about the design of the app to meet those goals. No, that's software *design*. You have to include cost for it to become engineering. 
I don't get the downvotes. You may be bragging but it's kind of cool what you did. If anyone can explain the downvotes please do.
Does this need to be in-browser? Would a simple desktop deployment suffice (WPF, ClickOnce)? Are the clients running Windows 8 or newer (Windows Universal App)? EDIT: Have you considered ASP.NET WebForms/MVC?
Haha, no problem, just glad you figured it out. Might be easier to throw down a bigger snippet in pastebin (or an alternative) in the future. I was going to test it out today as I didn't have the resources to do so yesterday.
&gt; I believe the C# compiler is smart enough to figure out which classes support covariance. Nope, it must be specified in the interface's type parameter declaration.
&gt; However, the post I'm replying to is regarding the aspect of making that choice - he's questioning why would someone ever use a LinkedList vs a List. I'm sure you're aware, but linked lists have different Big O notation for things like inserting, searching, indexing, etc. than other data types, so you should definitely use the data type implementation that best fits your performance needs.
In-browser would be best as that's what the users are accustomed to and it avoids local installs. All machines are win7. With your suggestion of ASP.NET WebForms/MVC, I'm guessing that that approach is closer in alignment with the HTML5 approach that is suggested for the future? I suppose my reluctance to move on from Silverlight is the ease of building something out quickly. Thanks for responding btw.
Only IEnumerable&lt;T&gt;. Its descendants are invariant. 
A hard dependency on ninject. I think that could qualify as irony. 
ahhh, thought you had it private for a reason.
Yeah, I feel your pain. I get why it's going away, and how 99% of what you can do with Silverlight you can do with HTML5; unfortunately I'm stuck in that 1% where equivalent HTML5 functionality simply does not exist. ASP.NET WebForms/MVC are still relatively easy to work with compared to raw HTML5/Ajax/JS/CSS. If you want to avoid going too deep into the HTML aspects and just kind of work with controls that "just work", you can give WebForms a shot. It's setup in such a way that you can use a lot of existing controls without having to write explicit HTML. Some find it easier to understand its postback model compared to MVC. (though your mileage my vary) Especially if you're thinking of having basic controls (TreeView, DataGrid, AutoSuggestBox), these are all built-in controls/freely available controls for ASP.NET. Also, based on what you need, maybe [LightSwitch](https://msdn.microsoft.com/en-us/vstudio/htmlclient.aspx) will be right up your alley. Generally it makes it easy to create basic data I/O applications and GUIs for users. It started off as a Silverlight technology then Microsoft moved it over to HTML5.
Maybe I missed your point, but your example is flawed. You cannot declare the list to be of objects of type "Animal" and then assign a list of objects of type "dog" to it. That would mean that it would be valid (for the compiler) to add an object of type "cat" to the list (because the list was declared as of containing type "animal"), which obviously is not correct, since a cat is an animal but most certainly not a dog which the actual list (that you instantiated) is of. EDIT: I was aiming specifically at the C# example he gave, was on mobile and missed to clarify that :) So in C# just declare the list as of type "dog" if you plan on using a dog-specific list. And even in Java his example boils down to "I declare this list to be of a type that extends object" In C# I would most likly just use "var" then... no?
My reasoning was that I wanted all objects to be "diffable" not just objects that implement a certain interface/class. If you want to, you can override the `SameObjectComparer` to have the behaviour you want
Haha nice to know someone else faced this challenge :). Yes, performance may be an issue if you're performing millions of diffs, but for just one diff per request it should be fine. How does your library work? There isn't currently a way to ignore properties - that would be something nice to add in. I've created an issue [here](https://github.com/sportingsolutions/ObjectDiffer/issues/3). Yes we definitely do. There are multiple nodejs libraries in npm that diff JSON, yet nothing for C#. It would be great if you could open source your library, it's always good to have a choice of library. Don't worry about it not being clean enough, I'm sure it's better than 90% of npm packages out there :P. 
I did... Because I'm a fucking retard lol
It doesn't have to be a database object, it applies to pretty much any object that has some sort of identifier. If you only use the `Equals` method, then there's no way of showing that an element in an array has changed - the differ would always think that an element has been removed and another added (see the example in the readme). You are completely right about this way being very prone to misunderstandings/bugs. However I really couldn't see a way around this.
That sounds awesome, expression trees scare me though. I'll definitely try to steal some of your code for ObjectDiffer if you do open source it :P
I would be very entered in seeing that.
It is, however, valid Java (Java generics are inferior - they do type erasure, so `List&lt;Integer&gt;` and `List&lt;MyClass&gt;` both compile down to `List&lt;Object&gt;`. As he's a Java programmer, he's trying to find out why.
I don't understand how you do not understand this. C# syntax is relatively similar to Java and the .NET framework API's such as File.Read for example are named in such a way that you should be able to determine what it's doing and convert it to Java.
ViewModels. I've heard of them. Will get to implementing them at some point. As of now, this is what I know and this project is time sensitive so it's what I'm doing. Not to sound ungrateful for your contribution though. I'm happy to learn better ways to do things and this does seem better.
I wrote something similar to pull my nvram off of my dd-wrt router. I didn't use CreateCommand() or Execute() at all. Just var cmd = ssshClient.RunCommand("nvram show"); var nvram = cmd.Result.Trim(). The argument to RunCommand() is something that you'd type at an SSH prompt. You're probably looking for var cmd = sshClient.RunCommand("enable " + enablePassword.Text); or something like that. Also, make sure that the command you're trying to execute returns quickly from ssh/an ssh client. It looks like you're going to block your UI thread while you wait for the command to complete.
They put it at interface ( and delegate ) level because they dis not want to do the required work in the CLR to enable it on classes. There is nothing wrong with having covariant or contravariant classes. Java generics are broken in many ways but this is not one of them.
Type erasure is irrelevant to this example.
How is it different than https://github.com/jamesfoster/DeepEqual ?
Unless I'm missing something, that library only tells you if 2 objects are equal, rather than how they are different. Internally, it seems to work in a very similar way to ObjectDiffer, it looks like it could easily be modified to have the same functionality...
The api exists within the service project. It's structured same as MVC, but uses ApiController classes to manage the data flow between the client application and the database. So I guess technically the service is the middle man?
Big-O notation is very misleading. The high cost of pointer-chasing usually means that LinkedList is the wrong choice, even when Big-O suggests otherwise.
Still, documenting the default value with the attribute would be a really good idea.
I suspect you really want oauth against steam. This link helps with that if that's what you ultimately are trying to do http://www.oauthforaspnet.com/providers/steam/ But this isn't a show me the codes question. There is a lot to consider when doing authentication especially like this. To put it bluntly if you don't know HTTP they don't want you able to gather stream user name and passwords. 
Don't worry, we can manage that by using autofac to inject the appropriate dependency injection framework.
Can you have people register a set of Func\&lt;TObject, TKey\&gt; with some container so that instead of using GetHashCode, you can get the appropriate key extractor method from your container?
I'll throw another vote for you releasing this. I have been working on getting my head around using expression trees to minimize reflection, and this would be a wonderful example to read. Not to mention an incredibly useful library. :)
I have to agree here. I have worked on a lot of subsystems in my current project where two arrays with different ordering are specifically defined as being UNEQUAL. I realize I could build my own ObjectDiffer for that, but it feels like that assumption is for a particular set of use cases rather than being generalized. It basically comes down to whether you want to treat compared sets as combinations or permutations for the sake of equality checking. 
I believe you're looking for the static method Int32.Parse(string) or Int32.TryParse(out int) I usually use the second as it returns a bool if the Parse was successful and stores the result in the out param you pass.
`int.Parse` excepts if you input something that's not a valid `int`. Since these methods are meant to parse user input, and invalid input is not an exceptional condition, it's considered more idiomatic not to throw. So use `TryParse`, which does not throw.
The default behavior should be that it checks the object for equally if the hashes are the same. This is useful for everyone. Hashes does not indicate identity. They are primarily used to distribute objects in hash sets which has absolutely nothing to do with identity.
&gt; TimeSpan offset = TimeSpan (0, 0, 0, offsetInt, 0, 0); You're missing the `new` keyword. Also, `TimeSpan`doesn't have a constructor with 6 arguments. You may be looking for the `TimeSpan.FromHours()` method. Also have a look at the `TimeZoneInfo` and `DateTimeOffset` types if you're not using them already. Timezones are messy and complicated, don't attempt to reinvent the wheel. 
Hm, I don't really see the value in it myself. 
Mostly because attributes show up in the API documentation and people always forget to mention the defaults in the prose. Beyond that it might come in handy when building designers (e.g. the WinForms and WPF editors) and code generation scenarios.
I'd go the route of generating a DynamicMethod per type compare and perhaps use property attributes for metadata . If you're looking into generating IL, save yourself a bit of headache and use [Sigil](https://github.com/kevin-montrose/Sigil). If you want to the convenience of using an IOC container to manage dependencies, you can 'embed' [LightInject](http://www.lightinject.net/) using the 'source' NuGet package that adds the source code as a single file with 'internal' visibility. Coupled with [ModuleInitializer](http://einaregilsson.com/module-initializers-in-csharp/), you can setup the internal container with default dependencies at runtime without the need to have the library user call an initialization method.
to save yourself all that string concatenation, look at the custom date time formats here: https://msdn.microsoft.com/en-us/library/8kb3ddd4%28v=vs.110%29.aspx and https://msdn.microsoft.com/en-us/library/system.globalization.datetimeformatinfo.timeseparator%28v=vs.110%29.aspx YYYY.MM.DD HHcMM should equate to string dtFormat = "yyyy.MM.dd HH" + DateTimeFormatInfo.TimeSeparator + "mm"; 
It really depends on the semantics of the program and the class declaring it. The example was oversimplified to show the core of the problem. Suppose you have a pet shop with a sell() method that returns Cage&lt;Dog&gt;. Then you have a Vet class with a method heal() that accepts ICage&lt;Animal&gt;. Clearly it is ok to pass the dog cage to the heal method. However, if I had a cat-only method then it shouldn't accept ICage&lt;Animal&gt; as a parameter to avoid inserting cats in other type of cages. It might be specific to each particular case, but my experience has been that in any complex enough project you'll face this issue sooner or later. You may have a class with method that accepts a list of employees and calculates salaries, and in another package you may have a completely unrelated class that produces a list of programmers as a return value. As long as the salary calculation doesn't modify the list, passing the list of programmers is valid and you may even have to. Methods in the Employee class shall be polymorphic so that the salary calculation works with just *any* employee.
The first example produces completely the wrong result. In the second one, it'll think that `hashMatchedObject1` has changed into `hashMatchedObject2`. You're right that this behaviour needs to change, I've created [an issue](https://github.com/sportingsolutions/ObjectDiffer/issues/5) for this. 
You're right, it currently ignores ordering mainly because that was our use case. However, I do think that would be the most common use case. I've created an issue for this [here](https://github.com/sportingsolutions/ObjectDiffer/issues/5)
[CLR via C#](http://www.amazon.com/CLR-via-Edition-Developer-Reference/dp/0735667454) Sounds perfect for what you want.
You're missing the await keyword. You want to wait for the async function to finish, before you continue. Task&lt;string&gt; strMaster = await parseWebSite();
This looks indeed exactly what I need. Ill take a deeper look. Thanks !
This also looks excellent, I'm cheking it right now. Thanks for the tip.
Maybe this can help you https://github.com/Overv/SteamWebAPI
What I meant to say is that , I have attempted to use DoubleAnimation to move my ellipses on the canvas . Each time the Wiiremote would call it's changeEvent it would inform the GUI of that and the GUI would respond acordingly to the changes by updating coordinates in lables . However , in the same dispatcherAction where the labels are updated I also make and run a animation each time the coordinates change , but on the GUI the ellipses that I made the animations for do not move .
Uhm... does that mean that any T is acceptable as long as it inherits from Animal? Is it equivalent to the Java question mark syntax? public void heal(Cage&lt;? extends Animal&gt;) { }
Yes, it means any T that inherits from Animal. I should probably have also [linked MSDN on type constraints and generics](https://msdn.microsoft.com/en-us/library/d5x73970.aspx). (I don't know if it's equivalent to the Java syntax. Java generics were introduced at or just after I last touched Java, so I don't know much about them.)
Removed as it's a [duplicate submission.](https://www.reddit.com/r/csharp/comments/3jc8s7/c_what_i_need_to_do_to_get_the_result_in_textbox/)
But you're engaging in the same fallacy that my parent is - that LinkedList&lt;T&gt; and List&lt;T&gt; are interchangeable. They're not - they're used for vastly different purposes. If you're building a list 100's of thousands of elements long, and happen to be performing a lot of inserts into the body of the list (instead of the tail), then List&lt;T&gt; is going to perform terribly because every single insert has to move the whole rest of the list, and LinkedList&lt;T&gt; will destroy it in terms of performance. In a write-heavy workload, a LinkedList&lt;T&gt; can be lightyears better than a List&lt;T&gt;. If you think that LinkedList&lt;T&gt; is a code smell, then I think you've been around too many developers that don't understand how to use data structures correctly. Nearly every data structure has its place, including LinkedList&lt;T&gt;.
You're getting better at telling us the issue, but it's still not as clear as I like. Here's what I believe you are saying; You are moving the Wii Remote (two words, not one) and you have Labels (not lables, PLEASE spelling and grammar help us understand you) tell you the coordinates. Good idea to have the data shown! The thing is, in my experience DoubleAnimation needs at least 100 milliseconds to run it's animation. Maybe a little less, but even so a human can move their hands quite quickly. So I am **guessing** that your movements are too fast for the animation. If this is the case I would simply not attempt an animation, but each time the coordinates change just set the object's X and Y positions. Don't bother to animate them.
Hi I used textbox1.Text = await strMaster; And it worked. Thanks for pointing in right direction. 
Thanks for that. It works like a charm now. Somehow was not able to figure it how to introduce await over here. Now I won't forget. Thanks.
For in depth view of the CLR, go with CLR via C#. You can also try helping others in a place like StackOverflow, where explaining even the simplest things requires you to actually think about them and put together a well formed answer.
What is `source`? If it's a `StreamReader`, the first call to `ReadToEnd()` will, as the name implies, advance the `Stream` to the end, after which the second `ReadToEnd()` will return nothing because there's no further data. Assign the value of `ReadToEnd()` to a variable instead, and then use that variable in both conditions.
Thanks it worked!
Microsoft's Step-by-Step guide to Visual C# is expensive but a worthy purchase.
The nutshell from O'Reilly is a godsend.
If this is similar to F# where you can have "let" declarations within another "let" then this would be really useful
w/ some jquery because lazy: $('.submit-button').on('click', function (e) { e.preventDefault(); //do validation $.ajax({ type: "POST", url: "/somecontroller/someaction", contentType: "multipart/form-data", data: $('#some-file-input').get(0).files, success: function (data) { /* do whatever */} }); }); Then just get them with HttpContext.Request.Files in the controller.
As a caveat, this will not work in IE 9. It does not support the [File API](http://caniuse.com/#search=File%20API). I would recommend looking into the popular [jQuery File Upload Plugin](https://github.com/blueimp/jQuery-File-Upload).
You're right, as I'm rereading this now - I completely missed what he was saying. Thanks for helping me understand that.
If your tree is not too deep, you could set [FileSystemWatcher.IncludeSubdirectories](https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.includesubdirectories\(v=vs.110\).aspx) to true.
You're assuming more than I've said, which gets to that remark about "taking an unnecessarily combative approach". If all you need is a *list*, List&lt;T&gt; is preferable to LinkedList&lt;T&gt; in almost every case. It's faster, allows random access, etc and so on. This isn't a "fallacy". They're both collections and, in some sense, interchangeable. All that's been pointed out is that, in the general case, List&lt;T&gt; is a better choice than LinkedList&lt;T&gt;. Which it is, in the general case. You are correct that data structures are important and that *if you need a **linked list**, you need a linked list*. But, most of the time, you just need a list. But, if a *list* is all you need, List&lt;T&gt; is perfectly reasonable as a starting point, and that's all the average programmer working on the average problem is likely to need. &gt; If you think that LinkedList&lt;T&gt; is a code smell, then I think you've been around too many developers that don't understand how to use data structures correctly. Really, you have *no idea*. We don't all the option of working with the best of the best. Or even the best of the rest. *Somebody* has to work with the rest of the rest. Hooray. But! I qualified that statement for a reason. &gt; Nearly every data structure has its place, including LinkedList&lt;T&gt;. I think you'll find I didn't say otherwise. And, in the meantime, *none* of this has *anything* to do with the question OP actually asked.
I was doing local functions in PASCAL in college 20 years ago...
I posted this not because I think it's great (I'm not sold on them right now), but because I was hoping to generate some discussion about them. Since you've got some experience: Would you use them in C#? Do you think you could provide an example where they'd be useful? Any downsides you remember?
You kinda can do local functions with Action&lt;T&gt; objects and lambdas.
I agree with /u/ocbaker; aside from recursion, what does let us do that lambdas and Action&lt;&gt; or Func&lt;&gt; don't?
Probably the latter. I graduated with a degree in CS and passed the Java OCA exam no problem (just last week).
I agree. I have resharper installed and I actively use its "Reduce Nesting" feature because I hate my functions being over 60 ~~20~~ lines. It makes an unreadable syntax tree. *edit*: someone pointed out that 20 is unreasonable. I conceded. 
I like it, but it's somewhat narrow use. In addition to offering recursion and iterators, the syntax is slightly more compact than Func or Action (and potentially more familiar to novice users). Presumably these can't be assigned new values within the scope, which may make code using this convention a little easier to reason about. It's not a humongous change, but I like it.
Thank you for that. 
Hey, I 100% agree that a function that's over 3 or 4 hundred lines is abolute shit. But citing your "20" figure is just as unresponsible.
For example I'm writing coordiante geometry algorithms. I got this one function that merges polygons. I can't write that shit in less than 60 lines, not to mention 20. You got to keep in mind there are different problem domains.
One word: javascript. Two Words: No Thanks!
/u/aidirector has it right it is not process intensive for it is a file system hook. I use this to monitor a whole drive.
Along with a book, get a trial to an online tutorial video site (I personally like Pluralsight). And maybe pay for another month or two if you like it. There are also a lot of good videos for free on youtube. Not quite as well organized as Pluralsight, but you can still learn a lot from them.
I've already got that set to true. It works OK when files are renamed but it won't fire the renamed event when a directory is renamed.
Can you watch the one above? You can still filter if you have some idea of the name space the directory occupies.
Dictionaries are your friend. 
That's not what he means. A Dictionary is a class that will suit your needs. Your English is perfect as far as I'm concerned. Especially if it's not your first language.
Why the superfluous enum layer? Just have the methods accept a ColorPalette argument and put the palettes in public fields of a container class (or the ColorPalette type itself). Same way System.Drawing.Color, System.Drawing.Brushes etc. do it. And make the ColorPalettes immutable if they're shared objects, it's safer for structs anyway. &gt;I see myself winding up with many ColorPalette variables every time I create a Button, which seems wasteful. Not sure what you mean by this.
You can return a lambda, or store it. This has scope for only as long as the parent method is running. 
You can use an array of ints of size 26 where each index represent the position of a letter + 1. Think about how you can use this information to come up with a solution.
ive been given constants to use though (its uni)
this sounds analogous to classes in css. in css you might have: .warning-button { background-color: red; color: white; } and then in your markup: &lt;button class="warning-button"&gt;oh noes!&lt;/button&gt; your palettes are getting at the same idea. you could pass in that static instance of ColorPallete or whatever to the button's constructor and have the button style itself.
Local functions does not create a closure. Closures essentially move local variables into a heap allocated object degrading performance. They also require both allocation and collection while local functions does not even though they can still access local variables like a lambda closure could.
You can do that using Linq's Count(), for example: ``` var numberOfA = "This is a test".Count(c =&gt; c == 'a'); ``` Count will simply iterate over each character, and count how many times the predicate returns true. This means that if you want to include the uppercase A too, you can check if c equals a or A. 
What's wrong with BALL_SIZE + GAP_SIZE?
This makes me queasy.
You really don't want to use .Count like that in this situation. You'll end up iterating over the collection once for each letter you're checking if you do that. Using an Array of Dictionary like other users have posted means you'll only need to iterate over the collection once.
You're right, I thought it was for 1 letter only.
 public class Animal { public void Feed() { } } public class Dog : Animal { public void WhosAGoodBoy() { } } public class Cat : Animal { public void GiveCatnip() { } } public class Cage&lt;T&gt; where T : Animal, new() { public T Animal { get; set; } } public class Shop { public Cage&lt;T&gt; Buy&lt;T&gt;() where T : Animal, new() { return new Cage&lt;T&gt; { Animal = new T() }; } public Cage&lt;Dog&gt; BuyDog() { return new Cage&lt;Dog&gt; { Animal = new Dog() }; } public Cage&lt;Cat&gt; BuyCat() { return new Cage&lt;Cat&gt; { Animal = new Cat() }; } } public class Vet { public void Heal(Cage&lt;Cat&gt; cagedCat) { cagedCat.Animal.GiveCatnip(); } public void Heal&lt;T&gt;(Cage&lt;T&gt; cagedAnimal) where T : Animal, new() { cagedAnimal.Animal.Feed(); if (cagedAnimal.Animal is Dog) (cagedAnimal.Animal as Dog).WhosAGoodBoy(); } } public class World { public static void Main(string[] args) { var magicDogAndCatShop = new Shop(); var carlsVetStop = new Vet(); var myDogCage = magicDogAndCatShop.Buy&lt;Dog&gt;(); var myCatCage = magicDogAndCatShop.BuyCat(); carlsVetStop.Heal(myDogCage); // will call Heal&lt;T&gt; and infer the type from argument carlsVetStop.Heal(myCatCage); // will call Heal carlsVetStop.Heal&lt;Cat&gt;(myCatCage); // will call Heal&lt;T&gt; } }
Thanks, it's a perfect example of every topic that has been discussed in this thread. Whoa, I can't believe you actually took the time to write all that code. Just a silly question: was there a particular reason to require T to have a constructor in the declaration of Heal() ? Or is it just a habit?
I don't understand why this needs something *new*. Why can't existing lambdas just be extended to support this?
As do you. That's quite a niche domain.
Ohhh now I get it. Cool. What you did in Heal(Cage&lt;Cat&gt;) is exactly what I meant by &gt; if I had a cat-only method then it shouldn't accept ICage&lt;Animal&gt; ...and you showed another solution in the other method by checking if the supplied animal is a dog. Everything has been covered in your example, excellent contribution!
Extra points if everything is done in a single function XDD Incentivizing non-compartmentalization
Ugh, I really cannot wait for database support to get up to speed so that I can start some personal projects on a linux server. Yes I could continue learning node and go that route, but I'm only learning node out of curiosity - I want my .NET. Yes, I could just do them on Windows now, but fuck all that hosting/licensing expense!
Fair enough. I just felt that the poster above me was implying that limit as a general rule. I guess I'm just too sensitive to people pointing out I'm writing bad code. :D
Really, it seems to me that you're misusing rowheight. "rowHeight" should be the row height... the height of each row doesn't change each time through the loop. What changes is the position of the row on the screen, so rather than updating both "y" and "rowHeight", just update the one. Of course, your exit condition now needs to change... I'll leave it to you to figure out how you know when you can't fit the next row on the screen.
Thanks!
Nope. They're absolutely essential for encapsulating some core algorithm, which doesn't have much general applicability, and for preventing other class members from directly calling it. It can *really* help clean up a method body through sub-compartmentalization. As for nested types, they're also very valuable in several situations, including: emulating variant (discriminated union) types (this is how Nemerle implements a variant type that is compatible with the rest of the .NET ecosystem); modeling the closed set of a state machine's possible states; defining types that have a finite, pre-known set of necessary specializations, such as the monadic `Option&lt;T&gt;` type, which is usually implemented with a `None : Option&lt;T&gt;` subtype.
It took me a minute to figure out what you were even talking about, but now that I'm up to speed, that is pretty cool. I'm not sure it ever would have occurred to me that it could all be done in xaml. Thanks for sharing the code.
The difference is that nested class type signatures can be public, while having a protected constructor that allows the type to be instantiated only by the parent. It's invaluable for compartmentalizing state. As for one class per file: this is one of the few valid uses of partial classes. And how do you figure that nested types lead to (unreasonable) complexity? There are certain type relationships that are most susinctly expressed as a nested type hierarchy. Sure, it's certainty abusable, and abused features can make code complex, but that's a general truth about *every* feature. Doesn't mean that the feature should *never* be used. Also, sorry, I accidentally hit the send button before finishing my earlier comment. Give it a re-read.
Thanks, no problem. [Sorry I can't even ](http://30.media.tumblr.com/tumblr_lm36l4YG1A1qejlczo1_500.gif)
I've done something like this. You could create an object that targets text/whatever and then applies the effect separately. That way it would be more portable. But still, nice proof of concept.
No. They are not the same.
That really depends. You're probably looking at Computer Science degrees and they tend to be more science than programming. At my university a CS major graduated with a minor in math and physics. But that doesn't directly tie to programming. It helps with logic and problems solving but not any particular bit of programming. Personally, math really hasn't come in my career as a web developer. Brochure sites, eCommerce, CRMs, CMSs, etc. My undergraduate degree was in Computer Information Systems on focused on coding, networking, and general IT.
Physics. Calculus. 
You will need at least 4 semesters of calculus. Calculus 1 - intro / limits / derivatives Calculus 2 - simple integrals Calculus 3 - multiple integrals (3 dimensions) Calculus 4 - differential equations Also - Linear Algebra / Matrix Algebra.
Why don't you just look up in the manual what it means and how to turn it off? It's all written on MSDN.
While on the topic, I do use goto to break out of two nested loops explicitly naming the statement "goto outOfTwoLoops;". I think it's reasonable and improves code readability. I am open to discussion, if you guys disagree.
niiiiiiiiiiiice
Dependency objects were introduced by WPF and are used by all of the modern XAML-based frameworks which derive from WPF. They are objects which make use of *dependency properties*. A dependency property is like a normal C# property, except that its value doesn't come from a field on the class. Instead, the value of the property *depends* on external factors like animations and data bindings. They also provide support for things like change notifications, value coercion, etc. Related is the concept of *attached properties*. Attached properties work like dependency properties, but they can be "attached" to objects with types other than the type that defined the property. You can think of them sort of like "extension properties," analogous to C# extension methods. For example, if you want to place a button in the second column of a grid container, the XAML would look like this: &lt;Button Grid.Column="1"/&gt; The `Column` attached property is defined by `Grid` and then attached to `Button`. The `Button` class doesn't need to know anything about this property; it can be attached to any dependency object. None of this is built into C# itself, so it requires a lot of code to wire everything together - code which is provided by the `DependencyObject` class. 
Is this as big as I think?
I kinda disagree with calculus as the first choice for computer science.
Ok, agreed. But that's only for game dev.
&gt; I've been doing software development for almost 20 years. Honestly, who cares? Your experience is not the source from which all computer science/software engineering theory and practice flows, so you can not definitively make the claim that using nested types means someone is doing something wrong.
I'm totally on the cross platform bandwagon, but I hope as a result something replaces msbuild.
Yeah! Now you can refactor method bodies without polluting a type's top-level definition namespace with stuff that's relevant for a single method/algorithm! Seriously, this is great. Obviously there are going to be people who abuse it due to inexperience or lack of fucks to give, which is unavoidable. When that occurs, you educate them as to what they're doing wrong.
RIP mono?
I think this is a terrible idea. The reason people break own small segments of code into it's own method is so that code is re-usable *if* another parent needs to call it. By nesting it and making it inaccessible its going to cause code duplication. (Which is what you see all the time with javascript). 
Soon RIP mono
I don't think it will be RIP Mono, even though MS is open sourcing a lot of stuff, Mono does have a few neat features and differences that they have said in the past that they will continue working on. Mono may go from an alternative to just an expansion on top of the OS .NET Framework. Time will tell...
 var a = Console.ReadLine(); var b = int.Parse(a); if (b.ToString().ToList().Last() == 1) { Console.WriteLine("Your number is odd!"); } else if(b.ToString().ToList().Last() == 2) { Console.WriteLine("Your number is even!"); } else if (b.ToString().ToList().Last() == 3) { Console.WriteLine("Your number is odd!"); } else if (b.ToString().ToList().Last() == 4) { Console.WriteLine("Your number is even!"); } else if (b.ToString().ToList().Last() == 5) { Console.WriteLine("Your number is odd!"); } else if (b.ToString().ToList().Last() == 6) { Console.WriteLine("Your number is even!"); } else if (b.ToString().ToList().Last() == 7) { Console.WriteLine("Your number is odd!"); } else if (b.ToString().ToList().Last() == 8) { Console.WriteLine("Your number is even!"); } else if (b.ToString().ToList().Last() == 9) { Console.WriteLine("Your number is odd!"); } else if (b.ToString().ToList().Last() == 0) { Console.WriteLine("Your number is even!"); }
/r/badcode
I have this problem with 2013 sometimes. You can cache them somehow so it doesn't happen as often.
 void Main() { var a = Console.ReadLine(); Console.WriteLine(IsEven(int.Parse(a)) ? "Even" : "Odd"); } bool IsEven(int a) { var r = (new Random()).Next(101); if (r == a) { return r % 2 == 0; } return IsEven(a); }
No. You're doing it wrong. That's not how this works. That's now how any of this works. 
This is the kind of reply that I needed. I'm still very new to c# so I need to learn these cleaner ways of coding. Thank you!
50% of the time, it works every time. 
I'd write a python script to write that C# code for me.
Nant already exists.
In my first year of college a classmate asked me for help for his blackjack program. It was similar to this. He had if statements for every card combination. He made a card limit of 4 or 5 because he wrote if statements for hours.
this stackoverflow post has helped me in the past http://stackoverflow.com/questions/12567984/visual-studio-debugging-loading-very-slow
/r/shittycode
This thread... this whole thread just hurts. 
Well it won't work. Did you even test it?
No, it was quick and dirty because I'm currently studying but needed a short break.
I'd love to see that. I you still have it, take a picture for us!
What was stopping you before? MSbuild doesn't do anything otger build tools don't. 
Less code, but needlessly inefficient. private bool IsEven(int num) { while(num &gt; 0){ num -= 2; } if(num == 0) return true; else return false; }
How about a bunch of these? if (new Regex("^0$").IsMatch(b.ToString().ToList().Last().ToString())) { Console.WriteLine("Your number is odd!"); } 
I don't believe that's what this is doing. It's generating random numbers from 1-100, until it matches what they typed in, then mod'ing that to determine if it's even. If it doesn't match, it recurses again. So not a 50% of the time thing. 100% of the time this works, it might just take a very long time (in cycles) to achieve the result.
 enum Evens { Zero = 0, Two = 2, Four = 4, ... } static void Main(string[] args) { var r = Int32.Parse(Console.ReadLine()); try { var e = (Evens)r; Console.WriteLine("Your number is even!"); } catch (Exception e) { Console.WriteLine("Your number is odd!"); } }
Because I can't help myself if((value &amp; 1) == 0) { Console.WriteLine("Number is even"); } else { Console.WriteLine("Number is odd"); } Kids these days.
Well I've given it some thought and here is my blog spam on the subject. http://clayrsmith.com/the-case-against-entity-framework-and-why-i-chose-petapoco/
This reminds me of a web development class I took at university before CSS3 became a thing: &gt; This code iterates over a collection of objects and prints each object to a row in a table. Modify the code so that the rows are "zebra striped", I.E. odd and even lines have different colours. Several people in my class were *furious* because we "hadn't learned the function for zebra stripes!"
Bogo Modulo?
I have an alternative solution! var a = Console.ReadLine(); var b = int.Parse(a); var c = b / 2.0; if(c.ToString().Contains(".")) { Console.WriteLine("ODD"); } else { Console.WriteLine("EVEN"); }
That's too terse for this exercise.
Other build tools are.
&gt; I'm just wondering if there are any disadvantages to using the second method memory allocation/efficiency wise. I think the main issue is that `ToList` goes through all iterations before returning. If the thing generating the iterations is expensive (in terms of CPU/IO/memory usage) then you get hit by that expense all at once. Consider iterating through a directory with 6000, 100GB log files, you're second approach is going to have to do ALL disk reads plus reading ALL those files into memory at once. That's not to say it's a bad approach to be avoided, you just need to be aware of the what's going on under the hood. For example in the case I mentioned - a directory with 6000, 100GB log files, it might be better to use [Directory.EnumerateFiles()](https://msdn.microsoft.com/en-us/library/dd383458.aspx) and then using [File.ReadLines()](https://msdn.microsoft.com/en-us/library/dd383503%28v=vs.110%29.aspx) because they both use `IEnumerable&lt;T&gt;` (presumable both using yield) to provide a single item at a time. Of course you then hold onto IO resources during your processing so it's not without drawbacks. 
Ok, thanks. Ill try to find where I can switch it off. I thought that dialog was for local files. edit: It seems to be off by default.
Thanks! Thinking about it a little bit more, it seems I could also use DirInfo.GetFiles(*error*) instead of .GetFiles().Select(x=&gt;x.Contains(error)). Not sure if that or Directory.EnumerateFiles() would be more efficient. Probably doesn't really matter that much, I didn't really learn any of this stuff in school because of the lack formal coding classes I took in college so I want definitely want to learn as much as I can what happens behind these types of methods and how to code in the most memory efficient manner. 
https://dotnetfiddle.net/eczsfF using System; namespace Oddoreven { public class Arithmetic { public static void Main(string[] args) { Console.Write("Enter a whole number..."); var userInput = Console.ReadLine(); int userNumber; var success = int.TryParse(userInput, out userNumber); if (!success) throw new InvalidOperationException("Invalid user input, please enter a correct number!"); else { if (IsOdd(userNumber)) Console.WriteLine("Your number is odd!"); else Console.WriteLine("Your number is even!"); } } public static bool IsOdd(int value) { return value % 2 != 0; } } }
Except that this won't throw, and will always print 'even'.... You can cast a number to an enum, even if that number isn't a member of that enum. Think of things like flag enums...
&gt; Try searching how it works Type into google: "c# &lt;thing you want to find&gt;" Some things you should know: - How to write to the console - How to read text from the console - How to call functions - What are functions - How to add strings together (concatenate is the fancy term) - What are strings - What are variables - How to use variables Pick up a beginner tutorial or book. The C# Yellow Book is free and seems alright.
 int[] genTable(int n) { int[] t = new int[n + 1]; t[n] = n; if (n &gt; 0) { for (int i = 0; i &lt; genTable(n - 1).length; ++i) { t[i] = genTable(n - 1)[i]; } } return t; } boolean isEven(int n) { int[] t = genTable(n); int i = 0; while (i &lt; t.length) { i += 2; try { int x = t[i]; } catch(Exception e) { return false; } } return true; } Linear memory complexity. O(n!) time complexity. Uses exceptions as a tool for the algorithm. Doesn't work when n=0. That's the best I got. EDIT: Damn thought this was in the ProgrammingHumor sub so I wrote this in Java. Ah well should be easy enough to read.
Needs more Factories and AbstractFactories
Thanks. Then I must say, the version that uses ForEach() is significantly slower because the plain "for" loop doesn't have to create an activation record on each iteration. I remember the early 90's when I was coding graphics in C on MSDOS. Calling a function to draw a pixel in a loop took bloody ages to fill the whole screen, but a function that would take an array of pixels as argument and draw them all at once was literally a few hundred times faster. Activation records on the stack are evil if your function is supposed to run quickly and return.
It's tough in an exam though 
If you could typecast a 1 or 0 to a boolean you could easily just grab the least significant digit (^ 1 if I recall correctly) and just see if that is true or false. I know you can easily do this in C++ but it just failed in C# for me...
Something to note: C# 3.0 compiles into IL that is fully compatible with 2.0. So you can compile it with the 3.0 compiler and run it on the 2.0 runtime.
 int x = 123; bool even = (x &amp; 1) == 0;
Almost ready for the entreprise, just needs a couple SingletonFactories.
Right, it was &amp; instead of ^, was on mobile. Still a bit silly that you can't just go (bool)(x &amp; 1).
Meant the edit comment as a joke rather than fixing it. But yeah, that would definitely fix it. Int32.MinValue would also look better as well. :D
Expects Int32 - Crash :P Fixed, and tried it with a count (Outputted every 10,000 loops) - Forgot to declare the count value as long, and ended off with positive -&gt; negative -&gt; positive -&gt; negative -&gt; etc outputs ;p
And what makes you think there's a memory leak somewhere?
From https://github.com/the-dargon-project/ItzWarty.Commons/blob/master/Extensions.Collections.cs#L10 public static void ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; enumerable, Action&lt;T&gt; action) { foreach (var element in enumerable) { action(element); } }
it returns a byte array of 8 bytes: &gt; {byte[0x00000008]} &gt; [0]: 0x53 &gt; [1]: 0x3d &gt; [2]: 0xf0 &gt; [3]: 0x01 &gt; [4]: 0x67 &gt; [5]: 0x73 &gt; [6]: 0x9e &gt; [7]: 0xd0 but that isn't valid ASCII ranges, and it certainly isn't ASCII for "SYSADM". Valid decrypted bytes should be 0x53, 0x59, 0x53, 0x41, 0x44, 0x4D, 0x00, 0x00 Curiously it seems that the first byte gets decrypted properly, but subsequents ones are FUBAR.
Yes, this is incorrect. The garbage collector does not run all the time. And even if it runs, it's not always releasing the memory. There are a lot of factors playing into this. But thinking "increasing memory == Memory leak" is just wrong in .NET.
Well, it really doesn't answer your question.... But, unless you have a specific need for using Triple DES, you should probably use AES. Here is the class I use for Encrypt/Decrypt of AES. Hope that helps. public class AESCrypto { /// &lt;summary&gt; /// Encrypt the given string using AES. The string can be decrypted using /// DecryptStringAES(). The sharedSecret parameters must match. /// &lt;/summary&gt; /// &lt;param name="plainText"&gt;The text to encrypt.&lt;/param&gt; /// &lt;param name="sharedSecret"&gt;A password used to generate a key for encryption.&lt;/param&gt; /// public static string EncryptStringAES(string plainText, string sharedSecret, string salt) { byte[] _salt = Encoding.ASCII.GetBytes(salt); if (string.IsNullOrEmpty(plainText)) throw new ArgumentNullException("plainText"); if (string.IsNullOrEmpty(sharedSecret)) throw new ArgumentNullException("sharedSecret"); string outStr = null; // Encrypted string to return RijndaelManaged aesAlg = null; // RijndaelManaged object used to encrypt the data. try { // generate the key from the shared secret and the salt Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt); // Create a RijndaelManaged object aesAlg = new RijndaelManaged(); aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8); // Create a decryptor to perform the stream transform. ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV); // Create the streams used for encryption. using (MemoryStream msEncrypt = new MemoryStream()) { // prepend the IV msEncrypt.Write(BitConverter.GetBytes(aesAlg.IV.Length), 0, sizeof(int)); msEncrypt.Write(aesAlg.IV, 0, aesAlg.IV.Length); using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) { using (StreamWriter swEncrypt = new StreamWriter(csEncrypt)) { //Write all data to the stream. swEncrypt.Write(plainText); } } outStr = Convert.ToBase64String(msEncrypt.ToArray()); } } finally { // Clear the RijndaelManaged object. if (aesAlg != null) aesAlg.Clear(); } // Return the encrypted bytes from the memory stream. return outStr; } /// &lt;summary&gt; /// Decrypt the given string. Assumes the string was encrypted using /// EncryptStringAES(), using an identical sharedSecret. /// &lt;/summary&gt; /// &lt;param name="cipherText"&gt;The text to decrypt.&lt;/param&gt; /// &lt;param name="sharedSecret"&gt;A password used to generate a key for decryption.&lt;/param&gt; public static string DecryptStringAES(string cipherText, string sharedSecret, string salt) { byte[] _salt = Encoding.ASCII.GetBytes(salt); if (string.IsNullOrEmpty(cipherText)) throw new ArgumentNullException("cipherText"); if (string.IsNullOrEmpty(sharedSecret)) throw new ArgumentNullException("sharedSecret"); // Declare the RijndaelManaged object // used to decrypt the data. RijndaelManaged aesAlg = null; // Declare the string used to hold // the decrypted text. string plaintext = null; try { // generate the key from the shared secret and the salt Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret, _salt); // Create the streams used for decryption. byte[] bytes = Convert.FromBase64String(cipherText); using (MemoryStream msDecrypt = new MemoryStream(bytes)) { // Create a RijndaelManaged object // with the specified key and IV. aesAlg = new RijndaelManaged(); aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8); // Get the initialization vector from the encrypted stream aesAlg.IV = ReadByteArray(msDecrypt); // Create a decrytor to perform the stream transform. ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV); using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)) { using (StreamReader srDecrypt = new StreamReader(csDecrypt)) // Read the decrypted bytes from the decrypting stream // and place them in a string. plaintext = srDecrypt.ReadToEnd(); } } } finally { // Clear the RijndaelManaged object. if (aesAlg != null) aesAlg.Clear(); } return plaintext; } private static byte[] ReadByteArray(Stream s) { byte[] rawLength = new byte[sizeof(int)]; if (s.Read(rawLength, 0, rawLength.Length) != rawLength.Length) { throw new SystemException("Stream did not contain properly formatted byte array"); } byte[] buffer = new byte[BitConverter.ToInt32(rawLength, 0)]; if (s.Read(buffer, 0, buffer.Length) != buffer.Length) { throw new SystemException("Did not read byte array properly"); } return buffer; } }
Thanks, but sadly the data I'm decrypting is encrypted with TripleDES and that's not within my control.
No looping: var a = Console.ReadLine(); var b = int.Parse(a); Console.WriteLine( ( b &amp; 1 ) == 1 ? "Your number is odd!" : "Your number is even!" );
I think this good old stackoverflow thread is the best one of these "hidden feature" lists -&gt; http://stackoverflow.com/questions/9033/hidden-features-of-c 
Well first, GC does not run all the time. A growing memory set does not signify a memory leak. The issue is your loop is infinite, and runs every second. You're grabbing more memory on each iteration, and taking no action to dispose of some of it. The very first thing your checkCallStatus method does, is create a Bitmap. Bitmap's are disposable types. Throw a using () around that bitmap, yo. You're cleaning up the SoundPlayer object, but leaving the Bitmap to the whims of the GC. I didn't read the code past this point, so I would add that you should review if you are using other disposable types. https://msdn.microsoft.com/en-us/library/system.idisposable(v=vs.110).aspx Also, look into using a Timer rather than infinite looping + Thread.Sleep. https://msdn.microsoft.com/en-us/library/system.timers.timer(v=vs.110).aspx
Great suggestion and thank you for bringing that to my attention I can't believe I missed that Bitmap and a using statement.
It's n^2 memory complexity. `genTable` requires (n + 1) + (n) + (n - 1) + ... 1 = (n + 2)(n + 1)/2 array ints due to its recursive nature, even if only at the bottom of its recursion. And converting this to C# should only take changing `boolean` to `bool`.
I mean this is great info, thanks. But how would one use them?
I'm afraid I don't see what you're referring to, could you clarify? Thank you!
You use them in contexts where you require the additional functionality provided by dependency properties, which usually means you use them whenever you need to be able to bind object properties via XAML, animate them via XAML storyboards, or apply values based on visual styles - all WPF interface elements are dependency objects for this reason. I encourage you to take a look at [this article](http://wpftutorial.net/DependencyProperties.html) for more information on the subject.
 var imageBitmap = new Bitmap(CaptureWindow(targetWindow.HWnd)); `CaptureWindow` returns a `Bitmap`, which you then pass to another `Bitmap` that will copy its contents.
I'm already using this subconsciously, but now I will keep it in mind. Very sound principle! Easier to maintain, more predictable code. 
At work we use AsEnumerable and we have .Each as extension method defined for IEnumerable. Notice that it's .Each because List has the ForEach for legacy reasons. Always use the "As" conversions, as it doesnt have overhead. edit: Just remembered reading this last week: http://stackoverflow.com/questions/101265/why-there-is-no-foreach-extension-method-on-ienumerable/216668#216668 Very cool stuff! Havent decided if I want to add it to the codebase yet.
It has the nth-child selector that allows you to do zebra stripes and similar things without resorting to scary math. 
Well I'll be. Thank you for spotting that! Regards, 
You didn't write any tests for these methods either...
Yes! That's fantastic.
&gt; How can I make is so when I check the string: "blue monkeys are not red" for a letter like 'b' it doesn't return true but it only returns true when I put in the word "blue" var thisString = "blue monkeys are not red" if(thisString.Contains("blue")) { Console.WriteLine(@"String contains 'blue'"); } else { Console.WriteLine(@"String does not contain 'blue'"); } Console.ReadLine();
The point wasn't to search for "blue", but to avoid sub-words from producing false positives; they want to search for full words only. For example, in the example text "blue monkeys are not red", "monkeys" would pass, but "key" would not.
oh, I understand now, disregard my answer I did not understand your question correctly.
This right here, this, this is the shit right here. OP This guy got your answer!
That's gonna be very handy.
Good point. I think. 
You could use a List&lt;string&gt; then put the first one in, then the second one compare it to the first one if it higher add it after the first. If its lower insert before the first. Repeat for the rest, start at the first element in the List and compare it to each element till you find one higher than the one your testing.
I would never have thought about that.
we use it. works well. we have it running as part of our message pipeline on our WebApi app
If you can use a List&lt;string&gt; just call list.Sort(); then loop through!
Sure, but he stated he had to use CompareTo. I think the whole exercise is about manually implementing sorting.
All of them.
Good point!
I've always just used the immediate window for this, but it definitely is going to be useful 
The C# yellow book is a really nicely written book on C#. It's done in a fashion that makes logical sense and at the same time is light hearted. I personally believe it's a bridge between Nutshell and Head First C# series.
That's awesome. I wish i had this the few times i had to do it by hand!
You should look into sorting algorithms, as there are many ways to skin this cat. I'm not going to write the code for you but here's what I'd do: (1)Compare the first two words, then (2)compare "the winner" to the third word. "The winner" of the second comparison, labeled with a 2 above, is now "the overall winner" (either highest or lowest depending on what you choose). (3)Lastly, compare the two "losers". You now have your order. Think of it in terms of algebra, if a&gt;b and b&gt;c then a&gt;b&gt;c. Note, this equation is different than the procedure above. I believe this is the world's worst implementation of a bubble sort, someone correct me if I'm wrong. If my explanation is confusing, I can re-write it for you. Good luck. 
As strange as it sounds, I discovered the immediate window while talking to someone at a tech meetup. I was like "JavaScript is the best, you can totally just run stuff in context that you want by poping open the console. You cant do that in Visual Studio." and 10 seconds later i just pulled, unintentionally, cunninghams law and someone told me about it. I've since changed opinions, though I think JavaScript is the bees knees because it takes less time to restart a page. (instead of redeploying the code) 
We use it. I like it, the ability to nest validations is very handy
can I marry you? I fucking love you, thank you so much! :) 
What are the key reasons the oss community around ms tech is not as thriving as around nix based technology? 
I don't really know of a service that reviews code for you. But when I got my job I did quickly realize that what I did was pretty much shit, but you get to look at real production code and just emulate it. It doesn't take long to "ascend" (for lack of s better word) to writing good code. 
Ctrl alt i
Yup, while I was reading the article I was thinking about the immediate window. Hell, when I found out about THAT, I was in awe.
The thing is JavaScript updating a page without a reload is because it's the only language that runs client side. Using that as the only comparison to c# is apples to oranges. A better comparison would be server side node js code vs server side c#. I love node and think it's amazing but I have to say visual studio's debugger and tooling is far superior to anything available in node. Development is much faster as a result imo. 
The Java ecosystem has a number of large, well supported OSS projects. (ElasticSearch, Hadoop, Akka, Lucene etc.) What has the Java ecosystem done so successfully that C# has not? What will it take to improve the comparatively weak state of .NET OSS?
I'll look through it if you want!
http://weworkremotely.com http://wfh.io
I saw this site while browsing pluralsight, https://hackhands.com/. I have never used them, so I don't know if it is worth it.
node-inspector is a nearly identical debugger to the in browser chrome dev tools. It allows you to set break points and inspect variables. Node is great for writting simple, small applications with under two dozen restful endpoints after that it really doesn't scale well; however, it does encourage the linux ethos of writing small sharp applications that do one thing and do it well. Group a bunch of small node applications together and you've got yourself a great overall application. 
I would never develop javascript in VS. I'd use something more light weight like sublime text or nodepad++. The browser itself has really great debugging tools which renders VS useless beyond serving application code. 
http://codereview.stackexchange.com/ this is the place. 
It's for first year undergrads, if you are already expert level there is little point reading it unless you want to brush up on your basics.
It's strange seeing my lecturers materials on here!
It teaches the basics in a wrong way however, Rob was a Java lecturer over a decade ago and it still shows.
&gt; Thanks alot ,it works 
Hey next time you see him let him know that r/csharp is going nuts about his book! :D
The book, I don't think it's got any features later than C# 2.0 and teaches people bad things like get/set methods, pokemon exception handling (got to catch them all), no use of 'var', probably still using '/n' rather than Envonment.NewLine too
Full-time or part-time? For part-time check https://www.upwork.com/ http://www.getacoder.com/ Also your local Craigslist. 
Could you recommend a more modern book on C# and .NET?
fucking finally
I find the "C#" tag much more active. This has been my go-to for finding remote work (yet to get any).
I'd probably have to, but I hope someone else already did that before. :-)
What ide are you using?
WPF or legacy Winforms? 
Both look too modern.
It's not difficult to do. That'd be the most sane route. I'd probably be interested in having a crack at this for novelty purposes.
I'm considering to write a 64-bit version of `fileman.exe` for pure entertainment reasons. A decent GUI would be adequate.
What specifically are you looking for?
5 Years experience with .NET/C#, have touched many other technologies. Looking to get out of enterprise work and into something a bit bigger than a startup (job security is good).
I love nose inspector and obtuse it all the time. I have my node toolkit set up with gulp running my tests and browser sync. However it's a bit daunting for new folks whereas visual studio comes as an all in one solution. As mentioned I use both node and c# web applications regularly to build larger sites. What I've found is that c# was easier to scale in larger team due to visual studio having everything integrated. Don't take this as a knock on node, it's amazing but the toolset will always lag behind statically typed languages due to the fact that it's harder to build great tooling for dynamic languages. Hell that'd the reason the angular team picked typescript for angular 2. Edit: also node inspector is identical to the chrome dev tools because it is the chrome dev tools. Node inspector is neat but ultimately it's just funneling server side data to chrome.
Thanks. But I'll only start this project when I know how to recreate the original GUI. FileMan with a "modern" GUI is pointless as it's basically identical to every second file manager out there then ... :-)
Use WinForms, with VisualStyles disabled and FlatStyle set to `FlatStyle.Flat`. 
AFAIR that won't make buttons look like on Win3.1, with all that rounded and bold appeal.
I don't see anything wrong with this code. Users probably won't enter numbers that ridiculously high or low. You guys need to learn how to stop worrying about all the little details and be efficient and get stuf done. /s
Are you looking in C:\Windows\Microsoft.NET\Framework\v4.0.30319? Did VS actually install - can you run it? Create a project and build it?
Nobody cares about your c++ identity crisis.
&gt; Now, I know that behind a List&lt;T&gt; object there is an array, so I question myself if the compiler is smart enough to realize that, when calling the ToArray() method to return the output there is no need to actually create a copy of the object, but that it could just return the original array as it is No, because then people could modify the values in this array, which would modify the values of the list itself. It doesn't matter in this case, but it could in others.
Definitely a matter of opinion. Edit: I guess the down votes mean it's a fact JSON is too complicated.
They why the rage quite part way through the article? It makes you sound like a JSON fanboy.
I agree, you're going to have to make your own. I'd start with buttons: Easiest route would be to extend the existing `Button` class and set it for ownerdrawn, then override the OnPaint method to do your own painting. You'll probably also need to hook into the mouse events to find out when the button is being clicked (mouse down) or isn't being clicked (mouse up), so that you can change how the button is drawn while Use GDI to paint the text, and set the rendering hints or quality to the simpliest settings. The button text was MS Sans Serif, looks like 12 point bold. Draw the background first, then the border, then the text. Done.
Where is "*" being assigned in the code you posted? There is also a never ending loop in there if the input is 1. 
maybe i was unclear. The whole point of the exercise is to create rows&amp;columns of *'s based on a number the user inputs ie. user input is 5, output is a 5x5 of *'s. furthermore every 3rd line becomes ='s instead of *'s. i am unsure how to display the output. edit : 3rd line 
nothing happens. i must stop the form
Is the event handler assigned to the button that is clicked? I'm assuming this is some sort of forms app.
Insert some breakpoints to see what your code is doing.
winform yes. yup i only have one button.
Try and hit /log and see if that kicks it off for you. Additionally, you could turn migrations on and run them (but I personally don't like migrations).
What's the event handler on the button do? Something like [this](https://msdn.microsoft.com/en-us/library/Bb383971%28v=VS.90%29.aspx)?
the whole code in the original post is in the click event
These are the requirements I'm seeing... * User inputs number * number = rows and columns * output pattern of "*" &amp; "=" * Every 4th line is "=", else "*" This is my rough code that does what it looks like you want. Outputting to a label here. Hope that helps you a bit. int input = 5; //User input example //For loop to create each Row for(int y = 0;y &lt;= input;++y) { //Each row: Build String of * or = symbols for(int x = 0;x &lt;= input;++x) //Width - innerloop { //If divisible by 4 and not 0 if(y%4 == 0 &amp;&amp; y &gt; 0) { label1.Text += " = "; } else { label1.Text += " * "; } } //Next row label1.Text += "\n"; }
yes this is what i want. i recognise everything in this code i just need to process it! i was especially looking for a way to go to the next line!
wouldn't you want to += the text field and add new lines for every row? All I'm seeing this doing is assigning the same text property "*" redundantly. 
yup i got stuck on that. but another answer helped me. here is the finished work. private void button_drawStars_Click(object sender, EventArgs e) { //declare variable int numRowsAndStars = 0; numRowsAndStars = int.Parse(textBox_numRows.Text); //For loop to create each Row for (int y = 1; y &lt;= numRowsAndStars; ++y) { //Each row: Build String of * or = symbols for (int x = 1; x &lt;= numRowsAndStars; ++x) //Width - innerloop { //If divisible by 3 and is not 0 if (y % 3 == 0 &amp;&amp; y &gt; 0 ) { label_showRows.Text += " = "; } else { label_showRows.Text += " * "; } } //Next row label_showRows.Text += "\n"; } } also can someone clarify the difference between ++y and y++?
I dont think this is an issue with the ToArray() method, but rather a fundamental misunderstanding of the IEnumerable interface by the author. The interface just means that the object can be enumerated, but makes no guarantees of performance or how the enumerated objects are obtained. If the backing data store is in memory, performance should be good. On the other hand, trying to enumerate a collection where each object requires some significant overhead, then performance will be bad. The bottom line is that ToArray() isnt necessarily a bad method, but as a developer you need to understand what is going on with your code. Dont enumerate the results of a query that can potentially return 16 million database records. 
While true, I don't think that's the make or break issue. The fundamental reason is that the backing of List is an array that's (almost always) larger than the number of items in the List. As you add things to a List, it fills up its backing array. When you try to add something and the array is full, it allocates a new, larger array and copies the contents of the old into the new. If it grew the array by exactly 1 each time, inserting would become crazy inefficient. So it grows the array in big chunks. The end result is that you usually have a List with a Count of X and a backing array with a Length of Y [and all the entries in the array past index X-1 are all default( T )]. But the contract of ToArray is that it returns an array containing exactly the items in the List and no more, so it has no choice but to copy in the common case. And, no, it shouldn't try to "optimize" by returning the array when Count == Length. That's a terrible idea that would lead to crazy weird and hard-to-find bugs. What are you even thinking? :p
Well, in this case the list is a temporary variabile which is anyway going to be destroyed at the end of the method, so it would be safe to skip copying into a new array in this case (right?) [EDIT] I did not expect at all this behavior from the compiler, though. What I wanted to test was if the developer who wrote the code I had to optimize was using some kind of "tricks" I was unaware of. Luckily, the MSDN documentation is consistent :-)
Do you ever run into problems putting calls to SaveChanges in your repository methods instead of using something like the unit of work pattern? Do you just wrap everything in a TransactionScope when you need to perform multiple database operations in the same logical transaction?
Thanks gruenwolf - we've uncovered quite a few bugs in this first alpha, so probably going to hold off on publicizing it any more before the second or third alpha. I'll get in touch when we're ready if that's OK.
I wonder if you could watch the file system object ID of the directory: https://msdn.microsoft.com/en-us/library/windows/desktop/aa364557(v=vs.85).aspx
The source is in the ZIP.
I guess you could loop and check for differences using directory get info. Seems like a terrible way to do it though.
My mistake, I'm sorry. You can not detect in a reliable way whether a directory was renamed or not. It is best to modify your algorithm that this is not required. A rename is basically the removal of a directory and the creation of a new directory - and that's how you should deal with this.
&gt; No one is gonna download a zip file with potentially malicious software. Share your code directly, not inside a zip archive. Use Github or BitBucket.
That's actually very close to the behaviour this proposal describes. My understanding is that T ("non-nullable", but actually nullable) will produce compiler warnings when the compiler sees that you are assigning null or default(T) to an instance of T, or it is pretty sure your code dereferences a T instance that is null. It will do this with flow analysis similar to the way `int a;` is checked for assignment before it is read from, but with a few more complicated cases. T? (nullable) will be treated just like T is now (C#6 and older), possibly with some new compiler warnings in cases where it is sure that your code will dereference a null instance of T. So, compiling old code with C#7 just means you might get compiler warnings where you didn't before, and you can opt-out of the warnings if you'd like.
Ah. But here's the problem. Say I'm using an old library where everything returns T regardless of nullability. Now, the paradigm shift is into assuming that T means nonnull T, but I use a function which (validly, when it was written) returns null. Say it's in a rarely tested case of my program. In a perfect world, the documentation outlines this and I read the documentation so I know to null-check, or I remember that it's old code and null-check anyway. In the real world, there's no longer an imperative on me to do null-checking because "T means nonnull T", and suddenly my program crashes because I'm dereferencing a null pointer. Swift got around this very interestingly, in a way that C# unfortunately can't because it's limited to new languages: the introduction of the "implicitly unwrapped optional" (! instead of ?). Old, objective-C libraries with return values of unknown nullability would get marked as, say, NSString!, instead of the explicitly nullable NSString?, or the explicitly nonnull NSString. In general, consistency in the use of bang in swift has conditioned programmers to raise a warning flag saying "this will cause a runtime exception if I'm not careful with it" in their minds when they see a bang. So, an implicitly unwrapped optional is basically *assumed* to be a nonnull value, but you can still check it for nullability. It permeated the iOS SDK at first, but through XCode releases, the old objective-C libraries have been rewritten to include their own nullability annotations and it's rare to find an implicitly unwrapped optional (NSString!) in practical use. It was an excellent helper for transitioning and still allows full and "safe" (as safe as something with the possibility of a runtime exception can be) interoperability with libraries that haven't been updated recently.
Of course. Just let me know when you are ready.
Get you hands on a copy of win 3.11 and install it on a VM. Extract all the .ICO files (you might be able to get the ICO files from the media too). Now you are just left with skinning and font selection which will need to be hand built unless someone out there has some WPF controls that are OSS.
You'd probably be better off at stack overflow with this kind of question.
Something in the vein of the classic ToDo list works. Objects to be stored in a DB or even in just a JSON file could work. Doesn't have to be a major undertaking, but just enough to show you know what you're doing. 
Does your NotifyFilter include the NotifyFilters.DirectoryName flag?
The code example can be improved. private static string BuildString(string input, int count) { if (input == null) { throw new ArgumentNullException("input"); } if (count &lt; 0) { throw new ArgumentOutOfRangeException(); } if (count = 0) { return ""; } // if input was char, could use: return "".PadRight(input, count); var result = new char[input.Length * count]; for (var i = 0; i &lt; count; i++) { for (var j = 0; j &lt; input.Length; j++) { result[i+j] = input[j]; } } return new string(result); } protected static string BuildString(int count) { if (count &lt; 0) { throw new ArgumentOutOfRangeException(); } if (count = 0) { return ""; } const int n = 3; // edit var eq = BuildString(" = ", count); // every "n" line var star = BuildString(" * ", count); // every non-"n" line return string.Join(Environment.NewLine, Enumerable.Range(0, count) .Select(i =&gt; i % n == 0 &amp;&amp; i &gt; 0 ? eq : star)); } And finally: label1.Text = BuildString(input); [.NET strings as interned.](https://en.wikipedia.org/wiki/String_interning) Hence, you should avoid [string concatenation](http://www.dotnetperls.com/string-concat) as the runtime cannot optimize the code (calculate the fixed length of the resulting string) if there's an undefined amount of concatenations, which in your example would result in a 'memory leak' (e.g. " * ", and " * * " and " * * * " and ... would be stored in memory).
I like that idea, and have always wondered if abstracting logging into an infrastructure is overkill. You're right though, it would be great to assert that certain errors are logged in unit tests. I'll add this to my backlog and get it incorporated :D
Just use a HyperLink instead of a button to download. The StaticFileHandler will do the rest.
Sorry to get back to you so late. The reason why TransactionScope is not a unit of work depends on the implementation of the unit of work. E.g. for entity framework, no insert/update queries are executed until SaveChanges is called and the insert/update statements are batched. E.g. instead of seeing insert into ... and update ... (2 seperate statements), you would see: insert ... update ... in 1 statement, where in the previous version (standard repository type access) you would have 'n' statements executed (+ n round-trip latency), in the latter you only have 1 statement executed (and only 1 round-trip latency).
That entirely depends on what and how you are distributing, for a personal fun project shared personally among friends (not published) its not a huge deal. If you plan to distribute then you are better off getting some of the open icon sets out there, most of them are for *nix systems but the older ones look very much like the Win 3.11 system.
Wait. I'm using null return value to indicate state. Is that all wrong?
Yes
Then the only other reason i can think of that it wouldn't trigger the event is that you're setting the filter to a specific type of file. If you need to track directories and filter specific file types, you have leave the filter property blank and do the filtering inside of the events themselves.
With the renaming of a directory I get a event FileSystemEventHandler(onChanged) event. Also, when I put a messageBox into the onChanged event I see it keeps firing every split second for different directories for about 30 seconds or so. I tried increasing the internalbuffersize but that didn't help. I also notice the onChanged event fires once when I rename a directory but not when I rename the directory it more than once. I'm setting the filter to the wildcard characters.
This has the command-line args you can pass to devenv.exe when starting it up: https://msdn.microsoft.com/en-us/library/xee0c8y7.aspx Looks like the one you want is: **/InstallVSTemplates** &gt; Registers project or item templates that are located in &lt;VisualStudioInstallDir&gt;\Common7\IDE\ProjectTemplates or &lt;VisualStudioInstallDir&gt;\Common7\IDE\ItemTemplates so that they can be accessed through the New Project and Add New Item dialog boxes. 
This looks wonderful. What would be extremely useful for me is a Yeoman template for a WPF application with this style, and maybe a couple of default layouts to choose from.
You should add code completion, NuGet support and code highlighting. Basically all that www.dotnetfiddle.net offers. ;)
Yeah, 2015 to build the source, but 2012+ to use the binary.
They're both good approaches that are important to learn, but yeah, that's a great option too.
No. "Console.WriteLine" is never a good debugging approach. And it is especially not a good technique to profile your application.
The same point you mentioned is iterated in the stackoverflow post or some related one. I think it's just better to differentiate between the built in and this one. To be honest with you I just found this practice when I came to work where I do now, I have no idea why they chose to use Each. Probably was a reason.
Can you give any examples of what he teaches wrong? 
Different strokes for different folks. Profilers aren't always available or as time efficient. If you have, say, 5 lines of initialization code, then throwing a "!" into the middle, running alt + d + h =&gt; control + c can be a lot faster than waiting for an entire debugging/profiling session to startup. In the same vein, if you're initializing graphics and audio as different subsystems in a game, then seeing "initializing graphics" take forever, followed by "initializing sound" can go a long way. Edit: If you're optimizing a loop that's called 10+ times per second, then sure, grab a profiler. But if your code is being called once, then usually throwing one or two console writelines can tell you all you need to know. Usually when we talk about long delays in application startup, we're talking about something that's human-noticeable (more than, say, 500ms long) and run once.
There might be a property you have to set to enable recursive watching - it's been a while since I've touched FileSystemWatcher. Also, according to msdn: &gt; The Changed event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed. To watch for renaming, use the Renamed event. Source: https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher(v=vs.110).aspx
How do I update in the existing project from previous version?
Using nuget? update-package MaterialDesignThemes Or through the NuGet GUI just search for updates, version 1 should show up.
I enjoy watching JSON become the new XML as all the problems XML grappled with haven't gone away.
Seems to work for me. http://i.imgur.com/d0Oobbi.gifv Am I not understanding what you're asking?
Have you installed the web tools ? I had the same problem and i had to modify my installation in order to [add the web tools](http://imgur.com/huXiLI9).
Thanks. Of course I'll share it on reddit when I have something. (I'm confident it will not be too much work, FileMan never had an overwhelming amount of features.) Still working on the UI details though.
Your explanation sounded a bit like the second thread just won't do anything. I wanted to clarify that the thread will wait (and thus be blocked) for the lock to be released. Poor locking can render multi-threading completely useless. It can even cost performance.
Indeed, I'd rather OP understand it more fully. Thank you for your clarification!
When was the new() condition added to the language? What's the feature called?
Interesting, thanks. I was aware of type constraints, but not the constructor thing.
To be a bit of a jerk about it, since others have answered: This code does the same thing that Entity Framework does, but in a less efficient and less safe manner. Take a look at Entity Framework to see how it works, and check out [this NuGet package](https://www.nuget.org/packages/System.Data.SQLite.EF6) to let you incorporate EF with SQLite. Once it is in place then this code becomes something like databaseContext.MyEntityCollection.FirstOrDefault( x =&gt; x.id == idToFind );
XML has XSD..... just saying, just saying.
Well to be fair, if the column indicated is indeed a primary key as it seems to indicate, only one row at most will be returned from the DB. Sql injection attack possibility still applies however 
Yeah, i don't want to just hydrate objects. This is more similar to a form library and input validation than hydration.
&gt;No SQL injection protection required Why not?
But why Console instead of Debug?
Can you send me your resume?
Thanks! I never came across that article, never really thought about it much until I needed to use them a lot for something I made and found that list on google. Copied into notepad and that was that :D either way, if you don't know them yet by heart I suggest every one do the same they can be pretty handy.
You know, in that case, I'd suggest doing a few of their "full game step-by-steps," such as their Stealth, Roguelike, Space Shooter, etc tutorial series. While they don't exactly give you a "now go and make _____", by the time you get through a particular series, you'll have had so much fun and have had so many lightbulb moments along the way that you'll be just brimming with ambition, excitement, and creative lust to make something with what you learned. When you get to that point, you'll *know* exactly where to go. Just don't set your bar too high; it should go without saying that you're not exactly going to be making MGSV after doing the Stealth series -- but you *will* make something pretty darn cool and programmatically interesting (the most important part: the reason you did the tutorial in the first place!) EDIT: Thought I'd add: /r/dailyprogrammer might be of interest to you as a place to get some programming "puzzles" to put together.
Run as far away from this code as you can.
A tip for backslashes, if you have a lot of them in a string you can put an @ symbol in front of the double quotes and don't need to escape them all individually. Though if you wanted other things in that same string that need to be escaped, like a new line, that's not going to work. string filePath = @"C:\temp\some folder\some file"; 
What this code does is demonstrate how not to write code.
Entity Framework + Repository + Unit of Work + Exposing IQueryable from the repository. Oh boy... the classic anti-pattern. Entity Framework provides Repository and Unit of Work. You can claim that by introducing your own you are abstracting away EF and you can replace the backend with REST service or raw SQL queries but this claim is immediately destroyed by exposing IQueryable out of your Repository. Just skip UoW and Repository when using EF. It just makes your code more complex for no reason. You may add an interface to your DataContext for easier testing eventually. If you insist on repository you should only have methods that return IEnumerable/List/Array and never exposes the highly coupled interfaces like IQueryable. Of course once you do this you will see how much work these do for you and how this level of decoupling is not really worth it.
You should use Environment.NewLine for appending new lines not \r\n unless you know what you are doing.
I wish I could say the same for my phone haha. I couldn't run it over with a unicycle at this point. EDIT: Used an emoji which on my desktop PC showed up as an empty square XD
If I don't abstract away EF, how do I write a test around a service method that uses both an IRepository and IApiFacade? Can EF be mocked up? I've never tried doing it this way and would love some examples! Also, is exposing IQueryable that bad? The only leak I've really felt is wanting to use it within an async method. If I don't expose IQueryable and just expose an IEnumerable, I'm going to be pulling my entire SQL table into memory- which is terrible. I appreciate the feedback!
What could happen if you don't? I hear this a lot, but it seems like one of those things where you *should* but it doesnt really matter if you don't.
Yep, it depends on whether the IDatabase object is returning a custom collection (which only implements ToList) or an enumerable where oe could just call First(). At the surface, it doesn't look like there's an sql injection vulnerability since I assumed tablename/keyname are pretty much hard-coded into the application. iDbObj.Key is passed in as a parameter which would likely be represented by a placeholder in some sort of prepared statement. Also yeah, it looks sort of inefficient. Reader writer locks or an object that handles consuming read operations in parallel, then write operations sequentially would seem more elegant to me.
Yep! The lock makes sense if the IDatabase object is being passed to many objects and it only handles one database session at a time. Ideally you'd probably wrap it in a wrapper object and handle the locking there, or you'd just spin up multiple database sessions so you can execute things concurrently.
The reasoning is that different operating system environments have different definitions of what denotes the start of a new (visual) line. https://en.wikipedia.org/wiki/Newline#Representations Personally, I've rarely had to write \r\n in my code as when single-threaded, sequential Console.WriteLine() or logger.X() calls essentially do the same thing, thoguh at the same time I've rarely needed pretty formatting. 
Doesn't really matter - you shouldn't commit the code. Also, if you're profiling performance issues experienced by the user, it probably makes sense to be testing a release build.
Little Bobby Tables anyone?
If there is an error, you should set an appropriate HTTP status response code. For example: [HttpGet] public ActionResult Bar(string aParameter) { if (aParameter == "Hello!") return Content("Hi!"); Response.StatusCode = (int) HttpStatusCode.NotAcceptable; var data = new { ErrorMessage = "Greeting not acceptable!", Description = "It's rude to not say 'Hello!'" }; return Json(data, JsonRequestBehavior.AllowGet); } And, assuming you are using jQuery going by the snippet of JS you have provided, it will be able to pick up when the call returns an error. Naturally the HttpGet and AllowGet aren't required for your usage, that was just me doing a quick job so I could sanity check in a browser :)
I mean wouldn't Debug.WriteLine be easier to use than Console.WriteLine?
If codeacademy was pretty good, you're probably not actually learning c sharp.
This video show you how to make a whatsapp messenger in c#
If you're just starting out then these videos will give you a good grounding: https://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners
Thanks the title confused me
Unless the `iDbObj.tblName` or `iDbObj.KeyName` properties get polluted, at which point the framework's protection features are null and void.
&gt; I could simply check a property to determine if the SQL interaction was successful, instead of try...catch'ing each and every call As ItzWarty said, exceptions were invented to avoid having if/else all the time. Have you ever coded in plain C? Apart from the function names I'm faking for readability, it looks like this: openConnection(); if (!openSucceded) { perror("Error openning connection"); return -1; } sendQuery(); if (!sendSucceded) { perror("Error sending query"); return -1; } fetchResponse(); if (!fetchSucceded) { perror("Error getting response"); return -1; } ...and so on. It was tedious. (This is when an old man would say "Kids these days won't know the struggle." *Sigh.*) The best about the exceptions is that you can do fancy things in the try block and handle all errors in the catch block. That way the successful execution path and the error handling path can be read and debugged separately. More generally, IMHO the most important aspect to look at when handling exceptions is taking care of the state that the program is left in. If you opened a connection and failed to use it, close it. If you allocated any resources, release them. Make sure everything is as it was before the error happened - you may even think of it as "rolling back" a transaction in your program's data structures. Failing to do so may cause your program to accumulate resources as errors happen and in the end crash when they are exhausted. Real-world issues I've seen because of this include memory leaks and exhausting all client TCP ports. In your code, SQLHelper.ExecuteStatement() does not appear to be closing connections properly in case of error.
VS Code wont do it if you are using solutions on project, nuget, etc... It's a basically a text editor with intellisense (there is a debugger too but its nowhere near what you have in VS), i like to use it when i am only doing some TypeScript. Never tried monodevelop, it could work well but it is not VS and you will have to be check about compatibility issues between your VS project and the mono one. I suggest if you go the mono way you just do it all mono and dont try to develop the same project one day in a mono environement and another in a .NET one. I might be wrong on that but i think it would cause a lot of headache to go this way. I personally have been using Parallels desktop for years just to run VS, it works well you just need to have enough ram especially if you are going to have multiple instances of VS running or a solution with a lot of projects inside. 
Can someone ELI5? Lol 
Thanks for commenting. I've contemplated using parallels but don't know much about it. Do you need to partition your hard drive like bootcamp to hold the OS? If you don't do you need internet connection to be able to access the windows os and do you need a license for windows to use it? How much ram do use allow parallels to use? I have 16gb ram so Im thinking 8gb is a fair amount? I've tried parallels out on my old mac that had bootcamp and it worked well but didnt have enough ram for it to run smoothly. Do you know any good links on setting up parallels? 
checked the site feel like spam bots found your site with the common content but i guess its what to expect with anonymous posting 
If you use ReSharper they have annotated several libraries in IntelliSense with [NotNull]. I think it's R#, could be plain VS 2015 though. 
I also use Parallels for Visual Studio. It's not true that Code won't work for projects or Nuget... it just doesn't have built in tooling for those. You can use Nuget from the command line (I do), and Code opens projects, but not so much solutions. You need: 1. A license for windows. 2. Enough drive space for the expandable file(s) that holds the virtual drive. I used 50GB I think. 3. Maximum 4GB RAM allocated for a 32bit installation, go 64bit if you want 8GB RAM. 4. Internet to authorize windows license (and login first time for Windows 8+). 
Would running parallels with bootcamp be a better solution if i need to get a license anyway?
That was an example to show it, of course you can't rely on it necessarily being `\r\n`.
If you're talking about just doing writes, then yes. Problems normally come about because different threads are trying to read from and write to the same variable though. Imagine something like the following: private bool started; private void StartTask() { if (!started) { started = true; // Do some work here } } The write to *started* is atomic, but this code will still potentially cause problems if it's called from multiple threads. The read happens before you do the write, so imagine if two threads call StartTask at very similar times. Thread1 reads that *started* is false, so it gets past the if condition. Thread2 then hits the if condition before Thread1 has set *started* to true, so it too gets past the if condition. Thread1 then sets *started* to true. Thread2 then also sets *started* to true, and then both threads do the stuff that you were trying to ensure only happened once.
Here is how you test - https://msdn.microsoft.com/en-us/data/dn314429.aspx (basically yes, EF can be mocked) Unit testing should not be the driving motivator for your architecture. Decoupling is good because you can switch parts of your project if you find out you did something wrong or if another tech emerges. As great as IQueryable is it is quite hard to implement and basically you are coupled to an ORM solution (and no, micro-ORM won't do it). You are not coupled to your classes but you are highly coupled based on the interface so you are not really decoupled. Now, as I said I suggest that we embrace this specific coupling because of the power behind IQueryable but we should not pretend we are decoupled by introducing artificial useless wrappers in the form of repositories. Also note that I do not suggest returning your whole table in IEnumerable. I suggest putting your queries in the repository where they belong if you are using a repository. For example if you want all tasks by tag you write a method GetTasksByTag(string tag) in your repository that executes the query and returns an IEnumerable of Tasks. This is real decoupling because you can freely switch the implementation of this method. Want to use raw SQL with Dapper or something? Just change the code in GetTasksByTag. Maybe you want to call an API? That's fine just put the API calling code in there. This is what decoupling gives you. Of course as soon as you try to go that road you find out how much IQueryable did for you. That paging library you used stops working and you need to pass page size and page arguments. These Includes for related objects stop working and you need to add them as arguments on case by case basis and so on. This is why my default solution is to assume that I will never switch from EF and just use IQueryable in my service layer (still my service layer never exposes IQueryable to the MVC or WebAPI controllers) and put my LINQ queries in my services. This way I get the power of IQueryable and reduced complexity (no repositories) in exchange for a bit of coupling. If I have to switch to a rest service later I will need to change my service layer as well but I will take my chances. Note that your solution is the worst of both worlds. Your IQueryable stops you from switching to a REST service backend and you have still accepted the complexity of having repositories.
The use of the adjective "exceptional" in this context does not, I assume, mean uncommon, but rather prone to happen...? If so, do you suggest that it can rather be caught further up in the stack, perhaps instead of the if/else?
Point taken: try/catch instead of if/else The closing and disposing of connections is handled when disposing the SQLHelper object. The idea is that you can execute a few commands without the need to open the connection every time. Do you not agree with this?
Take it with a grain of salt 'cause I'm actually a Java programmer who recently got a job in C#. If you're sure connections are closed properly then you can ignore my point about SQLHelper. From a more general point of view, making sure all resources are properly freed will be important in other cases, e.g. consider what would happen if you acquire a ReaderWriterLock (you'll find lots of sources saying it should be released in the finally block because of the need to free resources properly in case of error). Edit: the "using" keyword is another good way of making sure resources are properly released, just be careful to check that the Dispose() method does the job correctly. But you appear to have already taken care of that. 
[This e-book](http://www.albahari.com/threading/) is a good start. I'm sure there's something in there about cache coherence. [Part 4](http://www.albahari.com/threading/part4.aspx) seems to touch on this subject. Your coworkers are asking for trouble, and will probably complain at some point about "random bugs" or "it crashes randomly sometimes". This is what happens with badly-programmed concurrency or parallelism (and frankly, crashing is the *best* case scenario. A data race or torn writes/reads would be much worse). And unless you have identified a performance bottleneck, use `lock`s or the higher-level constructs ([Semaphore](https://msdn.microsoft.com/en-us/library/z6zx288a%28v=vs.110%29.aspx), [ReaderWriterLock](https://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock%28v=vs.110%29.aspx), etc. etc.). Lock-free programming is usually unnecessary.
I'm using parallels at work and my team is insanely tired at it and are forcing IT to allow us to install bootcamp. Performance is bad, we get regular system freezes and network bridge issues between osx and the emulated windows. 
you could try xamarin
Draw some circles, then draw the rest of the owl.
Cocoabean
You should clarify that this is just a quick hack-together job to show how the WhatsApp API works and not something that should be followed as an example of good software design principles.
See I was considering that possibility and had a thought that maybe if it is that, I'd have to have a way to automatically add a distinguishing value to the box, which is why I'm wondering if it's possible to name the new instance with a variable's value at the end. The only other problem with this being that I'd have to figure out a way for the *clear* button to check each of the values for the boxes. If there's a way it could just check the values for every checkbox on the form, that would make things a whole bunch easier, at least until I'm forced to add more for whatever stupid reason.
Bootcamp is an alternate boot partition running Windows. So when you boot (hold Alt key down) you get a choice of Windows *or* OS X, but not both at the same time. Whereas Parallels is a virtual machine that runs *inside* OS X, so you can Command-Tab between running applications, whether they're Mac apps or Windows apps. 
wells since it seems like form.control is a collection type you could iterate over each of the items in form.control, first checking if it is a checkbox and then checking the checkbox's value. Otherwise you could utilize your counter to assign a checkbox.name to your new checkbox since that property will accept a string.
I use VMWare with maxed out RAM(16 GB). I have Win 8.1 with VS 2013 and 2015, works just fine for windows programming. Monodevelop is not as nice as VS Studio, but will get the job done if you want to run/program C# app on a Mac. I tend to use the native language than use web services and/or Python to glue the two platforms together when needed.
[removed]
I'm not sure. I've never used Bootcamp. I've only personally known one person to use it and he said it was nice to run Windows without the overhead of a VM, but that it sucked when he needed to reboot for OS X stuff. My understanding is that Parallels allows you to load that partition into the VM environment so you have the best of both worlds (boot into Windows or run as VM)... I've just never tried it.
&gt; "random bugs" or "it crashes randomly sometimes". They do, they do. I think I'm just gonna privately discuss this with the lead dev and try to understand why do use so little locks.
When you say it doesn't work when you try to open the file. What do you mean exactly? Any errors? Nothing happens? More info the better!
I'm opening it up on Groove, but I've also tried it on WMP and so am sure that it's an issue with the code rather than the player. Opening it up on groove produces this message: "Can't play. Try playing something else. This item's file format may be unsupported, the file extension may be incorrect, or the file may be corrupted."
Cobol
Well as soon as you run it on mono without doing it the right way it won't work properly.
Sorry, the C# _language_ subreddit isn't the place to be asking such a question. Try contacting the developers of DDay.ICal.
You want a "Where" clause. ebaySold = item.Where(i =&gt; i.Field&lt;string&gt;("Market").Equals("eBay", StringComparison.OrginalIgnoreCase)) .Sum(i =&gt; i.Field&lt;int&gt;("Sell Price")) EDIT: You could ALSO do a GroupBy to grab all the Sums at once rather than having a statement to sum ebaySold and another to sum amazonSold, but that syntax is harder for me to write out from memory. I'm sure somebody will reply with that format.
As much as I appreciate a C# developed project, I think right now the site is garnering a bit too much offensive content. I'm going to mark it NSFW for now.
Did you register the dll? (like "regsvr32 blah.dll" from the command line)
The distinction between (from x group x.y into g) and x.GroupBy(x =&gt; x.y) is really just about preference (there are a couple differences but they're pretty out of scope for what you're asking here). So bascially you can express LINQ using query syntax (from x group x.y into g) or using the fluent (lambda) syntax (x.GroupBy(x =&gt; x.y)). Personally, I prefer the lambda syntax as I just find it more clear and easy to read but I'm sure people will disagree with me on that. The key to linq for me was really trying to understand what is actually returned by each linq operation so that you can understand the operations you need to do next. For example, linq operations like .Where(..) return an IEnumerable&lt;T&gt;, which is another collection based on your where clause. Operations like .First() return a single item based on the clause. .Select() returns a collection of the projections of your new type you define. .GroupBy(x) in particular returns IEnumerable&lt;IGrouping&lt;T1, T2&gt;&gt; which is a collection of groups where T1 is the type of the property you grouped by and T2 is the type of the actual item in the group. The key thing is that you are returned a collection of groups so you have to operate on each group in that collection and possibly each item in each group. If you understand querying a database, using SQL for example, you can start to understand how linq operations return the same types as their sql counterparts would. Hopefully this helps and doesn't just muddy the waters further for you.
The dll works if I compile with everything commented out (for testing purposes). It's just one offending line in the dll. I wouldn't think that I need to register Shell32.dll.
Grab LINQPad from the sidebar and toss this in there to play with as an example. void Main() { var foo = new List&lt;Tuple&lt;string, string, int, int&gt;&gt;(); foo.Add(new Tuple&lt;string, string, int, int&gt;("Game", "ebay", 10, 15)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Game","Amazon", 5, 10)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Book","ebay", 2, 5)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Book","Amazon", 3, 5)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Book","Amazon", 4, 5)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Furniture","Amazon", 25, 50)); foreach (var grp in foo.GroupBy(t =&gt; t.Item1, (key, group) =&gt; new { key, group })) { Console.WriteLine("{0}: {1}, {2}, {3}, {4}", grp.key, grp.group.Where(i =&gt; i.Item2.Equals("eBay", StringComparison.OrdinalIgnoreCase)).Count(), grp.group.Where(i =&gt; i.Item2.Equals("Amazon", StringComparison.OrdinalIgnoreCase)).Count(), grp.group.Where(i =&gt; i.Item2.Equals("eBay", StringComparison.OrdinalIgnoreCase)).Sum(i =&gt; i.Item4), grp.group.Where(i =&gt; i.Item2.Equals("Amazon", StringComparison.OrdinalIgnoreCase)).Sum(i =&gt; i.Item4)); } }
Binary
And for shits and giggles, here's another similar example. void Main() { var foo = new List&lt;Tuple&lt;string, string, int, int&gt;&gt;(); foo.Add(new Tuple&lt;string, string, int, int&gt;("Game", "ebay", 10, 15)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Game","Amazon", 5, 10)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Book","ebay", 2, 5)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Book","Amazon", 3, 5)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Book","Amazon", 4, 5)); foo.Add(new Tuple&lt;string, string, int, int&gt;("Furniture","Amazon", 25, 50)); // On second thought, let's make an anonymous type with better names cause Tuples are annoying.. var bar = foo.Select(t =&gt; new { ItemType = t.Item1, Market = t.Item2, BuyPrice = t.Item3, SellPrice = t.Item4 }); foreach (var grp in bar.GroupBy(t =&gt; t.ItemType, (key, items) =&gt; new { key, items })) { Console.Write("{0}: ", grp.key); var aggregates = grp.items.GroupBy(g =&gt; g.Market, (key, items) =&gt; new { Market = key, ItemTotal = items.Count(), SoldTotal = items.Sum(i =&gt; i.SellPrice) }); // This works for an arbitrary number or markets, but doesn't work so well binding with datatables. foreach (var marketGroup in aggregates) { Console.Write("{0}, {1}, {2} ", marketGroup.Market, marketGroup.ItemTotal, marketGroup.SoldTotal); } Console.WriteLine(); }
IF you're talking about performance, building up a stack trace by producing alot of catches isn't really fancy... going for if statements with proper logging with be more preferable. The golden rule I hold myself up with is... do I have a fallback for this scenario, if yes, do make use of a catch else just handle exceptions in your scenario by an if else statement :)
You can use the Tag attribute for this purpose. It's supposed to be a wide field for your convenience to store something. Otherwise, consider using a HashMap&lt;Point, CheckBox&gt; to keep track of which CheckBox you have based on its Location. It seems you have an addressing problem, so using a Collection would make it easier. 
Looking around I see that GetUIObjectOf only seems to work when compiling for 64bit, if you're only compiling for x86 then you're out of luck. But that's just because I found discussions like [this one](http://stackoverflow.com/questions/2234759/iextractimage-works-from-a-console-application-but-not-a-plug-in), I've not used the call you've mentioned myself.
Can you check the file it's format? If it is .wav do you use a media player that supports this format? Try out 3 media players or so to be sure it isn't the player that causing the trouble. Any general logic code errors could be that there isn't a valid stream you're writing to :)
Eat it
Use visual studio 2012, the last vs with official dev tools. It's either in the 2011 or 2013 SDK, you'll have to check. Also, check out the code samples in the SDK, they are pretty useful. Basically everything goes through OrganizationService wcf endpoint, you'll have to code against it to retrieve or push data to crm. You can create custom behavior while interacting with crm via its web interface through "plugins". For example when you update a field of a record, you want to call an external service that blinks a light in the bathroom. You'd put your code that does this in a plugin. You can kick the plugins off in different stages of an operation: PreValidation, PreEvent, PostEvent where Event is something like creating or updating a record. You can also do client side scripting with crm's js library, but I haven't used it much to know much about it. That's all i got from the top of my head. 
I am thinking this. I read a post about this kind of scenario. If you need to use windows apps for a long time then bootcamp is better. If you are using it for a short time to do minor changes then a vm is better. I think I have decided now to go with bootcamp and use a vm if i need to do minor changes. Thanks for commenting. 
I think your downvoters don't get your sense of humour. But I do :)
I have a few years of experience with Dynamics CRM and plugins, integrations etc... but I don't know what a coupeling is... if you explain I may be able to assist....
You need some glasses, man. Cant you see sharp?
The C# project was compiled for x64, but I hadn't tried compiling the dll for the same. I'll give that a shot. 
I haven't really looked at those, but here is a free book that you can download as PDF. I actually printed it out just the other day when it first came out. (Excuse me, when the new version came out.) http://www.robmiles.com/c-yellow-book/
Sorry for the late comment, but I'd recommend downloading Unity and start making some basic games on there. They have a great series of video tutorials that cover the basics of scripting(using c#) and most of the editors features. Try making a very simple game and go from there. Another option you have is using XNA/MonoGame and completely creating your own game/engine almost from scratch. There's a [video series on Coursera](https://www.coursera.org/course/gameprogramming) focused on learning how to program in C# by making an XNA game. /r/gamedev also has a lot of good resources specifically for game development and there's a section in the wiki[ on getting started.](https://www.reddit.com/r/gamedev/wiki/getting_started) I'd recommend reading some of their other wikis for ideas on getting started and what to use too. Just focusing on the basics, though. You have a lot of options. I'd recommend trying make a program that you want/makes life more convenient for you. Making a clone of an existing program is another good idea. /r/learnprogramming has a lot of [good ideas in their wiki](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) and is an all around good place to look when starting out.
Yep. You add a service reference to the Organization endpoint, and you do *everything* through it. If you do direct database access "just this once", you're going to have a bad time. This guy has a lot of CRM videos on his channel: https://www.youtube.com/channel/UCIhDcAHVygsQz34q5cHGI2Q 
That's fair, I have just become really accustomed to the object model that the SDK provides. 
Go with C# 2012 for Programmers. It shows you Visual Studio and covers a lot of the useful technology around C# like ASP.Net.
Yea I second this, my suggestion for that is to get a piece of paper and do an ipo / algorithm design first
I just have issues with finding a moderately practical use of said knowledge. I'm in the PLTW computer science class, and it's scratch and python (uggg). I figured I'd find out how to write out an xml file to track my assignments.
[removed]
If you can do that, you already know more than 50% of developers. Only half kidding...
I didn't see how external code would be handled in the proposal. Maybe methods guaranteed by the C#7 compiler to return non-null T will be decorated with a new attribute which can be checked by calling code while being compiled. If not decorated by the new attribute, the compiler would assume T returned from the external method *could* be null. Just an idea :)
Python is a very useful language. It's used throughout the industry. Consider learning it as I'm sure you'll find some awesome ways to apply it later on, even if you prefer C#.
Agreed. I have the same book and it is pretty awesome.
Thanks for the info. Gonna look into it.
I'm definitely for this solution. Simpler, easier to add new markets and can easily be translated into SQL to be run on DB. The problem with original solution is that the WHOLE table is pulled into memory and calculation is done in program itself. Assuming this is a homework problem, I would give 1/10 to the original solution. Yeah, it might work, but is completely un-futureproof.
Have fun! It's a fantastic language to learn and there's no limit to the number of projects you can experiment with.
I don't know if this is the best way. This has been my architecture of choice for the past 2 years. Before that I was trying to make repositories work then I declared them useless and I googled around and it turns out that more people declared them useless. It is entirely possible that in a year I will have a new idea of how to structure things. In general I try to understand what certain practice or architecture buys me and how. If I do not care about the result or deem the price too high I do not adopt the practice. If I do not clearly see the claimed results I do not adopt the practice. Repositories and unit of work failed the second test. When I tried to imagine how I would replace the repository layer with something else I just couldn't so I declared the pattern broken (in its IQueryable exposing form) and stopped trying to make it work. I do not care if people more clever than me recommend the pattern. If I do not understand the benefits I would probably misuse the pattern anyway so I'd better simplify the code. I doubt I will change my mind on repositories at some point because I have been in a lot of arguments and nobody presented meaningful arguments in defense of repositories. If I ever return to writing repositories it is more likely that the reason is that I stopped using ORMs or am using non-relational database rather than reconsider my opinion on Repository + EF.
Seems to fail with VS2015 - I believe this is because lambdas have changed from statics to instance methods? &gt; Hmm, it looks like the delegate is generated differently. The C#5 compiler implements the lambda as a static method. The C#6 compiler implements it as an instance method of a compiler generated class. You shouldn't be binding to the method directly anyhow, you should be Invoke()ing it instead. Via http://stackoverflow.com/questions/32463635/expressions-bug-with-ryujit Via https://www.reddit.com/r/csharp/comments/3k47tt/possible_issue_with_ryujit/ Error: &gt; DirectCall: 39ms &gt; Unhandled Exception: System.ArgumentException: Cannot bind to the target method because its signature or security transparency is not compatible with that of the delegate type. &gt; at System.Delegate.CreateDelegate(Type type, MethodInfo method, Boolean throwOnBindFailure) &gt; at System.Delegate.CreateDelegate(Type type, MethodInfo method) &gt; at DelegateCalls.Program.Main(String[] args) in c:\users\warty\documents\visual studio 2015\Projects\DelegateCalls\DelegateCalls\Program.cs:line 31 &gt; Press any key to continue . . .
Via http://stackoverflow.com/questions/31408767/difference-in-csc-and-roslyn-compilers-static-lambda-expression-evaluation/31411479#31411479 &gt; This was a deliberate change made by the Roslyn team. &gt; &gt; Delegates that point to instance methods are slightly faster to invoke, so Roslyn now compiles lambdas to instance methods even when it doesn't need to. &gt; &gt; See [discussion](https://roslyn.codeplex.com/workitem/246).
I would say True? both are equal? or appear so to me in the string.
ran it on sharpDevelop and it ran to true? as well portable app on work pc.
Print False on VS too. Try copy/paste the snippet from .NETFiddle, instead of the one shared here ;)
If that were True, there would be no fun. :)
&gt; it looks like it's been stripped out when posting the question here. [Exactly](https://www.reddit.com/r/csharp/comments/3k7xzl/can_you_guess_the_output_of_this_snippet/cuvg0q1). Reddit and GitHub show them but .NETFiddle not.
&gt; a buried option or extension for Visual Studio to show invisible characters I didn't find one but I found later a workaround. You can use the search/replace box with this regex : `[^\x00-\x7f]` and replace them by `#whatever#` to show them. If there is not such option or extension, I can build one :)
[I found one](https://visualstudiogallery.msdn.microsoft.com/a7c229bf-146f-4bd6-ac82-16861328c79d), but unfortunately it doesn't support 2015. It's [open source](https://github.com/jaredpar/VsShowChars), though.
But it is true. At least for the code that you posted here.
Another crap video of foxlearn. :-(
To me books are only good for checking specific things. I tried treating them like tutorials but it never worked well, maybe it depends on the book though. In the end you just need to code a ton.
The issue with the class is it's open to freshman. What I'd do, is kick the underclassmen, make the sophomore level of the 4 year course a requirement, and adjust the curriculum from there. I don't really dislike python (given I haven't started in it), but if they're not using it to teach good structure, I'm not going to be happy. Honestly, the VB.NET class that they got rid of, I learned way more on my own. I asked the teacher this year to give me the full semester worth of work, but she didn't...
[Pro C# 5.0 and the .NET 4.5 Framework](http://www.apress.com/9781430242338) Despite the Pro in the name, I found it explains even basic stuff really well and in detail. You can also find it really easy online, for free... If you know what I mean
Coders code.
Yes it is. You will see False on the console as you know. I find it amusing.
Could you upload the two files so we can look closer?
It's probably NAudio doing something extra that the specific player can't handle. But in any case, what leafsleep said &amp;mdash; could you upload the two files?
&gt; That was the puzzle. What puzzle? That's very obvious.
How do you plan to deal with interoperability? On the Kickstarter you mention "Purity" and "Null Safety" - both things that can't be done very well in a .NET environment.
From the Kickstarter: &gt; Receive Licenses. Backers can receive licenses to the v.1 compiler (including v.1 bugfixes and improvements) allowing for both non-commercial and commercial use. Licenses for corporate backers are available as well. Backers at this level will also have earliest access to the alpha and beta versions of the compiler, and will have their feedback and bug reports prioritized. You **seriously** plan to make a **non-free compiler**? Are you nuts?
Have fun, man. It's going to be a wild ride.
&gt; Do you compile the code to assembly language first and then into bytecode or do you go directly into bytecode? They already said they'll be a .NET language, so they will compile to IL code (byte code).
Notepad++ is your best friend. It showed the character. If that didn't work there is a hex plugin that also helps. 
u/annymsMthd has the best answer. Use an ORM, do simple validation / checks, and just add a global error catching. When issues or bugs come up add more refined error handling.
I don't know if they are similar issues with text, but I was working on a program that handled file names and had i similar issue. When it tried to open a file it couldn't as it thought the path was invalid. I had it display the path with a MessageBox and typed the path into explorer, the path worked fine. After hours of trying to figure out the issue, I ended up using Clipboard.SetText instead of a message box (so I wouldn't have to type the path over and over) and sure enough, Windows couldn't find the path. Well I eventually found out that one of the backslashes took 2 presses of backspace to erase (one press did nothing). After erasing that non existent character the path worked. So I rewrote part of the logic that put the path together and everything was better. Probably wouldn't have taken so long if I had more experience then I did. 
I gotta say, you guys are way more ambitious than [Scrawl](https://www.reddit.com/r/csharp/comments/2wvoek/scrawl_a_modern_crossplatform_c_vbnet_and/) (which is silent since [July](https://twitter.com/scrawlcommits)). Fifty bucks for a compiler years from now? When Roslyn exists as open source multiplatform solution which make it possible to anyone to extend C# or VB.NET on their own if they so need it? Also, when I ran into problem, I can't rely on millions of free resource in SO or various forum, oh no, I gotta rely on a forum of fellow paying developers because literally no one else in the whole world even have access to the freaking compiler. I expect few months from now someone else will start a kickstarter for a shiny modern synergic debugger/documentation explorer/runtime.
So, why not provide the compiler for free? Frankly, I think you're quite out of touch with reality.
I'll add my project to github soon so that I can reference it directly... Each item to be selected is a row in a DataGrid: &lt;DataGrid x:Name="itemlist" ItemsSource="{Binding AllItems}" AutoGenerateColumns="False" IsSynchronizedWithCurrentItem="True" DataContextChanged="itemlist_DataContextChanged" SelectionUnit="Cell" Loaded="itemlist_Loaded"&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Binding="{Binding}"/&gt; &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; In terms of the MVVC, where would the input logic for the xbox controller go (receiving input and throwing events). Also, can you provide good resources to find out how to use event handlers in this context (or non-trivial contexts)? Lastly, can you provide resources for SOLID? I'm not familiar with this acronym. Thanks a lot guys, I really appreciate any help I can get with this.
I really like that analogy. What would be the other two? Python? Ruby? Html5? Javascript?
How would he make money on the language otherwise? I can definitely see why he shouldn't charge because just about every established language has a free compiler. But how does a language maker make money on their language? Or is this just not something you make expecting to make money off of it anymore. 
Turbo pascal, would be an ancient pokemon maybe omanyte
First get an audience. Then get money. But instead they want to get money to make something for selling it, which will have very little audience.
int.Parse is only used for when you have a string, Convert.ToInt32 has a bunch of overloads for other types In the case of a string, Convert.ToInt32() calls int.Parse() internally but with an additional null check, it's implemented like this: public static int ToInt32(string value) { if (value == null) { return 0; } return int.Parse(value); }
That didn't really answer my question. How does increasing an audience make you money if your compiler is free? I suppose you could put advertisements on your webpage but that doesn't seem like a very reliable business plan. Especially if you're just a small fry. 
I guess I should be sorry to be a junior.
Windows Forms is a great tool for learning beginner programming techniques. It often recieves a lot of flack for being relatively simple to use, but it's great for learning as almost any situation you may have trouble with has most likely been asked on sites such as stack overflow with solutions or explanations. It may be dying due to increased WPF implementation and efficiency, but Windows Forms does cater more to beginners. In the end its a choice of what you want to use, but Windows Forms is still used for many tools due to simplicity.
looks like a good reviewedbook thanks 
Now, I am assuming this is a bad idea for reasons I don't yet understand, since I am just starting out with C# but I have to ask anyway. When performing data validation, to ensure that entry into a textbox is infact a number, would this be a terrible idea: if (Convert.ToInt32(textbox.text) != 0) { //code after validation } After typing that I realize that it is a pretty imperfect test for user entry but I am going to let the question stand in case it solicits a good data validation method for number entry in a text box. Currently I have been using: int num; if(int.TryParse(textbox.text), out num) { //Code after validation } but for some reason it feels wrong to me. 
You need to pick a good C# book, dedicate a day or two, and go through it. It really won't take long for a high-level tutorial on the major points of C# and OOP. Most of what you are trying to do is captured in Polymorphism of one kind or another. Be that class inheritance, interfaces, or generics. At this stage, I'm guessing you've downloaded some Unity scripts, attached them to objects, and hit play. You're feeling pretty good. You may have even changed a value or two and got some result. But really, you're not even at the hack stage. You have two ways to proceed. Keep hacking at it, learning in a convuluted manor that likely keeps your attention, but constantly makes you feel confused and lost. Or two, apply some discipline, decide you want to write software in C#, and learn the language outside of Unity. Write some console applications in Visual Studio. Make an inventory management system with no GUI, no UI, just allows you to add different items to a 'backpack' and compute the total weight, value, and maybe allow you to sell/buy items through a console application. Once you got how that works, then go back to Unity and figure out how to transfer your ideas to that environment.
`Convert.ToInt32()` will throw an exception if you pass it a non-integer (including numbers with decimal points), whereas `int.TryParse()`(or `Int32.TryParse()` - same thing) will gracefully return false if you pass it alphabetical characters, decimal point strings, or even `null`. 
null as well?!? so checking for a null textbox before checking if it is a number is redundant? Man, that is great news. 
[removed]
By selling additional tooling, support, consulting, platforms and services built around the language (e.g. Azure), or optimized compilers/runtimes (like Intel's compilers or Oracle's enterprise Java runtime). None of these work without acquiring a large enough audience first, of course. But really, making money by creating a new language is a pipe dream. Unless you have a monopoly or at least a strong tie in on an independently popular platform (like iOS) or you're able to break into an extremely specialized market (automation or something), the chances of a language becoming popular at all - let alone enough to make a significant profit - are tiny regardless of how great the language may be. Asking for money right out of the gate is a surefire way to kill any adoption it might see.
&gt; so checking for a null textbox... Yes, and I take it you mean `TextBox.Text`... Going off a bit of a tangent, but I don't know what `TextBox` you are using (there are at least four variations in .NET depending on your framework), but a null check on the `.Text` property isn't necessary, as the internals of the accessor look something like: ` get{ return((s == null) ? String.Empty : s);}` 
Yeah I did mean textbox.text Unfortunatly from my experience a null check is required if you are trying to do any kind of math on the input from the user, if the textbox is empty and you try to: int32 discount = Convert.ToInt32(textbox.text) * .5; the program will crash. That is why I was excited when you said that a tryparse check would also validate a null checkbox, so I didn't have to run both checks. Previously I had been using &amp; or embeded if statements to perform both checks seperatly. 
I use Autofac at work as well. Its pretty simple, and has good default integration for MVC/WCF/API and other default project types.
In my case, some people have a need to change the values in the individual classes they use them in a decent bit, like so: public class LibraryUsersClass { public int Value { get; set; } // Users will change the isNeeded based on indvidual calls needs to the method. public T CalculateIt&lt;T&gt;(int value, bool isNeeded) { return DoStuffExample&lt;T&gt;(value, isNeeded); } } But for others, it's simply needed to be all a default value one way or another, and if it's not the default one that is coded, then they have to add tons of needless bool params to override it every time. So if a user needs to simply use mostly the default true param, but wants to use false some times they can do so. For users who need it to always be one or the other, and their one or the other is not the default true like in most cases, they can simply force the default value with one set for everything.
Unless you want to throw exceptions, which may be perfectly valid. 
Interesting that it does a null check. In some ways, this is useful, but I can't help but think that more often than not, it would be an unintended bug and explicitly handling null would be more ideal (ie, I think it should throw an exception if the string is null).
I like [Simple Injector](https://simpleinjector.org/index.html). Good documentation, and easy to use with ASP.NET MVC. It's also lightweight and fast. Check this page [IoC Container Benchmark](http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison) for a comparison between several options.
Why ??? All your post too bad !
Im not sure what youre trying to do exactly. Can you post the method from class2 that youre trying to call? Im assuming class2's method is also static?
Lots of good comments in this thread for people to learn some things. Too bad the original post is being down-voted so hard!
I'm partial to [Lightinject](http://www.lightinject.net/), myself.
I always end up with a few extension methods: str.AsInt(); str.AsBool(); that uses TryParse and returns a nullable. Makes much more sense
&gt; Further, I also need to return the value that ends up in Method1 In your button's click event method, you would simply just return the value from Method1 and store it into a variable. var foo = Class1.Method1(string1, string2); --------------- Regarding not being able to call Method1: if Method1 requires parameters, you need to provide it parameters. There is no way around this other than changing the definition of Method1. What exactly would Method1 *do* without its parameters, anyway - are they not crucial to the operation of Method1? So your options are: * Determine how to provide proper parameters to Method1 * Provide dummy parameters to Method1 (i.e. "username" and "password") * Re-engineer Method1 to support default or nullable parameters I would figure out whatever was supplying Method1 with values before, and replicate it in your form.
Depends on coding style. Some like the explicitness of e.g. `Int64` because `long` has different meanings. It's definitely done inconsistently, though - I know people that write Int32.Parse but also string.*.
You can call win32 functions no problem: [StructLayout(LayoutKind.Sequential)] public struct SYSTEM_INFO { public uint dwOemId; public uint dwPageSize; public uint lpMinimumApplicationAddress; public uint lpMaximumApplicationAddress; public uint dwActiveProcessorMask; public uint dwNumberOfProcessors; public uint dwProcessorType; public uint dwAllocationGranularity; public uint dwProcessorLevel; public uint dwProcessorRevision; } [DllImport("kernel32")] static extern void GetSystemInfo(ref SYSTEM_INFO pSI); But before going wild with this, look at what the framework offers - often there are already wrappers around commonly used Win32 functions. Like in the Environment and System.Diagnostics classes. 
Instead of assuming you have to use a text box to get a number input from a user think of other ways you can gather this information from the user. If the number can only be one of a small discrete set, use some sort of slider or drop down box. If you have to give them a text box try to prevent the user from putting invalid characters into the text box. Techniques like these can greatly simplify your data validation and cleanliness checks later on. 
It was pretty full retard and it's a public discussion forum focused on only one specific subject, so people likely expect better content than this. It's the entire point of the down vote/up vote system to filter out content like this :). Just so happens to be unlucky a bit of positive discussion came out of it, it's the exception I would say.
Yeah, if only that was optional...hahaha, oh well, you have to get over it I suppose. Thanks for the advice!
This is perfect. Can anyone give me a good ELI17 example and reason for IoC? I've used Ninject while going through Pro ASP.NET MVC 5 but didn't really learn what it was doing. Someone, PLEASE, give me an IoCHelper!
Well there's [pinvoke](http://pinvoke.net/) if you're interested in interop with native code, like the Win32 api, or other things that don't already have a .NET implementation. Probably you just need to find something that interests you or that you'd find useful. Also, since the C# and VB have been re-written to use the new compiler service Roslyn, there's plenty of scope to write interesting utilities. 
Just a warning - looks like Microsoft is going a different route with unity long term 
I see that in people who learned on one language and career in another. Example: learning on java, get paid on c#. 
[removed]
Because the quality of those videos is incredible low. And you're using a fucking program to speak, instead of speaking yourself. Seriously, **wtf**?
&lt;3 pinvoke
I use C# step by step
I don't speak english very well, natural voice is the best way, i only can share how to do that for beginners... see all video you can do that. Today don't need code so much. The computer must be generated code. you should focus business, i'm not marketing anything, it's only share technology. I just make account reddit, i'm not familar. more comunication programmer on facebook, twitter, google plus it's a best friend. I think you are advanced, may be you don't need learn more. anyway thank so much, i'll try to explain more in next video
Surely you can. There is P/Invoke and RCW for Win32 and COM integration. Unsafe blocks for C style "shoot my foot" programming. All WinRT APIs are available to C#. The IoT demos at Build were all done in C#. When .NET Native comes to the desktop, there will be another door for doing this type of stuff. C# is no different from languages like Oberon, Modula-3 or Spec#, all system programming languages with GC used to build OSes. 
&gt; database access "just this once", you're going to have a bad time. Never do direct database access in any of the Dynamics suites; especially the ERP packages...
I'm a fulltime C# developer (I do a little bit of DevOps/non-code Azure work too though), and I haven't written a single line of GUI code in over 2 years... There are plenty interesting things out there that are neither GUI work, nor "low level" as you put it... Why would you want to twiddle bits all day when you could build a petabyte-scale data processing system?
I tend to favor Dapper + SqlConnections with the Transient Fault Handling Application Block. I rarely get errors that bubble all the way up anymore, at least from the database.
Why?
I was forced to use a MBP for C# work professionally for about a 1.5 years. I lasted about 9-10 months on VMWare before I raged out and BootCamped it. Then my company bought me a nice Sager machine, and I couldn't be happier with it.
You can do a lot of low level stuff in C# the more you understand the Language and Runtime architecture the more you can take advantage of that knowledge to create realy fast low level algorithms like image manipulation/crypto/3d rendering/network protocols/file compression without using interop to c++. Using unsafe blocks and knowing what you do, you can close the gap to c++ speeds even more (this is often used in image manipulation libraries). I have plenty of low level c# experience (i am a embedded developer that frequently writes c# software that interacts with IOT devices over bluetooth or LAN). If you have a more specific question ask away. 
Well, there probably are, but as others pointed out, some are just more visible than others :)
I used to think I was a low level guy. It turns out I actually care way more about the data and calculations than I do about the presentation. As such, getting into Asp.net WebAPI has been a life changing experience. Like other Microsoft frameworks it's pretty easy to get going out of the box with minimal learning. Unlike other Microsoft frameworks however webapi has tons of extensibility. You can easily drop in your own serializers or add custom model binders just to name a few. Not to mention of you create something neat and want to share it with the world your project will already be web able (unlike if you'd started from a console app). Really though it all depends on what kind of task you are trying to perform. If you just want to access the OS because that's what your used to you need to get over it. Whatever code you write will work more universally on more systems if it isn't littered with OS specific code. 
They're called extension methods, it's a way of adding methods to other objects indirectly. Yes the 'this' keyword is how you declare one.
Funny thing with the VS and project count. He complains about it, so apparently they want to write an own IDE and not use Visual Studio. Because when they use Visual Studio the problem would remain. And when they write their own IDE, then it will never reach the level of extensibility of Visual Studio. They won't be able to take advantage of the extensions existing already.
*A relevant comment in this thread was deleted. You can read it below.* ---- &amp;gt; What is the relationship between Class 1 and Class 2? Are they just two completely separate classes? Class 1 and 2 I didn't write. They were part of an asp.net app that was never completed that I'm modifying to work in a form. Originally they worked together. Class 1 has a method that is a utility of sorts that either encrypts or decrypts (for lack of a better term, it's more of a conversion thing about obfuscation than anything) credentials. Class 2 method is all the conversion code that works based on the string parameters being passed between the two classes from what I can tell. [[Continued...]](http://www.resavr.com/comment/method-calling-parameters-1798637) ---- *^The ^username ^of ^the ^original ^author ^has ^been ^hidden ^for ^their ^own ^privacy. ^If ^you ^are ^the ^original ^author ^of ^this ^comment ^and ^want ^it ^removed, ^please [^[Send ^this ^PM]](http://np.reddit.com/message/compose?to=resavr_bot&amp;subject=remove&amp;message=1798637)*
Good example, long =16bits on cell, long = 64 in c#, long = 32bits in cpp. This made me want to punch walls when I was learning...
long is always Int64 in C#. There is no other version of long. C / C++, it's whole other can of worms.
Only thing about Windsor is that its lifestyle is singleton by default, messes up our web projects to no end
&gt;In terms of the MVVC, Stop, right there. What do you mean by mvvc? WPF is designed around the MVVM pattern. &gt;where would the input logic for the xbox controller go (receiving input and throwing events). If this was my project, I'd have an interface named IInputProvider that published navigation input related events. So MoveUp, MoveDown, NavigateAccept, NavigateBack, etc, whatever inputs you want to be able to handle. Then I'd create specific classes for each input source: KeyboardInputProvider, ControllerInputProvider, MouseInputProvider. I'd then inject one of them into the VM for the page being controlled. &gt;Lastly, can you provide resources for SOLID? I'm not familiar with this acronym. Wikipedia has an article on it: https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29 
You may be better off writing in a different language, like rust, go, d-lang, or nim, if all you want is nicer syntax.
No love for the amazing Autofac? I used Ninject for years but eventually switched to Autofac and haven't looked back. It's very fast. Has support for most everything (even new stuff like Akka.net). Injection of relationships and advanced lifetime scoping. Highly recommended.
What have you tried? Also, share *all* your code. This little snippet is not nearly enough.
Thanks for the reply. That is all the code, the complete function. A previous function is called to Create and then Load a set of menus [It's a Home Theatre app available here, complete free] (http://www.blissgig.com/default.aspx?id=21) When the Create-Load functions are called they send a "One Moment Please..." and when the menus have completed loading a "[TITLE]" (in this case "Films") is loaded via the same function. What's odd is that you can see via the Console outputs that there is the "Text Change 1" and "Text Change 2" for the "One Moment Please..." and others, but not for the TITLE, in this case. Usually this is not an issue.
Appreciate that
The last time it crashed, I got this exception (happened on myWorkbook.Save()) Exception thrown trying to run Perf-RT macros: System.Runtime.InteropServices.COMException (0x8001010A): The message filter indicated that the application is busy. (Exception from HRESULT: 0x8001010A (RPC_E_SERVERCALL_RETRYLATER)) at Microsoft.Office.Interop.Excel._Workbook.Save() at BuildPerfRT.Program.Main(String[] args) in c:\Users\ypa\Documents\Visual Studio 2012\Projects\BuildPerfRT\BuildPerfRT\Program.cs:line 189 This is thrown often on the myWorkbook.Close(false): Exception thrown trying to close Excel: System.Runtime.InteropServices.COMException (0x8001010A): The message filter indicated that the application is busy. (Exception from HRESULT: 0x8001010A (RPC_E_SERVERCALL_RETRYLATER)) at Microsoft.Office.Interop.Excel._Workbook.Close(Object SaveChanges, Object Filename, Object RouteWorkbook) at BuildPerfRT.Program.Main(String[] args) in c:\Users\ypa\Documents\Visual Studio 2012\Projects\BuildPerfRT\BuildPerfRT\Program.cs:line 167 These 2 (the latter more frequent) get thrown often when I call myExcelApp.Run("MacroThatUsesAddin"); Exception thrown trying to run Perf-RT macros: System.Runtime.InteropServices.COMException (0x8001010A): The message filter indicated that the application is busy. (Exception from HRESULT: 0x8001010A (RPC_E_SERVERCALL_RETRYLATER)) at Microsoft.Office.Interop.Excel.ApplicationClass.Run(Object Macro, Object Arg1, Object Arg2, Object Arg3, Object Arg4, Object Arg5, Object Arg6, Object Arg7, Object Arg8, Object Arg9, Object Arg10, Object Arg11, Object Arg12, Object Arg13, Object Arg14, Object Arg15, Object Arg16, Object Arg17, Object Arg18, Object Arg19, Object Arg20, Object Arg21, Object Arg22, Object Arg23, Object Arg24, Object Arg25, Object Arg26, Object Arg27, Object Arg28, Object Arg29, Object Arg30) at BuildPerfRT.Program.Main(String[] args) in c:\Users\ypa\Documents\Visual Studio 2012\Projects\BuildPerfRT\BuildPerfRT\Program.cs:line 134 System.Runtime.InteropServices.COMException (0x800AC472): Exception from HRESULT: 0x800AC472 at Microsoft.Office.Interop.Excel.ApplicationClass.Run(Object Macro, Object Arg1, Object Arg2, Object Arg3, Object Arg4, Object Arg5, Object Arg6, Object Arg7, Object Arg8, Object Arg9, Object Arg10, Object Arg11, Object Arg12, Object Arg13, Object Arg14, Object Arg15, Object Arg16, Object Arg17, Object Arg18, Object Arg19, Object Arg20, Object Arg21, Object Arg22, Object Arg23, Object Arg24, Object Arg25, Object Arg26, Object Arg27, Object Arg28, Object Arg29, Object Arg30) at BuildPerfRT.Program.Main(String[] args) in c:\Users\ypa\Documents\Visual Studio 2012\Projects\BuildPerfRT\BuildPerfRT\Program.cs:line 134 
I suppose I should make it a bit more clear; I am learning C# with .NET and all the forms stuff with SQL and all that fun stuff, I don't want to come across as I'm wanting to write low level code for a job. What I mean is that I just wanted to do it...just because, haha. I understand it's not what C# is good for, I just figure if I'm going to be writing C# I could have some fun with it and see all that it can do :)
I don't mean I want to write this for a job or something, I was just wanting to do it solely for the purpose of experimentation and fun :P 
Interesting...I'll look into it! I hate SQL as well, it's the most ridiculous way of pulling data I've ever seen...thanks!
yes your test case is correct, and most of the time there are no issues. &gt;&gt;because if it is, you'll never see the first couple of TextChange values. That's what I was thinking. I'm still thinking about my best option if this is the issue. (again, 80% of the time I do not get this issue) I was under the impression each call to this function would create new instances of these objects and they would complete regardless. Am I wrong?
Soooo yeah. Here's a quicky introduction to the sort of thing you're talking about. public interface IItem { string Name {get;private set;} MonetaryValue Value {get;private set;} // In this case I'm imagining a struct with gold, silver, copper, etc values. Doesn't matter. Rarity Rarity {get;private set;} //Rarity could be an enum with values like common/uncommon/rare/epic/etc void Pickup(IActor actor); } public abstract class ItemBase : IItem { //Implement the interface string Name {get;private set;} MonetaryValue Value {get;private set;} Rarity Rarity {get;private set;} public virtual void Pickup(IActor actor) { actor.Inventory.Add(this); } } public class BigRock : ItemBase { public BigRock() { Name = "A Large Rock"; Value = new MonetaryValue(0,0,0); Rarity = Rarity.Common; } public override void Pickup(IActor actor) { if(actor.Stats.Strength &lt; 25){ //Too heavy! } else { actor.Inventory.Add(this); } } } So the interface provides a contract of what will be available to call regardless of other factors of implementation. If something is an IItem, it implements these things in some manner. The base class adds a basic implementation of one of our functions. It's marked virtual, so it can be overridden in a derived class. Which we do with our rock, as we want to make sure whoever is attempting to pick it up actually has the strength to do so. An inventory for a character could be a List&lt;IItem&gt;. 
All the data in the database is public to the user and there is no user input. The only thing the user could do is change some things to the database, but that does not matter as the database is stored on the computer, and available to the user anyway.
See [this ](http://stackoverflow.com/questions/158706/how-to-properly-clean-up-excel-interop-objects) on proper garbage collection and com releasing I found the second answer to be most helpful. You might want to keep an eye on the task manager when running your application. If you don't handle things correctly you will start to see excel processes building. (Also here is an extensive guide that I found to be very useful in excel automation.)[http://www.xtremevbtalk.com/tutors-corner/160433-automating-office-programs-vb-net-com-interop.html]
This submission is not related to the C# language and as such has been removed. Perhaps try posting in another subreddit that this would be more relevant in, such as /r/webdev or /r/dotnet. If you feel that this action is unwarranted, feel free to contact the /r/csharp moderators.
Oh I know, pretty much everyone in my programming classes wants everything to be an inherited class of an interface with x y and z and I'm sitting there like "Dude....it's an employee class....this is the hello world of OOP.....just stop..." and you're fine, I didn't take it that way haha
Yeah, but it can be fun, if you are into that thing. Think about it, people used to program *asm* into *QBasic* programs for high speed graphics. I, myself, am interested in coding in pure CIL.
Thanks for your reply! This solved the issue, I don't entirely understand why it works but this is what I was trying to do all along. 
Makes sense. I would add that C# is more than Forms + SQL business apps. There's interesting things going on without having to delve into low level.
Nice! and a really well-thought-through UI. How are you going to get this out to people that need it?
You probably aren't going to get many journalists on this sub, but it looks like the post on /r/programming has got a shit ton of attention (number 4 on /r/all at the moment!) so I wouldn't be at all surprised if someone gets in touch from that at some point. On an actual coding related note, I'm a big proponent of Rx so it's great to see it being used in cool ways like this :) EDIT. I stand corrected, you're not just number 4. The number 2 link on /r/all is also for your software from a /r/bestof post! 
Thanks for this, all of these extra tidbits are helping me to understand more. 
Just a quick google search, it's possible that the RPC calls used by the Excel wrapper is communicating 'too fast' to to the Excel process. See this [article discussing it](https://social.msdn.microsoft.com/Forums/vstudio/en-US/c11ffffd-0385-40f7-b32f-77077de87617/exception?forum=vsto). And see this guys [blogpost for how to implement IMessagFilter](http://blogs.msdn.com/b/andreww/archive/2008/11/19/implementing-imessagefilter-in-an-office-add-in.aspx). It's possible Excel is throwing up a "Do you want to save?" UI dialog that blocks the thread, resulting in the RPC timeout. This could be why it's 'random' at times. Good Luck, let us know if you don't figure out it, i'll read the articles more thoroughly and see what I can discover. I haven't doing Excel automation since OLE automation.
How low-level do you want to go? How about an entire OS (everything above the bootloader) - kernel, drivers, OS, MM, scheduler, etc. - written in C# and/or Sing# (a slightly modified version of C# designed to handle low-level memory management, synchronization, etc.) http://singularity.codeplex.com/ Note: Singularity is the basis of "Midori" - a research project that ran at Microsoft for many years until ~12 months ago.
&gt; I was under the impression each call to this function would create new instances of these objects and they would complete regardless Not a WPF/XAML detail guy. Or at least, I've never used Animation/Storyboard. But the way this is set up, your going to fire off 6 animations in about 1ms ( they return immediately while the animation continues async, at least, as far I can tell from the docs). Your code in TextChange needs to be smart enough to know the last animation isn't finished, and to chain the next animation request to the last completed event. I'm sure someone has done this before, don't reinvent the wheel here. If I had to hack something up, I'd ahve the TextChange method push "AnimationRequest" to a stack ( UITextBlock, String pair's). Each Completed event would look for another Animation in the stack, and if it exists, setup the storyboard animation for the next one. Until none remain. Also, you need to check to make sure there's no currently running animations. I'd definitely look for example code, I can think of ways where the Async/threading is going to bite you in the ass, and you'll stall/miss animations. I just googled "[storyboard c# chained animations](https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=storyboard%20c%23%20chained%20animations)" and found a few hints. I'm surprised this isn't a function of the Storyboard itself. Maybe someone made an extension to make it simpler. Good luck/ EDIT: I re-read your question above, and as far as I'm concerned the Console.WriteLine should never have been missed. But I might be missing some nuance of threads in XAML forms. Maybe an error occurs inside the lambada statement and it's not being trapped. But I'm not sure. Feels UI thread vs other Thread kind of issues.
/u/grinchpaws is right. C# is very different beast from c++. You would probably be better off learning c# and it's idioms than trying to write c++ in c#. Learn things like how Idisposable/using work, how the compare and contrast to destructors. How everything is a reference (many that make the migration don't get this). How auto boxing works, etc. 
Thanks for all the thoughts. The problem is that the instance of the function will need to track the control in use as well, if I wait for it to run again. I'm glad you too see the issue with the fact the function was called with "Change 1" but not "Change 2" for the "Films" ... this is what causes me the confusion. I'll look at the chained animations and see where that leads. 
Hi, no worries I consider C# subreddit to be more like a .NET subreddit as it is the biggest and I try to post what is the most related to the .NET dev (also the link is not mine but just found it interesting).
[removed]
I came back to your post/video like 5 times, i love this project. Looks looks like well made software, and for an excellent cause. Tons of respect bro.
Extension methods are pretty cool. They're great when you want to extend a class that's sealed.
I actually rather enjoy SQL. Maybe that is why I didn't do well with the query comprehension syntax.
Lol, I actually avoided linq for a long time because I just couldn't do it. I had the language diagram printed and hanging above my monitor. The functions to me are much easier to read, and now I love linq.
My god! Replacing EF with Dapper. Best decision ever. I mean, I always felt EF was slow, but I was unsure about alternatives; until now. Thanks!
For everything that refers to prompting and receiving input, that's as simple as: Console.WriteLine("Enter your information here" ); string userinput = Console.ReadLine(); Or something like that. Didn't really read everything else, but it seems like you're just missing a few method calls. I've been drinking. That's all the help I can give right now.
StructureMap. The original, and still the best IMHO. 
You've done a great thing by helping out those in need, so thank you again! I s wondering have you looked at the coffee that was recently released for Hawkins computer?
I think you're talking about ACAT. It's here and it's very nice; https://01.org/acat
There is no go-to library in this category. Personally I just use a `NotNullAttribute` on all my parameters and do pre-condition checks for all parameters.
I'm saddened that his instructor was baffled by such a simple problem.
I doubt there is any 100% compile-time safe option type simply because all references can be null and value types can't enforce a default constructor.
Eventually project becomes bigger. You want to have reusable classes, services that may depend on some other objects. You pass these dependencies by constructor arguments, because every time you instantiate object, inside some class, by "new class()", you can't easily replace this object in unit tests. You can still instantiate objects manually, but something like: var object = new SomeClass(new DependencyOne(), new DependencyTwo(new DependencyThree())); Quickly becomes tedious. Simple injector and other DI containers offer also batch/automatic registration, so you don't even need to manually register every new class. Once you have to maintain at least medium size project, you start to appreciate IoC, factories and unit/integration tests.
[Microsoft Viritual Academy](https://www.microsoftvirtualacademy.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-8295) could be worth checking out aswell.
I agree; but I'm trying to reduce the number of programmer errors by at least giving people the option (pun intended?) of using an Optional type, a-la Java 1.8, so that our internal APIs can be more self-documenting. 
I hadn't heard of this - it looks nice, but C#6 specific and we're not there yet :-( 
The last real [commit](https://github.com/unitycontainer/unity/commits/master) was almost 1.5 years ago. So from a contribution standpoint it's pretty safe to say that it's dead. MS officially handed unity over to the community so you can't expect support from them at this point. That being said, it's pretty feature complete. So that's not really a problem. We use it aswell, I briefly looked into Ninject and Unity before opting for Unity because it looked simpler. Lastly, it doesn't really matter what you pick. You should not depend on Resolve in the code at all, so any IoC container is easily swappable for the next.
To be honest, I'm using WinForms because the software I am writing has to do with some sort of accountancy and the customers will be using it also on older computers. The interface itself is pretty simple, what matters is the database and mathematical operations behind it. What I understand from your reply is that what I am looking for is unachievable using WinForms?
That's what I'm doing for now, but I am looking for something to do it automatically. For example to be able to define a line in the code beyond which it can't insert stubs.
I could be way off here, but in the Stop Recording section you are recreating the WaveFileWriter. It seems to me that this would wipe out everything that was in the buffer from the DataAvailable event. I haven't downloaded NAudio to look at the docs, but the usual sequence of events with streams is: Create stream ==&gt; write to stream ==&gt; flush/close/dispose of stream. This would mean creating the waveWriter before wiring up the eventHandler (I'd also wire the event handler before calling .StartRecording or you may lose some amount of the recording), Then calling flush / save / dispose after .StopRecording (as you are now, but double check to make sure that the call to Dispose actually flushes and writes the file). 
Will check this out, thank you.
What wrong with using chkBox.location? it should contain the x, y values of the checkbox at all times
Design patterns are pretty usefull as well there was a webpage and a book on that.... http://www.dofactory.com/net/design-patterns can't find that good book but this should help you figure out uses for OO in c# it did for me anyways
Code structure matters.
And Visual Studio has lots of tools for navigating that structure regardless of where in a particular file a method lives.
 &gt;the customers will be using it also on older computers I think you're missing the point of the .net framework
You can use ReSharper and press Ctrl+E,C to re-format your code. Just make sure to change the File Layout and Code Style settings to match your needs.
Not the point. By that logic you shouldn't care where any of your code is. Fields, properties, methods, just mix it.
As an alternative if you don't find anything, there are a lot of articles about implementing the Maybe monad in c#.
Is this for web services, how is it used?
Is this for real? Should I be using this? (proficient at WPF)
You can use CodeMaid Spade to reorganize functions in the file. Very slow working for me, though.
It would be fine to just get the current location, not so great in terms of changing it. EDIT: No, wait, it works. Just had to use chkBox.Location.X and Y and it worked.
What's your data context set to?
If you need to support Windows 7, then no.
&gt; customers will be using it also on older computers And this is relevant why?
Hello, please contact me. I have a job that I would like to talk to you about for our company.
Ask yourself what you're trying to achieve by fighting with the tools you're using. Why are you separating out your self-written methods from the stubs that VS created for you? What do you gain from this? The stub is just that, a stub, a starting point. By the time it's finished, it's a method like any other. If you're looking for structure, you're better off organising your code in a different way anyway - alphabetically being a good start. Others have mentioned, there are tools that can do this for you, but they're not going to be able to tell tool-generated code from your code because it's all just code. A method is a method, whether you wrote it entirely by yourself or some tool gave you a stub to start off. Ultimately, there's no difference. I'm not an iOS developer, but I get the feeling that you're trying to apply principles and techniques you've learned from that experience to a completely different platform. Do not do this, you'll only ever give yourself more work to do, you're going against the grain and it's no wonder you're frustrated. Yes, a lot of the principles you've learned do still apply, but sometimes things are just different for reasons that will be clearer the more you use the tools. However, all that being said, this highlights a larger issue with your code (And a very common one when using winforms) - your business logic is coupled tightly with your UI. You should not be doing any kind of business logic within UI callbacks. That "OnClick" event you've got shouldn't be touching your data, it should be raising an event or calling a service that does. I'm willing to bet that your "self-written methods" probably belong in that service, in another class entirely (or possibly several other classes), away from your UI. 
Take this with a grain of salt, because I'm still relatively new to WPF, I'm making a few assumptions, and I'm not familiar with the controls you're using. 1) Your error message doesn't quite fit the XAML that you've provided. Error message says `Content.Title` where as the XAML says `Content.SubTitle`. 2) It's trying to find a `Content` property on the MenuFlyOutPresenter, and it's not finding one. (It might be a `Text` property?) **This is the main problem in the error message.** 3) It's also going to make an assumption that whatever the `Content` type of is that it also has a `SubTitle` property on it. 
It sounds like to me that you're adding code the to the Designer file rather than the actual code behind. I highly recommend not modifying the Designer. It's black magic.
I use BootCamp. I love Apple hardware, and their customer service. (*Try* to tell me that I could buy a Dell or Lenovo machine and take it to the nearest Dell or Lenovo store and get a replacement today. Spoiler alert, I'd have to ship it off to some repair facility.) I just have like 100GB reserved for OS X for security updates and what not, but I work primarily in Windows. 
&gt; He is talking about designer generated code. We're dangerously close to arguing semantics here, but the designer specific code is already separated into a partial class. You're right, the event handler is not, this is the code he's specifically referring to, however I wouldn't class this as designer generated code. It's a method stubb, yes created by the designer, but it's still a method that you have to write yourself. Tomayto, tomato, maybe and I agree, there's probably a call for keeping the event handlers together but that leads me onto my other point, what are these "Self-written" methods? They almost certainly belong in a different class, as part of a service or something. Either way, I don't think there's anything to be gained from fighting with the designer. On a personal note, I hate the designer and I've learned the hard way that trying to fight it is just not worth it. On a tangentially related note, it's even worse when using C++/CLI, there are no partial classes so the designer just regularly and mercilessly ruins your class on you. 
Ok, got it. Is a good scenario writing some custom tool to check it? As I dont use Web API nor ReSharper.
You could always add a reference to Microsoft.FSharp.Core and use the Option&lt;T&gt; type from it. It is heavily used by the F# language, although C# right now is missing the pattern matching which makes it awesome
Maybe&lt;T&gt; seems to work well for my company.
In short, the item you are bound to does not have a property named "Content". Looks like the item you are bound too is a Textblock. This is the hardest part of WPF; following where databinds go so that you can properly get the correct item. I would start looking higher up the tree to get the item you want.
&gt; remotely map a network drive for a user on their computer without remoting in or similar tasks. If their computers are in a Windows domain, you can use Group Policy to setup common network mapped drives.
nicely done 
There are 2 extra bytes that don't look like they should be in the fmt section in the header. Try this file: http://www.mediafire.com/listen/3gi8x2k3wb6s81z/Mario_NAudio.wav If this works then it's those two bytes that are the problem. Maybe the program you're trying to load the wav file in doesn't know how to handle unexpected data or something along those lines.
Code like this is why I hate vars in source code. Grumpy old programmer belly aching aside I'll give you my best guess (and it's a guess since I've never worked with any of this stuff) is that CryptographicBuffer.EncodeToHexString is consuming your result buffer and then when you try to run CryptographicBuffer.ConvertBinaryToString on the same resultBuffer it tries to pick up where EncodeToHexString left off (which is to say a buffer with no data in it).
Sorry left the EncodeToHex there by accident while testing. That line does nothing to end result.
This is why I tend to keep my methods at the top instead.
Thank you! In school we went through the person example, where the class is a Person, and have variables and properties. I understand that, I am just bad at breaking stuff down, my instinct is to just create stuff in one place. I will look into flowcharts. Thanks again!
Figuring out what and how to take pieces apart and put them together and make them work together is the hard part of programming. There's no real way to teach that kind of thinking, it just takes practice. You can always look at other peoples' code and see how they do it, this can help you figure out how parts can be separated. Also, learning the .NET API will also give you an idea how parts can go together because the .NET API is written mostly in, well, .NET. There's been many times when I've deleted 500 lines of code and restarted because I figured out better ways to do something halfway through working on it. Don't be attached to your own creations, don't be afraid to trash it if you're sure you can do it better if you start over.
Like sacroiliac said the exception doesn't match XAML you posted because one says Title and the other says SubTitle. But that is besides the point because the issue is MenuFlyoutPresenter doesn't have a Content property. Here is a [link](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.menuflyoutpresenter) to Microsoft's class definition of the MenuFlyoutPresenter. It says at near the bottom that you don't reference it directly, you should instead create a style with MenuFlyoutPresenter as the TargetType and change what you want that way. The other issue I see is that MenuFlyoutPresenter is derived from ItemsControl. So what this code is (trying) to do is similar to replacing the control template of a ListBox. It doesn't really make sense. If you let me know what you are trying to accomplish I could guide you in the right direction or tell you how I would do it. 4 years WPF/C# experience edit: Where did you find this example?
Content properties are usually Object (I haven't seen one that isn't). The "target property is 'Text' (type 'String')" is referring to the Text property on the TextBlock where the Binding is. Good catch on the exception not matching the XAML. I didn't notice that until you pointed it out. 
Take a look at XML documentation and #regions.
No worries, phones can be a little frustrating to format correctly on anyways, just thought I would mention it.
Since we're doing c#, use int.TryParse
Doesn't test your c# or OOP knowledge
Where can we get this? 
That's not WPF, looking at the class names and namespaces it's Windows Store (UWP?) XAML. Please learn how to differentiate between the different flavours of XAML before asking these kind of questions, and also I hope you learned that copy-pasting code isn't always straightforward.
Please note that this is not WPF but Windows Store apps XAML - less flexible and with some new features.
Why is that a dumb metaphor? I think it was a fantastic explanation.
Have you read the .NET Framework Design Guidelines? If not, get yourself a copy. This is literally the book Microsoft uses internally for teaching their own teams how to design classes the .NET way.
Solved it. Here is the working code. Seems that the problem was just me... public void Decrypt_test() { var encrypted_data = "&lt;crypted_data_here&gt;" var bytes = Crypt.DecodeBytesFromBase64String(encrypted_data); byte[] iv = new byte[16]; Array.Copy(bytes, 0, iv, 0, iv.Length); byte[] message = new byte[bytes.Length - 16]; Array.Copy(bytes, 16, message, 0, message.Length); var data = Crypt.Decrypt("&lt;secret_key_here&gt;", message,iv); Assert.Inconclusive(); } public static string Decrypt(string key, byte[] value, byte[] iv) { IBuffer val = CryptographicBuffer.CreateFromByteArray(value); SymmetricKeyAlgorithmProvider aesCbcPkcs7 = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.AesCbcPkcs7); IBuffer keymaterial = CryptographicBuffer.ConvertStringToBinary(key, BinaryStringEncoding.Utf8); CryptographicKey k = aesCbcPkcs7.CreateSymmetricKey(keymaterial); IBuffer _iv = CryptographicBuffer.CreateFromByteArray(iv); IBuffer buff = CryptographicEngine.Decrypt(k, val, _iv); return CryptographicBuffer.ConvertBinaryToString(BinaryStringEncoding.Utf8, buff); }
Given that you'll often need to reuse a string like this, perhaps for logging as well as output, it's generally a good idea to create a standalone string value and then pass that into your Console.WriteLine, like this: string formattedTax = string.Format("{0:C}", federalTax); string taxString = string.Format("You will pay {0} in federal taxes", formattedTax); Console.WriteLine(taxString); However if you're looking for a shorter version, then I'd write it like this: Console.WriteLine("You will be charged {0} in federal taxes", string.Format("{0:C}", federalTax)); As others have said, the {0:C} bit is a formatted placeholder that's expecting a value of a certain type, in this case a number, moreover a number that represents a monetary value. You're basically saying the token at position 0 can be parsed as currency and that means adding a currency symbol in front of it, putting in the decimal point and any comma separators (depending on the culture). Passing in anything other than a value that can be directly converted to currency (i.e. just the number, not the number and some trailing string), means it will just be displayed as an unformatted string.
I may be lost in words, but what I am trying to find out, is how i can keep the event handlers grouped together without spending money on addons or any kind of formatting software. 
Other suggestions have already been made, but your options are probably this: Split your class into partials (There's already a .designer.cs partial class, you could leave MyClass.cs to have the event handlers as this is where the designer will put them and put your own methods into myclass.methods.cs or something). Move your code into a separate class so the form classes ONLY contain callbacks. Use a free addon like codemaid.
Too bad it isn't part of the framework. I would use that all over the place... Actually, is it in a lightweight Nuget Package? I just might anyways even though I don't personally use Resharper.
I know right? I've been using C# professionally for about 5 years now and consistently come across something that makes me go "oh, that's a cool tool. How did I miss this? I'll keep it in mind".
There's no lightweight NuGet package, but it's very easy to add to your project. Just create a C# file and add this code: [AttributeUsage( AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.Delegate | AttributeTargets.Field)] internal sealed class NotNullAttribute : Attribute { } It's just that. Nothing more. There is no logic behind it.
If you set it up in ReSharper, yes. You can define in the options in what namespaces to look for the special attributes (there are many). Microsoft is using it also in their ASP.NET 5 projects. https://github.com/aspnet/Common/blob/d0c4bd057c1ae17f2d0115d73b64cbc29a69a946/src/Microsoft.Framework.NotNullAttribute.Sources/NotNullAttribute.cs
I work with a solution that has close to double (by file count) that code base across a ton of projects. It compiles and runs fairly fast, even on old machines. Maybe at most 30s? I believe the compiler will only recompile the code affected be the change, but I could be wrong. Even a full rebuild is really quick.
One file per package? That's weird.
They're adding this file as source. Basically as you add it "as link" for each project - that's also why it's internal.
It will recompile the project in which code changed. And all projects that depend on this project.
It should work the same way, even if it's the root element. Have you tried it? I've only extended User Control with this method.
Maybe I'll try again - it wasn't seeming to work when I tried it that way before, but it's possible I had a typo somewhere or something else was causing the problem.
hate to rain on your parade, but the bigrational library can already handle theoretically limitless precision fractions with no data loss.
Yes. If the attribute doesn't guarantee that the value is non null, then by definition it is useless
Yeah simply fill in what you think each method should do.
Yes. If you get neither proper static checking nor runtime checking w/ exceptions thrown, what's the point?
We use them for resharper but with fody you can enforce it. Not sure about the second part being a good idea 
Cool stuff dude! You should look into automated unit testing so that you don't have to run and manually validate UniversalUnitConverterTesting. Rather than having all those TryParse calls, you'd have something like: AssertEquals(expected, actual). If you accidentally broke subtraction but not addition, for example, then only your subtraction test would fail and you'd know immediately.
How much of it have you done so far? Where are you stuck? Post some work and we can go from there.
There is tooling support which can take advantage of this attribute. It's also simply documentation, telling the reader that this parameter should not be null. This are two points already. It's not useless. It could be better, sure, but it's definitely not useless.
There is tooling support which can take advantage of this attribute. It's also simply documentation, telling the reader that this parameter should not be null.
I never said anything versus contracts. I do not use code contracts. Last time it checked it made the compilation go very slow. Also, when you used code contracts, it means your project would not run anymore if code contracts are not installed. I stay away from additionally tools that can't be added using NuGet. I want a "check-out and run" experience for my projects, which does not work with Code Contracts.
It is not possible to add extension properties. But you can always add an extension method which returns the desired object such as: Vector3.GetHalf()
Your code will run if contracts are not installed. You cannot compile if it is not, however. I use it in some internal NuGet packages that others in my company consume, and there are no issues. You could also easily add a task to your build that checks for ccrewrite and opens up the page to download it if not. It does add some amount of compilation time, but it is still pretty damn fast, and the static analysis part happens in the background on local. Your view is a legitimate one though - I just think the downsides you've mentioned are outweighed by the features.
I want this! :p
What are you referring to as "fody"?
Sounds like a nice idea, i'd love to see what others are working on!
`Zero` is a public static instance of `Vector3`. You can't add something like that. There's nothing stopping you from creating your own container, though: public static class Constants { public static Vector3 Half {get;} = new Vector3(.5f,.5f,.5f); } 
Yea, I'd be interested in what other people are doing. Might discover some awesome side projects to make use of :)
They just work for me. Only issue I ever had was on a project with git submodules in it. The submodule projects had the packages and .nuget directory in sub directories, so they weren't initially found. I had to copy over the packages up to the directory where the solution was located. 
Quit playing MapleStory and GO for 1 hour and do your damn homework. Or were you [banned](http://www.vacbanned.com/index.php/view/detail/id/76561198140174334)....
I used to have issues like that, but over time I grow to understand why some things happened - and it made sense. Then I started making Nuget packages myself and I was amazed how powerful the system was. 
&gt;It seems to break on a whim and takes me days to correct once it happens. Can you explain how you manage to break it so bad it takes you days to fix it? What exactly happens and how? Or - do you just mean you have a project with 30 nuget packages you havent updated in a year and do "Update all"?
Remember the classes are the word's you're going to use to tell your story which is the program or system you are building. A good way to start designing your classes is to use pseudocode/story mode to describe what you need to do. Grab all the nouns out of those paragraphs, those are likely classes. Grab the verbs, those are your methods. Think about someone reading your code for the first time, the classes and methods should really tell the story without them having to read the implementation, or even know what problem you are attempting to solve. Some of us that have been doing this for 30 years still have difficulty when starting with a blank page and a problem. And that doesn't even consider how much time I spend fighting with myself over what to name some classes. 
Before someone can recommend texts to you, it might help to know your current programming languages and skill levels in each.
In general I have found that using nuget on the solution level will fuck your shit up 99% of the time. Use it per-project and things go much smoother, but of course it's a PITA, especially if you have many projects. My biggest gripe with nuget is the client, it was garbage in 2013 but now it's honestly the very worst piece of software I have installed on my computer. I don't understand how they could make something so bad even worse.
Currently I am using ASP.NET MVC 4.5. So basically C#, JavaScript, HTML5, CSS. I guess I am on a medium level. But I am rather looking for books teaching project management regarding web development or software development in general (e.g. SCRUM or prototyping).
Because it always needs to calculate this
What OS are you going to run this on? I have a starting simple version ready
Well anything to get this sub going would be good.
Since you're using C#, I'd suggest using [MonoGame](http://www.monogame.net/).
Yes! :)
Check out MVVM. It can be confusing at first but very powerful, especially when it comes to unit testing.
You may be looking for `Lazy&lt;T&gt;`. Also, `Dictionary&lt;T1, T2&gt;` is the newer, generic version of the old untyped `Hashtable`.
Resist the urge to use a "code-behind" methodology. Can WPF do it? Sure, but that's not really how it was designed to work, and it will eventually be more trouble than its worth. Embrace the MVVM pattern. Try to do as much in mark-up as possible, and get used to data binding syntax. Its a bit of a shift in thinking from WinForms, but it will work out better in the end.
You can pass a callback to the constructor of the Lazy object. The first time `lazy.Value` is accessed this method is executed and the result is stored. All subsequent calls to `lazy.Value` will return this value - your method is just executed once.
Try this one. https://pragprog.com/book/jtrap/the-agile-samurai Most of the other books sold there have pretty high value - AFAIK, none of them are those 1200-page monsters with weak content.
Everything is different yet familiar! Don't be afraid! Let the viewmodel embrace you in its warmth! MVVM is neat. 
Only problems I ever had are back when I was managing frontend (js/css) dependencies with Nuget, which it clearly isn't any good at. Switching to bower cleared that right up. I've never had any problems managing .NET libraries with it.
Forget everything you know about WinForms. Don't try to write WinForms-like code in WPF.
Know that the following things exist and their purposes: models, views, controllers, view-models, mvc, mvvm, mvvmc, commands, data bindings, code-behind, user controls, static/dynamic resources and you're pretty good to go.
If tick's a float, then you'll probably want to unsubscribe from the event or have a boolean that indicates whether you've passed 80. If it's an integer that only increments sequentially, then you can do ==80. Edit: I'd recommend the unsubscribe, btw. Otherwise you're probably just leaking event handlers. It would look something like public class ClassName { public event EventHandler onEvent; public ClassName() { onEvent += Handler; } public void Handler(object sender, EventArgs e) { if (e.Ticks &lt; 80) return; onEvent -= Handler; Logic(); } }
 private bool messageDisplayed = false; private void timer1_Tick(object sender, EventArgs e) //10 milisecond intervals { string pos = axVLCPlugin21.input.Position.ToString(); float pos1 = float.Parse(pos); float a = pos1 * 100; label1.Text = a.ToString() + "% completed"; if (!messageDisplayed &amp;&amp; a &gt; 80) { MessageBox.Show("80 has been passed"); messageDisplayed = true; } } Also I a have just had a quick search and seen that `axVLCPlugin21.input.Position` appears to be a `double` so there's no need at all to convert to a string, then to a float. In fact the entire method can be condensed to: private bool messageDisplayed = false; private void timer1_Tick(object sender, EventArgs e) //10 milisecond intervals { var position = axVLCPlugin21.input.Position; label1.Text = string.Format("{0}% completed", positon * 100) if (!messageDisplayed &amp;&amp; position &gt; 0.8) { MessageBox.Show("80 has been passed"); messageDisplayed = true; } }
For #1, == or Equals are the same for enums. I prefer == because I think of enums as numbers. \#2 is probably faster considering you're doing one string comparison compared to what is probably a lookup of some sorts. It's a microoptimization to care about it, though. I'd go with whatever looks cleaner. Perhaps a utility class that parses skills and throws on failure, so you can simply write var skill = Utility.ParseSkillName(string); if (skill == ...)
I was looking for some ideas on how to do it.
I find the lack of proper semantic versioning usage to be really really frustrating. If I'm on package 3.1.0 and NLog bumps to 3.2.0, that shouldn't break stuff according to semver. I shouldn't need to configure binding redirects and my application really shouldn't complain about finding the wrong version of NLog if it expects 3.1.0 and finds 3.2.0. Once again, minor bumps indicate **backward compatible** changes. 
Well, I usually play when I have 0 homework or tests to study for... and thats my smurf I hacked on with my friend who convinced me to hack with him for a bit. It was worth the time.
Ok thanks. I realize that for my app it probably won't make a lot of difference. I'm just using enums seriously for the first time here, and I wondered about their efficiency in this kind of case, since the underlying type is integral. I've always heard that comparing strings is relatively slow, but this example includes an extra function call and if statement anyways.
The point is you shouldn't need to do this. If I have packages A, B, and C installed and things break, reinstalling B shouldn't fix things because at the end of the day, I still have A, B, and C installed - I have literally changed nothing. It shouldn't matter what order you install packages in either - If I install A, C, then B, that should have the same results than if I install C, B, then A.
Unless performance becomes an issue you really shouldn't be worried about the overhead of a string comparison or an if statement :P By the way, why are you passing the skill's name as a string to your method? You could consider getting the skill enum value at your input method instead, which would make the rest of your code much cleaner.
Get into contact with a MND/ALS advocacy/charity group. They should be able to help.
Where do you enter in your answer? I remember being able to do it in the past. Do you have to be logged in now?
what i usually do. once its fired once it will disable itself from firing again. bool fired = false; private void timer1_Tick(object sender, EventArgs e) //10 milisecond intervals { string pos = axVLCPlugin21.input.Position.ToString(); float pos1 = float.Parse(pos); float a = pos1 * 100; label1.Text = a.ToString() + "% completed"; if (a &gt; 80 &amp;&amp; !fired) { MessageBox.Show("80 has been passed"); fired = true; } } 
 The method is significantly more complicated than these code snippets, and the skill name is not actually even passed to it. Originally I made use of generics for ISkill (like ISkill&lt;TEnum&gt;), so that ISkill could define a Name property (as the name would have to be of the correct enum; there are 4 different enums which could be valid). But I already have that same generic implemented for the base Stat&lt;TEnum&gt; class. Every class which implements ISkill also inherits from Stat, so it seemed redundant to also make a generic for ISkill. Consequently, ISkill no longer has a Name property. Alternatively, I could cast to the base class, which allows me to avoid using strings. Or, I could combine the 4 enums I mentioned previously into 1 enum, but this will likely make for much bigger problems down the road and I'd really rather avoid doing that.
It's also useful to note that Lazy is thread safe.
The second you get admin privileges on any computer you can do pretty much anything.
Yeah, the performance argument doesn't really stand. It's pretty undebatable that littering your code with tons of Vec3.One * 0.5fs (e.g. for centering objects on points) doesn't read well, though.
If it is possible to rewind the video and reach the 80% mark for the second time, none of the other solutions will work. Instead, you want to check both current and previous values to know that you passed the 80% line and not that you are after 80%. float previous_val = 0; private void timer1_Tick(object sender, EventArgs e) //10 milisecond intervals { string pos = axVLCPlugin21.input.Position.ToString(); float pos1 = float.Parse(pos); float a = pos1 * 100; label1.Text = a.ToString() + "% completed"; if (previous_val &lt; 80 &amp;&amp; a &gt;= 80) { MessageBox.Show("80 has been passed"); } previous_val = a; }
Developing what exactly? Games, AntiVirus type of stuff, things like Skype/Mumble/Discord/TeamSpeak? Also, &gt; Do you think my skills would be sufficient enough to get a proper job as a developer after this amount of time if I stick to my plan of 2-3 hours per day? Yes. But in order to get a good company job, you should aim to get **noticed** from online things. 
So you used your real nick on your smurf account, but never on your real account? makes sense. And we were kids once dont try that story about only playing games when you have zero homework or tests!
Don't fall into the trap of thinking you know a lot. This is the downfall of people everywhere in all kinds of fields, and I suspect it's even more of a problem in programming. The more you learn, the more you'll realise you know less than you think. Knowing how a 'for loop' is implemented is easy. Syntax is easy. But knowing what to do in a given situation is not something you can pick up from browsing a book casually. I've been programming for about 3 years (though I did some BASIC as a kid), and I don't feel I'm anywhere near a good or knowledgeable programmer even though I can write apps and games that work well. That said, comparing my current code to code I wrote 2 years ago shows that I have come a long way...but the road is infinite. I think that your progress will come from completing projects and learning the language more deeply. Any concept in programming is relatively simple in isolation, but actually implementing it will require a fuller understanding. Just build stuff. Start simple and build on what you know. The fact that you expect this to take years (rather than, say, a few weeks) is a good sign.
with no comments or documentation and default numbered control names that dont tell us anything about the functionality involved with it?
Firebird (and this ADO.NET provider) are an excellent choice when you need a full-fledged embeddable database. The nice thing is, that you can also switch to a DB server when multiple clients need to access the same DB.
You can use MySQL with .Net without a problem. Most ORMs can work with MySQL and MS SQL without a problem. So i don't understand what you're trying to say with that.
Amen. I didn't really understand MVVM after first reading about it so I just went with the code behind approach, wish I hadn't. After doing a ton of Knockout I finally understand MVVM and can so how much simpler my WPF code could've been
http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner
&gt;I am just wondering realistically how long on average does it take from starting to code to be able to become skilled enough for a developer job? Not junior or senior, just a normal developer. I might be misreading this, but you don't just go to an intermediate level developer job as your first job. You *will* be starting off as a junior, and you *will* need the help that junior positions come with (you'll be sitting near a senior dev(s) and nagging them for help incessantly, but that's a good thing). It's a huge change going from working on your own solo pet projects to working in a team with a huge code base, version control, project management, software development life cycles, and tons of coding design patterns you've likely only heard of at best, and many more you didn't even know existed. How long you stay a junior professional developer is going to depend on you as well as the place you work, but it's in the order of a couple of years. You'll be infinitely more experienced a year in than you were on day 1, but never underestimate how much there is to learn. You'll still be a junior, just a junior that can actually pull your weight around.
Stop the timer if (a &gt; 80) { MessageBox.Show("80 has been passed"); ((Timer)(sender)).Stop(); }
The only issue I've ever had is with CefSharp package. You need to set the project to something other than AnyCpu for it to work. Apart from that, and this one time I tried to install Bootstrap, nuget always works for me.
Add pow and this will be a real contender.
This. Compatibility is irrelevant if you can't bind to the assembly at runtime. This really isn't Nuget's fault, it goes hand in hand with nested assembly dependencies. Nuget at least helps ease the pain by adding the binding redirects for you, if you use the VS tooling.
Ah yes. I could tell by the sarcasm font. ... Oh. I forgot to use the sarcasm font there, sorry.
This is useless, the only thing of interest would be the ps3api class.