Have you tried fixing that error?
Yeah we always need to check the 'OS platform' and play with they rules and resources, but the output of a c# is a .exe, that's the reason I had this doubts if run on linux...
That is not an error it's a warning and it is there because you never use the message variable you only assign to it. Put Console.WriteLine(message); on the line before your ReadLine() and the warning will go away.
It's saying that you've assigned the variable a value, but that you never use that value for anything, so there's no point in it existing. Do something with it, like printing it to the screen, and it should go away.
I never tried Cordova or PhoneGap, just Kivy(hard to deploy for Android @python3) and long waiting for the best approach to native widgets with Toga @Beeware but not ready yet, a few millions tests need to be writen and pass before the version 1.0 For now I can run a Flask App @termux, but would be nice to access the native features and so on And Ionic, any experience? I'll look at your suggestions!
Depends on your use case. But I have a feeling most of it revolves around the changes for .net core. Oh, and hopefully fixing issues with typescript
This worked, thank you
You have to install flatpak with your distros package manager and then run command you posted. I had some issues with it especially monodevelop not being able to debug. I settled with Visual Code for now and I find it great for my usage. Just install c# plugin and you are good to go.
Summary: it's not Foreach that's slow, it's Array.Foreach PS: If Knuth was dead he'd be rolling around in his grave
I suggest you don't pay much mind to benchmarks like these, unless you actually run into a speed issue and need to optimize it. It's like when people want to tell you Exceptions are slow, don't use them (they're wrong and outdated) or the fastest way to check if data is a number. Just stop having these discussions, worry about micro-optimizations when you actually have a speed problem, let hardware and compiler improvements fix your small problems and focus on your big ones.
Even compiling C# on Linux will output exe and dlls but with mono and dotnet core being available they will be runnable. Not everything from .net platform is supported though but for starters it should be enough. Edit: xamarin is I think.
I do not. But this is the line that the error is calling out! &lt;authentication mode="Forms" /&gt; 
It's going to be hard to help you fix this, with mere snippets of code. See if you can't publish the project to GitHub.
Will do! Give me a few moments. 
Leave a comment in this thread to participate.
The [.NET blog](https://blogs.msdn.microsoft.com/dotnet/) does talk about it a bit in [this blog post](https://blogs.msdn.microsoft.com/dotnet/2017/02/07/announcing-net-core-tools-updates-in-vs-2017-rc/). Anyway, here's the same command using the preview 2, RC3, and RC4 versions of .NET Core to create a C# .NET Core 1.1 ASP.NET MVC project with no authentication. * preview2 (requires .NET Core 1.1 preview2 tooling) `dotnet new -t Web` * RC3 (requires .NET Core 1.1 preview2 tooling and 1.0.3 RC3 tooling) `dotnet new -t Web1.1` * RC4 (requires .NET Core 1.1 preview2 tooling and 1.0.3 RC4 tooling) `dotnet new mvc --framework netcoreapp1.1` I admit, RC3's method of having the 1.1 as part of the project type was weird, but it was a compromise for being able to use one tool to create projects for either version. The `dotnet` command seems to use whichever version has the highest build number regardless of installation order: * .NET Core 1.1 preview2 is build 3177. * .NET Core 1.0.3 RC3 is build 4530. * .NET Core 1.0.3 RC4 is build 4771. As a side note, RC3's main update for `dotnet` was to both add new commands and update the `dotnet new` command to create projects that use `.csproj` files rather than `project.json`.
Even beyond that, the `ArrayForEach` benchmarking method, beyond just using delegates, is also applying some closure and incrementing of the local `sum` variable: int sum = 0; Array.ForEach(array, i =&gt; { sum += i; }); This is not entirely trivial and makes the test doing more than the others which are just incrementing a local variable on the stack without method calls and closure.
Removed: Spam. You didn't take [my advice last time.](https://www.reddit.com/r/csharp/comments/5stiaf/is_string_operator_so_simple/ddhxvfs/) I suggest you do so before submitting your next article.
Thank you! It seems my first questions wasn't very clear but that is very cool to know. Let me try again. What I meant by states was sort of the layout of the entire Grid I'm working against. These would almost be their own windows in any other application, where clicking a button opens a new window with a new set of buttons, which one of them would open a third window with a third set of buttons, each unique, sort of like an options/proerties menu. However, I'm confined within something known in windows as an "AppBar" (I'm technically using a nuget package called WPFAppBar), and it has a maximum size of 40px, as per specifications, and I can't open a new window. So what I meant by state transformation, I was talking about the "Display State" of the entire app bar, to make it look completely different, even if I was just hiding/unhiding buttons. I'm currently using a grid(thought I'm not sure that's the best way of doing this) to hold some buttons. Imagine for a moment, what I'm trying to do, even if I don't understand it well enough to attempt to explain. A grid that held 3 grids (If that can happen). The parent Grid is 40Px in height, and each grid perfectly holds 40 px height of it's parent, except only one displays at a time. (In HTML, I would use a DIV tag, and use display:none; on two of the 3 grids). Is there an equivalent to that? Or am I going about it all wrong? Thanks again for your help so far!
What a shitty and worthless post.
What I think you are looking for is exe signing. It validates that the byte code was generated by someone who has access to your certificate. This will prove that the exe was built and distributed by a trusted party (you). There really isn't a web service that will show that there isn't malicious code, making the source available helps, but ultimately you need to build your reputation with your clients. Contracts help to that end as well, because both parties have a set of agree'd on protections. Edit: There are static analysis tools that you can use to generate reports to show code smell etc. but a lot of the time these tools may show you things that are ultimately not important or are false positives. So I would use them for yourself to help find issues but I wouldn't share the results with you clients. A lay person may see a report and not really understand what is being said on the report and walk away with a unfairly negative view of your product.
Yes, when you recompile your application it will reuse the unmodified App.config from the build directory. 
I'm assuming that this is the issue OP is having, he modifies the output config. If its the case, OP probably just needs to pass the path to app.config
Great point. Allow me to add that disk encryption software can have a serious impact, as well. Some are better than others, in terms of scheduling, etc., to mitigate the problem. i.e. One of my clients provides a dev laptop. It has their corporate Trend Micro disk encryption, delivered by AD login script. And holy lord does it kill performance. In a debug session, expanding [for example] a collection in the Locals window takes 12-15 seconds to view its children. It's horrific. In parallel, it renders R# almost unusable. 
&gt; virtually executing code in a web browser. thats not how it works
Yep. Xamarin projects get compiled to the same native deliverables as if you'd written them in Swift / Obj-C / Java. Done correctly, the finished project is indistinguishable from an XCode project [for example]. 
Thanks so much for the help! I'm learning C too so it can only help! 
As a very minor FYI (might not be required), taking the example /u/ihaxr slightly further, you will not need to name the different grids or set their values in the C# if you have a DataContext setup. You can then bind the Visibility value of each grid to a public variable in your DataContext (or even setup a Converter so you can bind to a Boolean).
Oh, that sounds interesting. Do you by chance have a good resource I could read more on that? It might be very helpful to me. If not I'll try to find on later. Thanks :D
You can get Travis or Docker to build the files and output the checksums, as well as upload the files somewhere. If people trust that service, then they can consider it as being verified.
&gt;So I guess it's more for people that prefer copy pasting and using snippets rather than people who are good at typing. Wrong. I type a lot. &gt;Resharper is an unstable resource-hog that slows down Visual Studio to an unusable state Literally have never experienced this on any machine I have installed it on. Only slow down I have experienced is when first loading a project. &gt;the built-in refactoring tools are good enough They seem fine to me. I use them all the time. &gt;There is nothing Resharper provides that is in anyway essential or difficult to live without. True. But having the ability to turn a series of statements into LINQ has helped me learn WAY more about LINQ than I would have on my own. I was the first one my team to use Resharper. A month later everyone had installed it. It's cool to not like it, but I wanted to add a different opinion in here since my experience with Resharper is nothing like you describe.
If they are equal in length: Var res = new double[list1.Count][2]; for(int i = 0; i &lt; list1.Count; i++) { res[i][0] = list1[i]; res[i][1] = list2[i]; } Or take a look at the Zip operator from LINQ.
I'm not sure what you're looking for, but if you are looking for number processing, like statistics, you might want to be aware of the R library https://msdn.microsoft.com/en-us/magazine/mt238409.aspx
If you look into Model-View-ViewModel you will find a lot of information on how a WPF "view" (such as a Window or User Control) can have a DataContext specified - which is a class you define that can have variables and other logic - while not being aware of the view itself. It's much more complicated than this, but some really basic starting points based on a sample I had readily available... Let's say you have two classes: MainWindow.xaml, and MainWindowViewModel.cs In MainWindow.xaml.cs (the code-behind) you can define a DataContext there (you can also do this in the XAML... bit more advanced). public MainWindow() { InitializeComponent(); DataContext = new MainWindowViewModel(); } In that MainWindowViewModel class, I can have variables like: public int TabSelectedIndex; Within the MainWindow.xaml, I can then bind something to that integer. &lt;TabControl SelectedIndex="{Binding TabSelectedIndex, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" &gt; The magic is that you can bind almost anything. So that Visibility property? You can have a variable in your class that is of type Visibility, and change its value. If you bind to it, then you change either control visibility from the code-behind or get the current status based on user input. If you write your variables and classes in a generalized enough fashion, then you can start writing classes that can be used with more than one kind of View. So if your customer or end-user wants to change how the screen looks, you can do that - without modifying the source logic. Many of the graphical controls don't even need to be given names - you're controlling their properties without caring whose properties there are. You can even bind the same public variables to multiple graphical controls (set a whole bunch of controls to disabled by binding each of their .Enables to a boolean is one example). This is useful for a variety of reasons, including but not limited to reducing the amount of code that must be retested after a change. Another reason is that you can bind to collections... If you bind to a List&lt;YourClass&gt;, you can use various WPF controls to auto-create the exact right amount of child controls, which themselves can be custom UserControls that then bind to each element in your Collection. There's a lot more to it than this - you will need to implement INotifyPropertyChanged among other things... but the MVVM paradigm can give you a different, far more powerful way to program your classes and your screens.
Well the Dll he "needed" could only be built using the code he'd just generated .. not the best option IMHO
I think I was going more for that array to contain two arrays. Sort of like a lists of lists. I was just confused to how they work, sorry
That doesn't prevent him from publishing a malicious exe. If the people are compiling the source themselves, they can at least theoretically know there isn't anything naughty. 
There are plenty of places that do this. None that are free, nor likely worth the overhead for something that isn't a complex project. 
Linq isn't super difficult to learn let's be honest. If you use reaharper to write Linq statements you're probably just gonna be writing shit Linq statements
`csc file.cs` Boom.
 var myList1 = new List&lt;double&gt;{1,2,3}; var myList2 = new List&lt;double&gt;{4,5,6}; var myArrayOfArrays = new double[][] { myList1.ToArray(), myList2.ToArray() };
csc /recurse /out:my.exe *.cs Would probably be better. Just provide a build.bat at the root along with the csproj file and tell them to build on their machine. Bingo bango.
You really need to have an SSD disk - if you don't already. For my work solutions/projects, I keep solution wide analysis off as it can be a bit of a drain (90+ projects, some of them are large, some are small). For my personal projects, I can turn it on without a performance hit as they're much smaller. If you turn it on, there will be a bit of lag while analysis is happening, but once that is finished (several minutes possibly) your PC should get more responsive. I use the Resharper menu option to show issues in the current project quite a bit. I really wish there was an option to list all issues in the current file - instead I have to show issues in the current project, then filter by the filename. Refreshing the issue list requires re-scanning the current project, which is slow - as at that point I'm interested in just one file.
Only partially true. Xamarin.Android ships the Mono JIT with your app and generates tiny java classes that do nothing but call your C# code.
`dynamic` (C#4) and `async` (C#5) were both desirable for two entirely different types of projects. C#6 was basically a rewrite of the compiler in C# (previous versions were unmanaged C++); dogfooding seems to be a pretty good idea for any compiler and the mere possibility of breaking changes from this move is worth a major version number. A bunch of entirely unnecessary nice little features were added as well. `ref` returns will be about as impactful to the language as `dynamic` was. Both are primarily useful in interop code and enable code to be written with them that was very annoying without. Better signatures (better generics, better constraints, code contracts) will someday perhaps enable algorithm complexities to be proven by automated tools. Good working non-nullable reference types will enable safer code. ... C# isn't nearly "done". It is merely adequate for the projects you happen to use it for.
Can't fathom why you would aim to build a RESTful API with Nancy. Its an MVC alternative for those who don't have access to system.web. That woukd be like building a RESTful api with MVC instead of WebApi. WebAPI 2 is based on OWIN (katana) so it can be run cross platform with mono. I'd take core, express or resitfy any day over anything mono, personally. Also, mod should use the right persistence technology for the job. ORMs add their own layer of complexity and can be a performance tax if abused. Relational databases aren't a panacea for storage and the schemaless nature of document storage is major benefit to consider when picking a storage platform. They also don't lend themselves to horizontally scale, hence the latent interest in alternative "NoSQL" technologies. Not preaching btw, just my 2 cents. 
Has this changed with 2017? 2015 Enterprise has a lot more performance profiling tools and modelling project types. 
Agreed, having followed .NET Core and ASP NET Core since beta 4 (lol, "beta"), it has always been a fast moving target. Even with release 1.0 and 1.1, they're still moving the target, the move back to csproj is a pretty big example. I'm sure NET Core will be a fantastic polished product in a year or so, but developing with it *right now*, I still feel like a beta tester.
NPM is anything but cool. Standard maybe, clusterfuck definitely.
It's their one major failing these days. They release stuff that's just massively unfinished.
Dang, I can't get parole until somebody recompiles this prison.
I'm using ASP.NET Core and EF Core in an API I built over the past six or so months. It's been really good, no issues. Some things were a little tricky to figure out due to the lack of blog posts/SO questions, but the framework itself has been solid for me. I tried VS 2017 and it was horrendous with .NET Core, so I don't know about that, but 2015 is great.
BASIC (including VB) doesn't use `==` for anything. Both assignment and comparison use `=`.
Choose Nancy if you like `dynamic` everywhere, no structure, and `Tuple&lt;&gt;` in public API. Also forget about ever using something like Swagger - it does not work with Nancy.
Anything that'd prevent t from being compiled in core?
I think you misunderstood me. What I thought of was that I post source codes and the link to the site, not the ".exe", and the users easily build it using the site without installing VS.
Just curious, since VS2017 release is supposed to drop soon. I haven't tried out the beta versions, but what were the pain points you had with 2017 vs 2015?
I know of code signing. If I were releasing a full, established, commercial application, I would sign them. But what I was talking is about simple ad-hoc applications for doing some a one-off task, that has no name, no homepage, no versioning, etc. I do not want users to "trust the author's identity"; If they can see the source code, they do not have to. But building a project requires set-up on the users' side, this I wanted to avoid.
It's there because the different json configuration files can all look pretty similar. It's intended to help you identify which one your looking at. Will show the appropriate logo for: project. json package.json bower.json gruntfile.js gulpfile.js
I worked on a pretty large web API in ASP.NET using WebApi. It was pretty easy and I would say go for it. As for MongoDB, we started off w/ MongoDB and we eventually dumped it because of issues scaling it out. We were dealing with millions-tens of missions of additions a day in some situations and Mongo's scaling support was less than stellar and reliable. It was and still is great for small unstructures documents, so we do use it some of our smaller needs.
It's a bit of a poorly conceived reason: I really, really dislike JS. I also find that NoSQL databases are easier to work with, especially for this application. All the better if the front-end ends up being JS as well.
Thanks, any help is apreciated
Pure gold! Thnx!
(sorry cant pull it right now ) So does it compile to java byte code or c# ? Either way I love these interesting projects.
I'm going through the fundamentals of C#. I haven't gotten to the switch statement yet, but it seems a lot more simple than the if statement. When would it be better to use a SWITCH statement, and when would it be better to use an IF statement?
Genetic algorithms are great as well. Especially if you haven't got training data as they use fitness scores.
Did writing your game engine help you learn these deep threading issues, or did you read about them beforehand and keep an eye out?
You've pretty much already got it; you're already detecting when the user still needs to guess letters when you output the asterisk "*". So one quick way that integrates with the code you already have is to just set a flag when you output that asterisk: bool userHasGuessedAllLetters = true; //assumes the user has guessed all letters foreach (var c in letters) { if (guessed.Contains(c)) { Console.Write(c); } else { userHasGuessedAllLeters = false; //user is missing letters, therefore they haven't guessed the word fully yet Console.Write("*"); } } //if you get here and `userHasUsedAllLetters` is still `true`, it means you never outputted any asterisks, and therefore, the user must have fully guessed the word if (userHasGuessedAllLetters) { //profit! }
thank you so much!
It works great at home, where I control my PC. At work, Symantec slows it to a crawl.
So before I started making my game I worked as a software engineer in the United Kingdom defence sector. My job there was mostly improving performance of DSP algorithms (including parallelizing) and implementing the API for our laser hardware comms over ethernet. So I'd say I already had a good grasp of this kind of thing before, but building a game engine has certainly helped solidify those concepts.
Thank-you for the response! 
I tried to reproduce the last ones under "Reodering optimizations and variable caching" and was unable to. Specifically the variable caching example, as I couldn't reproduce it as you have it in the post. I tried to reproduce the reordering optimizations post by rewriting it a little bit like this: private static bool valueWritten = false; private static int sharedValue = 0; private static void ThreadOneStart() { sharedValue = 1000; valueWritten = true; } private static void ThreadTwoStart() { if(valueWritten) Console.Write(sharedValue == 1000 ? String.Empty : "!!!"); } static unsafe void Main(string[] args) { int count = 0; while(++count &lt; 10000) { Thread threadOne = new Thread(ThreadOneStart); Thread threadTwo = new Thread(ThreadTwoStart); threadOne.Start(); threadTwo.Start(); threadOne.Join(); threadTwo.Join(); //reset state sharedValue = 0; valueWritten = false; } Console.WriteLine("Done"); Console.ReadKey(); } I enjoyed the post and found these last examples particularly interesting, but was disappointed when i was unable to reproduce it locally. Any idea what I'm doing wrong? I'm on VS2015 .Net 4.5.2. I did compile with /unsafe. 
There's far more to it than 1 clock cycle = 1 operation; You cannot directly equate those two numbers. But that's only part of the issue. Because you're doing so much more than just increasing a counter. You're at least doing the following things: * Running your operating system * Running the CLR which runs your code * Running X amount of other programs in the background * Doing a modulo calculation of a number * Doing an equality check on the result of that So even IF you'd get 3 500 000 000 operations in a second; You'd still not get that many counter increments per second. Your CPU isn't working on just your code, and your code doesn't only increment either. Rest assured that this isn't an issue, and isn't somehow C# being 'slow'. You shouldn't get significantly faster performance in any language that doesn't just optimize the loop away in the first place.
What's your CPU's Ghz?
[**i7-6700K**](https://ark.intel.com/products/88195/Intel-Core-i7-6700K-Processor-8M-Cache-up-to-4_20-GHz).
Since no one else had pointed it out, modulo is one of the more expensive mathematical operations.
There is nothing wrong with using metadata attributes. It's what most decent .NET serializers use to annotate information about the expected format. The use there seems pointless though.
In wpf you hardly need to make a custom control. And from the sound of it, you don't need one, you need styling. Controls in wpf are effectively look less, and get styled by a default theme, or an overriding style. What you need is a custom style, going off your description. Some info on styling here https://msdn.microsoft.com/en-us/library/ms745683(v=vs.110).aspx
Decoded it looks like this: payload={"actions":[{"name So id'd strip away payload= first I'd use Uri.UnescapeDataString, then use JsonConvert.DeserializeObject&lt;Dictionary&lt;string, string&gt; I'm on my phone, so this is untested. But something along these lines
Start writing basic apps, read books, do tutorials.... Read other people's code. Is not same for any language?
Caching query results is only viable if that data doesn't change.
Removed: Rule 4. There are some resources in the sidebar and the sticky. You can also check out /r/learnprogramming and /r/csharp. Visual Studio Community edition is free so grab that and jump in.
We approach that with a local sql express instance so the system can run for quite a while with the main network down, as it has a separate local network for the local db. 
Note clock speed isn't necessarily comparable due to instructions per cycle.
[removed]
I just want to make buttons, which looks like this: http://imgur.com/a/dpybg . With ripple efect introduced by Dominik Weber: http://domysee.com/blogposts/Blogpost%201%20-%20Ripple%20Effect%20in%20WPF/ EDIT: Also I found this tutorial: https://www.codeproject.com/Articles/242628/A-Simple-Cross-Button-for-WPF 
What you need is something like this: &lt;Style TargetType="Button"&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate&gt; &lt;Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"&gt; &lt;Ellipse Fill="{TemplateBinding Background}" &gt; &lt;Ellipse.Effect&gt; &lt;DropShadowEffect BlurRadius="15" Direction="-90" RenderingBias="Quality" ShadowDepth="1"/&gt; &lt;/Ellipse.Effect&gt; &lt;/Ellipse&gt; &lt;Viewbox Margin="9"&gt; &lt;Path Stretch="Fill" Width="{TemplateBinding Height}" Height="{TemplateBinding Width}" Fill="White" Data="M4.1561281,2.2702953 L4.8524521,2.2702954 4.8509674,3.963097 5.8969377,3.9630803 5.8969378,5.0916036 4.8524628,5.1061913 4.8524521,6.7843885 4.1561281,6.7843887 4.1559771,5.0877741 3.1116421,5.0916036 3.1116421,3.9630803 4.1556735,3.9654722 4.1561281,2.2702953 z" /&gt; &lt;/Viewbox&gt; &lt;/Grid&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt; &lt;Setter Property="Background" Value="#2195F2"/&gt; &lt;Setter Property="Height" Value="30"/&gt; &lt;Setter Property="Width" Value="30"/&gt; &lt;/Style&gt; Which generates something like [this](http://imgur.com/4VBGNjB) Obviously not exactly what you want, and has some inherent flaws, but it's just to show you that it can be done with just a style. For instance, the cross will look weird depending on what height and width you set on the buttons (I set a default height and width in the style, but it will take over whatever height and width you set on the button which will make the ellipse larger by using the TemplateBinding) EDIT: Credit for the plus path goes to the guy from this post: http://stackoverflow.com/questions/28915955/how-to-make-a-plus-sign-in-xaml-in-wpf since I was too lazy to construct a path myself. For the ripple effect, you can just surround it with the RippleEffectDecorator (the grid in the above case) and you should be set I assume, I haven't looked into it that deeply. Also don't take this as the ideal solution, it's just something I came up with in 10-15 min, just to give you an idea.
Thanks! I will try to make it with ur advices. I think, that position of the "plus" should be calucated(depends on the height and widht of the ellipse). EDIT: So should i use custom control with DepedencyProperty and event(I don't know, how should i call it). This should help with that cross. I need to go deeper with that Path attribute. Thanks a lot! 
Holy ham sandwich that is not how cpus work... 
&gt; SSD FTFY It's either a Solid State Drive (SSD) or a Hard Disk Drive (HDD) (let's not talk about SSHDs, they were a bad idea in the first place).
Wonder how easily this could be made to work with Azure blob/file storage
Well. This makes those computer architecture classes in college seem more valuable.
If you are intrested, I did something like that: http://pastebin.com/eNTbUQdr It isn't elegant, but works. Custom control with overriden OnApplyTemplate. Now, plus sign is scalable. 
&gt; In the final Variable Caching Example surely it's enough to just mark cancelLoop as volatile rather than an explicit memory barrier? Yes, and in this instance `volatile` would be okay. However I didn't introduce it because, as Joe Duffy puts it, [volatile is evil](http://joeduffyblog.com/2010/12/04/sayonara-volatile/). I personally never use it anymore. If you really want you could *explicitly* annotate the read with an acquire-fence like so: private static void LoopThreadStart() { while (!Volatile.Read(ref cancelLoop)) { ++counter; } } This gives you the half-fence that you'd get with `volatile` instead of the full fence in my post; and annotates the read rather than the memory location, which is better form.
Seems a bit of a waste of a control, I had a quick think and fixed it like this: &lt;Style TargetType="Button"&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate&gt; &lt;ControlTemplate.Resources&gt; &lt;local:MultiplierConverter Factor="0.5" x:Key="CrossHeightConverter" /&gt; &lt;/ControlTemplate.Resources&gt; &lt;Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"&gt; &lt;Ellipse Fill="{TemplateBinding Background}"&gt; &lt;Ellipse.Effect&gt; &lt;DropShadowEffect BlurRadius="15" Direction="-90" RenderingBias="Quality" ShadowDepth="1" /&gt; &lt;/Ellipse.Effect&gt; &lt;/Ellipse&gt; &lt;Viewbox Height="{TemplateBinding Height, Converter={StaticResource CrossHeightConverter}}" Width="{TemplateBinding Width, Converter={StaticResource CrossHeightConverter}}"&gt; &lt;Path Stretch="Fill" Width="100" Height="100" Fill="White" Data="M4.1561281,2.2702953 L4.8524521,2.2702954 4.8509674,3.963097 5.8969377,3.9630803 5.8969378,5.0916036 4.8524628,5.1061913 4.8524521,6.7843885 4.1561281,6.7843887 4.1559771,5.0877741 3.1116421,5.0916036 3.1116421,3.9630803 4.1556735,3.9654722 4.1561281,2.2702953 z" /&gt; &lt;/Viewbox&gt; &lt;/Grid&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt; &lt;Setter Property="Background" Value="#2195F2" /&gt; &lt;Setter Property="Height" Value="30" /&gt; &lt;Setter Property="Width" Value="30" /&gt; &lt;/Style&gt; I added a converter called **CrossHeightConverter** which looks like this: public class MultiplierConverter : IValueConverter { public double Factor { get; set; } = 1.0d; /// &lt;inheritdoc /&gt; public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { if (value is double) { return (double) value * Factor; } return value; } public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { return value; } } Basically just takes in the value, and multiplies it by a factor. So if you bind that to the Templated Height and Width (I chose to make them even and use one converter) you will get the same control! I guess it goes to show how versatile WPF is. ~~And before anyone goes "But now I can't scale the plus on each button :(" You should be able to fix that with an attached dependency property and bind to that instead.~~ Actually it's not that easy, but probably not impossible, just a lot harder since the converter won't be picked up by the visual/logical tree, which makes it hard to resolve the bindings and you need to start using trickery like x:ref and stuff like that. You probably wouldn't want to let the user change this anyway since that would mess with the consistency of the buttons.
Can I run it on Linux?
And cache invalidation is, famously, one of the hard problems of computer science. I'm not particularly sure this is a viable solution.
I was just referencing the well-worn Karlton quote, there. Caching is, obviously, a good solution to data that remains invariant over a known timeframe. I'm still unconvinced it's the solution for OP's problem, which sounds like an infrastructure issue. If it is, though, I hope he's really not going to roll his own solution around DataTables, which are just generally awful. Wrapping up an ObjectStore might be suitable, and a third-party solution of one sort or another might be sensible if it needs to be in a different memory space.
That is an interesting article. I'll see if I can fudge those limits and see a difference.
Neat! I actually bookmarked tus.io about a year ago with plans to implement it in a .Net Web API project, so this is welcome news 😁 Any plans to make an asp.net core version?
I agree. But as a TDD driven developer, this is only a test to ascertain my grasp of the concepts involved is based in reality. ;) Entity MemoryCache with in memory mods updated to sql in batches. This would require a state management system that could the lock the items for making modifications. the client that request item for mods would get a timed cache entry for the item to mod, meanwhile if server receives another request sends a request to client to update peer on send to server. 
Thanks for comprehensive answer. I have some books about wpf( WPF unleashed and Pro wpf 4.5), but I'm still confused when I have to do own controls. Comprehenisve tutorials about own controls dosen't exist in internet. Anyway, have a nice day and best wishes. You advices help me a lot! 
According to the wiki you can write your own store store by implementing some interfaces. Not really sure if it's feasible for Azure or not. https://github.com/smatsson/tusdotnet/wiki/Custom-data-store
Something here: http://tus.io/blog/2016/03/07/tus-s3-backend
Tiny note: Fody + .net core is still rocky atm.
I love this! Great job on the concision. Definitely will consider using this for some of my repls. Does it handle Ctrl + C for cancelling the current input and starting again without clearing the line? 
why aren't you running a [6750](http://ark.intel.com/products/30784/Intel-Core2-Duo-Processor-E6750-4M-Cache-2_66-GHz-1333-MHz-FSB)
Because I'm not?
it's a joke. the e6750 is a dual-core from years ago.
I tend to agree. I think code generation becoming a first class citizen is mostly a tooling thing - see Kathleen Dollard's brilliant session from the first Portland .NET Fringe Your Code - Your Brain" https://youtu.be/dzCGY1TQ5Ro?t=20m40s where she shows a mock UI of what that tooling might look like in the future.
I would be more convinced if the wrong way was shown and explained why it is the wrong way. And then how Tus is different and why it's the right way. Having previously done file uploads with bog standard .NET I haven't had any problems. So I'm at a loss as to what is "wrong" and "right".
Well unless the divisor is a power of two, i.e.: val % (2^n) is equivalent to: val &amp; ((2^n)-1) (only works for positive values but the "optimization" is definitely applicable here) Edit: actually it would also work for negative values if % was a mathematical modulo operator.. In most programming languages % is actually a "remainder" operator, i.e. division is towards zero, not negative infinity.. See: http://stackoverflow.com/a/11720975/2445257
Must be painful after paying thousands for that machine. Mac users typically love simple or even primitive editors so no point for Microsoft to port the best IDE there is. 
Honestly I just bootcamped into windows in order to be able to follow tutorials exactly. Can you get an older student copy of windows?
Interesting. Thanks for the note :) Do you know if there a Github Issue discussion about this? 
Agreed on the tooling, though I think integration at the compiler level is important too. E.g. being able to modify ASTs so that you can see changes from within a project.
I did forget to compile in release mode at first, but I realized that was silly as this is about optimizations. I tried again just now specifically targeting x64 (i'm running i7 3660k) and I tried the cached loop example and I had success! I was on default before (Any CPU) which was preferring x86. I tried specifically targeting x86 and it fixed the caching problem. Interesting that that's what created the condition! I tried using x64 with my above implementation of the race condition example, but no success. I won't pursue that one further just due to the the non-deterministic nature of race conditions. Thanks for the post!
Roslyn analyzers could flag that a null value is being passed in at compile time, but they wouldn't be any help at run time, unfortunately. The best you could do is create an analyzer that issues warnings for unchecked reference type parameters and then create an accompanying code fix to generate your helper method for each one.
Not OP, but the IDE was a big undertaking, with a ton of new features, as well as new, more modular install process. Early VS2017 was definitely annoying, and I frequently encountered crashes, and the .NET Core support was lacking (for good reason). Now that the MSBuild tooling for .NET Core is more stable, I'm a huge fan of this IDE and use it completely. I didn't install VS2015 on my new machine. It's still a little laggy, and might have issues here or there, but it's definitely worth it. The in-IDE web debugging is especially nice.
Check out Mosh Hamedani's videos on Udemy. He has everything covered from beginner topics to advanced topics. He also have videos about specific frameworks such as Xamarin, ASP.NET and Entity Framework.
Especially if you never used C#, Visual Studio or OOP: [Bob Tabor's C# for beginners](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Ry6jz0QIC_5706218949) Advantages: * He uses non GUI demo programs = code always fits on the screen and you can easily follow what he does, no wild scrolling. * Very nicely structured chapters. I sometimes find myself revisiting some of them just to verify some concepts * Explains some really cool features of the auto completion in VS 2015 which I would otherwise not have found/used Gets you at least started with a solid C# foundation.
This course is the best I've come across. Very well put together and Mosh is an excellent teacher. $15 right now with a money back guarantee. Certificate at the end
I currently use SharpDevelop in Win10 under VirtualBox (any other VM host would work) on my Mac for C# Windows desktop application development, it works reasonably well. If you have a VS licence, you ought to be able to use a Win VM more easily than trying to hack up a pure Mac solution that may or may not work as expected when you turn it in. 
1. Starting a new Windows Forms application in 2017. *Cue the wraith of WinForms devs* I guess if you are just trying to learn C# and .NET, its fine for poking things. However, if you plan to spend time long-term on a Windows UI technology, I'd jump straight to WPF or UWP. --- Regarding your exception - it just looks like you are trying to parse a decimal (floating-point) number in string format from textBox3 into an int, which is only for integers. Also, you should be using TryParse first to determine if the text is even parsable before proceeding, which will at least prevent exceptions from being thrown because of invalid input.
.NET Core support would be awesome
Technically true, though just because it *can* be, doesn't mean it *is* optimized. OP's code doesn't include the declaration of his modulo divisor, but unless it's a `const` it's likely going to be just as slow.
A delegate handler with a retry strategy would force you to upload the entire file again which is in no way ideal if you are uploading large files over a unstable network. The tus protocol's aim is to add easy support for *resumable* uploads giving you the ability to continue uploading a file where the connection failed instead of restarting the entire upload.
There are similar protocols that tries to solve the same thing as tus. All of them share the same approach that they split the file into several chunks (in BITS called a "fragment") and upload each of these individually. This approach is bad for several reasons where the main two are: 1. If a chunk fails the entire chunk needs to be uploaded again. 2. The more chunks you have the more overhead the entire upload will have as each chunk needs to be transferred as a single request. tus on the other hand uses streaming to upload the file. This means that the server will read as little as possible from the client's request at the time and save that data. This is a better approach as it will minimize the amount of data that needs to be re-sent if the connection fails. The tus team have written a blog post about this exact topic. See "Haven’t other companies already implemented this?" over at http://tus.io/blog/2015/11/16/tus.1.0
Cool! Glad to help :D It's in the pipeline but I'm not sure when I will get around to it. I feel that .NET core is still a bit unstable and I would need to rewrite some of the code for it to work so I have put my efforts into making tusdotnet feature complete instead. If you like to help out you are more than welcome to do so with a PR or an issue on Github so that others might help. 
Happy 🎂 Day .NET!
I also can vouch for Bob Tabor, he has a teaching style which is perfect for beginners.
The InvokerParameterNameAttribute is interesting! I should dig through jetbrains annotations some more, so.e of them are pretty cool. Still not the ideal syntax sugar i was hoping for but not a huge deal! Thanks!!
Wow. Playing around with the Beta2 release feels like it was yesterday...
Did you ever make a video of the unit tests? I'd love to see it. 
Oh I'm sorry, it just exploded at work and I have been really busy. But I started a practial example that I can PM you when it's done. I also have another example (but not as exciting): https://github.com/Testura/Testura.Android.PageObjectCreator In this software we use my framework to generate page objects used by test automation. So a user click on different UI elements on his Android device, we save them down and later generate all the code for them. It's really simple but at the same time really useful. 
Not sure where I would be without .NET. I got started on VB5 and eventually graduated to VB.NET and (almost immediately) C#. Over the years I've learned other languages and platforms to a varying degree (C, C++, Java, PHP) but the one ecosystem that simply clicks for me is .NET. The launch of .NET coincided with high school, and so it was a natural fit as I started to look towards a career path. Fast forward 15 years and here I am in 2017, developing on Sitecore with C# with a healthy career behind and ahead of me. 
How do you guys think it will compare to IntelliJ's Rider?
I actually got the date format to work somewhat, the reason it wasn't working before is because I put "yyyy-mm-dd" but really my dates are "mm-dd-yyyy". and as you just said, I also think I have to set it for all the cells in that column but not sure as how to do that. I basically need the whole J column to be date format but just putting a "J" doesn't work as you need a range? that's what the error is saying. I tried this workSheet.Cells["J" + startRowFrom + 1].Style.Numberformat.Format = "MM/dd/yyyy"; and oddly enough it works for one of them which is how I found out to use "mm/dd/yyyy" instead of "yyyy-mm-dd" right so instead of this line right here workSheet.Cells["A" + startRowFrom].LoadFromDataTable(dataTable, true); I would have to use something like this? worksheet.Cells[1, 1].Value = "Asset ID"; worksheet.Cells[1, 2].Value = "Description"; worksheet.Cells[1, 3].Value = "Asset Type"; worksheet.Cells[1, 4].Value = "Person"; worksheet.Cells[1, 5].Value = "Manufacturer"; worksheet.Cells[1, 6].Value = "Serial Number"; worksheet.Cells[1, 7].Value = "Region"; worksheet.Cells[1, 8].Value = "Cost"; worksheet.Cells[1, 9].Value = "Date Purchased"; worksheet.Cells[1, 10].Value = "Status"; worksheet.Cells[1, 11].Value = "Notes"; for (var index = 0; index &lt; recordCount; index++) { var currentRecord = assetDataRecords[index]; worksheet.Cells[index + 2, 1].Value = currentRecord.AssetID; worksheet.Cells[index + 2, 2].Value = currentRecord.Description; worksheet.Cells[index + 2, 3].Value = currentRecord.AssetTypeID; worksheet.Cells[index + 2, 4].Value = currentRecord.PersonID; worksheet.Cells[index + 2, 5].Value = currentRecord.ManufacturerID; worksheet.Cells[index + 2, 6].Value = currentRecord.Serial; worksheet.Cells[index + 2, 7].Value = currentRecord.RegionID; worksheet.Cells[index + 2, 8].Value = currentRecord.Cost; worksheet.Cells[index + 2, 9].Value = currentRecord.DatePurchased; worksheet.Cells[index + 2, 10].Value = currentRecord.Status; worksheet.Cells[index + 2, 11].Value = currentRecord.Notes; yeah everything that is for just Asset works well but when it comes to other properties that have been lazy loaded or the ICollection of Licenses than it gets harder :/ 
Hmm. I have been going through his C# videos that are linked in this subs resources sidebar, his 2013 edition. What you have linked looks to be a latter version of the same video tutorial set. Should that be updated or is their some unique difference between them?
Yeah I would do it that way now, but I implemented my ViewModel base class pre-c#6. Good call though.
&gt;I thought they always maintained control over the c# spec. Technically no, since it's an open standard, but there are a lot of Microsoft / .NET specific stuff in there. They also have issued a few "promises to be good" regarding their open standards https://msdn.microsoft.com/en-us/openspecifications/dn646765
Mono's been a part of the [.NET Foundation](https://dotnetfoundation.org/mono) for a while now, and Miguel de Icaza works at Microsoft too. Also, ever since .NET has been open-sourcing its BCLs (via the reference source), Mono has been incorporating that released code as appropriate already. Note that Mono has more APIs available to it than .NET Core, so they didn't immediately base it off that when it was first released. But now as more APIs are being added back into .NET Core, they're switching things up a bit. Now they're also contributing some of those extra Mono APIs back to the .NET Core repo. http://www.mono-project.com/news/2016/11/29/mono-code-sharing/ It's plausible that Mono may be doomed, but not in the way of a [dead/dropped technology](https://en.wikipedia.org/wiki/Microsoft_Silverlight), but likely just have all its good stuff rolled into the .NET Core (or equivalent), reach functional-parity with .NET Core, and be obsoleted/deprecated. If it is discontinued, I imagine that it's quite likely that the vast majority of Mono-based projects can be converted to .NET Core (or equivalent) projects with minimal effort. Not sure your implication of "Microsoft taking over C# again". If you're concerned about the big bad M$ embrace, extend and extinguish, with their big push to open source significant aspects of C# and .NET, I don't think it's that probable.
Thanks for the detailed answer.
Sorry but you do know that the a large amount of developers in big company's use macs, right? To state any mac user uses "simple" development tools is idiotic and really shows your lack of knowledge in the field. I guess you are the type of person who sticks to windows as their only OS and does not understand why others use GNU/Linux and MacOS.
You should be able to set the format at the column level. Try the following: worksheet.Column(1).Style.Numberformat.Format = "MM-dd-yyyy"; You cannot access the columns by their "letter" so far as I know, you will have to use a number e.g. for J use 9. Also note that when using the above method if you select a cell in the relevant column afterward the format will be Custom rather than Date. To set the format equal to Date add a using System.Globalization to the relevant class and use the following code: worksheet.Column(2).Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern; If I'm reading your example correctly then you are outputting column headings in the first row. For correctness you will want to reformat them to text, which can be done as follows: worksheet.Row(1).Style.Numberformat.Format = "@"; I have no idea why the @ symbol is used to represent the text format (I guess it's treating it as a literal?) but I hope that helps tidy your code a bit. Finally, as a general rule I would advise outputting all your data to Excel first and then formatting it separately rather than mixing and matching.
ASP.net MVC will let you develop a lot of the site with C#, but you will still be greatly helped by knowing HTML.
Thank you! This is exactly the kinda response I needed, since I wasn't sure if separate processes are allowed to access each other's memory. I'll take a look at serialization/interfaces. 
Hi! Just saw this reply. What do you mean by "shared memory if the data is ephemeral"? 
Sort of , c# will let you process the "clicks" and form submits, but html will let you make the web page people see. One way to think of it is that c# assembles the html page
If you see the below comment, this user had a way to just give the whole column a date format. I'm working on solving the other two problems now though by just using a loop to go row by row and assign the values, but I'm not sure still if that will give the actual value of let's say Manufacturer, or if that's still going to get the ID of that Manufacturer.
It's funny, there's an element of history repeating itself with the release of .net core 1.0, but luckily it's nowhere near as botched as .net 1.0. And luckily again, it's looking as though version 2.0 is going to fix all of those wrongs.
IIRC, WrappedRequest is is saying that you are expecting your paramters to be wrapped in a Request class instead of being sent directly. It may be expecting a FeesRequest with a CandidateAccess property. 
Thanks for your response. What you've described about ephemeral data is exactly the need I have for my process. Do you have any recommended links/readings for me to read up on this? Or should I just google "Ephemeral Data" and start from there?
If you don't set it, one gets generated. 
I started with VB.NET/C# around 2009, after Microsoft announced FoxPro would no longer be getting updated. I've never looked back. The language is clean, backwards compatible, and can be as simple or complex as you want it to be. I just hope they don't screw it up.
Edit: Just saw the sidebar for the first time, on tablet 99% of the time. That link goes to [Bob Tabor Channel9 C#](https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners) I actually used that some years ago to get a whiff of C# and made a mental note to revisit Mr. Tabor if I ever wanted to really learn C#. Looks like that was recorded in his own home (with a funky binary clock in the background). My personal opinion is that the Channel9 material is pretty much identical to this Microsoft Virtual Academy version. Maybe offer both links?
Technically, [yes](http://bridge.net/).
I've heard it being thrown around a lot, but coming from the programming multireddit, what is .NET?
Awww. I totally understand though. Cheers, and congrats again!
I'm sitting in front of a of my computer with VS in one window and like 10 different "C# learning" tabs in my browser pulling my fucking hair out for the last hour (and several weeks) and this is exactly what I needed to read. Thank you kind sir. 
Im gonna look in to cryptostream but just wondering does it work if i return Encoding.UTF8.GetString(resultArray); Insted of Convert.ToBase64String(resultArray);? Btw do you have a download to the program in the picture? it looks really cool!
With razor (and maybe with winForms), kind of... but not without a lot of crazy unorthodox methods that isn't really worth it. You're really gonna want to learn HTML, CSS and a little JS for the web. It's pretty easy to pick up since HTML is actually just Mark-Up, not necessarily a language, like C# or Javascript is.
Enabling all the things in a toolset will undoubtedly slow you down, but you can turn everything off if needs be. Look at what you really need, and be strict. Then again, you could be running on a Viglen desktop from 10 years ago, who knows. 
I'm looking for the same thing. The only thing I noticed is that some of the test providers sell 'packages' that include the actual test and also 1 or 2 practice tests. Not sure if that is the case where you are but maybe worth looking into as they might be able to discount this like they do the tests 
Vending Maschine was my favorite.
Nice list. I've forwarded it to noobies.
Definitely going to give some of these a try!
Removed: Rule 4. /r/learnprogramming has an excellent resource in their FAQ that you may find useful: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F EDIT: Forgot to remove it. Oops.
im not sure im with you here, can you explain further? :-)
 property?.Stock += 10; is equivalent to if(property != null) property.Stock += 10; Its a compiler feature; the operator checks the expression for null and therefore throws no `NullPointerException`... Beware: propertyA.propertyB?.Method(); still throws if propertyA == null
Is it hard to get accepted to the store ?
Unless there's some special behaviour with `ICloneable` and JSON, feel free to use `ICloneable`. The `ICloneable` interface is generally frowned upon when exposing a public API because it's not typesafe and doesn't specify shallow or deep cloning behaviour. But if you know what the cloning behaviour is of your JSON objects, and you're just using it in your internal code implementations, then there's no harm in using it. If it's working for you as-is, then there is no reason to change it.
But if I use JS, HTML and CSS. Will that work on the app? Do I have to develop the app separately from the website?
But if I use JS, HTML and CSS. Will that work on the app? Do I have to develop the app separately from the website?
But if I use JS, HTML and CSS. Will that work on the app? Do I have to develop the app separately from the website?
So do I learn HTML, CSS, and JavaScript along with Asp.net? Will I have to rewrite the app, separate from the website?
The latest version of mRemoteNG is open-source and built on C#. Depending on the kind of remote administration you are after, you might get some pointers from it: https://github.com/mRemoteNG/mRemoteNG
God no.
I haven't tested it but I don't think your code will compile. *DownloadFileAsync* requires a *Uri* object as the first parameter but you're passing a string. You could try objClient.DownloadFileAsync(new Uri(strServerPath + "/" + strFileName), strDownloadLocation);
Whatcha dealing with?
When I am in a situation where I want to pull my hair out I usually have 10 tabs open with solution for a problem X where solution does not work because: 1. Solution is from 2004 and works only on windows XP with windows forms. 2. Solution is from 2006 and works only on desktop WPF 3. Solution is from 2010 and works only on silverlight 4. Solution is from 2011 and works only on windows phone 7 5. Solution is from 2014 and works only on windows phone 8 update 2 6. Solution is from 2016 but it worked only on .net core version 0.1 RC2 update 7 that was available on April 1 2016 from 9am until 12pm.
&gt; No one is going to tell you your app is stupid or inane. Sometimes it happens. I had one app that was suspended in the store because it had "duplicate functionality" or something like that. Apparently it was reviewed by a human who had no idea what he/she was looking at. I had to send them "come on guys" email and app was restored. It happened only once though. Most of the time approval process is automated and quick. Updates are published in less than 24 hours. 
Multiplying arrays. Take input from keyboard to know the dimensions of the arrays, then get the values. Make a menu to select whether they want to add, subtract, multiply, etc. Can be console application or windowed
If you are talking server then probably but mono is used for Xamarin and desktop Linux apps.
Please also tell us which tutorials, books, links you used to get where you are now.
ah its the store for the phone apps. I thought its the store for windows programs. 
I wanted to answer this question for you, because you've asked it over and over, and not seen a proper answer. Applications are built in layers. A typical, simple application might have a layer which accesses a database, a layer which implements the business rules (and makes use of the data access layer), and a layer which presents a user interface (and makes use of the business layer). In your scenario, you ought to be able to share the code for all of the layers except for the user interface layer. How this will work is as follows: you might build a Windows Forms program, which uses classes that implements your business layer. If you now move that to MVC, you won't be able to re-use the Windows Forms layer. But your Windows Forms application uses classes that implements the business layer, and you *should* be able to re-use them. In MVC, you will built the web page in Razor (which is HTML with embedded C# in it), and you will build "controllers" that deliver Razor pages to the client. The controllers will make use of the same business classes that your Windows Forms program used, and will deliver (some of) these to Razor as the "Model" which is used to build your HTML. Of course, this only works if the program has been correctly designed from the start, otherwise your classes will be too specific to the particular application they're being used in, and won't be able to be re-used in another application. It takes plenty of practice and good discipline to be able to do this, especially for a beginner, but that's what you're aiming for.
gosh it was so easy to fix...since the manufacturer as I mentioned is lazy loaded, all I had to do was this workSheet.Cells[index + 2, 5].Value = currentRecord.Manufacturer.Company; as opposed to workSheet.Cells[index + 2, 5].Value = currentRecord.ManufacturerID;
Cool can't wait. Thx a lot. 
- Open *.sln/*.csproj in Visual Studio - Install MSBuild and start it in the directory which contains these files / pass the *.sln/*.csproj as a command line argument 
These are source files so you will need to build them then either run the output (whatever type it's setup for). To edit them or test you will need a development environment that supports C# files. You can technically edit them in something as simple as notepad, but Visual Studio is best.
It seems that you don't have Visual Studio installed. You can grab the free version from here: https://www.visualstudio.com/downloads/
[removed]
+1 for good ol' Bob! I've recommended him to several people who also like him! I enjoy his teaching style immensely. He has good pacing and is a very dynamic speaker. It's almost like a friend is explaining it to you.
This is the correct answer. After you have made the list a public property (like you do with barcode, name, serie and stock in the Template class), you could try experimenting with [data binding](http://www.wpf-tutorial.com/data-binding/introduction/). You can then bind the list directly to e.g. a data grid.
Relevant: https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png
[Original Source](https://xkcd.com/979/) [Mobile](https://m.xkcd.com/979/) **Title:** Wisdom of the Ancients **Title-text:** All long help threads should have a sticky globally\-editable post at the top saying 'DEAR PEOPLE FROM THE FUTURE\: Here's what we've figured out so far \.\.\.' [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/979#Explanation) **Stats:** This comic has been referenced 1910 times, representing 1.2845% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ddsi9q4)
Yeah I feel like I'm missing something here, why the need to clone when working with JSON? 
As mentioned previously; I am a beginner so go easy on me
Whenever you want optional parameters, simply set the parameter to equal the default in the constructor, like this: //So in this case, red would default to 1 and green would default to 2, if not specified on initialization public Color(byte red = 1, byte green = 2) { } Just keep in mind that optional parameters have to come after required ones.
No problem, PM me if anything else comes up, I'm still learning the language myself and am happy to give pointers.
I would recommend checking out some of the [top IMAP packages on NuGet](https://www.nuget.org/packages?q=imap).
what does your constructor look like now that gives errors?
Where did u download them from and for what purpose?
Oh come on! Link the stupid app, we're all curious!
GitHub, and apparently it'll solve any webassign problem with a math question in it
I personally try to avoid this method, because it makes it harder to change in the future. If you want to remove one of the parameters or add one, you now have to redo all the callers. I personally like making multiple constructors that feed into each other to allow backwards compatibility and future expansion. public Color() : this(1, 2) { } public Color(byte red) : this(red, 2) { } public Color(byte red, byte green) { // Logic Here } 
Look at [Mailkit](https://github.com/jstedfast/MailKit). /u/jstedfast did a really nice job with it.
:)
Interfaces are fundamentally different than classes. As an example, classes can implement multiple interfaces, but can derive only one class.
That's probably not the best example of why interfaces are fundamentally different than classes. In C#, single inheritance may be true, but it's certainly not true of other languages (e.g. C++). I usually explain the difference between interfaces and classes as a contract for how something is supposed to behave versus the details of how it actually behaves.
Sweet, do you think there's a market for fart apps?
Congrats! Thanks for posting the path you took. What platform did you publish to? And what did it cost? What did you use? (Entity framework, MVC... I'm assuming) what else? 
Just what I needed. Thanks!
Name easily leads to the thought that this is something official. Actually it's just yet another Slack channel.
You are expecting a synchronization object when instead you are dealing with a memory barrier. The `volatile` keyword is just syntax magic around `Volatile.Read` and `Volatile.Write`. For the most part, I recommend you don't use the keyword and instead explicitly call the `Volatile` class (mainly for perf reasons as something like `x = x + x` results in three memory barriers when you only actually need one) `Volatile.Write` says: &gt; If a read or write appears before this method in the code, the processor cannot move it after this method. https://msdn.microsoft.com/en-us/library/system.threading.volatile.write(v=vs.110).aspx `Volatile.Read` says: &gt; If a read or write appears after this method in the code, the processor cannot move it before this method. https://msdn.microsoft.com/en-us/library/system.threading.volatile.read(v=vs.110).aspx So based on that, the compiler is free to rearrange the individual assignments in the example as it sees fit. Within `Test1` and `Test2` there is no dependency between the two assignments and the memory barriers allow them be rearranged if the compiler wants to. This is all expected. `volatile` is NOT a synchronization object. It just prevents the re-ordering of assignments within a method. `volatile` guarantees that the most recent version is available. If the compiler performs an optimization that reverses the order of the two assignments (there are many reasons this could happen), that still holds true. The compiler can choose to emit bytecode that assigns `a` and `b` before assigning `x` and `y` and according to the semantics of a volatile read &amp; write, there is nothing wrong with it. If you have two threads that depend on the results that the other thread is producing, you need to actually introduce a synchronization concept like a lock.
[This](https://docs.microsoft.com/en-us/uwp/api/Windows.Data.Pdf) should do the trick.
problem about multi-treading and memory, is that a multi threaded program that access the same memory at the same time (even in volatile mode), can be unlucky and read a block, that is also getting written to. i dont think this will happen with a string, as they are immutable, and the entire memory block will be replaced to a new sector. but a byte array can use the same memory blocks. so first if you have a byte array saying 255 255 255 255 255 255 255 255 now you have a thread writing that array to say 0 0 0 0 0 0 0 0 however in the middle of the process you try and read the memory, you can get unlucky to get. 0 0 0 0 0 0 255 255 the writing process was not done changing the values, and you got a mix between the old and new values. this can be prevented by using refs ofcause.
I'm able to reproduce the behavior reliably with the following code. It seems to occur significantly more often (but not exclusively) in release builds without a debugger attached. class Program { static void Main() { while (true) { int failures = 0; for (int i = 0; i &lt; 10000; i++) { var test = new VolatileTest(); var thread1 = new Thread(test.SetX); var thread2 = new Thread(test.SetY); thread1.Start(); thread2.Start(); test.Ready = true; thread1.Join(); thread2.Join(); if (test.A == 0 &amp;&amp; test.B == 0) failures++; } Console.WriteLine($"{failures} failures"); } } } class VolatileTest { public volatile bool Ready; private volatile int _x; private volatile int _y; public int A = -1; public int B = -1; private void Wait() { while (!Ready) ; } public void SetX() { Wait(); _x = 1; A = _y; } public void SetY() { Wait(); _y = 1; B = _x; } }
According to https://msdn.microsoft.com/en-us/magazine/jj883956.aspx it can certainly happen. (See section 'C# Memory Model Implementation on the x86-x64'.) Due to the store buffer on the CPU, a write to shared memory followed by a read from some other shared memory can appear to be reordered because the write is delayed by the store buffer. As the article you link says, store release followed by read acquire can be reordered, so `volatile` does not prevent this. You'd need a Thread.MemoryBarrier() between the read and the write to fix this scenario. (Or ofc just use synchronization primitives instead of messing around with lock-free code) Amusingly enough, since x86-64 already has release/acquire semantics on every store/load, `volatile` on x86-64 doesn't actually do anything other than prevent some compiler optimizations.
I'd add head first design patterns also, It's not a c# book , but the ideas of what design patterns are, and how to use them is well laid out
In practice, both ~~Volatile.Write~~Thread.VolatileWrite and ~~Volatile.Read~~Thread.VolatileRead perform a full memory barrier, like Thread.MemoryBarrier, at least on x86. 
Are you sure? I thought they introduced the `Volatile.Read`/`Volatile.Write` methods because they already made that mistake with `Thread.VolatileWrite`/`Thread.VolatileRead`? Edit: At any rate the two calls still have a difference when talking about the optimisations the compiler/runtime is allowed to make at least.
Yeah, I am less sure now than when I wrote it. It's at least clear that it's *not* the case for x86-64. I think you're right, I am conflating two somewhat different issues :).
Windows Identity Foundation communicates well with both Windows Communication Foundation and Active Directory Federation Services https://msdn.microsoft.com/en-us/library/jj161104(v=vs.110).aspx https://blogs.msdn.microsoft.com/appfabriccat/2010/12/14/ad-fs-2-0-to-secure-wcf-and-workflow-services-hosted-in-windows-server-appfabric/ Its all done with Tokens. WIF retrieves a token from ADFS which is used to authenticate and authorise WCF services via Claims
Thats called project X Keyscore.. https://en.wikipedia.org/wiki/XKeyscore
Yes, there is a difference in how they work. `Task.Run` will take a thread from the thread pool use it to execute the synchronous `ReadToEnd()` method, blocking it until it is completed. The fully asynchronous `ReadToEndAsync()` will not block any additional threads. If your code is largely single threaded this difference will likely not be obvious from the 'outside', but with larger parallel workloads (e.g. a webapp answering many requests at once) this could exhaust the thread pool and slow down your application. In GUI applications, async methods have the additional advantage that they won't freeze your interface while the result is being awaited.
 $changed = $null $names = $null $obj.PrepareQuery($datasource, $dataset, [ref]$changed, [ref]$names); The note in MSDN is describing when the 4th parameter will have values based on the value of the first parameter.
So, I think I've worked out what was wrong: I did indeed need to declare the `Detector` at the top of the program, just inside the `Form1` class, as suggested. While this wasn't working when I debugged the program, as soon as I rebuilt the solution and ran the .exe, it was working! So, I think it may be an issue with the AForge.NET files not being included in my Debug setup, meaning that their functionality is not available until I compile the program. Thanks for your help!
I've personally never found the practice tests to be all that useful. Microsoft exams are designed to test your working knowledge so it can be quite hard to create practice tests for them. It's far better to spend the time writing more practice code than taking costly practice exams. Purchase the "Exam Replay with Practice Test" offer if it's within your budget and available in your country. With this offer you can take the real test and be safe in the knowledge that you have a free retest. There is no substitute for the real test in exam conditions, it will give you an accurate measurement for your progress and show you where to concentrate your studying. You'll also get a practice test so you can decide first hand if they're worth the cost for you. 
Wow! This was unexpected. Why google was hiding this one from me? :)
....immediately thought of this too
Yep. The `Name` property that you probably discovered is on the base class called `InternetAddress`. There are 2 subclasses called `GroupAddress` and `MailboxAddress`. You can pretty much ignore `GroupAddress` because it is very rarely used (other than to do "To: undisclosed-recipients:;"). Once you cast to a `MailboxAddress`, you'll find an `Address` property which has the string representing the email address. Hope that helps!
If i recall debugging does not rearrange the code. Code in release is optimized and that has the reordering.
&gt; Microsoft have confirmed they mistakenly published the package on NuGet.org and will be removing it shortly. Talk about throwing a fucking hissy fit. Oh, Microsoft accidentally copy pasted the wrong license to a package as has happened several times before? No worries, make them aware of it and ship with the debugger anyway, as they've already admitted it was a mistake. Even if you was really legally butthurt, you could just delay the release of that version of Rider by a couple of weeks until the license is updated. Honestly, this just seems like JetBrains are wishing to antagonise Microsoft/the .NET team to me.
Love this. I did a similar thing last year, used bob tabor video resources, can confirm they are great. Thanks for sharing the other links.
I'm reading that blog entry differently than you do. I understand it as publishing the package at all was the error, not publishing it with a wrong license. Not sure which interpretation is the correct one though.
Yeah i got it to work! thank you so much both with the help and with the amazing library! :D
is it just supposed to produce the numbers, Like say for instance you put 3 random numbers they get a txt file with the numbers generated? without giving it away , because the point is to work it out. Think about for loops and appending texts files/strings in general. that should help. hit me back when you come up with something. 
in addition to that Object1 is a list not a double[][]. The Object1 Contains Objects that have a double[][] in them. So first you need to find the object you are looking in Object1 then invoke its member. For example: Mean(Object1[0].DoubleArrayVariableName); Can you share more of your code?
That's what I figured however, I was given a double as a parameter and I'm not allowed to change it.
yes
I dont think links like that exist what you learn in c++ will help in c# but allot of the boiler plate will be done for you but each language has its own curve balls and should pick up easily enough by working on a project There is tons of info online for both unity and c# so i think you should just jump feet first into it see what makes sense for you in the code already
Generate number -&gt; [AppendText](https://msdn.microsoft.com/en-us/library/system.io.file.appendtext(v=vs.110\).aspx) \n -&gt; Loop ?
Generally a large company using another large company's unlicensed closed-source software is a pretty big no-no. It sounds like JetBrains reached out to MS and were told "oops, we'll remove the package". That's a "this isn't meant to be used by you, you don't get a license for this" response, not a "oops, that was an accident, we'll talk to legal and resolve this. Could you hold back your release for a day?".
I actually prefer video training. I did a training on C# via MVA about a year ago, it was Bob Tabor's C# Fundamentals. But I never looked MVA trainings again. I'll check them out later. Thank you. 
you're welcome :)
That article suggests that read introduction is a sane optimization, but it's not. If .NET's JIT compiler introduces reads, as shown in that article, it's a bug. It's not a sane optimization, because any other running thread may write to the same field in between the current thread's reads. This would be quite easy to reproduce in CPU architectures with a strong memory model. Even in CPU architectures with a weak memory model, an affecting memory barrier (even a spurious one not intentionally provoked by the running code) may have occurred between reads. One such example is if a thread is preemptively suspended by the OS between reads and later scheduled to run on a different core; if another thread wrote to that field and has since then also incurred into an affecting memory barrier for whatever reason, the introduced read may now return a different value. Shared cache eviction may serve as a memory barrier, especially within a core with hyper-threading or similar SMT.
Uh yeah, but I actually understand how the double[][] works now 
You shouldn't need to create variables for the random numbers. Just output them to the file. 
-ish. Memory barriers are a key part of building synchronization objects, but they don't perform synchronization on their own; they just provide the needed memory visibility to build synchronization objects. But given that C# has the .NET Framework available, the situations that need a memory barrier instead of a pre-built synchronization object are few and far between. Your example would be better off using something like a `SemaphoreSlim` or a `ManualResetEventSlim`. Any time you find yourself saying "I need to wait for another thread to reach a certain point before I can proceed", just use a pre-built lock instead of building your own out of `volatile`.
Looks like idea of people using competing products to develop .NET Core apps isn't part of Microsoft's open source vision :-/
[Image](http://imgs.xkcd.com/comics/random_number.png) [Mobile](https://m.xkcd.com/221/) **Title:** Random Number **Title-text:** RFC 1149\.5 specifies 4 as the standard IEEE\-vetted random number\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/221#Explanation) **Stats:** This comic has been referenced 675 times, representing 0.4534% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ddugapm)
&gt; Of course, What may be obvious to you may not be to others. &gt; it's better to annotate your accesses rather than the memory location, so rather than label `value` as `volatile`, in real-world code I'd prefer `Volatile.Write`/`Volatile.Read` calls. I have mixed feelings about this. I would prefer to annotate any references rather than just fields. Using explicit accesses solely with `Volatile.*` makes it too easy to miss one. You shouldn't **ever** mix volatile accesses with non-volatile accesses on the same reference, as that makes it even easier to miss an actually needed volatile access. For non-volatile accesses, use local variables. As for spinning in `Monitor`, it ends up yielding, so it's generally more well behaved for contention or long waits, unlike the example I've shown.
&gt; Your example would be better off using something like a `SemaphoreSlim` or a `ManualResetEventSlim`. I agree. &gt; Any time you find yourself saying "I need to wait for another thread to reach a certain point before I can proceed", just use a pre-built lock instead of building your own out of `volatile`. You wouldn't ever have lock-free data structures thinking like that. But again, .NET already has the most often required ones.
I'd create all, write once. For efficiency. 
But i need all of those brushes defined for usage elsewhere. I suppose i could define the colors and then reference the color resources during brush creation, but thats a little ugly. Basicly what i want to do is this, but in XAML... (apologies im on mobile) public static class Pallete { // ...etc public static SolidColorBrush mtGrey800 = new SolidColorBrush(Color.FromRGB(40,40,40)); public static SolidColorBrush mtGrey900 = new SolidColorBrush(Color.FromRGB(20,20,20)); //...etc } And i could use it elsewhere like this public static class MaterialHybrid { public static SolidColorBrush UnderlineBrush = Pallete.mtGrey900; } Just referencing its value. 
&gt; My teacher specifically stated that it should be written without using any arrays. ... 
And? Who ever said to use arrays? 
You could do it with html and Javascript 
On the odd occasion I have to dive into regexes, I personally use https://txt2re.com/ for building the expression and http://regexr.com/ for testing.
[called it](https://www.reddit.com/r/csharp/comments/5ufakk/jetbrains_removes_coreclr_debugger_from/ddu4p18/)
I use regex101 to assist me building regexes and regexper.com to display it. 
Not to mention the fact that nuget package licenses are fucking MUTABLE! All a publisher has to do is change the content of the license url and anyone depending on that library can be bound to it regardless of what it stated when built against. I've wanted to believe in an open MS. But I just can't.
I'm not sure who to dislike! 
Personally, i dislike people spreading baseless F.U.D. because zomg Micro$oft. Rather than rant more i'll link [this post](https://www.reddit.com/r/programming/comments/5ue5pa/rider_will_not_allow_debugging_net_core/ddtk47q/) :) 
For (1), speak to a lawyer. In fact, without knowing what country you're living in, you may be able to get some advice on the process from your local city hall's information desk. For (4): read the T&amp;Cs that MS supply. 
They are not too bad if you don't need them for cryptographic purposes. I'm sure OP will be fine. 
4) You can use VS2015 commercially if your company is small enough and you make small enough profit. So I guess your company is eligible for it, but I don't remember exact numbers. Best you can do is to read [License Terms](https://www.visualstudio.com/license-terms/mt171547/) yourself. Additionally I would steer towards VS 2017, because its release is very soon. 5) In my country there is quite strong demand for web sites and web apps, and ASP.NET is really good technology for building them, but you need to check whats needed in your country. Even though ASP.NET is great technology there may not be a demand for it in your country.
[removed]
This isn't really a helpful post, but, at this point it may just be better to switch to [Monogame](http://www.monogame.net/).
Sorry, maybe i'm reading too much into what you're writing. &gt; All a publisher has to do is change the content of the license url and anyone depending on that library can be bound to it regardless of what it stated when built against. I thought maybe you were suggesting they might change the content of the license to something less-good at some point down the road. My bad. All i've been saying is, they might not. (or maybe continue their trend, and change it to something more-good.) &gt; I've wanted to believe in an open MS. But I just can't. I thought maybe you were suggesting you have a hard[er] time believing in an open MS after reading this stuff. My bad. What i said was: &gt; Now, i'm not claiming to know the future How you got &gt; You're the fortune reader here. By your own admission. Out of that, i don't know. 
How is this even downvotable? I'm not theorizing here. It's a fact! In fact, there's an issue right now addressing this very fact in the nuget repo. Don't be blind.
I'm not at a pc. So quoting is not easy. So I will forgo that. Yes. The way nuget is setup currently, a publisher can absolutely change the license that you agreed to. That is not cool. I never alluded that MS would do that. Simply that it's possible. And my belief, as a believer in oss, is that is unacceptable. I also don't believe that they "accidentally" released one the most important packages of the.net ecosystem. How I got your future reading is from you saying, paraphrasing, "fast forward when they release under a license ". Now you can not possibly know what's coming. That's just blind patriotism. I've been a ms dev for so long and have heard this shit so many times. Call me crazy, but I don't buy it. Ms will never be the oss company everyone wants. They have something else up their sleeve. I don't care to keep this conversation up. I have software to write. Cheers, Chris 
Why should the compiler care about code breaking in a multithreaded scenario when the memory isn't marked volatile? 
You can use RNGCryptoServiceProvider Class (System.Security.Cryptography) to provide not pseudo random numbers.
You could probably use Lucene.Net and write a custom tokenizer to add acronymns in.
Yep. Use that rather than `Random.Next()`
&gt; What may be obvious to you may not be to others. Sure, but I'm in good company here. See http://joeduffyblog.com/2010/12/04/sayonara-volatile/ Also, &gt; You shouldn't **ever** mix volatile accesses with non-volatile accesses on the same reference I think that's a bit hyperbolic, and I disagree. It can be very wasteful to force a memfence on *every* read or write of a variable sometimes.
They also followed up saying MS *accidentally* posted it publicly on Nuget and they are working on removing it. So that sums up that it was a complete mistake to even be public in the first place. It may or may not ever come back to Nuget. I hope it does, but this is MS. I doubt they'll want to give competitors tools their debugger plugin. That gives them a big leg-up in the tooling space.
I'm not sure I follow. The way you're reading it the CLI should effectively treat every single shared memory access as volatile, which clearly cannot be the intent of the spec. &gt;Conforming implementations of the CLI are free to execute programs using any technology that guarantees, within a single thread of execution, that side-effects and exceptions generated by a thread are visible in the order specified by the CIL. For this purpose only volatile operations (including volatile reads) constitute visible side-effects. So: volatile accesses must not appear to be reordered. Reordering of non-volatile accesses is unrestricted as they are explicitly not considered side-effects. It does note that volatile accesses may affect the visibility of non-volatile references, but in the same breath of restating that 'only volatile operations constitute visible side-effects'. It seems clear to me that the intent is *not* to consider the transitive closure of anything you could possibly access through a volatile reference to be a visible side-effect. It's just a warning that even though a reference 'foo' is volatile and thus its value won't appear out of order, 'foo.bar' is not subject to this guarantee unless 'bar' is itself marked volatile. Finally this part: &gt;Note: An optimizing compiler from CIL to native code is permitted to reorder code, provided that it guarantees both the single-thread semantics described in §I.12.6 and the cross-thread semantics of volatile operations. Is just telling us that the compiler is allowed to rewrite code (while of course still having to respect the ordering guarantees on volatile accesses.) So in summary, the compiler is not required to ensure that the order of non-volatile operations corresponds to the CIL order of these operations, and specifically it is noted that the compiler may just rewrite the order explicitly if it so pleases. For volatile operations on the other hand, it needs to abide by some rules. 
These are still pseudorandom. Just better quality (and a lot slower to generate) than System.Random. For non-cryptographic purposes I'd suggest taking one from http://xoroshiro.di.unimi.it/. They're pretty trivial to port from C to C#.
Not a standalone app, but Resharpen has a Regex validator under the Resharper &gt; Tools &gt; Validate Regular Expression. You can also directly access it with Alt-Enter on a regex
The license of the whole package might be influenced by some historical piece of code, which they need to rewrite / remove. What I have got from this is probably some internal miscommunication, when someone published the debugger before legal matters were solved. Unfortunately, from what you've written so far, I've got the feeling that you don't want a reasonable discussion, only reasons to hate on MS.
Can this be achieved through binding?
&gt; That article doesn't mean what I think you think it means. It really goes against your argument of tagging accesses. No, it really doesn't. I've read that article many times. Take this quote for example: *"Volatiles on storage locations are out. Instead, we must throw fences into programmer’s faces, and force them to understand each and every one that occurs. And moreover, force them to decide about each and every one that occurs.* **Specifically, hidden fences thanks to volatile are no longer.** *"*. Yes, he then goes on to create a Java-style set of `AtomicXYZ` wrappers (e.g. `Reference&lt;T&gt;`) *but still requires explicit membars such as `ReadAcquireFence()`, rather than hiding them behind abstractions*. In reply to the rest of your comment, I'm aware of what half-fences do/are and what `Volatile.Read/Write` emit with respect to that. You gave an example using explicit membars for the statement `x = x + x`, calling it 'obnoxious'. What may be obnoxious to you may not be to others, and I personally prefer the explicit nature of `Volatile` class calls instead of requiring future programmers to remember that `x` is marked `volatile`. &gt; Finally, I repeat from my last comment, it's way too easy to miss a required Volatile.Read or Volatile.Write if you're using non-volatile accesses on the same reference. Memory-barrier-protected shared state shouldn't be used in a global or easily-accessible way. It's intended for succinct usage in order to build concurrency synchronization mechanisms. In other words, if you're at risk of 'forgetting' a membar on something, you're very likely oversharing internal state (or at least, not abstracting away your mechanism well enough). Nonetheless, I do accept that some of this probably comes down to personal experience and preference. Personally though, I will continue to take Joe Duffy's advice of using explicit barriers rather than the `volatile` modifier.
Every single time you mention MS, you accompany it with some insult. You ignore all the arguments, every call for moderation in your hateful approach. To add to the topic, the debuger package in question is a port of VS debugger backend for full .NET framework. That is probably the reason behind the licensing they currently use. It's not unlikely that some part of it is still contains something they want to keep internal (for example code related to VS), but they wanted to release the debugger together with the source.
&gt; Yes, he then goes on to create a Java-style set of `AtomicXYZ` wrappers (e.g. `Reference&lt;T&gt;`) Pbut still requires explicit membars such as `ReadAcquireFence()`, rather than hiding them behind abstractions.* The first part is the whole difference. The current `Volatile.Read(ref &lt;place&gt;)` and Duffy's `Reference&lt;T&gt;.ReadAcquireFence` are in different leagues, as long as you don't use `ReadUnfenced` or that it throws an exception by default as I suggested (same for writes). If you use `*Unfenced`, then they're totally at odds, but at least `*Unfenced` is very explicit and way easier to detect than an access without `Volatile.Read`/`Volatile.Write`. I'm not saying the `volatile` on fields is an ideal solution. No, something closer to the ideal solution would extend to references to that field, or any reference, such as to an array's element. An object/struct that forces you to use volatile semantics is ideal regarding correctness, optionally allowing unfenced operations if intended as such. It may not be ideal in other ways, such as being more verbose, but that's not my point at all. For instance, all other field declarations are as far away from the field itself as the `volatile` declaration: visibility, instance vs static, readonly, type, attributes, initialization, etc. It doesn't bother me in anyway that there is a `volatile` declaration. I've used it, you can see the CLR and the BCL uses it, and in fact, it's way less common to see `Volatile.Read` and `Volatile.Write` unless to access array elements in a volatile way or something that is already an opaque reference, such as a `ref` parameter. &gt; Nonetheless, I do accept that some of this probably comes down to personal experience and preference. Indeed.
http://www.rubular.com/
Yes, I know that. But I think OP's teacher was more angling towards writing each value as it is produced.
It depends on context. In this context it doesn't really matter. Without a StringBuilder I get:- Allocated: 24 kb Peak Working Set: 11,152 kb With a StringBuilder I get:- Allocated: 8 kb Peak Working Set: 11,156 kb
I prefer nCrunch as it is smart enough to run dirty tests as I type. With R#'s version you have to make sure you save the file to kick off the dirty test execution.
My only warning is you'll be competing with every freelancer out there, and worse, not just your country but world wide if you also open the door on those freelancer bidding sites, which are a good way to get work but a bad way to make money because many requesters lean towards the best price. The size of this market is so big, often your best selling aspect is your price point, not your quality (everybody will claim they want quality, but won't pay for it) so really you're entering a business that's akin to fast food, and you want to compete with McDonalds, Wendy's, and Burger King.
Okay. I've had the same thought. But if this isn't a good idea, what's the best way for a programmer to make money apart from working for a company? Because where I live, we have a lot of small programming comapanies running from their owners houses, and making a ton of money. With the total of staff adding up to about 4 people. 2 Programmers. 1 Marketing Person and 1 Admin Person. Its not a very big city and people are making money here. 
This is really exciting! C# seems to get closer and closer to Python, and vice versa. 
I don't like leaving anything up to timing magic. 
I've had an issue that was similar to this: http://stackoverflow.com/questions/2849341/there-is-no-viewdata-item-of-type-ienumerableselectlistitem-that-has-the-key 
Just to be sure, Joe's solution is definitely the best of both worlds: Inability to 'forget' a membar, but forces you to actually think about each one. But going all the way back to the beginning of this conversation, all I was saying is that of the two inbuilt solutions, I prefer explicit barriers; for the same reasons as Joe.
How have you missed the constant weekly articles on it since 2015?
&gt;Are you saying that you don't agree with me or that you don't see there's a contradiction in the specification? I can understand the former, not the latter. I don't see a contradiction in the spec, although I think the wording is quite inexact so I'm not sure I'm reading it correctly. I understand your examples but I'm not sure what the conclusion is you're trying to support by presenting them, or how it connects to introducing non-volatile reads. It is clear to me that publishing the reference to the Data instance via a store release prevents the initialization writes from moving past it, and therefore another thread won't see a partially-uninitialized object. But is there a way that inserting an extra non-volatile read (while still preserving the store-release and load-acquire semantics of volatile operations) would break this?
I wonder if they are regretting their decision to not port to Rosyln. CodeRush did it, and are still trying to get back to where they were, but are picking up the new syntax for free. They don't break.every time there is a new update to C#.
It can be fast, though. I've got a solution with 120 projects with solution-wide analysis enabled and R# doesn't get in my way at all. The latest incarnations also use a lot less memory (I very rarely see the memory indicator on the bottom-left climb over 1GB ... and it usually goes right back down again). About 85,000 LOC. Are you using WPF or the XAML editor? I've seen slowdowns there. I doubt R# regrets not having gone to Roslyn. The blog post they wrote at the time they made the decision made sense: their engine was more powerful than Roslyn and there are analyses that they can make that Roslyn can't (or couldn't) (yet).
Note that ReadToEndAsync also returns a Task; you don't have to await it right away. 
That was meant to be in response to the last paragraph about sync vs async in general, I guess I could have made that clearer.
It looks like the person who did the original extensions are working/planning on a VS 2017 version. http://mxa.codeplex.com/releases/view/630357 Separately, you can open the vsix file from the 2015 download, you just need to rename it to a .zip file. I don't know if that will help actually get it working on 2017, but maybe it's something you can figure out in the meantime.
It's always been faster, but the Roslyn version is practically no load at all. Though again, the CodeRush Rosyln edition is still playing catchup on features.
Found [a simple example without Identity](https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/samples/Mvc.Client) and adapted it to my app. Pretty simple setup to set up, turns out. I just had to use the 'UseGoogleAuthentication' extension method in my 'Configure' method and return a 'Challenge' method from my button to Google Authentication. I wish it had been easier to find. I'll still be looking around for more details on how to configure Identity Framework. It would clearly be a more robust solution, but in my case the docs don't tell me how to do what I need to do.
Do whatever you prefer. Especially for learning courses, sometimes it's best to try to separate and organize aspects together. Sometimes one can consider this more understandable for people learning the language. In this case, it's separating the declaration from the initialization. I haven't seen that particular exercise, but it's also plausible that field declaration+initialization hasn't been covered yet. Regardless, except in cases where the initialization logic isn't possible to put in-line with the declaration, it's usually just a personal preference which style one uses. Just go with whatever you find most readable/maintainable.
Right click &gt; rename in Visual Studio should maintain history. At least it does in git. Unrelated but front end automation aren't unit tests. They're functional or integration tests. 
This is great. Just a tip, you can use the null propagation operator for calling the handler in OnPropertyChanged. Then you don't have to store the handler to a local variable and check for null. I.E.: handler?.Invoke(this, new PropertyChangedEventArgs(displayTimeElapsed)) The DisplayTimeElapsed can also be a DateTime instead of a string. The time can be formatted as necessary in the .xaml file using StringFormat.
Awesome. Thanks for the info
Thank you so much! wh.WaitOne(1000); was def causing the issue, it was just waiting for each line and on bigger files that easily built up.
I prefer this because it makes code grow vertically instead of horizontally
so for reference I was missing this.Controls.Add(edit);
Except XNA still works fine (with VS2015) and last time I checked monogame content was still a pain to deal with
LOL. You are so full of shit it hurts man. You say: "I don't base my arguments on speculations" and follow up immediately with "I just present possiblities". We are done here.
Yes, but only for 2017 Enterprise Edition. Whether or not the functionality and performance are comparable to NCrunch/R#, that license requirement will mean many developers will have to continue using the existing extensions.
https://www.reddit.com/r/csharp/search?q=project+idea&amp;restrict_sr=on&amp;sort=relevance&amp;t=all
Yes, ignore me because you have nothing worth any value to say? I said what could be happening because you presented your opinion as the only valid truth, when it was in fact just a different speculation. I didn't base my arguments on any of these, I didn't say it has to be that way. I just showed you a different possiblity. My arguments were only about you ignoring the other possible scenarios. You don't know shit about what's happening inside MS. I don't either. That's why I don't spit hateful ignorant comments and wait for actions. What MS has done is worthy of our close attention, but only to see whether they will do the right thing in future. Not to shit on them when they didn't do or say anything definite. Now let me put your actions into perspective. A person (MS) has bumped into another person (JetBrains) because the first person wasn't paying attention. The first person apologized, the second person acknowledged their mistake, but he is not angry at all. A bystander (you) starts screaming that the first person tried to steal the wallet, just because he bumped into someone.
Removed: Rule 4. /r/learnprogramming has some resources on this, for example: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F
I can't speak for anyone else, but this is the first I've heard of avahi. Maybe that has something to do with it
Haven't heard of anyone using Avahi in C#, but the [client header api haven't been changed for years, so it's likely that the original binding for it in C# should still work.](https://github.com/lathiat/avahi/tree/master/avahi-client) If it's not working, it still pretty relatively straightforward to bind Avahi library.
LOL - You just can't let it go can you? My argument is based on the facts. Yours is based on speculation and possibilities and a willful brushing away of the known facts. Until MS takes an action or makes a statement that makes it clear this wasn't about pulling the rug out from under a competitor who was threatening one of their revenue streams, I'm going to continue to assume that's exactly what this was. Because the facts point me to that conclusion. Until the facts point me to a different one, my opinion will not change short of somebody pointing out a pertinent fact which I previously overlooked that changes things. You seem incapable of such a feat despite all of your pontification to the contrary. Feel free to keep arguing on the basis of supposition. But know this: I give no fucks. I suspect given your previous behavior, you won't take that statement seriously and will reply with more tomfoolery instead. Nevertheless consider this: MS could literally end this discussion with a single statement on a dev blog somewhere. The fact they haven't is telling. Having had more time to think about this though, I think this move by MS will ultimately make Rider a better product. The less dependencies Rider has on closed source MS binaries regardless of their license, the better off all of us will be. MS has a history which makes it hard to trust them and this incident hasn't helped. Therefore Rider reducing its dependencies on MS to a minimally acceptable level (OSS dependencies only) would be a good move, though in the short term not being able to interactively debug .NET Core binaries is going to hurt Rider to be sure.
I'm pretty sure this doesn't apply if you supply an absolute path for the executable filename. 
First things first... That is horrible to read, use pastebin or something that will you let you share your code, formatted properly. People might be able to give a bit more help then :) 
At the moment you have static void Main(string[] args) { //your game code } What you need to do is static void Main(string[] args) { RunGame(); while(true) { Console.WriteLine("Would you like to play again? Yes or No)"; string answer = Console.ReadLine(); if(answer.ToLower() == "yes") { RunGame(); } else { Console.WriteLine("GoodBye"); Break; } } } static void RunGame() { //your game code } 
Monogame is the replacement to XNA, and its API is very similar because it derived itself from XNA If your c# app uses WPF then you can use the drawing constructs in that, which use system.windows.shapes. 
http://www.nuget.org/packages/Zeroconf/
Well there are two or three very distinct paths and you aren't saying which one you need. Do you need fast graphics for games or for manipulating images, drawing, bitmaps etc? If you need the last one, you shouldn't go for any of the game libraries/frameworks you've listed because it's not the right tool for the job. You can choose from `System.Drawing`. However, personally I wouldn't. I'd use SkiaSharp. I won't bother describing it as their docs does a pretty good job: &gt; SkiaSharp is a cross-platform 2D graphics API for .NET platforms based on Google's Skia Graphics Library (https://skia.org/). It provides a comprehensive 2D API that can be used across mobile, server and desktop models to render images. So to break that down: * System.Drawing is not platform independent and also has some nasty dependencies on Windows GDI+. There have been a few ports of System.Drawing for OS's via Mono but again the GDI+ really makes it hard. Some people have also tried to use GDI+ in server scenarios too (e.g. upload an image, add a watermark) which has led to some really horrible bugs in the past. SkiaSharp throws all that bullshit away and is a modern and clean approach, plus it uses the graphics system Google wrote for Chrome. Xamarin wrote SkiaSharp, and runs on many OS's. All round a winner. TLDR: Don't use `System.Drawing`. If you are looking for game libraries/frameworks: * I'd absolutely go for MonoGame as it internally can work on OpenGL *or* DirectX, so it's cross platform. Don't use XNA, it was killed 7 years ago. MonoGame is a drop in replacement. * SFML is also pretty neat and is strictly 2D only. MonoGame can be either. The link to SFML is in the comment at the bottom. If you are wanting a GUI to host some kind of graphics with interaction etc, I'd go for WPF. eg https://www.tutorialspoint.com/wpf/wpf_2d_graphics.htm
This is it. The straw that broke the camel's back. I can't take the idiotic, pointless, time wasting posts in the sub any more. This is the post, along with the 30+ upvotes (?!), that finally convinced me to remove the rss feed for this sub from my reader.
The app has the rights to it if you use a picker to select it.. you only can't open the file when another app has it open, so I'm guessing there's something funny going on with the way the sandboxed API tries to open the file. That said, I agree that it would be a better approach to somehow work with a file within the UWP, or set the third party app to provide a networked data stream to the monitoring app or something, haha.
Submit this question on MSDN forum. Somebody from MS may have an answer. 
Also, whenever one mentions it, one gives the impression of great enthusiasm!
No worries. WPF might be easier, it has in-built animation support that uses DirectX, but SkiaSharp does not have any animation so you'd have to build your own animation layer on top of it which is hard.
OK, I'll give it a shot! Thanks buddy In the mean time I think I'm just going to do this as a WPF app
Incorrect. I believe this is true in Java but C# treats .Equals and == as the same for strings.
I think a do while makes more sense. 
gotta give Win2d some love. It was spearheaded by Shawn Hargreaves, the same developer who lead XNA. It's simple, fast, and modern. https://github.com/Microsoft/Win2D
u can make HiddenWordToString() alot shorter return new string('*', HiddenWord.Length);
Resharper has such a good reputation, performance not withstanding, I can see them holding out for a long time.
It's possible, but if they don't go with Roslyn eventually they'll be slower than everyone else and every new rule they add will be more expensive. If they don't come up with something significant to make up for that it'll be tight. Honestly at the moment resharper is only really worth it in the ultimate bundle where you get their whole suite and that's kind of borderline. Nprofiler is much better than dotTrace if you're buying piecemeal.
If you're going to do mobile you're pretty much going to have to learn some form of HTML5/JavaScript framework.
e.Graphics.DrawImage with some CodeProject magic is pretty fast :p
Getting to grips with TDD is fairly easy. Maintaining the discipline required to do it and getting the time allocated to do it is the hard part. I find that TDD is really great for bug fixes, since you can isolate the bug properly and verify it's fixed, but unless you're in an organisation that really values testing the delay in feature delivery is going to give your manager the shits. If you're in an organisation which does value tests then doing your tests first vs doing them immediately after isn't going to make a lot of difference.
Unity was Microsoft's crack at writing their own IOC container. It was a little bit limited, and searching for help kind of sucked after Unity the game development toolkit became the next big thing, but it worked and had that "It's made by Microsoft" thing going for it with management. Sadly it got largely abandoned when patterns and practices got dissolved. They opened the sourced it, but there hasn't been a commit in almost a year so it's effectively dead. A bit sad, some features were actually better than autofac and it was somewhat saner to deal with.
VS2013: OK, I can't help you there. I haven't used it in years, but I remember that this version was slow for me, as well. VS2015 benefitted from a lot of parallelization and memory/allocation/GC optimization (there are quite a few blogs and videos discussing the immutable libraries they built to improve Roslyn and VS in general). I'm using VS2017RC right now and it's even faster. My only advice is to move to VS2015 or later, if possible. You will notice the difference.
Now I will quote you. "My argument is based on the facts." vs "I'm going to continue to assume". You once again ignored what I said - I don't say anything about what MS is doing, I just tell you that there might be more possible scenarios happening and you are the one making assumptions. MS does not have to make any statement about this. They mistakenly published the debugger, JetBrains asked them about it, they cleared the confusion between themselves. If JetBrains does not make a huge problem out of this, with a lot more information than you, then I don't see any reason to jump to premature conclusions. I chose my stance based on the facts - the way MS has been worling with .NET Core in the past, the way JetBrains communicated it with MS, their confirmation that it was mistake on MS part to publish pre-release debugger. You assume the worst, I don't assume anything. I will wait and see what happens, and if MS will do something I don't like, then I will go and complain. Absence of .NET Core debugging will not really hurt Rider in the short term, both are very young and fast evolving products after all. It would hurt them in the long term, but I believe that JetBrains would be able to work around it and create their own debugger. Hopefully they won't have to, but unlike you, I will wait for confirmations before writing angry comments.
I'm starting to think C# developers are masochists. They will continue to use WinForms despite it's glaring inadequacies instead of WPF? Why? Masochism. WPF is great, there's no reason not to use it. And no, "well WinForms let's us put together something really quick" is not a valid reason 1) because let's face it with that approach that "put together" application is never going to have any further work done on the GUI. 2) WPF also lets you do the drag and drop approach if you don't fancy writing XAML, so there's no reason to stick to WinForms. 3) WPF pushes you into the direction of good practices with MVVM, abstraction etc. which again let's face it almost no one does when using WinForms.
[removed]
Removed: Rule 4. I tested. Yes, it works.
Thing is though, if you you pass a file that doesn't exist it throws a Win32Exception saying 'The system cannot find the file specified'. Still not a clue on how to get to the FileNotFoundException, I'd encourage you to try it yourself aswell using the latest .NET framework. Thanks for the response btw!
https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/
&gt; If you are looking for game libraries/frameworks: &gt; Unity is generally considered the XNA replacement for most as MonoGame is heavily bug-laden when trying to do some of the more advanced XNA stuff (Object instancing for example)
Well Unity is more of a framework and MonoGame less so. I don't like Unity because it relegates your code to "some script running inside Unity" meaning you can't follow any standard conventions, as opposed to "code interacting with the game library".
Interesting. I remember that I came this thing about refactoring a helper stuff. It's my mistake then. I may need to reconsider my try-catch then. 
.NET Core is primarily meant for cross-platform server side apps and command line tools. Nothing currently included in .NET Core supports cross-platform desktop development. Besides, System.Drawing is based on &amp; requires Windows' ancient graphics API, GDI+. 
Removed: Rule 4. Check the sidebar, the sticky, /r/learncsharp, /r/learnprogramming.
Hey - so I've put together a small WPF application that I think does most of what you want. [It's public on GitHub Here](https://github.com/chippiearnold/StaffTimerRedditExample/tree/master) It consists of a single screen with a combo box which features a hard-coded list of 3 names. Select a name, click Add and it will add the user to the list below and start their timer. You can add multiple people from the combo box and each staff member will get their own timer. You can then start and stop individual's timers with the buttons in the list box next to their names. When you stop a timer, and then click start again, the "DateAdded" gets updated so that the timer starts again from 0. You can modify / rip out / reuse or throw away any of this code as you see fit with my blessing. Hope it gives you some pointers. Note that I have built this as a PRISM application so that I have available the BindableBase interface for PropertyChanged. Hopefully if you open the solution then the necessary nuget packages will be restored for you.
If you have problems with restoring NuGet packages, then the ones you need to install are: * CommonServiceLocator V1.3.0 * Prism.Core v6.2.0 * Prism.Unity v6.2.0 * Prism.Wpf v6.2.0 * Unity v4.0.1 These are the base NuGet packages for a basic prism application.
MSDN has a feature comparison between C# and C++ [here](https://msdn.microsoft.com/en-us/library/yyaad03b.aspx). Generally with programming languages, there is no worse or better. They are simply different tools suited for different applications. The main difference between C# and C++ is that C++ is a lower level language. That means that the developer needs to keep track of more things than with C#. This has some advantages and disadvantages. Advantage wise, it means that C++ has higher performance when done right. The disadvantage is that more can go wrong with C++ since the language itself is more sensitive to mistakes on the part of the developer. Obviously, this is a generalization, though it does paint the broad picture.
Console.WriteLine("Hello World!");
I know C++ much better than C#, and I prefer C# by a huge margin. Everywhere I worked up to now, the performance gained by using a lower - level language like C++ is more than offset by programmers having more trouble with the quirks of the language itself. Maybe my colleagues were just bad, but C# is a lot more forgiving and intuitive. If you grew up with C/C++ like me, C# is so incredibly easy to write and read, you wouldn't want to go back. 
SkiaSharp seems a good option and is backed by Xamarin.
Agreed. I tortured myself for months trying to get good at C++ and barely even got it running. Went to C# and managed to do several times more in half the time.
In various areas, to be honest. What can they do especially well? What can't they do well? 
C &amp; C++ for many years here, then been doing C# recently. Totally agree. C++ can be powerful, but mistakes are horribly punished - array accesses off-by-one, null pointers, forgetting to release memory/file-handles/any kind of resource, leaks (due to no GC), templates being obtuse, the list goes on. C# is cleaner, .net libraries are beautifully designed &amp; consistent &amp; documented, GC means you don't need to remember to release every. Single. Frickin'. Resource. I use... Also, built in events, compiling is a billion times quicker, no header files or forward declaration bs, properties, Intellisense actually works, the list goes on. And thinking about it - it depends on one's definition of powerful. C# is more expressive, less error-prone, and lets you get more done in less time. So in that regard it is a more powerful language imho. (C++ can produce more performant code though, and lets you do low-level memory manipulation so C++ is more powerful in these particular contexts).
The license terms are really not that brutal to read through. You can use Community version in some cases, it seems like the intent is for small companies starting out who create apps for revenue instead of consulting. One notable situation - if you're doing contract work for another company, you have to consider the other company's income/size. 
Interesting, I wasn't aware of that. I'm not too far gone in terms of porting to WPF.
What have you tried so far?
Guess something like this... public static void Main() { Console.Write("Type in a command"); command( Console.ReadLine() ); } private static void command( String input ){ switch( input ) { case "asd": Console.WriteLine("ASD"); break; default: Console.WriteLine("You wrote {0}", input); break; } }
If you're writing a web app, or a business desktop UI, use C#. If you're writing a device driver or other Operating System component, use C++. That's a generalisation and there are other choices for each of these uses, but it's roughly true.
one good feature of C++ is that you have compiler for almost all platform that have an OS. there are dozens of *special uses* OS than windows and linux. 
My main problem with WPF is the learning curve. I've been doing C# for over a month now (i'm proficient in other languages such as C/C++/Java/Obj-c etc) and the differences (especially in the designer) are steep. For instance, say I want a splitcontainer with a listbox on the left, and a listview on the right that shows a bunch of images in a grid. The right column will show more images horizontally when the window (or panel) is enlarged, and less (going as low as a single column) when the window (or panel) is small (horizontally) - Drag splitcontainer onto form - Drag listbox onto form - Drag listview onto form - Hookup my data connections - Done In WPF... - Gridview? - Grid splitter? - Listbox: Doesn't seem to act the same way as the WinForms version at all - ListView: Can't seem to find a way to show the data in a grid. - ? Naturally, I've only dabbled in WPF, but considering the WinForms version didn't take me long to figure out at all, and I'm just not grasping the concept behind WPF right now. It seems as though the WPF designer is bare bones compared to WinForms, and they want you to do everything in XAML. That's why I chose WinForms over WPF, but maybe I just wasn't looking in the right place, and it's actually not as convoluted as it seems on the outside?
Back in the 90's, that was considered to be "full GC". Funny how the terminology changed.
&gt; the Visual Studio of C# lol
I dunno.. Assembly is rarely the answer. C++ generates better assembly than most can write. Unless you are doing crazy things-- have you ever read the Commodore 64 kernel code? Half the code is jumping into the middle of other subroutines.. Amazing it works at all, but they managed to fit it into 8k.
&gt; but they managed to fit it into 8k Is the important bit :) When ultra small sizes are a vital issue, you don't have much other choice :p
I've been investigating this further. The lines are not being stretched. The problem is drop-shadows. The drop-shadows are inheriting the TransparencyKey color. Going to keep digging
I've been going back and forth between those two. I need to work with both at my job. Personally, I very much prefer C#, because I'm more productive working with it. The tooling is excellent, UnitTesting, Coverage, CodeAnalysis and IDE support are just fantastic. I do have some issues with it though. It is super easy to produce inefficient C# code. It's simple to get started and have something working, and that's where many people stop, because why optimize when performance is good enough. Also C# developers are much more likely to introduce OO hell, overcomplicating and overabstracting things. I've seen it too often, and I also produced stuff like it myself. I have to constantly take a step back, look at my own code and rethink if what I'm doing is really the smart thing. C++ developers are working closer to the metal, so they are more aware of costs and memory structures. They know what happens in the background, what is allocated etc. Also writing those headers is a lot of work, so they probably think twice before introducing this new unnecessary abstraction layer :-) C++ has a certain elegance to it. It feels oddly satisfying to create something highly efficient that works in the end, it gives a better feel of accomplishment. However, the code is always much harder to read and comprehend than its C# counterpart. If you want to get work done, C# beats C++ landslide. It lets you focus more on the actual problem you are trying to solve. Looking back I'd say working with both languages has a nice synergy effect. My knowledge of both languages has improved by getting experience with the other.
no
Thanks for the encouragement. I'm sorry to see you go. 
This should give you a start with a working example: https://blogs.msdn.microsoft.com/joncole/2007/06/13/sample-asynchronous-sslstream-clientserver-implementation/ Note that this was written in 2007, so the advice on what ciphers etc to use have changed significantly. You should do some research on this before deploying this in anything more than a fun personal project. Depending on your use-case, you might find it better to operate as a HTTP(S) endpoint in IIS for security management reasons. 
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TypeInCommand { class Program { static void Main(string[] args) { Console.Writeline("Type in a command"); Console.readLine(); Console.WriteLine("Not found"); } } } OR private static void command (String input){ switch (input) { case "asd": Console.WriteLine("ASD"); break; default: Console.WRiteLine("You wrote {0}, input); break; } } 
Believe me, I was thoroughly impressed. It was an ugly baby, whose inner beauty was concealed to most. In cutting in my own extensions, the enjoyment I had eschewing all pretext of good coding style with wild abandon was liberating. 
That is actually the best description I have heard yet: "It's almost like a friend is explaining it to you."
&gt; C# may be bloated by the .NET Framework making it worse for ultra-low level tech, but modern tech can easily handle it, and it's far easier to code. The size of the .NET Framework is something they're trying to fix in .NET Core by moving sections of it to NuGet packages. The obvious downside of that is that it makes the deployment sizes of individual projects larger.
Great stuff, let me know how you get on with it. Sometimes it can be a great help to have source to a thing which has some meaning to you so hopefully it will help you out. Once you get into it, if you have any questions or need anything clarifying (I know from experience that bindings can be confusing!) just drop me a message either on here, PM or on github, whatever suits. All the logic is contained within MainWindowViewModel and StaffMember class, there's no "code behind" in keeping with MVVM principles (an area well worth exploring if you're not familiar already). Cheers
&gt; GC means you don't need to remember to release every. Single. Frickin'. Resource. Not really. You need to unhook events when unloading objects or there's still a reference to the object in the event handler. And because the garbage collector is assumed to be all that you need, there isn't really any good language way other than IDisposable and remembering to unhook all the things you hooked onto in the disposable *and* remembering to call dispose when things are removed. Failures to do so can very easily cause memory leaks that go un-noticed. In this sense (disposal of objects), C++ has the advantage because RAII makes disposal automatic most of the time, assuming you're using unique_ptr, shared_ptr, etc.
This is why I prefer C++ to C# - in C++ memory isn't any more special as a resource than other things. In C# memory is special, and other types of resource need manual management. More, actually, because you have to use `using` to get proper RAII.
&gt;There are some languages that, at least by today's standards, are even bad at their intended purpose. *Cough* PHP *cough*. 
Even unhooking events isn't strictly necessary if you can eliminate the whole tree at once.
If you want low requirements, just use .NET Micro. Won't get into the "ultra low" category, but it probably beasts Core by a wide margin.
stumbled upon this a while ago... not sure if it's the sort of wtf FryGuy1013 is referring to but it's fun :) [CppCon 2015: Piotr Padlewski "C++ WAT"](https://www.youtube.com/watch?v=rNNnPrMHsAA) also fun - the closest to a 'wat' video for c# i've found - [Jon Skeet - Abusing C# (.NET DD 2016)](https://www.youtube.com/watch?v=l8JptEA7UqY) I love these sorts of vids, heh.
exactly me. I'm just unable to figure WPF. it doesnt seem logical to me. I've been working with C# for a while now. and I can usually achieve my objectives even if I get stuck somewhere, put a button, try things and then figure it out. WPF is just different, I get lost in the code and its so annoying and I feel there are more xaml code than c# code. well i'm here learning c# not xaml. I hate it 
You can do manual memory management (using pointers) in C# too, giving you a performance benefit.
The problem is that all these compilers do not all support the same version of C++ or extended language features. It can be very difficult to ensure code compiles for all the different compilers there are. With C#, there is now typically one mainstream compiler so you know that your code will compile and will compile the same way on all platforms - at least on the IL level which is the most important.
Hipsters without CS background in compiler design and urban legends helped to change that.
But what's the point of going with C# if you need to do that? 
&gt; C++ has reference counting C++ code *can* have reference counting. Optionally. It also might not. It can have an enormous number of different things, potentially all in the same program. C#, on the other hand, *has GC*. Pretty much everywhere.
No, it's still horrible.
It's true, perfect is the enemy of good. I believe there is a sweet spot between premature optimization and not optimizing your code at all. Both are bad. I just recently hit a nice example. There was an expensive linq call sitting in a critical path which generates hundreds of temporary objects on every call just to produce the same result over and over and over again. It was fast enough, so it will never be identified as a problem, but really, this should bother any developer. I went and fixed it in a few minutes, calling it premature optimization seems like a lazy excuse in these cases.
&gt; WPF does look like a platform with a very steep learning curve, but it really isn't. I think the people learning it will be the judges of that :p. I've heard it from several people who learned it. I don't find it too bad personally, but I'm not that deep into it either.
Every other language feature. Also it may only be for specific functions, like image processing. Is it worth implementing an entire app in c++ for a handful of functions.
&gt; You simply can't use C# if you really want to fine tune performance in the same way as C++ I really wonder how C# using manual memory management compares to C++ in terms of performance. I'd like to see some arguments to support this claim. 
&gt; I really wonder how C# using manual memory management compares to C++ in terms of performance. I'd like to see some arguments to support this claim. I'm curious of this too, though from personal experience; I've never been in a situation where I've wanted more performance from desktop apps. Also to be honest; I'm not the sort of developer which wants to mess around with optimizing every tiny instruction, I just try and use libraries for the most part. Of course if you design your application badly, it will perform badly regardless of your choice of programming language :)
Would that work correctly if the type parameter was a reference type?
This is actually super cool I've been using Java+nashhorn a lot..cant wait to use this in C#. A very unfortunately named class though
Sounds a lot like Option&lt;T&gt;, from F#. Which is not too terrible to port to C#, using some extension methods. It's a class instead of a struct, though, and uses null as the no-value value.
Do you know what versions of windows your clients are running?
Windows 7 and 10 make up roughly 75% of the market share. While Windows 7 only comes with .net 3.5, the majority of installations have .net 4.0 or 4.5 installed. If you were looking to target the highest possible install base, go with 4.0 (which works on XP on up). It's the most likely to be installed, and it's not that hard to bundle it with your application. I would suggest looking forward, though and targeting 4.6(not 4.6.1 or 4.6.2, but specifically 4.6), which works on Vista on up. Just bundle a web installer with your application's installer.
No idea, they can use Windows XP up to Windows 10
Well we all learned it at some point
No, but it can be installed.
At this point, you should probably look into a logging library. Most of them allow you to customize the formatting of your logs without changing the code itself, and you can even add different formats (including colors) for different log levels or depending on which class or method the log came from. The one I use is [NLog](http://nlog-project.org/), but you can probably find others by searching online.
access point name
Another thing you can use, is [LINQPad](https://www.linqpad.net/). You'd easily be able to dump various bits of data to different windows. It's a great tool.
Last update: I decided to take the advice that the majority of people here offered, and ported my existing application to WPF. I took it upon myself to start with the worst bit, replicating my UI from WinForms in WPF. After reading some tutorials and taking it slow, I managed to not only replicate my UI in WPF, but also improve its display and performance. Pretty delighted with the results. Just over 99% of my existing code was able to be ported without changes. The only code that wasn't compatible out of the box was my Timer code used in one class. So i'll have to migrate to the WPF timer class instead. Naturally that's excluding Forms, which will be recreated using WPF. Thanks for helping to push me into this decision, it was well worth it. Cheers
Serilog is great and has lots of ways to log
I'm not sure of the specifics, but on Windows 8+, if you're running an application that requires a .NET framework that is missing, Windows will give you an option to download and install it automatically.
VSColorOutput will colourise specific lines of the output window. By default, lines containing error will be red. You can configure what string matches (e.g. 'warning') get printed out in specific colours (e.g. orange). Not exactly template support, but should do quite a bit of what you want. http://mike-ward.net/vscoloroutput/
Verbatim interpolated string literals... https://davefancher.com/2016/08/12/c-6-verbatim-interpolated-string-literals/ string MyTest = "test"; string MyVar = $@"This is my variable {MyTest}"; You can replace `{MyTest}` with `{TextBox1.Text}`.
I'd try googling that message, figuring out which values are N-a-N and then special casing them. So if you encounter them you either discard them or do something else with them rather than passing them to the FindRoots function.
 Are you sure a root exists in the boundary that you are setting. Also try a different root finder in math.net. They have several different root finders. I've used Brent with no problems.
How are you modifying the `WriteableBitmap`? It can be updated while being displayed, you don't need to make a new copy every time. The [Remarks section of the MSDN](https://msdn.microsoft.com/en-us/library/system.windows.media.imaging.writeablebitmap.aspx) tells you how to do exactly that: `.Lock()`, modify the image using `.BackBuffer`, signal changes with `.AddDirtyRect()`, then `.Unlock()`. Additionally, if you don't need pixel-perfect control over the Bitmap's content, consider switching to a [Canvas](https://msdn.microsoft.com/en-us/library/system.windows.controls.canvas(v=vs.110%29.aspx) instead.
Question is... Why does 200MB bother you if the GC kicks in every time and collects whatever it's supposed to? Do you actually have a memory leak? Do you dispose of what you don't need anymore? If it collects what is supposed to, then is doing its job. There's a reason GC exists, and there's a reason why .net doesn't deallocate your stuff every time you expect it to. Just make sure you don't leak. Not every app can be made with a small memory footprint. Hace you looked at third party bitmap frameworks like Win2D (uwp)? 
I'm convinced it is cancer. I have to admit that there is a very good effort to fix JavaScript but I don't think it'll be helpful for a few years yet. 
Beyond the current suggestions (which are good), if you continue using `WriteableBitmap`, take a peek at [WriteableBitmapEx](https://github.com/teichgraf/WriteableBitmapEx/) which adds a bunch of painting routines and other bitmap-related functions that you may find useful.
Removed: Rule 7.
Thank you, I'll look into it
Supporting XP is going to come at a dramatic cost. Both in terms of effort and features you can't use. They're also likely to be pains in the ass. Unless you have a known client using XP you can't afford to lose cut it loose or at the least create a bug fix only branch.
Ah I see, thank you! :)
You're welcome.
You're welcome.
a little database? maybe even have the database on the server to begin with?
/u/TheMixz is right on multiple levels. This would be a very simple restful api that writes to a database/datastore. You could get fancy and keep all devices in sync with SignalR or by refreshing data by doing GETs every few seconds.
You could try using a multimedia library such as [SFML](http://www.sfml-dev.org/index.php) or [SDL](https://www.libsdl.org/) (both of which have C# bindings). I've personally used [SFML.Net](http://www.sfml-dev.org/download/sfml.net/) before, and with it you can just write `Mouse.IsButtonPressed(Button.Left)`. Or, if you don't want to use a whole library just for one function, you can use P/Invoke to directly call [`GetKeyState`](http://pinvoke.net/default.aspx/user32/GetKeyState.html) with the virtual key for the left mouse button (`VK_LBUTTON = 0x01`), but then you'd lose portability (since you'll be tying your program to a Windows-Only API).
The function is such that there's always exactly one root. My issue is this: There are constants in the formula that the user will change at runtime. This means that I have no way of knowing what the bounds will be. So I'm trying to work out proper behavior if it turns out to be out of bounds. One issue I've noticed is that sometimes if the root is out of bounds instead of throwing an error it gives a garbage solution (large negative numbers, etc), and I'm not sure how to trap that.
Well, my issue is this: There are constants in the formula that the user will change at runtime. This means that I have no way of knowing what the bounds will be. So I'm trying to work out proper behavior if it turns out to be out of bounds. One issue I've noticed is that sometimes if the root is out of bounds instead of throwing an error it gives a garbage solution (large negative numbers, etc), and I'm not sure how to trap that.
Seconded. This is the cleanest solution for global input device notifcations, direct LLKHs and LLMHs. Gotta fuck with PInvoke but theres lots of examples around online.
&gt; Resharper will go to Roslyn, it's inevitable because if they don't their development costs and performance loss will kill them. I think you overestimate the gains from Roslyn when it comes to syntax parsing.
Keep in mind that the string interpolation operator ($) was new in C# 6, if that matters to you.
What made you think its official though, just out of curiosity? 
Here's what I did. I used domain knowledge about my problem. My domain problem may have more than 1 solution but the solution I'm looking for must cross the x-axis - not be tangential and be &gt;= 0. I was also looking for the solution that is closest to the y-axis. So I started with a reasonable guess at the boundary: 0-epison to some reasonable positive number based on domain knowledge. I then evaluated the function on both the upper and lower bounds. I'm looking for a sign difference meaning the function had to cross the X-axis somewhere in the interval. If if did not, I set lower to upper and upper to 2 * upper and repeat with some iteration counter guaranteeing termination. // ScaleToConcentration(sample, compound, high) - abscon = 0 is the system equation we're solving guess = ScaleToConcentration(sample, compound, high); if (guess &gt; abscon) break; low = high; high = high * 2; trycnt++; if (trycnt &gt; 20) { System.Diagnostics.Debug.Assert(false, "Failed to find root interval"); return double.NegativeInfinity; } ... Func&lt;double, double&gt; f = x =&gt; ScaleToConcentration(sample, compound, x) - abscon; try { scale = Brent.FindRoot(f, low, high); } catch (Exception) { return double.NegativeInfinity; } *I know my approach of doubling the interval does not mathematically guarantee the solution closest to y axis, but the initial interval is pretty close and this doesn't usually doesn't go past 2 iterations in getting the interval. Edit: You could certainly adapt this to you situation easily. Start with low = -1 and high = 1. multiple both sides by 2 until you see a sign difference. This approach assumes your function is not tangential to the x-axis. 
Same here. I've been developing in C since 1987, moved into C++ around 1992, and then started working with C# around 2003. C# is a joy, C++ not so much. 
Has anyone had any luck actually installing .NET Core on a Raspberry Pi yet? Can someone explain to me why the author recommends Ubuntu Server as opposed to Raspbian OS? Thanks for any help/ideas.
Interesting.
If you want your UI responsive you can either run that loop on a separate thread something like: using System.Threading; new Thread(() =&gt; { Thread.CurrentThread.IsBackground = true; /* your loop */ }).Start(); Or you can implement the [Async and Await patern](https://msdn.microsoft.com/en-us/library/mt674882.aspx)
If you are running that select statement in a loop, that's why it's so slow. It takes a considerable amount of time to make a connection to the database, call a query, then return the rows. That time is acceptable if you're just running a few queries but if you're running 1000 of them in a loop, that time adds up quickly. It sounds to me like you need to run the query outside the loop (hopefully somehow restricting it to only the rows you need) then process those rows in a loop. That is considerably more expensive in terms of memory since the data all has to be stored in RAM but it will be MUCH faster.
There are ways to rewrite the equations to make them robust to user input (if the equations themselves are bounded in some way). If the equations are properly bounded, that way when an exception is raised, you know it's not due to user input. What kinds of functions are you working with that are hitting NaNs? Do you have reciprocals, logs, exps, sqrts? There are ways to bound these functions. A really complicated way of tackling this problem is to use interval arithmetic: i.e. for a given set of input bounds, derive the set of output bounds. https://en.wikipedia.org/wiki/Interval_arithmetic There are tools that can compute those bounds. http://www.ti3.tuhh.de/intlab/ But I think this is overkill for your problem.
If he wanted to poll mouse button states (which I don't believe is the case) he could use the Control.MouseButtons property.
Could be worse, ActionScript was a contender in the native browser client scripting choice for a (short) while.
Most programmers are just bad...your experience isn't unique by far. A lot of people make no effort to learn beyond the basics since that gets them "close enough" to do the job with help from Google or Stack Overflow.
:)
"SELECT MyInfo FROM InfoTable WHERE fileId IN ('" + string.Join(",", filenameMinusExtensionList) + "')"; &lt;- still need to handle single quotes. That should give you your entire resultset in one query. But as /u/MortimerBlackwood suggested, you should probably go async/await all the way.
That was an interesting dive into strings. 
Hello, I just started programming in C#! How do you create an MSI installer to distribute your product and make sure your clients have the newest .NET Framework?
[This should point you in a few directions](http://stackoverflow.com/questions/1042566/how-can-i-create-an-msi-setup)
This article seems rather old (9+ years maybe?). BSTRs, C and Java strings are not interesting when subject is .NET. It also would be interesting to know if there are any differences in .NET Core strings compared to regular framework. 
This is what I did prior to seeing this message. 1000+ in less than a second.
What is the equation? And even though the constants may change per user input, can you post one specific example that is causing this problem?
I wouldn't expect any difference between Core and Framework, unless they've made an announcement stating so.
In Short: Delegates: - Define which signature a method must have, e.g. void(String, Int32) - Delegates can be passed as parameters Events: - Non-CPU intensive way of handling changes. You will get notified (the method will get called) when the event occures - Events can have multiple delegates, therefore multiple different methods can be called If you want further details, ask a specific question or look e.g. at the MSDN Examples
&gt;How does the UsingService method know what type T is? Does it just automatically infer it from the return object? The compiler will automatically infer generic type parameters where possible, yes. &gt;My question 2 is: The UsingService parameter is &lt;BoodleServiceClient,T&gt; : how does that translate into what was passed as a parameter? (proxy =&gt; proxy.GetOfferByLoanID) `Func&lt;X, Y&gt;` is a delegate for a method that takes a parameter of type X and returns a value of type Y. `proxy =&gt; proxy.GetOfferByLoanID(...)` is a lambda method matching this delegate type.
Some components of .net core are rewritten, but it is absolutely not a complete rewrite. Coreclr (the native part) and the BCL (the managed part) are largely the same as desktop, just altered to run cross platform and also some features like appdomains are left out. Over time certain fixes are going in to coreclr that can't go in to desktop, so they differ in some respects but it certainly isn't being rewritten. ASP.Net is rewriting parts of their stack for asp.net core, but even that isn't a complete rewrite. 
`delegate` represents a method. You can use it to call a method with an implied instance (or no instance for static methods) // Declare a delegate for any function that takes a string and returns a boolean public delegate bool FindFunc(string value); // Declare a function that takes an array of string and returns the index of the first element that the // supplied FindFunc delegate returns true for. Return null if none was found to return true. int? IndexOf(string[] arr, FindFunc find) { for (int i = 0; i &lt; arr.Length; ++i) { if(find(arr[i])) return i; } return null; } void Main() { // Create a fruitbasket var fruitBasket = new[] { "Apple", "Orange", "Banana" }; // Use the declared function to find the index of "Orange" by using the method IsOrange as a FindFunc argument. int? orangeIndex = IndexOf(fruitBasket, IsOrange); // Use the delegate syntax to declare an anonymous function that returns true for "Banana". int? bananaIndex = IndexOf(fruitBasket, delegate (string name) { return name == "Banana"; } ); // Use lambda syntax to declare an anonymous function that returns true for "Peach". int? peachIndex = IndexOf(fruitBasket, name =&gt; name == "Peach"); Console.WriteLine(orangeIndex); Console.WriteLine(bananaIndex); Console.WriteLine(peachIndex); } bool IsOrange(string value) { return value == "Orange"; } I've written three different methods of passing a delegate. The "peach" case is supposed to return null because there is no "Peach" in the array. An important thing about delegates: they *may* call several methods. FindFunc findWhat; // Set the delegate the supplied anonymous function findWhat = name =&gt; { Console.WriteLine("Banana!"); return name == "Banana"; }; // Add a method target to the delegate findWhat += IsOrange; var orangeAndBananaIndex = IndexOf(fruitBasket, findWhat); Console.WriteLine(orangeAndBananaIndex); This returns 1 which is the orange index which means it just used the last delegate assigned. As you can also see it actually does call the banana method as well, but the result value is discarded. Events, on the other hand, is for delegates what properties are for fields. They encapsulate a delegate allowing it to be safely subscribed and unsubscribed. You can also attach handling for what happens when an event is subscribed or unsubscribed to using the `add` and `remove` keywords.
Thanks for the reply! I was busy typing out a follow-up and then it clicked for me! Thanks for the assist!
I'll handle events first. Lets say you wrote an app, which just has a single button. Now lets say you want to run some code when the button is clicked. Without events, maybe the button has some `IsPressed` property, and so you could write your code like this: while (button.IsPressed) { //The button is pressed! Run the button-pressed code } Do you see a problem with this code? Ugh. Two problems: First... if that code runs quickly, it might get executed multiple times if it finishes before the user stops pressing the button. Second... this code is going to consume a lot of CPU unnecessarily, since it's constantly checking the `button.IsPressed` property... very inefficient. Okay, lets bring in events to fix this. Having an event on your class is basically a way to say "Hey other code, I can let you know when this happens to so you don't have to keep checking." So how does that work? Basically, you ask the owner of the event "Please run this function when the event happens, that'll do everything I need." That looks like this: private void Button_Click(object sender, System.EventArgs e) { //Run the button pressed code! } button.Click += Button_Click; You could also do this with a lambda expression: button.Click += (sender, e) =&gt; { // Run the button-pressed code }; Great! I don't have to keep checking the button state, I know that my function will just get called when the button is clicked. Okay, but why did I add those arguments to the function? The `sender` and `e`? I didn't use them.. Well, C# is strongly-typed. And the event specifies what kind of functions can subscribe to it. A delegate type is a way to specify the types of a function argument. An instance of a delegate type (either using the `delegate` keyword, lambda expressions, or passing a named function that has the same signature) has to take the same argument type(s) and return the same type. My example above, the `button.Click` event, used the `EventHandler` delegate type which is declared like this: `public delegate void EventHandler(object sender, EventArgs e);` So, lets say your making your own event. You have to define what the function signature of your subscribers are, and you do that by declaring a delegate type like the above, then in your class you'd declare your event like this: public event EventHandler MyEvent; Note: delegates can be used anywhere you want to have a type of a function - for example if you want to store a function in a variable, or if you want to pass a function as an argument to another function. Second - any delegate could be used as the event handler instead of `EventHandler`, but the .NET Framework guidelines recommend sticking to `EventHandler`, `EventHandler&lt;T&gt;`, or making a subclass of `EventHandler` rather than using your own delegate in the general case.
Would also recommend Monogame, it's just as nice as XNA was and easy to start with. 
Actual projects. Do something, then go from there.
I consider LINQ and nullables and delegates as basics. First I thought you had the basics down, then you mentioned this.. Grab a good C# book and read it completely, it'll teach you the basics. Besides, Unity is crap and runs on an **ancient** version of Mono. It's not representative to the eco system and what it has to offer.
are you closing your other form, or just hiding it?
U might want to change the comment in the first code block, the while-loop. The button is pressed when then isPressed property is false?
Those are core language features.
&gt; The compiler will automatically infer generic type parameters where possible, yes. For methods only, not types. Part of the reason is that you can have two classes with the same name but different generics. (I'm aware you know this; just for general information :).)
Try Application.Exit(). See this http://stackoverflow.com/questions/13046019/winforms-application-exit-vs-enviroment-exit-vs-form-close If you have something running on a background thread, these may or may not also cause your process to wait for them. Make sure you do threading correctly if so. Some disposables may also sometimes cause an issue: so wrap them in using statement so that they are cleaned up automagically. edit: ah, just saw now that they also mention threads in the StackOverflow post, so I'm not crazy yay :)
im already using Application.Exit() on the main form i will look into the thread thing
Are you using any COM interop calls? If so then your process is probably not closing because garbage collector cannot dispose due to COM interop, which you need to manually dispose first.
A delegate is basically a reference to a not-yet-existing method. It's a generic statement of a method's signature. If you want a dynamic action at runtime or something it can be extremely useful. Another (and more popular) use case would be for ezcakes callbacks. If you have a method that does a lot of things, and you want it to do different things with a result you can: A ) Write a bunch of variants with 90% the same code and signature or B ) Take a delegate in the parameters, and use that delegate from the parameters, and pass the result to it. Then you can do all kinds of shit with just one method. "Event" is more of an abstract concept than anything. I would highly recommend looking into the observer pattern. High level view though: One class is an observer which stores references to a bunch of objects. When something happens with one of the objects it tells the class instance of the observer to let all the other objects know. That signal is basically an "event". The event object encapsulates data relevant to the event.
i think i have found the problem. when i want to return to my main form i create a new form instead of showing the old. How to show the old i dont know tho.....
Yes, only premium accounts can download.
If you're working in unity, I suggest you look into coroutines. These are unity exclusive, and not a feature of C# explicitly, but they make a huge difference when programming asynchronous functions. (Also, in unity, avoid delegate events at all costs!)
I'm a bit old for a career change now :) Thanks for this tho. I'm fine with attributes, properties, yield and GC already, was looking for next step which you've included. Thank you
Yup, already use them. I'm a fairly experienced C++ coder but messed this question up big time so I'm just soaking up the downvotes :) It was an awfully worded question; still, I'm getting some good answers, so I'm keeping it on.
did you know that you download a youtube video every time you watch it?
Delegates are very similiar to Function pointers. A delegate defines the signature of the method that it will "point" to. An event is a special type of delegate that will appear in the Events panel of visual studio properties window 
 &gt; Define which signature a method must have, e.g. void(String, Int32) This applys to both `delegates` and `events` as an `event` is a simple wrapper around a delegate which prevents direct use from outside of the class. An `event` also has a signature. &gt; Delegates can be passed as parameters `Events` can be passed as parameter if you are defining class. (note: yes you are actually passing the backing delegate but still - good to know) &gt; Non-CPU intensive way of handling changes. You will get notified (the method will get called) when the event occures You can use `delegates` for exactly the same reason. The only reason to use `events` instead of `delegates` is if you want isolation between the person who is registering callbacks and the one that is firing the callbacks. &gt; Events can have multiple delegates, therefore multiple different methods can be called An `event` only has one backing `delegate`. `delegates` itself are already multicast ;)
1. Don't include the `packages` folder in your repo. 2. Don't include the `.vs/TestYoutube` folder in your repo. 3. Your project doesn't build. You need to include `&lt;package id="YoutubeExtractor" version="0.10.11" targetFramework="net45" /&gt;` in packages.config.
I don't know if this is the cause of your problem... but where you are using Form.Show() to show your sub-forms (AddProductWin, RemoveProductWin), I would consider ShowDialog() instead Dialogs are used when the current form is not allowed to regain control until the new form is closed - and this looks like what you are trying to achieve, only you're trying to do it all manually. If you use ShowDialog(), then you won't need to do this.Hide() in the main form, and equally you won't need to do main.Show() in the other forms - it's all taken care of for you. The only thing is, it's "taken care of" by simply not letting the user click on the main form while the dialog is showing - if that's not suitable, and you really do need to hide the main form, then dialogs may not be the right way to go after all.
Use post-French-revolution time of "the terror." :) Lots of executions. Messy, messy executions.
Can I ask you a silly question? What does "real time" mean in this context? I see the term popping up more and more. Doesn't it simply mean "quickly" or "as fast as possible?"
Thanks! I'm quite new to git.
That only applies to websites, which are sending many requests to YouTube from the same host. Google can't do much about people using youtube-dl from their own computers. Also, Spotify Premium will let you "download" songs in the sense that it can keep a local encrypted cache. You can't use those files outside of the Spotify app.
You should also remove bin/, obj/, .suo, etc., commit the cleanup, and then create a .gitignore file to ignore all that stuff in the future. Here's Microsoft's default .gitignore for Visual Studio: https://github.com/github/gitignore/blob/master/VisualStudio.gitignore I would also not hard-code the Spotify API key, so that it can be changed by the user in the eventuality that Spotify blocks it.
&gt; Don't include the packages folder in your repo. You are absolutely right, but you would be supersized of how many organizations keep packages and push them to their own private/internal repositories. I have seen a lot that does it that way, and I'm still baffled, but they have their own justifications.
True that. Although, we're switching to a Javascript front-end, soon, so that'll be fun. Especially since we're using Angular 2, and Google has shown just how trustworthy they are about creating frameworks then abandoning them entirely.
This tends to throw people off who come from Java as over in Java-land, the default access level is more like C#'s `internal`.
In an internal repo I think it's perfectly fine to do whatever. In fact we commit dependencies at work. I wish we didn't, but that's what you get when assembly references are mixed in with nuget references.
Removed: Rule 7.
Removed: Rule 7.
Are you talking about the schema 
Yes the whole code first migrations, they are usually auto generated in the web app, and called via start up methods. Did you use these , and if so how did you manage the start yp migrations?
No worries. Currently the size of your repo is `51.7 MB`. If you remove the things I pointed out as well as the things /u/jamend mentioned then the size shrinks to `24.0 KB`.
Id like a 3 tier app to be able to manage the database schema, from its data layer. Im looking to insulate the data layer so that it could be exchanged for say, a nosql database and data layer. So the EF's migrations would be great, but they would have to be managed by the data layer itself, so that service and presentation didnt "know" about the db schema 
https://en.wikipedia.org/wiki/Hipster_(1940s_subculture)
Whoops.
Not quite sure what you mean .. but you want to access Data in Method()? E.g. public class Parent { public List&lt;Object&gt; Data { get; set; } } public class Child : Parent { public int Method() { return Data.Count(); } } 
iTunes of course supports MP3, and this can easily be found out with a Google search as well. There is no reason to convert MP3 to AAC, it will only result in poorer quality.
&gt; If you're re-encoding a 320 kbps MP3 into a 192 kbps AAC file, you're going to be discarding audio information. Yes, but you can't really compare bit rates for different codecs. Any transcoding will discard information, though, up or down in bitrate. AAC gives much more quality (or at least somewhat more, depending on who you ask) than MP3, of course. &gt; I don't use iTunes (or any Apple software/hardware), but doesn't it support MP3 already? Of course it does.
As others have mentioned, writing code is the best way to get exposure. But if you're a book guy like me then there are a lot of option out there that'll accelerate the process. You'd be insane to read all the following--these are just starting points that can accommodate different interests/tastes. Having said that, I'll start with the one book that *I* think every C# developer should own: [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries](https://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613) ... it's a good read, and it includes a lot of direct input from the designers of the C# and the .NET Framework. Microsoft has been really good about sticking to those guidelines, so you'll immediately get a leg up on the Framework libraries if you work through this book. (Also, you'll win a lot of arguments with your coworkers about how APIs should be designed.) General knowledge books (tons to pick from, but here are some winners): - Cookbook-style factoids: [C# 6.0 Cookbook, 4th Edition](https://www.amazon.com/6-0-Cookbook-Solutions-Developers/dp/1491921463/) - But since you're coming from a lower level language, you might appreciate more details: [C# in Depth](https://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X/) by Jon Skeet (the Chuck Norris of C#) - Scott Meyers-style content with good discussions of idiomatic C#: [Effective C#: 50 Specific Ways to Improve Your C#](https://www.amazon.com/Effective-Covers-Content-Update-Program/dp/0672337878/) - [CLR via C#](https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454/) goes deep into the guts of the language. Deep dives into specific features that'll serve you well: - [Concurrency in C# Cookbook](https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569/) is a good starting point to get productive with the TPL quickly, but I actually learned a lot more from the more prosaic [Pro Asynchronous Programming with .NET](https://www.amazon.com/Asynchronous-Programming-NET-Richard-Blewett/dp/1430259205/). - C# generics aren't as powerful as C++ templates, but [Metaprogramming in .NET](https://www.amazon.com/Metaprogramming-NET-Kevin-Hazzard/dp/1617290262/) may provide some decent (though clumsy) workarounds. Note: I've never found a good LINQ book that supported how I actually use the feature. Coming from C++, you can probably just start off by thinking of the extension methods on [Enumerable](https://msdn.microsoft.com/en-us/library/system.linq.enumerable(v=vs.110\).aspx) as a C# version of std [`&lt;algorithm&gt;`](http://en.cppreference.com/w/cpp/algorithm)... a good way to avoid writing raw loops. But if you're a performance-obsessed game dev then you'll probably want to use LINQ sparingly--it does have some [overhead](http://stackoverflow.com/a/1185238/3634591). 
I would make sure the customer is aware of these two facts: 1: iTunes has full support for MP3 files and attached ID3/whatever tags, same as AAC. 2: Converting from MP3 to AAC *will* result in quality loss no matter what. With these things out of the way, if the customer *still wants* an aac file, you need to make sure it has a .m4a extension and is housed in the mp4 container format. I've never worked with NAudio so I have no idea if that is handled automatically or not. If I can get a sample file being produced with your code, I might be able to take a look at it and tell you why iTunes doesn't like it.
Aye, that's what I was thinking, too. .Net's Parallel bits are reason enough, already; async/await are amazingly useful. Don't think Java even has an equivalent, unless it got tacked on to Java 9 and I wasn't paying attention.
Thanks mate you are a life savior i'll try it for sure
&gt; What about tools like Nginx, HAProxy and Varnish? How can you combine the power of .NET Core runtime with the maturity and flexibility of the Linux platform? Isn't the official recommendation from Microsoft to run Kestral from behind nginx that's doing [reverse proxy](https://www.nginx.com/resources/admin-guide/reverse-proxy/)ing? After all, Kestral is just an app server and while it does speak HTTP, I'm not aware of it even supporting configuration, let alone HTTPS certificates.
To be fair, I thought for the longest time that I didn't know LINQ because I'd never used the SQL-looking syntax for it. It wasn't until later that I realized `.Where`, `.Any`, etc... were LINQ. I suppose it would have helped if MS didn't toss the Linq `using` line into C# classes by default.
[removed]
SOLID code is usually pretty testable. The single responsibility principle alone makes testing easier. Dependency injection is a must have for testability as well
Thanks for explaining it again. My first reaction to the example from MSDN Magazine was 'well you can just mark it volatile then', but that was probably naive. If you're not using the object directly but accessing some field, that field would also have to be marked volatile to prevent read introduction. It would quickly become cumbersome to manage all the things you'd have to mark volatile, and you might not even have enough control over the source code involved. So I'll have to agree introducing reads of shared memory is a bad idea. As for the spec, indeed apparently non-volatile accesses are side-effects but by definition not visible side-effects, and I really can't figure out what exactly they mean by "Note that while only volatile operations constitute visible side-effects, volatile operations also affect the visibility of non-volatile references." Because if they *do* affect the visibility of non-volatile references, and we're to understand that therefore these are also now visible side-effects, that indeed contradicts what the spec said immediately before (that only volatile operations are visible side-effects.) And if we're *not* supposed to understand it as 'side-effects with affected visibility are visible side-effects' then they *really* need to go out and properly define when a side-effect is visible.
these commands i ment are executed via Package Manager Console within Visual Studio manually. If you want to use automatic migrations (on the first call), it is somehow handled "automagically". Unfortunately I don't know how it handles accesses from different threads.
For code to be unit-testable - I believe the code MUST adhere to Separation of concerns principle, proper encapsulation, pure functions if applicable etc. If the developers generate 100+ line of code functions and put everything into single class.... test-ability goes down to zero.
I am just dealing with a code base where the unit tests are horrible and the code is... lacking (2000+ lines in a class, 200 lines in a method, multiple classes in same file, methods with sixteen parameters (most of them nullable), variables named s, o, ml, n etc etc etc). Therefore my tips might be a bit more generic than just C#, as I am simply pissed off at the original developer just now. * Figure out what actually needs to be tested. No, doing a test whether or not new List&lt;string&gt;() works is not worth it. Test your business logic, not framework. 100% coverage is an aberration, not achievement. * Test for *both* positive and negative results - e.g. what happens if your method will throw an exception (I found a critical and very complex method that was tested only with "does this throw exception?"). * Writing easy to understand and maintainable code is more important then having tests that cover said code. * Learn the testing toolkit. Shim is better for certain testing (database, network, file system etc) than adding interface to everything and "special" test implementations. * Tests are code, too. If you write the best code in the world in application and unit test code is unreadable garbage, it still means - in total - your code is a mess. * Dependency injection is *a* pattern, not *the* pattern or magic bullet. Just because you can, it doesn't mean you should. * Make sure your tests can run in parallel, e.g. stateless tests.
Well they could certainly change internals of a string (as long as it was non-breaking), but you don't have to guess, compare .NET Framework 4.6.2 https://referencesource.microsoft.com/#mscorlib/system/string.cs with CoreCLR - https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs Although this is only the managed code, there's also an unmanaged code involved in the String class
Cheers, I'm considering each service can call a method ("init") on its first call. Each service can manage if it's been called before, and if its a first time it can raise some event that can start the process (managing concurrency in the same way ). 
If you're interested in the internals of .NET string, I wrote a similar post 'Strings and the CLR - a Special Relationship', see http://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
I think the issue is that Player one is being seriazlized, and then all his games, which then find a new player object, and serializes that player and so on.. Is there a way of specifying to JSON.net that all players must be serialized before it beings to serialize the games.
&gt; Data in =&gt; Data out, no side effects. For further reading, this kind of function is often referred to as a ['pure function'](https://en.wikipedia.org/wiki/Pure_function).
I find that a problem with DI is that it makes some poeple think that dependecies are free. You still want to limit depenencies as much as possible.
No, because public means something specific in C# (and CLR) so it's better to stick with the proper terms of the language. CLR has 7 different access levels, 5 of which are available from C#: 1. private: only visible in the same class. default for class members. 2. protected: only visible in the same class and derived classes. 3. internal: only visible in the same assembly (and "friend assemblies"). 4. protected internal: access allowed if 2 OR 3 applies. 5. public: full visibility. CLR has 2 addtional: 1. compiler: not visible to anyone. internal use. 2. family and assembly: access allowed if 2 AND 3 applies in the C# list. I sometimes would want to use CLR's #2.
&gt; No, I think you underestimate them. Sure. &gt; The Roslyn parser is going to parse your code regardless. It's a sunk time cost everyone pays, and always has. Resharper has to parse the entire codebase and build their own AST. Sure. I think you overestimate the problems coming from this. Also, ReSharper builds ASTs for other things than C#, that Roslyn won't help with. &gt; Even if they can do that in under a second, it's time and CPU cycles their competitors don't have to spend. Yes but features matter more than raw speed to most people. &gt; every single time Microsoft makes a change to the language they have to change their parser as well as redevelop their rules. Yeah, good thing they have people whose job that is, then. &gt; Their competition doesn't have to do anything but add the new rules. In the end it's about delivering the better product. Using Roslyn or not doesn't directly translate to that. &gt; While they are running their own parser they will always be slower and more expensive to develop. That particular part, yes certainly. But that doesn't necessarily mean it's still not going to be a better product.
I have come across this problem before and you need to set your `ReferenceLoopHandling` to ignore. But really the underlying problem here is your data structure. A recursive data structure like this is never going to be easy to maintain.
What would you suggest changing? 
Thanks, I learned a lot with that!
Can anyone recommend a good resource for writing tests in c#?
&gt; and you want the caller to be aware of that exception, then it should raise an exception, not return a string with the exception message in it. Yeah, I kinda thought afterwards that I was doing that wrong. I am tranisioning from a vbScript developer (been coding scripts for 25 years) now that I am working with a true OO language, I might go back and take a class, or better yet, get a good book.
My second comment, now I've looked a little bit closer, regards your use of the sqlList parameter. What you are doing with this parameter is a classic example of inviting a SQL Injection attack. There is a discussion of different ways around that [here](http://stackoverflow.com/questions/114504/is-it-possible-to-send-a-collection-of-ids-as-a-ado-net-sql-parameter), including links to two different techniques for passing lists of IDs to SQL.
I also commented on this, but I commented from the point of view of SQL Injection. I'd agree that your solution is fine - so long as the IDs are numeric, and passed in through an int[] or similar. If the IDs are alphanumeric and need to be passed in through a string[], then there is still the chance of SQL Injection, and there are probably better ways of doing it.
&gt; But really the underlying problem here is your data structure. - A `Player` belongs to a `Game`. - A `Game` belongs to a `Round`. - A `Round` belongs to a `League`. - A `League` belongs to a `Tournament`. ___ public class Tournament { public int Id { get; set; } public IList&lt;League&gt; Leagues { get; set; } } public class League { public int Id { get; set; } public IList&lt;Round&gt; Rounds { get; set; } } public class Round { public int Id { get; set; } public IList&lt;Game&gt; Games { get; set; } } public class Game { public int Id { get; set; } public Player PlayerOne { get; set; } public Player PlayerTwo { get; set; } } public class Player { public int Id { get; set; } }
I would do something like [**this**](https://gist.github.com/anonymous/93aa7326640086ddc0b3c3076ba3c206).
No, this is a Forms Application. thanks though! Psting new code soon. I cleaned it up a mess.
This is how I learned to write testable code. But I've found that now that I know what it takes to be testable, I prefer to write the code first and the tests after. At least initially. If I need to make changes I'll do failing tests first.
Test first. Test driven design.
Found this library awhile back on github and had bookmarked it to look at later. Looks like it's meant for bluetooth ODBII that support serial profile. (usually cost about $20). https://github.com/Bluetarsky/ODBII.NET
&gt; I am having trouble getting my "Word to be guessed" to show up "hidden" behind however many asterisks make up how many letters are in the word. You can use String.Length method to get the number of characters of your string. Then to create the string of asterisks, you can do that by using the string constructor. Example: string hiddenWord = new String('*', wordToGuess.Length);
Pshh - we all know that getting as many NSFW images as fast as possible was your motivation. /s
And lets be honest who wants low res porn!?
&gt;I'm not using iTunes, so I'm just stumbling through the darknes, basically. So maybe download iTunes??
Yeah, pretty much this. I don't follow strict TDD but I tend to write code AND tests at the same thing which IMO is close enough. Writing tests during coding or immediately after coding will expose all the flaws.
Well, I still wouldn't have any songs on there. Doesn't it only play local versions of songs you already own or something along these lines?
Take your dependencies in your constructors, with dependencies taking the form of interfaces or delegates when possible.
Looks cool, i was thinking of contributing but is seems mostly finished...
Numbers is an array where each item in the array is an array. So you have to loop through each item in Numbers and get the array length. Add all these values together.
Tried twice. Not trying again.
Ok
This works for two-dimensional arrays (`double[,]`), but OP's array is a jagged array (`double[][]`). So `GetLength(0)` will work fine, but the call to `GetLength(1)` will throw an error. A minor tweak to `myList[i].Numbers[j].Length` should work though.
Unit testing is the practice of testing self-contained units of code, instead of/in addition to testing the whole system. A good suite of unit tests will help you identify breaking changes in your system at the level of your components. As programmer jargon, 'unit testing' often refers to the writing of automated tests, which may or may not actually be unit tests, typically with the assistance of a framework like (in C#) MSTest, NUnit, XUnit, etc. This tends to interleave with practices like Test-Driven Development. If you're doing this *right*, your suite of *automated* unit tests can be run every time you build, including as part of a continuous testing or continuous integration process, so you get frequent, near-immediate feedback on the state of your code. Vs. running your app in the debugger, this offers repeatability and consistency in testing, can be useful for codifying requirements for future developers, can (particularly with larger, integration-style tests or tests provided by end users/clients as acceptance criteria) be useful for user acceptance testing, and a substantial savings in time. Ideally, none of this duplicates your actual code, though you may mock up some behavior with "'pretend' objects" to test specific cases reliably, or reproduce some control flow to reproduce mutating state or something. It depends on what you're doing, though those sorts of practices tend to signal problems in the way your code or system is put together. Most of the time, this isn't about testing UI behavior, though there are automated testing frameworks for that sort of thing, too. (Which I really don't know much about--I'm pretty strictly a back-end programmer.)
Forgot about that! Thanks!
Assuming you're supposed to use the tools at your disposal, you can do another `for` loop up to the prime number and use `Console.Write` instead of `Console.WriteLine` to output individual "X" characters. This works because the `.Write` method doesn't append a carriage return so you'll just stack each "X" one after the next. Another option is to use the `Enumerable.Repeat` method: `String.Join("", Enumerable.Repeat("X", numbers))`, or `new String(Enumerable.Repeat('X', 5).ToArray())` There might be a more succinct method to do this, but these are what come to me off the top of my head. EDIT: I'm an idiot: `new String('X', numbers)`
Yes! Thanks!
Well, this discussion as asked could go down the philosophical design path (TDD, BDD, SOLID, etc.) or the techniques in design path. I'll stick with the technique path and say that at a minimum the following three things are critical. 1. Dependency Injection 2. Interfaces, interfaces, interfaces 3. Statics are evil (public static methods to be specific) Obviously, the interfaces and DI go hand-in-hand and allow tests to mock as much as possible and focus only on the "unit" as much as is practicable. The last bit is just the reality that statics get in the way of testing a unit without "leaving the braces". Changing the design to support injection, even of a singleton, is better than using a static... at least for testing. Beyond that it comes down to habits (TDD being one) and a general sense of always keeping testing in mind as you design and code.
Here's how I would solve this problem. You are checking each number from a base 2 up to the max Input a user gives. Then you are printing prime numbers with an X representation of that number. You need a boolean (bool) to flag for being Prime or not Prime. You also need a String (string) that represents how many "X" to write in a row. // Variables bool isPrime; string drawX; //Now we can do this if( isPrime ) Console.WriteLine("{0} {1}", drawX, currentNumber); Psuedo Code * get input... int userInput * Outer Loop from 2 to userInput * Inner Loop - X divided by numbers between 1 and X * Inner Loop - Add an "X" to our string representation * If it's Prime, Print X's equal to number and state number.
Also it's usually best to assert *one* thing per test. If you do need to assert multiple things on a set of calculations, just duplicate the Arrange and Act (or refactor into helper methods) and change the Assert. The granularity of test reporting (did it fail on Assert #1 or #2?) is absolutely worth adding new tests to run.
If you have an array of arrays like this new double[][] { new double[0], null, }; SelectMany() will throw a NullReferenceException. The null safety problem I was talking about isn't the containing object, but a null reference in the array-of-arrays. In the context of OP's post, this probably doesn't matter, but it surprised me, a bit, and seems worthy of note.
Take a look at [Fody](https://github.com/Fody/Fody), or, more specifically, [Fody.PropertyChanged](https://github.com/Fody/PropertyChanged). It does exactly what you're trying to do: Inject some code in auto-properties' get/set code. You might get some pointers on where to start by looking at how they implemented it (and maybe you can even use Fody's framework to do it easily).
If you can use linq, check out SelectMany. collectionOfCollections.SelectMany(item =&gt; item).Count()
Depending on what you're trying to do, you could check out PostSharp and adorn the properties with attributes which in turn execute the special behaviour. For example: http://doc.postsharp.net/location-interception
This is pretty much what I'd go for as well. Learn what IoC is, learn to isolate your dependencies behind interfaces and you should end up with classes that are extremely testable. Mock any dependencies and you can make them throw a particular exception at a particular time, or return specific data or whatever you need.
Thank you for the advice, in terms of the data structure, is there anything I should be doing differently? I am Using interfaces for the collections but I want it to be as loosely coupled as possible 
You answered your own question. &gt; After that, I checked the URL of the login page , It's https, but the page after I logged in is http
Now do it all in LINQ expressions.
What have you tried that is not working? Which part are you stuck on?
I am serializing changes to objects to synchronize memory across a network. I have an ugly solution. This will allow me to make the solution less ugly. 
Focus on the units or methods that have logic that actually do something besides calling a service method or getting data from the database. Test the methods that actually process that data. Those methods should be pure, with minimal side effects. You can then take your well tested units and orchestrate them all with another method. The orchestrating method can make a service call, etc, to get the data and feed it to the purer methods. I think that type of method would be better tested with integration tests than unit tests + mock objects.
Why are you not using auto properties?
It'll infer type parameters based on the *arguments* passed to that function. The compiler has no idea what you're doing with the return value. In other words a method T Foo&lt;T&gt;() will have to have its T specified explicitly every time.
Insightful. Thanks for sharing.
\*heavy breathing* Oh yeah.
Thank you for sharing! This was interesting
The OP asked how to write *testable* code - not how to write *tests* 😉
Haskell, Rust, Scala, and probably also Swift. EDIT: In Haskell, it's called classes, in Rust it's called traits, in Scala it's called implicits, but users of all those three languages will often use the term "typeclass". The `SGroup` is actually a monoid and this is how you'd implement it in those languages: Haskell: class Monoid a where mempty :: a mappend :: a -&gt; a -&gt; a instance Monoid Int where mempty = 0 mappend x y = x + y addAll :: Monoid a =&gt; [a] -&gt; a addAll xs = foldr mappend mempty xs Scala: trait Monoid[T] { def empty: T def append(x: T, y: T): T } object Monoid { implicit val __monoidInt = new Monoid[Int] { def empty = 0 def append(x: Int, y: Int) = x + y } } def addAll[T](list: List[T])(implicit monoid: Monoid[T]) = list.fold(monoid.mempty)(monoid.append)
Unity is probably your best bet especially if you want a physics engine. Alternatives are things like SharpDX and then finding a physics engine and implementing it
I used this code. The caller to this filters out any semi colons. (just drops the entire string) https://gist.github.com/anonymous/93aa7326640086ddc0b3c3076ba3c206
The article implies that the goal was improved performance, but this seems like a rather inefficient implementation. How bad must VDS.Common be in comparison?
That's interesting and all, but what does it have to do with C#?
This sounds awesome, but the point was to get practice with 2D arrays. What you suggested is very interesting and definitely want to give it a shot! Thanks! 
Have yet to work with Linq, and not sure if you're joking or not but will look into it :)! 
Well, hashing, cryptography and all those related topics are a part of programming, and they are used is many projects. Also I am learning more about this topic in general and I am pretty involved with it so I thought it is relevant to post this news here.
Oh *please* let this become a thing. I've desperately wanted traits (actually, mixins, but this is a good step) in C# for years.
An e-commerce site using Microsoft Commerce Server. I've been programming for years, started .Net with .Net 1.0/C# and then almost exclusively .Net/C# since 2003 (1.1). 
How much of C# would I need to know before starting?
This is a fantastic answer. I agree that 11, 31, 30, &amp; 18 aren't really necessary for a junior level position. You'd do better using extra time learning version control and unit testing. Or even a little bit about some non-Microsoft libraries like jquery fundamentals, or knockout. Development is hardly done in a vacuum of only Microsoft technologies. I also didn't see anything about Inversion of Control or Dependency Injection, but I'm not intimately familiar with these courses. Those would also be good things to look into, but again, you won't need to have perfected these to get a junior-level position. Finally, you mentioned Clean Code: Writing Code for Humans. The pluralsight course on this is great, and it goes quick. I would definitely squeeze it in somewhere.
Its hard for me to say; when it was released, C# felt like the language I had been waiting years for. I had already been programming for years, so I read a bunch of the language specification which was very boring. 
If you're developing for Windows exclusively, then I recommend Microsoft's [Win2D](https://github.com/Microsoft/Win2D)
I notice that Rfc2898DeriveBytes uses PBKDF2 and HMACSHA1. I can't think of a way that hash collisions would affect password storage, which is what most people are probably using that class for. I wonder if that class should still be used?
I understand as much. If I conceptualize that the file explorer window is a view with a viewmodel, it's logical that the model (the "file system") is publishing the event. That would mean the "folder" model object is publishing the event in order for both viewmodels (the in-app viemodel and the file explorer viewmodel) to correctly handle the event and update their respective view. Having said all that, the resulting understanding is that a folder is a model object publishing a changed event. Is this a correct assumption?
Here check out my github. Github.com/ashfill. I progrsm only in c#.
I think you are overthinking what is otherwise a simple process. The operating system just publishes an event whenever the file system changes (i.e. a write occurs, file is created, etc.). If Explorer.exe were a csharp app, it probably just use FileSystemWatcher as any other csharp app, which just listens to the lower level C api.
The very first C# program I worked on was a SOAP sales order/invoice transmission application (EDI). Like all good and decent people I cringe when I think of the things I did when I was just starting out. I wrote my own XML parser...
Basically, you would create a method that you want to be called when a key is pressed inside of your object (say a text box) private void textBox_KeyPress(object sender, KeyPressEventArgs e) { if ((Keys)e.KeyChar == Keys.Enter) { // Do something if the Enter key was pressed in the text box } } Then you would register your text box's KeyPress event to your method. TextBox txtBox = new TextBox(); txtBox.KeyPress += new KeyPressEventHandler(textBox_KeyPress); This is to help you get an understanding of how it works, but really, you should be using Visual Studio's design editor to automatically create events for you.
To be clear. If you use SHA-1 for security reasons, you should move on to something more secure like SHA-2 or SHA-3. There are reasons outside of security to use SHA-1 and those remain ok. 
I use structs to interface with Fortran with Binary Serialisation. I've put up some of the code on [github](https://github.com/ewinnington/core-minimal/blob/master/src/data/BinaryStructs.cs) while I was checking compatibility with net core. //In project.json, add to BuildOption "allowUnsafe" : true [StructLayout(LayoutKind.Sequential, Pack = 1)] public unsafe struct DemoBinary { public fixed byte Name[80]; public int ifield1; public int ifield2; public double VolumeMin; public double VolumeMax; public fixed double FixedVolumes[11]; } then I have a generic function to read and write the structs out: public static T FromBinaryReaderBlock&lt;T&gt;(BinaryReader br) where T : struct { //Read byte array byte[] buff = br.ReadBytes(Marshal.SizeOf&lt;T&gt;()); //Make sure that the Garbage Collector doesn't move our buffer GCHandle handle = GCHandle.Alloc(buff, GCHandleType.Pinned); //Marshal the bytes T s = (T)Marshal.PtrToStructure&lt;T&gt;(handle.AddrOfPinnedObject()); handle.Free();//Give control of the buffer back to the GC return s; } public static void ToBinaryWriterBloc&lt;T&gt;(T item, BinaryWriter bw) where T : struct { byte[] buff = new byte[Marshal.SizeOf&lt;T&gt;()]; GCHandle handle = GCHandle.Alloc(buff, GCHandleType.Pinned);//Hands off GC //Marshal the structure Marshal.StructureToPtr(item, handle.AddrOfPinnedObject(), false); handle.Free(); bw.Write(buff); } It could be made faster, since you can potentially cache the Marshal.SizeOf&lt;T&gt;() and do other stuff, but it works fine. But yeah, if you want to use something standard, just use [Bond](https://github.com/Microsoft/bond), [Protocol Buffers](https://developers.google.com/protocol-buffers/) or [Avro](https://avro.apache.org/). 
I didn't even know that was an option! Does this [SO post](http://stackoverflow.com/questions/18526659/how-to-show-the-paste-json-class-in-visual-studio-2012-when-clicking-on-paste) help you? 
Wasn't aware if it either, but I've always just used jsonutils.com for class generation from json as opposed to hand building them.
Nitpicking on: Exists() is not a part of Linq but a method on List&lt;T&gt;. The Linq equivalent is Any(). 
it doesnt recognise keypresseventargs. it says CS0246 C# The type or namespace name could not be found (are you missing a using directive or an assembly reference?) are you sure that is to be used in windows 8 apps?
Oops, I meant Lambda expression.
You need to add "using System.Windows.Forms;" up at the top, as that is the namespace that that class is in. 
That error was for before you edited your comment. Using your new advice, I get error CS1061: Type System.Collections.Generic.IList&lt;User&gt; does not contain a definition for `Exists' and no extension method 'Exists' of type System.Collections.Generic.IList&lt;User&gt; could be found. Are you missing an assembly reference? I did make sure to add using System.Linq; too.
At the time of designing this system, there were known collisions of MD5, but none of SHA-1. I preferred the extra degree of confidence SHA-1 provided for accidental collisions.
It's because your userList is probably empty, so it is not even going into the loop. I would use the List.Exists method, as I think that is a cleaner way of doing it. As you have it right now, you are adding a user to your list if they are already in the list. 
Oh man, I didn't even notice that lol I got it mixed up. Using List.Exists, there's still that error though of error CS1061: Type System.Collections.Generic.IList&lt;User&gt; does not contain a definition for `Exists' and no extension method 'Exists' of type System.Collections.Generic.IList&lt;User&gt; could be found. Are you missing an assembly reference?
Define your userList object as a List&lt;User&gt; instead of an IList&lt;User&gt;. The IList interface does not have the Exists method defined in it. 
So I'm not good at explaining this, but it is similar to the "foreach" loop from my first example. "x" (or any other name that you give it..maybe it would be better to call it "user") is your local variable reference of each object in your list. And the "x.UserName == "JimJoe"", is the pass condition for your Exists method. You can read up on lambdas and delegates for better understanding, but it is kind of a difficult concept to grasp, I think.
Hmmm, maybe. I still can't imagine how that'd help with this style of collision hack. You'd need an input that accepts rather large amounts of data to find that collision. So if your password is "hunter2", for example, it's not likely a collision that matches that hash would be something small. As best as I can tell it'd be a LOT of characters to find that hash so your password field would have to accept a several thousand letter password. They still don't know your password -- only one with a collision. This is what they refer to as "collision blocks" inside of their document. Read the article and how the collision works. It's quite impressive but it's no small thing and "hunter2" isn't going to collide with anything that's less than 12 characters. It's still silly to use SHA-1, to be honest, but nothing I'd lose sleep over for *password management*. Although I'd probably call you a dumbass for still using it.. but I'm a cunt. Now if you were to compare or validate documents based on SHA-1 -- that's where this hack comes into play, as noted in the article. Open Source projects would be concerned but it'd be quite obvious a document grew massively in size, I'd hope. So, again, while using SHA-1 is a ridiculously stupid thing -- it's not something you should lose sleep over for *password management*.
That's strange that it disappears. You could add a shortcut key. Ctrl-Q (Quick Launch) -&gt; Type "Environment Keyboard" -&gt; Enter -&gt; Search "PasteJSON" -&gt; Assign new shortcut
&gt; As best as I can tell it'd be a LOT of characters to find that hash so your password field would have to accept a several thousand letter password. Only one way to find out. Crowdfund a multi-million GPU hash hacking machine. I *have* to know if the other password is *******
Same here. Now I just need a c# to typescript converter (that's works with a .net core and PCL libs)
Build something that is of interest to you. Don't worry about everything as a whole, break it down into bits. If it's important to you, you'll have more passion to finish it.
I always just used http://json2csharp.com/ Didn't even know it was a built-in function. 
I would probably do something like var hashset = new HashSet(userList.Select(o =&gt; o.Username)); var exists = hashset.Contains("John Doe");
You don't know how hard it is for accident collisions on md5 do you? My point is that your logic without knowing the chance of accidental collision is an argument for upgrading from SHA-1 to SHA-2. Your reasoning though if you knew would result in choosing MD5.
Thanks a lot for that answer. I'm hurting myself with this as C# seems to have problem with passing types as parameters, mostly when you don't actually know the type at compile-time. Typescript had that neat trick where you convert a constructor to a string to use as a simple key, and you could get the constructor out of any instance easily. I'll experiment a bit more.
Are you familiar with Generics? If not, I suggest you bone up on them. They may be what you're looking for.
Generics are almost certainly the way to go. But if it's not what you're looking for, Reflection might be another good thing to look up, but it comes at a performance cost. It may also be worth noting that you can make dictionaries of Type,Func if that'd suit your purpose better.
If you are searching for a value in a dictionary then it's basically the same as a list since you need to inspect each value individually until you find a match. Using a key to access a dictionary is what gives you O(1) speed since in only a small number of steps you can index into the dictionary and access the value. I didn't quite understand what you were doing, but keep that in mind. Edit: some people claim that this is premature optimization. This is incorrect. Choosing the correct data structure is fundamental to software design. 
Thanks, it's all getting clearer. What my code does is it automatically assigns a unique id to every instance that extends Data, and store that instance in a dictionary keyed to the id, then stores that dictionary in another dictionary keyed to the Type of object. So, say, for the classes Tomato and Potato that extend Data, I can access the Tomato instance of id 21 by calling Data.DATA_LIST[Tomato][21]. This part of the code is mostly an experiment to see how much can be automated through sub-classes. It will also be useful to serialize my data with specific ids instead of references. 
i've hit this before, i think it disappears if you have the "wrong" type of project or file open or something
Same here. Mind blown.
Google it, everyone has problems with it. It will randomly not fire events or notice file changes, it doesn't support UNC properly so it will sometimes not detect changes on file servers... It's basically a very crappy version of Linux's/POSIX's file change notification system.
Then it's almost 99% dependent on the system it's running on not the compiler.
already tried that.. it says all of the framework assemblies are already referenced. please use the object browser to explore the references in the framework. and there is no way to add it. im using the Universal windows 8.1. is it different in that?
Same here lol...
You could try using the BitConverter class. It should do exaclty what you need.
But how do i set the length?
 byte[] length = Encoding.ASCII.GetBytes(output); int intValue = output.Length; byte[] intBytes = BitConverter.GetBytes(intValue); Array.Reverse(intBytes); byte[] result = intBytes; my code sofar 
any example code? I'm a rookie
FYI *using* is [not strictly necessary](http://stackoverflow.com/questions/212198/what-is-the-c-sharp-using-block-and-why-should-i-use-it), depending on use case. &gt; C#, through the .NET Framework common language runtime (CLR), automatically releases the memory used to store objects that are no longer required. The release of memory is non-deterministic; memory is released whenever the CLR decides to perform garbage collection. However, it is usually best to release limited resources such as file handles and network connections as quickly as possible. &gt;The using statement allows the programmer to specify when objects that use resources should release them. The object provided to the using statement must implement the IDisposable interface. This interface provides the Dispose method, which should release the object's resources. Edit: [Just to provide clarity](https://msdn.microsoft.com/en-us/library/yh598w02.aspx): &gt; As a rule, when you use an IDisposable object, **you should declare and instantiate it in a using statement**. The using statement calls the Dispose method on the object in the correct way, and (when you use it as shown earlier) it also causes the object itself to go out of scope as soon as Dispose is called. Within the using block, the object is read-only and cannot be modified or reassigned. &gt; The using statement ensures that Dispose is called even if an exception occurs while you are calling methods on the object. You can achieve the same result by putting the object inside a try block and then calling Dispose in a finally block; in fact, this is how the using statement is translated by the compiler. The code example earlier expands to the following code at compile time (note the extra curly braces to create the limited scope for the object) Pinging /u/TheWaII 
Yep, that's more or less the basics. For transfering data between machines you need to make sure you keep [endianness](https://betterexplained.com/articles/understanding-big-and-little-endian-byte-order/) in mind also.
I understand that. To get the Type of a... well, type, you use typeof(), but if you have an instance and you don't know what it is (it may be a Cat or a Dog), then you have to use instance.GetType(). The thing is, it seems I cannot pass obj.GetType() inside &lt;&gt; as a generic method parameter.
For a method as you have there, you wouldn't use generics unless you know the explicit concrete type of `this`. Rather, have an overload that takes a `Type` parameter or requires a `Data` object: public static int GetId(Type t) { if (!typeof(Data).IsAssignableFrom(t)) { //didn't supply a Data type, throw exception? } return ID_LIST[t]++; } id = GetId(this.GetType()); A better option is to just require an instance of `Data` since you seem to have one anyway (in the form of `this`) then you don't need to validate the type coming in: public static int GetId(Data obj) { return ID_LIST[obj.GetType()]++; } id = GetId(this); EDIT: In most typical cases, generics are useful for enforcing _compile time_ type safety. Once you start hitting `.GetType()`, you're starting to move into the realm of _runtime_. Perhaps a useful generics function for you might be some kind of factory for producing these `Data` objects: public static T CreateData&lt;T&gt;() where T : Data, new() { T t = new T(); t.id = GetId&lt;T&gt;(); return t; } Tomato tomato = CreateData&lt;Tomato&gt;(); Potato potato = CreateData&lt;Potato&gt;(); Orange orange = CreateData&lt;Apple&gt;(); //error!
Try accessing the COM service via a simple console application first to verify that you can access it successfully. That might help remove some of the variability or maybe give you some more options for debugging and testing.
Can you cast an object as a Type object? The only thing I would have liked which seemed possible with generics is so that my return value is already cast to the correct object (a Cat or a Dog, both of which extend Data, for example). Considering this: public static Data Get(Type aType, String aId) { return DATA_LIST[aType][aId]; } In this situation, the object will always be returned as a Data object I will have to cast back to a Dog or a Cat. Is there any way I can cast an object to a Type variable, and is there anyway to return an object from a method as a specific passed-in type?
You mean stackoverflow code ;) Anyway, test it out, see if it works or debug
It's a very nice feature. But if you don't have it (like for instance if you just got put on a Java project), then regex find and replace is your friend. Actually, find and replace with regex is your friend all the time. Make a class out of a list of DB columns? Regex. Add attributes to anything that returns ViewResult? Regex. It's a skill every programmer should have, imo.
You're right, methods implementation do little to explain if they're not even doing what I want them to do in the first place. After re-reading my code again and again, I find out that the specific situation for which I want clean code only happens once, so it's kind of useless. Anyway, your suggestion is good. I'll have a look at the dynamic keyword, as a wrong cast will also cause an exception anyway. Thanks a lot!
&gt;FYI using is not strictly necessary, depending on use case. Sure, but unless you *need* to not have it (e.g. you're storing the disposable object in a field for later use), you should normally always use it. There's almost never harm done in having a `using` statement around an object that doesn't really need to be disposed, and there can be harm done by not having a `using` statement where you did need one.
&gt; but if you have an instance and you don't know what it is (it may be a Cat or a Dog), then you have to use instance.GetType() I don't think you do: https://gist.github.com/anonymous/0ad4e04eef7b68d51b4b4e28fce32778 Edit* Ah, I get what you are saying now. You want to know the instance of the type you are currently in.
But what if you don't know what the instance type is? var dog = GetAnimalWithTypeOf&lt;Dog&gt;(); var animal = new Cat(); var someting = GetAnimalWithTypeOf&lt;something.GetType()&gt;(); //Should return a cat, but doesn't compile because a generic must be a class at compile time, it seems I mean, in most cases I'll know what type I want, but in some cases I want to access a dictionary&lt;Type, int&gt; by using an animal instance as parameter, but I don't know what it is. It works with other methods but the code ends up with a lot of typeof and GetType(). Anyway, it'll be a library, if it works and is well documented, it should be good enough.
Yes, thanks, wrong copy-past.
No worries. You could do something like [**this**](https://gist.github.com/anonymous/ccdb72870d432f11b9d8e2f0921c906a). But then you lose the benefit of enforcing what kind of type you will accept.
Because you're using a new RNG every iteration. The Random class is seeded with a number mostly dependant on the timestamp; You're creating them so fast that they're all seeded with the same timestamp, and thus all produce the exact same sequence of numbers. You should re-use the same Random class, and only seed and initialise it once.
&gt; re-use the same Random class But only within a thread. That class is not thread-safe.
The size of the byte array will depend on the size of the int you're using as input to GetBytes(). If the input is a Int32 (ordinary int in C#) then the size of the byte array will be 4 (there are 4 bytes in 32 bits after all). If you use a Int16 as input then the byte array will have 2 bytes, etc. Play around with this in Visual Studio (debugging) and see for yourself. Int32 var1 = 1234; byte[] byteArray1 = BitConverter.GetBytes(var1); UInt32 var2 = 1234; byte[] byteArray2 = BitConverter.GetBytes(var2); int var3 = 1234; byte[] byteArray3 = BitConverter.GetBytes(var3); UInt16 var4 = 1234; byte[] byteArray4 = BitConverter.GetBytes(var4); The code in your solution is basically casting manually. You might as well use BitConverter.GetBytes() in my opinion.
If you are successfully sending keystrokes and mouseclicks to the 3rd party game, and they are working for some aspects and not others, then perhaps the issue is with the 3rd party, and not your code or the C# and Windows interop. Perhaps this is even some partial anti-botting measures they put in place. Regardless, this sounds like a possible violation of Rule 2 if you're creating bots or automation for an online game or service. Unless you can satisfactorily indicate otherwise, the post is removed under Rule 2.
In addition that you are using the same seed over and over again as /u/Caethy already said, why don't you just do this? rand.Next(100000).ToString("D5") // D5 adds trailing 0 if your number has fewer than 5 digits **EDIT:** also your code will never give you the number 9 in your combination as maxValue is an exclusive limit
What do you think to a static Random field per class?
No? Why? That's too much. Just one per thread.
That's a pretty shitty random 6 digit number, why not `rng.Next(100000, 1000000)`?
Whatever you do, don't try to create a text editor.
Very easy if you don't need predictability: [ThreadStatic] private static Random _random = new Random(); public static Random RandomInstance { get { return _random; } } If you need predictability (for tests), then it's still easy, just less. Then it should be the responsibility of the DI framework and your own to not call instances from across threads.
Interesting. How does this compare to ThreadLocal from the other reply? Other than you can't use ThreadStatic on non-statics.
I have that installed. What I was getting at was it will show up for a while, then it disappears on me. If I close and reopen VS, then it shows back up again.
Don't. Just because something isn't necessary doesn't mean it's not a good idea. This shows intended scope and association with the writer, and if you eventually decide to change it from a memory stream to something else (maybe one that uses unmanaged memory with pointers for efficiency), you won't have leaks.
That definitely is a solution that I may have to resort to. However I've read in various forums that VS 2015 can be used fine in conjunction with the replacement pages. 
You probably need to set it with a binding syntax. So in the properties you write {StaticResource BodyTextStyle} or in XAML Style="{StaticResource BodyTextStyle}" Edit: If you are completely new at programming i would probably skip WPF for now. You are gonna spend alot of time with messing with weird binding stuff and it's not that transferable to other UI markup languages. One thing you should know though is the MvvM pattern. 
Your comment was wrong, D5 adds *leading* zeros, not trailing ones. That is probably why /u/SuperImaginativeName said it was a bad generator, since padding at the tail would *always* give a 5 digit solution (i.e. nothing below 10000). Your code, however, is correct.
whoops totally right I meant leading!
Odd.. Not sure why that won't work. What about xaml? Unless you really want to make a WPF desktop app, i'd wait with it. You don't gain any generalized knowledge from it.
Ok, thanks. I'll just ignore it then.
I've never seen it work like that. I've always had to reference CL3 from CL1 in that scenario. e: in fact only using CL2 from CL1 still requires a reference to CL3 because of implicit usage. e2: I didn't know .NET core does things differently, I'm speaking from .NET full experience.
Yup, there's a mention of it in the VS2017 release notes: https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes &gt; Project to Project References: Several project to project references related issues are now fixed. Also added capability for transitive project to project references. David Kean also [mentions you can opt out of it](https://twitter.com/davkean/status/826913332313534464). Maybe there's a setting in the project properties somewhere to disable it.
The using statement only brings in the namespace, it does not cause your program to import an additional library. I don't think .net core itself causes the transitivity for referenced assemblies, I think it is related to how the project.json files are being interpreted. Not sure if this carries over to the change back to csproj files.
Also, the pages jump around **a lot** - the book jumps from page 46 to page 69, then page 72 (blank page), then lumps you with the exercise on page 73. My guess is that, as /u/1Crazyman1 and /u/CrimsonWolfSage have said, the style is expressed elsewhere in the book, and simply changes the look of the text. Ignore it for now, and continue with the exercise.
It looks like tp3 is unicode (2 characters for a unicode character) If you add a space after &lt;t&gt; it will be true.
Probably because &lt;t&gt; is an uneven number of characters. By adding a space it becomes an even number. Unicode takes 2 asci characters for a single unicode character.
I'm quite new to C# also. Why would it not be a good idea to try and create a text editor?
There are no ASCII characters involved here, the entire thing is UTF-16.
All strings and chars in .NET are UTF16 (two bytes per char), regardless of whether they consist of exclusively ASCII-compatible characters or not.
You could try: Console.WriteLine("tp3 : {0}", tabdelimter.SequenceEqual(tp3.Take(tabdelimter.Length))); I just ran that locally and did the trick. According to the answer to [this question](https://social.msdn.microsoft.com/Forums/en-US/48aeb734-318e-4573-b5a3-6750bdee2a57/string-startswith-seems-to-have-trouble-with-unicode-character-712?forum=csharpgeneral) the problem is that the character modifies the preceeding character. The code above just pulls the appropriate number of characters from the string and compares that instead.
I think you are looking for "deskband". Using C# is not recommended in this case. See this [StackOverflow post](http://stackoverflow.com/questions/13889290/how-do-i-place-my-custom-toolbar-deskband-on-taskbar-in-windows-7-win-wpf).
This(ordinal comparison) Fixed, and thanks for the explanation
@_@ Now this sucks and is quite ironic that programming language made and supported by Microsoft does not have ability to make such apps for Windows that was made by the same company and is supposed bo be used to make stuff for Windows. Thanks a lot for the link and help. I will need to learn C or C++ to make it work then.
I don't think it's so much that C# doesn't have the ability to make such apps (it does), but more like Windows and/or the taskbar aren't designed to nicely accommodate CLR-based extensions.
Removed: Rule 5.
I have no idea what's going on here, or what Han's is talking about in that SO post. Is this "DeskBand" thing some feature that was never widely used? Do you mean an icon in the system tray area, where the time is etc?
I wanted to do the same once and ended up simply parenting a borderless window to the taskbar. Works perfectly on Windows 7 if your extension is aligned to the left. To allocate some space you just write the registry to create a dummy "quick-launch" toolbar with the required width. I don't know if Windows 10 still supports toolbars though. Extending parts of the windows shell always is a hack unfortunately.
Lol... You know i need this? The forward is the problem in my application. Have you read my question?
Does the compact framework support RestSharp? Or even HttpClient? I thought you might be able to do that with either. 
Windows isn't written in C#. C# is largely for Windows applications, not necessarily Windows OS components
Oh that thing? I've seen those, some HP's even now come with that annoying thing. Absolutely useless.
True, but I want to make something useful for myself.
And I want to write Windows application that use OS components so it should at least support it.
I'm borderline senior, and I bookmarked this thread. I can't wait to read the responses, I never want to stop improving
it's impossible to `request` be `null` at the end unless `service.Files.Create` returns null could it be that `request` is global and is modified by something else? also, define "at end"
I'm the lead developer at a biotech company with 10+ years development experience in C# / Microsoft web technologies. Our current customer facing applications are MVC over EF enterprise apps. I started life as a C++ programmer, eventually moving on to VB.NET (no regrets) before eventually tuning my skill set toward the career path I am on now. The key to staying relevant is understanding your own career goals and applying what you learn about software development, whether or not its directly related to the technologies you prefer. The problems you will solve will have very similar looking solutions, regardless of the tech used. Outside of that, stay in the loop about whats going on in the .NET ecosystem. The open secret in this industry is that 90% of the time, having the want-to is good enough. If you want to transition to the MS stack and you've stayed current, even in your spare time, in the state of the technology, AND you have a demonstrable record of solving problems and writing good code, irrespective of the technologies involved, then you wont have a problem getting an opportunity down the road. Edit: bugs
try watching what's going on with a web debugger such as Fiddler
I'm a backend programmer with 6+ years of experience. I've implemented automated testing and new methodologies at my company. We were pretty outdated at the time, but we aren't anymore. I'm gonna give general advice only. To stay relevant i would really start from the bottom - and i did - by doing the following: - Learn about design patterns and architecture in general. We use them everyday and i am surprised the amount of programmers that don't know even the most basic about this. These concepts are generally transversal. - Get yourself comfortable with the language and technologies. If you do regular LOB applications, you should know about ORMs (eg, EF), SQL, etc. Keep an eye on: EF Core, C# 7, Web API, Signal R, WebHooks... obviously this depends on your situation and project which brings me to... - Don't fall in love with technologies. EF is not always applicable. ASP.NET is not perfect. Learn to distinguish situations, and apply the best tool for the job. Some concepts will be applicable in many technologies. - Learn automated testing and *practice* it. It takes a LOT of continued practice. Do pet projects in the form of experiments with methodologies. Currently i have a pet project with no particular theme just to test reactive programming and the new EF Core. You will gain insight with minimal effort if you build throwaway projects. 
Have you learned about properties? It's pretty typical to inherit INotifyPropertyChanged in your class, set up the interface members, and bind the text box to a property. The text box will update automatically whenever you do a textBoxProp = newValue; Also recommend using more verbose variable names and maybe comments since I have no idea what calculation that function is trying to achieve. It seems stupid but if you get sidetracked and come back to the project in a month it'll help you a lot. 
I am on my phone so if you are okay waiting I can give you some pointers later. 
I think he should work on grasping the basics first. 
That's probably fair. But implementing INotifyPropertyChanged alone is a good course in property usage and interfaces. 
Regarding comments: At a very high level, this may help: https://en.wikipedia.org/wiki/Self-documenting_code tl;dr: (but it's not long and you should read) if you use verbose variable and method names (and refactor to keep your methods small enough to be understandable) you won't need to comment 99% of your code.
yeah.. GetType literally returns an object of the Type class. Generics probably aren't necessary in this case. You can just pass 'this' into your function public static int GetId(Data obj){ return ID_LIST[obj.GetType()] } id = GetId(this);
Another possibility is to simply create a virtual method in your Data class called Id, and override it in your child classes to return the id you want.
What's your question/problem? Also you aren't anywhere close to a working program: `inputString` isn't used, what is `randomNumber` supposed to be doing, your `if` statements aren't doing what you think they're doing and will never excute, etc.
Your check to see who wins makes no sense. if (r == s) You are checking to see if 1 is the same as 3. It is not, and nothing that the player or computer does will change this. if (p == r) You are checking to see if 2 is the same as 1. This will not do anything. And the same with the rest. You're not using the randomNumber the computer chooses, and you aren't using the player's choice for anything.
Don't I need to also put the type between &lt;&gt;? Data.Get&lt;MyObjecClass&gt;(MyObjectInstance, "steelWall");
In case you want to use the Property Changed, here's a link that's fairly easy to walk through. [INotifyPropertyChanged Tutorial](http://www.dreamincode.net/forums/topic/208833-using-the-inotifypropertychanged-functionality/)
http://answers.unity3d.com/questions/809383/project-options-grayed-out-in-monodevelop.html Could be the reason. Is there a reason you chose monodevelop instead of visual studio except that you are developing on a non windows machine.
It doesn't mean it's a good idea either :p.
There is also this (free online): [http://www.csharpcourse.com/](http://www.csharpcourse.com/) 
Yeah, Task came to mind as an exception to the guideline, because of how ridiculously cumbersome it would be to dispose of all your tasks. Assuming you're not using Wait/Result to block on the Task, it shouldn't allocate the WaitHandle and therefore not require disposing. I tend to pretend Task doesn't implement IDisposable. For MemoryStream I'd still use it, as most Stream subclasses do need to be disposed. MemoryStream doesn't but I like consistency. In the end as long as you know what's going on you can obviously make the choice to not dispose disposable objects sometimes, for whatever reason. I'm just assuming most people don't know what the dispose method does exactly on most disposable objects they use, so I think it's generally good advice to err on the side of too many using statements.
[removed]
PM me
I found a solution! To solve this problem, we can turn off auto-redirect and do the redirection by ourselves. https://gist.github.com/anonymous/d65e410ee3b7cb57bac79e5cac1f51eb 
There's not going to be any way to get around the order the constructors are called. Some suggestions: * Remove the log message from the base ctor and enforce that each concrete class's ctor logs itself via code reviews or a static analysis tools (if feasible). * Explore object creation design patterns (factory, builder, etc) that may work for you, and put the logging calls there instead. Though that's sort of a big change just for logging... * Just add a string parameter to the base class's ctor and document that it's for logging purposes. If you settle on this but don't want to duplicate code for the ctor and the ToString methods, you could use static methods like so: `private static string ToStringImpl(string type, int id) =&gt; $"[{type} Corge ({id})]";` `public override string ToString() =&gt; ToStringImpl(Type, Id);` ... `public Corge(string type) : base(_lastId, ToStringImpl(type, _lastId++))`
I think the problem you have is theoretical, rather than a “here and now” problem, but it might help if you consider the longer term impacts. Virtual calls can cause some unexpected results, such as , for instance making db calls recursive calls, or starting new threads,. While its obvious that you are not doing this now, someone COULD be inheriting from this class, either as a grandparent or in a manner that does not allow them to see your source. Form their point of view , their code would be legitimate, however it could cause problems with your implementation. Possible fixes? Simple : Add a comment on the virtual methods / properties to warn future developer. Complex : extract your functionality into another class, and use that class in the contructor / destructor . this will make it your intent more clear. 
Senior dev/ Architect / Consultant here. The number one thing to do (as others have mentioned) is practice and stay up to date. Do small bits of work and put them in git hub. Occasionally prune back your older work, but you need to show people that you can train yourself. I cannot emphasise enough **that what you can learn** is more important than what you know. For any given role you will have a subset of the knowledge required (as everyone does). What sets you apart is how you will fill in the rest. 
This is what I'd recommend, but remember if the settings are sensitive (db password, google app secret key) or security critical (user auth endpoint) then you may have to encrypt / decrypt them 
No its infered.
Looking over whats been said. would interfaces be a better solution? You seem to be looking at a range of diffrenting objects that need to agree to "have" certain methods. Thats what an interface is. Objects can implement multiple interfaces, and can be cast to an interface etc. 
https://developers.google.com/drive/v3/web/about-auth
Removed: Rule 4, and... rule 1? Regardless, maybe /r/programmingbuddies or /r/learnprogramming or /r/learncsharp a shot.
If he'd use JSON or XML he could easily serialize the settings into an specific settings object, so I'd go with that.
Make the type name an argument to the constructor, and pass it from each derived class. Since the name is already a property the derived classes set, this should be pretty straightforward. public abstract class Item : IDisposable { public int Id { get; protected set; } public string Type { get; private set; } protected Item(int id, string type) { Id = id; Type = type; Console.WriteLine($"Created {type} (Id: {Id})"); } protected abstract void Delete(); public void Dispose() { Delete(); Console.WriteLine($"Disposed {Type} (Id: {Id})"); } } You should also look into how IDisposable should be implemented. The details probably don't matter too much for your use case, but it can be a point of pain if it does.
I ran into this predicament recently. I am developing a similar app and was worried about the issues that could arise due to the distribution of the client secret in a desktop/mobile application. I didn't come up with a grand solution but [this thread](https://github.com/ncw/rclone/issues/309) confirmed my line of thought regarding the issue. Note that rclone does distribute these keys with their source. They also provide an option for users to enter their own client id and client secret if they are so inclined.
Thanks a lot. I will take a look :)
Depends what they're doing. They could avoid using if in this situation: SomeOptionOnTheUI.Enabled = Properties.Settings.Default.EnableSomeOption; EDIT: Or if using WPF then just bind the control .Enabled or .Visible property to the setting directly from the XAML.
I'd pass a `Type` instance, not a `string` instance. That way it's more flexible if you decide you want more information later, and you only have to change the logging code in once place, rather than all the hard-coded string identifiers.
&gt; if the settings are sensitive (db password, google app secret key) Then they shouldn't be on a client device in the first place, and they have no place in either code nor settings file; Encrypted or not.
That's exactly what OAuth solves. You still need to register your app in the developer console and include the client ID and secret in your project, but you obtain access tokens for the individual users' accounts via the grant process.
Perhaps you could clarify with an example or a link, because I do not get what you are saying.
Same link as before: https://developers.google.com/drive/v3/web/about-auth (along with the further links in that page) &gt;1. When you create your application, you register it using the Google API Console. Google then provides information you'll need later, such as a client ID and a client secret. &gt;1. Activate the Drive API in the Google API Console. (If the API isn't listed in the API Console, then skip this step.) &gt;1. When your application needs access to user data, it asks Google for a particular scope of access. &gt;1. Google displays a consent screen to the user, asking them to authorize your application to request some of their data. &gt;1. If the user approves, then Google gives your application a short-lived access token. &gt;1. Your application requests user data, attaching the access token to the request. &gt;1. If Google determines that your request and the token are valid, it returns the requested data. 
I made a library for reading configuration files (mainly App.Config and Web.Config) that uses extension methods. The reasoning behind it is to be able to easily separate configuration reading from the application logic and providing a simple interface to mock in unit tests. It should be available on NuGet. General usage would be to create an extension method class for `IConfiguration` interface and use the provided methods (`TryGetValue`, and `GetValue` where the last one will throw if the configuration is missing). This allows you to write tests to make sure that the configuration tries to read the correct keys, and test whether or not they should fail when the key is missing.
You just described oauth 2, which is what's used to authenticate and use the Google Drive API. I'm not understanding the issue? The only problem I had was the conundrum I mentioned with the client key.
I was thinking (for instance) if it were to display my sites for Google analytics, it may need to keep my GA details, but you might not want them in plain text in a file
Ah, like so: So a user's own secrets. It's probably prudent to encrypt those, yes.
Sorry , didnt make myself clear,
In OP's code, `Type` isn't being used to store `System.Type` data, and using a `System.Type` object, instead, either means refactoring the `Corge` class to a factory and multiple implementations (which may be unnecessarily complicated) or changing the sort of information being logged. And, really, instead of passing the Type that way, you could use GetType(), instead: it's not virtual.
* Working with dynamic languages * Making heavy reflection-based code (especially with lots of generics) simpler to follow That's about it.
answer was completely wrong.
This isn't really connected to virtual at all, it's the order of operations of ctors. Corge(string) : base(lastid++) The base ctor is invoked first. That's why type is undefined. This ensures a hierarchical object graphic is constructed top down (most base class first, to most derived last) Honestly what you're doing is the problem. You're mixing concerns, violating the SRP single responsibility principle. You're intermingling data and logic, you don't want to do that. Your logging logic here should be entirely outside of these types. I suspect you're relatively new to object oriented programming. OOP used heavily like this results in brittle applications. You really want to construct an ItemProcessor / ItemWorker / ItemService that accepts abstract items and the logging would be invoked in here instead inside Item base. You then want to make your Item base have an abstract ToString() or ToLoggingData() and this be forced to be implemented in your concrete classes. Then your ItemService is able to invoke ToLoggingData() without any care of what happens internally inside the concrete class for how it produces the output of ToLoggingData()
You should really take a look into: - types - variables - methods The first line is the basic of programming. initializing a variable with the type string. -&gt; string is text. Then you add your input to the variable. -&gt; the input would come from your text field. second line is calling a method with the variable and the returning the result to the int variable. The console write line would be changed to either "Messagebox.Show(result)" or changing the textfield.value = result.ToString(); But before doing anything else with your calculator you should really take a look back into the basics everything else would be just a waste of time.
Woops I just realized there is no EvaluateExpression in C# for strings. You would have to write your own Expression Evalutator. Where you need basic math and variable knowledge. You could also use frameworks to do your work but it seems like you are learning and using frameworks shouldn't be done as a beginner. Someone did find a ExpressionEvaluator for basic math but it's kind of a workaround. using System.Data; DataTable dt = new DataTable(); var v = dt.Compute("3 * (2+4)","");
Really? You're getting mad at me for not formatting the code correctly on my phone when I just did your homework for you? My god. Edit: just realize you're not op. Oops.
1. Working with an ungodly API when you only want a particular a property. A good example is the Reddit API. 2. We have an Events abstraction on top of AWS SNS/SQS. As messages come off the queue, we know the type and but it is impossible to use a the traditional `JsonConvert.DeserializeObject&lt;T&gt;` we have to use `JsonConvert.DeserializeObject(message.Body, type)`. At which point we get a `dynamic` back. Luckily passing that `dynamic` value to the associated handler (`Delegate`) it it automatically cast when we call `DynamicInvoke`.
Look into switch or if. There are many ways to do that. But the easiest way would be for the beginning limiting the steps a user is able to do. - Input first value - Press + -&gt; save input1 = input.value -&gt; clear input field -&gt; save string operator = button.text - Input second value - Press = -&gt; public void GetResult(int input1, int inpu2, operator) switch(operator) case "+" {logic for addition }break; input.value = resultFromAddition
&gt; Your logging logic here should be entirely outside of these types. I suspect you're relatively new to object oriented programming. OOP used heavily like this results in brittle applications. That's the thing I think, I'm not (that) new to it, but I'm not quite experienced enough to have recognized that's what i was doing. I can clearly see that though now you've pointed it out. I was also so focused on improving the current system, which works in this way, but I think trying something different would be a better approach. &gt; You really want to construct ... ToLoggingData() I get that in principle, but how to I make sure that the service logs the particular methods/flags that I'm interested in? It seems that if it's completely separate from the class that i would have no way to know when the objects are created/disposed?
Yeah, I probably should have picked a better variable name for the example - my apologies.
I already made one using the console window but now I want one to be like a basic and simple version of the windows PC calculator.
You're still not understanding OAuth. Your client secret is what allows *your app* to connect to Google Drive. The client credentials are discovered at runtime by following the appropriate OAuth flow, and allow your app to act *on behalf of* the Google user for their own resources (i.e.: Google Drive)
My actual code does implement Disposable, I left it out here to try to keep the classes here shorter.
There a a number of resources available online for this. A quick Google search will give you multiple examples, and several walkthrough style tutorials as well. I hope you did try and search for yourself before asking for /r/csharp to do it for you. Learning how to effectively search for help online is an important part of learning. Here's a step by step tutorial from instructables: http://www.instructables.com/id/Creating-a-Calculator-Visual-Studio-C/ Here's a working example on CodeProject: https://www.codeproject.com/tips/853405/a-simple-calculator-in-windows-forms When asking questions, generally trying to see if it's been done before is a good call. And asking smaller, more specific questions is also a good move. Good luck.
The one major use case I can think of is in a CMS (specifically I'm thinking of Umbraco though that's my only exposure to .NET CMSs) where the user can define entities and their associated fields. When you want to work with those entities in the view dynamic means you can do so without having to define models explicitly.
dynamics are being removed in Umbraco 8. https://our.umbraco.org/documentation/reference/Common-Pitfalls/ *In Umbraco version 8+ dynamic support for access to IPublishedContent will be removed.* http://issues.umbraco.org/issue/U4-8626 
TIL, It's been a little while since I've used it but I do remember it being frustrating if you ever needed to do any sort of complex query the lack of Linq support and intellisense was also frustrating.
Because the type can be inferred by the object you pass in, you do not need to specify the type.
Now I feel stupid. That's exactly what I needed. Thanks!
I decided to go with a base class instead of an interface so that I could implement a couple of basic methods for everything. At first, every object would have had its static id counter and member attribute, and a static list of all of its instances, but I decided to experiment with a whole base class that would handle that for me. Using what people suggested here, it now works like a charm. Now, If I write a class that extends Data, and create an instance of it (with, say, and id of "helloWorld"), I can access it by using Data.Get(typeof(NewClass), "helloWorld") as NewClass.
Well, I actually made a huge effort and got a little result but too many errors and I wrote like 20 lines of code just in a + operation, I just wanted to make it from scratch without looking at resources, by the way, it is bad that I couldn't do it without looking for help? I sometimes feel like I have some serious problems in learning
One situation I end up using it a lot is Web Services. Quite often its obvious that on the server side, the developer had used some inheritance, or interfaces, to create a set of closely related entities with common properties. But when I consume that service, I just get a bunch of disconnected entities, that happen to have the same properties. While I could create interfaces, then subclass the generated entities, and apply the interface to the subclass, and then code against the interface... Its easier just to use dynamic and access the shared properties. This is very similar to your node wrapping issue, and I think you are right to go with dynamic in this situation, unless you are in a performance critical bit of code. 
It'll definitely help you learn, but you might find yourself learning more niche concepts compared to making something using standard visual studio. Most other c# programs won't deal with frame rate, for example. If its something you're motivated to play with, go for it, but I'd also recommend trying to make other programs as well so you get a more robust knowledge of the language. 
At my work place we use dynamic to easily work with heterogeneous set of settings for an application hosting several sites. We can use scenarios like int value = currentSite.Settings.Group1.Setting1; string anotherValue = currentSite.Settings.Group1.Setting2; The group, the setting and its type are late bound but preemptively loaded from a proper structure in the database.
I mostly use it for populating JSON objects where maintaining a matching set of classes would be infeasible. If I still did COM programming I would probably use it there as well. In the past I did all of my COM work with VB because C# dynamic wasn't available and the shitty type libraries were wrong.
I'm thinking he either means in the url as some query param, or a cookie. Idrk though. I also don't really understand the issue with opening tabs also. Just store the token in some local cookie or even in localstorage for that domain.
If you already have it working for a console window, then why can't that be applied to the GUI version?
The text/content/character length, or the length of time it displays for?
Does something like this help? https://social.msdn.microsoft.com/Forums/windows/en-US/b41dd328-4ce6-453a-a559-bd46aed9d38a/support-for-tooltip-max-length?forum=winforms
WSDLs are supposed to be used with WCF, but as /u/CaucusInferredBulk explained, some people really don't understand how to use them.
Hacklang: https://docs.hhvm.com/hack/shapes/introduction
Thanks, I plan to start on this tonight!
I have used the following as a reference: http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/ Take a glance at the first couple of tutorials to get a grasp on what he is trying to achieve then follow. He keeps the tutorials up to date as well. 
I used it for a dynamic configuration for plugins for one of my big projects. Basically, I have a config object and just want to let user's configure it while still having some type safety.
Oh, what a wonderful rabbit hole you're going to throw yourself down: https://www.pcisecuritystandards.org/pci_security/
That's a valid concern. I'm going to speak with my boss about this.
What /u/badlife said. Also have you even been over the [quickstart](https://developers.google.com/drive/v3/web/quickstart/dotnet) yet? That might help clear up some things for you.
making types to be exported as xml or json 
You cant as such, as the source doesnt "know" about the interface. Id make a wrapper class and implement the interface there. then you can specify the interface, and even change the source class at a later date. Also supports automated testing
Check out Identity Server 4
&gt; I would not say the Unity community has a heavy emphasis on good coding practices. Dependency injection and testing are particularly absent. These are the worst parts! I really really like DI and testing, because it's just what you should do. Both are strongly absent from Unity unfortunately. I don't want to use Unity in case I get lumped up with all the other shitty code bases that use it, so I don't use it.
 Textbox_result.Text = Convert.ToString(Convert.ToInt32("1")+Convert.ToInt32("2")) What this does is converts two strings to ints, adds them, then converts them back for the text box. Returns 3.
A GET variable is a way of saying as a query param on the URL. Think old school forms which could submit via GET or POST. The POST data would look the same, but inside the body. If it was a GET, it would be the form serialized in the usual query and slapped on the URL you gave in the form action. Each one is a GET variable. Cool, explanation out of the way. What @arconx is referring to, is that if you have a token you're passing in a header, it makes it a little harder to open a new tab. You can't open it straight into an authorized state, because, you can't set a header to get sent from the anchor/link address. Some ways around this .. 1. Allow having a token in the URL somewhere. Probably as a query param. 2. Allow a POST to a URL with token in the body somehow. Maybe as a x-www-url-formencoded body and the token as a param. Just like an old form POST. Click a link and it instead POSTs to new window/tab. 3. Save your token to LocalStorage. Open the link unauthenticated, and then read the token from LocalStorage to load data and rebind the application state. 4. use a cookie and side step the issue entirely. .#3 may work best for you from the Angular2 side, if your server always just renders the HTML for the base app. Think about the HTML being returned to the client when you go directly to different URLs.. image all the following urls prepended `http://www.example.com`. If you go to `/`, what gets returned. If you go to `/users/`, what gets returned. If you go to `/users/{id}`, what gets returned. If they all return the same HTML, and then the routing is purely client side handled by Angular2, then using a token and merely re-reading the token from LocalStorage is If you're doing server side rendering / universal rendering / isomorphic rendering, then, if the logged in user opens a new URL (say, a new tab/window) .. then how do you know they're logged in and thus you're OK to render a logged in state of the UI/HTML to return to the client? 
memories of Type.Missing, Type.Missing, Type.Missing....
I had one case where an OWIN pipeline *may* sometimes provide data, depending on context. I didn't want to import a whole reference tree just for a single line of code, and I knew the structure of it (and so does the runtime). So I just called it dynamic and read data from properties that I know to be there. I've used it another time in the middle of a big code refactoring where the old code could access the new code, but not the other way around. At one point some data had to flow old -&gt; new. So in a similar fashion we made it dynamic and just read what we needed out of it. 
 &gt;I really really like DI and testing, because it's just what you should do. https://gfycat.com/JitteryExaltedFrogmouth
Have you read Jack Dunston's series of articles on learning C#?
When using assembly injection to call native code in another process it can be very useful to simplify things. Here is an example of the interface I use: https://github.com/lolp1/Process.NET/blob/master/src/Process.NET/Assembly/IAssemblyFactory.cs
[removed]
I think most have noted what's usually the 'bad' parts of learning c# through Unity. You won't necessarily learn the best practices and you won't learn some of the commonly used tools/frameworks used outside of game development. If you want to learn game dev, go for Unity. It's fun and you will learn C#. If you want to be a web dev, avoid Unity for a while, try to make a web page instead using MVC 6 (ASP.NET Core). Unity have it's own special conventions that is odd and not at all like working with web dev. If you want to be a software developer, you might as well learn web.
That's a horrible idea. If you don't want to create a new object, just return a DataTable.
You... Don't? If you're looking for something to do testing-wise, à la mocks, you have to make your own wrapper class for it, that then calls an instance of (or reference to, in the case of static classes) the nuget package class.
my teacher just wants us to use basic if else statements so here is what i got so far but when i run and pick it doesnt give me a result using System; using static System.Console; class RockPaperScissors { static void Main() { string inputString; const int r = 1, p = 2, s = 3; string numberString; int randomNumber; Random ranNumberGenerator = new Random(); randomNumber = ranNumberGenerator.Next(1, 4); Write("Enter r, p, or s for rock, paper, or scissors: "); numberString = ReadLine(); int player = 0; if (numberString == "r") player = 1; if (numberString == "p") player = 2; if (numberString == "s") player = 3; if (player == randomNumber) WriteLine("It's a tie"); else if (player == 2 &amp;&amp; randomNumber == 1) WriteLine("You win"); else if (player == 1 &amp;&amp; randomNumber == 2) WriteLine("You lose"); else if (player == 2 &amp;&amp; randomNumber == 3) WriteLine("You lose"); else if (player == 3 &amp;&amp; randomNumber == 2) WriteLine("You win"); else if (player == 3 &amp;&amp; randomNumber == 1) WriteLine("You lose"); else if (player == 1 &amp;&amp; randomNumber == 3) WriteLine("You win");
**Double clicked solutions instead of drag** **Deleted Post** **Facepalmed**
I agree with everyone here. Learning C# with Unity is probably not the best way to learn C#. You'll be happier with yourself if you learn C# first, then get into Unity afterwards.
I would recommend switching from front end to back end. Back end is much more interesting IMHO. When new thing happen they tend to offer some improvements. Front end on the other hand just goes in circles since basically the same UI has to be "reinvented" every few years. After few iterations it just seems like a waste of time. Just think how different is windows95 UI from windows10. More than 20 years of progress with nothing much to show Now think about back end. It cannot even compare. In 1995 cutting edge was some flat file database and "amazing" file server. In 2017 we have in-memory databases, virtual machines, different kinds of scalability and redundancy toys, machine learning, all kinds of APIs. It is unbelievably cool and it requires experience to do it properly. With UI every few years you are just an old guy who is learning new UI terms for the Nth time with a bunch of enthusiastic youngsters seeing that old boring crap for the first time :) 
Sounds interesting from a CompSci perspective, but we've already got Enumerable.Range which does exactly this.
This is, or could be, far more than simply Enumerable.Range, which is quite clunky to work with. However, this document doesn't touch on all the consequences; it's not a trivial thing to just put in a language. See Swift's ranges, for example.
&gt; Enumerable.Range, which is quite clunky to work with Maybe I don't use ranges in my day-to-day, but care to elaborate? &gt; See Swift's ranges, for example. .contains? .overlaps? Looks interesting - and personally it looks like it behaves like a set with method names like that. Sure, we could look at bringing something like this into the language - but can't this be implemented by a third party library?
With `Enumerable.Range` you can't slice a portion from an existing colleciton.
/u/Nathan_4 joined 25 days ago. Every single one of his [**submissions**](https://www.reddit.com/user/Nathan_4/submitted/) has been for codingsight.com.
I haven't, I just visited his website and the concepts seem complicated but I'll give it a go.
That SO question does say it will work as long as .net 4 is loaded first. So I think, check the runtime version, and if its not 4 kill other processes that uses the injected clr. Then start your own first, and after that the others.
This is cool http://stackoverflow.com/questions/3540161/c-sharp-4-0-dynamic-vs-expando-where-do-they-fit And I've used dynamic for a variable to switch web service references between environments because they are different types with the same members. 
Microtransactions for every sort
True, but that isn't the intent of Range. If you want to slice a portion from an existing collection (and I'm assuming quite a bit of your requirements here), I would potentially recommend a Skip().Take() approach. But again, perhaps I've misunderstood what your usage of range is?
[removed]
Yeah, I know this, I'm not stuck in code syntax, but with the algorithm needed: Let's say I have a textbox called result and I press 1 then 5 then 2, so now result display 152, and if I wanted to use that number I just use double.parse or whatever. I want next to add for example, so I press + , what should I do next, should I clear result after storing its value in a variable or what ?
I already made a release for v1.0.0; you can get the standalone .exe from here, no install required: https://github.com/Jameak/ImageDownloader/releases
I prefer to roll my own class for settings and just make it XML serializable. The XML format is easy enough to read and work with, and I can automatically extend the settings however I want and make the application adapt with minimal fuss. Of course, if your settings are security-sensitive (passwords, keys, etc), you might not want to serialize them raw, but that's kinda Software Security 101...
[Try this series](http://jacksondunstan.com/articles/2634). The more recent articles are pretty advanced concepts.
Hello, i checked once again, and every where i see splitOn it is in front of ','. Thanks for response.
I am absolutely not bring sarcastic. At my day job I am surrounded by PHP developers who refuse to write tests for a variety of reasons. So any time I encounter a dev who understands the importance of tests, it makes me remember that I'm not the only sane man left on Earth.
The trick is to wrap the ugly, embarrassing, and downright shameful dynamic code in a class/interface so it is only in one place. Don't allow the dynamic keyword to "escape" to the rest of your project.
&gt;True, but that isn't the intent of Range. That's not the intent of Enumerable.Range, indeed, but it *is* (part of) the intent of this language proposal.
From a glance though, I think maybe switch `FlavourId` and `RecipeId` like so `splitOn: "FlavourId, RecipeId, Id, Id, Id"` to match the order of `SELECT f.*, r.*`? Would help if you can show what your query results are. 
Then its not a *Range* operation is it? I think its alluded to in the link, but slicing and range operations should be discussed separately to keep things simple. Even the actual operators proposed for Range and Slice are different in the link.
Hello, today I'm doing whole data base access once again. There is my database diagram: https://i.gyazo.com/6cb041d4e4e552b250c89296e69fcec0.png I also do some changes on my models. Now, they look like: Flavour: https://i.gyazo.com/6477ab2c33dbecc5b520a0df8eb5dbc7.png Recipe: https://i.gyazo.com/465c59d1c4f0fb1b0aa0720b8f883675.png Query: SELECT * FROM Recipes INNER JOIN RecipeFlavour ON RecipeFlavour.RecipeId = Recipes.RecipeId INNER JOIN Flavours ON RecipeFlavour.FlavourId = Flavours.FlavourId INNER JOIN PercentageAmountFlavour ON RecipeFlavour.RecipeFlavourId = PercentageAmountFlavour.RecipeFlavourId Query result: https://i.gyazo.com/a02283e20dd11bb414e37196277a5908.png All i want to do is map this query to Recipe object, which contains Dictionary with flavours and percentage usage of flavour. 
Real question: what do people use resharper for that VS doesn't already do? I've never been able to tolerate its instability and performance long enough to find a use for it.
I'm not sure I understand what you mean by '*Range* operation'. What I was saying is that `var slice = source[5..10];` makes perfect sense, and `var slice = source[Enumerable.Range(5, 6)]` does not. The proposal is motivated by this specific use case.
The majority of development work these days is web dev based. Software (as in the kind you'd install on your PC) has a lot of issues with it (deploying updates, exposure to clients, etc.) that web applications don't. As such, you'd need a good reason to start writing an application that needs to be installed locally (like a video game, or something heavy like Photoshop or AutoCad). Writing software is likely going to involve fewer technologies but the kind of jobs out there doing it are certainly not easier (the kind of work that is usually a bit niche with a heavy emphasis on optimization). Web Development is the majority of work and you can get decently far without too much effort.
Do you have a good free online source to start learning web development? I honestly don't know the first thing about web dev and I often hear the most popular online sources are not very good. The only C# tutorials I've done have been from [here](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Y6D7PQQIC_5406218949) and I understood and remember all of it, but it didn't really go into depth on web development.
.NET has two classes you can use to send data to a web server. The newer one, [HttpClient](https://msdn.microsoft.com/en-us/library/system.net.http.httpclient.aspx), has extension methods in the System.Net.Http.Formatting.dll for dealing with JSON data directly, such as [PostAsJsonAsync](https://msdn.microsoft.com/en-us/library/system.net.http.httpclientextensions.postasjsonasync.aspx) and its overloads. Note that the "third" (really second because it's an extension method) argument is an object for it to serialize into JSON to send as the POST body. Of course, being an async method, you need to `await` its results as it's done in a separate thread. The [Calling a Web API From a .NET Client](https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client) guide covers this in considerably more detail.
When it comes to web development, you don't exactly do it with just a language. You use what is commonly referred to as a "stack". This is the list of technologies that you choose to handle all three different parts of a web application (database, front end, back end, hosting, etc.) C# would comprise just one part of that. Honestly, I can't recommend any books or tutorials because I don't personally learn well from them. Everything I know I've learned from necessity while working. One direction you could go would be to use a Microsoft based stack or at least the free versions. SQL server Express for your database, IIS for some local hosting, and ASP.NET MVC with razor views along with some bootstrap to make things pretty and typescript for client code (with C# tying it all together) That's enough technologies to make your head spin, but at the end of the day it doesn't matter what you use. Once you've done it one time you'll know what you're looking for/what questions to ask when doing it with a different technology.
Nobody memorizes everything, and we all need help with something from time to time. Even know a few professionals that look up things all the time. Don't worry about not knowing the answers, worry more about not being able to find them. A great programmer doesn't sit alone, but knows how to pool all of their resources around them to build better things tomorrow.
Usually my videos are for software that I created, but this one is just some tricks to make interesting backgrounds even if you suck at graphics like I do.
So I concur and have been using Resharper for a very long time. But when I did initial testing of VS 2017, I did it for several weeks without Resharper - man did VS fly, it felt like a new program. I did the Resharper install, and got back the old pauses and sluggishness. I am keeping it for all the reasons you mentioned, but man there might come a day when VS has caught up enough that I don't. They need to offload some of that contention from the UI thread.
But I tried a lot of methods and ways but I couldn't figure out how to create a calculator with numbers buttons instead of two textboxes, and frankly I felt like I won't be able to do so.
I would store the previous text in a local variable and when you see an add function set it to result.Text, clear the variable, and input again.
VS and Jetbrains have both been working on out of process extensions. Meaning it won't be blocking the UI like they do now. Will go a long way.
For me personally, it is: - The "File structure" subwindow (I hate the little dropdown method list that is on top of each tab in VS, I have those disabled) - Unit testing supportt ages ahead of VS - Refactorings much more powerful than what VS has - Surround with... - More fine-grained coding style settings - Better work with namespaces - Better work with live templates + custom templatee
So I think that worked because I'm no longer getting the error :P I guess the DLLs weren't enough, or I had the wrong ones.
I was hoping for `if (5 &lt;= x &lt; 13) { }` :(
I like when it shows me how I could redo some logic into a lambda expression. Pretty nifty. Though I am a student and get it for free. Does seem silly expensive...
You could write a RangeFrom&lt;T&gt;(this IEnumerable&lt;T&gt; enumerable, int skip, int take) extension method that skips and then takes from an enumerable. Or you could write a similar method that can define the bounds and use skip and take behind that extension too. Should be quick to enumerate too right?
The type could easily be implemented by a third party library. Changes to compilation could not. For example this: foreach (var i in 0..10) {} might actually compile as for (var i = 0; i &lt;= 10; i++) {} The same syntax used elsewhere: if (i is 0..10) {} could be compiled as: if (0 &lt;= i &amp;&amp; i &lt;= 10) {} and elsewhere: var range = 0..10; as var range = new Range&lt;int&gt;(0, 10);
&gt; Got some stupid 10 level deep for/foreach? Resharper will convert it into a faaaar simpler LINQ statement that is a lot more readable. Resharper taught me LINQ! The best way to learn it in my opinion, something showing you exactly how your existing code could be translated and you start to pick up the patterns fast.
Ive never once had a speed issue with resharper, maybe its because ive been developing with powerful enough workstations, even in .7M+ LOC solutions... Usually dont have solution wide analysis on as i find it to be more annoying than anything when developing larger framework-type codebases
It might not always be the right thing though, there are cases where linq is very inefficient compared to a simple for loop.
Namespace updates for me are by far my most utilized feature. I tend to refactor a lot, especially at the onset of new code where I reason about things as I build. The ability to drag files around different folders/projects, then click a button and have the namespace changed and all references fixed saves so much time
 string sqlQuery = @" SELECT r.*, f.*, paf.PercentageAmount FROM Recipes r INNER JOIN RecipeFlavour rf on rf.RecipeFlavourId = r.RecipeId INNER JOIN Flavours f on f.FlavourId = rf.FlavourId INNER JOIN PercentageAmountFlavour paf on paf.RecipeFlavourId = rf.RecipeFlavourId"; var lookup = new Dictionary&lt;int, Recipe&gt;(); _conn.Query&lt;Recipe, Flavour, Recipe&gt;(sqlQuery, (r, f) =&gt;{ Recipe recipe; if(!lookup.TryGetValue(r.RecipeId, out recipe)) lookup.Add(r.RecipeId, recipe=r); recipe.RecipeElements.Add(new RecipeFlavour(f, PercentageAmount)); return recipe; }, splitOn: "RecipeId, FlavourId"); I'm sorry, yeah it should have been `f` and not `rf`. I changed it here. Note that I also replaced `new RecipeFlavour(rf.Flavour, rf.PercentageAmount)` into `new RecipeFlavour(f, PercentageAmount)`. Can try this?
Years and years and years ago I did with win32 (probably 1999). If I recall correctly you have to intercept the non-client hit (or clip) rect messages, and your dialog needs to be of a "dialog toolbar" style. With C# you'll need to use the wndProc to intercept these messages, and you'll need to do some digging for the appropriate windows messages to grab. Good luck!
ItemFactory could indeed build the objects, ItemService should be more meaningful. So going from your words. ItemService could accept an ItemFactory and an ILogger so in this example, the service is responsible for triggering the item creation and logging. The ItemService would likely expose more than a single method. A good service exposes about 3-5 actions, at 12 or more actions that's a clear sign the service is a God object / violating the single responsibility principle. 
&gt;The closest equivalent of HTML/CSS in the C# world is WPF I would rather say, XAML is the equivalent of HTML/CSS, WPF is just one of the technologies leveraging this, Silverlight, WinRT and UWP are other technologies based on XAML.
C# is a very safe language with far far less pitfalls than JavaScript. I would recommend picking up .NET Core, power through some tutorials, and then come back with any questions. [Start here](https://docs.microsoft.com/en-us/dotnet/articles/core/getting-started) Regarding UIs, the only really relevant web "framework" around .NET / C# is MVC. Which is more of a design pattern than anything. Have a look at MVC and Web API. You can plug in any frontend framework (React, Angular, Knockout, etc) over the top.
&gt; because the error doesn't reference the file location It actually did: &gt; Copying file Images\ajax-loader.gif to obj\Release\Package\PackageTmp\Images\ajax-loader.gif failed. 
True, once I read it back I realized that. Thanks again!
I would love too. If there is no discussion about this feel free to open one!
Actually, what might be an interesting idea for you is to use Typescript for a while. Use as many of the features and type safety it provides you. It's a language that gets a many of the best parts from both languages. Just an alternative idea. Really though that's only if you can take learning in stride. It obviously won't be faster, but might just be more comfortable.
Below are websites for C#, ASP.NET and HTML5. **C#:** https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-8295 **ASP.NET MVC:** https://mva.microsoft.com/en-US/training-courses/introduction-to-asp-net-mvc-8322 **HTML5 and CSS3:** https://mva.microsoft.com/en-US/training-courses/html5-css3-fundamentals-development-for-absolute-beginners-14207 **For SQL Server and database access, you can use entity framework:** https://mva.microsoft.com/en-US/training-courses/implementing-entity-framework-with-mvc-8931
I want to use the MVC design pattern but not web-based. So ASP.NET is not usefull here i think? 
What do you mean "not web-based" ?
I'm making an application with Windows Forms.
Hello, but i still cannot access to PercentageAmount, because it's not a member of Flavour.
MVC - the framework which comes with .NET - is designed for web programming. As far as I know, what you're looking for can't be done with the MVC framework that's supplied with .NET (although I'm sure someone will correct me if I'm wrong). However, MVC as a general design pattern absolutely *can* be used with Windows Forms. It's just that .NET doesn't come with any built-in tools to help you do it, so you'll have to build the relevant bits yourself. I haven't ever done that, but I don't think it would be too hard, and there's a good discussion on where to get started [here](http://stackoverflow.com/questions/122388/how-would-you-implement-mvc-in-a-windows-forms-application).
Thanks bud, I've actually used it already on a couple occassions. Thanks to that and reading a pinch of java im pretty comfortable looking at c#, just wasn't sure if there were more unknown unknowns.
Start looking at WPF. A lot of tutorials you find for it are using the MVVM pattern, which is fairly similar to MVC
Razor?
Those are the same things. Your users appear to be named as people. Do you use AspNet Identity?
There's not a single word about the license.
I would use WPF over Windows Forms. I personally believe the WPF looks alot better than Windows Forms.
Use WPF and MVVM pattern. You can use a MVVM framework that would make your life easier, for example MVVM Light.
&gt; I would recommend picking up .NET Core I've only glanced at Core recently. Is it the way of the near future, likely to be broadly implemented on an enterprise level soon?
A buddy is in the same situation where he's been a pre-ES2015 JavaScript frontend dev for years and wants to take on a statically typed language like C#. With JS, he felt he could just code, code, code without any limitations. Now, with C#, he complains that he's inside a cage with a severe lack of freedom because of too many rules. Oh please! These JS developers can be so dramatic! lol
&gt; Given that it can run on linux That, I had overlooked. OK, I'm on it; thanks.
Can you post your updated models? I think the ones above are already different from what you have now.
https://github.com/jagged/oneof - https://www.nuget.org/packages/DiscU/ This is a pattern matching library intended to bring F# style Discriminated Unions to C#, with implicit conversions, and rich pattern matching capabilities. A fork of an earlier project, we think we've brought a more C#-like API, robust handling of class hierarchies, and much improved performance. We're still making performance improvements and finalizing the API along the way. 
From the official announcement: &gt; The engine will be on display at GDC 2017 in Silicon Studio’s booth #624, and available for purchase April 2017. It is not released yet.
You had to remove the preview version when installing RC, so I expect it to be the same going from RC to RTM: https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes
Alright thanks, might try out the RC version anyway. 
Ha.. I feel quite the opposite. I crave structure and stability and am sick of the looseness and chaos of the JS world
But they said in a blog post that they were going to announce the license at gdc.
. Net core is not yet a stable API. Go with regular dotnet. 
the convert, widen, and narrow vector methods are added to corefx, but the JIT has to be updated for them to work. It isn't "live" yet. 
Hmm. But the nameof(namespaceName) DOES return the name of a namespace... just not the full namespace. In my case, I have a namespace named BGSD.Data.Records.Types. nameof returns Types, not the full namespace name. Using nameof also allows me to store this value in a const, whereas I don't believe typeof(someType).Namespace does. Is this right?
Okey. Recipe: public string Name { get; set; } public DateTime Date { get; set; } public int RecipeId { get; set; } public List&lt;RecipeFlavour&gt; RecipeElements; Flavour: public int FlavourId { get; set; } public string Name { get; set; } public string Company { get; set; } public string Shop { get; set; } public double? Amount { get; set; } RecipeFlavour: public int RecipeId { get; set; } public Flavour Flavour { get; set; } public double? PercentageAmount { get; set; } 
`nameof` is a compiler feature that gets turned into constant strings, but clearly it isn't very useful in this situation and there is no way to change its behavior. I suppose you could do const string namespace = nameof(BGSD) + "." + nameof(BGSD.Data) + ... If you *really* want a const for whatever reason, but I don't think that would be a good solution.
likely a mixed thing, joke and serious :P doing it in linq alone would be an awesome learning experience, but you'd likely take a massive performance hit.
I thought about that solution but the issue there is if I ever refactor the namespaces, the value may no longer be correct.
Yeah I get the feeling op is missing something. If you really really needed just the code for the interface why not just F12 it and copy paste the code?
Isn't Monogame entirely in C#?
Yes I probably would have haha. And Okay Thanks :)
ha, yeah they yanked a lot of stuff out. No longer depends on OpenTK, they just do their own. Smaller, simpler, yay. 
Alright I'll go further: **Game engine has (see Unity game engine):** - built-in physics - Asset pipeline - Rendering pipeline - Scripting You basically use features that already work and require no extra code to use. You use an editor to combine these features into something you want (a level/game) **Framework has (see MonoGame):** - Compatibility with a physics library (can be called through code). - Compatibility with a graphics library (OpenGL, DirectX). Usually some wrapper to easily draw something without using DirectX or OpenGL directly. - Some tools to get your assets/particle effects in game (something like MonoGame). **Library has (see DirectX, OpenGL):** - Focused on one topic. Like graphics, physics, AI, Networking.. etc.
Oh wow, whats going on with OpenTK?
This is for an intro class into C#. I've written stuff a little more advanced, but with this assignment we are trying to use .Net and more math-y type math, so i am having some trouble. 
I would be rather surprised if they forced users to do that. Given the significant changes to how 2017 RC is installed and updated it wouldn't make a lot of sense. It's not anything like installing 2015!! with 2015 it was start the install and come back in 8 hours and hope it was done. With 2017 RC it was ~25 min tops and even adding or removing substantial packages is easily &lt; 15 min
I think removing all previous versions, rebooting and installing this version (especially this new 2017 with a whole new installer) is a good idea.
I think you need to move the "Parse" code to above the Calculation code. And you only need the radius. Also, minor thing and the optimizer will do it for you anyway, but you don't need the "double pi" variable. Math.PI is a constant, so there's no cost in using it repeatedly.
oops. duh! Tho I am having trouble with trying to set Math.PI; as a public constant. 
That did, thank you!
I would say loading the words from a simple text file or CSV would be best... that way you don't have to recompile the application each time you want to add a word... just open up the file, add it, and re-launch the application.
Awesome! However I personally prefer a game engine's runtime to be written in C++ for performance purposes. 
Isn't monogame simply an open source version of XNA, which to be fair, Microsoft always referred to as a "Framework". If the two are more or less the same, I guess that does make it a somewhat official definition.
I remember this same kind of statement against C++ in the late 90's on USENET, using C as preferred language.
well written C++ should be as fast as C. With good modern practices, it can also be faster to write, but that's not a guarantee. C++ compile times tend to be worse, and that was much much truer at the time. C++ has come a long way in the last twenty years
&gt; C++ has come a long way in the last twenty years That was my point, nothing prevents C# compilers to improve as well, specially now that finally Microsoft decided to go native and plug VC++ backend into their .NET Native compiler. If those of us that believed in C++ had paid any attention to the C naysayers, C++ would probably never taken off. Fun fact, now all major C compilers are actually implemented in C++.
No, sorry, I haven't used any particular references so I can't really recommend one out of personal experience. Unity does host a lot of various tutorials and learning resources on their site, there's lots of help available in their forums, and I do recall seeing quite a few Unity3D books that you can read.
I gotta ask; what problem are you trying to solve here?
Sorry was not aware, thanks for the info!
To paraphrase the author's response when asked if the project is still maintained: "Life, uh, gets in the way" 
Really? Huh. Don't you still include files?
I made this. It was a learning project, and I hoped to make into something that would suit my particular needs. Other work caught up with me however and the project has languished ever since. -------- **Edit: copying and pasting a reply I made below, which may get buried due to downvotes on the grandparent** &gt; The project is over two years old now. Back then, MonoGame had a number of shortcomings that I really wasn't happy with, particularly with respect to 3D capabilities. Also Xenko (named Paradox at the time) was in a huge state of development flux, and not really stable enough to start a new project with. And aside from those two, there were no other solutions that I could find that were really built with a code-first approach for developers. I didn't want to use some big, fancy, one-size-fits-all, studio-oriented package (Unity, anyone?) that buried the inner workings in hard-to-reach places, used old, crusty versions of C#/.Net, or forced me into particular workflows that only exist to try and appease the largest potential audience. &gt; So I started Grasshopper, which was named as such because I had "much to learn, Grasshopper". The biggest bit of advice I can offer from experience is based on the fact that I started this project when I was still afraid of the amount of time it might take me to become competent with C and C++, and wanted to stay in my safe little C# comfort zone. After Grasshopper, I challenged that fear and through self-learning, experimentation and smaller projects, discovered that C and C++ were way less scary than I'd first thought. If I were to start again now, I'd definitely just go C (with a dash of C++). It's worth learning if you're only trying to use C# for everything just due to it being safer and more comfortable. You'll grow your skills and broaden your horizons, and maybe even still be able to use C# for the higher-level stuff through a bridging layer between C/++ and .Net Core. I like the ideas behind Jonathan Blow's Jai language, but that's not ready for release yet, and C/C++ has a larger ecosystem anyway. I'd love to take a more functional approach (e.g. F#, Haskell or even JavaScript with a functional/reactive approach), but the performance be insufficient to do anything advanced with. Even something like Rust would be great, but the ecosystem for game development is very immature, and I'd want to be able to use mature libraries for things like font loading, image manipulation, graphics pipeline management and so forth. Then again, maybe just use MonoGame. It's a lot better these days. 
C# has the [using directive](https://msdn.microsoft.com/en-us/library/sf0df423.aspx) which works a bit different to an \#include. It tells the compiler you are using the types in a namespace - which is a logical structure for types. It's more complex than that but that's the main idea. You add a `using` directive and can then use the types defined in a namespace 
Just to add to that though, the `using` directive is optional. It just allows the user to use types in that namespace without having to include the full namespace path every single time. The types available for the user to use is defined by the project's references.
One more tidbit for a boost: move Resharper's cache folder to a ramdisk or an SSD and then add that folder to your antivirus's exceptions.
Ah thanks didn't know that is a library, thought that was something he wrote.
C's inclusion model is generally agreed upon as pretty bad. Outside of C and C++, you don't commonly see a textual "copy-paste" done by the compiler when you need to use another file. C++ even has modules in the works, which should be a fitting replacement for new code.
Not to mention you can do most of the things C++ allows you to do, you can work at the bit-level if you want to, do manual memory control/management, use pointers, etc. The main thing that often makes a C# program run slower is when memory management is left up to the built-in garbage collector instead of explicitly handling the life of that data yourself.
Still can be useful for other csharp devs as a reference. Discovered it after /u/bushido95's question.
Feel free to fork and extend ;)
I'm pretty sure you'll be able to do a direct upgrade. I think I remember a Dev saying it. Other than that, azure let's you spin up VMs with 2017 RC on it and team services build supports it which is a good indication that the update should be smooth
Sweet! Also, just to point out that [Xenko](http://xenko.com/) also exists, they use SharpDX if I remember correctly. 
&gt; Life, uh, gets in the way A common blocker for my ambitions as well.
&gt; That's the rendering engine itself. Does every game engine need a full-blown rendering engine or just a way to render things? It has to be able to render a scene graph without intervention. Otherwise, it's just an abstraction. &gt; My point is that the whole game engine/framework debate is a big gray area Yes, I agree. There are no black and whites when classifying things like this. But I would safely classify MonoGame as a game development framework. It doesn't really do any heavy lifting at all. It just provides a lot of common components for game development. You could theoretically create some framework that does offer a scenegraph, scripting endpoints, complete rendering but was unable to actually run the game on its own and I think we would be threading into a more grayish area, but I think MonoGame isn't even close.
Let's agree to disagree then, I think Monogame provides enough to be called a game engine :)
Yes I do. That's kinda why the post explicitly refers to a AspNet Identity in the title. I figured out how to add in the value for the Authorized flag, but now what about the password hash and what other data do I need to add in for the user to work? I can't just hash a string for the password hash but I don't know where Identity does the hashing during registration so as to use that. 
I did a migration from an old system which used plain text passwords. I inserted the pw in the security has an used this code to change it to a real hash. foreach (ApplicationUser user in context.Users.ToList()) { string migratedPw = user.PasswordHash; user.PasswordHash = new PasswordHasher().HashPassword(migratedPw); user.SecurityStamp = "generate-guid-your-self-inthisparam!"; context.Entry(user).State = EntityState.Modified; } context.SaveChanges(); I believe the SecurityStamp is required but the content doesn't really matter since its "a random value that should change whenever a users credentials have changed (password changed, login removed)"
To be honest, it's not really much of a big deal. If someone told me they developed their game using the monogame engine, I wouldn't even blink.
If you are not prepared for [Microsoft 70-483 exam](http://microsoft-70-483exam-questions.blogspot.com/ ) and want to get some help so, now you do not need to take tension.We are helping students to pass the Microsoft 70-483 exam. You can pass Microsoft 70-483 exam very simply and easily with our my sample questions. Actually, 70-483 exam dumps preparation PDF question answers contain comprehensively solved questions and answers in a step by step procedure which are easy to understand as well as grasp by the Microsoft 70-483. So download and pass your exam in the first attempt.
I've used [OpenXML](https://www.nuget.org/packages/DocumentFormat.OpenXml/) for this before. It wasn't DataGrid to Excel but a collection of objects to Excel, so pretty much the same.
Could you make the classes with an interface (a la serializable) or an attribute? The attribute would let you add other information, if required. The advantage of this is you can filter out helper classes , or other items the assembly might have.
EpPlus
[NPOI](https://npoi.codeplex.com/) could be worth a try. Its not perfect, but I think it has reasonable base functionality in Excel workbook/worksheet manipulation. Plus you have XLS and XLSX libraries included, if you need both available as options. &amp;nbsp; Just in case you didnt notice yet, Microsoft.Office.Interop.Excel depends on Excel being installed on the computer that you application will run on - which might be fine for your WPF desktop application.
I have tried and created CSV earlier. Thank you.
Yeah you don't need to use reflection for this.
What would the alternative be? Hundreds of case statements switching on a signature, each one creating an instance of the corresponding class? The way I have it now, one half page function is instantiating these objects by analyzing the signature, getting the type from the assembly with the same name, then invoking its constructor. 
I'm using a lot of attributes in general. I suppose I could have a marker interface or another attribute to denote the types I'm looking for. I was hoping there was a more simplistic approach, though. :)
&gt; 3.) Simple Instancing 404
&gt; context.Window.Title = "Hello, window #2! It's currently " + DateTime.UtcNow.ToString("F"); Way to make the user think the program is broken ;p
Might be. I need to check with the developer of website if thats the case or is there any way I can check this by myslef? Also do you know what 'status' : 'NAK' means. It is the http content of response.
It has to be able to run your game using the assets you provide. It doesn't have to have authoring tools or any tools at all for that matter.
You don't want a game engine. You want RPG maker
What is your problem? I think I've explained my reasoning but you haven't even tried to argue your case.
any video on youtube of this in action? ps: xunit
It would be nice to see a couple examples of a class and the tests that would be generated for it. I would need some control over the generated tests, I use an auto mocking container in my tests, so I add mocks to my container and make a call to my container to get an instance rather than using the ctor in my test (no need for steps 4 and 5). How do you name the object/class/type under test? Can the generated variable's name be changed? Tut is not for me, sometimes I name it cut, but mostly I use the camelCase of the class name. 
That's just humble bragging
Such a great library. Good call.
I think test generation is for existing projects that don't have any tests. VS has included functionality for generating tests for a while, maybe as long as MSTest has existed... IIRC the got blasted for generating a whole bunch of tests for existing code and calling it TDD :P Generated tests shouldn't validate anything, they should just create the boiler plate code and assert failure (or inconclusive). Whenever code is provided, there is definitely a danger of people assuming things. I once created a base test that would validate the absolute minimum about an object mapping: some people understood that they needed to add more stuff to their test, but other people assumed it would magically test all their logic and came to my desk with some aggressive "your test didn't test my thing". 
I would imagine this would be more for the setup code of unit tests...not that you would generate actual valid unit tests. And I don't see why auto generating unit tests would result in validating bugs.
I have yet to run into any requirements that I wasn't able to implement in SSRS. Then again I guess I'm not doing anything too crazy. I will say that each and every single time I've had to do anything with CR I have hated life. Maybe I'm just more forgiving in order to avoid CR...
I wish whoever wrote some of the code I have to maintain asked this question before forcing an invalid use case and creating an abomination.
The idea with this was never to create something that replace regular handmade unit tests. The point was more in line with: - A fun example to use code generation - Help with tedious tasks. I know that many like to write unit tests before writing regular code but sometimes you get lazy or simply have an old project with zero tests. So instead of creating the project, creating directories and going file to file and creating setups, mocks etc will this tool do it do you so you can actually start writing the test right away. That's why I started with setup as I think it's the most useful one. In best case it may create some null check tests but even that don't fit all projects.
I'm not sure I understand why this is useful. Can't you catch the exception in the caller and walk back in your stack trace to see what happened? Or just put a breakpoint on the return or closing brace of the called method?
Currently it's pretty simple and you can't customize much (just test and moq framework) but I added an example in the readme. For your other questions: - The generated namespace will be your base "namespace" + ".test". So if you have MyNamespace.Models it will be MyNamespace.Tests.Models - The type under test and filename will be "Type name" + "Test" - Mocked types will be "Type name" + "Mock" So it should be pretty standardized names in unite tests.
That is made possible because the C# compiler (CSC) implicitly references mscorlib.dll unless the /nostdlib switch is used.
There are good courses on pluralsight, but they ain't free. You can take a test on there and they will suggest a level where you should start (beginner, kbeef intermediate, expert) I know from personal experiences that everyone asks some design patterns you know. And also if you know EF, asp.net, sql, linq,.. The basics really. It isn't really hard as a developer to find work (at least here in Belgium). I made a LinkedIn profile, waited a few days and picked the offers that interested me. 
Not sure I follow...?
These days I agree. I think staying with C# for all-the-things™ is more for satisfying the need to stay in one's comfort zone more than anything else. Different tools are good for different jobs, and a polyglot approach to a game engine is often a good thing.
This is literally perfect for my next project. You posting this and me finding it around the same time is very serendipitous.
I know you get a free trail, but it's only 200 minutes or 10 days. I started taking courses and my trail was over after 1 evening.
Serious question: How does one end up with 320 projects in the same solution ? I'm all for modularity but I think there is a serious problem if you end up with that much .. Do you have all your 3rd party dependencies as project in your solution ?
The one on Dev Essentials is either 3 or 6 months, can't remember which.
Where would you propose to store stuff like db connection strings/services endpoints/etc. ?
It's 3 months, here's the link if OP is interested https://www.visualstudio.com/dev-essentials/
So, you wouldn't use C# again because it can't be used (easily) outside .net? Or were there other issues like GC, performance? 
There is a way to get the full name of an assembly. You will need to make sure that you are using system.Reflection. Then declare a variable of type Assembly ex: Type stdType = typeof(Student); //get assembly info Assembly _assembly = Assembly.GetAssembly(stdType); from this you will need to get the Property info which can be referenced as a string array. //get property information about Student type PropertyInfo[] properties = stdType.GetProperties(); foreach(PropertyInfo property in properties) { var info = $" {property.Name}: {property.PropertyType.Name}"; ListBox1.Items.Add(info); } The propertyType.Name could be switched to propertyType.FullName as well. Fullname is a string so you should be able to run your if statement against it. keep in mind that the full name is a bit more involved than "Student" hope that helps
http://stackoverflow.com/questions/7983441/unix-time-conversions-in-c-sharp/7983514#7983514
Does this work with .NET Core?
30 years in business. But yeah, oldest components there are probably from ~1998, so MFC/C++ stuff (those were probably already once partially migrated from plain Win32 etc.). Then there is a bunch of small projects where there is stuff that nobody had balls to put into any other project so they thought it would be a good idea to just make a dll out of it. Yeah, I know this is balls. Also the situation is that it's only a part of the full build, that's "the core", mostly just a bottom layer that serves the applications built on it. At least one other build part has ~90 projects (there ~20 are some weird attempt at localization of WinForms by having separate copy of that control hardcoded to that language). Other 4-5 applications each have probably at least 40 projects each. edit: so we didn't have that single-solution. Build is a bunch of smaller solution files (50-60?) that have stuff organized inside them but require some other solutions to be compiled before they can be compiled. Those solutions are much more manageable to develop with (you usually don't need to touch projects that are in other solutions when you work on one solution). Also it's ok to create partial development solutions where you have smaller "as-needed" subset of projects; those work really well.
Generating tests is only useful for whether there's a failure like an unhandled exception that shouldn't happen (which is what fuzzers do). Generated tests otherwise won't help much, because you don't know what the result of the code you're testing _should be_. You just have code. So let's say it's buggy (i.e. it returns on input X A instead of B). You generate a test, it inputs X. A is returned. Should if fail? yes, B is expected. But the generator can't know that. So it can't possibly know to generate an assert that the method returns B and not A. Don't make the mistake that it can analyze the code it is testing and then generate a test which will see that the right value is returned for input X: it's buggy code, remember? So the buggy code, analyzed, will show the potential analyzer, that the code should return A when input is X. Hey, it does that. Good, test succeeds (but that's wrong). So these generated tests definitely have a purpose, i.e. that input is properly handled and not ending up in unhandled exceptions, but in general that's what a fuzzer does. A set of unittests which test that the pieces of code tested do what they _should do_ isn't possible unless you provide with pre/post conditions for the pieces of code. 
Did you do any automation? You might be able to leverage your experience to find something in QA or Test automation where there is a lot more code to write. It might be easier to find something in a smaller company where roles are less defined. 
Don't look behind you
&gt; Generated tests shouldn't validate anything, they should just create the boiler plate code and assert failure (or inconclusive). 
This one doesn't. But I'm already finishing converting it to .NET Standard 1.1, which will. Wanted to make this release first, since it's going to be the last one to support non-async methods.
Shit, if I had someone following me around giving me useful information all the time, I'd pay them.
This is neat. 
Removed: Rule 3, spam.
Removed: Rule 4.
Lol
How sound is your approach of decoding the video stream? Google being google everything x month they change something and break the whole thing. 
Do you mean the encryption or the encoding? Regarding encoding, they tend to stay backwards-compatible. Like how they introduced adaptive streams, every video still has older non-adaptive streams, but they don't support above 720p and 30fps. Regarding encryption, they usually change something critical like every 6 months or so, which tends to break the code. The weakest point (and probably the only weak point) is the regex that looks for encryption function in the player source code.
Would appreciate if you could give me topics that I need to learn? I can probably found similar videos on youtube or Udemy or Lynda? Thanks For now I believe it would be: asp.net MVC EF LINQ ??
I'd happily use C# again, but it's always a case of choosing the right tool for the job. If it's the right tool, then no problem.
Like everything. It's multiplatform.