`new Null()`
&gt; led with UW wow thank you for detailed reply. I am much more aware now first time i heard of centennial did bit of reading on it sounds awesome. for anyone else who sees this found link detailing centennial tool http://www.zdnet.com/article/microsoft-debuts-centennial-tool-for-moving-legacy-apps-to-the-windows-store/ thanks again 
You don't really 'use' namespaces but the classes within them.
https://docs.microsoft.com/en-us/dotnet/api/?view=netframework-4.7.1
If you mean that you want to be more familiar with useful classes and their namespaces then download ILSpy. It’s also important to know that the same namespace can be in multiple assemblies (the actually DLL). You can add assemblies from the GAC (Global Assembly Cache). Some of the common assemblies are mscorlib.dll and System.dll. Some of the common namespaces are System, System.Net and System.Collections.Generic. 
Ok here goes. 25% off on the following products using coupon code BLACKFRIDAY2017 * [WcfStorm ](http://www.wcfstorm.com/wcf/learn-more.aspx) - WCF service test client with support for functional and performance testing. * [WcfStorm.Rest](http://www.wcfstorm.com/wcf/learn-more-rest.aspx) - REST service test client with support for functional and performance testing. *[Tresi](http://www.wcfstorm.com/wcf/learn-more-tresi.aspx) - SignalR Hubs test client with support for functional and performance testing.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Black Friday sale of dev tools (crosspost from \/r\/csharp)](https://www.reddit.com/r/dotnet/comments/7fdlhr/black_friday_sale_of_dev_tools_crosspost_from/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I've made a few commercial add-ins for Excel have settled on the following structure: * Controls - Any custom or user controls. * Controllers - See MFCO pattern description below. * Data - Contains data access classes. * Forms - I just lump all the forms into one folder. * Models - Contains all the POCO classes (no methods, properties only). * Operations - See MFCO pattern description below. * Utilities - Helper files / kitchen sink. ---- **MFCO Pattern** Office add-ins use Winforms, which don't have a commonly used pattern (MVVM, MVC, etc.) so I decided upon a few rules to standardize the code structure. The Addin.cs file contains all the toolbar click events. When a button is clicked, the associated Controller is instantiated and method called. The Controller is responsible for initializing one of the Models by calling a Data class, open a Form, retrieving Form data, and then calling the Operation methods. The Forms are "dumb". They perform no operations directly. If fields need to be initialized with existing or default values, the Controller is responsible for passing the Model object to the Form's constructor. The form stores a form-level reference to the model object. When the OK button is clicked, the form is validated and the model values are updated. The controller then calls the corresponding Operation. If data needs to be saved, then the Controller also calls the appropriate Data method. So basically something like this: public static class MyController { public static void DoSomething() { var doit = false; MyModel model = MyModelDataAccess.Load(); // I tend to wrap form usage in using blocks, hence the "doit" var using(var frm = new SomeForm(model)) { // The form has a form-level reference to model, and its values // are updated in the form's OK_Click event doit = frm.ShowDialog() == DialogResult.OK; } if(doit) { // I stick to a lot of static classes and methods SomeOperation.Run(model); } } } 
`CompassDirection` is a type, the concept of a compass. `playerMovement` is a specific compass, the one you are holding in your hand. So your second example is like saying, "If all compasses in the world are pointing up, you are facing north" when you want to say "If *your* compass is pointing up, you are facing north". 
Use four spaces before each line of code. Use a back-tick, \` on either side of a fragment of code in the middle of a sentence. 
Oh. So, you are taking the value and placing it into a separate box to make sure you don't modify the source, right?
Thanks.
Close. If `playerMovement` is the box, then `CompassDirection` tells you what shape the box is. For example, say you have these variables: String name; Decimal cash; The variables `name` and `cash` are the boxes. A `String` is a box that holds words while a `Decimal` is a box that only holds numbers. *** Another analogy I like to use is `CompassDirection` is the blueprint for something, `playerMovement` is an instance of that something. 
This is standard for any website that uses "markdown", which includes most programming websites.
You're correct, but to reverse the array you only need to go half way through, or you would un-reverse things again. So the while condition stops the loop as soon as the variables cross. Try imagining an array of length 4 or 5 and go through it step by step on paper.
Hey I was just writing it on paper and saw your reply. quick question where it says int secondIndex = numbers.Length -1 so is the array length changing each time? or does the array length stay the same? S:
&gt; secondIndex is counting down 9 8 7 6 5 4 3 2 1 0 and firstIndex is going up 10 9 8 7 6 5 4 3 2 1 Both are counting down
System.Linq. 
&gt; umbers[secondIndex]; you sure? numbers[firstIndex] = numbers[secondIndex]; this is just copying the contents of whatever inside that index to the contents of the other one. The counter isnt affected there right. 
Wouldn't playerMovement and CompassDirection be the same thing, though as they are the same type. They just have different names. Doesn't CompassDirection actually hold the value of Compass.North? Why do I need to use an instance of it?
&gt; Doesn't CompassDirection actually hold the value of Compass.North? In C#, no. It's just the theoretical concept of a compass direction. **** Advanced topic C# is a class-based language. The types or classes are "statically defined", meaning you can't alter them while the program is running. In prototype based languages such as JavaScript, the types are "dynamically defined" while the program is running. For them, there is a box called CompassDirection can you can accidentally change the value of Compass.North to be the same as Compass.South. (You can also change Compass.North to have the value "Ice Cream". Dynamic languages don't protect you from your mistakes.) 
Is an enum just a static class? Basically?
oohh so basically its writing to numbers array from both sides right? its meeting in the middle. plz tell me im right &gt;&lt; or brain explode
Ok, this is where C# gets stupid. A "static class" isn't static in the "statically typed programming language" sense. So let's that this slowly. *** An enum is really just a set of constants. A set names for numbers that cannot change. If North=1 and South=2 then that can't change while the program is running. So yes, it is "static" in that sense. *** Now there's also the concept of a `static class` in C#. This is defined as "A class in which all fields, methods, properties, etc. are defined using the `static` keyword." So what does the `static` keyword mean? It doesn't mean "read-only", that would make sense. No, what the `static` keyword actually means is "shared" or "global". (In fact, `static` is called `shared` in Visual Basic. Why? Because VB tries to make sense to normal people.) Advanced Topic time. Ok, so why the fuck are shared variables called `static`? Normal variables can appear anywhere in memory. If you have 10 compasses, then each compass would be in a different place. Where exactly that place is in memory would be determined dynamically. With a `static` or shared compass, you only have one. And it's always in the same place so that you can find it no matter where you are in the program. It's location is statically defined by the compiler. 
.... why have I never heard of this before. The features look fantastic.
Wow, that actually does make sense to a newbie. I have no idea why programmers have to make it so complicated. Thank you. I found this gem. Try using this metaphor: A 'class' is like a blueprint. A blueprint 'outlines' a house, and tells you how to build the house and what features the house should have. In the same way a 'class' describes the features an 'object' will have. Specifically, a class tells you the properties an object has, and the actions the object can take. So for example, let's say you have a Cat class. The Cat class describes the properties of a cat (like colour, height, name), and also the actions the cat can take (jump, meow, scratch). However, the Cat class itself is just a blueprint. To actually create a 'real' cat in the computer's memory, you have to instantiate an object of the cat. Each time you create a new instance of an object, the code in the Cat class is used like a blueprint and a new Cat object is created. Why do you need to create an instance, instead of working with the class directly?A blueprint can be used to make more than one house. Similarly, a class can be used to create more than one instance. Which is very useful. You only have to write the code once and you can be a crazy old lady with just a few calls of new Cat(). Also usually each instance will have different properties. So you can have a Mr. Whiskers who is gray and 32 cm, or you can have Mrs. Tiddlekins who is brown and 35 cm, and so on. Which basically clicked for me.
&gt; I have no idea why programmers have to make it so complicated. A lot of it comes down to having the wrong point of view. For the person creating the compiler, calling something a "static variable" makes a lot of sense. They are thinking in terms of how they will implement that feature in the compiler. Likewise, when the computer scientist writing a paper on type systems uses the terms "statically typed" and "dynamically typed", he thinking about theoretical type systems. He isn't thinking about what that means to the compiler writer. So we, the normal programmers, are left with this confusing mis-mash of terminology from various specialties. 
Use the &gt; letter when quoting someone. &gt; It makes it look like this
Can you explain why a enum behaves like a class but is a data type?
This is a generic XML parsing exception. For some reason there is a null byte (0x00) in one of your XML config files. 
So again, the terminology is messy. CLR: Common language runtime. The thing that actually runs your programs. In the CLR, the word "class" and "data type" mean exactly the same thing. All data types are "classes". Classes are divided into two categories: * Reference types * Value types Reference types are always stored in the "heap", the big bucket of memory that is used for storing things for a long time. Value types are stored either inside other value/reference types or stored on the stack (short-term scratch paper that goes away when the function ends). (Value types can also be "boxed", allowing them to be stored on the heap as if they were a reference type.) A "primitive" is a special category of value type that holds a single value and is understood by the computer hardware. This is mostly limited to numeric types such as Int32, Float, Decimal, etc. An enumeration is a special category of value type that stores a single primitive (usually a Int32). It also includes a set of constants. *** In C#, reference types are called `class`. Value types called `struct` or `enum`. *** In C#, things that are in the heap (reference types, sometimes boxed value types) are referred to as objects. In terms of inheritance, all types inherit from the `System.Object` class. Even `System.Enum` inherits from `System.Object`. ***** Advanced topic: This whole reference type/value type thing is mostly a .NET concept. In Java, you don't have value types other than primitives. All classes are reference types. In C++, you decide if you want to put each object on the heap or stack when you use it. In effect, each class is a both a value type and a reference type. 
Your config file has a problem. The error is very clear. Are you sure that you know what config file is actually used when you run your program? One easy way to find that out is procmon of sysinternals. Looking at your appdomain could help, e.g. AppDomain.CurrentDomain.SetupInformation.ConfigurationFile.
I know
They are giving you a chance to expand on your question.
Yep absolutely. SQL Server for me. Personally I keep meaning to investigate PostgreSQL (but never really do), and I've used MySQL a bit, but SQL Server is my preference. I should maintain a professional awareness of Oracle, but I haven't seen it in the wild in so long I'm starting to believe I might have imagined it all :)
Switch statements work like this: int x = 2; switch(x) { case 0: return 'a'; case 1: return 'b'; case 2: return 'c'; case 3: return 'd'; So that as x = 2, we return c. It's basically an easy way to chain if statements, because we can write that above statement instead of writing: if x == 0 { return 'a'; } if x == 1 { return 'b'; } if x == 2 { return 'c'; } if x == 3 { return 'd'; }
If you go with Chain, feel free to hit me up for advise or feature requests. 
Thank you very much.
You're welcome.
&gt; MFCO Pattern Winforms developers mostly settled on MVP as their MVC derivative of choice. It doesn't matter particularly, use what works for you. There are a lot of resources available about MVP though and its various "modes". 
Will do :)
Oh! Well what particular classes do you think are some of the less-obvious, but more important classes in C#?
Seems pretty interesting. Googling around I found an article written by Rick Strahl (the guy who wrote the net bridge I am using). Thanks for the tip
The thing is I literally haven't changed the config file for a few months now, it has remained the same. And all of a sudden it's giving me an error now when the other day it was working fine?! It is that config file as I've removed the App Settings and then it does not show within the code.
Use a hex editor to remove the null byte at the beginning of line 15
Namespaces that are not default references or common ones that need a dll import? for the latter; user32.dll is pretty common/usefull a list is available on: http://www.pinvoke.net/ common stuff newbies overlook: system.linq is awesome. system.io has a filewatcher class. I've seen people write hundreds of lines of code using the static methods of File.x that could be reduced to like 4 lines with a filewatcher from the same namespace &gt;&lt; similarly system.runtime.serialization can save you alot of unnecessery code. (for example implementing a static methodin your custom data objects to save or instantiate them from valid xml/json/whatever instead of using streamwriters etc everywhere) 
First starts at 0 second starts at 9. You switch those. Then increase first and decrease second. So 1 and 8. Then you switch then. You keep doing this until they meet. So 2 7, 3 6, 4 5. Then first is increased to 5 and second is decreased to 4 at this point first is more than second so the while loop exits.
 Numbers 1,2,3,4,5 Loop 1: 5,2,3,4,1 // swap 0,4 Loop 2: 5,4,3,2,1 // swap 1,3 Exit loop. // 2 &lt; 2 false 
The length is equal to the number of elements inside the array. If you add/remove to the array, it can change. But changing individual values of elements won't change it's length.
I deleted the app.config file and had it re-create itself and it still gives the error. What is causing a null byte to be there in the first place? Could you recommend any good free hex editors?
So your task is: 1. Create a button 2. Create an event handler that will fire when button is clicked 3. Simulate the mouse click You already have the code for step 3, now you just independently find or write the code for steps 1 and 2 depending on GUI framework of your choice. 
From the box .net core supports CLI and ASP.NET applications, but there are some projects (Avalonia is in alpha) that allow you to create GUI. 
HxD
Try to think about the problem in terms of APIs instead. That question is much more googleable
Using the immediate window while debugging
Definetaly keep using Windows + VS. That's exactly what we do. It's just that we then deploy the same executable to both Windows and Linux. 
much appreciated all. thanks for taking time to write answers. It seems so simple but so many things to pick up. thanks
I don't have a chance to look up MSDN for the return values but it seems that you should be calling .InnerText on the name element Element("Name"). InnerText rest all seems to check out
I believe you are trying to bind a list of strings to the grid. Typically datagridview displays properties of a type, like a Player class with Name property. More info here: https://stackoverflow.com/questions/479329/how-to-bind-a-liststring-to-a-datagridview-control
Are you sure you know what your config file is when you actually run? Did you try removing it altogether? What happened if yes?
Take the practice tests. It costs extra but the really help because it gives you the question format and some questions the use in the test. Also Denver the syntax for localization. That cultureInfo will be on the test.
I'd have to disagree with you here. Linux hasn't been about modifying init.d or modifying file permissions (has it ever been about that?) in years. Modern Linux distributions are absolutely on par with Windows except for things that probably don't impact development. (i.e, Linux SUCKS at accesibility and tends to be a lot worse than Windows in the multimedia department). I'm a .NET developer, and I use Linux daily for development. The project is deployed to Azure and I've never run into a .NET compatibility problem, even using Mono (as our project isn't .NET core). Some of the things I've gained: * More complete set of CLI tools. The CLI tools which are available on Windows also tend to run faster, especially git when using autocomplete for branches. * More customization options to make development faster. Even with 12 GiB of RAM, running 4x instances of project rider, a local database, a web server, a browser, and webpack gobbles up memory. I've run out of memory (albeit, in rare cases) with this setup in Windows After that, it's just preference. I prefer to have my windows managed in a different way than Windows lets you. I prefer to use open source software, because I've had to look at the code from time to time for certain bugs, etc. But it's not fair to say that Linux turns smugness to 11.
You can use the object Explorer in visual studios to same the namespaces in each assembly and the classes in them.
Denver?
read that book, took the practice exams, sadly neither actually helped me prepare for the exam. failed epic-ally - about seven questions in i knew was doing badly so decided to finish quickly and retreat in shame. the questions were simply silly (as in why would anyone actually do something like the example you are showing!??!) and i even wondered at the time if i had signed up for the wrong exam at the testing center...
Did you tried again after that?
File can't recreate itself. Something else recreated it. Try putting some comments in it, before the offending line. Dies the line in the error change? If not, chances are, you are not using the file you modified.
Passed this one in June. Preped before exam for one week or so, practice tests and book got me through. But I've used this one: http://www.wrox.com/WileyCDA/WroxTitle/MCSD-Certification-Toolkit-Exam-70-483-Programming-in-C-.productCd-1118612094.html instead of "green". Also mva course, green book tests at the end of each objective could be of some use.
This is as old as the book, but it's continually updated and is still relevant to the exam https://www.pluralsight.com/blog/software-development/learning-path-c-microsoft-exam-70-483
see u/Rumble45 comment for the answer but i'd like to add that generally i'd recommend working with data tables when you start on a project like this. They are a bit weirder than lists and have more overhead but the inevitable feature creep will be much easier to accomodate + you don't have to create a new object in memory for stuff like this. the inbuild xml support is nice too, albeit tricky in more complex cases. 
I looked at a number of course videos on YouTube. They really helped me.
You can return a `BadRequest(ModelState.Errors)`
It says that I cannot implicitly convert BadRequestObjectResult to MyReturnObject.
Change the return type to `IActionResult`, and when returning a result use `Ok(object)`.
Thanks!
Thanks!
maybe you want a dictionary if i'm understanding your question correctly.
System.Collections.Generic is my favourite namespace.
i think like the below poster said its all project related, and based on whatever apis they happen to use. then they build all the project materials acordingly
a dll is just a container really i dont think thats important to look at as a qualifier. its all about the apis, broken down into libraries and stuff
Are you talking about the vs resource editor? If so, that supports a fixed number of types. [Available types](https://imgur.com/a/jiorP)
Create this attribute and call it on action or controller as [ValidateModel]: ``` public class ValidateModelAttribute : ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext context) { if (!context.ModelState.IsValid) { var errors = context .ModelState? .Select( r =&gt; r.Value? .Errors? .SingleOrDefault(i =&gt; i.ErrorMessage != null)?.ErrorMessage ) .Where(r =&gt; r != null).ToList();; context.Result = new BadRequestObjectResult(errors); } } } ``` 
The City Of Angels
No, I figured it out. I just need to declare it as Bitmap resource = Properties.Resources.card_selected Still not quite what I'd like, but it gets the job done.
Not this exam, but I've taken other MS exams so I have some general pointers. First, study ALL of the topics covered in the prep material as you will get questions on everything. It may not be relevant to your work, and it may seem like a minor feature of the the subject in question, but that doesn't matter for the test; it'll all be there in some form or another. Second, the tests are adaptive, meaning that the exam will ask you more questions in areas that you don't give correct answers to. I don't necessarily agree with this, but it's how it is. It also means that if you get a couple questions wrong in an area you didn't study, it potentially can torpedo your whole exam. Third, expect the test to be pedantic and have syntax questions. These are things that during a normal day you'd just hit google, or give it your best shot and let intellisense kick in. The exam doesn't care, and some questions will be purely syntax based. Again, I don't agree with this either, but it's how it is. I would expect questions about structs vs classes, boxing and unboxing, those kinds of things.
The most logical would be of type `Card`
I'm really pounding my head on this so bear with me. The relevant snippet of my code looks like this, and looks a lot like what you've got up there: int RunState = await StartUp(x, y); // the things I want to done when StartUp finishes Debug.WriteLine("Startup complete."); StartUp itself provides Debug output. When I run this, I immediately see "Startup complete." followed by all of the things which actually happen in the StartUp sequence. If I try to reference objects or variables populated by StartUp they are null at this point. Since this is an IBackgroundTask (it's a headless win10 IoT app) if I just let it loop in the Run() function I can see my variables get populated by StartUp's actions. StartUp returns int...why am I continuing past the await operator without a result here?
Yea MS exams are a colossal waste of time and complete money grab.
Is the goal to not use array.reverse?
&gt; You will end up creating an enumeration that covers a whole bunch of the integer range, basically creating enum values names like ONE_HUNDRED_AND_FIFTY_ONE I stand by my comment to you.
Unfortunately this is for a class project, and we are required to use the data grid view. Thank you for the suggestion though! 
Thank you for the help and the resource. This definitely helped!
Thank you for the assistance!
Mile High City 
Pluralsight has a set of videos for this course that should help. https://www.pluralsight.com/blog/software-development/learning-path-c-microsoft-exam-70-483. You can get a free few month subscription with them if you like
In my past experiences with mono (on iOS and Android) I found that it did not handle stack overflows very well. In fact, what I saw was worse. The app just crashed, and the debugger would just detach with no explanation. I just started assuming that if the app crashed without explanation then I must have an infinite recursion problem.
Running in VS's debugger I've seen the same code successfully get trapped and sometime just stop working. (Debugger exits.) Not just a mono thing, methinks.
a data table isn't a gui element. both listview and datagrid can have a data table as a source.
Saw no point. If MS can't bother to put together decent training materials, not sure why I need to bother trying to pay for the exam. Seriously, ever had the nightmare where you showed up for a final exam to a class you never actually attended or didn't realize was on your schedule? That's kind of how I felt. And I was scoring in 90% range on the practice exams.
This code does not throw a null, you are mistaken. You also did not manage to catch null with it either. Also, you are catching ThreadInterruotedException, but are dealing with a stack overflow. So what you are doing is nonsense. Now... I do not know what Mono is doing with stack overflows, but if they are any smart, they will be doing what MS .NET CLR does, and that is: nothing, it just lets the code crash. You **can't catch a stack overflow** (unless you threw the exception yourself). Let me repeat that, because it is important. You **can't catch a stack overflow**. What you can do is collect a crash dump (core dump on Linux), inspect it and fix the bug. If in a debugger, of course, a debugger will help.
The AIOTestKing website contains the braindumps for the last revision, I can verify as I took the exam in June and it contained the questions that had appeared in my exam. Nothing is going to help you more than those braindumps.
wait, but even if the keyword in VB is 'shared', static classes are still subject to access modifiers like Private or Internal, right? i started learning this summer, and what i was told is that it's used for helper classes that shoulden't be instantiated and _that's_ why they're called static - you cannot make a modifiable object from them, and as such the values within them are always used as if they are the same object, hence "static". is this all wrong?
&gt; wait, but even if the keyword in VB is 'shared', static classes are still subject to access modifiers like Private or Internal, right? Yes. &gt; helper classes that shoulden't be instantiated and that's why they're called static That is usually true. &gt; you cannot make a modifiable object from them True, but you can modify a static property or field unless it is also marked as `readonly`. **WANRING** Do NOT create static properties or fields unless it is `readonly` or you really understand multi-threading, race conditions, etc. &gt; such the values within them are always used as if they are the same object, hence "static". Yes. 
Why can `WaitOne` never return `true`?
&gt; can't catch a stack overflow I learned that the hard way when I kept crashing my entire test suite. Had to comment out one test at a time until I found the cause, and that's after wasting half a day trying to figure out what was happening.
It is running, and then terminating immediately. You initialize `input` with `0`, and your loop condition is `input == 1`. This is `false`, so the entire loop is skipped. Then the last statement, the `Console.WriteLine` is executed, your `Main` method returns and the program terminates correctly. You should either add a breakpoint in the last line or add a `Console.ReadLine()` to prevent the program from terminating immediately.
By the way, in .NET 1 you could catch StackOverflowExceptions. Also, &gt; So what you are doing is nonsense. Maybe you should sound less like Linus Thorvalds?
It can, inside the try block. 
That's awesome, thanks!
Time to learn the `do {} while();` loop
This is like saying I want to learn every word in the dictionary.
I suggest changing your while condition to: Input != 1 Then it will precisely have the behaviour you described in your comments and it will the while loop correctly. Also add console.readkey(); So the console doesn't instantly terminate when the program finishes. 
You were right, thank you so much. This is the first time I made a console app without errors, and now it runs thanks to you guys. So relieved haha
Booyah, totally works now, thank you so much. This sub is awesome
Or alternatively run it with CTRL+F5, rather than just F5 (if you're not debugging)
Ooooh yea lol our class was basically told to buy our book and learn on our own so this has been a bit of challenge from having no experience in this. It's frustrating, but so fun and satisfying when things come together
Or better: Not use a while in the first place, and use a do-while instead as /u/boxsterguy suggested. A while is a loop with an entry condition that may not run at all, and a do-while is a loop with an exit condition that runs at least one time.
&gt; Maybe you should sound less like Linus Thorvalds? I've never seen Linus being so polite.
thanks for your heartwarming words, but im catching the exception outside of this method. im doing a broad catch(Exception) to catch everything that happens in the thread and then write the exception to a variable, so i can then tell if the thread ran into an exception. in this case i indeed caught the misterious exception, cause the code in my catch handler was executed, just that the exception was null
Yes to the former, not so much for the latter. 😀 I am glad that MS dropped catching SEs. They went, over time, from giving programmers... ahem... *ideas* about dealing with crashes like SO or access violations (e.g. the default exception handling setting in the wizard-generated C++ projects was /EHa, not anymore). Win32 APIs went for more and more SEs if passed bad parameters, too, whereas similar older APIs return FALSE and GetLastError returns "invalid parameter". Again, a good thing. SEs are almost always a sign of a **bug**. A bug must no be accommodated in any way.
i ran it using mono --debug. and except for the exception being null, everything worked as intended
it was supposed to call the base class variant of WaitOne, which can return true. 
You said it has the same signature, how can u know which one it will call (does it even build/compile)?
Well... we can't speak of what you don't show us, so... About that caught null, can you show a minimal example of the code that did it? Because it sure is not usual... About the program shutting down like it supposed to - are you sure an uncaught stack overflow didn't bring it down? Because that's what I think should happen. To be sure, you could let your main thread sleep a long time and see what happens right after the stack overflow.
I've seen the reverse array method but I wanted to understand the books logic. Didn't want to move on next topic until I understood it. I saw it in a Bob Tabor video. string message = "Hello World!"; char[] messageArray = message.ToCharArray(); Array.Reverse(messageArray); foreach (char item in messageArray) { Console.Write(item); }
when hovering above it with my mouse the ide shows the signature with default arguments. i guess my definition is overshadowing the one from the base class. using base.WaitOne() solves the problem.
Thanks!
here you go https://pastebin.com/SxGNDNia on windows on .net it indeed kills the process and tells me about a stack overflow exception in visual studio. but on mono i catch the exception, which is null. thats what the fault flag is for, as checking the exception for null wouldnt work (im happy i was also using a flag to check for a fault in my application, and not check the exception for null)
If you are talking about XAML recourses you just need to cast them.
&gt; I can't use validation attributes as my validation is too complex for them. Don't use validation attributes. Write your own validation service that uses FluentValidation.
Why? For simple validation, data annotations are great.
&gt; validation attributes as my validation is too complex for them. 
This is a hard test, and requires lots of studying. I barely passed, but I passed on the first try. OP, use the links above in addition to the green book. Don't get discouraged by poor victims who blame MS.
Since you are learning look into int.TryParse this will help you with someone entering a non numeric character and you can handle it appropriately. I saw everyone already got you back on track. Welcome to the sub!! 
&gt; WANRING Do NOT create static properties or fields unless it is readonly or you really understand multi-threading, race conditions, etc. i understand nothing of what you said there except properties and fields and not making them static :) at the level i'm at, i can't even see the use for a static property.
A good tip for situations like this is to start debugging by pressing F10. This will start your application and immediately pause on the first line. Then you can keep pressing F10 to step through your code line by line. Another option is start the application without debugging by pressing Ctrl-F5. This will keep the terminal open after it completed, letting you see the printed out messages. 
A .split() only returns an array with a length of 1 if the character to split on doesn't exist. Trying to access an index of an array that doesn't exist gives you that error. Use your debugger and learn to break/inspect your variables to see what's going on.
You are testing the value of arg[1] without checking if there even is an arg[1]! In this case your array only has one element; arg[0]. So if you want to avoid this error, you need to check the length of the array; something like this: if (arg.Length &gt; 1 &amp;&amp; arg[1] == "")
I was hoping for someone to give me a version that has this error fixed and see what i can learn from it
If you just type 'ping', as an input, when you do startingSentence.Split(), your arg array only has 1 element ('ping'). So when you test arg[1] == "", you're trying to grab the 2nd element from the arg array, which doesn't exist. That causes your IndexOutOfRangeException. Hopefully that points you in the right direction for fixing your problem. Some unsolicited coding style advice: Use 'while(true)' instead of 'for(; true;)', it's more readable and recognizable within the C# community. Or just use 'for(; ;)', which is at least more recognizable. I don't think I've ever seen anyone use 'for(; true;)' before. Choose a different variable name for 'arg'. It's too close to the Main() parameter 'args'. You're bound to mistype that at some point in the future and that will cause all kinds of bugs. 
"Can't get it to work" is a supremely unhelpful problem statement. What does it do that you don't want? What doesn't it do that you do want? Are you seeing specific errors?
Also, indent each line with 4 spaces to make it a code block, otherwise nobody will want to read it.
&gt; While it's not as straight forward, you can still use ViewModel validation at the backend and send validation errors via the webapi to display on your frontend (some processing is required but should be easy enough to generalise for all your views/forms). I normally just set up validation for required inputs on the frontend and everything else I get from the backend. But it can also be feasible to duplicate the whole validation on the frontend for a smoother user experience since you usually only validate your data after the user tries to save/send it when you rely on server validation. &gt; Anyways here is how you get started with sending server side ViewModel validation to the frontend: http://www.jerriepelser.com/blog/validation-response-aspnet-core-webapi/ &gt; Personally I also use FluentValidation because it makes configuring the validation a bit easier in my opinion https://github.com/JeremySkinner/FluentValidation/wiki/i.-ASP.NET-Core-integration &gt; (Note: both articles are for ASP.NET Core but should also work with minor adaptions for pre-core projects) https://www.reddit.com/r/dotnet/comments/7bv0iz/discussion_i_miss_viewmodels_and_validation_in/?st=JAGVWT99&amp;sh=72f78942
Gonna guess that it's value: charArray[i] You probably want $"value: {charArray[i]}"
I want to be able to like write reddit and will turn into something random with ascii code.
You're never changing any of the values of charArray.
Can you tell me what am i suppost to put inside "if" and where should i put it, becouse from everything i tried nothing seems to be fixing the error
I was thinking something like having specialize algorithms for when the parameter is 1, 2, 4, 8, and a generic and slower algorithm for everything else. Something like: switch (arg) { case 1: return AlgorithmA(); case 2: return AlgorithmB(); case 4: return AlgorithmC(); case 8: return AlgorithmD(); default: return AlgorithmX(arg); } You don't gain that much by using `enums`, not only because the `arg` values don't have a clear name attached to them, but also because in the general case you need to have the actual value of `arg`, be it 10 or 10 millions, and just a generic enum to cover that case won't cut it, you still need the original `arg` around. 
I will keep your suggestion for switching "for(;true;)" with something else when i get to learning how "for" works, im having lessons and i found this in my textbook when i was searching for something that could make it so when i use "break;" it doesn't close the program And as i said im still a student and kinda new to this. So Im not really capable of finding errors by myself, that's why i tried to search for help Also i use "arg" just becouse its close to "args", i found it easier to remember
Well, i don't think you're going to get a better explanation than u/TheGonadWarrior already gave you
He just did. He replaced your if block with what you want to avoid an exception. You'll still need to look at your input though, if you were expecting more than one element to exist
Whatever you want. He's changing your code, not adding to it. You need to consider your logic though. Right now your code is written to evaluate a value that it seems you're not even passing in 
Its unnecessary. If you call split on "ping " you'll get [ "ping" ], not [ "ping", ""].
Just pass in "ping " instead of "ping". That should tell you what you're doing wrong. 
Sorry you're getting downvoted so much. You're being fairly polite and trying to figure out how to fix your code. Unfortunately, students asking for help with homework don't usually get a lot of help. The primary reason for that is because your teacher should be the one to help you; they likely want things done a certain way. We can tell you how things are usually done in the real world, but our solutions won't necessarily give you the right answer for your homework. I can walk you through the code a bit though: startingSentence is whatever the person types. If they type this: ping startingSentence = "ping" If they type this: ping pong startingSentence = "ping pong" startingSentence.Split(' ') splits the string into an array whenever it sees a space. So for the 2 examples above you get the following: arg = ["ping"] and arg = ["ping", "pong"] Notice, in the first example, the length of the array is 1. If you want to get that out of the array, you do arg[0]. There is not arg[1]. In the second example, arg[1] is "pong", but it has no arg[2]. You cannot get something from a spot in the array if there is nothing there. That is the error you are getting: IndexOutOfRangeException. If you want to try to get something from index 1, but you don't know how long the array is, you have to test to make sure the array is long enough first, that's what /u/ffsjake did: if(arg.Length &gt; 1) That tests to make sure the array is longer than 1 ( ["ping"] is not longer than size 1, it is equal to size one. ["ping", "pong"] is size 2, so it's longer than size 1). The rest of the code he used is just your original code: if (arg.Length &gt; 1 &amp;&amp; arg[1] == "") The '&amp;&amp;' means AND. The if-statement will only work if both parts are TRUE. A neat thing about how the &amp;&amp; works is that if the first one is FALSE, it doesn't try the second part. So if arg.Length &gt; 1 is FALSE (meaning the length isn't greater than one), then the next part, arg[1] == "" never gets called and the error is never raised.
I got this error 3 hours ago and for 2 hour i was searching forums other people made about the problem. It was eather something very complicated which i couldn't understand or it was someone telling the person to try to find how to fix the error on their own. So an hour ago i made this reddit post hoping someone could give me a working solution so other people can visit this in the feature and get an answer to the problem i have, but all i got from here was again people telling me to solve the problem by myself and hinting me to something that might help. Thanks for taking time out of your day to respond to this post. I am going to give it a day and delete it
look at u/participating's answer, it explains it a bit more in detail
From what i can tell you are looking to Encrypt a string. i **STRONGLY** suggest that you look up and use a proper encryption algorithm. Here is a good example of implementing RSA in c#. http://www.c-sharpcorner.com/UploadFile/75a48f/rsa-algorithm-with-C-Sharp2/
DPAPI, would probably be a better choice.
It is not my homework, we got into learning how to separate words using Split(' ') and i wanted to update my code from having "if" and "else if" to "switch" and "case" and use "arg" to make my code easier to read and change in the feature. Trowing that to the side, explaining it like this really helped me to see how i can use /u/ffsjake suggestion. https://ybin.me/p/e96b9451a8c044dc#58+mXsfRN1RpGhmkW0HtMMF9lJ5fxf5mk3AhRaBYST8= This is a working version of the code that doesn't crash. If anyone finds this post in the feature hopefuly they can learn something from this.
Try something like String[] args = Console.ReadLine()?.Split(" "); // ?. Is the null coalescing operator if(args == null || args.length &lt; 1) return; // do nothing when the user didn't enter anything // handle input here. MySwitchCaseMethod(args);
I use: ``` if (Debugger.IsAttached) Console.ReadKey(intercept: true); ```
I use: ``` if (Debugger.IsAttached) Console.ReadKey(intercept: true); ```
if(*boolean expression*) { *statement 1*; *statement 2*; } Alternate syntax for one liners if(*boolean expression*) *some statement*;
Do-while will be set up that the loop executes once for sure and then checks the condition after execution. Think of a while loop that checks condition after execution and rather than before execution, and this is exactly a do-while.
Try prefixing the call with base. base.WaitOne(params...);
You are saying that this program prints "fault occurred" "null" ? (And there is no core dump?) I would have to try this tomorrow at work.
It does run, but it would end almost immediately because at the top, you have declared "input" to be 0. The program never runs the while loop, as its requirements have not been met, skipping straight past the loop and to the "Console.WriteLine". Furthermore, there is no break point such as a "Console.ReadKey" which would pause progress until a key is pressed, meaning that the program will just shoot past everything, closing the program.
Conceptually, there are two different loop types and one additional variation of each type: * [`for` loops](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for) are iterating over something. * [`foreach` loops](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in) are a variation that take care of some of the housekeeping for you, but they only work on some things (specifically, arrays and things that implement the `IEnumerable` or `IEnumerable&lt;T&gt;` interfaces like `List&lt;T&gt;`). * [`while` loops](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while) loop until some condition is true. * [`do/while` loops](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/do) guarantee the loop will iterate once. Internally, these are all broken down to goto/jumps anyway. If you've ever heard Edsger Dijkstra's "Go To Statement Considered Harmful," he was saying that because loops and function/method calls are much more readable ways of doing flow control.
&gt; loop until some condition is ~~true.~~ false and then stop looping. 
I didn't say anything about learning everything. I asked which you find yourself personally using the most. 
thanks
Yes.
Yeah. Your right. I have the annoying habbit of writing everything in while loops. Need to work on that. 
What does that do? Nevermind i forgot.
What exactly does that do if you don't mind explaining?
That's what I get for changing wording at the last minute and not proofreading it.
Hmm, weird. That code (from the book) doesn’t look right; you sure it works? That while loop would exit when first index equaled 5... Anyway, might I suggest a new resource? The professor that taught me has a YouTube channel, just search for “Jamie King C#.” Great teacher; I couldn’t program my way out of a paper bag until I saw every C# video on his channel. Because of his training, I was able to get a job as a developer. Was even supposed to be one his channel regarding that topic, but I chickened out; didn’t think I deserved to be one of his “success stories” because I wasn’t working as a developer at the time (just a sys engy doing scripting)
The `System.Diagnostics.Degbugger.IsAttached` will property will detect whether or not you are running inside Visual Studio or some other debugger. If so, it will wait for a key-press, but it will not show the key to the screen since `intercept` is set to `true`.
wow congrats on job. The more I learn about coding I am beginning to realize the amount of knowledge people need to acquire to get a job. I tested the code it works the link to the answer for the book is http://starboundsoftware.com/books/c-sharp/try-it-out/reversing-an-array thanks for the Jamie King C# resource im going to go through for sure thanks.
actually the null is just an empty line, but yes. fault occurred is printed. compiled on linux using msbuild (using a visual studio solution), ran using mono --debug on windows it is indeed as you described, i filed a bugreport for mono https://bugzilla.xamarin.com/show_bug.cgi?id=60862
yes that is what i did to fix it. i just posted this here for discussion, cause of the strange behaviour (while its more of a mono problem, than a c# one)
I see you're using a `double` for division. Give `decimal` a look, that might be closer to what you're after. [Linky Link](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/decimal).
I have used FasterFlect before to wrap up delegate creation with easier syntax. Have you looked into that library before?
It says `SIGSEGV: altstack`. That should be enough to tell you a segmentation fault occurred in or around the altstack, or the alternative stack set up by Mono.
well i get this =/ https://i.imgur.com/XZI1uTq.png it just executes and the exception is null did you build using msbuild and execute like i did? using ubuntu 16.04 and above mono version (which is the newest i get when doing apt upgrade)
No, I didn't run anything. It's in the output you pasted.
ohhhhhhhhh, sorry no, that is the output that "mono -V" is giving me. that is not running the program.
You likely need to use Properties on your User class. Fields cannot be binded to. So Name { get; set; } Might help
Thank you so much! I turned them into fields because I didn't realize they needed to be properties, lol.
In my view (probably wrong): Fields are private, Properties are public. Also check out Event Handling, that comes up a lot too in some of the more advanced controls.
http://blog.another-d-mention.ro/programming/communicate-betwen-c-and-an-embeded-flash-application/ may help, although I have to ask if this is really what you want to be learning/doing. Flash is antiquated tech that most modern browsers do not intend on supporting much longer
Well, your C# part would have to act as a server that the Flash application will connect to and query data. Here you could go with two ways: 1. Use WebAPI on the server side to provide a REST service from which your Flash application will poll the data. This way you don't really have to do a lot of programming in regards to connectivity. [Here is a tutorial on how to develop the a WebAPI 2 serverside part](https://docs.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api) As for how to consume a REST service via ActionScript, can't help you there. 2. Use ActionScript3's XMLSocket and implement a XMLSocket server that will be consumed by the Flash application. ([there is something, although not much](https://github.com/Toikage/XMLSocket)) **Edit:** [also found this, which sounds exactly like your question](https://stackoverflow.com/questions/11699476/how-to-send-commands-from-the-c-sharp-application-to-its-hosted-adobe-flash-appl) In the case your "C# side" is actually a web server that is serving a web page with flash content, there is [a blog post describing how to do this](http://blog.another-d-mention.ro/programming/communicate-betwen-c-and-an-embeded-flash-application/)
I'm a bit confused by this: &gt; ...where C# sends data from a local database and Flash reads and displays what ever is in the database. &amp;nbsp; Do you mean to say the C# application **writes data to** the database, and the flash application **reads data from** the database? If so, then you should treat this as two separate applications and two separate problems. This will make it much easier for you to find out (Google) your problem. The problems/Google searches, would be split as follows: 1. Write data to database from using C# 2. Read data from database using Flash &amp;nbsp; A simple way of writing to a database using C# is to use ADO.NET. You can see a straightforward example on this [MSDN page](https://msdn.microsoft.com/en-us/library/ms233812.aspx) - just scroll down to the "Insert new records by using command objects" section. &amp;nbsp; I've never used Flash, but a simple search on how to read from a database yields [this example](https://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118666ade46-7d4c.html).
I didn't know MVP was widely adopted within Winforms circles. I worked as a solo developer during Winforms heyday, so I guess I was out of the loop. &gt;&gt; MFCO Pattern I hope that didn't come off as pretentious. It's just what I dubbed it in my head. The 'O' was in mainly context of add-ins, since I wanted to isolate any COM Interop away from the rest of the code.
One thing that springs to mind is to declare `fault` and `ex` as `volatile`. Currently, they are used cross-thread, but there is no synchronization. Athough they are both used in the same way, so it's strange that, *if* non-null is caught by that catch in a thread, `fault` is set but `ex` no.
Socket communications is what you're looking for. https://www.codeproject.com/Articles/10649/An-Introduction-to-Socket-Programming-in-NET-using
Remember to implement INotifyPropertyChanged on your ViewModel properties 
I'm just hacking this together for a competition. It's all high schoolers anyway. I don't think that degree of structure is needed :P
Do you know what INotifyPropertyChanged is?
Well I'm using the observable list that already has that, as I understand it. But no, I don't really know what it is. 
Agreed. Unless you are supporting a legacy system, do not use Flash for anything new. There is nothing Flash can do that you can't do (better) with either HTML5+JavaScript and/or WebAssembly. Adobe is sunsetting Flash in the next 2 years, and no bug fixes or security patches will be developed.
Fields represent state and properties represent accessors. You usually want state to be consistent (and, as a consequence, private) and access to be public.
from a brief look at your examples it looks really good. thanks for posting. I will try it out
Using JSON.NET for serialization - no thanks.
What would you use instead, and why wouldnt you use JSON.NET?
No, not pretentious at all. Every pattern has to have a name :) Usually we'd say the O was abstracted away as a service, but I can imagine how easy it would be for someone to slip some interop in to somewhere awkward :) MVP was adopted by Microsoft, and as was the way back then, became the standard. A lot of the early books used other variations on the theme. Even in MVP there were [two types](https://stackoverflow.com/questions/5381847/what-are-mvp-passive-view-and-mvp-supervising-controller). Funnily enough, while looking for a link on MSDN to MVP (A lot are dead now) I found another stack overflow article about [MVVM in winforms](https://softwareengineering.stackexchange.com/questions/277143/how-do-you-separate-view-from-logic-in-a-winform-application). The interesting thing is that the example at the end isn't really MVVM because all the binding is occurring in the code behind of the view and has no way to be strongly typed among other criticisms. It's a distinction that others might disagree with, but, I don't think you'd benefit any trying to shoe horn Winforms into that style. 
When I send data over UDP, I want to be as compact as possible to increase the likely-hood of a successful receive. JSON is too bloated for that. I'd probably opt-in for something like Protobuf, which results in very compact data packages. But for a library like this, I'd completely abstract it away and provide different serialization formats as additional packages. Keep the core lean and small.
Thanks, that is a good idea. I'll work on abstracting the serialization.
i was assuming using t.Join() is enough synchronization. volatile would make sense if i would write to those variables from multiple threads at once
I'm using it for front-end React portions of ASP.NET Core SPAs. Think it does a better job than Visual Studio. For heavier backend work, I'd still use VS. 
Have you tried Visual Studio for Mac? https://www.visualstudio.com/vs/visual-studio-mac/
Same here.
www.cartoonsmart.com has great flash tutorials, is where I learned. You could create an asp.net api project and just call it from flash, it will return Json or xml and flash can easily read the xml.
Yes I've tried. I wasn't able to use it because it was a little laggy and cumbersome.
If only they’d commit to full support of a product like this for Linux. 
I guess I will give it a chance for React. My Webstorm student license will expire soon.
I'm using Visual Studio. What do you think vs code does better?
Yes, I use it quite extensively, and fire up Rider only when I want to do some refactoring. It works really well except for a few things like Razor as you mentioned. The fact that it's so much faster and works better with frontend code mostly makes up for it though. I rarely use the built-in launch/task functionality, instead I run `dotnet watch run`[1] in the Terminal and webpack in another Terminal tab. If JetBrains got their things together and significantly sped up Rider, I would probably spend a lot more time there though. [1] https://github.com/aspnet/DotNetTools
By the "all users app data", are you specifically referring to the Appdata folder that would be obtainable from `Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)`? Sorry for the delayed response, by the way, I was sick the past few days.
This seems like the best solution. (Either that or the UAC prompt, because I really am not sure just any user should be able to change the setting) I've seen some people refer to something called "all users app data", is this what they meant by it? Specifically, `Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)` Thanks for the info. (Sorry for the delayed response, I was sick the past few days)
To me it is a better editor for frontend-related tasks. Such as editing html, css and typescript. Usually when you do SPA, you do have some kind of CLI that does take care of stuff for you (ng generate), so the console VS Code offers is very good. dotnet run and you are good to go. It is just really handy for frontend. For backend I also still use VS.
I wasn't aware of that repo, thank you so much.
Partly the more minimalist design, better live-editing while running experience, and we've had problems with either intellisense or ReSharper giving false positives on .tsx files. It's mostly personal preference, I'm sure, since it's probably using the same engines under the covers. 
I tough networkcomms.net is popular?
Thanks! I'm actually interested in the minimalism. I will take a look.
Ok thanks i am going to take a look of it.
Using it for Angular and Go... Love it.
What have you looked into?
VS is a fucking *disaster* for front end stuff -- it is slow, clunky, and the tooling is just terribly suited to a modern dev environment. FFS, the task runner natively supports Grunt and Gulp, but you need to install a plug-in for Webpack or NPM scripts. What year is it, again? I also hate the way they have to drape their nuts all over your code by aggressively trying to build your Typescript code for you with whatever shit, outdated version of Typescript is installed in VS, rather than the workspace version. Actually, I really just hate the whole VS philosophy of tightly coupling everything in the IDE. It happens to work out okay for the most part when you are doing .NET stuff (although it is not without its pain points there either), but when you are doing web it's a fucking disaster -- they are not only jamming their workflow down your throat, but the workflow is from 2014, and web shit just moves way too fast for that to be acceptable.
Nitpicking: you can paste code on reddit too btw. No need to create screenshots of code to share a piece of code. Indent it with 4 spaces and it's nicely formatted. (so in vs, select all, press TAB, then copy everything, done :)) Sharing code through screenshots isn't great: you can't copy/paste from them to focus on a small part. And this issue would have been easy to spot too tho with using the debugger. Not to be a pain, but it's IMHO key to learn the debugger early on, as it's a great tool not only to find issues, but also to learn how code really works. So if you place a breakpoint on the 'while' statement (click in the left gutter next to the code area, you'll see the line become maroon brown), then press F5, the debugger will stop there. You can now hover over variables to see what value they have and with F10 / F11 you can step over or step into statements (or use the arrows on the command bar). So you can step by step go through your program. Even that it works now, I still suggest you do it with this code to see what's going on so you learn what each statement really does. 
THANK YOU!
Object transport is little bit more simpler that networkcomms. In object transport you essentially send and receive objects as models. You then set up different handlers for each received model. 
While it's good advice to use a debugger, is it really a good idea to teach people to start a program in a debugger from the start? I've seen this so many times: a person simply starts debugging at the start of the program, spends eons stepping through code till they finally reach an area that's probably the place where the bug is. While this gets them eventually to the spot, it's tedious and they're hating the experience. Learning to look for a ballpark area where things 'might be wrong' and then place a breakpoint there is IMHO a better way to start debugging, even for beginners. Or do you have other experiences? I might be off base here of course.
Object Transport is a little bit simpler than networkcomms. In object transport each object is like a model. You setup multiple handlers which wait until the specified object has been received on the network channel similar to having a controller and action with a model. These handlers once registered will always execute when the given object has been received.
In this example the issue was that OP thought the program wasn't running. Starting the debugger would help teach them what was happening. Generally speaking, writing unit tests would be better than debugging. But that wouldn't have helped with the "where did my program go?" issue here. As for breakpoints, I'm on mobile and thought it would be difficult to explain them well. Especially considering that they wouldn't provide about extra insight in this case. 
well it's there because of xamarin microsoft deosn't built it
Is this different than CSLA?
For C#/dotnet core at home, I'm begrudgingly using VSCode because omnisharp-vim caused me enough head aches to set up, but at least debugging is pretty easy. 🤷‍♂️ At work I use a windows vm and vs2017 which I vastly prefer as it's vim bindings work and ReSharper is a joy (when the solutions I work on aren't trying to strangle it), although it is much, much heavier than I'm used to working with. It's very unusual for me, even after a year or so using them since I'm so used to using a combination of neovim and tmux as my development environment. 
What does "achieve data" mean? And the price of what? People are much more likely to provide an idea of how to build "this" if you give some semblance of an idea of what "this" is.
Basically here is my idea: The Programm should Check my Computerscreen and Analyse cards by their value. A seperat API is Checking the Price which is worth from the Card and displays the Price on the computerscreen. Thats what i Want to achieve
Edit: thanks for the help everyone. I'll take a look at the stuff with downtime at work. For the people that are saying not to learn flash: the company I work for is still using it despite browsers stopping support for it. I'm not sure when or if they plan on switching to html5.
If the C# app is ASP.NET then use [webapi](https://www.asp.net/web-api) with [JSON](https://help.adobe.com/en_US/as3/dev/WS324d8efcab3b0d1e2408f9e3131fddffcfc-8000.html). If the C# part is a desktop app, separate from the flash, then you can run a local webservice on the C# app and connect via [REST](https://help.adobe.com/en_US/as3/dev/WSb2ba3b1aad8a27b061afd5d7127074bbf44-8000.html). If the Flash component will be embedded in a desktop form, [fscommand](https://help.adobe.com/en_US/AS2LCR/Flash_10.0/help.html?content=00000561.html) in flash will be your best bet(although I'm not sure whether that much support exists for hosting shockwave flash in a .Net framework application). However, you may have more luck searching for Flex applications in C# than flash, as even though they are the same, a lot more enterprise work was done with the Flex framework and they both use Actionscript3. And as an aside, if you use Adobe AIR as your delivery container, you'll have access to ODBC connectors out of the box and may not need C# at all. 
A bit off topic but an in development backend with cshtml for the front end?? Why? 
Fuckall by the sound of it. 
Exactly why i asked the question ;)
There you go: http://lmgtfy.com/?q=read+Computerscreen+C%23 http://lmgtfy.com/?q=external+api+C%23 http://lmgtfy.com/?q=C%23+output+on+screen
Ty so much i was to stupid to find the right words to google
Break it down into separate tasks: 1. How to get an image of the current screen 2. How to do object detection and recognition of the cards in an image - Do the cards have clearly printed names that you can perform text recognition on - Can you find a collection of images of the cards to compare against - Can you do feature detection of specific parts of the card 3. How to interact with whatever API you're talking about You'll find countless resources and possible approaches to each of these tasks online that you should read up on. It's probably going to be quite an in-depth project. If after that you have any *specific* questions, I'm sure people here will be happy to help. If you're hoping for an answer like *"Oh, just call the CardRecognizer.GetCardsOnScreen() method and it'll do everything for you"*, you'll be disappointed.
I am really helpful that will be my new project
Yes I am, although there are some weird bugs. For example i cannot connect to my azure account from visual studio if I create azure functions. So that's a huge problem for me as i cannot deploy. So still stuck with paralells and normal visual studio prof. Im very enthousiastic about VS code, it has a great potential. Even got my buddy using it(ubuntu, php, python) But MS should stop releasing stuff pretending its not beta. VS Code is beta, but overall a great product. For my old bankend on 4.6.1 I still use normal visual studio, but from here on I'll try to move forward to core so that i can use VS Code instead. Allthough im not sure if it support attach to process for azure functions ofr example, or a web app. I use that a lot.
Its really awesome with react. Install the chrome debug extension and you can use VS code to debug your code instead of the react component in chrome.
Funny, I use vs code for some of my refactoring. Unless there's something to get ctrl-d/K liked in sublime text for rider or vs. My main problem with rider is they went and made a whole new key mapping when they had a perfectly good one in jetbrains
what book did they recommend to buy? Im learning as well 
https://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx Basically, the items in the ObservableCollection need to implement INotifyPropertyChanged for the ObservableCollection to be able to observe property changes. Just as the UI observes the ObservableCollection, so does the ObservableCollection observe the INotifyPropertyChanged implementation.
The intended way of interacting with these devices on Windows is the [Windows Portable Devices](https://msdn.microsoft.com/en-us/library/windows/desktop/dd388998%28v=vs.85%29.aspx) COM API, or [Windows.Devices.Portable](https://docs.microsoft.com/en-us/uwp/api/windows.devices.portable) in UWP.
I don't, but that is because i feel that it is suited for some simple (possibly front-end) work. As soon as you dive deeper in code, I want a proper IDE to work with, with all the functionality that it brings.
I use it only for angular development and use VS for any backend work.
I believe applicationData is for the current user. CommonApplicationData should be for all users.
vs code is the new hot thing rn, everyone is using it, i was forced to install it my self so i can have a common ground with the rest of the guys at work, even though i own a enterprise vs licence that does the exact same things but 900% better. I
I find it interesting that for so many years folks (including MS) have preached against singletons as an anti-pattern, yet I keep finding things like this where it actually makes sense to reuse the same object. 
This is actually mentioned in the code sample on MSDN: &gt; HttpClient is intended to be instantiated once and re-used throughout the life of an application. Especially in server applications, creating a new HttpClient instance for every request will exhaust the number of sockets available under heavy loads. This will result in SocketException errors. https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client 
I use it for the JavaScript side of our applications. Everything C# is done in good ol visual studio
Yup, check out ["classes"](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/classes). You can move out parts of code that have shared meaning and organize them into different classes.
Only the Sith deal in absolutes. There's a time and a place for almost any programming pattern or feature. Wait, did I just make an absolute statement? Oh well, what could go wrong if I'm a Sith? It's not like run the place or anything.
If you think you got the basic ideas behind functions, loops, conditional branches etc. you should start learning Object Oriented Programming. You might want to grab a book (such as C# In a Nutshell) to learn basic principles because there are lots of concepts in high level programming languages. After you build a foundation you can start doing your own projects and learn more complex concepts while doing so.
It's definitely the perfect tool for front-end dev, backend support still feels slightly janky compared to normal Visual Studio. 
Because it’s what asp.net uses to render html.
I’m not that dense lol, but it’s kinda outdated to do this kind of serverside rendering. 
It's *literally* MonoDevelop, Linux was the original platform
There isn’t really anything else for asp.net. Unless you are doing a only JavaScript app with html, you will need razor. Even the new templates for asp.net core for angular and react use razor for the main page.
There isn’t really anything else for asp.net. Unless you are doing a only JavaScript app with html, you will need razor. Even the new templates for asp.net core for angular and react use razor for the main page. But for doing forms with validation automatically nothing comes close to mvc + razor
true, but if you were Microsoft which one would be easier turning xamarin in VS basically change the name theme and some tweaks and feature here or there or turning MonoDevelop to VS add support for android ios mac uwp etc
Yes. 
`HttpClient` isn't a singleton, though. You can create different instances of it to use different `HttpRequestHandler`s and default headers, which wouldn't be possible with a singleton.
I've worked in many different places and this is the first I've ever heard of this. I can't recall ever seeing this guidance before, and a quick check through the current code base of work projects show HttpClient with the using statement. I think it is one of those non-obvious things. Any time you see an object implement IDisposable your first instinct is to wrap it in a using statement, since that is what you're supposed to do. Google "C# HttpClient tutorial", and other than the recent MSDN page at the top, every single link shows an example of doing it wrong, including the popular "dotnetperls". Even if you do it the right way, it turns out that has pitfalls as well! https://github.com/dotnet/corefx/issues/11224 It's kind of amazing to me that a fundamental feature of the framework is so misunderstood. 
That's true. 
Just a heads up - you also need to take into account DNS changes if you go this route.
Yeah, I mentioned this in another comment. It's one of those known issues that MS just assumes that you should know better? https://github.com/dotnet/corefx/issues/11224 
There's a huge difference between a single instance being carefully injected into multiple places vs a global static object like most people would assume you mean.
Yup, perhaps "singleton" was too strong a word. It was just my initial reaction after reading the article.
Gee, I wish I'd known about this sooner... I've searched online sooo much. I'm looking at the documentation now, and it's kind of pretty bad, and not sure it's any better than what I'm using internally. But I will definitely take a deeper look at this. Side note: My lib can be used WinXP+. 
A static field/property points to a specific memory address during program execution. If you were to start 2 or more threads that write to the static property you are likely to get a race condition. This means that while one thread was reading/writing another was also writing to it and you get a big mess of data in memory where the property/field was. If both threads were reading only then that's fine and you won't cause a race condition. The CLR has checks in place to throw exceptions when a race condition occurs but it's possible that it won't. In that case, whenever you read the property, you get an arbitrary value from it and it's bound to cause bugs or crash your program in unexpected ways. The worst part of this is that sometimes your code works and sometimes it won't. Making debugging the bug a chore. You can also swap `Memory` for `Paper` and `Thread` for `A person that reads/writes a paper`. Two people can write to 1 paper at the same time but not also on the same spot without resulting in corrupted text. Though both people can read the paper at the same time.
&gt; It's kind of amazing to me that a fundamental feature of the framework is so misunderstood. The .NET BCL classes are designed to be *mostly* self-documenting and easy-to-use, we put a lot of time into that effort, sometimes more than implementation itself. But sometimes, that comes back to bite you because people get quite comfortable with not really reading the documentation (the 'Remarks' in particular). Moral of the story: read the docs and look out for callouts! (To be fair, my younger self would probably just ignore me right now.)
In no way is it outdated. I'm assuming you're referring to writing SPA, which SPA pages are good - for what they're meant for (even more so for angular). If your website doesn't need high interactivity, there is no need for anything other than serverside rendering (which most SPA pages do anyway now) so that search engines have an easier time index'ing your pages.
 As most said, I use it for front-end work. There are a few parts of VS I wish they would add over - but the one thing I can't go without is TFS. We use TFS at work, not Git. I find it weird Microsoft's own product supports Git better than their own TFS. So, VS2017 at work - VS Code at home.
[Worth saying that it has been posted here before](https://www.reddit.com/r/csharp/comments/50hyfz/youre_using_httpclient_wrong_and_it_is/)
I'm only partially serious when I say this but [you could have read about it in one of the other threads about this](https://www.reddit.com/search?q=You%27re+using+HttpClient+wrong+and+it+is+destabilizing+your+software&amp;include_over_18=on) You're right though. I didn't know about it until I read about it randomly, I'm probably in one of those comment threads being shocked and bewildered :)
The guidance is/was more specifically against overuse of the singleton pattern, not its abolition. 
The link to Patterns and Practices is broken.
Yes, in fact that's more or less what you *should* be doing. The form should only be concerned with UI things, like presentation and user input. The actual meat of your application should live elsewhere
I would assume the same normally to be frank. But I am aware of no guarantee, so I took a punt. I have grown to be extremely careful with threading in C, optimizing compiler is a bitch. 😀
I'm mostly frustrated by this because it's one of the most useful tools for working with HTTP in .NET but due to the choices made under the hood it's set up like a pit of failure. I'm more displeased the reason the "proper" usage isn't obvious is shrapnel from the IDisposable pattern. I'm *even more displeased* that, as this comment thread points out, using HttpClient properly still means you have to worry about certain situations.
What happens when the underlying TCP session is dead? e.g. time-out in some firewall in your path after an idle time. You won't be getting a FIN or a RST, so you'll just try to keep sending traffic through the same TCP connection. Can you recover from that? And if you actually got a FIN or RST, can you recover from that? In your first example if the underlying TCP connection is broken, only that try will fail. The rest will go through. On your second example (the "good" one), it seems you might be in trouble. Thoughts? P.S.: I'm under the impression that to achieve some levels of performance you might want to control the sockets yourself (but I'm not even a coder, I'm here to learn!)
"Vs code was a brilliant move by ms to elighten the normies into the majesty of visual studio, intellisense, nuggeting etc" Haha VS code is a trojan
Whats the point of this exam? I've never seen this as a requirement for jobs, but then again im in the US
If I understand it correctly, HttpClient abstracts over multiple requests and doesn't care about the underlying TCP connection. A single client works just fine even if you restart the server on the other end.
Ironic, he could save others from absolutes, but not himself.
Using it in conjunction with Unity. It’s more snappy than using Visual Studio for Mac.
Sorry! The reddit search engine sucks so badly it can't even find links that have been posted before. It must only look so far back in time.
as far as i know volatile (in c#) is there so the value isnt cached in a register, and will be loaded from memory when it is accessed, so you get the most up to date value. in c/c++ i think its similar, but its meant for when you change a value in an ISR, so your main code does get an updated value
Create a windows library project and reference it from your forms project
I'm using it for PowerShell.
Didn't run it, forgot, sorry. Volatile is much different in C#, it basically asks for the atomic test and set semantics. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile. Note the types that can be used with it - only what can work with InterlockedExchangeXxx stuff.
TBH, it should have been mentioned on the main page for HttpClient and not "buried" in a sample, as it's a pretty important distinction. And this means that any class holding a reference to your instance would need to implement the IDisposable pattern itself. And be in a using block somewhere towards the start of the program. (insert joke about turtles and "all the way down") 
There are two folders, SpecialFolder.ApplicationData is per user, stored in user folder and there is SpecialFolder.CommonApplicationData common application data available to all users on the system. Of course access to these folders is governed by file system permissions so you can set permissions on the folders in CommonApplicationData to allow only some users to be able to modify files(note that permissions may be overridden by any administrator user).
Exactly. I would never build a client side rendered website if it was reliant on SEO. Building web apps and admin dashboards with clientside rendering is awesome though.
Ok ill share my experiences on this. Part of what i developed was a C# developed plugin for using reports in Excel. That meant i struggled working with the plugin and testing it. I didnt use many active features like databases, files, active directory, whatever. But the problem definitely came up with building prototypes applications, as the app prototype wasnt connected to excel. Then i started getting data from various sources like files and that made sure that the presentation worked while using the documents. I didnt use anything fancy like interactive dashboards but when doing online submissions as a brief intro it was fine. There wasnt a big issue of, hey how well are the error squigglies and so on going to happen, the problem for me was fiddle with formatting, and automate stuff while testing it live, nor just a various source not connected to excel. I ended up completing it as a standalone plugin but with your Excel plugin i imagine it could be easier to deal with.
I toyed around with the idea of instead of a static basically use an object with an expiration time. Destroy and rebuild every thirty minutes or so. Never had the chance to see the implications of that though
Index was outside the bounds of the array is also like if you dont use the arrays properly they are easy to mess up with. like thats the window to the more classic paradigm of c and c++ with direct memory useage and playing with memory addresses. i dont think you would be asking this question if you had more background in those but its still cool, like i made the same mistakes from time to time
Could someone please explain the delegates to me. like i dont know exactly how to build up my knowledge from not having seen the examples. i guess its like a dynamic programming thing where you use it to create new objects to work with them
Its been over a year since that was posted and it seems like neither the .Net team nor the .Core team has seen fit to produce a good replacement. The comments in the issue link you posted are disappointing, seems like just kicking the can around.
ok for me the issue was that msdn is used a lot by all the links on google and other sites so its like, hey i want to build a good and maintainable code base so im going to keep using good sources. generally it tends to be you have one source of info and then others who improve it or crowdsource it in some way. and thats how s. overflow i think is better
im just surprised they are still up high on google ranks. i mean you wouldve thought if you use a lot of search results to index your results based on how much of the target pages link back to the source or how often it happens that things go awry, thats how it takes place.
When you’re done with the HttpClient calling the Dispose method is still valid, right? 
 var result = Client.GetAsync("http://aspnetmonsters.com").Result; It bugs me seeing code that calls an `async` method without `await`ing it.
Thanks for replying! That would make sense. I'll dig deeper into the documentation.
I think its good youre doing and solving these type of puzzles. like i know sometimes puzzle solving especially is boring and me too i just wanted to build practical programmes that did somthing. but then i realised the charm of non practical code, its all about the process i realised. and the joy of building up the answer in your mind.
these are people who have used notepad++ and cant into Sublime Text or learn more advanced features of notepad++
🤷‍♂️ wtf does this even mean?
Hey no problem, the more help the better for me. This sub has been amazing with the help, I appreciate it so much 
Visual C# How to Program 6th Ed, but Deitel. It's nice, but pretty intimidating at times
Have you got a link?
thanks (:
&gt; It's kind of amazing to me that a fundamental feature of the framework is so misunderstood. n00b. The good news is that if you manage to sublimate this to understand that "I'm sure they thought of that, they're smart people" only means you should double-check it, then you're probably far ahead of your peers. 
Or you ability to search, using equivalent terms was not exhaustive enough, or you didn't do it. If I can find equivalence with one word SEARCH, you should too. https://www.reddit.com/r/all/search?q=Httpclient 
Or just use Webclient?
In my defense, I put the URL in the search bar and Reddit came back with nothing. Unless it's a recent repost you really have to dig to make sure you aren't reposting, I'm afraid. On the other hand, this highlights the disturbing fact that **this is still news to people who should already know better**. People like me. 
I learned a similar lesson about MemoryCache.Default. The piece of wisdom that warns you against using a named cached instead of the default is buried deep in a note in one of the constructor pages. 
Looks like it got updated after it was linked. You can find it here: https://github.com/mspnp/performance-optimization/tree/master/ImproperInstantiation 
OK, man. I'm sorry I offended you with my repost. FWIW, this seems to have generated enough discussion and just goes to show that this issue of ignorance around HttpClient still needs to be addressed. 
Still valid, just wasteful if you plan on recreating it again a moment later. 
Totally with you. It would be new news to me too if I didn't get lucky and come across it previously. I'm sure it will get posted again and it's probably for the best :)
Removed: Rule 4.
Although this is only really an issue when the volume ramps up. I wouldn't bother e.g. re-using HttpClient instances if you use 10 of them to run your integration test suite. However, if you hit `http://.foo.com/api/` 1000 times a minute then you should definitely re-use the http client.
sounds like a big project. I am also curious what technology he would need to create this.
Yeah there is no proper way. It is not like not disposing it is always correct. This is basically a big fuck up and they should fix it.
I am thinking of using Screenshots ?
I fully agree. I applaud the discussion, and don't care if its a repost. What I ( me specifically care about ) is you saying the search on reddit isn't good, or somehow faulty. Which imho is a deflection. If for instance you addressed this right out the gate, by stating "I did some research into this, but couldn't find my opinion on it, so here it is. " you covered your ass, and reduced my need to check. :) 
If you don't care about recreating deleted keys, the simplest solution would just be to use `dict[key] = 0` for the reset. Otherwise, using a loop is a common solution when you have low contention. It optimistically trades repeated attempts in worst-case scenarios for lock free successes in most cases. Another option might be to use a wrapper class that implements an increment and reset method instead of an `int`.
Is there a better API or library? Something without magic connection management or keepalive handling, preferably having an explicit way to do those things?
Look into MVP or MVVP for some good ways to separate the code.
I wish we had a site to add these little .net nuggets down in
It's the shrugging emoji. Unless you mean what I meant by it. VSCode isn't the worst editor I've ever used. It's better than atom and sublime text in my onion. But it's so far removed from my usual work flow that I'm not crazy about it even though it makes working with dotnet core so much easier. That and the vim binds are just weird. Like I use s/blah/blarge/gc often but it doesn't respect the c flag. I ended up removing that extension to force myself to use the native ones. I actually caught myself using crtl shift i to format code in vim today rather than &lt;leader&gt;f
&gt; If you don't care about recreating deleted keys, the simplest solution would just be to use dict[key] = 0 for the reset. that would throw an exception if it's deleted though, right? That's the route I'd taken earlier, but then I added a Contains check, only to realize that now I need a lock to make it atomic. I could just catch the exception I suppose. &gt; Another option might be to use a wrapper class that implements an increment and reset method instead of an int. That would require new locks though right? Or would I be extending concurrent dict? I also just realized that my error handling for whether an increment fails because of an add or an update are two separate error cases which need to be handled completely differently, but there's no way to know which of the two reasons it failed. I might need to resort to the lock approach after all :(.
Are there any nuget / open source packages that handle it better? 
why the male gender symbol though... running chrome btw
eeeeh ugly solution: windowchrome. fullscreen transparent always on top window with no focus and the only visible and hittest relevant elements on the taskbar. probably even worse but also more complicated solution: dll import user32.dll and draw graphics objects directly on the screen. I have no idea how that behaves with changing focus etc tho.
you are blaming the user for the search not being good enough to detect the difference between a link starting with https:// (this post) and not starting with that same string (the one other post on this subreddit to this article). if a cursory search for the link doesn't show any results in this subreddit, then good to go. Also, [Relevant XKCD](http://xkcd.com/1053/)
your search failed because your link was slightly different (included "https://")
Thankfully the ASP.NET team has been hard at work on this by the looks of it, https://github.com/aspnet/HttpClientFactory hopefully they come up with something good (looks good to me from a glance, doesn't dispose the inner message handler etc) and also hope it gets moved from asp net core to microsoft extensions like other similar projects.
Emgu Cv is a image recognition library you could use. .. It's not gonna be easy... 
I think singletons are an anti-pattern, but *shared instances* are often very useful and not nearly as potentially harmful. You still have to be careful about what kind of state is contained in this instance because global mutable state is pretty scary, but at least you still have some flexibility. Dependency injection is a nice way imo to get the benefits of shared instances while still allowing you to completely bypass the shared instance when it is useful to do so – for instance when mocking objects for testing, or when the world changes around you and suddenly people *do* have more than one CPU/GPU/network interface/database/file system/you name it. 
And rightly so!
I was following this tutorial https://www.codeproject.com/Articles/17674/GridView-Order-Page-Shopping-Cart-Page-ASP-NET-SQL, but they are using a SQL connection so when they start establishing that connection I get lost
Sorry for the double reply. I tried the lockless reset approach like so: if (!m_dict.ContainsKey(id)) return false; try { m_dict[id] = ResetValue; } catch (KeyNotFoundException) { //In the rare case that the key has been deleted due to a race condition which occurs after the ContainsKey check. return false; } The lockless increment scenario still has a big hole where I'm dealing with either the error handling issue I mentioned, or that it could overwrite the reset value half way through the increment. Another issue I just noticed is that at some point I'm needing to iterate the dictionary to increment all the values, and to avoid a collection was modified scenario I made a copy of the dictionary before using it. It just occurred to me that I'm just pushing that error into the loop within the constructor (or am I? Is the copy constructor thread safe for a concurrent dict?). If that is the case, I need a lock here too.. Perhaps I'm going overboard trying to avoid locks here.
`dict[key] = value` is basically an `AddOrReplace()`, the setter doesn't throw a `KeyNotFoundException`. &gt;Perhaps I'm going overboard trying to avoid locks here. Unless benchmarks are showing a significant performance problem, I wouldn't worry too much about avoiding locks when it comes at the cost of safety or code simplicity. Locks aren't *that* slow anyway as long as there is no contention, a `lock` around a normal `Dictionary` may even be faster than a `ConcurrentDictionary` when there is usually just one thread accessing it at any given time. If this code runs every 30 seconds or whatever it really doesn't matter, just do what's easier for you.
Hey that's nice and stuff but I'm not really waiting to write all logic to determine whether I need to scale up the number of objects I have laying around in a pool. Anyone got anything for that?
&gt; dict[key] = value is basically an AddOrReplace(), the setter doesn't throw a KeyNotFoundException. oh? haha! so that wouldn't have worked at all. &gt; Unless benchmarks are showing a significant performance problem, I wouldn't worry too much about avoiding locks when it comes at the cost of safety or code simplicity. You're right. How does the saying go? Premature optimization is the root of all evil? :) I'll switch to a dictionary and use locks. It's a lot simpler.
As it should. Major anti-pattern.
Are you trying to create a full-screen application?
Yes, since you're making a Forms application then you will want to look into `MVVM` design style, and read into Object Oriented Programming, specifically `classes`.
&gt; C# In a Nutshell this book is way too advanced for a beginner
your point is about the granularity of the search, my point is about the strings used to search with... If you search for things by copy pasta strings, your searching ability sucks.
Im not sure what exactly you are doing, but with the little information I have, if the problem is you are incrementing an integer in the dictionary from multiple threads, you could wrap the integer in a class (so the ConcurrentDictionary values are this new class) and use Interlocked.Increment (which is atomic) on the integer instead. Again im not sure if that fits what you are trying to do or not.
I learned this in work recently also, after doing some rework and optimisation. The IDisposable interface really fucked with me. Have seem noticeable improvements when our resftdul apis are under heavy load though.
Did you just assume my emoji?
the bug has been confirmed https://bugzilla.xamarin.com/show_bug.cgi?id=60862
Oh God... I've been writing PS on the job for years and I never thought to use VS to write it. I have grown so fond of the ISE.
iirc Shrug is a combining character, that could be it. Discord is weird about the actual emoji to so I have to use their ones. 
Gonna have to look into OCR maybe this will get you started? https://code.msdn.microsoft.com/windowsapps/Uses-the-OCR-Library-to-2a9f5bf4
There's always pluralsight
You could probably prototype this in Matlab in 2-3 days.
Xamarin is Microsoft now. The MonoDevelop software that they provide is the base for Visual Studio for Mac/Xamarin Studio. 
You could also look at something like bson as well
My first instinct is that this is probably something the Windows API doesn't allow very much control over beyond the ugly and barebones solutions of using user32 or maybe DirectX to draw things directly on the screen. What little the API does offer should be exposed via whatever .NET UI framework you're using, WinForms or WPF. I'd be willing to bet that the Windows team wants to enforce a consistent user experience for the taskbar, and that they're not gonna let your app get its grubby little paws on something as essential to that experience as the taskbar's basic appearance. Not without a fight anyway. The taskbar is one of the things that makes Windows...Windows. If we were in *nix land doing a GTK app for something like XFCE or Gnome I *might* be able to help you out (even there it would probably be discouraged, for similar reasons), but the Windows API (probably) doesn't even expose functionality that would allow you to do this.
What is you just need the promise for later or you don't care about the result?
Or embed something like SimpleJson since it is a somewhat tiny single-file library
.Result at the end is basically identical to awaiting the task. Not sure how this is an anti-pattern
The .Result after the Task is essentially the same thing as awaiting. Uglier, and I'd never use it, but it works and is valid.
except in a UI thread where it will cause deadlocks
The docs make it sound like behaves like await. Oh never mind, I just checked again and it says it behaves like .wait not await. Guess that'll happen when you skim quick. So yea, blocks the thread. Quite different. 
You wouldn't. You would have a cart for the user, either in session state (e.g. cookies), or in a database table which would allow the cart to persist across sessions. SQL databases are a very important part of robust web applications so it would be a good idea to learn about SQL Server and the Entity Framework.
I've never tested it, but according to the documentation, calling .Result or .Wait on a Task causes the task to run **in the current thread** if it hasn't been scheduled yet. await doesn't do this. More details on the difference between Wait (called internally by Result) and await are [covered here](https://stackoverflow.com/a/13140963/15880).
Microsoft OCR is pretty good. I found it to be far better than Tesseract.
yea this article goes into the deadlock issue pretty well https://msdn.microsoft.com/en-us/magazine/mt238404.aspx?f=255&amp;MSPPError=-2147217396
Don't forget .ConfigureAwait(false). More than likely you should be using it. [ConfigureAwait Article](http://blog.stephencleary.com/2012/02/async-and-await.html#avoiding-context) 
The short answer is that it doesn't really matter. Anything you can do with MongoDB you can do with SQL Server and vice versa. The interesting question is which to use when. In general a SQL database is great when you have lots of highly structured data in a format with a relatively low rate of change to the underlying database. It is also good when each piece of data is interesting in isolation. A web store for example you might have a purchases table, it will refer to the buyer, to the product etc but just looking at the purchases themselves, amount, date, time etc presents useful data on its own. A NoSQL database like MongoDB is good when you have complex datastructures, with a higher rate of change where each piece of data is more useful in context than in isolation. Things like blogs, forums etc often lend themselves to a NoSQL solution. While you can do whatever you want using either if you have a MongoDB solution and you want to add extra complex fields to a document thats relatively straightforward whereas in SQL that might involve a lot of work figuring out the underlying schema and coming up with a good structure for it. In MongoDB you can just add the extra data to existing structures without needing to do all that work. Similarly if you want to do detailed analysis of one of the sub parts of a MongoDB document in aggregate across all documents that can be trickier than it would be in an SQL database where all that data is in a single table. In an SQL database you group similar data together, in a MongoDB database you group related data together. Both approaches have their advantages and disadvantages and the choice of which to use comes down to personal choice in a lot of cases. Take an example like a reddit post. I have no idea exactly how reddit is structured internally but you can see how in SQL you might have a User table, a Subreddit table, a Post table and a Comment table. Each subreddit has a bunch of posts, each post has a list of top level comments, each comment has a list of subcomments etc. This makes rendering the page for a post relatively hard work for the database, you find the Post, search for all its comments, for each of those then you need to find all their reply comments, and then again recursing down through the datastructure. This has performance implications since you need lots of queries to put it all together. Adding a new comment on the other hand is very fast, you just stick the new comment at the end of the Comments table. Searching for all comments with a specific word is also fast since all the comments are together in a single table. In a MongoDB system you would probably just have User, Subreddit and Post tables. Each post contains the post itself, and all the comments with each comment having the nested comments just stored in place right alongside it. This makes rendering the page very fast, you just query the post and you're done. Adding new comments might be slower since you have to update the entire Post entry in the database, doing a search for all comments on the site that contain a specific word might be slow since you need to go through all the Posts, then dig down through all the comments in each recursively to check for matches. Which is better? It depends on your usage to a large degree. Neither is better or worse, they are just different. It's certainly worth learning to use both and if you know SQL then learning MongoDB isn't going to be that hard and is probably worth doing anyway but if it is a very important project and you already know you can complete it sucessfully with SQL server I would probably stick with that for now. The free M101N course on Mongo University is pretty good to learn how to use MongoDB. It's probably worth working through that to figure out how it works anyway just so you know but it's not a case of which is better, more a case of which is better suited to your particular project and goals.
They do two completely different things. Mongo is for non relational data, where Sql Server really shines with relational
Oh man, do I hate triggers, luckily I've got some options for you. First, why I hate triggers (skip this if you don't care)... Triggers are one of the most undiscoverable things within a code base. It's not something that most developers generally look for, and it can be one of the most "magical" thing. You can scratch your head for hours because it's not something that's generally in the application, and even within the database itself it's not the most discoverable and it's easy to forget about them. Add to that, that triggers are usually a dependency for a process to get kicked off or notified, so it's one of the worst dependencies there are; one that's completely transparent. There's also the pure DB side of things where complex triggers can slow down your inserts, and if a trigger makes a modification/update to another table that has a trigger of it's own, you could potentially lead yourself down a deep deep rabbit hole. Long story short, don't do it. With one unfortunate exception (it's not a DB or environment I have much control over, it's very limited in scope, and literally a last resort), I have completely eliminated triggers from my repertoire and I haven't looked back. I sleep much more soundly, have saved hours of debugging time, and have prevented myself from pulling what little hair I have left (just kidding, I have nice, full, luscious locks). So now that I've gotten my trigger rant out of the way, on to the solutions for you. Note, you've given very little information about what's really going on, so these will be quite general. More details means more info about what solution might be best. Since you started with suggesting a DB solution in the form of a trigger, I'll give you another DB solution; [Row Versions](https://docs.microsoft.com/en-us/sql/t-sql/data-types/rowversion-transact-sql) (and yes I'm calling them row versions, not timestamps, but that's a rant for another day, although both are technically correct). Row Versions are a super useful tool, they are super transparent, take little to no effort to set up, and are quite easy to use once in place. To give the quick run down, as the name row version implies (not timestamp, which a super stupid name), the data type tracks the "version" of each row so when you insert or update anything in that row, the row version gets updated. There's also super cool behavior where row version increments itself, so with each insert or update to a given table you get a value that gets bigger and bigger. The thing about row version that I love the most is that you can add it to any table and it does not effect inserts or updates at all, which means you can add it to a table in a schema you don't control and it won't screw anything else up. So how do you use row version? Well you have some process that is triggered at some regular interval, whether its every minute, every hour, or every day, that process keeps track of the last row version it encountered, and queries the table for all of the records that have a row version greater than the one it uses for the query. BAM! now you've got all of your new orders or what have you since the last time your process ran. Now, I'll admit this works much better in append only type situations where you expect just inserts rather than updates, however, with a bit of ingenuity (i.e. keeping tabs of the last values of the rows you encounter) then you can handle update situations as well. I use this technique where I need either near real time or nightly updates to be pushed from disconnected systems. Near real time can be as short a time frame as a minute, or as long as an hour, it really depends on how many items you expect to be pushed within that timeframe and how quickly the dependent system needs that data. If you want to solve this in a way that doesn't rely on the database in any significant way, then you're going to have to handle this directly within your application some how some way. I'll say this now, you're getting towards more of an event driven architecture that's best facilitated by some sort of message oriented middleware that allows for these kinds of events to be consumed by multiple different decoupled components of your application without the generating portion of the application knowing or caring. If this sounds enticing, then hold on a bit. So the simple solution here is to add some sort of event to the class that is processing your orders, something like OnOrderSuccessfullyProcessed maybe. Depending on what you're doing in your app, you may have specific services that need to process that event wire themselves, some sort of configuration wire up the event, or maybe even some fun DI/IOC logic to wire up the events in the Composition Root (if you're using DI, don't do it anywhere else). This will work fine if you've got all of the things that need to know about your event contained the application process that's currently running. Depending on the nature of your app, the event that's being raised, and the kind of processing that's being done, this approach may work for you. In the long run though, I think if you're thinking about how your application might grow, this approach may be more of a bandaid and might limit you further down the road. Basically, it's not a catch all solution, and will run into some limitations quite quick. So a straight event falls short, where does that lead us? Potentially a number of different ways, but I'd advocate down the avenue of some sort of messaging framework. This is a broad topic in and of itself, and there are a number of different solutions, but I'll talk about it in the abstract for now. Basically, you're "core" app publishes the event that an order was successfully processed. Rather than an event handler, that "event" gets published as a message and gets sent to a messaging infrastructure. Once that message gets sent, the original part of the application may not even care about what's happening to it from there. At that point, the messaging infrastructure can forward that message along in a reliable way to any one who's told that messaging infrastructure that they care about that message. Those other components (apps, services, what have you) can then do with that message what they please. In the "successful orders" example, you might have a fulfillment service that goes and tells the warehouse to pack things up and ship them and an analytic service that takes that successful order and adds it to various KPIs that need to be updated. The point is that those are all completely disconnected now and can be iterated on and even scaled independently of the app or service that sent the message to begin with. Those are two different ends of the spectrum on the application side, and there are some things you can do in the middle based on various constraints of your solution. One thing that I do like in this situation are web hooks which are useful way to "broadcast" your event to external sources you don't control who may be interested. It most likely won't be applicable in your situation, but since I always ask this of vendors and they never seem to have it on their radar, it might be a beneficial feature to think about. Hope that helps and gets some ideas churning. Again, more details you can give about your problem space the more specific recommendations I could make. For now it's a general and coarse lay of the landscape.
Do you control the source code of the web store? If so, I would avoid doing this in a trigger and favor something like a queue based event model. If not, and you have to use a trigger, write the event to a table and treat that table as an event queue. Your worker can be anything. All it has to do is read messages out of the table and process them. If you want to have multiple workers, I'd suggest looking into a real queue model but keep the processing async from the order write to avoid performance issues.
Might want to look into something like RestSharp
I wasn't aware of this until now. Thank you!
Wow! Thanks for taking the time to explain all of this to me. Seriously. I'm going to read your comment for a second time now.
Using triggers for business rules is an antipattern. The only reasonable use for them is to record change info in an audit table (and they're easier to use for this than the Change Data Capture feature). So for this, we're left with application code. You don't want it to be in a UI - you want it to be in service code, or perhaps an enterprise service bus. 
Indeed. I think the blog author was doing this to have a quick-and-dirty synchronous example. If memory serves, there's no `.Get` (synchronous) for `HttpClient`. But if you're going to talk about poor implementations of `HttpClient`, it's probably best not to use a synchronous example at all...
Is there any reason to do this yourself in code? That is, what advantage would this have over using IIS' configurable periodic app pool recycling? I guess if you had more than one service on the same pool, this would be useful...
The singleton pattern is a fancy way of grudgingly admitting there are a handful of valid use cases for a global object.
&gt; Any time you see an object implement IDisposable your first instinct is to wrap it in a using statement That's why I always thought DBContext needed to be disposed until I read this (note the inset letter from Diego Vega, Senior SDE Lead on EF): http://blog.jongallant.com/2012/10/do-i-have-to-call-dispose-on-dbcontext/
true, what i am saying is that Xamarin changed so much it became more like VS than MD that MD need a lot of work to do the same things
It bugs me that HttpClient doesn't have synchronous methods that return HttpResponseMessages. I see a lot of people go overboard with asynchronous calls and await when in situations where it provides zero additional benefit. Using await on an async method where it is called is for all intents and purposes the same as creating a new thread, stopping execution of the current thread until signaled, and then resuming the current thread when the new thread finishes. In those cases it provides zero benefit and consumes more resources, yet I see it used that way extensively.
Rate of updates are measured in **seconds**? The whole purpose of TryUpdate is to tell you that somebody else modified the value - but that is not your *need*. A clear-cut case of using a wrong tool IMO. Standard lock is better. Just one for all the items, with a `lock` statement. I think, there is no reason to even consider the ConcurrentXXX stuff until your update rate falls under a milliseconds, and probably not even then.
Well that restarts the whole app, obviously. Aborted requests, having to deal with the slow start up, etc. And that assumes you have your cache and session out of proc. But a huge issue to me is that you are relying on a setting IT might manage to keep your app running normally. Makes deploying to a new server or scaling out tricky. That setting in IIS is there to keep old classic ASP sites with memory leaks alive. Nothing more. I think if you are setting it then you are putting a band-aid on a bullet hole.
&gt; The whole purpose of TryUpdate is to tell you that somebody else modified the value - but that is not your need. A clear-cut case of using a wrong tool IMO. yeah, I ended up with the same conclusion &gt; I think, there is no reason to even consider the ConcurrentXXX stuff until your update rate falls under a milliseconds, and probably not even then. I don't really agree with that. I think if your requirements let you pull it off, ie, you don't need checks, you don't need to make copies, etc, you could be better off with a concurrentWtv. IE, if it's simple to use it and avoid your own locks, then use it. The problem I have with locks is that they can be abused with time. Very often I've looked at code which was using one sync root for protecting one resource and then another resource gets added and yet the same sync root gets reused. Then as the program grows in complexity noone knows what they are protecting any more and there's just locks in every public method, "just to be safe". So I do spend a little time when designing a new class looking to see if a lockless approach exists, and comment the hell out of why I'm using that approach and what shared resource is which we need to worry about. I think in this case I just don't really have a choice. Maybe I am overengineering, but I'm giving this approach a chance for now and seeing where it takes me. 
The biggest things that are missing IMO are extension methods, lambda expressions, async support and the `var` keyword (and of course LINQ, but you mentioned it already).
&gt; It bugs me that HttpClient doesn't have synchronous methods that return HttpResponseMessages. That's because it is true async under the covers and a synchronous method would be a lie. &gt; Using await on an async method where it is called is for all intents and purposes the same as creating a new thread No, it almost never is. A traditional Task is off a threadpool thread (which has significant ramifications) and true async methods calling out to native async functionality use zero extra threads. HttpClient will use zero extra threads if your networking hardware is actually implemented in hardware and the drivers aren't stupid.
And in a class library, where it *may* cause hard or soft deadlocks if used in an ASP.NET context. Never mix async/await and .Result or .Wait(). It's pure laziness.
Are there any multithreading issues with using it like this?
Triggers are good for cya audits that your DBA owns. In my opinion it is too deep in the data storage that application developers should not be involved with. Because they are not easily seen and can cause lots of problems, I’d leave it to a DBA to own the triggers. 
Just use `Microsoft.TestApi` instead of pinvokes like [here](https://stackoverflow.com/questions/34212543/microsoft-automation-ui-mouse-click-on-a-given-position). In the designer, double-click on the button to autogenerate a handler for the button's click event. Assuming your button is named button1, it will look like this: private void button1_Click(object sender, EventArgs e) { var pt = new Point(100, 200); //use whatever coords you have in mind MouseClick(pt, MouseButton.Left); } private void MouseClick(Point p, MouseButton button) { Mouse.MoveTo(p); Mouse.Click(button); } With your code, the part you are missing is the handler for the button's click event. The handler method will call the `LeftMouseClick` method you defined in your code.
...whaaaaa? Given the extremely foggy requirements here, your first thought is *Matlab?* Now I'm curious.
What possible reason can there be to still use C# 2.0 in this day and age?
Look for something you like and program it. Do you like sports? Make an application that tracks sports events where you enter results of your favorite teams. Make statistics over them etc. It is a great thing you can do for every level of developing skills. There is just way too much to say "you gotta do this to be good". Just do something. Practice!
It seems like an ok way to generate unique guids, but you've set off a few warning bells for me. What are you going to be doing with that data? What kind of database are you going to store it in? Reason I'm asking is that we had to fix some serious scalability issues at work due to index fragmentation which occurred in part due to using guids in a sql database as an indexed column. A few articles detailing issues that you might hit if that's the route you're going. http://www.madeiradata.com/indexes-on-guids-not-only-fragmentation/ http://www.itprotoday.com/microsoft-sql-server/clustered-indexes-based-upon-guids Basically, if you are going to want to search for this Person, don't use the Guid, use some other set of identifiers if you can. 
I am also likely going to use json to store data in a file system. Nothing SQL related.
The lifetime of an httpclient is intended to be the lifetime of the application scope. You don't need to dispose it directly or indirectly ever, and you mostly shouldn't.
This got me wondering, and [apparently it is similar (if not identical) to clearing the `SynchronizationContext` and restoring it at the end of the method](https://stackoverflow.com/questions/39447571/async-library-best-practice-configureawaitfalse-vs-setting-the-synchronizati).
its quite alright, I posted it to let people know there were other comments to look at
I have some really nice bits and bobs that you might like for it. Firstly, the PowerShell extension is the tits, but also check these: **'Run script in External PowerShell Window' Debug Option:** { "type": "PowerShell", "request": "launch", "name": "Run in External PowerShell Window", "script": "Start-Process", "args": ["PowerShell.exe -Argumentlist '-NoExit -Executionpolicy Bypass -File ${File}'"], "cwd": "${File}" }, **General Settings:** { "terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "powershell.enableProfileLoading": true, "powershell.scriptAnalysis.enable": true, "powershell.startAutomatically": true, "powershell.integratedConsole.focusConsoleOnExecute": false, "powershell.codeFormatting.openBraceOnSameLine": false, "editor.formatOnType": true, "editor.formatOnPaste": true, "editor.folding": true, "editor.acceptSuggestionOnEnter": "off", "window.menuBarVisibility": "toggle", "workbench.colorTheme": "Visual Studio Dark", "files.defaultLanguage": "powershell" } **Task to keybind creating new script with extension:** { "label": "Create New Script", "type": "shell", "command": "powershell.exe", "args": ["(New-Item -Path $('UnsavedScripts\\'+(-join((65..90)+(97..122)| Get-Random -Count 10| %{[char]$_}))+'.ps1'))"], "problemMatcher": [], "presentation":{ "reveal": "never", "echo": false } } **The Keybind itself (you can use any keys):** { "key": "ctrl+n", "command": "workbench.action.tasks.runTask", "args": "Create New Script" }, Only thing to note is that the task to create a new PowerShell file will wanted to create it within a folder called 'UnsavedScripts' which needs to be within your WorkFolder. 
&gt; No, it almost never is. Not true. At low level asynchronous calls interrupts/signaling is used, but the further you get away from the those calls and the "broader" your asynchronous "tree" becomes the more context switches are involved, involving threads that **do** come from the threadpool. If you're many layers deep into an async call hierarchy and having all async awaits being performed at the device driver level you're most likely a magician. Yet how many times do we see async calls going far into the depths of the call stack? Many times. It was implicitly suggested here that the author should have used var result = await Client.GetAsync("http://aspnetmonsters.com"); If he had, his code would have been more performant right? Wrong. Unless he's using yield or awaiting on many async calls **after** his loops, the await would have been synchronous. I think far too many people believe async/await to be magic, and go way too overboard in its use. Used correctly it's an awesome tool to have in the tool bag of any C# programmer, but it's rarely used correctly... and when used incorrectly it can have a significant effect on performance and readability.
&gt; Not true. At low level asynchronous calls interrupts/signaling is used, but the further you get away from the those calls and the "broader" your asynchronous "tree" becomes the more context switches are involved, involving threads that do come from the threadpool. The definitive answer on this topic is: [There is no thread](https://blog.stephencleary.com/2013/11/there-is-no-thread.html)
No there are not. a HttpClient instance is thread-safe, multiple threads can put requests through it without causing issues.
&gt; that would throw an exception if it's deleted though, right? No. It always sets the value.
That's at the low level usage. I.E.: The example in that article is async done right. I'm referring to the unfortunately common practice of intertwining and nesting many async/await usages with synchronous code, in a manner that increases context switching with little to no increased parallism. I've seen it a lot while consulting, and even internally at Microsoft. More often than not when I come across rampant async use across a project, it's done improperly in a way that negatively impacts performance.
LINQ is basically extension methods + lambda expressions + var keyword + anonymous types (which suck, IMO).
And also generics. LINQ couldn't be possible (or would be much clunkier) without them.
I don't think i've ever read about that phenomenon. An you link to any examples? Maybe you should write something. It's unclear to me how many is 'many' in your example.
&gt; I'm referring to the unfortunately common practice of intertwining and nesting many async/await usages with synchronous code yes, it's all too easy to do async badly, with poor results for throughput and deadlocks. That does not mean though that "async ... involves threads that do come from the threadpool". bad code does. Improve the code.
like this; public class FunctionLibrary{ public bool IsThisGood(string value){ return value=="good"; } } and in your form public partial class MainForm:form{ FunctionLibrary _functionLibrary=new FunctionLibrary(); public MainForm(){ } private void checkMyTextBtn_Click( object sender, EventArgs e ) { if(_functionLibrary.IsThisGood(myTextBox.text)){ MessageBox.Show("its good"); }else{ MessageBox.Show("its bad"); } } } 
I actually wrote an article and a solution on this issue a while back when the original one was first posted.... http://www.nimaara.com/2016/11/01/beware-of-the-net-httpclient/
As I said, the reason is to take an assessment.
Same, the biggest thing I am displeased about is how the fuck is this somehow _our_ fault for "using it wrong"? 
from this example, you'd create an [Interface](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/) for your library of methods, then you can create a [reference to the interface](https://www.codeproject.com/Articles/702246/Program-to-Interface-not-Implementation-Beginners), rather than to the concrete class. You then can inject the instance of the interface, rather than creating the concrete class. This is called [inheritance](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance) and [dependency injection](https://csharphardcoreprogramming.wordpress.com/2014/03/26/inversion-of-control-and-dependency-injection-advanced-part-1-programming-patterns/). Welcome to c#! :)
If this is for a job interview, steer clear! If they're still using C# 2.0 in their interviews, they're probably still using it in some code, which means you'll be working on some legacy mess from 10 years ago which nobody is brave enough to update.
My bet is he already gave up :p
A static helper class will do the job as well
Lambdas are just sugar for delegate syntax. The only functional difference is that a lambda is, by default, an expression, instead of a function. Aside from generating expression trees, most anything you can do with one can be done with the other. You'll also be missing var, extension methods, null coalescing and conditional operators, auto properties, expression-bodied members, and more. Do some googling for "C# *n*.0 new features" for n = 3, 4, 5, 6 to see what each version of the language introduced. My biggest concern would be that C# 2.0 has been less-than-current for a decade or more. It's not reasonable to still be doing development in C# 2.0 *the language*, as most of the language features are backwards compatible; and there's not a lot of good reasons to be bound to .NET 2.0 *the platform*. Making it part of their coding assessment probably indicates that their system is more than a bit behind the times.
C# had generics in C# 2.0. It did not, however, have type inference, IIRC.
I can't comment on the correct usage of OpenGL, but from the code you've provided, it looks like you need to provide your source as an array, not as a single string: string source = getsource (... ) string[] sources = new string[]{source}; Gl.glShaderSource (shader, count, ref sources, ref value);
or kids (and others) that want to make games (in unity) it appears as well.
First, you function definition is wrong. It should be either (int, int, string[], int*) or (int, int, string[], int[]) To pass the shader source you can create a new string array with length 1 and put your shader source at index 0 of the array. As the last parameter you can pass null.
In fact it's probably an old version of VS to be used with Windows CE, because I can't really imagine another reason. Either way, run.
In MainWindow.xaml, set WindowState="Maximized"
I'm relatively new to asp.net core, but my understanding is you can inject it into your controller's constructor: `public TokenController(IConfiguration configuration) 
You need to rely on dependency injection for this - it's not always clear at first, but you should do some googling and reading on it. I highly suggest reading this: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration?tabs=basicconfiguration I will break down the simplest example I can to hopefully get you started. Assuming your appsettings.json is like this: { "AppSettings": { "Audience": "reddit" } } You can make a simple class like this: public class MyAppSettings { public string Audience { get; set; } } Now in your startup: public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddSingleton(Configuration.GetSection("AppSettings").Get&lt;MyAppSettings&gt;()); // more stuff } Now it's available to be injected into your controller: private readonly MyAppSettings _appSettings; public TokenController(MyAppSettings appSettings) { _appSettings = appSettings; } So now in that controller you can access it simply with: _appSettings.Audience There are multiple ways to do this, but it is the direction Core wants us to go, and is actually simpler and more centralized when it comes down to it. 
Oh they will, really soon, when flash is not accepted anymore. I recently saw this popup, install flash hd and was laughing, thinking who in the world even has flash installed these days?
Are they really asking for C# version 2.0 and not .NET Core 2.0? If it's for C# 2.0, I wouldn't waste my time unless you are desperate for a job.
The "proper" way is to set up a pooled factory that keeps a very limited number of them around and hands them out to various consumers, and disposes them after a period of time to prevent things like DNS ttl issues, memory issues, and more.
https://docs.microsoft.com/en-us/visualstudio/debugger/debugger-basics
For source code, leave a blank line above and below the code, and indent each line by at least four spaces: DateTime dt = DateTime.Now; string s = dt.ToString("HHmmss"); if (dt.ToString("HHmmss") == "16:36:00") { Close(); } I don't think your format string will ever include colons, so your test will always fail. And besides, converting a date/time to a string is a really cumbersome way of checking the time. Close your program if your current time is greater than your target time: if (DateTime.Now &gt; new DateTime(DateTime.Now.Day, DateTime.Now.Month, DateTime.Now.Year, 16, 36, 0) Close(); } 
Can you use it like that? I think I tried to use it that way before and the MyAppSettings dependency would always be null. I had to wrap it in the IOptions interface, `IOptions&lt;MyAppSettings&gt;`.
I've also just asked a senior dev and this is indeed the correct solution that works. Adding : public TokenController(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } to my TokenController makes me able to get the strings via Configuration. etc... I was unsure about where "IConfiguration configuration" comes from, but apparently (we guess) is that .NET Core 2.0 does these things behind the screen, same way I don't know how it gets set in the Startup Constructor. I didn't know it was this easy tbh.
Two suggestions; First, you shouldn't format the DateTime as a string type and then do string comparison. Really, what you want to do is compare 2 DateTime objects (Now and 4PM). Leave them as DateTime to get all the right methods for comparing two DateTimes. Second, your 'if' condition is relying on the fact that the DateTime.Now being an *exact* time, which is going to be extremely unlikely. In reality its probably going to be 4PM plus a few milliseconds. Once you get rid of the string comparison stuff, you should be able to more effectively compare two DateTimes. Use the &gt;= or &lt;= to allow some wiggle room in your 'if' condition.
I have it working like this in .net core 2.0
Step 14 in that tutorial is where the event handler is added to the button. The next few steps show the method to add the functionality you are asking about. Instead of SQLConnection you're using OleDbConnection, which is very similar. Example: Instead of SqlCommand you would use OleDbCommand: https://msdn.microsoft.com/en-us/library/system.data.oledb.oledbcommand(v=vs.110).aspx However, this is a really old tutorial using WebForms, which is outdated. You should look more into the MVC side of things. This type of thing is actually much simpler, once you are used to doing things the MVC way.
It's C# 2.0. The company isn't specifically asking for it, but they perform interviews using [CoderPad](https://coderpad.io), and the only version of C# that CoderPad offers is C# 2.0. 
Thanks for the detailed reply. Another major annoyance I'm finding in my preparation is the lack of object/collection initializers. I should point out that they didn't ask me to take the assessment using C# 2.0. It's just that that's the only version of C# available on [CoderPad](https://coderpad.io), which is the site they use to conduct their interviews. Unfortunately, I'm not really proficient the other languages available except JavaScript, but I want to use an object oriented language (I bemoan the lack of Typescript, but I guess that's to be expected).
Oh, you should have mentioned that in the post. I assume they are doing this over the phone which is why they use such a tool. I'd be very surprised if they asked you to do anything that you'd need more than conditionals, loops, operators, etc.; just the basic constructs of most programming languages. They will probably just ask you to implement fizzbuzz to make sure you aren't a total fraud. 
No idea what language they use in production, but I should point out that they didn't ask me to take the assessment using C# 2.0. It's just that that's the only version of C# available on [CoderPad](https://coderpad.io), which is the site they use to conduct their interviews.
And something better than Tao?
Have you thought about using a scheduled task that is set to execute at 4pm? You could separate whatever functionality that you want and have something be executed at 4pm that would then run that part of your program. Seems a whole lot more elegant than having a loop that constantly checks for a specific time 
You could use Quartz.net
True. I am too lazy to do that. On the other hand maybe the .NET team can fix it by implementing this internally in HttpClient or provide a new class that wraps it with this functionality.
That says '.Net Core 2.0'. I don't *think* that's the same as C# 2.0 *or* the .NET Framework 2.0. The jargon on this gets confusing; there's .NET Core, .NET Standard, and the .NET Framework. As I understand it (which may not be correct, because I live in Framework land and don't really track the Core/Standard stuff, personally): * The .NET Framework is the oldest of the three, and is Windows-specific. It is currently at version 4.7-ish. * .NET Core is a cross-platform version of the .NET Framework that can be used on Linux, Mac, Windows, etc. It's currently at version 2.0. * .NET Standard is the parts of these two APIs that overlaps--anything in .NET Standard can be used in both .NET Core and stuff written against the .NET Framework. Long-term, I think this is supposed to cover everything except ASP.NET and the Windows UI APIs, but could be wrong. All of these are distinct from C#-the-language, which has released up to version 7.1 or 7.2. It sounds like you may be in good shape for anything up to C# 7.
Also, it affects what data model you use. For example if you want to use EF then you probably want to avoid mongo.
 To everybody, the OP is mistaken. From the website: `.NET Core 2.0 ` it's running .NET Core 2.0, NOT C# 2.0: https://coderpad.io/languages#csharp You are not missing any features, in fact you're not the latest and greatest technology.
While it's true that you should not `await` unnecessarily, (e.g. just return the `Task&lt;foo&gt;` if you're not actually doing anything with the result and you don't have any other `await` calls in the function), `async/await` will increase parallelism in the overall application in something like a web service. It won't increase performance of a single, synchronous path through the code, but it will free up parallelism at the application host level. ...that is, if you don't do anything stupid, like `await Task.Run(() =&gt; LongRunningSynchronousThing)`. I saw that in some code recently. WTF?
This is the right answer. Just to add to it I would suggest adding this functionality as an async action and have a loop that checks and calls Thread.Sleep(someInterval) if it's before 4pm. Once it's after 4pm, perform your event.
I don't expect to be asked anything language specific, but I usually try to use the most appropriate tool at my disposal to solve a problem. If I am trying to use a tool that doesn't exist in the version of the language that I'm using, I might look stupid or waste time, and this would obviously have a negative effect on my overall chance of success.
 The issue is you don't want json. It doesn't matter the size of the library, it's the data you're sending across.
Holy shit, I'm an idiot.
 Haha, just a simple miss-read. Even though you don't know they're using .net core 2.0, it's definitely better than them taking an interview on a place that uses C# 2.0 :P
Good stuff.
Depending on what you really need to do, the response from /u/naspinski is probably the better way to do it.
Thanks for the explanation! While I'm embarrassed about the misunderstanding, I'm breathing a sigh of relief right now.
Pretty much all C# OpenGL bindings should be better than the really old Tao nowadays. If I had to pick I one I would choose https://github.com/luca-piccioni/OpenGL.Net It's not as bloated as OpenTK and the source code is much simpler.
&gt; doesn't rely on magic strings (more testable) Great point. I like this approach. Probably going to steal it for our current project. 
Personally at work we use triggers, but we only get like 10 new entries per day for a few specific applications each We store this data into history tables However, this history data is rarely useful... Design decisions of long before me in 2005ish
dt.ToString("HHmmss") == "160000")
My point is it's very unlikely they will ask you to do something in C# 2.0 that would be done differently in c# 6.0. Phone screens are for weeding out frauds who can't do anything in either version, and you'd be surprised at how many of those people there are. If their metric for success is how well you know the difference in features between two versions of a language then you're probably better off not having success.
Haha, that changes the question entirely!! Enjoy your modern up-to-date C# :)
I know that some developers still maintain and develop VB.NET projects alongside C#'s one, so it might be useful.
This code is error prone for so many reasons! 1) You're declaring the variable "s", and never using it (prefering to call dt.ToString() twice). 2) Your format string doesn't include any colons, but you're testing for them, so your condition will never be true. 3) Even if the bug above was fixed, your condition will only ever be true for 1 second! I hope your timer event is running super regularly and you don't ever have any blocking user input or other busy tasks on your system, or you might miss it! 4) Running code repeatedly multiple times a second for hours in order to catch a condition that's only true for a moment is a fabulous waste of CPU and resources!
I mean do new people even read sidebars anymore? I feel like we need an internet etiquette class in school nowadays. Read the stickies (forums) or read the sidebar (reddit) not trying to be mean...
Trying to go by memorera, sittning in the toilet , but i think there is a configurationbuilder in efcore. 
&gt; Thread.Sleep(someInterval) or await Task.Delay(someInterval)
read it - wanted personal recommendations. Like Sutso mentioned with finding an interest and programing around that interest - things like that. video tutorials and courses work for learning, but I find they aren't the greatest( in my opinion) for hands on learning. 
No worries, like the other user said - find an interest and start making something for that interest. Want to make a GUI for a game to customize the .ini file for users? make one of those (one of my earliest projects!) Like baseball? Make a simple ASP.MVC web app to display teams and their scores Like League of Legends? Make a simple web app using the Riot API to display free champions of the week! Dont try to create a monolithic program you can also do project euler to learn more maths https://projecteuler.net/
Doing a slight dishonor to your username there /u/AlwaysAppropriate ...
Like ozcode, but free?
I'm not sure if that's what you want, but maybe [this blog post](https://tyrrrz.me/Blog/Synced-timer) will guide you in the right direction.
 DateTime has the property .Hour
ASP.net core docs suggest a slightly different approach: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration?tabs=basicconfiguration
in file explorer, right click folder that has your .sln file and code in it, then Send To -&gt; Compressed (zipped) Folder 
So I suppose you use C# or any other .NET language?
This is probably better
https://stackoverflow.com/questions/11779143/how-do-i-run-a-python-script-from-c Two options: 1) start new python process 2) use a python API wrapper like IronPython
Have a look at SqlDependency. https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/query-notifications-in-sql-server IIRC, It takes a bit of setting up on the SQL end of things, but is a really nice elegant solution to monitor changes to a database.
:P Or am I? Maybe it's totally appropriate... Yeah you're right.... ;)
Has you thinking about TFS?
You can't await things in Main()
I was thinking could it be an issue with the postback property when we are using the buttons in the gridview? The only thing is that since the buttons are not actually buttons, and instead listed as a buttonfield, there is no postback property to change
It will be hard and you will want to give up. Many times. Don't.. It takes time to process this knowledge.. whats now magic too you, in three months, it will be simple. Ofc unless you give up. I had many friends that wanted to go start programming and they all gave up too easily. Other than that.. try to build something you find interesting as others adviced.. but make the most *basic* stuff. If you want to make calculator, just make +, -, *, / simple operations. And go to next project. If you try scientific calculator you will prob give up. gl
That code project article is a bit crap. Inadvisable use of term attribute (in a c# context) and a age function that returns the same results before and after my birthday on a given year..
Once you understand the concept of variables and how to manipulate them, you should look into the concept of classes, if you're interested in OOP (object oriented programming). There are some excellent free classes on Microsoft Virtual Academy. Just remember, nothing beats taking what you learn from there and putting it to practice! Good luck!
If you don't mind, how I can install it? I would normally compile it as reference/dll and then add to project. This one seems hard and to many files for me to understand how to use them. Any help would be apreciated
Can your C# app access command line stuff or windows powershell?
Read up on the supervisor section of the documentation [here](http://getakka.net/articles/concepts/supervision.html). Failure of an actor should be handled by it's parent
Compared to what? 
 In C# 7.1, you 100% can, and even before that there were plenty of libraries to allow you to do this. `public static async Task Main() { }` await as much as you want.
the short answer in this thread is boring and long. Real talk: When you use csharp you use ado and Entity framework and you never care about what db you use. 
Look into ProcessStartInfo - https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo(v=vs.110).aspx
Without some examples of the code you're not going to find an answer 
Gmail may not allow you to send this zip file however so you might want to attach it via google drive... see **step 2** of this guide https://business.tutsplus.com/tutorials/how-to-email-large-files-as-gmail-attachments--cms-28117
just rename it like my-homework-1.zip.asdf goes right on thru
I accidentally linked the wrong project, sorry (it's updated now). To use this one you just need to add the OpenGL folder to your project or open OpenGL.csproj and compile it into a .dll.
Depends on the level of understanding the end user has. Never trust the end user.
then give instructions? lol if anything someone cant rename an extension... even as a beginner programmer, gonna have a bad time.
Lol, instructions. Don't count on people to read instructions. The most often don't, try open the file, they can't. They claim its broken and doesn't work. Don't make users think, because they probably won't. Besides submission here might be to a lecturer and they might download an entire classes work and look at them later without instructions. I don't believe its worth the risk when there is an easy solution which does not require such risk. However if you know your end user is capable and can actually follow instruction then your solutions might work, unless it's flagged by a virus scanner.
lol ok. basic problem solving skills would solve any of these potentials. 
There are some new resource pooling capabilities in .NET Core https://github.com/dotnet/corefx/issues/4547
You must not have much experience with generic end users. Taking that extra bit of effort at the start can save many times the effort and stress dealing with those potential events in the future. Don't blame the end user if you discarded a solution to avoid a problem just to shave a few seconds of an already easy task. Even knowledgeable users can be distracted and not read instructions. I simple can't understand how you don't already know this as a developer.
you are giving code to someone that should be technical not grandma and grandpa
&gt; should be The point is you don't *know*. Why over complicate things for them?
also i have LOTS of experience with people that arent good with tech or just noobs/young such as making mods for several games (Skyrim, Fo3, FNV, Fo4), with pretty detailed instructions. but if i gave another mod maker these instructions, he'd be like "fuck reading that i know what im doing" 
Removed: Rule 4, duplicate.
Removed: Rule 4, duplicate.
I see you can't see my point. Have an nice day.
Removed: Rule 3, Rule 4. You can create a [deployment package](https://stackoverflow.com/questions/5790184/asp-net-mvc-deployment-in-a-form-of-distribution-package) that will setup all the IIS settings for the website to run.
Removed: Rule 4. You'll need to include relevant code or possibly change your page design to work with a collection of objects, not just one.
Got to keep the room temperature up in winter some way...
Removed: Rule 4.
The upper Echelon
The upper Echelon
I do see it, but nice try.
I guess last time I tried was before 7.1. Thanks for the heads up!
Thanks. According to the documentation I should be using OneForOneStrategy which is also the default. But after a child throws an exception i don't see it restart itself with the message. Do i need to access dinner hook on the parent and spawn a new child with message?
I'm not super proficient in Akka. But you should check out the [fault tollerance article](http://getakka.net/articles/actors/fault-tolerance.html) which talks about setting up the supervisor to handle exceptions and such and [this link](https://getakka.net/articles/actors/receive-actor-api.html#restart-hooks) shows the Pre/Post restart events. This [blog post](http://craftsmanatwork.guru/akka-net-restart-an-actor-progammatically/) talks about restarting an actor as well. In general you should remember, that a actor cannot change it's state due to external actions, only due to a "response" of a incomming message
With OneForOneStrategy, an actor will restart, but it will not attempt to replay the message. Messages delivery is guaranteed at most once. If you want to retry, use a plain try/catch and `Self.Tell(message);`. If you want to delay the retry, use the system scheduler. 
That sounds like it will do. But can i catch the message and the exception on the parent actor and replay the message with a new actor?
Asp.net core implements a pattern known as Dependency Injection. Startup.cs is where you inject the dependencies.
(recycling an old joke) When you use EF to solve a problem, now you have two problems. 
It's where you register services for your servicelocator. Dependency injection is passing implementational dependencies through constructor effectively prohibiting a service to be launched without it's dependencies being there. Please be careful with what you call dependency injection. There's already enough confusion surrounding that topic.
Came here looking for LinqPad. Still waiting to pull the trigger at home.
I don't see any code or logic asking the computer to check for a match/not include it if its the same 'Terr' You very specifically tell it to loop through and StreamWrite your modified strings in the If statement. I'd suggest learning how to use break points, and how to step through code. Two required skills to properly debug your code. For this particular issue, you can add a counter. When it finds a 'Terr', add one to the counter. Then before continuing check: if counter = Terr # Then skip that Streamwrite of the Heading 1
To your point, there is a difference between dependency injection and other dependency inversion techniques. I believe that you are technically correct, which is the best kind of correctness.
I usually password protect my zips with and include the password in the email ;) ... Not sure if pro tip or needless hassle
Here's my stab at a better way of doing things. using System; using System.Collections.Concurrent; using System.Collections.Generic; using System.Net.Http; using System.Threading.Tasks; using System.Linq; using System.Timers; namespace PooledHttpClient { public sealed class HttpClientPooledFactory : IDisposable { public static async void DelegateActionUponHttpClient(Action&lt;HttpClient&gt; action) { await HttpClientPooledFactory.Singleton.delegateActionUponHttpClient(action); } private static HttpClientPooledFactory singleton; private static HttpClientPooledFactory Singleton { get { if(singleton == null) { singleton = new HttpClientPooledFactory(10000); } return singleton; } } private HttpClientPooledFactory(int garbageCollectionInterval) { GarbageCollectionTimer = new Timer(); GarbageCollectionTimer.Elapsed += (sender, e) =&gt; clients.AsParallel().ForAll(client =&gt; client.Dispose()); GarbageCollectionTimer.Interval = garbageCollectionInterval; GarbageCollectionTimer.Start(); } private ConcurrentQueue&lt;HttpClient&gt; clients = new ConcurrentQueue&lt;HttpClient&gt;(); private Timer GarbageCollectionTimer { get; set; } private async Task delegateActionUponHttpClient(Action&lt;HttpClient&gt; action) { await Task.Run(() =&gt; action(HttpClient)); clients.Enqueue(HttpClient); } private HttpClient HttpClient { get { if (clients.TryDequeue(out HttpClient httpClient)) { return httpClient; } else { return new HttpClient(); } } } private bool disposedValue = false; // To detect redundant calls void Dispose(bool disposing) { if (!disposedValue) { if (disposing) { this.GarbageCollectionTimer.Stop(); this.GarbageCollectionTimer.Dispose(); } this.clients = null; disposedValue = true; } } public void Dispose() { Dispose(true); } } } 
Long time ago I saw a fork of ninjaturtle it's called ninjaturtlemutation but I don't know if it's still maintain or even if it work with 4.5.2 projects
I think you would be best using a scheduled task which opens a console application you have written. https://technet.microsoft.com/en-us/library/cc748993(v=ws.11).aspx#BKMK_winui If you must do it in code write a Windows service using Quartz.Net to schedule your task to run at the desired time. 
You need to change the != (is not equal to) to a == (is equal to) Also, you should try and get in the habit of naming your components more descriptive names (I.e change your labels name to lblPingStatus or something similar)
I've changed != to == however it still doesn't work... It looks like the timer.tick doesn't work or something because it appears as of nothing happens
Debbugging time. Try to add a breakpoint to the first line in the timer1_Tick method (Ping ping = new Ping(), run the program again and see if the breakpoint is hit.
I am a little rusty with C# and WinForms(I mostly use another language 80% of the time), so forgive my wording, but try removing the event handler line and double click on the timer component in the designer, this should move that bit to the designer code. (It’s a little late and as I’ve already said I am a bit of a dullard, so I apologise for the wording)
It did exist, StyleCop was supported as a library that could be called in &lt;BeforeBuild&gt; and fail build outside of Visual Studio, but it has no support for C# 7, so it is not very perspective to use. I join author for C# 7 compatible version. 
I have fixed the issue already; I didn't configure the Form2_Load correctly.. 
I have fixed the issue already; I didn't configure the Form2_Load correctly.. Thank you for your comment though, it should have been == in my case indeed.
That is great to hear! Is [this](https://github.com/StyleCop/StyleCop) where the work is done?
https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.form.formclosed?view=netframework-4.7 https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events
~~Yeah, the question was more why anyone would ever do such an outdated assessment today. It raises some serious questions about the quality-~~ Glad to hear it was just a misunderstanding.
It still exists. See my reply to OP.
No, that is the legacy version, it even has a link at the bottom of the README to the version you need to use now. It installs as a nuget package meaning anyone who opens your projects also gets linting. https://github.com/DotNetAnalyzers/StyleCopAnalyzers I use it in all my projects.
By the way, dependency injection is not a C# concept. It can be used in C# and in a lot of other languages.
Yeah but generics predate LINQ, while extension methods, lambdas and anonymous types were basically made to make something like LINQ possible. (Not sure with 'var'.)
&gt; Lambdas are just sugar for delegate syntax. The only functional difference is that a lambda is, by default, an expression, instead of a function. That's not strictly true. Lambdas are optimized in different ways than inline-delegates, which means that, for instance, the delegate object is cached as much as possible. That's why something.Where(x =&gt; SomeMethod(x)); is better optimized than the η-contracted form: something.Where(SomeMethod); since the latter will create the delegate every time. In practice this might not matter much, of course, but they do those optimizations for a reason.
Dependency Injection is a OOP concept. As for interfaces and generics i see your issue. python is not statically typed which makes formal interface contracts unnecessary. The concept you are most required to get before you "get" C# is static typing. Java and C# really profit from the safety static/strong typing they are based on. Juggling type errors is mostly gone, because the compiler takes care of it. Tooling is superior because types can be read at develop time. If you really dig into how static types work, the programming concepts are quite similar to python just that its statically typed in C#. I would suggest reading about how pythons dynamic typing work, because you know the language, and its most likely easier to see things in comparison when trying to get used to the static typing.
This is true, and I get the concept that you can pass a database connection object to a method. Along with de-coupling the database from the logic, my understanding is that this is so that the code can be tested more easily by passing in a mock database object.
The old way you'll usually load some values from web.config and with some ifelse statements and nasty string manipulations, you would glue how your application starts up and to tell it how to use certain depencies. Different companies/dev use different teqniques and they all have variable quality and flexibility. So MS decided to bake the concept into the new framework, that is, aspnet core needs a class called startup that controls how the applications starts up and which parts to glue together. I'd say all-in-all the new approach is a lot cleaner and more companies code now look/feel the same way (at least for startup). Time will tell if MS made a good design choice. They only thing that bothers me a bit, is that they gently forcing us to use their dependency injector. Not all types of projects need it nor their specific flavour of it. So ya.. just see the startup class as better way to glue parts of your application together so that it starts up well (and not break because of missing parts during runtime).
Removed: Rule 4. Check out tweq's links; should get you started.
It's not specifically about databases. Keep Googling the term until you find a link about dependency injection that says something like "every other definition is over-complicated, here's a simple one"
It takes a little time for everything to "gel" together in your mind. A lot of the OOP concepts like DI that are difficult to grasp become easier once you actually run into a circumstance where they come in handy. Don't worry too much about exactly how to implement all the patterns, but be familiar with the *types of problems* they solve and read how to implement when you need it.
Actually, Hungarian notation (lblSomething, szWhatever, fgjnFoo) is specifically discouraged in .NET style guidelines. Definitely have a point with regards to descriptive name though.
Stylecop.analisys is nuget package and it will throw warnings on code style issues. I use building config for pull request validation at VSTS with no warnings allowed, so it's either correct style or no completed pull request.
When asking for help, you need to have as much knowledge as possible and to communicate it effectively, otherwise it's hard to help you. "Doesn't work" isn't particularly helpful, for example - what doesn't work? What do you expect to happen? What *does* happen? What have you tried? Another general tip: the debugger is possibly the most useful tool you can use. Set a breakpoint inside the Tick handler and step through your code, it will both let you see exactly what the program is doing, and the values of different variables etc.
Have not used it myself, but Resharper Command Line Tools could be a winner. https://www.jetbrains.com/resharper/features/command-line.html
if you install stylecop nuget packages (not extensions) they will be ran as style analyzers during build and will fail it if the style is broken. I personally use the standard stylecop + async rules.
If you're interested, reddit uses Cassandra 
Why are you talking about Python?
Because wtf is Perl? Certainly not a programming language and why would OP be talking about an ancient dark art in a c# thread?
C#/.NET is a mid-point between extreme convention over customization (magic) like Rails and extreme verbosity (tediousness) like C++.
TIL [lint](https://en.wikipedia.org/wiki/Lint_%28software%29)
Just because you don't know about something doesn't mean that it doesn't exist.
Good bot
Are you sure about that? Because I am 100.0% sure that obfusc8d is not a bot. --- ^(I am a Neural Network being trained to detect spammers | Summon me with `!isbot &lt;username&gt;` |) [^Optout](https://www.reddit.com/message/compose?to=perrycohen&amp;subject=!optout&amp;message=!optout) ^| ^Feedback: ^/r/SpamBotDetection ^| [^GitHub](https://github.com/SM-Wistful/BotDetection-Algorithm)
I highly recommend this book if you want to quickly understand DI. All the examples are in C#, but the concepts are explained in such a way they could be used in other languages as well. I would consider it required reading for any aspiring C# professional. 
er ok
This was my conclusion last I checked
You are right and wrong. While there is a consensus against the use of hungarian notion for most things in modern development environments/languages, there isn't a consensus on its use concerning UI controls. In fact, from what I can see, most UI examples use some sort of hungarian notation for their UI controls. Some benefits to this include: * Intellisense will group UI controls neatly * It avoids naming clashes with properties (i.e txtUserName avoids a clash with a UserName property) * Knowing that a member is a control, as opposed to a property or some other member is useful for mental organization, at least for me. However, when in Rome, do as the Romans do. If your team has a coding convention for UI controls, follow that convention. 
Check again. In fact, run a full level two diagnosis on your positronic brain.
!isbot perrycohen
I am 101% sure that perrycohen is a bot. --- ^(I am a Neural Network being trained to detect spammers | Summon me with `!isbot &lt;username&gt;` |) [^Optout](https://www.reddit.com/message/compose?to=perrycohen&amp;subject=!optout&amp;message=!optout) ^| ^Feedback: ^/r/SpamBotDetection ^| [^GitHub](https://github.com/SM-Wistful/BotDetection-Algorithm)
Almost all of the modern .NET static code analysis tooling will use the .NET compiler platform itself ("Roslyn") to perform the analysis. Microsoft has converted the [FxCop rules](https://github.com/dotnet/roslyn-analyzers) over to use Roslyn now. Violations of the analyzer rules get reported as compiler warnings. These can be seen in Visual Studio directly while you are developing so you can proactively avoid them, but you can also catch them during your CI process if you want.
C# is commonly used in enterprise systems, where you have multiple services communicating with each other through different comms (queues, APIs etc). It is design to make big projects "safe" in terms of consistency, maintainability and flexibility (when you know your tools well). There are many advantages of said "so much effort" that you mentioned and I suggest starting with SOLID principles. Combined with unit testing, it will all fall into place.
A form is just another class and controls should not be public. If people are unfamiliar with the guidelines, here they are. https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions
No, it has to display exactly on the taskbar.
Thank you, but it makes my app fullscreen, so that's no exact solution.
From the Book of Perl: \#!̷̥̗͔͖͍̙/̩̝͙̖͔u͈s̛͔r̟̫/̘̙̫̫͕̮̻ḇį͙͕̬͓̙̳̫n̻͍̪͎̣͡/̭͎̟̲͔͘p҉̬̹̯ͅe̢r̠̳̘l̯̗̲̪̀ ͝u͘s̯̟̺̬͝ͅe͉̝͔̜ ̼̠̖͓̗̗̯̕s̲̼̘̖͠ͅt͏̩̣̖̜r͍͘i͙̭c̼t͕͈͚̻;̣̰̗̕ͅ ͔͙̪͖̰͉u̩͈͎͢s҉e̤͔̙̯̪̰ͅ ͍̫̼̝͉w̨a̩̘̪̺r̭͉͉͎͇͙̭n̖̳̺̳͔̩i͕͕̠̰͞n̺ͅg̻̻ș̷̟͓̰̮;̫̝̪͖́ ̧͉u͓͕s̻̥̙̹͍͉ḛ ̧̪̜̙͚̠̲I͡O̺̖̯̤:̢̹͍:̮̯̰͇̰̳͠ͅH̳͝a̜̯̰̩̞̮͔͘n̹̲̘͎̱̩̩d̳͕̕l̡̬͔͖̫͚̣͙e̙͕̪͉;͓̣̘͖ ̛͉̪͖̻͉ͅ ͎̜̘̮͢m̶̠̬̘̤̬͈y͙̱̬̘̕ ̶̣͍̝̘̬(̬͇ ̨͇$͉̳̮̮̪r̟͈̪͕͉̺e̟͢m҉̲a̠̜i͚n̞̪̪̰̟̺̖i̴̺̞̜n͍̺̫̮̠g̩̯̼̣̫̘,̦̬̤ ͟$ṯ͈̣͍͚͉o̪͕̳̥͜t̩̫͓àl͉͝ ̛̞̞̥̫)̵̤̫̥;̜͘ ͏̘̖͓̫ ̢͍̠͖͚$̯r͙̙̖͉̫ḙ̙͚̲͇̲̲m̗͉̯̥͡ai̬̗̦̱̬ņ͇͉̜͇ͅi̼̖̖̕n̢̪̠̯̭͎͖g̩̟̙ ̥=͓͎͢ ͈̞$͔̘̦͎t͎̖̪͚͉o̥̠͔̜̘̫͕͢t̩a̢̼l̺̻̖̕ =̞͓̠͉̝ ̦͓̬̗̯̮͢s̳̼͎̖͍̫h͚̦̯i͔̘̟̗f̡͚t̜͔̞̀(҉̹̻̖͕͇̘͓@̟̫͚́A҉̼̤̟̗͕͉ͅR̖̰̺̣̜͠G̡̘̳͎̬V)̵̩̣͇̝̟ͅ;̦͔͉̗̗ ̩̩̗̬̠͖̀ͅ ͎͓̺͙̕S̪̭T̬͍̟̹͡D̶̲͙̹̲OU͏̼̣̦ͅT̸̘̟͉̗̭-͇̼͙̼̰̝͔&gt;̻͚̲̰̞̯̳̕au̶̻t̜o̖̣͍͉̜͕͡f̡l͇̱͔̠̩̫̻u̬͎̲s̲̹̜͕̺̱h̙̪̺̖(҉1̱͎̗)͇̳̱̻̜̦;͎̫͇͟ ͢ ̧͕̗w̨̺͓̭͙͚̱͔h͏i̥̬ḽ̤ͅe̵̤͉̩ͅͅ ̸̣͍͙(̤̰͡ ̶̟̯͖̳̺$̼̩͠rͅe͈͙͉̯̻͉̫m҉̼̗̣ai̻̳̬̭̣ͅn͙̗i̖̬͖̜͘ǹ͇̝̗̹̠g̰̘̮͙̬̘̫ ̢)̟͍̲͘ ̛͉͓̮̱{̸̭̻̼͍̰̮ ̩͢ ̗̮͍͔̖̪ ̗̳̞͈͝p͍r̤͚ͅi̘̫̞͖͎͓ǹ̪̳͙̥͇͉t̪̻̝f̸̩̥ ̝̰͔̱͇͈́(̹͙̫̜̯̟͝ ͍̟̰̣"̢͚͇̭̱̰͍R̰͍̺ȩ̞̭m̗a̺̱͓̞̩i̴͚͉̪n̥͕̳i̖ng̨̙̞ ͇̺͚%̼̦͉̻̹̥̻s̺̫̯/͈̲̥̕%̖͓̤̙s̘͈͚̗̞͖̞ ͏͕̩\̣͉̜͍̫͎͢r͍̞͔̣"͓͈̰,͇͜ ̷͇̻̟͖̜̗$́r̲̪̼͔̦͘e̳̬̙m̻̺̬̟a̖i̥͓̯͓̖͞n̠̭̼̺͚̦i̲̰͙͓͎n̜̭̳̪̖g̦͙͇͟-̸̹̭̱-̨̲,̹͔̝̜͓͉ ̯̭͓̲$҉̻͚t̻̟̝̞́o͎̝̹̙̪̟͟t̡̞̟͍̯ą͉̫͈l̵̮̝̹ ̱̳͡)̙͙͝;҉͙̤̲̠̦̤̹ ̹̠̞̩̤̻͜ ͏̺̤̬̱̤̙ͅ ҉̳̜ ̴͕̲̘̻̯ͅ ͇̼̀s̶̼̙̗̤̫͉l̻͚̦e͖͚̦̱̖͝e͚̞̖̱͕͘p̧͔͈ ͓̞̤͎̠1̨̻̰;̩̙̮͙ ͙̫͠}͟ ͎͖̰͓̜͓ ̤̭͕̝̘̤̹p͏̺͎̝͔ri͜n̢͖̬̫̰t͚̦̹̹ ̸͉͖̻̖̝"̞̣͓͙̗̹͢ͅ\͔̠̀n̝̫̰̰͎̖"̫̬̀ͅ;̬͍̫̩
True, expect weird shit, I remember I did an exam for WCF and failed. One question was to place all the xml nodes of a config file in the right order....
Maybe my approach is exotic, but here's how I do it. I no longer see the value of this 3-tier or whatever N-tier apps. You don't need a _data layer_. Your ORM of choice is already your data layer, it implements unit of work and repository patterns, and it is as generic as it can be. If you read the [msdn description of EF's `DbContext` class](https://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.aspx) it says exactly that. Now, for the _service_ layer. Isn't your API... THE service? You don't need an underlying service underneath your API. If you you need this _service_ you are providing, you are supposed to use the API, that is why you are making an API. Why would you reuse the underlying service anywhere instead of calling the API you are implementing? This is not an MVC app where the controller calls into a service to render a view. It doesn't have to be simple. It doesn't have to be a one-liner. In Web API, it really is THE service. If you try to adhere to REST principles, then you might want to be able to return various different status codes. So how can a one-liner be able to do it? * Do you make your underlying service return complex responses including a status code? Then it is so tightly tied to REST and Web API, unusable elsewhere, that you might've as well written the code right here in the controller in the first place. Also, you would be reimplementing in your _service_ what Microsoft already did for Web API. Plus, you'd be missing all the nice features of filter attributes, model validation, and all the nice things that are already there to help you. * Do you abstract possible failures and scenarios and use a switch statement along with the one-liner in the controller such that you return a proper response code? Then your service looks clumsy. It doesn't look like a proper service anymore. Maybe you throw exceptions instead. Do you throw `HttpException` with a relevant status code? Then you are again tightly linked to being used from an Web API. Or do you implement your own exceptions and catch each one of them in every controller action? I really think Web API is meant to be THE service. Your action represents a stand alone operation, you inject a `DbContext` or a `Session` based on your choice of ORM, and use it to do your thing right there. On the spot. You use the beautiful validation annotations and, if needed, the `IValidatableObject` interface to move out a bit validation logic such that you only have the _happy path_ in your controller. You can now properly benefit from the return helpers like Ok, BadRequest, Conflict and whatever you need. Having the `DbContext` right here allows you to properly apply things like EF optimizations, for example the usage of `AsNoTracking()` where appropriate or setting up optimal projections. Also you have easy access to route parameters, request headers, you can easily setup response headers, and so on, instead of having to pass those to an underlying service and, worse, to have to map them from it to your response. Given this approach, you only need your entities for the ORM, used internally. And you need classes to represent the request objects (i.e. wrappers for the body of requests), and classes to represent what you are returning from your API. These would be your DTOs.
I didn't know what linting was before.
!isbot dejco 
I am 100.0% sure that dejco is not a bot. --- ^(I am a Neural Network being trained to detect spammers | Summon me with `!isbot &lt;username&gt;` |) [^Optout](https://www.reddit.com/message/compose?to=perrycohen&amp;subject=!optout&amp;message=!optout) ^| ^Feedback: ^/r/SpamBotDetection ^| [^GitHub](https://github.com/SM-Wistful/BotDetection-Algorithm)
"Most dangerous space in this universe is the space between your ears" 
yes. you solve your db issues so you have more time to waste on problems like getting downvoted and starting Reddit arguments 
Thanks, you really hit the heart of it and there is much to think on. The reason for the two supporting class libraries are government and legacy. The data layer is a shared library with some old Windows mobile hand scanners that cannot access either the Soap or Rest services. They go through a third party layer to reach the database. No ORM or anything else as memory footprint is tight. This is straight ADO calls through this third party interface. Unless there is an ORM that uses less space and memory of straight ADO I will never get permission to deploy. We already bang against the limits. The business layer is under like constraints. There are stand-alone PCs on our machine tools that only receive data via paper tape - no connectivity. So I have to have the rules sections able to stand on it's own. I pushed to have a shared business set and the API version, but we do government contracts so the PMs said that would add load to the validation and sign-offs required. It is like trying to do the right thing while the code is locked in a cabinet.
I recommend against it unless your users are your employees. 
Just keep in mind that your code should not only work, but also be readable by other devs. This ain't Perl. Concepts you mention will become clear as you use them, I wouldn't wory at your place, more you work/study, the clearer it becomes. For example interfaces - I recomend thinking about them as 'contract'. Interface defines content of contract. Anybody who implements this contract/interface must fulfill what is defined inside the contract, for example have same methods. That way as a caller you can be confident than any object you call that implemented same interface will behave the same way. Usual example in c# is 'List' which implements inerface 'IEnumerable' among other things, so you can iterate over List. Oher types of collections which also implememted 'IEnumerable' work the same way, so you can for example execute loops over them. I also recomend reading a little about OOP in general before diving into details of C#. 
That's just general naming conventions though, it doesn't say anything about controls. To me, it still makes sense to use Hungarian Notation. For example, say you have a form where the user enters their name. If the name field isn't filled out, you want to color the label text red. Your form needs 3 controls. A Label ("Name:"), a TextBox, and a button ("Submit"). What do you name the controls? Both the label and the TextBox are for "Name"... so one would almost have to be lblName and the other txtName. That way you can say: lblName.ForeColor = Color.Red; 
!isbot umadbrobot
its to get pass the google filter for .zip files "being spam/harmful"
Perl is not a programming Language? Then what have I made a living out of since 1999? I wonder what the hundreds of folks who attended the London Perl Workshop last Saturday would make of your comment.
I misread. Doesn't matter tho.
Don't know if it'll help you but this helped me a few months ago : https://www.youtube.com/playlist?list=PLYMOUCVo86jFPCV6_u2m8P2NE2LSijvLN .
Removed: Rule 4. You'll need to make an attempt and describe better what you tried, how it's not working, and how it's supposed to work. You'll also need to format your code properly for display on Reddit. Beyond that, you already know how to access the `db.Count` as demonstrated in your `count()` method. So just do an `if` check on the `db.Count`. If it's `0`, then it's empty. Otherwise return `0-db.Count`. That being said, I'm not sure if this is even a usable behaviour: * If the database is empty (0 entries) you return `-1`. * If the database has 1 entry, you return `0 - db.Count`, or `0 - 1`, or `-1`. So by doing it this way, you can't discern between an empty database and a database with 1 entry. I also don't know why you're tracking `Index` or why it should always be negative numbers. If you choose to repost this question, you should clarify/answer all of the above issues.
You can use the Reflection API to investigate a type's members and even manipulate them in this manner, but I'd rather make a different suggestion because Reflection is more of a last-resort than "the solution" in most cases. What if instead: You have a Dictionary&lt;string, bool&gt;. The user inputs the string "Test". If that value isn't in the Dictionary&lt;string, bool&gt;, you add it with a default value. Now you have a value and can use it in a conditional.
I just want to make a little widget, which will display on the taskbar, so that's the reason of my question. ;)
Just need the code to find the current index element in the list db and return it 
My apologies thought I had structure and spaced the code well for reddit. 
For context, here is the actual piece of code I'm using this in. This is running in Unity. public class TagActivation : MonoBehaviour { private bool ActiveEnclosedSpace = false; private bool ActiveFamiliarisation = false; private bool ActiveMiscellaneous = false; // 'activate' is the user input public void TagDeactivate(string activate) { GameObject[] gameObjectArray = GameObject.FindGameObjectsWithTag (activate); if()"Active" + activate) == true) { foreach (GameObject go in gameObjectArray) { go.GetComponent&lt;Animator&gt;().Play("LessonShrink"); Debug.Log("I am activating"); } }
&gt; AutoMapper That's a red flag. Generally speaking, if I see AutoMapper I find a DAL that's pulling in far more data than necessary, then throwing most if it away. Unless you are using a broken ORM (e.g. Entity Framework), your DAL should be returning the same object that you eventually want to return to the client. If you don't understand why, look up "covering index" in any book on database tuning.
&gt; IValidatableObject Yes please. I find annotations and an interface like that fulfill the vast majority of my validation needs.
Guidelines are guidelines and are not absolutes. We are specifically disagreeing on the scope of the naming convention guideline, so simply providing a link to the guidelines as a form of defense for your position is circular reasoning. I've provided a few reasons why hungarian notation for UI controls may be acceptable -- what are your reasons for why you believe hungarian notation for UI controls is bad or why you feel some od the benefits I proposed aren't good enough for UI controls to be exempt from the MS naming conventions?
Might have to just manually map them if possible. I know it sucks, but thats what we do with a few things that have around 10-20 properties per ViewModel back to EF Model
Thanks. I am manually mapping them now, its just still inefficient. Each iteration takes about 1/4 of a second, and over 100 iterations it just forces the user to sit. 
Dude, wasn't me. I seldom downvote anyone.
maybe do some profiling? Maybe theres query in your EF model thats causing some significant lag, and you might need to index a few tables but thats just my idea from fixing search performance issues (from EF model TO ViewModel)
Is it possible that there is some sort of lazy-loading?
Make sure each line of code is prepended with 4 spaces.
A `List&lt;Movie&gt;` doesn't maintain a "current index". You'll have to manage that yourself.
what do you mean??
The first thing I would check is for differences between the 7 and 10 machines. My guess is that there's some background process running on the 10 machines that isn't running on the 7 machines. Like a scheduled virus scan or something like that. Something that stupidly takes most of the CPU away. Or (since you say the CPU usage doesn't change) maybe it's monopolizing the disk or taking a ton of RAM or something.
Removed: Rule 4. Depending on how the site generates the page, you could just use [`WebClient`](https://stackoverflow.com/a/16642695/1269654) and parse the HTML using something like HtmlAgilityPack. If there's some in-page generation using JavaScript or Ajax, or you need to interact with the page to generate the data, then yes, you'll probably want to grab something like Selenium to automate the browser. Either way, dive in and make an attempt. If you have specific issues, then feel free to post them after you've made a concerted effort to resolve them. Be sure to include relevant code and a description of what you tried and how it didn't work.
There is no "current index". You need to make your own `int` variable and update it as you access the `List&lt;Movie&gt;`.
Reflection is probably overkill for this scenario. I'm assuming the variables get updated somehow? private bool ActiveEnclosedSpace = false; private bool ActiveFamiliarisation = false; public void TagDeactivate(string activate) { if (activate == "EnclosedSpace" &amp;&amp; ActiveEnclosedSpace) { // ... } else if (activate == "Familiarisation &amp;&amp; ActiveFamiliarisation) { // ... } }
What ORM are you using? How are you fetching the root object? Are you projecting the results? Maybe show us a proof of concept code.
&gt; MyModelDataAccess OK, so I have started to implement this structure and I love it. I found a snag. I have a form that opens and it has a DataGrid with a list of Questions, this form as a List&lt;Question&gt; passed in. the questionController I use to save, delete, load, etc question If you open a question fromThis form, we will call is FormQuestionsParent another form opens its the question Editor FormQuestionChild(Question) Here's the snag. when I go to save where should my questionController be instantiated? inside of the parent form? I am not fond of letting forms do work. OR, should I when a question is loaded from the parent form, close the parent form, return to where it was loaded, then load the questionEdit form? make sense? I suck at writing stuff like this. code is how I talk.. 
Sonarqube can be run from the command line/MSBuild. 
StyleCop/FXCop does not need VS to run, both can be done from the command line and if you want you can even dodge having VS installed on your build server (though that is a bit of a pain). You just need to spend some time digging into the docs as like with most build automation it tends to be extremely particular to the situation. 
There are more elements to check than just your ObservableCollection, as far as I can tekk. Check the class it contains (&lt;yourClass&gt;). No action taken when setting or accessing its properties? Check your Dictionary. How many keys? Also, you say your collection only contain up to 40 objects or something; maybe it would be faster to loop through your dictionary's keys, then through your collection?
You could use the nameof operator. private bool ActiveEnclosedSpace = false; private bool ActiveFamiliarisation = false; public void TagDeactivate(string activate) { string modified = "Active" + activate; if(ActiveEnclosedSpace &amp;&amp; nameof(ActiveEnclosedSpace) == modified) { //... } else if(ActiveFamiliarisation &amp;&amp; nameof(ActiveFamiliarisation) == modified) { //... } /...
I think this is most likely a symptom of the N+1 problem. Essentially a new query is getting executed against the database for each of the child objects - results in lots of round trips and poor performance. If you are using Entity Framework you can confirm this by adding the below to your DbContext constructor. this.Database.Log = Debug.Write; Then the EF generated queries will appear in Visual Studio's Output window. Very handy to see what queries EF is generating from your mappings. 
While verbosity *can* be good, old-school Java code showed how it could go overboard. Luckily, no sane developers write code like that any more... RIGHT?!
This is always a hot mess of a debate, but, in my opinion, Automapper causes more trouble than it's worth. I've seen a bunch of projects that start with it, and end up abandoning it in favor of manually mapping stuff. Anyway, if you have an IQueryable&lt;T&gt; of your entities, you can do some LINQ magic to make the DB do all the work: //I usually have a class of extensions for each entity type. //Name your methods whatever makes sense. The "ToModel" convention works well until you have multiple models for one entity type public static class OrderExtensions { public static ToModels(this IQueryable&lt;Order&gt; orders) { orders.Select(ToModel()); } public static OrderModel ToModel(this Order order) { return o =&gt; new OrderModel() { //map your model here Id = o.Id }; } } //Then just call your extensions from your IQueryable&lt;T&gt; var orders = orderService.GetAll(); var models = orders.ToModels(); Performance is generally great, but if your models are complex (ex: involve getting data from multiple entities), things get complicated. 
Rails isn't magic. It's 100 megs of boilerplate to get to Hello World. (slight hyperbole)
See my other comment about doing this with LINQ to force the DB to do the mapping work, but make sure you are calling "ToList" on your child object collection before mapping it...you may be hitting the DB for each record if you're just looping the collection without loading it into memory.
I vote for keeping API/BL/DA separation. My concrete use case is that for a project we have the webapi as API but also a command line application that uses the BL/DA portion of that stack to do pretty much the same stuff that API could do. On the data receiving side, I would think *loooooong* before reusing the EF -bound objects just because *how the fuck* would you *consistently and systematically* guard against Id injection (ie. Id's come in from API and your services/DA obey them).
Why not call the API from the console app?
Oh man, upvote for that Debug.Write trick! I've been setting breakpoints and examining the IQueryable in the Immediate Window (or running SQL Profiler) when I want to see what EF is doing.
thanks for the reply your counter suggestion makes sense i will work it out 
 `private readonly StockPrices @this;` please don't actually call a variable 'this'...
&gt; protected override bool ProcessCmdKey(ref Message msg, Keys keyData) { switch (keyData) { case Keys.F5: if (gdcCustomer.Focused) { grpCustomers_CustomButtonClick(this, new BaseButtonEventArgs(grpCustomers.CustomHeaderButtons[0])); } else if (gdcStatementLines.Focused) { grpLines_CustomButtonClick(this, new BaseButtonEventArgs(grpLines.CustomHeaderButtons[0])); } break; case Keys.F6: if (gdcCustomer.Focused) { grpCustomers_CustomButtonClick(this, new BaseButtonEventArgs(grpCustomers.CustomHeaderButtons[1])); } else if (gdcStatementLines.Focused) { grpLines_CustomButtonClick(this, new BaseButtonEventArgs(grpLines.CustomHeaderButtons[1])); } break; case Keys.F7: if (gdcCustomer.Focused) { grpCustomers_CustomButtonClick(this, new BaseButtonEventArgs(grpCustomers.CustomHeaderButtons[2])); } else if (gdcStatementLines.Focused) { grpLines_CustomButtonClick(this, new BaseButtonEventArgs(grpLines.CustomHeaderButtons[2])); } break; case Keys.F2: gdcCustomer.Focus(); gdvCustomer.FocusedColumn = gcolCustomer; break; } return base.ProcessCmdKey(ref msg, keyData); }
Try using the 'ProcessCmdKey' method. protected override bool ProcessCmdKey(ref Message msg, Keys keyData) { switch (keyData) { case Keys.F3: //Collapse panel break; } return base.ProcessCmdKey(ref msg, keyData); }
Take a look at https://msdn.microsoft.com/en-us/library/system.windows.forms.control.processcmdkey(v=vs.110).aspx
I would use a dictionary as /u/Slypenslyde suggests. Something like: var activeDictionary = new Dictionary&lt;string, bool&gt;(); activeDictionary.Add("EnclosedSpace", false); activeDictionary.Add("Familiarisation", false); public void TagDeactivate(string activate) { if (activeDictionary.ContainsKey(activate) &amp;&amp; activeDictionary[activate] == true) { GameObject[] gameObjectArray = GameObject.FindGameObjectsWithTag(activate); foreach (GameObject go in gameObjectArray) { go.GetComponent&lt;Animator&gt;().Play("LessonShrink"); } } } 
Going through http feels dirty and useless. Didn't really consider instantiating the controller classes, too much inherited baggage, some controllers also take MVC related DI objects.
You could create a windows hook, it's triggered even if the form itself is not focused 
Dependency Injection, Interfaces, Generics are all fundamentally related to how things are organized around static types and contracts, concepts which simply aren't issues in dynamic languages like Perl. I would try to get familiar with programming in a statically typed language before diving into these concepts. 
WPF events bubble up the control hierarchy until the event is handled, so that would support your global F3 toggle, I think. If you're in winforms, you might need to have a KeyDown for every control that can accept focus, that calls a method testing for whether F3 is pressed -- to get that global functionality. If you're going to be doing this kind of thing regularly, you might look into [subclassing the winforms controls](https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/how-to-inherit-from-existing-windows-forms-controls). You would add your ToggleSplitContainer() method to the KeyDown for your MultiTaskerTextbox and MultiTaskerButton, etc. In another context (PowerBuilder, circa 1992 - 2000) it was standard practice to *never* use the vanilla controls, ALWAYS using subclassed versions of the controls instead -- so there is a place to write code, in situations like yours. I wonder if you can subclass some control higher in the hierarchy, so there's one place to extend Textbox and Button, etc? Another possibility occurs to me: on form start-up, start a loop that will run for the application's life-time, that checks whether F3 is pressed, then lets application events fire, then sleeps for a few microseconds before checking for the F3 being pressed, again. Something like: while (true) { CheckKeyPresses(); Application.DoEvents(); Thread.Sleep(10); } HTH
I highly recommend building a CLI build pipeline based on cake for this type of stuff. https://cakebuild.net/ Start your pipeline simple then add in additional “tasks” into your pipeline as it matures. There’s addins for nearly all mainstream tasks. A perfect example is the StyleCop adding for tollgating your build. https://github.com/Ashthos/Cake.Stylecop There’s also plugins for Sonar and Reshaper as well to submit your build to your quality metrics platform automatically. 
If that is the case, what's the solution? 
Do you have access to a profiler that you can use to see what is taking the longest? Another possibility is to see if you can get later versions of .NET onto a Win7 VM and see if that has the same effect.
This. Reflection is cool, but it's neither readable nor fast
Good bot
Stylecop can be set so all warns are.treated as build errors. If.you enable this not only will all devs be forced.to use.it. your CI process will do the same. Thats what we do, http://www.jondjones.com/build-csharp-websites/ensuring-code-quality/how-to-enable-stylecop-validation-of-visual-studio-build-with-a-custom-ruleset
Hard to say with no code, kind of flying blind here; but I would bet you have some IEnumerables in there. I think looping over the IEnumerable is going to materialize each entity from the Database individually. Try resolving the data set using .ToList() and then loop over the result. Instead of: foreach (var entity in someEnumerable) { //... } Try: foreach (var entity in someEnumberable.ToList()) { //... }
He's showing what code is generated when you write an async method. He didn't declare that. The compiler did.
The code comes from a compiler generated class (or a simplification of it), so it doesn't really matter.
 I'll add: Please don't create things that require using @ in front of them name. &gt;The prefix "@" enables the use of keywords as identifiers, which is useful when interfacing with other programming languages. The character @ is not actually part of the identifier, so the identifier might be seen in other languages as a normal identifier, without the prefix. An identifier with an @ prefix is called a verbatim identifier. Use of the @ prefix for identifiers that are not keywords is permitted, but strongly discouraged as a matter of style. 
From the [subreddit rules](https://www.reddit.com/r/csharp/about/rules): [quote]Rule 1: No job postings (For Hire and Hiring)[/quote]
Hi, I didn't see any posts about this on this sub so I wanted to share the good news. The WCP will help reduce the number of native sub-assemblies by allowing you to run more of the full .NET features on .NET Core. This appears to include Windows-only features as well which will throw an exception at runtime if used on the wrong OS. I personally find this case easier to handle in deployment compared to compiling separate class libraries.
 var customers = yourContext .Customers .Where(customer =&gt; whatever your customers you want) .Select(customer =&gt; new { Id = customer.Id, Name = customer.Name, // other customer properties you want Orders = customer.Orders.Select(order =&gt; new { Id = order.Id, // other order properties you want Items = order.Items.Select(item =&gt; new { Id = item.Id, Name = item.Name, // other item properties you want }, }, }) .ToList();
Yeah I know. Google is filtering out the application exe or script files in your zip. Putting a password on the zip file prevents Google from scanning the contents but still let's the recipient know it's a zip file. Of course, you then need to send the password. 
Do you have Configuration.LazyLoadingEnabled = false; in the constructor of your datacontext?
Sorry I need to read things more carefully. It was for a good cause hope you can understand. Feel free to remove as I don't want to over step community rules.
I understand. I am not a mod, just pointing it out. Surely there are other subreddits suited for what you need.
I do this for extension methods.. I feel that is a fair time no? 
huh didnt know that
My brain is all foggy with a head cold, but I think this is analogous. You know the mini dialog in Excel that lets you select a range of cells? Excel has a control for that called a RefEdit, but it doesn't work from C#, so I had to implement my own. To use it, I had to show my forms non-modally. First, I create an interface so my implementations were consistent: public interface INonModalController { void OpenForm(); void ParentForm_FormClosed(object sender, FormClosedEventArgs e); void ParentForm_FormHidden(object sender, EventArgs e); void RefEdit_FormClosed(object sender, FormClosedEventArgs e); } Then, my controller for a non-modal form looks something like this: public class SomeNonModalController : IDisposable, INonModalController { private frmRefEdit _frmRefEdit; private frmSomeNonModal _frm; public void OpenForm() { SomeProperties props = DataAccess.LoadSomeProperties(); _frm = new frmSomeNonModal(props); _frm.FormClosed += ParentForm_FormClosed; _frm.FormHidden += ParentForm_FormHidden; _frm.Show(); } public void ParentForm_FormHidden(object sender, EventArgs e) { _frmRefEdit = new frmRefEdit(); _frmRefEdit.FormClosed += RefEdit_FormClosed; _frmRefEdit.Show(); } public void RefEdit_FormClosed(object sender, FormClosedEventArgs e) { _frm.RangeAddress = _frmRefEdit.RangeAddress; _frmRefEdit.FormClosed = null; _frm.Show(); } public void ParentForm_FormClosed(object sender, FormClosedEventArgs e) { // remove event handlers _frm.FormClosed = null; _frm.FormHidden = null; if (_frm.DialogResult == DialogResult.OK) { SomeProperties props = _frm.SomeProperties; DataAccess.SaveProperties(props); // if needed OpsDoSomething ods = new OpsDoSomething(props); ods.DoSomething(); } } // IDisposable methods public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } protected virtual void Dispose(bool disposing) { if (disposing) { // housekeeping } } } Finally, my parent form implements a FormHidden event: public event EventHandler FormHidden; private void btnSelectRange_Click(object sender, EventArgs e) { if (FormHidden != null) { FormHidden(this, EventArgs.Empty); } Hide(); } What you're trying to do sounds different, but I think the principals are the similar.
Do you know of any that would be responsive? Most of other forums for generic jobs I find are pretty much unresponsive. We're really trying to help these folks in rural places in Canada and America get the help they need.
I don't really know. I doubt you can find exactly what you need given the location needs. A remote position would've had higher chances. Have you tried sites like upwork or recruiting via linkedin?
Removed: Rule 1.
&gt; your DAL should be returning the same object that you eventually want to return to the client. Is this for performance reasons or another reason? In my applications, many of my entities have properties that a public API caller wouldn't care about, some of it perhaps sensitive, yet is useful on the backend. Say a foreign ID to some other entity needed only to the internal system. To keep the resulting object from the API caller relatively skinny for readability and perhaps security, why not use something like AutoMapper to reduce you entity to a smaller variant?
You could give /r/forhire or /r/TorontoJobs/ a shot.
 He completely wrote it, how does his naming and conventions have anything to do with the compiler? Also -- there is no man-dated names for compilers, there are plenty, so there is no way you can make the argument "compiler generates(variable named __this)." And that's why it's for the compiler. We aren't meant to read it. That's like justifying using names like __0dex because the compiler does it. Should we name every boolean flag, flag2, flag3, flag4, flag5?
I agree with this. Another use case is services calling other services. For example, say a ReportService aggregates data from other services. It would seem the most efficient and clean to me to have these all be separate services that you can inject as needed. Invoking the controllers in place of each service seems painful. &gt; some controllers also take MVC related DI objects. There's also (possibly) web specific stuff returning from the controllers. To follow OP's example, instead of getting a `Part` object with ID `id`, you get an `IHttpActionResult` from `return Ok(_service.PartInventory(id))`. It seems to me that would make general API development, intellisense, and debugging more work than it needs to be. Maybe I'm missing the upsides to doing it this way.
 No it didn't, it was completely written by hand. 
I guess you could start with classes,namespaces, and assemblies which are basic structural/organizational elements.
Yes, it was. But it was written by hand to illustrate what the compiler might do.
then why use @this when you have full control? It was the authors full choice to do that. How can you make the argument he was showing what the compiler might do, when there is a `var` at the end of the file? He didn't do @this to look like a compiler.
Dependency injection and interfaces are mostly more advanced concepts. It comes into the design of your software and testability. It's not something I'd recommend learning first. When it's time, I highly recommend reading **The Art of Unit Testing by Roy Osherove**: https://www.amazon.co.uk/Art-Unit-Testing-examples/dp/1617290890/ref=sr_1_1?ie=UTF8&amp;qid=1511991453&amp;sr=8-1&amp;keywords=roy+osherove Until then, you're better off learning how to actually code in C#, and learning important C# features such as the differences between reference and value types, LINQ, asynchronous programming, threading, and more. You can learn all of this with **Venkat's C# for beginners series**: https://www.youtube.com/playlist?list=PLAC325451207E3105 To develop a web project, you could then move onto Venkat's MVC tutorial series, however if you're planning to store data, I recommend first watching his Entity Framework and SQL Server series.
You sound upset about something.
 Not upset, I'm just flabbergasted there are 'developers' justifying naming a variable @this
I'd hope they'd see it as the bad attempt at sarcasm. I was being snarky, of course Perl is a programming language and a powerful one at that. It's just very easy to write very very bad Perl and the code bases I've worked with had exactly that kind of Perl. So looking at the code was like trying to decipher some cryptic wizard tome. That's just my experience with Perl and I was trying to be funny. Sorry if I offended anyone.
They are out there. I once told a Software Engineer that his use of @someKeyword for a variable was poor practice, got a typical bs response. 
I see your point, but I can't see why to react so strongly about the example code? And yes, I've picked the name explicitly, and yes, I see the value there, because the generated closure is an implementation detail and I want to emphasize that the closure is accessing the state of an enclosed type. And yes, I'm using '@this' in production code for declaring extension methods and when I need to avoid closure allocation for lambda expression. And no, I can't see the issue with it. BTW, I read all your comments about this topic, but didn't figure out why the name '@this' is so bad;)
You could use the json ignore attribute on properties that you don’t want to return through the api.
I do not, if I did that I would need to get all the child objects directly, right? I couldn't use the navigation properties at that point but that would connect with what /u/dlaugh is saying?
That reminds me of the `I*Result` bullshit, IMO horrible stuff, 1:1 equivalent to returning `object`. I don't actually know if they have some generic version, but I prefer having API that returns the natural DTOs. Of course immediate counter-example to that is any kind of proxy where you don't even really care about the passed object.
The web store is third-party software that my company has added customizations to. That being said, I feel uncomfortable modifying any code that isn't customized for many reasons. One being that there is an upgrade in the software, my changes to their backend code will be overwritten. Not sure if you've heard of Microsoft Dynamics GP, but that is where the sales documents are stored when purchases are made on the web store. My goal is to trigger some function A upon a successful purchase. There is a type of product purchase that I'm going to want to filter for. These purchases will be added to a queue (a SQL table). I will build a windows or web application that will take that queue data and do something to it. The part I am trying to solve is rather than inefficiently checking every minute for new orders, I want it to be event-driven. 99% of purchases made are on the Pacific timezone and we have no orders being made in the early AM, so why check every minute for orders during that time? I'm aiming for the best practices to clean up the current ancient process. To reiterate, the piece I'm looking for is populating the SQL table (queue) in real-time (and not by a recurring windows service) and in the web/windows app, checking that queue as data comes in (instead of recurring check every min). 
This is great information, but is there any way I can achieve an event-driven model? Refer to my response ThereKanBOnly1 above. I appreciate the advice/guidance!
I will be creating the web/windows application in C#. The orders are populated to Microsoft Dynamics GP and there is Microsoft eConnect api that I can use. How do I make an event-driven design rather than having a service that checks the queue every minute?
I think it might benefit everyone if I explain the current design. A purchase is made on the web store. That data moves into a database table in Microsoft Dynamics GP through a synchronizer, which is an application that is constantly running. When it makes it to the database table, a "watch service" checks to see if the product purchased is a certain type (that we care about). If the product meets the criterion, another service wakes up (gets triggered by the watch service) and its job is to move the data to a queue (another SQLtable) and process it. There is a windows application that provides a GUI to view the queue and it also provides some added functionality like resubmit to process again and email notify the customer who made the purchase, etc.
Eagerly load the related objects. One round trip. So: await _db.Users.Include(u =&gt; u.Orders).Where(u =&gt; u.Id == userId).ToListAsync(); 
So there are two basic approaches. A "pull" approach would involve a timer and polling their system periodically. A "push" approach would involve them calling you and notifying you that new data is available. Unless Dynamics GP has a way to call you (and I think it doesn't) you will have to poll them - approach #2. 
 I simply stated it shouldn't be used, I didn't mind until people actually supported the idea that `@this` is a descriptive variable name - I didn't mean offensively to you like you're a bad programmer because of it or something - but generally even examples can be taken, but the people that need full examples are usually newer people that don't know better, if someone sees it and goes "wow, I should use that!", now they're following a bad example. The issue: I pass your class `@this`, what do you think it is?
Does your KeyDown event fire? All you should have to do is set KeyPreview and hook into the event.
An update to my program { string word; // The word entered by the user string result; // The word read from the file int counter = 0; // Counts the number of lines read from the file bool found = false; // If the user's word has been found StreamReader reader = new StreamReader("dictionary.txt");// The input file string dictionary = System.IO.File.ReadAllText("dictionary.txt"); Console.WriteLine("Enter a word to search in dictionary: "); do { word != result; Console.WriteLine("Oh that isnt a real word!"); } while { word == result; counter++; } Console.WriteLine("That is real word!"); }
A good start would be to look at the syntax for if statements: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else while loops: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while It might also be a good idea to try and compile your program, the compiler will let you know about a few of the things you're doing wrong.
Normally I would just tag fields that the client shouldn't see using the normal serialization attributes. If that makes you nervous, mapping to a DTO is fine. Likewise, fields your backend needs, but the client doesn't, are also fine. What's not ok is pulling fields from the database that no one needs. 1. It is a huge performance drain. One that isn't going to clearly appear on your performance tools. 2. It makes maintenance much harder because no one can tell which of those apparently unused fields are actually used. 
So if it is true that the inner stop watches elapsed times are adding up to significantly less than the the outer one (and I'd not be using milliseconds to make that comparison, I'd use TICKS) then the only statements that can be causing your delay are the getters on Count for the two collections. The only way I can see that being true is if there is some locking going on. You haven't used any of the thread safe collections have you?
This is wrong, you have variables you don't set and you use them. You read the file into dictionary and never use that. You have a request for entry of data and then never fulfil it. You also have separate do and while statements. Read this https://www.dotnetperls.com/do And these readline method https://www.dotnetperls.com/console-readline string Contains method https://msdn.microsoft.com/en-us/library/dy85x1sa(v=vs.110).aspx 
Awesome, thanks for the additional info. Yes, nothing like a cascade of `SELECT * FROM`s to kill performance. One other question if you don't mind. You mentioned EF being a broken ORM. What's one that you don't find to be broken for the reasons discussed in this thread?
string.Contains() wouldn't work here, it would false positive on partial words. (ie, "lephan" in "elephant"). Doing equality comparisons is the right behavior, though OP might want to ignore case.
Tortuga Chain. For most operations, you pass to it a table or view name, a type, and a where clause. By reading the database schema at run time, it generates the correct SQL for populating that object/collection. The same method can return a lightweight summary object or a full detail object just by passing in a different generic type to populate. Likewise, you can take objects from the client and write them directly to the database. There's no need to map them to an Entity first. Note: I am biased as I helped create Chain specifically to deal with this kind of need.
yea I was gonna offer a equals approach, if I understood how the words where enumerated in the file. But seeing as how all possibility that any value would be in either of the variables he checks against in a 1 to 1 fashion I went with the idea that the file probably only contained 1 word.... :D 
Interesting, I'll have to play around with this library. Thanks for sharing it!
Because the project lead doesn't want to update. Been there done that.
Let me know if you run into any problems. I tried to write good documentation but that's always a challenge.
Removed: Rule 4. There is just too little done here. Make more of an effort, consult your learning materials, check the learning resources in the sidebar and at /r/learnprogramming.
Just so it's clear my understanding is that the order goes from the web store into an MS Dynamics GP table which then checks the order type and moves it to another table if it meets a certain criteria. So the first question I have is about how the data moves from the web store into Dynamics. It's not clear how much of that is a customized piece versus a third party offering. If it's customized, is it something that your company has had a hand in developing or was it developed for you by a consultant or by the web store developer themselves? The second question is what does Dynamics really have to do with the order. Is there additional data that comes from Dynamics that's needed? Is Dynamics where an order goes from just a plain old order to a successful order? Third question, the last table that the order gets moved to, is that in Dynamics? Lastly, how much of moving the data through this entire process is SQL based and how much is done via C# or another programming language outside of T-SQL? Unfortunately there really isn't a clear or easy answer here, and since you're dealing with an unnamed third party web store and Dynamics GP, there's two components of this system integration that you don't control. The first thing I'd look into is whether whether the web store can simply send data to your process as well as Dynamics. That's really where the order originates, and since it's not entirely clear what role Dynamics plays in this, why even bring it into the picture if it does need to be. Note that intercepting the data in between the web store and Dynamics might be different, but could allow you to achieve a similar result. Direct the web store call to somewhere that's more under your control than Dynamics, then forward it along to Dynamics and wherever else you need. Dynamics shouldn't necessarily care where the data's coming from (it might, but I'm assuming for the moment). Now if getting the order data directly from the web store isn't a possibility, or in needs some additional Dynamics data, then I think you should try and look into the APIs and services that Dynamics exposes. I have done an integration or two with Dynamics in the past, but I am not sure whether these will be able to solve your issue at all. Dynamics does have an [Event List](https://msdn.microsoft.com/en-us/library/cc508768.aspx) that it make available, but I don't know if it will be of any help to you or what it would take to even tap into them. Overall, I would challenge you to think about this problem from a slightly different angle, mainly that things need to happen in absolute real time or that a check process would be slow. A lot of times, we as programmers want to do everything in real time because its easier to think about, it's easier to program, and its easier to troubleshoot. The reality is that not everything always has to happen in real time, and not everything has to always be 100% resilient as long as you plan and design for those edge cases. The tasks you mentioned that are being driven off this queue; review in a GUI, potentially reprocess, send a customer an email, are all tasks that don't need to be real time, but can happen close to real time with arguably minimal effect to the end user, customer, or the business. Even if a customer turned up and called a support person that might be viewing that order in the GUI you mentioned is going to take a minute or two to pick up their phone, dial a number, get a sales person on the phone, and communicate to them why their calling. In that time a near real time process can pick up the order and no one is worse for wear. Computers (and even networks now) are fast, and even when not in "real time", they're so much faster than most of the business processes that they're built around. While it might seem that checking the DB every 15 seconds for a new order is inefficient, the reality is that you're barely burning through any CPU cycles to do that check and it can happen in nearly the blink of an eye. Also, what's the maximum number of orders could you expect to receive in that 15 second window? 1, 5, 10, 100, 1000? You mentioned that you were "aiming for the best practices to clean up the current ancient process". Unfortunately, depending on how "ancient" the process is, you may not be able to do any more than slap a bandaid on this because best practices would likely dictate a rewrite and maybe even more. Integrations between systems generally require trade-offs in some form, because few systems are really set up for seamless and easy integrations. You're just going to have to decide how significantly that trade-off effects the rest of your system. My recommendation would be to keep it isolated as possible, and keep it's affect on the larger system design to a minimum.
My thoughts about the questions. (1) I don't even see any reason to still support .NET 4.0. Everything that'd require .NET 4.0 is obsolete. (2) I think changing API is fine with an increment of the major part of version number. (3) Please, don't ever do that. Skipping certificate validation is worse than using no secure sockets. Maybe add a setting called like AllowSelfsignedForDevelopment or similar which would hint that it shouldn't be used in production.
Thank you If I continue to work at it is it ok if I repost?
ASP.NET Core 2.1 should finally add a generic version of IActionResult. Still bullshit compared to just using exceptions, but better than what we have now.
Pretty sure all the projects we use target .Net 4.6 or greater so here's another vote for ditching 4.0 support.
Will do. I read the README.md (but haven't fired up LinqPad yet) and one thing that's not obvious to me is what the major advantages are over other lightweight ORMs such as Dapper/Dapper.Contrib. The command chaining and materializers look very cool but I'm not sure of the other highlights. I'm interested in these ORM projects because I wrote a custom one for the company I currently work for and I kind of regret it. It works well enough but there are always more seemingly cross cutting features that need implementation and I fear I'm on the path to a bloated EF clone which is what I was initially trying to avoid.
I'm with you on this. Member variable could easily been named _stockPrices and the parameter stockPrices without any problems... this.@this = @this; could confuse a lot of readers.
I've done just this and found it work well enough. In fact had a custom serialization attribute at one point that would specify Roles (kind of like the `Authorize("Admin,SuperUser")` on Controllers or endpoints) but for properties of objects. That way a properly authorized API caller from our internal admin portal would see more troubleshooting information than the callers from the frontend web applications.
I just refrained from mentioning the third-party software because I assumed people aren't familiar with it. It's a Nodus Technologies product. Nodus Synchronizer is what moves the data from the Web store database to the GP database. So to answer your question, the web store comes with other pieces of software. The backend of the web store writes to different tables in Dynamics and that data is needed. From what I understand, the order will not make it to Dynamics unless everything is successful. Sometimes problem orders occur and you must go through the admin console of the web store and generate the XML and submit to Dynamics to clear the issue. The last table is a custom table that is in the Dynamics database. From web store to Dynamics, the data gets there through XML. The rest of the moving of data happens in C#. The tool that's currently exists was created by a consulting company that we are no longer going to use. The reason why this tool needs to be replaced is because after we end the relationship with said consulting company, there will be no way to support the tool. "When it makes it to the database table, a "watch service" checks to see if the product purchased is a certain type (that we care about). If the sale meets the criterion, another service wakes up (gets triggered by the watch service) and its job is to move the data to a queue (another SQL table) and process it. There is a windows application (GUI) to view the queue and it also provides some added functionality like resubmit to process again and email notify the customer who made the purchase, etc." The whole portion above is the tool that the consulting company developed. The part about the web store and the data moving into Dynamics is all part of the Nodus Technologies product. I figured since we can't support the current tool ourselves because it is compiled code, this is an opportunity to recreate the tool, the "right" way. The reason I say the "right" way is because the current tool breaks quite often and the service needs to manually be restarted. The tool generates PDFs using Microsoft templates, and these PDFs are what's emailed to the customers. When customers call and say they never got their email, that's when we manually re-send them using the GUI. To reiterate, since the tool will no longer be supported, it breaks often and consistently needs to be restarted, and it has some inefficiencies, it's more than enough reason to replace the "ancient" tool.
I wasn't offended, was just curious, why you thought using '@this' is a bad practice, and I really appreciated your comment that explained your line of thought. Now back to my rationale: I think it is ok to use '@this' when the variable or argument actually mimics an explicit 'this' pointer. So I can even create a guideline: *Avoid* using '@this' name except when the variable/argument semantically mimics a 'this' pointer. *Use* '@this' in extension methods. *Use* '@this' as argument/field that points to an enclosing class. So the answer to your question: do not use '@this' if it is not absolutely obvious what it means. I thought my case does not fall into that bucket;)
&gt; I personally find this case easier to handle in deployment compared to compiling separate class libraries. I find it truly nasty and a huge step back to support APIs that are not actually supported and just throw an exception. The compiler is supposed to protect me from these issues, but with s~~hit~~tuff like that I can't even trust that the methods I call are callable during compilation.
1. It seems reasonable to drop support for .NET 4.0 to me, especially given the 1.x version still supporting it 2. A 2.0 upgrade is the best time to get away with a change like this. It's a minor inconvenience at most since the method sig stays the same. Coming from a shop where I had to upgrade from .NET Core MVC 1.1 to 2.0, a small method rename is nothing. 3. Is there any way to compromise on this? Maybe a link in the exception message to details on overriding ServerCertificateValidationCallbacks for self signed certs. I don't like the idea of an api as widely used as MailKit accepting unsigned certs by default, and developers should really take it upon themselves to understand certs and why a self signed cert will fail by default. Some other things you may have comments on: * I've always struggled with Folder.SetFlags requiring a MessageUid or index. I could be using the api wrong, but I'll commonly enumerate over a folder `someFolder.Where(d =&gt; d.Subject.ToLower().Contains("My Support Ticket"))` and it feels like I'm always having to find a workaround to apply flags / move / delete these. Ideally the MimeMessage returned from a folder could contain the Uid but I realize that might not be the easiest. Typically I've resorted to enumerating over all elements in a folder and avoiding Linq, and using the `SetFlags` with an index instead of Id. If there's currently a better way please share, otherwise this is definitely an area I think could be improved. * SmtpClient.Connect, when I connect to my outlook server using `useSsl = true` on port 465, it fails due to a handshake exception. I eventually learned our server is responding on 465 without SSL, which was unexpected since port 25 already responds without SSL. I don't know if its possible to detect a non-ssl connection when `useSsl` is `true` and throw a different exception, but that could save others some debugging down the line. Awesome to see you looking for feedback here! I've been using MailKit and MimeKit for a while now and really can't praise it enough over the default .Net solutions. It's great having community members like yourself, keep up the great work!
https://github.com/docevaad/Chain/wiki/A-Chain-comparison-to-Dapper Dapper.Contrib doesn't understand your database schema so it can't handle complex schema or catch a lot of mistakes that Chain can. Nor can it do things like update or delete a record while returning the previous values. That requires database specific SQL. Chain is also faster than Dapper in some cases. Not all cases mind you, but we're hoping to improve that using the aforementioned runtime schema data. If you're into that kind of thing, Chain also has support for table-valued functions and multiple result set functions/stored procs (which are surprisingly tricky in PostgreSQL.) Even if you use Dapper at runtime, you may consider Chain for stuff like code generation. Saves you the effort of learning all of the database specific SQL for reading table/column data.
&gt; there are always more seemingly cross cutting features that need implementation Can you give me some examples? While there are some features I refuse to implement (e.g. deep object graphs) I am trying to hit the ones that frequently occur. For example, we now have full support for soft deletes. Turn it on in one place and we honor it for every table that needs it both on reads and writes. Automatically setting InsertedBy and LastModifedBy are ones that I am particularly proud of.
That's a really cool idea.
That's not what this is about. The Windows Compatibility Package lets you port your .NET code directly over to Core almost 1-to-1 without needing changes. This allows developers to get things running and then rewrite them as needed.
i misread. point unchanged tho
I'm no graphics programmer but wouldn't you just check adjacent pixels for the same brush colour/stroke? If it was a adjacent to a different brush then you would change the pixel colour to the border colour. I have no idea how easy it would be to figure out if the next pixels over were a different brush though. My idea really only works with single colour brushes
Yes I realised that I should have been a bit more descriptive, I will keep that I mind. And thank you for the debugger tip!
&gt;It means that if all awaited tasks are already completed the entire state machine will leave on the stack. An async method even today could have an extremely small memory overhead if all awaited tasks are completed already or will be completed synchroonously. The only remaining allocation will be for the task itself! This also means that code like async Task Foo(IBar bar) { await bar.AsyncSomething().ConfigureAwait(false); Thread.Sleep(1000); // do slow processing } may still run entirely synchronously and unwittingly block the calling thread.
I do it like SirSooth since a few years back and this has been proving to be a great architecture. Remember that this approach basically keeps all the old layers, they are just slightly redefined and adapted to Web API.
Yes but that's because you're not letting TPL so its job.
Not sure what you mean exactly?
Thread.Sleep doesn't let the task scheduler switch to another pending task
Make the applicable functions return bool (true for success, false in case of failure). If MainFunction does validation checks, why not call it something like IsValid? Then do something like this if(frm_main.IsValid(extension)) { frm_main.UpdateActiveDirectory(...); //etc }
Yes, that's the point of the example. Obviously `Thread.Sleep` is just a stand-in for arbitrary blocking work.
Throw an exception.
Indeed, there can be changes to the way I see it, based on what someone thinks is best for their scenarios. The issues I have found by having a repository layer (other than the ORM) is that essentially you end up reusing such methods. Like you have some `UsersRepository` in which you have a `GetActiveUsers()` method. Maybe all it does is return context.Users.Where(user =&gt; user.IsActive).Select(maybe a projection here, maybe not).ToList(); Now, of course, you are going to say, why would reusing it be wrong? And what I've found out is that, further in time, as needs will change, a particular scenario will need to display something more or less than the other scenarios. By its definition, they will still be active users. The change just adds an additional `Where` in that code, but given that it is done in the future, by someone else other than who initially wrote it or reused it, they will be very likely to create a bug right now for there are two possibilities: * either the change is meant only for this scenario which mean you are supposed to create another `GetActiveUsers` method which you'll have issues naming (is it `GetActiveUsers2` or `GetActiveUsersForThisScenarios` or `GetActiveUsersThatSuchAndSuch`) or you'll change it to `GetActiveUsers(bool bySomeFlag)` but this will complicate code even further in time when your controllers will be making calls like `GetActiveUser(false, true, null, 2)` * either the change is valid for all scenarios, case in which it makes sense to just change the existing `GetActiveUsers()` method. Now, unless the developer doing this is very aware of all the business needs, he may not make the correct choice. Nor will he ask, for the business will either be clueless of what he asks or be annoyed that he asks such things thinking he should know better. So by having the exact query right there in the controller, is a guarantee that any changes, either fixes or improvements elsewhere, will not be breaking the existing implementation. Changes that need to be made in multiple places, will have to be changed individually which will also force the developer question whether they are needed. Rarely they would've searched the usages of the repo method to wonder whether other places calling it have been impacted after a change to a method, especially when it is considered a bug fix. Also, when investigating why things work a certain way, having to go inside the actual method to find out what it really does becomes annoying. Just like comments, I've noticed that method names turn to not be very relevant further in time. And between having a repo with many methods like `GetSuchThatXAndSuchThatY` and `GetSuchThatZAndSuchThatNotT`, I'd rather see the actual `.Where(thing =&gt; thing.x).Where(thing =&gt; thing.y)` and `.Where(thing =&gt; thing.z).Where(thing =&gt; !thing.t)` instead. And, also important, but again may not be applicable on every codebase, I've found that in scenarios when you need things retrieved in the same exact way, but you need different representations of them, like sometimes you need a whole graph of data, but other times you only need pairs of id and name, how do you handle it? I've seen all sorts of things, from people fixing this issue in their repositories by having repository methods name `GetAll` which have a parameter that is an `Expression&lt;Func&lt;T, bool&gt;&gt;` which they call a _filter_, a parameter that is an `Expression&lt;Func&lt;T, object&gt;&gt;` that is their projection, and some other hack for ordering which they won't even be able to make correctly since they cannot chain `ThenBy` calls. So what they end up doing is a poor man's `IQueriable` where they make an ugly call of GetAll(thing =&gt; thing.x &amp;&amp; (thing.y || !thing.OtherThing.z, thing.Name, thing =&gt; new { thing.Id, thing.Name }) instead of having a more natural and readable usage of `IQueriable`. And should I mention the pain they go through when they need to the something like the following? var query = context.Users.Where(....); if (someCondition) { query = query.Where(...); } var users = query.OrderBy(...).ThenBy(...).ToList();
Removed: Rule 4.
Of course, as long as it meets the Rule 4 criteria. Try not to post pseudo code, try to make sure what you do post compiles, and try to get past some of the initial basics that should be covered by your learning materials.
&gt; SomeProperties props = _frm.SomeProperties; &gt; DataAccess.SaveProperties(props); // if needed &gt; OpsDoSomething ods = new OpsDoSomething(props); OK, the coffee is kicking in. I love it. I am going to code this up now in a forms controller. thanks man!
A c program that displays a table of 4 rows and 3 columns. Each row should contain a telephone number, name and address as shown below. Name Telephone Number Address Derrick 44 71234567 Birmingham Brad 44 45678934 Leicester Charles 44 85823694 Pittsburgh 
&gt; DataAccess Your pretty spot on the principals are similar. I am serverly ADHD, I am trying to hard to focus on doing this RIGHT. its so easy to get off track and start writing shitty code.. I am going through and finding so many places I have failed with OCP and SRP. implementing this alone will help me get this addin back on track! thanks!
It seems that some kind of configuration says that the database access is exclusive. Your description is very vague, but it seems that you have a windows service and/or one or two client applications? When two client applications are the problem, then it might be a user level connection/driver configuration problem. Just a reminder: ODBC allows system and user configurations (for both connections and drivers). I assume that the difference is to be found there.
I disagree. Exceptions should be used for exceptional circumstances. A user entering something invalid is not exceptional. I'd go with /u/RakijaH's suggestion - MainFunction() should return a bool.
I believe a region will do what you need. You will need to maintain a Region object and Union () each draw. You can then use FillRegion() with a stroke to achieve an outline. You can also hit test with the region easily. https://msdn.microsoft.com/en-us/library/system.drawing.region(v=vs.110).aspx
&gt; (3) Please, don't ever do that. Skipping certificate validation is worse than using no secure sockets. *This!* Don't give in to us lazy developers. There's never enough time to do all the stuff properly:) So let me fail fast and show me the way to do it properly. Make it easy for me to fall into the *pit of success*. If I'm doing something wrong, give me a quick hint in your exception message, what to do to fix this. Include a link in your exception pointing to the relevant doc. You wrote that this issue crops up all the time, so make that bit of doc especially awesome. Always loved the way [Simple Injector](https://simpleinjector.org/) handled configuration and runtime errors. Never felt safer and faster in doing what I did:) Here's a [snippet](https://github.com/simpleinjector/SimpleInjector/blob/70fc08aed27d65fc8c868a4d4f8f28cf4afc8105/src/SimpleInjector/StringResources.cs#L152): internal static string LifestyleMismatchesReported(LifestyleMismatchDiagnosticResult error) =&gt; string.Format(CultureInfo.InvariantCulture, "A lifestyle mismatch is encountered. {0} Lifestyle mismatches can cause concurrency " + "bugs in your application. Please see https://simpleinjector.org/dialm to understand this " + "problem and how to solve it.", error.Description); Got this exception once, read the doc, understood the problem and fixed this in mere minutes. No frustration, no debugging, no feeling lost. What a fine day.
yes I have a Main Application which works with paradox databases. This program is an old application and I cannot change that. I just need to read and write to its databases. I tried making a windows service to see if the connection works there while the main program is open. This worked on Win7 and Win10. But in this case I need a Userinterface so I can´t make a Windows Service. The Application I made is a Console Application and there I have the problem its just working on Win10 when the Main App is open.
Have you checked the connection and driver configuration in the odbc manager? For both the legacy and your application? 
It uses the BDE Borland Database Engine. And I connect to the database with an ODBC Driver
If you have an application that's using still using a paradox database you REALLY need to upgrade your software. :)
I would just use https://github.com/TelegramBots/telegram.bot If you really don't want to use third party stuff you just have to implement this: https://core.telegram.org/api 
haha unfortunately I can´t. I can´t change the Main Program is an old management software and they update to sql in a few years...
Thanks guys, I'll see if I can't try and catch these types of errors and throw more useful exceptions. I think this is definitely a better way to go.
Thanks for the reply. I have adjusted the 'calling of other functions part' but I will admit that I am stumped at the returning of a bool in the MainFunction. Are you able to give me any pointers? Apologies if this is really simple to Dev. Here is an extract of the code: private void btn_perm_Click(object sender, EventArgs e) { string extension = txt_extension.Text; frm_main.MainFunction(extension); if (frm_main.IsValid(extension)) { frm_main.UpdateActiveDirectory(extension); frm_main.LoadInternetExplorer(extension); frm_main.LoadChrome(extension); frm_main.ExitApp(extension); } } //Main function that performs validation, setting and starting up Communicator and Phone Manager (excludes AD update) static void MainFunction(string extension) { int parsedValue; //Check if the text entered is numeric if (!int.TryParse(extension, out parsedValue)) { MessageBox.Show("Alas, you can only enter numeric value as an extension", "That's not a number..."); ...IF THIS FAILS THEN IT SHOULD NOT RUN THE OTHER FUNCTIONS... return; } ...DO OTHER STUFF IN THIS FUNTION.... } Thanks for any help in advance. 
Giving functions intuitive names can be very helpful in making your code more readable. If you rename your `MainFunction` to `IsValid`, I think it should become clearer what the function returns: //change void to bool static bool IsValid(string extension) { int parsedValue; //Check if the text entered is numeric if (!int.TryParse(extension, out parsedValue)) { MessageBox.Show("Alas, you can only enter numeric value as an extension", "That's not a number..."); //Is the users input valid? false. return false; } ...DO OTHER STUFF IN THIS FUNTION.... //The users input was valid (true). return true; } Now when you use it like `if(IsValid(extension)) { ... }` it almost becomes an english sentence: `if 'extension' is valid then update active directory and [...]` If `IsValid` isn't a good name for this function or you can't think of a summarizing name (because you also do "other stuff" in it), then you might want to split it into multiple functions as well.
Change the return type from 'void' to 'bool'. Boolean values are true/false. Then in your code you will need to return true or false based on the results of your validation logic. //Main function that performs validation, setting and starting up Communicator and Phone Manager (excludes AD update) static bool MainFunction(string extension) { bool valid = true; // Do validation. Once you have determined the data is invalid, set valid = false. return valid; } 
Split the validation functionality to a separate function that returns bool, slap everything else in an if block that runs when the validation method returns true: string extension = txt_extensions.Text; if (IsValid(extension)) { frm_main.MainFunction(extension); // without validation behavior frm_main.UpdateActiveDirectory(extension); frm_main.LoadInternetExplorer(extension); frm_main.LoadChrome(extension); frm_main.ExitApp(extension); } The simplest solution is probably u/tweq's suggestion, though: throw an exception. MainFunction() can throw an ArgumentException with a message about why, say, the extension is invalid, and btn_perm_Click can catch that and handle it as needed (i. e. display or log the message). string extension = txt_extensions.Text; try { frm_main.MainFunction(extension); frm_main.UpdateActiveDirectory(extension); frm_main.LoadInternetExplorer(extension); frm_main.LoadChrome(extnesion); frm_main.ExitApp(extension); } catch (ArgumentException e) { // log or display message about invalid argument } 
As a side note, I did look at the WPD COM API, not that good IMHO. I've updated the article with "An Alternative Implementation".
I haven’t found anything simple about programming. 
I hadn't considered that developers would be using the `IEnumerable&lt;MimeMessage&gt;` API in that way. I kinda figured it'd be a "I just want to download all the messages" kind of thing. Instead, what you probably want in your particular case, is something more like this: var query = SearchQuery.SubjectContains ("My Support Ticket"); foreach (var uid in folder.Search (query)) { var message = folder.GetMessage (uid); folder.SetFlags (uid, newFlags, false); } ...or, to reduce network chattiness, batch the SetFlags after the loop like this: var query = SearchQuery.SubjectContains ("My Support Ticket"); var uids = new UniqueIdSet (); foreach (var uid in folder.Search (query)) { var message = folder.GetMessage (uid); uids.Add (uid); } folder.SetFlags (uids, newFlags, false); Using the IEnumerable interface with LINQ currently is very inefficient because it will download all of the messages in the folder (at least up until the point where you stop enumerating). That said, though, your usage of LINQ in your example piques my interest a bit in that there is actually a way for MailKit to make your LINQ query more efficient by implementing the `IQueryable&lt;T&gt;` interface. I looked into implementing this in the past when I first started working on Search functionality, but I quickly decided that I couldn't easily expose the full search capability of IMAP in that way and some things would not map well, so I decided against it and just went with the Search() methods instead... but it should be possible to support some of the simpler LINQ queries that developers might do (like searching for messages with a particular subject). I've never implemented the IQueryable interface before, so we'll have to see how well it works out, but I think it might be fun to try :) Of course, that doesn't solve the original issue you had which is that when using the IEnumerable interface, there's no easy way to get the UID of the message if you want to update its flags on the server. Having the SetFlags() methods on the Message class and/or having the ImapFolder.SetFlags() method take a Message object instead of a UniqueId/index is closer to the way that the JavaMail API works. I didn't do things that way for 2 reasons: 1. Having the SetFlags-type APIs on the Message class adds yet another indirection to the ImapClient connection and can make things tricky if the TCP/IP connection is lost by the time the developer decides to update the message flags (or whatever). This gets messy quickly. It is, however, a nice high-level way of doing things... can't argue with that. 2. It means ImapFolder's GetMessage() methods would have to return a wrapper/subclass around MimeKit's MimeMessage class with the added properties/methods to support this. If I solve this in the simplest way, which is to just add a UniqueId property to MimeMessage (or a MimeMessage subclass that ImapFolder returns), then that probably wouldn't be too bad. It would solve your problem of not having the UniqueId available for use with the ImapFolder API's and it avoids the messiness of reason #1.
we are implementing something similar to this in that everything is an event and our mongo db has all copies of the document stored there. Any given 'order' contains all prior versions of the order. Its an interesting way to go as we are working with microservices and trying to keep the towers as distinct as possible.
If you want to strongly type your service method, you could use [OneOf](https://github.com/mcintyre321/OneOf) with c#7 Value Tuples: ``` public OneOf&lt;(string location, string auditor, List&lt;Part&gt; parts), (int code, string message)&gt; PartInventory(int partID) { try { List&lt;DBO.Part&gt; parts = new List&lt;DBO.Part&gt;(); .... return ( location : "XXX", auditor : "YYY", data = parts, ); } catch (Exception ex) { .... return ( code : 0000, message : "msg", ); } } ``` You could also define types (rather than using the `(string foo, string bar)` value tuples) if you want some reuse Some other notes - I wouldn't catch on `Exception` - leave that to be handled by your global exception handler 
Should it really be the aggregate which is accessing the repository? I'm in no means an expert, few years in the industry but I thought that aggregates generally should hold state in memory until the whole aggregate is persisted with it's own repository. Usually I've done the repository calling part via some service. Am I completely wrong here?
What is the problem with third-party frameworks? It's one of the best things in languages like C# and Java. You can properly find a library for anything, it's saves you a lot of times. 
I totally missed that one. I have been so heads down in JavaScript lately that I need to catch up on the latest C# happenings. I think for my next contract I will look for a multi-developer site. I have done the line developer start-up stuff for the past decade and I miss having someone to just grab a lunch and talk shop. I love the IT group and I have worked with this CTO for over 12 years in different companies, but none of them are developers.
Don't call blocking functions
You’re completely correct, but I don’t think there is anywhere in my article where the aggregate accesses the repository; it’s the other way around. If you did see something, please let me know. 
&gt; Can you give me some examples? You bet. Note that my implementation aims to be more of a generic `ServiceBase&lt;TEntity&gt;` where my team would override a few properties for things like Id column names/types (if non-default) and they'd get a more or less fully functional CRUD service for their entity type that can be injected right into the Web API controllers. Note that these services are for a DB that precedes my time at the company, has thousands of sometimes goofy tables, and is very hierarchical but not always consistent with the way relationships are handled. For this reason tools like EF would choke completely trying to generate the classes, and writing a DAL for each entity type would be a lot of repeated boilerplate work, so my project aims to fill the gap by providing most of the basic CRUD stuff by providing the necessary overrides to matched the DB as it exists today. Anyways to answer your question about feature examples, the ones you mentioned: soft deletes, user edit, and timestamp audit trails are good ones that were implemented. We also implemented a generic search feature that works across some specified columns. I did implement object graph CRUD support that, while tricky, works alright. Much of the challenge around this was figuring out what was new, edited, and (soft) deleted when getting an object hierarchy POSTed to the API from the UI. To solve this generically I used the SqlServer [Merge](https://docs.microsoft.com/en-us/sql/t-sql/statements/merge-transact-sql) operation and that works quite well. The net result of these efforts is that while we can't EF/OData tooling to automatically generate a lot of this stuff for us, our UI guys (who are great UI guys but are relatively new to .NET) are able to create what they need end-to-end in most cases and do the CRUD, collection management, searching, etc. by inheriting the aforementioned service. This is part of a migration effort from a dinosaur WinForms/WCF application to a more modern Web API -&gt; Angular application. Probably more info than you asked for :). I have a lot of respect for your project, it's definitely a much more thorough and complete, not to mention multi database provider, solution. Great work on that. Have you considered putting a link to the "A Chain comparison to Dapper" page near the top of README.md? When I sent the project to my team the first thing they asked me was how it compares to Dapper. Cheers!
This may or may not be helpful, but as a rule, I avoid magic strings in the first place.
Probably best that you do not reinvent the wheel. Look into Microsoft Identity and OAuth2. You can add them to WebAPI, MVC applications etc. A [link](https://medium.com/@lugrugzo/asp-net-core-2-0-webapi-jwt-authentication-with-identity-mysql-3698eeba6ff8) to a tutorial 
The fastest way to submit the event will be to do a http post from your application code in your processing pipeline. Any options where you write to a table and generate an event record will require a polling worker to dequeue events. SQL server does have something called service broker that was built for this type of event stream processing. I believe it will add load to your database but runs out of band of the transaction so shouldn't block your app's IO. I believe the ddl method is called CREATE EVENT NOTIFICATION
I guess I was a bit confused by the Order classes AddOrderLine() example. 
I'll be working exclusively with texture brushes unfortunately, and the user will be able to change the textures if they want, so some static detection wouldn't work :(
The problem is, I chose to do it in C#. I can't change since its too late. So i have to work with C#. It doesn't have to be complex, but the more complex it is the better 
Is this homework?
Somewhat yes. Its a massive project for my A levels that I am doing.
&gt; Note that my implementation aims to be more of a generic ServiceBase&lt;TEntity&gt; where my team would override a few properties for things like Id column names/types (if non-default) I've got some thoughts on how to do that in Chain, but I can't seem to find my sample. Mostly everything is done using annotations on the Model, so you don't necessarily need to subclass `ServiceBase&lt;TEntity&gt;`. I should create a walkthrough that covers that scenario end-to-end including audit columns. &gt; For this reason tools like EF would choke completely trying to generate the classes, and writing a DAL for each entity type would be a lot of repeated boilerplate work, That's been my experience too. &gt; To solve this generically I used the SqlServer Merge operation and that works quite well. That's what I'm using for upserts. Technically it's wrong in my case because Merge isn't atomic in SQL Server, but it's as close as we're going to get without wrapping everything in a transaction. &gt; Have you considered putting a link to the "A Chain comparison to Dapper" page near the top of README.md? No, but I will now.
Can you show up to a data center with a floppy disk for #5? /s
Most of ODBC issues for me have been failing to setup the connection. How that happens for you and the paradox DB, I have no idea. For us it's some application that does some ages old Win32 stuff..
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Fixing Those Broken Windows: Dealing with Technical Debt - Simple Talk • r\/csharp](https://www.reddit.com/r/dotnet/comments/7gonao/fixing_those_broken_windows_dealing_with/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
No mention of SonarQube? Pretty much the only way to manage technical debt across a team or teams imo.
Removed: Rule 4.
Removed: Rule 4. For easy reading of Excel sheets, check out EPPlus.
Removed: Rule 3, spam.
Why would this be removed?
Really great post! Modeling for events in a domain is definitely a pleasant thing to do. What I liked especially in the post is the clean implementation. Lot of posts we see in this field always contain some kind of leaky abstraction. It's either IQueryable in the Repository interface where EF shines through or totally messed up Entities in favor of persistence. None of that in this post. Simple and elegant!
Rule 3 - fair enough Rule 6 - no sir, there's no financial gain involved
You have to do some research and work yourself. Tonnes of resources out there on random number generation and reading data from Excel.
I think it's just an advertorial. NDepend is very good though. It's similar in some ways to SonarQube and it has a build version to produce reports as part of the build. It's more at the interactive end of the spectrum, it's got a nice LINQ provider so you can query your codebase, code diagramming, lots of stuff really, I'm not selling for them unless they give me a free copy. I'm not a huge fan of Sonar. I've never seen it used productively though, only as a producer of statistics for reports no one cares about. I can imagine it has uses for teams that work that way. 
Been looking and that's why I'm asking
Then you need to supply better information about what you've tried, and why it didn't work. You need to include the code you're using and how it is/isn't working. Otherwise, you may need to access additional rudimentary learning resources available online or via /r/learnprogramming in order to implement the features you're requesting.
Maybe bad, but the alternative is fragmentation of the community - which looking at other frameworks can kill any need to upgrade, which compounds the issue. I don't know if you have had to deal with PCLs across multiple platforms, it's implemented in most part the way you want. It really starts sucking overtime.
Well you can send physical disks for large amaounts of Data, so technically yes!
Can you walk it there personally?
&gt;You can then use FillRegion() with a stroke to achieve an outline. What do you mean by this? There aren't any overloads for FillRegion() to add a stroke :(
Read compiler messages. They are useful. I can almost guarantee it doesn't just say you're "missing something". Then look at this line and see if it makes sense. It probably even has a red squiggly line under it: while ((result = reader.ReadLine()) != ) 
your right I tested it and i put bb and it comes out as a word. 
Removed: Rule 4. In the future, be sure to include the full error message and line that the compiler is complaining about. The best way to check for the end of file when reading is to use the [`StreamReader.EndOfStream`](https://msdn.microsoft.com/en-us/library/system.io.streamreader.endofstream%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) property. In so doing, your `while` loop will look like this instead: while (!reader.EndOfStream) { result = reader.ReadLine(); if (result.Contains(KeyWord)) { FoundWord = true; break; } }
I changed my code as per your advice and its now working. I changed the result.contains to result.equals and now i am not getting any false positives anymore.
If you spend the time getting all the modules working, and integrating its reporting and orchestration with the rest of your management chain then it can be great. Otherwise it turns into a glorified dashboard only the lead and architect ever peek at then pretend it does not exist. 
&gt; We need to spend this sprint getting coverage up to 80% said every directory, always.
But we can't afford any story points for the extra, so improve your coverage and output for the same number of story points. This is often said at the end of the sprint/cycle meeting where everyone agreed to points. This will continue even after your coverage is close to 85% and all that is left is stupid properties and generated code. You then start tweaking the test load and scope of analysis so that you get 100% for the boss. Now the reports are useless to you as a developer but hey, the boss is happy!
Sounds familiar :)
💯
What’s SonarQube? (I realize I could google it just curious on what you have to say about it)
 if(DateTime.Now.Hour == 16) 
Removed: Rule 6.
Removed: Rule 4. Please describe the problems you're having and what you tried to resolve it. Also, you have several issues: * you have typos in your code (`clsoe`, `sqlSmd`) * you try to assign an invalid empty `char` (`''`) instead of an empty string (`""`) to your text box texts * you specify a string literal `Registration is successful` but you need to use double-quotation marks `"`, not single apostrophes `'` * the text box text properties are probably `.Text` not `.text`
Yup I see what you mean. Unfortunately it doesn't accept a Pen. You're going to have to do a more creative solution then. Since your code appears to be drawing a line with a stroke what you could do is draw first the line with a slightly larger stroke effectively creating an outline. Then draw on top of that with your current code. 
Disclaimer: I haven't used local functions (still on C#6). In a similar realm, I sometimes use short lambdas in methods to contain specific functionality to the functions scope. I imagine I would do the same with local functions: short, sweet, and to the point. In the absence of local functions, if I intend to use a function with just one method, I'll create a private class method and make my intent clear, either with comments, or an appropriate method name. I suspect I would continue to do the same with the existence of local functions. I don't see a purpose to inflating a method's size and readability just to contain a method to another method's scope.
The only semi-reasonable solution I've come across is using GdipWindingModeOutline which is hardly ideal but it sort of works. The method you suggest was unfortunately one of the first things I tried :( produces the following effect...https://i.imgur.com/2TyFTRc.png
It’s a code coverage tool. It’ll check through your code to look at things like potential vulnerabilities and suggest better coding practices. 
To be honest I'd only use local functions for performance reasons (avoiding closure objects) and for iterators
My DI EL5: * Objects want things (other objects) when they get created * When you want a new object, instead of making it yourself, ask DI to make it for you. (In ASP.NET MVC, MVC does this for you lots when it creates a controller automatically when a request comes in) * DI finds all the things the new object needs, and makes the object for you with those things. * Usually DI is nice and disposes all the things that need to be disposed after you leave the scope you made the object in (Object lifetimes are taken care of) Why is this good: You don't need to pass around a million object references manually or resort to static fields. You also don't need to stress about disposing everything.
You need one continuous draw so you can lay one on top of the other and achieve the result you want. Drawing incrementally in the mouse move event you were seeing the result. Instead of on mouse move you need to do that in the OnPaint event. Mouse move you need to maintain a GraphicsPath object of where the mouse has been by adding lines. This object needs to be accessible from OnPaint as well. Then in the OnPaint event you redraw the base layer with wider strokes first then on top of that your original code to show the texture. Hopefully that makes sense.
They tend to die, that's my problem with them. So unless the library is doing something I can't do myself in a reasonable amount of time, I'd rather not use it.
Why are you using a DI framework in the first place? You aren't building a platform where you expect people to drop-in plug-ins or alternative implementations. Just hand-code your dependency graph on startup and call it done. You'll simplify your code and possible improve performance. 
Try this. I've tested it, should do what you need. Needs cleaned up though. public partial class Form1 : Form { public Form1() { InitializeComponent(); } private GraphicsPath _drawingPath = new GraphicsPath(); private Point lastMouseLocation; private bool drawing = false; private void Form1_MouseMove(object sender, MouseEventArgs e) { if (e.Button == MouseButtons.Left) { drawing = true; _drawingPath.AddLine(lastMouseLocation, e.Location); Invalidate(); } if (e.Button == MouseButtons.None &amp;&amp; drawing) { drawing = false; _drawingPath.StartFigure(); } lastMouseLocation = e.Location; } private void Form1_Paint(object sender, PaintEventArgs e) { e.Graphics.SmoothingMode = SmoothingMode.AntiAlias; using (SolidBrush b = new SolidBrush(Color.Blue)) using (Pen p = new Pen(b, 60)) { p.StartCap = System.Drawing.Drawing2D.LineCap.Round; p.EndCap = System.Drawing.Drawing2D.LineCap.Round; p.Alignment = System.Drawing.Drawing2D.PenAlignment.Inset; e.Graphics.DrawPath(p, _drawingPath); } using(SolidBrush b = new SolidBrush(Color.Green)) using (Pen p = new Pen(b, 50)) { p.StartCap = System.Drawing.Drawing2D.LineCap.Round; p.EndCap = System.Drawing.Drawing2D.LineCap.Round; p.Alignment = System.Drawing.Drawing2D.PenAlignment.Inset; e.Graphics.DrawPath(p,_drawingPath); } } }
1.create azure account 2. Create app through default displayed WISYIG 3. Click on app and download publsih profile 4. Import publish profile to Visual Studio 5. Click publish...
Keep them short. Don't nest them inside each other. Declare them before use. If you have more than one, be sure they are named something distinct and meaningful. Avoid mutating variables from the outer method in the local method: when possible, return the new state, instead, and let the outer method mutate the variable. E. g. // Don't do stuff like this int OuterMethod(string s) { int x; void Aux() =&gt; x = s.Length; Aux(); return x; } // when you can get there like this, instead int OuterMethod(string s) { int Aux() =&gt; s.Length; var x = Aux(); return x; } (Obviously, that's a *very* contrived example!) If you wouldn't declare it as an anonymous function, it's probably too long. If you find yourself declaring the same local method in multiple places, you're doing it wrong. In both cases, it will probably be best to just make it a separate function. About the only reason I'd want to see regions would be to hide auto-generated code. Using them for organization either adds no value or is a patch on your class/method/file being too damned big, and using them to hide code is usually a sign that the enclosed code needs refactored or properly commented, instead. IMO, but you're asking for opinions, so. In terms of what I've found them useful for, I made pretty regular use of local methods for wrapping up test case creation for unit testing to keep things like argument order consistent and force myself to include test names. Can also be handy for slapping a short-but-meaningful name on an operation that is kind of wordy and opaque, but isn't readily captured as an assignment to a well-named variable. [There's also this comment I made on a previous discussion.](https://www.reddit.com/r/csharp/comments/6ctrv5/c_local_functions/dhxmfq4/) When I was tinkering around most recently, though, I found myself ripping them out in many places I had used them (outside of the unit test cases), because the extra indirection was often not buying me anything in terms of readability or code size. Mileage is going to vary, and it's not going to be a real useful feature for a bunch of cases. If you really don't feel like they're useful to you, it's entirely possible that the way you write code doesn't benefit from this sort of thing.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [I was inspired by last month's post about Electron.NET, so I made a youtube-dl GUI with it](https://www.reddit.com/r/dotnet/comments/7gsacv/i_was_inspired_by_last_months_post_about/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I just read Clean Code a few days ago (currently reading The Art of Unit Testing, which is amazing), and my eyes have been opened to writing more readable code. I know what you mean about the readability of local functions. It's a bit distracting as they make the method look longer than it is. It's all preference, but personally I'm keeping them as private methods below the method they support. I think it's more readable as it gives a more clear separation between units of work. 
This is a basic managed serial port implementation I wrote for Unix systems that have a POSIX compatible `/bin/stty`binary. The API is very similar to the standard .NET `SerialPort` class, with some minor differences and omissions. Unlike the mono implementation of `SerialPort`, this implementation makes no syscalls at all and therefore requires no natively compiled bridging component. The entire implementation is managed, and only relies on opening a filestream to the port (usually `/dev/tty-something`) and calling `/bin/stty` to configure the port.
I've only been told by people to use manual dependency injection to understand how much DI frameworks do for you. Do a lot of people use manual dependency injection?
Not sure I understand what your wrote -- are you using the MS driver or a different driver? If not the MS driver, which driver are you using?
Would you believe that I've been working on this for maybe 10 hours or so and my solution is the most complicated dumb thing in the world, then yours is super simple, works almost the same, and the whole gap between our solutions is mostly just me not moving my shit to Paint right away instead of keeping it in MouseMove? These are the things that make me an idiot. Thank you. Thank you for showing me not to overlook good practice.
How often is chain updated or is it pretty stable already? I came across it last week and wasn't sure it was currently being maintained which put me off using it
That's impossible to say. People who use manual dependency injection rarely talk about it. They usually just refer to it as "calling constructors". In my personal opinion, dependency injection frameworks are grossly overused. Scenarios where they make sense to me include: * ASP.NET Controllers. You need a DI framework because you don't control when a controller is created. * Platforms. Where the user will configure which dependencies to use at install time. Beyond that, you often write roughly the same amount of code to deal with the DI framework as you would have when just calling constructors. But you lose the ability to cleanly see and step into those constructors at design time. Instead you have to throw in random break points and hope you catch the thing you want to see at run time. And that's assuming that everything works perfectly. As you have found, the DI frameworks can often be brittle. I've removed DI frameworks from more applications than I've added them to. Each time was a fight with the tech lead, but I always win in the end because there is some random ass bug or performance hit caused by the DI framework.
Here's a better question: How is your specific project actually benefiting by the DI framework? I'm not talking about wishy-washy, unquantifiable things the bloggers want to talk about like "loose coupling" (it's not, it's just hidden coupling). What I want to ask yourself is whether or not there is a real, well defined problem facing your particular application. *** Note all the down-votes I got without a single counter-argument? That's because they are using a DI framework because some blogger told them they needed to. The vast majority of them don't actually know why they have one, they are just practicing cargo-cult programming. http://www.jargon.net/jargonfile/c/cargocultprogramming.html
&gt; Does anyone know whats the difference there between Win7 and Win10? Both 64 Bit. Are you sure? Depending on how .NET is setup, you may be running in 32-bit mode on one machine and 64-bit on another. You may want to explicitly compile for one or the other and retest. (I've run into the 32/64 bit issue before, but it was a long time ago and I don't remember the details.)
The main benefits are that you can add plugins to check for different things, FxCop, stylecop, code smells, OWASP vulnerabilities etc; it maintains statistics on all of these over time so you can see if the problem is getting worse etc and you can set quality gates to ensure that certain things you define (e.g. &lt;70% code coverage or no more than 10 major issues added) occur 
thank for the reply :) I compiled my Application in x86 (it also uses an old 32 bit odbc driver) 
No I use an old Driver called Intersolv paradox odbc driver. 
Well, things like Telegram are pretty new and popular, there will always be someone who will keep a popular library up to date. You can take for example, like /u/Dennis_enzo said, the [Telegram.bot API](https://github.com/TelegramBots/telegram.bot). It's open source, so even in worst case you can update it by yourself.
Thanks for sharing!
I enjoyed reading [Adam Nathan's](http://www.adamnathan.net/wpf/) book for WPF, while I learned MVVM by myself. Have you read anything by [Laurent Bugnion](http://www.galasoft.ch/articles) ?
Very interesting. .NET Core inside Electron... The first question was: Why? But the answered it in the Readme.md. Apparently many people had this question :D Thanks for sharing
Nice work keep it up!
Also note you are using he incorrect property, you want total elapsed not just milliseconds. If it ran for 20 minutes and 5 milliseconds your code would tell you it ran for milliseconds
Also highly recommend this as well as the authors blog, he’s basically a next level genius and his posts on DI as well as basic clean code are great. He has a lot of functional stuff too.
Electron.NET is really very cool. I'm working on a "hybrid" F# ASP.Net Core project. The same project can either be deployed to IIS/Kestrel and run as a website or downloaded as an executable and run in Electron. And the hybrid feature is out of the box!
I prefer Visual Studio, for front-end I might use Visual Code. If I would want to code in C# on non Windows system I would search other IDE.
There's no process defined or supported for this, so technically no.
You're welcome. Just takes practice!
Thanks everyone for your help. I managed to get his working with RakijaH suggestion and it is working great now. I have also split out the MainFunction into seperate functions (named appropriately now). I wonder if anyone can help with another issue. The ideal order of the app is like this: 1. Show main form (user types in extension and hits a button) 2. Close main form 3. Open message form which says "Your extension is 1234", keep this form open for 3 seconds. 4. Close message form 5. Run everything else But I can't seem to get the delay right. Without any delay anywhere it will go straight from 3 to 5 (i.e. everything else starts running while the message form is open (covering the message form). If I put in a Task or Sleep delay after 3 it seems to stop the message form from loading because the thread is delayed like [this](https://i.imgur.com/SfVhs8d.jpg). Whereas it should look like [this](https://i.imgur.com/SfVhs8d.jpg). I have tried inserting Task.Delay(3000) and System.Threading.Thread.Sleep(3000) but is there another way that I should be doing this? Any help is appreciated. Thanks.
Thanks!
&gt; ...and you can write code that will run in all the major operating systems Hm... imho it sounds a little bit too propagandistic! What are those OSes? Windows 7, 8 and 10? Some Code might run on Linux, Android and MacOS too, but not all .NET Core might be the future of the language to underpin the platform indenpendence, but *right now* C# is far from getting praised like in the above sentence!
You could start a timer when you open the message form (in the forms "Shown" event for example), like this: https://pastebin.com/3VCQHK4y
I think local functions are just okay.
Has anyone seen comments from Anders Hejlsberg about non-nullables? I've appreciated his insights in the past and would appreciate something more comprehensive than "nulls are a mistake". 
&gt;creating regions within functions Regions are good for hiding things that one finds to be code-smell
You want windows fullscreen?
https://stackoverflow.com/questions/15920067/full-screen-wpf
I see what you mean. I have tried that and the Message form does stay open for 3 seconds but it looks like the rest of the functions are also running while the Message form is displaying. The ordering currently looks like this: private void btn_perm_Click(object sender, EventArgs e) { string extension = txt_extension.Text; if (frm_main.IsValid(extension)) { frm_main.Message(extension); //Task.Delay(3000); //System.Threading.Thread.Sleep(3000); frm_main.XariosCommunitor(extension); frm_main.PhoneManager(extension); frm_main.UpdateActiveDirectory(extension); frm_main.LoadInternetExplorer(extension); frm_main.LoadChrome(extension); System.Windows.Forms.Application.Exit(); } } You can see in here where I have previously tested with inserting Delays and Sleeps which didn't work. The ideal thing is that the frm_main.Message displays on screen for three seconds (there is actually a countdown on it "This confirmation will close in 3..2..1..". But currently with the timer you have suggested it looks to still be running the subsequent functions. Any idea how to not run the subsequent functions until the Message form is closed? Thanks. 
I wasn't concerned to what the 3rd party tool was, but how it was doing what it was doing. Since it seems like you need the Dynamics data, then it somewhat of a moot point, as you need to pick up the order data after it's made its way into Dynamics. The rest of the info you gave is good, but at the end of the day, it sounds like this tool that was developed for you wasn't really developed all that well. I'd urge you not to "prejudge" the validity of a potential solution just because you think that's the same way the tool went about it. The realtiy is that the tool has deficiencies due to poor programming practices, incomplete knowledge of the problem space, and short cuts taken due to cost. I don't see anything wrong with the high level overview of what the tool does, and it sounds that, while it needs to be rewritten, that overall the tool is doing what you need it to do. There's a couple statements that you made that are somewhat vague, but also hold the key to how to approach the new solution. &gt;When it makes it to the [custom] table [within Dynamics], a "watch service" checks to see if the product purchased is a certain type How exactly is this "watch service" started? From what you said, it is a C# service, so it doesn't sound like the logic itself is wrapped up in a trigger, but does a trigger maybe fire off a command line app with arguments? Or is the watch service constantly pinging the table to see if there are new/updated records (it could be doing that on an internal timer rather than through a recurring windows task)? The "right" way (and I use that term very loosely) here would for there to be some Dynamics add in that registers an event handler that gets fired when there's an order. This is contingent on A) there being an event that you can listen for to be properly notified, and B) getting up to speed and comfortable enough with developing a Dynamics add in. I think both of those are potentially problematic and while I think you should entertain those options, for me, they'd be a harder sell than the alternatives. The alternative that I'd be more comfortable with is having some sort of recurring query of the table to get any new (or modified if you care about that) orders that may have come in since the last query. If you put this on a tight enough loop, then you can get away with not having to put a trigger on the table and you will get things at near real time which still sounds like it should be sufficient. You've mentioned that you perceive this approach to be inefficient or wasteful, and I can assure you that if you do it right, it isn't. I think the recurring query option is a much better alternative than developing and add in for Dynamics because the latter option requires programming against an API and environment that you are unfamiliar with and dealing with the keeping up with any changes made within Dynamics. The recurring query option really doesn't require any sort of specialty knowledge and will be much quicker to develop, easier to debug, and have a quicker ramp up time for any new developer. At this point, regardless of which of the two solutions you go with, you now have the order in C# running in code you control. Therefore you've got far more options of how to proceed from here. You could go the more basic approach that's closer to what you described where an order that you care about get's inserted into a table for processing. This is certainly sufficient, but gets into the same issues with triggering processing of that order. I think this option should be a last resort. The other fairly basic option is to forego the writing of the order to a queue table and simply have an application event that you expect the register the processing logic to and you go about it that way. This would mean you could bypass that triggering issue and just keep it all within C#. The problem here is really one of resiliency, where if something were to happen and that process dies before an order is properly processed, then you really don't have a good way of reprocessing an order. For this reason I think you should shy away from a pure application event to process the order. A combination of the those two approaches, writing the order to a queue table, but "triggering" the processing of that order via an application event is likely the easiest, most straightforward, and simplest approach to solve this problem. There are still potential pitfalls with this approach, but they're minimal in my view and it's getting into the realm of having to determine whether additional cost of development is worth handing those use cases. If you do want to go farther than a message queuing solution or enterprise service bus will give you the ability to have a much more event driven and much more resilient solution. It's also the most flexible if your processing needs might change farther down the line. Of course, this is also going to require some more ramp up time to begin working with these technologies and for new developers to get familiar with the solution. In this case, as opposed to working with the Dynamics API, I think that additional effort might be worth it, as there are a lot of benefits that will take more effort to reproduce in pure C#.
https://stackoverflow.com/questions/15920067/full-screen-wpf
I want extension properties so bad
[Codility](https://codility.com/programmers/)'s got a lot of lessons/challenges (though without really knowing what you can/can't do/your background it's hard to say if it won't be too "deep-water" for you. Not really full-fledged programs, but I think it's a great resource for learning C#/programming in detail (but maybe not that great of a starting point - don't shoot the messenger :) ).
Mono runs C# on just about anything
Xamarin lets you write for Android and iOS. Unity uses C# and can generate games for pretty much all consoles. You even have Bridge.NET which generates JS, so you can write front end webapps with C# as well.
You could try using `messageForm.ShowDialog();` instead of `messageForm.Show()` in your `frm_main.Message` function.
[You didn't hear this from me, got it?](https://github.com/airbreather/AirBreather.Common/blob/aa70be809b32dff38c699d20da026755967c3d8b/Source/AirBreather.Common/AirBreather.Common/Danger/MyImmutableArrayExtensions.cs#L10-L24)
Haha, danger zone! Nice, thanks for sharing. :)
Not sure if Sovngarde is the right place there... Shivering Isles maybe? Or Apocrypha
&gt; Not sure if Sovngarde is the right place there... &gt; &gt; Shivering Isles maybe? Or Apocrypha Heh, that line I quoted was spoken by the unapologetic guy who opened the Solitude gate so that Ulfric could escape the city and then go on to wreak havoc. I thought it appropriate.
You'll "get there" pretty much whenever you decide. The more knowledge you have, the easier it'll be, but for some people it can be easy to get stuck in the "I don't know enough yet" phase for longer than necessary. If you have ideas for small stuff you can get started on, try. The worst thing that can happen is generally that you fail.
Btw, I added the conversion in the ToImmutableArray() direction to avoid turning the ReadOnlySpan&lt;T&gt; into a T[] into a ImmutableArray&lt;T&gt;. There's still a copy due to the nature of the conversion, but it's only 1 instead of 2.
I like to think of nulls like a [magic value](https://en.wikipedia.org/wiki/Magic_number_%28programming%29) (which usually represents "doesn't exist" or "not castable" for the `as` operator) but has the added benefit that it can blow up your program. You tend to end up putting aside some mental resources/capacity either handling nulls, checking for nulls, deciding in your head if you need to handle nulls, and so on. Whereas when handling structs/value-types, these mental faculties are freed. Even if you try to design your code around ignoring null values, it's still always lingering there. When you make a mistake, you only find out at runtime instead of compile time. It's an error that, an ideal world, could be determined at compile time (at least for common scenarios), but instead gets relegated to runtime exceptions.
*just about* is far from *all* 😉 Windows Forms is not supported to name a major example. How about ``nuget``? I must admit that I haven't tried it for about two years or so, but it didn't work at all last time.
Goto CodeWars.com and filter by C# exercises. Start with the easiest and work your way up. Are the exercises trivial? Yes, of course, but trivial questions like those on CodeWars are the very similar to ones employers will ask you to code during interviews. The only way to be a better coder is to write code..... alot of it.
But we have to be able to inject mock objects for all of the tests that we will never write. And what about the future. Think of the future. /s
&gt; isn't particularly interesting var builder = ImmutableArray.CreateBuilder&lt;byte&gt;(span.Length); for (int i = 0; i &lt; span.Length; i++) { builder.Add(span[i]); } var array = builder.MoveToImmutable(); Just one copy, no magical danger-code. If you need the raw speed of `CopyTo`, then you can use the other-direction thing just above the linked section from my original link: var underlying = new byte[span.Length]; span.CopyTo(underlying); var array = underlying.AsImmutableArrayDangerous();
So i was able to narrow down what was causing the issue. In the code i pasted above there was a closing brace that was for a using block with an oledbconnection. When passing the brace it was disposing the connection and that is what is taking too long. Unfortunately I have not been able to resolve that issue yet and any mention I could find on MSDN or SO did not have a resolution. I am likely going to have to precache all of the data until such time that I can get this onto an SQL server. Thanks for the help. 
I'm guessing here, but looks to me like this is an older version of C# that doesn't support the "var" keyword. Try changing it to Hashtable properties = new Hashtable(); and MQQueueManager qmgr = new MQQueueManager("QA_TEST", properties); 
Yeah, having the CopyTo() is what I'm looking for. Only reason I don't use something like AsImmutableArrayDangerous() is that I don't want to introduce anything unsafe, or anything that won't exist once Span&lt;T&gt; is properly released. The unsafeness here is just a stop-gap so I can see what my APIs look like if I stay entirely within the safe ImmutableArray/ReadOnlySpan world.
Install resharper. Even if it's just a 30 day trial, it'll force you into conventions for a while. 
My absolute favorite course in that specific topic is https://app.pluralsight.com/library/courses/wpf-mvvm-entity-framework-app/table-of-contents I generally prefer instructors that don't have a heavy accent, but his course is so good that it didn't even matter. You will absolutely learn something new every section.
I remember feeling that way for a little while as well when I started out, but it's honestly just a matter of learning new stuff. The more you know, the higher is the chance that you may come up with an idea of how to combine them :) &amp;nbsp; Suggestions: Make stuff that's already been built - you can learn a lot from this - like a calculator for basic/advanced mathematics, jackpot number generator and save the numbers in a .txt file, or whatever format you like - you could learn WPF to make a GUI to visualize it etc. &amp;nbsp; Databases, like SQL, to store data like the numbers you generate with the calc or jackpot num gen etc - either form within the program or from the .txt file. Being well versed with database is a very valuable skill :) &amp;nbsp; Do code challenges like https://www.hackerrank.com/, https://www.codingame.com/home and more. It's great when lacking inspiration. &amp;nbsp; If you can afford it, you could consider buying a subscription for https://www.pluralsight.com/ - you can get a 10 day trial if I'm not mistaken. The quality there is really high and many of the instructor are known names in the industry and are very thorough when explaining why, how and when about a subject.
I'd guess it's paid (because "Start free trial"). I'm looking for some free sources.
That looks like it did it. Thank you so much.
Yea, I just edited my comment. Get the free 3 months by going to https://www.visualstudio.com/dev-essentials/ and signing up. Once you're in, go to your benefits section and find Pluralsight in the list. It will bring you to the Pluralsight signup page where you will automatically get 3 months for free without having to put in a credit card or anything
Depends what you want to happen with the buttons when the screen is bigger or smaller. You can put them in a grid and each control will have its own column. You can then send the relative width of each column and they will grow or shrink accordingly. If you need to use a ListBox/View, then I would either create a separate column for each control, or put a StackPanel/WrapPanel/DockPanel in one column, then all of your controls inside the panel. It all depends on the behavior you're expecting when controls are resized
I'd like to disable resizing. Static size of each button and text area.
Thanks one more time! Looks great!
If your entire view is statically-sized, then it really doesn't matter what you decide to go with. If I had to choose, I suppose I would rather see it the way you have it in your example.
I will say, don't get discouraged if he goes too fast and piles a lot of new information on you. I don't know how much you know about enterprise design patterns, but it could be overwhelming having to write so much extra code for such a small result. Keep going with it and finish the entire course, then when you have somewhat of an understanding, go through it again and it gets much easier.
I don't exactly know a lot about patterns, but I'm going to get maximum from the course. And yeah, so much code for the small result. I've not expected such thing after my decision to learn C#.
Carry on using DI as you are. The person that replied to you has some "unique" opinions that are often borderline trolling behaviour, from what I've noticed in the past.. You are perfectly fine using DI, and it's how you should be decoupling your own code. :) Now, onto the actual topic at hand without silly nonconstructive comments. I strongly suspect it's a limitation of reflection with UWP which is a pretty limited platform in general. I'd advise raising an issue on Autofac's repo, or possibly asking for help from Xamarin if the problem is more on their side. But yeah, please do keep using DI. I hope his comments haven't put you off using DI, and hopefully the downvotes show you that he's trolling/wrong.
I've been through the same process about your age. Here is what worked for me, YMMV and IMHO: 1. Start with console applications. Write a game of hangman. Try parsing an xml, or csv. 2. Write a number slider game (with or without graphics). Then go back and stick in some gang of four design patterns. Refactor, refactor, refactor. Add some unit tests. 3. Move on to MVC. Build a full stack web or mobile app on your that does some CRUD. To Do Lists and Blogs are a good start. If you are feeling hipster, use .net Core 2.0 and through Angular and or React on top of it. At the db level, look into sql normalization, and denormalization (why you would use those) and read up on the challenges of OO and Relational DB as you use an ORM. If you do that, you'll be in pretty good shape. If I were to do this again, I would add Azure to the list - MS has made some pretty good headway in cloud services over the past few years - using logic apps and serverless tech is pretty cutting edge stuff in C# dev world. The tech is always changing, so don't cut yourself short on the label of programmer. The quicker you build your skills of seeing code abstractions in your head and narrowing down on where problems lie in the code to some kind of "I tried this, and expected this, but got this, why?" frame of troubleshooting, the quicker you'll be able to write good code. But before even writing code, defining what you want is better. The more experience you get you'll find the challenge isn't so much how, but what. Domain Driven Design can help with that. 
C# is not a language that you want to self learn. Do yourself a favour and sign up for a pluralsight trial. Then get started on the C# learning path. Pluralsight is what companies give their devs for on the job training and it's fucking awesome This is the recommended learning path: https://www.pluralsight.com/paths/csharp And this is the learning path specific to the 70-483 C# certification: https://www.pluralsight.com/blog/software-development/learning-path-c-microsoft-exam-70-483 The tutorials are curated and made by the best minds in the industry like Scott Hansellman, Jeff Atwood, and many others including bloggers like John Sonmez (simple programmer) and Deb Kurata. The quality is also top notch and the paths are structured to take you from zero to certified hero. To reiterate, don't half arse learning C# and you'll make wicked progress (any language actually, pluralsight covers everything).
Check out Pluralsight. I'm pretty sure they still do free month trials. You can pick a path on there, and it will walk you through everything. Be sure to code along with the videos.
Thank you guys so much! Im thankful for all of the recources and the advice you guys have shared with me. Im sure it's going to help me out alot. When i first started, i got super hyped from all of the new thing i was beginning to learn and it made me want to keep going! I want to continue to feel that way.
&gt; C# is not a language that you want to self learn May I ask why you say this?
Every good joke has a grain of truth. 
&gt; Windows Forms is not supported Why would you want to? A Linux app should use Gtk or Qt, depending on the environment.
MVVM survival guide for enterprise architectures in Silverlight and wpf is the best book Ive found on this subject....
I have just seen the resources in the sidebar for getting started... and my heart began to glow! ...but my questions still stand, Im looking for a person to help me 1 on 1 because I'm pretty bad at self teaching and I need someone to find my mistakes.
/r/learnprogramming Look at the sidebar. Get a book and read it.
&gt; Windows Forms is not supported to name a major example. WinForms 2.0 is supported: http://www.mono-project.com/docs/gui/winforms/
Removed: Rule 4. Best bet is to check out /r/learnprogramming and maybe /r/ProgrammingBuddies.
NOW. Start building small programs NOW. Install visual studio express, make sure you get all of the desktop development stuff included in your install, and start a WPF project. Get creative, start putting things on the screen, then write code to make them do stuff. Take 30 minute breaks, and in your breaks, go read MSDN documentation and learn about .net framework stuff you didn't know about related to the things you want to do next. WPF is at the same time super beginner friendly, and has enough depth to be master friendly as well. Learn to read, modify, and write files, make some bots that interface with your favorite websites, make your own little games to hand out to friends. I'd put of learning web development until you are comfortable on the desktop. There are fewer distractions in desktop development. Curiosity, self-motivation, and your ability to find what you're looking for in documentation will be important skills for you to work on. Whatever you do, don't get scared to dive in. If you're not editing the registry (advanced topic) or doing any file deletion in your code, you're not going to break anything. Watch the 1995 cinematic masterpiece hackers to psyche yourself up, and dive in buddy. You'll be writing garbage for a while, but learning a lot more rapidly than you would from a book or a series of tutorials. Keep the books around for reference. We remember best what we have to hunt for. It's a game, enjoy it :). Once you know how to do the things you want to do, it's time to refine your new skills by putting together a foundational understanding of object oriented programming, best practices, and all of that. That's the last step before you should go out and get your first professional programming job. For now, don't worry about it. Learn to love programming before you discipline yourself.
I tend to think of nulls as "unspecified", adding nullable for value types was a huge boon for dealing with databases. I get the impression that its more about enabling the compiler to warn about possible nulls rather than eliminating them in favor of having an "Empty". I'd really like to read something from Anders about it. 
It'll let them depend on a tool to do the conventions for them rather than learning the conventions, I love Resharper but this is the wrong reason to install it. You don't really need Resharper when you're learning the basics of C#/programming, it's insanely useful for speeding up/refactoring when you're working on a big project though. At my old job the boss splashed out for 30+ yearly licenses as a priority for Resharper.
Removed: Rule 4. Make sure you've created an executable project, probably a "Console Application". Then you should be able to run your code via `Debug -&gt; Start Debugging` (or `Start Without Debugging`). Note if you choose "Start Debugging" it might automatically close the window after execution is done. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/hello-world-your-first-program
Google SOLID principles from Robert C Martin to learn some great coding habits, do's and dont's. There are quite a few videos on youtube about it. It is super important because it will help you keep your code simple. When i found about this my code and understanding in general improved tenfold. Lots of developers complicate code too much, get in problems and ruin applications - and also ruin their days banging head in a wall.
That's the point. The "null" value can have different meaning in different contexts, and entirely up to misinterpretation by whoever is reading the code. Nullable value types are fine because, as they are, it forces the developer to make conscious decisions about checking or resolving the null scenario. Though they could have been replaced by an altogether separate mechanism that didn't use "nulls" but a `Maybe&lt;T&gt;` equivalent. And yes, the upcoming non-nullable reference type feature is exactly that. Adding compiler warnings for scenarios that it can detect an unintended null usage. It's not really possible to eliminate nulls with the design of C# and the CLR. And they're not exactly _bad_ either. They do a good job for performance and memory usage in various scenarios; for example, newly instantiated arrays. If I had a non-nullable class and wrote `new MyClass[10000]`, what is it going to fill the array with? Or if I'm instantiating and initializing a new instance of a class, does it make sense that all its fields are also initialized to some non-null instances as well? Do you get into circular reference scenarios (Class A has a field of Class B, Class B has a field of Class A... how do we initialize this?) I guess bottom line, nulls aren't necessarily a problem, but perhaps it's desirable to have more first-class tooling and language support for working with them.
He's a noobie, it's the best learning tool to get him started. Think back to when you first started out. Everything is new, and you never know. Strict rules is good. Once you start to know better, rules can weight you down, but in the beginning, it keeps you afloat.
Thank got someone finally mentioned .Hour Even if it was based on .now
I guess after so many years, I am simply habituated to considering them and checking for them. I don't think the existence of null is a problem, just a concession to reality. Is "null" more or less magical than "default"? :P :)
Learn software development fundamentals (ie inheritance, polymorphism, etc). Microsoft offers free online C# tutorials and videos through MSDN (https://msdn.microsoft.com/en-us/dn308572.aspx). All the other code tutorial websites listed in this thread are great, but stick to the fundamentals in the beginning. They build the foundation. 
I was self taught also. Landed my first gig with a college as the programmer. Very easy C# applications... newest job has me relearing c# essentially. Exclusively using EF by DDD.
I think he works for plural sight, i mean op clearly said he wanted to self learn it.
ServiceProvider pattern != Dependency Injection Also you can easily create an extension method using generics to accomplish what you describe.
I wouldn’t say dependency injection is something that you “build in” to a language - it’s a design pattern that a programmer chooses to implement. In the same way that someone might use a factory design pattern, or a singleton design pattern - these are things the language allows you to do, but you can’t just write “Singleton&lt;T&gt; myVar” and you have to implement it yourself. I admit there’s some room for nicer frameworks / libraries for it though. NET Core’s dependency injection is beautiful and if it were a standalone library, I’d use that for dependency injection everywhere 100%. Alternatives like StructureMap just feel too fiddly.
&gt; The only way to be a better coder is to write code..... alot of it. I've seen people repeating/reimplementing the same code over and over. Ugly API's, ball of mud, you name it. Reading (and understanding) other peoples code and motives is essential in becoming a good coder. Reading might also help ;-) Oh and did I mention working with other people on the same project, reviewing each others pull requests? Using other peoples code and providing code others will use gives you additional dimensions for measuring good code and good coders.
Maybe this is more like factory pattern. My naming could be off.
Check out /r/dailyprogrammer. They give language-agnostic programming challenges and have a huge history you can look through.
&gt; I guess after so many years, I am simply habituated to considering them and checking for them. Oh for sure. But that's what I'm kind of talking about. We expend mental energy in "considering them and checking for them", when it might be nice to shelve that and let the compiler do that for us. (Which was pretty much the same argument moving to typed systems like C# instead of systems like JavaScript) &gt; I don't think the existence of null is a problem, just a concession to reality. I agree with you there. For languages and intended use case scenarios like C#, I think _not_ having null is a worse scenario than having it. But what would be nice, which is what's starting to happen here, is to have better tooling and language support for working with nulls; in being able to express what null is/means for different APIs, or being able to express when nulls are expected or viable. &gt; Is "null" more or less magical than "default"? :P :) "default" in what sense? Do you mean the C# `default` keyword behaviour?
&gt; Install visual studio express That is *so* 2013 :D Visual Studio Community is where it's at. Fully featured *and* free.
If I do constructor injection in VS it fills it out automatically. 
For unit testing, use a faking framework. They are designed for this.
 &amp;nbsp; *For unit testing* &amp;nbsp; *use a faking framework They* &amp;nbsp; *are designed for this* &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*^-Liam2349* 
As someone that made a GUI in WPF for youtube-dl - how are you doing the downloads? Just calling the youtube-dl.exe process with arguments? (thats what I did)
I use a wrapper library I wrote, [NYoutubeDL](https://github.com/brianallred/nyoutubedl).
Yeah, that one. I've had an MSDN subscription for a while :P
You need a ViewModel/View for each "window", your MainWindowViewModel is th ViewModel for your MainWindow, and you need a OptionsWindowViewModel and OptionsWindowView for your Options. I recommend to use Splat to register Views with VieeModels, and then you can to instance a ViewModel and then get a View for that ViewModel 
The only problem with code wars is a lot of the katas focus on algorithm efficiency, which can be super frustrating for coders just starting out. 
Thanks for the info. That makes sense that I'd need a separate VM for the separate window. Could you point me to an example of what you mean by your last sentence?
The mere presence of a constructor that has arguments *is* dependency injection.
cool, but is that then just calling the youtube-dl.exe with argumetns? via ProcessStart (or whatever its called)
I would inject a service into the MainWindowViewModel that handles showing other windows. It could have extension methods for specific windows that take the model object as a parameter and create the VM and view.
Check the edit, if you use the "GetView" extension method, you dont need the "ViewModel = new MainWindowViewModel();" line in your window constructor. Also, I recommend to bind your ViewModel to your view via code behind, not via XAML.
Well, put simply, yes. But I also expose the command line options programmatically via PropertyChanged interfaces for easy one- or two-way data-binding along with (de)serialization of modified options for simple saving and loading of default options. So it's more than just a ProcessStart, but only just. :)
Cool, thanks for the info!
What you described is the ServiceProvider pattern exactly. Even with the Factory pattern, you would still be working with a concrete implementation (the factory) unless you used Dependency Injection to inject your factory.
Dependency injection is when when something that a class needs gets passed in, typically via the constructor. A service locator is when your class requests something to give it a dependency, such as `serviceLocator.Resolve&lt;T&gt;` [le stack overflow from a quick google doodle](https://stackoverflow.com/questions/1557781/whats-the-difference-between-the-dependency-injection-and-service-locator-patte)
sup /r/pcj pal
&gt; I don't think the existence of null is a problem, just a concession to reality. I would disagree on this. `null` is sort of an escape hatch from the type system. We could easily have a `Maybe&lt;T&gt;` or `Option&lt;T&gt;` type that held its place instead by common convention. The hardest part would be array creation, but that could be handled in user code by a construct like `new Thing[5]()` (construct an array of 5 new `Thing` instances using the constructor `Thing()`) or `new Thing().Repeat(5)` (construct an array of 5 positions referencing the same `new Thing()`) with an `unsafe` escape hatch for explicit uninitialized address space. If we had that, we would never have to check for a null because it would already be the wrong type and would have failed to compile. Consider how many dev hours have been spent and how many language features exist for forms of `if (x == null)`, `x?.Foo`, `x ?? y`, and so on.
sup 😎
&gt; Reading (and understanding) other peoples code and motives is essential in becoming a good coder. Reading might also help ;-) Also sometimes you look at someone else's code and think "My god, who created this horror?" ...and it's important to realize that *sometimes you're right and they wrote something horrible*, and sometimes there's method behind their madness and you will start to get it after you've read a bit, but more often the former than the latter unfortunately. There's a lot of bad code out there, and unfortunately the good stuff usually just gets kept as-is so most of what you'll be maintaining is the garbage, the stuff needing you to thoroughly understand what it does so you can throw it out and rewrite it completely and end up with output indistinguishable from correct output. 
&gt; The worst thing that can happen is generally that you fail. When it's a small personal project, failure isn't a bad thing, and usually gives you an opportunity to say "okay, what can I learn from this? And what do I need to learn to succeed?"
Because it's the first day it's available this year. Adventofcode.com has daily semi easy sometimes kinda tough challenges
Actually.. there is VS 2017 Express if he ever intends to start a small enough company 
Regarding those nullable reference types - I see that they're not having the values retrieved by `p.Value`; rather the nullable variable is used standalone. I wonder if this will be carried over to nullable value types?
Use Bob Tabor
Removed: Rule 4. Make an attempt and include the code you have. How to resize objects will be very dependent on the type of application (e.g., Unity, WPF, UWP, WinForms) and how you've designed the application.
Check out the Coursera session on beginning game programming. You will start working on games immediately while learning not only C# but basic programming knowledge as well. I don't have a desire to be a game developer but found this course an engaging way to learn how to program. https://www.coursera.org/learn/game-programming
Pluralsight.com. Monthly it’s inexpensive and it’s hand down the best C# learning companion. 17 years c# experience here and I still use Pluralsight regularly. 
Training for the mcp exam must have been wrong. I will look it up.
Better yet, add StyleCop.Analyzers to your project. 
Actually there is. So you could send a disk to azure, attack it to a vm and point iis to that directory. https://azure.microsoft.com/en-au/pricing/details/storage-import-export/ 
Oh yeah. I bet they will let you plug USB HD’s straight into the server stack.
Hi, would I be able to repost this if I was to add the code of the Tutorial I am following? So I could get a response on some walk through on the tutorial? Thanks 
A ListBox is used to display a collection of items (data) in a list. If you just want to display fixed content it is better to use a StackPanel or a Grid. A ListBox can have a DataTemplate that defines how each item in the list should be displayed. I you have a collection of items each containing of a TextBox and 3 Buttons then you could use a ListBox with a data template that defines how each record should look like
&gt;I admit there’s some room for nicer frameworks / libraries for it though. NET Core’s dependency injection is beautiful and if it were a standalone library, I’d use that for dependency injection everywhere 100%. I'm not sure if I'm understanding your statement correctly, but it is a [standalone package](https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/). 
Not in its entirety. If you had a question about a specific small part, you could post that code and ask for clarification.
Also it’s really not that good, I ended up moving to AutoFac because it’s more mature and way more feature rich. 
I don’t know how I never noticed this- you are in fact correct. So you can use it in any plain .NET Core app? I had just assumed it was built in to the ASP.NET Core MVC packages, because so far I’ve only used it for web apps.
I just really liked the .NET Core DI package because it seemed awfully clean in comparison to StructureMap (which was what was used at work before we started developing with Core). Out of interest, what features do you use in AutoFac that are lacking in the .NET Core DI package? Just briefly glancing over their docs now.
The latest package version is .net standard 2.0 so you can use it in any platform that supports that version. [Supported Versions Table](https://docs.microsoft.com/en-us/dotnet/standard/net-standard). Usage of it is pretty simple IServiceCollection serviceCollection = new ServiceCollection(); serviceCollection.AddSingleton&lt;T,K&gt;(); serviceCollection.AddTransient&lt;T,K&gt;(); serviceCollection.AddScoped&lt;T,K&gt;(); IServiceProvider provider = serviceCollection.BuildServiceProvider(); var instanceOfT = provider.GetRequiredService&lt;T&gt;();//Throws if not registered var instanceOfT = provider.GetService&lt;T&gt;();//Returns null if not registered There is even a library which mixes this and Castle.Windsor together [here](https://github.com/volosoft/castle-windsor-ms-adapter). That said, there can still be a lot of features added to this framework.
Registration sources, modules, registration by convention, and some of the implicit relationship stuff, off the top of my head (like putting a Func&lt;T&gt; instead of a T in the constructor parameters for example).
Registration sources, modules, registration by convention, and some of the implicit relationship stuff, off the top of my head (like putting a Func&lt;T&gt; instead of a T in the constructor parameters for example). But I did like the Microsoft stuff when I was using it. I’m still using their logging and config stuff.
look into File.AppendAllLines - but since these are csv files, past the first day of the month you want to skip that first row https://msdn.microsoft.com/en-us/library/dd383691(v=vs.110).aspx Heres how to get all files in a Directory https://msdn.microsoft.com/en-us/library/07wt70x2(v=vs.110).aspx
It seems like more and more of .NET Framework/Core is being released as separate packages. Probably trying to reduce bloat and allow other components to operate on their own release schedule so they can be updated/fixed without having to release the entire framework. I imagine they try to keep anything separate that is not required to meet the minimum requirements for the .NET Standard api spec.
Why wouldn't you use a DI framework when you're in full control of everything? Doesn't it save you time?
Well you can do sure, but sometimes you just don't *need* the full blown container to it. There's nothing wrong with using one though in that situation. It's a personal call I suppose. http://blog.ploeh.dk/2014/06/10/pure-di/ http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/ These are pretty good rundowns of why you might want to use one vs manual. He has an exceptionally good book on the topic: https://www.amazon.com/gp/product/1935182501/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182501&amp;linkCode=as2&amp;tag=ploeh-20
That’s not dependency injection.
Removed: Rule 4.
This is a prime example in software engineering of the cure being worse than the disease.
Maybe for small projects, but MVVM and mainly ReactiveUi, is a great tool.
Maybe for small projects, but for bigger projects, ReactiveUI is a great tool. And if you need to develop a multi platform project, RxUI is great
That makes sense, thanks.
You can invert your learning method. Instead of attempting to learn the language to get to a point where you can start your own projects, you should start a project and learn the parts of the language you need to know to accomplish your task.
Yeah but that pain is well worth it in the long run. It's super important to understand the implications of the code you write.
I know too many devs who use resharper as a crutch. I agree that it can be a useful tool but damn, nothing is more pathetic than watching my colleagues flounder when they can't use resharper. Lots of them will say "resharper told me to" when I ask them why they refactored something. Face palm.
Its saying i am not using the numberOne variable.
You are not reassigning the variable which is giving you the warning. Ints are initilized as 0
You never assign a value to `numberOne`, but you try to check its value with `while (numberOne != 4);` Did you mean to assign the value of `Convert.ToInt32(Console.ReadLine())` to the variable and switch on that? numberOne = Convert.ToInt32(Console.ReadLine()); switch (numberOne) {
numberOne = Convert.ToInt32(Console.ReadLine()); switch (numberOne) { this fixed it... out of curiosity is there another way to write this database.displayMovies(true); is there another way to set that to true.
The reason youre getting down cited is because this sub is more for csharp news and high-level discussion. You may have better luck posting on /r/ learnprogramming or a framework specific sub.
I disagree that this came in disregard to "Rule 4" -- somewhat. Yes. I could have gone into more detail in regards to the code that I have already written, but should I bore the audience with the details they should already deduce from the information given? I have stated that I have the code set for all else, except to pull the specific CSV files from multiple directories, and to combine them. If it would be better off, then I could explain that the code I am trying to create is far more complex than the issue I've described, then certainly, I'll go deeper into the heart of my program, but that isn't what the public would like to know. They do not want to hear of the portion that is working, only the portion that is not. I will agree that the wording could/does come of as looking for a written class, but the reply from /u/saddertadder was an example of how it was not. So, in order to appease "rule 4" should I post the 100 lines of code preceding the point in which I'm looking for an answer? 
But Mono doesn't run everything.
Your post reads like, "Here are my requirements, make it for me." No question in there. The concepts you're asking for could be googled. "C# combine files", "C# read files in directory", even "C# joining multiple csv files into one" yields quite a few hits. Specifically out of [Rule 4:](https://www.reddit.com/r/csharp/about/rules) &gt; If a question could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed.
&gt; is there another way to set that to true. Not really. Maybe I'm misunderstanding; could you elaborate or write a pseudocode example?
case 1: database.displayMovies(true); break; could i do something like database display movies = true. or database.display movies == true
No, you can't change how you invoke that method. But `MovieDatabase ` could be rewritten to have `displayMovies` be a property, in which case you could write: database.displayMovies = true;
The part that's hard to learn from books is how to put all the pieces together. For example you might understand classes and inheritance but it's hard to know where to use it. I think it's best to start writing a small game or utility and keep reworking the code as you learn new things. It will feel like you are wasting a lot of time but those small decisions about architecture and code layout and always worth it in my opinion.
No, it's saying you're using it without assigning a value to it first.
Maybe you can employ [generics](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/) to strongly type your return types and share the manager logic with minimal duplication.
im not getting down voted, you are ;)