Are you saying it's not worth fighting, or that it's usually correct?
One thing I noticed is that you have hardcoded "appsettings.json" in at least two classes (redundancy/magic val). Consider having a static class somewhere which provides that public const string. Otherwise, not bad :)
Please refer to the codeshare links - or are they not working?
This, or, take initiative at work to start a new project of some scale there, something you design and build from scratch. 
Sorry i have no time to write something more useful except one little bitching: Don't use MD5 for password hashes that get transmitted over the internet. Read this: http://security.stackexchange.com/questions/19906/is-md5-considered-insecure
Being a good developer or architect isn't about being an expert programmer. I've got a few expert coders under me and I'd say that they aren't the world's best devs. If you want to make that leap into the world of a tech lead or architect then you need to understand not only the coding part but a large part of project management and infrastructure. While every project and career is different, I'd argue that you need to go wider and more shallow with knowledge. Understand how technologies work together. Understand the importance of testing and how to come into a project and implement a testing framework that is actually useful. Understand what environments your application needs and how to create them. Make sure you know how to create and maintain a one click deployment and promotion process. Know how to generate meaningful performance metrics and how to present them to business to support your argument. Knowing the ins and outs of your application is critical. Sure you can be a shit hot coder but more times than not, the questions and problems that come up revolve around the issues I mentioned. 
Also interested...
Yep.I'm wrong on that one. Will admit. My boss is showing.
This one isn't 100% relevant to /r/csharp but I think that Software Engineering Daily is a great podcast for just keeping up with what's going on in the industry in general.
So I can do away with `reqSuccessful` and keep `RetrieveResult` as a separate class altogether? And I assume T equates to `stockRecord`? This is new to me.
&gt; I'm not familiar with Unity, so I don't know where the Block class is defined.. Is it defined in Unity or in your own code? I'm guessing this is the issue. IIRC, there is no `Block` class in Unity. /u/JohnMarston000, can you post your `Block` class code? If you don't have one, then I'm guessing you have a prefab named "Block" and are trying to use it in your code. Prefab names don't translate directly to C# code as you are doing here. Instead, try changing your use of `Block` to `GameObject` and see if that helps. (`GameObject` is the common class that any _thing_ in the Unity game environment extends from.)
This. There are a couple things I would add not tech related. Having leadership skills are critically important. The team has to trust the direction in which you are leading and have them know that you are looking out for their interests. It's also important to know on when to push your devs just a tad more to seek out the right answer to their problem and when to pull them when they feel they are struggling too much and hindering the teams output. Praise them only for major accomplishments, but also down play the little things, as an expectation of the job, but show them how they are growing. Especially for junior devs. 
At 5 years, you should have a good solid knowledge of programming. You really need to expand your view of what good development and systems are. Its less about which technology stack your using and more about good management and development techniques. [This list](http://www.nomachetejuggling.com/2014/02/05/top-10-career-changing-programming-books/) is a good starting point. The only book I'd add is the Mythical Man-Month by Fred Brooks.
WPF takes about twice the development time, why would this sort of app even benefit from it ? 
I like this site, it's more of an aggregator: https://dotnetkicks.com/
There's a limit to how much you can gain from working on a personal project (or any project where you're the sole developer, really). It's unlikely that a personal project will ever face the kind of scalability and maintainability concerns that a good architect has to be able to deal with, and if you have bad development habits, working on your own can just end up reinforcing them.
Hot tip: don't.
Oh boy, don't you just love adware?
Adware is cool though
[removed]
[removed]
No, don't go on a thread just to spam your useless trolling. If you don't like Adware, don't go on a thread about Adware
&gt; if(String.IsNullOrEmpty(mystring.trim())) I tried this in C# pad, and it does throw a null reference exception. I'm assuming because .Trim() is running against a null reference before IsNullOrEmpty executes. i.e. string myString = null; if(String.IsNullOrEmpty(myString.Trim())) { Console.WriteLine("Null or empty"); } else { Console.WriteLine("Not empty"); } Result: Object reference not set to an instance of an object.
It might be a little slow due to lots of traffic, but it is up as far as I can see
No worries. I thought maybe I was confused on the order of execution. 
Thanks. Also, this is a personal project, mostly for practice purposes. I just referenced my professor because I was trying to take his advice in mind while doing this.
You should definitely learn the XAML. The whole point of XAML is to be imperative, not declarative.
It's nice but Visual Studio can already provide some of those numbers with [Code Metrics](https://msdn.microsoft.com/en-us/library/bb385914.aspx?f=255&amp;MSPPError=-2147217396) and [Code Map/Dependency Graphs](https://msdn.microsoft.com/en-us/library/dd409453.aspx). It seems Sonargraph generates a lot of data but I find VS views and tables easier to read.
As for the helpers, I used it in that way because is the way MVC6 makes its own dependency injection. [Here's where I got that information and approach](http://docs.asp.net/en/latest/fundamentals/dependency-injection.html). About the LogicController, I tried to same the error because I didn't wanted to give any other detail to the client-side app. But I'm not sure how I can group those 3 different validations into one. Thanks for the input :).
Yeah, I need to add something to log in the Exception, I'll try to use [Serilog](http://serilog.net/) for that. What can you recommend instead of returning from the catch blocks? The interfaces I made were for the [Dependency Injection](http://docs.asp.net/en/latest/fundamentals/dependency-injection.html) approach that the new MVC has built it, but I agree that should be used for more than 1 class. How would you handle that? As for the Readmes, I'll try to add them as I progress with the project. Thanks!
True, it depends what you need. Also some of the VS features require to have the Enterprise Edition which is not cheap. 
Report it for what?
Why are people downvoting a legitimite question. 
If they feel it's a thread promoting malicious software development or a post not suitable for /r/csharp.
&gt; No Tests Dumb me, I'll try to address that. &gt; Duplicate code/query in DirectoryController.Get(). Use something like the repository or command pattern to make queries reusable. It is about this lines in particular right? // Search using the provided term. response.Data = await (from a in _context.Client where a.Active &amp;&amp; ((a.Name.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) != -1) || (a.JobTitle.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) != -1) || (a.Location.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) != -1)) orderby a.Name ascending select a).Skip(start).Take(length).ToListAsync(); response.RecordsFiltered = await (from a in _context.Client where a.Active &amp;&amp; ((a.Name.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) != -1) || (a.JobTitle.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) != -1) || (a.Location.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) != -1)) select a.Id).CountAsync(); Can you refer me an example that you consider a great one that could me help me out with that? &gt; Don't you have to validate some things in DirectoryController.UpdateClient()? Everyting can be updated even if id doesn't exists? Didn't notice that. Where is it recommended to do that kind of validation? Should be outside the controller in a helper class? Or should be in another layer of the project? &gt; Why is DirectoryController.Get() a post and not a get? The one that has **[Route("getClients")]**, is because I'm receiving a request body, which are the ones that come in **HttpContext.Request.Form** from a JS library called [DataTables](https://www.datatables.net/). I think having a comment would solve that flag in a code review. &gt; You use await/async, but always directly await a result. For example DirectoryCOntroller.Get(), you query for both a respone.data and responseFiltered, why not let those queries run async and set the result when both finished. You think this is what I need ([Task.WaitAll](https://msdn.microsoft.com/en-us/library/dd270695\(v=vs.110\).aspx))in order to address that? &gt; You created classes like LoginHelper, when you already have a login class. Why not hide the login validation in this class. Because at the moment you have an Anemic Domain Model, which is described by many as an anti-pattern New topic I gotta learn :). Thanks a lot for your input, really help me to see things I though were always good practice. 
That seems excessive. Why so many parameters? Can we see some example code?
&gt; I will read up on the dependency injection approach in the context of MVC So far I kind of liked, you should give it a shot. &gt; Whether or not you're implementing a logging solution, you might want to format the exception message in the response/reason phrase depending on value provided to the caller. Case-by-case basis of course. (Tip: if you're setting the reason phrase of a response be sure to remove new line characters!) Gotcha! I believe Serilog has built-in templates for each type of catch I want to log, but gotta dig into that too. Thanks again!
Those values are guaranteed to always have a value, that's why I didn't try it to validate it. What I should have done is validate if this: var request = _contextAccessor.HttpContext.Request.Form; Doesn't come up null.
Here is the class in question: internal class CharacterCard { private readonly string name; private readonly HeroBattleStats strAgiInt; private readonly Basics basic; public CharacterCard(string charName) { } public string Name { get { return name; } } public HeroBattleStats BattleInfo { get { return strAgiInt; } } public Basics BasicInfo { get { switch (BattleInfo.statType) { case "Strength": basic.baseHealth = 200; basic.baseMana = 0; break; case "Agility": basic.baseHealth = 175; basic.baseMana = 0; break; case "Intelligence": basic.baseHealth = 175; basic.baseMana = 25; break; } } } private struct HeroBattleStats { internal string statType; internal int baseStr; internal int baseAgi; internal int baseInt; internal decimal strGrow; internal decimal agiGrow; internal decimal intGrow; } private struct Basics { internal string damageType; internal string armorType; internal decimal baseArmor; internal decimal baseDamage; internal decimal baseHealth; internal decimal baseMana; } } As you can see I have some nested structures, but they need to be filled out somehow. Each CharacterCard class then goes in a Dictionary to be chosen out of later. I don't know how I could fill the structures other than the constructor of the CharacterCard class.
&gt; Listener design pattern is replaced by events and delegates. Much cleaner IMO. Speaking of delegates, 95% of the time you will *not* need to use [Named Delegates](https://msdn.microsoft.com/en-us/library/900fyy8e.aspx). [Func and Action](http://stackoverflow.com/questions/878650/explanation-of-func) are predefined generic delegates and will more than likely meet your needs, especially when using LINQ.
Is SQL Reporting Services an option? It can be a frustrating technology but it's pretty good for most standard reporting. 
We do have reports for our business product and we went the route of flow documents. The real trick to them seems to be getting your paginator to work the way you want it to. The next trick after that is tracking down all the strange bugs that only exist in certain versions of windows. (Behind the scenes changes in how things are printed in various versions of Windows is one of the things you're not supposed to have to worry about with .NET, but in practice you do.) Overall now that we have a working print function I wouldn't go back to change it to use a third party DLL, but at the same time I'm not sure we'd go with flow documents again if we started from scratch. YMMV
Does this class even compile? I can see some immediate issues besides your design problems with needing so many constructor parameters. Your BasicInfo property shouldn't compile; it doesn't have a return in it and I'm really not sure what you're trying to accomplish with that switch statement. Both your BasicInfo and BattleInfo properties are public, but are returning types of private structs. Is there a reason why you even need the Basics and HeroBattleStats structs? Why can't they all just be properties on the CharacterCard class? And if you do need them why not simply make the structs publicly available and pass those into the constructor? Finally, do you really need to use decimal types? These are pretty heavy as far as value types go when most people do just fine using offset integers (e.g. counting in cents vs dollars) or double values.
So, when creating a new character you create a Json file, and then uses that for deserializing so you get a character object. I'm not sure thats such a great idea.
&gt;The more rarely seen using as an alias. E.g. using C = System.Console; then later C.WriteLine("Hello, world!"); I know you're not saying it's a rare use, but I just want to say that as someone who was forced to move from C# to Java this is actually one of the things I miss most. For instance, the nature of my work and Android means that I sometimes have several different contexts for 'R' (the Android resource holding class) in one file, and it's extremely annoying to have to write out the full name of all but one of them (eg. android.R vs. mylib.R).
Where possible, use parameterless constructors and make the properties settable. The initialiser syntax is almost identical, there are no ordering issues, and maintenance is easier. E.G. class Foo { public int Bar { get; set; } } ... var foo1 = new Foo() { Bar = 42 };
 Yes, I have had a few wrestling sessions with `android.R`. I think mainly because it holds my XML writing capabilities to a higher standard than I do. I've not had conflicts with it before (because who else names their class `R` right?) but I've only been using it for pet projects. Thanks for the heads up!
You may want to take a look at established reporting systems like: * [FastReport.NET](https://www.fast-report.com) * [Crystal Reports](http://www.crystalreports.com/) * [DevExpress Reporting](https://www.devexpress.com/subscriptions/reporting/) Here are some alternatives: * [SharpDevelop Reports](https://github.com/icsharpcode/SharpDevelopReporting/wiki) * [syiReporting](http://www.fyireporting.com/) 
I bought Microsoft Visual C# 2013 Step by Step by John Sharp and I enjoy it. It might be a bit out of date now, but it's worked for me. The only issue I have with it is that the binding has now broken in 3 places and I feel like the book is going to split in half. ISBN is 978-0-7356-8183-5.
Nowadays the majority of VB.NET code seems to be the maintenance of Visual Basic projects that eventually migrated to .NET, after fixing all the differences between both languages. Enterprise developers that had enough programming expertise, seemed to have moved into C#. Actually last year was the first time I saw someone coding in VB.NET in years. Some biology researchers that aren't that deep into coding.
The problem is that he needs to create a DataSet or DataContract.
Do you have control over the other program? If so you can call Flush() on the output stream. If not then what you'll probably have to end up doing it modifying your listener tasks. Right now you're expecting to find output in those streams immediately, but you may have to modify your routine to periodically poll them instead. (Polling is definitely a non-ideal way of doing it, but it should suffice for now)
Builder pattern is the first thing I thought of
I see you're still creating `struct`s ;) Whether or not it's "okay" is really a matter of usability. Are you going to be able to look at this code in a month or two (or a week) and really remember what each of these parameters represents, or are you going to have to look at the signature to figure out what that the two numbers next to each other are for? This is why you want to group the parameters into smaller classes that represent related values. You then pass those classes in each as a single parameter to the outer class.
I am in the middle of the same situation. After surveying the options I decided to write them in html and use an html to pdf library. Since I already needed them as html pages it was a win win. I just leveraged the razor engine to generate the html pages and ran them through that pdf lib. I'll add the name if I remember it.
MS releases new versions of it in every version of SQL server. Granted they don't update older versions, but you can by updating SQL server. We use SSRS for both relational DB reports and with MDX to query OLAP cube data. Depends on how one might use it but SSRS is definitely not dead. 
You will want to separate your code from your data at some point. Here is a post on a scheme for doing so: http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/
Yeah, I see that everywhere, but I signed up for an account, and they gave me a free trial, which only let met host until a certain dollar amount was met. How do I get the 10 sites?
[Cannot replicate.](http://ideone.com/FSHFaV) It's likely whatever you're doing to split the log file into lines. Does tuser10000@something.com show up in the input file anywhere?
yes it does, this is what I am doing. The weird thing is I have two sets of logs I analyze this method works perfectly in the other set and in the set that gives me issues it works great 9984 times out of 10000. string[] lines = File.ReadAllLines(fInfo.FullName); foreach (string logLine in lines) {
amazon has a very nice freetier and it's a good skill to have.
What is a flow document?
When you say "when I go back and check the user string", what/where are you checking?
Gods. I tried to see about purchasing crystal reports for a project we had last year. I couldn't figure it out! I just gave up in disgust. I even contacted someone's sales dept about it (dunno if it was CR's or not because I couldn't freaking tell.) and they started asking me questions about what I needed but I couldn't understand their options and they couldn't understand my questions. Shame. Used to be a decent product 10 years ago.
I've also created HTML reports, but I do it by writing XML from the data and then running the XML through an XSLT file. Data sets can easily be converted to XML and then the XSLT file can be changed if the report has to be updated in how it looks. 
No links sorry, on mobile. We've been using ActiveReports for years. It's not perfect, but it does the job without many hurdles. Telerik Reports is similar as well. I haven't found something I 100% love though.
I set a breakpoint and just look at the temp variable. it is set to tuser00058@something.com.
thanks very much, sorry for the noob reply but I've never heard of LINQ, been looking it over on MSDN after you mentioned it. So essentially its a built-in database-like query language but for your own code and I see LinkedList is among the classes that natively supports it. Thats actually rather brilliant, thanks very much, I'll investigate this further.
Azure Websites. So easy to deploy.
Are you setting a breakpoint on the line? If so, depending on your loop, it may be storing the result of the previous loop. The variable is only assigned when you step past the line.
My team and I built a microservice report printing app, which takes a json payload and renders to HTML internally with Handlebars.net, and from there to PDF using EO.PDF. It's been running for a year now, creating about 5000 custom reports a day for our customers, and has worked very well for us -- it's easy enough for non-devs to work on.
Just make them. You have to point your domain to the azure site. Azure doesn't provide naming service.
This is C#. You don't have to remember order - you can (and should) call it using named arguments. As for the 20 parameters, if it really needs 20 pieces of information, you're going to need to supply them somehow, even with the builder pattern or even if you have to construct sub-objects. Sub-objects are useful if they meaningfully group related information or enable easily passing information from objects that already have them constructed, but they are hardly required, IMO. As for the builder pattern, I see a TON wrong with it. You get virtually zero compile time checks, cross-parameter validation is a bitch, and you have no way of ensuring that Build is even called, other than checking when the object finally tries be used. You're creating a behemoth of complexity to work around a minor annoyance that sub-objects and/or named parameters solve simpler and better. There is no way that would ever pass code review at any of the jobs I've worked. 
You can create Azure Web Apps with a Free Tier App Service Plan. The features/workload is limited in free tier; it's mostly designed for testing/learning - not production applications. More info here: https://azure.microsoft.com/en-us/pricing/details/app-service/ (FYI - I work on Azure App Service)
The OP never said the parameters were essential parts of the object or omitting them would leave the object in a perilous state. The large number of them alone makes that unlikely and the example given by the OP confirms it. I would go so far as to say the constructor should use the minimum possible number of parameters that leave the object in a usable state, preferably zero. It's not possible for immutable structs and may be unnecessary for simple classes, but I find it a useful design principle. BTW: Implying people can't read or are incompetent is a bad way to engage in a debate.
Exactly. Plus, you can hook up continuous deployment really, really easily (takes a bit more for a complicated web app, but for a simple app, it's super easy). Compared to every other .net hosting provider I've tried in the last ten years, Azure blows them out of the water in every single way.
When the page load is called the extra times, check the value of 'HttpContext.Current.Request.Url' Could be on your master page a content source has been screwed up and is linking back to itself. maybe JS, CSS, an image, etc
The fact that is imperative, doesn't mean we shouldn't have a good editor for it. Editing XAML by hand is always a pain. And if you think that is not the case, you should try editing something a bit more complicated than just a few controls on a window. Best, John
Simlpe things first, use Task.WhenAll(tasks) so you don't block the current thread: http://stackoverflow.com/questions/6123406/waitall-vs-whenall. Then I don't think it's really about an example for implemting a repository pattern (there is also the whole discussion if there should be use of repositories in case of EF). It's more about removing some logic from your controllers, and making it more reusable. So in this example create a repository class, with the methods GetDataAsync(string filter, int start =0, int length=0) and GetFilterCountAsync(), or maybe even cleaner to have just 1 method that returns an object that contains both of those properties. And you can put the duplicate part of your query as private method in your repository. I hope this helps, if you still want a repository pattern example, I think http://www.codeproject.com/Articles/526874/WebControls/ is decent, but I would ignore the part about UoW and just call the savechanges in your repositories. The UpdateClient case somewhat relates to the previous. Your controller (actually everything) should be simple in my opinion. So you controller should valiate it's input on invalid values (null, etc...), if thats the case throw an error, else you pass the parameters to another class that will handle your logic (repository in this case). If that methods succeeds, return success, else error. In this case this will mean that your repository will handle the update, and in my opinion the easiest way to not write invalid properties back to the database, is to retrieve the existing object from the database (also validates if the object exists) and only map back the properties that an user is allowed to update. I hope this helps, sorry if it contains some errors, because I had to rush it in the end. Maybe a tip if you want to learn to structure you code better, read some about SoC (serpation of concerns) and SOLID and try to apply those principles.
Maybe I was mistaken, I was sure I'd done it before. I'll see if I can knock up a working sample later today, or this is going to bug me until I remember. Ipconfig &gt; log.txt Writes to log.txt, not sure off the top of my head whether the output is redirected or still appears in the console as well.
They don't support .net.
The output data event is raised on a background thread as standard. You're probably calling WaitForExit() and blocking the main thread until the process has completed. Here's a full example of it working, anyway. http://pastebin.com/DmSpkCN0
I have been using hostgator for years now, avoid bluehost at any costs. For &lt;5$/mo I find them very good, the bandwidth is way more than I even would think of passing. at the end of it all its ~140 or so a year. not bad tbh. See http://www.hostgator.com/windows-hosting
https://www.reddit.com/r/csharp/comments/4159dg/trying_to_get_live_standard_out/cz0anul
From that perspective yes. Otherwise no.
Ah that's great thanks, I did wonder if at a certain point it would do something different? My actual use case is only around 10 or so cases. Was planning on revisiting my post with a longer example when I got a chance.
It looks like it, I wonder what the threshold is for when it decides to do this rather than what I saw?
The switch should still be a little faster. With 10 cases it splits the conditions into 4 sections. You could do the same with if statements by nesting them like this: public static int IfTest( int x ) { if ( x &gt; 50 ) { if ( x &gt; 70 ) { if ( x == 80 ) return 8; if ( x == 90 ) return 9; if ( x == 100 ) return 10; } else { if ( x == 60 ) return 6; if ( x == 70 ) return 7; } } else { if ( x &gt; 20 ) { if ( x == 30 ) return 3; if ( x == 40 ) return 4; if ( x == 50 ) return 5; } else { if ( x == 10 ) return 1; if ( x == 20 ) return 2; } } return -1; } Though at this point, I think we're getting into micro-optimisation territory because the search space is so small.
how do you think fall through is implemented? in the case where you have switch(x){ case 10: case 20: doSomething(); break; case 30: doSomethingElse(); } my guess is that this CIL would be functionally identical to the output of: if (x == 10 || x == 20){ doSomething(); } if(x == 30){ doSomethingElse(); } Now, as was mentioned above, switch does tend to get to a binary search algorithm to do it's findings, so I'm not sure how that works out with fall through.
&gt; If you follow the (apparently controversial) pattern of favouring settable properties over constructor parameters, applying JSON.NET to your classes can be trivial as it will discover all the property names of your class by reflection. Oh, you mean exactly the same way Json.NET would work if you used the best practice of encapsulating your object's data in private fields unless you have a very good reason to expose it?
&gt; If a property needs to be read only, or the entire class needs to be immutable, this should be expressed by the interfaces the class implements and all references passed as those interfaces, thus preserving immutability. You're thinking about it exactly backwards. The default should be to make everything private and read-only unless you have a very good reason not to.
probably somewhere between 3 and 23 cases.
Have you tried Blend?
Read up on [McCabe's Cyclomatic Complexity](http://www.mccabe.com/pdf/mccabe-nist235r.pdf). I think you will find in almost all cases a switch statement results in less complexity resulting in better testable code. The complexity on if statements, particular with several else-ifs, goes up quickly to result in near untestable code. See also: http://betterembsw.blogspot.com/2014/06/avoid-high-cyclomatic-complexity.html 
lol, thanks ;)
I've never heard of this before, cheers.
Honestly, either choice is fine. I use both; NUnit at the office, and XUnit for my personal projects. Once you get down to it, they are both pretty similar. XUnit has more popularity at the moment, but I don't think choosing NUnit is foolish at all. 
personally i use GUnit 
MS is using XUnit for ASP.Net 5 testing and Xunit does support DNX core (while NUnit does not). However, last I tried, XUnit didn't work under Mono - due to a bug in Mono's AppDomain implementation. So you should consider what technologies are in your new project. I personally like and use XUnit in all my projects. 
Doesn't have to be binary unless it's really big, and anyway binary can be opaque to work with. Plain old text files stored on the disk or as resources in the application are the way to go. Avoid databases unless you have a specific requirement they can satisfy (scalability for instance).
I personally prefer xUnit, because of their reliance on language features instead of attributes. For example, to run some code before each test in NUnit you would use the `SetUpAttribute` on the method you want to execute. In xUnit you put your test-initialization inside the constructor of your test-class. Similarily, to do some cleanup in NUnit you use the `TearDownAttribute`, while in xUnit you implement `IDisposable`. Also, xUnit has the static `Record.Exception(Action action)` methods, which really helps you test your exception handling while still following the Arrange-Act-Assert flow: [Fact] public void ShouldThrowNotImplementedException() { MyClass subject = new MyClass(); Exception e = Record.Exception(() =&gt; subject.SomeMethod()); Assert.IsType&lt;NotImplementedException&gt;(e); } It is a very simple utility, and it can easily be implemented on your own for use with NUnit.
You could have a "catch all" else structure.
Probably why the compiler seems to not bother doing binary search for small N, there's no point. I wonder how they arrived at ~~whatever threshold they did (somewhere between 3 and 23)~~ 10? Nonetheless, that's pretty freaking cool that the compiler does that.
One feature xUnit supports is running your tests in parallel which is tricky to do with nUnit. That certainly makes a difference with lots of tests, but it also means you need to make sure things like your faking library supports it. FakeItEasy 1.x does not and caused a bunch of headaches for us but the 2.0 beta release has resolved those. Regardless, I don't use either's assertion but rather use Shouldly for that. I think the code looks cleaner, the exceptions are much better and if you need to swap out your test stack you can do so without rewriting the logic of your tests. Test fixture setup and the such will need a rewrite, but that's easier than finding every "Assert.IsEqual". edit: apparently nUnit 3 has parallel test execution too. interesting.
I think it might be better for you to run through an intro to C# tutorial. Everything in your code has a "set data type like string".
Try 4 and 5 variants. It's a magic number for cycles optimizations.
I'm curious as to what happens if you stack cases. case 10: case 20: case 30: return 1; case 40: case 50: case 60: return 2; vs. the equivalent if-statement?
The compiler does split at 10 conditions. The code I put in that post was a "translation" of the IL into if-statements.
Fall-through is also: switch(i) { case 1 : doSomething(); goto case 2; case 2 : doSomeMore(); goto default; default : doAnyways(); break; } You would get something working with if-else and it might look similar in CIL but where replacing a plain switch tith if-else doesn't look too bad, using goto's in if-else look a bit strange I think.
"switch only supports integral types" Am I missing something? I wrote a switch with a string type this past week. 
Thank you :D
That's why I don't use NUnit. Does xUnit support asynchronous tests?
It'd really be nice if we knew what the question was now....
two modern ways to push data to the browser are eventsource and websockets. for this kind of service, mvc is not as appropriate as a web api. serve up a simple js web app which makes a request to your api, which starts the processing and streams results to the client. for a toy project like this, i have found rolling my own websocket or eventsource server on top of a tcplistener to be pretty nice.
That Java article is ridiculous. Verbosity (i.e., tons of code) for the sake of conforming to a Design Pattern. BS.
Why even code if you're too lazy to figure out what the code is doing...
I just took the course as a fill in retard, obviously no way im pursuing a coding path, I still dont understand why you assume this shit lol. Its just for homework help since i have a test. 
It's only the hottest and highest paying job/time in the 21st century.
https://www.nerdwallet.com/blog/loans/student-loans/average-salary-in-san-francisco/ &gt;Keep in mind that if you’re coming straight from college, you’ll likely earn slightly less your first year than a more seasoned employee would. But even entry-level salaries for software engineers in San Francisco are high: Their median pay is $97,000 per year, according to a PayScale salary survey. If you honestly think you'll ever make more money as an accountant than a software developer... you are out of your money. &gt;The average starting salary for accounting graduates this year is $53,300, up from $49,700 in 2012, Andrea Koncz, employment information manager for the NACE, told AccountingWEB. In 2011, the average starting salary for accounting graduates was $50,500.Dec 10, 2015
You think you won't be sitting in front of a computer all day as an accountant? Do you even know what an accountant is.
Nice facts there buddy, Nice 140K salary, i totally saw that on that site LOL. First of all you do realize not everyone lives in the San Fransisco Area ? Im pretty sure reddit is a global site with people from across the globe, also is Salary your main concern? Have fun sitting for long hours, staring at a screen with a bunch of other nerd friends of yours. now stfu 
You Cant tell me anything about Accountant Salary, My Dad is one and my teacher is a former accountant so Please.....
But if you're a developer you aim to go towards those cities such as SF, NY, LA. Like if you're an accountant you aim to go to NY or London so you can get public accounting experience. So yes, it should be those places that are taken into account. Yes, salary and work/life balance are absolutely my main concern for a job. What else would it be? Software developer has accounting beat on both fronts. &gt; Have fun sitting for long hours, staring at a screen with a bunch of other nerd friends of yours. now stfu You do know you're expected to work 10+ hours especially during tax season (depends on what you do) as an accoutant... CS jobs are mostly 9-5. 
and a CPA just sits back and checks if the bookkeepers are recording transactions for a company correctly and they also check to see how well other companies/business are doing with their current financial status. 
I don't think you understand what opinions mean. Also, do you really think you're not staring at a computer screen all day as an accountant? You really think accountants still do everything on paper and have their financial statements in their little folders all stacked up? Yeah, they must all reconcile everything on paper because 2015.
Well there's a lot of grumpiness in here. Most of us seem to be hesitant on giving out answers to homework questions, so to be more constructive, show some work and maybe we can help you where you went wrong/got stuck!
How are you telling me what they do? Smh my Father is one and my teacher is one. if you can link me c# program for mac ill be glad to practice. 
CPAs are no longer just number crunchers and tax preparers. They are business and financial strategists who help chart the paths of businesses and individuals. Individuals turn to their CPAs for tax and financial planning services, 
http://lmgtfy.com/?q=c%23+for+mac In case that step was too hard, http://www.monodevelop.com/ It's a "C# program" for mac so you can practice.
Yeah, because that would require a brain.
Great facts their buddy, some salary bullshit, then some CA bullshit. then you kept assuming some bullshit or talked about working 9-5 bullshit. Just shut the fuck up and get off reddit and go to bed. I've got work to do, actually you should have work to do to also start coding buddy ! 
I now realized why you dont go for reddit for help. Thanks Nerd. 
Yes, please keep your useless posts away from the sub reddit.
and the post wasnt "Useless" i just needed homework help, but you assume everyone is a master at code like you LOOl. so please gtfo off reddit, every post is probably useless to you. 
Yeah nice life, Saturday Night you have nothing to do as you stated and your at fucking home in your bedroom on Porn and arguing on reddit. Please i already know your one of those anti-social fags. LOOl 
no shit.. its useless to everyone else reading. smhhh
Yes, yes it is. Glad you finally figured it out.
Ill come back to you when i need some Homework help since you're a expert. 
Holy shit you're retarted, WHY did you reply to my SHIT post then ? fucking retards these days. Jesus christ and im assuming you're like 20+ years old to. Fucking sad life. 
But that's what you're doing too.
Im home on a saturday night because i got studying to do got 3 tests on Monday so please, and also i went out earlier actually LOOOOl 
If you're using ASP.NET 5 xunit would probably be considered best practice right now. Also, xunit was built by the authors of nunit with the intention of making a testing suite that is more in line with the modern .net framework.
Can you set up a private git repository and send me the link? Then I can do a pull, refactor with comments, and send you back my updates tomorrow.
What about Exceptions classes? Is it wrong to set them in a file?
In your master page, your JavaScript link should look like src="./js/jquery.js" Note the ./ at the start. However if you have pages in other folders, the links will break again. Can try putting them in your script manager like so &lt;asp:ScriptManager ID="SMgr" runat="server"&gt; &lt;Scripts&gt; &lt;asp:ScriptReference Path="~/js/jquery.js" /&gt; &lt;/Scripts&gt; &lt;/asp:ScriptManager&gt; 
As a general rule, every class, enum, struct etc gets its own file. Every namespace below the application's base gets its own folder, and all the files are in the folder matching their namespace.
Console.Readline() returns the a string inputted by the user. You should parse it and assign it to your variables (a, b, c). a = double.Parse(Console.Readline()) 
Thank you! But it still doesn't work. Or I can't use Parse (which is true anyways). If I use Parse, and I run the programme, it asks me for a b and c, and then doesn't run the rest of the programme. It says that "An unhandled exception of type 'System.FormatException' occurred in mscorlib.dll" and that the Input string was not in the correct format. Do you know what the problem might be? And thanks for your help, really :) 
What values are you inputting? Try replacing commas by periods, or vice versa. 
What's the difference compared with Assert.Throws&lt;Exception&gt;?
You're doing a great job of asking for help. You really know how to motivate people.
To tell the truth – I don't care. Project should have tests and tests framework shouldn't be MSTest — this is all I care. If I were you I would choose xUnit for the new experience mostly.
His question was something like &gt; How can I do this in less lines? &gt; &gt; var foo = "Hexagon"; &gt; var bar = new int[]{0, 0}; &gt; var board = new Dictionary&lt;string, int[]&gt;(); &gt; board.Add(foo, bar);
Yes I forgot to include my current progress but I actually managed to solve it! Now I am stuck on the next one, should I make a new thread explaining or should I continue from here? Thanks for your reply!
First I was receiving "No Overload for method "Write" takes 0 arguments. Then I moved on to conversation errors and 1 by 1 I fixed every mistake. After almost completely rebuilding the code I am now at even a worse spot I think. In general I think I am missing something big. Like for example I can understand the logic behind it being: You have an X ammount supply, you have Y, N, K. I realize I have to subtract from X the rest but I don't know how to get there. For starters I can't even write "beer" in the console neither "sixpack" and I thought I've included these in: "string[] TypeBeers".
 static void Main(string[] args) { double a; double b; double c; double x1; double x2; double x3; System.Console.WriteLine("Hi! This is , hopefully, going to solve your quadratic equation. Enter 'a' please!"); a = double.Parse(System.Console.ReadLine()); System.Console.WriteLine("Nice number! Now enter 'b'!"); b = double.Parse(System.Console.ReadLine()); System.Console.WriteLine("Last but not least, 'c'!"); c = double.Parse(System.Console.ReadLine()); double square = (b * b - 4 * a * c); if (square &gt; 0) { x1 = -b + System.Math.Sqrt(square) / (2 * a); x2 = -b - System.Math.Sqrt(square) / (2 * a); System.Console.WriteLine("The answer to your quadratic should be {0} and {1}", x1, x2); System.Console.ReadLine(); } else if (square == 0) { x3 = -b / (2 * a); System.Console.WriteLine("There is only one real solution, {0}", x3); System.Console.ReadLine(); } else { System.Console.WriteLine("There aren't any real solutions to your equation"); System.Console.ReadLine(); } } Used "Parse" to actually assign your numbers to your variables (in your code, how do you expect your program to know that you want your first number entered to be assigned to "a"?). And there was another mistake in `System.Console.WriteLine("There is only one real solution, {2}", x3);`, it needs to be `{0}` as you only have one argument. Works for me :)
I thought that this WAS part of the exercise? O.o
Thanks, much appreciated! I just tried it now and it compiles well in Visual Studio 15, but gives 0 in my schools online judge?
http://pastebin.com/nFng29d1 Try to compile this I found a few errors. 
Question: when running tests async, is there not a possibility that concurrent threads may affect the results of tests? That is, say if tests dip into the same resources, be it a db or some other mocked object(s)? 
When projects get bigger and you have multiple people working on them, it becomes much easier to manage when each class, struct, etc. are in their own file. And the names match (important!). So if you're wondering where the "Account" class is, you know you'll find it in Account.cs In addition, if you're using a source control system, exclusive locks are applied at the file level. So if you have 3 classes in a file, only one person can change them. But if they are in their own files, then Bob can work on class #1 and Steve can work on class #2 and they won't be bumping into each other.
xUnit2 should work under Mono 4.3, as I believe that issue is patched now. Not sure what the current version of Mono is though, last I checked 4.3 was still under dev.
For anyone who wants to quickly look at the IL code you can view it online using https://dotnetfiddle.net. (Only debug though) The button is in the top right dropdown next to tidy up.
Depends. FirstOrDefault can be much quicker as it exits as soon as a match rather than continuing over the entire set. Depends on dataset size of course. 
I wrote a reply arguing against the alternative pattern. But it convinced me that it's a good idea. The out parameter smells a lot, and really solves few cases that just returning the value or null wont also solve.
I personally don't like to let nulls escape the scope they're generated in, but [this question](http://stackoverflow.com/questions/16851527/tryparse-nullable-types-generically) is somewhat similar to what you're doing and Jon Skeet, who is much smarter than me, suggests returning a nullable. It does seem cleaner that way.
I can think of two cases where you wouldn't want to use null as failure indicator in a TryGetX kind of method: - Null is a valid value, so no value and a null value can't be differentiated - You need a generic class/method that works with any provided type. You can't constrain to `class`+`Nullable&lt;T&gt;`, so you'd either need two separate versions for reference and value types, or rely on runtime checks. For these reasons, using a separate success value is pretty much required for generalized classes such as `Dictionary&lt;&gt;`. But if null values are invalid in your use case and you can constrain the type to a specific type or at least either value or reference types, I see no real reason not to do this.
The out parameter tends to look really messy to me. C#6 *almost* fixed this but unfortunately it did not. In general, I like methods to do one thing and then return their result, so I like the nullable version better than the out parameter version. 
&gt; Null is a valid value, so no value and a null value can't be differentiated What scenarios are you imagining that null is a valid value? 
Well, there's spring.net (which I personally kinda' hate). IntelliJ - well, that's the obvious one: Visual Studio. Can't help with the rest.
As I said, the built-in dictionary class is an example. There's a difference between an entry not existing in the dictionary at all, and having an entry with a null value, which couldn't be expressed if `TryGetValue()` returned null to indicate that there's no such key.
The out parameter is necessary if you are returning multiple variables which can be solved by returning an object containing those values. I think this is also cleaner. 
If you need to return multiple variables, there's POCOs, DTOs, and tuples. Out parameters aren't necessary. But which approach is "cleaner" is definitely going to be a subjective kind of thing.
Interesting, I agree it's a good idea. I've never had to write my own TryParse-style methods, but I wrote a little blog post about why you should always prefer TryParse over try/catch blocks in situations where you'd end up throwing too often. When I shared it with the C# Enthusiasts Google Community, one of the responders had a pretty neat [shortcut for not having to declare the out parameter separately](https://plus.google.com/113610134933971443421/posts/aH2rPFz4bPJ): int intvar = Int32.TryParse((stringvar ?? string.Empty).Trim(), out intvar) ? intvar : 0; Which is pretty much the same as what Jon Skeet had, but with a default value instead of null: long outValue; return Int64.TryParse(input, out outValue) ? (long?) outValue : null; or long outValue = Int64.TryParse(input, out outValue) ? (long?) outValue : 0 return outValue; Maybe useful if you didn't want to be passing the nullable value around as null to avoid downstream null reference exceptions. Or, if you didn't have nullable types available
No problem! Enjoy the rest of your holiday!
Nope. The DI library from Microsoft.
Another option is to use a functional Option&lt;T&gt; type. It makes for a more explicit way of indicating whether or not the method was successful. A pretty good explanation: http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c
That's brilliant. I'm going to have to remember that one in the future. I like it over the `Nullable` response. Edit: Interestingly, if you use `var` instead of the actual type, you get a compiler error.
&gt; Cleanliness is not subjective. By definition, it is. &gt; Certain coding practices are definitely easier to read and easier to maintain. Some have a clear consensus of support. Some less so. When in doubt, stick with the coding style already in use by your organization or already in use by the codebase you're working on. 
Yes, but OP is new to this and it's a good way to explain the concept.
What if your organization has a very unclean code base full of hard to work with code? 
&gt; By definition, it is. Literally the first definition on dictionary.com says it's **personally** neat. https://i.imgur.com/AskIKKP.png
I'm sure it'll be configurable. Also I bet they're not worrying too much about aesthetics right now while they're focusing on functionality.
And a [here's a library library](https://github.com/AndreyTsvetkov/Functional.Maybe) with a more functional `Maybe&lt;T&gt;` type, which lets you do things like LINQ with it (which is almost too clever, but reminds me in a good way of F# computation expressions).
Anyone shoving a null into Option.Value is an asshole.
No. It's a IoC modularization container, originally developed for desktop apps, and I think there's a universal app and mvc version. 
The `Equals` override is fine. Look over your program flow. You want to read *one* number from the command line, check if it exists in the array, and add it if it does not. Repeat 5 times. Right? So what are you actually doing? ------------------ You can also save a ton of space by shortening up your equals method and taking advantage of auto properties. This is an equivalent class definition: public class Patient : IComparable { public int patientNum { get; set; } public string patientName { get; set; } public int patientAge { get; set; } public double amountDue { get; set; } public Patient() { patientNum = 9; patientName = "ZZZ"; patientAge = 0; amountDue = 0; } public override bool Equals(Object o) { // safe cast to Patient will return null if the cast fails var compare = o as Patient; // return false if the cast fails or the patient numbers aren't equal return compare != null &amp;&amp; compare.patientNum != patientNum; } public override int GetHashCode() { return this.patientNum.GetHashCode(); } } --------------------- I would also recommend following .Net standards for property names - Pascal case (Upper-case letter first)
Thanks for your input, this has been pretty useful actually. In my current usage of nullable instead of out I've got this sort of thing going on: SomeParser.TryParseAString(text).Value.IsValidString When I was writing the method that I described in my original post I had forgotten that I would need to use the .Value. to actually get at my underlying result class (well struct in this case). Looking at it, it's a pretty weird way of doing it isn't it? What do you think about it? I think to solve the above problem I should do as you said and return the result class with a bool in it to indicate success *or* go with the out keyword idea again. What do you think would be appropriate in this circumstance?
It's written in Kotlin which I assume means it's going to be using Swing as the underlying GUI framework. JavaFX is from what I've gathered Java's equivalent of WPF. JavaFX has been recommended for new projects for quite a long time now apparently.
Yeah, it's bad for a couple of reasons. The first is by having the Try at the front of the name other developers will expect it to conform to the standard TryXX pattern, but that's not really important here. There's another antipattern which I've forgotten the name of which involves this sort of chaining of methods together. There are perfectly good times to do this and we call those Fluent interface (think LINQ). This however is not that. There are a few ways to get around this. The first might be to have a method that looks like this: SomeParser.IsValidString(text) It seems like you don't need the whole chain to get to the same result here. That might not make sense, because I'm not sure what "IsValidString" is. From its name I sort of assume it's a bool, but what you're written suggests it might be something a bit richer? And of course we got to this point because TryParse might return a null, so Value might be null, which means IsValidString might be null? Either way, you're right I think that you then need to get it returning a rich value including information about its success/fail status, or use the traditional bool TryParse(input, out result). Give them a try and see how they feel. It's not a nightmare to switch from one mode to the other, the important thing is clarity. I'm sure I've said this before; clarity trumps brevity. 
You have much bigger problems if your organization hasn't agreed upon any code conventions. 
Wrong. Option.None is more like an empty list.
I always bitshift then or, I don't often see standard libs have this built in.
It really depends on your objects and needs. In this case you're using a value type (integer) as your identifier, so you can use a `==` comparison instead of needing to use the reference equality. You can use patientNumber.Equals( compare.patientNumber ); if you're more comfortable with that, the effect will be the same. But, as I said, the `Equals` method as you wrote it is fine. The issue you're having is from the main application workflow.
Thanks, I haven't actually tried that. I'll give it a shot and see if it helps.
Yessssss! That's a win for Sunday! You must have a holiday tomorrow. Anyhow, if you think of an example I would love to read it.
I believe you should be able to have the return value from the service be a string. Of you're able to do that you should be able to take a look at the XML that is being returned. Can you post that if you capture it?
I doubt the data is too large either, it seems like a very strange issue to me. Like I mentioned though, it's my first time dealing with web services so I'd like to think it's something that I'm not quite understanding. I'll attempt debugging on the server side (will need to install VS on the machine). Thanks for your help so far!
Jeez that's a neat way to write that, not sure why it never occurred to me before.
You'll stop enjoying those try/catch blocks when you have to parse 10,000+ records all requiring one... you suffer a huge speed penalty.
Are you using web services or WCF? If the former, you might try switching to WCF, you might have better luck.
You will also need to make sure to check them both before modifying the number because if it is divisible by 3 and 2 then you will leave it alone. Also what is the point of the user typing in 2 arrays of size 5. Is there something special you need to do with 1 array compared to the other or is it the exact same operation being done on both? 
Yeah I wouldn't switch unless you get stuck. It should only take about an hour or two to switch from web services to WCF though. Just create a WCF project, copy your old methods from you web services project, re-reference and reformat your client side calls. WCF is a more recent implementation and supports transport protocols other than SOAP.
Actually there is no point in 2 arrays, I just had a similar template but it had 3 arrays so i reduced the number to 2, and ye, the operation was the same on both.. I think I might change the program a bit, maybe not even do it like this, it's not that important which stuff it does to numbers.
&gt; With null you don't know why it's null. Which is why having `option.Value == null` is such a bad idea.
Look into the [Microsoft.Owin.SelfHost](https://www.nuget.org/packages/Microsoft.Owin.SelfHost/) package. There's a [small example here](http://www.c-sharpcorner.com/UploadFile/4b0136/working-with-owin-hosting-and-self-hosting-in-Asp-Net/).
Thanks.
That is EXACTLY what I was looking for. Thank you!
See, the #1 reason I love C# is because I am easily confused by pointers. Pointers and recursion are my big weaknesses. Someone else already answer my question, but would you be so kind as to explain how this code works, exactly?
As [/u/pcfanhater](https://www.reddit.com/user/pcfanhater) mentioned, the % (modulo) operator is the best solution to this. I've had a mess around with the details you've given, I'm happy to give you some help if you like, just send me a PM :)
You just have to get the last word in don't you? Look, either give me proof or shut the fuck up. I've seen the Option / Optional type implemented in 3 languages (C#, Java, Scala) and in all cases "None" is an actual, real instance. Definitively not null. Wanna see? Here's how Scala implements it (just cause it's short and easy to find): case object None extends Option[Nothing] { def isEmpty = true def get = throw new NoSuchElementException("None.get") } Now do you wanna keep being a dumbass or do you want to admit that maybe, just maybe, you don't know what the hell you're talking about! If None were just an alias for null, it would have literally no purpose.
&gt; Plain old text files stored on the disk or as resources in the application are the way to go A couple of questions about this. One, which is better, storing it on the disk or within the app itself? Two, if it is the latter, how do you store text files in resources? I use Xamarin on Mac btw, and I don't see a resources file for my solution.
 string data = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"; byte[] buffer = Encoding.ASCII.GetBytes(data); Here `buffer` will actually have data to transmit and so it fits better in this specific example than an empty array that is 32 bytes in size.
I guess the architecture picture at 19:30 is a joke. However I'm very curious how they actually implemented it. They've mentioned a new protocol that allows object modifications in two processes ... 
Does ICMP have a data payload? I figured it was just ECHO REQUEST / ECHO REPLY. There shouldn't be a data field, right? Edit: I just saw this example capture: id 1, seq 38, length 40 0x0000: 4500 003c 3aff 0000 8001 5c55 c0a8 9216 E..&lt;:.....\U.... 0x0010: c0a8 9005 0800 4d35 0001 0026 6162 6364 ......M5...&amp;abcd 0x0020: 6566 6768 696a 6b6c 6d6e 6f70 7172 7374 efghijklmnopqrst 0x0030: 7576 7761 6263 6465 6667 6869 uvwabcdefghi So, you're spot on. Thanks!
If I need to finish a project fast I'll switch to Rider. :-)
 &gt;A simple example would be: &gt; public class SimpleResult&lt;T&gt; { public T Result {get;set;} public bool Success {get;set;} } I would fire you on the spot if i ever saw that checked in.
Create an XML file in visual studio and paste the XML from the reply and see if it results in valid xml. When you have the XML file open, there should be some toolbar buttons for formatting and validating the XML. That will help rule out the XML or not. 
This is a C# forum, and in C# Option.None is defined as null. Open ildasm if you don't believe me.
Wow! I'm home from work now, but I'll try this first thing tomorrow. Thank you so much!
just practice c, you will get the hang of it eventually. its hard, don't worry if you dont get it right away.
Option.value is unnecessary. It makes more sense to not have that property at all and use linq expressions. Something like Option.Match or Option.Apply makes having a value property unnecessary. By doing it that way, you have no chance at a null reference and you don't have to check for null either. Expressiveness and no null checks.
On mobile right now so this will be short: Look up entity component systems, they might be what you need
Yes
Why would you want to support a signature without generics? Generics were added in .NET 2.0. Are you targeting .NET 1.1?
Careful with endianess; this method uses the underlying system's endianess.
Look at any of the other IntelliJ-based IDE's. The default light theme is pretty awful looking by today's standards, Darcula (the default dark theme) beats anything else out there though - and since this uses the IntelliJ platform you can bet that Darcula will be there.
&gt; For these reasons, using a separate success value is pretty much required for generalized classes such as Dictionary&lt;&gt;. And because a dictionary can contain value types as well as reference types, and can't use nullables because they only work for value types.
Yeah, I probably should just do the inheritance. I overthought this problem, something I do way too much :/ Also, that branching diagram is the system I'm planning on doing. At least I got *something* right.
This genius clearly isnt an example of this, but combining finance with CS is probably one of the most proftiable degrees you can get. I know a ton of quant analysts and most big firms throw out outrageous salaries to guys who can code in finance. Theres actually a saying you can teach anyone finance you cant teach anyone to code. A lot of firms will actually rather take a efficient coder and just teach them the finance side on the job. Same with engineers as well.
To understand pointers? Like, did you read the context?
&gt; I'm having trouble with the ID replacing all text within the Subject Line currentMailItem.Subject = currentMailItem.Subject+"(" +Base62.ToUpper()+")"; Right now you append the Base62 string instead of replacing currentMailItem.Subject = Base62.ToUpper();
And not crashing. 
Darcula is pretty good. I still prefer Visual Studio's dark theme though.
ICMP can optionally carry a data payload. There are several non-evil reasons to do so: 1) Send a known value, and read it back to ensure integrity on request/response 2) Send a long packet to test fragmentation 3) To discover the path's MTU 4) Test whether a specific pattern can cause un-intended effects on hardware on the path (for example, does sending a bunch of '1's trigger a router's debug mode?). There are several evil things to do as well 1) Send a large packet to try to cause a buffer overflow (ping of death). This really isn't an issue any more. 2) Data transfer. Ping isn't a common data transfer protocol, but it can be used as one (see ICMP tunnels and the Loki tool). This is usually mitigated by only allowing fixed size ICMP packets. 3) Denial of Service
http://csharppad.com/gist/6805dd2ee70e3b15bb37
Would it be possible to use a check and see if something is present within `currentMailItem.Subject` and if there is then add: ` Base62.ToUpper()` if `currentMailItem.Subject` is empty then a prompt instructing the user to add something.
Of course you could do that with a simple form. But I don't think it has something to do with being empty.can you try try something like private void Base62_Click(object sender, RibbonControlEventArgs e) { string Base62 = Base62Random(); var inspector = this.Context as Outlook.Inspector; if(inspector != null) { var currentMailItem = inspector.CurrentItem as Outlook.MailItem; if(currentMailItem != null) { currentMailItem.Subject = "(" +Base62.ToUpper()+")"; } } } Also can you tell me which Outlook Version you use? I then could check it out in ~ 1 or 2 hours at home
Thanks I'll fiddle with it on my side, The Outlook I'm using is part of the Office 365 plan, so anything from 2010 up should work with this.
Oh wow. I rarely use structs in C#, so I forgot you could do that. I'll have to consider replacing my class with something like this. Thanks.
I can never remember which endianness is which, but I know Intel and AMD are the same. Does it really matter anymore?
This reminds me of the your not wrong your just an asshole meme. I don't mean hes really being asshole (skeet) just your going to change a commonly recognized framework pattern to save one tiny easy to read line of code? Of course it would be nice if everything was finely polished on the first release but everyone deals with legacy code.
i like to do the exercises this site gives: https://www.hackerrank.com
Nevertheless I would propose this: byte[] buffer = Encoding.ASCII.GetBytes(Enumerable.Repeat('a', 32).ToArray()); 
 private void Base62_Click(object sender, RibbonControlEventArgs e) { string Base62 = Base62Random(); var inspector = this.Context as Outlook.Inspector; var currentMailItem = inspector.CurrentItem as Outlook.MailItem; currentMailItem.Subject += " (" +Base62.ToUpper()+")"; currentMailItem.Save(); } You need to save the Mail after altering.
thank you both
It still continuously generates the ID (one after the other) every time I press the button. 
Of course it does. in your Base62Random method you feed the generator with a pseudo random number each time you call that method.
&gt; "&amp; indicates the 'andress'" (e.g. 'and' plus 'address' :D), and "* indicates a pointer because it's pointy"... I hate you. That's brilliant, but I hate you so much right now. &gt;Mostly for working with pointers, really That's what I thought. It's not something I've ever really used. I dabbled with it, trying to get an old and poorly documented DLL to work, but nothing came of it. &gt; Any data you receive over a network is likely to be big-endian though. And any serialized data should have a byte-order-mark somewhere that indicates its order. Huh. TIL. Fortunately, that won't be an issue in this application, but I'll keep it in mind for the future.
Ah, now I see it. I had initially thought that I would be performing a `get` on the object as it was. Also, i had to remove the `static` attribute from `stockRecord`... shouldn't be an issue no? Seems to be fine according to JIT anyway. Also, I really like the way you performed the SQL query, I may steal this for future reference.
Little Endian is least-significant (the "little" end) first, Big Endian is most-significant ("big" end) first. For example: Value LE BE -------------- ------- ------- 65534 (FFFE) FE FF FF FE 258 (0x0102) 02 01 01 02 Whether it matters depends on who and what you target. ARMv8 and ARMv7 are bi-endian (can do big and little), so if your code could be running on ARM it's something to consider.
Inheritance might not be the best way to go long term - if you want to blow your mind a bit, read up on ECS (Entity-Component-System)....
The difference is just that with Assert.Throws&lt;Exception&gt; the Act and Assert of the Arrange-Act-Assert steps are collapsed into one, making it a bit harder to read read what is being executed and what is being asserted: [Test] public void ShouldThrowNotImplementedException() { // Arrange MyClass subject = new MyClass(); // Act &amp; Assert Assert.Throws&lt;Exception&gt;(() =&gt; subject.SomeMethod()); } I have seen some cases where the test-author attempted to keep the AAA-structure by using a temporary variable for the delegate: [Test] public void ShouldThrowNotImplementedException() { // Arrange MyClass subject = new MyClass(); // Act (but not really) var action = () =&gt; subject.SomeMethod(); // Assert Assert.Throws&lt;Exception&gt;(action); } It reads a bit better, but I would still prefer my act-stage to not be deferred. I just think that maintaining the AAA-style of tests lends a lot of readability to the tests, especially when you are used to it. This is of course just a matter opinion, and some people probably prefer the Assert.Throws-style.
Output date is sometimes buffered, which is up to the program you are calling. If that's the case, there is really not much you can do. Although there is a fair chance you're using the API wrong; it's pretty easy to do that.
A problem. I used the code you gave me here: List&lt;SubA1&gt; FindAllSubA1Items(List&lt;A&gt; sourceList) { return sourceList.Where(obj =&gt; obj.GetType() == typeof(SubA1)).ToList() } And it basically said "Cannot convert type A to type SubA1". Did I miss something here?
here's a screenshot under the darcula skin which is a little better - https://pbs.twimg.com/media/CZBIgRDW8AE5kIl.png:large 
No.. Still awful.
It would be great if you don't spam your shitty articles in this Subreddit. Especially since they contain wrong information.
No me; paranoid_twitch. But a better solution is: return sourceList.OfType&lt;SubA1&gt;().ToList();
One we use it for are static classes with static const variables (basically replacing enums). We can have multiple classes in each file, because they are all for the same object.
Naming conventions are off, block.Transform.Parent.
Thanks for the reply. Is their an example of the header?
This is bullshit. 19 lines? Sure, 19 *unreadable* lines.
It's linked in the sidebar.
I can't remember where I saw it, it was on /r/programming anyway, but it was some code that some APL (you know, that terrible language that even at one point had its own keyboard for the stupid symbols it uses and is basically unreadable in everyway) programmers had written but in C#. It was as bad as you can imagine, they applied all the APL "standards" and "conventions" to the C# and it looked basically like OP's code.
It's a tool in a toolbox and works well in many situations. It encapsulates a default behaviour removing the need for initialisation checks. 
Making the register a class is the right choice; as for its *value*, I'd make it a value type. It would be useful to define implicit conversions to and from UInt16 on the register value type, for ease of use, as well as the usual arithmetic and bitwise operators (with support for operations on both your register value type and UInt16). Defining your own register value type is a good idea since the type imparts specific meaning (whereas UInt16 can mean any arbitrary value of that type), and allows you to isolate most of your value validation to a one or more validation methods (to be used in the type's constructors). It'll also allow you to decorate the type with useful [debug attributes](https://msdn.microsoft.com/en-us/library/ms228992%28v=vs.110%29.aspx) which modify the way instances of the type are displayed in the VS (and probably other) debuggers. For your set of instructions, I'd create a static class with public const properties, named after each instruction, which returns a register value encoding that instruction. If you're using C# 6, you can then use a `using static` declaration with the static class so that you can use the unqualified property names just like you would use literal values. If you wanted to organize your instruction sets (like, say, general purpose, SIMD, etc), you could extend this to multiple static classes and then import only the instruction sets that are relevant to the current file.
I have looked into them, but from what I could see they mentioned modifying your router, and that is something that I cannot do since I'm using my university's Internet. With dynamic dns it would be a direct link to my computer? If so I'll definitely look more into it.
Dude, you're being a jerk. That's not cool. Check your attitude.
Went in expecting blog spam. Was pleased to be wrong. Good article!
IDK, this code has comments and readable variable names. I think it could have been made substantially shorter if he wanted to :)
Do not close the stream. Do not try to connect again, but stay connected. Once the `TcpClient` has been closed (you close the stream) it should not be used anymore.
you can check out the spec, but it can be confusing because there are 3 variations https://tools.ietf.org/html/rfc6455#section-5.2 basically, the header will store the length in either 1 byte, 3 bytes, or 8 bytes (depending on the payload size) assuming the simple case that its stored in a single byte (actually only 7 bits here), the max payload size would be 127 bytes... however 126 and 127 are reserved to indicate the longer formats... so this first case only includes payloads up to 125 bytes in length. anything longer then 125 bytes and you will have to use the longer formats. so the simple &lt;= 125 byte length case: * byte1: flags that you can ignore for now * byte2: high bit: 1 to indicate masked, 7 low bits: payload length * bytes3-6: used to unmask the payload so reading a websocket frame var header = new byte[6]; await _rw.ReadAsync(header, 0, 6); var length = header[1] &amp; 127; var body = new byte[4096]; await _rw.ReadAsync(body, 0, length); for (var i = 0; i &lt; length; i++) { body[i] ^= header[2 + (i &amp; 3)]; } return Encoding.UTF8.GetString(body, 0, length); and writing a frame var body = &lt;your message&gt; var len = body.Length; var header = new byte[2]; header[0] = 129; //some flags that will usually be the same header[1] = (byte)len; await stream.WriteAsync(header, 0, header.Length); await stream.WriteAsync(body, 0, body.Length); wait stream.FlushAsync(); even though the savings is only a few bytes, unfortunately chrome won't let you use the 3 or 8 byte format all the time, so eventually you will have to deal with it with some condition if (len &gt;= 126) { header = new byte[4]; header[0] = 129; header[1] = 126; header[2] = (byte)(len &gt;&gt; 8); header[3] = (byte)len; } 
For a project that's going to get actual use, I'd use SignalR, which wraps the various async communication protocols (WebSockets, XMLHTTPRequest, etc.) and uses the best one supported by the client automatically. If you're just out to learn the basics, then I'd follow dilatedmind's advice.
I do [a lot of PInvokes](https://github.com/antiduh/nsspi). I find it easy once you understand that you have to wrap it in a complete API before an ounce of your consumer code calls it. So I enjoy it, but then maybe I have Stockholm syndrome.
They won't sadly. They're saying something along the lines of "if we do it for you, we have to do it for everyone," although I don't know why 99.9% of the students would ever specifically request for a static IP :/
Well, your best option then is to have a publicly-hosted server somewhere to act as the middle man. Amazon has a free tier, and Azure has a free tier for students.
I looked through no-ip.com and they may possibly work, but I'm not sure how the "ads on redirect" will play with my application, and also the free-tier does not have guaranteed 100% uptime. I'm not wanting to spend any money if I can get my computers connected in any other possible way that's free and reliable. I don't just need to transfer data, it's a little more complicated than that, as I'm dealing with virtual devices and such (thus it's specific to my needs). I already have the program laid out so that it can work over LAN, I just need some way to get them connected over the internet.
Thank you, that's very kind of you- I'm going to be writing more articles every now and then and posting them here. :)
Interesting but I agree with the other commenters. Not fair to claim 19 lines by removing all whitespace and carriage returns / new lines.
That link was very informational, and it makes a lot of sense. I'll have to look into other methods then. Out of curiosity, how would writing a file to DropBox allow me to discover my other computer?
Good to know. Thanks so much. What do you think about the Project Euler questions? Or would you recommend something like CodeEval?
I prefer the nullable output, since you don't need to declare a variable to call it.
p/invoke is manual while C++/CLI is automatic (not trivial though). He who doesn't do mono should not be doing p/invoke, they should rather learn C++/CLI.
Has anyone tried kestrel http server?
this. Most System.IO/System.Net classes are intended to be once-off objects rather than reused. As an aside, consider surrounding your client and stream usage with `using` blocks to ensure the resources are always released. If you are working with text, you might also consider using [StreamReader] and [StreamWriter] classes to perform the tedious text encoding/decoding for you. [StreamReader]: https://msdn.microsoft.com/en-us/library/system.io.streamreader%28v=vs.110%29.aspx [StreamWriter]: https://msdn.microsoft.com/en-us/library/system.io.streamwriter%28v=vs.110%29.aspx Here's an alternative to your code that takes advantage of `using` and the StreamReaders/Writers: using (var client = new TcpClient("127.0.0.1", 5001)) { var stream = client.GetStream(); var reader = new StreamReader(stream, Encoding.ASCII); var writer = new StreamWriter(stream, Encoding.ASCII); bool stopRequested; do { writer.Write(message); var response = reader.ReadLine(); var dialogResult = MessageBox.Show(/* ... */); stopRequested = dialogResult == DialogResult.No; } while (!stopRequested); }
Project Euler is better than nothing, but those are primarily math problems, not programming or software engineering problems. I can't make any recommendations, because I've always learned by working on projects and doing research whenever I didn't know how to do something. Never got into the whole practice problem thing.
[**@DamianEdwards**](https://twitter.com/DamianEdwards/) &gt; [2015-12-17 00:20 UTC](https://twitter.com/DamianEdwards/status/677282272207245312) &gt; We're gonna need a new \#aspnet5 Kestrel perf target \#1million &gt;[[Attached pic]](http://pbs.twimg.com/media/CWYwoxyU4AAifnZ.jpg) [[Imgur rehost]](http://i.imgur.com/htBSOlQ.jpg) ---- [**@DamianEdwards**](https://twitter.com/DamianEdwards/) &gt; [2015-12-23 19:47 UTC](https://twitter.com/DamianEdwards/status/679750255772958720) &gt; . @ben\_a\_adams I think it's safe to say you're on to something in that PR &gt;[[Attached pic]](http://pbs.twimg.com/media/CW71QVrUwAAs8eB.jpg) [[Imgur rehost]](http://i.imgur.com/mCor2vm.jpg) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Lookup interface segregation. That's what you're looking for. Characters should be ICharacters in your scenario. Hero shouldn't know anything about a character. If you want a character to be a hero character then you should create a Hero type that implements BOTH ICharacter AND IHero... 
My gut feel is that you're not setting [ServicePointManager.DefaultConnectionLimit](https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit%28v=vs.110%29.aspx) hence causing the threads to block. Supposedly in .NET 4.5, when the HttpRuntime is invoked, the limit is set to Int32.MaxValue, otherwise it's 2 for non-web applications. The suggested count is [12 * number of cpu's as per recommendations](https://support.microsoft.com/en-us/kb/821268). I'd be careful of thread pool exhaustion when going higher. There's an old article you can read on [understanding MaxServicePointIdleTime and DefaultConnectionLimit](http://blogs.msdn.com/b/jpsanders/archive/2009/05/20/understanding-maxservicepointidletime-and-defaultconnectionlimit.aspx). The odd behavior of ServicePointManager.DefaultConnectionLimit is that it blocks the thread (synchronously), even when doing async operations and doesn't unblock with cancellation requested. I'd suggest you use the async approach and create a task scheduler that limits concurrency and schedule the tasks on there. See [here](https://msdn.microsoft.com/en-us/library/ee789351%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) and [here](http://stackoverflow.com/questions/15460971/throttling-tasks-competing-for-execution-under-the-hood).
http://answers.microsoft.com/en-us/office/forum/office_2010-customize/how-to-get-office2010-product-name-and-version/e4cf5fe2-766c-e011-8dfc-68b599b31bf5?db=5&amp;tab=question&amp;status=AllReplies#tabs Use the provided answer macro to get it displayed. You could translate this to C# of course.
Thank you for your reply! I'm not sure I understand though. I checked, and my DefaultConnectionLimit was at 2. However, I don't see how that keeps the other threads from running. I don't use any async calls. They way I have understood DefaultConnectionLimit is that if I have it at 2, and 3 threads try to connect to the same host, one of them is going to have to wait, and delay its work. But will not all three of them yield their CPU time while they are waiting, as if they are waiting for a lock? That (the previous) question is the root of my confusion. Why can't thread number 200 even get started, if all other threads are waiting for web responses?
Each web request requires a connection. The ServicePointManager is the thing that manages how many concurrent requests can take place. If you understand async, I'd really look at HttpClient and writing this as async. 200 threads isn't an unreasonable number of threads, but with async, it does seem unnecessary. To your original questions, when you say you see some thread didn't even start, what do you mean? You're spinning up threads with Thread.Start(), right, not just using the TaskPool with something like Task.Run(() =&gt; ...)?
I would use async in a for loop with all the links in a collection just fire them off and make sure they return with an ID
Nice, thanks for linking.
You'll definitely want to use async/await to take advantage of **I/O Completion Ports**. It's a feature of modern Windows OSs that enables truly asynchronous (non-blocking) I/O. Async/await is built on top of lower-level primitives that will use these when advisable.
I worked on a Netdunio 2 Plus board for my senior project so I've spent a pretty good chunk of time with it. What I can tell you is that the limitation of .Net Micro Framework can be extremely frustrating if you've spent a considerable amount of time writing 'real' C# code (ex. no interfaces or generics). So like the previous commenter I'd recommend it for small hobby type projects but if you're trying to make a 'large' project you'll quickly find yourself wanting more especially when you find the support just isn't as great as with other microcontroller boards.
The keyword in the quotes text is **can**. It doesn't mean it will. Although it's "blocking", if the it's a synchronous, the OS thread will not switch to another .NET thread. Async is what you want for that. I would advise against controlling the number of threads yourself. The TPL is a great tool, and will usually get to the optimal number of threads. https://msdn.microsoft.com/en-us/library/dd537609(v=vs.110).aspx I don't know if you're already using it, but I would suggest you look up ActionBlock. It's great for queuing up the next item you want processed. It allows you to set the how many blocks you want processed at the same time.
This is something that I already do to access websites related to my company (said websites operate on an IP whitelist). Wouldn't that require a 3rd computer to relay traffic through? If possible I'd like to avoid relaying information.
&gt; Each web request requires a connection. The ServicePointManager is the thing that manages how many concurrent requests can take place. Yeah, per host, right? From the article shelakel posted: &gt; This ServicePoint object manages all the requests for a particular URI Host and protocol. But I still don't see why my threads didn't work out. I was using the ThreadPool.QueueUserWorkItem, and the ThreadPool didn't get to them all. Maybe that has something to do with it? 
I bet I can make it *shorter* even! 
The string constructor would probably get JITed into a constant. And if it isn't, it will still be pretty efficient because the constructor would just be allocating a char array and shoving `'a'` into each array member. The Enumerable would be an incredibly inefficient way to do this, and the JIT probably wouldn't touch it because of the use of deferred execution and `yield` in `Enumerable.Repeat`. But honestly, neither of those will likely be a performance bottleneck when your application involves making a network call.
You don't. That's decided by the .NET Runtime and the Operating System. It's out of your hands. The component that controls it is called the scheduler. Here's a wikipedia article to learn some general information. https://en.wikipedia.org/wiki/Scheduling_(computing) In a perfect world, if there's another thread that would like to run, it would get run. I don't know how Microsoft has implemented the Windows scheduler. Now that .NET is open source, you may be able to look at the source to see how the .NET Runtime schedules thread. As I reread what you've quoted me, I realize it isn't completely accurate, due to the mention of OS threads. This is my understanding. I treat the Windows scheduler as a black box. The .NET Runtime will control which .NET thread is allowed to pick up the next work. The OS would only control when the .NET Runtime runs and how many OS threads it gets. However, since they're both made by Microsoft, there may be more integration and communication between the two. Edit: Using the Threadpool directly is no longer the recommended way to create threads. Use Task.Run (or other TPL methods), and that has what Microsoft has said is a more efficient way to create and manage threads via their thread pools. There was a great diagram someone created a while back explaining how TPL allocates threads in threadpools, but I can't find it now.
Oh my god, Thank you so much! I've been trying to work this out for a few hours now and seeing this as the solution makes me feel so dumb :')) Seriously, Thank you for your help and I'll start trying alternatives to goto, they do seem quite messy.
The real problem here, is your constructor is called "event" and your class is called "Event" (case matters). On top of that "event" is part of the underlying framework and can't be used. Since the constructor doesn't match and event means something special in the framework, you are getting a more "cryptic" error than normal. Moral of the story change the constructor to Event and you should be all set. /u/Phrohdoh's feedback is also good, that is the proper way to do that in C#, but your way would technically work. *edit: Slight clarifications
you should probably make all the diagrams have the properties to do this since the state of selected diagram can change at any time and you would not want to constantly be creating this custom diagram object from a base diagram. You could help not expose these properties if you are really worried by making an interface. You will want a backend viewmodel class for your view to have these 2 properties. ObservableCollection&lt;Diagram&gt; Diagrams {get;set;} Diagram SelectedDiagram {get;set;} This will let you easily bind all of it to the view and keep the logic of swapping and editing in your viewmodel. 
https://blogs.msdn.microsoft.com/ericlippert/2003/10/28/how-many-microsoft-employees-does-it-take-to-change-a-lightbulb/
To add to that: https://www.nuget.org/packages?q=priority+queue
I don't know if it's causing the crash, but this: "{0,5}{1,8}{2,12]" should be this: "{0,5}{1,8}{2,12}" (curly bracket instead of square bracket). The compiler can't validate format strings which is why it compiles without error.
IIRC there are some nontrivial implementation decisions to make when implementing this data structure (especially to get it to work with existing interfaces). It wasn't seen as valuable enough to implement in one particular way (which would become the standard). here is the issue as it currently stands for the core framework: https://github.com/dotnet/corefx/issues/574 Here is another implementation: https://github.com/Reactive-Extensions/Rx.NET/blob/master/Rx.NET/Source/System.Reactive.Core/Reactive/Internal/PriorityQueue.cs I personally think a `PriorityQueue&lt;T&gt;` class should not be in the framework. I'd much rather see a `BinaryHeap&lt;T&gt;` class (same thing, but the latter suggests a specific implementation).
If you control the page that will be setting the cookie, look at setting [ObjectForScripting](https://msdn.microsoft.com/en-us/library/system.windows.forms.webbrowser.objectforscripting.aspx) and using that object in some JavaScript to pass the value to your C# code. If you don't control the HTML, you can still use that trick, but you'll also need to inject a script element into the HTML. There's also some PInvoke options like [InternetGetCookieEx](http://stackoverflow.com/questions/15049877/getting-webbrowser-cookies-to-log-in) but personally I think I'd try the first two options first.
I literally just came to this sub looking for something along these lines.. Thanks for posting for me op
In C#6 you also have getter only auto-properties, which are initialised in the constructor and then readonly thereafter. public string EventLink { get; }
It would have to be "companies", I can't imagine anyone wanting to keep you around for long. This is fun, write back after your next exit interview.
https://gist.github.com/ Because reddit has crap code formatting.
This isn't C#! It's UnityScript, a version of JavaScript made for Unity. The colons are used when declaring variables to seperate name and type, and the order of those is reversed from what you're used to; name goes first, type goes second.
I believe this is Unityscript as opposed to C#, in which case this would be the same in C# as Transform explosionPrefab; GameObject boom = Instantiate(explosionPrefab, etc.) You are essentially just declaring a variable of that type
This is not C#.
How this class would be written typically in C#: public class Event { public Event(string link, string title, string info, string image, string description) { Link = link; Title = title; Info = info; Image = image; Description = description; } public string Link { get; } public string Title { get; } public string Info { get; } public string Image { get; } public string Description { get; } } This uses a C# 6 feature in the readonly properties. The error you are encountering is due to the case of your constructor not matching the class's name, as pointed out by /u/sundrag. Also note that traditional naming conventions of C# would have method names in pascal case and private fields in camel case prepended with an underscore such as this: private string _link; public string GetLink() { return _link; } However, the real importance of naming conventions is being consistent. Edit: updated order of members to adhere to style cop standard of properties after the constructor. Edit 2: If the readonly behavior of the properties in this example are undesired you can still prevent them from being set outside the class by declaring the setter private as such: public string Link { get; private set; }
I've written my own for this before, using a binary heap but unfortunately that was a closed-source project. We have a similarly designed implementation inside one of my OSS projects here: https://github.com/akkadotnet/akka.net/blob/dev/src/core/Akka/Util/ListPriorityQueue.cs 
For a cheaper solution using C# or VB.NET from Windows, see www.Nusbio.net. I always find Arduino better and cheaper than Netduino/Gadgeteer, if I am in the mood for C++. 
It looks like you call Start() regardless of any if/else statements, so the Goto's aren't actually doing anything special. My advice would be to use a switch(sort) instead of the if/else as it will make it more readable. default: is your "else" Then call Start();
Why are you trimming it with IsNullOrEmpty? Just check the value with IsNullOrWhiteSpace. It checks for white space, empty string, and nulls!
Oh, right! I am not yet writing C# 6 so I forgot this was an option.
Nice, I like the new versions.
Sadly it won't work with me. I'm behind a NAT and I cannot forward any ports as I'm using my university's internet.
About time they fixed their insanity versioning.
ASPHostPortal.com for asp.net hosting. You can rely on them
Thanks for your iamverysmart answer. How can you come up with the idea of writing myself ? I couldnt think of it. How brilliant! So you think pqs are very necessary in java or go etc etc. Only c# does not need it ? 
This is the best answer I have ever found. Thank you very much.
Especially since OP didn't read "formatting help" before posting. 
Thank you very much!
Assume your file is: abc... // line 1 abd... // line 2 abc... // line 3 abd... // line 4 aaa... // line 5 What is the expected result? I'm not sure which one of the following scenarios you are expecting: The files * _a.txt_ that will contain lines 1, 2, 3, 4, 5 (and if line 5 should be present once or three times) * _b.txt_ that will contain lines 1, 2, 3, 4 * _c.txt_ that will contain lines 1, 2 * _d.txt_ that will contain lines 2, 4 Or the files * _abc.txt_ that will contain lines 1, 3 * _abd.txt_ that will contain lines 2, 4 * _aaa.txt_ that will contain line 5
There is absolutely more than one way to create a priority queue. For example within a binary heap, you can delay the reheap operations to the peek or remove operation and have `O(1)` adds. Within that issue it is still something of an open question if enumeration should provide sorted data. Not doing so is clearly faster and simpler, but it would mean the implementation is fixed because someone could depend on the deterministic order of how the sorting occurs. edit: If you don't take allocations into account (the .NET team absolutely would), a Binomial Heap is a strictly superior implementation over a Binary Heap. It might be possible to implement a binomial heap over an array to get an allocation profile equivalent to a binary heap (and this can also be skewed for insertion to be `O(1)`) but there may be some memory overhead. 
&gt; There is absolutely more than one way to create a priority queue. I think you misunderstood what I said. :) I said there might've been one on the way! Not that there's not more than one way to make one.
&gt; I got an double* and want to convert it to a Double[]. How can I do this, without copying every element individually? Create a new managed array, pin it on the heap using `GCHandle`, and copy the memory using memcpy via P/Invoke. Example: DllImport("msvcrt.dll", EntryPoint = "memcpy", CallingConvention = CallingConvention.Cdecl, SetLastError = false)] private static extern IntPtr Memcpy(IntPtr destination, IntPtr source, UIntPtr count); double* doublePtr = /* .. */; int arrayLength = /* .. */; double[] doubleArray = new double[arrayLength]; GCHandle pinnedArrayHandle = GCHandle.Alloc(doubleArray, GCHandleType.Pinned); try { MemCpy(pinnedArrayHandle.AddrOfPinnedObject(), (IntPtr) doublePtr, new UIntPtr(sizeof(double) * arrayLength)); } finally { pinnedArrayHandle.Free(); // this frees the handle, not the memory }
[removed]
Use Substring() to get the first 3 characters as a string and group on that.
Not real fall-through, but it's own kind. Real fall-through, to me, is executing the code above and falling through to the next set of code below it, executing it, and only breaking when a break is hit. 
yup, i have a few i tend to rewrite, and apply new things i'm learning to. For instance, i've taught myself lots about dapper, EF, mvvm, generics, and so on! The project will probably need see a release, or even be used by myself in realtime. But it definitely helps give me an avenue to learn things with. I plan on trying to rewrite it next using MVC and dabble into the web app world. I've considered moving my hobby projects to github, for a resume of such. But i have a few private repos with bitbucket, and need to research the process of being able to use both on the same machine.
I'm working on one right now. I'm calling it SystemSettings. At this point it's just a DLL. The idea is to pretty much provide a place to store name+value pair like stuff. E.G. "DBVersionDisplay" and "2.1.56.89" It's a more complicated than that but I hope to get it done and out there in the next few days. It's going to have web services and a generic MVC UI built on it.
Actually, The issue is... disregarding the other issues, the tasks are never started! So.... it would never complete.
I am still working on it, doing some performance tests to judge the benefits of running parallel/async.
*most uses
I actually downloaded the 2015 version at first, before I noticed that the book requires some functionality of the 2013 version. I can't create the type of blank app that the book requires with the 2015 version, sadly.
that's just a template. you can just make a new console app or class library project and delete everything it generates for you.
You need a Windows Developer License to sideload RT apps for testing, otherwise Windows won't allow you to install apps that aren't certified via the Windows store. They're free and there should be an option to create one somewhere in the menu, but I'm not sure where exactly it is in VS2013. This is unrelated to the Visual Studio license itself.
First will simply give you the first element of the collection. Take gives you an enumerable(collection) containing all the elements between the beginning and the specified index. Essentially the difference would be the difference between this: Int x = 5; And this: Int[] y = int[1] y[0] = 5
Got it! I closed and reopened Visual Studio (you never know) and a pop up came onscreen, telling me that I needed to change my settings. Done it, and the error message is gone. Thanks!
.First() returns the first object and throws an exception if the initial enumerable is empty. Take(1) returns an enumerable that only has one value and will give you an empty enumerable if the initial enumerable is empty. var animals = new List&lt;string&gt;() { "bear", "pug", "cat" }; // .First() string firstAnimal = animals.First(); // .Take(1) IEnumerable&lt;string&gt; firstAnimal = animals.Take(1);
Ended up using this: var Model = context .SLObject .OfType&lt;SLObject_SCOM&gt;() .AsNoTracking() .ToList() .AsParallel() .Select(o =&gt; SLObject.GetDetailsAsync(o.ID, Start, End)); public static async Task&lt;SLDetails&gt; GetDetailsAsync(int SLObjectID, DateTime Start, DateTime End) { return await Task.Run(() =&gt; new SLODB() .SLObject .Find(SLObjectID) .GetDetails(Start, End)); } Seems the biggest benefit I found, was just creating a new thread with its own context, and using asparallel.
&gt; tting a 1-many resource? Context is a dbset of &lt;SLObject&gt; which is a base object which contains a few properties, and a number of relationships to other objects.
Could you do something like this? var ids = context .SLObject .OfType&lt;SLObject_SCOM&gt;() .AsNoTracking() .Select(o =&gt; o.ID) .ToList() var Model = context.SLObject.AsQueryable().Where(o =&gt; Entity.Contains(o.ID, ids) &amp;&amp; Entity.Between(o.Date, Start, End))... I don't know what framework you are using or how to do that but this is the idea: get all your stuff in 2 queries (could probably do it in 1...). edit: when my application is in debug mode, I increment a counter every time I run a query against a database and then throw an unhandled exception if that number gets above 10 (actually a value in HttpContext.Current.Items, but it defaults to 10).
Although, it's really not a problem, as the total page load time is only 400ms. I just enjoy trying to get it lower.
See for yourself http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,bc8ae402a61dd9d6 http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,ceb7d3d4f0a39720,references
heh yeah I don't do any kind of query batching (if I am doing a table of Foos and a table of Bars and those 2 things aren't related to each other somehow, I am probably doing 2 round trips to the database*) It sounded like `GetDetails` was doing some queries internally, but now I am guessing you already have the data on the objects and are doing some computation on it? A projection in the database for this is probably better (less data over the wire; more scalable web app), but parallelizing the app isn't terrible. You have to pay a computation price somewhere. \* I'm actually worse than that because they are probably 2 separate web api requests from the client :/
A lot of the logic was in the database, but I made a decision to put most of the logic in the data tier for ease of maintenence and scalability. Overall the decision is well worth it. The database only enforces relational and data constraints.
Don't forget FirstOrDefault(), which is safe like Take(1) but doesn't require you to unwrap an IEnumerable.
I agree completely on putting the code for computation in the code for the application, but thanks to linq that doesn't necessarily mean executing it in C#. 
And doesn't throw if there are no items. 
Didn't say anything yesterday when this was originally posted, but I read through it and some of the additional bits that linked to Mark Rendle's blog and got a ton of value out of them: https://blog.rendle.io/fun-with-asp-net-5-and-docker/ https://blog.rendle.io/fun-with-asp-net-5-linux-docker-part-2/ https://blog.rendle.io/fun-with-asp-net-5-linux-docker-part-3/ Those are all worth a read as well
Is this Linq-To-SQL or Linq-To-Entities? I just tried it with both, and it worked in both cases for me, but knowing which it is might help with debugging. Also, is collection a IQueryable? Are proxy classes enabled? 
How about AXSP.Net? Bring back the old ActiveX moniker.
Personally I'd prefer .net dropped in favor of something more searchable too.
Yes please.
What OS is the backend? It needs to be something that has the codecs to open the WMA files, you can't convert what you can't read. Check out [BASS](http://www.un4seen.com/bass.html), there are Windows, Linux and MacOS libs for it.
This is a reasonable solution, but he said he didn't want to copy, which is not a reasonable request. Best he can shoot for is to build a custom method or property to access memory like an array would. 
I created a new context inside the async class when running in parallel. It is not thread safe at all :-/
Ah, sorry! I work almost entirely with databases, and I assumed out of habit. I definitely shouldn't have. :) That changes things. I'm pretty sure the null coalesce isn't the culprit. Can you provide any more code that could be helpful? I set up a simple test in LinqPad and it selected the entry: void Main() { var collection = new List&lt;Foo&gt; { new Foo { Bar = 0 } }; var value = 0; var selected = collection.FirstOrDefault(foo =&gt; foo.Bar == value) ?? collection.FirstOrDefault(foo =&gt; foo.Bar == 0); selected.Dump(); } public class Foo { public int Bar { get; set; } }
This looks weird indeed. Can you post some snippet where we can test? Namely, fill the collection with exactly one value (foo.Bar = 0), and execute that code. Then, we could look into it. Best, John
But then it won't be able to access any of the data ( Include or otherwise ) that's loaded into the context from which the parallel execution is triggered. Every parallel thread would have to run the Find() against the database, which would lead to far more than just 18-19 queries. Could explain the 400ms. I would try to only pass around fully saturated classes so you don't have to worry about new-ing the dbcontext in the parallel execution. 
Fetching 20 records in parallel doesn't take long
Everything is intranet. It's really nice having everything only a few ms away :-)
So you're just passing in n number of instances of HeroCard to your constructor? Wouldn't it make more sense to have these in a resource (xml, json, csv, database) somewhere to make it easier to add/remove items? The constructor is not the right place to pass in data for a collection, better to load that from somewhere else, especially if you're dealing with what will ultimately be an indeterminate number of cards. If you absolutely must do it in the constructor, just pass a single IEnumerable&lt;HeroCard&gt; as your constructor parameter that way when you call it you can just say new ClassName(new []{hCard1, hCard2, hCard3}) and then just iterate through them to build your collection. I'm still not completely sure I understand what you're asking. Could you dummy up something similar and throw it out on github? Would be easier to understand the use case with a more complete explanation. 
Sorry, I didn't specify that the class in question I really need help with is the CharacterCard class (HeroCard inherits from CharacterCard). Right now HeroCard is parameterless, but I only did that to not clutter up the example. If you want a full illustration of what I have to deal with presently, here you go: public static class CharacterBaseLibrary { private static CharList&lt;string, CharacterCard&gt; charList = new CharList&lt;string, CharacterCard&gt; (); static HeroCard tws; static HeroCard pip; static HeroCard rad; static HeroCard rar; static CharacterBaseLibrary () { tws = new HeroCard ("HeroName1", "Intelligence", 1.1, 2.3, 3.2, 27, 14, 30, 600, 900, 0.35, 0.25, etc.); charList.Add (tws.Name, tws); pip = new HeroCard ("HeroName2", "Strength", 2.1, 1.35, 2.1, 18, 14, 19, 128, 0, 0.25, 0.25, etc.); //I think you get the point } public static HeroCard FindHero(string wantedHero) { if (charList.HeroList().ContainsKey (wantedHero)) { return charList.HeroList() [wantedHero]; } else { throw new CharacterNotFoundException(); } } } Again, all 20+ parameters have to be instantiated or else the HeroCard class doesn't work with the rest of the program, and each instance has unique parameter values. I'll try to get a github up. Never used it outside of assignments though, so...
If it wasn't called ASP.NET it wouldn't have as much adoption because it would be seen as a more experimental or unproven technology.
A similar StackOverflow question here: http://stackoverflow.com/questions/6239373/how-to-avoid-too-many-parameters-problem-in-api-design Suggests using the Builder pattern. Either way though, if you have many parameters that need to be set, you're going to have to set them in some way - all patterns are just going to be variations on setting that many parameters. The second answer might be a better fit, if you can continue to consolidate your 'similar attribute' work.
I assume that is what /u/grauenwolf meant by "safe"
I have no clue about the converting while still streaming thing. Don't know if that is possible. but for conversion i would go with a queue setup and ffmpeg workers..
In reality, you should never use First() outside of a unit test. In almost every single situtation it is wrong to do so. It shows you have something very wrong in your model. Now Single() or SingleOrDefault() are perfectly acceptble. Edit: i swear the majority of people on this reddit are first year CS students who have no idea what they're talking about.
You implement Comparers for whatever you want.
and Single() / SingleOrDefault()
Neither of those are safe if your enumerable contains more than one item. 
Try search for documentation on common operators on Google ;( "C# &lt;&gt;" for example
That's actually kind of the point of them. 
Also, first allows you to add an addition condition: var animals = new List&lt;string&gt;() { "bear", "pug", "cat" }; // .First() string firstAnimal = animals.First(x =&gt; x == "bear"); // .Take(1) IEnumerable&lt;string&gt; firstAnimal = animals.Where(x =&gt; x == "bear").Take(1);
For the second one, that's not clear from the name, but it does indeed throw with multiple elements.
For example when you close a big form.
They're XML/HTML entities, stand-ins for characters that might otherwise interfere with parsing the markup, or can't be represented in the chosen text encoding. For some reason they appear to be encoded twice in that feed (a non-breaking space is encoded as "\&amp;nbsp;" and then the ampersand is encoded again, becoming "\&amp;amp;nbsp;"). I'm assuming the XML parser decodes them once, but not the second time. You can use [HttpUtility.HtmlDecode](https://msdn.microsoft.com/en-us/library/7c5fyk1k.aspx) or [WebUtility.HtmlDecode](https://msdn.microsoft.com/en-us/library/ee388354.aspx) to decode them again, although I'm unsure if either of those classes is available by default in Unity.
Define 'big'.. 
Or !=, or ==, or &lt;, or (Etc)
no
if you need memory .net will fire the garbage collector. otherwise you're just wasting resources by calling it.
That doesn't seem to work for any language I tried. However with "C# != operator" you get relevant results (top result for me is however for different operator). Part of difficulty here is that terms starting with ! at least used to be interpreted by google as "must have", ie you're searching for "C# =" and the page must contain '='. But yeah, special character (operators) soup is difficult to search. When you turn to actual words like "C# inequality operator" then it works. But that's mostly google-fu.
I don't know what off the record encryption is, but my advice is don't reinvent the wheel and use the libraries available to you. 
Microsoft has horrible naming. "Visual Studio Online" which is really a JIRA and TeamCity competitor and while it integrates with VS (and intellij and eclipse) it is a distinct product that shouldn't be branded with VS.
the Benchmarks is made wrong if you need to call the GC. you can mark section of the code as critical and then GC will not fire there: http://stackoverflow.com/questions/6005865/prevent-net-garbage-collection-for-short-period-of-time
Here's one circumstance where I've seen it be proper to manually call the GC. You have a farm of ASP.NET servers. You don't want them to run the GC while rendering pages because of the latency it would cause, so you pack them full of ram, turn off automatic collection, and register for GC notifications. You render your request, and if the GC needs to fire, you unregister yourself from the ASP pool, manually perform the collection, and re-register. Now you're postponing collection so it happens when it can't affect user requests. This Msdn page explains in more detail: https://msdn.microsoft.com/en-us/library/system.gc.registerforfullgcnotification(v=vs.110).aspx
In my game engine I call it after loading or unloading a level because all that processing and setup etc creates a lot of garbage and I'd rather not have a large pause halfway through playing.
The snippet of code looks fine. Can you post the full method?
&gt; Terminology you need to know Until next month when it changes again.
I had to use it in Xamarin, when dealing with images resizing in really low memory devices like Windows Phones. The OS will crash your app if you go above a certain memory threshold, so I had to call GC myself before I processed the next picture. 
Ohhh I see! Thank you for answering! You're right its not available in unity it seems but http://docs.unity3d.com/ScriptReference/WWW.UnEscapeURL.html is suposedly the equivalent but I dont understand how to actually use it..
URL encoding is a different kind of encoding, I'm afraid that method won't help you (it's analogous to [HttpUtility.UrlDecode](https://msdn.microsoft.com/en-us/library/adwtk1fy%28v=vs.110%29.aspx), not HtmlDecode). 
Manually collecting is not only useful but also essential when tuning your software or when investigating through potential memory leaks, weight peak memory usage and so on. Other than that just let the GC to do its own job 
generally speaking if your constructor has more than 2-3 parameters, either; a.) your class does more than one thing b.) needs parameter values refactored out into their own class, as they're probably grouped anyway. I assume based on your example below that those numbers are stats, like str, agil, int, etc? So break those up into a simple class like... public class CharacterStats { public int Intelligence { get; set; } public int Strength { get; set; } public int Agility { get; set; } // ... etc... } then populate character stats and pass it into your hero card constructor... like.. var myCharacterStats = new CharacterStats { Strength = 20, Intelligence = 12, Agility = 16 }; var myHero = new HeroCard("Soc Monkey", myCharacterStats); This may seem like more typing, but is MUCH more flexible and easier to read than your way. Another big problem with your constructor (other than the 20+ parameters) is it's difficult to know what values are for which stats. You'd have to either use the IDE for help (hopefully) or go lookup the method/class signature to find the parameter order. If these character values are static, then you should be reading/writing (think .json, .xml, or a database) and populating from a persistent source. Hopefully i didn't misread what you're wanting to achieve. If so, please let me know and i'll try to help.
Between benchmark tasks to make sure the garbage generated in one task doesn't pollute the time taken to perform the next task. 
well i disagree with him. he might be 100 time better than me but what's the point of calling GC after you close a big form (other than very short pause that probably won't be noticeable :p). won't be better to let GC collect while you'r waiting for the user input (or database/ file/memory read)?
Try it. I dare you. void Main() { GetObjects().Single(c =&gt; c.Id == 10); } public class MyObject { public int Id { get; set;} } public IEnumerable&lt;MyObject&gt; GetObjects() { var i = 0; while (true) { yield return new MyObject { Id = i }; i++; } }
I'm not sure what you mean by *call*, but in the [Dispose Pattern](https://msdn.microsoft.com/en-us/library/b1yfkh5e%28v=vs.110%29.aspx) you interact with it.
Is it possible for you to have `Foo` implement [`IDynamicMetaObjectProvider`](https://msdn.microsoft.com/en-us/library/system.dynamic.idynamicmetaobjectprovider%28VS.100%29.aspx?f=255&amp;MSPPError=-2147217396) or inherit from [`DynamicObject`](http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject%28VS.100%29.aspx)? If so, then it's pretty easy: http://stackoverflow.com/q/1110481/1269654 EDIT: Though, if you're looking to be using _properties_ instead of _methods_, I think you'll want to implement the [`TryGetMember`](https://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.trygetmember%28v=vs.100%29.aspx) and [`TrySetMember`](https://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.trysetmember%28v=vs.100%29.aspx) methods instead.
Use AES (symmetric) to encrypt your files and RSA (asymmetric) to encrypt the keys. 
You might be able to do this with ExpandoObject(), see https://msdn.microsoft.com/en-US/library/system.dynamic.expandoobject(v=vs.100).aspx (scroll down to see some code samples)
Try dropping them into a separate AppDomain, then unload the whole domain in one go. You're guaranteed to not have any stragglers.
It's a university final project. I know, 12 weeks is a bit tight, but I'm free to build it up and then add on extra functionality as I go to make it better. The C# client has to be in XMPP, Off The Record has been used with that but encrypted file sharing isn't officially recognised anymore so I'm looking for ways to encrypt a file in the client and then send it over the normal XMPP file sharing way
There's built-in support in the framework for bcrypt supported key derivation. Rfc2898DeriveBytes https://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes%28v=vs.110%29.aspx
Words of wisdom: Do not work on extra functionality until the core requirements of your senior project are finished and checked off. Not doing so can land you in hot water.
I know I'm doing your homework for you, but I'll bite. Console.WriteLine("What class are you in? 1 2, or 3?"); while (true) { string @class = Console.ReadLine(); if (["1", "2", "3"].Contains(@class)) break; Console.WriteLine("Please enter a real class"); } Should be something like that, anyway. I haven't written c# for a while. Also, don't use `goto`, it's the devil.
I used to spend hours carefully counting references to make sure each and every one was run through Marsahl.FreeComObject (or whatever it was called). Then the damn flash developer sitting next to me showed me up by knocking out some Excel work using app domains. 
It seems to me like you have a data object class that is meant to hold 20 values for character stats. (20 seems like a lot of values, but if they really are closely related, so be it) If you really don't want the properties to be settable, then 20 constructors parameters is what you need. If you are going to load the data from any kind of storage, you will probably find it much simpler to have settable properties.
It should be "which class" and you should probably have some sort of verb in there. Don't use goto. Ever. If you have more than 2 options, prefer a switch statement instead of a bunch of if/elses.
Relevant xkcd about goto: https://xkcd.com/292/
OK, thanks. Excuse my ignorance, I'm just starting this. That's a great help, cheers
[You don't need to have a break after each case if you don't do anything in it](https://msdn.microsoft.com/en-us/library/06tc147t.aspx), it can just be: case "1": case "2": case "3": break; Also, stop using gotos. Please. I code in C# since 2007 and never needed it once. Anything you do with gotos can be done in a cleaner way (unless it's a really shady corner case you aren't in). From the first picture, you should control the input for the second question before creating the streams stuff ("sort" can be anything the user typed, not just L, V or H)
Sound, thanks for all your help. You've saved me at least a few days of researching stuff aimlessly
You should read on loop. Do...while and while. bool classIsValid = false; string classChoice; string[] ValidClass = { "1", "2", "3" }; do { Console.WriteLine("What class are you in? {0}?", string.Join(", ", ValidClass)); classChoice = Console.ReadLine(); if ( ValidClass.Contains(classChoice) ) { classIsValid = true; } else { Console.WriteLine("Please enter a real class"); } } while ( !classIsValid );
You're trying to do several things here... 1.) Get an input from the user 2.) Validate input (checking if it matches 1, 2 or 3). 3.) Control statement flow using goto.. don't do this, goto is evil This method solves problem #1: private int getNumericInput() { var input = Console.ReadLine(); int number; if (!int.TryParse(input, out number)) { Console.WriteLine(); Console.WriteLine("ERROR: input value must be numeric."); Console.WriteLine(); return getNumericInput(); } return number; } This method solves problem #2. private bool isClassNumberValid(int classNumber) { return (classNumber == 1 || classNumber == 2 || classNumber == 3); } Finally you this code, which ties it all up. note: if you're going to only use this once, then don't need it to be a method itself private int getClassNumber() { int classNumber = 0; bool isValidClassNumber = false; while (!isValidClassNumber) { Console.Write("Please enter a class number: "); classNumber = getNumericInput(); isValidClassNumber = isClassNumberValid(classNumber); if (isValidClassNumber) break; Console.WriteLine(); Console.WriteLine("ERROR: That class number doesn't exist, please enter a valid class."); Console.WriteLine(); } return classNumber; } Probably not perfect (you could combine method #1 &amp; #2 for instance), but should give you a good idea, how to do what you're doing without using goto statements.
Consider this code: excel.Sheet[1].Cell[2, 5]; It looks safe, but the stupid thing will leak a reference to the Sheet. Pure horror. 
Here is all I can think of: * Make sure EVERY file where the class is defined uses the keyword 'partial' * Make sure you are actually instantiating the class * If you can't figure it out, just make an extension method instead of using the 'partial' keyword? There doesn't seem to be anything wrong with what you have shown, so it must be an issue in code you have not shown or in the general project/dependency structure, or perhaps just an issue with your IDE.
Honestly, when stuff like that happens, I'll clean the solution and restart VS. You appear to have everything correct.
This had me scratching my head quite a few times 
oh, it actually worket out this way. Thank you :)
Hey it worked for the Xbox!
The error mentions method "GetColor". Have you searched for where this is being used? 
I actually made this example up and changed it to make it more clear and missed that one I guess haha so its not a real method. I ended up solving it by messing around with the references and other stuff. Thank you
I'd recommend DataContractSerializer if you don't want any third party dependencies or Json.NET (the fastest and best). DataContractSerializer https://msdn.microsoft.com/en-us/library/ms752244(v=vs.110).aspx Json.NET http://www.newtonsoft.com/json/help/html/SerializeObject.htm
I actually got a conversion error when using the mockData as well, which confuses me even more.
You should really just post the actual error so people don't have to guess. 
You can also run Windows 10 on RaspPi2 and talk I2C directly. This looks cheaper than a Phidgets board, if you only have USB.
i don't know much about MOQ really, but aren't you supposed to get the .Object property value to do the actual tests on? var mockPersonRepository = new Mock&lt;IPersonRepository&gt;(); // setup... IPersonRepository personRepository = mockPersonRepository.Object; personRepository.Add(...) personRepository.Remove(...) // etc..
Help me understand why I would use this. What is my use case? Why wouldn't I just use EF?
Pretty cool, nice work. Should add unit tests and an example program. I can see the appeal for having pure SQL files instead of migrations happening in managed code.
Yes, it's possible.
You can't add elements to an `IEnumerable&lt;&gt;`.
Doh, my mistake. 
Is this for college/University?
Thank you this will get me started!... My question is EF the only option moving forward
No, .NET Core is more friendly towards composing your preferred stack. EF is just a convenient choice since you're asking about simple crud. Also if your only experience is with the EF designer I suggest you take a small step to EF code first, instead of a bigger step to a third party ORM. ^source: ^have ^experience ^with ^EF, ^nhibernate, ^servicestack, ^and ^some ^smaller ^orms.
Change new List&lt;int&gt;().Add(programID) to now List&lt;int&gt; { programID } As u/tweq and u/RoadieRich have noted, your code is attempting to pass the return value of List&lt;int&gt;.Add(int), *not* the list you're constructing. Either construct the list outside of the function call, or use a collection initializer, instead.
ah, that makes sense, thanks for the help
The problem is that the list's Add() method returns void. In other words, the result of the expression *new List&lt;int&gt;().Add(program.Id)* is void and thus not a valid argument for the dictionary Add(). If you want to do this inline you should use the collection initialization syntax: *new List&lt;int&gt; { program.Id }* Next time post the full error message, it's much more helpful in figuring out the issue.
I just hope they will not use the `Tuple` type as underlying data structure for the tuple support.
the problem is that you're declaring a bunch numbered variables when what you really want is an array or an ICollection like a List, declared before your loop starts: List&lt;Book&gt; myBooks = new List&lt;Book(); now in your loop when you create your book, you just shove it into the list: Book nextBook = new Book(constructor arguments go here); myBooks.Add(nextBook); I assume at some point you're going to need to check the books the user has entered for something. any loop will do the job but ill use a foreach as the example: foreach (Book book in myBooks) { if (book.bprice &gt; 50) { Console.WriteLine(book.bname + " is an expensive book!"); } } foreach will run the code inside of it against each Book inside myBooks, and the variable name you declare (in this case, book) is how you refer to the given object in this context. I don't normally spoonfeed on homework assignments, but loops and classes are two things that novice programmers seem to get stuck on, so hopefully that helps.
I agree... i guess the real question that i am alluding to is their an upgrade path from using more traditional SqlClient(aka SqlConnection,SqlCommand) Framework
Is the "Pattern Matching" effectively a type switch? Been looking for that for a long time. http://stackoverflow.com/questions/4478464/c-sharp-switch-on-type
That is one possible use case, yes. All three features here described are already long present in F#. So it's definitely worth checking out.
I like the what and why approach, cuts to the chase. The pattern matching thing looks cool.
Are you retarded.
This allows X, Y, Z to be private mutable. The original was using getter-only properties which convert the backing field to **readonly**.
More like, they serve a different purpose. If you need to guarantee that your collection has only one item, then Single() is safer because it will fail if the condition is not met.
Honestly, record classes seem easier to read than existing POCOs. I suspect there are more features to pattern matching than displayed here, although this is doing property unpacking, which `switch` on types wouldn't do. I suspect you can also add arbitrary filters, since that's a common feature in other languages that support it. And for all we know, there will be record `struct`s implemented with readonly fields.
I suppose the reason is simply that no one has bothered to program the compiler to recognize and optimize this scenario. At least I can't think of any case where the two would behave differently, since delegates are immutable (ignoring locks and possible reflection weirdness). I know that the creation of lambda delegates is cached where possible.
What did you fix? You made it worse. Getter-only auto properties were introduced in C#6, you might want to catch up first.
&gt; although this is doing property unpacking, which switch on types wouldn't do Is that such a big advantage? Is writing `$"{Width} {Height}"` really so much better than writing `Rectangle asRect = (Rectangle) p; $"{asRect.Width} {asRect.Height}"` that it deserves yet another new syntax in the language; especially considering this should be a case that comes up extremely rarely if polymorphism et al are being used correctly? I know I'm being fairly conservative with language design here but I fear that C# is becoming a kitchen sink language, much like C++, which is horrible. &gt; And for all we know, there will be record structs implemented with readonly fields. Even then, they're useless if you can't simply use it as a shorthand for the constructor + fields while still implementing the rest of the struct (i.e. `struct Point(int x, int y) { /* add methods here */ }`). I mean, let's be honest, with a Rectangle type you never just want the width/height, you need some methods and properties to handle geometric properties like getting the area, the position of each corner, etc
Hrm. You're right, but there's a deeper truth here. Memory consumed by POCOs absolutely can't get cleaned up by anything but the GC. But how much memory used by a Form object is from the POCO (the variables storing references to other controls, your own properties and state, etc) versus the native resources that the POCO represents - I'd imagine a good chunk of the memory that is used by a Form object is in the form of the native handles and buffers used to draw the object, and that's something that `Dispose()` absolutely would release right then and there.
Lol, we are just switching to 4.5.2 at work...
They are planning on using a value-type instead.
User Name irrelevant :D 
Read through some of the stuff on fsharpforfunandprofit.com Tuples and records are already a feature of F# and the site does a better job of explaining their purpose and benefits in the grand scheme of things
Just updated my projects to 4.6.1. Some of those projects are shared. I'm sure there will be bitching when someone tries to use the new DLLs...
&gt; Or did you mean something else by kitchen sink, such as let's see how many features we can throw into it? That's what I meant, yes (also hello Sparky :)). They don't seem very good at saying "That doesn't fit in to C#". Some concepts from other paradigms (e.g. functional) have been great additions, LINQ obviously is brilliant and there are other examples; but I think sometimes it's worth remembering that C# *isn't* F# or Haskell or C++, and that's a good thing. That being said, I stand to be corrected if it turns out I can write `struct Rectangle(int Width, int Height)` and it will use readonly public fields and allow me to add to the basic template... That *would* be useful. Still not convinced on the pattern matching.
You need to make the function that does work also async. Then call that function with await FunctionThatDoesWork();
there* and no, whole other game. (Or yes, if its a seperate layer, rip the whole layer out)
I'm going to get eviscerated for saying this, but I find the record type and "multiple ways to create classes" stuff to be cruft, just like I did when I saw it in F# * The oh crap moment when you have to refactor one into a class seems negative (imagine now needing a simple distance function, using the point example, you could use an extension method, but still, not hard to imagine how this falls apart; I'd rather have some methods, [and so would Microsoft](https://msdn.microsoft.com/en-us/library/system.drawing.point) * C# is already pretty non-verbose, I'm not wow'd back the amount of code they've saved * It's another design decision everyone has to make that doesn't vary the end result for those with C# experience, it just saves a few keystrokes. Less mutable state for newer devs, I guess. * Hard to end up shipping them publicly because **all** members are public obviously. Tuples are nice because, yes, the out vars in .NET, of which there are over 500 (!) are an admission of needing multiple return values haha.
I wish c# had elemental methods so that you can call them with collections as well as scalar types the same. class Shape { public double Area { get; set; } public static Shape opearator+(Shape x, Shape y) { return new Shape() { Area = x.Area+y.Area }; } } // example usage { Shape[] X, Y, X; // init X and Y // use elemental operator + Z = X+Y; } So if a method or operator is defined for scalar arguments, it can be used with arrays automatically element by element.
The .NET framework version is independent of the C# version. You can use C#6 with .NET 3.5 projects just fine.
I assume there will be a way to add methods to these just like you can with record types in F#. There's a lot of benefits to getting structural equality for free and enforcing immutability.
The main advantage is that it designed to work with plain SQL files (some projects does not use auto-generated DDL) . It fits better for scenario where you want to keep database schema inside csproj and you want to maintain the schema in a convinient way. Next benefit is the API - if you have EF experience it will be intuitive for you.
Right which why I said less mutable state for newer devs, can you source the record type methods in F#? I must have missed that!
Algebraic data types are coming to C#, probably in C# 7, so we'll finally be able to implement proper monadic types.
&gt; Unfortunately since C# lacks union types it's pretty much impossible to implement this at the present. You can implement it the same way as F# does it. It just lacks fancy syntax features.
I probably provided wrong explaination. It is C# related because it designed to help developers to mainain DDL scripts in their C# programs. It has also support for C# (most popular so far) IDE what gives C# developers an additional benefit. &gt;People never think their code requires documentation. But especially &gt;in these cases it is required. You did not even bother documenting &gt;the methods. What does the "$withData" switch do? Or the "$force"? &gt;One has to bother looking through the source code and &gt;understanding it before even having a clue on how to use the function. I don't care about code comments I use more descriptive code instead. All the parameters and commands are explained on the main page of the project (on github). Each command has a description and every parameter has is explained as well. I decided not to duplicate the comments. As you can notice I documented only public API of the project the core is undocumented and it was aware decision. &gt; Excuses. Poor excuses. There is an excellent PowerShell unit test framework that can be used. Also, the dependency problem can be reduced by introducing proper abstraction. The major goal was to finish the project as soon as possible. I know that unit tests are possible in Powershell but it would be too time consuming for me during the initial stage. It is on my private "improvements list" related with this project. &gt;Don't brush off critique by saying "it was an after hours project". &gt;Instead accept criticism and improve your software. Improve yourself. I don't. I just wanted to put some information about why the project is not as perfect as it could.
Yeah I misunderstood when mentioned that it was "based on" EF. I took that as still requiring EF, not conceptually based on it.
I will improve the summary. Thanks.
Thanks for the in-depth response but that isn't actually what I'm looking for. I know we can already wrap everything in lambdas/functions to achieve similar behavior to what I described (even without using functional programming terminology) but, frankly, I prefer an object oriented approach that, much like async or the ?. operator, abstract away the problem without introducing extra abstractions while at the same time keeping the code clean, easy to understand, and efficient.
The compiler does optimize lambdas, so OnSomething += () =&gt; HandleSomething(); Would be cached, basically the same way as in your code. But in-line delegates and method groups (like you are using) are not. Not sure why they didn't add that, but probably something with compatibility. 
Use highly restful services. If you aren't familiar, Google richardsons maturity model and create level 3 restful resources where the client app can navigate the api itself 
Excellent :)
Without knowing your models and their relationships this is a tough question. I'd guess to achieve what you're "wishing for" in the end. You could do something like... public class AssemblyLine { public IJobRepository Jobs { get; } public IEmployeeRepository Employees { get; } public AssemblyLine(IJobRepository jobRepository, IEmployeeRepository employeeRepository) { // argument validation Jobs = jobRepository; Employees = employeeRepository; } } public class Employee : BaseEntity { public string LastName { get; set; } // rest of properties } public class Job : BaseEntity { public string Name { get; set; } // rest of properties } public class BaseEntity : IEntity { public int Id { get; set; } } public interface IEntity { int Id { get; set; } } public interface IJobRepository : IRepository&lt;Job&gt; { IEnumerable&lt;Job&gt; FindByName(string name); } public interface IEmployeeRepository : IRepository&lt;Employee&gt; { IEnumerable&lt;Employee&gt; FindByLastName(string lastName); } public interface IRepository&lt;TEntity&gt; where TEntity : IEntity { TEntity Get(int id); TEntity Add(TEntity entity); void Update(TEntity entity); void Remove(int id); } You'd then implement an IJobRepository and IEmployeeRepository and probably eventually IAssemblyLineRepository using your connection to your manufacturing api. This uses generics to make it easier to scale / expand out. But you could narrow down the code by removing the generics, but would make it more repetitive in some areas (repositories). Just an example, but without knowing your model relationships and details, hard to finalize.
I'll look into doing that, thank you.
your link has no code...
Sorry its displayed now 
To your topic, maybe this will help how you think about async, but I think async methods boil down to the following: Take an async method, split that method on the line after every await. public async Task&lt;string&gt; DoSomethingAsync() { var value = await DoThingOneAsync(); //End Chunk One var otherValue = Convert(value); var yetAnotherValue = await DoThingTwoAsync(otherValue); //End Chunk Two var finalResult = ConvertBack(yetAnotherValue); return finalResult; //End Chunk Three } Now think of the compiler as taking all of those chunks and turning them into a Task.ContinueWith(...) chain. Task.Run(ChunkOne).ContinueWith(ChunkTwo).ContinueWith(ChunkThree); The catch is that Task.Run() would execute on the TaskPool, but instead, the chunks and continuations happen on the calling thread. That, to me, is the core of what's going on. And since all of this is compiler trickery, it does a lot of really cool stuff for you, like exception handling and looping all just work in a way that make sense, and it wraps your return values in a Task&lt;T&gt;. I'm interested to hear how others think of it, or if my above is misleading or incorrect (conceptually). I've never seen what I consider a really good conceptual diagram of what's happening. Anyway, hope this helps.
I'd make the DatabaseManager more abstract to be honest as your application depends too much on implementations (SQLLite). What if you were going to change the way you'll store your information of your application? Create an interface around it with the methods you need in your application. Perhaps you'll never change it, but it's a good practice to depend on abstractations instead of implementations anyway. I'd also make it more generic (making use of the Builder design pattern for example). You'll probably create more tables later on and this way you'll encounter redundancy code. Creating a table is the same process anyway with different parameters. Please make use of SQLParameters though instead of string concatinations to be safe for SQL injections when creating SQL code. Not something to worry about when you're writing a desktop application with no networking abilities, but then again, good practices yet again. Creating a seperate folder for ViewModels is something I did myself, but it actually gets annoying to find the related ViewModel of a View. That's why I store ViewModels with my Views in the same folder nowadays. Any reason why your properties are private set and why you are having parameters in your constructor at your models? 
if you have 100 heroes to input, you will want a config file that you can edit by hand. Structure it in a way which requires as little duplication as possible, and which makes it easy to read and maintain. Here is an attempt to do this using json. you will have to uncomment the MakeConfig(); line on the first run, as well as install a dependency through nuget. https://www.nuget.org/packages/Jil/ https://clbin.com/Cu9ug 
Here you're setting dblHoursWorked = dblNormalHours which is declared and initialized 0: if (dblHoursWorked &lt;= 40) { dblHoursWorked = dblNormalHours; } Test: How Many hours have you worked? 32 What is your pay rate? 15 Enter Number for (1)Married, (2)Single, (3)Divorced, (4)Widowed 1 Your Gross Pay is: 0 Your Net Pay is : 0 Your Overtime Pay is: 0 You Taxes Deducted is: 0 
Thanks 
Yeah, you're absolutely right. To access the actual instance of the mocked object, you need to call mock's Object property. 
If someone could answer this with actual example GitHub projects that would be amazing because we have the same problem at our job except the god object is just a giant dependency injected kernel that holds everything. 
Wait, actual tuples not that crappy generic implementation? SCORE! I've been waiting for this since 1.0. And record types and switching on values therein looks amazingly powerful. This may be the best update since lambdas.
I dunno, I can can see this being horribly abused. I always thought it was better to put whatever is supposed to go in the various switch cases in a override defined as an abstract/virtual method in the base class. I have seen people switch on types like this before and its always a cluster every time. The problem is that is never just done in one place... one ends up with lots of switch blocks with the same cases but different code in those cases. And then what happens when you want to add a new class? Guess what, you've got to go add a case to each of those switches. It quickly becomes a maintenance nightmare.
minor critiques: UpdateContext should follow convention and be UpdateContextAsync avoid using Thread.Sleep, it's never the answer. there is Task.Delay, also in this case you could group up a set of X tasks, then do a Task.WhenAll and await that, then process the next set. if you're trying to go for parallelized tasking here then use the parallels library. With that you can set the max degree of paralellism, or leave it defaulted ( which would use all of the available cores ). 
This is correct. A few things require support in the framework, e.g. async&amp;await requires a type that has a public method `GetAwaiter` (which `Task` provides), but otherwise it's purely syntactical sugar that can be used with any runtime.
Explain how this isn't "interfaces without type safety"? This seems like a good way you get to be a little lazy and in the process destroy all the type safety you get with a static language, which is exactly why I don't care for dynamic languages.
Yeah, anything that is async will have 'await' in it somewhere. Task.Run is just a different way of doing effectively the same thing I think (I have never used Task.Run myself). 
I just tried it, and I have mixed feelings. First off, it won't show most of my .xaml files - they should just as regular files, which simply make it completely pointless. By looking at some tutorials, it does seem that it's a good tool for UI design. For programmers, apparently not so much. Best, John
Use a FileSystemWatcher or a timer. 
&gt; It might be feasible to do a GC before entering such a critical stage. .NET 4.6 has [GC.TryStartNoGCRegion](https://msdn.microsoft.com/en-us/library/system.gc.trystartnogcregion.aspx) to avoid GC in critical sections.
I'd suggest using [File.ReadAllLines()](http://tinyurl.com/goqxw9a) to read the lines and a [Timer](http://tinyurl.com/jdelc7v) to switch the text every 10th second. Here's an example: public partial class Form1 : Form { Timer _timer; int _currentLine; string[] _lines; public Form1() { InitializeComponent(); _lines = File.ReadAllLines("textfile.txt"); _timer = new Timer(); _timer.Interval = 10000; _timer.Tick += Tick; _timer.Start(); _currentLine = 0; label1.Text = _lines[_currentLine]; } private void Tick(object sender, EventArgs e) { _currentLine = (_currentLine + 1) % _lines.Length; label1.Text = _lines[_currentLine]; } } This code will throw an exception if the file couldn't be read or if the file is empty so you might want to use a try/catch clause around the part reading from the file and probably an if statement to check if _lines.Length is greater than 0. If you put a try/catch clause around the part reading from the file, _lines will be null if reading fails so you might want to check for that as well.
The main advantage I think this has over "Interfaces without type safety" is that you don't need to set up a custom factory/class definition for your object. You could call this lazyness. Given, the long-term advantages in having your classes (and especially factories) firmly defined probably outweigh that particular ease of composition. Also, /u/vintharas, why is this in the C# subreddit...? This is entirely concerned with Javascript. You could have stated that you wanted to convert your Fortran friends to Javacript, too, and it would have been just as applicable.
Hi hi! :) The article is part of a series of JavaScript for C# developers. The premise is to help C# developers (those that work on web development which I reckon are many) write more JavaScript-y JavaScript, embracing the dynamic nature of JavaScript and discovering new alternative techniques to classical OOP. 
You just need to extract the file path from the resource then execute it. using System.IO; using System.Reflection; ... var ApplicationPath = Path.GetDirectoryName(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName); var FilePath = Path.Combine(ApplicationPath, "Resources"); var FileAbsPath = Path.Combine(FilePath, "yourscript.vbs"); Conceptually it's the same as [this...](http://stackoverflow.com/questions/5519328/executing-batch-file-in-c-sharp/5519517#5519517) Use the path discovered above. If it's a console script execute it using c:\windows\system32\cscript.exe "yourscript.vbs" if it's not just run it and it will be handled by Windows scripting host.
Hi /u/FizixMan! :) This is the third part of a series of blog posts regarding class-free OOP as an alternative to classical inheritance. The pros/cons and comparison to C# appears in the first article of the series http://www.barbarianmeetscoding.com/blog/2015/12/28/black-tower-summoning-object-composition-with-mixins/ and reads as follows: &gt; You may be thinking… Well, I can do this with C# and classical inheritance any day. And indeed you can, but some interesting ideas about the object composition approach are that: &gt; &gt; We don’t need any upfront design effort to make our application extensible. In C# you need to define the extensibility points of a system because you need to use the right artifacts like interfaces, composition over inheritance, design patterns like strategy, etc. In JavaScript we don’t need to over-architect our solution, or carefully design our application for extensibility purposes. You get a new feature, you define a new behavior, compose it with your existing objects and start using it. &gt; &gt; Object composition happens at runtime. You have your program running, your objects doing whatever objects do and all of the sudden BOOM! Object composability and your objects get new features and can do new interesting things. New things like changing from a text representation to a 2D representation or a 3D representation and who knows what more. &gt; &gt;It doesn’t need to affect the original objects at all. You can keep your objects as they are, clone them and apply the composition on the clones. This can enable interesting approaches like having different bounded contexts (like in DDD2) with slightly diverse domain models adapted to a particular context needs and goals. &gt; &gt; You can compose an object with many other objects representing different behaviors (like a multiple inheritance of sorts). This tends to be harder to do in classical inheritance based languages like C# where you are limited to a single base class or to a flavor of composition that requires a lot of boilerplate code, forward planning and design. &gt; &gt; &gt; With object composition we achieve this true plug and play solution where you can combine domain objects with behaviors in very interesting and flexible ways. By the way, this type of object composition is another type of prototypical inheritance that we called concatenative inheritance earlier in this part of the series. The argument is the same irrespective of the technique. That's why I didn't want to repeat the same argument again. **I have deleted the post.** So it shouldn't be a problem any more. I just was trying to share something that I thought was interesting to C# developers coming to JavaScript. Cheers!
I've been working on an app with an "anemic domain model" (just learned about this) and I've got a pretty similar structure as yours for an MVC web app I'm working on. The only comment that I have is regarding one repository per table. I started out that way at first, but then it just became repetitive where you would have, Customer (POCO/anemic class), CustomerRepository (responsible for CRUD from database) inherits from IGenericRepository, CustomerService (business logic/validation/manipulation,etc.) takes CustomerRepository via constructor. So instead, I just went Customer -&gt; CustomerService (takes IGenericRepository via constructor). There have been some compromises where I would have to add specific class related methods to the GenericRepository implementation, but I'm okay with that for now. I'm in the same mindset where, now that I've read that anemic domain models are an "anti-pattern" and "not real OOP" (according to Martin Fowler), I'm wondering if I should move some of my validation/manipulation methods from *Service into the classes themselves. EDIT: attributed the negative quotes to Martin Fowler since perhaps I was getting downvotes because people think those are my opinions
Well designed business software systems are almost purely functional programming. OOP has almost no purpose at this level. It's useful for libraries and frameworks that you use but you really shouldn't be using OOP in your system except for testability (mocks / overriding virtual methods) You absolutely want your Models / Contracts / Data Contracts to be purely records. They should have no logic at all in them. A constructor can have minimal object setup logic anything more should be in Create() factory methods.
I stopped reading at "Don't proxy EF" just so I could upvote
It's really hard to say. I've been poking at WPF in some form or another since its release, but I've been a WinForms developer for 13 years and counting. I worked on a team developing controls for both platforms, and then a major WPF/Silverlight application from about 2009-2013. Then, for a myriad of reasons, I jumped ship to a mobile shop. We ended up in Xamarin.Forms, which is very clearly inspired by WPF/Silverlight, but frustratingly short of parity. WPF is quite difficult to learn, there are many things you have to know for it to all fit together. And others are right: there are parts that just seem non-orthogonal and buggy. I think some of this is similar to how WinForms stopped getting much love once WPF released. MS's attention right now seems to be on evangelizing the Windows Store and also porting everything they sell to Mac OS/iOS/Android. That's part of what motivated me to jump off the Windows platform as my main career: I want MS to decide what their plan is before I settle down again. If you've got a good WinForms codebase, and it's truly extensible in a way that keeps you on-budget and on-schedule, I don't think you should leap into the deep end of WPF. But I think you should start reading books and, for smaller, low-risk projects, start using WPF. It will be slower, there will be mistakes, but you'll build some crucial experience and have some idea of how hard it'll be to consider larger projects with WPF. More importantly, you'll make your mistakes in places where the stakes are lower. I think you risk shoehorning yourself if you *don't* learn some basic WPF concepts. One sad fact is a lot of the presentation tricks that are why WPF feels so much nicer don't matter to customers. If you've ever tried working with transparency in WinForms you'll know what I'm talking about. But most customers are perfectly fine with interfaces that look exactly like what was delivered by VB6 in the 90s. Don't be fooled into thinking that because WPF can be made gorgeous by a designer that it can't also use developer art. You don't have to hire a team to polish your UI unless you're trying to make glitz a selling point. I'm cautious here because my personal belief is the nature of "Windows Desktop" as a product is about to change radically, and that the only framework MS will support in the aftermath is something that looks like WPF. I felt so strongly I left a stable job to get onto a different platform. Apply that conspiracy theory and bias to your evaluation of my opinion.
I have VERY mixed feelings on the generic repository. I've been using my implementation of it for several goods years in several projects and have a good perspective on pros vs. cons. Obviously this can go either way depending on what one finds more important. Pros * 0 Effort to add a repository. If I'm working in PersonManager and I need to query for Person I just take on a IGenericRepository&lt;Person&gt; dependency. No need to implement anything, or write any code. * 99% of my queries are covered by what the generic repository is able to do out of the box. The methods in my repository take lambdas, basically simulating a "dynamic" where clause. personRepo.Get(p =&gt; p.FirstName == "Joe"); etc. Cons * Difficult to stub out if you're unit testing. It's far easier to do with a basic repository and a simple interface that doesn't include lambda parameters. * Believe it or not you "forget" how to write Linq queries because of how much you get for "free" with the repository. Ultimately for me personally it comes down to this, the pros is that it's extremely efficient with time to market. The downside is that it a "crutch".
my generic repository is just a generic of type T where T is a class (entity). The constructor takes a DbContext. Underlying as you said it just works on object sets of T. the predicate parameters to method like Get() would be of Expression&lt;Func&lt;T, bool&gt;&gt;. My entire implementation is part of my .Util which is not tied to any project, in other words it's reusable. To me this makes data access insanely effortless, but clearly brings about baggage.
The learning curve of WPF and MVVM is steep as others have noted. IMHO it's a never-ending struggle between code quality and time to market. WPF/MVVM is cleaner, more testable if that's your thing. It makes some things that were previously very difficult to do stupid easy. On the flip side sometimes you'll run into things that were stupid easy to do before that will take you a day or more to figure out how to do in the new MVVM way. Then after a while you realize that there is a spectrum of MVVM, everything from super strict to lose following. You find to which lengths you're willing to go and you sort of establish "your way" of doing things. Ultimately while I like the concept of MVVM, bindings, and markup. I just don't like WPF, while I still very much use it today.
The author of that book you linked to has been drinking the Eric Elliott kool-aid. Object composition isn't what he thinks it is. Classical inheritance isn't what he thinks it is. &gt; You can compose an object with many other objects representing different behaviors (like a multiple inheritance of sorts). It's not *like* multiple inheritance. It *is* multiple inheritance. Which is why calling it object composition is wrong. &gt; This tends to be harder to do in classical inheritance based languages like C# where you are limited to a single base class Multiple inheritance is harder to do in a single inheritance language. Obviously. But whether a language is classical or not has absolutely nothing to do with whether it supports multiple inheritance or not. C++ and Python are classical and they support multiple inheritance. Meanwhile, JavaScript's prototype chain is (obviously) prototypal, yet supports only single inheritance. It's a mistake to blame classical inheritance for all your single inheritance woes. It's a mistake perpetuated largely by Eric Elliott and copied by the book you linked to. And it's a mistake we shouldn't help spread. EDIT: Looking at the usernames, I actually think you might be the author, so let me try to explain more clearly by converting your stamp code to Python. # wielding something class Wieldable: def wield(self): print `You wield $description`.substitute(description=self.description) # throwing something class Throwable: def throw(self, target): print `You throw the $description towards the $target`.substitute(description=self.description, target=target) # or describing something class Describable: def toString(self): return self.description class Weapon(Describable, Wieldable, Throwable): # ... Notice that we did the same thing using classes and multiple inheritance. Classes were never the problem you thought they were. And the solution that you thought was object composition is actually multiple inheritance. None of this is some new, inventive way to do OOP. It's very old and ordinary OOP. Nor is it "embracing JavaScript". At best we're acknowledging JavaScript's limitations, such as that it's prototype chain supports only single inheritance, and then finding workarounds. A lot of these mistakes sound like they're regurgitated straight from Eric Elliott. All I can do is advise you to stop reading his stuff. Most of what he says is wrong.
Hi /u/MoTTs_ ! Thank you for your comment! :) I come from a C# background and all these things were indeed new to me. I have been accustomed to working with classes, interfaces, and classical single inheritance (to which I refer through the article simply as classical inheritance). Techniques like mixins, traits, subclass factories and stamps are particularly interesting to me because they let me do things that would require a lot of boilerplate code or duplication in C#. I think I call it object composition because I have two objects, merge them, and I get a new object (like with Object.assign). When I think about multiple inheritance I cannot help but think of classes which don't exist as such in JavaScript (they're syntactic sugar). In regards to embracing JavaScript I am referring to using prototypical inheritance, mixins (object augmentation, dynamic binding) and closures. Thank you! :) Kind Regards Jaime 
&gt; The entire purpose of record types is that they're, essentially, a shorthand method for defining named tuples. Except the major advantage of tuples is structural typing and records are not structurally typed. 
&gt; classical single inheritance (to which I refer through the article simply as classical inheritance) That usage is unfortunate, because "single" is actually the most important detail. Non-classical *single* inheritance still exhibits the same taxonomy problem you tried to solve with traits, mixins and stamps. Whereas classical *multiple* inheritance (such as the Python code above) does not exhibit that problem. Classical or not isn't the important detail. *Single* or not is the crucial factor. &gt; I think I call it object composition because I have two objects, merge them, and I get a new object (like with Object.assign). The reason this is problematic is because "object composition" is also a technical term with a specialized definition from the GoF Design Patterns book. And rules such as "favor composition" rely on everyone's mutual understanding of that specific definition of composition. So when we use Object.assign to achieve multiple inheritance but label it "composition", then people naturally end up thinking they're following the "favor composition" rule when in fact they're actually just doing inheritance.
Yum!
&gt; Being database agnostic is a myth. Attempting to be forces you to use the lowest common denominator preventing you from leveraging all of the strengths your database offers It being a myth is myth; what are you on about? Not sure what this has to do with a repository or your app code at all, your app code can absolutely be database agnostic; I've worked on several of them. In fact, my most recent project has the same domain code running on both a server and a window universal app, using sql server for one and sqlite for the other. I'm sure with enough thought, I could refactor the application layer to work for both as well... Your database's strengths are in the database; your app need not know of it at all. &gt; You're using EF, that's already a generic repository. It makes no sense to wrap a generic repository that's taken 10,000s of man hours to build with something you come up with in a matter of minutes. It will never be remotely as flexible and will not help anything. If you're creating the repo implementation, then I agree; that is stupid. However, wrapping EF inside of an implementation of an interface that you defined is *not* stupid. Doing so wouldn't be about creating a generic repository to make EF work. Doing so will allow you to remove EF at some point while maintaining the repository structure, THAT is why we do it. THAT is how we maintain agnosticism with EF in our data layer. In this sense, the fact that EF is a generic repository is irrelevant to the overall system architecture. And with that said, you can still extend your generic repository interface... nothing says you can't do that. The application layer or even the data layer could implement it and the application layer would inject it to the domain layer; it's fine. UserRepository : IUserRepository, IGenericRepository&lt;User&gt; Your domain is the one declaring the IUserRepository, so it remains agnostic of the data layer. No person just goes and replaces their entire database and doesn't need to make much larger changes than a IOC registration change. You're not wrong. However, sometimes "replacing" that database doesn't necessarily mean that you're trashing the old one and using a new one. Sometimes it just means that you may need it to work with something other than the original implementation's database. For example, if I wanted to reuse my domain layer with a phone app. The project I'm working on right now does exactly this, and very smoothly at that. &gt; Don't proxy EF. Provide business value using EF at the boundary of your RA/DA/repo. You want methods like GetActiveCustomers() SearchCustomers(). In general you should have less than 12 of these methods in a business area. 5-7 tends to be the sweet spot. Finding that you need tons of methods shows you have a bad database design (probably over normalized, 3NF and my god 5NF are almost always wrong for online transaction processing OLTP business applications) The first two sentences (and the last) made sense, but then the whole thing fell apart by a bunch of arbitrary nonesense. Again, based on what? If you can have a perfect database with too many methods if your app code is poorly designed too. This statement is useless. If you find yourself with too many methods, then you may should have implemented it as a service, not a repo. What is this "business area" you speak of? Do you mean the business layer? If so, this comment is asinine. The business layer is not the data layer; you will have as many methods in the business layer as you need to support the business. &gt; DDD is good for discussions with the business and naming your stuff in business terms. It's awful to build software with when you're coupling services inside of your models. It is clear that you don't understand DDD because you wouldn't be *couplling* services in your models -- although, I'm not not even quite sure what you're trying to say here. If your models are coded against an interface, that isn't even a problem, let alone a bad thing. DDD isn't just about discussion; it's about modeling the business domain. The way in which you do so is done in a way that can be discussed in the ubiquitous *language*, not the code itself. If naming your object after a business concept in the real world is enough to break maintainability, you may wanna look closer at the developers because that's not DDD doing that to you.
Put all of your charts in an array first. Then loop through the array. 
Thanks for the idea! Tbh I don't know how to do that properly but I'll try.
I guarantee you the project would have gone way better for treating each of those differently.
If you're doing a WinForm app you can drag a Timer control on to the form and it will then double-click on it to create the event. To do it without the control: // Create module level Timer Timer _statusTimer = new Timer() { Interval = 1000 }; The interval is in milliseconds, so 1000 milliseconds is 1 second. For a minute you'd want 60000 as the interval. In the constructor assign the event Handler (Tick is the poorly named event fired when the timer expires) _myTimer.Tick += MyTimer_OnTick; Create timer event handler: private void MyTimer_OnTick(object sender, EventArgs e) { // Disable Timer _myTimer.Enabled = false; // Do Stuff // Re-Enable Timer _myTimer.Enabled = true; } You can combine with doing the updates on a separate thread but that's a longer topic. Google Async / Await for examples. 
Yeah i forgot to meantion that it's not WinForm but it's DLL. Well thought about it, but also crossed my mind create Thread and if it will be too fast just put in there `Thread.Sleep();` or something like that. Anyway still something tells me there is some better solution I Think i'm gonna go with Timer i found there a few Timers like : 1.System.Windows.Forms.Timer 2.System.Windows.Threading.DispatcherTimer 3.System.Threading.Timer So 3. it's the best from what i read about all of them and difference between them for my case
The highest value doesn't change, so if they enter min 10 and high 100, numbers must remain within that range. What I tried to do was remove the amount of cells from the highest value, and then add it 1 at a time. So in a 7x7 matrix with numbers between 1-100, the highest value would be 100 - 49 at first and then work its way up to 100 by the 49th cell. In my mind it should work, I don't know what I did wrong ):
Not sure if this a i right solution, but i guess i would do it this way. Here picture how it looks like [Matrix](http://s28.postimg.org/nz34kxoi5/matrix.jpg)) There is also solution for possible same generated numbers. AHhh You already posted your solution Still believe this is a better solution then yours, because this is gonna work anytime with any min max numbers(Of course it won't work if you choose 2 rows and 2 columns and min 1 and max 2, because there is check for the same generated numbers and it will probably throw an exception). I didn't check your solution exactly, but when i see code like + j + 2 it usually works, but in time you change something for example min, max you realize it's buggy and it works only on that exact case you trying to make it. And most likely when you open this project after while you won't remember what's going on in there with all these variables + j + 2 and so on.I'm not saying it's not working or it's wrong it's just my opinion and experience. Code : int r = 5; int c = 5; int min = 100; int max = 200; System.Random random = new System.Random(); double[,] array = new double[r, c]; List&lt;int&gt; randomNumbers = new List&lt;int&gt;(); for (int i = 0; i &lt; ((r*c) + 1); i++) { int number; do number = random.Next(min, max); while (randomNumbers.Contains(number)); randomNumbers.Add(number); } randomNumbers.Sort(); int count = -1; for (int i = 0; i &lt; r; ++i) { for (int j = 0; j &lt; c; ++j) { count += 1; array[i, j] = randomNumbers[count]; } } for (int i = 0; i &lt; array.GetLength(0); i++) { for (int j = 0; j &lt; array.GetLength(1); j++) { Console.Write(string.Format("{0} ", array[i, j])); } Console.Write(Environment.NewLine); }
Get 5 different numbers and sort them. 
I do most of my coding in JavaScript these days and it has this - it's great.
I wrote an extension to handle things like this: public static IDictionary&lt;int, T&gt; AsIndexed&lt;T&gt;( this IEnumerable&lt;T&gt; collection ) { return collection .Select( (n,index) =&gt; new { index, n } ) .ToDictionary( x =&gt; x.index, x =&gt; x.n ); }
Far too magical and ad-hoc for my taste. If C# had more useful tuples this wouldn't be an issue, so let's wait for that hopefully in C# 7 instead. Edit: Thanks for the downvotes for expression a qualified opinion: - Magical and ad-hoc: You write "var i, x" and, magically, i is now an index since you're inside a foreach? And otherwise the syntax means something different or is illegal. - Tuples with unpacking and similar would solve the problem.
How would you iterate through something like that though? I'd imagine you'd have to do something like this: foreach (var pair in items.AsIndexed()) { int index = pair.Key; var item = pair.Value; } Which seems a bit verbose to me. Still, it looks like the best way to handle things right now.
Looks like Schlemiel the painter waiting to happen
Thanks, I don't know what that means.. However I tried 2 solutions: static int[,] SortUpMatrix(int[,] a) { int c = 0; int[,] b = new int[a.GetLength(0), a.GetLength(1)]; for (int i = 0; i &lt; a.GetLength(0); i++) { for (int j = 0; j &lt; a.GetLength(1); j++) { b[i, j] = GetMin(a); c = 0; for (int x = 0; x &lt; a.GetLength(0) &amp;&amp; c == 0; x++) { for (int y = 0; y &lt; a.GetLength(1); y++) { if (b[i, j] == a[x, y]) { a[x, y] = GetMax(a) + 1; c = 1; break; } } } } } return b; } static void SortUpMatrix(int[,] a) { int min = a[0, 0], z = 0, y = 0; for (int i = 0; i &lt; a.GetLength(0); i++) { for (int j = 0; j &lt; a.GetLength(1); j++) { min = a[i, j]; for (int x = 0; x &lt; a.GetLength(0); x++) { for (int w = 0; w &lt; a.GetLength(1); w++) { if (x &gt;= i &amp;&amp; w &gt;= j) { if (a[i, j] &gt; a[w, x]) { min = a[w, x]; z = w; y = x; } } } } a[z, y] = a[i, j]; a[i, j] = min; } } }
It needs to be async all the way down....
That's alot of overhead to just have a foreach loop instead of for i loop.
 &gt;Thanks in advance. &gt;I cant use lists.( assignment) &gt;Edit: Why am I getting downvoted ;_; Because you're asking us to do your homework for you. How about showing us what you've tried, what doesn't work about it, and maybe some of us will offer guidance. We're not here to do your homework for you. 
F#.NET is basically C#.NET *experimental.*
R# already has extract class for anonymous object and can pull multiple usages out at once. It also is smart enough to see if you're using an anonymous object and you declare it slightly different that they're not exactly equivalent in shape anymore it will offer to align the types for you. With record types it would just be expanding this outside the scope of a single method.
Why wouldn't you just use ToArray()? You'd have the same indexes, and should have less overhead.
 { int index = 0; foreach (var x in enumerable) { i++; // do stuff } } or var iter = enumerable.GetEnumerator(); for (var i = 0; iter.MoveNext(); i++) { var current = iter.Current; Console.WriteLine("[{0}]: {1}", i, current); } or foreach (var tuple in enumerable.Select((x, i) =&gt; new { value=x, index = i})) { // Et voíla? } I'm having some trouble seeing what the point of this feature is. Is there a concrete example demonstrating why this is desirable?
 &gt; You're just thrown into it and they just expect you to get the hand of it after a while. Having not done winforms since 2008 last year i built a small WPF app. Took me a few minutes to pick up everything and it looked great. The only thing that looks like it will take real effort to do right is handling the resizing sticky points. Which is just fundamentally a hard problem. I always saw the solution in WinForms was just don't let people resize your app -_-
I'd rather use `ToList` than `ToArray` (efficiency). But the problem is that I'd have to return a collection of either an anonymous object which would be hard to pick apart afterwards, or a Tuple which I hate (in its current form), or a KeyValuePair which makes it *basically* a dictionary anyway.
I guess my question is how does it end? If every async method must call another method that's async, then at some point there must be something called that does not call another method. Like I create an async method that calls an async method that calls an async method that calls an async method and on and on... How does the chain end?
&gt; But the problem is that I'd have to return a collection of either an anonymous object which would be hard to pick apart afterwards, or a Tuple which I hate (in its current form), or a KeyValuePair which makes it basically a dictionary anyway. Are you aware that you can create your own classes and structs?
Here's a solution that works now already: public struct Indexed&lt;T&gt; { public Indexed(int index, T value) { if (index &lt; 0) throw new ArgumentException("Index must be greater or equal 0.", nameof(index)); _index = index; _value = value; } public int Index { get { return _index ?? -1; } } public T Value { get { return _value; } } private readonly int? _index; private readonly T _value; } public static class IndexedEnumerableExtensions { public static IEnumerable&lt;Indexed&lt;T&gt;&gt; Indexed&lt;T&gt;(this IEnumerable&lt;T&gt; source) { if (source == null) throw new ArgumentNullException(nameof(source)); return IndexedInternal(source); } private static IEnumerable&lt;Indexed&lt;T&gt;&gt; IndexedInternal&lt;T&gt;(this IEnumerable&lt;T&gt; source) { var enumerator = source.GetEnumerator(); for (var i = 0; enumerator.MoveNext(); ++i) { yield return new Indexed&lt;T&gt;(i, enumerator.Current); } } } This completely avoids unnecessary allocations. ^(License: WTFPL – Do What the Fuck You Want to Public License) --- For the C# beginners: **Why make `_index` nullable and return `-1` in the getter?** `Indexed&lt;T&gt;` is a struct, which means it will always have a default constructor that leaves all fields uninitialized. To be able to distinguish between a valid `Indexed&lt;T&gt;` value and an invalid value I left the `_index` field nullable. The default value will be `null`, and in the getter I check for `null` and return `-1` as a fallback using the coalesce operator (`??`). So when the `Index` is `-1`, it means this is the default instance. The non-default constructor prevents passing an invalid indexed, and all values are readonly so they can't be filled with invalid values either (unless using reflection). **Why make two methods, `Indexed&lt;T&gt;(..)` and `IndexedInternal&lt;T&gt;(..)`?** The `IndexedInternal&lt;T&gt;(..)` method is using `yield return`, which causes this method to create an enumerator. This also means the method will fall under the C# laws of **deferred execution**, this means the method won't be actually executed until the enumeration is iterated. However, when we try to index a `null` reference we **expect** a method to throw an exception when calling the method, and not later when enumerating. By splitting up the code into a regular **not yielding** method and a yielding method we avoid this problem. The `Indexed&lt;T&gt;(..)` method will throw an exception right away when `null` is passed. The other method is internal and invalid arguments can't happen (again, unless you're using nasty reflection, but then it's really your own fault). This is also commonly used within the .NET framework and is best practice.
Why do what the compiler can do for free? 
&gt; License: MIT or whatever. Use wherever for whatever you want. Have you heard of the [Do What the Fuck You Want to Public License](http://www.wtfpl.net/)?
Thanks, that matches. Adjusted my comment.
`Array.prototype.forEach` is a language construct. It's defined in ECMAScript. There is just no special syntax for it, which you probably mean.
Yep, that's what I meant. Sorry about that.
Dunno why you're bothering with a new and pointless struct. public void Index&lt;TElement&gt;(this IEnumerable&lt;TElement&gt; source, Action&lt;TElement, int&gt; action) { var enumerator = source.GetEnumerator(); for (var i = 0; enumerator.MoveNext(), i++) { action(enumerator.Current, i); } }
If you code in a more functional style, lambdas are prettier
What don't you like about current Tuples?
Language design issue: If they introduce tuple unpacking, e.g. Tuple&lt;string, int&gt; Find(...) { ... }; var x, index = Find(array, 10); Then there is ambiguity here: Tuple&lt;string, int&gt;[] FindMany(...) { ... }; foreach (var x, index = FindMany(array, 10)) { ... } As in, whether you're unpacking each tuple or returning tuples and their indices.
I actually prefer to subclass DefaultControllerFactory instead of implementing IControllerFactory. That way you only need to override GetControllerInstance() and compare the controller type parameter to your controllers.
Solution 1 1. Select first and last element values randomly in some smaller range. 2. Set elements between first and last evenly by average number of first and last divided by count 3. Shift each element between first and last by random value in range +- interval half. Solution 2 1. Select first and last element values randomly in some smaller range. 2. Select center element as random in some range around average value of first and last Repeat 2 for left and right part where current center element become last of first element. You can make it without recursion.
The syntax is incredibly verbose, especially if you use F# at any point.
It would still be a problem even with first-class tuples unless `foreach` was then adapted to pull tuples out in a manner similar to the proposal.
Overall it looks good, but I wonder how it will perform once we start factoring in optimizations such as inlining and bounds check removal. 
In rather than =, but still confusing nonetheless, especially if you're unpacking a type of three elements.
What's `Item1`? What's `Item2`? What's `Item3`? You always have to look it up at the source. It's a mess.
Because returning an enumeration with the struct is the **better** and cleaner style over passing an action, especially when you tend to write in a functional style. - With the struct you get **clear names** `Index` and `Value`, instead of nameless arguments in a lambda. - You can can continue using the arguments in the next line, instead of getting deeper nesting. - You get **deferred execution** with returning an enumeration instead of passing a lambda. - You can still use the other LINQ functions like `.Take()` or `.Skip()`. Or also `.GroupBy()` if you just want every item with an odd index.
I honestly don't see how you consider using the lambda as functional style and prettier. - You can't use the other functional style LINQ operations anymore to further manipulate the enumeration. - You get deeper nesting by passing an argument. Consider getting every element with an odd index and adding it to some existing elements (just random example). His: myEnumeration .Indexed((index, value) =&gt; { if (index % 2 != 0) { myList.Add(value); } }); vs a more functional style: myEnumeration .Where(x =&gt; x.Index % 2 != 0) .Select(x =&gt; x.Value) .ForEach(myList.Add(x);
&gt; I would go fancy with Asp.Net 5 Core 1.0 server on a PI Then you have to use the Pi2 and Windows IoT, as there is currently no Linux ARM support.
How about a mashup of both for and foreach: foreachindex(var item in collection, int i = 0, i++) { Console.WriteLine("item={0} index={1}", item, i); } This gives you the freedom to change the behavior of the index if you wanted to for some reason: foreachindex(var record in records, long pos = 0, pos += 20) { Console.WriteLine("record={0} byte position={1}", record , pos); } In fact, you wouldn't even need "foreachindex", just overload the foreach function to accept the additional arguments: foreach(var target in targets, double dist = 1000, dist -= 50.55 ) { Console.WriteLine("target={0} distance={1} feet", target, dist); }
formatted: public class Program { static Input Port IR_REC=newInputPort(Pins.GPIO_PIN_A_6, false, ResistorModes.Disabled); static OutputPort IR_TX = new OutputPort(Pins.GPIO_PIN_D_11, false); public static void Main() { while (true) { //Transmission v1 IR_TX.Write(IR_REC.Read()); //Transmission v2 IR_TX.Write(!IR_REC.Read()); } } }
can you give an example of when you have found this useful how often do you care about the arbitrary order in which you enumerate a sequence
- This is **different** from my example, as your index starts with the filtered list, mine starts with the whole list. - You still don't get deferred execution. - And you named the arguments `elem` and `index`, but there is no indication of what value is what when calling this method. When calling this method on an `int` enumeration intellisense will just show you `Action&lt;int, int&gt; action`. Great help, right?
Time to learn it? ;-)
I appreciate the reply. 1) This was my biggest part about my question, I am not supper familiar with this part when it comes to programming, I have seen terms around while studying other things, but I am not knowledgeable in their strengths and weaknesses. I will look into REST. 2) Again, not something I am really familiar with, but worse case scenario I would just program some logic in the client to check every x mintues, or have the server send out an email or SMS for notifications. 3) I was going to start out with a console app testing the inputs/outputs of the Raspberry Pi since that is my main focus with it for learning. And since I am not familiar with ASP.Net (other than writing a very simple one page that read/wrote to a database), I am not sure how I am going to have it interact with the GPIO's on the Pi. I have seen a cgi page do something similar to what I will be writing for an access control panel, I guess I just assumed ASP.net would be able to do the same types of things and access most the same resources as a desktop application (granted it is given permissions).
What he said doesn't make sense. The method you want to do asynchronous work (e.g. download a file) should return a Task&lt;T&gt;. When you await a method returning a Task, the method will wait for the task to finish, and meanwhile let the rest of the program run. When the Task completes, the rest of the method will run. The meaning of await is basically "continue this method when this Task completes".
Well of course we all have to weigh up our use cases. If you were using it all over the place then perhaps an extension method is useful but as it stands the select example is quite clear without having extra functions and types to grok. If the loop is hot and every bit of performance counts then you should probably just use a for loop with a single local for index anyway.
Not an expert, but I would look at it like this... Are you including any of this code in the software that is being sold by the company? If not, then you're probably fine.
Check out VSCode for a lightweight IDE that can be used with C#. https://code.visualstudio.com/ Shouldn't have any licensing issues. 
It's pretty clear on the main page, and again in the fine print. 1) is the code your own entirely and not "for work"? Then yes, else 2) Is your code open source? Then yes, else 3) Is your work [edit:small] enough to not be an enterprise organization? (&amp;lt;=250PCs &amp;amp;&amp;amp; &amp;lt;=US$1M revenue) then yes, else 4) no. https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx For individuals Any individual developer can use Visual Studio Community to create their own free or paid apps. For organizations An unlimited number of users within an organization can use Visual Studio Community for the following scenarios: in a classroom learning environment, for academic research, or for contributing to open source projects. For all other usage scenarios: In non-enterprise organizations, up to five users can use Visual Studio Community. In enterprise organizations (meaning those with &gt;250 PCs or &gt;$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above. For more information, see the Visual Studio Community license terms.
Are you an import?
`O(n^2)` with arbitrary IEnumerable&lt;T&gt; unfortunately. Thats why foreach is preferable.
Company isn't even making software. The software I make is only to reduce repetitive labor (moving files, modifying spreadsheets etc.).
No idea, but I will try! Thanks! 
Yes, it is different. I've been saying that all along. Big whoop about deferred execution. Why is that so important to you? Although in your first post, you sell your implementation as a way **out** of deferred execution, now you are selling it as a virtue of it? Which is it? Index =&gt; EachWithIndex. Problem solved.
Read the datasheet. The VS1838B outputs high when it's not receiving and low when it is. It looks for IR signals on a 38kHz carrier. Each command that the remote transmits is made of a pattern of pulses by turning the TX on and off. The catch is that each of those pulses are themselves made up of smaller pulses at a frequency of 38kHz. The receiver, however, does not output the 38kHz carrier, it simply outputs 0v for the entire duration of each pulse. If you want to echo the signal you can't just write the TX data pin high for the same period of time that the RX outputs low, you have to flash it at 38kHz for the same period of time that the RX outputs low.
Wow, thank you for clearing this out! I will surely try it! 
About as helpful as every other method from the System.Linq namespace, I agree. That's a very, very weak point you're trying to make. Especially as you have suggested usages of other Linq methods in your argument. You're also deliberately ignoring the method name that gives all of the context you'll need at the time just to try and prove this point. 
https://msdn.microsoft.com/en-gb/library/bb534869(v=vs.100).aspx Looks like MS are weak as well, then? No love lost here. This isn't the first time you've come across as a condescending prick on reddit.
UPDATE: I just see that NEBml (https://github.com/OlegZee/NEbml) can apparently do it, but I would also be interested in any other solution.
If you're that bothered by the typing/naming of things you wouldn't be using Linq at all. However, to prevent having to copy/paste/maintain an arbitrary reference: enumerable .Select((item, index) =&gt; new { Item = item, Index = index }) .Where(x =&gt; /* whatever */) .GroupBy(x =&gt; /* whatever */) // etc 
Now you're introducing useless garbage by new-ing anonymous objects. \^_\^ That's even worse than the *useless* struct. I am aware that the objects (most likely) stay generation 0, but still: It's very easy to avoid this garbage completely.
\*shrug* less of a time waster than copy/pasting a snippet and/or arbitrary reference about. Still with the condescension, eh? You just can't help yourself but to post with pejoratives, excessively so.
VS Code is simply amazing. It's minimalistic in terms of design and functionality, and that's why I love it so much. But it has almost everything you need though. 
In this case i would recommend the [Atom](https://atom.io) editor. VSCode is not an IDE neither is Atom.These are both "only" code editors. Atom is usable for many languages and easy to extend / hack. VSCode seems like a "copy" of Atom. But one should use his own prefered code editor. And decide this by yourself.
Ah I see. That makes sense.
How do I do it in C#? Or do I have to do it in another language?
&gt; VSCode seems like a "copy" of Atom. Well, both are built around Electron, so there are bound to be similarities.
Help me to help you, what did you do? By the way, you are a new born account. Your only post is a question for help. I have no clue of your level. Your post looks like a "resolve my problem for me".
Why are you using this clickbait title again? It was pointed out last time again that these are **potential** (partially likely) C#7 features, not **definite**.
Ok, didn't know that. Seems legit :P
Lets fragment this. - Do you know how to create a C# Console Apps? - Do you know how to read a file in C#? - Do you know how to split a string? - Do you know how to use a loop? - Do you know how to use OOP? If you dont know any of this and it is urgent, use excel to convert it and export to csv. If you have some times, learn [C# programming](http://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners) ;)
Yes, by asking you.
Clickbait **title**.
I saw that the Pi 2 can run Windows IoT, but I wasn't sure what kind of support for the GPIO's was there running Windows. Have you ran Windows IoT on a Pi 2? If so, how is the performance? I believe I saw that it was free for the Raspberry Pi.
Perhaps this write up will help you. http://www.asp.net/identity/overview/extensibility/implementing-a-custom-mysql-aspnet-identity-storage-provider
I have not run it, and yes, it is free.
What's the tv model? I may be able to point you at the standard it uses.
Commercial use is allowed for Express and the only choice if the organization doesn't qualify for Community's requirements. The limits on Express are to the software itself. Can't load extensions, handles some parts of projects differently. The type of software you create with it is not limited however.
What do you think?
If that's the case then they're either kidding themselves, or /u/markovcd is creating a whole suite of applications without the blessing or acknowledgement of the business.
I did it in the past but not with a lib or bind. I just called the tools from mkvtoolnix in the background using a silent (non displayed) cmd shell. 
Making something on company time means that you forfeit intellectual property, including the software, to your company. That is a very standard clause of an employment agreement
After reading through this thread, I'd suggest you get familiar with PowerShell. Most of the stuff it sounds like you're doing is perfect for it. With that, you can use the built-in PowerShell ISE which acts as an IDE for PowerShell. It'll have autocomplete and allow you to test your scripts seamlessly as you develop them. If you don't like this as much, Visual Studio Code is a nice text editor for PS. Then, if you're finding things you can't do directly within PowerShell, you should be able to [import .NET libraries for use in PowerShell](http://stevenmurawski.com/powershell/2009/03/exploring-the-net-framework-with-powershell-constructors-part-3/). I know this isn't exactly what you were looking for, but I used to do what you were doing with .NET and C#. I still do for when my tools have evolved into larger projects, but generally all of my automation is done in PowerShell, now.
The response is read in each of the if blocks so I don't think you need to do this.
The employer can argue that the employee is using the machine for testing. 
&gt; just to automate dull work It sounds like he's replacing himself with a series of very small shell scripts.
relevant? https://xkcd.com/221/ 
[Image](http://imgs.xkcd.com/comics/random_number.png) [Mobile](http://m.xkcd.com/221/) **Title:** Random Number **Title-text:** RFC 1149.5 specifies 4 as the standard IEEE-vetted random number. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/221#Explanation) **Stats:** This comic has been referenced 442 times, representing 0.4549% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20{thing_id})
Thanks for the help, but I already figured it out using the Arduino sketch.. The remotes are sending using NEC protocol. 
As others have mentioned, you might try looking at VS Code, or maybe even LinqPad. I personally have a full LinqPad license, and use it heavily.
First, when you mention you are stuck on .NET 3.5, there is good argument against using WPF. Original WPF had problems rending normal sized text. Eg. the text seemed blurry. [This was fixed in .NET 4](http://blogs.msdn.com/b/text/archive/2009/08/24/wpf-4-0-text-stack-improvements.aspx). If I were to compare WinForms and WPF, I would confirm what everyone else said. WPF is much more modern and better UI framework, but it has steep learning curve. Especially if you come from WinForms, which in some places is drastically different. I don't question it that if you got two teams, both experienced in either of the technologies, that the WPF one would produce better, higher-quality product. Not sure which one would be faster. I guess that would depend on type of application.
Pcfanhater, Cacaocow and kyalo40. I've made the changes you recommended and reposted the new code above the old code. It's working Great! Thank you!
Useful link! Thank you. I also googled the link and saw this aberration: http://stackoverflow.com/questions/18314052/wpf-application-fonts-graphical-error Ugh. I'll learn WPF anyway. But, like you say, buying time is ideal from my/my team's perspective. And now I feel better informed. Great sub. Cheers.
Why not just a simple REST implementation over Web API?
Because with Select I don't need to write another method and wonder where to put it. Also I was thinking more of the original proposal to add syntax to C#.
I'm with u/Humpa. Separate the two activities into two actions. Get the numbers you need, making sure you don't get duplicates, and then sort those results. 
The title implicitly states that these features will be included in C# 7.
Thank you for your thoughtful response. Yes, you're right to identify users' satisfaction with tried and tested UI (they do love 90's/VB6-looking interfaces). I get zero challenge from the business about usability. Nifty controls are not demanded (though, I'll go so far as to rephrase that as "Users' *extremely* negative reaction to change is respected"). Ultimately, this is why I asked the question (i.e. why change to WPF if it's unnecessary, esp. if there's zero requirement for UI/logic separation). But, I'll argue my case. I'll also learn WPF anyway. It's part of my spec as a Windows developer. However, what intrigues me most about your post are your interesting and strong concerns about Windows desktop development going forward: Are you of the mind that MS would drop support for the billions of dollars invested in corporate infrastructure to support their own new vision? Or, do you feel that XAML/C# kinda feels a bit like HTML/'insert flavour here' so we should note that MS may support open only technologies going forward? I am absolutely intrigued!
"IDE" Lol.
They have lots of panel/container options way more than winforms
I would avoid WCF for this one. It would be like using the space shuttle to cross the street, IMO.
&gt; Disclaimer: I'm entirely self-taught so I barely know what I'm talking about. Oh Gawd, you too?
How about [this](https://github.com/at0717/FFmpegSharp)? It's an ffmpeg binding, but the API doesn't appear to be atrocious.
Correct me if i am wrond, but this looks to me as if the loop condition is true everytime because response = 0 before the first loop. What i mean is: I would put the response = Convert.ToInt32(Console.ReadLine()); before the while loop. In case the player guesses right the first time the program would just skip the loop. 
I haven't see such error yet. It is probably not problem of WPF.
Buy a book. There's nothing better for learning programming than a good book.
Google 'Fundamentals of Computer Programming with C#'. Download the free ebook (pdf) which should be the first link, and get started. I'm currently working through this book, and it's absolutely excellent. There are various exercises at the end of every chapter, which is the most important thing in my opinion, and pretty low barriers to entry. Assuming you have access to a computer, download straight away, and you're good to go. I'm working through the book now, and I've essentially completed most of the exercises up to the end of chapter 6. I have a full time job, and I'm not the best programmer, so I do this for fun after work, but if you are ever stuck, drop me a message.
As many others, I love Bob Tabors course for "[absolute beginners](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-8295?l=bifAqFYy_204984382)" on Microsoft Virtual Academy. I also recommend the "[yellow book](http://www.robmiles.com/c-yellow-book/)" by Rob Miles. Both are free, beginner level. Plus, here are some other redditors' answers to similar questions that I found very helpful: https://www.reddit.com/r/learnprogramming/comments/35s6io/id_like_to_learn_c_but_im_having_a_hard_time/cr7uwo6 https://www.reddit.com/r/learnprogramming/comments/18it9q/best_place_to_learn_c/c8f9zam https://www.reddit.com/r/learnprogramming/comments/x0ept/learning_resources_for_c/c5i2vkz
Get community. 
Just been working through the bob tabor mva course myself. It's good. I did some visual basic in college 16 years ago and that's it. So the fact I can follow it means it must be easy. And free.
I started with Bob Tabor. https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-8295?l=bifAqFYy_204984382
Not really an answer to your question (enough of that provided by other people already), but for small scripts that do simple things, you could also consider using a different language. Interpreted "script" languages work very well for that, python for example.
When posting code, make an empty line before and after the code and prefix *each* code line by an extra four spaces to make it look right. See "formatting help".
I recommend [Jamie King](https://www.youtube.com/user/1kingja/playlists?shelf_id=5&amp;view=50&amp;sort=dd). His videos are fairly short but paint a very good picture of what's going on in front of and behind the scenes.
1. Fill an array with numbers from [min..max] 2. Pick x numbers at random from this array and also remove them 3. You now have x different numbers 4. sort them 
But its been already estabilished that I can't use community for my purposes.
Are we undervaluing simplicity? At some point the time saved is overshadowed by the cognitive cost of having numerous specialized language features. Where that line is is different for everybody, but IMO we're pushing it with these features.
 Foo x = Activator.CreateInstance&lt;Foo&gt;(); Activator uses reflection and reflection is slow. You would use this to dynamically create a class. See this: http://stackoverflow.com/questions/7598088/purpose-of-activator-createinstance-with-example Foo x = new Foo(); Use this, unless you know what you're doing. Edit: /u/This_Is_Drunk_Me Request: In that scenario the new keyword is the right tool for the job. Activator is meant to be a dynamic way to create a class. Especially if you don't know the class at compile time. It's less clear, more verbose, and lacks compile time verification. My goal is code readability and simplicity. If I'm running into performance issues I may rewrite a LINQ one liner with some faster code (or better yet re-identify my problem and how to solve it).
If you can use new, don't use the Activator. Back in the day, when using generics you couldn't call new, and had to rely on Activator. Now you can put a new() constraint on type parameters, so it is no longer relevant in that context either. In summary: Don't use Activator except with extensive reflection.
Thanks for this. I am doing the same thing this year. Already took the MVA course for c#, working on the html5 css course currently and was wanting to know some next steps. Downloaded the yellow book and will start reading that and going through of some of these other links.
&gt; Now you can put a new() constraint on type parameters, so it is no longer relevant in that context either. Correct... although the compiler simply produces a call to Activator.CreateInstance for you in that case :p.
Excellent. You're a legend.
Does your app have permissions on the phone? I imagine it needs to use the network and maybe more. 
&gt; CHashtag I kinda want to see a satirical language offshoot of C# now called that, or maybe a joke C# Twitter API. EDIT: t.co System t.co System.Collections t.co System.Text Foo { string Name #getset #public int Age #public #get #privateset void SomeMethod() { Console.WriteLine("Hello World from CHashtag!") #public } string SayStuff() { string output = "Hello, my age is #Age and my name is #Name. I like to tweet random thoughts" #readonly int outputLength = output#Length Console.WriteLine(output) Console.WriteLine(outputLength) output #return ##COMPILER ERROR: Method longer than 140 characters } #class #public #sealed }
Why do you trim the trailing '=' characters from all of the hashes?
What's going wrong? [Here's a StackOverflow page to help you out](http://stackoverflow.com/questions/9201239/send-e-mail-via-smtp-using-c-sharp) I see that you are NOT providing any credentials (Only USERNAME and PASSWORD). You need to use a GMAIL (AKA Google) account to use the `smtp.gmail.com` server. Your username will be your GMAIL emailaddress and your password your GMAIL's password. Secondly, your `message.from` and `message.to` are invalid. They need to be valid email addresses, otherwise the email won't be sent. You could try doing the following try{ //Email code } catch(Exception e) { //Put a breakpoint on the line below to check out the Exception that was thrown Console.WriteLine(e.Message); MessageBox.Show("Error !"); } You will also need the Internet permission, I believe! I hope this helps!
Barnacules codegasm series on youtube if you want a quick video tutorial on jumping right in and making some small little apps/programs. 
oops..
this is a poor question.
You're going to need to provide examples.
A better question to ask yourself is: "Why would **ANY** reasonably good developer (who is actually solving a computationally difficult problem) **NOT** be obsessed with attaining maximum performance?" 
Why would performance not be an important thing to know about in that case? Don't give away cycles on accident, for no reason.
It definitely could benefit from some optimization.
I like to think that a code easy to read and maintain should be the primary focus of the development. With that in mind, when (if) performance issues arise, it will be easy to solve the problem without breaking the code elsewhere. 
I'll expand it to include any developer period. Even if your problem is not computationally difficult, on your machine, making it efficient will make it faster on old machines, mobile machines, use less battery life on mobile, tablets, and laptops, or allow for cheaper hosting in the cloud, and on and on and on. Obviously you would not want to write assembler for everything, but understanding how hardware works, frameworks work, and how algorithms work, so you can make the better performing decision out of all equally simple implementation options is a good thing. 
That question about Activator contradicts your own question though, because reflection *a lot* to do with performance. Reflection can be orders of magnitude slower than the equivalent operation without reflection. While that might be okay for the occasional use, it can cripple a program in other situations. Also, I need to highlight what /u/cjluthy said. Why *wouldn't* you be obsessed with performance?
If you have not already done so you will need a development environment. Visual Studio 2015 Community is free and available here: https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx
It's a false dichotomy to suggest that developers can't be both cognizant of performance and focus on "the most important things of the development". It's not like writing more performant code is necessarily more *difficult*, it just requires actually knowing the performance impacts of what you're doing.
Too slow to notice on your machine, what about on another machine? What if the user's machine has other things going on and you are polluting the cpu cache with inefficient code, or using up memory that the user or cloud service needs? A single non-performing choice may seem irrelevant, but a few add up to dozens and then hundreds, or later someone wraps a loop around you function and then it is thousands. Reflection is rather spectacularly slow, so it is important to know that lest you think "oh, I will just use reflection here out of convenience". 
That would be a solution, yes. However it takes time to learn new programming language and tooling, and I'm at the level in C# that I can efficiently solve problems with it.
You can give [dotPeek](https://www.jetbrains.com/decompiler/) a try.
&gt; SharpDevelop That's the answer I was looking for. Missed it the first time I've read the thread. Thanks for the info, this app looks great! /u/changetip 1 internet
/u/toolongdontread, markovcd wants to send you a tip for 1 internet (1,061 bits/$0.42). Follow me to **[collect it](https://www.changetip.com/collect/936801)**. -- [^^what ^^is ^^ChangeTip?](https://www.reddit.com/r/changetip/wiki/tipping-on-reddit)
Hey, that's me! In that scenario the new keyword is the right tool for the job. Activator is meant to be a dynamic way to create a class. Especially if you don't know the class at compile time. It's less clear, more verbose, and lacks compile time verification. My goal is code readability and simplicity. If I'm running into performance issues I may rewrite a LINQ one liner with some faster code (or better yet re-identify my problem and how to solve it).
Thank you, I'll read that. I still think that, in general, C# programmers focus too much on performance, like my example [here](https://www.reddit.com/r/csharp/comments/42s68i/why_are_c_programmers_so_obsessed_with_performance/czcok52?context=3). C# was my first language I learned but after I started working with Java I began to realize this issue. 
Just to throw a spanner in the works, I think using a dictionary in the first instance actually *may* have been a premature optimization. It all depends on the context - if everyone was aware from the beginning that the code you fixed was going to be a hotspot, then fair enough... But if it cropped up unexpectedly then what are you gonna do? Optimise everything ahead of time just in case? That will double dev time; when all you really need to do is identify bottlenecks when they come up.
&gt; Using a dictionary instead of a list search from the get-go would not have been a case of premature optimization. It would have simply been the smart thing to do for a developer that understands the performance considerations of various kinds of data structures. Just to play devils advocate, it could have been that the constraint for uniqueness, or the use-case for large number of objects were different at the time. Alternatively, it could also be that the data-structure was a cache, and that the actual cost of look-up was so negligible compared to the cost of retrieving that data from disk/network. While I agree that some problems are a simple decision (and honestly every developer worth their salt will make the same decision with minimal thought), most are not. I think OP is right that in the majority of cases it's better to focus on the performance, after one figures out the viability of the feature. I get where you're coming from though, because too many times no one focuses on the next step, which is finding out where the system needs to be improved. 
&gt; Not to mention that new is way more idiomatic and easier to read AND doesn't push compile-time errors to runtime This should be the focus, performance should be the "not to mention ..."!
You always want to optimize for developer hours, (both on the short and long term) if you can. That doesn't mean you should write shitty code, quite the opposite. If you write well readable code it will be maintainable, easier to debug, usually generally less bug prone etc. 99% of the time performance is not an issue and you'll know when you need to tweak that. (Obviously be smart in general. For example don't use reflection unless it really makes sense. Avoid round trips if they are "too much", which is a measurement that comes out of experience, etc.)
Well I agree; but this subreddit has a big mix of skills and backgrounds. Maybe that's the crux of the difference- Java tends to be fairly synonymous with "enterprise", whereas C# is also used in the defence industy, in high frequency trading, game dev, scientific tooling... Etc. etc.
P.S any idea how to make the IR transmitter LED flash at a frequency of 38khz programming wise? 
Again, depends on how old, but for anything .net I really like Just Decompile by the fine folks at Telerik. It's free and can give VB code, C#, or IL. Can also export as Visual Studio project. If the code was written to some other framework then you can always get something, but maybe only machine language translated to Assembly or something. Good luck. 
Wow...Thank you all so much! 
That being a hotspot was not unexpected. The original developer simply was not thinking about the performance involved in what they were doing. 
The uniqueness constraint and large number of objects involved were well known ahead of time. The data structure in this case is a collection bound to a WPF control. When the control is first loaded it is populated by a large amount of data depending on various settings. For the test case I did, changing this lookup to use a dictionary reduced the load time from 10 seconds to a fraction of a second. Something like that has a huge impact on user experience.
I think you mean 'advanced', i don't know about classes because i learn my stuff from books, though I learned the basics in school. C# 5 in a nutshell is a really good resource for me; it's not for absolute beginners though. It explains advanced concepts like delegates, events, multithreading (advanced and low-level) and basically anything else you'd want to know. It would be nice to know if you had any idea about what you expect to learn.
&gt; Any improvements I can make? "improvements" in what way? Performance? Readability? Flexibility? EDIT: BTW, this is a strong candidate for a few unit tests. Makes it easy to rewrite and test for new combinations you didn't expect (negatives, duplicate numbers, single-entry sets, empty sets) or for general code improvements.
It's not mutually exclusive, but we also don't live in a fantasy land where we can spend that much time designing it for peak optimization. Generally, especially in the ERP world, if it works, isn't buggy, and is maintainable, then we move on. Optimizations only occur as needed. Premature optimizations are a waste of time and can cripple a project. So while we make sure to limit connections to the server/database as much as possible we do not do much else.
Why do you Base64 Encode the hash after, then remove the trailing '='? What purpose does that serve? it's kinda misleading telling people that because you used the SHA256 algo to GET your output, that it is the actual SHA256 hash, it's not, it's an encoded version.
When trying to send mail via gmail, you need to make sure that your GMail account is configured to "Enable less secure apps", otherwise the only way to login is via OAuth 2.0 which is not supported by System.Net.Mail.
That was the problem! I forgot to give permission to the app to access the Internet 
Thank you a lot. :)
Again, if your focus is to make a code easy to read and maintain, such performance issues will be easy to spot and fix. While if you focus on make code with "maximum performance", as the top comment says, you may miss some design issues that will hunt you during your dreams.
You've also a **massive** SQL injection vulnerability. **Do. Not. Concatenate. Strings. Into. Queries.** Use PreparedStatements. Please. It's 2016. This was a solved problem 15+ years ago, and people are **still** making this mistake - it's still the #1 web app vulnerability.
I'll bet you're even saltier in RL
Even more... use an ORM or stored procedures. For the love of god don't put SQL strings in production applications. Its so messy!
If it is a .NET application you can use [ilspy](http://ilspy.net/). This will let you browse the assembly and generate c# code that represents the compiled code. If you are trying to actually make changes and recompile it, this tool might not be the best for you.
Score!
mobile browser cam controls are just like desktop. look at /u/cheerios_are_for_me answer. You will need user permission to access camera, and your own qr decoder
It's a .net API you're describing. .net MVC is a certain type of web api that is targetted at browsers as a client and has a lot of "helper" functionality in place to assist with that. .Net APIs are the same type of thing, but without all of those "helpers". Just api endpoints sending out JSON or XML instead of being set up to send HTML. You don't need a special mobile related solution to access an api. It's just generic web calls and every framework is going to have a way to make them, or you can even wrap up your own fairly trivially. What you are discussing is pretty much my bread and butter, if you want to have a discussion over chat some time. Specifically and a tech lead and architect and I make web APIs on Azure Cloud that do exactly what you're describing. I don't develop the mobile apps personally, so I can't offer much assistance in the nitty gritty details of getting an app up and running, but I can show you how to architect it with a ports and adapters architecture to make your API web client fairly plug and play, and show you how to write a web client to interact with your web api. As for writing an actual mobile application, there are numerous tutorials available for that you can follow. As for free/opensource, that's only an issue if you want to make a cross-platform, robust client (which is what Xamarin attempts to provide). If you are just making it for android, or want a fairly slim client you can just use any of the open source, free app frameworks available.
You said "peak optimization" specifically though, and that has a distinctly different meaning from what I'm talking about, which is being aware of the performance considerations of what you're writing. It's why different data structures like linked lists and dictionaries exist. I can't imagine how I would react if someone checked in some code using lists and FirstOrDefault() for lookup everywhere a dictionary should be used with the excuse of "well I didn't have time to optimize." That isn't optimization, that's just knowing what hell you're doing.
Thanks for sharing. Also, you really should wrap your WebRequest and Stream in "using" statements.
Agreed. A "using" statement will take care of that for you.
I have to admit, that's my favorite type of optimization to find in someone else's code :) I recently encountered a db where the guy who designed it didn't bother with indexes and saw a similar change in performance. The cool thing about that is that it literally goes down to O(log(n)). So queries which were forbidden because they would take days to make now finished in a few seconds. That said, this was a problem which the product had lived with for 5 years, and only became apparent when one of the new clients bought so much more of our product that the data they collected started showing these issues. It was a question of balance between being out to market before the competition or dealing with the cost of developers having to relearn an area of the product which had otherwise remained untouched. 
You mean put the `using` statements in the method?
I've only ever used Activator.CreateInstance() (the non-generic overload) when I've had a System.Type that I wanted to use to instantiate an object of that type. It's kind of a way of late-binding with object construction and can be useful at times. If you know the type of the object you're instantiating when you're writing the code, just use new.
As others are saying, you can decompile anything. If it is a .Net application, then it is very simple to decompile the exe and have a look at the code. ILSpy, dotPeek, JustDecompile, and Reflector (for pay since RedHat bought it) are all great tools to do just that. If it is a java application (doubtful) then you can basically do the same by looking in the jar files. However if it is a different compilation then it will be orders of magnitude harder to decompile the code, although there are articles you can find online for how to do this. ----- If you're just looking for sample code then you're best off searching online for existing projects. There are C# Zork and Roguelike clones out there to have a look at.
Todays lesson : | **C#** | **C++** |---|---| | int counter; | int counter; | counter++;| counter++;| counter == 1 -&gt; true| counter == 1 -&gt; "Who knows!"| Advantage C#! Class dismissed. 
I think this approach is a preemptive step backwards. Learn the language and standard libraries before worrying about which editor (and extensions) work best for you, these will come with time. Become comfortable in your Terminal (or iTerm2) if you aren't already. You will need to know how to build solutions/projects/files etc regardless of how you are writing applications.
Me neither; I have never seen camelCase'd private methods in production code from Microsoft. Check out StyleCop rules for naming class members. http://www.stylecop.com/docs/Naming%20Rules.html
If you want to write C# for the web (MVC or WebAPI backend) it's worth buying a Windows license key to run a Windows VM with visual studio community
VSCode is nothing compared to the actual VS. Just install bootcamp or a VM and use the actual VS.
Haven't really seen any must-haves so far. It works well for C# in the vanilla configuration. What are you planning on building? VS Code is a great tool for the new AspNet 5 (.Net Core) stuff, but I'm not so sure about targeting other platforms that may be more integrated with tooling. You can also try Atom with the Omnisharp plugin. Atom is a bit more complete as an editor, albeit a bit slower, and Omnisharp is pretty solid.
Stackoverflow is definitely not your friend. They have extremely low tolerance for beginner questions. I consider myself in the upper levels of beginners, and when I asked something about LINQ the second time I received tons of down votes and also a warning. My friend who was using stackoverflow to ask things around got banned for posting beginner questions. And no, the questions were not like how to print " hello world".
I did....
Notwithstanding FizinMan's comment, I think your implementation, as Hayao's are totally fine. However, I'm a huge fan of LINQ, up until it hurts readability. To me, at least, the code looks complicated, and I have to think up a bit to see what it actually does. I'm quite a fan of simplicity, so what's wrong with this: var a = new int[] { 1, 4, 6, 3, 2, 9, 10, 15, 16 }.OrderBy(p =&gt; p); var last = new Range { Begin = a.First(), End = a.First() }; var range = new List&lt;Range&gt;() { last }; foreach ( var number in a.Skip(1)) if (number == last.End + 1) last.End = number; else { last = new Range {Begin = number, End = number}; range.Add( last); } 
i guess then /r/learnprogramming is the place
I do suggest reading a C#/programming book first. It will be much harder than just asking away, but very likely you'll end up answering most of your questions.
Yes. You're potentially leaking handles with this. Your Stream or StreamReader needs to be disposed. 
I bet this old text based game was not written in C#, so why this sub?
Another vote for Bob. I really like his approach. Probably the reason why this series was the first one of many I tried that I actually made it to the end of. 
i think what you want is the reverse put the student number in the book table the row can be named "borrowedBy".can you explain attendance more ?
Okay, have a book table that stores all your books, a checkout table that takes a student id and a book id, checkout date and return date. Now any student can check out any number of books and is stored in the checkout table. For attendance you could do something similar that is a table that takes current day and a student id, then have a column in the student table for days absent that just counts the null/false/0 in the attendance table. Look into database normalization, I think it's 3n that you want to shoot for. Alternatively for attendance have a column that is a count of days absent and a column that stores the last date that the student was absent and the last date the student was present.
Post the questions here. We're all nice helpful people and would love to help. 
Well, it's more of a SQL problem than a C# one to be honest. Actually, it probably has nothing to do with C# at all. So, if I understood correctly, given two tables "books" and "students", create a third one (you could name it "borrows" or "studentBooks", I prefer the second one) containing a column for a "books" id and one for a "students" id, effectively allowing you to link any number of students to any number of books. You can then add whatever column you wish to this link table, e.g. borrowing and return date.
You're going about it all wrong. If anything, you want a 3rd table to handle the checkouts. Reference the borrower, the book, and then you can include additional info like date time, return date, due date, etc. Sounds like you need to brush up on normalization. e: Rereading this comment, I think I came off more snarky than I intended. So don't read this and take offense or anything.
Indeed, webclient is quite handy. It has methods for downloading as byte[], string and to file. And all with optional async methods and progress events. WebClient wc = new WebClient(); string data = wc.DownloadString("http://...");
We can't find you an advanced C# course online that your school will recognize for course credit. You need to talk to your school administration to figure this out.
What is this a final project for? Was there a class leading up to this project?
it certainly sounds unnecessary to do it that way, but i wouldn't call it wrong. have you asked them why they do it?
its a Single Page App, so they basically want to load it once and only make calls back to the web side for posting data basically. 
&gt; like its a database call, but from memory Yup, that's caching. And it's a wonderful thing, when used correctly (most people don't though). Caching lookups is very common and usually recommended to reduce database/webserver load, especially on highly utilized systems.
Whoops, sorry. Forgot to include the SO post: http://stackoverflow.com/a/7407859/4077294
Also just wanted to add free online learning sources like Khan Academy and Code Academy. These have interactive online courses that can start at any level. This is more for programming and languages in general, as they might not have c# specific courses. Chances are you'll also need other languages as well(like javascipt and SQL) if you take it further to building full apps.
One of these days I'm going to have to put the word out about my dependency injector for scientific models. All of these ones I've seen are so bloated. In mine all you do is implement an interface and the runtime automatically registers it and figures out what you want injected. Controlling the injections just uses an XML file, or it provides a GUI to build the structure. Heck, here is the [link on github](https://github.com/TravelModellingGroup/XTMF). I've looked at a bunch of these injectors and they are all kind of annoying to deal with so I ended up rolling my own in 2011. Again this one is for transportation modelling but the basics are. [Parameter("My Variable", 0, "A description of the variable")] public int Variable; Would make a parameter with the default value of 0, this could also be a property it doesn't matter. [SubModelInformation(Required = true, Description = "It does this")] public IExtendedIModule InjectHere; And that would be a dependency injection all done for you. The only catch is that it would only be available after the constructor has run. Anyways, I hope the author reads this and steals this idea, please, please, please steal it. I don't want to have to keep rolling my own stuff.
For TestType, considering it would be a reference data, that could be ok. You get all your types at once and, since they won't change anytime soon, you pick the right one everytime you need it. I suppose you keep that list between calls in some sort of cache (your typescript file i guess). For Test in the other hand, considering that's one of your entities, i don't see any benefit. They are prone to change quite often + you usually have more of them than their types. It's not worth loading them all if you need one or two of them.
They're probably doing it for infrequently updated values. A good example of which is the list of US states. No point in bringing all the info about them back each time - do it once, keep it in a list in memory, and then just use IDs to look up particular values. Because the list hasn't changed in decades... :) 
To be fair, if this is intended to represent a method body then C# will give you a compilation error for an uninitialized local variable. I'd still say it's an advantage, but it's not as listed.
What do you do when there is more than one implementor of a given interface?
So far what I've found is that, our system is suppose to receive a ton of requests per second, like over 100+, thus I can see preloading the lookup information might be useful, however the call to get all the data on initial load is setup to be called like every 10 seconds, so basically we're doing the lookup resolution client side every 10 seconds, after we get all the data full of Ids.
I switched from Ninject to SimpleInjector a few months ago and couldn't be happier.
Tried AutoFac?
Thank you for making an effort for me. I'm not sure what I can do. But I'm gonna find a way somehow.
Talk to your school administration. There is no standardized "CS 313 Advanced OOP in C#" course. You need to talk to them to find out how you can get credit for the course through other means. You may even be able to take a different CS course at your school (perhaps in a different language). Especially if this is in the context of letting you graduate, there may be alternative courses you can take to satisfy your graduation requirements. Regardless, you are talking to the wrong people (online, reddit). You need to talk to your school administration, period. End of story.
Not hard to implement yourself. Also the devs make a point of not implementing it if you look up the docs. http://simpleinjector.readthedocs.org/en/latest/decisions.html#no-support-for-xml
I would really advise against this. Lists, charts, etc, are strictly containers and should not contain any business logic -- that should lie inside your Series object. In z500's example, you're making an assumption that the Series[] array contains YOUR_MAX_NUMBER entries. You'll run into a couple bugs either when: - You try to find an index of "Series" + number, that exists outside the range of the array. - You try to find an index of "Series" + number that IS in the range, but is null. Your example: chart_A1.Series["Series1"].Points.Add(1); From what I can divine from this, I don't see the need for the string index, as Series[integer] would give you the same information.
I'm not familiar with using interfaces, but I figured this would be the optimal approach. I'm very happy that you saw this first and laid out a good starting point for this kind of problem.
Hardly a bad thing. As much as people talk about xml configuration, I've only ever seen it eventually became a mess that breaks a dozen best practices. For example, using xml configuration for a file format for a system, by basically making some horrific xml that injects a bunch of different types or lists etc. 
Can't really comment on your code based on a screenshot.
Asking questions is fine here. I provided some guidelines for asking good questions here in /r/csharp's [stickied post](https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/). Follow these guidelines, and you're sure to get good, helpful responses. There are also links to learning materials in various formats and programming-related help subreddits there, as well as links to utilities that make the learning process significantly easier and less tedious (in particular, check out LINQpad). Hope this helps!
&gt; I think a lot of developers tend to build a lot of complexity for comparatively very minor 'savings'. I've seen this way too much. In my experience, developers like interesting problems and when not confronted with any, we have a tendency to do shit like this to make simple problems interesting. 
I've only quickly looked at the code, but there's nothing specifically wrong with what you're doing. One reason that it's taking a while to load is because you're always showing the full version of the image, which could take a while to download, could you link to the thumbnail version instead? Another thing you could try is to do is pre-load the images when you can, perhaps have two or three images already cached so when it comes time to view them it'll render instantly.
fair enough.
&gt; lblName.SizeWidth Assuming `lblName` is of the type `System.Windows.Forms.Label` you can see on the documentation https://msdn.microsoft.com/en-us/library/system.windows.forms.label(v=vs.110).aspx that it has no property named `SizeWidth`. But it does have a property named `Size` https://msdn.microsoft.com/en-us/library/system.windows.forms.control.size(v=vs.110).aspx, which is of type `System.Drawing.Size` https://msdn.microsoft.com/en-us/library/system.drawing.size(v=vs.110).aspx. The `System.Drawing.Size` type has a property named `Width` https://msdn.microsoft.com/en-us/library/system.drawing.size.width(v=vs.110).aspx. Write `lblName.Size.Width` and learn now to read the documentation.
I think I will do plan a :)
I've been using SimpleInjector in a few apps (WPF and ASP.NET). I'm still using Ninject in a pretty sizable WPF application and I can't wait to get the time to swap it out for SimpleInjector.
I am assuming you created a blank project for this and then added your Form1? Because Visual Studio and most IDE's will add the program entry point. But you can add it yourself, either inside your Form1.cs like so: /// &lt;summary&gt; /// The main entry point for the application. /// &lt;/summary&gt; [STAThread] static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new Form1()); } or I would create a new class called Program and copy paste this in there (this is how Visual Studio does it): using System; using System.Windows.Forms; namespace YourNameSpace { static class Program { /// &lt;summary&gt; /// The main entry point for the application. /// &lt;/summary&gt; [STAThread] static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new Form1()); } } } And for the second part, what are you trying to accomplish? move the radio button based on the label location? You were close on the property name, you need the Size property, and that has a property of Width, so it would lblName.Size.Width . But if you are trying to move it just to the side of the label, it would be something like this: radioBtnBlue.Location = new Point(lblName.Location.X + lblName.Size.Width + 15, 8); 
I did a bunch of research a little while ago into DI frameworks. I was initially thinking StructureMap, but after looking at some of the performance benchmarks, SimpleInject and LightInject wound up being the two that stood out the most as far as performance. [I found this site comparing DI feature sets across a wide set of .Net containers](http://featuretests.apphb.com/DependencyInjection.html). I wound up going with LightInject because it had a slightly broader feature set. After using it for a little while, I think those additional features aren't critical, and SimpleInjector would have worked just as well. After looking through SimpleInject and LightInject's codebase, if you happen to be interested the System.Reflection.Emit namespace and working with MSIL those are good sources to look at. 
Also the classes here have to know and depend upon the IoC container. Which is also just awful.
There is no reason to not use PreparedStatements.
It's trying to tell you something... but if you insist... [Tools &gt; Options](http://i.imgur.com/ETwj69y.png)
If you have that specific code, why not do it in a single regex? var regex = new Regex("#1#(.*?)#2#(.*?)#3#(.*?)#4#(.*?)#5#(.*?)#6#"); var match = regex.Match(input); var firstName = match.Groups[1].Value; // etc. Depending on the pattern, you could also split on the string. var regex2 = new Regex("#\d+#"); string[] parts = regex2.Split(input); var firstName = parts[1]; Just possible ideas.
The first method worked perfectly. Thank you so much matey
In my experience, we typically are returning quite a bit of data from Entity Framework. For super complicated data transformations, always go with a stored procedure, then you can control **exactly** what data you get. Don't get too crazy with LINQ-to-entities, unless you know what you're doing, or else you're bound to have a generated query that is a couple thousand lines and will definitely be a bottleneck. And even then, you can get massive performance increases by simply turning off auto-detect changes in the context before you start the query. If I were you, I'd ask if you can work on a research spike and play around with ORMs and do profiling to compare your results with your raw ADO.NET code. If they let you do that, you can show them real numbers on YOUR data, and that's all you can do to try and convince them. They may still be stubborn and claim it'll cost too much to rewrite your services. But I'd still give it a shot. And obviously argue the maintenance costs with them, because good ORMs make it **very** hard to write unmaintainable service code.
I have a love/hate relationship with Regex, as do most developers I think. They are super powerful, but I'll be damned if they aren't the hardest things to read.
For starters, it won't even compile, even if you throw it into the Main() method. There's a missing } at the end there. But as /u/FizixMan said, Visual Studio Community is free, so if you have a Windows computer you should download it and try it yourself.
And here I thought I was the only one using LightInject
You **do** need time to get used to the symbols, but also what they represent *and* how they work. There are a lot of concepts to cope with at once, but once you **are** used to them, they are useful in so many situations dealing with text. I bought [Mastering Regular Expressions - Jeffrey Friedl](http://shop.oreilly.com/product/9780596528126.do) which demystified Regex completely for me. Now they're just another tool to use when the need arises. 
Wow that was eye opening, Ive been looking around the market for MADPs/IDEs and yea Xamarin is unreasonably high. I feel that they should be offering it a low price and provide it to students at no cost. 
I've used Entity Framework extensively for the last 1 1/2 years. Some days I love it, other days I hate it.. but overall, I'm quite happy with it. The problem is that it takes a really, really long time to learn the ins and out about how it performs, and every query calls for a different way of expressing it in code in order to make it perform well. When I started at my job, Lazy Loading was enabled, and no includes were being used. The local context ( or .Find ) was also not being used, resulting in some requests opening up to 200 connections to a remote database. Fun. So I started adding Includes - but especially once you include a lot of one-to-many references, the payload becomes unbearably large due to the way SQL Server duplicates data on joins. Fun. So I started using Select queries to pull only the columns I need, added conditions to only join in collections in specific scenarios, maybe summed up some values and counted up some values instead of pulling the data down. Subtree cost of 300. Fuck. Currently, my preferred way of working with Entity Framework is to: **Use Fluent mapping to configure Split Tables - 1 table in the database is split across multiple smaller entity framework models.** For example, if you have a "Product" table with (Id, Price, Description), I would have a "Product" model with (Id, Price, Virtual ProductDetails) and a "ProductDetails" model with (Id, Description, Virtual Product). I know that 99% of my business tasks involve the product's price, but the description is completely irrelevant for the business logic, and only needs to be accessed when product information is shown to a end-user. If I need to do business logic, I can just pull down Product, if I need to display it, I can Include ProductDetails. This is extremely important if you have lengthy product descriptions, because otherwise any one-to-many join will duplicate the description over and over and over. Imagine trying to pull a list of all users that have bought a certain product - Products.Include(p =&gt; p.ProductOrderLines.Select(pol =&gt; pol.Order.User)). If 50,000 users have bought the product, your 5000-character description by itself would bloat the data returned by SQL Server by a whopping *250 MB*. **Find the happy medium between number of queries, query complexity and unnecessary data being returned.** Having 1 query is great. Having 10 queries is fine. Having 100 queries is not. Having a query with a subtree cost of 0.08 is great. A subtree cost of 1 is fine. A cost of 100 is not. Having a query return 0 unnecessary data is great. 5 MB of unnecessary data is fine. 100 MB is not. In my experience, trying to optimize any of these categories will negatively impact one ( or both ) of the others. If you set out to get 1 query, with a low subtree cost and 0 unnecessary data, you will fail. Based on my scale, go for "fine", not "great". On a practical level, I apply this strategy by pulling involved lookup tables down into a dictionaries ( if they're not already cached, or available in the application ). This increases the number of queries, but reduces query complexity and unnecessary data duping. I prefer using includes over using selects, as change tracking is important, and the data overhead is usually easier to deal with than the performance overhead from .Select. Finally, I avoid using GroupBy on a Entity Framework level like the plague. In my experience, trying to GroupBy on the database results in a incredibly high subtree cost, and at least in my situation the latency between server and database is low enough where it's usually far better to pull the whole result set and grouping it client side. Anyway, none of these are hard and fast rules, but I hopes it helps someone.
I have those set but it doesnt change the default page creation
I use entity framework and like others hate it solve days and love it others. These are my thoughts: -data contexts are slow to start up with large numbers of types in a context, there are ways to deal with it like caching generated views. Just something to consider. -rather than using the entities for table/lists, i made sql views that pull only the columns i need. So the load times are fast even with paging and sorting -linq can be your friend if your colleagues are complaining that you will pull too much info everyone. You can just select the columns you want
Fwiw ninject was never good. It was only popular because of the stupid name. StructureMap and Autofac were always best.
&gt;Your reply is not a good one. A simple no would have sufficed. Dude, I think I should tell you that a least one person here thinks that sentence makes you sound like a ungrateful childish jerk. 
You don't need to compile and run this code. You should be able to solve this using pen and paper. Actually, I would consider figuring it out without running it to be much better assignment than just running it. It will help you train ability to see what code does.
Autofac has its oddities... But its my fav. 
I did some performance testing at my old job, the difference between Ninject and Autofac/SimpleInjector/Unity is huge. But the difference between the "fast" ones is negligible in most cases. 
Any ORM is really a bitch to maintain once your codebase grows and your POCOs get out of date ie. you don't want to have to keep updating your apps when your table definitions change. ORM kinda only works if you maintain one big monolith, but even then I would rather just write the SQL.
Because the tradeoff with maintainability and reliability quite often makes it unjustified. In my experience the quest for "maximum performance" starts with the dev reading all the HN articles making them full of optimism in that they can use all the latest/greatest products and architectures (of which they have no experience and do not understand their intricacies or weaknesses) and they end up with a piece of crap that just won't not fail. Apologies for rant, I work in this area and it wrecks my day/life. My advice, is to keep it really simple, less code is also easier to rewrite when you need to scale.
You need to decide between push or pull. Pull is pretty much always Web API / REST. For push maybe try something like "pusher", it's pretty sweet for managing push notifications and you don't need to manage infrastructure.
XML is much easier to process than SQL - although that's not difficult either, just includes a bit more boilerplate.
So who's got good experience of both StructureMap and SimpleInjector and wants to share there opinions?
So much Ninject hate in this thread - despite not being the "fastest" container, I still stand by it being the most productive. It's also a masterclass in exception message writing. Everyone can learn from Ninject. When it fucks up, it tells you - - What went wrong - What it tried - What you can try to fix it &lt;3 Ninject
As a workaround, grab Productivity Powertools and it will let you tabify (or untabify) your mixed files.
Code first saves a lot of pain too. 
This is the second library on this theme that's rolled through in as many months. This is just differently bad to read - the fluent interface doesn't *add* anything. It's just a different, in this case Internal-DSL. It seems like a worse idea, than just using regex.
Have you asked your senior developers for a reason? 
I honestly think this makes the expressions much much more harder to read and to understand. It obfuscates the usage of regular expressions. With Regular Expressions you have a specific set of syntax and plenty of tools where you can paste an expression and get it explained. But with these chained method calls it's even difficult to see what regular expression is created in the end. This becomes especially true if you have **slightly** more complex expressions containing options, captures and non-capture groups.
Harder to read than OP's original code?
Wait for Project Rider if you do not want to install Windows - https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/
It also was used in this book from which I learned ASP.NET: http://www.apress.com/9781430242369
??? Ninject is super simple to use and doesn't use a bunch of config xml files to do anything.
ya i overlooked that *BarcodeReader.read(img, BarcodeReader.QRCODE);* returns an Array of strings an not a string try the following code: private string _lastResult = null; // used to save the result to compare it to the next, only different results get processed further private void timer1_Tick(object sender, EventArgs e) { //WEBCAM if (videoSourcePlayer1.GetCurrentVideoFrame() != null) { using(var img = new Bitmap(videoSourcePlayer1.GetCurrentVideoFrame()) { var result = BarcodeReader.read(img, BarcodeReader.QRCODE); if ((result != null) &amp;&amp; (result.Count() &gt; 0)) { if(result[0] != _lastResult) { _lastResult = result[0]; // Save the current result to stop spamming result[0] = result[0].Substring(1); listBox1.Items.Add(result[0]); label1.Text = result[0]; } } } } } i just edited that again...
And for the long run: click the [fist link](http://blog.ploeh.dk/about.html) under **About → Publications → Print**! Awesome book for the topic and in general. You can get a taste of it [here](https://www.manning.com/books/dependency-injection-in-dot-net) with some free PDFs. At minimum read section 1.1.2 within the introduction - imho a simple but brilliant motivation!
Something like this: using (XmlReader xmlReader = new XmlTextReader(XML_PATH)) { while (xmlReader.Read()) { if (xmlReader.NodeType == XmlNodeType.Element &amp;&amp; xmlReader.Name == TAG_INPUT) { XElement element = XElement.ReadFrom(xmlReader) as XElement; // The element you wanted from xml } } }
In my case the IoC needs to be created by non-programmers so a GUI was needed to facilitate that.
I like this approach. Get the job done well, but the solution doesn't have to be perfect, it just needs to work well enough to avoid negative consequences.
You'd be shocked at how useful it is when building models. I don't claim that it is the best implementation of IoC for all cases. For my case though we needed something that would allow for extremely fast prototyping of models without the need for any changes to the codebase. The idea behind it was building up program structure using very generic modules/classes (think Lego blocks). To help with the complexity of actually composing the system a GUI was developed. So when you want to attach a module to a parent, it is able to go through all of the available types and only select ones that can be applied safely and then configure all of the parameters for that model.
So first and foremost, every class you want to use as a view model should implement INotifyPropertyChanged. In your case, I would create a user control library for your various objects. First one to do would be address because multiple other controls use it. Your view model class will implement INPC, as stated before and will have two constructor, a default for a new address and one that takes in an address model. Every property in the address should follow the following pattern: public string StreetAddress { get { return _addressObj.StreetAddress; } set { if(_addressObj.StreetAddress == value) return; _addressObj.StreetAddress = value; RaisePropertyChanged("StreetAddress"); } } RaisePropertyChanged fires the OnPropertyChanged event required by INPC. private void RaiseProperyChanged(string pName) { var handler = this.OnPropertyChanged; if(handler != null) { handler(this, new PropertyChangedEventArgs(pName)); } } 
When you successfully read a barcode set a global variable like LastSuccessfullBarcodeRead When you enter the barcode reading timer event check the last successful read against the current datetime. If it was less than 10 seconds, exit the method if(LastSuccessfullBarcodeRead.DateDiff(DateTime.Now()).TotalSeconds &lt; 10) return;
I'd like to clarify. I assume you mean the try-catch block in your C# dll? I'm not familiar with VB6, but judging from this article, https://msdn.microsoft.com/en-us/library/cbxtas1e(v=vs.90).aspx, VB6 does not have try/catch. Can you tell us what exception you're getting, the code where the VB6 app calls your C# dll, and the Try/Catch itself?
You might want to look into Solution, Project and Item templates. VS basically copies over files from the templates when you ask it to create something new. You can try to modify the existing templates or you can set thing up the way you like them and create your own templates. 
I'd like to preface my comment with a quick "I'm not knocking the effort". This appears to be a first revision and holds promise. The syntax is understandable to someone without experience with regular expressions, and it's a good start. I also hope the maintainer/others will continue to build on the library -- it's a problem that actually is in need of a reasonable solution. And even greater thanks for a liberal license, as well. In .Net, the Regular Expression readability issue exists only in the creation of the regular expression. Using the results from the parsing operation is quite readable, though dependent on writing a good expression with proper grouping. It's also *very* performant. The maintainer has the right start by solving that problem and exposing the rest of the Match interface. Unfortunately, this library would be very useful for only simple string parsing operations. Most people who aren't familiar with Regex will solve this themselves with a naive string parsing operation. It's when you have to do something *really* painful/complex that you *really* need the power offered by Regular Expressions (barring the obviously wrong cases of parsing HTML or code with Regex). This library won't help much with that. For instance, I was tasked with extracting metadata from a ticketing system. It used a subject/body format, but much of the data entry was done with cut/paste templates complete with field names. I was able to extract almost all of the metadata accurately, including handling inconsistent data entry, with a single (extremely large) Regex, with each entry accessible via the Groups collection, casted without trimming to the correct type with the result tossed into an object (and later inserted into a table). The only painful-to-read part was the regular expression, which I carefully commented to help with maintainability. After some careful analysis, the regular expression operation was unimaginably fast. On the syntax -- it's painful (I remember thinking "brought to you by the folks who created "Brainfuck"), but it's also universal. It's not difficult to find people from every language background who can also parse a regular expression. So any library built to replace it has to be more readable *against* the body of people who already understand regular expressions -- which is a pretty high bar. That said, I'd welcome a library that solves the readability of Regex -- preferably a syntax that's native to C# -- that doesn't require comments in order to make the code understandable.
I think you may be biased because you already understand regular expressions. I found the fluent syntax used to create the parsing operation to be "immediately understandable". Having done a *lot* with regular expressions, unless the expression is a simple character range or a couple of groupings combined with simple operations, I do not find that I can immediately predict what a regular expression will do "with a quick glance" the way a Fluent interface *could* allow. As far as the chained method calls being a problem -- that's a *really common pattern* in C#. Personally, I hate LINQ expression syntax -- I find it less flexible in allowing me to format it to communicate intent, so I used LINQ method chains (which I can break apart, convert to methods/extension methods, etc for readability). It also has more of an "FP" feel, which works better for me switching between languages I regularly use. If you're taking issue with chained method calls -- I'd imagine you'd take issue with Fluent interfaces -- in general -- as being unreadable. Which is fine, everyone has their preference, though that wipes out a lot of libraries aiming for Fluent-as-readable.
Here's a working example stripped out from my personal collection of code, for fetching web pages from behind corporate proxy servers. It picks up the system defined proxy server. Hope it helps. &amp;nbsp; internal String GetPage() { String _Uri = "http://csharp_subreddit_ftw"; String _Response = String.Empty; IWebProxy _Proxy = WebRequest.DefaultWebProxy; _Proxy.Credentials = CredentialCache.DefaultCredentials; using (WebClient _Client = new WebClient()) { _Client.Proxy = _Proxy; try { _Response = _Client.DownloadString(_Uri); } catch (Exception e) { _Response = e.Message; } } return _Response; } &amp;nbsp; YMMV. Use at your own risk. Et cetera et cetera.
Best reason to use StructureMap is the WhatDoIHave() method. Only reason to not use SM or AutoFac is i generate millions of objects from my container in the life time of a single app domain.
We use NUnit for our testing framework. There are pros and cons to NUnit and XUnit, but they are pretty similar so it's not a big deal which you pick. For assertions, I think NUnit has the best built in. You can do: Assert(result, Is.EqualTo(5)); Assert(collection, Contains("apple"); For mocking, I think the cleanest and simplest one is FakeItEasy.
By the way, you don't really talk about what you're building or the requirements for your apps at work. If you're just doing CRUD apps for a couple hundred people, not an issue. Doing real time stock trading, it would be an issue. There are certain apps that I wouldn't put an ORM even near let alone use in it. So there are four basic answers to what you're experiencing: 1) The people above you might be correct. Don't know what you're building, so maybe? 2) They may just have 0 experience with them and are just repeating what they've seen online without having any first hand knowledge. 3) They have used them, never learned how to optimize them, hit the N+1 issue, and abandoned them. 4) They used them back in the early 00s when they were slow and never looked back in on them. Based on the rest of your post, especially the unit testing/SOLID comment, I'm guessing #2. As far as optimizing an ORM, it's the same as hand rolled queries. Just reduce the number of calls to the database. All an ORM does is takes the results of a query and maps that to an object of some sort. Strip out all the other features and that's it. The copying the data to the objects, for most ORMs, is a small bit of the time it takes to get your data to a usable state. So the only thing you need to worry about is the queries to the database. And it depends on the ORM as to how you optimize that part. Most ORMs let you run stored procedures or your own queries. So just run whatever query you need to speed things up. I drop down to hand rolled SQL all the time in the ORM that I use, but it's designed to let me to do that and not all will allow you to do that. So any optimization tricks/techniques would just be dependent on the ORM.
/r/programming is probably not the place to put this. That said, /r/learnprogramming might be. Beyond that, just try breaking it down. Figure out how to send emails as a console application, figure out how to do a database backup, figure out how to run a application on a schedule (perhaps make your life easy by using Windows built-in Scheduling), figure out how you to deploy/download a file (your own web service? DropBox? OneDrive?). Then try putting the parts together, one by one, and then you have your application.
Sometimes it's necessary to do a backup outside the database server. I've had that happen. I wrote a service that would check an xml file for options (schedule, sql queries, etc) and it would put itself to sleep until the next time it needed to check the xml file or the scheduled time to run the queries. It would then run the queries and dump the data into a csv file, zip them up and upload to an sftp site. It would also send an email. A full database backup would be different than individual queries to csv files, but the dump file could still be zipped up. All of what you want done (except the sql backup perhaps) can be done with straight c# code. No need to shell to dos to run pkzip or something. Let me know if you want my help on that.
Now I haven't done any vb 6 work in forever but you should be able to catch exceptions generated in the dll using On Error Goto https://msdn.microsoft.com/en-us/library/5hsw66as.aspx But honestly I have no real idea but it might work for you. 
We have an ERP application and some supporting apps as well. Nothing too data intensive but far more complex than CRUD. We could benefit from DDD as well, but again, I can't seem to get new ideas through the pipeline very easily.
I don't know about "industry standard" but I use xUnit and [FluentAssertions](http://www.fluentassertions.com/). I use xUnit because of its encouragement to use constructor-based setups and teardowns. NUnit's per-test setups and teardowns let me do some things made my tests hard to read. Fluent Assertions is just awesome - it makes it easy to [compare expected and actual object attributes](http://buildplease.com/pages/testing-deep-equalilty/) with its .ShouldBeEquivalentTo() method. I use Moq as my mocking framework because of its nice API and "Linq to Mocks," but I never really tried any others like RhinoMocks.
Is it written as a monolith? That is the only use case I know where it is not a pain in the ass (only one solution to maintain entity mappings in). We have something like 80 components/microservices so it's impractical to sync the entities for each one. We've found most components only use a handful of tables and columns anyways so by precisely selecting and updating what we need means hardly any maintenance once a component is delivered to production.
[ApprovalTests] (https://www.youtube.com/playlist?list=PL0C32F89E8BBB5368) Try not to mock if you are writing new code (it's a smell). If you are in old code, mocks are useful. I like rhino mock. 
xunit https://www.reddit.com/r/csharp/comments/4198ei/should_i_use_nunit_or_xunit/
I find [FakeItEasy](https://github.com/FakeItEasy/FakeItEasy) has the nicest syntax of the free mocking frameworks available, worth a look. Nunit &amp; xUnit are both good, MSTest can get the job done but I'm not really a fan. It's clunky and slow.
At my job, we use NUnit and Moq. Both are remarkably simple and lightweight. Dont get too bogged down in picking heavy automated testing tools. Unit tests by definition should be reasonably light and easy to understand. If they arent you're code might not be written to be tested. (A big problem with first time unit test dabblers from my experience)
Given the code (simplified for example usage) at: http://pastebin.com/uuRYXsaA you'll see on line 79, i have a comment asking how to access the backing models properties converted to a view model...is this the question you were trying to ask?
I think I'd prefer something that takes advantage of C# 6's string interpolation.
Learning Moq ( now ) and it seems to be the best if you understand lamda's and need complex test to be established easily. 
I disagree with you on 'too much. Even from your example, if that code is called hundreds of times per second, you'll notice. Now you might say "This code will not be called that often.", but do you know this for sure? Do you know for sure that you won't reuse a piece of code in a new project? Do you know that a new programmer in your team won't ever do this? At that point, simply using a bit of gained knowledge to gain some performance is not that hard, right? I can also reverse your statement. You say C# devs care too much about performance in comparison to java developers. Playing devils advocate here, maybe java deva don't care enough about performance.
and today i learned about CatB. Thanks
Ye, I understand you completely, but I'm doing an internship where my "mentor" here proposed this as my first task as he saw that fitting, whereas I'm not so sure if I'm up for the job, but not willing to give up, since at least I can learn a lot along the way. So, it's pure exercise and I don't need it commercially, yet. 
I see where you're going, thanks for the comment! 
Thanks for fakeiteasy, loving it so far
Cool, no problem. BTW, everything after my .Select(XElement.Parse) would be LINQ to XML so if you need any guidance there, the LINQ to XML docs will still be helpful.
No problem. If you need any code or help, just reddit-mail me.
&gt; if that code is called hundreds of times per second, you'll notice And if you have made a good software with a clean code and easy to maintain, fixing that issue will be easy. That's my entire point: you don't need to focus on performance issues before they happen.
All of this can be done within a single VM using a minimum of 3 objects. (Offices, SelectedOffice, SelectedPerson) 1. Create and populate a list of Offices to bind to the top level UI component. 2. Upon selection, bind the selected office to a single "SelectedOffice" object that implements INPC. SelectedItem="{Binding Path=SelectedOffice}" 3. Bind the "SelectedOffice" object to another UI component to display the SelectedOffice details. 4. Create a listbox or something of that effect that binds to the 'List&lt;IPerson&gt; People' object on SelectedOffice. - Assign the selected item of the list to a "SelectedPerson" object that implements INPC. 5. Create an editor or whatever that binds to the properties on the SelectedPerson. 6. Save your data.
Its been FOREVER since I did VB6, and honestly I try to forget it as much as I can. That being said, VB6 did have On Error GOTO. I wonder if you need to add some sort of config setting to it to trap non-native errors? I know in .NET we've had to add things to configs to force it to catch errors from unprotected DLL references written outside of the .NET framework. 
But why do you imply that performance optimization and proper software design are mutually exclusive?
As others have mentioned this wouldn't work in a concurrent context. 
&gt; but there's a fundamental mismatch between the storage of object data and relational data. I don't think it's so much the storage, object -&gt; table works rather well usually. It's the retrieval of the data, it has to be forced from multi dimensional to two dimensional and then an ORM will convert it back to multi dimensional. I think object databases are solving the wrong problem, they are focused on the storage when databases just need better object graph retrieval.
How are you going to test code that has dependencies if you don't mock?
They are not, but focusing so much in performance increases the chances to make bad design decisions based on performance issues that doesn't exists. For example: my boss still doesn't want us to use a ORM framework because he thinks it will make the server run slow. I cannot count the hours we lost making SQL queries and fixing related issues because this stupid decision.
I'm not sure why you would call mocks in new code a smell. Except for the simplest of classes, you are going to have dependencies on other types. That is a natural consequence of having small, focused classes. How do you propose to unit test such a system without mocking out these dependencies?
Once put some resource into it, I liked Nunit but can't remember specifics. Also ended up using Nsubstitute but FakeItEasy was also a strong contender. Sorry I can't give any reasons as I've forgot and haven't used it much recently (maintaining some legacy code now).
&gt;The issue is whenever I bring up an ORM, the people above me get in a tizzy about how "slow" they are and how they will hinder performance. Pick off a couple of samples and measure the results. It's a lot easier to demonstrate if this is an issue or not with actual performance data. If the data is as dynamic as you say then I wouldn't be at all surprised if an ORM was faster. Though IME, the "stored procs are faster" people will still cling to their cargo cult.
What? Why is an application connecting to 60 databases?
Visual Studio has integration with MSTest right out of the box. I find it works perfectly fine for my needs and the first class VS integration is nice. Personally I really like Moq for handling just what you think it handles.
Looks very interesting. One question: from an implementation standpoint (cannot read the source right now), is it wrong to assume there is some kind of polling on a queue when waiting for a reply?
I *really* like using nCrunch for testing, as it easily runs tests against affected code (without you needing to execute the test runner) and has a visual representation next to the code as to whether or not it passed. It also runs tests in parallel. This helps you really think about whether or not you want to make that object static. ;-) As for the mocking framework, Moq is the de-facto standard.
+1 for Moq. We use nUnit though. 
Awesome, been using this in a new project. It's great.
It isn't about extra files. It is about having to add REFERENCES to your base assembly. With that the only thing you gain from your container is a mapping from an interface to a derived type. I want the ability to specify the assembly and derived type ON THE FLY, without needing to recompile my base assembly. This is where XML configuration wins. 
If I might, is there a way to make a SQL db on my laptop? To like trial stuff out in? 
We use : * Nunit * NSubstitute * FluentAssertions * AutoFixture * BDDFy * ApprovalTests I like this setup, but there is no such thing as an ‘industry standard’. You need Nunit or xUnit. For mocking choose between Moq/NSubstitute/FakeItEasy. Everything else is optional. About our other testing tools — FluentAssertions is amazing. But there are several alternatives out there. AutoFixture is great if you use dependency injection.It is much easier to create objects for testing with it. BDDFy is a nice little tool that helps you right meaningful tests. ApprovalTests is a good thing to enforce conventions. 
Going forward I would go xunit - as that's what Microsoft seems to be pushing with the new ASP.NET Core 1.0.
Yes exactly. I have been doing this for years for precisely this reason. In enterprise environments. It is incredibly powerful and I consider it a must have for DI container libraries.
Thanks, I'll give it a try once I'm in the office. 
Baller man. Thanks a lot for the guidance. I may holler at you in the future as I build, if you don't mind, but for now, I've got my project that ties a lot of stuff together. Means a lot actually. Got stuck on loops and ifs and whiles for a while without anything to build. Thanks for helping me take it to the next level. 
No problem at all. Holler at will - a good way to get up with me is through my [blog](http://www.buildplease.com/). There's a couple places where you can sign up for my mailing list and I always respond to comments/emails.
That's not the first time I've heard good things about NSubstitute. Think I'll give it a try!
Seriously great work here. I have been using this since the first RC and applied it to some really gnarly old legacy code that was written in the land before time. With judicious application of fixes, this codebase now looks like our more recently written stuff. +1 for Sam Harwell. Met him at a conference last year, smart guy.
This. A view model in this instance is an abstract representation of the UI. It is different to the data model itself, which is what OP is describing.
I think you are stressing a little too hard about your current project(s), because what you just said makes little sense. :)
Maybe it's a test... To see if you'll immediately attempt to roll your own solution or to just use the built in backup util. At the very least acknowledge that there's probably a built in solution. 
I personally prefer and recommend [Regexr](http://regexr.com/).
Also www.regex101.com
that's an interesting take on things really though any day of the week I'd take xaml over whatever shitshow is going on in webdev land
WPF/XAML predates AngularJS by 3 years (2006 vs 2009). And UWP is built on ideas and principles from WPF. Also, how is WPF/UWP undocumented? MSDN is one of the best developer documentations. Also, WPF + C# was actually designed for the purpose it is used for. HTML/CSS/JS/[Whatever flavor of month framework] is just hack over hack over hack that somehow manages not to crash every 5 minutes. One more interesting fact .NET 3 (which contains WPF) was released on November 2006 and jQuery on August 2006. jQuery is 3 months older than WPF. Please, take some browser from that time and try making a website on it's JavaScript engine without jQuery and any of the frameworks you have today. I bet you my monthly pay you will want to rip your hair out. 
Does this go well with Resharper? It already implements many of the things StyleCop did. 
Well if he is creating classes implementing the interfaces just for test purposes I would call that mocking, he just isn't using a framework. Something I assume was the inspiration for mocking frameworks. I could be wrong.
He's not wrong.
It's been a while since I've played with vb6 but... * are you threading in the c# dll? It might be that, as vb6 sucked for threading (hackery via timers iirc), and didn't play well * if you get to the unhandled exception in the dll, what are you doing? Throwing it out, or reporting it somewhere? I think you might need to make sure the error is completely swallowed in the c# library, and return a simple error class/enum/string/bool/whatever back to the calling app. I've got a vb6 app that hooks to a rest client written in csharp, and I seem to recall the dev having all manner of issues with the error management within the c# lib. Haven't got the source code handy though atm
Thank you, I'll have a look at the source code :)
That's what I assumed your question was about, and that's why I asked to see some code. Exception handling should work regardless of the caller. Show the code causing the exception and the try/catch handling it.
I hate to ask, but why bcrypt over other hashing algorithms? Ive been working on an app for a while, mostly learning as I go. I'm nearing a point where this will matter and I am exploring options.
client gets served HTML regardless of what happens server side.
Ive stppod using ioc. Now i only do di. When IOC containers become an anti-pattern http://firstclassthoughts.co.uk/Articles/Design/WhenIOCContainersBecomesAnAntiPattern.html
&gt; Basically when you save a .cshtml file it generates a .cs file filled with Response.Write calls for the HTML supplied. That's similar to how Razor works already: - Load the cshtml file. - Compile it to C# code. - Compile the C# code and load the resulting assembly. All steps happen at runtime, but only once. So by doing what you say they do, they improve the start time of the application, which is IMHO worth it. On the other hand, this *pre-compilation* is something that Razor already does offer. It's a simple project configuration change. Then this compilation happens during build time. Your solution is still faster, as it happens during development time (upon saving) instead of during the build time, resulting in faster builds. However, if this is a custom solution then you really should wonder whether the effort of maintaining the custom solution is worth it.
The built-in VS document format function isn't even in the same ballpark as style cop. It only does basic indentation formatting and, for VB, casing of member names. It does nothing for comments, swaths of blank lines, a property def sandwiched between functions, etc. like style cop.
Is there a CoreCLR version of Bcrypt.Net? 
Are the cost parameters incorporated into the final hash in any way other than tacked onto the beginning? I ask because couldn't a hacker technically just remove the first two variables between the $ characters to remove the cost?
I should note that the class is a stand alone class file so it does not inherit System.Web.UI.WebControls so Hiddenfields and ViewStates cannot be used. I'll have a look using a list for the data.
So are you wanting to have the array data readily available through the lifetime of the app? Or do you want to have it persisted even after the app is shut down? When you say "real time", does that mean you're using/plan to use websockets or some kind of polling? Reason I ask is that if you want the Array available just in memory, you could think about a Singleton that stores the data for the lifetime of your running app. In the [Stock Ticker Sample](http://www.asp.net/signalr/overview/getting-started/tutorial-server-broadcast-with-signalr) for SignalR, they use a thread-safe Singleton with a ConcurrentDictionary to represent the changing Stock Data while multiple clients access the data concurrently. You could also try making it static, which is the same except you can't pass around the instance of the class. Singleton and static might still be what you want to investigate even if you are persisting the data elsewhere because if I think more about what you're doing, I guess you're querying data from persistence and replacing the data in this in-memory array that your web clients are accessing. That's why you might want to be conscious about thread safety with this globally accessed collection. 
Are you doing the actual drawing of the graph on the client side? In that case, rather than fetching the whole graph twice a second, it might be better to just fetch the newest data point. Then you can do what you're trying to do on the server in the browser instead.
The reason that the data disapear whenever you call SetLineChartData is because of this line: lineChartData = new int[30]; This'll instantate an array of integers full of 0 values (because 0 is the default value for an integer) and assign it to your variable lineChartData.
Interesting. Is there a way to capture the generated request object and return it to the test somehow? I'd like to validate headers and such. Edit: figured it out. class TestBootstrapper : DefaultNancyBootstrapper { public Action&lt;Request&gt; RequestInspector { get; set; } = _ =&gt; { }; protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context) { pipelines.BeforeRequest += ctx =&gt; { RequestInspector(ctx.Request); return null; }; base.RequestStartup(container, pipelines, context); } } By modifying `RequestInspector`, I can validate the values in the request.
Use an object pool, preallocate a large set of nodes, and provide a factory method that allows for node reuse.
I am already pooling my nodes, which cuts down on GC churn. However, even with pooling I compromise performance when trying to copy the data structure (have to individually find and copy each node). Also, pooled or not I expect that these classes will eventually get scattered around the heap and cause cache misses compared to a solid block buffer.
👆 since you clarified what you're using the data for, List.Insert( 0, latestValue ) will do exactly what you need. [Docs](https://msdn.microsoft.com/en-us/library/sey5k5z4.aspx)
&gt; CONSTRAINT [FK_AspNetUsers_ToTable] FOREIGN KEY ([Id]) REFERENCES [dbo].[Distributor] ([Dist_ID])); Your AspNetUsers.Id has to be set to a valid Distributor.Dist_ID You probably don't want a FK on your AspNetUsers table here.
FWIW, I use StyleCopAnalyzers on a fairly large codebase, and the code fix cleanups do awesome work. Now that I've gotten used to the style, the warnings rarely get in the way.
I'm not sure myself, since I don't use Resharper (I know, I know, shame...)
I believe you'll be battling this problem for the rest of your career, if you haven't been battling it your entire career already! This problem goes far deeper than ORMs. I believe its more about a philosophy of software development and our roles within it. &amp;nbsp; Most developers (and their immediate managers), are jaded or confused (at least, I don't agree with whatever philosophy they may have) about the role of a software developer. On the one hand, you have full-stack developers, who take the 'jack of all trades, master of none' to heart. Using this philosophy as their defending logic to stop learning about some computer science, and instead use it to learn some new framework or thing some *actual* scientist came up with. On the flip side, some developers will single out an entire application tier, and pretend nothing else exists (I'm looking at you, front end java-script/html 'developers'). &amp;nbsp; I realized, much like your rant, how 'swept under the rug' data layers are in applications written within the last twenty years. People don't want to take the time to understand the conceptual problem that is data-access. And how it relates to source code. Most people figure that a quick google search, some easy to plug-in source code, and they are off to the races. As a full-stack developer, you don't have time to *science the shit* out of software... you have to show results, as fast as possible (if you want to be noticed). Or keep up with / stay ahead of the curve of *modern* technology. The management level that means anything would rather you toil over getting things done-ish for production, by any means necessary. &amp;nbsp; From a business perspective, its more lucrative to put something in production no matter how special it is. The company will make enough money to pay someone willing to maintain it. That doesn't make it 'right', but programming is a *business* and computer science is a *science*. It seems the entire software development industry is asking you to be a scientist, but cut any corner necessary to be of monetary business value. &amp;nbsp; tl;dr &amp;nbsp; I should *end* my rant too, but hopefully you can see where I'm going with this. &amp;nbsp; I feel your pain, but keep at it - eventually you'll work on your own project and feel that sense of satisfaction. You might even be fortunate enough or find a company that *will* listen to your scientific suggestions.
Any time you make the computer do less work, you're making it faster. By compiling the .cshtml at compile time you're saving the server a task when that page is requested by the user. This is typically done, however, to be able to find view errors at compile time rather than have your clients find them at runtime. I'd question the motivation for the performance gain unless your company is getting some serious traffic. Edit: Look into [MvcBuildViews](http://blogs.msdn.com/b/jimlamb/archive/2010/04/20/turn-on-compile-time-view-checking-for-asp-net-mvc-projects-in-tfs-build-2010.aspx) for how and why this is done and look into [HttpHandlers](https://msdn.microsoft.com/en-us/library/ms227675%28v=vs.100%29.aspx) for how ASP actually builds and delivers a web page. 
&gt; All steps happen at runtime, but only once. Pretty sure this isn't true. Do you have a source? If I edit a .cshtml file on my running application it will deliver the edited document. I've always been under the assumption that the views are rendered at runtime upon request. The application .dll is loaded only once at startup. 
Did something similar years ago and parse the url string and use the *. as a variable add checks for length and store it encoded. Then have a db call based on that for what you need.
They are different. See http://stackoverflow.com/questions/597720/what-are-the-differences-between-a-multidimensional-array-and-an-array-of-arrays
Oh, I was referring to to the release version. There it should not work what you describe.
Source? According to [Microsoft](https://msdn.microsoft.com/en-us/library/ms227675%28v=vs.100%29.aspx) this does not appear to be the case. 
I'm talking about the release version also. I'm almost positive that .cshtml files are not pre-compiled. 
Wouldnt he have to do this at the DNS server level? 
This might not be the best solution but I think you are trying to do this : 1. Use a static array in your class. Static members are shared by all the instances of the object. 2. Construct and init your array in a static constructor 3. Place the logic for updating your array in the class. you will need to deal with concurrency issues there or make sure you call it only from one place. So the short answer is: static members are shared by all the instances of the object. 
I've been meaning to look into this. Does it do proper tail call elimination? Or does .net have the same limitations as the JVM with respect to tail calls?
&gt; Also, pooled or not I expect that these classes will eventually get scattered around the heap and cause cache misses compared to a solid block buffer. Hi, although I think that object pooling isn't the answer you're looking for (see [here](https://www.reddit.com/r/csharp/comments/439ovn/question_about_memoryblock_data_buffers_in_c_vs_cc/czgsyiv)) I should just mention that [objects allocated contiguously will be together in memory](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md), and furthermore that the CLR's GC is a compacting one, meaning that it minimizes heap fragmentation.
Looking at Nuget there are two BCrypt packages...which one is the good one to use? BCrypt.Net or BCrypt-Official? And what is the difference?
That was a really good read, thank you. It's good to know that pooled objects would stay together in memory, but if I have multiple pools allocating different objects interchangeably the resulting heap would have a bunch of different shuffled objects instead of one nice big block for the cache. The AllocHGlobal option looks like what I want. Is it better to allocate something on the unmanaged heap than pin something on the managed? Pinning looks easier and means I can still do managed stuff with the array, but I would guess that pinning could cause permanent fragmentation in the GC segments. Is there a cost associated with pinning/unpinning? All I would need to do is pin the buffer long enough to update the data structure, and then it would be safe for it to move around afterwards.
Yes /u/SuperImaginativeName is right, a MV* pattern is better. With that said, you're overthinking this. Let's borrow /u/SuperImaginativeName's pseudocode: public void ClickEvent(EventArgs e) { var pictureHolder = new PictureHolder(@"C:\photo.png"); pictureHolder.GetPhoto(); if(pictureHolder.Found) { //We found the photo! Form.Add(pictureHolder) } else { //We didn't find the photo. Tell the user? } } Your code will not move forward until pictureHolder.GetPhoto() completes. The above method also has a flaw. While pictureHolder.GetPhoto() is doing it's thing, your UI will be completely unresponsive. There are two ways to get around this. Implement async/await for your I/O operations on GetPhoto() or run it on another thread like this: public async void ClickEvent(EventArgs e) { var pictureHolder = new PictureHolder(@"C:\photo.png"); await Task.Run(() =&gt; { pictureHolder.GetPhoto(); }); if(pictureHolder.Found) { //We found the photo! Form.Add(pictureHolder) } else { //We didn't find the photo. Tell the user? } } Edit: Perhaps you mean the button doesn't necessarily create the PictureHolder, but simply adds it to the form?
Pinning is meant for very short-term operations, such as stopping memory being moved while it is in use by external code (i.e. msvcrt.dll's memcpy :P). But yeah, long-term, keeping something pinned is a really bad idea. I still think you probably want to use unmanaged memory here- what 'managed stuff' do you think you'd be lacking? You can still write a wrapper class around your unmanaged pointer and have it implement IEnumerable&lt;T&gt;; so as long as you're careful about not leaking references etc you can still get LINQ, for example... Edit: Oh, and the cost with pinning/unpinning is minimal in immediate terms; but doing a lot of it can hamper the GC quite badly, like you assumed.
Where in that link does it say otherwise?
The biggest incentive for me keeping it in managed is resizing. If the buffer is too small when I'm adding a new node, it's easy for me to just allocate a new buffer and Array.Copy() without the hassle. That isn't performance-critical. I'm thinking I'll just allocate my struct array normally in managed. Then when I have to update the structure I can pin it, manipulate all the data with unsafe pointers, and then unpin it.
Are you sure? I'll be doing all my reading/writing on one contiguous struct buffer pinned in memory. Unless there's something I'm missing. Am I wrong in assuming if I allocate an array of structs in managed that it will allocate them all in-place like in C++?
It fails because the way you set it up, the entry would first have to be created in the Distributor table before it's created in the AspNetUsers table. I would strongly recomend simply extending the default AspNetUsers table by adding the columns from the Distributor table to it. [This](http://bitoftech.net/2015/01/21/asp-net-identity-2-with-asp-net-web-api-2-accounts-management/) tutorial shows how you can extend the default IdentityUser.
Wpf? Win forms? Win forms: i just tell you the easyest way: drag the timer control in the form. Double click it (creates the tick event). Set your label text. This.Redraw() (or something like this)
This has stimulated great discussion at work. Good post. Thank you.
You may want to look at this nuget package.. Some thing we investigated when looking to share views between projects in a common DLL (but didn't end up using) https://www.nuget.org/packages/RazorGenerator.Mvc/
Yeah, BCrypt.NET does not work with DNXCore (.net core).
Hey, you're preaching to the converted man; but good catch
 * Make controversial post * Include expletives * Use false arguments * Include exaggerations * Refuse to back up arguments, respond to comments, generally do not engage in any kind of constructive discussion Post removed for trolling/shitposting. I'm all for worthwhile discussion and criticism of C# related topics. But this is not a discussion.
I use BCrypt-Official, as noted in the article. But I've used BCrypt.Net. In fact, I don't think I had to change any of the code when switching from one to the other. I'm not certain the difference.
It says in the article that you use Bcrypt.net but then in the instructions install bcrypt-official. Just thought I'd ask, thanks!
"What is faster, X or Y?" "Doesn't matter, they both return the same"
Once he sets the text (in the timer's Tick event), there's no need to do anything else to refresh the UI.
I love that we have so many cool .net versions of things. But could someone do me a massive favour and ELI5 what "Scheme" is?
If you change (or remove) the number, you get a different hash. There are no shortcuts generating the hash, that's why it's good for storing passwords.
A somewhat related, clojure on the CLR: http://clojure.org/about/clojureclr
A dialect of LISP. https://en.wikipedia.org/wiki/Scheme_(programming_language)
Thank you for the link. I have viewed this a couple of times. I am just having a hard time understanding how to implement that into the code that I am writing. Could you give me some pointers or additional help? It would be most appreciated :)
Store Console.ReadLine() to a local string variable. Declare an integer type. Then run if (int.TryParse(...)) with the string and integer parameters and the rest is simple logic. Best of luck
How are they generating those UML Database diagrams? I know this is a right click option in Visual Studio but I can never find it...anyone wanna throw me a bone?
Yes that worked! I am over thinking it and that might be the problem. How do I get it to ask again if the answer the user puts in is negative? That would be a while loop...right?
Yeah, I think you were assuming tryparse to be more complicated than it really is. Proper input validation, however, can be accomplished in a number of ways but I'd recommend in most cases to take the simplest, clearest approach. Specially for a beginner. int cowsSold; bool validCowsSold = false; do { if (!int.TryParse(Console.ReadLine(), out cowsSold)) { Console.WriteLine("that's a weird number of cows..."); validCowsSold = false; continue; } if (cowsSold &lt; 0) { Console.WriteLine("how can you sell negative cows?"); validCowsSold = false; continue; } //TODO: extra validations // every validation passed, make the loop exit validCowsSold = true; } while (!validCowsSold); It's a bit more code than actually needed but it's clear and you can easily reuse the pattern for other fields.
I am over thinking it for sure . Once seeing how you laid it out and executed it, everything makes way more sense. I do have one question though, when the user puts in a positive number it goes through just fine. When the user does not put in a positive number, it only throws the "how can you sell negative cows?" line. Everything is working perfectly :) I am just curious to what does the "that's a weird number of cows..." line do as I am unable to make the program throw that line.
lol, what makes you think even 1 person is going to click that link?
int.TryParse will return false if you input a string that cannot be converted to an int type. Try typing in "Androidguy10" as the number and you'll see it. edit: Maybe you're not getting the TryParse pattern in .net. Both int.Parse and int.TryParse will try to interpret a string and convert it to *int* but with a subtle difference: Parse will throw an exception if the value is not convertible to *int*, whereas TryParse will just return false and let you deal with the error without using exception handling. Invalid, non-convertible values for *int* examples: "Androidguy10", "anything that doesn't look like a number", "4.5" (*int* doesn't support decimal places), or "435435435345345353453453" (this one goes over the limit of the int type which you can get with int.MaxValue). The pattern applies to all types that implement it: bool.TryParse, float.TryParse, etc. 
Exactly. I made an edit that tried to explain it further but you got it already. :)
If you are going to put a //todo in the code, add a date stamp so we can be mildly amused in 10 years when we still see that //todo in the code. //todo add the /s to this post so they know I'm having fun. 1/30/2016
Thank you so much! :)
Just send them...
You aren't using TryParse in your code. From the MSDN public static bool TryParse( string s, out int result ) Where, s is the string you want to try and parse into an int. and out int result returns you out an int. The method returns true if s was converted successfully; otherwise, it will return false. You run it by using the out keyword when you pass the parameter. static int Cincinnati(int cowInventory) { Console.Clear(); Console.WriteLine("You're now in Cincinnati"); Console.WriteLine(); Console.WriteLine("You current Cow Inventory is: {0}", cowInventory); Console.Write("How many cows did you sell?"); Console.WriteLine(); var cowsSold = 0; var haveValidNumberOfCowsSold = false; while (!haveValidNumberOfCowsSold) { var s = Console.ReadLine(); haveValidNumberOfCowsSold = int.TryParse(s, out cowsSold); if (cowsSold &lt; 0 || !haveValidNumberOfCowsSold) { Console.WriteLine("Invalid number of cows, re-enter number of cows sold: "); haveValidNumberOfCowsSold = false; } } cowInventory = cowInventory - cowsSold; Console.WriteLine("New Cow Inventory: {0}", cowInventory); Console.WriteLine("Press any key to continue"); Console.ReadKey(); return cowInventory; } } That's not how I would write the method, but I've tried to break it down line by line so you can see what is happening.
Microsoft has hardly touched it in a long time, the blog is basically dead, etc. The thing is that there is no actively developed true alternative. I mean the "alternative" is WinRT, but do you want to develop Windows Store apps? I don't. 
Sending won't really be the problem. The recipient may block it though if you start sending thousands of emails. Your server IP could potentially get blacklisted. You could just send them and deal with that as it happens. Or use a service like sendgrid Edit: now I re read and saw your sending it directly to the same server. So yeah just send them. 
~~Metro~~ ~~WinRT~~ ~~Windows Store~~ UWP and WPF are basically the same thing, from programmers standpoint. Same XAML, almost same controls, same principles.
Well, OK, fair enough. But I feel a little wary when I see people say "hey, even if WPF goes away XAML will be alive and well because of Silverlight, WinRT, and a handful of other technologies that are either already dead or else gaining very little traction."
Look into [Parallel.Foreach](https://msdn.microsoft.com/en-us/library/dd460720\(v=vs.110\).aspx). This would allow you to send X-number of emails for each iteration through the loop. Using the basic example below, this would send out 100 emails at a time: var numEmailsToSendAtOneTime = 100; var parallelOptions = new ParallelOptions { MaxDegreeOfParallelism = numEmailsToSendAtOneTime }; Parallel.ForEach(recipients, parallelOptions, recipient =&gt; { SendEmail(recipient); }); 
Well, I'm graduating in June, and attending an internship on ASP.net starting July. I'm focusing on some projects at the moment, but my main focus will be the job opportunity after the internship. So, no time, or need (as I've been told) to dig into WPF.
For R# I `Alt + Enter` and `Ctrl + Shift + R` *everything*. For Visual Studio, I learn new shit on daily basis. No cheat sheet for VS I believe.
Control + shift+ alt with Up Down Left Right See you next time
You could have a look on some keybinds, there might be features you didn't know: http://visualstudioshortcuts.com/2015/
You can even set the built to compile them at build time if you want, so that the first view isn't slow. 
Another good resource: http://www.connectionstrings.com
https://www.jetbrains.com/resharper/documentation/documentation.html for more shortcuts! ;)
I guess the thing is that the niche for that stuff is largely line of business desktop apps, which is a dying class of application. 
One problem i've once encountered sending mass mails was filling the server capacity. I don't know if the server was misconfigured, but when I reached about 100 emails/second, the server acknowledged my message, received it and told my client everything was OK. Then it would reply with another email saying simply "server busy". This was a problem because, since it receives the message, it escapes any error-checking done inside my program itself. I don't know if your smtp server will do this, but it's worth keeping an eye on.
if you want an easy way to limit the amount of emails being sent concurrently, you can get the tpl dataflow package off nuget and use bufferblock like a channel to hand off emails to worker tasks. static void Main(string[] args) { System.Net.ServicePointManager.DefaultConnectionLimit = 5000; System.Net.ServicePointManager.UseNagleAlgorithm = false; Start().Wait(); } static async Task Start() { var queue = new BufferBlock&lt;string&gt;(); for (int i = 0; i &lt; 4; i++) { Worker(queue); } for (int i = 0; i &lt; 12; i++) { await queue.SendAsync("HEY"); } await Task.Delay(1000000); } static int workerid = 0; static async Task Worker(BufferBlock&lt;string&gt; queue) { var myid = workerid++; var sw = new Stopwatch(); while (true) { var next = await queue.ReceiveAsync(); var client = new SmtpClient(); client.UseDefaultCredentials = false; client.EnableSsl = true; client.Host = "email-smtp.us-east-1.amazonaws.com"; client.Port = 587; client.Credentials = new System.Net.NetworkCredential(userName, password); var from = new MailAddress(sentFrom); var mailto = new MailAddress(sentTo); var message = new MailMessage(from, mailto); message.Body = next; message.BodyEncoding = System.Text.Encoding.UTF8; message.Subject = "sent from worker: " + myid; sw.Start(); await client.SendMailAsync(message); var elapsed = sw.Elapsed.TotalMilliseconds; sw.Reset(); Console.WriteLine("worker " + myid + " took " + elapsed + " ms"); } }
There are a bunch of ways of doing this, but here's probably the simplest that uses your existing structure: Monster snake = new Monster(1, "Snake", 10); Monster centaur = new Monster(2, "Centaur", 15); Monster mummy = new Monster(3, "Mummy", 20); Monster dragon = new Monster(4, "Dragon", 40); var monsters = new List&lt;Monster&gt;() { snake, centaur, mummy, dragon }; // Double check the Random.Next() parameters -- var attackingMonster = monsters[randMonster.Next(0,4)]; attackPlayer(attackingMonster); What you're counting on here is that each of the individual monsters is just an instance of the Monster class-- so you can put them together in a collection and then select from that collection. Try working through this, and then go back to your code and think 'why am I putting all these monster definitions in code? Why can't I read the values from a file and have a single procedure create the Monsters collection. Also, a few quibbles: * The public members on your class should generally use Pascal case ('MonsterName') * The public members on your class should generally be properties, not fields. (public string MonsterName { get; set; }) It's not that big a deal though. 
I've tried both, it just beeped. Halp
What is this sorcery!? So useful, thanks!
There's just so many god! Haha thanks that's a great resource!
I did the pluralsight material but I'm still on the fence. Not sure if I want to spend the money. Thanks!
I use readit and was swiping on my front page and it loaded. It was a survey that led to a porn site. I came back to report the post and warn others.
&gt; Datasource="(local)" This is correct. It's the same when connecting to SSMS, you use (local).
Awesome! Thanks, I can't wait to try this out!
Snippets, macros, hotkeys, T4 templates, MSTest, VS power tools, web essentials, static analysis metrics, build metrics (via TFS / Team System builds) ... Tons to learn!
Don't get cocky, kid. I've had people like you come in and insist on an extremely complicated MVVM pattern. Because blah blah "you never know when you'll need a new pluggable view engine!". Ok so we overcomplicate our code, make it an asbolute disaster to maintain. 8 years later, still only one view engine. Don't overcomplicate your code kid. Your elders know more than you.
You might want to ratchet that down - maybe nobody on the other team cares what you have to say because you come off as a ass. Going back through your posting history it would seem that you have an attitude problem and ginormous chip on your shoulder. Maybe if you try approaching this in a different way rather than constantly spouting about lazy and jaded programmers you might learn something about human behavior. Programming in teams is a social exercise in pulling the best out of people that do not necessary see your way as the best way. People that can navigate those waters are incredibly valuable - those like yourself that simply down-talk those around them that don't work your one true way are nothing but a hindrance to everything. Your arrogance is fantastic in the solo-programmer and can even drive a small team over a short period, but anywhere you are pure poison.
Thanks for the feedback. I was trying to make it simple for the readers. However, if you provide a correct implementation I'll include it in the post.
&gt; in .NET's System.String implementation, two strings with identical contents can have different hash values, This is, at best, misleading. What you say is only *possibly* true *across different versions of .NET* (see the Remarks section here: https://msdn.microsoft.com/en-us/library/system.string.gethashcode(v=vs.110).aspx). So you'd have to store a hashcode-dependent data for a string with vX, then the .NET team would have to ship a different GetHashCode implementation in vX+1, then you'd have to retrieve your vX data and compare it to a vX+1 hashcode-dependent data. It's something to be aware of, but not something most people will ever have to worry about and definitely not something you should ever bother coding your GetHashCode function around. If that's going to affect you, then it's almost certainly better-solved with a careful migration plan, not super-specific code (because if even one GetHashCode override got it "wrong" along the way, you're hosed and need that careful migration plan anyway). I say "at best" misleading because it's definitely wrong within a single version of .NET. Hashing collections like Dictionary and HashSet very specifically rely on GetHashCode being identical for two things that compare equally. To detect collisions, they GetHashCode and mod to a bucket and then, within that bucket, compare Equals. If two things that compared Equals didn't return identical hashcodes, such collections would have some really weird behavior. It would be a very serious bug if what you say was generally true for strings. 
You're totally right, I brain-farted. `string`s with equal values are guaranteed to have equal hash codes on a per-AppDomain basis.
You typically xor the hash values of all the user-settable properties together. return Name.GetHashCode() ^ Weight.GetHashCode(); 
If you want to get into sql I'd recommend checking out [KhanAcademy](https://www.khanacademy.org/computing/computer-programming/sql.) Edit:Formatting
It would do good for you to correct your comment.
Aaron does it correctly [here](http://www.aaronstannard.com/overriding-equality-in-dotnet/). He also makes a *very* important point: override `GetHashCode()` *only* if your object is immutable, because otherwise its hash code will change when its properties are modified, which will cause lots of weirdness with containers and may cause them to barf exceptions.
do I still keep this block if I use an array of objects? Monster snake = new Monster(1, "Snake", 10); Monster centaur = new Monster(2, "Centaur", 15); Monster mummy = new Monster(3, "Mummy", 20); Monster dragon = new Monster(4, "Dragon", 40);
Ok so you sound like you're one of them. For starters, I don't introduce patterns unless they're solving a problem that we already have or unless they're setting us up for a business requirement that reaches beyond what we're trying to accomplish within that sprint. I often try to prevent product from driving us down roads like creating a CMS without management first acknowledging the implications of that kind of thing. I'm not the "do the buzzword" type developer that you seem to think I am. At all. What I do tout, however, is not being lazy. If creating testable code means that you should be building classes to receive dependency injection, then just do it. It doesn't even take any extra time, you just change your "go-to" method for how you initially model something. Easy. Now if something is going to require that you rip down an entire section of the code base and re-do it over the next 4 sprints, then ok -- maybe there should be some discussion. Overcomplicating our code... ok this is the subject I really wanted to talk about. The instances that I'm referring to are when some attempts to avoid overcomplication and then ends up making it 10x more complicated as a result. For example: to avoid having to introduce an abstraction, someone chooses to write a 500 line switch statement complete with nested if/then trees that really just runs variations of the same type of operation in different ways depending on a single input -- instead of implementing say... a strategy pattern. Now, 3 years later, it is nearly impossible to modify that cluster fuck because everything is so tightly woven together. When we try to add another 'strategy' to it, it affects the whole block and it just grows and grows. Then to avoid abstracting access to an appropriate layer or even introduce a filtering pattern, they decide to weave into that ball of mud ALL of the conditions that affect the output. When I see this kind of garbage in code review, I usually begin with "there is too much going on here; it needs to be broken up." And of course, I am met with the old "dont over-complicate it" argument. If you think that is right, then I don't know how to talk to you. "How is this less complicated?" I ask. "Because it's easy to follow and all of the code is in one place." THIS is what I'm talking about. So they built a house of cards and you want to sell to me the idea THAT is more maintainable than breaking out each case into a strategy that is loaded up by a factory? Because 10 files = more complex than 1, 500 line switch statement? Meanwhile, Visual Studio's cyclical complexity is through the roof, and ReSharper is literally screaming "I seriously can't even." I'm also not a kid. Assuming that I am really just tells me that you're the ass that doesn't like to be shown he's wrong. And in my experience, my elders do know more than me, but through contact experience alone. They have seldom contributed anything more than their time. But I digress, every once in a while, you meet someone that has been doing it forever and kept up with the times and can see these code smells from a mile a way. I love those guys because I actually learn from them. I am cocky. Mostly because I'm constantly putting other people's fires while they collect their paycheck. 
Alright, back the hell up, This isn't the workplace; it's Reddit. The way that I verbalize my frustration isn't how I necessarily interact with people face to face. You have no way to know that based on what you read from me, so I can't hold that against you. I AM however sick of working with lazy jaded programmers, so I do bring that up from time to time when I smell it rearing its ugly head. Also, this post IS me trying to navigate this topic. I asked what you were thinking when you find yourself discussing this topic, I did not make post title "fuck off lazy programmers". I reserve the right to bitch about it outside of the workplace. If you don't like it, don't reply. Also, I don't interact with "the other team" much, and I get along with all of them, swimmingly. I'm just a consumer of their systems, and I'm constantly watch it either fall apart, take months to do what would take us days on our side (partly because of the design, partly because unmanaged code and the nature of that team being waterfall up until recently), or otherwise block us. Now let me back up. I am a military man and I was raised in a military family (2, actually). When we had a weak link, we beat their asses back into line; we didn't have the option of letting someone go and we didn't have the option of becoming complacent in what we do. I know this doesn't translate well back to civilian life, and I struggle with that -- hence my constant frustration and the post. It is a legit question, me asking why is it so popular that people immediately err to the side of shortcuts before trying to understand a less-than-straight-forward solution to a complicated problem even when there aren't any significant time constraints? And then when you constantly choose the solution that ends up screwing everybody including yourself, why do you continue to choose that path with each future decision? It seems insane to me! This is what I'm asking. I do find it a bit upsetting that simply asking the question sets people off. I also have a way with words. Apparently I have this talent of being able to make even a compliment sound like a slight on one's entire family. Actually working with me isn't any harder than working with most anyone else, so there's not call to get personal. 
[answered here](https://www.reddit.com/r/csharp/comments/43432t/new_to_c_testing_what_test_library_and_mocking/czieb24)
+1 thank you. This is probably the best opinion I've seen on the subject in a while.
It works, but most authorities recommend something like return Name.GetHashCode() * 7 + Weight.GetHashCode(); Or similar, for some not too high prime number. 
Also, since mscorlib is loaded in the domain neutral context, string instances are actually shared across all domains. 