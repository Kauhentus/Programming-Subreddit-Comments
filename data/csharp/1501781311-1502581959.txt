Find anything this person has written and read it: https://twitter.com/julielerman
OP might be randomly generating codes and wants to filter out randomly generated words
base36 would save you very little, if any at all (due to rounding off to bytes), over base32
Totally unrelated, but if you expect that "port" may be null but never empty, you can use: &gt; port ?? "Not Set"
I *can* contain myself. I guess I don’t really find the concept of running a random terminal program inside Visual Studio freakish. 
As I understand you can't slow it down either way. It should always produce IL output in linear time. Slow compilation is more depending on resources and such.
&gt;Only posting the parts Im kinda sure arent flawed That makes it rather difficult to get help with the parts that are probably flawed, no?
&gt; var svr = Properties.Settings.Default?.SMTPServer; You can also do something like this with the null propagation operator. 
You asked: &gt; How is it my mistake that this code is being executed before the objects are initialized? It's not! It's intuitive to believe that all controls are initialized, THEN the program starts running. However, technically, that's not the case, and we all get bit by this behavior at some point. You're not the first person to have this problem and you won't be the last. "Initializing" a control happens by calling the parameterless constructor then, in some order, setting the properties and event handlers on that property. So if you have property change handlers connected to a control, you will get a lot of change events at program startup. Unfortunately, if one of those change handlers was set up early in initialization, not all of the controls will have been initialized yet. So again, everyone gets burned by this, and learns a golden rule. **If you have change handlers that reference other controls, they can be called during times when not everything is fully initialized.** How do we fix it? Well, you could defer setting up change event handlers until you're sure everything's ready. That means either putting them at the end of your constructor, after designer code, or handling some after-initialization event like Form.Shown. That's pretty inconvenient, though. In WPF, that means you can't let yourself set up the event handlers within XAML. In Windows Forms, that means you can't use the designer to set up event handlers. It's too tedious for most people, but makes a quick fix. Another approach is to have a flag at the class level with a name like _isInitialized. Each event handler will return if that flag is false. The flag should be set to true at the end of the constructor or after an event like Form.Shown or its WPF analogue. This is more convenient than the last suggestion, because you can still use the designer to set up your event handlers. Unfortunately it's tedious to remember to put the boilerplate in every event handler. (This has a variant: you could just check if the controls you need are null and do nothing if they are.) Both of those techniques have another issue: if control B's properties need to be set based on something related to control A, they'll be in an invalid state if the changed handler doesn't run. So deferring the event handling to post-initialization means you have to write post-initialization code to clean up all the things that didn't happen because change handlers weren't ready. Yuck. A lot of people use Presentation Model patterns like MVVM, and it presents another solution to the problem, but if you aren't used to thinking in terms of these patterns it can seem needlessly complex. It's useful for a lot of things, and sort of incidentally solves this problem. Let me describe briefly. In this pattern, you would have some ViewModel type for the settings. These always implement INotifyPropertyChanged, for brevity I'm not going to post much of that implementation and I'm only going to have one setting. public class SmtpSettingsViewModel : INotifyPropertyChanged { public SmtpSettingsViewModel() { // This is how constructors can set "properties" without raising change events! _serverAddress = Preferences.Settings.Default.SmtpServerAddress; } private string _serverAddress; // Some syntax sugar for INotifyPropertyChanged is about 10 years overdue! public string ServerAddress { get { return _serverAddress; } set { _serverAddress = value; Preferences.Settings.Default.SmtpServerAddress = value; RaisePropertyChanged(); } } } OK. So you've got that. You've also got some Window, which I'm going to assume is a kind of Options window. It has a checkbox that says "Use Settings". When it's checked, you want some TextBox associated with the SmtpServer setting to become enabled. If the check box is disabled, you want this text box to be disabled too. (This is a little different from what you have so far, but I think you'll find it similar.) So the Window needs a ViewModel with a boolean property "UseSettings". Since it has UI that works with SMTP settings, it also needs to keep track of an SmtpSettingsViewModel: public class OptionsWindowViewModel : INotifyPropertyChanged { public OptionsWindowViewModel() { _smtpSettingsViewModel = new SmtpSettignsViewModel(); _useSettings = Preferences.Settings.Default.UseSettings; } private SmtpSettings _smtpSettings; public SmtpSettings SmtpSettings { get { ... } set { ... } } private bool _useSettings; public bool UseSettings { get { ... } set { ... } } } Now we're cooking. We need to bind UseSettings to the checkbox's IsChecked property. But we also want a TextBox for the server address to be enabled based on that checkbox. Instead of using event handlers, we ALSO bind the TextBox.IsEnabled property to that! So ignoring all sense of UI design, we can use XAML like: &lt;StackPanel Orientation="Vertical"&gt; &lt;CheckBox IsChecked="{Binding UseSettings}" Content="Use Settings" /&gt; &lt;TextBox Text="{Binding SmtpSettings.ServerAddress}" IsEnabled="{Binding UseSettings}" /&gt; &lt;/StackPanel&gt; You have to set the binding context somehow, for this example assume the Window does so in its constructor: public OptionsWindow() { DataContext = new OptionsWindowViewModel(); } Now we don't have any problems with order of initialization at all! When the Window is initialized, the BindingContext may not be set. So all of the bindings will fail. So the Window might start with the check box unchecked and the text box empty and disabled. Then the OptionsWindowViewModel is created and its properties are initialized based on Preferences. Then the DataContext changes, and all the bindings update. Everything's initialized, so everything is fine. If it happens in the other order, things are still fine. The OptionsWindowViewModel is created and the DataContext is set. If the TextBox initializes before the CheckBox, it doesn't matter because it's asking the already-initialized ViewModel for the status of UseSettings, not the CheckBox. Likewise, if the CheckBox is initialized first, there's no change handler that has to double-check if the TextBox exists yet because that binding isn't there yet. Change handlers have to be set up during initialization, which means you have to worry about what happens if you aren't fully initialized yet. Bindings safely handle this situation AND update themselves properly in a way that doesn't rely on order. They're a much safer way to update your UI. 
Was more of thinking of advice on how to approach this based on the Node.JS stuff, but you right, that could be helpful. My Idea was that my current approach is flawed and far from working anyway, but perhaps it could be a minor Issue? No idea, edited them in :) Thanks!
Ohhh interesting point! I just did a quit bit of math and came up with a maximum savings of 9% (4 additional chars) I figure it probably isn't going to be worth the effort (: Thanks for your comment. 
There's a near ~zero chance that Default settings will be null, and it won't provide him with a fallback value. Not applicable in this particular instance, but I agree it's otherwise a nice thing to use.
Not a problem. I found out about it when a job using Resharper refused to upgrade laptops and Resharper made VS crawl to a halt.
&gt; txtSMTPPort Yeah you are right most likely txtSMTPPort is what is null in this instance.
Well I feel dumb, was sitting here hitting 'Ctrl' and the '+' key wondering why nothing was happening. Thought that coma was just part of the sentence...
I use the VSCode console for source control (git)
It's something like, right click the project on the solution explorer &gt; properties &gt; default namespace ( top right )
That method should work and return the same values as the unsafe cast. What do you mean by "appear to be junk"? Are the results different than from the unsafe variant? Interpreting a float as an integer will naturally produce seemingly nonsensical numbers.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/unity3d] [Help making unsafe code safe \[x-post from \/r\/csharp\]](https://np.reddit.com/r/Unity3D/comments/6reqq9/help_making_unsafe_code_safe_xpost_from_rcsharp/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I meant that the results appear to be different from what I get with the unsafe code. I admit though I've been testing kind of indirectly, I'm doing some proper testing now to be totally sure, but I can't really see how it could be working since all I've done is replace the one offending line with the code I posted here. I'm sure I'll be back in a few minutes to rant about what an idiot I am though! Thanks for reading the post and taking the time to respond.
What platform are you testing this on? Maybe there's an issue with endianess. Or perhaps Unity doesn't properly support struct layouts on all platforms, but I wouldn't know anything about that. Other ways of accomplishing this would be to use `BitConverter.GetBytes`/`ToInt32` or a `BinaryWriter`/`Reader`. These would be comparatively slow of course.
Another approach might be to use the BitConverter class. Something like // Convert float to an array of bytes var bytes = BitConverter.GetBytes(someFloatValue); // Convert an array of bytes to an int var value = BitConverter.ToUInt32(bytes, 0);
Yeah, I originally was using BitConverter but switched to this method because it seemed like it would be way faster. These are the results I'm seeing: unsafe: 213.1235 =&gt; 1129652000 safe: 213.1235 =&gt; 1129652126 They are fairly close but something is definitely going wrong.
Thanks, I was doing this but I was searching for a faster method since this happens many times per frame. The faster the better. I may have to resort to this though and leave the unsafe code is an option that users can enable if they want to go real fast.
I'm testing on Windows 10 btw. All on one computer so far so there should be no issue of different endianess at the endpoints at least. I'll do some googling about struct layout in unity.
&gt; I would like to create something similar for fun, a visual-studio plugin (or a website etc.) which lets the client run their code against certain tests and see weather they have passed or failed. But why? Literally every project out there will have its unit tests as part of its code base in a test project. What does running them over the internet give me?
Isn't Package Manger Console, aka PowerShell, a good enough terminal for VS?
Can you just provide the PDF? I don't really feel like creating an account on the site, since I'll never use it again.
You win, it works perfectly, I was just testing wrong! Thanks again for your help.
Can you link what you read about not using it inside a webapi? Just curious...
There you go! Sorry about that, I didn't realize that you need an account to view the ShareLaTex, my bad. https://github.com/TheBlackCentipede/Optimizing-Mono/blob/master/Optimizing_Mono.pdf
Wouldn't it be easier to simply spin up a Node.js server locally in order to run the module that already exists?
Because it's a linux binary I guess.
Because it doesn't make sense, does it? Think about it? Your ASP.NET application lifetime is pretty much the length of the request plus some indeterminate amount of time. So anything from a few seconds to a few minutes your FSW is going to no longer be running.
&gt; I think you're projecting your cultural bias onto his comment. It is blunt and to the point, explaining what mistakes you've made and how to approach solving the issue. Mm, I don’t know, I tend to agree. It’s the bold text mostly :p. I guess I could have written it in the same way, but after reading it, I am glad I didn’t. 
What’s wrong with you guys? Chill already...
This is all good good advice but... yeah, that particular exception type should really never be caught. It’s a bad idea that will hide bugs.
I'm using the same principle to generate a changeToken in my API so I can touch a system file and expire cache items. It works fine and I'm just curious if there could be some performance problem because of it... var changeToken = new PhysicalFileProvider(webRoot).Watch(pathToFile); var options = new MemoryCacheEntryOptions().AddExpirationToken(changeToken); inMemoryCache.Set(key, value, options) 
I use sourcetree. It has a console too. 
I'm curious how the files are getting added/deleted. Is this done via the Web API, an FTP drop, or something else? If via the WEB API then you could latch on to the methods responsible for the adding/delete. 
When you've received data from the Riot API about a notable moment, begin recording your screen. Potential problem is delay
The files are added by a service called [Mylar](https://github.com/evilhero/mylar), which downloads the files to the watched folder. I will most likely add the ability to upload through the API later, but at the moment it's just an outside program doing the adding.
I would write a separate windows service that watches for new files coming in, and then have it make a call to your web api to let it know when new files arrive. If you're worried about what happens if your service goes down and new files come in, you could always have your service run a check on startup - it can get a list of the files in the drop folder, ask your webapi for its list of known files and compare the two - if there's any new ones, then make the call - then the service can continue watching the folder for more new ones. You are correct to say that having long running tasks in a web api is a bad idea. The application pool runs only when there are clients. if noone accesses your web application in 20 minutes, then IIS will stop the application pool, and your FileWatcher also will be stopped. [More info](https://stackoverflow.com/questions/23459715/use-filesystemwatcher-in-asp-net) [There are ways, but use with caution](http://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx)
I just want to say, "I love you, man." Intellisense nuts up on me when working with cshtml files. It pops up for half a second then goes away. So much frustration ... gone. I'm having a one-man nerd party over this fix!
It looks like the unsafe code you're working with is designed to provide half precision floats (presumably for performance). Your replacement is using regular floats, that's why the results are different. Is that bad? Would lopping off the extra precision be worth it, since it'll only make things slower in the safe version? Taking that a step further, you might be better off skipping that all together and use regular floats throughout. It seems like using a safe version of the library will be slower than not using it at all.
The first thing I would have done is put a break point on your chkUseSettings_Checked method, and then you can mouse-hover over your objects and actually SEE what is null - and chances are it would be txtSMTPPort. It is good that you figured it out, but really you don't need to - break points and the IDE are your friend here. I am assuming that this is all "code-behind" in the xaml.cs file. This is just a bit of advice from an old hack - I came from a VB6 background and so when I switched to using wpf and xaml, I also did all my logic in event handlers in the code behind. However, very soon I began to realise that this isn't where wpf shines at all - I would strongly advise getting into MVVM and creating ViewModels to separate your logic from your views, and enter the beautiful world of data binding in xaml - it's a tough hill to climb but the view from the top is much better! Cheers 
Very unlikely that whole range will be in visible range. Divide your space into regions and use current region local zero point and transform coordinates for neighbour regions.
I haven't played or heard of the game. Why do you need such large numbers? &gt; float has more precision than I need in practice If you don't need precision I would personally just create the class myself. I did a quick search, (because it piqued my curiousity) and stumbled across [this](http://uberscraper.blogspot.ca/2013/09/c-bigdecimal-class-from-stackoverflow.html) It might not be performant, but you could maybe replace the big int with a float and get more out of it perhaps. 
Try to teach them how to implement simple 2D games using something like MonoGame http://www.monogame.net/ . There is also a course about learning C# through MonoGame on Coursera https://www.coursera.org/learn/game-programming that could give you some suggestions on how to approach the subject.
I'm not really sure what you're suggesting ... the nature of this game is that you start off earning 0.xx/s and end up earning / spending x+e^thousands of dozens of different resources. edit - for anyone up-voting this answer ... I'd be really interested to learn how you think it'll work. Say I want to add 3.4e20 to 0.04 or divide 5e3000 by 4e30 ... what does the internal structure of a number struct (class?) built to handle these operations *look* like give the 'regions' concept? 
&gt; Why do you need such large numbers? Because I can't build the game without them ;) &gt; I did a quick search, (because it piqued my curiousity) and stumbled across this Quick test shows the performance is about the same as using BigInteger ... not sure if it could be made to work with a float mantissa ... will give that a go if no other sensible options come up! Thanks. 
&gt; Why do you need such large numbers? &gt; Because I can't build the game without them ;) what does the game do with those numbers :p
Half precision floats aren't used for performance, in fact they're much slower since they typically don't have hardware support like singles and doubles do. Regardless, the safe `struct` variant should should perform about the same as the `unsafe` one.
Can't help you specifically on the subject, but you might find some additional help and development resources at /r/incremental_games. If you x-post the question there, or ask in one of their relevant weekly threads, you might get some good advice. They have to deal with such things fairly often.
make *even bigger numbers*.
Hi, I post a lot in that sub / have developed a couple of incremental games (Swarm Sim is also in the genre) ... this is new ground in C#
Bit of a newbie here, but wouldn't it be better to keep track of what "tier" of number they're on? Then you could use much smaller numbers to represent it instead of running calculations on enormous numbers every tick. 
Sounds like you'll need to poll the directory for changes or instead of uploading the file through the api you could hook Mylar to call a url in your app that just tells it there's a new file to see.
Perhaps you could store the large number as separate values? I was thinking something along these lines: MyNum = myVariableNum * 10 ^ myExpFactor My myVariableNum would be a number associated with the characters health. MyExpFactor would be a number used to track if you're in the 0.001 place or into billion of billions. And myNum would be the ultimate number that you'd calculate to, if needed. So for example if you had a character that did 10 damage total, it'd be 10 * 10 ^ 0. A character that did 134,000,000 pts of damage would be 134 * 10 ^ 6. And so on. The nice part about this too is it might make it easier to track damage to your characters. So if an enemy does 134 * 10 ^ 6 damage, and your character has 200 * 10 ^ 6, you could just do (200 - 134) to get the characters health after the damage is taken. As long as the myExpFactors match, you can do that. Then when it comes to saving, you just save myVariableNum and myExpFactor. You'd probably have to massage this a little bit for your use case, but hopefully it gives you some ideas! 
You should find the same problems in say, JavaScript. Fundamentally, both have the same floating point precision issues (more or less). There's nothing particularly "new ground" about C#.
It's 'solved' in decimal.js in the original web game ... but that has nasty performance issues as well. The reason all of these solutions end up being so slow is because there's a sort of gulf in number support between *double* and *arbitrarily-large, often with arbitrary precision*. 
That's basically what floating point numbers do. You store the mantissa ("smaller number") and the exponent ("tier") to represent the actual number as `mantissa * base ^ exponent`.
Look into quadtrees. The are commonly used in game dev when updating large areas and/or large number of game objects. https://www.gamedev.net/articles/programming/graphics/quadtrees-r1303/
I've been working on a "next-gen" version of my 3D graphics library [Veldrid](https://github.com/mellinoe/veldrid). This is the library that I used for rendering in my game CrazyCore which I [blogged about](https://mellinoe.wordpress.com/2017/01/18/net-core-game-engine/) a while back. I added a bunch of features to the library, including a full-featured Vulkan backend, in addition to the Direct3D 11, OpenGL, and OpenGL ES backends I already had. Overall it was quite a lot of fun, and I was surprised by how easy Vulkan is to work with. I wasn't brand new to the API but this is the largest thing I've written using it myself. Next, I may go back and update my game engine, and see how well things run with Vulkan support.
That's what the float mantissa / int exponent idea *is* - the float is the 'small number' and the int exponent the 'tier'. The hassle comes from needing to re-implement all the standard arithmetic functions - feels very heavily like reinventing the wheel. 
I think this is the float/int mantissa/exponent idea I mentioned ... right? 
Could you explain how quadtrees are relevant to the problem (frequent massive number calculations with better performance than BigInteger) ? 
I was just explaining what u/Rambalac was talking about. If you had to display a lot of game objects on a single screen, and you couldn't render them all, you would render things as blobs and might be able to use quad trees to zoom in on them. Nothing can probably handle the numbers you are talking about, but that's what quadtrees are used for.
Is The decimal type not an option?
You don't need to do that for large numbers. You do everything in region local coordinates which are not that big. 
ever heard about decibels?
Sure, why do you think they're relevant to the problem? 
decimal range is much smaller than double.
because log(e^4000) is just 4000 
Yeah I think you're right. Sorry, the mantissa part of your post didn't click right away for me. I think that ultimately the solution is going to come down to breaking down the number into smaller chunks. It's just a matter of how you want to hold that data in memory. Another idea that comes to mind (and this is just off the top of my head) would be to split the large number out into sections and store those sections in an array. For example, 1,998,890 could be (starting at index 0) [890, 998, 1]. The maximum of each slot could be 999, and when that hits 1000, youd set that index to 0, and increment index + 1 by 1, and so on. So, as an example of taking damage if the character has 129,001 health (stored as [001, 129] and they are dealt 9,999 damage ([999, 009]), you'd start at index 0, and work your way up until you reach the max index of the damage array. It's probably go something like this: For(int I =0; I &lt; damage array.count, i++) { Var health = healthArr[i]; Var damage = damageArr[I]; If health - damage &lt; 0 Health += 1000; // borrow from next array HealthArr[i + 1] = HealthArr[i + 1] - 1; HealthArr = health - damage; } So you'd get 1001 - 999 ( by borrowing from next array), and 129 - 9 - 1, giving you [002, 119] as your health array at the end. Or something like that (sorry, I'm typing this on my phone). There would have to be other checks to check for character death states (like if you can't borrow and there's too much damage). Thoughts? 
&gt; Nothing can probably handle the numbers you are talking about The link in my post handles it, there are several other solutions ... they're all just really slow because they use BigInteger / string operations under the hood. 
How many different math operations do you need to do with them? Like mult, div, add, sub, isequal, etc..? If it's too many different types, you may have issues making a good class since a full math library can be pretty hard to properly test and debug (stuff like how 0.1+0.2=0.300004).
Make a calculator
&gt; You don't need to do that for large numbers The examples are both entirely possible in the game. edit - for anyone downvoting please explain why.
&gt; Thoughts? :) imagine how complicated this would get to do something like 32423432424234 / 2325334234 ... and that's about as simple as it would ever be.
ok ... I think I'm gonna need more of a hint here ;)
IMHO it comes down to spending time writing code and solving problems. Build something just out of reach of your current skill level, and then do it again. Keep doing that until you grow comfortable with concepts like inversion of control, dependency injection, proper use of interfaces, how to follow MVVM or MVC, why you should, etc.
Haha, well you got me there. Out of curiosity, what game mechanic uses division like that?
From my experience of getting a job without a degree, you need to show a good-sized body of work that demonstrates best practices. Some places look at your Github profile to see what you've done. If you go that approach, I recommend you mess with C# for a while longer (two months isn't enough yet) and really get to know the language. Understand the basics, many of the details, and try to create projects that show a solid understanding of SOLID principles, issue resolution, and documentation. I would start with a trivial program but then move on, tie it into your passion outside of programming (for me, it's writing and games). The main part is show it, not only once but over time. The only way to get good at any language is to keep doing it over and over again until it becomes second nature.
Looks like that's too early for you.
This is normally addressed by using a prebuffer. Record to a 3 second FIFO queue all the time, and commit the whole buffer to disk on event (notable moment). Since it will only be a screen, this can easily be buffered to memory.
Oh, that's right.
You could run a separate service (as a scheduled task or a Windows service - the former is easier to set up) which polls the directory and updates the database your web API is connected to?
I hink (s)he means Decimal. Its a 128bit floating point that uses decimal exponents, but it focuses on precision rather than range. Switching to another base than 2 also helps very little btw, because logs of different bases only differ a constant multiple. 
If you're dealing only with exponential growth there's another option: Just store the exponent as int, fix your choice of base as constant and do all your calculations directly on the exponent. Then you can write a routine that prints the number in a slightly higher/lower base so that you can also display some digits.
No idea. Performance maybe? It's terrible UX off though, and I always enable it and it works just fine.
&gt; have it make a call to your web api to let it know when new files arrive. I didn't even consider this ... well done, brain! But this does this like it'd be the best solution. This way it's also easier to port the project to linux, all I'd have to do is replace the windows service with a linux ecquivalent, thanks! :)
Do your numbers have to be completely precise? Can you get away with storing the log of the value as a float? What about throwing away the less significant digits, and saving an exponent integer and a significand?
I've seen people that don't take advantage of async tests. So They'll write a synchronous test that calls something like `SomethingAsync().Wait()`. So maybe if you see a Task.Wait() or Task.Result, they should consider switching to an async test?
As usual? I'm sorry, who are you to say that to me? I don't know you, you don't know me... lets keep the ad hominem out of this shall we?
To format code on Reddit properly you need to: - Have one empty line before code and some text. - Have one empty line after code and some text. - Indent all lines with 4 spaces.
This is typical when I interact with the C# community. Apparently I'm lazy, stupid, make no effort, take no responsibility... par for the course I'm afraid
Yup everything's my fault. I'm even responsible for you having made the decision to insult me like this without any reason to do so. 
Use Fiddler and have a look at what each is sending. I suspect RestSharp is encoding the parameters differently by default.
A lot of malware developers embed an executable and later inject it from memory into another process, essentially hiding the embedded executable inside a legitimate program. Since you're not supposed to do this, I'll simply suggest for you to copy the file from your resources to the disk or bundle it with your software (if licenses allow this). Another way of embedding an executable is by injecting it into your own process although even this is sure to raise some eyebrows. Especially an antivirus might look at this and say, hmmm.. this isn't right. It can be done, especially if both executables are written in .NET. First there's a method inside AppDomain you need to use to Load the assembly. This takes a byte array as a parameter so you need to read that array from your resources first. Then can execute it. Plain and simple. Snippet: AppDomain.CurrentDomain.Load AppDomain.CurrentDomain.ExecuteAssemblyByName 
I didn't mean it to be personal, sorry it looks like it to you. I see this all the time: people ask a question and get an answer. Then they turn to say "ah, x (in the answer) doesn't apply to me because y", where 'y' is not in the question. Asking good questions is not easy ;-) 
No, I think they do mean decibels. Decibels, or dB: &gt;a unit used to measure the intensity of a sound or the power level of an electrical signal by comparing it with a given level on a logarithmic scale. (in general use) a degree of loudness You can use logarithms with the exponents to mame larger numbers. How exacty, I'll leave to others to work out.
People are trying to help you here, but you're not listening to them. When people ask "why do you need this ability in your game?" And you answer with "because I cant build the game without it".....thats not helpful. You need to help us to help you. It is VERY unlikely that you're updating billions of objects in each update frame, the game would grind to a half, so WHY do you need such big numbers? Are you displaying this number on screen? Is it an array size? Is it a score? If it's just a number you're displaying on-screen, ask yourself if there is another way around it. What is the REAL difference between writing var mynum = 47e987654; console.write("number:" + mynum); And var num = 47; var exponent = 987654; console.write(string.format("number:{0}e{1}", num , exponent); Stick that in a loop that doubles it every time, and the only difference , as far as the user is concerned, is that one of them took a lot longer to run because there was a crapload of calculation and memory assignment going on. Remember that half of the challenge of programming is finding a creative way around your restrictions. Half of the challenge of GAMES programming is convincing the user that you're doing something far more complicated and impressive than you really are. See also :pre-baked textures Again, tell us WHY you need such big numbers, that nobody has ever needed before, and we can maybe point you in the right direction.
I got a bigfloat class laying around somewhere that I had good luck with. Want that?
are you able to please further elaborate on your problem?
Related, `async void` should be an error. Symptoms are 3sec test run lengths and random failures.
Thanks for the input! Yeah me too. So do you have eg repository with a method called `public CustomerDto GetCustomer(int id)` where the actual return type is the DTO? That's the approach I'm taking, and then the services call those methods and map the DTO's to service layer domain objects.
Ooooh, nice! OK this is the push I need to give xUnit a go. +1 for it being in the main package. NUnit has a runner that displays results in VS's Test Results panel, does xUnit?
Don't forget GetAwaiter().GetResult() which is actually the recommended way of waiting on a task if you truly can't use async await, eg the main method.
xUnits documentation is awful. If you ever want to expand it, you have to dig through a deep pile of shit.
I would maybe consider adding units to your numbers, and then just using regular double arithmetic. I don't know what the thing is you're growing, but lets pretend it's "widgets". Once you reach, say, 10^21 widgets, divide all numbers by 10^21 and start counting in "superwidgets" or whatever. You don't have to show this to your players, this could purely be a abstraction inside your code. The ideal would be some kind of "BigFloat" class, but I don't know of any off the shelf ones for C#. 
By "handle it" he meant "including at the speed you want".
I used it at one point... abandoned it fairly quickly when I realised how little it does for you and how much it limits your options. Wrote a couple of short methods to handle my typical get/post cases and got on with life.
Yep, but you need to switch out of Visual Studio to do so. I generally use the team tools in VS or the console. Source Tree took a downwards turn months ago and I've given up on it. Members of my team use Source tree with no issues though.
Please learn the REST Apis and write one. Hypothetical scenario: Classroom: Add students ( birthday, gender, taken classes( can be update-able)) And write get and post codes. With auth tokens.. Learn Rest Apis.
No they don't ... As per my my post a float mantissa will give more precision than I need and int exponent more range. 
The reason they need to be numbers is because I need to do + - / * calculations on them. The result of these calculations are displayed on screen. Same as every other game ever made ... Just with a much larger potential range. edit - [here's](http://imgur.com/a/rb1I7) a screenshot of the web (JS) game (this is after months/years of playing) for more context.
Yes please! 
Introduce a private ~~class~~ struct. It's that simple. Or alternatively, if you want awful and unreadable code, you can use the `Tuple&lt;&gt;` class.
&gt; Remember that half of the challenge of programming is ~~finding creative ways around your restrictions~~ hacking. FTFY. Lol sorry couldn't resist.
Why are the big numbers necessary? This truly needs to be answered before I, and I suspect many others, will be able to help you sufficiently.
I'm not sure what elaboration I can give ... I need a number struct/class that can handle a larger range than double that's more performant than solutions based on biginteger and I'm not really concerned about precision.
If you want to avoid creating a `private class` as per AngularBeginner's suggestion (which by the way, is probably the best way to go about doing it), you can take advantage/abuse generic type inference to have a utility method make the collection for you: public List&lt;T&gt; CreateAnonymousList&lt;T&gt;(T anonomousType) { return new List&lt;T&gt;(); } var anonList = MyUtilities.CreateAnonymousList(new { start = default(Vector2), end = default(Vector2), type = default(Type?) }); You can also make a flavour that takes an `Func&lt;T&gt;` and use a lambda to avoid the construction of the throwaway type: public List&lt;T&gt; CreateAnonymousList&lt;T&gt;(Func&lt;T&gt; anonomousType) { return new List&lt;T&gt;(); } var anonList = MyUtilities.CreateAnonymousList(() =&gt; new { start = default(Vector2), end = default(Vector2), type = default(Type?) }); But yeah, ultimately this is pretty obtuse and you don't really see it in practice. And this isn't really all that much better than what you have. Just make a private class (for sanity's sake). If you have concerns about polluting your class, maybe your class is too big? (And yeah, private class won't pollute the _namespace_, so you should be ok there.)
Don't do this, create your own type instead. It's even official recommendation from Microsoft.
You're looking at floating point numbers well outside the range of hardware support. Every single option that does this is going to use big integer, string ops or taking it. There's no performant way to do this. If you need performance you need to not do this.
So ... This game (and the whole incremental games genre) is *pretty much* about growing numbers to be as big as possible as quickly as possible. You can't really ever 'lose' or anything 'bad' so the gameplay is all working out optimal ways to that growth. For Swarm Sim you start off with a few larvae and a small pile of meat then combine them to make drones that harvest more meat ... which you use to make queens that in turn make drones, then nests that make queens and so on. Eventually you end up with e^thousands of basic resources (meat / larvae) that you're spending on purchasing ever more expensive units (a single 20th tier unit might cost e^100). 
Without a degree, you need an impressive portfolio. Frankly, portfolios should be the currency used when getting a job because we all know people who graduated with a BS in computer science that clearly have no business programming. Unfortunately, we don't live in that world (yet). It is also unfortunate that most companies will pay you less simply because you don't have a degree, regardless of the quality of your work. So, what projects are you going to need to showoff your skillset? Well, if you want to get into full-stack development, then you need full-stack projects. You also want to show potential employers that you are flexibile so you want to learn other technologies as well. A full-stack project will show flexibility but there are other projects you can do that would make "flexibility" jump out at potential employers. So, here are some themes for projects to help get you started: **Website:** This website would be where you show your portfolio, skillset and more. This is the most important project because it is a tangible application for potential employers. Your website should include links to source control (github, bitbucket, etc), an "about me" page, and optionally (but preferred) blog posts that show critical analysis and reasoning skills. Your website should be under public source code and use ASP.NET MVC, WCF or web api services, and a SQL database. This website is a full-stack project. **Contributions to other projects:** Hop on github and start contributing to other projects. This will show your ability to collaborate. **Games:** To me, game programming is fun. Don't use Unity -- use monogame/XNA to show off your programming skills. **Raspberry Pi**: Do a cool home automation project with a raspberry pi and Java. This will scream flexibility if most of your projects were written in C# on a windows OS but you have a project that was written in java, on a different OS, on a different CPU architecture, and requires a more fundamental understanding of the computational sciences. It is important that all of your source code is viewable. It is more important that your source code shows best practices, design patterna, etc. Hope this helps.
I'm assuming you meant 'faking it' ? Which I'm fine with as long as to the player the calculations still look reasonable! 
If you are just doing basic arithmetic on a few large numbers, store the numbers as strings and create methods to do the arithmetic. This was a problem in my comp sci 101 class and this was the solution.
I mean... if they don't share a common parent or interface... Why not just make a list of objects? var generic = new List&lt;object&gt;(); generic.Add(10); generic.Add("I eat tacos"); I can't think of anything you can't put in a List&lt;object&gt;... If you put in a primitive type, C# will just wrap/unwrap it for you.
Given that Microsoft have a free tool that does this already and has a nice UI and generates cleaner code, I think you will probably have trouble monetizing this sadly... https://blogs.technet.microsoft.com/askperf/2010/02/01/two-minute-drill-wmi-code-creator/ https://www.microsoft.com/en-us/download/details.aspx?id=8572 Tips to improve your code would probably require seeing some of your code (I presume the one you have linked to is the generated code), but even in that there are a number of things; 1.) Use C# naming conventions in C# code. I.e. MethodNamesShouldLookLikeThis Not_Like_This OR_LIKE_THIS At the moment you have many different styles. You can read some guidelines here: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions 2.) In many places you catch the general exception class catch(Exception exp) Try catching more specific exceptions and handling them first, then catch any unexpected ones at the end Further reading: https://msdn.microsoft.com/en-us/library/ms182137.aspx https://softwareengineering.stackexchange.com/questions/164256/is-catching-general-exceptions-really-a-bad-thing 3.) You return ArrayList and things. You should return the interface instead, i.e. IEnumerable or IList so that you are free to change implementation one.
- The `Item1`, `Item2` naming of the properties is shit. Instead of having clear and expressive name you have generic names and always need to look at the creation of the tuple to figure out what item means what. This is especially awful if this is part of a public API (like my favorite framework NancyFX has it). - It's a class, so it produces garbage. Considering he's running Unity, which has known issues with garbage collection, it's definitely not a good option.
Very cool site. I went through their LINQ tutorial and managed to learn a few things despite already using it nearly daily. Great layout, very succinct.
It explains in the article how to for now until they build in the features.
This would be useful when testing command line programs. I spent a good part of yesterday switching between a command prompt and VS. This would have saved me time.
&gt; Why do you need to divide a massive number by another massive number? Seriously. Why? This is just how the game works - you have massive numbers of a resource and you use it to buy massive numbers of some other resource which in turn is used as currency for something else and so on. It's not *really* any different from a widget costing 1000 gold and you have a billion gold ... just the numbers involved are much larger. 
Removed: Spam. Clearly you didn't take [my warning](https://www.reddit.com/r/csharp/comments/6lf2e4/linq_in_c/djtkowb/?context=10000) to heart. Enjoy the ban.
I feel like I've tried answering this a few times already so I'm not sure what detail you need that I'm failing to give ... they're required because the game is built around growing numbers this large. They need to be *numbers* so I can do standard number operations on them (divide one big number by another, or by a small number etc.). Does that answer your question? 
Say you want to buy as many widgets as possible with your billion gold, how do you work that out? You *could* buy one at a time using subtraction, over and over until you had less gold left than the cost of a single widget but that's hideously inefficient. So you use division (1b/1000 = number possible to buy).
100% agree. This is the sole reason I've avoided it like the plague so far. The lack of docs is staggering, but it seems more and more people are using it. How? I've no idea, do they just look at existing code that uses it to figure out how to write one?
I'm in the making of such a list, but for FluentAssertions. https://github.com/jnyrup/fluentassertions/blob/best-practices/docs/BestPractices.md
X sounds more cool than N - that's all the reason most people need.
It gives your colleagues / friends etc. the option to code against your tests, completing challenges and what not, but without exposing them :).
Me too. Team Tools are good if you just have to commit. But if you need only a bit more... comparing, history or searching. For this I need sourcetree or console
And you can learn and do it in MVC pattern...
With the new C# 7 value tuple type you can name your properties. Xamarin has a [blog post](https://blog.xamarin.com/getting-started-c-7/) about this (tuples are mentioned at the top).
If you don't need the first list again: int factor = ...; List&lt;int&gt; result = Enumerable.Range(0, 2500).Select(x =&gt; x * factor).Select(x =&gt; x &lt; 0 ? 0 : x)ToList(); Edit: Put result in variable Edit: Values &gt;= 0
&gt; store the numbers as strings That's way slower than BigIntegers, which OP already tried. A solution for a CS101 class most probably doesn't account for efficiency in time or space.
You need to assign that to something or the result is lost. EDIT: But yeah, that's the gist of it OP. Use the `.Select` method to multiply each entry in your list by your factor (and clamp the value to `0`) and create a new list from it using `.ToList()`.
Yup, that's the approach I lean towards, but it's basically dependent on what level of coupling you're willing to accept for the benefit of additional development velocity and flexibility.
Thank you, the maximum value of 2500 can change based on user input. Can i say something like this... int factor = a; Enumerable.Range(0, MaxValue).Select(x =&gt; x * factor).ToList();
You are correct, but he explicitly mentioned Unity. The latest C# language version you can use with Unity is C# 6.0 - and that is experimental.
DataReader can use string column names by using its indexer, ex. (string)dataReader["CustomerName"].
Awesome! Glad to have been of help. :) 
&gt; People are trying to help you here, but you're not listening to them. I think it's the other way around: barely anyone here actually properly read the OP's post and comments before offering their own brilliant reinvention of the concept of floating points, which the OP is clearly aware of.
They say their changes to bumping mono to .NET 4.6 and such, I really hope they rope in C# 7.x sooner rather than later. I really want tuples, pattern matching, and out variables!
Thanks, that is great, I guess to expose that as a function I could just do. (e.g. I want mysql communication all in a seperate class) public string csharp_mysql_fetch_assoc (string query, string column_name) { ... return string = (string)dataReader[column_name]; }
The usage seems odd, mydb.Select_Assoc("select Fullname from customers where id = 1", "Fullname"); public string Select_Assoc(string query, string column_name) { string query_result = ""; if (this.OpenConnection() == true) { //Create Command MySqlCommand cmd = new MySqlCommand(query, connection); //Create a data reader and Execute the command MySqlDataReader dataReader = cmd.ExecuteReader(); while (dataReader.Read()) { query_result = (string)dataReader[column_name]; //query_result = dataReader.GetString(0); } return query_result; } else { return query_result; } }
Adding a `private struct` inside your `class`, not your containing `namespace`, is the best way to achieve what you want without introducing extra garbage.
Sure, just keep in mind that you're only returning the value of the last row, in case that wasn't intentional.
I was in the same position a few years back. Basically I spent a lot of time on Github contributing to other projects and my own, and also StackOverflow, answering questions to get my rep up. I really suggest you look into both as if I interview a candidate now, I'd choose someone that has a github account with contributions and also a StackOverflow account. You are welcome to contribute to my project if you want to start :) https://github.com/tidusjar/Ombi 
Your best bet is to not go there at all. You can probably find a way to fake the numbers if you're very careful about how your numbers scale, but given you're presenting numbers people can't really imagine, it's probably worth avoiding it entirely.
Right, I pretty much always do a where statement. I guess I could ditch the while all together All though in uses this seems strange as hell; mydb.Select_Assoc("select Fullname from customers where id = 1", "Fullname"); I basically list Fullname twice... seems there should be a better way
yes, you can get test results in visual studio for xunit, you just need to install the visual studio nuget package 
Have you guys defined a maximum limit or does the game theoretically support infinity? Similarly, what about a minimum?
&gt; You can probably find a way to fake the numbers Did you have any thoughts on possible approaches? There's no real way to know how the numbers will get used / what numbers they'll be required to display / do calcs on as they're all dividing / multiplying each other all the time.
What kind of temporary data would you store with that, and what will you use it for?
:) I'm getting the same impression.
&gt; If you're dealing only with exponential growth Sadly I'm not - there are effectively dozens of *resources* in the game each with different growth, many of which produce other resources or consume them.
Yes, if `MaxValue` is defined Edit: If you need further explanations, just ask 
Given infinite time the game would produce infinite numbers but in practical terms (*years* of playing the game where 'playing' means checking in on it once a day) the limit is ~+/-e5000 (minus because you can spend the resources as well as buy / accumulate them) An int exponent would give far more than required range. 
Why not just give them the tests? Having them remotely isn't a winning feature. I'd even argue that is a detriment. They're slower, need to be versioned, need separate revision control, and they could lose connectivity. 
OP most likely isnt doing this but you can use C# 7 with Unity and have been able to since C# 7 came out. You can force Roslyn to compile C# 7 to the supported CLR, and in Unity 2017 all you have to do is just make the project compile C# 7 without any changes to the CLR version that its compiling to. Heres where its explained and done: https://bitbucket.org/alexzzzz/unity-c-5.0-and-6.0-integration/src I love using C# 6 and 7 features so its hard for me not to use this fix in Unity. There are some issues with how null values are intercepted with null coalescing, but I believe that was fixed in Unity 2017 since they changed how the == overload works and how null values are perceived by GameObject.
ValueTuples are also available for C# 6 on nuget.
~~Tuples are not classes, they're structs. Very distinct difference; especially for garbage collection.~~ Also ValueTuple is available on Nuget for C# 6 and are built into C# 7 which allow for custom field names instead of Item1, Item2, etc.
Nuget has ValueTuple available for C# 6.
The tuple we're talking about here is the `Tuple&lt;&gt;` type, which is a class. Not the C# 7.0 value tuple feature. Please see the first post where I explicit mention `Tuple&lt;&gt;`.
Wow. Interesting! Not a unity dev but still interested about the theory behind it 
FWIW: `Enumerable.Range(x, y)`generates a sequence of `y` numbers, starting from `x`. So, if you need all the numbers from 0 to 2500, inclusive, you'll want to write it `Enumerable.Range(0, 2501)`.
The **type** `ValueTuple&lt;&gt;` is available using C# 6.0. The tuple feature where you can provide own names requires C# 7.0, which is not officially supported by Unity (tho apparently in-officially possible). And without the tuple naming feature from C# 7.0 there's no benefit over using a custom struct. Quite the opposite.
The **type** `ValueTuple&lt;&gt;` is available using C# 6.0. The tuple feature where you can provide own names requires C# 7.0, which is not officially supported by Unity (tho apparently in-officially possible). And without the tuple naming feature from C# 7.0 there's no benefit over using a custom struct. Quite the opposite.
Color me surprised, I did not realize Tuple&lt;&gt; was a class in c#, in every other language i've used I swear tuples are structs.
NB: I hope it's not still the case, but you should definitely profile that and compare if you're going to do a lot of it. Oracle's ADO.NET provider used to perform an uncached, O(n) look-up on the column name every time you used that indexer, which made for an ugly performance hit. Hopefully, the MySQL reader isn't that dumb, but it might be worth checking to be sure.
You could also pull in something like Dapper or Chain to abstract most of these details out of your code.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Create a chip from your .NET program (x-post from \/r\/csharp)](https://np.reddit.com/r/dotnet/comments/6rll7c/create_a_chip_from_your_net_program_xpost_from/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Despite all the C# trickeries written in other replies, as a Software Architect I can't help but look at your question as a XY problem. Rather than solving the Y (how to create a list of anonymous types), I would focus on the X that brought you looking for a solution that eventually got stopped by Y.
Well that's silly.
How is that silly?
It sounds interesting, but I honestly can't understand anything in the video. Tho this does not seem to be open source, so this post likely violates rule 6.
~~Because it's just an editor issue. You can use Framework 4.6 (C# 6) in Visual Studio 2017 with ValueTuple and get the EXACT same behavior as C#7's built in ValueTuple type. You don't have to use C# 7 to get the named params.~~ [edit] Let this stand as a symbol of my hubris.
I'm not sure about existing programming structures, but if you need to more efficiently model extremely large numbers, consider arrow notation. You can think of Arrow notation as an extension of exponents in the same way exponents are an extension of multiplication: https://en.wikipedia.org/wiki/Knuth%27s_up-arrow_notation
You require C# 7.0 to get tuples feature (including the naming option). That is a language feature, not an editor feature. This will **not** compile when you target C# 6.0: public static (int, bool) Fubar() { return (4, true); } The error you get is: Error CS8059 Feature 'tuples' is not available in C# 6. Please use language version 7 or greater. I just verified this using a fully updated Visual Studio 2017 with a console project targeting .NET 4.7. It might a good idea for you too to verify your statements first. :-) If you want to verify this yourself, make sure to actually change the used **language version** of your project: http://imgur.com/a/0ktwm You seem to confuse the .NET framework version with the C# language version. Those two are independent of each other. You can use C# 7.0 with .NET 3.5 or .NET 4.7, just as you can use C# 4.0 with .NET 4.7 (but no one would do this).
It sounds like a lot of your operations are basically smaller numbers multiplied by the size of one larger number. Making some assumptions about your problem here but if: * The numbers are only really used for display purposes (this criteria should become obvious shortly) * You're only doing addition and subtraction operations on them. Then you you might be able to get away with a data structure like: LazyLargeNumber { bigint StoredValue; bigint ScaleFactor; float CurrentValue } If scaleFactor is the size of your swarm, or whatever, then you would do an addition of a number that looks like: N = scaleFactor * m By simply adding m to CurrentValue. Any time you want to change your scale factor or display the value, you compute the actual value by setting: StoredValue = StoredValue + ScaleFactor * CurrentValue; CurrentValue = 0; If you're lots of relative additions and subtractions, but rarely updating your score, the this should be more performant. Now there are a lot of ifs and buts around whether or not this will work for you. The problem really is that the answer to using arbitrary precision values in general is big integers, and you can assume these are as optimised as possible for the general case. If these are too slow for you, then you need to inject in some sort of domain specific knowledge to get the performance you need.
Ya, I had to read up on .net framework vs c# language version. Sorry for misunderstanding -- they could make it a little less confusing ;p
My bad, I didn't notice that there are also rules on the sidebar. Having read [Read this post before submitting.](https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/) it was apparent to me that since this falls into the category of "technical discussion of the C# programming language, as well as associated tools, libraries, news, announcements..." it's appropriate. BTW while not open source Hastlayer at this point is free to use hence why I've written "write us and you'll get access to it" not "write us and pay us and you'll get access to it" :). Can you shed some light on why the video is not understandable for you? Is my English that bad?
Declaring a struct outside the function doesn't seem clean when its only used internally to the function, but thanks for the suggestion. Unfortunately, Unity's Mono doesn't seem to support Tuples, or at least I can't find them in the System namespace.
Interesting, thanks!
Unfortunately, Unity's Mono doesn't seem to support Tuples, or at least I can't find them in the System namespace.
Good suggestion, thanks. To me, declaring a struct outside the function doesn't seem clean when its only used internally to the function. I love to be able to declare a temporary local struct within a function to move data around cleanly. You are right on the nose with the class in question being too big! But alas, it is only code for mucking about at this stage, so not worth it to me to put in the refactoring time.
If MaxValue is the highest value that is to be included in the list, and not the number of values in the list, then you need to use MaxValue + 1. Enumerable.Range(0, 2500) Will produce the numbers 0 through 2499, not 0 through 2500. 
Hmm, interesting. I want the data to remain grouped, as per new { start = Vector2.zero, end = Vector2.zero, type = (Type?)null }, and if I put an anonymous type like that into an object list, when I then got the object out I wouldn't have a type to cast it to to receive the member data. Thanks though!
&gt; Declaring a struct outside the function doesn't seem clean when its only used internally to the function, but thanks for the suggestion. That's why it should be a **private** one nested within your class. That's less of a deal, as your classes should be small already anyway.
Removed: Rule 6.
Good advice, thanks. If this were anything but throwaway code I'm mucking around with in my spare time, I'd do exactly that - not worth it to me to put in the refactoring time. Doesn't really matter, it works for now, but I was wondering if C# had a clean way to solve Y that I wasn't aware of without adding structs to the class that are only used internal to one function.
Thank you! It does work as expected, however, i have made an incorrect calculation and require 'a' to be multiplied within the equation rather than multiplying the value given by that equation; (a * Math.Cos(Convert.ToInt32(b)) / c) - d rather than a * (Math.Cos(Convert.ToInt32(b)) / c) - d I'll see what i can do, i might look into a different solution to the problem. I'm sure there is an easier way to plot large amounts of data that is calculated on the back of user inputs. Thanks again!
May I suggest making the rules more visible than being listed in the lower half of the sidebar? Having read "Read this post before submitting" it was apparent to me that since this falls into the category of "technical discussion of the C# programming language, as well as associated tools, libraries, news, announcements..." it's appropriate.
Appreciate the response
Hi, thanks for the thoughts ... &gt; You're only doing addition and subtraction operations on them. I'll need to do multiplication / division ops all the time as well. For doing things like 'how many of x can I buy with y' where y changes several times a second. &gt; The problem really is that the answer to using arbitrary precision values in general is big integers Sure ... but I don't need arbitrary precision, as I mentioned in the post *float* style precision (6-9dp) is more than enough. I *think* I can do this using BigNumber { float mantissa; int exponent; } But ... I'm lazy and wanted to see if there was an existing solution or smarter way to hack around the problem first before I sink time into making yet another custom number solution. 
Hi, thanks for the reply. The issue is really one of how to do the calculations, not how to display the results.
I've only heard of Chain just recently, but Dapper seems to be fairly widely used... although usually you hear it mentioned as a lightweight alternative to ORMs like Entity Framework.
Subreddit rules is a standard built-in feature of Reddit and having them in the sidebar is pretty ubiquitous across subreddits. I do take the point about the sticky being out of date. It should be updated and it's on my plate of 100 things to do.
Makes sense. Edit: just noticed you'd specifically addressed this in your post, so please ignore this. Need to work on my reading comprehension! It might be worth pointing out a double can give you a range of 1.7 × 10^308, which is probably a smaller range that your proposal because it handles negative and very small numbers. That said, I would imagine it would be many times more performant and involve less work
int multiplyBy = Math.Cos(Convert.ToInt32(b) / c; int subtract = d; List&lt;int&gt; result = Enumerable.Range(0, maxValue + 1).Select(x =&gt; x * multiplyBy - subtact).Select(x =&gt; x &lt; 0 ? 0 : x).ToList(); 
Well then .Select(x =&gt; x * whateverYouNeedToMultiplyXWith(x))
If you weren't in Unity, I'd suggest the tuple way (anyway, check /r/phxvyper solution), it sounds like a perfect fit for it. Mind, I instructed my team to consider tuples as anonymous types: they are never meant to leave the context of a class or, possibly, a method. The rationale behind it is that every class should expose an interface (not a C# `interface`) and such interface should be semantic rich. A tuple such as ValueTuple&lt;int, string&gt; doesn't let anything out, even with the field name compiler trick.
https://pastebin.com/ebYsjkDn
Unless I'm misunderstanding what you mean by grouping, you should be fine. It's not like it stops becoming a whatever it was just because you stored it in a `List&lt;object&gt;` eg: var generic = new List&lt;object&gt;(); generic.Add(10); generic.Add("I eat tacos"); foreach (var o in generic) { if(o is string) { Console.WriteLine("I'm a String " + o); } if (o is int) { Console.WriteLine("I'm an int "+ o); } }
The issue is the consuming loop iterates through the data, combining the three values in the anonymous type, so I would need three values accessed per loop iteration, and would need to change the iteration if I changed the content of the anonymous type. For example, I could probably get away with: for (int i = 0; i &lt; generic.Length(); i += 3) { Vector2 start = (Vector2)generic[i]; Vector2 end = (Vector2)generic[i + 1]; Type? type = (Type?)generic[i + 2]; // Do stuff } But that is worse than just adding a private struct in the class, and doesn't make it easy to adjust the content of each data group.
Solid advice, I agree. I always try and make my code as self documenting as possible, which is why anonymous types like var data = { thing = x, differentThing = y, furtherThing = z }; seems a lot more elegant to me than Tuple&lt;Type1, Type2, Type3&gt; data = new Tuple { x, y, z }; (Forgive the tuple sudocode - not familiar with the syntax) Edit: I've just read up on C# 7 tuples and they seem a perfect fit. List&lt;(Vector2 start, Vector2 end, Type? type)&gt; data = new List&lt;(Vector2, Vector2, Type?)&gt;(); for (var dataItem in data) { // Code using dataItem.start, dataItem.end, dataItem.type } seems a lot better than my code, and still gives you names to access the data. Even List&lt;(Vector2, Vector2, Type?)&gt; data = new List&lt;(Vector2, Vector2, Type?)&gt;(); foreach ((Vector2 start, Vector2 end, Type? type) in data) { // Code using start, end, and type } Seems really useful and much more readable - I assume you can use a deconstructing declaration where I have (as per [New Features in C# 7](https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/)) - not sure exactly where tuple naming can be used. Edit 2: I'd be interested to know why you advise these new types of tuples should be class internal. If, for instance, I had the following contrived example, it seems to me it would be semantic rich, unless I have misunderstood what you mean in your last paragraph. public class Car { private string model; private string manufacturer; private int topSpeedMph; private float mpg; public Car(string model, string manufacturer, int topSpeedMph, float mpg) { this.model = model; this.manufacturer = manufacturer; this.topSpeedMph = topSpeedMph; this.mpg = mpg } public (int topSpeedMph, float mpg) GetStats() =&gt; (topSpeedMph, mpg) } Car myCar = new Car("SuperFast", "Generic", 200, 5.8); var stats = myCar.GetStats(); Console.WriteLine("It can do " + stats.topSpeedMph + ", but only gets " + stats.mpg + " miles to the gallon");
I'm not frequently using Reddit so that's why it wasn't obvious to me. Any way, sorry for posting.
&gt; If this were anything but throwaway code If this is thowaway code, why are you worried about cluttering up your namespace, or even going away from what you have already? Anonymous types can certainly get confusing, but if it's temporary, who cares? If it were me, and I needed to re-use this, I'd have a class/struct that does what it needs to. Make it private/internal if you really don't want it to be available elsewhere.
I made the post to see if there was a better way of doing what I was trying to achieve, so I'd know if this kind of code could be used elegantly in a production situation. I don't intend to change the code I have written (unless someone posts something really neat I'd like to try), but it was a good learning opportunity for me.
Thanks ... this one also relies on BigInteger ... and seems to cause massive performance/memory issues even doing trivial additions ... crashes a program within a couple of dozen additions because of ever more calls to BigIntegerBuilder.AddMulCarry. As a test case: BigFloat f = 123.123; for (int i = 0; i &lt; 20; i++) { f += f; } This will consume all memory then crash, 'i &lt; 14' chews up ~2gb of memory and takes ~11s to process :)
Yeah I think OP doesn't have a clue
use f.Add(i); instead. BigFloat f = 123.123; for (int i = 0; i &lt; 20; i++) { f.Add(i); } Or create a += operator for the bigfloat class; there isn't one at the moment.
Not sure I follow how I would use an expression tree; it seems expression trees are for creating a datastructure from a lambda with inputs, however none of my data is the result of an operation on the other two, so my expression tree would end up looking something like Expression&lt;Action&lt;Vector2, Vector2, Type?&gt;&gt; data = (start, end, type) =&gt; { }; Would my data structure then be the following? List&lt;Expression&lt;Action&lt;Vector2, Vector2, Type?&gt;&gt;&gt; data = new List&lt;Expression&lt;Action&lt;Vector2, Vector2, Type?&gt;&gt;&gt;()
Memberdata object[] values not matching Theory method signature. 
What if i wanted to use each value in this list in a new equation which uses it more than once to generate a new list? For example, a *(b-c)+d *e *(f/(f-(d *c)))^1.4 Where, 'c' represents the value held within the previously calculated list that i want to plug in. I essentially want to generate a new list of the same length as the previous one using this new equation so that i can chart both (x&amp;y of one series). 
Thanks to everyone! I am still learning and trying to build my first wpf application.
Ok, I see what you're getting at with the grouping. My misunderstanding. Is there some other identifying feature that you could LINQ on?
This runs exactly the same code / causes the same issue: 14 iterations = 26 billion calls to BigIntegerBuilder.AddMulCarry() 
Strange, not for me. You could always use bigints, and then multiply it by how many decimal points you want and then do the calculation and format as a string.
I could ... but as mentioned in the original post BigIntegers are too slow. 
I don't know if this might be an option but you describe a different presentation of the same object. Is you separate the model (the class where you define the properties a House has) you can simply represent it multiple times as a view ( sprite of the house) . This is a simplyfied version of the mvc pattern Now u dont't even need static variables. U just use the class with its instance variables.
The examples given don't warrant the necessity for big numbers. I understand you are using them, but why does something have to cost 1000 units. What is the smallest unit? If it's 1000 then make 1000 zero or 1. You also mentioned that you can earn 0.xx/s. It might be easier to then just keep track of the number of seconds and then display the total periodically. There is no reason to continue to do the calculations every tick / refresh.
&gt; The examples given don't warrant the necessity for big numbers. How do you figure that? Let's say you have e^1000 gold and you want to buy as many things that cost 10 gold as possible. How are you going to work out the answer? &gt; There is no reason to continue to do the calculations every tick / refresh. As mentioned in the post I'm already throttling the update frequency (to several times a second) and ... even at 1/s updates it doesn't solve the fundamental problem - it would just mean gitchy lag spikes in the game animation etc. every second instead of a continuously degraded performance. 
Wrote a unit test that used reflection to check for those. I believe the xunit code analysis package does look for them though
why not use an ORM ? something like NHibernate or Entity Framework, it makes life easier
Create an interface for both - IBuilding and IItem. That way you can define the behavior of each without the runtime being too knowledgeable about what the specific type is but at the same time, define the behavior that you're guaranteeing each object has available. Ultimately, you would end up with an IBuilding collection where you never actually have to know the implementing type. Then you would add actual classes for each type ( ResidentialHome :IBuilding, Castle:IBuilding, Walmart:IBuilding). It will make you're life much easier once you start implementing the event engine. Imagine you have a list of IBuilding that expose some methods the event engine needs (int GetBuildingCount(), IItem GetItemType(), int GetBuildDelay() - subsequently, IItem would expose details that the engine needs to know about the items). Your event engine might be the singleton piece I the pattern but all it would need to do would be loop through the collection and start firing the goodness up. On mobile and a few beers deep so sorry if this is not clear or off track from what you were asking. 
I feel there is a better way to do what you want at a design level, but to answer your question directly, here is an example using `dynamic`, available in .net 4.7. //Some vectors. List&lt;int&gt; vector1 = new List&lt;int&gt; { 1, 2, 3, 4 }; List&lt;int&gt; vector2 = new List&lt;int&gt; { 1, 2, 3, 4 }; //Create a dynamic list. List&lt;dynamic&gt; aList = new List&lt;dynamic&gt;(); //Add stuff. aList.Add(new { start = 2, end = 3 }); //Iterate and do stuff. foreach(var element in aList) { for (int i = element.start; i &lt; element.end; ++i) { vector2[i] = vector1[i]; } } It is slightly better than a list of objects, because at least you can access the elements by name and you don't have to know the type to create the list.
I know the downfalls of remote Tests /RMI etc. Noone here seems to know how to help me or point me in the right direction. If i asked "How do i get to Somalia?" You would tell me "Why would you want to go there?? Your country has way better healt-care etc.". I don't care. I want to accomplish exactly what i have asked for, please refrain from posting useless comments, thank you. 
I suppose if you really hated your life you could just start converting your larger numbers into byte arrays. I haven't personally worked on this level but one would assume that you could do math and or manipulate the arrays based on whatever calculations you need. You may have to build a custom class to handle byte calculations to accomplish this or maybe there is a package you can import. Edit: Come to think of it, you could possibly code the binary value of large numbers into a standard 32bit int 
&gt; I googled around for some Excel libraries and I'd have to either pay for one (migth as well pay someone to make the whole thing for me) or use one that might not even work with the most recent VS builds. [EPPlus](http://epplus.codeplex.com/) works really well, is open source and free, and should work with any recent version of C#. That said, it is basically good for reading/writing Excel data. Don't think you can display it in a GUI. That said, you can change data, set formulas, and have it recalculate the spreadsheet (based on the formulas). So if you need something robust to read/write/execute the Excel data, it should work out for you. EDIT: And what you're asking for, I think can all be done in Excel natively, albeit it might get a bit complicated, but doable I think.
probably best that you do a bit of learning about relational databases and then give something like https://www.sqlite.org/ a shot. also, take a look at the DataGrid control if you want an "editable ListBox".
&gt; I am making a cable stock management program (C#, WPF). The data is currently stored in an Excel sheet, where columns are cable types (Type1, Type2 and so on), rows are sizes (2x0.75, 3x1.5 and so on) and cells at column X row Y contain remaining cable length and separate coils if any are available. You've just described the world's simplest database schema :) Break out of thinking that you need to do this in a spreadsheet. For instance, all that complexity about stuffing multiple values into a cell is the result of the choice of a spreadsheet in the first place. Just put everything in a database: * One table contains types of wire (WireType) * One table contains sizes of wire (WireSize) * One table contains columns with foreign key references to the WireSize and WireType tables, and a quantity in meters. Each row in the third table tracks an individual roll of wire. Guess what? Now you can uniquely label each row with a physical label that you stick on the roll and do real inventory control. Want to add up all the current stock of a particular type of wire? Or of size of a particular type of wire? Or want to see if a single roll has enough wire for a particular order? All of those are simple SQL queries. You're also positioned now to do actual order management. Rather than decreasing the amount of wire in the third table every time an order is made, consider it a 'purchases' table and add a fourth table that tracks customer orders. There are any number of free or open source databases available. Or you can use the free SQL Server database versions available from Microsoft.
I also don't see the point, but why don't you just have your extension send their compiled DLL to your server, you load it, attempt to extract the target class, and instantiate and cast, via Activator, the class. This is ridiculously unsafe, and ripe for hackers to pwn your system, but you could do it i suppose. I would, like other commenters, just suggest you to distribute your unit tests. The MOOC likely did that since unit tests is a way later concept to most people's minds.
You're phrasing the problem wrong: 32423432424234 / 2325334234 Should be: 3.2423432424234 x 13 / 2.325334234 x 9 Which you reduce to x4/x0, divide the floats, and adjust the result to 1 &gt;= 10, adjusting the mantissa accordingly. As for adds/subtracts, ignore ones where the difference is +/- some threshold. Multiply the right float by 10 * Math.Pow(left mant. - right mant.). Adjust back to single digits. Use Math.Log10 to get the mantissa adjustment. Let me know if you're struggling and I might be able to help. I figure I owe you one anyway. 
I think you shouldn't be too hung up on imitating the existing Excel schema, rather than designing something that makes sense and works well in C#. I would do something roughly like struct CableSpec // dunno about the proper name { public string Type { get; } // maybe an enum? depends on how many types there are and if they regularly change public string Size { get; } // may be better represented as its own type? } class CableCoil { public CableSpec Spec { get; } public decimal RemainingLength { get; set; } } Then you represent your inventory as a collection of `CableCoil` objects. 
If there isn't a library, or there is and it's too slow, you have to roll your own. What do you really have to do? The 4 basics, maybe pow? Log10 is simply the mantissa. Sort is by mantissa then by float. 
It goes above 308. 
I think that's already implemented for `InlineData`, but for `MemberData` it may be hard unless we can pinpoint exactly where the `object[]`s are created and exactly how many parameters they contain. e.g. It would be hard to analyze this: public static IEnumerable&lt;object[]&gt; Foo_Data() { object[] CreateData() =&gt; new object[] { 1 }; yield return CreateData(); } since the method is essentially a black box. But it would be feasible to analyze this: public static IEnumerable&lt;object[]&gt; Foo_Data() { yield return new object[] { 1 }; } or possibly even public static IEnumerable&lt;object[]&gt; Foo_Data() =&gt; new[] // or new List&lt;object[]&gt; { new object[] { 1 } };
Yep! All you have to do is `Install-Package xunit.runner.visualstudio` in your test project, I believe. Then you go to VS's Test Explorer window and you will be able to run your tests &amp; see which pass/fail from there.
Added an issue: https://github.com/xunit/xunit/issues/1390
Added an issue: https://github.com/xunit/xunit/issues/1390
Added an issue: https://github.com/xunit/xunit/issues/1391
Cool. I've never used FluentAssertions before, but I'll come back to your list if I try it out and decide to create analyzers for it.
You are describing an ideal use case for the flyweight pattern. https://en.m.wikipedia.org/wiki/Flyweight_pattern It's a very common game pattern. http://gameprogrammingpatterns.com/flyweight.html
Non-Mobile link: https://en.wikipedia.org/wiki/Flyweight_pattern *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^97813
The only way I can think would be if you basically create your own units, so your numbers are just unsigned ints with a custom suffix out of an enum. It's probably be better for users to see a trillion purples than some exponent they can't even imagine. That said, you're talking about numbers beyond what people can meaningfully imagine. There's no point to displaying that at all, and you won't have the precision you're looking for.
Use itext sharp or Microsoft new api. A good rule of thumb is if you can't find what you want to do with Google, your going about it wrong.
&gt; you're talking about numbers beyond what people can meaningfully imagine. This is true. &gt; There's no point to displaying that at all This is false. It's kinda interesting why this is ... I have no real way to visualize 3e1000 but I can easily see that 1.5e1000 is half of that number and that 3e1001 is 10x more etc. 
As mentioned, it's just syntactic sugar. The real benefit to `var` is that it keeps you from having to constantly repeat yourself every time you create a new variable. It also comes in handy during refactoring as one less line of code that you have to touch.
my understanding of these types of primitives - i could be wrong - is that they are composed of an exponent part and a number part. you could potentially roll your own primitive so that you can get to truly monumental numbers without the need to use that much memory. simply allocate more to the exponent and less to the accuracy required for the number. also some people have written computer applications which calculate Pi to like a billion * billion etc decimal places. perhaps have a look at how they are doing things to get some ideas. you want the large number, but without the need for the accuracy, as a result you can surely get super fast speeds. 
In fact its also Ctrl T in VS 2017. And btw VS2017 is pretty nice. I've uninstalled ReSharper a couple weeks ago and doing fine just with VS2017 + extensions.
Spreadsheet light
Control K twice to add a bookmark. Control K + control N or P to go to the next and previous bookmark. Very useful when navigating logic that spreads between multiple places, great when wrapping your head around legacy code.
When it's flying by on a game? And again, as you've been told before. What you're trying to achieve is the feeling of your score going up, there better ways.
&gt; there better ways. Ok, what are they? It's not just a single 'score' it's dozens of resources / currencies that can be traded for each other, any of which might be in the e^thousands range. The ability to do math operations on them.is a requirement. 
Then your game is going to lag to death.
This is unhelpful ... and incorrect. [This](http://quadruple.codeplex.com/releases/view/77204) meets all the requirements - can easily perform 10,000+ operations a frame without noticeable lag.
You're solving the wrong problem. You've been told this by me and by a dozen other people. You're replicating a web game. They did this with JavaScript. You can't do it at all.
Did you look at the link? It's C# ... I really have no idea what you mean by 'wrong problem' or 'you can't do it' ... Whatever. I've found an excellent solution to my problem so no need to keep discussing here unless you have a *better* one than using a nicely built quadruple implementation. 
EPPlus is an absolute godsend.
How about a List of Buildings where each Building just stores the how often you've bought it and the amount of cookies it produces per building. For increased performance: Every time you buy a house add the buildings production to the total production (or recalculate it) instead of recalculating that value every time you need it to display something 
Have fun with that, a lot of game servers don't write to the normal standard output stream or read from standard input, on Windows especially this includes every srcds based game. Steamcmd itself has the same problem. For the games that do support stdio then the process object itself has events you can hook up to get the output. One of my companies has been making a general purpose game server manager (Web based) for some time and I can tell you that steamcmd and srcds are an utter pain in the butt because of their misuse of the console, but it can be done. cubecoders.com/AMP
Love EPPlus... great for very quickly generating APIs when you need to prototype or (some will cringe) are in a time crunch. Saves a bunch of time not recreating the logic already handled within Excel. I highly recommend you do not skip unit testing.
Maybe the process depends on the working directory being set: https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.workingdirectory(v=vs.110).aspx Whereas by default, I think it would have been your program directory, now that you pulled them apart, the Python program is running with respect to an unexpected directory. Perhaps it could even be a permission issue. Can't add any error handling or reporting in the Python script?
Are you sure that that path you're getting from the call to Path.Combine is even the correct one? Looks pretty weird that you're using Path.Combine, but in the same call, you're doing the combine operation yourself (which in my opinion looks wrong, since windows generally uses backslashes for paths and not forward slashes). I would try changing the line pyFile = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), docFolder + "/Browser Time Visualized.py" ); to pyFile = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), docFolder, "Browser Time Visualized.py" );
Both backward and forward slashes work in .NET, and, apart from the case where you are combining some path with an absolute path on the right side, it’s fine to just do `a + “/“ + b`. That said, when using `Path.Combine` already, might as well stick to it. 
Yep
Thanks! All these answers are helping a lot.
Thanks! All these answers are helping a lot.
Thanks! All these answers are helping a lot.
That's great. Thanks!
Your HttpClient code is posting as FormUrlEncodedContent, whereas your RestSharp code does not. I don't know much about RestSharp, but at a guess it's probably posting it as JSON. Hence why your response is NotAcceptable; the server you're communicating with does not accept JSON content to that resource.
I use the HTML Agility Pack (https://www.nuget.org/packages/HtmlAgilityPack) to parse HTML. What have you already tried and why didn't it work?
How about to search for "&lt;a href" and cutting out whats in between the following parentheses? 
Seem to have the issue covered in other comments but I'd like to add one small thing that's good to keep in mind when developing. Never code by coincidence. You tried to implement something, you got an error, you tried to swallow the error rather than investigate the cause. If you dealt with this by using a NullReferenceException catch then you were coding by coincidence, you don't know why you have an issue but you know you don't have an issue when you wrap it. This is an extremely dangerous attitude to have. You may have came here asking a question (which was a good thing to do) but if you follow the basic principle above then you likely wouldn't have had to ask this. You would know whether it was valid error handling because you *know* why it was happening and what that means. Not much help right now but hopefully it's decent advice. (:
Thanks for the direction! I will check the former as soon as I get back into my office. As for the latter, new to python, any leads / imports on how to accomplish this? :D 
Lol. I shouldn't of skipped the documentation for the function, that is a lot cleaner, although the former works. I am skeptical that the former has less permissions or so to run python scripts, but I will try it none the less when I get back into my office. 😎
Couldn't you draw the form using the GUI builder Visual Studio provides and then just copy paste it to mono and correct the errors (if any)?
Try xamarin forms, now they support gtk+ fot linux/mac
I taught C# and we started with making a basic game of rock paper scissors they loved it. 
If I'm going to work with GTK+though I'll just stick with Mono and Winforms
Gets pretty tedious with complex applications
Try Avalonia
I'm pretty sure the point of xamarin forms is that it does all the work for you there. Definitely worth a try.
Try making a batch file ("Browser Time Visualised.bat") next to your python file which contains: "Browser Time Visualised.py" pause Then you can see the output when the error appears. Since the command line behind the scenes actually uses shell extensions to turn "foo.py" into "python.exe foo.py", my money is on: https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.useshellexecute(v=vs.110).aspx 
How about a Docker solution?
WinForms? Don't. Use a cross-platform toolkit like Avalonia or GTK#.
The problem is that `Main` isn't waiting for the completion of `RunAsync`, so the program exits as soon as `RunAsync` gets to the `await`. Change `RunAsync` to return `Task` instead of `void` and change the call in `Main` to `RunAsync().GetAwaiter().GetResult()`. Also, although that doesn't change anything in this case, you should use `Task.Run()` instead of the `Task` constructor. Also makes the code a bit shorter because you don't need to explicitly call `Task.Start()`.
UPDATE: This made no difference, other than made my code a bit cleaner 👍
Thanks for your answer! I feel pretty stupid now
You should try to not feel that way. Async await is a new concept for you, and IMO it's not an easy concept.
Ok I'll check it out
I'm weak and need a form designer
One option to run an async method from a synchronous method (like a console app's Main()): var t = Task.Run(async () =&gt; await AsyncMetod()); t.Wait(); As the OP says, you always return Task or Task&lt;T&gt; from an async method. Void async methods only exist to all allow for asynchronous event handling where there is no "parent" Task to catch exceptions or handle any closures.
I guess it is a bit weird. I think I roughly understand the concept, but I'm finding that the difficult part is differentiating how I assume it works to how it actually works in c#
Hi, thanks for your answer. Yeah I did read that somewhere, and thankfully this corroborates what I read :). On the topic of asynchronous event handling... I was going to ask a question but I'm too tired to think, maybe something will come to me in the morning
I hear you on that. The nice thing about c# is that alot of things have been done for you so you don't have to worry about, but the crappy thing about c# is that alot of things have been for you and NEVER worrying about how it's implemented is guaranteed to bite you in the ass.
What would be the point of that?
What helps is understanding that under the hood, `async` methods are really just syntax sugar for setting up `Task.ContinueWith` callbacks at every `await`. Your original method is compiled into something like static void RunAsync() { Task t1 = new Task(() =&gt; { System.Threading.Thread.Sleep(5000); Console.WriteLine("t1 finished"); }); Task t2 = new Task(() =&gt; { System.Threading.Thread.Sleep(3000); Console.WriteLine("t2 finished"); }); t1.Start(); t2.Start(); Task whenAllTask = Task.WhenAll(t1, t2); whenAllTask.ContinueWith(RunAsyncPart2); // set up a callback for later when the tasks complete // immediately return to Main() } static void RunAsyncPart2(Task task) { Console.WriteLine("both t1 and t2 finished"); } (in reality it's a more confusing looking single method state machine plus stuff like error handling, but that's not important here)
Wrapping the calls in a Task with an async lambda method allows you to use normal async programming inside that method (i.e await this ... await that). You may then act on the wrapper Task as you would any other (wait, when, etc.) It's a convenient way to bridge the gap from synchronized and the older explicit Task management to the new "async all the way down" paradigm. Which is far from complete. You can't directly async Main() entry methods in console programs, for example.
You don't need `Task.Run()` for that though. You're offloading work to another thread and then immediately block the thread you just freed up. Apart from that, this is effectively the same that OP was already doing, just with an anonymous method. &gt;You can't directly async Main() entry methods in console programs, for example. You can as of C#7.1
Use electron and embedded asp.net core services.
What 
HOW ABOUT A DOCKER SOLUTION
Thats not practical, efficient, or long term supportable.
&gt; You can as of C#7.1 *You will most likely be able to as of C# 7.1.* C# 7.1 is still under development, and the "async main" feature is still not finalized.
Thank you for your comments. I'll stay with the httpclient
Run process monitor while reproducing the problem to see paths snd permissions issues.
Not a direct answer to your question, but create a virtual machine on your PC with Linux on it. Set up a shared folder so it can access the compiled binaries on the host PC. That way, you don’t have to constantly boot into Linux to test in Linux - you just leave the virtual PC running (paused if it’s using up resources)and switch to it when needed. Whatever solution you use, even if it’s intended to be cross-platform, I’d still make sure I did a good amount of testing on different platforms, and this will help with that side of things.
Check out Eto Forms. I used it with WinForms on Windows, and GTK# on other systems. Native functions can be invoked so it is possible to write platform specific code.
**Excellent** resource ! Thanks for sharing.
Use a regex
Fantastic! Thanks! That's exactly what I was looking for!
Why is it not? He has a c# code base, port to .net core, run API endpoints from asp.net core hosted in electron, do UI in html, css, js. 
Mainly the "efficient" part of it. Electron is disgustingly inefficient. Not saying ASP.NET is particularly better but something inside me dies a bit when someone justifies running an entire Chromium instance just for a desktop app.
I thought i had read that running desktop apps in docker was here or coming soon. I can't find that so it looks like it is still limited to server apps for now.
[What could go wrong?](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags)
Be careful with `dynamic` though, the type is checked at runtime.
Not that I know of, but it would be nice.
Everyone already posted answers to your questions so I wont talk about that. However I do want to point out that you should never create task the way you are doing it. &amp;nbsp; The proper way to create tasks is to either use `Task.Run()` or if you really needed it, `Task.Factory.StartNew()`. The main difference (but not the only one) between those methods and `new Task()` is that both of them return task that are already running while `new Task()` creates a task but does nothing with it until `Start()` is called. &amp;nbsp; This isn't considered good practise and if you would like, take a look [here](https://stackoverflow.com/a/29693430), [here](https://blogs.msdn.microsoft.com/pfxteam/2010/06/13/task-factory-startnew-vs-new-task-start/), [here](http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html) and [here](https://blogs.msdn.microsoft.com/pfxteam/2011/10/24/task-run-vs-task-factory-startnew/)
Check for a property called 'Anchor'. You would anchor the left controls to the top AND left, the right controls to the top AND right and the centre control to the top bottom left AND right. 
You can also look at the IL code that gets generated to see what is happening under the hood.
Lazy evaluation. The actual condition isn't executed until you do more stuff with it. For instance if you call Any() on it and the first element matches the condition, then the condition is only evaluated once.
~~I believe~~ the execution of Enumerable.Where() is deferred until you enumerate the collection, so the time to execute should be small and consistent regardless of the size of the collection. It's actually using the enumerable that will take more time.
A TableLayoutPanel, along with selective anchor / dock properties should get you what you are looking for. 
Project rider, I've known about this for some time. Thanks for mentioning this, I can tell u it's definitely high on my list to try out. I just checked and it seems it's now available for download? Last I knew it was in beta. 
I will give it a shot! I will post if I managed to do so!
It worked! CheckuDotCoDotUK ty my man! case closed!
This is correct. You can replace "believe" with "know". Here is the implementation: http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,15 The method is constant `O(1)`. It just creates a new instance and returns it.
I know that they announced it, but is it available to download?
“As of” is perhaps a bit premature for an unreleased product :p
ASP.Net core is different, very light. 
I think you want line 15, this one is for doing multiple `Where`s.
I've really been enjoying .NET Core in Linux, so I'm creating a tool to simplify packaging .NET Core applications into [AppImages](http://appimage.org/). I'd eventually like to have it support other types of linux packages like deb, rpm, and docker, but that will take time. :) [GitHub Link](https://github.com/phil-harmoniq/netpkg-tool) (FYI: This is a work in progress and still very alpha)
It's lazy-evaluated. Call .ToList() on it to find out the true cost. 
Asynchronous programming isn't easy... until it is. It's like recursion if you learned that in school; it's impossibly confusing and you make so many obvious mistakes until suddenly it's all obvious
What does that mean in practice? That my code could error when running and I'd have no clue when building?
Yep. Exactly. Just like every PHP or Javascript program.
Hey everyone, thanks for the great suggestions. I ended up settling on a MacBook Air 13". I found one for a good price and I get to keep the keyboard shortcuts I'm used to. It's used, and not the fastest machine, but it fits perfect on my lap. Meanwhile, I also found a couple things that made coding on an ipad enjoyable: The Continuous app is a nice and easy to use C# IDE, and the sudden discovery that I can move the cursor like a mouse by using two fingers on the virtual keyboard. 
Game engine to animate 2D GIFs? 
it might also be worth pointing out that you get a lot of that stuff for 'free' if you use wpf.
Not an answer, but usually when troubleshooting requests I like to get it working in postman first then take it to my app
you can use a MediaElement to display animated gifs. you can use an Image to display a static image. you can put them inside a Canvas so you can manually control their position using coordinates.
He clearly wants to add new gifs as DLC later on.
Have you tried using RestSharp? It makes this much simpler.
WPF isn't well suited for making 2D games because with games you usually want a game loop (60FPS or 60 loops per second) and UIs usually work with events instead of loops (press button -&gt; action). For games you'd be better of with something like http://www.monogame.net/ or https://unity3d.com/. But if you really want to use WPF and or keep things really limited and simple: 1. Create a new WPF project in Visual Studio 2. Add a `Canvas` control to the WPF window/form. 3. [Add `Image` controls with the gifs/images you want.](https://stackoverflow.com/questions/210922/how-do-i-get-an-animated-gif-to-work-in-wpf) 4. Create a `Timer` and change the positions of the `Image` controls on the canvas to move them around.
This is a neat explanation, I learned something new today. Thanks! 
Not sure about first party (i.e. Microsoft) assemblies, but for third party there might be a way to get a data dump from nuget to see which libraries support .net standard and use that as a starting point.
My friend and I just put together a project at work with similar requirements. We used the Excel com interop and got everything working. Here is a link to get you started: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interop/how-to-access-office-onterop-objects
I'm stuck with winforms until I learn xaml. Gotta stick with the devil I know.
Thank you so much, the links you shared cleared so many things.
Me to with postman. You need Auth header with "bearer {token}" for oauth2
IMHO, unless you are making a technical UI such as a programming tool, enum values should never be shown to a user directly converted into strings. Enums are *code-level* artifacts. Would you show your end users your variable names? Function names? At first, you may think it's simple. Just take the CamelCase and insert spaces, right? But then what if you need to translate your UI into another language? This article gives a direct answer to your question: https://weblogs.asp.net/monikadyrda/wpf-binding-itemssource-to-enum However, I would suggest that instead of binding to Enum.GetValues, you should consider binding to a function that ToStrings() the enums more formally. Maybe just a switch statement, at first, but it could be extended to stringify the enums properly in any language easily.
Avalonia has a "form preview" window - which shows you the result. It works pretty well. Dotnet Core is also supported since... Idk You need some basic Xaml knowledge and look through their docs regarding "binding" they got some advanced binding stuff there
I Need OAuth1. I think the Header should be like OAuth par=value,par2=value2..
As far as the base class library goes, one assembly in .NET Framework becomes a bunch in .NET Core, though.
Wpf runs on directx, so yes, animations etc should run just fine. (and do in my experience). For what you're planning to do I think it's the best way to go about it. 
Sure I get that. But if I was doing something that depended on a particular API that moved, how would I know where it went without furiois Googling? That is what I am looking for.
It's possible. I've actually had to do something similar recently of doing 3d visualization based on simulation results. I haven't done much of 2d work, but there's a set of tools for WPF 3d. Fairly primitive - working directly with vertices and face definitions. I would imagine 2d work is similar, might have to build up a library of your own tools. Data visualization is not stock .NET's strong point. There are some 3rd party packages for it as well though.
[removed]
&gt; Can't print files As in... on paper?
no good :( I've added the nuget package and wrapped my powershell script invocation in the impersonation using block but the same problem remains. I'm thinking that due to matlab licensing they've potentially shut down this mechanism? The alternative is to use the Matlab compiler to convert the *.m into .exe but this is really not ideal given the $$$ costs
As in does not matter. The print target is independent of the action itself.
Okay, [can't argue with thumbs up](https://github.com/Microsoft/vscode/issues/5953), but yeah, if that's a top 5 missing feature, then it's definitely closer to being an IDE than being just a text editor, IMO.
Removed: Rule 4.
Named pipe?
It does not and likely will not in the foreseeable future. It has a 30-day trial, that's it. If you really want to use it, you're going to pay. 
Perhaps try another approach? Queue the items in a database table, and then make a windows service that processes the database items async from the web application. Your service then can run with a completely different set of credentials from the web Have your web app then report the state of each queued job and the user can then get the result after the job has completed via some ui, or you can poll the queue table until the job is complete
C# in a nutshell is a good reference to learn the ins and outs of the language without muddying up the concepts with opinionated frameworks and patterns. https://www.amazon.com/C-6-0-Nutshell-Definitive-Reference/dp/1491927062 Learning the languages capabilities is only half the battle, and once you have the syntax down you really want to supplement that with a book that teaches you how to write C# as the language designers intended. The following is a little old but written by some of the original members of the .net team and fairly timeless https://www.amazon.com/Framework-Design-Guidelines-Conventions-Development-ebook/dp/B0017SWPNO I've worked with several great C++ developers who thought they knew C# but we're really still just writing C++ without ever really learning to embrace the language. Don't be like that
I know the OP preferred a physical copy, but just so people know you can save a little by going to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/ where the information is available online. Click 'Download PDF' for the full contents.
C# in a nutshell is great! Also C#7 version is coming out in a month or so if you can wait.
Link? Would you/Microsoft create class even for something as isolated and simple as a mock/fake/whatever in a unit test? (fwiw I upvoted your response.)
 &gt; Link? [Here you go!](https://upload.wikimedia.org/wikipedia/en/3/39/Wakerlink.jpg) --- ^(I am a bot. | )[^Creator](https://www.reddit.com/user/alienpirate5)^( | Unique string: 8188578c91119503)
Visual Studio will helpfully suggest which NuGet package types are in. I've never had to look up which package a type was in manually (now, searching through the docs to figure out which .NET Standard version includes it, yes).
This is a pretty common approach for me that has worked great over the years. 
Great read, thanks for posting :)
It is also import to note that if you want a control to stay in its relative position to the form (i.e centered) then set anchor = none.
+1 for referencing GameProgrammingPatterns. Such a great source.
I always search on http://apisof.net The website is always slow, but it shows you in which dotnet version, dotnet standard version a particular API is available. Invaluable. Thing is, it only references .net assemblies, not externals, but nuget is there for that. 
On top of what /u/CaucusInferredBulk said, I'd recommend storing *data* in a repository of some kind, either on the file system (i.e in a .txt or xml file) or in a database (i.e SqlLite, sql server, etc).
Reading the source for that quad struct I doubt you would get significant algorithmic improvements without further constraints to your problem (I think there are some poor design choices made around code duplication but the algorithms used look correct). You could probably beat it though with a simpler structure which only supported the operations you desire to carry out and got rid of the overhead of supporting most of IEEE Quadruple precision floating point. I'd use that struct so long as the perf doesn't cause issues. 
What user is your app pool running under?
It's written by the author of Linqpad. The book is incredible. 
Maybe Microsoft's .Net API Browser will help: https://docs.microsoft.com/en-us/dotnet/api/
Ahah! That's great! :D I'm glad to ear!
Can you create the functions you need in MATLAB, then export that to a .NET dll? Like this: https://scriptbucket.wordpress.com/2012/07/18/how-to-call-functions-in-a-matlab-generated-net-dll-from-c/
I'm not showing the enums directly. I take SelectedEnum and deal with it in the code-behind in MyView.
clr via c# 4.5 from Jeffrey Richter the best book for developer who want to deep learning. The book describe all aspects of language and clr, but doesn't include specific technologies like asp\winForms\wpf
You might be interested in this pattern ive been working on for ValueEnums in C#. https://gist.github.com/CCRed95/967bebac915195ecb436e9c9e2fab60d and heres a basic usage of it. https://gist.github.com/CCRed95/2c45eb4e41e6429324eadd2302b6996f you can access the declared C# name of the object (VGA, WVGA, XGA, etc) as a string, you can access the line number, and whatever values you want to associate with it. Plus to can enumerate it like a collection, use Linq on it, its interesting stuff.
The last time I did it (it was in the age of Win7) - I've did it via "Device File", just open a file "\\\\.\\&lt;deviceName&gt;" and work with it as with stream.
Second this!
That's the exact same thing?
Well done, you've gone from Visual Studio to Visual Studio Code... profit???
interesting! thanks for posting
Have the people class create the list in a constructor but populate it in a separate function that takes in and returns an object of type people.
I would call the repository from your main class to get and assign that data to your People.Aliases property. So the class People can stay nice and clean, consisting of only properties and no functionality. I can't really explain why, but this seems the best practice to me. 
I've changed it from the default ApplicationPoolId into my user account I log in as so it should have full access?
Thanks for the heads up, I'll get it.
Check [this site](https://docs.microsoft.com/en-us/dotnet/api/). It searches all APIs and will link you to the relevant docs for anything found.
Their SSL cert is invalid in Chrome now (plus it expires in three days). Not a good site to link. Microsoft has a [better alternative](https://docs.microsoft.com/en-us/dotnet/api/).
It seems to be almost the same. The PDF that I downloaded from that link starts at, "Naming Guidelines," which is Chapter 3 of the linked book. It appears that the book simply contains more content. For example, the "Common Design Patterns" section of the edoc contains only, "Dependency Properties" and "Dispose Pattern" whereas the book contains far more.
The MSDN document has just the raw guidelines/rules. The book explains reasons behind the rules, often adds illustrative code samples, and annotations (commentary) from industry experts. 
.NET Core 2.0 supports .NET Standard 2.0 which means most of the Apis should be back in that version
[C# In Depth](https://www.manning.com/books/c-sharp-in-depth-third-edition) is a pretty good read if you care about the "nuts and bolts" of the language but I'd recommend reading at least an "intro" book of some kind beforehand
Want to give me an idea what this is going to show me or maybe a time stamp? You just linked me an hour long video. 
I had a data streaming application with the same issue and had to use Windows multimedia timer to get good accuracy. Here's a SO link with an example https://stackoverflow.com/questions/24839105/high-resolution-timer-in-c-sharp
Your person object (called people), is a domain object. It should really only have properties. But any functions should only work on the data already in the object. So it could have a "GetFullName" function that returned the first and last name. If data is needed from the database, use the repository object for that, (possible names: PeopleRepo, PeopleDbo, PeopleSerivice). So the PeopleRepo needs to know what a Person object looks like, but the Person domain object should have ABSOLUTELY NO IDEA where it comes from or how it is saved. PeopleRepo takes care of that. Also, domain object live together in the same folder, and repository classes live together in the same folder. 
https://youtu.be/zWFoZb6EiwU
&gt;[**Learn ASP NET MVC 5 Complete Tutorial 2016 COMPLETE [215:53]**](http://youtu.be/zWFoZb6EiwU) &gt;&gt;Learn ASP NET MVC 5 Complete Tutorial 2015 COMPLETE &gt; [*^Hershey's ^Computing*](https://www.youtube.com/channel/UC3IDSQlRicKAP-2VD4BV68g) ^in ^Education &gt;*^289,818 ^views ^since ^Dec ^2015* [^bot ^info](/r/youtubefactsbot/wiki/index)
I need to be able to have a Windows Form, I'm basically planning to have a Server (Reads data on the local PC) that can create the local website and send data to the Client, would SignalR and HttpListener work together?
It's not the same if it doesn't provide the same data, we need the declarations sections: Declarations Platform Version Assembly .NET Core 1.1 System.Composition.AttributedModel, Version=1.0.31.0, PublicKeyToken=b03f5f7f11d50a3a
Don't use unity or similar? I think that is bad advice IMHO.
You could [embed a file in the assembly](https://stackoverflow.com/a/433182) and [copy it from there to the file system](https://stackoverflow.com/a/864276)
The first should work just fine, why don't you try it and report back here for discussion?
Thanks, will have a look. What I am confused about is that it seems like the function to play the sound completes but doesn't start right away. 
Make sure you're not hitting the jit. Warm up your code before you depend on it. * Use ngen to reduce startup latency. * Use the [multicore JIT profiling][1] to reduce startup latency without ngen Make sure you never sleep. Sit in a while loop reading from stopwatch instead. Change the windows timer resolution to 0.5 ms. Consider keeping the audio pipeline live the entire time; write out silence until you're ready to push a sound. Record samples constantly, timestamping them with stopwatch. Make sure you set your process priority and thread priority very high. [1]: https://msdn.microsoft.com/en-us/library/system.runtime.profileoptimization(v=vs.110).aspx
These are all good ideas. The variation i'm getting are about +/- 20ms so I assume that whatever is causing it is pretty severe.
I had the same issue using the built-in stopwatch class. I found a custom high performance timer someone wrote, can't find the source online anymore so i'm just gonna post the code i use here. public class HighPerformanceTimer { private ElapsedTimerDelegate _elapsedTimerHandler; private int mTimerId; private TimerEventHandler mHandler; /// &lt;summary&gt; /// The interval between timer ticks, measured in milliseconds. /// &lt;/summary&gt; public int Interval { get; set; } /// &lt;summary&gt; /// Indicates whether the timer is running. /// &lt;/summary&gt; public bool IsRunning { get; set; } /// &lt;summary&gt; /// Initializes a new high performance timer /// &lt;/summary&gt; /// &lt;param name="interval"&gt;Interval in ms&lt;/param&gt; /// &lt;param name="OnElapsedTimeTick"&gt;Method to execute on timer tick&lt;/param&gt; /// public HighPerformanceTimer(int interval, ElapsedTimerDelegate OnElapsedTimeTick) { Interval = interval; _elapsedTimerHandler = OnElapsedTimeTick; } /// &lt;summary&gt; /// Initializes a new high performance timer /// &lt;/summary&gt; /// &lt;param name="timeSpan"&gt;Interval&lt;/param&gt; /// &lt;param name="OnElapsedTimeTick"&gt;Method to execute on timer tick&lt;/param&gt; public HighPerformanceTimer(TimeSpan timeSpan, ElapsedTimerDelegate OnElapsedTimeTick) { Interval = (int)timeSpan.TotalMilliseconds; _elapsedTimerHandler = OnElapsedTimeTick; } public void SetInterval(TimeSpan timeSpan) { Interval = (int)timeSpan.TotalMilliseconds; } public delegate void ElapsedTimerDelegate(); private void Timer3Handler(int id, int msg, IntPtr user, int dw1, int dw2) { _elapsedTimerHandler(); } public void Start() { if (!IsRunning) { timeBeginPeriod(1); mHandler = new TimerEventHandler(Timer3Handler); mTimerId = timeSetEvent(Interval, 0, mHandler, IntPtr.Zero, EVENT_TYPE); IsRunning = true; } } public void Stop() { if (IsRunning) { int err = timeKillEvent(mTimerId); timeEndPeriod(1); mTimerId = 0; IsRunning = false; } } // P/Invoke declarations private delegate void TimerEventHandler(int id, int msg, IntPtr user, int dw1, int dw2); private const int TIME_PERIODIC = 1; private const int EVENT_TYPE = TIME_PERIODIC;// + 0x100; // TIME_KILL_SYNCHRONOUS causes a hang ?! [DllImport("winmm.dll")] private static extern int timeSetEvent(int delay, int resolution, TimerEventHandler handler, IntPtr user, int eventType); [DllImport("winmm.dll")] private static extern int timeKillEvent(int id); [DllImport("winmm.dll")] private static extern int timeBeginPeriod(int msec); [DllImport("winmm.dll")] private static extern int timeEndPeriod(int msec); } 
Why would it be deleted? I mean, what if the exe file got deleted, what would you do then?
Removed: Rule 4. Create an ASP.NET site, and if really needed, a separate WinForms application. Then setup a database or a shared file or whatever to have the two communicate. Basically, have the ASP.NET pull the data from the database and send it to the client, and have the WinForms application enter the data into the database.
Habit is a right word here. If you don't like R# perf, switch to some Roslyn based extension. I personally use CodeRush for Roslyn and Roslynator. They provide many features and don't slow Visual Studio.
not sure if you are being sarcastic or not...
Why don't you just click the link and discover that they aren't being sarcastic?
I love the format. It means I can subscribe to topics that I'd like an answer to. I wonder if he accepts pull requests...
I'm not talking about **they** i'm talking about **OP**.
This is a pretty neat project I've been keeping an eye on for a while. It's from Microsoft, and has two forms: one which adds special syntax to C#, and another that's just a library usable from plain C#. It has some real world usage in Windows 8 and Azure, too.
You'll have to clarify your comment then.
If he wanted to get into game development, you'd be right. The reason I said don't use unity is because most people end up writing what amounts to C# scripts instead of actually using OOP principles and designing a code base. With lower level game dev frameworks like monogame and XNA, the developer must essentially create their own lightweight custom engine. This enriches the portfolio for someone who wants to get into full stack development. An argument could be made that by using unity, the flexibility of the person is shown. However, this flexibility is also shown if they use monogame/XNA.
I wouldn't go to production using that config, but what I read mentioned that the default user allocated to IIS can not impersonate users. It was saying you need to use a service account with least privilege and assign it to the app pool. I think you have to enable impersonation for IIS as well as the user, but I don't see that in this doc https://technet.microsoft.com/en-us/library/cc730708(v=ws.10).aspx As others have mentioned, you'll want to do that out of process from the main website to avoid a privilege escalation attack.
People is a domain object. A repository class should know how to populate domain objects with data. Domain objects shouldn't contain anything to do with getting and saving data from a repository nor should it act as a bridge to repository classes. If a domain object needs to be saved, then it should be sent through a service class in the business layer. The service class would contain the knowledge on how to instantiate the repository class for saving and getting People data. The service class itself should not have any knowledge of the actual People object used (it should only care about IPeople) nor should it instantiate concrete repository classes. Either pass in the repository class via an interface in the constructor or use the service locator pattern with a preference for the former.
OP used **genius** to describe using github as an AMA medium, so I wasn't sure if he is with or against this idea.
XAML &lt;Grid&gt; &lt;TextBox Width="250" HorizontalAlignment="Center" Text="{Binding TestText, UpdateSourceTrigger=PropertyChanged}" behaviors:AutoCompleteBehavior.AutoCompleteItemsSource="{Binding TestItems}" behaviors:AutoCompleteBehavior.AutoCompleteStringComparison="InvariantCultureIgnoreCase"/&gt; &lt;/Grid&gt; Code Behind In constructor InitializeComponent(); this.DataContext = this; TestItems = new List&lt;string&gt;(); TestItems.Add("TestAutoComplete"); TestItems.Add("AutoComplete"); Then add a new property private List&lt;string&gt; testItems; public List&lt;string&gt; TestItems { get { return testItems; } set { testItems = value; } } Autocomplete will then complete any words matching the entries in the TestItems list
In csharp sub? Most definitely not.
I've used an open source library called SharpGL in the past. If you're specifically interested in charting, there's a proprietary solution called lightningcharts
You also need to add this in the window section: xmlns:behaviors="clr-namespace:WPFTextBoxAutoComplete" So that the "behaviors" you have listed in your text box know where to look for the behavior file. On a side note, I hate autocompletes that don't have a dropdown of matches. I have to make one for WPF with a dropdown showing all matches so people can just tab or click the match they want.
I guess that's a fair point. I'm for the idea personally and haven't seen the AMA format used done on github or indeed ***any*** bug tracking system, so I think it's quite innovative. Genius, even! :D I also love the idea that you can sort the issues/questions by reactions. For example, [by thumbs up](https://github.com/shanselman/ama/issues?utf8=%E2%9C%93&amp;q=is%3Aissue%20sort%3Areactions-%2B1-desc%20).
You want to do word merge of two files? you have reports such as RedBoxReport.docx We have 10 Red Boxes BlueBoxReport.docx We have 4 Blue Boxes You want to create a program that takes a template file such as ReportTemplate.txt We have {count} {item} And Merge it with a data set containing a count and Items attribute? Such as ReportTemplate.txt + DataSet(){Count=3, item="Printer Ink"} = PrinterInkReport.txt=&gt; "We have 3 Printer Ink" Microsoft office files are slightly more complicated then most filetypes. All the newer microsoft office filetypes are really zip files containing a manifest and a bunch of related files xml files. I havn't worked with docx but I have worked with Excel sheets. You'll want to get some practice with OpenXML. OpenXML is a lib created by MS for working with microsoft office files. I recommend looking into ClosedXML, which is a third party wrapper for OpenXML. I find ClosedXML to be easier to work with. Using either of those two libraries will allow you to read/write office documents. You'll want to look into SQL... either MS SQL if you can talk your company into paying the licensing for it or MySQL if this is a very small time operation and scalability is less important then cost. Keeping the data in Flat Files, or in MS Excel Files or MS Access DB is a recipe for a headache... between file locking, the inability to efficently search and update, duplicate files,etc... a standard Database is going to be much better for the use you describe. Then once you have those two things, it's just a matter of calling String.Replace on your template until there are no more replacement tokens, then writing it out to a file. 
Thanks. What are the main things you can do with CodeRush that you can't do with VS2017?
Kind of. The end goal is to autoinsert the data of each constituent from a formula. I.e. paintA has material 1,3,4 and paint B has material 1,5,6. It doesnt have to auto fill a template, just auto fill at a specific section. I.e. each column of cells in the formula table will have the filenames to open. Word then takes that and copies it to an active report. For now, id like to open, copy and paste a file into an activevreport as the first step. 
Ok.. I suppose you could do this without a database, but the idea would still be the same... if you didn't need it to be in .docx format and .txt was enough then you could do it easily via... //First obtain the template from some source. String Template = GetTemplate("TemplateFile.txt"); Template = MergeTemplate(Template); WriteFile("Result.txt",template); //Write a new implementation using Close/Open XML to read the template for a docx File String GetTemplate(String Filename) { String ret; using(StreamReader rdr=new StreamReader(Filename)) { ret = rdr.ReadToEnd(); } return ret; } //Write a new implementation using Close/OpenXML to write to a docx file String WriteFile(String fileName, String template) { using(StreamWriter wtr = new StreamWriter(FileName)) { wtr.WriteLine(template); } } String GetValue(String tokenContent) { //Since you are only interested in one type of token this is pretty simple, just return the contents of the file described by the tokenContent... when you start expanding your datasource and fidelity this function will be the primary location for adding that sort of functionality. return GetTemplate(fileName); } //Eventually you will want to accept a second "DataSource" argument... this way you will be able to use this same functionality and point it to different Databases, File Sets, etc... void MergeTemplate(String template) { //HTML Encode the braces that have been escaped so the replacement algorithm doesn't misuse literal braces for replacement token braces. while(template.Contains("\\}")) { template.Replace("\\}","&amp;#125;"); } while(template.Contains("\\{")) { template.Replace("\\{","&amp;#123;")l } //While there are unescaped braces while(template.LastIndexOf("{")&gt;=0) { start = template.LastIndexOf("{") end = template.IndexOf("}",start) if (end==-1) throw new exception("Unbalanced braces"); //replacementToken will equal {sometoken} String replacementToken = template.SubString(start,end-start); //replacementContent will equal sometoken String replacementContent = replacementToken.SubString(1,replacementToken.length-2) String replacementValue = GetValue(replacementContent) template = template.Replace(replacementToken, replacementValue); } //Undo Html encoding of escaped braces while(template.Contains("&amp;#123;")) template = template.Replace("&amp;#123;","{"); while(template.Contains("&amp;#125;")) template = template.Replace("&amp;#125","}"); return template } --EDIT-- Turns out ClosedXML may or may not support non .xlsx files... I couldn't get a difinitive answer in my two minutes or checking... but I did find this from a CodeProject project // To search and replace content in a document part. public static void SearchAndReplace(string document, Dictionary&lt;string, string&gt; dict) { using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(document, true)) { string docText = null; using (StreamReader sr = new StreamReader(wordDoc.MainDocumentPart.GetStream())) { docText = sr.ReadToEnd(); } foreach (KeyValuePair&lt;string, string&gt; item in dict) { Regex regexText = new Regex(item.Key); docText = regexText.Replace(docText, item.Value); } using (StreamWriter sw = new StreamWriter( wordDoc.MainDocumentPart.GetStream(FileMode.Create))) { sw.Write(docText); } } https://www.codeproject.com/Tips/666751/Use-OpenXML-to-Create-a-Word-Document-from-an-Exis
Here is a small side project I built to get familiar with dotnet core and vscode. I might be the only one interested in following a game in the console, but thought I'd share in case there are others like me. There's also an option to listen to a local radio stream of the game (as long as the stream provider I found stays active). Since dotnet core doesn't have any audio libraries I include a small console audio player using NAudio for Windows users and a sh file that launches mplayer(or whatever you want, really) for linux users.
yea I fully agree with you, using issue-as-a-question is a novel idea.
I'm going to go with, the OP thinks this is a genius concept and/or really likes this format.
For people not intiated into using git and github, this might be a bit of an unclear structure of doing things. But I must admit this way of doing it, really is ingenious way of reaching out to programmers all over the world
great thanks! looks like just the answer I was looking for, will give it a go! Thanks :D
thank you, &amp; I shall! :D
I don't know the user's habits, they may delete it by accident &amp; I don't want my program to throw errors because of it. &amp; if the executable were to be deleted, then its game over for the user aha. Not implemented yet, but I am going to try &amp; add an installer to my program for it is a tray application that runs in the background &amp; collects data.
What would you recommend to someone new C# and asp.net mvc, Should I learn C# and asp.net together, or should I do it separately 
Given the subject matter and the forum, Github is probably a fairly straightforward tool to use. It obviously wouldn't work for a famous non-technical celebrity like Taylor Swift though.
Post your question to the Github link, not here.
this is not a "genius" or even new concept. [here](https://github.com/sindresorhus/amas) is a very, very, _very_ long list (started two years ago!) of people who've done exactly this.
Just for comparison sake, I'd love to see a comparison implementation of the example done in c# without the PSharpLib. 
That's really cool. About how long did this project take you? 
From top of my head - it has many more refactorings, single click code cleanup, really cool code navigation, very good test runner, nice debugging assistant, spell checker. And also few smaller goodies, but those are main for me EDIT - and code templates. Something like snippets on steroids. Feature that colleagues using r# were jelaous of.
Thanks but what does the part "Text="{Binding TestText, UpdateSourceTrigger=PropertyChanged}"" refer to?
Here's a quick summary of constructors: Constructors need to be declared using the same name as the class. They can have 0 or more parameters. Different constructors need to have different parameter definitions. In other words, you can't have two constructors having the same number of parameters and the parameters having the same types in the same order. If you do not implement yourself a constructor, the compiler will generate one for you behind scenes that takes no parameters and does nothing. As a result, if you implement a constructor yourself taking some parameters, you won't be able to use new Animal() unless you also implement this one yourself. The compiler knows which constructor to use based on the parameters you provide. Now, as for the other questions you have asked, about having more properties, then you are no longer looking into constructors, but class inheritance and other staff (having a hierarchy of animal cat tiger etc). But you will have time to look into that as you learn.
Thanks! About an hour every other day since mid-June, usually with my morning coffee. I wasn't really keeping track, I just wanted to write a little something purely for the fun of it, like old times. It is incredibly refreshing to hack on something completely unimportant for entirely selfish reasons. I recommend everyone do it.
I think you are getting confused. In your scenario, you would have 2 constructors: public Animal() { // Does nothing } public Animal(string name, int age, float happiness) { this.Name = name; this.Age = age; this.Happiness = happiness; } Then you would be able to do the following: var cat = new Animal("Cat", 10, 0.8f); var tiger = new Animal("Tiger", 2, 0.5f); // Example using first constructor var dog = new Animal(); dog.Name = "Dog"; dog.Age = "5"; dog.Happiness = 0.9f;
Right I think I understand that, what I was saying was What if I want my cat and tiger to both have 3 parameters but have them be different. Example: I want my cat to have name, age, happiness, but I want my tiger to have name, age, size. Basically according to the other comment, I can't have two constructors with 3 parameters. My second question was say I have two cats, a tiger and a bob cat, and I wanted them to have the name and age of the cat, but I wanted the bobcat to have sharpnessofclaws or something, and the tiger to have size. So now I have two cats of the type cat, but I cannot make constructors for each since both only have 3 parameters, so I guess thats inheritance? Its not even possible to use constructors for that right?
Thank you. Yeah the compiler made it very clear that I couldn't have 2 constructors of the same parameter numbers or variables. I will try to learn more about inheritance. Man, learning off youtube videos sucks. I bought this Unity course that was supposed to be for beginners "no coding experience required" but they didn't teach anything about C#. How is that "no coding experience" so now I can't use it until I fill up on C#, but now I don't have the money to spend on a proper C# course so I'm dodging around from youtube video to youtube video trying to piece it all together. Unfortunately I am not very good at reading books as far as learning code, the word vomit is just too much. Do you know of any free online videos that can help me get a grasp on C# better? So far i've made a single console program and its filled with loopholes and hacks that barely allow it to work, it's an abomination and i feel its because of the way I'm learning. 
&gt; Which parts would I use? Still MVC ? Or would I start with the Web App template and somehow integrate the JS front-end? Use the Web app template, but check WebAPI and uncheck MVC. Unless you want Visual Studio to set up Authentication for you, in which case you still need MVC as well.
Dont click "watch"
Look at a constructor by the parameter types alone. For example, consider the following constructor: public void MyClass(string name, int id) Look at as just "(string, int)" No other constructor can look like (string, int). You can have (int, string). You can have (string, string). You cannot have another (string, int). The runtime needs to know what constructor needs to be called. If you had multiple constructors with the same signature, it wouldn't know which one to call. This is why the compiler checks for this and emits an error. The order of types needs to be unique.
gee I don't know.. so very few attempt to answer these types of questions... try multi-process requesting, if not that then try multithread requests. https://codereview.stackexchange.com/questions/141438/download-images-as-fast-as-possible 
I see, but this would technically be considered a loophole to do what I'm asking wouldn't it? You say I can get away with it by switching orders and etc. But that seems like it could get messy quickly. Basically If i'm doing something like this switching it all around to make it work Class Animal { public Animal(int_ age, string _name, string _type){ name = _name; type = _type; age = _age; } public Animal(string _name, string _type, int _size){ name = _name; type = _type; size = _size; } public Animal(string _name, string _type, string _claws){ name = _name; type = _type; claws = _claws; } } Then Below Animal cat = new Animal(7, "cat", "smallanimal"); Animal bobcat = new Animal("bobcat", "largeanimal", 10); Animal tiger = new Animal("tiger", "largeanimal", "yes"); So technically im using a loophole to have all these have a shared type when I could use inheritance which was mentioned before. Since then I have looked into inheritance a bit, I don't fully understand it. But what I gather is that instead of having to do a big loophole like that I can just do something like this right? class Feline { public string name; public string type; } class Cat : Feline { int age; } class Bobcat : Feline { int size; } class Tiger : Feline { string claws; } So they have all the properties I want from ealier without going through the constructor loophole? This is my basic understanding, let me know if i've made an error? At this point though, if this indeed how it is done, then I don't even understand why we have constructors in the first place so now I'm back to square one. And I can't even fathom using a constructor inside of an inherited class or something... Is that even possible? God my brain is melting right now.
I'll try to add to the other answers you've got. There are three things which I think you've mis-understood: 1 - There are two constructors. However, this is nothing special about constructors. You can do it with methods too, for example: public void SayHello() { Console.WriteLine("Hello"); } public void SayHello(string name) { Console.WriteLine("Hello " + name); } This is called "overloading". You can overload methods *or* constructors. When you overload a method or a constructor, there must be either a different number of parameters, or the parameters must be of a different type. Then, when you call the method or instantiate an object, the compiler can work out (from the number and type of arguments you pass) which version of the method or constructor to use. Because of this, you can't just add a different constructor to create a cat vs a dog, because the number of parameters those two constructor would take would be the same - so no, that's not what it's for. It's typically used to allow you to call the method or the constructor either with or without certain parameters - and if you use the version without, it will usually substitute in some default. 2 - Constructors don't have a name. You spotted that yourself, but I wanted to clarify it. The "name" at the top of the constructor *must* be the same as the name of the class. 3 - Finally, I think you're confusing the constructor itself, and the code which calls the constructor. Consider this: public class Animal { public string _name; public Animal (string _name) { name = _name; } } public class SomeOtherClass { public void MyMethod() { Animal dog = new Animal ("dog"); Animal cat = new Animal ("cat"); } } In this example, there is only one constructor (there is no overloading). But in another class, I'm using the same constructor, twice, to create two Animal objects - one dog, and one cat. I hope that helps, but feel free to ask more questions if it's still not clear. Edit: formatting.
You can have constructors inside child classes with the parameters you want, independently of the base class. You can even call the base class's constructor with base()
Lots of things in coding have 'loopholes' as you put it. It's all just 1's and 0's after all, the code is just there for organization and efficiency. I didn't like constructors when I first heard about them. They don't fit well with the tiny sample projects that they are introduced with. Just setting some strings or ints feels very dragged out and needless. Imagine that instead of setting a string called 'name,' you instead had to fire off several setup processes, define security settings, and allow several methods to be called depending on the results. You now have a checklist of things to do whenever you make a new one. You could toss all that into a function, and make sure to execute it whenever you create a new object. But what if sometimes the function parameters change, depending on the situation? What if the function never gets called, because the new guy was being clever when writing some new code? Constructors give you the ability to write code that will always help with defining complex objects behind the scenes, and tidy up into a nice one liner for later use. What you are talking about with different sets of parameters is called 'overloading.' It's not directly related to constructors, but the two do go hand in hand a lot. You can think of the parameters you have overloaded in multiple constructors as your own set of definition rules that you agree to adhere by. Your loophole case is only making your own rules loopy. :p 
You can reference .NET Standard libraries from within a .NET Standard library. It's all I've been doing at work recently as I upgrade our packages to .NET Standard themselves. The biggest thing you'll need to look at is the .NET Standard version you're targeting. 1.1 isn't very useful, and I haven't seen a lot of libraries targeting it (unless they don't need any network resources). Most are targeting 1.3+. If your library is targeting a lower version, you won't be able to import higher versioned libraries. So long as the other library supports .NET Standard, you should be good to go. I have had issues with the Visual Studio tooling acting up sometimes; in that case, I just restart VS and it always works just fine.
What if the other library isn't .NET Standard though? Can't I reference it from my own .NET Standard library? Surely there must be .NET Standard libraries that reference other non-NETStandard libraries?
It takes all of 5 seconds to figure it out anyway... it's for programmers not grandmothers 
Well then, you're out of luck. The point of .NET Standard is that it's a baseline; .NET Standard libraries can't reference non-standard libraries. You can multi-target a library (so that it works on two or more frameworks) and specify different libraries for different frameworks, but that's a slightly different behavior. Microsoft has something in the works to allow .NET Standard libraries to target .NET Framework libraries and provide shims for compatibility, but it's not here yet. (I also would never trust it in my own code; it's too fragile and breaks the purpose of .NET Standard, in my humble opinion). I just checked, and JSON.Net does support .NET Standard 1.0 (and has since version 9.0.1, at least).
In that case, do you know how I would add a reference to it? There's no package manager that I can see for net standard libraries.
It's no different than adding any other NuGet package. Just make sure you target the right version. If you want, you can edit the .csproj file directly and add the reference, too (inside the `&lt;Project&gt;&lt;/Project&gt;` tags): ``` &lt;ItemGroup&gt; &lt;PackageReference Include="Newtonsoft.Json" Version="10.0.3" /&gt; &lt;/ItemGroup&gt; ``` 
Get a book. It's a better resource, and you can find em cheap at thrift stores. You don't need to be programming in the most up-to-date version of .net or c#. 
Having constructors or methods with the same name but different arguments is referred to as overloading. Also, be aware that most programming languages, such as C#, use the declared type when choosing an overload. This becomes important when you're dealing with inheritance, because of this (using methods as an example): static void Feed(Animal animal) { } static void Feed(Dog dog) { } static void Main(string[] args) { Animal pet = new Dog(); // This is valid assuming Dog inherits from Animal Feed(pet); // calls Feed(Animal) because Animal is the declared type despite pet being a Dog } Note: It's a bit different if you're calling a class method on pet that exists in both Animal and Dog with the same signature.
Actually, lets get into what happens if you call a method on the class instead. But this time, lets use the Felines from elsewhere in the thread instead. class Feline { // virtual allows us to override this in a child class public virtual void MakeNoise() { Console.WriteLine("Meow!"); } } class Cat : Feline { } class Tiger : Feline { // override is necessary because we're overriding a virtual function public override void MakeNoise() { Console.WriteLine("Roar!"); } } Using the above, what happens when we call MakeNoise? Well, lets check! static void Main(string[] args) { Feline cat = new Cat(); cat.MakeNoise(); // prints Meow! to the console cat = new Tiger(); cat.MakeNoise(); // prints Roar! to the console } Unlike overloads, overrides use the version defined in the actual type rather than the defined type. Also note that Cat uses the version defined in Feline because we didn't override it in Cat.
Yay, Microsoft's latest clown dances for more Microsoft bots. 
I unfortunately can't really handle books. Take this for instance: Have you ever been reading a book and your mind starts to wander but you're still reading and after about a whole page, you turn it, then realize you didn't actually read a single word. Well you did, but you were drifting off. That is a problem for me reading programming books, as well as even watching the videos. I have to really pinch myself to even watch the videos. The books are like reading latin for me. I have always been a quick learner in demonstration and I learn in an audio way versus a visual way. I honestly have tried my best at programming books. I looked up the top programming book it has like 23,000 reviews, I did some "for dummies" books about coding, I've read multiple ebooks. Maybe I'm just stupid and its not books but both videos and books that can't break through the anti-logic in my numb skull lol. Thanks for the suggestion, though.
disclaimer: half asleep... Yeah, it can be tough finding quality videos... [MVA](https://mva.microsoft.com/), [pluralsight](http://pluralsight.com) , and [channel9](https://channel9.msdn.com/) generally have quality material - but for "square one" type stuff it will be harder to find something that "clicks" and helps you decode the latin/vomit, hehe. About 19 minutes into Section 15 of [this course](https://mva.microsoft.com/en-US/training-courses/16169?l=ymM4awQIC_5206218949) Bob is talking about constructors and constructor overloading stuff you're asking about. There's a similar course on pluralsight which may be a teeny bit more involved/advanced, but the pluralsight courses tend to be pretty "granular", which may work better for you. What i mean by that is, the course (5h20min total) is broken down into modules, which are then broken down into several 1 to 10 minute snippets. So, watch a snippet as many times as it takes to "get it" - then move on, kinda thing. Anyhoo, signing up for ['dev essentials'](https://www.visualstudio.com/dev-essentials/) (free) gives you 3 months access to pluralsight if you want to check that out - it's "C# Fundamentals with Visual Studio 2015 by Scott Allen." Uhhhh what else... Oh, there are a couple c# courses on edx.com too. i don't remember too much about them but it might be worth a peek. K, i know you said no books, but - to learn the latin-vomit i'd say some kind of cheat-sheet or glossary could only help ? [This](https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf) is a solid book with a halfway decent glossary at the end. I'm sure there's a better "quick reference" sort of thing out there but im half asleep... heh. Anyhoo sorry i don't have any specific help, i just figured i'd dump all that on ya. Don't get discouraged, ya just gotta find the most suitable learning material.
&gt; I unfortunately can't really handle books. Then you have a serious problem if you wanna become even just a mediacor developer 😉 You should work on this and train that! Have you looked at the **yellow book**? Try that one. Imho an excellent start to get into C# as a novice to programming. If you don't care for a special language you could switch to python and try the famous *learn python the hard way* - which exercises the trial and error way newbies uses anyway with a guided mentoring towards the *right* way to do things. With youtube videos alone you won't succeed. Especially if it comes to important topics that are independent from a special language or paradigm...
Everyone learns in different ways. I'm a relatively strong .NET dev, and I learned without books mostly. Videos on YouTube are deeply mixed in terms of quality, so they may not work. But you could bootstrap yourself with PluralSight, a dozen blogs, and hard practice. No book needed.
Sorry missed that bit, add the following property in the code behind private string testText; public string TestText { get { return testText; } set { testText = value; } } This will be the contents of the text box. 
Thank you!! That's the missing bit!! I can't wait to try it.
Shhh, the bots will come for you. Also Hanselman is about as intelligent as a Buzzfeed writer, give him some credit.
The bots are coming.
Yeah, get away from reddit where we can't control the community. Lets lure them to where we can control them. 
Do you see why you are being downvoted? There are bots that push certain information down so that other stuff pops up. You're being downvoted because the VPs won't dig too deep in to the negative places.
I assure you, he thinks he is that fantastic. The whole lot is full of people who do not like working well with others. If you are outside of the Microsoft group think, you are seen as an enemy.
Yeah, they're above that. 
It's horrible. It's another example of using Git for something it can do but less well than other tools. Worse, he closes the question once it is answered preventing follow ups or the usual comment chain after. I do like Scott and hate Git though. Linus built it to serve the guy in the middle, not the peons contributing and it has suffered for that. 
Probably doing this so the codeplex chubs can find the github URL 
I'd recommend use HTTPClient instead of WebClient. Asynchronous works well for IO-bound operations
Dumb question, but doesn't some of this overlap with Windows's Win-Tab command?
It might be that you are using an old version of Visual Studio. It should just be NuGet. Make sure you have Visual Studio 2017 and not 2015.
If you mean behavior-wise, default alt-tab handles fullscreen programs correctly. No idea about win-tab. If you mean implementation-wise, both the default alt-tab and win-tab use DWM thumbnails, except the win-tab uses private API calls that are not publicly exposed. 
Have a look on google for "signatures". This is what allows the compiler to differentiate methods/constructors/etc that have the same name. A signature is defined by the accessing level, the name and the parameters. If any of these is different, you have a different signature, hence another method/constructor/etc with the same name as a previous one. *access levels: public (by default)/private/protected/internal* So in your case, only the parameters change. Animal() Animal(string name) The compiler will automatically know which one you're calling: var myAnimal = new Animal(); // first constructor is called var myLion = new Animal("lion"); // compiler sees a parameter and gets the correct constructor, the second
You will need to use a programming language with asp.net, so unless you prefer VB, you'll be learning both together.
No I think I just missed it. Can't believe that. It's right there in the "Dependencies" context menu, and I didn't even see it. Maybe I was just too drained from over-working, I don't know. I just looked again after you said this and found it.
Thanks, turns out I made a mistake. I couldn't see the Nuget option when right clicking Dependencies, but it was there. Problem solved I think.
Removed: Spam.
You can do this within Excel itself. Merge the data (copy paste the data from one to the end of the other) and then remove duplicates. It will tell you how many it removed, which is how many were the same in the two documents
No, he is being downvoted because this is not the AMA thread. I gave him an upvote to bring him closer to zero. You seem a bit paranoid about bots.
I would use something like [EPPlus](https://www.nuget.org/packages/EPPlus/) to read the files into objects and then LINQ to compare them.
Why do people suggest this so often when there's literally a Microsoft provided SDK for working on any kind of Open XML document?
if property names are the same and light speed performance is non-issue, i would use reflection to copy properties from one object to the other
Not so removed
That is an approach we are considering, though it feels like a hack.
To be fair, the vendor is a hack too. Are the fields named the same? I think Automapper can do that automatically, pretty much the same as you'd do with reflection.
Is it still appearing in your /r/csharp/new? It's shown as removed for me.
Our DTO that's been in existence for years will not match property-for-property, so we'd be writing a mapping config for each property so that these external objects would line up. At the end of the day, we'd like to do that only once but it doesn't look like that's possible. I was hoping someone here would remind me of some long lost OOP principle that would be useful here ;)
You would be surprised how many there are which hasn't used git nor github before
You would be surprised how many there are which hasn't used git nor github before
It looks like you're going to want to use Web API as the back end in a separate application, as you've suggested. It would be best to at least have an idea of what the front-end will look like so that you can avoid having to refactor too much in the back end once the front end work begins. You'll be using Web API but you'll still have models and controllers. The current version of .net Core will have them combined into one so it's no longer two separate paths.
As I said in my previous comment, "given the subject matter, Github is probably a straightforward tool to use." You don't need to know or understand git to be able to interact with the AMA. There's no requirement to submit pull requests, cloning, or forking. The **only** functionality you need to be able to understand in this context is the ability to submit or comment on a question. If you don't know how to do that, then I'd question why you are interested in interacting with the AMA (or indeed anyone else).
Assuming you're talking about [Open XML SDK](https://github.com/OfficeDev/Open-XML-SDK), I haven't personally used it. Glad to see it exists. I'm an old fart and came from the days where the existing APIs were wrappers around the existing Excel program (so you had to have Office installed). From what it sounds like, OpenXML is a bit more complicated of an API than some of the third party APIs, even inspiring people to write their own simplified wrappers around OpenXML. Admittedly, I haven't used it, so I might be talking out of my ass. Looking over their documentation/examples, it looks pretty low level and makes simple operations (like getting a cell by text name) overly complicated. Generally speaking from experience, EPPlus "just works"™ and the API is fairly discoverable without having to consult much documentation. Pretty easy for a novice. Perhaps the documentation I'm looking at is out of date though and OpenXML has been updated to be more user friendly.
Could it be related to how you are generating the clients? If you try using SvcUtil, you can pass multiple urls and get it to re-use the same objects. (I can't remember which, if any, parameters need to be supplied) https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe 
I think you are focusing a bit to much about git here, just mentioning it as it's directly related to github. And the terminology around it might cause visitors to become confused. Anyhow: I don't expect people to be completely ignorant about github, but rather seeing the same thing which happens on social media. Were people misunderstand the basic concept on how to use given platform. E.g: people asking questions in the social feed, when they meant to send a direct message.
&gt; I think you are focusing a bit to much about git here. That was in response to your comment "You would be surprised how many there are which hasn't used git nor github before". I don't think anyone would be confused by the terminology on it either. It's very deliberately been set up as being [easy to interact with](https://i.imgur.com/hAvXhfk.png). You clearly don't give people enough credit.
In my case, EPP was already in a project and it was dead-simple to use, so I would use it again.
Look into closedXML. I find it makes working with excel files pretty simple. 
Sure it was, but my point still stands. There are a lot of people (within our field of work) which isn't familiar with either (both old and new). If you take a look at the commit history for that repository, you can see he updated the readme file. So yeah, it surely is a lot more clear on how this AMA is being conducted when there is more information about it. Sure I might be incredulous about people in general, but you clearly overestimate people as well
So... functions can be overloaded... a constructor is a specific sub type of function. Two functions conflict if their signiture is identical. A functions signiture is defined by the name of the function and the type and order of the parameters. int Add(int a, int b) {return a+b;} //The signiture is Add(int,int) As long as the signature is different either the name or the parameters can be the same... I.E: int DoIt(int a, int b){return a+b} int DoIt(int a, int b, int c){return a+b+c;} //Valid because signiture includes additional parameter int doit(int a, int b){return b-a;} //Valid because the name is different float DoIt(int a, int b){return a+b+;}//Invalid because the signiture is the same even though the return is different float DoIt(float a, float b){return a+b;} //Valid because the parameter types are different. --EDIT-- All classes contain at least the implicit constructor. I.E, even if you don't explicitly write the code for a parameterless constructor a parameterless constructor exists for the class. class Foo{ } And class Foo{ public Foo(){} } Are identical. So, by calling Foo() you are calling the default constructor... whether or not the default constructor creates an object in a complete state with all the "default" values depends one whether 1) The default constructor was explicity defined of implicitly defined. 2) If the "Default" values for the properties of the class coincide with the default values for the types they are represented by then yes... new Foo() creates a "default" Foo... but if the Default values are not the type defaults then you will have to explicitly define the constructor in order for those values to be populated correctly. Without the explicit constructor, the values of class properties are equivelent to using the default keyword... so class Foo{ int Bar String baz MyObj bob } is Identical to class Foo{ int Bar String baz MyObj bob public Foo() { Bar=default(int); baz=default(String); bob = default(MyObj); } } default(&lt;Type&gt;) is always null for reference types and the representation of zeroed out data for value types. --EDIT 2-- Inheritance: class Animal{ String Type; int Age; int Feet; public Animal(){} public Anima(String type, int age, int feet) { Type=type; Age=age; Feet=feet; } public override ToString(){ return $"{age} year old {Type} with {feet} feet.";} } class Dog:Animal { public Dog(int age):base("Dog",age,4){} } class Cat:Animal { public Cat(int age):base("Cat",age,4){} } class Tiger:Cat { public Tiger(int age):base(age){} } Animal a=new Animal("Fish",1,0); Console.WriteLine(a.ToString()); // 1 year old Fish with 0 feet. a=new Dog(3); Console.WriteLine(a.ToString()); // 3 year old dog with 4 feet. a=new Cat(2); Console.WriteLine(a.ToString()); // 2 year old cat with 4 feet. a=new Tiger(10); Console.WriteLine(a.ToString()); //10 year old cat with 4 feet. a=new Animal(); Console.WriteLine(a.ToString()); //0 year old with 0 feet. Animal is a base type, dog and cat inherit from animal. When you call the dog constructor it then calls the Animal constructor. Tiger inherits from Cat, which inherits from Animal. When you call the tiger constructor is calls the cat constructor which calls the animal constructor... 
I suppose it's possible. I'll take another run at it. Thanks for the link.
"replaces the observable that throwed an exception." ... throwed? I must consult the others. 
You mean MVC and WebAPI getting combined or? Sorry not sure I understood that right.
 SPA is an increasingly popular design, and Angular is a really nice way to separate the UI from the API. If you download .net core 2.0 preview, when you go to create a project, you can choose an Angular (or react) project that makes .net core as the backend and angular as the front. You develop the WebAPI that is consumed by Angular, so you can build mobile apps or whatever using the same API.
Yeah, it used to be two different controller types, but now they're together in one base controller.
&gt;Editing the generated proxy classes isn't really in the cards because we expect these APIs to evolve and we don't want to be in the situation where we have to re-create our edits in the future. How about an [adapter/wrapper pattern](https://sourcemaking.com/design_patterns/adapter)? Instead of editing the proxy objects, create an object which will be used in your systems that holds the source object as a property. Methods and properties on the adapter object can be used to access/modify properties on the source object. The advantage of this approach is that changes to the structure of the source object can be handled by modifying the single adapter object instead of having to constantly regenerate proxy objects, and, since the original object is always a part of the adapter object, you can always fall back to accessing that source object directly. 
Whoops! 😅 Nice catch. Fixed. 
This is /r/csharp not /r/java. The submission title should be: &gt; .NET Standard 2.0 is `readonly` I'll let you off with a warning this time, /u/AngularBeginner. ---------------- In all seriousness though, this is good to see. Bring on .NET Standard 3.0!
Ah cool, I should install the preview.. :D
Not sure this will work. Here's why. This API has a function, we'll call it "Function100". That function can be instructed to bring along in the response a couple other items. One of them is "Object108". The WSDL they generate calls this repeated object "Function100Objection108". There's another copy of "Object108" in another function called "Function214Object108". Both are the same object, but named totally differently, and in different namespaces. Ultimately, based on a quick scan of the API docs, there are two more instances of "Object108" attached as side cars to other functions. In the end, we ultimately want to convert this into our WorkOrder DTO that has been the output of a WCF service for nearly a decade. I'd need to write four functions, one each to convert the flavors of "Object108" into a WorkOrder object. Or I need to write four AutoMapper configs to do the same thing. Or, as I have it now, write a function that uses reflection to translate the properties in "Object108" to the properties in WorkOrder by using an attribute on each property that defines the translation. I was hoping there was a better way but I'm thinking what I have is about as good as it's going to get.
C#7 came out with visual studio 2017 on march 2nd? "Here is a description of all the new language features in C# 7.0, which came out last Tuesday as part of the Visual Studio 2017 release." https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/
Would that be `readonly` or `sealed`?
Probably due to some deferred execution. For now, try updating your `GetRecords` method to return a `List&lt;CSVRowObj&gt;` and force it to eagerly get the data. private static List&lt;CSVRowObj&gt; GetRecords(string source) { ValidateSource(source); string csvsource = @source; // NOTE: See difference between System.IO.StreamReader and System.IO.TextReader here (either one is fine for this program): // https://stackoverflow.com/questions/6669885/difference-between-streamwriter-reader-and-stringwriter-readerll?rq=1 StreamReader sourcereader = new StreamReader(csvsource); var csvreadsource = new CsvReader(sourcereader); var records = csvreadsource.GetRecords&lt;CSVRowObj&gt;().ToList(); //notice the addition of .ToList() here sourcereader.Close(); sourcereader.Dispose(); return records; } You should also consider employing the `using` statement to manage disposing/closing the various streams and readers: private static List&lt;CSVRowObj&gt; GetRecords(string source) { ValidateSource(source); using (StreamReader sourcereader = new StreamReader(source)) { using (var csvreadsource = new CsvReader(sourcereader)) { return csvreadsource.GetRecords&lt;CSVRowObj&gt;().ToList(); //notice the addition of .ToList() here } } } This generally simplifies the code and far better guarantees that the various resources are disposed. For example, in your original code if an exception was thrown during reading, it would not dispose the streams. It also simplifies returning the data: you don't have to store it in a variable, dispose, then return the variable. Here we can just return the data right within the `using` blocks and it will automatically dispose the resources for you.
Removed: Rule 7, spam.
It's not sealed, since anyone can fork it. 
This is amazing! Just wondering though, since .NET Framework 4.6.1 is supposed to support .NET Standard 2.0, why is SocketTaskExtensions from System.Net.Sockets not accessible? I was so excited for async on sockets :(
I would absolutely take that class. This is more along the lines of "full stack" web development. But to develop any sort of meaningful web applications, you're going to need to understand frameworks and how to access data.
Trust me, they don't care about you. They're talking soccer in the hallways and playing mind games with their employees. 
It's not paranoia if it's true.
&gt; //notice the addition of .ToList() here That did it! Unfortunately, I'm working with one huge CSV (8GB) and one small CSV (~10MB), so that's why I was holding off on using .ToList(). But everything worked out in the end. You were right on the money with deferred execution. So, I basically got rid of my "GetRecords" method and did all of that within the "JoinOnTypeandReference" method: public static void JoinOnTypeandReference(string sourcea, string sourceb, string dest) { ValidateSource(sourcea); ValidateSource(sourceb); string csvsourcea = @sourcea; string csvsourceb = @sourceb; // Get Records from both csv files // NOTE: The IEnumerables are NOT entirely loaded in memory until you actually do something with them StreamReader sourcereadera = new StreamReader(csvsourcea); StreamReader sourcereaderb = new StreamReader(csvsourceb); var csvreadsourcea = new CsvReader(sourcereadera); var csvreadsourceb = new CsvReader(sourcereaderb); var leftrecords = csvreadsourcea.GetRecords&lt;CSVRowObj&gt;(); var rightrecords = csvreadsourceb.GetRecords&lt;CSVRowObj&gt;(); // Validate Output Destination string outputdest = @dest; string destparentdir = Path.GetDirectoryName(outputdest); bool destparentdirexists = Directory.Exists(destparentdir); if (!destparentdirexists) { Console.WriteLine("Unable to find" + destparentdir + "!"); Environment.Exit(3); } // Prepare to write to destination StreamWriter outputwriter = new StreamWriter(outputdest); var csvwritedest = new CsvWriter(outputwriter); // Join rightrecords to left records if Type and Reference values are the same var matches = from left in leftrecords join right in rightrecords on new { left.Type, left.Reference} equals new { right.Type, right.Reference } select new CSVRowObj { Date = left.Date, Amount = left.Amount, Description = left.Description, Description2 = left.Description2 + right.Description2, Reference = left.Reference, Type = left.Type, }; csvwritedest.WriteRecords(matches); outputwriter.Close(); outputwriter.Dispose(); } I'll make sure to rewrite with using statements next. Also, I wanted to ask a couple more questions about general IEnumerable behavior and about the linq statement as I have it written for "var matches". Regarding IEnumerable, let's say I kept my "GetRecords" method that returns IEnumerable&lt;CSVRowObj&gt;. When it returns "records" after having closed and disposed the StreamReader, is the "records" variable effectively empty at this point? If so, is it because the stream disappears when the StreamReader is closed/disposed? Regarding "var matches", the way I have the linq logic written, is it basically comparing row #1 in leftcsv to row #1 in rightcsv, and then row #2 in leftcsv and row #2 in rightcsv, and so on? Or is it comparing row #1 in leftcsv to EVERY row in rightcsv, and then comparing row #2 in leftcsv to EVERY row in rightcsv, and so on? Thanks again for your help!
Just curious, have you worked with EPPPlus.Core? https://github.com/VahidN/EPPlus.Core I've been trying to get it to work with PowerShell Core on Ubuntu, but no dice yet...
Nope, sorry. Still using the standard EPPlus.
...what do you mean it's free? There's no way...You must already be a student in some capacity? Like, if I were interested in this program, not having any previous affiliation with "The Academy", would it be free for me too? If you are already taking classes there, what are they? Just curious.
Here's an old article on deferred execution, so I'm not sure how good or out of date it is: https://blogs.msdn.microsoft.com/charlie/2007/12/10/linq-and-deferred-execution/ But you can do some searching on "LINQ deferred execution" and dive into those resources. _I think_ looking at your `var matches` query, that it will use deferred execution which will only evaluate when iterated on in the `csvwritedest.WriteRecords(matches);` call. Your updated code is probably working because you're avoiding the calls to `sourcereadera.Dispose`. (Which you probably ought to dispose/clean up everything which you aren't right now.) But yeah, 8GB? This is a great case for using deferred execution. Good job! EDIT: If you want to deep dive on LINQ and how it executes under the hood, and what is deferred and not, you can check out [Jon Skeet's Edulinq series](https://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/) which I highly recommend.
At the moment, I'm using the CodeRush for Roslyn test runner with FluentAssertions and (sometimes) Moq, and MSTest attributes (that is, `[TestClass]`, `[TestMethod]`). All my assertions are using FluentAssertions, and short of adorning the test methods/classes with the MSTest attributes, I don't even think about the fact that it's using MSTest under the hood.
I like [shouldly](https://github.com/shouldly/shouldly) that lets you replace `Assert` statements with more natural extension methods, for example `contestant.Points.ShouldBe(1337);` My favorite part of the library are the auto generated exception messages: `contestant.Points should be 1337 but was 0`
Awesome, thank you so much!
Tell that to Immo. I just took his title.
It works the other way around, NetStandard doesn't support everything net461 does.
Fuck yes, PLINQ and Parallel are in! The full list is here: https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md
We're using Fluent Assertions to write the assertions and currently MSTest as the test runner. But I hope to switch to MSTest V2 soon because of the Datarow attribute. 
And System.Data is finally built out. It was next to impossible to access a database in 1.x
What's the difference between .NET Standard and .NET Core? When should one use one over the other?
Targetting NET Standard 2.0 is like an interface to the whole namespace,classes and member publication. If NET Standard 2.0 supports something, everything implementing NET Standard 2.0 supports it too. That does not mean that the implementing frameworks cannot add to the standard. Just like a class implementing an interface would behave. But considering your question it says in the 2.0 to 1.6 Diff that SocketTaskExtensions got added. I'm not that deep into sockets and async but targetting net standard 2.0 should give you what you want. Search here for SocketTaskExtensions. This lists all newly added or removed APIs https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_diff.md
Why doesn't net461 support SocketTaskExtensions then?
Think of .NET Standard as just that a standard for implementation of a .NET system. The framework and core both support standard 2.0
.NET Standard is a specification. It says that any runtime that wants to be Standard-compliant must have particular classes (e.g. `System.Collections.Generic.List&lt;T&gt;` or `System.IO.FileInfo`) available in the class library. [Here's the full list](https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md) .NET Core is a runtime. Version 2 of .NET Core will be compliant with version 2 of the .NET Standard.
I understood as much aswell but it doesn't really make sense to implement a standard where you don't support all of the methods required to support the standard? lol Sure it can add, but if it says 4.6.1 implements the standard it should be available. I have no idea if I take a .NET standard library and use it on the .NET framework (desktop) if it'll work or not. I've actually discovered SocketTaskExtensions in the diff you mentioned, which got me so excited about it. But when trying it in Visual Studio 2017 .NET 4.7 it's not there :(
Oh now I see the issue. You need to add the system.net.socket nuget package https://www.nuget.org/packages/System.Net.Sockets/ I guess 4.6.1 implements net standard 2.0 as in targeting it also allows you to add the missing dependency via nuget without having dependency issues
I was let go by my previous employer and turns out my county has a career program where I can get IT training for free. This is one of the participating institutions. I officially request the grant tomorrow through my county's career center.
Thanks, Dude! I'm looking forward to the courses!
I use MSTest because it's built into Visual Studio and thus doesn't require any additional software downloads.
 Unity has a pretty big industry, there's no reason you couldn't get a job using it. Monogame or something would have a harder time though, yes.
You only have to reference nuget packages for others, you don't have to install any additional software.
I use NUnit primarily. xUnit has a couple of bugs (NUnit has their own too, but I can work around them) that makes it hard for large amounts of unit tests to be used: for instance I made another issue for it this morning: https://github.com/xunit/xunit/issues/1397 notice the amount of issues xUnit has :s Reason I prefer NUnit over mstest is because of the extra attributes. xUnit and NUnit have InlineData and TestCase, something mstest desperately need to add. I also enjoy TestCaseSource (or xUnit's MemberData). I believe them to be much more readable than MSTests DataSource.
But it's not. I down-voted you for being wrong, and him because this isn't the AMA. Am I a bot?
I don't think so? That line of reasoning seems a tad too irrational for the likes of me.
What are you having a problem with?
This one is a bit of an edge case. Follow along here: https://github.com/dotnet/corefx/issues/17690 
You should become an expert developer and keep your options open. If you are a great dev, you'll get a job anywhere. If you want to be a game dev, that's going to take more work than just a normal dev - there are very specific aspects of game development that aren't applicable to normal development. Focus your energies on mastering the language. That will open many doors. 
Oh cheers! That works. Kind of weird that I have to add this dependency but it works so I don't wanna complain :) Thank you!
For AAA games the core game (engine) code is usually C/C++ with a scripting language to speed up development. C# is more often used for development tools to help artists and game designers. [Ubisoft uses C# for some of their AnvilNext game engine tools.](https://en.wikipedia.org/wiki/Anvil_(game_engine\)) Another example is Unity game engine having a C++ core with a C# API on top possible through Mono. With 2D games you can use C# for everything and have very good performance still. If you really want a gamedev job then try creating some very simple games (like Pong) in Unity so you can build your portfolio :)
Working in games really has to be your passion and you have to be prepared for: crunches, layoffs and less pay. However there's a lot of variety in C# jobs, as with any language's jobs. You can work at a game company but build server side infrastructure (more common for large companies, think Destiny or MS Studios), or write Unity based games, or build forums in ASP.NET/whatever. Most company's industry doesn't always translate well into what you'll be working on at a given company. Most of Google doesn't work on their search engine. Most engineering at banks is spent on websites and apps, not on high frequency trading. Picking a language is a good way to get your foot in a door, but having an area of expertise that's a combination of language and type of products you want to actual build is better (think websites vs game engine vs server infrastructure ect). It should be said that a lot of places care less about the language and more about what your focus is. The company I work for doesn't actually care if you have C#, it's nice, but ability to understand the issues with large scale cloud based infrastructure, data storage tech and networking is going to beat someone who can write a book on C# but doesn't know what a VM is. We simply assume that if you have strong fundamentals you can learn a new language relatively easily (and we have enough expertise in the languages we use to catch newbie mistakes). From my experience don't pick websites, it's easy to end up a jack of all and master of none because the knowledge between front and back end simply doesn't overlap. What you need to know to build sane SQL and a REST endpoint have basically nothing to do with the knowledge needed to write good JS, CSS and HTML, other than programming fundamentals. tl;dr: Learn many languages but try and pick some specific type of programming that you enjoy.
This is allowed by the .NET Standard but I got confused while trying to understand the details. Somehow a platform can be part of the standard but not implement it fully. Maybe this is why I don't release libraries...
This smells a bit like the `Array : IList` problem, but on a platform level.
If it were me, I would get a head start by creating some web sites and learning the tooling. https://www.asp.net/mvc/overview/getting-started
Why does it say this at the github page then? &gt;The vast majority of NuGet packages are currently still targeting .NET Framework. Many projects are currently blocked from moving to .NET Standard because not all their dependencies are targeting .NET Standard yet. What does he mean with moving from the framework to the standard? Isn't the framework required to use the standard specification? Is the standard not only a specification? Sorry for bombarding you with questions, I'm new to all of this. :)
If I create a library that I want to support as many people as possible, I should use the "interface" target (e.g. .NET Standard), because then someone using .NET Core and someone using .NET Framework (the implementations of .NET Standard) can reference that library. However, if I create a project that targets .NET Framework, (until recently) only other .NET Framework projects can reference that. Same applies for .NET Core. .NET Standard 2.0 DOES introduce a sort of compat layer here where I can reference .NET Framework projects from .NET Standard as long as it's not using any APIs .NET Standard doesn't support, but this should be seen as more of a bridge into the ideal world: I should create a shareable library that targets the lowest .NET Standard version as possible to be utilizable by as many other targets as possible (see [this documentation for more on versions](https://github.com/dotnet/standard/blob/master/docs/versions.md)).
NUnit3 and Moq, there are some limitations on what you can mock but so far I've been able to cover what I wanted to test pretty easily. Also it integrates nicely with msbuild for continuous integration, and Jenkins has a plugin to display the test results.
I'm using Linq for queries and zero performance issues, sometimes it is faster than calling the stored procedure version. I'm not using Linq2Sql, I'm using Linq2db.
Dapper is great, but I dont like Sql queries in code. I'm using Sql2db, it is as fast as Dapper (or at least almost as fast) and I can use linq for queries and stored procedures like Dapper.
Dance party time!
while others gave answers, I like to think of it as .net standard is the vendor's contract. They will support that, there might be many companies/implementations supporting that standard in the future, even though microsoft is the only one right now. Or the next acquihire startup... 
On a cell phone right now I'll provide more feedback later, but for starters: your variables should be lower case, method names and properties are upper case. Don't use goto ever, it makes tracking down bugs/maintaining your code a nightmare as it grows. Try not to have any method be longer than say 40 lines or so. It makes it hard to understand its purpose, I should be able to perceive everything about a method pretty easily all on one screen. Each method and class should really only do one thing, avoid complexity by keeping a single responsibility per method. Your games array should really just be a key value pair dictionary instead. When you write each game to the console looping through and incrementing Index is very suspect. At the end you have a case for Y and y and N and n, you should just do .ToLower() on the user input before entering the switch
You create an enumerable. Each position/int value, is named for the source content on the index in the array built from the file. Then you make a method that takes the array, and pass every enumerable value in as an index, and puts that value in whatever object you have for it.
It gets worse. But therefore more fun. Overloading is a core concept of Oop in C#. Study it. Its the basis of the polymorphism pattern and immensely useful when you have specialized classes that need to overrule their base methods. 
There's not much else to be said besides what /u/brianm9 said, but here's a few more: &amp;nbsp; foreach(string x in Games) Give `x` a meaningful name pertaining to the item in the collection, such as `game`. In larger applications, variable names like this will make your code harder to read. Using short variable names is fine in certain contexts, such as a lambda expression. &amp;nbsp; Console.WriteLine("Please select a game to play below: \n"); Get into the habit of using `Environment.NewLine` instead of `\n`. A different result is emitted depending on the platform the application is being run on, not that it really matters when writing to the console window. &amp;nbsp; I just want to reiterate the point from the other post, which was to never use `goto`. Just don't do it.
I would highly suggest that you concentrate on your game / whatever your program is about and **not** the parsing of data. Even is CSV seems simple, it starts getting complicated as soon as you have delimiters within data fields. I would therfore suggest to use another established format, for that production ready parsers exist. Use JSON or TOML! Easy to learn, easy to parse (the official sites offer links to implementations for various languages) and also easy to write by hand if the structure is too complex and the pure amount of data is too big 😉 Of course there are many others like XML (which I dislike for most tasks) or YAML. Imho the other two above have lots of advantages over the rest for most use cases. It is an important lesson to learn, that one should prefer using libraries for basic tasks - as long as there are well established ones.
Thanks for the advice! unfortunately when talking to my tutor i have to use a txt file and draw data from there, no other way. I have focused on creating the menus and methods atm until i can wrap my head around creating the objects from the lines of text.
I will look into this, thank you!
NUnit3 and NSubstitute for Mocking. Simply a very strong combination. Good documentation and focused on the important parts. And on top: Open Source without domination of a big vendor. I really dislike Microsoft for lots of reasons with pation and biases 😉 So I prefer libs from others if there are no disadvantages that have impacts on my projects. As testing is a pure in house thing, this domain is perfectly fine for independent libs.
Please format this so it is readable... You say that that two inputs are required. So how many ReadKey() calls do you make?
Once you've read a line in and split it, you can read the individual components and move them into the new object. For non-strings such as DOB and Balance you'll need the appropriate "parse" methods: List&lt;MyObject&gt; myObjects = new List&lt;MyObject&gt;(); foreach (var line in lines) { string[] entries = line.Split(','); // Need to split by comma, not dot. MyObject newObject = new MyObject(); newObject.firstName = entries[0]; newObject.lastName = entries[1]; newObject.dateOfBirth = DateTime.Parse(entries[2]); newObject.balance = decimal.Parse(entries[3]); // ... myObjects.Add(newObject) }
Hey, sorry i have cleaned it up as best i can, in terms of the inputs, i only want to have to press the key once , but currently i'm having to press it twice, e.g if wanting to see the "youngest customer" menu, i have to press either 55, or press 5, backspace and 5 again. Thank you! Ah i see what you mean, thanks!
It looks like you have a Console.ReadKey() call before your main (while(true)) loop, as well as inside of it. Try removing the one before the loop and see if that helps.
Else if 5, it is not doing anything your taking a readkey event and then nothing so it will catch the keypress but nothing else Try breaking it up. Then echo each step until you find the point it is doing something that does not match what you expect
yes have just realized, Cheers!
i see, have changed to 'if' instead of 'else if' and will do as suggested, would you know what is needed to return to the first menu? Thank you!
thank you for the clear response, this has helped a lot! Time to get started!
Hm... JSON and TOML and so on *are* text files. So is the format really specified? I would suggest to concentrate on the business logic **first**. Creating objects from data is almost always not the most challenging part.
This is an issue with the EAP version of Resharper. The plug-in Dev does not update the plug-in while RS is in EAP. Many report that the plug-in is working correctly although the installer throws some errors.
I think Mono supports it as well, although that might be also MS technically.
When creating the customer, give the ctor some parameters. U have a constructor that accept them. Also, there are more datatypes than just string. DOB should be a DateTime, id an int, Balance a float and Status an Enum
I will write you an example when get home from work in about 7 hours if you want. It will only take 5 minutes. 
I have not chosen, since I use both. We use Java, .NET, C++ and JavaScript across our projects. Whatever gets used is a matter of what technology stack the customers already have in place. UNIX shop customers tend to prefer a full Java based solution, or Web based frontend with Java backend. Microsoft shop customers will usually go with a .NET based solution. Mixed technology shops depends on the departments. We have had projects with Java running on UNIX servers, talking to desktop GUIs written in .NET, or making use of Web frontends. While other projects, just like on Microsoft shops used .NET everywhere.
Java sucks
Thanks for the response, sorry i am very new to this and having trouble still, would you be able to elaborate? Where would i put the parameters and would it be as such: public Customer(String firstName, String lastName, DateTime dob, int id, float balance, Enum status) Also when changing the different types from string to the appropriate ones, how would i edit this code to accept them? newCustomer.firstName = entries[0]; newCustomer.lastName = entries[1]; newCustomer.dob = entries[2]; newCustomer.id = entries[3]; newCustomer.balance = entries[4]; newCustomer.status = entries[5]; client.Add(newCustomer); Thanks again!
That would be amazing, thank you.
Removed: Rule 3, Rule 4. Maybe /r/webdev is a more appropriate subreddit. Check their resources in the sidebar.
Removed: Rule 3.
I learned C in the 1980s and 1990s because I was given a Commodore Amiga as a birthday present, and C was so embedded into the operating system that you couldn't do much with it in any other language. Then I went to university and learned C++. And I got a job that used my C and C++ skills in a software house. The software house had multiple projects, and I got involved a project with a C back end, and a Visual Basic 3 front end. After spending a while on the back end, I then had to start supporting the front end, and got sent on a course to learn some VB. And from then, I was a VB developer. I changed jobs and found a VB role, then changed jobs again into another VB role. In 2004 I left the industry. But when I came back, a year ago, Microsoft technologies seemed to be the obvious choice, since most of my professional career, except for the very earliest part, had been with Microsoft technologies. So I learned C#. And now I've got a job teaching C#. The world of computer programming changed a lot between 2004 and 2016. I had a lot of learning to do. I think I'm roughly up to speed with most of the core C# technologies now, but still got a long way to go before I'd consider myself an advanced C# programmer. But so many of the features that have been added to languages in the last 10-12 years have blown me away with how well they work. It's a great time to be learning a programming language!
if would be something like // Contructor begins here client.add(new Customer(entries[0], DateTime.Parse(entries[1], ...)) 
Would it be something like this? string[] entries = line.Split(','); . Customer newCustomer = new Customer(); newCustomer.firstName = entries[0]; newCustomer.lastName = entries[1]; newCustomer.dob = DateTime = entries[2]; newCustomer.id = int.Parse = entries[3]; newCustomer.balance = float.Parse = entries[4]; newCustomer.status = Enum = entries[5]; client.Add(newCustomer(entries[0], entries[1]. DateTime.Parse(entries[2]), int.Parse(entries[3]), float.Parse(entries[4]), Enum.entries[5})); Cheers!
I just read this article http://thebillwagner.com/blog/Item/2017-05-03-ThecuriouscaseofasyncawaitandIDisposable yesterday. I think it's kinda your problem. I know this one is explained with asynchronous methods but maybe it clearlyfies your problem. You got a solution already so i'll skip that :)
@MrDownvoter: I'm loving it - getting downvoted without any comment 👍
I suspect there may be a different issue than the dialogue box, but for now, try doing the check first before the prompt.
When it's implemented in asp.net mvc the postback is responsible for the validation. How it's done when the front end is decopled from the backend? I've seen some implementations that the answer is sent encrypted within the image and then sent back in the request in a header tag. Is that right? don't sound me secure (btw, captcha is not secure at all). Do you know any library that i could use to generate the images? Thanks. 
that is the thing, it worked before I added that box :D (user request it was) that button removes things that are checked at once
Make Game a property (or private field) of Form1 and initialize it in the Form1 constructor or the load event.
It is superior to Java in like every single way, except cloning. 
I learned both Java and C# in university. First Java and later on C#, reason for which most of my school projects and the thesis too have been in Java. But my first job was on C# and I've realized I liked it much more.
LINQ, properties and Visual Studio.
This looks like a practice example on simply reading and parsing formatted data from a text file. Fairly certain OP is a student.
Yeah that seems to have worked. (just out of curiosity, could it have been done with a class?)
Those would throw compiler errors. I am doing this on my phone, so bear with me: var clientList = new List&lt;Customer&gt;(); //look up the keyword "var" for C#. It is syntax sugar and saves time. var newCustomer = new Customer(); newCustomer.FirstName = entries[0]; //property names should begin with a capital letter newCustomer.LastName = entries[1]; newCustomer.DateOfBirth = DateTime.Parse(entries[2]); //always try to use the most descriptive names possible newCustomer.Id = Int32.Parse(entries[3]); newCustomer.Balance = Decimal.Parse(entries[4]); //use the decimal struct for anything to do with currency. floats are inaccurate. google "should I use float or decimal for money?" for details newCustomer.Status = entries[5]; //wasn't sure what type status was so I assumed a string which doesn't require parsing if the array is a string[] client.Add(newCustomer); Ok, so let's make this more readable. While we are at it, let's make this customer initialization logic reusable. First, let's define an enum *in a separate .cs file*. public enum PropertyIndexes { FirstName, LastName, DateOfBirth, Id, Balance, Status } Google "C# enum" for more information about enums. I love'em. We will use this enum in a bit. Next, let's define what a Customer object is *in a separate class file:* public class Customer { public string FirstName { get; set; } public string LastName { get; set; } public DateTime DateOfBirth { get; set; } public int Id { get; set; } public decimal Balance { get; set; } public string Status { get; set; } } Now, let's do the magic in main: class Program { static void Main(string[] args) { var customers = new List&lt;Customer&gt;(); var path = @"FILE_PATH_HERE"; //sorry, I am lazy var lines = File.ReadAllLines(path); foreach (var line in lines) { var customer = ParseCustomer(line); If (customer != null) { customers.Add(customer); } } //do stuff with customers list } static Customer ParseCustomer(string data) { try { var tokens = data.Split(',' , StringSplitOptions.RemoveEmptyEntries); var result = new Customer(); result.FirstName = tokens[PropertyIndexes.FirstName].Trim(); //the enum we made makes this much more readable and understandable. The .Trim() removes possible leading and trailing whitespace characters. result.LastName = tokens[PropertyIndexes.LastName].Trim(); result.DateOfBirth = DateTime.Parse(tokens[PropertyIndexes.DateOfBirth].Trim()); result.Id = Int32.Parse(tokens[PropertyIndexes.Id].Trim()]); result.Status = tokens[PropertyIndexes.Status].Trim(); return result; } catch (Exception ex) { Console.WriteLine("Failed to create customer object from the following input: {0}", data); Console.WriteLine (ex.ToString()); return null; //we dont want to return a customer object if we failed to create one successfully); } } } Parse/TryParse Examples: string myIntString = "3"; string myDecimalString = "7.23"; string myBoolString = "true"; The above are all strings. Here is how to convert those strings to their expected types: //convert string to int int myInt = Int32.Parse(myIntString); //convert string to decimal decimal myDecimal = Decimal.Parse(myDecimalString); //convert string to bool bool myBool = Bool.Parse(myBoolString) The above methods will throw exceptions if the conversion fails i.e trying to convert the string "Larry" to a decimal. You can use the following TryParse method to prevent exceptions: int myInt; if (Int32.TryParse("Larry", out myInt)) //note the use of the 'out' keyword { //conversion succeeded. do stuff with it. } else { //conversion failed } In the above example, the TryParse would return false because the string "Larry" can't be converted to an int. When a conversion fails, the outted variable will have the default value of the type (0 for the numerical types, false for bool, etc). You can also just use TryParse without the if-block if you only wanted to protect against the exception: int myInt = 7; Int32.TryParse("Larry", out myInt); //TryParse returns false and sets myInt = 0 Console.WriteLine("Using Larry: {0}", myInt.ToString()); Int32.TryParse("42", out myInt); //TryParse returns true and sets myInt = 42 Console.WriteLine("Using 42: {0}", myInt.ToString()); //Console Output: //Using Larry: 0 //Using 42: 42 
Thank you everyone, these are great answers!
I'm definitely loving all this work being done with .NET and WebAssembly lately. One thing that concerns me though, is that it seems like every attempt to build .NET WebAssembly frameworks is to bring the entirety of .NET into the browser. That's a *huge* download, and we live in an age when people freak out over an extra 10k on the JS files. I think it would be neat if there was some work on doing "tree shaking" for .NET apps, wherein the framework gets pared down based on what specific parts of the framework are actually used within the application. I suppose the difficult part will be dealing with things like reflection, which could theoretically pull in code dynamically that won't be searchable statically at compile time. But I have to figure there's a solution to this somewhere. 
I would recommend choosing a more professional username when posting for an actual job. :)
After this [comment](https://www.reddit.com/r/csharp/comments/6sr6eg/help_using_txt_file_to_create_objects/dlez4co/) it's clear, yeah. But imho it is one of the best advices one can give to some newbie, to focus on the main part and don't waste time on parsing stuff with a custom data format. And perhaps the file format isn't specified - then it also makes sense to think about an alternative, much simpler representation. The OP isn't very strict on giving constraints, so imho my answers are totally ok! I really dislike it if people just vote something down, if the reason isn't obvious.
 Won't microsoft slap developers/companies with royalties though, when they use .net software outside of the .net runtime?
The more lines of code you write, the more attractive you will be to an employer. If you're doing thing primarily for employment reasons, look at the job aggregators and see what are the most jobs available in your geographical location. Basically though, just get coding. Whatever you do it will help in your career, just keep at it. If you can't be bothered to code without knowing the job, you're going to struggle in future, as your career and industry will change. I can guarantee it.
Start off with a table called File. Let's also have a table called FileChange. FileChange has a foreign key that references the File - it is the "many" of a one-to-many relationship. It has a date/time of the change. And it has an indicator of whether the FileChange is a Create, Change or Delete. So now we've normalised the data. Now, when you retrieve your few hundred thousand objects, what you want to do is to be able to quickly find out if the object already has a corresponding record in the File table. If it does, then you can match the existing File with this object. So your pseudo-code might look like this: For each file object If a corresponding File record exists If the timestamp on the existing File record is the same as the timestamp of the current file as per the object Do nothing - the file hasn't changed Else Write a FileChange record indicating the file has changed End if Else Create a File record Create a FileChange record indicating the file was created End if End for For each File record that we didn't match with an object Write a FileChange record indicating the file was deleted End if There are a few gaps still to be filled in (e.g. how will you know, in the second For loop, whether the File matched with an object; or how are you going to manage timestamps), but this should set you on the right path. You also need to think carefully about indexes when you're dealing with this much data, or the performance will be horrible.
Thanks for taking the time, this definitely helps. Edit: indexes and performance is going to be a pain. One of the systems I plan on running this on returns around 2 million objects. 
&gt; Don't use goto ever, it makes tracking down bugs/maintaining your code a nightmare as it grows. I wouldn't say don't use it ever, it's the only way to fall through non-empty cases in switch statements. However, that's the only place I've ever found it appropriate to use.
C# was my first job and I loved it. Really nothing more to it, just sticking to what I know. 
I was taught Java at university, but I was introduced to C# through my Bachelor's thesis where the company I was writing my thesis for preferred that we'd do the assignment in C#. I tested out C# and Visual Studio before starting my actual thesis and was pretty blown away. I had been using Java and Eclipse IDE for three years so the transition to C# along with Visual Studio was great. C# seemed to have fixed the quirks and nitty-gritty work of Java and Visual Studio was so more intuitive and helpful. Four years of working with C# and I haven't looked back since.
C# is love, C# is life.
[Like linking in Android?](https://developer.xamarin.com/guides/android/advanced_topics/linking/)
I've used Java in school but Microsoft's plan with C# is way more ambitious so it's clear to me that C# is gonna keep getting more important to the software market.
The issue is exactly as the exception explains... &gt;"does not contain a constructor that takes zero arguments" Look at your customer class, you have six properties and one constructor. The constructor takes six arguments. Therefore, you have a constructor that takes six arguments but no constructors that take zero arguments. If no constructor is defined a parameterless constructor is implicitly defined, however if you do define any constructors the implicit constructor will not be defined. Just add the contstructor public Customer(){} to the customer class... or call the six parameter customer class when you instantiate the object via Customer newCustomer = new Customer(entries[0],entries[1],entries[2],entries[3],entries[4],entries[5]); 
The JVM was known to have a better performance for a long time. I'm not sure if that is still the case now though.
Prefer TryParse over Parse when working with unsanitized data. String number="5"; int value=0; if (!int.TryParse(number,out value)) throw new exception "Invalid Number"; Parse and TryParse are static methods on a variety of types... it isn't a keyword or anything like that so it only works on the classes is was explicitly defined for. Enums are a bit different... enum myEnums { SomeValue1=1, SomeValue2 } String enumStr="SomeValue1"; myEnums data = (myEnum)Enum.Parse(typeof(myEnum),enumStr); There may be a tryparse for enums as well, but I forget.
Thanks to everyone. I updated the code and rewrote most of it-- https://pastebin.com/XgktnTUW I still need to rename my variables to be Camel Case, I believe? Other then that though. I feel like this code is much better. I should probably re-write the code where I check if Answer is empty to something like a while or dowhile loop. Since it only checks once and if someone enters a blank number the 2nd time it tries to parse this and crashes.
From article: "Clearly we want to have our cake and eat it too, so we desire the high performance that comes from doing full linking and statically compiling everything to WebAssembly." At some point it will likely have the same linking the Android / iOS / Mac has. That requires [Preserve] attribute on things only found via reflection. 
Because Microsoft conquerd earth.
&gt;might be also MS technically That's because of the Xamarin acquisition right? That's actually pretty funny. 
You might be able to get this information from the USN Journal (aka Change Journal) and avoid having to re-read the entire MFT every few hours. https://msdn.microsoft.com/en-us/library/windows/desktop/aa363798(v=vs.85).aspx
The last time I was trying things with java was before .Net. I never had a good experience with it. When C# was in beta, I started using it and it just felt right. 
Linq and vs. and c# itself compared to the dizzyness i get when i start coding in Java
Removed: Rule 4. There are a plethora of resources/discussions/breakdowns on this already. Try searching for "WPF vs WinForms" and you should get a tonne of results. If you have specific questions about some particular concepts that you can't find answers to in your research, then feel free to ask them.
Ok thanks. Actually, this is first time to write sentence on Reddit, that i didnt know this rule exist. I will be careful next time. Have a good day!
You can work in VS only no need for android studio, works fine for us
That sounds like great software design for sure!
do not use goto EVER!!! there are many other ways to handle results/errors/workflow... goto is very bad design and poor programming, because it is there doesn't mean it should be used
You write everything in C# code which Xamarin compiles into Android and iOS binaries. You don't need to use Android Studio or Xcode at all (although I would personally heavily recommend using Xcode to edit your .xib and storyboard files rather than using the editor built-into Xamarin Studio/VS-for-mac)
Because that's where my job went. I was hired, 11 years ago, to work on a Java + Oracle project that had been developed in a primarily Microsoft shop. Within six months, it was decided it would be rewritten as a .Net + Oracle project and we would become (with some training) C# devs. It's just how things shook out for me. Didn't have a lot of Java experience (a handful of classes in college, really) at the time, so I'm not missing anything much.
No, this is not quite accurate. TL;DR There's two types of Xamarin Projects, Traditional (a.k.a Native Xamarin) and Xamarin.Forms.. You'll be more excited about Xamarin.Forms.. Xamarin traditional approach is simply, you'll have **2 projects** in Visual Studio, one for Android and the other one for iOS, you design the UI in **each project separately**, and **optionally ** *you can* share of course *some logic*, using a PCL (Portable Class Library) -or it's better to use .Net Standard Library-. For Xamarin.Forms, you'll have **3 projects** in Visual Studio, one for your core logic **and** your shared UI, usually PCL or .NET Standard Library, one for Android specifics and one for iOS specifics.. And by platform-specifics, I mean, if you want to include Push Notifications, 3D touch, File IO, search for *DependencyServices* .. **as well as** your platform-specific UI representation for *some* controls, which they call Custom Renderers.. because your UI code (Xaml) is shared, you sometimes need to change the control in Android only, so you create Custom Renderer for this control. 
imo don't even use them for that, if you're trying to fall through switches try to refactor instead
Nice yeah definitely looks much better now, its heartening to see you take the advice and run with it. Keep it up dawg
Thanks! Does this apply to advanced features as well, such as location services and background modes?
Yes, everything available to you natively is available in Xamarin . For those features you would want to avoid Xamarin.Forms. Xamarin is a great way to build mobile applications. The project I am currently working on has about 55% of our code being shared across both platforms. This cuts out a lot of duplicate business logic and allows you to optimize the data layer for both apps at the same time. Highly recommend it. 
Yeah, it feels, and looks better, but I should probably remove my try and catch statements, and just fix the error that happens. I kind of feel like doing it the way i did is the lazy, bad way to handle it.
/u/LondonPilot pretty much said what I could have suggested but he did it better. Pretty much only wanted to comment on the fact that this seems like a pretty cool pet project due to its potential to branch in several different directions and thus requiring an increased level of understanding in several different areas. Edit: Makes me want to put an entire system in a git repo just to see what would happen :-P.
Thank you for the feedback. Since the app is modular - and only one specific portion of the app needs GPS/background services, while the rest is more of a 'vanilla business' app - would it be possible to write the 'business' portions of the app in Xamarin and the rest in native code? This is all in the design stages, and quite frankly I still need to try out some Hello World code in Xamarin first before I start committing to a development paradigm.
&gt; Working in games really has to be your passion and you have to be prepared for: crunches, layoffs and less pay. And if you *really* do want to get into games (especially not being a C/C++ coder), you might be better off starting your own indie studio. Games reminiscent of the NES/SNES/Genesis era are still selling well, for instance. I've thought about doing the same myself in the past. But now, I am more concentrated on things such as IoT and mixed reality. 
No problem. As I think about it some more, I’ve realised there’s a mistake in my pseudo-code. If you code it exactly as I’ve written it, it will write multiple Deleted FileChange records for a file that’s deleted. You only need to write FileChange records for files that are deleted *and don’t already have a FileChange record*. And that gets even more complex when you consider that a file could be deleted and re-created again some time later. This is a fun project, but definitely not straightforward - there are technical challenges in terms of performance, and there are also algorithmic challenges. I’ll let you figure out the solutions yourself!!
I have been down that road, the APIs are very poorly documented which discouraged me from going further. Reading the entire MFT and writing to a SQLite DB takes me around 40 seconds for a 1TB file server which is good enough for background processing. 
I've been a Xamarin dev for about 4 years now. There's two ways it works. # Without Xamarin.Forms (This isn't what I do so I'm guessing a bit.) Xamarin has a host of platform-specific products: Xamarin.Android, Xamarin.iOS, Xamarin.Mac, and one that targets UWP (I never use it so I'm only guessing it's Xamarin.Windows). Each of these projects more or less provides a C# wrapper around the API for that platform. So in this kind of project, you have some "core" logic that you implement in what used to be a PCL and now is more likely a .NET Standard project. This is where anything that's not specific to iOS or Android will go, and it will be shared across all of the other projects. The "other" projects are one per platform and use the appropriate Xamarin platform. So your Android project will use Xamarin.Android. These have designers and use native UI concepts, so they feel sort of like using XCode or Android Studio. You'll implement anything platform-specific here, like "How do I do push notifications?" along with the UI concerns. That's a ton of duplication, so there's lots of Xamarin support for cross-platform abstractions of those features. There are also many third-party libraries that do so. But in this approach, there's no UI abstraction. You have to design your Android, iOS, and Windows UIs seperately, and implement the logic separately. # With Xamarin.Forms Xamarin.Forms is a XAML-based UI framework intended to eliminate duplication of effort for UI concerns. When you make a Xamarin.Forms project, you still have one "core" project that is platform-agnostic. It does all the non-UI and non-platform tasks. The difference is now you're able to define XAML UI and work with platform-agnostic UI concerns in this project. You also have platform-specific projects, but generally you try not to be writing a lot of code inside of them. There's some platform-specific drudgery you can't get around, like "iOS wants an AppDelegate but Android starts with MainActivity". For the most part, if you write code here at all, it's to help configure something that's expressed as an abstraction in the "core" project. So generally, you want to use Xamarin.Forms as it lets you reuse the most stuff. You'll normally be working only in Visual Studio or Visual Studio for Mac. 
Project as a whole is a multi tenant Delta level backup solution. Reading from the MFT every so often and figuring out what has changed is to not waste time hashing files which haven't changed. It is a very ambitious goal for my skill set but already dealing with huge amounts of data (the information coming from the MFT) is proving to be worth it. 
Because visual studio is the best editor IMO.
I see that now. The end goal of the project is a client server Delta backup app, think Rsync but full dot net. Deletions is a problem I am going to have to deal with if I want to implement some form of retention server side. The database design is something I think I am going to pause on and spend proper time on as ultimately I will need to track versions of the files stored server side. This is suspect is going to force me to give the DB design a whole lot more thought than I ever have to avoid it becoming a bottleneck. 
using System.Collections.Generic; using System.Linq; using System.IO; using System; using System.Reflection; namespace _4reddit { public enum ValueMapper { firstnname = 0, lastname = 1, dob=2, id=3, balance=4, status=5} class Program { static void Main(string[] args) { string filePath = @"C:\Users\Corie\Desktop\Assignment 1\"; DirectoryInfo di = new DirectoryInfo(filePath); List&lt;FileInfo&gt; fil = di.GetFiles().ToList(); List&lt;string&gt; lines = new List&lt;string&gt;(); foreach (FileInfo fi in fil) { lines.AddRange(File.ReadAllLines(fi.FullName)); } //Approach 1 List&lt;RawData&gt; results = new List&lt;RawData&gt;(); foreach (string line in lines) { RawData resultingObject = new RawData(); string[] values = GetValues(line, ','); resultingObject.FirstName = values[(int)ValueMapper.firstnname]; resultingObject.LastName = values[(int)ValueMapper.lastname]; resultingObject.Dob = values[(int)ValueMapper.dob]; resultingObject.Id = values[(int)ValueMapper.id]; resultingObject.Balance = values[(int)ValueMapper.balance]; resultingObject.Status = values[(int)ValueMapper.status]; results.Add(resultingObject); } //Approach 2 List&lt;RawData&gt; results2 = new List&lt;RawData&gt;(); foreach (string line in lines) { RawData resultingObject = new RawData(); string[] values = GetValues(line, ','); MapContent(resultingObject, values); results2.Add(resultingObject); } } private static string[] GetValues(string line, char delimiter) =&gt; line.Split(delimiter); private static void MapContent(RawData target, string[] source) { Type targetType = target.GetType(); var props = targetType.GetProperties(); foreach (PropertyInfo pi in props) { var index = (Indexer)pi.GetCustomAttribute(typeof(Indexer)); string value = source[index.Index]; pi.SetValue(target, value); } } } public class RawData { [Indexer(Index = 0)] public string FirstName { get; set; } [Indexer(Index = 1)] public string LastName { get; set; } [Indexer(Index = 2)] public string Dob { get; set; } [Indexer(Index = 3)] public string Id { get; set; } [Indexer(Index = 4)] public string Balance { get; set; } [Indexer(Index = 5)] public string Status { get; set; } } public class Indexer : Attribute { public int Index { get; set; } } } 
 if ( Convert.ToString(ToGuess) &amp;&amp; Convert.ToByte(Answer) &gt; Convert.ToByte(ToGuess)) { Console.WriteLine("Your answer is incorrect. You guessed {0}, but the number I'm thinking of is higher up.\n", Answer); Console.WriteLine("You have {0} guesses remaining.\n", Guesses); } else { Console.WriteLine("Your answer is incorrect. You guessed {0}, but the number I'm thinking of is lower.\n", Answer); Console.WriteLine("You have {0} guesses remaining.\n", Guesses); } //This whole block can be shortened down using a[Ternary Operator](https://www.dotnetperls.com/ternary) //In games especially you have two options based on a boolean result like you have above, so learning it may be helpful. //You can shorten it down to something like this. bool IncorrectAnswer = (Answer != Convert.ToString(ToGuess) &amp;&amp; Convert.ToByte(Answer) &gt; Convert.ToByte(ToGuess)); Console.WriteLine($"Your answer is incorrect. You guessed {Answer}, but the number I'm thinking of is {(IncorrectAnswer ? "lower" : "Higherup")}"); Console.WriteLine($"{Environment.NewLine}You have {Guesses} guesses remaining.{Environment.NewLine}"); //You may notice I also used a dollar sign which is called [String interpolation](https://www.dotnetperls.com/string-interpolation) I find it a little neater than putting the variables after the string but it's up to you. //all in all it's looking pretty nice for someone who is "rusty" and not programmed in a few years, good job. //The only other thing I would note that on the case statement for playing again, add a default switch case for anyone typing in something other than y or n. 
Removed: Rule 6.
This is incredible. I didn't know you could map commands this way. I can stop using Control for all of these now.
This is cool and so badly needed, good job!
My suggestion would be to have a global "log" table where every action on a file is recorded. It should contain columns for file name(or file ID) , modification type, previous size, current size, date etc. You should then have a second "mapping" table that indexes all of your files with a UID value. This way your file changes can be tracked to the global log table and you are taking full advantage of your Relational Data Base. You can expand on this and create tables for different file types maybe or maybe by drive or directory. Hope this helps. 
I got my first job in c# instead of java. :P
Short And Dirty Answer: You can use events. In the Form class, add the following just above the constructor: public event Action&lt;TextBox, TextBox, Textbox&gt; GameTick; In StartButton_Click, register the Game.GameUpdate method with the GameTick event: Game game1 = new Game(populationBox, infectedBox, ctiBox); GameTick = null //removes all previous subscribers in case you click start more than once GameTick += game1.GameUpdate; UpdateTimer.Start(); In UpdateTimerTick, we need to invoke the event: GameTick?.Invoke(populationBox, infectedBox, ctiBox); *Significantly Better Answer:* Change up the design a little bit, implement some clever data binding, perform magic with a few .NET tricks, and baby, you got yourself a stew: **Game.cs:** using System; using System.ComponentModel; using System.Runtime.CompilerServices; public class Game : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; private int _population; private int _infected; private int _chanceToInfect; public int Population { get { return _population; } set { _population = Math.Max(0, value); //ensures population is always &gt;= 0 OnPropertyChanged(); } } public int Infected { get { return _infected; } set { _infected = Math.Max(0, value); //ensures infected is always &gt;= 0 OnPropertyChanged(); } } public int ChanceToInfect { get { return _chanceToInfect; } set { _chanceToInfect = Math.Max(0, Math.Min(100, value)) //ensures input is between 0 and 100 OnPropertyChanged(); } } private Random RNG { get; set; } public Game(int startingPopulation, int startingInfected, int chanceToInfect, int seed) { Population = startingPopulation; Infected = startingInfected; ChanceToInfect = chanceToInfect; RNG = new Random(seed); } public void Update(long delta) { for (int i = 0; i &lt; Infected; i++) { if (RNG.Next(101) &lt;= ChanceToInfect) { Population -= 1; Infected += 1; } } } private void OnPropertyChanged([CallerMemberName] string propertyName = null) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } } **Form1.cs:** using System; using System.Diagnostics; using System.Windows.Forms; public partial class Form1 : Form { private Game Game { get; set; } private Stopwatch DeltaTimer { get; set; } private BindingSource DataContext { get; set; } public Form1() { InitializeComponent(); Game = new Game(1000, 1, 80, DateTime.Now.Millisecond); } private void Form1_Load(object sender, EventArgs e) { SetBindings(Game); } private void SetBindings(Game game) { DataContext = new BindingSource(); DataContext.DataSource = Game; txtInfected.DataBindings.Add("Text", DataContext, "Infected"); txtPopulation.DataBindings.Add("Text", DataContext, "Population"); txtChanceToInfect.DataBindings.Add("Text", DataContext, "ChanceToInfect"); } private void UpdateTimer_Tick(object sender, EventArgs e) { Game.Update(DeltaTimer.ElapsedMilliseconds); if (Game.Population == 0) { UpdateTimer.Enabled = false; DeltaTimer.Reset(); } else { DeltaTimer.Restart(); } } private void btnStart_Click(object sender, EventArgs e) { DeltaTimer = Stopwatch.StartNew(); UpdateTimer.Enabled = true; } } A few things: * It is considered best practice to prefix controls with their type abreviations. For example, textboxes are prefixed with "txt", labels with "lbl", combo boxes with "cbx", and so on. I used "txtPopulation, txtInfected, and txtChancetoInfect" instead of populationBox, infectedBox and ctiBox. This is a form of the Hungarian notation which *is completely unnecessary and against best practices by today's standards*, except when it comes to UI controls. * You should use a control that accepts numerical input instead of a textbox. If you type a single letter in any of the three textboxes, the program will crash. * The Game object now has an Update() method that takes a long delta. This delta is commonly used in games to figure out exactly how much time has passed since the last update call. I didn't use it with the code above, but look [here](http://gameprogrammingpatterns.com/game-loop.html) for why I added it. * The [CallerMemberName] attribute is one of my favorite attributes. If no string parameter is provided to the method, the string parameter will be resolved by the runtime to be the same as the name of the property. This is mostly a convenient thing. * Using data binding requires that the Game class implement the INotifyPropertyChanged method. This exposes the PropertyChanged event which is what drives the data binding. * The Game class now takes 4 parameters to be initialized. This is so that you can play around with different settings more easily. * The form's controls are automatically updated because we bound the relevant controls to the relevant Game properties. It is important to note that the strings must match the properties that are being bound. For example, in order to bind the txtInfected.Text property to the Game.Infected property, we must write the following: txtInfected.DataBindings.Add("Text", DataContext, "Infected"); * I also added code in the setter for the Game.Population method to ensure that the population doesn't fall below 0. I also added code in the UpdateTimer event handler to stop doing the game loop if the population hits 0. * There are some maths you can use to figure out the population/infected +- without having to loop through the infected. As the infected number grows, your program will grind to a halt. It shouldn't for a starting population of 1000, but with a sufficiently large starting population it will. You should look into the [Model-View-Presenter Pattern](https://msdn.microsoft.com/en-us/library/ff649571.aspx) as well. It is o-mazing for WinForms. The "Significantly Better Answer" is using some techniques from MVP, but even the better answer is a shitty attempt at it and I wouldn't recommend it as an example of MVP.
You can also make the `Game` class static so that it can be accessed everywhere. A `Game` property for `Form1` is cleaner though because it prevents a totally unrelated piece of code to access the `Game` class and mess things up.
In my other reply, I failed to compensate for different types. I decided to solve for the generic method only, since that was way more fun. using System.Collections.Generic; using System.Linq; using System.IO; using System; using System.Reflection; namespace _4reddit { class Program { static void Main(string[] args) { string filePath = @"C:\Users\Corie\Desktop\Assignment 1\"; DirectoryInfo di = new DirectoryInfo(filePath); List&lt;FileInfo&gt; fil = di.GetFiles().ToList(); List&lt;string&gt; lines = new List&lt;string&gt;(); foreach (FileInfo fi in fil) { lines.AddRange(File.ReadAllLines(fi.FullName)); } List&lt;RawData&gt; results = new List&lt;RawData&gt;(); foreach (string line in lines) { RawData resultingObject = new RawData(); string[] values = GetValues(line, ','); MapContent(resultingObject, values); results.Add(resultingObject); Console.WriteLine(resultingObject.AsString()); } } private static string[] GetValues(string line, char delimiter) =&gt; line.Split(delimiter); private static void MapContent(RawData target, string[] source) { Type targetType = target.GetType(); var props = targetType.GetProperties(); foreach (PropertyInfo pi in props) { var index = (Indexer)pi.GetCustomAttribute(typeof(Indexer)); string value = source[index.Index]; if (pi.PropertyType == typeof(DateTime)) { DateTime result; if (DateTime.TryParse(value, out result)) { pi.SetValue(target, result, null); } } else { pi.SetValue(target, Convert.ChangeType(value, pi.PropertyType), null); } } } } public class RawData { [Indexer(Index = 0)] public string FirstName { get; set; } [Indexer(Index = 1)] public string LastName { get; set; } [Indexer(Index = 2)] public DateTime Dob { get; set; } [Indexer(Index = 3)] public int Id { get; set; } [Indexer(Index = 4)] public decimal Balance { get; set; } [Indexer(Index = 5)] public string Status { get; set; } public string AsString() { return string.Join(", ", new List&lt;string&gt; {Id.ToString(), FirstName, LastName, Dob.ToString("yyyy-MM-dd HH:mm:ss"), Balance.ToString(), Status}); } } public class Indexer : Attribute { public int Index { get; set; } } } 
You don't write anything in *native code* in Xamarin (Except for importing native library bindings), by native, we mean the Android or iOS project level, from these projects, you can access *native apis* or features, and your code will be C#/ F#.. For what you asked about, look at Xamarin DependencyServices: https://developer.xamarin.com/guides/xamarin-forms/application-fundamentals/dependency-service/introduction/ Basically, you write the implementation for your GPS service in the Android project, and the iOS project and then you deal with an Interface from the PCL, that both platform's GPS service implements it..
Oh that's interesting! I didn't know these types of programs were available. Thanks for the info!
Circumstances honestly. I started my webdev career by doing Classic ASP using VBScript, which was horrible so as soon as I heard of the ASP.NET Beta I jumped ship to VB.NET which of course lead to me to C#. I've tried a bunch of languages since then, but I always come back to C#.
This is a C# area, but alright, I'll take a swing at it. first off, with a potentially massive dataset incoming, I would ensure that all datetime/timestamp comparisons were possible in the OAD type. This will enable a faster query time on the many datafields that will need to be compared. In your specific case, this should would not be overkill, and your performance would be increased noticably. In 1 table, lets call it "FileEvents" you will store a file id PK. In the same row, you will have a "Event id", that will reference a table of types, such as ID : 1 Event : Create ID : 2 Event : Modified ID : 3 Event : Deleted. On the original FileEvent row, you will include an OAD timestamp of when this event type occured. Then your SQL query, is basically a "Between" statement, "Where" event ID = X 
As a counterpoint to the Xamarin.Forms favoritism in this thread: The downside of Forms is also its greatest strength: unifying mobile platforms into a shared API. The reason this isn't always a good thing is that each platform is intentionally unique. For instance, Android has hamburger menus; iOS has tab bars. While they are both used for navigating, they are not 1:1 ideas. The hamburger menu is for top-level app navigation, while the iOS tab bars are for sub navigation in the current view. To create an app that truly feels at home on each platform, you'll have to remake the UI each time. Forms is more useful for cranking out an app quickly that doesn't prioritize a tailored UI for each platform (like data entry software).
The JVM is a solid piece of engineering. The language, meh.
Reified generics.
I'm pretty sure you need a Mac with Xcode installed to make an ios app in xamarin.
Certain math operations used to be faster. It takes alot more to build an application and especially software system / business platform. 
i think the more concise question would be "why have you chosen java instead of c#?" and pretty much the primary valid answer to that has historically been "cross-platform support". secondary answers include things like cost, not being a microsoft house, existing tech stacks, experience of devs, etc... i think most people will agree (especially at this point in time) that c# is superior as a language to java in just about every way. they both do almost exactly the same thing but c# is just straight-up more convenient to write than java is. not to mention that the .net framework is pretty convenient. as .net core/standard steadily increases in maturity, the old cross-platform argument is going to become more and more moot. and if oracle continues to get more and more shady with their operations and microsoft goes more and more toward 'openness', i think c# is going to quickly overtake java as the enterprise language of choice.
LINQ and PLINQ are absolute genius.
Now you're just being a parrot.
You do need that yes, but you don't need to actually open Xcode (other than once to accept the license/complete the installation) to develop your app is what I was trying to say. It's not like you're constantly switching between Xamarin Studio/Visual Studio and Android Studio/Xcode to do anything.
A problem I've encountered in similar projects is that the database describing the backed up files can get out of sync when a backup is interrupted while in progress. There are ways around this but it may be something to keep in mind, depending on your specific implementation and requirements.
Of course there is. Shaking, even dynamically is an old problem.
Gotta open it to add those certs too. Oh how I love signing the app with those dev certs.
My first job out of college, I was supposed to be a content/multimedia guy, editing videos and building Flash apps for the company website. I ended up pivoting into a developer role, first JavaScript, and then backed CMS work via PHP. After a few floundering CMS attempts over the next few years, we picked up Sitecore as our CMS vendor, and Sitecore is built on .NET. So I ended up learning Sitecore, OOP principles, strong typing, .NET, and C# all at once. I still work in Sitecore today, which means I still work in C# to this day. Tldr: I didn't pick the .NET life. The .NET life picked me. 
ummm.... I guess you are not pulling from the root correctly. var root = xml.Element(); var name = root.Elements("name").Select(x=&gt;x.Value); //... if I am wrong then it is.. var name = xml.Elements().SelectMany(x =&gt; x.Elements("name").Select(x =&gt; x.Value));
https://stackoverflow.com/questions/17771317/how-to-check-if-xml-value-exist#17771428 
Exactly this. Xamarin.Forms is primarily concerned with UI. Writing UI elements once, and having it output something sensible and familiar to Androids look and feel or iOS look and feel. Xamarin Forms is just an abstraction around iOS and Android SDK UI controls, navigation, pages, etc. So when you say give me a Xamarin Forms Label, you're getting an Android TextView and an iOS UITextView. I wrote a Forms project that made use of Bluetooth Low Energy beacons. Android and iOS have different ways of detecting those from their own SDKs. So in C#, I write an Android implementation and an iOS implementation to find those beacons. They both implement an interface with a method like `getBeaconsInRange()` then in my Forms code, I can use dependency injection service that uses the Android or the iOS implementation of `getBeaconsInRange()` that returns me a List of IDs or whatever.
When it was time to rewrite TS-Energy's front-end in 2009 (the software I still work in), I asked my boss for three weeks to try which approach to use, one week each: Cpp / Qt, Java / Swing, C# / WPF. At the end of the week, the prototype in C# was fully functional and the front-end had a clean separation from the code. The other two were not as advanced, functional and architecturally sound. When I did the implementation, I didn't know any C# or WPF, but I had experience in Java / Swing from my master's thesis and Cpp / Qt from classes. I'm still happy with that choice. 
If used carefully, it can be handy for exiting nested loops. 
No one was writing java and vb was looked down on. 
The fact that you are coding at all puts you ahead of 50% of the people starting cs. 
A few people have already commented. I'll add my two cents as well. I've developed a few apps using Xamarin over the past four years. When I first developed, the idea was that your core app logic would be shared between the platforms, iOS and Android. And you would create the UI for the applications separately for each platform. The guidance from the Xamarin team is that if you want to leverage the full capabilities of each platform's UI, you use this approach. Xamarin Forms is their cross platform UI framework that lets you define the UI once using XAML (the same XML based language that Microsoft used for WPF, Silverlight, and Windows Phone) and it applies to all platforms. Theoretically you could create your entire app using Xamarin Forms and it work on iOS, Android, Windows Universal, and there is a target for MacOS in beta right now. WRT platform features, they are all available to you if need them, but there are libraries that even abstract those away (like GPS, file storage, notifications, text to speech and others). You can create some pretty intricate applications using Xamarin Forms in terms of functionality and Look and Feel, and even with the limited set of controls that come out of the box for it, there are vendors that extend that set (like Syncfusion).
Ugh I see this all the time. People screaming "NEVER USE &lt;insert feature&gt;!!!!" because it's often used inappropriately. That is != to *never* having an appropriate use case. Here's a good use case - I need to break out of a nested loop and then skip a chunk of processing immediately after. I can either put in some elaborate workflow logic to make sure I'm bouncing out of both loops, probably followed by a set of if statements to bypass the downstream processing, or I can use a goto, and skip all of that with a single bit of code.
This was what I needed! It turned out to be the second variation, but slightly different. var name = xml.Elements().SelectMany(x =&gt; x.Elements("name").Select(y =&gt; y.Value)); Not sure why, but the second set of x's had to be y's. Do you know why?
I started programming a few years before 2010. Started with a book on Java but couldn't understand the whole main method being in a class or static methods in general so I quit for a while until I discovered Python, changed my life, no complicated boilerplate code just pure fun. So I used python a lot until I had a good grasp of programming (thankfully I started when dynamically typed languages existed, doubt I would have got a start in assembly, maybe in C). C++ was my next target but I felt it way to sense to get through (love it now but that's not the point), so since I was using VS and saw C#, I thought "hmmmm if C++ the new C then C# must be the new C++", so I gave it a go and haven't looked back. When I had some work though I spent most of my time scripting in Perl, it was ok but no Python or C#
Woot! Just did mt first ever real algorithm and reverse engineered the name. Soruce: https://pastebin.com/AseFuBJN &amp;nbsp; Essentially this unscrambled the name. However, it only works if you let it 100% completely solve the name... else it will put in a duplicate letter(s).
The language was actually fairly decent when it came out. C# owes a portion of its heritage to Java. It just hasn't aged or advanced very well or quickly compared to C#.
Get the school to buy a LinqPad educational license, it's $150 for up to 200 computers. It's a much better environment for simple programming than giving them VS or VSCode You can .Dump() winforms or wpf controls to the output page. I've dumped 2d drawing canvases using SkiaSharp and 3d using urhosharp. The kids might enjoy playing with that. If you get linqpad sorted out I'll knock you up a script 
Urhosharp is good too
All true. I've followed the progression (or lack thereof) of both over quite a period, in fact I've even used J++! C# keeps innovating and Java struggles to stay modern. I suppose this highlights the benefits of eschewing backward compatibility. Heritage doesn't write code.
Thanks, I needed a project idea, and this came to mind. I was gonna go and get all the sprites, and then color them like in the show (essentially black them out). Then I just decided to scramble the names.
I don't know how this works. However if it would cover running .NET software outside of the official runtime then it doesn't apply to Hastlayer since we don't do that: the processed software is not directly running on the FPGA but rather it's statically analyzed in its IL form to generate an equivalent hardware logic from it. (Also, there's Mono already. And now even the CLR being open source - at least one version of it, Core CLR - I'd find that quite curious. Though Hastlayer is using the standard .NET Framework.) If it would also cover analyzing .NET software then a lot of .NET tools (including ILSpy, what Hastlayer uses under the hood in a way) would have been already shut down.
In the debugger, put a breakpoint on the line "Customer newCustomer..." and look at the entries variable. My bet is that it doesn't have all the values you think it does, probably because the text file doesn't have valid rows. It's always a good idea to check the length of an array after a Split() call. If entries.length isn't 5, then you should either throw an exception or skip that line.
You're splitting the string into an array: `string[] entries = line.Split(',');` Then writing something like: `newCustomer.LastName = entries[1];` Now you're assuming the array is going to have more than just a single index, right? Well what if it doesn't, then what? One way is by checking the length of the array to make sure there is at least 6 indices before moving on to creating your new `Customer`: `if (entries.Length &gt; 5){ //create your customer }` When dealing with file IO, you'll need to account for data that's not in your expected format 
Thanks for the quick reply, i did as you said and i think you are correct, it says under the entries varible {string[6]}, however i thought this was correct as array indexes start from 0..? The txt file is littered with columns such as these: Daeneress,Stormborn,20-08-1995,14,569.00,VIP John,Dorian,28-09-1984,15,32998.00,nonVIP Turk,Turklton,28-10-1984,16,42000.00,nonVIP if that helps. Could you please elaborate on how i would throw an exception? Thanks again!
Thank you, sorry im still having trouble wrapping my head around this all, the .txt format is laid out as such: Daeneress,Stormborn,20-08-1995,14,569.00,VIP John,Dorian,28-09-1984,15,32998.00,nonVIP Turk,Turklton,28-10-1984,16,42000.00,nonVIP With each entry having 6 indices. However the error continues, would i use the suggested 'if'statement to override this? Cheers
I'm willing to bet that you're reading in a blank line at the end of the text file, then trying to split it by a comma, which would just leave you with a single-index array. Then you're attempting to get the value from an index that doesn't exist in that array, which then throws your exception. You would implement that check by changing your code to this: string[] entries = line.Split(','); if (entries.Length &gt; 5) { Customer newCustomer = new Customer(); newCustomer.FirstName = entries[0]; newCustomer.LastName = entries[1]; newCustomer.DateOfBirth = entries[2]; newCustomer.Id = Int32.Parse(entries[3]); newCustomer.Balance = Decimal.Parse(entries[4]); newCustomer.Status = entries[5]; client.Add(newCustomer); }
Ahhh i get what your saying. Would that mean the problem would be within the .txt file itself? How would i go about remedying the issue? Ill give it a go, thank you! Awesome that seems to do the trick, cheers it is much appreciated!
Thank you this has taught me a whole lot and solved multiple issues i was having, it is hugely appreciated!
&gt;vb is looked down on. FTFY
1. Don't use arrays. Ever (unless you know what you're doing). There are tons of predefined and easy to use collections for every imaginable purpose. You need a List&lt;string&gt; for names, not array. It will automatically reallocate memory when needed and is suitable for situations when you don't know the amount of elements beforehand (and you don't know how many names are in the file). 2. Use `using` construct to work with files. It will close file automatically even in case of exception or thread abort. using(var file = new System.IO.StreamReader("C:\\users\\uehlb\\Pokemon.txt")) { //... } 3. Do not spread out "magic numbers", you can use array (or collection) length to calculate random position. 4. Instead of wile loop with a counter you can use `for` loop, specifically designed for this purpose. You need to restructure your Guess function. Make it an infinite loop, then in case when user selects "No" just `return` from the method, and when he selects "Yes", just continue the loop.
To read the names from the .txt file you can also use a built-in function: string[] pokemonNames = System.IO.File.ReadAllLines("C:\\users\\uehlb\\Pokemon.txt"); &gt; I also couldn't figure out how to return to Main() from Pokemon.Guess(). I tried to call it via ConsoleApplication1.Program. but I didn't have a Main option to call. If you call any function it will stay there until it's done (returned or reaches the end of the function). To quit early and return to the `Main()` function in the `Guess()` you can use `return;` Not sure if this helps with the issue you had. 
&gt; bool Success = pokemonNames[pokemonID].ToLower().Contains(Answer) ? true : false; or just bool Success = pokemonNames[pokemonID].ToLower().Contains(Answer); because `pokemonNames[pokemonID].ToLower().Contains(Answer)` already returns a bool :)
I did try to use return;, but it just exited the application :(
Oh, wow. Thanks for taking the time to write all of this.
I assume something like this would be best then: https://pastebin.com/QMf9upJq
It's because the Main() function ends after the call to `Guess()` function because there's almost no code after it: switch (Convert.ToString(Choice.KeyChar)) { case "1": Pokemon.Guess(); // If this function is done.. // .. it continues here. break; // Break exits the switch case "2": break; } // After the switch no more code. // Main() is done and console application exists :) 
Not really, you're actually reading the entire file into a single string, not line by line. Your code was pretty much correct, read it like this: string line = null; while ((line = reader.ReadLine())!=null) Names.Add(line);
As an amature developer who used to be a paid C# developer, I want to use Xamarin and VS for a multi platform app. Eventually I decided to use HTML5, JavaScript, and VS Code. I've really enjoyed it so far. The next step is to find out how hard it is to convert to an Android and IOS app. It should be fun. I'm actually looking forward to doing it.
I lead java projects more than a decade ago, it was hard to get everyone on the same page. With C# you install visual studio, download the project and you're good to go. Java tends to draw in the Mac junkies who insist that coding java is better on a Mac, even if it's meant to run in windows.
What I don't quite get is: while ((line = reader.ReadLine())!=null) I understand what the over all code does, but for some reason that part is fouling me up. To me it's saying this: https://pastebin.com/wZvLxCDj, but that code only gets about half of the items out of the text file, 76 to be exact, and the text file actually has 151. At least in my head I see it that way. Are we not saying, line = reader.ReadLine() and then saying continue to read as long as the line is not empty, and then add it to Names? 
Ok, let's spread it a bit We open a file using (StreamReader reader = new StreamReader("C:\\users\\uehlb\\Pokemon.txt")) We read the first line and store it into the variable string line = reader.ReadLine(); Then we check if this variable actually contains the line (and we didn't reach the end of file) while (line != null) And then we add this line to our list Names.Add(line); What do we miss here? We read the first line, check it, add to list of names, and check and add again, and check and add again, and we never actually read the next line. It throws a memory error because you keep adding the same first line over and over again. To fix the code you need to do the following: 1. Open the file 2. Read the first line 3. If line is not null - enter the loop 4. Add line to the list 5. Read the next line 6. If line is not null - continue loop You can write it in any form (while loop, do-while loop, whie(true) loop, etc). 
How come something like this randomly skips some lines: https://pastebin.com/wZvLxCDj, but those lines appear to be only odd lines. As in it skips the first line, the third line, the fifth line and so-on. Resulting in 76 items out of 151. **EDIT: OOOOHHHH, cause the first line is read, then the second line is read, and only the second line gets put in...** I feel so dumb right now, lol. Thank you very much.
&gt; I'm only guessing it's Xamarin.Windows No, there is no Xamarin.Windows, you just build a regular UWP app. If you're using a shared Core library for your business logic you just reference it. Since you're in C#/.Net anyway, there's no need to wrap the API and convert it to.. C# and .Net... 
For a lot of "advanced" features, there are plugins (essentially nuget packages) available, so you don't have to write all the platform specific implementations and can write most of the code in the shared logic. https://github.com/xamarin/XamarinComponents
The other benefit of using Xamarin Native (or whatever they call the non Forms way) is that you're using the exact same files for the UI as native Swift/Obj-C or Java apps. You can just take an axml file or a storyboard for existing projects and use it with minor adjustments (naming objects in storyboards so you can access them in C# is the only thing I can think of that you'd need to do). When migrating existing apps or if the new app needs to look and feel exactly the same as a few existing apps this is a big advantage.
You didn't ask, but the `ToList()` isn't necessary. You can just do `var lines = File.ReadAllLines`. `lines` will be a `string[]` array, and you can iterate over it with the existing foreach loop. Also, the `File.WriteAllLines()` immediately after reading the file just overwrites the file with the same content. You can delete that line of code.
Remove the empty line at the end of the file. I wouldn't bother, though, just use it as-is since the code will ignore empty lines now.
Removed: Rule 4. You'll have to make an attempt with concerted effort first. If you run into specific issues with the code that you can't resolve, feel free to post the along with thhe relevent code.
Enums are better in Java
Proper generics , Structs, Operator overloading, Enumerables, LINQ, Properties, Delegates, Events, Yield returns, Unsafe, Dynamic, Type inference, Unchecked exceptions, Null propagating and coalescing operators, Tuples, String interpolation, ref and out parameters, Expression bodies, Object initializer syntax, Dictionary initializer syntax, Optional and named parameters, Extension methods, etc.
Yes my fault, it's the scope of the arguments. X is available in the select.
Yeah, I've been using VsVim for years and just learned about it!
Okay thanks!
To explain that a bit better this could be expanded to... Xml.Elements().SelectMany(SelectManyMethod); public IEnumerable&lt;string&gt; SelectManyMethod(XElement x) { return x.Elements("name").Select(y =&gt; y.Value); } C# converts the Lambda into an anonymous method internally, when it compiles. This is true for most of the Lambda syntax, unless the type is an Expression&lt;Func...&gt; in this case it creates a meta method that isn't compiled at compiled time.
Standard library, WPF, Visual Studio etc.
If all VB programmers quit programming, overall I suspect the global .net programming productivity would increase by 20%...
Let me know if you need more help. This assignment was fun. I would be willing to help any time :-) 
Enums are stupid. Use real classes made of static / const fields. 
upvoted and commented since I'm also looking to use vscode for scratch c# scripts
That a forms library that'll handle your data location gathering needs. 
On top of what others have mentioned * Extract out the loading of the 'mons names into it's own function - this keeps your cleaner and reduces the number of things that the Guess method is responsible for * The comment "//ToLower is used so that the first letter of the name is not capitalized as this can make it easier to guess." **is a great comment!** It explains the reason for something that might not be immediately clear from looking at the code. Comments like "End of something" or "Beginning of something" are not necessary, as the code itself shows us that (Additionally, these comments indicate that the code between them should be in it's own method (as I mentioned above) * Best practices for using Random, is that you should initialise a single instance that is used everywhere throughout your application, instead of initialising a new instance every time you need it * Because Guess calls itself, you could (*theoretically*) end up with a StackOverflowException if someone plays enough games in a single run, try to separate the game logic out from the game flow itself, additionally you might end up with memory issues because each time Guess is called it loads up the names into a new list (my knowledge here is admittedly a little fuzzy, IIRC multiple instances of the same string don't consume additional memory, however each list will contain a pointer to the string, so that might crank up the memory. But if you were creating a list of classes instead of strings, that would definitely increase memory each loop) * You indicate that people need to press "Y / N" to reply/quit, however your current logic will result in any key pressed, except "Y", to quit the game * When the user has used up all their guesses, you tell them to "Please try again", however they won't be able to because the current game will be over. I would move that Console.WriteLine statement into the if block beneath it. (Personally I would then change the if to be "if (numOfGuesses &gt; 0)" with an "else", but that's just a preference of mine, and others might disagree) * The hardcoded path to the 'mon list is not ideal, as if someone else were to run the application it would have to exist in that exact location, as you mention, you might be better served by not using a file, but as you are for now I would look to either: accept an argument to your app which is the path to the file, look into putting into app.config file for your app, or embedding the file itself as a resource into the application
I'd do a Where into a Select that takes the line and passed it into a Customer, but that's just me 
[Deconstructors :-D](https://andrewlock.net/deconstructors-for-non-tuple-types-in-c-7-0/)
Try going through the process of making an application that you make up. For example, you can try to make an program that creates a database where the user can store their personal information. You can setup different access for higher level users to view the entire database. You can have the program separate people in the database into different groups based on the information they enter. These are just random ideas. After you have your program planned out then you can look up how to implement the idea. I'd recommend finishing that Brackey's playlist first, however, it's not too long and it teaches the super basics. If you don't understand what he's talking about then ask in a forum/reddit or rewatch that part multiple times. I would gain even more insight after revisiting basic concepts that I thought I had pinned down. You can even mess around with the code yourself to figure it out a little more. _______________________ I'm also teaching myself c# at the moment so I know where you're coming from. These c# books are definitely boring and my mind also wanders when I read them. It's because they aren't novels. They don't tell a story so you can't read them like a story. Imagine reading a math textbook word for word. There isn't a plot twist at the end of the switch statement chapter. It just tells you how to write a switch statement. ________________________ TL;DR: Finish Brackey's playlist then try fiddling with visual studio. Make random small programs and reference a book or the online library that Microsoft has. Also, creating a project in visual studio using the Windows Form App might help you. You're dealing with a much more visual way of creating a project. Understanding the basics before this is essential but it's really fun. There's so much more depth but if this helps you begin that first step then it's worth doing. Hopefully this helps you like it did me. 
So this is actually a thing. I think it is time to learn Vim!
That is like the only good thing I can say about Java. Well, maybe a better ecosystem for multi-threading tasks too (you can't solve every problem using PLINQ and such)
Here are my thoughts: * GameList isn't really a class * NumberGuess shouldn't be a method, more of a class. * There's too much happening in "public static void NumberGuess()". Not in line with the KISS principle. I suggest the following framework: https://pastebin.com/N8zgrNd5
I might do that too. But I wouldn't teach that to someone who is quite obviously a complete beginner. Learn the basics first. Add Linq in only after the basics have been mastered.
Holy shit I can't wait to try this out. Maybe I can free up some commands from resharper/visual studio and have a little more breathing room with my keybindings. I miss redo in Vim.. Great little article!
Something that I feel is important: you should avoid using Random like that. The way you use it isn't bad really, but creating instances of Random can lead to strange performance. It gets more difficult with parallel programming, but I don't think you have to worry about that yet. Per the documentation, &gt; Initializing two random number generators in a tight loop or in rapid succession creates two random number generators that can produce identical sequences of random numbers. In most cases, this is not the developer's intent and can lead to performance issues, because instantiating and initializing a random number generator is a relatively expensive process. &gt; Both to improve performance and to avoid inadvertently creating separate random number generators that generate identical numeric sequences, we recommend that you create one Random object to generate many random numbers over time, instead of creating new Random objects to generate one random number. &gt; However, the Random class isn't thread safe. If you call Random methods from multiple threads, follow the guidelines discussed in the next section. More: https://msdn.microsoft.com/en-us/library/system.random(v=vs.110).aspx I recommend using Random as a private static field, or even better, a static getter created upon construction: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties You'll need to implement a static constructor. Just use static instead of public. Also, I do recommend reading the Microsoft documentation! That's one of the best things about .NET.
Aaayyy is also makin a Pokémon text based game, though it's prob poorly made cause I'm a beginner. If ya wanna see it I'll give you the link, though it's not finished as of now. 
Honestly, there's a multitude of reasons. I have coded both Java and C# professionally (and also for fun, on my own time), and C# just appeals more to me. The language features that spring to mind are such things as actual generics that are type-checked at runtime, not just compile time, better syntax (well, that's obviously subjective, but I certainly think so), and LINQ (both for SQL, Lambda expressions, and collections extension methods). Plus, at this point, my Java is so rusty I'd be wary of going back to it, honestly. Haven't coded any Java at all since 2011.
I haven't chosen c#, c# chose me.
You could use extension methods to "add" methods to enums
The best advice would be to learn how to use the built-in debugger. It's incredibly powerful. 
Removed: Rule 3. Maybe give /r/math a shot. You'll want to include more information I suppose about the type of curve/spline it is.
Okay thanks!
I had a similar issue some time ago, and I created a [gist](https://gist.github.com/Herbstein/ab95dba03d2bf133ad60) to remember the solution. It's based on a [response](https://stackoverflow.com/a/34733258) I got on stackoverflow. 
Sorry it took so long to reply (i had already used an absolutely horrible(legibility wise) method that may even be hurting the performance of this game. and had spent a few hours working on it to get it to work and by the time i re-checked this post this answer was already like 4 hours old...), But anyway, i will definitely dig through all of this information and implement it in later projects. :D 
What you want to look into is something called spline interpolation. I haven't tried it but there appears to be c# bindings for a library called tinyspline that might help you out https://github.com/msteinbeck/tinyspline If it were me, if i had enough points, i would probably just find the weighted average between two points to approximate the line but based on your picture you are probably looking for something more advanced like spline interpolation
What exactly are you needing assistance with?
That's exactly what I was about to post :D
More or less just some guidance on creating a deposit method that actually works as i get continuous error. Sorry for the lack of clarity i am very new to c#, cheers!
I could kiss you. Thank you so much
Depending on what DB backend you're using, it may be doing all that for you, in the form of a log table(s). You should definitely check your documentation before you duplicate any effort. Edit: in re-reading your post, I'm not sure if you're interfacing with an external DB, or using something you've created. If it's homegrown, definitely look up "log table design", to see what others have done. Something like this may help. https://stackoverflow.com/questions/201527/best-design-for-a-changelog-auditing-database-table Good luck!
Well looks like someone can start from here: https://github.com/scriptcs/scriptcs/wiki/Compiling-%28and-caching%29-to-a-.dll
Hope the code makes sense. It's made for unity, but should be relatively easy to adapt to basically anything. It also has issues of there isn't enough points in the list. That is pretty easy to account for though. 
Could you post the whole code? use pastebin.com or something - it would be easier to find the problem. Right now we can't see the top of the code - I suppose when you break from the while loop you run the whole code again (maybe, another while there?) and that's why you see the main menu again (the break only break for the current loop, it won't affect the other loops)
Here is the main program https://pastebin.com/n55jYYzj and this is the Customer Class https://pastebin.com/KiUv5TYc Deposit method has errors, just another problem i am trying to wrap my head around haha, thank you for the help!
Use System.IO.FileSystemWatcher https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher(v=vs.110).aspx to detect changes to files and write to the database when events are fired, or queue them up and flush them in batches. As far as table setup, if you have access to Sql Server 2016 you can use temporal tables and get away with 1 table https://docs.microsoft.com/en-us/sql/relational-databases/tables/temporal-tables If not use 2 tables one to track the file and one to keep track of the changes, something like this maybe create table my_files ( id int not null identity(1, 1) primary key, file_path varchar(max) not null, first_seen datetime not null default(getdate()), last_updated datetime not null default(getdate()), constraint chk_unique_file_path unique (file_path) ) ------ create table my_file_change_types ( [type] varchar(25) not null primary key -- probably want a surrogate key/id here but eh ) insert into my_file_change_types values ('Whatever-type-of-change') ------ create table my_file_changes ( my_file_id int not null references my_files(id), changed_on datetime not null default(getdate()), change_type varchar(25) not null references my_file_change_types([type]), old_value varchar(max) null, -- first entry per file/type you might want as null new_value varchar(max) not null, primary key (my_file_id, changed_on, change_type) -- not sure if you care about uniqueness here )
Which error?
So this looks like a great start. You've got a customer object which means you can create customers at will. You also have some deposit logic that should allow you to deposit money to a customer. All you have to do is link them up! So some questions are- how does deposit know which customer is being affected? Where are you creating customers? Can they get a view balance method to see if their deposit worked? Keep it up! You're almost there.
Luckily I am using Unity too so it works perfectly. Admittedly, I don't fully understand it at the moment. But I am sure it will become clearer as I use it.
Currently it is getting an expected class error one the line public int Deposit(decimal depositAmount) To do with 'int'
Thanks for the encouragement! As for the first question, i am also trying to figure out how to identify the object via their 'Id', this is another problem i am working on currently, also the Customers are created from an external .txt file which i have split and created objects with within my main class. The View balance method is a great idea! i was going to have it return the value of balance + depositAmount but creating a separate method does seem more logical so will give that a shot as soon as i have this method sorted :) If it helps here is the main class also https://pastebin.com/n55jYYzj
I misread your post. My method only finds the straight line path between the two. I would look into the tutorial written by [Catlikecoding](http://catlikecoding.com/unity/tutorials/curves-and-splines/). 
The problem lies with your method signature: &gt; public int Deposit(decimal depositAmount) This signature declares that your method should return an int. The compilation error is because you aren't returning anything from your method when you've declared that it should return an int. Since it doesn't look like you intend to return anything from the method you'll want to change the method signature to have a return type of 'void': &gt; public void Deposit(decimal depositAmount) 
Thats originally what i had but unfortunately it returns the same error :/
It seems like you've found a solution, but at the same time you should really try and use an actual library for this. There are actually multiple ways to connect a curve between all those points, with Bezier splines and NURBS curves being the two most widely used. Depending on how the curve is constructed, you'll get slightly different outputs. I used to do a lot of programming within a 3D NURBS modeler and this is literally a one line call to get a point in a curve from 0-1. I'm not aware of any stand alone library in C#, but things like game engines generally have this kind of functionality. Maybe Unity does, i don't know. I would imagine that there are C++ or java libraries you could leverage for this as well.
It looks like your method is outside the Customer class? After public String Status { get; set; } You have a closing curly brace, meaning your method is not declared inside any class.
I appreciate that well thought out observation. What do you base that on?
The other issue has been pointed out by [maskaler](https://www.reddit.com/r/csharp/comments/6t0e70/simple_deposit_method/dlgz5tx/)
I hate to break it to you but that doesn't reverse engineer anything. What your function does it takes the unscrambled name, copies it over the scrambled name, and then builds a string of the "unscrambled" name to return. The body of the function might as well have been return Name; 
My first job after uni was a graduate C# developer. I enjoyed it more than java which is what I used at uni. At the time, visual studio 2008 was light years ahead of anything java had to offer. Having tried java again in 2015/16 VS is still far better than the competition. I also like the all in one solution that MS provides with VSTS, Azure and VS 2017. Having everything work together so seamlessly is worth the additional cost of VS and Azure over the competition.
Okay, that more than doubled the speed, (but it's still pretty slow compared to LINQPad5. Here's a speed test in PowerShell: PS C:\Users\testadmin&gt; $(Measure-Command {scriptcs "$HOME\HowToRunCSharpInVisualStudioCode.cs"}).TotalSeconds 5.3326025 PS C:\Users\testadmin&gt; $(Measure-Command {scriptcs "$HOME\HowToRunCSharpInVisualStudioCode.cs" -Cache}).TotalSeconds 2.3146295 So, in Visual Studio Code, the key is to add something like the following to your settings.json: "code-runner.executorMap": { "csharp": "scriptcs -Cache" } The problem with this is that the -Cache parameter needs to come *after* the location of the .cs file that scriptcs plans on running, but the configuration setting as I have it written above ends up doing something like the following: [Running] scriptcs -Cache "v:\CSharp\CSharpDrafts\LocalOnly\tempuembvvabls.cs" Unexpected argument: v:\CSharp\CSharpDrafts\LocalOnly\tempuembvvabls.cs [Done] exited with code=1 in 0.474 seconds I tried changing the setting to the following (since I noticed that's how it's written for other languages' configuration in the coderunner extension)... "code-runner.executorMap": { "csharp": "scriptcs $filename -Cache" } ...but this didn't work either... [Running] scriptcs $filename -Cache "v:\CSharp\CSharpDrafts\LocalOnly\tempxvxufrjxsz.cs" Unexpected argument: v:\CSharp\CSharpDrafts\LocalOnly\tempxvxufrjxsz.cs [Done] exited with code=1 in 0.499 seconds I'm sure there's something really fundamental about how settings.json works that I'm missing. I'll try and cross post over at /r/vscode/
Oh no! It works with my array of vectors. I don't know why but it does! I didn't have to change a thing
Perhaps you should try to get more on your own and pose more specialized questions: You might have a look at: * https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/ * And especially this comment: https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/cy85z2z/ You literally open for every step you must take one new thread here! That's not the right way to complete **homework**!
my suggestion would be not to use mutliple ifs but one switch-case or a dynamic method to map numbers to methods. here is an example how to do both and how to search for objects with a specific value in one or more of its fields/properties: static (Action action, string name)[] actions = //ValueTuple, requires C# 7 or the NuGet Package ValueTuple { (DoSomething,"find by name"), (DoSomethingElse, "find by age"), }; static Person[] ExampleData = { new Person("Peter", 14), new Person("Hans", 59), new Person("Herbert", 99), new Person("Gisela", 55), }; static void Main(string[] args) { ActionArray(); //or SwitchCase(); } static int GetUserInput() { int result; while(!int.TryParse(Console.ReadLine(), out result)) { Console.WriteLine("input is NaN"); } return result; } static void SwitchCase() { //hard-coded output Console.WriteLine("0 : find by name"); Console.WriteLine("1 : find by age"); while (true) { int input = GetUserInput(); switch (input) { case 0: DoSomething(); break; case 1: DoSomethingElse(); break; default: Console.WriteLine("invalid input, try again"); break; } } } static void ActionArray() { for (var i = 0; i &lt; actions.Length; i++) { Console.WriteLine($"{i} : {actions[i].name}"); //dynamic output } while (true) { int input = GetUserInput(); if (input &lt; 0 || input &gt;= actions.Length) { Console.WriteLine("invalid input, try again"); return; } actions[input].action(); } } static void DoSomething() { //example for search-by-name with for-each-loop Console.WriteLine("enter name"); string parameter = Console.ReadLine(); foreach (var x in ExampleData) { if (x.Name == parameter) { Console.WriteLine(x); return; } } Console.WriteLine("Person not found"); } static void DoSomethingElse() { //example for search-by-age with Lambda Expressions and tricky operators Console.WriteLine("enter age"); int parameter = GetUserInput(); Console.WriteLine(Array.Find(ExampleData, x =&gt; x.Age == parameter)?.ToString()??"Person not found"); } } class Person { public readonly string Name; public readonly int Age; public Person(string name, int age) { Name = name; Age = age; } public override string ToString() { return $"[Name : {Name}, Age : {Age}]"; } }
Removed: Spam.
No problem. Writing horrible code comes with the territory. I read an article awhile back that said something along the lines of "...if you look at code you had written from 6 months ago or older and you aren't disgusted, you've stopped learning." I pretty much take that sentiment to be canon. My github is pretty slim. I've deleted all of my repos that were, frankly put, embarassing, so it looks like I haven't done a lot lol.
Your curly braces are wrong. Check those and come back to us.
So you have a list of customers. Is there some way to exhaustively go through it checking each ones id? Hint: you do it when you read the text file
Use a try catch block: try { foreach (var line in lines) { string[] entries = line.Split(','); if (entries.Length == 6) { // do something with your data } else { throw new Exception("Invalid column length"); } } } catch (Exception ex) { Console.WriteLine(ex.Message); }
Thanks for sharing, being a pet project there is no limitations and the path of least resistance is preferred so if this means picking Product X for the DB I am fine with that. 
Thank you for taking the time to write this, will check out SQL Server 2016
Like I wrote in another reply: Learn to use the very good built-in debugger instead.
Why initially? It's what we use at work for application development. If I had to start from scratch on something now, I can't imagine why I'd use Java. It'd have to offer some really huge fundamental advantage, and as others have said, Visual Studio, LINQ, the base class libraries - all just work really well.
Your Deposit method is declared outside of the Customer class body. Look closely at your brackets. You need to CTRL+C CTRL+V the Deposit method just below the Status property but above the last curly bracket. After that, you are going to get an error that says the method does not return an int. Change Deposit's declaration to the following: public void Deposit(decimal depositAmount) Note 'void' instead of 'int' as a return type.
Could just do: var names = new List&lt;string&gt;(File.ReadLines("names.txt"));
https://i.imgur.com/hUNAo.jpg
This is the ReadStream method: public static byte[] ReadStream(Stream responseStream) { var buffer = new byte[16 * 1024]; using (var ms = new MemoryStream()) { int read; while ((read = responseStream.Read(buffer, 0, buffer.Length)) &gt; 0) { ms.Write(buffer, 0, read); } return ms.ToArray(); } } 
Okay, so this may be dumb but... why aren't you using the AWS .NET SDK for this?
There's no such thing as dumb questions :) the AmazonService is a wrapper for the .NET SDK. The getObject returns Amazon's GetObjectResponse
Ahh. Cool. :D
Here's the code I use: var request = new GetObjectRequest { BucketName = bucket, Key = key }; var s3Response = await s3.GetObjectAsync(request); Response.Headers.Add("Content-Length", s3Response.ContentLength.ToString()); return new FileStreamResult(s3Response.ResponseStream, "application/unknown"); 
As a counterpoint to your counterpoint, Xamarin Forms allows you to create a branded experience that doesn't necessarily "fit" on each platform but expresses your UX and allows you to unify it across all platforms. Look at Facebook for example. It looks the same on iPhone and Android. The apps I've built (and am currently building) using Xamarin.Forms went far beyond the basic "data entry software" and even though they didn't use the platform standard conventions, are quite usable and discoverable.
If you want to code your app with HTML5 to target mobile, look at Cordova. There is also React Native and a few other frameworks like it.
It would be neat if it restarted compilation after each keystroke, rather then when you hit run.
This exactly. Most of the time when your code isn't working, it's because you're assuming it's working a certain way but it actually isn't. Stepping through it in the debugger shows you how it is working, as opposed to how you THINK it's working. There are two code tools I can't live without: a debugger and version control. I can't imagine life as a developer without either of them.
Awesome, thanks! I'll give that a try later tonight when I get back to my laptop :) 
If you already have an iOS app I would ignore xamarin.forms for now and just use xamarin.ios to get an simple example working. It will use a lot of the same libraries your familiar with but they will just be in C# which takes some getting used to. I would recommend forms to start for anyone who is not familar with android/ios and has only done C# UI in windows.
I have already replied on a different thread you made earlier. And to help you out with the specific issue you reference here, I have added something to that solution. if you add a break point on the last '}' of the main method, you can inspect all the values of your files. using System.Collections.Generic; using System.Linq; using System.IO; using System; using System.Reflection; namespace _4reddit { class Program { static void Main(string[] args) { string filePath = @"C:\Users\Corie\Desktop\Assignment 1\input_assignment_1.txt"; DirectoryInfo di = new DirectoryInfo(filePath); List&lt;FileInfo&gt; fil = di.GetFiles().ToList(); List&lt;string&gt; lines = new List&lt;string&gt;(); foreach (FileInfo fi in fil) { lines.AddRange(File.ReadAllLines(fi.FullName)); } List&lt;RawData&gt; results = new List&lt;RawData&gt;(); List&lt;string&gt; errors = new List&lt;string&gt;(); foreach (string line in lines) { RawData resultingObject = new RawData(); string[] values = GetValues(line, ','); if (values.Count() == 6) { MapContent(resultingObject, values); results.Add(resultingObject); Console.WriteLine(resultingObject.AsString()); } else { errors.Add("Line: " + line + ". Did not result in six fields."); errors.Add("Values found: " + string.Join(", ", values)); //Handle the error, it should be 6 input fields pr line of text. according to your spec. } } } private static string[] GetValues(string line, char delimiter) =&gt; line.Split(delimiter); private static void MapContent(RawData target, string[] source) { Type targetType = target.GetType(); var props = targetType.GetProperties(); foreach (PropertyInfo pi in props) { var index = (Indexer)pi.GetCustomAttribute(typeof(Indexer)); string value = source[index.Index]; if (pi.PropertyType == typeof(DateTime)) { DateTime result; if (DateTime.TryParse(value, out result)) { pi.SetValue(target, result, null); } } else { pi.SetValue(target, Convert.ChangeType(value, pi.PropertyType), null); } } } } public class RawData { [Indexer(Index = 0)] public string FirstName { get; set; } [Indexer(Index = 1)] public string LastName { get; set; } [Indexer(Index = 2)] public DateTime Dob { get; set; } [Indexer(Index = 3)] public int Id { get; set; } [Indexer(Index = 4)] public decimal Balance { get; set; } [Indexer(Index = 5)] public string Status { get; set; } public string AsString() { return string.Join(", ", new List&lt;string&gt; {Id.ToString(), FirstName, LastName, Dob.ToString("yyyy-MM-dd HH:mm:ss"), Balance.ToString(), Status}); } } public class Indexer : Attribute { public int Index { get; set; } } } 
Concerning Xamarin.Android... I like the opportunities that Xamarin provides to us, but some of the errors you get when things aren't working are just god-awful. I've had several issues with deployments being stuck on a "zipalign" step. I can't remember how I solved this the first time, but yesterday it happened again and I had to restart Visual Studio, then it would deploy to an emulator. Yesterday I had a really shitty error: The file "obj\Debug\android\bin\packaged_resources" does not exist. obj is a generated directory, so this file should just be generated during building. After a while, I found out that the solution to this problem was to updage my Nuget packages.... Seriously. They couldn't just tell me that, they had to give me an error which seemingly doesn't make sense. I've had several more meaningless error messages like the one above. It's great when it works but when they give me these error messages, I hate it. 
Swing GUI is inferior to Forms, and WPF. Linq, and its integration with Entity framework. Razor. Resharper is an invaluable tool, but goddammit I wish they would performance enhance that slow pile of junk. Constantly having to unload projects, to clear cache and what not, in order to have meaningful intellisense and code analysis is just a bore. As programmers we are allowed to complain when our tools are cumbersome, and we should get it fixed.
Game developers are probably the most under-paid and over-worked developers in software. If you want to get employed as a game developer then go for it, but as for what you'll be "better-off" learning, you've got to do something you can be reasonably happy doing. If you want the most money you can get developing software whilst employed, probably focus on becoming a full stack web developer.
Thanks for the tip! I'm finding a bunch of cool frameworks. I'll definitely look into Cordova.
Doesn't your "y" key work?
 var result = await mKpiService.QueryAsync(); return new OkObjectResult(result);
Sounds pretty awesome, and bet the kids really liked showing off their creations.
I assume I did a spelling error, can you tell me where. I'm Swedish so my English isn't prefect ☺
I especially like the idea of assigning ReSharper commands to VsVim bindings. Here is two that I use constantly. map &lt;Leader&gt;&lt;/&gt; :vsc ReSharper.ReSharper_LineComment&lt;CR&gt; map &lt;Leader&gt;&lt;?&gt; :vsc ReSharper.ReSharper_BlockComment&lt;CR&gt; My leader is backslash. So I type backslash forwardslash to comment the current line. backslash shift+forwardslash to comment a block (typically whatever I've already selected in visual mode).
C# def ideal for teaching newbies. Easy to get stuff on screen and intellisense practically types for you.
Bunch of correctly spelled words containing y in the post at a glance. Point out the error because now you just sound like a douche bag.
They really did. They were so proud showing all that they had learnt to their parents 
Just a few words to edit, miss spelling (corrected) format. Planed(planned), Chans(chance), ment(meant), the(they),three(there), what (want)
Haha, intellisense typed too much for some of the kids so I hade to turn auto off for some of them. When stuff happened automatically they often didn't realize something had happened.
Thanks, I didn't find the "three" I was supposed to change but I corrected the other errors
This should help get the rest squared away, * On the last day I had *planed*... (planned) * extend on that project as *the* wanted... (they) * I told them to ask if *the* wanted to do something *the*... (they) * so *the* could show... (they) * *the* all seemed happy... (they) I misread the sentence on that three (my bad). When we read, the brain tends to "auto-complete" the sentence/idea, so when you said,"... end of day three". I was thinking, end of day there. No worries.
This is some next-level shit right here is what it is. A+.
Dude it was time to learn Vim forever ago. Welcome to enlightenment. ;)
I'd say just use a book that gives a Win32 API reference. I'm partial to Charles Petzold's Programming Windows that gives you detailed information on how to do practically anything you can imagine using the Win32 API. The rest is just knowing how to P/Invoke those commands.
This sounds like a It went better than expected
Thanks!
Absolutely! They learnt a lot faster than I thought they would and my worries about it being boring where completely unnecessary.
Thanks, I'm definitely thinking about getting a Petzold book.
http://pinvoke.net/ It's a great resource for all Windows API interop code.
I wanted to point it out because all "they" words were spelled "the" and I'm certain you know the difference. Just wanted to point it out in a friendly way but obviously I failed
Well done. Pretty good of you to react well after the first day and prepare Unity assets. 
Great job! Did any of the kids seem really interested and want to learn more? 
Yeah, I've been using that as best as I can. It's like a Wikipedia, so anyone can edit it. But it's actually missing one of the calls I'm looking for, and sometimes the example is good, sometimes, not so great.
Thanks! Yes, many asked how to download Visual Studio and Unity to their computer at home and it think that the wanted to continue. And two of the kids were really interested and had all these questions about everything and where to learn more stuff when the got home.
That sucks. It's always fun being in that "no one in the world has this problem but me" situation. Old VB6 sites are sometimes helpful for arcane Win32 API calls. Out of curiosity, what are you trying to do?
Well, someone in my office thinks that I can use Win32 API to find patches for software that are sitting around doing nothing and delete them to free up space on a computer. We have a lot of client machines and not enough help desk people.
Alternatively, he should be able to return his OkObjectResult as it exists by removing both the async and await keywords. Consequently, the Get method will compile to much simpler code.
C# is strongly typed, so you can't have a dynamic variable name (I'm sure there's some way of doing it, but it really shouldn't be done). What you can do instead is create a dictionary to hold a key/value where the key would be your dynamic variable name and the value would be your class... here's a small example: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.IO; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Dictionary&lt;String, Pokemon&gt; Pokedex = new Dictionary&lt;String, Pokemon&gt;(); Pokemon Charmander = new Pokemon(); Charmander.pkmnName = "Charmander"; Charmander.pkmnLevel = 4; Pokedex.Add("Starter", Charmander); Console.Write(Pokedex["Charmander"].pkmnLevel); Console.ReadKey(); } } class Pokemon { public string pkmnName = null; public string pkmnNickName = null; public int pkmnLevel = 0; } }
You need to ask yourself why you need to be doing this as what you are trying to do does not make sense. 
I guess what I'm trying to do at a very basic level, and forgive me I haven't coded in probably the past 5 years, and have only been back to coding for a couple days now. Decided to switch majors from CIS to CS, and am trying to get back in to the swing of things. &amp;nbsp; I would like to essentially create a container, variable, something of this sort, and have it contain all of the variable in class Pokemon. Then I will store this in a database, and would like to at some point retrieve that data, and essentially create an instance or object? of that data and represent it on the screen, but have it be separate from say another exact pokemon or class. I'm trying to figure out exactly how to say what it is I want, but I'm failing miserably right now. I guess I could do an array or KeyValuePair, that &amp;nbsp; I just finished coding the connection to the MySQL database.
So you make a generic class with all the database fields. You instantiate a copy of that class and then set all the fields using info from the database. If you use object relational mapping it can even handle initializing the variable with the database info. Do you have a table called Pokemon or something where each row represents a type of Pokemon?
Yes, I have a table called "Pokemon" where each individual Pokemon would be stored. And each row represents one Pokemon.
Sounds fun! Haven't ever used Unity before, you should teach me aswell
Ok, it's columns are the variables in your class. That should do it.
_Ok, it's columns_ _Are the variables in your_ _Class. That should do it._ &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^- ^InconsiderateBastard ------------------------------ ^^I'm ^^a ^^bot ^^made ^^by ^^/u/Eight1911. ^^I ^^detect ^^haiku.
&gt; so you can't have a dynamic variable name This is definitely possible, and is very useful in many cases. Anonymous types are close, but not quite. There's also [`dynamic` and `ExpandoObject`](https://stackoverflow.com/a/1663044). Consider deserialization needs as well. It's also possible to create classes at runtime with [Roslyn](https://carlos.mendible.com/2017/03/02/create-a-class-with-net-core-and-roslyn/). You can use [Activator](https://msdn.microsoft.com/en-us/library/system.activator\(v=vs.110\).aspx) to create instances of classes whose names are not known at compile time. There are several methods in System.Reflection as well, but that doesn't really count. FWIW, I think OP is facing an [XY Problem](http://xyproblem.info/). ;)
Try to help somebody, and end up being the jerk! Story of my life... lol.
Anything you want, man. The world is your oyster. ;) I've jumped between embedded, network, "enterprise," and web development. Languages and tech change at each job. Just go for what you like and see what happens.
Would you be willing to send me a link to the walk-throughs via dm?
Enlighten me wise one, what is this PLINQ you speak of? I'm but a newbie to LINQ :-)
After your update how is the speed difference? Have you tried any DB connections from vs code?
Sounds like i need to attend this 😂 this is next on my list to learn. 
Because I wanted to learn F# and almost every learning resource expect that you know how .NET works and C#, So I began learning C# and turned out to be a great programming language, maybe not as succinct as F# but thing like properties and linq are way better that the kind of things that are in the "Java camp"
To expand on what u/InconsiderateBastard is saying: I would recommend not using just regular fields in your class, but rather Properties. You would really want to keep the internal workings of the class private (generally). So instead of exposing Name, Type, etc.. of the Pokemon class, using the auto property feature of C# will handle the private variables for you, but let you interact with them through their get and set. You could create the class Pokemon with properties of each column in your database. For example: public class Pokemon { public string Name { get; set; } public int Damage { get; set; } public string SomeAttack { get; set; } } Then when you query the database to get your row, you could set them with something like this: Pokemon mewTwo = new Pokemon { Name = dbQuery.Name, Damage = dbQuery.Damage, SomeAttack = dbQuery.SomeAttack }; You can get the row you want in several different ways, I would personally choose to retrieve the record with LINQ. Edit: Added some thoughts based on the way your current class is set up in the link you provided. See above, before the code examples.
Visual Studio, LINQ, Job was a Windows only environment, so the .NET framework was required. There was no way I was going to use VB. No regrets so far, many jobs in my area.
Unless you used EF
With more testing, it seems that without the -Cache parameter, regardless of the code you try and run, there's about a 5 second overhead to compile, and then however long it would normally take to run your C# code. With the -Cache parameter, the 5 second overhead is cut to about 2.5 seconds. That's as good as it got. I think it's acceptable for my purposes at the moment. I haven't tried any DB connections yet. I'll give that a shot tomorrow.
Well now I feel a bit shitty about my flippant fidget spinner comment. This sounds awesome. Well done!
Don't go into desktop. Wasted a ton of years on it. There really is no demand for it, at least you can't compare to web related things. 
Sounds like those kids know more C# than I do so I guess it went great
Knowing that this was a success made me so happy tonight. Thank you for what you're doing.
Ok thanks for the heads up, I hadn't even thought of using vs code this way. Linqpad is our go to and we've been very happy with it but this sounds useful as well :)
I don't see how this would be possible. I hope you're not suggesting to just use `return new OkObjectResult(mKpiService.QueryAsync().Result)`. That would be very silly.
&gt; But so many of the features that have been added to languages in the last 10-12 years have blown me away with how well they work. Like what? Can you give us some examples? I really don't see much that's changed. There's nothing new under the sun. 
Entity Framework on its own is something I dreamed of in the early 2000s. Add in Linq, and its a different league to pre-.Net ADO (and let’s not even talk about RDO and what came before). WPF is something I’ve only very recently started looking at, so I don’t fully understand all the advantages it brings over WinForms (either the current version of WinForms or what went before it), but I’m starting to fall in love with MVVM already. I remember seeing ASP for the first time (not ASP.Net, but old ASP) and realising it would redefine how web systems are designed and built. And now I’ve walked into a world where MVC has redefined it again. I’ve not done much multi-threaded programming, either in the old days or now, but the async/await pattern looks very exciting. I think there are a huge number of complexities to it that are hidden skin-deep, and I’m excited to see where it goes in the future, and whether those complexities can be hidden from application developers even more. And of course when I was working in VB, it wasn’t properly object oriented - I know that’s because of my choice of language, and there were plenty of alternatives which *were* fully object oriented, but this post wouldn’t be complete without commenting on how nice it is to have full object orientation in the Microsoft world (and even in VB.Net, if we really want to go there!) There are others, too. Many of them are just syntactic sugar - lambdas and expression-bodied members are both things I’m very keen on but the one which saves the most time is interpolated string. I’m sure there are more, but I think everything I’ve written here, except for object orientation which was always going to come sooner or later (VB6 was close, but not quite there) would have been amazing in the early 2000s.
You could put the SQL into a text file and load that text file into a variable but this doesn't seem like a good way to do it either.
You shouldn't feel bad, I thought it was a funny suggestion although I didn't take it seriously.
Prepared statement
My other post described technologies that have changed since 2004. But it’s also worth pointing out the change in methodologies. When I left the industry, I hadn’t heard of SOLID, and a quick Google search tells me that ”the first five principles” were first referenced as early as 2003, maybe even earlier, but the acronym didn’t exist that early. Test driven development apparently did exist long before, perhaps as far back as the early 90s, but didn’t start getting popular until the mid-2000s. It certainly wasn’t something I’d heard of. And as for iterative development, we used to do it all the time, informally. But never with anything as formal as Agile to guide us.
I teach full time (tried teaching kids for 6 months, hated it, now I teach apprentices). It sounds like you’ve achieved more in 3 days with kids than I can achieve in 3 weeks with my apprentices! One thing I learned early on was not to be afraid to change the plan. Sounds like this went amazingly. Well done!
Concatenating strings as you have done, leaves you open to [SQL injection](https://en.wikipedia.org/wiki/SQL_injection) attack. Better to build the string once with parameters, and then pass the values you wish to insert. I won't type all the parameters out, but this how you could do it sqlCommand.Text = "INSERT INTO pokemon (Name, Nickname ....) VALUES (@Name, @Nickname.....) "; sqlCommand.Parameters.AddWithValue("@Name", pkmnName); sqlCommand.Parameters.AddWithValue("@Nickname", pkmnNickName); Alternatively, look at adding [Entity Framework](https://docs.microsoft.com/en-us/ef/) into your project for the database layer, and you won't need to write SQL at all. &gt; Entity Framework is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. 
Use Parameterised queries. Never put raw values into your SQL statement - even if you think you have full control over their origin, someone could find a way to generate bad values in there that can cause serious database damage. This concept is called SQL injection (it would be good to read about it) and the general way to cope is to use parameterised queries. Here are a few links to help you out: * [How do parameterized queries help against SQL injection?](https://stackoverflow.com/questions/5468425/how-do-parameterized-queries-help-against-sql-injection#) * [Example of how to makes queries with parameters](https://www.dotnetperls.com/sqlparameter) * [Adding Parameters to Commands](http://csharp-station.com/Tutorial/AdoDotNet/Lesson06) They probably will all use SQL Server specific commands and connections and so forth, but other databases also have equivalent objects. In your specific example you would have something like: string insertNewPokemon = "INSERT INTO pokemon (Name, Nickname, Level, Type1, Type2, Gender, Nature, HP, Attack, Defense, Special, TotalStats, StatsAvgs, PokedexID, DatabaseID, OwnerID) VALUES (@Name, @Nickname, @Level, @Type1, @Type2, @Gender, @Nature, @HP, @Attack, @Defense, @Special, @TotalStats, @StatsAvgs, @PokedexID, @DatabaseID, @OwnerID); SqlCommand insertCommand = SqlCommand(insertNewPokemon); insertCommand.Parameters.Add(new SqlParameter("@Name", pkmnName)); insertCommand.Parameters.Add(...); And so on for all the other values. EDIT: Fixed some typos. 
if they can learn it, so can youuu.
Anything but JavaScript or overcomplicated build systems is the future, in my opinion. I've been in this business too long to accept the suboptimal situation that is the web. Am I just a grumpy old dev?
Let's hope for your sake that Mike is not on Reddit and this forum! 😂
Why aren't you using Entity Framework? Forget all the other suggestions
Web dev is one of the most streamlined development environments that ever existed. It is beginner friendly, truly cross-platform, relies on standards with multiple compatible implementations, over a rich ecosystem of tools, libraries and frameworks, can create the best-looking GUIs ever built... Nothing is perfect, but web dev is pretty amazing.
Think of .NET Standard as the interface while .NET Core is an implementation. So you generally target a .NET Standard version while writing a library as it allows to work on all the runtimes that implement that particular version
I feel the same. I was a big fan of early web apps but I failed to anticipate the effects this would have on regular application development. Now we have to deal with text editors that take a gigabyte of memory and chat apps that leave you waiting for their JavaScript to parse. It's cool that we can now build web applications in practically any language but I have two major concerns: The first is that these application features and frameworks find their way into what should have been simple web pages with some dynamic content. Terrible loading and rendering times, hijacked browser behaviours, and bad support for anything but the latest browser on a beefy machine. The second is the degraded performance and general user experience on web applications that now inevitably find their way to our desktops and mobile devices, usually advertised as "using the latest open standard technology" or such. In reality, of course, we're shipping chat applications running in a bundled software-only virtual machine that sets us back a decade in processor speed, I/O and memory capacity gains. I'm super excited about being able to run real software written in a variety of languages in my browser on a platform that's entirely open. But if you look at the performance of WPF and UWP apps, even on fast computers, I shudder to think of these running on yet another layer of abstraction, or worse, with a DOM. There's also the problem that these sort of solutions tend to reduce the host operating system to a mere provider of a window frame. I hope this trend bounces back to a more reasonable, sustainable situation where we enjoy the benefits of being able to safely run software over the internet without this zealous determination of shoving those paradigms and layers of abstraction of the web beneath every piece of software. WebAssembly could be a great step in that direction because it lets use share code without having to target JavaScript everywhere. **TL;DR** - Use WebAssembly to make software available over the internet for everyone to run from everywhere… - …and to stop us from having to ship entire browsers with applications. - Don't use WebAssembly to ship megabytes of runtime to implement a hamburger menu.
You probably need to use the API for whichever cloud service you're interested in. I haven't used it but dropbox appears to have a .NET api. These days it's usually pretty simple to use such APIs as they tend to have good wrapper libraries available via Nuget or GitHub.
Same here, I was a quite engaged into web 1.0 development, but with the uprise of SPA I went back into native development (Android, iOS, OS X and Windows desktop).
What you want is called "[Interpolated Strings](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interpolated-strings)". But in this situation, as other people said, you better use Prepared statement
&gt; There's also the problem that these sort of solutions tend to reduce the host operating system to a mere provider of a window frame. Isn't it? Honestly, I've been a web programmer since 1998, and let me tell you, web site companies demand that most of the function of their site be running on *their* hardware where they can control it and be sure that it's behaving. Anyway, building an application that runs in one place is *easier* than building an application that uses *one* language for client side and *another* for server side. &gt; I hope this trend bounces back to a more reasonable, sustainable situation where we enjoy the benefits of being able to safely run software over the internet without this zealous determination of shoving those paradigms and layers of abstraction of the web beneath every piece of software. When was it ever in that state in the past? &gt; WebAssembly could be a great step in that direction because it lets use share code without having to target JavaScript everywhere. It sounds to me like you're just substituting one client-side language for another. (And honestly, as a language expert, I can say that Javascript is one of the less problematic languages out there.) 
Putting a backslash in a string literal has a special meaning. (A string literal is the formal name for anything you put in "quotes".) It means that the backslash, together with the symbol that follows the backslash, is to be interpreted as a "special" symbol. Common places you'll see this are \t which means tab, \r which means carriage return, and \n which means new line. Because of this, the string literals that represent the file names you are trying to open are not correct. There are two ways around this: - The special symbol for a backslash is actually two backslashes - so "C:\\\\program\\\\program.exe" should work - Putting an @ sign in front of the string literal tells the compile to ignore the rule about backslashes being special, just for this string literal. So @"C:\Program\program.exe" should work. Edit: the formatting of this message doesn't work in Reddit Mobile, but is correct if you look on the Reddit website.
Backslashes are how many special character sequences start. C# sees the backslash and thinks that you are trying to use one of these. Can fix this one of 2 ways: 1. Escape the backslashes System.Diagnostics.Process.Start("C:\\\\Program\\\\Program.exe"); 2. Make the string verbatim by putting the @ character at the front: System.Diagnostics.Process.Start(@"C:\Program\Program.exe");
Thanks. After doing professional dev for 20+ years, I feel exactly the same. 
[Absolutely not](https://imgur.com/gallery/9gFnC4q).
I'm honestly curious: What is better?
I have seen new grads weave magic out of current JS tools. Maybe you are grumpy.
I think all the things you're saying are probably true to some extent, but I think it might be describing it as streamlined that's attracting your downvotes. It's difficult to call an environment where there is so much competition streamlined, since you end up making far too many decisions on which tech to use. Some of these are bound to be wrong, and some of them are going to become wrong in 12 months time. Streamlined is having one right answer that's supported by the community and vendors (notice that I'm not saying whether that's better or worse, but it's certainly more streamlined) On top of that, desktop apps written in js that bundle a browser just can't be considered more streamlined than writing native code. Finally it's pretty sensationalist to say js allows you to create the best UI ever. Maybe you see more creative interfaces because it's more accessible to designers, but there's nothing here that's not been attainable before. Even then, up until the advent of flexbox and CSS grid, writing anything more than a basic blog style layout has been an uphill struggle of css hacks, negative margins and bulky layout frameworks
What's that got to do with their point about overcomplicated build systems?
I never meant to say that JavaScript is a bad language. Instead I argue that it's a bad choice for non-web applications. But, as you rightly said, it trumps having to work with different languages. Now with WebAssembly we'll be able to build web applications with languages that perform much better than JS outside of the browser. I could, for example, write my app in Swift which compiles to machine code and has only minor dependencies and little overhead, but also to WebAssembly and target the web. The C# story is not too dissimilar.
Answering parents question if they are just grumpy old dev.
If you already know how to develop natively with Android using Java and iOS with Swift then there's little reason to use cross-platform. For example, I was a mobile developer in 2015 when Xamarin wasn't popular yet so I was forced to get good with context-switching back and forth between Android Studio + Java and XCode + Swift. After a year I was fast enough to develop the same app but independently for each OS that I had zero incentive to learn Xamarin.
The web has to go. Even berners Lee agrees. 
The web was a great idea at the time but the internet needs a bettet application . I can get even grumpier than the other commenter but i will curb that and talk about the future. First we need a decentralized option. Everyone(who is not a government entity) is pretty much on the same page with that. There needs to be a robust solution. One where one server can serve up 2d and 3d depending on your device. Apps have taken off because people enjoy the ability to have a contained experience but there needs to be some thin client in between. Example: car maker has a new car to show off. A 2d device can see a photo and get a list of new features but then i can also slio into vr and actually interact with the car. 
For anyone who has not yet seen just how AWESOME the future of Web development looks for C# developers, watch this video of Blazor in action... Steve Sanderson's Blazor Demo - .Net on WebAssembly! https://www.reddit.com/r/programming/comments/6mi9hw/steve_sandersons_blazor_demo_net_on_webassembly/
Thank you &lt;3 It worked
Thanks! It worked! 
&gt;On top of that, desktop apps written in js that bundle a browser just can't be considered more streamlined than writing native code. It certainly is more streamlined than having to implement different GUIs for 2 or three desktop OS, two mobile OS and the web.
Ideally I'd like to work in graphics or parallel programming but jobs in C# with those are very uncommon from what I've seen.
I'll admit I don't work for a software house - but we do a substantial amount of our own internal software engineering. If it's me looking at a potential candidate for any position, they've got to have *something* tangible to demonstrate they know what they're doing. If you don't have a degree, nor a professional portfolio, then yes I'd think some sort of certificate course would be useful. I can't speak to how those two you mention are specifically viewed in industry however, nor what an entry level position would be.
1) The idea is to keep your controllers slim and to minimize the dependency on a particular framework (e.g. ASP.NET MVC) in your business logic. 2) Everything is async because that's a smart thing. You should take some time and learn about async &amp; await. Many operations are IO bound, in which case async is remarkable useful. It provides a means to wait for the result of an IO operation without blocking the thread, so it's free to handle another request. But async is an infectious API - you need to use it all the callstack down. Also, everything awaits because that makes debugging easier. You could just return the Task as you do in your second example - but when you get an exception your `GetSomething()` method will **not** appear in the StackTrace - because that method already finished and returned the result (the Task).
Thank you for your input. I've also considered creating a portfolio of useful projects that demonstrate knowledge of C#, maybe full stack development. Not sure which path to take. certs or tangible projects.
That's a good point. However I'd counter by saying that targeting multiple platforms is a relatively new problem - in the past, applications mostly targeted windows and called it a day. From that perspective, the current state is a huge step backwards. Now obviously targeting multiple platforms is a reality we have have to live with today, but I think we probably need to acknowledge the current solution is not a particularly good one. 
&gt; I can say that Javascript is one of the less problematic languages out there. wat? I am not a language expert but this is not true at all historically. Javascript is nice and all but up until recently it had no concept of concurrency that includes node. It has been a major performance restraint either because the community had a poor understanding of what happens when you use == instead of === and even still == is only bad because of the awful equivalency function that's run when you use it in ES5. It hogs memory of the browser and sometimes doesn't want to let it go. Furthermore node has the same problems on the server side. another issue is its lack of real concept of scope makes it very hard to develop on a large scale with a large team in a modular way. JavaScript isn't a bad language but to say its been less problematic is crazy. Also people really shouldn't bash on SPA's. They are a big part of developing for Web Assembly and those complicated tools you mention like web pack... The webpack team is currently one of the primary contributers to Web Assembly they received a grant earlier this year to focus development. 
.NET Framework doesn't ask you to install Bing Toolbar or some shit + VS is love, VS is life + Creating user interfaces is easier + C# is faster (i think)
&gt; It's difficult to call an environment where there is so much competition streamlined, since you end up making far too many decisions on which tech to use. Working with something like Django, Ruby, ASP.NET MVC or even WordPress gives you a full stack opinionated framework with very little choices left to make. Of course you are free to use any kind of frameworks or libraries, but no one is forcing you to. I will enver understand how the mere presence of tools makes people so frustrated. &gt; Maybe you see more creative interfaces because it's more accessible to designers, but there's nothing here that's not been attainable before. I'm not sure this is true. It is by far easier to create a good looking web app than a good looking desktop app. Of course HTML and CSS being accessible to designers plays a part, but an incredible engineering effort has been put into rendering engines to make web app development easy. Sure, if you only want to target a modern version of Windows on a system you can run an executable on, WPF is an alternative to some degree. But still, WPF is nowhere near as complete as the web dev stack, and everyone knows it.
In this thread: Grumpy C# devs who want Microsoft to provide the single true way of developing, and who think that any ecosystem not completely monopolized by a single vendor is by definition terrible and needs to die. 
This isn't a stupid question tbh. The grammar and the fucking emojis tho... No "show us what have you done so far" Also, using VS Code as your IDE and calling it an all in one program. Pls no
Sure, sounds good. The web has managed to incorporate image, sound, video and 3D-models already. I can't see a reason why VR won't be included as well in due time. We web as we have it, with its open standards and competing implementations, should not be taken for granted. It turn into walled gardens really fast. I think it's sad that so many developers who should know better complain about the ecosystem and wish for a dictator to come in and throw all the progress we worked on for so many years down the drain just because they are offended that they don't understand each and every build system used.
My firsr point was aboit decetealization. Right now we have gatekeepers 
Yeah, probably. Everybody else who thought that ended up being wrong.
What does decentralization have to do with how easy development is?
I misread your last statement 
For point #2, you have it backwards. Async needs to propogate up the call chain, not down. Otherwise everything's good.
I'd pull out the parsing logic into a separate class rather than have it in the window code
Now there's a straw man.
Yes please!
I agree. Someone looking to hire a programmer wants some assurance that they know what they're doing. Either by a college degree, a thick portfolio, or some industry certifications. As to which is more valuable? It depends on the hiring company. Use Linked-In to snoop on their current &amp; former employees to see what they had (and how long they stayed). 
An advantage of having a separate API is that you could potentially build another front end that's not an MVC web site - perhaps a native mobile app, which could then use the API but present the results differently. You could also make your API available to other client builders if you wished.
Of course! This is simply genius aha, why didn't I use common sense? I will look into this! ( but if anyone else has any other solutions as well, feel free! )
I only know native iOS development; I'm familiar with Java, but not the Android platform specifically. I'm looking at this more or less as an exercise to expose myself to Xamarin. I'm currently laid off, so any new skill I can add to my toolbelt will help me in the long run.
Of course I am not. [HttpGet] [ProducesResponseType(typeof(IEnumerable&lt;Kpi&gt;), 200)] public Task&lt;IActionResult&gt; Get() { mLogger.Debug("Entering KpiController.Get method"); return mKpiService.QueryAsync().ContinueWith(x =&gt; new OkObjectResult(x.Result)); }
Where are the unit tests and the read me file? 
&gt;. It is beginner friendly, I disagree. Especially with the newer frameworks coming out like Angular 4 or React where there is a build system you have to put in place. The front end of web dev is much more complicated than it needs to be. I miss angular 1.x where I could just add a script tag and be good to go. It is why I like VueJs, I don't need a build system to make things happen Edit: fixed typos and grammar from mobile post
Ive heard developers say mscd stands for Microsoft certified shitty developer. I don't really look at certificates for developers, even junior devs. I think they might be more useful for those in the consulting industry. And i would personally tend to avoid places that put an emphasis on developers having certs. As someone looking for a way in, portfolio on github can be good. If you get an interview try to convey your passion and willingness to learn. 
What exactly do you mean with that? What should replace it and why?
No you're not. I've noticed there are barely any devs that like web. Some just accept many flaws (and also these write worse code ;)
It feels like a bunch of kids looked at concrete and steel skyscrapers and said "But that's too haaaaaaard - why don't you codgers adopt our super-awesome sand-and-water framework?" "So - build sand castles?" "No, you idiot. You're still stuck on sAndKaSSel 2.0. The world has moved on to SndCstl because it's got webscale."
That was true 15 years ago, maybe even 5 years ago. These days most web applications I've been involved with have a longer 'build' process than the server and database pieces that I work on. 
Well, if everything is going to run in Chrome it's nice to know I won't have to worry about memory management or responsiveness any more, since the piggish container will dwarf any improvements *I* could make. 