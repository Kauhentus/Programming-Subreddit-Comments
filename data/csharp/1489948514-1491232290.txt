I don't get how it's less intuitive than what we have to today. Interfaces can have behavior now. Class inheritance rules for virtual methods are still honored. What's not straightforward about that?
The tweets have since been deleted, but there was a horrible twitter argument between the Aaron and roger (with email screenshots) regarding the wire serializer that eventually seems to have resulted in a split off. The whole thing should have been handled better.
You can start them both from a single instance of visual studios by setting the server up as the main project (this will start debugging that with f5) then you can right-click the project, select debug-&gt;Start new instance to debug either a second instance of the server or a new instance of a client.
Thanks for spending time to help me , but i have a very low undertaning of c# and i have no idea how your code work. :c Edit: thanks for the comments in the post ! now i will try !
Then don't bother, wait till the CLR can handle it. Making default interface implementation now and MI later would just sully the language.
Being able to evolve interfaces and de facto trait functionality is interesting but is it worth the additional complexity especially in the presence of extension methods which cover many of the use cases for this feature?
Heard the podcast on dotnet rocks. Pretty great framework good job!
Ctrl + V
Java has default methods on interfaces, and I always thought it was Java's answer to extensions methods, rather than multiple inheritance. Perhaps I'm misunderstanding multiple inheritance?
...Or just use an abstract class?
Interesting. How does it handle IOC and unit testing?
I see your point, but (perhaps because im now used to it), doesn't introduction of IMyInterface2 work better by being more explicit? It is widely accepted way of doing it and although not great, at least easy to follow?
Say I give you a function that returns an `IMyInterface`. You need to call `IMyInterface2.NewCoolThing()`. What do you do? Perform an unsafe cast, with the assumption that I'm always going to return an `IMyInterface2`? That sounds dangerous. Perform a type check? Ok, but then what? Throw an exception? Questions like this is why we should avoiding returning an interface from a function/method if something more specific is available. Gaining the ability to add new functionality to an existing interface would greatly reduce these concerns. *** Note: I don't necessarily agree with this plan. I am merely trying to explain why some people would see it as a good thing.
In Java they don't understand the difference between an interface as in API or "application programming interface" and an `interface` as in an "abstract interface". As a result they have lots and lots of methods that return interfaces when they really should be returning classes. This in turn leads them to make breaking changes with each new version as they add more and more functionality to the abstract interface. So no, in Java the real reason is neither extensions methods nor multiple inheritance, but rather as a work-around for the big hole they dug themselves into.
If we're talking OOP language design principles, an `interface` is really just shorthand for "abstract interface", which itself is "a class with no fields and only abstract members". So from a theory standpoint, we're just redefining `interface` from "a class with no fields and only abstract members" to "a class with no fields". 
&gt;in Java the real reason is a work-around for the big hole they dug themselves into Yep. Sounds like Java to me!
I agree. If you need flexibility, make an interface, create an abstract class from said interface, inherit from abstract and go. This all pollutes the contract basis of the interface. Keep it Simple
Yeah the intellisense can't know if another interface uses the same properties, but that's the dangerous part of it. If a different interface with a default implementation is making changes to the same properties, that can be a nasty bug to hunt down.
Don't do online classes for subjects you don't understand well. The inability to talk to someone face to face and the lack of peer support makes online classes much more difficult. Just accept this as a learning experience.
I wonder how Akka.NET compares to Azure service fabric. 
I'm sorry I'm still very new to c# and this is my first home-built project. Could you elaborate on what you mean for calling my functions method? I've only used methods from the Windows Directories and DirectoryInfo Classes. I tried giving the InputDirectories(int i) if that's what you mean, but it didn't seem to work. I did edit my int values to only be declared once, at the very top outside of the InputDirectories scope
&gt;Could you elaborate on what you mean for calling my functions method? Functions/methods are synonymous. In C#, we typically call them "methods" and not "functions", but they are the same thing. You should probably start with an easier project if you have not programmed before. What I mean by "you are not calling the InputDirectories method/function," is that you have all that code in InputDirectories(), but it is never being run, because you have to make a call to it. Does this currently compile?
The single responsibility principle has never been a design principle .NET. Even the most basic classes such as System.Boolean violate it. 
That's an interesting point, and I guess you need to ask if the interface is for internal use (i.e within a company or a small group of developers) or for public consumption which would cause a large amount of problems if you added a new method. I would start to argue that adding new methods to an interface is a bad thing, rather than to create a separate qualified interface to add to new classes (MyClass: IStuffToDo, IExtraStuffToDo), but it is the first partly convincing argument I've heard. I still don't like it though. Mumble grumble, Emacs, git offa my lawn etc. 
I got it to work at one point by making exec calls to python to do it for me. No info on performance or elegance.
You can install windows 10 iot on the pi and load C# apps. This will give you full gpio access 
Personally I think most of the problems would go away if people just didn't use so many interfaces. Do you really need IStuffToDo? Could you solve the same design challenge with just an abstract base class? Most of the time the answer is yes. 
I think the best argument for interfaces, I'm afraid, the avoiding MI problem. That said I do like interfaces as it's a lot cleaner than base class inheritance, trying to remember if there's any special sauce to inheriting from a base class. I don't really like creating base classes unless they are as clean as possible or add some base functionality that is damn obvious to the given circumstance
Don't you have to have a windows 10 pc? I don't have one unfortunately.
Generally speaking, I create base classes when I find myself copy-and-pasting the same function in multiple places. Likewise, I create interfaces when I find myself copy-and-pasting the same function in multiple times in the same place, but with different types on the parameters. 
Is there any documentation that talks about the threading model? e.g. preemptive vs cooperative multitasking, threads vs fibers. If I have some misbehaving actor (e.g. it's blocking) what happens to the rest of the system? 
Go to The MagPi Magazine and you will find an article in issue 30 on page 26 about using C# with the Raspberry Pi. PDFs for all the issues of the magazine are available here: https://www.raspberrypi.org/magpi/issues/
Yea it compiles correctly. I just don't know how to handle the out of bounds exception. The 'getdirectories' out of bounds was a no brainer and easy to fix with an if statement. But I'm failing to see what's causing this one. The overall idea that I'm trying to achieve (for now) was to make an Input, Output and a Button so that when you hit the button, it copies whatever's from the input directory and pastes it to the output directory. That's the prototype at least. I have a lot more stuff I want to do with it. I havn't implemented any code to the button yet, as I'm still creating the output functions and figuring out more c# principles as I go. So that's why I'm checking things with messagebox. I am learning a lot more this way than copying a bunch of tutorials verbatum from youtube. I already went through a few of em but it didn't really absorb. It did help with READING code though. Writing is another story..
You are getting the out of bounds exception because when you click the button, and select OK in the dialog box, you are trying to display what is at index 0 in FileList, but you have not added anything to that list yet. To make things easier for you, just remove your "InputDirectory()" method and just put all that code inside the "if" statement in the InputButton_Click method. 
I would do that but I need to reference those lists outside of the InputButton_Click method's scope for later in my program. OK so now I have tried a different setup: in another class script, I have made a public class called InputIndexer. Then I put the GetDirectories and GetFiles functions into their own methods. Then in my main script, I'm going to call upon those methods when InputButton_Click occurs. Or something along those lines. I think that's how it should have initially been done. Now I just need to figure out the syntaxes and how to call upon the seperate script. Noob problems... D:
Sounds like an alright idea
Use .Net core.
Bill Gates never said that. http://www.computerworld.com/article/2534312/operating-systems/the--640k--quote-won-t-go-away----but-did-gates-really-say-it-.html
The dotnet team is really awesome. I think that's the first language feature I don't agree with. I'm totally open to new ideas, but this seems like a change to the foundations where everybody agreed on. An interface is just that. Capabilities of a type, nothing more. Object oriented programming 101. Now this changed. Personally and from my current perspective, I'm gonna ignore this feature exists.
I'm currently arguing for that very same pattern on GitHub. 
Oh ok, I can see your point. I guess providing a 'base' abstract class with framework as a default implementation of an interface only takes you so far due to lack of multi inheritance and scenarios such as you described about returning interfaces. Thanks! Although I would say that type check and handling of the situation depending on the context works ok now, similar to null checks really. You check capabilities of an object and decide what to do if they're not met.
.Net Core should work out for you. You coyld basically develop on visual studio on windows and simply deploy on your pi with . Net restore. 
yeah, that guy who proposed that mess probably don't know them... yet.
Hello fellow csharpers! :) About a month ago /u/rb229 posted the link to tusdotnet here on /r/csharp. One of the most requested features in the comments was support for .NET Core. With version 1.3 tusdotnet now fully supports .NET Core! Still on .NET 4.x? No problem! tusdotnet is still fully compatible with that too. Link to previous thread: https://www.reddit.com/r/csharp/comments/5trqk9/about_to_implement_some_kind_of_file_upload_do_it/
Yes I've built apps on it. It's using Windows 10 iot. Have to work on the .Net UWP stack which is a bit limited.
&gt; Although I would say that type check and handling of the situation depending on the context works ok now, similar to null checks really. You check capabilities of an object and decide what to do if they're not met. And I would agree with you. 
&gt; Whaaah it screws up my inheritance hierarchy. Also &gt; Whaah, I don't want to implement the interface that the extension method uses for optionally overriding the default behavior 
That would be true unless you know that TusDiskStore implements ITusReadableStore (which it does)
I agree, this makes no sense. If the cast fails you get a NRE, and I'd you do it right you get the proper invalid cast exception. Please don't abuse "as" 
That would be true if SRP was actually an important principle. But as the .NET framework demonstrates, it really isn't. Anemic classes can be just as bad as classes that do too much. You have to find the balance between the two extremes.
Again, we're in agreement. 
Right. I get your arguments and I stand corrected.
It may sound harsh, but we don't really care why you're here :P Or to be more precise: Very rarely do people care why anyone else is here! Post good questions -&gt; you'll likely get good answers. Post badly worded questions with not enough information -&gt; you just get downvoted (at best). I'm not trying to be harsh here, just telling you how it is. Very rarely do people remember each other on reddit... Maybe, sometimes, if their interestes overlap a lot... Anyway, the point I'm trying to make is that this isn't your personal blog and reddit isn't a "forum" in the classical sense. So just try to present your question in a presentable manner and most people will jump on the chance to farm "karma" points. 
https://github.com/raspberry-sharp/raspberry-sharp-io For all your GPIO needs 
If you are using Ubuntu on the Rpi, you can now use .net core. With Raspbian, .net core is not yet there, but you can use mono. Also: https://github.com/raspberry-sharp/raspberry-sharp-io for your GPIO needs
Wouldn't adding a new default interface method also be a breaking change? I assume, since the CLR doesn't support anything like this, that default interface methods are just sugar for a regular interface method + the compiler implements it for you.
You can do it w/ attributes in PostSharp sure, but you can also do it in a programmatic manner, or by using interfaces w/ a default implementation that is mixed in at compile time, etc, etc.
Oh really? do you have a link to that? I have 0 experience with arch, hows it compare to raspbian? And in particular how easy is it to make I2C, SPI, One Wire, work?
I go tired of the constant Azure prompts in VS. You can remove them but I don't remember if there is more to it than just removing the Azure SDK.
The page uses some kind of custom API that returns JSON data. You can see for instance here http://www.pse.com.ph/stockMarket/companyInfo.html?method=fetchHeaderData&amp;ajax=true I don't have the time or will to decipher their entire website/API but you can look in the javascript files. I'd suspect that the company would be extremely unhappy if you decided to "hi-jack" their API without their permission...
Removed: Rule 3. It does look like the content is loaded/generated after-the-fact. Maybe take a peek at using browser automation software (e.g., Selenium) to load the page, wait for a while (or check for load completion), then start diving into the dynamically generated content.
I was doing some online research and found this http://stackoverflow.com/questions/5360372/the-objectcontext-instance-has-been-disposed-and-can-no-longer-be-used-for-opera and they mention when using the using statement it throws away the db right after it's done so it's doesn't have time for the view page to see it? I think if I were to use the solution you suggested I have to maybe use viewmodels? but that might take a while to convert everything to using viewmodels as I've alread tried it but could not get it to work.
.. or traits.
There is static scope, class scope, local scope, and block scope. C# is inherently OO so everything is a class Namespace MyNamespacec{ public static class MyStaticClass { //Static Member of a static class //Access MyNamespace.MyStaticClass.StaticMember public static int StaticMember; } } Namespace NotStatic{ public class notstaticclass{ //Accessed via: NotStatic.notstaticclass.StaticMember public static int StaticMember //Access via: var foo=new NotStatic.notstaticclass(); foo.instanceMember; public int instanceMember public void SomeFunc() { //Only accessible within function body int functionScope; for(int i=0;i&lt;20;i++) { //I and J are block scope... this code block is a loop so they are sometimes called loop scope //accessed by i or j and only within the loop int j; } //The opening a closing braces create an aribtarty anonymous block scope { //This is block scope and only accessible within these braces. int anonymousScope; } } } }
There aren't any. 
as /u/eightvo said, you can make your new class (it's called a class, not a script) and variable static, like this: public static class DirectoryHelperOrWhatever { public static FolderBrowserDialog fdb = new FolderBrowserDialog(); } And then in your InputButton_Click method, you can access fdb by doing this: DirectoryHelperOrWhatever.fdb
I guess the thing to do is define `public const string MY_STRING = "String"` in any file and access from there. 
That method will get the March 17th stream, but it won't reopen it after it has been disposed by ClosePastStreams.
But my pc doesn't have any screen, Until I plug one in... My Raspberry Pi technically has a 48 inch screen, when I plug it in. 
What version of mono does that get you? 
4.8.0.495 is the version. I just downloaded this on Arch for a Raspberry Pi 1 and tried to both run an app built with VS 2017 and build the same app using mcs... they both died citing illegal instruction. Maybe Arch isn't building their own binaries for it and just using the version that doesn't support the RPi 1 ARM version? In any case, I apologize, I gave you incorrect information. I remember running some recent version of .NET (4.6, I think) on an RPi 1 but it's possible I've remembered incorrectly. 
This happened to me the other day. It's because they're compiled for a version of V6 that assumes the movw/movt instructions, which are not on the zero. I compiled mono from source, and it works a treat.
Where did you get your compilation instructions, assuming you found them on the net somewhere? I assume it's probably not as easy as downloading the source and running 'make'. Also, this gives me hope that Arch will fix their binaries. On the box that I just tested this on I've been using Python but usually I use C# for my projects. 
The idea Microsoft has for IoT is that you can use it for hobby projects. It costs if you use it as a desktop OS. In my company we use IoT as a VM and we pay for it. But on a a device, you shouldn't have to. This is Microsoft trying to compete with Android on phones and Linux for IoT. Take note that there is also a slimmer Windows 10 headless edition as well. Windows will not know what size of screen you have, so don't worry about that.
Maybe. It could be a breaking change, but not in the simple missing-method way. Rather it would be hard to spot because complex interactions between how interfaces are inherited and methods are overridden.
Yeah apparently Mono opted to use the SIGILL instruction or something... which really sucks because I suspect it's just a compiler flag but they are just being arseholes about it when I've talked to them about the problem. They are happy to keep making builds for PPC and a bunch of others most people don't use but they don't want to support ARM v6 from around 2005? Stupid.
&gt; ProjectView You should put them in the `ProjectView` class as public constants.
RemindMe! 6 hour
Indeed. But it kinda softly points out basic sized tablets and phones and doesn't include laptops. It keeps OEMs in check. They don't care about the individual per say.
Based on another post in reply to mine they said it's jest a matter of recompiling it from source. If this is true then it's on the person who manages the package for Arch to fix it. 
I'd much rather the C# team evolve interfaces to support the features of [*traits*](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf). &lt;/sarcasm&gt; 
So the using is best practice. Throwing away the connection at the end of the using is expected. It removes the connection to the database, freeing up the memory and also it severs the object's connection to the database preventing accidental updates. If you use the data models in your app for things other than data access, that can lead to unintended changes being saved. Perhaps you increment some value of a model as you loop through a list of them. The increment was intended only for looping purposes, so you exit the method. Later you add a record and save your changes, you could also be saving the incrementing changes too. Using the using statement to load view models or Data Transfer Objects (DTOs), ensures that no accidental updates occur. It also allows for going only as deep into complex relationships as you need for each method. Specifically what's going on with your issue is that you're getting data, leaving the connection open, and hoping that the connection is still open when you go to use data deeper than the top level of the model. In that scenario, the connection stays open until you close it, or the system thinks you've abandoned it and closes it for you. That's why it works most of the time, the system just hasn't gotten around to cleaning up after you. Using DTOs forces the needed data into memory where it will stay until it falls out of scope or you get rid of it. You'd create a database separated model, that contained only the fields required to present a view or perform an action. Then you'd have a method the populate it as part of a read method, and probably another to translate it back into the data model as part of a save method. Then if you need to go deep into the data model, you add corresponding members to the DTO, and populate them in the read. A VERY bad solution that wouldn't require implementation of DTOs, would be to open the data connection where you're using the data, in the view or controller. This will be bad for memory, performance and perhaps security. A less bad way to go is the include parameter, but that is indiscriminate, and can make for very large and slow database reads rather quickly if you start including multiple joined tables. 
No one else find this article hard to read? Letter examples and unnecessarily terse style of writing. My poor excuse of a brain is already struggling keeping up.
Does Proto.Actor support some sort of scheduled delivery of messages? I just started rewriting one of our systems using a custom actor infrastructure and one of the things I needed was each actor to schedule events for itself to implement scheduled tasks (i.e. every 30 seconds I need something to occur). It wasn't clear on a quick basis on how to do this in Akka.net which is why I went with a quick custom dispatcher/actor system (well that and no .net core support) . 
I apologise. I should have checked instead of listening to @DavidArno.
It's much more readable and easier to work with than service fabric. Still, Azure Fabric have GREAT and growing support for other microsoft services, especially those cloud based. It also have much better persistence which in akka could be bottleneck if done wrong.
&gt; Still good here because everything happens to be inside mscorelib.dll, but let's pretend again here that IReadOnlyCollection&lt;T&gt; is instead in System.dll. Why pretend? Generally speaking, an extension method is going to be at the same level as it's two interfaces or a higher one. In this case, Count is in System.Core, which is two levels higher than mscorlib.
Pretending because it turns out `.Count()` is a terrible example where years of less than perfect applications of OOP design followed by the hairpulling of tiny applications of functional programming design decisions left us with a monoid that applies to an interface more general than it should, but that is the only interface that is shared between every application where we do want it. Ideally methods like `.Where()` would provide results with a `.Count()` available on them if they should and without such if they shouldn't. In actuality it doesn't matter what interface method with a reasonable default implementation was used. I could equally have used `.ExecuteScalarAsync()` which should be returned by `IDbCommand` except that this interface was shipped before `async` was a thing and so a demand was placed on all 3rd party ADO.NET providers to make a breaking change and rebuild on top of an abstract class. `.Count()` is simply more relatable.
All I've done so far is contact the author about 5 days ago. He hasn't gotten back to me. A few people forked his project, but the changes they made were behind his. I guess if it comes down to debugging I would want to come here and ask "How do I translate `&lt;this code&gt;` to .NET Core?" Some of the examples I had issues debugging earlier today were Reflection class. Aside from that the author hasn't made his own documentation site, it's just on GitHub, and I'd have to reach other .NET developers on forums elsewhere. I would like to hone my .NET/C# skills, which is another reason I would like to approach this problem and do it the way I'm doing it.
Nothing wrong with what you are doing. Reflection to my understanding (note I am a core newb) works fairly differently between the platforms. You will likely need to carefully review the code to see what reflection is being used and cross reference the older reflection metadata API and the one supported in .net core. You may find yourself implementing some workarounds or changing the way a feature works there but it should not be impossible, just a lot of code reading. Feel free to post your puzzles up, I bet a lot of folks would not mind taking a crack if anything to get our own core skills up. Best of luck!
The Count() on IEnumerable idea drives me crazy
Oh dear! haha thanks for pointing that out, I have corrected the code and it now works as intended. Thank-you for the reply Many thanks, Elliot
The items, as oppose to the number of loops. I have got it working now. Thank-you for the response, I knew it would be something silly like the wrong variable reference! Many thanks, Elliot
Partial class? Are you using code first or database first?
&gt; Ability to use it on Linux Mono works perfectly fine and is much more stable.
That lib is based on RestSharp, which also isn't .Net Core compliant, do migration won't be straight forward.
i get this "Hmm, we couldn't find what you were looking for. You may want to to try searching for it or glance through our catalog."
Oh ! I will repost it !
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/damian2000 [C# in Depth, Fourth Edition (By Jon Skeet) - early access program](http://np.reddit.com/r/programming/comments/60md7m/c_in_depth_fourth_edition_by_jon_skeet_early/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Lose the static and put the if in a method: namespace SDK_Interface { public class Program { public User User = new User(); public File File = new File(); public UserSession CurrentSession = null; } public struct User { //some methods, including accessing currentSession } public struct File { } public class UserSession { } } namespace WPF_SDK { using Draft.SDK_Interface; public class MainWindow { Program myProgram = new Program(); //some methods, including requiring access to myProgram.currentSession //I'm currently accessing Program.currentSession to modify the value in here // e.g: private void SomeMethod() { if (myProgram.CurrentSession != null) { //user isn't logged in //login prompt } } } }
Jon Skeet is awesome. I love his content. His in depth series truly offers great insight for those devs looking to know the language at a better level. Jon takes you back to basics while also being greatly advanced. My .2 cents. 
Declaring structs or classes in another class is not recommended as far as I know. Simple is generally better, but not at the cost of readability. You can make them internal in the same namespace as SDK_Interface, if just need them there. This is my personal preference, I don't use nested classes, so don't take it as must not do.
[Properties in C#](https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx) Long and short is that C# has some syntactic sugar around getter and setter methods that lets you treat them *almost* like a field, instead of as two separate methods. In simple cases, declaring a property will also declare the field that the property wraps. E. g. if `currentSession` were declared as a non-static *property*, it would look like this: public UserSession currentSession { get; set; } = null; This isn't a huge deal, by itself, but you could do something like this: public UserSession currentSession { get; private set; } = null; and, now, classes other than `Program` (and the types nested inside it) can't set `currentSession` to a different `UserSession` object. &gt; Why would you recommend against using the structs? `struct` types don't behave quite the same as `class` types, and may cause some unexpected behavior as a result, particularly with regards to mutable state. There are times and places where a `struct` really is the way to go, but, for most purposes, a `class` will be as good or better. My remark isn't about code *organization*, but about how `struct` and `class` types behave. As an organizational detail, though, there may be no reason, then, to group the other types inside Program this way.
All you need to do is bring your `MainWindow` into the scope of `Program` which you can do 1 of 2 things: public Program() { MainWindow window = Application.MainWindow; //static reference accessible anywhere //set any properties you want window.Show(); } or public Program() { MainWindow window = new MainWindow(); //set any properties you want window.Show(); } 
Part of the aim of the project is to create Program as a reusable module so that we can package it up elsewhere, so Program and Main need to be kept separate for future modularity. Thank you for your response though :)
A struct is a value type, a class is a reference type. If they only contain methods, there's probably a slight performance benefit to a struct. If they contain more than 2 or 3 fields, though, a class may be more efficient. And, regardless, a class will probably behave more like you expect.
1) The only issue in the static department is the constructor, which indeed is bad. As for the library being static itself, there's no problem, quite on the contrary. Static is what languages such as C# and Java offers to deal with non-OO code. [Kudos to C# for embracing it fully with "using static" in C# 6.](https://msdn.microsoft.com/library/sf0df423#Anchor_0) 2) Then this library is not for you :) 3) A "factory of composable objects" for configuring a stupid simple log library? That's some real overengineering. A "Options" class with some default instance (the so called "zero configuration") is much simpler. 4) I agree with you that is a poor name, but I can't call it "log level". Log level implies hierarchy (the typical DEBUG -&gt; INFO -&gt; WARN -&gt; ERROR -&gt; FATAL). I find the whole hierarchy thing quite silly, you usually knows precisely which logs you want enabled/disabled. There's no much benefit in linking them IMO. 5) Agreed. This would be much better being configurable and with a more descriptive name. 6) Yeap. 7) Yes, it is. [Great part of .NET itself is written that way.](https://referencesource.microsoft.com/#mscorlib/system/console.cs) [Here is a SO question on the subject.](http://stackoverflow.com/q/125319/) &gt; I don't see why you are creating a new logging library just because you are tired of configuring the logger again and again. You could have easily created a small facade library (or factory library) with your common configurations :-) If I'm in a big code base trying to hide some configuration of a library, a facade is fine. But now imagine that is not a single big code base, they are many. They come in different size, shapes and flavors but they all have the very same logging needs: just a logger. How to distribute such facade? * Copying and pasting? A tiny mistake makes you go on copying and pasting the solution everywhere the original copying and pasting touched. Rinse, repeat. * Distribute it as a package that will be depending on another package? Two packages just for that? And what if there's a update for the "real" package? Should I update the package? Will it break the facade? Both of them seems like a poor man solution for such simple programming need. P.S.: You mention that you are a beginner, and considering "a factory of composable objects" here and "small facade library (or factory library)" there, I suggest you to watch out for the common beginner's mistake of starting to see everything as patterns. &gt; (...) in the OO world you hear a good deal about "patterns". I wonder if these patterns are not sometimes evidence of case (c), the human compiler, at work. When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I'm using abstractions that aren't powerful enough-- often that I'm generating by hand the expansions of some macro that I need to write. [(source)](http://www.paulgraham.com/icad.html) In other words, since OO languages lacks of other languages dynamisms, patterns are a necessary evil. Use them with care.
If this is the final table of contents, this reflects an interesting (and welcome) approach to the Fourth Edition, at least if you're someone who already owned a previous edition. Since *C# In Depth* was already (mostly) organized by C# language version, the Fourth Edition can be released as an addendum to a previous edition instead of a completely new volume that subsumes all of the previous content. In summary, the editions cover the following C# language versions: * Second Edition: C# 1 through C# 4 * Third Edition: C# 1 through C# 5 * Fourth Edition: C# 5 through C# ~7 Was this publishing strategy discussed online somewhere? If so, I'd like to see it. The overlap on C# 5 content is a little strange. I wonder if the Fourth Edition will be priced lower. Will the Second or Third Edition continue to be published for people who still want the In Depth treatment for C# 1 through C# 4? [Ah, the answer to the last two question is in the preface: According to an early access reader in the book's [forum](https://forums.manning.com/posts/list/40433.page), the third edition is included in the purchase of the fourth.] I remember when Alan Kay's excellent (but physically unwieldy) XSLT text was published in a new edition as two separate volumes on XSLT and XPath. The backlash was severe. The next edition re-combined them. I thought that was a shame. This was mostly before the popularity of e-books; a seven-pound book is just unreadable.
Agree, but...$39 for 3/12 chapters? Sheesh. (yes, I know that writing is a ton of work.)
I would have assumed that shipping and payment were essential for a V1. Also: The name seemed familiar, there is a SimpleCommerce company. http://www.simplecommerce.com/en/ 
It's a Windows form application, I still haven't been able to add the database as a data source. But I've been able to accomplish the task fine anyways. I would like to use it as a data source however. 
It's honestly worth it. With online tutorials, you never know what pieces are out of date or just wrong, and it takes up even more time to figure out what you need to know and don't need to know. You also run the risk of not understanding the breadth of the language enough. I've read the 1st and 3rd edition of Skeet's book, and it's definitely worth it. The content is solid, actually in-depth, and the examples are much better than other books. If you're planning to put C# on your resume, I'd make sure you understand the content in this book first. It's pretty much my source material for interview questions for positions requiring C# experience. Now I guess I have to get this one too since I'm behind on C# version knowledge.
hmm okey, but what if we just want to store one object for this, is it the same way? the " String Inmatning = ""; " is that one even rightly done ?? at line 27 http://imgur.com/a/lNd0J
Ah okey, i kinda understand, so what im actually doing wrong here is the Loop too or? like how should the loop look like or be placed ?
Oooh okey! I got it :O this really helped! Is there a way to make it so i can atleast store 2 objects? With this tecnique ? maybe with one more String?
See my first post ^ . Instead of making *one* string, make a collection of strings. http://www.tutorialsteacher.com/csharp/csharp-list Alternatively, since you're only storing text, you could using one string and just concatenate (i.e. append text). https://msdn.microsoft.com/en-us/library/ms228504.aspx e.g. 32 Inmatning += Console.ReadLine() Concatenation is easier if you just want to store a plain text list of objects, but if you want to add more complexity and have each "object" also possess properties (e.g. each object has a name and price) then it wouldn't work. Does that make sense? 
I agree. The last time we tried Mono was just before 4.0, and it had random segfaults and about 25% of the performance of .NET Framework, after we tried a lot of tuning of the GC, the LLVM compiler, AOT, etc. Mono 4.x incorporated a lot of MS's open-source code, so I don't think it's any more "proven" than .NET Core.
Something that might be worth reading up on: https://www.codeproject.com/Articles/22647/Dijkstra-Shortest-Route-Calculation-Object-Oriente
I had a lot of fun making this. It's my first attempt at playing with neural networks. The website I was working from had quite a few bugs, and took it took a while to get it working (and some help from /u/ziamor over on /r/AskProgramming), but I'm quite pleased with where it's at right now. I've got lots of ideas of where to go next. I really want to build something to help me view the weights and biases within the neural net to understand better how it works. The challenge will be finding the time!
All these C# 7.0 feature reviews seem to be going over the same exact things every week
Most of the examples I see are still better off with explicit data structures.
Could you "explain it like I'm 12" for me? Is it fun to play with, what can it do?
There were a pile of similarly styled articles when C# 6 dropped. They're not all bad, really, but they do tend to boil down to 'so, I read the release notes, and ...'
I've chatted with him on Twitter and in person a few times, he's a really nice guy.
Would this be like optionals in Swift? https://hackernoon.com/swift-optionals-explained-simply-e109a4297298#.q3dnu3lo0
Not all third-party .NET libraries work with .NET Core. Improved support for .NET 4.x libraries is one of the goals of .NET Core 2.0, though.
I tried including this library while at work today, following the code trails and found that the apache log utility that was included wouldn't work. Also the developer of the library and I emailed and he confirmed he has ceased development on it. I changed the apache log utility outputs into normal Console.WriteLine outputs as well as install the RestSharp .NET Core dependency. This changed just a few things in two classes (Client and ClientBase), but it turned out that I was able to compile the API library after that. The conflicting change that stumped me was `System.Reflection.MethodBase.GetCurrentMethod().Name`which was used in the logging utility. It was severed in .NET Core. I haven't gotten a chance to really test the library since I only completed doing that at the end of my work day.
I wonder what `default(T)` would become for reference types.
Oh wow yes - let the campaign for val start here! Who do we talk to about this? 
Good point... Forbidden unless there is a default constructor?
The proposal is here: https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md and there are language design meeting notes here to update it: https://github.com/dotnet/csharplang/blob/7ea9a47f7988476a8ac7eef290f5a18af5315eab/proposals/nullable-reference-types.md and the proposal champion issue is here: https://github.com/dotnet/csharplang/issues/36
Seems like this would wreak a certain amount of interop havoc with existing code that may return null as T.
The fact that Oracle owns it now is enough. Any innovation there is gone. If developers can't show an immediate ROI it isn't going to be done.
This pretty much sums up the first few lines of the blog, but good way to look at it too imo. Though I do not quiet go as far as to say "it does something and then returns a value" because really a Func&lt;T&gt; can do strictly nothing but return a value. Doing something else is not required. "Action/Action: These represent methods that have no return value, though they can support arguments (or no arguments). Func: These represent methods that have return values, and can support arguments (or no arguments)." The blog is more about the confusion about what Action&lt;T&gt; and Func&lt;T&gt; really are to newer (or older .NET users switching) programmers and code to demonstrate that. 
&gt; The choice of the ancient Greeks to consider the ratio of the circumference to the diameter instead of the radius is pretty arbitrary, but it does appear that pi pops up in a lot more somewhat unrelated areas of mathematics than 2pi. Precisely the opposite is true! In fact the only places I can think of that you see pi by itself is when there's "really" a 1/2 there for an unrelated reason that just randomly happened to cancel with the 2 in 2 pi. For instance, the circumference of a circle is *C = tau r* and so, integrating with respect to r, we have *A = (1/2) tau r^2* Yeah, you can write this as A = pi r^(2), but that's sort of concealing the fact that the 1/2 in (1/2) r^2 and the 2 in 2 pi are coming from different places and just *happen* to cancel one another. Honestly the only case I can see that tau isn't fundamental is Terry Tao's observation that the *actual* fundamental constant here is probably *ͱ := 2 pi i*.
It's so weird (to someone who built on the MS platform in the 90s-2000s) that Java went that route, and now MS is busy open sourcing anything and everything .Net and merging community contributed PRs.
Yeah we still have the odd "not invented here" terrible decision (that post the other day to invent their own mapper for MVC), but even the most jaded MS hater has to admit things have gotten a LOT better and the future looks good.
Thank you for your thoughtful response. We weren't taught the `Concat` method in class, but our prof doesn't really mind that. He's even forced us to learn things on our own for previous assignments which only makes this more frustrating. I can definitely change our code to use this methodology. Regarding outputting the wrong path, the triple asterisk does indeed represent a possible transfer point, and the three Expo Line text files at the top of the pastebin page are the exact contents, giving you an idea for the other stations and lines. Programming in the transfer points is something I have thought might be vital, but I have no idea how that would work. The program utilizes the value that is stored in `numStation`, so I think it might be necessary to edit that value somehow when outputting the shortest possible route. Again, thanks for you help, and I would appreciate anything else you're able to give me.
That's the weird thing though. Those text files I would consider incomplete and/or inconsistent. Especially with the Columbia station. Shouldn't that be a transfer point? And transfer to/from what? Shouldn't that be indicated in some way? Regardless, if you can somehow record the transfer linkages, then it becomes a path-finding problem. This is a pretty small scenario, so there's no need to implement some most-efficient or elegant path-finding algorithm. That being said, I wonder though if that's the intent of the professor. Seems like a complex concept for an early C# fundamentals course.
Not this version. `var` has been delayed to Java 10.
You seem to be conflating unrelated things. ----- Write F for the algebraic closure of Q(pi). There are an incredible number of formulas in mathematics where some transcendental element of *F* shows up. This is what we mean when we say that pi is truly a fundamental constant. It has nothing to do with any arbitrary choice made in ancient Greek times. The kinds of questions we're asking here are truly basic: * "What can we say about a quantity that grows in a long series of spurts?" * "What behavior is expected of a population that grows in proportion to its current size?" * "What happens if we take a nice function and iterate it?" * "What's the deal with waves?" You could perhaps make an argument that some of these questions might seem less natural to a hypothetical intelligence living in a completely different sort of universe than ours, but at any rate if these questions only seem natural due to arbitrary choices then those arbitrary choices were made by evolution and cosmology a long time ago, not by any human. I want to emphasize that *nobody* decided to "start looking for [pi] in other places." Rather, people asked questions about things they wanted to know and pi fell out of the calculations. It's virtually unavoidable once you have the basic notion of a "rate of change," because it falls out of the simplest nontrivial differential equation, *y=y'*. ----- Now the question we're discussing is which element of *F* to take as the representative of its class. So we should try and come up with a unified reason that explains all the different places in mathematics that various elements of F appear. One of the most natural ways to do this is to observe that if we take the simplest nontrivial differential equation, namely *y=y'*, then its solutions are all periodic with period *2 pi i*. A different way of formulating this (or another way of looking at the same thing, depending on perspective) is to observe that the Lie group U(1) has an essentially unique bi-invariant metric, and this metric makes it a circle in the sense of plane geometry. (A priori it's only a circle in the sense of *topology*.) And of course in plane geometry the constant *2 pi* appears as the ratio of a circle's arclength to its radius. What I'm *not* aware of is *any* context which 1. can be used smoothly to explain the other places a transcendental element of F appears, without translating to one of the above 2. is such that the generator of F appearing in the cleanest possible exposition is *pi* rather than some other generator.
Don't worry, C# is going that way too. 
Circle of life...buddy. What's cool today, won't be tomorrow. Can we keep the circlejerk to a minimum?
... an opinion without causation. WHAT? Do you think I just spontaneously generated an opinion? Do you think I am capable of violating the rules of logic somehow? Like I can imagine square circles and things like that? 
Huh? Do you just make shit up and then assert it to be true? You're some kind of delusional dude.
Reply with something useful if you'd like to have a respectable backed-up conversation about this. Until then, I'd rather sleep. Have a nice night.
You explained this with a great amount of detail without just straight giving OP answers. Oh how I wish C# was taught in College and not C++.
Create an issue on GitHub
Simple answer would be to forbid the creation of arrays of non-nullable references. Possibly with an exception for cases where the compiler can statically prove that all elements are assigned before it is returned.
That raises all kinds of issues, though. What if you wanted to implement a `List&lt;T&gt;` with an array that can hold more elements than the list currently has? Forcing initialization with a default value means that re-allocating the array becomes much more expensive than it needs to be. And if you can't create the array at all, well, it kind of ruins a lot of data structures if you can only declare them with nullable types. I guess the question would be, if you're implementing `List&lt;T&gt;`, can you declare a member `T?[]`? And then you'd have to be able to annotate your returns, because you're not going to check for `null` everywhere.
This was a proposed feature for C# 7 (or even 6?) and is constantly being pushed back. They could hide it behind a compiler flag which creates compatibility problems with existing code and also if they do it they will effectively declare all existing C# code legacy which is not a good strategy. Very problematic to add this feature so many years later if you care about backward compatibility.
You need to look up Dijkstra's algorithm. Just Google it to learn about it, then Google further for C#implementations that you can leverage. 
Well, he technically has a point. C# was created as a more user-friendly, easier to code, higher level version of C++ (With the ability to go low level if required) - So - What's next? Is there going to be something that will be user friendly to the point that it makes C# seem like C++ currently does? Then again - That thing will probably be developed by MS, and probably won't be coming for a decade or so... Or we'll all just shift over to web-only and anyone running local apps will be frowned upon - Who knows :)
Initializing an array with placeholder instances would defeat the whole point of having non-nullable reference types. That'd actually be worse than just dealing with null references, at least those are easy to recognize and give you an exception if you access them anyway. If you don't want nullable references in your data structure, you need to have values for your references. If you have null values, you can't have non-nullable references, same as before. I don't really see the issue or alternative here. Data structures that are always fully initialized (e.g. immutable collections) could use non-nullable references. Something like `List&lt;T&gt;` would have to use nullable references internally, but could still provide a non-nullable interface publicly.
C# is far nicer than Java. But the strengh of Java isn't language, but JVM
If only it had real generics
It was Oracle who finally managed to add lambdas to the language after 10 years of drama.
If only C# had real templates /s
This. I'm both a C# and Java programmer. C# is the better conceived language, and the JVM is a better conceived ecosystem/runtime than .net. 
Has this been confirmed by someone working on java? 
http://i.imgur.com/2yfySHQ.gif
They are planning on adding value types which require JVM support, so I think the idea is to cram in some reified generics as well. Without it, some of the value of value types would disappear.
Still let's appreciate Java for a minute for showing the way - virtual environment run static typed C-like OOP language with managed memory. No need to bash the predecessor on whose mistakes and achievements they've learned. Too bad people in charge run it somewhat worse. They wouldn't make C# if they could buy Java.
No this is false. C# was designed to replace VB not C++. C++ and C# may as well be on opposite ends of the spectrum in terms of the dot net family of languages. 
C# is getting pretty bloated as well, and the mere fact that its syntax (like Java, of course) derives from C means that it's not exactly clean and nice or modern.
Here's what I found on that "Java 9 and 10 will tackle big data, multi-language interoperability, cloud and mobile and ship in 2015 and 2017 respectively, Oracle said Wednesday. For the Java Development Kit (JDK) 10 or after, a fundamental change is being discussed: making the Java language Object Oriented. This might see the introduction of a unified type system that turns everything into objects and means no more primitives." From https://dzone.com/articles/oracle-discusses-features-java A bunch of "me too" that places them where .Net was several years ago is not innovation. 
Apparently Microsoft sees VB.NET as a sugar syntax of c#.
Yah -- all is an exaggeration (so sue me), but it's a lot and it's useful. Not many people know about it. 
Maybe you should learn to search properly, instead of looking into marketing web sites. http://www.oracle.com/technetwork/java/javase/community/jlssessions-2016-3114175.html http://openjdk.java.net/projects/mlvm/jvmlangsummit/index.html#Archives https://github.com/graalvm/graal-core/blob/master/docs/Publications.md https://wiki.openjdk.java.net/display/shenandoah/Main Just a small sample.
swift has this by default, and I absolutely loving it, and wish C# had it as well.
So a few more years after that and they'll have it in enterprise Java!
With Ref12 extension you get the ability to browse the source from vs
Do you have a link? That would be awesome.
Micro services is just the current buzzword until they come up with something else. I am old enough to have done micro services in CORBA/DCOM/SUN RPC, we just happened to call them plain services. 
It's already had it's day(microservices that is), serverless architecture is the new thing (function scaling).
There is no "that way." Both Java and C# are fine and have their own idiosyncrasies. Jokes about Java are purely hyperbolic.
&gt; It is not a goal of this effort to produce fully reified generics.
&gt; It is not a goal of this effort to produce fully reified generics.
Well that's just like, your opinion man
I'll definitely start adding this package as a dependency to my projects.
I think where it might have the biggest impact is on database data retrieval where certain values can be returned from the data base as null Not being any kind of expert I am not sure if that is a good impact or a bad one 
Then you've never had to refactor a large project
I'll admit that I don't have a great deal of C# experience but I've never written java and wished that I had *var*
Yeah Java gets a lot of crap now, and I do think C# is the better language - but Java did it a long time before .NET was even a twinkle in Microsoft's eye It's still a decent language, and it still does things C#/.NET can't (although that's rapidly changing with Core). Tbh I've never quite worked out why programming languages have a rivalry thing at all - do we even care?
https://msdn.microsoft.com/en-us/library/x85tt0dd.aspx Or, go to Debug &gt; Windows &gt; Exception settings and uncheck the exceptions you don't want VS to break for. And as a future reference: VS tells you exactly why it's breaking, and the solution for 99% of these issues can be found from simply google searching the text. 
C# was designed to replace VB? Gonna need a citation on that. That goes wildly against everything I've ever read about C#, including the wiki article on the [history of C#](https://en.wikipedia.org/wiki/C_Sharp_\(programming_language\)#History).
If the exception doesn't cause a crash, you could turn off breaking on exception. Once your project is open, Debug-&gt;Windows-&gt;Exceptions, then check/uncheck the box for 'break when thrown' next to 'Common Language Runtime Exceptions'.
Embrace, extend, extinguish
if you run the exact same code on your college PC and it works maybe something missing on a file system... it would help more if you provide some code or... you can always wrap the entire method body into try{}catch{} and don't give a sh*t about good practice programming
That worked brilliantly the try catch, at the moment I'm not required to give a sh*t about that, I'd rather have the whole thing working than it breaking every time I go to run it, thank you.
you're welcome :D
On one hand, it's going to complicate glue code a bit, because you wouldn't be able to implicitly convert a T? to a T. On the other hand, you often can't convert a null database value directly to a reference of the exact type, anyway, because it comes over as a DBNull value, not a null. On the gripping hand, the only common type this would affect is string, since all the other primitive types are value types.
I think it's the same reason any rivalries exist ("Goo sports team!"). People can be passionate about anything. And if I'm passionate about one thing, but you're passionate about a similar, but clearly distinct thing, then you're obviously wrong and I have to explain to you how wrong you are.
Hm. Then are they going to give us maybe types and actually enforce their handling? Otherwise I'm not sure how you can avoid nulls sneaking in via network calls, third party code, databases, etc.
IronPython is still alive? I haven't heard about it in years. Do you have a link about plans for IronPython to support .Net Core?
The JVM, while deployable nearly universally, needs to have some more features in its main language JAVA (imo). Specifically, I'd like it to have more of the dynamic language features of EcmaScript. C#, while a flexible and dynamic language, doesn't really have a mature runtime backing it and really doesn't have traction in some of the platforms (AWS/Google) like Java does. Node and ECMAScript libraries seem to me to have a head start with Amazon, Google, et. al. Micro services (and nano services) have very little to do with the language at hand as much as they do with their deployment and discoverability. 
Which makes sense to me about sports teams, but... who gets actually passionate about programming languages? I mean, I'm interested in them, and certainly willing to discuss the pros and cons of each - but I can't imagine getting into an actual argument about which is best. You just pick the best tools for the job in hand, surely? Maybe I've spent too long in a consultancy role and just don't care anymore :p
Right now, I agree - but if C# was looking in danger of stagnating, I can see that changing
There certainly are people passionate about programming languages. People who just pick the best tool for the job are not going to write [100+ comments about the scope of variables](https://github.com/dotnet/roslyn/issues/12939).
Node horrifies me. Who on earth looked at the untyped mess that is javascript and thought "I want that running on my server"
Is that necessarily passion? I'd see it as professionalism rather than passion - if I need to discuss things to improve it then I will, but that doesn't mean an argument. But yeah, I suppose people will fanboy about pretty much anything
No. No! **NO!** Absolutely not. You should absolutely not do this for something like a `ArgumentNullException`. Instead you should not pass `null` in the first place.
This is an idiotic advice. Seriously. Don't just ignore `ArgumentNullException`, fix them. Simply don't pass `null` as an argument in the first place.
On line 64 of SearchingForPhonesForm.cs, you pass *null* as the parameter to a function that has decided *null* is not valid for that parameter. Generally when this happens on one machine and not another, it's because you're accessing something volatile (the filesystem, databases, the network, etc.) that can give you *null* instead of a result. On the machine where it works, you get the expected results. On the machine where it doesn't, you get *null*. You can't make the program not stop if this happens. It's like asking how to make a goldfish swim in lava. What you can do is find out what causes *null* to be generated and handle it gracefully instead of passing it to that method.
You need to provide the code that is causing the exception. You're passing a null value somewhere and we can't see where.
&gt; if you had read my post, and actually knew about VB then you would see the err of your ways. I did. I read this nonsense: &gt; C# was designed to replace VB not C++ Citation needed please. 
Seems like you have the same assignment as https://www.reddit.com/r/csharp/comments/60pmo2 maybe you could help each other ;) 
This will couple nicely with the Vanilla.js framework on the client side.
I work with LINQ extensively, but not generic types. If it's possible to know what type my variable is, then it's explicitly declared. I see a lot of developers who just slap "var" on the variable catching the output of a LINQ expression because they can't be bothered to find out and type out the actual object type. It makes parsing their code a chore.
While I agree in theory (and expect this is probably causing a crash downstream), it may not be important to the assignment he's working on, and it's less awful than the redirect to /dev/null that was also recommended.
I think they are discussing this in terms of local declarations, where readonly isn't allowed. Presumably, it would also leverage type inference a la `var`, so it would be less verbose than the const locals we have, now.
I dunno, with NaN% unit test coverage, I'm not sure it's safe to use...
"He's even forced us to learn things on our own for previous assignments which only makes this more frustrating." This is the most important lesson you will learn from your class. You're making lists of strings. C# is an object oriented language. Don't fight it's object oriented nature; embrace it. Make a class for your stops. Have a look at the concept of a doubly linked list (assuming these lines go both directions), and see if you can connect the dots. It's not your answer, but if you modify it a bit, you might find the start of an answer. Add to your class methods that will do the things you need to solve your problem. Break your problem into smaller problems, then tackle those. You need something to traverse, then you need to figure out how to do the traversal, then you need to find the shortest traversal. To figure out how to get from a to b in the least number of stops, it would make sense to know what all of the options are, and how many stops each option requires. Modern computers are fantastic things; you can do billions of calculations per second. Don't be afraid to put your machine to work, and don't be afraid to experiment :). Bring your solution and your failed experiments to your professor; he will recognize your effort. A great programmer is a hacker first. Now is as good of a time as any to learn to hack. Get the C# documentation out, give your problem a good think, have a good read, and start writing prototypes. Hacking is all about iteration. On each iteration, figure out where you were wrong (or not quite right), fix it, and iterate again. The more you do it the better you will get at doing it, and you'll start to develop instincts and taste. Few programmers have manuals for what they are asked to do on a weekly basis. We make a lot of it up as we go along using experience, instincts, taste, and iteration. You're going to have to learn to do that. The better you can hack (the more abstract problems you can solve), the more money you will make. It's a skill like any other; it requires practice. Go get 'em tiger.
I love you.
You say that now, but your tune might change [in a week or so.](https://www.reddit.com/r/csharp/comments/5d9tml/visual_studio_2017_rc_download/da36cby/?context=10000)
Removed: Duplicate of https://www.reddit.com/r/csharp/comments/60uvea/need_some_help_regarding_an_exception_issue_its_a/
&gt; This is an idiotic advice. Seriously. Don't just ignore ArgumentNullException, fix them. Simply don't pass null as an argument in the first place. Calm down - they literally asked how to prevent VS from breaking for the exception.
Its reading from a CSV file, it ignores null and doesn't actually matter so ignoring it in this case is completely fine
That's why I'm porting c# to the jvm (joke)
Thanks 
To be honest, when I first used Java I loved it, then I used C# and loved it more. However I still like love both languages for different reasons and think its quite illogical to hate either one if you love one of them since they are so similar in comparison.
Can you debug the project with breakpoints? You might want to step through it to see what exactly is pushing it into the catch so you know what's being run and what isn't. If you send over some more info I'm sure people will be able to find the specific value that is null. Good luck 
Correct, plus consts cannot be reference types.
&gt; I thought OOP is the goal here, since it's easier to test and you could also replace the log library later via dependency injection. From the library standpoint, OOP is not a goal. The goal is to provide bare bones logging that is reliable and presents very low friction to use. If OOP is a goal to you, just do it, the library design has nothing to do with yours (see my second remark in [this answer](https://www.reddit.com/r/csharp/comments/5zt31e/l_a_zero_configuration_logging_library/df1thj5/)). &gt; The logging hierarchy is helpful when you only want to output logs above a certain threshold That's what logging hierarchy is, but I don't find it particularly *helpful*. Passing a list of logs to disable seems rather OK compared to passing just one and remembering/realizing the hierarchy involved. &gt; I'm pretty sure that C# / .net has also a good package manager (probably nuget) to handle the dependencies and keep them in sync. NuGet has a low of flaws, one of them is that the dependencies are flat, you can't really see the tree of dependencies (unlike with other package managers like npm). &gt; So your goal is to be functional while trying to make everything static? Can you tell me how that works out? I don't see it sorry ;) Almost all the applications that I worked in had an error logging that is there to save you when everything fails (even if has some other fancy database log or something). In this case you, don't want to deal with a whole jungle of composable writers/managers/appenders/loggables, you just want a god damn global reliable error logger. Why give the burden of instantiating and keeping the instance around to the user? I'm making a log *library*, not a log *framework*. Thanks for making the conversation going by the way!
The only things I got out of your link dump: 1. Java compiler written in Java (Hi Roslyn, fancy seeing you here) 2. Faster GC Useful but hardly innovative.
Pretty fancy pants stuff innit......? ಠ_ಠ Although I think Galestar was thinking more on stuff that developers **actually** use day-to-day; increasing productivity, stability, maintainability and such. Excuse me but, who in the world cares for the .NET JIT compiler to have to be written in C# itself? Will that change my world as a .NET developer? It's awesome that Roslyn is now here - I love it, it's great - and you could mark that as innovative, but even that did not change many developers lives. And I mean a better GC would be nice I guess, but that's exactly that: nice. RyuJIT + auto vectorization, really? Innovative? Yes. Pretty special? Yes. Game changer? No. And btw, let them finish .NET Core before going portable GUI. Perhaps it will come indeed and one could definitely mark that as innovative for cross-platform development. I'd like to see it happen. Imho the only thing on your shortlist actually worth mentioning. And if we're going full fanboy: shame you did not include the counterpart to this as well (stuff Java does not do and C# does); or is that a not-so-short list? 
Try take a look at the documentation here: https://msdn.microsoft.com/en-us/library/bb399339(v=vs.110).aspx Note that this uses the query syntax, you can simply use the method syntax instead.
An untyped language is not moving forward. I suspect the only reason javascript was chosen for this is its market penetration into clients via the browser.
I didn't. I'm a C++ developer for the most part. Does that give you line by line source? The nice thing about reference source is that you can see how they implemented things. I often borrow ideas from MS, for implementation in native code. It's rather helpful. Also, when I need to do things that I shouldn't with reflection.
If I do that, I'll be hammering the database thousands of times per second. 
I appreciate the response and I hear what you're saying. Honestly, though, I don't have a strong grasp on C# and don't know how to solve the problem. This class I'm taking is just an introductory class, and one that feels like it's moving relatively quick considering how little I know. Maybe I'm just slow or something, lol. But what our prof has taught doesn't feel like it's enough help.
I rarely need to select a few bits of data out of a LINQ query, it's either one piece or the whole lot being bound to something.
YamlDotNet's related repository is **[FastCoding](http://github.oldjpg.com/repository/15080851)** &gt;A faster and more flexible binary file format replacement for NSCoding, Property Lists and JSON
No. Especially in that case it's not fine to ignore and catch the exception. **Prevent the exception from happening in the first place!** If you already **expect** it to be `null`, simply add a `null`-check and don't call the method in that case.
Might this be what you're looking for? https://msdn.microsoft.com/en-ca/library/mt674882.aspx Setting the XML generation to an async call shouldn't hold up the thread.
I appreciate the concern but I assure you in my case its completely fine, im under a time limit and in the exams eyes its better to have it working than to have a null exception fixed.
Assuming that your IDs are identical in the info list and the database table, then I think this will work: info.Join(dbContext.Table, // Join the info list to the database table i =&gt; i.Id, d =&gt; d.Id, // where the two IDs match (i, d) =&gt; new { info = i, d.GuidId }) // and choose the info entry, and the database GUID .Select(r =&gt; { r.info.GuidId = r.GuidId; // Update the info entry's GUID return r.info; }).ToList(); Whether that's "better" than a foreach loop, I don't know. I'd say it's certainly less readable... and that probably means it's not as good, but it does what you've asked for.
What has C# done that was actually innovative according to you? Please provide a C# feature I cannot present a SIGPLAN paper older than C#.
That's... a very sad attitude. It's a **trivial** fix that you choose not to implement. Instead you put **more effort** in working around the problem. I assure you, it's not fine. And if your professor considers this fine, then he's not doing his job.
You're not slow. You've been given a hard assignment. How long do you have left?
So you're wanting to update rows in the database based on this List&lt;InfoClass&gt; that you have, correct? And you want to update them "as they're found"? The closest thing I can think of is inner joining your db table on your List&lt;InfoClass&gt; and updating the db table based on the joined column from your List&lt;InfoClass&gt;, but I'm not sure you can translate to that from Linq(-to-Entities?). Edit: [This comment](https://www.reddit.com/r/csharp/comments/60wo6c/using_linq_to_update_an_array_from_a_database/df9z6q5/) is basically what I'm talking about. If not, and you REALLY want this to be done in one statement (and assuming you're using a SQL Server database), you can write a stored procedure that takes your list as a table-valued parameter and does this update via join as I've described. You'd have to [create the table type](https://msdn.microsoft.com/en-us/library/ms175007.aspx) for your list.
Well thanks for being active on this sub :)
If I understand your code snippet correctly, what you've given us is the code for the 5-second timer, and the updating of the list box. The problem is that, while the XML generation code is running - which I don't think you've shown us - your timer won't be able to fire properly. (Actually, it *will* fire, but your program won't be able to respond to it.) Basically, LoadStatusWindowTextTimer_Tick won't be called, because the thread on which it ought to be called is being tied up by the XML generation. So there's no point writing any asynchronous stuff inside LoadStatusWindowTextTimer_Tick, because that method won't even get to start. What you need to do instead, I think, is to generate the XML code in a separate thread. Then, the 5 second timer (and all the code that it runs) can carry on running on the main thread. 
There's something going already it seems: https://github.com/dotnet/csharplang/issues/188
Ish, there's actually semi-recent commits on it, and there's a nearly empty project on github for supporting .NET core. It's not exactly thriving, but it's apparently not dead.
[removed]
Much faster than and simpler setup than ef if time is a constraint 
Perhaps what's innovative is putting all of those in the same language.
highly suggest vmware. only put the things you need on the machine. (vs, git, etc) go over to mac for everything else (even web browsing)
Parallels all the way. Using the coherence feature makes it feel like you're running windows apps from your mac (which you basically are). 
I think there may already be a proposal or two using the `let` as the magic keyword, FWIW.
I once had to use MarshalByRefObject and this site was a real life saver. That was 4-5 years ago and wont forget the nightmares I had from it before I found the site. We had an issue with the LifeTime lease.
Ah, that makes sense. Thanks for the clarification!
Yep - this is my setup, except I use VirtualBox
I've done Bootcamp and Parallels. Based on that experience - I would advise you to buy a cheap Windows laptop to develop your Windows desktop app on. Developing for Windows *worked* on those tools, but there were just too many annoying small things to make it *enjoyable*
I think with "These APIs" they were referring to the "common BCL code that is not tied to App Models". WPF is certainly not coming to any other platform anytime soon, and WinForms is really outdated so I can't see why they would bother porting that.
&gt; dumb dumb move on my part. I've been working with multithreaded code for years and still make those mistakes from time to time. Threading is one of those things that there are a ton of wrong ways to do things, and few correct ones. Stick with it, you are doing fine.
Yep - you can't update the list using query syntax, so as you say, you'd need a foreach loop. But that's a neat way of combining the two sets of data in preparation for the foreach loop, and much easier to read than the method syntax that I came up with. I think it's my favourite solution of the ones I've seen so far. Hopefully OP will see it.
Since when is WinForms not crossplatform? Works fine using mono; or do I miss something ?
JavaScript's largest problem isn't that it's untyped. It's that it's weakly typed, inconsistently typed, and it has a moronic class system, which ES6 only covers up. I've given it a chance, and it's just terrible. It's like someone trying to sell you on a house that has a giant hole in the living room floor that goes down to a pit of spikes, and the previous owners keep extolling the virtues of the kitchen and how it's easy to just walk around the hole.
Exactly what I was thinking. His comment is very telling. Basically, if it wasn't invented de novo by Microsoft, it's not innovative. In the real world, innovation includes synthesizing old and new ideas.
Yeah mono supports WinForms but why would he use mono if he's only developing a windows application?
I do the same, all solutions in a folder directly on the root. Why? Habit! The 255 (or 260, I forgot exactly) file path limit on NTFS used to be a huge pain to deal with
personally, I think the T? idea is better than a warning, it would (should ) result in a compile time error if implemented correctly. 
I do the same. C:\Work\[repo]
I do the same, but i put them on a secondary drive (rather than c). One major benefit of this is that if you use more than one windows profile (for example sometimes a local profile and sometimes a domain account) then you don't have to deal with the permissions issues of accessing the code in a different user's documents directory.
I use the home directory approach (`c:\users\me\prg`) to hold all my code, just like I rename `Documents` to `doc`, `Downloads` to `tmp`, etc. Also have a folder at `c:\users\me\bin` which I put on my PATH and dump any executable tools into. At home I further subdivide ~/prg into different languages, `py`, `cs`, `sh`, etc. but at work it's more or less .NET. Note that in powershell anything in your home directory can be accessed with `~/` so it's even faster than typing `c:/`
I have a drive just for projects. So m:\projects. Also put my sys internals stuff there plus my drivers. Allows me to blow away my system partition easily plus exclude all that stuff from anti virus
I'll let it ride in the default directory because I'm lazy. In the spirit of optimal lazy, I then add the VS projects directory as a favorite in Windows explorer. And add an alias for git bash. Likewise, some projects stay in ~/Source/Repos/, which is also a favorite in explorer.
Exactly. I've worked with too many devs who ought to know better but can't be persuaded to turn on warnings as errors.
Best of both worlds, wrap query in parenthesis and then use method syntax
I put everything into a folder called "gitrepos" because everything I do goes into a repository online. Stuff that I don't care about usually stays in the default documents folder.
I personally let visual studio save my projects to its base directory. I have an application that I wrote that copies my project from that folder to my network backup and to my personal backup. In addition to both of those I have an SVN repo (that I had to fight for, even though it's free) that lives on my personal dev server. That server is also part of an additional 5 layer backup system.... It may be a tad bit overkill... But hey it's saved my ass a couple times. 
I have everything in "documents\code" but create a symlink to c:\code. That way I can backup my user profile and I have everything I need.
255 sounds right? I hate digging way into the folder structure to copy my exe from bin up to my test server (my last job was archaic and didn't want to adopt new tech or ideas). C:\mycode ftw 
They did, it's called WPF. They continue to update and improve WPF and it's already fantastic. Winforms is basically in maintenance and I don't see them replacing WPF anytime soon.
Blah I don't that get it.. There are so many better technologies out there to build cross platform apps. I don't understand this drive some people have to use JavaScript everywhere. I mean we use JavaScript with web development because we have no other choice, not because it is good. 
&gt; Note that in powershell anything in your home directory can be accessed with ~/ so it's even faster than typing c:/ i knew pythons path libraries had this support built in (~ being c:\users\&lt;your user&gt;\) but I didn't know powershell supported it out of the box, as well. That's really handy, thanks!
Same here. I have a folder like d:\MyDocs\CSharpProjects or whatever. Only difference is I have this on a non-system drive.
Ok, I can see a few things where which are making life difficult for you: - Your variable names. `sum3`, `value2`, `sumS` - it's not at all obvious what they mean. I've had students before who have really struggled with problems, a bit like you are at the moment. Then I've asked them to rename their variables, so instead of `value2`, you choose something meaningful like `deluxeNights`. When this particular student did this, his eyes lit up and he said "wow, it just reads like English now!" And a moment later, "hey, I found the problem, it's easy when you can just read it like English and see what bit doesn't read properly!". (Did you know that if you click on a variable and press Ctrl-R Ctrl-R, you can rename the variable, and it will also rename it everywhere else it's used?) - Once you've fixed that, you can address the problem you're asking about. Think about how you'd do it *without* a computer. You'd keep a running total of the important numbers, wouldn't you? To get a running total, you have to add the new value to the running total each time through the loop. There are two ways of doing that in C#: `runningTotal = runningTotal + newAmount;`, or `runningTotal += newAmount`. Both of these take the existing value of `runningTotal`, add `newAmount` to it, and (importantly) *put the answer back into `runningTotal`*. You're not doing anything like that anywhere in your code, which is why you're struggling. If you've got sensible variable names, then it should be obvious what values to add to what other values. - You have some lines at the end that look like this: `Console.WriteLine("{0} days at the Deluxe Villa level.");`. That will cause an exception, because you haven't specified what should fill the placeholder `{0}`. What you've done is correct, but not finished yet. I'd comment that out until you're ready to finish it, so you can get one bit working at a time.
Mind sharing that alias? Every time I touch git something disastrous happens.
WinForms is just a layer over Windows API
I created a folder in the C: drive (something like "visualstudio") and then mapped that drive persistently with the "subst" command at the windows startup. With this method I have another drive (that shows up like a physical one but in reality it's just a virtual folder) in Windows Explorer and I can just do things like Y:\Projects\etc... This is my preferred way to keep things organized, especially when I don't have another drive other than the C: drive on the pc I'm working on. If you need help in setting up the subst drive let me know, I'll help if I can!
Your apparent need to state your own qualifications - and in particular what they are - tells me nearly enough about you as a developer. First off, what [k0te said](https://www.reddit.com/r/csharp/comments/60qx18/not_to_hate_on_java_too_much/dfa5vgx/). I guess it wasn't clear enough that I was thinking about innovation for regular developers instead of patent-pending innovation and phd papers. You can throw with references to older stuff around as much as you like, making sure that every single thing about C# is non-innovative, while truly missing that point. What is innovative about C#? The fact that it brought all those things you mention into a very mainstream language, continuously improving the aforementioned productivity, stability and maintainability. And the speed at which that happens. If you can't see that, you are probably too far from an actual developer and perhaps more computer scientist. Really that's okay. But this is the csharp subreddit, mostly filled with actual developers. They will not share that black and white view. C# is made for the masses, so please also review it in that manner.
Well, I am new to C# so for purposes of learning, default directory. But I have a folder in C:\ for stuff that I want to work on as personal projects. Makes navigation easier.
Dude ur a little insane
I stick mine in a subdirectory in my home dir (~/Programming). Having everything in solution-named folders there is neat enough for me. 
I have a partition dedicated to projects `E:`, along with a few directories inside like 'Project Ideas' for testing new ideas/new STL etc..., and 'Project Trash' for whatever project I abandon but might later reuse. And like so many people, I've more projects inside Ideas and Trash combined than I
I use different computers for developing, so I am currently using google drive for synchronising my projects. I am willing to listen to other suggestions.
Although i understand your sentiment, there are legitimate reasons. 1. If you know HTML/JS you don't have to learn a whole new technology set. 2. Electron is leverages the V8 engine which is widely used across all platforms (linux included). I'm not convinced that other options have as much usage. 3. Allows you to potentially code share for mobile as well. I've seen demos (yes their demos) that has the same js controller file and html on Windows, Mac, web, Android, and iPhone. 4. Some people actually like JavaScript, and although it isn't a panacea, being able to develop things outside the web with it is a benefit.
U said u know how to get a random number, thats solves problem#1. With that number u can write to the console (that number)x times. For the last one, look up Console.WriteLine and it will tell u how to format a string
I don't know... I think I'd rather use a (named) tuple than a three-field custom structure, especially for more internal use.
I guess the customers happy to keep paying for my services all these years, might wonder what it means to be an *actual developer*.
ok i have used that code to get a kind of bad prototype and i'll keep updating the desc. with the code i end up with. also on "string.empty" empty says " 'string' does not contain a definition for 'empty' " (sorry my brain isn't working with me at all this morning and i'm not very good with arrays...)
This method is bad because 1) it does not solve the underlying problem, it just pushes it further inside, where it will be even more difficult to diagnose later, and 2) you risk creating a bad habit, which can then cause problems in your later projects. You should definitely try to find the cause of the problem. Right now it does not raise an exception, but it will probably not work as expected. Try to use debugger, set up breakpoints, step through code which raised exception. Debugging is valuable and necessary skill for every programmer.
You need to learn how to read documentation. Then you could have answered your question about "string.empty" yourself in less than a minute. If had looked up the class [String](https://msdn.microsoft.com/en-us/library/system.string\(v=vs.110\).aspx), you would have quickly found the field [Empty](https://msdn.microsoft.com/en-us/library/system.string.empty\(v=vs.110\).aspx), and consequently realised that it was capitalised. A good IDE (e.g. Visual Studio) would have corrected this mistake for you (I cannot stress enough how nice a good IDE is when you're starting out). Further, notice that fields, methods, etc., are capitalized. Also, `int L = RNG.Next(list.Length);` can return 0, which causes an error in `int MaxListSize = RNG.Next(1, L);` since 1&gt;L.
It might be helpful to work backwards from your desired result. Can you provide an example of the output you'd like? (e.g) Run Information ------------------------ Thing one Thing Two Thing four etc
There actually aren't many good alternatives for cross-platform UI. Yeah, I don't really like electron either, but right now it definitely is one of the best options. It's about time someone made a better cross-platform UI toolkit.
Sorry I couldn't answer directly since I'm at work. But I'm glad to hear you figured it out. It's weird that the string class didn't recognized it since I'm always using string and not String. And like telum12 said, I highly recommend using visual studio which has a lot of features that will make you enjoy coding C# more Btw, why not: string[] list = new string[] { "Pyromancy only ", "No Healing ", "No Bonfire ", "No LVL-ing ", "Starting Weapons Only ", "Agressive Mod ", "Weapon Swap Mod ", "other", "other", "other", "other"};
Yep, TFS and OneDrive both have 255-char path limitation. Only issue I've had is with nodejs stuff; module hierarchy makes for some crazy long path names.
Removed: Rule 4. Feel free to repost it, but perhaps provide better clarification or visual examples of what you're trying to accomplish.
[That is entirely unnecessary](http://stackoverflow.com/questions/16704235/how-to-open-project-folder-from-visual-studio-in-windows-explorer) 
This is actually very helpful, i'll get to work on learning more on the Documentation and the language in general (i've only been do it for 4 days so i haven't learned very much of anything yet...in fact this entire page is going into a .txt file for later examination)Thanks :)
https://msdn.microsoft.com/en-us/library/ty67wk28.aspx itemCountLabel.Caption = (value == 1) ? "1 item" : $"{value} items";
itemCountLabel.Caption = value.ToString() + (value == 1) ? " item" : " items";
Looks like It's in Kestrel, but I want to make it full IIS as I'll be hosting it from that. should I change the .UseKestrel() call to UseIIS(); I don't have the actual error anymore, and I only have the basic starter project at this time. 
The interpolated string won't care about `""`, but you will need to wrap the ternary operator expression in parentheses, or it will try to treat everything after the `:` as a format expression. So, like this: itemCountLabel.Caption = $"{value} item{(value == 1 ? "" : "s")}";
I got bitten in the ass by this just last week. You're right, but my code is also not compilable in linq pad without the parentheses.
An alternative approach to the given answers, by using a third-party library [Humanizer](https://github.com/Humanizr/Humanizer): itemCountLabel.Caption = "item".ToQuantity(value); Example output: "item".ToQuantity(0) // 0 items "item".ToQuantity(1) // 1 item "item".ToQuantity(5) // 5 items
Just going to use standard authentication for this and add windows auth back in later.
Javascript itself can be a pain to work with, same with css; but when you combine html, javascript, and css you end up with something that's greater than the sum of their parts. It takes about 5x longer doing wpf/winforms to do the same thing with a 2d interface in html/js/css.
 c:\Code\gh - GitHub stuff c:\Code\c - Company repositories c:\Code\misc - Random junk projects More and more projects and tools are long-path tolerant these days but it's still an issue in some places, so "My Documents" seems like a bad idea to me. I link the code folder to my explorer 'quick access' list and I've set up powershell variables in my profile, so I can do things like: cd $gh; #CD to github root cd $mcr; #CD to main company repository 
I second that. Vanilla.js is awesome. Hands down, the fastest library I've ever used. 
Thus why using the Humanizer library suggested by /u/AngularBeginner is probably the way to go since it supposedly handles international formatting.
It's true and it will obviously work even for stuff that's not in the reference source, but you get a) bad variable names; b) compiler-optimized code; and c) no code comments.
In addition I would heavily recommend consulting some coding conventions. Class names should be pascal case: ClassName instead of classname or className Variables should be camel or snake case - never capitalized: Random rngVal or rng_val. Always assign your variables meaningful names; "K", "print", "L", etc are ambiguous and not meaningful. --- Also there is no reason to put "\n " after each entry. You can append that a single time by doing `print += list[OUTCOME] + "\n "`. (though the solution proposed by AbandonedArchive is much better)
I like the idea for the `KeyValuePair&lt;K, V&gt;` extension, but I think if I want indices for array/list access I'll stick to a `for` loop. Your invention feels like it adds unnecessary overhead in comparison. Also, minor point: After googling it seems like *indexes* is a valid pluralisation of *index* so maybe this is one of those UK/US things, but I've only ever seen or used *indices*. I wonder what others think?
That's exactly what I'm using to implement it. However, this foreach ((var index, var value) in collection.Select((value, index) =&gt; (index, value)) Is much more verbose than just: foreach ((var index, var value) in collection.WithIndexes())
A for loop forces you to access the underlying collection with the index, which makes for a messier syntax. Plus you're not always working with an array or anything else actually indexable, you might want indexes with a random IEnumerable&lt;T&gt; as well.
Yeah, I don't quite see the point of that one, either. `WithIndexes()` doesn't seem to offer much over the `Select()` overload in the platform, or over a standard `for()` loop. (The plural of 'index' is 'indices', but the name should probably be 'WithIndex()', too, since it only knows about one!) Seems OK, otherwise.
&gt; A for loop forces you to access the underlying collection with the index, which makes for a messier syntax. It's a tradeoff at the end of the day, but I'm just pointing out that the language gives us a perfectly serviceable mechanism for index-based access already that incurs less GC overhead and will run faster. Don't forget that the CLR can recognise patterns like `for (int i = 0; i &lt; array.Length; ++i)` and remove the array bounds check. Also I'll accept that `for` syntax is slightly less elegant than a `foreach` loop but as a C# programmer I think you should be comfortable enough with all the basic loop constructs that this feels like a very minor issue. &gt; you might want indexes with a random IEnumerable&lt;T&gt; as well. I would be wary of anything that adds indices to a random `IEnumerable&lt;T&gt;`. There are a fair number of collection types for which any kind of index-based access makes no sense: The order of elements in a `HashSet&lt;T&gt;` for example is completely subject to change whenever the collection is mutated.
I'm an American, and would have said that 'indices' was correct where 'indexes' was most likely incorrect/informal. Some googling to find out what the grammar nerds think suggests that either is acceptable. Go figure.
I've gone to using an intermediate formatting style: itemCountLabel.Caption = (value == 1) ? "1 item" : $"{value} items"; More compact than the original format (especially if your shop has a style guide that requires curly braces), but still shows that you're picking one of two outcomes. And still lets you load strings from a resource file for your I18 needs. 
My C: drive is for OS and applications only. I have a RAID on a separate file server in my home for my code (and music and videos) that is also backed up to the cloud (encrypted) This way I can get to my files from my desktop or laptop. My drive is as follows: * Code * Films * Music * TV Shows * Videos Within the Code folder each project has it's own folder, within that is a "Documents" folder with additional folders for Images, Icons, Tests, whatever. * 
I have used C:\dev for 20 years. I was really happy when the filesystem limitations were removed however I still run across portions of a deployment chain that have the limitation. It may be a build tool or a code generator or something but inevitably I will hit this limitation often at the worst possible time. As a result I still live by the rule as much as I can just to avoid that late friday night. 
Is there a reason you don't use something like GitHub or visual studio online? That would let you simply grab the latest with a command from any computer with the various benefits source control systems offer.
Short experiments live under the default directory. Everything else has a separate top level directory under `\ ` for each project. A favorited folder under `~\Desktop` has a shortcut that opens PowerShell in each project with project specific aliases configured (jump to certain directories, start compilation, etc.) and auto-loads the relevant PowerShell module for that project's version control system (e.g. Posh-Git for git, custom wrappers for others).
 // indexing an arbitrary IEnumerable or IEnumerable&lt;T&gt; var i = 0; foreach (var x in collection) { // do stuff with i and x i++; } vs foreach ((var i, var x) in collection.WithIndexes()) { // do stuff with i and x } You're not saving a whole lot of ceremony (initializing and incrementing i, mainly), but you *are* creating the tuples and the enumerator for your `Select()` call.
One of the many reasons no-one should ever use TFS
You're completely right about the variable names, it makes it easier for yourself and anyone else who is reading it. Also you might know what sum1 and sum2 mean right now but coming back to it after a few months and you'll have to relearn what they are all over again.
My lexical predisposition is unfortunately influenced by affectations intended to convey an erudite impression. This may make my judgment less than perspicacious in the specific circumstances.
Your sesquipedalian loquaciousness is gratuitous yet impeccable.
This one is more of a bash thing. In your .bashrc file, I have the following: alias cdVS='cd "~/Documents/Visual Studio 2012/Projects/"' So to navigate to the default project directory, I just enter: cdVS Git itself is just one of those things that gives you enough rope to hang yourself. Until you get familiar, it's scary, hard, and dangerous. But totally worth it, imo. 
No arguments here. =)
&gt; The plural of 'index' is 'indices' It's both. http://grammarist.com/usage/indexes-indices/
Great, I am planning on using it in our game. I am having some issue using Unity with this type of field "public Dictionary&lt;string, object&gt;". Which resolver should I use to have it properly serialized as I am having exceptions?
If you already know programming then just do a project off your own back. If you can't think of anything to do find a small closed source app and re-create a basic version of it then opensource it on your github.
I can't quite figure out what you're trying to do, but I have two observations: - To help solve your problem, set a breakpoint on the line after the relevant Convert.ToInt32, and hover the mouse over each of the relevant variables to see what's going on. If necessary, set breakpoints at other places to see what's going on in other places too - Your choice of variables is really quite horrible. If you make an array, `int[] FilmBudgets`, and another array, `int[] FilmBoxOffices`, you could put the whole of the repeated code section into a `for` loop, which would reduce the amount of code, reduce the likelihood of errors, make it all more readable, and make it infinitely more maintainable. I don't know if it will help with the actual problem you're trying to solve, but it certainly won't harm.
Lookup `foreach` loops: int[] someArray = new int[] { 1, 2, 3, 4 }; foreach (int element in someArray) { System.Console.WriteLine(element); } This will write out the numbers 1, 2, 3, 4... what would happen if you put another `foreach` loop _inside of_ that one?
I used this [guide](https://docs.microsoft.com/en-us/nuget/guides/create-net-standard-packages-vs2015), where it says: &gt; &lt;id&gt;AppLogger.YOUR_NAME&lt;/id&gt;
That would work if OP knew how many numbers he had. If he had 4 numbers he could nest 4 foreach loops (or 4 loops) inside each other. But OP said: &gt; if the length of the array [is] passed in by a user? So I don't think that will work.
Removed: Rule 4. As mentioned by others, you'll want to look into combinatorics. Do some research, dive in, make an attempt. If you still run into issues, feel free to post a question about the specific issues along with source code of your attempt. Good luck!
Removed: Rule 4. Too broad. Dive in and make an attempt. If you have specific issues, feel free to post a question but include relevant source code of your attempt.
If you're multiplying every number in the array by every other number in the array, you would only need 2 loops to accomplish it, regardless of how many items are in the array. #PowerShell because I just closed Visual Studio $array = 1..15 foreach ($num1 in $array) { foreach ($num2 in $array) { "$num1 * $num2" } }
~~OP has deleted his post now,~~ which is a shame. (Edit: I see it was deleted by the mods, not by OP.) But that wasn't his requirement. His post, before he deleted it, required not only `a*b`, `a*c`, `a*d`, etc. It also required `a*b*c` - *every* combination of numbers in his array, not just every *pair* of numbers. At least, that's the way I read it. It's moot now, though, since the question has been deleted.
Oh, can't go back and look, but I did just skim the post, so you're probably correct :P
Good shit! Scared me too, i thought i really fucked something up bad. I think it was caused by editing my project at home in VS2017 and then continuing to edit it at work with VS2015.
Haha yah, unless they are assholes, I doubt they'll do that to you. Good luck. 
They're going to ask some simple questions just to watch how you approach solving them. You might get something like, "Write a function to return the nth value of the Fibonacci sequence"...but they won't be upset if you don't know what that is as long as you can work through the problem. The important thing isn't that you know all the basics about everything when it comes to ASP.NET, it's more than you can figure out how to solve a problem without needing help. Needing help turning it into maintainable code is where they expect to teach you later.
Thanks Man. Problems like fibonacci/find prime numbers/ comlpexity/binary trees-red.black/ anything along these lines is what i'm worried about. Also, i was expecting like questions about Angular2. rest/soap/iis. Or make a very simple site make 1 table from database, use any ORM, make 1 method to pull data from that 1 table and use it as a service with MVC, and display it on a browser. (i'll rather have this than dealing with data.structres/binary trees). 
These should help: https://martinfowler.com/bliki/BoundedContext.html https://msdn.microsoft.com/en-us/magazine/jj883952.aspx
VS2017 seems to have quite a few weird bugs that they still need to iron out. We've been battling a lot with missing references that is fixed by restarting VS2017 :/ 
I'm saving my C# code in E:\Code\C#\ As a matter of fact I avoid saving my data on the system partition (the one with the Windows installed). I keep C: only for programs and use other partitions for my data. 
&gt;C# 63.6%, C++ 32.6% &gt; - 2,012 .cpp &gt; - 1,183 .h &gt; - 956 .cs Does that mean the C# files tend to have a lot more stuff in them? 
I've interviewed lots of engineers now. None of them programmers btw, I'm talking other types. The interviews were around 2-3 hours. Our typical interview has you meet with all the people in the small team for 30 minutes, then with the manager for 30-60 and maybe the VP if he is available. Sometimes the actual talking part takes a while. I've never interviewed for a programming or CS role, so I'm no help there. For my interviews, I want the person to be able to teach me something. It usually was something they worked on for a while, and I wanted to learn about it. Through interviews I'm able to figure out what parts of the job they did, and what parts they had somebody else do. Don't sweat it too much and try not to get too nervous. If you don't know something, you don't know. Don't try to stumble through it for 15 minutes. If you truly don't know, try to walk through some ideas of what you think might bring you to the solution. 
Interesting. It seems to be the opposite of what they do themselves, c.f. a lot of packages called Microsoft.X and System.Y. It also seems to go against the order used in assembly names and namespaces. Maybe they are just changing their mind.. :/
Just because you can't think of a reason doesn't mean there isn't one. Putting them into another array, I don't know.
http://up-for-grabs.net/#/tags/C#
Exactly, the GitHub statistics are for the whole repo and in this case they're a bit misleading. The `/test` code contains ~5,500 C# files, so it skews everything.
Where do you call your method in? I don't see you using start or update.
In Form1 private TestInnerClass CLASS_NAME = new TestInnerClass(); later in the code: void BUTTON_CLICK_EVENTHANDLER(object sender, EventArgs e) { LABEL_NAME.Text = CLASS_NAME.TRANSFORMATION_METHOD(TEXTBOX_NAME.Text); } Something like this. Beware, you need to replace the placeholders. In this example the * ButtonClick event is mapped to `BUTTON_CLICK_EVENTHANLDER` * Label is named `LABEL_NAME` * Textbox is named `TEXTBOX_NAME` * The classInstance is named `CLASS_NAME` * The transformation method of classInstance is named `TRANSFORMATION_METHOD` You need to adapt this to whatever fits your needs.
C:/my-repositories/github-user-or-org-name/repo-name Helps with managing multiple repos from different organizations. More recently have been moving to ~/src/github-user-or-org-name/repo-name
Hey good job :-) One thought about the repository: It would be helpful if you'd show a example, e.g. a screenshot of a WPF window and the generated pdf
Thanks! I thought about providing an example application, but run out of time. I do not think that screenshots will be especially useful here because report view and pdf will look exactly the same (which is the goal of this library), except for paging.
The problem is your loop exit condition.. you wrote: for (int i = 0; subdirectories.Length &gt;= 0; i++) { if (i &gt; subdirectories.Length - 1) { break; } So your exit condition is always true when the number of subdirectories is greater than 0 and you added an if statement to exit the loop when I has reached the end of the array This is not the right way to do this. You should never exit a loop within the body of this loop, the exit statement must always be in the declaration of the loop, just like this: for (int i = 0; i &lt; subdirectories.Length; i++) This way, as soon as i reach the length of the array, the loop while exit and you won't get an outofbound exception (except if you modify the value of i within the loop, which you should never do)
I have since seeing this post begun using Git on my drive to allow for rerolls. But I wouldn't want to use Github as that would spam my github page with small useless projects and besides make them all public. Never looked at Visual Studio Online other than a glance, as I find microsofts implementations of online source control can be tidious and more oriented to teams.
Yes, tried that and the timer works fine.
endLoc references the same Transform.
Oh, so what you're saying is that any changes I make to endLoc are going to be made to startLoc? That's weird. I was originally going to use just the rotations but I guess I did a dumb and forgot about it.
Use an event on your inner form to alert the outter form that the string has changed. The inner form has an event called eventHandler. There is an OnEvent that is called whenever the event that is handled by eventHandler occurs. If the event handler is not null then it fires the event. There is a timer that ticks every second to append a value to the property Str. Changing the value of Str fires the event. public partial class innerForm : Form { public event EventHandler eventHandler; void onEventOccurred() { if (eventHandler != null) eventHandler.Invoke(this, null); } String _str; public String Str { get { return _str; } set { _str = value; onEventOccurred(); } } Timer t = new Timer(); public innerForm() { InitializeComponent(); t.Interval = 1000; t.Enabled = true; t.Tick += T_Tick; t.Start(); } static int counter = 0; private void T_Tick(object sender, EventArgs e) { Str = Str + (counter++).ToString(); } } This is the outter form (It has a button and a textbox both with default name). All this has to do it, when the button is clicked create a new instance of the inner form and attach an event handler to the eventHandler event. public partial class outterForm : Form { public outterForm() { InitializeComponent(); } private void button1_Click(object sender, EventArgs e) { innerForm iForm = new innerForm(); iForm.eventHandler += IForm_eventHandler; iForm.Show(); } private void IForm_eventHandler(object sender, EventArgs e) { textBox1.Text = ((innerForm)sender).Str; } }
Here's an example use case (I actually had to do something like this once): private static Dictionary&lt;(int left, int right), string&gt; Merge(string[] left, string[] right) { return left.WithIndexes().Zip(right.WithIndexes()) .Select(zipped =&gt; ((zipped.left.index, zipped.right.index), zipped.left.value + zipped.right.value)) .ToDictionary(); } True, this can be done without these extensions, but I think this is much easier to write, understand and read.
Nice! I would appreciate if you would provide an example of how to use the api. =)
Don't take this the wrong way but, is programming something you REALLY want to do? Or are you just trying to get a "job"? If it's not your passion, you're going to get burnt out pretty quickly. Since you didn't "get in to it" in school, I'll take it as its not your passion.
I do it because it is the default and easy. I've created separate partitions for data several times over the years and been not pleased with the trade-offs between ease of use and performance improvement in my usage. I already use source control repo hosting services to version and access my coding projects on multiple devices, so I don't use cloud storage for the same files.
I hate to say it but you're kind of fucked. There are certain fields you can't be a reluctant participant of. Even if you are obsessed with code nearly to the point of it being an illness, its still a rough field to stay competitive and relevant in. I'm 21 and have been coding recreationally since the age of 13 and professionally since 17. I did a year at a decently respected university but I couldn't stand it because I quickly found out that a professor knows how to teach a course on coding, they don't know how to be a coder in the context of a real life scenario. Maybe it was the school's CSCI program, who knows. I know a guy who's a double major in Math and CSCI and hes out in the dev world realizing that "the basics" aren't enough and hes struggling to keep up. I'll probably catch some shit for this, but the most valuable thing you can possibly do is pick apart someone else's source code while you write your own. Dig into Microsoft's reference source/decompiled type references and try to figure out how the internals of different parts of the .net framework work together. Pay attention to structural patterns and try to analyze "why would it be implemented this way?" Take on complex subsystems and try to wrap your mind around them. Some luck was involved, but that philosophy and spending hours upon hours per day for 4-5 years, just pouring over open source code and learning new patterns and picking apart frameworks got me a lead developer role at a $30B company making great money on an extremely complex and interesting project. But if I didn't go home every night and keep coding on my own time, I'd have been fired pretty fuckin fast. If that's just not your passion, it might not be for you. If you feel like you might be able to keep continuously learning stuff throughout your career and not get bored, then try to find an "in" with a lower end role and you'll learn quickly. Good luck brotha
Thank you everyone, I seem to have resolved my problems and the debugging seems ok. I deleted it so people won't have to look at it anymore.
Coming from PHP as well I found this book extremely helpful: http://www.apress.com/us/book/9781430265290 
Why not just start reading a tutorial on ASP.NET MVC and go from there? Then you likely have more specific questions instead of such a vague one.
I have not found any XAML that would not render properly, so I think you will be ok :)
So, I've made both models under the same database context. Would that be enough to allow me access to the other model? or would I still need to make the models encapsulated in a third?
Look at the second answer here with the ToSelectList() extension method http://stackoverflow.com/questions/781987/how-can-i-get-this-asp-net-mvc-selectlist-to-work
If you're just playing around, then I'd suggest looking at /u/ihaxr's solution. As you can see from my discussion with him, it will multiply pairs of numbers together, which isn't quite what you asked, but it's a much more appropriate problem for a beginner.
I think I would just prefer to encapsulate the Model for reason in the letter model 
Create the class from this answer in a file probably called Helpers.cs in you project http://stackoverflow.com/a/5189036/20483 In you view you would use @Html.DropDownList("MyList", Model.Reasons.ToSelectList(x =&gt; x.Id, x =&gt; x.Text); x.Id would be whatever the Id field is of your reasons object. x.Text would be whatever property holds the text value you want to show from your reasons object.
Are you trying to not pass the cookies back in your repsonse?
Make them share a `CookieContainer` http://stackoverflow.com/questions/12373738/how-do-i-set-a-cookie-on-httpclients-httprequestmessage Although I'm not sure why you wouldn't just reuse the HttpClient entirely, it's made for extended use.
It's been a while since I've done this but essentially you need to add something like: namespace YourApplication.ViewModels { public class Reason { public int Id { get; set; } public string Name { get; set; } } public YourViewModel { #region Public Properties [Required] [Display(Name = "Reason")] public int SelectedReasonId { get; set; } public SelectList ReasonsSelectList { get { return new SelectList(Reasons, nameof(Reason.Id), nameof(Reason.Name)); } } public List&lt;Reason&gt; Reasons { get; set; } #endregion #region Constructors public YourViewModel() { Reasons = new List&lt;Reason&gt;(); } #endregion } } And then in the view: @Html.LabelFor(m=&gt;m.SelectedReasonId) @Html.DropDownListFor(m =&gt; m.SelectedReasonId, Model.Reasons) @Html.ValidationMessageFor(m=&gt;m.SelectedReasonId) &lt;input type="submit" value="Submit" /&gt; OR, if you don't want to have that ReasonsSelectList in your view model you can create it in the view itself by doing this: @Html.DropDownList( nameof(YourApplication.ViewModels.HomeViewModel.SelectedReasonId), new SelectList( Model.Reasons, nameof(YourApplication.ViewModels.Reason.Id), nameof(YourApplication.ViewModels.Reason.Name) ) ) ---- **About "nameof":** The nameof(Reason.IdProperty) stuff will replace it, on compile time, with the string name of the property. It's just nice so that if you change the name of the property you'll get a compile error because the names won't match up. It also makes it so that when you rename them through the editor (like with ctrl-r-r) it will automatically change the name everywhere but you COULD just do: @Html.DropDownList("SelectedReasonId", new SelectList(Model.Reasons, "Id", "Name"))) For instance, if you had: public class TestClass { public Guid Id {get;set;} } nameof(TestClass.Id) would be converted, on compile time, to "Id". The 
I disagree. Experience has nothing to do with code being simple, clean, and readable. Like I said earlier, a lot of the solutions here try to be "clever". Clever code is not readable, clean or easily mantained.
That book is EXACTLY what I needed. Thank you so much!! If I had gold to give you, I would. I have an interview in two weeks, and this just might be what I needed to get the internship.
Pluralsight has a couple good courses. We use umbraco at my company and it is a really flexible and powerful cms but a bit tricky when starting 
Hint: where are you reading the keyboard input from the user?
Ruby isn't statically typed or even jitted, though, is it?
I usually find that when I am thinking about doing something like creating a class at run time, that I am almost always overcomplicating the problem, and writing code that is going to be difficult for the guy that comes behind me to maintain. In other words, knowledge is knowing how to use reflection to dynamically create a class at runtime, but wisdom is knowing that you probably shouldn't.
Remember that in order to use C# 6 and above you need a nuget package instead. 
Unless you should. It can be important for performance critical code. 
I mean, if you're willing to pay the "price" of dynamic typing you could just stick your stuff in an `ExpandoObject` or even just a dictionary in C#, too, without going through all this trouble. 
I don't think using JavaFX with non-Java software is productive, but I would like to hear from someone who tried it, how it went. I don't know much about it, but I think I heard some complaints about it.
yep. To create a win10 app you need to create an UWP app. Not that anyone is doing that tho. You can also cheat, and use the winforms controls from e.g. DevExpress which have variants for Windows 10 look/feel. 
Removed: Rule 4. You'll need to try and provide more concise code related to the specific problem you're having. Also, you'll need to tell us the problem you're having.
any news?
I wanted to create a new instance because the other instance of HttpClient is in another class. I'll look into `CookieContainer` then. Thank you :)
Just go to WPF and install MahApps.
Winforms can be styled in any way you wish, but seeing as WPF and the vector styling is literally at the core of Windows 10 UWP apps, its probably easier to start from scratch. see also: http://www.c-sharpcorner.com/UploadFile/dpatra/integrating-wpf-in-winforms-in-vs-2010/
If you've used Cake, then it should be pretty familiar, otherwise, not sure of your familiarity with design patters to go any further.
If you're dynamically creating classes, the result is going to be the same: no compile time analysis or checks. So for this particular problem, ruby would probably be a better fit.
LOL wut. No. Targeting a higher .NET framework version is not going to turn your WinForms app into a Windows 10 app.
I'm talking about ease of coding something like this rather than what is better, per se.
Writing a uwp app guarantees support in the future for all platforms no matter what their ui is like, and if you use Windows theme resources your app will adapt to the system theme as well. Think hololens, surface, mobile, embedded. I don't love the two way binding mvvm style but it's workable. If you can't care about that stuff then trash windows stuff and write your app in a third party framework like qt or go hardcore and write it in win32 straight up
Why not just inherit an interface in your dbcontext class? Then you get both whatever dbcontext gives you and what you need from the interface. You could also make a wrapper, that's iDisposable, and has an internal dbcontext, which it disposes when done?
I'd much rather prefer an isolated service layer, and have that get injected with at least some wrapper around db context if only for clean testing. That then becomes the repository idea.
The main new feature with this update is the introduction of Environment Variables into the CliArguments API. We use this at my workplace, and have found it to be really stable since 1.0 in January!
What makes this library stand out compared to the other ones for C#?
.Net Standard has been the main difference, along with an API designed to be really maintainable into the future of your applications. When this was released it was the only declarative CLI Parser to support .Net Core and Framework. The rest were very simplistic and not really designed for complex applications. We had some good discussions around this subject before: https://www.reddit.com/r/csharp/comments/5kflmk/entrypoint_cli_parser_for_net_core_framework/dbnp20v/ https://www.reddit.com/r/dotnet/comments/5paaql/entrypoint_100_released_composable_cli_argument/dcppky8/
Uhm... no I am not rewriting the same queries over and over. The same queries usually fall in the same service object (say CustomerReportsService) and I extract them inside that object. If I have a query that is shared between multiple services I extract it as an extension method or in a ServiceBase class. Usually this happens with subqueries like these for paging. If even that is not good enough I can create query classes similar to those used in CQRS.
Apples and oranges. 
You're talking about something very different.
Reflection contains some extreme performance black holes, but is not entirely comprised of performance black holes. There are fast components of reflections, and even the slow parts when properly cached can be used efficiently. Reflection is not the death of performance, but it is dangerous and should be used carefully when performance is paramount. The whole namespace should be considered .net hard mode; emit is nightmare mode.
Please, no, don't do that. Please continue using the repository pattern. There are difficulties in making DbContext testable, but it is much better to work through that than let your DB leak even closer to your API.
That is invalid. You have to speficey a size if you dont want to populate it at first like this int[] array = new int[10]; You can also fill the array when you create it. int[] array = new int[] {0, 1, 2,3}; // This is the same as new int[4] with the values specified. To set values in the array you will assign them like this array[0] = 53; array[1] = 25;
In that case you either need to: - Create a huge array that will surely fit your size (bad). - Create an array. When you reached the limits of the array, create a new (and larger) array and copy all elements from the old array to the new one (still bad). - Don't use an array at all, and use `System.Collections.Generic.List&lt;int&gt;` instead. That type will automatically resize when you add elements. (Good)
Thanks, so if i wanted to make an array to be populated with numbers from a file then then i just need to make a huge array ? But is the files are different size that just seems very inefficient. To make a huge array and have most of it wasted if the user chooses a file with little data.
thanks, I will try that out.
You will probably be better off using a List&lt;T&gt; instead of an array if you don't know what the size is going to be.
What do you mean by leak?
If you don't care how you get the contents into the array, simply use List&lt;T&gt; and populate it with the contents and after getting them use List&lt;T&gt;.ToArray() method to convert it into an array. 
Each ORM makes different abstractions. For example, I have seen the following naive approach: having an Article entity and a User entity, where the Article has a navigation property towards he User and so-called generic repositories which end up like `public class ArticlesRepository : GenericRepository&lt;Article&gt;` that's merely an abstract class wrapping up a context and has a very similar contract. Now, how would you write a new article written by a certain user? Ideally, you would be having the User entity somehow and you'd be using your instance of ArticlesRepository to insert a new article doing something like User theUserEntity = ... // perhaps provided somewhere by the UsersRepository : GenericRepository&lt;User&gt; var article = new Article { Title = theTitle, Content = theContent, Author = theUserEntity, }; articlesRepository.Insert(article); But Entity Framework behind allows something like var article = new Article { Title = theTitle, Content = theContent, Author = new User { Name = "Mike", }, }; articlesRepository.Insert(article); Should your generic repository allow such usage? If yes, then switching its underlying implementation from Entity Framework to another ORM with other abstractions would break your existing uses your repository abstraction. Your Entity Framework has leaked outside of the abstraction. If no, then how do you prevent it? And how do you allow optimal more complicated inserts when you really need to? How do you handle the SaveChanges operation? I've seen naive implementations where the wrapped operations of Insert, Update or Delete would also call SaveChanges. But then you lose the unit of work capability. If you keep it a separate call like Entity Framework does, do you have a context per repository or a shared context? If the former, you lose unit of work capability when working with multiple repositories because the underlying Entity Framework will throw exceptions because the two underlying contexts are not aware of the things you do in the other, hence leaking again. If the later, committing changes to one repository would cause unwanted committing on another repository breaking your abstraction. Fixing all those issues makes you end up, in the very best case, with another full featured Entity Framework when you already have one available.
Thanks much for the response and explanation. But ouch, I'm kind of in this situation right now with a home rolled `FooRepo : BaseRepo&lt;Foo&gt;`type of thing using Dapper to map my POCOs. But of course with an object hierarchy, I end up with services calling multiple repositories to provide a simple public facing API. So what I do is have separate internal methods for acting on an object as a UoW or as part of a hierarchy. I guess that could be considered leaking as well. Makes me wonder if I shouldn't cut over to EF sooner than later. As you pointed out, best case otherwise would be that I end up with a custom poor man's EF. Worst case would be an unmaintainable spaghetti mess. 
https://github.com/PcapDotNet/Pcap.Net Maybe?
My philosophy is that, whether you use Dapper, EF, NHibernate or anything else, use it explicitly in your business/service layer. Do not try to hide it behind your generic custom something else. If you really understand that technology, seeing it used there instead of hidden behind something, and being able to access all its features is what makes it great in the first place. Your abstraction works somehow today, but it may not work the same way tomorrow when you or someone else decides to "fix it" or to "improve it". Your abstraction will most probably, if not surely, change with time as you have more complex needs and you'll find yourself randomly breaking existing code or having to refactor it to adapt to your improved abstraction. And should your team hire a new developer, there's an almost zero chance that he would be familiar with your custom abstraction or one so similar to it to provide any value, while there is a lot higher chance that he is familiar with one of the major ORMs used in the industry. Do you really want him to have to F12 through your five level layers of generic code to find out what it really does or why that thing isn't being inserted or why he's getting an Entity Framework exception for tying to do a simple update? Edit: Oh, and I hate it when people say: ooooh, no, no, no, don't expose IQueriable&lt;T&gt; to your business layer! Your repositories should return a more "concrete" collection! And they end up with a Search method in their repositories that has 7 (hopefully optional) parameters like * Expression&lt;Func&lt;T, bool&gt;&gt; predicate (or not even wrapped as Expression&lt;T&gt; and they have no idea they're no longer benefiting from having the filtering done on the database and instead doing it in memory after fetching all the rows) * Expression&lt;Func&lt;T, K&gt;&gt; selector (hopefully a K there as I've seen object instead which meant you'd have to cast the result of the method back to the fucking type you used, oh, and good luck using anonymous types then too) * int page * int pageSize * ... Oh, great! We're not using IQueriable&lt;T&gt; anymore, but a fucking retarded ugly method that makes no sense and does the same things without the fluent syntax that makes it humanly readable. You can no longer easily dynamically construct your query now, so you have to use the complex Expression API to build one for the predicate instead.
Am I? 
U mean they're different programming languages? Why yes, they are. What I'm saying is things like creating classes dynamically at runtime is a lot simpler in a language like Ruby. That's all. That's not saying one is better than the other. 
My problem is you either end up unable to do stuff like includes and projections right, or else you end up with an interface so tightly wedded to EF that it's hard to see what the point is.
The last few large projects I've done, the DB is far too big to give out to any old processor. So we would compartmentalize subsets of data behind repositories. On the plus side, these repos would do caching or data translation without the caller needing to understand. This was especially nice when, during real use, we needed to retrofit table changes or caching. No touching the other assemblies. 
I guess I just mean that, in my opinion, whatever is mapping to or from view models should have direct access to EF. And that should probably be a separate assembly or set of them. 
Gotcha. Yeah, that makes sense. I'm primarily a back end developer, but the idea is similar. There was the data models, then the service models, and then the view models presented by the UI layer.
Everyone is right about list&lt;T&gt; probably being better. However just for sake of learning, your array size value can be a variable that is computed at run time int arraysize = ComputerSomeValueForEachFileYouHave(); int[] MyArray = int[arraysize];
&gt; it's far too overengineered for my taste Yep it's designed to scale up as an application grows. If you don't have complex requirements and never will, it's probably too much. But many business applications will continue to grow and change, and the CLI needs to be easy to change too, just like your database models do. &gt; "GNU style" (or extended POSIX, if you will) Could you elaborate what you're getting at here? EntryPoint follows the IEEE standard, which is what all *nux CLI interfaces are based on. It does also support common additions to the standard which I've seen used frequently. http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
It seems like you should still be able to use pcap.net though. I found [this](https://pcapdotnet.codeplex.com/wikipage?title=Pcap.Net%20Tutorial%20-%20Sending%20Packets) while searching for a guide myself a while ago. (I never tried it though, so that's up to you)
you can specify the size of the array at runtime using a method like File.ReadAllLines(). string[] myArray = File.ReadAllLines(path); obviously this is for a string array but you can do some conversion and copy the converted values across to the new int array as everyone else has said you could probably use List&lt;T&gt; instead (which uses an array internally). 
you cant just stumble into a programming job anymore. You have to want to do it. a 3 hour interview is brutal. They are really going to test you. You should start studying data structures and algorithms: https://msdn.microsoft.com/en-us/library/aa289148(v=vs.71).aspx https://gist.github.com/TSiege/cbb0507082bb18ff7e4b Then you are going to want to study C#/.NET fundamentals and then ASP.NET MVC fundamentals. You could google interview questions and practise answering those questions referring to your notes as little as possible. Some of the answers those sites give can be wrong, misleading or incorrect so you are going to want to cross check the answers with a reputable source such as msdn or stackoverflow. By the sounds of things theres going to be a whiteboard session or something similar so you are going to want to familiarise yourself with that and practise answering questions on a whiteboard (or something similar). Interviewing is a skill. I went to about 10 interviews over a space of a month before I got used to the line of questions and knew what to study (i had been working in a job for 3 years and assumed I would ace interviews, I was wrong). Good luck
Yeah I keep forgetting that Boolean statements are implicitly true, so I'm basically writing if a naturally true statement is true 
like others have said, coding a project from the ground up is really beneficial to understanding how things work. It doesnt have to be a complex app or even one that you necessarily finish. My old job sheltered me a lot from knowledge that I would need to progress my career so i started building apps from the ground up. 
Depends on your language. If the language has variables as variants it is necessary to ensure true equivalence, otherwise a return value of 1 or "apple" could erroneously evaluate to true. For example, JavaScript will evaluate many things as true or false that are not Boolean values. In the case of JS you use: function() === true. The behavior of shorthand Boolean evaluation is not consistent across languages so the use of function() == true could be necessary. As good practice, I encourage people to write out Boolean expressions for correctness and readability. If it's not type dependent (i.e you just care something comes back) then the shorthand is fine. I use the shorthand frequently in those situations. Less good when performing validation/security checks.
It depends. The problem is that when you're reading code like that you have to step out of your flow to read the content of the function. Sometimes this is good, sometimes it's bad. Doing a check like `if(user.IsAdmin)` makes sense, it's the job if the user class to know if the user is an admin, not the calling code. Doing something like If(shouldSendMessage()) { Send message() } is a lot more questionable. The context of the code already tells you you're checking to send the message, so all this does is obfuscate the logic. Obviously, if you're reusing the same logic in multiple places, or if your logic is complicated enough that it needs individual testing, that's different.
You want your code to read in a way that's easy to understand, not necessarily as prose.
It's hard to tell without more information, but this probably isn't the right way to solve this problem. You'd be far better off creating a constant for ten explaining what it is rather than encapsulating it in a method. You want to explain what ten is, not just why you're comparing it. Something like `bond.Issue &gt; BondSubtypeIssueThreshold is clearer and slightly faster.
Consider using a variable instead if a function like:. Var isVisible = (x==1) &amp;&amp; (y &gt; 56) || (isCool); if(isVisible).... That way the intent is clear, it's spelled out one line of code away and you don't have to deal with the overhead of calling a function
But then you can't unit test the methods that use those extension methods. 
Thanks for the help , but i already did myself (I am rly sorry , i litterally forget that i opened a new reddit account)
Nothing wrong with `== true`. It's a boolean literal and expresses your intent more clearly if the condition expression isn't named with "hasX" or "isX" etc.
You should try expression trees - they are easier to handle than Emit, and basically produce the same IL. 
For beginners, rules like that are better than vague advice like "communicate intent", even if that is the real goal. No, it doesn't work all the time. Yes, it's still a fine rule. 
You can, but you shouldn't have to.
 Queue&gt;byte&gt; is your friend if you want to build something from scratch quickly. (If performance is important you'll want to write directly to byte arrays)
TBH I've found you can't really teach someone how to write pretty code - Torvalds calls it taste, and that's something learned more over time than through some magical apprenticeship or list of rules. Even if you give some rules, that doesn't really answer the why. Even if you answer the why, that's meaningless until the person's really grown to understand why those rules exist, so in the meantime they're not really going to follow the rules properly. And you'd need a pretty large list of rules to explain do's and don'ts covering every possible edge case (e.g. sometimes, a longer method with comments IS more sane than breaking a method up). As a tangent, academia seems to fail terribly at this with rules of thumb like "if you see code that looks similar, make a method" which if overdone by a good student just results in spaghetti, e.g. when a student breaks code into methods based on procedural sequences rather than, say, something more semantically meaningful. Saying how code should be written is great, but I feel educators and mentors need to more often prioritize building experience through actually writing code and building stuff. Then do code review after that so that you have some sort of iterative growth. It's frankly unreasonable if not impossible to expect someone to go from learning to write code to writing code like some professional (and frankly, many professionals write terrible code... topic for another day).
This is not a good "test". Sometimes unnecessary syntax can benefit readability in the code. Most of the time this applies to extra brackets.
It seems like tests are the obvious one unless EF7 has solved that. 
Use something like Effort (which basically mocks the connection), mocking the context directly for unit testing manually really sucks, expecially when dealing with transactions. EFCore also has a memory db for testing against, although not as mature as Effort. I hear running SQLite in memory mode is a little better, although, again not as mature. This also allows you to test edge issues like level 1 caching and concurrent command execution. 
Extensibility and flexibility are the biggies here. Without the first two the latter typically dont follow. Too much of the latter, and you're back to the first two.
&gt; Its just one less evaluation your computer has to do at runtime Can you elaborate on this? I thought not having == true was a syntactic sugar, but it has differences in actual runtime?
If the compiler doesn't remove the ==true logic, it has to evaluate if true == true. It's not really any performance cost and many of not most compilers will remove it so that it is just syntactic sugar. The main concern really is professionalism
I throw a vote on == true, as a personal style. This is more "who are you working with and what do they appreciate more?" My argument for == true is that it disambiguates *immediately*. I know for a fact, in case I have to change something, that func() returns a boolean. That alone helps me skim through quicker.
My man!
There is an easy fix around that: bool isConditionTrue =outsideFunctionHere(); if(isConditionTrue) { } You can use the same to stuff outside the domain context, or to combine a few small number of booleans. For instance bool userIsUnderage = age &lt; 18; if(userIsUnderage) { // Code here } Which (to me at least) is more readable and understandable then age &lt; 18. What does that even mean, why 18? And yes, you should pull 18 into a constant (magic numbers and all), but even then it might still be unclear. You can do the same for combination for a few seemingly unrelated booleans to make the context clear. After all, you read code to understand the intent, not to see how it was done. So why write age &lt; 18 when you can instantly make it clear, with one extra var (which might even be inlined), what the intent is.
&gt; If the compiler doesn't remove the ==true logic, it has to evaluate if true == true. What are you referring to with 'it'? The compiler or the runtime? I did a quick test public void Test() { var b = true; if (b) { var a = b; } if (b == true) { var a = b; } } And in both cases the IL code was the same. &gt; brfalse.s Having optimizations on or off didn't make a difference which makes sense. In conclusion compiler has to do a tiny bit more work but the runtime doesn't care. 
It's not "bad" but its also not OO and in some cases you will find things harder than you want or you are copying code 100x over in a bunch of different places. Its not bad to do while still learning the fundamentals but at some point you should spend some time understanding the OO based system you are working in and the popular design patterns people use to actually make programming easier.
It's a splash screen
But in C# an if statement's conditional must be a boolean expression?
Technically the compiler has to do more work (in nanoseconds or microseconds) to ignore the == true and the parse tree might look like `(if b (set a b))` vs `(if (eq b true) (set a b))` but this conversation was way out of scope of the thread to begin with. The only reason I'm against bringing this sort of stuff with beginners (the win being that you get to discuss parse trees) is that you then have beginners worried that their code will take longer to compile if they make it more readable, or that it will be slower if they add comments...
Just want to add to your last point, if OP is using some wacky library that requires an Array, Lists have a ToArray() method that will convert the list to an array.
Absolutely seriously, I'd fucking quit if I had to work with someone like that. Not to mention management and the senior devs clearly don't give a fuck.
Yeah, this clearly isn't for you. Change careers.
I see it all too often. These guys getting jobs as software developers JUST to get a job are doing a fucking disservice to the companies they work for. Programming is NOT a job. It's a passion. If you don't have it, GTFO!
10000% agree with you!
Although, maybe I should be thankful for this. I've made a pretty good living for myself being hired to mop up after these guys vomit all over these company's systems.
Basically any approach kind of sucks because (except for maybe Effort; not familiar with it) they'll all miss runtime errors like "don't know how to convert ToString to SQL."
Interesting. Thank you!
Depends on your definition of easy, you'll need to craft the whole thing but there isn't anything complicated to doing that. If you just want to send advertisements to manual targets dead simple. Capturing a packet on my LAN with Wireshark your logical structure should be something like: { {[V6 Multicast], &lt;Source MAC&gt;, [V6 Ethertype]}, // Ethernet Header, you can add VLAN and whatnot if you wanted as well {[IP Version 6], &lt;Class&gt;, &lt;Flow Label&gt;, &lt;Payload Length&gt;, [Next Header (ICMPv6)], &lt;Hop Limit&gt;, &lt;Source IPv6&gt;, [IPv6 Multicast Destination]}, // IPv6 Header {[ICMP RA Type], &lt;ICMP Code&gt;, [ICMP Checksum], &lt;Current Hop Limit&gt;, &lt;Flags&gt;, &lt;Router Lifetime&gt;, &lt;Reachable Time&gt;, &lt;Retransmit Timer&gt;, &lt;&lt;ICMP v6 Options (optional)&gt;&gt;}, } {This} represents a logical group of objects from a network perspective, things in [square brackets] are going to be fixed standards-based values, things in &lt;angled brackets&gt; are things that must follow a standard format but you are likely to want to change dynamically, &lt;&lt;double brackets&gt;&gt; represent a double depth &lt;element&gt;. libpcap/npcap will generate the Ethernet checksum and append it to the packet for you by default as NIC/Switch hardware will usually not forward packets with bad Ethernet checksums. Probably more work than whatever nice library you used in Python but is really the full picture from the networking standpoint. Another library I've used is libpnet in Rust, it's probably more similar to the tool you used in Python and is a bit more user friendly with predefined macros for L2/L3 constructs and protocols. Also if you use libpcap/npcap don't forget to change your data to network byte order (big endian) from host byte order (little endian) or you'll spend a lot of time wondering why your packet fields are all screwed up when you look at wireshark. IMPORTANT NOTE/EDIT: ICMPv6 frames are actually relatively high up in a networking stack, you can send/receive custom ICMPv6 packets from raw L3 sockets (assuming you mean them to be properly formed) with native socket interfaces with native C# libraries without building your own packet from the ground up. [Here is an older example](http://www.winsocketdotnetworkprogramming.com/clientserversocketnetworkcommunication8i.html) of sending/receiving custom ICMPv6 packets that can be easily modified for RAs.
Yeah I realized that after I posted, still depends on what OP needs
Okay, you need Effort in your life. It catches those things. 
I'm kind of out of the .NET world ATM but I will definitely keep that on my radar; that sounds great.
You need to compare the **number** representation instead of the **character** representation. var file2 = file1.Select(Int32.Parse).OrderBy(x =&gt; x); // file1 = file2.Select(x =&gt; x.ToString()).ToList(); Both in one: file1 = file1.Select(Int32.Parse).OrderBy(_ =&gt; _).Select(x =&gt; x.ToString()); or file1 = file1.OrderBy(x =&gt; Int32.Parse(x)).ToList(); //Not sure (as on mobile) whether this compiles or not 
Why does 2nd one not work? I tried with this code var set1 = new List&lt;string&gt; {"1","11","2","22","3","33"}; var set2 = set1.Select(Int32.Parse).OrderBy(_ =&gt; _).Select(x =&gt; x.ToString()); foreach (var n in set2) Console.WriteLine(n); and result was 1 2 3 11 22 33
Not sure, the whole line gives me an error. http://prntscr.com/eoqvdx this is a ss. Sorry if it's something simple I am missing just starting to code. http://prntscr.com/eoqwg4 2nd ss shows that i added the line in a different place thought this might be a problem
If you name the function well, == true is redundant. Experienced c# devs should keep their code concise, readable, maintainable, to the point and as self documenting as possible. *Needing* == true is a sign something isn't right.
Are you sure, that the method omits values lower than 16? This does not seem valid to me. Please ensure, that the line after `File.ReadAllLines(String);` actually returns the expected result, there is no reason (to me) why it should not behave this way. Furthermore you could replace `ascendingordescending` with e.g. `ascend` and the if-condition with `if( ascend.Equals("ascending", StringComparison.OrdinalIgnoreCase) )`
`if` statements only work on booleans, so `== true` is redundant and thus considered bad coding style. Same with the `&amp;&amp;` and `||` operators.
Here are a few things you could look at: - Generally a good idea to only have 1 class per file. `FileMover.cs` has 3, none of which match the name of the file. This is a bit confusing when trying to find things in the code. - `assembly: InternalsVisibleTo` should be in the `AssemblyInfo.cs` file, not `FileMover.cs`. - `public static Task&lt;bool&gt;MoveAsync()` method signature in `FileMover.cs` needs a space between the return type and method name. - `Func&lt;long, long, bool&gt;` in a public API is not intuitive because it's not obvious what those func parameters mean. Someone using this would have to dig into the source code to figure out they mean total bytes and bytes transferred. Make `FileMoveProgressArgs` public and expose that instead. - You're using `Tuple&lt;bool, int&gt;` a lot in `PInvokeFileMoveX.cs` which is a code smell. Look into creating a small class to represent this because Item1 and Item2 are not intuitive or descriptive.
You tell the beginner the truth and then when they've got the experience to understand they've got something to work with. Ideally you'd also want to actually show them some code where people didn't. Training people is hard, especially if they're not the sharpest knives in the drawer, but in my experience, if you can get them to a point where the stuff you've said finally clicks you'll end up with a good developer, where if you give them stupid rules you'll get a programmer who follows stupid rules and at best will learn the hard way.
Anything public-facing in C# is universally agreed to be in `PascalCase` (`Name`, Uppercase), which includes public properties, even if their setters are private. In fact, I'd say the only real debate of capitalization convention in C# is for private fields inside classes. Some people prefer `private string password;`, others prefer `private string _password;`, and others prefer `private string Password;`. In case of doubt, check [Microsoft's Guide](https://msdn.microsoft.com/en-us/library/ms229043(v=vs.110%29.aspx).
Have you checked out [clipr](https://github.com/nemec/clipr)? You can definitely do some complex things with it, but I'd like to believe it's not too complicated for basic use.
Yup, I'm on the side that all class _members_ are capitalized. Anything temporary/local (local variables, parameters) are lower case. Gives me a better sense of accessing anything in regards to state or some permanency.
file1.OrderBy(s =&gt; Int32.Parse(s))
Do you have any benchmarks? Limiting your library to only array and List&lt;T&gt; kinda defeats the purpose of LINQ which operates on any enumerable collection...
&gt; private string _password; It's most common convention. If you are using ReSharper it's also the default setting. 
What do you do when you explicitly write a property and its backing field? `public T Foo { get { return _Foo; } set { ... } }`?
* String interpolation is a cleaner, more concise replacement for string.Format. Example: `throw new FileNotFoundException($"Cannot find file {_sourcePath}")` * There are a few hard-coded parameter names in your exceptions. If you ever change the parameter names you could get a mismatch between the actual parameter name and the one shown in the exception. To guard against that, you can use the nameof() operator and string interpolation: `new ArgumentException($"{nameof(sourcePath)} cannot be null or empty")` * The call to `CheckCanWrite()` involves a lot of Boolean negatives (!'s). Even simple Boolean logic can become confusing with too many negatives. `if(!CheckCanWrite()) { //... }` could be replaced with `if (!_overwriteExisting &amp;&amp; File.Exists(_destinationPath)) { //... }`.
There are some projects like this. I like the approach of [roslyn-linq-rewrite](https://github.com/antiufo/roslyn-linq-rewrite), which rewrites some LINQ code into inline loops etc. at compile time. It also refers to "Shaman.FastLinq" which appears to use the same approach as you do. By the way, this doesn't work: var r = new List&lt;TResult&gt;(a.Count); for (int i = 0; i &lt; a.Count; i++) { r[i] = selector.Invoke(a[i]); } You can't set elements outside the list's range even if you have initialized it with a larger capacity. And since your library's goal is speed, the `ToArray()` calls in your `Where` array implementations seem inappropriate. If the consumer requires an array they can always call `ToArray()` themselves, and if they don't (e.g. because they chain `Where().Sum()`) you're copying all the items for no reason.
I don't know if it's still the case, but the underscore names (like `_password`) were not CLS compliant, so if your C# code inter-operated with some other .NET language code (e.g., VB.NET) and had underscored variable names, then the world would end.
It's not like this replaces LINQ in its entirety, it just provides more specific overloads for a subset of enumerables. The built-in LINQ methods actually also have some optimized implementations for arrays and `List&lt;T&gt;` for the same reason.
nice work! I already know ASP.net MVC, and was looking forward to learn react/redux. but I find some difficulties in grasping what exactly does redux serve so, would you please explain in layman terms, why we need a library like redux? how does it change the workflow. thanks in advance :)
Sure! The first thing you need to know is that redux is not a tool to fix all problems. There are plenty of times when redux would be useless, or simply more boilerplate code than you might need. However,with a few simple modifications to what you currently might be doing, the patterns redux forces you to use can be really powerful. Redux maintains your state is in a single place, separate from any of your possible views or ui components. But is accessible (store.GetState) Redux forces you to change your state using a single entry point (store.Dispatch) Redux forces you to change your state with pure functions. (Reducers) Same input -&gt; same output. No funny business. No side effects. Redux allows third party extensibility (enhancers) Open for extension, closed for modification. if you are familiar with SOLID programming this is the O. These patterns force your application behave in a predictable way and it enables easy unit testing of the small units of work. Pure functions are very easy to test because they rely solely on what was passed to the function. No mocks or substitutes needed (usually). Even UI components can be unit tested easily because they contain no state, and cannot make changes to the state. You give it the data it needs and it renders. The same. Every time. I recommend you check out the docs and even dig around in the source code. Its not a lot of code. I think redux-thunk, a middleware that can be applied to redux is less than ten lines of code total. :) I hope this helps! u/abuassar - I'm on mobile and apparently didn't reply to you. Sorry about that
That's not an issue for private fields because they're already inaccessible.
Thanks for the feedback, it's really appreciated. I'm definitely going to go over the code again i think, this time with a c# 6.0 head on. I use 5.0 (still using Vs 2013 at work) in my day to day life and completely forgot about all those great new features.
* fields and properties at the top before the constructor and methods. You want your order to be fields, properties, constructor, methods. * did you mean to have a lot of your classes and methods set to internal? * Instead of doing this: var filemover = new FileMoverInternal(new PInvokeFileX(), sourcePath, destinationPath, progressUpdater); return filemover; * just return the object directly return new FileMoverInternal(...); * separate your classes into individual files. * here you should check !IsMoving first to save an unnecessary method call if IsMoving is true if (ValidatePaths() &amp;&amp; !IsMoving) 
I like to have my boolean values in a variable and then check that instead of calling a function directly. Find it easier to debug and see which one failed. Like: var a = SomeBoolFuncA(); var b = SomeBoolFuncB(); if(a || b) ...
Not optimized for speed, but Jon Skeet wrote an ebook where he re-implemented all the LINQ methods. It might be useful to look at his generic implementations before writing your array / List&lt;T&gt; specific ones. https://codeblog.jonskeet.uk/category/edulinq/ 
[This MSDN page](https://msdn.microsoft.com/en-us/library/ff660859) is called "When Should I Use Unity", and it lists a series of tests of when you should use it. I'm not sure that your project meets the requirements of those tests. Personally, this is what I'd do: - Do it in Windows Forms. The user interface is quite straightforward, and I feel that Windows Forms would handle it perfectly well. - Create a User Control to represent the ant colony - let's call it Colony. - In the Colony code, kept a List&lt;&gt; of Ant objects - Build an Ant class, which has a Paint method (takes a Graphics object as a parameter) which draws the ant onto the graphics object's canvas - Override the UserControl's OnPaint method in the Colony class. From the overridden version, do a foreach through the List&lt;&gt; of Ants, and call the Paint method on each of them so they can each paint themselves That covers the display. The Ant class can then have whatever other methods it needs to be able to model its behaviour, and you can have a timer object that loops through each Ant and calls the relevant methods.
Thanks for this. The internal was due to me essentially keeping everything's access as restricted as possible. Most of them might have been private but i wanted to test them so they needed to be internal. 
Not a fan. Don't expose your data objects directly etc etc, use models with your attributes on those
There are as many opinions out there about what constitutes 'good code' as there are programmers. And then there's the fact that all code is written in a finite set of time, and that what was good code for a small project may not be good code for a larger one. Even worse, the code that is easy to work with for someone very familiar with the project, will be different from the code that is easy to work with for a newcomer. And the code may be worked on by both sets of people. All this means that what is really important is - does the code fit for purpose? (does it 'work', is it fast enough, etc) - is the code fit for development? (can you understand it, can you change it without breaking it, is it concise, can you get it set up easily, etc.) For me, you can tackle the first by providing comprehensive black-box tests to verify that the code fulfils the project requirements (see BDD/ATDD) and making sure they can be run easily. If the code isn't easy to work with (or has become hard to work with due to team/project size changes), then the code can be refactored into good code, and will you know you haven't broken anything due to the tests we just talked about. TLDR: It doesn't really matter how ugly your code is if you've provided tests which give the next developer a safety net they can use to clean it up later.
What if you need to use the same field in three different pages? Then you would need to put the same attribute ([Required] for example) in the three different ViewModels, which leads to duplication. But if you use it this way you would only need to add the attribute in one spot.
 Dictionary&lt;string, string&gt; test = CommandLine.Arguments.Parse("--one=1 -ab 2 /three:3 -4 4"); Assert.Equal("1", test["one"]); Assert.True(test.ContainsKey("a")); Assert.True(test.ContainsKey("b")); I'm not sure I understand how/why an argument named "-ab" parses into separate "a" and "b" keys. To me, that's one key named "ab" with a value of 2. 
Coolness thanks :) Could you like to Adam's site? I assume this is using a straightforward form post in which case, I'm not clear on where the ImageData &amp; ImageMimeType values are being put into the model.
&gt; Var isVisible = (x==1) &amp;&amp; (y &gt; 56) || (isCool); *Intent* may be clear, but logical operators have precedence rules that means this expression may not behave as you expect. Rearranging parens a bit may make the behavior clearer: var isVisible = (x == 1 &amp;&amp; y &gt; 56) || isCool; I don't know if that changes what you had in mind, but I think every logical expression I have seen with multiple logical operators and no grouping parentheses wound up having a bug in it.
I'm not sure it's fair to use that as an overriding rule. In many cases, it makes sense to make a model, and for the model to fetch its data from the data layer. But in some cases, especially simple cases, the data model generated by EF *is* the model, because the model needs to add literally nothing to it. In that case, generating an entire model layer, where each class exactly mirrors a data model class, seems like unnecessary extra complexity.
Yeah, that's a good question. I used to use `m_Foo` a lot back before auto-properties, but that was [how my mentor did it a decade ago.](https://en.wikipedia.org/wiki/Cargo_cult_programming) Having a backing field like that is becoming increasingly rare for me. I find now that when I do have properties like this, they tend to wrap backing fields with a slightly different name altogether with more complicated logic. In the _rare_ occasion that I still have that same-named backing field, I still use `m_Foo` just because it's so rare and to maintain consistency with legacy parts of code. It's so much a non-issue now that I don't care much to find a more elegant solution.
While we are on the topic of naming conventions, what is the general rule of the new Tuple syntax? public (int min, int max) Range(IEnumerable&lt;int&gt; numbers) or public (int Min, int Max) Range(IEnumerable&lt;int&gt; numbers) The first version seems right, because method parameters are supposed to be cameCasel, but the second version looks better when actually used. var range = Range(someNumbers); int max = range.Max; //looks better than range.max 
this does absolutely nothing special, its just another attribute unless you use a special deserializer 
I did just say 'probably'. 
That's really helpful, thanks :-)
I don't think that is a fair comparison because Web Api is not a tool you are using to move data from point A to point B. And while we are talking about it, Web Api is in a different layer than your business logic anyways. You should be able to upgrade from 1 to 2 without touching your business logic, which was entirely my point. &gt;I've found the repository pattern to promote bad practices that are compounded on larger enterprise projects I've also found that using EF directly in your business logic "promotes" bad practices. The truth is, no matter what pattern your follow you can end up with bad code. Oh, and if you extract EF into the data layer (or as I like to do, a new assembly in the Data layer) then you are one step away from CQRS. You get the added bonus of saying "I hate EF, I want to switch to XYZ" and all you have to do is update that assembly and you are done. Your business logic is all using your code and your data models, and doesn't care if it comes from EF or hand written sql scripts if you **really** want to go that route. Another team in my company recently hit a point where EF was less advantageous as something else and wanted to change to another tool. What would have taken weeks to update the hundreds of references, rewrite thousands of EF unit tests for the new tool, and pray nothing broke, they spent 2 days rewriting the EF data project and moved on. All of their domain layer unit tests remained unchanged, their business layer was not touched, it just worked.
Is there some catch to the 'pure function' aspect that doesn't require refactoring / learning functional programming?
I agree that range.Max looks better. If it was a class being returned instead of a tuple, it would be range.Max
I never let the translators touch the resx file. I would just give them a spreadsheet listing the resources that I needed translated, then I would paste the results back into the resx file. It was a lot of work at the start (hundreds of resources) but once the first big translation was done then it was just a trickle task from then on (sometimes a few dozen, sometimes just one or two). I needed to use the resources in the database code as well so like you, I wrote a little app to copy the resources into a database table. But that was for use by code, not for populating the resx. I had a rule that every English resource also had to have a French version (this was just a dual-language application). So I didn't use "fall back" where it would use the resource from the primary file if it didn't exist in the localized resx. That meant some redundant resources (sometimes it was a term that didn't need translating, or a file extension list or whatever). But what it did allow me to do was compare the resource files. I had a little application that would compare resource files: make sure that a given tag name existed in both files. So if one got entered in French but not in English or vise versa, it would be detected. I didn't do much pruning. On occasion if a screen was changed and I noticed that a resource was no longer used, I would just delete if from both. But this was a Web Forms app (ASPX) and an invalid resource that was only used in an ASPX file would only result in a runtime error (no compile checking) so I preferred to have unused tags in the resx than risk a missing one.
Why not just use code first and migration?
I'm not sure what you mean by some 'catch', but functional programming doesn't have to be implemented in a full sweep if you are unfamiliar with the concepts. The basic concept is to create logic that boils down to calculations of the arguments passed to a method and nothing else. A pure function can be defined in traditional OOP as long as it conforms to the rules. 1. The function always evaluates the same result value given the same argument value(s). 2. Evaluation of the result does not cause any semantically observable side effect. [source](https://en.wikipedia.org/wiki/Pure_function) functional programming is complicated, but using pure functions to simplify the complexity of an application can be done by keeping these rules in mind when performing business logic. It has the added advantage that its super easy to test too! I hope this helps! 
http://www.filedropper.com/program_2 I uploaded my code since its impossible to comment it
Here is OP's code, downloaded and reposted: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ProgrammingAssignment1 { class Program { static void Main(string[] args) { Console.Write("Welcome, this application calculates the distance between two points " + "and the angle between those points."); Console.WriteLine(); Console.Write("Please insert value for 1X: "); float point1X = float.Parse(Console.ReadLine()); Console.Write("Please insert value for 1Y: "); float point1Y = float.Parse(Console.ReadLine()); Console.Write("Please insert value for 2X: "); float point2X = float.Parse(Console.ReadLine()); Console.Write("Please insert value for 2Y: "); float point2Y = float.Parse(Console.ReadLine()); //Calculate Delta X and Delta Y between the two points float deltaX = point1X - point2X ; float deltaY = point1Y - point2Y; ///Now that we calculated the Delta X and Delta Y, we proceed to Pythagoras Theorem //Pythagoras Theorem for distance var distance = Math.Sqrt(deltaY + deltaX); Console.WriteLine(distance); //Using atan2 for finding the Angle var radians = Math.Atan2(deltaY, deltaX); } } }
I see, could you please explain to me why I can only use var and not float when calculating distance?
I've just gone through the process of localizing an English-only web app written in ASP.NET (WebForms and MVC). With all the App_LocalResources scattered around (view-specific resources, one per page), the sheer number and distribution of resources made it hard to manage, but [RESX Resource Manager](https://resxresourcemanager.codeplex.com/) was an excellent tool for managing them all. I exported to Excel for the translations and sent them to (external) translators, but in the future I could see setting them up with a standalone version of RESX Resource Manager and giving them a copy of the RESX files. I'd much rather review a RESX diff than have to manually copy and paste strings back and forth from Excel and risk making a data entry error. I'm very interested in the database solutions a couple of people posted. If we scale out any more, that seems like the wise way to go.
The [`Math.Sqrt` method](https://msdn.microsoft.com/en-us/library/system.math.sqrt%28v=vs.110%29.aspx) returns a `double`. Thus using `var` in this scenario is equivalent to using `double`. The line could be rewritten as: double distance = Math.Sqrt(deltaY * deltaY + deltaX * deltaX); Whereas `float` (aka `Single`) is a single precision floating point number, `double` is a double precision floating point number. Because of this, `float` and `double` aren't entirely interchangeable. In this scenario, converting from a `double` _to_ a `float` can result in a possible loss of precision. The C# designers decided that such a scenario requires an explicit cast/conversion from the developer. If you really want it to be a `float`, you'll need to add the explicit conversion: float distance = (float)Math.Sqrt(deltaY * deltaY + deltaX * deltaX); Beyond that, except in some extreme high performance scenarios, you can likely switch to using `double` entirely instead of `float`. Stick with whatever is being taught or instructed to do in class, but other than that, feel free to switch to `double` in general.
I think he means the Unity game engine...
I am just not sure how to format in the three first decimal places
&lt;decimal&gt;.ToString("0.000") or &lt;decimal&gt;.ToString("#.###")
MonoGame would be my recommended technology. 
Basically, you've created a new `UnicodeEncoding` object a couple of lines above, but then you're trying to use `GetBytes()` as though it was a static member of `UnicodeEncoding` rather than an instance member. The long answer is "read here": https://msdn.microsoft.com/en-us/library/aa645629(v=vs.71).aspx The short answer is that you need to call `GetBytes()` through your *instance* (`Unicode`) rather than through the type name itself (`UnicodeEncoding`). Also, side-note: Local variables (ones declared inside a method/scope) should always begin with a lower-case letter (e.g. `unicode`, not `Unicode`). This isn't a compiler error, but it's a convention you should try to stick to when writing C#.
I'll give you a couple of hints so you have to work for it. If you want to display a number to 3 decimal places, what is that decimal place known as? What does Math.floor(n) do?
Thanks, so assuming that we're now talking about the unity engine, I assume that you would recommend I'd start getting to know how to play around with Unity2d, right?
Thanks, so assuming that we're now talking about the unity engine, I assume that you would recommend I'd start getting to know how to play around with Unity2d, right? Is that "mode" recommended or is it only an optional mode that generally comes with the unity engine?
Thanks, do you have any experience to tell me what the biggest expected differences would be from using either unity engine or monogame?
To be honest, I don't know much about Unity Engine, I'm not a games programmer. But the graphics requirements for your project seem so trivial, I'd still recommend my earlier solution. I can't see that any kind of framework is going to help. The exception would be if you wanted specifically to learn the Unity Engine, in which case this sounds like a good project for that.
that decimal places is like.. the thousandth, I am sorry english is not the native language so I am not very good with termonology.. Also I am very new with coding so I am not familiar with Math.floor(n)
 Console.WriteLine(value.ToString("C3")); Would show me the first 3 decimals?
 That example is done in the context of an EF database &amp; repository, but you can pass whatever identifying information/index would be needed to call your specific model. Truthfully I cannot speak for *how* you would do it with a ViewModel - I'm not familiar with those - but the basic implementation is there.
I think the intent was to get the student to use `ToString` method with formatting rather than use the `Math.Round` method.
Many LINQ APIs already check for those types at runtime and have separate execution paths. I'm not sure if you'd get much speed up by eliminating the type test.
I like your idea to ask questions about the code, to build on what you started I wonder if you can take a software design principle and try to turn it into a question: - **Liskov Substitution Principle**: *Is this class open for extension but closed for modification?* - **DRY**: *Am I repeating code here that might cause bugs when both need to be changed later?* - **Favor composition over inheritance**: *Is there a way this could be re-architected without inheritance but still gain the same code-sharing benefits?* - **SRP**: *Is there only 1 reason for this class to change, and if not would it be possible to break it down further?* I like using good specific questions (like done using the socratic method) but I've never thought to ask questions about code, this is really eye-opening thanks!
Generate the code first?
Floor "rounds" down to the nearest whole number. One way to do this is to multiply your number to the place you're displaying, floor it, then divide by the place. So, n * 1000, math.floor the result, divide by 1000, should give you a result to the 1000th place, followed by a zero that will fall off when you convert ToString() It's similar to techniques used to force currency to display when it's​ not set up as a compatible type from the beginning (you'd use 100 as your multiplier/divisor).
In relation to the post you would have a extra class (for providing attributes) with unnecessary complexity anyway. Making a model helps future proof against new properties being added to the data class and suddenly being exposed in places they shouldn't. Serializing (JSON or otherwise) a data class is just generally a bad idea or works poorly (eg following navigation properties) For the sake of consistency I would have models even if they matched my data class 1 to 1 since as soon as I try and do anything slightly complicated I'll need a model anyway. Sure, you can get away with using a data class instead of a model class in these situations, but my general rule is not to 😊
&gt; to limit the library itself to a single .cs file that could be easily included in a project as source rather than as an external dependency Makes sense why clipr isn't suitable for you. I started clipr because I thought gsscoder's commandline, which had the same philosophy as you at the time, was getting a bit too complicated to keep just in one file. Your regex doesn't really work with quoting either - it finds the first and last quotes in the commandline and assumes those are opening and closing. e.g. this puts everything in the `hello` key even though by all other parsing standards arguments with spaces are simply wrapped with quotes: `Arguments.Parse("--hello \"some string\" --world \"another string\"")`
There are solutions that use broadcast messages to handle it from within the same network, but I think you'll find that good solutions require a license manager service. I have used 'Infralution' with success in the past. The license server requires work, but their license manager is fairly decent and allows for many licensing scenarios. It's ~$200 USD without any 'per license' costs. Unsolicited advice: I cater to the same market (project engineering) - also invest in a good, well maintained, obfuscator. Eazfuscator has served me well.
This is exactly what I'm looking for, thanks!
Well use a digit more and omit the last character. Easy as that
I don't mind sounding stupid, so what even is this? It's a pretty poor description.
Don't disagree, I probably would have done it with string conversion of the full double, array split at the decimal, substring 0,3 on array[1], concat that with array [0] and write it. Overkill, yes, but I know exactly what I'm returning out. Like this: double num = 1234.56789; string numStr = num.ToString(); string[] strArr = numStr.Split('.'); string decs = strArr[1].Substring(0,3); string newVal = strArr[0] + "." + decs; Console.Write(newVal);
 result = Math.Truncate(1000 * value) / 1000; Math.Truncate "The number is rounded to the nearest integer towards zero", meaning the decimal parts are cut off , so we "shift" the number 3 decimal places, truncate, and then shift back. See here https://en.wikipedia.org/wiki/Rounding#Round_half_towards_zero
There's an extension VSCommands that added a confirmation prompt when dragging objects. But IIRC, I don't think it's been updated lately and only works up to VS2015 (and even then, you might have had to manually edit the manifest file for compatibility).
Best advice I ever got was to stick with a style and don't mix. Also if you are working on a project team adhere to their standards or coding styles
pretty much any method with .Is___ returns a bool so needing an explicit t/f is superfluous 
np. Only reason I remembered it is because it saved my butt earlier today with an accidental drag in the solution explorer.
I wrote [an app called ResxWriter](https://www.codeproject.com/articles/10237/resxwriter-generating-resx-files-from-an-excel-spr) over 10 years ago, but it might be helpful. It generates .resx files from an Excel spreadsheet. Again, this was over 10 years ago, on .NET 1.1 I believe, but it might be handy. (We actually used this tool in production for some major applications/websites back in the day.)
Isn't this kind of comment the idea behind the upvote button?
You may also want to look into CodeMeter. 
Looking over the code it didn't look like those methods are actually being called. Did I miss that? 
No you did not. I really need help with calling them because the DisplayDNSConfiguration method I copied off of MSDN. How would I invoke the method? Do I need to call it in the main method? 
Isn't this kind of comment the idea behind the downvote button?
I would also throw in some unsolicited advice if you're worried about software cracks: try your hand at cracking .NET software first. It's a great academic exercise and fun to do (provided reverse engineering is legal in your reach of the world). Not only does it hone your "how someone else might have done it" sense, it also helps you build the skills to combat people who like to crack software for profit. Lastly like /u/mechbuy, I definitely advocate defense in depth - don't rely on one solution to protect your code. 
How do you know if there's no output if you aren't sure if you're even invoking the method...?
You win this round.
There's nowhere near enough info here. Any way you can rephrase?
Code first hides your db implementation details and results in subpar query performance for anything but the trivial scenarios, based on how i saw it being used. Disclaimer: my current job uses code first
You're not doing anything??? Looks like you've copy pasted you're homework question... 
No the question is above the code, the actual code I did it myself my teacher help me with beginning earlier but I believe she is no longer responding this late so I can't get feed back from her so I'm kinda stuck on this part 
That's definitely a bit too specific for us to help out with and, judging from your question, you're not very comfortable with the topic either. All I can say is you should identify the components of the task at hand and break them down into individual bits that you can tackle separately. Do you have your DSP library already? Do you have any way to obtain the necessary data for the graphing part? Have you done graphing based on simulated data? I know next to nothing about audio processing, but it sounds like you need to identify the components of the task first, to make it more manageable.
On the page for Ubuntu: https://www.microsoft.com/net/core#linuxubuntu They mention the command is `dotnet new console -o hwapp` Have you tried that?
First of all. **Do Not Hardcode Any Sensitive Data Inside Your Sourcecode** - **Ever**. Atleast if the Application is a Client-Application that connects with hardcoded strings to a Server. Server-Applications can usually use hardcoded stuff, though still not recommended. Using a Server with a Database containing Username and (hashed)Password backing it is probably a far superior way. Another way would be a "Serial-Key" kind of solution. Where you create a Key that contains certain Information about the Things in your application. Running out of lifetime every now an then. 
See [Enumerable.Where](https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,19) for example. 
I worked it out 🙂 only thing is the image doesn't display on the form so I think I'm missing something. Also, for my purposes I need to set the image as a css background where it's to be used. Wonder if I can do the @url.action() thing in the style attribute... Kinda hate that I didn't think of that before now. 
It's meant as a joke, the library does nothing, hence it's very fast!
Hi, thanks for the input! Yes, the dsp part is completely done, it already works perfectly in realtime when using sliders and buttoms. I am just searching for a way to automate changing the values based on a timeline (like i know it from DAWs like Pro Tools or middlewares like FMOD...) Furthermore even record external button or axis input with it, make it editable and replay it as a second step. So i was just curious if i really have to start from scratch here - more or less in the middle of research right now.
Actually no. For some reason, your lib passed under the radar when i was searching :S But clipr is really interesting! It's a little overkill for my personal projects but actually seems to be perfect for using in my day to day job! I need to studied it a little more but it has some interesting features that may come in handy. Thank you!
Removed: Rule 4. Be sure to properly format the code for Reddit and include what the issue is that you're currently having.
I'd rather use reflection.emit personally. I don't like the idea if braking the static typing just for convenience.
I use[ microsofts mat](https://developer.microsoft.com/en-us/windows/develop/multilingual-app-toolkit).
 @foreach (var item in Model) { &lt;td class="@(Math.diff(item.Expiration.ticks, DateTime.Today.ticks).Days&lt;30? "closeDate": "farDate")"&gt; @Html.DisplayFor(modelItem =&gt; item.Expiration) &lt;/td&gt; } Style with css or select trough class.
Removed: Rule 7.
 var mostProfitableFilms = myFilms.OrderBy(film =&gt; film.BoxOffice - film.Budget).ToList(); EDIT: This will sort from least to most profitable. If you want most profitable first, use `OrderByDescending` instead.
I agree with the constant but wrapping it in a method/property still makes sense with the constant. It's clearer when then using the same condition over and over and makes changing the condition much easier.
This is a good one. I'll try to remember it.
If the test is so lightweight, I'd make it a property instead of a method to clearly show it's not necessary to cache it. Unless my test is in an extension class.
Could you help me with it I started 2 days ago.
Not at runtime
Couchbase Server is open source and there is a free edition of Couchbase Server (Community Edition).
html() gives me undefined and text() gives me nothing
tru, so if I did it this way, would it be giving me a unique id for each value? or would I not need it to be unique everytime? also when I try to access the Expiration id in my jquery function, it only gets the first entry? any idea how I can access all values?
what is the ticks at the end of the DateTime.Today for? Also it says the diff function doesn't exist for Math
It is a concern, however the analysis program that this tool helps with is also on a network license. I can think of 6 other programs that *I* use in structural engineering that use this kind of license. It's pretty standard for the industry.
Sorry, made it unnecessary complex, was just typing it out of my head. See here for a proper calculation: http://stackoverflow.com/questions/1607336/calculate-difference-between-two-dates-number-of-days
I'm having flashbacks of a previous life when I had to maintain some software which used ExpandObjects to build the types based on the schema of DB tables they mapped to, which were subject to frequent change. It was nightmare trying to write code against objects with dynamic properties, I don't want to fire up the debugger every time just to find out what the correct casing or spelling for a property is. Please make sure you have a very good reason to be doing these sorts of shenanigans, any of those future maintenance devs might turn out to be axe wielding nutjobs. 
For posterity, this renders the image from the byte array in the database: &lt;div style="background: url(data:@Model.ImageMimeType;base64,@Convert.ToBase64String(Model.Image) )"&gt;
I've heard the argument a lot that a list should usually be preferred to an array (unless dynamic resizing won't happen). I agree with this, I just like the array syntax so much better. For example, a lot of times in my unit tests I need to setup mocked dependencies to return IQueryable collections and many times I only need to return an empty collection (indicating it wasn't found). I prefer the array initializer as it feels like a lot less busy(even if it is only a few less chars). I definitely prefer the array syntax with `[]` better as it looks cleaner than`&lt;&gt;`, just my preference though. new T[] {}.AsQueryable() // vs: new List&lt;T&gt;().AsQueryable() Edit: actually in my example above since it's only purpose is to be empty I can simplify it further: new T[0].AsQueryable()
That's correct. Just add the method() somewhere in your main. 
Not entirely sure if the BCL code for the various types (that is, LINQ-to-SQL/Entities/Objects) is available. Could be. But a really good learning resource on the basic implementation and concepts is [Jon Skeet's Edulinq series](https://codeblog.jonskeet.uk/category/edulinq/) where he re-implements the LINQ-to-Objects behaviour one-by-one. It might not be the exact implementation, but it goes over all the behavioural requirements and does an _excellent_ job of conveying more-or-less what is going on behind the scenes and how elegantly the various queries are implemented and used.
Thanks! That's really good to know, I've been interested in learning more about loop performance. Do you happen to know how a while loop using an enumerator would perform vs a for loop? I've seen code like this before and wonder whether it would be preferable or not?: IEnumerator en = collection.GetEnumerator(); while (en.MoveNext()) DoSomething(en.Current); vs. for (int i = 0; i &lt; collection.Count; i++) DoSomething(collection[i]);
Nope. Loops that use the IEnumerable interface are slower than using for or for-each. Here's an article I wrote on the topic. https://www.infoq.com/articles/For-Each-Performance
Thanks for sharing and that's an interesting point you make in the article that IEnumerable's GetEnumerator was used before generics were introduced into the language.
Well, if you don't even know how to call a method, you should start at the beginning. There are some tutorials in the sidebar. For example: http://www.csharpcourse.com/
https://github.com/dotnet/corefx/tree/master/src/System.Linq/src/System/Linq
Well, I'd say you'll most likely have to start from scratch, anyway, as it's a fully custom job and, furthermore, it needs to hook up to your existing codebase.
some more tidbits: * `for (int i = 0; i &lt; array.Length;i++)` will elide (remove) array bounds checks * `int len = array.Length; for (int i = 0; i &lt; len; i++)` will NOT elide array bounds checks * For lops that go from 0 to anything less than the array length, will not get the bounds check elided. * For loops that go backwards, will not get array bounds checking elided. * For loops over arrays that are class members will miss the array bounds elision. Make a function local copy of the array reference first. 
You might as well just use a NoSQL db if thats what they are doing.
There is also a matter of signaling what the code intent is, and this is important in communicating design and usage patterns: - `void Foo(IList&lt;X&gt; bar)` - means Foo might change *bar* by changing its Xs, by adding more X or taking Xs from the collection: the calling code should not count on *bar* remaining unchanged; - `void Foo(X[] bar)` - means that *bar* will stay the same size, but its content might be changed (overwritten with other Xs); - `void Foo(IEnumerable&lt;X&gt; bar)` - signals that the content of *bar* is not intended to be changed (although properties of individual Xs could be altered). Generally speaking, if you write that `Foo` method, try to commit to the smallest interface you actually need. You only go through *bar* to grab some property? Don't demand a `List&lt;X&gt;`; that allows me to pass you this `LinkedList` or even this `HashSet` without having to create a `List` of it first. This is applies to methods returning things - commit to the smallest interface possible. If you return a `List&lt;X&gt;` and at later point you decide a `LinkedList` supports your internal structures better, guess what - you now need to convert it to an actual `List`, whereas if you returned an `IEnumerable` you didn't need to make any further changes to your external contract. Also returning `IEnumerable` means you can use `yield` internally.
It caused more issues than it was worth, for sure.
In fact: Don't commit to implementation details at all if you can avoid it. Programming against interfaces!
Because your result is IQueryable (i.e. not yet executed). The result is put in the JsonResult object but executed after the action is complete when the serialization to JSON happens. Because the using closed your DB connection the query can no longer be executed. You can fix it by putting ToList() after Take(500) which will execute the query and put the results in a list
Normally, you'd want to use a [foreach loop](https://msdn.microsoft.com/en-us/library/ttw7t8t6.aspx) instead of manually using an `IEnumerator`.
Don't feel too bad, I was laughing about this to coworkers, and not about your question/issue. We were laughing about all the others that answered you but didn't read your question or understand your code. 
ToArray() is slightly more efficient 😀
Hmm interesting. Why is that?
just looked it up, you,re right. was distracted by the take method. multiple resizings of the array during allocation is worse than tolist. 
good tip, I didn't know the C# Queue was implemented over an array. 
OP here. Appreciate the quick responses. What are the potential dangers, if any, of simply not utilizing the using statement or not explicitly calling Dispose on the context object? By leaving the context object bare within the action..... wouldn't the garbage collector still come around to disposing it despite it being an un-managed resource? 
Are you asking how to use a settings/config file or some mechanism by which the user can select a file path? Or that depending on where the program is installed/run from, the literal directory path `C:\Documents and Settings\Phone Search Tool\Application Data\data\` might not be valid? If so you can use the `System.AppDomain.CurrentDomain.BaseDirectory` which will point to the path the exe is being run from. From there, you can combine the relative path `Application Data\data\phones data.csv` to it.
Removed: Rule 4. You'll have to make an attempt and describe any issues you have. Plenty of resources found googling for terms like "C# create directory", "C# check if directory exists", "C# download file from internet", and so on.
Okay so by doing the system.appdomain. CurrentDomain.BaseDirectory will allow me to generate a file location valid from with in the source code that will work on any PC? Because that is exactly what I want, I need for the file to install in a location that i can always read from with in the code. Hopefully what I just asked made sense. Thanks for your help by the way, I appreciate it. 
Brilliant, thank you, ill give that a shot when i get back to my PC, sounds relatively straightforward, hopefully it is :) 
The above picture is part of an assessment test for a company that I'm wanting to apply to. I'm looking for some recommendations on a book/tutorial/course that can give me the skills needed to complete the tasks. My background is fundamental, but broad. C++, Java, SQL, Assembly, CSS, HTML, etc. I've taken a beginning C# class which gave me all the skills necessary for task 1, but running into some snags getting into the advanced class because of reasons. I don't even know if the advanced class would help with tasks 2 and 3. The main problem I'm having with task 2 is I don't have any experience with ASP.NET. Thoughts? Also, forgive me if this is the wrong place to be asking this question. I literally have no idea where else to look and the few professors at my college I've asked don't know either.
[removed]
My bad. What I meant is that the receiver of the object can't modify the collection in any way. There is no way an interface can grant immutability of the underlying concrete collection. After all, an interface is a contract: in this case a contract between the caller and the callee.
For someone who's only recently started looking at async/await - why would this be better? If I carry out a task (ToList, in this case) on the main thread, or I carry out the same task on a new thread but the main thread awaits for it, I'd expect both methods to take the same amount of time. In both cases, the task has its own thread on which to run, and nothing else is happening until it's done.
http://imgur.com/a/CSXMY
Basically it allows you to scale to more requests per second on the same hardware assuming the web tier is your bottleneck. Note that it will not make a single request faster. In a web context there is no such thing as "main thread". You have a pool thread assigned given to the request to do its work. In this case the task will not be done on a new thread. It is an IO task that is not executed on a thread (it is just waiting). Your expectation would be correct if the async operation was doing CPU intensive work.
It's not necessarily about performing the work faster (it may even be slightly slower), It's about not blocking that thread whilst it's waiting for a response from the database. Instead it can be servicing other requests.
In this particular use case there is no downside. As far as I know Disposing the DbContext only gets rid of object tracking (i.e. the thing that keeps track of what changes you made to the entities so that when you call SaveChanges it knows what to update). Still I'd put the using there. If you don't and I am reading your code I will assume you had a specific reason to leave it like this and will go around investigating what weird thing you need the context for.
I use `Array.Empty&lt;T&gt;()` everywhere because it is defined in mscorelib.dll whereas `Enumerable.Empty&lt;T&gt;()` is in System.Linq.dll and is used much less in the rest of the framework. https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Enumerable.cs#L16 vs https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Array.cs#L1016 (or same things over on referencesource) edit: second link was intended to be to Array.Empty...
There is some pretty neat comments (and code) in the Roslyn source code about how foreach statements get compiled: https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ForEachStatement.cs 
&gt; * For loops that go from 0 to anything less than the array length, will not get the bounds check elided. &gt; * For loops that go backwards, will not get array bounds checking elided. Are you sure on these two (the first one might require verifying that the the length as well as the stricter condition like `i &lt; array.Length &amp;&amp; i &lt; smaller` but I think should still be possible)? From the CLR source for CoreCLR: // // Try to find loops that have an iterator (i.e. for-like loops) "for (init; test; incr){ ... }" // We have the following restrictions: // 1. The loop condition must be a simple one i.e. only one JTRUE node // 2. There must be a loop iterator (a local var) that is // incremented (decremented or lsh, rsh, mul) with a constant value // 3. The iterator is incremented exactly once // 4. The loop condition must use the iterator. // https://github.com/dotnet/coreclr/blob/a761b9b985f60be14deadd9015313f8d2a34033d/src/jit/optimizer.cpp I am pretty sure "incremented" in that source file means `add`, `lsh`, `rsh` or `mul` by a constant. So loops that go backwards should be getting elided. Loops that match that comment are potentially unrolled (and boundaries not checked). I'm not sure exactly where the `ldlen` opcode is skipped over, but I think it is in this file.
&gt;Are you sure on these two I confirmed it by checking the assembler. I did this in visual studio 2015 update 3, .NET 4.6.2 / ryujit 64bit , release build optmizations on etc etc. 
Removed: Rule 3, self promotion.
Nice to have, but entirely irrelevant, especially since Couchbase also has commercial services available. But you are an employee of Couchbase and it's your job to promote it. Reddit is not an advertising/promotion platform. Please review their guidelines on self-promotion. ---------------------------- ~~Now that all said. This made me dive a bit deeper and found a spam account or two heavily promoting couchbase. Consider the product blacklisted on /r/csharp and any further submissions to it will be removed.~~ EDIT: Double checking, I'm guessing it's a bot that's submitting your articles to your own subreddit. Regardless, Reddit and /r/csharp isn't a platform for company employees to promote their own product.
Well, the receiver can cast the reference to something else such as IList, but yeah... that wouldn't be very nice of them. 
I am trying to protect the function of the application. Currently, I have just a separate form, but that seems very crackable.
.ToList().. is there anything you can't do, except prevent linq from optimizing the query?
&gt; commit to the smallest interface possible Short, sweet, and immensely powerful. I've gotten into an amazing habit of "interface-driven design", and it has been so wonderful. The first thing I do before starting a new story is to be diligent about the interfaces between them first.
You could use NodeJs, AspNet(/Core) or whatever you desire.just back it up with a proper proxy ( nginx, IIS, Apache)
const_cast
It sounds like they are already giving you hints on what you'll need to use as well as the API url. You might want to do some searches on the different things they put in "Technologies to consider". Look up doing asp.net mvc (I'd stay away from aspnet core for now). There are many tutorials out there, for this simple of a project I'd say just do the API calls from your controller and then return the result to the MVC view since they want the data returned from C#.
 .OrderBy(n =&gt; n.BranchNumber) .Select(br =&gt; new { branchNumber = br.BranchNumber, branchName = br.BranchName }) .Distinct() .ToList(); That last line I added right there. Your original LINQ query is returning an IQueryable, which really gives you a collection of generated SQL code (or whatever else is being used to *actually* query the data) and a given item is not fetched from the database until you access it directly. Since you are not actually using this data until after your using block, your database context no longer exists for those queries to be executed against. Using .ToList() enumerates through the IQueryable and actually fetches your results from the database.
Ok, but what is the problem ? Also you are using the Console class and Console methods in a Windows application, if you want to read user input you have to add to you window a TextBox or similar to allow the user to enter data. As a general rule you can't use the Console without a Console.
I guess that it's that I'm not sure how I would go about and let the user add data
Read about nullable types, use DateTime.Today and also this: http://stackoverflow.com/questions/6121271/how-to-remove-time-portion-of-date-in-c-sharp-in-datetime-object-only
I see, than what you need to do is forget about the Console when writing Windows apps. and add a TextBox to the window, then when the User clicks your button you read the TextBox value (to access the control from code you have to give it a name) and use int.TryParse or to turn the value into a number and use a MessageBox to output the result. Do you want to use a popup instead of using the same Window ? If I was not clear let me know and I can write you a quick example. Hope this helps !
[This](http://imgur.com/a/TYsyI) is the situation [and here](https://pastebin.com/NEHW5HBQ) you can find an example of what I was saying EDIT: Fixed formatting
Here is a beginners tutorial that shows how it may be done [Absolute Beginner's Guide to WPF Application With Examples] (https://www.go4expert.com/articles/absolute-beginners-guide-wpf-t30091)
The interface hierarchies are not fine grained enough to avoid this, and there are several other examples (e.g. a stream is read-write by default, read-only collections etc.)
You can leave out the outer curly braces, so you just chain 2 usings on two lines, like this: using (SQLiteConnection con = new SQLiteConnection(connStr)) using (SQLiteCommand addCmd = new SQLiteCommand(nonQuery, con)) { // ... Other than that, using parameters is good, You could assign addCmd.Parameters to a variable to shrink those lines a little. I do agree it seems a little convulted. The majority of it is adding those many parameters which always have the same values. Maybe instead you can leave them at NULL or use a default value for the column (DEFAULT keyword during CREATE TABLE)? That would mean moving the default values from your C# code into the database, then you could substantially shrink the method.
http://stackoverflow.com/questions/34206611/calculating-a-derivative-with-math-net-c-sharp
i came across this as well but i am supposed to make a symbolic derivative
I agree with the comment from Jon Skeet (the author of the book you mention) in your Stack Overflow question, you should show more of your code because with what you written there is no particular reason for the behavior you reported to happen.
I don't know where the "infinite its" is coming from. It sounds like the project is designed to have you implement the chain rule and use recursion to determine if the function is fully derived. 
First thing I did on my current project was delete 50 interfaces. Suddenly the code was a lot simpler to navigate and a lot less confusing.
Microsoft doesn't have Reddit accounts. Other people submit Microsoft content with no financial benefit to themselves. EDIT: Your submissions to crosscuttingconcerns are fine.
Yes, linked list is worse. The talk I linked also addresses this with data, even for code with insertions because of the CPU prefetcher. I have some experience in using C++ linked lists (for perceived insertion performance gains) and failing horribly during iteration. Though my comment was hitting on std::vector vs List&lt;T&gt; for objects which are very different with sequential iteration.
Right click solution, then set startup projects.
This I know but i want project A to be my startup project because it's there my start page is?
That would be fine. If you set them both to debug you will likely get two iis localhost urls. Just use the one for project A
There is nothing OS-level about events and delegates, it's pretty simply just a function pointer [list] (with some extra data).
Technically decrementing once repeats the current iteration, since it 'counteracts' the increment that would take you to the next one. To go back you'd have to decrement twice.
I see a lot of information here about how the compiler will generate code for the different variations here, but no mention that once the JITter gets its hand on the code it may transform beyond all recognition. I know little about the .NET JITter, but the Self JITter, which in many ways was the first modern JIT-engine, would already do stuff like inline methods based on hot path analysis. I would be really surprised if those kind of optimisations were not also going on for CLR, so looking at generated ILASM only gives half the story. There are plenty of good papers on the Self architecture here: [Self Language](http://bibliography.selflanguage.org/).
May I ask why you want to do that? This approach could be perfectly legitimate, but I get the feeling that there might be a better way to approach the problem.
My intention is to 'redo' an iteration where i want values 0 and 1 in 12 spaces with a limit of having 5 1's.. in the case there are 12 0's then I want to go a step back and do it again for that specific row of 2d array elements till theres atleast 1 element with value 1. I did find a new approach, just added more specific conditions to it and worked fine now. The double decrement did not work either btw for some reason (logically made sense)
No, this is information about what the JIT does. It is the JIT that eliminates (or not) the array bounds checks. I am looking at the generated ASM of the JIT, not the IL. This is easy to do in visual studio. 
It looks like you trying to make cross domain post. By default these requests are blocked by browser. Please see http://jsfiddle.net/saarmstrong/B6LBw/
I find Wunderlist good for just basic to-do. It's uncomplicated and to-the-point.
Maybe, could you create a example step-by-step how you use WPF for a report? Never heared about that.
Maybe you just take a look into the link(s) supplied...
Just read the Github Issues, thought you are the contributor.
OK, I stand corrected. Presumably the CLR still does hot path analysis on method calls to do inlining etc. Otherwise, V8 and other compilers for dynamic languages would seem to have an edge here (which definitely inherits these techniques from Self - possibly via Strongtalk - it is evident in the source code). In which case, the generated machine code should actually change over time, as profiling information indicates the hot path.
Try to post object as data, something like : **data : { provider: 'google' }**
I wish Visual Studio had an addon of that sort. And I will gladly wait for your app. 
Yes, just been looking at other info and it seems that this is not done. Seems a shame to miss a trick like that - especially for longer running code (server processes etc.) as it can really help performance a hell of a lot. In particular Self (and Java's HotSpot VM) will gather profile information. If a virtual call turns out to be always a particular type, it will replace with either an inline call or inline code - with a simple type guard in case something changes. When that happens, it typically avoids expenses such as excessive branches and cache misses. I'm surprised the CLR is not doing this, as it is a well-known, well-documented technique that produces measurable performance improvements (see the Self docs) - probably even more so with modern cache architectures. Just goes to show you should never make assumptions about your execution environment.
^(Site note: How the heck do you terminate the numbering? I had to place a horizontal rule between it and the code otherwise NO MATTER WHAT it seemed to place the next text as part of the indented number for some reason. In addition, I can't add the 4th one afterwards because it replaces it with the number 1. I hate when things auto-number. Why.. why is this a good idea? I could fake it if you could put a horizontal tab but nope.) ^edit: ^It ^seems ^if ^you ^do ^number\. ^it ^will ^NOT ^put ^it ^as ^part ^of ^the ^numbering. ^However, ^I ^still ^can't ^tab ^it ^over. ^edit: ^Okay, ^it ^seems ^you ^CAN ^do ^a ^tab. ^You ^just ^have ^to ^copy [the whitespace from here](https://www.cs.tut.fi/~jkorpela/chars/spaces.html). ^I ^used ^"EM ^SPACE" ^and ^replaced ^EACH ^numbered ^list ^item ^with ^a ^1\. ^cancelled ^version ^of ^it, ^and ^then ^pasted ^that ^EM ^SPACE ^before ^it ^so ^that ^the ^one ^at ^the ^bottom ^would ^have ^the ^exact ^same ^amount ^of ^space. ^IN ^ADDITION, ^HERE ^IS ^THE ^BIG ^CATCH. ^YOU ^CAN ^ONLY ^SAVE ^ONCE! ^If ^you ^click ^edit ^and ^save ^it ^will ^remove ^your ^spacing! ^You ^can ^add ^it ^again ^but ^if ^you ^ever ^edit ^again ^you ^have ^to ^re-add ^all ^the ^spacing. ^Thanks ^Reddit!
 foo += " "; ?
Just do it every time you append a random word?
 message += word + " "; doesn't this do what you need?
Google Keep lets you create notes which can include checklists; if you check something off, it goes to the bottom of the list so you can uncheck it later (useful for recurring tasks).
Team Foundation Server. No question. 
I figured it out, thanks!
&gt;and it does make them I believe mailto links Well, does it? If they already are `mailto:` links, the problem lies with your browser/OS configuration, not with the code.
Windows Services run in a different mode than your console application. By launching an application from the service, you are launching it as that service. Since a service can start without any user logged in, you'll need to find the session id of your currently logged in user and call into CreateProcessAsUser https://msdn.microsoft.com/en-us/library/windows/desktop/ms682429(v=vs.85).aspx
We use a software package called Loftware, it's extremely easy to use, flexible template layout system, although I have no idea of the cost.
Have you considered other, more ethical, ways of gathering the data you need that doesn't require working around the protections the server has in place? If you only need to gather the data once, what's wrong with having the requests less frequently? Are there any APIs where you could get the same data? Could you try to get an export from the owners of the site you're scraping? You're trying to circumvent something that's been placed there for a reason. The extra load on the server could also be costing the owner money. You could also find yourself in legal trouble if you're scraping the data with the intention of using it for your own gain. 
Can you give us an example of what options you're considering? "Coroutine", "Subroutine", and "Function" all describe very similar things, and they don't have any real meaning in C#, as everything is a class _method_*. * Of course, there are `delegate`s and lambdas and other fun things like that, but if you're a beginner, you're probably not thinking of those.
Yep, my mistake
Trello
I just tried and it is amazing! Works superb, even for a complex graphical layout! Thank you very much for making this available like this!
This also should work: for(int i=1; i&lt;n; ){ //Do stuff if(//a condition) { i--; } else { i++; } }
Pretty well put together, with some bonus "help" :) from Jon Skeet toward the end. A decent refresher or interesting TILs, depending on your familiarity.
Could always use a different key to go to definition. I use the intelliJ ReSharper layout, meaning it's Ctrl+B. 
And doesn't require a plugin
I like to use Google Sheets for a lot of things
Is this Unity related?
I think because you "add" two string or "add" a delegate to the list Edit: And substract being the logical opposite
I was lucky enough to attend this session, the one that Jon Skeet did on abusing C# was quite good as well.
 2+3; //5 5-2; //3 "o"+"foo"; //"ofoo" Okay... "ofoo"-"o"; //"ofo" ??? It's not arithmetic as you can't always reverse the + operation with a - EDIT: also (AFAIK) List doesn't overload + or -
I've enjoyed his Abusing C# talks as well... closest thing to a "C# Wat/WTF" type video i've seen. Do you know of any similar, by any chance ?
Resharper has a todo window 
The beginner tutorials are pretty good for some very simple scripting. Your quote there I think is from older documentation. Regardless, you can learn the C# _language_ basics from any number of help resources in the sticky, sidebar, and google, and use the Unity tutorials to apply what you've learned to the Unity Engine.
Really cool! I find params int[] to be quite useful in the neuronetwork constructor to specify the number of layers and neurons in each. 
How does it compare to opentk besides the support for directx? 
gotcha, I actually do use html.raw for one other instance when passing in a list to the razor code so i could put the list into an array or something along those lines to use in jquery, don't have the code in front of me.
OP is talking about this: https://docs.unity3d.com/Manual/Coroutines.html
You are welcome! I thought that somebody would find it useful :)
They're just operators. It's super pedantic (and not even correct in math) to assume that they are only ever used as arithmetic operators.
Multiplication is also considered by most to be commutative, but it's not for matrices. Anyway, who cares? '+' for concatenation is fine, what a thing to throw a fuss over. edit: your analysis is fine btw, I meant the above user not you.
They're Unity specific things.
&gt; Where in mathematics does the order of the operands to addition matter for the result? Several places. Usually it's multiplication (like with matrices), but there are also places where addition isn't commutative.
"Plus" for string concatenation is intuitive enough for people that it solves the problem of easy and clear string concatenation. I'd be fine adding named operators instead, or even introducing new symbols with semantic meaning. I don't like == being overloadable, but that is because it is already defined and overloading it changes its semantic meaning from identity equality to some kind of value equality.
I have an OSS library called FormFactory you might be interested in. It's kinda like souped up EditorTemplates for convention based tendering http://formfactory.azurewebsites.net http://formfactoryaspnetcore.azurewebsites.net
I'm sorry, I just tried to help :(
Outlook/Exchange for timed todos by calendar, // TODO for code todos via ReSharper...Work items for real world development todos
I really like the debugger. Much easier than logging to the console. I've been a member of StackOverflow for years b/c of JS, so luckily I've got that mindset!
ooo!
Makes total sense! The few C# overviews I've looked at this week all have made a big deal of scopes, and the link you've provided looks like some good conversation. Thanks!
You can also map this (and nearly every other keyboard-shortcut type command) to your own key combination in the visual studio settings. Go to Tools -&gt; Options pulldown menu. Navigate to Environment -&gt; Keyboard and map away. 
thanks I like the nested forms. I think the problem is like what majority of the people said, it's something to do with my browser/computer, not the code. the code was actually quite simple, just had to add that one attribute.
This is incredible
C# uses short-circuit evaluations. if (a == 1 || b == 2) won't evaluate b at all if a is 1. Where this causes problems is when instead of a and b, people use functions. That have side-effects. if (a() == 1 || b() == 2) b() never gets called if the result of a() is 1. 
Any good resources for all the different capabilities of LINQ? 
`var` does not do the same as it does in JavaScript! C# is strongly typed, even when you use `var`. That may take some adjusting to, but it's a huge bonus. It means the developer gets to see many of the problems at compile-time and fix them before the user gets to see them.
Generics. From a language like js that doesn't really focus on types, the strong, static typing of C# can seem restrictive. Generics allow flexibility that make the language much easier to work with.
I agreed with pretty much every design decision here except for the new mutable value tuples. 1) I don't at all think they should be mutable 2) Because of their hashing rules, IF you treat them as immutable, they actually make great compound keys in dictionaries/hashtables
Also always use double equals signs. 
That is was originally called COOL with file extensions of .cool, but someone already had a language called Cool, so they couldn't use it. Then they called it C++++ and stacked the last two plusses on top of the first two to make a #
siiiiick
thats like the opposite of cool
I'm convinced Jon Skeet is part border collie.
Turn on the [enhanced scroll bar](https://blogs.msdn.microsoft.com/cdnstudents/2014/01/21/visual-studio-tips-and-tricks-enhanced-scroll-bar/) Makes it easy to jump around files, see errors, break points, etc. 
My general rule is to ONLY use var when absolutely necessary, like with a linq query. If you think something is supposed to be an int, double, float, etc. DEFINE IT THAT WAY.
You should check out ditto http://ditto-cp.sourceforge.net/
I've been using VS for nearly 20 years and didn't know about the ctrl+* thing. I've been doing what you said and pushing F11 or F10. Thanks for that. 
I used to do that too. I'm warming to var now, but only if it's immediately clear from the right hand side what the type is, such as when you use it with a "new" keyword. (And obviously for anonymous types, whether from linq or anywhere else, because you have to.)
That advice goes against what most people would say, btw. I use var for almost everything.
bookmarking! thank you
Yea. I installed it per a recommendation on here. I really recommend you set up whatever custom keyboard shortcut makes sense to you. It's really handy when you're moving code and what not, and say you want to copy a whole line, but then also a variable name or something. Just copy both because you know you can access it quickly later. 
C# is, for me, the best language to do object oriented programming. If I could do everything with it I will. Take some time to learn and understand it. 
C# and TypeScript were both designed and still are by the same person, obviously not by himself, but he started them. That's why there's a strong similarity.
I use var for everything with the exception of primitives like string int etc
Most people use var everywhere except where it's not obvious or near-obvious. I agree with this stance.
Been developing for 5+ years, still waiting for that "eventually."
If you're coming from Javascript it's worth mentioning that you should *not* be using `dynamic` in C# except in 0.001% of cases. C# is statically typed, and should be used as a statically typed language. Don't be tempted to fall back to anything inferior.
A lot of people have been saying this. If I know the type I want = static always? When would I *need* dynamic then?
It's not much harder to write, but I think it's harder to read by being more verbose and redundant.
No worries haha. The reason you can use the functions on that array is because that array you've made is actually an instance of the array type. This means you can use those functions it has on it. It's exactly the same in C#. That GetName is returning a string type, therefore you can do .Trim() on it! It's exactly the same as typing `string.Trim()`. An example in js would be a function that returns an array: function test() { return [4,5,6,7]; } console.log(test().pop) // prints 4 or 7 can't remember if js array is fifo or lifo
Bookmarking these as I'm probably not ready for them. I"ll definitely want to be checking them out tho. Thanks!
Technically you will never *need* `dynamic` (note that `dynamic` is **not** the same as `var`, by the way). `dynamic` was originally introduced to make interoperation with dynamic languages (e.g. Python) easier. That is still its primary use-case. There is also a reasonable argument for using it in place of very complex [reflection](https://msdn.microsoft.com/en-gb/library/mt656691.aspx) code- but as a C# noob there's no way you should be doing anything with reflection yet. Some people who come from dynamic languages (like Javascript), rather than learn static typing, try to emulate dynamic typing in C# by using `dynamic` everywhere- that is what I'm trying to discourage you from doing. Static typing is superior in many ways and when using C# you should definitely make sure you learn the type system properly rather than trying to write "Javascript in C#".
Not sure why you thing it's a cop out? They are extremely useful and widely used throughout, including in the .NET framework itself. List&lt;int&gt; is an example of generics
This is exactly the type of advice I was looking for when I posed the question - thank you.
No it doesn't. He gave you terrible advice.
Yeah. Basically .NET is many things, including where the built in **types** are. Note I said types not methods. A method only exists on a type, there are no "free functions" like you're used to in js. Have a look for the Base Class Library, this is the part of .NET where these types live.
That's just it - I wouldn't know. Which part do you disagree with? 
Nice to see Resharper features being brought into VS itself :)
Var allows you more flexibility when refactoring / maintaining code. If you need change the return value of something it's FAR easier and less error prone to change it in one place instead of finding everywhere somebody reached for their blankie. While C# developers love the blankie that strong typing provides a significant chunk of their code could really be duck typed and be none the worse for wear. But because strong typing is all they know they shackle themselves and create more work down the road.
This sounds like the most reasonable answer, although I think I have more votes for strict typing?
I agree not much harder for a trivial type. But when you start declaring and initialising `Dictionary&lt;string,Dictionary&lt;Person,Func&lt;Person,int&gt;&gt;&gt;` then a `var` can be useful in making everything more readable.
They are so intertwined they don't really exist without each other. By learning C# you'll naturally come across things. Verbatim reading the docs for .net won't be much use if you cant understand the example code.
Right? Now if only they could keep up with the Typescript release cycle. 
For some reason I'm not surprised that VB does this. But Javascript and I think every self respecting language does this. Sort of TIL to be honest. But why on earth would you even want to evaluate both?
Those comments also appear in the tooltips when you hover over classes, methods, and properties elsewhere in code.
You will be taught object-oriented programming. You will be told that objects, through their class, represent some real-life (domain) thing. And all real-life things have a set of characteristics that describe them, mapping to class fields and properties, and expose some kind of behaviour, mapping to class methods. So class basically has some data in form of fields and some behaviour in form of methods. Right? Wrong. Mixing the two is usually a really really bad idea. It may make sense for data structures and for some side-effect logic (i.e. I/O streams), but for implementing domain logic things get way simpler if you clearly separate simple dumb objects that only hold some data (DTOs) and things that only implement logic to process these dumb objects in a meaningful way (services). You can then describe services with only their contract (interface) and compose them - i.e. a particular implementation of service A may require service B to work. And suddenly things like proxies, adapters, decorators and all those scary patterns make sense. So no, please, no Shape abstract class that defines abstract method to calculate area. Shape is a simple and dumb DTO, it should only contain your rectangle's sides or circle radius. Then you may have services (strategies) for calculating areas of different types of shapes, and compose them all with a facade that chooses correct strategy based on the concrete type of shape. It may seem like overengineering in some cases, but it's usually totally worth it. 
To put it in more perspective, using var is recommended by people like Mads Torgerson (C# program manager and well known tech blogger) and popular tools like Resharper.
ReSharper already does this. **Edit:** jese I am actually glad visual studio does it by default I was just stating a fact not an opinion.
I was actually talking about this with some other guys around the office and they all agree, so it's odd that people on here don't.
One of the most valuable tools is simply to use Visual Studio's intellisense. I came from a straight up C background using simple editors like Notepad. Visual Studio is a GOD SEND because you get intellisense like [THIS](http://i.imgur.com/IktdLJB.jpg) automatically so you'll just naturally learn things. Also, if you hit then hit f12 you'll go to the definition which will give you all the signatures (minus any [extension methods](https://www.dotnetperls.com/extension)) for a string. [Check it out](http://i.imgur.com/DHBvIjv.png) The site I linked to for the extension methods is https://www.dotnetperls.com/. It's been one of the better resources over the years I've been using C#.
Removed: Rule 3.
Without know exactly what you want this for, it is hard to help. I have needed to do this in the past, so what I did was this: for (var x = 0, length = CompanyList.length; x &lt; length; x++) { if (CompanyList[x].id) { var previous_index = x -1; var previous_companyid = CompanyList[previous_index].id; } } Really, in your example you just need to do "i-1" to get the last iteration right?
Apologies post updated
https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/
Yeah R# is great. But it never got any of these conversions wrong for me. Do you have an example?
You can look inside a variable content when your debugging is paused by clicking in its name and pressing F9. 
https://en.wikipedia.org/wiki/Near-ring
No luck. =/
&gt; Everything in C# is strictly typed. Except `dynamic`. :p
It's strictly typed to `dynamic`. :D
&gt; I just got burned too much in php and vb by not defining types Because those don't have static types. `var` in C# is strongly-typed. &gt; Plus with auto complete, it's not like it's much harder to write That's not the only consideration. `var` avoids unnecessary implicit casts. Consider the differences here: var dict1 = new Dictionary&lt;string,string&gt;(); IDictionary&lt;string,string&gt; dict2 = new Dictionary&lt;string,string&gt;(); var derived1 = new Derived(); Base derived2 = new Derived(); Furthermore, the scope of `var` is always local, so it makes refactoring and changing the return signature of private functions easier.
&gt; \#if DEBUG Avoid `#if`. Use `[Conditional("DEBUG")]` instead. It turns a method into a no-op if the value is not set. public static int Main() { LaunchDebuggerIfDebug(); DoRealMain(); } [Conditional("DEBUG")] private void LauncheDebuggerIfDebug() { System.Diagnostics.Debugger.Launch(); } Why? `#if` can lead to compile errors when you switch between DEBUG and RETAIL, because it's actually hiding the code from the compiler.
&gt; Is it because a near-ring doesn't have to be an abelian group? Yep. I actually could have just said 'groups' too, because their definition does not require commutativity. And these structures find uses all over mathematics, especially for analyzing symmetries. I don't really care how any preconceived notion of mathematics applies to delegates in C#, i'm merely responding to the abortion of a sentence that "In mathematics, A+B and B+A are always(?) equivalent."
THERE'S the quick way to check out all the built in methods I was hoping for. Wow... thanks for this response. I can't believe all the resources everyone's linked me to.
&gt; Linqpad So it sounds like a competitor to Resharper?
well wasn't this fun?!
really cool
Unity and Xenko are your options pretty much
I was just about to ask if there was any language that didn't do short-circuit evaluation.
FWIW, PushBullet does that clipboard syncing even between desktop and mobile, but it got moved to the pro version when that became a thing.
I've never seen a "wrong" conversion, but it does get a little overzealous sometimes. There are some cases where I've got two or three nested loops which are perfectly readable. The LINQ conversion was really hard to read and understand. Also, if you're looking for performance, LINQ can cause more allocations and slow down a perfectly good loop. It's not something to concern yourself with in most places, but in a hot path, it can be pretty significant.
Don't ignore compiler warnings and always set your projects to fail compile if there are any warnings. That really goes for any language though. 
Well my Object Oriented teacher lied to me 😭
I used it for the exact same thing. I had a grid I was creating on a website on the fly, which could have any number of columns and types. ExpandoObject serialized it no problem and away I went.
So I take it you work for resharper?
&gt; Mixing the two [properties of state and methods to change state etc.] is usually a really really bad idea. In my experience, 99.9% of the time it's been an *excellent* idea. That's from my field in mechanical engineering anyway, and having gone about this several different ways. I'm all for challenging established norms, but to say that encapsulation is "usually a really really bad idea" is a bit much. 
Yeah, collapsing nested foreachs doesn't generally leads to the most readable code. And to your second point it really depends on what you are querying against, but most of the time a foreach with some ifs and stuff inside would perform better. But LINQ is so freaking concise! 
That's how all platforms work. If you choose to build software on top of any platform, you better believe anything you do well will be integrated into that platform. 
On the flip side, `int` in C# is just a shortcut for `System.Int32`. In other words, you're dealing with the boxed versions in C#, but the [boxed versions](https://msdn.microsoft.com/en-us/library/s1ax56ch.aspx) are also lighter-weight than they are in Java.
The difference is that IQueryable&lt;T&gt; supports deferred execution by sending the expression tree over the wire. The first query produces an IQueryable, which is basically just an expression tree. The second query is just more manipulation of the IQueryable, and still an expression tree. It doesn't force the actual execution of the query until ToList() trigger enumeration. Casting the first item to IEnumerable&lt;Person&gt; immediately makes the second query into a LINQ-over-IEnumerable, which happens in-memory. In order to query things in memory, it has to evaluate the enumerable, which triggers the first statement's actual execution. Don't feel bad, though. I only learned about this the other day from another reddit post of a C# conference in London.
There are a lot of options for 3D graphics with C#, in or outside of WPF. You mentioned SlimDX, but [SharpDX](https://github.com/sharpdx/SharpDX) is more modern and very well-maintained. It has complete bindings for all parts of DirectX. There are also bindings for OpenGL, Vulkan, and more. Generally speaking, these can be embedded within a WPF application, but it's not usually interesting to do that in a 3D game. It's sort of obvious, but have you checked out MonoGame?
I think Saxon is the only one I know of. See http://www.saxonica.com/download/download_page.xml Also see the tools list here: https://www.w3.org/XML/Schema
I liked asking questions from my instructor when I was in votech or doing some Googlefu. An important part about being a developer is being able to find resources whether that be msdn, SO or Reddit. What part are you stuck on? Maybe we can be of assistance
You seem to be missing the entry method. Can you share a screenshot of the script components properties? (The one when you double click on it in the ssis package)
I would have just done an OrderBy on the property and then FirstOrDefault
Okay, maybe it was a bit harsh :) Managing internal state (like in case of data structures, for one) via methods is perfectly okay. I'm more concerned about the cases where domain logic leaks into DTOs where it shouldn't. For example, a class with data and bool Validate() method is clearly a bad design - Validator service, exposed via interface, is actually the droids you're looking for. This approach also gently nudges you toward avoiding mutable state in general. It is bit of a controversial topic, sure, but it has its pros. 
Oh wow.... You explained it better than most books and sites
To be quite honest, I've downvoted you more for your "holier-than-thou" attitude than for the content of your post. But as for the content... ok, big company "steals" ideas from smaller company. And in other news, bears shit in the woods.
Wait.... What? Where has this entire thread been? A lot of this stuff have been really nice to know a few years ago
There is also the C# Interactive Window &amp; Intermediate Window. * Immediate: Access Solution Files * Interactive: A bit like linqpad: write and test code on the fly (can run .csx script files)
Let's start with the for vs while question. A for loop is normally used when looping through an array, or when you want to do something a predetermined amount of times. The syntax for this is for (VARIABLE_DECLARATION ; CONDITION; VARIBLE_CHANGE) { } An example for going through an int array: for (int i = 0; i &lt; myArr.Length; i++) { } A while loop will continue to loop until it's condition is meet, or you use the keyword "break" . Break can also be used in a for loop if you want to stop the loop.
So, they work in opposite ways? For will execute the statement as long as it's true? Whereas the while will execute the statement as long as it's false?
They are open sourced (github) but without much progress. Also lacking newest Roslyn features and don't work with VS2017. Sadly. 
Please use the phrase "statically typed" instead of "strongly typed" the second being defined so loosely that it does not have much of a meaning.
Linqpad is your friend and worth paying full price for. 
Sorry but, Rule 1: No job postings (For Hire and Hiring)
Yeh that's fair enough. I figured as much but it was worth a try. Is there a sub Reddit where I can?
It's because var isn't dynamic it's inferred there's a difference. With inferred you still get type protection and compiler checks. If you changed the return type of a function that was assigned to var you would get a compile error if that var was used elsewhere where it logically shouldn't for example this is fine, our var x is inferred to be an int so can be used in the TakesAnInt function: public int GetParam() { return 1; } public void TakesAnInt(int i){ //do stuff } var x = GetParam(); TakesAnInt(x); However this produces an error because var is now inferred to be a string so cannot be used in the TakesAnInt function. public string GetParam() { return "1"; } public void TakesAnInt(int i){ //do stuff } var x = GetParam(); TakesAnInt(x); There is no difference between using `var` and `string` here except that you have to type less. This is a trivial example but with more complex types you save yourself a fair amount of typing and make your code far more readable.
An over simplistic verbal example would be... to do something while you are out shopping While(outShopping == true) { DoSomething(); } then when you are back from your shopping, you will need to unpack and put away your purchases. You know that all your purchases are in your shopping bag so... foreach( var item in bag.shoppingItems()) { PutAway(item); } The for each will stop if or when there is nothing in the bag. The while will continue on forever until the conditions are met eg: outShopping is set to false. 
Can you elaborate on how the separation looks like using microservices and multi-tier architecture?
LINQPad is primarily an alternative to the C# Interactive window/shell that was introduced in VS2015. It's a separate app. Resharper is a bunch of enhancements (improved refactoring and static analysis tools, unit test runner, and more) that makes it easier to write code and find/correct errors. Resharper isn't useful without Visual Studio. LINQPad and the interactive window make it easy to answer small questions about the language and framework that you would otherwise need to spin up a small console app to check. LINQPad has a friendly UI, mainly, with better output formatting for things like collections. The interactive window is free.
True, it would be nice if Java would get user value types. AFAIK, though, these aren't the boxed versions. Boxing still creates a reference type that heap allocates a copy of the value. 
Correct me if I'm wrong, but depending on the DI container, for example Unity, you don't have to register class implementations. Only interfaces. This is because the container can infer which "type" it is since there is only 1 class for the non-interfaced type. But if you want a non-default lifestyle you will want to register him anyway ofc.
Depends on what it is. For fundamentals like you're talking about - flow control and such - it just takes finding someone who can explain in terms you can relate to. In your other comment... &gt; I feel like it should be super simple but it all seems to do the same thing. You're right. Functionally, there are a lot of ways to write code which achieve the same end result. And nobody's going to throw you in Programmer Jail if they point and shout, "Mother of *God* he used a **for** loop instead of a **while** statement! Lock this monster up!" In the real world, programming tends to not be a one-and-done thing. It's not a case of writing something for assignment, submitting it, and you never see it again. Often, you'll have to come back to code you've written and change it, or a colleague will contribute to it, or whatever. You're not just writing code for the compiler, *you're writing it for people to understand why you're doing what you're doing.* Let's use some plain English examples. For one, maybe I'm a college professor or TA, and at the end of semester I have to assign grades. "**For** every one of my 93 students, I will evaluate and give their grade." I have a known number of individual things I am going to go through, one at a time. Alternatively let's say I'm a student and I'd started college and put on my 'freshman fifteen' and went up from 165 lb to 180. I want to get down to 165, so I figure I'll hit the gym until I meet my goal. "**While** I'm over 165 pounds, I'm going to go to the gym." I don't know how many trips to the gym that will take, but I'm going to do it until it happens. Now granted, maybe I can go to the gym forever and just not get down to my target weight, so I'll stop if I haven't gotten results after say 100 trips. Otherwise in the programming world you could do a gym loop that goes to infinity! "**While** I'm over 165 pounds, I'm going to go to the gym. But I'll stop and try something else if I don't achieve that after 100 visits." *Here's the important bit, to your earlier comment about "it all being the same."* I *could* make the same statement, "I am going to go to the gym 100 times. **For** every trip, I will work out. Except **if** I'm under 165 pounds, then I'll stop going." Functionally, that describes the exact same series of events that will occur. However, it's more awkwardly stated. The objective in writing code is often to find the way to "phase" things in syntax that is *most* clear and logical to a *person* reading it - since the compiler will happily parse things either way and go about its business.
that's awesome. tired of those extra steps lol
awesome, thank you! I have that site bookmarked from another redditors response but haven't checked it out yet
that's great. and i'd wondered how i could be doing that without having to put together a whole project, etc. It wouldn't be a big deal but I'm used to just going over to jsfiddle or codepen to monkey with little concepts
Keep in mind Visual Studio itself has an interactive console now (since 2017 I think). Linqpad is probably much more useful to a beginner with its visualization of data and everything, but there is a handy alternative for quick tests now.
Ok. That makes sense. So, it is registered to give me a single instance of `ApplicationDbContext` for each web request. What would be the equivalent of this in other containers like Unity for example. Something like this: `UnityContainer.RegisterInstance&lt;ApplicationDbContext&gt;(new ApplicationDbContext(), new PerResolveLifetimeManager());`?
Thank you everyone, this helps. 
You do if you want: * a better live template system, * powerful template macros, * far more options for code colorizing/syntax highlighting, * far better autocompletion (in my opinion), * code suggestions for stuff that isnt in your imports defs yet/automatic resolution and adding of imports... on paste, * ctrl+click any type to navigate to either its source, the reference source, or a decompiled copy of the code using dotPeek, * XamlSourceNameResolver implementation is much better so it gives you code suggestions and context inheritance aware in weak-object reference property setters in xaml (also event name resolution), * xaml editor reformatting improvements with alignment, * solution wide on the fly analysis, * advanced regex colorizing and extended info on stuff like regex operators and syntax, * datetimeformats/timespanformats along with examples of the output, * a handy regex validator tool, * code generation and refactoring in general is far more advanced. * AssemblyExplorer * //Todo tracking * browse the stack trace live * see the resulting compiled IL code that any of your code will be compiled into live right there in the UI (awesome feature)
You can paste XML or JSON into an empty class file and it will create a class structure to match the data. I guess that is more a VS feature than a C# feature, but it saves a lot of typing either way.
Exactly. With .NET Core projects, it's really common to type some code that you know off by heart, or copy some code from another project you have, and not have the package for it. Now, you can either go searching NuGet for that reference, or VS can now do the whole thing for you :D
F1 is the first stop when applicable. Then Google... looking for results in Stack overflow Then results from anything that looks vaguely related Then a question on SO or Reddit Here is a lot of good general information https://msdn.microsoft.com/en-us/library/618ayhy6.aspx This is good for less technical explainations https://docs.microsoft.com/en-us/dotnet/articles/csharp/ This one is pretty good https://docs.microsoft.com/en-us/dotnet/articles/csharp/tour-of-csharp/index 
well... [awesome-LINQ](https://github.com/aloisdg/awesome-linq)
If you consider EF your data layer, then referencing EF is the same thing as creating your own data layer on top of EF and referencing that instead. What have you achieved?
Well it has to be referenced somewhere right? For me, I would say, that my Service, Web and API project does not have any reference to EF or data access related libraries. Everything is contained in the Data project and operations on database is exposed through Repo and UoW. Isn't that the point of separation of concerns?
Ok. I understand now what you are saying. But lets say tomorrow I decide to change my ORM of choice from EF to Dapper. Wouldn't I have to then refactor all my projects that has reference to DbContext and other EF related libs? If it was contained in one project then that reduced my refactoring effort.
I wasn't on the team, so I can't speak for how exactly it was done or how complex their repository was. &gt;you have no guarantee that everything will still work at runtime. Unit tests ensure it **should** work, integration tests ensure it **does** work. They had (i believe) 86% code coverage on the project when they started removing EF. &gt;then you have to rewrite all your code in your repositories That is what they did. That was the point. The conversation is between A) using EF directly in your domain layer and B) building an abstraction layer between your domain and EF. To remove EF all you have to do is rewrite your repository and not your domain layer. Edit: To be clear, it was still a lot of work. If you replace EF with something else you are going to rewrite your data access code regardless of what you do. The difference here is your domain layer remains untouched, which is impossible if you are using EF directly
Workloads -&gt; Windows -&gt; .NET desktop development "Build WPF [...] applications using the .NET framework"
Why would you switch from EF to Dapper? If you abstract them so much that you can swap one with the other without any impact on the code that would use your abstraction, then you have created another ORM that doesn't have a contract bound to EF or Dapper. If you have done so, then it means that: 1. You are not using either EF or Dapper at their real potential which is how they are meant to be used. 2. Because of #1 it doesn't make sense to replace one with another. 3. It is very unlikely that yours will be better or at least as well designed and tested as EF or Dapper.
[MSFT shuts down CodePlex](https://aka.ms/codeplex-announcement). Which is a real shame because I find SVN superior for async-distributed development due to svn:extenals (no true match in Git). Well, gotta do what those big managers push... I host(ed) many C++ projects there.
http://imgur.com/a/G8XW3
That 1 day figure included getting the new DB code written and working :) When you have thousands of unit tests and integration tests to tell you when something is working correctly or not it makes life easy
Removed: Rule 3, Rule 6, Rule 7.
I'm actually kind of surprised they were still letting you create new projects. That said, announcements like this shouldn't be published on 3/31 as folks on the other side of the date line may assume it's an April Fool's Joke. If it were, it would be a colossally bad one as it would probably become a self fulfilling prophecy.
Not really news worthy, it passively shut down a long time ago from the user standpoint since no one bothered with it.
[Here](https://www.youtube.com/watch?v=pSiIHe2uZ2w)
Seems you're caught in the middle between small desktop resolution and iPad. There should now be a menu toggle at the top you can use to collapse the menu.
aight I'll look into that, do you think that would be the easiest way?
Good idea, I need fairly quick replies if I get caught up and that might be the way to go
Anyone else concerned that code is being centralized on GitHub? Don't get me wrong - I love their product and they do things really well, but it's sort of an "all your eggs in one basket" thing right now. The tradeoff seemingly being greater collaboration / social features over decentralization.
Good reply. I am not sure if my approach is any good since I code in C# only in my freetime but I usually do: 1.) Official MSDN or reading the Ecma/C# Specifications (PDF) When it comes to learning about the syntax / grammer details about the languages and 2.) Reading the code here https://github.com/dotnet/corefx to see how more experienced developers would do it. If I'm not sure. I 've found reading tutorials is nice but you soon get stuck when you don't have access to tutorials or you need to know more than the available tutorials provide. Once you know the ins and out of a language spec then it's a lot easier to actually use the provided libraries.
Don't forget to actually remove the very last " " otherwise you end up having random sentences like "i am truly alive " which is probably wrong and not what you would like. You really should use string.Join()
Club penguin strikes again
Shouldn't secrets like those be kept outside of source control?
Finished. Wasn't too difficult :)
Sure, why not. C#/WPF dev of 7 years. I know very little about ASP.NET and web services. Everything else im quite fluent.
haha appreciate it but I finished the test. It wasn't too hard. Although now I kind of wish I would've waited a little longer lol
There was an [article recently advocating modules before microservices](https://www.oreilly.com/ideas/modules-vs-microservices) which caused [some good discussion on HackerNews](https://news.ycombinator.com/item?id=13960107). Whether you agree or not with the article is up to you, but I think it can be an enlightening read either way.
Yes.
&gt; Using your favorite .NET programming language... Lol. 
GitLab? 
It's a web application 
I know man I've been trying for like 6 hours :( I actually tried the first one you linked but keep getting stuck. If I can pay for someone's hour of time it's really gonna benefit my future when I show this to my boss :P
I've used very little Ajax with PHP to data-bind and send success messages to the browser. I'm only a Jr. App Dev Intern about to receive an offer at work. I wanted to take on this project this weekend to really impress them, unfortunately I got stuck on cascading (why I'm asking for some guidance here). I don't think for this particular project postback is the biggest issue, it shouldn't return more than 50 results at max anyways.
Yeah it's not showing for me yet, maybe it'll pop up. Reddit has been very weird for messages today I've noticed
Well, it's git. So, no, not really.
https://mega.nz/
If you end up wanting to run in a Windows OS, most people I know use a VM or parallels I think. Bootcamp is also an option.
Any technical detail, specification, is welcome
Well then I bet there would be no problem to do the same thing if the queries were in the service layer.
Sorry to be so vague. I essentially want to hook up a mini pc to a Point of Sale system at a cafe I work at. What I want to do is grab the details of every sale to the mini pc, so I can record the amount of items being sold and what exactly is being sold.
Git isn't remotely as important as the bug tracker and wiki.
OK thanks
I didn't see the post until April 1 in my time zone (because sleep) so even though it's 17+ hours old at this point, I did think it was an April Fool's joke.
"It's not as bad"... but it's still bad if that source control repo is the same one as the code is in. If it's a separate repo with separate security groups, then it's a little bit of a different story, but it's still plain text. If also you encrypted them separately, then it's starting to be ok.
When a secret is in the common source repo, even a private one, you simply can't control the retention of that secret. It does happen in the real world that people get pissed off and quit or they get fired. Meanwhile, they've made copies of your source code to a USB drive (or just printed/written the key bits on paper). They were expecting to quit or be fired, so they were prepared for this weeks in advance. That's not hypothetical. I've seen it happen. Ultimately, there always ends up being a couple of people that you do have to trust, but don't open to everyone.
I know that but strongly typed is not well defined even then AND is often misused instead of statically typed. First of all strong vs weak typing is not a Boolean but a slider. You can be more strongly typed (for example F# has stronger type system than C# but both are considered strongly typed). In addition there are different kinds of strong typing and C is weakly typed in different way than JavaScript. For example C is weakly typed because you can treat an array of 4 bools as an int but this is different from JavaScript's weak typing which can change the shape of the object (implicit conversions being another form of weak typing).
No, it's not. It's [easily available](http://github-backup.branchable.com/README/) and maybe should be part of maintenance for any project. 
https://youtu.be/cFQ5yGT4LTU
&gt;[**Cascading dropdown asp.net Part 22 [36:47]**](http://youtu.be/cFQ5yGT4LTU) &gt;&gt;Text version of the video &gt; [*^kudvenkat*](https://www.youtube.com/channel/UCCTVrRB5KpIiK6V2GGVsR1Q) ^in ^Education &gt;*^104,059 ^views ^since ^Nov ^2012* [^bot ^info](/r/youtubefactsbot/wiki/index)
get used to this feeling you will continue to feel that you do not know anything even after you have a couple years under your belt. the most important thing to learn in your CS program is how to research your problem, think of solutions, and finally how to put it all together. if you only took C++ a while ago it would be just as good for you to start from the beginning. do simple programs like a "hello world" project, and slowly build up your knowledge from there. computer science is not a field where you can immediately understand the big picture. you will need to slowly but steadily build your knowledge and never stop or let thoughts like this slow you down or stop you in your tracks.
It's a matter of how many people have access to those keys. If you're decoupling secrets from source code (such as by merging configuration files during deploy or keeping secrets in a windows registry or using the service principle to govern access), then it's a lot easier to manage. For audited firms, this can actually be a requirement for some systems as part of their accounting controls, so it's not just a nice to have.
You'll be fine, just study and practice. When you get really good, you'll still find subjects that are over your head. Then you'll figure it out and move on to the next challenge.
Look up the imposter syndrome. It doesn't go away per say. You just get better at solving problems. I have been programming professionally for 2 years after my programming in school and still feel like that. C# is a beautiful language and once you get the general gist of the basic, you will have fun. Stick to it
&gt;Get used to this feeling. Yep. Just as a programmer in general, it's a pretty normal occasion to have no idea how something works, as you get shuffled around into new projects and working in new languages. A programmers job is to "figure it out."
Programming is just about the only high skill 'thing' in the world, where no-one will say that, because we're all constantly going through the same self-doubt and roadblocks as each other. Learn to research your problems, and don't be afraid to ask when you feel you're going in circles.
Exactly, unless the type is not obvious, you should defaultly use var.
"weenie". I love that word :\^) alt+up/down (moves the selected code up/down - very useful!). Ctrl k + ctrl k for auto formatting. Ctrl u to uncomment chunks, ctrl c to comment chunks. The immediate window is very useful when you want to check out some things. For example, maybe you have a List&lt;SomeType&gt; and want to check a particular item's values, or all of them? In the immediate window you could do: someTypeList.Select(t =&gt; new {t.Name}); And the immediate window would show you the value of Name (for each of the items in someTypeList, which is represented by t). A nice extension for VS is viasfora, I definitely recommend it! 
Running an experiment right now where I allow someone to abuse their power to enforce their idealistic and radical views.
I can't think of advice as it relates to school. What I can do is give you a solid suggestion for learning c# world as it is today and how to understand it better. Build a solution and put it up on github doesn't even have to be about anything. Build a NetStandard 1.6 or so Class library and pack it on nuget. build a NetAppCore 1.1 project in it for a web page learn any single Single Page Application framework (Aurelia, Angular 2, React). Then another for a MiddleWare Service (I would suggest a token provider for you apps authentication). Then get a raspberry pi and load windows 10 IoT on it and build an app for it in Windows Universal. make all these use your nuget class library you first made. If you accomplish this line of stuff your in a very good place. also any one of these get it to connect to a data provider SQL or NoSql
Yea. It's a confusing mess.
Okay, lots of things to google hahaha.
Oh I just saw the moderator list. :p
I still feel this way 7 years in lol try /r/learncsharp to get started.
Yeah, like 80% of early coding is googling how to do stuff lol, everyone feels that way at the start
Typical Microsoft messaging
Programming in and of itself is incredibly esoteric. You'll feel like you made the wrong choice and feel lost for around a year of hard work, then you'll come out the other side with a good set of skills, fundamentals, and knowledge, and a bit more confidence.
Very well described.
I've tinkering on a couple things this past month or so... My xamarin/WPF "Seizure Tracker" project which had been essentially a glorified voice recorder prior to xamarin's acquisition was at a "finished" state (due to the free license size limits) - now features a much better android UI/feature set and a (*very* basic) F# asp.net core REST API. edit: not april 1 anymore :)
I _HATE_ navigation buttons. I constantly hit them. Hell, when I'm hovering over the mouse watching a YouTube video I constantly right-click for some reason. I'm annoying to myself.
Heh, yes. I actually wrote into our coding standards to do just this, but I didn't want to explain two things at once. Then again, it's so worthwhile it would have probably been worth it on second though. Thanks.
For many years I programmed in object pascal which supports this feature. IMO the main advantage of a local function is that it has access to all the variables declared before it. Making due with a private method would entail declaring and passing potentially tons of arguments. Hopefully the C# version has the same scoping rules otherwise I wouldn't see much point to it.
if you want any suggestions or need advice on a specific repo let me know.
Just curious, can you provide an example of that? Haven't encountered anything like that but I'll admit my experience with local functions is slim
Yes, it does. It's pretty cool in that respect because if you don't assign it to a Delegate it does it without creating a closure object.
Honestly i think none of those are extremely necessary, especially for a beginner. hes like a first semester student. build a website, build an api, and go from there. 
honestly, it can be overwhelming at first, but you're not really expected to know all of that until you get deeper into the programming world. I can provide some brief ELI5 answers for you though. * Programs/Applications - Any piece of code that you write that can be run/executed. * Class - Mostly every piece of code that you write needs to be inside a "class." It's basically a way to group data together. For instance, you can have a class called "Person." Inside the person class, you could hold data for that "person," such as their age, gender, skin tone, etc. * Members - These would be the attributes inside the "Person" class, like Age, Gender, Skin Tone.... * Types - Any non-static class that you create. e.g. the "Person" class. * Instances/Objects - Basically anytime you create a new instance of a class, like the Person class. e.g. "Person **myGuy** = new Person();" * Namespaces - Just a way to group multiple classes together. * Interfaces - These define what members a class needs to have inside it. If the class doesn't include all of the members inside the interface, the code wont compile. 
^^ THIS makes complete sense to me. The whole person example is perfect.
This is all over-simplification, but here's how it makes sense in my head. Programs (and DLL's) are assemblies. Think of an assembly like a container full of namespaces. A namespace is a container full of related classes. For example, the system.IO namespace only has classes in it which are designed to work with directories and files and streams. General IO. A class is a container of variables and functions. They should all be very closely related. For example, in the File class you have Open and Delete functions. These are very closely related. But you wouldn't have a function like File.OpenNetworkStream() because file and network IO are totally different. When you write your own classes, keep this in mind. In C# parlance, functions are called methods. So your class "members" are the variables, properties and methods within. Properties were new to me. From the outside of the class, a property looks mostly like a variable. But on the inside, a property can have code associated with getting, and setting the value. So you can add logic around reading and writing the value like synchronization or range limits etc. Interfaces are cool, but as a beginner you may not dabble much in creating them. If you hear "code contract", that's a bit like what an interface is. They are typically prefixed with a capital I, though it's technically not required. Commonly used built-in interfaces include IDisposable, IEnumerable and IComparable for example. An interface declaration basically says, anyone (any class) claiming to implement the this interface, MUST have the following methods. You can then write code which expects an interface instead of a very specific object. This makes your code more "loosely coupled" because your not relying on a very specific type of object. It's very hard to see the advantages as a beginner, but in one recent​ example I decided to rewrite one of my classes from scratch and call it "Table2" because I was lazy. After rewriting it, I had to update a TON of references to "Table" so that they referenced Table2. The methods were the same, but Table is NOT Table2. What I could have done was define an interface called "ITable' with Open, Read, Write and Close methods for example. Then update my code to expect an ITable object. Then I could pass any object I want into it, as long as it "implements" the interface. I never have to update references again if I happen to rewrite my Table object. 
Doesn't render well on Pixel XL either http://imgur.com/DVCGVz4
Value tuples make sense when you need the performance or are writing script and don't want to be bothered with creating types that are used in only one place. Local functions... I think most people are going to be unpleasantly surprised when they turn out to be no different than anonymous functions in everyday use.
I use the new tuples all the time. They are amazing. Remember you don't have to use all of a language.
we hit an issue with xunit after updating 2017 this week. didn't catch what the specific issue was, but you might want to 1) get the latest vs update last week, and 2) check if your test framework of choice has an update.
You should take this slowly. When I taught a C# course these concepts were introduced over the course of 5-6 weeks (8 hours per week course with expected 16 hours of homework/study at home but most students did less home study).
c# is a lot to get started, best advice I can give you is to invest in a good tutorial and take it slow. 
Try this https://docs.microsoft.com/en-us/dotnet/articles/csharp/tour-of-csharp/index 
I had similar issue in some unit test assembly were no test was visible anymore in test explorer. After long search to find the reason for this issue I found out that some **assembly binding redirects** in *app.config* where invalid. After removing all bindings missing tests were visible again. I just added these binding redirects back where compiler complained about missing info. Hope you have similar issue...
I completely agree with this. I tried learning c# the hard way. I would Google how to do something and copy paste it into my code. A lot of vocab people used was unknown to me so I would skip those answers. After taking a tutorial, all the vocab terms made sense and everything started to come together. 
I started going through that yesterday, but that's where I started getting hung up -- it's starting to make sense now, thank you!
I think the most important difference with anonymous functions is overlooked: Local functions are not anonymous. You can give a meaningful name to them. 
You're absolutely right -- I'm currently taking the Udemy course "Learn to Code by Making Games - Complete C# Unity course, and I'm about 16% in -- as I'm working through the C# stuff, I realize it's going to take a lot for me to learn to be a great coder. That's why I've started to dig into C# in parallel, but it probably makes a lot of sense for me to finish this course and then jump to a straight up C# course. 
Thank you so much for taking the time to write -- it's definitely not an oversimplification for where I'm at. :) I got down to the line "In C# parlance, functions are called methods. So your class "members" are the variables, properties and methods within.", and I understood everything to that point. Anything below that and I feel lost, but I'm going to save all this and come back to it as I continue to learn! I'll keep working until I follow all of it!
This is exactly where I'm heading next after I finish my Udemy course (Learn to code by making games - complete C# Unity course) -- any beginner courses that you can recommend that helped you? I really love the Udemy course I'm taking, and it's really great so far -- but I know I'm going to want to really push to master C# in order to be able to do what I want to do. I will focus exclusively on C# after I finish this course.
For every language feature there exists some hell showcasing its abuse. I've seen some gnarly infernos constructed with generics and lambdas for instance but I would never blame the language. Local functions have a lot of handy uses especially when combined with Linq. We shouldn't let the bad programmers ruin it for everybody.
Think of interfaces like outlets. There are 2 slots, a round hole, and 120 volts. (in the US ). But the actual construction of the outlet is left up to the manufacturer. There us a specification the manufacturer as to follow. Interfaces are analagous to a specification, it defines the what but not the how. 
I've seen different definitions of the "service layer" before, so I'm going to use this SO post as reference to how I've worked with service layers before http://stackoverflow.com/questions/7741636/service-layer-vs-business-layer-differences Basically, your business logic is the only thing that should make calls to your DAL. Even if you are treating EF as a pre-built repository and are using EF directly in your business logic, it will go in your domain layer. Your service layer calls your domain layer, and doesn't know anything about EF. 
Good answer; this seems to be true for many (if not most) of the reflection calls in later versions of .Net. The engine behind the platform I develop at work is highly reflection-based; initial calls to methods like GetType () and Activator.CreateInstance() run up to 100 or more milliseconds, whereas subsequent calls register 1 or fewer milliseconds. 
VERY helpful, I get it, thank you!!!!
I don't think learning to code by making games is a good idea. It makes sense after you spend 2-3 months learning the language and solving demo problems in console applications. Of course I mean absolute beginners. It is a great way for e second step.
I cleaned it up a bit. Field is slightly faster than Field or Prop. You have to do the first property lookup outside of the timing code. Also, stopwatch isn't very granular...you should always do all the work for one type of thing inside of a loop and capture the timing on the whole thing. Adding individual invocations up will be less accurate and take longer to complete for no reason. Also, you are mostly testing allocation time. There is no reason you need to allocate test objects on each trial run...that will make your test less accurate when the GC runs at random times through your testing code. -Edit- If you are considering how to do dynamic property accessing in a production codebase, I would recommend looking at the library FastMember if you need to look up values of arbitrarily named properties and just using dynamic in cases where the name of the property and its type will be consistent. Both (I think) will be easier to understand, use, and faster than reflection, especially in cases where you use inheritance or complex generic objects. namespace ConsoleApp1 { class Program { static void Main(string[] args) { var t = new TestThing(); t.Run(); Console.ReadKey(); } } public class ObjToWeigh { public int Metric1; public int Metric2; public int Metric3; public ObjToWeigh(int m1, int m2, int m3) { Metric1 = m1; Metric2 = m2; Metric3 = m3; } } public class TestThing { public void Run() { int trialCount = 100; int objsCount = 500000; Stopwatch stopwatch_NoReflection = new Stopwatch(); TimeSpan totalTime_NoReflection = new TimeSpan(); Stopwatch stopwatch_Field = new Stopwatch(); TimeSpan totalTime_Field = new TimeSpan(); Stopwatch stopwatch_Field_or_Property = new Stopwatch(); TimeSpan totalTime_Field_or_Property = new TimeSpan(); var rng = new Random(); List&lt;ObjToWeigh&gt; objs = new List&lt;ObjToWeigh&gt;(); for (int z = 0; z &lt; objsCount; z++) objs.Add(new ObjToWeigh(rng.Next(200), rng.Next(200), rng.Next(200))); int w; //Ensure reflection has looked it up once to avoid first hit / caching cost var propInfo = typeof(ObjToWeigh).GetProperty("Metric1"); var fieldInfo = typeof(ObjToWeigh).GetField("Metric1"); stopwatch_NoReflection.Start(); for (int i = 0; i &lt;= trialCount; i++) { w = totalWeight(objs); } stopwatch_NoReflection.Stop(); stopwatch_Field.Start(); for (int i = 0; i &lt; trialCount; i++) { w = totalWeightByField(objs, "Metric1"); } stopwatch_Field.Stop(); stopwatch_Field_or_Property.Start(); for (int i = 0; i &lt; trialCount; i++) { w = totalWeightByField_or_Prop(objs, "Metric1"); } stopwatch_Field_or_Property.Stop(); Console.WriteLine("No Reflection: " + stopwatch_NoReflection.Elapsed.TotalMilliseconds); Console.WriteLine("Field: " + stopwatch_Field.Elapsed.TotalMilliseconds); Console.WriteLine("Field or Prop: " + stopwatch_Field_or_Property.Elapsed.TotalMilliseconds); } int totalWeight(List&lt;ObjToWeigh&gt; objs) { int tot = 0; foreach (var o in objs) tot += o.Metric1; return tot; } int totalWeightByField_or_Prop(List&lt;ObjToWeigh&gt; objs, String propName) { var propInfo = typeof(ObjToWeigh).GetProperty(propName); var fieldInfo = typeof(ObjToWeigh).GetField(propName); if (propInfo == null &amp;&amp; fieldInfo == null) throw new Exception($"Invalid property {propName}"); int tot = 0; foreach (var o in objs) { if (propInfo != null) tot += (int)propInfo.GetValue(o); else tot += (int)fieldInfo.GetValue(o); } return tot; } int totalWeightByField(List&lt;ObjToWeigh&gt; objs, String propName) { var fieldInfo = typeof(ObjToWeigh).GetField(propName); if (fieldInfo == null) throw new Exception($"Invalid field {propName}"); int tot = 0; foreach (var o in objs) { tot += (int)fieldInfo.GetValue(o); } return tot; } } }
Yeah, that seems like a horrible idea ;)
This is the only real answer for the time being. Rider will be great, but even then it will take a while for corporate employers to catch up. Visual Studio on Windows is the only thing going right now. Parallels is great. I've been using since tech school. In coherence mode, you're running OSX and Win10 side by side seamlessly. Best of both worlds, until Rider is perfect and accepted as a viable choice int he enterprise world.
Well, my problem is I kept trying to import Swagger2Markup in Eclipse and it wouldn't import correctly. Then I figured out for some reason it was importing into the wrong package (java.io.swagger2markup.* instead of io.swagger2markup.*). No idea why... :(
And don't forget about the event system where - correct me here if I got this wrong, it's been a while, but - you have to add a new instance of a class as an event handler. Who thought that was a good idea?
It's been at least 4 or 5 years since I last programmed in Java, but I don't remember it even having events. Didn't it have just a really annoying implementation of the observable pattern instead? 
In Android at least you usually have anonymous classes which implement an interface as a callback. However Android Studio does a good job of formatting them so they appear as lambdas (which have been introduced in Java 8), and I also use Butterknife a lot which makes event handling more similar to C# (though with annotations instead of `+=`).
The worst thing for me is just how developer-hostile it feels, but also how a lot of the time you have to get the IDE to do what you want for you because the language requires you to be so verbose. For instance, I usually just write a set of private fields then tell IntelliJ to turn them into getters and (maybe) setters, which is still more work than writing `prop -&gt; [Tab] -&gt; fill in the blanks`, etc. Generics at least seem to be less restrictive, which is good I suppose since in C# if you want a class with optional type parameters you have to write more than one version of the class, rather than just being able to specify `Void` as a parameter. Java 8 at least looks partially 'modern', but there will still be a lot of legacy code out there that will never die.
I've programmed in both. Java has more and better data structures. It also has some really good 3rd party libraries that are fairly ubiquitous like Google Guava.. allowing you to easily create caches and various other goodies that I use for web-services frequently. It supports lambdas now, with the stream syntax, which is less intuitive than C#'s extension methods + lambdas, but is also powerful in a different way (more like map-reduce). Some people like Lombok.. which can autogenerate getters/setters for you, but I personally do not prefer to take a compile time dependency + plugin for what my IDE can auto-generate in a few keystrokes using plain Java. C# has added more and more and more and more features with 4, 5, 6, 7, etc.. that it's now becoming somewhat of a mess. Sure, it's great for good programmers like you and I maybe, but what about the beginner? Isn't the addition of many different language features confusing? 
Do you have a Java IDE to recommend? I'm wrestling with Eclipse here. :(
IntelliJ Idea is my favorite, it is made by the people who make Resharper 
while TDD do you guys write one test and then code for that one class or write many tests and then start working on classes ?
Coursera has a great C# course that just started and is self paced. It specifically ties in with games but does a great job of explaining the basics.
It's usually per user story or task or ticket or whatever metric your team used to manage work items
It's one test and than work to make it green. But the real professional struggle is what you should test and what to leave out. But for beginners: better test more than less. And if it's hard to test you may do something wrong. 
According to the test driven devleopment theory you do: - Write the test. It will fail. - Make the test pass by writing the code. - Refactor the code. - Refactor the tests. - Repeat. So yes, you'd first write the tests. That requires you do understand the task. You must place thoughts into a potential solution before writing any code.
Yes, that's the nice part. They are also (potentially) a bit more optimized to call. That goes away if you use them as a delegate, though.
&gt; class has 1 public function That seems needlessly restrictive to me and will just lead to the creation of a lot of artificially divided classes.
Neither is Git, that's just revision tracking of files.
Java is the language you pick when you're tired of innovating and having nice solutions and would just like to be told what to do. There's a "Java way" to do everything. It's not the best or most efficient way, it's just "the way things are done" and you're not meant to question it. It is the language where hope and creativity goes to die. I often say that I try and be quite open about what languages and frameworks I use, preferring to choose the right tool for the job... but I am adamant that Java is never the right tool for any job. It doesn't have a place in the modern world and "micro services in Java" is an oxymoron if I've ever heard one. Source: just came off an 8 month project where the client insisted on a microservices architecture in Java. And no, we weren't allowed to use Cloujure.
The most important thing is just start going :) Don't be afraid, do simple things at first and eventually you'll get bored of them and learn more and more about programming. Try to think of a project you'd be interested in creating (preferably a simple one for starters) and keep going from there.
I learned programming in Java but am a C# dev now. The only way I can work in the Java world is with Kotlin :-)
Didn't know that thanks! 
Mono doesn't implement WPF :( http://www.mono-project.com/docs/gui/wpf/
&gt; Mapping is not the responsibility of the repository. It’s the responsibility of your controllers. (/me furrows brow) I'd say it's the responsibility of the service (whether an application service or a domain service) called by the controller. Putting business logic in the controller makes it harder to reuse and refactor. Aside from that, nice article!
I bought the 12 inch Macbook with 256gb of storage before I started doing any programing. One of the worst decisions I ever made :'( 
&gt; what about the beginner? Isn't the addition of many different language features confusing? It can be, especially with C#'s emphasis on not breaking existing code. While I'm pretty sure that is, actually, on the language design group's list of concerns, I'm not sure how easily one can assess that without being a beginner (which one can only do once, really). I think, for most purposes, we're still in a position where the platform is a bigger hurdle than the language.
I do sometimes wish for the ability to implement an interface with an anonymous class. Not often, but once in a while. OTOH, I also find myself wishing for the ability to drop (static) methods and private types in a namespace or module. Otherwise, I last touched Java a decade ago (and hadn't done any serious development in it, then), and haven't missed it, though I think my frustrations were at least as much about the toolchain of the day as the language itself.
You cud try Xamarian forms, I doubt your class would accept that.
Huh? We're talking about *what* you put into revision tracking...
Yeah, it seems to me at least that the real problem is that IQueryable even implements IEnumerable when the implicit conversion is so *violent*. I guess IEnumerable can always have nasty performance, but people get so used to using it on List, Array or Dictionary that it's easy to forget how few guarantees the interface makes.