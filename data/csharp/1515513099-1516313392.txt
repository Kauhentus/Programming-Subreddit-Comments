Logitech Anywhere MX. I have the old model with batteries, I think the new one (2S) is rechargeable via USB. Comfortable, accurate, good battery life and can toggle scroll wheel between free spinning (fast over large areas) and click (precise) modes. It has stood up well to travel and being carried daily in a ruck. It is a smaller model (I just rest my fingers on it) so if you prefer to rest your palm, then you should probably look for a different model.
Thanks for info. Honest question: is there a way to link to a book that would be allowed? Is it about reputability of publisher, author, or the test is simply "only free content"?
",ac" is also a cool feature! Don't know if they can be combined, need to check... but if there are no side effects there's no reason why the expression shouldn't be refreshed
I am referring to scenarios where you cannot start the app in debug mode, or you do not have a chance to attach a debugger in time, say debug application_start in iis or window service onstart event. Or in situations where if you place a break point it will be hit needlessly too many times, instead it would be quicker to do something like : `if(myDebuggingCondition){Debugger.Launch();}` 
I actually have that book bookmarked for further reading! Good to know it's worthwhile. Thanks for the answer on serialization. I'm still new to it, but I wanted to make sure there weren't crippling differences I should be aware of. I assume that JSON is more readable, whereas Serializable looks like gibberish with English mixed in.
[removed]
Try to make it about inspiring good discussion. Just linking to a book with a "buy" button may as well be an advertisement. There is no rule about "only free content". If the intent is purely to push/advertise a product, especially a commercial product, then it may be removed. If it's about a free tool or library, there is more leniency, especially if it spurs discussion, but not guaranteed. Often a user's post history is considered; if they're active and not primarily promoting their own content, there's usually much more leniency. But as is, a post just titled with the book title and linking to the product/purchase page is not acceptable.
can you suggest some really good ones?
* Programmer101_TakeScreenShot: *failed* * CellPhone_TakeScreenShot: *failed* CellPhoneTests.cs: [TestClass] public class CellPhoneTests { [TestMethod] public void CellPhone_TakeScreenShot() { Assert.Fail("Never take a screen shot with your cell phone."); } }
Whops, my bad, posted that answer on mobile and the wrong branch selected, it should be fixed now 😄
I figured that was the case. Thanks!! 😺
Honestly, designing the inventory system with "client side prediction" to compensate for a delay may be considered premature optimization. With that said, I understand what you are trying to do. I prefer the idea of sending a message to the server saying "player added this item to inventory", the server validating it, and then sending an update to the player's inventory that says "add this item to inventory". This keeps data synchronized but it doesn't address your concern of that delay. So, what about a possible middle ground? When a player adds the item to the inventory, the client does add it so that it is immediately *visible*. However, until it is validated by the server, it is disabled and the user can't interact with it. Once the "add item to inventory" message appears, your logic can say "if item already exists in inventory, enable it. if it doesn't exist, add it and enable it". If it fails validation, a message should be sent to remove the item from the inventory. If it happens fast enough, the player may never see it or they may see a flicker. This way, it is immediately visible but not immediately usable. The only time it would affect the player is if the delay from the server is long enough that they actually have time to interact with it after adding it. If your delay is that long, your server is having issues or their internet simply sucks. The bottom line is that data synchronization is an absolute *must*. Any logic acting on a player's items would have to check if the item was validated, probably via a boolean property named "Enabled" or "Validated" or "Synchronized" or "Dirty", with the last one having to be false in order to interact with the item. Edit: I should also mention that I've played WoW and have seen items take a noticeable amount of time to be added to my inventory, usually via looting or grabbing the items from the mailbox. This leads me to believe WoW uses the way I prefer where no item is added to the inventory until the server says so, period.
&gt; Honestly, designing the inventory system with "client side prediction" to compensate for a delay may be considered premature optimization. With that said, I understand what you are trying to do. &gt; &gt; I prefer the idea of sending a message to the server saying "player added this item to inventory", the server validating it, and then sending an update to the player's inventory that says "add this item to inventory". This keeps data synchronized but it doesn't address your concern of that delay. Oh, I'm not concerned about the delay at all, and client side prediction is the least of my concern; even though it's a bit extra hassle for me, it's only _the cheaters who_ will experience any delay. Example: they will send a `Craft` instruction to the server, and the crafting starts on their side (visually), but the crafting will end unsuccessfully after 100 ms (or whatever the lag is) when they get a reply back from the server; "sorry, can't do that." All the non-cheating players - the majority, I hope, haha - won't experience any delay, of course. &gt; So, what about a possible middle ground? When a player adds the item to the inventory, the client does add it so that it is immediately visible. However, until it is validated by the server, it is disabled and the user can't interact with it. Once the "add item to inventory" message appears, your logic can say "if item already exists in inventory, enable it. if it doesn't exist, add it and enable it". This _is_ (almost) client side prediction, and that is the least of my concerns; that's quite easy, and I have it already for running around and for shooting etc. What would happen in your example, in extreme circumstances, is that the _local_ client would be able to give (by cheating) its own player a gun, and shoot it, but as all the "giving guns out and shooting it" really happens on the server, none of the other objects in the game knows anything about it (or get hit). I'm more about the "layers" as I have explained, not the networking part; I've sorted that out. But I'm looking out for possible future expansions where I need to handle the player inventory differently than today, yet keeping most of the basic functionality. My previous post about using interfaces correctly, which I linked to, has helped me a lot with that as well.
maybe extend for multithreaded scenarios?
I already commented but I read your other post you linked and have a possible solution for you but it will change your architecture. Use Unity's API for inspiration and create your own framework/engine. I am currently doing that and I am streaming my development on twitch. Basically, I made a `GameObject` class that has a collection of `GameObjectComponent`. Each component has a reference to its game object. Components can retrieve other components via the `GameObject.GetComponents&lt;TComponent&gt;()` method where TComponent is a GameObjectComponent. I am only ever drawing and updating these components. If components should interact, the implementation of those components will do it. This allows things like a `SpriteRenderer` component that i can easily attach to a game object if it has a texture and animation that should be drawn or updated. It also allows a `NetworkComponent` component that can send and receive messages from the server. This component can act as a `pubsub` where subscribers can subscribe to certain messages. They will receive these messages when the network comp. "publishes" one, probably after it receives a message from the server. Following Unity, there will also be a `Transform` component that all game objects will have that will contain data like location, scale, rotation, etc. Components can use that transform to render things in the right location or trigger certain events (like picking up items if the player walked over an item). The `Component` pattern allows you to design game objects "a la carte" by mixing and matching what components go with what game object. Unity uses this pattern as well as WinForms. A player game object may have `Transform, PlayerInventory, NetworkModule, SpriteRenderer, RigidBody, and PlayerMovementScript` components, for example.
If we’re not talking too too many times, conditional breakpoints are a decent alternative. They can get pretty slow though. But debugger launch is great for not just things like windows services, but also to start without debugging in release mode in order to view the compiled assembly code for a function.
 Why would you not be able to debug the start of an application? https://weblog.west-wind.com/posts/2011/Dec/15/Debugging-ApplicationStart-and-Module-Initialization-with-IIS-and-Visual-Studio And in multi-threaded situations, open the threads window and pause for all threads you don't want it to debug in. If you're debugging a service, just create a new instance of the service and break on entry. https://www.codeproject.com/Tips/261190/How-to-Debug-or-Test-your-Windows-Service-Without
Not every IIS app runs the same in Cassani. Not just that, there are times when you have no control over when will the app start. Assume you are debugging an app domain of web services that serve as ajax calls for another web-ui app domain. You start in the UI but the ajax app domain may not be started until the first call is made and sometimes that's what you wanna debug. I dunno what's not obvious about scenarios where you have no control over starting the debugger ?! they do exist specially if you are doing SOA or maybe EDA programming.
 That's the point - you can START any app to run in debugger, that is the point of all of the above, you would start the ajax app domain in debug, and debug the start Feel free to give any minimum example of anything that "you can't start something in debug", and I will give you an example of how you can https://i.imgur.com/bX6v4Il.png
&gt; Use Unity's API for inspiration and create your own framework/engine. Hmm. Did I mention Unity? I guess I did; that's where I will be using this. But the reason I post this here, instead of in /r/Unity3D, is because I feel there's less "shortcut thinking" here, while there's a lot more "just do it already!!!" thinking in /r/Unity3D. And, honestly, I understand both points of views: make things work, improve later. But I'm quite new to C#, not programming in general, and I have a love for "architectural" design that can evolve, so that in three years time I can look back at something and say "I wrote that!" instead of saying "I rewrote that! Four times!". :) I don't want to go into a war of any kind, but I'm uncomfortable with how Unity users solve things and how the Unity team presents their "script backend" and documentation as "this is how programming should be done". If prefer to uncouple certains parts of my application from the "main application" so that I can - surprise! - couple other applications into part of my first application. It gives me freedom. It gives me more time to spend on my - ehrm - C# game programming spare time. :) But it's mostly for learning. &gt; The Component pattern allows you to design game objects "a la carte" by mixing and matching what components go with what game object. Unity uses this pattern as well as WinForms. I wouldn't compare those two, because I have _no_ familarity with WinForms, but I almost _despise_ Unity's approach to solving things. Most of the "helpers" they have in there, like `GetComponent&lt;&gt;()` etc., are really nice to have, but when moving into to the UNET world my head exploded so much I moved on to looking at [lidgren](https://github.com/lidgren/lidgren-network-gen3) and [LiteNetLib](https://github.com/RevenantX/LiteNetLib) instead. (I know UNET has a low-level API, but I don't fancy that either.) Either way, this is outside the scope of my architectural "problem" (if there is one). Since I wrote the original post, I managed to hack together a nasty little `NetworkServerEventManager`, which clients can subscribe to; `NetworkServerEventManager.OnInventoryChanged` etc., but given the amount of data being transferred at the moment, I need to rethink things. :-/ Am I looking for a server authoritative LMVC - Lag-MVC :) - of some sorts? **EDIT:** The `NetworkServerEventManager` was a horrible idea; sends data on one certain channel and on one fixed interval only.
Here's a sneak peek of /r/Unity3D using the [top posts](https://np.reddit.com/r/Unity3D/top/?sort=top&amp;t=year) of the year! \#1: [Had this brain fart idea for a twist on the Battle Royal genre](https://gfycat.com/ImaginaryElectricIsabellineshrike) | [659 comments](https://np.reddit.com/r/Unity3D/comments/7dnxnl/had_this_brain_fart_idea_for_a_twist_on_the/) \#2: [I made physics based camera collisions](http://i.imgur.com/Ro8oShT.gifv) | [169 comments](https://np.reddit.com/r/Unity3D/comments/6e0ag5/i_made_physics_based_camera_collisions/) \#3: [Working on volumetric shadows for my water shader](https://gfycat.com/DecentCoordinatedGrison) | [147 comments](https://np.reddit.com/r/Unity3D/comments/6zx13s/working_on_volumetric_shadows_for_my_water_shader/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Of course nothing here is related to C# or .NET itself, but to the Visual Studio IDE.
I did not say it cannot be started in debugger. I said you may have not have control over when it will start. Of course you can go ahead and start it in debugger but: 1- VS web server is not IIS. 2- You setup a slightly different context by changing the order of processes starting up and that could actually matter, If that app domain is configured to start on first call and you go ahead do it in debugger first, yes it may be ok but it's not an identical context to what happens in reality, both app domains can be changing a common resource and the process startup order matters. There is one important thing when you are debugging or troubleshooting a problem is sticking to a context that's as close as possible to what happens in reality; identical if possible. Choosing a different web server running in VS is not what happens in production and could greatly affect the code behavior specially if you are debugging security-related or resource access problem for example. And again there are many areas where a deterministic debug break is not possible or not the best approach, examples: - Browser plugin or extenstion of any context in general such as IIS re-write rules, sql server ssis extessions, and other scenario where the logic you own is instantiated and run by a third party. And yes you can run it in VS with startup debug or any other workaround but that is changing the runtime context significantly. 
Maybe in a future post
&gt; Rather than just using print screen or whatever Or the clipboard...
Removed: Rule 4. Probably most straightforward, if you want to stay in the C#.NET ecosystem, is to check out Xamarin. Especially since they added support for it natively in Visual Studio. https://docs.microsoft.com/en-us/visualstudio/cross-platform/build-apps-with-native-ui-using-xamarin-in-visual-studio https://www.xamarin.com/forms EDIT: Also gives you some possibility for cross-platform compatibility (iOS and the like). EDITx2: And you're right. If you're creating basically a simple forms-like GUI, and not interested in 3D or specialized user interaction, then Unity3D would probably make your life more difficult.
ahh yep, you're right. Apologies! It must be just to be more Algol-like, then.
 If process execution order matters - it is much better to start the debug order in how I would do it than your "it randomly choose when to start when it's called" idea, so that supports what I'm saying. And in my screen shot, that's it running in IIS, without even changing it. Apparently, you can just do it now. Starting it automatically starts it in IIS and starts a debugging context from the application start. Anyway, still haven't posted a minimum example how it would be negative to impact it. This is my last post till then.
Exactly. Code should never be in screenshots. gist, pastebin etc exist for a reason :)
&gt; This solution would however perform very poorly, considering that it takes up twice the space and is twice as slow as the other two I listed before (it needs at least one extra serialization). How important is performance here? And how long does it take to serialize the world and how much space does it take? In my experience, serialization is fairly fast, especially for rarely user-initiated actions (like closing a program, or clicking "save") Also, you may want to ensure that this assumption is true. For example, are your collection orders deterministic? If your world had two languages, "English" and "French", would those always appear in that order, or is it possible to make changes or reserialize backwards as "French" and "English" instead?
A world has only one instance for each module, thus also only one language ("world" here is used a bit improperly; "country" would probably be better). I will apply your question to other things (eg. the phonemes): moving an object back or forward in a list is considered an edit. The user expects the items of any collection to be in the exact order they were inserted in. Furthermore, there is currently no way to move the objects within a list except manually editing each of them, which would definitely count as an edit in any other application. So yes, my assumption holds. As for the other things, I can't tell now how big the resulting file would be or how long it would take to serialize it, since the program is about 5% complete right now. I might use this solution for a while and see how it performs later on. Still you're probably right, it's not like the user opens and closes the program continuously...
Depending on the original value of the cell, the `myformula value` may already include the "=". Try this: if(!myformula.StartsWith("=") { myformula = "=" + myformula; } myrange.Formula = myformula; If you still get errors, then it might be a localization issue.
at a high level your explanation makes sense, but is the symmetric key sent along with the encrypted data (like inside the encrypted data)? How does this robot email recipient know how to decrypt the message? I'm only sending one attachment which is a .aes file as far as the docs explain. I've installed MimeKit and MailKit, it seems solid so far, will just have to spend time in the documentation
Copying an int would implicate a new pointer in the scope of the function.
While Entity Framework doesn't appear to support `Dictionary`, you can probably fake it like this: // I'd use struct, but I don't remember if EF supports those class Ingredient { public Item Item; public int Count; } and then in your Item class, have // Can be IEnumerable instead if you only need to iterate over them public IList&lt;Ingredient&gt; Ingredients; Note: I haven't actually tried this.
Windows services. You cannot F5 out of VS and start debugging an installed service and sometimes you have to debug things that only happen when it's running as a deployed service. You're coming off sounding a like a know it all junior dev.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/latexandloaf] [7 Debugging Techniques you should know in C# .NET](https://www.reddit.com/r/LatexAndLoaf/comments/7pb3ni/7_debugging_techniques_you_should_know_in_c_net/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It's not particularly useful, but there's also no clear benefit to explicitly forbidding it.
Some patterns to help you out: * [Observer pattern](http://www.dofactory.com/net/observer-design-pattern) * [Memento pattern](http://www.dofactory.com/net/memento-design-pattern) A few code snippets that will also help you out: public abstract class ObservableObject : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; public bool Dirty { get; protected set; } public ObservableObject() { PropertyChanged += OnPropertyChanged; } protected virtual void OnPropertyChanged(object sender, PropertyChangedEventArgs e) { Dirty = true; } protected virtual void NotifyPropertyChanged([CallerMemberName] string propertyName = null) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } protected virtual bool Set&lt;T&gt;(ref T field, T value, [CallerMemberName] string propertyName = null) { if (!EqualityComparer&lt;T&gt;.Default.Equals(field, value)) { field = value; NotifyPropertyChanged(propertyName); return true; } return false; } } The `[CallerMemberName]` attribute will automatically use the caller's name if the specified string parameter is passed in as null. So, if your property names matches up with the property names you want broadcast as having changed, you don't need to specify a property. You can then use that in conjunction with `BindingList` to manage the `Dirty` flag even more, like so: public class Example : ObservableObject { private BindingList&lt;object&gt; Objects { get; set; } = new BindingList&lt;object&gt;(); public Example() { Objects.ListChanged += OnListChanged; } public void DoStuff() { Save(); Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is false. SimpleObject obj1 = new SimpleObject(); NameObject obj2 = new NameObject(); dynamic obj3 = new ExpandoObject(); //dynamic object Objects.Add(obj1); //invokes ListChangedEvent with ListChangedType.ItemAdded Objects.Add(obj2); //invokes ListChangedEvent with ListChangedType.ItemAdded Objects.Add(obj3); //invokes ListChangedEvent with ListChangedType.ItemAdded Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is true. Save(); Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is false. obj1.FooBar = "Snafu"; //does NOT invoke ListChangedEvent because changed this property doesn't invoke PropertyChanged event. Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is false. obj2.Name = "asdf"; //invokes ListChangedEvent with ListChangedType.ItemChanged Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is true. Console.WriteLine($"Dirty is {obj2.Dirty}."); //Output: Dirty is true. Save(); Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is false. obj3.ThisIsADynamicPropertyDefinedDuringRuntime = "blah blah blah"; //invokes ListChangedEvent with ListChangedType.ItemChanged (ExpandoObject implements INotifyPropertyChanged) Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is true. Save(); Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is false. Objects.Remove(obj1); //invokes ListChangedEvent with ListChangedType.ItemDeleted Console.WriteLine($"Dirty is {this.Dirty}."); //Output: Dirty is true. } public void Save() { if (Dirty) { //do stuff to save data } Dirty = false; } private void OnListChanged(object sender, ListChangedEventArgs e) { this.Dirty = true; //e.ListChangedType is the ListChangedType enum //public enum ListChangedType //{ // ItemAdded, // ItemChanged, // ItemDeleted, // ItemMoved, // PropertyDescriptorAdded, // PropertyDescriptorChanged, // PropertyDescriptorDeleted, // Reset //} // //In order to receive ListChangedEvents when an item changes its data (i.e ListChangedType.ItemChanged), that item has to implement INotifyPropertyChanged. } private class NameObject : ObservableObject { private string _name; public string Name { get { return _name; } set { Set(ref _name, value); } //will invoke PropertyChanged with the property name of "Name" } } private class SimpleObject { public string FooBar { get; set; } //does not invoke PropertyChanged } } You may also want to look at `ObservableCollection`. Hope this helps you with your project in some way.
Another is ,nq (I think?) which displays a string without those pesky quotes. I didnt know about ,nse I should look up the list there are probably more.
Result in. If you pass an int as a value into a new scope that would mean that the scope would need to allocate an int's worth of memory, along with the managed construct build around it in the clr. If all you want is mutating an already allocated value, then using the existing pointer is faster and less resourceful. Thus the performance increase when reusing pointers instead of passing by value.
Passing by reference and passing by value have different semantics, the compiler can't just change the logic of your code.
Are 32 bit OSes still in use? I haven't had one in 10 years. The .NET default setting silliness I am aware of, but we were talking about C++ right?
&gt; I cannot possibly think of having each and every property raise an event every time it's changed I said this to myself as a budding WinForms -&gt; WPF migrant when WPF was taking a foothold :) I think /u/pgmr87 has your answer. One thing not obvious from his examples is that `ObservableObject` is a base class. Further, note that `NameObject` is a simple example of this. If you want to follow this pattern and are doing mostly get/set and add/remove type of actions, you really just need to: 1. Create an observable base class object as /u/pgmr87 exemplified below 2. Make sure all of your property setters are calling `Set(...)` to trigger the notification 3. Use `ObservableCollection&lt;T&gt;` wherever you are maintaining collections that interested parties may care about.
Passing by reference and passing by value do not have different semantics when in is applied since in guarantees the instance won't be modified.
Oh... I see.
Sometimes I want to debug my EF migration scripts. Because it is another exe running my code, I am not running it, my visual studio never has a chance to attach the debugger. With `Debugger.Launch` I can place it in my migration and always be able to step through my code.
 There is plenty for me to learn. That's why I'm on this sub. Every day new things are coming out, new ideas of how to do things. This, is not one of them.
Wow. That is super-helpful. I heap karma upon thee! THANKS!
You're something else. Wow.
 Or you could simply just debug it using (var context = new MyContext()) { context.Database.Migrate(); } https://imgur.com/d1iJg03 I'm assuming you have migrations in a separate assembly, just breakpoint and debug it. You don't need the CLI.
Use conditional breakpoints or asserts for your second case. 
&gt; &gt; Now, ref readonly is a completely different concept to in. It refers to a readonly return object, it's not about using a reference as a parameter. What you appear to be missing that /u/p1-o2 is poorly explaining is that you can fix the "performance problem" in your section titled: &gt; Important Performance Notes For In The struct struct MyStruct { public int MyValue { get; set; } public void UpdateMyValue(int value) { MyValue = value; } } can be made `readonly` (with a better design) which would let the compiler skip the copy when invoking methods/properties on it: readonly struct MyStruct { public int MyValue { get; } public MyStruct(int myValue) =&gt; MyValue = myValue; public MyStruct UpdateMyValue(int value) =&gt; new MyStruct(value); } Obviously this change will have an impact on the usages... As an aside, you can ALSO make the struct `ref` which means there are a whole bunch of restrictions on how it can be used. This attribute means that instances of the struct will have semantics similar to `ref` parameters or `ref` locals in that they are stuck within a single stack frame (they can move up and down but cannot be put in a closure or a field of a class or escape to the heap in some other way). You probably don't want to create your own original `ref struct` types (`Span&lt;T&gt;` and `ReadOnlySpan&lt;T&gt;` pretty well cover most of the surface of reasons to need these types) but if you want a type that is composed of one or more `ref struct` fields, you have to make the composition itself a `ref struct`. * [`readonly struct`](https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.2/readonly-ref.md#readonly-structs) * [`ref struct`](https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.2/span-safety.md) 
Just a quick question... Console.Write("What's your name? "); var name = Console.ReadLine(); var array = new char[name.Length]; for (var i = name.Length; i &gt; 0; i--) array[name.Length - i] = name[i - 1]; var reversed = new string(array); Console.WriteLine("Reversed name: " + reversed); Could you help me around this problem? (if you have the time) for (var i = name.Length; i &gt; 0; i--) array[name.Length - i] = name[i - 1]; I mean, I kinda get the part of [i - 1] but... nah really i don't get this at all. array[name.Length - i] = name[i - 1] ?? I mean, I really don't get it. It was the instructor's solution to the problem and I watched his videos thrice, but I can't get a good grip around this. Thanks :) 
First of all, don't worry about xUnit or Moq. Start by understanding what unit tests are and aren't. It's a lot harder to write good tests than it is to write the original code. I always like [Martin Fowler](https://martinfowler.com/bliki/UnitTest.html) as a first stop to understanding a topic, but you'll have troves of information to dive into. As for xUnit, I'd start with reading their docs. I learn much more quickly and thoroughly by reading, so Pluralsight has never worked for me. [Try their getting started guide](https://xunit.github.io/docs/getting-started-desktop.html). As far as Moq goes, it is certainly not required. Using [test doubles](https://martinfowler.com/articles/mocksArentStubs.html) is a topic unto itself, and you need to understand it before you go mocking everything. For instance, mocking a database connection doesn't really get you anything. Providing a test double for a repository that uses a database connection, however, might. Personally, I rarely use Moq--I just write the few fakes I need by hand.
I guess you have to release the mutex explicitly as there is no guarantee finalizers will work upon app shutdown. Another thing, not related. You are calling GC.KeepAlive after running form. Running form is a blocking call. You are telling GC to keep alive the mutex when actually the form is closed and app is shuting down. Either remove this line, or move it before run form call.
Indeed. With the in you can't write on the in passed reference. I worded this wrong. But you can pass the already existing pointers to an allocation of another value. Look at the example in the original post. It's a simple add function taking two in passed references and returning their sum. Without the in the whole thing would allocate 5 integers. With the in, it only requires 3 integer allocations.
I mentioned some possible causes for the app remaining running. You'll have to figure out what is going wrong, my crystal ball isn't telling me. A workaround would be to exit using `Environment.Exit`, but that would be somewhat ugly and may have other side effects (no form closing event handlers etc.). 
Bit late here, but thanks. Trying to learn this myself is difficult to process. I actually got some reading and writing to a database working though. I feel like I'm learning a lot and it's starting to make sense. 
What do you mean "sturct type []"? Do you want an array of those structs? 
Yes I did look a little at the Screen class, but it just gives me a list of screens, and then i could get the working area of all the screens in the array. And properly in some way calculate the values i need, but i was hoping there was an easier way. Lets say i save the form location for my Form when its on Screen 1 the i will get Form.Location = {X=533, Y=236} If I save it when its on Screen 2 i get Form.Location = {X=-1368, Y=275} So I would like to be able to check the Form.Location against the Max and Min possible values of X and Y. So is there an easier way that getting the screen size of screen 1 and 2, and then calculate Max/Min X and Y values?
What errors are you getting? 
You should probably post your real code. Likely you're getting confused as when what runs and when the variable is set. Keep in mind that the method `SomeTask()` will run synchronously and not asynchronously until the first `await` statement is encountered.
Nice article. Seems like the biggest advantage for C# is that it can target SSE/AVX/AVX++ with the same code where C/C++ would need a different code path for each instruction set, Additionally C# code can be forward compatible with new vector instructions, like AVX-512, where C++ code would need to be recompiled. BTW, Intel MKL is free now, so there isn’t much of cost switching over aside from some redesign work and it would likely be much faster for BLAS operations because it is so well optimized. 
It looks like your source file doesn't match the code you're debugging. The highlighted area doesn't match any of your code...
In your first screen you have to keep in mind that between the evaluation and the line where your debugger is halting some code could have run too (in multi-threaded / async environments). But your second screen indicates, as /u/BezierPatch also says, that your source does simply not match the code you run. Make sure you completely clean and rebuild your solution and that you have no build errors.
Just picked that up yea. Restarted, reinstalled, rebooted everything, and it seems to be fixed... ¯\\\_(ツ)_/¯ 
Clif notes: watch out for daylight savings.
I ran your code, it appears that `assembly.EntryPoint.Invoke(null, parameters);` returns a `Task` which is hiding the exception that is being thrown.
Ehm... I found it on my colleague's phone.
Mistake #1: Using `DateTime` instead of `DateTimeOffset`
MKL will definitely be faster but you still have to integrate MKL into your .NET app and the solution you are working on. Working with C and C++ libraries in .NET can incur a lot of performance hits if you aren't careful wrt things like marshalling data structures. One thing Vector&lt;T&gt; offers is the ability to stay inside C#/.NET and use the knowledge you already have while still getting substantial acceleration.
Wow. This clears up everything. Whenever I see a problem I can't solve I just can't see myself moving to another one, and this one had been on my mind for the past couple of days. This is how I currently understand the concept: //1st iteration array[name.Length - i] = name[i - 1]; array[0] = name[7]; 0 is basically the index position of the 7th char which is 'e', then the loop goes on. If something is amiss, please let me know. I'll say it again, thank you so much for the detailed explanation. Really helps a lot. :) 
Ok I did solve my problem with this tip, so thanks.
If you are working with a lot of date manipulation it is better to use [NodaTime](https://nodatime.org/)
He is missing #1 mistake: using DateTime. Do not use DateTime. Use DateTimeOffset everywhere. This has been the official Microsoft recommendation since .NET 2.0 (2005): &gt; These uses for DateTimeOffset values are much more common than those for DateTime values. As a result, DateTimeOffset should be considered the default date and time type for application development. -- https://docs.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime Using DateTime is an invitation for really hard-to-find issues, as it does not uniquely define a point in time. Use DateTimeOffset also in SQL Server, data type [datetimeoffset](https://docs.microsoft.com/en-us/sql/t-sql/data-types/datetimeoffset-transact-sql).
Not literally anywhere though. If you want to talk about an instant in time, always DateTimeOffset, since you must preserve time zone information. But if you’re talking about a birthdate or holiday a DateTime makes more sense since you don’t want ‘16th of March’ to become ‘15th of March 21:00’ in some other timezone. Not that DateTime is the perfect API for this either since you don’t really want a time component here at all.
If your program ever feels funky like this, you can use a decompiler like ILSpy to check your compiled binary code is what you expect it to be. 
That's exactly what it was - the exception was inside the Task object. I've got it working now - thanks so much for looking into it for me!
Removed: Rule 4. You'll need to include the code you're using and the errors you're getting.
That would not work because a struct is a fixed value. You cannot use a fixed length array and then add like the names and score of the players. A list would work: namespace ConsoleApp { using System; using System.Collections.Generic; struct Player { public string Name { get; } public int Score { get; } public Player(string name, int score) { Name = name; Score = score; } } class Program { static Player[] GetPlayers(int playerCount) { List&lt;Player&gt; players = new List&lt;Player&gt;(); for (int i = 0; i &lt; playerCount; i++) { int displayNumber = i + 1; Console.Write("Enter the name of player " + displayNumber + ": "); var playerName = Console.ReadLine().Trim(); int.TryParse(Console.ReadLine(), out var playerScore); players.Add(new Player(playerName, playerScore)); } return players.ToArray(); } static void Main(string[] args) { int playerCount = 5; Player[] players = GetPlayers(playerCount); } } } 
I genuinely wish MS would just mark `DateTime` as deprecated already.
Truly. I am encountering DateTime all the time in places that need the exact point in time (enterprise applications). The excuse is usually "but we all know that we use UTC time" - and then I find seventeen calls to .UtcNow and eleven to .Now in code...
&gt; eturns an object, and I hadn't thought to look at that. If they are returning different objects that wrap the underlying actions in different ways, that cou No problems, if you run the script with `await CSharpScript.RunAsync()` or`await CSharpScript.EvaluateAsync()` the exception gets thrown
Only on certain operations. It's not hard to do it correctly. DateTimeOffset is just wrong for representing a date because you're specifying it as midnight of a specific timezone.
If you need just date, you really need to type it accordingly to let the typechecker do its work. See https://nodatime.org/2.2.x/api/NodaTime.LocalDate.html , for example.
&gt; DateTimeOffset is just wrong for representing a date because you're specifying it as midnight of a specific timezone. Just as you are with `DateTime`, only it is implicit.
I like that! The way I got it to work was by casting the return value to a Task, doing a Wait() on the task (not sure if that's necessary but it seemed like a good idea), then checking the Task's Exception property. Either of the methods you've given would be neater - except that in the actual code, the assembly that's doing the running doesn't have the required package installed to access the `CSharpScript` class. I'm not sure it's worth installing the package just to save a few lines of code. Is there any other benefit of using those methods, besides saving a few lines of code? Thanks again for your help - this is my first dive into script-running, and although I'm able to fix most things along the way, it's certainly been a learning experience!
Check if there are any running threads when you have exited the application and see what they're up to. Do you close the application using `Application.Exit()`?
Generally, rebuilding the solution is sufficient for resolving that issue.
This is the only right answer. System.DateTime is full of nasty surprise and should only be used to interface with other systems that don't use NodaTime. Do yourself (and the next developer) a favor and just use NodaTime.
Make sure you are in Debug mode not Release. Release will make the debugger not line up with the code.
Thanks, I just tried this and it still throws the error. Thanks for the tip with the lacalization, I'm looking into it right now. If you have any other suggestions please let me hear them :)
I am pretty sure it is compiled to a ref, with special handling (defensive copy) for modifications and method invocation.
Yup, you got it. Np.
Mistake #1: having daylight saving time in 21st century.
Just tested your code a bunch more and it showed some random behaviour: It worked once but then continued to fail again with the same errors
Actually, a holiday booking is potentially very specific to TWO time zones, unless you live-in and arrive-at the same tz
Cool. I wish there were more diagrams of the trees in the example code, and how the functions traverse them, it would help a lot. 
I found the error! My function returns for values bigger than 999 in the format of 10,000 (string). Excel gets angry at this comma if you put it into the formula bar! I feel so dumb....
Thanks! I appreciate that. I don't write a blog but maybe I should consider it.
Eesh, I didn't realize `Environment.Exit` may ignore closing event handlers. I handle a lot of disposing logic in those as I suspect many do.
I've wasted 2 days of debugging because of this. At my previous job, we had an error log in the program itself that users could view. In our staging environment (which uses the app in release config), an NRE was being thrown on line 200 (for example) of a FooBar.cs class. I opened up FooBar.cs on our current staging branch and went to that line. The code was something like this (although it was written in VB.NET): 200 if (someCondition1 &amp;&amp; obj.ToString() == "foobar") 201 { 202 //do stuff 203 } 204 205 //about 40 lines of code of other shit 245 if (someCondition2 &amp;&amp; obj2.ToString() == "snafu") 246 { 247 //do stuff 248 } As stated before, the error was being thrown on line 200. The debugger was telling me that obj was null, so it *must* be what is causing the NRE! Except that `someCondition1` was false, so it never should be getting called. I looked at IL code. I looked at language quirks with VB. I looked at everything I could think of. I knew I was running in release mode, but I had, up until this point, only ever seen the debugger be off by a few lines. To compound the problem, running in debug didn't help because the horribly written code had `#if DEBUG` preprocessor directives that actually ended up making `someCondition1` true and `obj1` had a value. After almost giving up, I got to the point of "what the fuck is this method doing anyway?". I set `someCondition1` to true and set `obj1` equal to an actual value in the debugger *and I still got the exception on the same fucking line*. That's when it hit me -- there was no fucking way it was throwing the exception there. Furthermore, all the code around it wasn't suspectible to an NRE. It wasn't until line 245 that the next chance for an NRE could occur. I added some `Debug.Write` calls before and after each of those if-statements and sure enough, the last `Debug.Write` wasn't being ran, thus telling me that the true problem was on line 245. Such a nightmare. Never again.
I assume you're looking for an implementation of: static Player[] ReturnPlayerInfo(int[] scoresMain, string[] namesMain) { Player[] PlayerInfo = new Player[NUM_PLAYERS]; return PlayerInfo; } Assuming `scoresMain` and `namesMain` are the same size, and the items at matching indexes are related (that is, `scoresMain[1]` and `namesMain[1]` go together), you can use a `for` loop and combine their respective elements: for (int i = 0; i &lt; scoresMain; i++) { PlayerInfo[i].Score = scoresMain[i]; PlayerInfo[i].Name = namesMain[i]; }
Sounds like you had a roaring good time.
Oh crap yes thats it. Thank you!
&gt; `[Obsolete]` My favourite "lesser known" usage of this attribute is finding references to implicit operators. AFAIK, I haven't figured out a way to instruct Visual Studio to "Find All References" on operators or implicit conversions. To workaround this, you _could_ temporarily delete the operator and look at all the places the compiler fails, but A) this can introduce a whack of other, unrelated errors, and worse B) the compiler might just fallback to another compatible operator overload if applicable (e.g., switching from an `int` operator to a `double` operator) so you won't be notified of that particular usage. If you temporarily tag your implicit operator with `[Obsolete]`, then all usages of that operator will pop up in your compiler warnings without breaking your code.
 Even though I agree to what you're doing, I would say that's the correct way to do it in the first place. Think of it from a database perspective, how would it have a flat table, and then another flat table, in the same table? This is more towards OP, but Entity Framework will only be able to handle things that a database could handle.
 How is the text stored? Is it a json file, csv, xml? How different are the objects? If csv, and super different, you could probably just get away with column lengths. If not, you could always build a composite key based on x amount of columns.
I understood it as a hotel reservation or something. A flight or other long trip obviously has two yes.
Its just a simple .txt file that i parse line by line, and in runtime I have to decide in which classes i want to store the parsed information, the problem here is more about how i should structure my code then doing the parsing thing. An example would be: the first line contains 4 consecutive numeric values separated by a blankspace, so I know this is a bank account number, so I need to store it in a ClientBankInformation Class.
Really just makes me even more in favor of ending DST.
I would have thought that when you book a hotel room its always in the hotels local time.
I don't exactly have any good links, but I think a great approach would be (if he has no programming experience whatsoever) to do something like the following: (substitute he/she as needed) * Create a Console program. You can skip explaining using-directives and you can skip explaining namespaces. These are some concepts that he doesn't need to know yet. Run the program. Nothing should happen. Explain that the only thing a computer will do is what you tell it to do, and that we didn't tell it to do anything. * Explain the main function as far as "this is where we tell it to do stuff" details aren't necessary at this point of this being a method, what is "public" what is "static" what is "void", etc. don't matter right now. * Start with writing to the terminal and explain that Console.WriteLine() will literally "write a line to the console" but expect us to tell it what line to write (thus the red underline if you're in VS). Then provide a "Hello World" string to the function and explain the string data type however he'll best understand ("It's a bunch of letters or words!"). Run the program. * When the console flashes up quickly and the program stops, explain Console.ReadKey() will wait for the user to press a button, thus stopping the execution long enough to read the message. 3. Run the program to demonstrate this. * Now surround your call to WriteLine(s) with an if-statement. Write in true to introduce the concept of flow-control. Run the program to see that the exact same thing happens as before. ("What the heck dad, what was the point of this?") Now change the true value to false. Run the program again. Did a light-bulb go off in his head? Cool if so! If not, use your discretion to explain what is happening or ask "if I place true here what will happen"? Don't get into conditional operators (&amp;&amp;, ||, etc) right now... not important yet for a beginner. * Introduce variables by creating a bool above and use its value in the if-statement. This will be a nice introduction to variables and understanding that they hold values. * Once he gets this, add a while-loop after the if-statement. While loops and if-statements look oddly similar and you can use this to bridge the gap. Create an integer called "counter" or something, and print out counter infinitely. Run it. It'll crash, and he'll not understand what happened until you explain that loops need to know when to stop. * Add an exit condition by doing something along the lines of adding 1 to counter (use counter = counter + 1 to explain assignment) and changing the condition to counter &lt; 100. Run the program, you should see 0-99 print on the console. He may not have a huge introduction to the C# language (which, again if you're interested in this, perhaps someone else can give you some good links), but he'll have an introduction to programming. **tl;dr** if you're looking for an intro to programming, read this. If not, skip it.
Yup, definitely a rager.
My question is more regarding how I should structure my code and not how I parse a text to create the instances of my class.
I read this as "30 seconds....Far below the threshhold of perception for a user initiated action" and was like "maybe if they were a goldfish but..."
Hopefully the proposed `Record` types currently slated for C# 8.0 will automatically implement `INotifyPropertyChanged`. Then we can declare notifying data types like this: public class NotifyingDataClass (int id, string name); ... which the compiler will create as a class with two properties, `Id` and `Name`, that automatically invoke `PropertyChanged` when the values of those properties change. Can't wait, but they were originally slated for C# 6.0. I'd even be OK if the compiler only implemented `INotifyPropertyChanged` if you added ` : INotifyPropertyChanged` to the end of the record declaration.
For #1, why not use `Stopwatch` instead?
You can serialize the object to a jsonstring and deserialize it again. I know thats not a proper solution, but you dont have to deal with references 
If you just want public properties you can use the built in xml serialiser as well.
http://www.learncs.org/
I think this might be just the thing.
Also: https://www.homeandlearn.co.uk/csharp/csharp.html 
Depends. DTO doesn’t have full zone information, so often it’s not sufficient added value anyway. 
&gt; If you want to talk about an instant in time, always DateTimeOffset, since you must preserve time zone information. Sadly, it doesn’t. It preserves time zone offset, though. 
For c# specifically I would probably use online courses which you will be able to find plenty of (some paid, some for free) * https://www.microsoft.com/net/learn/in-browser-tutorial * https://www.codeschool.com/learn/net * https://www.pluralsight.com/courses/dotnet-csharp-tutorial * https://www.udemy.com/dot-net-for-beginners/ * https://www.asp.net/freecourses But if he/she doesn't have any prior programming experience I think it's more important to teach him the basic concepts of programming. When I was in school we startet out with really basic stuff like Java Hamster (http://www.java-hamster-modell.de/simulator.html sadly this is only available in German). Maybe you are able to find something similar. You can also look into [Google Education](https://edu.google.com/computer-science/) which usually has some nice ideas for teaching plans or into programs mentioned in [this Guardian article](https://www.theguardian.com/teacher-network/2015/sep/01/how-to-teach-coding-programming). 
I find disappointing that in .net core they didn’t fix the mistake because they still have to give backwards compatibility. There is an article, I think in the msdn, talking about how DateTimeOffset is what DateTime should be but when they found out was too late to fix it.
You're welcome. Honestly, I didn't realize you could do that until I looked into it.
https://dotnetfiddle.net/Mobile?id=CsCons#run-results If it returned a `Date` type I'd agree with you. It doesn't, so I don't.
That sounds like fun to debug... i had a server that was in mountain time while I am 1/2 way accross the world. Working out when things actuzlly happened in the logs was a pain in the arse.
Removed: Rule 4. Please try to restrict the code of your submissions to only the relevant parts. Also, I would suggest to learn how to use the debugger and leverage it to verify each step of your code that each operation and value are matching the results you expect. There are a plethora of resources on implementing bubble sort; use them and compare your results against their implementations. Furthermore, as pointed out, /r/csharp isn't a code fixing service. It's not terribly respectful to the subscribers here to be so frequently asking questions about such rudimentary concepts at such a frequent pace. Please do make a concerted effort to learn and resolve these issues on your own rather than frequently posting to /r/csharp for help.
Removed: Rule 7? I'm not sure what you're trying to submit here.
If at all possible you should try to annotate the input data to tell your application specifically what type it should be rather then to force the application to Guess. If you are unable to modify manipulate the input that way then this problem gets a bit more difficult and you might have to write a Parser (A token parser, not text parser) which would require writing a tokenizer first. You can look into abstract syntax trees or recursive descent parsers for more info... 
Dependency injection in .NET
Learned something, thank you!
You are a good person. :)
Removed: Rule 3.
Do him a favour, sign him up to Pluralsight. Here's the C# learning path, best resource on the net, hands down. https://www.pluralsight.com/paths/csharp Beginner+, zero to Microsoft certified hero.
Youre right and Sorry about that. I will review the content and frequency of my posts from here on out. 
I'm not 100% sure what you mean, but I'd say that manually typing in strings for dictionary keys means something is wrong with your code. You probably should be using enums as keys, or using a const string variable. Or maybe you don't even need a dictionary at all. 
If the types in question have no common ancestor other than `object`, it's probably fine to just have a factory that parses the data, constructs an instance of the appriopriate type, and return it as an object. You should make a point of documenting the sorts of things your factory may return, however. It's not *ideal*, but C# doesn't have built-in support for things like discriminated unions, and implementing and using one will probably be cumbersome and unidiomatic.
*The Art of Unit Testing*, by Roy Osherove, is a good one. I think if you read *Working Effectively with Legacy Code* and/or *Agile Principles, Patterns, and Practices in C#* you'll get some good foundations too. I agree with someone else's *Dependency Injection in .NET* suggestion, but I think DI is *one technique* so it's less of an overview. Unit testing is less about "how to write tests" and more about "how to design software so you can write meaningful tests". Good testing books spend much more time telling you how to write production code than test code.
There is not going to be any standardized way to getting back a list of valid values for an arbitrarily defined indexer. Dictionary and Dictionary&lt;K,V&gt; have a `Keys` property which will give you a list of all the keys currently in the collection. Any key value will be a valid value for the indexer on the dictionary.
Why is this the first time I've heard people bashing DateTime? I've been doing this professionally for ~5 years, and have worked on a variety of apps (started with one company, then moved on to essentially consulting for multiple). As you mentioned, we usually just rely on using UTC everywhere and then force the client (browser, usually) to do the conversion to local time.
What?
The problem really shows the issue when you try to display the UTC time to a person that didn't create the record in another time zone. Or issues such as not knowing if the person observes or does not observe DST. The better way to do this is just store the date and time as the local time with the offset. I hope I am explaining this enough. I don't have this issue as everything is local, but I learned of this problem at a SQL Saturday class.
&gt; The problem really shows the issue when you try to display the UTC time to a person that didn't create the record in another time zone If the database record is in UTC, all we need is to know the user's timezone (offset) to calculate what value to show them. For websites, we usually just rely on whatever timezone the browser tells us. For a desktop app, you could rely on the system's time zone. Or, in either case, your user may have a profile with a pre-selected timezone setting (ex: user is overseas, but wants to see values in their home timezone). As long as you know what timezone the user is expected, and the database is UTC, it's not that hard.
I didn't know about `DateTimeOffset` until today, but you're absolutely correct about hard-to-find issues. My employer's code is full of mixed server local, user local, and UTC `DateTime`s. When someone asks me what timezone something is in, or how long something is from now, I just shrug now.
&gt; manually typing in strings for dictionary keys means something is wrong with your code Can you please elaborate?
You might have free access to Lynda.com through your library. There are lots of good courses on there.
Oh my gosh, I have been trying to figure out how to do this for the last couple days: `[CallerMemberName]` Great article! I didn't expect to learn something that useful right away.
Basically, if you have hardcoded strings as dictionary keys you're in one of two situations: 1. There are a finite set of keys which could be considered valid, and an enum encapsulates this better. For example, if your keys were months of the year then there can only ever be 12 of these, and your code will be more robust by using an enum (with the additional benefit of visual studio giving you intellisense). 2. There are an infinite number of valid keys, but some of these are special enough to be referenced specifically in code. This might be better modelled by having certain strings stored in constant variables. Imagine you have a text input field for a user's middle name, where you ask them to type the string 'N/A' if they do not have a middle name. (Apologies for the contrived example here, I'm struggling to think of a real world example where I wouldn't want to refactor to use one free text field and one enum or boolean field instead) Now, based on OP's original comment, it sounds like he's saving a value into a dictionary with a specific string and then retrieving that value later with the same string. That sounds to me like what you want there is simply a variable, but because there could be a lot more complexity in the middle of storing and retrieving, I figured I'd detail solutions that would account for that.
Have you considered XML or JSON serialization? Either one of those will turn an entire object into an xml or json file. Later, you can deserialize the file and turn it back into the original object. However, I would only do that if you weren't constantly reading and writing to that file while the application is running. If you do go that route, you could create a single data class that gets serialized/deserialized. Then, classes that need certain data can grab it from that data class. However, that is kinda poor design. The best practice would be to come up with a few custom file extensions. You'd use the extension from the file path to determine how to read, parse and distribute the data from the file. This is how programs like Paint know *how* to load image files like bmp, jpg, png and so on -- the extension tells them which parser it needs to use. Of course, if you go that route, it means you'll presumably be writing data to multiple files instead of one.
I've been at this for longer than you have and it's the first I'm hearing about it too. However, in my case, I've been working for smaller companies that don't have a large geographic customer base, so working in the Eastern time zone is all I've ever had to do.
One non-obvious implication of #4 is that if you want to work in a specific timezone, any arithmetic operation (AddHours(), AddDays() etc.) is potentially wrong because the offset might have changed. For example, in Britain DST happens on 25 march at 1AM, which means that if you add one day to "2018-03-25 00:00+00:00", you'll get "2018-03-26 00:00 +00:00" which is actually 2018-03-26 01:00 in local time (offset has switched to +01:00), and most likely *not* what you intended. The solution is to always perform these kind of operations in local time, then reintegrate the offset based on the timezone (using TimezoneInfo.GetUtcOffset()). So in this case you would do 2018-03-25 00:00 -&gt; 25-03-2018 00:00 then add the offset to get 25-03-2018 00:00 +01:00 So IMO the advice to always use DateTimeOffset for local dates is very dangerous, you should always use a pair DateTime + TimezoneInfo to manipulate local dates. Ideally the DateTimeOffset type should be replaced by such a pair in the standard library. 
Bad link, have corrected it.
*Sort of*, see `MarshalByRefObject`. It's not supported in .NET Core anymore, however, and remoting in general is more or less deprecated.
Thanks for the response. I seen that at some point in my quest but as you say, it's been deprecated. Although I'm all for breaking the wheel, I want to do it with contemporary features.
Not really. You'll need to serialize the desired object and communicate between your various processes using pipes or something.
This is a really rambly article without any useful technical details. It really just comes down to - Two enum constants with the same value are the same (duh) - Enums have a class hierarchy despite being value types. This is true for all value types, as they all inherit from the classes `System.ValueType` and `System.Object`. It's also completely unrelated to the previous point.
I'm around 6 years into my career and everyone in my office has a personal Pluralsight subscription. It's simply the best video-based learning resource around for C#/.NET and related topics. I'm a self-taught dev, so resources like that are absolutely critical to continual studying. I'm only on the lower ~20th percentile of their advanced users, so clearly people much better than me are also using the site. I also recognize *a lot* of the teachers on there as figureheads in the C# community. Edit: Pluralsight has 2 xUnit courses for .NET Framework, 1 xUnit course for .NET Core, and 1 xUnit course for Entity Framework. Those are specific just to xUnit, so it doesn't count the other ~15-20 classes on Unit Testing available.
I'm not sure why this is downvoted, because he's correct. DateTime is fundamentally broken. DateTimeOffset is better, but still broken in any scenario that needs to do arithmetic on dates. NodaTime provides a fairly wide suite of types that allows for expressive designs that don't introduce subtle bugs everywhere when you try to use them.
 int correctAnswersInARow = 0; if (correct) { correctAnswersInARow++; } else { correctAnswersInARow = 0; }
You need to use another int to keep track of the number of correct answers. Start it at 0 and increment it at each correct answer (hint on a nice way to increment a number: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/increment-operator). Also, while your solution works too, the use of goto is discouraged among programmers. You could use another type of loop, like a while: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while
Something useful that could have been mentioned that might have helped solve the problem is that enums auto-number if you assign one a value and not the proceeding ones. enum Animal { Cat = 1, Dog, // 2 Goldfish // 3 } Or that you have can the last element have a trailing comma without upsetting the parser (same works with initializing arrays/lists).
[Stick](https://www.reddit.com/r/seduction/comments/6jxtey/i_made_a_ballsy_move_would_this_turn_a_girl/) to [girls](https://www.reddit.com/r/seduction/comments/7pkejq/girl_insisted_exchanging_numbers_and_her_pupils/) instead of trying to be malicious. The answer is NO. Unless you can inject your code.
I'm still new to this so please forgive me, but where is your "correct" coming from? do I need to create another variable in order to determine if it is correct or not? 
Here you go... Random numberGenerator = new Random(); int correctInARow = 0; while (correctInARow &lt; 15) { var num1 = numberGenerator.Next(1, 13); var num2 = numberGenerator.Next(1, 13); Console.WriteLine("What is {0} multiplied by {1}?", num1, num2); int answer = Convert.ToInt32(Console.ReadLine()); if (answer == num1 * num2) { Console.WriteLine("You are correct!"); correctInARow++; } else { Console.WriteLine("I'm sorry, your answer was incorrect"); correctInARow = 0; } } Console.WriteLine("You just had 15 correct answers..." + correctInARow); Console.ReadLine();
Thank you for your responses. In the while loop, is it possible to keep it going after I have hit my 5 in a row mark and keep that count until it gets to 10 and then have it read "You just had 10 correct" instead of it stopping the program all together?
To know what an enum is, go back to the origin (C): https://stackoverflow.com/questions/34323130/the-importance-of-c-enumeration-typedef-enum Of course it's not the same thing in c#... It defines a class: https://stackoverflow.com/questions/19267954/what-is-the-difference-between-enum-keyword-in-c-sharp-and-c
I was actually able to figure it out. Thank you for your input. Here is the code I am going with if someone in the future is interested. Start: Random numberGenerator = new Random(); int correctAnswerCount = 0; while (correctAnswerCount &lt; 5) { int num01 = numberGenerator.Next(1, 13); // function that returns a random non negative int int num02 = numberGenerator.Next(1, 13); Console.WriteLine("What is {0} multiplied by {1}?", num01, num02); int answer = Convert.ToInt32(Console.ReadLine()); if (answer == num01 * num02) { Console.WriteLine("You are correct!"); correctAnswerCount++; } else if (answer != num01 * num02) { Console.WriteLine("I'm sorry, your answer was incorrect"); correctAnswerCount = 0; goto Start; } Console.WriteLine("You just had 5 correct answers!"); correctAnswerCount = 5; while (correctAnswerCount &lt; 10) { int num01 = numberGenerator.Next(1, 13); // function that returns a random non negative int int num02 = numberGenerator.Next(1, 13); Console.WriteLine("What is {0} multiplied by {1}?", num01, num02); int answer = Convert.ToInt32(Console.ReadLine()); if (answer == num01 * num02) { Console.WriteLine("You are correct!"); correctAnswerCount++; } else if (answer != num01 * num02) { Console.WriteLine("I'm sorry, your answer was incorrect"); correctAnswerCount = 0; goto Start; } } Console.WriteLine("You just had 10 correct answers!"); correctAnswerCount = 10;
`DateTime` just represents a Date and Time without offset. There are many times when you actually want this, strangely enough. `DateTimeOffset` is the correct thing to use the majority of the time, but it's not a huge deal that it wasn't done like that from the start, since `DateTime` still has its uses.
DTO contains the numerical offset, and this is what you need when dealing with time almost always. Finding that offset based on other information is outside the scope of what DTO is meant to accomplish.
It's still useful for when you want to represent a time of day *without* a timezone. `DateTimeOffset` requires an offset. 
Even then, DateTimeOffset should only be used for storing instants in the past. Not for doing date logic into the future (unless everyone agrees that such logic should be done based on the UTC rules, which means no Daylight Saving Time). If you're doing date math in C#, use NodaTime. Future events should be stored as "local time", "local date" and "what IANA timezone was expected". Don't convert to an instant until the last possible moment (i.e. when you go to display the event in someone's calendar or are about to send out a reminder).
DateTime with a kind of Unspecified is semi-okay for storing dates (especially when backed by a SQL DATE column). You just need to be sure to always discard the time portion.
Something I’ve noticed that might help in the future. You don’t need to do if (A==B) {Something} Else if (A!=B) {something else} You can do ( difference in 3rd line) if (A==B) {Something} Else {something else} If A==B evaluates to true then A!=B must be false if not other operations were performed on A not B. And the opposite is true as well, if A==B is false then A!=B must be true. 
Hi guys, thank you for being super helpful. But i couldn't find the cause, however as workaround, i check if there's an instance running after the application is close. If so then i force kill it. That's the only solution i came up with. private void CancelActionButton_Click(object sender, EventArgs e) { this.Clear(); SecurityData.LogOff(); Application.Exit(); bool result; var mutex = new System.Threading.Mutex(true, "X.PosApp.UI.Windows", out result); if (!result) { Process[] pros = Process.GetProcessesByName("X.PosApp.UI.Windows"); try { foreach (Process pr in pros) { if (pr.ProcessName == "X.PosApp.UI.Windows") { pr.Kill(); } } } catch (Exception exp) { MessageBox.Show(exp.Message); } } }
Yes i have, i've posted my solution above, can you check it ?
 Why not just `Task.WhenAll` that already exists?
Can you try replacing the form line with the following? using(mutex) { Application.Run(form); } And then remove the GC call. This should clean up your mutex when the form closes unless your app is force closed.
FYI `System.Threading.Mutex` using the string constructor creates a named, system-wide mutex which can be used across processes (and is implemented as an unmanaged resource). Terminating your application without releasing the mutex causes it to [become abandoned](https://msdn.microsoft.com/en-us/library/system.threading.mutex(v=vs.110\).aspx), which is likely why OP is seeing his issues. It doesn't get cleaned up automatically.
Wow, why haven't i thought of that. Thank you.!! Will do that.
Relax. Keep cool. Don't try to demonstrate technical skills so much (though you should have that ready to go whenever you need it), but focus on the people. Get to know the interviewers. Make small talk. Be interested in them and try to become their friend. Think if them as your new coworkers, because they might just be if things go right. Your resume probably outlined your skills and experience. The interview is to get to know you and if you are someone they want to work with.
Know the three pillars of OOP P.I.E Polymorphism, Inheritance, and Encapsulation. Know what they mean by giving an example. Might not be a question. But good to know.
What he means is it still awaits the tasks sequentially. Task.WhenAll has special machinery to not sequentially await tasks, but add callbacks that mark them complete in whatever order they finish in.
Be sure to look up the company and position on glassdoor.
Create an app or two and walk them through it. Have it open on your machine and offer to go into details on development or architecture decisions. A portfolio is always more impressive than spouting off Martin Fowler blog posts, they need to see you can think and follow through, not just memorize.
Sometimes glassdoor will have comments from people saying what the actual interview is like or even details about any testing they went though. Sounds like you check off their requirements good. Just be likeable 
I've been using c# for 7 years and didn't know that initializers can be nested. I discovered the feature with a suggestion from resharper. I'm sure a lot of people in this sub doesnt know that feature. I find the link i submitted to contain everything I needed to explain and has quality. Anyways you are the mod. your call.
Agreed. Even when interviewing seniors, I couldn't give a crap about demonstrated knowledge of the language. Any developer worth the title should be able to pick up a language in a week or less, especially if you're already familiar with similar languages. We're a C# shop, but I routinely have interviewees answering questions using Java, Python, and occasionally C++ (I'm still waiting for the masochist who tries to solve a graph walk problem using SQL ...). I'm interested in *how* you solve problems, your attention to detail, and your ability to deal with ambiguity. I'd rather you write in whatever language you're comfortable with, even if it's ~~pseudocode~~Python. I don't care if you got your syntax wrong or you put your newline after your opening curly or didn't understand how `await` works or anything like that. That's all learnable on the job. Some of my best hires did poorly on the code itself, but they were a hire because of their critical thinking skills.
So much this! I mainly make my decisions on whether or not you will get an offer letter based on your personality and enthusiasm. We can teach you technical skills. We can’t teach you to be good with other ppl. I have seen super technically talented devs destroy team dynamics and morale.
Usually, yes. In my experience they want to see how you code, not how well you've memorized the language. Besides, good Google-fu is just another tool in your toolkit. As my fellow redditors have said, relax. I've interviewed dozens of candidates and I've never expected them to know ALL the questions I ask them and ALL the language/tool specifications for the job. I'd rather have someone with a good attitude, well behaved and team-oriented who lacks experience but is willing to learn to someone who knows everything but is a nightmare to work with. One thing: NEVER lie. If you don't know something, say it plain and simple: "I've never worked with that" or "I don't have any experience with that". It's cool, you're not expected to know everything. Lying to me (and your interviewer will know you're lying) is a much bigger no-no than not knowing something. 
Can also look at team treehouse, https://teamtreehouse.com/. I liked the format and exercises. Was a good resource covering a lot of different programming topics.
CallerMemberName + INotifyPropertyChanged is a match made in heaven, btw
I should also make clear that one of the biggest things I think about in an interview is, “can I stand to spend 40 or more hours a week around this person?” I’ll hire an average dev I won’t hate to be around over a Linus that actively makes everyone else less productive every time. The sad truth of development is: outside of a few major companies most of the problems we’re solving aren’t new. You don’t need to be a genius to be an average to pretty good dev. You just need to know how to think well and be a human people can interact with without feeling miserable. 
You shouldn't work with that company that claims they're 4... They're just three!
Thanks, but we have decided to change some things so now i'll be getting the files by knowing in advance to what class they belong so no need to add that complexity. 
&gt; Can you put the name into the .txt file? Yes, we now decided to take that route, so now I know in advance what class they belong
I used to conduct interviews for my last employer - we used to do a face-to-face interview to find out if the candidate would fit into the team. Then we'd give them a machine with VS installed, a description of a more obscure algorithm with a worked example, a sample input data set with expected result and get them to implement the algorithm in C# in 45 minutes or so. We were careful to choose an algorithm that would need nothing more than arrays, stacks, queues, lists etc. We weren't looking for perfection (only one candidate ever got a functioning implementation), but we were looking for an understanding of the language, object orientation, data structures and so on. The best candidates were the ones that got half of the algorithm implemented sensibly and could talk about why they'd done it the way they had and how they'd finish it.
&gt; If at all possible you should try to annotate the input data to tell your application specifically what type it should be rather then to force the application to Guess. Yes, we decided to change that to simplify things, now I will know in advance the type. 
So ussualy there is a few questions concerning linked lists, or hash maps, and less often trees. If ur a junior the questions will probably be like can u explain what it is when you use it how does it work things like that. Also google programmer interview questions but they will be more directed at higher roles but it dosnt her to poke around.
I'm curious how you go about learning how they deal with ambiguity. 
Yes. The actual implementation, last I looked, uses a shared counter combined with a low level completion callback. 
I'd say get a Anders Hejlsberg tattoo someplace visible, like your left wrist or forehead. You will be a job candidate that truly stands out from the crowd.
My main problem with enums is that they are too low-level for my taste (e.g. casting the numeric type to an enum always works, 0 doesn’t even need an explicit cast...). I prefer the way they work in Swift, but of course the can do much more there as well. Note: I don’t want to sound like a Swift shill or anything, I work with C# every day and I like the language very much :).
Well, I've just learned about Lazy&lt;T&gt;. Had no idea there's in-built support for lazy initialisation.
Basics, OOPS concepts, .NET framework and CLR fundamentals. These are few things i look for when i interview programmers less than year or two experience. If the candidate does not know some syntax or a language feature i won't care much. 
Realign your thinking on HTTP. Rest and WebApi are great to know and (with some critical thinking) can maybe point you in the same direction, but they are not the same as the HTTP spec. * "It's just text" and the browser makes it do stuff * Basic status codes and what they mean * Basic HTTP methods (GET/POST/PUT/DELETE) and common uses * Headers and their common uses If you want to wow them: * How do cookies tie in with HTTP * How does the net operate on a high level (web address, DNS, Load balancers, HTTP server) * Load balancers + sticky sessions; Why and how they apply to HTTP * Basic HTTPS and how the triple handshake works
Another useful thing is the fact is enum have Int32 values and you can specify to use Int16 enum Animal : short { Cat = 1, Dog = 2, Goldfish = 32768 //error } 
Not really the sub for this. Your post relates to the Win32 api, not C#. You'll probably have more luck on attack overflow or Microsoft's help pages
I'm reminded of a library that I stumbled upon a while ago. I never used it, so I can't speak to how "good" or "bad" it is, but it seemed really interesting to me: https://github.com/louthy/language-ext It basically (ab)uses the `using static` feature to import a bunch of static helper methods and make the language behave more like typical functional languages.
&gt; However, OOP techniques cannot take advantage of multiple processors at once because of shared data and mutable state. Yes they can, don't talk shite. You use immutable variables/objects and thread locking. *Proper* thread locking, not just locking everything in the class down to the same lock every time anything's accessed. If you write a class properly with multithreading support through locks and immutable variables, there's no reason logic couldn't be split up across numerous threads to spread the load across multiple cores. *Features* from functional programming are nice. But the overall paradigm itself, at least in my experience, makes larger projects rapidly become unwieldy.
i wrapped it in a PropertyChangedBase class and derive anything from it, does wonders, or wrap it on the abstract base class
btnConnect txtboxPassword :(
Is this about the inconsistenty or something?
Just be honest and try to remember that (usually) technical questions aren't asked as trick questions so just relax and fire away. 
&gt;X DO NOT use Hungarian notation. https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions
All of these responses are good, just remember to be yourself, be humble, and be likeable! If they're hiring you, that means they have to be around you everyday.
As soon as you finish designing and start developing software you find issues in your design. Missing properties is much easier to add directly from place where you need them without opening designer, looking for needed entity, changing it and regenerating classes.
Of course. Open VS, find a few tutorials and get on with it. Learn by doing. More important than the language is the practices. Knowing good from bad practice. As devs we are always learning, no one can say they know everything about a language.
i just realize something from what you said. i think programming is like our lives... we are always learning. thank you, cheers! :)
/u/klohkwherk Thanks I hadn't thought about going that route.
Thanks for the insightful and helpful response. 
That’s terrible advice because if that were the case I wouldn’t have a job. I’ve interviewed over the last 10 years at maybe 100+ places and every single one of them has 4 for the answer.
I was just kidding to point out they're just 3 :D If they are right, it means the mighty Scott Allen is wrong: https://odetocode.com/blogs/scott/archive/2011/10/05/rise-and-fall-of-classic-oop.aspx
Thanks for the suggestion, hadn't thought of that....but I really need squiggles under to offending word!
Now I'm curious to where this 3 came from, because I have always known it as 4. It was pounded in my head in college and as I said, every interview I've been in has that question - and this is the first time I've ever ran into someone arguing there are 3.
SOLID principles would be good to know. It helps you write code in a way that the next guy can maintain it — or you for that matter. 
I'd be OK with a prospective junior dev not knowing the language for the job he applied for -- I'd be more interested in their enthusiasm to learn and grow as well as their understanding of basic programming concepts. I can gauge this by asking about their personal projects or any projects they worked on in college. For senior devs, they should know the language by default -- if I needed a senior web dev to maintain and enrich an existing Mike's MVC app, they would need to know Mike's MVC already which means they should know a lot about .NET. I'd be OK with them only knowing VB.NET and not C# as long as they were OK with learning C# to program our products in which for any decent programmer this would be one of the easiest language transitions to do (vb.net to C#) due to the CLR and the fact that they are both OOP languages, among other things.
I kinda have the same issue as OP, but I still would like to use DB migrations in the future. Is it viable to generate models from an existing database as a rough draft, then finalising the models in code, only to essentially "switch" to code first by generating a DB from the finalised models?
**If I were**
&gt; your interviewer will know you're lying Yup. They are likely going to be asking you questions that they themselves would be confident in answering. As a funny aside -- recently got hired at my new job couple months back. Did a horrible job explaining what abstract classes were. I *know* what abstract classes are but the interview jitters got me. It was one of those things where, afterwards, you think to yourself "did I really fucking say that?". If you look at my comment history on /r/csharp you can clearly assume I know what abstract classes are.
* S.O.L.I.D Programming Principles * How you write your code (comments, readability, formatting, etc) * C#/OOP/Programming 101 basics (what are classes, types, access modifiers, interfaces, abstract classes, enums, constructors, properties, members, fields, loops/ifs/variables, method signatures, etc) * *Most importantly*, how you convey your enthusiasm to learn your chosen science and how you carry yourself as a person and possible co-worker.
Quill18Creates on YouTube has great tutorials! 
Grammar Nazi's receiving software engineering educations could be the best or worst thing ever.
1 year to become somewhat competent is plenty of time, but you'll have to work at it for at least a few hours a day, four or five days a week. There are a number of Intro to C# books out there, so you could go to your local library and check a few out, figure out which one works for you, then buy that one to work through. You can probably also find a free course on Edx or Coursera or one of the other big MOOC's out there. I would avoid the short tutorials and youtube stuff for now. They're fine for small, specific subjects, but they just don't go into enough depth to be useful to a beginner. The IDE for C# is considered one of the best and can there's a free version: Visual Studio Community Edition.
thanks mate, have all the time in a year so probably procrastination is my biggest problem.
Strings in C#. They are immutable. Know what that means and how you'd have to apply that knowledge in a code sample. Practice basic algorithms for string and array manipulations. Review your definitions of basic Object Orient Programming concepts like Inheritance and Polymorphism. Know how they apply in a piece of sample code.
I don't know the history, but I believe P-I-E were the original 3 pillars and Abstraction was deemed a 4th pillar at a later point. You can search "3 pillars of OOP" and find references that still define it that way.
This is the most desirable WHEN you want to : 1.) Quickly spin up environments and seed them. 2.) Ensure your product always matches the database. (There are ways to screw this up) 3.) Make it easy to undo sql changes and code changes. 4.) You want to scaffold out as much as possible for rapid development. 5.) Do automated deployments and have it EASILY apply the database changes. 6.) Have multiple environments with sql as a dependency and want to quickly apply application and sql changes to them in a predicted manner. I agree it has a steep learning curve but any frame work does. The pay off is you can now do quicker development.
Reminder: Tutorial and resource links are in the sidebar ==&gt;
By all means look at tutorials etc but the nectar is in the application. So try and create your own very small brief programs that way you will learn how to think like a programmer or research like one or alternatively ask questions. In programming we need all three to survive and to grow. Avoid the I can do this alone thinking. Most importantly enjoy it. If you are getting fried take a day or two off and then get back to it. 
Thanks for the feedback, I've updated the code to use `ConfigureAwait(false)`.
Thanks for the feedback, I've updated it to use `Task.WhenAll`.
It's OK. No one reads sidebars.
Are you doing WPF, WinForms, ASP.NET?
Edmx files can be a pain and using them results in some strange connection strings. We often inherit existing projects. We systematically remove the use of edmx and change to code first. If you want to design db first, you can design your db, then use the wizard to regenerate the code first stuff after each change.
What projects are you currently working on?
I was good enough after 2 weeks, so a year should be plenty.
Alright, thanks for the advice.
Model-first is a dead technology, it's been removed entirely from EF Core. You can keep using it if you're running EF6 or earlier, of course, but keep in mind you're going all in on legacy tech. Database-first has been nerfed(?) as well in EF Core. I think there are still tools to automatically reverse engineer the database, but instead of building a model for it it builds the code-first classes. You can think of it as "Code-first without migrations" - all of the rules, fluent config, attributes, etc. are the same as Code-first, the only difference is that you scaffold your database out of band (via SQL) instead of through Code-first migrations. If you don't trust migrations or need to manage DB by other means, this is the way to go. Code-first with migrations is probably what you'll see most articles about EF focus on.
I use code first extensively. One must be aware of how simple code changes can result in significant schema changes, which can be very problematic especially if you have production data which cannot be lost. But it also makes the application very easy to understand and maintain. 
Did you have other programming experience or was C# your first language?
If I'm hiring someone to work on the C# language or tools, then I care if they know the language. If I'm hiring someone to work on a product or service that just happens to use C# (along with other languages, like SQL, Powershell, Python, shell scripting, etc), deep knowledge of the language is mostly irrelevant. That comes with time and exposure, and is something you can learn or be taught on the job. I'm hiring for the less tangible qualities that *can't* be as easily taught or learned.
I'm surprised only one guy has mentioned this... But if they ask you what SOLID is, you better have an answer. There's a good chance they'll ask you non programmatic questions. For programming questions you just need to know the basics of C# and train on solving common interview "puzzles"/problems. Oh, and if you're in a technical (dev) interview, don't be afraid to ask questions or discuss the topic. 
For some languages, a week or less seems a bit extreme ;) Like going from C# to Objective C, if you don't have any experience with smalltalk or similar, doubt most people will learn it in a week. Certainly not to a useful extend.
I had done 2 years of web development with ColdFusion before that.
Comments?? On a job interview? For a junior non the less? That's just a trap to show his bad sides. But yup, be enthusiastic, show a great willingness to learn and work with any tech.
You wont be asked to write a binary tree on a junior interview, but knowing the difference in O(..) between using a sorted tree or a hashmap might be useful, if they go deep into it. What's best for fast inserts, fast queries, etc.. Knowing when to pick one above the other. Esp. if its been part of your college/uni curriculum. When I got my first job as a junior they were quite up-to-date on what I should know based on the uni I studied at. Will vary a lot from country to country I suspect.
WinForms
True, a GUI component. I should have mentioned that. I used a C++ lib once that tied into the MFC edit control and it did all the GUI heavy lifting. You would rclick the squiggled word and get suggestions in the menu.
Check out Environment.Version More info here: https://msdn.microsoft.com/en-us/library/system.environment.version(v=vs.110).aspx
Thank you! I'll give it a shot and let you know.
As I understand it, WPF has this functionality natively: https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/how-to-enable-spell-checking-in-a-text-editing-control Ideally, you would be making your program in WPF anyway, but since you're using WinForms, there are some ways to leverage the WPF functionality: https://stackoverflow.com/questions/23834001/how-to-activate-spellcheck-in-c-sharp-windows-form-application EDIT: There's also a DevExpress Spell Checker for WinForms, but it isn't cheap: https://www.devexpress.com/Products/NET/Controls/WinForms/Spell_Checker/
I don't disagree with anything you've said so either I wasn't very clear and/or misspoke or you've misunderstood what I said. I am a .NET developer and we are on the C# sub, so what I said was within those contexts. If I worked for a Java shop, what I said would change to fit that environment. When you said "senior devs... potential to contribute to the product or company as a whole", I am not seeing how that contradicts what I said in your first quote.
In what sense? When I generate entities using the designer, I can just go and look at the created classes and modify them if I wanted to.
as a fullstack dev i prefer working with sql directly (less complexity, more portable skillset) so i go code first &amp;mdash; especially since every time i've touched migrations i've ended up in a black hole of pain that only ended when i went back to doing everything by hand.
&gt;Model-first is a dead technology Oh, I wasn't aware, this actually changes a lot. Thanks for your answer, I think that I'll just have to try and master code-first. The only problem I have are annotations which got me confused when things got complicated. 
Thanks for perspective. Another question, would it be fine to just depend entirely on SQL and LINQ? I've liked Ado but I also like to keep up so I moved to Linq but I read that it's outdated too and that's why I moved to EF.
It is trivial to make code first changes which have dramatic schema changes. The migration for those schema changes can often result in loss of data. So one must be aware of what the impact of code first changes you are making are. In a DB first scenario, you automatically have to go through this thought process, because you are directly thinking about the schema. Code first saves you that trouble, but saving you that trouble can cause its own trouble.
I see, thank you.
Don't spew false information. Why does cutting out the V (cshtml Razor-views) and writing API's (in CONTROLLERS) have to mean throwing out all that knowledge? The backend can still continue to use EF code-first, while using models, controllers, and a SPA-framework... Not at all mutually exclusive. Unfortunate ASP.NET MVC-framework is called MVC. Seems to confuse a lot of people, when you can easily use it solely for backend.
Seems like this can't be used with the regular .NET framework unfortunately. FixedBufferAttribute is blocked there and no one stores their vectors and matrices using heap-allocated managed float arrays.
Db-first will be getting updates in the future. I wouldn't say current EF has a "DB first" approach, though. It has the ability to reverse engineer an existing DB but it's intended to just get the base in and then use code first and migrations to update the DB. Trying to use the scaffolding as a pseudo DB first approach will cause a ton of headaches. I'm not sure if there's any tools for reverse engineering in EF Core. The one I know is popular hasn't been updated for core.
I don't know much about ColdFusion but in general the first language is the hardest to learn and it's even easier if the next language is similar to one you know (e.g. C# if you know Java). An experienced programmer could learn enough to be productive in a couple of weeks, but I would not apply that same timeline to someone learning C# as their first language. A year is definitely doable though if OP applies himself well.
That's not true at all though /u/nemec. You have a lack of real life experience. Bigger databases accessed by more than 1 system MUST use db-first. There are advantages and disadvantages to both. It depends on the project but both will continue to be supported. It's not "dead technology". Otherwise I don't disagree with the rest of what you said...
I think I see some of the confusion here, so let me clarify my position with the following: * A good dev can pick up languages easy * I should have said ".NET experience" in a few places where I mentioned C# and VB. I was trying to talk about their experience in the .NET being a requirement which isn't necessarily tied to a language. * In a .NET shop, I expect senior dev hires to have sufficient .NET experience (again, doesn't matter which language). If they are senior Java devs, I'd only hire them as senior devs if we needed a product written with the JDE. The part I disagree with you on is the fact that you wouldn't require .NET experience for a senior dev position in a .NET shop. I wouldn't expect a senior dev hire to be immediately useful regardless of their background, but I think even good senior devs would take too long to immerse themselves in a .NET environment. Sure, they'll pick up the language quickly, but how many wheels are they going to reinvent simply because they aren't familiar with the .NET environment yet? Further, even if they had professional experience in, say, Java, if they were looking to make a switch to .NET but haven't been familiarizing themselves with .NET on their own, why would I, as a business, want to pay someone to learn something I feel they should already know? I mean, people won't know *everything*, but there's simply too big of a knowledge gap to hire a senior dev, in a .NET shop, that has zero .NET experience. If they applied for a lesser position, it would be different.
I think you misunderstand me. EF Database First is a **[technology](https://msdn.microsoft.com/en-us/library/jj206878(v=vs.113\).aspx)**, not a concept. &gt; Database First allows you to reverse engineer a model from an existing database. **The model is stored in an EDMX file** (.edmx extension) and can be viewed and edited in the Entity Framework Designer. EDMX is not supported by EF Core, meaning both the Database First and Model First **technologies** are gone. Maybe I explained it poorly, but the **concept** of creating the database first (in SQL) and then creating Code First classes to bind with the database can be considered "Code First Without Migrations". Migrations are the technology that alter your database schemas - big companies that have other policies for managing databases must use Code First to bind to the database but *will not* use Migrations. Edit: also I didn't call DB First a dead technology, only Model First. They've changed things, since the EDMX is gone, but I believe they still plan to support some kind of DB First in the future even if it isn't top priority.
&gt; Sure, they'll pick up the language quickly, but how many wheels are they going to reinvent simply because they aren't familiar with the .NET environment yet? This has not generally been my experience. Assuming you already have a decent .NET codebase, other developers with sufficient knowledge and experience to bring the new dev up to speed, and a code review policy that requires everybody get reviewed on every checkin (seniors don't get preferential code review treatment just because they're seniors), there should be enough code and knowledge already in place to bring the new dev up to speed on good practices, and design and code reviews will catch bad design patterns and wheel reinvention.
Enums are meant to hold text values in place of numeric values. Thats it. There is no reason to over think it.
Oh I misread and thought you claimed Db-first was dead. Also, I incorrectly thought it was a concept. So thanks for the details and sorry for being rude and claiming you had a lack of experience - clearly I do. It makes perfect sense see it as "Code First Without Migrations". That's exactly what the tooling does and seems to work fine for me in Core. I never knew the difference between model and code first.
I very much agree with this post. As long as we're not talking about a tech company, they're most likely just looking for a good fit and will only test for basic competence in technologies based on their needs. 
Now I'm even more confused. IS model-first dead or not?
I saw that in my Google searches. &gt; With this property set, the HttpClient's internal handler will attempt to use HTTP/2 when available, and fall back to HTTP/1.1 when it is not. This is not helpful. Is there not a complete HTTP2 implementation anywhere?
Do you know of any tooling which will validate the code first classes against a database schema? Makes sense not to use Migrations, especially when the database grows larger, but how do you keep them in sync? 
Read nemec's reply to me. I misunderstood - sorry
Ok
I realize you are just using AsyncLazy&lt;T&gt; as an example to showcase the async extension in the compiler... But if someone truly wanted an AsyncLazy&lt;T&gt; that was useful to use, they'll probably need to do a little more work. This is one that Roslyn uses: https://github.com/dotnet/roslyn/blob/master/src/Workspaces/Core/Portable/Utilities/AsyncLazy%601.cs
what if my tasks don't all yield the same types?
Thanks a lot, Matt. I was using this as an example that could be potentially helpful, and just during the lunch we discussed with a colleague that roslyn codebase has a real AsyncLazy.
I don't like code first because you are relying on EF to generate your schema. I'd focus on learning how tables and relationships map to C# objects so that when you build a schema, you could just as easily build the object model that it maps to. If you are relying on software to generate one or the other, it's important to know what it's doing and why. I'm not sure what approach uses edmx, but do not use that one, edmx sucks.
I dunno, something like this? string result1; int result2; await Task.WhenAll( ((Func&lt;Task&gt;) (async () =&gt; { await Task.Delay(1000); result1 = "Hello World"; }))(), ((Func&lt;Task&gt;) (async () =&gt; { await Task.Delay(220); result2 = 22; }))() ); Ok maybe there's some sugar in that lib, but I'm not sure if I'd be willing to add another dependency just to get it.
I personally use the DevExpress product mentioned by /u/FizixMan above, but I can certainly understand not wanting to lay out $1,000 for their WinForms suite (the spellchecker cannot be purchased individually). Have you seen this? https://www.codeproject.com/Articles/73802/NHunspell-Component-for-Visual-Studio#Spelling control
I know fizzbuzz has the reputation of a joke. But forreal, people can crumble with this question in an interview setting. Are you sure you know it? Confident? Doing fizzbuzz in an interview is akin to doing fizzbuzz at a whiteboard immediately after ten burpees in front of strangers on Chat Roulette. I'm sure you're capable but realize the challenge you're tackling.
This question gets asked quite often in the csharp or dotnet subs, my answer from [a past thread](https://www.reddit.com/r/dotnet/comments/7f7cru/which_is_the_better_approach_for_a_small_mvc/): &gt; Personally I would almost never go code first. I always want full control over all of the database properties. But I also wouldn't use the "EF DB first" design with .edmx files either. &gt; Usually I create the database first with good old SQL scripts. While there are some downfalls, Visual Studio Database projects are pretty nice and allow you to compare existing databases with your current SQL source and lets you autogenerate migration scripts. &gt; Then I generate an EF model/context from that database (both EF6 and EF Core have tools for that without using what most people call the EF DB First approach). If you change something in your db, either manually change your model or run the generator tools again (partial classes are helpful if you want to keep customizations in that case). &gt; In my opinion Code First should only be used for small projects with 5 tables or something like that. Most people using Code First don't really know how to design and utilize a good database. Specifically you almost never see good indexes on Code First database, which is one of the most impactful things for performance.
Thanks, i learned something. Ive been so focused on code first in core i forgot to even look at the landscape.
Serious question: If you’re using it in production, can you elaborate your process of moving away from EDMX =&gt; code first? How do you handle future updates to the SQL schema that must now be re-imported into code-first? (with the EDMX we just refresh the EDMX =&gt; save).
Reading something like this is so refreshing compared to what you see on CS career questions. Like, this is how you actually see how a person works and what they know, not just puking leet code questions at them. It seems like so many interviewers really have no idea what the fuck they are doing. 
Admittedly, I have not had a job interview for a junior position; however for some of the more senior jobs, the theme is: Know your algorithms and data structures, and lean how to apply them in real world examples not just in code. And don't be afraid not to know how you'd put something in code, if you can explain HOW you'd put it in code, it gives them a good position to see how you think.
Ehh it depends on what kind of abstraction. If you are implementing a polymorphic design you’re likely already creating a type of abstraction.
I blame the move from in-person whiteboard interviews to online interviews with compilers. The goal of an interview coding question has never been to write running code. It's to prove that you have the ability to translate a solution into something that looks like code. It's so bad that I've gotten to the point where I preface pretty much every interview with something along the lines of, "We're going to be working on a whiteboard. I'm not a compiler, so I don't care if you have some minor syntax issues. I want to see how you solve problems, not whether or not you can spit back the MSDN documentation." Hell, Intellisense and Visual Studio and tools like ReSharper make knowing syntax almost obsolete, since they do so much of the work for you. And I'm totally fine with that.
Fair enough, it is a bit more concise!
Thank you so much, this is a really good response.
If you can try Google Spanner it's better than big table in almost every way. 
Just to clarify the title: You're trying to run the Android emulator that's part of the Android SDK, using Visual Studio and you have a PC that happens to have a Ryzen CPU. No, you don't need an android phone or an intel CPU to debug your Android app. You need to figure out what's wrong with the Android emulator.
I'm having a hard time understanding this comment, so bear with me. You mention the `ConfigureAwait`, are you thinking that I should parameterize the query so that people can choose not to `ConfigureAwait(false)`? This is not in reply to the other comment about `ConfigureAwait`, so I presume this is not what you're talking about. The other thing you mentioned was a `Deconstruct&lt;T&gt;(this T[] arr)`, but that's different from what I'm doing in 2 ways, namely `T[]` has elements of the same type, which my methods do not (wish to) require, and `T[]` has a compile-time unknown length, which my methods cannot (because I'm using ValueTuple). Could you help clarify what you're saying, I'd love to be able to improve my code.
Yeah, it's not a big win, but I got so gosh-darn tired of declaring all of those variables by hand. Plus, you'll notice that after your call to `Task.WhenAll`, the compiler still won't agree that `result1` and `result2` are definitely assigned (because it pleads ignorance due to the lambdas).
what are you using, WinForms? IIRC image Resources in WinForms are immutable or are a pain in the ass to change (like you load that resource into memory, then draw that onto the screen)
You can avoid that by initializing the variables to `default` but yeah it's not as concise. I like the idea of copying the code :) 
I am using winforms. I’m pretty new so would it be better to manually draw a few select colours and have the users choose these?
im not sure without seeing some code. i mean red and black checkers are fine, why do you want the users to be able to choose what color? unless this is a homework assignment requirement of some sorts.
It is for homework. Was looking for extra marks but it’s not worth the hassle if it’s too difficult 
is the requirement for dynamic user choice (like they get a color picker) or can you just make like 5 more resources add those, then let them choose which one
Can't you just wrap that C++ library with C#? or if it wants to get a handle on a current window or widget your SOL but like if that spell check lib just accepted a string or Vector of string, then returned whats incorrectly spelled as either of those you can do some spell checking that way
I think I’ll go with this thanks for answering. It is just for user choice 
actually its https://msdn.microsoft.com/en-us/library/system.drawing.bitmap.setpixel(v=vs.110).aspx - SetPixel to alter the pixel color, sorry, just realized this after switching to it via tab switching
actually its https://msdn.microsoft.com/en-us/library/system.drawing.bitmap.setpixel(v=vs.110).aspx - SetPixel to alter the pixel color, sorry, just realized this after switching to it via tab switching
Could a foreach be used for each pixel in the image and if in the base image I have the colour of the pixels I want to change to be red can I just change those pixels that way?
 How specific is it? Does it have black around it, or are they literally just circles? If they're plain circles, you can use a matrix. I just did this to black and white a photo. Change the color matrix to fit whatever colors you want. Graphics gr = null; ImageAttributes imageAtt = null; System.Drawing.Rectangle rectangle; float[][] blackAndWhiteMatrixScale = new float[][] { new float[] { 0, 0, 0, 0, 0 }, new float[] { 0, 0, 0, 0, 0 }, new float[] { 0, 0, 0, 0, 0 }, new float[] { 0, 0, 0, 1, 0 }, new float[] { 0, 0, 0, 0, 1 } }; try { using (gr = Graphics.FromImage(image)) { imageAtt = new ImageAttributes(); imageAtt.SetColorMatrix(new ColorMatrix(blackAndWhiteMatrixScale)); imageAtt.SetThreshold(0.8f); rectangle = new System.Drawing.Rectangle(0, 0, image.Width, image.Height); gr.DrawImage(image, rectangle, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, imageAtt); } }
Thanks I’ll try using this 
I think here we have to differentiate code first and database first as design philosophies as opposed to technologies. EDMX is shit, in a whole bunch of ways and should be avoided at essentially all costs. That doesn't necessarily mean you should be designing your database in code and using migrations to generate the schema. I would in fact recommend the opposite in most instances. A suboptimal database design can have a huge performance impact as the amount of data in your database grows. A slightly ugly code path from one object to another is much easier to deal with. 
The textbox is receiving these key events after, or before not sure which, you are processing them, so you are getting a combined result. Change e.Handled to equal true and move them to the top of method, however, you wont get multi key presses like holding ASDF either way. e.Handled = true; e.SuppressKeyPress = true; if (e.KeyCode != Keys.Back) { var converter = new KeysConverter(); textBox1.Text = converter.ConvertToString(e.KeyData); } else { textBox1.Text = ""; }
perhaps, you'd have to flatten the bmp pixel array that or do a 2d loop like this: this is all pseudo codey I might be wrong here for (int x = 0; x &lt; bitmap.Width; x++) { for (int y = 0; y &lt; bitmap.Height; y++) { bitmap.SetPixel(x,y, Color.Red); } }
Avoid EDMX like the plague. 
Why exactly and what to use instead?
FixedBuffer&lt;T&gt; is an array type from the jemalloc.NET library. It's not related to the .NET FixedBuffer attribute. The library is .NET Standard 2.0 so it should work in .NET Framework. One reason I used arrays of floats was to make it easy to write to individual vector elements which could then be re-interpreted as vectors with no cost. If you want to store matrix or vector structures in unmanaged memory arrays you could use the SafeArray&lt;T&gt; array from the library.
That's a good idea too. I don't know how to wrap, but would give it a try. You can wrap any C++ dll?
There is no such thing as a not tech company anymore. Everyone has developers. Beyond that if a tech company is expecting juniors to come in with more than an academic understanding they’re not hiring juniors. They’re hiring mid level people they want to pay less. 
Very nice! I use a library called fleck that works really well. https://github.com/statianzo/Fleck Nice thing about fleck is that the underlying connection is just sockets so you can use it wpf apps and on older os. 
What is a UI based game? Do I have to click on radio buttons, switch tabs, scroll some bars to win?
Games such as: * http://www.bigfella.com/withauthority.dir/wagame.jpg * http://cdn.edgecast.steamstatic.com/steam/apps/482730/ss_6d9eee2cf2d0d9574155f35f5b1120ebbd89f952.1920x1080.jpg?t=1507568406 * http://www.startreksupremacy.com/supremacy_wpf.png
Looks like WPF or XNA should do the job.
Does XNA have a UI system? I don't really want to re-create all the UI components.
idk, with like dllimport or pinvoke or something i havent done it in a while, and these were standard microsoft libs
He is not saying they would be able to master the language, just able to pick it up. It all depends on your definition of learn and your expectations. If you only need to dabble into another language to fix something, maintain things, etc., it is infinitely easier to do. If you expect them to spear head a major new application from scratch, yeah that is different.
Well, more like translate a *problem* into a solution rather than translate a solution into code.
How can a high school senior find an internship for C#? 
Well, you should have your solution before you write your code, so ... Seriously. Outline. Talk through your solution. Pseudocode it if you want. Then write code. Candidates who jump right into code to try to solve problems tend to code themselves into corners and are rarely willing to throw it all away and start over.
Yes, you need to know your end game. I guess I was saying it is more important to be able to be given a problem and figure out the solution, rather than solving "how do you implement a hash table in C#". But that highly depends on what you are looking for.
i want to develop games using unity.
Have you taken a look at NHunspell? 
Its actually super easy and the only pattern we use anymore. Make the database changes, add the appropriate properties to the entities by hand if the change set is small. Otherwise, you simply use one of the many reverse POCO generators available through nuget or the internets. Once configured (once per project, basically), it runs a T4 template and emits all of the database objects to entity classes (complete with navigation properties, etc), dbcontext(s), context configuration(s) (fluent API mapping), and any of the various other optional class/type decorators, and you're off an running again. We do not run code first migrations and we don't use edmx, and we have next to 0 maintenance headaches as a result. It's a little more work (much less than you think) and you wind up with complete control of the data access layer in the bargain. 
This is totally possible and pretty common, actually. (I've seen it in the wild and have also helped implement it in a number of applications). Whats even more awesome is that if you're in an enterprise environment with DBA's that are't developers and don't really care for the idea of giving full on access to SQL machines, you can completely forgo code first migrations and just use EF over the database with coordinated changes (DBA does his/her part, you do your dev part against the context/entities) and everybody's happy. For most applications (where, as the product matures, big database changes become infrequent) this is a much more elegant way and much less risky than running migrations.
The first link to https://github.com/mmdempsey/FlappyBird actually links to https://github.com/mmdempsey/SMS-Automation.
The answer in Fizixman's post [below](https://www.reddit.com/r/csharp/comments/7poo4c/looking_for_a_net_spellchecker_library/dsj1vah/) is probably easier to implement. My requirements were quite specialized so I used COM interop to call the [ISpellChecker](https://msdn.microsoft.com/en-us/library/windows/desktop/hh869767(v=vs.85).aspx) directly.
You can just have all of the colored checkers, however all disabled until the user clicks the color.
The problem with this test for ambiguity is there is no ambiguity in the question. The question is pretty clear. This question tests for attention to detail, not for parsing ambiguity. 
Thanks for catching that. Updated to the correct link ;-) 
WPF and [caliburn micro](https://caliburnmicro.com/)? For the threading issue you had with WPF, what exactly was going on there? For the styling, WPF is extremely flexible, I worked on a touch-based WPF app where we styled all the buttons into hexagons and made all sorts of other crazy tweaks. It's not easy to make those dramatic changes, but I'd say that's probably not going to be 'easy' in any UI framework, you're going to have to develop a deep understanding of how the framework controls are implemented. Another option, something web-based like Electron maybe? Maybe [electron sitting on top of a .net core app](https://scotch.io/@rui/how-to-build-a-cross-platform-desktop-application-with-electron-and-net-core)? I'm not sure if that moves you further away from C# than you want to be, but a lot of web frameworks are very 'skinnable' and may get you the customization you're looking for pretty cheaply.
Personally love WPF but I didn't know how to specifically find an update loop that has a fixed frame rate so i decided to create a new thread. Also had a hard time trying to communicate between the UI thread and the logic thread where the Update timer is running due to a lot of race conditions and concurrent modification issue. I have looked a lot on Electron and NW.js and I am pretty comfortable with web UI. However I wish I didn't have to use javascript for all of my backend/logic for the game. I have tried out some C# chromium framework but either they were too unfinished or the performance was really bad. Also had some tough times bundling using webpack. I am wondering if I am missing a framework that directly allows me to use both C# for backend/logic and HTML, CSS and Javascript for UI/Frontend. Thanks a lot!
Thank you! This one solved problem with **any_control_key+any_letter** combination at least.
Starred!
It's not a critique of the EF-part of u/leljae's post. That's still very much a current approach to databases with .NET. I meant his transition from Web Forms to MVC, which seems ancient compared to what's happening in a lot of projects now. I can't see why anyone would still pick an old school MVC approach to webapps *now*, even though it was the mainstream tech just 5/6 years ago. Also: the frontend should be decoupled from the database tech used in the backend, so EF and MVC shouldn't even be in the same scope. Also (2): MVC and API-controllers might seem similar in implementation but require a completely different approach in practice. Especially if you're using microservices or a *free-standing* frontend like React/Angular CLI and Nodejs.
If you’re using the vs supplied android images, I find checking the compatibility cpu setting in vm settings can help. To do this, open hyper-v and find the android vm, then while it’s off edit the settings. Though I have never done this for a non-intel cpu
Think you misunderstood something, that will give me the Version/Revision of my application. How would that help me? 
Perhaps i misunderstood this, but are the compiler directives not evaluated when the applikation is Build? That will not really help me, I would like to ship one exe not a different one for each .Net Framework version.
Unity3D?
Since it hasn't been suggested yet maybe you could try [Avalonia](https://github.com/AvaloniaUI/Avalonia)? It's cross-platform and supports .NET Core. You'll find it on NuGet. You should install the Visual Studio Extension as well.
Don't do that. Fix your database instead, then right click designer and update from database. You should never hand edit that EDMX.
Real-World Functional Programming: With Examples in F# and C# https://www.amazon.com/dp/1933988924/ref=cm_sw_r_other_apa_c1kwAbHBKNKRW
Someone else has mentioned using a ColorMatrix; You can fairly easily construct a ColorMatrix to apply a hue-shift to an image being drawn to an instance of Graphics. Start with an image resource that you want to be a 'red' counter - you can use any hints or shades of red and transparency. Then apply a hue-shift matrix; the following page has a function (the final code snippet on the page) that achieves this (disclaimer: I've not compiled and run it, but it looks right). The amount of shift is specified by the 'value' parameter with a range of 0..1 which will shift through the spectrum red-orange-yellow-green etc. with 0 being no-shift (i.e. red), 0.33 green, 0.66 blue and 1 again red (for example). Just replace grpElement with you own Graphics instance and change the destination coordinates as required.
User interfaces are really awkward in Unity so I don't think that's a good fit.
Thank you so much for your helpful reply. I will look into it.
Oh, it looks like they remade the user interface in Unity 4.6. So nevermind then. It *was* really spectacularly awkward to use.
If you want the benefits of functional programming why not use F#? 
[This](https://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1515765103&amp;sr=1-1&amp;keywords=structure+and+interpretation+of+computer+programs) book is 22 years old, but it is the functional programming bible. It's in scheme, but the functional concepts are universal. If you really want to learn functional programming, why not go full bore and learn it in a functional first language like F#? You could even go the extra mile and learn functional programming in a dynamically typed language like JavaScript. Node.js is becoming very popular in the industry so learning it could also be lucrative.
I've only been a professional programmer for 3 years now so you may have more experience than I, but I just started my second job and *both* jobs have horrible code bases although the second job has a significantly better dev team and there are newer projects that have been written nicely. As an aside, the common line between both jobs have been the fact that they are both maintaining products that are coded in what we call "VB++", code that was originally written in VB6 and was "converted" to VB.NET. I am starting to think that very few shops handled that conversion very well. So, with that said... &gt;Assuming you already have a decent .NET codebase... ... is probably why I have a different opinion lol.
May I ask what sort of application this was? I get the impression that there's a bunch of people out there using my framework that I never hear from.
Well I'm not the OP, but for some people it's easier to learn a new paradigm like FP with a familiar language. C# is the kitchen sink language so it's entirely possible to program functionally. Also the book the OP and I referenced teaches F# and FP using C# examples, sort of like a Rosetta stone. 
There is a wizard in VS to generate the code first from an existing database, we use it and then stop using the stuff generated by the edmx The initial migration is empty to keep what exists. Future changes are with code-first and migrations rather than alter the db.
You've written a really awesome framework! I've used it for a gui application for making starmaps that needed realtime 2d rendering and should run on Linux, so I chose Ultraviolet over a classic GUI framework because of the 2D rendering and the great UI. I don't really understand why it is not more popular because it would be my go-to choice for a C# game framework. (Edit: formatting)
&gt; SQL and LINQ? Do you mean LINQ to SQL? https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/linq/ 
I don't doubt it, in my case its stuff already using EF, but with edmx files, and probably used badly. One time we had an edmx that when saved, would break due to pluralization issues, in another project, there were 3 versions (not exact copies) of an edmx for the same db :P 
I might be speaking from an area of ignorance, but I feel like moving from a native C# platform to a JavaScript/Browser platform is a step (or three) backwards. I haven't used it much, but if you're looking for a C#-based, relatively native cross platform framework, you could look into Xamarin-forms. &gt; Our bread and butter is software that controls machine integration for automated production lines (think mail packing, credit card production, RFID tags, etc) I don't know if this means you need to access low-level Windows APIs or read special ports on the computers, but if so, you'll want to make sure whatever platform you pick can meet your technical requirements first.
Are there pros to reading out of a book instead of watching videos or reading online? Or is it just a thing that depends how how the person like to comprehend/learn things?
Thanks for the reply. We do need to access windows API and special ports. This is why I was hoping to use the core C# logic but use something like Bridge.Net to update a UI that was built on HTML5 canvas. I am surely speaking from ignorance. I am still new to the complexities of software architecture. I took two classes and have built some basic apps by myself. Most of my experience is from working on the software at work. To be clear I don't plan on using JS/HTML5 as the platform only as the view/GUI. I got the idea from this Visual Studio article https://visualstudiomagazine.com/articles/2017/01/25/26-web-desktop-ui-tools.aspx I was just curious if anyone had any experience. If so what advice they have. I haven't looked much into Xamirin but it's on my radar. I assumed it was primarily for mobile devices. My other issue with Xamirin is the animation limitations. One big concern is to keep our high-quality animations. WPF allowed us to do some pretty cool stuff while being multi-threaded.
I prefer written material so that I can go at my own pace. I find that a lot of video content is full of fluff; I end up tuning out and missing the parts that aren't fluff.
In-case anyone was wondering I got it working. Based on what Tweq said I figured it was just firing too quickly. So I delayed it 2 seconds in-between functions and works like a charm. ///Changes the Portrait to Pre-Made Character private void prem2_MouseUp(object sender, MouseButtonEventArgs e) { SetPremade("ranger1.png"); Task.Delay(2000).ContinueWith(_ =&gt; { avatar.General_Save(); } ); }
We migrated from Winforms to HTML/JavaScript. Moved the business logic into REST web services (c# + ServiceStack). I’m the senior developer of the team - was responsible for all development at one time. Once we made the decision to go web-based- we hired 2 web guys for UI, and I write the web services. We also have a couple Xamarin phone apps that make use of the service layer.
I have to disagree on just about every point. When I first read SICP I thought its examples were unnecessarily clumsy way to accomplish things. As for the best place to learn functional programming, I think it's hard to beat C# if you want a practical education. It allows you to seamlessly combine functional and OOP concepts and use each to their best ability instead of forcing one or the other to do things that it wasn't meant for.
FYI: I've updated the files to include the necessary attribution, making it easier to copy without violating the terms of the MIT license.
Although it's already been mentioned in a few times in a round about way, I'd honestly just go straight to F#. Unless you're doing this purely as an exercise in "because I can..." it doesn't make sense to me. You'd be better to learn a functional language.
Appreciate this info taglius. I just went to the website for ServiceStack it seems like the react desktop app option may be a route I can look into. Our software would primarily run natively. Were you able to carry over much of your core code or did you end up rewriting most of it? This is a large concern for our small team since the code base is quite large.
Maybe electron.NET? https://github.com/ElectronNET/Electron.NET
Suggest any books when beginning to learn C#/MVC?
Environment.Version is the .Net version running.
Going to something Web based for the sake of it seems like a bad idea. If you are building desktop apps use a desktop framework.
WPF *is* supported by Microsoft. It's a mature product and hasn't needed a lot of attention. In 2014 at Build Microsoft announced they didn't have any major changes planned for WPF. That didn't mean they wouldn't in the future, and certainly didn't mean it wouldn't be supported. In fact, later that year it was announced that they were working on several major things including improvements to DirectX interop, modern hardware support, tooling, and performance. It certainly hasn't gotten the love it deserves and it's not Microsoft's favorite child, but it's a far cry from being unsupported.
await Task.WhenAll(tasks) var result = tasks.Select(x =&gt; x.Result) Seems pretty easy to me
Supported . . . I should have said developed. WPF has fallen so far off the radar you can't even get certified in it anymore. They removed it. https://www.microsoft.com/en-us/learning/browse-all-certifications.aspx I only know that because our shop makes sure we are certified. You mention later 2014 there was talk. It is now 2018. Nothing has been updated in 4 years. Most companies would consider that dead. I agree it's mature and you can do a ton with it. I personally love it and would continue to use it. The company just wants to see if it is wise to move forward into something new. They want to integrate other new software with the older WPF and WinForms software which run using C# and React. As far as your last statement I am not sure I would call it supported with no attention for 4 years, no certification, and no specified team. Yes, it is supported but that simply means it's included in the OS or .NET. WinForms is still supported but it hasn't been touched in over a decade. If you please it is no longer developed and has no roadmap for its future. It was an awesome leg up back in the day when swing was its main competition.
API really strange...
Great shout. Will definitely look at this as well!
Didn't know about that. Will definitely look into it! Thanks!
No but we considered options recently and decided not to even go with Core. It's still very immature and I didn't feel could be trusted in production. As well as the breaking changes that each version seems to brings. But you got to way up the risk verses the benefits. If you are going cross platform it's the obvious choice. We wanted something mature and battle tested and were targeting Windows. A lot of people tend to want to go with new tech just cause it's new. Especially younger developers.
You may be able to access the property via reflection (or with a dynamic typed variable). It may use a different implementation in compatibility mode (eg .Net 4.5.1 running on .Net 4.6.1) and the property will not be visible at runtime. dynamic dynController = ServiceController; if(dynController.StartType != null) StartType = dynController.StartType;
Well, you are right they have continued to add it to the .Net Framework and even added the ability for touch as well as small updates I'm sure. Semantics can be challenging to communicate especially when it's a human language. All that aside my OP had little to do with whether or not WPF is supported/developed. If you have any experience with using any of these newer browser-based desktop frameworks with C# I am happy to learn the pros and cons. I am trying to learn about alternatives. I figure if other people have gone down that road I can learn vicariously before venturing too far.
If it were up to me we would stick with WPF. I just spent a year deep diving into Adam Nathan's WPF Unleashed. It's not certain what direction we are going to go. I was just hoping to see what other's have experienced. I want to bring as much to the table as I can being a new Dev. Core did look interesting I'm hoping Microsoft continues down that road. Thanks for the input.
Do you mean you want to set the height of the webview controls? It should work like any other control. You can use any number of layout controls to do it - StackLayout, Grid or RelativeLayout. If you mean adjust the size of the webview according to its content, you would have to do a custom renderer, and then inspect the size of the view root. 
Second this suggestion. I'm 2 chapters in and the examples are really good and don't seem contrived at all. Also, good balance of functional ideas and principles with working code examples.
True, I simply wanted to make sure that someone coming in reading your post wouldn't think "oh shit" I need to move all my stuff from WPF. There have been people saying it's dead since like 2010, so I felt a need to correct it. As for transitioning, my advice is simple: what frameworks and tools let you get where you need to be in the cheapest, soonest, and with the best features. I haven't worked with some of the more exotic options. I've stuck pretty closely to the Microsoft stack. And the needs I have at my employer often include access to the full .NET Framework. 
 You prefer working with sql directly, but then you say code first? Code first is not working with sql directly, and when you've "touched migrations" it ended up in a black hole, but you have to use migrations in code first. I'm extremely confused, unless you meant that you do NOT do code first.
I meant to design and create a database using SQL entirely. And use LINQ to access that DB and read or write data...
Going to +1 ServiceStack right here.
Check this out - dunno about C#3 compliance, all you need is .NET 2, but its based on wrapping a C++ program - https://github.com/dlemstra/Magick.NET
Writing code for testability is a huge focus point for us. With regards to REST: * What are the primary REST verbs and what do they do? * when to use POST vs PUT? ("Idempotent" should be in your answer") * Bonus points if you can describe the secondary/less standardized HTTP/REST verbs (PATCH, HEAD, OPTIONS) Basic coding tests: * Reverse a string. * Reverse the individual words in a string. * Find an element in a BST. * Determine if a linked list is circular For SQL (MSSQL particularly, as that is what we use) * Difference between INNER / OUTER / CROSS joins. * Understanding of comparisons to NULL * Sql Injection attacks and the benefits of stored procs vs free form query execution
Are you limited to using C#? Maybe you shouldn't use a high level language for something with such a strict memory limit.
Piggy-backing on this, you should also probably be wrapping your webviews inside a scrollview, so if the height extends past the viewable area, the user can scroll with a swipe. 
Do you have any kind of mockup we could look at. We can probably give better advice with a better idea of the layout you're thinking of.
https://stackoverflow.com/a/40543634
Core is he future for sure. But there are a lot of kinks to work out. There is XAML standard out there which covers most platforms. Haven't done much reading on it though.
What is edmx? 
 Depends what you mean monitoring tools. If you mean like monitor a .net core site (something like nginx) then sure, we have a massive website running fully on docker containers on a *nix box. If you mean monitoring tools as in watching system memory, etc, you will probably have to create bindings specifically to get the values returned by whatever OS you're on. I doubt there is a cross-platform way of monitoring resources - but I'm also on my phone so can't really do throughout research atm
ah, i guess i didn't understand the terminology like i thought i did; i took "code first" to mean something completely different. let me put it differently: i avoid entity framework's code/db generation utilities &amp; work with tables/models by hand. i find this to be faster &amp; leads to fewer development blocks. i guess that isn't either "code first" or "db first", so apologies for confusing terminology :)
For a non-GUI, I've had no problem using it on my Linux machine. I just installed `dotnet` via Microsoft's repos and had fun building. I also did my [NaNoGenMo](https://github.com/NaNoGenMo/2017/issues/12) using it with Visual Studio Code.
LinqToSql?
I.... don't disagree nor agree... I maintain two applications which uses CEFSharp and React for the UI. It's a lot more flexible that Winforms, a bit more flexible(debatable) than WPF. With all the horrors that JS brings, especially in terms of logging. - It does simplify having a web and desktop version of your program/"app".
Running .net core on Linux on prod with no problems. 
What does the application do? 'How much of .net (which features) are you using?
Can you just load it as a bitmap and draw it onto the form? Pretty sure the Image class has a Load method. Then you just use the Forms OnPaint method to draw it with e.Graphics 
.net core is a superset of the .net standard, as is the .net framework. .net core is not a subset of the .net framework. Don't want to seem like an ass but that should be a good distinction when it comes to moving away from the platform-specific framework :)
Yes you are correct, but .net core and full framework both implement .net standard. And if OP's app only uses namespaces that are in .net standard, then it should be an easier port. That's the point I'm making. Also yes technically .net core is a different code base entirely, but the point I'm making is that not all namespaces are available by default. So to make things easier, saying it's a subset is meant to indicate that you don't get everything in full .net framework that you do in core. 
Running a medium sized asp api. Not very exotic features, database and some rest calls to other systems.
Nice. I just bought a Pi and I want to convert some .net 4.5 code using WCF to core. Obviously WCF is windows specific but I was thinking webapi and signalr could do the same thing. It's an Alexa-like server/client service. 
In what way exactly do you expect to save memory compared to existing implementations? I assume you have some sort of plan other than the assumption that other decoders are inherently wasteful. 
It's the database-first design surface when you create a data model. If you make a model from your database and then need to change it, change the database instead and regenerate the model.
Well our app goes from using almost no RAM to using over 32 MB of RAM just from loading a PictureBox with a small .jpg file. This OS only allows 32MB per process, anything over that and the app throws an out of memory exception. So our only options are to either use even smaller images or write our own .jpg displayer that decodes and displays it and hope it uses less RAM.
I don't believe ionic zip holds it in memory, are you saving the contents into a stream like memorystream or holding a streamreader open? Could we see your implementation?
What are you asking? What would it cost for someone to make an application or are you wanting to make it? To either of those there is no way for us to say, we don't know the complexity or size of the project.
Sorry, yes. Here is the section which is an issue &gt; using (MemoryStream msDecrypt = new MemoryStream(cipherText)) &gt; { &gt; using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, transform,CryptoStreamMode.Read)) &gt; { &gt; using (StreamReader srDecrypt = new StreamReader(csDecrypt)) &gt; { &gt; using (ZipFile zip = new ZipFile()) &gt; { &gt; &gt; ZipEntry e = zip.AddEntry(filename, csDecrypt); &gt; e.Password = ToInsecureString(zipPass); &gt; e.Encryption = EncryptionAlgorithm.WinZipAes256; &gt; &gt; var ms = new MemoryStream(); &gt; ms.Seek(0, SeekOrigin.Begin); &gt; ms.Position = 0; &gt; byte[] data = ms.ToArray(); &gt; File.WriteAllBytes(destinationPath + "\\filename_example.zip", data); &gt; &gt; } &gt; } &gt; } &gt; } I'm writing from memory stream. Works for everything up to 500mb but anything over and it throws an out of memory exception. Stumped.
My company has .net microservices on Linux in prod for the last month. Everything is good so far and I love it!
How much space left on your hd?
JPEG is by far the most painful image format to decode. I've written parsers that extract some basic info for all major image formats in C# without much problem. But with some JPEGs (there are multiple types) I can't even get the width and height. So all I can recommend is looking into using a 3rd party library first.
That's awesome to hear. I don't know if this is the sort of thing you can share publicly, but I'd love to see some screenshots if you can.
That seems to match what I have found... I wonder if we might be able to save the images in a different format to begin with... May or may not be possible, but that definitely needs to be the next think I look into.
Removed: Rule 4.
I actually did this to adjust the height. The users can swipe to look the content, but what I actually wanted was to adjust the height of all webview so that none of its content are hidden and it takes exactly the same size as its content. I can do it for a page with a single webview control, but with multiple controls, I can't get it to work.
I've attached a handmade layout in this post. Hope that helps to make my case.
Moving toward production here. .net core + linux. The lack of tools on linux for code coverage and static analysis sucks. On the positive side everything can be done on windows including Linux version builds. Also if you do not want to install .net core on linux you can. Just publish your assemblies on your build machine to get standalone set of executables. If you have to run something on AWS cloud then you are OK too. Amazon APIs are available as .net standard Nuget packages. 
WCF is not windows specific. The problem is that WCF is fat and they don't want to take the effort needed to make sure the port works. And that's changed recently: https://www.infoq.com/news/2017/12/Windows-Compatibility-Pack
&gt; .net core is not a subset of the .net framework What does .NET Core have that .NET Framework does not?
&gt; Moving toward production here. .net core + linux. &gt; The lack of tools on linux for code coverage and static analysis sucks. I'm using Windows + .NET Core, but I'm finding that to be a real problem too. Mistakes that FXCop normally catch like `foo = foo` are starting to creep into my code.
CoreCLR, cross platform, proper Span/Memory, cli, had portable PDBs before they were implemented into .net framework.
I dont use any "design surface", I change POCOs directly
If you are using advanced features in EF I would say wait to migrate. EF 6 is more feature rich then EF core. 
I have got several installations of iot monitoring systems in Linux running on mono. In my opinion it is easier to port existing code to mono rather than on dotnet core. Normally I develop in visual studio in windows and deploy to linux machines. I did several tests with core, but in my opinion the ecosystem is still not ready for long term enterprise solutions. For instance mysql support is a pain on ef core. Dotnet core is the new fancy thing, but if you do not plan to deploy to azure or amazon, then go with mono..
Really cool. $800 is a bit much just to be able to use C# though imo.
Try targeting x64 temporarily... all platforms compiles x32 and is limited
I think the general consensus is replace wcf with a web api.
It's hard to say if we are using something advanced. I would say we are not, but how can i know? Code first tables with indexes, foreign keys and navigation properties. Generating migrations and updating via package console. Could be oracle but mostly we use mssql. 
Using it everyday. It’s awesome,
Mysql sucks, true that. Postgresql is a whole other story tho, Shay Rojansky is doing awesome work there
Your one of those people that slow down for car crashes huh! Sorry OP, just a joke. Ayone who can spruike wfc must have their sh%$ sorted.
Do you have any idea how expensive peer reviews are? Yes they work, but they shouldn't be wasted on stupid mistakes like this. 
If you don’t peer review 100% of your code, expensive or not, no linting tool will save you
Distributed transactions? I cant for the life of me think what else, but i am a wcf noob. Ive spent more time complaining about it than actually using it.
It's a good book, but so far it's more of a framework to do functional programming in C#, that just an exploration of the functional topics. So it's hard to integrate the examples/learnings without relying of his code. Incidentally, some programming books get pithy nick-names, Duck Book, GoF etc. I nominate Fuzzy Dick for this tome. 
It's built on a very solid standard (WSDL) and you're abstracted away from any specific transport protocol. Need Http? No problem. Need TCP sockets directly? No problem. Need pipes? No problem. This comes with some obvious limitations of course, but that's a big point WCF is built for.
Physically impossible to read as there is a wierd blur.
Sadly I don’t have access to that application any more :(
Before you go too far down this route, try sanity-checking it by loading a bmp instead. You may well find that that memory requirements are from actually holding the decoded image in memory for the picturebox, rather than the parsing of the encoded data. In which case writing the most perfectly economical jpeg parser is still going to be of zero help to your memory requirements.
Do you think that in the future there could be just WebAssembly written in C# and XAML without need to write HTML, CSS or JS?
What version of framework are you using? If it's version 4.6 above, there isn't much too worry, other than your dependencies. As long as your packages/libraries follow the net standards it should be fine. See this table to see what version of core you should use. http://immo.landwerth.net/netstandard-versions/#
blur?
He specifically said this was not a viable alternative.
Cheers.
It looks like there should be a pop-up but it's missing and so there is no X
July 2019. This is an educated guess, not an officially announced date.
[Github](https://github.com/dotnet/csharplang/milestone/8) says 2080. I don't know who to believe. ^^^/s
Ive converted a winforms warehouse / shipping app to a cloud based mvc + knockout. It was a big change mostly because the way we handled database interaction in a desktop app vrs how you do it in a web based app. In desktop applications you can be much more lazy because you can call the database when ever you want. In web based / cloud apps I found you need to think a lot more about how you can process data and minimize heavy processing and user interaction. These days I would look at something like angular 2 as you can get a much closer to a desktop implementation and minimise the changes required to go from desktop to web. On a side note. If its a rewrite (as opposed to a migration) dont do it with the same people who wrote the original app. If they cant maintain and addapt the existing codebass they cant rewrite it and not make the same mistakes all over again.
Too bad :)
Custom messagebox as in a non-standard MessageBox?
Custom as in a form? FormName.ShowDialogue() in your click event?
I'm confused too. You can't edit the existing message box as that is handled through Windows. So either he has a class and something is marked private or he didn't make a reference or he made a custom form and doesn't know how to call it.
To be fair, that's when it is due not the release date. I think it is safe to say it will be at least 2081 before we see an RTM.
Yes. I know how to make a "standard" MessageBox as I've done so far: private void button1_Click(object sender, EventArgs e) { DialogResult result = MessageBox.Show("Apply changes?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Warning); if (result == DialogResult.Yes) { //code for yes } else if (result == DialogResult.No) { } But I want to use my custom messagebox (which I've created this way: http://prntscr.com/hzxfaa and then selecting Windows Form). So Instead of using 'MessageBox.Show', I want to somehow call my custom made 'customMessageBox' but I dont know how (it doesnt come up if I simply replace MessageBox.Show with customMessageBox.Show).
You mean like Silverlight was?
That's a bit optimistic. 2081 will probably be C#7.6.
Simply: I want to make a custom message box pop up when I click a button. The custom message box will have a text saying "Apply changes?" and the options below should be "Confirm" and "Cancel". How can I achieve that besides writting: DialogResult result = MessageBox.Show("Apply changes?", "Confirmation", MessageBoxButtons.YesNo); (In which ^ case also the options are "Yes" and "No"...) ???? 
Does your custom messagzbox have a Show method?
You had a snippet we could read? We can't help you without seeing your code.
C# 8 and Star Citizen released in the same year. Hype!
Your problem is here: &gt; `byte[] data = ms.ToArray();` What you should actually do is open a new FileStream in write mode and use Stream.CopyTo() to write your memorystream to the filestream. Also you can nest Using statements without additional indentation. So instead you get this: using (var msDecrypt = new MemoryStream(cipherText)) using (var csDecrypt = new CryptoStream(msDecrypt, transform, CryptoStreamMode.Read)) using (var srDecrypt = new StreamReader(csDecrypt)) using (var zip = new ZipFile()) using (var outputFile = new FileStream(destinationPath + "\\filename_example.zip", FileMode.Create) { ZipEntry e = zip.AddEntry(filename, csDecrypt); e.Password = zipPass; e.Encryption = EncryptionAlgorithm.WinZipAes256; var ms = new MemoryStream(); ms.Seek(0, SeekOrigin.Begin); ms.Position = 0; ms.CopyTo(outputFile); } 
Nope, you have it right.
I think I understand. You want the webviews to change size according to their content. So that the content inside a particular webview doesn't scroll or isn't hidden. This can be done. First, I'd recommend (if possible) either doing it all in xaml without webivews. Or doing the entire page in html as a single webview. That will be easier, but requires access to the APIs or data where the html is coming from. If that is not possible, it will require creating custom renderers for both iOS and Android, so that you can 1) get the content size after the html has been loaded so you can 2) raise a SizeChanged event or setting the RequestedHeight. Depending on the latency of loading and rendering the html, the page may update a few times as the content is loaded. Take a look at: https://forums.xamarin.com/discussion/25967/setting-height-of-webview-dynamically 
&gt; For those of you that develop C# code mainly targeting .NET Standard 2 / .NET Core 2, what approach have you found works best for this? Logging isn't in any way tied to the runtime. I have my own logging abstraction that is simply an `ILogger` and `ILoggerManager`. The manager returns new `ILogger`'s. This abstraction then has some simple "pass though" implementations to things like NLog (or log4net if you're a masochist). This way I'm not tied to any specific library, and the abstraction is dead simple. I generally take this approach with all dependencies.
You shouldn't be using File.WriteAllBytes or a MemoryStream.
Nowadays I'd use [Microsoft.Extensions.Logging](https://www.nuget.org/packages/Microsoft.Extensions.Logging).
What you mean by "custom message box" is what is simply called a Windows Form. Create a form that shows your message, pass your string variable to the form, call showform to show it to keep focus. Your button response or "DialogResult" is up to you to design. You add your buttons, you decide how you want to access or return those variables. What you are wanting, an ability to have a templated "Message box" doesn't exist. Once you understand that a message box is just a Windows For, you'll find it's actually really simple to just make a Windows Form window.
The problem is that if you want to run your program on an older version of the framework you will need to compile your program for that version. If the property does not exist in that version then your code won't even compile. 
... You're right. I'm a fucking idiot. Got it working ages ago and moved on never revisited it to question it. I need to buy a rubber duck.
Awesome will give it a look. I much prefer wcf to webapi 
Thank you, I will look on it.
Just create a new form with a label and buttons and a public bool. In your new form, set the bool to true or false depending on the button clicked. Then, in your main form, create a new instance of your form and return the bool value from your new form. Here's a good example on SO: https://stackoverflow.com/questions/5233502/how-to-return-a-value-from-a-form-in-c
log4net is clunky, verbose, just an all round "meh" experience compared to nice libraries like NLog.
Update: I now have Spell Checking in my C# app! I used the NHunSpell Wrapper Component. A little tricky setting up but not too bad. Tackled it early this morning with a fresh brain and coffee. Platform VS2015/C#/WinFoms. I made a sample app to test it out before implementing it in my full app. I'd be happy to post a link to the sample app if anyone is interested. Thanks CSharp community, you guys are awesome!
Have you tried watching videos at a higher playback rate? I watch most technical videos at 1.5x or 2x normal speed and find that doing so helps me pay attention.
Using the win32 api wouldnt it be possible to change the text of the default message box? I am definitely not suggesting this I was just curious if it was possible?
IIRC MS said they will be releasing updates as 7.x, so there is no 8.0 on the horizon.
Well, if I understand your question correctly, maybe you could view the code logic as a gravity fed machine? If you think about it with, say, a function, all your starting information is fed into the top of the machine (parameters), and as the machine takes your information, the information is used and transformed into a new set of data that will fall out the bottom of the machine (return statement). That make sense?
odd. we have no popups on the blogs site. can you send me a screenshot? What browser/os are you using?
Let's say that I have a character with let's say 10 hit points. I want to kill the character at 0 hit points, and if the hit points reach 10 or above I want to set the hit points to 10 to prevent the character from getting more than 10 hit points. if(hitpoints != 0) { // Some code here } Where should I use this statement in relationship to the next statement? if(hitpoints &gt;= 10) { hitpoints = 10; } 
Same year the new Tool album is slated for release :p
That one hurt.
Sure, [here.](https://imgur.com/WhSoxYV) I am running Chrome 63 on Windows 10. As you can see, AdBlock is disabled and there are no other extensions that change page contents.
Typically, those kind of comparisons can be done in a single if-if/else chain or a switch statement where order is not necessarily important. In your code example, since either having health at 10+ or at 0 are two separate logical conditions, we can just have a statement as such If(health &lt;= 0) Player.Die(); Else if (player.health &gt;=10) Player.Health = 10; This can be flipped where health &gt;= 10 check comes first and the results are the same.
It wouldn't be so bad if you'd just format it a little more spaciously: List&lt;Vehicles&gt; veh = objs .AsParallel() .Where(c =&gt; cap.Match(c.Test())) .Select(x =&gt; x as Vehicles) .Where(a =&gt; a != null &amp;&amp; !cap.SourceContains(a)) .ToList(); I see you use Select with 'as', after which you check if the cast didn't return null – would be much better to just use .OfType&lt;Vehicles&gt;() instead.
The nullreference crackdown is part of 8.0 I assume we'll go to 7.4 and in the end of 2018 we'll go towards 8.
'Nullreference crackdown' ... please explain
De 'nullreference crackdown' is officially known as 'Nullable Reference Types' and is anounced here: https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/ TLDR: it's an opt-in feature where you have to explicitly mark variables, parameters, fields, etc of a reference type to allow null, using the ? suffix, like we already can for int?, DateTime?, etc.
https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md
Some what. The health check should only do one thing. Check health. If health meets a condition, like health &lt;= 0, it should tell the player to die(). At that point, it would be the responsibility of die() to either change how the player behaves in a game, or to tell another function which has a bigger scope (like a game script) to do something like delete the player.
They are planning on introducing nullabe reference types and making non-nullable the default. That way the compiler could be used to prevent dereferencing a value that might be null. The proposal for this can be found here: https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md
I like this code. Clear and concise.
So do I, but Swagger has pretty much won the standards war and solves all of my major problems using REST on .NET. Plus I never have to actually look at Swagger files. I just add a couple directives to my startup.cs and it automatically generates everything for me. It even has a nice test page so I can try out my REST calls without building a one-off client or messing around with some stupid command line tool. 
Some more reasoning/an example for this separation of concerns: Let’s say I have a game where when I die all enemies on the screen do a victory dance, a sound effect plays, the screen goes red, etc, etc. If I organize my code where all the code relying on a player dying is in my health check, I could end up with a really long, hard to read function that does a whole bunch of things. If I organize it where I have a method “Player.Die()” or “OnPlayerDeath” in my engine to manage my death events, I can call that single method when my player dies and it becomes much more readable and easy to maintain the various death events that could happen.
Thanks.
Leveraging the various methods LINQ provides to do what they're designed to do, you'd want to use OfType&lt;T&gt;(): var veh = objs .AsParallel() .Where(c =&gt; cap.Match(c.Test())) .OfType&lt;Vehicles&gt;() .Where(a =&gt; !cap.SourceContains(a)) .ToList(); Or with C# 7 and later: var veh = objs .AsParallel() .Where(c =&gt; cap.Match(c.Test()) &amp;&amp; c is Vehicles a &amp;&amp; !cap.SourceContains(a)) .ToList(); 
You’re assuming that future implementations of Guid will return a fixed length. 😁
I prefer the 1st version. 2nd one has too long of a line making it less readable
Thank you!
This'll get you started https://lostechies.com/derickbailey/2009/04/18/decoupling-workflow-and-forms-with-an-application-controller/
The amount of times my manager praised my use of LINQ statements when it was ReSharper that did all the leg work was amazing. What wasn't amazing was being the go-to guy for LINQ related questions for about 2 weeks before people cottoned on I have no idea what I'm doing.
It seems you have since found your underlying issues. I suggested building x64 more as a debugging step than a solution. Very few programs legitimately need that much RAM so you should always look at other possibilities first.
By most standards that is pretty good linq. As others have said put each call on its own line and use OfType to clean it up.
Yes, it is this human thing we call a joke :P
Any code that affects the program as a whole should be moved to a separate class or method that way it can be reused or accessed throughout the whole project.
I use methods as well, another question where to place them.
Inside of a separate class? Lol.
&gt;I think I have to put #1 and #2 in separate class, keep #3, #5, #6 in original class, #4 in separate class i believe that #5 and #6 don't have to be in the main class since it's related to the **screenshot** and you should also but the hotkeys on a single class so that you will be able to add few settings like stop/start listening and to avoid to execute the command when a certain game or program is opened. idk it's up to you. note: i think you should use pinvoke instead of the form event http://www.hankerspace.com/en/c-keylogger-and-mouselogger/ about the winforms settings you can add IsChecked parameter
For many use cases winforms is perfectly fine. Why should I use WFP if I need a simple native (to windows) looking UI.
Because if the requirements for your app ever evolve (e.g. needing to adapt to different resolutions), you or the guy who becomes responsible for the project after you will be in a better position to handle that. What advantages does WinForms have over WPF anyway?
Unless you want to exclude null objects that were of the Vehicle type. Switching to OfType would result in that small potetional difference result sets. 
Nope. https://dotnetfiddle.net/HNiUXZ
I'm not sure you're right: https://dotnetfiddle.net/yqZvvn
Well, live and learn. I never would have expected OfType() to not return objects of the correct type. That feels wrong to me, but I'm sure there's a reason. 
Null isn't _an instance_ of type T.
Oh, of course, if it's not stored in a variable to give you the type info, there would be no way to know what it was... thanks for keeping me honest!
Hmmm List&lt;Vehicles&gt; vehicles = new List&lt;Vehicles&gt;(); Parallel.ForEach(objs, (obj) =&gt; { if (cap.Match(obj.Test())) { var veh = obj as Vehicles; if (veh != null &amp;&amp; !cap.SourceContains(veh)) { vehicles.Add(veh); } } }); Now if I had to rewrite the LINQ: List&lt;Vehicles&gt; veh = objs .AsParallel() .Where(c =&gt; cap.Match(c.Test())) .OfType&lt;Vehicles&gt;() .Where(a =&gt; !cap.SourceContains(a)) .ToList();
Probably because you typed "Lol" at someone who was asking for advice. Also, your advice is 1) bad. 2) proscriptive
Just a guess, but I'd expect the first preview bits at //BUILD/ with a release around July August timeframe
This is neither hard to decipher nor abusive...
You forgot the `lock` on vehicles in the first example. 
ahh, right. Forgot that List is not thread-safe
That's why I love `AsParallel`; it's far less error prone.
Would love to know how it's bad, enlighten me.
Windows Embedded. Only the Windows 10 IoT can do it. Windows 7 embedded which is still supported is a nightmare of you even considered WPF. Another example, NetBooting Windows 10 IoT. On some hardware, WPF is so slow it takes 5 seconds to register a click. This is all because WPF relies on graphics with direct x. Software rendering gives small performance gain. Windows Forms performs beautifully. Not all software development is for a desktop PC and can or be allowed to use the presentation framework. This is the Enterprise and embedded world. WinForms has its place.
WPF has its uses and WinForms has its uses. Microsoft never ever said or hinted that one is deprecated or to be used over the other. You are definitely right in your thinking. Less experienced developers tend to cling to what they learned first and some get intimidated and feel threatened when something they don't know comes up. Experienced developers consider each projects scope, resources, and use cases and develops with what tools are best for that job. It's like nails vs screws. You can build with both, but they should not be used exclusively over one another.
Bah, that's not much LINQ... Why .ToList though? Eager evaluation is bad etc...
I would do it in the setter for health. Then no matter how they take damage, you can do it. 
There should be a service that captures the screenshot and a service that saves it. The second service could probably open the containing folder in an explorer program, but that is still a different responsibility. The ToClipboard suffers the same problem. What if you needed to put other types of objects on the clipboard? Should those all go in the same service or at least follow the same interface? At best, you are suggesting a bunch of static methods, which means the code you are writing is difficult to mock and test. At worst, you're suggesting that the methods are not static, and any possible usage of the class must modify the class instead just accepting it as a parameter. You have suggested tying filesystem, clipboard, and screen capture apis all into the same class that should only be a DTO. 
As is typical for Java libraries really.
Sick&amp; bro;
By sanity-check I mean a cheap quick check to see that the goals are even attainable, that even if you had an extremely low memory parser, just displaying the decoded image might still take up too much memory. So convert your jpg into a bmp file externally, then see if you can paint that without going over-budget. The parser for bmp is trivial, so you can discount that as a source of memory issues.
Reasonable point but the Microsoft abstractions aim to provide a common base for compatibility across loggers. The point of using M.E.L.A is that you can use any logger that uses that abstraction without adding facades or whatnot. It's never quite that simple, but that's the theory. 
Meh. Try this: public static IEnumerable&lt;ActionTarget&gt; GetTargets(IEnumerable&lt;IController&gt; controllers) { var cmap = (from c in controllers let ctype = c.GetType() let interfaces = (from i in ctype.GetInterfaces() where typeof(IController).IsAssignableFrom(i) &amp;&amp; i != typeof(IController) orderby i.GetInterfaces().Length descending select i) .ToArray() where interfaces.Any() let cnames = interfaces .SelectMany(i =&gt; i.GetCustomAttributes(typeof(ActionNameAttribute), false)).Cast&lt;ActionNameAttribute&gt;() .Select(n =&gt; n.Name) .Where(n =&gt; !string.IsNullOrWhiteSpace(n)) let methods = (from i in interfaces from m in i.GetMethods() where !m.IsSpecialName let matrrs = m.GetCustomAttributes(typeof(ActionNameAttribute), false).Cast&lt;ActionNameAttribute&gt;() let mnames = matrrs.Any() ? matrrs.Select(a =&gt; a.Name) : new[] { m.Name } from name in mnames select new { Name = name, Method = m }) select new { Controller = c, Names = cnames.ToArray(), Methods = methods.ToArray() }) .ToArray(); var actions = from c in cmap from n in c.Names from m in c.Methods select new ActionTarget(n + (string.IsNullOrEmpty(m.Name) ? "" : " " + m.Name), c.Controller, m.Method); var defaults = from c in cmap from n in c.Names where !c.Methods.Any(m =&gt; string.IsNullOrEmpty(m.Name)) select new ActionTarget(n, c.Controller, c.Methods.Select(m =&gt; m.Method).First()); return actions.Concat(defaults).GroupBy(g =&gt; g.Name).Select(g =&gt; g.First()); }
Shipping as key feature of VS2019 would be a MS typical move.
The keyword you need is: Model-View-Controller, or in short, MVC. 
I created this beauty for a school project. // atradīsim katras komandas rezultatīvāko spēlētaju return this.GenerateAttackersTable().GroupBy(s =&gt; s.TeamName, (key, g) =&gt; g.OrderByDescending(s =&gt; s.Goals) .ThenByDescending(s =&gt; s.GoalsAfterPasses) .First()) .Select(g =&gt; new Custom1Entry() { TeamName = g.TeamName, Player = g.FirstName + " " + g.LastName, Goals = g.Goals, GoalsAfterPasses = g.GoalsAfterPasses }) .ToList();
I love that feature and it's helped me learn Linq because I would study what it did. But generally if I don't immediately understand what it gave me I revert it. No use writing code you can't even decipher yourself.
this is new
I think I remember now that it is actually loading the image as an Image object that takes up the memory, not the act of displaying it. I definitely have some further testing to do to find out exactly what I need to accomplish. Anyway, I now have a solution in mind that I think will work and won't require decoding the images myself. I think what I said about that OS function call going over 32 MB all on it's own is not true. I think it gets close, and our app is not using that much memory, but any amount more than normal that our app uses is probably enough to make that function call go over 32 MB. So I am going to display the photo from a separate app that runs in a separate process so it can use up to 32 MB of memory just to display the image. The first program will start the second one and wait for it to finish. The second app will only display the image and wait for a user action, of which there are only 2, then it will output their action as text and close down. The first program will wait for it to close and then proceed with the action they chose.
Sounds like a plan. Plus there's bound to be some heavily optimised minimal single purpose image-displaying program written in c or asm or similar around somewhere...
new 
Thanks for the input, I'm always trying to improve my LINQ.
`HttpClient` https://www.google.co.uk/search?q=Is+there+an+alternative+to+WebClient%3F&amp;oq=Is+there+an+alternative+to+WebClient%3F&amp;aqs=chrome..69i57j69i60&amp;sourceid=chrome&amp;ie=UTF-8 ...
Hmm, I saw this before but when I tried to use it I found it harder to properly handle with downloading files. I probably didn’t look into it enough and blew it off prematurely. I’ll take a look into it. Thanks!
I wrote a RDP client (well used the ms control) I find i have to import the following registry entry on the server (or desktop OS) for it to work Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp] "SecurityLayer"=dword:00000000
HttpClient seems the standard at the moment. It's simple to use yet is powerful too. Persevere with it and it'll pay off
I was around when WebClient was the go-to class for everything. I want something faster and I heard people talking about HttpClient but upon using it, I felt like it was for a different purpose. I guess I was wrong. A lot of my project uses WebClient but I’m going to work at stripping it down and putting this up, just need to learn it first.
If you're making libraries, then use LibLog. https://github.com/damianh/LibLog Rather than taking a dependency on an abstract logger package, you install it as source code, and it acts as a Port, so you a consuming application can use any log library without getting into version hell.
Have you personally used this with libraries targeting .NET Standard 2 and using the new csproj format? Torn between this and `Microsoft.Extensions.Logging.Abstractions` like others recommend.
Github presentations like this always leave me feeling stupid. OK, I get that RPC stands for Remote Procedure Call. I don't know much about those. I used them last in 2001, maybe. I go to the github page and there's some code -- but no explanation of what it does. I guess it's obvious if you're not an idiot. AS AN IDIOT, I always wonder "After going to all the work of creating the library and bringing it to reddit's attention, why doesn't it make sense to include a few comments for the retarded people like me?" I know that I'm a dinosaur and I don't do things the way the kool kids do. To illustrate how moronic people like me can be guided by comments, here's a method I wrote who knows how many years ago, randomly selected from my code base, which I've long forgotten -- which I have just *read* and now I know what the fuck it does. public static string GetFileNameWithRelativePath(string originalFolder, string newFolder, string fileWithPath) { // Pass in an original folder path, a new folder path, and a file on the original // folder path, and this will return a full path starting with the new folder path // and preserving the file's relative subfolders and file name. // Example: // // Original folder path: C:\data\dropbox\books // New folder path: C:\myBooks // File path: C:\data\dropbox\books\computer\c#\linq\Expert LINQ.pdf // // Note that the file is on the original folder path; that's a requirement. // // This method will return: // // C:\myBooks\computer\c#\linq\Expert LINQ.pdf // // This method will also make sure the new folder path is necessary, creating // the computer, C# and linq subfolders, if any of them are not already there. // // The method throws an exception if the file is not on the original folder path, // i.e. in the original folder or one of its sub-folders. In that case, what would // "relative path" mean? Relative to what? // Get the file's old path string oldPath = Path.GetDirectoryName(fileWithPath); // For some reason, sometimes, the original folder ends with a slash, so it doesn't replace anything in the next row if (originalFolder.EndsWith(@"\")) originalFolder = originalFolder.RemoveLast(1); // Remove the target path string subFolder = oldPath.ToLower().Replace(originalFolder.ToLower(), ""); // If the subfolder is the same as the old path, that means the file is not // in the target folder or any of its subfolders. That's an error condition. if (subFolder == oldPath) throw new ArgumentException("The file has to be in the original folder or a subfolder of that folder."); // Development: Testing how a slash at the end of newFolder is handled // f.AddSlash(ref newFolder); // Build the new path. The Replace() is in case the new folder ends with a slash. string newPath = (newFolder + subFolder).Replace(@"\\", @"\"); // Make sure the new path exists, creating it if necessary f.CreateDirectory(newPath); // Build the new FULL path string oldFileName = Path.GetFileName(fileWithPath); string newFullPathName = Path.Combine(newFolder + subFolder, oldFileName); return newFullPathName; }
Xamarin with/or UrhoSharp? Are we taking something like a card game?
A 2d text adventures.
Sounds interesting! I've been working on a text based MMORTS (graphics kinda like "A Dark Room"). I'm using bridge.net to write the client code in C#-converted-to-JS
Is there any pros to using DOM? Wouldn't it to be faster just to use a GUI framework or are you supporting web browsers?
I am on my phone currently, so I can't check if there is a gui option for this. If there isn't, you can add the manifest file normally and then edit the .csproj file to add the following in the a PropertyGroup without any conditions (so that it is added every time): &lt;PropertyGroup&gt; ... &lt;ApplicationManifest&gt;app.manifest&lt;/ApplicationManifest&gt; &lt;/PropertyGroup&gt; If you have any project which has a manifest, you can check in its .csproj file how exactly it is included. Or just find a project on GitHub.
This really one of the only thing I can do right now. That is something that needs to be added as a feature in the future of the JetBrains development. What makes it worse is, as far as I know, you can’t edit the code of the .csproj file in Rider which only makes it more tedious than it has to be.
So how do you run the code there?
OK let's make "null reference crackdown" a thing. Everyone start calling it this from now on!
Well you asked: &gt; Where do you keep your code snippets? Do you want to store them or run them? I run my code locally, with the free version of visual studio ¯\\\_(ツ)_/¯ 
Nah, I am not the OP but you are right. I never used dotnetfiddle to keep snippets though so I find this strange. I use it to link to some proof of concept code usually when I have a question or an argument about some behavior with people who might not necessarily have VS open at the moment.
You can edit it in Rider if you unload the project. I agree, it is inconvenient. You can check the rider issue tracker and feedback page to see if this feature has been requested. Jetbrains adds these things at quite a good pace, but even so Rider still feels quite unfinished.
I definitely agree on that, it needs a lot of work but I still prefer it over VS. I really want this IDE to shine.
go to codewars.com and you will see some serious abuse.
You could create a bridge between managed and unmanaged by creating a c++/cli mixed mode dll, this avoids pinvoke. Then your wpf can reference the bridge only. The bridge can make the native c++ call and transform the results into a safe managed collection.
Yeah that's another option I came across which frankly I've been avoiding. The syntax of C++/CLI is a bit scary for me. But how would the layout look for that? WPF &lt;- C++/CLI DLL &lt;- native device DLL 
I'm not the most versed in P/Invoke and I could be completely wrong about this, but maybe you can use Marshall to allocate an array of your structs in the unmanaged heap. You'll be given an IntPtr to the 0th item and maybe give that to your C++ API? Also, are you sure it is an array of structs or is it an array of struct *pointers*? I would imagine it would be the latter.
Can you be more specific ?
I actually quite like C++/CLI, but I'm also a C++ developer so it's already in my wheel house. Fun fact is that the Microsoft internal name for it used to be IJW for It Just Works. Your arrows are correct.
It is similar to Fleck, except it has an included infrastructure for RPC + it generates JavaScript client automatically. If you only need to exchange the 'raw' messages that is supported out of the box: https://github.com/dajuric/websocket-rpc/blob/master/Samples/RawMsgJs/Program.cs
Thanks!
Thank you Bradley.
Thank you very much!
Hmm.. yep that actually makes sense, I got a similar suggestion from someone else. So basically I allocate space on the unmanaged heap, get a pointer to the 0th position, pass it to my function (along with the size of allocation), the function will populate it, then I can use something like: Marshal.PtrToStructure To recover the structure data? Of course I assume I'd have to free the allocated memory after. Now because I'm running the function call in a continuous loop (to keep getting the data), would I have to free the IntPtr on every loop iteration, or would the old data be overwritten by the new data and then I can free the memory once data acquisition has stopped? I hope my question is clear.
Thanks. And yeah, I'll leave C++/CLI as a last resort, I got some suggestions for how to use IntPtr to potentially achieve what I want so I will try that first.
Yup. Also, Im hoping someone will chime in and show a pinvoke signature that will work with an array of structs... because I feel like that should work.
Yea, I would definitely try what you described. Regarding allocating heap memory, you absolutely need to free it. The best way is to wrap it in something like this: https://stackoverflow.com/questions/3525932/should-marshal-freehglobal-be-placed-in-a-finally-block-to-ensure-resources-are Then you can be sure it is freed after you're done. I would definitely try experimenting with allocating the memory once and just passing it back in to be overwritten. Allocating memory is expensive so once you got your block just keep reusing it.
Remember, if you use HttpClient, while it is disposable, best practice is to make one static instance and keep reusing it, else you can get socket exhaustion from destroying and re-creating HttpClient instances with a using block, for example - especially if sending out 100s of thousands a request a day in a service or long running program. Using the same isntance make it keep using the same sockets as much as possible.
Unfortunately I won't get to try it out until tomorrow as I can't test it without my device which is in my lab :-( but thanks for the comment!
Try this signature instead: public static extern int GetSynchronousRecord(ushort sensorID, [Out] DOUBLE_POSITION_ANGLES_TIME_Q_RECORD[] record, int recordSize); You may also have to specify `Pack = 1` on the struct layout depending on what the native struct looks like. 
As a starting point, I dislike how closely some of the base class library (especially I/O and security stuff) is quite closely tied to/modelled on Win32 style APIs. It was fine when C# exclusively ran on Windows but I think in hindsight anything that even breathes on Windows API stuff should be in a namespace that isn't System. .NET core has done a good job of de-Windows-ifying the entire framework while maintaining as much backward compatibility as possible, however, and while the continued usage of .exe and .dll on Linux will always make me squirm a bit, I still get blown away that MS have their own official supported .NET framework for Linux.
I might take a look into it. It looks like it may be a little robust for what I need though, but I will see.
MS continues to do things that set .Net back for literally no reason. .Net is a great language, and there's been a number of features over the years that have been added that have been great. Unfortunately, I still feel that .Net hasn't gained the traction that it's arguably due, mostly because MS keeps making bad decisions for no reason. It started off with the introduction of .Net and the potential for the CLI to be reimplemented cross pattern. Mono took hold, but rather than coming out and releasing a statement that they wouldn't sue people for using it, they never quashed the fears that MS might go after some humble linux dev for having interest in developing for .Net. Then there was the whole Windows 8 debacle circa 2011/12 when it wasn't clear whether MS was killing off .Net for something else or not. Now there's this whole .Net Standard thing, which is just generally confusing to those that aren't following the development of the framework or core super closely. At the end of the day, I feel that .Net could be far more widely adopted and used, had MS taken a different approach with it. They started with the goal of competing with Java, and on a pure language basis, they definitely created a better product. But they didn't support the open source community or the education community soon enough, and that led for .Net to be far more "enterprise" focused than it had to be. Just my 2 cents
Lots of cruft that accumulated over the years and won't be removed because of backwards compatibility. - lacks of generics in C#1, and resulting from that - every `IEnumerable&lt;T&gt;` having to implement `IEnumerable` - many old libraries only using non-generic collections - all arrays being covariant even though no one ever uses or wants that functionality - many APIs only taking array parameters - late addition of `IReadOnlyList&lt;T&gt;`, resulting in a lack of library support and a crummy `IList&lt;T&gt;` interface - at least three different asynchronous patterns, usage being randomly spread through libraries based on time of release - (soonish) lack of support or multiple overloads to deal with `Span&lt;T&gt;` etc.
I think most of the criticisms against it really go against .NET, but because of how closely they're linked most knocks against .NET are knocks against C# (I think that's interesting). Others have commented on those very well. Language-wise, from a design perspective, there are a few syntactic inconsistencies, some of which are being fixed (you can join the discussion on this on GitHub now!), as well as a bit of bloat starting to come into the language as more and more features are added. That's my biggest gripe, design wise.
You did not really show the data structure behind your `void*`, so it's hard to say. Offhand, Mrashal.PtrToStructure is your friend if you have complex data - that's all I can say. However, if you are on standard .NET with this - learn C++/CLI and use that, would be my advice. C++/CLI makes the compiler do your P/Invoke work for you in a type-safe manner. (That said, that `void*` already eschews it, so crap). P/Invoke is a horribly manual (meaning: error-prone, no safety net whatsoever) way of doing it.
Here is a previous discussion https://www.reddit.com/r/csharp/comments/7lzso3/what_are_the_weakest_points_of_c/
Pass a `ref` to the first item rather than a ref to the array (which has length and other data before the elements) ``` // Define Array of Struct for each sensor DOUBLE_POSITION_ANGLES_TIME_Q_RECORD[] record = new DOUBLE_POSITION_ANGLES_TIME_Q_RECORD[8]; // Get data from ALL sensors (0xffff) errorCode = GetSynchronousRecord(0xffff, ref record[0], Marshal.SizeOf(record)*8); ```
No. It’s just not designed to serve static files in a most efficient way.
Packing depends on the compiler settings. You *probably* don't have to change the default, it's just something to try if it doesn't work otherwise. I think the signature is more likely to be the problem. Arrays are already reference types and map to `T*` by default. Passing an array by ref would effectively be `T**`, or a pointer to a pointer.
I'll see into it, thanks!
Use this: https://github.com/foxbot/Discord.Addons.Interactive
Honestly shocked no one has mentioned LINQPad yet.
Trying to keep it language related and not .NET Framework related, I think await is a step in the right direction but async code has a lot of issues http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/ I can't think of anything else to do with the language off the top of my head, but in terms of general framework stuff - C# lacks a good native cross platform UI toolkit.
The only thing sad that i see, is that you need to implement Progress-Reporting on your own (or use a library) But implementing one is not that hard, the standard-libraries have all it takes: https://pastebin.com/nC5yuAkQ
&gt; I think await is a step in the right direction but async code has a lot of issues Like what? Only case I can think of is that the default for CA is true.
Technically true, but an utterly useless distinction from a practical perspective: how often are you actually going to use C# without any of them?
I'd say one main criticism that I hear a lot is cost. Obviously there is VS Community for individuals, as well as now VS Code, but if you want a fully supported development environment with all the bells and whistles that VS Pro/Enterprise offer, it's gonna cost you. Enterprises get better deals due to volume licensing, but it's still comparatively expensive. My company is actually making a gradual shift to Java development in certain areas for this reason.
Not often, but these two things are mostly developed independently. It's just a pity that the focus on the language is always blurred with framework functionality.
But there is?
To be honest, none of the great IDE’s are free and VS is by far the best I’ve ever come across. Except for it hanging every now and then of course. 
I'm not sure what you linked is supposed to be but there is no way to ensure that the generic T constraint has the '+' operator. Or any operators.
I registered the Data-Handling as singleton in the DI-Container. `new SQLiteConnection(DbPath, SQLiteOpenFlags.FullMutex | SQLiteOpenFlags.ReadWrite | SQLiteOpenFlags.PrivateCache);` This held enough for our purposes of a more read that written to database. In Code you can't dispose the Database (The interface allows it, but its empty, to allow using-blocks and easy change of data-service)
True, generic constraints are very limited. I'm often forced to use dynamics which kinda defeats the purpose.
Ah right, I missed the operators part and read it as parameters. 
^ This. You don't really want to be using C++/CLI in this day and age, especially for bog-standard interop like this.
I occasionally miss java enums, they are just so much better that the c# variant. Take a [look](https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html) here. Having the individual enums be objects allow them to have behaviour, which can be insanely usefull. C# allows extension methods on enums, which sorta can do the same, but not really.
As it should be, otherwise tonnes of people who don't understand what a synchronisation context is and when they should care about it would shoot themselves in the foot daily. And they do already; and the concept of what exactly the synchronisation context is isn't exactly the easiest concept to grasp. Moving forwards to .net core it's not needed at all, so that's nice.
Yea...learning a lot about memory stream recently. Good to know and the x64 was also great information thanks!
Android developers use static final ints because enums are too heavy. I miss C# enums in Java/Kotlin.
Generic constraints to Enums is something I've run across. Apparently its even doable in .NET IL, just a limitation of C#. 
I guess you're right, but most people don't use C# without some form of the BCL, so it's still kind of relevant.
Only if you're writing a .net standard library - if it's a .Net core library then you're good.
Should we do a real world argument instead: Flat head screwdrivers vs the cross ones, leggo Which ones better?! 
I have not used identity in a while, but IIRC, you need to configure identity to take emails as usernames. I’m on mobile, but I think this stack overflow answer might be what you are looking for. https://stackoverflow.com/questions/26726750/identity-email-with-dash-in-asp-net-identity/26738577#26738577
&gt; They are planning on introducing nullabe reference types I’d say that those are already here :p
This is [in the pipeline](https://github.com/dotnet/csharplang/issues/164) for a future version of C# :-)
No. Assuming there is no synchronization context just because you're using .NET Core is not a good approach. Nothing prevents the user from using a synchronization context in .NET Core projects. For example I could imagine that applications using AvaloniaUI will have a synchronization context (for UI stuff), but it's a .NET Core application. If you're a library author, you still should care about it. Doesn't matter if .NET, .NET Standard or .NET Core.
They are only here implicitly. This proposal introduces explicit nullability.
Yeah, I've heard about it but it doesn't seem like it will make it to c# 8. :(
Yep, good point. Operator overloading and constraints work amazingly in F#.
To be fair, the .exe and .dll are more convention than anything when talking about the CLR on a Linux system. All of the info needed to execute a binary is within the binary itself. You could rename it (and I have, on Linux) to an extensionless file name and be just fine. 
Non generic collections still have their uses, since if you were interested in just an Ilist for adding then you'd need a specific IList of type T. With an IList you can just add, if you are certain of the type/compatibility.
That's a fair criticism. VS is definitely one of the best IDEs on the market, but it can be prohibitive for some orgs, particularly small or new ones. When I have worked .NET jobs in the past, the companies have generally provided MSDN access for developers, but that comes with its own host of costs. In the grand scheme of things, though, a few thousand dollars is a drop in the bucket for a lot of companies. 
Do you have any idea why all the methods for HttpClient are asynchronous?
It’s a wrapper, but dam it’s good! http://tmenier.github.io/Flurl/
C# has those: it's called a class. All Java has is classes and methods, nothing else. Enums keep with this typical tradition: they're just classes that inherit from a class called Enum. If you want to do this in C#, just define a base class (e.g. Enum) and subclass any "enums" under it. In the base class add this parameter and method: public static const Type PARENT = typeof(Enum); public static IEnumerable&lt;Type&gt; Values() { foreach (var a in AppDomain.CurrentDomain.GetAssemblies()) foreach (var t in a.GetTypes()) if (t.IsSubclassOf(PARENT)) yield return t; } Aside from a bit of syntactic suger what is this approach missing that java enums have?
See that's what I thought about the array being a reference. But if I pass just the array name without ref my program doesn't crash but the GetSynchronousRecord also doesn't modify my array at all (just stays blank). 
Yeah currently I have it working with the fixed array unsafe code. I'll try your suggestion about passing in a ref to the first element. That makes sense to me why it should work, I'll give it a shot today, thank you!
You do need the `[Out]` attribute, otherwise the array won't be marshaled back.
Ah I see, so would I also have to use the [In] attribute so that the managed struct gets marshalled over to the function? Like [In, Out]?
Only if you need the contents of the managed array to be marshaled into the native function. You're just passing a blank array to be filled here, so it doesn't matter.
Phillips and Robertson are both better than flat.
https://www.visualstudio.com/vs/visual-studio-mac/ Visual Studio for Mac is free and awesome. Very capable and fast.
 public class RegisterViewModel { public string Title { get; set; } public string FirstName { get; set; } public string Surname { get; set; } [Required] [Display(Name = "Username")] public string Username { get; set; } public int CustomId{ get; set; } [Required] [EmailAddress] [Display(Name = "Email")] public string Email { get; set; } [Required] [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 6)] [DataType(DataType.Password)] [Display(Name = "Password")] public string Password { get; set; } [DataType(DataType.Password)] [Display(Name = "Confirm password")] [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")] public string ConfirmPassword { get; set; } } public async Task&lt;ActionResult&gt; Register(RegisterViewModel model) { if (ModelState.IsValid) { var user = new ApplicationUser { UserName = model.Username, Email = model.Email, Title = model.Title, FirstName = model.FirstName, Surname = model.Surname, MosaicId = model.MosaicId }; var result = await UserManager.CreateAsync(user, model.Password); if (result.Succeeded) { var code = await UserManager.GenerateEmailConfirmationTokenAsync(user.Id); var callbackUrl = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme); SendRegistrationEmail(user, code, callbackUrl); return RedirectToAction("Index", "Home"); } AddErrors(result); } // If we got this far, something failed, redisplay form return View(model); }
Right, okay will try this out today. Thanks for the information!
Email and UserName are the same by default. The table is populated with both and they are set to the same value.
[RestClient](https://github.com/NimaAra/Easy.Common/blob/master/Easy.Common/RestClient.cs) and here's a write up on why: [Beware of the .NET HttpClient](http://www.nimaara.com/2016/11/01/beware-of-the-net-httpclient/)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [.NET Concept of the week – Weekly videos about C#\/.NET Programming](https://www.reddit.com/r/dotnet/comments/7qkgax/net_concept_of_the_week_weekly_videos_about_cnet/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
This
You're finding that the controller is complicated to mock because it's depending on too many things. The big hint here is the disproportionate size of the Arrange section of your test compared to the Act and Assert portions. DbContext is one of those big APIs that, while you can put it wherever, really should not be put wherever. As you've discovered, the extent of its configuration is useful in terms of actually making the application work, but it comes at the cost of testability. So, *don't* mock DbContext - instead hide it behind interfaces that has the minimal API for a client who needs what it offers. Then, inject those interfaces instead of the DbContext itself. Ideally, the only place your app deals with DbContext directly should be in the Startup, and in your subclass that configures it. Now your controller will be easy to test, since you can mock/stub small interfaces easily. Now while you're doing this, also refactor the controller to use Action Injection rather than Constructor Injection where appropriate. Ideally, you shouldn't have to give the controller any more dependencies for a single test than it needs to perform a single action. You'll know you're doing this right when the Arrange section of the test is proportionate to the size of the Act and Assert sections. For example, you might write the Login post action to have the method signature `IActionResult` Login(LoginViewModel vm, [FromServices] ILogin login) which simply calls the .Login(user, pass) method of the ILogin interface, and redirects the user accordingly. At runtime, you may configure the dependency injection system to inject a DbContextLogin which implements ILogin using a DbContext, but at test time you only have one method to mock. As for your final questions: The way C# and most OOP languages work is that you can return a ViewResult from a method that has a return type of IActionResult because a ViewResult is a subclass of IActionResult. The return type determines what the caller of the function sees - not the actual return statement. So, if your view always returns a ViewResult, there is no harm in making the method return signature a ViewResult. In that case, you want to assert that the ViewResult has the correct view model you expected to be passed to it. If the result may be different, maybe the action redirects sometimes instead of returning a view, then you need to make the return type the common superclass of all the possible return types, which is usually IActionResult when doing ASP.NET Core. Then to test, you write code that causes each case to happen, asserting that you got the expected type of result back, and maybe inspecting the result if applicable, such as making sure the redirect was to the right place or if the view model was set. 
That's syntactic suger, and [can also be simulated in C#](https://stackoverflow.com/questions/708911/using-case-switch-and-gettype-to-determine-the-object). Of course the suger in Java is more handy.
Neat! I'll definitely be checking these out.
Unity will handle all the 3D for you, and there are a few assets on the store for handles/gizmos, but UI in unity has a harsh learning curve...
&gt; Wait ... how do you use code first without also adopting its migrations process? Switch to something like [FluentMigrator](https://github.com/fluentmigrator/fluentmigrator). That's what we've done. EF migrations are the devil. In addition, FluentMigrator migrations can be integration tested using xUnit/NUnit/etc.
Just wanted to update that I tried it with allocating the memory once and then overwriting the block on each iteration and it worked like a charm as far as I can tell.
Just wanted to update that I tested out your suggestion and that did the trick. Really I was just missing the [Out] attribute on the parameter passed, and then I pass the array WITHOUT ref and bam, working beautifully. 
I used to be a hard core Visual Studio junkie, but have completely migrated to dotnet cli and Visual Studio Code on MacOS. My workflow is now much faster than constantly waiting for bloated Visual Studio to do its thing. Give it a shot. 
If you're just doing .Net core apps, you can get away with VS Code + the c# extension for it. 
Cool! Thank you for your contribution :)
Could you elaborate? I'm not seeing how the iterative part would benefit over simply returning early from a typical method.
I wouldn't say that .Net Standard superseds Mono, as Mono is an implementation of .Net Framework for Linux systems. .Net Standard by contrast is an API to interface with all .Net implementations, including .Net Framework, Mono, .Net Core and more. While this is great for potability, if you're developing for a specific platform in mind this is way overkill and Mono should be targeted. But to be completely honest, if you wanted to make a cross platform .Net application, if .Net Core has the features it needs, it's probably better to just target .Net Core as it's maturing quite well now.
In fairness, you can get that with the pattern matching in C# 7's switch. It compiles down to a bunch of `is` operations and type sniffing, but you do get that option, now.
It's awesome actually. I use it daily on both Mac and PC 
Is there any reason you prefer this over Discord.NET? It's the only .NET library I've used for Discord bots.
The key is that the iterators aren't pure functions; they can change the state. So it has the control flow of a coroutine, but the iterator that's returned is unused https://en.wikipedia.org/wiki/Coroutine
+1. 
First of all, thank you _so much_ for taking the time to read my wall of text and replying back. I truly appreciate it! Even though I don't expect you to answer them, I have some follow up questions. I hope it's ok to ask once again. &gt; You're finding that the controller is complicated to mock because it's depending on too many things. The big hint here is the disproportionate size of the Arrange section of your test compared to the Act and Assert portions. That made me feel slightly better! I've been reading _a lot_ these past few days so I can do a proper Unit Test in this class. I'm an aspiring programmer myself, and my team gave me the opportunity to write Unit Tests for this Identity Server project, and I'm really determined to succeed. &gt; DbContext is one of those big APIs that, while you can put it wherever, really should not be put wherever. As you've discovered, the extent of its configuration is useful in terms of actually making the application work, but it comes at the cost of testability. &gt; &gt; So, don't mock DbContext - instead hide it behind interfaces that has the minimal API for a client who needs what it offers. Then, inject those interfaces instead of the DbContext itself. Ideally, the only place your app deals with DbContext directly should be in the Startup, and in your subclass that configures it. &gt; &gt; Now your controller will be easy to test, since you can mock/stub small interfaces easily. Interesting! I never wrote an interface before, so this looks like an afternoon (at very least!) of coffee and google. If I understood correctly, the interface should be on my Unit Test project, since it will be used only for it and nothing else. &gt; Now while you're doing this, also refactor the controller to use Action Injection rather than Constructor Injection where appropriate. Ideally, you shouldn't have to give the controller any more dependencies for a single test than it needs to perform a single action. You'll know you're doing this right when the Arrange section of the test is proportionate to the size of the Act and Assert sections. &gt; &gt; For example, you might write the Login post action to have the method signature IActionResult Login(LoginViewModel vm, [FromServices] ILogin login) which simply calls the .Login(user, pass) method of the ILogin interface, and redirects the user accordingly. At runtime, you may configure the dependency injection system to inject a DbContextLogin which implements ILogin using a DbContext, but at test time you only have one method to mock. I'm not sure if I'm allowed to do that, but I will try nonetheless (after all, I'm working on a separate branch). As I'm sure you already guessed, I did not write this code. &gt; As for your final questions: The way C# and most OOP languages work is that you can return a ViewResult from a method that has a return type of IActionResult because a ViewResult is a subclass of IActionResult. The return type determines what the caller of the function sees - not the actual return statement. Ha! That's good to know. All my programming experience has been some Python scripting so far, so this is news to me! &gt; So, if your view always returns a ViewResult, there is no harm in making the method return signature a ViewResult. In that case, you want to assert that the ViewResult has the correct view model you expected to be passed to it. May I ask how would you do that? I mean, check if the ViewResult has the correct view model passed to it. Again, thank you for your reply. It was really helpful! 
Great! If you have any feedback let me know.
Thanks! 
Still not seeing how implementing such an iterator helps you. If anything you have grounds for an extraction, surely? Why would the method responsible for changing the state also be enumerable?
Unless you're deliberately trying to be cute I wouldn't use the single &amp; or | operands *even in* situations where it would make sense to. Just pull the operations out beforehand so you're being explicit that you meant to make those two calls. They are so rarely used and barely looked for that they will likely get overlooked if they are the cause of a bug. 
The enumerable isn't the important part. It's the "coroutine" yielding control to another function and then coming back without all the overhead of implementing a state machine
The only thing I would really like to have is stronger generic constraints. Like the ability to specify a constructor besides the parameterless one. But, in total honesty, this is something I needed when I was being naive and I wasn't using a IoC container... Now, by always working towards abstractions, the problem doesn't hit me so much anymore. Probably I would just add that I hate duck typing, "Add" and "GetEnumerator" being the major culprits. On the other hand, I like the additions of C# 7 with deconstruction, which is duck typing too, just brought to the next level with extension methods. 
It seems likely to lead to side-effect driven code. 
Just FYI, you can say "this", just by an up vote.
Erm your link to the playlist isn't working for me
* [Getting started: ASP.NET Core 2.0 with Visual Studio for Mac](https://jens.gheerardyn.be/getting-started-asp-net-core-2-0-with-visual-studio-for-mac/) * [Installing SQL on macOS without using the command line!](https://jens.gheerardyn.be/installing-sql-on-macos-without-using-the-command-line/) * [Connecting to SQL Server on macOS using SQL Operations Studio ](https://jens.gheerardyn.be/connecting-to-sql-server-on-macos-using-sql-operations-studio/)
Excellent response!
That doesn't make java enums bad. Java enums are still super useful, it's just that C style enums are also very useful. There's no reason you can't support both concepts, some languages even let you mix them (Rust for example).
Ideally, the only place `&amp;` and `|` would appear would be while bit-twiddling. I don't think I've *ever* seen them in a `bool` expression without it being an accident and possible bug.
Ah yes, that would be acceptable.
Can you show some code from `AccountController`? I am thinking that you shouldn't really be _mocking_ anything related to the `DbContext`. Since you are using the _in memory one_, you can just put data into it instead of having to mock it. The _UseInMemoryDatabase()_ method is deprecated. You are supposed to use _UseInMemoryDatabase(DbContextOptionsBuilder, Action&lt;InMemoryDbContextOptionsBuilder&gt;)_. That's all. If you just create another layer on top of it, you'd only be moving the code you were testing here, into that layer. But if you were to test that layer, then you would face the same problems. So creating a layer doesn't really solve the problem, it just hides it.
We use `|` ans `&amp;` for `[Flags]` `enum`s quite frequently.
Correct me if I am wrong, but it doesn't seem like you even need the join. Would the below not work? var note = _db.MerchNoteHist .Where(mnh =&gt; mnh.AppId = yourAppId) .OrderByDesc(mnh =&gt; mnh.CreatedDate) .Select(mnh =&gt; mnh.note) .FirstOrDefault(); var result = _db.MerchApps .Where(ma =&gt; ma.Status != 6) .Select(ma =&gt; new {ma.LegalBusinessName, ma.AgreementDate, ma.Status, ma.Source, ma.CreatedBy, note); EF should be smart enough to put it together into a single query, so long as you do not evaluate in-between the two statements. If not though, you can inline the first part. 
My bad I think it was my phone opening it in the YouTube app
Don't use mono, use .NET Core. VS Code and Rider are both pretty good.
Async is a natural fit for IO operations
After a closer look... yes they do need to be joined because yourAppID must equal the merchApps primary key. 
Ahh, I see. Then what about: var result = _db.MerchApps .Where(ma =&gt; ma.Status != 6) .Select(ma =&gt; new { ma.LegalBusinessName, ma.AgreementDate, ma.Status, ma.Source, ma.CreatedBy, note = db.MerchNoteHist .Where(mnh =&gt; mnh.AppId = ma.Id) .OrderByDesc(mnh =&gt; mnh.CreatedDate) .Select(mnh =&gt; mnh.note) .FirstOrDefault() }); Obviously untested, and I don't know the query ef will make of it. 
stepping out for a few hours, but will let you know results when I return
Empirically better. More surfaces in contact means less slipping.
Mono vs .Net Core should be a case by case basis as .Net Core isn't as fully featured as .Net Framework is yet which Mono has mostly implemented. Mono will give access to a ton more third part libraries as not everyone has adopted .Net Core yet. Not to mention .Net Core's azure support is iffy and often times isn't suitable for bigger enterprise projects.
Stop trying to make your life harder than it needs to be. If you're going to take a C# course then install windows on a VM and do your assignment.
I am glad what I said made sense. Generally, when you have an `A` that depends on `B` and `C`, and `B` depends on `D` and `E`, while `C` depends on `F` and `G` and `H`, instead of class A { private B _b; private C _c; A(D d, E e, F f, G g, H h) { _b = new B(d, e); _c = new C(f, g, h); } } class B { private D _d; private E _e; B(D d, E e) { _d = d; _e = e; } } class C { private F _f; private H _h; private G _h; C(F f, H h, G g) { _f = f; _h = h; _g = g; } } your `A` should be like class A { private B _b; private C _c; A(B b, C c) { _b = b; _c = c; } } In your `Startup` class, inside the `void ConfigureServices(IServiceCollection services)` method, among other things, you will be having services.AddSingleton&lt;A&gt;(); services.AddSingleton&lt;B&gt;(); services.AddSingleton&lt;C&gt;(); services.AddSingleton&lt;D&gt;(); services.AddSingleton&lt;E&gt;(); services.AddSingleton&lt;F&gt;(); services.AddSingleton&lt;G&gt;(); services.AddSingleton&lt;H&gt;(); Or `AddScoped` or `AddTransient` based on your needs. The dependency injection framework of .NET core will make sure to properly provide (or create) instances of `D` and `E` to provide to the `B` that `A` needs. Similarly, it will make sure that `C` has its dependencies, `F`, `G` and `H`, such that `A` can properly use `C`. Now `A` is only coupled to `B` and `C`. It doesn't even know about `E` or `H`, or whatever `B` or `C` may need or not need in the future.
If you're allowed to use asp.net core, this would be extremely easy. In your CLI, just use `dotnet new mvc --auth=Individual`. It will automatically add asp.net identity, and then you just add your configuration stores for google/facebook/whatever. MSSQL and SQLite have very similar syntax, and until you get into the more advanced features, they're the same. If you do your development using sqlite, you can just easily change the connection string to use your azure DB when deployed. If you want to be a cool kid on the block, you can download docker and run a sql server instance. SQL Server 2017 is actually cross platform now, and is compiled under a *nix configuration, so you could run `docker pull microsoft/mssql-server-linux:2017-latest` and run actual MSSQL on your Mac :) https://hub.docker.com/r/microsoft/mssql-server-linux/
I wasn't asking how to do it, only if it was possible. Although you're right I should have searched it up myself. Thanks for the help.
Wow, thank you very much!
Yeah, kinda pooped the bed on that one to be honest
Necessary, really. 
That’s a different overload. 
I'd say that is pretty impressive. It is quite a milestone. Well done, he has helped a lot of people!
Don't worry folks - the mods still flag every question jon opens too.
Very impressive. I wonder how many hours that is. 
34,067 answers ~224.2m people reached That's insane. That dude has helped me so many times as I've stumbled across some of those 34k answers. When I see his C# answers they are as concise as needed and when they say I'm doing it wrong...I am. I'm very grateful. Cheers Jon. 
A lot for sure. He's helped me dozens of times. 
however Visual Studio for Mac is not slow or bloated. Try both.
what is .net core missing that you need for azure?
Learn about Controllers, and about Model, View, Controller architecture. Also learn about Model,View,ViewModel. Then pick one. MVC or MVVM.
But if you want GUI apps on macOS, you will basically need to use Mono. 
What. A. Douche. 
This leaves isflag1 and isflag2 as ints, not bools isflag1 = (somebyte &amp; flag1) == flag1; // True isflag2 = (somebyte &amp; flag2) == flag2; // False
Read first five words, heart sank. Read the rest, heart got better.
He's been on there over 9 years, so it's about 300 points per day!
I'm flagging your comment for being off topic.
I'm sure OP is clever enough to get the hint.
the struggle of people that actually believed airs are anything more than mid-low tier consumer products. priced on a pro-sumer tier Mono and xamarin will be hard on your piece of hardware, net.core kinda outplaced mono on the multiplatform aspects anyway so you better off using vs.code and install the c# plugin.
lol you sunovabitch
Or?
Very well earned, glad to see it!
Androids never die, they just get rebuilt.
I swear to God so has gotten unusable in the last five years due to that closing questions crap. It frustrates me greatly.
Ive started cancelling my accounts. the mods hate it, apparently its a manual process.
`int counter = 0` `if (condition &amp;&amp; (++counter &gt; 3))`
Thank you so much. That's the one thing I hate about learning something new, you just don't know how to ask the right questions and it makes it almost impossible to google things. Thank you again!! 
Alternative: Just test for `counter` and increase within the `if`
That would be a **much** more clean solution.
&gt; Email and UserName are the same by default. Only because the registration form doesn't include a field for the username... If that is included, email address will be replaced with its value. I prefer to replace it because its irritating seeing "Welcome back, &lt;email address&gt;!" on the login partial...
XOR
I didn't say they were bad. I just don't miss them very much. They're very verbose if you need to define a constant serializable value, which is quite often a requirement. Spring Data uses ordinal by default which is generally not acceptable.
Jon Skeet is, in my opinion, part of why SO is amazing for finding answers to C# things. Btw, don't forget to read his book C# in Depth if you're into C#!
If you want to turn individual bits on and off, it isn't hard either: int bitStore; bitStore |= (1 &lt;&lt; 0); // sets the rightmost bit (bit 0) bitStore &amp;= ~(1 &lt;&lt; 0); // unsets the rightmost bit As a side note, I tend to use bit shifts while dealing with bits rather than using binary, decimal, or hexadecimal literals... it's a matter of preference really. For more idiomatic C#, you can also use Flags enums, which are really ints under the surface, but use named flags instead of magic values. Although, the use of `.HasFlag` instead of `(blah &amp; blahflag) == blahflag` does have a performance penalty, or at least it did in older .NET versions. Not sure if this was ever addressed.
Only for upvotes. the 15 points you earn from getting your answers accepted doesn't count towards that limit.
The fact that pretty much everything that implements `IList&lt;T&gt;` also implements `IReadOnlyList&lt;T&gt;` makes the latter completely useless. I mean, **single dimension arrays** implement `IReadOnlyList&lt;T&gt;` and I can change the values on those at any time right out from under whatever method said array was passed to (assuming it was in a different thread). So much for "read-only."
Java has two special constructs for storing enum-related things for performance reasons: * [`EnumSet&lt;E extends Enum&lt;E&gt;&gt;`](https://docs.oracle.com/javase/9/docs/api/java/util/EnumSet.html( is like a List for enums that doesn't allow duplicates * [`EnumMap&lt;K extends Enum&lt;E&gt;, V&gt;`](https://docs.oracle.com/javase/9/docs/api/java/util/EnumMap.html) is like a Dictionary that uses an enum for its keys
People tend to complain when syntactic sugar is missing. See all the complaints against Java because it doesn't have syntactic sugar for properties, for example.
https://youtu.be/ARq7nKWhB90
Well, the naming is a misleading, but it is useful in the same way that `IEnumerable&lt;T&gt;` is useful. It does not guarantee to the method that the list will never be written to, but rather it allows the method to express that it only requires write access to the list. Perhaps it would have been better to call it `IReadableList` or something.
Ahh ok sorry, yes that is correct. 
Well in this case it seems that it will work, i made a method that returns ServiceController.StartType. And if I just check my Enviroment.Version and only call my method when I am running the right .Net version, then it works. Since I am compiling on a machine with the right .Net version, it apparently works, and when i run the code on the previous .Net version, no errors occur.
My point was this: the complaint was that Java has cooler enums than C#. But Java doesn't even have enums. It just has, once again, classes. It just so happens that you get a little bit of additional syntactic suger if you inherit from the Enum class.
With the little we have I am going to assume their is some code behind the myaboutform class. Maybe, in this code behind, you have some code that change the properties of the components to another value than the ones you set.
With the little we have I am going to assume their is some code behind the myaboutform class. Maybe, in this code behind, you have some code that change the properties of the components to another value than the ones you set.
Easier for me to make a "module" based bot, where i can just easily inject a class to add functionality to the bot. The way the framework is setup works really good for this.
The about form template automatically fills in the labels from the assembly attributes, you should see the relevant code in `AboutForm.cs` or maybe `AboutForm.Designer.cs`.
That's a fair guess. The Aboutform is taken from the standard toolbox, and I just checked under its "Events" tab if there is any method that's called for it. But they're all empty, so I fail to see where this initialization code would reside.
Ah, there was the culprit; all initialization was in "public myAboutBox() { ... }". Thanks!
If you're going to be famous there are way worse things to be famous for. 
`FlagsAttribute` only really matters for `ToString` and `Parse` methods. C# doesn't care about it.
You should look into the myaboutform.cs file. It should regroup the events (winform_load for example)
Remind me of one his blog posts about imposter syndrome https://codeblog.jonskeet.uk/2017/06/16/imposter-syndrome-part-1/
I had issues getting Text when the element wasn't currently visible; including being just scrolled off the screen. I switched to using this extension method for getting text because it works whether or not the element is visible &gt; static string GetText(this IWebElement webElement) &gt; =&gt; webElement.GetAttribute("textContent");
I had some issues with the select statement. I ended up landing on this, but I'm still getting a mapping issue with AutoMapper return await _db.MerchApps .GroupJoin( _db.MerchNoteHist, ma =&gt; ma.Id, noteList =&gt; noteList.AppId, (ma, noteList) =&gt; new { MA = ma, Note = noteList.OrderByDescending(n =&gt; n.CreatedDate).First() }) .ProjectTo&lt;ViewModelListItem&gt;(_mapperConfig) .OrderBy(x =&gt; x.Status).ThenBy(x =&gt; x.CreatedDate).ToListAsync(); Visual Studio likes it, but it doesn't render yet in my browser.
Full VS was a C# IDE king for a long time, but nowaday, the competition got better, even from MS itself, so doing C# without full VS is not as bad as it used to be in the past. Three most popular apps for C# development, which run on Macs, are VS for Mac, Jetbrains Rider, and Visual Studio Code. I recommend you take a look at each of them and pick the one that suits the most. People here discuss the .NET implementation to use. IMHO if .NET Core is enough for your needs, stick with it, it gets the most love these days. Xamarin is nice for mobile dev. If none of them has what you need, then go for Mono.
Awesome, thanks a bunch for this! It was a really clear explanation. Appreciate it!
It's good he still hangs around there. I've pretty much stopped, just too many bad questions that keep repeating over and over. A shame really.
Huh, mine always get marked as a dupe of some question that doesn't show up in Google, Bing, or SO search even when the title has every word I searched for.
You are technically correct (which, as we all know, is the very best kind of correct), but I feel pretty strongly that it's going to cause confusion for many programmers. There's just better/more explicit ways of signaling the intention that both methods must be called.
It's probably the picky tech writer in me, but that page could use a bit more editing.
Do you have a sample of your startup XAML/code-behind?
`using static` I definitely did not know about that.
Also there are extension methods for HttpClient that makes sending and serializing/deserializing data types really easy like. Example: httpClient.PostAsJsonAsync&lt;T&gt;(uri, varOfT) will send a POST request to an endpoint (uri) and serialize the data in varOfT as JSON as the POST data package. Also similar methods for reading responses and doing other verbs. However you will need to reference System.Net.Http.Formatting to access those extension methods.
Yeah, I can't argue with /u/WeRequireCoffee saying that you can just store the results of methods that should always be called, and then test those results in the if statement.
MVC definitely is suitable for winforms. The winform is the view. The controller's relationship to the view is something you can probably inject with dependency inversion.
Looking at the reference source, both `Application.Current` and `Application.MainWindow` are backed by normal fields and return the values unaltered. There's no magic going on there. The only limitation is that `Application.MainWindow` must be accessed from the UI thread and will throw an exception otherwise, perhaps you are swallowing that exception and continuing with an uninitialized variable? `Application.MainWindow` is initialized in the `Window` base constructor, and thus should be available pretty much always. Otherwise, as far as I can see in the code, the only cases where `Application.MainWindow` is null are: - no window is ever opened within the application context - the main window is closed - the application is being shut down - the `MainWindow` property is manually set to null by user code
This is very nice. C# support at Amazon is pretty good. If I could also run yum install dotnetcore on fresh EC2 linux instance I would be 100% happy.
Anyone know if he's going to publish an updated edition? I would totally pay money for that.
Yeah, I agree with /u/AngularBeginner about what /u/Gambleon proposed -- it is much more readable, clear and explicit to do something like this: if (someCondition) { rightGuesses++; } if (rightGuesses == 3) //you could nest this in the above if-statement (which would be more efficient) at the cost of losing some readability due to nesting { Console.WriteLine("You win!"); } ... than it is to do this: if (someCondition &amp;&amp; (++counter == 3)) { Console.WriteLine("You win!"); }
Care to explain what's missing from .net core that mono has? It's true(ish) about libraries, but .net core 2.0 support for azure is in no way iffy. Isn't suitable for bigger enterprise projects? Care to explain?
C# specific criticisms: * Lots of common boilerplate code that could be cleaned up with single keywords or special syntax if the compiler could do the work for you (i.e INotifyPropertyChanged, IEquatable, IEnumerable, etc) * Lack of true mixins * Lack of custom attributes that can emit compiler warnings or errors if certain conditions are met. * An argument can be made that the more "jack of all trades" it becomes can have negative consequences (i.e can do everything but is master of none) Imagine if you could create a property that automatically invokes `PropertyChanged`: public class FooBar : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged; public notifying string Name { get; set; } } When `Name` is changed, `PropertyChanged` is invoked with `Name` property. I'm hoping `Record` types are implemented in C# 8.0 that allows us to easily allow its properties to invoke PropertyChanged. 
you were on the right track with a second query. I ended up combing the two in the result selector rather than in a join query.
Cool,glad you fixed it 😊 Is it a major version change between the two framework versions? E.g. 4.5 and 4.6.1 or is it more like 4.6 and 4.6.1? Is the code available somewhere? Would be nice to see the implementation and test it out on some different framework versions. 
Seems like someone doesn't understand what atomic operations are. Concurrent doesn't mean the set logic won't be executed twice. Concurrent means the value that is set will only happen thread safe, and the returning value will be the same. If two threads hit the same concurrent location, they both will run. Only one will be set, and the other will be thrown away.
Semantics. The methods he is calling with a ConcurrentDictionary instance are **not** methods *on* a ConcurrentDictionary. Extension methods are just static methods that appear to be part of a class, that doesn't mean that they **are** part of the class.
Enumerating a `ConcurrentDictionary` is thread-safe in the sense that it won't throw an exception. It won't give you an atomic snapshot, but that isn't expected. If for example, you want to find some value in that dictionary, you would use `Where` with a filter (which enumerates the dictionary). You don't expect that to lock the dictionary to get a clear snapshot but you also don't expect it to throw. `Where` won't actually throw, but other extensions like `OrderBy`, `ToList`, etc. will.
Its really C# Infinity!
1.a. The concurrent library is atomic. Atomic operations are processor barriers, not memory barriers. That is why they are faster. Atomic operations cannot protect the entire enumeration from being read thread safe. 1.b. Straw man argument 2/3 read the difference between atomic. For example; Atomic/Concurrent class: private int _a, _b; public void IncrementA() =&gt; Interlocked.Increment(ref _a); public void IncrementB() =&gt; Interlocked.Increment(ref _b); //Here this is no way to read A and B together in a thread safe way. verse Memory Barrier Thread locking private readonly object _lock = new object(); private int _a, _b; public void IncrementA() { lock(_lock) { _a++; } } public void IncrementB() { lock(_lock) { _b++; } } //here you can ensure you can read a and b via a thread safe way. public Tuple&lt;int,int&gt; getValues() { lock(_lock) { return new Tuple&lt;int, int&gt;(_a, _b); } }
Have I somehow given you the impression that I don’t know how these things work? I do. I don’t understand what argument you think is a straw man, as I never attributed any arguments to you. Do we agree what a straw man argument is?
&gt; I mean, my mom doesn't, so there is that. 
Why wouldn't they know? Do software engineers just grab types randomly? The documentation for ConcurrentDictionary is exceptionally clear on MSDN: &gt; (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation.
Not a straw man argument, and not an argument at all, just a joke addition to the comment. My argument is that you seem to imply that the blogger doesn't understand these things, and I don't think that's true. If not, who is it that doesn't understand it? :)
Also, the concurrent library isn't really *defined* as being atomic. It's true that it, for performance reasons, is implemented in terms of atomic operations at the CPU level, but this is an implementation details. It might as well have used locks all over, with the same problems the blog points out. A few notes on terminology: I don't think you're correct to assume that there is a dichotomy between atomic instructions and memory barriers. Both are CPU concepts, and atomic instructions may need memory barriers to function correctly. A lock (using the C# lock statement) is a mutex, which is more than simply a memory barrier.
&gt; Do software engineers just grab types randomly without checking their framework documentation? Yes
OP, are you the author of the article? I was wondering if you had any advice on books/resources related to: &gt;taking crash dumps from traders production machines in order to investigate multi-threaded deadlocks — been there — done that many, many times. I have to do this periodically and haven't found a good resource for learning how to do it effectively in a way which doesn't eat up days of my time.
100% correct. I ended up writing an ObservableConcurrent group of collections to make certain features work the way I wanted. Fortunately I had the advantage of the TPL to make it much easier. Still took about a 2 weeks. 
&gt;Yes. I was being mildly rhetorical, but I know text doesn't carry connotation well. &gt;Anyway, that quote only refers to the literal delegates passed to methods like AddOrUpdate, it has nothing to do with extension methods. The documentation does also explicitly call out extension methods in the thread safety section, as quoted by the author. Sorry, the point of that paragraph was to compare write operations and read operations in the dictionary. I didn't realize that I brought the delegates line over.
No (and yes). Thread safe implies no *race* conditions **and** no deadlocks. But you're correct it doesn't imply no exceptions :)
You do NOT need to unload the project to edit .csproj or .whateverproj in Rider either via context menu on project file &gt; Edit project file, or just pressing F4. Wonder if it's that counter-intuitive.
That guy is just insufferable. The first few paragraphs are just him boasting about his career. 
If you get passed an `IDictionary` or `ICollection` they don't suggest they are thread-safe interfaces generally for the function using them? The gotcha that you highlight is you might think you can still be mutating the strongly typed Concurrent object while using them - however the code passed the interface shouldn't expect them to be threadsafe.
Guess you can put the questions in a list and order them with linq like this: var randomOrdering = yourList.OrderBy(o =&gt; Guid.NewGuid()) And then loop through that.
Just don't. If you ned the mutiple calls to always run, use the style -psi- showed in reply.
&gt; you might think you can still be mutating the strongly typed Concurrent object while using them That's why I would rather not have `ConcurrentDictionary` implement these interfaces to begin with. To not support "demoting" a thread-safe type to be thread-unsafe via an implicit cast.
There are lots of applications not suited to Web Deployment or Mobile and MS has generally been neglecting developers of those apps. For many enterprises, cross platform isn't nearly as important as other attributes better served by things like WPF. I think that is the gist of the article.
Yes, it is important to understand that `x?.Foo().Bar()` is like if (x != null) { x.Foo().Bar(); } and not var tmp = x != null ? x.Foo() : null; tmp.Bar();
You're not *wrong*, but, you know .... developers are still *people*, and people are jerks.
Null operator combined with that assertion helper library. It feels wrong to me to use that operator in tests, but if the test was using Assert.AreEqual() it would probably have failed properly. 
Ugh can someone just give me a TLDR before I feel disheartened by it all? What do I do to make it Just Work TM? I'm not a multithreading genius or whatever, I just use this type a fair amount and as far as I can see I've not had any problems with it...
 That's not what the article was saying, but I do agree with that statement. I wish they would update WPF for .net core for a cross platform GUI solution, but what needs to be changed for WPF? What updates need to be made? They JUST added live edit and continue for WPF, and updated the rendering engine for it. If there's more features, suggest them, I would love for the suite to be expanded, but I've never sat there and thought "man, it would be nice if we could do this" specific to WPF.
In the comments I do sometimes. However the vast majority of bad questions are bad because SO long has an answer for them. They didn't even bother with the automatic search when asking the new question. Just lazily fire and watch the answers pop in. The other, less troubling, type of bad question is the one with far too little information (the glass orb type) or just plain fix-this-code requests. I try to tell them the teach-a-man-to-fish principle, sometimes. Still I find it hard nowadays to invest time in answering. I don't like that btw, but I can't seem to change it.
Out of interest, can I ruin this by you? Say I'm doing a uni project and meet a problem in which I'm unsure how to fix it and I can see it, but in all honesty I'm not sure why it would be remotely broken, but would happily learn as opposed to just being told how to fix it. How do I ask for help? Bearing in mind, most my lecturers tell me to not come to them until I've asked for help externally
&gt; Apple don’t sell laptops (or desktops) to the enterprise. &gt; &gt; That's amazing, guess every shop that i've been to using Macs has been fake, from music studios, art studios, iOS/osx shops. Huh, didn't know that I'm with you on almost every point. Except I don't think enterprise means what you think enterprise means. Large orgainzations (and I don't mean a couple hundred people) generally like their information systems to be integrated with their sysops, federated identity topology, etc. Believe it or not, there are companies out there for which apple devices are not a good fit for technological reasons. That said, they still have them in the inventory (our VP of marketing needs one for his ... whatever), but they are not part of "the enterprise" network as much as a bolt on device that we also have.
Yes, but a `ConcurrentDictionary`is, semantically, a collection and a dictionary, so it makes sense for it to implement those interfaces. A solution would be to special-case `ConcurrentDictionary` in `Enumerable.ToArray`/`Enumerable.ToList`, in a similar way to how `ICollection` is handled. Alternatively/additionally a `ToList` method could be added on `ConcurrentDictionary` that would then take precedence over `Enumerable.ToList`.
&gt; Developers should read the documentation of any API they're using. As an API author, I can tell you from painful experience...they don't. As an API user, I can tell you from painful experience...we don't. 
In this situation, ImmutableDictionary may be a better choice of structure, since any mutable collection cannot be enumerated in a thread-safe manner by code that doesn’t own the write locks. With ImmutableDictionary, you can safely enumerate at the cost of additional memory required to maintain the state of the collection during enumeration. 
Ok, you can parse semantics if you chose, but when people in the computing industry talk about "enterprise", they are very definitely not talking about "any company". They are specifically talking about the large corporations with complex technology infrastructures.
TLDR is that concurrent collections, in an effort to maintain compatibility with commonly used .NET APIs (including LINQ) implement interfaces that provide non-thread-safe access to the collection. Extension methods and other code that designed to take ICollection, IDictionary, etc will happily take them and do non-thread safe operations on them, defeating the purpose of using a concurrent collection to begin with. Still TLDR: When using concurrent collections, stick to its public methods and don’t try to treat it like a drop in replacement for normal collections.
&gt; software engineers I mean I know several well paid devs that use SO as the "END ALL" of documentation, or worse yet code project or dream in code with old, 10+ year old code (C# 3 or less) So... yeah.
That is absolutely terrifying. Still my point remains; Microsoft fulfilled their responsibility to clearly document the API. It's up to the developer to actually read the provided documentation. 
I'm glad that there are at least a few of us... Hell anytime I use something new, or something i havent used before (Like a Timer for instance - https://msdn.microsoft.com/en-us/library/system.windows.forms.timer(v=vs.110).aspx) I read the fucking docs cuz RTFM!
OK thank you, this is a relief. LINQ should probably get an update to work sensibly when those IWhatever's are actually one of the concurrent collections.
There is no sensible way to enumerate a concurrent collection without locking writes to it (which only the collection itself can do), Probably, concurrent collections just simply shouldn’t implement the standard collection interfaces.
I think this is the right solution. Sucks for MS, but really, that is the price you pay for concurrent data structures. Java does this with all of it's concurrent data structures. I've never head to worry about this as a problem.
I honestly disagree. The ConcurrentDictionary fails the principle of least surprise. That is an API failing. If you say your data structure is concurrent/thread safe, I expect that every call into that datastructure is thread safe. I don't expect there to be special exceptions. If you have a number class, and calling ".add(-1)" on it causes an exception because you should have negated your input and used the ".sub" method, I would also call that an API failing. Regardless of the amount of documentation around that method call warning you not to call ".add" with negative numbers. If I make a class called "ImmutableThing" but it has a method "read" that mutates ImmutableThing, then I would say that is an API failing, regardless of the amount of documentation warning you of that fact. A structure claiming thread safety, that is not thread safe, is a structure that fails the principle of least surprise, and that is the fault of the API authors.
The exception you're getting leads me to believe that the issue isn't with your asynchronous code, but rather with either the C++ function or the way that you're marshaling. Could you include the definition of the struct and the unmanaged call? For a quick and dirty test you could also try running that code synchronously to see if you still get the error. 
Hoooooooooly shit, I think you just solved a bug with an unrelated API I've been sitting on for weeks. 
I'll edit the question to include this but I've ran many tests on the marshalling and I believe it's working correctly with no problems (in fact I just posted a thread on here a couple of days ago asking for help with the marshalling). So I'm pretty confident that the native function itself is working fine. 
Why not take a snapshot of it and enumerate that? I'm sure one of the existing ones works exactly like that
So that's an average of 6 *new* answers per day (if we assume he reaches the upvote cap everyday)? That's crazy!
Did you end up using the unsafe struct with the fixed variable? If not, it looks like you should be passing the first element of the array into the function instead of the array itself.
Because what happens if while you’re taking the “snapshot” (enumerating it) and another thread moves an item in the collection to another position? It could end up in your snapshot twice. Immutable collections avoid the problem by returning a new instance whenever modifications are made. But mutable collections require lock coordination between readers and writers. 
Sorry I'm on mobile now should have included this info in the post, but to answer your question: No I'm using the following signature public static extern int GetSynchronousRecord(ushort sensorID, [Out] DOUBLE_POSITION_ANGLES_TIME_Q_RECORD[] record, int recordSize); And passing in the array name is just a pointer to the first element, is it not? 
&gt; Dude it is pretty clear you are the blogger. The blogger is OP (check the usernames). And it doesn't seem like a sockpuppet, the writing styles don't match.
Sorry, it has been awhile since I've had to P/Invoke with a struct. In .NET the array is technically a class, so what it looks like when it gets to C++ will depend on how .NET is marshaling behind the scenes, although from some quick Googling it looks like you should be okay to just pass the array. Unfortunately I'm not sure where to go from here. Typically any sort of buffer overrun indicates an issue in unmanaged code. Just to confirm, you're calling this async wrapper and awaiting it, correct? Are you trying to execute the function in parallel?
Because there are only so many questions that can be asked. If we're going to close nearly everything as a dupe, why not put the site in read only mode?
Just to clear things up, "enterprise software" is a specific term that historically referred to software used internally *within* an enterprise (large or small), not customer facing software.
&gt; It could end up in your snapshot twice. How? Your snapshot would be immutable and no edits happening to the original would be passed on to the snapshot. That is why it is a snapshot... It wouldn't be much of a snapshot if it wasn't actually a snap of the object at the time it was invoked.
How do you think you’re getting a snapshot without enumerating the collection?
Then why bother using a concurrent collection in the first place if you’re managing the locking?
I would argue that the locking should be internal, and happen when it internally makes a snapshot when I externally enumerate the collection. But yeah most of the time I use non concurrent collections and just manage the locking myself.
As insufferable this might have been to read, he is spot on about information density. Why is uwp stuff so spread out and huge? 
Depending on the collection type, it may be possible to do that internally without imposing a performance penalty on the primary use case. But doing such an expensive lock/copy like that is probably something you’d want to be explicit, as opposed to happening unexpectedly on something trivial like FirstOrDefault.
This is very true. The performance could be comparatively horrible. But I do think this would be preferable to non thread safe enumerations on a concurrent collection.
Ah, I think I see the issue. Your FetchDataAsync method returns void. When you call that method in your loop it is basically going to call that method 1000 times. It won't wait for the awaited GetSyncRecord call to complete. This is probably wreaking havoc in your native library. If you had the FetchDataAsync method return a Task you could await it and then your 1000 fetches will occur in order but they wouldn't block your UI thread. 
 Yes, you are correct, I just don't see how it contradicts anything I've said. Please correct me if I'm wrong somewhere. The specific topic was about selling laptops (or desktops) for enterprises to use, not writing enterprise software. &gt;Apple don’t sell laptops (or desktops) to the enterprise. They are too expensive, and buying managers don’t care how sexy the employees computers are, they would buy a laptop that looked like a toaster if it was cheaper. The desktop technology of choice in the enterprise will always be Windows — there simply isn’t any alternative — and that’s how it will be for the foreseeable future. That's not taking it out of context, that's the entire context for that paragraph. There are still plenty of companies that use Macs, and even those that use it for enterprise software, as I just posted IBM clearly stated that they even make enterprise software with them. Apple has an entire section of their page about companies using Macs for writing enterprise software. Again, I'm not saying you're wrong. You are completely correct, but you're agreeing with what I'm saying, I just don't see any contradiction.
I take issue with "atomic operations are CPU, not memory barriers". Where did you get this wording?! It just makes no sense to me. Atomic operations are implemented exactly through what is called ["memory barriers"](https://en.m.wikipedia.org/wiki/Memory_barrier). The `lock` statement is implemented through what is more often known as a mutex in OS parlance (Windows parlance is "critical section", which is valid but less used). I have never seen anyone call this "memory barrier", What actually happens in those is that the OS suspends threads to guarantee serial execution. (implementation might/will do other stuff like a short-lived spin-lock, but a simple implementation and an actual behavior when there is contention is to suspend a thread). Concurrent dictionary can only use atomics for some operations (e.g. get operations). It has to "`lock`" e.g. for modifications. (See [AcquireLocks method](https://github.com/Microsoft/referencesource/blob/master/mscorlib/system/collections/Concurrent/ConcurrentDictionary.cs).
Non-Mobile link: https://en.wikipedia.org/wiki/Memory_barrier *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^138723
I'd love to see Microsoft pull out a real cross platform thick client framework for dotNet core. That's a huge ask though. No one has successfully delivered anything remotely like it before, which is why we have so many electron apps these days. 
Strangely, there is a concurrent list in Java, but its name (`CopyOnWriteArrayList`) kinda spells out how it works. And that means it's also slower than a standard `ArrayList` for write-heavy use cases.
I believe that the author has a huge "muh desktop UI" bias. However... &gt; The Enterprise doesn’t care about mobile rings very true. By "the enterprise", he really means "office work". Mobile is for content consumption and ~~Trump~~Twitter-style... ahem... management. For serious content production (think coding!), data and document management etc? You need your hands on the desk, minimal hand movement and good arm support (repetitive strain is a bitch), bigger screen etc.
Paying for apps train wrecked though. Cut of that is going to be smaller and smaller. Money is now in paying to use the app, but that is concentrated in a **very** few items (compared to the "there's and app for that" of yore).
The solution is to learn how to use lists.
How about randomizing the entries in the list and printing them out in order? Randomizing random elements isn't any more random. 
Two weeks? That's 10 work days!
You mean sort of like this? https://stackoverflow.com/questions/273313/randomize-a-listt
It just a minor version change 4.6 or 4.6.1 Sorry I have the code on Visual Studio Online, and it is not public. But I will make an example on GitHub later today.
&gt; That's amazing, guess every shop that i've been to using Macs has been fake, from music studios, art studios, iOS/osx shops. Leave the US or the hipser studios and look for ANY OSX device, good look with that! 
You appear to be attempting basic rectangular collision checking. See the example code [here](http://gamecodeschool.com/essentials/collision-detection-rectangle-intersection/)
My best guess is to use arrays. First thing I would do is to generate an array that contains the items you want to randomize(in your case, the 4 values). https://stackoverflow.com/questions/314466/generating-an-array-of-letters-in-the-alphabet Then, I would randomize the list so i can pick out a random value. (the logic here is that it's easier to randomise the list and select the first item, than to randomise an index and iterate throught the items) https://stackoverflow.com/questions/273313/randomize-a-listt And finally, you want to be able to remove the item. https://stackoverflow.com/questions/273313/randomize-a-listt
You could copy your code to a pastebin and link it here, or provide a few screenshots so we know what we're looking at. Just a description is never a good thing since a lot of people can understand the problem in a lot of different ways.
If you haven't solved this yet, by any chance are you opening a dialog before/during main window realisation? I came across an issue recently on a project where because a dialog was being created first, the MainWindow was set to the dialog, and once the dialog was removed the MainWindow was reset. Depending on the configured shutdown options, this can also cause the MainWindow to not show at all.
&gt; Finally, anyone telling you that Microsoft is going back to their desktop roots is a moron. Microsoft is all about Azure and SAAS. Frankly I wouldn't be surprised if they left the desktop ecosystem as it currently is, because there's no money there for them. $8B / quarter isn't pocket change. (random article, you can find many more https://venturebeat.com/2017/04/27/microsoft-reports-23-6-billion-in-q3-2017-revenue-azure-up-93-surface-down-26-and-windows-up-5/) They're on the desktop and they'll stay there forever till it doesn't make sense anymore (and currently it does, over a billion windows devices out there, every new pc is free money for them). The desktop also enables users to use their cloud services. the tipping point is when most people use tablets/phones to use their services and not a PC anymore. Even though the signs are clearly there that it's overall declining, it's not a done deal that the PC market is effectively dead. 
At a very high level, each view should have a view model and a data template (i.e. view). Then you bind the current view model to the Content Control's Content property. It looks up the view based on the data templates defined.
I don't think for a moment Microsoft is going to leave the desktop market. My comment was based on the context of the original article, which I took to mean Microsoft is going back to its desktop roots in terms of their focus with .NET. That is what I have issues with - Microsoft isn't developing .NET to get people onto windows, not anymore at least. That's clear from their focus on dotnet core, and branching out into Linux. Businesses using windows generally do so because that's what their employees are familiar with, and crucially because it's a requirement for Microsoft office (Ignoring apple here, because as other commenters have suggested, they're nearly irrelevant in the desktop space for businesses).
The statement can be generalized to "Be careful in using features you don't fully understand".
 public static IEnumerable&lt;T&gt; Scramble&lt;T&gt;( this IReadOnlyList&lt;T&gt; x ) { var rng = new Random(); return Enumerable.Range(0, int.MaxValue).Select(_ =&gt; rng.Next(x.Count)).Distinct().Take(x.Count).Select(i =&gt; x[i]); } There's lots of solutions. Many of them are better than that, but it's probably fine as long as `x` is guaranteed to hove only unique entries and performance isn't particularly critical.
Use a List.
The issue is avoided by calling `.AsEnumerable()` first. The fast path for LINQ methods is to TryCast the `IEnumerable` object to `ICollection` and get the count. But calling `.AsEnumerable()` first will prevent that because the method returns a 'naked' `IEnumerable` interface - causing LINQ to fall back to the `GetEnumerator()` method; and pushing each item into an ArrayBuffer for as long as `.HasNext` returns `True`. Even though this forces the LINQ slow path, it's still faster than calling `.ToArray()` *THEN* performing a LINQ operation like `.ToList()` Just adding to the top comment some potentially useful info. 
The issue is avoided by calling `.AsEnumerable()` first. The fast path for LINQ methods is to TryCast the `IEnumerable` object to `ICollection` and get the count. But calling `.AsEnumerable()` first will prevent that because the method returns a 'naked' `IEnumerable` interface - causing LINQ to fall back to the `GetEnumerator()` method; and pushing each item into an ArrayBuffer for as long as `.HasNext` returns `True`. Even though this forces the LINQ slow path, it's still faster than calling `.ToArray()` *THEN* performing a LINQ operation like `.ToList()` 
Is there a specific reason why you're using mvvmlight and the ViewModelLocator? I know that IoC is generally considered to be a good practice, but if you are still trying to get a grasp on the MVVM pattern, IoC will likely just make it even harder to learn. So you might want to first just try MVVM without the IoC and, once you have a solid grasp and comfortable creating MVVM programs, *then* introduce IoC into the mix. &amp;nbsp; Having done a program using the `MaterialDesignInXamlToolkit` HambugerMenu control to do something similar, I can show you how I did it: https://gist.github.com/SmithsonianDSP/aaf8ef25a4df34aae421b79a86f12a13 The overall gist of the program is that it is a fairly simple Dashboard program, and there are two primary display views for the data, and you switch between the two using the HamburgerMenu. The main window contains the basic window stuff (Flyout menus, hamburger menu, and a content control host). The two different views are separate files (I didn't bother including them because it's all just XAML wrapped in a `Page` root element) and they use the same ViewModel DataContext as the main window. The main window's ContentControl's `Content` property is bound to the MainViewModel's `CurrentPage` property, and pressing one of the two HambugerMenu buttons will change the `CurrentPage` property to the appropriate page. There's a bunch of extraneous code that I culled out to simplify the example; it was a pretty quick edit and I'm sure if you copy and pasted the code into Visual Studio there would be a lot of unresolved method/property errors, but it should give you a good idea of how to do something similar. 
Well, in the C# world, Mike's (aka Microsoft) MSDN website can be considered the "authority" on language-specific best practices like styling guidelines, naming conventions, etc. Just google things like "naming conventions C#" or "code styling guidelines C#" and click on the MSDN links. I'd provide links, but MSDN website URLs always seem to cause the reddit formatting to screw up because the URLs contain characters that need to be escaped. I'm lazy like this. Sue me. For good examples of design patterns, I always reference [doFactory](http://www.dofactory.com/net/design-patterns) and [Game Programming Patterns](http://gameprogrammingpatterns.com/contents.html). The second link is used for game dev, obviously, but I have found that many of those patterns are used in regular applications as well (sometimes with different names though). Design patterns are amazingly helpful but can be abused the same way any tool can -- you have to use the right tool for the job. With that in mind, you must learn and understand *what problem* the pattern is attempting to solve first before you use it anywhere so that way you know *when* to use it. Perhaps more importantly, learn the S.O.L.I.D programming principles by heart. A decent write up explaining these using C# examples can be found [here](https://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp). Many design patterns are corollaries or derivations from those principles that arise almost naturally. For applications containing UI's, the **Presentation Model** architectural pattern reigns king. The man himself, Martin Fowler, has a good write up on it [here.](https://martinfowler.com/eaaDev/PresentationModel.html) There are different "flavors", if you will, of this pattern: * Model-View-Controller (MVC) * Model-View-ViewModel (MVVM) * Model-View-Presenter (MVP) Generally, MVC is used for web apps like those developed using Mike's MVC architecture (don't confuse the two -- the former is a design pattern and the latter is an architecture dev'd by Big Mike that uses that design pattern). MVVM is typically used in WPF apps and MVP is typically used in WinForm apps. However, there is nothing strictly preventing you from using any of those flavors with whatever UI framework you want, those flavors just tend to work "better" in those environments. The core of the `Presentation Model` pattern, and by extension those flavors, is simply to separate *presentation logic* (like rendering the UI to the user, receiving user input, etc) from the *business logic*. The "thing" that sits between these two layers is called the Controller, View Model or Presenter (depending on the various flavor being used). Its whole job in life is to "map" the view with the model. The model contains the business logic and, of course, the view contains the UI logic. If you google "MVP C#" or "MVVM C#", you'll find examples of those architectures being used. If you look at examples for all 3 flavors, you'll see commonalities between them which will be the `Presentation Model` architectural pattern itself. As far as .NET-specific best practices, all I can say is read around. Many of the best-practices comes with the experience gained from using .NET. A lot of it comes from simply asking a question in google. You'll find *general* agreement for most best-practices. Be wary of rogue opinions that go against the grain of best pracrices but don't ignore them. I am a huge logic kind of guy, so let me be clear that, in the realm of programming, it is generally wise to commit the bandwagon fallacy -- accepting propositions as truths just because everyone else believes it. You should still learn why most programmers believe X and, when you are comfortable enough with the *why*, you'll begin to learn *when to break those rules*. For example, it is generally frowned upon to use [Hungarian Notation](https://en.m.wikipedia.org/wiki/Hungarian_notation) in C# simply because most dev environments using C# has intellisense that accomplishes much of why HN was used and, perhaps even more importantly, C# is a statically-typed language -- the compiler simply won't allow you to store an `Int32` in a `string` variable (you can ToString the Int32 but that isn't storing an int32 in a string, is it?). You might see more HN in javascript because it is dynamically-typed but I am not a JS expert by any means so maybe someone else who can contrast the naming convention guidelines for JS with C# more accurately than I. One thing that I *do* use a sort of HN convention for in C# is when I am naming UI controls. An "OK" button is named as "btnOK", a "user name" textbox is named "txtUserName". This actually follows many UI examples on MSDN (who appear to be ignoring their own naming guidelines). However, *my* reasons for breaking the rule for UI controls is so that 1) UI controls don't conflict with similarly-named properties (aka txtUserName and a UserName property) and 2) intellisense will group the controls basically by type for you which functionally becomes a sort of UI control reference guide/legend. There are many, many more best practices like "D.R.Y" (Don't Repeat Yourself) but the important thing is to balance all aspects of programming when you code. Sometimes the most efficient way of doing something makes your code unreadable and a pain in the ass for any future dev to try to understand. Comment your code like a mofo when you know you have to do something that will affect readability. At the end of the day, your code shouls generally lool like sentences that programmers can easily read and understand. In fewer words, *write code that documents itself*. To summarize key topics: * Readability * SOLID principles * Design patterns * DRY * Naming conventions/Code styling guidelines * Presentation Model Peace.
Non-Mobile link: https://en.wikipedia.org/wiki/Hungarian_notation *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^138797
I'd argue that the expensive lock/copy that is _safe_ should be the default and the unsafe performance variant should be the explicit variety.
Using ConcurrentDictionary is an explicit choice. Using it should require knowing how it works. Not blindly passing it around like any standard collection. 
Have you tested that? Because `AsEnumerable()` just performs an implicit cast to `IEnumerable&lt;T&gt;`, and `ToArray()` uses `as` to cast to `ICollection&lt;T&gt;` *from* `IEnumerable&lt;T&gt;`. I. e. '((new ConcurrentDictionary&lt;string, string&gt;()).AsEnumerable() as ICollection&lt;KeyValuePair&lt;string, string&gt;&gt;` is non-null; I don't think `AsEnumerable()` solves this problem at all.
Not since like Summer 2017... Hopefully I'm not misremembering, but I believe that `AsEnumerable` was the method I used when I encountered the problem. If I am misremembering, the additional details of the post are still accurate. 
Speaking from experience with working with others, this is a foolish statement. Even if the original writer knew what they were doing and they were careful about using it, others coming after might not know what the implications are unless it smacks them in the face. First and foremost, the code should be readable and tell you what to look out for. That's part of good API design. Unsafe methods should be the explicit, even if you're already using a class and "should be expected to know it." In any case, this is all hypothetical. At this point, I'd design classes using concurrent dictionary around making it harder to accidentally escape it during critical sections (and add comments around where it turns into an Enumerable to make the danger clear and explicit).
&gt; The term "thread-safe" does not mean "won't throw exception" Why not? Thread-safe means safe to share among threads. Means your program will always yield predictable results. The article's example code raises an unexpected behavior when a structure is being shared among threads, so, that is not a thread safe thing. 
This is true but I honestly think it's more of a "oh, derp..." issue than not understanding it. 
All `AsEnumerable` does is return the same instance as an `IEnumerable`. It has no other effect. When `ToList` (for example) is called, the implementation checks whether that object implements `ICollection` and successfully casts to it. It will throw with `AsEnumerable` just the same as without.
You're right. I just decompiled the Enumerable class of `C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Core.dll` fileversion `4.7.2117.0`. Not sure what I was thinking of. 
FWIW, check out [F#'s Seq.readonly](https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/seq.readonly%5b't%5d-function-%5bfsharp%5d). The actual implementation is more complicated, but it's basically the idea you're talking about.
I have never had an app that had dynamic content like this. I have used MVVM before and I feel like a have a pretty decent grasp of it, but to be honest when I was looking into everyone had different opinions on it and I wouldn't be surprised if I had some misconceptions. Anyway I was not sure of the proper way to access the IOC container via another viewmodel only ever used it from XAML before. I didn't want to risk creating multiple view models without realizing it. In your example it looks like you are creating the views in your mainviewmodel and switching them there. I will give this a try when I get home tonight thanks.
this is a really advanced method for someone that's new to C# lol
I like to offer these sorts of answers to these sorts of questions, actually. 1. There's a decent (but not 100%) chance this is somebody looking for an answer to a homework problem. It's unlikely their professor will believe they came up with this one on their own. I hope. 2. If they spend some time picking it apart, they can learn about Random, Enumerable, and LINQ, at least, and maybe get somewhat closer to an answer they can *actually* use--and the knowledge needed to formulate it. 3. It's fun for me to abuse LINQ like this. I don't think I'd want a solution like this in my own codebase (using `Enumerable.Range(0, n).Select(f)` as a substitute for a simple `for(var i = 0; i &lt; n; i++) { f(); }` loop is goofy and obfuscatory, for instance, and the Fisher-Yates algorithm OP already found will be more concise and perform better and more predictably, especially for large lists), but it's fun to crap out horrid LINQ one-liners.
&gt; No one has successfully delivered anything remotely like it before What about Qt? 
Renamed your controls for readability and best practices: var heading = new Point(1, 1); var ballBounds = pbxBall.Bounds; var objectBounds = pbxObject; if (ballBounds.IntersectsWith(objectBounds)) { if (ballBounds.Right &gt;= objectBounds.Left || ballBounds.Left &lt;= objectBounds.Right) { heading = new Point(heading.X * -1, heading.Y); } if (ballBounds.Bottom &gt;= objectBounds.Top || ballBounds.Top &lt;= objectBounds.Bottom) { heading = new Point(heading.X, heading.Y * -1); } } Store the heading somewhere that your ball's movement code has access to and somewhere you'll do this: var speed = 1.5f //or whatever speed you want the ball to move var velocityX = (int) heading.X * speed; var velocityY = (int) heading.Y * speed; var velocity = new Point(velocityX, velocityY); pbxBall.Location += velocity; As a side note, you should be storing XY locations with floats and using `RectangleF` instead of `Rectangle`. Furthermore, there needs to be a sense of how much time has passed since the last update (called a delta) that can be used to multiply the velocity by (to keep shit synchronized and anchored to time). Without a delta, a faster computer will behave differently than a slower computer. The floats and RectangleF stores "subpixel" locations and will ultimately be converted to an int (thus chopping off the decimal portion) just before painting. However, keeping that info in floats preserves the subpixel data and you'll have smoother rendering. Without floats, over the course of time, your objects won't be in the position one would expect them to be and your rendering won't be as smooth. I'll add a table later to show you what I mean. I'm on my phone and reddit tables are a PITA to do on the phone.
Nah, the marshaler will correctly handle arrays. It doesn't just pass a pointer to the object header.
Yep, I'm not very knowledgeable on marshaling but AFAIK giving it just the array name like GetSynchronousRecord(0xffff, records, etc) will pass a pointer to the first element as long as I'm dealing with blittable types, which I am. But someone please correct me if my understanding is false.
It seems like SOMETHING like that was the problem (I say something because I'm still not clear exactly how Tasks work :-) ). So basically you are correct (I think), I got it to work by changing the implementation of my async wrapper slightly. private Q_RECORD[] GetSyncRecord() { Q_RECORD[] records = new Q_RECORD[8]; int errorCode = GetSynchronousRecord(0xffff, records, Marshal.SizeOf(records[0]) * tracker.numberSensors); if (errorCode != (int)BIRD_ERROR_CODES.BIRD_ERROR_SUCCESS) errorHandler(errorCode); return records; } public async Task&lt;Q_RECORD[]&gt; FetchDataAsync() { return await Task.Factory.StartNew(() =&gt; GetSyncRecord()); } And then to get the data, its just a simple: (In the chart update function) var records = await bird.FetchDataAsync(); Of course I had to mark the chart update function as `async` but I just tested it out and it looks like its working like a charm. Data is coming in fast at 100Hz and the chart is keeping up with it beautifully. Though I'm still worried that I may be doing something incorrectly since I'm new to async. But thanks a lot for your help. EDIT: I guess my concern is that I read online that this line: var records = await bird.FetchDataAsync(); Will block the current thread... is that true? Should I be using `.ContinueWith()` instead?
Without more code than this it's hard to say, but I'd say you're only checking 3 out of 4 edges on your object. Something looks wrong with the edges you're checking too. ie. pB_ball.Location.X &gt; pB_1.Location.X -- Left edge of pB is greater than the left edge of pB1, it should be left edge of one, with the right edge of the other. var pBLeft = pB_ball.Location.X var pBRight = pB_ball.Location.X + pB_ball.Width var pBTop = pB_ball.Location.Y var pBBottom = pB_ball.Location.Y + pB_ball.Height var pB1Left = pB_1.Location.X var pB1Right = pB_1.Location.X + pB_1.Width var pB1Top = pB_1.Location.Y var pB1Bottom = pB_1.Location.Y + pB_1.Height // Checking the 4 edges if (pBRight &gt; pB1Left &amp;&amp; pBLeft &lt; pB1Right &amp;&amp; pBTop &lt; pB1Bottom &amp;&amp; pBBottom &gt; pB1Top) One programming tip employed here, use variables to make things easier to understand. Left and Right are simpler than remembering what pB.Location.X means. I didn't test this, I just typed it out in the little edit window.
No, `await` does not block. It is more or less syntax sugar for `ContinueWith` callback chains.
Thank you. So would you say this implementation is "good" coding? I haven't thought about exception handling yet so that's next.
I hadn't thought of it being a different type of white space. I have break points but its a bit slow going for me to see whats actually happening. If i use the Char.IsWhitespace(char) would it be something like a foreach loop and if its whitespace string.empty it or somehow skip it?
I talked to them and they didn't want to change the code nor they want me to implement an interface for the db classes. So I ended up mocking everything and using in-memory databases for the db context objects. Next challenge will be to actually _use_ the in-memory databases lol. Thanks again!
It’s because ?. binds weaker than .
Off the top of my head: * Implementing `IEnumerable&lt;T&gt;` with `yield` causes allocations (various BCL classes have hand coded struct based enumerators to avoid them instead of using standard C#). * `foreach` statements operate over type signature patterns (instead of the `IEnum...` interfaces) while `using` statements only work with one specific interface (and prior to C#7, `async` methods were restricted to `Task` types instead of stuff that fit the task-like method patterns). * `readonly` is a very weak constraint and doesn't mean anything like immutability * C# generics are underpowered (for example you cannot alias an open generic type; there is no way to declare a type with a variable number of generic parameters) * LINQ syntax has hidden performance costs compared to iterative code. * `in`, `out` and `ref` parameters can cause sometimes confusing breakage in member overloading. * The world of type conversions and interactions for methods, delegates and function types and its interactions with delegate syntax, lambda syntax and linq syntax is complex enough that most developers willfully ignore parts of it.
Could you impersonate different users on different threads?
I am a relative newcomer to C#. My experience includes C++, Java, and Javascript among others. [You can find my answer to the Java thread here](/r/java/comments/7qdrjg/what_are_the_valid_criticisms_against_java/dspp5g0/). One year ago I started developing an [Alt-Tab replacement application](https://github.com/FrigoCoder/FrigoTab/) in an attempt to learn C# and to replace the shitty Alt-Tab of Microsoft. During this I made note of every quirk and nicety of C# and the ecosystem around it. For the raw experience, here are a few uncensored and unedited text files I made during this journey: [c# critique.txt](https://pastebin.ca/3959790), [c# finalize.txt](https://pastebin.ca/3959794), [prog ideas.txt](https://pastebin.ca/3959797). Read at your own risk. For a more refined answer here are my present day opinions. To summarize, overall C# is a better language than Java, but still has some quirks and missing features, and the ecosystem could be much better. I expect the situation to improve in the favor of C#, it seems C#, Javascript, and Kotlin are all under very rapid improvement, whereas Java lags behind under Oracle's management. ### Code organization is poorly chosen - Namespaces, partial classes, regions, pragmas, classes != compilation units, no proper directory layout, assemblies in DLLs. These are all poor design decisions. - C# projects do not automatically include all .cs files. You have to manually modify the project file to include them with a wildcard. ### Type system is a mixed bag - Value types are nice. Yet the same FFT implementation runs much slower in C# debug mode than in Java, which is just about as fast as C# release mode. - Reified generics are awesome. Yet no specialization when you want to optimize by hand. - Operator overloading is good. Yet no support for operator constraints on generic parameters. - No operator constraints on interfaces either. Or any other place that would allow me arithmetic on generics. - You have to resort to dynamic calls for arithmetic operators on generics, which is slow as hell. - No constructor constrains on generics apart from new(). Have to construct them with (T) Activator.CreateInstance(typeof(T), parameters) which can fail at runtime. - No opportunity to overload assignment operators for structs :( I am sure it is bad practice but I enjoyed hand-optimizing them in C++. - Implicit conversions are evil. Especially between enum and int. - Enums are a step back from Java. Enums and flags should be separate structures. - Functions are not first class. Delegates can be garbage collected when working with unmanaged code. - Events are not thread safe, and they are null when empty. Like WTF? Solved later with ?.Invoke() but still... - No checked exceptions THANK FUCKING GOD. ### Language is sometimes quirky - Override is not default, hiding is the default. - Can not elevate the visibility of an overridden method. - No way to call parent Form's WndProc to pass an event to it. - Methods are not virtual by default. This is premature optimization, cements base class behavior, and unsuitable for test mocks. - Dispose pattern is a pain in the ass. It would have taken exactly one bit per object to store disposed status. Why can't languages provide elegant unified finalization &amp; closing? - Initialization blocks are nice but no way to call methods in them. - Linq, like Java streams are overly verbose. I much prefer Javascript in this aspect. - Equality operators and methods are even less straightforward than in Java. - #define and Conditional WHY ### Missing features - Javascript-like tuple return values and object decomposition. - Software Transactional Memory. - Kotlin style "when". It would be a nice time to abandon C style switch statements which are verbose, allow fall-through, do not respect scope, and do not follow the usual block style. - Null safety (by default). There are nullable types, yet unqualified declarations still allow null due to backwards compatibility. - Constant safety (by default). - JSON syntax sugar. - No typedef. Can come in handy to make code cleaner. "Using" does not cover all use cases. - No mixins or delegation to maintain composition. - I want to declare backing fields within a property. ### Style and naming conventions - IInterfaces. Hungarian Notation should die already. - IDictionary instead of simply Map. IList instead of List. List is an actual implementation... - Stupid ass newlines before opening braces. Wastes so much vertical space. - At first I disliked UpperCamelCase methods, but I grown used to them and now I prefer them over lowerCamelCase. - Strange terminology. Solution, project, assembly, namespace, dispose, static class, readonly, const, destructor are all poorly chosen names. I get it they wanted C# to have different terminology than Java, but some choices are irking. ### Ecosystem - Heavily tied to Microsoft and Windows. No guarantees of portability. - WinAPI and Winforms are trash but WPF is still Windows specific. - Winforms are impossible to test. - Visual Studio is a resource hog and is missing vital features present in Eclipse. - Visual Studio is much less modular than Eclipse, I can not uninstall any features without removing the entire C# support. - Resharper or Rider are needed for any serious development but they are not free. - NuGet sucks ass compared to Maven. "Restore package" is strange terminology. - NUnit syntax is actually nicer than JUnit so no complaints there. - I feel Garbage Collection is less modern and less customizable than in Java. - Compiler and the IDE spews spurious warnings about unused members when I use structs with unmanaged code. - I have not used the standard libraries extensively to be a proper judge, but from what I hear it is better than Java's. Well, the lack of checked exceptions already decided that for me. 
Try it?
Have a sample source PDF? Curious if the structure inside the PDF would be more useful than simply converting straight to text.
Impersonation is on a per thread level - unless that thread spawns child threads or a process itself of course.
I sure do. Let me finish driving home and ill upload it to the googles
In this case OP could just create some new `Task`'s and it would save all that locking and sync code I saw.
Not sure why you'd say it's a "foolish statement", then proceed to say basically the same thing that I've been saying all along. The fact is, ConcurrentDictionary is intended to be used to write high-performance concurrent code. You say "unsafe methods should be explicit", I agree -- which is why I don't think it should implement ICollection/IDictionary at all. If you need to convert it to a standard collection, there is a ToArray method to create a copy of it. But to suggest that ToArray should be called internally behind the scenes whenever a consumer tries to enumerate it is just nuts. Developers should familiarize themselves with their options for data structures and use the right one for the job. 
Qt is not really the same beast. The only complete supported api for QT is C++, which is absolutely not cross platform in any meaningful way. You can use it in other languages, but the support isn't as good and since it's basically calls down to unmanaged code eventually you lose a lot of safety and gain a lot of pain. If Microsoft can make core work for thick client it would literally be a a full write once, compile once, run anywhere thick client. That's hard to do. Java tried with really mixed success. That's what they need to be aiming for. 
The downvotes on so many of these factually correct comments just goes to show how little most developers know about writing concurrent code that performs well. There is no good reason for ConcurrentDictionary to implement those interfaces. As soon as you use them, you're now in charge of managing synchronization everywhere, in which case you may as well just be using a regular Dictionary.
&gt; If Microsoft can make core work for thick client it would literally be a a full write once, compile once, run anywhere thick client. That's hard to do. Java tried with really mixed success. &gt; &gt; That's what they need to be aiming for. They can't even handle their UI frameworks properly on one platform, I am very skeptical about them being able to do a cross platform one successfully. I hope core gets proper UI someday but I doubt it'll be soon.
That was my first thought, but if I care about what thread it is on I should spin up a Thread the old fashion way. Maybe wrap it to look like something awaitable.
I'm skeptical too. It's a hard problem. Fucking around with universal windows apps that aren't universal with a mobile first approach when they don't have a mobile platform though is just stupid. 
https://drive.google.com/file/d/0B1_0BtteHWivVzBwQVlQakRVQ19JdVNGLUZIUHFpVVlZWnNn/view?usp=drivesdk I couldn't figure out if there was a way to see what the PDF was like.
You're probably looking for PostSharp
That is the most nonsensical wall of text I have ever halfway read. It's been fun, but I'm throwing in the towel on this one. 
https://github.com/tonerdo/pose
Anything that is an IntPtr can be represented by a SafeHandle, and would be much cleaner code, and would handle constrained execution regions properly.
Are all the other PDFs also in the same format? E.g. Is it always table from 0 to 100,000 in chunks of 50? I'm thinking it may be easier to search for the corresponding 'single' and 'married' tax values that match each chunk. E.g. build the table from 0 to 100,000 by 50..and then find the two tax amounts. And I found out the structure in the PDF is not as nice as the text.
I highly recommend the book Dependency injection in .NET Really helped me find answers to some difficult points on decoupling code and I’m still learning.
Interceptors are fun
You can add FirstName+LastName fields to your User model and use that in the "Welcome back, xxx!" message. Imo that seemed the most logical thing to do.
Yup. The layout is always going to be the same for each state. To search for the group of 50, would I need to parse it or use one of the income types as the beginning then iterate til 50? This is kinda new to me, (c#) but it seems once you understand one language the rest kinda fall in line. Expect assembly. That one makes robots cry.
How to remove outdated versions: https://stackoverflow.com/questions/25189199/how-to-uninstall-older-versions-of-visual-studio-safely What DetectNewerInstalledVersion does: https://social.msdn.microsoft.com/Forums/windows/en-US/c918b5b2-8243-4caa-a683-bcca0a4d2bf7/how-does-detectnewerinstalledversion-work?forum=winformssetup https://stackoverflow.com/questions/4594699/detectnewerinstalledversion-problem Did you try to manually uninstall the older version?
Keep in mind when multi task or thread programming to use configureawait(false) or your request may never return.
You'll need to learn more than just C# learn javascript, sql etc. As well.
That was highly rude (I'm truly surprised it's not been deleted), but proves my point. If you can't read a few paragraphs on the order of 6 sentences each, then how can you expect everyone to know the ins and outs of a class with far more documentation written for it?
Yes. If I uninstall manually, and then reinstall using the same installer, and run... it is the new version.
You need to change the version number of your files for then to be overwritten.
Not mentioned above, but I am doing that.
Hello. This task isn't complicated when you get used to each of required components using them just for learning purposes. I could help you complete this task, provide any information or code you need. I just got one question: the user list shown and options has to be graphically managed or just console level stuff?
Are you changing both? I that was the issue when I had this.
Both?
The point is to leave the function with a read lock active. That way a thread can get past the write lock if and only if all other threads using the shared object have disposed, which leaves the read lock.
This console app converts the sample PDF you linked to text using iTextSharp, then spits out the brackets in order. I think you'd be able to modify this for you uses. https://dotnetfiddle.net/3qZjlw
I looked into iTextSharp and didn't think it would do anything close to what you did. I'll give this a run through today and let you know. Thank you for this!
Both AccessTheWebAsync will return immediately on await. 
I was hoping to start rigid, then slowly expand its capabilities as I learned more about the bot framework. I figured if I could get it doing something very simple, I could work my way towards something more complicated. I often think of it as more of a workflow than a dialog, but I was requested to do it in the form of a chatbot, so I figured I should at least try that.
I would hardly recommend writing one from scratch. You might want to consider something like https://wit.ai/
Removed: Rule 5.
What a selfless self-promotion post.
Might be simpler for the user if you list out their options 1. printer 2. monitor 3. other Then ask them for what menu number they want 1,2,3 etc Hard to misspell a digit. Not impossible but it's faster and more distinct that words. As an affirmative response then ask for (y/n) instead of yes, yep, ok, okay, ya, yes please, please, k, yip etc
Thank you!
I was reading your project description, and I saw this: &gt; Extension method names mirror Linq names with an extra character, e.g. SelectF In my opinion this is a bad idea because it means I can't use LinqFaster with query syntax.
Note that I removed yours as well for the same reason. In the future, I suggest to just report and move on.
In cases where query syntax would be a large benefit, you wouldn't want to use LinqFaster anyway, since it isn't lazily evaluated. 
Flipside, you can check out [MoreLINQ](https://github.com/morelinq/MoreLINQ) which doesn't try to replace/optimize the existing methods, but instead adds a bunch of new methods/overloads which can save you extra iterations or extra LINQ calls emulating the same behaviour in vanilla LINQ.
Gotcha. It all feels like an abuse of the RWLS usage patterns but it's more of a feeling that anything concrete. Reading through it and it seems functional although a proper usage example would help. At the end you have SharedDomainImpersonator which also looks weird. You're using a Dictionary in a non thread safe way and it looks like you're expecting to add the new DomainImpersonator to it somewhere but that code is missing/elided? Sorry that's not super helpful, I think a worked example might help. Something feels "off" but I can't immediately see what it is. It feels like you're trying to do Semaphore semantics (SemaphoreSlim ftw here), does that relate at all?
`Enum.GetNames(typeof(DAYS))[i]`
Like, why not share something like: "this is what I made, thoughts?" instead of astroturfing your own project
 for (var i = DAYS.Sunday; i &lt;= DAYS.Saturday; i++) { MessageBox.Show(i); } (Assuming a definition like `enum DAYS { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday }`, anyway) An enum is a type, not a collection, so it won't have an indexer. You can also use `Enum.GetValues()` to get all the values defined for the enum type: foreach (var x in (DAYS[]) Enum.GetValues(typeof(DAYS))) { MessageBox.Show(x); } which comes out in a similar place. `Enum.GetValues()` returns an array of the `enum` type you asked for, but as an `Array` object, which you may need to casy back to, e. g., `DAYS[]`, depending on what you're doing.
You may want to look at the LUIS framework and integrate it into your bot. You can train the AI engine so that people can "conversate" and you can pick up what they are trying to say based on the score. I've done a prototype for a weather bot and it worked well... just that luis wasn't trained properly hahaha and when you want to chain dialogs, you need to use context.Forward and Chain.From()
Wow, do PC's even come with COM ports anymore?
Haha, my company works with electrical instruments, antennas, and probes. We use USB to RS232(serial) adapters for most of our communication to the equipment. In device manager they still show up as com ports
*Someone's* trading altcoins :) Nice article though.
Ah, gotcha. Sorry I can't help, I was just surprised to hear that you could still find a COM port on a PC. Turns out you can't ;)
oh god if this was a GUI result wanted I'd complain to that professor so quick 
you got the basics figured out later in your post File class example to append text to file https://msdn.microsoft.com/en-us/library/ms143369(v=vs.110).aspx these provide much easier to use methods to read/write to files.
My understanding is function execution pauses after an await and control flow returns to the environment that called the async function until the await is fulfilled. So if you have: var one = await func1 var two = await func2 var three = await func3 Do all three awaits queue up, or does one have to finish before the other two are started? 
1Konata if you still need some help please let me know! I will gladly help you;)
I second this. Before worrying about c# he’ll have to understand the basics of programming first. Flow Control, Variables, Functions/Methods, Objects, maybe recursion things like that.
or `((DAYS)i).ToString()`
only one of them is mine, I shared mine is isolation a long time ago when I made it, I thought this new one was really neat.
worth it for MinBy and MaxBy alone. Why didn't I add that to LinqFaster? perhaps I will. 
Without knowing anything from your actual use case it looks wrong to me. I would use the [SerialPort](https://docs.microsoft.com/en-us/dotnet/api/system.io.ports.serialport?view=netframework-4.7#Remarks) class to get the list of existing ports. Then whatever ports get selected by the user are stored to in the application configuration for the desired instrument, not changing Windows configuration.
`three` waits on `two` to finish, and `two` waits on `one` to finish. If you want all three of them to run concurrently, you can use `Task.WhenAll` and await the result.
I can see why this is confusing, because control is returned to the thread when using await (e.g. when awaiting in a UI-thread, you can still move the window around without it freezing). However, if you use three awaits, they will run one after another. Like you said, control is given back to the caller until the await is done. The method will then continue until it encounters the next await, and so on. So I guess the key is in remembering that control is given back to the caller of `AccessTheWebAsync`, not to the method itself. To wait for all of them simultaneously/asynchronously: var taskOne = func1 var taskTwo = func2 await Task.WhenAll(taskOne, taskTwo) // after the await, all tasks are done, so awaiting the result returns immediately var resultOne = await func1 var resultTwo = await func2 Edit: More info here: https://stackoverflow.com/questions/32119507/multiple-awaits-vs-task-waitall-equivalent
Try targeting .net standard instead of core, but use the core assemblies. 
(My comments is very subjective and context-dependent) In the one project I worked on that used FluentAssertions, the people who pushed hard for its use seem to be the ones having false positives and negatives in their tests. I didn't really like it, it seemed like people thought less about what they were testing and asserting. 
Using a chatbot for this kind of thing seems to be more and more common so it seems like a reasonable idea. I don't know anything about the bot frameworks, I was hoping that someone would post a link with a good introduction. 
&gt; .Net Core 2.0 Web app Core Web App referencing .Net Standard project? With Standard project targeting 461? Yikes this is messy ... you would think Azure libraries would have support for .Net Core/Standard
No, it would be a .net core app targeting standard. 
Thanks for the answer! I'm a bit confused about the code using it tho... resolution.X and .Y ? I created a class for it with the screen resolution, but it throws an error that it can't be more than the max size of 240 at Console.SetWindowSize. I'm not sure what to do... I actually planed to have the buffer size not being set but just taken as is and updated while running since the user might resize the window or the application runs in a CLI. A dynamic buffer that adjusts. Anyways, I can't really test it since the resolution issue, what am I meant to do with it? 
No we all aren't DBAs. I mean I can make database apps, make reasonable schema designs and write decent procedure code. A dedicated DBA though can help with storage management, replication, import/exports, monitor run-away queries and processes, manage proper filegroup organization, and help with additional performance tweaks that may be too obscure for a developer to know but is super useful to implement. I am all for dedicated DBAs being on the job.
I completely agree with him. I’ve been a dev for 20 years and my current role is full stack on a logistics and warehouse solution. The foundation of this software pre dates me and some of the existing developers and more junior ones have a tendency to write sql queries that are just not efficient at all. This leads to a cycle of bad implementation &gt; decreased efficiency &gt; me putting them on the right path by showing them how to optimise their queries. If you are dealing with data storage you can’t expect any middleware to mop up after you and IMHO you have to have a level of DBA in your DNA. In the same way you have to understand the pipeline between methods or request and response you have to have a solid understanding of the DB pipeline
I don't think this is possible: .NET Core 2.0 is an implementation of the .NET Standard 2.0 spec. .NET 4.6.1 also implements the .NET Standard 2.0 spec. However, Azure ElasticScale Client depends on .NET 4.6.1 and may use apis or other dependencies that require apis avail to full 4.6.1 and not in Standard 2.0 The only way I see this working is if Azure ElasticScale Client had a .NET Standard 2.0 library (it doesnt) and then you rebuilt your 4.6.1 project targeting .NET Standard 2.0, then referenced that from your .NET Core 2.0 Web app.
Thank you! got it to work nicely. I hope someday I'll be able to return the favor.
The size is measured in columns not pixels... I tried to set a window size greater then 240 and received the exception Additional information: The value must be less than the console's current maximum window size of 240 in that dimension. Note that this value depends on screen resolution and the console font. When I use size 240 the console covers an entire horizontal strip of my primary monitor... if I then go into click the icon in the top left and goto properties then choose a window size greater then 240 the window will size to 240 and a scroll bar will appear to allow the remaing room... so it looks like it won't let the console be bigger then primary monitor... The console can be a bit finicy, you have to update the buffer and the window in the right order... if you are making the console larger you have to increase the size of the buffer before increasing the size of the screen, if you are making it smaller then you have to reduce the size of the window before reducing the size of the buffer. I also recommend using the Console.WindowWidth, Console.WindowHeight, Console.BufferWidth, and Console.BufferHeight properties over the SetPos, Setsize functions... it may be my imagination (because I can't imagine why the implementation would be different) but those tend to work with less fuss. 
On top of that, if the serialport class gives you issues, I find the zylsoft serial library to be quite good. I don't have the links handy, but there are a few good blog posts about issues with the serialport class that are hard or impossible to work around. Edit: the blog post I was thinking of and it's Reddit discussion. http://www.sparxeng.com/blog/software/must-use-net-system-io-ports-serialport https://www.reddit.com/r/programming/comments/24yq5w/net_serialport_class_library_is_horrendous/
Each await exits the current method and only returns once the awaited task is complete. So they are awaited sequentially. Await doesn’t start anything. The tasks must already be started. 
1. Why are you testing collections? 2. Personally i create a concrete interface to the context. E.g. say i have an application that needs to calculate postage i have a IPostageCalculatorDataStore which has methods like .GetPostalCarriers(). At that point you can mock or stub, whatever floats your boat.
I've never understood why many folks view the database side of your application as somehow the sole domain of an external wizard. Your database table design, access patterns, etc are all part of your application design. They are, in most cases, not separable. Edit: And with the advent of cloud services like Azure and AWS the dedicated sysadmin style DBA is going the way of the dinosaur. A large amount of what that job was (installs, patching, backups, etc) is heavily automated and becoming more so by the month. 
I might be going about it incorrectly, but when I mock my interface that, for example, adds an employee object to the Db; called it, IEmployeeRepository. How can I assert that it has been added to Db? I see a lot of examples Mocking DbContext and DbSet directly, which doesn't comply with SOLID, and they do a bunch of setups to mock them correctly. But, ultimately they end up with a list. One way I have seen this Asserted was counting the number of objects in that list, but is it possible to assert that a specific object is within that list? 
I recently had to express something about a person I used to work with who was the head DBA. I said that "I didn't feel that he was helping move my projects forward". There was another DBA at the company who really helped me move projects forward. The head DBA got rid of the helpful guy.
We are all DBD's. 
You can use anything built with 4.6.1 If it calls a windows native API say something like WPF I believe it will error at run time. It's also possible it just works if you're on windows with the framework installed. 