True that :D
I will always start with the low level bits and pieces, get them out of the way. Your cross cutting concerns. Logging, serialization, localization, internationalization, exception management, db access, security, data migrations, IoC, etc. Do you need/care about creating something cross platform? Decide how you plan on dealing with dependencies, if at all. Research SOLID principles. Research what open source components can be used, and how best to leverage them. For example, injecting them based on a contract you decide our simply bringing them in as a dependency. So any reason why not WPF instead of WinForms? If you go WPF, do a universal app, target both the win 8 store app and wp8... You will be able to do fun stuff like injecting your ViewModels, just like any other dependency.. If you are considering going cross platform, do as much as you can via portable class libraries. All of this before the actual domain comes into question! I'm a dev, and a pretty shitty DB guy. So I always go ORM (entity framework, sqlite-net, etc). This I start with modeling the domain in code, mostly with just interfaces, in their own project. Then slowly start to implement them in another project, and have my IoC do the heavy lifting... Write unit tests for everything. That will save your ass once things get going, include tests for all the cross cutting stuff too, of course. Keep flushing out the domain until you get over nice subset complete, well mostly. Then it's time to consider the UI, in its own set of projects. Is that enough to get the ball rolling... ? 
I was right there with you and I decided it was better for myself and my career to just go ahead and run windows in parallels for dev work. It's been dreamy. 
The reason they point to the same string and the reference is equal is because all string literals are automatically interned in .net. That's the key piece of information you are missing. 
You might not be familiar with the fact that string literals are automatically interned in .net. That's an important thing to note in this conversation. var a = "hello"; var b = " hello"; Both a and b point to the same string in memory because they were interned. Interning strings means that there is only ever one copy of a string. Generated strings are generally not interned unless you explicitly intern them yourself via string.Intern.
A competent developer will choose the appropriate framework, language or API for the task. There's likely nothing he needs to do in his chosen project that requires a "some fancy GUI" and it would be beneficial for him to understand WinForms *and* WPF as both are widely used in industry. From the way you write, I highly doubt you've ever been a Scrum Master in your life.
if you did cStr = Console.ReadLine(); Console.WriteLine(ReferenceEquals(aStr, cStr)); And put in asdf as the input it would return false. Do you understand why?
Design patterns are very important when creating organized and maintainable code and, I think they really aren't stressed enough in computer science education. The MVVM pattern is very popular in .NET, check out the [MVVM Light Toolkit](http://mvvmlight.codeplex.com). IMO pseudo code has very little value in application design. I might use it if I'm explaining a concept to someone, but very rarely. If anything, create a flow chart of your application architecture or data model. When designing an application, think higher level than psuedocode.
There is also this: http://www.mono-project.com/CsharpRepl
That's a helpful way of looking at it, thanks. 
Thanks for the link ill have a look at that. I'm very new to programming in general so after reading through some reply's I've got a few new things to look into.
The reason I chose WinForms was purely because I had used it before. When I started out it was all console applications etc and developing the basics. I have only done 1 semester of programming and the last thing we did was a project using forms so i just thought I would carry on there. To be honest when I open Visual Studio and you get all the options for a new project I have no idea what most of them even are haha I have a lot of reading up to do!
I wasn't planning on using any sort of database on this project, It's going to be on the basic side i.e i'm not going to include destinations all over the world intially, just a few in the local world area. Would you say this kinda of design would be easier with one? or is it just normal practice for applications to have a database at that back if there is permanent stored data? 
A database is the most common real world solution generally. It's absolutely worth getting comfortable with relational databases if you're planning on making a career out of this. For me, I've found that have strong fundamental understanding of database design is very applicable to the rest of the architecture. Even if you don't end up using a database, you're probably going to want model your data the same way. [SQL Express](http://www.microsoft.com/en-us/server-cloud/products/sql-server-editions/sql-server-express.aspx#fbid=5Z-zzYawMAs) is lightweight and painless to integrate with Visual Studio. I'd highly recommend trying it out. You'll probably come back to school way ahead of people if you spend your summer tinkering on this. Also, don't do winforms, WPF is much better. Don't worry about making it look fancy right away either. If you're not familiar, read up on the MVVM (Model-View-ViewModel) pattern. Try to apply that. EntityFramework can take care of a lot of the hassle of going between the database and the code, so look into that too. I know that's a lot of stuff to have thrown in your lap but it's not as bad as it sounds. There's lots of documentation and tutorials plus reddit and Stack Exchange.
Haven't thought about BitBlt in a long time. You probably can't find many examples because that was all before the internet :). I may have a workaround for you as I built a service to manage all my printing from multiple clients and I am able to leverage/use all the latest .Net Print and Drawing classes to actually do my page rendering. PM me if your interested. 
This book should be considered required reading for developers with questions like OP's. :) "Practical Object-Oriented Design in Ruby" is a great design book as well.
WinForms was what all the cool kids did 5+ years ago, IMHO it should rarely be considered an option anymore. WPF skills are more highly sought after. 
This ended up being the solution, along with some changes for multiple AD domains that I forgot about. freakin EU, North America, South America, Asia, etc. We (my company) should just have a Global AD. /s I was able to fix it so I'm not looping through 30,000 users. thanks to FindOne() within the searcher object, and some more filters. Thanks for all the help! EDIT: a word
She needs a job? I know what helps: Writing applications. It's that easy. If she is qualified and shows effort, she will get a job. If she makes clear in the interviews what she want, then she won't end up in the wrong sections doing stuff she doesn't like. TBH, this request of her is kind of pathetic and attention-seeking.
Despite the (apparent) controversy here, right now it doesn't matter if you use WinForms or WPF, or do some ASPX web programming or whatever. None of that is really the issue here. What you're concerned with is architecture. Some people here have suggested doing prototyping and other people have suggested following these MVC/MVVM whatever patterns, but honestly I think those approaches really only do well when you've already got a good feel for architecture. Since it sounds like this is your first attempt (or at least close to it) at this, I'll say this: it's probably not going to go great. Like anything else, you've basically got to beat your face against it for a bit until you get your sea legs. In that regard, you're way ahead of the game for even thinking in this way. Good job. So what should you do? As others have suggested, I would start by grabbing a pad of paper, and just sketching out some ideas for what you want the screens to look like. Just try to get a feel for what types of data your system needs to manage. This will help you for the next step. Ultimately class structures are embodiments of concepts that exist as part of your system. So here it would be things like users, airlines, flights, schedules, etc. Those sorts of things represent the primary conceptual framework you want to capture. When you sit down to code, you may even want to just create these classes before you have a notion of what members they'll need. As you code, you can assume they have whatever you need at the time and then refactor away the compile errors until you have something that serves the needs of the rest of your system. The other portion of your system is going to be all of the supporting classes that provide whatever harnessing you need. So for example, if you want your application to send out emails to remind users about their upcoming flights, you might have a separate library that gives you convenient objects to get that job done. In general, you should try to push this work (as much as possible) off onto existing libraries (and since you're using C# there are MANY of them). Don't waste time reinventing the wheel unless your goal is just to learn how that particular type of wheel works. What you care about are the concepts that are specific to what you're doing. Those are the parts of your system that can't be provided by a google search. As I said before, really the only way to get good at thinking in this manner is practice, so keep looking for these sorts of projects for yourself to get used to it.
I almost want to call System.Nullable&lt;T&gt; a compiler level hack simply because of the magic it does. EDIT: A hack, but...a really really nice hack.
I think the word hack is a little harsh. The word "sugar" comes to mind.
I'm actually a little on the fence. I agree with codekaizen's point. On the other hand, I grew tired of having to add a .ToList() every time I wanted to pass the return from a method using one of the list-based interfaces (IList&lt;T&gt;, IEnumerable&lt;T&gt;, etc) to something which expected a concrete list (which was, in fact, necessary). We're looking at it. I also agree with ElGuaco - My point in the article as a whole was about defining what was goignto be required to use biggy. We got a little wrapped around the axle defining different types of stores to reflect potential differences in store capability. in the end though, it is what Biggy requires that counts. Still re-thinking the IList vs. List issue. THIS is why I post stuff here, though! Thanks for the feedback, both of you. 
This is probably not what you want to hear and I'm sure not the best implementation but I've always had a function where I 'HideAllPanels' then call that from ShowAListOfPanels(List&lt;*Panel*&gt; p) which first calls HideAllPanels then *show's* one or more panels as required. That was generally how I worked it. But I haven't used panels in console forms since 2005 :)
Hard to say without knowing how many items you have in each panel, and on the form in general, but there are several approaches to take with this (I use all three of these depending upon the situation): If each panel is self contained (meaning that it doesn't interact directly with the rest of the form, or can have it's interaction handled through properties and events), then I'd turn them into user controls. Then you can drop the user controls back onto the form (leave them small in the designer, and dock them in code on launch). If they aren't complex enough to justify that (or the interactions are to complex), then you can lay out each panel individually, then shrink them down in the designer (making sure they are all parented into the form, or a parent container), and dock them into a container on load. If docking them doesn't work, you can also manually specify their location and size in code. Another option is to use a FlowLayoutPanel as a parent container, and then place each panel into it. You can combine this with auto scroll bars in a parent panel to help reach each panel at design time. This keeps them visible, full size, and not stacked on top of each other at design time, but at run time only the visible ones will show, and you don't have to do any positioning code to get them positioned. Using the Document Outline window can also help when changing parents, or moving containers into other containers. 
That was my temporary solution. It was just so inelegant i figured there must have been a better way. Thanks for the input! I'm glad I'm not the only one who ended up doing that.
This article only applies if you're using the .NET framework, or a similar framework. The results might be different in a low-level language like C that only uses native code and native calls to the operating system. http://www.joelonsoftware.com/articles/fog0000000319.html
I'm not so sure. If strings in the language are immutable, appending to a string in a loop (in the naive way) is always going to be n^2
And, if by console app, you really mean a unit testing project,I would tend to agree. ;)
I understand the sentiment, but I just don't like this "don't pre-optimize" mind set. Yes it can cause problems, but I can't tell you how many issues I have to try to solve because a programmer forbearer of mine decided that they "didn't want to pre-optimize" and designed something crushingly slow when run at scale. In my opinion its always good to be thinking about performance and scalability. That doesn't come at the expense of maintainability when you engineer your code correctly. You should understand what you're doing well enough before you start typing that you've already chosen an efficient method.
Define "stable", because the other million open source media converters are stable
A "focus on simplicity and stability" just means that I want fixing bugs, providing a clean responsive UI, and providing good user support to be top priorities. The type of thing where I don't even look at feature requests while there are any outstanding bugs. Plus, the few people who have already given me their feedback say they like it better than the other apps they've tried, so it seems like there's still a market.
I don't claim to be better than other programmers, and I know that making good software is a goal we all have in common. I'm just doing my best to make something useful and improve things where I can. I encourage you to give Yaffmi a try, and if you have specific concerns about the software I'd love to discuss them. :)
The article opens with an example where that happens and then proceeds to an example where that is not the case. Instead there are just a small hand full of append operations to a single string. The speed comparison refers to that case, albeit repeated many times, but each iteration starts with a new string. I can't be bothered checking, but I suspect the reason why the timing difference is so small is because string.concat performs a single concatenation operation regardless of how many parameters are supplied to it. The code using the + operator does so in a single expression, so I'd expect it to compile down to equivalent code. Splitting the concatenation over several lines may produce different results, unless the compiler is smart enough to turn them into a single concatenation. I reject the underlying premise of the article: I don't believe that coding properly is a distraction. Using a StringBuilder is not immensely harder than using +=. Much of what we do as programmers involves making decisions - "Should I put this in its own function?", "Should I use two variables or a single array with two elements?", "Should I use += or a StringBuilder?" - and then revising those decisions in the face of changing requirements (or our changing understanding of the requirements). Knowing the tradeoffs and coding accordingly is a valuable skill. I only ever seem to get into these arguments with people who lack it. If "it just doesn't matter", why spend more time discussing it than it would to code the more efficient version in the first place? The thing I look for in a programming language or framework is "Is writing efficient code more verbose or unwieldy than writing effective code?" When that happens, either the tool is wrong or my understanding of how to use it is wrong.
Thank you very much for taking the time to look over my code! I will go back through it over the next few days, point for point, and start making corrections where they're needed. Also, thank you for your last statement of encouragement! I am often amazed, even looking back at my code from only a year ago, by how much I've learned since then. Edit: Enjoy the gold on me. Thanks for your time, effort, and encouragement. May you live long and prosper. :)
I write that last sentence because a big list like this could easily be overwhelming and make one think like "Oh shit, so much wrong.. I suck!", while it's just constructive (&lt;- this word is important) criticism, advices on how to improve. You already made a valuable step by making your project open source and stepping forward to a large crowd. Something I did not do myself yet. A lot of people don't do this.
Some users (myself included, in many cases) find a graphical interface to be easier to use and more efficient than a CLI. Yaffmi also adds some functionality, like simple batch processing, that would have otherwise required scripting with FFmpeg. GUIs aren't everyone's taste, and the fact that I was able to write Yaffmi means I too have no problem using FFmpeg from the command line. Still, I'd usually rather drag some files on a window, select from a few menus, and click a button. I know many users who agree, so this just gives people another option. :)
========== Basically this line means "the group lvi belongs to is iterationGrp". Maybe you have a wrong idea of how the ListView and it's groups work. It's not like SQL's GROUP BY, with the ListView you explicitly create a group and then assign items to that group. ====================== Thank you - the last line you wrote cleared up a lot. When one has learned to think of grouping in SQL terms, it becomes intuitive. And, you're right, it was getting in the way. I still don't have my head wrapped fully around it, but at least your explanation gives me a starting point.
What would you write there instead?
Take a step outside, man.
&gt; Tabs vs. Spaces Tabs vs. spaces is clearly a personal preference, that is true. I said this is heavily debated and I gave a pro-spaces argument. &gt;column widths You are also right that this is a personal preference. The biggest problem I see with a fixed column width is the absolute inconsistent case where the newline is inserted. With a more wide column width it at least happens less often. &gt; naming conventions However, the naming convention is not really only a personal choice, as there is a standard C# convention. It is better, especially as a beginner, to follow it. With C# we are in the lucky position that we have a standard for a long time already and that at least the naming convention is mostly the same everywhere. &gt; *private* access modifier Well, this is not personal choice. This is simply **bad practice** - no debate needed. When you omit the access modifier you leave interpretation open whether this was intentionally or if it was just forgotten. Also the default access modifier is not always the same - do you remember all the cases? I do not. I do not even want to. By explicitly writing the access modifier you leave no room for such interpretation or wrong assumptions. &gt; *var* keyword usage This indeed is personal preference, but commonly it is also **good practice**, as it decreases the verbosity of the code without leaving out any valuable information. Is the type clear from the assignment? Yes? Why write it again, when you can simply have a quick small *var*? No? Then use the proper type. The probably best usage case for this is a foreach or storing a LINQ query: foreach (Customer customer in customers) // VS foreach (var customer in customers) IEnumerable&lt;Customer&gt; customersStartingWithA = customers.Where(x =&gt; x.Name.StartsWith("A")); var customersStartingWithA = customers.Where(x =&gt; x.Name.StartsWith("A")); You have less verbose (shorter) code by leaving out **obvious** information. &gt; I've personally been fighting the tab war for 25+ years and think it's time to retire this as a question with no answer. Well, if there is an answer, it is tabs, as all enlightened people know :) I said this is a religious choice, and I was undoubtly right with this. I am fighting for spaces. ;-) But it also often depends on how you format the rest of the code. A good example would be this: // This kind of formatting is NOT POSSIBLE with tabs. Only with spaces. return myList.Where(x =&gt; condition) .Where(x =&gt; anotherCondition) .Sum(x =&gt; x.Field); // Format it like this, and tabs are a good choice, just like spaces. return myList .Where(x =&gt; condition) .Where(x =&gt; anotherCondition) .Sum(x =&gt; x.Field); // This is also a valid way to format it, spaces and tabs. return myList .Where(x =&gt; condition) .Where(x =&gt; anotherCondition) .Sum(x =&gt; x.Field); This is not the only time you have formatting like this. What if you have a column width and too many/too long parameters? You place all parameters intended by one on the next lines? Spaces and tabs both good. You want to keep the first parameter directly after the opening bracket, and the following parameters directly below it on the next lines? This is again not possible with tabs. The biggest problem with tabs is that they do not have a fixed size - the code looks different from setting to setting. Many people argument this is an advantage - but that's only valid as long as you keep this in mind and don't format your code in a way that does not play nice with this.
Kudos to you. I have been struggling with the idea of dependency injection and whether or not such a thing was proper, but had no idea it had a name.
Also look up **Inversion of Control** (IoC).
Why Winforms and not WPF?
I just finished converting a 193MB video from a format my PS3 doesn't like to one that it does. Everything went smoothly. [It is nice!](http://awesomeashild.files.wordpress.com/2013/10/borat-thumbs-up.jpg)
I haven't looked at your code in detail since I am on mobile. To your question... Generally speaking, try to do as little as possible in a constructor. This includes not doing io in it (and many other things). Also avoid anything that can throw in a constructor. You should use the alternatives you describe - run an init method in each call that will need it. Another totally valid option is to have an init method the user needs to call. You still need to check that it wad called of course in each method needs the init, so people usually go for the first option I describe. Another valid option is to have a static create method on your class(with a private ctor) and call the unit method there. Note that there are no hard rules in programming. You will find cases where throwing constructors make sense as well as cases where constructors running io make sense. However, of you are not sure, don't do it. Source: I have been developing in c# for 13 years and have been a developer for around 30.
I was having a quick look at colour comparison's, lowering the colours of each image down to 256 and doing pixel block comparisons but it's tricky and I'm not sure I'd get it correct. Plus, developing a crude library alone would probably take 2-3 times the amount of time I'd like to spend on the project hence the check to see if there's already a library. 
&gt; I'm wanting to know if having to create a new instance of the class is better than just including the constructor method in each of the other methods as a normal private method. (Efficiency/best practices wise) Sorry.. I don't understand what you're asking with that. (I'm guessing something like a Singleton (only one instance of the class throughout the life of the application) or a Factory (call a separate class to create an instance of the class).) I'd have to agree with /u/DawnIsAStupidName, you want to minimize your actual code execution in a constructor. Other than assigning properties, and instantiating objects. I would probably set the directory location in the constructor then add another method such as ValidateLogDirectory() and then set a property on the class on whether or not the directory is validated. public class TextLog { public string LogDirectory { get; private set } private bool IsDirectoryValidated { get; set; } // Property because I'm not a big fan of fields aka developer's discretion public TextLog(string logDirectory) { this.LogDirectory = logDirectory; } ... public bool Log(string message) { if (!IsDirectoryValidated) ValidateDirectory(); ... } public void ValidateDirectory() { if (!Directory.Exists(LogDirectory)) Directory.CreateDirectory(LogDirectory); IsDirectoryValidated = true; } } Also, I would highly recommend that you don't catch errors when you're trying to log another exception. Basically, you have bigger problems than the first exception if this exception gets thrown. (I hope that makes sense. I kind of confused myself with what I was trying to say, but I hope you get the point.) Also, rather than doing the regular comments to the side of your method declaration you can do '///' and it'll auto-create an XML comment at the top (assuming you're in Visual Studio). One of the perks of doing this is that you're comments will appear in the Intelli-sense menu for when you try to use the method. (Bonus!) 
WPF and learning C# do not mix well. I'm fairly fluent at C#, and I'm just now starting to pick up WPF. It's completely overwhelming with everything you can do. I wouldn't recommend it for **any** beginner to C#.
It is the simplest conceptually, but I have just now found out about generics. I might be able to make a single generic class that inherits from SpecialEffect like so: class GenericEffect&lt;T&gt; : SpecialEffect { public delegate void pathEquation(T startValue, T endValue, int current, int end, int period); pathEquation del; T startingValue; T endingValue; public T newValue { get; set; } public GenericEffect(pathEquation Del, T Start, T End) : base() { startingValue = Start; endingValue = End; del = Del; } public override void ComputeNewValue() { del(startingValue, endingValue, currentFrame, endFrame, period); } } The problem with this is, of course, that I can't actually handle any classes in the generic declaration.
There are a few things I would change here. I've put my version on Github so that it's easier to refer to specific places in the code. You can view it [here](https://gist.github.com/jwatkins42/94d91848a23cb1ee975e). * The first thing I would do is make the logging folder and constructor static. Since you don't let the user specify a folder, there's no reason to set up the directory every time you create an instance. * Next, rather than using `Directory.GetCurrentDirectory()`, which can have unpredictable results (the "current directory" can be changed by the program at will), I would use `Assembly.GetExecutingAssembly().Location` to get a base directory. * Once we have the folder, we want to check if it exists every time we use it, since it's entirely possible for the folder to be deleted in between calls to the logger. To that end, I have moved the validation to its own method on line 70 and I call that method before every log. * If you look at your current logging methods, you will see a lot of duplicated code. To reduce duplication, I have created a new private method on line 55 that does all of the real work, and updated the public methods to call the private method with appropriate arguments. * Parameter names: In C#, the standard naming convention for param names is camelCase. * Filenames: ".ErrorLog" isn't going to be recognized as a text file by default, using the ".log" extension makes more sense. * Finally, a note on exception handling. You only want to catch specific exceptions, and only exceptions that you can actually handle. If your logging is failing, you want to know *now*, so it's probably better to just let it throw. Also, it's a good idea to think about what exceptions a piece of code might throw. You wrapped the code in `CreateFileName` in a try/catch block, but there's absolutely nothing in the try block that could possibly throw an exception.
What happens if the directory is deleted in the middle of program execution? It is necessary to either lock the directory (not even sure if that's possible) for the duration of the program's execution, or check before every logging attempt.
Using your suggestions and /u/DawnIsAStupidName's, I now have this (I dropped a couple overloads that I never used): public static class ErrorLog { private static string logFolder; /// &lt;summary&gt; /// Checks if the ErrorLogs directory exists in the current assembly path. /// &lt;/summary&gt; private static void EnsureLogFolderExists() { string fileLocation = Assembly.GetExecutingAssembly().Location; string fileFolder = Path.GetDirectoryName(fileLocation); logFolder = Path.Combine(fileFolder, "ErrorLogs"); Directory.CreateDirectory(logFolder); } /// &lt;summary&gt; /// Creates a file name based on the current system time. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; private static string CreateFileName() { return DateTime.Now.ToString("yyyyMMddHHmmssFFF") + ".log"; } /// &lt;summary&gt; /// Does the actual file creating and writing. /// &lt;/summary&gt; /// &lt;param name="message"&gt;&lt;/param&gt; private static void WriteTheLogFile(string message) { string dir = Path.Combine(logFolder, CreateFileName()); StreamWriter lw = new StreamWriter(dir); lw.WriteLine(message); lw.Close(); } /// &lt;summary&gt; /// Writes the given exception to a new file. /// &lt;/summary&gt; /// &lt;param name="exception"&gt;&lt;/param&gt; /// public static void WriteLog(Exception exception) { EnsureLogFolderExists(); WriteTheLogFile(exception.Message); } /// &lt;summary&gt; /// Writes the given message to a new file. /// &lt;/summary&gt; /// &lt;param name="message"&gt;&lt;/param&gt; public static void WriteLog(string message) { EnsureLogFolderExists(); message = message + "\n\nThis was not an exception."; WriteTheLogFile(message); } }
Well.. You could do that. I wouldn't recommend it. Generics can get pretty nasty pretty quickly. However if you so choose to use generics you can limit what your generic type T is using the 'as' keyword (and I would recommend it). public interface IPerson { ... } public class Worker : IPerson { ... } public class People&lt;T as IPerson&gt; { ... }
If you're unfamiliar with 'IFoo', here's an article over interfaces. [Interfaces - MSDN](http://msdn.microsoft.com/en-us/library/87d83y5b.aspx) Creating your objects in your constructor really is your best option. I would however put my creation after the InitializeComponent() call, and be careful if you're creating custom controls.
Yea I just had to debug it a bit because of one :/. It was creating the directory but creating the log files in the folder above. It's fixed now.
A safer place to store logs would be in the user's AppData folder since your program may or may not have privileges to write to the folder you're currently writing to in your existing code.
a perceptual hashing library is probably what you want, i have no idea if there is a csharp version but[ phash](http://www.phash.org/) is a thing 
Wow, that's cool. Since it's in C++ you can just import the functions as `extern` into C# :)
WPF doesn't work on Mono :/
Huh, didn't know about that, only `where T : IPerson` at the end of the definition 
Right, but that requires that there be a file in the directory. What I'm not sure about is whether there is a way to acquire a similar lock on a directory directly.
Thanks for that. I'll have a read of that link. I just bought the book "C# 2012 for Programmers Fifth Edition" by Deitel and Deitel. This seems to be the best book I've found so far and I'm feeling much more confident about it now. Of course I've still got a lot to learn. I have studied programming before, including VB.NET and ASP.NET as well as Java, ANSI C and even Turbo Pascal for DOS in the past. So I have an overall idea of what I need to do. But I do still run into those gotchas while I'm learning C# in .NET.
I chose Windows Forms because I am more familiar with it and has better support for things like Mono.
All of the code I used is on GitHub, so feel free to take a look. Things related to communicating with FFmpeg are in the FFmpegEncoder.cs and FFmpegOperation.cs files.
Thanks!
I am familiar with Handbrake. :) The interface is designed to be a little simpler than Handbrake, without sacrificing too much functionality. The only thing I threw out completely was any per-file behavior that could cause one file to be encoded differently than another in the same batch, since I found that to be more confusing than helpful. I also tried to be more upfront with all of the settings. Nothing is buried behind additional dialogs.
Derp. That's what I meant. I didn't run that code through a compiler, and I don't use generics very often for the sole reason they get complicated quickly. (Unless I have a specific need for them.) Edit: I wasn't completely off.. VB uses 'T as IPerson'
What do you mean?
You're setting the Text property to formatted `#.##` which is a float/double because it has a decimal point. And you're trying to parse it as integer (no decimal point). So you just have to change `int` to `double` in that line and you're set.
 Omg thanks! Also another question was wondering.. added a reset button to clear listboxes but i wanna return the original state of the listbox of the first one. this box:http://i.imgur.com/dy2CzeK.png Thanks &lt;3!
Why do you even reset that if you want to keep its state?..
So... What exactly do you want to do now? I have no idea what you're trying to say.
Thanks for replying! I ended up going with a ListView as suggested before. Next time I try to use a DataGridView I'll come back and check this out if I get stuck again!
It's cool i fixed it myself! Thanks for the first fix! &lt;3!
Java, Python and C# all use a virtual machine. Yes it's good for beginners. Unity3D is looks good for game programming however I've never tried it.
&gt; You know nothing 
Yes. The biggest reason isn't the language itself as the syntax is fairly similar to Java. What separates the two imo is the learning resources available. The msdn website has great examples. Its not the best layout in the world but its a great resource. Also I find looking for c# answers on sites like stack overflow to be much nicer than some other languages. There tends to be 1 or two answers to any problem that are universally agreed on whereas I've found with other languages you end up with 10 different ways to do it and no real idea which one you should be spending time looking into. Tl;dr I find the resources for learning c# are plentiful and really good quality and I think that is the most important thing when it comes to learning a language
Just to add to this answer in regards to game programming. You also have XNA/MonoGame (www.monogame.net) and more to the metal stuff like SharpDX (managed API for DirectX). I would say that C# is probably the "best" managed language for game programming at the moment considering the available resources.
C# was my first language, and I do think its a great language to learn as a beginner. If you want to make games, I would suggest you look at MonoGame after you get more experience.
Yes- Go for it. The ability to create a user interface really quickly, and then write the code afterwards "behind" the buttons makes it intuitive to build something nice in a satisfyingly short time - then you can start moving onto more complex topics afterwards (like object orientation, Lync, file/database access, etc) Java has this to some extent, but the designer and UI components are less intuitive IMHO
Python for games programing? It's like the slowest language out there and stuff like Pigame isn't good in comparison to other language libraries.
I agree with you completely. My post was not meant to make python seem like the best language for game development, rather a good pick for any one new to programming that wants to dabble with games, as it is fairly easy.
How so?
To be fair, Python is actually a terrible first language. its too simple and you dont learn good structure. Not to mention the spacing is confusing at the best of times.
Build a scraper. It'll be a pain but all you really need to do is figure out an element you can start at and then just take it apart bit by bit. 
I second this. C# is very beginner friendly in the fact that there's tons of help and resources online alone, and a lot of the Visual Studio extensions make programming in C# even better
Goo structure?
Pick one and stick with it, any of those three are good for beginners. Once you are fluent in any of them, moving between them will will not be much of a hassle (although the jump from C# to Java or vice versa is probably easier than to or from Python, you however will gain more appreciation for different type systems and their implications).
C# and XNA are the best way to get into game Dev in my opinion, XNA tutorials are very easy and satisfying to do. Best Dev community online I think.
Good :)
&gt; Lync It's LINQ. Do you spend too much time in Lync meetings? :-p
Damn, that is a lot more than I'm looking to do hahah. I'll keep digging and see if I can find an XML source I can parse
:-) just sunday morning-itus
My first language was python, but now i am almost entirely c++ and c#. I would suggest learning something other than py to start is because dynamicly typed variables are a bad thing to become reliant upon. Although I am not crazy about c# either because its not easy to split the core language from .net with many of the resources I have seen. If op doest care about that then c# is a great way to go. I have been playing around with Unity a bit lately and its a fun little engine with plenty of resources. The new 2d stuff lowers the barrier to entry.
As a Java and Android dev..... I miss VS.
Politely ask the Phoenix Regional Dispatch Center (http://phoenix.gov/fire/directory/regional911/dispatch/index.html) for access to the information. Be ready to explain why you want the information and what you will be using it for. Scraping the HTML may turn out to be easier...
It's really not that bad. http://www.4guysfromrolla.com/articles/011211-1.aspx
Yes, it is absolutely a matter of opinion, I think Python is a perfect language for beginners, depending on your background I might actually rather point you in that direction than C#, for example math/science person. Delimiting blocks with curly brackets is usually something I don't even think about, when you are identifying blocks of code you look at tabbing either way. :)
I think this or the phash listed below might work. Time to do some playing around. Many Thanks
Many Thanks for this. Time to do some playing around with it.
Well, then we disagree on Python. :) I am not sure I know what you mean with not being easy to split the core language from .Net, reminded be of this cool talk I watched the other day, might be of interest to you http://channel9.msdn.com/Events/TechEd/NorthAmerica/2014/DEV-B385#fbid=
I needed something that would list all of the nuget packages being used by a project and if any of the version were outdated. I also needed the ability to generate a report that showed all of the licenses the packages used for compliance. Its ugly but functional :)
You would have to somehow include in the log files that the directory wasn't there before. Otherwise you could be losing copious amounts of error reports and not even know it.
It includes a Test Harness that allows you to load a program and execute it, step through the program, and set breakpoints.
HTML is an XML Document. Also nobody is going to give you access to their database and you aren't going to find a better source. If you really need this data buck up and scrape it.
i hoped there was an read line X not readLine X times to get my line 
&gt; IsNull() or IsNotNull() As extensions, they wouldn't work. var thing = null; var thingForReal = thing.IsNull(new object()); You'll get a NullReferenceException before you even enter the IsNull method. var thingForReal = thing ?? new object(); is much better
Yes, i think it can teach you a lot, and the syntax will help you in other languages. Ive never programmed a game in it, but you can use Unity3D. If you want a compiled language, why not spend the time to learn C++? It sounds like you don't like virtual machines, but C# is the same.
Resharper is for everyone.
What is 6502?
Visual Studio, even Express, would make every other IDE incomplete for you. I wasn't sold on VS in the beginning, but using it for six months, I entirely fell in love. Going back to Eclipse just wasn't the same. C#, syntaxically, is similar to Java. Java was my first language. I think C# is pretty good. Learning it well will open you up to a lot of opportunities. VS' WPF is terrific. Best GUI-based layout manager ever, and that's coming from someone that does Android development on his spare time.
&gt; Java, preinstalled on MacOS - needs installation on Windows and Linux It wasn't pre installed on my machine, but I won't install it either.
this will run on a low end pc and a readAllLines is maybe a bit much its a 500MB to 800MB file...
If you can read it all into a string then you could do the following RegEx on it (?:Recorded Data\n)(?:^.+\n){8}(^.+\n) This assumes that the line "Recorded Data" is present in each record. 
I agree. I have lots of years of experience with Python, and while it is easy and very beautiful, migrating to C-based-syntax languages is somewhat of a pain. Spacing/tabbing instead of braces are *cute*, but they're also annoying a lot of the times. There are certainly advantages to Python, but there are disadvantages as well. 
&gt;[The MOS Technology 6502 is an 8-bit microprocessor that was designed by Chuck Peddle and Bill Mensch for MOS Technology. When it was introduced in 1975, the 6502 was, by a considerable margin, the least expensive full-featured microprocessor on the market. It initially sold for less than one-sixth the cost of competing designs from larger companies, such as Motorola and Intel, and caused rapid decreases in pricing across the entire processor market. It was nevertheless fully comparable with them and, along with the Zilog Z80, sparked a series of computer projects that would eventually result in the home computer revolution of the 1980s.](http://en.wikipedia.org/wiki/MOS_Technology_6502)
To do what? There's also MS Small Basic, MS Kodu and various others.
Try kimono from https://www.kimonolabs.com It may end up costing you a little money, but it is the easiest way I know of to build a scraper.
Nice indeed! One small little thing, when I was reading over the code I saw a few too many #IF DEBUG things. In processor.cs the SetDisassembly method could have the [conditional attribute](http://msdn.microsoft.com/en-us/library/aa664622.aspx) applied to it, which would make it a bit easier for someone to read. But like the work, shame about the lack of blackjack and hookers.
Maybe I can help clean it up! I'll take a look at this when I hit the office tomorrow, it's been on my mind to knock something like this up.
I had a similar issue where I had log files that consisted of several GB that used to do this with (around when .NET 2 was bleeding edge). I unfortunately was stuck in the same position. Depending on how much processing you have to do (looks like at a minimum you are taking the byte values recorded as ASCII and converting to a byte array?), you may be able to gain a performance boost to do an async read against the log and run processing in another thread. Just a thought (not even sure if it is a good one, but it was the first thing that popped in my mind).
The Intel chips was better
Yeah... When they first announced Android Studio, I thought it was going to be somewhat similar to Visual Studio. Turns out it was just a modified IntelliJ IDEA (which is a fine IDE, though), and Android Studio currently runs like crap.
feel free to submit a pull request!
Interesting on the conditional attribute, you learn something new every day!
My higher end machine finishes that routine with a 1GB file in ~8 seconds. Since it reads that file into memory it's using 3GB ram but that's pretty fast. What kind of specs will your low end pc have? Edit: File.ReadLines(file).ElementAt(i) works but its super slow because I believe it has to read the entire file each time up to the line you are seeking. 
I don't know how much is it used in games but I am learning C# in the .NET environment because when I was at university I was told that's where the work is. You might like to see this youtube video which is an interview with Anders Hejlsberg, the Chief Designer of C# at Microsoft. https://www.youtube.com/watch?v=nCVNpwXijVQ
Telerik has a fairly decent RadCalendar control, but I believe you have to pay for it. http://demos.telerik.com/aspnet-ajax/calendar/examples/overview/defaultcs.aspx
Download SQL Server Management Studio Express and connect to whatever SQL Server instance your database is in.(localdb, sql server express, etc) SQL Server Management Studio Express is free too. You can even get 2014 and it will have all of the normal database maintaining functionality and gui for creating sql views. I haven't actually used the visual studio designer for that in a while because sql server management studio is great. http://www.microsoft.com/en-us/download/details.aspx?id=8961 I'm on my phone but that looked like the right link. If you were meaning that you need help understanding how to actually create sql views, just make sure you are joining the tables on their correct keys and select the values you want and gg. Woot
TIL :)
Nice! Finished my own 6502 CPU cycle accurate implementation in C# a while ago as a hobby project, and actually [made it boot C64 basic \(though it didn't count the ram right\)](https://www.dropbox.com/s/hh3oqgt25oqo5h4/Screenshot%202014-02-04%2020.56.09.png). Does yours support unofficial opcodes? That's the only thing I'm currently missing, but good information on them seems hard to come by.
A couple suggestions after briefly looking at the code: * Support for VB.NET and F# projects (it's hard coded for C#) * Make ReportWriter non-internal and non-static so different types of reports can be generated (and add an interface). * ASCII progress bar 
This is pretty amazing (abit expensive too). Yes, I am using WinForms. I'll check it out. Can I buy one license and reuse the code for different customers?
If you want something that works specially for you, you could always create your own control from MonthCalendar. This way you could save yourself a ton of money and learn a few things.
If you are looking for syntax, here ya go. http://msdn.microsoft.com/en-us/library/ms187956.aspx a really simple example would be... CREATE VIEW viewname AS SELECT field1, field2 FROM table1 INNER JOIN table2 on table1.field = table2.field WHERE somefield = somevalue;
Dumb question, I was looking at the test cases and I had a question. In FunctionalProcessorTests.cs, what does the following line(s) do? [TestCase(0x01, 0x0432)] // Load Data Is test case a method accepting two hex values?
I have written an new OpenGL wrapper (others that are more production ready would be OpenTK and SharpGL) The difference between this wrapper and the others is that is uses interfaces instead of static classes, which means OpenGL calls can be mocked and monitored without adding any performance penalty on release. It also uses the SIMD library for RuyJIT for matrix and vector math. What I am most interested in, is if someone could review the shader object model, which I am not particularily happy with. Of course any other pointers would be fine as well. To get a sample running, you can simply create a Windows Forms window: var form = new Form(); var dc = form.CreateGraphics(); var context = ContextFactory.Instance.Create(new ContextCreationParameters { Device = (long)dc.GetHdc(), Window = (long)form.Handle }); from there you have the context, which can implement the interfaces (such as IOpenGL40) edit: there is still a lot of work to be done on this. The enumerations for a lot of the calls are not complete yet, and I am still lacking a quaternion type. Also OpenGL 4.3 and 4.4 is not implemented at all. Any contributions to completing the OpenGL interfaces and finalizing enumerations would be very much appreciated!
I will give it a try this sounds like the right approach ;) 
For the WEI link: &gt; Limited by the SSD O.o
var lines = File.ReadLines(path).Take(10);
No thanks I'm all stocked up on snake oil
Not sure if you found your answer, but I'll post this for anyone else that comes along and wants to know. `TestCase` is an attribute included with the NUnit test framework. You can see the documentation [here](http://www.nunit.org/index.php?p=testCase&amp;r=2.5). Basically, this attribute allows you to tell NUnit to run a test using the data provided. So for example, looking at this function [TestCase(0x01, 0x0432)] ... [TestCase(0x2A, 0x3312)] [TestCase(0xF0, 0x33b7)] public void Klaus_Dorman_Functional_Test(int accumulator, int programCounter) { ... } NUnit will call `Klaus_Dorman_Functional_Test` for each `TestCase` attribute applied to the function. In the first test case, the `accumulator` will be equal to `0x01` and the `programCounter` will be equal to `0x0432`. 
Interesting! Thank you for the response.
Thanks shuffs and samboratchet for the replies. I downloaded and installed SQL Server 2014 Express. I got the full version and installed everything. For "my next trick" I'll have to figure out how I can import my existing database in Visual Studio 2012 Express into SQL Server 2014 Express. I may have finished my degree but it's like I'm still having an education.
Yesterday.
I like the idea of adding support for VB and F# and that should be a simple addition.
I used to use it for lazy loading properties like so: private object _something; public object Something { get { return _something ?? (_something = LoadSomething()); } } I still do in some places but in most places I now use `Lazy&lt;&gt;` because it takes care of all the thread safety stuff that would otherwise bloat the code above. private Lazy&lt;object&gt; _something = new Lazy&lt;object&gt;(() =&gt; LoadSomething()); public object Something { get { return _something.Value; } }
Today!
All the time. It's often a great shorthand for populating some default data into an object, if it wasn't already supplied by the user. searchDate = searchDate ?? DateTime.Now.AddDays(-10); 
Since updating a FrameworkElement's Margin requires assigning a whole new Thickness (as it's a mutable struct accessed via a property), it was always a pain just to alter one value: myUIElement.Margin = new Thickness(100, myUIElement.Margin.Top, myUIElement.Margin.Right, myUIElement.Margin.Bottom); So I created a helper method to make it trivial (note: my _actual_ code works around a wrapped UIElement, so I modified it to be an extension method here _without_ testing it) public static void SetMargin(this FrameworkElement target, double? left = null, double? top = null, double? right = null, double? bottom = null, double? uniform = null) { var currentMargin = uniform.HasValue ? new Thickness(uniform.Value) : target.Margin; var newMargin = new Thickness( left ?? currentMargin.Left, top ?? currentMargin.Top, right ?? currentMargin.Right, bottom ?? currentMargin.Bottom); target.Margin = newMargin; } This makes my usage like: myUIElement.SetMargin(left: 100); or if I wanted everything at once (left, top, right, bottom): myUIElement.SetMargin(100, 50, 20, 30); or if I wanted everything uniform (in practice, this rarely happens for me): myUIElement.SetMargin(uniform: 20); or if I wanted everything the same _except_ one direction: myUIElement.SetMargin(uniform: 20, top: 50); EDIT: Just realized, this isn't the _last_ time I used the null coalescing operator, but one of the more nicer ways I've used it to produce some semi-decent looking code.
Usually about once a month. If you only count the times I actually wrote it and not listening to ReSharpers complaining about not using it, it's only once every 3-5 months ;)
Oh wow, that's a really neat usage. I may have to borrow this idea.
I added a Windows Forms project referencing ModGL and using your code: var form = new Form(); var dc = form.CreateGraphics(); var context = ContextFactory.Instance.Create(new ContextCreationParameters { Device = dc.GetHdc(), Window = form.Handle }); First, it wouldn't build until I cast .GetHdc() and .Handle to long. Then, I got a Bad Image Format exception because the ModGL class library is hard set to x64 CPU. I changed it to Any CPU and got past the exception.
I think that is an innacuracy in Math.Sin and Math.Cos. I haven't taken the time to investigate further. Still a lot of work to do with the matrix functions. Thanks for checking it out though.
The main thing I use them for is for nullable types (int? m_foo;). Nullables would would be annoying to use otherwise: int GetFoo() { if (m_foo == null) return -1; return (int)m_foo; } vs: int GetFoo() { return m_foo ?? -1; } 
That's `-0.00000004371139` ... So virtually 0. No equality comparisons on floats/doubles with decimal places :P Although I would have expected a 0 result for 0.
*Who needs those anyways?* /s
 Assert.That(mat.Row(0), Is.EqualTo(new Vector4f(0, 1, 0, 0))); Maybe an "in-range" like comparison would be better.
I'm guessing what the confusion is technically you cannot have a nullable struct, since structs are value types. [DateTime? is shorthand for Nullable&lt;DateTime&gt;](http://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx), which wraps the struct in a shell that can represent null.
Just pointing that out as it wasn't clear he was using a `DateTime?` :) Edit: Not OP
searchDate is nullable.
I use this, it's a good start - it gives you tests, projects, whatever you want. It doesn't *really* write the tests, but it gives you everything you need to write them. Structure Map, Moq &amp; autofixture automoq. All the way.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Quadtree**](https://en.wikipedia.org/wiki/Quadtree): [](#sfw) --- &gt; &gt;A __quadtree__ is a [tree data structure](https://en.wikipedia.org/wiki/Tree_data_structure) in which each internal node has exactly four children. Quadtrees are most often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. The regions may be square or rectangular, or may have arbitrary shapes. This data structure was named a quadtree by [Raphael Finkel](https://en.wikipedia.org/wiki/Raphael_Finkel) and [J.L. Bentley](https://en.wikipedia.org/wiki/J.L._Bentley) in 1974. A similar partitioning is also known as a *Q-tree*. All forms of quadtrees share some common features: &gt; &gt;* They decompose space into adaptable cells &gt;* Each cell (or bucket) has a maximum capacity. When maximum capacity is reached, the bucket splits &gt;* The tree directory follows the spatial decomposition of the quadtree. &gt;==== &gt;[**Image**](https://i.imgur.com/yZHOoba.png) [^(i)](https://commons.wikimedia.org/wiki/File:Point_quadtree.svg) - *A region quadtree with point data. Bucket capacity 1.* --- ^Interesting: [^Octree](https://en.wikipedia.org/wiki/Octree) ^| [^Z-order ^curve](https://en.wikipedia.org/wiki/Z-order_curve) ^| [^Binary ^space ^partitioning](https://en.wikipedia.org/wiki/Binary_space_partitioning) ^| [^Geomipmapping](https://en.wikipedia.org/wiki/Geomipmapping) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chxm8er) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chxm8er)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Thanks, that looks exactly like what I wanted!
I'm not the op :p
True. 
Sorry xD
Though it is just arguing semantics in this context ;)
About once a week I wish I had it when writing java.
kinda interested in bulkmerge, the banner on the site says open source projects but i didn't see a link to the source anywhere...?
FYI, got mine! patience paid off
You can find the source on CodePlex. You will be able to download the source by clicking on CodePlex Downloads (or by going on Source Code tab on CodePlex). You can also simply use this direct link: https://zsqlbulkcopy.codeplex.com/SourceControl/latest 
Thanks for linking, good sir :)
If you can't figure it out from the readme, take a look at the [Quads](http://github.com/Banane9/Quads) project :) Feel free to message me or file an issue if there's anything wrong/missing.
well, Nullable&lt;T&gt; is a struct itself, and can be null :)
Seriously Banane9 rage elsewhere!
About 6 times today alone
You can't do any customization unless you disable windows visual theme link. 
Nullable&lt;T&gt; is a struct that contains a boolean and a T. If the boolean is true T has a meaningful value. If the boolean is false T has the structs default value. There is no such thing as true nulls in the world of structs in C#. They're value types, think about it. Reference: http://stackoverflow.com/questions/5602773/how-does-a-nullablet-type-work-behind-the-scenes
Ohh, right. Thanks for reminding me. I would've selected one in the creation, but the VS git one wants an empty repo and I simply forget to pull the repo first and then make a project in it..
all good!
~~Yes~~ Not in this case since the value won't actually vary. i switched to Is.EquivalentTo with an array of all the values. Test should be green on master. edit: not all tests though. I've added tests for Invert which is work in progress.
I use it most often when i have a nullable optional parameter that i want to initialise. What has cued this interest if i can ask?
Added gpl v2 now :)
Some one break down the bullet points. I don't have 37 minutes to waste.
Just wanted to let you know that mobile viewing on your site is seriously broken. Not bad looking, but broken broken. Stuff showing that shouldn't be seen. 
I agree with /u/frizzlestick. I can see all the formatting tags on your site.
Making a metric shit-tonne of money while you complain on reddit? Sounds fine by me.
Not from this video, but I am sure [this covers most of it.](http://damieng.com/blog/2013/12/09/probable-c-6-0-features-illustrated) 
"Curious how something is implemented in .NET? Use the Ref12 extension. Ref12 catches calls to F12 for .NET assemblies and redirects them to the Microsoft Reference Source site." -My Buddy Vinay Augustine
Read: [1](https://channel9.msdn.com/Forums/Coffeehouse/35584-Why-can-structs-not-be-null-in-C) [2](http://stackoverflow.com/questions/6077453/can-structs-really-not-be-null-in-c)
Sounds like a classic case of incomplete requirements :/
The only one of these that I'm really excited for is the safe navigation operator (.?). The rest are all basically adopting lambda syntax in more places, which is good as that seems to be the direction the language is going. The one thing I'd really like to see eventually is an operator like `typeof` along the lines of `nameof` that would take a member of a class and return the string of it's name. This would be super useful for things like properties that fire notification events. Currently you do something like this: set { _variable = value; OnPropertyChanged("PropertyName"); } So you end up with magic strings all over the place that are more difficult than necessary to refactor. I would like something like this: set { _variable = value; OnPropertyChanged(nameof(YourClass.PropertyName)); } Now the compiler is aware that these things are related and you can refactor and find references much more easily. This is a pretty straight forward scenario but with even a little bit of complexity, it starts getting out of hand in a hurry. Magic strings suck and you're currently stuck using them in lots of stuff, especially in the UI. 
Check this blog post out I recently read. Seems like it takes some of that pain away. http://danrigby.com/2012/03/01/inotifypropertychanged-the-net-4-5-way/
I didn't watch the talk, but if it's the same as the previous ones, beware of the "C# 6 feature list" since some features were cut due to user feedback or other problems, e.g. $indexers, "private protected", and fields in primary constructors.
It was more of a joke (hence the smiley) about the "cannot have a nullable struct". Your links are for structs in general. There is some syntactic sugar for Nullable&lt;T&gt; that allows them to behave as if they can be null. Nullable&lt;int&gt; foo = null; // valid bool bar = (foo == null); // true The Nullable&lt;int&gt; is still a struct, and its value is not null (since it's a struct/value-type), but the value it represents is null. What this really means (as the other poster said) is that there is a `Valid` flag and your null checks get converted to `foo.Valid` and null assignments get converted to `foo.Valid = false`.
I've been meaning to implement exactly that approach for a bit now, I just haven't had the time available to make the change. While that is a good approach to that one specific problem, I'd like something more general. Another place this would be super useful is on attributes. Because any arguments to attributes need to be constants at compile time, you can't really do any kind of fancy tricks like that. It's magic strings all day long there.
Can we have C++'s const? And please please please, Multiple Inheritance. Give me those two and I will be happy.
Right on, I'm on my way to Mars for a baseball game. 
It doesn't look like it
I agree that TCP Reset should be a good thing... What would be the attack usage of it?
Thank you ;)
Why are Microsoft releasing so many new VS versions now?
They switched to a yearly cycle. While it's better for the user (more smaller incremental changes instead of few larger ones [see XP &lt;-&gt; Vista]), I kinda don't know what I should think about it. I just recently (&lt;1 month) switched to VS 13 and not even all the things I used in VS12 are running here fully yet. Guess I'll also wait some time before using VS14.
forge the source and deny access to whatever IP you specify I would imagine... 
That'd be a usage when it's classified as bad by the server, but what would be the usage that caused the qualification of Reset as bad?
Unf... Tooling support for Asp.net vNext. Can't wait to try it out. Unfortunately it's all or nothing, it won't install side by side with 2013.
Yeah, although I'm using VS13, in my mind it's still stuck as "VS13 beta".
Azure VM. They don't cost money when they aren't running.
I suspect it's a good thing they're doing it if they start embracing the subscription model more. I'm very happy with 2013.
Or just any vm, make as many as you want when you do that whole bit to make win 7 xp mode compatible. 
Because then they can make us buy new versions every year, instead of every 2 or 3, apparently.
These are exactly the kind of blog posts I love. Gold nuggets of good information.
VirtualBox is great for this if you have a decent machine!
Take my advice with a grain of salt, as I am very new to development, but I think you should use regex for all of your requirements.
How does the current const keyword differ from c++'s? Multiple inheritance is not something I'm eager to see. I tend to regard thinking I need it as a form of code smell 
I think that's how web sense works when it's not inline.
Oh man I feel like an idiot. Lol. I must have had a brainfart
Regex is all well and good for some things, but if you've got a big laundry list of input and users who can't be bothered to scroll up and down to find out what they entered incorrectly, it can become an even bigger chore. I guess I could always split the entry into multiple pages...
No worries, hope I helped. As one of my senior developers always says, "Keep It Simple Stupid (KISS)!"
have you looked at mvc it honestly makes this trivial to do on both ends of the pipe. Model validation using attributes and unobtrusive js for client validation as well. it's all built in. if you need something customs it trivial to roll your own validation logic.
C++ has const parameters, which are not really anything great.
People who ask for const parameters outside c++ generally seem to misunderstand their purpose and function in c++
Get msdn subscription?
Is there any word on project compability yet? Having the need to install every version of VS because some project does not longer works sucks hard. 
I've just switched less than month ago from 2010 to 2013. I am on express. I really don't like exception handling in debug mode.. Maybe I missed something, but 2010 was much easier to read. However github in few clicks :):)
Its because the open source crowd believes more releases is better. 
Has anyone tried it yet? Any noticeable improvements?
C++ changes -&gt; http://blogs.msdn.com/b/vcblog/archive/2014/06/03/visual-studio-14-ctp.aspx 
Hyper-v is simply fantastic. I run all my development environments on VM's, running locally now. Next to no performance loss.
I just made a switch from virtual box to hypr-v night and day. It almost feels like a normal app not a vm
What have C++ changes to do with C#? Am I missing something?
It looks promising. I'm currently using OpenTK and the static GL class sucks. A more OOP wrapper would be pretty nice.
Well my office has 2 programmers in it, when it was the 2-3 year cycle it wasn't worth it. It's starting to sound like it is now.
Have you tried jQuery? I think this is a job for jQuery.
Thanks for the help, this is my first time making a program where I can just drag and drop pieces on besides the small amount that I dabbled with in IOS. I'm more used to programming in an academic or back end setting so mostly working on consoles. It's been interesting so far learning how to use all the features in Visual Studio though. 
The interesting question of course is whether or not there is a way to prevent this behaviour?
Yes. I know that eventually I'll probably need a set of overloaded methods like this: public Color LinearPath(Color start, Color end, int duration, int currentFrame) { } public float LinearPath(float start, float end, int duration, int currentFrame) { } public Vector2 LinearPath(Vector2 start, Vector2 end, int duration, int currentFrame) { } If I did the implementation as in my other comment, I could then create a special effect like this: GenericEffect&lt;Color&gt;.pathEquation generatedDelegate = (currentframe, endFrame, period, startValue, endValue) =&gt; newSprite.Color = LinearPath(startValue, endValue, currentframe, endFrame, period); GenericEffect&lt;Color&gt; colorEffect = new GenericEffect&lt;Color&gt;(generatedDelegate, newSprite.Color, Color.DeepSkyBlue); EffectsList.Add(colorEffect); 
It might be cleaner if the method on the effects classes accept an instance of the sprite to change.
I am not sure if this will help you. We have been developing a tool that parses unstructured data. After that data is identified, we can create data sets for transformation and data masking. We also work with legacy systems so I do not know if you will find any useful reading here - http://www.iri.com/solutions/big-data/unstructured-data
To keep up the pace with the developments. Before they were cursed because they're so slow, but technologies advance faster. Now they can better keep up with it.
Well, the tooling support for vNext is an improvement and I love it. :-)
The preview does not install side by side with any older Visual Studio. The new "vNext" projects won't be compatible with the old projects (they're totally different, it wouldn't make any sense anyway). Besides this the projects are compatible between the Visual Studio versions.
Well if you had non-proprietary data samples with which I could money around with, i.e. legacy source text-based files, that would certainly be helpful!
as a daily c# developer with only 6 months of work experience, i can not say if this is correct or not. but the flux pattern only seems to apply for large-scale applications, or am i getting it wrong? anyway, thanks for the food for thought.
well i don't know if this starts the expected behavior, but you can always start the drag&amp;drop behavior via DragDrop.DoDragDrop(sender, dragData, DragDropEffects.Move); edit: in the dgv mousemove event
Log4net, NLog, and Metrolog are all open source (among others)
I couldnt find the code of Log4net's website :(
Hard way: http://logging.apache.org/log4net/source-repository.html Easy way: https://github.com/apache/log4net
While MVC/MVVM/Flux helps with separation of concerns, many in the .NET /C# community are trying to go deeper, using the insights from the DDD community. Once you look closer at [DDD](http://domainlanguage.com/ddd/patterns/DDD-Pattern-Language-Overview-sml.png)'s architecture, you begin to notice that you might have been looking at the problem ineffectively. Choosing between MVC/MVVM/Flux is a low priority compared to defining a language, thinking and solving the problems using context maps (mind maps) and finding natural bounded contexts.
One of the Jetbrain products downloads the files... Dotpeek? It is included with R# but also free standalone
dont reinvent wheel, use log4net, you dont even need to write your own logappender since there are many options edit: lol to you downvoters. fucking amateurs
Well, you can apply any of the patterns to applications of any scale if you prefer. I built a ToDo application that was quite simple using Flux, though you are right that Flux was intended for high scalability. The idea being that as your project grows and becomes more complex it should be easier to expand.
buying visual studio every year is cheaper than an msdn subscription, for one license anyways
I ran it in LinqPad and the output was: characteristicId Given that the code is obfuscated, I'd wager this is something done automatically by an obfuscator to encrypt strings so you can't simply search for them. As for exactly *how* the decoding works? Hell if I'm working through that mess of magic numbers, random arithmetic and jumps to figure out what it's doing. (checked(unchecked(checked(unchecked((1603187146 - 0 &gt;&gt; 0 | 0) - 0) + 0 + 0) - 0) - 0 + 0) + 0 + 0 - 0 + 0 &lt;&lt; 0) + A_1; It's almost certainly doing something weird there, but when I tried it out it was always just equal to 1603187146 + A_1. I'd wager this is actually meant to be a memory address though and that in other situations all those random 0s get substituted for different values.
Most efficient way would certianly be a [BitArray](http://msdn.microsoft.com/en-us/library/system.collections.bitarray.aspx), but as others have said it certainly won't have that capacity
I'm guessing you are reading some code that someone has tried to stop you reading! Trust that you are legally and morally allowed to be doing so. If you have a look at the function, a lot of the code isn't needed. You can just run it in a sandbox, but you can also read through it and break it down, bit by bit. This is often useful as more cunning people will put little side effects from static configuration that change how the execution will occur. Something like int num = (checked(unchecked(checked(unchecked((1603187146 - 0 &gt;&gt; 0 | 0) - 0) + 0 + 0) - 0) - 0 + 0) + 0 + 0 - 0 + 0 &lt;&lt; 0) + A_1; can be broken down to a constant. breaking it down bit by bit, you can see how the whole algo works, this is probably more fun than just running the whole thing as a 'black box'.
At some point, all code works by using `goto`, you just don't normally see it since at a higher level we typically use more controlled variations like loops, if statements, and function calls*. ^(*Technically, function calls are a little different since they also manipulate the stack.)
Here is an equivalent (as far as I can tell) program. internal static string b(string input, int x) { char[] array = input.ToCharArray(); int num = 1603187146 + x; for (int i = 0; i &lt; array.Length; i++) { char c = array[i]; byte hi = (byte)((int)(c &amp; 0x00FF) ^ num++); byte lo = (byte)((int)(c &gt;&gt; 8) ^ num++); array[i] = (char)((int)hi &lt;&lt; 8 | (int)lo); } return string.Intern(new string(array)); } That's all I've got for now, it's late :)
As others have pointed out, it's pretty standard obfuscater code to hide the string in the executable. Here's a simple example: MessageBox.Show(b("돴飶诸迺蓼틾甀琂樄✆怈砊ⴌ笎礐瘒㔔稖簘稚猜瘞传䐢Ԥ䠦伨ପ䄬䘮地嘲", 42)); This is what it's basically doing in quick psuedo code: seed = magic(val2) // the checked/unchecked business, mostly just adding val2 to a set number foreach (char cur in val1) { byte a = cur &amp; 0xFF byte b = (cur &amp; 0xFF00) &gt;&gt; 8 a ^= seed++; b ^= seed++; swap a, b char temp = (char)(a &amp; (b &lt;&lt; 8)) output += temp; } return output; 
I wrote a very simple logger system for a project a while back. It had a single interface and a common base class. [Gist](https://gist.github.com/Genesis2001/9f66eb8d5f4d7c0274c2)
The example syntax on their homepage looks interesting.
That's what throws me for a loop. Using ConcurrentBag or List, when I run the method to add an object, it just quietly closes. No errors. I put a breakpoint and it cant even halt there.
This is what I'm looking for. Synchronization / Order isn't important (the elements of the list have a unique ID number) but being able to add/remove from other threads is important.... Main Application -&gt; Will, at different times, destroy existing tabs and create new ones by calling methods in the Manager class. Manager Class -&gt; Maintains an Awesomium thread (because views cannot be accessed from other threads) and a list of tabs. Tabs -&gt; Have an Awesomium view (aka a browser tab) and returns a SFML Sprite so we can draw the view on the screen. If I add tabs in the Manager/Tabs classes, they're fine. The moment it's in the main program.cs, it just quietly closes. No errors, no debug crash... it just closes.
Actually now that I think about it, shouldn't I be using a delegate in BrowserManager, and firing THAT from other threads? That way, the delegate is the one who's adding to the list so it stays within thread... or am I thinking about delegates the wrong way?
That's not correct. Well, not automatically anyway. The code the delegate points to will execute on whatever thread is executing the delegate, so it completely depends on where you're calling it from. This is a valid option for getting thread bound code to run on the right thread though. You see it a lot in UI code since UI code is frequently thread bound.
If calling Foo() causes an explosion, maybe don't call Foo(). Or rewrite that particular method to be thread-safe.
Tried it, you're right. If I call from the main thread, the delegate (and thus the method tied to it) fires on main thread. As it turns out, Awesomium isn't thread safe. Once you turn on WebCore, you can't create more views because it automatically happens off thread.
What's wrong with goto? This isn't 1980s FORTRAN where that might actually be a bad thing 
My guess is that it didn't find a reliable heuristic to use to turn that into its proper loop form. Especially since OP's source is obviously heavily obfuscated, this wouldn't be too surprising.
Its probably more like they modified the loop in a way that made it so ILSpy didn't know how to turn it back into a loop. I imagine obfuscation in .NET is usually done on the IL assembly, not the source code.
You'll almost certainly need to pick up an external PDF handling library. Something like Aspose. These cost though.
Why not make a control that uses PDF2JSON and make calls out to that. Or try and PDFminer but that's in python.
So.Many.Acronyms.
Only way to break out of nested loops in C# as far as I'm aware. Really wish they'd add a feature for that. Like say, `break break;` to break out of a loop and its parent loop.
Agreed @OP Would recommend [PDFSharp](https://www.nuget.org/packages/PdfSharp/1.32.3057). I've used it in the past for PDF writing; I'm not exactly sure how it handles PDF reading, however.
yeah, I'm not trying to drag and drop. Just select multiple items with 1 click. basically to make the right click select work like the left click select.
"C Sharp Extensible Application Markup Language Portable Document Format Writer from Extensible Markup Language" mmm, yes, much better
Static != Thread-safe. Static means there's only one instance, so any accesses to it's contents means it has to be protected. So inside your Foo method, put a lock. Do not access your list (like from MainClass) except via a method or property that has a lock. And the lock has to be against the same private member for all of the lock calls. static ManagerClass: private static object _listLock = new object(); static Foo1() { lock(_listLock) { // Do stuff with the list } } static Foo2() { lock(_listLock) { // Do stuff with the list } } 
Is the class public? 
We'd have to see more code to really know for sure what is happening, but what I can tell you is you would benefit from installing http://www.jetbrains.com/resharper/download/ . If its a simple missing using issue, it will give you an unobtrusive dialog allowing you to add it. Let us know if you have any more questions. 
Are the classes in the same namespace?
Ugh I've tried PDFsharp and I just thought it was a mess. But that's just my experience with it.
Thank you for simplifying it. Even though I know very little about C#, this is readable to understand what is happening.
If it's an exercise it would be an experience to figure out html/css quirks. Otherwise the NIH syndrome will just waste your time that you could be spending on actual projects.
We use JIRA at my work. It's ok. Allows for tacking using groups and such. Not specialized for bugs but you can write whatever you want, so it's on the developer.
We're about to transition to TFS since that offers a lot more but for years we've just used this which is free. http://ifdefined.com/bugtrackernet.html
FogBugz
I only count 1 acronym
We use TFS which is great about letting you customize everything on setup, but can be daunting when setting up the work flows and group permissions. Back in the day we used freeware called Bugzilla that was pretty sophisticated and might still be out there on the web. The nice thing about both of these systems is that it integrates well with a mail server to send customized email notifications regarding bug creation or transition change. 
I use FogBugz for personal projects, Visual Studio Online for work. 
Used a local install of OnTime for quite a while, but switched to FogBugz a couple of years ago. Both have been great. 
XAML, PDF, XML. With C# tricking us.
So.Many.Capital.Letters.
I'm fond of FogBugz myself, but it's really expensive (IIRC). There's a free version for startups and individuals, so that's what I use for large personal projects. For small personal projects, I usually use a simple Trello board. Bitbucket and Github both have nice issue trackers, too. For work projects, I use whatever my company uses, but usually it's either JIRA or the Bitbucket/Github trackers.
Are you trying to access txtMonth.Text, txtDay.Text, txtYear.Text from a different class? Have you created your own Date class? If alternative 1 ) Go back to studying object orientation If alternative 2 ) See 1. Your class is probably in another namespace.
We used to use BugZilla, but we transitioned to TFS last year. http://www.bugzilla.org/
A little tangential, but I'm going to start using Trello to organize my tasks for personal projects. It's not a bug tracker, but you could track bugs by creating tasks for them and giving them a red color or something. I like Trac if you need a stupid simple defect log.
It should be backward compatible and not much have changed. You should be able to do the port easily.
Jira + Greenhopper
sextagrammaton is saying that only one of those is an acronym. The rest are initialisms. http://data.grammarbook.com/blog/abbreviations/abbreviations-acronyms-and-initialisms-revisited/
We used BugZilla in the past, and it was perfect for our needs. Now we're logging our bugs in Rally (Agile project management software) just to keep all of our work in one system. It's not as good for tracking bugs, but it does make it easier to add the defects to sprints.
Zamehl, Peediff, Zmool. Who doesn't pronounce them this way?? I'm kidding, XAML I guess is the only one that's wordified.
At work we use Assembla. I want to try Redmine because a friend of mine, who's opinion on these things I trust, recommend it.
We use a hosted OnTime and it's pretty good.
Thanks PhonicUK. I'll try that in the morning (it's 2.12 AM here now).
Are you a single developer? Part of a team? Working with project managers? Team size will help determine which issue tracker you will find most effective. 0-5 devs GitHub issues Atlassian JIRA 5-100 devs Atlassian JIRA Microsoft Team Foundation Server (TFS)
We use Jira at work (not sure whether it's free for personal use), and for my personal stuff I use the bug tracker built into Bitbucket.
Can confirm. SaveChanges is what you need!
FYI if you put four spaces before the code, it will treat it as code. like so 
Can confirm SaveChanges at 2.12 AM is dangerous. Best to wait until morning.
Probably haha 
Or back ticks for inline, like so: \`code\` turns into `code`.
Would not just adding else { dt.Rows.Add(dr); dr = dt.NewRow(); colnum = 1; } fix it? It would only create a new row every 4th time (you can leave everything about it the same)
&gt; { &gt; dt.Rows.Add(dr); &gt; &gt; dr = dt.NewRow(); &gt; &gt; colnum = 1; &gt; } .......yes, that worked, and is almost disgustingly simple.... Thank you Nymain! Edit: Because of how my if statement is structured it doesn't add the last row if there aren't exactly enough to be divisible by 4 but I will fix that. Thank you again.
Upvote for mentioning John Skeet :)
I recommend ILSpy if you want to know what your or someone else's code is doing. Also shows you what all those fancy-schmancy `await` and lambda expressions actually compile to.
Hehe, saw his series on design on pluralsight :)
Eh, dot peek can do that... Although not as comfortable. *But for free!* And the power tools plugin lets you see the definition of everything with Ctrl click :D
Really good advice here. To add to it, I've always enjoyed attempting to make my own version of the higher level classes based on primitive types to see how they compare. Then use the techniques others have posted to see what the C# maintainers did differently and learn from that. One of my favorites was to use extension methods to make my own version of LINQ. Very eye opening! 
I know this isn't what you are asking exactly, but it might aid you to take a class or read a book on design patterns. All decent frameworks in programming, regardless of language, tend to follow a specific flow where common ways of doing things are applied. A concurrent map/dictionary may follow the same set of patterns in one language as they will in another. Not always true, but there are only so many ways to skin a cat. This way you don't have to read all the code line by line. Instead, you learn what patterns mean what. Then search for higher level descriptions of the framework and you can understand it much quicker. A class like https://www.coursera.org/course/posa may help you. 
Actually it's Resharper using dotPeek to decompile. Which is free.
Its the insert key turned on.
Thanks. Just deleted the post out of embarassment. I found it on Google aswell. Thanks again. 
It is worth pointing out that the reference source [has a very restrictive license](http://referencesource.microsoft.com/license.html), you can't treat it like your typical open source software.
Since I haven't seen it mentioned: I like to see how the C# implements sugar (like captured variables, async/await, etc) with IL Disassembler (ildasm), which comes with Visual Studio. Its definitely a bit harder to read than DotPeek or ReSharper, but you get pretty much the lowest level representation you can get. Here is what it looks like (with the code that led to it): http://i.imgur.com/Fgu7DCk.png As you can see, the `lock` statement is really just implemented with `try`, `finally`, and [`Monitor`](http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx) ([And if you are using C# 4.0 or later, an `if` statement.](http://blogs.msdn.com/b/ericlippert/archive/2009/03/06/locks-and-exceptions-do-not-mix.aspx)) Also Wikipedia has a nice [list of CIL instructions](https://en.wikipedia.org/wiki/List_of_CIL_instructions). ------ I also highly recommend checking out [Eric Lippert's blog](http://blogs.msdn.com/b/ericlippert/), he is the (former) principal developer on the C# compiler team and has a lot of insight into the design of the language. Even though he is no longer at Microsoft, [he still talks about C# on his new blog](http://ericlippert.com/). He also co-authored [The C# Programming Language](http://www.amazon.com/Programming-Language-Covering-Microsoft-Development/dp/0321741765/), which is an annotated version of [the C# language specification](http://www.microsoft.com/en-us/download/details.aspx?id=7029) (albeit, a slightly older version. I still recommend it though!)
I started doing a little bit of this myself albeit not intentionally. I was essentially trying to reinvent the wheel because I didnt know there were such classes like ConcurrentDictionary. Haha
Design patters are also in my learning TODO list since I only know a couple from a class I took. Thank you for the coursera link!
Oh wow. That first image was a little daunting at first but I think I might be able to work with this! I dont have any exposure with CIL in the past so I think this might be a great learning experience! Thank you!
No problem, have fun!
You could also take a look at mono, which is an open source implementation of .net for multiple platforms. While it's not Microsoft's own work, it doesn't hurt to see how other programmers have implemented the same functionality. In fact arguably it's a good thing to look at things from multiple perspectives.
One of the very few reasons I like VB.Net's Exit While/Function/etc keywords.
If you are going to use ASP.NET webforms you should look into the multiview control. Your code has a lot of front end logic in there that could be simplified if you had the different screens in their own view, then switched between them. 
Never heard of this. I will look in to it. Thank You! 
&gt; multiview Oh this is cool. I was wondering how people put tabs on their site! 
Couple things I've noticed from a code perspective as I'm not familiar with web forms: * You're not separating out your code. You don't want your database calls in the middle of your events. It makes it difficult to maintain and if you need to make that call in a separate spot you'll end up refactoring it out to a different spot anyways. https://en.wikipedia.org/wiki/Separation_of_concerns * Leaving your controls with their default name is poor practice. That makes it difficult to maintain. You can rename those to whatever. "txtBTZipCode" instead of "TextBox10" especially if you're applying and pull data out of them. Labels really are at your discretion. (I typically don't rename them since their contents aren't usually dynamic.) * Use Parameters on your database calls. * You can use the "using () {} " on Sql Connections, Commands, Readers, and Transactions * You aren't using Sql transactions. Should you be? * Can you use auto properties, or do your properties need backing fields? * tempInt06, tempDec01, etc. is hard to follow. I'd rename them. 
Outside of the renaming controls and variables I am pretty unfamiliar with the other things you have said. I am going to have to research each concept. Thanks for the input!
Huh. I didn't know about `backticks`. Thanks!
No Problem :)
I know this is a bit nitpicky and opinionated, but look into learning some Ajax principles in JavaScript. Makes for a great UX.
Shouldn't it skip the first line with &gt; line = s.ReadLine(); Edit: Even if i throw out the first line of the .txt file it stills throws the same exception :/
I partially disagree. Annotations are good for validation but the op mentioned doing more than just validation; stripping input down to just numbers which I suppose you could do by ref but that would be violating srp. Imo, use the the validation attribute but add a separate step in your business or even data layer to scrub the data like youre suggesting. For that, I would consider building a formatter class that implements a strategy pattern. Have a factory that uses regex to match the input and load the correct formatter. Clean and flexible.
*line = s.ReadLine()* will read the first line and then you don't use it, so the error must be elsewhere. Do what /u/aromogato said, and place a breakpoint and debug to check how your lines are split into the **l** array.
As Scott says "true friends never let you develop with webforms"
&gt;There is nothing "normal" about MVC when it comes to HTML There are abnormal things about web forms though. Connecting front-end elements to back-end logic with in-the-middle generated javascript layer that did the postbacks? Abnormal. When I said dying, I meant - I was interviewing and not a single company asked me if I knew web forms and every single one asked me if I know MVC.
If you are you using visual studio run your code through code analysis with minimum ruleset.
&gt; Connecting front-end elements to back-end logic with in-the-middle generated javascript layer All design patterns do certain things in weird ways when compared to other patterns. Means nothing. You could say it's very weird to split a web page into 3 or more separate files with no other justification than "separation of concerns". People don't ask about Webforms in interviews because it's generally implied. It's the default and it's what most legacy and a lot of new software is built with (in ASP.Net circles). It's a very mature design pattern that is still actively in development. If you're going for a front-end job they won't ask if you know HTML and CSS but you'd hardly say they were dying, would you? 
http://www.amazon.com/Beginning-Visual-C-2012-Programming/dp/1118314417/ref=sr_1_5?ie=UTF8&amp;qid=1402231310&amp;sr=8-5&amp;keywords=c%23+fundamentals I used this book when I first started
If you have never done object-oriented programming before, look for introductions to object-oriented programming first, [like this one from the sidebar](http://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep). Then you can apply it to C# with [this well done resource on the msdn](http://msdn.microsoft.com/en-us/library/aa645597\(v=vs.71\).aspx)
Look into Twitter Bootstrap, it has a lot of interesting stuff . It's easy to implement and it can make your site look much better+ it has a lot of open source addons. For popups, dropdowns etc etc.. 
In addition to other things already mentioned: * You should not write session specific values to static variables (i.e. your GlobalVariables class), since static variables will be shared over all instances of your page. For example, if two users write to the same variable at the same time, one user will be affected by the actions of the other user. See for example https://stackoverflow.com/questions/3264544/c-sharp-webforms-static-what-are-the-best-practices
Check out Microsoft virtual academy.
I like the Joes to Pros C# book and Rob Miles' Yellow Book. 
I'm new to programming and that first link says "This article is a constructive attempt to group/ define/ explain all introductory concepts of software architecture for seasoned developers who are looking to take their next step as system architects." So that'll go over my head.
I find videos best for first time learning. Books are good for looking at source code that has been written, but usually explain step by step badly. Also, a lot of books go out of date and new methods come in for more efficient programming, where as videos can be the most up to date.
"C# 2012 for Programmers, fifth edition" by Deitel and Deitel is really good. It helps if you already know how to program as I don't think it's meant for people with no programming background. Its at: http://www.deitel.com/Books/C/C2012forProgrammers/tabid/3649/Default.aspx Deitel and Deitel does have another C# book, which is I think is suitable for people with no programming background, but I think it's more expensive. It's at: http://www.deitel.com/Books/C/VisualC2012HowtoProgram/tabid/3645/Default.aspx
I haven't watched this specific series, but the ones I've gone through was eye opening. http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners
I just started learning OOP a little over a year ago and am just now getting comfortable with it. My focus is on Python but I've also studied some C# as well. I recommend taking a free CS course or two regardless of the language it's offered in, as long as it's an OOP language. Once you learn one object oriented language, other languages are not so hard to pick up. If you find one that teaches in C# start there, if not, find a Python or Java class that teaches the fundamentals of CS.
I found that youtube videos worked best to learn from. the csharpdemos channel is quite good. thenewboston channel has some good stuff, and Jonathan weinburger 's channel is excellent. He's an awesome teacher and I highly recommend his videos. If you search c# tutorials you'll turn up tonnes of results. I've also been using unity and unity tutorials as a good satisfying way to practice c#.
I started out with 5 years of web forms. Now for the last 5 years I've done a mix of both forms and MVC, but mostly MVC. So I have done a lot of both. There is nothing that would make me want to do another Forms project. MVC can do everything forms can do without the bloat of events, viewstates, controls and all the other stuff forms relies on to function. MCV is simple request/response allowing for a separation of concerns. There is a lot I could say about this, but maybe you should give MVC more reading. Forms is not a design pattern, its a framework that was designed almost 10 years ago to get application developers into the web world.
I suggest you read "Refactoring" and apply it to this code. http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672
Pro C# 5.0 and the .NET 4.5 Framework by Andrew Troelsen
Why was it popular? Why did it die?
So the nice thing about learning MVC is that the API you're going to want to build for your Phone App is going to be run by the same framework. If you want app users to save or load data from a server you are going to need an API. Web API, which is build the same way as MVC, makes it really easy to set up a RESTful API for your app to use. Another beauty of MVC is that you can easily use the same API you build for your app to power your website. And good for learning Linq, its one of the most powerful aspects of .net.
It got 350k views on a forum before I even started coding it, then the hype just died out. Here it is anyways: http://loggan08.github.io/LoLUpdater/
Have you tried [C# Fundamentals for Absolute Beginners?](http://www.microsoftvirtualacademy.com/training-courses/c-fundamentals-for-absolute-beginners) It's free.
What I did before learning C# was doing a fully featured prototype in PowerShell as a console application, then I added the forms, then I simply converted it to C# by using examples online, after a while I learned what everything meant.
Thank you!, this is exactly what I needed to continue on the project, gonna check it out now and start coding when I'm home. EDIT: Tbh UXD seems like a really abstract thing, not sure exactly what you mean.
This is one book you should look at: http://www.amazon.com/User-Centered-Design-Developers-User-Friendly-Applications-ebook/dp/B00C3NX1BW/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1402242773&amp;sr=1-1&amp;keywords=user-centered+design 
I think one of the most helpful courses that I've seen are the ones on Pluralsight. You should be able to get 90 days for free if you are a student. They have excellent videos on C# and might be helpful for you.
No. JavaScript OOP implementation feels glichy and is bad for starting. I'd go with C#.
Learning how to use the debugger will be an invaluable skill to you as a new developer starting out. It will also help you find this bug. 
I second this. Plural sight is the way to go. Having someone speak it to you often translates better for a beginner.
Far far too many programmers are forced fed OOP like it's the holy grail of programming when really it's a load of bullshit. Especially for beginners, if results in a bloated mess of abstractions. Which is why I think JS is the perfect language to learn with. The idea that the code I write should always (and sometimes needlessly) be oriented around objects is arguably wrong. This is sometimes hard for C#/Java developers to hear because chances are OOP is how you learned to code in school. I highly recommend you read some blog posts by Casey Muratori especially http://mollyrocket.com/casey/stream_0019.html and http://mollyrocket.com/casey/stream_0020.html for an alternative view on how to program.
Eww. That could really be a problem since this was supposed to be a multi-user application! Thanks for the input!
&gt; Twitter Bootstrap That looks cool. Thank You for showing me this. 
Yellow book is pretty sweet. One of the best intros for any lang I've come across. 
&gt; code analysis with minimum ruleset Wow this is really cool. Thanks for sharing that! Here is the link for anyone who (like me) didn't know about this. http://msdn.microsoft.com/en-us/library/dd264996.aspx
Good point! Thank you for that. 
Do you understand the concept of OOP? I struggled a lot when I was learning JAVA in high school because the concept of OOP was really confusing. Once I understood what a class actually was, everything just clicked. If you're having issues just figuring our the logic on how solve a problem, Google search divide and conquer. Basically, every complicated problem is actually a lot of simple problems. Once you learn how to break the complex problem up, the solutions will come to you. 
If you're good at C# I suggest just reading MSDN.
C# in Depth by Jon Skeet has a pretty good coverage of LINQ and a number of other advanced C# topics - most notably functionalities introduced in each version of .NET, including .NET 4.0 and .NET 4.5 (look for the 3rd edition) Entity Framework and XAML don't sound like topics that would be covered in a *C#* book specifically. For EF alone it's probably a better idea to get a dedicated book.
You can do all the same things you just said about MVC in a webforms project. You can even use MVC pages in the same project and you don't have to use asp.net controls anymore. The people I see complaining about webforms either haven't used it enough or haven't used it in years.
I'm not saying that I prefer one over the other. Any time this topic comes up people always focus on which one is better and how you should be using MVC for everything. My point is that you should use whatever is appropriate and that MVC isn't always it. Webforms too - we have other options than just MVC and webforms. Not to mention the fact that they aren't exclusive - you can use either in the same project.
So what a good book for EF?
Microsoft Virtual Academy is worth checking out.
Check out learnvisualstudio.net. Bob Tabor is amazing at making things Marine Proof. This is what helped me transistion from an IT Guy to a Junior Developer. http://members.learnvisualstudio.net/series/visual_csharp_2010_express_edition_for_absolute_beginners/
The strategy seems kludgy. IMO, don't post one thing and ajax the other unless you absolutely need to as this is a kludge (and can potentially add in a bunch of other complications like cross domain requests). In this case, I don't think you absolutely need to. This is where your business layer should kick in behind your controller. Collect all of the data and submit it to your controller in a single post. Have your controller call a business logic class/operation. In that logic, process first what you need to process first and then process second what should be processed second. In typical SOA, your data would be saved to your database through your data access layer, usually in the form of a repository. You would do the exact same thing to submit it to the 3rd party API, but instead of a repository, it is an API proxy that does pretty much the exact same thing. So in your operation/business layer, you would make one call to your repository and one call to your api proxy. In other words, your "business logic" is to send it to two different places. The pipeline would look like this: View -&gt; Controller -&gt; BusinessOperationA.Run(input) ... OperationA.Run() -&gt; Save via repository OperationA.Run() -&gt; Send to API via API proxy If the two pieces being sent have no dependency on the other, then you can make these two calls from your operation asynchronously. If not, wait for the result to come back from one so that you can process the other. TL;DR quit trying smash everything together and draw some SRP.
It looks like that's already what he's trying to do.
I think "14" is in quotes because it will come out in 2015.
Pro C# and the .NET 4.5 Framework is a good book for advance topics such as operator overloading. It also has a couple chapters on LINQ and the Entity Framework. Nothing on XAML though. 
Every day: // dependency injection. Release will always use DefaultRepo but // my unit tests need to mock it public object DoWork(IRepository repo = null) { _theRepo = repo ?? new DefaultRepo(); ... }
&gt;It got 350k views on a forum before I even started coding it, then the hype just died out. First off....views mean nothing. It takes no effort to view something on a forum. Because of that, it is a bad gauge of actual hype. Page views on a site would be more effective that are from the forum as you'd see who is really interested. Second, I click on your link and see this: &gt;No more development on the Windows version, As the top news article from almost a month ago. Then two days before that there is: &gt;Pausing development on the patcher itself due to time constraints The site comes across as something that isn't a priority for you. Now, I don't play LoL but I do play WoW and I wouldn't bother with an addon (while this isn't an addon it is close to equivalent) that I wouldn't trust to be worked on and supported. I understand real life happens and it prevents you from working on stuff, but there are better ways to phrase a stall in development. Finally, market this as something that would be useful: &gt;This is a simple DLL upgrade that anyone can do manually without any experience of coding, there should be no advantage to this You aren't really selling me on using this product at all. Bottom line: focus on getting a working product and then market it (which would include updating the copy on your site)
he is asking about C#, not a horrible language
He is new to programming. In my opinion scripting languages are the easiest to begin with. Doesn't have to be JS. Take your pick. 
Nine hours later and no comments. Windows Phone, everybody.
And Yammer.... 
looks like it, but he isn't accomplishing it. he's hooking submit, without prevent default. so the browser would navigate to a new page and likely abort the second request, if he were trying to make a second request. he's also trying to submit the same form with both sets of information, sending redundant data. currently, he's swapping (or adding) the action and submitting a single form. i agree he should write backend to handle this, but that's not what his question asks and you can't assume those things can be changed.
Thanks for that.
I was hoping an example where no external non-ms library would be used.
2nd on the bootstrap recommendation. My favorite thing about it is that it frees me up to focus on the application programming, and as long as I follow their recommendations the site will look great and be responsive.
You're barking up the wrong tree imo; this should be handled on the backend. However based on what you're attempting right here, like dirty-bit's reply to my comment says, if you're submitting a form post, you're essentially navigating away from the page, so you can't have a subsequent post. In other words, form.submit() isn't going to work. You're going to have to use ajax. Maybe something like this: $(document).ready(function(){ $('#submit-button').click(function(){ submitToSiteA(); submitToSiteB(); }); function submitToSiteA(){ var formDataForSiteA = // do work to create a request object here (form, json, or xml) $.ajax({ url: 'http://www.apiresource.com, // action type: 'POST', // method, contentType: 'application/json' // whatever your request body ended up being data: formDataForSiteA success: function(data){ // do work with results } }); } function submitToSiteB(){ var formDataForSiteB = // do work to create a request object here (form, json, or xml) $.ajax({ url: 'http://www.apiresource.com, // action type: 'POST', // method, contentType: 'application/json' // whatever your request body ended up being data: formDataForSiteB success: function(data){ // do work with results } }); } }); If one submission is dependent on another, then remove the call to submitToSiteB() from the click callback and do it from the success callback in the first ajax call. If you want to redirect after both are fired, then add that window.location = ''; after at the end of the click function. If you wanna make sure both calls succeeded before redirecting then, you could probably have a variable in the click callback that gets set by the success or error callbacks and just poll it a few times over the course of a few seconds. That last part is also kinda kludgy imo, but that's why something like this should either be redesigned or handled on the back end. Submitting to two sources is like performing CRUD in the database on multiple sources -- it should be done in some sort of transaction so that you can handle partial successes. But all of that is of course dependent on what you're trying to achieve; I only mention it for consideration.
Have you had success with other URLs? Perhaps try to set the timeout higher via req.Timeout property? 
The managed extensibility framework would do just fine too.
This works fine for me for that URL. I copy pasted your exact code except for the last 2 HtmlAgilityPack lines, and just spit source out to the console, works fine. Are you sure it is the HttpWebRequest that is timing out? What are you passing as the uri? Have you tried with just this url by itself, not doing any others with it?
^ [This](http://www.apress.com/microsoft/c/9781430242338) and [Pro WPF in .NET 4.5](http://www.apress.com/microsoft/wpf/9781430243656) Operator overloading is considered advanced? ^I ^must ^not ^be ^as ^bad ^as ^I ^thought ^:3
here's the stack trace on the exception: at System.Net.HttpWebRequest.GetResponse() at Project1.Scraper.ProcessItem(String uri, Int64 mediaID, Int64 storyID) in C:\....\Scraper.cs:line 648 line 648 is: using(WebResponse webResponse = req.GetResponse()) I wonder why it worked for you but not for me...
What are you using for the URI? Paste this in console app see if it works: System.Net.HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.HttpWebRequest.Create(@"http://feeds.boingboing.net/%7Er/boingboing/iBag/%7E3/wmATd8ChnkM/more-in-us-die-each-year-from.html"); //req.Headers[HttpRequestHeader.AcceptEncoding] = "gzip, deflate"; req.AutomaticDecompression = System.Net.DecompressionMethods.Deflate | System.Net.DecompressionMethods.GZip; req.Method = "GET"; string source = String.Empty; using (System.Net.WebResponse webResponse = req.GetResponse()) { System.Net.HttpWebResponse httpWebResponse = webResponse as System.Net.HttpWebResponse; using (StreamReader reader = new StreamReader(httpWebResponse.GetResponseStream())) { source = reader.ReadToEnd(); } httpWebResponse.Close(); } req.Abort(); Console.WriteLine(source); Console.Read(); 
This is what is being stored as the URI: "http://feeds.boingboing.net/~r/boingboing/iBag/~3/wmATd8ChnkM/more-in-us-die-each-year-from.html" this the string value I get from an api.
okay so I did just what you suggested and put the URI directly in there, and it worked for a single instance. however, when I introduced it into a foreach loop, it fails again. it's almost as if 1. something isn't being cleaned up, or 2. introducing a foreach loop royally screws with this process.
thought mef was for WPF mainly, but it's been some time since I've looked into it.
&gt; For my purposes, I have created each class as a singleton, and for kicks, I have made them thread safe by using the double-checked locking pattern. Using the [Lazy](http://msdn.microsoft.com/en-us/library/dd642331\(v=vs.110\).aspx)-class would have been a better option. The creation of the object is thread-safe. The code would be reduced to this: private static Lazy&lt;Class1&gt; _instance; public static Class1 Instance { get { return _instance.Value; } } Nothing more. This is thread-safe and much much easier to read.
Proxy?
so I have the `HttpWebRequest` code being called from a foreach loop: foreach(string url in MyList){ ProcessURI(url); } would this actually cause any problems with the `HttpWebRequest` code from functioning? or should I just have this posted as separate question?
how could I check that with regards to this?
I don't know of any libraries with this functionality but you could write one from scratch using xsl fo objects. http://sourceforge.net/projects/fop-dotnet/ Give this a readthrough to see if it helps. XSL is an amazing mark up language if you've never used it. 
Answering part of my own question here, because no one else really knew. iTextSharp has a reasonable amount of what I needed here. I still don't have the locations mapped perfectly, [but it was a good start](https://gist.github.com/anonymous/b21947138176732fa438)
Assembla is pretty neat. We use it for a whole-package-deal with git/svn, project planning and bug tracking. 
[My quick and dirty plugin system](http://github.com/Banane9/SharpPlugins)
So this is two months late but just wanted to say this is much better than my example. OP and anyone else that somehow stumbles on this post again - use this as your guide.
joshjje - you said you were running this within a foreach loop, so would you add this to the list or whatever of urls you're using and see if still works. `http://feeds.boingboing.net/~r/boingboing/iBag/~3/9oOjdz88wvg/fbi-to-reverse-no-recording-po.html`
.
Alternating between that and the other problem url in a 100 count loop works everytime for me. Here is console code I used: List&lt;Uri&gt; uris = new List&lt;Uri&gt;(); uris.Add(new Uri("http://feeds.boingboing.net/~r/boingboing/iBag/~3/wmATd8ChnkM/more-in-us-die-each-year-from.html")); uris.Add(new Uri("http://feeds.boingboing.net/~r/boingboing/iBag/~3/9oOjdz88wvg/fbi-to-reverse-no-recording-po.html")); for (int i = 0; i &lt; 100; i++) { System.Net.HttpWebRequest req = (System.Net.HttpWebRequest) System.Net.HttpWebRequest.Create(uris[i % 2]); //req.Headers[HttpRequestHeader.AcceptEncoding] = "gzip, deflate"; req.AutomaticDecompression = System.Net.DecompressionMethods.Deflate | System.Net.DecompressionMethods.GZip; req.Method = "GET"; string source = String.Empty; using (System.Net.WebResponse webResponse = req.GetResponse()) { System.Net.HttpWebResponse httpWebResponse = webResponse as System.Net.HttpWebResponse; using (StreamReader reader = new StreamReader(httpWebResponse.GetResponseStream())) { source = reader.ReadToEnd(); } httpWebResponse.Close(); } req.Abort(); Console.WriteLine(source); }
Same here
MEF works with pretty much anything in the .Net world at this point. That said, their messaging for the library is confusing at best. For example, it's a nuget package and in .Net. Mainly because they wanted a version for the app store platform and the regular version isn't designed for that, but unless you go looking for that info that isn't obvious from their documentation really. Anyway, here's their example of using it with MVC: http://msdn.microsoft.com/en-us/library/hh708870(v=vs.110).aspx
Well, what is socket.io? I got that far myself :P
It sounds like there's more to this. Are these API contracts? If so, you have to take into consideration that client is going to have know which contract to use and the the controller is going to have be expecting that version of the contract/object in order to deserialize it correctly. And also, any business logic that uses new information added in newer versions of the object is going to differ from earlier logic (i.e. it also needs to be versioned) and that can get really messy, but it is what it is. Unfortunately, I'm not sure there's any *pretty* way to do this. Typically, what I have seen is that the version is either called out in the url, a custom header, or custom media type. What we did was use a custom media type which gets parsed before the controller is newed up. Using MVC, we created a custom controller dispatcher that would analyze the request before instantiating the controller so that it could choose a versioned controller; the versioned controller action parameters had the correct version of the contract so the incoming payload would be deserialized properly. And then the ugly part... Like I mentioned earlier, new contracts usually mean new logic which means the business logic has to be versioned as well, so your architecture should be SOA to support this cleanly. Every controller lived in a versioned namespace like you suspected (e.g. MyApplication.Controllers.V1.AccountController) and those referenced the new contracts (e.g. MyApplication.Object.Domain.Account.V1.UserInformation) and the controller would correctly map the versioned contract to a versioned domain request object if needed (if it's just a structural update, then you can still map the new contract version to an old domain object). The basic idea is that once a version is selected by the dispatcher, the controller can start the new versioned path of execution. Here are a few examples: // old controller, contract, domain request and operation public class V1.Controller : Controller { public HttpResponseMessage DoWork(Account.V1.MyRequest request) { var operation = new Logic.Account.V1.MyOperation(); var domainRequest = request.Map(new Account.V1.MyRequestMapper()); return OperationProxy(operation, domainRequest); } } // new controller, new contract, old domain request object, old operation public class V2.Controller : Controller { public HttpResponseMessage DoWork(Account.V2.MyRequest request) { var operation = new Logic.Account.V1.MyOperation(); var domainRequest = request.Map(new Account.V1.MyRequestMapper()); return OperationProxy(operation, domainRequest); } } // new controller, new contract, new domain request, old operation public class V2.Controller : Controller { public HttpResponseMessage DoWork(Account.V2.MyRequest request) { var operation = new Logic.Account.V1.MyOperation(); var domainRequest = request.Map(new Account.V2.MyRequestMapper()); return OperationProxy(operation, domainRequest); } } // new controller, new contract, new domain request, new operation public class V2.Controller : Controller { public HttpResponseMessage DoWork(Account.V2.MyRequest request) { var operation = new Logic.Account.V2.MyOperation(); var domainRequest = request.Map(new Account.V2.MyRequestMapper()); return OperationProxy(operation, domainRequest); } } // or even a new controller, old contract, old domain request, new logic/operation public class V2.Controller : Controller { public HttpResponseMessage DoWork(Account.V1.MyRequest request) { var operation = new Logic.Account.V2.MyOperation(); var domainRequest = request.Map(new Account.V1.MyRequestMapper()); return OperationProxy(operation, domainRequest); } }
Protocol Buffers has some support for versions of objects, if you want to muddy the waters of persistence a bit further. 
did you try doing doc.LoadHtml(source) inside of the inner using statement? I run into this problem a lot when I use using statements with streams and it always turns out to be because the resource is disposed before I do anything with it.
I've yet to see a good use case for MEF. On every project that I've been on it eventually caused so many problems that I was able to convince the lead developer that it needed to ripped out. 
&gt; It's a plugin-based service architecture that allows me to load balance and distribute across nodes by dropping the plugins into appropriate folders and letting the service pick them up and load them in. I could do that in about five minutes using the standard Reflection APIs. Ten if you want me to use FileSystemWatcher to detect newly dropped plugins at run time instead of just when the service starts. What you are doing sounds really interesting, but I'm having a hard time understanding where MEF fits into the picture. 
&gt; My biggest worry is having two classes of the same name and namespace in my project which I don't think will work. Easy. Now I'm not saying you should do this. In fact I'm telling you not to. But in the interest of your education, I am telling you that you can give an assembly an "alias" at compile time. 1. Add one version to you references 2. Set its Aliases property in the Properties window 3. Add the second version 
http://msdn.microsoft.com/en-us/library/ms229752(v=vs.110).aspx
It's hard to explain without sitting down and diagraming things out and...well...yay work, can't really do that :/ My point is, use it where it seems appropriate. If it gives you grief, rip it out and roll yer own. Tis what .NET developers have done since 2.0
Socket.IO enables real-time bidirectional event-based communication. It works on every platform, browser or device, focusing equally on reliability and speed. Its useful for Real-time analytics, Instant messaging and chat, Document collaboration, Binary streaming etc.
Hi PhonicUK I'm having trouble trying to figure out how to create a ModelContainer in C# in Visual Studio 2013 Express. I've got an edmx file for my ERD of the SQL Server 2014 Express database. Which extension for the file name for the ModelContainer do I use? Do I need to put a using namespace statement at the top in the class file that I wish to put the code you have your reply? Thanks. 
Yes, socket.io provides a hook point to easily allow you to emit events to browsers from anywhere so socket.io-csharp-emitter communicates with socket.io through redis.
Aha, thanks. Sounds like a cool Thing, then. Imo, "Socket.IO" is a too broad Name for something like That. Afterall it just means "socket Input/Output" which might as well be any other data Transfer/communication over sockets ... and the Thing That sockets are usually somewhere in an IO related package/Namespace doesn't help it.
1. "Pausing" development due to there being nothing more to develop. 2. It is free and open source, i'm not trying to sell the product. 2.1 I can't sell it because it breaks LoLs TOS
Socket.IO is a library for Node.JS, not .NET. It enables real time push/pull communication over HTTP. The .NET equivalent is called SignalR. The reason it is called Socket.IO is because it uses websockets as the primary method of communication. It abstracts all that away from you though so if you don't have websockets available, it can fallback to things like long polling, etc.
If the request is timing out and other url's work, then it makes me wonder if that site ignores your user agent. Another off the cuff idea is that perhaps the site is https or http only and your url is either mistyped or doesn't handle the redirect.
&gt;1. "Pausing" development due to there being nothing more to develop. Then there should be a post saying that the windows version is complete. I had no clue that you were done with it based on your post. &gt;2. It is free and open source, i'm not trying to sell the product. 2.1 I can't sell it because it breaks LoLs TOS This is where you are wrong though. You aren't selling the product for money but you are trying to sell the user on using your product. Software development isn't the field of dreams....just because you make it doesn't mean anybody will come. Once the development is done, you have to market it. This could be blog posts, forum posts (which you've already done, but have you made one saying that the windows client is done?), reddit posts, etc.
I'm not sure if it's viable for you, but I've had success in the past using double-serialization. Serialize your object, then store that serialized data in another class which also encodes type/versioning information. For example: public class SerializedObject { public string ClassName { get; set; } public string AssemblyFullName { get; set; } public int VersionNumber { get; set; } public string Data { get; set; } } Now, you may want to not encode type information directly (using, say, the Assembly Qualified Name) but just using a version number seeing as this _might_ be a security issue where clients send malicious type names (so definitely implement some sort of vetting or validation of the types/versions that are sent) Your serialization/deserialization code should be abstracted from your business logic. So your deserialization would read some _version specific Plain-Old-CLR-Object_ that the client sent. Convert it (via whatever means, perhaps AutoMapper) to the _current version business object_ the rest of your application uses. Really, the above paragraph is likely good advice _regardless_ of the serialization mechanism you intend to implement. The double-serialization might just serve as a medium to provide a constant public-facing API contract that doesn't change regardless of how much the underlying double-serialized object changes going forward.
Most server to server authentication is done via OAuth. You can also have the caller present a certificate that the callee then validates. Don't rely on anything that can be spoofed.
OAuth means running a 3rd server correct? This is for use on an Intranet, so I'd rather not go out to the internet for auth purposes. Is there a code example of presenting and consuming a cert? Thanks
Whitelist as in my example, pass an app id and guid (password) in the header? Are you thinking writing my own custom Authorize action filter?
You could try something more dynamic. Serialize the objects to key - value pairs. Then your deserializer is written to account for discrepancies between versions (or you put a "Version" key on each object and have multiple deserializers). You could possibly use reflection to automate some of that Dictionary to Object mapping.
There is the option to use hash based authentication. Basically both client and server have a private "key" and you hash the message and pass an id. The server hashes the message with the same key to validate authenticity. If you are interested I can lookup a page but it should be easy to find by searching HMAC.
joshjje - Thanks I've been able to test what I have and I've been able to narrow down that the one problem i had was actually more than one. you've helped me to resolve one of them, getting the one url to work consistently. I now need to resolve a different issue. I'm using this code as part of a catch for gzip encoded URLs and the other way is using `HtmlAgilityPack.HtmlDocument` and `HtmlAgilityPack.HtmlWeb`. somehow using both ways causes the `HttpWebRequest` to timeout. I'll probably just post that as a different question. Thank you all for all the help and suggestions!
thanks, I don't know why i didn't do that in the first place.
&gt;OAuth means running a 3rd server correct? Not really. Could just be a vhost on an existing server. This is for use on an Intranet, so I'd rather not go out to the internet for auth purposes. So don't put it on the internet.... 
I'm new to OAuth, is there some examples of getting this set up, and using it within .NET? Thanks
for those wanting a link to the other question here it is [link](http://www.reddit.com/r/csharp/comments/27shgi/using_htmlweb_causes_httpwebrequest_to_timeout/) 
If it's used for an intranet, why not just restrict the IIS app itself to only authorized users / domain users. That way, the only machines that can access it are the ones that are logged into the network. Instead of anonymous access (the default for IIS) -- set it for Windows Authentication. Also, take a look at all the options when you go to create a new project/webapp in VS201(2/3?) -- when you pick that you want Web API and/or MVC, it asks what kind of authentication you want for it -- I think the choices are windows, the user-provider , and basic or some such.
This smells like a job for a certificate.
I ended up writing my own, that passed a user token over the wire (un verified but because of a white list and firewalls... not the biggest issue ever). The token is easy enough to do and you should be able to implement it with just a additional header and custom message handler. Or you could do something like Server to server oauth. https://developers.google.com/accounts/docs/OAuth2ServiceAccount (granted its google, but i'm sure something else exists out there). 
Why not load via WebRequest first, instead of HtmlWeb call. then you can inspect the response header for gzip, and decompress as needed each time. http://forrst.com/posts/Enabling_GZip_compression_with_HttpClient-u0X Then simply call:: HtmlDocument doc = new HtmlDocument(); doc.LoadHtml(html); 
This is what I do. Mvc/client requests a token using name/password. Api responds with token that has a lifespan and will need regeneration later.
I think that may be the way I will have to go. I currently have a test project up with code that looks a little different and it works for all the URLs I currently would be looking at. System.Net.HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.HttpWebRequest.Create(uri); //req.Headers[HttpRequestHeader.AcceptEncoding] = "gzip, deflate"; //req.AutomaticDecompression = System.Net.DecompressionMethods.Deflate | System.Net.DecompressionMethods.GZip; //req.Method = "GET"; string source = String.Empty; try { using (System.Net.WebResponse webResponse = req.GetResponse()) { using (HttpWebResponse httpWebResponse = webResponse as HttpWebResponse) { StreamReader reader; if (httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) { reader = new StreamReader(new GZipStream(httpWebResponse.GetResponseStream(), CompressionMode.Decompress)); } else if (httpWebResponse.ContentEncoding.ToLower().Contains("deflate")) { reader = new StreamReader(new DeflateStream(httpWebResponse.GetResponseStream(), CompressionMode.Decompress)); } else { reader = new StreamReader(httpWebResponse.GetResponseStream()); } source = reader.ReadToEnd(); } } req.Abort(); } catch(Exception ex){ //received a 404 Error - apparently one of my links is now dead... }
Your line that starts with "xmlHttpReq.send" includes the sURL variable, but that variable is only defined later on. The error you posted sounds a lot like a local JS error, so that should be a dead giveaway that your server side isn't at fault. Also you should see in your browser's dev tools that the request isn't sent to begin with. Also, please try formatting your post as code next time.
&gt; , please try formatting your post as code next time. You're correct. My apologies. However, the sURL variable is declared above, just not shown in my post. Again, the code does work on the local domain, but not cross domain. Thanks again for reviewing it.
So, is a request sent to the web server? If so, what is the response?
The response, when run from the same server/domain is: "Feelz Icon: http://feelzmecom.webhost4life.com/Maskz/08.png" The response when run on another machine is: an "undefined" error on the ".send(" line. You can see it, run it at: http://feelzmecom.webhost4life.com/widget.html
When I visit that page, I also get "Uncaught SyntaxError: Unexpected token :" on line 86 of the html page. Probably because there is a semicolon instead of a comma at the end of the line (before the comment starts). The actual error received from the web server is HTTP 405 (Method Not Allowed). That points to an error with your web.config in that it does not allow those requests. You could have a look [here](http://www.asp.net/web-api/overview/testing-and-debugging/troubleshooting-http-405-errors-after-publishing-web-api-applications) and/or post your full web.config (or the relevant parts of it).
I have read the link, thanks btw, but I'm not sure what I am seeing. I thought it might be best if I remove all excess from the widget.html file and repost it: http://feelzmecom.webhost4life.com/widget.html I am not seeing a 405 error (Firebug for me) and again, it works when called from this page, just not when I call it from another domain. Here is my complete web.config file: &lt;?xml version="1.0"?&gt; &lt;configuration&gt; &lt;configSections&gt; &lt;sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"&gt; &lt;sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"&gt; &lt;section name="scriptResourceHandler" type="System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/&gt; &lt;sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"&gt; &lt;section name="jsonSerialization" type="System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="Everywhere" /&gt; &lt;section name="profileService" type="System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" /&gt; &lt;section name="authenticationService" type="System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" /&gt; &lt;section name="roleService" type="System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" /&gt; &lt;/sectionGroup&gt; &lt;/sectionGroup&gt; &lt;/sectionGroup&gt; &lt;/configSections&gt; &lt;appSettings/&gt; &lt;connectionStrings/&gt; &lt;system.web&gt; &lt;compilation debug="true" &gt; &lt;assemblies&gt; &lt;add assembly="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/&gt; &lt;add assembly="System.Data.DataSetExtensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/&gt; &lt;add assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;add assembly="System.Xml.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/&gt; &lt;/assemblies&gt; &lt;/compilation&gt; &lt;!-- The &lt;authentication&gt; section enables configuration of the security authentication mode used by ASP.NET to identify an incoming user. --&gt; &lt;authentication mode="Windows" /&gt; &lt;!-- The &lt;customErrors&gt; section enables configuration of what to do if/when an unhandled error occurs during the execution of a request. Specifically, it enables developers to configure html error pages to be displayed in place of a error stack trace. &lt;customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm"&gt; &lt;error statusCode="403" redirect="NoAccess.htm" /&gt; &lt;error statusCode="404" redirect="FileNotFound.htm" /&gt; &lt;/customErrors&gt; --&gt; &lt;pages&gt; &lt;controls&gt; &lt;add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;/controls&gt; &lt;/pages&gt; &lt;httpHandlers&gt; &lt;remove verb="*" path="*.asmx"/&gt; &lt;add verb="*" path="*.asmx" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;add verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false"/&gt; &lt;/httpHandlers&gt; &lt;httpModules&gt; &lt;add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;/httpModules&gt; &lt;/system.web&gt; &lt;system.codedom&gt; &lt;compilers&gt; &lt;compiler language="c#;cs;csharp" extension=".cs" warningLevel="4" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"&gt; &lt;providerOption name="CompilerVersion" value="v3.5"/&gt; &lt;providerOption name="WarnAsError" value="false"/&gt; &lt;/compiler&gt; &lt;/compilers&gt; &lt;/system.codedom&gt; &lt;!-- The system.webServer section is required for running ASP.NET AJAX under Internet Information Services 7.0. It is not necessary for previous version of IIS. --&gt; &lt;system.webServer&gt; &lt;httpProtocol&gt; &lt;customHeaders&gt; &lt;add name="Access-Control-Allow-Origin" value="*"/&gt; &lt;add name="Access-Control-Allow-Headers" value="Origin, X-Requested-With, Content-Type, Accept" /&gt; &lt;/customHeaders&gt; &lt;/httpProtocol&gt; &lt;validation validateIntegratedModeConfiguration="false"/&gt; &lt;modules&gt; &lt;remove name="ScriptModule" /&gt; &lt;add name="ScriptModule" preCondition="managedHandler" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;/modules&gt; &lt;handlers&gt; &lt;remove name="WebServiceHandlerFactory-Integrated"/&gt; &lt;remove name="ScriptHandlerFactory" /&gt; &lt;remove name="ScriptHandlerFactoryAppServices" /&gt; &lt;remove name="ScriptResource" /&gt; &lt;add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/&gt; &lt;add name="ScriptResource" preCondition="integratedMode" verb="GET,HEAD" path="ScriptResource.axd" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /&gt; &lt;/handlers&gt; &lt;/system.webServer&gt; &lt;runtime&gt; &lt;assemblyBinding appliesTo="v2.0.50727" xmlns="urn:schemas-microsoft-com:asm.v1"&gt; &lt;dependentAssembly&gt; &lt;assemblyIdentity name="System.Web.Extensions" publicKeyToken="31bf3856ad364e35"/&gt; &lt;bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="3.5.0.0"/&gt; &lt;/dependentAssembly&gt; &lt;dependentAssembly&gt; &lt;assemblyIdentity name="System.Web.Extensions.Design" publicKeyToken="31bf3856ad364e35"/&gt; &lt;bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="3.5.0.0"/&gt; &lt;/dependentAssembly&gt; &lt;/assemblyBinding&gt; &lt;/runtime&gt; &lt;/configuration&gt;
I get that sometimes when the NSA taps in....
I had not included the namespaces Script.Services or Web.Services.Protocoles, nor had I added [ScriptMethod] or [ScriptService] I went looking for some details on this and found this article: http://msdn.microsoft.com/en-us/library/bb398995%28v=vs.90%29.aspx So I updated the Service code with these (see below) and yet I still get the same "undefined" error. I feel like I'm getting closer, THANK YOU, but still missing the point. (at least I admit it) C# Web Service code namespace FeelzMeService { [WebService(Namespace = "http://feelzmecom.webhost4life.com/")] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] [System.ComponentModel.ToolboxItem(false)] [System.Web.Script.Services.ScriptService] public class FeelzMeSrvc : System.Web.Services.WebService { [WebMethod (CacheDuration=2, Description="Retrieve the current Feelz by identity or url/content.")] [ScriptMethod(ResponseFormat = ResponseFormat.Xml, XmlSerializeString = true)] public string GetFeelz(string sInput) { string sReturn = ""; try {
with this setup, you'd have to implement your own oauth provider. Seems WAY out of scope
Setup some user creds on your server that will be used by your application(s). Configure their permissions in IIS. Configure WebAPI to use Windows authentication. Protect your controllers with the AuthorizeAttribute. In your web app, make sure that all requests to the API are handled in the application's server-side code. If both are hosted on the same domain, you will not need to pass any credentials. If they're not on the same domain, then just pass them with the HttpClientHandler. No tokens, No 3rd party auth, No exposure of creds. Just a trusted application.
I'm reading... but I wanted to quickly thank you for your time. I appreciate it VERY much. I had to update the Framework to 4.5 to allow for HttpResponseMessage and this has changed how the local copy is working.... so that's what I am looking at now. But in any case, that you for your time!
You're welcome :)
Sure, glad I could help. I saw your other link and I get the same issue when using the agility pack. I agree with first poster and just always get it with httpwebrequest first.
I'm really not sure what you messed up to get a 404 now. Does your web host support .net 4.5 at all? Also, I'm not confident that pasting the code from the SO post there without further research really was the correct course of action in your scenario. OTOH, I'm almost certain that there are other ways to respond to an OPTION request with a success response code. If I were you, I'd start over again with a clean slate as it seems that you have cargo-culted a good deal of stuff in your project. I would try to follow one of the tutorials from [asp.net](http://www.asp.net/web-api) or watching one of the many brilliant webcasts/sessions on [Channel9](http://channel9.msdn.com/). When you have a web service that more or less does what you want, you can tweak it to send the "Access-Control-Allow-Origin"-header and to respond successfully to an OPTION request so that browsers can probe for said header. Apart from all that, I can highly recommend Windows Azure Web Sites for simple (and free, if you don't need much) ASP.net hosting, as the Visual Studio integration really is top notch and there are a lot of things you don't have to worry about with Azure when you are just trying to get started.
Yea if I go back to .NET 3.5 I can get the code to respond... but then I can't use "HttpResponseMessage" My provider seems to only support 3.5 and 4.0 I got the idea that pasting the code in wouldn't do the job... but without context I had no idea. (hello people! Give context to what you are writing!) I spent some time looking for context and usage, but without success. I am about to revert the code back to the 3.5 version. Give me 5 min
Alright, when you've done that, we're back to figuring out why the OPTIONS-request does not go through. Does your have web host have WebDAV enabled by any chance? If so, this may also be getting in the way of your request as described [here](http://brockallen.com/2012/10/18/cors-iis-and-webdav/). In that case, you would only have to add the lines &lt;remove name="WebDAVModule" /&gt; and &lt;remove name="WebDAV" /&gt; in their appropriate sections.
Maybe not as much "advanced" as "not your bread and butter". It's a nice feature but I wouldn't miss it.
I added those two lines to Modules and Handlers, respectively. The article you mentioned includes 3 move "remove" and 3 "adds", should I include these as well? I ran a test and still get the error on .send But at least I have a clue, thanks to you, that this error is happening server side.
Nope. It really depends on your code, and the purpose of the class. Eg if this Person class is related to a profile table in a db, then you might do both, ie a constructor for reading from the table, and the properties so your user can update their information. If it's only for reading, you might use constructor arguments to set and make them readonly etc etc. Or you could use the initialiser style eg: var x = new Person{Name="xx", Age=45};
Ok I see, so really depending on the problem then. Thanks for the help.
If the information is necessary for the class to work, put it in the constructor. You should generally use properties for all public data in your class, even if they're only auto implementations.
how do you mean auto implementations? leaving the get and set empty?
I'll take a peek at this tomorrow, I need to take a break. But again Thank you Thank you. Next time you're in NYC, drinks on me
I have no experience with your side of things, but [Stack Overflow has a career portal that is quite visible on a couple of highly relevant sites](http://careers.stackoverflow.com/products). Maybe that's interesting for you.
I think this is exactly what I needed. Much appreciated!
hasn't anyone mentioned JSONP? http://en.wikipedia.org/wiki/JSONP 
Try icrunchdata.com.
Oh, I missed the .NET subreddit. What should I do if I want to repost it there? Should I delete this post?
You should be active in these subreddits first, before using it to promote your own stuff. The advised ratio would be 9:1.
&gt; We work for highly-visible brands and are definitely willing to compensate people for the value they bring to the business. Are you? The problem with sentences like this is that the *value* in your eyes is easily much more less than the *value* of "great web developer". The general rule to find people is to make the open position as publicly known as possible. Monster, StepStone, LinkedIn, Stack Career, newspapers, your own homepage. Perhaps even write to people directly on pages like LinkedIn. Your announcement must be interesting and compelling, don't have boring standard stuff - but be clear on the job description and what you want. The more clear this is, the more likely you'll attract fitting people. But after you found people comes the much more difficult part: How to make them **want to** work with you? A good payment is not everything. How is the company culture? How flexible are the work times? Paid holidays? Perhaps even a thirteenth payment for christmas? Sometimes work from home possible? How flat is the hierachy of the company? All values to consider. If you want **great** people, you need to offer a **great** workplace.
It's a sellers market right now. My general advice would be... 1 - Pay up. Experienced .Net developers are expensive right now, and it probably won't change any time soon. Suck it up and buy quality, because going cheap will cost you more in the long run. Pay to be picky. 2 - Be interesting. Make your workplace fun -- have a money bucket to make it interesting -- and you'll probably save yourself money in the long run, if you mainly hire knowledge workers. What I mean by this is that you should build a culture and a environment that people want to spend their day in. 3 - Recognize the value of knowledge. Re-evaluate salaries regularly, because the market continues to change for skills like .NET. It's far cheaper to proactively give someone a raise/bonus rather than have a wealth of knowledge walk out the door.....for $5k more money down the street. That person who walks out the door can fix something in minutes that will take a new hire or consultant days or weeks. 
Thank you very much for the information! I'm new to reddit and to news itself, but I'll follow your advice!
It does depend on the problem, but I would recommend that you use constructors and readonly properties unless you have a reason not to.
C# is object-oriented and you should use this paradigm wherever you can. Why overcomplicating this problem? Instead of 3-dimension array, you can define 1-dimension array (or List) of your own Series class, which has a series' name and List of Seasons (also custom class) objects. 
I'm not too advanced in C#, especially when it comes to multidimensional arrays, and when I did something like this in LUA it was much easier so thought it couldn't be too hard in C# - guess I was wrong though. Could you provide a few links on what you described? Would be much appreciated.
Thanks for the reply, that makes sense. Ill check the link. 
Well, theretically you could do it in 3-dimensional array, but if we have object-oriented mechanisms, we should use them. For more info, just google "c# oop examples". Couple first matches are pretty much all I wanted to say.
1. Pay up (as others have pointed out) 1. Be honest about the work/position 1. Give them up to date tools 1. Ditch the technical interview, and get them to actually write some code, pay them for their time (if appropriate) 1. have your existing developers talk them through their projects, best parts, worst parts, what they would change.
Sellers market where? I'm looking at returning to Sacramento CA and hoping you're talking about US/NorCal. Canberra Australia, on the other hand, was a gravy train for nearly a decade, but that bastard derailed about 18 months ago. My rates are down 23% in the last 5 months. It's definitely a buyers market in Canberra and Australia in general.
Number 5 ...... I will never interview for another company where I can't talk to existing developers (without management present) at some point in the process. 
I have come across it, but haven't tried it. Today is another day and maybe that'll be the answer. Thanks for the info.
I am having to deal with the results of "cheap" every day. They hired a guy a few years ago - he got them what they wanted, but oh, that code makes me ill. Every time he had to choose a technology stack, he chose the one that was going to be obsolete inside 2 years. 
Basically, you can load scripts from 3rd party domains, then provide a callback function for their script to call and pass data to. jQuery makes JSONP easy. Look into it. you make your jQuery $.ajax() or $.getJSON() call to your .asmx with dataType set to "JSONP". Your URL should look like this: http://myexternaldomain/myscript.asmx?callback=? jQuery will create a temporary function and pass the function name as the callback querystring parameter to your asmx. In your asmx, you'll have access to the callback function name in Request.QueryString["callback"] http://stackoverflow.com/questions/14673725/support-jsonp-returns-in-asp-net
Then of course you can start using object initializers to provide a somewhat similar syntax as the original LUA/array-based code: Series mySeries = new Series("Best show ever.") { Seasons = new List&lt;Season&gt; { new Season(1) { Episodes = new List&lt;Episode&gt; { new Episode(1, "Pilot"), new Episode(2, "The End"), } } } }; (You could tweak the object model and/or constructors and/or factory methods to help make the creation even simpler) Then of course, you can go a step further and define your information as an XML file to be read in and automatically deserialized via `XmlSerializer` and later saved/serialized back to the file.
Auto-Implemented Properties on MSDN: http://msdn.microsoft.com/en-CA/library/bb384054.aspx
Are the images just files or are they bytes in a database?
They are just files. 
To display the image in the program, you'll need to load it using the [Image](http://msdn.microsoft.com/en-us/library/system.drawing.image.aspx) class, then you'll want a [PictureBox](http://msdn.microsoft.com/en-us/library/system.windows.forms.picturebox%28v=vs.110%29.aspx) to display it on the form. I'm not sure what you mean with the OpenFileDialog, could you post the code you're using here?
It's one developer at that company? *shudders*
Ok haha that is way more simple than i thought it was going to have to be haha. Thank you so much. You have ended my struggle
Do people really store images in databases? I read a long time ago that "there's a really amazing, optimised database already in existence for storing image files, it's called a file system".
They sure do. I remember back when I was tinkering with SharePoint I believe everything was stored in the database. Any uploaded files, the server side code to power your intranet pages, it all went in the DB. I think DB was the only built in method of storage, at least back then, but you could hook it up to other types of storage through an API.
Whatever class you added them as resources in should have a Properties.Resources class. See if there exists something like: Properties.Resources.bluegill
&gt; It's a pretty simple thing to store an image as a byte and then display it as an image A byte? That's a pretty small image!
Or a really big, really white one.
Even then, it would be 16x16 pixels at most, if you encoded the size as two 4-bit integers and had no colour data.
byte array corrected.
ultra mega noob question borderline downvote... whats a nuget report about your project, in english what does it do?. sorry.
Most classes that have an instance are one of two things, Classes that do work, or classes that model data. Typically, classes that model classes, would not have a constructor that requires parameters. Classes that do work, can have contructors, though it isn't required, and really depends on the situation. If your using an IOC Container, or Dependency injection, you could be using property injection or constructor injection and that may change your design slightly
You can reference the Windows Media Player components to extract that information. But there's nothing that's part of the standard framework to do this since it's domain specific.
What kind of application are you creating? If you're developing a WPF or Silverlight app I believe you can use [MediaElement](http://msdn.microsoft.com/en-us/library/system.windows.controls.mediaelement\(v=vs.110\).aspx) to load the files and find out their durations from the NaturalDuration property.
Thanks. I'm pretty green, I can't figure out haw to access the WMP stuff.
File system isn't particularly useful when you want scalable and distributable.
Well you could pick up a reference to the mp4/m4a container metadata format and build your own parser, but that's obviously not really what you're looking for.
Take a look http://naudio.codeplex.com. If you want to use media player you will have to do it via the win32 API or go trawling the web for a managed wrapper. Normally no matter what you want to do, someone somewhere will have written a wrapper or library or some type. Normally codeplex, code project or google code will yield something. 
Stumbled upon this when I wondered why there was no LargeIcon for my button... The compiler was kind enough to provide a hint in the form of a warning: This label has not been referenced.
16x16 yes. Pixels....maybe maybe not. Could be in parsecs. If you store byte arrays in the database you never really know what it's used for.
Sure, the use of the colon makes it a label. Then that label is never used (referenced). Seems right to me.
Thanks for the link, I've seen this post already, but I couldn't get shell32 into my project. ( this is literally my first day with Visual Studio, and it's an uphill battle ). From what I gather so far, there is a dll file, possibly already on my hard drive, and all I have to do is include it in my project. I can't figure out how to do that. ( any advice? ..am I even on the right track? )
Use WebApi
I did this for my program. It's the better option, since the others are slow or won't read something bigger than 2GB. However, like OP (I too was very inexperienced with C#), I didn't know how to add shell32 to my project easily. What I did was locate the dll in my PC and add it to my project. I think the file is in the system32 folder. Look up how to add references with Visual Studio. I'm not sure if it's the correct way though. 
You're right of course, and proper indentation would've highlighted it too. Still, though...
Can you be specific, I am wandering around this site looking for cross-domain info... but there is a lot here.
Look into p/invoke for calling native methods directly from c#. There are plenty of articles about how to do this. Once you have the idea, check out http://www.pinvoke.net. 
If indeed you need to reference the shell32.dll (I'm not sure on this, don't have time to look into it) just follow the steps in MSDN: http://msdn.microsoft.com/en-us/library/wkze6zky.aspx From what I gather shell32 is in the windows\system32\. I'll try to look into it more later tonight. 
If you ever work on enterprise level applications, you will learn how rarely using a flat file system is the best solution for storing data that will be consumed by your client.
I can't up vote this enough. Don't ask lame .net questions like "what is the difference between an interface and an abstract class" nor "what do all objects inherit from". These questions say a lot more about the low bar at the workplace then you may be aware of. Talk about your technology stack. Ask which tech stack the interviewee recommends for certain problems. Talk about were you would like the tech stack will go in the future. Describe the culture there. Is there going to be somebody peeking over their shoulder? Or will you not care what they do with their time as long as they get their tasks done. These policies speak volumes. (Edited to correct swype mistakes)
But also yes. Stackoverflow and LinkedIn are the first places you should look for good developers. 
Build yourself a handler that acts as a proxy to your target. Your client-side code can make json requests to your handler. And your handler can make the server-to- server calls to http://feelzmecom.webhost4life.com/FeelzMeSRV.asmx 
So its been a long day and its late, so I'll do my best in a constrained amount of time. This is going to be a more general requirements for CORS rather than language/framework specific. First off, make sure you've got good debugging tools. Go and download Fiddler, figure out how to set it up, figure out how to read it. It will help you immensely as you will be able to see the actual HTTP Request and Response in various formats. Secondly, you will notice that any XHR that breaks same-origin policy will include an "Origin" header. That is the browsers way of asking the server if its okay to access that resource cross-origin. If you are doing active (code rather than config) CORS support, use the presence of this request header to trigger your CORS code. At minimum your server needs to include an "Access-Control-Allow-Origin" response header with a value that is either exactly equal (ASCII case-insensitive) to the "Origin" request header, or simply a "*" to indicate all origins are allowed. Additionally, if you want to allow cookies and/or HTTP-Basic Auth to be included in the request, you must include a "Access-Control-Allow-Credentials" response header with a value of "true". If you do this, you cannot use a wildcard in the "Access-Control-Allow-Origin" header, above. You must also indicate on your XHR a "withCredentials=true" property to tell the browser that you want to include cookies. If you use Methods other than GET or POST, or use any specialized headers you will also need to be able to handle "pre-flight" requests. These come to your server using the OPTIONS method. You should immediately return a 200 OK, with no body, and the all the CORS headers discussed here. Do NOT allow OPTIONS methods to hit your actual application-level code. You may also need to supply "Access-Control-Allow-Methods" and "Access-Control-Allow-Headers" response headers. Look for the following request headers to indicate that these are required: "Access-Control-Request-Methods" and "Access-Control-Request-Headers". Finally, to avoid repeated pre-flight requests you can provide an "Access-Control-Max-Age" to indicate how long (in seconds) the access control should be cached. Source: Have implemented CORS a few times. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Max-Age
UPN is not the same as email address, is exchange installed in the AD environment your querying? If so the mail attribute should be the correct query (there are also extended msExhange attribute I can't remember off my head). If exchange isn't installed their is no guarantee that the Domain Admins are populating the attribute correctly, you'd need to check with them for confirmation.
Nope, until someone implements it. Maybe you? :)
That's exactly what I meant, but I didn't want to write whole code because of learning factor I highly approve.
I hate to say this, but IMO HFC# is extremely easy, including the labs. The final lab is a bit time consuming but not altogether difficult if you have completed the book up to that point. If you are finding this book too challenging, then I suspect you are struggling with the fundamentals of programming which this book assumes you have a grasp of. If that is something you need to learn, then there is also a "Head first programming" book that covers such things which might be a better start for you.
You set the Anchor property to be all four edges, so it'll maintain the same distance from each edge. However if you're starting a new project, I'd strongly suggest doing it in WPF instead of WinForms. It's not significantly more difficult but it is a lot more flexible.
Use the Anchor property. Anchor the tab control to all 4 edges of the form. 
Thanks, glad you like it
Would you mind explaining how? Code snippet?
It's not a new project :/
I'm on my iPad now. Maybe later today. 
Sure, i am about to head off in like an hour, but i'll look tomorrow :)
I bet it's those *TL;DR;* people who didn't read the &gt; don't use this unless you absolutely have to part in the end.
[Imgur](http://i.imgur.com/sLkJHvc.png?1)
It's a property in the designer (although you can set them in code via control.anchor). Every control has Dock and Anchor properties to help with layout. To add to this ... you can also use the TableLayoutPanel, and FlowLayoutPanel (docking and anchoring controls into them) to help build nice auto scaling forms.
Well, thank you very much for the interesting article :)
Why not install win 7 directly, instead of virtualization ?
My question too. Regarding the switch to Win8 IMO I'm still on Win7 and won't be going 8 anytime soon, as a dev I don't feel the need, it brings me nothing of value (in my field of work that is).
I know what you mean, I have zero experience with Win8 but we had a similar problem years ago when one dev computer was a Vista with Visual Studio 2008, the thing was crashing, freezing etc. That's one of the reasons we stay on Win7 (skipped Vista from WinXP). On my home PC I sport Win7 and Ubuntu dualboot. Might try Win8 if I get it free someday, which I doubt.
&gt; productive and stable in Windows 8. I was not able to. I'm curious . we have two guys here who are running win 8 + VS 2012 with no problems.. Standard setup outlook, ms office, etc, etc 
Thanks, pInvoke came up during my search, but I couldn't figure it out. I will definitely have another look at it though.
To answer your question at the end, I'm on Windows 8 and 8.1, using various versions of Visual Studio, and haven't had the problems you've described. I use VMWare Workstation to create different development VMs. I do have a problem with VMWare sometimes. However, I suspect it's VMWare, and not Windows, since I haven't had any problems when running my "base" (non-VM) Windows 8.1. I've actually been happy with Windows 8/8.1, since it drastically decreased my boot time - making it more likely that I'll do those little changes/updates to my programs when I have a new idea.
This presentation linked in the article is worth watching: Essential Truths Everyone Should Know about Performance in a Large Managed Codebase http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333#fbid=
I'm not sure what the article means by "Avoiding allocations altogether". As in avoid allocating memory?? 
I guess I really meant "avoiding unnecessary allocations", but the idea is to not call methods that allocation temporary string/objects, when you don't need to. The method here is a good example http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp/Compiler/DocumentationCommentCompiler.cs#729. The simple code to write is string.Trim(..), followed by string.StartsWith(). But they avoided creating the extra strings that string.Trim(..) makes, by doing it "in-place".
I am on windows 8 and I have to say that it's the most stable &amp; performant OS I've ever used, the GUI of linux is buggy as hell, often times when I used linux it just halted for no reason so I had to restart. Visual Studio 2013 &amp; Windows 8 have gotten very powerful and I don't see any reason to change to a second-class operating system.
So you are saying that you should avoid newing up objects (ie allocating memory) when its not necessary because that reduces the work the GC is required to do. That all makes sense. I was just not familiar with using the word allocate. Although in c you alloc or malloc memory for objects so I should have got it and I kinda did.
I'm going with, "windows 8 is bad because reasons" Then when any snag came up instead of thinking, "how can I make this work for me" the thought was "see windows 8 is bad!". 
Very interesting and informative read. One of the few articles I've read from start to finish in this sub recently.
Yeah you don't really talk about memory allocation in .NET as it's hidden away from you, but the reality it that it's happening and you at least need to be aware of it. Avoiding GC pressure is one of the (main?) ways you can improve .NET performance, GC doesn't come for free. Having said that .NET 4.5 has a new GC mode that helps you out a lot, http://blogs.msdn.com/b/dotnet/archive/2012/07/20/the-net-framework-4-5-includes-new-garbage-collector-enhancements-for-client-and-server-apps.aspx But as I pointed out in the article, these improvements shouldn't be used unless there is a real performance gain to be had, i.e. after benchmarking.
Does this actually work? 
Yup. (tested and working in LINQPad) This (as I understand it) is actually a letter from the [Kannada alphabet](http://en.wikipedia.org/wiki/Kannada_alphabet) and part of the Unicode character class "Lo". From the C# specification section [2.4.2 Identifiers](http://msdn.microsoft.com/en-us/library/aa664670%28v=vs.71%29.aspx): &gt; letter-character: &gt; A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl EDIT: Just to clarify, the C# language allows a good chunk of Unicode characters for variable identifiers so developers can write code in a naturally descriptive way for their native language.
:)
Seconded. Absolutely love Windows 8.1 and using VS 2013 Update 2. Not a single issue to report. Seems like OP has hardware issues, not OS issues.
I've always said c# is an expressive language.
if someone did this in my codebase, i might strangle them.
&gt; &gt; &gt; Avoiding GC pressure is one of the (main?) ways you can improve .NET performance, It is also one of the hardest ways to understand. You don't see allocations as being expensive when using a normal profiler, you have to specificially look for them.
Thanks for the reply. I think I may need to use this in my application to fuck with my colleagues :D
Yeah that's true, especially as the actual allocation are really fast, because they're just incrementing a pointer, it's the cleaning up that takes the time. You can look at something like "Time spent in GC" and the number of Gen 0/1/2 collections in the performance counters for an indication though. One nice technique I've seen is what jHiccup does, see http://www.azulsystems.com/jHiccup. Basically it spins up a single thread that does the following in a loop: 1. Starts a timer 2. Calls Thread.Sleep(1) 3. Stops the timer If the time recorded in step 3 is larger than 1 ms (allowing for some overhead), then the thread was paused. If that thread was paused then there's a good chance that all your other threads were as-well. causing your app to slow down. It's not guaranteed that these slow downs are caused by GC, but there's a good chance they are.
Another really nice tool (for .NET memory usage geeks), is this Resharper plugin, https://github.com/controlflow/resharper-heapview. It shows you, in VS, which parts of your code cause hidden allocations, generally boxing. But the warning they give in their Readme is very true, you can get carried away with it!! &gt; "Please, avoid premature optimizations. Use this tool with care, only when it matters to reduce allocations count;"
You could remove the offending code and your commit message could simply be: &gt; ಠ_ಠ
TETSUOOOOOO!
Resharper tries to keep me honest... [Imgur](http://i.imgur.com/d5QTJtl.png)
I might actually use this for some of the "fun" projects.
This is the most-upvoted post here in ages. Congrats! :D
I should note that I have never added CORS support to one of these oldschool asmx services - nor do I suggest you try. If you really do need to use an asmx, fine, but I doubt you will find anyone that has ever done this. I would suggest you create a json-based semi-RESTful API using WebAPI, as previously noted by /u/c0x91. Most browser-facing APIs are build for JSON/REST these days. If you decide to go this route, let me know and I can provide you help specific to implementing CORS in WebAPI.
Hey. 
Thank for the info. I am obviously overwhelmed by this issue, and actually surprised that after all these years that a more simple process/technology has not been created. 
Thanks, that makes me feel a little better.
An interesting read but this smells of not seeing the forest for the trees to me. These are all low-level bit twiddling hacks that may or may not slightly improve performance. I'll wager there are huge unexplored algorithmic optimisations buried in this Algol-style code. For example `TrimmedStringStartsWith` is basically hand-rolled pattern matching. Why isn't Roslyn written using real pattern matching? Why doesn't it have an optimising pattern match compiler to automate this tedium? Roslyn is just a metaprogram. There's a family of programming languages specifically designed for metaprogramming since the 1970s. There's a dialect on .NET. Why use an Algol derivative?! 
The problem with that is that you need to wrap the C++ from DirectShow in order to be able to do this with C#. Rather than re-invent the wheel, 3rd party libraries are going to be used. I don't know anything about the 3rd party library in the blog post but you could check out [DirectShow.NET](http://directshownet.sourceforge.net/), which is a C# wrapper for the C++ DirectShow API.
So I took a look at your page and noticed there is an error. When I look for a new quote I get the date as the following: &gt; Quote Date: $DATE 
Yeah, I have been refactoring per the suggestions here. It generated some bugs. =( 
Thank for you letting me know. I fixed that before the users saw it. 
Both my last two jobs I was found by a agent, who found me by my CV left on sites like monster. Perhaps that's the way forward?
&gt; There's a family of programming languages specifically designed for metaprogramming since the 1970s. There's a dialect on .NET. Are you talking about F#? Either way, I know that part of the reason for writing Roslyn in C# and VB.NET was dog-fooding. I.e. having the people writing it using the actual language they are producing a compiler for, so that they become intimately aware of it's pitfalls, use-cases etc. &gt; An interesting read but this smells of not seeing the forest for the trees to me. These are all low-level bit twiddling hacks that may or may not slightly improve performance. If you look at [this talk](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333) you can see that these improvements were only put in after they'd measured and identified bottlenecks. Most of the example are from hot paths for the compiler. Also remember that Roslyn is meant to be used in Visual Studio to power intellisense and other refactorings, so it can run on every key stroke. Having pauses in this scenario would be noticed by the user (developer) pretty quickly. 
&gt; But it is very heavily optimised including hand-written assembler. That's very true, I gained a new appreciation for how much complexity went into making a GC when I watched [this video](http://channel9.msdn.com/Shows/Going+Deep/Maoni-Stephens-and-Andrew-Pardoe-CLR-4-Inside-Background-GC)
&gt; Are you talking about F#? Yep. F# isn't ideal but it is surely a heck of a lot better than C#. &gt; Either way, I know that part of the reason for writing Roslyn in C# and VB.NET was dog-fooding. I.e. having the people writing it using the actual language they are producing a compiler for, so that they become intimately aware of it's pitfalls, use-cases etc. So it is a metaprogram written in C# to make the developers aware of C#'s deficiencies in the context of metaprogramming? Do you avoid regular expressions as well, in order to teach developers how tedious it is to do regular expression work in raw C#? &gt; If you look at this talk you can see that these improvements were only put in after they'd measured and identified bottlenecks. Most of the example are from hot paths for the compiler. The real problems are that the .NET GC pauses for too long and the BCL allocates too much and the C# language encourages allocation too much. Would be nice to fix those problems. :-) What is the distribution of string lengths in Roslyn? Short strings could be represented by value types... What are the lifetime distributions of these objects that have been optimised away? I doubt allocation alone is responsible for perceptible pauses. You were probably allocating a lot of survivors. &gt; Also remember that Roslyn is meant to be used in Visual Studio to power intellisense and other refactorings, so it can run on every key stroke. Having pauses in this scenario would be noticed by the user (developer) pretty quickly. That's precisely when you want a high-level solution so you can make high-level optimisations but Roslyn is so large (because it is written in C#) that it is not feasible to perform the high-level optimisations so everyone leaps on low-level bit twiddling. For example, the `StringBuilder` pooling and `FindMatchingSymbol` optimisations would be better solved using memoization. The "empty Dictionary is large" problem is a design flaw in the BCL and the lack of alternatives is because you're not using the F# stdlib. 
Nice! :-) I just finished watching that talk about Roslyn and one of his "basic truths" is total bullshit. There's nothing wrong with allocating in a tight loop on .NET provided you're allocating objects that die before gen1. Only survivors are expensive. Temporaries are dirt cheap. I just tested it here and allocating arrays of three ints in a tight loop incurs max 0.003s pause. Allocating and keeping arrays (i.e. survivors) gives 0.08s max pause time. Also, I find it horrifying that a project as simple as Roslyn snowballed into two million lines of code. &gt; We considered developing Roslyn in F#, but remember, we already had an entire team of the most expert C# and VB programmers you could ask for, so the decision to go with C# and VB as implementation languages was an easy one. Yeah, Rosyln was a disaster because they actually believe crap like that. 
They almost never use that though. I am from Russia, I am an amateur programmer but in all code I never saw cyrillic charackters. Transliteration - yes, cyrillic - no, though compiler lets it. For example we have a lot of symbols identical to latin, but with other codes, so compiler would consider members which are similar for a human eye totally different. Thr worst letter is "c" because not only letter looks the same but it is the same key on keyboard and you dont know what charackter you just typed until you check current layout.
Keepin it *cool*. ^^what's ^^the ^^fuzz ^^about?
And qwerty users complain about German qwertz ... At least our three additional characters (äöü) *look* different O.o
&gt; I just finished watching that talk about Roslyn and one of his "basic truths" is total bullshit. There's nothing wrong with allocating in a tight loop on .NET provided you're allocating objects that die before gen1. Only survivors are expensive. Temporaries are dirt cheap. I just tested it here and allocating arrays of three ints in a tight loop incurs max 0.003s pause. Allocating and keeping arrays (i.e. survivors) gives 0.08s max pause time. Out of interest, how are you measuring the GC pauses? Interestingly enough I've just been watching a video where Eric Lippert talks about this, see [this video](https://www.youtube.com/watch?feature=player_detailpage&amp;v=WYWLU6wyfvM#t=3298) @ 54:58 – 1:04:11. His claim is that even just Gen 0 allocations (that don't move into Gen1/2) can be an issue. The pauses come when the GC has to compact things, so if those allocations weren't done, there would be nothing to compact.
* Yup. * Specialization is something that usually occurs by accident, with someone learning about something that they love so much that they dedicate their time to perfecting that one thing - it doesn't mean you shouldn't try to learn about things you might not like, however ;) * Go deep into a new project focusing around that concept - it doesn't have to be very complicated - the walls you'll run into working on that are much more useful learning tools than books or online tutorials.
The video makes me want to go back to using IAsyncResult interfaces and delegates for UI threading. 
I have added an edit to my original post, and I would think it could be an easy convert for someone and still worth $50 for the correct answer. (hint hint)
I have added an edit to my original post, and I would think it could be an easy convert for someone and still worth $50 for the correct answer. (hint hint)
&gt; Out of interest, how are you measuring the GC pauses? I wrote a loop that both records a stopwatch's time and allocates one array in the inner loop. Then I post-process the stopwatch times to find the largest pairwise difference which is the max pause time: do let timer = System.Diagnostics.Stopwatch.StartNew() let xs = Array.create 10000000 0.0 let ys = Array.create xs.Length null for i in 0..xs.Length-1 do ys.[i] &lt;- Array.create 3 0 xs.[i] &lt;- timer.Elapsed.TotalSeconds Seq.pairwise xs |&gt; Seq.map (fun (t0, t1) -&gt; t1 - t0) |&gt; Seq.max |&gt; printfn "%fs max pause" &gt; Interestingly enough I've just been watching a video where Eric Lippert talks about this, see this video @ 54:58 – 1:04:11. His claim is that even just Gen 0 allocations (that don't move into Gen1/2) can be an issue. The pauses come when the GC has to compact things, so if those allocations weren't done, there would be nothing to compact. I doubt objects that don't survive gen0 can ever be compacted. 
Yeah, you're going to have to learn new stuff all the time. You can expect the shelf life of what you learn to be ~5 years, maybe. Seriously though, I think most programmers go through what I call "the larval stage" and that takes maybe a couple of years. It does get easier though. SQL never changes. LINQ probably won't change much in the future. JavaScript is just about done doing a major growth spurt. You'll need to know the basics of syntax, and what *the good parts* of JavaScript are. On top of that, you'll definitely need to know jQuery. But all this growth in JS libraries is starting to slow down (I think, I hope). Azure... MS is still figuring out how they can compete against Google &amp; Amazon, so there'll be some changes there. I think that HTML is done changing for a while now that we're in HTML5. As far as advice on learning, I'd try to look at books that are highly recommended by other coders. There are good and bad ways of learning things. But regardless, it's consistent effort in learning that really matters. It also matters greatly how enlightened your manager is. It seems like you have a great deal of autonomy for decisions on what to implement and that's great. Be careful around managers who don't want to try the new stuff and are lazy about learning. You need to be where you can use what you're learning. The single greatest coding book I've seen is The Object Oriented Thought Process http://www.amazon.com/Object-Oriented-Thought-Process-Edition-Developers/dp/0321861272/ It's great at teaching encapsulation, abstraction, inheritance and polymorphism. 
Learning a language academically has a strong focus on getting it right. One of the most important things to learn next is you don't always have time to get it right. Get a basic version working, then just try plugging in other technologies as you're learning them. You'll be surprised how much having a working code base increases you understanding and clarity on how to move forwards. 
Just like everyone else, IMO it's a never ending cycle. You will hit a plateau at some point where you don't have to learn 400 things all at once, but I've been at this for over 11 years and still work with new things every few months. I also try to learn something major every year (like another platform or language). 
As for the 3 questions: - This is what all good devs should do and actually be interested in doing. You can always learn something new and there is always someone that knows something more than you so that you can learn from them. - Some people accidentally get stuck in a specific field and some want to stick to a specific field. Do you want to specialize in something or don't you? - IMO, once working with something completely different than you know, it's good to at least browse through the basics and see how it compares to what you already know. For me, I've been embracing the [Rubber Duck Debugging](http://en.wikipedia.org/wiki/Rubber_duck_debugging) method of going over my own code as well as when adapting to new frameworks/languages/libs. As silly as it sounds, this works for me at least. I start explaining stuff on my screen to a random inanimate object and that somehow helps me figure out things much easier.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Rubber duck debugging**](https://en.wikipedia.org/wiki/Rubber%20duck%20debugging): [](#sfw) --- &gt; &gt;__Rubber duck debugging__, __rubber ducking__, and the __rubber duckie test__ are informal terms used in [software engineering](https://en.wikipedia.org/wiki/Software_engineering) to refer to a method of [debugging](https://en.wikipedia.org/wiki/Debugging) code. The name is a reference to a story in the book *[The Pragmatic Programmer](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer)* in which a programmer would carry around a [rubber duck](https://en.wikipedia.org/wiki/Rubber_duck) and debug his code by forcing himself to explain it, line-by-line, to the duck. &gt;Many programmers have had the experience of explaining a programming problem to someone else, possibly even to someone who knows nothing about programming, and then hitting upon the solution in the process of explaining the problem. In describing what the code is supposed to do and observing what it actually does, any incongruity between these two becomes apparent. By using an inanimate object, such as a rubber duck, the programmer can try to accomplish this without having to involve another person. &gt;This concept is also known as "Talk to the Bear", dating from Kernighan's 1999 book *[The Practice of Programming](https://en.wikipedia.org/wiki/The_Practice_of_Programming)*. &gt;==== &gt;[**Image**](https://i.imgur.com/HWI5Phb.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Rubber_duck_assisting_with_debugging.jpg) - *A rubber duck in use by a developer to aid code review* --- ^Interesting: [^Rubber ^duck](https://en.wikipedia.org/wiki/Rubber_duck) ^| [^Software ^walkthrough](https://en.wikipedia.org/wiki/Software_walkthrough) ^| [^List ^of ^Amstrad ^CPC ^games](https://en.wikipedia.org/wiki/List_of_Amstrad_CPC_games) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci71fow) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci71fow)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt;&gt;Might I suggest that you instead use different virtual directories/applications That won't help. I am creating a widget that other sites can use to query our site for specific data that would be displayed. Think of it similar to Amazon displaying info from UPS or FexEd, or the Twitter widget a person can display on their site. If you have another method that would be preferred to achieve this I am very open to ideas. Thanks
Just wondering why you want to use unsafe code? Why not make Node a class? In fact, you're not using any properties exclusive to structs in your code.
I need the unsafe code in order to use pointers. I'm trying to manually build a linked list and apart from using pointers, I'm not sure of how to actually do that. Pointers don't work on classes in csharp, so I'm forced to use a struct in this case.
Well I guess that solves that problem. Could there potentially be a way to use pointers and declare data as type T in this case, or is what I was initially trying to do just a side effect of the limitations placed on pointers in c#?
I've created a top-level comment with the TL;DR version of this: http://www.reddit.com/r/csharp/comments/27we1c/50_help_with_crossdomain_webservice/ci76cc3 If your goal is to have 3rd parties use your API, then the security issues of JSONP (above) should preclude you from going this route - even if the fact that its impossible to do JSONP over soap didn't already stop you. You really need to look at another RPC style other than SOAP - As I and others have mentioned before, I would suggest a JSON-based API using ASP.Net WebAPI. You can then either do CORS (and I can help you with that), or if you really insist you can then use JSONP since you will be using JSON. I do warn you though that any security conscious customer will not want to use a JSONP-based API. I cannot stress enough that the ASMX web services that you are using are over 13 years old, and considered deprecated by Microsoft a long time ago. They were not designed with the modern web in mind and you need to ditch it ASAP. Here's how to do CORS in WebAPI: http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api From the above, once you get going with WebAPI the CORS part is really as simple as calling this in your WebApiConfig: config.EnableCors(); and adding this to your controller: [EnableCors(origins: "*", headers: "*", methods: "*") **This is the more simple process/technology that you are looking for**. This stuff does exist - just not in these legacy ASMX services that you are using.
1. Throw away your ASMX services (kill it with fire) 2. Use WebAPI 3. Add this to your WebApiConfig: config.EnableCors(); 4. Add this to your controller: [EnableCors(origins: "\*", headers: "\*", methods: "\*") Source: http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api
This is a fair question, and I don't know the answer. However, the reason that pointers have so many restrictions is because memory is managed for you (garbage collection), so you don't want to violate invariants that the CLR maintains. If you really need to use unmanaged memory, you can take a look at the Marshal class. But at the end of the day unsafe code is not very common at all in C#, and System.Collections.Generic.LinkedList&lt;T&gt; is itself all done without unsafe code: [huge spoiler](http://referencesource.microsoft.com/#System/compmod/system/collections/generic/linkedlist.cs#08181ebdd4cdf907)
Yup, Yup, Yup, Nope.
All the same, I appreciate the insight and I'll go through the source for your link tomorrow morning. It ought to be interesting to see how the professionals do it!
Is this a joke? EDIT: To be more constructive for people interested in SQL Injection, google Parameterized Queries
nops ... why ??
Because you don't talk about the basic ways to avoid SQL Injection and your second example code is vulnerable to SQL injection just like your first one is. Do not concatenate unsanitized user input into a query and run it. Just don't do it. Don't post samples where you do it and say its safe because some poor newbie has no idea why it is wrong. Read over this: http://en.wikipedia.org/wiki/Prepared_statement EDIT: And read this: http://xkcd.com/327/
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Prepared statement**](https://en.wikipedia.org/wiki/Prepared%20statement): [](#sfw) --- &gt; &gt;In [database management systems](https://en.wikipedia.org/wiki/Database_management_system), a __prepared statement__ or __parameterized statement__ is a feature used to execute the same or similar database statements repeatedly with high efficiency. Typically used with [SQL](https://en.wikipedia.org/wiki/SQL) statements such as queries or updates, the prepared statement takes the form of a [template](https://en.wikipedia.org/wiki/Template_processor) into which certain constant values are substituted during each execution. &gt;The typical workflow of using a prepared statement is as follows: &gt; &gt;* __Prepare__: The statement template is created by the application and sent to the database management system (DBMS). Certain values are left unspecified, called *parameters*, *placeholders* or *bind variables* (labelled "?" below): &gt; &gt;* INSERT INTO PRODUCT (name, price) VALUES (?, ?) &gt;* The DBMS parses, compiles, and performs [query optimization](https://en.wikipedia.org/wiki/Query_optimization) on the statement template, and stores the result without executing it. &gt;* __Execute__: At a later time, the application supplies (or *binds*) values for the parameters, and the DBMS executes the statement (possibly returning a result). The application may execute the statement as many times as it wants with different values. In this example, it might supply 'Bread' for the first parameter and '1.00' for the second parameter. &gt;As compared to executing SQL statements directly, prepared statements offer two main advantages: &gt; &gt;* The overhead of compiling and optimizing the statement is incurred only once, although the statement is executed multiple times. Not all optimization can be performed at the time the prepared statement is compiled, for two reasons: the best plan may depend on the specific values of the parameters, and the best plan may change as tables and indexes change over time. &gt;* Prepared statements are resilient against [SQL injection](https://en.wikipedia.org/wiki/SQL_injection), because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur. &gt;On the other hand, if a query is executed only once, server-side prepared statements can be slower because of the additional round-trip to the server. Implementation limitations may also lead to performance penalties: some versions of MySQL did not cache results of prepared queries, and some DBMSs such as PostgreSQL do not perform additional query optimization during execution. &gt;A [stored procedure](https://en.wikipedia.org/wiki/Stored_procedure), which is also precompiled and stored on the server for later execution, has similar advantages. Unlike a stored procedure, a prepared statement is not normally written in a procedural language and cannot use or modify variables or use control flow structures, relying instead on the declarative database query language. Due to their simplicity and client-side emulation, prepared statements are more portable across vendors. &gt; --- ^Interesting: [^SQL ^injection](https://en.wikipedia.org/wiki/SQL_injection) ^| [^MySQL](https://en.wikipedia.org/wiki/MySQL) ^| [^MySQLi](https://en.wikipedia.org/wiki/MySQLi) ^| [^Stored ^procedure](https://en.wikipedia.org/wiki/Stored_procedure) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci76usy) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci76usy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
whoops.. Galester. thanks for advise. I am a newbie. But I love to write. I did some research on the SQL injection specifically used for login purposes. Then I tried my own solutions for preventing it. The main purpose of the article is to give simple knowledge of how SQL injection work in applications that uses SQL Server database. &amp; for the plain text password problem, when i work on real systems, i now store Hash of passwords &amp; usernames (Thanks for your previous comments on my Password Manager Post).
For passwords, just hashing it just getting started. You need to: 1. Hash it 2. Salt it with a per-password randomly generated salt. (prevents someone from using a rainbow table 3. Hash it multiple times (increases the cost of reversing the hash) 4. Implement a system for crypto agility. (allows you to change crypto algorithms) This is why I suggest a lot of reading - there are a lot of things to keep in mind whenever implementing password storage.
These bots are ridiculous annoying. Everyone who wants to know about it can just click on the link. Like this it just spams the discussion.
It's a learning experience. I want to know everything I can about them before I simply brush them off to the side without giving them a second though.
We're still trying to get our boss to let us purchase a rubber duck, until then my co-workers seem to suffice.
is it only me or xamarin studio is slow as hell? VS 2013 is running fine on my machine.
My service provider does not have .NET 4.5, only 3.5 and 4, so I at this point I am not sure if I CAN use WebAPI. 
I've never had any problems with it. I'm also running VS 2013 as well. How does it feel slow to you?
LINQ
There are three key bits to learning WPF that you need to understand. MVVM, XAML and data binding. The rest of WPF builds on top of these three elements. The first is XAML, which is an XML-based language for describing the visual elements of your page. It's declarative, so if you want a button on your page, you just put &lt;button&gt; in your XAML and you get a button. The second is data binding. This is how data gets from your C# code to the display. WPF implements binding using dependency properties, which make data observable. This way, when you make a change to the data, the change is propagated automatically to the view for display. MVVM (Model-View-View Model) is the architecture that makes working with WPF easier. The view is pure XAML, the view-model presents the business data to the view in the correct form, while the model is the business logic/data. 
Just like with everything... Experience experience experience. Work on projects, yours, others, just do stuff. Always try to better yourself. WPF is no different from any other framework and technology.
- Automatic properties - Good generics (woven into the libs too) - Lambda - Extension methods - LINQ - Type inference in locals - Dynamic - Optional parameters - Yield - Async &amp; Await - Collection intialisers - Microsoft and the whole of the .net stack
Oracle owns Java, so development on the language ceased for like 5 years, so it lacks a lot of sugar that c# has.
Also: Visual Studio beats any other IDE by lightyears (esp. any that deals with Java).
~~Also multiple inheritance. Java is only capable of inheriting from a single class at a time.~~ You guys made your point, no need to be condescending about it.
http://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/server/RequestProcessorFactoryFactory It's something in java that makes people do things like that, because I don't see (as) many C# implementations of shit like that.
I wouldn't say it's lightyears over IntelliJ, but Visual Studio is still the gold standard.
Same limitation in C#. Both languages can implement multiple interfaces, though.
C# is, oversimplifying it, more humane in many respects to the developer. The language has evolved where Java (the language) has remained stagnant. Java makes more sense if you're developing with an eye towards many platforms and open source development. Other languages (scala and others) make working with the JVM (which is at least on parity with the CLR) less onerous. There's no right answer here. Either can work; go with the one you prefer.
Did you go to r/java and ask "Why Java over C#?"? Do it and post a link here pls.
No, it doesn't. C# uses extension methods to do stuff like that instead, e.g. LINQ is entirely based on extension methods.
Dude, you're dead wrong. Just like Java, C# is a single *implementation* inheritance classical language. Though (like Java &amp; unlike C++ or lisp) a class can implement many interfaces it may only inherit zero or one implementations.
Dunno. Netbeans looks cool. So does Jetbrains IDEA. I like Visual Studio, but tbh it's only ok. For example it no longer has macros or scripting support. It's a better debugger that it is an editor.
Also: * ref/out * Delegates, closures * First class functions * Anonymous types * Indexers * Operator overloading * using() {} * Runtime code generation * Pointers with "unsafe" * Partial classes * Multidimensional arrays * ...
+ everything in c# 6 ;)
Oracle sues anyone who uses Java. 
Because C# practically writes itself, while you are casually thinking what roughly should happen, or even about weather or girls. Oh, and it always does what it should; and jesus used it to hack into heaven and it only took 3 days. Actually jesus used a slightly better C# with non-null reference types, built-in beers and hookers. But he's got a rich daddy, second only to bill gates - who helps more poor anyways. Java is owned by the sith lord, has a lot of cruff, and if you put your finger in it, it smells a little of poop. I mean why would it...? Why would there be poop in java? Kylecorn... Nono, it can't be. *wiff* OMG it's totally poop!!!
I learnt a little bit of Java a while ago and I used BlueJ. It wasn't easy after being spoilt by Visual Studio. 
Anonymous types are a new one for me! Thanks!
Because good generics, Emit, lambdas allow much easier dependency injection.
So is Java. Poor argument.
Maybe only 1 lightyear away from IntelliJ. I love IntelliJ but there's so much happening in Visual Studio that Pros still don't even know about lol...
Well WebAPI is the "more simple process/technology" that you are looking for. With some effort you could also do CORS in a REST-based WCF stack, but helping you get that setup, plus adding CORS support to would take more than $50 worth of my time. So I wish you luck
You're trying to learn unmanaged sorcery within a managed environment which might be a like go cart racing in outer space or breaking open a $5k intergraph and stuffing a 286 into it or wearing a supermodel's face as a mask. This is C#. Your curiosity has no power here. And quit killing supermodels.
Also a massive speed improvement over java.
AD has to be populated by hand with the email addresses, then you just query the mail field. If no one populated the email field then you will be querying nothing. It's been a while, but the last time I was mucking around there, I seem to recall having to run a script to make sure everyone's email was populated. Either way, what you're doing is a bit contrived. What you need to do is learn the LDAP query language and use that instead. It'll be a million times faster and simpler. Your entire method might be 20 lines. Wrap your head around that and the last link you provided will make more sense. Also keep in mind that AD isn't a relational database, it's hierarchical. So if you're searching around in the wrong OU for instance, you're gonna get different results.
That depends on how those files are being accessed, dude. If those images are being pounded like on a busy website, every time someone opens the page with a clean cache (or an image was updated), then the server is going to have to go to disk for it which is expensive and rough on the server. And if images are being written frequently in addition to read, then going to disk is definitely a bad idea. And what happens when you distribute across multiple servers? Then you try to go to disk and guess what? IT'S NOT THERE. Other options? Replicate to disk across the instances? That's just ... bad. If it's just a local app where nothing is shared, then sure. 
Because GUI in Java sucks ass
C# is practically platform independent with Mono/Xamarin at this point, especially since they open sourced the compiler and have been giving the Xamarin team full support. Also in the next version of ASP.NET, you will be able to have cloud based frameworks, allowing the source code to be run anywhere. It's a very exciting time to be in the .NET world
^([Citation Needed]) I love C#, but every benchmark I've ever seen puts it on par to slightly behind Java speed wise.
Generally speaking, you are much better off using jagged arrays instead. MD arrays are slower than jagged arrays (due to how .Net is implemented), and there's very little library support if you want to do operations over MD arrays.
BlueJ shouldn't even be an option, it's horrible to work with. Use IntelliJ, it by far beats all other Java ides.
This is by far the worst part about Java. Everything oracle picks up eventually goes to hell as they start trying to milk it for money =\\. Honestly my biggest complaint with C# is that MS owns it, and there was little Linux support, but mono is slowly becoming quite nice, and the recent open source compiler is changing that.
Yes. Yes. Yes. I program Java at school. And VS is.. Oh my god. Actually created by humans for humans.
I use IJ from time to time, but VS is still many light years ahead. Of course this is just my personal opinion :).
&gt; C# is practically platform independent with Mono/Xamarin If only Mono had WPF
I consistently get shouted down for this, but I have generally found I prefer Eclipse to VS. I'm fine with being disagreed with, but I don't tend to get straight answers about why people disagree. Don't get me wrong, Eclipse is a memory hogging, crash happy mess. But when it works, it seems like a lot of stuff, mostly assistance like completion, refactoring and importing, is just easier than it is in VS. Would love to be told where I'm going wrong that would make VS easier for me, since the majority opinion (even outside subs which will inevitably have bias based on language) seems to be that VS is significantly better.
Well I used BlueJ, Netbeans, Eclipse for Java and Visual Studio (2005 - 2013) for C#. Completion, Refactoring and Importing are all handled by ReSharper for VS really well. To be honest I wouldn't use Visual Studio without it either. With Resharper, pretty much everything is just one "Alt + Enter" command away. As for other stuff: I find the Eclipse UI to be a tad bit more messy than Visual Studio (granted with such giant software packages with 100+ UI modules, the main UI tends to get cluttered).
What happens with open sourcing the compiler? Can be compiled anywhere? Sorry I'm not that knowledgeable :(
In terms of demand, does c# have a sizeable share with respect to Java, say in USA and Europe?
In terms of platform independence, is the open sourcing of the compiler of c# a game changer in the slightest?
Open sourcing Roslyn allows the Mono/Xamarin team to be able to understand it and make sure all of their work can keep up.
[Here you go!](http://www.reddit.com/r/java/comments/285ktl/why_java_over_c/)
There is a larger market for .NET developers than Java in the USA. The general temp in the US, is folks migrate to .NET -- I've yet to see a company purposefully switch off something and into Java - for many, many, many years (I'm talking the larger, more corporate-enterprise environments) - but there are droves going to and maintaining .NET. Oracle, these days, seems to be more of a litigious beast than an innovator. :-/
Essentially making the language more flexible?!
&gt; but helping you get that setup, plus adding CORS support to would take more than $50 worth of my time. I COMPLETELY agree. I will do some research on this option and what issues, etc on Monday. Thank you again for the time you have taken.
Very cool. Had not heard of Xamarin.
Yes and no. While yes C# is powerful in its own right, it is useless without the .net framework. The framework is really what makes working in C# a pleasant experience. That said, even if MS opened up the framework you'd run into the problem of a lack of free tools. You really need VS to work and the free version doesn't compare.
I love VS. I just started using Eclipse a couple weeks ago and I just may develop an ulcer.
Also Mono is a little slower than Java on Linux, if that's what floats your boat. Yeah, citation needed.
If I could, I would run and develop for nothing but Linux. I'm Linux all the way, I'm a Linux _fiend_. That said, I still think VS is the best IDE in the world. Sorry I can't give you anything more concrete.
I would agree that having Google and SO as resources are huge advantages compared to programming back in the day. However, I don't want to sell the guy short. Building some software for a small business using COBOL would probably be less complex than deploying a functional nontrivial web app for a small business today, from a beginners standpoint.
For what I know wpf is very tied with win32, so it is not even possible to port it to another os
Problem is I never ever saw a company using .net on linux. Not even a startup. I saw people using xamarin for cross dev on mobile devices, but only that and also far less used that phonegap for example. Basically if you want to use .net you usually prefer to run it on windows server and develop it using visual studio on a windows os. No one wants to feel like the bastard son. So, long story short, for cross platform server side Mono is really one of the last choices
This is the main problem I have with Java. It's not the Language (with 1.8 it became actually nice), but it's the environment, the libs. The people who use Java because it's just easy to write. This is the problem Java has, it would need to purge most of the existing libs to be able to compete on todays market again. Btw, I develop in Java for Android, the Bukkit API and also standalone applications, and I use C# sometimes, I even have developed a (though shitty) Windows Phone app, so I guess I'm able to compare them.
They're both big, although obviously if you want to work with Linux Java is way bigger. 
Because unerased generics, async methods, minor type inference, and LINQ.
C#: using(var foo = bar) { baz; } F#: use foo = bar baz The F# version is really cool because if you have to use a long chain of things, e.g. drilling down into a file stream, your code won't keep indenting further.
The language you pick should be based on the needs of the product. The world of a java programmer is different than that of a .NET developer typically..NET people tend to work mostly with Microsoft tech. Java tend to work with mostly open source but can work on Microsoft. The all have their pros and cons. Just because both languages have a syntax based in C isn't a reason for comparison. The right tools for the right job. Which tools do you prefer working with? And honestly, javascript is the language to master these days.
Also: resharper
Well Qt for Mono would be a decent alternative but that we don't have either.
&gt; LINQ This, I love LINQ so much I'm worried I might be cheating on my wife.... Also Entity Framework unless Java has something similiar 
You can do this in C#: using(var foo = bar) using(var baz = ranOutOfNames) { // Stuff }
Technically it's always inheriting one thing. If you don't put your own, it inherits from `object`.
You're forgetting about mono...
There was a bind for qt full supported some years ago, but the devs saw that no one wanted to use mono for qt. If they want a full-control language they use c++, if they want a more vm-script like they use python. There was not space for c# so they just stop developing it because basically they were the only using it. Also we have to say that Miguel said that he does not want to support mono on linux officially (like customer care I mean, but also the single version of monodevelop are not built directly by xamarin for the main distros). 
See, I'm willing to bet I would love it with ReSharper (since it appears to cover basically everything I feel is missing). Given that I'm not using C# professionally, I've not really been able to justify the cost. That said, people seem to consistently argue that even vanilla VS is better than Eclipse. And I feel like given that they're both freely configurable, the UI can be as cluttered or spartan as one desires, though VS is definitely... Crisper? 
Structs.
I absolutely understand the gut feeling. Using VS feels better than Eclipse even if I'm vastly more familiar with the latter. But I consistently run into "This is automatic in Eclipse, I can do it with three keypresses at most", so I try and find the shortcut for it and discover that the functionality doesn't exist (without ReSharper). It's nice software, it just seems like things are missing. Having to do things manually that I know can be done automatically is a major irritation to me, so I find it hard to consider VS better overall. 
I think its the wrong question to ask, or perhaps the wrong place to start. What are you interested in? What would you like to work with? What is a thing you want to implement? Its even possible that C# or Java is not the right answer. Both are tools, both get the job done, but they excel in different areas. Really where do you see yourself working with? 
&gt; little slower than Java on Linux In my experience (of converting a decent sized code base from win/.NET/C# to linux/mono/C#) it's a LOT slower than java on linux. Can't speak to speed differences in Windows, but on Linux, it's not even close. 
Not just LINQ, but Entity Framework as a whole. Love it.
That's generally a good idea - forgetting about mono. :) 
In shorthand, C# has always had two big advantages to me: 1) It was created second, and benefitted hugely from seeing where Java made mistakes (or which things were hard or complicated in Java that didn't need to be.) C# always felt to me like the kind of language you'd create if you had spent a lot of time as a Java developer and simultaneously really loved but also really kind of hated Java. 2) For a lot of years C# has been evolving faster than Java. Part of that's Oracle, and part of is problems that predate Oracle. But it definitely doesn't help when at any time Java is often trying to implement features that C# had two versions ago. Also, partly personal preference: I like Visual Studio a lot, lot more than any of the Java IDEs I have used. Disclaimer: I never used IntelliJ. Also also: In practice, I always found that the "Write once, run everywhere" aspect of Java, often touted as its big selling point, was more theoretical than actual for non-trivial applications. I mean, you would write it once, and *with work and tinkering and some changes* could get it to run anywhere, but that's not quite the same thing.
Java developers don't like it either. Use IntelliJ Community Edition. http://www.jetbrains.com/idea/download/ Eclipse's UI has not been updated since 1.0, which was about 15yrs ago. [This is Eclipse 1.0](http://server.pramati.com/docstore/1500010/images/User10.gif) I actually prefer the full version of IntelliJ over Visual Studio 2012. 
Wtf does this even mean? How does a programming language have a GUI? That's like saying the color of a certain song sucks.
Jetbrains is a fantastic company - they really seem to understand what makes developers lives easier. Resharper is pretty much fantastic, and PHP Storm is also amazing.
One thing I found about working with WPF, is there are a typically several ways to use it, but you'll get the most mileage from it by using it as it was designed to be used. WPF was designed to keep the UI very decoupled from code and the glue that really joins the two together is databinding. Generally if there's anything in the UI that you're trying to call directly from code or any code that you're wiring up in a "code behind" style, there's probably a way to accomplish the same thing through binding and you should try to find that solution if you can. XAML is a markup language that's used for constructing the UI, and as with almost anything Microsoft where a designer is available, try and stay away from using it if you can. In regards to putting a UI together, I didn't think that XAML was all that hard to pick up. Here's the one exception to that though; the binding syntax in XAML is much more complex. That binding syntax is the side of XAML that you really have to master. As in all projects where you're just getting acquainted with a technology, start simple. I think its fairly easy to get up and running with WPF, but its also fairly easy to get in deep very quick.
I just read something earlier today that benchmarked some java and Mono C# programs. I didn't have the link handy or I would have posted it. For some stuff C# was faster, but for one program the C# was much, much slower. But yeah, a handful of cherry-picked apps isn't a real world scenario.
I feel like a lot of it comes down to cases of not using one or the other 24/7 for a job. With any IDE, the developers will find relatively easy work-arounds for problems and become ingrained with the common workflows associated with that IDE. It's true even with editors like VIM, Notepad++, Brackets, Sublime etc. But... off the top of my head... here are some of the reasons why I hate eclipse... * The intellisense/completion never seemed to work for me. Maybe it's because I've been a VS guy since VB5 (I know... I know... make your jokes) but the completion simply doesn't act the way I expect it to. It's to do with the sorting and selection as I type. Visual Studio always seems to be a step ahead in knowing what I really want. * Comparing the project management there isn't even a comparison. Visual Studio's solutions, solution folders and projects scoping is light years ahead of any other IDE. It virtualizes your code in an easy to understand manner and nothing more. It doesn't try to be too smart, and it definitely stays away from being a dumb display of the hard drive data. * Clear, concise menus. There is a lot to the menu hierarchy in Visual Studio, but it all makes sense. Want to Debug/Run a project? Find it in a single menu. Settings in a single menu. General windows in one, contextual windows in other menus. Testing in a single menu. Everything fits where it's placed. With Eclipsed, I always found myself browsing menus for the particular item I was looking for. * Clear concise dialogs. Copy and paste the above and reapply. * Resharper. Enough said. Paste code, Alt+Enter to add all the necessary references. 
ITT: Cross-platform. Generally when building a web application, you've already settled on a platform. Plus .Net is evolving and will be cross-platform in the coming year or 2 (unsure of their exact schedule).
I think once Roslyn comes to prime time you'll see a lot of Resharper functionality come out for free. So keep that in mind... their model for pricing the tool becomes a little... less marketable in that world (where such refactoring tools are *EASY* to develop)
I use WebStorm at work and it's amazing. No way I'd be able to handle our Node/Express/Angular stack without it. With the server and client written in the same language, it can be hard to differentiate what code gets executed on which side. It's terrific that all I have to do is Ctrl+click to go to a function or variable definition.
"MonoDevelop is a world-class IDE." - No One Ever Mono does make cross-platform deployment a possibility, but its rough edges guarantee that cross-platform development will not be pleasant. Visual Studio (OK, plus R#) is still far and away the best IDE out there, but IDEA is pretty nice and it's hard to argue with the cost and platform independence.
VM start up/warm up time is mostly irrelevant for the primary use case - web servers.
LINQ and Entity Framework are mutually exclusive.
I guess gamedevs using Unity don't count? 
I believe the term for generics in C# (and the CLR) is "*reified* generics" 
The try with resource statement came out in Java 7 :)
One thing I like about Eclipse is the window docking. I wish VS had window docking like that - being able to dock windows side-by-side + on top of each other **at the same time**.
Idiomatic Java makes a lot more use of inheritance and design patterns like the factory pattern than idiomatic C#. Mostly because of Java's age more than anything. When Java was a newer language, overuse of inheritance and design patterns wasn't as frowned upon as it is today. 
Java 8 has a something similar to LINQ, Stream API. So in the Java world you would use Stream API + Hibernate for the same things you would use LINQ and Entity Framework in the .NET world.
Java world has Stream API which is similar to LINQ
Good generics &lt;=== [Reification][link] [link]:http://en.wikipedia.org/wiki/Reification_(computer_science) "Reification"
IntelliJ is by far the best Java IDE I've used, even surpassing VS (without ReSharper) in some areas. ReSharper is basically all the best parts of IDEA for Visual Studio. You're absolutely correct about "write once, run everywhere" with Java. With mono, C# gains some of Java's portability with similar caveats. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Reification (computer science)**](https://en.wikipedia.org/wiki/Reification%20(computer%20science\)): [](#sfw) --- &gt;__Reification__ is the process by which an abstract idea about a [computer program](https://en.wikipedia.org/wiki/Computer_program) is turned into an explicit [data model](https://en.wikipedia.org/wiki/Data_model) or other object created in a [programming language](https://en.wikipedia.org/wiki/Programming_language). A computable/addressable object — a resource — is created in a system as a proxy for a non computable/addressable object. By means of reification, something that was previously implicit, unexpressed, and possibly inexpressible is explicitly formulated and made available to conceptual (logical or computational) manipulation. Informally, reification is often referred to as "making something a [first-class citizen](https://en.wikipedia.org/wiki/First-class_citizen)" within the scope of a particular system. Some aspect of a system can be reified at *language design time*, which is related to [reflection](https://en.wikipedia.org/wiki/Reflection_(computer_science\)) in programming languages. It can be applied as a stepwise refinement at *system design time*. Reification is one of the most frequently used techniques of [conceptual analysis](https://en.wikipedia.org/wiki/Conceptual_analysis) and [knowledge representation](https://en.wikipedia.org/wiki/Knowledge_representation). &gt;==== &gt;[**Image**](https://i.imgur.com/xID12L6.png) [^(i)](https://en.wikipedia.org/wiki/File:Reification_example1.png) --- ^Interesting: [^Reification ^\(knowledge ^representation)](https://en.wikipedia.org/wiki/Reification_\(knowledge_representation\)) ^| [^Reification ^\(linguistics)](https://en.wikipedia.org/wiki/Reification_\(linguistics\)) ^| [^Type ^introspection](https://en.wikipedia.org/wiki/Type_introspection) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci7trxu) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci7trxu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I never said it was *good* :P
JavaFX has turned out to be really good. It is catching up to WPF really fast. Especially since Microsoft has all but abandoned that technology. 
The unity ide does not run on linux (but it can obviously target linux when used on windows)
[.net framework is opensource](http://referencesource.microsoft.com/) ninja edit: ok, BCL, not framework itself.
As a guy who just returned from deeps of WPF source code - yes, it's pretty dependent on WinAPI, but is portable, you just need to rewrite few parts (like input devices, window message handlers). But many WPF programs may use WinAPI stuff.
It's not about language but about infrastructure around it. 
The code for writing a GUI While both Mono and VS have a built-in GUI builder, Java does not, and it's a complete bitch to get it to look right. EDIT: Oh, and some people have a condition that causes them do see sounds as flashes of colour. So yeah, the colour of a certain song can indeed suck.
LINQ is the bomb.motherfucking.com.
&gt; Also, Java world has Hibernate, which influenced the creation of Entity Framework. It's the same kind of thing as C# vs. Java to me again, honestly. We put up with years of kind of shitty ORMs in Java (and sometimes worse, shittier .NET versions of shitty Java ORMs) and in a lot of ways EF has the benefit of seeing everything they either did wrong or did in a way that was more work than it needed to be to use, and then building something that corrects a lot of it from the start. I don't claim to be a Hibernate expert, but in most of the cases that I used it I can't say it felt significantly better than just code generating a data layer -- it had advantages over that approach but disadvantages too. You can do some pretty atrocious things with EF if you don't know better, especially performance-wise, but overall I find it a lot simpler to accomplish the same tasks vs. Hibernate.
[IntelliJ](http://www.jetbrains.com/idea/features/gui_builder.html) [Eclipse](http://www.eclipse.org/windowbuilder/) [Netbeans](https://netbeans.org/features/java/swing.html)
Everything in Eclipse is a plugin. It's how the system is built. Eclipse is basically just a plugin platform. But yes, I believe it does come by default. 
That's all completely fair, and yet... you definitely *will* come across dramatically more of that kind of thing as a Java developer than you will as a C# developer. I've seen both languages used to write some really terrible applications (and some good ones), but for something to be both bad *and* painfully overarchitected feels nearly exclusive to the Java world.
.NET is already cross platform. My blog uses ASP.NET MVC 4 and I've been running it on Linux via Mono for over a year. Admittedly there's some stuff that doesn't quite work, but the stack that I'm using is working very well. 
What's the project? Where's it going to run? Language choice is but a tool.
Point made, but I don't think it comes with it. If it had it should've been a lot more obvious than it was, it would've made my life a load easier. Trying to make a button from scratch using PNG images and mouse handlers was not easy. Not at all.
It depends a lot on where you live. In some areas there's a lot more demand for Java, in others .NET.
It's never lupus...I mean perl.
Well to be fair, basic winforms for **small** applications are kind of a dying thing. Web apps generally provide the UI for applications. Pretty much all business applications can be built as web apps. I haven't built a winform since college. Granted I'm a web developer, but I don't know anyone else who has either. The closest I know is an applet developer for a bank. I can't think of anything that I would need to build as a winform that I couldn't do as a web app better. Outside of large complex applications like Photoshop.
Eh, it was a school project and I decided to make a sniper game. Took me a week to figure out how to get the buttons working themselves. I later copy-pasted code and got the targets to function in almost the same way. I can code, just not that well. Frankly, all I want to do is figure out how to code enough C# so I can try making a multiplatform text adventure engine.
Alright, I am here to say I was a Java evangelist, I always refuse to believe Microsoft was doing something better than Java and I was wrong. I am still not a big fan of Microsoft but damn! C# is good, C# is a good concise program language! C# is a more modern version of Java. It can do anything, I used to believe some things was impossible for Strongly Typed languages like Java, only dynamic languages like javascript could do. But I got surprised by dynamics and Expando Object of C# and a lot of other features and facilities. It is really really better than Java. I still use Java for the server because it is not a bad language, I don't need those features of C#, and I have legacy code. But I use C# with Xamarin and I love it so much!
I get what you're saying, LINQ is not a subset of Entity Framework, but most people use EF with LINQ-to-Entities so they're definitely not mutually exclusive.
But they are 6 years late.
I was a Java programmer from the day the JDK was released to the public, until a few years ago I switched to C#. My employer's reasons for the switch were business related, not technical. My reasons were to diversify my skill set. But now that I've changed, I don't want to go back. Yeah, C# has some linguistic differences that are nice, but the truth is that the #1 reason I don't ever want to work in Java again is the tool set. It is *such* a pain to work in Java. I worked with Eclipse for years and never understood it, and we were always fighting with getting the classpath right and why does it think some JAR file isn't there and getting ANT to work right... none of this is at issue with C#, because I can do it all in Visual Studio and it's comprehensible and works much more reliably. My Java colleagues who switched to C# with me all say the same, they don't want to work in Java any more if they can avoid it, and while they have differing reasons, the quality of the tool set is a big reason for each of them.
reification is an ill-defined and pompous term :P
I've yet to see any organization make a switch to Java, and I've seen plenty migrate away from it. Large corporations hardly ever switch (and not off .NET that I've *ever* seen). It's not about the cost of developers, it's about the prevelance of tools and support. Microsoft is seen in the business as more robust and long-lasting than, say Oracle. Microsoft also works at keeping their tools and development environments robust, thriving and progressive. Oracle doesn't have a great public perception in the business world these days. Besides being overtly litigious to the hands that feed them, they're also swimming in this perception of being behind-the-times. Their wheels of innovation and progression are light-years behind Microsoft in the development world.
Sure, my point was that LINQ is not a subset of Entity Framework. You can interact with Entity Framework using LINQ, but it's kind of like saying that not only do you like Attributes, but Entity Framework as a whole is cool.
While it is kinda neat, I can't say I'd like to see the F# style in C#. It is much less obvious the scope that foo is meant to be used. I do agree with not wanting to indent over and over, but as MEaster pointed out you can chain them to the same block. Of course, that doesn't work if you need things to happen between the using statements so you'd still end up indenting a bunch.
&gt; the primary use case - web servers. Web servers are the primary use case of C# and Java? While its definitely a common one, I'd hardly call it primary.
They've done some crazy things recently when it comes to support outside of Windows. Just check out the ASP.NET vNext and it's K Runtime Environment which was demoed running on Ubuntu. Sample article about that: http://graemechristie.github.io/graemechristie/blog/2014/05/26/asp-dot-net-vnext-on-osx-and-linux/
You could already compile everywhere with Mono. Although as pointed out several times in this thread, IDE support on anything other than Windows isn't super great. In the general scheme of things, open sourcing the compiler didn't change much instantly, but is more of a long term benefit.
I'm not sure what you mean. You can do pretty much any kind of docking in VS.
CodeRush is better.
It is primary for Java. I can't think of any other use for it aside from Android, which of course doesn't run on the JVM.
I think the word you are looking for is 'orthogonal'.
[Example from Eclipse](http://server.pramati.com/docstore/1500010/images/User10.gif) --- Docking both horizontally and vertically. Both are individually possible in VS, but not simultaneously. Docking horizontally disables docking something else vertically on another section. And the reverse is also true. edit: ***editor*** windows I should've said.
Sadly I'm seeing that crap happen more and more often in C#. Usually by the sam nimrods who scream "SOLID!" as a way to justfiy everything they do.
I would rather see Windows and Mono both adopt Universal XAML. It removes a lot of the bloat and cruft from WPF.
Java is still very common for internal business apps. A lot of the internal tools where I work run on Java. (Although C# is becoming more common for smaller projects.)
Yea I actually saw that recently. As I said, it's really improving lately, which is making C# a lot more appealing to me =). Although tbh Clojure (and to a lesser degree F#) currently has my curiosity, luckily it runs on the CLR as well.
There's quite a few things on that list that are in newer versions of Java, or Java has alternatives that amount to the same thing. * Delegates, closures * First class functions In Java since Java 8. The using equivalent you've mentioned. * Runtime code generation This is very common in the Java world. Some libraries like Hibernate and the more exotic parts of Spring depend heavily on it. Not to mention the alternative JVM languages (Scala, Clojure, etc.) which generate Java bytecode on-the-fly. True they all use third-party libraries, but they're tried, tested and open-source.
Gotta agree, looks pretty decent. 
Your reference makes absolutely so sense. 
&gt;It is much less obvious the scope that foo is meant to be used. It's just as obvious, the rules are just a bit different. In F#, everything falls out of scope at the end of the code block (deindent), just like in C# everything falls out of scope at the closing bracket. F# syntax is really good at preventing chain indentation.
From my small experience working with data processing and hardware - C# is faster and more reliable. Recently I used Power Supply with software controller written in JAVA and LABView. 300MBs of ram it was consuming. Probably bad programming, but I can see this so many time with JAVA. I like to have .exe and be able to run my program on every machine within my company. I am biased, as I really hated java from my very first lesson. I've learned C# half-year later.
As a note, it looks like the basic reasons for C#, its a better language/Visual Studio and for Java, it runs well on Linux/Mac. This isn't completely black and white as there are good Java IDEs and C# does run on *nix. While Java might have Eclipse/IntelliJ, it seems most people like VS better. As for Mono, I've gathered that some people have made it work in production, but others have had huge difficulties. It would appear, though, that purely in terms of languages, C# wins out. Then again, they both are imperative, garbage-collected, object-oriented languages with a few functional aspects mixed in. 
Like this? http://i.imgur.com/QcssMCe.png
Java 8 supports delegates? Maybe I'm missing something (I've only read a little bit about Java 8's features) or I don't fully understand delegates, but I don't remember seeing anything that resembled C# delegates in the Java 8 feature lists that are floating around the web.
In Java they're not called delegates, but you can argue that Java's method references and the way that lambdas implicitly implement matching single-method interfaces amount to the same thing. For example, if you define an interface like so: public interface Adder { public int add(int a); } Then imagine you had a class that implemented a method that matched the signature. public class X { private int x; public X(int x) { this.x = x; } public int doStuff(int a) { return x + a; } } Then if you have something that needs an Adder somewhere else: public static int doSomeAdding(Adder adder) { return adder.add(99); } Then you can call this like so: X x = new X(100); System.out.println(doSomeAdding(x::doStuff)); This will print: 199 This is, of course, a slightly contrived example for the reasons of space, but I think it does everything a delegate does. Although there might be some features of delegates I'm not familiar with.
This is true. You can cover Linux and Mac OS X with Mono. iOS, Mac OS X, and Android with Xamarin. You can even use the async / await patterns and F# for any problems that are better solved by a functional programming language paradigm.
I only use it for lambda or linq expressions
I think you're mixing up dynamic and anonymous types.
 Please look at mono if you think it is short of free tools. It also has a completely open source version of the same framework. 
var != dynamic http://stackoverflow.com/questions/1920790/dynamic-vs-var
You do not seem to understand what `var` actually is. It is **not** a dynamic type. You can't change the type at runtime anymore. It still is statically typed. `var` will simply **infer the type from the assignment**. var i = 0; i = "hello"; // This won't compile. i is of type int. You do not need to write int: int i = 0; // This is EXACTLY the same as when I'd write "var i = 0;" `var` is just syntactic sugar to remove unnecessary duplication. This is a good example for the usage of var: Dictionary&lt;Guid, Customer&gt; customers = new Dictionary&lt;Guid, Customer&gt;(); var customers = new Dictionary&lt;Guid, Customer&gt;(); Again, both lines are absolutely identical to the compiler. To address the questions that do make sense: You should use `var` where ever the type is **obvious from the assignment**. Can you clearly see what type it will be? Great, use var! No? Better write the type out. Code should be expressive and clear.
Whoops, I think that's my queue to finally get some sleep
Off topic, but actually I think D is a lot more elegant than C# with this: scope auto foo = bar; scope auto baz = anOutOfNames; // stuff Also you have scope(exit), scope(failure) and scope(success) scope(exit) is like finally, but you don't need a try to add it.
As already stated, var is type inference, not dynamic typing. When it comes to dynamic typing I try to avoid it. I did however use it yesterday, but I think it was the easiest solution at that point. What I needed was a expression solver. The reason is that I wanted to write a LINQ provider for a third party SOAP API which used query structures. So I wrote a LINQ provider that more or less re-wrote == operators (under certain circumstances) to assignments and did a run-time evaluation of the right hand expression using a stack machine. Using dynamic allowed the runtime to do the type checking instead of my code which eliminated days of work, and made a class that would have taken days to complete into an hour or two.
The best thing is that you don't even need to have resharper to be productive in C#, Visual Studio, even the free version, work better than any other IDE.
I think I've only used *dynamic* once since it's been available (5 years?) for us (we lag a little in newest .net adoption). However *var* I use whenever I can because I don't care writing same information twice, let the compiler do that. If I really need type information, I hover with mouse on top of the *var* and VS gives me that. var has also made some types of refactoring really easy (VS refactor tools is quite good, but I don't always have all projects loaded etc.). When you change name of class, often all you need is a recompile instead of getting all the thousands of use places cleaned up as well, keeps version history cleaner as well. Of course this makes us dependant on VS's "find usages" functionality instead of searching by the type name, but I can live with that.
Uh, no. C# has `:` to signify inheritance, you can inherit one class and infinite interfaces. Java has two keywords for that, `extends` and `implements`, `extends` inherits one class and `implements` inherits as much interfaces as you'd like.
Oh, bomb that abomination from orbit. My PTSD is coming back.
While that is certainly true, Java's development process is a lot more conservative whereas Microsoft just adds 4 new keywords in an update if they feel like it. I think that is what he meant.
ReSharper is more than just code fixes. It has architecture/dependency graphs, unit testing tools, code inspection, large area refactoring, and so much more.
Although it is platform independent, development for it is hell if you don't have access to a windows box.
The main weak point of Mono is its VM though. It's significantly slower than Microsoft's fancy JIT VM.
Nice list. You missed operator overloads though!
Just looked into Roslyn. Sounds really promising.
Thank you and corrected.
I almost never use it. One of the lessons I learned a long time ago was, "You're not writing code so the compiler understands it. You're writing code so the next programmer understands it." To me, using "var" means that the next programmer (or, me, in six months) is going to need to spend those few extra brain cycles figuring out what type of data is being stored in the variable.
&gt; var is just syntactic sugar to remove unnecessary duplication. This is a good example for the usage of var: &gt; Dictionary&lt;Guid, Customer&gt; customers = new Dictionary&lt;Guid, Customer&gt;(); &gt; var customers = new Dictionary&lt;Guid, Customer&gt;(); You know, I hadn't used **var** before, or even considered it, until that example. I've seen it used like: var myThing = MethodThatReturnsAnObject(); ... which I hate, as it's not immediately obvious what type var is. But for sure it would make some things shorter and cleaner for, how should I say, *verbose* allocations. 
That's why I said to use it when it's obvious. :-) If the method is named poorly (or there was just no better option) and it's not clear what it returns: Don't use var.
No, I should've said *editor* windows/panels. Sorry. You can't do that with *editor* windows. Sure you can do it with *editor*+non *editor* windows, but you can't dock *editor* windows horizontally and vertically simultaneously. edit for clarity
Formally, it's called type inference. The variable is still strongly typed.
My personal preference is to use var only for anonymous objects. 
As others have said, you don't need to use unsafe pointers in this case. There are times (potentially) but this isn't one of them. Just use references and you should be fine. :)
I'm doing this in my current app! Just starting a process and running ffprobe, then capturing and parsing StandardOutput. 
As a bonus, the .NET CLR also has a full ARM implementation as part of WinRT.
slow start, becoming unresponsive.. etc Maybe it was particular version. It is installed, but I don't have time to try again.
We use Trac for some clients, TFS for others, and TestTrack Pro for yet others. I haven't seen TestTrack Pro mentioned yet, but it's actually pretty good. TFS wins though for nice clean scrum integration. 
Yes, but when WF is just an OO wrapper around WinAPI controls, WPF has pretty good abstraction. You basically just need to implement input devices and rendering system, almost everything except that parts is platform independent.
Wouldn't call that native support though, not like Java.
The "same" framework. Mono is always behind. And nothing out there compares with visual studio or resharper/coderush/etc. The cross platform abilities of C# are lacking because MS doesn't care, and without full MS support Mono isn't going I make waves.
The code is a bit hard to read unfortunately, but the current set up is that the Keys and Values are their own separate Trees that are identical in structure. Each node of the tree has a link to both of it's children nodes and one to it's parent node. Add() works by seeing if the key you're trying to add is already in the tree, if it isn't, then it gets added, if not, then it throws an error saying that the key is already associated to some value. Remove() is essentially just Add() working backwards. It checks to see if the node exists and then removes it if it does. It throws an error if the node doesn't exist. Contains() calls a recursive method which returns the node with the matching key, or null if that node doesn't exist. TryGetValue() goes through the key tree to find the matching key and mirrors each step through the key tree onto the value tree in order to get the associated value. logicalPredecessor/Successor() are selected at random when removing a node. Their purpose is to find the node that is logically closest to the node being removed and the replace that node to keep the tree intact. CopyNode() is probably unnecessary, but it goes hand-in-hand with the previous methods in order to replace the node being removed. The part I'm having the most trouble with is implementing a GetEnumerator method in order to be able to traverse the Keys and Values trees with a foreach loop. If this were a simple list, it would be relatively easy, but since it's a tree, recursion seems like it would be the easiest way to go through each individual node. However, I don't see any easy way of recursively returning each node through the GetEnumerator method. I tried setting up a recursive extension method like I did for Add and Search, but it isn't working out properly. I couldn't add the Node&lt;T&gt; class because I ran out of room, but here it is in case anyone is interested: class Node&lt;T&gt; { private Node&lt;T&gt; left; private Node&lt;T&gt; right; private Node&lt;T&gt; parent; private T data; public T Data { get { return data; } set { data = value; } } public Node&lt;T&gt; Left { get { return left; } set { left = value; } } public Node&lt;T&gt; Right { get { return right; } set { right = value; } } public Node&lt;T&gt; Parent { get { return parent; } set { parent = value; } } public Node() { left = null; right = null; parent = null; data = default(T); } }
Absolutely true. However, the next version of ASP.NET should alleviate a lot of the hassle 
I use MonoDevelop, and I think it's good. But I'm used to working in Vim without plugins, so there's that. Also, `xbuild` (I think, at work right now) can build solution files without issues. Even if they were made with VS. 
You can, but you won't find any company using it out of microsoft products. Let be honest 
A) I have, actually. B) Even if that was entirely true, that's not my problem if people aren't using the advantages that it can give me.
Excuse me, but seriously? Java doesn't natively support *anything*, Java runs *entirely* in a virtual machine on every box it runs on.
Semantics. It's supported by Oracle. Mono is awesome, I'm not hating on it by any means, but it's a community thing. In order to be native cross-platform microsoft would have to be behind it.
&gt; Mono is awesome, I'm not hating on it by any means, but it's a community thing. In order to be native cross-platform microsoft would have to be behind it. Microsoft *is* behind it, they just donated immense amounts of code including their entire compilation system. And please don't talk to me about "native" and then tell me Java is better, it only runs in the JVM - the "Java **Virtual Machine**". And Oracle is one of the reasons I *don't* want to use Java: I don't want to use a language made by a company that has a history of suing the people who use it. That just seems like one big liability to me.
I almost always use var. I actively change explicit declarations to var. This isn't "laziness."
Yeah, it's so hard to figure out what the type is supposed to be when you see something like `var obj = new MyObject();`.
Lol I hate Java. I'm a c# developer. Just trying to be objective. 
Look up the documentation for the methods `int.Parse()` and `int.TryParse()`.
Can you point me to a SIMPLE CORS code example? I have spent some time reviewing the issue and it seems that this could be acceptable (older versions of IE are an issue, but Chrome and Firefox have had it long enough so that won't be an issue.
You should go to Silicon Valley then. Many start-ups use cutting edge Java over there, virtually no one uses .NET. 
No thanks. I am not touching silicon valley. I have many reasons to never live there.
I don't understand what you gain by reading the values into an array then sorting them. File.WriteAllLines(@"c:\neurejenaStevila.sorted.txt", from line in File.ReadLines(@"c:\neurejenaStevila.txt") let n = int.Parse(line) orderby n select n.ToString()); If you really need the values to be in an int array then something like this var vsebina = (from line in File.ReadLines(@"c:\neurejenaStevila.txt") select int.Parse(line)).ToArray();
Spoonfeeding, spoonfeeding!
File.ReadLines() will return an array of **string**. You require an array of **ints**. To perform this conversion see /u/AngularBeginner comment.
Do you have assemblies in the "lib" folder in your nupkeg (NuGet package)? Are you targetting the correct .NET version?
Use int.TryParse() when you can.
*Objectively*, I spent four and a half years developing programming languages, and from that perspective, both Java and C# are... not very good. But, both are very usable, and while I think the structure supporting C# is better than that of Java, the differences are minor enough that I don't consider them important. That's why I make my decision based on more subjective factors like which one I enjoy better, and which one has the development kit I find easier to use. It doesn't hurt that C# jobs seem to pay better.
That still doesn't allow you to *cast* string to int. You need to *convert* or *parse* it.
Just `Select(int.Parse)` would be enough...
I think the person who sent you here was trolling... Personally, I think both Java and C are terrible first languages. My vote would go to Python. With Python, you can go all the way from a simple script (just write commands in a file; no need to even worry about functions, much less classes) all the way to a full on object oriented language pretty much seamlessly. The Python type system also allows you to not worry about types too much until you've got a decent grasp on the fundamentals like arithmetic, control flow, etc. Now, if you want to learn programming for a specific purpose, then that might affect your decision somewhat. For example, if you specifically want to learn programming to write an app for your Android phone, then you might want to start out with Java or C#, since those are by far the best supported languages for the specific domain of Android apps.
... Being nullable doesn't have anything to do with that. You simply can't cast a string to an int.
Looks like I've got some work to do. I'm still not very familiar with implementing interfaces and inheriting from other classes, so that's definitely something I need to work on. You've given me a clear direction though, so thanks for the help!
I can't agree with you more. 
this is a very good point you raise. If the program has to run from a variety of environments Java could be a good choice.
Definitely got trolled. It all depends what you want to do. Personally, since I learned c# I've never looked back at c/c++ except for contributing to open source projects. 
If it's a part of the interface, yes. For instance, if you're making an interface for a family of serial devices, then it's not far fetched to think you would want to expose something like: string CommPort { get; set; } Edit: Alternatively, if you have several properties like this with a similar use, it may be prudent to use an abstract class over an interface, so you can define how those variables are used in a common place.
Apparently, you've never worked with legacy applications and seen code like this: var mtdSales = currentProduct.MonthToDateSales(); And had to take time to see if the method is returning an integer, a decimal/double, or a list of OrderDetail objects. Then had to repeat that throughout the program, since the programmer before you decided that, given the choice of being clear or unclear (and taking the same amount of time to do either option), unclear was the better choice. Part of being a professional programmer is leaving behind a system that will be easy to maintain and modify in the future. Your habit of changing all explicit declarations to "var" (as you mentioned below) is not only a waste of your work time, but a deliberate act to make the code less clear - while gaining absolutely no positive benefits. Feel free to ignore this all you want. I've gotten most of my clients by replacing programs that are so poorly-written and unmaintainable that the companies decided to scrap the old system and hire me to do a complete rewrite.
Sort of, yes. An interface is going to be faster because there is no memory allocation to the interface - data or instructions. It's simply a wrapper of sorts for a type of objects, whereas an abstract base class adds overhead in its children needing to overload it. But, if you have a family of objects that are 50% the same, save how the other half of their functions operate, it's absolutely worth it to shrink your code base by 25%. The few lines of code, the fewer places things can screw up, imo.
There are cases where I wouldn't. Anyway as far as my work time it's just accepting the suggestion from re sharper. It usually makes the code easier, not harder,to read. 
I've used [this guide](http://russellallen.info/post/2013/01/12/Complete-Idiots-Guide-to-Creating-and-publishing-a-NuGet-package.aspx) for building NuGet packages. The package I've built with it uses the namespace of the project's namespace. Might want to double check that the namespace is in the references.
From what I understand, webforms do not have a future. I'm sure someone will correct me. That being said there are still a ton of old webform apps out there that will forever need maintenance. [Pro MVC 5] (http://www.amazon.com/Pro-ASP-NET-Experts-Voice-ASP-Net/dp/1430265299/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1402886066&amp;sr=1-1&amp;keywords=asp+mvc+5) is pretty good with the exception of his user authentication section.
First of all, C is a completely different language from C# - the only real similarity is that the syntax (the way the language looks) is somewhat similar, but the same can be said about Java. This subreddit is devoted to C#, which fairly similar to Java. Both are very different from C. C is a much lower level language. You have to deal with memory management yourself, and there is much less available in built in libraries. When you compile a C program, the compiler converts it to assembly which is run directly by the processor. C# and Java both run in a virtual machine ([CLR](http://en.wikipedia.org/wiki/Common_Language_Runtime) and [JVM](http://en.wikipedia.org/wiki/Java_virtual_machine), respectively). What that means is when you build a program, the code is converted to an intermediate language, which runs in a specific environment. That's why you have to download something from Oracle/Java or Microsoft to run certain programs. These languages don't require you to manage memory, and have a ton of built in libraries for all kinds of things. Most Universities seem to start off with Java or C++ (similar to C, with some more language features added). You may want to look into the programs of schools you're interested to see (look at the Computer Science 101 class or whatever its called). There are pros and cons of learning both languages as a beginner. If you are completely brand new to programming, I might go the route others have suggested and look into a language like Python or Ruby. These languages can let you dive into basic concepts without having to worry about compilers and file structure and development environment and other crap that isn't important for a complete beginner to understand.
Have you looked through http://www.asp.net/ ? It's Microsoft's official site for ASP.net and has a lot of stuff, and forums. 
Disclaimer: I respect your decision and am not trying to shoot you down. Just offering my viewpoint of the opinion you brought up. I mean no hostility. :) I don't find that a worthy goal. EF generates your SQL for you and if you know SQL well you're going to be able to generate your own better. For basic CRUD it does the job fine, and saves you some work. I won't use it for that either though because I don't want to be in the habit of using a tool that I think falls down when you need to start doing more complicated things with your database. Also, as someone that is very comfortable in SQL, EF just feels like a limiter for me. I'd rather just be good at using ADO.NET to call SQL and pull results in.
I don't think that's true. It seems like they bring new features and updates to WebForms all the time. 
If you expect that the file only contains integers, then I would say it's just fine to do this: int[] results; try { results = File.ReadAllLines("foo.txt").Select(int.Parse).ToArray(); }catch(FormatException) { Console.WriteLine("The file doesn't contain just integers."); } The likely scenario is that the input file is not the correct file. No reason to continue reading. edit: formatting :P
Looks fine. however, you may want to consider having the property with only a getter in thy interface, depending on the situation and who is going to use it. Remember you can always implement a setter in the implementing class, but the interface is usually to be used by others, and not always do you want them to be able to be able to change a property.
It is very much true. Do you know of ASP.NET vNext? That's the next version of the ASP.NET stack (and much more), and they're dropping support for WebForms.
For what I know the ASP.NET team is striving for unification of Webforms and MVC as the aim of One ASP.NET project. To add a little confusion to the topic, some claim that both MVC and Webforms are on their way out and will be dominated by SPA-style applications built on WebApi + js combo. Heck, it's already happening up to some point.
Traditionally websites and SPA are two different kind of applications, both with ther advantages and disadvantages. I don't think any will replace the other, they will co-exist. I never heard of WebForms and MVC unification, I just heard that WebForms will not be taken over to the new version. MVC and WebApi will be unified to one framework - no separation anymore.
Can you, please, tell me where did you hear/read that information about dropping support for web forms in vNext? Here at my company we are planning new moderately big project using web forms because we are most proficient with that, but if they really dropping support for that, then would be better for us to acquire some new skills :/ All info that I found so far are from msdn blogs, and they tell that web forms will be fully supported in vNext. (example: http://blogs.msdn.com/b/webdev/archive/2014/05/13/asp-net-vnext-the-future-of-net-on-the-server.aspx).
If you need to convert views to Razor, you might enjoy - https://github.com/telerik/razor-converter/tree/master/aspx2razor Super handy. 
Yeah, but with this approach C# is gonna end up like C++ in the long term (let's say 30 years). Java is Cobol of present day, it will be used 50 and more years from now and it needs to stay simple (and compatible). That's why I think they choose more conservative approach.
Apparently I'm wrong, sorry. Support is not dropped, but it also doesn't really seem to be continued much. I'd guess it's more in a state of Silverlight. WebForms is not rewritten to support the new cloud optimized KRuntime. I believe most of the frameworks will move to this new runtime as it is more slick and optimized than the full runtime.
Thanks for this, really answered any and all questions I had. I'll probably refer back to this several times. I really appreciate the help! I think I'm gonna go with Python to start just to get a grasp on the fundamentals of how languages work and loops and variables and all that. 
Who cares which is faster? That's early optimization at its finest right there. You should only worry about that if you know you have a problem there, which 99.9% of the time, you won't. Edit: Fine, downvote me and waste your time worrying about milliseconds that will never be a problem. Optimize for maintainability first and and performance when you need to.
Thanks for clarifying that up. 
Checkout [Pluralsight's webforms course](http://pluralsight.com/training/courses/TableOfContents?courseName=aspdotnet-webforms4-intro). It is paid ($49/month) but it's the best I've seen for webforms training. There is a whole lot of material on there for asp.net and C#. Get it for a month or two and you will be set. They also have an offline viewer available with paid membership. Download as many as 3 whole courses to your local machine and watch it offline for about a month. I would suggest in addition to the webforms course download the following [ASP.NET 3.5 Working With Data](http://pluralsight.com/training/courses/TableOfContents?courseName=aspdotnet-data) [LINQ Fundamentals](http://pluralsight.com/training/Courses/TableOfContents/linq-fundamentals)
Thank you for asking. :-) This way I learned that I had a misinformation.
It's probably because Windows Media Player doesn't support the matroska media container; you have to use a third party library for that. Here's a stack overflow answer listing different alternatives to decode a matroska file: http://stackoverflow.com/questions/20223781/decoding-mkv-matroska-video-formats
I've had good experiences with MediaInfo. It's a native library, but there are managed wrappers around (including on nuget, I think).
&gt;It's probably because Windows Media Player doesn't support the matroska media container Yeah, I was thinking along those lines. Will check that link out, thanks.
What you are talking about are type parameters and what you're looking for are constraints. Look it up. :-)
If you're talking about generics, then you use a constraint: public class MyGeneric&lt;T&gt; where T : SomeAbstractClass So you're declaring a new generic class where T inherits SomeAbstractClass (or implements a given interface)
Yes (edit - built with linqPad) void Main() { Thing&lt;NewThing&gt; x = new Thing&lt;NewThing&gt;(); } // Define other methods and classes here class SomeOtherClass { } class NewThing : SomeOtherClass { } class Thing&lt;T&gt; where T : SomeOtherClass { } 
&gt;... it was said webforms is for quick, intranet-style sites. And that's about 50% of the things ASP.NET is being used for.
Thanks for this guide. It seems to be good structured and easy to understand. Unfortunately when I am at Step 3 and start the pack command I get his error: "A part of the path "[PathToMyProject]\[ProjectFolder]\[ProjectName]\lib\net45" could not be found." I am a little bit confused by this. Why is it looking for the .Net library in my project?
For which framework?
Or, if you're a student, you can get a 90 day trial on dreamspark. Pluralsight itself offers 10 days
Or, if you're a student, you can get a 90 day unlimited video trial from dreamspark. Otherwise pluralsight offers 15 days/120 minutes video or something.
I checked again what was listed in the package and found some empty dependencies (see edit). Thought they are just some kind of placeholder to indicate that there could be more or something like that. Thank you for guiding me in the right direction ;-)
Thanks for your long response with beackground information regarding nuget packages. I got it to work with a different way, see edit for a short description. At the moment I am a little bit under time pressure for my work, but I can see that there are good reasons to switch to the command line. After my project I have a good amount of free time will dig deeper into the information you gave me. Once again thanks for the time you took to give me (and some other folks) guidance.
**EDIT 06.17.2014: I have gotten a simple example (woo hoo) Once I get it working I will post it here for future ref for others** My service provider only allows 3.5 and 4.0. Don't take your time to create something, just a link. I still am willing to pay, my time is worth something, so I believe other developers, etc are do payment for their time. I just want to have a clue to what I need. I have started something, a business/app and I am doing all the code (been there) and right now I am chasing this issue, alone. So the least I can do is pay people for their time when I need it. **EDIT** I found this yesterday, but it requires IIS Express (why not IIS?) and my c drive is an ssd which is nearly full... so I'm down this rabbit hole http://code.msdn.microsoft.com/Cross-Origin-resource-192e7b8c
Two things, first: Interfaces are a contract, it says that an object will expose a specific API. I have an interface in a project I am currently working on that has this: NetworkCredential Credential { get; set; } Every class that implements this interface has need of a set of credentials that is used to log into services, so this property has been made part of the interface. By doing this I don't have to worry about how different implementations have different constructors with different dependencies, I just let my DI container inject the credential property and be done with it. Second: &gt; Is this considered a proper style or would it be better to make the variables scoped within the class trhey are used in? This isn't a "variable", it is a property. Knowing the difference between these two terms would aid in your understanding on why this is done. Variables are literally just names you tag a data structure with, there are different kinds of variables in C# (local, instance, static, constant), but they're all just pointers to your data. Properties, are C#'s way of encapsulating variables that are used outside of your classes own members. In java, the equivalent to that single property you posted would look like this: SomeType getType(); void setType(SomeType type); Properties in C# are implemented in the same fashion, they just have a layer of syntatic sugar in the compiler that let's you access them as if they were raw variables on the object. By placing these variables through a layer of indirection instead of letting other classes access them directly you are free to change your implementation while maintaining compatibility. You could make your Person class change the id from an int to a long while maintaining compatibility, etc. Since these properties are part of the public API of your implementation, they belong in the interface, just like the equivalent Java code I posted.
An interface is a CAN-DO contract, an abstract class is a IS-A relationship. An interface express a capability, while an abstract class define a base type that will be specialized later. Your iPhone "is a" phone, and your iPad "is a" tablet, the first "can do" calls, and both "can do" geolocation.
Yes, in that sense you're optimizing for maintainability. I just wouldn't bother mentioning the extreme edge case performance aspect to a person trying to figure out the basics. And even for the seasoned pro, it makes no sense worry about the performance difference unless you *know* it's a causing you a problem.
I guess if you had the format specifications, you could parse the file and pull that data out yourself without needing to rely on 3rd party tools and codecs. I don't know much about the format and I could be wrong, but if MKV stores length information in its header somewhere, retrieving the information you want could be as simple as reading out some bytes from the file at a given offset.
Depending on how big of a project this is and how many layers you want, you can call your WCF services from your view models or your model layer. You could also put those calls in another layer and have either your model or view model layer access that. If your workflow is more complicated and you have mutiple view models interacting, or complex business rules that touch multiple areas of your model, you would probably want a separate layer to manage that stuff and keep the interoperation complexity of all the other layers to a minimum. The last approach is the one I favor, but I work on mostly very complex workflows. I like to have the model layer be pretty dumb and having stuff to go back and forth between models and view models as well as enforcing the business rules in it's own layer. Without knowing enough about what you're building, I'd probably treat the service as part of the model and implement it so that the only thing that layer does is ferry information back and forth from the service. This way your data manager layer doesn't have to care how the service works. I would look into Web API over WCF if you have the choice too. Much less pain in the ass configuration to fight with (and it will be a fight with WCF).
&gt; I would look into Web API over WCF if you have the choice too. Much less pain in the ass configuration to fight with (and it will be a fight with WCF). I wish I had realized how universally this is agreed upon, before I chose to learn WCF for my assignmnent project that was due next week.
You poor, poor person. Get the WCF part working by itself then worry about the rest.
i believe generics and constraints are the closest that c# has to what you are looking to do possibly Dependency Injection or Factory Pattern may be an alternative to what you are describing here looks a lot like a simple factory pattern i would lean towards the latter 
Excellent example
Excellent desciption
Yeah WCF is kinda old tech now...
Thanks :)
*Then*-next week. I managed to get it about halfway through.
I'm not familiar with Java Class. Is it the same as this in C#: MyClass foo = new MyClass(); Type fooType = foo.GetType();
Yes. The distinction is that since Java gained generics, calling getClass() on an object of type T returns a parameterised Class object of type Class&lt;T&gt;. All that said, I'd be interested in hearing why OP was after this, or if it's just curiosity. 
Well I've learnt something new.
Web API is a clear choice for RESTful services over HTTP. Contrariwise, WCF is a clear choice for everything else. WCF is more powerful/flexible and subsequently more complicated. [comparison](http://msdn.microsoft.com/en-us/library/jj823172%28v=vs.110%29.aspx)
If you're considering hosting WCF services in your WPF application, you should read more about the differences between self hosting and IIS hosting - [more info](http://msdn.microsoft.com/en-us/library/ee939285.aspx). More likely you intend to use a WCF from a WPF application. That's pretty straightforward. In my experience, the proxy auto-generated by adding a service reference is almost complete (there is a subtle issue with the faulted state), and since it's a partial class, I always extend it with an implementation of IDisposable (to handle the issue) so I can say: using (var client = new SomeServiceClient()) { client.DoSomething(); }
Microsoft is continually bringing WebForms and MVC closer together. It seems obvious to me they'll be one entity in the near future.
Java sucks.
&gt; but I don't tend to get straight answers about why people disagree. For me Eclipse is too much like the bad old days of Linux, where anything you wanted to do required locating obscure parts of configuration and applying arcane settings.
Yeh I agree - I'm surprised to see people promoting Web API over WCF. That's all very well for HTTP but I wouldn't consider WCF for HTTP. It's pretty good with named pipes, tcp, etc.
What do you add into the idisposable to stop that faulted state?
I use whichever is clearer in the circumstances. If I need to call a method that has no query syntax like Distinct or ToList, then I use method syntax: users.Where(u =&gt; u.Name.Contains("Byte")).ToList() Also, if the select is just a straight identity (like your example), then again I would use method syntax. However, as soon as there is a where and an interesting select and perhaps an orderby then I would go for query syntax. from user in users where user.Name.Contains("Byte") orderby user.Name select user.Id; is clearer than users.Where(u =&gt; u.Name.Contains("Byte")).OrderBy(u =&gt; u.Name).Select(u =&gt; u.Id); Also, if there are multiple froms I think the query syntax is always much clearer than a call to SelectMany: from group in groups from user in group.Users where user.Name.Contains("Byte") select user.Id;
Method syntax every time, it just seems much clearer.
The method syntax Prefer I do 
Method syntax 
Method syntax without a doubt. For me, it's much cleaner and easier to read.
It depends on the context. Usually it is the method syntax, but once you have longer queries, multiple conditions, joins or even the requirement for the `let` keyword the query syntax becomes **much** more cleaner than the method syntax.
Method syntax. -Easier to make where clauses resuable. -More cleaner than a query syntax
1. Project -&gt; Properties -&gt; Build -&gt; Advanced -&gt; Check "Check for arithmetic overflow/underflow". 2. Enumerate the enumerable until you get an integer overflow: ``` Fibonnaci(CancellationToken.None).Count(); ```
Whichever is easier to read (which is generally the method syntax). I definitely favor method syntax for simpler queries, but there are scenarios where the query syntax is more legible.
Method/Lambda syntax.
Say that again once you have the requirement for some intermediate values and joins.
+1 for `SelectMany`, [that is a hard beast to tame with method syntax](https://gist.github.com/ByteBlast/9f3b5cbae30265a50089). 
Method syntax. Only reason I use Query is for writing EF join queries, where its easier to make mistakes (causing inefficiency) in method syntax.
You're making advertisement for something you did not even started yet? Wow. Just wow.
if you are using entity and there is a navigation property you can do groups.where(w =&gt; w.users.name.contains("Byte")).select(s =&gt; s.users.id)
&gt; Avoid calling string.Trim() :|
The second item would look like this: groups.SelectMany(x=&gt;x.Users) .Where(x=&gt;x.Name.Contains("Byte")) .Select(x=&gt;x.Id); Edit: ByteBlast's example is a better example of when query syntax works well. Pretty much any time you have to carry intermediate data through the query that would normally be dropped.
I often do add the carriage returns, but the query syntax without the explicit lambdas is cleaner in this instance IMHO.
Method syntax. But I've created a bunch of extension methods that tie in with the LINQ methods, so I'm biased. That said, as other people have pointed out, the syntax approach does have advantages in certain situations but the number of times that I run into them tends to be few.
Any reason why the "Planned Features (in code)" section API examples have a mix of upper and lower camel casing? * fs.createFile * file.Append * file.WriteLine * file.ReadAllLines * fs.deleteFile * fs.copyFile * fs.moveFile * fs.Find * fs.getFile * fs.fileExists * fs.getAllFiles * fs.Export * fs.Import
No question is noobish. .net has a package manager called nuget. this allows you to install frameworks, libraries etc and manage them via this tool. The project queries the nuget package feed to get information about the packages a project is using and generates a simple html report. For me the tool is useful because I have a huge project to manage, and I wanted an easy way to know which packages I was using across the entire project, if any of the projects were outdated, and what the licensing was of each project for compliance
If it's LINQ to Entities, I almost always use query syntax. For LINQ to Objects, usually method syntax, unless there are joins or lets, or I'm selecting into a new object. - I just prefer query syntax for that.
Most likely copied from the Java API document.
You could post the source to an open source code repository (e.g., [CodePlex](https://www.codeplex.com/), [Google Code](https://code.google.com/), [GitHub](https://github.com/)) then we can review the code, download it, and compile it ourselves.
As others stated, method syntax for me. However, I don't use complex LINQ so method syntax is easier to read 99% of the time.
I indeed did not look properly, I thought they were unrelated. But what if you have to completely distinct collections?
Should i just upload my entire visual studio project? or are there some files that are not necessary (it's a WPF program)
Looks like he'll just port over the code, without adjusting it.
Generally speaking, all the files required to open it in Visual Studio and compile. Off the top of my head, that means all sln, csproj, cs, xaml, and any additional images (jpg, png, etc.) or external resource files. You should exclude any "obj" and "bin" directories that are generated as a result of compilation.
For highly complicated things, query, and for simpler things then method syntax. ReSharper is also able to interconvert them easily (single click), so I sometimes try out both to see which is clearer. LINQ is pretty awesome.
Thank you FizixMan that's all i need 
Method syntax, unless I have to create an anonymous type. And I don't create them often.
First one.
It depends on the circumstance. In most cases I use the method syntax but if there are complex joins or multiple froms I prefer query syntax. I voted both.
If this were the VB forum I would say query syntax. But for C# the method syntax is better for me.
Agree, but using both in the same project, seems a little bit, well I don't like it. 
For normal use, the former. If I have to do joins, the latter.
By "which framework" I mean WebAPI/WCF/etc. If you are using WebAPI, the source link that I included has code samples and my comment includes the relevant portion of those code samples. I'm not sure what else you need - unless you want a tutorial on WebAPI, in which case there are hundreds that you can get to via a simple Google search.
AH, I see. This is the shame of which we have to deal with too many similar terms. Thankfully another Redditor got me a simple sample and I got it working today. I am in the middle of tweaking it, but once done I am going to post the item here for the next person who has this issue. Thank you again for your time, and next time your in NYC, drinks on me.
I'm in the habit of using `it =&gt; it.Whatever`. Makes it easier to read to me, as `it` is the subject. Kind of like a shortened `this`.
Ok. "Method syntax every time, it just seems much clearer." :) I just create anonymous classes in between and use the Join method, because it's easier for me to keep track of where the data is. That's all the compiler is doing for you anyway and I don't have to learn a new SQL-like syntax that's just different enough to confuse me when I write DB SQL.
Like most people, it depends for me. Depends on the project, the complexity, and what I'm querying. If it's complex, I go with method syntax. If I'm querying a DbContext, I go with query syntax; it just seems natural.
I usually use the name of the thing, like item, user, etc.
You can mix in Distinct and ToList method syntax with query syntax. var users = (from u in users where u.Name.Contains("Byte") select u.Id).Distinct().ToList(); **Not** saying it's a good idea, or clear, just that it can be done. **Edit:** Also, it might have some performance issues. I think I'll test that.
Method syntax because it doesn't look like SQL
I use x a lot, you can type it quick and it's easy to read. If there's a couple queries I'll use "od =&gt; od.Name" for OrderDetail
Method syntax. The query syntax seems backward to me because they put the "from" before the "select", which is not how SQL actually works. It just messes with my mind. 
I go with method syntax because I'm too scared to try new things.
WCF is no longer being developed by Microsoft ([source](http://blogs.msdn.com/b/odatateam/archive/2014/03/27/future-direction-of-wcf-data-services.aspx)). Your architecture really depends on the size of the app and its intended use, but for most things a RESTful API via the .NET Web API (I'm a big fan of the new attribute routing) should do the trick. You could easily integrate with WPF as well.
I used the query syntax for a long time. Once I began to realize that LINQ is not magic and was just a set of methods on `IEnumerable` I began to use the method syntax. In retrospect, having a `select` clause in most LINQ statements is probably not necessary. Most of the time you want the whole object anyway. Not always, but I'd be willing to bet most cases will require the entire object.
Depends on what you mean by distinct collections. Two collections that are the same type where you can join them together? Or something where you would make use of the [Zip](http://msdn.microsoft.com/en-us/library/vstudio/dd267698(v=vs.100).aspx) function? Zip isn't too bad but the join function... That has always been rather ugly. I agree there query syntax is nicer.
Yes, you should take Dapper for a spin. I use a mix of EF6 and Dapper in my data access layers. EF when I need to work with object graphs and sometimes when speed of development (as for a proof of a concept) is more important than blisteringly fast code. But... When moving thousands of record around (think custom ETL ops), Dapper is awesomely fast and very easy to use.
I got hired for my first programming job and they were using C#. They gave me a big book with roughly 600 pages and I read it and started working. That's all, everything then is just experience.
&gt;How did you come about learning the language? Work, I don't really know, it seemed to me the easiest language to learn after I learned C++ and Java &gt; Was it required for school, work, or just for fun? All of them ;) University, mainly Work, and I'm learning it for fun: XNA/MonoGame and Unity you can't take that from me. I'm most productive when I use C# &gt; what kind of work do you mostly do with it? Mainly I'm making AutoCAD plugins at work At home I'm developing some games well it's more a research than making a game Had made some useful and harmful (Trolling) tools with C# ;) P.S. I have 4 Job offers because I know how to code in C# ;) 
I was first exposed to this language on an OOP class at my university. It quickly became my favourite language out of those I dabbled in up until that point (C, Python, Java, Ruby). I've been hooked on C# and .NET ever since.
I got interested in C# after a lecturer recommended it to me as what to invest my time in. I was told that is where the work is (I'm in Australia). Mind you it really had to wait largely until after I finished my degree. I had to get that done first.
Which book did they give you? I recently bought "C# 2012 for Programmers, fifth edition" by Deitel and Deitel.
Work. When I started interning at the company I'm working at currently they told me they work in C#. So I learned C#. I did Java before, so I read / watched Microsoft's C#-for-Java-devs tutorials, read up on the differences then started coding. At this company I'm mostly doing NLP or related work.
I'll survive :-) A quick glance doesn't show anything wrong. Try running it under a debugger and see what happens. Most likely opening the file, blocks for some reason. Why the method gets called multiple times I have no idea. Alternatively, stop using messageboxes to get debug information and use something like Log4Net instead. That will give you much better insight into whats going on.
Started by learning C, then C++, so C# was kinda natural and easy
so for me i didnt properly touch c# until about 6 months ago. before then all of my programming experience was in C and java. the transition wasnt too hard but learning all the little nooks and crannies of .net is probably my biggest thing. i mostly use c# for writing apps to aid in testing of software since configuration can talke a long time for us.
slap a breakpoint on opening file and see what's going on i cant see anything drastically wrong. I would recommend when using streamreader you use using() so that the streamreader is correctly disposed. also am i right that youre doing all of the on a property? i feel that there is a more elegant solution that what youre doing there.