Take a look at [https://github.com/ClemensFischer/XAML-Map-Control](https://github.com/ClemensFischer/XAML-Map-Control) . Basically you split your images into "tiles" of fixed sizem then resize image to half the size and split into tile again and repeat that until you get to the max zoom out level. It is the way google maps work. Microsoft had demo image many years ago. Do not remember the name but it looked cool.
No. C arrays are the same as C# arrays. There are no extra elements. C/C++ strings on the other hand have terminating character 0.
So then what's the behaviour in a c-style string? Does [^1] return the null terminator \\0? Or does it return the last character of the string?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Debugging a client-server app](https://www.reddit.com/r/dotnet/comments/arv4u1/debugging_a_clientserver_app/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What language the project is written in? on any case, the code runs on two different locations, possibly in two different languages, so its two debugging sessions. but: you can automate running both of them together, with one command line . for example, see [https://www.npmjs.com/package/concurrently](https://www.npmjs.com/package/concurrently) if the project is a NodeJS project . this can run both the server and the client, and then open a browser. Or, just use a batch file for that, or - a script in VS
Try adding “element.KeyUp += new KeyEventHandler(OnTextInputKeyUp);” to main() where the element is the element/object you are adding the handler too.
I leave this comment just to see how it's done when there will be some answers.
A little bit difficult without some code from your side.
Hi, I've created an observeablecollection consisting of the items. Then a watermarktextbox. That is all I've done.
As I understand you want to have a freedom on front-end side, and need some 'generic' backend that can connect to your data source(s) - I guess this is SQL Server - and prepare JSON data or even HTML tables that you can use on your dashboard. Take a look to this product: [PivotData microservice](https://www.nrecosite.com/pivotdata_service.aspx) This is server app (.NET Core) that you can deploy on your server. You can configure your data sources with simple JSON config (define SQL queries, report parameters etc) and then use web API to get data on front-end and generate reports - including rather advanced pivot tables! Example of dashboard that you can create: http://pivotdataservice.nrecosite.com/pivotdataservice/web-dashboard.html Just to note: you can use your favorite js library for charts; I may recommend to use free/open source ECharts, they look very good.
yeah, we all want that swiss army knife of C#, jokes aside I don't think there is anything like that around.
It is a csharp client and server
for simplicity, all on the same server
yeah but i have ADSL where i live so this wouldn't really work
Why?
You need to have two collections, one for all original items and one for the search results. You bind the one for the results to your listbox. On initializing, both collections contain all items. Then, you bind a string property to your textbox. In "set", you call you search function, where you do something like Results = AllItems.Where(x =&gt; x.Contains(SearchString)) (or a property of the item or whatever). Be sure to add all items to the result set, if the search string is empty. Then the PropertyChanged should fire for "Result" and your UI should update accordingly. Be aware that String.Contains ist just a really simple search and is not really optimized, so for a large set of items use a "real" search function.
To get shorter, url-safe guids, I guess? I thing the read.me would be better if it stated what problem it solved and also showed examples of encoded vs plain guids, though. If you read the blog posts that it links to, it becomes more clear. 
I see two potential issues. Have you benchmarked this on really high core count machines? Using interlocks as an alternative to using a lock starts to lose the performance race somewhere between 8 and 16 cores as it causes page table ownership negotiations across the memory bus whereas a lock doesn't. That work scales non linearly with core count. It's not too horrendous untill you run on a multisocket motherboard and the page table ownership starts being negotiated between sockets. In those cases, a lock can out-perform interlocks. The second problem is spin-waiting. In a largish code base I work on, we had problems with around 20% of CPU (64 cores across 2, maybe 4 sockets) being consumed by spin waits in some performance scenarios. Spin waits are fine when they rarely need to be used such as a low contention lock but when you need to use them often such as with a high contention lock it can actually have the opposite effect of what you desire. The issue was in some .NET Core framework code which did a spin wait if something hadn't competed yet before finally allocating a native WaitHandle. The idea being that a WaitHandle is expensive to allocate (it is) so spin wait to avoid it. But the rate that we needed to wait was high enough that we were consuming a lot of CPU doing so. The simple fix was to use a different call pattern to avoid the spin and force the WaitHandle allocation in strategic places. In most situations the spin wait was the right thing to do, but only if you rarely need to. I suggest testing on a high core multi socket machine and force high contention to see how much a problem your spin waits are. 
Probably the best use case for encoding GUIDs in base 64 is for usage in URLs. Encoding a GUID as \`n0ykxjp2JEWMCwTFmfABpg\` instead of \`c6a44c9f-763a-4524-8c0b-04c599f001a6\` means less bytes to transmit over a network, as the base 64 representation is 14 characters shorter.
hi, you can try to use VS post-build commands to run the server after compiling the client and vice versa ([https://docs.microsoft.com/en-us/visualstudio/ide/how-to-specify-build-events-csharp?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/ide/how-to-specify-build-events-csharp?view=vs-2017)) &amp;#x200B;
They aren't URL safe because URLs are widely assumed to not be case sensitive and Base64 most certainly is. (That's actually the first thing I learned when I searched for Base64 Guid. I wouldn't have thought of it on my own.)
That's a horrible idea. You shouldn't assume case sensitivity in a URL. And the meager 14 character saving means nothing when the default packet size is 4,096 bytes.
I'm using ICollectionView to get the results, and it works just fine. The only problem is that when I use the GetDefaultView of the ObservableCollection , items which is updated in the ObservableCollection doesn't update in the ICollectionView...
I don't believe there is a standard for URL case sensitivity apart from [RFC 4343](https://tools.ietf.org/html/rfc4343) which states that case insensitivity for domain names. Whether a URL is case sensitive or not depends on how the server-side application is developed, so there could be a use case for base 64-encoded GUIDs. Also, there are existing sites that use base 64-encoded IDs in URLs. For instance, YouTube's video IDs are encoded in base 64. https://www.youtube.com/watch?v=dQw4w9WgXcQ
&gt;The day before yesterday
C# is a "general" language. Theoretically everything that you see in Windows and do, C# can do. From pinvoke, COM interop integrations, threading, garbage collection, UI - desktop and websites, etc. Thus the question is a bit vague. &amp;#x200B; &amp;#x200B;
https://stackoverflow.com/questions/7093861/filter-items-of-a-listbox-based-on-the-text-of-a-textbox-using-only-xaml-in-wpf Basically, using a CollectionViewSource to filter out results. Is that what you wanted to do?
Thank you, I'll check that out.
&gt; https://stackoverflow.com/questions/7093861/filter-items-of-a-listbox-based-on-the-text-of-a-textbox-using-only-xaml-in-wpf I'm doing this atm, this.Category= new ObservableCollection&lt;Category&gt;(await GetCategories()); this.CategoryCollection = CollectionViewSource.GetDefaultView(Category); But the collectionviewsource doesn't update when items in the observablecollection updates. 
I don't think it's meant to update automatically. You want to update it manually whenever you type text in your text box.
Have a look at the asp.net core repository from Microsoft. It will show you all manner of shenanigans. https://github.com/aspnet/AspNetCore 
Well the official docs have a lot of samples with lots of comments if that helps you, but I don't know where you could find a single program with all the syntax and language features, and it would probably be pretty long
So I guess you aren't doing anything GUI related.
Not really, unless one is not using GUI tooling, entity framework, UML designers, GPGPU debugging, mutli-threaded debugging, third party VS plugins, and a couple of other features not available on VSCode.
The character set used for base64 is url safe, unlike a lot of other character sets that can be used to generate shorter unique values. The domain part of a url is not case sensitive. The rest is. It’s up to the server to decide ‘workarounds’. So using these guide in your web app should be safe. 
The search works, just if the items in the observeablecollection is modified, the collectionview doesn't seem to show the updated items automatically.
It seems like calling : this.CategoryCollection = CollectionViewSource.GetDefaultView(Categories); works, if I call it each time an item in the observablecollection Categories is changed. Is there another better way to do this?
I must say it's been a while since I worked with WPF. You should have a Refresh method on you CollectionViewSource which should do the trick; however, it will rebuild the whole view, which is unwanted for bigger lists. See [this SO question and answers](https://stackoverflow.com/questions/11271048/collectionviewsource-does-not-re-sort-on-property-change), .NET 4.5 apparently implemented some ListBox properties that solve this problem.
I'll try that
You can't assume case sensitivity in any part of URL. I know that case sensitivity is not the default behaviour for any routing in .NET MVC, and enforcing case sensitive URLs is a pain even in the newest versions of .NET Core. You can pass case sensitive arguments in through an HTTP Request, but that's not the same thing as a case sensitive URL, nor does a URL safe character set mean case is preserved. Besides, GUIDs are both URL safe and case insensitive. You shouldn't be including a GUID in a URL, regardless of encoding, anyways, which makes this whole discussion moot.
looks like it uses base64, can I just to Encoding.Base64.GetBytes? I don’t remember that as an option
&gt; You shouldn't be including a GUID in a URL Why?
I don't agree with all of this. He asserts that 0 should be the first index in an array because 0 is the first natural number, but I don't think that's a good enough justification.
I understand the concept, but it doesn't specify how to actually create one. Even this article talks about key events as a tease but doesn't give an example of how to make one. &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/routed-events-overview](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/routed-events-overview)
I am assuming you mean UIElement.KeyupEvent or PreviewKeyupevent. Both give error message that a static readonly cannot be assigned except to a static instructor or variable instructor. 
Now that this is done, I'll be integrating this into a bot app using Reddit.NET to create an interactive ELIZA chatbot on Reddit. I know you must be asking, "Why would anyone waste their time on this shit?" The answer is quite simple, really: Perhaps in your fantasies we know each other. ....Hey, what can I say? It's a recreation of an algorithm written in 1966. Don't expect it to be passing any Turing tests. =)
Yea, why? How are you supposed to link to a specific item in your shop then? Shop.com/items/GUID or Shop.com/item?id=GUID Are very common these days
Implementations vary, but they often operate as state machines. I Say "often" because I don't want to speak for all implementations. I do know that some state machines are then compiled to actual code. If that sounds complicated, it's actually pretty simple in C#. You can either emit code to compile, or use built in constructs like Expression. As your article mentions unmanaged strings can be any size, and you can write C# code to operate over them. I've never done that at this sort of scale though, so I've no idea of the implications. Is there a reason you can't partition the data and operate on a subset of it at any one time? 
From Wikipedia: &gt; ELIZA is an early natural language processing computer program created from 1964 to 1966 at the MIT Artificial Intelligence Laboratory by Joseph Weizenbaum. Created to demonstrate the superficiality of communication between humans and machines, Eliza simulated conversation by using a 'pattern matching' and substitution methodology that gave users an illusion of understanding on the part of the program, but had no built in framework for contextualizing events. ELIZA.NET is a recreation of that. I was unable to find the original DOCTOR script that went with it but I did find a knockoff in another OSS project that seemed a pretty close match (though most of the regex needed to be redone). This bot is a toy that serves no practical purpose unless you're interested in learning more about early AI algos.
It pretty common to use them as ids. So when routing you would do something like /products/{guid}. That said I can't see any advantage to base64ing them.
any way to leverage simd via system.numerics or platform intrinsics coming in core 3.0?
No guids in a url?
as far as i can see, they offer virtual machines, correct? i was looking for something simpler, don't really feel like taking care of updates and stuff... that's why i asked about appharbour, you hook up your bitbucket/github account and you've got hassle free CI. 
&gt; Also, there are existing sites that use base 64-encoded IDs in URLs. For instance, YouTube's video IDs are encoded in base 64. &gt; &gt; https://www.youtube.com/watch?v=dQw4w9WgXcQ It's funny you'd say that, since that's not valid base 64 (decoding it yields unprintable garbage). They actually chose a modified variant of base 64, probably precisely because of URL concerns.
&gt;To get shorter, url-safe guids, I guess? You shouldn't use Base64 then. At the very least, use [Base58](https://en.wikipedia.org/wiki/Base58) to avoid ambiguity.
If you do this, you'd want to UrlTokenEncode rather than Base64Encode as that is safer in URIs. No slash or equal sign.
You'll have to show code so we can understand what you're doing. This will work: public MainWindow() { InitializeComponent(); this.PreviewKeyUp += MainWindow_PreviewKeyUp; } private void MainWindow_PreviewKeyUp(object sender, KeyEventArgs e) { if (e.Key == Key.A) MessageBox.Show("tada"); }
But Swagger is not a standard neither WADL. If you want a description and you don't want to share with smartphone/js, **then wcf works out of the box.** 
[https://stackoverflow.com/questions/34752657/c-sharp-creating-directory-and-setting-the-permissions](https://stackoverflow.com/questions/34752657/c-sharp-creating-directory-and-setting-the-permissions) &amp;#x200B; TL;DR: You need to give the user permission to write to that folder. If you're using [ASP.NET](https://ASP.NET) the normal approach would be to create it inside App\_Data which already has those permissions for the App Pool user.
You can assume case sensitivity since the server is generating the URL. No one is typing this in to the address bar, and people shouldn't be modifying URLs when they copy/paste. Plenty of sites use case sensitive information in the URL, such as imgur as a quick example. 
feels bad when people who worked on this problem for years don't get as much traffic
the problem is that im new to programming and i dont know on the link that you postet waht i have to fill the code from my data and i want it to create a folder in the pictures folder &amp;#x200B; i hope you can understand what i mean and can understand my english. &amp;#x200B;
Thanks for the feedback. I only have my desktop processor to test on (my focus is gamesdev usually). I need to get hold of a 16+ core CPU somehow to fine-tune before full release. Thankfully I've built in a way to simulate different contention levels in the benchmarks already so hopefully once I get the right hardware I can start looking in to fine-tuning. Thanks again!
No, that's not his justification &gt; When dealing with a sequence of length N, the elements of which we wish to distinguish by subscript, the next vexing question is what subscript value to assign to its starting element. Adhering to convention a) yields, when starting with subscript 1, the subscript range 1 ≤ i &lt; N+1; starting with 0, however, gives the nicer range 0 ≤ i &lt; N. So let us let our ordinals start at zero The justification is basically, if you have a set of N things, one-based indexes will mean that the last item is N+1, which is awkward. zero-based indexes mean the index of the last item is just N.
Welcome to hell (Sponsored by Modbus). You should start looking for the specification of the PLC, while Modbus is a standard but the instructions, commands, and results are not, they are specific of the PLC (Omron, Mitsubishi, Siemens..) However, at first view, you are not messing the Modbus but with the TC/IP port and it is another pain in the arse. I use ``` private Socket socket; // where dataSend is an array of byte 2,3,1,0,0,1,133,197 (those bytes are ModBus, the first 2 is the modbus commad, while 133 and 197 is crc. int bytesSent = socket.Send(dataSend) int bytesRec = socket.Receive(bytes, SocketFlags.None); // where bytes is an array of byte[13] (empty), it is filled with the results. ``` While the call is not asynchronous (I use Send instead of SendAsync) but the function that calls it is async. 
I am not at home to test yet, but is the "MainWindow\_PreviewKeyUp" written anywhere in the XMAL?
You're right, I overlooked the fact that it's a modified variant. However, the character set used is still the URL-safe base 64 character set, so I'd say that the point on case sensitivity still stands.
C# also allows to program smartphones and 2d/3d games. However, if you want to see something visible &amp; web (and you want to show-off): https://demos.telerik.com/aspnet-ajax/ https://www.devexpress.com/support/demos/ 
That's not his justification. He is saying 0 should be the first index so that ranges of the form "0 &lt;= i &lt; n" can be used rather than "1 &lt;= i &lt; n + 1". &gt; When dealing with a sequence of length N, the elements of which we wish to distinguish by subscript, the next vexing question is what subscript value to assign to its starting element. Adhering to convention a) yields, when starting with subscript 1, the subscript range 1 ≤ i &lt; N+1; starting with 0, however, gives the nicer range 0 ≤ i &lt; N. So let us let our ordinals start at zero Maybe you are getting confused about the earlier part where he is explaining why "x &lt;= y &lt; z" format ranges are better than "x &lt; y &lt; z" format. The problem with the latter kind of range is that the "x" will be lower than the lowest index, which can be awkward. &gt; There is a smallest natural number. Exclusion of the lower bound —as in b) and d)— forces for a subsequence starting at the smallest natural number the lower bound as mentioned into the realm of the unnatural numbers. That is ugly, so for the lower bound we prefer the ≤ as in a)
&gt; Is there a reason you can't partition the data and operate on a subset of it at any one time? Well there may be a Regex expression which needs to overlap two partitions, which will be missed if we only look at each partition separately.
No. This is from the `cs` file. Alternatively, you can leave out `this.PreviewKeyUp += MainWindow_PreviewKeyUp;` and instead amend the `xaml` with `PreviewKeyUp="MainWindow_PreviewKeyUp"&gt;`: &lt;Window x:Class="WpfApp1.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:WpfApp1" mc:Ignorable="d" Title="MainWindow" Height="450" Width="800" PreviewKeyUp="MainWindow_PreviewKeyUp"&gt; 
UrlTokenEncode is only available in .NET Framework and not .NET Standard, so I wouldn't be able to implement that in this library. As for those string Replace calls, I could probably optimise that further by using a StringBuilder instead. Apart from that, I'm not too sure where I can reduce allocation of extra/anonymous classes; you're welcome to open an issue in the repo for discussion if you spot anything that can be improved.
I haven't been doing anything with WPF for a few years. I suppose that would definitely be a use case, though.
Your code, your rules - have fun. However, if you: &gt; do not find this very readable because of the ! at the start of the if statement You might have a problem reading... well, virtually any piece of C# code out there. And I hope you'll agree doing a similar method for each possible use of the `!` operator is absurd and unrealistic...
I've done something similar, but just used the same name. `!myString.IsNullOrWhiteSpace()` I like this a bit more because it's obvious to anyone who's seen the static string method. The small problem I have with yours is that it's only readable after you've seen it and looked at the implementation (will an empty string pass for HasValue?). Otherwise, yeah, I agree with moving these static methods to extension methods, and I'm excited for extension properties when we get those to continue.
Consider this PR feedback. Yes, UrlTokenEncode is only in FX, but you are writing a library and putting in things that are inherently slower (repetitious Replace). Take the 10 minutes out to study how that is done. Every place you have an anonymous class in your constructors are your extra allocations.
Yeah, my first thought was that it seems like a really bad idea to copy the name from nullables and then have a different behavior.
Since there is quite some discussion on case sensitivity in URLs, [here's a StackExchange question](https://webmasters.stackexchange.com/questions/90339/why-are-urls-case-sensitive) on the topic. Several of the answers (in addition to the accepted one) provide good insights on the topic, so it should prove to be a beneficial read.
I have another problem, where I'm using observeablecollection in a combobox and ICollectionView in a listbox. What I notice is that if I add a filter to the ICollectionView, it is also applied to the observablecollection. The problem is that the filter is a search which is applied to the listbox, which handles the categories in the collection, which is fine. But the combobox is in another component and shouldn't add the filter, as it should display all the collection?
I made an extension called NullIfEmpty(this string s), which returns null if string is empty or whitespace or null, otherwise it returns the string. This way, i can do s.NullIfEmpty() ?? "Default, or, s.NullIfEmpty() == null
I guess your ICollectionView is made as a reference to the ObservableCollection, so they're actually the same object, which is why they're both getting filtered. See [this SO question and answers](https://stackoverflow.com/questions/6317860/should-i-bind-to-icollectionview-or-observablecollection). 
I do admit that I didn't prioritise performance when first creating the library, but the benefit of the code being open source allows others like yourself to provide constructive feedback on things that I may have overlooked. I'll take your suggestions and work on improving the implementation in the near future. Thanks!
If you have existing code that deals with the modbus protocol it'll depend on that code, no way for us to say. If you intend to replace the modbus code in that application with something new, beware of the .net modbus libraries out there, I've tried several and they're mostly either not working or doesn't follow the standard (mind you, not all devices do either). I ended up rolling my own. In my solution I have a command queue, a cyclic command list, and a private thread that runs the modbus. If there's something in the queue, it'll run that, if not, it'll run the cyclic commands.
If you really want to do it this way, replace the first character 'd' with another wildcard character that will not be used in the string, then at last replace that wildcard character with 'g'. But really, you would want to iterate the string on a character basis, which would be much more efficient and prevent duplicate replacement.
Any suggestion to how I can fix this?
Suggestion, possible, solution, probably not. I don't have your code, and I wouldn't have the time to look at it; but as the SO post says, you can try to create multiple CollectionViews for each component that needs it.
I've also just found a library called NetVips which is a Mono/.NET port of the libvips (C and C++ only) which is specifically for handling large images. It sounds good, but unfortunately not much documentation about. :-( &amp;#x200B;
even though I got 2 different viewmodels? The reason one of the viewmodel uses the collectionview, is because one window allow you to manipulate the items, and the other window which is using the collectionview let's you choose.
Right, I haven't heard of anyone doing .NET Framework development on vscode. I was just pointing out that Mojomonkeyfish was probably talking about dotnet core development. By the way, [Visual Studio 2017 no longer has UML Designers](https://docs.microsoft.com/en-us/visualstudio/modeling/create-uml-modeling-projects-and-diagrams?view=vs-2017).
I see; in this situation, I would use a Service class to hold the data (the original ObservableCollection), but this is getting more complicated than the first problem. If you don't get answers here, you should try to ask StackOverflow, your problem probably needs someone to look at it more closely.
It's common practice that readability is increased by converting if statements to read positive instead of negative.
Series is very topical for my current role, so thx for publishing! If I could ask one thing, it would be to normalize the audio tracks. One guy is medium volume while the other is really loud. I stopped watching because of this. 
It's much easier to do with ASCII values than directly relpacing characters in string. And it would fix your problem
Sounds like you ought to try out Rider, honestly. All the benefits, none of the drawbacks. 
Ah, I didn't consider that yet. While it will probably not help in the common - object heavy - scenarios, I can definitely see it being worth investigating! This is just based on my intuition, but I think that maybe in cases where large structs or value-type arrays are common, SIMD could provide a speedup! On the other hand, maybe it's not so easy: https://stackoverflow.com/questions/5321383/does-rewriting-memcpy-memcmp-with-simd-instructions-make-sense
 Sticking Feathers Up your Butt Does Not Make You A Chicken &amp;#x200B;
Thank you for the feedback, do you hear the same voice level difference in the first episodes?
putting aside the wisdom of this approach... &amp;#x200B; you need 2 passes - first one to replace all characters with a placeholder, then another to replace the placeholders with the new values &amp;#x200B; `encryptedPhrase = encryptedPhrase.Replace("a", "_A_");` etc &amp;#x200B; then on 2nd pass &amp;#x200B; `encryptedPhrase = encryptedPhrase.Replace("_A_", "d");` &amp;#x200B; etc &amp;#x200B;
I always assumed the request path was case sensitive. It's accessible in the HTTP request. How could the case get damaged?
These are for machines, not humans. No one's going to put a guid in the url printed in their marketing campaign.
Any time they have to be hand typed, which is the main reason you care about the length.
What happened to people screaming on stackoverflow that a method should only have one return statement?
Ironic that the website is called "end your if", and the proposed solution is just another if. And IMO it's less readable because we have some custom extension method that basically adds absolutely nothing. The opposite actually: the information what qualifies a "value" is hidden. An empty string might very well be a "value".
This gives me a terrible idea. Instead of guid to base64, how about guid to emoji? Time to spin up a repo, who's in?
pretty sure the core memcpy functions leverage simd now, so if you are just copying array memory, may be no way to leverage. but if you are doing any maths maybe you can
😈
Fluent interface
Fluerface. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Fluent interface'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
I know I just posted another article earlier (yesterday) from within which this one is referenced, but I decided to post this alone as well in case anyone wants to read just this one
I would suggest Visual Studio Code along with official C# Extension? I mean why would you use anything other than that?
Yay! my first silver... thank you :)
I need to work on 2 webforms app. That sadly rules out Rider.
The builder pattern
Thank you.
I prefer properties to constructors with optional parameters. When creating the object you're forced to specify the name and that way there is no option for someone "not being bothered".
You might want to look into read-only structs. They allow the compiler to elide defensive copies as well as some other nice optimizations which come from immutability. I did not see any in the quick glance I took. Furthermore I would recommend you follow guidelines for structs to implement IEquatable&lt;T&gt; to prevent boxing when storing structs in a dictionary or similar data structures. Finally you might want to look into inclining code, you can hint that the compiler should agressively inline certain functions if you tag them with the corresponding attribute. With this you have to be especially careful to profile!
This is not idiomatic C#. Instead you should use the object initializer syntax: Thing thing = new Thing() { Min = 0, Max = 17, Filename= "filename.txt"}; *** Or you can use the "builder pattern" with a fluent interface. Thing thing = ThingBuilder.Min(0).Max(17).Filename("filename.txt").Create(); This pattern is great for creating bunch of objects that have a lot of properties with nearly identical values. You can set all of the fields on your `ThingBuilder`, call `ThingBuilder.Create()`, then change one value and call `ThingBuilder.Create()` again. Repeat until you have all the copies you need. *** That said, when working with immutable objects I do use the pattern you showed with a minor tweak. Thing thing = new Thing().WithMin(0).WithMax(17).WithFilename("filename.txt"); The `X.WithY` is generally interpreted to mean "I am giving you a copy of `X`, but with property `Y` changed as indicated.
What i the value of lineC + lineA Also, it might be better just to cast it to int like `(int) (lineC + lineA)` *instead* of doing a `Convert.ToInt32(lineC + lineA)`
also you can turn any number to a string with something like totalScore.ToString()
That worked but now it goes into the negatives
&gt; No one is typing this in to the address bar Appraently you've never seen any print advertisments. 
How do properties differ, in practice, from optional constructor parameters? The compiler certainly doesn't *require* that I initialize a writable property when the object is created, but it *will* require that I give it a value for a (non-optional) constructor argument.
Use the debugger and put a breakpoint in the method and see if you values are being converted correctly and the formula is doing what you want it to do
Just because YouTube gets away with it doesn't mean its a good practice to have. And while they are stuck with that for video ids, other URLs on YouTube such as https://www.youtube.com/ChannelName are not case sensitive. 
P.S. The difference is 10 characters, not 14. The dashes are optional.
No, they would just print the blue ‘click here’ link. :-p
This video was my first watch of your series so can't say. 
Ok, I see, duly noted :). 
&gt; The character set used for base64 is url safe While the character set is safe, the problem is in how it is interpreted. With a normal GUID, which is also "url safe" from a character set perspecitve, you eliminate the issue of case sensitivity. Which means its less likely to be problematic in situations where you need to manually type it from print media, product packaging, water marks on images, screen shots, etc. So while I was technically using the term "URL safe" incorrectly, it's still a bad practice to use case-sensitive formats. Especially when the upside is an inconsequential reduction in URL length. 
I'm interested to see that the compiler complains at `d.DoSomething()` instead of in the definition of `class D`. What if I have public static void DoSomething(IA a) { a.DoSomething(); } how does the compiler know to complain? `D` might not even be imported in this file.
Can you retrain it to spit out Jordan B. Peterson motivational wisdom?
It’s not a bad practice just because you don’t like it. 
I got confused. Can you explain again?
Correct. It is a bad practice because it has negative consequences in the real world. 
As long as an object is using your interface it can consume any implementation of it
There will be no error in class E. It will just call IA.DoSomething() with no problem. The error will be reported in class D, since class D doesn't implement IA.DoSomething(). Remember that class D has automatically implemented IB.DoSomething() and IC.DoSomething(), but there was nothing about IA.
What kind of computer are you running? I have found Visual Studio is awful on laptops due to LPDIMM cas latencies, especially with R#. YMMV.
Desktop, SSD, 32 GB RAM
Most serialization libraries suffer from poor start-up times, since they need to build and cache parsers for types. Your benchmarks do not seem to directly measure the build-and-cache phase of these libraries, but is that what benchmarking a single object is intended to get you?
Have you looked at Bond.CSharp which is what Microsoft uses firm-wide?
While you benchmarked CoreFX, what about native AOT compilation? Does that change who the big winner is?
I presume you’ve never written C or lower level code. Please do and your readability will improve. You will quickly see that HasValue can have many meanings whereas Null and Empty String are very specific states. 
Can you paste your [userbenchmark.com](https://userbenchmark.com) score please?
That's not an encoding - he means UTF8, UTF16, ASCII, etc. (I *suspect* you will want to use UTF8.)
Yeah, that's the spirit!
I did use UTF8, and I got something like 8???F5??2 What’s with all the question marks?
Then shortening them a few bytes is even sillier.
This article mentions abstract classes and the trait pattern, but I usually see this pattern implemented with extension methods on interfaces. Extension methods on interfaces seems like a better solution as well. The only thing you're missing is the ability to override the behavior.
For a regex version of this... something like this: &amp;#x200B; `string input = "123-456-7890";` `Match m = Regex.Match(input, @"^\d{3}-\d{3}-\d{4}", RegexOptions.IgnoreCase);` `if(m.Success)` `{` `Console.WriteLine("Valid Phone Number");` `}` `else` `{` `Console.WriteLine("Invalid Phone Number");` `}`
When you convert your string to UTF8, you'll have a byte array (not human readable, so I don't know where this "8???F5??2" is coming from). The next step will be encrypting that byte array - that's the hard part. At that point, it might make sense to convert the encrypted byte array to base-64; you do that with Convert.ToBase64String.
Oh, thanks
This doesn't stop the programmer from miscalculating the index and sticking a hat in front of it
I was replying based on the other poster's reply, but now that I really look at your question, why don't you just have your C# code talk to your web server using ssl/https? You don't need to reinvent ssl by manually encrypting your data.
UserBenchmarks: Game 58%, Desk 65%, Work 44%
Can someone help with this one? Taking the example from the article and changing it a little, what happens in the following scenario: interface IA { void DoSomething(); } interface IB : IA { void DoSomething() = Console.WriteLine("I am Interface B"); } interface IC : IA { void DoSomething() = Console.WriteLine("I am Interface C"); } public class D : IB, IC { } static void Main() { IA x = new D(); // Unlike the original, I'm up-casting to the grandparent interface x.DoSomething(); // Which version of DoSomething gets called? }
I’m using something like website.com/login.php?username=testuser&amp;password=[encrypted password] there’s has stuff but if somebody could see this request and it wasn’t encrypted then they could see the password in plaintext, which is obviously a security flaw 
IA.DoSomething() will be called. The 'default implementations' will be like explicit interface implementations, on that you have you cast or be used the exact type to access the method. So here excuse you use IA as they type and there is no suitable instance method on the object (that is secretly D) it will use the default implementation on the type it is currently considered, I hope that makes sense 
Yes, some stuff is hard to get over if you've used it for years. I can live with most of the annoyances but there's help for at least two of those you listed: &gt; Intellisense doesn't suggest methods not currently imported with using [IntellisenseExtender](https://github.com/Dreamescaper/IntelliSenseExtender) will help with that. &gt; Autoformat line after typing ; Tools &gt; Options &gt; Search for "automatically format" or go to Text Editor &gt; C# &gt; Code Style &gt; Formatting &gt; General ---- I've also listed in other comments a few extensions I'm using: 1. [Roslynator](https://github.com/JosefPihrt/Roslynator)-NuGet-package 2. [Inheritance margin](https://github.com/tunnelvisionlabs/InheritanceMargin) 3. [IntellisenseExtender](https://github.com/Dreamescaper/IntelliSenseExtender) 4. [StopOnFirstBuildError](https://github.com/einaregilsson/StopOnFirstBuildError) 5. [CodeMaid](http://www.codemaid.net) (no Spade, that's too slow) 6. [ToggleComment](https://marketplace.visualstudio.com/items?itemName=munyabe.ToggleComment)
Suggest it for 8.1
Wonderful, thanks! I'll look into those tomorrow :)
Not sure if it's my phone but I can't read shit on your picture of the code
You could just post the link. Those are not good scores for Visual Studio. That said, here is my work machine benchmark: [https://www.userbenchmark.com/UserRun/14808981](https://www.userbenchmark.com/UserRun/14808981) Pay attention to the memory kit stats. Compare yours to mine. My home machine is in the top 0.1% of all machines, so it's useless to use it as a comparison as it can literally handle large data science projects.
Hm. Might be your phone but I'll include the code in the post just in case. 
See my edit. You can already override the behavior of extension methods.
Can't you just use IsNullOrWhitespace () ? That checks for empty or whitespace strings too
What's the difference between toggle comment and Ctrl + k,c (comment) Ctrl + k,u (uncommented)
That's what its doing internally, but its easier to call it on the string, rather than call a static method. Also, my method returns the string, rather than a bool.
VALUES not VALUE
The, "VALUES" gave me the message I am looking for that it inserted however it didn't go into my Access DB.. Is it relevant to what you mentioned after my typed error?. If that makes sense?
But there is no definition of IA.DoSomething. Only IB and IC declare a definition of DoSomething.
Yes correct. I **think** it would fail to compile
I mean the error is a syntax error from the SQL provider, meaning there is a syntax error in the SQL statement. Also the parenthesis you had are fine, sorry insert statements generally look like INSERT INTO *table (column1, column2, ....* ) **VALUES** (*value1, value2, ...*) The only problem you had was making sure you had VALUES instead of VALUE, I think
No you can't.
Ohhhh.. and yeah that's the rule I was following the: INSERT INTO table(column1, column2,...) VALUES (value1, value2,...) I don't know if it's not inserting because I'm missing something (which I can't see that being the reason because I tried looking up how to insert into DB (even though I didn't notice the, "VALUE" which should've been, "VALUES") so I'm guessing it's either logical or it isn't connecting to the DB or there's a problem with the DB itself or something.. I'm so confused and stressed over this. 
I'm referring to the definitions under the "The Diamond Problem" heading. In that section, IA has no default definition for DoSomething. So when you say "It will just call IA.DoSomething() with no problem", will it print "I am Interface B" or "I am Interface C"? The way the article is written, it seems to suggest that the error will occur at `a.DoSomething()` in my example, _not_ at the definition of `class D`. &gt; Now if in my main code this happens: static void Main() { var x = new D(); D.DoSomething(); } &gt; This will throw a compilation error. The error will be that the compiler cannot infer which method to call and throws an error because no specific method was found. I assume that the example has a typo and means `x.DoSomething()` because otherwise the example wouldn't demonstrate anything about the diamond problem at all.
Not what I was suggesting. public class Thing : IThing { public void DoThing() { Console.WriteLine("Class"); } } public interface IThing { } public static class ThingExtensions { public static void DoThing(this IThing instance) { Console.WriteLine("Extension"); } } class Program { static void Main(string[] args) { Thing thing = new Thing(); thing.DoThing(); Console.ReadLine(); } } The extension method is the default interface method, which you can override by implementing the same signature in the class itself, just like the default interface method proposal. 
In your example for The Diamond Problem, you define the following types interface IA { void DoSomething(); } interface IB : IA { void DoSomething() = Console.WriteLine("I am Interface B"); } interface IC : IA { void DoSomething() = Console.WriteLine("I am Interface C"); } public class D : IB, IC { } then you write &gt; Now if in my main code this happens: static void Main() { var x = new D(); D.DoSomething(); } &gt; This will throw a compilation error. The error will be that the compiler cannot infer which method to call and throws an error because no specific method was found. I assume that `D.DoSomething();` is a typo and should read `x.DoSomething();`, otherwise the whole thing falls apart. This suggests to me that the compiler issues an error when it compiles Main, _not_ when it compiles `class D`.
I feel like I'm missing something here. If this is a runtime thing, I don't understand the difference between abstract classes and interfaces anymore (besides multiple inheritance I guess?). But the it's a little confusing as to which method is actually called and it seems like the object needs to be cast to the interface to use the default impl. If this is a compile time thing, like the impl is copy/pasted into each implementer, it doesn't help the problem if "interface versioning" (the fact that adding to an interface is a breaking change). Sounds like it's a runtime thing to me which I think will just cause more confusion than anything else. `Foo.Bar()` might fail (compile or runtime?) while `((Baz)Foo).Bar()` might be just fine. I guess this is the same as explicit implementations, but I'd argue that's also confusing when overused.
Then you don't get dynamic dispatch on a `IThing` object, which will always resolve to the extension method call, ignoring any "overrides" in it's actual class. Again, missing the entire point.
&gt; Can't see the use of ToggleComment, that is a built-in VS feature. Why an extension for that? I actually don't use it, but I found that extension recently for another R# user who was missing that feature. And no, it's not built-in. VS has Ctrl-K Ctrl-U/C and my muscle memory has no problem with it, but Ctrl-/ is a more comfortable.
No difference except convenience.
executeNonQuery returns the number of rows affected, check what that value is. For your insert it should return 1.
Well the SQL \*looks\* correct, other than the VALUES thing. What is the error you are getting now?
What numbers are you putting in? If your numbers are too big they will overflow (tip over their max value and go to their minimum value) and go negative. Try using a long instead of an int. 
Put a breakpoint on line 185 (ExecuteNonEuery). When it hits inspect the variables carMod, carCol, etc that you are inserting to make sure you are not inserting an empty row from having empty variables. 
I'm not getting any error.. It shows the MSGBOX , "Data has been entered into the database"
That's good right, esp. if (as u/Mirmi8 says) if the return from ExecuteNonQuery is a 1.
How should I check?. I've checked by printing out the inputs via MSGBOX (shows correct information) I check the Access DB and everything correct there
I'm not missing the point, I'm addressing the specific scenario of adding functionality through default interface methods. 
It is not for me to judge what some people do in the privacy of their homes :)
Store the result of the executeNonQuery in a variable and log that variable either to the console or to the msgbox
Not sure if you can see it but this is what I got when doing what you said.. Doesn't seem to have any problems?: &amp;#x200B; [https://imgur.com/a/vSDJQeD](https://imgur.com/a/vSDJQeD)
Some C here: ``` const char * s = "something!"; char zeroCharacter = s[strlen(s)]; // Returns '\0' char lastCharacter = s[strlen(s) - 1]; // Returns '!' ``` 
Also: public static string Or(this string s, string other) { return String.IsNullOrEmpty(s) ? other : s; } Allows for super readable fallback chains: s.Or("Second").Or("Third");
You're not adding any dynamic dispatch though, which is very much a point of passing around `interface` objects. Your method *always* calls the default implementation on one, default interface methods resolve to an override at runtime if one exists. So to say that "this feature is almost completely redundant and unnecessary since it has less functionality than extension methods" is pretty disingenuous.
Here is some sample code to play with: static void Main(string[] args) { const string databaseFileName = "AccessTestDatabase.mdb"; var connectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=AccessTestDatabase.mdb;Jet OLEDB:Engine Type=5"; //Create a database file if it doesn't exist //Requires "Microsoft ADO Ext. 6.0 for DDL and Security" if (!System.IO.File.Exists(databaseFileName)) { var cat = new ADOX.Catalog(); cat.Create(connectionString); } //Create a DataSource. //Requires the Tortuga.Chain.Access NuGet package. var dataSource = new Tortuga.Chain.AccessDataSource(connectionString); //Create a table if it doesn't exist. try { dataSource.DatabaseMetadata.GetTableOrView("Car_Information"); } catch (Tortuga.Chain.MissingObjectException) //create the missing table { var tableSql = @"CREATE TABLE Car_Information ( ID COUNTER PRIMARY KEY, Car_Manufacturer TEXT(30) NULL, Model TEXT(30) NULL, Colour TEXT(30) NULL, Petrol BIT NULL, EngineSize FLOAT null )"; dataSource.Sql(tableSql).Execute(); dataSource.DatabaseMetadata.Reset(); //need to reset after adding/altering tables } //Holder for the values to be inserted var model = new { Car_Manufacturer = "Ford", Model = "V70", Colour = "Green", Petrol = true, EngineSize = 4.8 }; //Insert a record using the ORM dataSource.Insert("Car_Information", model).Execute(); //Show what the SQL looks like Console.WriteLine(dataSource.Insert("Car_Information", model).ToInt32().CommandText()); //Insert a record using the SQL var insertSql = "INSERT INTO [Car_Information] ([Car_Manufacturer], [Model], [Colour], [Petrol], [EngineSize]) VALUES (@Car_Manufacturer, @Model, @Colour, @Petrol, @EngineSize);"; dataSource.Sql(insertSql, model).Execute(); //Insert a record using the SQL and raw ADO using (var con = new System.Data.OleDb.OleDbConnection(connectionString)) using (var cmd = new System.Data.OleDb.OleDbCommand(insertSql, con)) { con.Open(); cmd.Parameters.AddWithValue("@Car_Manufacturer", model.Car_Manufacturer); cmd.Parameters.AddWithValue("@Model", model.Model); cmd.Parameters.AddWithValue("@Colour", model.Colour); cmd.Parameters.AddWithValue("@Petrol", model.Petrol); cmd.Parameters.AddWithValue("@EngineSize", model.EngineSize); cmd.ExecuteNonQuery(); } }
Don't be overexcited with extension methods. They may change the expectations from 'I know what will happen here' to 'it depends...' and change your debugging experience to worst one ever. Simple example String foo=null; foo.IsNullOrWhitespace(); What do you think will happen here at runtime? Within a language semantics one would expect NRE (null reference exception) here and it's NRE 101. But in your code overloaded with magic the answer is 'it depends'. Now you need to remember and recall whether you included extension or not in this codebase. It's as sharp as operators overload. Can be great but usually a nightmare to read in code review or a month later after you wrote it. Peace, and let null.IsNullOrWhitespace(); never give you the true...
&gt;executeNonQuery Stored the executeNonQuery into an int and it returned 1?
*facepalm* Do you understand the concept of context when having a conversation with another person? I specifically talking about the scenario of inheriting interfaces solely to inherit functionality. I am explicitly **not** talking about passing interfaces and dynamic dispatch. But, since you're hell bent on changing the topic, I'll offer my pitch for dynamic dispatch. public static virtual void DoThing(this IThing instance) { Console.WriteLine("Extension"); } Adding virtual to an extension method would add dynamic dispatch. This would have several benefits over default interface methods. * Extends the system people already use for this purpose. * Can be used even if you don't own the original interface. * No new syntax. 
[You can see Mads Torgersen and Jon Skeet demo it and explain the reasoning here](https://youtu.be/HW_FnmnDlGQ?t=3279)
&gt; I've done something similar, but just used the same name. `!myString.IsNullOrWhiteSpace()` I imagine just about every .Net code base has `bool IsNullOrEmpty(this string s)` etc. extensions. Have to agree with /u/CWagner.. The way the author went about it is just, like, pants on head kind of logic though.
You should take a look at QmlNet: https://github.com/qmlnet/qmlnet Your gui will run at native speed, while all your business logic is .NET. I like this approach. C# is much better suited for business logic than C++, IMO.
&gt; I hope you'll agree doing a similar method for each possible use of the ! operator is absurd and unrealistic... Of course, but some things like If/IsNotNull[OrEmpty/WhiteSpace] are so common that I completely agree with making a slightly more readable version.
&gt; I just double checked, and you can override the behavior of an extension method by simply implementing the same signature, Yes, but that's not the preferred method. Consider this code: IFoo x = new Bar(); x.Boom(); At compile time you don't know that x is a `Bar`, so it won't use the override. *** For the better answer, consider the `IEnumerable.Count()` example. The 'correct' way to override this is to implement an optional interface (`ICollection&lt;T&gt;` if I recall correctly). The `IEnumerable&lt;T&gt;.Count()` extension method will check for this interface. This way you get the exact same behavior if you call the extension method or the real method.
It is actually a very important point. We need consistency.
You can use QmlNet with .NET Core to write guis for Mac/Linux/Windows. https://github.com/qmlnet/qmlnet
Yes you can, just not in the way he was suggesting. You need an optional interface that the extension method can check. https://www.reddit.com/r/csharp/comments/aryz0q/c_8_default_interface_methods/egr6v7t/
Indeed, this would only apply to using interfaces as a means of inheriting functionality. It doesn't solve dynamic dispatch with extension methods. Personally, I think they should add the ability to have dynamic dispatch with extension methods.
It returned, "1" but it doesn't change a thing that it isn't inserting into the DB &amp;#x200B;
I agree that we need consistency, which is why I think they should extend the functionality of extension methods instead of adding a whole new thing that's similar but different.
&gt; If this is a runtime thing, I don't understand the difference between abstract classes and interfaces anymore (besides multiple inheritance I guess?). Abstract interfaces are effectively abstract classes that... 1. Store state in a `ConditionalWeakTable` instead of private fields 2. Support multiple inheritance 
&gt; Within a language semantics one would expect NRE (null reference exception) here and it's NRE 101. But in your code overloaded with magic the answer is **'it depends'**. *Maybe* a variable has a value, *Maybe* it doesn't ;) Of course, if it's maybe too late in your project to introduce that concept formally, this is one of the extremely useful features of extension methods. I certainly prefer a little out-of-the-norm behavior that has to be remembered or reminded over explicit null checking all over the place.
If you add a new entry in the interface, all classes that implemented the interface will stop compiling. Now, add a default implementation. The dependent classes compile again. -&gt; problem solved
&gt; Sounds like it's a runtime thing to me Yes, definitely. But get this. 1. .NET Framework is not getting runtime updates. 2. Which means that .NET Framework cannot use this feature [1] 3. Which means that .NET Framework will not (and probably never will) fully implement C# 8 [1,2] 4. .NET Standard is getting this feature in the next version 5. .NET Framework cannot implement new versions of the .NET Standard. [1,4]
Yes, do agree with that point.
Especially since people already use extension methods extensively for traits. Adding dynamic dispatch to extension methods would be a far more elegant solution than this proposal and it would make extension method functionality a superset of default interface methods.
Well it inserted something somewhere... doing a select on the table doesn't show any records?
Is there a reason that you're trying to do it by string manipulation? Or is it a constraint of the exercise?
The pic shows the engineSize to be 2.2. What you want to do is follow the data to debug this. In Access, query the table with ID descending and note the highest ID value. Run your program, hit your bp, inspect the variables, remember the values being inserted and let the program finish. Query the db again. As each row is inserted, the ID column automatically increments. Does the ID increment and are the expected values in the row with the highest ID? 
By .NET Standard you mean .NET Core. Standard isn’t a runtime. 
I don't know how access works but in SQL your executenonquery would fail due to the parameter names in the query not matching the parameter names you add below. You are mistaking column names with params. The idea is to declare tne query and the parameter names (which you did), then take those parameters and add with values. 
No, the compiler does not require you to initialize anything but that's the point - since it's optional the object state should be valid either way. It's all about clarity. We have the nice sugar of object initializers - we should use it instead of constructor calls with endless arguments. Yeah, they are not equal, only through a constructor can you have a truly readonly property, but in most cases that's not an issue.
First, set up the mappings as a dictionary: `Dictionary&lt;char,char&gt; mapping = new Dictionary&lt;char,char&gt;() {{'d','g'},{'a','d'},{'x','a'},/*a couple dozen more*/};` This will get rid of the stack of one-off string.Replace() calls and allow you to generalize the changes (even if you just did string.Replace in a loop, you could still use the mapping to simplify it down to be more generic). Next, convert your source string to a char[]: `char[] newChars = oldString.ToCharArray();` This will make the "string" into an editable array of characters. Since there's no need to add more characters, you don't need to worry about the size of the array. Simply copy what's already in the string, and work with that. Now, you can use a for-loop (*not a foreach loop!*) to change each character in the array without allocating a new string each time you make a change: `newChars[x] = mapping[newChars[x]];` You'll want that for-loop to pay attention to the newChars.Length to make sure it doesn't go past the end of the array and throw an out-of-bounds exception. Then, to finish it off, you just turn the char[] back into a string: `return new string(newChars);` So you'll have the original string, and the new string, and no other allocated strings. You only need one pass. You can make this more efficient if you make the mapping dictionary `readonly static` and only build it once during initialization of whatever object contains this code. But this already removes the crazy number of string allocations you're doing in your example. Each time you do string.Replace(), it's making a new instance of your string, because strings are (mostly) immutable. Editing it as a char[] allows you to edit-in-place, which is more efficient. But if this is a school assignment that requires your use of string.Replace(), you can still do it that way...
I mean the .NET Standard is a specification. Saying that the specification is getting this feature outlined in the next revision isn't necessarily wrong.
Intent. Certainly if you're just making a POCO with get;set then constructor parameters are redundant, but if you intend internal logic or dependencies then a constructor argument being required clarifies a lot, as opposed to a set property you're expected to set after construction. &amp;#x200B; The compiler certainly doesn't require that I initialize a writable property when the object is created Because properties can get their data from anyhwere. A field is a plain data container, a property can do all sorts of fancy logic - it's get;set are method calls.
Try adding an index to the tags column. Also, compare the EF query execution time and a plain SQL query time. Maybe EF's query isn't optimal.
&gt; Anyway, this suggests to me that the compiler issues an error when it compiles Main, not when it compiles class D. No. It issues an error compiling class D. The class D still doesn't have the IA.DoSomething() method implemented, even if IB.DoSomething() and IC.DoSomething() exist. There's no way for the compiler, while compiling class D, to know which of these two to use for the implementation of IA.DoSomething().
A constraint of the exercise, unfortunately 
Step 1, determine what the query actually is. This means dumping the SQL. Step 2, check the SQL for obvious mistakes such as copying the whole fucking table to the application before filtering. (Yes, EF Core will do that when it gets confused if you don't disable client side processing.) Step 3. Dump that SQL into your database and check the runtime. Find out if this is a DB or EF issue. Step 4. Look at the execution plan. (If SQL Server it may even recommend missing indexes.) If you are still stuck after step 4 let us know. 
It's more a convention, but it boils down to not being user friendly. URLs are built around being easily read, written, and interpreted by a human being. GUIDs are none of those things. To a much smaller degree, it's also a potential security concern to expose an internal identifier, and use it externally. In our environment, that's a potential issue, so as just one added layer of security, we use separate identifiers externally that do not compromise human readability.
Something being common does not mean it's good practice. Who is the person your URLs are intended for? I would argue that they aren't for programmers or servers, but for an end user. Because of that, they should be made easily usable by that group, and GUIDs do not fit that criteria. 
Just looked at the console, there hundreds (or thousands) of these: &amp;#x200B; Microsoft.EntityFrameworkCore.Database.Command[20101] Executed DbCommand (0ms) [Parameters=[@_outer_Id='?' (DbType = Int64)], CommandType='Text', CommandTimeout='30'] SELECT [mg].[TagId] FROM [MediaTags] AS [mg] WHERE @_outer_Id = [mg].[MediaId] Not sure what's going on but I think EF is checking the entities one by one!
Yes, and they are super useful for a number of applications. Maybe it's something that's been enforced by relatively few employers, but the convention I've run into is to keep GUIDs out of URLs that are meant to be used by an end-user whenever possible. This is done mostly as a way to keep them more easily usable and accessible to the target, and to a much lesser extent a security concern about letting internal identifiers become public facing.
An end-user shouldn't be doing a lot of things, but they always will do everything they shouldn't do, and much more.
WCF is the goddamn devil. Of course I am jaded by a SOAP project we maintain with some defined industry standard with the worst WSDL and security requirements ever.
That's what I mean. When the article says "This will throw a compilation error" right after a place _other_ than where the right place to have the error, I ask for clarification in the comments 
I am a 2nd year student located in Berlin who is interested in a part-time job either working with Xamarin or Asp.Net core. I have 3 years of professional .net development under my belt (started working during highschool) and have been an avid contributed to different open source projects such as XUnit, Xamarin.Forms, Autofac and Xamarin Essentials, so chances are you are already running code written by me if you are using either of these libraries. Working remotely is a possibility for me as well. I would be especially interested in work with a requirement for high-performance software, not just simple forms over data applications. Other than C# I am also proficient in Java or C++, if that is a secondary requirement/nice to have. You can contact me via a private message on Reddit to exchange contact information.
Wow, that's a new one on me. I shouldn't be surprised, but I am. *** So exactly what you are trying to do? 1. Search for records with ALL of the tags 1. Search for records with AT LEAST ONE of the tags 
You're only embarrassing yourself and digging a deeper hole for yourself. Just accept you were wrong and move along. 
A library specification, though. This is a language feature with runtime support. We don’t know whether or not netstandard will include use of it. 
Argument exceptions in private methods? No way man. Get rid of those. 
Wrong about what? We're debating the merits of a new feature.
The author made a very contrived example. For it to work the way he intended, he should have ditched the definition of IA completely. Then we would have the issue where class D compiles correctly but Main doesn't know which implementation to use for x.DoSomething().
Yeah maybe you think you're involved in a "debate", but he's mopping the floor with you. 
Interesting question! Indeed, for pretty much every scenario I can imagine myself using a serializer for, the startup time/memory/anything is more or less irrelevant. I actually never even thought much about use-cases where the startup time is important. Probably some sort of desktop application? Maybe it needs to load some sort of config or settings before it can even start? So unless the startup time becomes crazy-high (1sec+) this isn't even on my radar. If you have any scenarios other than "desktop app loading its settings", I'd be interested in hearing about them! 
Thanks! 
That seems overly complicated. It might be querying the db for every tag, but I don't know EF. ADO.NET is the bomb. You should be able to use SQL instead. Add your input tags into the predicate using the where clause to get your entities. Select column1, column2 from entities where Tag ='value' OR Tag='value1'; https://docs.microsoft.com/en-us/ef/ef6/querying/raw-sql
Any scenario where the amount of distinct types being serialised is very high would incur a large startup performance hit as far as I can tell from the code. On a project I worked on earlier we relied heavily on runtime type generation which in turn would be serialised, so I could see that coming up there as well.
Most AOT runtimes don't support dynamic code generation, right? At least Unitys "IL2CPP" does not (even though they have added an interpreted mode for expressions in the newest version!). Although there are ways to work around that. Pre-generating all dynamic code; or falling back to reflection if possible. That being said, I have not tried it. I know that msgpack has a code-generator that you can feed some types and it will generate .cs files. I have the same kind of approach on my todo list for Ceras, but it's pretty far down for now :P Do the other serializers have some sort of support for AOT? I should probably investigate that... 
But it doesn't do the same thing? Can you call an extension method on null?
I love traits. Totally wish C# had those.
I'm aware of it, yes. But I'm not sure I understand. Does it have some special performance tricks? Bond however does solve a different problem (a very closely related one, but still). 
But the problem is that you can't define the method in an interface and then **not** define the method in the implementation. If you expect the method to exist on the interface, only exposing it as an extension method will break the entire concept of interfaces. I would then need to somehow know that interface functionality is exposed via extensions. That's bad for transparency.
It **will** fail to compile.
Noooooo, extensions are bad (IMO).
&gt;Can you call an extension method on null? Yes. It's one of the weird parts of C#. It won't even throw a NullReferenceException, that code is very correct, but also very smelly. While I do in the general case agree with trying to formulate conditions positively (human mind is better at reading those), this goes too far, and has too little value.
Scala has a compiler error here: ``` trait IA { def doSomething(): String } trait IB extends IA { def doSomething(): String = "b" } trait IC extends IA { def doSomething(): String = "c" } class D extends IB with IC val x: IA = new D() val something = x.doSomething() ``` errors with: ``` Error:(11, 8) class D inherits conflicting members: method doSomething in trait IB of type ()String and method doSomething in trait IC of type ()String (Note: this can be resolved by declaring an override in class D.) class D extends IB with IC ^ ```
The feature will be enabled by the compiler detecting a field on the `System.Runtime.CompilerServices.RuntimeFeature` class. If the field isn't available, the compiler will disable the feature. So once netstandard adds the field, then all runtimes that implement that netstandard version must implement the feature to be compliant. So netstandard doesn't have to use the feature to define which runtimes must implement the feature.
We do know. The next version of .NET Standard will include this feature, but it won't use it in any BCL classes. That way language designers have a chance to catch up and they can see how it gets used in third party libraries before taking the next step of requiring all languages to support the feature. With runtime support you only prevent runtime breaking changes. You still get compile time breaking changes unless the language is updated to honor the new semantics. 
Just place the extension method in the same namespace as the interface. Then both get loaded at the same time. I think EF was doing this a lot. And it's the only sensible option for adding methods to enums.
I've been digging into TPL lately and it's sometimes a bit difficult to tell where certain libraries are appropriate. Would you say this is a good fit for Rx or TPL Dataflow?
"lineA" is being calculated as NaN. Split up your calculation of lineA to see where your numbers are going wrong. 
What's convenient about it?
If netstd doesn’t use the feature and doesn’t require it, how is it “included”? That said, with netframework not conforming to netstd &gt; 2, the distinction between it and core becomes less important.
I personally wouldn't write it like this, but, neat.
Abstract classes store state, and can have private or protected methods. Interfaces have no state, and no private or protected methods.
jkortech already answered that question for you.
You could use Sasa.Rewrite to weave static IL, thus converting dynamic code to static code. With Roslyn, it may even be easier. My suspicion is based on how "abioc" cheats Daniel Palme's benchmark by generating a giant switch statement to evaluate what type to retrieve from the container.
This exact scenario is what Bond is very good at. Consider Azure Functions, which I believe Microsoft now uses a lot of. See the Bond performance guidelines, where they suggest statically caching the Serialize/Deserialize/Transcoder logic: [https://microsoft.github.io/bond/manual/bond\_cs.html#performance](https://microsoft.github.io/bond/manual/bond_cs.html#performance)
You can read more about Bond's performance optimizations in : [https://microsoft.github.io/bond/manual/bond\_cs.html#performance](https://microsoft.github.io/bond/manual/bond_cs.html#performance) &amp;#x200B; Saying it solves a different problem is rather misleading. That's like saying you can't learn anything from the fastest JSON serializer/deserializer, or the fastest IoC containers, or from learning the difference in CS 101 between a hash table and linked list.
Have you tried profiling what instructions get executed the most often and using PerfView to visualize the instruction combinations? This would be VERY interesting, especially across libraries...
Did you mean the ArgumentNullException? I throw that there so I don't have to rewrite it for every public method/constructor that has the byte[] parameter. Is there a disadvantage that I missed?
Step 1 - Buy a bottle of scotch Step 2 - Convert everything to OPC UA Step 4 - Realize it was all a dream and now you have a huge hangover.
You're gonna need a lot of alcohol and a helluva lot of aspirin. Have fun. 
From a fellow autodidact, keep going, you'll get there :).
SIMD could give you speculative execution speedup if you use SIMD the same way web browsers parse XML based on the work done by Leo Meyerovich. In other words, you can use SIMD to create a bitmap filter to match attributes against in your Parser phase. Just thinking out loud. Probably won't work. 
You are kidding, right?
Have you looked into using the new Span&lt;T&gt; class? It's available in a nuget.
Totally not what you asked for, but: looks like those Math.Pow could be calculated once, stored in a variable, and then used. If you're looking for more performance.. Also, you should look into using Double.TryParse(), especially when dealing with human inputs.
Bob Tabor is the best to teach C#, AFAIK. Check out his series of videos made for Microsoft Academy. https://youtu.be/r_5P6GVYJpY
The printed copy of the **.NET Framework Design Guidelines** is essential. This is the book that explains why the .NET libraries are written the way they are.
Alright, I’ll take a look asap. I kinda have to know the basics in like 5 weeks. 
Fantastic, I’ll take a look. Thank you so much! 
Fair warning, the online version just has the rules. You need the physical book (preferably 2nd edition) for the discussion behind the rules.
Try sololearn on your phone. Udemy have some great courses too. I got one from Denis Panjuta called complete C# masterclass. I also got a book called C# for absolute beginners from Apress. All of them have been really helpful. I only started C# since a month but I have learned a lot from those ressources. I am waiting to finish the book and the last cha
Uh, okay. Any other books you’ll like to recommend? Online classes? 
Analgorithm
How about using a join (I'm on mobile, forgive me. (From t in tags Where searchoptions.tags.contains(t.text) Join e in entities on blah Select e).distinct() This way you filter the tags first and get their entities
For work, a class or something else?
For work. 
Good question; Pluralsight is hands down the best resource, and is what companies in the industry will often supply for staff members for on job training. Here's a C# learning path that I can personally vouch for (updated videos over the last year notwithstanding). https://www.pluralsight.com/paths/csharp
Do you know anything other than Python? C# is pretty similar to Java in a lot of ways. But Bob Tabor is definitely someone I recommend as well, and the Brackeys channel on YouTube has a decent crash course as well.
When I tutor people, I have them get this book: https://www.amazon.com/Beginning-Object-Oriented-Programming-Experts-Voice/dp/1430249358/ref=sr_1_3?ie=UTF8&amp;qid=1550552743&amp;sr=8-3&amp;keywords=expert+C%23
For now all I know is python, SQL, html, css, jqery, and JavaScript. 
JavaScript is similar enough that you will catch on with the other things you know, it's not too bad. There are a few quirks, things like properties and interfaces, but the syntax will be similar.
Alright cool, I can usually learn pretty fast so am banking on that to keep me from getting fired on my first day. Ahaha
I know most of the things that you do at least a little, and C# is without question my favorite language of them all.
I really like python but I have no use for it at my current position. Maybe, letter I’ll find some use for it. I’m hoping I’ll fall in love with c#. I like what I’ve seen and learned so far. Thank you all for the kind replies. 
[UdpClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.udpclient?view=netframework-4.7.2) Additionally, you can use raw sockets with Udp as a protocol type.
A simpler shortcut that combines two more complex ones is convenient to some people.
I have met this dude. Very smart and this product is great.[https://dannagle.com/packetsender](https://dannagle.com/packetsender)
Or just implement it, and keep interfaces as contacts not implementation
The reason your being downvoted is that interfaces are all about virtual dispatch and extension methods cannot do virtual dispatch. Just adding a "virtual" keyword to an extension method's signature doesn't solve the problem. &gt;* Can be used even if you don't own the original interface. The above quote highlights one of the major problems with your proposal. Extension methods are just syntatic sugar for run-of-the-mill static method calls. Since anyone could define a "virtual" IThing.DoThing() extension method, how would you decide which IThing.DoThing() extension method gets called when there are several? That's a pretty important thing to figure out for a proposal claims to support virtual dispatch. You could modify change your extension method proposal to tie interface extension methods to specific concrete types. But at that point, why not define the method inside the concrete type definition? Oh right, that's exactly what you do to override default interface methods. Extension methods as they exist today halfway solve the problem where an interface author wants to add methods to an interface that doesn't break existing interface implementations. The problem is that these static extension methods cannot be overridden by interface implementors.
I think if it was upcasted to IA it would still not compile
Netcat? 
Just read the official Microsoft documentation on C#. It’s going to be the most accurate and to the point. I don’t know why everyone loves having a slower way to learn the same thing. Watching video is such a waste of time.
yeah, imgur sucks on phones
I'm honestly thinking of taking up drinking while on Modbus. 
The problem with foo.IsNullOrEmpty() is the extension method looks like an instance member, and therefore it should behave like an instance member. In other words, if "foo" is null, you would expect a call to an instance member like foo.ToLower() to throw. Some consider this an abuse of extension methods because the behavior is not intuitive. Unfortunately, this - and it's cousin, IEnumerable.IsNullOrEmpty() - are found all over the blogosphere by Jon Skeet wannabes.
There is also a YouTube channel called angel six that does fantastic tutorials.
I like your idea. My application has written Modbus code but it's..uhh. Kinda spaghetti. If I had a bit more time I would roll my own too, but unfortunately it's pretty urgent...
Math.Cos expects its angle parameter as radians and not degrees...
If you avoid nesting by introducing early returns via negative checks this sentence is not true anymore. 
I have looked into the new `in` keyword + defining structs as `readonly struct` yes. But all I could use this for would be inside of Ceras' code. Any code in Ceras that uses structs is not a hot-path though. Maybe you meant the general case though, like changing the Serialize method in `interface IFormatter&lt;T&gt;` to pass the argument by reference (or `in`)? I have investigated that and found that the vast majority of serializations deal with objects instead of structs. And making the change so the value in `Serialize()` gets passed by ref is not free for reference-types. The double-indirection results in a measurable slowdown. If there was some way to use a different interface for some types that'd be the best of both worlds. I'll think about that! 
That sounds really interesting. What kind of project was that? What are those types getting serialized?
Any thoughts on what it would report as the issue?
&gt;Saying it solves a different problem is rather misleading. That's like saying... Sorry, that wasn't what I meant! I worded that really poorly!! &amp;#x200B; I completely agree! It's definitely worth studying other projects. I'll take a look at bond! &amp;#x200B;
Wow that sounds really cool, I'll have to take some time to really get to know Sasa.Rewrite. What do you mean by that though: \&gt; With Roslyn, it may even be easier. Like using roslyn (the csharp scripting library on nuget) to generate new code instead of using expression trees? 
The only tools I used so far were BenchmarkDotNet, and dotTrace. I knew PerfView existed, but I didn't know how advanced it is. Visualizing instruction combinations? That does indeed sound like it could reveal some things.
This title left me very confounded, thinking that MS announced a port of the R language to .NET.
I was looking for more diagnostic tools, to aid me. Thank you for your time though mate.
This looks like what I need, thank you. Do you know if this also intercepts packets, so I can view the packet as it goes to the server? Or do I need to run this on the computer that will receive the packet?
Thanks a lot! 
Well you didn't actually show us that code that does the call so how are we supposed to guess. The boilerplate you posted is irrelevant to the issue
Unfortunately I don't have anything I can share. But modbus tcp is very simple (especially the client side of things). So I'd estimate maybe an afternoon to implement something useful. Your milage may vary of course. Or get your McGyver mullet on and try to unspagghettify the existing stuff!
Haven't used any of those, but I would assume something like that might be a great way to bridge background data acquisition and UI.
Well it's a simple pattern-matching algo that uses a JSON script to define all the rules. If you examine the DOCTOR script included in the repo, you could just create a new script with your own rules and then point to that script file in the first arg of the ELIZA.NET main ctor. Anyone with a basic understanding of JSON and regex should be able to do it.
Ok, but the netstandard site on github defines it as “.NET Standard is a set of APIs that all .NET platforms have to implement.”, and doesn’t say anything about it including any runtime requirements at all. I still don’t think it makes sense to say that default interface members is coming to netstandard until it actually includes BCL interfaces which have them.
You could try to look into CoreRT: [https://github.com/dotnet/corert](https://github.com/dotnet/corert) I have not used it my self, but it sounds like it may be able to do what you want. I would suggest just to rewrite it in c++ or java though.
Still, it doesn't define the methods it's expected to have. I like default interface implementations for getting rid of that inelegance.
Stop posting this shit about that fucking retard.
Sorry, I very commonly see R# for ReSharper in here.
&gt; This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. From the PR that adds default interface methods to .NET Standard 2.1.
Interfaces remain contracts, even with DIM.
Probably ambiguous.
Are you that stupid you want me to post proprietary code for all the internet to see? Either way I doubt *you'd* have any clue about the problem even if I did post everything and risk my job in the process.
Why are we running this downvote game? Anyway, I see. I guess this is the first addition to runtime requirements in netstandard. I still don’t feel it will matter much as netcore will be the only runtime of interest. 
If "`ScanToRetinalyzeAndEmail`" does not perform any request, but the rest of the `ProcessScreening` method executes without an error, then obviously something in the `ScanToRetinalyzeAndEmail` method is wrong. But the magic glass balls are broken, so there's no way to tell what is wrong.
Lol wow. No need to be so hostile... usually youd write a basic example of HOW you did the call, not post the code itself. Plus the code to do a web call is going to be fairly standard I doubt anyone is going to steal it. Good luck getting help from someone who is psychic and can tell how you wrote your method just from the name. At least I know how to debug my code myself without crying to reddit to fix it for me - scrub
That is him. Apparently this "billionaire" is so desperate for attention that he has to spend most of his day spamming reddit.
Yeah, I'm aware. Chris Kelsey is one lonely pathetic fucker.
That looks really useful.
Holy shit this guy thinks he invented the wheel with his 'proprietary' code!!! That piece of crap doesn't even work!!! &amp;#x200B; And for your attitude i hope no one cares to help your sorry ass.
Great collection. Everything in one place, I like it!
&gt; Plus the code to do a web call is going to be fairly standard I doubt anyone is going to steal it. Good luck getting help from someone who is psychic and can tell how you wrote your method just from the name. If the code to do it is, to use your own words, "fairly standard", then... 1. Why would it be necessary to include unless you're too dense to infer standard methodology from the lack of specific code provided 2. You don't have to be psychic or even a genius to figure maybe the call is standard stuff and advise based on that premise until more information becomes available through discussion. Of course that would take some modicum of brain power and effort so I can understand that you clearly didn't feel quite up to the challenge and instead took the lazy way out of whining about stuff.
You already have the tool: Wireshark. What more do you need?
Because you probably did it wrong... since it is NOT WORKING! I can tell for sure that the standard way to do a web call works as I have written many and they all work. What we are trying to work out is what you did. Don't understand why you are being so angry, maybe projecting that you seem to have a job you can't manage to do. Poor guy. Go eat some tendies and watch anime
Okay fair enough, but there'd still be an error logged somewhere, correct? My boss, who is the only one with access to the server (I'd prefer to be a full stack developer if I'm gonna get nailed for missed deadlines but that's another matter), reports that there were no errors in the IIS log or the server's event log. Doesn't really leave me much to go on and I don't have a working crystal ball either.
That's just how lcyduh/ortund is.
Thanks 
&gt; but there'd still be an error logged somewhere, correct? Assuming there is an error, and not just a bug in your code and no call is actually made. And depending on how you set up your error handling in your application any error might just be catched and silently swallowed. But most likely there is no error, as an exception in `ScanToRetinalyzeAndEmail` would result in the rest of the `ProcessScreening` method **not** being executed anymore, but you claim it is.
The biggest issue I have is the data is in little endian format. All the data going out and coming in needs to be in big endian, I am struggling to get this right. Wireshark, works but was hoping for a simpler tool for this.
This only works because the implementation of `IEnumerable.Count()` consists of a bunch of checks like public static int Count&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source) { if (source == null) throw Error.ArgumentNull("source"); ICollection&lt;TSource&gt; collectionoft = source as ICollection&lt;TSource&gt;; if (collectionoft != null) return collectionoft.Count; ICollection collection = source as ICollection; if (collection != null) return collection.Count; int count = 0; using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator()) { checked { while (e.MoveNext()) count++; } } return count; }
&gt; Holy shit this guy thinks he invented the wheel with his 'proprietary' code!!! &gt;That piece of crap doesn't even work!!! No, you retarded jizzstain, but if I'm posting proprietary code online, I can lose my job because I will have breached not only my employment contract with the company I work for, but also the company's service contract with the client who's private business information is not something that they want in the public domain. I hope the words I've used here are small enough for you to understand; I'm not fluent in moron. As to my attitude, being a flaming thundercunt isn't going to do anything but justify it.
You're constantly violating rule 5 of this sub-reddit.
I'm personally not sold on it but we'll see. I feel like changing an interface should be a breaking change.
&gt; Don't understand why you are being so angry, maybe projecting that you seem to have a job you can't manage to do. Poor guy. Go eat some tendies and watch anime Condescending ass fuckery aside you're probably right. I haven't really done much work with web services but hey, I'm learning at least - or trying to. Honestly swallowing so much bullshit from arrogant elitist pricks such as yourself who think I'm worth less because I wasn't born with all the knowledge in the fucking universe doesn't help with much with my learning experience. I'd rather you go attempt to make some actual contribution to society by playing in traffic or swallowing sulphuric acid. However since you're incapable of even presenting general possibilities to "point me in the right direction" so to speak, I've reluctantly made a paste with everything relevant to the execution path in question. I removed as much of the proprietary stuff as I could as far I thought the code still makes sense. I just don't understand if you're here to make some attempt to help why I'm the one giving you all the damn answers... https://pastebin.com/rjZh8N6z
Oh because I'm treating other users the way they're treating me? Boo hoo. Where's the admonitions to them for violating rule 5 of this subreddit?
You need some help.
im going through the same ...but it's my first programming language to Lear...so im following FreeCodeCamp tutorials they're very helpful and easy to get ^^ 
Thanks for the proprietary code bro, sold it on the dark web :P I don't know how youd expect anyone to help you with the attidute your displaying and also don't understand how you think asking reddit to fix your problem without any explanation of what you have tried or debugging information is 'learning' but hey ho. That said I will prompt you to attempt to solve the problem yourself as that will help with learning much more than bitching on reddit. All your try/catch blocks inside that method run EmailHelper.SendExceptionEmail then return without throwing it again, so try either adding a log to event log or file and checking if anything is logged incase email isn't sending properly from the server you are testing on or rethrowing the exception so you get the correct error response as it looks like it must be hitting one of them, but they are just trying to send an email then resulting in success being returned from the controller regardless.
&gt; Thanks for the proprietary code bro, sold it on the dark web :P I don't know how youd expect anyone to help you with the attidute your displaying and also don't understand how you think asking reddit to fix your problem without any explanation of what you have tried or debugging information is 'learning' but hey ho. Kill yourself
Damn, your parents done an horrible job at parenting. Have a nice day
Your teachers did a horrible job at teaching; well, your English teacher anyway.
Facepalm
Bit mean. I literally just told you the problem - your swallowing your errors, just trying to send an email and returning success anyway. Do you even get the emails from that call? Sometimes you have to debug your code. I suggest you get some help for your rage issues, being in that mindset is certainly not going to help you be productive.
&gt; Kill yourself This is "treating other users the way they're treating me"? Telling other people to kill themselves?
That's really awesome. Thanks a lot
Suicide is not a trivial issue to be used in insults on the internet. Thankfully I'm in a fine state of mind but you should be careful writing things like this as you don't know how it might affect people with a more fragile mental state. Please be more considerate.
Think of "algorithm" as if you're a 60's compsci major. It's just selecting a bit of code after compilation. We call the bit of code an "algorithm". So you're right :)
Mods murder please: Rule 3: Posts should be directly relevant to C#
Oh cool you can spell words correctly!
Sure thing dad.
Nobody asked for a comment from the peanut gallery. Go back to your knitting.
Don't worry, the mods will take care of you, and you won't have to read my misspelled words ever again :) 
yay mods... impotent troglodytes in mom's basement masturbating over the one tiny blip of power they have in their pathetic lives... Whatever, I'll just use one of my other accounts if they ban me.
It's interesting how you ask for help here again and again, but then always resort to giving up by offending everyone.
Media entity can have many tags. User should be able to search for entities with specified tags. For example an array of tag IDs comes from UI and I should return every Media that has those tags. If this comes =&gt; \[2, 5, 7\] Then this is a possible search result =&gt; { media: blah, tags: \[ { id: 2, name: blah}, // must have { id: 3, name: blah}, { id: 5, name: blah}, // must have { id: 7, name: blah}, // must have { id: 11, name: blah} \] }
I'll be sure to share your utterly useless observation with a shrink if I can ever afford one. I'm writing it down right now so I don't forget.
Interfaces are contracts that can be programmed against.
It's a nasty hack that was necessary because we didn't have something like DIM.
So effectively awesome-dotnet but less content? (as in, outdated) as awesome-dotnet https://github.com/quozd/awesome-dotnet is still actively maintained
Edit and Continue: It's coming &amp;#x200B; \[quote\] Dmitry Matveev commented 20 Nov 2018 18:47 [John Reynolds](https://youtrack.jetbrains.com/users/johnsreynolds) documentation for this functionality is just a tiny part of the effort required to bring this feature to Rider, and I meant of course the actual implementation and testing of the feature itself. Rest assured, it is a high priority issue for us. Unfortunately the feature hasn't reached the production quality in the scope of 2018.3, but we are still working hard on it. \[quote\] 
Vance has a blog post where he does just that. Couldn't find it last night. 
Yes. For some scenarios, using Roslyn will provide super performance compared even to .NET, but the tricks don't scale well do to limits on things like method sizes.
Well, hey, at least we have jobs where we're relatively successful and reliable in diagnosing our own work and don't need to rely on _reddit_ to do our professional work for us.
Can't help out fully but the modulo function should be enough to get you started.
Removed: Spam
If it's upcasting a local variable, sure, maybe the compiler will be able to detect it, but what if I have class E { public void DoSomethingWith(IA a) { a.DoSomething(); } } 
Hint: The char data type has a direct numerical representation.
Building for a future that might never happen is premature optimisation. You would need to be fairly bang-on accurate in order for your best-guess today to be 100% compatible with your future requirements.
How does that make an interface different from an abstract class exactly? &amp;#x200B;
In .NET we don't choose. We use the most popular one because there is the most know-how and most libraries around it. So that would be ASP.NET Core MVC controllers with those ApiController attributes
 &gt;Also, it is a bit odd to me to hear you call Roslyn a c# scripting library. Ah yes, I'm aware it's much more than that. I was referring specifically to this nuget package: https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp.Scripting/ 
Hey thanks man, I appreciate that. Got a lot of things brought up here that need addressing for the next version, but I'm gonna keep going and hopefully come back for round two. ;) Cheers.
You're looking for ASP.net core web api. Like the other guy said, we don't really choose things here. MS does most of the choosing.
Maybe something like class RoastList: List&lt;string&gt; { public RoastList() { this.Add("Roast1"); this.Add("Roast2"); this.Add("Roast3"); this.Add("Roast4"); } } Then can access that like: var list = new RoastList(); Hope this answers your question
You can't inherit from multiple classes. Opening that can of worms is not something anyone want. Interfaces don't contain any state.
This is not true. The options in .NET are: Microsoft-sponsored options: * .NET Core [ASP.NET](https://ASP.NET) Core WebApi - pure REST * .NET Core [ASP.NET](https://ASP.NET) Core MVC - Presentation Logic + REST mixed together. Primarily useful for things like strongly typed emails so that you don't get in trouble when your Python code has a Run-time type error and the super important Black Friday marketing campaign doesn't get sent out in time. * .NET Core [ASP.NET](https://ASP.NET) Core Razor Pages - The key difference between Razor pages and MVC is that the model and controller code is also included within the Razor Page itself. * .NET Core [ASP.NET](https://ASP.NET) Blazor - Uses WebAssembly to compile C# code to JavaScript. This general paradigm is likely the future, but the far future. You won't see (m)any job descriptions with [Blazor as a keyword](https://stackoverflow.com/jobs?q=blazor) right now. * Azure Functions * [OWIN and Katana](http://www.asp.net/aspnet/overview/owin-and-katana) provide a flexible set of components for building and hosting Open Web Interface for .NET (OWIN)-based web applications. Web API can be hosted directly on Katana using the [Owin Web API package](http://www.nuget.org/packages/Microsoft.AspNet.WebApi.Owin). Open source options: * [NancyFx](http://nancyfx.org/) \- This is pretty much the only alternative to [ASP.NET](https://ASP.NET) I see C# engineers using. I think it's a somewhat stupid idea, personally. Nothing quite like an engineer who wants to write Python in C#. I've worked with them, and hate debugging their code. In the long run, I win out and they leave, but I usually spend a year or more cleaning up their mess. Non-C# options (F#): * [Giraffe](https://github.com/giraffe-fsharp/Giraffe) \- uses [ASP.NET](https://ASP.NET) Core under the hood, but uses F# functional parser combinators to hide some of the terrible parts of configuring an [ASP.NET](https://ASP.NET) application, such that the bulk of your REST programming is pure stateless logic - under the hood, Giraffe does some imperative things like registering its' services with the [ASP.NET](https://ASP.NET) Core Runtime Services. * Suave - Similar * Saturn - Uses a feature of F# called computation expressions to allow you to directly control the [ASP.NET](https://ASP.NET) Request-Response Pipeline. Beautiful. Utterly beautiful. Worth learning, but will not land you a job. You're better off learning [ASP.NET](https://ASP.NET) Core first, so you can appreciate what this does, and also understand what the heck [ASP.NET](https://ASP.NET) Core is so that debugging problems becomes second nature. &amp;#x200B;
A server application which serialised huge amounts of data for a variety of embedded devices where the structure of the data being serialised was configurable by the user. All data was packed in structs and rearranged to minimise padding between members. All members were primitives or value types as well. We created index files to efficiently read parts of the data without needing to deserialise the entire object graph. As different versions of the embedded devices were able to generate different data we had approximately 2000 types which could be serialised. 
 string IncString(string input) { string ret = ""; bool prevInced = true; for (int i = input.Length - 1; i &gt;= 0; i--) { char operand = input[i]; if (prevInced) //If the previous (to the right in the string, the for loop goes backward) character was incremented, we have a remainder =&gt; also increment this character. { prevInced = incChar(ref operand); } ret = operand + ret; } if (prevInced) //Did we incremented the "last operand" (first character in the string, because for loop goes backward)? If yes =&gt; Append an 'A' to the start. { ret = 'A' + ret; } } bool incChar(ref char c) { remainder = c + 1 &gt; 'Z'; c = remainder ? 'A' : c + 1; return remainder; } &amp;#x200B;
I'm currently writing a rest api in java and what I wouldn't give for having just one option, or at least some agreement on options.
You just need this DLL/nuget package: Microsoft.CodeAnalysis.CSharp The namespaces are: ```csharp using Microsoft.CodeAnalysis; using Microsoft.CodeAnalysis.CSharp; using Microsoft.CodeAnalysis.Emit; ```
It would be interesting to see if abioc benefits from replacing ConcurrentDictionary with FASTER from Microsoft Research. It currently uses a ConcurrentDictionary to keep track of Roslyn compilations. https://github.com/JSkimming/abioc/blob/master/src/Abioc/Compilation/CodeCompilation.cs
Use uncached forward-only readers instead of instant deserializing all of the objects.
I agree that I don't like multiple inheritance but I wouldn't say it's an unopenable can of worms. Plenty of languages do it to great effect. 
This is the correct answer, apart from my long answer above that does detail extraneous options.
Not only needs C# adjusments, MI would also require heavy adjustments to the runtime(s) and to the IL.
This pattern is called Create-Set-Use by WPF programmers. It's syntax is hidden usually via XML via XAML data binding statements. In WPF world, there is also an implicit expectation that the "Use" portion is handled by the reactive layout and input systems of WPF.
One pet peeve of mine is that serialization/deserialization don't allow for a pluggable "logical supersystem". For example, I can use [QuickType.io](https://QuickType.io) to pass in an example response from a third party API and it will generate for me a valid de-serializer/serializer pair. In terms of code-write-time, this is a lifesaver. But I'm usually tied into using whatever library is there at the time, so I'm tightly coupled to the overheads in QuickType.IO.
Did you read the question? The guy asks about REST so ASP.NET Core MVC (which incorporates Web API there is no Web API anymore)
Technically there are a lot of options bunt in practice there is one :)
This is probably going to be a tough sell, ReSharper Ultimate + Rider is only $179.99 (138.48 GBP) for [individuals](https://www.jetbrains.com/resharper/buy/#edition=personal), not many people are going to take the risk of buying a code from somebody online for such a small discount.
I'd use the lifesaving NModbus library, then all you need to worry about is sequencing your reads/writes at the appropriate time. https://www.nuget.org/packages/NModbus/
Yeah I can imagine that. At least when it comes to serializer libraries, I generally find the the "moddability" quite lacking most of the time. With ceras at least I am trying to lay a foundation that at least tries to make everything more open/configurable. The for example the latest efforts to add "serialization constructors", the feature supports every imaginable way to create objects (see the example in samples/liveTesting/program.cs). Like with that new api anyone will be able to add support for "problematic" types like for example ReadOnlyCollection in ~5 lines of code (configure that type with: overwrite readonly fields, serialize private fields) Or the DI system that makes it super easy to write your own formatters... I want to go into that direction even more - a serializer that is very configurable, that can be adapted to many situations, while doing the heavy lifting for you where ever possible. But it's not easy as a good (as in powerful, yet still as easy to use as possible) api takes forever to design and implement. 
Yep it did! Cheers
I was referring to passing structs by in, passing reference types by ref does not make any sense here as you still pass something that is reference sized. If the structs are not used in a hot path the impact should be negligible. Then I still stand with my recommendation of phasing out arrays and use memory/span overloads, the array copying should still be a sucker performance wise in comparison.
Rider doesn't work with Web Forms? They have [templates](http://i.imgur.com/Qb1WH7v.png) in the add item list. 
Yes, using the pattern I described requires actually using the pattern.
Incorrect. ASP.NET Core is broken out into many assemblies, and it is very possible to create a REST-only deployment without depending on the Mvc bits. I think this is a common source of confusion for developers, mainly because running command line command "dotnet mvc" is what they are taught from a project template perspective, and they think after they run that command, they can't delete 90% of the included packages which are mostly junk. I probably did include some additional stuff I shouldn't have, such as Razor Pages, but I do think if you're writing a REST framework, half of it is "incoming" requests and the other have is "processing the incoming requests", for which you will want to know about things like RazorLight. It's tangentially related and important know-how a senior engineer learns through toiling through things.
Cool. This was a nice discussion. I found Vance's post about visualizing "anythign" with PerfView as a histogram: https://blogs.msdn.microsoft.com/vancem/2016/02/20/histograms-with-perfview-ad-hoc-data-analysis/ The point Vance is making is since PerfView is just a WPF application, and WPF applications just do "strings to things", and "strings to things" is the very core of what PerfView does, you can use GroupPats and IncPats to slice and dice ANY DAY YOU WANT. https://blogs.msdn.microsoft.com/vancem/2016/02/20/histograms-with-perfview-ad-hoc-data-analysis/ Further, since compression is a known technique to detect "plaigarism" across samples, you can also use compression to identify longest common sequences of "compressible instructions" to identify "micro design patterns" in your code.
Maybe I should check it again, last time it had a lot of issues. We have some old code there that still uses Enterprise Library :D
I'm not sure why you are being downvoted at all. I've used VS since the 2010 version and it always felt like the best to me. I've been doing a trial of Rider for 2 weeks now and I think I'm sold. I'm on dotnet core and using Angular for the front end, so my experience doesn't include any GUI work, so I don't know what that experience is going to be like, but so far Rider seems much better than VS2017 for what I use it for.
Please provide a link to the ASP.NET Core assembly called WebApi
Do a trial for Rider. I've been using it on Linux for a couple weeks and so far it's been pretty awesome. I'm doing all web stuff though. I don't know how the GUI stuff is for any Mono apps.
It only looks nasty because there is more than one possible interface to check. 
Yes, and since DIM is a form of MI the runtime has to be modified. Which is why it won't be supported in .NET 4.x.
Although the documentation is good, I feel like it's hard to navigate. So many nested menu levels, and the navigation menu removes parent items if you go deep enough, which makes you unable to navigate to other areas without backtracking all the way up again in the navigation structure. A lot of topics are also duplicated across the documentation with different explanations of them, so it's hard to know where to start. I tried finding it to learn C#, but gave up after a while. Then I bought a book and video course instead that were more coherent. Just my experience though, I'm sure other people find it more useful than me. Microsoft's docs are only good as references to me.
I personally don't like extension methods that work against a null value. I get it in this case. But still not a big fan.
Looks good, but I'm a bit surprised Newtonsoft's JSON.NET isn't there. The library is ubiquitous. :)
You missed my point. Saying, "Interfaces are contracts" is usually not very helpful because it doesn't point out the difference between an interface and an abstract class. It is just some high concept with nothing concrete to hold onto. The matter of the fact is abstract classes also fill the role of a contract, but it is more than just a contract which is why multiple inheritance isn't allowed.
I don’t know about the server emulation side. Sorry, I mainly use it for testing remote devices. 
https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Core/
Yeah, you want to use ssl for your website. There should be guides galore for setting this up with php and whatever web server you're using. Once you've done this, your requests will look like http**s**://website.com/... and be encrypted. That said, even with secure requests, it's not considered secure to pass sensitive data like passwords in the query string. Use POST instead.
Ugh, I’ve already written all the scripts tho, if it’s encrypted shouldn’t it be fine? 
This is not ASP.NET Core, this is the old Web API that works on top of the full framework.
Wow, last time it didn't even build the solution :D Now it's running. Some problems action names I'll have to look into but otherwise it looks great :)
You're right; sorry for confusing the poor OP/python programmer. I'll edit my post to take that out/clarify. I did not actually realize while developing that the new approach is to use [ApiController] attribute on a Controller class to denote WebApi. On some level, this makes sense; on another, it doesn't and was probably done by Microsoft so that they didn't have to split out ASP.NET Core services from Mvc services. I guess this means I have not been using WebApi after all?
Web API and MVC are the same thing now. If you return something that is not a view you are doing Web API which is how it should have been from the start. The ApiController stuff is just some common conventions like binding complex types for argument from body so you don't have to put the attribut nothing really special.
It’s not a string - it’s a base-26 number
I would gladly accept your critique but you did not answer the important question: &gt;How are you supposed to link to a specific item in your shop then? &amp;#x200B; Now you think "oh well, i just make it [my.shop.com/items/nike-shoe-4000-white-version-2-2018](https://my.shop.com/items/nike-shoe-4000-white-version-2-2018)" Well, Nike told you to fix the name, its not shoe, but footwear. you fixed the link, now the previous link, though it points to the same shoe, won't work, and all the Bookmarked links are invalid now
Makes sense; I documented it as an issue for clarification on MS Docs Github: [https://github.com/aspnet/ApiDocs/issues/103](https://github.com/aspnet/ApiDocs/issues/103)
BTW there is a WebApi.Client package that is apparently .NET Standard and is used in ASP.NET Core. Not really sure which of the clients it is, seems different from HttpClient.
I wrote a program that generated serial numbers this way once. It got the substring for the character to be increased, the substrings around it, incremented the one, and made a new string. If it passed the last character, it would recursively increment the *next* character. It has a dictionary of characters to use for each particular character of the string, which could be different for each one. (This generated serial numbers. Ever buy an NFL jersey or a baseball cap or anything like that and find a hologram with a serial number on it? I wrote the code which makes that serial number.) I don't remember the exact details, but I remember the entire program is 11 lines of C# long. 
The whole ***Client stack is being redone. For example, SmtpClient is deprecated/obsolete and replaced by a package written by a Xamarin/Mono developer. For SMTP, you should use [MimeKit](https://www.nuget.org/packages/MimeKit/) and [MailKit](https://www.nuget.org/packages/MailKit/) instead.
Great collection. But it looks more like every project for every topic and not a best practice directory with one good alternative. 
It's under Serialization. 
Awesome!
Great collection!!! Thanks
https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2017 In msbuild, you can specify what targets to run. So in your root project, you can have &lt;Target Name="a" DependsOnTargets="build"&gt; &lt;Copy SourceFiles="a.dll" DestinationFolder="$(OUT)\" /&gt; &lt;/Target&gt; &lt;Target Name="b" DependsOnTargets="build"&gt; &lt;Copy SourceFiles="b.dll" DestinationFolder="$(OUT)\" /&gt; &lt;/Target&gt; Then both CI and developers can build from the command line. msbuild /t:a;b will give you both dlls, msbuild /t:a will give you just a, msbuild /t:b will give you just b. For convenience, you may want to alias different combinations based on customer name or something else significant. For a more complex way of doing things that will let you skip building some projects if they aren't needed, you could do conditional &lt;Import&gt; elements rather than &lt;ProjectReference&gt; elements.
One last thing. While we're discussing "a serializer that is very configurable" and how to design a good api that "takes forever to design and implement", have a read of this trick in F# world I answered on StackOverflow: [https://stackoverflow.com/a/53605735/1040437](https://stackoverflow.com/a/53605735/1040437) and used in FsPickler library. I believe tricks like this will cut down your implementation time to the holy grail.
There's no "correct" way. Use it however it makes your life easier. If the hundred lines of code above your trouble spot is getting in your way, wrap it in a region and hide it.
Aww, thanks. :)
Entity Framework is of most use to teams with significant C# expertise and very little SQL expertise. If you're comfortable building the queries and making any updates to database schema yourself, you won't get much out of EF. EF is about saving programmer hours, not about being the ideal data-access method.
[Are #regions an antipattern or code smell?](https://softwareengineering.stackexchange.com/questions/53086/are-regions-an-antipattern-or-code-smell) 
Do you have an index on TagId?
Seconded. I can code up ADO.NET SqlDataConnection/SqlCommand/SqlDataReader patterns from my head in minutes. Doing the same thing in EF requires a fair amount of thought for me. Given a specific database task that isn't likely to ever grow into something more sophisticated, I lean toward straight ADO.NET. This is also handy when you are dealing with a legacy back end consisting of stored procs and more regimented access requirements.
A lot of people seem to like regions for denoting fields vs properties, constructors etc. Personally I find that to be an antipattern since you can just be consistent in how you order things in your classes. If I have a class long enough to warrant their use (which should be looked at closely to begin with) than I do it over functional areas. for a manager class I may do things like separate the public facade from the the various internal parts of the class. I also like to break things down by function so these functions handle "client connections" these handle "backend calls" these are "delegates" I see them as documentation helpers. Also great when reviewing code you need to ultimately refactor as once you start sorting by function often the released functions should be their own classes.
I personally hate regions, therefore the first plugin I install on my visual studio is „I hate regions“. If you need to break your class down with regions maybe you directly can break it down to smaller classes? Most likely the better idea it might be exceptions out there for it but from what I have seen it is mostly laziness...
Many will say that if you need to use regions to keep your class in order, that means your class/file is too big. I share that opinion.
You use the get and set methods for public properties, which often access the private fields in the class. You don't want to make your internal fields public, as it can lead to your object being changed in ways you don't intend. It violates encapsulation. So you create public properties with getter and setters that allow you to access those private fields. You can add rules and validation to your getter and setters to help ensure data is accessed or changed appropriately. 
I'm not sure I follow your question. The construction employee() requires 4 pieces of information, which are then assigned to the private variables you have listed. The getters &amp; setters only take in one piece of information and assign it directly to the appropriately named private variable. so, if I am reading your question correctly, you can change any of the object Jan's private variables like this: Jan.department = "Psychology"; Jan.employeeId = 096555; &amp;#x200B; The { get; set; } syntax is shorthand for the following: &amp;#x200B; public int getEmployeeId () { return employeeId; } public setEmployeeId(int ID) { employeeId = ID; }
Don't use regions. If you need regions, your classes are way too big. 
Yes, yes they are. They hide code, and are a sign of a poorly handled code base. If you need regions, your classes are too large. 
{ get; set; } essentially tell C# that these are class "properties" rather than "fields". The distinction can be confusing, but generally you want *fields* to be only used internally in the class (and defined with a scope of private), whereas *properties* are things you likely want to expose outside of the class. Ultimately, { get; set; } hide a LOT of boilerplate code from you, as this public string Name { get; set; } gets pre-processed into something like this: private string _Name; public string Name { get { return _Name; } set { _Name = name; } } That class-level field called _Name is created behind the scenes. And again, { get; set; } is just shorthand - and you'll only really use that when you want simple property access. You can omit either get; or set;, which will cause the omitted one not to be available outside the class (it's pretty common to omit the set;, which makes the property essentially read-only from outside the class). However, if you *do* want to control read or write, you could put formatting or validation into each one as necessary: private string _Name; public string Name { get { return _Name.ToUpper(); // convert to upper case } set { if (_Name.Length() &gt; 0) _Name = name; } } 
My classes aren't very big, about 400 lines in the one im looking at. I have a region around my class properties, since full props take up about 6 lines each, using a region saves some lines of code I have to scroll by. &amp;#x200B; Are you saying its just better to scroll by these blocks of code instead of hiding them in region?
I never use them. 
&gt; I am wondering if this is the correct use of the #region? If not, is there a correct way to separate different parts of your code? When is it a good time to use #region? Never use region. It hides code. if you need them, your classes are too big. The super rare instance I ever use them is when I want to hide code... and why would I want to hide code? It rarely ever happens, and shouldn't. Instead follow the C# style guide and sort your members in their proper order. Keep your class sizes small. Stick to SOLID. Resharper can help you do this automatically by using automatic code formatting using ctrl+e+c. This way it's automated. You'll start having a uniform structure to all your class files if you do this. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/members
So instead of hiding my vars, props, etc in regions I should just leave them unhidden and scroll by them? 
400 lines is approaching "large". The entire user service for the app i'm working on right now is 255 lines, and that's with XML /// documentation on every member (property, field, method). If your files are typically 400+ lines of code, I recommend considering the S in SOLID more. The Single Responsibility principle will help you write smaller classes. It's better to have many small classes with single responsibilities than monolithic classes which mix responsibility. Your maintenance and fatigue will improve if you make smaller classes. And yes, it's better to just scroll them then to hide them in a region. If you need to scroll past noise or see a high-level structure of your class, play with the "Outlining" feature in Visual Studio. Right click the class file and go to "Outlining". Collapsing will collapse code so you just see the members, and expanding wills how the code again. 
There are plenty of IDE shortcuts (e.g. Ctrl-, in Visual Studio) to let you jump direction to the parts of code you're interested in
Your classes that represent the shape of your data should be separate from the classes that work with that state. It may seem like you have extra classes, but a stateful object is a huge pain to debug.
I never use regions, rather use partial classes if i can't really split up the code otherwise. But like others said, if you need partial classes or regions your class might be to big. Sometimes, there is no way around a bigger class, if this is the case, partial classes come in handy. A warning tho: partial classes also could be an anti-pattern, always try to first break up your classes.
Thanks to both of you
They're sort of a patch over your code being awkward to read, really. There's not a lot of value in splitting the various bits of your file up, and it can be organized by a code formatter, anyway. They may be useful for splitting out interface implementations or boilerplate, but that's probably also an argument for a partial class or common base type. Almost every use of a region is better handled through refactoring, really.
At the beginning I scrolled a lot but then I started to look what features visual studio offers to be more productive. In fact directly in the top of the editor window are drop downs which directly show you all properties methods and so on. If you don’t have resharper and the joy of the hotkey ctrl+T visual studio still offers awesome much to reduce the need to scroll actually in your class even it is a 1000+ lines class of hell.
I use them rarely and really for just two things: - Huge block of those entity framework declarations - Commented out block of code that for some very rare reason is not getting deleted. 
A group of us were just having this discussion today. My personal feeling is that they should be local to an individual user and not committed to source control for other's consumption. Unfortunately, that's not how they work though.
It's very, very personal preference. This has been stated in many comments but it's worth knowing that yes, the people who say it's personal preference are many. I've been back and forth several times in my career. I wanted regions the \*most\* when I was younger. I wrote really big classes back then. It was helpful, to me, to group my methods with regions so I could skip from one feature to the other. Over time, as I adopted unit testing more and more, I didn't write my classes that way. What used to be regions in my code became dependencies I introduced through constructor injection. Now my biggest classes tend to total maybe 200 lines, with the average class clocking in under 50 (unless it needs a lot of properties, those take SO much boilerplate.) Also, all of my teams tended to have an order for things as part of the team coding style. Properties at the top. Constructor next. Then public methods, then protected methods, then private methods. Some teams did it slightly different, "a public method then its private helpers", etc. So in my current style, I don't tend to need regions so much. The files are either so small they don't need navigational aids or the team's enforced structure helps me find the thing I need. I find regions are still convenient for collapsing away boilerplate junk like `INotifyPropertyChanged` implementations or Dependency Property creation, but I don't really use them for separating properties/methods anymore. They're more of a tool for helping me indicate "this part of the file had to be included but isn't doing anything you can't guess".
By creating a user friendly identifier for external use, or by including it as part of any standard http request. Even if you is a fully qualified product name, it's in a format a user can easily use. 
It is more about how not to use them than how to use them. You do not want to use them inside a method. You do not want to separate code that should be part of a different class. They should not be around individual methods or properties. (VS allows you to hide these without the need for regions) After all of that I think there are only really two reasons left to use them. To group interface methods together, and to temporarily hide code that is currently irrelevant and in the way. 
Me too. At the very least, regions are a sign your file has grown quite large, and you should _consider_ whether it's time to refactor.
No
I've made some really good connections through local developers group meetings.
I don't really use Java for anything. Is Spring not the only option?
Visual Studio has had native ctrl-t since I believe VS2015. Regardless, this is the single most productive shortcut in VS IMO.
I agree with most what you said but I still would like to add that people should use SOLID more passively in some situations. SOLID on its own is a pretty awesome concept but often it is not the best idea in my opinion because it’s just bringing unnecessary complexities to trivial stuff.. and also i don’t like to call a class big or small dependent on the lines of code. We are building objects and they can become complex and I don’t see a benefit from breaking them down into the smallest possible entities just for line numbers. I more like an approach to get a feeling „can I still handle this class or am I getting lost?“. It’s like my house ... at some point o just know „okey I have to clean ..“ I had a lot of colleges which used solid and design patterns all over the place and this parts of our code base has become a hell. 
In some situations I agree... but as with most programming questions I think it’s more nuanced than that - sometimes you just want to logically separate or group methods Eg in a recent simple winforms app I had a handful of “admin” methods - minimising/maximising forms etc. They had nothing to do with the main work the form was doing, were almost never going to be touched, and were just kind of in the way. Especially since I order my methods alphabetically to make organising them easier in general. I could have just put them to the bottom of the file - but then they’re out of order and that could be confusing, and also I find that once you break that kind of convention it goes to shit. But wrapping a couple of regions around the main form logic and this “admin” logic meant I could simply have two sections, one minimised 90% of the time but both still neatly organised. Similarly in an MVC controller, you’ll sometimes have a group of calls that do something similar - a region is a nice way to group them contextually, so you can have the related calls on screen and the rest hidden. It’s definitely possible to over-use regions, but it’s not as simple as “if you use them, make your class smaller” - sometimes a class just has to do a fixed number of things, and no matter how neat you make the individual methods, you need 20 methods. I’d argue that in some cases it’s more confusing to split those methods into separate classes rather than keep them together with regions for minor contextual separation
Check out this guy with his oodles of time to refactor instead of cramming more features in
Sometimes you do want to hide code, though. Got a WPF/Winforms app? You’re guaranteed to have a handful of “write once, never refer to or change ever again” type methods for doing a few simple things... hiding them isn’t a bad thing, nor are they a sign that your class is too large: they’re hidden simply because they’re not doing anything that you need to see or touch
Off the top of my head... SELECT * FROM Media HERE (SELECT COUNT(DISTINCT ID) FROM MediaTags WHERE Media.MediaKey=MediaTags.MediaKey AND MediaTags.Id IN (2,5,7)) = 3 The basic idea here is that if you ask for 3 tags and get 3 tags, then you must have found all of the ones you were looking for. This does require manual SQL generation, but you can force EF Core to deal with that. 
You might be interested in Dapper ADO.NET at heart, but with a bunch of nice wrapping around it, and made by the guys at StackOverflow
Without this shortcut I would be totally lost... great to hear it became native!
That's why it's doing a table scan, it's searching for something that it can't use an index to lookup. If each tag can have only one media entity, a compound index on the entityId, tagId combination will allow an index lookup rather than a table scan when looking for tags associated with a certain entity.
Nah. I have _tons_ of code that isn't designed well. I'm just saying that regions are indicative of a code smell. That's all.
There are a lot of people on here who say don't use regions, I am not on board with that. I personally love regions for the exact purpose you are using them for. I also use comments on my regions to keep things nice and tidy. I mainly do it because it's a great way to condense code on your page because in the real world of work, sometimes you have an abundance of code on one page and it's easier to move around with regions. A lot of times I'll have to make edits to properties and methods at the same time, if that's the case then I shouldn't need any of the other areas of the code and instead of scrolling through them, I can just collapse them. Personally I love them as a way to organize my code, especially when you have to make similar classes with variations and you don't need to re-write the whole them. That being said, there is nothing wrong with not using them, it's a personal preference. While people like you and myself find them very useful for readability, others may find them to be unnecessary. 
That didn't even occur to me for some reason. Good shout.
Hi, how much paying for hour? 3years comercial back end developer experience.
For those who, like me, took a moment to figure out what you’re saying here Instead of “if there’s no error, do something” like this If(!isNull(string)) { DoSomething(); Return success; } Return error; Rather check for the error first and return, keeping the statement positive and the logic clearer If(isNull(string)) { Return error; } DoSomething(); Return success;
While there are many good points already listed in other comments, I would like to advocate for using regions in e.g. wpf/xamarin controls which have many bindable properties. If you are so eager to scroll through 20 properties and their corresponding bindables be my guest, but I sure enjoy being able to skip all of that setup stuff and skip directly to the actual logic. 
Possibly through native methods.. see alloc console. Or you could simply send the data over a tcp socket and or8nt from the client
Great job! You're doing fine!
 only time i use them is grouping boilerplate interface implementations that will rarely if ever change. label them though, as in: `#region IDisposable` 
 Then there's the one time where you do need to find that "write once, never refer to or change ever again" line of code and it's buried somewhere in a region. No thanks. I've written WPF and UWP apps, I never see the reason to use regions. I militantly remove them from any project I work on. 
I disagree. SOLID should always be used, no matter the triviality. When you break it, it's too easy to go astray and too hard to go back. Using SOLID on even trivial things doesn't add any overhead or complexity. It's a pattern, and a simple one at that. You should consider a class with hundreds of lines of code too large. You are building objects and they are complex but there is a difference between object and responsibility. Each class should have one responsibility, and one responsibility only. Larger units of work should be bundled into many small classes, which are strung together by a service or logic class of some sort. If you do it right, no matter how complex a job you are doing, you should have pretty small files. Line number are a great indicator of when you should start reconsidering responsibilities in a class and start considering refactoring. I use 400-500 lines as my personal limit. Using SOLID well does the opposite of what you say - it makes the code more manageable and easier to maintain. If you do SOLID right you should have small classes everywhere, bundled into barrels or modules that self-contain related logic. If you ran into a SOLID code base that was full of too many classes and you couldn't make sense of it, then it was probably poorly designed and didn't barrel or modularize any of it's components. 
I feel like the "cults" form because of tribalism, the author scratches the surface of it but I don't think it's said enough. C# is a general-purpose language. It's meant to be able to do a wide range of tasks. The feature set doesn't specialize on any one thing. Nonetheless, it has an OOP paradigm with functional enhancements, and that has an impact on how it expresses its problems. F# is a functional paradigm with the ability to interoperate with OOP concepts. That makes it better at some problems C# stumbles through. At the same time, C# is great for doing some things F# makes really difficult. Go figure. It sounds to me like the author was surrounded by people who insisted *smart people* can do everything in C#. The author figured out what was wrong with that: it's like arguing *smart people* can make a hammer work screws. Don't be those people! Give F# a try. Get messy. Find out what it sucks at and use C# or some other tool for those things. In the process, you'll probably figure out it does some of your other work even better. I'm still working on that. Finding the time is tough!
&gt; Eg in a recent simple winforms app I had a handful of “admin” methods - minimising/maximising forms etc. So you decided to put them into a region instead of a separate class? I don't understand the reasoning here. Instead of using regions and hiding code, I would put those `admin` methods in a admin service and inject it into the form that you're working on. Now your form code is smaller, it doesn't use regions, and if you want to see that admin method code you just go open up the admin service. 
Table scan has nothing to do with it. OP's ORM is doing a SELECT N+1 to achieve their translated LINQ query.
I typically only see regions used for badly written code. Also, what is the first thing that most people do when they seem them? They often expand them to see what is going on inside the region (annoying and it's a time-waster). I would remove them and discourage their usage.
The militant views on #region here is kind of...scary.
And what does that gain, apart from the fact that the code acting on the form is in a different class and I have to inject it? I don’t see how there’s any significant improvement there
“Buried somewhere in a region” - with a label on the region and still showing up in the project explorer, it’s hardly hard to find, and you say that like most of us don’t navigate around using “go to definition” as the primary mode of conveyance...
Readability. Now when you read that admin class, there are two less lines of noise.
Use EF when you get to do things code first. For existing applications, like SQL Server's msdb and SQL Agent, just use Dapper. If you have a brownfield project, using EF can still make sense, but you'll want to use FluentMigrator to refactor the database schema to be ORM-friendly: bigint primary and foreign keys, shadow properties, etc. so that you can elide join syntax and just use the fluent dot syntax to quickly join data together in your object model.
I don't know about you, but when i'm scanning code and reading a class file that is new to me, I don't like regions getting in the way. That's what I mean by buried. 
Well, now you would have an Admin Service which can be tested in isolation of everything else... Testability and Maintainability are the two biggest benefits to proper SOLID design. 
My first thought is to screen scrape to get the data. This guy came up with a pretty neat idea. Unsure if it works but it's worth looking into. [https://stackoverflow.com/questions/30511319/screen-scraping-a-console-window-from-net](https://stackoverflow.com/questions/30511319/screen-scraping-a-console-window-from-net)
You work long enough, you eventually See Things. Things that man wasn't meant to see. Things that haunt you. A little too often, they hide in `#region`s, to conceal their wretchedness from future developers. Hyperbole notwithstanding, they're just not very useful, most of the time.
I feel like partial classes are worse than regions, because then your code is physically split up in a way that requires an IDE to navigate. At least with regions, you can find related code when reviewing a PR in something that's not Visual Studio. 
Try working in legacy code built by others that are spaghetti messes of a highly monolithic nature. #regions are a life saver.
Weird! I think I must have searched for the wrong thing or something. Anyway, I love the list. Thanks for it!
Thank you for your explanation. But what are the advantages of auto-implemented properties over just creating a field? I don't get it... `private string name` If you do: [`object.name`](https://object.name) `= 'Jan';` (WRITE) `Console.WriteLine(`[`object.name`](https://object.name)`);` (READ) Same applies for auto-implemented properties right? `private string name { get; set }` [`object.name`](https://object.name) `= 'Jan';` (WRITE) `Console.WriteLine(`[`object.name`](https://object.name)`);` (READ) &amp;#x200B; Please help me out... this is so confusing. I just don't seem why you would use a auto implemented property. 
Good point, price reduced: £99
Like it says in the extension: "Regions Suck. You need this." https://marketplace.visualstudio.com/items?itemName=Shanewho.IHateRegions
&gt; FluentMigrator to refactor the database schema to be ORM-friendly Does this ever happen anywhere? Changing the schema on system used in a real mone-making enterprise usually requires an act of God, and would cost a gazllion$ to ripple the changes down through the already working systems. 
Resistier and stylecop discourage regions within a method. Otherwise it seems regions are fair game. Personally I don’t like them because my colleagues have an awful habit of using them and then badly naming them. 
Don’t know about EF, but other ORMs start to get wonky with big databases where joins can returns lots of records. Rough rule of scale for ORMs: &lt; 10k rows = ok, 100k rows = maybe, 1M rows = unliked, &gt; 10M forget it.
It's cleaner and shorter, and allows you to focus on what you're doing and not as much on syntax and what you're typing. So for a Person example: public class Person { public string Name { get; set; } public string Address { get; set; } public DateTime DateOfBirth { get; set; } } is a lot more readable (especially when you're talking about huge enterprise applications) than: public class Person { private string _Name; public string Name { get { return _Name; } set { _Name = value; } } private string _Address; public string Address { get { return _Address; } set { _Address = value; } } private DateTime _DateOfBirth; public string DateOfBirth { get { return _DateOfBirth; } set { _DateOfBirth = value; } } } Just think of **much** more complicated class definitions with dozens of properties, and that sort of thing repeated all over your code. Using the shorthand getters and setters is nothing but "syntactic sugar", but take as someone who's evolved with C#, the brevity makes a HUGE difference. Plus, nothing's stopping you from using the old way if it makes more sense under your circumstances.
but using private string; &amp;#x200B; is shorter than private string { get; set; } ? &amp;#x200B; why would you use a auto-implemented property instead of a field?
With regard to "why use *properties* at all over *fields*, and the answer to that is "best practices" - namely, that getters and setters allow you to control, massage and manipulate access. Just having publicly-accessible fields don't give that to you. Plus, it's stating your intent as the developer: fields are saying "I'm only really used within the class itself!" and properties are saying "I'm probably access outside of the class, and everything pertaining to that is laid out right here (as opposed so some method in some other place in the code file)". I'm sure there are many other reasons and better ways to explain it, but basically that's the gist of it.
That would be part of my current job. Previously, I worked on a system with a substantial amount of offshore development. I would be hard-pressed to say which was preferable from the perspective of code quality. I would still say `#region` is vastly more useful in theory than in practice, and mainly used to sweep ugliness under the metaphorical rug, rather than actually fix it.
&gt; Changing the schema on system used in a real-world money-making enterprise usually requires an act of God Guess God said it was ok, then, so I did it... I re-designed an *entire* mid-to-back office database schema supporting around 45 different clients, in about one year of time. In the process, I fixed several crazy problems. I'm with you, though. For example, after doing this project, when I read the Xero User Voice tickets and users asking for certain features, I know the developers of Xero are so screwed unless God allows them to make those changes. See: https://community.xero.com/business/discussion/36230134 for the LOL. Xero built all their business logic around views, so they never materialized tax data correctly. Very scary.
I just use them like comments and avoid closing any. Like for annotating groups of methods. I had an extension that colored the region tags, making this a great visual help.
My correct use is not to use them :) Never liked them personally.
Is there any good reason to be using either of those versions at this point?
Oh of course the best and desired result would be a rewrite to better standards. Its not always allowed by management and deadlines though. Especially in legacy systems where nothing is broken. I think we both agree on that. I just don't like this militant never-use-it-or-you-are-WRONG stuff. None of these people ever learned "it depends".
Thank you. ✌😊
The ORM may translate the same LINQ query to different SQL instructions based on context like indexes.
Absolutely not. But legacy code is something that exists and `if it's not broken don't fix/change it` is a mantra of many developers I've worked with in the past.
Rule of thumb is: avoid at all costs. I still work on legacy code from ASP .NET Web Forms and .NET 2.0 projects, so June 27, 2019 is the day .NET Core 1.0 and 1.1 projects will just be called legacy. lol
This method sucks. If you are going to use regions group logically. Like "validation", "export" etc.
Sometimes it's unavoidable. I have one example from my code base there is a project where every class is _at least_ 10K long. Each class is a complex calculation. We generate these classes using yet another application that reads a stack of crazy but well formatted business rules and then produces a class a massive class that when you put a person through it will say if the person passes or fails and to what degree. It's insanity and we do have to make hand tweaks on occasion. The classes have the same general structure, so we have regions so we can get to relevant section without having to scroll forever. There are dozens of small support classes being leveraged in these generated classes, but how you can make an arbitrary stack of business rules smaller I don't even know. Sometimes you just have to accept the exceptions to the rule.
Are you returning 10M records in a single query?
Core was basically unusable for me until they added the missing System.Data and System.Data.Common stuff in 2.0
Do you have a source for that? I've never known any .Net ORM to do that, including EF and EF Core, and I've never seen EF [Core] kick out any SQL statement to query indices in the DB. I could be wrong, but to be frank I'll be quite surprised if you can source that claim.
I've never understood that with framework upgrades- I been at this since .Net 1.1 and I've never once had an issue caused by an incremental framework update.
Rarely, but I’ve had use cases require processing 100M+ rows, with each row potentially join against another table of 10k rows.
What the OP suggests is similar to how we use them at work. In addition - classes that implement multiple interfaces, each interface implementation gets wrapped in region. Regions in both in C# and C++ btw. They are actually more useful in C++ I find because due to more boilerplate stuff required. I never used them in personal projects but for large projects with many users they work well. 👍
I'm not sure where I saw it expressed first, so it may be this sentiment is referencing something else, but: "programmers are opinionated shits." It's almost part of the job description.
Ya. I know it to be true. Consider even my opinion of this all. I just try to deny it with no hope.
EF is great, but if you dont know what makes it great, Just stick with SQL because you wont get much out of EF if you're just using to say "i used it". 
I'm confused. Your bot receives the data and reacts to it, so it has the data already. Why would you then also be trying to read from the console? Or do you not know how to receive data in the first place? 
A few reasons, and I'm sure others have some too. 1. As I said in my other post, it helps state developer intent - *generally* fields are meant to be used within the class itself or are otherwise less consequential and you know you'll never need to administer the read/write access beyond scope. Properties are implying that this will be consumed from outside the class. 2. It allows you to control read access - you can use try/catch blocks, database access, method calls, etc. Yes, a lot of the time its a simple getter, but if you ever need to change that there's no real refactoring other than in the getter itself. 3. It allows you to control write access - you can validate the value before writing it and wiping out the previous value, you can log it, manipulate it so that it's in a better form for your specific scenario, do security checks, etc. And again, even if you don't need it off the bat, you can easily add those above things without needing to go anywhere else in your code, and everything else should work as it did before. 4. Under the hood, C# creates a private field anyway, and get/set simply exist to provide the above features. See how this sort of thing is handled in Java and maybe it'll help you understand why it's so popular in C#. 
In C# you have partial classes, which afaik allow you to declare a class across several files.
They really should not be used in new code at all. So another vote from me for no regions at all. Any time you can logically group a subset of a class, whether inside a method, a region for a set of properties or methods, or whatever, it probably would be better to refactor what you marked out as as a region as a new class or method instead. People do weird things in old legacy code that's on life support, not sure I'd scream about that, but that is also sort of wild wild west and there are likely other things to discuss when that comes up, and "how to properly use regions" is not high on the list of important topics at that point. It's also better for things not to get to that point of 10k line classes, but it is reality. 
So what happens when each form acts in a slightly different way, so I need 8 different admin services or something like an 8 way switch?
What exactly do you mean with ”constructor injection”? I see the word injection everywhere but I never bothered to look up what it means 
(pound) region... ( ͡° ͜ʖ ͡°)
Nobody should be reading a class to learn the code, that’s what the documentation is for
But there isn’t less noise: we now have the inclusion of the other class, the injection of the other class, and the various logic within the other class to handle the various forms that do things in slightly different ways
Yet there are still people never updating. The best we can do at Microsoft is provide proper warning and information.
you're missing a `/s`
You can find a [great example here](https://github.com/ninject/ninject/wiki/Dependency-Injection-By-Hand). It also really helps with unit testing compared to the "service locator" pattern.
Thank you very much. That's what I meant regards my question. Love!
Dependency Injection using an object's constructor (vs. using properties or some other method) https://www.dotnettricks.com/learn/dependencyinjection/implementation-of-dependency-injection-pattern-in-csharp
Thats what method overloads and additional params are for. Sounds to me like you don't need 8 methods for 8 different forms or 8 different admin services. Create a few methods and leverage method overloads or default parameters to maximize the functionality of the method signature while also trying to keep them simple. 
The biggest reason I don't like regions is because they hide portions of the code in an unpredictable manner -- you never know what is actually inside until you open them, and then, who knows, there might be another region inside as well. For the purpose of grouping certain members of a class I often tend to use `partial` modifier, either splitting the class into multiple files or have multiple partitions of the class in one file. I use it almost every time I have static members in a non-static class -- I make the class partial and move the static members out below. 
8 different services. Why not? VS or Rider male cross file code navigation trivial. You could even pull the common code out of those 8 services into its own class to reduce code duplication (this may not be the correct move but there’s no way to tell without seeing your code)
We have, several times.
In general if you have to use partials because the file is too long, that’s a code smell and you should fix the underlying issue instead of hiding it across partials. 
You should definitely be doing this on some sort of stored procedure then.
You'd think so, right? But sometimes existing peronsalities and standards make this impossible (eg: "I am a god-level architect, and one of my commandments is no bus logic in sprocs ever").
That seems like a reasonable use of regions. I mean, that's ostensibly its original purpose - hide generated code, because it seems like Microsoft introduced regions for generated UI code. Your problem sounds interesting; I can't help but wonder if there's a better solution. Maybe a domain specific language? 
&gt; FluentMigrator I have to say that I prefer Migrator.Net over FluentMigrator. While they cover basic scenarios, both are quite limited out of the box. Migrator.Net is much easier to extend, however. When I was maintaining projects using both of those migration libraries, I wrote some helpers over them to define migrations with .net classes, fields, and attributes. It's just a little util for me, but maybe gives people some good ideas. https://www.nuget.org/packages/EasyMigrator.MigratorDotNet/ https://www.nuget.org/packages/EasyMigrator.FluentMigrator
I use them as comment headers pretty often in detailed sections of code. Usually these are verbose parts that aren't complicated, but also can't be chopped up into methods. Stuff like building XML file contents or stuffing parameters into database queries. #region step 1 ...some code that does step 1... maybe about 5-10 lines #endregion #region step 2 ...some code that does step 2... maybe this one is more like 20 lines #endregion And so on. That way, I can comment with regions, then collapse the code into its comment. I also use them for interface implementations, as others have said. And in UI classes, I use them to group the major types of UI glue-code. (Events, event handlers, multiple constructors if they exist, a pile of properties and their get/set/backing-fields, task-by-task "helper" methods that I've broken out of longer methods, etc.) Being dogmatic about them and telling people "never use regions" is just dumb. It's a tool. Use it as you see fit. If you use it poorly, others may (or may not) ridicule you. But if it helps you get work done, then the Disciples Of The One True Faith Of Not Using Region Directives can FOADIAF.
Personally, the only time I use regions are in unit tests, to cleanly demarcate helper functions or classes from the tests themselves. If I ever get the feeling that a class is getting to the point that parts of it need to be collapsed or hidden in order to make sense of it, I'd rather spend the time to break it out into more concise classes that "do" one thing well, rather than just hide stuff down the back of the proverbial sofa.
I should already be moving towards .NET Core in general.
I misread this at first and thought "holy crap, those came out in 2002/2003!" Then I realized it said .Net *Core*. And now I feel old.
Im pretty sure you could make that WinForm class partial... maybe they come partial as default. I've never used regions when partial exists now.
Or refactor so that there are no classes with that much content. I can't believe that any file that is large enough to require regions can't be broken down into several (testable) classes and helpers.
As someone with a lot of C# expertise and little SQL experience, I went the Entity Framework route on a project. I wish I would have just learned more SQL. I found Entity Framework to be a bit of a pain to use. When it works it is great, but too often it just didn't work. I wasn't doing anything all that complex either.
&gt; Does this ever happen anywhere? I'm in a real-world money-making enterprise, albeit a smaller one. We don't hesitate to refactor our DB schemas. Just last week I split an important and widely used table that had over time accumulated a few distinct groups of properties, and while doing so also changed some simple properties to relationships, one with TPH inheritance, added some columns for new features, etc.
It sounds, from this post, like you've completely given up on the concept of clean code. 
EF just seems like a clunky mess when you can write SQL. And then you run into a client who wants to "take ownership" of their database and starts messing around with your SQL scripts and breaking things, but demanding that you "help them" rather than just restoring it from source control. That's when you start looking at deploying your own .Net assemblies into SQL. And then you start considering percussive homicide against the client.
fork CoreClr / CoreFx rename all “System” occurrence to “Whatever” ship as self contained on your own runtime 
I used to do like you’re doing, now I just group similar stuff together. The only time I use #region is for my IDisposable and IEquatable implementations. I need them, but I don’t want to see them. 
I'm not in charge. Nobody seems to mind that I clean up every file I work on, though.
A helper class that binds to an event on your textboxes, so when a user selects the type of object you go to the database and get the data. Pass it to a second helper that you bind on the second textbox and start filtering after say 3 keystrokes. https://stackoverflow.com/questions/343468/richtextbox-wpf-binding This is a good example of how to do it in WPF. 
Why not use reflection? &amp;#x200B; Action&lt;string&gt; writeDelg = Console.WriteLine; var consoleType = writeDelg.GetMethodInfo().DeclaringType; var readLineMethod = consoleType.GetMethod( "ReadLine" ); readLineMethod.Invoke( null, null ); &amp;#x200B;
Cool when can we expect .net framework EOL
Here are my cardinal rules of #region usage: * ***NEVER*** use #region blocks within a method. This is a clear red flag that your method is too large and doing too much, *and* everything inside the #region probably should be pulled out into a separate method using the Extract Method refactoring. * ***AVOID*** using #region blocks that each only contain one or two items. * ***AVOID*** using #region descriptions that are self-evident from the code. (In this regard, they're much like comments.) Other than that, use them however works for you.
You can look into an Excel reading library, like [EPPlus](https://github.com/JanKallman/EPPlus) which will let you read the Excel data relatively easily. That said, one quick in-Excel way of doing this might be to leverage built-in AutoFilters: https://support.office.com/en-us/article/quick-start-filter-data-by-using-an-autofilter-08647e19-11d1-42f6-b376-27b932e186e0 If that's sufficient, then you may not need to go through the entire process of building an app and printing/displaying the reports.
Which is the exact same apart from slightly confusing because you don’t know which file to look in to find a method
That is why I dont really like c#. It is so unopinionated and makes it easy for a (bad) programmer to shoot itself in the foot.
You can’t just throw overloads at something, it’s the implementation that changes, not the parameters or return value.
Good documentation is generated by the code and comments Only bad documentation gets out of date 
The opposite is probably more truthful. You need a fair amount of SQL knowledge to operate an ORM in a production-quality environment. Additionally, you need knowledge of how the ORM generates SQL from the host language. Finally, you need some knowledge of the host language itself, but this is probably less critical than the other two. ORMs exist to reduce boilerplate. Beyond this, they do not eliminate the complexity of translating between relational and non-relational data. In other words, they are a tool for experts not novices. 
You're question doesn't make sense on it's face, but I think I understand what you're saying. First what doesn't make sense is that you say that you submit a program that talks to a game engine through the standard IO (console reading/writing), yet, you don't even know what kind of data would be sent to or from the server. That doesn't seem to make sense, because you don't have access to the very facility you would use to implement your game bot. &amp;#x200B; What it sounds like is that the part of the software you're responsible for doesn't use standard IO (console reading/writing); you're probably given an interface to use to interact with the game engine, and the IO bits are implemented for you. Is this right? If not, could you clarify the premise of your question?
A large majority of the frameworks that developers use on top of .net 1.0 / 1.1 would be an issue, if they never updated their code base for 2.0 support if there were any breaking changes, or even if maybe there is no suitable replacement that in the past has been counter intuitive on Cost of Upkeep vs. Cost of Re-Writing an entire segment of the application. I look at Government web-based apps.
EasyMigrator.FluentMigrator targets FM 1.6.2. [FluentMigrator 3.1.3](https://www.nuget.org/packages/FluentMigrator/3.1.3) is now available, and that is very extensible. Also, the new maintainer, Mark Junker, @fubar-coder, is very responsive to questions. He is the one who fixed a ton of extensibility issues within FM. The other, practical issue Migrator.NET faces is it has less than 50k lifetime downloads, whereas 3.1.3 version of FM _alone_ has over 100k. That said, there are some things I dislike about FM and I've been discussing them with Mark. These are things that I see no migration library do well, mostly because most of us just want to get on with coding rather than refactoring database schemas. I've never met an engineer who gets their jollies from refactoring databases.
I've sunk some time into porting from v1 to v2. There are few breaking changes in asp.net. 
Then you can use inheritance for that kind of situation.
https://lowrymedia.com/2014/06/30/understanding-entity-framework-and-sql-indexes/ I was wrong about it outputting different SQL, but the database engine will use indexes to serve the SQL it's given if it can.
There is a difference between what can be done, and what is ideal. Often business costs and other "things" get in the way of a perfect codebase. Not to mention work on legacy codebases where you might have a 5k line class that you need to at least organize, even if you can't refactor.
thank you for the help! I mentioned the auto-filter thing to the company when they first reached out to me for hiring, and the didn't want anything to do with it. They want their own Graphical User Interface to assist them at all of their sites across the US.
And if you don't have the time/budget to do this?
In looking at EasyMigrator, it certainly makes migrations easy to write - but I am a little worried it wouldn't be easy to read. For really large refactorings on larger databases, you really need to dip down to the SQL level to refactor things correctly. As an example of totally bonkers things I've dealt with: When you change an ntext column to nvarchar(max), you have to not only do a phantom update to that column, but you must CAST the value of the phantom update or you will run into strange scenarios where the update hangs. e.g. UPDATE MyTable SET Foo = Foo -- won't work consistently UPDATE MyTable Set Foo = CAST(Foo as NVARCHAR(MAX)) -- works consistently
For basic CRUD, EF is brilliant. Will save you heaps of time. For more complex data work, go SQL and do it yourself. 
If it's not less noise than having the methods all in one class, then don't do it, obviously. But if your form class is so big that you are resorting to regions to manage it, then that is pretty noisy. So splitting it into several classes is likely to be a net reduction in noise.
You realize this is true of damn near every language out there right? And that having static typing REDUCES incidents of foot-shooting?
Great, thank you! I’ll have to google the service locator pattern too 
Thanks for the link!
Reading the code separates the men from the boys I guess. And yes, after Roslyn was released, I f12 on Microsoft’s libraries all the time and read the implementations.
Just asking but why do the company use excel as database?
&gt;Never use region. Unfortunately dogma has little place in programming. There is a time and a place for everything, even if you can't imagine it. Even if said time and place is driven not by design ideals but by time/business constraints.
The value prop of ORMs like EF is that they give you a bit of type-safety and convenience around simple database queries. EF also provides some other goodies like schema migrations, which you'd otherwise have to manage yourself (or with a library like FluentMigrator). ORMs however, are not without their limitations. You'll probably find that once you start writing non-trivial queries that require special views or other complex logic, you'll quickly pass the ORM's point of diminishing returns. Writing these queries in straight SQL is probably less burdensome than using the ORMs domain-specific-language and analysis the generated SQL. For this reason, it's rarely ever a "mistake" to pass on EF in favor of ADO or something closer to the DBMS. If you're regretting not using EF, I wouldn't be too concerned. Better to err on the side of side of ADO.NET.
Regions are the horizontal scroll bars of coding. They make the scroll wheel on your mouse less useful, because they require precise clicking rather than using the scroll wheel like it was intended.
You push back and make time. Your PO/PM/ whoever is assigning you work wont know about codebase quality issues and give time to fix it if you don’t tell them there’s an issue. 
1. No its not for every language, not every language has unecessary gimmicks as c sharp has 2. Yes I agree that static typing reduces foot shooting. I don't really get how that statement is relevant as static typing wasnt the subject. 
If the implementation changes then you can leverage inheritence as one person said, or going back to what I said about additional Paramus, you could create a new enum you pass in and switch on. Case 0 do this, case 1 do that. Or go compositional.
Which this is an ideal scenario where business works as we would expect it to, often it's not how reality plays out. Client wants a feature, client only has 1 week because they promised their clients it would be done before consulting us. We now have to rush to get the first possible prototype out the door in a week. Client likes it, but refuses to pay for anymore work since it's a "working" feature. Now you have a garbled mess of technical debt waiting for the next poor soul to drive into depression.
Naturally. In that case, yeah, you can embed the Excel "database" within your WPF application (within an assembly DLL) to prevent users from editing the data source, or load it from some shared file path (say a network share if it's supposed to be updated). There are a lot of tutorials and help out there using EPPlus (here's one I found with a quick google: https://github.com/JanKallman/EPPlus/wiki/Getting-Started) Best might be to define a simple C# class (call it say, `Operation`) that has `Phase`, `WeldID`, and `FlangeID` properties. Then read each row of the Excel spreadsheet populating a `List&lt;Operation&gt;` filled with each row of data. Then you can bind that against your drop downs and filter in whichever way makes sense. I would suggest to try and separate your GUI and Excel concerns. Build your GUI to bind and work against a `List&lt;Operation&gt;` where it doesn't care _where_ the data comes from. That should make it easy for you to test/develop with since you can just instantiate/populate a bunch of test records via C# code. Your Excel reading code's only job is to read some Excel file (from whatever source you care about) and produce a `List&lt;Operation&gt;` that's it. Read it and get out. Then supply that `List&lt;Operation&gt;` to the GUI. That should give you some flexibility for if/when requirements change, or they ask you to use a different location for the Excel "database", or _whatever_.
Not when each class has a different implentation: of course you use an interface, but that still means the class has to have the implementation code
What happens to you if it isn’t done in a week? And what is tying you to this company?
That's exactly my point though: you do not have to be RESORTING ro regions to manage it... sometimes it just feels more logical and convenient to separate the code within the class. The class can still be a manageable size with a reasonable amount of overall code while separating rarely touched code from the "meat" of the logic.
Yes, yes it is for every common language. List off languages that prevent a developer from writing shitty software? #2 This is exactly relevant, since you are complaining about C# not being opinionated, yet it being so strictly static IS an opinion that helps you from writing worse software than you could have otherwise.
That's why I specifically brought up a use case of "Code you rarely need to change)... code you don't scroll to often etc, Also, there are keyboard shortcuts to expand/collapse to outlining. I regularly use it to hide all method bodies so I can just glance through the definition lines: but it solves the same problem you suggest
That sounds horrific... why would I want a hideous switch to maintain, rather than just hiding a region with a handful of Minimize/Maximize methods? Sometimes I thing people get carried away with theoretical optimizing, and are so busy refactoring that they don't realize how much more of a mess they've made...
It was one suggestion of many. You just said you had the same similar admin code in 8 different forms. Wouldn’t it be easier to maintain all that separate admin logic in one place? That’s the goal. Maintainability, testability, reuseability. Using a switch on an enum was one suggestion of three.
&gt;And what is tying you to this company? A paycheck. That and it's been difficult to move on since I've managed to land 3 employers in a row like this, and it looks pretty shitty that I've came and went from 3 jobs almost a year apart.... On this one I was even extra diligent about grilling the interviewer about what they do, how this are managed, do you do legacy support, greenfield projects?....etc Almost nothing that was said then actually held true...
Using a switch on an enum was one suggestion of many. You just said you had the same similar admin code in 8 different forms. That’s 8 places to maintain. Wouldn’t it be easier to maintain all that separate admin logic in one place? That’s the goal. Maintainability, testability, reuseability. Seems your way is the messy one to me.. 
Removed: Duplicate.
\#region comments start here
\#endregion
It’s not 8 places to maintain when they’re implementing different code. I’m not a moron, if I can throw the code in a method elsewhere and reuse it, I would: it’s in 8 places because it does 8 different things.
Then seperate the code into multiple classes. Why is that too much noise for you but regions aren't? Use of regions in the way you are suggesting is an uncommon convention and it does nothing for reusability/testability. C# is an object oriented language, these design patterns are available for you purposely to use in situations like this.
The only valid place is say when you have a long list of constants in that class, that don't really belong anywhere else. You want to collapse those constants and look at the code. That being said, I only saw that once over the years.
Remember that .NET Core 1.0 still used that horrible json project file. That's not a trivial migration.
Well that makes sense. Have an interface and a class per implementation. What's wrong with that?
This isn't an optimization. Your colleagues don't want to have to deal with understanding the whole business logic behind your form when they just need to rearrange some buttons.
OP: &gt; without referencing `System.Console` itself Your code: &gt; Action&lt;string&gt; writeDelg = Console.WriteLine;
Because to me a class should encapsulate an object: it should do the work of that object and nothing more or less Splitting code into multiple files for no reason other than “I don’t like regions” simply seems illogical to me. We’re not talking about a class that’s excessively long or complicated - I’m just talking about grouping some rarely-modified code into a region so it can be grouped and hidden for convenience It feels to me like people are trying to avoid regions out of religion rather than logic here. I agree they are a code smell - but not every code smell is actually a problem. Code smell doesn’t mean “don’t do this”, it just means “stop and check this is what you actually want to do”
It's a pretty large topic! I don't know what part of your journey you're on, but it's a design pattern. Like all design patterns, it only starts to save you more trouble than it creates as your applications reach a certain level of complexity. So it's possible you'll hear about it, see it, say "that looks stupid", and be *right*. But one day, you'll end up accidentally discovering why you need it. Forgive me if this example feels below your level, I find it's best to talk about this pattern in terms of how it improves the heck out of novice code. Imagine an app that loads, edits, and saves a file. Most people start their journey writing something like that. Most novices are going to write that all in one Form1.cs file. Saving the file will directly use some System.IO type to load it, etc. So we can imagine the structure like: public class Form1 : Form { protected void When_Open_Is_Clicked(...) { // display an open dialog // open the file // load its contents } protected void When_Save_is_Clicked(...) { // display a save dialog // open the file // save the contents } } Each of those comments is 3-5 lines of code depending on how you go about it. It all interacts directly with UI elements. That makes experienced developers cringe. Someday, the file format might change, and when we write our code this way it means we have to edit a lot of different things to change any one feature. We really would like to separate the concept of "open or save the file" from the concept of "be the UI". So instead, we make a class that represents the data we'd load from the file, a class that loads/saves the data, and we make the form interact with that new class: public class FileData { // imagine some data properties here } public class FileStore { public FileData Load(string path) { // open the file for reading // load the data // return the data } public void Save(FileData data, string path) { // open the file for writing // save its contents } } public class Form1 : Form { private FileStore FileStore { get; set; } // This technique is called "constructor injection" public Form1(FileStore fileStore) : base() { this.FileStore = fileStore; } protected void When_Save_is_clicked() { // var path = Get the file name // var data = Create a FileData object based on the controls FileStore.Save(data, path); } protected void When_Load_is_clicked() { // var path = Get the file name var data = FileStore.Load(path); // Use data to populate the controls } } What's happened here is I've expressed, via constructor, that Form1 requires a dependency in the form of a `FileStore` object. Anything that wants to create Form1 has to create one of those and pass it along. In return for that extra complexity, I've moved the answer to the question, "How is a file loaded?" into the `FileStore` class. Some day, I might convert to a database, or a different file format. I can do that by editing the `FileStore` file without changing the form. Or, if I want to answer, "Who in my application loads this file?" I can look for calls to `FileStore.Load()` instead of the less-reliable "do a text search for methods like `File.ReadAllText()`". In addition, you tend to get more clarity out of this. This is what the code to load a file might've looked like in `Form1` before: var fileContents = File.ReadAllLines(filePath); foreach (var line in fileContents) { var tokens = line.Split(","); this.txtName.Text = tokens[0]; ... Now it looks like this: var fileContents = FileStore.Load(filePath); this.txtName.Text = fileContents.Name; ... We shoved a lot of "how to parse a file" behind a helper class. That means when we're writing the form's code, we spend our time on "how to display the file's contents" instead of "how to parse the file". This makes our form code shorter and easier to maintain. That's really the basic why and how of dependency injection. It's a tool we use to break large, tangled classes into more understandable dependencies with clear interactions. One of the biggest benefits is it lets your code say WHAT it does instead of HOW it does it. There are a lot of side benefits, such as increased testability. An obvious downside is as classes gain dependencies their constructors get complex. There are tools called "containers" that help us with that. At app startup, we tell the container about every type in our program and which constructors it has. Then, later, we ask the container to create types for us. It looks at the constructor, then creates all the dependencies it needs automatically using the information we gave it. Obviously, this gets very complicated. So you don't tend to see it so much in small apps and definitely not in tutorials about other things. The first time I used this pattern, I had more code devoted to my container than the rest of the app! That wasn't a good place to use it. That's the trick: you have to spend a few dozen applications without it to appreciate when it helps and how much it helps. 
We prefer to keep the code in a more standard language. So our clients define requirements via a domain specific language and in the background we convert to our preferred language. It just makes it easier to troubleshoot issues since the requirements only change once a year. If the conversion isn't perfect it's fine to just hand tweak. I'm sure we'd try harder if this whole process had more churn.
Not saying your a moron at all, and I can’t see the code, so I have to go off speculation. Can you tell me what is similar about the 8 admin methods, and how they are unique from one another? I can’t yet think of a reason that this kind of thing couldn’t be simplified by a service, and that might help me see more.
Okay cool. Can a list hold multiple columns of data, or would a multidimensional array be best?
&gt; Because to me a class should encapsulate an object: it should do the work of that object and nothing more or less Right, exactly. Now, is the class supposed to be a form (which is just a view, not any business logic)
This is actually a good example of a rare use case for regions, I admit I’ve done that in tests with seed data or similar things. However, I will admit now in my years that a more disciplined approach might be to put all of those into a Json file if they are that long. I’m ok with using regions for some constants, but please don’t put them around properties fields And/or methods haha
downvoted so this comment gets to the bottom
Compositional, that’s what I would do, too. Once the interfaces and implementations are done, you can usually think of a way to register them in your di container so that the different implementations are used for the correct form automatically. You could solve this with a functional approach too by making a mini static fluent api with method group chains. It could also be solved by more rudimentary ways like introducing an enum. Anything but have similar admin code in 8 different forms
A view can have view logic and UI interaction, without having business logic. Again, you're just clutching at reasons that it MIGHT make sense not to use regions... all I'm saying that, like with any other code guideline, there's no "must" or "never" in this game
Yea, this is maintainability and architecture talk, “optimization “ was outta left field
There is a difference between perfect and manageable. An unmanageable codebase is going to cost more to maintain in the long run, so you aren't really saving money and you will eventually start hemorrhaging money. It is never cheaper to have a five hundred line stream of consciousness method that requires you to use regions or a class that does way too much. Even in a legacy code base, if you aren't managing your debt, it's not going to go away, it will just get worse and ultimately, there will be a client need that can't be fulfilled because of cost to develop and risk of change. It is true that it only costs $5 to duct tape a rotting load bearing stud, but you have to evaluate that savings against the cost of rebuilding your second floor 
I’m with you, this sounds like mixed responsibility here. The forms should be pure ui, just components and styles, maybe ui state and navigation. The admin stuff should be encapsulated in a logic/service layer which is I keyed and called from the views. I’m hearing evidence of leaky code, and I hate leaky code. 
Let's go with the simplest one I can think of: Minimizing/re-opening the form. Let's assume that, for business reasons (your manager wants it to work this way), you can't just use the standard built in form management. When you minimize the form, each form has slightly different logic in terms of, for example, triggering other methods/events. And when we re-open a form, we don't have a simple "Close all other forms, open this one" that we can re-use. They're all similar in that they're all basic "The user has clicked the hide button, and we need to save/cleanup this form and perhaps close another child form", but each does this in slightly different ways. No method is more than about 5 lines long, none is doing anything complicated... it's just doing a couple of simple tasks in a combination that is unique to it amongst the 8 forms, and there are only 3 or 4 of these for each form. None of these methods are changed more than once in a blue moon, because they're not complex and already do what they need to do. To move a 5-line method to a switch seems ridiculous. We can't overload the method because you can't overload `void Minimize()` in any sensible fashion, and we can't extent a parent class because each is doing something serious. More importantly... we don't actually gain much, if anything, from moving the methods to another class: the overhead of a switch would be ridiculous for a 4 line method, and a class with MinimizeInputForm MinimizeSomeOtherForm, MinimizeMenuForm etc would be just as ludicrous. I'm yet to hear a good logical argument of why putting 4x 4-line methods into a Region and hiding it is a problem. All I'm talking about here is a situation where we've got &lt;20 lines of code total, which do very little but are necessary, and would normally be tucked away at the end of the class doing no harm... so we put them in a region so we can hide them out of the way for convenience sake
That's generally been true of minor version updates, but major version updates have always included a variety of breaking changes, not only in just api but in behavior. If you've literally never had any issues to resolve updating the framework, then your apps must not touch very much surface area of the UI stacks at all.
Nothing, but we're discussing regions? There's an interface that each of the 8 classes implements, but I'm now being told I should move those small implementation methods out of the form for... no reason whatsoever, really, other than the fact people hate regions.
To be clear, the BUSINESS logic is elsewhere. The form only has UI logic: I'm simply saying that sometimes throwing a few small "utility" parts of that logic into a region can be convenient
You can, but forewarning, many would consider the service locator pattern an anti pattern and I would agree.
I disagree and find it not at all uncommon to have a coherent unit of code that is several hundred lines long, where splitting it further would be only for the sake of file length (and with a trade off in increased file numbers - which isn't a clear win for shorter length).
Check out Martin Fowler my friend. He is our messiah https://martinfowler.com/
&gt; Personally I find that to be an antipattern since you can just be consistent in how you order things in your classes. The problem isn't when I initially write a class, it's everyone else adding code down the line. I find that adding regions to separate properties/constructors/methods makes it harder for "the next guy" to put code where it doesn't belong.
There's been minor items here and there but I'm straining to think of anything that wasn't resolvable in a couple minutes. And even those have been rare. What have you hit in the past 5 years or so (since 4.5 was released) that required any sort of substantial retrofit?
I usually just grep all region text right out from the project. Blech 
I ding this in code reviews, if the coder is sloppy with consistency its an indication of other issues. 
Extensive unit tests take up a lot of space, so I use regions there. I also use regions to break up monolithic mega classes from out legacy code into digestible areas
I am preparing to leave my current job because of this same situation...went from consulting and learning lots of new stuff, albeit in a stressful environment, to being the only developer at a company and maintaining a Web Forms-based CMS with no tests, poor documentation and no other developers on my team. I was okay with it for a few months, but now it's become an Office Space situation where every day sucks more than the day before... 
This answer I like. Currently working on a project where everything is wrapped in a region. Then you open them up there are regions inside regions, very distracting when all I want to do is look at the bloated classes. &amp;#x200B; Ctrl-M-L is my best friend...
&gt; An exception to this is calling `System.Console.WriteLine`.
 #region Payment code bullshit here
&gt; code review Yeah, in an ideal world... Every project seems to go the same way: start strong - lots of code review and collaboration. Eventually, the looking deadline that business decided on takes over, and stuff goes from "clean" to "get it done."
 #endregion
Beware of bikeshedding: https://en.wiktionary.org/wiki/bikeshedding#Etymology 
This is lunacy... an excel file that is connected to a thick client application? Excel is not intended to be used as a database. A client application for that purpose makes no sense. Read that data into Microsoft SQL and use an SSRS report or a web form to display the data.
Here's another set of tricks: [https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices?view=aspnetcore-2.2) &amp;#x200B; In particular, something I thought about is ArrayPool&lt;T&gt;. This could also be very handy for Azure Functions. Just a hunch.
I personally have shifted to never use #region where I can help it. If I'm having to use #region or code-folding or other techniques to hide my code, it's a good sign that my code is too cluttered and I need to reorganize. Find groups of methods which represent a sing concept or area of responsibility, and move them to a new class.
I’m starting to like EF less and less. It’s easy to write horrible queries and I find as soon as data gets big or the queries get complicated, I’m writing sql scripts or stored procedures. I’d rather just have EF to keep my architecture simpler, but that never seems to be the case. Code first migrations are nice, but I don’t want to do stored procedure updates in migrations, so I wind up with 2 steps in my release pipeline to get everything dB-related released.
If you need regions in your class, you probably violating SRP rule.
I hate regions. Thank you for this, installing it right now. 
There are a few situations where I personally wouldn't use EntityFramework or similar ORMs (NHibernate, etc): 1. When your loads are limited to loading large Aggregate Roots as a single entity. For instance, a Product almost always loads in its entirety, you rarely want to look at part of a product in isolation. If you're always working with the Aggregate as a whole, you'll probably be much better off using a document-oriented DB or blob storage. (This probably doesn't apply to you, since you have the DB in place already) 2. If your models are very deep and complicated, especially where subclasses are involved and lots of conditional joins. For example, UntaxableProduct and TaxableProduct both inherit from Product and inhabit the same table in the DB (with Discriminator) but we only want to join to the TaxRate table if the type is TaxableProduct. These kinds of situations start to get real ugly in EF, especially as more of them are added to the model 3. Where you need precise manual control over the text of your queries, for DB performance reasons. EF generates notoriously ugly and inefficient queries sometimes, and things might be a killer for more "modest" DB infrastructure. 4. When you already have the schema generated and your queries are written. There's no sense going back and rewriting existing queries in LINQ, because new code brings new potential for bugs. If you have it, it's stable, it's not changing a lot and it works, don't rewrite it just because you think EF might be "better" in some general kind of way. I personally have reached a level of frustration where I may never choose to use EF again, but other people may make different decisions.
I have used them for #region input validation. Because that shit's boring
I have been avoiding .Net core, waiting until the releases stabilize and it’s more feature complete. Is 2.0 good or should I wait for 3.0?
&gt; a Json file sometimes you just don't want to bother with resource files. I guess regions are a tool in the toolbox, but one that should be very seldom used, like singletons and inheritance
Do modules A, B and C interact with each other at all? If so, it will be worthwhile from a CI perspective to build and test every combination. If there's no interaction, you can probably get away with just building the few combinations you need right now. One technique you can consider is something like Git Submodules (or, whatever is the equivalent in your source control). Have a new "integration" repo where you submodule in The Application, A, B and C, and then have a build script to build the three solutions, bring together combinations of build artifacts, package the combination, and then move on to the next combination. This kind of solution could be easy to script to be data-driven. Though things can start to get really hairy if you are building different projects out of different branches. Another technique would be to build each repo separately and deploy built packages to a staging area. Then you could have integration machines pull these build artifacts in different combinations, test and then package them. This technique would allow you to really separate out and sandbox your combinations, but at the risk of making your CI pipeline less "real time" and more schedule-based. Good luck with your project, this sounds like quite a fun challenge to solve. &amp;#x200B;
I'm gonna give this a go because I believe teaching someone else is a great way to solidify a concept for oneself. Imagine you have a class called `User` with a method called `Delete()` that uses a class called `DatabaseCommunicator` to mamages removing the user from the database. The basic implementation would be to instatiate the `DatabaseCommunicator` in the constructor: ``` public User(){ this.databseCommunicator = new DatabaseCommunicator(); } ``` That is all fine and dandy until you want to write some tests. Imagine there is a a class called `UserManager` that has a method called `DeleteAllUsers()`. It iterates over all of the users and calls their `Delete()` method. You want to test if the `DeleteAllUsers()` method works, so you write a test that instantiates a `UserManager`, instantiates a couple `User`s, calls the method, and succeeds if `Delete()` is called on the users. Now you definitely don't want to setup an entire database just for this, but the `Delete()` method is gonna fail big time if the `DatabaseCommunicator` can't connect to the database. That is where Dependency Injection comes in. ``` public User(IDatabaseCommunicator dc){ this.databseCommunicator = dc; } ``` Now when you write the test you instatiate the `User`s you can give them a mock `DatabaseCommunicator` that doesn't actually require any databases at all. Your User class still behaves like it would in production except that you don't actually need a database setup to use it
The company at work at just purchased some new shiny tool that checks our code for security issues and all that. It only supports DNC 1.x. I told them we wouldn't be using it.
Horrible? I thought it was great (at least compared to how bad csproj was at the time they introduced it).
2.X is amazing. 3.0 will mostly be for WinForms/WPF support. Tons of new stuff coming to 3.0 but you can do everything you need with the current version of .NET Core as long as it doesn't involve a Windows GUI.
Those static analysis tools pretty much suck and the ones I've been subjected to generate huge amount of false positive and subjective issues.
A winforms app with 8 ways of minimising and maximising... Time to file new 
I really hope you didn't get that code at a Meetup.
It's an example, dude
I generally find that if code is well written classes are small, things are named properly, and they’re not really needed. However, they can be helpful when trying to wrangle legacy code or in cases where a bunch of code is generated for you and you just want to keep it out of the way. 
This is actually exactly how i use them for complex classes.
Oh God here we go with the region debate again. 
Cool! I’ll check it out!
Thank you, I will keep that in mind, nonetheless knowledge about it is good to have.
Will do!
The app I'm currently working on at work has the entire payload under 350kb gzipped... That includes styling and a couple SVG files with React and logic. I've yet to see any moderately complex application under twice that size. That doesn't even mention the pain that creating a component is in angular. Here's an entire react hello world. import React from 'react'; import ReactDOM from 'react-dom' const App = ({ name }) =&gt; ( &lt;div&gt;Hello {name}&lt;/div&gt; ); ReactDOM.render(&lt;App name="World" /&gt;, document.querySelector("#app")); And that's off the top of my head... Replace with inferno or preact and it's under 30k iirc. So it in angular and it's several hundred. I don't like angular dependency management. The http utility doesn't bring much and rxjs is freakishly overengineered for most cases, good luck trying not to use them. The DSL for templates get wonky with async. Etc.
"They want their own Graphical User Interface to assist them at all of their sites across the US." Ha-ha.
3k line MVC is what I've come to expect from Senior Devs and it is why I don't advertise myself as a Senior Dev. Any challenge to the 3k MVC standard is usually met with, "I've been doing this a lot longer than you, I know what I'm doing".
It would be salaried, based on experience
2.2 is fantastic. We have lots of projects in production on 2.2. The only thing that I have come across that seems to be missing features is Entity Framework Core 2.2, but its usually pretty minor and can easily be solved with a workaround. I believe most of this will be solved in 3.0 anyway with the LINQ improvements.
First time hearing about it. I'm uninterested in it. If you have had repeated memory access issues in C++, it could be for you. I would stick with C++ since there is little to gain by using Rust. When performance and/or a low memory footprint is paramount, use a native language like C/C++ over a managed language.
Rust isn't a managed language...
Or WCF
&gt;An unmanageable codebase is going to cost more to maintain in the long run, so you aren't really saving money and you will eventually start hemorrhaging money. Trust me, you're preaching to the choir here. I've preached this in different ways till I'm horse, and clients and my companies management still don't "get" it.
.NET core is lowkey like amazing now btw.. It'll blow the doors off of almost every other common stack and it now runs on (basically) everything. I'm not even a .NET developer and .NET Core 2.X RPS benchmarks are incredible.
Yeah, partial classes exist for a reason.
&gt; 2.X is amazing I'm running 2.2 on some apps. Just keep in mind that [it's 2.1 that's LTS](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/) 
How os this related to c#?
I completely agree. I personally find I dislike them for this reason more and more. It let's people stick their head in the sand and pretend bad code isn't there. 
Linq2Db, better performane (on pair with dapper), better sql queries than EF and linq support.
I didn't say nor imply Rust is managed. OP asked about building a 3d graphics or game engine too.
&gt; you can do everything you need with the current version of .NET Core as long as it doesn't involve a Windows GUI. WCF and WF don't involve a Windows GUI, and neither has been announced as part of 3.0 :-(
Step 1: Install a SQL DB (your choice of flavor) Step 2: Your app talks with your DB Step 3: Make an excel document on demand (RDLC, EPPlus, etc.)
Meme 
WCF server specifically. They built a WCF client for .net core.
Let's all give the guy a break. If you've ever worked a consulting gig, you'd know that sometimes clients hit you with some super messed up requirements. As much as you'd like to change what they are doing there are probably reasons beyond your control for them to be doing whatever crazy ass thing they doing. All you can do is suggest a better approach and if they don't want to hear it, well you work with what you got. Otherwise they'll find someone else to do it and you're out a paycheck. &amp;#x200B; So back to the problem. As was suggested in another thread, what I would do is use OpenXML to read the information into a data table as described in [this article](https://dotnetthoughts.net/read-excel-as-datatable-using-openxml-and-c/). Once the information is inside the datatable you can query as illustrated in [this other article](https://www.dotnetperls.com/datatable-select). In essence your code would look like this. &amp;#x200B; DataRow\[\] result = [table.Select](https://table.Select)("Phase = '" + phaseTextBox.Text + "'"); &amp;#x200B; Assuming the user typed 70145, this would get you the first 3 rows worth of data. From there it would appear that in the Category drop down they select either Weld or Flange. You'd need to have your code look at this subset of records and then pull out the values from one of the two columns depending upon which they selected. Once you have that, you're good to populate the third drop down. &amp;#x200B; As others have said, this is a text book case of when to use a relational database as you have two pieces of information (Weld &amp; Flange) that have nothing to do with each other outside of the phase they are in. Having a phase table, a weld table, and a flange table where the weld and flange tables are related to the phase table via a key relationship would be the way to go. However, I'm just going to continue to presume you can't move to such a structure because... reasons and hope the information provided helps you get the task done. Good luck! &amp;#x200B; &amp;#x200B; &amp;#x200B;
Yes, a contrived hello world react app is smaller than an Angular app. Who woulda guessed? You planning on bringing in React Router and Redux and all that bullshit too. Angular has come along way. What about polyfills? What about the horrible styling in React? But yeah the pain of creating a component is angular is real bad. ng g component HelloWorld. That was a tough one!
I disagree. I've never found any code that's cleaner by being more lengthy. I would suggest taking anything you would put in a region and making it a class or helper. If you can't find a place to split the code, then I can't see how adding a region would change that. 
Rust is a "native" language (in the sense I think you're using that term), and is actively working on being a viable language for 3D graphics and game engines. There's already [a lot of progress](http://arewegameyet.com/) in that area. &amp;#x200B; That said, this is not the right subreddit for this question. But please don't spread false ideas.
That's what makes you a valuable coder. Believe me, people will notice that you code cleanly and spend extra time refactoring to make it better. I don't know how long you have been in the business but coders like that suddenly become team leads (and they are frequently surprised that anyone noticed the extra effort the have always put in.) Keep doing what you are doing, it will be rewarded at some point.
X = 5; // set x to 11
That's not a reason to skip the refactoring step though. Make it work, make it fast, make it clean, then check it in. If you don't have time for that then pretend it's not working yet and you just need a few more hours :)
Did you try googling "selenium.net core"? My first result was https://www.automatetheplanet.com/multiple-files-page-objects-item-templates/ But, beyond that, you don't really need to have your selenium tests written in .net core just because your web app is in .net core, in case that didn't occur to you.
Hard to tell but at a glance, it seems that your guestids are getting reset every time you click join. Are you correctly saving your guestids in your plan model in the backend (join endpoint).
Urgh... I'm on mobile and was going from memory. Completely forgot those. 😬😬😬
In the context of this discussion though if your method has clear sections that regions make sense than it's better to just refactor that code section into it's own method. Using a region to collapse a section of code just means you lose visibility of side effects moreso than having a method act as an abstraction
You were correct. It wasn't saving the GuestId's properly due to the fact that we were relying too much on the razer engine and not enough on the controller. We moved the list functionalities to the home controller and it fixed all of our problems. Thanks for the tip!
The day they can get the .NET Core executables for a "Hello World!" program under 5MB
deprecating is what microsoft does best.
I'm guessing last minute school project? 
r/MSAccess
It's highkey lowkey, you know? It's super highkey, 'cause lowkey it's not that lowkey, highkey?
Valid point, there are trimming packages available to help in this area though. 
1) I haven't used Access before, and heard it can differ from more standard DB tools, but it sounds like you want a datetime field 2 Again, the Access syntax might be slightly different, but: SELECT COUNT (*) FROM [table name] WHERE [column name] = [value] If it returns a number greater than 0, the value exists in your table.
Would you be able to do an example in source code?
Unit tests. I create a test class per real class, and put one region per method being tested.
Is it though? I don't think that file size should be surprising. Imagine if every single node framework also shipped with the entire Node library. PHP? It would have to ship with apache2. .Net Core's portability comes at a cost, yes, but I don't think it's systemic of some deep flaw in the platform. Perfect example: Java JRE which is something like 36mb. 
If you post your source code, I or someone else might be able to help you out, but we won't do your job/homework for you.
Thank you so much man. You really helped! Yeah, what some of these people do not understand is when your brought into a company to do something like this, you don’t question why they want to do it a certain way, or they will drop you faster than you can type “public static void main” lmao. As long as I’m getting that check at the end of the week, I don’t care how or why I have to do the certain project. That’s how you work yourself up in this profession. But anyways, enough of me ranting. Thanks again dude for your help!
It seems more like the author was surrounded by people who insisted "this is the way it's done" without being able to explain why, or how. More like these people had only ever heard of a hammer, and so when faced with a screw they make it work with the hammer. They never stop to think "this seems harder than it should be, maybe this isn't best tool for the job" because it's the only tool. All his complaints about c# are patterns. Or anti patterns. The author doesn't dislike c#. He dislike bad c#, but doesn't realize that the c# he was taught is bad. 
I have no idea what just happened
Yes, but you don't need to install a separate version of the JRE whenever you install a new Java app. Do you know what the shared version is called that .NET programs normally use? The .NET Framework :p
If only they could have a shared unified code base... a "Framework" if you will ;p
Right, this is the self-contained vs shared library architectures, which is totally a fair critique, but again I don't think it's a baby-with-the-bathwater situation in that .NET Core is inherently flawed. Once you pay the file size tax, the portability of a high performance cross platform application is worth it IMO. The benchmarks are seriously impressive. The only thing I've seen consistently beat .NET Core is golang, and golang sucks. Granted, I'm just a PHP / Laravel dev, so everything is fast to me :)
Literally load it up in visual studio
.net core is officially not replacing the .net framework.
You don’t have to use dapper. This link goes into how to connect to a sql server using Sql connection https://csharp-station.com/Tutorial/AdoDotNet/Lesson02 Try starting here
Deprecation is absolutely needed for security and supportability. And their life lines were already documented. I challenge you to find a company that doesn't deprecate non-LTS features in a timely manner.
? Sure it is, no new Dev is goin into framework
VS 2012 is pretty old. The current version of Dapper is for .NETFramework 4.5.1 and later. I think that requires Visual Studio 2013. Which version of .NET are you using? **** In any event, I recommend upgrading to the current version of Visual Studio, which is free for individuals and small companies.
If you are already using an OleDb connection to your database, then you're already done. // Declare for try/finally OleDbDataReader reader = null; try { // open Connection w/provider connection string using (var conn = new OleDbConnection(...)) { conn.Open(); // Create Select Statement w/Parameters OleDbCommand cmd = new OleDbCommand("Select * from table where something = avalue", conn); // Ask and store results reader = cmd.ExecuteReader() // Profit. } } finally { // Cleanup Connection(s) if (reader != null) reader.Close(); } Documentation: [https://docs.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbdatareader?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbdatareader?view=netframework-4.7.2)
Beginner's shouldn't start by doing Database work. If you are, pick another project like ... Hello World or Tic-Tac-Toe. It will help you get the grasp of how C# Operates. Beyond that, tehbmwman is correct in the MSAccess sub, they will help you with formatting of sql queries for msaccess. for C#, you will need to do your documentation reading, as doing such queries is literally on the first page of the Ole connection documentation page.
Different concerns can be put in their own files, for example implementation of different interfaces. I don't find this use case code smell. Another use case is partly generated and partly hard coded classes, each piece in its own partial.
1) It is a bit ironic 2) Yes it can. Anything can compete with C++ 3) Cannot say. I see double. 4) It is easy to write crappy C++ code. Performance gap can be made as wide as desired. As a bonus C++ is very good at memory leaks. 
&gt; A little "trick" to fast convert between structs in some cases would be using 'Buffer.BlockCopy' It's way, way, way faster to fix your source to a pointer and that cast it to another pointer of your destination type. If you need to actually copy bytes, not just convert, it's also way, way faster to fix your source and destination to pointers and copy 16 bytes + the remainder at a time in a loop.
I usually just use it to hide boilerplate code, like constants/pinvokes/ToString()/etc... IDE support of #region isn't really good enough to use it for its intended purpose.
If you want to get real neat, I would make your roasts a Json file. [ "Roasts": [ "Roast1", "Roast2", "Roast3" ] ] Then you can just make your class read the json file into memory on load, so like ... in your main program you just go: // In your bot's main code List&lt;string&gt; Roasts = Roasts.LoadRoasts(); // Roasts Class w/ Static Method to return the list. public class Roasts { public static List&lt;string&gt; LoadRoasts() { List&lt;string&gt; roasts = JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;(File.Open(roastfile)); } } The nice thing about this, is you just have to replace the json file. Reboot the bot or make a text command to force reload the list even via secured whispers from you/friend. Then you don't have to even reboot the bot. Just update the json file, issue command to reload data and it's done in real-time with no down-time.
If you need to open half a dozen ~50 line files to see all the code that's part of a coherent unit of functionality, that imho is worse than having a single ~300 line file. The amount of code that fits on one screen is often a ridiculously small amount to try to limit a class to. Many are fine with that, sure, but many are not. Anything longer than a single screen's worth might benefit, depending on your preference, from being able to collapse a region.
ASP.NET core with Swashbuckle.AspNetCore. Done.
The correct usage of #region is no usage at all. It is a *mistake*. 
It's been a while since I have worked on the nonquery stuff but ... isn't the @parameter supposed to match the one you put in AddwithValue() So for example, you are saying: sql = "INSERT INTO Car_Information " + "(Car_Manufacturer, Model, Colour, Petrol, Engine_Size) " + //Database values "VALUE (@carMan, @carMod, @carPetrol, @petrol, @engineSize)"; //Values to insert &amp;#x200B; is your query, but you are trying to do: `command.Parameters.AddWithValue("@Car_Manufacturer", carMan);` &amp;#x200B; which should be &amp;#x200B; `command.Parameters.AddWithValue("@carMan", carMan);` &amp;#x200B; no?
Write a replacement for YouTube. :)
Here is my feedback: where is the link?
I am going to put this guy's videos here for you to go through. He does cover a lot of really advanced topics (like Generics, and adding your own AttachedProperty class) and does a pretty good job of explaining what the overall idea of certain things, without going into massive depth until later on in the series. [https://www.youtube.com/playlist?list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M](https://www.youtube.com/playlist?list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M) &amp;#x200B; He honestly made me re-think a few ways I do things just from watching a handful of his videos. I recommend (if you have never done WPF before and are interested) check out that playlist.
&gt; past 5 years or so (since 4.5 was released) Well, that only covers one major version update - .Net Core 1.x to 2.x. As I said, minor versions have been largely straightforward. That includes 4.5-4.7. v4.7 to Core v1.x I would say doesn't count, but if you want to, that of course required major modification. I also notice you raised the bar from "never once had an issue" to "required substantial retrofit". The main issue we hit from .Net Core v1.x to v2.x was authentication. We had used `MapWhen` to set up different auth for areas of our API app, and that was no longer workable. It took a couple days to rework. EF Core rode along with ASP versions and v1 to v2 was a significant change that demanded extensive regression testing. You could argue any excess time on this is simply a lack of testing coverage and/or sophistication (detecting poor quality query translation), and ultimately there were next to no issues to address, but that doesn't mean we can just cross our fingers and hope for the best. If we're talking web apps specifically, Core has been forcing us to drag along the ASP version with the framework version, which was not the case with legacy, full-framework ASP MVC, and version updates to UI stacks is where most issues show up, vs. the framework itself.
Maybe you can find some local C#/.net meetups? Meet with people, talk about stuff. 
Documentation: 0/10 \^.\^
Could you expand on the gimmicks?
This sounds like it's a currency solution for a Clicker Game ... Abnormally Large Numbers stored as strings instead. This is called BigInteger. Check out this old project, it should still function if I am understanding what you are trying to do: [https://www.codeproject.com/Articles/2728/C-BigInteger-Class](https://www.codeproject.com/Articles/2728/C-BigInteger-Class)
And here I find my controller methods to be horribly overstuffed if they exceed six to eight lines apiece. Having a large controller class is not the problem; sometimes a section just has a shitton of functionality that necessitates plenty of pages, so *of course* you are going to have dozens of controller methods. The key thing is to not let those methods get any larger than strictly necessary. Virtually all of my Get controllers, for example, are just single-line affairs, with virtually all data massaging/transformation in the model (where it should be).
Encryption is truly 10/10. Respect.
Could go overboard and do a delegate with something like this: [https://stackoverflow.com/questions/18176856/passing-a-function-as-parameter](https://stackoverflow.com/questions/18176856/passing-a-function-as-parameter) But now you're just moving a function call to some fancy new thing, when you only really need one function that returns true/false or use the stupid ! lol
I am that senior dev. I’ve been in the game so long but always of the “get it done” mindset that I’ve adopted many bad habits which I’m now trying to unpick. I can talk all day long about how something should be implemented or what technologies to use but when it comes to coding I’m a simple man. I do follow certain rules, I don’t rewrite code over and over, I make sure I follow OO rules and uses interfaces where needed. I’m currently watching a lot of architecture videos and re-reading basics just to rewire how I’ve taught myself over the years. Where are you based?
I am currently working through Mosh's 3 intro to C# courses on Udemy. I'm really enjoying the instruction. I am not sure how they compare to Bob Tabor and Pluralsight. I have seen some Bob Tabor stuff, it moves a little slow, but that's probably not the end of the world either.
My bad. updated the post. 
*Woah!* It's your **2nd Cakeday** quentech! ^(hug)
The result will be however the uint type is represented on that machine. If it's 0001 then that will be the result in your byte array.
Wow, like
&gt; I am wondering if this is the correct use of the #region? There isn't really a correct answer imo. But consistency is key. The way you setup your regions should be the same in every single file. If you split up your regions differently in every file, it gets confusing.
Interesting, I will have to start learning more about pointers and unsafe code. So far it looks like an alien language whenever I try to read such codes. Tried learning them using google a while back but didn't find anything proper that could help me. Do you have any good source that I can read and learn more about this topic?
Productivity Power Tools. Ctrl-Clicking a function is amazing.
My absolute favorite: [https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2017](https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2017)
Sure. DM me. 
Viasfora has a feature called rainbow braces. It given different levels of braces a different color. I love that so much.
&gt; Indeed, by open-sourcing its compiler and design, Microsoft strengthened the position) of C# in the market by making it available to all developpers on GitHub. What does that even mean? How was it not available before and what is a “developer on github”? (Also, C# 8.0 doesn’t exactly exist yet, as it’s not finalized.)
Absolutely. Enterprise isn't going away from .net framework anytime soon and they'll be hiring those developers. .net core is awesome. But it's not uprooting anything.
Please indent code by four spaces to get it formatted correctly on Reddit. It’s hard to read.
I see you’ve never had to deal with singleton patterns. I don’t want to see that code, I just want it to work the way I need it to. The actual functionality of the code is completely different to this boilerplate, so it’s hidden behind region tags.
&gt; Do you have any good source that I can read and learn more about this topic? Nothing right off-hand, but there's not that much to unsafe code. Pointers are a basic, ubiquitous concept. You wouldn't necessarily need .Net specific information to learn many of the concepts. I often pick up ideas from other libraries, and then try them in my own implementations, inspecting IL and benchmarking different approaches. [Mnemosyne](https://github.com/JonHanna/Mnemosyne), for example, has a few different memory copying strategies. [MessagePack](https://github.com/neuecc/MessagePack-CSharp) has a technique I haven't seen elsewhere that is very fast. You're really working with pointers all the time in .Net - every object reference is one. The main difference comes in with blittable structures - which basically just means your structure has a definitive binary representation - and arrays. With those you can use `unsafe` as a window to open that lets you say any thing is just an array of bytes from a starting point, and that lets you assign things to each other that you wouldn't normally be able to. Here's an optimized function to copy 40 bytes: static public unsafe void Copy40(byte* dst, byte* src) { *(Guid*)dst = *(Guid*)src; *(Guid*)(dst + 16) = *(Guid*)(src + 16); *(ulong*)(dst + 32) = *(ulong*)(src + 32); } `dst` and `src` could be pointers to lots of things - byte arrays, strings, structs, arrays of structs.. This - `(Guid*)src` - is saying, just go ahead and assume src is a Guid - 16 bytes starting from the memory location stored in `src`. The `*` to the left is the dereference operator - get the value (which we've said is a Guid) from the memory location stored in this pointer. The whole statement - `*(Guid*)dst = *(Guid*)src;` - takes the 16 bytes value from `src` and copies it to the location pointed to by `dst`. The next statement - `*(Guid*)(dst + 16) = *(Guid*)(src + 16);` does the same thing just 16 bytes higher. In the actual code this is from, I don't use `Guid` and `ulong` but instead custom structs: static public unsafe void Copy40(byte* dst, byte* src) { *(S16*)dst = *(S16*)src; *(S16*)(dst + 16) = *(S16*)(src + 16); *(S08*)(dst + 32) = *(S08*)(src + 32); } [StructLayout(LayoutKind.Sequential)] internal struct S08 { public byte B01; public byte B02; public byte B03; public byte B04; public byte B05; public byte B06; public byte B07; public byte B08; } [StructLayout(LayoutKind.Sequential)] internal struct S16 { public byte B01; public byte B02; public byte B03; public byte B04; public byte B05; public byte B06; public byte B07; public byte B08; public byte B09; public byte B10; public byte B11; public byte B12; public byte B13; public byte B14; public byte B15; public byte B16; } Just try to remember that underneath you've really just got bytes in memory, and `unsafe` will let you get at them and manipulate them however you like.
Are the validations always the same?
Thanks a lot for the explanation, it was very helpful. 
Perhaps consider using inheritence to offload the repetitive calls via a base class. Personally, I'd be looking to utilise a single base method call to write the error, if applicable, otherwise let the process carry on. public IActionResult Blabla(SomeInput input): BaseValidator { ViewData["Error"] = base.ValidateInputAndPermissions(this, input); if (string.IsNullOrEmpty(ViewData["Error]) { // Do the Business logic stuff (because that's unlikely to be repetitive unless you model it via Interfaces) // And if it passes that, do the view model } }
No
Alternative functional style pseudo-code: public IActionResult Blabla(SomeInput input) =&gt; Pipe(input) .Do(service.ValidateInput, HandleError) .Map(Helper.GetUserByName(User.Identity.Name), (i, u) =&gt; (i, u), _ =&gt; HandleError("something went really wrong")) .Do((i, u) =&gt; service.BusinessLogicBlaBla(u, i), HandleError) .Map((i, u) =&gt; service.GenerateSomeViewModel(u, i)) .Map(View); private IActionResult HandleError(string message) { ViewData["Error"] = result.Error; return Redirect("/Error"); }
Isn't it more difficult to extend &amp; maintain later? U know, some additional edge case if, redirect.
No, why would it be? Look up "railroad oriented programming". It's pretty neat.
Wow
Part 3 Service Discovery with Eureka [https://altkomsoftware.pl/en/blog/service-discovery-eureka/](https://altkomsoftware.pl/en/blog/service-discovery-eureka/)
Part 3 Service Discovery with Eureka [https://altkomsoftware.pl/en/blog/service-discovery-eureka/](https://altkomsoftware.pl/en/blog/service-discovery-eureka/)
Wow that sounds brilliant! So simple. 
Previous parts: Part I The Plan [https://altkomsoftware.pl/en/blog/building-microservices-on-net-core-1/](https://altkomsoftware.pl/en/blog/building-microservices-on-net-core-1/) Part 2 Shaping microservice internal architecture with CQRS and MediatR [https://altkomsoftware.pl/en/blog/microservices-net-core-cqrs-mediatr/](https://altkomsoftware.pl/en/blog/microservices-net-core-cqrs-mediatr/)
Part 3 [https://www.reddit.com/r/csharp/comments/asmot4/building\_microservices\_on\_net\_core\_part\_3\_service/](https://www.reddit.com/r/csharp/comments/asmot4/building_microservices_on_net_core_part_3_service/)
Fixed :)
At the bare minimum drop the tuple and just declare a proper result class. That will already improve readability a lot.
Senior Dev here. Usually called in to clean up 3K MVC controllers
I'm up for that. UK based, happy to talk about ideas.
\&gt; So I have a region Properties, Commands, Constructor, Methods, Helper Methods. This is the most common use, but let's ask ourselves whether there's any point to this. Are the \*that\* hard to distinguish, especially with tools like CodeMaid, which shows &amp; lets you reorder the members in a sidebar, or is the insertion of regions in such a case just busywork to make make your code look superficially "neater", in that anal-retentive way? Unless you have a model-class or a collection of extension methods like Enumerable, a class (IMO) should have &lt;10 properties and around the same number of methods, unless you implement a number of interfaces, but even then, it shouldn't be much more. Regions, if anything, obscure the code smell of bloated code, encouraging people to just not touch "that part" that begins with line number 56 and ends with line 5872. The only legitimate use, I'd say, would be in legacy code that you can't feasibly refactor, as a band-aid &amp; first step towards restructuring.
If you deal with data that you're not familiar with: Oz-Code.
I honestly don't get default interface implementations. Why not just use an abstract base class? Whats the difference technically?
You don't need to install a separate version for each core app either. It's up to the app developers whether they bundle or require a pre installed dependency. Some Java applications do bundle their own JRE, rather than relying on the system version. Their decision. Its no different from any other framework or runtime.
What does Ctrl-Clicking do?
http://json2csharp.com/
A Json schema is always valid json but not all valid json is a json schema. Additionally, not all valid json schemas are valid json schemas of draft 6. You might be interested in the following link: [https://json-schema.org/understanding-json-schema/index.html](https://json-schema.org/understanding-json-schema/index.html)
Allows you to view the implantation of methods I believe Ctrl + Alt + click shows the definition 
I use it to seperate public from private methods sometimes. But don't use it all that often.
Almost everything by [Mads Kritensen](https://marketplace.visualstudio.com/publishers/MadsKristensen) is worth a shot - I can't believe how many of his extensions I use on a daily basis. My favourites: * [Add new file](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AddNewFile) - never use the slow af 'add new item' window again. Just type the file name and add the correct extension and it sorts out everything for you. As a bonus, Adding a 'I' to the front of your c# class with generate an interface of that name. * [Open command line](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.OpenCommandLine) - Easy to launch command line consoles by right clicking a solution, project or folder. 
Dapper is just a wrapper class for IDbConnection. What are you trying to achieve exactly? Creating a connection is literally IDbConnection CreateConnection() { return new MySqlConnection("connectionstringhere"); }
Resharper.
I use this feature VERY infrequently as it is generally a pain in the arse. The times I have used it is if, for example, I make a class that inherits `IDictionary` and I also want to have some *predefined keys* (in the form of properties). I use the region to hide the dictionary implementation as it is- * A lot of code * Never going to change Basically - I use it to hide shit I never want to see or change.
It covers Java, but the same in any language, get Robert C Martins Clean Code. Best book you'll ever read.
You can try my extension for vs17 https://github.com/Rambalac/JsonToCSharp
I've been using it for years, but be prepared to be brigaded by a crowd who claim it's a broken donkey.
&gt;(bool Success, string Error) I added it here, to make it easier to understand what this code actually does. Normally I use just ``var``
Since ReSharper is still the best for me, I just use Jetbrains Rider Ide. Don't miss anything so far. But if I were doing web dev, I probably would. 
Add new file is awesome. Can also type slashes and create an entire directory structure. 
I always view the implantation of my methods
I loved this extension, but I hated using it. It killed the performance on my machine, so I had to look for alternatives. Luckily VS Team just copy\\pasted several features from Resharper to VS in latest releases, so I can live without it now
Rule 3: Posts should be directly relevant to C#
Depends how you use EF. If you use DB first then it can save time if you are doing simple stuff, but we're forgetting that all those EF entities realistically need translating over to POCO models. Writing a service for that translation takes time if you do it from scratch or if you use AutoMapper you have to configure profiles if your models don't match entities 1:1. Code first models put the schema in the hands of the developers and often DBAs don't like that one bit. Personally I try to use a light weight approach using Dapper or code my own solution. EF can be quite weighty for small projects.
have you tried json2csharp.com? 
Github.... is that an extension? Its kinda handy.
YAY! it works!!
You can split this up into 4 smaller functions. Drop the tuple and use a common result class since they are all the same!
Doing webdev you would probably just use the other IDEs by Jetbrains as they work very well for web development. PyCharm, PhpStorm, WebStorm, IntelliJ etc.
Yes you can use Task Parallel Library to run a loop in another thread which updates a common integer.
yes. [Json2csharp.com](https://Json2csharp.com) supports json, but thats not the same as json schemas
I guess he meant C# Features, not .NET Framework features.
Interesting! Is there an easy way for me to install it other than building it from source? I can't seem to find it in the extensions browser.
Yeah using multi threads is a damn nightmare in python. Glad to hear it.
I graduated in 2015 and started my second job as a .NET developer a little over a year ago. I am right there with you concerning the inability to bounce ideas off of teammates because of their lack of knowledge or enthusiasm, at least concerning the areas that you wish to discuss. Both jobs have had these monsterous and poorly designed VB++ apps (what I call VB.NET apps that were converted from VB6) that, unfortunately, the company is unwilling to sunset. These apps take up an enormous amount of time to add/fix the smallest of features/bugs. We have a lot of projects consisting mostly of C#, some VB, and includes desktop clients (mostly winforms, some WPF), wcf services, web apps (MVC, WebAPI), so pretty much the whole shebang. Some of those winforms apps are the VB++ apps. Even outside the VB++ apps there's static classes/modules for damn near everything, little to no constructor DI, little to no encapsulation, "omega" classes and methods that span thousands of lines with many nested branches and switches, laughable unit testing (I myself have written very few unit tests because I seldom find myself writing greenfield stuff and 99% of the existing codebase cant be unit tested), quirky and often incorrect model design, try/catches everywhere to put bandaids on still-existing bugs, calls to write to a log file with mostly unimportant and unhelpful log messages, thenlog file *itself* is written in an unconventional format to where you can't use a regular text editor like notepad++ to read the log and instead you have to use a VB++ app we've written to read it (no, the log file isn't encrypted nor was it obfuscated to protect sensitive data), etc. The list goes on and on. One of the biggest problems I have is that I have no idea where to even f*cking start when attempting to unf*ck the codebase -- I know the relevant design patterns to help kill off code you want to deprecate (facade, adapter, strangler, etc) but I have no idea which part to tackle first because everything seems to be so interdependent and scattered. Another huge problem is that greenfield stuff is being developed with environment/design/code dependencies on the old, poorly designed stuff. This is perhaps the biggest problem because 1) the new stuff will inevitably have a poor design and 2) adding yet another dependency on the status quo is another piece of datum that the higher ups can use to justify not fixing the platform since fixing the platform would propagate significant changes to everything, everywhere, and thus require significant time (and we all know time == money). I work with some great people and I am fortunate in many ways to have them as co-workers but I feel I have a significantly stronger emphasis on software design than they do. All of that to say this -- I love talking about software architecture and design, design patterns, ideas, new and existing technologies and how to use them in the best way, ALM and related software development workflows and branching models and devops in general as well as discovering new parts of the .NET framework (netfx, netstandard and netcore) and the C# language. If you want to talk about some good, nerdy software design shit, PM me -- I'm down. I don't know where your level of knowledge/skill level is at compared to mine, but given your post I think we are at least on the same page about what we'd *like* to be able discuss with another programmer so we don't feel like we are on some sort of island isolated from any resemblance of sanity. If there's some gap in knowledge/skill between us, I am willing to learn and/or teach.
This is bad, but it's off the top of my head, but something like var number = 0; var task = new Task(() =&gt; { var currentSecond = DateTime.Now.Second; do { if (currentSecond == DateTime.Now.Second) continue; number++; currentSecond = DateTime.Now.Second; } while (true); }); task.Start();
What do/did you use to find these local meetings? Google?
oh , didn't know that. have you seen this on s/o - [stackoverflow link](https://stackoverflow.com/questions/6358745/generate-c-sharp-classes-from-json-schema)
Alright, I’ll check it out. Thx
I'm getting the error "Copied text is not a JSON schema! JSON Schema type field is missing. Path: 
You can write both super fast and super slow code in both of them, altough it's much easier in C# thanks to many "sugar-coat", that makes your code look sexy but adds many overhead. &amp;#x200B; With Core 3, you may even write games with nearly the same speed as a C++ code.
At a very high level, what workflow/method has worked best for you when you are cleaning up such large controllers (or simply large classes if you are able to generalize)? How do you decide when you need to move functionality from such a large controller to a new/existing controller, especially when the noun of the controller is very general (i.e MainController, which is probably never a good name for a controller unless 'Main' is some sort of thing you are attempting to model)? A lot of times I can identify parts of a class that should be in its own class but I have absolutely no idea *what to name the damn thing*.
yes, NJsonSchema does not support draft 6 or 7: [https://github.com/RSuter/NJsonSchema/issues/574](https://github.com/RSuter/NJsonSchema/issues/574)
That looks great. I always missed how PyCharm gives me PEP-008 corrections while in C# I'm left to just decide my own style (I'm really bad at it right now, I keep changing my variable naming pattern between different projects)
oops, i haven't worked on this. cant help
VS has built-in GitHub support on its Team Explorer.
Hmm? those are already 4 smaller functions, just their result is being handled in controller, cuz somewhere you gotta performs those redirects / error outputs What do you mean? &gt;Drop the tuple and use a common result class since they are all the same! Why would I want to? Tuples are great and give a lot of flexibility while not being weirdos like dynamic
Not to be /that guy/ but chances are there was a more effective way of solving your given problem. Additionally, asyncio can solve that problem using tasks (in essentially the same way c# does it. You are gonna hit road blocks in any language, especially if what you're aiming for is complicated, if you want to develop games but don't have much experience yet you could check out [processing](https://processing.org) as it makes that fairly simple (for 2d games anyway) C# will do what you want but if you dive in too deep it can be pretty off putting until you understand everything that's happening.
I think you missed the "risk" part. Sorry, woulnd't touch with a barge pole.
I meant ASP. Net core / Blazor / Razor stuff. 
NCrunch
NCrunch adds automatic background running of unit tests. It highlights individual lines of code either not covered by tests or where the covering tests are failing. In my experience, you don't notice a performance hit and it's great to know within seconds of changing a line of code that you broke a test. CodeMaid will organise your code on save or with a hotkey. It will sort and alphabetize methods, properties, usings, etc. It's also free. 
You can implement many interfaces, but not derive from many abstract classes.
CodeMaid for me. Great for clean ups and refactoring. I use it all the time and it's quite customisable. 
[MiddleClickDefinition](https://marketplace.visualstudio.com/items?itemName=norachuga.MiddleClickDefinition)
VSSpellChecker and FixMixedTabs
Pin this. Changed my life in a moment
I mean, it makes you wonder what the point of the code is if the variable just mirrors (DateTime.Now - startTime).TotalSeconds;
My life changed when i learned how to use it, i lost quite a bit of changes in between versions because i didn't do a good job at backups lol.
If Resharper's your thing, why not just use Rider? Serious question - the VS/Resharper option is a Frankenstein, but with Rider, it's clean.
You are hiding away any issues with the operation with the Success flag. Just return the result. If you the operation is not successful you should throw an exception instead. Using bools to say if something has succeeded is code smell. You should just return the result and thats it. 
There wasnt, many people online were having the exact same issue i was having with zero luck. I have resorted to using the system time in order to manipulate a variable to get a number counter, which does work, but is crazy that i have to do it. I searched hours, no one could do what i was trying to do. At least no one posted about it. Not interested in game dev atm, that was just something i did in the past a bit. I mean road blocks that had to do with python specifically. Not my ability or knowledge to use it.
True, was just demonstrating what the OP could do. Not saying do it :)
That's possible. If you give some small example I will try to fix in few hours.
I know, I'm just thinking probably what OP wanted to do was already done in the framework elsewhere without tasks and threads. On an unrelated note, I believe we're not supposed to use the Task constructor and instead use Task.Run
Depends on the controller type, if it's an ApiController then the methods should be litterally 1. Receive the call 2. Validate input 3. Call a service 4. Return the result No business logic should exist in controllers at all. They are there to do just one thing and that is perform REST operations (in the case of ApiControllers). The stack should look something like: 1. UI (optional) 2. ApiController with a context of the operation (ie, BookController, ProductController) 3. A service layer to do business logic operations 4. A data layer to provide data to the service layer So going through a controller I generally make a copy then go through and identify discreet operations and refactor them so they conform to the above stack, creating the layers if need be.
I generally use the TaskFactory to create them.
In practice you can consider an interface a bit more functionally pure because there is no state. I believe they consider it a compiler enforced purely abstract class.
I watched the video and can understand the change since extending interfaces where there are default implementation is now a non breaking change across the project which is quite neat.
Yes, well Task.Run of course, just calls TaskFactory.StartNew behind the scenes with some defaults so it's the same thing. 
[Visual Studio IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.VSIntelliCode) [IntelliSense Extender](https://marketplace.visualstudio.com/items?itemName=Dreamescaper.IntelliSenseExtender) 
https://app.quicktype.io/
You can control access to the property via modifiers for example: &amp;#x200B; public string Test {get; internal set;} &amp;#x200B; Allows this string to be set only by other classes within the same assembly. Any consumers outside cannot set it. &amp;#x200B; public string Test {get; private set; } &amp;#x200B; Only allow this class to set the property. Effectively making it read only. I think can also just {get;}
Looks like there are a number of official SDK options currently for the various Skype flavors - do none of these work for your needs? [https://docs.microsoft.com/en-us/skype-sdk/skypedeveloperplatform](https://docs.microsoft.com/en-us/skype-sdk/skypedeveloperplatform) &amp;#x200B;
[RevDeBug](https://revdebug.com/) it's a paid extension, but one feature is free: [Real values right in your code during debugging. No more writing everything into the watch.](https://cdn.revdebug.com/images/tutorial/4.0.0.0/100-prompts.gif??1531619319295) --------------------------------- [TAB AutoCall](https://marketplace.visualstudio.comitems?itemName=RamonFMendes.TABAutoCall) Press TAB after a function call and it will insert () and automatically show signature help. Example: Console.WriteLine -&gt; TAB -&gt; Console.WriteLine(|) -&gt; cursor in middle of parenthesis and signature help popup shown. ------------------------------ [IntelliSense Extender](https://marketplace.visualstudio.com/items?itemName=Dreamescaper.IntelliSenseExtender) Provide IntelliSense completions not only for imported types, but for all available in current solution and referenced assemblies. 
This is a basic example, but here's probably the easiest way to get a concurrent task updating a time variable in python: import asyncio class Time: time = 0; async def timer(t): while True: await asyncio.sleep(1) t.time = t.time + 1 async def main(): t = Time(); asyncio.create_task(timer(t)) await asyncio.sleep(10) print(t.time) await asyncio.sleep(2) print(t.time) asyncio.run(main()) You should see it print out 9 then 11 (It's not 8 and 10 because the main task start it's sleep slightly before the timer task). Asyncio takes quite a bit of time to wrap your head around, I definitely prefer the way asynchronous operations are handled in C#, but it's very powerful (And a hell of a lot easier than traditional multi threading)
Phpstorm? I'm not touching that garbage language. 
[Toggle Comment](https://marketplace.visualstudio.com/items?itemName=munyabe.ToggleComment) Gives you a nice Ctrl+/ shortcut to toggle whether or not code is commented. Far better than the default Ctrl+K, C and Ctrl+K, U shortcuts.
Sounds like some solid quality of life extensions, thank you !
The team soultion integration is so good I've forgotten how to do command line git
Because Rider isn't VS.
I had some fringe cases where I need to use pure git to solve them, but the git GUI you get from downloading from the official website it's good enough 
VSColorOutput Whack Whack Terminal Power Productivity Tools (moving away from Resharper) GitHub Comment Remover Object Exporter Markdown Editor ILSpy Open Command Line Visafora
none
I ain't gonna throw an exception just because user didnt fill a form, or his email is invalid. Also I ain't gonna throw an exception just because User's operation makes no sense in terms of business logic like ``order cannot be sent to X country``
that has been built in for a couple years now. cntrl f12, which I assume you can rebind to whatever
VS UI is IMO the nicest IDE UI. I really WANT to love Rider because it is the best option available on MacOS too, but I just prefer VS over literally any other IDE (since VS2015 at least)/
Ill look into it, i looked high and low and couldnt find anything like this. Hopefully it does what it seems to claim. I also noticed you have a habit of putting ;'s after some lines ;) A true C# dev at heart?
How does the debugger compare?
Yes indeed, I use C# at work so I don't even notice the semicolons sometimes
I'm currently building out a test automation project using a .net core console app and selenium webdriver. I never used Selenium before and found this video very helpful to get started [https://www.youtube.com/watch?v=cNKi0Pl5wbc](https://www.youtube.com/watch?v=cNKi0Pl5wbc) If you have more specific questions I can help, but get something working first.
Im not advocating for exception driven control flow. This is fine var user = Helper.GetUserByName(User.Identity.Name); This is not fine (bool Success, string Error) permissions = service.CheckPermissions(user); You are going to a service of some kind to pick up permissions. Your service runs some function that provides the permissions, but for reasons unknown it also has a Success flag and an Error string. It implies that it brings back a permissions object which it doesn't. It just brings back success and an error message. Maybe refactor to say var hasPermission = service.IsPermissionGrantedFor(user); You know by the fact that hasPemission can be false that the user will not be granted access. You don't need an error too. Success flags don't mean anything, what does it mean if Success is false? Is it an internal error? Is it a data error? Has the user not provided the correct info? Return something meaningful with the context of the operation.
Exactly, I don't think the problem is with Dapper itself. 
- Hot Tabs (lets you set `Alt+Num` to activate documents) - Add New File (gets it closer to VS Code) - Windows Template Studio (brilliant UWP productivity tool) - HideMainMenu (shows main menu on `Alt`, also manually removed toolbars) - Solution Error Visualizer (not sure if default now) - Line Ending Unifier (avoid EOL conversions for git)
I understand haha, i often write def for functions in other languages. Just muscle memory.
Ctrl Click works without any extensions. 
Special mention for Farticus. https://marketplace.visualstudio.com/items?itemName=MadsKristensen.Farticus
Are your data entities publically accessible at the controller level and/or service layers or do you keep them in the data layer and use domain models/dtos to communicate with the data layer?
The most annoying switch is C# to js. It's a very different style. The joys of being a full stack dev
Look into FluentMigrator for validation. You're writing a service, so your consumers need to give valid inputs. It's not the actions responsibility to care.
Removed: Rule 3.
I agree, the name I used is terrible. 
Viasfora is always first extension I install.
Our service layer picks up the data entities then converts them to DTOs using AutoMapper. We never expose any data objects to the controller, not even DTOs. Infact, most controllers talk to provider classes which again are contextualised based on the controller. So for example BookController would call BookProvider, the provider talks to the Service, which in turn provides DTO collections. The BookProvider then does the required transformation of DTOs to serialisable classes that the Controller can use and return to the consumer. The reason we do this is because DTOs are linked indirectly to the EF entities we use and are also do not have any relationships with each other (unlike EF entities). So the process is as follows 1. Return EF entities 2. Convert entities to DTO objects. If EF returns nested entities this is taken care of here, so they are split apart. 3. Convert the DTO objects returned into a usable model for the service. This could mean reconstructing the nested relationship so that a one to many relationship could result in a model with a nested array of another model. We try not to allow any leaking of data objects related to the service layer in the controller.
You are now mod of r/ProgrammerHumor
Removed: Rule 7, Rule 2. Feel free to submit it, but include documentation and post it via a code sharing service like GitHub so people don't have to download/run some untrusted binary.
Did you mean FluentValidation?
Honestly if I was forced into this situation I would use an out parameter for the error instead of returning a tuple. That way at least I'm using simple types.
You were writing code without a vcs? Sounds like you’re a glutton for punishment 
Yeah... I was just pushed into programming with subpar knowledge from my University (I'm not from US btw), and where i'm working they didn't have a dedicated programmer so i pretty much am self learned since 5 years ago. Been picking bits by bits how to improve my work lol. 
You can't. The IO write operations are subject to system security restrictions as with everything else. Write to %userprofile%\\Documents instead
If you are opening every file in the solution then you aren't navigating very well. Separating things into files allows you to go right to that file and NOT worry about the other 200 lines of code. That's the crux of it, going to where you need to be and not being presented hundreds of lines of code that aren't what you are currently concerned with. 
You can use [the Roslyn analysers](https://docs.microsoft.com/en-us/visualstudio/extensibility/getting-started-with-roslyn-analyzers?view=vs-2017) to check code. That's not a VS extension, but it works well.
Did you remove the event MBList_Load?
I actually don't know what MBList\_Load is... 
Thank you!
Command out that line and continue. Your MBList\_load code is missing or renamed. Find it and put it back into the Load event of the form.
&gt;Can I build Website and web applications (front end) using C#? Kinda. Using C# instead of Javascript is experimental yet. &gt;Can I manage backend as well? C# / ASP .NET is indeed backend. &gt;Is it multi-platform? No, but ASP.NET Core is &gt;How is it different from asp.core? Personally I'd say a lot &gt;Can it be implemented as a substitute for php? Yes &gt;Can it be implemented as a substitute for html, css, No, I mean, there's something like Razor which helps you writting C# code to generate html, but it isn't substitute for HTML/CSS. 
It's an event you probably created it on accident when you double clicked a control.. try removing the line with the error 
This is what it looked like yesterday... 
Codemaid: https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid It makes it so much easier to keep your code properly formatted and organized. The feature I use the most is comments formatting.
Select Next Occurrence is by far my most used extension, same as Ctrl+D from Sublime/VS Code, great for multi-caret editing. MS just implemented their version of this extension but it's buggier and is missing a lot of features. I also recommend few extensions that have been mentioned such as Viasfora, Add New File and Roslynator 2017.
Thank you!!!! This worked!!
* [Tabs Studio](https://tabsstudio.com/) Paid extension, but totally worth it. Gives you dynamic document tab styling (e.g. all my test classes are green tabs) and multiple rows of document tabs. * [Side Scroller](https://github.com/drewnoakes/vs-side-scroller) * [Customize Visual Studio Window Title](https://www.erwinmayer.com/labs/visual-studio-2010-extension-rename-visual-studio-window-title/)
Making your project obtuse and difficult to maintain in the process. 
Thank you. :-)
What it does changes.
Re-Attach https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach It doesn't work as well with .net core as it does with .Net Fx and IIS. Nothing else.
How is Tab AutoCall different from, say ctor -&gt; TAB, TAB or if -&gt; TAB, TAB ?
&gt; Oz-Code plus one on this, the best debugging addon I've seen.
I've written this kind of code in the past, and have a friend who loves writing C# using IEnumerable&lt;T&gt; to effectively write code this way - in a way I would call functional code in a "monad comprehensions"-style. &amp;#x200B; The problem with this style of coding is it doesn't leverage the framework and chunk things out into small parts. For example, MVC web apps are very simple pipelines, so let the model binding take care of parsing your arguments, let a model validator then validate the deserialized values from that parsing, etc. The code is actually cleaner, albeit not all in one place. But if you write tests, it doesn't matter - you have much smaller pieces of code to worry about breaking. &amp;#x200B; The concepts are all the same, but I prefer to OO way. Sometimes monad comprehensions can be nicer, though, but mostly for complicated flows.
In the newer versions of Visual Studio, yes. We needed the extension before that.
As the Imgur folks call it "save and forget" :)
Here’s the .sln and raw text files, made in Visual Studio: Text: https://docs.google.com/document/d/15eJB4gjGrv2BbnjrftRcjf2KxUWxVqh1yIvzXFVQFfA File: https://drive.google.com/file/d/1mE-vVu8kEV3D-MW2vocS82N66zLjyZd6/view?usp=drivesdk Constructive criticism and tips are greatly appreciated :) P.S. The only other experience with code I’ve had is Scratch and a couple Swifty lessons which I didn’t really learn anything from.
What it all really boils down to is most people are bad at organizing code. They are bad at organizing files, and then they are bad at organizing classes. If people were better at organizing files there would be a lot less incentive to put everything into a single class. If people were better at organizing a class there would be less incentive to put everything in single method. This is just something I have found in my life experience. Most people are bad at organizing, and this is as true for programmers as non-programmers. Just like most things organization is a skill, and like most skills most people are not naturally good at it. Like most things that most people are not naturally good at our industry does a poor job of teaching and reinforcing these skills. Part of that has to do with managers making concessions on doing it right in order to get it done quickly. Part of it is schools don't put enough effort into teaching how to create clean and well organized code. I think both managers need to put more emphasis on doing things right in order to save money in the long term, and I think school need to focus more on practical skills like organization and clean code. Something I would like to see would be some scientific studies on the best organizational practices. I think most projects organize their files incorrectly. They like to organize in layers, and group similar types of classes together (i.e. viewmodels, validators, etc.). This is more of a horizontal approach to organization, but I think it would be better to organize projects more vertically with just one foundational horizontal layer at the bottom. 
tester346 - in the functional style, there is a concept of "treating failure as success". It comes mostly from a programming language called Icon, but was popularized hugely in the functional programming community by a pivotal style 1985 paper by the famed Phil Wadler, titled [How to Replace Failure with a List of Successes](https://rkrishnan.org/files/wadler-1985.pdf). An easier introduction might be: [https://www.schoolofhaskell.com/user/edwardk/heap-of-successes](https://www.schoolofhaskell.com/user/edwardk/heap-of-successes)
Google if they have their own website. Some are on Meetup now.
I've been trying relatively hard to generate "clean" sound lately. I've tried python on Windows/Linux with a ton of unsuccessful modules and solutions. Now I'm trying that with C# so maybe at some point I'll be able to do something in Unity too. BUT as you can hear in the attached video, there is a cutting sound all the time. And whatever I try, this noise is there. How could I generate sound that does not have this side effect?
I know this has already been answered, but for anyone who stumbles by without wanting to follow a link... Injection is just a fancy word for passing data into an object. So constructor injection is passing data into an object by parameters in your constructor method. I know when I was trying to figure out what dependency injection was I was not amused when I found out that it was just a fancy way of saying something that I had already been doing for almost as long as I had been programming.
Yes, I love FluentValidation. Started using it 2 years ago. The maintainer is also a great guy, very responsive.
Also, I think the direction things are heading with F# and [ASP.NET](https://ASP.NET) Core (cf Saturn framework), you will effectively use computation expressions to describe the core MVC pipeline, and if you want to override it, you just plug in a new computation expression. In this way, you get the power of OO but also the power of functional style.
I use only a few commands form the CLI anyway, I know Got too few, only how to commit, push, pull and resolve conflicts (and sometimes reset).
Yeah, I feel like this is in the same vein as what I was thinking. Too many people learn just one language and stick with it forever. It's really eye-opening to learn a few others, especially ones that are dramatically different. Even if you decide the other language isn't your favorite, it's good to learn there are other ways to approach things. I've been diving into JS for a few months now. In some ways, it's liberating to be able to get things done without first carefully explaining what my objects look like and how they interact. But when my projects get bigger and more complex, I always end up introducing TypeScript to gain exactly that again. F#'s on my list. The problem I've had so far is it's really easy to find work-relevant projects in Python or JS, but it's been much harder to apply F# to my work. Python/JS have been cross-platform from the start, and I get a lot of side projects that need to be cross-platform. .NET Core has only recently made C# and F# viable for some of those projects.
I would advise against alphabetical organization. Methods should be organized by relationship. The closer the relationship the closer two methods should be. There is usually a natural hierarchy of methods, it is ok to organize the top level (usually public methods) alphabetically, but any methods that are related to those top level methods should be located as close to those methods as possible. Similarly, with fields/properties I would advise organizing by type (generally I prefer going from the most simple to most complex) than by alphabetical. 
I've done this in the past and I used the NAudio library. I used the SignalGenerator class.
Roll off the amplitude when you start/end the tone. What you're hearing is the sound of your speaker returning to a non-moving state. Think of it like a rubber-band drawn taut across two fingers. You can grab it in the middle and pluck it and it will make noise. Now place it against a hard surface and pluck it again, and it will "slap" because the energy of it returning to it's normal state is transferred into the surface and makes a harsh sound. A similar thing is happening with the speaker cones when playing those samples, except the "surface" is just *air*.
I love [ReAttach](https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach) to quickly attach my debugger to the IIS process without doing it the long way.
visual studio
I'd recommend doing validation using something like FluentValidator, that way your validation happens in separated classes that are specifically for validation.
I see deals all the time for an AMD 1700 for $150. Throw 16gb of memory for $85, and then find a fast 512gb NVME ssd that has 3,000 mbs transfer rate $80. AM4 motherboard $50, Case $30, Power supply $30. &amp;#x200B; Fairly cheap and good dev box.
Honestly? None, really. Every time I find something sort of useful, Microsoft implements it in vanilla VS in the next release.
Likely a permission issue but try adding a try catch block so you can capture the exception being thrown.
I was given a windows 7 computer from my company, which I think I read that the latest version of VS or SQL server I can use is 2014. The licensed copy of VS that the company has 2012, they use the Sql Server Express, which only 2012 version is the only one compatible with VS 2012. The .Net version is 4.7.03062. This is the only reason I'm using it. &amp;#x200B; Would you still recommend me to upgrade? Which version should I use with window 7? Will there be any problems upgrading from a licensed VS 2012 to a community VS?
I did .Net development on an old-ass Pentium 4 back in the mid-00's. Any Windows-capable computer that you can buy new now will be just fine. You can try it on Mac or Linux, but they're not anywhere near as "fine" for .Net as Windows is (yet).
Incrementing 1 every second like a complicated way to do a floor of the time elapsed in seconds.
Productivity Power Tools Power Commands for Visual Studio Peek Help
this link sound good : https://www.codeproject.com/Articles/30180/Simple-Signal-Generator
quick tests 1) comment out lines 100 -&gt; 114. Does this still happen? 2) just make a new sql command (var t = new SqlComand()). Does it still happen? 3\_ post the details of you exception (values in ex variable)
Ex.Message should tell you you problem. I would also add your parameters before opening the connection and then closing it after ExecuteNonQuery
I will never do a c# project in Visual Studio without resharper. Period. Does it kill “performance”? Yeah. But that’s what your company bought that fancy computer for. There where so many times I’ve been called to investigate some bug in a system that no one could figure out only to open the files with reshaper running and the entire file lights up with warnings and errors. Some of the key bits of functionality are being ported over but it’s still worth the price to have it on professional projects. 
I'd suggest using newtonsoft to deserialize your json into an object, add whatever you need to add to the object then serialize it as json again. You can get the package on Nuget
Came here to say add new file 
How do you feel about Eureka over Consul?
\&gt;3k line MVC &amp;#x200B; ouch
&gt; I will never do a c# project in Visual Studio without resharper. Period. Does it kill “performance”? Yeah. Right. Resharper is the thing killing performance? That blazing fast performance that you get with just Visual Studio and no addins? lol. VS is big thing regardless, so get a good dev machine.
VSVim, by Jared Par ([https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim](https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim)) &amp;#x200B;
I had originaly found this, but it would only generate a schema with an empty definition. After fiddling around with it a bit (my whole day) I figured out I had to add a $ref to the definition at the start so it would find the complete definition. Eventually this did work for me, however.
which is very lacking, specifically being able to configure the binding in your configuration as opposed to via code is something that they havent added which is a huge oversight - especially for teams wishing to build new applications in core that interface with older wcf applications.
Not really an extension, but I've been using [Fira code](https://github.com/tonsky/FiraCode) for a while now, and it's just so much nicer to read than Consolas.
Removed: Rule 4. Please include the exception type and message that you get in your `catch` block.
Removed: Rule 3.
I don't disagree with that (in fact I agree wholeheartedly), but I don't agree that using a region will solve that particular problem. In fact, it compounds the problem by allowing poorly organized code to be hidden from view. Mostly I think people know how code should be organized but (like cleaning the garage) don't want to take a day to do it. So they throw in a few regions and call it "cleaner." 
my apologies, I don't know how I missed that.
RE Sharper is probably the best out here! Automatic imports, code style improvements, code optimization in one click! Yeeez
Except the first, that’s all in VS17. I’ve found over time you need to revisit these. MS sucks up a lot of the functionality now. 
&gt; It's way, way, way faster to fix your source to a pointer and than cast it to another pointer of your destination type. I know in C and C++ this is undefined behavior due to aliasing rules allowing the optimizer to do things you don't expect. Is this a concern in C#?
I have also been using it for years. At my last job I had a first-gen (!) Core i7 with 12Gb of RAM. ReSharper only bogged down the machine if I had 50-80+ files open at once (which happens in code-first when using DDD; to keep all your ducks in a row you need all your configuration and entity files open at the same time). Worked like a charm otherwise, with only the occasional hiccup that could be easily solved by gracefully shutting down VS and re-opening the project.
Which brings us back to using regions as a nice way to group methods
+1 for Supercharger, love the code lines and map on the side for quickly navigating to methods
https://www.newtonsoft.com/json/help/html/QueryingLINQtoJSON.htm https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Linq_JArray.htm
Setup an exception handler attribute in your pipeline, so you can throw custom exceptions, and have those turn into an error redirect. Then you can end up with something like this: service.ValidateInputOrThrow(input); var user = Helper.GetUserByNameOrThrow(User.Identity.Name); service.CheckPermissionsOrThrow(user) ; service.BusinessLogicBlaBlaOrThrow(user, input) ; var vm = service.GenerateSomeViewModel(user, input); return View(vm); The "OrThrow" suffix on the methods just shows that in the case of a bad result we throw an exception instead of return a bool. You could set up a method variant like this as an extension method somewhere if you were really pressed. Some of these operations could also be wrapped in methods, like a method `service.GetUserByNameAndCheckPermissionsOrThrow(User.Identity.Name)` (pick a better, less verbose name, but you get my point). I might also change it so `service.BusinessLogicBlaBlaOrThrow()` returned a result, and then use a separate mapper to map the domain result to a view model instead of having your business logic have to know about the structure of your view model (your business layer should be isolated from your presentation logic). Here might be a different way to structure this: service.ValidateInputOrThrow(input); var user = service.GetUserWithPermissionsByNameOrThrow(User.Identity.Name); var domainResult = service.BusinessLogicBlaBlaOrThrow(user, input); var vm = viewModelMapper.Map(domainResult); return View(vm); This is, I think, quite a bit better and helps you organize your thoughts a bit better.
RockMargin. Can’t code without it.
PHP is a vastly different language than before. Not meme'ing, I would actually look at it again (I would still not use it over any of my current tools of [asp.net](https://asp.net) or go, but it's not that bad of a language anymore)
Love ncrunch. There are other tools that do continuous testing but they are so far behind ncrunch it isn't funny
NCrunch is my go-to. It was the tool that finally helped me see the benefit of TDD and made it so much easier to adapt that style.
Hey, your problem is close to me, I spend some time to find a way to make my controllers more logic oriented and not error chekers. I find solution but not fully understand it, may be you will be more clever than me :) https://codeopinion.com/fat-controller-cqrs-diet-command-pipeline/ You can google more about cqrs, it may help you.
I'm running the current VS on Win7 without problems. They install side by side so you can always go back if there are any issues. But your .NET version is high enough that you shouldn't need to upgrade. 
Although you can’t use %variable% expansion just like that. 
What's your requirement for using both Windows authentication and JWTs? Is there a reason that you can't use Windows authentication only?
http://jasonwatmore.com/post/2019/01/08/aspnet-core-22-role-based-authorization-tutorial-with-example-api This might be worth looking into. Its beautifully written,well explained and backed up with neat examples. 
However I wasn’t able to find dapper on NuGet so I had to manually install it with package manager console. Once, installed it was created as a folder in my solution instead of as a reference link in the tutorial that I was learning from. Thinking I had done it, I started writing in my sql connection following the tutorial however I started get many errors which I think was all relating to Dapper (ie. 1. The type or namespace name IDbConnection could not be found. 2. Metadata file ‘C:\....\Visual Studio 2012\Projects\TournamentTracker\TrackLibrary\bin\Debug\TrackLibrary.dll’ could not be found. )
There are some issues with this. * First of all, prefer `Task.Run()` or occasionally `Task.Factory.StartNew()` to creating a new `Task` object. * Second of all, if you're creating a task that's going to be running indefinitely (or for any decent length of time), you should specify [TaskCreationOptions.LongRunning](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcreationoptions?view=netframework-4.7.2) when you create it. * Third, presumably that `number` is going to be accessed from another thread/task at some point, which means you've made the mistake of non-atomic incrementation. Ideally you should at least `lock` over `number` when you're reading or writing to it. Some people will suggest `Interlocked.Increment` but on the read side you *theoretically* need some kind of memory barrier as well then, which just makes things more complex. (Or you could use [AtomicInt](https://github.com/Egodystonic/Atomics/blob/master/Egodystonic.Atomics/Numerics/AtomicInt.cs) from my [recently announced Atomics lib](https://github.com/Egodystonic/Atomics)). * And fourth, spinning in a `while` loop with nothing to slow it down whatsoever is a really nice way to just heat up your room and waste a lot of performance. Better to add something like `await Task.Delay(800)` which will free up the task thread and turn your function in to a proper timer.