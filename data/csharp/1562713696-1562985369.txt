It doesn’t mask anything, and it’s not really lazy. I use it everywhere because it makes the code much easier to read. The its type inference, so as long as the type on the right side of the equal sign is known (which it usually almost always is) then the left side will know what type the variable should be. Tell your coworker he’s and idiot.
Never use dynamic unless you actually know what you're doing. Otherwise you're just moving obvious compile-time errors over to runtime-errors which are way more difficult to fix.
There's not really a good way to do this without language support in C#. Or at least that has been the conclusion of the last thousand people that have tried this.
The async method is this Reddit post. Everyone else on Reddit is a thread. A thread will execute your task. You can await the task to get the other Reddit user’s comment.
I would disagree with the last paragraph. In my opinion it reduces the cognitive load on someone reading your code. You don’t usually have to hover over something because you yourself can infer it just like the compiler does.
I guess all syntactical sugar is just “lazy” then. What nonsense.
Gee, sorry I offended you with my opinion. It's programming, not religion. Do what you want.
&gt;It was just a comment. I stand by it. Assuming you're the one antiduh is responding to, this claim is refuted by your choice to delete the relevant comments... You should have just amended the comments to admit fault... deleting is not needed unless you're trying to hide something... Why you hiding what you said? Clearly revisionism and bullshit piss me off...
For the C# in a Nutshell, as you do a topic on Pluralsight, read that section in the book. It may be as long as the Malazan series, but it’s not meant to be binge read. Also, you can try out your skills on exercism.io. Plus it’s free.
Reminds me of the greenpipes library https://drusellers.com/posts/greenpipes/ And also similar to mediatr https://github.com/jbogard/MediatR
I would offer the correction that `var` doesn't take the type of the first value assigned to it. More specifically, `var` must be used in an initialization statement or initialization expression. Some languages have the ability to "look ahead" and determine a type at compile-time when unspecified, but C# does not. The following will give you an error in C#: var list; if (table != null) list = table.ToList(); else list = new List&lt;Thing&gt;();
You're so smart, show me. Show me a `struct Option&lt;T&gt;` that has a default constructor that creates a `None`. What you will get is this: (1,22): error CS0568: Structs cannot contain explicit parameterless constructors
A struct is pretty much the way to go in this language public readonly struct Option&lt;T&gt; { public static Option&lt;T&gt; None { get; } = default; private readonly T _value; public bool HasValue { get; } public T Value =&gt; HasValue ? _value : throw new InvalidOperationException(); public Option(T value) { HasValue = ReferenceEquals(null, value); _value = value; } public static implicit operator Option&lt;T&gt;(T x) =&gt; new Option&lt;T&gt;(x); public static explicit operator T(Option&lt;T&gt; x) =&gt; x.Value; public Option&lt;U&gt; Map&lt;U&gt;( Func&lt;T, U&gt; f ) { if (f is null) { throw new ArgumentNullException(nameof(f)); } if (HasValue) { return f(_value); } return None; } public Option&lt;U&gt; Bind&lt;U&gt;( Func&lt;T, Option&lt;U&gt;&gt; f ) { if (f is null) { throw new ArgumentNullException(nameof(f)); } if (HasValue) { return f(_value); } return None; } public U Match&lt;U&gt;( Func&lt;T, U&gt; ifSome, Func&lt;U&gt; ifNone ) { if (ifSome is null) { throw new ArgumentNullException(nameof(ifSome)); } if (ifNone is null) { throw new ArgumentNullException(nameof(ifNone)); } return HasValue ? ifSome(_value) : ifNone(); } } This is basically how Nullable&lt;T&gt; behaves.
/u/bricked_machine seems to be deleting their comments, making the discussion difficult to follow so I'm quoting their above comment here: &gt;It was just a comment. I stand by it. It wasn't a criticism of the author's article overall, and certainly not you. You seem to be making it personal. &gt; &gt;You enjoy arguing with strangers on the internet, don't you? &gt; &gt;Good luck. (Interesting how they claim to be standing by their comments while simultaneously deleting them...)
I'm looking at them now. I'm trying to figure out how to upgrade a decade-old webforms app. God I hate postback.
I've used them for very simple web sites that need a minimum of interaction. For example, an approval screen that is supposed to bee presented to managers who can approve a report before it is sent to clients. If the page becomes very interactive, then you're going to add in a great deal of jquery and Javascript. Interestingly, it also works as a proto-type, wire-frame demo for a React website. The View Model becomes your state object. The Razor morphs well into render functions. You can easily see where the component divisions are and see the needed args for each component. If you're used to looking at html pages, rather than pieces, it's kind of an interesting path. Especially if you work at a MS house that is moving toward React.
dont forget 8char naming conventions oh and hungarian notation i_spd_man for int speedOfMan or something lol
Angular, when are you going to become a mod for this sub? :)
[There is no thread](https://blog.stephencleary.com/2013/11/there-is-no-thread.html)
I would be game for working on projects with people... I'm just starting tho...
I deal with enough jackassery all day and don't really appreciate the condescending tone. I offered a suggestion for looking in the correct direction, not a full fledged solution. If you're looking for a full fledged solution, I'd likely model it close to `Nullable&lt;T&gt;` except without using the struct restriction. In fact if `Nullable&lt;T&gt;` didn't have that restriction, I'd say just use extension methods off of that and call it a day. Instead, you can hide away the Value attribute in a custom solution and expose only methods `UnwrapUnsafe` (touch of an unfortunate name since it implies it uses an unsafe block) and `UnwrapOr` to get at the possibly contained value. This means you're essentially doing two things inside each method (`Map(f) =&gt; HasValue ? new Option&lt;T&gt;(f(Value)) : this`) but Some and None aren't distinct types from Option/Maybe anyways they're just different constructors. It doesn't take a lot of imagination to see how this type plays out.
&gt;I can't think of why you would need to keep reflecting on a type more than once. I've used this trick a couple times as a way to quickly create new object instances, as was suggested by the top answer to this post: [https://stackoverflow.com/questions/6582259/fast-creation-of-objects-instead-of-activator-createinstancetype/6882881](https://stackoverflow.com/questions/6582259/fast-creation-of-objects-instead-of-activator-createinstancetype/6882881) I've used it in a few other cases, too, although I will say its rare that I've been able to justify sacrificing the simplicity for the performance. I think it's a really neat trick, though.
Ah, but you *could* use it in place of the "CreateInner" literal. Nice article, btw.
You can get pedantic if you want, but in my eyes initialization involves assigning the "first value to a variable" (and in the case where you don't assign a value you get default(T) for value types and null for reference types, in which situations you wouldn't use var). I'm not sure if you are getting at dynamic languages as those are obviously very different from inferred types in static languages. Otherwise, I'm not familiar with any static languages that allow such deferred typing (nor do I see why that would be useful). I'm not sure if your example is meant to be correcting, but I did state earlier that you have to give the compiler enough to infer the type. Even if c# had "look ahead" typing this example would only be valid if table was of type List&lt;Thing&gt; as well, but it doesn't seem like we can infer that from your example ;)
The monetary aspect of most (not all) of JetBrain's products are primarily aimed at businesses. The majority of their suite has a free community edition available, and they offer their entire suite free to students (OP indicated they are a student). Honestly, been using Rider for a while now, and there is not a single feature that I have needed that is in VS and not in it. Full disclosure, I was always a Resharper in VS user, and was already accustomed to it. Without Resharper, coding in C# is not much different than any other IDE. For most, it just comes down to "what you are used to" more so than any actually being more powerful. Rider does an extremely good job of easing the transition from Visual Studio (can even set same color scheme and keybindings). If you are a Resharper user, you don't need to learn anything new. Rider even comes with a Forms designer now, though I have not used it personally, I am mainly into back-end and game development. Sure, VS has shit-ton of features, more than I even know what they are or have ever used. There is endless menus, sub-menus, commands, etc. to do all kinds of things that someone probably uses somewhere, but I never did. For the typical user, 95% or more of those are wasted bloat, and never get touched, and simply add to its abominable performance and resource usage.
I've used server-side Blazor a fair amount on side projects, and I'm a big fan. The programming model is such an easy transition for .NET devs from your more traditional MVC apps, plus you get the modern feel of a SPA without all of the JS. Win, win, win. I wrote a thing on client-side vs server-side Blazor back in November; a bit dated, but still relevant, I think: https://blog.jonblankenship.com/2018/11/02/experiences-converting-from-client-side-to-server-side-blazor/
Apparently doesn't take a lot of imagination to do this. I am dead serious though, show me. I have tried to write this class; *you can't*. `Nullable&lt;T&gt;` reference types are of course possible, and also useless since they are already nullable. It is the not-null option: `Some`. Would love to see how you can implement this.
You would love TypeScript then.
Actually, on second thought, I'm going to add perhaps the most important thing, which is sort of implied by the above points, but is so incredibly critical to good design that it must be said explicitly. It makes your code *reusable*. It means if I write a component, it doesn't care who or what is implementing the various interfaces it uses -- it only cares that the interfaces exist. It can live anywhere and do its job perfectly happily, as long as it has appropriate method signatures to call.
There is a lot of personal preference, and a lot of experience/intuition involved. When `var` first came out, the team I was on took a pretty strict approach. We used it only when the right-hand-side was a constructor. Practically nobody agrees this is confusing or misleading: var something = new Something(); It was relaxed pretty quickly as we used LINQ more, because in the end sometimes it's easier to know "the result of this `Select()` will be an `IEnumerable&lt;KeyValuePair&lt;string, IEnumerable&lt;Customer&gt;&gt;&gt;`" than it is to type that junk out. The rule of thumb there is "don't make your LINQ too complex", but there's no way to define "too complex". But there can be a lot of intuition, too. Is it really hard to figure out `firstName` is a `string`? It'd be weird for `numberOfApples` to be anything but an `int`. And I'm generally assuming the return type of `GetPrices()` is some kind of enumerable, potentially of a `double`, `decimal`, or some custom `Price` type. Arrays/enumerables always have plural names. Dictionaries tend to have "lookup" in the name. Etc. While in that paragraph, I can't disambiguate some things, in my code I can. Good practices encourage us to write smaller, tighter units with less coupling than we used to. So my local variables have a very specific purpose and probably only "live" for about 5 lines. If it's too hard to figure out what the `var` type resolves to, something's wrong about my architecture! That doesn't mean I always use `var`. But if I don't use it, I'm probably trying to tell the reader something. That's usually, "Hey, I actually really care about shouting the type here, there's a reason it needs to be this specific one and it could be confusing if I don't make this statement." That goes along with the intuition above. If `firstName` is some custom `Name` type I probably already know that because I'm knee-deep in the domain. If `numberOfApples` is, for some reason, a `double`, I will probably call that out but I'm also probably in a context where that makes sense. If I call out that `appleBasket` is specifically a `List&lt;Apple&gt;`, it's probably because I want to add/remove specific apples from it. So `var` is a tool. When you use it, you're sending the message, "I think this type should be guessable, the name gives it away." In some contexts like LINQ, the *point* is you don't care much about the specific type, just that "it's an enumerable of something". But in some contexts, the type is so important you don't want the reader to guess, so then you don't use `var`. That sends a message, too. It's not *wrong* to avoid `var`. But after using it for 10 years, I assure you it doesn't turn C# into VB. That's `dynamic`'s job.
Marking a method async says I don’t return the value you want, I return a reference that is able to give you the value when you await the returned reference. This allows the code in the async method to do long tasks, ideally I/O bound, to get off the active thread and signal when they are done. Promises, continuations, and tasks are all concepts you could read about.
I'm sorry, this is just wrong. Hard-coded SQL in a repository is bad, but it's miles better than sticking it in the middle of your business logic. No offense, but what you just said illustrates deep ignorance of good software design. Am I to assume you think the solution to hard-coded SQL is to put it in *cringe* a stored procedure or something? I wouldn't be even slightly surprised if you're imagining an idea like that to constitute good design.
I know you're rejecting `struct` but that is the solution. It's been done. I've used the "LanguageExt" package's `Option&lt;T&gt;` before and that's how it did it. I don't remember how it handled `Some&lt;T&gt;` and `None&lt;T&gt;`, perhaps via implicit casts? It's open source, so you can find out. It's not "cheating".
Sort of. They use SignalR underneath though.
Aha, found it. https://github.com/louthy/language-ext/blob/master/LanguageExt.Core/DataTypes/Option/Option.cs "None" in this model is just the default struct value, which is impossible to create via the provided constructors. But when .NET creates the default struct value *it doesn't call a constructor at all*.
Sure, code how you like, but your opinion is still nonsense.
What kind of projects are you going to be working on?
Generally speaking, I only use var when the variable is set to the results of a linq query or other anonymous type, but other conventions are technically fine. The compiler will infer the type, and there's not usually a great reason to type it out unless you want to be pedantic about things. When in doubt, follow your team's coding standard, and as an intern ask your mentor/manager/handler/friends why they do things the way they do. You're an intern, a big part of your job is to learn about the job, and this is a great question to ask.
If you construct the struct in a way that its default value is a None, you're good to go. https://github.com/bitcake/bitstrap/blob/master/Assets/BitStrap/Plugins/Runtime/%23Core/Functional/Option.cs
F# is an example of a statically typed language which is able to implicitly resolve type information in many situations which C# cannot. I don't think it's pedantic to differentiate between initialization and assignment.
I'm not sure what crawled up your ass and died but you're not owed anything and I'm sure as shit not going to spend time writing out a basic implementation only for you to nit and pick it to death with "well actually"s. If you're lacking in imagination, I recommend looking up the LanguageExt package and look at their implementation of Option which has thought of a lot more edge cases than you and I will in a series of hostile Reddit comments. Yes, it's C# and the type system isn't Haskell so there are in fact holes compared to that implemention of it. But it gets the job done for 99% of what people are going to use it for in C#
&gt; If you're looking for a full fledged solution, I'd likely model it close to Nullable&lt;T&gt; except without using the struct restriction. There is `ValueOption&lt;T&gt;`. Does that meet your criteria?
Looks like that's an F# thing? Unless my search skills are lacking tonight. But if it's Nullable&lt;T&gt; without the struct restriction, yeah I'd probably just use that instead of building a new thing since the crappy parts have already been handled.
I deleted them in an attempt to leave this obnoxious back-and-forth bullshit that wasn't going anywhere. The point I was making wasn't important, so I got rid of it. You (and some others) clearly seem to have nothing better to do than argue trivial, pointless semantics on the internet. There's no "decision", nothing to follow. It was a trivial comment that /u/antiduh decided to pick apart.
I deleted them in an attempt to leave this obnoxious back-and-forth bullshit that wasn't going anywhere. The point I was making wasn't important, so I got rid of it. I'm not hiding. You (and some others) clearly seem to have nothing better to do than argue trivial, pointless semantics on the internet.
When you make toast, do you stare intently at the toaster until bread pops out? Much more likely, you set aside a plate, some butter, and a knife, then go do something else until you get called back by sound of the toaster. Then you resume making toast. As the other link states, there isn't necessarily another thread involved. Async/Await mostly dictate how a thread can work on other things without waiting on some external factor.
Assuming you aren't using `appsettings.json` and are instead using `web.config` or `app.config`: &lt;connectionStrings configSource="ConnectionStrings.config"/&gt; This will cause the configuration API to load the "ConnectionStrings.config" file. The file path you specify *is relative to the location of the config file*, so it can't be an absolute path. You can do similar things with the `appsettings` section, among others. The `ConnectionStrings.config` file must contain a `connectionStrings` element as the root element. This is similarly true for other sections that can be specified by an external config source.
Yes, but I don't know the details.
This is the first public showing of my blog. I'm open to hearing any and all criticism/comments. The serialization method I describe worked out great for my use-case. I don't have to convert/copy anything to write to the stream, and reading goes straight into the memory locations that I want.
1. The lack of a default constructor is a C# limitation. The CLR has no such restriction. 2. None can be defined as some boolean property being false. This would not require a constructor as it is the default.
You never ever use Thread.sleep in async code! It's a nightmare, and sooner or later you will run into problems! Another alternative is await Task.Delay(5000);
In addition to what has already been said, dynamic is really, really slow.
And more modern component based code layout. Its more similar to coding in Angular than web forms.
Are you using Linq to entities? Dont use that. Use entity framework.
Kinda depends on the Stream implementation, too. Default implementation copies the span to a byte array anyways.
The stream copies into a buffer, it doesn't allocate multiple buffers. If I weren't using Span, I would have to copy into a byte array that I then pass to the stream. So yes, there's always a copy, but this method has fewer. The number of copies is even further reduced because I can take a whole struct array at a time. Other methods might have to copy each member of each struct into a buffer one at a time.
Exactly. It's all about business use cases.. Not fucking mad performance. I don't get this shit. They don't live in reality.
You do need the ASP.NET Web Development workload installed for that option to show up. quicktype.io can do this too if you just need it once and don't want to install a bunch of stuff (be sure to turn on the "types only" option.
Vote me down if you want. DB access is the bottleneck. Not code execution.
KISS. Not the midget band.
Our deployment pipeline includes generating a json file to place in the application's directory. It automatically reads from that file on launch and populates the configuration (which is built from both the json file and the app.config).
Just add a .Distinct() at the end.
If you pass a byte[] to the Stream, it does NOT by default copy into another buffer. It only does this if you pass a ReadOnlySpan&lt;&gt;. This is to protect existing implementations of Stream. Invoking Stream.Write(ReadOnlySpan) does one copy (struct to byte[]). Invoking Stream.Write(byte[]) does one copy also: your manual copy to a byte[]. Basically, the total number of copies are the same as using Marshal.Copy. Now, you probably save a bit because the stream by default uses a buffer pool. But you could also just use that buffer pool. Basically, you're not saving copies here. What you are doing is giving the Stream implementation an OPPORTUNITY to optimize in the case of a ReadOnlySpan.
That's just, like, your opinion man.
I personally default to var unless I am using dynamic...which is almost never.
Its a `virtual` method which does that as the base Stream class doesn't know if the implementing class supports Span. The actual Span overrides in .NET Core for the concrete Stream classes (FileStream, MemoryStream etc.) don't do the copy.
Right, they do. But that's what's not pointed out in the article: the speed increase isn't because he's not doing an array allocation. It's because his specific Stream is doing an optimization which he's making available to it (if it can).
Var is not dynamic at runtime. The types of linq expressions are known at compile time. Var reduces cognitive overload because 99% of the time the *type doesn't matter*. Everything you said is wrong.
"object" typed variables can be assigned anything because all object instances are inherited from "object" which is a c# alias for System.Object. Value types too, even though they are boxed when assigned to a variable of type "object"
On the graph, why is the "Custom" legend color dark blue but the bar graph is light blue?
The *best* answer. A very enjoyable read too, he's very good at explaining the concepts in an understandable way. There's a reason he's the number one answerer on stack overflow.
It's actually pretty simple. All structs come with an implicit default constructor that initializes all members to their default value. Just make that state your 'none' state. Now I personally don't like this because now all you've got is none instead of null and you still need compiler support to force checking... But you can write the struct.
I have a better and simpler version. Ditch the implicit conversion. The *only* way to get the value out is to call bool HasValue(out T Value) There's no way to stop someone from creating it with null at compile time, but you can move the exception from access to creation.
You don't actually need the Unsafe class, or to even use pointers at all. You can actually use the functions in the MemoryMarshal class in order to create a Span directly to a ref, no unsafe needed. public static void Write&lt;T&gt;(this Stream stream, T value) where T : struct { var tSpan = MemoryMarshal.CreateSpan(ref value, 1); var span = MemoryMarshal.AsBytes(tSpan); stream.Write(span); } With this, you only need the struct where clause, and don't even need unsafe to be enabled.
Plus doing it the long way is a violation of the DRY principle. If you need to change the variable type, you now have 2 places to update instead of just one.
Oh, that's an easy misunderstanding to clear up. Could easily be on my side. As far as I know, outside of this method you would use [StructureToPtr](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.structuretoptr?view=netframework-4.8#System_Runtime_InteropServices_Marshal_StructureToPtr__1___0_System_IntPtr_System_Boolean_) or [BitConverter.GetBytes](https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.getbytes?view=netframework-4.8). With the former, it copies to unmanaged memory and you then copy to a byte[]. So double-copying. With the latter, you're performing many, smaller conversions. No double-copy, but a lot of overhead. Is there a better way? The benchmarks are still great I guess.
The ELI5 answer is that LINQ to Entities and EF Core (which you should use if it's a new project) use a bit of reflection and attributes and manual configuration, mixed with the `IQueryable&lt;T&gt;` type to do some magic, and it's probably just not configured properly for your use case. I suspect the reason it worked as you describe is because you changed it to an `IEnumerable&lt;T&gt;` instead, which doesn't translate queries to SQL, instead it would have pulled in all of the records first, and then it's filtered in memory, basically negating most of the benefits you'd get using the query provider. There's more to it than that, but having had similar experiences in the past, I would assume your query attempted to acces either a type or property that was not configured to work with the query provider.
&gt; If his struct is less than 4096 bytes (by default) (and it probably is) Small nitpick, it doesn't have to be a single large struct. An array of structs works too, so `int[]` can easily be over that size.
For accessibility, I made the text darker blue and the bar lighter blue. That way the black text on the bars has higher contrast.
&gt; It doesn't have a None&lt;T&gt; that derives from Option&lt;T&gt;, instead None is a very special instance [snip] If you look at languages that have first class support for sum types (functional, Rust), the different members of the sum type are just different value constructors rather than implemented through some sort inheritance chain. Having tried (and largely failed at) implementing sum types through inheritance, it's a huge pain in the ass that's ultimately not worth it for the work that goes into it compared to how absolutely free it is with first class sum types.
My rule of thumb is this: * If it's a primitive type(like int, string, etc.) I use the type name. * If it's a ridiculously long type name(like IEnumerable&lt;Dictionary&lt;string, Action&lt;int&gt;&gt;&gt;), I use var. * If I'm using "new" to create the object on the right hand side, I use "var". Nonsense like `Book book = new Book();" shouldn't exist when I can write `var book = new Book();` instead. * If the type name is short and not immediately obvious from looking at the declaration, I use the type name.
I think they do https://github.com/dotnet/coreclr/blob/25878db0c11bfb8d52088c75ccfcc13e4c8383f2/src/System.Private.CoreLib/shared/System/IO/MemoryStream.cs#L722 https://github.com/dotnet/coreclr/blob/25878db0c11bfb8d52088c75ccfcc13e4c8383f2/src/System.Private.CoreLib/shared/System/IO/FileStream.cs#L413
Exactly, which is why I said I've rarely been able to justify using it. There are cases I've found it to be legitimately useful, though.
I bet you. Everything is s trade. Complexity and performance for simplicity. Just use your best judgement on the use case.
sweet..
Huh. Wish I'd known about MemoryMarshal. It even works for the array version. I'll do some performance testing, but I don't see why it would be slower.
Sure those are different concepts but when I said “first value assigned” I don’t think I was off the mark with “initialization” there.
Important to keep in mind that this implicitly relies on the layout and endianness of the struct, so this can't be safely used cross-platform. You also don't need the struct union hack to perform to reinterpret references, you can use `Unsafe.As` to perform arbitrary invalid casts.
That whole work-around is for when you don't have `Unsafe.As`. I thought "works on my computer" was obvious enough :P
My main interests are games. Specifically RPGs. But I’m expecting to start small.
In case it's not obvious, the compiler was written in C\#
Tried it out and it seems a teeny bit slower, but I'll have to run it a few more times tomorrow. I do need to keep `unsafe` for the `string` and `char[]` methods. The `stackalloc` for UTF-8 conversion is much faster than `new byte[]` or `ArrayPool&lt;byte&gt;.Rent`. At least stackalloc is less dangerous I think?
/r/ProgrammingBuddies
Removed: Rule 4.
Can you declare a variable in F# without also assigning it? I’ve never seen a naked let x, I doubt it would compile. Maybe with mutable it implicitly assigns null?
Thank You. I implemented this but ran into an issue. If I keep holding the move left or right key, it will keep moving for a while even though I already released the key, so the key input is taking more strokes per frame. Is it possible to read only one key per frame and disable the read key until another frame is rendered? I am not sure if this question makes sense.. :( &amp;#x200B; Please see my source code if you have some free time: [https://github.com/anuphunt/Space-Invaders](https://github.com/anuphunt/Space-Invaders) . The read key is implemented in GameState.cs. &amp;#x200B; Thank you
You don't need unsafe to use stackalloc. You can stackalloc directly to a span: ```csharp public static void Write(this Stream stream, char[] value) { var encoding = Utf8NoBom; var valueSpan = new Span&lt;char&gt;(value); var charLength = encoding.GetByteCount(valueSpan); #if DEBUG Debug.Assert(charLength &gt;= value.Length); Debug.Assert(charLength &lt;= value.Length * 2); #endif Span&lt;byte&gt; byteSpan = stackalloc byte[charLength]; var byteLength = encoding.GetBytes(valueSpan, byteSpan); #if DEBUG Debug.Assert(byteLength == charLength); #endif Write(stream, byteLength); Write(stream, value.Length); stream.Write(byteSpan); } ```
No no, you asserted an opinion. You said it was lazy, which can only be understood as being “bad” I’m not sure what other connotation that “lazy” can have. The idea that using the keyword var in any way is objectively bad is not grounded in anything. Therefore your opinion is nonsense.
Pretty awesome...i will check it out..batch and powershell really are terrible.
You could just ignore the thread. &amp;#x200B; Your choice to edit to delete what you said and avoid criticism is 'hiding'. You chose to not be confronted, rather than just ignore. The difference is more significant than you would likely admit.
Did you use a constructor with arguments in your Select? In that case EF cannot translate the call to SQL. If you on the other hand use an empty constructor with object initialization, it should work.
You also don't need to `#if DEBUG` out `Debug.Assert(...)` because [that function](https://github.com/dotnet/coreclr/blob/64855db/src/System.Private.CoreLib/shared/System/Diagnostics/Debug.cs#L89) has the `[Conditional("DEBUG")]` attribute, meaning all calls to it are automatically ignored by the compiler if the `DEBUG` symbol is not defined. (Oh, and if you want them to show up as code on Reddit, add 4 spaces to the start of those lines too)
Did you try using escape character?
I agree that batch is awful but I couldn't disagree more about powershell. It's great as a shell and scales up nicely by allowing you to tap completely into any .NET library you need. /u/bot-mark are you planning on opening the source of your language?
yeah, i tried doing double quotes like ""command"", and I tried using back ticks, and I tried using back slashes. no luck.
Yes, I plan to put it on GitHub in a day or two, but I don't think it'll be much help to anyone. Since it was my first compiler I wrote it the "quick and dirty" way and it's practically incomprehensible. In a week, even I'll have no idea how it works.
Disclaimer added
I could only find the property for the xaml. It is set to "page". If I change this to embedded ressource, the code is not working anymore. &amp;#x200B; sorry, yes I meant the XAML Designer. Within the Designer, the Windows is visible. When I run the Program, it's not visible anymore.
I have developed some apps for uwp, and it was a pain :). I see UWP the same way as Silverlight, a dead end, but it is just a personal opinion. Here is also a thread on this subject&gt; https://www.quora.com/Which-is-best-for-Windows-development-in-C-WPF-or-UWP
 &gt;I deleted them in an attempt to leave this obnoxious back-and-forth bullshit that wasn't going anywhere. The point I was making wasn't important, so I got rid of it. &gt; &gt;You (and some others) clearly seem to have nothing better to do than argue trivial, pointless semantics on the internet. &gt; &gt;There's no "decision", nothing to follow. It was a trivial comment that /u/antiduh decided to pick apart. /u/bricked_machine You were stating things that were just blatantly false, of course you're going to be picked apart. You can comment all you want but don't claim to be standing by your comments when you are not.
Somewhat similar but the article is about multi-threaded pipeline, where each step is executed on a different thread, with a buffer in between steps. These are synchronous/asynchronous execution pipelines.
I wasn't really rejecting it, I just couldn't find a way to make it work, luckily there are people who are better at C# than me.
Cause as we know all applications use databases.
did you try using Systen.Diagnostics.Process instead of powershell?
at the end of the day, macOS is at best a knock off of BSD which was a fully functioning Unix release. Gnu was an attempt to remake Unix but open source and just different enough to skirt copywrite laws. The gnu shell was completed but they dragged ass on the kernel, which is why Linus ever set about writing the Linux kernel in the first place. Meanwhile, macOS is a derivative of BSD. Technically macOS is more Unix-like than Linux. If anything, Linux is the “first cousin knock-off” of macOS by your strange genealogy.
Yes, what's mentioned.
&gt;I could only find the property for the xaml. It is set to "page". If I change this to embedded ressource, the code is not working anymore. The xaml file should be Page &gt;Within the Designer, the Windows is visible. When I run the Program, it's not visible anymore. I think this indicates that this property is causing the actual error.
&gt;As for vim, it's the defacto standard for editors on Linux Hell of a weird typo there to turn “emacs” into “vim.” What kind of keyboard you running, bro?
How about a string builder?
100% correct. However, I still can't wrap my head around *why* MemoryMarshal is considered "safe", because you can do some *really* unsafe things with it. For example, you can create a span from a string, overshoot the length parameter, and then start clobbering the CLI's string interning table and basically hose the application. It essentially gives you unrestricted memory access to your applications entire memory space.
C# 7.2 lets you do this now, without an unsafe context: `Span&lt;byte&gt; byteSpan = stackalloc byte[charLength];` C# 7.3 even lets you initialize it: `Span&lt;byte&gt; byteSpan = stackalloc byte[] {0x00, 0x01, 0x02 };`
I got it ... I'm waiting for someone running behind me, ringing a Bell, and shouting "Shame" all day... I haven't imported the "Images" Folder into the project, because I thought, He loads the file from the file-system ...
I was already. But then /u/FizixMan got afraid.
FreeBSD is superior, except in software and hardware support.
Look into using Benchmark.net for benchmarking, it's heaps easier than doing it yourself! Also look into System.IO.Pipelines; and for working with streams, [Pipelines.Sockets.Unofficial](https://mgravell.github.io/Pipelines.Sockets.Unofficial/) Also a shameless plug for my helper library for reading/writing primitives to spans; [Spandex](https://github.com/jonorogers/SpanDex)
And this won't compile.
Do you have any learning material for Dispoable pattern?
Batch is indeed rubbish
So is JavaScript. That’s why transpilers exist.
At least you found a solution :-) Please update you post to reflect the solution for potential future readers
Query: Do you feel that powershell &gt; bash?
So there's a long-running joke that if you've got a programming problem and think a Regex is the answer, you end up having 2 problems. But in all honesty, Regexes are your friends here. [https://www.regular-expressions.info/](https://www.regular-expressions.info/)
You completely misunderstood the point I'm making. Read it again.
The results are not the same. If you start a new thread to do some file access, that thread will be blocked while it waits for the file access to happen. With async await no actual thread needs to be run while you await the file access. Have a read of this to get an idea: [There is no thread.](https://blog.stephencleary.com/2013/11/there-is-no-thread.html)
Hah, I just posted the same blog post to someone else in this \*pun warning\* thread.
Yeah I've looked into it a bit, but regex seems uncomprehensiv... But I manage to get this which gets the number I suppose. so I could get the address number with this. string result = Regex.Replace(input, @"[^\d]", "");
This won't work outside of a single process, as endiannrss and layout are liable to change.
Yes. i meant that I see people wanting ”dynamic” behaviour and thinking they should use ”object”. (And other similar misconceptions) Usually this is with people who used to do VBA stuff and were dropkicked straight into .NET. They think they already know it because VB.NET looks the same as VB and then think they can just translate that mechanically into C#. Without bothering to or actively refusing to learn the differences. ”I have been doing this for years, that’s just fancy schmancy syntatic sugar”. In effect, they write VB/VBA code but now in C# And they get away with because of their ”tenure” or the fact that their supervisor doesn’t understand and wanta to avoid conflict. Sorry about ranting, I seem to have unresolved issues ...
I think what you have created is a scripting language. Still impressive though, great job.
When you have zero knowledge about C#, you shouldn't be telling others about C#
Good for a Stack Overflow question
Nah, think of extension methods, but ones that you can override too. Think of LINQ. All the `.Where`, `.Select`, `.OrderBy`, '.Count' things are actually extension methods, but they might as well live on the `IEnumerable&lt;T&gt;` and `IQueriable&lt;T&gt;` interfaces directly. Also they have optimizations in place which aren't that great to maintain, like the `Count()` method will try to cast to `ICollection&lt;T&gt;` to benefit from its `Count` property instead of having to iterate to count the number of elements. This kind of optimization could be done on the `ICollection&lt;T&gt;` with an override instead of casts and hacks in the extension method.
ES6 and beyond is not that bad, JS gets a lot of a bad rep for the earlier versions which kinda sucked
The main issue with JavaScript is the sheets number of variations in browser engines doing things differently. Batch is just bad badly implemented, and dangerously quirky.
If you have any control over the input, try to separate the parts that you want handle separately. That is, ask/read the street into one variable and the number into another and so on. String manipulation and parsing can solve lots of problems, but it is not optimal in many cases. If there is a set format for the address string, use that: split the string by the last space. Then you have the street name in one part an the rest in another. Then you can chop the letter off the end into one variable and you left with number. Or figure out the regex... but remeber, that way madness lies.
PowerShell can be Amazing, But it is also suffering from version incompatibilities. V4 and 5 are amazing. 6 is less amazing. 1-3 are less amazing still.
Some pseudo-code (written from memory, so apologies in advance if there's any error) to get you started, but I really believe you need to have some basic grasp of Regexes before using them: var myRegex = new Regex(@"\^(?&lt;Street&gt;.+)(?&lt;Number&gt;\\d+)(?&lt;Letter&gt;\[a-zA-Z\])$"); var match = myRegex.Match(INPUT); //handle match.Success == false var street = match.Groups\["Street"\].Value; var number = Int32.Parse(match.Groups\["Number"\].Value); var letter = match.Groups\["Letter"\].Value; You can use [https://regex101.com/](https://regex101.com/) to parse my Regex to see what it does. Have fun! :)
The syntax of PowerShell is just what I can't get used to...
PowerShell 6 is essentially PowerShell Core, right? They surely had to make some steps back with it.
Partly this but partly because it's cool to hate on it and partly because most of the people hating on it are the ones that were: 1) Exposed to some hell codebase involving jQuery spaghetti and every best practice thrown out of the window 2) Made no effort to try learn it
This is almost never a problem in modern browsers and JS versions.
I wrote a relatively simple site in it, and thought it was all going well when testing everything. Then I tried it on my phone. At first it was alright, but the application would stop working whenever I turned off the screen on my phone. After digging around it is becuase the connection between the client and the server would be dropped when the screen was turned off and nothing was ever trying to re-establish the connection. This was with Core 3 Preview 3 though. I did see something about setting up reconnection behavior in Preview 4 or 5 for SignalIR connections, which is what Server-side components uses. That may solve that problem, but I just rewrote the site using norml MVC and Typescript/Javascript at the time, so I don't know if it fixes the problem or not. Personally, I think I'd rather just do client-side Blazor, if only they could get the startup time down, that was the one reason I went with server-side over client-side to begin with. It has gotten better with the recent previews, but there is still a rather noticable startup time for client-side Blazor.
[removed]
Oh of course. It needed to be done (wish they did it earlier so that they didn't have to remove so much from 5). 7 or 8 will eventually be great again (hopefully)
They aren't safe. At least, not all of them. And that is okay.
Lol you guys this is hilarious. Why would anybody spend hours contemplating if a shortcut is worth it. Yeah. It's worth it because it saves you time. It also saves anyone else refactoring the code time. If the argument is that it might cause problems for someone reading the code then *that* someone is the lazy one, not the guy using var. It just removes unnecessary wet code, who is against that? Who loves wet code? I don't get it
Especially with Babel
But they don't carry an unsafe context 💀
This is downright awesome. I might actually use this - writing raw batch sucks!
The best way to dispel the idea that regex is bad is to use powershell regularly. The -match operator is amazing and -replace uses regex "Lot342s","of","wo31rd","swith2", "numbers", "i1n53 them" -replace "\d+",""
As long as I can download and compile/run it, I'll be able to make some true abominations. I want to see what a mandelbrot generator or raytracer look like in this language and then the absolute monstrosity of batch at the end.
Now if Microsoft would fix the runtime bug that prevents optional recursive structures, I'd be so happy... struct N&lt;T&gt; { } struct M { public N&lt;M&gt; E; } This code is completely legal according to the C# spec, but it will cause a `TypeLoadException` at runtime (.NET and .NET Core).
It's not that Regex is bad, it's that most cases where you want to use Regex is to parse user input (machine input in most cases is already parsed), or at least some info that can be in various different formats - which is simply hard. Writing a good Regex requires knowing the "language" itself and how a given implementation behaves. All this complexity means that Regexes tend to create problems when maintaining your code; it doesn't mean they're bad themselves - in fact in some cases they're the perfect tool for the job.
They will be shipping the server-side razor components with the Net Core 3 release, so most of the main bugs should be squashed by then. In contrast Blazor will become officially part of Net Core at the beginning of next year if we are lucky. I am really hoping that we can use both server-side and client-side within the same app so that we get the best of both worlds.
Exactly. It would be like saying C# isn't any good because it *originally* didn't have generics.
I really just hate the verbosity of the commands. It is horrible compared to the simplicity from linux commands.
I will have to look at that. Knowna good example?
C#/netcore scripts would be cool to have
This worked well for me last time: https://github.com/filipw/dotnet-script
This worked well for me last time: https://github.com/filipw/dotnet-script
Yes, you're right. I forgot about that one. Linux is definitely gaining improved .NET support (and there are some moves to have even more MS infrastructure running on Linux as well, for all you SQL Server fans, etc) but Windows is also generally improving to be more supportive of a variety of things (the Windows Subsystem for Linux is a step in that direction, though they still have to jump through hoops to get Docker running correctly and it's still not stable enough in my testing). The situation is changing every day and who knows what we will all be using in 2-5 years.
&gt;i\_spd\_man this type of naming is very useful when working with non typed languages like javascript, tho i prefer iSpdMan
Using PowerShell directly is much more flexible. Using Process is notoriously full of potential problems, especially around encodings.
Just read up on C# string escaping.
Do you need more throughput? Is the method just taking too long? As in any optimization, first measure, then, if and only if its necessary, fix it. My assumption would be that IO speed from the remote service is the issue, which unfortunately you can do little to nothing about. I would question the use-case in this example - Do you really need to get all 100 of them in one user request? Can you do it in the background and cache it if it's a query?
&gt; I’m afraid that I’d start using var as a crutch or out of laziness. ? I use var *always*, and I have pretty extensive C# experience.
well but it didnt work on it so i suggested a different approach
Tremendous. I'm sure several others would chip in to help clean it up. There quite a few of us who are not happy with batch and the inconsistencies of powershell.
This is the part of PowerShell I disliked most: https://stackoverflow.com/questions/10286164/function-return-value-in-powershell I don't get why Microsoft just didn't use C# and extended it a little for scripting conveniences that could've been made into a just an assembly.
Fixed it. That's what I get for typing it up on the fly.
Or just hate it, because websites use 70+ Scripts to bombard users with stuff they don't need.
Now I still wish they'd fix their runtime bug. :-( struct Test { public readonly Option&lt;Memory&lt;Test&gt;&gt; Next; } Always results in a `TypeLoadException`. (But unrelated to your option type.)
lol not even a contest. They're not comparable, powershell is a proper language at the level of python.
Kindasorta I guess? PowerShell was meant for systems administrators to make common tasks easy by having easily discoverable commands by convention. Instead you get lots of people with scripting background doing insane gymnastics to create terrible abominations. If you want a mess then PowerShell won't stop you from creating one, even if there are simpler ways to do it.
You're damn right [I'm afraid.](https://www.youtube.com/watch?v=Asv4IbNQ1Iw&amp;t=2m9s)
Code designed to piss users off is a reason to hate the language itself? OK then.
!remindme 2 days
I will be messaging you on [**2019-07-12 11:32:29 UTC**](http://www.wolframalpha.com/input/?i=2019-07-12%2011:32:29%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://np.reddit.com/r/csharp/comments/cbbbkc/ive_written_a_programming_language_that_compiles/etf32co/) [**CLICK THIS LINK**](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fcsharp%2Fcomments%2Fcbbbkc%2Five_written_a_programming_language_that_compiles%2Fetf32co%2F%5D%0A%0ARemindMe%21%202019-07-12%2011%3A32%3A29) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete%20Comment&amp;message=Delete%21%20cbbbkc) ***** |[^(Info)](https://np.reddit.com/r/RemindMeBot/comments/c5l9ie/remindmebot_info_v20/)|[^(Custom)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List%20Of%20Reminders&amp;message=MyReminders%21)|[^(Feedback)](https://np.reddit.com/message/compose/?to=Watchful1&amp;subject=Feedback)| |-|-|-|-|
Oh man, this is the pettiest thing ever. I love it.
I created a pipeline system, similar to this. One minor difference was that you could use an external json file to configure the pipeline order and properties. Having the ability to add remove or simply rearrange steps in production was a life saver.
I think that's just becase you are used to linux. I started tinkering with both bash and powershell at about the same time and felt more comfortable with ps.
Fixing the problem is better, though. The other approach will likely lead to problems as well. But yeah, I wrote a tool that launches PowerShell. I started out using diagnostics, but switched to the solution OP uses for much higher flexibility later.
We've gotten to the point that in most situations there are better standardized ways for whatever needs to be parsed. C# has attributes that can be applied to properties to validate phone numbers, emails and other things. Unless it's very simple search rules like I demonstrated above, regex parsing should really only be necessary in edge-cases and I'm surprised to learn people write several lines of regex. &amp;#x200B; For arbitrary data with structure Powershell provides the ConvertFrom-String cmdlet which is an algorith that can be trained by providing an initial template. It's a bit finicky though so even when I know about it I rarely bother.
Alias all the things!
7 will be ok, people will hate 8, they'll hate 8.1 slightly less. 10 will be great but people will insist that it's awful for years and that 7 is the best. Eventually 10 will be seen as the new and better 7.
you can provide the destination object in which case you can map the values to the existing object. In the converter you should check if the destination is null and create new object if it's null, then map the desired values
কোন স্কুল? — A recommender system for secondary schools in Bangladesh. The user gives intended grade, student's age, location and guardian's occupation as inputs. Then the user "compares" between all possible pairs of a set of criteria of schools (such as school's location, how old the school is, the teacher-student ratio etc.). Then the system uses fuzzy analytic hierarchy process (FAHP) to calculate compatibility scores for all the schools in the dataset. [Live on Azure](https://konschool.azurewebsites.net/) [Project on GitHub](https://github.com/maacpiash/KonSchool) [Docker image](https://hub.docker.com/r/maacpiash/konschool) I have to confess: the docs aren't there yet 😅 P.S. "Kon School?" means "Which school?" in Bengali.
Try using BechmarkDotNet. Handles all the warm-up for you, and can export a variety of nice looking result types.
I wrote scripts which wrote AutoLisp. People come to my desk and ask for my help, and I can't. I don't know autolisp, I know how to write a C# program that can write AutoLisp.
Just do a try catch inside your loop and ignore the exception.
This is so clear that I am wondering why the hell I didnt see this. Thanks!
Or because there’s no real consensus for what to support where. Eg from the other day: I wrote a script for my Jekyll blog. I wanted to Minify it so I installed a plugin which also under the hood uses the JavaScript minify program. That program by default doesn’t support ES6. So I installed the ES6 compatible harmony version. Turns out that version doesn’t support variable definitions in class bodies and the error message didn’t even tell me what line the error was on; I wasted 2 hours trying to find out why I couldn’t build, before pinning it to that file (yes, it didn’t even tell me what file it was) and then guessing that that was why. There’s also another case, for example, Firefox doesn’t support lambda methods in class bodies, chrome does. I appreciate that the JS community is trying to rectify issues with early JavaScript by introducing all these new features, but it’s a mess out there. Release simple features, on occasion and let users adapt and grow to them or you’ll have a fractured ecosystem.
If your willing to install 200 hundreds dependencies alongside Babel. That’s way too much overhead just to deliver a consistent experience in a cross browser way.
If you can't figure it out, the CVS parser included with. NET does offer that capability.
That's because your `startNode` is actually a sequence of multiple nodes. If you want just one, then replace `.Where(` with `.First(`.
I'd do a string.Split() on your string using spaces as your delimiter and pump it into an array. Since we know that the street type (road, Ave, street etc.) will always be to the right of the street name, and the street name will be to the right of the house number, we can loop through the array, starting on index 1 (assuming the house number is index 0) until we hit the street type. Similar logic could then be applied to parse out other substring as well.
the title makes no sense, as nothing here is actually being compiled. still really cool though, good job!
You work with smart people... I dont.
Everyone talks about "working within the same environment as production" but that leaves the impression that you have to be forced to use Linux, rather than choosing to. To me, Windows is slow and bloated, and macOS overpriced. On top of Linux being easier for programming (though, to be honest, with things like Chocolatey and WSL it's much easier on Windows now), it's fast and free. I'm not big on privacy, but you have that as well, if you choose. The only reason I keep a Windows install is by default as gaming is still embracing Linux. That isn't to say Linux isn't perfect; the fragmentation is its biggest problem. However the current offer is already powerful.
I guess you haven't tried then haha. What older Javascript engine inconsistencies such as object property ordering have to do with dependencies, I have no idea.
Install Babel, 99% of the problems you listed vanish.
Thank you everyone for all the responses!
Tried what? Babel and webpack? I did. It took ages to install, it took ages to delete, it wasn’t a fun experience.
Wow. This is beautiful. I haven't started playing with blazor yet. But looking to try it out one of these days.
Especially these days
Nice! I hate it and also love it
I have actually written a serializer using just that for my library, although it has some limitation: - If you are on a too old framework, it won't work for class type without a parameterless contructor - Does not handle reference recursion, everything is deep cloned - Does not use the stream span variant since I am limited by netstandard2.0, hoping for the next version You can find the full serializer [here](https://github.com/Doraku/DefaultEcs/blob/master/source/DefaultEcs/Technical/Serialization/BinarySerializer/Converter.cs) or only the unmanaged part [here](https://github.com/Doraku/DefaultEcs/blob/master/source/DefaultEcs/Technical/Serialization/BinarySerializer/UnmanagedConverter.cs) (with the public api being much simplier [here](https://github.com/Doraku/DefaultEcs/blob/107cac087bafd655db3f4fc0e81ec71d5c63c3f0/source/DefaultEcs/Serialization/BinarySerializer.cs#L160)). One thing to note, the unmanaged constrained is only enforced at compile time, so to have an unique point of entry to handle both case (managed and unmanaged) I had to check the type at static construction to get the real action by reflection, there is some talk to add some static delegate (which can be inlined) in dotnet so hopefully this will be improved in the futur. Also like some people have said, this is runtime dependant so you can't use it across different platforms. As long as you know your limitation and your use cases, you can go crazy :)
&gt;at the end of the day, macOS is at best a knock off of BSD which was a fully functioning Unix release No. BSD was not (and is not) a Unix release, its a Unix work-alike that embraces the unix label. SCO/Caldera owns the only actual Unix. And macOS may be more Unix like than any operating system ever, but who cares? OSX is a walled garden, hyper-commercialized OS that runs on curated hardware for people who like to wear berets and buy overpriced shit because they don't understand computers in general, and certainly not Unix. So, cousin is an apt description. But what does BSD have to say about it? &gt;The BSD operating systems are not clones, but open source derivatives of AT&amp;T's Research UNIX® operating system, which is also the ancestor of the modern UNIX® System V. This may surprise you. How could that happen when AT&amp;T has never released its code as open source? &gt;It is true that AT&amp;T UNIX® is not open source, and in a copyright sense BSD is very definitely not UNIX®, but on the other hand, AT&amp;T has imported sources from other projects, noticeably the Computer Sciences Research Group (CSRG) of the University of California in Berkeley, CA. Starting in 1976, the CSRG started releasing tapes of their software, calling them Berkeley Software Distribution or BSD &gt;https://www.freebsd.org/doc/en/articles/explaining-bsd/what-a-real-unix.html
Nice, thanks
Collect them all into a list. Then at the end, throw an AggregateException if the list isn't empty.
Just assign values you don't need to $null or cast to [void]. Out-Null is poor practice anyway due to how it negates output.
Right, and as I said, completely useless. If you did that, it would only for null at check at runtime, *just like it does now*, and will have no compiler warnings or errors about mismatched nullability, *just like it does now.*
That moment when you first realise that inheritence isn't the magic hammer you thought it was, and your logic is not nails.
This looks insanely cool
Just do this. Don't like around regex or split manipulation. Addresses are complex, they could be in many slightly different forms even within the US, gets wildly different outside. Your best bet is to make different fields to get concise address line items from the user.
Well I used to be a VB coder before .net. before that I was straight up C. I couldn't wait for c#. To be honest, I get excited about new language features and try to see how useful they are in helping me write more concise code. VB had a purpose 20 years ago or so, but damn I don't think I can go back.
You got multiple options: use out arguments: ``` void ReadLines(object source, out IList&lt;object&gt; data, out IList&lt;Exception&gt; exceptions) { data = new List&lt;object&gt;(); exceptions = new List&lt;Exception&gt;(); //Fill data and exceptions } void Main() { ReadLines(source, out var data, out var exceptions); } ``` use tuples: ``` Tuple&lt;IList&lt;object&gt;, IList&lt;Exception&gt;&gt; ReadLines(object source) { IList&lt;object&gt; data = new List&lt;object&gt;(); IList&lt;Exception&gt; exceptions = new List&lt;Exception&gt;(); //Fill data and exceptions return Tuple.Create(data, exceptions); } void Main() { var tuple = ReadLines(source); var data = tuple.Item1; var exceptions = tuple.Item2; } ``` Go completely fancy and use tuple deconstruction (since C#7): ``` (IList&lt;object&gt;, IList&lt;Exception&gt;) ReadLines(object source) { IList&lt;object&gt; data = new List&lt;object&gt;(); IList&lt;Exception&gt; exceptions = new List&lt;Exception&gt;(); //Fill data and exceptions return (data, exceptions); } void Main() { var (data, exceptions) = ReadLines(source); } ```
Now do one for bash. I can't stand writing in batch or bash. Thank goodness Powershell exists, and is cross platform.
Or that it has garbage of standard library, hence why packages like `moment`, `date-fns`, and `lodash` are ubiquitous. Or that it’s the language of most surprise with coercion rules and some hoisting behaviors. Just because “learn how to get around those issues” doesn’t make it any better of a language.
C# doesn't have a standard library either. .NET does though.
You can try putting that smtp hashtable into its own $ps variable at the beginning of the powershell line. So, $ht = @{add=“SMTP”} ; .....the Rest of the powershell line.... And then use the $ht in place of where the hashtable would have been. Don’t forget the semicolon after the variable assignment so it runs as 2 commands.
Linqpad
That hardly seems like a reason to hate the language.
I'm from a Windows background, been using PoSH for years now and starting to look into the CLI implementations that are popping up here and there (like office365-cli, because they work on anything, and DevOps Ubuntu agents are much faster than Windows ones), but I find it horrible parsing the responses of complex objects, whereas PowerShell just handles those objects natively with no response parsing needed. Beautiful.
9 won't exist because too many people will be looking for '98' in the version string to determine some archaeological version of itself in a past life.
Snazzy!
And not sure what makes you think this is so easy. There are a lot of really smart people working on this problem, and have not done it. And this is nitpicking? Your class is useless. * `UnwrapOr` is really just the null-coalesce operator `??`. * `UnwrapUnsafe` is just a normal dereference, but ugly. * `Map(f)` could have just been `f(value)`. * Offers no compile-time check of nullability. What are you even trying to do here? Convert a value to a momad maybe? That is what LanguageExt is trying to do and looks quite effective at that. But the question was about trying to forbid a null value in compile-time, which I think you might have missed.
JS gets a lot of bad rep because people associate it with the DoM from back when every browser did it’s own thing. As a language it was always pretty good for its time imho
Where did you learn how to use Blazor? It's been a struggle to find good resources for it
You have a really long single line string. It may be helpful to use a multiline [Verbatim string](https://www.c-sharpcorner.com/uploadfile/hirendra_singh/verbatim-strings-in-C-Sharp-use-of-symbol-in-string-literals/). What is the error when you format the script block like the following? ```csharp ScriptBlock.Create(@" Set-ADServerSettings -ViewEntireForest $true; $Aliases = import-csv $CSV; foreach($entry in $Aliases) { $SMTP = $Entry.Alias; Set-RemoteMailbox -identity $bucket -EmailAddresses @{add=""$SMTP"" } } " ```
&gt; luckily there are people who are better at C# than me. Ha, this is why I think the general disdain for "copy/paste programming" is misguided. Unless you were trained by a pack of wolves, everything we do is built on the ideas and techniques of other people.
1. Correct. And the reason for that is that the default constructor will not be called in many cases, so it was forbidden because a sometimes-called constructor is worse than none. 2. Correct. But this does nothing to address the question, which is to try to forbid null at compile-time. This would be a run-time check. 3. Same as number 2.
When I look at how much effort is being spent on non-nullable reference types, I keep asking myself if it'd just be easier to give C#/the CLR a first-class Option type.
You know what I’m getting at, don’t be pedantic.
Backtick is never an escape character in C# . Double-double quotes only escape in a verbatim string (e.g. @"A ""Verbatium"" string"). Backslash is the escape character in a normal string (e.g. "A \"Normal\" string"). When you say you had no luck using backslashes, what is the error you were given?
Same here. Started VB in 1999, switched to VB.NET in 2005. I misunderstood the whole migration thing because of the way it was pushed, so I tried to code like it was ”just VB but with OO” which did not work out. Fortunately I had to soon learn C# for a project and ”mind was blown” when I understood what .NET was about. Now I use both VB.NET and C# almost daily for work, and my VB.NET looks more and more like C# (While my C# looks more and more like F# or Python I guess)
You get a little, because you can't not call HasValue. Not if you want to actually use it. But it still doesn't stop you from ignoring the result.
 ```csharp command = new PSCommand(); command.AddCommand("Invoke-Command"); ``` Lines 2 and 3 look a little odd to me. Are you sure you don't want them to be ```csharp command = new PSCommand("Invoke-Command"); ``` ?
Now you’ve introduced another layer of complexity because the language is unwieldy. You’ll have to deal with the opaque nature of not knowing **exactly** what code is being generated and if there’s a potential quirk with Babel you might be out of luck (rare, but happens). Then there’s debugging code, which you’ll be relying on sourcemaps. Not the end of the world and most debuggers can handle them properly but it’s yet another thing. In my opinion, rampant use of transpilers is a code smell of the language itself. I get the argument on the browser side for compatibility, but disagree with using it server side (Node).
If you want to forbid nulls, WTF are you asking about Option types? The whole point of an option/maybe type is to add the ability to express a null, not remove it.
I really wish Reddit would adopt the triple-backtick to mean code. It's a lot easier to do in the comment box. Protip: I write my posts in Vim so I can do the indentation dance Reddit requires.
What would force you to call HasValue?
Well question is more about implementing an `Option`, `Some` and `None` types, that are convertible based on their nullability. Just the not-null case is the hard one.
 public class MaybeNull&lt;T&gt; where T: class { private T _value = null; public static implicit operator MaybeNull&lt;T&gt;(T value) { return new MaybeNull&lt;T&gt;{ _value = value }; } public bool HasValue(out T value) { value = _value; return _value != null; } } Usage: if (someFunctionThatReturnsMaybeNull().HasValue(out TypeOfValue value)) { //use value. It's not null. } * Impossible to access _value without calling HasValue. * Can't actually enforce it at compile time but it's very easy to see if the check was ignored.
It does make sense.
Bing a ding ding. Could add first sum types while they're at it. 🙏
Some and None are not types, they are runtime values. That's like asking for compiler rules based on whether a value is 0 or 1.
If you look at how the question is phrased, it's very obviously asking about implementing the Maybe monad.
The CLR already has a "first-class Option type". The challenge has always been adding a first-class non-optional type.
Explain? When I say an Option type, I mean a thing that: * Cannot be null. * May be in a "has value" or "no value" state. * Cannot be used safely without specifying what to do for both states. If this is already in C#, I need to be using it.
It looked like that reddit supported that in markdown mode. Especially for you I did the indentation dance
The fundamental problem here is that people refuse to acknowledge that None == null. Once you understand that, then you can start to understand that reference types in .NET and Java are already a form of Option/Maybe. And that is necessary for understanding why tacking on another Option&lt;T&gt; type won't fix anything.
My advice would be to use [ASP.NET](https://ASP.NET) Core...you can even use if on Linux / Mac. Take a look at guides on [ASP.NET](https://ASP.NET) Core 2.1 with VS Code (a lightweight editor).
 MaybeNull&lt;String&gt; x = null; if ( x.HasValue(var out x)) //null reference exception
Yeah I wish they'd get with the program! I can't tell you how many times I have to hastily re-edit a post.
Right. Sorry, my actual implementation is a struct.
I am going to chime in with a different opinion than most of the comments here. Code should be easy to read. I use `var` when I can guess the type of the variable from reading a few lines without tool assistance. Use var when initializing from: * Constructor: `var x = new ObjectType();` * Static factory method: `var x = ObjectType.Create();` * From cast or `as`: `var x = y as ObjectType;` * From obvious linq queries: `var x = y.OfType&lt;ObjectType&gt;();` * Well named builders: `var x = objectTypeBuilder.Build();` I avoid using `var` when I need intellisense to tell me what the type is: * `ObjectType x = y.GetData();` * `IEnumerable&lt;ObjectType&gt; x = y.Select(e =&gt; e.GetData());` * I may use `var` on this line of further lines gave the type: ```csharp var x = y.Select(e =&gt; e.GetData()); foreach(ObjectType objectType in x.Where(e =&gt; e.IsSomeProperty)) { ``` I prefer these stricter rules because I don't always read code in an IDE. It is not uncommon to read code on GitHub or other online source that doesn't have intellisense, or even F12 goto function definition.
What UI framework are you using? &amp;#x200B; In WPF, I would use a ContentControl to only display one of the lower panels at a time. I would also make each possible panel its own UserControl, so I could see each layout at design time without fiddling with the design time data that controlled which I see on the main panel.
Your opinion that my opinion is nonsense is just your opinion.
TuringTrader - an open-source backtesting engine/ market simulator. After 10 months of development, I just released my first beta, see [https://www.turingtrader.org/2019/07/update-turingtrader-goes-beta/](https://www.turingtrader.org/2019/07/update-turingtrader-goes-beta/)
Very nice! I did notice one minor issue. When clicking on the 'i' to show info about a node, if you don't click in the window to clear the text box of info, then clicking on another node for info will only change the title, not the text underneath.
None is just a fancy word for null. So saying that you want a Option type that cannot be null is meaningless. All reference variables are already limited to a "has value" or "no value" state. &gt; •Cannot be used safely without specifying what to do for both states. Ah, that's the rub. You aren't asking for an option type, you are asking for better compiler support for option types. This is an important distinction. Just because a language has an native Option type doesn't necessarily mean that the compiler understands it. For example, nothing prevents me from directly calling `Option&lt;T&gt;.Value` in F# instead of using pattern match. Which is the whole point of the "nullable reference types" feature in C# 8, adding compiler support for the pre-existing option type.
Here you go: System.Object maybe; What you really want, compiler support for the "Maybe monad", can't be added without changing the compiler. Which is exactly what they are doing in C# 8.
The first version runs once at object creation, the second is evaluated every time you access the getter. By the way, these are properties, not variables. A property is actually a get and/or set method that allow access to a member variable (or backing field). In your examples the backing field is automatically created by the compiler, but it is possible to write one yourself explicitly.
PWSH is fantastic. The best shell 4ever
This caused me some serious headaches the fist time I integrated a PS script with a return value in Microsoft Identity Manager. Outside of that PowerShell is nice and powerful, but it certainly lacks the finess of a proper language like c#.
First one is static (stable) over object life time. Second one reads the value every time you call the getter. So value could be changed.
I loved reading this big ass programming books back in the day. Specially as a new programmer, reading programming books is a great way to hide from doing any actual programming (insecurity, anxiety, hahaha) &amp;#x200B; One of the things that reading all those books did for me was confuse me. Learning about keywords in abstract examples, particularly ones like \*\*sealed\*\* or \*\*const\*\*, always left me thinking - "ok, I get what it does, but WHAT is the point?" &amp;#x200B; When you are just getting into programming there are a lot of aspects about languages and syntax that seem to make things needlessly complicated. &amp;#x200B; Once you dont have to think (so much) about the syntax of the code you are writing, but instead can focus on its intention and behavior and its readability, that is when things liked \*\*sealed\*\* and \*\*const\*\* start to show their value. &amp;#x200B; Keywords like this are valuable in helping the reader of your code know its intended use. When you are just worried about things working their value doesn't seem great, but when you get to the point that maintenance and refactoring are important, this sort of keyword is invaluable for communicating the intent of the code succinctly. &amp;#x200B; Analogously, think of \*\*private\*\*, \*\*protected\*\*, \*\*public\*\*. All of the data in a program could be \*\*public\*\*, and that might make it easier to get things working. But anyone with a little bit of experience knows that in the end you are going to be dealing with some spaghetti code and entering a maintenance nightmare. &amp;#x200B; The above is true if you are working independently (because there is always future-you), but even more so working with other programmers. I enjoyed the article, thank you.
So...to some up what I’m gathering from your arguments: Linux is the new/defacto Unix (even though it literally doesn’t have a Unix kernel nor a Unix shell since gnu can’t count by your hard and fast criteria of sco/caldera Unix is the one true Unix); BSD is extremely Unix-like but doesn’t count because it utilizes libraries from other Unix/posix/system v-compliant distros/oss projects and also because it doesn’t hold the license to the Unix name; OSX is based on Darwin/BSD which are Unix-like-at-best because they don’t carry the official Unix license (despite the rest of the open source community happily lumping those with the Unix family) but it also doesn’t count because it’s so closed and corporate; And only ATT/SCO/Caldera Unix is Unix (except, for some reason, Linux) &gt;The only people who care about the distinction between Unix and Linux are a bunch of sweaty neckbeards For someone who’s mighty comfortable casting shade about pedantry around the gnu+Linux thing, you’re awfully married to some very narrow definitions
I agree to an extent. While I appreciate the effort of language-ext, I think it would make more sense to just use F#. I'm at a place that uses language-ext pervasively and not to full functional effect, which makes the code more difficult to reason, the exact opposite intent of functional programming. The time I've spent learning language-ext and the way it's being applied could have been spent being productive in plain OO, or learning F# more deeply. It's not like F# and C# can't interoperate. Use F# for business logic and C# for everything else, ie API, persistence, 3rd party integration, etc. Oh, well. After 20+ years of doing this crap, I'm not really surprised by hair brained design and implementation decisions, just disheartened.
I'll take overly verbose Powershell commands over ridiculously complicated commands you need to browse the man pages for to understand in bash.
[Does this help?](https://docs.automapper.org/en/stable/Custom-type-converters.html) It seems to imply that Convert returns an IDestination.
F#? Sure, F# has a lot of interesting features. But it's null-handling is a right mess. Every time I look at it, it seems that they've added yet another way to express nullability. * CLR reference types * Option&lt;T&gt; * ValueOption&lt;T&gt; * Nullable&lt;T&gt; * AllowNullLiteral attribute * CLIMutable attribute (allows ORMs to set values to null) * obj (always considered to be nullable) My notes on the topic: https://www.infoq.com/news/2019/04/FSharp-Nulls/
....huh? Commands should me short so you can type then fast. Reading a man page takes like a minute and you find the tag you need and you know it. Why do /Get-the-dog hitimetripleblah vs -g hitimetriple
Keep telling yourself that mister 30+ years of experience.
My arguments are simply that calling OSX a cousin of Linux is not far fetched or a misrepresentation of the facts. I think its a pretty fair assessment. The detail to which I went to point that out is in response to people misrepresenting the actual facts about the operating systems. Unix is not a concept. It is and was a product, named Unix, that is a registered trademark and copyright of SCO/Caldera, who own it entirely. In fact, they tried to sue the shit out of people using that fact (and failed miserably, and are subsequently bankrupt and not doing business in software as far as I know). For the record, I'm not married to any of those definitions, I'm not a Linux evangelist (or FOSS or gnu or Windows for that matter). But I read, and I pay attention to what I read. I was very interested watching the SCO group death spiral into oblivion back in the 90's Anyway, Yes I am aware that FreeBSD et al. are the last vestiges of real Unix as far as everyone is concerned, fair enough. But all that said, Linux is what average people think of when they hear unix or *nix or whatever. Linux has won the UNIX clone wars. If we want to pretend that Apple is the standard bearer for Unix now, then that's fine, but nobody other than people with some kind of personal investment in that being true even care. Apple is apple. They do apple shit, they write apple software, they sell iPhones, they do not appear to care at all that their products are Unix derivatives, its not a selling point. Those are my points, and unless presented with new information (accurate information, mind you), then I'll stand behind everything I stated. This is a strange conversation to be having the the CSharp subreddit, lol.
&gt;Are you running your BSD instance with no GPL software? No Gnome, no KDE? No XFCE? No LibreOffice? &gt;GPL software Everything you just listed is reliant on gnu userland software, which can run on top of the BSD kernel. Linux is seriously just the kernel. If you want to argue something like “Linux distros in general have more users than Unix variants and their distros and has thus replaced Unix” then why stop there?! Let’s do one better: Debian-based distros have way more users than any other, so Debian is the One True Linux/Modern Unix, other distros lost, pack up and go home. You heard it here first, folks: if it’s not Debian, it’s not Linux. And if it’s not Linux, it’s not Unix because there’s no distinction. Sorry macOS, sorry iOS, sorry android, sorry BSD, sorry every other oss distro ever. Your day in the sun is over. Debian and its derivatives are the only real Unix/Linux in practice. If you think that’s an absurd argument, then take a hard look in the mirror because it’s the logical conclusion of your statements.
You can also implement a message queue mechanism (RabbitMQ etc.) between the tasks to exchange information between them. You can also trace your messages, create a logger (info, warn and error) for it even. There are several RabbitMQ wrappers for .NET and they have their own management panels (web management) to monitor all activities and persist your messages and logs.
Google the blazing pizza app. IIRC, It's a demo made by the lead dev for blazor.
It really wasn't. It's just a bunch of JS apologists coming out of the woodwork because they ended up working with it for too long.
Thanks, your library has cool stuff I might steal :). I didn't know about BinaryPrimitives.
Well, I guess I'd want all of them, not just the first.
I think classes that are designed for inheritance that aren't abstract and don't have 'Base' in the name are rare enough that no one sees this as an issue.
Its fun making up words for other people, isn't it? Your 'logical conclusion' is just a straw man argument for your own rhetoric, but nice try anyway. If, by your own argument, Linux is just the kernel (and I agree, that is correct), then BSD has even less claim to being Unix than we started with, since not one of the BSD's is using the *actual* unix kernel, either. The GNU ("Gnu is not Unix", lets recall) are not the operating system either, so I don't even see your point there. My point, on the other hand, was that ALL of these systems work alike and have the same lineage. Of those that remain, Linux is by far the most popular and well supported outside of OSX. SO... if we want to call OSX the new Unix, then feel free, but you won't get any fake internet points from me, since I don't think Apple really gives a shit about Unix or Linux or anything else not money related. But that part is my opinion, so YMMV.
They both define read-only properties. To make this distinction clearer though I'm going to change Constants.URL to a method call. So this: public string Url { get; } = GetMyUrl(); is equavlent to this: public string Url { get; } public Constructor() { Url = GetMyUrl(); } So, the property is initialized at construction and GetMyUrl() is only ever called once. On the other hand, this: public string Url =&gt; GetMyUrl(); is equivalent to this: public string Url { get { return GetMyUrl(); } } Here, GetMyUrl() is called every time the Url property is accessed.
Then you would most likely want to foreach on the startNode, get elements before self and then do whatever you want with it
The two code snippets you have shown are not really direct alternatives for each other. Direct alternatives would be: public string Url =&gt; Constants.URL; Vs: public string Url { get { return Constants.URL; } } So what do they each do? The two that I've shown above are identical. The first one uses "expression bodied members" (they look like lambdas, as you say, but they're not the same - a lambda is something you use *inside* a method body, an expression bodied member *is* the method body but just expressed in a different way). The bit after the `=&gt;` is the body of the getter, but without the word `return` which is not required. Whereas the second way has the getter written out in full. Every time you use the property, it checks the value of `Constants.URL` and returns it. The other version that you write is different - it's an *auto-implemented property*. In other words, C# has created a field (although you can't see it), and written a getter for you. The property is initialised to whatever the value of `Constants.URL` is, and this is stored in the hidden field. Then, when you access the property, it returns the value from the hidden field. Other than in the constructor, there is no way of changing this value once an object has been created, because you haven't got a setter. Unlike the other two versions, the value is not recalculated each time.
I can't see imgur at work, can you post another image using reddit or something else ?
+1 for ASP.NET Core on Linux. If you want an IDE to go with it look at JetBrains Rider or Visual Studio Code.
*ASP.NET Core 2.2 (or 3.0 if want to play with preview).
If you're looking for something for Bash try Batsh, the language I was competing against the whole time. It's a less complex language than mine but still very usable.
I absolutely wrote it out of my hate for Batch. I made up the whole story about "streamlining a building process" so I didn't have to reveal that I really just did it to be petty.
It might become very useful if you can figure out some way to generate a graph from an already typed Regex. Then you can plug that behemoth of a string you wrote three months ago into it, get a nice graph, and work it out from there. ([Good luck](https://emailregex.com/)! - speak of the devil: this website has a Regex graph builder, huh) Otherwise, Regex101 and RegexBuddy remain marginally more useful mostly because once you know Regex you're not going to think too much about what an individual "." means, or about the difference between "+", "*" and "{3,}". You just write them, receiving visual feedback from your text editor of choice. However, when it comes to having multiple capturing groups, some of which optional, you either split that regex up or... Use a tool like yours. Which is great!
If you're just getting into it I'd stick with 2,2...mainly for docs and books.
I would like to have a voice recording of this that I can listen to every night before I go to bed
This is amazing and I love it.
Cool. Seems like a good start. I’ve been using vs code for about a year now. I really like it!
My original point (maybe other thread) was that you’re way too strict in calling only the sco/caldera trademarked Unix as unix, for practical purposes anyway, when you also acknowledge that Linux software (the kernel, shell, userland, almost everything) works close enough to Unix that one has replaced the other and (I agree) that when people refer to using *nix/linux in modern conversations, they’re probably meaning Linux. Why is only the dead Unix the real Unix other than the trademarked name? Something something roses and smelling just as sweet. Can’t remember, as bill shakespeare. But I think we both know that you knew full well there were gonna be some tears and butthurt when you originally dissed the gnu/Linux crowd and also regardless of how valid your comparison was between the lineage of BSD/Darwin/macOS and Linux when you included “knockoff.” Fanboys gonna fanboy and haters gonna hate. I don’t even know why I’m keeping this up either, especially on this board, when I don’t have a dog I’m this fight because I use windows for everything since my Linux use always boils down to “install Linux, spend hours/days ricing my terminal/emacs/window manager, get hit with a bad driver update, spend days recovering, get it back up a running, fiddle with it for a couple weeks, then forget I have Linux dual booted and go back to windows” but I digress. My point about you mentioning xfce, gnome, kde, and libre was that it’s not really valid to imply that you can’t use those outside of Linux distros. You can. That’s why I’m saying it’s not really fair to throw shade at the gnu+Linux purists, because here they actually have a point for once. You could run that same software on a Frankenstein’s monster of a unix kernel + gnu utils + tweaks + praying to lovecraftian gods. Is it also fair to say that for that very same reason, Unix distros are dead(ish) and Linux has replaced them? Yeah.
At this point I'm just enjoying your religious outrage.
I know. I am not OP. I am the one saying it is impossible.
I don't disagree with anything you're saying. Yes, I was totally (and will continue) throwing shade to discredit Apple fanboy's claim to basically anything Unix-y since they are, from a corporate culture standpoint, as antithetical to OpenSource as Microsoft has always been reviled for, except on steroids and with no fucks to give about it. They don't even pretend to care. I even respect them for that, in a way. So, in modern terms, when someone refers to Unix or *nix or whatever, as you say, they are generally referring to Linux EVEN THOUGH the BSD's exist in the world. They are never talking about Apple, macOS or OSX or any other flavor thereof. And that was, really, my whole argument in a nutshell. Unix purists cant point to BSD with any actual facts on their side and say that "This is Unix", and Linux is a work alike and thus BSD is the one true OS and thus macOS, being a descendant thereof, is in no way a cousin of Linux. Yes, the practicalities are muddy and not nearly so cut and dried, and like you, I have no dog in that fight, but then again I was responding to obnoxious fanboys who wanted to flame about me calling Linux and OSX cousins. I will continue to do so, and I'll still be more right than they are, which I enjoy lol.
No outrage from me old man. Enjoy your day.
you spam this discord like every week dude
How are you drawing the lines between cards?
I find this quite funny to hear. On Linux I have a number of aliases I use because the commands can be insanely long and complex for some things. In powershell I can pretty much free-type everything I could ever want to do.
Oh I know, I love JS. But I was detailing why JS transpilers actually exist.
I see what you mean, I think, but tasks do not let you create threads. [There is no thread.](https://blog.stephencleary.com/2013/11/there-is-no-thread.html)
I see this as an issue. I wish classes in C# were sealed-by-default but that ship has sailed. It's a minor thing on the surface but it's important as a communication tool to other devs reading your code: When I see an unsealed class I start to ask questions about why it can be inherited and what potential changes I want to make could break child classes in other assemblies. If it's sealed however, that's one less hidden knock-on effect of making changes to worry about.
I recommend [Stephen Cleary's blog.](https://blog.stephencleary.com/2012/02/async-and-await.html) I definitely learned a lot from him when I started using async/await.
Hahah no worries, at least it's been useful to someone!
Here to second this. DotNet Core is where it's at.
As you like powershell, can you explain its value? It isn’t something I’ve ever really ran into or used as a Linux user and dev, as I’ve never seen the value in a Windows server. Is it just better for interacting with Windows systems, giving it a leg up over bash? I’d have to assume it is much better then, to beat out a rather large standard like bash.
Task.Run Method Queues the specified work to run on the ThreadPool and returns a task or Task&lt;TResult&gt; handle for that work. So there is a thread.
I agree with /u/dgm9704 - separate the input in to different variables if possible. If that is not possible, I would analyze the string from the end untill I found a number. Anything before the number would be saved as "address letter", then I would continue untill I would something which was not a number then I'd save all the numbers as "address number". What remains goes in "address name".
Thanks everyone for the replies! It seems I need the first line of code I wrote for my case, as I don't want the variable change throughout my program.
**A** thread. Doesn't mean it creates one. Doesn't even mean it will be multi-threaded.
Plus sealing allows devirtualization.
If its on thread pool then its multi-threaded right?
Well, if your program is running, you can be pretty sure there's at least one thread. But using tasks doesn't necesseraly create more.
The thread-pool **can** consist of a single thread.
If the problem with overlapping panels is that the WinForms designer things you're dropping the new panel inside the existing one, this can be fixed by setting the position manually. When you've selected the second/third/whatever TableLayoutPanel you can set the location and size properties in the property window. If you set those to the same values as for the existing TLP, they overlap perfectly.
Example
True! The title is just simplified version, I could come up with for Task introduction, so that people can easily grasp the idea. This article serves to be a quick guide rather than being an in-depth article.
&gt; Can you declare a variable in F# without also assigning it? I don't think so, but one thing you can do is defer declaring generic types. For example, you can write: let dict = Dictionary() ... other code ... dict.Add(3, "str") If you hover over dict, you'll see the compiler infers Dictionary&lt;int, string&gt;.
If you drag an object from the sidebar into the main area, there doesn't seem to be a way to delete it. You should put a little X button on each one so they can be deleted. Maybe only allow deletion if it isn't linked to anything else.
Oh no, it seems 6 people are subscribed to this remind, looks like I have to deliver!
Imo, one of the great things about the TPL is that you *don't* have to think about threads. I do realize that this is only a problem with your introduction and not the content of the tutorial. I skimmed the tutorial and it looks good.
Thanks a lot if you do !
[This](https://pastebin.com/PCrFhQC0) is the monstrosity of Batch for simply printing all the lines of a file! Though I will admit it's quite inflated because of include { ARRAYS, IO }; which adds the whole namespace to the compiled file.
Awesome thanks
This is amazing. One piece of constructive feedback from someone who has to work with Regex a lot. Having a horizontal output box would be much more preferable than a vertical one. Actually after using it for a bit, I got use to it pretty fast, but initially my brain wanted to think of the output as left-to-right instead of top-to-bottom if that makes sense.
I figured out if you click it and hit the delete button, that seems to work.
The default is cores, I know you can change the minimum, but it never occurred to me that I could set it to 1 to win a bet :) /bow
You could also run a single core machine. So while you may technically have multiple threads, it won't run simultaneously.
Not to mention that it depends on the used scheduler how (and if) it gets executed.
I will *NEVER* run a single core machine :) I was just looking at the docs. Apparently when usage is low, the thread pool thread count can drop below the minimum, so we could get down to one just through netflix and chill.
`Task.Run` always uses the default (thread pool) scheduler.
This looks useful, thanks!
I'm speaking to the mismatch between how language-ext wants to do things versus how one would do them natively in C#. It's jarring to see its version of pipelining in the middle of an object method, or how you deal with async Optionals. My point is, if one wants to do FP, do it in an FP language and actually use FP ideas, aside from its type concepts. Null handling in general is a mess. Option.Some(null)? FML
I think I know what you mean, but can you explain?
I did not know about "loopState.Break();". Thanks!
Not a single mention of \`await\`? What year was the article written in?
Just to point out: The first one is not static. The Url property cannot be accessed without an created object of the class.
When you have virtual methods, then you can override them in sub-classes. So at runtime when calling a virtual method it first needs to look up which method to actually call (virtual call), based on the instance type, because in sub-classes the method could be overridden. That process takes a small time. When your class is sealed it means it can't be inherited from anymore. So when the compiler sees a virtual call on a sealed class it can safely assume that there is no sub-class overriding the method, and instead of a virtual call it can do a normal call. Supporting devirtualization is work-in-progress. Some [simple devirtualization](https://github.com/dotnet/coreclr/pull/9230) is already added, and [more work](https://github.com/dotnet/coreclr/issues/9908) is done for it.
There is no 100% guarantee it won't change during the lifecycle of the whole program.
Cool cool I don’t have any experience using C# for games
Job market in your area is 75% .NET, you say? Please point me in that direction.
The thread pool enqueues gyros wraps instead
Sure, if you define your Option type such that it can have null references, or it can unwrap without handling both cases, it's just overhead on top of null. That's why my definition doesn't allow for those cases. I want compile-time safety around the things I explicitly state might not have a value. I think the `Nullable&lt;T&gt;` syntax is a little clunky compared to `Option&lt;T&gt;`'s. I don't disagree that with discipline a developer can live with nullable reference types. I just think Option&lt;T&gt; does a better job at keeping the dev honest. I'm pretty sure the LanguageExt Option&lt;T&gt; doesn't let you get at Value directly. If F# has one that does I feel like that's a slightly flawed design. I know Swift has an operator that does it, but IIRC it's a wart like `async void` that exists for some Cocoa cases that can't be handled any other way.
This article seems to predate the `async` and `await` model. Microsoft even doesn't recommend the Task.Wait class of methods, but rather awaiting on them (e.g. `await Task.WaitAny()`) to avoid blocking the current thread. See this: [C# Concepts - Asynchronous programming](https://docs.microsoft.com/en-us/dotnet/csharp/async) More info here: * [C# Programming Guide - Asynchronous programming with async and await](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/) * [C# Programming Guide - Task asynchronous programming model](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model) The Microsoft docs on these topics could really be consolidated better. I'm all dizzy after that detour.
One of the biggest misconceptions I see from people using TPL is that `Task` means multi-threading. I upvote anyone who spreads awareness.
Can you explain what the proper terminology is? Like what is the generic computer sciency word for task? Because task is just a Microsoft .net creation. When I send a delegate to be run asynchronously in a way that does not block the synchronously executed code it was run from, what do you call that?
&gt; Did you use a constructor with arguments in your Select? In that case EF cannot translate the call to SQL. Just FYI EF Core v2.1 added support for this.
`ls -r | sls "\d{5,}" | gi` Not that verbose in my opinion.
[It is an attribute](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/)
The annoying way I've encountered "sealing" is to have internal abstract methods.
They're drawn using svg paths, but finding the start and end points of the paths was actually one of the biggest issues I had. I'm not sure whether JS Interop and getBoundingClientRect() would have been better overall, but I ended up just using a rather ugly method to manually calculate the position offset of each input/output from the corner of its node.
It's in System.Threading.Channels try searching nuget for the official package.
&gt;Do you think just SQL Express with SSRS can handle this on a dedicated Win 10 VM? Thanks for the help in advanced. No. There are two components to SSRS - the rendering engine and the two database (ReportServer and ReportServerTempDb). The rendering engine and the databases do not have to live on the same host - none of ours do. SSRS is just XML stored in a table; and, depending if and how you have caching set up, the cached data is stored in the ReportServerTempDb. We have close to 5,000+ SSRS reports that get run daily; our ReportServer database is just under 1GB in size, and the activity for SSRS counts for less than 1% of the SQL activity on the database server. YMMV of course, as it also depends on how well you write and optimize your queries. Regardless, however, the SSRS instance itself - the rendering part - has to be installed on a Server-version OS. Our VM's are 4 vCores and 16GB of RAM, 250GB HD and they're smooth as butter.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/unity3d] [Is there a kind soul that can help me call this method from a trigger? (Beginner Question)](https://www.reddit.com/r/Unity3D/comments/cbnc7u/is_there_a_kind_soul_that_can_help_me_call_this/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thanks for the real world experience. There’s really no substitute for it.
I have 0 experience with binding to straight to xml in xaml but then solution with ViewModels is rather fundamental WPF (DynamicResource/Datatemplates using types not keys) so i googled that but no obvious equivalent seems to exist. I did find however a stackoverflow post suggesting to dynamically restructure the xml source with a valueconverter.... might i suggest instead serializing the xml file and using a collection with propper viewmodels? Ik it's not answering your question but it's a less obnoxious solution than generating new xml to display perfectly fine xml &gt;&lt;
Thanks, I'll look into it.
What are you trying to achieve here? I don't think I understand it...
I spent about a day once trying to get VisualStudio's default C# file template to include the "sealed" keyword and ended by giving up in failure. Turns out the instructions I was trying to follow were for the previous year's version of VS, and of course everything completely changed for some reason, so there was really no hope for me. I think the next version of C# should be able to make classes "sealed" by default, with a flag in the .csproj file. That would be a big help to everybody in doing the right thing by default.
You're missing the point. There are threads and you are running them on the thread pool, you just don't have to worry about any of the details. All you know is that Task.Run does all that work for you.
I haven't used unity in a while but I think you need to check for the collision like you would any other. The fact that it's a trigger just means it doesn't do anything to the physics.
I’m using OnTriggerEnter to check for collision, problem is I can’t get to the jump-method through UnityEvents
I don't have any experience with string parsing, but that would be a great feature if I could get it to work. You're definitely right that the node-based workflow can make simple things (like quantifiers) a lot more cumbersome than they need to be. Actually that's just made me think of a better way to design the quantifier node!
Yeah I had that problem too. Most of what I learned came from the Microsoft docs (which I think were improved recently, but still seem to be missing things) and lots of trial and error.
Depends on the current scheduler. I can perfectly create a scheduler that is just a big state machine with an iterator and suddenly all your tasks are just coroutines running on a single thread. So no Task != Thread
If someone here cannot answer, I recommend checking out r/Unity3D/
I concur with the others here. Stay on Linux and focus on dotnet core. The Kestrel web server that's default in dotnet core is really powerful and easy to work with. I've been deploying asp.net solutions to IIS for the last ten years but have now switched to deploying asp.net core projects in a docker swarm on Linux, and it works great!
I feel like "there is no thread" is a pedantic myth at best and a newbie trap at worst. The TAP is *full* of newbie traps. Every shortcut explanation hurts newbies. Here's what you should say: "Tasks hide the complexity of the thread pool from you, but you need to know the abstraction. I/O bound tasks work with OS structures that don't require a thread. These don't represent a problem. But if you are using `Task.Run()`, odds are your code will end up on a Thread Pool thread and those are a finite resource shared by everything in your AppDomain. So be polite, or you'll slow down/deadlock other things that need to use Tasks. By "polite", I mean make sure everything you start a task for completes relatively quickly, and that you don't have "a lot" of them active at the same time. If you need either or both of those to be true, you might consider using some pattern that involves your own thread management, Tasks are not for your use case."
Updated the article. Big shout out to /u/ThadeeusMaximus /u/ben_a_adams and /u/ILMTitan for the pointers. Thank you everyone for the comments.
I think a lot of these docs being bizarre (speculation) was the shakeup that happened after Eric Lippert left the design team, and due to .net core's docs suddenly needing to be written. Other than that, thanks for the great resources, and for doing your homework
Tasks relate more to the concept of promises, not threads.
I've written two little programs in C# - probably not very good - that might be helpful somehow. They sort of fit the context of RPGs. One simulates simple combat, and one generates level stats. Interdimensional Coliseum: https://github.com/Brearios/Interdimensional-Coliseum/blob/master/source/Program.cs Level Curve Extrapolator: https://github.com/Brearios/Level-Curve-Extrapolator/blob/master/Source/Program.cs I have a ton to learn, and feedback is welcome!
im running rdl reports in localreport mode, using the nuget reportviewer webforms control, very easily. it doesnt need anything but the rdl xml file and custom code written to reconstitute the data sources via in memory datasets, and thats it. i can post some code, if interested, but its webforms specific. however, i think you should be able to adapt to mvc if thats what is being used.
I'm not an expert, but async/await Tasks feel like coroutines. Task.Run() is definitely for running stuff on another thread.
The TPL is pretty robust a quick anything hardly does that library any justice.
Async &amp; await also makes code more readable. There is an example of this in Essential C# book where it shows difference between Task vs Async &amp; Await Task Example: [https://github.com/IntelliTect/EssentialCSharp/blob/v7.0/src/Chapter19/Listing19.14.AsynchronousWebRequest.cs](https://github.com/IntelliTect/EssentialCSharp/blob/v7.0/src/Chapter19/Listing19.14.AsynchronousWebRequest.cs) Async &amp; Await: [https://github.com/IntelliTect/EssentialCSharp/blob/v7.0/src/Chapter19/Listing19.15.AsynchronousWebRequestUsingTaskAsynchronyPattern.cs](https://github.com/IntelliTect/EssentialCSharp/blob/v7.0/src/Chapter19/Listing19.15.AsynchronousWebRequestUsingTaskAsynchronyPattern.cs)
Some of the official documentation is really haphazard and disjointed.
Not familiar with setting up routing through the WebApiConfig directly but I presume it doesn't know which route to choose? Or perhaps its choosing the wrong route that you'd expect.
Have you tried setting up `[Route("api/{controller}/{subject}/{id}")]` above the method? Reference: [https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2](https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2)
I assume you mean for the “DefaultSubjectApi” route to be hit, but how can the ‘id’ parameter be optional if it must be followed by an ‘action’? It looks like you need to read up on routing a bit more, like the other commenter implied I don’t think any of these routes will map to your action.
My knee-jerk was a hard "no". A ton of early frustrations in my career were classes that it would have been *really nice* to be able to extend/add methods to that were sealed. But also back then, I was designing libraries of WinForms controls. Customers *expected* to be able to derive from my controls and it was how we hid some of our advanced features from less advanced users. Now I don't write APIs, I write applications and my team's my customer. I also don't tend to use inheritance and polymorphism as much as I use DI and composition. So I guess sealed by default makes sense, but in general I'm down on inheritance for extensibility as a whole.
One day C# is going to be usurped by something else. In time, all languages are rubbish. But C, JS, C#, and Java will never truly die. They're too big!
Im not that great at coding, but id cheak for if first letter is a \&lt;
I have some methods that I need to execute asynchronously in my application, and wait for their completion. However, those methods don't have anything in particular they need to await before returning. In this case I define the method with async, but because I have no awaits within it I get a green warning in studio. Is this normal, or am I doing something wrong and failing at this pattern?
Take a look at this... https://stackoverflow.com/questions/15718741/405-method-not-allowed-web-api Sounds like you’re attempting to use older WebApi/mvc. Skip that and create a .net core 2.2 app.
it reminds me of 70-483 which I took few years ago. looks like the example from ref book, but it's quite a different story in the real world.
I like these kind of code puzzles so I did a very naive brute force approach - yes just loop through the characters in the string. There's probably a regex approach available here. https://dotnetfiddle.net/gZFBiF Note: Yes its ugly. No I haven't tested all the corner cases. I just did it for fun, use at your own risk.
That post is a very poor introduction to tasks and recommends many outdated or plain inadvisable techniques. You should almost never use the synchronous `Task` methods like `Wait`, `Result`, etc. What you do instead is use [`await`]( https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/), which allows you to "pause" an `async` method without blocking the thread it's been running on.
1. Regex the tags (this gives you the tags). 2. replace tags with &lt;&gt; 2. Split string by &lt;&gt; (giving you the non tags) Falls apart with &lt;&lt;hij&gt; though...
There isn't really a proper terminology. A Task in C# is effectively a handle to an asynchronously executed function. It allows you to check the status of that function and to specify where you're going to await the result. How that works though is implementation specific. Even async await in JavaScript which was modelled after the dotnet version isn't the same. It doesn't return a task, it returns something else. Promises return a third thing, C++ returns a future, which is similar to a task, but different. A Task is a dotnet concept, and it doesn't map to anything. Creating a task executes a specified function asynchronously. That may be on a new thread, it may not.
They definitely have a similar role.
You can define multiple Entity Framework contexts that use the same database but different schema names (so the tables get called [some schema].[dbo].[some table] in SQL Server)
In terms of the business context "knowing who the user is", assuming that you don't mean that you're creating a separate database login for every application user, you can design your model in a way that allows you to specify user IDs or roles that have permission to access a particular entity and then just include the appropriate clauses in your entity set queries.
Do you have a source? I only found that it supports parameters in entity types. I'm talking about the queries that are written in LINQ.
Is there any practical upshot to it not necessarily being on a new thread? Generally I assume that the task scheduler and thread pool work fairly efficiently and it would not be useful to explicitly create new threads, is that true?
Regex solution: public sealed class TagParser { private static readonly Regex ComponentsRegex = new Regex(@"(?=.)(.+?)??(?:&lt;(.+?)&gt;|$)"); public (IReadOnlyList&lt;string&gt; NonTags, IReadOnlyList&lt;string&gt; Tags) Parse(string input) { if (input is null) throw new ArgumentNullException(nameof(input)); var nonTags = new List&lt;string&gt;(); var tags = new List&lt;string&gt;(); var matches = ComponentsRegex.Matches(input); foreach (Match match in matches) { var groups = match.Groups; var nonTagGroup = groups[1]; if (nonTagGroup.Success) { var nonTag = nonTagGroup.Value; nonTags.Add(nonTag); } var tagGroup = groups[2]; if (tagGroup.Success) { var tag = tagGroup.Value; tags.Add(tag); } } return (nonTags, tags); } } .NET Fiddle: https://dotnetfiddle.net/LxSCUy
But would this also return the list with the good items that should be processed?
I don't think subclasses are the right way to go here, because subclasses are by design "open" (as in you can always add more). The library https://github.com/nlkl/Optional does a good job at it. Unfortunately with the software I'm working on that pays the bills we can only use .NET 2 so I haven't been able to use that library, but I've based my custom implementation on it and it works quite well.
pwsh is definitely not just for systems work, I use it all the time for dev stuff. Here's some of the reasons. It has real types and passes around objects, where bash and other shells essentially pass text that's parsed and mangled throughout a pipeline. It's got actual arrays, hash tables, functions with typed parameters, built-in handling of arguments, etc. It also allows you to be terse by having preconfigured aliases for most commands, while also maintaining readability in larger scripts if you use the full names. You can do the same automatically with options and switches - you only have to type enough to make it unambiguous, i.e. `-f` can be inferred as `-force` if you like to keep it short. I use pwsh on both Windows &amp; Linux because it's much clearer to me than the usual shells, which can quickly turn cryptic.
[removed]
You can't get a non-readonly ref to a string's char buffer without something unsafe, so that particular scenario isn't a problem. But in general, yes, the CreateSpan functions are unsafe with any length longer than one, they really should be better identified as unsafe.
If this is HTML, I will link the [obligatory post](https://stackoverflow.com/a/1732454/1446543) regarding parsing HTML with regular expressions.
I always inherit from identitydbcontext. Where is your problem with it? Maybe show some code.
 string test = "Test"; Span&lt;char&gt; mutableString = MemoryMarshal.CreateSpan(ref MemoryMarshal.GetReference(test.AsSpan()), test.Length + 128); // Uh oh mutableString[128] = 'X'; ``` No unsafe code needed.
The practicality is that a lot of async operations involve IO and they don't actually need another thread. That's why node is able to do all the things it can do even though until fairly recently it wasn't able to run a separate thread at all. If you want to go off and do a big chunk of work, as opposed to going off to wait somewhere then async and the thread pool is the wrong pattern and you need to work with your own threads or processes because the thread pool is shared and finite.
I second this. Rider is great. If you think there is no equal to Visual Studio IDE on Linux, really need to try it, especially if you ever used Resharper with VS.
This is god awful and awesome at the same time!
C# is my primary language that I use on the daily, and haven't boot a Window's OS for about a year. C# being tightly bound to Windows-only is a pretty much a thing of the past. Microsoft is putting most of their efforts into the cross-platform .NET Core. If anyone knows anything about Microsoft's history, this basically means that .NET Framework is well on the way to being abandoned. As soon as they develop their own cross-platform GUI toolkit, it will be curtains for .NET Framework. .NET Core has reached a mature state, and is beginning to surpass .NET Framework in many regards, including both technology and overall performance. It is definitely their new baby (the "i" in their "for" loop). As a C# developer and a Linux user, am pleased to see the direction they moving.
100% this - async/await is the streamlined way of using tasks, without losing any of task's expressiveness, and are far easier to pick up for a beginner.
As an example of when Task can be particularly useful, follow this link: https://blog.stephencleary.com/2013/11/there-is-no-thread.html Imagine reading a very big file after a button click. If you do so in the main UI thread, your app will be unresponsive for the whole duration of reading and parsing the file. The old style solution was to queue that work into a background thread. The downside is that the thread is idle while the file is being read but is not good (do that too many times and you might have an issue called resource starvation). With a task, you can read asynchronously the file, line by line while "yielding" some of the time back to the main UI loop to let it process messages and feel responsive. Additional bonus, if you do it properly, no new thread is required.
All C# code that runs on WebAssembly (e.g., Blazor) is single threaded regardless of the available cores. It will take at least 1.5 years for WebAssembly threads to be implemented by all major browsers and even more for .NET to support them.
I've also found the TaskAwaiter to be useful in some cases.
Who. Upvotes. This. Shit?
Neat, thanks for the info.
Here is a nice and new youtube video from NDC conf about tasks: https://youtu.be/J0mcYVxJEl0
Well... yeah, I get what you're saying. Some knowledge of threads is useful to figure out where to use Task.Run. `Task.Run(() =&gt; Thread.Sleep(1000););` is still a blocking operation and should only be used to unblock the UI thread. But if you've got an application which is full fledged async, your only Task.Run could be in Main(), or in a windows service's OnStart(). In that case you're using tasks everywhere even though you're not calling Task.Run, and you should not have to think about threads at all if you've designed your application correctly. I think people explaining async/await start with threads because that's what experienced developers know. If you've been working in the .Net world for 15 years and you're now starting a project using async/await, you've probably got a good grasp of threads and that's the logical place to start to learn the new ways. But for new developers who never had to start their own thread and worry about thread interruptions and all that jazz, I do not think threads is the place to start. Threads should come later down the line, and probably only to learn how to avoid deadlocks or unblock the UI thread.
&gt; Is there any practical upshot to it not necessarily being on a new thread? Yes. Context switching between threads is expensive. That’s one of the reasons the ThreadPool is a thing, and the TPL transparently uses that.
I think they made a mistake putting async/await in the same namespace as the original TPL. It leads to a weird mix in “am I supposed to use this” methods in the Task class. (Also, nine years later, could they deprecate some of the TPL at least?)
In &gt;= C# 7.0, you can assign the return to a discard var and get rid of the warning. ``` async Task DoThing() { //things } void Noodle() { _ = this.DoThing(); //moving on } ```
&gt; According to the docs the only way to force this is to turn Option&lt;T&gt; into a struct, because Value-types are non-nullable. But if I do that, I lose the ability to subclass it to the two possibilities. Yes, but why does your Option type need a classes? &gt; If i make Option&lt;T&gt; into an interface Wait what? You’re overthinking this. Option isn’t abstract. It’s a relatively simple struct.
I haven't played with Blazor (much). I'm still umming and ahhing about it. My biggest concern is having to go back to a Telerik or DevExpress style control suite. I hadn't actually considered threading in Blazor. I assume it has some sort of cooperative multitasking, sort of like the windows UI event loop? One thread, activities are pushed onto it and handled in order.
Context switching between pool threads is just as expensive. However, it’s also expensive to create threads on Windows.
[AngelSix - C# Tasks Async Await ](https://www.youtube.com/watch?v=CzgDxdwTJds)
Judging from all the questions on forums, I doubt they are “far easier to pick up for a beginner”. There are many pitfalls.
And by “compiler” you mean the JIT compiler, which is where devirtualization happens.
If the string follows the provided pattern, you can split on '-', any string that is not a regex match for a tag you add to the non-tag list, matches goes to the tag list.
Another aspect is that sealing a class that was previously not sealed is potentially a breaking change. On the other hand unsealing a sealed class is not. When designing a library (especially open-source), seal all classes by default and only unseal the one that you want to expose as extension points. Later, if someone wants to override some behavior that was previously sealed, they can open a discussion (e.g. an issue on GitHub) and provide a good use case. The good news is that, in most case a sealed class is not a blocker: you can always it into another class that mimics its behavior and redirect the method to A or B implementation.
The part about await will be inferred via js in a callback tutorial at some random time
If you use Task.Run then you have at least two threads, the main one and a ThreadPool one. Also saying calling an async method doesn't generate an extra thread is as wrong as saying it does, that depends on the specific implementation.
So, do you want to call the whole *'IfJump()'* method or just this part? Debug.Log("Jump"); anim.SetTrigger("Jump"); verticalVelocity = jumpForce; FindObjectOfType&lt;AudioManager&gt;().Play("Jump"); //upInputKey = GetNewRandomKey(upInputKey); //UpText.text = upInputKey.ToString();
Absolutely. After posting I remember I’d like to add that often you don’t even need to involve the TPL very much anymore.
Technically true but I went over this a while ago, the thread pool running a dot net core application on console on a standard win 10 laptop is gigantic. I can't remember numbers off the top of my head but it was tens or hundreds of thousands. So you don't need to be worried about thread pool starvation unless you're doing something crazy with spawning tasks or writing high performance code. A sprinkling of Task.Run here and there isn't going to be an issue.
Creating a task does not create a thread.
What resources did you use in writing the compiler? Books, sites, tutorials etc?
That would be nice but you'd have to get a huge amount of community support to get the VS team to even consider it. You could write a Roslyn analyser that can update all non-inherited classes with the keyword.
I never said calling an async method didn't generate an extra thread. Some times it does, some times it doesn't. My point is that the TPL is not a tool that lets you manage threads. It's a tool that manages threads for you so that you don't have to.
Yes only the things in that specific part
I was referring to that article which I see posted often here, "There is no thread" well maybe there is, whether this is "pure" or not seems totally subjective to me. As you say the thing is you just don't care because someone else is managing the thread.
I really hope you're not trying to parse HTML this way..
I would just split by the spacer and loop through. If it starts with a tag add to one list otherwise add to the other.
For something this simple I would probably just loop each character or split and loop each item.
Oh, if you want that... public async Task&lt;(Data, List&lt;Exception&gt;) &gt; ParseFromCsv(StreamReader reader) return (data, errors) This is called a "tuple" and is great for returning multiple values from an async function.
It might be an overkill for something this simple, but I find using the parse combinator Sprache more readable than regex. Using that, the code could look like this: var tag = from open in Parse.Char('&lt;') from text in Parse.CharExcept('&gt;').AtLeastOnce().Text() from close in Parse.Char('&gt;') select new { text, isTag = true }; var notTag = from text in Parse.CharExcept('&lt;').AtLeastOnce().Text() select new { text, isTag = false }; var parser = tag.Or(notTag).AtLeastOnce().End(); var result = parser.Parse("abc - efg - &lt;hij&gt; - klm - &lt;nop&gt;"); foreach (var item in result) Console.WriteLine(item); This prints: { text = abc - efg - , isTag = False } { text = hij, isTag = True } { text = - klm - , isTag = False } { text = nop, isTag = True }
In that case, you'll just have to write a separate method and put the the code in there, like this: public void Jump() { Debug.Log("Jump"); anim.SetTrigger("Jump"); verticalVelocity = jumpForce; FindObjectOfType&lt;AudioManager&gt;().Play("Jump"); //upInputKey = GetNewRandomKey(upInputKey); //UpText.text = upInputKey.ToString(); } Your old method would then look like this: public void IfJump() { GroundedCar(); if (isGrounded) { verticalVelocity = -0.1f; if (Input.GetKeyDown(upInputKey)) { Jump(); } else if (Input.GetKeyDown(downInputKey)) { // Slide StartSliding(); Invoke("StopSliding", 1.0f); //downInputKey = GetNewRandomKey(downInputKey); //DownText.text = downInputKey.ToString(); } } Now you can execute your jump code from other scripts by simply calling the new *Jump()* method.
&gt; [@thefulla](https://www.reddit.com/r/dotnet/comments/cbn8oa/steve_sanderson_blazor_tech_demo_with_blazor/etgqd1w/): &gt; At around 54 minute mark he demos the Flutter integration with Blazor. &gt; He begins by stating that it is not something they plan on productizing, it is purely a tech demo to show that it is possible to create your own renderer for Blazor.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/regex] [I've been making a node-based Regex editor that runs in the browser](https://www.reddit.com/r/regex/comments/cbucp1/ive_been_making_a_nodebased_regex_editor_that/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Will post a link to the Github repo in a few hours...
Right, I like that idea... but why wouldn't I create separate logins? And I'm authenticating the users for the application, not the database.
"If this is html" This is clearly html. Why do people post these kinds of obvious XY problems? "Hey guys, I'd like to create a web browser, how do I parse text?" Jesus christ...
As someone else has said, use .net core Use the template provided and it’ll create some default controllers for you I don’t map route in the startup anymore, you do them all in the classes which I think makes readability easier I generally test my routes with postman
Creating a new database login for every user who signs up for your application means that you lose more than you gain, I think. You want to be able to take advantage of connection pooling, and you don't want to have to manage two sets of separate user logins (application and database). If you have objects in your entity model that you want to restrict access to, you could put a collection property on the entity type that contains entries for the user IDs (and/or application roles) that are authorized to access that instance. public class SomeObject { [Key] public int Id { get; set; } public virtual ICollection&lt;AuthorizedUser&gt; AuthorizedUsers { get; set; } } public class AuthorizedUser { [Key] public int Id { get; set; } [Foreign key("SomeObject")] public int SomeObjectId { get; set; } public string UserId { get; set; } public virtual SomeObject SomeObject { get; set; } } Then, in your application, you could do e.g. context.SomeObjects.Where(x =&gt; x.AuthorizedUsers.Any(a =&gt; a.UserId.Equals(someUserId))); (Sorry about the code formatting - not easy to do on a phone ;)
[removed]
Misleading title. Task != Thread.
Our codebase at work, written looking before I got here, uses .Result exclusively, and I can't update _any_ of the methods to async without updating _all_ of them (an enormous task). Is there some kind of middle ground between . Result all over the place and async/await all over the place?
What's the difference between a task and a promise?
so when you say rpg what are you thinking text based?
I wonder how many threads there are running on a standard Android device with 512GB of RAM in Xamarin? I worry a lot about things like that because that's my context.
Start by updating *some* of them to async without updating *all* of them. Keep using .Result in those that you can't update yet.
Whelp, I forgot GetReference would give you a non-readonly ref. Then that's another unsafe method for the list... On the bright side, I think that means I can simplify a bit of my unsafe code.
Channels allow for a almost Go-like ease of concurreny while transfering state simple "worker" style pattern could look like public async Task Run() { var chWork = Channel.CreateBounded&lt;Func&lt;Task&gt;&gt;(2); var rdr = chWork.Reader; var writer = chWork.Writer; var consumers = new List&lt;Task&gt;(); for (int i = 0; i &lt; 6; i++) { consumers.Add(Task.Run(async () =&gt; { while (await rdr.WaitToReadAsync()) { if (!rdr.TryRead(out var work)) { continue; } await work(); await Task.Delay(1000); } })); } var producer = Task.Run(async () =&gt; { var sw = Stopwatch.StartNew(); for (int i = 0; i &lt; 15; i++) { var id = i; if (await writer.WaitToWriteAsync()) { var elapsed = sw.ElapsedMilliseconds; if (elapsed &gt; 5) { Console.WriteLine($"Channel full {elapsed}ms"); } await writer.WriteAsync(() =&gt; { return Task.CompletedTask; }); sw.Restart(); } } writer.TryComplete(); }); await producer; await Task.WhenAll(consumers); }
Pivoting the entire API to another framework isn't an option.
"Best" is an extremely vague category. If it's this simple, I would just loop through the characters and build tokens as I went. The result should be a few dozen lines of `yield`-based code with limited state being tracked. About the only thing of note would be that I would probably build the loop around using a TextReader, instead of just enumerating the characters in a string or array of characters, unless all possible inputs were expected to be small.
there's one for js https://eloquentjavascript.net/12_language.html
Find out! Write some code to tell you what the size of the threadpool is - then you'll either sleep easier or never sleep again, haha. I shouldn't be so flippant about thread management either - you do have to remember to explicitly cancel threads; if someone was continually creating tasks and not cancelling them, and the task was blocking on something, and never finishing, then you could starve out the thread pool over time. Always important to remember the thread pool itself retains a reference to the task, so they aren't disposed by the GC even if the class which spawned it is.
Well, for one, a promise will always execute on the main thread because unless you're using workers there is only one thread in JavaScript. Because of this, promises actually execute a callback internally when they complete, which tasks don't. There are similarities, like there are in all these structures, but they aren't the same.
Yes, it should hit DefaultSubjectApi. There's another API with this signature: public IHttpActionResult ConfigData(string subject, string id) { This one gets hit just fine without issue, but it's a "get", not a "post". I made the changes you suggested, and still receive a 405 Method Not Allowed response.
Thank you for this! I have been reading C# in a nutshell and I get so confused :-/ I am glad I am not the only one!
Sample parser: var indexes = str.AllIndexesOf('&lt;'); var indexes2 = str.AllIndexesOf('&lt;'); var limit = Math.Min(indexes.Count, indexes2.Count); var results = new List&lt;string&gt;(); for (int i=0; i&lt;limit; i++) { var gap = limit2[i] - limit[i]; if (gap &lt;=0) { continue; } results.Add(str.Substring(limit[i] + 1, gap); }
Two questions 1. Could you write in segments to the file. So write in 3MB chunks? 2. Does Flux affect screenshots?
I think I've solved this with ClosedXML before, but I don't remember how I did it. Does it maybe have a buffer/stream implementation you can use?
it does, you need to change color management settings but even those are buggy in windows 10
We use the https://www.nuget.org/packages/HtmlAgilityPack/ library. Use someone else's work - that's the best way. "This is an agile HTML parser that builds a read/write DOM and supports plain XPATH or XSLT (you actually don't HAVE to understand XPATH nor XSLT to use it, don't worry...). It is a .NET code library that allows you to parse "out of the web" HTML files. The parser is very tolerant with "real world" malformed HTML. The object model is very similar to what proposes System.Xml, but for HTML documents (or streams)."
Project site https://html-agility-pack.net/ "var doc = new HtmlDocument(); doc.Load(filePath); // From String var doc = new HtmlDocument(); doc.LoadHtml(html); // From Web var url = "http://html-agility-pack.net/"; var web = new HtmlWeb(); var doc = web.Load(url);" Easy peasy
&gt; [Route("api/{controller}/{subject}/{id}")] Manually locking in the route, eg: [Route("api/Service/{subject}/{id}/UpdateData")] Has the same exact outcome.
&gt; Don't worry too much about this code, it is mostly copied from a Stack Overflow answer. That explains why it's wrong. The non-atomic access to a static property (why a property when it's private?) is not thread-safe. Use this code from two threads at once and you might get an exception because they both try to use the same name.
Where are you that 75% of the jobs are in c#? I'm outside of Seattle, and other than Microsoft, naturally, companies are getting off of c#.
Answer 1: I'm correctly "POST"ing on both client and server. Answer 2: I'm correctly using System.Web.Http. Answer 3: I have attempted manually hardcoding the route with no change in results.
Isolated storage has quotas. Have you read this? https://docs.microsoft.com/en-us/dotnet/standard/io/isolated-storage
If it contains no awaits, the method executes synchronously. Consider judicious use of Task.Yield() or executing it through Task.Run(), if really has to be async.
For shits and giggles change it to a GET or remove the HTTP Method limitation and test with your original config, just to confirm it is not a route template issue and you are hitting the right action. When you have confirmed you are hitting the right action I would examine whatever you are using to test the action and confirm it is sending the right Method. When you’re sure you are hitting the right action and sending the right method, and still hitting a 405, you’ll want to see if there are any global action filters applied elsewhere in the application that are causing unexpected results.
I don't like the fact that it requires a mono runtime to interpret it into WASM which then gets JIT-ed to host machine's native CPU. It's a 2 pass 2-step process, definitely slower than pure C/C++/Rust wasm binary. This is a solution looking for trouble because some programmers are not willing to learn new things. It is a CRUTCH and it's definitely slower than javascript because of the 2 pass process.
Note you have to be careful with this approach - it's possible to cause deadlocks. Stephen Cleary has written a bunch of great articles on async - see https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html
You could consider the factory pattern and do a dB context factory
Thanks for the response. Let me try and explain better my predicament with some screenshots here: [https://imgur.com/a/R35U5Ci](https://imgur.com/a/R35U5Ci) I'm probably complicating this somehow, but if I don't specify async on line 70, and await and specify async on line 106, then exceptions that are thrown within GetDeviceInfo will crash the app and not be caught in this RelayCommand. Is it safe to ignore the warning in this case, or is there a better way to accomplish this?
You can write bad functional code just like you can write bad OOP code. Articles like this are completely ridiculous. Different paradigms have their uses.
&gt; If I jsut have one DbContext instance inside my UserRepository, I will not profit from the DI creating instances (and therefore connections?) You can let the DI create the contxt and inject it to the repository when DI creates the repository.
You can write good and bad code in literally every style, design pattern, paradigm, and language. Articles like this are nonsense meant to rile up those who haven't been coding long enough to know any better.
YES!
Indeed, by just swapping it to a "GET" it works. I've tested it by copying the exact address used by the client. So if the only other possibility are "global action filters" what would those look like, and where would they be located? I'm not familiar with the phrase.
Yeah I thought about that, but it seemed... unelegant? Maybe I am overthinking this
What are you using to test your action? You can apply global action filters in application startup. You would do this if you wanted to apply [Authorize] to everything without needing to the Attribute everywhere, for instance.
I'm testing it by pinging it from an Angular application. Here's the entirety of my WebApiConfig: public static class WebApiConfig { public static void Register(HttpConfiguration config) { // Enable sessions for the purpose of authentication only. No further state information should be held in a session. var httpControllerRouteHandler = typeof(HttpControllerRouteHandler).GetField("_instance", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic); if (httpControllerRouteHandler != null) httpControllerRouteHandler.SetValue(null, new Lazy&lt;HttpControllerRouteHandler&gt;(() =&gt; new SessionHttpControllerRouteHandler(), true)); // Web API routes config.MapHttpAttributeRoutes(); config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/html")); config.Routes.MapHttpRoute( name: "DefaultRootApi", routeTemplate: "api/{controller}", defaults: new { } ); config.Routes.MapHttpRoute( name: "DefaultActionApi", routeTemplate: "api/{controller}/{action}", defaults: new { } ); config.Routes.MapHttpRoute( name: "DefaultApi", routeTemplate: "api/{controller}/{id}/{action}", defaults: new { } ); config.Routes.MapHttpRoute( name: "DefaultSubjectApi", routeTemplate: "api/{controller}/{id}/{subject}/{action}", defaults: new { } ); } public class SessionControllerHandler : HttpControllerHandler, IRequiresSessionState { public SessionControllerHandler(RouteData routeData) : base(routeData) { } } public class SessionHttpControllerRouteHandler : HttpControllerRouteHandler { protected override IHttpHandler GetHttpHandler(RequestContext requestContext) { return new SessionControllerHandler(requestContext.RouteData); } } } And the code in Angular that hits the service: postConfigurationData(serviceName: string, configurationName: string, data: any, callback: (json: any) =&gt; void): any { this.postSubscription(serviceName + '/' + configurationName + '/UpdateData', data, callback); } postSubscription(url: string, value: any, callback: (json: any) =&gt; void): any { const subTemp = this.http.put(environment.apiAddress + this.apiLocation + url, value).subscribe( res =&gt; { subTemp.unsubscribe(); callback(res); }, err =&gt; { subTemp.unsubscribe(); callback({ Error: 'The server returned an invalid response' }); } );
You are. I've seen completely overengineered and overcomplicated codebases to the brink of impossible maintainability just to abstract EF away.
HTTP PUT is a different method than HTTP POST. Generally PUT is used when you are updating/replacing existing data while POST is used for new data. I suspect you are getting 405 because you are sending a PUT rather than POST.
Oh, ignore that. I literally had just swapped that out to see if PUTs got the same errors as POSTs (they do). GETs still work.
&gt; then you'll either sleep easier or never sleep again, haha. {insert joke about never using `Sleep()` here} Also you're hitting on something that bugs me overall lately. There are a lot of ways to leave infinite-lifetime resources in C# that invisibly accumulate until something breaks. There are not an awful lot of accessible tools for detecting this. It's even worse in Xamarin, because you've got two different memory spaces that don't know what the other is doing. That's why Tasks still make me a little uncomfortable. They're so abstracted from what's going on, when I manage to do something wrong it takes whole blog posts to describe why "using the API in the most obvious way" is not the best practice.
I think auto-properties are actually initialized *before* the constructor code executes, similar field initializers. A subtle difference, but it means you need to make sure your GetMyUrl method doesn’t depend on other code in the constructor running first.
 public class UserRepository { public UserRepository(MyDbContext context) {...} } public class MyController : Controller { public MyController(UserRepository userRepository) {...} } public void Configure(...) { services.Add&lt;UserRepository&gt;(); // or alternatively, if you created an interface // services.Add&lt;IUserRepository, UserRepository&gt;(); } IMO you should only create this abstraction if you are to encapsulate all business code / unit of work related to the User domain within the UserRepository class.
One big problem is that OOP is incorrectly pushed as somehow being the only way, and everyhing is built around it, education, books, courses, design patterns, consultancies, everything, That leads eg. people in management positions who do not code just focusing on ”does this person know these buzzwords” and ”is this done with OOP” etc. OOP needs a bigger investment up front when starting a project in order to be done ”correctly” (which is actually wrong as we can read in this article and several others) And it also needs more effort to change and maintain so as not to disturb the ”rules” of OOP. Fortunately one can write in a non-OOP way in C# also. For example C# lends itself nicely to the functional programming paradigm. It requires less ceremony and boilerplate and is just as much .NET. The bad thing about dropping ”OOP” is that it would leave a huge number of people without a job, while the applications and systems would still get designed, coded, tested, deployed, documented, and maintained with less resources just as well or better.
Yes, they are but that's irrelevant to the discussion at hand. My example is meant to illustrate the differences in the statements OP presented, not the order in which initializers are executed during construction.
Yeah, that was kind of the idea, as I have done this before in projects without EF - I don't like to have the "logic" in the controllers. Now I would like to try out EF Core and it feels like this pattern doesn't quite fit with EF... In the example code you provided, the `UserRepository` only has one instance of `MyDbContext`, isn't this problematic if there are a lot of requests coming in? Wouldn't the asynchronous controller methods need to wait on each other if they each use the same `UserRepository` instance?
I would say that if one follows the basic paradigms and rules, bad functional code is harder to write than bad OOP code. That is sort of built into it. eg. Not having side effects prevents a whole class (pun not intended) of problems.
I'll give you an upvote for thinking first and asking for advice. I wish others had done that before leaving me their "legacy". For some reason Repository pattern discussions are similar to "tabs vs spaces" in the holy war league table.
"Hey, we need a way to abstract UOW out so we can have the repo support transactions"... The horrors I've seen :/
/u/mercilessming2k1 You might want to read the sub-reddit rules.
No
It is easier to write good functional code in say C# than it is to write good OOP, I think. Just having less code is a good start. I grant that immutability isn’t as good as it should be, but that is a small hurdle. Recent developments with removing nulls have made it (FP in C#) even easier.
I wasn't aware that it was a hot topic... I have just seen it and thought it made sense :D
You shouldnt block within the constructor. Just use it to initialise things. Maybe consider creating a "GetInput" function within the Input class
I'm one of the maintainers of the Open XML SDK (https://github.com/officedev/open-xml-sdk) that is used by ClosedXML under the covers. This has been fixed in .NET Core, but not .NET Framework due to various compat issues. It's been a while since I looked at this in the context of Open XML SDK, but I believe it had to do with security issues in the app domain that is running the code. What's the context you're running the code in?
I use Lightshot and it doesn't affect screenshots. Maybe it does for the Snipping Tool.
Add a service layer. Look into ONION architecture.
Thanks!
Depends on how you register UserRepository as a service. Read the documentation on [DI and Lifetimes](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2#service-lifetimes)
Will do, thanks
1: I could I guess. Pretty new to programming so I haven't heard about using buffer/streaming but I think that might be my only way. Just not sure how to implement it. &amp;#x200B; 2: Yes, with the snipping tool it turns it orange for some reason.
It's a deep dark hole. EF is literally an implementation of repository and unit of work, so you see people trying to abstract that abstraction :/ Have a domain level interface. If you need to compose an object graph to commit, compose it outside of the repository. Need a report header and n rows of report detail, build it with no reference to a repository, then have a domain level method which "SavesReport". Don't try and start a new UOW in the repo, add bits to it and then have to figure out how to rollback or commit the lot from random places in your code base. Massive oversimplification, but it might give you some direction, and someone else will be along to fix it I'm sure ;)
&gt; I don't like to have the "logic" in the controllers You shouldn't have logic in your controllers. Controllers are just the glue between the web and your business logic. It should just delegate calls to other types, which preferably are in another project that does NOT reference ASP.NET Core. But this is completely unrelated to abstracting away EF.
I can implement one I know that. But im not sure exactly how to use it.
Or you know, actually learn what regex are and develop new ones in 30sin a text editor.........
Not sure if this is what your asking but, I am creating an application/add-in to a Modeling program (Revit). I need to take values from Revit and put them into an excel workbook that we store data in and use to build our receptacles, etc in our prefab shop. I am using a .NET Framework so that could definitely be my issue.
Looked over it but didnt see anything that popped out that would be my problem.
I've staked almost my entire career on OOP and the idea that I can do it pretty well. That said, I'm not sure I disagree with too much of what is said in this article. OOP happened as a way to improve organization of procedural code (which, I would say, it does) but they didn't take the opportunity to really explore what it meant to have "objects". Instead what you tend to have is procedural code, just organized into objects. Static globals in C were frowned upon because of the headaches, but then we have mutable fields in C# objects, which are effectively the same thing (mutable state stored outside functions/methods) but now they look "encapsulated" so people use them willy-nilly and get into a lot of the same troubles. It's not hard to imagine an OO language where data fields are immutable by default, or where classes aren't inheritable by default. In fact, it's really not too hard to imagine an OO language without concrete inheritance at all. Instead of getting these things baked in to the compiler, we're expecting people to simply do these things by convention, even though doing things "the right way" is harder than not. Compiler makes inheritance very easy, but then we tell people not to use it! Compiler makes mutable state easier to implement than immutable state, and so we all use it! You can hardly blame people for doing what seems the most natural, and the existing OO languages make the wrong things easy and the right things hard. I think maybe there's a space out there for a new language that takes these ideas to heart, and tries to be pure-OO and not just a thing organizational layer around C code, but we don't have that language yet.
Maybe you could make an UI for ifs statements too, I have a hard time understanding || and &amp; &amp;.
&gt; But this is completely unrelated to abstracting away EF. Okay... In my mind right now it is related, because I have EF to access the database, then the business logic above it, and then the API above it again... Am I thinking of this wrong?
"Abstracting" means you would have an additional indirection between the EF types and your business logic. Sometimes rarely it makes sense, but usually it just needlessly overcomplicates things. Using a `DbContext` directly in your business types is fine.
Okay, thanks
The `=` operator is used to **assign** a value. You're looking for the `==` opreator, which is used to **compare** two values.
sorry
Yeah, and this tends to be seen in extensions that are loaded by other programs. In order for IsolatedStorage to work correctly, it has to be run in a domain that has been supplied the right evidence so it can determine where to store the data. One way around it is to create your own AppDomain to run it in that has the correct evidence (here's an example: http://rekiwi.blogspot.com/2008/12/unable-to-determine-identity-of-domain.html). Let me know if that works - this is a common enough issue I'd like to add some work arounds to OpenXML for future us :)
Sure, but you can't (and shouldn't) write everything in functional. So... Like I said, each paradigm has its uses.
"This will make it easier to swap out the storage engine." Followed by not ever doing that in any project.
Thank you for you help! Hopefully that link will help and allow me to fix this!
OOP makes it easier to reason about what a block of bytes represent. I still don't understand why it's derided. Is Java's FactoryFactory pattern something to make fun of? Absolutely. Is labeling blocks of allocated memory with a human-friendly name to make it easier to write code something we should not being doing? Absolutely not.
Thank you for your response! I appreciate direct answers that are positive. where am I needing to use the `==` instead of the `=` ? I am learning by doing so, I may need some more guidance to understand which operator I need to chance from assign to compare in instances like this.
What specifically would you say can't be written in a functional way? I guess such things could be found but I can't think of anything myself. And what or who dictates that something should not be written in a functional way? Sounds a bit weird to me that such rules would exist.
You need to use `==` when you want to compare two values, and you need to use `=` when you want to assign a value. You have several times code like this: &gt; if (NSN_Index_checkbox.Checked = true) You are assigning `true` to the `Checked` property, when you likely want to check if `Checked` equals `true`.
I would create service classes and have the context injected in there. The problem everyone has with repoing ef is that it is already abstracted you just have to change the database provider. Repos usually just literally wrap the dbcontext method calls making it pointless. If you are using multiple data access methods a repo may be useful. It is generally consider bad to have direct access to that data in a controller. Or to have business logic in there. So you often put your logic in a service and constructor inject the dbcontext / repo. I would recommend doing some reading on di and application architecture. Once you understand them well they're incredibly powerful and make maintenance much easier.
Adding to what Cr1ttermon said, use interfaces for your `Input` class. Like `IInput` and then put `FirstNumber` and `SecondNumber` in it and also a method `GetInput()`. You can then create concrete classes like `ConsoleInput`, `FormsInput`, etc. and pass that into your `Arithmetic()` method. That way, you are adhering to Open/Closed principle should you ever decide to use your calculator in a WinForms or WPF application.
What does the URL that your request is using end up looking like?
I’ve never used EF, as I fundamentally disagree with what it does, but the cleanest way I’ve found is to use a controller -&gt; service -&gt; repository pattern. It keeps control, business logic, and data access all separate and clean.
Can you show the script that is trying to action this request?
"But we could. If we wanted to. And given a large enough reason."
There is another approach. Basically all your Controller methods receive Requests and returns Responses. This is the idea, implementation just for fun. ``` class Request : IRequest {} controller MyController : Controller { public Response Post(Request request) { var requestHandler = new RequestHandler(); return requestHandler.handle(request); } } class RequestHandler : IHandler { private DbContext db; public RequestHandler(DbContext db) { db = db; } public Response Handle(Request request) { return db.Where(x =&gt; x.ID == request.ID); } } ``` And now you can check Jimmy Bogard talks, for example this one https://www.youtube.com/watch?v=SUiWfhAhgQw And check MediatR library which implements this approach https://github.com/jbogard/MediatR (and docs https://github.com/jbogard/MediatR/wiki)
Do you use File.Open or File.OpenWrite?
I used File.OpenWrite.
I edited the post, it's in the main body.
&gt; I only found that it supports parameters in entity types. I'm talking about the queries that are written in LINQ. That doesn't make a lot of sense (I'm not even sure what you're saying) as the type of object being selected (an anonymous object, a mapped Entity object, or any other object) is entirely orthogonal from the query syntax used (LINQ query syntax or extension methods). Also, LINQ query syntax is translated to extension method syntax, so ultimately they will support the same abilities. And lastly, I personally use constructor arguments to select objects that are not mapped Entity objects.
Less code in C# when writing functional? Yeah, Mark Seemann's posts show something different. Removing nulls? It has nothing to do with functional style, not to mention, that you still have nulls (even with non-nullable references). It gets even harder when one wants to use advanced functional things, like higher kinded types. CLR is too weak (or too strong, depending on the point of view) to support that and even F# doesn't try to fix that.
I’m interested in both text-based and 2D. 3D seems way over my head.
You don't need File.OpenWrite just File.WriteLines. The latter handles opening, writing, and closing. The former only opens (and you're never closing). File.OpenWrite implements IDisposable so should be in a using statement or you should handle the clean up yourself.
Right, I was thinking about Task-Thread relation in general, not about [Task.Run](https://Task.Run) specifically.
May not help but this is what I learned: &amp;#x200B; string textString = "Whatever I want to save"; FileStream myFileStream = new Filestream(@"E:\Programs\NutrientTracker\NutritionGoals.txt", FileMode.OpenOrCreate); AddText(myFileStream, textString) myFileStream.Dispose(); private static void AddText(FileStream fs, string value) { byte[] info = new UTF8Encoding(true).GetBytes(value); fs.Write(info,0,info.Length); } &amp;#x200B; Or, easier... &amp;#x200B; &amp;#x200B; string textString = "Whatever I want to save"; StreamWriter myStream = new StreamWriter(@"E:\Programs\NutrientTracker\NutritionGoals.txt", append:true); myStream.WriteLine(textString); myStream.Close();
Have you tried setting a breakpoint and inspecting the value of SelectedText?
Yeah but one day you _might_. ^^^/s
This is massively over complicated. What's wrong with File.WriteAllLines?
Do you use discord?
I haven't read the posts mentioned, I just figure that things like maintaining state and encapsulation etc. would require code that was otherwise unnecessary. Plus my own personal experience has been that moving from more OOP to more functional tends to lead to removing code while retaining functionality. This can be down to the specific projects etc. so it is just anecdotal of course. &amp;#x200B; With removing nulls I mean one of the facets of Functional Programming: "not representing meaningless state" - that is, always initializing things to/returning valid, meaningful, and safe values, ie. not null. null of course still exists in the language, but it can be avoided and taken out of the picture with various methods, some of which are provided by the language or framework. One easy way is to use valuetypes for things that do not have or need an "identity". &amp;#x200B; Yes, some things in Functional Programming might be out of reach of C# at the moment. One can still write code in a functional way regardless, just without them. There are many ways to solve a problem, and one can choose from those that are available.
Anything to do with inheritance? Although I'm sure functional has its own way to deal with that stuff.
I would never use that pesky query syntax 😅 A bad example of what I'm trying to get at, but didn't find in the release notes is something like: return dbSet.Select(entity =&gt; new ViewModel(entity)); This is the kind of example I warned against/suggested as source of error in my initial post. And what might have support now, but I just didn't see it in the release notes. What I did find was that EF Core 2.1 onwards supports entity types with no parameterless constructors as long as the parameters has names matching the properties: public class Entity { public Entity(int id, string property) { Id = id; Property = property; } public int Id { get; } public string Property { get; } }
Inheritance already assumes that code is being written in OOP, I was thinking more about kinds of problems to solve. So I would say that Inheritance is a way to solve some problem in OOP. In FP that problem would be solved in a different way. (Or not at all, since the problem might not exist at all, or manifest itself in a different way)
I have no clue, probably nothing - I have never used that method. I am extremely new but offering a solution that I know works for me.
Thanks you!
Both gave me the same error. I'm not sure what to do at this point. I feel like something is wrong with a setting in my program itself, rather than the code. Why won't windows give access to that file?
You haven't got the file open while you're using it, right? And / or have the correct permissions on that machine to save to that directory?
I've developed a sample with an example fix in the repo here: https://github.com/OfficeDev/Open-XML-SDK/tree/master/samples/IsolatedStorageExceptionWorkaround. It's based off of the link I shared. This work around seems to work, but keep in mind it may be costly to share data across AppDomain boundaries (if it doesn't derive from MarshalByRefObject)
The file is closed. It exists within Visual Studio, as that is where I created it, but it isn't open. How can I check that I have perms? I think that may be the problem here.
Guilty. In the past I've wrapped up all EF code in a repo class , which is DI'd into a 'Service' class, and that DI'd into the controller. Actually makes some things harder &gt;.&lt;
&gt; You can write good and bad code in literally every style, design pattern, paradigm, and language. While true, the way you are saying heavily implies neutral relativism, and that's not the case. Something like SO is not relatively equal to OOP, it is clearly superior.
I used Sprache, too, in the past. It was my first thought as well.
Try saving to a text file inside the project folder directly rather than to your specific folder? If that works it must be permissions. You could check the specific permissions for that folder from the folder properties in Windows
Rust seeks to address more than a few of these issues, and does it fairly well if the hype is to be believed.
Not very familiar with UWP but it's sandboxed, you won't be able to write random stuff to disk. There will be proper ways to store settings in UWP. A quick search throws up https://docs.microsoft.com/en-us/windows/uwp/design/app-settings/store-and-retrieve-app-data
I had already made quite a few interpreted programming languages before, so I copied my latest one and adapted it into a compiler without consulting anything, so I unfortunately can't point you to any resources about compilers. But for interpreters, I consulted this excellent series when I was making my first one (I adapted it to C# of course): https://ruslanspivak.com/lsbasi-part1/
Now, if only assignment wasn’t an expression, but that’s a contentious subject. At least we don’t have “truthy”.
The difference is that Adventurer is a specialized type of Character. That means you can assign an Adventurer to a variable of type Character, but then you can only use the things common for all types of Character. If you assign to variable of type Adventurer, then you can use the things specific to Adventurer (plus the the thing common to all Characters). &amp;#x200B; Which error are you getting and from what code? It likely has to do with confusion about which constructor is being called (Adventurer or Character)
`var content = new[] {"One", "Two", "Three"};` `var path = "test.txt";` `// Do this` `File.WriteAllLines(path, content);` `// Don't do this` `File.OpenWrite(path); // &lt;-- Now the file is open` `File.WriteAllLines(path, content); // &lt;-- The file is already open so we can't open again` Here is an example of what to do, and what not to do.
You need to change: if(???_checkbox.Checked = true) ... to: if(???_checkbox.Checked == true) ... This gets the program to do the COMPARISON you want. Also, all an if(???) statement needs is a true/false value. I'd have to look it up to be absolutely sure, but I believe the .Checked property IS a bool. So it's cleaner to say: if(???_checkbox.Checked) ... Finally, you don't need to wrap each block of a switch statement in curly brackets. IMNSHO, almost anything you do to reduce source code size and unnecessary whitespace improves the readability of your code. You should always write code with the thought of readability for a person who has never seen it before. In six months or a year that person will be YOU for code YOU'VE written! Best of luck. You're doing great!
If your requesthandlers are highly dependent the request, why not extend the request itself with a method that takes the dbcontext and does its thing? No other class is going to use the request anyway.
The problem is you're calling \`File.OpenWrite(...)\` before \`File.WriteAllLines(...)\`. This means you're trying to open the file twice without closing in between.
Or even easier: `File.WriteAllText(@"E:\Programs\NutrientTracker\NutritionGoals.txt", "Whatever I want to save");`
Oh shit I just did this with my project. What kind of hurt am I in for?
Thx for the reply &amp; explanation! (i didnt expect someone to reply so early) this error, "A readonly field cannot be assigned to (except in a constructor or a variable initializer)" from protected readonly string name in Character class. name(variabel) already inside Adventurer's constructor and it make me so confused
As I understand it, it's safe to ignore the warning. You could probably make the warning go away by tossing `await Task.Yield();` on line 72 or 79--before anything that will run a long while--but it shouldn't make much difference if you're just going to hand it off to Task.Run, anyway.
Repositories are a design pattern copied from Java. In C# we can have more elegant code via extensions to Iqueryables. And use dbcontext in controllers, dont be shy. Projects dont change ORM's on the whim, focus on simplicity.
Presumably your repo &amp; your services are implemented interfaces, then the annoying thing is having to add methods (and subsequent tests) if you suddenly need to add more complexity to objects your returning (assuming you return a DTO or some kind of object back that the front end needs, built up of a compound of different models, like a single PersonEdit class that has properties about a person and info about their Departments, purely for rendering on the front end, where Person and Departments are separate entities in the DB.). It's nothing too difficult, but it means adding code in a fair few places and adding in more new tests each time you add a method, or modify input/output objects. Especially so if you add a new action on the controller to return something, you need to add a method to your service AND the repo class, as well as the unit tests. Not sure what the latest third party tooling is like though, I just use VS 2019 Pro so haven't really seen what Resharper's capable of, if it can help with this. Ultimately, it's not a huge problem. Just document your patterns so other devs are clear on what method/pattern you use when adding new Controllers/Actions.
I understand where your coming from, but elegance shouldn’t be your real goal here. What you want to strive for is doing as little work as possible to build out easily testable functionality that yields good ROI on velocity. That’s it. Anything else, and you’re adding layers and layers of abstraction and indirection that could *theoretically*, in some parallel universe where your application ends up requiring scaling in *the exact ways you wanted it to*, but in reality only slow you down. Trust me, it took me a while to learn this. I used to build simple crud apps with 5+ levels of abstraction because I was shooting for what I considered elegance, with generics and abstract repositories and mapping services all over the place. Not to say there’s not a time and a place for all that (except repositories around EF), but you first need to prove that it will simplify your code base/increase velocity. Otherwise, it’s just gonna get in the way.
Just extra layers of abstraction that don’t help and which slow you down when it comes to testing and building out new features. It’s like putting a corvette in the back of a U-Haul and wiring up the truck to steer in the same direction as the corvette in the back.
If understand correctly, the problem is that you are trying to set a readonly field of class Character in the constructor of class Adventurer. Even though one inherits the other, they have separate constructors.
Depends how you're accessing it. If you're pulling it over something like HTTP or FTP, the server might dump the whole thing into the outbound queue and then it's on the network whether you read the whole thing or not. Pull whatever you want off the HttpResponse content and then dispose it when you're done (it might not save you anything, though). If you're doing a straight UNC file access, the System.IO.File classes should let you only read the lines you want. Using StreamReader will let you read the file line by line, and you can try to inspect the incoming lines to match them against patterns you're trying to identify. This solution isn't perfect and if your matching algorithm is too stringent like a Regex, it will break if the format of the file changes at all (like adding extra newlines and whitespace, or rearranging the order of tags/attributes, etc). If you don't want to pull lines of raw text and concoct your own matching algorithm, you can try to stream XML using XmlReader. [See this link for some details](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/how-to-stream-xml-fragments-from-an-xmlreader). It's going to be a bit more involved, but your solution should be more resilient to simple formatting changes and also should be more strongly-typed for fewer logical errors.
How are you downloading the file? Is it via http requests to a web server? Is it over a networked mounted file system? some other mechanism (ftp, ssh, UDP)?
I have seen a little bit of Rust. I like some parts and I dislike others. It doesn't have a GC, for instance, which I dislike. I also don't like the stringent ownership model for references. It solves some problems but can lead to a lot of boilerplate in some of the examples I've seen. I am keeping my eye on it, that's for sure.
Thanks for the very quick and thorough response! Unfortunately, yes, it will be through simple HTTP. I was hoping there might be some way to start to access it and then cut off the "stream" at some point. Is that even a thing?
You can use a tool like cUrl to test to see if the Web Server supports serving up the content with partial content requests. here's an article I found after a quick google. https://www.cyberciti.biz/cloud-computing/http-status-code-206-commad-line-test/
Basic HTTP request to an external server.
\*Cut to sun in its dying hours, about to supernova\* Stan (Captain) : "Has that bloody SQL Server back up finished yet?" All powerful AI: "Not yet..."
It actually doesn’t If you are you doing anything that has actual business logic. With the goal of keeping controllers as slim as possible (for readability and maintainability), all of your business logic should be offloaded from the controller to the service layer.
The reason for the existence of tasks and asynchronous programming in general is to be able to wait for the completion of something without blocking a thread, so that the thread can be used for other purposes (e.g. updating the GUI in a desktop application or processing other requests in a web server). If you set up an asynchronous operation but then wait for synchronously, that just defeats the point. It's actually less efficient than using fully synchronous methods, and comes with the added risks of deadlocks in certain situations as mentioned in another comment. However, using async in some places *could* still be beneficial if you have multiple concurrent asynchronous operations at the lower level and then have a single synchronous method waiting on all of them at a higher level, for example. So instead of 5 threads waiting on 5 operations, or 1 thread waiting on 5 operations one after the other, you could have 1 thread waiting on 5 operations at once. Heavily depends on the codebase though, it's hard to generalize.
It's very simple actually. Ignore the comments that suggest a repository pattern. This isn't needed with EF. EF or more specifically the DbContext will take the place of the repository. &amp;#x200B; All you need to do is: MyController -&gt; MyService -&gt; DbContext. Your Controller just calls that services and says do all the business logic stuff. DbContext is one of the things you inject in that service. It will be used to ensure that the business logic is executed and all the actions are taken.
Yep, the mistake we made was having a class in between the DB Context and the service layer, which in retrospect wasn't that necessary. The service classes ended up not doing much and where just forwarding all calls to that intermediate class.
Yeah, I did some looking around and it seems like MS has a specific way they want you to save data with UWP. Thanks a bunch!
Deserialize the object into the type you need. JsonConvert.DeserializeObject&lt;MyClass&gt;(json.ToString());
Did you check what quota was configured, or try changing it? Seems like it's a perfect fit, since your bug is size-dependent.
Here's a StackOverflow question which does similar to what you want (though they are streaming to JsonTextReader instead of XmlReader like you probably want, just combine this with the previous link I posted): https://stackoverflow.com/questions/30163316/httpclient-getstreamasync-and-http-status-codes You "cut off" the stream by simply not reading any more and then calling .Dispose() on the stream and the response object. Keep in mind that, again, the HTTP server is probably dumping the whole file onto the network and your OS or application are going to be buffering it all waiting for you to read, so cutting off the stream early MIGHT not save you much bandwidth. Then again, it might, depending on timing. Give it a try in either case. To really get what you want, you'll need some cooperation from the HTTP server. Look at this link here, where you can fashion your HTTP request to only ask for the first few bytes from the file (if the HTTP server supports it): https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests
Thank you so much! Appreciate guys like you. I'm an Intern at an small Electric company (going into my sophomore year of college) designing this application by myself with no help as no one else here knows any sort of programming at all. Internet saves me every day.
Thanks. I have an old (version 1) copy of the dragon book for compilers, but it's pretty hard reading. Will check this out 😀
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/wpdev] [Scanner API in C# UWP App](https://www.reddit.com/r/WPDev/comments/cc0l2z/scanner_api_in_c_uwp_app/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
 NET Framework Configuration Tool doesn't work with .NET Framework over 4.0
How much control do you have over the XML file and the writing to it, if any?
&gt;The service classes ended up not doing much and where just forwarding all calls to that intermediate class. Sometimes (most of the time?) the service layer doesn't do much other than forward calls. However, when you get into a situation where you need to run a bunch of logic on repo results, etc, you would do all that logic in the service layer vs in your controller. For example, in your controller, you have are creating a new db item that has an 8 digit base36 unique id. Now, since this id has to be unique, it has to be checked in the db to be 100% sure there isn't a duplicate. So what you you would do is DI your service layer into the controller that says _servicelayer.createUniqueID(). Inside your service layer, this createUniqueID() method would call a separate private createBase36Id method to generate an 8 digit base36 unique id. Once the id is created, we then perform a do_while loop that pings the dbcontext repo to see if that id has been taken or not (if it's taken, call the private createBase36Id method again and repeat). Now, all this logic could absolutely be done in the controller with just DI'ing the dbcontext and bloating up or controller with stuff that isn't related to UI interaction. However, we don't want the bloat. We want our controllers as clean as possible because when someone comes in to maintain, they just read the servicelayer method and know what it does and goes about their day (they don't have to read thorugh a bunch fo code and go "oh okay, this is creating the id's"). Also, where this really shines if when we need to use this createId method again in *another controller*. We don't have to repeat our logic again, nor do we have to maintain two separate instances of the same methods in different controllers. This doesn't really answer any questions, but hopefully it'll help make the service layer reasoning more clear for someone who is on the fence.
u/Killerwalski thanks for the reply. When I did that and returned the type it still showed `Newtonsoft.Json.Linq.JObject` . My code (for that part) is: var encoding = ASCIIEncoding.ASCII; using (var reader = new System.IO.StreamReader(endpointResponse.GetResponseStream(), encoding)) { string responseObj = reader.ReadToEnd(); var results = Newtonsoft.Json.JsonConvert.DeserializeObject(responseObj.ToString()); Console.WriteLine(results); var whatis = results.GetType(); Console.WriteLine(whatis); } Is there something I'm doing wrong with that?
Does the server with the file support last-modified headers or etag? And is the file only updated when there are changes made? Perhaps you can check the headers to see when the file was last updated or if it was changed since the last time it was seen. Here is a snippet of code from a little utility we use in development (not passing this off as production quality). private static string GetExternalVersionFromHeaders(string url, string eventSource) { try { var req = WebRequest.Create(url); req.Method = "HEAD"; using (var resp = req.GetResponse()) { return GetExternalVersionFromHeaders(resp.Headers); } } catch (Exception ex) { // TODO: handle this } return string.Empty; } private static string GetExternalVersionFromHeaders(WebHeaderCollection responseHeaders) { var lastModified = responseHeaders.Get("last-modified"); if (!string.IsNullOrWhiteSpace(lastModified)) { return lastModified; } var eTag = responseHeaders.Get("etag"); if (!string.IsNullOrWhiteSpace(eTag)) { return eTag; } return string.Empty; }
Linux "head" command to display X lines?
This brings up great question. If I can reduced `checkbox.Checked = true)` to `checkbox.Checked)`, then can I change &amp;#x200B; `if ((RPSTL_checkbox.Checked != true) &amp;&amp; (NSN_Index_checkbox.Checked != true) &amp;&amp; (PartNumIndex_checkbox.Checked != true))` to `if ((RPSTL_checkbox) &amp;&amp; (NSN_Index_checkbox) &amp;&amp; (PartNumIndex_checkbox))` since the default of checkbox is false?
Gold to anyone posting an answer that i judge worthy
Include your type with the DeserializeObject call: var results = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;MyClass&gt;(responseObj.ToString());
You wrote DeserializeObject(responseObj.ToString()) but you need to write DeserializeObject&lt;MyClass&gt;(json.ToString()) The difference is that the first method converts to a generic JObject. If you want to deserialize your own type, you need to pass it as T (MyClass, in this instance).
I’m here to watch and learn
https://docs.microsoft.com/en-us/windows/uwp/get-started/fileio-learning-track
This is *way* too broad of a question to answer succinctly. What sort of project? What is the current structure like? What do you want to improve on? There are just too many variables. In general, I gravitate toward something like this: - Data access layer (EF, stored procs, whatever gets your raw DTOs) - Domain/business logic layer (this translates your raw DTOs into something meaningful, and applies any relevant business rules) - Presentation layer (for a website, this is usually its own reasonably standard MVC structure, but could be an API that returns JSON or something too).
seconded; one day you find out EF is total crap for your purposes and you want switch away from it and you cant because it’s all over the place. IoC exists for a reason.
Knife to my heart
https://github.com/aspnet/AspNetCore Is a very well maintained and organized project. The team behind it put a lot of effort keep things organized and easy to navigate through
Aka "Clean" architecture.
I didn't even think about that! Great idea!
Simple wrapper would do for every controller. Ef already implemented repository so no need for another.
As Uncle Bob says - the architecture should represent what your application is doing. There is no single ideal structure of the project. Every system looks different. Follow the good patterns like SOLID, use design patterns in the right places and all will be fine. Remember about the separation of concerns, inversion of control etc. Look at Roslyn: https://github.com/dotnet/roslyn Good example is also eShopOnCobtainers: https://github.com/dotnet-architecture/eShopOnContainers Also interesting is source code of .net core: https://github.com/aspnet/AspNetCore
The fuck?
Others have already alluded to this, but to _properly_ abstract EF away from your Controllers, you need to abstract away all aspects of EF - which also includes the EF models. To do this in an elegant way, think of it as abstracting away EF to the point where you could swap in Dapper or some other ORM and not change a single line of code (other than your Startup.cs). You'll have a base or core library for _domain_ models - these are not EF models, but models which your business logic (aka your domain) understands. So when someone posts a User to `CreateUser`, it'll be of type `DomainUser` (As an example). You'll then what an IRepository interface which defines your user methods, like `CreateUser(DomainUser user)`. You DI the concrete implementation of this into your Controller. That concrete implementation is where EF comes into play. It will implement that repository and handle mapping between `DomainUser` to `EFUser`. Let EF keep its database concerns within EF and allow the business logic to remain outside of EF. Because of this, you might find your DomainUser and EFUser models look almost identical - that's okay and why tools like AutoMapper exist. Project breakdown (Onion/Clean): Domain.Core.csproj -&gt; IRepository.cs -&gt; DomainUser.cs Domain.DAL.csproj -&gt; Repository.cs Domain.WebAPI.csproj -&gt; UserController.cs -&gt; Startup.cs Dependencies are top to bottom (With core having zero, DAL depending on Core and your top-level API depending on both)
Two basic routes are front end and back end. Front end is mostly web stuff. Back end is mostly C# or Java and SQL. There are far more front end jobs available, but back end jobs tend to pay more because there are fewer of us competing for them.
I'm tryna see y'all's dicks
reddit's a big place, I'm sure you could find that elsewhere without too much effort. Less effort than this soon to be mess.
nah
Is 6mb really too big of a file to read and dump? I get it if you're on dial-up for some reason but this isn't 2003. Broadband *is* capable of downloading 6mb within the same day now
Create a constructor on the base class that takes in name and sets the property. Then call : base(name) at the end of the constructor signature. Some additional notes. Fields are always private unless static const or read-only. Name should be a property. The casing convention is this: protected string Name { get { return _name; } } private readonly string _name; public BaseClass(string name) { _name = name; } There is also a shortcut for the property definition: protected string Name { get; }
I'll use a repo interface and class too. But not in the meaning of Fowler. It uses the uow and repo of ef core, but abstracts access to the storage. It also includes stuff for a blob storage. You could throw away the ef core part and implement the repo anywhere, buy the rest of the program would work. I know it is rarely needed, but it made it for another team easy to switch from ef5 to ef core.
I guess I can give it another shot, maybe its struggling to place the content of the body into that string parameter?
I would suggest https://github.com/JasonGT/NorthwindTraders. I like the structure and how the dependencies are handled. You might like it too.
fine, since nobody else wants to go first, [here's my schlong](https://i.imgur.com/LyVwBSN.jpg)
This is very normal with DI, when you start abstracting stuff you form a chain of dependencies and your application will have more layers, which is fine as long as everything has a concrete purpose.
I posted my dick where's urs
Who isn't.
A few things I would suggest: * Favor structures that change together (e.g. feature folders) and avoid slicing by technical concern * Favor folders over projects * Favor nuget packages for truly reusable code and keep them separate out of the solution * Favor keeping vertical slices through the code separate until it makes sense to reuse code, in which case you should have a Domain Model beginning to emerge, which should be a highly protected kernel bound within that particular deployable (application) As far as an example, I can give you something close to what I typically use, I've shared this in the past. The random infrastructure project can be ignored, imagine those as stubbed ways of solving some things specifically for the example as opposed to how it should actually be solved. Note, this is focused on web services or MVC applications. [Structure](https://github.com/bgk0018/vertical-slices/tree/mediator-implementation) Another option I've used way way in the past but could still be useful is this: [Lauri's Solution](http://www.taimila.com/blog/.net-solution-structure-of-an-enterprise-application/) I don't like this approach quite so much anymore as it's project heavy, but it gets at the heart of some of the separation I'm thinking about when I go to develop a new application.
I see what you're getting at, I'm starting to see how I could incorporate this structure. But my users won't have direct access to the database. All they'll see is a WinForms app which makes calls to the API, and that queries the DB. I won't have any DB logins at all.
&gt; All you need to do is: MyController -&gt; MyService -&gt; DbContext. This is a true statement until you have update child nodes attached to parent updates in one call. Yes, you could throw all that code into your service layer, but it's going to end up as a dumpster fire of a spaghetti code. That's why you would add another repo layer and DI it into your service layer.
I like that idea and I'll look into it more... but I'll need a way to pass a userId of some kind to the other context. Certain resources are "owned" by a user (but can be shared). So when a user logs into the app, their dashboard will load with all of their resources. So far, I haven't found a way to achieve this with Identity.
Yes. I follow the repository and unit of work pattern in my project with EF core and it works great.
Don't waste money on Udemy courses, they are permanently on sale so don't let that bait you into a purchase. If there is someone else on the job who already knows how to code learning on the job would be the best and fastest way to learn the relevant skills you need, else you might waste time reading/learning skills that are irrelevant. Just take work home with you and spend extra hours googling and looking for more information on the tools and techniques that are troubling you most on the job.
It is correct that a UWP app should not reference anything outside the local environment as the whole point of a UWP app is its ability to be run across various hosts, all with unknown structures outside the confines of the app. You could use the Storagefolder command that will allow creation, read &amp; write within the local environment and then map a drive to that location if running on windows10 core IOT (usually Data\\Users\\DefaultAccount\\AppData\\Local\\packages\\&lt;GUID&gt;\\LocalState), it works well for small to medium filesizes. Also heard that the knownFolders Class might work but not tried that yet - might want to give that a go? ([https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.KnownFolders](https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.KnownFolders) &amp;#x200B; Any help?
Repository pattern
Good luck with your internship! Happy to help :)
full stack devs are jack of all trades, master of none T. full stack dev
A lot of this stuff has already been done for you with the Client Side Object Model for SharePoint.
Have you used nuget to pull in nunit?
If you're new to programming, don't spread yourself thin by trying to learn multiple languages at the same time. Focus on one until you're comfortable with it and *need* to learn another language to solve some problem. If your VP of Software Eng is willing to help, he should help you find someone in your office to shadow and can better help you than he (who may be years out of touch with actual programming) or the rest us from the internet. Like others in this thread, you can quickly decide (or ask people in your office) if you want to work on the presentation side (front end) or not (the backend) and see how you feel about it.
If I can't get this to work I may end up writing a service to do this. However as things are right now, the data entry users will be stuck on the line waiting for the whole 6MB to download and get parsed before they are able to finish filling out the form, which is fairly user hostile, imo.
"This will make it easier to swap out the storage engine" they said, implementing a generic abstraction that assumes transactional behavior and referential integrity. What exactly are they going to swap out for? Relational databases are supported at the provider level. I've seen more full rewrites than I've seen swaps of the data layer.
Either will get you a job. Try both and see which one makes you happier
I'm not graduated yet, but my "IT" degree has been 3/4ths coding classes, and very very few Project Management/ networking courses. My "IT" degree has had me do classes for SQL, Java, C#, HTML, CSS, Javascript and Php. If I tell an employer I was trained in school to be a "Full Stack Developer" but my resume says "Bachlors of Applied Science in IT" am I going to get a weird look?
My favourite advice to give people - which is advice that I followed upon graduation. When you are at a company, focus on what they are the best at. The first company I worked at was really good at retail sales analytics (mostly SQL stored procedures), so my primary focus while working there was SQL Server, SSIS and all of the things around optimizing the database. &amp;#x200B; That being said, I also did spend time on the other pieces (and did more front end stuff on the side as a hobby). Following this allowed me to learn a lot from the company which I am not able to apply to my other jobs. &amp;#x200B; As much as I hate to admit it, I do enjoy the .NET Stack, especially if you are getting into .NET Core - this is super powerful :)
Don't worry about it. Your degree is your degree, your title will be your title.
I really disagree with that structure. They split items like domain and persistence into separate projects, when they really shouldn’t be. A project should stand on its own, while relating to a solution. Some shops do reuse domain elements across a solution, and while I disagree with that, there’s logic to it. But this doesn’t. Same with the persistence layer. There’s no reason to access it directly, as it should realistically always be behind an API controller.
I can get behind that! To clarify, you mean how I sell myself to my employers? Or do you mean my actual job title?
&gt; My ego says back end is harder, but that's probably a lie. I don't think that's a lie. Client-side, you're only concerned with one user, and the code is almost exclusively dealing with the UI. You've got to know HTML, CSS, and Javascript (plus possibly other JS frameworks). While it's very true that there is an art to designing a "pretty" interface and providing the user with a good experience, in my experience most of the difficulty comes from the lack of standards or different implementations thereof by the hosting environment (i.e. the browser). It's possible (lotta work but possible) for one individual to know the entire API surface of HTML, CSS, Javascript and the chosen UI framework (e.g. Angular). Conversely, server-side, you've got to be able to handle many multiples of clients. You have to deal with multithreading, session management, database access, and security, any one of which multiple books have been written about. Your code is likely running in an environment where you're being charged for memory and processing cycles (one way or the other, either rented from a cloud or purchased for onsite deployment) so it must be clean and efficient. You must know the server language (C# here), its frameworks (.NET) and the database language (usually SQL but which one?). It is literally impossible for any one individual to memorize the entire C# language feature set, one particular flavor of SQL, and the .NET Framework API surface.
Where do you work your VP of engineering sounds like a wonderful person.
not really, as long as you can prove it via a small CRUD site you have for future job interviews you can demo, or you can demonstrate that you know how to code are you in the USA? because thats how it'd work in USA. Bachelors of Comp Sci is the strongest of course.
Don’t even jump into SQL Server at the start. I wouldn’t even look at design patterns or anything like that at first. You’ll naturally find patterns as you learn (you will learn the patterns you come up with probably have issues for various reasons but don’t worry about it). Stay simple at first, come up with some small thing you would like to do (like get the weather and display it for a zip code or something) that will expose you to a wide range of stuff while staying simple. But also break it out into small pieces. If we go with the weather example you could break it down into: 1) input 2) parsing the input 3) pass send an api request 4) display the data somehow (easiest is a console app) Once you get that maybe turn it into a web site with a single page. Then maybe delve into sql and store each one in a database. Then maybe display an average temp from all your requests. Basically just start small and build on it. But the most important thing is to ask questions, everyone programming was super confused and frustrated at some point about something. And a lot of us struggle with imposter syndrome. So don’t feel bad if something doesn’t click. Feel free to ask here or ping me (I learned non traditionally as well and love helping people learn as people helped me learn). Anyways, good luck! :)
In my experience frontend web stuff is simple. In my career I focused on backend and really dove deep on that and then layered alittle angular and react frontend experience. I guess I am not an expert at frontend but you don't really have to be an expert in frontend to get it done. So am I jack of all trades? I don't know but I do think having at least some full stack experience is important regardless of if you are focusing on backend or frontend.
Thanks for that! It would have took me a lot longer to think to do that. I am in the USA. Unfortunately, I'm locked into the BASIT degree, and I live in area where IT jobs are virtually nonexistent outside of freelance consulting. I was asking about the names of the degrees just because I've started to think a remote Java dev job might be my best bet.
Have a second monitor (go out and buy one if you don't have one). Download visual studio 2019 community. Put VS on your right monitor. Open this: [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/hello-world-your-first-program](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/hello-world-your-first-program) on the left. Go nuts. Read MSDN documentation ON EVERYTHING. Experiment. Have fun. Write a LOT of toy programs. I'd put off SQL/HTML/CSS/Javascript for now. Have some fun. Learn to read and write files, write a song with Console.Beep(), write some word games, translate some data. Once your comfortable, learn beginner's WPF; it's the easiest way to get something pretty on your screen (beginner's WPF is XAML, there is a lot of good documentation). This is your hello world phase, and you should enjoy it instead of pushing through it. This is the time you should spend learning how to learn, testing limits, and exploring. Get curious, decompile stuff you like with ILSpy, and look up anything you don't understand. Make yourself challenges, and complete them. Once you have a solid handle on what most everything you see regularly means, and have started really thinking about how to structure a program, then you can start integrating databases and web interfaces. This is when you start switching from hobby mode to job mode. The skills you learn in hobby mode (if you take it seriously), will be a major help in job mode.
My company uses PHP for its e-commerce website and uses .net to create web apps and in-house applications for the warehouse environment.
I've experimented with and chucked it out. I will say it is a good example of using MediatR to compose pipelines. I felt like it was trying too hard to be hexagonal, hence the shoehorning a persistence project with little gain. As long as the request handler uses dedicated request/response objects there's nothing to be gained by putting EF in another project (so your API schema and domain aren't bound to eachother). I will also agree about sharing domain objects across the solution, there are some types that are common enough to share but for the most part the way the projects set up is a nice recipe for a big ball of mud as everything in the domain is accessible across the entire solution.
As your controllers exist in your composition root you can't avoid having at least an indirect dependency on EF there. However your business logic shouldn't be in your controllers or even in your root project at all, so a better question would be how do I abstract EF away from my business logic. You don't need the repository pattern necessarily but you at least a service interface with a GetMeTheThings method. Your business logic can depend on that without knowing that at runtime it will be implemented by your service class that uses the full power of EF. Your business logic should be pure. As answered earlier, look into onion architecture, aka ports and adapters. Projects are the boundary in .NET for enforcing dependencies. So your project dependencies should look something like this: Services.Abstractions, Entities =&gt; Nothing BusinessLogic =&gt; Services.Abstractions, Entities Services =&gt; Services.Abstractions, EntityFramework, Entities WebApi =&gt; All of the above Not that complicated after all. Its never just about abstracting the data layer because you might change it one day, anyone who tells you not to abstract for that reason is using a straw man argument. If you ever do though (and it does happen) you'll be glad your business logic doesn't depend on your data layer implementation. It's just one of many reasons though.
I have seen some common paradigms that I used * Src folder at the root contains all the source code for your project * Avoid having additional src folders in your root src folder * Avoid having too many projects in one repo * Put documentation in a root docs folder * Have a README file in the root of your project After that there is a lot of variation. I typically like to put my sln files in the src and not in the root of the folder. I like to keep root folder with minimal files just a build script and some README stuff. Always use standards for things don't try to reinvent the wheel. Use a standard Readme like [standard-readme](https://github.com/RichardLitt/standard-readme) or a version scheme based on [semver](https://semver.org/). Don't try to build a custom build process or dependency scheme. Try to use standard tools and processes as much as possible. Also have a build script that pulls in dependencies and build your project. The easier it is to rebuild a project from scratch the better off you will be. There are many ways to accomplish that goal so I leave it up to you. As far as code structure that is way too varied. It depends entirely on the type of application. All my solutions typically start with at least two things a Tests project where my unit tests sit and a Tester project which is where I have a basic console application. After that you will have a series of library projects that consist of the major chunks of your code. I recommend separating as much as possible 90%+ of your code from the execution. Don't put all your code in a console project or a gui project. Most of your code should be in library projects that are referenced by your console/gui project. This separation allows you to more easily reuse your library code on future efforts.
I would say the actual programming in front end is easier, and the difficulty comes from the design and aesthetics. Back end is more difficult in a strict programming sense. In my opinion of course.
All true, but back end software generally works. The front end seems like a haphazard pile of poorly written libraries cobbled together to create brittle frameworks that will fail when the inevitable breaking change comes. Did you know that the vast majority of widely used NPM packages are really just some newbie's daily blog posts? That's why there so many one line packages. He just posted whatever he learned that day to NPM. You have to be a borderline genius to actually write high quality software on top of that.
Note that nobody has a degree in full stack development. And conversely nobody hires for the role of bachelor of applied science. So if it is your first job, then your degee is already good enough for a role in software development. For further jobs, you will refer to yourself as both an applied science graduate and .NET/ or fullstack developer or whatever best reflects your past role(s).
Thank you for your time, this makes me feel better going into my final year.
&gt; I wouldn’t even look at design patterns or anything like that at first. You’ll naturally find patterns as you learn (you will learn the patterns you come up with probably have issues for various reasons but don’t worry about it). I would disagree. Look at patterns early on. Learn what they're called. Learn how to use them. Patterns are tools, and the more familiar you are with them, the better you are at learning which tool fits the job best. Otherwise you do stuff completely outside of a pattern, and that gets stuck in your mind, when it turns out there's actually a pattern you could have used and is better for the job.
Your revision won't have the intended effect. It has nothing to do with the default of the checkbox either. It only has to do with the current checked state. Also, the revision omitted the .Checked property. I think just using *ANY*_checkbox without the .Checked will throw a compiler error. If it doesn't, you're checking the EXISTENCE of the checkbox. (Is it NULL or is it instantiated) The first if() statement will evaluate true ONLY if all three conditions are false. Incidentally, the inner parenthesis are not required because != has a higher operator precedence than &amp;&amp;. You can express the first if() more succinctly like this: if(!RPSTL_checkbox.Checked &amp;&amp; !NSN_Index_checkbox.Checked &amp;&amp; !PartNumIndex_checkbox.Checked) Note the use of the ! operator before each property. This changes true to false, or false to true. You're basically testing for "not true". The ! operator has a very high precedence. Finally, if you're not familiar with source level debugging, look up a video on YT about it. It will be immensely helpful to you. Hope that helps!
Just posted the Github link in the post
1. Domain Layer (.net standard) Data Representations, generally stuff that represents your database structure but may contain additional objects that support data management and manipulation. The domain layer should be a rich representation of data not just basic pocos. Domain objects may contain business logic but should not be dependent on any other packages such as nugets or other assemblies. Follow DDD use appropriate constructors and private sets, generally make accessors go through specific methods to encapsulate the logic of updating the domain. 2. Data Access Layer (.net standard) This will contain your dB context. I know other people aren't fans but I like to use repository pattern with unit of work. I tend to use a generic repository which allows a standard interface for filters, order by and includes. Unit of work to save. This I feel allows simple mocking for unit testing and also standardises approaches to interacting with your data which makes it easier for management across a team(s) There won't be much in here beyond a generic repo class, uow class, context and mapping and interfaces for them. You'd only inject generic repo and uow into layers above 3. Application layer (.net standard) This is orchestration logic - get data from a repo, Maybe get data from another repo update this object (where you pass values to domain and the domain encapsulates how it updates) Save changes etc This might be the sort of stuff people would have put in controllers if they don't separate it out Try not to put important business logic in here, that should really be encapsulated in your domain Try not to call everything XXXService be descriptive use reader/writer/mapper etc All public methods would output data transfer objects, generally internal methods for domain return types (don't have to be that strict if you don't want to) but the domain should never go out to your API endpoints or website 4. DTOs (.net Standard) Pocos which represent the outputs of your application. Should be simple anaemic objects. No constructors, public getters and setters No logic 5. API (Service) / Website (.net framework/core) This is where you call endpoints that would pass off to the application layer. By keeping your application layer as the orchestrator you can switch out whether an API / Website interacts with it, or have multiple APIs which might share some orchestration functionality. Also by having this as the only assemble in a specific flavour of .net you can have some apps which are framework and some which are core which share the same logic. I recently had to do this, so it's a genuine use case. 6. Client (.net Standard) An interface and implementation of a class which describes how to interact with your API so you can build it and install it as a nuget package into any application which needs access to your service. Will probably have some sort of generic http client base which your implementation uses so you don't have to keep rewriting get/post methods. Probably doesn't apply to website apps 7. Domain Tests (.net Standard) Test that encapsulated business logic. Try not to get too involved in every line, given an input test that the appropriate property ends with the right result. Test what happens with potential failure points 8. Application Tests (.net Standard) Test the orchestrations Try not to get too involved in every line. So you don't need to verify that genetic API methods were called etc. You need to use callbacks and check that with given inputs the correct object came out and was mapped appropriately You don't want to verify every API call etc because this is the encapsulation. You'll know it's happened in your tests because you'll have to have mocked the return values so you know that it accessed the logic if your test passes. Test what happens with appropriate failure points such as an API failed to return, an object with that id didn't exist in dB etc 8. Test Library (.net Standard) Domain builders, dto builders - standardised builders that mean you don't have to keep recreating the same objects over and over for mocks, you can just use one of these 9. Test Framework (.net Standard) Useful classes / methods for performing actions in your tests, you could turn this into a nuget package and share across projects Domain stuff is hard when you use private sets and generally constructors won't allow you to set IDs because only databases would do this This would contain stuff like reflection property setters - ONLY FOR USE IN TESTS - so you can keep your domain in tact and encapsulated properly without having to mock via inheritance etc. You may use some of these in your test library for building out standardised domain objects.
Just to set some realistic expectations, most companies will not hire a fresh grad directly into a remote position. Not saying it’s never happened because im sure there are examples but most places want to see a few years of professional development under your belt before you would be considered for full time remote.
Alternate approach, i feel like a repository is a red herring here. Read into CQS and a command bus, MediatR is a simple plug and play in memory implementation to look at. you can then encapsulate each action as a command or query(don't get too dogmatic, if you need an auto incremented int id just return the damn id). This seems to be what your after, a degree of separation from your Repository (Entity framework) and your controllers. Just make sure your request handlers aren't returning your EF models as to avoid coupling.
It sounds like you're still thinking n-tier when you want to be thinking ports and adapters. You're asking totally the right questions though. Abstraction isn't about putting a project inbetween two projects, that just changes the direct dependency to an indirect one. In this case it would be creating two projects, one for data access interfaces (without EF dependency) and one with data access implementation (with EF dependency). Your business logic only depends on the first one. The classes from the second one are provided as implementations for those interfaces at runtime.
I can understand that! Thanks for the heads up. I can find a on site job within a 2 hour commute fairly easy, I was just going to try and avoid it first!
Did you seriously just pull a "never mind fixed"? Please make sure to write the answer regardless of how simple it is.
&gt; It should just delegate calls to other types, which preferably are in another project that does NOT reference ASP.NET Core. What is the point of this? Why can't you just put the logic in the controller?
This. This is the purpose. I just want to be able to fake the damn storage all together. Just because I CAN integration test against SQL doesn't mean I fucking want to. I WANT to be able to fake my success and failure results and be sure my logic layer is responding to those the way I expect it to (even if means ensuring it doesn't swallow an exception!). Faking out an EF dependency behind some simple interface is not intended to enable me easily switch data storage, it's intended to enable me to swap the whole implementation for testing my logic, and decoupling the logic from the controller is intended to help me separate activation of my logic from my controllers (in addition to enable reuse). If I for whatever reason want to call the same code in a soap API as I do in my web API, or in an mvc controller, partitioning my logic out of my controller helps to enable that. /rant
buy whatever mosh courses on udemy you are interested in or is what relating to your new job https://www.udemy.com/user/moshfeghhamedani/
Rubbish. UX is hard, you're interfacing between a human being and a computer. It's not just about making things "pretty", it's about making things usable, which is hard, even if the programming itself isn't super complicated. Conversely unless you're some sort of masochist you're not going to be doing most of the stuff you listed on the back end by hand and beyond a certain level of complexity you're not even going to be doing it in code. I'm not saying backend is easy, and I'm primarily a backend guy myself, but pretending that the front end is easy because you wrote one for people who had no choice but to use it is arrogant or that you're actually doing most of that stuff to any degree of complexity is nuts.
I'm a Senior Software Engineer, however I dont like being called a higher up. :) Anyone to tell you something is an "Enterprise Standard" totally forgot to mention something critical. They forgot to mention that it's a standard for companies who are running a pure Microsoft Stack, which in my many years I've never seen anyone be truly "pure" one companies technology. C# is a great programming language that will allow you to do all sorts of work - like mobile development using Xamarin, desktop applications using Winforms, or WPF, web development using ASP.NET. Microsoft has even reached the point that you can use C# in combination with Blazor to build frontend reactive applications without the need of writing Javacript. Yes, that was a mouthful of different technologies and libraries you can use in conjunction with the C# programming language to build applications. There are a million different programming roles that you could get into if you have all of this knowledge. Mobile Developer, Fullstack Developer, Frontend Developer, Backend Developer, ETL Engineer, Software Engineer, Software Architect. The list goes on and on, a title is more or less a title with compensation attached to it. Please note that .NET is a framework that Microsoft wrote to help write all of these different applications using C#. .NET is not a programming language. You know the best way to find out what you really want to in the world of development? Pick something you want to solve, and solve it. The best part of this is your interests will change over time and your development portfolio will change over time. I got into C programming when I decided I wanted to cheat in first person shooters because I'm terrible at them. My first code attempts were terrible but they solved a problem, and I learned a lot that I was able to apply to work. Just my two cents. If I'm incorrect on anything let me know, im only human. Also, remember to become a master, you must first be an apprentice.
Don't forget even the better libraries have bugger all documentation other than a medium post saying "here's hello world now go draw the rest of the fucking owl". Then again there's no point documenting your library when it's going to be abandoned or superseded next week. I can see blazor taking off for internal applications (or public if the payload shrinks enough) not because it's better but for the same reason WebForms took of and is still around.
You have no fucking clue what you're talking about. If you think of implementing a backend as "beyond a certain level of complexity you're not even going to be doing it in code," then I question whether you're even a developer, much less "primarily a backend guy." Sure you're not a sys op or sys admin and not a developer? I didn't say frontend development was easy. I said it was EASIER and mostly complicated by the lack or inconsistent application of standards. I also said there's an art to designing a good interface and I meant it. Not everyone can do it. If you've simplified the complexities of backend development to something not done in code then you haven't done a true backend. But hey, what do I know, I've only been the CTO of a custom software shop that serves Fortune 100 companies for 30 years so my experience is limited. /s
Start with a C# console application first, learn the language and syntax. After that branch into how to properly structure your code, design/behavior patterns and principles - this is a very important step for writing larger enterprise stuff. After that I'd lean into database development, SQL is relatively straight forward; again learn the language and syntax, the move onto query optimization and leveraging performance on the code you write. Then Join the two (C# and DB) together! it will give you some idea about how to make the two interact, where you can benefit from using other code such as Microsoft's [ADO.NET](https://ADO.NET) or Entity Framework. I'd keep the web/front end stuff (HTML, CSS, and JavaScript especially) for last, there is a lot to learn here, the thousands of JavaScript frameworks that can be used, how browsers implement their own interpretations of HTML/CSS - it becomes tedious especially if you're just learning the basics. Good luck and enjoy!
I didn't say that implementing a backend beyond a certain level of complexity isn't done in code. I said the things you were raising as the really complex parts of backend aren't solved in code (at least not your code). Session management becomes complex when you're trying to do sticky sessions in a load balancer, which happens in a load balancer. Making your database performant is generally done in the design, configuration, and maintenance of your database, again, not code. Threading is usually done in the framework you're using for the basic stuff and the problems it solves are by no means unique to the backend. I'm not saying these problems don't exist, I'm saying that in all likelihood you do less than 5% of the work to actually solve them yourself. And again, making a user interface that people actually want to use as opposed to have no choice but to use, is hard. And bragging about your time in a management role isn't really convincing of your technical knowledge.
If you've any option to choose, try PHP and C# both, and find out which one you prefer. I'm biased towards C# as it's one the most well-designed languages out there. **In general**, C# codebases are of higher-quality and more maintainable than PHP codebases, so working in it will make your life easier. If you decide to work with C#, and as your company is creating .NET Web Apps, go for ASP.NET first. It's still heavily used in the enterprise world, very mature tech so tons of legacy codes, maybe your company's Web Apps are already written in it. If there're some green-field projects, and you're allowed to work in those, learn ASP.NET Core; it's the future. If you want to kick-start with free learning resources, check these amazing channels on YouTube dedicated to .NET - [kudvenkat](https://www.youtube.com/user/kudvenkat/) and [IAmTimCorey](https://www.youtube.com/channel/UC-ptWR16ITQyYOglXyQmpzw). These tutorials and complex real-life projects will give you a proper foundation to dig deeper into the .NET and .NET Core both. If you want to spend some money to get the training from the industry leaders, try Pluralsight Paths for [C#](https://www.pluralsight.com/paths/csharp), [ASP.NET MVC](https://www.pluralsight.com/paths/mvc5) or [ASP.NET Core](https://www.pluralsight.com/paths/aspnet-core). After completing these, target the [.NET Compiler Platform](https://www.pluralsight.com/courses/dotnet-compiler-platform-introduction). If you don't know the basics, it's very hard (if not impossible) to understand the what’s happening under the hood. Hope it helps, cheers!
You should decide what you're going to do. If you want to build a web application, you need to know (at least) HTML first. If you want to build a desktop application (no web front end) you don't. HTML took me about 45 minutes to learn adequately that I could get started, so it doesn't have to be a big time investment. Don't bother learning the details of SQL Server. It's just a database. There are many. Learn SQL, the language, and that'll be applicable to many servers and help you a lot as your programming career progresses - most people never bother, and knowing it will put you ahead of the pack. (It's easy too. Remember the language was developed about 50 years ago, so it had to be pretty simple at the time.) Then you can learn the SQL Server based additions to the language as you need them. I'll let others advise you further.
&gt;My ego says back end is harder, but that's probably a lie. I do both. So I can comment here. It used to be true that back end was harder. These days front end has become so stupidly complex that this is no longer necessarily true. I suspect the pendulum will swing the other direction sooner or later.
Especially these days
Not sure if my advice will be the best since I am still new to programming (about 10 months), or my advice might be the best since I am still new to it lol. &amp;#x200B; Either way a lot of people hit the nose on the head with choosing front or back end. Both have difficulties to them as in job &amp; capabilities. Me personally I choose back end mostly because I wanted to go into game development lol. But honestly both are great imo. With road map choose one and just go for it. Being bias I would suggest looking into Object Oriented Programming and choose one from there. But again that's back-end, and you can take the free step by step coding from FreeCodeCamp to get your feet wet with front-end. Even as a new developer I think it is wise to be able to at least read &amp; understand both front-end and back-end. As time goes you will be able to learn more languages like SQLServer, CSS, &amp; JS. I don't want to be kicked from here but I have heard that Python is a great first language to learn for programming. But, honestly it's more important to just find a starting point. Drop it. And go. &amp;#x200B; Good Luck!
Despite what people seem to be saying here, you're doing the right thing. If your project is set up in Bob Martin's "Clean Architecture" aka "Onion Architecture" then your Data Models (i.e. the models generated by EF) should never leave the data projects (infrastructure layer). A way you accomplish this is with repository pattern. Nevermind the arguments about "changing your data layer" or "Unit testing". These are all true and valid arguments, by the way, but simply put, if you DONT do this, then you are \*literally\* leaking your data implementation out into the rest of your project and potentially out of your API. This will, over time, make your project brittle and hard to change. Anyway, in the Onion Architecture, dependencies can only go INWARD towards the core. Your API and your Database implementation sit in the infrastructure layer so they can have dependencies on the application layer. I consider the API the topmost layer because it is the host so i look at it like this API -&gt; Database -&gt; Application -&gt; Domain\* (if you're doing a domain driven project) &amp;#x200B; \- \*Define\* your repository interfaces in your application layer. They will application layer objects. \- \*Implement\* your repository interfaces in the database implementation project (and infrastructure project reserved specifically for an EF implementation). \- In then methods of this implementation, do your EF business and then map the resultant Data Model to the Application model and return it. The mapping is the most painful part. The only painful part imo. You can do manual mapping or use something like Automapper if you're willing to put up with the configuration. We use automapper. I have mixed feelings about it. You spend the same amount of configuring a mapper as you would just manually mapping, and in addition to the learning curve, debugging is harder with Automapper. I actually prefer manually mapping but pulling those mappers out into their own classes so they can be reused. We have a few projects that use different data implementations (EF, Dapper, raw ADO, Document databases, etc.). The pattern holds true with all of them. We actually take it as far as marking the data models as internal to further enforce the "this model never leaves this layer" rule. Setup the database implementation as the implementation of your repository interface. Now your services in the application layer, whether your doing them as plain services, or you using handlers (like MediatR or service bus or whatever), will request your repo and use it, everything from here on should be pretty standard. The effect is this: Your application only knows about concepts defined in the application layer (and/or Domain if you have one). It has absolutely no knowledge of your EF implementation so there is no chance of you leaking your data layer. The notions that some people here put up that there's no value add with this layer of abstraction is myopic. Not doing this is easier for some people to grok, but now you have to police your colleagues to use the correct \*kinds\* of objects for each task vs using the Onion Architecture where the architecturally "correct" solution to almost every business ask will reveal itself to you. There's never any ambiguity on the "kinds" of objects and how to use them -- or which objects should have ctors and which shouldn't, which are decorated and which aren't, which need to be serializable and which don't, which have behavior and which dont, etc. It's all dictated by the layer it lives in. The dependency graph will enforce the architecture as a side effect. The additional side effect of this architecture with all this abstraction is those other things that people argue: testability, changeability, and most importantly in the world of productivity --&gt; the ability to defer decisions about how dependencies are implemented as long as possible. If you're working on a personal project that isn't going to live very long, I probably wouldn't spend too much time on this. But, if the project is meant to live for a long time at a business or within an enterprise, I absolutely would. It's a mindset change for some, but it's fast once you get used to it.
&gt;Client-side, you're only concerned with one user, and the code is almost exclusively dealing with the UI. You've got to know HTML, CSS, and Javascript (plus possibly other JS frameworks). While it's very true that there is an art to designing a "pretty" interface and providing the user with a good experience, in my experience most of the difficulty comes from the lack of standards or different implementations thereof by the hosting environment (i.e. the browser). It's possible (lotta work but possible) for one individual to know the entire API surface of HTML, CSS, Javascript and the chosen UI framework (e.g. Angular). This is all technically true. Until a couple years ago, I maintained my own personal client side library - imagine me, in 1999, saying "darn it, it's too hard to write for every browser, I should make a library to standardize all this stuff!" and developing my own jquery, then keeping it working and using it until about 2015. You have \*no idea\* how complicated it was to keep up on all the weird differences and bugs of all the different browsers. Even though I could write them into my code and only have to learn about the new ones when they came out, it seemed like every other week somebody would come out with a new version of their browser (shakes fist at the sky and swears about Safari) that broke everything due to an obscure bug. And to figure these things out, I had to maintain systems running every damn OS and every damn browser on each to mess with them to figure it out. The reason I stopped was that it just became too damned hard to keep up the systems and do all the testing, so I finally just switched to jquery and abandoned my own code. My code was easier to use (once I had done all the research and fixed it up to the latest bugs) but jquery is a hell of a lot easier to maintain. Now everybody wants me to know html (like 3 different versions of it), css, javascript. jquery, angular, about a dozen other frameworks, how all the browsers on all of the operating systems differ from each other, how to develop sites that look and function amazing on a desktop and a tablet and a phone, and if I'm not fully buzzword compliant they'll ignore my resume. Ultimately, it's more than one human can do.
I only mentioned that because if you try to learn too quickly you won’t see the benefit. Or maybe that’s just me haha, if someone tells me to do something one way with the “it’s just better trust me” logic I will instantly do the opposite thing to see why the other way is better. But also I have seen people get frustrated or afraid of doing something “the wrong way” and never start because of it. Though it suppose its up to personal preference.
&gt; And bragging about your time in a management role isn't really convincing of your technical knowledge. Oh, we're getting in a pissing match now, are we? The "T" in CTO literally stands for **T**echnical. I'm the lead developer. From 1980 and continuously since, I've written in everything from 8085 assembly to Forth. I've written compilers. I wrote the backend for the first major retailer gift registry to go online in 1999. I have written and am now personally writing apps responsible for literally billions of $US every year. If you live in the US, it is much more likely than not that in your lifetime you've interacted with or caused someone else to interact with software I've personally written. And I firmly stand by my position that you have no idea what you're talking about.
I like the sound of this design. Do you know of any links to examples?
Depends what you consider "hard". I think the backend is harder because the risk is higher. Frontend development has become more "complex" but I wouldn't say "hard". Backend development usually involves complex architecture, database design and consumption, and oftentimes infrastructure (e.g. services buses and all their flavors, streaming tech, etc.).
Anything used in business applications, yes. But I get the cut off your jib.
Depending on your architecture, if was done correctly, then the only hurt is going to be object mapping/transformation.
&gt;I'm the lead developer. From 1980 and continuously since, I've written in everything from 8085 assembly to Forth. I've written compilers. I wrote the backend for the first major retailer gift registry to go online in 1999. I have written and am now personally writing apps responsible for literally billions of $US every year. If you live in the US, it is much more likely than not that in your lifetime you've interacted with or caused someone else to interact with software I've personally written. All those accomplishments, yet they don't prevent you from looking like a jackass in this pointless argument.
I normally use text files to store data. I hear you.
It may not be a matter of changing ORMs. As SOAs evolve it might be a matter of delegation. For example, you might be replacing a database with a new remote service.
Yeah but EF implements repository and UoW to achieve the functionality of the ORM, not solve your application architecture. Those generated classes are data models and should not be leaked across your project, and that's where implementing the repo around it comes in.
In most companies I've worked at in the last 20 years, I get absolutely no say in the database design no matter how high I rise in the company (and I've been an executive level person), they have an existing database that I am required to use no matter how hideous it is, and I can only design some additional tables. The architecture may be very complex (and I say that as an expert in large scale systems that deal with hundreds of millions of database records per day) but you design some layers to handle the complicated bits and then you're riffing on top of those mostly. For the front end I'm required to know several versions of HTML (at least 3), several implementations of Javascript. CSS, jquery, angular, react, JSP, ASP, Razor, and usually several others that the company is arbitrarily demanding. And I have to know how they all interact with not only each other, on 3 different browsers on each of at least 5 different operating systems in 3 different form factors each, and also how to design a user interface that makes the visual design team happy, makes the advertising team happy, makes the executives happy, makes the users happy, and still makes all the necessary actions take place so that the back end gets the data it needs.
Don’t worry about what your degree is. If you have the experience, that’s all that matters. My degree is “IST” and I got hired immediately by a larger software company. You have nothing to worry about! Good luck (:
The answer to your question is in the name of the object type -&gt; Controller. You could physically do this, but it's not good engineering. The controller is exactly what it sounds like, it controls. More specifically it controls the request - that is, it provides an entry point for the request and then gets it to where it needs to go. Your API layer in general should only be focused on that idea and that idea alone. Receiving a request, validating the inputs, delegating the work to a service, receiving the service's response, and translating it into an HTTP response. That's basically it. Your business logic belongs in a different project that the API references.
MediatR is a fantastic library for a fantastic pattern. It has become the new standard at my company. It really helps you focus on \*thin controllers\*, and keeping the API focused on ONLY dealing with HTTP stuff.
Cool. Just leak your database implementation everywhere. NBD
Regarding **Hack for .NET Framework** : you can just use makeref to read whole object directly. Similar to [https://blog.adamfurmanek.pl/2016/04/23/custom-memory-allocation-in-c-part-1/](https://blog.adamfurmanek.pl/2016/04/23/custom-memory-allocation-in-c-part-1/)
look up "Onion Architecture" or Bob Martin's "Clean Architecture"
You make some really good points. And I do have an idea of how hard javascript'ing was in 1999. You were way ahead of the curve and went much deeper than us but we did develop a web app with an HTML frontend that used JS to interface to hardware through a COM plugin around that time. Fortunately, the customer could dictate the browser so we only had to support one but even then there was hardly any documentation much less nice IDEs or debugging tools. I can't imagine trying to support multiple browsers in that era. Believe me, I'm not saying that writing frontend stuff is easy. If it was, no one would be paying others to do it. Putting together a nicely laid out, responsive, maintainable and extensible user interface takes real talent and the tools required to do so, especially javascript, give you plenty of rope with which to hang yourself if you don't know what you're doing. I like frontend stuff. I've been told I'm good at it but I'm still awed by those who truly are, especially graphic designers and such who can layout really complicated screens and workflows in a logical manner. But I had to mostly give it up due to constantly being dragged back to writing and architecting backend services because when you start talking about real-world business deployments, those things are really, really complicated. In my company, we can hire good frontend developers pretty much all day long (not high quality graphic design talent, mind you) but it's nearly impossible to find people who have the depth of knowledge required to do a lot of our backend work.
&gt;Just make sure your request handlers aren't returning your EF models as to avoid coupling. This. This is what I'm trying to get across. There's another word for this -&gt; LEAK.
In 1999 I developed a web app that received XML from a mainframe on the back end, parsed it in Javascript on the browser, had some 30 screens to allow the user to edit the data, then generated new XML and sent it back to the mainframe for storage. When it was finished the client asked me to change a little detail, and I had to tell them that I couldn't do it, because I found that if I added the 3 lines of code required it would overflow the Javascript buffer in Netscape. Then I had to develop a site about a company's sponsorship of the Atlanta Olympics, and it had to be written in HTML and Javascript but look at least as good as Flash. So yeah, I've been around the block a few times. &gt; In my company, we can hire good frontend developers pretty much all day long (not high quality graphic design talent, mind you) but it's nearly impossible to find people who have the depth of knowledge required to do a lot of our backend work. I've found that when I have separate people doing it I get lousy work in the end, and I can do better work with 3 full stack developers than with 5 front end developers and 5 back end developers. But full stack developers are rarer than unicorns, I have to get somebody who is just a good programmer and teach them myself.
You don't need to have any say in database design to nozz it up. The backend API is still the system of record responsible for enforcing business rules before persisting them. There's no "templated" solution for that on top of which one might riff. &amp;#x200B; &gt;3 different browsers on each of at least 5 different operating systems in 3 different form factors each. I haven't had to deal too much with this as this problem has been solved in many frameworks. There's some work involved to get it all perfect, but most things are pretty close out of the box. &amp;#x200B; &gt;and also how to design a user interface that makes the visual design team happy, makes the advertising team happy, makes the executives happy, makes the users happy, and still makes all the necessary actions take place so that the back end gets the data it needs. &amp;#x200B; I'm forced to respond in kind: As a \*developer\* I've rarely have much input on the \*design\* of an interface, as it is officially different skill set, but it depends on the organization. But like I said, it depends what one considers hard. I find frontend work \*complex\* because how non-standard everything is, but I wouldn't call it hard, personally. I find it tedious if nothing else, due to the nit-picky nature of every aspect of it is. At least for web. The same holds true for me in mobile development, just less so.
Hush now, you, the adults are talking.
C level jobs are management, they're not development jobs, if you're doing CTO and lead developer you're doing one or both of those jobs poorly or your company is tiny. And we're talking about backend code **today** and front end code **today**. Not what you were writing in 1980. Is you're hand rolling code for the issues you've listed on a regular basis today in 2019 you're probably almost criminally incompetent. If you think most backend developers are doing that you're insane. It's 2019, unless you're writing really low level framework code you're not writing that kind of stuff at any level of complexity, and the front end developer you're comparing too isn't writing framework code.
&gt;I haven't had to deal too much with this as this problem has been solved in many frameworks. There's some work involved to get it all perfect, but most things are pretty close out of the box. At every company I've been at and with every client I've had, if I want to use any framework for anything, I have to prove to them that it works in 4 different versions of IE, Edge, Firefox, Safari, Opera, and Chrome, on every separate version of Windows back to 95, MacOS X, iOS for phone and small tablet and large tablet, and the last four versions of Android on each of phone and small tablet and large tablet. I expect them to throw Windows 10 tablets in there as soon as they figure out they exist. And yes, I've *seriously* had to have the fight with management that I'm not *refusing* to show them IE 3 on iPhone because I'm being obstinate, it f-ing doesn't exist. And if I use any front end framework, I can bet money that as soon as the project is completed they will ask everyone they know to hit it with every computer and every browser they can find, and if one thing is one pixel out of place on one browser they will tell me the site is "broken", reject it completely, and order me to redo the whole thing overnight for free. (And if I can prove that the computer in question is messed up because it has a virus and nobody else on earth will have this problem, they don't care.) I only wish I was making this up or exaggerating. I've actually delivered a web site, and the client ended up calling my boss in a rage because they had their cousin look at it and the cousin said that the colors in the photos were off, so this must be my fault. It turned out the cousin in question was *color blind*, but they seriously tried to blow a half million dollar contract over this. Another time a client called to freak out for an hour because the site was the wrong color... it turned out their monitor cable was coming disconnected from the computer. &gt; As a \*developer\* I've rarely have much input on the \*design\* of an interface, as it is officially different skill set, but it depends on the organization. I happen to have both skill sets. That said, even in places where they actually had a design team, I was forced to work very closely with them because they'd design it in such a way that prohibited it from actually working, or was impossible to implement. I ended up telling them how to redesign the site, or just doing it myself. Regardless, once the site has been designed, as a developer it becomes My Problem (TM, Pat. Pend.) and if anybody is unhappy with the design, I have to fix it, the designer is no longer available.
Exactly why I've avoided web dev my entire career. Thick clients all the way! (vb6, winforms, wpf, silverlight, xamarin)
Thanks for letting me know what I'm writing. I'm sure my customers will be pleased to know that it's so simple. Since you seem to know everything I'm doing, surely you also know that I've got to get back to writing some of that really simple code now. And I'll let you get back to writing scriptlets and thinking you're a backend developer.
Absolutely, I have learned it's not worth it to try and be clever and share objects, just suck it up and write the DTO. And on that, I've also learned to just write the damn mapping function, if your using Automapper you either a) End up with models so tightly bound to each other you might as well share the model. b) End up dealing with **runtime** errors and code that's probably more complex than if you had just written the mapping manually. Yes it absolutely takes longer to do initially but i find i save a hell of a lot of time when i make a tweak and cause a compile error that usually only takes a few seconds to fix.
VB6 is dead. Silverlight is dead. Winforms is deprecated. I think WPF is deprecated, but I haven't looked in a while. I have no idea about the status of Xamarin, I haven't heard about it in so long I can't even remember what it was. The problem with these thick clients is that the systems only last a couple years before Microsoft gets a hardon for something new and drops the old thing. At a recent job I had to design a system with about 30 modules, including some command line software and some services and some desktop software and some web software. We did it, but even while we were developing version 1.0, MS changed their guidance on how front ends should be developed... twice. There is no easy solution. I worked for 4.5 years for a company that made new programming languages. Our goal was that you could write the program in one single language and it would fully generate a web UI that worked for you (with AJAX built in) and you could replace it in bits and pieces as you liked. We even developed a system where you could describe in plain English the business process you wanted to automate and it would ask you a lot of stupid questions, then it would design your whole data model and build you an interface and write code and insert notes for a human programmer where they would need to insert some logic later. But it wouldn't take off, apparently people would rather do it the hard way.
Did you try this? &gt; Quotas are not enforced on roaming stores. Because of this, a slightly higher level of permission is required for code to use them. The enumeration values AssemblyIsolationByRoamingUser and DomainIsolationByRoamingUser specify a permission to use isolated storage for a roaming user. If you can pull the higher permission, you might be able to skip the quota check that is apparently broken.. assuming that's the underlying problem. Otherwise, I have no idea why it fails on 4MB files but not smaller files.
Hopefully it was pretty obvious I was listing the progression of front end tech I've worked with, not saying it was all still current. That's the nature of the business, not a failing. Trying to pick frameworks that aren't going to be replaced is a fool's errand. Devs, and dev tool makers, must adapt or die. Sure there are some that last longer, but that's often not because they are the best design. I'm quite happy with how long those phases lasted, and have been very pleased to have been able to keep using the same language (c#) and the same architecture patterns (mvvm) for 10+ years now. Btw, Xamarin is just. Net for Android and iOS (and Mac). It's great, imo, and I've been focused on writing apps with it for 7+ years now. As for a domain specific language for front end, as you described, I've seen that tried quite a few times by everyone from startups to the big guys. MS was hyping something like in like 2007. The problem is, the industry moves too fast, and becoming dependent on something like that is a big risk/cost (see first paragraph). People will keep trying to build those though, and maybe someday it will take off, but I'm not holding my breath.
&gt;Btw, Xamarin is just. Net for Android and iOS (and Mac). It's great, imo, and I've been focused on writing apps with it for 7+ years now. Oh, that, thanks for reminding me. Didn't MS buy it? Haven't they killed it yet? &gt;As for a domain specific language for front end, as you described, I've seen that tried quite a few times by everyone from startups to the big guys. MS was hyping something like in like 2007. The problem is, the industry moves too fast, and becoming dependent on something like that is a big risk/cost (see first paragraph). People will keep trying to build those though, and maybe someday it will take off, but I'm not holding my breath. The languages I built *weren't* front end languages. They were back end languages that auto generated a font end for you.
Yeah, Xamarin is MS's current answer for building mobile apps. It's still evolving and getting better. It's open source now like most of .net I don't see it dieng anytime soon, though flutter is making some waves. Personally I trust Microsoft more than google when it comes to dev tools.
I don't trust either of them as far as I can throw them. But when I have to use something, I use Visual Studio, because there are a lot of libraries for C# to do stuff that I don't feel like doing.
&gt; I've only been the CTO of a custom software shop that serves Fortune 100 companies for 30 years so my experience is limited. /s Careful. I've spent much of my career cleaning up after people like you. Hopefully not your company specifically, but certainly for others that left disasters at Fortune 10 companies. And by now you should know titles don't mean shit in this industry. My second programming job ever gave me an equivalent title, but one rank higher because I was on the board of directors. Of course it was all just BS, but technically I could claim the title if I could remember it.
&gt; VB6 is dead. Silverlight is dead. Winforms is deprecated. I think WPF is deprecated, but I haven't looked in a while. WinForms was never depricated. Neither was WPF and both of them are being carried forward to .NET Core 3. They just don't get a lot attention among the bloggers. As for VB 6... total zombie town but I am applying for a position that requires it tomorrow. Old tech dies hard.
I didn't say what you're writing. I said that if you're hand rolling complex session management in 2019 you're probably incompetent. I also said that you're either doing a shitty job as CTO or a shitty job as lead developer because they are wildly different jobs and unless your company is tiny **no one** can do both properly. I also said I don't give a shit how you were doing it thirty years ago because it's irrelevant. I also don't give a shit if you write software for fortune 500 companies. A lot of enterprise software at that level is total crap it's not a qualification. I've seen software *from* fortune 500 companies that I wouldn't touch with a fifty foot pole and the stuff they buy is often worse. Maybe you're writing really low level code, maybe it's even the right decision, but if you are you're in the fraction of a percent of back end devs who do. You have an idea on what front end dev actually is that's beyond ignorant. You think it's about making things pretty, and it's not. It's about making people who have a choice use your software, which is actually hard. You also have a delusional view of how complex what you do actually is.
I'd say just start with console apps. Things are a little different now, but when I went through my CS courses front end was optional. I believe it's better to know your computing fundamentals before adding complexity. Once you get a decent grasp on them you'll be better prepared to make a decision on where to progress from there. Maybe you want to explore more of the user facing side and move into HTML, or just dig deeper into different data structures and algorithms and stick with console apps, add databases, or shift into a language like C++ or Go where you can really dig into items like memory management (I miss pointers sometimes). It doesn't matter what language you choose to start with C# and JavaScript can both easily lead to others. If it was me I'd say go with C#, .NET Core has been a great step up in terms of grass compatibility, you get a lot of assistance from the compiler, and the tooling is more standardized.
I know for a fact that Winforms *was* deprecated, because while we were trying to decide what front end tech to use for one project, Microsoft came out with WPF and announced that Winforms was deprecated. It wouldn't at all surprise me if they changed their minds about that a year later. &gt; As for VB 6... total zombie town but I am applying for a position that requires it tomorrow. Old tech dies hard. My condolences. I worked for a company that had a very large VB6 application developed in house. I was hired to get rid of it by replacing it with a C# web app with a MVC front end. I studied the problem for a couple months, determined that the company had encoded most of its business knowledge in the VB6 app and no human knew it all so it was vital that I preserve the logic, and the users were so used to the screens that they wouldn't cope well with a new UI, so I developed a plan to convert the VB6 app to C#, slowly and gently so they'd use the existing front end and it would embed C# items in it as they got converted. I wrote up my plan, asked my boss what to do with it, he said to give it to his boss, a VP. My boss was promptly fired. It seems that the VP was the guy who *wrote* the VB6 app so my boss had hired me to "kill his baby". He promptly announced that we would never get rid of the VB6 app, and started looking to hire more VB6 programmers. He was sorta embarrassed to find that only one was available. He then announced that the whole web programming team (4 people) were going to learn VB6 and transition over to programming it. One guy promptly quit, and the rest of us told them that either they could give up on it or we'd quit too. Suddenly that decision just magically went poof and was never discussed again. I learned that VB6 has a limit to the number of objects (screens and classes) it can handle, and if you exceed that limit the compiler just falls down and dies when you try to recompile. They were like 80 away from that limit and they were adding about 16 screens a week, last I knew. I suspect that within a few weeks of when I left all hell must have broken loose there when they hit the limit and couldn't develop it any more.
&gt; I've spent much of my career cleaning up after people like you. Sorry, but no, you haven't. Being the size it is, the only way my company can get any business from the likes of our customers is through our reputation, which we've earned and kept over 30 years in the business. I do know the likes that you're talking about though. We've been brought in for emergency cleanup on projects where the VP of a large company hired his old college professor's company and they spent $14M and 18 months delivering an unworkable and unusable partial solution. We rewrote it from scratch in less than 6 months for $2M.
Why not have a separate process that pulls the file down to the local system every x minutes? Then your main program can run 1 minute later and read from that file almost instantly.
&gt; Microsoft came out with WPF and announced that Winforms was deprecated. That never happened. People assumed it was depricated because 'ooo shiny new thing' but we still get regular updates to it.
&gt;Yes it absolutely takes longer to do initially but i find i save a hell of a lot of time when i make a tweak and cause a compile error that usually only takes a few seconds to fix. Agreed. I too prefer to just write a big ugly mapper.
You're disproving your own case. Everyone claims that they're the good ones that clean up the messes left by others. But unless you are willing to disclose your company's name and the rest of us recognize it, we've got no reason to believe you. The fact of the matter is that for every decent team working for a Fortune 100, there are 5 to 10 just burning through cash. And not knowing you, the odds are not in your favor. Which is why I said to be careful about trying to use titles and 'reputation' to win arguments.
so thats mean readonly only works inside its own class's constructor, right?
A large number of questions probably just means the async/await pattern is widely used. In terms of pitfalls, too, those from using the `Task` classes directly are probably more frequent pits with longer falls.
Nowadays every company need full stack. The preferred real full stack can manage his way through: 1. Databases 2. Backend 3. Fronend 4. Automated tests 5. Serverless (aka cloud) Infrusturcture / Devops will eventually disappear. QA engineers as well. Full stack engs would be the preferred employees.
Great! So the script will looks like this: public class Character { private readonly string \_name; public string Name {get{return \_name;}} public Character(string name) { \_name = name; } } public class Adventurer : Character { public string \_role; public Adventurer(string name) : base(name) { } } }
Thumbs up for saying IoC instead of DI (Container).
Should I use ILSpy or DNSpy for decompiling programs? I've heard good results on both and personally use DNSpy.
Does the connection string have "localhost" written in it?
Or otherwise delete the post. Nothing more infuriating then looking for an answer to a problem, find someone posting the exactly same problem, and you see a "nevermind, fixed it".
This is the point. You don't encapsulate an EF repo in a repo that mirrors its functionality. Ignoring things like CQRS or ES, you'd have a domain level data access layer with methods like "SaveOrder" which will take a fully realised order with its header and order lines. You shouldn't be creating a transaction and adding a header, then order lines, then committing the transaction. Obviously it's a bit more complicated than that. You may have distributed transactions. If you check there's stock of each line and there is, but when you come to commit the order the stock levels have changed and one item is now out of stock, you need to be able to handle that. There's no reason that the stock api will be hosted in the same process as the order api. So I'm just keeping it simple. EF can work perfectly well with POCOs, so there's no reason to create entities that need to be mapped to the EF entities before they're saved. An order will always be an order, so if the order has a new field added the database will need to be updated anyway. Anyone can do it however they like to be honest, all it has to do is work, but the above is based on my experience.
&gt; EF can work perfectly well with POCOs, so there's no reason to create entities that need to be mapped to the EF entities before they're saved False. Data models have a different reason to change than application models. This is basic SRP.
It's a good way to learn how things work under the hood, sure. If you get interested in implementing a network protocol, or if you want to know how to execute and bind SQL results to strongly-typed objects, it's never a bad idea to just install a NuGet package that does something similar and open it up in dnSpy to see how it was made. I personally find dnSpy easier to navigate than GitHub even for open source projects, and it's a very good way of learning both how packages work as well as how best to use the package.
Yes. So you need to either make the field not readonly, or think of some other arrangement for how to initialize it in your class hierarchy. For example: make it a property that is readable by everyone, and writable by the class itself AND inherting classes.
Do you know that the goal is being able to code C# in Unity? In that case I suggest learning Unity and C# side by side. C# has a lot of applications and the best way to learn is by doing, in this case programming games. I recommend this Udemy course: https://www.udemy.com/unitycourse2/ (Never ever buy Udemy courses at full price. They are almost always available at deep discounts.)
&gt; (My ego says back end is harder, but that's probably a lie.) but shitty backend with great frontend is better than shitty frontend and great backend.
Jeff P's series of blogs got me started some years ago: https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/ There's a nice simple example "Onionified" app on his Bitbucket (It's not MVC and it's a few years old but you get the idea of project structure, even for a simple project): https://bitbucket.org/jeffreypalermo/onion-architecture/src/default/
I just want to say there's absolutely no requirement or need to decompile .net code in order to be a good (or competent) .net developer.
&gt; He’s seen a lot of people use libraries and frameworks but not really know what’s happening under the hood. There are some people out there that feel using libraries (or not writing _everything_ yourself) is a bad thing. Let me categorically say they are **wrong**. Now that's not to say you shouldn't have at least a basic understanding of what a library does or how it works - you should have a rough idea, but the point is that there's a reason a rich ecosystem of libraries exist and reinventing the wheel is silly. More specifically, it's not about which library you use and why, but _how_ you use it. Another word for a library is a _dependency_ - and dependencies can be bad. But be aware that it's easy to write your _own_ dependencies that have exactly the same drawbacks - remember, it's not about what you use, but how you use it. However. We're getting _way_ ahead of ourselves. When you're just starting out, don't worry about that. Don't worry about having to understand under the hood how the sausage is made. Don't worry about learning assembly or IL or any kind of decompiled code. Don't worry about it. Concentrate on the basics. Getting code working. The best way to learn is to write code. Don't sit in front of tutorials and videos all day, taking it all in and forgetting it an hour later. Open Visual Studio and start writing some code. Challenge yourself. Start with a simple "Hello World", then see if you can make it say Hello &lt;your name&gt;. Then see if you can tell it to _ask_ for your name. Getting started is the hardest bit. You don't know where to begin, nothing makes sense and when something doesn't work you don't even know what to Google. It can seem insurmountable, but it's not. You'll get there. You'll spend hours googling and debugging an issue, feel like a failure and an imposter but eventually you _will_ figure it out. It'll be something obvious or stupid or something you couldn't possibly have known, but you'll get it. You might curse yourself over it, but from that pain you've learned something and the cycle will continue. Years from now you'll _still_ feel like an imposter. You'll still feel like you're just making it up as you go along and you've got no idea what you're doing, but you'll sit next to some fresh-faced junior who looks up to you and wonders how they'll ever know as much as you do. Godspeed and good luck!
You can write a similar article on function programming or any other paradigms you want. The key is to choose the right tool to solve the problem. I've never worked with a big system written in a functional language. And as someone mention before, you can write non oop code in c#, it's even much easier. It can be easy to mantain, read if the functions are small, the code is clean. You really don't need to create three layers of abstraction over everything.
That is exactly what I was looking for, I guess I used the words "repository" and "abstraction" wrong, what I was looking for is what people call services :D So back to my base question is: how do I wire EF Core into services? Should I let the DI create instances for controllers, than pass them to services for each request? Or do services have internal *Context instances that they receive from DI on first instantiation?
I will look into this, thanks for the suggestion!
That is actually what I meant with "repository", I guess I was using the wrong terminology... I don't want to abstract EF Core with a repository, I want to separate logic from the controllers, and am confused about how to wire EF Core into the whole thing. Let's say I have "business" service classes... do they have internal DbContext instances that they get on instantiation and then keep for their whole lifetime, or do I let DbContext instances be created by the DI for controllers when requests come in, and then pass them to the service instances?
Irony being, EF already allows you to swap to other database storage engines. If you're going to a non relational storage engine I'd bet your abstraction won't save you.
Actually, after reading everything you guys wrote: I was using the wrong words all this time. I am not looking to add "repositories" as an "abstraction layer" on top of EF Core... what I want to do is separate business logic from controllers (with what I thought were repository classes but are actually called services), and I am confused on how to wire EF Core's DbContext classes with the whole thing (see my post edit).
Absolutely true. There's also no reason to create a domain specific class if the persisted class is sufficient. To be fair, I'm always thinking about these questions from a greenfield perspective. If people are talking about creating a repo, chances are they are near the beginning of a project. I'm also assuming this is a system which persists entities rather than events, and a bunch of other stuff I should probably have made more clear :) &amp;#x200B; But you are spot on, your advice is good.
I wouldn't word it like "trained to be" that almost comes off as if you did nothing else. I'd just say we learned/did full stack dev and then rather quickly switch to talking about your personal projects and github, that's way more interesting and important to an employer anyway as it's your unique asset. They've interviewed, probably employed many people with a Bachelors in IT/CD before they know what you've learned anyway
I'd imagine you would have to read what you need then dispose it. You won't have to wait for the full download even if it is all sent.
:) I prefer to inject a factory for contexts. It gives me the opportunity to change things in the context. As an example, I use a factory for an older version of EF which overrides the method that actually commits the record. If the record is committed successfully I have the context send a message via a bus to all interested parties. Imagine you have an order (classic example) and ten processes need to know when the order CRUDs, rather than having all ten hit the database I simply send the committed record over a pubsub bus. It's just an example. Before I wanted to do that contexts were created manually, which had a knock on effect on testing among other things. It took about a day to replace all that code (there were a lot :/ ) with the injected factory. &amp;#x200B; Contexts are designed to be created, used and dropped. It handles all the connection pooling in the background, &amp;#x200B; I guess what I'm saying is, go with what feels right, and then refactor as necessary. Don't fear refactoring, it's an essential part of development. I'd start with a factory though.
[Dev essentials](https://visualstudio.microsoft.com/dev-essentials/) Free to sign up, usually has a free month of PluralSight, a site with lots of high quality training. Also, write code. Start simple, you learn much faster when you try to write code.
Check your App Service configuration / application settings through the portal. Make sure the connection string is there. Then, make sure you make your connection to the database using the connectionstring in your appsettings.
As people mentioned earlier. decide what you want to focus on. I won't talk much about front end, but definetely learn HTML, CSS, plain JS before you move on to frameworks and such. As for .NET and SQLServer, it's a great place to start and it will definetely open for you many oppurtunities in enterprise software development and maybe web if you decide to branch out to .NET Core at some point. Personally, I highly recommend it, it's fun to use and powerful. There's lost of things to dive deep into, but you can start coding right away and that's the best way to learn the basics: starting your own project and just building stuff. When you do, ALWAYS read the docs and google things you don't understand. Dont just use them, comprehend how they work. MSDN is great for this. After you get a hang about how to use the language I can recommend two books for you: C# in Depth - This will turn you from 'kinda get how it works' to 'really get how it works'. CLR Via C# - For a very deep understanding how the .NET framework and CLR works.
Removed: Rule 4.
 [u/ddm50](https://www.reddit.com/user/ddm50/) is a bad person. Can we have it added as rule 8: "If you find a solution, share the fucking solution"?
I thought about Repository as a collection (not actual c# collection) of reusable queries (Expressions) So, instead of writing X times `_context.Products.Include(x =&gt; x.asdf).FirstOrDefaultAsync(predicate)` I'd try to do it quite differently
Make that two gold.
There is no "correct" project structure. IMHO, don't worry about such things yet as they are for more advanced users. But if you want to learn about it anyway, look up "SOLID principles". These should not only define what classes you write, but also how you layout your application across different projects. Personally, I would get a little more used to the .Net Framework first, but there are certainly good arguments for starting to code SOLID as soon as possible. So it's up to you, but it's not an easy task.
Thank you. Great advice to follow. Much appreciated.
I didn't read through your code because it's not formatted in a readable way, however...some suggestions. Study SOLID principles. The Site stands for Single Use Principle. Basically, make a class/method responsible for one thing...and one thing only. Considering that you say that there's output...and your classes are csvreader and linereader, I'm guessing you do writing in one of those classes. A good habit to get into is to look/write a description of what you want it to do. Then highlight all of the nouns and verbs. The nouns can become classes and the verbs methods. That will get you pretty far. Then it's a matter of figuring out which nouns and verbs should actually be used directly or consolidated.
Yep you got it.
 Jack of all trades, master of none, but oftentimes better than master of one
Thank you! Sorry for needing such simplistic explanations. I'm very new to C# and the way classes are used is still a steep learning curve for me.
Ah, thanks.
I love it. I too was like you and felt like it was doing too much for me. However, after reading a lot I do agree that rolling your own security isn’t a good option. If it already exists from a team such as Microsoft, why write your own when you know that Microsoft’s will be tested much more and is less likely to contain flaws. When it comes to security, its pretty important. That being said, you are right in what all it does/abstracts away for you. One really nice feature is not having to write custom authorization attributes in the controllers because basic ones already exist and in most cases they’re all I need. Two, I think the idea of not having to write your own logic to rebind the user on each request is amazing. Identity does all of that for you. When it comes to the tables, you can customize those settings quite a bit. It just takes some research/learning, but for a lot of cases it works fine for your application out of the box. But if you have different needs, then you may need to change it of course. Overall, I think it’s something that should be considered heavily for an app and almost always use it.
+1 "is ok to add a layer as long it has a valid and concrete purpose". I turn a 3 layer into 4 layer app. Because the program not only required data from a db, but we services as well. Its preferable to keep an app as simple as possible, but sometimes, we need to add something extra because is necessary.
So did you put it on Github ?
Hmm, but actually what kind of security? Receive login, password, load user from db, compare hashes, attach it to request pipeline. I'm not implementing my own crypto. how is that different from `PasswordSignInAsync` except `SecurityStamp`?
u/johnnyslick yeah we kind of wanted to avoid going that route because it ties the solution to the .NET framework instead of .NET Core, but after some further discussion we might end up doing it that way because we are a Microsoft shop.
Try asking on StackOverflow.com.
Still no point in writing your own, which you could end up writing incorrectly. Even if you don’t, why re-invent the wheel just to write your own? I am not saying there aren’t cases where you may want to avoid identity, but most instances it works fine. JWT authentication is another option. But in terms of sign on, there is a lot more to write for authentication than signing a user in. How is the cookie stored in the browser? How are sessions generated? How are they managed? Writing all of this and enumerating all of the security points isn’t as easy as it seems and will take a very long time. Maybe for a personal app go for it, but for a production app with clients information, I do not recommend.
&gt;\_write Please don't do this. The lowercase already indicates it is a field, and fields should never be public so the extra underscore is unnecessary.
Work on your naming, and ask yourself if the name tells you what something does. People are bringing up SOLID and I think right now you just need to get comfortable with the S: Single Responsibility Principle. The others sort of stem from it. So a class name should be what it does. "LineReader" should read lines. It... does a lot of other things. SRP tells us if we have an "and" in our description of a class, we should be worried. *Sometimes* the two things are close enough we don't want to separate them, like "AppleSlicer" might also core the apples. In this case I don't think "read lines" and "calculate superannuation" and "write files" and "convert days" are related in any other way than "together they represent the entire program." What also helps is to name your methods explicitly after verbs. So `TaxCalculator` would be `CalculateTax`. Now we see our next problem: Where does it put the tax it calculates? You're storing it in a state variable of the class it belongs to. It should really just return the thing it calculates so *the thing that calls it* can decide what to do with that. It will take you years to find out on your own, but code is the easiest to understand if you avoid *side effects* in methods. Put another way, "The easiest thing to understand is a function that takes parameters, works with them, and returns a value without touching any static or instance members of its type." The reason those are "easy" is since they aren't bound to a particular class, you can move them to a different class easily. They "have no dependencies". When you can shuffle your code around, you can try alternate designs easy. Now, one note: in a program like this, that's just designed to call a series of functions, one can justify ignoring SRP. I wouldn't really write this program as 8 different classes, I'd just put everything in Main.cs because there's nothing that warrants a different architecture. What "warrants a different architecture"? Programs that do more than take a single kind of input, do more than a single kind of calculation, and let the user decide on the fly what comes next. Think about Minesweeper. It has features, but they really only change superficial aspects of the game. That needs far less project structure than Word, which has thousands of features including a fully-fledged scripting language for automation. Part of "growing up" as a developer is learning exactly how much structure your project needs and avoiding going too far!
You could've just used a csv library and done this in 5 lines of code, and it would've actually handled the csv format correctly.
Indeed, once I was able to figure out the right CORS package to download, and enable the CORS, everything works.
If I may offer advice, you should check out codereview.stackexchange.com. I'm a regular there and your question seems pretty good enough to be posted there and many people will give you cues and ways to make your code better. Because of the poor code formatting, it's harder to do here
I don't know where you learned this convention, but it's standard in C# to start field names with underscores to differentiate them from method variables.
It's a good thing. It comes with all of the standard things that a production-ready app would need. Trying to roll your own identity system is risky. All of the default stuff is pretty much necessary IMO (with phone number possibly being the exception). What specifically does it contain that you are not using?
It is something a lot of people do, but far from standard convention.
Is it supported? Found this bit of code Justin: https://books.google.co.uk/books?id=ruG4AwAAQBAJ&amp;pg=PA556&amp;lpg=PA556&amp;dq=ImageScannerFormat.Pdf&amp;source=bl&amp;ots=p31N1qbQSr&amp;sig=ACfU3U1ugW6uGWjocYv2KDb9WtKP_kuirw&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwifmZutwK_jAhVMTcAKHSoUBFwQ6AEwAnoECAkQAQ#v=onepage&amp;q=ImageScannerFormat.Pdf&amp;f=false
When attempting any programming task, ask yourself- is this a solved problem? If yes, find a well maintained, highly downloaded package and trust it to do the job. In this instance my go-to is the nuget package by Josh Close, CsvHelper. Now your problem is only domain specific. You'll learn much quicker if you opt for open source libraries also. For example the CSV library I mentioned uses expressions to map to a model. Whenever you use a library, check out the source code and see what they did. You'll either learn something new to add to your skillset, or see a pile of shit you could do better that validates your knowledge.
And this : https://blogs.windows.com/windowsdeveloper/2013/12/16/developing-apps-that-use-image-scanners-in-windows-8-1/#g9z4JZMPc9ho8pb3.97 - 'If a device fails to provide a certain format, you can supplement the functionality by making it available. Your app can use the file-conversion APIs'
Get Head First C# (http://shop.oreilly.com/product/0636920027812.do) It’s missing a few things here and there but the concepts work great and it gets you started with quick results. The instant gratification monkey approves.
Fine, but your way isn't more correct, so your initial comment makes you look like a crusader. No need to correct someone over this.
1.) The C Programming Language 2.) &lt;probably something here, I wouldn’t be the right person at ask&gt; 3.) C# 7.0 In A Nutshell 4.) C# In Depth 4th Edition 5.) Design Patterns: Elements of Reusable Object-Oriented Software 6.) C# 7.0 Pocket Reference
Just a quick side note, there is also === which compares not only values, but data type. Not exactly applicable here, but a fun little fact for you.
Lol, just caught this. if (path == null || String.IsNullOrWhiteSpace(path)) Notice anything not needed here?
Instead of your domain having a dependency on your data layer, you might try having your data layer dependent on your domain layer. Your domain will specify an interface for data operations but a class in the data layer will implement it. This way, your domain only ever deals with domain objects. The data layer will handle the `DTO &lt;--&gt; Domain Object` conversion. Similarly, your presentation layer will depend on the domain and will handle the `Domain Object &lt;--&gt; View Model` conversion. In this way, your domain layer drives the design of the data layer and not the other way around. It does have its difficulties, though, especially when you'd really, really like to just use the `IQueryables` on a `DbContext` for retrieving data from your domain instead of calling some `GetEntityById(int id)` method on some interface.
Not sure why someone down-voted you. The first null check is redundant.
I had this problem too. When I first started to learn Identity, everything was like a black box. I didn't know how things works internally. I searched a lot, saw some courses on PluralSight and then things got better and I had better understanding of what's happening. Overall, I think it's way better and easier to learn Identity settings and configurations than writing a membership library from scratch.
Sure, but if you are learning a new language does using a lib help you with that?
If you're thinking on going down that route, you might want to take a look at the Pidgin combinator parser library: [https://github.com/benjamin-hodgson/Pidgin](https://github.com/benjamin-hodgson/Pidgin) . I've ported it to typescript for one of my project and as such got pretty intimate with it. It's pretty full-featured, though it can be a bit daunting to get started at first. It's a bit like LINQ or Rx, really... The basic concept is simple to grasp but the bulk of learning the library is knowing which operator to use and when. The author included a sample basic JSON and XML parser which you should definitely check-out to get you started. If you're fluent with TypeScript you could also check [my port](https://github.com/kawazoe/haircomb) as I have expanded the JSON parser sample to support the entire spec. It's not quite the same operators than in Pidgin but it should be close enough to give you an idea of how to write your own parser. \#SelfPromotion?
Using a library is good advice for production code or for things you have done a dozen times, but OP said they are trying to learn the language and even programming in general. A library provides abstraction, but abstraction by definition means you don't know how it works. The details are hidden. (Yes, you can and should read the implementation, but that's not the point.) &amp;#x200B; I think OP did the right thing by making their own solution. Since they learned to do this, there is nothing wrong with using a library next time. &amp;#x200B; Having said that, I think I agree that some of these functions do too much. Also, I like to add brackets everywhere one might expect them and not just where necessary, particularly when the line is broken up anyway (I'm thinking of the if statement in the path check of CsvReader). Someone else reading my code might miss the fact that it 's a line and not a block. I might add a line and forget myself.
Interesting. That's one I haven't seen in the wild. At first glance, it strikes me as odd for the data layer to know anything about the domain layer, but that's juts because I'm so used to the other way. I'm going to have to give it some more thought.
It's common enough that you have no need to tell someone not to do it.
Okay, so I realise you're asking about _project structure_ but part of understanding a good project structure is understanding the _why_ behind it. Since you're a self-proclaimed "beginnerish" programmer, I'm going to copy/paste something that should hopefully guide you towards developing your skills in a way that will help you develop and understand a _good_ project structure. This comment is opinionated and some will disagree, but that's ok, it's a start. Go into it with an open mind, try to understand the bits and then decide for yourself. Step 1: Make sure you know what an [Interface](https://msdn.microsoft.com/en-us/library/ms173156.aspx) is. There's a plethora of stuff out there. If you know and use interfaces lots, great, move on to Step 2. If you vaguely know what an interface is for, but have never really used them then now's the time to learn. They will be your bread and butter for any kind of architecture, regardless of the patterns you use. Interfaces are almost required for any kind of abstraction (Again, this is an opinionated comment) and abstraction is the key to good, testable code. You'll want to start learning about the concept of [Inversion of Control](http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/), which is all about flipping dependencies on their head (going from "my class needs to read data from a file, so it's dependant on file reading operations" to "My class processes data, I don't care where that data comes from as that's what the concrete implementation of the interface I'm using is for"). Step 2: Learn about [Unit testing](https://msdn.microsoft.com/en-us/library/ms182532.aspx). This can be a bit of a catch 22 because it's often hard to Unit test code that isn't well architected in the first place and that's basically what you're trying to achieve, but stick with it - you want to know how to write unit tests, why you write unit tests and what that means for your code. Understand that this is where interfaces come into it in a big way, your business logic shouldn't be dependant on lots of other classes that you can't test. For example, it's difficult to test a class that loads data from disk, does something with it, then outputs it (Either back to disk or to a database or something) because you spend so much time setting up your test that it almost seems not worth it. Get that far and you're on the right track. So at this stage, you should hopefully be at the point where you know you want to write good, easily testable code and you've got some of the theories, but probably don't know how to go about it. Good. Step 3: Start pulling apart your code into classes that aren't dependent on other classes, but instead rely on interfaces. In our example above, your class shouldn't be responsible for loading and saving the data it's working on - it should only be responsible for the business logic being applied to that data. Instead, you'll want 2 interfaces - one for getting the data and one for outputting the data. In the Database/ORM world this might even be the same class and is usually called a "Repository". The key here is to grasp things like what code is responsible for what. Your class will depend on an interface but not the concrete implementation of that interface - that is some other piece of code's responsibility. Eventually, you'll come to realise that your class now "depends" on an interface or two, but you still need to supply it with a concrete implementation. You'll start to veer off into things like [Constructor Injection](http://programmers.stackexchange.com/questions/177649/what-is-constructor-injection). Now you're ready for Step 4. Step 4: [Dependency Injection](http://stackoverflow.com/questions/14301389/why-does-one-use-dependency-injection). By this point you've got the idea that you break apart your code into relatively standalone bits. Your business logic is abstracted away enough that it only relies on interfaces that are implemented elsewhere. Your code is easily testable as you can [mock interfaces](http://stackoverflow.com/questions/5627371/how-do-you-use-moq-to-mock-a-simple-interface) very easily using any number of libraries, but you've come across a new problem: It's no longer a simple case of doing new MyClass();, you're having to new up all of your concrete classes and pass them into your business logic class. It seems like a faff and there must be a better way - there is and it's using a DI container, also known as an IoC container. By this stage, a lot of the terms I've thrown around should be cropping up more and more and you'll hopefully be getting to grips with them. Make no mistake, you can read the theory all day long on this stuff but it never really sinks in until you start actually doing it. It will seem longwinded and often "pointless" at first, it will seem like you're writing a lot of boilerplate code to get the same result, but the true benefit is that your code is modular, testable and robust. The time you spend writing interfaces and wiring up your DI container will be saved 10x over by the virtue of having much more stable code that's easier to debug and tested much more thoroughly than before. Step 5: Onions. By now you should have knowledge of the building blocks for your code - you should be able to write fairly modular, standalone code and now comes the bigger, harder question: How to put all that together? I highly recommend reading Jeffrey Palermo's series of posts on what he calls [the onion architecture](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/). This is not a typical enterprise domain driven design pattern, but it's just as good (in my opinion), it's easier to get to grips with and has some serious benefits. You'll learn that you have a "core" project that houses all of your interface definitions and domain models. You'll see that intermediate layers can expand to separate logic while still being very testable. The top layer contains your DI container to wire up all of the lower layers together. You might need to read the posts 3 or 4 times and even then it might not sink in but stick with it - download his example project from BitBucket to see how it looks. As with before, the best way to learn is by doing. I hope that helps, good luck!
Services is a generic term that just means a. Class that performs some functionality or group of functionality. A repository is traditionally just a crud service. For me, I name everything either service or store. DI will resolve an entire dependency chain so long as everything is registered. Assuming everything is registered, just request what you want from it. so if you register your service and register your repository then all you have to do is request your service and dependency injection will automatically inject that repository into it. keep in mind that if there are any other required arguments in your constructor that are not a registered service then in the registration for that service you will have to do a quick setup I'm DI to fill that argument, and there is an overload for that in.net core, it is the one that takes a lambda expression
I have another small thing to add, also related to single responsibility: A constructor is expected to return immediately. It should set the path to a variable and that's it. For a long running operation such as reading a file I would expect a separate method. This might seem to make it more complicated right now but improves code quality and maintainability later on.
It is a design principle based on [onion architecture](https://blog.ndepend.com/onion-architecture-layers/). That link might help explain the reasoning.
You shouldn't run anything performance and/or time intensive in the UI thread but only for setting variables and stuff (basically everything UI related). What you should do is separate everything resource intensive into another thread and only set UI stuff in the UI thread as you cannot access it from another thread.
&gt; I don't like having too much things in code that I do not use. Get over that. I get the sentiment, but it's just not worth it. You are increasing your risk of being hacked by at least an order of magnitude, and for what? Is it *that* problematic to see some stuff in Intellisense that you don't want to use?
&gt; 1.) The C Programming Language Just curious, why start with C? Is it because for that book in particular, the language may be secondary to the content, concepts, and presentation?
Probably because I didn't go super in depth about how the code is lacking abstraction (When that has been thoroughly covered by almost everyone else). Not what I would say = downvote.
I'm not happy with the out of the box functionality, I feel like the scaffolding could do a lot more than it does. But security isn't something I want to manage on my own.
https://studyblazor.com
Having things you don't use is much better than having more code. Even though Identity might add a bunch of things you don't use it still results in less code *you* write.
I think what you're looking for might be the Shown event. [https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.form.shown?redirectedfrom=MSDN&amp;view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.form.shown?redirectedfrom=MSDN&amp;view=netframework-4.8) &amp;#x200B; Unless you mean the method calls should be executed after the user fills the comboboxes? If so, I would want to implement one onchanged event handler for all the relevant comboboxes, check if all comboboxes state has been properly edited from default, then execute the methods when they all are.
It's fine. I wish it worked on top of EF6 though.
Move the calls outside the initialization, add a handler for the checkbox clicks, check if both are clicked and then call your other methods. There’s no reason to make the call here if you need to wait for the input, use callbacks.
You need to add events on the ComboBoxes. When both are filled then WiresToExcel is called. Or create a button, and then on button press execute WiresToExcel.
Might have been the "lol," first read I thought it was just dismissive or friendly but I can see how it might come across as condescending or laughing at the OP.
All of the above: Content: Book is written by Dennis Ritchie (wrote the C programming language, as in the language itself) and Brian Kernighan (wrote the original hello world example, wrote the AWK programming language, major contributor to the Go programming language, and co-author of The Practice of Programming, which should be in your itinerary). Language: C functions can be called within a C# program calling the header: extern C . Also pretty fundamental to it’s derived languages conceptually. Concepts: See above.
It really doesn't matter. If you like the one you're using, stick with it :D.
Just because something is common does not mean it is good.
I want to say that if you want tons of varied examples of good c# code to absorb, the best place you're going to find is as a result of decompiling the .net framework itself to see how the most used and respected c# framework does things.
What a great answer! Thanks for sharing these details with all of us!
There’s many things that affect how things should be done. But if you need to “hunt down” places where data might be modified then your architecture is broken. Modifications should be centralized in any case. As for it data should be in memory or not, that depends on how much of the data you use, how often it’s used, is it changed only from this application etc. Most likely going for Entity Framework would save a lot of hassle since it will handle (some) caching, change tracking etc for you.
&gt;Interfaces are almost required for any kind of abstraction Aren't these only necessary when a language does not support multiple inheritance? In C++ you would just use an abstract class for the same purpose?
One thing is that in ASP .NET Core 3.0 preview I did identity for a MVC app and it created magic files that werent in the Visual Studio project folder. or even on disk IIRC. maybe that was a bug. anyone else have this?
Do you think Reddit runs on Windows Server 2008?
It seems like you are making thing more complicated than they should be, but that's completely fine and a trademark for someone who's still learning the ropes. Anyway, you should only load users on-demand, that is only load specific users when they are needed. So, let's say you want to display a list of all users, so it makes sense you load all users. Then you want to edit a user, so you only load that user. When you are done editing, you want to go back to your list, so you load all users again (including the ones that has been updated). Of course, you could also track your list of users in memory. Then when something changes, you push those changes to your in-memory list AND your database. That would be caching, but IMO isn't needed in most cases. It would be more efficient to implement paging so you only load, let's say, 10 users per page. To get you starting with learning databases, I suggest you take a look at Entity Framework. [This example](https://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx) is using Code-First approach, where you write a bunch of classes with properties and let Entity Framework create the database for you. It's the most beginner-friendly approach IMO. There are also Database-First (where you generate classes from your existing database) and Model-First (where you generate database and classes from a designer, but this is rarely used anymore).
I could see that, stupid neckbeard mannerisms are hard to kill!
A normal approach would be to have your database tables match your objects. So for example if you have a User object with a number of fields, you would have a User table containing those same fields in the database. Entity Framework can do this for you, or other ORMs (Object Relational Mapper) like Dapper.
Great response btw! I have a quick question myself...I’ve only done Database-First as that’s what intuitively makes sense for me. Are there specific benefits to code first, or is it just personal preference?
Sometimes. I mean C# in itself is a set of tools and standards meant to make life easier for developers. Pushing this argument to its fullest would be like saying "Developers need to start in assembly to really understand their code" (not saying you are saying this, just pushing the argument to its most extreme). I quite like the opposite, new developers should use any tool necessary to get their code working. Then, as they mature, work away from those tools and be able to make them. In this case, it probably would have been better to use a csv library and focus more on the business use case. Maybe.
Nice, yeah entity framework looks amazing. I'll definitely give that a shot. Shame that I already hand-wrote the commands to create some ridiculous tables to deal with all the lists each user has on them Is there any advantage to using a database to load data instead of memory, if the amount of data is relatively small? I.E., should I bother rewriting the entire thing for reading from database, or is it okay to only read from DB on application startup and keep it all in memory? And how large is too large to work with memory, in the range of gigabytes?
Just because it's different to how you do it does not mean it's *bad*.
And I'd counter that by suggesting simply looking at the code on GitHub for the actual source instead of decompiling 😁
Do not cache your data in memory yourself (especially if we are talking about GBs of data, like you said). What if the PC loses power? Then all your data will be gone. As soon as something has changed, push those changes to the database. Do not worry yet about caching, EF already has some basic caching going on out of the box so it loads records faster. Just get comfortable with using a database first before you worry about such things.
No, not really. Code First is faster, especially for people who know more about coding than SQL. But behind the curtains, it's pretty much the same.
You're totally right. I didn't even consider that option, as it wasn't available when I was starting out :). You can get Microsoft produced code on github now, and that code will retain comments. OP go do that.
There's a bit of a subtle difference between an abstract base class and am interface, though functionally you are correct in that you can effectively substitute one for the other in other languages. However, think of it like this - inheritance is for when you want to *extend* something, whereas an interface is for when you want to *implement* something. An interface is a contract, an agreement that something will have and implement specific methods and properties. It doesn't guarantee anything else. An abstract base class can define some behaviours, which is a bit of a no no in our case (though the line is getting blurred slightly with C# getting default implementations in interfaces).
There's a bit of a subtle difference between an abstract base class and am interface, though functionally you are correct in that you can effectively substitute one for the other in other languages. However, think of it like this - inheritance is for when you want to *extend* something, whereas an interface is for when you want to *implement* something. An interface is a contract, an agreement that something will have and implement specific methods and properties. It doesn't guarantee anything else. An abstract base class can define some behaviours, which is a bit of a no no in our case (though the line is getting blurred slightly with C# getting default implementations in interfaces).
It has precompiled views out of the box. If you want to override them, you need to scaffold identity and it will create the cshtml files in your solution
Check out Microsoft's eShopOnWeb example https://github.com/dotnet-architecture/eShopOnWeb.
Could you write a wrapper in this case?
Also, consider what happens if the path is equal to String.Empty.
I'm trying to figure out a way but I can't quite grasp it. Do you have a way to do it without copying to/from a temporary memory location?
I implemented very basic JWT based auth here: https://github.com/qccoders/QCVOC (in the API project); I don't think it would be difficult to [tweak it to use cookies](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-2.2). It's very straightforward and contrary to what others are suggesting, the typical `Authorize` attributes, including specification of roles, work perfectly fine within controllers. You can access user claims via `User.Claims` within any controller method to get granular access rights, provided you've added claims to the token provided to the client at login. My only regret is not using a more secure password hashing algorithm (with a salt, multiple passes, etc). This is an unpopular opinion on this sub and in the .NET community in general but yeah, I 100% agree with you; I don't care for Identity.
&gt; One really nice feature is not having to write custom authorization attributes in the controllers because basic ones already exist and in most cases they’re all I need. You don't have to do this with any pipeline based authentication. &gt; I think the idea of not having to write your own logic to rebind the user on each request is amazing. Identity does all of that for you. Again, a lot of pipeline based, Microsoft-supported authentication middleware handles this for you.
Correct me guys if im wrong, but I think you can assign a variable of type ResultValue to your showDialog(); And then for your functions that need the combobox information you can enclose them in a 'If statement' like `if(variable.Ok (your variable of type ResultValue) )` `// check if the combobox value != null and call your WiresToExcel(doc)...`
I realize this and maybe should’ve said so. But OP is also acting as if he wants to write his own, which if so, he would have to write everything I mentioned above manually. He is acting as if he wants something with nothing that he won’t use in it. Well, with any Microsoft-supported authentication middleware, it’s going to contain stuff he doesn’t need.
&gt; You are increasing your risk of being hacked by at least an order of magnitude Can you clarify this assertion? What protection is Identity providing here over a different solution? Specifically, in what way is Identity superior to providing any random secret along with a request?
&gt; IsNullOrWhiteSpace IsNullOrWhiteSpace covers empty.
I definitely second learning DI and IoC. Make sure you're unit testing and anytime testing is hard you probably messed up DI. There's a lot of other things to work on that others have mentioned but this is going to be the most important.
[String.IsNullOrWhiteSpace(String)](https://docs.microsoft.com/en-us/dotnet/api/system.string.isnullorwhitespace) already checks against String.Empty.
&gt; As for VB 6... total zombie town but I am applying for a position that requires it tomorrow. Old tech dies hard. &gt; &gt; &gt; My condolences. Are you kidding? It like Cobol just before the year 2000. I know it inside and out and they're a bank so I can ask them for anything I want.
I'm on day 2 of learning C# - I've never learned a language before. I'm starting with a codeacademy course online. What do you do to remember strings, etc? Do you use flash cards? Keep a notebook? Do you keep some sort of dictionary type situation? I've already forgotten the components of a string by the time I need to use it again a tutorial later, and I'm not sure how I'm going to remember without having to google every single time.
SSRS supports a client side rendering of reports. Not sure what the requirements are thought (.net framework,.net standard, core, etc..). With this you can create the RDLC with Visual Studio and embed it in the client. Example: http://www.dotnetfunda.com/articles/show/1778/create-ssrs-client-side-report There are other engines to run the RDL too. Such as GrapeCity reporting.
I believe he’s essentially saying how most developers who roll their own authentication/authorization are prone to make errors and it’s not something you need errors in with customer data. Nobody is arguing that identity does it better than any other PROPERLY developed authentication/authorization. Only that the regular joe who thinks he can roll his own is going to make mistakes and overlook things.
What you need is a service layer not a repository (very few people really need a repository with EF). It is supposed to have methods like List&lt;Product&gt; GetProductsForUser(string userId). It will contain your business logic. If you really want to you can pull EF out of your web project DI setup by creating an assembly dedicating to setting up EF in the DI and then calling a method on it and passing the services collection. I personally can't be bothered to do this.
the indexes are in an array and the for loop is inserting those values for the whole array, not just two.
I learned to program when I was 12 from a book at Goodwill! I can't remember the name but it was a c# textbook. It was older, but If it wasn't for that book I wouldn't be a programmer. Im 20 now, and I still shop around for older books even if it's just for concepts
Some of those older books hold amazing gems. However if it's just a book on C# and the Dotnet Framework. I'd recommend learning from a newer source. In recent years there has been a huge push in the way C# is written and the technologies that work in parallel with C#. Microsoft had started pushing Dotnet Core which is cross platform, has dependency injection natively built in, and works fundamentally different from the older framework. Also C# is an ever evolving language, I believe they're working on C# version 8 slowly. When that book from 2002 was written the language was at a much older version.
Use the [docker image](https://hub.docker.com/_/microsoft-mssql-server)
You can host one online on Azure, and I think they'll give you enough free credits to cover the cost of it.
Plenty of good advice in here. I want to point out your CSV parser only works in simple scenarios. You can't assume that one row exist on just one line. Some CSV files can have carriage returns inside quotes for instance.
So I don't have to pay at all. Can I even create a web application with it?
https://dotnetfiddle.net/EMi7Zt this seems to be doing what you want. There is no reason to return a string representation in the `sha256` function just to parse it to binary again. Also sha256 is a cryptographic hash function and not encryption :)
I wouldn't say it's completely worthless, but IMO, it's the next thing to it. 2002 was when C# 1.0 was released. Microsoft is working on version 8. A LOT has changed in 17 years. So much so that if you were serious about learning C# today, I certainly wouldn't use that book to do it.
Obviously that service layer code would be calling abstracted code from other services as well. People just make the bad decision to have only one DbContext and put all their DbSets in that one DbContext. I'm not advocating about that. You should split the contexts to entities that make sense to live together. My code because way cleaner and more manageable ever since that change. It did however make testing harder since I had to use in-memory dbs instead of mocks.
Depends on how many credits you get for the community level subscription, I think it's enough to cover most things and small workload stuff is pennies. I think it's $200 credit for signing up, it will go pretty far. Mine is tied to my MSDN so I don't know how much is actually free. Yes you can host / create applications on it as well.
What you don't seem to understand is that EF is not your database implementation. It a data access layer, just as a repo would be, that abstracts all the db implementation away. In fact it is in itself implementing a Repo/UoW pattern.
I've been reading through the book "C# In Depth" by John Skeet. It goes through and covers the differences between the versions of C# from 1-5. A lot has been added between v1 and v5. C# will be at v8 pretty soon, so even my 3 year old book is dated, although IMO a lot of the major additions to the language (at least for beginners learning the language) occurred between v1 and v5. There's a bunch of different books out there but I'd get something that goes up to at least C# 5. If the expense is an issue try finding something used on Amazon or AbeBooks, both sites usually have a decent selection of cheap used stuff.
I find that the learning curve for front-end development is pretty steep, especially with all the frameworks constantly evolving, but once you learn it, the curve turns into a plateau. In back-end, however, the challenges you face are limitless. So, back-end is definitely more complex. Just think about some of the considerations in back-end: * Caching * Database optimisation * Security * Transactions * Cross integration with third-parties * ...
Go and have a look at https://dev.to. To me, it looks exactly like the kind of environment that encourages the "npm packages from blog posts" that you mention. A couple of weeks back, we tasked a front-end developer to modify a bit of our C# API because we were out of hands. He boasted about spending the week-end "learning C# and our back-end code-base" and "finding how easy it was", then quickly followed with, "Why do you use these class things? I find object literals in JavaScript more powerful." How do I even start to talk about type-safety to him? I think I would have a better opinion of front-end if I did not have to face that kind of arrogance on a daily basis.
Not necessarily your own crypto, but what is your process for creating hashes? How are you guaranteeing two users with the same password have different hashes? Where are your seeds being stored? How are they being secured?...etc, etc... There is a lot more to security than what crypto is being used, this is why a library like Core Identity is good. It's been vetted, tested and any issues would have very high visibility quickly in order to be fixed.
bro thank you very much, learned from you A lot , also excuse being noob to the language, a great community this is :)))
I am not failing to think of these things. I am a full stack developer, remember? The thing is, learning all that stuff for front end work isn't a curve followed by a plateau, it's a sheer cliff of initial learning followed by a never ending mountain of ongoing changes. Indeed, you're lucky if you can actually start and complete a project before at least one of the standards you based your project on gets updated. Let's look at the things you listed for back end: * Caching: It's a solved problem. I can think of 3 solutions offhand. It's merely a matter of choosing which one works best for my project. * Database optimization: As a programmer I really don't have to worry about that, the tech lead hires a competent DBA and lets them dictate how it will work. (Or, given the constraints placed on many of my projects by business, fail to work.) * Security: It's a solved problem. Either I have an expert who can analyze my project and come up with a security model that ensures security, or I can use one made by a third party like Microsoft. I build it into the base of my application and then it's done, I can stop worrying about it, other than the details of who can see what, which isn't an overall security issue so much as a business rules issue. (Business rules are always a huge issue, for both back end and front end, but as a developer that's Not My Problem, other than to determine when business rules are in my way and ask my boss to iron that out for me.) (I've also been the boss, and it's still Not My Problem, I just write it up in detail and submit it to the relevant business person, and bounce it back to them a couple times when they give me the inevitable non-answers.) * Transactions: This can require a little thought, but I've never run into a case where this wasn't ironed out in a couple of relatively short meetings. * Cross integration with third parties: Yeah, this can be a pain, but usually they have an API pack you can download and compile in, or a well documented web service. If they have neither (and I have encountered this) I specify what I need and put them on the back burner until they give it to me. I abstract my code away from theirs so there's an intervening library, which can be stubbed until they have their act together, and when they do somebody hooks their stuff into the library and it's done.
Incredible answer, much appreciated!
See? That's the front-end developer mentality: let's just grab an NPM to solve the problem for us :-) But, can you really call yourself a back-end developer if you do not understand the principles underpinning these ready-made solutions and rebuild them yourself if needed? I am not saying that it is always sensible to craft your own libraries, but sometimes you have to, like that time when we had to develop this complex role-based security model that could not be replicated in AD. And, as a back-end developer you need to be well-versed enough in these concepts in order to be able to evaluate the available libraries or to interact with the people with specialist knowledge. For example, how do you explain a performance problem to the DBA if you cannot speak his language? Vice-versa, you need to understand what the DBA is talking about in order to modify your code accordingly. I understand that back-end is much easier nowadays than it used to be, but it is still more complex than front-end will ever be. Front-end problem domain is fairly constrained to the back-end front-end problem domain. Now, probably my last argument: I spent three weeks learning accounting concepts at the beginning of my current job in order to be able to understand the user requirements and to model the solution, and I am still learning the countless intricacies of media buying after seven years on the job, whilst trying to figure out the structure of the data dump from our software vendor in order to pull reports from it. The front-end developer? Do you want this in crimson red or firebrick red? OK-- I jest now... but if I have to give credits, the front-end *framework developers* deserve them all :-)
&gt; I know it won't be fun, That was my point. &gt; but neither is my normal job of building backends for shitty websites. Believe it or not there are more fun jobs out there. You may not be able to get one *right now*. There may not be one available *right now*. But if you're any good, you get a good recruiter, tell them what you want, and be prepared to go on a number of interviews over a period of a number of years. My last job was building boring business software for an insurance company. It sucked in every way, and I was looking for something else. I took the job as an interim job because it was available when I wanted to jump ship and paid well. I figured it would be boring, it was worse than I expected. Before that I was at a VP level in an international company that made stickers, and I was the global expert on brand security as a result. I directed the tech team, and personally designed the software that ran the whole company. It was fun as hell, and even though I haven't been there for 5 years, the people that worked for me there still get together with me every other week. The job was exhausting but it was intellectually challenging and personally fulfilling. Before that I had a crappy job doing web pages for the state government. Lovely people, I adored my coworkers, but crappy work. (I'd do it again if I needed the money and it came along. It's a great interim gig.) Before that for 4.5 years I had the dream job, designing new programming languages with a little startup closely associated with the MIT Media Lab. I set my own working hours, worked from home most of the time, only had to go into the office twice a week for half a day each, got to visit the Media Lab about once a month and see what they had invented, had world leading tech experts to advise me (we once had a question about XML grammar that we didn't find the answer to in the documentation, so we just asked Tim Berners Lee), had unlimited sick and vacation time, and more or less got to work on whatever I wanted to. Sadly the company went under (I blame the sales guy), but I'm still friends with most of the people who worked there and see at least one of them every week. When I had that job, almost every day I'd wake up eager to do whatever was on my work plate for that day. What I'm saying is, it takes some work to find it, but you can actually get a job that makes you happy and pays well instead of just pays well.
we both started programming at the same age lol
I don't know much about plotting and graphs, but for PDF generation on the .NET Framework, I'd point you to [PDFSharp](http://www.pdfsharp.com/PDFsharp/).
Yes, EF implements a Repository and UoW patterns, but it does it to provide a consistent interface for the ORM itself and solve for change tracking. It does not solve the application architecture problem which is both SRP and SoC. The only thing it actually solves is the ORM problem domain which is managing ADO connections and mapping relational data to CLR objects. &amp;#x200B; What you don't seem to understand is that in the context of the application, EF absolutely IS your database implementation. Those generated EF classes are bound to your database schema which have a different reason to change. By not abstracting that away, the very moment that your repository returns a data model back to your application layer, you've created a tight coupling to your database schema. &amp;#x200B; If you don't want to do the work, then don't, but don't go telling people to ignore comments about implementing a pattern to solve an actual problem which is isolation of your data access layer. Let them make that decision for themselves for their project. The OP asked how to abstract it, not to hear your lazy rhetoric.
So, are you going to be running VB6 in a VM on an antiquated version of Windows? :-) Seriously, my last contact with VB6 was in 2004, and I don't know how compatible it is with recent versions of Windows.
So what you’re saying is to not answer the question with my opinion because it doesn’t align with your opinion. Right.
No I'm saying not to answer the question with an opinion that doesn't answer the question. I couldn't care less whether or not your opinion aligns with my own. You're free to trash your own software any way you see fit.
For someone who couldn’t care less you sure care way too much mate. This is a forum 😂😂
Resolved; I removed all migration and connected my Connection string properly. Thanks Guys
I don't care about your opinion, I do care about you poisoning someone with drivel when they're clearly just trying to build a well factored application. It wouldn't surprise me if you turned out to be one of these people that some other douche convinced that abstracting EF out was the wrong thing to do. Just stick to answering the question and save the religious opinions for your blog.
Oh I see. When you can’t deal a technical argument, always swift to personal assumptions.
I already dealt the technical argument. You're not grasping it nor are you trying to. The OP does grasp it, so just stop.
also line 10 is not needed and merge 11 and 12 by directly return crypt.ComputeHash(Encoding.UTF8.GetBytes(randomString));
😂
Probably. That's definitely one of the questions I'll need to ask them.
You don't need SQL Server to learn Entity Framework, there are [official providers for multiple databases](https://docs.microsoft.com/en-us/ef/core/providers/) including sqlite, mysql and postgresql
I found this blog post really simple to use because I didn't want to use Identity Server 4. I think it's easier than running a token server and pretty straight forward https://jasonwatmore.com/post/2018/08/14/aspnet-core-21-jwt-authentication-tutorial-with-example-api
C# In Depth takes you from beginner to knowledgeable. Pro C# would also be considered this but I like Skeet's book much better. C# In a Nutshell is for reference, I would not read it cover to cover. Never read Players Guide.
https://docs.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke
I think you have most of the things in System.Drawing Add it from references-&gt;add reference-&gt;assembly Inherit override OnDraw or similar methods to draw custom images on screen
I second this. I use EF Core with MySQL on MacOS with VS code.
What's wrong with players guide?
&gt;But, can you really call yourself a back-end developer if you do not understand the principles underpinning these ready-made solutions and rebuild them yourself if needed? I think I mentioned that I used to develop programming languages. So not only did I write libraries (I've written object relational mappers, like 3 of them, persistance layers, serializers and deserializers, SOAP interfaces, interfaces to Google Maps, interfaces to MIDI, things that would auto-generate an AJAX user interface for your data model and functions, and a lot more. We developed a concept of programming called *magicality*. * Un-magical code was low-level code. It was fully readable, and you'd understand immediately what it does if you look at it, but it's very verbose and does nothing for you. Think of when a third party gives you a library that interfaces with their web services... there are functions for you, but you have to determine every one to use every time and give it all the information it needs every time. You can do all your work by directly calling un-magical code, but it's tedious. * Slightly magical code is built on top of un-magical code. It automates tasks for you, keeps important information so you don't have to keep specifying it, etc. However, when you look at what it does, if you know how the un-magical code works, it's obvious how it's doing what it does for you even without looking at the code. It's a lot easier to use slightly magical code than un-magical code, but it's highly comprehensible. Think of the API layer that you build that makes calls to the un-magical library that the third party provided to access their web services. You know what it's doing and how, it's just a lot easier to call your own functions than to call theirs every time. * Highly magical code is built on top of slightly magical code and is a black box. It automates tasks for you to a level that you make calls to it and it does things for you and you have no idea how it's doing it or precisely what it's up to, you just know that the results will be good. You probably can't guess what's under the surface without looking at the code, and good luck comprehending it if you do. Think of code that looks at your data structures and your functions and completely auto-generates an AJAX based web user interface for it all (that works on desktops, tablets, and phones) and instantiates a web server and opens the browser to view its generated interface with three lines of simple code. I had to write all 3 layers in most cases, so I really do understand the underpinnings of how languages work. I *still* think it's reasonable for a back end developer to use, for example, nHibernate, without knowing the details of how it works. They shouldn't have to. That's the whole point of them being able to use existing code. Yeah, I've written an object relational mapper in C#, and it's a hell of a lot faster than nHibernate or Entity Framework, but those two are a hell of a lot more magical and fine for most purposes. (I used my own only in odd cases where a lot of speed was needed, for example in the program that generated half a billion database records every day.) &gt;I am not saying that it is always sensible to craft your own libraries, but sometimes you have to, like that time when we had to develop this complex role-based security model that could not be replicated in AD. Actually I use Microsoft's security as an example, but in practice I've only implemented it in one project, where management demanded it for their own obscure reasons, none of the programmers thought it was a good idea, and when we implemented it, it failed it in exactly the way we had predicted, the AD users weren't able to do all the things they wanted to. That said, in the vast majority of my projects, in which I implemented home grown security, I've never found it difficult to implement effective security - although in some cases I inherited projects from previous programmers who left massive security holes in their work (which I fixed promptly), so I suppose the idea that security is hard is not unique. &gt;And, as a back-end developer you need to be well-versed enough in these concepts in order to be able to evaluate the available libraries or to interact with the people with specialist knowledge. For example, how do you explain a performance problem to the DBA if you cannot speak his language? It's their job to be able to ask me appropriate questions and comprehend the answers, and it's my job to be able to explain what I do in plain English. &gt;Vice-versa, you need to understand what the DBA is talking about in order to modify your code accordingly. It's their job to be able to explain what he needs and what he will do in plain English, and my job to be able ask appropriate questions and comprehend the answers. Not necessarily based on any understanding of what's going on on the database back end. As it happens, I used to be a DBA as well, but I find I don't need to use that skill to talk to someone when I'm working with someone competent. &gt;I understand that back-end is much easier nowadays than it used to be, but it is still more complex than front-end will ever be. Front-end problem domain is fairly constrained to the back-end front-end problem domain. That's spoken like somebody who has no idea of the complexity of all the interacting technologies of the front end or how often everything changes or how poorly documented it all is. Yeah, the interaction with the backend is often fairly painful, but is nothing compared to trying to get a bunch of competing frameworks to play nice with each other and meet the business requirements in ways the frameworks were never intended to do. &gt;Now, probably my last argument: I spent three weeks learning accounting concepts at the beginning of my current job in order to be able to understand the user requirements and to model the solution, and I am still learning the countless intricacies of media buying after seven years on the job, whilst trying to figure out the structure of the data dump from our software vendor in order to pull reports from it. Yeah, I used to have to understand the full global life cycle of brand security holograms from the order though the whole manufacturing process to shipping and delivery and usage and shipment back to the US to examination on the docks by a customs agent to sales in a store to a customer wanting to check the authenticity of their product. This involved serial numbers, supply chain tracking, and in some cases things like invisible ink and special lights and micro dots and electron microscopes. Depending on what it was we could have a customs agent standing on a dock whip out their cell phone, scan a barcode with the camera, and find out then and there if it's authentic, or it might have to be shipped back to our lab for extensive examination. It went so far as me analyzing the work steps and work spaces of the factory workers and redesigning their work process, where physically at their work spaces they did each step, and how the computers were installed. (They were sitting on tables. We put them on arms hanging from the ceiling, to save space. Their reaction was, "you can do that?") But we had to know all this in order to design software that did what they needed it to do, collected information that the factory workers actually had in a fast manner that they could cope with (I eventually replaced their Windows computers entirely with $45 Android touch tablets), and was usable in the middle of the manufacture process. This was a matter of making a usable front end and collecting the information needed for the back end, which would then process it in a dozen or so lines of code. I designed the database tables and wrote the backend code and the specs for the front end in half an hour. The front end developer took two months to build the interface. I brought my programming team into the factory for one day, and when we left the factory had whole new workflows and processes for its most problem areas (and written documentation about how to do it), because The Great Oz (well, the full stack developers) Had Spoken. &gt;The front-end developer? Do you want this in crimson red or firebrick red? OK-- I jest now... but if I have to give credits, the front-end framework developers deserve them all :-) If your front end developers' biggest worry is what shade of red you want, they have it easier than any front end developer I've met in the last 15 years.
Is version 8 already in use? Was writing some code a few days ago in Rider, and got a "C# 8.0 feature" code-inspection warning on something I was writing (can't remember exactly what it was now). Changing the version eliminated the compiler error. Wish I could remember what gave the message.
Sorry, I mean that as "I have never read Players Guide"
Ah haha gotcha. Thanks for the tips
I don't think it's been officially released yet
Ah, makes sense. Thanks. :)
&gt;half the advantage of a database - that it's cheap and easy to update it (right?) Easy to update? It takes quite a bit of work (at least from my experience) to transform a C# object to a database table. Or even designing the table in the first place. Where databases really come in handy is with search. "Search for entries that were created yesterday". "Search for my employees named John in Ohio". That's where databases are very handy. If you don't need to search for data, I'd opt for a simpler solution than a database.
Yeah, I think so. Parsing CSV correctly has nothing to do with learning the language. Reinventing the wheel over and over doesn't make you a better programmer, writing code that solves problems that are unique to your environment and haven't been solved before does.
I like it, especially if you're looking to get something spun up kind of quickly. It's a "good enough" solution in a lot of cases I've come across.
Just create a byte array of size 0 (new byte\[0\]), then use typed references to modify it's address to 2GB. Next, get address of object to store, calculate its position in byte array and pass it to stream using stream.Write(array, objectStart, objectLength). Stream will access the object via array. Something like [https://pastebin.com/TAMgN3d8](https://pastebin.com/TAMgN3d8) (it works on my machine, Windows Server 2012R2, VS 2015, compiled in Debug as Any CPU). &amp;#x200B; You actually don't need to use typed references at all, you can go with Marshal and GCHandles.
You'll be the pioneer in this space I think. I'd try to wrap an existing C or C++ library that can do this stuff for you, then release it as open source (unless you are trying to make a product to sell)
Not sure if this helps. I use this. https://lvcharts.net
You had great answers, but just to clarify one point: your approach is wrong. Do things in the right order instead of starting some, try to make them wait, then continue.
it'd be like learning to cook from a medieval cookbook. sure it'd work but we've improved since respect the time you're investing and use an up to date learning resource
C# text book from 2002 would have been C# 1.x -- not exactly helpful. At a very minimum, I'd start with C# 3.5 -- That's the core of the language right there. (imho)
it'd be like learning to cook from a medieval cookbook. sure it'd work* but we've improved since respect the time you're investing and use an up to date learning resource &amp;nbsp; \* assuming it's a book strictly about C# (probably not). .NET, all the libs, frameworks and tooling have changed immensely
Sigh. If you are advertising Jaspersoft at least capitalise the name.
I'm working my way through the monolithic C# 5.0 Unleashed. Published a decade later than the OP book, but seems to fill in a lot of the middle ground that I need to better understand before taking on Skeet's C# In Depth.
Posted 2 questions in this sub literally in the past week, I have the exact same feeling
I would truly appreciate your help .. and to answer your question I am no making a product to sell. I am just working on an application concept that needs this specific feature!
Im just a hobbyist image manipulator and basically use https://github.com/dlemstra/Magick.NET fro all my needs
**Warning: terrible idea incoming.** You could use some combination of html, css and/or your choice of front end framework to draw render the graphs on a web page, then use [something](https://github.com/kblok/puppeteer-sharp) to navigate to that page and save the page to pdf. You could also inline a browser to show that page in your app. *Please* don't actually do this. (And yes, this idea is quite close to something I'm actually using in a project in production, except that I'm retrofitting an email newsletter system into a project that already has all of the graphs and tables to be included in the newsletters being displayed on various pages of a website, so this was the most cost effective solution. It actually works really well, even if I would never greenfield it this way.)
I'd only take books published past 2010 for C# and .NET related things tbh. Many things have been abstracted to be way easier than in the past. Writing/Reading Files for instance is a shit ton easier nowadays than like a decade ago, all due to .NET Framework improvements
To supplement the other excellent answer by neoKushan: In languages with inheritance, that is an "IS-A" relationship. It means the derived class can be considered "the same thing" as the base class and is in fact a more specialized case. Interfaces are more subtle, it's like a "CAN-DO" relationship. *Head First Design Patterns* had a really good analogy for this. Imagine trying to write a zoo simulator with the requirement to make "every flying animal" fly. So you make Animal, then you make Bird derive from it, and you give Bird a `Fly()`, and all is good. Then you implement an Ostrich. They can't fly. They shouldn't fly. What do you do? If you throw an exception, then the code that makes "all birds fly" has to know that exception might be thrown. That's really an LSP violation. You could add a `CanFly` property, but again, if not all birds can fly why is the base class defining that behavior? So you work around it, then you find out the FlyingFish aren't flying. What the hay? They aren't a Bird, and can't be because they already derive from Fish. Then you notice Penguin. Ready to quit yet? This isn't a "multiple inheritance problem" because there's not a good reason to say a Penguin is a Fish just because it wants to have `Swim()` behavior. The things that define Birds are feathers, a beak, laying eggs, etc. Flying is just a thing that *some* birds can do, and most birds can do something other birds can't. Inheritance has absolutely no way to cover this scenario! But interfaces do. You can define an interface ICanFly and say that some birds, some fish, and a handful of other creatures implement it. Then, given a list of every Animal in the zoo, you can filter to the ones that implement ICanFly. So you use abstract classes for "everything that derives from this is exactly like me and has zero additional capabilities." You use interfaces for "I have this, and possibly other, capabilities." And, ideally, you share implementation for those capabilities with composition.
A database is really just a way to store your data or state. Could use the file system for smaller applications and that is just fine. A database if it’s remote helps you share data between clients, so even if a single person logs in at home and work you can store the settings to make the user experience the same. A database also allows you to store a single set of data to be used amongst all clients. If stored remotely a database can ensure each client uses the same data set. A local database can store multiple versions of state, so if a user edits things 3 times and now wants to go back you could allow that depending on your database. Local databases are typically more stored as files in the OS, usually JSON or XML. If your data needs to be shared between 2 or more clients, then you need to setup a database server to allow this. If your data store is only needed locally then it can reside in the client.
I'd say RNGCryptoServiceProvider
What are you using for your IDE? Visual studio lets you do this, as well as Rider (so) I believe
Do you have any experience in setting up auth layer?
Best is get the basics then use it. Build yourself something, doesn’t need to be complex but it will teach you far more than books and reinforces what you have learned.
&gt; This is an unpopular opinion on this sub and in the .NET community in general but yeah, I 100% agree with you; I don't care for Identity. It isn't limited to r/csharp or .NET People are scared of everything security related (except xss on their pages :D)
I'd probably remove the csv reader constructor and move the code into readfile. Performing long tasks in constructors is generally a bad idea and stops you using async. You could also pass in a stream instead of a path to make it more flexible. Conversely i find the requirement to call initialize on the line bad, it can lead to bugs. Better to make a function that takes a string and returns a person.
C# has no version 3.5. It never existed. You may be thinking of the .net framework. https://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Versions
&gt;Imagine trying to write a zoo simulator with the requirement to make "every flying animal" fly. So you make Animal, then you make Bird derive from it, and you give Bird a Fly(), and all is good. You can just make Animal, have Bird derive from it, have Eagle derive from it, and have Eagle also derive from the abstract class CanFly. Then Penguin inherits from Bird and also from the abstract class CanSwim. &gt;This isn't a "multiple inheritance problem" No, but it is a problem which can be solved by multiple inheritance and abstract classes, as well as being a problem which can be solved with interfaces. So for a language like C#, or a language like C++, it isn't a problem at all. &gt;So you use abstract classes for "everything that derives from this is exactly like me and has zero additional capabilities If you are using a singular inheritance language, yes, if you are using a multiple inheritance language, you can have an abstract or concrete parent class as well as additional abstract classes acting as interfaces.
Azure will give you $150 of free credit to use within 30 days, after that you can either upgrade to pay-as-you-go or continue to use any free services. The FAQ should explain everything you need to know [https://azure.microsoft.com/en-gb/free/free-account-faq/](https://azure.microsoft.com/en-gb/free/free-account-faq/)
&gt; Front-end problem domain is fairly constrained to the back-end front-end problem domain. I mistyped this and edited the comment. I meant to say "compared to the back-end problem domain". After all, however complex front-end development is, it is still constrained to the domain of software/user interaction, and the solution is always a variation of the same themes of HID, but the problem domain on the back-end is potentially as vast as the industry for which it is being built, and I am not even getting into the various non-functional and compliance requirements that back-end needs to satisfy to a greater degree than front-end. (I still mention this, even I get it that you think this is another person's problem, which I respectfully disagree with.) But-- We have reached this point in the discussion where we are arguing with our personal experiences and achievements (and I am guilty of doing this in my previous comment), so I think it is time to agree to disagree :-) It's pretty clear that we both have extensive experiences in front-end and back-end development but disagree on which is more complex. Perhaps this is a consequence of what our users value most. In my experience, the back-end has always been more critical to them ("the system must report correct figures, and we don't care if they are carved on clay tablets"), whereas in your case the front-end might have been more important -- it's difficult to tell \*shrug\*. That would certainly explain the differences in opinion.
There are absolutely systems that use the database solely for durability - the ability to kill the process and be able to recover back to the same state. However this should be considered a rare case. The key use case for such an approach is generally that the primary measure of success is minimising latency. Once you start considering virtualisation, there's no such thing as 'small enough to fit in memory' since you can always reduce the memory needed for your application and the key resources in virtualisation are CPU and Memory since the less you use, the more VMs you can host (or the less you pay in the datacentre). However your data-size is practically toy-project (whether it serves a valuable service or not, the _size_ is pretty trivial in todays terms). You could indeed use the DB solely for writes and manage all reads from in-memory data-structures. That said, your writes should go to the database immediately and the fact that the data is cached should be abstracted away so that it's not a rewrite to begin reading from the database instead.
I do a lot of this. Two ideas that come to mind are Telerik Reporting and ABCPDF. Telerik has the whole reporting system that makes beautiful reports and is reasonably priced. Everything exports to PDF perfectly. They also have a Report Server that can schedule reports to be created if that is needed. ABCPDF is a simple and fast engine to create PDF files on the fly. This would be the way to go if you want to draw your own graphs/charts. Very reasonably priced and works perfectly. I've been using both for years.
try looking at the C# wrapper for the FTDI2xx.dll [https://www.ftdichip.com/Support/SoftwareExamples/CodeExamples/CSharp.htm](https://www.ftdichip.com/Support/SoftwareExamples/CodeExamples/CSharp.htm) &amp;#x200B; most chips actually contain a small EEPROM that you can read/write data to using **FT\_PROG** ( [https://www.ftdichip.com/Support/Utilities.htm](https://www.ftdichip.com/Support/Utilities.htm)) and you can access this data using C#. &amp;#x200B; In an application I had to deal with having 5 different serial ports connected and there was a chance that the actual COM port number would change between attaching and re-attaching, but what I did was use the EEPROM to write an identifier to each e.g. DEV1, DEV2, DEV3, etc and used the FTDI wrapper to enumerate all connected FTDI devices and find the devices I was looking for.
Yea and he can still use SQL Server developer/express editions. No cost.
if it is about design pattern or general principles, probably it is worthy reading. If it is about particular language or technology, it could be way too out of date.
I know about it but it can't access image collection in a HEIC 😅
really dumb idea and you probably thought of this, but can you split out the video into images like JPG, then somehow merge them back into a HEIC as a image collection? the "image collection" is video right? keep in mind i dont know what HEIC is other than a glance at wikipedia
Use `decimal`, not `double` or `float`, for monetary values.
According to my experience, it’s hard to be a pro by just mastering a language. The practical work probably doesn’t require you to know every detail of c#(let’s say you are a .net developer). There are too many things in development cycle to be learned. Like a good design pattern, how to write good test, etc.
Have you seen this powershell converter: [https://github.com/DavidAnson/ConvertTo-Jpeg/blob/master/ConvertTo-Jpeg.ps1](https://github.com/DavidAnson/ConvertTo-Jpeg/blob/master/ConvertTo-Jpeg.ps1) \- There's a note at the bottom about HEIC/HEIF format and Win10 &amp;#x200B; Hopefully it's straightforward to port to C# (or &lt;gasp&gt; invoke the powershell from your code)?
I don't think this is a bad idea. I've done this myself with good success. Define everything in html, then html to pdf using 'wkhtmltopdf'.
Oh jeez I totally forgot about the onboard EEPROM (kinda) I originally thought about how wonderful it'd be to be able to rewrite the serial number on the EEPROM, but when I tried FT_PROG it couldn't detect the FT260 as a valid device with a programmable EEPROM. So I tried to use I2C to directly interface with the EEPROM, but couldn't figure out the addresses for the serial number data. It didn't even cross my mind to use FTDI2xx.dll, I'll give that a shot this upcoming Monday, thanks!
I believe you may be thinking of breakpoints in a debugger, and OP is referring to a runtime behavior.
long talk but interesting stuff. made a more involved comment over at r/dotnet
Exactly my thoughts. Old books on very specific technologies become irrelevant quickly. It it was design patterns, algorithms, etc etc it would more than likely still be ok.
I have been there too. It only decodes the first image and not the collection unfortunately
I agree that interfaces are insanely useful, but saying they are almost required for abstraction is a little dogmatic and misleading. They do make it easy and clean, and being idiomatic for C#, they are one of the more elegant and versatile tools; however, there are plenty of strategies for abstraction that do not require interfaces. In your own example, the processing class could accept a delegate that polls for data. Just like that, it works even if the target has not implemented an interface. I am not saying that is a better approach or that anyone should eschew interfaces for other strategies--only that we should not pretend there are no other viable strategies. There is something to learn from each of them, and interfaces are not always the best fit.
i mean there are a couple ways. don't thread.sleep await task.delay(5000) &amp;#x200B; also only do it on combo box LEAVE &amp;#x200B; you can have it set two bools and when leaving the comboboxs change the bools then when the both bools are false or true execute the code
This isn't 2005. There's a myriad of reasons why you wouldn't want to use Identity for a project: &amp;#x200B; \- You need to implement a bunch of shit anyway because you need Google/Facebook/Slack OAuth support. \- You have to implement a bunch of shit anyway because you need two factor authentication, which might need to happen over email, text messages, or both. \- You have to implement a bunch of shit anyway because you need to encrypt more than just passwords. \- Your configuration files are loaded at runtime because you run a swarm of containers and that shit is stored in s3. \- You might need stateless sessions for microservices. \- Your web server is a JSON API, and thus needs stateless sessions. \- You want stateless sessions anyway, because sessions suck. \- Did I mention stateless sessions? &amp;#x200B; I mean, sure. Identity is better than no security. But there's far more to authentication than whatever microsoft has out of the box, and having to work around a system you have little control over fucking sucks. And all for what, cookies and sessions? Who uses that stuff anyway when you're building a scalable infrastructure? &amp;#x200B; If you use identity, you are bound to run into problems later on. Authentication is simply too integral to your application, your systems, and infrastructure that you *must* have complete control over it on any reasonably sized project.
? There is already cache objects in the framework. If you want them to update just add code to drop them into the cache.
Everything is possible. Can just do a reader to pick out number of bytes or lines, or read till a regular expression etc.
Depends too much on your project. Is it WPF? Is it MVVM? Is it ASP with MVC etc...
This. By using UDP you are in a sandbox, it does not let you write wherever you like. Ways around that ie: manifest file if you really need admin, but depending on your users a large amount will say no to the prompt.
Yes absolutely, that would be ideal if there was a library for converting to PDF.
Same. This works really well, especially if you are multi-tenant.
All a task does is move something to a separate thread. By default from your threadpool. Normally you have your UI accept input then you offload that to another thread to deal with it. Why? Because if you don’t your UI will hang and the user will be unable to use your app while your process is running. So you run it on another thread and that way the UI is snappy and doesn’t pause due to your background process like writing to a database etc.
Just an attribute. Looks like a custom one someone in your organization created.
I see this as two separate problems: 1) You need a graphic library to draw 2) You need library to convert to pdf I suggest two propriety library [Graphic Mill](https://www.graphicsmill.com/) (for drawing) and [Aspose Pdf](https://products.aspose.com/pdf) to convert to pdf
Wow that looks really good. Thanks!
I work all the time, but I can answer questions and bounce on discord to help
All async/await is, is a short form syntax. Let’s you easily make a new thread and have it return a result. If you Task.Run, you can await it. (Wait till it is done) The execution of the stuff in the Task.Run will happen on another thread. If you call it from your UI your UI will continue to work while the task is running. When the task is done it will continue from your await statement. So it will return whatever, or not if there is no return value, but it will happen in the current threads synchronization context. So in easy to understand terms when it’s done it will return back like nothing happened and your code will work like normal. Just like calling a function, except that function is on another thread.
OR is the same as C++. So | or || depending on your use case.
Mahapps.metro is a nice one and very customizable.