First of all... what is 'zauzet'? Second, if you're changing a field from multiple threads without locking you'll have unpredictable results (I can't tell if you're doing this because of the 'zauzet' conditional). If you wanted to alter the field safely you could use Interlocked.Increment and Decrement which will update the value in an atomic operation. Without doing that, reading the value and then writing the new value is two operations and another thread could change it after the read and before the write. I can't add too much more without understanding the code and intent better. I will say that while this maybe valuable for learning, using async/task patterns will almost certainly make you and your code more efficient.
meh, reddit has crappy formatting, but you get the idea
thanks! 
out also requires you set the variable before returning.
Not sure where your error is coming from, but this should almost never result in Clas1.x being 0. Here is an example: 1. Thread A calls Monitor.TryEnter(Clas1.xx, ref acquired); 2. Thread A is given the lock, so acquired is true. 3. Thread A suspends and Thread B starts to execute. 4. Thread B calls Monitor.TryEnter(Clas1.xx, ref acquired); but is not given the lock. 5. Thread B (assuming 'zauzet' means 'acquired') checks 'if (acquired)' or 'if (zauzet)' which is false, then increments i. 6. Repeat step 5, 50 times total, then let Thread B go to sleep. 7. Thread A wakes up, checks if (acquired), which is true, then checks if (Thread.CurrentThread.Name.Equals("A")), which is true, and runs Clas1.x++; 8. Thread A runs all the way until i = 1000, so Clas1.x++ has been called 1000 times and Clas1.x equals 1000. 9. Thread A exits, and thread B wakes up. 10. Thread B is at i = 51. It runs Monitor.TryEnter and succeeds with acquired = true, checks if (Thread.CurrentThread.Name.Equals("A")), which is false, then runs Clas1.x--; 11. Thread B runs for the remaining 950 loop iterations, and gets the monitor acquire every time (since Thread A is done and exited) so it calls Clas1.x--; 950 times. 12. The result is that Clas1.x++ was called 1000 times, and Clas1.x-- was called 950 times, so Clas1.x will equal 50 when this ends, in my example. This could happen in almost any way though, so the number could be anywhere between -1000 or 1000.
I found this example by [Mark Michaelis](http://intellitect.com/the-cil-of-c-6-0s-string-interpolation/) string.Format($"DeleteFile("*.*")", firstName, lastName) But he explains quite well why this is not possible. &gt; String interpolation is transformed at compile time to invoke an equivalent string.Format call. This leaves in place support for localization as before (though still with composite format strings) and doesn’t introduce any post compile injection of code via strings. **TL;DR:** pure sugar, not post compile injection
You didn't just change the "class names", you changed the **types**. That's an elementary change. Before it was working on value types, now it's working on reference types. This is something completely different.
That is indeed the C# team's opinion, the keyword was changed to `when` in [this commit](https://github.com/dotnet/roslyn/commit/1ff04c56aa64e489447d292614e43422225156f1).
Exactly! :D I had translated all variables into English, before I posted this here, because I know that it is easier for others to understand the code when it is in English. 
David Fowler is often available on Jabbr. Ask him.
Thank you so so much. If I had gold, you would be golden. **Edit** The key thing with monitor in this case is that bool value **MUST** be false at the moment of invokation of TryEnter or Enter methods. For something which is very important this hasn't been emphasized enought around the internet, blogs and tutorials about this topic.
Well, the way you would do it in C# is by using Response.Redirect() to redirect the browser.
There is no "C# way" for this. It depends on the framework that's being used.
No one knows what the SDK will do for you in terms of mathematics. Brush up on basic trig and matrix transformations, a la game dev. Can't imagine them making it much harder than that.
Way more likely it will be even easier than that. Microsoft loves their devs.
My rule is, if it's unmanaged, keep it unmanaged until you cannot anymore. C# is designed to work best with managed code, despite allowing you to do unsafe code. I've seen a lot of code that tries to do manipulations to unmanaged objects inside of it... especially when it tries to directly call Windows API using DLLImports. My opinion? Don't. It's already bad enough trying to get all that stuff to play nicely in C/C++ and now you are adding more things that can go wrong. Wrap your memory management, native calls, etc. in C/C++ object and expose the appropriate objects/functions that play nicely with C#. Calling native code should not be on the native code's terms (as in, if I am calling things like IntPtr, or stuff out of Marshal, it shouldn't be like that), it should be on C#'s. So wrap your native code in such a way that C# can't break anything, cause a memory leak, etc. yet can still make good use of it.
There will very likely be a 3d subset as well with either a imperative or declerative API. It may even just be Direct3D with a special swap chain. In every case linear algebra, vector algebra and quaternions will be important since it's 3d.
yup. If it's your application - check out: System.Windows.Forms.Screen.AllScreens **Edit**: There's also a **Screen.PrimaryScreen**, if you need. Which will allow you to see things like resolution (width/height). You can then just set the position of your app wherever you need. If you're writing an application which needs to alter another application's location, I'm not aware of a currently-existing wrapper (there's probably one in Nuget somewhere) in the .net framework, but you can make one with win32 interop. You'll need to find the window and resize/move it. http://www.pinvoke.net/default.aspx/user32.movewindow
If you are using NET 4.0 or newer, just: @{ Response.RedirectPermanent("http://reddit.placeholder.com");} If you have only "plain" html pages, you won't be able todo 301, but you can forward user with javascript window.location=url or a simple meta: &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="refresh" content="0; url=http://reddit.placeholder.com/"&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;
You probably also want to look at http://en.wikipedia.org/wiki/SQL_Server_Compact (SQL CE), because with that you would have a very easy upgrade path to a full MS SQL should you ever need it
since i just copied the one function to the comment, im using class/data type interchangeably. assuming he would have his own classes there. but that still doesn't explain how what i copied was different than the msdn example, which is what you were saying originally.
If all you want is a thread safe way to increment/decrement a counter there are functions built just for this purpose, look at the Interlocked Class. https://msdn.microsoft.com/en-us/library/system.threading.interlocked%28v=vs.110%29.aspx
Learn the fucking difference between value and reference types. I said it already.
Well, he's probably using one of the C# frameworks? ASP.NET Web Forms, ASP.NET MVC, ASP.NET WebAPI, NancyFX, raw sockets, or one of the others? What is the "C# way"?
Yeah. And then I leave it on screen 2... and next time I start it, I don't have the second monitor attached and the program is fucking off the screen. Happened plenty of times because of such crappy advices. Let the window manager take care of the position and size.
Probably some experience in [computer vision](https://en.wikipedia.org/wiki/Computer_vision) would be good. Have a go at doing some basic things like facial recognition using OpenCV.NET (a wrapper around the very popular OpenCV library) or AForge.NET
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Computer vision**](https://en.wikipedia.org/wiki/Computer%20vision): [](#sfw) --- &gt;__Computer vision__ is a field that includes methods for acquiring, [processing](https://en.wikipedia.org/wiki/Digital_image_processing), analyzing, and understanding images and, in general, high-dimensional data from the real world in order to produce numerical or symbolic information, *e.g.*, in the forms of decisions. A theme in the development of this field has been to duplicate the abilities of human vision by electronically perceiving and understanding an image. This image understanding can be seen as the disentangling of symbolic information from image data using models constructed with the aid of geometry, physics, statistics, and learning theory. Computer vision has also been described as the enterprise of automating and integrating a wide range of processes and representations for vision perception. &gt; --- ^Interesting: [^List ^of ^computer ^vision ^topics](https://en.wikipedia.org/wiki/List_of_computer_vision_topics) ^| [^VXL](https://en.wikipedia.org/wiki/VXL) ^| [^Computer ^vision ^syndrome](https://en.wikipedia.org/wiki/Computer_vision_syndrome) ^| [^Cuboid ^\(computer ^vision)](https://en.wikipedia.org/wiki/Cuboid_\(computer_vision\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cokni58) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cokni58)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
"C# way" - you coined it, you tell me? .. a way of performing the redirect using C#, I presume? Since he is asking to "redirect one subpage to another domain", it doesn't sound like Web Api. Probably not Nancy either, as op seems new to this stuff. Forms/Mvc? He should be able to perform a Response.Redirect (or better Response.RedirectPermanent for 301) to handle it. Whether the call is made from inline call using razor in the markup or a controller doesn't matter that much.
When performance is not the main priority I always love to use Linq. I would define a generic class that contains three members. Your generic object, the priority a and the priority b. Then you make a list of this class and get the elements with the highest priority a or b via Linq. I could post a quick and dirty solution, but i don't want to spoil to much if you want to figure it our yourself.
I'd start with some simple brute forcing. Definitely I would combine the triad of `Item`, `PriorityA`, and `PriorityB` together into a single class. Then start by wrapping a very basic collection with poor performance. Build out the public API and make some very basic unit tests (and probably a test that checks performance). So, with that in mind, here's a very basic, very brute force approach. Basically just wraps a `List&lt;PrioritizedItem&lt;T&gt;&gt;` and whenever you dequeue, it does a quick ordering, finds the highest priority, then removes that item and returns it. public class PriorityQueue&lt;T&gt; { private List&lt;PrioritizedItem&lt;T&gt;&gt; Items = new List&lt;PrioritizedItem&lt;T&gt;&gt;(); public void Enqueue(T item, double priorityA, double priorityB) { Items.Add(new PrioritizedItem&lt;T&gt;(item, priorityA, priorityB)); } public T DequeueA() { var prioritizedItem = Items.OrderByDescending(i =&gt; i.PriorityA).First(); Items.Remove(prioritizedItem); return prioritizedItem.Item; } public T DequeueB() { var prioritizedItem = Items.OrderByDescending(i =&gt; i.PriorityB).First(); Items.Remove(prioritizedItem); return prioritizedItem.Item; } } internal class PrioritizedItem&lt;T&gt; { public T Item { get; private set; } public double PriorityA { get; private set; } public double PriorityB { get; private set; } public PrioritizedItem(T item, double priorityA, double priorityB) { this.Item = item; this.PriorityA = priorityA; this.PriorityB = priorityB; } } Some basic usage code: var priorityQueue = new PriorityQueue&lt;string&gt;(); priorityQueue.Enqueue("asdf", 10, 2); priorityQueue.Enqueue("qwerty", 1, 5); Console.WriteLine(priorityQueue.DequeueB()); //outputs "qwerty" From here you can implement the `Count` and `Clear` methods easily. Once you have the basic tests, you can then start dinking around with the underlying `List&lt;PrioritizedItem&lt;T&gt;&gt; Items` collection with various pre-sorted collections to try and optimize performance. Hopefully this will give you a starting point. EDIT: Then of course, you can attempt the extension. This being C#, you can also remove the hard-coded `double` values for priority and instead use some kind of `IComparable` interface instead. Then you can use other types to dictate priority.
[SortedDictionary](https://msdn.microsoft.com/en-us/library/f7fta44c%28v=vs.110%29.aspx) might help.
Yeah thats almost word by word the solution I have, but I think the learining effect for OP would have been bigger if you don't just post an almost complete solution.
This is great, I never thought of doing it this way(ish). I tried this but it really didn't work namespace PriorityQueue { internal class PriorityQueue&lt;T1, T2, T3&gt; { private int _size; private List&lt;Tuple&lt;T1, T2 ,T3&gt;&gt; _list; public PriorityQueue() { } public void Enqueue(T1 name, T2 value1, T3 value2) { var tmp = new Tuple&lt;T1, T2, T3&gt;(name, value1, value2); _list.Add(tmp); } public void PrintAll() { foreach (var item in _list) { Console.WriteLine(item); } } } }
Your two examples aren't the same. the JSON would look more like this: { "items": [ { "orange" : { "size": 10 }, }, { "banana" : { "length": 25 }, }, { "grape" : { "count": 15 }, }, ] }
Thanks! Okay ill get to work and edit when it's done it works !# using System; using System.Collections.Generic; using System.Linq; namespace PriorityQueue { internal class PriorityQueue&lt;T&gt; { private List&lt;Tuple&lt;T, double, double&gt;&gt; _list = new List&lt;Tuple&lt;T, double, double&gt;&gt;(); public void Enqueue(T name, double priorityA, double priorityB) { var tmp = new Tuple&lt;T, double, double&gt;(name, priorityA, priorityB); _list.Add(tmp); } public Double DequeueA() { try { var prioritizedItem = _list.OrderByDescending(i =&gt; i.Item2).First(); _list.Remove(prioritizedItem); return prioritizedItem.Item2; } catch (InvalidOperationException) { Console.WriteLine("No elements to Dequeue"); return 0; } } public Double DequeueB() { try { var prioritizedItem = _list.OrderByDescending(i =&gt; i.Item3).First(); _list.Remove(prioritizedItem); return prioritizedItem.Item2; } catch (InvalidOperationException) { Console.WriteLine("No elements to Dequeue"); return 0; } } public int Count(bool printToScreen = false) { if (_list.Count &lt; 1) { Console.WriteLine("Your list is empty"); return 0; } if (!printToScreen) return _list.Count; foreach (var item in _list) { Console.WriteLine(item); } return _list.Count; } public void Clear() { _list.Clear(); } } } EDIT: thank you guys, turns out it was easier than I though. I'm going to write some unit tests for performance and... testing.
Here's my solution: public class DualPriorityQueue&lt;TEntry&gt; { private readonly List&lt;Item&lt;TEntry&gt;&gt; _queuedItems = new List&lt;Item&lt;TEntry&gt;&gt;(); public int Count { get { return _queuedItems.Count; } } public void Clear() { _queuedItems.Clear(); } public void Enqueue(TEntry item, double priorityA, double priorityB) { _queuedItems.Add(new Item&lt;TEntry&gt;(item, priorityA, priorityB)); } public TEntry DequeueA() { return RemoveFirstItem(_queuedItems.OrderByDescending(i =&gt; i.PriorityA)); } public TEntry DequeueB() { return RemoveFirstItem(_queuedItems.OrderByDescending(i =&gt; i.PriorityB)); } public TEntry DequeueFirst() { return RemoveFirstItem(_queuedItems); } private TEntry RemoveFirstItem(IEnumerable&lt;Item&lt;TEntry&gt;&gt; items) { var item = items.FirstOrDefault(); if (item == null) { return default(TEntry); } _queuedItems.Remove(item); return item.Value; } private class Item&lt;TValue&gt; { public readonly TValue Value; public readonly double PriorityA; public readonly double PriorityB; public Item(TValue value, double priorityA, double priorityB) { Value = value; PriorityA = priorityA; PriorityB = priorityB; } } }
You can do it with three generic parameters if you want to extend yourself a bit; here's a hint: two of the parameters will need a type constraint.
Linq applies to more than databases.
As a side note, according to the BCL library on codeplex where LongPathDirectory is held, it uses the Microsoft Public License which would allow for them to use the source code as long as they include the copyright in their project. http://bcl.codeplex.com/
&gt; So it seems like the Hololens can run normal universal apps as well? &gt; They announced already that Universal Apps will run on the HoloLens.
It can be very deceptive. Like most powerful tools it offers a lot but to get there it also does a lot. If you don't pay attention you can start performing a lot of expensive operations quickly. 
I'm sorry, but this is very poor quality. Take question 2. The answer is clearly wrong. In the code he's creating the instance using two different constructors. The answer is *a*, but in *a* only one constructor is declared. Correct would be *c*, but there the two assignments are absolutely obsolete. And I love the `Explanation: None.` The explanation on question 5 is plainly wrong. The explanation on question 6 is very poor and misleading. In question 7 he suddenly uses `C#.NET`. The explanation on question 7 is very poor, incomplete and misleading. The question 10 is dumb, because - by definition - constructors are no methods. Overall I'd say that guy is a beginner who should not write stuff like this. 
Just left a similar comment about #2 on the site before seeing this comment here. I stopped reading after #2.
Thank you for your reply! IDA Pro is fairly frightening too, heh. I have come to terms with the fact that people will hack/crack any product I come up with, but for some reason the idea that someone can just grab the source code and essentially branch it seems so much more threatening to my livelihood. Is this just as easy in C++ as it is in C#?
You have a good lawyer who writes you a good template contract to use for your sales. And if someone breaks the contract, you take them to court. Much like any other business. 
Reverse engineering and decompilation in any language is a reality. If you wrote it in C or C++, it is just as common there too. I'd say even more common because they have been around longer. In the case of reverse engineering and decompilation, there is basically no difference to the underlying machine code. Your C# compiles to IL (MSIL/CIL), and then to native machine code. C/C++ compiles straight to native machine code. Either way, it really doesn't matter because both are equally as vulnerable to decompilation.
Ah I see. What you say makes a lot of sense, thank you.
I've done a bit of reverse engineering myself, which is why I think I'm so concerned about what can potentially be gleaned from a C# executable. Perhaps it is my unfamiliarity with C++ vs C# that has led me to believe than C++ applications are harder to reverse engineer than C# applications?
Do you play video games? Are you happy about anti-piracy mechanisms? Nothing else you're asking for here. In general the advice is to: Don't bother. If someone wants to crack your application, then **they will**. Spending time to prevent this is fruitless time. Instead you should focus on making your application worth being bought.
Well, I think I should have phrased things differently. I do play video games, and I'm not concerned about people cracking or stealing the product I am *delivering*. My concern is in theft of source code. If I develop something that can be seen as a trade secret (for lack of a better term) but unpatentable, what is preventing someone else from simply chucking the C# executable into Reflector and stealing that information? The answer is nothing. But it seems to me than preventing that is much more difficult in C# than it is in some other languages.
Your fear resembles the famous principle: &gt; Premature optimization is the root of all evil Perhaps your product will be a flop - then all work to make your binaries as obscure as possible would have been wasted time and effort! Choose the language and the frameworks by usability, benefit and productivity, not by a fear 😉
Thank you, that makes a great deal of sense. Can I hire you to stand over my shoulder while I work and occasionally repeat this to me?
Hehe... just make a poster of this and pin it upon your workplace 😂 To be serious again: As others allready said, if a "secret" algorithm is the key to your business, you can think of making the core of your solution a webapp and just provide a thin client as frontend. Lots of business applications are driven that way nowadays... I would almost always choose the language by my capabilities or my curiosity to learn that language. It does not hep much, if you are less productive within a chosen language or that does not offer good frameworks for your needs (SOAP with C++ anybody? 😈). Thus it will never ever use such a relict as C++! Unit tests without reflection **suck so much**! I would strive for a language that is driven **either by the JVM or the CLR**. Then you are not stuck within the chosen language forever and you could change the language later on with less pain. If you need to develop close to the system level I would give Rust a chance nowadays - imho the next C 😀
Prezi is .NET-based? Did not know that. Try contacting Paul Betts (https://twitter.com/paulcbetts). He worked on GitHub's Windows client (WPF-based) and is also the creator of ReactiveUI (a MVVM framework with Rx) and Squirrel (auto-update framework). GitHub itself may also be a good option. If not, try some of the user groups in the Bay area: https://twitter.com/baynetug Edit: Also try contacting a rep from [BizSpark](http://www.microsoft.com/bizspark/default.aspx). I am sure they can put you in touch some of the startups in the BizSpark program.
What is your concern? Your doomsday scenario? Code is inherently copyrighted. If somebody reverse engineers your code and then tries to release a largely identical commercial product then not only would it be mind numbingly obvious, it'd also be illegal.
That makes sense. My doomsday scenario is being homeless and unable to feed myself because the business responsible for my livelihood goes belly up. But I am starting to realize that my fears are unwarranted. :)
I think I will actually. Thank you for your input it has been very helpful.
With C#, you can use obfuscating tools like dotfuscator as an easy way of adding difficulty to anyone wanting to reverse your product. The reality is anyone with enough determination can make any code on their machine do what they want. Don't worry about people stealing your product as a barrier to having a successful business. Every piece of software out there is vulnerable to this, yet there are plenty of successful software businesses. Just focus being on the best in your niche.
Ah, like a personal attack on your character as a developer. That I get. That is a little rougher, I would probably not take my advice on how to diffuse personal conflict on the internet. Though I would probably review and if necessary quote and admit the commonalities. There are very frequent examples of people independantly coming to the same conclusions of how to accomplish a given programming task. Especially with code standardization being what it is code can be independantly derived and often look quite similar. Even if you had taken some core concepts from an open source project, I am sure any reimplimentation would not be an issue of licensing Building on top of ideas and expanding on them is how our industry and body of knowledge grow and support all of us.
Why is not nice? Does it become messy? What's the best way to do it if I want to have multiple methods return multiple values at once? A class?
They can, and they can't. I would compare this to worrying about how pick-proof the knob lock on your front door is when the door is made of glass. People could just copy your binary. That's illegal. They could also decompile your binary and steal the code. That's also illegal (to the extent that you can prove it). If you're making a software package, continuing support, like bug fixes, documentation, training, and general customer support are the actual product/value that you deliver, all of which contribute to your "brand", which is where the real value is. Stolen code, or even better code, is going to have to compete on those merits. Basically, anything you make that can be easily stolen and reproduced without the customer experiencing any tangible change in value isn't really that valuable. EDIT: Conversely, I've worked on several projects that were very successful, but I wouldn't steal the code with my worst enemies decompiler. All the code does is describe a workflow that is meaningful to the end user. Understanding that end-user's problem domain, and solving it for them, is what matters. Not how elegantly you do so. EDIT2: Also, sales and marketing. They're far more important than the most expertly implemented algorithm.
Probably not. The attacker does not even need to decompile the code to understand it, only to disassemble it. The added benefit of the managed language is greater then the "extra layer of security" native languages have.
I would bet my drawers there are several .Net meetup groups in the bay area. http://www.meetup.com Or Linkedin, etc. 
I did not know that about the AOT compilation! That's pretty awesome.
I'm surprised no one has mentioned using NGen.exe. This is used by some big names during the install processes, if you've ever noticed a Please wait while we optimize the code steps, it's doing exactly this. NGen will take your MISL code and convert it to native binaries. All the de compilers rely on having access to the raw MISL code and would be unable to decompile NGened assemblies. This also has an added benefit of speeding up the applications start uptime and possibly a few other areas within your app as well. 
Rad. I wonder what happens if, in that example, Log() throws an exception.
Wow, I had no idea. I'll definitely look more into NGen, thank you.
C# is compiled into some kind of intermediate code (comparable to assembly). The "common language runtime" (CLR) reads this intermediate code and turns it into machine instructions. When you write a program and let people download it, you're basically sharing that intermediate code that can be executed by the CLR. You could say this intermediate code is "simple" or at least easier than straight assembly instructions. It's also quite easy to turn this intermediate code back to straight C#. With C++, you get nearly straight machine code as a result, which is also what you're sharing with others. Machine code can be considerably harder to understand, but experienced people can still make good sense out of it, although it takes time and effort. Converting code back to C++ is nearly impossible, at most you could turn small sections back to C or C++ code, although the compilation process removed all the naming (like variable and function names), so it's like a standard obfuscator. So no, it's not as easy as in C++. People would have to spend more effort in trying to find out what your compiled C++ code does, but it's very possible. With C#, it's significantly easier. The conclusion is that you'll just have to deal with it. Use an obfuscator to make it so that your code takes significantly more effort to understand by humans, but accept that if someone really wants to, they can do it.
New dev here, what do you mean don't handle log? 
Also a significant performance hit using reflection, I believe.
As others have said, keep it all well contained. If it were me I'd have a safe 'reference implementation' so that if you and the other guy get hit by a bus they at least have something to debug against.
This really should be the top answer. Regardless, you can obfuscate your code if you're worried, and that will help, but in the end the only difference between .NET and C++ and Assembly is how much you have to pay someone to reverse engineer it. If you're doing a LOB app, it's just a matter of making the inputs and outputs work as expected. I've reverse engineered LOB software without disassembling a single line of code. I just looked at what the app did and wrote code to do the same thing to the database. If your app does some crazy cool math/whatever, you can patent it (And no, I'm not personally FOR software patents, but you asked a question and it's worth stating every option.)
What database provider are you using?
It also helps to know your customers. If you're getting bad vibes off them, there's nothing requiring you to sell to them. Just say no. 
You can try these, too: http://www.testdome.com/Programming-Tests They let you play for free. Some of them are more algorithm tests, too, like things requiring recursion. 
I think a more accurate term is that your log function should not throw an exception. It it does, then you want that to bubble up though it obscures the original exception. Which you can avoid by not having your log throw.
For anyone that's interested Reactive Extensions provides a whole load of stuff around Disposables, including a Disposable.Create. https://msdn.microsoft.com/en-us/library/system.reactive.disposables%28v=vs.103%29.aspx CompositeDisposable is a cool one as it allows you to set up child objects to be disposed when their parents get disposed in a clean and easy way with the following code. public interface ICompositeDisposableSource : IDisposable { CompositeDisposable Disposables { get; } } public static class DisposableExtensions { public static T DisposeWith&lt;T&gt;(this T disposable, ICompositeDisposableSource source) where T : IDisposable { source.Disposables.Add(disposable); return disposable; } } You can then do stuff like: var foo = new Foo().DisposeWith(this); then, when you dispose the parent's CompositeDisposable it will automatically dispose foo too.
You'll find that the size of XML files will rapidly expand beyond what is reasonable for a small app. You might look at a light database to use, which can include images. SQL Server Compact Edition works well for this. SQLite .NET would also fit the bill. http://stackoverflow.com/questions/7420668/portable-database-for-c-sharp
Technically it's the same as disposing the IDisposable in a finally block. Actually, that's exactly what the C# compiler does (see https://msdn.microsoft.com/en-us/library/yh598w02.aspx). Using is a convenience feature so you don't need to type out the finally block and cannot forget to dispose your IDisposable. 
Limitations = plural. But just one is mentioned.
Yes it should be singular 
Yep. If the purpose of using a `struct` was to avoid additional heap allocation, then returning it as an interface defeats this purpose.
Thank you for this, it was very informative. I've realized since posting that the single best way I can go about protecting myself is legally. I'm pursuing both a licensing system and EULA. I know what you mean about one-man outfits! I used to work for a company (that really valued looking professional) where I'd have to call in vendors to work on their software products occasionally. More often than not it was the vendor owner that would show up unshaven and wearing jeans and sneakers. Kind of comical in a way. Thanks again!
Having had a look at IL I didn't see any heap allocation due to the return type (I have been wrong in the past though :))
i dont know how complete it is but it works fine for me have a nice day
If you intend to sell you software to businesses then there is little to worry about it, as long as your have your copyrights written properly. Majority of business prefer to stay legal. However if your target audience is general public then you have already been given enough advise. Elliot ireadable.com
Personally, if I were the end user of your library I'd prefer the wrapped syntax. I would also prefer idempotent calls.
I've got no problem with multiple attempts to write something worthy. But at least some basic proofreading would go a long way.
http://www.gamefromscratch.com/post/2012/11/26/GameDev-math-recipes-Collision-detection-using-an-axis-aligned-bounding-box.aspx Its for javascript but the principles are the same. Particularly you need to track the bounding boxes of the paddles and ball and check for intersections (Javascript code): createjs.Rectangle.prototype.intersects = function(rect){ return (this.x &lt;= rect.x + rect.width &amp;&amp; rect.x &lt;= this.x + this.width &amp;&amp; this.y &lt;= rect.y + rect.height &amp;&amp; rect.y &lt;= this.y + this.height); } After knowing that they are "intersecting" get the "normal" (vector that is perpendicular to the paddle's surface) to the paddle surface, calculate the between the balls vector to the normal and that will give you the [angle of indince](http://en.wikipedia.org/wiki/Angle_of_incidence) for the ball to be "reflected" or "bounced" off the paddle surface. You're going to need to do some vector math to get the bounce right.
It's kind of a toss-up. As far as I'm aware there's no huge benefit either way for a smaller app like a contact list. You do get the benefit of having everything through the same common interface, which can help simplify code.
XML should work, but you could have a look at SQLite, good job for it. I couldn't help myself and had a look at the code... Disclaimer: I sound more snarky than I actually am. - What is it, 1999 ? Who's not using a VCS today ? - bin/ and obj/ folders and binaries in a "source" archive ? Not pretty - Form1 is not an explicit name. - Unnecessary usings in Program.cs and Form1.cs - Bad xml doc on the namespace in SimpleHash.cs - 400 colonnes in Form1.cs - naming style: I (personally) expect private fields to be prefixed or suffixed with an underscore. - Fields: I dislike multiple declaration per lines. - naming should be consistent: x86folder and StorageDirectory are both private instance fields. - dead code should be removed before publication - new lines are not consistent - I don't know why you use "a".Equals("b"), when a == is enough. Especially here: if (AccountReader.LocalName.Equals("AccountFirstName")) { UserFirstName = AccountReader.ReadString(); } if (AccountReader.LocalName.Equals("AccountLastName")) { UserLastName = AccountReader.ReadString(); } // ... Also, it needs "else" keywords and local variable to keep the code DRY: var readString = AccountReader.ReadString(); if (AccountReader.LocalName == "AccountFirstName") { UserFirstName = readString; } else if (AccountReader.LocalName == "AccountLastName") { UserLastName = readString; } // else ... Now, why not a switch ? switch (AccountReader.LocalName) { case "AccountFirstName": UserFirstName = readString; break; case "AccountLastName": UserLastName = readString; break; // ... } - if(someBoolean) {} else if (!someBoolean) {} You can remove the second condition. You're checking that someBoolean is false when it's not true, ie. when it's false. - private void Falser(int PanelNo) : arguments should not be Uppercased - if (PanelNo == 0){} if(PanelNo ==1) {} ... until 9: use a switch - I've seen code copy-pasted two, three times. Bad. That's a start. Feel free to ask details/questions/explain to me how I'm wrong.
Isn't this just sloppy memory consumption? Why get all employees and then filter? For that matter, how are 60 objects created (instead of 50)?
One lot of 30 comes from the .Count Second lot of 30 comes from the .Where The are different instances of an Enumerator over the Employees.
Do you have a stack trace from when the connection fails? Is this full Sql Server or Express? Your server instance name in your connection string doesn't look right. It looks like you're using the machine host name and not the Sql server instance name. Edit: I saw the connection string you posted in the comments and I replied in the wrong spot. I definitely think that your data source is incorrect. Also having attachdbfilename and userinstance=true is redundant. 
Hi, this is how I try to connect my database in order. http://imgur.com/zZM75dU,PmbOPIS,kDjkl1s#1 http://imgur.com/zZM75dU,PmbOPIS,kDjkl1s#0 http://imgur.com/zZM75dU,PmbOPIS,kDjkl1s#2 
&gt;I should clarify that I don't care about lost sales or people pirating my product. That will happen regardless and I understand that is just part of releasing a product. I guess my primary concern is protecting the source code itself from theft, even when ensuring the product is closed-source. The way I see it... is if they want to make a competing product they will just rewrite it if they can't have access to the original source code. I mean look at how quickly clones of games pop up left and right in the app stores. Unless you are planning on having a massive product that is very difficult to duplicate (think adobe products, Windows, etc.), if anyone wants to steal your product they will just re-implement it on it's own code base. At least that seems to be the trend these days.
Its as simple as doing four if else statements ax &gt; bx And ax &lt; bx + bw And ay&gt;by And ay &lt; by + BH There is another version that checks if x is *not* within the range of the other, but this way is easier to wrap your head around
I get that you want to promote your blog but do we really need 6 articles in 2 days? Especially when that's been your sole contribution to this subreddit so far. There are several problems with the article as well. * You have off by one errors in the parallel calculation (it will never give the same result as the sequential one) * The parallel code won't even compile anyway. * Summing a 2,000x2,000 array of ints and storing the sum as an int is a bad idea. * You don't explain how to do this better (perhaps mention that you could use TPL to get a local result for each task and then sum them at the end?) 
Even with NGen, the MSIL still needs to be present, I think. For one, all the metadata is needed at runtime; NGen will only save the per-method JIT compilation.
Should be using tasks instead, most likely (although I didn't look at the code).
A disposable struct seems like a very bad idea unless you have complete control and a steady hand, since structs are easily copied around.
The CLR has non-virtual, virtual, delegate and interface calls. What do you mean by "late bound"? Delegates are definitely faster than interface calls, and should be the same as virtual, because you provide the actual method when constructing the delegate object.
No. Tuple is an unacceptable mess as a return type. For local variables? Sure, I could accept that. But never for a return type.
Ah, sorry, I'm with you now. Yeah, good idea also. :) And probably the most idiomatic/correct one.
You can't. If you had a complete list of domain names, you *could* query each one for its [nameserver](http://stackoverflow.com/a/38028/564755) and then group them by nameserver, but DNS doesn't really work the way you want it to. You're better off skipping the hostnames and just using a block of IP addresses.
Well, not necessarily true - you can, if the DNS server is not secured and allows zone transfers to everyone :) You can definitely do an axfr with pinvoke. An unauthorized attempt to do this would be considered a zone transfer attack. http://pinvoke.net/default.aspx/dnsapi.DnsQuery 
Thanks for for all the replies, i'll have a look at these 2 options. I am not sure yet if the program is gonna be installed on the DNS server or just on a client asking the DNS server. I'm a intern who's still new to programming so I appreciate the help :)
I do have a list of all the names already - but the list might change over time, therefore instead of having to manually update the list, i as hoping the program could update it self by making a query to the DNS server for the list of hostnames. All printers and servers and other non-client devices have static IP-adresses. However all the desktops and notebooks runs on DHCP, so therefore i dont think i would be able to use a list of IP-addresses. Unless i somehow can ask server for all IP-adresses on the network and return them to me.
I've done something like this before. In my case, I wanted to get (at a minimum) the following information * For every computer in my OU in Active Directory, its current IP adddress * For every IP network in my LAN, all of the devices attached to it I also did not want to do any configuration beyond my AD OU. What I did: 1. Query AD for a list of computer names in my OU. 2. Query each of those computers for its IP address, subnet mask, and other information I wanted (using my domain account, wmic, etc) 3. Generate a list of every possible IP address in all of the network segments I had discovered in step 2. 4. Remove any IP addresses that computers were discovered using in step 2. 5. Ping all of the possible IPs I found in step 3. If an active host was found, attempt to connect to it using wmic, etc, using my domain account. If that did not work, attempt to connect to it using the default admin password on the image. If that didn't work, gather what information I can get (MAC address from ARP, possibly hostname from nbtstat). Once all was said and done, I had a good list: * Computers on the domain - with all sorts of info on them * Computers on the network, not on the domain, but with the default imaging password - Need to track those down and join them to the domain, or figure out why they were disjoined. * Computers on the network, not on the domain - Track those down - they might be personal computers
This sounds like what i want to do, and quite an intelligent way to do it. What does "OU" stand for?
[Organizational Unit.](https://kb.iu.edu/d/atvu) Essentially, an OU is a "folder" in Active Directory. I was responsible for one OU - I honestly didn't care about any of the others.
I have been trying to change the Data Source with ".\PAZ-SAMSUNG-PC", ".\PAZ-SAMSUNG-PC\SQLSERVER", and ".\SQLSERVER", none of them works. What's the purpose of the period at the start of string?
I also tried every string for SQL Server Express in this site: http://www.connectionstrings.com/sql-server/
Now I'm even more tempted to use exceptions as a case-matching mechanism: try { throw expr; } catch (UnaryOp op) if (op.Operation == "-") { return -Evaluate(op.Operands[0]); } catch (BinaryOp op) if (op.Operation == "+") { return Evaluate(op.Operands[0]) + Evaluate(op.Operands[1]); } catch (BinaryOp op) if (op.Operation == "??") { return Evaluate(op.Operands[0]) ?? Evaluate(op.Operands[1]); } // Any unmatched expression type is automatically thrown as an exception! A drawback is that the Expression class has to inherit from Exception.
When I wrote [MailKit](https://github.com/jstedfast/MailKit), I debated the same question. Ultimately I went with the wrapped API and made it stateful because that's what most people seemed to want (not everyone *gets* the command query concept). Below the surface, though, if you checkout the ImapClient backend, you'll see that it more-or-less uses a command query engine. I could have designed that part a bit better and instead of just having an ImapCommand, I could have made ImapCommand an abstract class that I could have subclassed for the various commands, but oh well, it's under the surface and not exposed :-) FWIW, I would definitely recommend using [MimeKit](https://github.com/jstedfast/MimeKit) as your MIME parser. Trust me, it will not only save you vast amounts of time, but vast amounts of frustration as well (it handles all of the most common and even some not-so-common brokenness that you'll find in the wild). 
You can use the HTML mailto: command as shown here http://stackoverflow.com/questions/2243333/how-to-simulate-an-mailto-in-c-sharp-button This will open a new email in the default email application. If you look further into mailto you can find out how to automatically fill out the destination email, subject and body.
Having tried both: Neither are great, but [SQLite is a bit better than SQL CE](http://erikej.blogspot.com/2011/01/comparison-of-sql-server-compact-4-and.html). Especially since SQLite will work on WinRT
Pretty much the only time I use anonymous types are 1. Temporary variable storage (LINQ queries where I have to associate some things together before conversion, for example) 2. Creating JSON strings
Agree, but he should just stick with using the method he's already built using the inbuilt email libraries in .NET, and send an email directly from code, not by trying to invoke an external mail client. 
`_toon` is a reference to an instance of the type `PlayerCharacter`. The field `_toon` is part of the class `CharacterGenerator`. The default value is `null` until you assign a reference to it. You do this in line 7, by assigning the reference to a new instance of the `PlayerCharacter` class. I never said `_toon` need to be set to a value in `PlayerCharacter`.
Example? 
martinfowler.com/eaacatalog/repository.html Would appear to disagree with you. The idea appears to me to be that while EF provides a data access repository, if you want to perform operations on entire domain objects, ie, a client that has an address and one-to-many contacts, (all contained in separate tables and bound to separate ef entities) you would generate a client repository allowing you to perform the usual operations on the entire definition of a client (including the address, contacts, etc, rather than using separate calls to the client, address and contact tables. The facade on the other hand, exposes caller agnostic methods for performing business logic operations on whole domain objects. But that's just my take.
Javascript/SQL for today, F# for tomorrow 
Learn SQL. It is complementary to all modern languages. Leaning Java will open up new/parallel contracts as well. I don't think Java and SQL are going away any time soon.
Java is a good choice because it is similar. By learning and becoming proficient in Java, you will be doubling the opportunities you have for new contracts. You will get to reuse concepts, so it won't take as long to get comfortable. That said, Java and C# have some real differences when you get past simple logic and flow control. Some of it is idiomatic; some of it is driven by a different philosophy in the language. You will probably learn almost as much about C# by learning Java because the differences are subtle. For instance, in Java, an Integer is not the same thing an int. (Integer is boxed) 
something like this http://fsharp.org/testimonials/ :) 
Good point.
*shrug* If it is hourly, it is all the same to me. Programming languages are just tools
I'm currently working with xamarin and I'm constantly looking up blogs and articles on how to do something but only finding it in java. I'm really on the verge of just dropping my xamarin subscription since I don't really care for iOS at the minute.
I'd say Go and or Scala. I'll also say that it might be worth looking at [Seven Languages in Seven Weeks](http://www.amazon.com/dp/193435659X/), as well as [Seven More Languages](http://www.amazon.com/dp/1941222153/). It might help you decide where to go next.
If you don't understand why something like this is akin to using `goto`: try { await RiskyOperation(); } catch(Exception ex) { //... } Then that's good, because it is nothing at all like `goto` and such a comparison by OP needs to be backed up with some kind of example.
that is what I was thinking
As a developer you create an email address at your own domain, or via one the free providers (gmail, etc). Then use the credentials for that account to send to another account. The end user's PC will be acting as a client, not a server. 
I'm not sure what part of that definition you think applies to your take, but here's the important part: "A Repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection." Note it sits *between* the domain and the data mapper. Not between the UI and the domain. The domain is the one that should be doing the validation of the domain logic, such as whether or not line items must exist in an order or not. More importantly, Repositories should be pretty dumb. Now, certainly, your data model can be constructed with the correct multiplicities to force these requirements as well, but if your domain requires it, it should also validate it.. not rely on a repository to enforce it.
Seconded. F# is a great idea for something that is familiar enough on the CLR, but much more functional than OO. The last time I played with it I felt it was "too new" for a real production environment, but it should be out of those woods by now.
&gt; /u/tragicshark There can be ONLY ONE.
Yep, this is exactly what we do. Our apps have dedicated email addresses that they can connect to, authenticate, and send (or receive) email. The credentials are stored in files that are distributed with the application (or for some features the end user provides the URL, port, user, password, etc.). We don't do anything special on the server side; we use two different standard server packages (Linux and Windows), and just run a regular mail server (or go to whatever server the end user provides). The apps are essentially SMTP / POP clients. 
That doesn't make any sense.
I'll explain. Just because something is a tool doesn't mean one would want to use it.
No idea why the down votes. Python is a solid scripting language. 
Well clearly you haven't read some of the same code I have. 
We all have our favorite language, but he's asking for something that he can build his C# knowledge off of. Python is good, but I don't see how he can use it in conjunction with what he already knows.
I'm gonna go out on a limb here and assume you're particularly interested in web development. Someone said SQL, which is good, but I'd personally build out your knowledge of the .NET framework, and perhaps tinker around with ASP.NET MVC (which is quickly growing and is something you can build your Ruby on Rails knowledge off of). Additionally, since you know JavaScript, get familiar with jQuery and understand asynchronous postbacks via Ajax.
Are they launching it from the start menu or WIN+# (in order on taskbar). If its the first, that is the intended Windows 8.1 behavior. Not sure what the intended behavior of the second is, but I'm guessing it would also be intended (you want it to start where your mouse is).
Any professional worth hiring is willing to put customer requirements above personal tastes.
Not an older version of C#, just incorrect :p.
Tuples are for the lazy who do not want to define a proper structure. An API that returns a Tuple is very poor structures. `Item1`, `Item2`, `Item3`, `Item4`...
Teenage mutant ninja Turples?
Tuples should not ever be exposed in an API. They should only be used if you just want to return a definite set of values, and only in one place in the code, so you don't have to define a new struct for that only usage.
Agreed. Unfortunately I see tuples suggested and used way too often...
&gt; The basic concept of implicitly exploding the tuple into multiple named return values is still a useful and readable concept. Which is absolutely not the case in his example.
Never said otherwise.
By... Creating a structure? A class? // Private when it's just used within the PriorityQueue private class PriorityQueueItem&lt;T&gt; { public T Name { get; set; } public double PrimaryPriority { get; set; } public double SecondaryPriority { get; set; } public DateTime TimeAdded { get; set; } } I don't know if the property names match your use case exactly. The parameter names are too poor for this. But when you use this class, your code becomes much more clear: var prioritizedItem = this.locaList.OrderByDescending(i =&gt; i.Item4).First(); // I gotta look up what Item4 is var prioritizedItem = this.locaList.OrderByDescending(i =&gt; i.TimeAdded).First(); // Oh, it's sorted by the time it was added!
I would suggest for c# to first do the mva courses. They really are quite good to get started. 
Me too, his "associate" sounds like an arsehole to me.
Turples, not Tuples.
Maybe due to all the people learning Python recently? You don't really get tuples suggested in C#/Java/etc, and there's no real need for it in JS, so Python's the only place I can see tuples coming from.
I have been researching for a while on how to get two computers to communicate back and forth over the internet. .NET Remoting and WCF did not play well with bi-directional communicaiton, typically a firewall or router forwarding wouldn't allow it, and since not every computer I wanted to connect to had the option of poking a hole in the firewall, these were not good options for me. What I found to work was [.NET Sockets](https://msdn.microsoft.com/en-us/library/w89fhyex\(v=vs.110\).aspx). If you can make the connection in one direction, ie: through your home firewall, then you can have two way communication of computers over the internet.
One of the current proposals for C# 7 is for [language level support of tuples](https://github.com/dotnet/roslyn/issues/347). The proposed design gives the advantages of tuples, combined with the individual elements having meaningful names by creating a compiler generated type with properties that gave the names you specify.
Which is a smell and should be avoided. Example: IList @array = new [] { 1,2,3,4 }; @array.Add(5); // bang
These are pretty good, actually. That debugging thing I didn't actually know about, and I've used VS for a while!
We already have this in the guise of: `collectionOfThings.Select(x =&gt; new { DescriptiveNameA = x.Whatever, DescriptiveNameB = x.Something })`
Consider doing this kind of thing: `collectionOfStuff.Select(x =&gt; new { NameOfSomething = x[0], NameOfThat = x[1] });`
It's [Tuple](https://en.wikipedia.org/wiki/Tuple).
I find WCF to be so much more difficult that plain old TCP sockets. I don't see how it simplifies IPC in any way. WCF code looks like messy garbage. Same goes for you, Entity Framework!
While I agree, WCF seems messy, there is in fact a time and a place to use it. WCF gets you an easily distributable web service framework running out of the box; something that you can't easily do when programming in raw TCP. If you're working on something small and just need to send a piece of data from A to B, then by all means use TCP. But when you need massive scalability, configurability, and a data format protocol layer out of the box, then WCF is your go-to. The trick is to use the right tool for the job. 
That's been needed since 1.0, better late than never! :) The only reason Array implements IList is because of the this[int key] accessor. Why couldn't they have extracted that to an IIndexed (or similar named) interface?! :(
Probably java if i had to guess.
It's got no mention of FakeItEasy either.
I wanted to better understand enumerables, so I wrote a binary search tree that implemented ICollection interface. I created in order enumerator for the BST and then thought "right, now, how do I add LINQ support?". So before googling how to implement LINQ methods, I wrote couple of unit tests for it, ran them, expecting them to fail, but to my surprise, they worked!
That would make sense, though I was under the impression that it wasn't because it was hard but because the language was poorly designed. Non-Functional Languages such as Python, Ruby, and JavaScript have had lambdas forever in some form or other. Python explicitly has lambdas, ruby has blocks (procs (ugh..) and lambdas) and JavaScript has anonymous functions and are adding the lambda syntax in es6. 
I found out about Tuple's - and now I using them like hell :D I always needed something which can be created easily and can carry different types (like int, string, string triples) - most of the time, I used classes or struct for it, but accidently I ran into the tuples. No more class used for like two times!
Ahhh anonymous classes...
bad tuples make code difficult to understand. stick with classes/structs/anonymous types
It looks like HtmlAgilityPack (specifically the HtmlDocument call) is throwing an exception and the debugger is trying to show you the source code - which it can't because it doesn't have it. Or you're trying to step into the call, which you can't unless you wanted to look at disassembly. Best bet is to continue and then see what the exception message and stack trace looks like.
Not really. Anonymous types can't typically cross method boundaries without some nasty, hacky code to do so and there's no way to express an anonymous type's structure in the signature of a method.
For anyone trying to unterstand your code this is very bad because you have no telling names and one get's confused easily. 
In .net lambdas are compiler trickery rather than part of the IL, which is why they look so complicated when unrolled. It's also the reason you don't have access to them at run time on pre-Roslyn versions of VS (only the Roslyn compiler can build them on the fly). It doesn't really matter too much how they're implemented under the covers as long as they're available. They're really just a tool to help you think about problem solving and a really good one at that. Also, just in case you didn't know this, you can edit the value of variables from the watch window or the the popup when you hover them. This is really helpful when combined with moving the execution cursor to debug some block of code.
As you can see in the first picture the line is breakpointed. I can keep going back to that code and F11 to Step into and it will take be back to the second picture.
That's understandable, I was wondering if it was something like that. Not acceptable, but understandable. I'm using dotnetfiddle.net, the Main() errors were because it didn't have any "Main" method I believe. Perhaps your "Main" method is in another file, which would keep it from throwing the error? I dunno.
That's interesting, in Python they seem like a common mechanism. What is considered hard to understand about them?
I really wish we could do this int a, b = functionThatReturnsTwo(); Powershell can do it...
I'm Java programmer who jumped ship when MS opensourced .NET. LINQ is like this awesome magical thing and the fact that it just needs enumerable to work makes me love it even more
I use them for getting data from the database (like picture link / ID), then using them up right away in the next line. Many data accessing used only for things like that, and tuple's make them very easy to process (as dictionary's have the same problems, and when I have like 20 two-four member structs for just requesting data about my hotels and rooms is madness). But I agree with you, puting tuple to far away places in the code is bad, but they aren't originally bad.
There is an interesting trick to prevent int to long conversion. We were recently changing our system to go from an `int` to a `long` for one of the variables. The problem is C# helpful upgrades `int` into `long` implicitly so it is hard to track down. To get around this, I used the `ObsoleteAttribute`. public class SomeId { [Obsolete("Attempted to create a SomeId with a 32-bit identifier.")] public SomeId(int badValue) { throw new InvalidOperation("Cannot create an ID via an int.") } public SomeId(long newValue) { Id = newValue; } The advantage of this is that it helps you identify places where a 2.2 B number will blow up because most of it is `long` but you just happened to have one `int` in there (such as from a `DataSet`) that you missed.
Because even Microsoft makes design choices that are obviously less than ideal once code becomes production. The problem is that Microsoft has many consumers and they try to avoid breaking changes, and moving an indexer from IList now would breaking millions of lines of code.
It was Rhetorical, but hey ho. `IList : IIndexed` would alleviate that pain somewhat. And I was specifically referring to the choice to do `Array : IList` instead of introducing `IIndexed`. Not "why haven't they done this since?"
*gollum*
I personally think .NET's true power comes from the fact that they've been cautiously adopting discoveries from theoretical computer science and programming language theories, while the other enterprise solutions have been either ignoring them completely or half-assing them.
Agreed. The thing missing from adding tuples to the BCL was adding language support for them in C#.
Well, the name of the type is Brushes and an array of Brushes is... http://www.reactiongifs.us/wp-content/uploads/2013/06/ill_allow_it_community.gif
The way they're implemented in C#. Tuples in C# are basically just a struct with enumerating properties like `Item1`, `Item2`, etc. Property names like `Item1` and `Item2` are very bad and contain no information whatsoever. That makes the code difficult to read and understand.
&gt; F11 to Step into That's the point. You can't. It isn't your code. You should be able to step OVER it without a problem though.
x-post to /r/programmerhumor
ADO Datasets. Still relatively new to them but it's neat to see your database tables and fields and basically have an in memory way to work with your database. I have yet to learn linq but I'll ocassionally copy pasta some queries from stackoverflow and it really is nuts how many lines of code it can save you. 
Thank you for this! I never noticed that before. All that time I could have saved messing with unnecessary breakpoints!
If you have a version before 1.4.9 it was built in DEBUG mode so it looks for the source files when an exception is thrown during debugging. 1.4.9 fixed this. Upgrade to that if you can, that will fix it. If you can't it's nothing to worry about - it'll just be an annoyance.
Oh. I was only going off this link - http://www.nuget.org/packages/HtmlAgilityPack
Yeah it steps over with out a problem.
Main() there should indeed be marked public if you want to be able to paste that code into a new default Console Application project in Visual Studio to exercise that code. If you mark your project/assembly type to a Class Library instead of Console Application you won't get errors, but you can't run any of the code, either (well, not with a bunch more yet unstated work, like another public method and unit test project, etc). I think the intent there is to have a Console Application project type so you can just run or debug the code and see it work. So for that reason, I think it's a mistake on the site as well. Mark Main() public and you can run it as a console app. 
You're right on all accounts. My suggestion would be to ignore that site and look for a better source. I'd pony up the $31.68 for this book to get started on C#: http://www.amazon.com/Programming-Language-Covering-Microsoft-Development/dp/0321741765/ Follow along with your own console app, writing your own code as you go as the features and behaviors are explained. Copying and pasting code off a website is a bad habit to get into. At least you are recognizing the mistakes, which is good. 
Some of the ones that GhostDoc used to come up with were stunningly awkward. Note: I thought it was gone, but apparently it was bought by SubMain and is still a commercial product. 
Here's some other related interesting projects to checkout: [AngleSharp](https://github.com/FlorianRappl/AngleSharp) [CsQuery](https://github.com/jamietre/CsQuery) I came across them a few years ago when mucking around with CSS Inlining for HTML e-mails. I'd prefer them over HtmlAgilityPack. AngleSharp is super fast.
Yep, will unclear why the OP is trying to declare an array of Brushes. From that doc, the Brushes class holds a set of predefined SolidColorBrush objects, and doesn't provide any functionality itself. I think the OP needs a SolidColorBrush[] instead.
So you really do have an array of brush 'collections' - more succinctly *brusheses*
How about nemerle? It's a functional programming language like Haskell or F#, but it has syntax very similar to C#.
For a class assignment awhile back, I ended up using tuples and a dictionary as a decision structure. Using tuples as the keys. I am sure there are much more experienced prone in here who could tell me how horrible that is, but I thought it was pretty cool at the time.
If you ever develop in SharePoint, SPLists (the lifeblood of the entire application) inherit from IEnumerable, so being able to utilize LINQ is incredibly useful and efficient.
Just discovered last week: using .Cast&lt;T&gt;() to take a collection and make it IEnumerable (this, Linq-able). For example, myDataTable.Rows.Cast&lt;DataRow&gt;() and tadaaa.... Now I can Select, Where, Group, etc.. on my rows. Or listView1.Items.Cast&lt;ListViewItem&gt;() which is where I stumbled on it.
I'm fairly new with C# but... I just learned that you can write line a pair of curly braces {} on their own and then set a breakpoint on that line.
reminds me of linq2sql pluralization, tripped me up on my first project.
Here is some documentation on .NET's Reactive Extensions, which is built for just this sort of thing: https://rx.codeplex.com/ http://visualstudiomagazine.com/articles/2013/04/10/essential-reactive-extensions.aspx www.slideshare.net/rolandkuhn/reactive-streams 
Quicksharp looks decent too, do any of these have a wxwidgets-like plugin?
I have never used the client. Just built a web api using their framework. Looks like similar syntax though. 
[AttributeUsage(System.AttributeTargets.All, AllowMultiple = true, Inherited = true)] public class ಠ_ಠAttribute : Attribute { public ILog Log { get; set; } public ಠ_ಠAttribute() { Log.Info("This code is bad and you should feel bad"); } } [ಠ_ಠ] public class SomeClass { } 
Sharpdevelop and Monodevelop are way too unstable for my taste. If you find too much clutter in VS, you can just customize the windows and toolbar. I've used VS2010 in 1024*600 screen and it's still pretty legible once I trim the toolbar and set most windows to auto-hide.
&gt; how many users are using this app I would just put a simple webservice api in free appengine or parse.com and send it the hash of pc name &amp; username. If you actually need the users name &amp; email, parse api already depends on https so you're good to go, while appengine only need a flag so you won't leak users email all over the pipe.
I can't believe people upvote this. It is basically Resharper doing it's job and OP doing weird things in his code.
I wouldn't like to pretend to be an expert. Just saw a talk on it a few days ago and thought it might be worth checking out. I think you'll have to draw your own conclusions about its merits.
Just to give feedback, your solution worked for me so thanks !
Oh that's awesome.
While damning a library purely for the presence of a single pattern is perfectly fine, how would you suggest I change it? In specific, I went with the semi-singleton for a few reasons. The biggest is that, typically, the list of ISO language codes doesn't change in an application. Given that you can't really change it in `System.Globalization`, I think that is fairly good assumption. Also, `System.Globalization` is implemented as a true, non-replaceable singleton and actually the reason I'm writing this library. The second is memory pressure. Language codes is one of those things that can frequently show up a lot in memory. If I created a new one each time (which the base `LanguageCode` still works), then I still have the overhead of 4 pointers plus class overhead (44 bytes = 32 B pointers and 12 B overhead). If you have a 100k of them, you are talking about 4.2 MiB. The use of a singleton reduces that down to only pointers (8 bytes) to a single object. At 100k, it is still a hefty 0.8 MiB but considerably less thatn 4.2 MiB. Obviously, you shouldn't create language codes for every single object in your tree, but I feel it is something to be considered when dealing with larger systems and my intended use (e.g., there is an `xml:lang` attribute available on every XML element). The only way to reduce that memory is to have a singleton instance in some manner. The decision to make it an static singleton but instance access is specifically to support dependency injection and unit testing (as I demonstrated and explained in the article). It lets you work just with `ILanguageCodeManager` (which I thought I created, but I didn't, so I did) as something passed in via DI and never work with the static `LanguageCodeManager.Instance`. At the same time, a unit test can easily create their own `LanuageCodeManager` and work with that, which addresses one of the biggest problems with singletons is that you can't change them (see my problems with `System.Globalization`). And the classes that consume `ILanguageCodeManager` simply provide a convenience method that uses the singleton if you don't provide one. That way, you can decide if you provide one or use the singleton. I always write code against the provided one. I also made it an interface to allow you to replace it entirely with a better system if you find one. I know that some developers feel that there should only be one true way of using a library, but I didn't want to write it that way because everyone is different. For many people, there isn't a need for changing county codes (the list only changes every few years or so) and a static singleton is acceptable. For others, the need to pass it in is a requirement and I think I have provided that with both the original version (`LanguageCodeManager`) or the recent changes (`ILanguageCodeManager`). I'm all for a different approach, I'm just curious which design pattern works better than singleton or semi-singleton in this regard when addressing the above issues?
I try to avoid WCF and .NET Remoting because their setup is just a nightmare. Multiple interfaces, all these different objects need to be setup in just the right way, and if you want to setup the connection at runtime instead of the config file, its a whole new headache. Not to mention, bi-directional communication over the internet is the biggest headache in the world, assuming you ever get it to work.
C# is becoming a bit like C++. Really, I hate all these stupid language rules and things that we have to keep in our head all the time- that's exactly what I hate about C++. I'd rather they spent the effort on fixing some of the design failures in C# instead of adding more syntactic sugar. The null chaining operator thingy is a neat exception, of course.
That EntityFramework can be a total pain in the ass. It's okay. Learn SQL.
deja vu.. i remember having similar discussion long time back when .Net introduced Linq and IEnumerable extensions. Lot of people hated it as elements of functional programming were introduced.
SQL and HTML. I learned HTML 8 years ago and even with all the revisions, I can still jump in and do work. I actually just finished my first website in years the other day. As for SQL, I don't see relational databases going anywhere anytime soon. 
Rate limiting on the remote service. 1 per second (averaged over a day) per client is the limit. So I could check all of them at once, then wait 1500ms x Count and still meet the same limit, but that would delay information updates and I'd still be presented with the problem of trying to access the list while it's being utilized (50 items with a ~70-150ms delay to get info = up to 7.5 seconds, PLENTY of time for somebody to attempt to add something to the list)
This is a neat syntax simplification, but I'll avoid it. Are curly braces really too much boilerplate to bear?
A linked list perhaps? That way you could be able to alter the list asynchronously without breaking the iterating code.
I'll explain a little better (I hope). Sitting on a server we have a database of items that are updated periodically. I need to relay that updated status ASAP with the rate limits that I'm working with to a client application - I'm using WPF. The user can search for an item, and add it to their watchlist. If there are any changes to the items on their watchlist, they get a desktop notification of it. So any time the user adds an item, it needs to be added to that list. I'd like to make it as responsive as possible (ie. item added, immediately drop that into the watchlist). As it stands, there can be a delay between adding and populating the watchlist. Ideally what I'd like to do is have the list being checked constantly in the background, and any time the user presses the 'add' button... 1. Immediately stop checking the current list 2. Check the newly added item 3. Add that newly added item to the list 4. Start the process of looping through the existing items again Worst case, this could add a delay to the next time items that were not checked from that point on, but from the user's point of view it would be seamless.
While I understand the principle that you're arguing for, it seems like this particular feature is really easy to understand. There's basically no cognitive overhead here.
Doesn't look like two ways to me. Looks like one way, with and without extra cruft. No different that `a += b * c` vs `a = a + ((b * c))`.
Never messed with Rx! This isn't a very time sensitive project, so maybe it's time to learn it. :) Thanks for the pointer. I'm going to start going through the documentation/guides and see what I can make of it.
Sender is the originating control of the event. For example, you subscribe to the CheckedChanged event for a checkbox in a winform app. When the checked state changes (user checks/unchecks the box), the event is called. Sender is the actual checkbox control that has been changed. You can interact with the sender (checkbox) inside the event handler. Some events have custom event args that provide event specific data. Some do not so you may need to evaluate the sender ((Checkbox)sender).Checked.
I think it's perfectly fine for read only properties but I'm not a huge fan of using this for methods that take arguments. It's exactly the same number of characters, the `=&gt;` just replaces the `{}`. I don't really see the point.
Additional to what has been said already.. It's not [EventName]. It's the name of the method that is attached to the event. It can be (and usually is) different from the actual event name.
That was actually a really good example. Thank you!
So, I had a think about this and I'm not sure Rx really adds that much actually. Could you do something along these lines? https://gist.github.com/anonymous/656aa762d792a0a34b19 Basically just use your viewmodels to control whether something is being watched and when you update the value from the service it gives a notification if it's being watches. Is that along the lines of what you're trying to do? Note there is a bit of Rx in there - just to notify when the service provides you with some new values. In this case it does it on an interval of 1500 milliseconds, but the implementation could easily be swapped out with something that pushes updates to you. If you edit your nuget packages.config with the stuff in the gist it will automatically download Rx for you so you should be able to try out that code pretty easily in a new solution.
shut the front door...
Okay, that's neat and very useful.
Thanks!
Thanks! I'll look into this as well
If only our clients bothered to follow the schemas we provide. Or at the very least supplied us with whatever final bastardized version of our schema they decide to go with in the end. So many fancy tools I can't fully utilize.
I think it depends on the area of .NET you work in. At least going by what I see on the freelance meat markets... If you're doing web/ASP.NET you should be golden. Plenty of work there. Desktop work seems to be slim pickin's though. ( Would love for someone to prove me wrong though, and show me the way.. )
Those lower case class names..... :|
If you are using SQL Server you could use this class to be notified in your client of DB changes instead of the polling approach. Combine this with the Reactive Extensions suggestions and you could have a real-time and responsive client. https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldependency.aspx
Thanks tbarela. Web/ASP.NET or ASP.NET MVC? Thanks
You didn't declare IHaveNoIdeaWhatImDoing as an object, that or you forgot a pair of quotes.
lol fixed
Damnit! This would have saved me hours a couple weeks ago - including one i spent looking for a solution like this.
I work remotely, but also spent a year in office for the company, which helped. Now there's a few of us who are at least partly remote. Companies aren't 'looking' for it, but they also recognize that in order to get the best talent they need to be open to it.
It's an interface. 
Thanks for posting this. I will not go with it but it's nice to hear about a language I didn't know about.
I've been playing with it the past week and I really like it. Being so proficient in C# has really made it easy to jump in and get comfortable. It's also being used in some of JetBrains' newer .NET tools like [Nitra](https://github.com/JetBrains/Nitra) (they're either sponsoring the Nemerle devs or have outright hired them, I'm not sure).
Try it! The best way to learn stuff is to experiment. What happens, is that the result is truncated. so 53/4 is 13.25 so it would return 13. 
Okay, then what happens to the fractional part of the calculation? And how can I change the outcome of my output?
void Print() { System.Diagnostics.Debug.Write("Price of a gallon of gas: 1.67 Number of teams in the NFL: 32 Price of Super bowl tickets: 1500.00 NFL Player: Peyton Manning Customer Rating: A Grade Point Average: 89.732"); } 
This is radically different from your original post &gt; I need to write a code with the output saying the following: Price of a gallon of gas: 1.67 Number of teams in the NFL: 32 Price of Super bowl tickets: 1500.00 NFL Player: Peyton Manning Customer Rating: A Grade Point Average: 89.732
I know, I thought I was getting it and could summarize what I needed... that didn't work so well. 
For a complete beginner, even the simplest Express edition back in VS 2005 day (where you can only have desktop solution consisting of projects with the same language or web solution with supporting projects in either language) is more than enough. You got intellisense, snippets, immedieate window, MSDN Express etc to help you through the day. The non-Express version support for extension is nice, what with autoformatter or visualizers all around, but they're usually matter only when you're dealing with fancy image processing/whatever buzzword about the new technology on the block. Right now, as long as Express for Desktop (which support desktop solution consisting of projects with different languages) is still available, I suggest you to learn with it, unless you want to jump to Phone/Windows Store (which I think is bit overwhelming for beginners) since with less functionality exposed, there's less clutter to deal with.
No, it's definitely not for a job screening. I am attempting a C# class, and my tutor left me. I was doing ok as long as I had someone to sit with me to explain everything. And it's too far into the class for me to drop it. 
Below is the proper way to do this. Your professor may be strict and want you to explicitly declare the variables and the enum as private. FYI: They are implicitly private. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { enum Rating {A, B, C, D, E} static void Main(string[] args) { double gasPrice = 1.67; int nflTeams = 32; decimal superBowlTickets = 1500.00m; string nflPlayer = "Payton Manning"; Rating customerRating = Rating.A; double gpa = 89.732; Console.WriteLine(string.Format("Price of a gallon of gas: {0}", gasPrice)); Console.WriteLine(string.Format("Number of teams in the NFL: {0}", nflTeams)); Console.WriteLine(string.Format("Price of Super bowl tickets: {0:0.00}", superBowlTickets)); Console.WriteLine(string.Format("NFL Player: {0}", nflPlayer)); Console.WriteLine(string.Format("Customer Rating: {0}", customerRating)); Console.WriteLine(string.Format("GradePoint Average: {0:0.000}", gpa)); Console.ReadKey(); } } } Hit me up if you need anymore help. While I likely won't give you the solution like this again, I'm definitely willing to help you learn. :)
It says nothing about output of multiple lines
True
Use System.BitConverter instead. Alternatively it can be done with some unsafe code as well: public static unsafe string DoubleToBinaryString(double input) { ulong value = *(ulong*)&amp;input; var results = new char[64]; for (int i = 63; i &gt;= 0; i--, value &gt;&gt;= 1) results[i] = (value &amp; 1) == 1 ? '1' : '0'; return new string(results); } 
credo!
Where do you live? From my perspective there are plenty of .Net jobs (in germany). 
I'm not really sure what you mean by binary.. Round it down to 3 and print 11?
Thanks
Thanks, I like these ideas... At the moment, I'm using a stream reader and ReadLine, simply because it is simple. Every block response from the server is cached into a file to reduce memory footprint, I'm aware of the problems with having large strings hang around. Most everything that is over a single line is treated as a stream resource attached to a file and deleted once the reference object is disposed. I would be interested in the tokenizer approach, but I didn't want to get too carried away with the engineering of the protocol reader as the protocol is very simple single line responses. With only three real control characters, EndOfBlock terminator, EndOfLine terminator, header/body delimiter. Status lines are split on space to extract response codes. Blocks are provided as raw streams, as this is a protocol client, not a data decoder (will be layered on top). I tried a custom stream handler in the past reading large blocks of data into buffers and trying to decode properly read the buffers... these ideas were scrapped quickly as they didn't work properly all the time. I do see some glaring inefficiencies in the way I read from the stream but I'll iterate over that eventually, my main goal was to make a simple functional library .. as the other 3 .NET Nntp Clients I tried were.. more or less terrible. (These libraries didn't work out of the box.. they claimed to be RFC compatible but one of the first commands I tried, failed with invalid status code.. I didn't want to try and troubleshoot it .. was too much of a headache) And recommendations for a decent tokenizer pattern? I would like to give it a shot if I can find a, simple minimalist approach. I'm a big fan of CancellationTokenSource as well.. and I didn't even think about progress reporting, it would be quite easy to report the number of bytes received and at what rate per call, I'll add it to my backlog. Thanks for your interest and comments!
C# is not java
Depends on what you're doing with the output value. If you're storing that in another integer, then it will only story the whole number part (i.e. 13) and the decimal part (0.24) will be neglected. If you're storing that in a datatype that stores decimals, then it will store 13.25 This isn't specific to C# only though, is same for datatypes in all languages.
I have a few coworkers that telecommute and my office is very friendly to letting people work from home if they need to take care of something. From Ohio.
You can use C# developed applications or any .Net app on any OS that has a .Net runtime for it. At present that's only Windows, but Microsoft hopes to make .Net framework available on Linux and Android as well. Though they didn't needed to make .Net open source for it, just could have made frameworks available on those OS as well. Check the Visual Studio 2015 Preview. Microsoft is working in collaboration with Xamarin to bring .Net applications to Android, though it's not as easy as on Windows right now. But it's just a preview. Hopefully the final product will be better. There is a Mono project I came across, which made executing .Net applications on Linux possible, but I haven't tried it myself. Here's the website for it: http://www.mono-project.com I'm myself looking forward to be able to use C# to make apps for Android and Linux.
Obviously anecdotal but my experience is the complete opposite. I worked from home for years as a .Net dev and know many others that have as well. Might be because the companies I was dealing with were in the bay area and looking to save money by reducing office space and hiring out of state. 
Practice. Write code, rewrite code. As with all things, your ability only gets better the more you use it. Don't be afraid to make mistakes.
Did you try actually debugging it? Press F9 and it will set a breakpoint. Then go through your code step by step. Evaluate the values in your variables. Are they what you expect? Are the results what you expect? Go one step further. Does the code go the way you expected it? Yes? Good! No? Why not? Check it. Check your code, check the values, check your theories on how it should behave. And in the end: `prime_number.ToString()`. Your `prime_number` is a list. When you call `ToString()` on a list you'll get the type name. You probably want to iterate over each number in this list and print it out?
Drugs mainly. fixed it
Shit, for each!!! Thanks!
I am only seeing the option to paste JSON.
Doesn't seem too bad. You might want to add a filter to your wrapper though: public class DisposableWrapper&lt;T&gt; : IDisposable where T:class { ... } Since value types are never going to be disposable. The only issue that I see is that there is really not much benefit over redefining "GetClient()" to something like this: private void OnClient(Action&lt;client&gt; operation) { var client = _clients.Dequeue(); try { operation( client ); } finally { _clients.Enqueue(client); } } Usage: OnClient( client =&gt; client.DoWork() ); Which (to me) feels a little less "magical" and "behind the scenes".
By reading code and writing code. Read more code and write more code.
I felt the same way when I got my first job coding in 2006. I think honesty and humility are very important virtues when learning to code. Be honest with your team about your skill set and be willing to take tons of criticism. At first it might seem like a big blow to your self esteem but constructive criticism can be awesome.
Glad to help! Been there. Now modify your tool to remotely change local admin passwords, add printers, and other fun stuff. Edit: Also, make your tool LOG THIS INFO. Can't tell you how much money I saved when people lost their computer, and I found it by going through my logs.
So glad they're fixing this. I was skeptical at first because of the dichotomy of `default(T)` vs `T()`, but I think the pros outweigh the cons. I have a lot of custom structs that could benefit from a default ctor.
Cool, kind of like that one too. Thanks!
Sometimes I see things, think they are neat and try to fit them as solutions to most any problem I run into... I find asking other peoples opinions usually sets me up right.
Yeah, I'm still trying to brute force my way through it first. I'm guessing you mean the sieve of Erathosthenes right? This is the first time I'm hearing of it. I'll read more into that. Cheers.
I assume that if you were to create an array of structs they would be equivalent to the zeroed versions (`default(T)`) rather than the constructed versions (`new T()`).
&gt; The workaround is calling default(MyStruct) and assign it to "this" (yes you can do that) Uh, yea. That's just... um... weird.
Create your query as a function with two parameters: FUNCTION fx_.... ( @startDate DATETIME, @endDate DATETIME ) .... WHERE PTH.CHECK_DATE BETWEEN @startDate AND @endDate Then within your C# code, make the call to the function passing in the dates.
You can use .Net DateTime to work with your query. I've deleted the code since it really is bad practice to use inline SQL.
Obviously OP is learning to develop, learning bad habits right from the start is not good practice.
Maybe you should just practice, practiCOMBOBREAKER! I don't think practice alone is enough, nor even good, but more on that in a minute. There's a few things I think of: 1. How the actual mechanics work for the language you're using 2. How general software development concepts work - Object Oriented design/inheritance/polymorphism, generics/covariance/contravariance, design patterns, etc. 3. How to build Good Software Architectures - how to perform functional decomposition, how to limit coupling, how to specify interfaces and relationships, etc 4. How the software project you're working actually *has* its software architecture designed. Your question belies a little bit of a misunderstanding - understanding C# takes about a day - it's pretty easy to learn *how* to write classes, generics, lambdas, etc in C#. You could pick up a C# feature list and learn how to use every feature probably in a day because the mechanics are fairly simple. The hard part is knowing *what* to write. That's more so about general software development - how do you decompose two connected systems into separate sets of classes, such that they have a pretty clear division of functionality, but can be reassembled to as a whole to solve the problem well? That's a question about functional decomposition, and it's the sort of thing you learn from study and experience. I agree with the other posters that practice is an important element in improving your abilities .. but it has to be the right *kind* of practice, otherwise all you're doing is writing out code without understanding why it's *good* code; you may even just cement bad habits because for the limited exercises you're doing, those habits work just fine but in larger scale projects they don't scale up well. And here's a big, hard problem with that - your options for learning what constitutes 'good' code are pretty bleak: either you find a good codebase and study it, which means you'd have to already know what's a good codebase in order to study it; or you spend time learning through trial and error, by building systems and running into problems as you build those systems, which is basically cementing yourself into a world of maintenance hell if that ought-to-be-throwaway code turns into production code. So here's what I would recommend. Talk to people. Ask them for some projects that they are think are well designed and study those, but with a critical eye - try to find problems with their design. Maybe look at some bad systems and try to understand what makes them bad. Debate with your friends on how some subsystem should be designed, and make people given reasons (ie, actually debate)- doing so causes everybody to learn, because now you're forced to justify your design. If you're looking for some quick tips, I'll mention some: * Less code is not *necessarily* better code; it often is, but you have to be careful sometimes. On one hand it is better because that's less code that can go wrong or less that has to be maintained. On the other hand, in the course of trying to limit code redundancy as much as possible, you may find that you're over-coupling your design - which means that modifying/extending that codebase becomes harder and more bug prone. * Inheritance is overused, in my opinion. Learn what the difference is between inheritance and composition, and when each should be used. If you're inheriting just so you don't have to type `someObj.Method()` instead of just `Method()`, chances are you're abusing inheritance in the name of fewer characters (ooh, a two-for-one!). * Play around with a variety of different languages. Python, go, C#, Java, C++. You might see how some languages approach a general problem from a very different perspective (python 'comprehensions', for instance). * Learn how things work under the hood. Strip away the layers of abstraction and understand exactly how things really work. And then to speak to your particular problem - learning how a big code base works requires a lot of the above ahead of time. You have to be able to recognize certain design patterns to understand why things are the way they are, or why they work at all (or maybe they don't work!). That said, you can still study big code bases: take notes on what things seem to be doing, maybe run tests with the debugger to figure out how things run. One strange technique I've found works very well - make yourself try to modify some aspect of its behavior. It forces you to take an active role in understanding how the code base works (because you have to and are modifying it), instead of a passive role (just reading the code and taking notes). And finally, I hope folks reply to some what I've said and contest the things I've stated - because in doing so, someone will learn something, because defending your ideas forces you to understand them.
Still weird. But man, that would be really useful for reference types that need pooling.
And if you don't mind some shameless self promotion, I have a few posts on reddit and stackoverflow that you might find educational; they're only tangentially related to your immediate goal, but, just like I said above, learning how things work under the hood is important to understanding how to make new things work. * [What is .Net?](http://www.reddit.com/r/dotnet/comments/2t5ozl/what_is_net/) * [Whats the difference between GCC and LLVM?](http://stackoverflow.com/questions/24836183/understanding-g-vs-clang-vs-llvm/24836566#24836566) - which dovetails into the above a little bit * [How does physical to virtual page mapping work in the CPU and OS?](http://stackoverflow.com/questions/9006634/mapping-of-virtual-address-to-physical-address/9007038#9007038) * [What are Constrained Execution Regions in .Net and what problem do they solve?](https://antiduh.com/blog/?q=node/4) * [Where does memory come from in Java?](http://stackoverflow.com/questions/20832717/how-does-java-store-primitive-types-in-ram/20833010#20833010) - this sort of winds around machine memory models, C++ and Java. If you know what closures are, especially how they work in C# (go learn if you don't), then you might be interested to know that closures tend to cause stack allocations to be promoted to heap allocations.
* Use the [Entity Framework](https://msdn.microsoft.com/en-us/data/ef.aspx) Database-First. * Use either [DBML](https://msdn.microsoft.com/en-us/library/bb399400%28v=vs.110%29.aspx) or [EDMX](https://msdn.microsoft.com/en-us/liBRary/cc982042%28v=vs.100%29.aspx) files. * Use the [SqlCommand object with the SqlDataReader](https://msdn.microsoft.com/en-us/library/d7125bke.aspx).
Yep, that's why it will never happen. But still I can dream.
This is some boiler plate code for retrieving data from a database with parameters and getting it into your app ready to use. DateTime startDate, endDate; string sql = @"select * from data d where d.RecordDate between @startDate and @endDate"; using (SqlConnection conn = new SqlConnection("connection-string")) { conn.Open(); SqlCommand cmd = new SqlCommand(sql); cmd.Parameters.AddWithValue("@startDate", startDate); cmd.Parameters.AddWithValue("@endDate", endDate); SqlDataReader rdr = cmd.ExecuteReader(); // your data is now in the rdr }
Don't see the problem. class Program { static void Main(string[] args) { var int1 = new fInt(1); var long1 = new fInt(20L); var int2 = new fInt(20); var long2 = new fInt(100L); Console.ReadKey(); } } public class fInt { public fInt(int i, bool scale = true) { Console.WriteLine("Integer: {0}", i); } public fInt(long i, bool scale = true) { Console.WriteLine("Long: {0}", i); } public static implicit operator fInt(int i) { return new fInt(i); } //implicit long to fInt public static implicit operator fInt(long i) { return new fInt(i); } } 
**string.Join** - Very simple, but I didn't know about it forever for some reason: var names = new[] { "Stan", "Bob", "Bill" }; var listed string.Join("; ", names); // listed is now the string "Stan; Bob; Bill" 
And that runs for you? Maybe it's because I'm using Unity3D and Mono then....I guess I'll try it out in VS. EDIT: It definitely has something to do with Unity3D and Mono.
Debugger.Break() -- causes a breakpoint at a specific line of code.
Yeah, works like a charm: https://dotnetfiddle.net/tB7EQe
When unit testing in VS CollectionAssert.AreEqual
Not a method, but the [null-coalescing operator: ??](https://msdn.microsoft.com/en-us/library/ms173224.aspx). I love using this thing.
And String.Split
Just yesterday I found System.NotSupportedException to use in place of NotImplementedException 
Yes, and ternaries! Soon we will have something stolen form Groovy/Ruby to use that will be useful in many of the same situations as the null-coalescing operator (I forget what it's called): string name; name = Member?.Name; That will set **name** equal to **Member.Name** *if* **Member** is not null!
Nice, learned a new one!
[StringBuilder](http://www.dotnetperls.com/stringbuilder) [Linq to Xml](https://msdn.microsoft.com/en-us/library/bb387061.aspx) 
There's an old post at stackoverflow, which covers a lot of these: https://stackoverflow.com/questions/9033/hidden-features-of-c Keywords * yield by Michael Stum * var by Michael Stum * using() statement by kokos * readonly by kokos * as by Mike Stone * as / is by Ed Swangren * as / is (improved) by Rocketpants * default by deathofrats * global:: by pzycoman * using() blocks by AlexCuse * volatile by Jakub Šturc * extern alias by Jakub Šturc Attributes * DefaultValueAttribute by Michael Stum * ObsoleteAttribute by DannySmurf * DebuggerDisplayAttribute by Stu * DebuggerBrowsable and DebuggerStepThrough by bdukes * ThreadStaticAttribute by marxidad * FlagsAttribute by Martin Clarke * ConditionalAttribute by AndrewBurns Syntax * ?? (coalesce nulls) operator by kokos * Number flaggings by Nick Berardi * where T:new by Lars Mæhlum * Implicit generics by Keith and a lot more ...
Not sure why you are getting downvote for offering reading material... But those can definitely be useful. In our web apps, we pull from some older IMS DBs, so often check for null and empty strings. Noting against IMS really, just pointing out they are old and not necessarily designed great.
Debugger.Attach() pops up a dialog to pick a debugger from a running application. This is really useful for debugging deployed applications. 
If you're using LocalDB (A lightweight SQL Express instance) to access the database, you can use a connection string like: &lt;add name="DefaultConnection" connectionString="Data Source=(LocalDb)\v11.0;Initial Catalog=databasecatalogname;Integrated Security=SSPI;AttachDBFilename=C:\Users\MyName\databasefile.mdf" providerName="System.Data.SqlClient" /&gt; (As sourced from an amalgam of : https://msdn.microsoft.com/en-us/library/jj653752(v=vs.110).aspx and https://social.msdn.microsoft.com/Forums/vstudio/en-US/8311de3e-5e17-4f7a-833e-0b58726fd51c/setting-a-relative-path?forum=csharpgeneral ) 
That is a pretty poor argument against IsNullOrWhitespace. Don't throw a null argument exception if the value is not null. He is blaming poor design on a useful method. 
Amazing feats can be accomplished with these two. 
ConditionalWeakTable! It's the only game in town for adding object fields to your objects at run-time if you can't use `dynamic`. It was the core of a library I wrote adding trigger functionality to EntityFramework (https://github.com/NickStrupat/EntityFramework.Triggers) and I used it in a re-entrancy guard class.
Ternaries are beautiful things.
It's called the null propagating operator. http://roslyn.codeplex.com/discussions/540883
Those are **hidden** features of C#?
Depends on the unit testing framework.
Yes. Arrays are always initialized with default(T), both for value and reference types.
A factory would be the proper solution here.
Every large code base probable has 1-3 of these in them somewhere :p. Generally they work a bit differently, calling dispose on the inner object if it's disposable.
&gt; Never use a name that begins with a numeric character. This is not even possible... &gt; Runtime constants are always preferred than the Compile time constants. Bullshit. Prefer compile time constants over runtime constants, *where applicable*. They have limitations over runtime constants, but if those are of no concern: Always go with compile time. &gt; It is better to use “is” and “as” operator while casting. Instead of Explicit casting, use the Implicit casting. Let me describe to you with the example of a code. No, it is not. The correct answer is: **it depends**. Are you absolutely certain that the object is of a specific type? Do a regular cast. Let it throw a cast exception if this was not the case, as it was clearly unexpected behavior. Unsure what type it really is? Do an **as** cast and check for null. Never use **is** followed by **as**, that's just plain stupid and wasteful. &gt; Prefer string.Format() or StringBuilder for String Concatenation No. Here again: It depends. Especially in his example the first approach is WAY faster than both "improvements".. Simple concatenations can easily be done with **+**. 
The point of VS breakpoints is that you don't need to recompile for them to work.
nope. static void Main(string[] args) { string str = "k"; str += "u"; str += "n"; str += "a"; str += "l"; Console.WriteLine(str); } .method private hidebysig static void Main(string[] args) cil managed { .entrypoint // Code size 61 (0x3d) .maxstack 2 .locals init ([0] string str) IL_0000: ldstr "k" IL_0005: stloc.0 IL_0006: ldloc.0 IL_0007: ldstr "u" IL_000c: call string [mscorlib]System.String::Concat(string, string) IL_0011: stloc.0 IL_0012: ldloc.0 IL_0013: ldstr "n" IL_0018: call string [mscorlib]System.String::Concat(string, string) IL_001d: stloc.0 IL_001e: ldloc.0 IL_001f: ldstr "a" IL_0024: call string [mscorlib]System.String::Concat(string, string) IL_0029: stloc.0 IL_002a: ldloc.0 IL_002b: ldstr "l" IL_0030: call string [mscorlib]System.String::Concat(string, string) IL_0035: stloc.0 IL_0036: ldloc.0 IL_0037: call void [mscorlib]System.Console::WriteLine(string) IL_003c: ret } // end of method Program::Main VS 2013, .net 4.5 c# release build with optimize code on result of ildasm
It's not called a ternary. It's called the conditional operator. It happens to be *a* ternary operator, but you don't call the multiplication operator "a binary," for example.
[hex code to brush converter](https://msdn.microsoft.com/en-us/library/system.windows.media.brushconverter%28v=vs.110%29.aspx) [json to dynamic object with dynamic properties](http://stackoverflow.com/questions/4535840/deserialize-json-object-into-dynamic-object-using-json-net) [versatile convert static class](https://msdn.microsoft.com/en-us/library/system.convert%28v=vs.110%29.aspx) [debugger display attribute](https://msdn.microsoft.com/en-us/library/x810d419.aspx) can be really helpful to quickly see customized output of a Type when you mouse over the instance of the Type during debugging. 
But presently the "default constructor" of struct cannot necessarily build valid values. Take Rational for example. The default constructor will build a value that functionally equivalent to throwing DivisionByZeroException. With the ability to make default constructors for struct types like Rational or Quaternion can have a sane default value. And as long as people remember that neither C# nor the CLR will implicitly invoke the default constructor everyone should be just fine. No one should expect that arrays fill up with the default constructor. It doesn't do that for classes, so why should struct be any different?
For concatenation, I use String.Concat() when needed and String.Format() only when a specific lisbility is required. [DoNetPerls has an article about this.](http://www.dotnetperls.com/string-concat)
This is so weird. String is a sealed class, the compiler should know that it can optimize this without causing side effects.
C# automatically creates fields for auto-properties. But when you define a custom getter and setter than this is not an auto-property anymore. Personally I name them using camelCase and with a \_ prefix. So the name would be `_number`. The name `_Number` I see as weird and really really uncommon. Also: To format code on reddit properly you need to have 4 spaces before each line, as well as an empty line before and after the code. Why is this so difficult for so many people? Why don't they try to fix it when they see they posted it shitty? :-\
Actually C# compiler auto-create the backing field for auto-implemented properties. But you're not supposed to access the backing field, even though you [can](http://stackoverflow.com/a/14210097). However, since you need validation when setting field, you can't use the backing field there anyway.
Also consider making this an extension method! var names = thing.Somethings.Select(x =&gt; x.Name).Join(", "); is a godsend.
 Like /u/AngularBeginner says. I use auto-properties about 50% of the time, the rest of the time is with a backing field like this: private int _number; public int Number { get { return _number; } set { _number = value; } } The leading underscore (with lower-case leading character) is something I've carried forward from the old v1.1 days. Microsoft doesn't have any guidance for naming private member fields, but this seems to be a well-used convention. 
Speaking of stuff from Ruby, I hope we someday have items.Select(&amp;:Name) as shorthand for items.Select(x =&gt; x.Name). So much simpler, no introduction of a new variable.
&gt; No one should expect that arrays fill up with the default constructor. It doesn't do that for classes, so why should struct be any different? Because with classes, you have no instance, which is widely understood as "no value". With structs you do have a value, which could be legit.
The c# compiler currently misses a lot of optimisations- it's something Java still has over us. Edit: Lol downvotes? Because I said Java has something better than C#? Grow up.
It can be a good reminder not to use the field (and go through the property instead). But I use simple camel case too, it's just a personal preference. 
DataRowExtensions.Field&lt;TType&gt;() It lets you easily cast values out of your data row. The other is the numerical format "D4" which zero pads. Didn't know about that one until last week.
That is a gross generalization. You cannot make a general rule that all fields should be properties, because even though properties for the most part are inlined, there are important differences in behavior in the following code: int foo; foo++; int bar { get; set; } bar++; Also struct constructors require that all fields are assigned. If you do it through properties you will have to chain the default constructor first, unnecessarily assigning each field twice.
You're not wrong, but people get away with calling it the ternary operator because it's the only one in the language.
Thank you!
Thank you!
Func&lt;T, S&gt; and Action&lt;T&gt; closures -- or even better, Func and Action factories.
as usual, closed by casperone for not being constructive - despite being very constructive. 
Fixed. It's so difficult because I didn't know how to do it. I actually searched for formatting rules, looked in the submission rules, googled and various other things but couldn't find it. Anyway at least I know now. thanks for the info.
I actually don't like using prefixes too, because I think it makes my code less readable and more ugly. What I'm asking though, is how to avoid this? Sometimes I need to access the backing store for various reasons. It's possible to generate stack overflows because of self-referential references if you use the same name. I'm just curious to know if there is a better way.
Same.. seems to be Resharper's default too.
You cannot always use this, for example with a static class. Otherwise though I think your answer is fine, but in essence it's not a whole lot different from using an underscore...you're still having to manually create the backing store.
It seems a shame that c# doesn't look at your property definition, then create the backing store for you. It obviously *can*, because they're doing it for auto-properties; I wonder why they've chosen not to.
I am doing VB.NET this week. So I see stuff like this: Public Property Name : End Property Which would make it easier on the compiler to identify a property. But VB's compiler is garbage. 
Holy crap haven't seen that yet, but now I can't wait for it
&gt; Use all uppercase when declaring const variables. Nope. 
I used to love VB myself, and I liked VB.net as well. But why don't you switch to C#? It only took me a few days to get used to the differences, which honestly aren't many...hope you give it a try!
&gt; In future, if you change your collection type to ArrayList instead of Array, By gawd if someone out there actually chooses to use ArrayList, then they have some rethinking to do. Usage of ArrayList should be dead and gone by now, let alone be a justification for using `foreach` instead `for`
I've been writing C# since the mid-2000's. This is VB.NET because it's legacy and I can't justify changing it to the boss. So I suffer. ;)
&gt; I have fellow developers who love to use string concatenation or string.format still, then they are missing a slash or have an extra in a config and the whole thing is screwed. They'll be even more screwed when they try to bring their code over to non-Windows systems :)
[System.Dynamic.DynamicObject](https://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject%28v=vs.110%29.aspx) 
Hidden in the first chapter of a C# book I guess.
Thank you for the help. I have looked at these resources, but my database insists on generating in my User folder, despite me having typed the full path inside the project folder in the connectionstring, and tied the connectionstring to the databasecontext. It's very frustrating. My connectionstring looks like this right now &lt;add name="PackagesDatabase" providerName="System.Data.SqlClient" connectionString="Data Source=(LocalDB)\v11.0;AttachDbFilename=C:\Users\"MyName"\Documents\GitHub\PostProject\NameGenApp\POSTWebService\App_Data\PackagesDatabase.mdf;Initial Catalog=PostDatabase;Integrated Security=True;Connect Timeout=30" /&gt;
I switch on ReSharper's color identifiers and don't use any prefixes. Fields are marked as a different colour, and who cares if writing _foo is 'easier' than writing this. this indicates an instance variable. _foo could be static or an instance variable. That's not clear to me.
Overloads for string comparison that take a [StringComparision Enum](https://msdn.microsoft.com/en-us/library/system.stringcomparison%28v=vs.110%29.aspx). This allows you to specify how your strings are compared. No more need to call ToUpper/ToLower to compare strings in a case-insensitive manner. Strings are immutable. Calling ToUpper creates a whole new uppercase version of your string, but if you just specify a StringComparision, no new strings are created. The other thing that you should know is that string comparison methods like [Equals](https://msdn.microsoft.com/en-us/library/858x0yyx.aspx) and [EndsWith](https://msdn.microsoft.com/en-us/library/2333wewz.aspx) have **different** StringComparision defaults. The static and instance string Equals methods use StringComparison.Ordinal by default while EndsWith uses StringComparision.CurrentCulture. The Dictionary and Hashset types have a similar way of doing this. They can take an [IEqualityComparer](https://msdn.microsoft.com/en-us/library/ms132151%28v=vs.110%29.aspx) in their constructors. You can create a class that implements IEqualityComparer and specify your own way of comparing keys, but the [StringComparer](https://msdn.microsoft.com/en-us/library/system.stringcomparer%28v=vs.110%29.aspx) class implements IEqualityComparer and is provided for you.
There is a "formatting" link within the reply textbox which pops out some tidbits on formatting.
He's also wrong about how the `foreach` and `for` loops are compiled. Here is a `for` loop: private static void ForTest( List&lt;int&gt; list ) { for ( int i = 0; i &lt; list.Count; i++ ) { Console.WriteLine(list[i]); } } and here is how it is compiled into IL, as shown by ILSpy, with some comments by me: .locals init ( [0] int32 i ) IL_0000: ldc.i4.0 // Push value 0 onto the stack as an Int32). IL_0001: stloc.0 // Store it in local variable 0. IL_0002: br.s IL_0014 // Branch to IL_0014 // loop start (head: IL_0014) IL_0004: ldarg.0 // Load the first argument, in this case the 'list' variable. IL_0005: ldloc.0 // Load local variable 0. IL_0006: callvirt instance !0 class [mscorlib]System.Collections.Generic.List`1&lt;int32&gt;::get_Item(int32) IL_000b: call void [mscorlib]System.Console::WriteLine(int32) IL_0010: ldloc.0 IL_0011: ldc.i4.1 // Push value 1 to the stack. IL_0012: add IL_0013: stloc.0 IL_0014: ldloc.0 IL_0015: ldarg.0 IL_0016: callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1&lt;int32&gt;::get_Count() IL_001b: blt.s IL_0004 // Branch to IL_0004 if local 0 is less than the count. // end loop Basically, a `for` loop is a glorified `while` loop. Here is a `foreach` loop which basically does the same thing: private static void ForeachTest( List&lt;int&gt; list ) { foreach ( int item in list ) { Console.WriteLine(item); } } And in IL: .locals init ( [0] int32 item, [1] valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator&lt;int32&gt; CS$5$0000 ) IL_0000: ldarg.0 // Load argument 0, the list. IL_0001: callvirt instance valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator&lt;!0&gt; class [mscorlib]System.Collections.Generic.List`1&lt;int32&gt;::GetEnumerator() IL_0006: stloc.1 // Store the enumerator to local 1. .try { IL_0007: br.s IL_0017 // Branch to IL0017 // loop start (head: IL_0017) IL_0009: ldloca.s CS$5$0000 // I think this is loading the address of local 1. IL_000b: call instance !0 valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator&lt;int32&gt;::get_Current() IL_0010: stloc.0 //Store current value to local 0. IL_0011: ldloc.0 IL_0012: call void [mscorlib]System.Console::WriteLine(int32) IL_0017: ldloca.s CS$5$0000 IL_0019: call instance bool valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator&lt;int32&gt;::MoveNext() IL_001e: brtrue.s IL_0009 // If MoveNext returned true, then branch to IL_0009. // end loop IL_0020: leave.s IL_0030 // Leave the try block, running the finally block, then go to IL_0030 (function "return" is there, by the way). } // end .try finally { // Dispose of the enumerator. IL_0022: ldloca.s CS$5$0000 IL_0024: constrained. valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator&lt;int32&gt; IL_002a: callvirt instance void [mscorlib]System.IDisposable::Dispose() IL_002f: endfinally } // end handler As you can see, the `foreach` is still basically a `while` loop, but it's a fair bit more complex because it uses the enumerator.
The book is pretty much garbage. It was purposely named "C# Essentials" so people might confuse it with "Essential C#"; Essential C# being an actually good C# Book- C# Essentials, on the other hand, appears to be a rush job with no technical editor. It does bear mention that the first example does compile- it doesn't work in dotnetfiddle because .net fiddle has it's own requirement that all public classes include a Main method. Jumping back though- Essential C# is probably the sort of book you are after in terms of content. 
What? No. this == that ? true : false That's a ternary statement. this?.that?.thing is the null-propagating operator.
If you really *really* need to know the precise type while glancing at the code and can't figure it out fairly quickly, your variable names aren't good enough. 'var' helps with refactoring passes and dealing with crazy nested generics. There's a few dictionaries of lists of tuples in my codebase, and typing all of that out instead of 'var' would suck. Furthermore you can just hover over 'var' in Visual Studio to figure out what the type is anyhow.
I was talking about this == that ? true : false being the only ternary operator. I wasn't talking about the null-propogating operator at all.
/facepalm Oh shit. So basically OP's link is actually just a stolen shitty codeproject article? The critique about `ArrayList` still stands, but the critique isn't to the Ukranian blogger at devbattles, but to Kunal Chowdhury, who is a supposed MVP. Let's say that again: **an MVP is writing and encouraging `ArrayList`** for reals. Even in 2010 this is retrograde writing, and shows that the author isn't in touch with modern .NET. Kunal: generics in C# is a thing; use it. You don't have to use kludgey .NET 1.0 types exclusively.
C# programmers freaking LOVE using null. It is my humble opinion that the use of null should be avoided when possible. I know I'm in the minority, so I'm prepared for the downvotes. It's a shame that people forget that the downvote button does not mean "I disagree". 
Also Path.GetFileNameWIthoutExtension. The whole Path class is pretty sweet.
You clearly missed his point: null is not white space. They are two different things and should be treated as such. C# programmers love to use null to mean things it shouldn't (IMHO). These methods are only useful if you don't mind blurring the meaning of "null", which some people think is a mistake (clearly we are a minority). 
In VB there's if(object, default), surprisingly very similar...
But that *is* the point of IsNullOrWhitespace (and IsNullOrEmpty). Since null is not white space, you always have to check for both if you are validating that a string *does* have a value. 
Null is not white space and they are not logically the same. Null is "undefined". You cannot distinguish null as missing data or whitespace from null as a program bug. Abusing null is a mistake, and he clearly explains why. Just because you disagree doesn't make it bad. 
Ewwww, but that's classes!
I found that the UnitOfWork pattern to be too much work(!) for too little gain. I also use the repository pattern you describe with a slight alteration. I use a context factory when resolving dependencies for my app or unit tests. 
The static method `LazyInitializer.EnsureInitialized()` for lazy-loading values, rather than manually implementing if-null-then-set or double-checked-locking, or using `Lazy&lt;T&gt;`, which has some memory and instantiation overhead.
Not really sure if I agree with all of these. &gt; Use Proper Naming Conventions OK, this I will give you. &gt; Decide between Value Types and Reference Types I find the use of reference values to be a code smell in most cases, making this irrelevant. As far as possible, methods should be pure and referentially transparent. &gt; Always Use Properties instead of Public Variables Agreed. &gt; Use Nullable Data Types Whenever Required The use of null is, again, itself bad practise IMO. Code should be designed such that null isn't required (and if it *really* is, option types should be used instead). &gt; Prefer Runtime Constants over Compile time Constants Reasoning is flawed. Constants are referentially transparent anyway, so it doesn't matter. &gt; Prefer “is” and “as” Operators While Casting Nope. Using `as` essentially removes the protections the type system give you because if the cast fails, you'll just get null back. An exception allows calling code to handle the failure through improved semantics. &gt; Prefer string.Format() or StringBuilder for String Concatenation Agreed. &gt; Use Conditional Attributes When You Need Them Agreed. &gt; Use ‘0’ (zero) as Default Value Enum Value Types Disagree, manually configuring enum values is bad practise as the compiler should do it for you. &gt; Always Prefer the foreach(…) Loop Kind-of agree, but the use of `foreach` implies the use of an incorrect paradigm. LINQ should be preferred in all possible cases. &gt; Properly Utilize try/catch/finally Blocks Absolutely agree. &gt; Catch Only that Exception that You Can Handle One should never throw the `Exception` class, only subclass it. Sometimes you'll want to do something like the following: ``` class ApplicationExceptionBase : Exception { } class Application { private Application(string[] vargs) { ... } public void Run() { ... } static void Main(string[] args) { try { new Application(args).Run(); } catch(MyApplicationExceptionBase e) { // generic catch-all error handling (logging, reporting etc) } } } ``` And then subclass from `ApplicationExceptionBase` when defining custom exception types (also good practise IMO). &gt; Use IDisposable Interface Yep. &gt; Split your Logic in Several Small and Simple Methods Yes, but also classes. Methods should be small, clear, succinct with well-defined inputs, outputs (let the type system help you), exceptions, edge and failing cases. Classes should follow the [SOLID](http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)) principles.
Lightweight wrappers are better. For example, SqlConnection.
&gt;In my opinion you should use the + operator when the strings are short, since it's more readable than StringBuilder or String.Concat. Even better in 6.0 you can just do this: $"Hello, my name is {name}!" Now I just have to wait a decade so I can use the shiny new things at work...
I am not the biggest fan of building null return values into methods, but it has been done all over the place where I work. So I am usually check that one, the value was not empty or null coming back from the DB and two, that the method I called did not return null.
One of my favourites.. if (Debugger.IsAttached) { //do stuff (like output to console instead of a log file maybe.. } 
That is unfortunate. There is the option of creating an extension method that would do this. It would use the IndexOf overload that takes a StringComparision. More info here: http://stackoverflow.com/a/444818
Yeah, it's just the glaring omission that bugs me. Why, Microsoft, *why??* Plus the LINQ extension method `.Contains()` always pops up in intellisense, since `string` implements `IEnumerable&lt;char&gt;`, and it has an overload that takes an `IEqualityComparer`, which is visually similar enough to confuse me for a second every time.
Yeah, I think he's confused by the fact that the compiler will, in some cases, optimize a `foreach` call (if it knows for sure that the collection is an array, for example). But in the general case, nope, it's almost always enumerators.
Maybe in Java. Common convention in C# has properties in UpperCamelCase. 
That's a good thing. It's called learning.
Pretty sure that should only be happening if you have late binding enabled for VB.Net. 
&gt; Use ‘0’ (zero) as Default Value Enum Value Types Unless you're using the [Flags] attribute
I'm guessing IValidatableObject. 
It's not always possible, true. But you do have control over code that you write.
Like I said, it's a legacy project. And this wasn't turned on. Grrrr. Hundreds of errors now. But it'll be a good thing to clean them up. 
Agreed. Obviously Microsoft is comprised of hundreds of teams with varying styles and team members, but peep the [.NET Core coding guidelines](https://github.com/dotnet/corefx/wiki/Contributing#c-coding-style) if y'all haven't already. Last edited 2 days ago. I regard very high what's happening in the OS repos by the .NET Core team: this is real-world modern .NET. &gt; We use PascalCasing to name all our constant local variables 
&gt; IValidatableObject Hmm. TIL. 
Yeah, they officially support the `_` prefix which I'm resisting for non-technical reasons. I'm not fond if the space indents either, but overall, I agree that it is a good set of guidelines.
I wrote [a library](https://github.com/nemec/pathlib) that enhances the Path class and allows you to work with (cross-platform) paths as first-class objects (rather than stringly-typed data). I use it all the time in scripts and my favorite thing is having the ability to expand `~` to my home directory. Powershell supports it now, but none of the C# APIs do...
The "correct" way, which admittedly I didn't give two shits about until I installed Resharper and had it nag me about it, is _wimpyCase, ManlyCase for properties. Also, unless I misunderstood you, there's an automatic property syntax: public Type Whatever {get; [access-modifier?] set; }
m_field is not C#-like.
Although supposedly, the backing field is supposed to have an underscore prefix.
No way. Pass instances of forms to other forms that need them, and learn how to correctly initialize your values.
You must assign a value at the same point that you declare `var` if it's not clear from the right-hand-side assignment what type the variable is, either name your methods better or don't use `var`.
Stored procedures are data access. So obviously they belong to the data access layer.
Yeah, you just new up a System.Windows.Forms.NotifyIcon within the main window of your WPF application. You'll have to add a reference to the System.Windows.Forms assembly, but that's really no big deal. Edit: don't forget to dispose it in OnClosing()
I generally do the old school mFieldName. 
Most of them will be conversion errors.
Yep, lots of them. Also lots of missing "As" keywords, and comparisons with Object. Object is not a good substitute for Variant when dealing with currency values, btw. Just say'n. 
[Lidgren](https://code.google.com/p/lidgren-network-gen3/) is pretty popular and used by many C# multiplayer games. There's also a tutorial on it´s site.
Okay so I have form1 and form2. In form 2 I have this: form1 Form; public form2() { InitializeComponent(); Form = new form1(); } and In form1 I have a method (call it Method A) as a handler for another form to pass data from one form to another. So I do this (from form1) private void ShowForm2() { form2 f = new form2(); f.Show(); } Now when that new form shows, there is a messagebox from Method A that popups which I don't want it to. Not sure if I explained it enough, will try elaborate more if asked
Right. Wow. Passing the instance of the form as an argument slipped my mind - Thanks Correctly initialize my values how?
unless there was a bug and the only quick fix was to do something with the private variable. yay business!
[JSIL](https://github.com/sq/JSIL) can compile your code to javascript, but you'll have to rewrite your GUI in HTML and bind the events to their corresponding functions yourself. I don't know of any compilers that implements WinForms, I'm afraid.
Yeah, I know. Its a holdover from when I was dabbling in (I think) C++ ? I don't know. It's just what I do. I'm an amateur, so the only people who read my code (currently) is me, myself, and I.
I had the same solution as you (very similar code) but was downvoted since it is using inline SQL. Glad to see that someone else agrees that this is the solution for this use case and not sending OP on a long journey of research to write a simple report.
Do you have a good ASP.NET tutorial you can recommend?
thanks, will check it out.
So, your first sentence is somewhat confusing so i want to make sure I've got your question right. , you have a view, ItemPage, a View-Model, ItemPageViewModel that implements BindableBase and a member, ItemModel that had a title property you want to display and have change if the item changes. If that is correct then what you want to do is (in the view model): private ItemModel _itemModel; public ItemModel ItemModel { get { return _itemModel; } set { if(_itemModel == value) return; _itemModel = value; OnPropertyChanged("ItemModel"); OnPropertyChanged("Title"); } } public string Title { get { return ItemModel.Title; } } Edit: for null safety, title should be: get { ItemModel == null ? string.Empty : ItemModel.Title; }
Are you using EF or any other ORM? If so, they can manage your SPs very well if you choose to.
no, sorry. Haven't started looking into asp.net yet. However there are a few getting started examples from microsoft like [here](http://www.asp.net/web-forms/overview/getting-started/getting-started-with-aspnet-45-web-forms/introduction-and-overview)
Just for the record, my understanding is that the whole 'underscore prefix' things comes from VB (old VB, not VB.Net) programmers. VB was not case sensitive, so you couldn't have a private named myVar and a public named MyVar. From what I have seen, Java and pretty much everyone else, uses lowercase for privates and uppercase for public. Also, somewhat interestingly, go uses variable case alone to designate visibility.
Ya, I got to stop doing it. So it looks like the _ is the new trend, will start doing that. I still think the m looks better.
In a three-tier architecture scenario as you are describing, you most likely want to place that logic in your DAL. Rule of thumb is that the Data Access Layer shouldn't have much logic. It's supposed to contain everything with the task of getting your data. SPs and parameter names fit that bill. The Business Layer is meant to make sense of that data from the DAL, and process it into something potentially useful for the UI that will display it. I'd advise getting familiar with a good ORM. Entity Framework is the standard nowadays with .NET, Linq to SQL is also available, but strong words of caution as it is being phased out in favor of EF. There are other third party solutions that may also suit your taste better as well. Remember, that you are not limited to that specific way of structuring your application. You can technically do just about anything you want, but going with standards in whatever architecture you choose to the best of your ability is always preferable. 
**C# Network Programming** is a well written book that covers the basics. Even if you always use a higher level library, the information this book offers will serve you well. http://www.amazon.com/C-Network-Programming-Richard-Blum/dp/0782141765/ref=sr_1_1?ie=UTF8&amp;qid=1424475279&amp;sr=8-1&amp;keywords=%22C%23+Network+Programming%22
It's part of winforms, but it's not like you're taking a hit on performance or installation size. If the target system has the WPF DLL, it'll have the winforms one. 
`None = 0`? To be honest, I don't even know what that part is supposed to mean (without reading the article ).
Depends how you interpret stored procedures. When regarding stored procedures in databases, they obviously should be stored in the DB and can be accessed through EF, Commands (ADO.net). If the stored procedure concepts meen commands with parameters then you should probably consider storing these in a configuration file. When programming it is important to seperate the exact sql commands (including table names) in another document. (Ref. To 'code smell') 
&gt;the use of `foreach` implies the use of an incorrect paradigm. LINQ should be preferred in all possible cases. I get slightly annoyed when I'm trying to `yield return` all in a collection and am forced to `foreach`. And there's isn't any escaping `foreach` in Razor.
LocalDB, SQL, SQL CE, XML/JSON serializations, config files, registry,... Sure, you can hammer in a nail with just about anything in the toolbox, but the job isn't always so simple. There's many different tools for many different jobs. Some of the problems with your method: * ~2GB data limit * memory usage proportional to data size * need to escape values containing the delimiter * O(n) seek * no data binding support Those restrictions may be totally fine for your application. It just depends...
What does the m stand for? 
[This](http://www.hardcodet.net/wpf-notifyicon) might be of interest to you.
I use auto properties except when there is an absolute need not to. All private class-level variables are _lowerCamelCase
You should look for XAML and ASP.NET development. Windows Forms is somewhat outdated these days.
+1 for Lidgren. Currently using it in my game, and have used it for 2 other non-game projects in the past.
I personally swear by pluralsight. I've been shifting into a lot of new tech at work and these last couple months it's been truly invaluable. 
1) Check out the many free videos put out by Microsoft on channel 9 for introductory tutorials. 2) Youtube is also a great source of introductory tutorials. For instance, check out thenewboston in youtube for a bunch of introductory tutorials. 3) Microsoft's msdn documentation on csharp is also pretty good - with a whole bunch of sample programs. 4) codeproject is also another site worth checking out to see the whole bunch of articles, most of which is in csharp, which shows how different folks have solved different csharp problems. The most important thing, while learning, is to manually type in the code, in small increments, compile and run them to see for yourself how a small piece of code plays out. It's also important to run them through a debugger and step through them line by line. Once you've finished with the introductory tutorials, try working on small problems - and finish them. For example, small utilities to make your life a bit easier or small open source projects which help in some small way. No amount of books or videos etc can help you prepare as much as your ability to get things done. ie a mentality that helps you to keep plugging away until you are able to find a simple enough solution. There are plenty of csharp-based open source projects which you can join, and try to crack their buglist, one bug at a time. Best of luck.
This is a nice tip, going to try it out. edit: Works great. 
&gt; The idea is, the ThreadClass{} should do all the threading work and then let MainClass{} know when it's done by calling a method inside of it. Two options spring to mind: * [Events](https://msdn.microsoft.com/en-us/library/awbftdfh.aspx) * [Callbacks](http://stackoverflow.com/questions/2139812/what-is-a-callback) Either of these techniques can be used to get the classes to communicate in the way you describe. [See this fiddle for a demo of both.](https://dotnetfiddle.net/VXVlYM) Your mention of static methods and multiple instances is confusing so I won't address it other than to say: be careful with static.
I think you may also want to decide what kind of C# developer you want to be, as working in industry will require not just knowledge of the language, but knowledge of the specific APIs, libraries and tools you'll use on a daily basis. Do you want to be web developer (ASP/MVC), a desktop developer (WPF, Winforms), or a mobile developer (Xamarin, Windows Phone)? At some point it's likely you'll want to specialize. There will be different books and courses available for each.
I was just curious if there were any infamous libraries. Like, when you see */ using wibblyWobblySyntax /* you just know that there is some mindblowing code coming up.
Thanks. That worked. I knew I should've had a coffee beforehand.
You still make absolutely no sense.
Ah! Thanks. I've been around the block - joe 6-pack of everything, master of none.
Sorry, confused with Java. Don't mix your languages kids!
This is awesome! I've been looking for a feature like this for a long time. 
I've had extensive experience with all 3. **Bob Tabor**- he started LearnVisualStudio.net. I don't use it anymore. I used it back in 2006 to 2008 or so. I am a lifetime member because they sold those memberships for like $150 back then. Bad idea on their part. The updates were SLOW, average quality, and only a couple teachers. I recommend staying away, other than MAYBE using Tabor's C# Fundamentals for absolute beginners. That wasn't bad. But you can get that course for free I think on Microsoft's website somewhere. But then again, read on here first... **Pluralsight**- YES! I HIGHLY recommend it. No, I do not work for them or get paid to recommend them. You pay a monthly fee. But it's worth it. It's worth trying the free trial, and then just paying for 1 month, and taking 3 courses listed below. http://www.pluralsight.com/courses/csharp-from-scratch http://www.pluralsight.com/courses/csharp-from-scratch-part2 http://www.pluralsight.com/courses/csharp-fundamentals-csharp5 They update with new technology fast. Their teachers are incentivized to teach a good course because the more views they get, the more commissions they receive. Their top 10 teachers made $200,000 average in 2013 I read somewhere. Their top teacher made $600,000 IIRC. The only downside to the site is their new website design and finding courses. I hate parts of it, but there's nothing I can do about that. The courses are all still there. I would pay the $29 a month in a heartbeat, but I am lucky in that I have an enterprise employer who pays for my $10,000 MSDN ultimate license and pluralsight membership. **Books**- this is just me, but I am impatient and can't concentrate on a book. I've always had issues finishing books since childhood. I would get too distracted and also forget what I just read a page ago. But that's just me. If it works for you, go for it. (if anyone has any advice on how to be able to focus on reading and remember WTF you just read, let me know, I HATED reading classes as a kid because of this. I think I have mild ADD or something) For beginner books, I highly recommend Murach books. Also, the Head First C# 3rd edition for beginners is good. Apress Books would be great for that step between beginner and intermediate. WROX books are hit or miss, a lot of times just getting shit out there to be first. **BUT** watching videos and reading books won't mean crap if you don't actually write out the code yourself. Find a way to take what you learn and practice on your own.
Which one is in most demand??
Thank you so much. So when solving a problem, are there different ways of solving it or is there usually just one way?
I'd say web.
Once you understand what an array is and how to use them, this becomes a no-brainer. There's really no way around just putting in the time. I also would highly recommend Pluralsight. I had always been a hobbyist when it came to programming. Scripting, hacking snippets of code for MUDs (dating myself lol), etc. But it never really started to click until I took the plunge and purchased a Pluralsight subcription and spent a ton of time watching the excellent videos they have. I highly recommend courses by K Scott Allen for beginner C#. Shawn Wildermuth also had some awesome courses that were focused on the web stack once you've got the basics down. EDIT: Someone mentioned above the Head First C# book. It's not really great from a technical viewpoint in my opinion, but I think it is perfect for your situation in just wrapping your head around the basics. The way they phrase the scenarios are light-hearted and fun. There are way better books for understanding the inner workings and best practices, etc - but it might help to get you over the hump and more receptive to the lessons that more in-depth books provide.
Excellent idea, excellent work. Thanks for doing this for the community. I was going to ask why I've never seen this before because in hindsight it seems like an obvious tool that's very useful but that's a good explanation for why. Again, great work. 
Look into Metrics.Net. you can instrument that app and charts will go all red and shit when the mofo is gonna blow.
The most reliable way of running .NET apps in OSX and Linux is Mono. Since Mono already support WinForm, stick to WinForm for the interface, and avoid calling specific Windows API. Design the interface so it will run even when the controls are drawn in slightly different size or position. More info [here](http://www.mono-project.com/docs/gui/winforms/porting-winforms-applications/)
http://i.imgur.com/kMbnHKp.jpg
Generally it is not necessary as the [garbage collection](https://msdn.microsoft.com/en-us/magazine/bb985010.aspx) will take care of that for you when the object goes out of scope.
Why didn't I ever think of this. Thanks.
Yeah, this is great when implementing INotifyPropertyChanged.
SequenceEqual extension method to IEnumerable&lt;T&gt; to compare two sequences. int[] a = { 1, 2 }; int[] b = { 1, 2 }; bool e = a.SequenceEqual(b); //true Beware: not as performing as writing your own comparison function.
The whole framework feels much more consistent and functional. In Java you often need to look up how certain classes work. In C# you just type whatever seems logical and most of the time you end up guessing the correct class/method. Oh, and you don't have a 50/50 chance of a 404 when browsing the official documentation.
That is not necessary. The garbage collector will dispose the object when needed. If you want to dispose your class manually you need to implement the IDisposable interface.
That's basically saying that you shouldn't be using read only fields.
I thought that mutable fields was implied by what I said. Also, exposing public fields is bad, in general, because it violates encapsulation by exposing implementation details.
That's not exactly right. True Hungarian notation is about encoding the variable's purpose in it's name. For example, using iCustomer to mean "index of the customer record". False Hungarian notation is using iCustomer to mean "customer is an integer". 
You've turned "this." into a needless long prefix while at the same time eliminated the benefits of using a prefix. Not a good trade.
Then why is it supported by Visual Studio's static analysis tools?
StyleCop is retarded. FXCop, the one that was promoted into Visual Studio, recommends _ or m_ for member variables, s_ for static variables.
No justification for different patterns for mutable and immutable fields.
&gt; IDisposable Have no this: http://pastebin.com/Gxn5ckh8 How do I use dispose? thanks!
Well, if you want to modify a field, for example, by changing it to a property later, every application or library that consumes your code will require a rebuild, because you're changing the interface of your class. It's a lot easier and safer to expose all public data as properties in the first place, using a get-only property for read-only data, than to require all your consumers to rebuild their projects. Also, databinding against fields is not possible because there's no reliable way to trigger a change notification when a field is modified.
Good man. Good man.
No one was suggesting that fields be made public.
For me it would be how well thought out everything in C# is - nothing seems redundant or lacking, yet every time the C# development team introduces a new feature it's kind of a "I can't believe they had that earlier"-type reaction. I've been writing Java for an Android app and it just feels much more disjointed and clumsier than C#, especially with the lack of properties, dictionary/list initalisers, LINQ, scalar types not being objects, no operator overloading (honestly the number of times I've done String == String and not String.equals(String)) and having to use anonymous interfaces in the place of lambdas. Even though Android Studio (which is based on IntelliJ) does a great job of making it nicer, I still think C# is much more elegant overall. Visual Studio is also a brilliant IDE which is definitely what seals it.
If you're not too far ahead into creating the interface and cross-platform support is important, I would recommend you check out either [Eto](https://github.com/mono/xwt) or [Xwt](https://github.com/mono/xwt). They're both cross-platform GUI toolkits, and they let you choose different frontends for each platform (for instance on Windows you can elect to use either WPF or Windows Forms). The only downside I can see however is that there doesn't appear to be a visual designer, although I may be wrong.
The IDE. I can deal with the drawbacks of other languages. The IDE, however, is another story.
It's financial data (accounts, transactions, history) that needs to be stored locally with an option to easily backup and share. 
Adding to 10: cross platform game development with Monogame and Xamarin. XNA kinda died.
I agree that the Repository/UnitOfWork pattern can be pretty cumbersome to implement (especially if you have a lot of models). I wrote a NuGet package to automatically generate those classes and interfaces for you. https://www.nuget.org/packages/RepositoryGenerator/ Blog post with more info: http://www.omarelabd.net/automatically-generating-repository-and-unit-of-work-classes/ At the very least it's a good start and saves a bit of time.
Mongo?
Use a serializer of some sort to just write out the data structure to disk. NetDataContractSerializer can serialize just about anything and handles graph loops..
How well do those deal with WPF animations and data binding and MVVM and XAML etc?
You typically only need to implement IDisposable when your class contains objects which themselves implement IDisposable (there are exceptions to this, btw). If you have the mid-tier edition of Visual Studio or higher, run Code Analysis (ANALYZE | Run Code Analysis). Look for messages that refer to "Dispose" and fix the problem (don't just hide the warning!). 
Flat files. Like CSV. But being that this is financial data, ask your team lead if SOX applies. 
As others have said: * Sharing code and languages over lots of different platforms * Visual Studio
You seem intent on it being "easy to backup and share", but is this really what you want? Is this data going to be the primary source of data for the application? If the answer is yes you are doing it wrong - you should store the data the user inputs or whatever in some efficient form like a bunch of serialized instances (or why not a sql database? if you're handling 10+gb of stuff a local instance of sql server can handle that). You can then add an import/export feature to take this data from the internal store and puts it in a form that is easy to backup and share (like exporting to a csv file). I think the thing you are looking for here may be [sqlite](https://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki). It's a relational database in a single file that your users can copy+paste or whatever.
Are you expecting multiple "tbl_computerinfo"'s or a single one?
Microsoft doesn't talk about WinForms much either. Silence doesn't necessarily mean failure.
Uh, what? Microsoft has a completed and functioning implementation of WinForms--there's nothing to talk about. Mono does not have one, and isn't talking about one. The for-profit company behind mono has a competing UI toolkit and stopped working on a WinForms port years ago. I'm not even sure what point it is you're trying to make.
I sat down and thought about it and as I've made it an iEnumerable (as I was expecting multiple) it shouldn't surprise me I need to iterate through to access the contents. Thanks for your help!
You don't ever need to worry about this..... UNLESS: If your class instantiates any variables which you can call the method "Dispose", you MUST implement IDisposable [properly](http://lostechies.com/chrispatterson/2012/11/29/idisposable-done-right/). The only exception to THAT one, is if you can use the "using" statement.... For instance: using(FileStream fs = new FileStream(path, FileMode.Open)) { //fs is usable in this block } //At this point, the using statement will call fs.Dispose() It should be noted, that if you cannot dispose of the object (using statement) within that one method, then you are going to have to implement IDisposable.
On what I want of course. However, I love learning and I love money. So if I am going to do something that I love and I am passionate about, I might as well go for what will earn me the most money.
For financial data, you need to take the storage of that data quite seriously in terms of its resiliency, consistency, and security. These are things that you'll get out of the box with an RDBMS, so why not use take advantage of it. If the data really needs to be stored locally, then run the DB local. Either SQL Server Compact Edition or SQLite will work fine for that. However, chances are if the DB is running locally, then you will be relying on the user to back it up, which is much more likely not to happen. Unless you absolutely have the need to store the data locally (and that would pretty much be that there's no network connection), then you should be storing the data somewhere else and exposing a service for communication and persist the data on a server somewhere. Having a service can also help with your sharing issue as well, since exchanging data between apps on two machines is providing some sort of different information (credentials, ID, or something) rather than having to copy a file, know where it should be placed, adjusting some sort of configuration to point at the new file, and who knows what else.
Awesome!
This seems like an incredibly helpful resource. Do you think you could point me in a more specific direction? I've been doing this all of six weeks, so I'm still learning how to find the answers I need as much as I am writing the code itself. EDIT: To clarify, it's not just that I don't know how to use the tools I've been given so far; I'm still not sure what tools to use in the first place. =P
There are many different data structures in C#, you mentioned arrays and lists already. What /u/Cordite pointed you to is another type of data structure called a Dictionary, that has special rules as to how it stores data, it's a "key - value"-type data structure. So what you could do is store the morse code as the value, and use the letters of the alphabet as the key, then use the dictionary as a lookup table: "a" -&gt; "..." "b" -&gt; "-.-" (too lazy to look up real morse code...)
I think it'd be pretty smug to submit the assignment with dictionaries and keys. The more I read on this page though, the more it's obvious this is a more elegant solution than any sort of blasphemy I might be able to trip over myself to put together.
I'm not particularly proud of it, but I have some good experience doing my friends' programming homework and making it match the material covered. I'm assuming you've covered if-else statements in addition to what you mentioned. In pseudo-code: string morse = string.Empty; foreach (char in string){ if(char == 'a'){ morse += "... "; } else if(char == 'b'){ morse += "..- "; } ... etc ... } Edit: Downvoted for trying to help. Nice.
&gt; You definitely shouldn't be creating view instances in your view models. I do exactly that. I have a command that deletes selected item from the datagrid by sending it to a view for delete confirmation. http://pastebin.com/EwP4suxF
yes. there are many. be more specific about your requirements and we can provide a more specific answer. however, an amount of data that fits into RAM on most servers is not usually considered "large", so you can drop that requirement.
I have a class (loader), that reads in a program file and creates individual string lists(List&lt;string&gt; job) of instructions and data (hex strings). Loader makes calls the PCB class to create PCB objects. the PCB objects are then stored in a static list within the PCB class. Each string list (job) has a unique PCB. The PCB holds information such as a job id and data buffers values. I didn't create a job class because the instructions and data lists are stored on a simulated disk(Also, creating a job class kinda takes away from the point of having a PCB). The disk is a list storing the job/data lists - so a 2d list. I would like to have the job list point to a PCB object. Sorry for the bad example but this is the best way i can explain it - List&lt;string&gt; job -&gt; PCB[some value] 
Dictionary&lt;key/string, value/PCB&gt; http://www.dotnetperls.com/dictionary
Consistency isn't *necessarily* MS' strong suit. :)
If you get far with it, would you mind telling me how you got on? For the most part it doesn't seem too difficult to work with, so I'd be interested to hear someone's actual experiences with it.
Thought process should be something like this: get string input, turn string to a char array, create a hashmap of characters and their morse code representation, then loop through the char array getting the morse code value for each char, Not sure if youve done hash maps but it seems like the easiest solution to me
Best not to wait on me, I've got a long backlog of stuff to look at.
I only use lowerCamelCase myself, aint a fan of the underscore notation though. To me, the lower-case first letter is enough to tell me that it's a private field or local variable. 
Ionic is built on top of AngularJS and adds a UI framework aimed at mobile devices, as well as using Cordova to expose interfaces to the devices hardware (i.e. camera e.t.c.). They also have some tools that make development easier.
Google's Protocol Buffers has a good .net implementation the output of which you can write to a binary file with a validatable platform independent contract. The speed and space efficiency will far beat XML and json. It is however no good for querying without loading. Like anything else its suitability depends on your usage cases.
https://msdn.microsoft.com/en-us/library/9a1ybwek.aspx
I wouldn't use region tags unless you have auto-generated code or other repetitive code like a giant chain of switch statements. If you have so much code, you'll want to perform some functional decomposition and break it up into smaller parts. Those parts might be new classes, new projects, new methods, etc. Study how your program works and split apart things that aren't related to each other, or that are related but perform different duties. 
\#region //code here \#endregion 
`Ctrl+M, Ctrl+H` lets you collapse a section of code without creating a #region.
This is a sensible option. Ignore all the downvoting fanboys.
Like this: #region SomeLabel ...your code... #endregion This will create a collapsible block. Others have mentioned that you should design your code such that different classes and different functionality is in different files. While this is true, it is certainly reasonable to need collapsible areas in well designed and organized code.
Also, ctrl+M ctrl+O will collapse all sections in the whole file, including regions and methods. 
This is where it kind of gets hairy. Short answer: I don't know. I've seen people more or less building stripped down classes in the business layer that serve mostly to put data from one type to the other. I'm not a fan of this, and it feels redundant. For example: public class CustomerDAL { public string FirstName {get; set;} public string LastName {get; set;} public string Address {get; set;} public string CreatedDate {get; set;} } public class CustomerBL { public CustomerBL (CustomerDAL dataObj) { //Fill properties. } //Combination of first and last name public string DisplayName {get; set;} public string Address {get; set;} //No created date. This is not useful to the UI. } I don't particularly like this approach, but it may be a good idea if it really is wise to hide some of your DAL data for whatever reason. I would probably use the BL logic to get X amount of customers, maybe filter them out by name, or getting one by a specific ID.
I am trying to build the dl and BL into a framework that can be used under winforms and asp.net. Does this approach off any advantage in that situation?
A mentor of mine told me that all methods fit on one page. He also said there is a school of thought that says all classes fit on a page. That's not always feasable, but it's something to strive for. Do one thing, do it well. - Unix
Generally, these approaches are only ways of keeping yourself organized. There are a few other advantages, but that is the main one. As long as you keep consistent and stick by general ideas of what logic should go where based on my previous comment, you should be fine.
Take me under your wing lol. I still have to learn the basics of one program though right? So it might as well be c sharp. Or what do you think? 
Visual Studio will always have the options to collapse blocks. In curly-brace languages, lines with a { will collapse to their corresponding }, tag-based languages run from &lt;tag&gt; to matching &lt;/tag&gt;, etc. You should have little [-] icons in the left gutter, by the line numbers, and clicking them collapses that block. Definitely look into breaking your code into multiple discrete files though.
Except use the Dictionary class - it uses a hash map internally, but shouldn't be confused with HashSet, so it's worth mentioning explicitly
Yeah regions can be used to hide ugly code you are sick of looking at, but sometimes you just have some long sections of code and I find regions helpful for organizing visual clutter. If you have a method 1000 lines long chances are using regions is a band aid on some poorly thought out code. Or lazy. I've done lazy tons of times. If you don't feel like extracting out a service layer or some separate methods then use regions to hide your laziness. I bet if I tracked my use of regions to time of day they would most commonly occur at 3am.
I follow the [Mono Coding Guidelines](http://www.mono-project.com/community/contributing/coding-guidelines/) when it comes to style, which states that: &gt; The use of “m_” and “_” as prefixes for instance members is highly discouraged. 
I'm still pretty new to Ionic and Angular, and it was a bit of a steep learning curve the first week or so, but overall it definitely makes writing HTML5 apps easier. Just be aware that there are still limitations with HTML5 vs a native app, even with something like Cordova, mostly around accessing hardware or hitting some of the OS APIs.
You need to call the base class constructor in your subclass constructor, like the below public class SubClass() : base(arg1, arg2) { } Your subclass is also an instance of the base class, so you need to be able to construct that. If that constructor takes four arguments then you need to specify what they are. That said, it seems wrong that your tile class inherits from Maze. I'd have thought that a tile isn't a maze, so that relationship shouldn't exist in the first place.
Well, you have the option to fork the original -- assuming it's open source, and extending functionality through requirement and class derivation. 
I didn't name the maze class well. It should actually be called mazeTile.
or maybe [extension methods](https://msdn.microsoft.com/en-us//library/bb383977.aspx) fit OP's need (or even are what he meant)? 
When you create an instance of your inherited class, .NET automatically creates an instance of the base class. Since your base class does not have a default constructor (a constructor without arguments), it does not know how to create it so you have to do it manually. u/smellegantcode's [comment](https://www.reddit.com/r/csharp/comments/2wskim/problem_with_constructors_inheritance/cotpom6) shows you how to manually do this. 
Thanks.
[C# To Go](https://play.google.com/store/apps/details?id=com.gregshackles.csharptogo) should be compatible with Android 2.2.
We're not here to hand hold. What part are you actually struggling with? 
If you're declaring a large array, maybe you should move the data out of code. Make the array loaded from a .csv file or some other human readable data format. That would let you keep the class clean and to the point, while separating the code from the data so if the data needs updating you can do it without touching code. If it were a csv file you could edit the array in something like Excel/Google Sheets and save as a csv file. Editing the data in a spreadsheet would be easier in my opinion than dealing with an array in a code file. If you insist on it being in code you could also make a class with the specific purpose of housing the data or use a partial class so the data part of the same class could be kept in another file. Also, if you just want to be able to hide it but keep it in the same file, methods can be hidden in Visual Studio by clicking the + sign to the left of the functions signature.
Here's where I am at now private T FindClosest(T value, OurTreeNode&lt;T&gt; pTmp) { if (pTmp == null) throw new Exception("Null value passed."); else if (value.CompareTo(pTmp.Data) &lt; 0) { if (pTmp.Left != null) return FindClosest(value, pTmp.Left); else return pTmp.Data; } else if (value.CompareTo(pTmp.Data) &gt; 0) { if (pTmp.Right != null) return FindClosest(value, pTmp.Right); else return pTmp.Data; } else return pTmp.Data; } Which returned: -5's closest is 1 1's closest is 1 100's closest is 100 99's closest is 2 102's closest is 101
I should probably tell you that Ctrl+M Ctrl+M will collapse or expand the region or method that your cursor is at, and (I think) Ctrl+M Ctrl+L will expand everything.
That's what I was thinking. I would suggest that OP add his extension methods in a sub-namespace though so you don't clutter the primary namespace. Something like `TheApp.Extensions`. Then create the nuget package and specify the existing package as a dependency.
I just did this in C# as a "challenge" to myself (i am recovering from surgery and my brain has melted, I can't *do* anything, and I am bored out of my brain). I am sure there are MUCH MUCH MUCH better ways to do basically everything than how I did it. http://pastebin.com/1LGVBQjY Basic approach is to have a list of KeyValuePairs of what morse "string" each character maps to, and subsequently, you have a vice-versa. I used LINQ to do the look up, but a simple loop over the list would work. Further, a KeyValuePair is a _very_ simple structure that basically contains a key, and a value, each of a definable type, but you could easily make your own structure to do this. Probably want to have a config/lookup file containing the text/morse translations as well, that way it's not hard coded... to encode, loop over each character and look up the value. to decode, loop over each character, add to a buffer. if the buffer matches a morse in the list of KVPs, return the matching character, clear buffer and continue. user interface/console flow? was never my thing... 
Definitely not a beginner, I can assure you of that. What I meant was more along the lines of extending or adding additional functionality to an existing library without creating a new branch, but the more I write about it, extension methods may be the proper solution. I will be doing more research. 
create a nuget package that "depends on" the existing one
https://www.google.ca/search?q=override+methods+c%23&amp;ie=utf-8&amp;oe=utf-8&amp;gws_rd=cr&amp;ei=033qVL-IJLiSsQTukIGgCg But yes, mark the overridden function as virtual if it's a virtual class you're inheriting, abstract if it's a purely abstract class you're inheriting. C# defaults to concrete.
Yep, make sure the method is protected (or public) and then add the virtual. eg: protected virtual int GetMyFavoriteNumber(){ return 1; } and then: protected override int GetMyFavoriteNumber(){ return 42; }
you could probably do pretty much all of that in loop couldn't you? other wise you to answer you question of you are using c# you can use regions 
I believe it would know it is Bar, and will execute the body of the if statement. write a quick program or unit test to experimentally check it out if you're curious.
Good ol' Dowell, huh? I didn't do mine recursively, but still seems to work fine. What problem exactly are you running into with your code?
Perhaps rather than us doing your homework, you can explain to us what you're finding frustrating and is not clear with generics? If it's any assistance to you, the way I got my head around them was to consider them as compile-time placeholders, so where you see 'T' in your code below, think of it as literally a placeholder for a type. So if my consumer of the FindClosest method specified a decimal as the generic type parameter of your class (so something like var bst = new BST&lt;decimal&gt;()), it's the equivalent of doing a find / replace of all T's with decimal. Generic constraints are where things become a bit more interesting. It's where you can specify what allowable types 'T' can be, and so you can treat 'T' as one of those types. For example, if you have a class called PersonBase, you can constrain your generic parameter to be of type PersonBase e.g. class BST&lt;T&gt; where T : PersonBase, and so in your code you can then declare variables of type T and treat them as if they derived from PersonBase: e.g. var newPerson = new T(); newPerson.Surname = "Smith";
You can always inherit from and add your own methods, or use extension methods if you aren't adding any internal state. If you are doing something more complicated/composing classes you can use a wrapper class. I would recommend you use your own namespaces, in case the original library's author adds the same namespace/class name in the future. 
I ended up finding a way to get it to work as well, but I ended up not needing to do any subtraction like he specified. I simply just used the regular find and if if the next node drops it out of the tree I returned where it currently is as the closest spot. He doesn't seem to like solutions that vary from what he is looking for though. 
To be honest, if you're only working with one type then you are absolutely correct, generics are overkill. I think a great example of why generics are useful is to compare lists in .Net 1.0 vs .Net 2.0 (war story incoming). We weren't so fortunate as the kids of today to have generics in .Net 1.0, so the in-built list object (ArrayList if my memory is correct) allowed objects (as in System.Object) to be added / removed. This is fine for adding, but when you want to reference an item in the list you then need to know what type it is if you want to use it, and then you need to cast it. So, using my PersonBase example from before, you would have to do: var thirdPerson = (PersonBase)myList[2]. This then means you have the possibility of run-time errors (what happens if the third item isn't derived from PersonBase?) as well as the cost of boxing / unboxing if you're storing value-types. Enter .Net 2.0 with generics, now you can declare your lists of a particular type, so that the *compiler* will type check, and you will get build fails if you try to add a type to your list that isn't of the declared type. So now: var myList = new List&lt;PersonBase&gt;(); myList.Add(3); // uh oh This will fail at build-time, rather than at run-time, which ideally means you've caught the error much earlier, and so i cheaper to fix. Perhaps we can lend some assistance as to the difficulty you're having writing constructors and passing data? Where are the type mismatch errors occurring? Have you constrained your generic parameters&gt;?
An example would be the code I've done so far - private T FindClosest(T value, OurTreeNode&lt;T&gt; pTmp) I understand that T value is basically accepting any thing into the method, and pTmp is creating a node using the OurTree generic class. I guess it just looks wonky to me. The Private T once again means the method can return any T you give it. I guess where I have problems is if I want to give it a certain type of T, like an int - how can I then perform operations with said in without the universe exploding. It seems easy if all you want to do is toss something into a method or do basic compares with the build in operator, but doing actual mathematical algorithms seem to be the hardest thing for me to figure out when using generics. This is why I always want to revert back to C++ and just create my int methods and pass them exactly what I want to work with vice a generic.
I think what you need to look at is [generic constraints](https://msdn.microsoft.com/en-us/library/d5x73970.aspx). These constrain the available types that T is allowed to be, and so then allows you to use members on that type (otherwise T is just assumed to be of type System.Object). So let's assume we only want to allow ints to be passed in, we would constrain your generic type parameters as follows: public class BinarySearchTree&lt;T&gt; where T: int this would mean that int's are the only allowed type being passed in for T (which would also mean this is a bit silly, as you might as well write the class just using ints). However, let's say we want to expand our class so that int and dates can be used. We would then write: public class BinarySearchTree&lt;T&gt; where T: int where T: System.DateTime Now your consumers can initialise your class as follows: var intTree = new BinarySearchTree&lt;int&gt;(); var dateTree = new BinarySearchTree&lt;System.DateTime&gt;(); and each class will only accept their respective types at compile time. However, what I really suspect, and by looking at the example posted below, you really want to constrain by interface [IComparable](https://msdn.microsoft.com/en-us/library/system.icomparable%28v=vs.110%29.aspx), so: public class BinarySearchTree&lt;T&gt; where T : IComparable This means that any type passed in must implement IComparable (which pretty much all value types do) and also, any custom types you have created which also implement this. So, using my worn out PersonBase example: public class PersonBase : IComparable { public string Name { get; set; } public int CompareTo(object other) { var p = other as PersonBase; if (p == null) { throw new ArgumentNullException("other"); } var result = Name.CompareTo(p.Name); return result; } } you can now declare: var personTree = new BinarySearchTree&lt;PersonBase&gt;(); and the exact same code now works for ints, dates, persons (people?) etc etc.
If you want to preserve row members, sort each row individually. Otherwise you need to join each row into one one-dimensional array, sort it, and convert it back into a two-dimensional array.
how do you configure log4net? 
The configuration aspect for log4net always bothered me. NLog while doing basically the same this has a much easier configuration, and allows the confit to live outside the app.config or web.config.
VolatileRead might work (although haven't tested it on my phone). http://www.volatileread.com/UtilityLibrary/SnippetCompiler
Both; but it's generally not a good idea to make tests like that. Use virtual methods and overriding instead.
You haven't opened anything, you have created an instance of the class.
...where "within C#" means "in .NET"
My point was indicating that ReSharper can sharpen the distinction for those who have issues. I still feel (m)_ is needlessly verbose, even in Java using notepad.
Every control knows what it's parent in the visual tree is (`Control.Parent`) automatically by being made the child of some other control. What are you trying to accomplish? Whatever it is, this likely isn't the right way.
You need to wrap your debug log code in log.IsDebugEnabled flags. There is nothing in the config file that will keep your code from executing before running log.Debug. If you look at your code, you're passing your concatenation and method return as an argument to the log.Debug method, so it has to run first before the logger method knows what to do.
I worked at a couple of shops that were deep into log4net. I admire the utility of it, but man, I dread having to set it up. Most examples are going to have you wiring up app.config which doesn't work for class libraries. I know there are other ways to do it, but the barrier to entry is just high enough that it feels like it is easier to just roll your own text file logs.
Oh yeah, true. It's to be passed first. Damn. I was thinking writing a wrapper for the logger. Maybe it's time to make use of the this R# search pattern feature and add the flag check everywhere. :-(
In reddit you can put hashes in your comment at the start of the line using a \\ So: \#region produces: \#region 
He is obviously trying to show the window of an external program inside a container in a WPF program, and he struggles to find a suitable argument to [SetParent]( https://msdn.microsoft.com/en-us/library/windows/desktop/ms633541%28v=vs.85%29.aspx) for a WPF control, specifically Panel.
I'm fairly ignorant of what all Grunt is capable of, but can't all this be accomplished right out of Visual Studio? I have Web Essentials and Browser Link to minify and bundle my css (as well as scss/less), js, and html templates. It will even update stylesheet changes live, and allow the source css file to be updated if the styles are changed from the browser inspector. Additionally, VS lints javascript (not sure if that comes out of the box or with Web Essentials)
For a plugin I wrote for TFS, I stored the xml file as an embedded resource. I read the resource at startup and was able to configure it that way. Its a crappy way of doing things. I might check out NLog.
I'm not aware of anyway to accomplish that in WPF. I think you'd have to use `WindowsFormsHost` in your WPF then hook the external panel up to that. I'm not sure how well that's going to work though. There might be some visual artifacts and glitches. This isn't anything I've ever dealt with before.
Thanks for the tip !
thanks fizixman i have tried it and it works on my phone but its like an interpreter in python.. and you can't save it in a file.. something like that.. . but thanks 
IIRC, it's running the compiler (possibly mono) so it's not actually an interpreter. But yes, it's just for one-off scripting for funsies. Maybe the only real benefit you'll get out of it compared to the other solutions is that it works without a data connection.
Grunt can be automated better than VS. However, I'm not sure what advantage it has over msbuild, which is the standard tool to use for such things.
Looks cool! It's a bold move asking people to buy a $75 license for something that doesn't exist and might not work as well as promised. 
It also symbolizes another break of .net from the Microsoft ecosphere. I do love my Visual Studio. However, it's a step in the progression to a newer more open and flexible .net. I for one welcome our new Grunt overlord's
$75 for pre-alpha???
This. Every time I see something involving Grunt and .NET, I get a little excited. Visual Studio is awesome, but we're getting closer and closer to being able to efficiently develop for .NET outside of Windows.
Stupid question: is monogame feature frozen? As in they do not expand outside the XNA specification? (Other than being cross platform)
&gt; I'm fairly ignorant of what all Grunt is capable of, but can't all this be accomplished right out of Visual Studio? I have Web Essentials and Browser Link to minify and bundle my css (as well as scss/less), js, and html templates. It will even update stylesheet changes live, and allow the source css file to be updated if the styles are changed from the browser inspector The key for me is how easy is it to set these things up and maintain them on a build server? The browser link stuff isn't needed, of course, but bundling, minification, less compilations, all that should be able to be done repeatedly without errors on a build server - and not dependent on developer's machines. 
I do all of this in my builds, it's really not that hard.
Idk... Probably not, given that xna is dead.
Teamcity does most stuff out of the box, or with plugins. We used to use nant, but with Teamcity being so capable we don't bother much anymore. 
Exactly. I &lt;3 Visual Studio and have never come across a better IDE but exactly as you said, it is exciting to see .Net flourish outside of Windows
And here I am still using VS 2010...
yeah im looking for a compiler that its working offline .. its hard to find on the internet but thanks...
If you check out the project I put on github in the article, you will see how I configured it. 
The code you've shared can definitely be better designed. Imagine tomorrow your users love it so much they ask for your map to be 5 times bigger, you would have tough time with that won't you? I would recommend calling the whole thing in a nested for loop. Your first hurdle will be the TeleportTile. For that I would use composition instead of inheritance. In other words, don't inherit TeleportTile from Maze, but instead make it a variable which Maze can access. Personally I would prefer going through this in two passes, one where I initialize the array, and a second pass where I put the data into it, though you could do it in one pass as well if you wanted to. Basically I would store the first and second variable based on some kind of map which I would eventually store in a file. EG: int[] stateForVar1 = {0,1,0,0 1,1,0,0 1,0,1,1 1,1,0,0} You could even overlay the maps and use an &amp; operation so that you only need one mapfile which stores all the states. public enum States { None = 0, FirstVar = 1, //0001 SecondVar = 2, //0010 IsTeleportTile = 4 //0100 } So once you've initialized it in a nested loop, the second loop would look something like int i = 0; foreach (var mazeValue in mazearray) { mazeValue.firstVar = (state[i] &amp; States.FirstVar) != States.None; mazeValue.secondVar = (state[i] &amp; States.SecondVar) != States.None; if ((state[i] &amp; States.IsTeleportTile) != States.None) mazeValue.specialTile = new TeleportTile(); i++; } Sorry if formatting doesn't come out right, but I hope you get the picture. Edit: figured out how to get the formatting right. 
You shouldn't need to wire anything up in a class library, except adding the log statements. The configuration only happens in the app or web.config, unless I misunderstand what you mean. 
I know it's been a bit but thank you - I've been going over this and it makes a lot more sense laid out like this rather than digging through tutorials that are mostly outdated or geared towards ASP.Net. Thank you so much!
Linux support?
Developing on a non-Windows PC, for one.
Cry for a few minutes and then copy the config from a previous project. But seriously, I can never remember how to configure log4net properly in App.config/Web.config.
You could create an array of morse code in alphabetical order, and access it like this: morseCode = array[mychar - 'a']; Basic idea behind this is that the letter 'a' corresponds to some ascii number, which we want to map to the number 0 on our array. so we subtract that number from 'a' to get 0. We don't have to know what that number is, the machine knows and that's enough for us, so we just subtract 'a' from it. I admire your work ethic regarding not needing your work done for you. It's good that you waited until you were truly stuck before you asked your question. This is one of those 'elegant' solutions that come to someone after they have tried to solve many solutions by themselves. It sucks to have someone else telling it to you because otherwise it becomes so obvious in retrospect that you don't get the benefit of exercising your mind to solve a problem like this. 
Meh, doesn't seem like an improvement to me. What I need is for it to stop catching handled exceptions in library code.
Having trouble finding the link, but Eric Lippert posted the implementation details some time back as part of this series http://blogs.msdn.com/b/ericlippert/archive/2010/10/28/asynchrony-in-c-5-part-one.aspx
Why not? I just installed ASP.Net MVC 5 on my Raspberry Pi over the weekend.
https://getseq.net/
I still have 2005 and 2008 installed for support of some old legacy apps. Cringe...
Dude...
Wow, apparently security is of no concern to you! That sucker has EOL soon! http://support.microsoft.com/lifecycle/search?sort=PN&amp;alpha=.net&amp;Filter=FilterNO
I get the whole holding off on new tech... But that's way too long.
VS2015 SDK are for those who are building extensions for VS2015 or the user of some fancy extension which require it (most don't). As for Roslyn, it's built in with VS2015.
thanks for the reply, I do kind of have that. My Character class has an ApplyDamage function (basically it implements IDamageable). The design i'm curious about is how to handle multiple potential modifiers to that. For example, I have an incoming damage of 50, and there are currently 2 modifiers applied to the unit (Maybe like fatigue, and iron skin lets say). Fatigue causes you to take double damage, and Burnt skin makes everything take 10 less damage. I'm currently pondering how to have both of those modifiers (Implementing IModifier) register to the Unit (IDamageable) so that the amount of damage actually passed to the unit is 50 * 2 - 10 in a deterministic way. With events, I could have IronSkinBuff and FatigueBuff register a callback to OnBeforeDamage(ref int damageToDeal) and modify it. Or, I could make an interface IDamageModifier, which the Unit keeps a list of, which calls the function of IDamageModifier, keeping track of how it would change the incoming damage. I'm leaning towards the latter, but just wanted a sanity check.
What object do the modifiers belong to? If 2 players are fighting, and one has Super Strength, the damage he delivers should be increased by 10 points. And the other player has Fatigue, so the damage he receives is increased by 10 points. But these 2 modifiers should be calculated by each object because their behavior might be different depending on the object. For example, if a wall has Fatigue, maybe it's going to take only 5 extra points of damage, but for a player it's 10. But it sounds like you want to have an additional layer in between that knows about both players and their different attributes and knows how to calculate the final damage. I think this may become messy, especially if you have multiple kinds of objects, and multiple modifiers that need to be applied. But if you encapsulate it then it will be much more readable and easy to debug and understand.
I definitely don't need the SDK. Installing the VS2015 preview and its a huge installation needing over 9GB and been going on for over 2 hours already. 
This is one of the best beginner tutorials to get started with for learning C#: http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners Since you are not a complete beginner, some of the topics might be repetitive but I think they will still be helpful. If you want to try more hands-on stuff, try: http://www.learncs.org/ http://www.programmr.com/zone/csharp
Some things on my list: Extension methods Nuget (not c# but related) Threading support and libraries Properties Easier assembly versioning No need for build plugins for building different configurations Visual studio or xamarin studio work awesome Yield returns and enumerators Java however is a bit better with: Class mockability, no need for interfaces or virtual methods (simplifies development but with higher coupling) While I dislike Java properties, combined with certain libraries can be pretty cool Some would argue that maven and related artifact managers are better than nuget. Nuget is far easier to setup and use, in my opinion, than Java based ones
x -= y where x is a null delegate and y is some function does practically nothing (returns null instantly), so it's cheap enough. Removing from a method chain where it doesn't exist obviously takes longer as it needs to scan the chain. If there is nothing to remove, the same delegate is returned. If the last method is removed, null is returned.
Why not use an auto property here? public int Number { get; set; }
No you can't.
thanks ryan for the reply... 
&gt; That will set name equal to Member.Name if Member is not null! No, it will set name to Member.Name if Member is not null, and to null otherwise.
Although forward slash works everywhere in .NET, so just combining like this: var path = part1 + "/" + part2; will always work (duplicate / are allowed).
You are trying to code for wpf like you would foe winforms, which is incorrect. In wpf, your .xaml.cs file should have one method in the code behind, the constructor, which should call one line of code, InitializeComponent(); You need to do some research into MVVM, data bindings, INotifyPropertyChanged, ObservableCollection, IEditableObject and ICommand.
Ahh lambda is supported as well! Excellent. This seems to solve my issue: [http://i.imgur.com/E264yPs.png](http://i.imgur.com/E264yPs.png) Thanks
Smells like the average kickstarter projects. Shiny looking, bold promises, and probably failed execution. Visual Studio Community is **FREE** (unless you work for a corporate in which they only cost a week of your company income). Look at Xamarin, they are smart guys, there are literally no competition at building C# apps for Android and iOS, yet even with at least $300 *annual* license, Xamarin Studio is still laughingly unstable, the only reason anyone use it is because they're stuck in Indie or Starter license. Can these two guys (admittedly judging from their history, they know what they're doing and they took shortcuts by using Roslyn instead of implementing yet another parser-formatter) actually bring features worth buying when you can get VS Community for **FREE**? ^I ^really, ^really ^can't ^stress ^it ^enough. They probably better of releasing some add on like Resharper or building an IDE around VS Shell.
OH MY GOD i've totally forgot about that, thanks mate
ty, solution found!
C# is great to start with, but visual basic might be more easy to get into when you are starting. 
I was just trying to be clear about how the two are different. List&lt;T&gt; will still be cast to an ICollection&lt;T&gt; if you call Count() like I described above. This is avoided if you just use the Count property directly. List.Count &gt; 0
Why is it a mistake?
How do you write a table in comments?
But that is the fault of the other languages and their IDE's/tooling.
FORTRAN. 
If only more people lived by this then geocities could get the respect it deserves.
Yes.
And some of the most successful PhDs within computer science has personal websites without any styling and layout in HTML tables. Sometimes people care more about the content they produce than trivialities, which is good
C is, in my mind, a macro assembler. Every line you write in C you can visualise as a set of assembly code. It's not a complicated language.
Yes C# is an excellent choice. You will need to brush up on SQL if your skills are lacking in this area however the SQL required should not be too complex. Personally I would think of creating a basic user login system with a database backend to get an idea of what needs to be done and how to do it. I would not take this project as your first project, it will likely be an abomination - start with a winforms calculator or something nice and small then once you have gotten your head round object oriented programming concepts (static classes, instances etc) and syntax then start tackling this. For projects like this I would go for a database first approach. Also be careful with authentication -you really dont want to create security holes in a business critical application. Ensure the following; Use parameters and stored procedures when accessing the database. Do NOT build up SQL as a string passing containing user input and then fire straight at the database. I have seen someone with a computer science degree do that. Use pre-existing password hashing algorithms. Don't store the password as plaintext and don't try create your own. Ensure every method of interacting with the server is authenticated. I would seriously advise having a central server app that allows access via some method such as web services rather than allowing direct database communication from the app otherwise people could figure out the database creds. 
Oh I agree with that.. though in my mind I'd call that "spartan." To me a slick language is one where you can do a lot in few keystrokes - like in C#. 
I wonder if its a little too late for any of this. The corporate world (at large) will not get to use these tools for the next 10 years at least. Young developers will use sexier tech like node django or rails. I even occasionally meet people who un-ironically say that web-forms is good and that MVC is a gimmick. 
Being someone who has been stuck with asp.net 3.5 now and for the foreseeable future, I agree with this statement.
Thanks, I'll look into that.
The cross platform bit is a huge sell. On osx, monodevelop freezes every few minutes for me and is slow to catch up with syntax. I'd love an alternative such as this. However, $75 is a lot, for something that doesn't exist and we have no idea if they will charge "upgrade fees" or not. 
Those `asp-` attributes look uncomfortably similar to `runat=`. I prefer a clean bright-line distinction between the templated html output I'm controlling in a razor view, and parts that invoke additional logic.
At least `data-` and `ng-` are actually emitted html, not some server directive thing. (And I have a problem with `ng-` since afaik, it's not supported by html5. Only attributes with the `data-` prefix is guaranteed to be preserved. http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes
Licenses bought now are valid for alpha/beta and all 1.x releases. No expiration of the license or anything like that. Upgrades to major versions will be 40% of what you paid for your original license. For early buyers, that means $30.
I agree. the MVP program is interesting but it's not perfect. different regions often are motivated to present awards, and there is arguably a arbitrary component to the selection. it's a great program with a lot of perks but there is always room for improvement, and the selection method is rather opaque. Realistically, while it can be used as a guideline to lean towards "this person probably knows what they are talking about" it isn't a guarantee, and a person with an MVP award should never be trusted over a person without based entirely on that award status.
Everyone keeps saying this, but I don't think it's as common as people suggest - especially if you document or TDD your code. And if you focus more on functional vs. OOP, it shouldn't even matter what data types you use.
Thank you!
Probably one of my own most controversial opinions is that I avoid using the null value whenever possible in my own classes. [Say no to null](http://elegantcode.com/2010/05/01/say-no-to-null/ ) Most C# programmers have a strong knee-jerk reaction to this opinion - mainly because null is a part of our culture. It's a "feature" of the language that is probably misunderstood and misused more than anything else in C#. Most arguments devolve into "how else do we deal with empty values?" There are other ways, but few take the time to explore the alternatives. F# has no such construct and the folks using F# don't miss it! 
You *do* know that `data-ng-` is treated the same as `ng-` by angular? I use the `data-ng-` style in all of my angular projects to maintain valid markup.
Yes, I do. If I were to use angular, I would adopt the same practice.
You can call the ffmpeg exe from a website, but no - I doubt you'll find a direct replacement, and even if you CAN find an encoder/decoder library its not guaranteed to have that one exact switch that you need. Because c# is an interpreted language you will be unlikely to get as-good performance from it anyway. Most implementations I have seen/used/built just call ffmpeg. Does your new platform not support it? And without wanting to point out the obvious, why have you gone over to a platform that you KNOW doesn't support your application's requirements?
Community Technology Preview
&gt; F# has no such construct and the folks using F# don't miss it! That's not true. F# does have nulls and if you stray from idiomatic practices you can easily trip over them. F#'s null handling is actually worse than C# because you can have truly stupid things like `Some(null)`.
&gt; After using Scala's Option, I rolled my own version in C#. That doesn't solve anything, it just obfuscates the problem. Now instead of dealing with one type of null, you have to deal with two.
Public fields are ok sometimes. In a value-type class, I frequently use public fields. So far, nothing has blown up. Particularly when combined with internal and/or readonly.
You can do this without the array of actual chars, and without the looping through, but it may not be obvious to you at first. Assuming you create your morse array in alphabetical order you know that "a" is the first index in that array, and z is the 26th...
I actually like this as a beginner problem precisely due to the number of potential solutions. Some of which aren't great programmatically, some of which stretch into using new data structures... Samples from this thread... * Switch statement (functional, but lots of code when more elegant solutions exist) * Char Array / Morse Array (Search first and reuse index: getting closer, but char array isn't needed) * Morse Array (Index by char value offset from 65: This is the standard "array only" best answer?) * Dictionary/Hash lookups (Good data structures to learn, but does it buy you anything that direct array indexing doesn't already give you? (I can think of a couple reasons depending on assignment requirements)) Additional thoughts: What approaches best allow this program to support conversion in the opposite direction?
I have never encountered `null` in the wild in F# code... I might have not looked in the darkest corners though. `Some(null)` in Scala/F# also strikes me as very, very odd. That's why my own `Option` for C# converts `null` into `None` automatically, it's safer and works for me. 
I almost never encounter null reference exceptions in C# either. But that's because I insist on following the patterns.
Not sure if you have found a solution for this yet or not. But since you have not covered Dictionary's yet, how's this? Build a string for all the alpha characters you want to accept as inputs. Then build a string[] containing all of your matching Morse code. Split your input string and convert it to a char[]. Next for each char in that array, use it to find the match in your original string of alpha character. You can then use the index returned to find the corresponding item in your string[] of Morse code. string convertToMorseCode(string inputString) { string alpha = "abcdefghijklmnopqrstuvwxyz "; string[] morse = { " .-", " -...", " -.-.", " -..", " .", " ..-.", " --.", " ....", " ..", " .---", " -.-", " .-..", " --", " -.", " ---", " .--.", " --.-", " .-.", " ...", " -", " ..-", " ...-", " .--", " -..-", " -.--", " --..", ".-.-.-" }; string outPutString = string.Empty; char[] splitInputString = inputString.Trim().ToLower().ToCharArray(); foreach (char c in splitInputString) { int index = alpha.IndexOf(c); outPutString += morse[index]; } return outPutString; } }
Intellisense gets rid of most of the need to see the variable type explicitly, and even without that, I know exactly what type an object is if I've just called "new". If it's a return value of a method, however, it can be a little annoying not to see the whole type.
I'll be over here as a person that likes to use NULL values as, to me, they offer meaning. I deal a lot with going back and forth between SQL and C#, moreso in SQL nowadays and I like NULLs.
Right there with you. I even made a code snippet to automatically insert all my usual #regions when I start a new class. 
&gt; It's a big upgrade from the Razor syntax Html helpers, so I'm happy that it's progressing. What's wrong with Razor? (honest question)
The argument against #region is that if your objects and/or methods are large enough that #region seems necessary then you likely have a design issue. It's often used as a crutch to hide overly complex code. I'm not saying you do this. I think #region has it's valid uses, but they have a high abuse potential.
If you want to add an interface later, you can implement the properties that duplicate the fields explicitly without breaking compatibility.
It's a little different than that. What answer do you give to the question "when did you stop hitting your wife?"? If you were never hitting your wife in the first place, then the correct answer is mu, the non-answer. In C# et al, that correlates to null. Null usage indicates that sometimes, the question itself is invalid and shouldn't be getting asked. Otherwise, you should always have a valid value to give back - a DateTime or TimeSpan for `LastSpousalAbuse()`, for instance. There are other uses/misuses of null, but the case of mu representation is one of the more sticky problems because sometimes there's no obvious way to transform the code to not deal with nulls.
When I work with value types, it's often because I care about the memory footprint of the value type I'm using. Therefore, I like to use straight fields to document what is actual in-memory data, and properties to document what is merely calculated from fields. (For example, a Vector2 class would have X and Y as public fields while Magnitude would be a property calculated from the fields.) Additionally, public fields are a lot more convenient when the types of the fields are themselves compound value types (as opposed to simple types like int, float, etc...), because I can then do OuterStruct.InnerStruct.InnerStructValue = 10, whereas with a property I'd have to create a temporary copy of InnerStruct to modify and then set back to the InnerStruct property.
Dictionary&lt;SomeClass,Tuple&lt;SomeOtherClass,AnotherClass,IEnumerable&lt;YetAnotherClass&gt;&gt; Not that you should ever do that, but god forbid its something out of your control and you don't like var
I use regions extensively and don't buy the argument that they are a warning side of poorly organized code. 
I love Razor. Nothing wrong with it. I'm just feeling that the new syntax is visually lighter-weight in comparison, and is an improvement overall. It helps get us back to thinking about HTML and yet even further away from webforms. No mental gymnastics for beginners to determine what element will be output in the various `Html.xxxFor()` http://i.imgur.com/FtMVR3N.png
Yep. I hate it. Too many times things get organized based on accessibility instead of usage. So there's a public function at the bottom in one region and the private methods it calls are in another place near the top, not called by anything else, instead if right next to the function that uses them. They seem like a major waste of time trying to organize and keep organized into these contrived groups. Ctrl+f and Ctrl+, have made it so that I don't care anymore. Extensions that make the editor ignore them makes it even better.
We had to ban them at work when the junior devs kept using them, inside functions, to hide massive amounts of complexity from a cursory overview of the code. I'm talking multi-thousand line functions. Sigh.
There's nothing wrong with mutable data types. You need *some* in order to have your program do anything. But I've found since I've started making a conscious effort to use immutable data types, that I have fewer bugs, and my code is easier to reason about. I just wish C# had made mutability a first class member of the language, and that immutable was the default.
Region blocks are usually a pretty clear indicator of violations of the single responsibility principle. Not always but if I find myself starting to type #reg, I usually take a look at refactoring first.
String s = "" + myObj; For a possible null object. A hack? 
I'm just surprised how common it is for people to pass wrong data types. Is this like an everyday thing, or once in a blue moon?
The best part is (as is usually the case with SO) that the answerers' alternative methods use the same example, and when getting into more advance OO concepts it just looks really silly.
https://www.nuget.org/packages?q=Tags%3A"ffmpeg" There are a few different wrappers there.
This. This comes in to play a lot when dealing with for example Entity Framework, where your database tables are mapped to C# partial classes. You can add functionality like this, to make code cleaner by combining fields like in your example, or maybe converting a comma-separated field to a List object, or doing some sort of calculation like unit price * number issued.
Essentially. But I'll give you it's clever. I'd prefer to see this instead if I were reading someone else's stuff: var s = myObj ?? String.Empty;
Ohhh it would be so neat.
lol'd at iPooProvider. Great link. :)
You need to have a Main function so the program has an entry point. If you have one, make sure it is Main not main.
3.5 end of lifes with server 2012 R2... 1/10/2023 :)
I've been wondering this same thing... Coming from Express, i don't want to spoil myself with any Ultimate features that i won't see in Community. It would be cool to see [this](http://www.visualstudio.com/en-US/products/compare-visual-studio-products-vs) updated for 2015.
I'm curious how you are running this code. Because your import (using) statements are valid c#, your static void Main( is java and scanf etc are c.
Ewwww that hurt to read
if you're used to just slinging DLLs around, it's a lot of extra work to configure it properly. even the default templates you get from VS don't fit best practices for most deployment scenarios. but you can work around those particular issues you bring up with some rejiggering of project/solution/config files.
Nevertheless, if your class is used by external code, and in a later version of your library you discover one of your fields actually needs to be a property, all the external code breaks unless they recompile with the new library version. For a class that is not part of a public API, you're right. No need to worry about that stuff.
In order to format the code properly on Reddit you need to have 4 spaces in front of each line, as well as an empty line before and after each the code.
It ends up being a matter of preference whether you want organization based on accessibility or usage or whatever other way. Organization by usage doesn't really matter much when the IDE gives you navigation capabilities, but neither does accessibility or most other schemes. I like accessibility because I can see how the class is used (the public interface) in one place, and how the class does it (the private interface) in one place. Others like you might prefer to see related code grouped. But neither is objectively better.
I've been searching for years for a hack that will allow me to do: SomeObject myObject = null; var myVar = myObject.SomeProperty; // myVar is null, no NullReferenceException 
Too true. I've only found one valid use of regions - as a way to organize existing bad code when you don't have time to refactor it properly.
Lets not forget how bloated VS is. Its perfect for strong systems but infuriating to use on weak systems. I really hope Scrawl is ging to be much more lightweight. That would justify it for my weak notebook. Also dont forget that VS is only free for non commercial purposes. 
Sorry, it actually returns a PageEntityProcessor (actually an interface, not a class, because of legacy naming conventions). But see, you made an *assumption* based on the name that was clearly wrong. The root issue is, of course, *proper naming of things.*
1. Explicit version references will probably do what you need. Presently it requires some manual configuration but the 3.0 interface update will allow you to specify explicit versions using the GUI. 2. Sounds like you should probably think about refactoring how your projects are referenced. If a single project is used in multiple solutions it's likely that it should be its own nuget package outright. We've recently been on a nuget kick at my workplace, and it's not been straightforward how we need to break out our crazy dependency chains. Much like your complaints we have a number of projects that are referenced between multiple solutions. We're slowly mapping our two decade old codebase and figuring out how to best leverage the nuget packages as we create them. We're finding build times decreasing and setup for people's development environments are much easier. Updating dependency libraries (we have several solutions that depend on other solutions being built) used to be a department-wide "Get latest and build" operation. Now it's simply one manager updating the required version number and pushing the change. Overall we've seen a fair number of benefits. Granted I've been working almost full time getting everything straightened out, but once we had automatic packaging builds up and running it's been a much easier migration.
I mean, sure, and this problem can partially be alleviated by the C#6 exception filters. The problem this introduces is swallowing *every single* exception your code could possibly throw. Is it *really ok* if your system keeps running if it gets an out of memory exception? Is it *really* ok if the network goes down? If you're logging and re-throwing that's fine, but anything beyond that and this is runtime problems waiting to happen.
Async is an easy and quick way to increase the genetic sandwich. 
Agree with you as well, I'd much rather see the obvious built in pattern than some hack involving string concatenation. I'd imagine the null coalescing operator is also faster.
I guess Exception Filters in C# 6.0 might improve this, but not sure how much better it ends up: try { Foo(); } catch (Exception ex) if (ex is NullReferenceException || ex is FileNotFoundException || ex is SqlException ...) { }
C#6: var myVar = myObject?.SomeProperty Syntactic sugar for if (myObject != null) myVar = myObject.SomeProperty else myVar = null 
whats the difference between static and non static languages. I learned C# then I started making applications in WinForms. Then I needed to make a web app and my CS friends all said don't use ASP.Net it's outdated, no up to date company will ever use that. They said use JS and Angular JS.
Thanks for the help! I'll get right on that. 
While I agree that null isn't a bad idea (especially in languages where it's the only option), many functional languages like F# have a technique called [discriminated unions](http://fsharpforfunandprofit.com/posts/discriminated-unions/) which is kind of like a supercharged enum return value. One of the downsides of null is that it's context sensitive: although it uses the same symbol, a "null" lastSpousalAbuse value means an entirely different thing from a null getDriverSeatOccupant. Discriminated unions allow you to explicitly name the null value and help prevent "forgetting" to handle it.
For what it's worth, try grabbing the Visual Studio 2013 community edition. It's free, as fully functional as the old Professional edition and will have a lot of the newer functionality and performance enhancements MS have been working on. Visual Studio is in a bit of a golden age at the moment, lots of great stuff coming out of it at a really fast rate.
Also if you are for example updating a Vertex buffer, you may theoretically have a vertex which looks like this: public struct Vertex { public Vector3 Position; public Vector3 Normal; public Vector3 Tangent; public Vector3 BiNormal; public Vector2 TextureCoordinates; } If these are fields are properties you will immediately run into struct mutability hell. If the structs are immutable you would be doing a hell of a lot of extra work for no good reason at all.
&gt; 2) If two solutions reference a project, and the solutions are in different locations, nuget gets all manner of confused. As /u/MrDoomBringer said, this completely misses the point of NuGet. Projects that are referenced by multiple projects should be converted to NuGet packages (which can simply be placed on a fileshare somewhere, no need for a "nuget server"). Putting a .nuspec file in the project folder (and optionally adding it to the project) rather than accepting the defaults makes it easy to see which projects are NuGet packages and which aren't. However, I do think that in order to get real adoption of that process, creating and publishing a NuGet package needs to be mind-numbingly simple, like a single button click (or even during build) without much configuration. I don't think we're there yet.
My main problem with regions is that when I look at a particular class I want to see the code, not a load of regions. The first thing I do is expand all the regions.
Maybe it's because I started programming with Java, but I feel the same way. Methods on the builtins (string, int, float) use the capitalized versions but I don't mind using the alias for type signatures.
Note that the 75 $ is only for version up to 1.x - When they release a 2.0 you need to buy a new license (or upgrade). Who knows how fast they'll proceed if they already ask 75 $ for an non-existent alpha.
odd considering the use of var is a form of obfuscation, in that it intentionally hides information/meaning with something more obscure.
Null is a useful concept. However it shouldn't have been the default behavior. Reference types should have used the same syntax as value types: `string? foo;` The reason is that this would allow the compiler to verify if null cases were handled or not in most cases. `NullReferenceException` in my experience is by far the most common exception thrown. The reason for this is that class members default initialize to null, and you cannot always know if a method can return null or not which makes it easy to forget the null check. In SQL nullable is not the default behavior, as should it have been in C#. But it's way too late now.
At this point, my biggest disappointment with the CLR is that is has no notion of a non-nullable reference. Null can be useful but there are many, many times when I want the type system to help me say "this can never be null". Once I realized this was missing, I started to see all the "not null" preconditions C-style coders write as ugly compensation for an incomplete type system.
There's a VS extension called I hate #regions. It's awesome and it lets region people have their code while largely just moving it out of your way: https://visualstudiogallery.msdn.microsoft.com/0ca60d35-1e02-43b7-bf59-ac7deb9afbca
&gt; hover your cursor over var and you can see all you need to know. Unfortunately that takes 100000x more time than a simple eye movement.
I strongly suggest you take a look at Eric Lippert's wonderful article on Non-Nullable Reference types: http://blog.coverity.com/2013/11/20/c-non-nullable-reference-types/#.VO2DqdLF-UY It's a rather impressive read and, since Eric Lippert was actually one of the guys on the design team for C# for a stretch of time, I find it an enjoyable read.
 (S (NP It) (VP 's (ADJP (NP odd considering (NP (NP the use) (PP of (NP var)))) (VP is (NP (NP a form) (PP of (NP obfuscation)))))) , (SBAR in that (S (NP it) (VP (ADVP intentionally) hides (NP information meaning) (PP with (NP something (ADJP (ADVP more) obscure)))) .) You left some information out of your comment, making it more obscure. So I fixed it for you.
Some languages have had powerful type inference built into them from the start and it is just accepted as ordinary native style for those languages, and they are all the better for it. It's only controversial in C# among people with limited exposure to other languages. The hang-ups people have about it in C# are knee-jerk, cultural, historical and irrational. (Note how they don't miss the explicit types in LINQ syntax or lambdas - new features that have only existed in a version of the language with type inference built-in.)
As mentioned it's in C#6 but for now: public static TOut NullSafe&lt;TIn, TOut&gt;(this TIn obj, Func&lt;TIn, TOut&gt; memberAction) { return (!EqualityComparer&lt;TIn&gt;.Default.Equals(obj, default(TIn))) ? memberAction(obj) : default(TOut); } var myVar = myObject.NullSafe(x =&gt; x.SomeProperty);
When people start doing this, it's time to start working in a different language.
Agreed. I especially like using them on my controllers in MVC applications. 
It does? Running a asp.net project now, if I kill the tab VS drops out of debug mode into coding mode and if I hit the stop button the browser window/tab is destroyed. Im running VS 2010 currently (sigh) and this is normal behavior across all versions I have used. 
You're mixing a WPF application and a console application.
I think this only happens with IE.
&gt; Visual Studio is pretty much the best developed IDE out there and, while this is definitely a good thing, it will spoil you. I completly disagree with that one! It is definitly the best for C# - as the lack of other specialized IDEs or Plugins for Eclipse e.g. But that's not a big thing then... it reminds me of [Ghostbusters 2](http://en.wikiquote.org/wiki/Ghostbusters_II#Dr._Peter_Venkman): &gt; "We're the best. We're the beautiful. We're the **only** Ghostbusters." When it comes to C++ this is thing is hardly to call an IDE! Refactoring? (Perhaps just Renaming?) IntelliSense with lambdas? Jumping to correct method with polymorphic objects? And the lack of **free** plugins is also a negative thing. No, imho people call this "the best" because they lack knowledge about other Toolstacks... Imho the JetBrain products define the status quo of IDEs nowadays.
I want exactly that! I run 2013 or possibly 2012 - can't actually remember. I'm on a different OS at the moment.
Yes.
aw :-(
What about when C#6 hits full release and you can just do this? public int Thing { get; } I've already had some fun doing that in the CTP.
What type of project did you create? Regardless of the project type, be it a Windows Forms application or a Console Application, the default should contain a Main function. The only possible explanation I can think of is that you've somehow removed the Main method by accident (or unknowingly of what it does).
ISTAB
Using the recommended Dispose pattern, which is a mess and totally unnecessary as rarely any classes deal with unmanaged objects directly. Usually there is a wrapper class that manages these. Discussion: http://stackoverflow.com/a/2163702
2015 and we still can't avoid bugs with reference vs value equality.
I've played around with contracts, and I'm not sure they're the answer. Sure, with contracts, I can attempt to prevent compilation if static analysis ever indicates that a null is passed to a variable where null is possible but not allowed. However, there's a problem - that we've formulated it as 'possible but not allowed'. Wouldn't it be better if you could just make it impossible? Say you have an object reference that gets passed as a parameter; it's still possible to attempt to pass it, but you could add a contract or argument validation to not allow it. Try to do the same for an `int` - you just can't, it's strictly not a nullable type (unless you explicitly use `Nullable&lt;T&gt;`). What if there were a way to design the code such that some object references just are impossible to be null, which is stronger than 'possible but not allowed'?
Sort of surprised this hasn't been mentioned: var myVar = myObject == null ? null : myObject.SomeNullableProperty;
I would expect the Cortana APIs to be similar to the Windows Phone ones where you get to implement custom commands. For example current ones on my phone: "Wikipedia search banana", "Netflix find House of Cards", "Skype call &lt;name&gt;", "Allrecipes, what should I have for dinner?" I would also expect Microsoft to implement the window management calls (Cortana open /u/I-Hate_Reddit 's app, Cortana close this window). If you want to use the same speech recognition that Cortana does, the API is here: http://www.bing.com/dev/en-us/speech
Learn about using the Option&lt;T&gt; type rather than allowing null. It's a bit confusing at first but once you get used to it, it's much nicer. https://github.com/tejacques/Option http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c
Why are those things mutually exclusive? Why not SqlRepository : IRepository? The 'I' prefix is in no way an excuse for poor naming of derived classes.
What about FirstOrDefault instead of [0] ? 
How do I test the Count property?
You could do something like: var list = (from row in thisDataTable.AsEnumerable() where row.Field&lt;String&gt;("value1").Trim() == _thisValue select row).ToList&lt;DataRow&gt;(); if (list.Count &gt; 0) { MessageBox.Show("list is not empty"); } else { MessageBox.Show("list is empty"); } However, as /u/Kausta1337 said, you can leave your code as-is and swap the [0] reference out for .FirstOrDefault(). You will see this a lot in LINQ code as a pretty standard practice: DataRow row1 = (from row in thisDataTable.AsEnumerable() where row.Field&lt;String&gt;("value1").Trim() == _thisValue select row).ToList&lt;DataRow&gt;().FirstOrDefault(); if (row1 != null) { MessageBox.Show("row1 is not null"); } else { MessageBox.Show("row1 is null"); } 
If you think like that, then all comments are redundant. Regions can be helpful to organize code, like keeping all constructors in the one place, so that if you need to create a new one or modify an existing one you can see the conventions you've used before as well as not having to search or scan for every constructor in a refactor. However, if your class is large enough to require the use of regions then that could be your real problem.
While this is interesting, why on earth would you use Convert.ChangeType to convert a string to an int? If you use Int.TryParse you could completely avoid this issue.
Thanks. I tried your second example and it works. I guess its better to stick to standard practice.
Well, F# might be what you're looking for, it loves immutability but still allows mutability as it always needed in some form.
I think Option&lt;String&gt; DoSomething(...) is more descriptive than String DoSomething(...) It the former, I'm explicitly saying my function might return nothing and you should handle that situation. In the latter, its up in the air, it might return a reference to a string, or it might return null, who knows. Maybe its documented, maybe its not.
I do to. They should have done it that way from the beginning. But they didn't, and pretending that they did just adds complications.
sengoku has the right answer, but I'm curious, what is the source of the data table? Because if this is coming from a SQL query / command then there are probably better ways to do this.
very true, thanks for the insight.
It's a Console Application the only thing I have typed out is "using System;" I'm trying to learn from a book called "Wiley - C# 5.0 All In One For Dummies Jan 2013" It told me to do that but said it'd be successful or maybe im reading the book wrong?
Visual Studio 2013 uses updated .net version doesn't it?
Generally, by putting your where clause in your query. var query = "select col1, col2 from table where col1 = @findMe" using( var cmd = new SqlCommand(query, connection)) { cmd.Parameters.Add( new SqlParameter("@findMe", value)); ...etc There's other things that I prefer doing too, like mapping the data rows to objects, but that requires extra helper classes and is a little beyond beginner level stuff
Except option types prevent NullPointerExceptions. However, Option types are also much better when used with pattern matching.
Do you need to verify the entire format (including the hyphens), or would it be sufficient to do something less, such as verify that every number in the string consists of exactly two numeric digits?
I think it would be alright if I just check the two numeric digits, whatever separates them doesn't matter so much
This is defiantly possible. Simple read the CSS file and then put the text into a text box. My he only thing is that you might lose the formatting, though you will have to test that because I don't know for sure. Just do a File.Open and read the contents of the file. Then save it back. *HOWEVER* I am concerned that you are mutating a resource the website relies on directly. If something goes wrong, their website will be broken... And guess who they will blame. Make sure you do a few things. First of all do not mutate the main CSS file of the website. Break things down to multiple CSS files. That way if something goes wrong it will be contained to a smaller part of the site. Second of all make sure the system backs up whatever it mutates. At least you will be able to restore their fuckup. 
After thinking about it for a minute, I think it's actually easier in this case to verify the whole format, like this: string setPattern = "^([0-9]{2}-)*([0-9]{2})$"; That regex defines two groups. The first group looks for stuff of the form "48-" (two numeric digits followed by a hyphen), and then the * means that this pattern can be repeated any number of times, or not be present at all. Then the second group just looks for two numeric digits, and has no repetition operator. Using ^ at the start and $ at the end anchors the expression to the start and end of the string, respectively, which means that the entire string (and not just some substring) has to match the regex. If you want to allow the separators to be any sequence of non-numeric characters, instead of requiring them to be single hyphens, that's a simple change: string setPattern = "^([0-9]{2}[^0-9]+)*([0-9]{2})$";
Thanks a million, this is incredibly helpful! I didn't know about the * pattern repeater, or the rest of the syntax info, really. I appreciate it!
Not once have i heard of standard colors for a MVC flowchart. We usually just surround the box in 1 bigger box where it says which layer it belongs to.
No problem! http://regular-expressions.info is a great resource for looking up operators and such; it's been my go-to resource for regex info for years. :)
just put it in bookmarks, thanks
You do still need one loop to go through each character in the input string, just not a loop to search for anything after that. Here's the method I wrote to do this. public string Encode(string input, string[] mapping) { string upper = input.ToUpper(); StringBuilder output = new StringBuilder(); foreach(char current in upper) { output.Append((current &lt; 65 || current &gt; 90) ? current.ToString() : mapping[current-65]); } return output.ToString(); } for the "current" character we can just subtract 65 from its integer value and get a number from 0 to 25 which we can use as an index into the array. This works because the [ascii encoding](http://www.carousel-design.com/ASCII_Chart.gif) of letters are in order from 65 to 90 (inclusive). The result is a single integer subtraction followed by an indexed array access, rather than doing an array search followed by the array access.
I'm curious about something. Is there is a specific reason you had the * operator as the first element verses the second? Or was it just stylistic? ^([0-9]{2}-)*([0-9]{2})$ verses ^([0-9]{2})(-[0-9]{2})*$
&gt; If you think like that, then all comments are redundant. Clearly not. That's why I called out an example of a redundant comment. Good comments give information that isn't in the code.
As I said, just curious since there are some people who know the internals of regular expressions to know how to optimize them better than me; I know there is a different in processing in the above example but I don't know which one is "optimal" outside of this trivial case. Thank you for answering.
From the docs: &gt; Get the value of a 'Some' option. A NullReferenceException is raised if the option is 'None'. ref: https://msdn.microsoft.com/en-us/library/dd233245.aspx
So you mis-spelled NullReferenceException in your library. That doesn't change anything.
You could always use the default values with default(T). It is possible to completely avoid NullReferenceExceptions with the right library but that library author may need to make design decisions that aren't right for everybody.
Hint: Stay away from EntityFramework when you're using MySQL. The connector is broken internally, once you have slightly more complex queries it won't be uncommon to run into a NullReferenceException within the deep internels of the MySQL provider.
Regions are a really bad idea in the hands of devs, who think hierarchically anyway. Whenever I see regions in a code file, I usually have to expand at least one, often more than one, just to see **anything** I might be interested in. Do we really need a #region for the class-- the only class in the file-- with a nested #region for methods, another #region inside that for public methods, ... IMO, probably 3/4 of the use of regions is misuse of regions.
You can just use Ctrl+M Ctrl+L to expand all collapsable code blocks, including regions.
3) Virtually all use of Nuget leads to a complete mess of binding redirects and multiple projects referencing different versions of a library, etc. 4) Nuget has profound legal problems in an enterprise setting. In my company, legal has to approve which licenses we are allowed to use (for completely legit reasons). Good luck getting a team of 15 devs + occasional hired-gun contractors to stick to packages using that particular license.
I'm not exactly sure what you are trying to do here - the code looks really odd, what with the Program class and the static Main method. This looks more like code that was copied 100% verbatim from a C# console app, and pasted into an ASP.NET web form that uses a master page. At any rate, you cannot access GridView1 from the context of your Main method, because the method is marked as static, and static methods can't access instance objects (such as GridView1).
Ah, I see. I'm not a guru on regex engine internals, but I don't think there would be a meaningful difference between the two (EDIT: unless you're running it on a very large input, or running it many many many times). The second form might reduce backtracking, because it puts the "must-be-there" group first and then the optional/repeating group after it, while the form I originally put it in will match the repeating group until it hits the number with no trailing hyphen, then go back two characters to test the match on the terminating group. But the match pattern in this case is so small and simple I doubt it'd make much difference in real-world runtime. Without running any benchmarks to be sure, my guess would be that the most "optimal" form for this would be to use the second variation you posted, but with non-capturing groups: ^(?:[0-9]{2})(?:-[0-9]{2})*$ And then, for a much larger speed gain, run it in an engine which uses an old-school algorithm without support for backreferences. Since you have some interest, I highly recommend [this article](http://swtch.com/~rsc/regexp/regexp1.html) on regex engine implementations, and how much faster they can be when they don't extend the original regex spec to support things like backreferences.
Yeah, me neither. Just checking, thanks.
I'd just avoid colors / keep the ink ratio down. Grouping geometrically looks better
This was the advice I was given by someone else to have the data in the data adapter -&gt; data table. It is supposed to pull data from that database by month and put the data in the data adapter then into a data table. I am now trying to view the data table in gridview so that I can (not implemented yet) export it to an excel format. Do you have any suggestions towards displaying the Data Table?
Thank you I should have done that it would have been. This is a good community and you guys helped me figure out a problem. Next time I'll do that if I can't I'll come back here appreciate the tip. 
I think for fun we are going to use the following: - Controllers - dark yellow/mustard color {Kirk} - Models - red {Scotty} - Views - blue {Spock}
So using 2013 would be better then 2012? 
I hope you do a good job. Everything I write a seemingly complex component to break it into pieces, make it more modular, whatever, I actually end up adding complexity due to the number of functions increasing. More functions hides code from me, masking complexity, but unless code is truly improved by this process, complexity is not reduced.
Assuming you have a Site.Master and a Default.aspx, you want the code in Default.aspx.cs to look something like this: using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; namespace WebApplication4 { public partial class _Default : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { // Your code goes here } } } This is the usual structure of ASP.NET code-behind files. The structure you have in the code-behind file (class Program, static void Main) is common to console applications.
I changed the architecture of the app, a total rewrite. I have been working 15 hour days, on my own time, to make sure it succeeds. The software as it is is riddled with bugs and even the simplest feature change is hacks on top of hacks. I could fail and look like an ass, but I am working hard to succeed. It's just a simple CRUD web app, which I have built 5 or 6 from the bottom up on, [following this architecture guide](https://msdn.microsoft.com/en-us/library/ff650706.aspx).
True, in terms of extensibility, but I'm thinking of the turnaround time for the release of bug fixes for the VS core codebase. And, from what I read, Scrawl will have an 'extensive' plugin API. So I guess we'll have to wait and see how that pans out.
Being and MVP means I do a lot of community contributions and Microsoft recognizes me for it. It does not mean I am always right in everything I say.
I have to disagree here, personally I would rather have every implement IDisposable. But then again I use a lot of database centric code that requires those classes to clean up their connections. File system handling is another area where IDisposable comes into play, oh don't forget anything that deals with streams. 
Don't feel too bad. It took me quite a bit to understand async-await. I had the same issues coming to grasp with LINQ; I would foreach or for loop everything despite LINQ usually being a superior choice for clarity (not exactly speed).
So replacing the beginning with that just makes the web application more web-application-like instead of console application-like, correct? How would you fix the rest? Because I got at least 9 errors after replacing it. In other words, how would you run the SQL query in a web application? I'm not too familiar with stored procedures.
This. Visual studio is amazing.. when I try eclipse, it is all wrong. That said, if I had started as a java dev it might be the other way round. That said, a poor tradesman always blames his tools haha.
(Mostly) consistent integration across the whole Microsoft stack
An array of function expressions? Then your "takeDamage (amount)" can pass the amount through each func. That allows you to easily add / remove modifiers.
Or just ReferenceEquals(1, 1)
Some don't have the 'option' of spending $150 or more on ReSharper. Screw 'em ? (edit: or is there a freebie i dunno about?) /devilsadvocate
&gt; Why is await being used with an async method when synchronous alternatives exist? (ex: await WriteAsync vs Write) One reason is that some underlying IO libraries are async at the OS level. "await WriteAsync" is essentially free, whereas synchronous "Write" is expensive and blocking. Another reason is "turtles all the way down." Async/await requires the return type be a Task. Combining async/await and Task.Wait() is tricky, so async/await tends to spread throughout your code top to bottom. If you're going to make something async in the future, making it awaitable now means you won't have to change the signature, won't have to change the signature of the calling code to async/await, etc. all the way up the stack.
So I could have multiple of these going on at once at the OS level if they're truly async?
I guess what he is saying, in the article, is that you should ask the question "why would this ever be null?" and eliminate the issue further down the stack. If you make it impossible, it shouldn't happen and thus you shouldn't need to check for it. He has a really good point and I think his approach will make code cleaner and more bug free. **However**, null is still very useful. What he is talking about, is that there shouldn't be null in a context that does not make sense. So if say: string CombineFirstAndLastName(string firstName, string lastName) { if (firstName == null) { //Uhhh... this cannot happen. Something has gone terribly wrong } } However there are instances were Null is actually useful. Take for instance when something is not available, like a resource. For instance: //Say ID can be "Ab12C9" string IDString = getUserID("someUsername"); What is an invalid value? What happens if the user does not exist? I don't want to throw an exception because that makes for clumsy code. I also don't want to come up with a string that represents an "invalid" value because I have to define that and it can be anything. Null in this case would be a good idea, because it's the universal "this doesn't exist". It's also a good value for "I couldn't find this". The lesson we should take out of this, is that null should not be passed far up the call stack. Nulls are valid but they should handled in the place where they occur. That the null value of *IDString* shouldn't be passed into the rest of the logic because its not valid, thus the rest of the logic shouldn't be checking for null.
[What Color is Your Function?](http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/) is a good overview of this too. The examples are JS but it applies to any language with async features. (In JS it's an even trickier concept, since there's no `await` and no explicit return types!)
Thanks for the link! ES7 will have await (hopefully) :)
When do you find you need that? I usually only use inheritance for things like template methods, so I don't find it confusing. Plus, syntax highlighting.
I greatly prefer the Task method chaining over async/await. To me, return something.DoAsyncThing() .ContinueWith(task =&gt; task.Result.SomeProperty); is just so much easier to read and actually see what is happening.
As /u/Beniskickbutt mentioned, you need some curly braces. Just an example with the code formatting: if(condition) { //some code here } else if(anotherCondition) { if(insideCondition) { //some more code } else if (anotherInsideCondition) { //some more more code } } else { //CODEZ } Normally even if there's only 1 line of code, I like to put curly braces for readability. When you properly tab or space, you'll be able to see where the braces line up and that will help you figure out scope. Just my two cents
Your code is hard to read because the indentation is off. That would definitely throw me off if I was looking for a missing curly brace or other syntax error. I suggest you format your code by pressing Ctrl+K, Ctrl+D or going to the Edit -&gt; Advanced -&gt; Format Document menu.
&gt; You didn't explicitly state the type information in your comment, and when I put it in, it became less readable. Yes exactly! Just like var! Sure you could make the argument "well the type is declared *somewhere*", like in some precompiled reference or auto-generated library, but in the context of your current code file, it may not be explicitly declared, so you lose the ability to quickly make a judgement call without relying on extra tools (intellisense, etc).
Thank you switching right now. 
I've done enough javascript to hate this. It becomes a mess real quick. 
&gt; Use a semicolon at the end of every command or assignment I think you're confusing C# with JS, in JS semicolon is optional, in C# it's mandatory. &gt;think and using a switch instead Since OP require two variable to be checked, he will need [Tuple magic](http://stackoverflow.com/a/7967631) for the switch.
When do you find it necessary to distinguish these things? Do you use Hungarian notation in all cases?
You've got to be joking. I worked on a large GUI code base that had this everywhere. It's a nightmare. Maybe if your ContinueWith lambda is always that small (though if it is, the async variant is just as small), but this was code doing a lot of work in the ContinueWith lambda. Further, exceptions are wrapped in AggregateException and you have to have a bunch of boilerplate to unwrap it again. And probably worst of all, if there is some error somewhere in the lambda, Resharper can't work out where it is so the entire lambda is highlighted red. The method chaining stuff is the previous version that is, IMO, completely obsoleted by async/await.
Unfortunately the "hover over var to see the type" feature is not working on reddit. Must be a bug.
&gt; More functions hides code from me, masking complexity, but unless code is truly improved by this process, complexity is not reduced. Assuming you name the functions well, how does this not reduce complexity? If you have to read 50 lines and then think "ah, so this froogles the boogle", surely it's better to just read froogleTheBoogle()? The argument I've heard from people IRL about this is "but what happens if froogleTheBoogle doesn't work?!!". What happens if everything doesn't work? You debug it and fine out, but now 99% of the time you don't need to look into froogleTheBoogle when reading the function that calls it. 
Whilst I think option types are great and [use one in C#](https://gist.github.com/Poddster/965889a7e1a145dea4be), I think both of these linked ones are a bit ick. The first one: if (option.TryGetValue(out value)) { // Do something with the value Console.WriteLine(value); } else { // Do something else } There's literally nothing in the compiler to stop you using value in that else case and if you do you just end up with InvalidOperationException, which is a renamed null pointer exception. I remember seeing the May class at the time and thinking it had similar issue, but with huge amounts of function chaining and random lamba use that I didn't really need. I can't remember if I came up with mine or copied it from somewhere (most probable), but it forces you to do this stuff: Option&lt;String&gt; my_opt_string = function() if (my_opt_string.HasValue) { String x = ((Some&lt;String&gt;)my_opt_string).Value; } Which is all I want. Of course you could argue that it's easy to do ((Some&lt;String&gt;)my_opt_string).Value without surrounding it in .HasValue, but it's more "obvious" that you're missing something if you didn't, and .Value is inaccessible without doing the cast. 
"I need a bigger monitor, I've got 15 levels of indentation here" One of the nicer things about await is often you are doing this blocking lark when doing a series of operations, which are dependant on the previous one. It doesn't deserve to be broken further down into methods, with the old style ContinueWith it becomes very, very nested all to quickly.
I see, yeah I thought this could be the case, but I dont find a similar article for WPF. Do you know where I can find one? 
I googled for "play audio wpf" and found immediately on the first link a solution. I'm sure you're also capable of using Google and finding a related article.
I find LINQ to be more readable than iteration 9 times out of 10. 
The kind the article is full of? Ctrl-F "sundae"
This is the same thought I have but I don't know why; just typical MS behavior I guess. It would be so powerful and they worked so hard to just make it almost open source. Even has Halo branding :(
am not saying use var everywhere, am showing a usage of var that make the code much better. looking at the entire code dos make my point, try to look at my code and understand what i was trying to do, you will see that longNamespaceName.LongClassName gives you nothing, it's just makes you read more and break the look of the code. what tells you "the nature of the object we are working with" like you put is is classa, longNamespaceName.LongClassName is just the reference type it could have been obj as far as the code in concerned.
&lt;Enter&gt;&lt;Enter&gt;
Sorry about that I kinda panicked when my post looked liked a mess. My bad.
Assuming those functions are truly named well and are ideal functions, then yes, it reduces complexity. The major problems I've seen are: 1) More functions give the illusion of decoupling between the functions, when in fact the process is linearly-dependent and the functions are part of a clearly unified process, with no beneficial isolated behaviors that couldn't be handled just as well by comments. 2) More functions making code architecturally harder to comprehend all at once, making refactoring, rewriting and enhancements difficult. Makes it harder to see "the bigger picture" of what the code is actually doing, rather than how someone decided to split one function into smaller ones. Every function has its own context and requires context switching. It's usually a small penalty, except in the cases where you breaking a large function into a smaller one hoping it somehow removes inherent complexity from the task at hand. Functions add more call nodes and scopes to the graph. Each individual function has reduced complexity, the graph's complexity as a whole has increased. Note that I am not against adding more functions if it truly reduces overall complexity. If your functions are truly named well and are justified as being their own individual units of code evolution (and have use in more than one context), congratulations. Proper naming, scoping and structure of functions is something I have found not many people good at. Discerning ideal structures and patterns, and reflecting that with isolated scopes and good names is a difficult problem in computer science. There's often a knee-jerk reaction to a "long" function because it's hard to comprehend. Breaking that into functions, rather than simply analyzing that long function (if it is structured well) doesn't on its own help you figure things out and is instead often a procrastination technique to stepping through the code and figuring out what's really going on. I for one wouldn't want a complex-looking function broken down into smaller components by someone who didn't already know what it was doing. But people who try to "refactor" these functions simply because they don't want to accept the inherent complexity of the task often end up rewriting solutions from scratch, missing edge cases from the original code, wasting company time that could have instead been spent in the debugger, and creating a solution more mentally tasking than the original. This is not a law or rule, just an observation of mine.
I don't use either of them. I have my own that I use at work that I like better (but I can't open source it sadly). The links are just there to get the ball rolling so to say.
It's easier to explain using an example. If your option can hold a `null`, when doing interop you can land in a place like this: scala&gt; case class Person(id : Int, name : String) defined class Person scala&gt; val opt : Option[Person] = Some(Person(4, null)) opt: Option[Person] = Some(Person(4,null)) scala&gt; opt.map(_.name) res0: Option[String] = Some(null) which means that doing a 'nested' map can be surprising: scala&gt; opt.map(_.name).map(_.length) java.lang.NullPointerException at $anonfun$2.apply(&lt;console&gt;:11) unless you make it very explicit: scala&gt; opt.flatMap(p =&gt; Option(p.name)).map(_.length) res4: Option[Int] = None Now, in C# (where `null` is pretty common), I deemed it would be easier for me to automatically convert that option to `None`, so: var res = opt.Select(x =&gt; x.Name).Select(x =&gt; x.Length); If Name is null, the option is ^ going to be None&lt;string&gt; here -------^ would give you `Option.None&lt;int&gt;` automatically. 
Oh, yeah, the 'full disposable pattern' is only useful when the class is holding onto *unmanaged/native* resources - then it's kind of a must. It's also mentioned in the linked answer. If you only handle managed resources (which includes managed DB connections or managed files), you can just use the 'simple' implementation :)
I was referring an official article on microsoft's website, like the one I found for Windows store app in Windows 8, not any articles from a third party source. But whatever... 
Would be better to use OWIN for this instead.
You also want to check out [Steven Toub's](http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266920.aspx) articles on MSDN. His 6 part series is one of the best out there to cover some more advance yet common concurrency scenarios.
What you've written works, but it uses the default sorting algorithm, which is actually a much more efficient one than bubble sort. If you need to write a bubble sort, you'll have to write it yourself. There are many articles on this -- just search "c# bubble sort" on google and you'll get links to plenty, such as [this one](http://www.c-sharpcorner.com/UploadFile/3d39b4/bubble-sort-in-C-Sharp/). (I have no idea if that's the best one, it's just a random one I grabbed.) When you're doing real work -- i.e., writing a program meant to be used, rather than writing one in order to teach yourself specific concepts -- you'll want to use the built-in sorting, as you've done in your example code.
Sorry - I didn't clarify very much in the previous post. The previous code was such a mess that I decided to start over with a web application that uses a stored procedure. For the stored procedure, I used this website: http://weblogs.asp.net/stevewellens/automatically-generate-stored-procedures-with-visual-studio which I think executes and stores the results into DataTable1 in DataSet1.xsd right? Anyways I don't think it was working so I was asking how you would run the SQL query as a stored procedure or give an example. I tried searching how to create a stored procedure but none of it was really giving a helpful example in a code-view. Edit: Actually, how does one create and run a stored procedure on a web form/application in visual studio 2010 AT ALL? That website was not helpful at all after I tried it some more. And I can't find a a good example or instructions on how to create a stored procedure in VS2010 for a web application anywhere. Edit2: I think I just got stored procedures to work. The linked website sucked but I found a video by a university for it. This looks about right, right? Someone please tell me it's right cause I'm really not sure. http://puu.sh/gdzjv/f1bfa2df52.png I guess my big question Now is how do I make it so that I can display the stored procedure's results onto the web form? And after that, how do I make it possible to change the stored procedure's date values so that I can display data from different months? The date value on the stored procedure looks like this: WHERE PTH.CHECK_DATE &gt;='07/01/2013' AND PTH.CHECK_DATE &lt;='07/31/2013' Should I make an editable blank or a dropdown list of date ranges that will change those dates? I know how to make a list or a text blank but I have no clue how to link that to the store procedure and make it so that the typed in dates change the dates in the stored procedure and then run the procedure. The major question is how do I display the data from my stored procedure though, since that has to happen before all editing dates can even begin. Edit 3: I got GridView to work but I can't get "Export to GridView" to work. More importantly, I still don't know how to adjust the date range/parameters of the stored procedure on Visual Studio 2010 as mentioned in Edit 2. Assistance would be appreciated.
If you can live with the limited functionality of .NET core which has only a subset of all namespaces of the "normal" .NET then yes. If you have several apps which need different versions of .NET core they can live happily side by side.
I would like to. Is there any improvement in the authentication modules that integrate with OWIN? I have been wondering if the identity mechanisms and examples introduced with ASP.NET MVC 5 are still the best ones to use.
&gt; I have my own that I use at work that I like better (but I can't open source it sadly) From a 10,000ft view: It it roughly the same, i.e. a single "option" class that provide Option.Some and Option.None (or equivalent)? Or something like the other one, based on inheritance? Or a third, more interesting way?
thanks for sharing newoodworker... 
So you mean there is still a need for Mono even after this?
Oh man, totally over your head. &gt; You didn't explicitly label every part of the language with grammatical type information. The nouns *are* the type declarations, I chose them because nouns, like a type declaration (in essence), are a description of a person, place, or thing. When I replaced the nouns w/ bleh, it was like replacing a type definition (int, object, etc) w/ "var". &gt; I edited your comment to label all the parts of the grammar with their types. Your example erroneously assumed we had to dive deeper into the language, which would be like saying "well if you just used asm instead of C# it's obviously less readable". 
maybe it would be the easiest for you when you dont use else at all. you dont you just make "if" for everything?
That's like saying I prefer getting stabbed... than shot. None of those things I enjoy.
I found another example on the same site that you linked, can you (or someone else) give your opinion on it? using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace Buble_Sort_String { class Program { static void Main(string[] args) { string[] s = { "Bill", "Gates", "James", "Apple", "Net", "Java" }; string temp = string.Empty; try { for (int i = 1; i &lt; s.Length; i++) { for (int j = 0; j &lt; s.Length-i; j++) { if (s[j].CompareTo(s[j + 1]) &gt; 0) { temp = s[j]; s[j] = s[j + 1]; s[j + 1] = temp; } } } for (int i = 0; i &lt; s.Length; i++) { Console.WriteLine(s[i] + " "); } Console.ReadKey(); } catch (Exception ex) { Console.WriteLine(ex.Message); } } } } [Source](http://www.c-sharpcorner.com/Forums/Thread/159202/bubble-sort-using-string-array-in-C-Sharp.aspx)
Yes, because Mono tries to bring the whole .NET framework to Linux and OS X. The subset called .NET Core has no dependency on Mono.
Why are these problems for you in the first place? -Test your work, write unit tests if you have to -Format your code properly. If you need to use something like CodeMaid/Resharper/StyleCop to help you, then look into it. -Make sure you check in all the required files each time you commit -Get clarification if you have questions. If you need to, get all your directions in writing through email or something that way you don't forget requirements or specs
&gt; Why are these problems for you in the first place? I'm not sure. Like I said, this is my first dev job outside of school.
thanks (y)
You should be loading the array from file, not hard coding all of your values 
Firstly, you need to cast the null to the same type as SomeNullableProperty. That's OK, but it's starting to become unwieldy and I was looking for some kind of hack or magic trick, whereas I would call this is the orthodox approach.
&gt; grasp that nouns are the objects on which verbs (methods) operate Yes! you got it!
Tbh, do something that interest you. Take a simple to idea like tic tac toe and start simple, then just keep on adding to it. You could start with the 2 player game, Then add a score board, Then read write the score board to disk, Then add some ai, Etc. Have fun. If you get stuck ask the question here After you have finished ask for a code review, someone will always point you in the right direction
well, i could try to create some sort of little artificial world. where it generates people and jobs and thoose people seek jobs. i have no fucking clue on how to get all that calculated. seems like a challenge
I would not do that just yet, but take it down a level or 2. So you want to create a virtual world, start with an interactive person first where you type a command in and it responds. I would start this by writing out what you would want it to do. Keep it simple as you are just starting out. Then keep on adding small bits to it. It will most likely become a mess, but don't worry about it, its all about learning 
[Officially](http://blogs.msdn.com/b/somasegar/archive/2014/06/03/first-preview-of-visual-studio-quot-14-quot-available-now.aspx), &gt; Visual Studio "14" will most likely be available sometime in 2015 Could be as late as [October](http://winsupersite.com/windows-10/microsoft-details-schedule-windows-10) which is the possible release date of Windows 10 RTM, when it's expected VS RTM will be completed as well 
Is your C# app compiling to x64? Possible the C# EXE is compiling to x86 and looking for the x86 reg key. Process Monitor from sysinternals.com will show you what reg keys your app is accessing. Run that, reproduce the issue, filter on your EXE and look for the GUID.
By default, the Any CPU builds of executables have a "prefer 32-bit" flag set. It's in the build properties tab. Uncheck that or your executable will run as 32-bit even on 64-bit machines.
This is very likely the solution! I won't have time to try it out for a few days, but thank you!
Thank You for the coding styles documents. These are a good place to start. &gt; should not be considered a save button to press whenever you made a change I actually thought the exact opposite. I would post to SVN at the end of the day or before Lunch. Knowing that, I can see why they would be aggravated.Tak &gt; notes of your design decisions and the consequences thereof. This is a great idea. &gt; the quicker you accept that throw-away code is OK, the better your final implementation will be. This was probably the biggest change from coming from a school environment. In my school, they wanted everything to be configurable and reusable. But in the real world, they just want simple, concise solutions. &gt; Read at least the first part of Domain-Driven Design by Eric Evans I will check this out, thank you! &gt; Guidelines to Test Driven Development[5] Also will check this out! Again, Thank you.
Do you have a team lead? Does your company allow pair programming? Can you schedule monthly 1-on-1's with your team lead/manager? What methodology does your company use for development? I feel like them (your company) waiting this long is a major red flag that tells me your company isn't interested in you developing your skill set. Does your company have "start-up" days or development time for you do research/learn new and interesting concepts ideas?
&gt; Do you have a team lead? Yes. But this review is the first time I've had any interaction with him. &gt; Per the "probation" I have weekly meetings scheduled with him now. &gt; What methodology does your company use for development? Bastardized agile. We have five devs and five PMs. I often hear "we use a modified agile because regular agile doesn't work for us." This is my first dev job so this is my first experience with Sprints, Points, etc. &gt; Does your company have "start-up" days or development time for you do research/learn new and interesting concepts ideas? No. We are usually too busy to not have spill over in the sprint, let alone research anything new. Unless there is a research task for a client-requested feature or change, research doesn't get done. 
So can I work on existing solution with the new framework/visual studio? I've had solutions throw some errors in the past because I opened it up in a newer version. 
Unless you're using deprecated technology or framework (like, say Windows Mobile projects in 2010 upwards, Crystal Reports^god ^I ^hate ^it) problems are usually configuration difference (referring to incompatible assemblies, missing reference path/values, etc, 3rd party extensions not yet installed). Refer to [2015](http://www.visualstudio.com/en-us/products/visual-studio-2015-compatibility-vs.aspx) compatibility list and also check [2013](https://msdn.microsoft.com/en-us/library/hh266747.aspx) detailed list to gauge the possible difference you might face.
Every DataGrid from Microsoft is broken. I've given up using editable cells.
Interesting. Thank you for that info. Excited about the new changes in c# just wasn't sure I'd be able to implement them right away. Thanks. 
Imagine this: SomeType helloThere = new SomeType(); Oh wait I needed a list of them? List&lt;SomeType&gt; helloThere // you need to edit the left = New List&lt;SomeType&gt;(); // and the right... 
Regions are pretty useless in notepad, because the main benefit is that they're collapsible. 
It doesn't effect you, but it might affect you. 
Myeah... For me, I rarely need to *see* the type. There is always typing "." or hovering over var.
There have been plenty of implementations like this already, and there's a long discussion on the Roslyn forum about something like this. Check it out.
I always use public fields when possible. When you're not developing a public library, I don't really see what the problem is. Also lets me use readonly.
Point 3 is made worse by the fact that the C# compiler routinely generates invalid (and thus unverifiable) code when assembly versions are mixed; the compiler notoriously cannot handle that case, and the verifier can't take redirect profiles into account.
Or something silly like NotNull&lt;Customer&gt; customer; PrintCustomerNumber(customer);
Just post a picture of your rectum next time, save everyone a lot of time.
That's a problem with this type, isn't it? Structs must always be default constructable, and I don't see any code here that prevents a default-constructed NotNull&lt;x&gt; that does contain a null.
Which is why the compiler would need to support it. This type is pointless as a member variable in a class.
Actually, NotNull&lt;T&gt; could have a type constraint that T must support "new()", then in the Value getter, it could set the field to new T() if it's null. This would mean NotNull&lt;T&gt; can't be null, and guarantees its Value is never null either, despite its value being a reference type. It wouldn't be terribly helpful though.
I can't think of any circumstances where that would be desirable. When you require a non-null parameter, you're usually saying "i want the user to supply some data here". A default constructed thing is no more useful than null for this.
&gt; The important bit is the pattern. Async / await makes it easy to defer your await until later on: It's simply a matter of replacing 'await' with 'var result =' and await'ing when you please. You are confusing two different aspects. When you do 'var result =' and then do some other work before calling await, that is parallelism which is related but not the same as async. When you call await it may look like you are blocking because your code doesn't continue. But what actually happens is the thread you're running on is yielded and can go serve some other request rather than sit there blocked and doing nothing. When the async call completes, your code continues - maybe on another thread, maybe not, depending on your SynchronisationContext. 
yea its basically just a program that generates a bunch of humans and then processes them every year. i so already have the human generator which generates them with random names and some stats such as luck and intelligence
Dude this is cool!
As a hiring manager, this definitely gets my attention. Nice one!
System.Windows.Forms: [Cursor.Position](https://msdn.microsoft.com/en-us/library/system.windows.forms.cursor.position%28v=vs.110%29.aspx) [SendKeys.Send](https://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.send%28v=vs.110%29.aspx)
I think you put more effort into this than I did. 
He means "what if there is another class that also locks on `sharedList`". If you ever expose the list, you could get a deadlock this way. But furthermore, you never know if the internal implementation of List&lt;T&gt; one day might lock on `this` (e.g. on itself). That would also cause problems. So the advice is good: You should usually lock over some private, readonly object that is created explicitly only for locking with. There are (as always) exceptions, of course.
Clever, but, if you're looking for advice, you're padding your resume with too much garbage. &gt; "Write SQL statements for getting data into and out of the database" As opposed to what? &gt; "Attend requirements meetings for multiple applications" You don't generally put "meetings" on a resume. Some of the other entries are too broad and general like "Design a SQL Server Database". Your experience listing should be tight, concise and focused on specifics. 
At first I thought you were just trying to be funny... but maybe you really are like that...
Do you want the job or do you want to be a slacker your whole life, McFly, just like your old man?
I've considered having a few commands available at the end to download or print the resume.
I just thought it was a good idea. I'm not desperate for work. When I am, I'll put more effort into this and my normal resume.
Take a few minutes and do it right. I personally think this stuff is very cool, and it'd be neat to look at a perfect implementation balancing style, production-ready technique and overall readability. Come on, Eldie. You introduced this fun example, don't leave us hanging. Edit: Most of the work needed is in class Resume anyway.
This. Resume should fit onto a single A4 page of information. Code resume will obviously be longer, but should contain equivalent amount of information Who do you think will read this wall of text: "• Lead Programmer on 2 contract management applications (ASP.NET)", "• Maintain several ASP.NET (C# and VB) applications using Visual Studio (2003,2008 and 2010)", "• Wrote and consumed WCF (Windows Communication Foundation) services", "• Worked in an AGILE environment", "• Responsible for applications through entire SDLC", "• Develop .NET applications on top of Sharepoint 2008", "• Attend requirements meetings for multiple applications", "• Helped to design application look and features, including page layout, workflow, and database strictures", "• Write SQL statements for getting data into and out of the database", "• Create custom data objects with ADO.NET for both Access and SQL Server", "• Write test plans for QA department to do testing", "• Do black box testing for application changes", "• Web Administrator on 3 Windows 2003/2008-R2 Web Servers (IIS 6 and IIS7)", "• Server Administrator on 2 Windows 2003/2008-R2 File Servers", "• Server admin on MS SQL Server 2008", "• Assisted with IT security plans, and implemented harder security in applications and on servers", "• Help create and implement disaster recovery plans" Any sane person will just skip it and mentally replace it with "blah blah". This should be compacted into two to three lines of text at most (each position).
10/10 Would trust you to review again.
You forgot to mention that `Close()` doesn't close anything. It displays the information to the console. A method should never do something completely from what the name says.
Zero is a value. Null is intended to mean "undefined", not "empty/missing object" as many C# programmers treat it. 
I agree that there are downsides to IoC. Debugging can be one of them. Resharper adds some cool features to VS that allow you to navigate to the implemented version of the class while debugging. But that shouldn't be a reason to avoid IoC.
Great idea! This is awesome.
[It is the null of mathematics.](http://en.wikipedia.org/wiki/0_%28number%29) The arabic root of the word even means 'empty', in fact most roots of the word end up on definitions describing 'undefined' or 'missing'.
no
how about .End()?
Code is serious business. Not even joking - I wouldn't want to work with the kind of person who would unironically put up this trainwreck.
Managers also care about maintainability.
I must have been magically spared from anyone that cares about that my code isn't completely maintainable when deadlines are to be met But if you're a rocket scientist, of course
What does `End()` say? It ends your resume? What message would that bring? It also says nothing about presentation. There should be no method on the resume responsible for printing it's information. Furthest what you could do is overload `ToString()` for **debug information**.
Thank you. Feel free to post your code here.
But it would say a lot more about your programming personality, something that's much more important than resume like this.
Are you from the Warlizard Gaming Forum? Oh wait..
That's okay, as long as you remember that critic is never meant to bring people down. Critic should be embraced to improve yourself and your code.
Both commits compile fine for me. What issues are you having?
That moment in all of our lives when you click "Run StyleCop" only to end up crying at the number of errors and realize that you are an awful, awful coder. Anyone who says they haven't experienced this at least once is a god damned liar.
Good coverage on the mono support. ^yay^yayaaa^yaaaaaa
Dude, you're looking at this like production level code rather than a unique resume. and it's funny that this went over your head.
Seconded.
I think he's just commenting on the grammar. I always love your posts on this sub, but it's occasionally obvious that you're not a native English speaker. A native speaker would use "on" rather than "in" in the quoted fragment. Also, "its" not "it is".
Keep reading /r/csharp regularly. /u/AngularBeginner is a frequent commenter, and he is definitely "really like that". It's awesome. :)
Dude... It's a git repository. You're only looking at one file. If you look at [the whole repo](https://github.com/EldieTurner/csharp-Resume), you will see that it is, in fact, a complete solution.
Thank you for the clarification. In this case, it is important to understand that your code isn't necessarily the only code running.
No, it is a good idea! I liked the idea... But it is out there now and I would have thought a little more care might have been a good call.
Agreed. Also remember that "new T()" is short for "Activator.CreateInstance&lt;T&gt;()" when T is constrained with "new()".
I run ReSharper...
That might be the case if you posted it in r/resumes but you posted it in a subreddit devoted to c# code, of course people are going to critique your coding style.
Hey if a picture of my asshole makes more sense to you than a simple analogy, I'll send you a PM. Next time, just ignore posts that clearly go over your head, you'll just look like a retard *again*.
What about using DateTime.UtcNow instead of just DateTime.Now ?
Show me a manger that sifts through the code base doing peer reviews on developer's code when there are no fires. I'll wait. 
No DI or abstractions
I am going to steal and edit and use it shamelessly. But I going to give you an upvote, and a virtual high five, because this is great! :D
Everyone else is commenting on the code, I'll comment on "getting a job" aspect. This is a neat gimmick to get your resume publicized on this board -- I assume that was your intention. But as someone who interviews hundreds of people a year, take my advice and don't actually use this after today. Never submit this to a company, for example. * Some major % of the words on the page are variables and thus unnecessary for the point (i.e. the strings), making it harder to scan even for tech people. * No non-technical person can parse it. * I pretty much now assume all you want is a C# job and wouldn't try to hire you for something else. I've looked at thousands of resumes. Cute resumes usually indicate inexperience. You have some experience, so go with the pro-looking resume (at least outside of /r/csharp)
I think if my resume not only as a way to get a job, but also as a way to keep track of how I'm progressing. If you aren't adding a new skill or tech to it every 6 months to a year then you are starting to get complacent.
Microsoft has a naming convention, which a LOT of code follows (won't give bullshit percentage numbers, but it's pretty much most of the code you find everywhere). And that is to use PascalCase for method names and properties. Also he links to one file, but in the repo there are mot files.
Only an issue if you ship binaries or deploy in parts. 
Don't worry, I understand that you've written this to show a resume in a quirky fun format rather than being perfect, syntactically-correct C# code. Everyone else has taken this *way* too seriously.
Why does Resume also take care of printing itself (and it's not even clear)? I'd separate it into Resume and ResumeWriter to which you can pass some stream. What if I wanted to write your resume into a text file rather than stdout? 
How did he mix business and presentation logic? As far as I can tell, there *is* no presentation logic. (Unless you're getting meta up in here and calling the presentation logic the "code resume" itself.)
Nothing goes over his head. He catches it.
My "style" is really the [industry standard](http://en.wikipedia.org/wiki/Sturgeon%27s_law) and nobody wants to admit it.
Thanks for the help! 
[Image](http://imgs.xkcd.com/comics/iso_8601.png) **Title:** ISO 8601 **Title-text:** ISO 8601 was published on 06/05/88 and most recently amended on 12/01/04. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1179#Explanation) **Stats:** This comic has been referenced 332 times, representing 0.6189% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cozagr3)
[How to write to an event log by using Visual C#](http://support.microsoft.com/kb/307024)
You know, you can give advice without being an ass.
Seriously, I feel like I'm taking crazy pills.
I'd never consider this as an actual code sample. I just like the concept, and it would get my attention because it's different. The sample projects and coding exercises we do would quickly filter him out of the "senior" category if this was in fact his best work.
the presentation layer (which is not present) should be the one that handles bulleting. Given the code structure is already tabbed, the bullet points brought nothing to the table here. What they did do was ensure that you had bullet points in the data to be presented. 
1. Whether or not OP uses a list is totally off topic here. 2. Neither did OP mention that he's using threads. TPL still requires locking if you share any resources between the parallel tasks (e.g. making requests to N different websites and throwing the HTML as entries in a collection)
Could any of you who are downvoting this particular comment please explain why? Downvotes with no explanation (or a weak one like "this is bad practice") do not help anyone who might be learning.
HURR I NEED A COPY OF THIS IN WORD - every HR person ever.
Why are you posting this **again**? http://www.reddit.com/r/csharp/comments/2x8g9v/visual_studio_2013s_mvc_5_google_authentication/ Are you planning to delete your old post and to repost this now every few days?
Thank you. I shall remember this.
&gt; *Warning: You will need your own client key / secret from Google APIs to test. Sorry for the repost, but I've improved this.* From the very top of this post. &gt; Are you planning to delete your old post and to repost this now every few days? Not with that attitude I'm not.
**No**. Just ***NO***. First of all: These what you're using are not *dynamic* types. They're *anonymous* types (except of the type used in the list). That's a **huge** difference. Also, **dynamic** types rarely have a legitimate use. Most of the time it just means the developer was too lazy to define a proper type.
I wouldn't consider this an actual code sample either.. But still I'd expect some level of code quality that I would just expect of some senior developer. This is just not present here.
It does has console code. He linked a specific file, but the repository is slightly large. The `Close()` method is infact (poorly) printing stuff to the console. At least at the last commit I looked at.
I stand by my statement that if a link doesn't compile, it gets a 0/10. Source: my TAs back in the day. Why not link to the repository then?! Or a straight up checkout URL? Going through the repos, as you suggest, does show that the Resume class exists, so that's good. Still though, a resume is a supposed to represent a peek at their peak ability.
Still not sure what you mean. The first two commits compiled perfectly fine to me, using VS2015 CTP6.
Yeah, originally I just went to the linked .cs file which had no knowledge of the other files in the repository.
*upvotes*
Agreed, however posting a link to only a non-compilable .cs file instead of a zip or a git link is also really bad style. If one of my juniors would do that I'd gently ask them not to do that, then laugh in their face at lunch. Unless the context is clear and all... but you know what I mean.
I don't see this toxic environment you are talking about. The title of this post is "my "literal c resume"". This could be literally taken as: this guy is passing around this resume in an attempt to get hired. Angular did a great job of telling him why he should not be doing so. Giving his honest opinion on how it looks and whether he would hire him isn't toxic, it's a wakeup call. And last time you made a thread here Angular took a good amount of time to provide you with relevant comments on what you can do better, so I don't see why you are avoiding this subreddit.
He used quotes in the title, heavily implying that this is half-serious. I don't mind people correcting him, but it should be done within this same context.
Ok I've had time to look over this, and think about my goal with this resume. The things I agree with. 1. Removing the () before initializing seems really really minor, but ok. 2. fixing typos 3. changing Lists to an interface 4. Visibility modifiers. 5. resume.End() was obviously a half-baked idea. I'm going to clear it for now and rethink what should go there. 6. inconsistencies in style like sometimes using this. other times not (and others) 7. not wrapping if's in brackets is bad form that I have. oh well got me there. Things I think are good for code but bad for this exercise. 1. From and To (and other things) being on the same line. (just there to make it look more like a resume). 2. Aliasing string (bad idea in code) good idea for presentation of the resume. 3. Company as its own object, links as URIs and even dates as DateTIme. This clutters the message (again good code, bad resume design IMO). 4. Bullet points in Duties: A hiring manager isn't going to compile the code, so they won't see the presentation layer. 5. Documentation seem unnecessary. &amp;nbsp;
TIL programmers can be dicks. 
I didn't downvote him, but I'm guessing it's because he answered a question that has nothing to do with what the OP asked.
If it's not a good example of coding style, you should just use a normal resume IMO. Of course, this should be balanced for readability as well as style. 
Stylecop's defaults often also conflict with what Resharper tells you to do given it's default settings. Ex. Resharper will tell you to remove redundant "this" in front of internal field references, Stylecop wants you to always include them. 
You fucked up your formatting
If your LINQ is getting very convoluted and/or the rest of your team isn't familiar with it, yes. But all else equal, I think map/filter/reduce and friends are clearer than explicit looping once you understand the concept, in the same way that looping and other structured programming is clearer than explicit use of goto.
&gt;Cute resumes usually indicate inexperience. Can you review [my CV](https://www.dropbox.com/s/mn77lq8eb2aa1z2/CV%20anonymized.pdf?dl=0) quickly? I kind of went for style, but I'm really not sure whether it's a good call or not.
 //Call on CalcHypotenuse, establish its variables and return to result to Main This is the part that is confusing you. You do not *establish its variables* at the time of calling the method. The ones you are using (side1 and side2) have already been established here: double side1 = Convert.ToDouble(side1String); ... double side2 = Convert.ToDouble(side2String); You are just saving the user input for later into variables which are named side1 and side2. You then *use* that data that you *saved for later* in this line: result = CalcHypotenuse(side1, side2); You can also use the same method by putting in doubles without any variables. Like this: result = CalcHypotenuse(4.7, 5.3); Hopefully that helped. Edited for clarity.
This is pretty much exactly what I'm looking for stylistically. The important parts are bolded, it's easy to scan and the projects easy to spot and discuss. You don't have a "skills" section, *which is good*. Just describing what you've done and how you did it, as you have, is best. To contrast: I once got a resume typed up in chiller font. BTW, two more unsolicited tips: * I'd remove the subtitle and shorten the profile to be more "objective"-like. * I hate the word "objective" for a career and hated writing one when I came out of college, but now I appreciate them because it helps me know what people are looking for. So read job descriptions online, find the one you want and tailor your objective to exactly that job description (not just for Company X, but for all companies that have that position). It pays to be decisive about what you want to do.
This is why you use git-svn.
You need to instantiate the DateTime somehow. DateTime.Parse("2014-01-06"); is very readable and absolutely immune to confusion (ignoring time zones).
As a hiring manager, this would get garbled beyond recognition by whatever HRMS system it got stuffed into long before I saw it :)
.
.
I'm a PHP-focused developer, currently diving into C# to expand my toolkit. I've been developing for ~12 years or so, and if there's one thing you need to understand, it's this: Just about every single person in this sub, and every software engineer you're ever likely to meet, at one time was going through the same struggles as you. It's OK. It's not the end of the world. Most of were fired from our first (few) job(s), or we jumped ship before the hammer came down. Take a deep breath. Watch some videos pertaining to the areas you feel are immediately necessary to keep your job. Keep your curiosity sharp and your mind hungry. You'll be OK.