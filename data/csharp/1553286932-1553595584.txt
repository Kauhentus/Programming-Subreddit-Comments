No prefix at all. Just let it be. As a matter of fact I've switched to using properties instead of fields after they allowed for readonly properties with { get; } because it is shorter than typing readonly and also allows you to easily change to protected and public if need be.
Don't use `Task.WaitAll(tasks)`, as that blocks the thread. Use `SchedulingWorld[] results = await Task.WhenAll(tasks);` also `tasks.Add(async() =&gt; await sc.GenerateBuildings(specGame));` should just be `tasks.Add(sc.GenerateBuildings(specGame));`
Also when you want to fire and forget a task, for whatever reason. Discard helps avoid compiler warning.
I have not tried to use it my self but Microsoft have a successor to MSI called MSIX that is currently in preview. https://techcommunity.microsoft.com/t5/MSIX-Blog/MSIX-Packaging-Tool-Preview-is-now-available-from-the-Microsoft/ba-p/216204 
[SomeButton.Click](https://SomeButton.Click) \+= (\_, \_\_) =&gt; Console.WriteLine("Hello world!"); &amp;#x200B; Very common usage.
The code looks pretry good. Personally I would only use explicitly use this.x when there is no other option. But I guess everyone has their own style
There is _no_ recommendation for private variables afaik. I wish there was so I could throw it in my teams face. If you have a link to any official docs recommending this please share
vdproj, [Wix](http://wixtoolset.org/), [Install Shield](https://www.flexerasoftware.com/install/products/installshield.html), all create MSI files. [Inno Setup](http://www.jrsoftware.org/isinfo.php), [NSIS](https://nsis.sourceforge.io/Main_Page), [Squirrel](https://github.com/Squirrel/Squirrel.Windows) have their own systems.
JObject basically *is* that dictionary.
The point of the previous comment is don't use that single character as an identifier. As the article demonstrates, the token CAN be declared and used. The point the previous point made is that was the takeaway from the article. 
&gt; if you declare a variable called _ (I didn't know that was valid) 
The try pattern is used all over the framework, and is the only thing that makes sense in some cases where you want to write safe, exception free code. Jared Parsons had a rant on Twitter a while back about `File.Exists` and why a `TryOpen` method made a lot more sense. The gist is that there's an implicit race condition in checking if a file exists and then trying to open it, and the only alternative is to have an exception get raised when trying those operation fails. You COULD just return null, but that's equally ugly to a lot of C# programmers (this one included). And hence, why we prefer the try pattern. Also, the discard feature was introduced with tuples. If I want to return multiple values in a ValueTuple, it does not mean that my method is too complex, or trying to achieve too many things. It could just mean that I don't want to have to add a new class to my library to represent data. In particular, I don't want to implement equality and hashing code for every such data object. With discards, you "keep" the things you're interested in, and forget about the rest. If at some point I need one of those values,I can just go update my code to receive it. It reduces the amount of code that's required to be written, therefore making the language more expressive (by helping to eliminate potential redundancy). A spectacular example of why this is a useful feature: ```C# var (theThing, theUnusedThing) = GetTheThings(); theThing?.DoesSomethingInteresting(); ``` Pretend that `theUnusedThing` is ACTUALLY not used (making the name true to form). The variable name is useless. The fact that you have to be aware of it's existence is useless. The compiler is going to warn you about having an unused variable, when there's clearly nothing you need it for. So that's the point of the feature. If you use the ValueTuple, then it makes a lot of sense. If you don't, then it's questionable how many places you'd want the feature. 
I think this is a really bad way to accomplish this technique. I think it's terrible that .NET has decided Tasks are the be-all-end-all of doing anything asynchronously. There are a lot of tools at our disposal, and sometimes we have better tools than Tasks. For completion's sake: `Task.Run()` does return a `Task`. That represents the running operation. Since you don't keep it in a variable or schedule a continuation, if it throws an exception that'll go unobserved and that's generally bad. I used to worry the GC could eat tasks like this, but now I think they don't get eaten. Either way, it's usually a bad idea to call `Task.Run()` and completely toss away the Task it returns. But I don't think this can be rewritten with Tasks in a way that makes sense. You're adding a random value to some collection (on the UI thread) every 1.5 seconds. This is more readily accomplished with a `Timer` than a loop inside a task. Tasks are meant for things that complete relatively quickly, but this task is going to run for 25 minutes. That's not very polite to the task pool. Here's how I'd write it. ``` private System.Threading.Timer _timer; private int _valuesRemaining = 0; private static readonly Random _rng = new Random(); private const int Interval = 1500; public void UpdateChart() { if (_timer != null) { throw new ApplicationException("Don't run this twice, it isn't supported."); } // Start the loop counter over. _valuesRemaining = 100; // Start a threaded timer that calls WhenTimerTicks() in 1.5 seconds and repeats every // 1.5 seconds. _timer = new System.Threading.Timer(WhenTimerTicks, null, Interval, Interval); } private void WhenTimerTicks(object unusedContext) { // Stop if we shouldn't keep going. if (_valuesRemaining &lt;= 0) { _timer.Dispose(); _timer = null; return; } // Generate a new value and update the UI. var value = _rng.Next(30, 80); Application.Current.Dispatcher.Invoke(() =&gt; { LastHourSeries[0].Values.Add(new ObservableValue(value)); }); // Update the loop counter. _valuesRemaining--; } ``` Be careful which Timer you use, there's a reason I fully-qualified it. This particular one uses a worker thread and will call its callback every 1.5 seconds. That callback checks to see if it's finished, and if so it destroys the timer. If it's not finished, it generates a new value and tells the UI thread to update the collection. Then it updates its loop counter. `async/await` aren't the first ways to do things in .NET. They aren't always the best. 
I wrote it here, so if there are errors, sorry. Basically use null cascading and an interface public Stakeholder(Person person, Grant grant) { AddressLookup addres;= grant.CorrespondenceAddressId ?? GrantsDAL.CorrespondenceLookupAddress(grant.DFG) ?? grant.CorrespondenceManualAddressId ?? GrantsDAL.CorrespondenceManualAddress(grant.DFG) ?? GrantsDAL.GrantAidedPropertyAddress(grant.DFG)?? AddressDAL.GetAddress(person.AddressUprn) ?? person.ManualAddressId ?? AddressDAL.GetManualAddress(person.ManualAddressId) ?? throw new InvalidOperationException("Cannot find a supplier address"); --use an interface CODE = "GRT" + person.PersonID.ToString("00000"); NAME = person.Forename + " " + person.Surname; ADDRESS1 = address.BUILDING_NUMBER + " " + address.PRIMARY_THORFARE; ADDRESS2 = address.TOWN; ADDRESS3 = address.COUNTY; POSTCODE = address.POSTCODE; BANK_SORT_CODE = string.Format("{0:########}", grant.ApplicantBankSortCode); BANK_ACCOUNT = grant.ApplicantBankAccountNumber; EMAIL_ADDRESS = person.EmailAddress; }
Do you realise that I wrote this code?
I just tend to follow StyleCop.
I PrEfEr SaRcAsMcAsE 
We use Wix for simple things, InstallShield for anything complicated. Wix is free, InstallShield is very expensive.
Vector.cs Line Line 844 public static partial class VectorExtansions Possible spelling error.
I know it's not much, but [this](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions) says not to use "underscores, hyphens, or any other nonalphanumeric characters".
I love squirrel. 
Wix is free and open source and produces standard MSI installer databases. Advanced Installer has a free version and more featureful paid versions, produces standard MSI installer databases, and IMO is very easy to use. I used it a few years ago for a commercial project at work and would definitely use it again.
Shouldn't it return 1??
I made 1 an invalid thing to return, because every number can be devided by 1, so it will be kinda pointless if it returns 1 in every other case.
It's mostly a matter of tribalism. Lots of c# developers look down upon developers using other languages too. And I'm convinced that 95% of developers using any programming language couldn't write a decent SQL query if their job depended on it.
I wouldn't worry about it. There are plenty of jobs out there for .NET and that's not going to change for a LONG while. You're going to run into people who have very strong opinions about one side or the other, but it's really all the same. Especially with .NET Core maturing, there's not going to be a huge difference between something like Java and C#. Just find a shop that likes a curated framework rather than a wild west hodgepodge of extensions and work there. 
I've been trying to find time to learn WiX for years.... but NSIS is too damn comfy. With the plethora of examples, excellent documentation and literal decades of online posts and plugins, you can make a decent looking installer with complex logic in a couple of hours. &amp;#x200B; If it HAS to be MSI, you'll need to learn WiX. If you need to deliver something yesterday, NSIS has got your back.
&gt; one OS, one standard library, one framework, one IDE, one buildsystem. Jesus christ. The 90s called. They want their hate back. I am a .NET dev. I use makefiles, code to ARM, work with Linux, integrate with MariaDBs, mssql, mysql, mongo ... shit. I even wrote C just to send a binary blob to serverless function. I worry about performance. Talk with Consul. Writing Actor based system. I work on windows, Linux, in the cloud. I write bash and powershell. I do DevOps with great joy. I love it. Hell I even build a node application because I WAS the only one who knew how to. The only people saying the above quote should quit. They are stuck in the past. One OS. One framework. Bitch please. Shut. The. Fuck. Up. 
I've worked with Java and Python, but all of my personal projects are written in C#. I was thinking maybe I should take a break from C# and start focusing on python so I don't limit my career to .NET. 
There is something to be said about only knowing one OS. But on the other hand, Windows was objectively better than Linux for a very long time so it's hard to fault someone for specializing in the best. Lots of things that are new and exciting in DevOps are just rebranded things we could already do 20 years ago. For example, Severless was called COM+ in the VB 6 era. (It was also a bloody stupid idea and I except to see it die once people figure out how difficult it is to manage 100 tiny applications that all work together instead of 1 reasonably sized one.)
Why? Do you not like making money? Without a very specialized skill set (e.g. data science or machine learning), python is probably going to pay significantly less than Java or C#. Being fluent in both Java and C# is probably the best route for a consultant who doesn't want to do JavaScript all day. 
FYI: multi-line code formatting on reddit uses 4 spaces preceding each line
Yeah, I guess I should maybe just do a combo of Java/C#. Thanks for the advice.
I guess that's one solution, but I don't think it's much better. It's just written without nested scopes.
Why should I use this over something like Math.NET? https://numerics.mathdotnet.com/ 
The dotnet corefx [style guide](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md) recommends this, and this same style is applied across other dotnet core repos by a `.editorconfig` file. That's official enough for me, at least.
Plus SQL or Javascript. You don't need both, but at least one makes you a lot more useful. I think JavaScript pays less, and you can be more easily replaced, but you also have more job opportunities. SQL jobs are more secure. We need less database developers, but they're also harder to find so people are less likely to fire them when there are budget cuts. 
if ... then ... else You can combine and nest them in endless permutations.
I'm gonna try that. If I'm using short form, what would be the operator for "then"?
You can but ask yourself if you really want to, you probably just want to use an if/else if/else statement at that point. ```var orientation = (width == height) ? Square : (width &lt; height) ? Portrait : Landscape;```
I see two paragraphs, one big code block, another two paragraphs (with some inline code formatting) and a very short code block. Is that not what you see?
Definitely, will correct it in the next commit. Thanks!
Thank you so much!! It worked! I'm just a beginner so this really helped. My mom stumped me haha.
Overriding the to string method and throwing a not implemented exception seems horrible. Why did you need to do this?
I didn't know you could do this in C#, how is this possible? &amp;#x200B; `Vector5&lt;double&gt; v5 = (2.0, 4.0, 6.0, 8.0, 10.0);` 
var orientation = (width == height) ? ImageOrientation.Square : (width &gt; height) ? ImageOrientation.Landscape : ImageOrientation.Portrait; Just make the false expression of your ternary operation return another condition to be evaulated with a ternary expression. First you are checking if it's square. If that is false, we are checking if it's Landscape; otherwise it is Portait.
You need to change your conditonal. Whatever beginners course your following has used the ? Operator to do a conditional. Scrap that, and use if/else. For your goal you would: If (width==height) { do something here } Else if (width &gt; height) { Do something } Else { Do something. } Don't bother using shorthand notation for basic code blocks until you know how to use basic code blocks
Just a recommendation, I generally tend to avoid smashing multiple ternary operations (that’s what the true/false ? A : B syntax is called) into one line. In your case I would do something along the lines of: If (height == width) { //square } else if (height &gt; width) { //portrait } else { //landscape } Multiple ternaries in one line become quickly unreadable. 
If (width ==height) orientation = "Square" else{ ...(your code) }
From a readability perspective it is better. Your right though that some more advanced rewrites can get out more of the duplication.
The same code can be written in if/else statements as well. it's a little cleaner to read ImageOrientation orientation; if(height == width) { orientation = Square; } else if (width &lt; height) { orientation = portrait; } else { orientation = landscape; }
https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/ta31s3bc(v=vs.71) See the bullet point starting with “Spell out all...”
I will definitely give your code a look. And you might be interested in my library too: https://github.com/ZacharyPatten/Towel
Or put linebreaks in the ternary: var orientation = width == height ? ImageOrientation.Square : width &lt; height ? ImageOrientation.Portrait : ImageOrientation.Landscape; 
While I’m not personally a huge fan of this approach, it is definitely better and more readable than some of the monstrosities you can come across. 
There's no operator for \`then\`, just brackets.
By overloading the [implicit cast operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/implicit) for `Vector5` for `ValueTuple&lt;T1, T2, T3 T4, T5&gt;` i would assume? 
http://prntscr.com/n1otmv that whole block of text between the triple graves is meant to be one formatted code block, no?
I agree with this person. I would have Stakeholder be a DTO since it, at least from looking at the code you posted, it just contains information about the stakeholder like their name and address. &amp;#x200B; I would have a class called StakeholderFactory that takes the Grant and Person as parameters and figures out how it's getting the address fields. Here's an outline of what I have in mind: &amp;#x200B; public class StakeholderFactory { public Stakeholder Create(Person person, Grant grant) { var stakeholder = new Stakeholder { CODE = "grt" + person.personid.tostring("00000"); NAME = person.Forename + " " + person.Surname; BANK_SORT_CODE = string.Format("{0:########}", grant.ApplicantBankSortCode); BANK_ACCOUNT = grant.ApplicantBankAccountNumber; EMAIL_ADDRESS = person.EmailAddress; }; if(grant.CorrespondenceAddressId != null &amp;&amp; GrantsDAL.CorrespondenceLookupAddress(grant.DFG)) { //use correspondence address } else if (grant.CorrespondenceManualAddressId != null &amp;&amp; GrantsDAL.CorrespondenceManualAddress(grant.DFG)) { // use manual correspondence address } else if (GrantsDAL.GrantAidedPropertyAddress(grant.DFG) != null) { //use grant aided property address } else if (AddressDAL.GetAddress(person.AddressUprn) != null) { //use applicant address } else if(person.ManualAddressId != null &amp;&amp; AddressDAL.GetManualAddress(person.ManualAddressId)) { //use manual applicant address } else { throw new InvalidOperationException("Cannot find a supplier address"); } return stakeholder; } } First of all, you can set all of the fields for the stakeholder that are set the same way regardless of the source of the address (e.g. CODE, NAME, etc). Next, you can use multiple conditionals in order to reduce nesting. For example, in the first if statement, you can check the correspondence address id and the actual address for null, but if the id is null, it will short-circuit evaluate and quit early. Then it will move onto the next condition to check. This allows you to go through each check and set the address properties on the stakeholder appropriately. Then you return it. Hopefully this helps. 
I second this. They're also easy to miswrite.
Probably no reason whatsoever. I myself enjoy the challenge of coding even if I'm inventing the wheel, and I just like using my own code in my projects so I can change it as I like. However if I were to bring up some possible strengths of my code over Math.NET's, I'd say: 1. The Scalar&lt;T&gt; type: I talked about this a bit earlier, but I find this concept of general numeric interface really useful on it's own even outside of algebra applications. Say you're making a an image processing library and you want to make your functions as general as possible, so they don't only work on images but also on any 2d array with a data type you can do addition and multiplication on like double, float, int, or even color or ComplexNumber. Your options aren't very pretty: either write a separate function for every type you want to support, or use a generic parameter and write walls of code for runtime type checking and boxing. This is where the Scalar and its derivatives come in: they do all that for you. They check the types for you, do the case switching for the operation and are *really* easy and intuitive to use, basically declare them and then treat them exactly like you treat regular numbers, all the magic happen in implicit operators. Vectors and Metrices build on top of Scalars btw, so these can be used the same way for more complex numeric types like a Color (Vector3&lt;byte&gt;). 2. Very lightweight: the Scalars stack all their possible values in the same memory address, kind of like a C union type, so at the end you have a type that's a bit larger than an integer, but can represent tens of different numeric types, using the power of C#. 3. Performant: most types are highly specialized (Vector2, Matrix3x4 etc.) and generated using T4 templates so their operations are basically baked into the code. Matrix multiplication usually requires at least two nested for loops, in my code it requires none- the values are directly accessed and multiplied into the result. 4. Has specialized and generalized options: if you're programming 3d graphics or a physics simulation a general Vector class like Math.NET's is an overkill, you can get better performance and memory by specializing it into a Vector3 type. More abstract applications might need a more generalized Vector type. My implementation offers both. 5. The specialized types are immutable: if a functional programming style fits you you might appreciate this. 6. Everything is flexable to the core: most types are generated with T4 templates, so if you want a vector length that's not supported (i supported 1 - 5 by default), you can just add the number 42 to an array and a Vector42 is automagically generated with all its methods and operations. Maybe you made your own numeric class eg ComplexNumber and want the Scalar class to support that? You can do it in few lines of code in the Scalar template. HOWEVER the library is still a work in progress and definitely not production ready, I wouldn't use it if I were you. Not yet at least. As a last note: the project is open source so if any of you folks like its idea you can feel free to contribute and help make it production ready sooner. Cheers.
Oh damn quite a wall of text, sorry about that lol I didn't even notice
Just a dumb mistake I forgot, I just started with the tensor today and actually implementing to string ain't easy so I left it for later and forgot it. Gonna be doing it tomorrow hopefully.
Absolutely, this is exactly the kind of thing that makes C# really attractive to me over other languages.
[It is correct on my screen](https://paste.pics/5ba8931e5a18f5eb832ab3469762d2ed). I am using the website with the default (new) formatting, and it handles full markdown correctly. How are you viewing it? Also it is good to know that that code format does not always work correctly.
Oh wow this is really cool, your approach to the numeric interface problem is really interesting! Definitely reading your code later for 'inspiration' ;)
https://www.codeproject.com/Articles/992340/Generic-Math-in-Csharp-Using-Runtime-Compilation Here is an article I wrote several years ago if you are interested. And thanks ;)
Can recommend this. They have tools built in that will scale your whole template for you. I think heat is the one that will scan a directory and produce the product manifest. 
Thanks! That's actually a very good write-up on a user case that I haven't had to deal with! 
My experience with InstallShield was terrible. It produces massively bloated installation media, was difficult to figure out how to do anything useful without the direct editor, and in general provided what I felt was a poor experience. I've preferred WiX since the first time I used it. If you're doing the work in the MSBuild ecosystem, I'd suggest WiX all the way. Not to say anything negative about your teams decisions. This is plainly my perspective. 
For sure! If you evaluate the new language features in isolation, a lot of them will make you scratch your head. If you do it in the context of the entire language, a lot of them make a lot of sense. The obvious problem is filling in the knowledge gaps. C# is the only language I bother to stay up to date on, but it's also a very exciting one to follow!
They are useful in pattern matching case statements when you don't actually need the variable switch(obj) { case int _: // Do something break; }
You can say whatever about performance, but MathNet.Numerics supports hardware acceleration (OpenBLAS, CUDA, MKL), therefore it will be faster than anything anyone can write.
Look into sieving methods. Something like the sieve of Eratosthenes is not hard to implement and will be much faster for large numbers.
Nah.
Thank you very much. I knew there was some casting going on but I didn't understand the steps involved and the brackets ()\[\] being together without anything separating them was a confusing syntax. Much appreciated.
Thank you all for your help. I really appreciate it your efforts.
Yes that last casting was very confusing but I understand the logic involved now. Thank you for your help. 
int\[\] arr1= (int\[\])o; ==&gt; arr1 points to location L &amp;#x200B; Initially I thought this was copy operation but as you and the others pointed out, it's actually creating another "pointer" to location L. Thanks a lot
;)
That's fine for simple stuff, but I often need to distinguish between member, static, thread local, and async local variables.
What if I want to know if a string is a number but I don't actually need the number? (I do this in a data classifier.) Having the discard means that I don't have to suppress a warning about unused variables.
&gt; Overall it's rare ...unless dealing with COM libraries. They love that shit.
Will it handle cubic splines? If so I could certainly use it in some projects of mine!
Public static Orientation GetOrientation(int height, int width) { if(height&lt;=0||width&lt;=0) {return Orientation.Unknown;} if(height==width) {return Orientation.Square;} if(height&gt;width) {return Orientation.Portrait;} return Orientation.Landscape; } Write code that is easy to debug. You’ll have hundreds of decision trees in some applications. You won’t want to try and figure out what nested ternaries are doing. 
&gt; Might be worth looking into ~~the Microsoft logging abstraction library~~ https://github.com/damianh/LibLog to help with compatibility. 
Yes, people will compile **to** wasm, but they need to compile it **from** something your code can call. Webasm isn't going to magically let you call elm from C# or vice versa, you're whole stack will have to be compatible, and libraries to do this don't exist yet in CLR. And no, accessibility isn't just going to be baked into the framework, you're exposing your app through a browser to someone using a screen reader that only knows how to read the DOM. These requirements are **legislated** and if you fail to meet them on a public website or even some internal ones you or your employer will be sued. Yes, you can get a XAML UI up and going faster than you can get an HTML one up, that's not exactly the same thing as productivity, but I see your point. It doesn't matter though because you **CAN'T USE THOSE UIs**. Not for anything serious anyway. That's what kills webasm, it's **only** interesting if you have a webgl UI and you can't use those. 
1. Requiring consumers to manage the lifetime of your logging object is very intrusive. No other logging framework does it that way, making the client handle an IDisposable. 2. You have 0 error handling, and everything is inline. So any and every call I make to your logging library might throw an exception and crash my logic. All of my code also has to sit around and wait for whatever your logging library is doing before continuing. Again, no other remotely popular logging framework does it this way. \#1 is bad, it makes this a pain in the butt to use. \#2 is an absolute deal breaker. Logging should never cause my app to fail or wait. Ever.
I use the "old" (true classic) version of reddit. TIL there's new text formatting on reddit. To be honest, triple graves makes way more sense and is consistent with most other communication platforms (obvious ones that come to mind are Slack and Discord), not to mention way easier to use to format.
Thanks, motivated myself again to continue my own Core project :D
You can't use webgl targets, they don't meet accessibility requirements, at least not any time soon (you'll need changes to legislation). Processing large amounts of data is usually done server side, and is one of the things Node isn't good at, don't use node for that. On the front end you can and should use service workers. JavaScript doesn't actually box primitives very often, there's not really any need in dynamic prototype based languages. You're pretty much only going to box if you call a method on a primitive, and C# can't avoid that. Refactoring tools also exist for JS, especially with Typescript, they're not quite as good as the ones in statically typed languages, but you generally solve it with different design patterns. You're talking about the benefits of C# as a language, and most of them are extremely new and extremely situational, and not actually features of C# at all. In terms of SIMD and Spans, they don't necessarily provide dramatically superior CPU utilisation or memory usage. They **can** for certain workloads, but they don't magically make everything better and they **absolutely** don't make up for moving client state to the server which is what razor components do. Scaling is also vastly more complicated than just using less memory or CPU. You're eventually going to run out of both and then you have to do something else. If you're building a gigantic monolith, JS is a poor choice, but building a gigantic monolith is already a poor choice. What exactly are you viewing as globalization and localisation? If you think Microsoft's replace this string is globalisation you're crazy. It doesn't work, even in really similar languages it's barely functional and when you've moved language families and cultures it's worse than useless. Date and time along with numbers and maybe currency (you can argue that if your price is in USD you should keep it looking like USD) are about the only things you can do automatically. Everything else is just pointless. 
I don't think you realize how big the market is for each stack. Just knowing .NET or Java alone (not both) gives you an incredible range of high paying jobs available.
One thing to worry about is that an uncaught exception, unless you configure for it, will travel up to the top of the application and crash the program. Definitely try catch all async methods that are expected not to be awaited.
I've done some pretty complex installers with WiX, including asp.net sites, windows services, custom actions, registry bits. There is a learning curve, but once you have it, it's very solid.
I'm someone who has been dabbling in .NET Core recently, but have written Python, Ruby, Java, Go, and C for a long time. When .NET was closed-source and Windows only, it was hard to dabble in it. You couldn't play around in it for a side-project because it didn't run on your OS or because Visual Studio was expensive or because you didn't want to have to find Windows hosting or because there was at least the impression that you'd need to buy into a whole Microsoft ecosystem (like SQL Server). On top of that, Microsoft had a reputation of creating crappy knock-offs of technologies and then trying to extinguish good things with its monopoly power. Why would .NET be any different? A cynical attempt to try and get developers to pay lots of money to be inside a closed ecosystem as they try to destroy open technologies. In fact, for a good while people believed that Microsoft might use patents against the open-source Mono implementation. It wasn't until 2016 that Microsoft issued its Patent Promise for Mono. As someone using .NET today, there's a lot to love. However, there seems to be a bit of a culture that kinda just accepts what Microsoft feeds it. Part of that is that Microsoft has some great libraries. However, I think part of that is because it was closed-source for so long. You got people who didn't necessarily care how something was implemented or if it was the best design. It was well-documented and there was plenty of help from Uncle Microsoft. You couldn't really delve into the source of the libraries and maybe make modifications and play with how they worked. I think it also created a bit of a mono culture. Microsoft's way was the blessed way. In some ways this is nice: .NET MVC gives you what you need to create your app. However, in some ways it feels like Java if your only option were Spring, but Spring were a lot better (maybe to the point where you stop caring as much about alternatives). I'm hoping that we'll see a more vibrant future now that .NET Core is open source, but it will take years and it is a bit late. .NET Core was released in 2016. Go was released in 2009, Scala in 2004, NodeJS in 2009. Those are platforms that have taken mind-share that .NET could have taken. Lots of programmers have developed skills and affinities for those platforms (or continued along with Java). Lots of companies built their businesses on those platforms because .NET was closed. .NET isn't starting from scratch with .NET Core. It already has devs that were using the closed .NET and the language and libraries are very good already. However, .NET has lost a lot of time. I think the new Microsoft is offering top-notch open-source technologies. I'd like to see a bit more emphasis on people experimenting with it and offering alternatives to the blessed path (yes, some exist like Nancy or Dapper, but it's not like the open-source world in other languages), but I think that will come with time and a little nurturing from Microsoft. I think there was also a period of stigma against statically-typed languages. Python and Ruby took up a lot of mind-share for a while with languages like Java being seen as outdated. Part of that is that a lot of statically typed languages had stagnated for a bit and often pushed crappy libraries alongside a language overly verbose and lacking features. Java only got lambdas in 2014 and Rails was first released a decade earlier. Heck, Java only added generics in 2004 and library support lags behind. Memory was also expensive and while JIT compilers with VMs have many advantages, they're not light on startup time and they eat memory. Heck, multi-core wasn't even on people's minds as much at the time (it was 2006 when Intel introduced the Core Duo). So, there was certainly a period where languages like Java and C# would have been out of fashion generally due to their JIT/VM nature, lack of caring about threading and multi-core, and lack of basic features like generics, lambdas, etc. I wouldn't worry about stigma. I think the perception of Microsoft and C#/.NET is changing as they embrace an open-source future and as people slowly start to think of it for things to experiment with. Microsoft is pumping out a lot of interesting tools, but there still seems to be some hesitancy from people coming from languages with stronger open-source histories. I'm guessing that will change over time, but some people will still think of Microsoft from a long time ago creating crappy knock-offs and using their monopoly power to extinguish better solutions and pushing it on business-types who don't really knowhow to evaluate technology. Some of that stigma will remain. I'd say don't listen to it. Miguel de Icaza (who started Mono and now works at Microsoft) noted that Xamarin was making loads of money because businesses were willing to pay well for their boring C#/.NET implementation that Silicon Valley startups wouldn't touch. According to them, it wasn't the cool language they'd be using to take over the world. But Xamarin's finances were good and their customers were making real things. Today, you can use C#/.NET and be using an open-source language/framework that also has the benefit of a lot of great tooling coming from Microsoft. I think there's still room for the community to grow in vibrancy, but I'm finding it quite useful. .NET MVC feels a bit like they had to check all the boxes that a manager who knows nothing of technology might ask about, but there's also a lot of great, useful things in there. Routing is easy, binding forms is easy, auto-mapper is really nice, Razor is really nice (though I wish I could do something like `@model String name, int age` and then `return View("Adam", 200)` rather than having things bound to a single model or using ViewBag), LINQ-to-SQL really puts to shame Java/Python/Ruby libraries (and Dapper exists if one wants something more Jdbi-style), etc. Make something real rather than worrying what people think of your tech stack. Nothing like creating something people love to show up people who talk on forums about what language is best.
That's my feeling. I haven't done anything web related, but can't imagine it's difficult. In general, I feel it's a fantastic product. 
[Tutorial Link](https://youtu.be/B3DfVHGuvoY) 
Hey there are you still banning people for stupid reasons
r/cpp would like a word with you
Never worry that having more experience with any language is going to be a "stigma". Anyone who tells you that has absolutely no practical experience, or they aren't operating in the real world. On the other hand, your goal should be to have experience in multiple languages, and after the first few, to be confident that you're a few weeks from proficiency (able to understand/write code) in any new language.
Often the best way to find bugs is to hand your software to someone who has no idea what they're doing and see if they can break it.
I run in to those a bit when writing unit tests and mocking out returned method data. In that case I follow the convention of `(request, _1, _2, _3, model, _4, _5) =&gt; {...}`.
There honestly is. We .Net developers are typically seen as journeyman of the corporate world. The next big open source project wont be written in .Net nor has there been many big startups that stick with .Net - and that is OK. C# is a wonderful language and heck you can easily dabble in the Unity game engine. It is what it is.
Hmm that doesn't look too bad, I'll have to keep that in mind!
Oh I agree that InstallShield is a beast. I had to go to a week long training just to wrap my head around it.
Ever have issues with MSI upgrades using InstallShield? WiX makes it so easy, but I feel it was always difficult with InstallShield.
As far as I can see there’s still a lot of functionality missing before I could consider using this project, and which make life easier. Take a look at some CAD API’s to see what’s next if you’re still actively developing this project. I’m thinking of lines, planes, circles, etc (although that’s more geometry there’s some overlap between both). Or maybe even implement support for vector fields? 
Challenge accepted. ``` enum Orientation { Portait = -1, Square = 0, Landscape =1 } var orientation = (Orientation) width.CompareTo(height); ```
If you try/catch in Dostuff , then any exception will be handled in Dostuff. If you don't, then you should do try/catch around the call that waits for your task (either await or WhenAll)
These religious wars have been going on since I started in industry in the mid 90's, I'm positive they were going on long before me and likely long after I'm gone. Don't worry to much about it. Learn patterns, concepts, etc. and you will always be able to move around if you find your preferred tech goes out of style.
(people really shouldn't write articles as questions that they then answer - makes linking to them kind of weird. All they needed to do was change the "?" to a ":". Why they don't: no idea)
&gt;multiple ternary operations (that’s what the true/false ? A : B syntax is called) Correction: it's called the conditional operator `?:`. It just happens to be the only ternary operator currently in C#, so it's often misnamed.
Thanks, guys! I got a lot of great advice reading through the thread. I'm just starting out so y'all some geniuses in my eyes haha. Much appreciated!
C# also has good built in memory management and doesn't require rebuilding for a new OS or CPU Architecture. I can build an application on my Little Endian x86 Desktop PC on Windows, and run it on my Big Endian PowerPC PowerBook G4 under Linux.
Hehe ok so we have 3 posts with “official” guidelines where 1 (dotnet coreFX) recommend underscores and the 2 other says to not use underscores? 
&gt; Nothing like creating something people love to show up people who talk on forums about what language is best. Especially when those people hating .NET might be on StackOverflow, which is written in C#.
Nitpick: it's actually called the [conditional operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator).
The Scalar&lt;T&gt; seems very useful. There were a number of times I could have used that and would have wanted that functionality from .NET directly.
Hey everyone, I've decided to re-enter the market and see if anybody wants to scoop me up. I am a software engineer with 25 years of experience, the last 15 of which in a professional setting. I know a number of different languages with varying degrees of proficiency, though most of my work has been in C#, Java, and PHP. I'm good in leadership/mentoring roles and have experience owning all aspects of a project to completion. I'm also the author of [Reddit.NET](https://github.com/sirkris/Reddit.NET). I worked at Microsoft for a year as a CSG back in 2010-2011 and really liked the experience. After the contract was up, I went on to work for a handful of smaller startup companies over the next several years. I'd like my next role to be at a larger tech company again, only as an FTE this time around. So if you're looking to fill any Principal Software Engineer positions at Microsoft in Redmond and you think I might be a good fit, hit me up with a PM and we can setup a call. Thanks for reading!
Do you realise they were quoting you? That's literally what you wrote in your description. 
That might be, I peppered my reply with 'maybe's and 'perhaps' because I haven't done too much research on it and I'm doing this mostly for the fun of coding and even of pushing C#'s syntax features to the limit, and to learn something new. The folks who made Math.NET are seasoned professionals who put a lot of love and effort into it, and their library is definitely the right choice if you're in a production environment.
Any thoughts about InnoSetup ? Never heard of WiX before... 
You can but, the using statement tells .NET to release the object specified in the using block once it is no longer needed
lol, i feel bad for you that you lack the vision to see the future. Yes some of the concerns you raise are legitimate at this very moment, but everything I have talked about is a few years out. Your still so stuck in the mud. Accessibility has been solved many times over, this isn't the first VM i the browser we have dealt with this issue, nor will be last. You act like all these are insurmountable obstacles, but if you'd actually been following the web assembly development you'd know literally every single thing you've brought up is being actively developed on. I have no idea why you are so bitter and it's frankly sad.
Hah, my knowledge of c++ is actually pretty surface level, how far could you go with syntax hacking in it? I heard you can also do implicit casting, operator overloading and generics, what other cool things does it offer that C# doesn't?
;)
Glad you like it! I wouldn't recommand using the whole library as is before it'sfinidhed, but feel free to just copy Scalar.tt into your project, it's self contained and you can tune for your liking.
Accessibility is **hard**. It's even harder to do it when you're fighting against an existing one,which is what you'll be doing. You're going to be trying to provide an accessibility layer to someone who is **already** using a screen reader and **already** expecting sites to work a certain way. If you think that's trivial, then I doubt your experience as a programmer. Applets, flash, and silver light **never** dealt with it, just no one really cared when those were still a thing. Now, if you build corporate websites that are inaccessible you'll get sued, or you'll miss out on customers, which is worse. You can use webasm with an HTML front end, but it removes almost all benefit. I'm not bitter or sad, I just don't hate JavaScript so much that I'll cling desparately to literally any opportunity to not write it. I see JavaScript and JavaScript tooling and libraries getting better and better every year. That's a positive enough future for me. There are places webasm will be cool, as I've said in other posts it can take stuff like Electron to the next level and allow for some really cool cross platform app development. I think it has some really huge obstacles to being able to replace JavaScript in front end development. Accessibility is one, and it's a big one, but it's not the only one. But yet again, I'm OK with that. I don't **NEED** JavaScript to be replaced at any cost because I actually like JavaScript. It has some really cool features and the handful of weird coercion issues it has aren't really a problem once you know about them. 
Every language has a stigma attached to it, because most programmers are extremely opinionated, and more than that, when the splinter is an inch from your eye, the whole world is filled by what seems like a plank. I personally have no love for Java, because of the Oracle shitstorm that happened at the end of 2012 when Oracle began forcing mandatory updates, and broke null handling as part of the update. You just don't build your house on quicksand. By extension, I have some prejudice against Java developers, which intellectually I realize is bullshit, but the feeling is emotional. Any angst you see against C# developers is exactly like that: people who came up as developers during a time when everything Microsoft stood for was absolutely wrong. It's hard to let go of the emotional baggage, and doubly so if you ever got burned by some Microsoft decision. Microsoft is still Microsoft, but the company has moved away from a lot of those corrosive practices everyone remembers from the 90s and 2000s. But you'll never sell /r/linux or /r/opensource on the idea that they have changed. There's too much history. Nevertheless, C# is a perfectly reasonable language choice if you want to be employed as a programmer. For that matter, so is Java.
I keep going back to the API's of [Math.NET](https://Math.NET) and Unity to look for features I'm missing so the CAD thing is really useful, thanks! &amp;#x200B; My vision for the project though might be a bit different, I don't want an all encompassing math library that does any mathematical task you ask it to. I basically just want algebraic types to build other things on top of. Not even necessarily for math-y things, algebra is just immensely useful. &amp;#x200B; If you're building a library for geometry, when you're implementing the circle you need to store its position and radius somehow. You could use floats, doubles, decimals, but at the end you really don't know which one will be the most useful for the end user. That's exactly what the Scalar&lt;T&gt; takes care of. In a Circle&lt;T&gt; you'll have a Vector2&lt;T&gt; position and a Scalar&lt;T&gt; radius. &amp;#x200B; Maybe you're making a GUI framework, and every element in your GUI tree has an int xPosition, int yPosition, int width, int height etc. It's a bit cluttered and verbose, so you might want to abbreviate it to Vector2&lt;int&gt; position, Vector2&lt;int&gt; dimensions. Those two variables say everything we were trying to say in a much shorter sentence. &amp;#x200B; And obviously in graphics and physics you'll need some good old matrix multiplication and vector operations. The library does that too. &amp;#x200B; And so on and so forth. I might eventually build more things on top of it. My target is image processing, machine learning and 3D graphics so stay tuned for more libraries.
Unfortunately not, I'm making this one as bare-bones algebra as possible. Things like splines build up on top of algebra though, I might do them one day in a different project. Just out of curiosity what kinds of functions are you looking for in a cubic spline and for what purpose?
Just discovered this library today, using it on a little side project, very cool!
:) True :)
Why not add a method which opens the connection and does all the error checking? You could also create a connection manager which will keep connections open for a specified amount of time after the last use of a connection, but then you have to signal when you’re done with the connection and make sure to tear everything down before application end.
Except it is not, since the symbol used depends on culture. In Italy we would write `10.204.778.496,0`. He used the C# format.
Create a class like `SshXyzClient : IDisposable` and use a field reference for the underlying Ssh Client (Ssh.Net). Implement `IDisposable` by calling `underlyingClient.Dispose();` in it This way you know that you are in full control of the class if you're working inside it, and can be assured that if you call `SshXyzClient.Dispose();` all resources will be free'd
I've been using inno for years. It can flex in every way you want, except package an MSI. Inno script is essentially python and lets you do just about anything.
That's what I would like to do and that's why I'm confused by all the examples that uses the using-syntax inside each separate function with connection code etc. &amp;#x200B; Would be better with a more complete example, at least for people like me... Or maybe I'm just to stupid :)
Removed: Rule 5.
&gt;I think it also created a bit of a mono culture &amp;#x200B; boom boom!
C++ has far more extensive operator overloading than C#. For quick reference, look here: https://en.cppreference.com/w/cpp/language/operators As with many features, C++ is the real deal, which is what makes the language great but also terrifying. Allowing something like overloading the meaning of the comma operator, or -&gt;* (no equivalent in C#) is fun until you come across an abusive library.
I'm the kind of guy who loves to make the abusive library &gt;_&gt; thanks for the reference I'll check it out
Oh another sick thing C++ has are Functors. These are cool as shit, I can imagine using them for matrix multiplication, like using a matrix object as a linear transformation function.
Perhaps they like ternary sigils in general, but particularly the? Part. 
In this case I would use var, as you have new int[] right after
That’s a stylistic choice. Generally, when the data type becomes quite clear from the assignment, I find var preferable. And when the data type is needlessly complicated (such as a generic type with several parameters), spelling it out explicitly and others having to read it explicitly is just cumbersome and distracting.
If name of data type is quite long, to shrink and simplify code, I prefer to use var.
It’s likely a practice developed to ensure all data related to the connection is not kept around once you no longer need it.
Huh, well that’s good to know. Thanks!
`var` because it's less noisy, unless having the type there adds essential information that isn't obvious from the identifier and assignment expressions.
Have a look at this example &amp;#x200B; [https://pastebin.com/0qtxuBji](https://pastebin.com/0qtxuBji) 
I think it would be better to refactor (refactor - rename) the namespace for your classes. Now it is "LinearAlgebra". I suppose it would be better to give the more unique name for the namespace: "com.github.hadisalehweb.LinearAlgebra" In this case the namespace won't conflict with another framework with the same purpose, if someone decides to add both libraries to his project. &amp;#x200B;
That's an really great example! Thank you very much! &amp;#x200B; So I guess the other examples are using "using" in every example just to make sure everything is cleaned up, just like u/modmans2ndcoming said. Thanks by the way.
As written before it's a matter of style. I use var in 2 situations: 1. When it's duplicated on the right side: var x = new List&lt;int&gt;(); 2. When it's required because the type anonymous: var x = list.Select(e =&gt; new {...}).ToArray() What I really hate is something like this: var x = SomeMethod() There is no way of knowing what x is by just looking at the code. You need to hover over SomeMethod in an IDE or open it to see. 
After reading some of these responses, I can't help but wish I had a resource like this when I was learning....well...***started*** learning. I still am of course. It never really stops.
Haha 🤣 preach it ! The new world NET is fucking awesome. 
;)
Each language has it pros and cons. Use code katas to learn them and then leverage the pros of a given language to do good work. Complaining gets nobody anywhere. I love C# because it’s easy. Yea I do t know how they optimized Linq in low level code and don’t care. I learn patterns and use that to build good apps. I learn about other languages to know what I can’t do in C#. 
&gt; What I really hate is something like this: var x = SomeMethod() It depends. A good method name should be a verb and any number of nouns, so one of the problems with `SomeMethod` is: where’s the verb? What does it do? What does it return? With some verbs, the return type is reasonably obvious. Session session = GetSession(); Rectangle rect = MakeEmptyRectangle(); Superpower superpower = CreateSuperpower(); Others, less so.
I'm not sure about c#, but in Java you only use a static method when you won't need to create an object. Like the math function in Java is static so you can call it whenever without doing Math m = new Math();
Ok, I agree. In such cases you might use var, but we both know a lot of methods are not as descriptive. 
Lol nah them just some sassy vectors you should leave it
Be the change you want to see in the world! 
Yes, definitely. And in those cases, you shouldn’t use var. But you should also consider: 1. could the method be renamed to something more descriptive? 2. if not, is it perhaps because the method is a poor design? Does it do multiple things, and if so, should it really be multiple methods?
People who hates C# is very similar to people who hates Java. I just don't care. Althought my everyday work language is C#, because of some specific projects, I can work with any technology and my OS of choice is Linux. When Microsoft give us the full experience of Visual Studio IDE on Linux this shit will gonna change.
It looks great at first glance except for one thing: I didn't see *any* comments or tooltips in any of the code files I looked at. While not functionally a problem, not having any comments can result in fewer devs taking the time to examine your code. I've observed that this is among the most common mistakes even experienced engineers tend to make. As a personal rule, I always make sure to comment my code at least a little before doing any code reviews, as it usually ends up saving time in the long-run. That's a relatively minor criticism, though. It looks really good overall.
Yeah I get what you mean, but I don't wanna include my own name in the namespace cause that seems a bit douchy, so I have to actually make up some brand name. Thanks for the feedback!
Ain't no thang but a vector extansion
As somebody who's also worked as a PHP dev, I know stigma. I would not describe C# as having one, aside from the usual tribalism as others have mentioned.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions &gt;Use implicit typing for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important. The standards are pretty clear on this :) 
In c# when you have a utils class that is where static methods are really useful. And when writting helper methods. These methods usually don't need instantiation can be very fast in accessing.
I personally use built-in types wherever possible (`bool`, `string`, `double?`, `decimal[]`, etc.), and `var` for pretty much everything else. I find that to be easy to remember/use, and it conveys some additional type information without being too verbose.
Static methods can be used when you have no side effects in that method (you take the parameters, do something to them, and return a result). However, you should also keep in mind future possibilities for that method. In your case, right now you are returning a single rate, but what if that rate depends on other factors (taxable income, country, state, etc.). You could update it to take those things, but you may have already fed them into the calculator as part of initialization, so having it as an instance method would give the method access to that information if you had it stored in some class fields/props. 
You want a static method. Instance methods (non-static) are for when you want to refer to object state. There's no object state that you're referring to with `ShowRate()`. On the other hand, maybe you have `new Person(int income)` and then you might want to have: public float ShowRate() { if (income &gt; 100000) { return 35f; } return 25f; } In this case, `ShowRate` refers back to the instance variable `income` and should be an instance method.
This. A good time to *not* use var is when getting something from a method. &gt; var animal = LoadAnimal(); We don’t now know what ‘animal’ is without going and looking at the LoadAnimal() method. 
Personally, I almost always reserve static’s for extension methods in business applications. And for extension methods I always follow a simple pattern: - Do I need a small piece of shared shared code at an object level that doesn’t warrant a class on its own? Ie format, convert, validate, etc. basically moving methods that would normally be a in a poco to a static extension. - Can it be tested independently of any business logic? In a simple test console app, static’s work just fine. But once you start writing code bound for production, I’d limit the amount of static’s you write.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/parsing-xml :)
then I'm sorry, didn't realize that
If you don't wear glasses you are fine.... If you do, use Java because they don't C#. 
StackOverflow is so interesting. The world is so obsessed with architecture and StackOverflow runs one of the top 50 sites in the world off a SQL Server database with 1.5TB of RAM in a simple primary-replica setup. No fancy distributed system with sharding and consensus writes and whatever else.
Yes, though only occasionally. I have honestly recreated the project before just to get around those headaches. It's completely random too, usualy an upgrade is super simple but occasionally it bombs for no freakin reason.
Use static as much as possible. Instead of member methods, use extension methods. Warning: Some developers who are better than me have argued that extension methods are hard to unit test. I don’t agree, but I may change this opinion later. 
For me it would depend on how large the xml is an how many values to want to parse from it. If it's just the 2 you mention and it's a string and not an actual xml document I'd use a Regex just for speed and brevity. If it could be a lot of differing unknown values then I would parse the string as xml using one of the following XReader, XDocument or XElement. I prefer the older XmlDocument which is actually different than the XDocument class I mentioned above. There are many different classes and ways to achieve what you want. You should use which ever you find the easiest for example are you good with linq or not. However Regex is most likely going to be easiest if it's just the 2 elements values you want. 
I think there are other good answers, but I'd point out static can be dangerous from a testing perspective, because if you ever new up another class inside a static method you have strong coupling. And you can't do standard constructor DI. One "new" slips through a code review and you potentially have issues. Keep that in mind. In many respects, both "inline new" and "static" are code smells. Not forbidden, just keep in mind the problems they can cause. 
Static methods have their place but they're more like the formulaic and procedural approach to things. Tell you what you'd prefer: int x = 5; int len = Program.GetLength(Convert.ToString(x)); // or int len = x.ToString().Length; When something is dependent on the object instance state itself then normal methods is the way to go. It's not really about functionality, it's about encapsulation; static methods would make you riddle your other code with specific dependencies that make it very difficult to change behavior later.
Do I care? No, probably not. Knowing that the type is called `Animal` rather than `Animall` doesn't really matter. I'm still just going to hit F12 to see the list of available methods.
That's not a "standard".
Static methods, including extension methods, are hard to unit test because you cannot mock static invocations.
Just use var all the time. It removes distractions so you can concentrate on the real logic. In the incredibly rare case where you need to know the specific data type, you can always hit F12. I've never encountered a case where I saw var and said "I wish this had the real data type" except for complex LINQ expressions involving grouping. And in that case I have to use var because I don't know what the real type is anyway. 
is it advisable to instantiate dbContext in a static class? 
apart from the testing perspective and strong coupling are there any other dangers of instantiating a class in a static method? 
Also, how do you know the real type? You have to lookup the definition of LoadAnimal before you can explicitly declare a variable of that type. At which point you know the type and thus don't need to be explicit. You are only being explicit for a unknown, future person whom you assume both cares about the type and doesn't already know it. That pretty much limits the audience to learners looking at code samples, not people on your project. 
(not op) i would recommend you use dependency injection to instantiate and ensure only one instance is used in scope. 
These days I'm writing a lot static methods as mutators of state objects. Very easy to put tests around that static method. If you need a factory to emit some interface with different behaviors, you can compose these static methods in a thin wrapper class that adheres to the interface. There's very little if any actual logic in those classes so I don't bother testing them. The functional guys I work with have definitely been having an influence on me. I think it's for the better though.
okay, but a static class won't have a constructor so how will i inject the context 
Well, you can't mock them, but I don't think they're usually that hard to unit test themselves (at least as long as you keep them simple). I don't see any issue with being able to write tests that pass in inputs to the static method, and assert the result. We have plenty of tests around our extension methods. But maybe you were just referring to writing tests around code that uses these methods, in which case yes, that could cause issues since they can't be mocked.
Nothing immediately comes to mind. "Static factory" pattern is a counter example to my concern. You really just need to pay attention. 
That is very bad practice. Static should be used for helper classes and extension methods but you should not be keeping mutable state in your static classes and using them as global variables. At my job, many of the developers wrote *everything* is a Singleton. Everything is significantly harder to read, test, understand, and debug. And good luck once concurrency and multithreading comes into play.
This. Never reinvent the wheel. 
Why do use static methods as much as possible?
Conventional wisdom will tell you that global variables are a bad thing. They can be accessed from anywhere and in an uncontrolled manner. Static methods are exactly the same thing. You're making a method global. Do this too much and your code can become a spaghetti birds nest of everything calling everything with no order to it. Static also creates hard dependencies between classes, which can make things difficult or impossible to isolate if you want to write tests for your code. &amp;#x200B; Not to say that static methods don't have their place, they are appropriate for helper type 'pure' functions which take a value and return a value and have no side effects.
This is how I feel. I used to subscribe to the adage that you shouldn't use var when the type isn't on the right hand side of the assignment operator, but lately I haven't found a reason to actually follow it. I can use the dot operator to find properties and methods on the type. I can hit F12 to go see the type and if I am really curious I can hit ctrl-F12 to see the implementation of the type. I can even just peek the type if I don't want to open a whole new editor tab. All of those actions are available on all platforms, either with Visual Studio in Windows or VS Code on Linux/Mac. If your text editor doesn't do those things, switch to one that does. Not using var sucks.
Static methods are fine for testing when they meet two criteria: 1) Nothing they do goes outside the process. Unfortunately, most of the static libraries I've encountered do file I\O or network calls. Those are the things that need to be mocked the most, but by virtue of being static, I cannot. I end up building a lot of wrapper classes to encapsulate the static methods in order to mock them. 2) No long chains of static methods. Chaining a large number of static methods together means you cannot mock logical boundaries and means that your "unit" tests will be excessively long and cover far more than the unit under test. As with everything, there is a time and place where the tool is appropriate. For me, static methods are great for things like input validation, `TryParse` style structures, and similar quick, self-contained logic. Having them as state mutators is the exact opposite of their intended use because static methods are supposed to be used when state is not involved.
I think the tiny apps thing makes sense for some scenarios. Unix has a bunch of reasonably sized tools that do powerful stuff together, and that's the real trick to achieve, but for serverless, I can think of a few good use-cases: managing notifications on a schedule; handling data for apps; others. I don't think serverless is inherently had, but definitely could be overdone if it were the only thing you did. 
You don't pass it in through a constructor, pass it in as a parameter to your static method when you call it. Constructor injection isn't the only method of inversion of control.
You wouldn't. You'd either pass the DbContext into the static method as a parameter, or you wouldn't use a static class.
Resharper -&gt; use var in entire project That's what I do when I inherit a project. I used to fight the other way, I eventually realized var is nicer to read and less noisy to me. 
oh thanks
&gt; at least as long as you keep them simple That's the gotcha. Unfortunately, most of my experience with static methods is with methods that chain 20+ static methods deep with a file operation or network operation at the end. I want to mock those. Something like input validation or TryParse? Heck yeah, static methods are great for that. But what I end up seeing is a lot of the core business logic being embedded in big chains of static methods. That is what I push back against.
Create a thread-safe access to a private variable containing the instance. If it's the first time accessing the property then instanciate the DB and place it in that variable (field). Is it an ASP application? If that's ASP you will have problems with concurrency, like a user hits a method and inside the method you are adding something to the DB then another user hits another method that saves the DB immediately. So the first user will have his data half saved before completing the operation. I recommend DI. Or even implement a DB instance per request manually like everytime a request starts, instanciate a new DB inside HttpContext
okay, I get it now thanks
This. "Static" is realy a misnomer, since a "static" c# class has no state. Someone dropped the ball on that one. ;) The keyword "static" could have instead been "stateless" and maybe it would be a bit more intuitive for people to understand. If you don't need to maintain state data, there is no reason to go through the process of creating an instance.
it's an asp mvc application
For one-offs, I couldn't care less how you deploy it. My concern is definitely these poorly designed microservice architectures where I have to manage a ridiculous number of different deployments. Getting people to do proper integration testing with just a database and web server is hard enough. There's no way the people I work with are going to be testing their whole server less cluster on their local machine. 
So, forget about that. You will have problems. Use DI or create a new instance for each new request. 
Yes, but that takes a lot of skill and professional assistance. You can't hit that scale slapping together stuff using an ORM you barely understand, which is where far too many developers are at these days. People say DBA is a dying profession, then they wonder why their reports take 4 hours to run.
Agree, this is a problem. One of the issues I've experienced with any flavor of service oriented architecture is that deployment of the system needs to be a first-class topic, not that thing you figure out at the end. Developers aren't likely to test the entire system if it's difficult for them to do so. 
Fair enough! Thanks for the detailed response.
Are you talking about having a utility class that has the logic for creating the context? Or is the static class going to use the singleton pattern and share the context with calling methods? If it's the first case, the use of utility classes are generally considered to be an indicator of poor design. We're all guilty of doing it at the start of our careers, but it's not an object oriented approach, and it creates dependencies in your code. The fewer dependencies the better. Depending on your requirements, you can hide the details in a base class, or create an interface for it, and use the factory pattern to return an instance. This way, you're not tied into a single database, and your code becomes more testable. If it's the second case, then the best practice is to create a new context per call. DB contexts aren't thread safe, so sharing the context is only possible if you're designing for a single threaded environment, which you should never count on. The problem a lot of people are addressing, by reusing the context, is the performance hit of creating a new instance. This cost is very low; the expensive operation is creating the DB connection pool, and .Net has a DB connection pool that relieves you of this consideration.
* for anything going to prod. Its important that things are reinvented in personal projects for learning. 
Same idea, if you don't need an instance, you use a static method.
I'm not sure what you mean by this? Static classes can have state.
I'm talking pure business logic, mutating the state of my domain objects. I typically have only one or two of these methods being called by a method on some service class. That class would be concerned with things like logging, persisting data and so forth. The pure business logic is isolated in the static methods. The biggest advantage of this is that you can test the crap out of it without a bunch of complicated setup. All that method cares about is your domain objects. You hand the method a known state and compare the output to the expected state. It's as easy it can possibly get to test. You then have second tier of tests that ensure your service class is doing what it's supposed to do. These take more setup because you need to mock dependencies. You shouldn't have to write as many tests for this though because the majority of your branching is pure business logic, which is already tested in the earlier tests. I was skeptical of this approach at first too but after doing it for a while, it's a pretty good way to organize your code.
The var keyword also allows for looser coupling in your code. Say you simply need a collection of ints for example and the method that supplies that returns a HashSet instead of an array, do you care? Then when you refactor that method and it returns a List, you still don't care. Var gets the needed collection and didn't need to be changed each time
right now I'm creating a new instance inside each static methods . I tried to use some of the DI out there but I ran into problems because of the way usermanager was implemented in the account controller using identity. 
&gt; Static classes can have state They can, as can any other class; the question is whether or not they should. In an application that is single-threaded (and perhaps always will be), it's generally safe, although it might lead to questions of design choice. In a multi-threaded application, a stateful static class can be very, very dangerous. You can always lock/block when changing and reading state, of course, but it (again) leads to the question of why the class is static in the first place. Of course, it's valid in certain scenarios - configuration classes, etc. - but it really ought to be the exception rather than the rule. &amp;#x200B;
right now I'm creating a new instance of dbContext inside each methods that requires database calls. eg public static decimal getAccountBalance(string accountNumber) { return new dbContext().FirstOrDefault(a =&gt; a.accountNumber == accountNumber).Balance ; } forgive my formatting I'm on mobile .
A note about the word static in nearly all programming languages. When a program is compiled, especially one like C++, things that are static are things that have fixed memory addresses. I bring up C++, and not C#, because in C++ you use stack-based variables more frequently than in C#. I think in C# the only things that are usually on the stack are value types (like structs). Where as in C++, if you define an object that isn't declared as a pointer to the heap, the compiler will literally allocate a chunk of space on the stack necessary for the object to exist. So what is my point? Well, in both of these languages, a static class method is a method where the compiler can give a location to the method at compile time and not some offset-based location, where the location is a function of "this" and some constant to find the method. This is why you cannot override static functions, because they do not belong to the object at runtime. For a normal method, an overridden method is basically a flag for the compiler to say "hey, don't use this method when assigning your jump tables, instead normally go to this location instead, but also keep a reference to the base method if the code uses the base method explicitly". Other folks have explained why you should use static versus non-static, but this is a peak into the engineering behind it all.
Use static if it doesn't use any instance variables. You will probably find you use it most for private utility methods. They should also be pure methods
It's called static because the compiler assigns a static memory address to the method, whereas non-static methods are a function of the objects "this" pointer and some offset to access to the method in program memory.
Just use built in XMLSerializer. https://dotnetfiddle.net/7X3QsP
If you do that, keep in mind that will exist only one instance for the entire application's lifetime, keep in mind concurrency. Other than that you should be OK. But it's never a good practice to do this. BTW, if you are using identity's rolemanager inside a static method it won't work as expected because it gets all the roles on a new instance, therefore UserIsInRole or similar methods will always return the same value. But if you are creating a new instance of DB and passing it to usermanager, everything should be OK but creating a new instance is an expensive operation. 
i brought up usermanager because of the problems i ran into while trying to use dependency injection. the static class in which I'm creating a new instance of db has nothing to do with role manager or usermanager, it is only used to get some quick values from the database .
Ideally static classes should be pure. They should only contain operations that are dependent on arguments or other static classes and no more.
I'd argue static contexts are normally fine, but the moment `TaxCalculator.ShowRate` needs an external dependency is when it should really be an instance method. That way, you can use any number of dependency injection libraries to inject the dependency (or instantiate the object with a mock for testing purposes).
That's not true, non-virtual instance methods also have a static address. You only need `this`to figure out the address of the method if it's virtual (or if it's an interface method).
i absolutely think so. what this means is if your static class contains database operations then it shouldn't be a static class right? 
Hence why they're not truly static. Yes it's an offset of the this pointer, but it's not known until the object is instantiated
In addition to [what I said in response to your other comment](https://www.reddit.com/r/csharp/comments/b4j0yv/when_to_use_static_methods_vs_normal_methods/ej7dzr7/): &gt; I bring up C++, and not C#, because in C++ you use stack-based variables more frequently than in C#. I'm not sure how is stack allocation is related to `static`. &gt; This is why you cannot override static functions, because they do not belong to the object at runtime. You also cannot override non-virtual functions.
Yes, you should pass the context through the argument. Imagine you want to have a static methid that adds something to TableA, you call that static method in your controller and afterwards you add another entry to TableB that has an FK for TableA. For some reason you have an error while adding TableB and you throw an error while avoiding context saving (SaveChanges for EF). Even thought TableB wasn't created, TableA was. After this you will try to use SQL TransactionScope and after a while you will notice that you app's performance got degraded by it. Been there a few years ago. 
thanks
FYI, a static class can technically have a constructor. I just wouldn't recommend using it
its not at all the same. Variables contain state, a static class does not. What you're essentially saying here is "dont reuse logic unless its associated with a state" which doesnt make any sense at all.
wow never knew this
No, there is no offset for non-virtual functions, and the address is known at compile time. [Look at this disassembly.](https://godbolt.org/z/xGIa56) Notice how a static function and an instance function are called exactly the same way (a jump to static address), whereas if it's a virtual function, the address is calculated from the `this` pointer.
Agreed. I am very bad at expressing my ideas. I forget that it is possible to mutate states in a static method just because it is very bad practice. Hopefully you can correct that culture. 
Don’t listen to me. I’m terrible at expressing myself. However, I like to use extension methods any time I am not mutating states. I avoid mutation altogether because it causes confusion. 
That's fine - new context on each call. Why would you want to create a static class to create the context then? One point - any class that implements IDispose should be wrapped in a using statement. This code may be leaving the DB connection open until the dbContext is dealt with by the GC. If you're running a lot of queries, you could end up with no available connections in your DB Connection pool
Are you recommending using the DI container to create a new context for each call? That's the service locator anti-pattern.
right now i think it was a mistake using a static class for this purpose . I was read online that even if dbContext implements IDispose we shouldn't manually dispose it or wrap it in a using statement, it says dbContext is capable of managing itself after its done. so I stopped wrapping dbContext in using statements. 
Yes I know all that. They said static classes don't have state.
This would generally be considered an integration test. That said this is an important thing to write! Making sure your components work together (integration) is just as, if not more, important than making sure they work in isolation.
If you have multi threading and shared state in a static method, that can lead to issues. There are ways to handle that, but you have to add code to do so safely. 
Under the original definition of unit test, yes. Under the modern definition, no. But who cares about definitions? What's important is that you have the test to ensure that you are actually talking to the database correctly. 
Because java doesn’t have the virtual keyword. You get a different non-vtable call with static so you might have some performance benefit, but C# does it correctly.
Static classes are important. In good and bad ways. Good: no allocation, so no garbage collection pressure. Bad: no interfaces, so good luck using them in unit tests - you'll have to test actual calls to the DB for a DB helper static class. The real trap is if you end up with static classes using each other, there's no way way to untangle that.
I'd like to see a link if you can provide one... The point of a using statement is to implicitly call the Dispose method, regardless of normal completion or throwing an exception. The dispose method should call Close on the database connection. There's no magic in the DbContext that knows that it's passed out of scope and waiting for the garbage collector to come around. The only "gotcha" with the using statement is if you're using LINQ to entities, it's deferred execution until you try to instantiate the result. If you've created the query inside of a using statement, and are returning the deferred query. By the time the calling code instantiates the result, the context (and underlying DB connection) are disposed, and so you can't pull the data from the database. The solution is to call ToList() on the result before it leaves the using statement's scope.
yeah the link talks about using LINQ. here's the link - https://softwareengineering.stackexchange.com/questions/359667/is-it-ok-to-create-an-entity-framework-datacontext-object-and-dispose-it-in-a-us
Also, a non-static class can have a static constructor.
A very common case for static methods are extension methods that explicitly mutate the object. Prominently the Use and Add methods from Asp.net Core.
It compiles to the exact same code, generally you’d always use var as if you can use it it means the right side of the assignment gives a well defined type. In most cases it makes no difference wether you use var or the full type name except var is less verbose. The key difference is when making linq queries, especially with anonymous objects, as a small difference in the query can make a big difference in the returned type while making no difference in how you would consume it. TLDR: use var everytime 
isn't that the only constructor it can have? 
&gt; non-static class
This is a religious thing. Do whatever the convention of the project is. If there is no convention push for the team to accept a convention and enforce it via tooling (simplest is editor.config). My personal opinion is var when type is apparent or type like string or int and explicit type otherwise. In your case the type is apparent so var.
Extension methods are sort of their own concept, though. Can make understanding the use cases difficult.
Under the modern modern definition, yes. OP is using the in memory provider which supports this exact situation without turning into the tautological turtle race. &amp;#x200B; &amp;#x200B; &amp;#x200B;
You're right. I should have phrased it a bit differently. In the case of extensions methods, you are still passing in all the variables that should be needed and are not causing side effects on something that wasn't explicitly passed in (unless you are working with a global variable).
There are other concepts though. Static classes are not mockable. Hence a complex stateless business handler is typically created as singleton and refers to other stateless singleton sub-handler. Using dependency injection there is typically no need for static classes apart from extension methods.
The purpose of the unit test should be to ensure that, in all possible states of the dependencies, the unit under test acts as intended. What happens when the insert fails? What happens if you get a timeout? Without mocking, these are difficult to test.
&gt;What you're essentially saying here is "dont reuse logic unless its associated with a state" That's completely not what I've said at all. The point I was trying to make is that if you use static inappropriately, more often than not you will end up shooting yourself in the foot. This is how you end up with software that is static all the way down and an absolute nightmare to work with. Static is dangerous if overused. &amp;#x200B; I guess it would be more useful for me to have answered *when is it (in)correct to use static*, but plenty of other people had covered that already.
Another use in for switch statement pattern matching In a web apis I like have exception types like BadRequestExceptions and when I throw that I want the server to return a 400, and the same for other common status codes. So in the global exception handler I will have code like \`\`\` switch (exception) { case BadRequestException \_: context.Response.StatusCode = (int)HttpStatusCode.BadRequest; break; case UnauthorizedException \_: context.Response.StatusCode = (int)HttpStatusCode.Unauthorized; break; case ForbiddenException \_: context.Response.StatusCode = (int)HttpStatusCode.Forbidden; break; case NotFoundException \_: context.Response.StatusCode = (int)HttpStatusCode.NotFound; break; default: context.Response.StatusCode = (int)HttpStatusCode.InternalServerError; message = "An unexpected error occured :("; break; } \`\`\`
What does your Instructor say?
If you need to use the class objects inside the method it cannot be static, static must be a method that only uses the object passed to it and/or created inside the method scope. Also methods that are used in all areas of the code for many applications are better if they are static, it makes for less memory allocation and better performance since static methods are compiled at runtime and stay in the memory. Also static methods in some languages can cause issues when using them in multi-threading/processing because sometimes the threads or processes use separate memory allocations so if one has a static method the other could have a problem accessing it.
Nice! I like your video too. Don't stop those, you're doing great work.
Release Date: 2.April 2019 [https://visualstudio.microsoft.com/de/vs2019-launch/?rr=https%3A%2F%2Fwww.google.de%2F](https://visualstudio.microsoft.com/de/vs2019-launch/?rr=https%3A%2F%2Fwww.google.de%2F)
You can use the framework's xsd.exe utility to generate .net classes based on the XML. After that you would just need to use a simple deserialization method to populate the classes with your XML. https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-schema-definition-tool-xsd-exe
Probably some small easily overseen mistake. Maybe try StackOverflow?
You missed one namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(TaxCalculator.ShowRate()); Console.Read(); } } public static class TaxCalculator { public static float ShowRate() { float rate = 34.5f; return rate; } } } 
&gt; Static methods are exactly the same thing They're literally not. What the fuck? They're const for one thing. Are you saying global enums are bad because they're global?
While true, and I do agree with you in general, it's also a reminder to use the minimal interface in the first place. If a method returns a hashset, but you only need the IEnumerable aspect of it, just store it as an IEnumerable to start with and you're protected from non-breaking refactorings but also clearly defining how the object will be used regardless of its specific type.
If your code is so bad that your integration tests are too slow to run against a real database, then its probably going to be too slow to use in production as well. 
&gt; What happens when the insert fails? It throws an exception that bubbles up through the web stack to the generic error handler, which turns it into a HTTP status code. If you are to the point where you are testing infrastructure then you probably don't have enough work to do. 
Oh man, thanks for the kind words! really appreciate it. &amp;#x200B; Regarding comments, I wholeheartedly believe comments are bad and distracting and make code cluttery and difficult to scan, I think good code supported by a good language should comment itself, by dividing big chunks into functions and naming those properly. I'm not the first one to think of this, Jeff Atwood wrote a [great article](https://blog.codinghorror.com/when-good-comments-go-bad/) about it. &amp;#x200B; You are definitely right on a certain level though, sometimes there's no way around it. The T4 templates I wrote for example are an absolute and utter nightmare to read, they're just inherently difficult to reason about because there's 2 languages at play in the same file. I'll definitely be adding comments to those and some other difficult-to-read parts of the code. &amp;#x200B; Thanks again for the positive feedback! Cheers.
This is a great time to use var. Imagine code which doesn’t do anything with animal; but instead passes it to say a Vet class. You now have no dependency on the return type of LoadAnimal. Which is IMO very good.
Use In Memory DbContext then you don't need mocks. 
I know that XML is not HTML, but I can't help but be reminded of [this classic StackOverflow thread](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454). If you need to run something once on a pile of data, regex is probably fine. If you're writing code to last, just use a real XML parser. It's about the same amount of work and is about 99% less likely to cause problems in the future.
Slides:https://docs.google.com/presentation/d/1r_SlfLpf7gT98p1pPjCc9d3II8W6qBeTMPDusBFGmcY/edit?usp=sharing Dirty code:https://github.com/Almantask/CleanCodeSeries.Workshop/tree/master/src/CleanCodeSeries.Workshop.Lesson2.Functions Clean code:https://github.com/Almantask/CleanCodeSeries.Workshop/tree/CleanCode-Twitch/src/CleanCodeSeries.Workshop.Lesson2.Functions Vod (to be split):https://www.twitch.tv/videos/400056413
See https://martinfowler.com/bliki/TestPyramid.html And https://www.youtube.com/watch?v=EZ05e7EMOLM
There are a lot of good free videos at Udemy.com 
I don't really understand what you're asking. Is there a problem with the code? If so, what error do you get? Or do you want tips on cleaning up the code?
The trouble with integration tests against a database is you need to spin up a new database each time, or invalidate indexes, primary keys, anything supposedly unique. It's slow and you're not proving anything other than the already tested connectivity between the database and the client. This can be tested with the in memory database. You're arguing (and I'm making a leap of faith here, I still respect your arguments on many many threads) that you need to wait for 10 seconds to test a timer when you can use the TestScheduler and just move it on 10 seconds. 
`// An acceptable implementation.` `static void Log(ReadOnlyMemory&lt;char&gt; message)` `{` `// Run in the background so that we don't block the main thread while performing IO.` [`Task.Run`](https://Task.Run)`(() =&gt; {` `string defensiveCopy = message.ToString();` `StreamWriter sw = File.AppendText(@".\input-numbers.dat");` `sw.WriteLine(defensiveCopy);` `sw.Flush();` `});` `}` Wait, shouldn't the defensive copy be outside the task delegate? Am I misunderstanding something? Doesn't that have the same problem referring to the Memory object after a return? &amp;#x200B;
&gt; you need to spin up a new database No you don't. Write your tests so that they don't depend on the current state of the database. If I'm testing Update or Delete, my test starts with an insert. 
Ahh yeah all good points in response to my reply. I’m no expert coder so I’ve learned something :)
We use fluent nhibernate on our FinTech platform against a Sql server. Our unit tests use a code first SQLite database which allows for the system to work seamlessly on a disconnected server for tests. Changing a bit of architecture and imement some easy patterns will save you a ton of headaches. 
Sorry if my comment seemed argumentative - I just think it's important not to mislead beginners who might come across posts like this (not just OP). I'm glad you clarified though!
Thank you for your support ! 
What kind of SQL server are you importing to? MySQL, Microsoft SQL server, PostgreSQL etc.
... or hover over LoadAnimal and see its return type.
General rule of thumb for me is, when in doubt, dont go static. It makes it harder to test and generally is unnecessary. I typically limit statics for extension methods.
Not IT guy, not sure what server means, but it is Sybase database (sybase adaptive server enterprise), this is the information I have, not sure if I have answered your question. &amp;#x200B; My connection string is correct, I have used the connection string on other program (pulling database table into DataGridView).
I'm proud of you guys. Not a single dogmatic explicit all the time post.
have you tried creating another connection and datareader, since the first connection is still open and being used by the other function. have you also tried using join to get all the values you need from both tables using one query? typically most things that work on Mssql will likely work on mysql also. it's been long i used Ado.net, you could also use linq or entity framework 
The server type will make a difference but check out table-valued parameters for bulk inserts like this. Your other reply sounded like you’re pretty green on DB stuff, though, and a table-valued parameter would require you create a user-defined type on the DB. If you do go that road beware that the DataTable column ordering must match the UDT. 
Use a clean database instead. I would much rather write my tests to insert a couple records I need than mock out every single dependency. It’s literally less code and is easier to follow when integration testing code that coordinates dependencies than it is to unit test with mocks. I’ve even seen EF Core’s in-memory DB run end to end tests faster than tests that rely on Moq. 
What happens when your SUT or dependency implementation changes and your mock blindly is no longer called? You didn’t isolate for those problems...so why should integration tests be any different?
Sybase is a pain in the butt. Your options are to: 1) Use the Sybase ASE Client and developer kit. You'll have to figure out how to use the ASE data adapter. If you go this route let me know so I can say a prayer for you. The Sybase documentation is awful and Sybase is so esoteric that it is very difficult to find help or examples. If you can get this to work it will most likely be a stable solution but you're going to spend a lot of time messing with the client driver, figuring out how to interface with it, packaging sybase DLLs into a function program, etc. http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.sdk_12.5.1.adonet/html/adonet/Getting_data_adapter.htm 2) Write some custom code that will write the SQL insert statements. 3) Try to write some code that will use ODBC which is look like you did. ODBC is the middle man. My experience is that the Sybase ODBC is not great and you run into a lot of issues.
Anything that requires a real database takes orders of magnitudes longer to run, requires more effort to write (all the data you have to insert just to set up your test..) and makes testing specific interactions of your code way more difficult. Having a single integration test that checks the happy path and all the configuration, etc. and then lots of unit tests is imo the way to go. You get good code coverage with minimal effort and the tests still run reasonably fast (it's nice having the test suite of your medium sized program run easily in under ten minutes instead of an hour plus) Using the in-memory provider for integration tests rather defeats the purpose, since you're not testing the interaction with the environment anymore. One could use it for unit tests, but dependency injection and mocking is just so much easier.
Wait until the type becomes optional with new. The argument will start all over again. 
My take after 10 years of questioning this and trying different approaches: My personal definition of a unit test is that a class is a unit, and a unit test is the class that tests that class. This definition is useful in most "object oriented" focused languages. What most people refer to as object oriented programming is really class oriented programming. If your language is a class oriented language, it is only natural to write the code as classes, so this is what you are testing, the classes. In other words the units of class oriented languages or code bases are the classes. Each class test (read unit test) should only be focused on testing that one class, not it's dependencies. Otherwise you end up in a situation where testing certain classes become very difficult because it is difficult to set the test to satisfy the needs of the dependencies. This also prevents your test suite from retesting the same underlying core dependencies over and over in different unit tests, which makes the suite slow and bloats the code will duplication. You want to h entire test suite to run very rapidly so everyone feels like running it frequently and feels it is helping them more than it is holding them back. I'm not necessarily saying you should use mocks though, or to go out of your way to avoid dependencies or coupling. I try to stay away from both mocking and strangely avoiding dependencies as much as possible. Even though the focus of a unit test is testing that one unit, often the only meaningful way to test that unit is to allow it to implicitly use and test its dependencies. I realize I sound like I'm contradicting myself, so let me explain. What I'm saying is, let's say you have a class that represents a database table, and can be used to save or read data from that table. Then it would be perfectly natural for the unit test to actually work with a real database. But if you have a repository class that utilizes that table class, any necessary tests for that repository don't need to actually work with a real database. At this point you might be tempted to use mocks, but if you try it, ask yourself it the test using the mocks is really work its weight or is it just a strange duplication of the logic of the repository, but in a strange test form. It may be better to taken any actual logic from that repository and move it to its own separate class with its own test. Then you would be left with a repository class that reads more like a specification than something with logic that needs testing. Then you can just rely on the compiler to test that repository for you instead of a unit test. So what you end up with is a combination of unit tests that implicitly test the unit's dependencies because that is the only natural and meaningful way of testing that unit, and units that are more of a specification in themselves and don't benefit from a unit test.
&gt; Using the in-memory provider for integration tests rather defeats the purpose, since you're not testing the interaction with the environment anymore. Agreed. If given the choice between that or mocks, even I will pick mocks.
Thanks for the answer ! &gt;have you tried creating another connection and datareader, since the first connection is still open and being used by the other function. Yes I tried, this is my problem, I got the error "a connection is already open" and same with the data reader. &gt;have you also tried using join to get all the values you need from both tables using one query? I thought doing this but the id as the foreign Key I need on my where clause is the result of the same query with the join so it didn't match. &gt;typically most things that work on Mssql will likely work on mysql also. I don't know what "Mssql" is but I see that the parameter "multiple result set " is only available un SQL server database and not in MySQL database. &gt;it's been long i used Ado.net, you could also use linq or entity framework I Heard of entity framework but I don't know If I could do what I want/need with it. Because I use loops with dataReader to add each row in my database into my dataTable directly and return it and use it in my datagridview in my form 
&gt;Yes I tried, this is my problem, I got the error "a connection is already open" and same with the data reader. please show some code if you can, I'm pretty sure you can create multiple connections if you use a different variable. &gt;I Heard of entity framework but I don't know If I could do what I want/need with it. Because I use loops with dataReader to add each row in my database into my dataTable directly and return it and use it in my datagridview in my form yes you can definitely use entity framework and that's what I'll suggest although it has a bit of learning curve. with entity framework you can easily use navigation property to get related objects from your database 
I have trouble understanding how that is a good example at all.
I'm a bit rusty, but try this &amp;#x200B; I tried to reuse as much of your code as possible and keep to the same style. &amp;#x200B; Data management block //Database table name is XYZ, how to know which record is already in the database. var selectQuery = "SELECT COUNT(*) from XYZ where Field1 = '{0}' AND Field2 = '{1}' AND Field3 = '{2}' AND Field4 = '{3}' AND Field5 = '{4}' AND Field6 = '{5}'"; var insertQuery = "INSERT INTO XYZ VALUES({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})"; var updateQuery = "UPDATE XYZ SET Field7 = {6} WHERE Field1 = '{0}' AND Field2 = '{1}' AND Field3 = '{2}' AND Field4 = '{3}' AND Field5 = '{4}' AND Field6 = '{5}'"; for (int i = 1; i &lt;= table.Rows.Count; i++) { int Value1 = Convert.ToInt32(table.Rows[i][CField1]); int Value2 = Convert.ToInt32(table.Rows[i][CField2]); int Value3 = Convert.ToInt32(table.Rows[i][CField3]); string Value4 = table.Rows[i][CField4].ToString(); int Value5 = Convert.ToInt32(table.Rows[i][CField5]); string Value6 = table.Rows[i][CField6].ToString(); float Value7 = float.Parse(table.Rows[i][CField6].ToString()); //How to write float? string query = String.Format(selectQuery, Value1, Value2, Value3, Value4, Value5, Value6); if (DataRowExists(Cn, query)) { query = String.Format(updateQuery, Value1, Value2, Value3, Value4, Value5, Value6); } else { query = String.Format(insertQuery, Value1, Value2, Value3, Value4, Value5, Value6); } ExecuteSqlCommand(Cn, query); //When the first SIX fields are same, then the record is determined to be DUPLICATE. I guess in this case, just use Update the database record, regardless if Field7 is same or not. //If not all SIX fields are same, the it is determined to be DIFFERENT record. //Probably need Try Catch, in case Covert.Into32 gets involved with some non numeric input. } &amp;#x200B; New functions static bool DataRowExists(OdbcConnection connection, string sql) { var table = new DataTable(); int rowCount; using (var adapter = new OdbcDataAdapter(sql, connection)) { using (var command = new OdbcCommand(sql, connection)) { rowCount = Convert.ToInt32(command.ExecuteScalar()); } } if (rowCount &gt; 0) { return true; } return false; } static void ExecuteSqlCommand(OdbcConnection connection, string sql) { using (var adapter = new OdbcDataAdapter(sql, connection)) { using (var command = new OdbcCommand(sql, connection)) { command.CommandText = sql; command.ExecuteNonQuery(); } } } Personally I would use some kind of tool to import data to a database. Probably import the Excel file as is to a temporary table and then use UPDATE / INSERT (or MERGE) commands to update the existing table. &amp;#x200B; &amp;#x200B;
This is not really my question, or this is only very small portion of my question. I am not particular interested about insert statements, I am more asking about code structure and other parts of syntax.
I think it's a case by case thing. Look at the code, does var make it clearer or easier to read? Sometimes it does. Or is it more helpful in this case to explicitly declare the type?
That future person might be you.
How it isn't?
So the guidelines written and, maintained by the ppl in charge of the language can't be considered a standard.. "OK" 
This isn't a technical answer but I've noticed that the analyzer in VS is great at finding cases where you can refactor to a static. Imo, this is a great way to learn why it's a candidate, like no state mutation, and make an intelligent decision about if you should make it static.
Not at all. I love it when other devs challenge what I say. I say a lot of weird stuff.
You want to use static methods when 4 things are true: 1. the method does not cause side effects (logging is fine) or rely on static state. 2. If it's a public method, the method's behavior is not very tightly tied to the objects it receives as parameters. If the method is heavily reliant on one of its arguments, it should usually be on that object. It should only be static if it can pretty much stand alone. 3. There's only one good way to do the operation the method describes. If parts of the operation could be arguably performed equally well by a different implementation, then it's likely that it should be an object method that implements an interface, so that those alternate implementations can be substituted. 4. The definition of the methods body is more important than its signature. There's a lot of redundancy among these rules, so in a nutshell you want to make a method static whenever you can but you only can if the method is reliable and its behavior is not negotiable.
&gt; If it's just the 2 you mention and it's a string and not an actual xml document I'd use a Regex just for speed and brevity. &gt; &gt; Not to pile on, but if it's valid XML, you should always use an XML Parser. Consider this: OP manages to make this work using Regex and goes off and puts this somewhere that, like most things, becomes quite important to the business. Three years later, OP has moved on and forgotten about this. The vendor/system that produces this XML does an upgrade and adds extra fields or attributes. Everyone says "Oh, no problem - it's just some extra data, it won't be a problem. But, instead, what happens is that the Regex fails silently in some way - maybe it no longer captures some part of a field, or captures the new field instead. Worse still, nobody notices this for a few weeks/months when some kind of important business process fails, or finance starts asking questions about why we're suddenly ordering thousands of extra widgets. Do it the right way the first time, it might take a little extra time, but it'll be more durable.
Thank you very much for your time. &amp;#x200B; What do you mean temporary table? Is it the same as what my code does (till the line table.Rows.Add )? &amp;#x200B; I am open to any other better option. Actually, my comment also asks if there is a way to push whole datatable into database at once, without checking one row at a time? Use some kind of Try Catch for pushing whole datatable (bulkcopy). &amp;#x200B; Regading your function **DataRowExists** , how is **var table** used ? I did not see how it is used in the function. &amp;#x200B; Thanks.
Never heard of Wix looks pretty good, there is also Microsoft Visual Studio Installer Projects which is msi based also, integrates well with VS as you can imagine being built by MS. .NET Core 3 will better improve self contained deployments by giving you the option of packaging the dependanies and runtime into a single exe more info here https://github.com/dotnet/designs/tree/master/accepted/single-file 
He's correct, it's just the defensive copy is in the wrong spot. The idea is that you aren't the owner of ReadOnlyMemory, so once you return from the function, you cannot make any assumptions about its lifetime beyond returning. Not a big deal, just a mistake overlooked on the author's part.
Ill just point out something. If you test your creators, which in sense are some sort of repositories (lets call them that because you pass db context directly to them) and repositories are your integration elements that would make this unit test of an integration component. Essentially it can happen that your test gives false negatives, or lets call them not indicative results. Since you instantiated two objects, one being context and another one creator your test can fail in both. So simply by seeing which test failed you dont know much, except that creating does not work. It can still be a problem in both, creator and context. So if you planned to test the creator, and context failed...you have a shitty test. Another place when tests like this fail is because of the state. You must not be state dependant in tests. I mean, you could but it will explode sooner or later. So, you expect exactly 2 tenants after you call create tenant once. Smells of existence of state. Alsooo, imagine you check expect 2 tenants in db, but is that all you check? One can alter create method in many ways which you wont like and it will still pass your test. Anyway, test is good. Does the job, like many other. But make them that they do the job as good. Mock the context, check for exact number of exact method call, dont pass context to creator, use repository if you are there, and create from the service. Often methods like create with context inside tend to grow, and they crate and do a bit more...which makes them not repositories anymore.
Yeah, you can't rely solely on unit tests, you have to have integration tests as well. Our coding standard requires 80% code coverage to merge, so we generally write more unit tests than integration tests, but we have run into the exact scenario you're describing as well as misunderstanding the behavior of the dependencies and mocking them incorrectly. For me, the value of mocking dependencies is that you're able to simulate scenarios that are not easy to reproduce, or where the data is not static... For example, if you have a price formatting method, you need to display in multiple currencies, or when the product is on sale. Both the list price and the sale price change frequently, so if you have an integration test that asserts the price is $9.99, and the list price changes to $11.99, your test just broke and it takes time to find out if there is a bug or if that's the right result, and then update the test. Instead, we have a unit test that mocks out the price to get consistent results and then an integration test that asserts that the price is within a reasonable range (it's not going to go from $9.99 to $99.99 or from $9.99 to $0.99)
&gt;LINQ-to-SQL really puts to shame Java/Python/Ruby libraries Personally, Java's popular JOOQ library holds it own when compared to LINQ-to-SQL
Yeah, I tried reading the questions that you put in the comments. I read it three times but the grammar was too poor to make any sense. Good luck.
It is generally accepted (at least in my coding circles) that using the generic error handler for known exception cases is bad practice... If you know an exception is possible, handle it where its thrown. Bugs are very costly. A production bug in a large company usually means dozens of lost man-hours and possible loss of sales or impact to customers. Writing a couple of unit tests is a small price to pay to prevent that, and it's a lot less uncomfortable than explaining to the incident review board why you decided it wasn't worth testing your code properly.
* should initialize ‘prod’ to 1, so it doesn’t get multiplied by an array element 2x inside the for() loop * use data type Int64 rather than ‘int’, as a 32-bit integers has a max magnitude of 2x10^9, which will overflow when the array length nears 10
What I meant about a temporary table was to use some kind of bulkcopy utility or command to import the whole Excel file to a new table in the database. Bulkcopy is database specific and I don't know anything about Sybase so can't really help you there though. The rows.add command in your code just stores the data in memory and is never written to the DB. If you have a large Excel file and don't have a bulkcopy utility the fastest way to process the data would be to import all of it the DB first using either a dataset or SQL commands. Put all of it into a new table and sync to the existing table using queries. You can remove the table var from that function. It's just a left over from a previous iteration I did. I got to go to bed now, it's 2AM here, but I'll check back tomorrow if you have any further questions.
This is my favorite metaphor for not writing integration tests: https://twitter.com/kentcdodds/status/628658648001048577?s=09
Uh, what? Anders, the lead designer of C#, famously said that you should have ten try-finally blocks for each try-catch. And that the vast majority of the time you should pass it along to a high level handler. In the case of web sites, usually the client is the only one in a position to know if it is safe and necessary to resubmit. And it always needs to be able to warn the user. For other applications the situation differs, but still usually you have to deal with it at a high level. And in all cases don't just swallow the exception. 
Based on the scenario you've described, I would not keep the logic of that code *anywhere near* dependencies. Under no circumstances does code that has to query for those prices *then* decide which one to show belong together when following SRP. Your code belongs in a domain model. There, it can be easily unit tested free from anything that needs to be mocked. Then provide integration coverage for the code that has to set up that scenario by providing data. No mocks. Too many people use the excuse of "oh I need to isolate stuff so I need mocks" when they really need to isolate *their SUT*. http://blog.stevensanderson.com/2009/11/04/selective-unit-testing-costs-and-benefits/
It's only a convention for their library, not a standard. It can inform your decision, but alone it shouldn't dictate it. 
Because it's not been added to the actual standard, the .NET Framework Design Guidelines. Maybe it should be, but that's a different conversation. And it needs to start with "are they happy with the choice or merely stuck with it?".
Var has been around for what, a decade? I've yet to be in a situation where I've regretted using var, so at least on a personal level I'm not concerned. 
I use var, but I'm not dogmatic about it. I use it when it makes the code more readable. My comment was regarding your suggestion that we write clean code for an imaginary future person who won't care anyway. Dev's read each other's code all the time. And I have been faced with my own bad code from years before too many times.
Thanks. Yes, indeed I am concern about the code efficiency. Let us say, there are already 20 millions of records in the database and the number of records will keep growing, if I try to load 5000 records (check against database) and determine if use Insert or Update, that makes take a lot of time. I don't work for IT department, not sure if I have permission to create temporary table. I would assume there is bulkcopy utility, so I would prefer to try the bulkcopy code and see if it works. Thanks.
This guy codes
I dont have my pc with me, but it might be because you are reaching the limit of the number range. 
Is ThingyFactory an asset? The list is a public field, which gets serialized. When it is serialized, lists that are null are serialized as an empty list rather than null.
I initiated ‘arraySize’ to be 16 initially but I wanted to be able to change it in the future so I didn’t hardcore it. Even if all the digits were all 9, after being multiplied together, they would be less than 16 digits, so I’m *pretty* sure it’s not a range issue, but I could be wrong.
&gt; // Try as I might, I can never get here. Nowhere in the code you posted do you call the `Recycle` method.. so as far as we can see, it's no surprise you never get there. Something you're not showing is at issue here, because your understanding is correct and `objectPool == null` should definitely be true until the commented out line is hit, from what you've shown here at least.
Your product is causing integer overflow (do some Googling for an explanation of what that is and why it's happening). You can use the `checked` keyword to force an error to be raised when this occurs (search MSDN to see how that works), or you could use a large type to hold your result, like `long`, `decimal`, or `double`. (Or `uint`, but it's probably not enough larger to matter.) You probably need to be initializing `prod` to `intArray[0]`, not `intArray[1]`, because arrays are zero-ordered (again: to Google with you). If you do that, you should initialize `n` to 1 to avoid including the first element of the array more than once. Unless you have initialized `arraySize` to `intArray.Length+1`, you should take another look at your condition, there. As-is, you appear to have an off-by-one error, and will skip the *last* element of the array. Unless `arraySize` and the number of elements in `intArray` are unrelated, in which case you have *different* type of error and may get an ArgumentOutOfRangeException.
What’s the calling code look like? It’s difficult to understand what’s going on without looking at the call site esp. because this code is not very idiomatic. 
[Definitely *not* regular expressions.](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags)
"int" in C# is 32 bit signed integer, with a range of −2,147,483,648 to 2,147,483,647. &amp;#x200B;
I’m so sorry! I forgot that! Looks like back to the “for dummies” book it is for me. Thank you so much 🙏
The list is a private field.
You are right, I'm getting too far off topic for him, but in my mind I don't know how to accurately answer questions about this topic without getting off topic, because it is such a heated and elusive topic for me and I could only find the right answers after venturing into all these other areas. &amp;#x200B; Anyway, in the particular example posted, without even taking much time to try to understanding the code, I would say it is not really a good example of any type of test, purely based on the names of things. The name of the the test class is SeedDataTest, but then I don't see the word "seed" repeated anywhere, which is a big red flag to me. In my opinion it is typically bad practice to not name the test after the class it is testing. I realize I am still not answering his question, but until he can at least understand the concept of a class testing a class, I'm not sure we can help him much.
Hmm. Is this pre-optimization? Write your code normally, then try to introduce these things. If you're just fiddling with the general idea of pooling in C# there's the ArrayPool&lt;T&gt; you can rent space from. &amp;#x200B;
I've used it for a long time, and I still googled, and will google again in the future, to make sure.
Oh, I must have misread. Private fields do not get serialized, so it should be null unless you're calling Recycle somewhere.
Some possible exceptions are known, but still can't meaningfully "be handled". If there's not a consequential way to recover from an exception, then I don't catch it, even if I know it can happen.
I have yet to find an example where Span and Memory are demonstrated in way that it makes more sense to use them instead of just using a byte array or something. Perhaps I'm not into performance critical code enough to appreciate it, but these always seem to be surrounded by a pile of "DONT EVEN THINK OF DOING THIS" with them and very few pratical reasons.
The using statement ensures timely disposal of resources. Do yourself a favor and don't try to manage things that are already managed. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement 
I have not used this library, but may in the future; I notice the examples are all non-async, are you supporting async/await? &amp;#x200B; Remote RPCs/API calls are often async/await'd because of the IO delay and this is a perfect use case of async/await. Cheers.
Yes, I prefer the in memory DB approach, that's what OP was using, although for legacy reasons we are constrained a bit in what we can use. &amp;#x200B; I despise mocking generally. I did a huge refactor/reengineer recently and broke near to zero tests. Turns out they're all mocked to hell and test bugger all. I actually expected the exact opposite, all being mocked to hell and every one breaking, but nope :/ &amp;#x200B; The clean database approach is fine too, you just have to be careful that you're testing your code as opposed to EF/ADO/Dapper/etc. &amp;#x200B;
It's a great solution. We have some legacy constraints that tie us to some crap the Aztecs thought up. I took the approach of eliminating 99% of all database access. It sounds like a lot, but swapping DB access for distributed caching removed all the polling, refreshing of static data and iffy notification tables. So there's very little code actually touching the DB. &amp;#x200B; It is a big application though and years old so there are thousands of ye olde tests that rely on awful mocking strategies :/
I wan't really concerned with the memory consumption of an empty List. I was instantiating the List alongside another object that was related to it, and using the presence of the List to determine if I needed to construct the other object. But since the List was never null, the other object was never built. I stripped out all that code prior to posting, since it wasn't necessary to get the failure I was seeing. &amp;#x200B;
I was going to write the same, that example is definetly wrong. Task.Run is not like calling an async method where code until first await is executed synchronously.
Except my software manager argued *against* unit testing when I asked him with about it, stating "it's not necessary to test every little thing," an argument I hadn't made - I just broached the topic out of curiosity and was wondering how how we had things set up. As you might've guessed, we had none. I found one console project in our reporting application called Tests with only the Main function, which verified that a byte array had the length of 4, and wrote that to the console. So, essentially, our testing was literally using your eyes to verify that each of the pieces were doing their thing, just like in the link in your comment, and deciding that "eh, good enough."
True. I've tried various approaches over the years. I've tried to eliminate as much DB code as possible, so everything is distributed caches for the most part with very limited DB interactions. I'm always wary of testing DB interactions directly because of the risk that you're testing the DB access platform, be it EF/Dapper/NHibernate, etc rather than anything meaningful to your application. So I wouldn't test that a delete "worked" specifically, but might test that the data access layer notified its consumers that a delete had happened or had caused an error. This has helped with the distributed caching because of the way we broadcast this information. Theoretically, if we didn't have legacy constraints, we could just remove the database altogether :) There are exceptions. For example, I don't mind testing that a stored procedure is producing the correct results, we still have a bunch of them. Testing hand written SQL makes some sense, but because it's always materialised into an object, it seems more sensible to validate the object rather than the SQL. Again, horses for courses. All the big database issues we've faced over the years have been contention or performance related and that's more difficult to replicate in a test too. So keeping the data access layer slim and testing that it is propagating the correct events seems to work better. It's one of those tricky ones really. I have a real aversion to mocking generally and try to test that my code works regardless of its underlying mechanism for storing/retrieving data. We also have some restrictions because of legacy issues. Long story, but it complicates things a bit :/
Removed: Rule 4.
It's a horrible example all around. 1. defensiveCopy is fine because message is type ReadOnlyMemory. Which also means there's no reason to make it in the first place. 1. StreamWriter is not being disposed. Should be in using statement 1. Should use StreamReader and read async to read from ReadOnlyMemory. 1. Should use File file = await File.OpenAsync 1. Should use StreamWriter.WriteAsync(reader)
You don't need a StreamReader to read from a Memory object, it's basically just like an array. Also they do need the defensive copy, because it's a scoping problem not a volatility problem. They're just doing it too late, it should be before the Task.Run call.
Only if it implements IDisposible
Because the code is writing to a file, the Task should have been started using Task.Factory.StartNew with the TaskCreationOptions .LongRunning passed in. The StreamWriter should be disposed.
Do you mean *~~not~~ writing integration tests*?
&gt; I'm always wary of testing DB interactions directly because of the risk that you're testing the DB access platform, be it EF/Dapper/NHibernate, etc rather than anything meaningful to your application. Given how many times I've seen EF seriously fuck up, I think testing it is required. 
Just create your own wrapper class that implements IList&lt;A&gt; and IList&lt;B&gt;.
P.S. for the peanut gallery, yes I know how bloody hard that's going to be once you dig into the details. But that's how he'll learn.
Great... 
Thank you !
Will not work with list because as I said the order is important so I want to know whether first item in `IList&lt;A&gt;` is my actual first item or maybe 3rd and first two are in `IList&lt;B&gt;`
&gt; it would have been a piece of cake if I could use interface but can't) (the order is important). Sounds like code smell. You'll have to introduce a lot of bad code to make this work, a solution which could then potentially be a very issue for maintenance and performance later on. This is the archtypical beginning of "don't touch this code, it works, no one knows why."
I'm just learning c#, and in this process I've chosen to create an open source library which I will eventually post on GitHub too. So there is no team,... involved. &gt; Sounds like code smell. I'm afraid this is exactly the case. This is what's happening: I've got a byte array which I have to interpret. I read byte[0] and it tells me what to do (an OP code which is the enum) like `Add`, `Push`,... and then based on that I'll have to take following data so for example I take 2x byte[10] so basically after interpretation I am left with an array containing these enums and byte arrays. At this point I am trying to come up with my own design first and learn a thing or two in the process then look at other libraries and see how they are doing things.
You ca use `dynamic` keyword. `dynamic[] a = new dynamic[2];` `a[0] = 5;` `a[1] = "hello";`
Is the length of the array known, fixed and not too large a number? If yes then I would recommend using a "Tuple". If not then there is another nice way to do this. I have done something similar before.
Maybe encapsulate the Action (Add, Push...) together with the data in its own class, then pass an array of that class wherever necessary? Avoid arrays at the primitive level representing abstract ideas, it's for this very reason classes exist.
An interesting approach but it has a ton of restrictions. Apart from the length it also requires me to know each index type and I wouldn't be able to have [type1, type2, type1] and [type2, type1, type1] (which happens to be my case).
I think this would work: enum EnumA { } enum EnumB { } interface IEnum { } class ClassA : IEnum { public EnumA Value { get; set; } } class ClassB : IEnum { public EnumB Value { get; set; } } List&lt;IEnum&gt; enums;
So you have an array of types and now you want to create an array of objects which only accepts objects of the right type ? If this is what you want then this could be done with a custom tuple implementation. Hang on a minute...
I keep going back to this: &gt; Sounds like code smell Right now I have an interpreter which easily "runs" this byte array without needing to do any of these things, it reads/interprets/acts and finally returns the result in a clean way and doesn't use any arrays. I was trying to change the input of this function from a simple `byte[]` to an already parsed "operation" and "data" sequence which is causing all this trouble :P
Oh no. I mean my comment in the best way possible. I had a feeling that my comment would get misinterpreted. I enjoyed reading your comment and I came out of it having a better understanding on writing more robust software. Writing code that can be rolled back is an eye opener.
This may not fit your needs exactly (I don't have all the details about what you need exactly), but should at least get you started with a custom class that kinda does what you are talking about. Disclaimer: I didn't actually test this code so use it at your own risk after testing and customizing it: using System; using System.Collections; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApp1 { public class LongTuple { #region fields, properties and indexers private Type[] _objectTypes; private object[] _objectValues; public int Count { get =&gt; _objectTypes?.Length ?? 0; } public object this[int index] { get { CheckIndex(index); return _objectValues[index]; } set { CheckIndex(index); CheckType(index, value.GetType()); _objectValues[index] = GetType(); } } #endregion #region constructors public LongTuple(IEnumerable&lt;Type&gt; types) { _objectTypes = types.ToArray(); _objectValues = new object[Count]; } public LongTuple(IEnumerable&lt;Type&gt; types, IEnumerable&lt;object&gt; values) :this(types) { ArrayTypeMismatchException ex = new ArrayTypeMismatchException("Supplied data is invalid"); int count = values.Count(); if (count != Count) { throw ex; } for (int i = 0; i &lt; count; i++) { if (_objectTypes[i].IsAssignableFrom(values.ElementAt(i).GetType())) { _objectValues[i] = values.ElementAt(i); } else { throw ex; } } } #endregion #region methods private void CheckIndex(int index) { if(index &gt;= Count) { throw new IndexOutOfRangeException("The index is too high"); } } private void CheckType(int index, Type type) { if (!_objectTypes[index].IsAssignableFrom(type)) { throw new ArrayTypeMismatchException("You are assigning the wrong type"); } } #endregion } } &amp;#x200B;
Thanks a lot, I've learned a couple of new things like `IsAssignableFrom` which I didn't know before.
Use static methods for anything that doesn’t require an instance of an object. Let’s take math for example, it would be annoying to have to do: Math math = new Math(); math.Round(2.766543); ELI5 Non static classes are objects which are great because you can have multiple instances of them and when you edit one instance, it doesn’t modify every instance which also helps with debugging and I’m pretty sure helps out with garbage collection which is memory efficient. Let’s say you have a class that creates tables like I made not too long ago. Table table = new Table() table.AddRow(“Sample Text”); You can use this object for that specific task and when that task is completed, the object and it’s memory is released. If it were static, it would keep the information for the whole duration of the applications execution. Having static classes that that hold information isn’t bad, people use it as a way for storing global data, but usually only for application settings. But let’s say my table was static. Every single time I want to use it somewhere else I have to make sure it is cleared before using it, then I have to populate it. Let’s say you’re debugging and find your table has values that are not supposed to be in it, that’s because due to its availability, anything can write to it. This all could have been solved by associating a new object to that specific task. 
&gt; Turns out they're all mocked to hell and test bugger all. OK that has nothing to do with mocking and everything to do with the tests themselves. You lack quality tests.
Pedantics being pedantic.
Use gameObject.Destroy. It destroys the game object, and all of its components. What you’re doing is simply deleting the object, but not the components, so the object will continue to be available, just not it’s 3D data.
I plan on creating an app for creating installers and open sourcing it. Not hard to make one. It may not help you now, but keep an eye out, I’ll be posting the repo here.
Ideally you would only mock dependencies you can not control (APIs and third party libraries). What is important when you do that is to ensure that the interaction with the mocks is covering all the possible cases of the contract between the two objects.
No just the owin context. Don’t know another way though this doesn’t seem like there should be any problem. I assume the owin stuff disposes correctly. Side note: getting the user inside of a `using`for the userManager doesn’t solve the problem. 
&gt; You are only being explicit for a unknown, future person whom you assume both cares about the type and doesn't already know it. That pretty much limits the audience to learners looking at code samples, not people on your project. So you assume that every single person working on given project perfectly remembers every type, function and object across entire codebase?
Compile it.
First question is obviously: What would you do different than the existing ini libraries? And why not TOML?
Here is the function I use to create my DataTable public DataTable GetDataTableObservations() { //Open connection if (this.OpenConnection() == true) { //Create Command MySqlCommand cmd = new MySqlCommand("SELECT * FROM observation", connection); //Create a data reader and Execute the command MySqlDataReader dataReader = cmd.ExecuteReader(); _dt3 = new DataTable(); _dt3.Columns.Add("id de l'observation", System.Type.GetType("System.Int32")); _dt3.Columns.Add("observateur", System.Type.GetType("System.String")); _dt3.Columns.Add("date de l'observation", System.Type.GetType("System.DateTime")); _dt3.Columns.Add("temps Observer", System.Type.GetType("System.Int32")); _dt3.Columns.Add("Nombre de Personnes contacter", System.Type.GetType("System.Int32")); _dt3.Columns.Add("Nombre de Personnes Observer", System.Type.GetType("System.Int32")); _dt3.Columns.Add("Equipes", System.Type.GetType("System.String")); _dt3.Columns.Add("Zones", System.Type.GetType("System.String")); _dt3.Columns.Add("Sites", System.Type.GetType("System.String")); //Read the data and store them in the list while (dataReader.Read()) { _dt3.Rows.Add(new object[] {Int32.Parse(dataReader["id"].ToString()),this.GetObservateur()[Int32.Parse(dataReader["idObservateur"].ToString())].GetNom() + this.GetObservateur()[Int32.Parse(dataReader["idObservateur"].ToString())].GetPrenom(), DateTime.Parse(dataReader["date"].ToString()), Int32.Parse(dataReader["tempsObs"].ToString()), Int32.Parse(dataReader["nbPersContact"].ToString()), Int32.Parse(dataReader["nbPersObs"].ToString()), this.GetEquipes()[Int32.Parse(dataReader["idEquipe"].ToString())].GetIdEquipe() + this.GetEquipes()[Int32.Parse(dataReader["idEquipe"].ToString())].GetNomEquipe(), this.GetZone()[Int32.Parse(dataReader["idZone"].ToString())].GetIdZone() + this.GetZone()[Int32.Parse(dataReader["idZone"].ToString())].GetNomZone(), this.GetSites()[Int32.Parse(dataReader["idSite"].ToString())].GetId() + this.GetSites()[Int32.Parse(dataReader["idSite"].ToString())].GetNom()}); } //close Data Reader dataReader.Close(); //close Connection this.CloseConnection(); } return _dt3; } it's this line that I use another function `this.GetObservateur()[Int32.Parse(dataReader["idObservateur"].ToString())].GetNom() + this.GetObservateur()[Int32.Parse(dataReader["idObservateur"].ToString())].GetPrenom()` &amp;#x200B; this function get all the "Observateur ". I just have to select the one with the id in my SQL table with the field "idObservateur" and concatenate the name and surname in my cell of my DataTable &amp;#x200B; here is the function that get all the "observateur" public List&lt;observateur&gt; GetObservateur() { //Open connection if (this.OpenConnection() == true) { //Create Command MySqlCommand cmd = new MySqlCommand("SELECT * FROM observateur", connection); //Create a data reader and Execute the command MySqlDataReader dataReader = cmd.ExecuteReader(); //Read the data and store them in the list while (dataReader.Read()) { observateur myStatement = new observateur(int.Parse(dataReader["id"].ToString()), dataReader["nom"].ToString(), dataReader["prenom"].ToString(), dataReader["mail"].ToString(), dataReader["login"].ToString(), dataReader["mdp"].ToString()); tabO.Add(myStatement); } //close Data Reader dataReader.Close(); //close Connection this.CloseConnection(); } return tabO; } (I do the same with my Team, my area and my place at the end of my DataTable) &amp;#x200B; It can be difficult to understand sorry I am a beginner \^\^.
Seems a little overkill and has a larger footprint over something with the sole purpose of reading and writing INI files.
I'm on mobile and the formatting is quite bad. from what i can see you're using the same connection for the two functions. i guess that's why you're getting the error. try to create and use a different connection in the 2nd function. using (var connection2 = new MySQLConnection()){ Command MySqlCommand cmd = new MySqlCommand("SELECT * FROM observateur", connection2); }
I think what's holding you back is the enum, not the data array. If your actions weren't values in an enum but child classes of a base type then creating a data object would be easy. This would be the proper object oriented way: store your actions as objects that also contain the operation they are representing. So instead of having one loop that goes over every entry in the array and then uses something like a switch case construct to call the appropriate functions, you would just have a loop that calls something like ".apply()" on every object in the array. The actions would call the function they represent and the data objects would push their data to the stack (or whatever container you are using). 
IIRC You can submit changes to most Microsoft Docs pages right?
Yes Reddit.NET does have async methods. I suppose I should add some code examples for that in the next release. In the meantime, if you open the solution in Visual Studio and examine the Reddit.NETTests project, you'll find some async examples there. For example: var post = mySub.LinkPost("Title", "http://url").Submit(); Can also be done like this: var post = await mySub.LinkPost("Title", "http://url").SubmitAsync(); 
I *think* you're right but am not sure... just to clarify it's because the "this" in this case is merely the script attached to the gameobject, rather than the gameobjecty itself... Is that right? 
Yes, they're awful in many cases. But part of the problem is the misapplication of mocking. Mocks have a place, but I still maintain they're overused and that damages the software and puts faith in tests that might not test what the developer expected. I don't think I can argue that if the developer used mocks perfectly and wrote perfect tests then mocking wouldn't be a problem. It's simply not possible for all developers to be at that level. 
Lol, really? That must be bloody infuriating :) I've found it pretty reliable over the years, I do favour simplicity over complexity though. I don't want to see it pushed into weird edge cases, there's almost always a better way. I still don't think there is value in proving a framework does what it's supposed to. I think that time could be spent elsewhere delivering more value. Ymmv of course, I wouldn't laugh at your EF tests as you find value in them. 
“this” references an instance, which is an object code wise. When that object is destroyed, so is its serialized component I believe. So you are pretty much just deleting the script on the object yes. If you specify it as a game object, it deletes object and every single component which includes 3D data, shaders, physics, audio, and scripts.
The performance will be dependant on the number of rows in the Excel file. If we're talking about 5000 records then doing the import by going through the rows one by one is going to be very slow. Some sort of bulk copy would definitely speed thing up. We're talking seconds instead of several minutes to get the data from the excel file to the db. &amp;#x200B; Setting up bulk copy to Sybase in c# would be very difficult though and I can't really help you with that. Using the method in your code is way more simple, but also a lot slower. 5000 rows in an excel file would require 5000 select queries and 5000 insert/update statements to be sent to the db from the client in the current code. That could be sped up a bit if you have a secondary table with the same columns that you can just insert all the rows from the excel file into and then sync that table to XYZ using sql statements. It still wouldn't be very fast though. &amp;#x200B; The way the excel file is read in the current code is also **extremely** slow. This method would speed up that part a lot: [https://social.msdn.microsoft.com/Forums/vstudio/en-US/9a273868-a9c0-48a7-9dd0-03246f3874cf/c-how-to-convert-excel-sheet-to-data-table-dynamically?forum=csharpgeneral](https://social.msdn.microsoft.com/Forums/vstudio/en-US/9a273868-a9c0-48a7-9dd0-03246f3874cf/c-how-to-convert-excel-sheet-to-data-table-dynamically?forum=csharpgeneral) &amp;#x200B; If you currently have 20 million records you'll have to make sure there is an index on that table or any update statement will be very slow and eat up loads of performance on the db server. This is also server specific so I can't offer any support with that either. &amp;#x200B; Again, I would strongly recommend that you use some sort of bulk copy and only resort to inserting the data row by row if there is no other way
the first example is also wrong. It first states there's a span&lt;T&gt; object created and then calls Destroy() on it, while stating it calls Clear() on it. The choice of examples is also weird. copying a value as string to a buffer and then calling 'ToString()' on it for the length is lousy: the ToString() is what you want to avoid in the first place. 
wtf? Stop guessing. var list = new List&lt;int&gt;(); Console.WriteLine(list.Capacity); list.Add(1); Console.WriteLine(list.Capacity); list.Add(1); Console.WriteLine(list.Capacity); list.Add(1); Console.WriteLine(list.Capacity); list.Add(1); Console.WriteLine(list.Capacity); list.Add(1); Console.WriteLine(list.Capacity); list.Add(1); Console.WriteLine(list.Capacity); list.Add(1);
&gt; Seems a little overkill and has a larger footprint over something with the sole purpose of reading and writing INI files. It’s 2019, not 1994. If footprint is what you’re worried about, you should focus your attention far more on the choice of runtime: .NET has relatively large footprint.
Ok yes I thought that was what was happening.... Thanks!
I’m talking about your shipping assemblies.
TOML is like INI, just for slightly more complex data structures (e.g. nested or arrays). INI is only really suited for primitive key-value-pairs. If that's all you need, then I agree that INI is enough.
That’s exactly what I’m talking about. For something very simple and doesn’t require a tree structure, INI definitely the way to go.
There is a lib called madmilkman... 
&gt; madmilkman Now I’m definitely checking this out. 😂 Thanks.
Sure, I agree. And if you have slightly more complex data structure, then TOML is a great INI-like alternative to JSON/XML/YAML. But you ignored my first question: What would you do differently than the existing INI libraries?
Ok thanks, it works &gt;&lt;. 
&gt; You probably need to be initializing prod to intArray[0], not intArray[1] He probably needs to be initializing `prod` to `1`.
I haven’t had the time to actually look at libraries for handling reading and writing. But this library would be 100% solely just for that specific task. When it comes to data, that’s my strongest skill in programming and I’m able to create some very simple and fast solutions.
you're welcome. please take out time to learn entity framework, it makes stuffs like this really easy 
Ok I already use ORM with symfony ( PHP framework) but for this projet I prefer do it like this without an ORM 
Alright, that's cool 
&gt; "object" covers everything and there is no way for me to enforce only addition of certain types Would this work? 1. create a parent class 2. create other classes that derive from parent 3. make an array of type parent 4. use it to store items derived from parent
Probably because that's what the dev(s) knew when they started it. 
I might have worded it a bit weird, but I did it meant it the way I wrote it. The gif is saying you can unit test that a head can read, an upper buddy can do push ups, and a lower body can jog in place, but you still need integration tests to put them together. For example, you may want an integration test to make sure they can jog in place and do push ups at the same time. This last step is what the developer of this human failed to do. 
My company used to have that attitude as well. They considered it a waste of time when we had a QA department. I kept pushing unit testing and writing them anyway in our monolithic app, and now, 3 years later I tech a unit testing course in onboarding and we expect automated tests from all of our devs. Don't give up on the fight for more test coverage!
Why is Reddit written in Python, when 80 % of the web is powered by PHP (via WordPress)?
800 billion machines run on Java
:(
Reddit is written in Ruby because the original developers of Reddit were fucking morons.
If you want to insert lots of data then you should look at Sql BulkCopy. I believe Sybase supports that. In .net BulkCopy from a DataTable is very easy as normally the fastest option for inserting data from a file.
Because Pythin is jillion times better lang than that abomibation PHP?
In the beginning I wanted to draw a model for sketchfab, to make it easy to understand. But in the past with other scienetific topics (sound generation in a quasi "flute") this failed. I guess sketchfab is not popular with students. Also I would need to program a camera zooming into the details like the grill or the cathode or the thin wire of the coils or the small depletion zone of the transistors. The model would need LOD? 
Rarely is one language objectively better. Each does things slightly differently, and each has trade offs. The end user experience can be near identical across many languages though. More than likely, it’s what the developers knew. 
I'm going to be brutally honest, nobody is going to use it. There are already enough established alternatives. Don't try to make things for other people, make something you need or would like to use and if someone else finds it useful great, if not who cares.
This sounds like the strong design that I was looking for, thanks a lot. I was having a nightmare to test that switch case design but with this it seems like a much easier thing to test too. I just have to set aside some time to try it and see what I can do. Thanks again for the guidance.
So it's a case of "not invented here" syndrome.
Ah, the beauty of deprecated comments. ["Increased to 16"](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,aa9d469618cd43b0) ["EnsureCapacity... wait, what's \_defaultCapacity?"](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,eb66b6616c6fd4ef) ["\_defaultCapacity"](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,aa9d469618cd43b0) ಠ\_ಠ 
Hmm, without frameworks it'll be slightly harder as you're missing crucial boilerplate, but you should get familiar with it anyway. [The built-in command system is unfit for MVVM](https://www.reddit.com/r/csharp/comments/ayvgm7/your_favourite_mvvm_framework_for_wpf/ei3m7ki?utm_source=share&amp;utm_medium=web2x). BindableBase boilerplate, which simplifies a lot. Yoinked from [Prism](https://prismlibrary.github.io/index.html). [RelayCommand](https://stackoverflow.com/a/22286816) boilerplate, allows for decoupled command property binding.
Take a look at [https://github.com/dotnet/reactive](https://github.com/dotnet/reactive). If I understood your requirements correctly then you might try creating a ViewModel that exposes Text property for your log control. (Very) simplified code: ``` public class LogModel : INotifyPropertyChanged { public string Log { get; set; } // do not forget to implement INotifyPropertyChanged public LogModel(IObservable&lt;string&gt; input) { input.Subscribe(str =&gt; { Log += input; }); } } ``` ``` &lt;TextBox Text="{Binding Log}" /&gt; ``` Basically this approach has multiple log producers and one consumer.
Okay, maybe my idea of "not using frameworks" is not properly thought of. The RelayCommand I'm already using now and I find it relatively easy to use and a great help. In general more and more things fall into place and I get more and more enthusiastic about this "new" way of programming for me. &amp;#x200B; BindableBase is sth I haven't heard of yet, a quick search showed me that it seems to be some simplification of the INotifyPropertyChanged concept. At the moment i have put INotifyPropertyChanged into my models like this: public class ComPort : INotifyPropertyChanged { private string port; public string Port { get { return port; } set { if (port != value) { port = value; RaisePropertyChanged("Port"); } } } public event PropertyChangedEventHandler PropertyChanged; .... Maybe that belongs into the viewmodel, I'm not so sure about it yet
Why is reddit written in python when the greatest website - Stackoverflow is written in C# / .NET Core?
&gt; I haven’t had the time to actually look at libraries for handling reading and writing. But this library would be 100% solely just for that specific task. Just going through the first page of results at https://www.nuget.org/packages?q=ini, I have to wonder what makes yours better, then. &gt; I’m able to create some very simple and fast solutions. I’m still trying to figure out what makes you think that performance is, in 2019, a remotely relevant criterion for writing ini files. Your bottleneck won’t be CPU, but disk. And even then, we’ll be talking fractions of a second.
Yeah that looks good and I think I understand the concept. The textBox is just bound to the IObservable object and with the LogModel i can fill the object. The only thing I still struggle with is where to create that IObservable object so that all producers can access it since the producers will sit in different viewmodels. (You see, here I lack some understanding still ..)
I’m trying to understand what you want so I can help you make it more efficient as well (as destroying and instantiating is really inefficient), but from what I can tell you want an object at posX to transition to posY and then instantly go back to posX. If that’s so then what I would do is roughly this (on mobile so quick code) float t; (declare outside of method) float speed; t = Mathf.Repeat(t + Time.deltaTime * speed, 1); fancy.position = Vector3.Lerp(startPos, endPos, t); You’d make startPos to be the position where it starts and endPos to be the gameObject would normally be destroyed.
A `Task` is simply an abstract representation of *something* that completes in the future (hence the name promise/future in other languages). What that "something" is is irrelevant to the `Task` class and is up to individual `Task`-returning implementations. It *could* be a method running on another thread (although `Task.Run`/`Task.Factory.StartNew` use the thread pool and don't start their own threads), but it can also be IO or a timer or anything else.
Yeah, they really aren't useful in day to day development. They are great additions to the API, but the practical applications of them is rather limited. Where they are useful, they are very useful though.
Sorry, I fixed the [BindableBase](https://pastebin.com/xLerpUD2) link.
Uh that sounds helpful, thank you very much.
Shared resources are often created at the top-level model. Also you could rely on Dependency Injection probably. ``` public class MainWindowModel { public FirstComponent Component1 { get; set; } public SecondComponent Component2 { get; set; } public MainWindowModel() { // initialize all components here } } ``` 
Tests with heavy use of of mocks are of poor quality. That’s why we call them over-specified. I should be able to refactor and have tests still pass. You can’t do that when mocks are incredibly dependent on the order of the implementation. The tests, by nature, were coded with the implementation in mind, even when following TDD. Sometimes a spy is a useful way to approach a test. Other times a chain of dependencies makes relying on the result of real code too cumbersome and a stub is more valuable. But this trend of using mocks for literally everything does not produce tests that are helpful. They neither protect me during reactors nor produce proof that the SUT works.
I wouldn't say "exactly" but I get what you're saying and you're right.
He's saying you can have static members in a static class and those members are shared across all usages of the static class. They are not const, they are static.
Static class can have static members. That is state.
Thanks, I will look into that. The question is: I am using OdbcConnection (not SqlConnection), is it okay to use SqlBulkCopy? Thanks.
&gt;My approach would be now to create a model and viewmodel for each part: * stepperMotorControl * analogOutControl * serialPortControl I would implement them as Services consumed by one or more view models. Usually I create only one VM for one view. You could look into Prism Regions to compose views though. http://prismlibrary.github.io/docs/wpf/legacy/Composing-the-UI.html
Thanks, I will look into bulkcopy, it seems that I am on wrong track to look into one row at a time.
Extensions methods have their own sets of issues *if used incorrectly*. I very frequently see them used incorrectly. By that I mean that people just decide to write their own extension method for the "string" object. That is BAD. Do not do this. Why should a person have to import another library to simply run an extension method?
I'm not sure what you mean by this. Can you elaborate?
Use tasks
Yeah you can put in a PR to the github page. Someone already has a github issue for this submitted too.
Sorry I did not explain clearly. Let's say you write an extension method IsNullOrEmpty() and put it in your Company.Shared.Extensions namespace/assembly. It simply calls `string.IsNullOrEmpty(x)` and returns the result. You then use this code all over the place because its more convenient doing `mystring.IsNullOrEmpty()` rather than `string.IsNullOrEmpty(mystring)`. You've now added a dependency so that you don't have to type the letters `string.`. This drives me nuts. I can't run the code anywhere without referencing that shared library for almost no gain. I see this a LOT. I see similar extension methods a lot for DateTime objects.
A Promise is basically the same as a Task. They both have the concept of continuations (I think it's called "done" in js?).
Simple: Don't. Why would you want that? Instead construct and serialize clean data structures, and then act upon them. &gt; data structures use delegates I think your data structures really should not store delegates. That sounds smelly.
[There Is No Thread](https://blog.stephencleary.com/2013/11/there-is-no-thread.html)
You definitely worded it weird then :). You should remove the "not" for it to make sense
[There Is No Thread](https://blog.stephencleary.com/2013/11/there-is-no-thread.html) Task.Run is how you, as the developer, explicitly request a thread from the threadpool. Which is why it should not be part of a function implementation.
static class should only contain pure logic and immutable members
There's nothing wrong with any of them, but calling a button click event handler when you're not clicking a button is not particularly clear. If your work is long-running, create a thread manually. Else, use [Task.Run](https://Task.Run), which will send work to the thread pool, designed to handle short-running parallel workloads.
There are a few things to consider. I prefer to use `var` when it's obvious what the type is and I prefer to use the actual type when it is not obvious. The main reasons are because of code reviews. If I am looking at a website like gitlab/github and doing a code review, it is very difficult for me to easily tell what types things are unless they are very obvious. If that is not a concern of yours, then feel free to use var wherever you can.
It is necessary for my data structures to store delegates. 1. Even if I changed to using interfaces instead of delegates people could still pass in an interface that calls an anonymous method underneath. Granted people would have to be stupid to do that... 2. And even if I wrote my own serialization, I would probably never be able to get around the possibility on non-serializable delegates. At one point I was tempted to store the actual binary of the delegate execution in the serialization, but that is extremely gross... My current opinion is that I should probably keep the serialization attributes and just document it the best I can.
Each project team at microsoft uses their own "standard". Some teams ALWAYS use var where they can.
I was recently in the same boat as you. I started using the MVVM Light toolkit and it is pretty easy to get started. There is a pluralsight tutorial that is very helpful for it too. http://www.mvvmlight.net
That doesn't seem to stop people from abusing them though.
`Task.Factory.StartNew` starts its own thread if given the `LongRunning` option.
We likely have a different understanding of the term "data structure". A data structure for me is a POCO, or a DTO. A class that purely stores data. Your classes instead seem to deal with logic as well.
Meh. Those are pretty different things. 
I recently (about a year and a bit ago) got into MVVM for the first time in C#, and it took me a lot to get my head around it. But once I figured it out, and basically built my own boilerplates for INotifyPropertyChanged and RelayCommand, I absolutely love it. I get into the workflow of building my UI shell of controls first, then work out what data each control needs, and build a VM that inherits from my bass class that has INPC to expose properties that the VM needs. Private methods in the VM reaches out to data access code for populating the properties as needed. Another boiler plate I used, which I'm not 100% convinced is the best method (but it works really well) is the Mediator Pattern, where you can pass messages and parameters between VMs. I found a boilerplate and extended it to allow "queuing up" of messages if the consumer hasn't instantiated yet (and when it does register it's call back for a message type, it fires off all the queued up messages). Any future desktop apps I build (I'm primarily in the web dev scene at the moment) I'll definitely reach to MVVM and WPF (or whatever's in vogue for new applications).
No, which is why I do expect them to be able to use the IDE to look things up. 
EF Core is especially bad. It can take a single LINQ query and turn it into hundreds of database queries. Or suck a whole table down and filter it client side.
Words have meanings; that's what makes them useful. 
Right. Why should we give functions descriptive names, when it's so easy to use iDE to look up definition and just read what function does.
So I should choose to handle it in DoStuff or around the Task.WhenAll? 
Yeah. There is logic. If I'm not mistaken, as long as people use static methods (that they never intend to move/edit in the source code) then it serialization should work just fine. Hence, why I mentioned that I currently plan on keeping the attribute. Thanks for the input. :)
So what are some possible use cases for this?
From a performance perspective that would be best, but there's also a tradeoff in development time. Finding and implementing bulk copy for Sybase might be really hard and take a long time while just iterating through the file is really easy. There's no equivalent to SqlBulkCopy in ODBC or OLEDB, it's only implemented for MS SQL in [ADO.NET](https://ADO.NET), so you'll need to find another, Sybase specific, library that has that kind of functionality. &amp;#x200B; Basically the question you need to ask is if it's worth spending loads of time researching bulk copy for Sybase or live with the performance hit of doing it line by line. 
I hate var with a passion.
It's helpful in places where you need to process subsets of information without additional allocations and don't want to manage everything yourself. You could do this before Span, but it makes it a lot simpler and comes with compile-time checks to make sure you're not accidentally doing things like allocating something on the heap when you're working with data intended only for the stack. But if none of that is applicable to your own code, the main benefit is things just running a little faster and with less allocations due to the use of Span under the covers of various components and APIs.
Mh maybe I should give this one a try :) I had a hard time to trust tutorials and frameworks when I saw that they are sometimes 10 years old. I find it difficult to find out what's the current best practise and state of the art in software development there
As someone else mentioned, I wouldn't try this without a framework. There's a lot of boilerplate you'd have to write for not much gain. Interestingly, your project is a bit similar to a WPF MVVM application I wrote for controlling LEDs that I wired up to backlight my monitor. You may want to take a look at it: https://github.com/mduffey/neopixelcommander-v2 I'm using WPF with MVVM Light to control the system. The Arduino code for the Teensy I'm using is there as well, but you'll mostly want to look at the Application folder. I think it'd help for what you're trying to do. Good luck!
&gt; Especially the dependencies then between different viewmodels cause me headache at the moment. I believe an IoC container should be able to help. Typically you'll create services that will be injected to your viewmodels to handle non-ui business logic. Another common pattern is to use an event aggregator to communicate between viewmodels but I suggest using this sparingly. In most cases, a custom service is better so you don't violate SRP. &gt; Since i mainly want to learn I don't mind extra work and want to refrain from using frameworks (for now). You should be able to learn a lot even by using an MVVM framework and it will help align you to the best practices since other people uses the framework. Personally, I'm using [Prism](https://github.com/PrismLibrary/Prism) and I'm very happy with it. Even with a framework, you'll still end up with a lot of boilerplate code. Once you've learned most of the MVVM fundamentals, I'd suggest you take a look at [`Fody.PropertyChanged`](https://github.com/Fody/PropertyChanged) to significantly reduce boilerplate.
You probably want uniquePropService1 and uniquePropService2 to implement an interface type or have a shared (possibly abstract) base class. AllServices would then take a reference to the interface or base class. Also, the fact that your code, as shared, is not buildable is confusing. It's not clear what you're doing that is producing the sort of error you describe, but there are several other compiler errors that your code would produce, as written.
`Task.Run` uses a thread from the thread pool. This is good if the operation is not particularly long running. It also stores exceptions that occurred, and rethrows them **if** you await the `Task` or otherwise access its result. `new Thread` creates a brand new thread which is good if the operation is long running and you don't want to take a thread away from the pool. You are responsible for error handling. `button.PerformClick` is ugly, unnecessary and doesn't do what you want it to do. There is no benefit to invoking the button's click event over just calling a normal method. More importantly, `async` **does not mean "run this method on another thread"**. The `async` keyword only means ["let me use `await` in this method](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/await).
Look into Syncfusion’s Winforms library, they also offer a free community license 
A lot has been said in the thread, but to summarize whether to mock collaborators or not is up to you. However in my practice it changes the way how you impoement a feature. With mockist style you go from top (outside) down (in), e.g. from a test for Controller to a test of Repository. Whereas without mocking you'd write a lowest layer test first to implement functionality, then service test will use existing repo functionality. Mockist style is much popular nowadays and some people have strong opinion that it's the right way to do TDD and unit testing. That's their opinion, but originally it wasn't that way. Moreover in a YouTube playlist "Is TDD dead" both Martin Fowler and Kent Beck expressed that they don't hesitate to write unit tests without mocking at all.
This is definitely a problem if you are on a monolith and have logic used in different layers. In microservices, it’s not too bad. Most of the processes in one layer isn’t a dependency in another. That way your model can be separated from its methods. 
Because they are. Is the type of AllServices.name1 supposed to be Service1.sharedProp1 or Service2.sharedProp1?
Don't get me started on how people write microservices that aren't actually microservices... ahhhh
Me too buddy. Good luck!
I want the sphere to look like it is moving while it is many spheres getting made then deleted while the use holds the mouse, also, I need to have it done the way I have it. I just need to know where to put the Destroy(gameObject) function, as the places I tried don't work.
dynamic is almost never the answer It leads to code smell and terrible performance and design in almost all cases. dynamic should be a special case and LAST resort.
The way Unity deals with C# has quirks. They also have their own conventions, which aren't industry standard.
The error means there is more than one type with those names. Because of that, it can't automatically determine which one to use. Fully qualify them so the compiler will know what type you want to use. 
Confusing. Everything runs on a thread. I don't get what the author is trying to say when he states "There is no thread.".
Hey, I've been developing an app at work that also handles sensor communication. Mine needs to communicate over serial ports and TCP, and handle displaying raw sensor responses to the UI as well as logging them (app is used for validating sensor functionality). First off, I don't recommend using 'raw' MVVM. I've done it plenty, but there is a bunch of boilerplate to maintain. Using a framework will let you focus on your application logic and not so much the MVVM implementation. I'm developing my app using [ReactiveUI](https://reactiveui.net/). It's an MVVM framework based on [Reactive Extensions](http://reactivex.io/). Using Reactive Extensions alone for handling the sensor output in my application has made it really simple, and extending that to the UI using ReactiveUI has made handling the dependencies between ViewModels equally easy. With ReactiveUI, I can set up some properties on one ViewModel then 'watch' them for changes on another ViewModel which will then perform some logic every time the watched properties change in value. It's really powerful and fits right in with interacting with sensors / hardware (at least in my case). I won't lie, there is definitely a learning curve when it comes to Reactive Extensions / ReactiveUI. The book linked on the ReactiveUI site is a good read and has a good [example application](https://github.com/kentcb/YouIandReactiveUI) that goes along with it. It took me a while to get the basics down, but I was able to go from nothing (no Reactive experience but plenty of 'raw' MVVM experience) to a working and in-use application in about a month (had some other smaller work projects that needed to be done in that time frame as well though). All in all, no matter which MVVM route you go, my basic advice would be to start small. Rather than thinking about all of the models / ViewModels you might need to make right now, start with just one. For example, maybe take your 'Status' GroupBox and break it out into a UserControl backed by it's own ViewModel / Model this way you can introduce MVVM to your program in stages. Good luck! It's a powerful pattern once you get a grasp on it.
Which one? The context has returned to the UI, it isn't doing any of that work. No thread is being borrowed from the threadpool, and there's certainly no new thread being created. From what I understood, the work is delegated below the concept of a thread and at no point is there a thread in your app's runtime you can point to and state "this is doing the work." I don't know; is firmware execution on driver devices still called threads?
I don't know if odbc supoorts BulkCopy, but just Google it 👍
Absolutely fucking not. He said and I quote "static methods" twice 
This isn't the real code. I made that up on the spot to capture the jist of it, but maybe I don't undestand the concept of the problem I have. For instance all Webservices I'm trying to consume have a transaction property which is the same accross all services. That's the sharedProp in my example. However when I try to encapsule all the services into a single class, I get the problem, that a) since all services have a property from the transaction type, the compiler doesn't know which one to use, since all of them have it defined b) Service1.Transaction != Service2.Transaction from the POV of the compiler, even though it is exactly the same object. 
Either. It depends on what your exception handling policy is. I would do it around WhenAll because I generally prefer having business logic methods throw exceptions and control flow methods handle those exceptions
I just imported several webservices and all of them declare their own stuff. My goal is to rip out sharedProp1 from the context of a single service and tell the compiler "here, you can use this in all of them". I could achieve this with casts, but that's so c++ 
Check out Caliburn.Micro. I never had used mvvm and that made it a breeze to implement. https://caliburnmicro.com
You would need to use reflection to iterate over the properties and chain the includes. I don't believe EFCore has a built in function to auto load all of the properties. &amp;#x200B; I think you are looking for Lazy loading: [**https://docs.microsoft.com/en-us/ef/core/querying/related-data#lazy-loading**](https://docs.microsoft.com/en-us/ef/core/querying/related-data#lazy-loading) However, its much less efficient than including everything in one query. &amp;#x200B; Also if you are always loading relations on your models, it might be worthwhile to look at Owned Entities which would store the data in the same table [https://docs.microsoft.com/en-us/ef/core/modeling/owned-entities](https://docs.microsoft.com/en-us/ef/core/modeling/owned-entities) &amp;#x200B; &amp;#x200B; &amp;#x200B;
I don't have much experience with firmware other than when device drivers interact with it. In those cases, drivers too all do their work on a thread in Kernel mode whether they call the device/firmeware or not. 
&gt; Blazor is a .Net based web framework that allows us to run C# in the browser. Not technically wrong, but sort of a misrepresentation. *Mono-WASM* allows running C# in the browser, and Blazor builds on that. *Blazor* is an SPA framework like Angular and React, but using C# as the language, as Razor as the intermediating syntax (C# within HTML, a bit like React’s choice of JSX to have HTML tags interspersed with JavaScript). Also like React, Blazor focuses on building components, which in turn become tags you can insert into another Blazor page. You could have very different approaches to running C# in the browser than Blazor.
Should I do: try{ var Task 1 = doStuff1(); var Task 2 = doStuff1(); var Task 3 = doStuff1(); Task.WhenAll(Task1, Task2, Task3) _data1 = await Task1; _data2 = await Task2; _data3 = await Task3; } catch(AggretionException ex) // Should I use exception (like the standard) or aggregateexception? What is the difference? Is aggregateexception when we use Task or because we use Task.WhenAll? { // handler like write to log? }
orenog is not smart
So, when you do Task.Wait and that Task throws an exception, it will always be an AgregateException. It's a special exception that actually wraps the details of all the exceptions that were thrown inside that Task in its InnerException property. What that means is that doing catch(Exception) around a task usually gives a meaningless exception, and you should always explicitly catch for an AgregateException 
I love lamp
I just want people to know C sharp isn't real, it's just a reskin of java
c# is not for website developing. python is most popular than c#. but voat choose c#.
i think c# is better than python for webdeveloping
I'm not convinced that you are real.
And you’re free to have that opinion of course, but there’s no objective fact there. 
that's what lazy loading is for, includes all your virtual property by default. it's useful if you're lazy loading one entity, i wouldn't advise to lazy load a list 
Java’s just a foreskin of C#
I already tried Blazor for a small hack day we have at work. I really liked it, but at the same time it showed that this is truly experimental for now. If you ever worked with it, it feels very similar to working with React.js. Even though the basics worked, there is still a lot lacking in terms of generics support and so on. But I'll keep it on watch, I liked it a lot!
Your ignorance is showing, syntactically they are similar, but under the hood they are very different.
hey buddy, i guess my biggest issue was making it a big deal in my head. And that I couldn't possibly grasp what was going on. in hindsight it was reflection in its own way. And you know the flat I was living, giving me a constant headache. I'm happy I'm out of there and can think freely now again. ( now it's code weaving and mono cecil, sgonna be great ;-) )
1. DB access is many orders of magnitude slower than direct memory access. Always. 2. Not all apps are simple CRUD API's. 
operator overloading, pointers, linq, dynamic, unsigned types &amp; signed byte, async/await, non-virtual by default, fundamentally different enums, properties, plenty more == things orenog needs to learn about --- ^(haven't kept up with java, or included c# 7/8 stuff)
yeah that's true, but I think my biggest issue was my very own psychological intimidation. That wall that I build as an unscalable tower rather than an interesting place worth exploring. And yeah about that challenge, I'm not really good at maths ( at last when it comes to most academic levels)\^\^
I've never made any Blazor project, but I have the feeling that my html pages get very confusing, if I have bigger projects. Anyone worked on a bigger webpage with Razor and can share his experience? I'll start a medium sized web project in the next weeks and I'm wondering if it makes sense to use Blazor over a "classic" Asp.net application.
Oh cool. Yeah I'm actually only barely beginning to explore that last part, so I'm sure the way I explained it is somewhat naive. But that's what continual improvement is all about. I have edited my main comment a new of times yesterday and today, so you might enjoy reading it again. Facebook is really into that part about relying on the infrastructure and reporting, and being able to rollback, so you might look into what they have written on the subject. I would just be careful about listening to advice that says to do that instead of testing. Even if you can find out what is going wrong in a manual test environment or production environment and fix it without writing tests, that still means it took up someone else's time unnecessarily, or messed up a user's experience unnecessarily, as the bugs would likely have been caught prior to that by proper tests. Plus the tests really do give you the right kind of environment to do more experimentation and refactoring while developing. I mean, any decent developer will do some kind of testing before releasing their code, manual or otherwise. And properly written unit tests should actually reduce the total time from beginning to write code to feeling it is well written and well tested enough to release. It also helps to write some code that hooks into a code coverage tracker. I have the ability to make a test class inherit from a certain class that means the test will report as failed if any lines in the unit were missed, as well as list the lines that were missed. I don't expect 100% coverage for the code base, but if you use TDD and have some new class start out with 100% coverage, it is easy to keep it that way going forward. Basically it enforces 100% coverage of that one unit by that one unit test, so it is independent of the rest of the code coverage, and it doesn't count if other tests get part of the coverage of that unit. It is a really low friction way to prove a test is somewhat thorough, at least in term of code coverage. The beautiful part about it is is it is practical to use even on legacy code, because you can have no or low coverage for the rest of the code base, and that doesn't stop you from enforcing 100% coverage for new classes that you decide to have tests for.
If things are not designed to be compatible, you're going to have to work to make them so. Assuming you can't modify Service1 and Service2, that means either qualifying the types: Service1.sharedProp1 name1; or making your own types and relaying via casting (if they're just enums) or something more complex otherwise. It's hard to tell because you've pseudocoded away all the concrete details.
I have my issues on learnin with books: You can't subdue and interrogate them\^\^ and when speed and efficiency is key, being a student of 300+ pages of an too-broad-for-your-specific-request encyclopedia is like having to listen to your seinle grandma when you could actually be a roid-star. (So obviously googling is a start, but also decompiling, checking out the given functions and tinkering around with them would be my approach, but) It would be amazing if you could show what you could have come up with, because I couldn't think beyond the static inheritance stuff, and maybe redwiggling types that shouldn't be used because they are no subclasses of xyz... So please, don't be shy ;-)
Why? To each his own, just curious what your specific reasons are. 
Thank you very much. I think I will look at the different frameworks (Reactive, MVVMLight, maybe Prism) and try to figure out what would be best for me
That’s interesting. You serialising behaviour ? Probably want to look into F#. 
If you are willing to do a lil bit of coding yourself, this is a quick cut from version I used for my own project: //You can slap these in the repository, in this project I used bare DbContext public static class ExtensionRepository { public static IQueryable&lt;T&gt; GetAggregateQuery&lt;T&gt;(this DbContext context, IAggregateSpecification&lt;T&gt; spec) where T : class, IAggregateRoot { IQueryable&lt;T&gt; setWithIncludes = context.SetWithIncludes(spec); return setWithIncludes.Where(spec.Criteria) as IQueryable&lt;T&gt;; //Ignore the where clause here, irrelevant } private static IQueryable&lt;T&gt; SetWithIncludes&lt;T&gt;(this DbContext context, IAggregateSpecification&lt;T&gt; spec) where T : class, IAggregateRoot { var withExpressionIncludes = spec?.Includes .Aggregate(context.Set&lt;T&gt;().AsQueryable(), (queryable, include) =&gt; queryable.Include(include)); var withAllIncludes = spec?.IncludeStrings .Aggregate(withExpressionIncludes, (queryable, include) =&gt; queryable.Include(include)); return withAllIncludes; } } //Implementation of specification pattern itself is mostly irrelevant for this public interface IAggregateSpecification&lt;T&gt; : ISpecification&lt;T&gt; where T : IAggregateRoot { IList&lt;Expression&lt;Func&lt;T, object&gt;&gt;&gt; Includes { get; } IList&lt;string&gt; IncludeStrings { get; } } //Implement the interface such that the base class has these in it public IList&lt;Expression&lt;Func&lt;T, object&gt;&gt;&gt; Includes { get; } = new List&lt;Expression&lt;Func&lt;T, object&gt;&gt;&gt;(); public IList&lt;string&gt; IncludeStrings { get; } = new List&lt;string&gt;(); public void AddInclude(Expression&lt;Func&lt;T, object&gt;&gt; expression) { Includes.Add(expression); } /// &lt;summary&gt; /// Add an include using a string syntax. Commonly used for nested, which would need a ThenInclude otherwise. /// &lt;/summary&gt; /// &lt;param name="stringInclude"&gt;Property name to include. Ex: "Aliases.Arguments"&lt;/param&gt; public void AddInclude(string stringInclude) { IncludeStrings.Add(stringInclude); } //Then just derive the base class per aggregate root, and in constructor add the mappings AddInclude(x =&gt; x.PROPERTY); AddInclude($"{nameof(YOUR_AGGREGATE_ROOT.PROPERTY)}.{nameof(PROPERTY.NESTED_PROPERTY)}"); //Example loading from db var entity = _dbContext.GetAggregateQuery(new YOUR_IAGGREGATESPECIFICATION_IMPLEMENTATION).FirstOrDefault(); 
&gt;much less efficient than including everything in one query. Depending on the situation
&gt; I'll start a medium sized web project in the next weeks and I'm wondering if it makes sense to use Blazor over a "classic" Asp.net application. Absolutely not. Blazor won't be in a stable state for easily another year, probably more. It will _not_ ship in a final version as part of ASP.NET Core 3.0 later this year. Its offshoot, Razor Components, will. That might be an option for you.
&gt; just imported several webservices and all of them declare their own stuff. If you use svcutil rather than adding the web services in VS you can add multiple services as a single file, svcutil should deal with that problem automatically. 
Yeah... It's a kinda funny thing... Maps (aka dictionary) and Sets need "hash" and "equate" delegates. AVL Trees, Red Black Trees, and Heaps need a "compare" delegate. My Omnitree (an ND SPT) needs 1 "locate" delegate, 2 "equate" delegate, 3 "equateDimension" (for equating values along each dimension, 4 "compareDimension" (for comparing values along each dimension) :D
I don't know what this means. If you're worried about too many DLLs cluttering the directory (which typically isn't really a problem), you can use something like ILMerge to merge the INI library into your exe.
Footprint is total install size... Libraries out there can be 100kb to even almost a megabyte. I know it isn’t much but if you had the opportunity to improve something and make it simpler then god damn, why wouldn’t you?
But you literally started this thread saying that _you_ want to write a library. What makes you think yours will be smaller than available options?
If you mean "wcf" you can tell them to share service types which reuse the classes across the services. 
Because I’m the magical computer science fairy. I’ve already gotten done reviewing some of them.
Ugh, that sounds thorny. Almost all our EF usage is in .Net Classic. On the Core side we've migrated a lot of stuff to alternative technologies, Redis, Elastic. For DB stuff it's Dapper and some EF, Dapper on reads, EF on writes. I'm tied to .Net Classic at the moment, but I'll have a chat tomorrow about how they're using EF Core and see if they need to think about things more. Cheers :)
I don't have a foreskin
1. All the more reason to properly test it so you don't have unexpected performance problems. 2. And that often means more complex IO needing testing.
For the log just bind a List&lt;string&gt; to a Listbox control.
Hey, thanks a lot for all the information! I worried a bit about the SerialPort class since it seems to be too slow. I wanted to give this solution a try: [https://roofman.wordpress.com/2012/09/13/fast-serial-communication-for-c-real-time-applications/](https://roofman.wordpress.com/2012/09/13/fast-serial-communication-for-c-real-time-applications/) to be able to increase the sample rate
However, unlike Angular and React, JavaScript isn't involved. Thumbs up!
They're *practically equivalent*, but they're *not* 'exactly the same object', if only by virtue of existing inside different classes or namespaces. They could have different semantic value, which the compiler will be unable to intuit. It may not seem obvious, but there *are* reasons for having two classes with the same (implicit) interface and *not* automatically allowing one to be substituted for the other. You may need to add some variety of common base type, but you should also look into u/Octopork's suggestion, if that lets you continue to generate the code file(s) in question.
[Types nested in generic types are automatically generic](https://sharplab.io/#v2:C4LglgNgPgAgDAAhgRgNwFgBQ8nICwbaIoB0AMmAHYCOhOKArIVjAMxIBMCAYgPa8AeACoA+LAG8sCaUnYwuAQWDAATmABGAV2ABTKTPEIAvliNA), even if it doesn't look that way in the C# source code.
Well, in practice, JavaScript _will be_ involved. JSInterop is a critical piece of Blazor, and will be for a while. After all, WebAssembly doesn't have access to the DOM, so anything like an event handler ultimately calls back to JS, whether you write it or the Blazor project did.
1. Of course you need integration tests, but that doesn't mean you unnecessarily complicate and slow down your unit tests. 2. Sure... in your integration tests.
THAT is good to know. Thanks! :)
Put the complete class definition with namespace: public Service1.sharedprop1 name1 public Service1.sharedprop2 name1
Well damn, I thought WebAssembly had access to the DOM now.
This would be the case if you create monolithic pages that contain all the functionality. A better approach is to use the new related RazorComponents to break down the problem into discrete items A good example of this is the Blazing Pizza demo app, which has a tutorial: https://aka.ms/blazorworkshop 
Everyone wants js to due, but no one wants js to die.
Are you just being pedantic or do you not really understand what he was saying? His very last few words is "take a value and return a value and have no side effects". It's pretty easy to understand what he means by this. He means static methods can affect state of shared variables. This is essentially the problem with global variables.
I haven't run into any instances where the SerialPort class is too slow. The max speed I work with is ~1.5MBd. In cases where I need to stream data from the sensor I use an observable hooked up to the SerialPort.DataReceived event which can then buffer / batch / process / etc data as it comes in. I've also been looking at [System.IO.Pipelines](https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/) which may let me simplify that code a bit.
IMHO, if you plan on using Reactive Extensions at all you may as well use ReactiveUI since you'll be working with observables anyway. Also worth pointing out, ReactiveUI provides a binding system that can provide some compile-time checking and better refactoring support vs standard XAML bindings (maybe other MVVM frameworks do too though, I haven't used them).
Fuck unit tests. Putting everything into categories just leads to bad tests.
Only the BOM for now... patiently waiting....
Advanced Installer
you arent java then.
ANYTHING can modify global variables that has nothing to do with static methods. He is nonsensical. I'm saying ignore him and static methods have nothing to do with static variables and isn't required to be in a static class. Do you know what a static method is?
There's a setting that disallows client side query processing. I see it as a must use for EF Core.
That's ridiculous. Unit tests have a purpose, as do integration tests. Those purposes are different. Ignoring that is just silly. I shouldn't have to have e.g. a DB, event bus, and ML endpoint available to make sure a damn controller returns the correct status codes.
You are confusing the value of the tests with the value of the labels you attach to the tests.
Nope, I'm really not. If you think that every test should be an integration test, or that any code which takes a fair bit of time to return a result is bad, you're drunk (or very bad at your job.)
To put it another way, try justifying each of your tests without ever using the word "unit". If you can, then you didn't need to label it a "unit test". If you can't, you didn't need the test.
Is lazy loading the same as including? What if the DbContext is disposed between fetching the entity and accessing the properties?
I suppose you could save your notes in a markdown file. A lot of IDEs have markdown editor extensions. Example: [https://marketplace.visualstudio.com/items?itemName=MadsKristensen.MarkdownEditor](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.MarkdownEditor) You could also use Pastebin: [https://pastebin.com/](https://pastebin.com/)
Again, you are focusing on labels.
No I am a jew
Not necessarily. I/O completion ports can do a lot of their work with DMA. I don't know all of the details, but imagine data streaming between the RAM and disk or network controller hardware without needing the CPU.
The app I work on was entirely written using static methods. I'm quite familiar with [the problems of] static methods. I know you can use them correctly but they are often not used correctly, which is what his point is.
I have a OneNote notebook titled “development” that I’ve used for probably 15 years to take notes at conferences, Meet Ups, books, videos, etc. syncs between several iterations of laptop, iPad, and even phone. Most jobs, I’ve been able to log into my notes at least via OneDrive, if not directly through OneNote app.
I work on optical instruments, and use splines to generate intermediate points between calibrated sensor reading points to read emittance of materials. 
Markdown is exactly what I'm looking for. Thank you.
I'll create dummy projects with things I need to learn and then push to my repo. I keeping track of what I had learned in this way.
I'm calling bullshit on that. At no place I have worked have I seen static variables used more in static methods. It's either equally the same or static vars were outright banned unless they were const.
In your current code I’m not too sure where you would put it as if you create multiple, the original would be replaced, and even if it isn’t replaced the code requires the same input to move the object so destroying based off of it reaching it’s destination wouldn’t work. If you wanted to create multiple you’d have to keep track of them all and seperate the creation from their movement. Also the Start() method has Destory(this), that means as soon as that method is called which is at start, it destroys itself almost immediately sparing a frame so that’s no good. If you’d like I can help make a script and comment every line for you, otherwise my recommendation is to instead of doing everything in one method, break up the steps into different methods. Have a CreateSphere() method that is called if Input.MouseButton(0) and a MoveSphere(Transform) method that would allow you to loop over a list of objects that are added by the CreateSphere() method. Read up on List&lt;T&gt; as that would be more helpfully than an array to keep track of all the objects in this scenario.
Canthros is right. Base class with `virtual` functions or use an interface. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual
I make markdowns files for each project and check them in to TFS with the source. Visual Studio has a fairly good add-in for this. I'm also maintaining a growing notebook in evernote. 
Anki Deck or write out flash cards 
I'm not so sure. I bet they'll put it in 1.0 at Build in May. Net Core 3 and Blazor 1.0 are my two predictions that affect me at work. 
This is works the same in all languages. something-something floating points Math.log(1000)/ Math.log(10) // 2.9999999999999996 using javascript cause i can just f12 floor will always end up on 2. Math.floor(Math.log(1000)/ Math.log(10)) // 2 Math.floor Math.round will give you the closest whole number. Math.round(Math.log(1000)/ Math.log(10)) //3 Math.Round 
unfortunately... from daniel roth, asp.net program manager: dotnet core 3.0 = "fall" : https://www.youtube.com/watch?v=WmDXgO0f-MQ&amp;t=48m17s blazor = "some time later" : https://www.youtube.com/watch?v=WmDXgO0f-MQ&amp;t=49m22s 
Ok
IEEE floating point is a pain, basically. Not new.
Well hell...what the f am I going to Build for?!
There is an open proposal for allowing generic attributes. Attributes predate generics, so they are not currently allowed because no one wanted to write the tests for something that they were not planning on using. 
No, you said don't use static methods because static variables are bad. That's idiotic. My code base at work and home has static methods EVERYWHERE. However static variables are nowhere to be found. I don't know anyone who thinks only static variables can be used in a static method but that's some downright stupid shit 
It isn't the same; The lazy load solution only works if the DB isn't disposed of as you mentioned.
1) web / desktop / services / api. Some future hints for ya - You don’t program databases in c# lol.
1) I am sotware engineer and "maintain"(read: do adhoc tasks) a homegrown c# framework to be used for C# projects in our company. This framework can be used from all c# projects, whether they are console, desktop, web, or windows services. 2) this is a pure c# project. So i don' t run into any other language. Our docs are written using sphinx and rst. So i got to learn those. JavaScript itself is avoidable for me. But i am proficient in js, so i do use it from time to time
Entity framework and linq 
1. I'm primarily a backend developer. This generally means I work on server code, APIs, database access layer, ETL, etc. Occasionally I'll work on web dev ([ASP.NET](https://ASP.NET), APIs for various website data), and rarely I'll write desktop code (WinForms). 2. Probably JavaScript, but only insomuch that I need to be able to read it to understand what our sites are doing; it's very rare that I need to write any JS.
they have extremely similar syntax
Sorry I was so vague in my question. But what are the main differences I should be aware of? I feel like I'm writing Java but with different keywords like WireLine instead of println, etc. Given, I just started the course 2 days ago so I'm still going over all the basics, so even though they are very familiar I'm doing everything from scratch so I don't miss any important information/changes.
1) Do a bit of coding. (mostly WPF right now) 1.A) Hit "Build" 1.B) Decide to check reddit while the (15 second) build runs 1.C) Look like I'm busy doing work for 5-10 minutes. 1.D) Actually just moderating /r/csharp 1.E) Not actually moderating, just looking for opportunities for mod abuse 1.F) Not finding many opportunities 1.G) Forgot about my build, go back to work for 5 minutes 1.H) Repeat (But more likely, work with the other devs, handle clients, validate/critique designs, planning, managing my managers. Feel nostalgia for the days where it was almost all coding.) 2) C#. JavaScript is thankfully completely avoidable for me. Though right now, I've been [swimming in CSS](https://i.imgur.com/Q3cUg29.gif) a lot, for [absolutely no reason whatsoever.](https://i.imgur.com/WypxQz0.jpg)
Generics are pretty different. Value types don't exist in Java at all. There are significant library and syntax differences, favoring Java and C# respectively, that are not core to the runtime, but only to developer ergonomics.
Are you sure you are talking about Java and not Javascript? There are definitely Value Types in Java.
Because the shift values are are masked to the low 5/6 bits (or modulus 32/64, if you prefer). A shift of "32" for a 32 bit operand is actually a shift of zero, 33 shifts it by one, etc. It works that way because that's how x86 CPUs work.
There are a long list of differences, but i am able to remember the following only: - LINQ: this is a Comprehensive general purpose API at your disposal. One can accurately determine the level of proficiency in C# by the amount of Linq used (and not used) in code - Visual Studio goodies: VS is an excellent IDE. And far better than all java ides (except maybe jetbrains) 
Java doesn't have *user-definable* value types, just the primitives. C# structs are user-definable value types.
Ah gotcha, thanks for that, :) Haven't learned about that yet, looking forward to. :)
I think he means user-defined value types.
Similar syntax (the "C ctyle") certainly makes it easier to transition between C, C++, C#, Java, and JavaScript. It's one reason Python (which uses a completely alien syntax that hasn't had anything similar since FORTRAN) is so divisive - at least almost all other languages treat whitespace equally.
C# wins at syntax and better class library design (e.g., Task Parallel Library, LINQ, etc). Java wins at ecosystem and open-source community. Yes, like other people said, it differs at Generics due to Java’s Type Erasure.
Streams are more or less the equivalent of LINQ in Java.
To add to this, the docs on the shift operators at (https://docs.microsoft.com/en-us/cpp/c-language/bitwise-shift-operators?view=vs-2017) says: &gt; The result of a shift operation is undefined if the second operand is negative, or if the right operand is greater than or equal to the width in bits of the promoted left operand.
That’s using a database 
Backend server stuff. 100% C#, SQL, AWS, [ASP.Net](https://ASP.Net), plus some specialized stuff to get financial data feeds.
winforms, asp mvc, api, ef , sql server and hardware integration 
MVVMLight is the solution, it's light as its name says, can be scaled up. Easy learning curve... basically U just need to maintain 1 file(it's can be automated) it has a messenger mechanism that can be used at view side in order to uptade the UI. Your case a string can be sent via messenger and the UI can be subscribe to that message then you can upgrade the view based on that. Lists not always gets updated via simple binding...due to a UI thread... observable collection can not be writen when it's getting read...so hard to maintain lists in realtime situation.
I can relate to that checking reddit while building haha. Sometimes I forget if I build it already so I build it again just to be safe and go back to reddit for another 5 minutes. Then I have to wait for the application startup which is another good opportunity to check reddit again. Then it crashes to runtime error immediately after so rinse and repeat
I have a book with just empty pages. Wrote down what I learned, what we discussed in meetings etc. If it is full i just buy another one. 
| SQL Server | Redis | Elasticsearch | | [ASP.Net](https://ASP.Net) Core | | Angular | Honestly I'm all over the place. But I'm mostly writing Stored Procedures, and DotNet Core endpoints. Then I'll add the endpoint to a service in angular and hand it to someone else to finish it off. Javascript should be taken out back and shot, but I am growing fond of Typescript. 
You can get the same "surprising" results with squaring square roots too. I guess what you're reacting to is that Log10(x) is not just implemented as Math.Log(x,10), that's because it's possible to write more efficient code to find the log to a fixed know base than an arbitrary base, so it shouldn't surprise you that they are different. I wouldn't assume Log10 is any more "accurate" though just because it gives (say) 3.0001 instead of 2.99999 (the latter is more accurate).
From what I've seen of streams, they're not as powerful, but I could be mistaken. I've never used them. LINQ looks more intuitive to me. 
I'm a C# developer that went back to college and had to take a few Java-based courses, which felt like a less-refined version of C#. They're close enough that you should be able to hit the ground running. The learning curve is very small. 
C# is still an evolving language, and is doing so fairly rapidly. Depending on the course you're taking, you may not see a lot of the things that are happening in c# that are really useful. Among them are: 1. Nullable reference types (C# 8) 2. Tuple construction/deconstruction 3. Using statements 4. Async/await 5. Compiler-generated iterators (through ienumerable and the yield keyword) On mobile, but these are the things that come to mind. Java may have added some things. Also note that WriteLine is a method in an API of the core library, NOT a part of the language. This means you're also comparing differences of the library with one another, not just language features. You'll eventually do the same with their runtimes. 
Methods are non-virtual by default. Generics are reified. Structs are a thing. Async/await is everywhere now.
That sounds like a nice gig. 
1. Maintain microservices for this e-commerce platform. 2. I write a lot of react when I have to update the backend. Typescript is fantastic. I’ve learned to love JavaScript. It’s a great language. 
That JetBrains Rider is a neat little IDE
Yeah sure, I have a project with 1000 files all in one folder. I need it reviewed by Wednesday. Thanks Ps: GOTO is my favorite form of flow control
Well you already know some of the mistakes 🙂 But seriously, scope is not an issue, as we will try to get a big picture if solution is big enough. Usually oroje t is consistent, same mistakes being made across solution, so yeah! If you want, we can help you out🙂
Good or bad, it doesnt really matter. We will learn something from both. 
&gt; I assume making list2 null would then make list1 null. Sorry but you assume wrong. You're only nulling list2's reference to the actual List&lt;SomeClass&gt; that resides in heap memory. As long as there's at least one reference to it (and there is - list1), it will continue to exist.
&gt;It's one reason Python (which uses a completely alien syntax that hasn't had anything similar since FORTRAN) is so divisive At a first glance it really is not very alien and has been in similar ways in several languages already. It looks a lot like OCaml and related languages. It rather sounds like you just have never been exposed to non c-style languages.
C# does not have a ´throws´clause.
Hi, I made the switch some time ago and i find the c# more developer friendly. C# has: * Better implemented generics - Java's generics are a compile trick, .Net generics works both for value types and reference types * Extension methods * Expression trees * Partial classes * Delegates * LINQ (streams api is not so cool and powerfull) * Properties (in java get / set methods) And probably a lot more ;) VS is powerfull ide but since get used to intelij I develop in jetbrains rider. Cheers
Superficially yes - but as you go deeper, you will see the differences cropping up.
One minor thing, which might be useful to be aware of, is naming convention: in C#, methods have upper-(camel)-case names whereas in Java, they are lower-case. Same goes for package/namespace names (which are different concepts anyway, but they look a lot alike) Also interface names in C# usually start with "I", in Java, they don't. Not that this is an essential difference, but it helps me in daily coding (I work with both languages) to avoid misspellings and keep the two apart.
1) currently working on a full-stack application (meaning everything from front-end web work to backend database and application-services) 2) anything that is needed for the current application (.NET Core/EF/ASP/SQL/Agular)
That's cute. Learn more and you'll feel how different they are. Perhaps reading keywords and operators here will speed it up https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/
The `\u` syntax is evaluated at compile time. You can't use runtime values here. What you can do instead is: System.Text.Encoding.Unicode.GetString(new byte[] { 0xE1, 0x09 }) But that's going to perform a lot worse.
You frequently **spam** these kind of questions in various sub-reddits, but I've never seen you do anything with the responses. What's the point?
Oh great. So that will pretty much do what im hoping for then. Ill try it. Thanks
If you want an example of clean code or weird code (or both) maybe I'll send a few things your way although I wouldn't want a review.
C# is the first language that I learned and I really dislike non-C-style languages.
That's exactly what I was missing! Thanks a ton!
Thank you. It is nice to have challenging refactoring material. 
Simply refactoring code blocks is also not a bad idea. Food for thought🙂
Then you are missing out a lot and limit youreslf and your own development. Especially F# is wonderful and miles ahead of C#.
Could you provide a code sample?
&gt; SQL Server | Redis | Elasticsearch | &gt; &gt;| [ASP.Net](https://ASP.Net) Core | &gt; &gt;| Angular | Ohhhh I'd be very happy with that stack! Replace Angular with React or Vue and that might be my dream job. &gt; But I'm mostly writing Stored Procedures, and DotNet Core endpoints Fuckkkkkk thatttttt. 
On quick glance they feel somewhat similar, and not without a reason. Historically, C# was created as sort of Microsoft Java after Sun/Oracle had Microsoft stop making Java implementations via lawsuits and other legal means. So Microsoft created .NET Framework, as an answer to that. At the very beginning of its existence, they were copying Java very hard, and even provided J# (Java the language on .NET Framework). As time went on, however, differences started popping up. Some major differences between Java and C# are that: - .NET provides proper reified generics, as opposed to Java where they are "fake" (compiler just converts them into typecasts, the types are not preserved). - .NET provides the ability to define own value types (structs). - Asynchronous programming in .NET is easy, as it provides all that you need out-of-the-box. - LINQ is far less clunky than Java Stream API. - .NET has real delegates, unlike Java's "fake" delegates done via single-method interfaces. - C# is not as excessively verbose as Java. - .NET p/invoke mechanism provides far easier and better interop than Java's JNI. - Latest versions of .NET Core provide efficient memory manipulation primitives. - .NET has the ability to pass arguments by reference, Java does not (though you can fake it, to an extent). - C# does not enforce filename-equal-to-class-name, nor does it restrict you to single class per file. - In my experience, VS is a better IDE than anything Java land has to offer. - Java is more portable than .NET (better support for exotic CPU architectures, although .NET Core is available on all major platforms). With all that said, however, if you are experienced with Java, you should have no issues getting started with C#.
Thank god! 
Why not. [This project](https://github.com/ddashwood/CodingTrainer) started off being a bit of fun, but has morphed into the basis of the dissertation for my Master degree. I started off wondering if I could get a user to enter C# into a web browser, and run their code in a sandbox on the server. Then I decided to use that as the basis for offering training in computer programming. My Masters thesis is to investigate whether it's possible for computers to automatically generate feedback for learners while they are learning computer programming, in such a way that learners can understand their mistakes and make better progress in their learning. There's no actual training material for learners yet... just a framework into which training material can be added. Is that the kind of thing you'd be interested in reviewing? (I might also be interested in helping out with doing code reviews - I started working professionally as a programmer in 1996, took a break to be a flying instructor in 2004, and I've been a C# tutor for the last 3 years. The only problem I have with doing code reviews is finding spare time.)
Check your tone
Awesome! It would be nice if we could talk about it a bit more, so I will give you a dm after work (in 8h) 
The exosystem of java sucks, you're forced to have 5 folders src, main, java, package name, etc until you get to the actual classes. No control on packages as there is in C# namespaces, package managers are unofficial and complex.
No, I'm talking about global scope. Don't put words in my mouth.
A team at work has many projects using .NET 2 and are stuck without any LINQ. The horror...
&gt; My code base at work and home has static methods EVERYWHERE. Sounds like a nightmare.
Try F#, Python or Scala if you want to have that “I've no idea what I'm doing feeling." again...
When you come from a large codebase with working maven setups, using the npm stuff feels quite limited and awkward. For every issue in the build world I could find a maven plugin, while our C# libs and MSI process becomes more and more "code as packaging reference". Both platforms have their strenghts, but I find the C# environment even more bloated than a 2Gb Intellij instance when all the bells and whistles in a 100+ artifacts project are active. &amp;#x200B;
Mh okay, until now my solution doesn't work so well. Either I get just 5 byte packages with 2 decoded double values (with a max size of 64 byte) with 10Hz and display them in my textboxes in "real time". Or I get a lot of data (up to 50kHz) and have to write them into a text file. The second option gives me still headache and I wasn't sure so far where the bottleneck will be.
.net 1.0 was a clone of Java. Staring from 2.0 (2005-2006) and the support of generics they become separated. Oracle bought Sun in 2009. At that time .net 3.5 was already there ;) and 4.0 on the way
Thank you, I'll take a look!
Hello, you mentioned you could give me some code snippets for nice/dirty code. Well, I would appreciate that! Lesson 3: OOP is the topic, but i would like some simple examples, not basing on SOLID. SOLID will be the next week. 
That was all long ago, so I was a bit fuzzy on the details. Thanks for correcting me.
Haha no. F# and C# share the same standard libraries and the same runtime. They have different capabilities but neither is miles ahead of the other. It all depends on your usage. Both languages also don't support the full feature set of the CLR, although they are closing the gap more and more.
So? Are folders for structure really that bad? Src main and test, to split up your test code, then packages to determine access. It’s all quite simple and logical. How is there no control on packages? You just rename the damn package dude. 
Both C# and Java were "inspired" by C/C++, so they look similar at first glance. But C# was intended from the start to be different from Java. A "Java without the mistakes" (but C# isn't without its own mistakes either). C# 1.0 was very similar to the Java version at the time, but since then C# has developed much faster than Java. It contains many more language features that Java doesn't have: properties, unsigned integral types, pointers, delegates &amp; events, value types, pass-by-reference, operator &amp; index overloading, conditional compilation, extension methods, 'yield return', expression trees, a late-bound (dynamic) type, 'async &amp; await', optional and named parameters, expression-bodies members, null-conditional operator, string interpolation, nameof operator, exception filters, pattern matching, tuple syntax,... And some things have been different from the start, most notably generics. C# also has Roslyn, an open-source compiler API, written in C#, which is pretty cool imo.
Right now I'm involved both in a Java and C# project. From the language side.. Enums are very different; in C# they're simple integer constants, whereas in Java they're full-fledged classes (each enum value is a singleton instance of the class). I also find Java generics more ergonomic because I can specify variance per method instead of per interface. Also, checked exceptions. I must admit I like them, esp. when following Oracle's guidance: checked exceptions for error conditions that must be handled, runtime (unchecked) exceptions for programmer errors. As a whole, the language is more clunky, but there are more available, high-quality 3rd-party libraries (just browse apache project). 
With code-first strategy, you are creating tables for databases in C# 🤔
My condolences..
&gt; pass-by-reference I just learned about this, and I absolutely love it! I have wondered so many times why its not a thing in Java.
Please link your twitch channel
OK, here we go! &gt; What is your role(s) and responsibilitie(s) with C# at your job ? I'm a junior developer, doing backend mostly &gt; Are you programming mostly webdev stuffs ? database ? desktop program etc or something else ? Webdev stuff, yep! using ASP.NET Core and EntityFramework Core to get the thing running! &gt; Which programming language you use the most with C# ? I make some gamedev on my free time, so sometimes I use Unity (C#) or GodotEngine (gdscript, Python-based language) &gt; is Javascript unavoidable for you or ? I don't use JS, so it's OK
Yes. You have 2 objects pointing to the same point in memory (reference). You would need to clone a list. 
Those poor, poor developers. At least they have generics. Why are they on such an old version? That's beyond ancient now. 
C# uses its expressive generic syntax and extension methods to make LINQ so much easier to use. It looks to me like the choices the Streams API devs had were constrained by Java just being a less flexible language.
A culture where no change happens unless a client is paying for it, because they are “too busy” They’re also using VS2008.
https://www.twitch.tv/kaisinnel There are annoying echo issues which will hopefully be resolved on the next stream. 
1) I do industrial automation, machine vision &amp; 3d scanning, all with C#. 2) 99.99% C#. Some PLC structured text when we have a hard real-time requirement. Luckily I'm in charge of development, so there's no way Js would find its way in here.
Unless you're a game developer, then you rightly ignore LINQ due to the extra GC garbage it generates!
Your statement contradicts itself
rk06 made the implication that "more LINQ -&gt; better dev". I pointed out that in performance sensitive fields, LINQ is best avoided.
&gt; F# and C# share the same standard libraries and the same runtime. Irrelevant, the subject is the language. &gt; They have different capabilities but neither is miles ahead of the other. It all depends on your usage. The gap is closing, but still large. F# had years before C#: - async &amp; await - tuple support - local functions - pattern matching (C# got a **very weak** pattern matching, but it will slowly improve with versions) - null-handling (poor version comes with C# 8.0) - records (perhaps coming with C# 8.x) - using statement (comes with C# 8.0) F# has what C# does not has: - Type providers (fuck yeah) - Computational expressions - Advanced type inference - union types and discriminated unions - custom operator support - object expressions - Generic type constraints for individual members - units of measure - type extensions (extension properties) - lazy expressions And overall the syntax is just way less verbose.
Sometimes it's useful though. (Sure, the best place for that would be the documentation, but let's be honest... most of us suck at it.)
Nice of you to say my comment is irrelevant when you are the one talking about F# when the subject was C# and Java ;)
A real miss Hinting what exceptions can be expected would be a huge improvement.
Senior/'lead' engineer. Almost exclusively back-end. Since I hardly ever touch the web stuff, the most common secondary language is SQL, far and away.
They are very useful for value types and Java doesn't have those either (except the primitives). Not that it can't be useful for reference types, but I guess not having value types in the language gives very little incentive for implementing pass-by-reference.
You're an asshole.
OMG. I would nope the hell outta there. 
Usually people would use MEF and load these particular things as needed dynamically but with meta programming you could make a simple convention framework to pick up these implementations. I mean. The fact that you can serialise it and it works ... feels wrong but also extremely exciting. There could be potential there for some thing completely new from MEF and meta programming. 
Npm is node, not C#. 
The languages really do have similar syntax. To the point where I have a hard time explaining to those who only know one why I so greatly prefer C#. Java isn’t a bad language, but there are some real differences that go beyond just which class/method name to call or using v. include statements. LINQ is a big deal. Java has some implementation of lambdas, but C# is much, much richer in terms of functional programming capabilities. Actual properties instead of the verbose getter and setter methods on beans. There’s a real argument that thin properties encourage breaking encapsulation — I don’t necessarily agree, but that’s a conversation of its own. In practice, people write a lot of DTO type objects or otherwise expose simple getter/setter functionality. C# properties are much more terse and easy to maintain than Java beans. C# is faster to evolve. This one is definitely in the YMMV category for good/bad, but it’s definitely a thing. Java is still reasonable close to what is was ten (or even 20) years ago. C# is still backward compatible has so many little tweaks and new features. The language just “feels” cleaner and more modern/less aged, to me.
1. At their core, the class/method/condition/loop/variable syntax is identical, yes. Look out for: * Structs * Different/more access modifiers * Auto properties, the `{ get; private set; }` syntax * Operator overloading * No type erasure for generics * `in` and `out` parameters, `ref` * async/await * yield/return * Extension methods * Linq query syntax, although rarely used * The new C# 7 tuples (value tuples) * Pattern matching and things like `if (int.TryParse(str, out int x))` Also: even primitives are proper objects (structs, so value types). This means that you can do things like int x = 4; x.ToString(); char c = 'z'; c.IsLetter(); 
c# can have this information, but you can only define it in the summary comments of the method as extra information.
If someone uses my omnitree to store a game world, there could be thousands of items in the tree. If I can serialize the tree with the delegates, then I can retain the sorting algorithms and current comparisons. This means when you deserialize the tree, all the contents would already be sorted. :) It would be much faster than having to re-sort everything after deserialization. And yes, it will work, but it depends on the delegate that is passed into my Omnitree on construction. I don't exactly know what you are thinking when you say "convention framework." Would you mind elaborating on that thought so I can understand?
streams performs a lot better than linq, so don't be so quick to say C# "wins" &amp;#x200B;
Yes they are almost the same. There are tons of the differences in the details, but the only major thing that I would keep in the back of my mind is that C# has structs, which are value types, which can have a massive impact on performance sometimes, either by reducing heap allocations or keeping data contiguous in memory. &amp;#x200B;
How much development experience do you have? That may change the answer yo your question.
That's, true. Occasionally I read documentation where that appears. But it lacks IDE support. (Or I am not aware of any) 
Yes but this can be deceiving as there are subtle differences and you can run into problems because you assumed the behavior is like the other language. Also some features have sweeping effects that change how things are done everywhere. Example is async but other things that seem minor like properties also affect a lot of libraries (databinding, DI)
The problem with throws is not that it is not useful. The problem is that the damage it causes outweighs the benefits by a lot
What about something like: public static IQueryable&lt;T&gt; FullInclude&lt;T&gt;(this IQueryable&lt;T&gt; input) where T : class { var names = typeof(T).GetProperties().Select(x =&gt; x.Name); foreach (var name in names) { input = input.Include(name); } return input; } 
What about something like: public static IQueryable&lt;T&gt; FullInclude&lt;T&gt;(this IQueryable&lt;T&gt; input) where T : class { var names = typeof(T).GetProperties().Select(x =&gt; x.Name); foreach (var name in names) { input = input.Include(name); } return input; } u/Morreed I think your ``SetWithIncludes`` can be simplified by performing loop, but I'm not sure. 
They are different /s?
You know you're running out of criticism when you lead with "I have to make like 4 folders". 
But you don’t. A src folder is common. A main/test folder is common. A package structure is common. I don’t get your point. Those things are all very good for structure. Nothing but positives. 
I like them too. Not sure where you got the idea I didn't.
I was using SML 20 years ago, just one of over a dozen languages I've used - best not to make assumptions. SML did not have a "#light" syntax. F# light and ocaml+twt are directly infected by python, they didn't precede it (I'm not sure you were suggesting they did, that "already" is ambiguous). I've never used OCaml - is the weird whitespace variant used much?
You got a source for that one? Not saying you are wrong, just curious. But the syntax of streams is horrible to say the least. I much prefer LINQ in that aspect.
The problem in the code you wrote: a) You expect that every property is navigatable b) It has to be recursive to go deeper than one level, e.g. works with Entity -&gt; Property, but doesnt work with Entity -&gt; Property -&gt; Property of previous property, in which case you need to invoke the fully qualified string syntax - &lt;PropertyName&gt;.&lt;NestedPropertyName&gt; c) At this point you have to start worrying about handling self-referencing relationships and similar stuff. d) You have no idea whats going on when you load the object graph - which is why I didn't provide actual code to the requested question, because either 1) you can write such thing and know why you shouldn't, in which case do what you want 2) if you cannot write it on your own, you will (most likely) write an abomination, which explodes on the first wrong assumption about how the relationships are organized. Therefore I proposed much more explicit configuration-like approach in which there should be far fewer surprises. 
Thats all on them...
That's useful to know. Ta
I figured you were the guy I originally replied to, and I read your comment wrong. By bad. 
Another question by you. And again: What have you tried so far? What failed? Where are you stuck? Show some effort. You're again just saying: Here's my code, please provide me the solution.
&gt; Java wins at ecosystem and open-source community. I don't know about that... especially not now. The Java ecosystem has actually always felt pretty bad to me. Sure they have 'better' open-source penetration right now... but I can't imagine it holding on to that for too much longer.
I think the difference with byte is that the bitshift operators are defined for int, uint, long, and ulong--anything else is implicitly upconverted to int before shifting. Which you can find out by checking the [the docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/right-shift-operator).
Extension methods rock
Java's libraries are better? In what way?
C# was originally going to be called J++. To answer your question no. I studied C# for 4 years and got a job using Java. There was negligible time spent picking up the language.
C# is what Java should've been. Also, have you ever tried to publish something on to Maven Central Repo? ....pain in the ass! 
Checking for integer over/underflow is of course slower than not checking for it. Minimally so, but perhaps significant in large enough numbers. However, the default for C# is unchecked anyway, so you wouldn't expect to see any difference by applying the `unchecked` keyword *unless* you configured the project/compiler to use checked integer arithmetic for the build. Personally, I mainly use the `unchecked` to express intent in calculations which *need* overflow to work correctly, which is often the case for hash functions.
Fairly normal to feel that way. You work as a developer for long enough they all just become languages. It my belief that A good developer can pickup a new language fairly quickly because the reality is Java, c#, swift, kotlin, c c++ are all fairly similar. Frameworks on the other hand are a different beast. My poison of choice at the moment is asp.net core. But I do code review on swift and touch the odd bit of java. 
From [the docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/checked-and-unchecked): &gt; If neither `checked` nor `unchecked` is specified, the default context for non-constant expressions (expressions that are evaluated at run time) is defined by the value of the -checked compiler option. By default the value of that option is unset and arithmetic operations are executed in an unchecked context. Unless you're taking special effort to turn on checked arithmetic, your math is probably occurring in an unchecked context.
I like to say that C# copied Java, but made it better, but then again then is r/sharp, so maybe I'm biased lol.
I believe visual studio should show it if you follow the standards of C# method docs. It’s been a long time though
I know I am picking just one point here, but are Tuples not considered dangerous these days? In that the programmer would always be better served by a strongly typed structure / class? Or does the F# constraints mechanism deal with this?
By ecosystem, I meant to refer to the many leading open source projects that are in use are mostly written in Java. * Spring, Drop Wizard, etc 🧙‍♂️ * Solr, Lucene, etc for Text Indexing * Apache Spark * Netflix’s Eureka, etc ... .NET doesn’t have that many successful industry-wide used projects. It is fewer in count for .NET side.
F# tuples are immutable (unlike the new C# value tuple). But for more complex data you would use records, yeah.
&gt; One can accurately determine the level of proficiency in C# by the amount of Linq used (and not used) in code No. That's silly.
Depends on the version. If you're using the 1.11 JDK then the languages are somewhat similar. But the standard libraries/.NET framework libraries were wildly different before 1.8 and the ecosystems are still very different as well. 
I just cross my eyes and they become the same language 
Regarding number 1, I thought it was always prudent to allow the consumer to handle the lifetime of disposable objects. In my project, I wrapped it in a singleton which would "clean-up" on app shutdown. For number 2, I did not intend for this to be the end of your logging functions. I figured this would be a starting point to implementing your logging systems. It was never intended to be a replacement for a full-featured logging library. More a library for getting starting of working on your own logging solution. Maybe I should update the documentation to reflect this intention.
No, initialise `prod`to 1 and then loop through the full array. That way empty arrays are handled fine (although you would probably have some code to return 0 if it was an empty array). Think about if you were summing the array. You’d initialise `sum` to 0, not the first value in the array. 
That makes sense; I thought you were referring to more on the development side of the 'ecosystem' since you called out open source separate.
Generic primitive/struct arrays in C# are hella more optimized than in Java. In Java, they just wrap syntactic sugar around a List of `Object` references, and box each primitive/struct that goes in, leading to lots of memory fragmentation and waste. In C#, using a generic array creates a brand new type at runtime, designed to specifically hold the item you tell it to, packed. So a List of `int` will store almost exactly `4 bytes * length` (plus a length variable probably, so +4 more bytes), all packed into one contiguous segment of memory. Faster for iterating too, since the CPU doesn't have to jump all around and get cache misses when reading your array sequentially. 
I was assuming the value of an empty product was undefined. It's been a long time since my math classes. [Since it's actually 1](http://math.wikia.com/wiki/Empty_product), yes, it would make sense to start with 1 and multiply by each element in turn.
Oh great! Yeah should have looked that up, simplifies it even more. 
More or less, but I am constantly annoyed at the lack of a Java Stream .single() method. If you want to validate that your filter expressions properly reduced your data set down to one, you still have to do it outside the Stream.
You might have figured this out already, but since you mentioned that you're writing C# like Java, strings can be compared with `==` since C# has operator overloading.
Most devices run on assembly Checkmate atheists
Cool. I must check this out. Sounds really cool All I meant was something similar to MEF but using a convention to load things dynamically. Similar to DI just a lot simpler. 
Writing well documented and named functions / classes / libraries normally ensures you don't have to remember how to do things as you have created an arsenal of helpers. 
That's for C, not C#. Here are the relevant docs for C#: - [&lt;&lt; operator - C# Reference | Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/left-shift-operator) - [&gt;&gt; operator - C# Reference | Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/right-shift-operator)
There are many different assembly languages.
&gt; C# is not as excessively verbose as Java. &gt; C# does not enforce filename-equal-to-class-name, nor does it restrict you to single class per file. These two things helped tremendously when writing code as a college student.
&gt; in C#, methods have upper-(camel)-case names whereas in Java, they are lower-case This is called "PascalCase" vs. "camelCase". C#, being a Microsoft-originated language, uses PascalCase for anything declared `public`. But that's just the standardized convention for the official libraries. You can use any naming convention you want. (But if you release a library using a different naming convention, you'll probably get complaints.)
Not to mention... Types are first level objects. Thank god!!! (っ･ω･)っ so there’s no type erasure, none of that annoying compile time only construct. True generics.
To be fair, the package-nesting = hierarchy is painful to wield. * Using Windows? Hope you enjoy long-file-path problems if you don't start in c:\dev or something similar. * Looks nasty in IDEs or editors that don't fold empty directories. Is tedious to scaffold up the first time. The package management *is* awful in java - ever published an open source package to maven? Hope you like going through actual 17-step-long setup guides. There's an openness, that's completely defeated by a lots of programmer hostile design decisions. Always strikes me as the reason that most of the "good java open source work" is under the umbrella of larger foundations (Apache, SpringBoot/pivotal etc). I'm running a bunch of Java teams at the moment, and the friction they put up with daily is really obvious to me, but it's all the ecosystem seems to know. It speaks volumes that SpringBoot is so popular, because it's "slightly less ceremony" than the alternatives, and it's still pretty awful.
Is this what you're looking for? [TestClass] public class UnitTest1 { [DataTestMethod] [DataRow(1, 2, 2)] [DataRow(2, 3, 5)] [DataRow(3, 5, 8)] public void AdditionTest(int a, int b, int result) { Assert.AreEqual(result, a + b); } }
For starters, C# "doctrine" does not use camel-case. And these are kind of random things, and not really what I'd call best-practice.
- Build systems are simpler (in that you don't really write build scripts unless you're a masochist) - Package management is way more idiomatic (especially in netcore) - The language is based on java, but with sprinklings of syntatic sugar (look at something like Lombok? All those features are already in the language) - Generics aren't type erased - Metaprogramming, as a result, is much more powerful - Project organisation is much simpler - The install experience (now, with netcore) is far more trivial - The BCL is generally better designed (*opinion) Things you'll find missing? - You might stumble into open source libraries (apache stuff, for example, or ML stuff) where the libraries are less mature or less well maintained ports. Aesthetically? - Allman notation over K&amp;R - More access modifiers present by community convention - Annotation syntax is bracketed [Annotation] vs @Annotation - UpperCamalCaseNamingConventions() - public int AutoPropertiesAreLovely {get; set; } - Generally terser. - LINQ was ten years earlier and makes Streams look laughably bad.
Src &amp; test make sense to me. Never really had a need for main (what’s that even for?) and I usually create a separate folder called lib to keep external dependencies which I haven’t stored globally. I’m always interested in how others setup their projects. That said, I can’t say I’m a fan of how Java’s implemented packages. Constraining it to the filesystem is such a horrible way to do it, especially if your running on the ① OS which forces a filepath length limit (Windows) and when u have to cd down several directories just to access a single class. I much prefer CSharps implementation of letting u decide the filesystem structure while still maintaining a compile time namespace system. IMHO java packages feels, like a lot of other features of java, to be a rashly made decision, which the java ecosystem is then forced to maintain in future releases meaning they can’t pave the way for a nicer solution without breaking backwards compatibility. Which tbh they should’ve done as soon as C# came out with proper generics.
I sometimes wish that C# had a "Throwable". Then I think about how it could really encourage some bad behavior. *"I want to return a different return type in different circumstances, so I just implement Throwable everywhere and I can throw a return value back to the caller, without being constrained by that pesky declared return type!"* &amp;mdash; Newbie developer that needs the electrodes turned up to 11
1) Full stack development, so I touch everything from the client all the way to the database with everything in between like web apps, WCF services, microservices, etc. We have a few desktop apps that we maintain as well. 2) VB.NET since some of our older apps were written in it. At my previous job, most of our data layers didn't use EF and instead used raw T-SQL queries, so T-SQL would have been my answer if I still worked there. I rarely write any JavaScript thanks to Razor, though some of our web apps actually use Angular and AngularJS. Our installers use Lua (unfortunately) and since I know more about builds and deployment than everyone else here, I also tend to write a lot of Lua and Powershell.
Sort-of :) C#, originally came from the Visual J++ project. Around the same time the-framework-that-was-to-be-ASP.net was being written, and was using that Java-for-Windows implementation as it's programming language. ASP.NET got traction, J++ was killed. Project "COOL" started, C# was the "re-implemented, with it's own APIs, compiler, etc" resurrection of that project to power the successor to ASP.NET. So not quite a clone, but more a legally mandated re-work ;) Rest is history. I know the guys from .NET Rocks are currently working a full history book around this topic which will likely be fascinating. But this is roughly from memory :)
Name your "/" key "beetlejuice", then call him by pressing it three times. VS will spawn a triple-slash XML documentation block. It even provides Intellisense tailored to the comment syntax.
Using and designing a database, actually. What most of us *aren't* doing is creating our own database management system like MSSQL.
To each their own. I actually despise JS and TypeScript.
If this is true, I wonder if it is for some sort of data collection?
Best practices but your functions start in lowercase?
One thing I really like about C# that I don't remember ever being a part of Java is properties and the Getter/Setter syntax improvements that came with C# ( I think 6) &amp;#x200B; type Name {get; } is the easiest way to create read only properties. Readability is hugely improved. 
It is Totally anecdotal. But i find that more proficient devs refactor their code to use linq, in place of for &amp; foreach statements. 
T_T those guys have all my sympathy
&gt; then you rightly ignore LINQ due to the extra GC garbage it generates This is 100% not true. We use linq for a lot of stuff as in most cases when you're reading/writing less than 1000s of records it's extremely useful and helps speed up development quite a bit. Yea if you're doing bulk stuff you can run into performance issues if you're not careful, but even then it's avoidable. I have a time tracking piece in some software I built that spits out a csv export of 100s of 1000s of records in about 4 or 5 seconds and it's 100% done with linq reading the database.
Right. Looks the same, but one is clearly superior. 
My current contract at a massive corporation supports a lot of legacy ASP.NET WebForms apps so most of my coding is in that. There's equally a lot of T-SQL or PL-SQL to go along with those apps. My next contract is C# and Angular so it's a mix. Older apps I can avoid JS especially with WebForms but newer stuff that uses MVC is heavier on JS or JS based frameworks. I don't mind either. I just don't like supporting IE...
i measured it. 
Java was a pretty crappy lanuage that has made major strides in the last few years, but it's performant and extremely popular. Companies like Google and groups like Apache have put serious effort into minimizing the crappiness of the language by building libraries like Google Guava and the Apache Libs. Some of the Java libraries are simply making up for deficiencies in the language, so C# does't need them. As others have pointed out, I was referring to user-defined value types.
A bit like this, but programmatically. &amp;#x200B; Like being able to instantiate all these datarows from another method
Can’t say I’ve ever ran across the long-file-path issues myself, though I do understand they could come up. However, do any IDE’s not fold that stuff? That’s been the standard forever. That’s more of a sign of a bad IDE that shouldn’t be used than a criticism of the language’s structure. Haven’t felt the need to publish to Maven, so I can’t speak to anything on that front. I’ll take your word for it. Spring Boot gets a lot of flak where I think it’s undeserving. It’s a highly opinionated framework that prioritizes next to no manual setup needed. Friction is going to be a symptom of a framework like that. Java has had this “ease of access” thing going for quite a while, since .Net was so closed off, but that’s coming to an end. More Java developers just preferred this system than the alternative frictionless, but wild west, frameworks. 
You’re not alone, friend. The C# community really beats up on js, but some of the best engineers I’ve ever worked with are js developers. I didn’t like js until I saw good devs use it. Working with angular and then react applications made me love the language. Typescript is just the icing on the cake. 
So much so that you can hire a Java developer for a C# job and vice-versa.
I think what op means is talking to db. You most definitely can do that in C#. 
Main is obviously for code that isn’t test. The same way you’d split your .Net Solution into multiple projects, in Java, you split your application into multiple modules. Pretty common stuff. “Src” is the equivalent to your solution. Don’t know why you’re adding a lib folder, as Gradle will handle all of that for you. Sounds like you don’t know how to use the proper tools. As I’ve told the other guy, I do recognize that there might be an issue with Windows in that regard, but I think you need to shorten up your package names, as I’ve never come across that issue, and I’ve been in some big projects. Besides, if you needed to access a single class, you don’t need to cd down the layers. “vi com/example/project/x.java” works just fine. Bit weird of a point to make there. 
Yep...
using statements are in Java these days.
 [TestMethod] public void MyTestMethod() { object[][] myList = GetMyList(); foreach (object[] objectArray in myList) { var result = DoSomething(objectArray[0]); var expected = objectArray[1]; Assert.AreEqual(expected, result); } } I'd try to use the interface though instead of a jagged object array.
Async/await is the big thing here. I went from mainly working in C# to doing a lot of work in Java. Being used to async/await makes Javas version of asynchronous programming feel half-assed. In C#, and especially when working with ASP.NET, async just feels first class.
It's not the number of records: it's the number of calls. Every call to IEnumerable.Select(), IEnumerable.Where(), etc creates a heap object that has to be garbage collected. If you're running a game at 60fps and you have dozens/hundreds of these calls per frame this garbage very quickly adds up and the VM has to pause for a garbage collection cycle, which causes hitches and dropped frames. In C# game development, avoiding garbage generation in code that runs every frame is the number one thing you can do for performance. 
For me syntax is mostly the same, but I found the issues are lower down on the stack in not knowing the namespaces and components that make up the language as comes with time. 
Yeah, i had this idea, but I tried to do it java style. &amp;#x200B; Anyway, thank you for your time! &amp;#x200B;
What the actual hell? VS2008? Is their client still running on Windows XP or something? I'm gonna agree with Quackmatic and say, "Those poor, poor developers". Not only are they using an archaic version of C#, but their limiting their own career for whenever they decide to move onto to a new job. "I see you have 15 years of C# experience, tell me, what's your favorite feature in C# 7? What's are some of the pros versus cons of using .Net Core versus .Net 4.5+?"
Just today I have been cursing at Java for not understanding `T.class`.
That's possible. It's been clear that he is no developer himself.
Skip forms, or use them just for practice, and jump straight into native android UI. Xamarin is great, really, but forms is so limiting. 
&gt;se are kind of random things, and not really what I'd call best-practice. I have mentioned them in best practices because you can do without following them, like comments, checking nulls for every thing, compiler warning , stringbuilder over string in some cases but developers should not skip them. Please let me know what you consider as best practices then?
I think maybe you need to edit your comment because it reads as &gt; Unless you're a game developer, then you rightly ignore LINQ due to the extra GC garbage it generates! (implying that only game developers use LINQ). But what I think you're arguing is that you can't use it if you're doing game dev, which makes sense. 
This is a good point did not see that . Thanks. So this is kind of a naming conventions we should follow. What other best practices do you think i should add in my next blog?
It's a steaming pile of shit. Run away as fast as you can.
Ah, it took me a few tries, but I see now how my statement could be read both ways. I've edited it now to hopefully clarify what I meant :)
VS2008 targeting .NET 2 should be able to use LINQ if they can add extra assembly references. http://www.albahari.com/nutshell/linqbridge.aspx
It’s indicative of why I don’t like java. Everything just feels like an afterthought. Like, the JVM is cool, I think we can all agree on that. Back when it came out the idea and concept was novel. But Java is a zombie language. They’ve stitched it up time and time again and it’s an improvement but every mistake they make becomes an extra layer of ‘fat’ on the language. There’s soooo many deprecated methods, weird design choices and blatant misfires that the java ecosystem is too cluttered for me to enjoy it.
Yea and I definitely agree in instances where memory is super important you just don't want to use linq. but when I need to change one column value in one row and can do that in one line as opposed to 5, I'm using linq :)
Any examples of what you have built with it? Thanks for the reply by the way!
I wasn’t talking about java. Just general projects in any language. Also, cannot see why you’d need a main and a src folder, like ever. src is where I put all my solution code, so main seems redundant but maybe for java development you’d need another folder. Yeah cd wasn’t really the point, but understood.
What was your experience with it that gave you that impression haha? I'm just putting feelers out, no attachment to .NET or any platform for that matter, just trying to get insight.
I would advice against using your own convention, because otherwise you will always have a mix of two conventions and it will always be inconsistent. And who wants to fix the convention when you release your library. You can avoid this additional work if you are using the standardconvention in the first place. &amp;#x200B; And variables are always camelCase no matter if they are public or private, but you will never see public one, because you use a private and a getter/setter method instead. &amp;#x200B; `public string Test{get;set;}` is the short way to write &amp;#x200B; `private string _test;` `public string Test()` `{` `return _test` `}` &amp;#x200B; `public void Test(string value)` `{` `_test = value;` `}` &amp;#x200B; &amp;#x200B; &amp;#x200B;
 I would advice against using your own convention, because otherwise you will always have a mix of two conventions and it will always be inconsistent. And who wants to fix the convention when you release your library. You can avoid this additional work if you are using the standardconvention in the first place. And variables are always camelCase no matter if they are public or private, but you will never see public one, because you use a private and a getter/setter method instead. public string Test{get;set;} is the short way to write private string \_test; public string Test() { return \_test } public void Test(string value) { \_test = value; }
Xamarin is great. It's as good as any other cross platform framework. Xamarin forms has the capabilities to do anything a platform specific ui could do. The added benefit is the cross framework sharing of code, especially if you're in a company that's porting some product to mobile. For personal use its still great, and most people who complain here haven't touched Xamarin since 2.4; the framework has come a long way in terms of performance stability and features. 
Your “src” directory contains all the code, as the root application will contains items like the gradle wrapper, build directories, outputs for unit tests, general config for the project, readme’s, etc. It’s much nicer to put all modules in a source folder, and differentiate from there. 
C# started out as, let's be honest, a clone of Java, and they do remain very similar in their basic aspects, but C# has gained lots of stuff since then, some on the syntactic, some on the library-level. Some differences: * Reified generics (Java uses type erasure, meaning you have to pass those "clazz"-variables around if you want runtime type-information); * A unified type-system with object as its root, meaning no int/Integer-distinction, e.g.; * structs, which are pass-by-value complex types; * delegates/lambdas &amp; events; * properties, which obviate the need for getters/setters; * yield, which allows you to return lazy streams - also streams &amp; async-streams; * tuples &amp; custom deconstructors, which allow limited pattern-matching; What's coming: * Nullable reference types - though that's a misnomer, I'd say. What's actually coming are non-nullable reference types which cause warnings to be emitted if you assign null to a reference type. * Default interface implementations (though Java gained those too, recently). * Maybe concepts/typeclasses, down the line, which enable one to decouple a class from its interface implementation. So while the languages do retain a similarity in how they look and do have a common subset of functionality, I personally find C# to offer a much richer feature-set.
Let me say that Xamarin Forms it's a good option because it has evolved much in the last years. I've been working with it the last two years and it's good and there not much things that you can't do it. You can check the Xamarin.Forms goodlooking UI Samples create by a Spanish mate. https://github.com/jsuarezruiz/xamarin-forms-goodlooking-UI/blob/master/README.md
In short, there are only two ways one finds themselves in Xamarin land. One, you're a developer looking to do mobile stuff and you're like "huh, writing once and having it work on multiple devices seems really cool, especially since I don't have to change IDEs and can use a language I already know." Or you believe the marketing from Microsoft of "hey CIO, you'll save tons of money and time by using this since you've have to be dumb as rocks to have multiple code bases." I'll leave you with this, I agree with all the points. [https://forums.xamarin.com/discussion/89286/xamarin-sucks-lessons-learned-from-weeks-wasted](https://forums.xamarin.com/discussion/89286/xamarin-sucks-lessons-learned-from-weeks-wasted) Let me give you a few excerpts from this: &amp;#x200B; &gt;Only God knows why microsoft purchased this absolutely awful piece of software. I actually have never had a worse experience in my life. &amp;#x200B; &gt; STAY AWAY FROM XAMARIN !! USE ANDROID STUDIO INSTEAD! &amp;#x200B; &gt; i accepted this awful destiny of xamarin developer and just waiting for best times (and restaring VS ever 10 min because this \*\*\*\*\*\*\* layout designer crashes in my current project &amp;#x200B; &gt; Instead of writing code and dealing with my own bugs and issues, I had to deal with deployment issues, references issues, many bugs and an awfully slow performence. And all of that for just an app that does pretty much nothing. The product seems unfinished, it lacks polish, and basically its one big mess. &amp;#x200B; &gt; Not worth it at all. Whatever time is gained by writing it once is completely lost trying to configure the IDE or pinning down xamarin specific bugs. I wrote a single application with it, it will be my last. &amp;#x200B; &gt; Scroll through the bug reports, stack overflow, etc: just a web of random errors with voodoo advice on how to get through them. There is no way that the "time savings" of Xamarin nets out over running two code bases in native environments. &amp;#x200B;
awesome website, I really love flamegraphs for perf analysis, dotnet doesn't have much of them available 
AutoMapper can also map expressions and IQueryable with ProjectTo&lt;&gt;() `IQueryable&lt;BusinessObject&gt; BusinessObjects = GetQuery(); // query is not run yet, and it may have Where/Group/Join conditions etc at this point` `IQueryable&lt;SomeDto&gt; DtoQuery = BusinessObjects.ProjectTo&lt;SomeDto&gt;(); // still not queried yet.` `var names = await` [`DtoQuery.Select`](https://DtoQuery.Select)`(x =&gt; new{ x.Name }).ToListAsync(); // will select only the Name column from the database.` Useful for keeping db objects out of other layers but still supporting IQueryable Use LLBLGen (costs money) or some tool (costs time) to manage DTO vs DB mapping and there is no more work left to do.
drawingPictureBox is just the control, if you change the width and height properties of that, it only changes the control's size. You'll probably want to adjust the height and width on the actual picture object. It's not listed in your code, but for example: mypicture.height = y; mypicture.width = x; drawingPictureBox.Image = mypicture;
I'm always astounded by the number of people who try to pretend C# isn't a Java clone. If you know the history, it very obviously is. Sure, it's evolved above and beyond the original - but that doesn't mean it didn't start there.
J++ was an actual thing - the thing that got MS sued by Sun. After that it was replaced with a CLR version, J# - that co-existed with C# for a while. I share this not to be pedantic- just that i find it somewhat humorous that that the last version of J# was "J# 2.0 Second Edition" ... so, kinda... "J++ v2" 2.0 Second Edition. But maybe that's just me...
I'd say it's the differences that are superficial. Java could be C#'s equal if they'd just update the language - it's not the JVM holding the language back.
&gt; Sun/Oracle had Microsoft stop making Java implementations via lawsuits and other legal means. Minor nitpick here - Microsoft was only stopped from making *proprietary* Java implementations that included features not present in the official JVM. Probably another attempt at [Microsoft's infamous business strategy](https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish).
I'm not familiar with all of these projects - but Spring is essentially a patch on top of Java that provides functionality that should be part of the core. Things that C# and ASP.NET already provide. Its existence isn't exactly a point in Java's favor.
&gt; Visual Studio goodies: VS is an excellent IDE. And far better than all java ides (except maybe jetbrains) I agree, and it's even better than IntelliJ, though I never use it without Resharper, so that's not really a criticism of Jetbrains
Please correct me if I am wrong! If you want them to load automatically, cant you just remove the `virtual` keyword? Question: What is the benefit of `virtual` exactly (in EF Core context)? I believe it was that it won't be included in the query unless you use the property in the query. If that is 100% correct, what would `Include()` do? Or is it that, if a navigation property is NOT `virtual`, a `Include()` call is required? If so, what would happen if I used a non-virtual navigation property without calling `Include()`? Would it throw or return null?
I've been back and forth. Sometimes I don't like it, other times I do. I urge you to ask people who casually dismiss it to back up their points. I've worked for years on a Xamarin Forms project that started before XF even released. I've been with it through the worst times. Forms itself has had the roughest go at it. When I did have to dive into Xamarin Native I never had issues. A lot of my worst problems were due to decisions we *had* to make due to very early Xamarin limitations and were never addressed after they weren't needed. It still left a bitter taste in my mouth. ## My Advice Starting with the Xamarin Native libraries is a pretty good way to go. Even for Xamarin Forms, it's very useful to understand how the platforms work. Most of my trials so far have been dealing with very strange Xamarin Forms-specific issues. Any time I delved into Xamarin.iOS or Xamarin.Android I was pleased to find it was generally easy to read the platform documentation and figure out how it mapped to C#. I think it's especially a good approach if you don't really care about being cross-platform. If you've got a handful of Android devices, why not go nuts with Xamarin.Android? If you don't like it, you're just using wrappers around the Android libraries, so it's pretty dang easy to pick up a Java book and figure out how to do it without C#. I think people overstate the difficulty of being a polyglot. The dark corners of either language aren't places most apps require you to go. If you *want* to be cross-platform, I still think the Xamarin Forms approach *might* be worth it. I don't like the idea of having to write 2 copies of the UI. If you don't care about cross-platform, why bother? I think it's valid to say if you want an overly unique UI approach Forms can fall apart. But if you're shooting for "I want UI on the screen that at least fits the OS styling" it's not very hard, especially if you're already used to XAML frameworks. So if it's freely available to you, I say dip your toes in. You'll either like it and keep going, or decide to transfer the API knowledge you've gained over to writing Java apps. 
C# is java but 1000000% better and easier to work with.
&gt; is it normal to feel that the two languages are almost the same? On first glance, yes. The stereotypical "hello world" example in C# and Java will look almost identical, barring the use of CamelCase method in the former. But once you start actually getting into more advanced language features - e.g. LINQ, async/await - then the differences start to become very obvious.
&gt;Xamarin is great. [https://www.youtube.com/watch?v=fMg-g6WoYoo](https://www.youtube.com/watch?v=fMg-g6WoYoo)
Yeah, it is. C# has borrowed many things from java (and then extended or updated them). In the details, I prefer c# over Java because of some features like tuplets (since C#7 I think), abstraction, dynamic data types, etc.
&gt; That’s more of a sign of a bad IDE that shouldn’t be used than a criticism of the language’s structure. Or any text editor - the requirement is relatively asinine - it provides no actual value, only the opportunity for friction. Hence criticism. &gt; Haven’t felt the need to publish to Maven, so I can’t speak to anything on that front. I’ll take your word for it. https://dzone.com/articles/publish-your-artifacts-to-maven-central - it's terrifying, especially vs the svelte https://docs.microsoft.com/en-us/nuget/create-packages/publish-a-package &gt; Spring Boot gets a lot of flak where I think it’s undeserving. It’s a highly opinionated framework that prioritizes next to no manual setup needed. Friction is going to be a symptom of a framework like that. "Spring was so bad so we created spring boot, which is really just spring, but we configured some stuff by default". Compared to things like http4k (as an alternative, jvm hosted web framework) it's full horror. Yet somehow, it's the standard. Hell even directly compared to MVC Core just getting started is a nightmare, and it's probably no more opinionated than "here are some default routes". &gt; Java has had this “ease of access” thing going for quite a while, since .Net was so closed off, but that’s coming to an end. More Java developers just preferred this system than the alternative frictionless, but wild west, frameworks. .NET was never closed off - but it's barrier to entry *was* way steeper ~4 years ago. Windows only (if Mono wasn't your jam), Visual Studio Only (large setup time) - C# was always ECMA specified, the "alt.net" ecosystem (and hilariously silverlight, but that's another story) paved the way for the netcore of today. Java had the perception of being "free" (even though it was owned and corporately sponsored), "open" (even though it was never an open language spec - hence all the legal trouble it's suffered in the last 5 years) and only ever satisfied a myth of portability. OOP and managed languages in general owe a debt of gratitude to the excellent work done on Java - it changed development for a huge amount of people - but the lethargic language development and it's custodians steadfast refusal to adopt commonly accepted features (auto properties! type inferences etc only JUST making their way towards the language) has put it in an awkward place now. The language is now just "fine" when if it had been built upon over the years at a pace that matched it's competition, it'd be in a very different place. How many languages inspire an entire extra language to be written out of frustration (Scala, looking at you) at the pace of development. It's a fascinating study in how to kill a mostly loved language - obviously Java long ago passed the point of never dying, but with recent litigation and ownership issues seeing Google double down to support Kotlin - a language which is basically "Java via C#" - my bet would be on it being eaten up in the next couple of years. The JVM on the other hand will likely live a long and healthy life (Kotlin, Clojure, Android ecosystem etc). Ramble ramble :)
Considering the fact that my game design teacher taught me C# before Java, yes. There are a few big changes in syntax, but otherwise they're pretty much the same.
JavaScript, like PHP, is only as bad the programmer allows it to be.
There actually is a good article on Wikipedia that compares the two: [Comparison of C# and Java](https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java)
Clone might be a little strong, but yeah you're right. 
Not exactly sure what your issue is still? In you ExportJointPos function what is the Astra.Body body you are passing but not using? Might help to post all your code For this: &gt;but would it be possible somehow eliminate the "Words" in the value and only export the "(a, b, c, d)" to the csv? string newString = csvString.Remove("Words"); 
God, I went from c# to Java for a project and none of the interfaces were named with the "I" convention which bothered me more than it should
Or have resharper and press alt+enter a lot
I like Xamarin and I prefer Xamarin.Forms. Currently I'm working on a Native UI app and it has been good for learning. While the learning experience has been great, the app is a data driven app and doesn't benefit from doing the UI twice. If you're starting out, from a .NET background, doing Native UI might be the best way to learn. Xamarin.Forms is cool, but you will need to know platform specific lifecycles sooner rather than later. Native UI first will introduce you to that stuff earlier. While Xamarin is a cool framework, it doesn't allow you to ignore platform specifics completely. I can't see myself working on an app with two Native(Swift &amp; Kotlin/Java) code bases. The duplicate effort would drive me crazy. Why do you want to learn Xamarin and mobile?
Your example `Func(ValX).ToString()` calls may be returning a string with a CR/LF already appended, which would cause the output to have each value on a separate line. Whenever I'm generating csv I typically append each value to a List, then join the list to form the output string for the line: ``` var data = List&lt;string&gt;(); data.append(Func(Val1).ToString()); data.append(Func(Val2).ToString()); data.append(Func(Val3).ToString()); data.append(Func(Val4).ToString()); // etc, etc var output = string.Join("", "", data); writer.WriteLine(output) ``` 
Take a look at (Polly)[https://github.com/App-vNext/Polly]. It's a resiliency library which handles your retries and circuit-breaking for you.
I find it a bit hard to understand in my context, how should I set the policiy? Should I put it inside the handle or dostuff function?
Well, I used .NET Core in college for some projects, and I have worked as a video game developer using Unity. I got a few internships doing WPF development with C#. I just graduated in December and landed a job as a full stack SE and we use .NET and .NET Core for our web services. I really like C# (but not saying its the best language, I like most languages, one of my favorites is assembly haha). I guess what I am getting to is I have existing knowledge in .NET, and want to continue to grow it. I have ideas for fitness/basketball mobile apps, and basically just want to keep making software. It's fun and seems like a challenge. I would be willing to try it for some small entrepreneurial endeavors as well. 
I think I will give it a try for now. If I run into an application that has to be built natively with Swift or Java/Kotlin, I'll jump over into that environment and run with it. Thanks for your input!
The only reason it isn't a clone is thst they removed the worst parts of Java because they had the benefit of hindsight
You might consider a home-brew solution that doesn't use the \`Claim\`. Instead, implement your own table of "application keys". Each key can then have a one -&gt; many relationships with customer-ids. There's many ways to generate an application key, and beyond the scope of this answer - but many public RESTful APIs use this flexible method, in short: * For each of your users, generate an application key, and associate with 1 or more \`CustomerId\`s * Any user that makes a request to your Api (over \`https\`, obviously :) ), provides this key in the HTTP header of every call they make (e.g. \`X-ApplicationKey : JFUIFJF8FJFJHF5FJFJFAKAJ\`) * Each request, check for this key and obtain valid \`CustomerId\`s. * On a successful match, filter your data * On an unsuccessful match, return a \`403\` Unauthorised.
If you do that style, when you use that method and look at the comments of the method it will show up. it's a pain tho since you have to do it in comments with no intellisense.
I tried to do this but nothing happens...: &amp;#x200B; public void Handler() { var policy = Policy .Handle&lt;Exception&gt;() .WaitAndRetry( 5, retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)), (exception, timeSpan, context) =&gt; { Console.WriteLine("Test"); }); var success = policy.Execute(() =&gt; DatabaseSQLLogic1,2,3()); } &amp;#x200B; But 
Sigh... I've been developing in Java and C# for 14 years and I don't know what you mean by non-virtual and reified. This is what happens when you're mostly self-taught, I guess. You end up knowing what things are but not what they're called. :(
They're very, very similar, yes.
The readme is kind of complex, I agree. There's a (repository)[https://github.com/App-vNext/Polly-Samples/] with a bunch of example projects which are a bit easier to follow. A simple example: ``` var policy = Policy.Handle&lt;SqlException&gt;().RetryAsync(3, (exception, attempt) =&gt; { // Make SQL call here }); ```
I like the idea that [M# had: separating recoverable errors and bugs](http://joeduffyblog.com/2016/02/07/the-error-model/). Then doing things like terminating the program on bugs, and enforcing checked exceptions for the recoverable things. So you don't have "... throws XException" in every function in a hierarchy that calls a function that has can't-ever-get-there-unless-everything's-broken exceptions (like exhaustive switch statements with a `default: throw new XException();`)
What do you mean specifically by 'containerizing'? What type of app is it currently? If it's an Asp.Net app, it should be pretty trivial. The 'lift and shift' low-effort experience is one of the main selling points of these cloud services. If it's some sort of compiled .exe that you want to run in a container, that could be more difficult. In either case, putting it in a container may be much easier than figuring out what assumptions were made originally by the developers about the app running on a single server that are not compatible with auto-scaling. If you have a Pluralsight subscription (or start a free trial), there are some decent courses on cloud services for both AWS and Azure.
&gt; var policy = Policy.Handle&lt;SqlException&gt;().RetryAsync(3, (exception, attempt) =&gt; { // Make SQL call here }); var policy = Policy.Handle&lt;SqlException&gt;().Retry(3, (exception, attempt) =&gt; { DoStuff(); }); Does this look okay? Is it compatible with the method in my topic as I described over? :) 
Wow! Windows 15 core kernel written in c# FTW! 
OH GOD IT BURNS Seriously, though, props for figuring this out. But please never use your powers for evil.
Is it possible that you could take my code that I've provided and make an example out of it?
What the others say here + C# uses Static/Early Binding and Java uses Dynamic/Late Binding.
&gt;Java wins at ecosystem and open-source community. This is a myth that was true maybe 10 years ago. The .NET ecosystem and open source community is arguably better. Nuget alone has 150k libraries (1.5 million if you include all the versions) with most of the popular ones being open source. At my company every single external dependency outside a SAML parsing library is open source, including all our persistence and AWS APIs. Hell, even .NET Core itself is completely open source.
[Example of Polly on DotNetFiddle](https://dotnetfiddle.net/uhaPK6)
:)
I don’t think that people who deny it’s a clone are necessarily unaware of history. I think it’s more that people interpret the phrase “C# is a clone of Java” as a statement about the current state of the language, rather than a historical statement about how the language originated. Do we say “is a clone”, or “was a clone”? In other word, it comes down to what the meaning of the word “is” is.
Did you not notice he has a police mug shot for his photo? I think your warning has come a little late ;) &amp;#x200B; OP, change the photo if you like, or don't :) &amp;#x200B; &amp;#x200B;
Whaaaaa-
Hmm, I seem to have done it correctly, but is there a way I can throw an exception so it will retry?
.NET has ASP.NET and Nancy along with open source ports of Lucene so that's not really an argument in favor of C#. Hell even Spark has C# bindings. Not even sure why you brought up Eureka since there are plenty of service discovery services like Consul that are available.
Most of that is either that the server itself runs in Java (which is irrelevant to the API and the client) or have C# ports so it doesn't really matter.
Use StyleCop and treat the warnings as errors. You can fine tune which rules to follow but the default set is a pretty good baseline. I personally turn off the Hungarian naming rules (I don't use Hungarian notation so it's always a false positive).
Use StyleCop and treat the warnings as errors. You can fine tune which rules to follow but the default set is a pretty good baseline. I personally turn off the Hungarian naming rules (I don't use Hungarian notation so it's always a false positive).
_I make public fields_
But...but how?
I didn't put a single word in your mouth. You literally said static methods twice and started bitching about static variables. You do know people abuse static variables in regular methods right? Like more so than static methods?
&gt;If it's an Asp.Net app, it should be pretty trivial. The 'lift and shift' low-effort experience is one of the main selling points of these butt services. If it's some sort of compiled .exe that you want to run in a container, that could be more difficult. about half and half. I think we're gonna be using Docker &gt;If you have a Pluralsight subscription (or start a free trial), there are some decent courses on butt services for both AWS and Azure. I'll look into that &gt;what assumptions were made originally by the developers about the app running on a single server that are not compatible with auto-scaling cool I'll get to do more parallel stuff then :3
I tried typing that but I get the error "Non-invocable member 'List&lt;T&gt;' cannot be used like a method." Any ideas as to why it may be saying this and potential fixes? 
Originally they basically were the same by intention: Microsoft wanted a language of their own similar to Java to reap the benefits of Java's popularity. The more similar the languages are, the easier it would be for MS to steal developers from Java. One of the only major differences between the languages for the first few years was the decision for Java to have default methods on interfaces, where C# instead had extension methods. But now C# is also adding default methods to interfaces, again reducing distance between the two languages. In the beginning Microsoft was playing catch-up with Java until about .NET 3.0 or 3.5 with lambdas where C# started pulling ahead with new features. This corresponds pretty closely to the time when Oracle acquired Sun and didn't put quite so much effort into Java as Microsoft was putting into C#. That situation has gotten a little bit better on the Oracle side, but Microsoft has only been accelerating the pace of C# development in recent months. Personally, I think C# is way ahead at this point, but that's just one opinion and probably not the last word on it (Microsoft sees C# and .NET as a way to get more developers into VisualStudio and, eventually, get them to choose Azure over AWS, hence their strong push to get .NET onto Linux and their continuing to "borrow" language features from JavaScript, Python and Ruby).
What ever happened to the cosmos project? Is that still kicking? 
i recently made a small 2d game where as an experiment i did basically no OOP at all, everything just static functions inside static structs and tons of global state. i dont notice it being any harder to deal with.
Much simpler solution: https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute?view=netframework-4.7.2
``` public IEnumerable&lt;object[]&gt; DataSourceMethod() { return new Object[][]{ {"1", false}, {"23342324", true}, //... } } [DynamicData(nameof(DataSourceMethod), DynamicDataSourceType.Method)] public void TestMethod(int a, object b) { //... } ```
Thanks. After talking with a friend though, I think a HWID is actually more of what I want and I found a good way to do that. 
Yes. `static int mergeFlags(Flag a, Flag b, Filter f) { return (Flag)((a|b)&amp;(f);` is a nightmare! 
using flower boxes
The body is called in the function. Our sponsor is pretty iffy with sharing code so I'm removing the function names. &amp;#x200B; For the second part, I did string name1 = Func(Val1).ToString(); string name2 = name1.Remove("Words"); But I get an error under the "Words" section with the message stating "cannot convert from string to int"
The hacky probably-not-standard way of doing this is to introduce a boolean flag in the user record, then checking that at every call. From what I can recall when I had to take a look at this anything outside of the claims-based scheme will require a call to the database, either in the generation/check of api auth keys or using this method. For context, the issue I was running into was due to a requirement that an MVC site had to be able to "de-auth" an individual user, essentially it had to disallow logins or actions for that user after a certain datetime.
Quick Update: Apprently CSVHelper is now downloaded to my PC (only took uninstalling and reinstalling powershell) so I'm going to try messing around with csvhelper again. Thank you for your help, I would still appreciate answers to my questions below but hopefully csvhelper is easier/better than this mess. 
Doing gods work
You monster!
ah my bad you want to use Replace instead of Remove. &gt; string name2 = name1.Replace("Words", ""); Also, reading the error and function info helps. Remove takes an int param which is obviously not a string
K&amp;R style braces (way less wasted vertical space, even with [Shrink Empty Lines](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.SyntacticLineCompression)) And I start private fields with `_` (i.e. `_camelCase`) which is something of a grey area That's about it though. Deviating strongly from convention just makes it harder for the rest of your team and introduces cognitive overhead when mixing third party or BCL/FCL libraries with your own code. That's actually a major nitpick I have with pretty much all game engines that offer C# support. I can't stand the eschewing of basic standards like `PascalCaseForPublicProperties`.
Yeah. Change the name of your stored procedure to something that doesn't exist. That should throw an sqlexception.
[Maybe this one can help](https://dotnetfiddle.net/ojn6lZ)
CoreRT has a compiler that transforms IL to native code. A Hello World application doesn't really need the OS (EFI has its own way of printing to the console) or the .Net runtime (the application doesn't allocate any memory from the heap and also doesn't use the .Net class library). When you put the two together, it starts to seem feasible.
As an old Delphi developer it felt more like a Delphi clone with some Java thrown in. But I guess Delphi was never that popular that many people noticed.
Any one of those are resume generating events for me. Condolences
Examples of, specifically?
A virtual method is one that can be overridden by a subclass. In Java methods are virtual, unless you add the `final` keyword; in C# methods are non-virtual, unless you add the `virtual` keyword. Reified generics, as far as I understand, means generics that always persist past compile time.
Yea, the blue gadient really screams police mugshot: https://avatars2.githubusercontent.com/u/13110571?s=400&amp;v=4
Why has God forsaken us? Nah man, cool work!
time to port the linux kernel to c#
There was once a discussion here about the same topic where we were talking about whether C# began as a clone of Java or not, and someone linked to a statement by C#'s creator where he claimed it never was. I got downvoted for saying his statement was irrelevant. No one wants to admit their creation was copied from something else - but that's the standard in programming.
Hell yeah, I will try that tomorrow ! Thanks a lot ! 
Would you say sending the count in with the function is a proper way to do this? :) Doesn't polly have a function which would automtically return for example false, if it still fail after max attempt? :) Do you think creating an interface for the policy would be a good idea? Then dependency inject it ?
In order to override a method some extra overhead is needed. C# only adds this if you use the `virtual` keyword in the declaration, so you can only override those methods. You can find more info about the `virtual` keyword and what it's used for in the [C# docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual). As far as I remember Java does not require special syntax in order to allow you to overide a method, so everything is "virtual" by default. I don't know enough about Java though to say if it adds the overhead even if you don't override a particular method. I might be wrong about that though - I never really got into Java beyond the basics... 
Was looking into it a few weeks back.. seems to be. A commit happen on their github 25 days ago.. 
It really depends what you mean by "what I'm learning". If you mean just random tidbits of information like "the command-line for this one tool": To me the most useful thing at my desk is a stack of post-its. If I'm in a hurry but see something worth remembering, it goes on the top one and I stick it to a notebook. When I'm not in a hurry, I figure out what bits need to go in the notebook. The notebook itself is organized in the bullet journal style: the first page or two is a table of contents, and every page after is numbered so I can get an idea what's where. Sometimes the post-its end up on a monitor. I keep a lot of cheat sheet style stuff next to it. For example, my 2nd machine's monitor has a handful of handy IPs posted on it, the command-line arguments a tool I use from time to time wants, and a little bit of a cheat sheet for running docker containers. Sometimes I end up memorizing this stuff after using it a lot, but it's nice to have. I've tried to use mind-mapping tools and OneNote documents for this in the past, but in the end I find the ability to do freeform drawings with a pencil on paper is more valuable than cloud backup most of the time. I'm thinking about an iPad with Pencil or a Surface Pro soon, maybe that'll change my mind. But if you mean like, "programming concepts", here's what's working for me: Make a github profile. When you want to learn some new concept. Figure out a really small project that will use it. How small? Think "an afternoon" small. You just want to show off this one thing working. Make a repo. Make the project. Commit. Now you have something to look at later when you can't figure out how you got it working that one time. That's really the only way to deal with code itself. You have to boil it down to the minimum working project and store a working version somewhere. That way, when and if you try to do it later but it's not working, you have a sane checkpoint to go back to and try again. 
Interesting! I found this interview, excerpted below: https://www.codebrary.com/2018/03/deep-inside-c-sharp-interview-with.html &gt; Hejlsberg: First of all, C# is not a Java clone. In the design of C#, we looked at a lot of languages. We looked at C++, we looked at Java, at Modula 2, C, and we looked at Smalltalk. There are just so many languages that have the same core ideas that we're interested in, such as deep object-orientation, object-simplification, and so on. &gt; One of the key differences between C# and these other languages, particularly Java, is that we tried to stay much closer to C++ in our design. C# borrows most of its operators, keywords, and statements directly from C++. We have also kept a number of language features that Java dropped. Why are there no enums in Java, for example? I mean, what's the rationale for cutting those? Enums are clearly a meaningful concept in C++. We've preserved enums in C# and made them type-safe as well. In C#, enums are not just integers. They're actually strongly typed value types that derive from System.Enum in the .NET base-class library. An enum of type "foo" is not interchangeable with an enum of type "bar" without a cast. I think that's an important difference. We've also preserved operator overloading and type conversions. Our whole structure for name spaces is much closer to C++. If I'm understanding him correctly, he would probably say that C# should be seen as more of a sibling of Java, rather than a clone.
&gt; Would you say sending the count in with the function is a proper way to do this? :) I'm sending the count just as an example to alternate the Exceptions. You could send anything that you want. &gt; Doesn't polly have a function which would automtically return for example false, if it still fail after max attempt? :) If max retries occur, the code still throw an exception. You should surround your code with a try/catch block for that. Look at the results pane. &gt; Do you think creating an interface for the policy would be a good idea? Then dependency inject it ? Don't think so. &amp;#x200B;
&gt;level 7mariohik1 point · 6 minutes agoWould you say sending the count in with the function is a proper way to do this? :)I'm sending the count just as an example to alternate the Exceptions. You could send anything that you want.Doesn't polly have a function which would automtically return for example false, if it still fail after max attempt? :)If max retries occur, the code still throw an exception.You should surround your code with a try/catch block for that.Look at the results pane. &amp;#x200B; Is it possible for you to give me an example of how I can surround my code with a try catch block for that without using the count? :)
I thought I was on /r/FloridaMan for a second
I have grasp of this project, so: This compiles C# into "no OS, run straight" programs. Does that mean that C# could be used with this to make a new OS? Could it run on any processor? Which file made that possible, the small zerosharp.cs or the even smaller build.cmd? &amp;#x200B;
It's literally been years since I've l played with it. Might be time to try it out again and see how far they've come
C was the first language I learned, and I hate the non-C-type languages. I hate Python the most, and not just for syntax.
lol, you know they have a new creative director right? ;p
&gt; Is it possible for you to give me an example of how I can surround my code with a try catch block for that without using the count? :) [Try this](https://dotnetfiddle.net/ojn6lZ)
&gt; Does that mean that C# could be used with this to make a new OS? With a lot of work... Maybe? But not the C# you know and love. It'd be different code, for sure. &gt; Which file made that possible, the small zerosharp.cs or the even smaller build.cmd? Build.cmd, which basically builds upon the shoulders of UEFI. In theory this can work for any platform you are willing to write EFI-bindings for, and which CoreRT and ILC supports. 
That’s a bit gray area. A lot of games are built that way to improve performance. So while thats not c# best practice, it’s not outlandish for a game
The native tools and languages like swift and kotlin are so nice to work with, I suggest going native. Xamarin requires you to build UI for each platform anyway. I would have probably gone with Xamarin if Objective-C and Java were still the languages of choice.
Thanks, it's starting to make sense. A last question is for cases where the function is a Task. For example something like this: https://dotnetfiddle.net/1qJNXP Could you explain me how I handle exception now?
COSMOS is an all C# OS/Kernel for all C# needs and even supports .net core iirc
It would be nice to see examples illustrating KISS principle and how something intuitively done was went terribly wrong and how solid helped there
What is that? Some kind of c# native thing? I can only find a react cosmos and a block chain project 
Worth noting that C# operating systems already exist. See CosmOS for a good open-source community example.
I mean't nuget, but its the same issue anyway when you use anything web/javascript related with C# webservices. npm looks easy at the beginning but gets annoying quickly. &amp;#x200B;
It's on github iirc. Search up 'cosmos os c#' or something in google
[DotNetFiddle - Polly Async](https://dotnetfiddle.net/aYtnOe) [Wiki Polly Retry](https://github.com/App-vNext/Polly/wiki/Retry) :)
Unit tests are a waste of time
&gt; Does that mean that C# could be used with this to make a new OS? Probably not easily. Though [it wouldn't be](https://en.wikipedia.org/wiki/Singularity_(operating_system%29) [the first time](https://en.wikipedia.org/wiki/Cosmos_(operating_system%29) [this has been attempted](https://en.wikipedia.org/wiki/Midori_(operating_system%29). &gt; Could it run on any processor? It could run on any processor that is supported by CoreRT's ILCompiler, whose platform support is [complicated](https://github.com/dotnet/corert/blob/c981667/README.md#platform-support). &gt; Which file made that possible, the small zerosharp.cs or the even smaller build.cmd? Both are necessary. [The core of build.cmd is:](https://github.com/MichalStrehovsky/zerosharp/blob/e5f27e4dd8afc6029e30c57f1258bc6e3fd7c8fe/efi-no-runtime/build.cmd#L24-L26) 1. Use the C# compiler to transform C# to IL. 2. Use CoreRT's ILCompiler to transform IL to native code. 3. Use the Microsoft Linker to produce a bootable EFI application.
Yes, very normal: C# literally started out as Microsoft making their own equivalent to Java after a licensing disagreement. In terms of syntax and most major concepts, then, they're very similar. Some of the biggest differences are around delegates/lambda expressions/methods, and things like Linq - learn linq, it's fantastic. Most of the "under the hood" differences are things you probably don't actually care about: the only ones I really noticed initially were the way C# has single inheritance, and the slightly different approaches to interfaces.
My company built the app “Mount Sinai NY” with it, I am the product manager and a supporting developer on the project. The app we built was meant to meet an unusual set of requirements: a Xamarin shared codebase with a mixture of native UI in iOS and Android, integrated with their existing web-tools via webviews. 
RemindMe! In 5 days 
I will be messaging you on [**2019-03-30 22:31:53 UTC**](http://www.wolframalpha.com/input/?i=2019-03-30 22:31:53 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/b5dvfr/c_hello_world_running_without_os_or_runtime_by/ejdh3lz/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/b5dvfr/c_hello_world_running_without_os_or_runtime_by/ejdh3lz/]%0A%0ARemindMe! In 5 days ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
&gt; Does that mean that C# could be used with this to make a new OS? Could it run on any processor? No. &gt; Which file made that possible, the small zerosharp.cs or the even smaller build.cmd? Really both, but I think what's more relevant to your question is zerosharp.cs &gt; This compiles C# into "no OS, run straight" programs. No. It compiles *this* c# program into something that can work with EFI boot. In zerosharp.cs the bare minimum bits of .Net are stubbed out in a way that can work with the EFI boot and no actual framework. This is not at all a general purpose technique, and you cannot run any old c# code this way, not even close. You can't even instantiate an object on the heap with this.
Thanks alot !!! You have really been helpful, now I understand this a lot more. I guess my problem was that I didn't realize that in order to handle the exception in a task, the sql function also had to be a task!
I mean in a sense like : Heres how to implement WASD movement on a 2d grid and all the necessary methods (GetAxis, Vector3/2, adjust for movespeed variable ...) , Here's how to properly implement animations for said movement (set these conditions in the inspector, ...). Here's how to implement player state and what the uses of such, etc
Not going to cool your motivation for csharp down, but no one is going to download a 1. unknown exe and 2. from a source that is not github. I have never used Consulo, but I guess most of the people on this subreddit use Visual Studio. It's a monster compared to other IDEs and the community version is free.
But I wonder about a thing, in the last example you provided. What is best to do? Because I am calling on a _logger.WriteToDb(); whenever the exception occur. But should I call on this logger on every attempt or only after all attempt? On the last attempt, should the logger _logger.WriteToDb(); be specified in the policy or should I call it inside the try catch for the policy.execute?
Could I for example just leave the try catch, the catch part empty? and do all in the policy?
wat
I'll give that a shot!
And his head is slightly tilted to his right and he seems a little conscious of himself... Total cereal killer.
Oops. = new List&lt;string&gt;();
“JavaSuck”? Really?
&gt;underscore_case for local variables Really? I use single letters if it's something like user, date etc. But underscores are for static functions. I also don't pay attention and make everything public. Unless the code should be used in a library or reused in a different file. Otherwise really only one or two things in the same file is touching it and is written by me
Virtual is literally the name of the C# keyword, so that's a bit like saying you've never heard of "public" or something. But yeah, the reified generics I have never heard of. Usually people say java has type erasure (generic type info is not there at runtime) instead which I guess is what he is referring to.
On the upside... it's already possible to inline the framework into a "self-contained deployment" executable. I wonder if these techniques could be combined to create an EFI that loaded the whole .NET framework? [https://msdn.microsoft.com/en-us/magazine/mt830370.aspx?f=255&amp;MSPPError=-2147217396](https://msdn.microsoft.com/en-us/magazine/mt830370.aspx?f=255&amp;MSPPError=-2147217396) &amp;#x200B; &amp;#x200B; &amp;#x200B;
I only use single letters for lambdas or foreach loops where it’s nice and obvious :)
On the way to build an OS from scratch in c#
How viable is to have some screens with Xamarin Forms and others with native?
Is it just me or does the thumbnail look like a mugshot?
https://stackoverflow.com/questions/9679375/run-an-exe-from-c-sharp-code
Yes, but it's very dangerous.
This is a little vague, and there are many ways to do this, but really it depends on what you're "grading"...is it strictly the output? Is it an exe or a dll? Is there a specific interface(s) they are required to use and inherit from? If they have to conform to a specific interface, you can use reflection to call into the various methods and get the return values. If it's CLI output, there are API's you can use to read the console values. If it's a DLL, your app can load it into its own address space and call whatever methods you're expecting (again it would greatly help if there is a base class or interface you're expecting). I'm not sure what makes this more complicated than Java though...perhaps expand a little on how this would be done in Java, then we can give you the C# semantics that are equivalent?
Why would you have to make that check at every call? You authenticate the user once, mark the use as authorized, then carry on about your business. Making a database call for every time you need to check would be very expensive, especially for just a flag.
From my research, theres no way to de-auth/recalculate/reissue an IdentityToken after authentication, before logoff. If the site/api is supposed to be secure, you need the ability to deny access essentially at will, when certain conditions that vary by use case are met. Doing so based on user roles is ineffective, because there is some form of persistence in the user's cookie, so even if their role is changed in the entity db they will still be able to access the resources. Hence the need to look into the database for a live value. I'd be happy to be proven wrong, but thats what I have come to understand. For reference I'm talking about dotnetcore mvc with efcore/identityframework, latest version
Stage 4 Nintendo neck
Java and C# have a lot of similarities... not surprising since C# was basically designed as a better version of Java. It's the *differences* that are gotchas.
Hmmmm....
Of course it doesn't. `throws` was mandatory because Java has checked exceptions while C# doesn't. Checked exceptions have a bad reputation because developers had a tendency to use them where they shouldn't, even in Java's standard library.
`Throwable` itself isn't all that useful seeing as in Java it's just a parent to `Error` and `Exception` (which is itself a parent to `RuntimeException`)... and as a general rule, `Error` in Java isn't something you can directly handle.
It depends on which part of Spring you're talking about. Spring is itself a huge number of projects: Dependency Injection, MVC framework, REST services, Web Security, etc...
That's a requirement for Maven, not Java itself.
They're fine, stick with it. 
&gt; The .NET ecosystem and open source community is arguably better since it's far more centralized and easy to use with the new csproj format and Nuget. Nuget alone has 150,000 libraries (1.5 million if you include all the versions) with most of the popular ones being open source (when you search packages in Visual Studio the source code link is right in the description of most of them). I take it you've never head of Maven and Maven Central? Maven Central has 272,720 unique libraries (3.5 million if you include all the versions). It's used by most of the major Java build tools... yes, there's more than one.
Actually there was a project (which now is resting in its peaceful coffin) by Microsoft Research called Singularity, trying to make an OS essentially with C#. There were/are some other community attempts of the same goal.
Don't forget the Cosmos project! Although it does kinda have a different approach to things.... 
Exactly! That was what I was trying to tell the OP
I'm being taught by someone who is completely self taught but also my boss, so even if I know something he makes me use is non standard then I still have to use it. Mostly Javascript things but I'm starting to do more c# now.
I'm actually impressed that Nuget is so close to Maven in raw count considering how much more mature Maven is. 
What do C#, jscript, Windows, Internet Explorer, Zune, Azure, Surface, Cortana, Powershell, Microsoft Store, and Bing all have in common? ...Nevermind, I'll let you come to your own conclusion there.
I... don't know if I'd try it. There's some way to use native elements directly in XAML, but superstitiously I'd want to avoid it. Give me a few months and maybe I'll have tried it and have a better opinion ;)
I suspect it's because people got tired of how long Apache takes to add new packages and just set up their own repositories and tell people to use those instead.
Wow, yeah that's my bad there, thanks for correcting. I'll blame google for that one and my bad eyesight.
That picture looks like a mugshot. 
&gt; should I call on this logger on every attempt or only after all attempts / max attempts? This is your decision. I would prefer to write to the log only in the catch block. &amp;#x200B;
&gt; Could I for example just leave the try catch, the catch part empty? and do all in the policy What do you suggest would be the best to do? Of course you can, but I don't think is the best solution. If the catch occurrs, nothing will be done.
I'm not a big fan of Web in general the ecosystem moves too fast and there isn't really a set way to do anything. Angular has helped me a lot to give me the tools I need a prescribed method to do it. The is a big deal with very large projects. 
Exceptions are just `goto`s in the Z-dimension \**taps forehead*\*
&gt; Egyptian style braces I have never understood why people would want to use *anything other* than K&amp;R style braces. Why, really, does the initial brace need to be on its own line? Wastage! Wastage! Leave it at the end of the first line, where it stays nicely out of the way and doesn’t add needless noise to the visual signal.
Are you running short on new lines? If not, why call that wastage? :-) I was using K&amp;R when I first came from C, but I learned that C# style brackets are really clean and help visually to localise blocks and catch logic. Now when I see K&amp;R brackets my brain just tells me “here is a bunch of lines glued together” and I just see nothing at first glance.
Utterly amazing. When you say "bare metal", what libraries are actually available in a UEFI environment? And are you compiling to native to do this?
OOP is just one way to do things. It is not the only way or the "right" way. It could also be the "wrong" way for any number of cases. (Also it has been misunderstood, misused and convoluted over the years to eg. sell books and consultation) Global state? Not a fan, but I can sort of see where a small enough project could get away with it.
In my opinion C# is the best language around. It is way ahead of Java simply because it has delegates. With delegates you can do crazy stuff. I was able to make a library with generic path finding, generic recursive data structures, and generic mathematics. https://github.com/ZacharyPatten/Towel My library is usable inside of ML and ASP projects. And with the newer "local function" feature, functional programming got a lot cleaner in C#. C# isn't going away anytime soon. :) And with .Net Core, it is probably the best time ever to know C#.
Delegates... Delegates make C# miles ahead of java. With delegates you can do crazy stuff. I was able to make a library with generic path finding, generic recursive data structures, and generic mathematics thanks to delegates being a thing. Until Java adds delegates... Java sucks in my book. https://github.com/ZacharyPatten/Towel
Writing good commit messages
As bad as enterprise fizz buzz 
Thank you. I will leave my issues as soon as possible. I'm out of my hometown right now but once I come back I will leave them here, if you don't mind. &amp;#x200B; Once again, thank you for your effort on trying to give me a hand! You're amazing!
I have a new hero.
I am more interested in having complete screens be different in the same app not about mixing it on the same screen (except maybe a manu?)
You could write a web server in AVR8 assembly if you really wanted to, tools aren't the problem. Access to a community, documentation, educational resources, training opportunities are a lot more important and the .NET ecosystem is pretty solid in that aspect. If you are just starting out, you have nothing to compare it to and no perspective so it really doesn't matter. Play with it and get comfortable with it. Then pick up other technologies. Compare them and link ideas and keep on learning for the rest of your career.
What did you specifically have to tell VS about handling the Content file?
As the c$# is running without an os or runtime (and is compiled to native), how does the performance compare to standard c# on windows 10? 
Gists are great for this. I use Cacher and Boostnote for things that are more text-heavy.
I use classes instead of keywords to use static methods: String.Compare(..) Int32.TryParse(..) etc.
I wish I could. I can't put this down. Great read!
Only one user can use your system?
Nope, a lot of user could. My CurrentUser object must store information per user. 
Then it obviously cannot be static. Are doing something not asp.net? Or there is some other reason why you cannot use User property?