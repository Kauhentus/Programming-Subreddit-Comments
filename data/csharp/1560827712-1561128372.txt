WebAssembly has successfully caught everyone's attention and is gradually becoming a standard, silently. It will take some time to reach that degree when it will be capable of doing 100% front-end. Stack Overflow Developer Survey 2019 shows that [WebAssembly is the 5th most loved and 9th most wanted technology](https://insights.stackoverflow.com/survey/2019/#technology-_-most-loved-dreaded-and-wanted-languages). It's a solid evidence that developer community is eagerly waiting for it to become the standard. Relevant researches are ongoing. Give it some time, it'll surely challenge the front-end monopoly. &gt; What's that about putting C# into HTML? That's Blazor! Not only C#; C, C++, Rust, Go, TypeScript, Swift, Kotlin, PHP, Java, Python, Ruby almost [all established languages are following this trend](https://github.com/appcypher/awesome-wasm-langs). As a language, I prefer C# to JavaScript. Many people prefer JavaScript to others, and that's cool too. WebAssembly wouldn't just let you write the client-side in your favorite language; it would bring the opportunity to share codes between front-end and back-end, get rid of context-switching, write performant code, increase maintainability and developer productivity. WebAssembly won't hurt the front-end, rather [it would bring a lot of things](https://words.steveklabnik.com/webassembly-is-more-than-just-the-web) that front-end was missing.
How are you using .net 5? ... isn’t that the version after .net core 3 (which isn’t released yet)?
I’m not really on the Blazor hype train yet. I think it’s promising but I’d bet on what works now. For good UX, the SPA JavaScript frameworks are winning right now. The industry kind of moved away from server side generated pages. Blazor could change things, but honestly by the time it’s stable, it’s probably not worth changing. I’d stick with what’s hot now if it’s customer facing.
IMHO 1. [https://**rosettacode**.org](https://rosettacode.org) \- find here some classical solutions in C# (you can compare them with other, better known languages for you) 2. [https://www.w3resource.com/csharp-exercises/](https://www.w3resource.com/csharp-exercises/) 3. [http://www.programmr.com/exercises?lang=csharp](http://www.programmr.com/exercises?lang=csharp) 4. [https://exercism.io/tracks/csharp/exercises](https://exercism.io/tracks/csharp/exercises) 5. Check this list: [https://programmingzen.com/15-sites-for-programming-exercises/](https://programmingzen.com/15-sites-for-programming-exercises/) 6. [https://www.codewars.com/?language=csharp](https://www.codewars.com/?language=csharp) &amp;#x200B; Sure, you can find a lot of tutorials and books in the Web about C#, .DOTNET, including Microsoft site where you can download all documentation about .NET as one big PDF
Apart from FixedArray, which is not completed, the rest of the library should only have compile-time and maybe a bit of startup-time overhead.
There is a samples folder.
The big problem I see here is that C# does not support type name aliases. You'd have to redefine meters everywhere. Another thing is that though you can't really do arithmetic on my version of numerals. E.g. you can't really express Twice&lt;T&gt; for arbitrary T
at the moment we are .net 2.2 but we just consider it .net 5 at this point.
How are you guys feeling about VueJs/NUXT we went Angular because our application is gigantic with many sub features that are whole seperate applications. Does it scale well and not require a lot of bolt on parts with NUXT?
Removed: Rule 4. There are learning resources in the sidebar, and you can check out /r/learnprogramming and /r/learncsharp. Check out the "C# Fundamentals: Development for Absolute Beginners" video series in the sidebar too.
Sir, I am not trying to learn C# itself but trying to make a program that requires C# programming language hence I need help from someone who knows the language.
I made a blackjack game for the console. It's a little fun, it gets you used to parsing strings which will be important, it has set rules that don't require any AI, and it won't involve any third-party libraries that you will have to learn.
If you're looking to hire someone, that would be in violation of Rule 1. But in that case, you can post the position in our [monthly "Job Fair thread](http://reddit.com/r/csharp/comments/c160ll/c_job_fair_june_2019/), or you can check out /r/forhire.
No worries sir, not hiring anyone. This is just a task given to me by my supervisor and am hoping to get tips and guide from someone in order to complete or atleast know the know-how.
Looks good. Have you considered DI to clean up the ViewModel business logic? Would also make it easier to test and port to web.
What's a bachup?
Chill. You will be fine. Industrial Apps don't have to deal with the kind of end user that a customer facing app would. You will make mistakes, you will learn and it will be all fine
I looked at various solutions of rosettacode. Definitely **not** best practice. Most of the time not even good.
Also, avoid using `ArrayList`. There is nearly no reason to use it anymore. Use `List&lt;T&gt;` instead.
I gave other sites, more relevant. Rosettacode for me is a place where I can get idea about some new language for me: how it is looking, to compare it with other languages: which solution looks shorter, more readable. Only this. Sure, you are right
I didn't bother looking at the other suggestions, after the first one was already pretty crappy.
Not really. Competitive programming exists.
I love working with Vue and Nuxt just takes it to the next level by adding server side rendering and enforcing some design standards. For gigantic applications (that I assume don’t need SSR), I probably wouldn’t use Nuxt, but I would use Vue. You would just split it up into modules like you would with angular. For people that ask about Vue, I always tell them it’s what Angular 2 should have been. State management with Vuex is a breeze and you’re not going to get stuck in “observable hell”.
Hi please visit /r/redditfordesktop or contact u/redditfordesktop. The main part of this program is not just a shitty version of a browser, it is the additional modules, develoepd using PRAW. For instance, you can now get windows push notification when someone sends you a message. This is just the tip of the iceberg, there are many more possibilities.
You're out of your depth. But you'll learn to swim. I'm sure your new employers are aware of your skillset and they either hired you to train you, or made a terrible mistake Either way you're getting paied and will learn with time. Don't stress dude
You're not building the next Netflix.
Hi please visit /r/redditfordesktop or contact u/redditfordesktop. But to answer ur question in a nutshell, this is not simply just a browser. It also has many additional modules such as native notification etc, which chrome doesn't have. In fact, custom modules is the main part of the program.
OK, I removed it
Wow! Thank you very much! What I meant by "redraw the grid" was basically using the Paint method. The issue is now that it takes a very long time to go through and draw each rectangle on Paint so when the control is invalidated, or simply comes back into view from being off-screen you can actually see it redrawing the grid line-by-line. I've scrapped that whole part (the whole control), and have started again as my attempts at speeding it up was starting to get really messy and quite confusing.
I am not really familiar with Electron (or Online programming language in general). I will have to look into that.
Chrome (all major browsers, infact) definitely have push notification support and Reddit supports it.
[https://hackernoon.com/is-c-7-starting-to-look-like-a-functional-language-d4326b427aaa](https://hackernoon.com/is-c-7-starting-to-look-like-a-functional-language-d4326b427aaa) &amp;#x200B; Or even better, learn a functional language like elixir and apply what you learned in c#
Is there something wrong with learning new things?
I know you mention specifics such as utilizing Visual Studio. However, you don't mention whether your data is located on premise or in the cloud. What I do for all of my cloud clients is develop reports using Power BI. If you're data is located on premise, you'll need the Power BI Gateway (license required) to move the data from on premise to [app.powerbi.com](https://app.powerbi.com). In my situation, I work extensively with Cloud data (SharePoint \[O365\] &amp; Azure). &amp;#x200B; At a high level, you build datasets behind the scenes that you'll utilize in the front-end of Power BI. On the front-end, you have a canvas that you build utilizing various widgets that are fairly simple to use. The widgets available in Power BI meet all of the criteria you're asking about and each one has the ability to be exported individually. For deployment of reports, they get published to [app.powerbi.com](https://app.powerbi.com) and you then need to create an embed code. You could see if you can take the embed code and put that into your application. &amp;#x200B; I did find [this](https://docs.microsoft.com/en-us/power-bi/sample-datasets) site that has sample reports for you to play with. If I was to utilize tools such as SSRS or Tableau I'd have to have a server to host them from, which isn't ideal. I prefer to keep my reports separate from my application since the needs of both can change over time. If you're looking to get into Power BI, you can leverage the Power BI Desktop app - it's free. That aside, there's other options on the client side too. If you're application uses APIs that expose the necessary data, you could use [datatables.net](https://datatables.net) or d3.js for charts. &amp;#x200B; |Pro|Con| |:-|:-| |Slick looking reports|Single file report system| |Cost|Everything is 'step' based| ||Defining relationships in tables can get very tedious(!)| &amp;#x200B; Hope this helps!
8.1 and 7 don't support UWP...
Personally I would opt for dedicated update models. It's more code to write, but so much easier to reason about and to debug. No magic involved.
Would You care to elaborate on what DI is?
[Dependency injection](https://en.wikipedia.org/wiki/Dependency_injection)
Pretty nice! I don't know what experience you have with WPF, but it's quite clean and well built. A few axis of amelioration, if you'll take them, if not dismiss this comment: 1. Localization: I see all the texts are hardcoded in the XAML, there are solutions to use external resource files to retrieve them, and subsequently select the correct contextual translation. 2. Services and IoC: Right now, all your work is done in the ViewModels. That's fine for short programs, but if you want to ease the maintainability, you want to add a "layer" on top of MVVM, the Service Layer. Basically, it's classes you inject in your VMs, and they do all the heavy lifting, keeping your VMs as clean and simple as possible. 3. NotifyPropertyChanged()? [No one likes that! :p](https://stackoverflow.com/questions/3347309/inotifypropertychanged-and-auto-properties) 4. Some quacks here and there but nothing too bad ([Line 267](https://github.com/ChrisStayte/Bachup/blob/master/Bachup/ViewModel/BachupItemViewModel.cs), why the Format?) 5. If you can, use [string interpolations](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated) instead of string.Format, it's way easier to read! 6. In [Settings](https://github.com/ChrisStayte/Bachup/blob/master/Bachup/ViewModel/SettingsViewModel.cs), there must be a way to simplify the process instead of having a property for each color. What if tomorrow I want to be able to use any color as my theme, from its hexadecimal code? Also, if you want to keep on going with WPF/MVVM/XAML, I recommend the [Catel framework](https://github.com/Catel/Catel). It's huge and intimidating, so don't go with it if you're not committed, but know that if you do, you will find (almost) every tool you'll ever need for WPF (also supports UWP, and Xamarin for mobile applications).
Is your pay based on function length or something?
yes i have several functions which are called in this code.
Then it's breaking Rule 4. There are a plethora of tutorials and learning resources that go through using the default GUI controls. Dive in.
Thank you very much
I'd really like to see your code. It sounds like you're making some big mistakes. A grid this small shouldn't take *that* long to render, so let someone else see and tell you what's up! For example: I know what "cannot create handle" means. Your application is only allowed to create about 65,000 controls. If you're exceeding it, that tells me you *literally* create new PictureBoxes and you aren't disposing the old ones. That's like buying a new car every day instead of driving the one that already exists. You'll learn more from what you're doing wrong than from seeing me do it right. I want to see code. Don't cheat and hide some of it and say "oh it's helper methods". Experts get to do that when their helper methods are right. If your code is slow, it's wrong, so we need to see all of it.
Never used Invoice.Read() method. However, it looks like problem is that your program doesn't refresh CurrentRecord counter after first loop. So, if you have more than 20 records (RecordsPerPage) in your Database - program goes into infinite loop, cause CurrentRecord always equal to RecordsPerPage.
Am I crazy or are you missing a few {}? Also you should format your code so it looks readable by using the code block functionality: if(this){ Do.this(); } Nonetheless put a break point on the while statement and run through it to track both variables that are being compared. Sounds like you are getting stuck in the while loop.
When searching for neighbors, calculate the distance that neighbor is from the start point. If it's too far then don't add it to the queue
Do your tiles have `x, y` coordinates in the form of a `Point`, `Vector2`, or some other type representing Cartesian coordinates? At any rate your solution will most definitely require a recursive method and the *depth* of the search will be tied to your unit's speed. I'll comment later when I've refreshed my understanding of A* pathfinding -- been a couple years since I've implemented it.
If you do not have to care about validation permissions like user cannot edit some property or overall data correctness (category with given id actually do exist) you can even use reflection to overwrite model from json
Sure, I love when VoIP + chat with images app uses like 50 times more resources than other apps did 10 years ago tho.
There are 256 pictureboxes on the form - this is so that users can click the box, change the colour, change the opacity etc...plus a few buttons. Initially, I had a control that I would pass the coordinates to, only the coloured ones, and then I would create a small 'version' of what they had created using the Paint method and rectangles. That was the slow part. Now, I create a bitmap and send that through a property instead, in turn the control creates a picturebox to house the bitmap. That's much faster. It's basically a "frame selector" control. public Bitmap frame { get { return bitMap; } set { if (value != null) { if (!firstBitmap) { var newBMP = value; var pic = new PictureBox(); var picsCount = 0; foreach (Control c in this.Controls) { if (c.GetType() == typeof(PictureBox)) { picsCount++; } } picsCount++; pic.Top = picsCount * 23; pic.Left = 10; pic.Width = 64; pic.Height = 21; pic.Image = newBMP; pic.SizeMode = PictureBoxSizeMode.StretchImage; pic.Click += HandleClick; pic.Name = "frame_" + picsCount; this.Controls.Add(pic); var lbl = new Label(); lbl.Text = picsCount.ToString(); lbl.Top = picsCount * 23; lbl.Name = "label_" + picsCount; lbl.Left = 80; this.Controls.Add(lbl); } else { firstBitmap = false; } } } }
Oh man, I **completely** forgot about the movement cost! I am very new to pathfinding so I'm still wrapping my head around it all. I just grabbed the hCost between the two tiles, and set it to add the tile if the hCost is &lt; unit speed * 10, and now it works great. Thanks so much!
I don't think your problem isn't entirely in this method. How is it being called? Here is one potential problem though: if ([rdrInvoice.Read](https://rdrInvoice.Read)()) { StopReading = true; break; } should be this (notice the "!"): if (![rdrInvoice.Read](https://rdrInvoice.Read)()) { StopReading = true; break; } Or better yet, change your while loop to this: while ([rdrInvoice.Read](https://rdrInvoice.Read)() &amp;&amp; CurrentRecord &lt; RecordsPerPage) Then get rid of both of the if statement I just mentioned altogether and the initial [rdrInvoice.Read](https://rdrInvoice.Read)(). This probably won't fix your entire problem, but it's hard to say without seeing the rest of this class. As a side note, It would be easier to read and troubleshoot if you broke this long method into smaller methods, and separated your database query logic from your display logic.
You could check out this site for inspiration. [https://www.redblobgames.com/](https://www.redblobgames.com/)
Posting animated gif was genius idea.
Please share. I would love to see it :)
A play of words : )
Thanks haha. I thought it would make it easier for people to see functionality quickly.
Nice. We need more simple stuff like this to show everyone how easy and familiar WPF can be. I particularly liked how you stayed away from the XAML entirely. I actually agree with the code-behind approach here; I think the XAML window in addition to all the talk about MVVM and data bindings scares beginners away so they stick with Winforms which is unfortunate. MVVM is a whole different topic that shouldn't really be mentioned to beginners until they understand what events and event handlers are, how the main thread interacts with the code-behind and what happens when you mess up. Once that foundation is in place it's time to introduce data contexts, data bindings and how much easier it makes everything. Maybe they'll appreciate it more. &amp;#x200B; To people starting out: reading too much about design patterns and "the correct way" to do things just leads to analysis paralysis. Just write some code, get it to do what you want it to and stop worrying about writing elegant code.
It makes sense because it is a counterpart to 'break'... break means "Break this loop" and continue mean "Continue this loop" it is refering to the loop no the block of code that the loop executes.
So is this saying F1(N&lt;T&gt; nt) { If not null return F2(nt.Value) } F2(T t) .. Now you just say F2(nt) since it knows nt cannot be null?
Hell yeah still go to the interview. There is a chance you know more than you think you do, plus, even if you don't, it will give you experience for the next interview if that one goes south. Go ahead and start reading "C# in a Nutshell", or "C# in Depth" and that will fill in some gaps. Also, go through the Pluralsight path for C# to get practical experience. &amp;#x200B; Getting in the door as a recent graduate is a crap ton easier than not having a degree. If you can show that you are even remotely competent they will teach you what you need to know. No one walks in the door to their first programming job knowing everything they need to.
That's the impression I'm getting. But what if you have this? F2(T n) //a F2(N&lt;T&gt; n) //b That's not possible for reference types, but for value types I would assume that it would call overload (b) unless you use `.Value`;
The recruiter told me the interview is going to last approximately 2 hours and that there will be an aptitude test. I'm honestly afraid they're going to make me create a program from scratch which is completely impossible because I haven't memorized anything and has only started learning it properly recently. Which is why I'm having doubts about attending
Completely agree with the poster above. You have nothing to lose...you may even get the job! If you don't, then hey ho...you wasted a few hours, but still learned about how some companies conduct interviews. I thought the same about my driving test (was 11 days after my birthday), I nearly cancelled it...thankfully I was talked into taking it anyway...and then passed. You never know...!
I'm thinking of taking [this course](https://www.udemy.com/the-complete-walkthrough-of-microsoft-azure-services/) right now. Do you think that'd be a useful way to spend time according to what I'll meet? It seems like it have some if the buzz words mentioned around.
Perfectly normal to feel that way. This is something new and you can only learn by doing. Even if you bomb this one, you will learn what information you need in the future. One thing working in your favor during an interview for a Jr position is that everyone else is in the same boat as you. All of the programming degrees teach in relatively the same way. Your opponents for the job have only programmed projects similar to what you have. Give yourself some credit though. You just went through all of that math and survived, so obviously there is a brain inside your head and you have a chance. ;)
First, is Sterling platform running ? Second, run Visual Studio as administrator that should solve the issue
You won't know if you can do it until you try, and throughout your career "trying" when you don't feel confident is going to pay dividends. &amp;#x200B; Try, then come back here after and tell us how it went, good or bad, and perhaps we can chuck in some post game analysis that will help next time, or help others going through the same thing.
What a totally cool site. I thought it looked interesting and then realised the examples were interactive :D
The best part about being a junior is that it's accepted to suck ass at coding. Aslong as you show you have the motivation and hunger to learn and improve. The best coders are not the ones that "know" everything, it's those that can learn anything quickly. (Not always but you get the point)
Yes, interview it's always a good experience
Removed: Rule 3, Rule 4. /r/learnprogramming has an [excellent FAQ](https://www.reddit.com/r/learnprogramming/wiki/faq) that you can leverage. More specifically to your question: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F
Reactive! Firestore, RxDb, CosmoDB with Event Grid, or any other data persistence solution where an event is generated immediately when the data is mutated. These mutations are then processed in a .net core server side Blazor web app using reactive handlers introduced in .net 2.0 triggering a real-time update to the UI. Firestore is nice because it has caching built in and can be invoked directly within the UI.
Removed: Rule 4. Please indent your code and post valid C#. Also, try to remove irrelevant portions of code (such as the SQL query).
You're correct that I got hired because of my ability to solve problems so I'm not super concerned about that part but I just want to be as good prepared as possible before I start the first of August.
I have started reading this [https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/52ca85ebe4b04a45ef2c9c97/1389004267685/Rob+Miles+CSharp+Yellow+Book+2014.pdf](https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/52ca85ebe4b04a45ef2c9c97/1389004267685/Rob+Miles+CSharp+Yellow+Book+2014.pdf) and this [https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf](https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf) &amp;#x200B; Should I stop and move on to your recommendations which are the c# in nutshell or c# in depth or should I stick to what I'm currently reading
I've worked with several people who started right out of college and stated up-front, "I dont' know C# or how to code that well." They landed the job as a C# developer not because of what they knew but because they proved their personality is what the manager was looking for and could demonstrate a basic understanding of being able to learn new concepts. It's not a bad thing to answer a question as "I don't know but would love to learn it." One lady in particular had never used a CMD prompt, never used git, had a hard time writing a database call on her own, and needed hand holding for several months. Now, a couple years later, she's a stellar developer who would make any company extremely proud to have her.
Since you already have programming experience, I would probably go with C# in a Nutshell. It will cover that stuff too, plus give you a view of the grander scope of .Net.
It's for a junior position, and your CV shows that you don't have experience in this area - and they still invited you for the interview. They're not expecting someone seasoned in c#. They're hoping you'll be smart and able to pick up the tool set. The aptitude testing will be around analysis and problem solving skills. If it gets into c# specific knowledge that you don't have, say so, and verbally walk through the problem. I've also found interviewers respond positively when I turn around an "I don't know" response into a "How does it work". It shows curiosity and interest in continuing improvement. Good luck, and don't forget to iron your shirt.
You should post your code. Use ToUpper or ToLower on the input so you know the case. Then use a switch statement to handle the color values.
You're better off avoiding ToLower/ToUpper. This is a decent reference for beginners - https://www.codeproject.com/Articles/446230/A-Beginners-Tutorial-on-String-Comparison-in-Cshar
You should attend the interview. The very worst thing that can happen is you get a few examples of what kind of questions will happen in your next interview.
You would use .Equals("Red", StringComparison.InvariantCultureIgnoreCase) - this will ignore case when checking for equality. Docs can be found [here](https://docs.microsoft.com/en-us/dotnet/api/system.string.equals?view=netframework-4.8#System_String_Equals_System_String_System_StringComparison_)
Use ToUpper() or ToLower() to convert the user input and then perform the comparison.
MVC 5 has been out for a very long time, so the return on investment for updating the templates is not extremely high. Many projects still use Bootstrap; however, with React and Vue becoming more popular, other UI frameworks have been gaining popular as well. Docs are still available for BootStrap 3.X if you desire.
String.Compare(Str1,Str2,true)==0
Would this work: &amp;#x200B; if (colour.ToLower() == "Red") { int quant; quant = Convert.ToInt16(quantity); int totalred; totalred = 40 \* quant; Console.WriteLine("Thankyou for your oder"); Console.WriteLine("Your total is: £" + totalred); Console.ReadKey(); }
Interviewing is a skill like anything else, it takes time and practice to really feel comfortable with it. Definitely go, the experience will be valuable if nothing else. If you get an offer, great! If not, you will at minimum have some specific areas to focus on improving and will be less nervous in following interviews. Good luck!!
Thank you, have used this method
If you use ToLower(), you’d have to compare the input to a lower case string like “red”. Comparing it to “Red” will never return true. Otherwise, yes.
If I have any advise, it's remember there's more to a job than the actual code. It seems like you're trying a bit too hard, it's just as important to relax and be a member of the team that everyone can easily communicate with and depend on. Make time for socials and learn everyone's name.
Thanks :) I have incorporated it :)
MVC 5 is old and something like this probably hasn't been updated in a while.
Thank you for your help
WPF is relatively easy to use for creating a GUI. Yes I don't think there is a cross platform GUI you can use right now with C#. WPF and Winforms are being added to .NET Core 3, but will be Windows-only. If you already have C# experience, you may be able to go pretty far with just reading a 'Hello world' type thing for WPF, for example: [https://www.tutorialspoint.com/wpf/wpf\_hello\_world.htm](https://www.tutorialspoint.com/wpf/wpf_hello_world.htm)
They actually weighed that pretty high aswell. I have travelled alone three months in south east asia and I also travel alone to Lissabon, just to study this, chess and meet new people in 8 days. That seemed to kinda impress them. I'm always very social.
Yes sir I've tried all of that and have tried it again to maintain an open mind. Do you have experience working with Sterling?
[Avalonia](https://github.com/AvaloniaUI/Avalonia) is the usual response I've seen for when people start trying to add a GUI to a .NET Core app.
&gt; To people starting out: reading too much about design patterns and "the correct way" to do things just leads to analysis paralysis. Just write some code, get it to do what you want it to and stop worrying about writing elegant code. I think this is the best advice for beginners. I know a lot of my friends got into programming and felt they had to really be comfortable with html/css/javascript, node, etc. before they were ready to start working on their first website and it's so intimidating that they often aren't willing to just start writing some html immediately and then going from there.
So it's interesting, I downloaded the extension for that but the two template choices it gives me only compile under .NET Framework. The tutorial states it's a .NET Core app but I don't see that option?
Go to the interview, going to them are good experience regardless if you get the job. Just be up front that you haven't used C# or asp.net, but like some of the other commenters have said read some books and maybe do some of the pluralsight course beforehand. Having a first class degree shows that you're willing and able to learn which, if the interviewer knows their stuff, will take as a very good thing. You're already a step ahead of others going for junior roles being able to admit you don't know much about the language or framework. When I went for one a few years ago I'd have laughed at Ygritte saying I know nothing. Seven years later I realise how much I didn't know and how much I have to still learn, quite embarrassing really. Like I said first, go to the interview and use it as a learning experience. Being able to give a good interview is a life skill that will stand you in good stead regardless of your career path
Don't worry too much. A lot of interviewers (myself included) try to ask many questions starting easy and ending very technical, these aren't meant to discard you as a candidate but rather gauge what your 'breaking point' is. Just don't try to bullshit your way through an answer, they'll pick up on it pretty fast. Be confident, and sincere, nothing wrong with saying, "I don't think I know about xyz, do you think we have time for a quick explanation?", if they want to move on just make a note for later, this shows enthusiasm and willingness to learn.
&gt; 1st class degree what does this mean? what country are you from? sounds like you are in a good spot for a jr dev job with those projects. as long as they werent copy pasted and had your hand held the entire way.
&gt; vanilla C# lol
haha. I'm not an export so not sure what to call it
I haven't used it myself, so I can't be of much help. Take a look [here](http://avaloniaui.net/docs/quickstart/change-target-framework) if you haven't already.
Yes, definitely go to the interview. Worst-case scenario, you get some interview experience - Best-case, you get the job. It will, at the end of the day, depend about how you present yourself and how you stack up against the over candidates. As /u/hejteam points out - when we interview Junior's we're not expecting the world. What will count \*more\* is your attitude and fit to the team. So ensure that you're enthusiastic, able to take about your love for the language and responsibility, and your eagerness to learn. &amp;#x200B; At my place, we've hired lesser-skilled people over more technical people for this reason alone, and they've thrived. &amp;#x200B; Besting the "tech score" is not a 100% metric.
I think you can use change the target framework in the .csproject. That's normally what I do.
It depends on what kind of graphics your game is using. There are a few cross platform gui frameworks like GTK#, Eto.Forms (that actually uses GTK# on some platforms) and Avalonia. And if your game is more graphics heavy then you could check out Monogame or even Unity. I am not sure which of these support .net core yet, but I believe most do.
Because MVC 5 is ancient in programming terms.
A number of the packages accompanying the MVC5 template are out of date. Simply upgrade them via Nuget.
I'm always surprised when I hear people recommending WinForms to new programmers. WPF is easier and has wider support. But there are so many people who learned WinForms in college and never bothered to learn WPF that they just believe WinForms must be the easier option.
Just C# is fine
I just wanted to offer my 2 cents here, because I had your exact thoughts about 6-7 months ago - However, I am not even done with my CS degree and still got a part-time junior position, where I've been 2-3 days a week since January. I applied - almost as a joke - to the position thinking that I'd at least want to see if I'd get an interview. I got an interview. Then I thought, great! This is going to give me an idea on how to prepare for a job after I finish my degree. Then I got called back, and was told I got the position. Every step of the way I almost stopped, because I didn't think I knew enough to apply for it - And it turned out I did..! So do it. For the love of God, just do it :)
Handle it as close to the source as possible, and try to save it for exceptional circumstances. None of your examples should throw exceptions, they should be handled through validation that you add to catch them before an exception is thrown. Regardless, you want to catch exceptions as close to the source as possible. Catching it too high up can result in you losing the exception if another is thrown higher up the chain.
What is your termination condition for the Algorithm? Just curious as pathfinding is my research area.
Don't be afraid to admit what you don't know. Twice in my career I have gotten jobs working in languages I told them upfront I didn't know. Most recent was my current job, which is in C#. They key was that I was aware of what I didn't know, I could demonstrate I had the aptitude to do the job, and learning the language would just take a little time.
You could probably rip through C# the Player's guide in a weekend and that would get you up to snuff! &amp;#x200B; Also just look up some basic C# interview questions. Do a short C# Udemy course, on [ASP.NET](https://ASP.NET). Also, the Little [ASP.NET](https://ASP.NET) Core Book prepared me well for my interview!
I had the opportunity to hire three junior developers in c# roles. All I asked outside of logic building questions was, if they'd written any code in any language, they bring it in and be prepared to discuss it. What did the code do? What resources did they use to help them along? Why did they make certain decisions along the way? What were the pitfalls? How did they debug problems? How might they handle adding tension new feature? Seeing the code now, would they handle anything differently now? These questions were just to find out how they think and how resourceful they are. No "how many piano tuners are there in Chicago" questions, or "what are three key differences between a class and a struct." And nothing C# specific.
I maybe missing something, but it feels like you're overthinking it Once you "await" on your Tasks, exceptions will pop just like in sync flows. No special handling required. Just you usual try, catch, finally.
The most important question they will ask, and the one you *must* answer well. *What are you currently studying to improve?* If you cannot answer this, or they base their interview on anything but this + personally, then I wouldn't bother with working for them. The interview process is ALWAYS a great learning experience in itself. Write down the questions they ask, study them, do better next interview.
I checked your code a little bit and it looks like it has been written by senior consultant who has been in business since 1995. Focus on dotnet core, identity, entity and concurrency to be safe in the future... Good luck..
Go to the interview. I had someone who didnt know c# in, gave him a tech test he couldnt do it. Googled the answers and still couldnt get it working. Mentioned this all to hr and he got the job because he was a good fit. Sometimes it doesnt matter if you have the skills more if you have the willingness to learn them.
yikes, its not mid 2000s anymore
Thanks. i will keep that in mind for the future.
What you've worked on sounds like many CRUD apps out there. Create - create a lead in a sales platform, create a conversation note on a sales lead etc Read - view the lead data when making contact to try convert. Update - update the leads contact details Delete - remove a note from a lead you incorrectly typed. Having a basic understanding of CRUD opens up a whole world of software development opportunities. Use the knowledge you already have and read more, write more code, learn more. As you mentioned a first class degree I assume your from UK (don't know if other countries have the same degree system). If you got a first your a clever person so you'll do fine. Think of a cool project to work on and learn learn learn. You'll get there.
Without casting aspertions, how on earth can you get a CompSci 1st by "following notes and modifying existing codes provided by the teacher"?
Maybe super lucky or they're playing down their ability.
I am new to C# and learning it. Tim Corey is a great source on YouTube. Also the Guru88 course on his website. I use visual studio.
1. Visual studio is the gold standard. You can get the community edition for free and will have everything you need and more. There is also Rider by JetBrains which has been making some headway recently. Some consider it better than Visual Studio, I don't and would really recommend visual studio to get started with. 2. A boom like you've described I'm not aware of in C#. C# is a scripting language and has a bit ceremony to get started and so what tend to build tends to be a bit 'meatier'. It really depends on your level of understanding when it comes to programming concepts and oop concepts. The sidebar of this sub Reddit and /r/learncsharp are a good place to start for book recommendations 3. If you want to pay I would recommend Pluralsight
Totally agree, they'll train you up for what they want you to do. Show them that you can create *something* and let them know you're willing to learn and are confident you can make a dent in anything they need. You won't be working in a vacum, mostly. My first job was the *only* developer in a new IT company... that was fun and extremely stressful.
Take a look at monogame :) it's fully cross platform and even works on PS4, Xbox and switch
Go and just be honest. If I'm hiring for a junior position and take an interview from a fresh grad with no work experience, I'm not going to be looking for the guy to write the next google maps, just someone who's willing to learn and understands basic concepts like if, loops, methods, parameters, maybe a touch of OOP etc. Also, don't forget imposter syndrome is real dude, you may likely know more than you think.
&gt; A good IDE for C# programming if you don't like Visual Studio Code then you'll either want to use Visual Studio (note the lack of the word "code") or you're going to have to learn the command line tooling and write the code on a text editor like Notepad++. Just learn the IDE, you'll be grateful you did. &gt; A good book that takes you through the syntax of C# [https://www.amazon.com/C-Depth-Jon-Skeet/dp/1617294535/ref=sr\_1\_1?keywords=c%23+in+depth&amp;qid=1560893615&amp;s=gateway&amp;sr=8-1](https://www.amazon.com/C-Depth-Jon-Skeet/dp/1617294535/ref=sr_1_1?keywords=c%23+in+depth&amp;qid=1560893615&amp;s=gateway&amp;sr=8-1) Jon Skeet's work is largely considered some of the best. Honestly though, Microsoft's own documentation for C# is *very* good, and if you ever google a certain C#-provided class, you'll find all of it's methods and those individual pages usually have good examples. See [https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=netframework-4.8) for example. &amp;#x200B; &gt; Any additional links to videos, pdfs, or anything that could help one get started that has no knowledge of C# language. I don't have any videos or PDFs but here is a laundry list of things you should get familiar with that are fairly unique to C#: * LINQ * This feature is in my opinion a crown-jewel of C#. Ever write a for-loop just to find a specific element in an array? LINQ utterly simplifies a statement like that into a single statement. For example, if I had a list of people, and I wanted to get their emails, but needed to filter their by their addresses I could do something like: * `var peopleInSeattle = people.Where(p =&gt;` [`p.Address.City`](https://p.Address.City) `== "Seattle").Select(p =&gt;` [`p.Email`](https://p.Email)`);` * The equivalent here would be writing a for each loop where you're going over each person, then checking that they live in Seattle, then ultimately building a list of emails for those people. LINQ statements essentially reduce the amount of filter methods you write since you can now do it in a single statement. * Async/Await/Tasks * This is an advanced C# concept that I would recommend learning later unless you're planning on doing stuff with IO methods that will take a long time (calling APIs, reading sockets, reading huge data files, etc) * [Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties) * In languages like Java, you hide a private member variable behind a getter/setter. Properties abstract away that concept behind the "get" and "set" keywords and allow it have a nice method-free syntax. * ref/out parameters * ref: [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref) * If you ever wrote C or C++, ref essentially makes a reference parameter by-reference * `void doThing(int&amp; x)` * out: [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier) * This keyword behaves similarly to ref except that it enforces a rule on the variable that it must be set within the method it's declared in. Ref does not require it be set. * in: [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier) * This is a newer language feature and is essentially a const reference. It is useful if you ever pass in large amounts of data that will be copied, like strings (entire files, large loads of string data from an API, whatever). * `void doThing(const int&amp; x)` * C# 6's [string interpolation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated) * `var msg = $"My name is {name}";`
Alternatively, an easier way would be to convert it to lower case or upper case using either ToUpper(); or ToLower();
Thank you very much for, this will definitely help me get started. I guess my only issue with visual studio code is the way it looks, it seems all cluttered to me and it feels like you have to search and find a bunch of things to install to make it work properly. But then again the only time i ever used it was when i first started learning python and i ended up going to pycharm because it literally has everything built in with only needing to install libraries which is simple to do.
Visual Studio is a bit of a cockpit for certain. There is a ***ton*** of useful stuff in it for development. But you can get by without most of it. If you're using C# just make an effort to learn it and Google when you don't know how to do something in it. You'll grow to love it in time because of all the awesome stuff it offers.
You don't know anything. If you knew that you didnt know anything, that would be something... You know that, so you know something right? Just kidding around. Agree with others that it is expected that you will need to learn a lot. My advice is that if you don't know something just say so. You may not have experience but you can demonstrate honesty.
I use Jetbrains Rider and quite like it for an IDE
Which part?
C# is most definitely not a scripting language
I disagree with both points. validation should always be handled as close to input as possible (This doesn't mean just the presentation layer) but if I hit a method in my Business Layer and an argument is null, it needs to throw an exception. That exception should then be turned into new code in the presentation layer that stops a null value being passed. Exceptions should be caught by the closest calling code that can actually handle the error. If thats all the way back up in the presentation layer then that's fine. If you can't do anything about the error (e.g. your business layer cannot do anything about a Validation Exception, only the user interface can) then don't catch it. I'm not sure what you mean by 'catching too high can result in losing the exception'. Yes, if you write the code in a way that loses the exception, but that depends on your code, not how deep your call stack is
Looked at Unity? I made some game years back in Java and ported it into Unity and have continued to work with it. In the end it would likely depend on your UI and what framework it would it work better in. What about making a web based game?
&gt; Try to save it for exceptional circumstances. Consider the following: * https://www.hanselman.com/blog/IfYourMethodCantDoWhatItsNamePromisesItCanThrow.aspx * https://www.bennadel.com/blog/2708-exceptions-are-for-exceptional-circumstances-is-not-a-value-add-answer.htm
Xamarin is worth looking at. I don't know what you app is doing UI-wise, but most people who require cross-platform have gone to web development rather than thick client UI frameworks. If this is a learning project, then your career prospects will be vastly improved with some web experience.
I wouldn't recommend WPF for a game though, even Windows-only. In fact I wouldn't recommend any GUI framework for a game. Game uses a different concept when it comes to drawing thing on screen, i.e. the game and render loops (which can be the same in simplified workflows). As other mentioned, you should turn to the engine itself for rendering some UI. They usually all have some capabilities in that regard.
I had luck with SDL.net however I never tried it with dotnet. Maybe it works, maybe it doesn't. All I know is SDL is very easy to use and great for 2d games.
Well the ideal case is you learn Javascript. You should at least consider it. If this project is long-term then it makes no odds, right? And React works on mobile and has beginner-friendly documentation. About passing the GUI into the logic... this is exactly the problem that the mvc pattern solves. Don't confuse mvc, the concept, with mvc.net, the web framework. All it means is that a third component mediates. -Think about the actions that the user might perform, and add controllers for them that pass the action into your game logic (the model). Call those controllers in the UI. - Think about the data your UI needs, and expose those through controllers too.
You should go. If anything for the experience. I've had loads of interviews where I seriously doubted I'd get the job. Most of them to my surprise I ended up getting an offer. Just be honest about what you do and don't know. Don't write yourself off before you've even entered the room. Lots of places are short of devs and demand is high if you show you have the right attitude you'll go a long way.
Microsoft now offers the complete SQL Server quite for free, as Developer edition. Not a gimped "Express" version. Only limitation is not to use it in production environment. So for hobbyists like me this is pretty amazing.
Developer edition is free..
The full SQL Server is free as Developer edition.
Which is why I provided an answer to the question below the first statement.
Sorry for bad quality! I don't have a good recorder!
For those kinda jobs I just want someone that can write me a function that deals with a collection without skipping a beat (mistakes are fine but they should be able to blunder most of the syntax off by-heart). On top of that I'm looking for enthusiasm in coding and their own github where they've been mucking around and doing stuff in their own time that interests them. If you're a graduate, to me that's the strongest suit. For the most part I couldn't give a fuck if you know the difference between a struct and a class in C#, I can teach you that. I mostly wanna know if I can just throw you at a task and some docs without you pestering me for most of the day for weeks on end.
I mean for a mostly text based game I don't think it matters
Well yes but you're technically breaking their licensing if you use it for anything production wise right?
Exceptions and exception handling should be saved for situations that cannot be avoided or prevented through the normal flow of execution. Something like a connection being droppped in the middle of a file transfer would be an example of an appropriate use of an exception. If an input is null, you can typically handle that through any form of error handling and validation which will be marginally cheaper, and more importantly easier to diagnose, and easier to maintain than using exceptions. C# doesn't preserve all exceptions as they propagate back to whatever is catching them. If another exceptions occurs while the first is propagating back, only the last exception thrown will be caught, the rest will disappear. Seeing as the question was about async operations, the likelihood of this occuring is higher than it would be for a strictly syncrhonouse application, where it's usually limited to exceptions that may occur in a finally block. So, exceptions should be caught close to the source to help avoid this issue. Doubly so if exceptions are going to be used in place of other forms of validation and error handling.
"The current recommendation is to implement null tracking and defer the latter feature until a later version of C#." Can someone explain this sentance to me? Who is recommending whom to implement null tracking? What is "the latter feature"?
So devils advocate here, most of the points made in the comments have been it's ok just read some books and practice. So would it be the same for someone without a degree in CS but a nice portfolio of work in c#? Also, go to the interview, you have a first class degree, you've earned that opportunity. Own it.
My apologies. Null tracking means "can I safely call x.Value because I know x is not null?" The second feature is the ability to write "x.DoSomething()" instead of "x.Value.DoSomething()" when you know x is not null.
So I'm making a lot of assumptions about your setup, but here is a very basic method of pathfinding. I wrote this on a phone from scratch, so I don't promise this will compile, much less work for boundary checks. But it should give you a general idea. Good luck and let me know if this helps. Int maxTravel = 2; // calculate from speed SpaceToMove Locations[10][10]; // Your map IsNavigable(SpaceToMove Location) { // Can I step here // Also check for out of bounds } // This is recursive Void Pathfind(int x, int y, remainingDistance) { If(remainingDistance==0) Return; If( ! IsNavigabale(Locations[x][y])) Return; Locations[x][y].CanMove = true; Pathfind(x-1,y, remainingDistance-1); Pathfind(x+1,y, remainingDistance-1); Pathfind(x,y-1, remainingDistance-1); Pathfind(x,y+1, remainingDistance-1); }
My hangup with MVVM and WPF is the not-so-friendly API, along with it's other so similar yet distinct and unusable brethren that come out of the box. Love the design pattern, not so much the implementation.
You could right click&gt;exclude from project to get rid of the reference in csproj
I did try that, but in my App.xaml.cs in the App() constructor I have the following C# code to check if that file exists, if so extract the key and license the api I use, if not then .... But if I exclude the file, this fails and warns me about license: // Open XML file and get key if file exists if(File.Exists("ApiKeys.xml")) { XmlDocument doc = new XmlDocument(); doc.Load("ApiKeys.xml"); XmlNode node = doc.DocumentElement.FirstChild; // Only have one API key for this project var key = node.InnerText; Syncfusion.Licensing.SyncfusionLicenseProvider.RegisterLicense(key); } else { // Use community license Syncfusion.Licensing.SyncfusionLicenseProvider.RegisterLicense("YOUR API KEY"); }
Copy your file into your bin\debug and\or bin\release folders
Thank you!
I saw this earlier today: [https://stackoverflow.com/questions/16408779/payload-file-does-not-exist-what-does-this-mean](https://stackoverflow.com/questions/16408779/payload-file-does-not-exist-what-does-this-mean) Particularly, the answer by **Ravindu Liyanapathirana** (don't even wanna know how that's pronounced) but do you think that is about the same thing as your idea?
Although that "Generate library layout" option is greyed out for me
It's just not production ready. Tried to use for an enterprise level solution and it was just too painful. It's a great project and has a lot of potential but it's not there yet.
So I did put that file in my debug folder and release folders, so when I run the app it still gives me an error. What should I put in **if(File.Exists("ApiKeys.xml"))**?
Sure, I will try my best to abide by them and hopefully be able to gain knowledge from tutorials.
Definitely just go to the interview. You say you only have created those basic projects. Majority of the junior devs that I have to train have only done basic level programming with a very low percentage actually completing something that wasn't a senior project.
What’s that 4x type game that’s built entirely in WinForms? And I think Dwarf Fortress is console based without any of the shiny graphics updates.
Your best bet would be to look into WMI as it has references to shares and can handle eventing. [WMI](https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-start-page) [WMI Events](https://docs.microsoft.com/en-us/windows/desktop/wmisdk/receiving-a-wmi-event) [WMI Shares](https://docs.microsoft.com/en-us/windows/desktop/cimwin32prov/win32-share) [WMI code generator](https://www.microsoft.com/en-us/download/details.aspx?id=8572)
He uses Pycharm, and you’re recommending VSCode? Is your head buried in the sand? Rider man, it’s the obvious choice.
If you like Pycharm, use Rider. Same IDE base, with a different focus. Visual Studio is garbage, and has been for years. Don’t touch it.
Visual studio is as far away from the “Gold Standard” as one can get. It’s famous for its crashes and god awful performance. The IntelliJ platform is been the standard for years however. They have IDE’s for every major language without nonsense, and are very stable. C# is also not a scripting language, nor is it close to one. Just where did you get that from? Have you ever even seen a scripting language before?
Which line does it throw an error?
Which line does it throw an error?
When did I suggest VSCode? I suggested VS.
Well, I guess not an error, but I get a popup from the 3rd party licensing saying its invalid. Since my File.Exists returned null
File.Exists will only return true or false, never null. Which is your code returning?
File.Exists will only return true or false, never null. Which is your code returning?
I don't really enjoy cisual studio code either. The other IDE, visual studio, is way better Imo.
I'm sorry, I meant it returned false! Instead, I just created an Environment Variable and used that value. Much easier, no files issues :)
I'm from UK
Unfortunately the quality is making it illegible, though could be just me.
&gt; If you don’t like Visual Studio Code...
 ToLower() is often a pretty solid choice for simple stuff especially as its easier on the eyes than: if(Stand.Back.While.I.Do.String.Comparison(value, OptionsThatAreKindaHideousLooking) The primary issue with it is internationalization but that all depends on if there's any chance you're gonna ship it in other languages. For a console app, that's not really very likely.
oh yea, I forgot how beautiful &gt; StringComparison.InvariantCultureIgnoreCase is as a parameter to pass. It more or less ends up being the same stuff, stop being so fucking snobbish.
Some part of the course were not pure technical so you could say my grade got boosted that way
Post the code.
But why?
Use an array of IList objects
A discriminated union, but you'll have to roll your own or pull in somebody's package, and it probably won't be much less verbose than a straight cast (especially if you have many types to choose between), if it's less verbose, at all. Alternately, you could use System.Collections.IList, but you'll still have to pay attention to what type the elements of each contained IList is, or risk ArgumentExceptions. It would let you call Clear() on everything, though.
It *does* whiff of x/y problem, doesn't it?
Because storing data like this would be easier (for me at least) to process with C#. I can use a for loop to clear out all the data or in combination with a switch case structure, format and insert the data into a table.
I don't get... How you made this in Windows Form? 😅
You could look into Tuples. [https://docs.microsoft.com/en-us/dotnet/csharp/tuples](https://docs.microsoft.com/en-us/dotnet/csharp/tuples) `var exampleTuple = ( new List&lt;string&gt;(), new List&lt;string[]&gt;(), new List&lt;int&gt;());` But would make much more sense as &lt;object&gt; in an array. You already listed the cons of that. *ps: this reads as a homework question. If that's the case, the answer should be in your study guide.*
Use the array form all the time, and if you only have one, its just an array of one.
...C# is not a scripting language
Thanks. I thought I would be the base class but I couldn't remember what it was.
List&lt;T&gt; will only hold objects of type T. string, string[], int are three different types. What you are trying to do is what the language is designed to prevent you from doing because its most likely an error. Now, you can do something like this: class base {} class derived1 : base {} class derived2 : base {} List&lt;base&gt; baseList = new List&lt;base&gt;(); baseList.Add(new derived1()); baseList.Add(new derived2());
I wouldn't recommend the book linked above (C# In Depth) - that's not going to teach you syntax or anything. It's more an in-depth look at how the language developed. A great book, but it's not a book for teaching C#. Try *Microsoft C# 2013 Step-by-Step* (there may be a more recent version) and/or the *C# Pocket Reference*.
My first suggestion is to have two different lists. If you must have one list just use List&lt;T[]&gt; and where you only have one, simply have one in the array.
He said that because OP said he didn't like Visual Studio Code. How the hell did you interpret that as a recommendation?
I don’t think what you are asking for is possible. The language is too strongly typed to have different primitives in the same generic holder, much less one as a singular and another as an array without boxing them into an object.
Visual Studio Code is not an IDE. It is a text editor with amazing plugins that allow it to behave how you like. What you want to use for C# is visual studio community. This is a full fledged IDE like pycharm. It also allows you to drag and drop GUI elements on a window. I missed this the most going from C# to Python.
Its not a base class, its an interface that they both implement. Lists and arays have no relation in the inheritance hierarchy (besides both being reference types)
This would make it doable, but OP should still reexamine why they want to do this in the first place. Creating a list of dissimilar objects seems pretty smelly to me.
[Does this help?](https://stackoverflow.com/questions/16247577/wpf-usercontrols-image-disappears-even-with-xshared-false)
Wasn't blessing his implementation, just answering the question :)
Love the art! Is info on how to demo in the Discord?
Oh for sure, hence my upvote for you ;) My comment was mostly directed at OP, hoping they reconsider their approach, that's all.
Also: https://github.com/qmlnet/qmlnet
Have you heard of Qml.Net? What are your thoughts on it? https://github.com/qmlnet/qmlnet
I'm gonna be lazy and just ask. When you say Windows Form, does that mean GDI+ rendering on a form? Or do you really mean some complex type of user controls on a Windows Form? Also, why?
\&gt; Creating a list of dissimilar objects seems pretty smelly to me. &amp;#x200B; is... oop a code smell then?
I’ve had a friend make a pretty damn fluid and responsive snake game entirely with picture boxes on windows forms. He didn’t know game engines existed.
I figure you're talking about polymorphism (if not, ignore the rest of this and please let me know what you meant). I'd argue that combining, say, integers and strings into one list is very different from combining cars and trucks into a list of vehicles. The latter will often make sense (e.g. give me all vehicles a certain dealership sells). However, if you find yourself wanting to do the former then you should at least take a good, long look at why. Maybe there really is a great reason to do it, but I'd be willing to bet that in most cases that won't be true.
Liskov substitution principle would like to have a word. A List&lt;T&gt; is not substitutable with a List&lt;T[]&gt; So I don't know what OOP you're talking about, but that's not SOLID so definitely smelly as shit.
Heres the GitHub link: [https://github.com/a-person-01001001/cubeScrambler/tree/master](https://github.com/a-person-01001001/cubeScrambler/tree/master)
Heres the GitHub link: [https://github.com/a-person-01001001/cubeScrambler/tree/master](https://github.com/a-person-01001001/cubeScrambler/tree/master)
Are you familiar with async/await in c#?
I thought I was haha. I’ve used asyn/await so much in my application. But it turns out most of them have been async Task&lt;bool&gt;, not just async Task.
Thanks for the info. I will have a look at both.
Thank you for the information. I'll check it out for sure.
You want a boolean value from your method. What does the boolean represent? Like, what yes or no question does it answer?
True. I was thinking of more heavy UI usage such as HUD or health bars, indicators, etc. For text-based, any framework is fine :)
Lol, no worries, thanks for the info, I'll check out rider. Appreciate the response.
Thanks, I will check those out for sure.
Alrighty. Pycharm has been my python ide since I started out. So I'm pretty use to it.
I’m trying to inform the user whether or not the metadata value of the container in Azure Storage was updated successfully or not.
Whoa that is an absolute treasure trove. Thanks for the recommendation!
I don't care if this game is dogshit, the fact that you made it in winforms deserves respect.
Wouldn't SetMetadataAsync throw an exception if it failed? https://github.com/Azure/azure-storage-net/blob/07d66a4917ab03cb5e7262774235d2d2f7e65752/Test/ClassLibraryCommon/File/CloudFileDirectoryTest.cs#L560
&gt; a video game with windows form This means nothing. A winform can host almost anything, including directx contexts, monogame contexts, other game frameworks etc, etc. You could have just embedded a context into a winform, or you could have rendered this yourself in an Image of some kind with GDI/GDI+ drawing, or moved around thousands of coloured panels/picture boxes, or a multitude of other ways. Please share some more details.
I sadly did similar about 20 years ago with Visual Basic without knowing any better. It all adds to experience.
I’m one of those fuddy duddy stick in the mud types after having written software since 2 decades now. Early this year I finally made a huge effort to learn about WPF. At first I bit off more than I could chew by bringing on board too many frameworks that had to be learned from scratch. This was a very overwhelming addition to everything that WPF already offers. But once I could strip off all of those, it became very easy to learn and think in WPF instead of WinForms. It’s definitely a better platform and much easier to code against.
That's what I understood it to do. So then my follow-up question: is it safe to just do something like public async Task&lt;(bool success, string newValue)&gt; SetPermissions(string containerName, string newValue){ ///Code to get container and fetch metadata of container . . . container.SetMetadataAsync(); return (true, new Value); } &amp;#x200B; If the exception is thrown, is there a way for me to return false? Thanks for the help so far!
I think I get what you mean. The method returns `Task`, but you don't know what to do with that. If it was a `Task&lt;bool&gt;` you'd know what to do, but you didn't show us what that is so I can't tell which one you wanted. If a method returns `Task`, that means it's the asynchronous version of a `void` method. If a `void` method has an error, it throws an exception. So if a method that returns `Task` can't complete, that `Task` should capture an exception. There are two ways you can deal with this in C# right now. ## async/await There are pitfalls here and a lengthy discussion could be had, but this is more or less the code: try { await container.SetMetadataAsync(); return (true, newValue); } catch (Exception ex) { // Definitely log this exception so you know what happened! return (false, newValue); } The `await` keyword sort of tells the code to stop what it's doing and go do something else until that asynchronous task completes. When it completes, if it threw an exception, it'll get thrown here. If it didn't throw an exception, you can move along. (Nitpickers could tear that apart, but that's why there's the next section.) ## Continuations Before we had async/await, this is how we had to do it. You can't really say "wait until the task is completed" in a way that won't make people throw food at you. But you can use the `ContinueWith()` method to say, "Hey, when that task completes, pass it along to this delegate and let it run." You can even add, "Also if I'm on the UI thread, please run this code on the UI thread too." to that, which is basically what `await` does. But you can't really return asynchronously from a synchronous method. (This is where I start to not like tuples.) If you want to return asynchronously, YOU have to return a task. The easiest thing would be if you just want to return a bool. Your code would be: Task&lt;bool&gt; DoWhateverAsync() { // Do the stuff to set up return container.SetMetadataAsync().ContinueWith((t) =&gt; { return !t.IsFaulted; }); } OK, what's happening here? `SetMetadataAsync()` returns a `Task`. That `Task` has a `ContinueWith()` method that, if you give it a `Func&lt;Task, T&gt;`, will return a `Task&lt;T&gt;`. The `Task` that delegate gets as its parameter is the one that `SetMetadataAsync()` created. Your continuation won't get called until it finishes. Every task has a few booleans that indicate how it completed. `IsCompleted` is only true if it finished with no problems. `IsFaulted` is true if an exception was thrown (you can inspect the exception by checking the `Exception` property.) (There is also `IsCanceled` and you can probably figure out what it means.) So. The delegate takes that task and asks if it faulted. If it didn't, the delegate returns true. If it did, the delegate returns false. That gets wrapped in a `Task&lt;bool&gt;` that's passed to the caller. If you really like that Tuple, it gets uglier. I don't ever do this, so don't quote me on this syntax: Task&lt;ValueTuple&lt;bool, whatever&gt;&gt; DoWhateverAsync() { // Do the stuff to set up return container.SetMetadataAsync().ContinueWith((t) =&gt; { return (!isFaulted, newValue); }); } This is why I still tend to make classes instead of ValueTuples. Call me old-fashioned. Anyway, I think that's what you meant to ask.
Task is just equivalent to void. There is no return value to check. If you await the call then it will be complete when you get past it and if no exception is thrown you're good to go.
 try { container.SetMetadataAsync(); return (true, new Value); } catch (Exception e) { // You might want a more specific exception return (false, new Value); }
Oh my gosh, you understood exactly what I was trying to do! Thank you so much! This helped clarify a lot of things. Basically, I have a function: public async Task&lt;bool&gt; SetContainerPermissions(string container, string newValue){ //Retrive container metadata //This is the function that determines the return value for my SetContainerPermissions(), but it of type async Task container.SetMetadataAsync(); } Sorry for not clarifying that in my original post. You totally understood what I was trying to do though. I did come across `isFaulted`, `isCompleted`, and `isCanceled`, and thought that was the way to go, I just wasn't utilizing those values in the correct way.
Yep. Holy moly. Don't know why `try/catch` didn't come across my mind. Easy peasy (for the most part). Thanks again!
await container.SetMetadataAsync();
right, but I need to handle if the exception happens, to return false back to my controller so that I can return a false value back to my JavaScript code. I think I understand how to do it now. Thanks for the input (:
I've forgotten how to append to a list because I was so focused on the intricacies of some api before. Don't worry fam.
I try so hard to K.I.S.S but it gets so unruly sometimes. I gotta remind myself to take a step back sometimes, or ask the good ol' interwebs.
That other commenter had better code. I dropped the await keyword.
+1 from me too!
New `IList[]`?!
Why did I watch 4 minutes of this?
If you’re getting AggregateExceptions from your task, you can look at the inner exception field to get the other exceptions. See more info here: https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/exception-handling-task-parallel-library
It would be great to be able to define your own implementation of Nullable&lt;T&gt;. For instance a nullable GUID could just use Guid.Empty as the "null" value rather than having a separate boolean member for HasValue, since Guid.NewGuid is guaranteed to never return Guid.Empty.
Keep in mind that using .equals over == would mean using exception handling for a null reference, commonly looked over when people switch it over.
Don’t believe this was made using Winforms lol
Sorry that was a typo
The scripting language part was a typo. A rather unfortunate one at that too. Sorry
Sorry a very annoying typo
I do, had to do something similair for a few school projects (a game and a simulation). Basically, you need a double buffered panel to draw on to prevent flickering. The possbilities of WinForms are massively underrated in this thread tbh :p
This is the only way although the problem as stated smacks of other bigger issues
At this point just make it in fucking PowerPoint.
[removed]
Well it *is* turing complete.
Done it accordingly but cant get rid out of this
Please don't remind me.
I agree that validation should happen through normal flow of execution, but you don't write validation exceptions to protect from user input, you write validation exceptions to protect your class from future developer input. What if someone calls my public method and passes null to it when it expects a value? Should I let the database throw the exception (with an error that takes more time to diagnose) or should I throw an exception that explicitly states 'ArgumentNullException - DateTime startDate cannot be null'.
Very shitty suggestion. I pity the fool that will take over this code someday.
Exceptions are handled with a try/catch block.
Super impressive dude. I mean I get some of "... but why?!" Threads here, but none of that diminishes the achievement, nor the feeling of satisfaction you must have gained from the creation :) For how long have you been programming?
in some german universities the CompSci classes give you 80% finised code and about 3 pages that explain how to "implement these 5 lines of code". i see people - literally - copying the example pseudo code and getting points for that. It's a shame...
I would say you do validation for both and that it's better to create and generate specific errors whenever possible. In your example,I would stop execution and display an error immediately, but I don't need an exception to do that.
Ah man that brings back memories. I remember when I first started programming in vb6 I used to do this. I downloaded a massive script to generate a mask for a sprite. You'd have to bitblt the mask and then the sprite to get transparency. Haha good times.
I agree you do validation for both, validation should be done throughout the stack. Validations in my domain model / business layer are there to protect my methods from future developers (including myself!) to ensure the method get's all the information it needs. &amp;#x200B; I don't see how you can have a normal method signature in my business layer AND "create &amp; generate specific errors" without exceptions. &amp;#x200B; Take the method AddTask, which returns the added Task ID and lives in my business layer. &amp;#x200B; AddTask requires a valid DateTime. &amp;#x200B; How do you "create and generate a specific error" and "display an error immediately" without an exception in this (extremely common) scenario?
 if(date == null){ DisplayError(ErrorType.DateTimeNull); break; } public static void DisplayError(ErrorType errorType){ switch (errorType){ //Display and log error, trigger cleanup or queue job with cleanup daemon } } You don't need an exception to display an error,or stop execution. I don't know what's so difficult to understand about that.
I would be truly impressed if there were a source code to back up that statement. In my experience, drawing something, even with GDI+ and in a double buffered form is way too slow to display that kind of image. &amp;#x200B; But again, I'm ready to believe it and learn from techniques that would make this possible! &amp;#x200B; TL;DR; source please! ;)
I'm in my business layer. DisplayError cannot exist because there is no way to display it. &amp;#x200B; I don't know what's so difficult to understand about that.
If your only method for propagating error throughout your application is exceptions, you have a very different design philosophy than what I've been exposed to. Regardless of where your code lies, you should always have something in place that allows that behavior. Since we're resorting to personal attacks, I think this conversation has passed the point of being productive.
Okay, so I should do the try catch where I call on task.whenall(tasks) also in Main class? And not in the sub tasks? :)
Okay, but is it possible to send the object serialized / tostringed or like variable parameters with name and ID in the exception?
Okay, so in your opinion, I should catch in the task and not main task? What if there is a task that I need two variable parameter from two function that is causing the exception?
I haven't resorted to personal attacks, I was being genuine in my last paragraph. You may have used different terminology for those items. I'm not sure what applicaitons you have been exposed to, or your experience level, and the fact you thought I could use a "DisplayError" method in my business layer made me think you had not used a multi tier application. Hence why I said "would explain the difficulty in communication we're having" and not "would explain why you don't understand the issue". Communication goes both ways, and me assuming you use the same terms or that you've been exposed to the same applications is a bad way to start communication... as it has assumptions. I was addressing that. None of my comments have been written with malice or an intent to "prove you wrong", I want to know how you do this as I see no other way and I am open to learning different patterns/approaches. You have still given no way, in a class library, to pass an error to the view layer using normal code. I still have 0 idea how a normal method would say "Hey view layer, can you display an error please?" without an exception.
IIRC if you await Task.WhenAll() you will catch an AggregateException anyway, and then you have to run over the inner exceptions to see what happened. I think it really depends on what type of exceptions you're interested in handling, and what you're ok with leaving to an "ultimate" exception handler that will do something very basic like logging the error and exiting. Those that you're interested in handling - just handle then in their own flow.
&gt; and what you're ok with leaving to an "ultimate" exception handler that will do something very basic like logging the error and exiting. &gt; &gt; Those that you're interested in handling - just handle then in their own flow. Hello, what I just want to do is to send the error messages to my DB. But I also want to include some parameter variable containing such as filePath and which ID of the object is causing the exception, is this possible to achieve somehow?
The fancy technical speak fails me at this hour in the morning (I'm a beginner)... I've been trying to read this article to no avail: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns The problem I'm having is that if I use a for or foreach loop to try and return the int array values, the code becomes inaccessible to the method. It needs to be a reference value so I can access those values in the next method.
Why returning ref int[] instead of int[]?
Ref returns are not for that
Arrays are reference types. You shouldnt need to add ref
It sounds to me like you should do that for each case specifically. A central exception handler is for that case where you can't even connect to the DB.
Remove any *ref*'s you have, you don't need them. Like other have said, arrays are reference types, so returning *int[]* will return a reference to that array.
You should release this game, when its done. I enjoyed the video, and playing it seems alot of fun.
To clarify it's the .NET Standard one.
I like that it doesn't die on its ass when you switch branch underneath it unlike visual studio. Prefer some of the visual studio gui choices tho.
I would bet my prized cow that 80% of Microsoft shops licence Visual Studio before Rider. VS is the gold standard even if it chokes on changing branch in a large project.
Generally, yes, that would be how I approach it. In that case, I would try to capture any issues in the 2 underlying functions first, if possible. But, I would also add an additional check on the function that depends on those inputs before I take any action. If they were incorrect, I can either bubble up individual errors or do an aggregate error from that point. That doesn't translate perfectly over to using exceptions, because you may want to only catch the exception in the single dependent function to avoid possibly losing the exception from one of the dependent functions. It's not a common occurrence, but it's frustrating when it happens
What does VS tell you when you hover over tempArray? Possibly something about not being able to return non-ref local variables by reference? Just take out the ref. &gt; It needs to be a reference value so I can access those values in the next method. Huh? You're calling a method that returns an array...just use the array in your main took in the returned array when you called it in the next method.
Like others said you dont need ref. Also intArray and temp int seem to be pointless
Or your 'Trainieren' method returns null for one of results.
Could be the new readonly struct API using slice to reduce allocations dramatically?
I wonder where the opinion that VS is bad comes from. I haven't noticed anything that pisses me off this way.
So you need to understand what the mapping functions take as parameters etc. For starters: Query&lt;Shape, ShapeDetail, Shape&gt;
So you need to understand what the mapping functions take as parameters etc.For starters: Query&lt;Shape, ShapeDetail, Shape&gt; This means that * The query will return 2 types, "Shape", and "ShapeDetails" * The method (inside query) will return "Shape" &amp;#x200B; For your new query you will write this as Query&lt;ItemType, SubItem, WorkLevel, ItemType&gt; This means that: * The query will return ItemType, SubItem and WorkLevel objects * The method (inside the query) will return ItemType &amp;#x200B; Then inside the Query function you need to change: (shape, shapeDetail) =&gt; with (itemType, subItem, workLevel) =&gt; You will then need to create some mapping inside the "query" method. The function you write inside Query will be called once per row ( so once per WorkLevel). -- Outside Query List&lt;ItemType&gt; finishedItemTypesList = new List&lt;ItemType&gt;(); (itemType, subItem, workLevel) =&gt; { if (!finishedItemTypesList.Exists(x =&gt; x.Id == itemType.Id) { finishedItemTypesList.Add(itemType); } var itemTypeFromExistingList = finishedItemTypesList.First(x =&gt; x.Id == itemType.Id); if (!itemTypeFromExistingList.SubItems.Exists(x =&gt; x.Id == subItem.Id) { itemTypeFromExistingList.SubItems.Add(subItem); } var subItemFromExistingList = itemTypeFromExistingList.SubItems.First(x =&gt; x.Id == subItem.Id); if (!subItemFromExistingList.WorkLevels.Exists(x =&gt; x.Id == workLevel.Id) { subItemFromExistingList.WorkLevels.Add(workLevel); } } This is written purely using reddit, so may not be accurate/working and it may not be efficient (there is a reason they use a dictionary rather than linq!) but it should get the principal accross.
The `Task` itself should still be non-null in that case. OP, is this the actual code or a minimization of the problem? If the latter, check your array indices; maybe you're leaving some array element uninitialized. Or just use something like `ParallelEnumerable.Range(0,45).Select(i =&gt; DoWork(i)).ToArray()` :)
linux users hate him
Nice! I just got back after three months in South Asia myself!
Google "C# Interview Jr. Developer" - There are tons of videos out there on how to prepare for interviews. Some of them are really really educational.
When you use ref return you need to put the ref keyword in front of the method. There's a lot of details about the right way to do it here. For one thing, when you instantiate tempArray you need to add the ref keyword. [https://blogs.msdn.microsoft.com/mazhou/2017/12/12/c-7-series-part-7-ref-returns/](https://blogs.msdn.microsoft.com/mazhou/2017/12/12/c-7-series-part-7-ref-returns/)
Don't use Visual Studio code. Just use straight up Visual Studio. VS Code is for other languages. VS Studio is THE IDE for .NET. VS (not VS Code) is a fantastic IDE. It's got it's quirks and idiosyncracies but you are absolutely going to need it for C# development. Just being able to use a GUI to install nuget packages, that alone makes it work learning.
There is a reason for a ref return, but this is **not** it. That array is **always** going to be a reference whether you use ref or not.
I think the question that's missing here is - why are you so set on moving to Blazor? As others have said, Blazor is not production-ready. If it was, the answers would be different. So go with what works best with current technology, and if that's React/Web API, then go with React/Web API. And once it's up and running in React, what would be the benefit of moving to Blazor? It would probably a large project, with no benefit for your users whatsoever (all the benefit would be for you, not for them), with additional risk that things that work in React and have been dubugged, improved and fixed over the time your system is in production are going to have to be written from scratch again. I completely get the desire to use a cool, new technology. But I think you might be losing sight of what's important for the user. Once you come across something your users want that can't easily fit in with the existing architecture, that's when it's time to change architecture.
Yeah he should be using a specific position in the Array, which the article I posted outlines.
This sounds a lot like what we have at work. I'm not a big fan of Swashbuckle because it doesn't work very well for a design first/parallel development approach. We have an Angular front end, that calls http controllers in an API project, then Business Logic and Data Access layers. We use Dapper for SQL access to a SQL database through the DataAccess Layer.
Are they hiring? I have several years of experience in that exact subject. :P
 No. You're confusing what ref returns are for with what OP is trying to do. Ref returns were added to support some common patterns used in game development, but they're really not something you're going to use day to day. The people telling OP that this is already a reference are absolutely right.
The Win32 dll section of this worked wonders for me https://stackoverflow.com/questions/8050825/how-to-move-mouse-cursor-using-c
**Please** don't use this. It's a really bad approach.
oook mrs liskov, i will wrap my T and T[] in a class that only exposes a public method to get the first element, no doubt spergy pedantic replies will continue to assume i am an idiot and being serious.
What is the signature of `Trainieren()`?
Well I wasn't trying to address what he was trying to do, only what ref returns are for. I'm not confused about anything.
are you in association with the android game "Dungeon cards"? It has the exact same art style
When I was really little my Dad used VB (probably VB1). He programmed a little game for me, and showed me how he did it (though I was too little to really understand). I sometimes wonder if that is what got me interested in programming later on in life.
&gt;https://0x72.itch.io my bad, i just saw you mentioned the artist
&gt; I had a folder tucked away in the project that was named Excel for some reason and was causing the error. Folders themselves wouldn't cause the issue, but likely you had source files in that folder that were compiled as well, and those source files had a namespace named `Excel` declared (it's common to have the namespace match the folder structure).
Gotcha! Thanks for the info! I will edit my post.
&gt; then you'll either want to use **Visual Studio (note the lack of the word "code")** Emphasis mine. Read more, comment less.
OP is asking about how to return a reference to an array of ints. Using ref returns is not how you do that.
Really, you guys are going to go through and down vote me multiple times for posting an informative article about the functionality the dev was attempting to use and what it should be used for? I even admitted not being 100% familiar with it but I shouldn't get down voted for simply providing information.
Removed: The username and password are still more-or-less legible despite the blurring. Consider using a fully opaque coloured or black rectangle to completely obscure secure information.
https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Byte.cs Search terms: "github .net "system.byte""
Ah it's in the CLR repo, that makes sense. Thanks!
 [https://dapper-tutorial.net/querymultiple](https://dapper-tutorial.net/querymultiple) I've used this and then linked the child objects using the foreign keys.
I made a maze game with windows form but it was super laggy.
That's funny. A year or two ago I found a 3.5" floppy in my garage. When I read it, it contained an address book program that I wrote in QBasic when I was 10 years old. It's a good program for someone starting out.
Typically you use an Interface, like [ILogger](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger?view=aspnetcore-1.1) And then none of the difference pieces of software would "know" about how the message is actually being logged, you'd just reference the ILogger, and let the application at startup decide on the concrete implementation of the Logger (console output, text file, Event Log, etc). There are 3rd party loggers that do the same kind of thing easily as well, log4net, Serilog, for example
Grab a beginners C# book, read it. It's as simple as that. Especially coming from a JavaScript background you need to brush up the basics, as JavaScript and C# are **very** different languages.
There isn't a direct resource for coming from JavaScript as they aren't similar. Not only do you need to know C#, but .Net as well since they might as well be joined at the hip. C-sharp corner is what you are looking for though. [https://www.c-sharpcorner.com/UploadFile/mahesh/split-string-in-C-Sharp/](https://www.c-sharpcorner.com/UploadFile/mahesh/split-string-in-C-Sharp/)
I've been studying the basics of C#, however I found the online documentation by Microsoft to be very complicated to follow. I know learning JavaScript hasn't given me a leg up and I should treat myself as a beginner, but comparing the Microsoft documentation vs the MDN (defacto documentation for JavaScript) the difference is very obvious. The MDN is very concise and the Microsoft documentation seems bloated in comparison.
Thanks for this! I immediately found what I was looking for using this. I was also wondering how I would split a string into individual characters (JS equivalent would be myStr.split(); ) and I found it in the comments. Definitely bookmarking this when I get home
If this is straight gdi +... I'm going to guess the entire map is preloaded as one huge image and then you're just bit blasting it to a buffer the size of the screen bases on some offsets. The camera moves as the player passes an xyz threshold and simply redraws causing the player to stay centered while it moves. Then things like the player, traps, etc are drawn on top of it. Damnit..... Now I want to do this....
&gt; The MDN is very concise and the Microsoft documentation seems bloated in comparison. In the string split example you compare the documentation of a single method to the documentation of 6 methods (overloads).
Please explain more about how this is possible. Is it a directx or unity game hosted in win form? It doesnt seem like a game that fluid could be done in win forms
No problem. They have lots of good examples for just about everything.
Good point, maybe the misconception on my end is that the article contains 6 methods as well. However my point was that the examples used were not simple, and the article started with with regex and IndexOf. I had to scroll down for a bit to actually find out the syntax for split.
I must ask, why is the picture all yellowish? And is all that text selected?!
The article starts with a list of provided overloads, then a general section (which contains a section labelled alternatives). Then the specific method overloads follow. You can just click on the methods in the overloads list.
&gt;Typically you use an Interface, like [ILogger](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger?view=aspnetcore-1.1) I don't think I understand how to apply an interface correctly here. Interfaces just define what methods are required in a class, correct? So in this case, where I have a default functionality that I want to leave in tact until overridden by another method from separate class, it doesn't seem that an interface does anything other than make me not able to create a class until it implements some required methods. &gt;There are 3rd party loggers that do the same kind of thing easily as well, log4net, Serilog, for example I have heard of Serilog, I'll have to look into it more.
My advice is don't stop now. Keep adding features. Add things like validation, maybe move it to a database. I find the smaller finishing touches are where you learn the most. My boss used to say it takes 20% of the time to write 80% and 80% to write the last 20%.
Yeah game is similarly to soul knight gameplay
I'll stick to ef thanks haha
```c# class Hardware { public Hardware(Ilogger logger) { Logger = logger; } //... public void myMethodthatlogsErrors() { logger.Log(message, s); } } ``` ```c# class MyGui: Form { //... var logger = new ConcreteLogger(); new Hardware robot = new Hardware(logger); } class ConcreteLogger: ILogger { //... public void Log(string message, string severity){ ConsoleWidget.Write(message); } } ``` This example passes in the logger via the constructor, there are other ways (like property injection). And your ConcreteLogger class can be one you write yourself that implements whatever your ILogger class is defined as, or one that already exists for files, event log, console etc (if using something like log4net). The 3rd party ones even let you chain multiple loggers so that you can write to both console and log files and your concreteClass. They can also be configured so that Severity messages of Error goes to every registered logger, but Info only goes to console and not the event log, or the file log.
I agree! And I'm not sure what level he's at but it may be a big, yet worthwhile project to learn how to put it into an actual relational database. Then he can really have fun with adding features.
If I'm not mistaken /u/acatnamedbacon means that you would define a class that needs to log as so. public class ClassThatNeedsToLog { public ICustomLogger Log { get; set; } public void MethodThatLogs() { Log?.Debug("Hello, world!"); } } public interface ICustomLogger { void Debug(string input); } public class MyLogger : ICustomLogger { public void Debug(string input) { // Log input at debug level. // e.g. Console.WriteLine(input); } } public class Program { public void Main() { var foo = new ClassThatNeedsToLog(); foo.Log = new MyLogger(); foo.MethodThatLogs(); // Causes the MyLogger in foo.Log to log "Hello, world!" at debug level. } } This is a grossly oversimplified version that hopefully illustrates how using an interface in this situation could work. You can plug in any logger you want into your class as long as it implements the ICustomLogger interface, and the safe navigation (Elvis) operator in MethodThatLogs() will log with whatever you give it.
It can be. Imagine a method AttachExternalLogger in your hardware class where you pass an ILogger. The hardware class can then decide to stop logging to the default method and use the new logger. Better still would be a overload on the constructor of the hardware that takes an ILogger (as a dependency injection) and logs to that, but constructs its own ILogger the default way if one isn't given. Yet another layer would be to have the hardware include its own ILogger implementation (available through various means) and the caller of the hardware would have to dependency inject either the hardware's default logger (perhaps discovered via a IHardware.GetDefaultILogger static method or some such) or an ILogge of it's choosing. This means your hardware should also now implement a second interface IHardware.
Hahah, I thought someone would ask about this. It must have been highlighted but I have a software installed called f.lux that changes the color of the screen so not as much blue light is omitted from the screen. I have sensitive eyes so It makes them hurt less often when all I do is look at a screen all day.
&gt; I'm not trying to ensure classes follow a specific pattern (i.e. they implement log), I'm just trying to reroute a method from a class The Dependency Injection pattern using an ILogger interface would be the best practice in this case. If you have tons of calls to the Existing Hardware::Log() method, and you don't have the time to replace all of them with an ILogger based member variable, you could update Log() to call the Logger class Hardware { //... public void log(string message, Severity s) { if (Logger != null) { Logger.log(message, s); } else { Console.WriteLine(message); } } }
probably someone using flux to change the colors of the screen. At night or when it's dark this soft color wont strain you eyes as bad as the normal contrast.
I've found VS2019 is so much better for the branch switching issues now. Could be just me, but seems to handle the switch better. I couldn't use Rider cause I do a lot of WPF stuff that wasn't handled well.
I suspect an exception is being tossed out of something related to that constructor.
I've upvoted two responses to this post because they're right, but want to add some extra discussion. They're using a technique called "Inversion of Control" (IoC) or "Dependency Injection" (DI). These are fancy words for an architecture that lets decisions about details be made as high in the system as possible. What's that mean? It means that instead of your type creating an instance of a logging type or directly calling `Console.WriteLine()`, it asks for an instance of a type that provides logging services. (In both examples, `ILogger`.) Then, whoever creates the type is responsible for choosing the right `ILogger` and giving it to the classes. That way, in `Program.cs` or some sufficiently early stage of the app, you can choose between "an `ILogger` that writes to the console" and "an `ILogger` that outputs to some control" and feed it to every type that needs to log. Those types don't have to change, they're already doing their job which is "write something to the log". If your types say, "please write this to to the console" by calling `Console.WriteLine()`, then you can't tell them to write output anywhere else without changing them. If your types say, "please give me something with a `Log(string message)` method I can call if something interesting happens", then you can provide them an implementation that does whatever you want *without* changing those types.
I continue to study c# and try new project, something more complex to understand more things, and maybe try something on the web
Thanks for explaining!
Read the book titled.NET Framework Design Guidelines. It teaches you how to think the way C#'s designers thought when they made the standard library.
For new development go core. No question.
Wow! you're quite sure about this. Thank you .
That's brilliant, keep it up!
Set a break point and use the debugger. Make sure the code you have there is being hit.
with out more info not sure were to go but have you tried just Close();
I'll confirm what he/she said. There's no question. Core is Microsoft's platform for the future.
It’s been the epitome of slow and unstable for years. A year of improvements doesn’t negate the decade of terrible.
It's OK I changed the username and the password before I published the video
Impossible to say without knowing what pages, are they from the same or different servers, what the processing does etc etc etc. There’s way too many variables and pretty much all of them are outside the part we know, meaning “this uses tasks.”
Aside from nullable reference types, I think this is going to be my favorite from C# 8.
The reason being that .NET 5.0 will be Core and old framework combined. Then there will be no separate things and it will all be based on Core. So there’s no reason to not go Core for anything you can use it for. But do note that for example WPF desktop applications can’t be done with Core at the moment, only when 3.0 comes, so depends on also what you want to do with it.
Have you even tried the 2019 version?
it doesn't matter much but the core version is the future. there are many similarities so if one day you have to use the other, no big deal. &amp;#x200B; likely in your life, if you keep doing web dev, you will use a dozen web frameworks so don't sweat it.
Thanks that's a good way to navigate it. Also the concept of overloads/signatures is very new to me and I've often go into a doc and wondered why there's so many methods being listed
Yeah, JavaScript has no overloading. That's why I said you need to learn the basics of the language. And I firmly believe books are a great medium for that. They provide the necessary information in a structured way, unlike random Google searches whenever you face an issue.
The only reason I would consider .NET 4.x is if I need something not available in Core. For example, desktop applications or WS-* style web services. But even those will eventually have Core versions.
I know, if finally performs like an IDE should. But like I said, that doesn’t negate a decade of terrible performance and crashes.
The pages are mostly different servers. The timeout is set to 5 seconds. The processing part takes milliseconds. The time used is the connect/download time for each webpage. The max time a single task could take is around 10 seconds, but most take 2-4 seconds. I'm curious why the app doesn't initiate 100s or 1000s of tasks each second from the beginning. I just noticed my laptop was on Wifi. I plugged it into Ethernet, which increased my connection speed to 250 Mbps, but doesn't appear to have increased the speed tasks are executed at. When I tried to run a list of 80,000 tasks, it started slow and accelerated until (about 15 minutes in) it was initiating tasks so fast that my internet connection couldn't keep up (or I got throttled or something) and all urls started retuning an error. I feel like there's something I don't understand here about how .NET paces async tasks, and couldn't find good info on it online.
Maybe if their function is, itself, creating a bunch of Tasks that it is using WaitAll() on (and one of *those* Task objects is null). Otherwise, it looks like returning a null continuation manifests as a TaskCanceledException (which is ... weird). Also possible that the code above doesn't actually reproduce the issue, but there's no way to tell without the rest of the thing.
If you just want the string as an array of characters, just use `.ToCharArray()` instead of `Split`
I'd say go for it (if you haven't already). I just started a new job myself as a front end developer using Spring, JS, and jQuery and I have 0 experience with it. I even told them in the interview that I have very limited experience with this, and my precious job was a PLSQL dev, which isn't used anywhere and has limited application. They had me do those 3 sample Java tests, like create a queue, recursive fib, and something else that was really basic. I was verbal about the position and my desire to learn and they offered me the position the next day. Pay is completely reasonable as well, for my experience.
There will be a separate thing though - the old .net 4.* will live in Windows (and legacy), who knows for how long.
You are getting into the edge of the "I could but I probably shouldn't" territory. If you have 100 work levels, the DB has to return 100 copies of ItemType. This gets to be expensive in terms of CPU and network time. A stored proc that has three result sets for the three types of items may be more efficient. But you have to manually stitch it all back together which takes more effort.
&gt; Otherwise, it looks like returning a null continuation manifests as a TaskCanceledException (which is ... weird). This is very important to remember when playing with TPL. Exceptions don't bubble and the actual exception (if any) gets stuffed into an error property in the TPL APU.
Here's a little more detail. "ASP .NET" is older, and runs on the .NET Framework. The .NET Framework is older, Windows-only, and not being as actively developed going forwards. "ASP .NET Core" is newer, more actively developed, and runs on .NET Core. .NET Core is newer, cross-platform, and will be the supported .NET platform going forward. So the only reason it makes sense to use the not-Core versions is if you have some organizational requirement like, "IT doesn't want to support .NET Core."
What version of Core would you use if you started a project today, expecting to hit production around December? Would going for 3.0 preview, expecting to migrate to 3.1 LTS be the best bet in terms of codebase longevity?
It’s based on the task scheduler. There’s usually no reason to have hundreds of tasks running at the same time so it doesn’t even try. If tasks are such short lived and/or have long wait periods tasks might not be the best way of handling them. You could instantiate a suitable amount of threads, put the data into a suitable concurrent collection and the threads can grab things to do as fast as they want to? Then you can manage the concurrency yourself and aren’t limited to the task schedulers way of running them. Or you can also create a custom scheduler that could start more tasks concurrently if needed. Or try setting ThreadPool’s minimum thread count higher and possibly maximum to some value that doesn’t make things explode. Some information of the pool is here https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool
Ok, I restored the post.
&gt; Ok, I restored the post. Thank you
The key question here is why. I think you need to look at your design and figure out a better approach. The obvious way is just use only arrays and have single arrays for the other items. Having two types in there will make it a pain in the ass to work with. But generally when your trying to do something the language doesn't support there's a better way.
Great Job. Always choose projects that you can accomplish. Next time aim for a one or two day project. Always with some new aspects. You are on a good way.
The only caveat I have for Core is going to be fixed in Core 3. If you need Entity Framework (EF) and require Table-per-Type (TPT) support, then you are stuck with not using Core until 3.0 allows EF6 to be used. Unfortunately a LOT of business applications use TPT in EF, making this limitation frustrating.
Writing shitty code is part of the process, don't let it discourage you. Embrace it. If you realize your code is shitty, you have already half the stuff you need to become a better programmer. The other half is experience. That's all there really is to it.
But the OOP concept itself is challenging to implement , what cause ease this learning curve atleast for me
Honestly, I found my best projects to be the ones where I go in completely over my head. The type where every step is learning some new tech or process. Forces you to read and learn from those who are more experienced.
The best way to practice oop is just like everything else in life, You just keep doing it man and overtime you well be more comfortable with it. get involved in some open source projects, and look how other people structure there code. Programing is an artform. Sometimes you color outside the lines, dont let it discourage you!
So helpful thank you bro
Oh my goodness me too! Though it was Turbo Pascal. And it was fuckin' *rad*
Net Core COULD be the future (**the same future that Microsoft promised with Metro/ModernUI/UWP**), i.e. the same chant that new-is-good-old-is-bad (that it's not always true) but right now: Are you aimed to IIS?. * yes, then Net framework If not then Net Core * Net Core. What is the problem with Net Core?. Net Core 3 it's still a WIP, so you don't want to be a guinea pig yet. Why?. Metro/ModernUI/UWP story. Net Core it's aimed to work as an inverse proxy, instead of Net Framework that works straight in IIS.
It won't really get any easier, but with time, you'll realize that the stuff you struggled with yesterday will be a piece of cake tomorrow. Then you will struggle with something more advanced. Just remember that you don't need to write perfect OOP code right now, let it flow and accept learning as not being something that is supposed to be comfortable. Just keep writing code and doing tutorials/watching videos/reading blogs. With time, I guarantee you that you will laugh about the stuff you worried about today in 2 years.
It's a lot clearer what it does. With the other it isn't obvious what true represents or why it equals 0.
Thank you for the value adding comment!
Basically, you will need two kinds of classes: model and services (there are more, such as controller) &amp;#x200B; Model = you put properties on it. You don't want to put functions inside it (it is a guideline you could break it if it works better) Services= you put functions here. Usually, the services are separated on 3 services: web services, business logic (normal functions) and persistence (DAL classes). And that's it. For example, a system to insert and list customers: &amp;#x200B; * **Customer** (model): Fields**: CustomerId, Name, Age.** You could add a constructor but it is optional * **CustomerDAL** (service class). Method: **ListCustomer(), InsertCustomer(Customer cus)** * **Controller** class (if you are using MVC) or Forms class (if you are using Webforms). **CustomerController** with the methods **List()** and **Insert()** * And lastly, you add your views (that it's not C# code).
The trick is layers, I've found. Avoid performing excessive operations where possible. For example, instead of drawing each individual part of the game image each frame, collect different aspects into their own bitmap and then draw those Unscaled onto the main display. For example an Arkanoid clone can have a canvas for the background, a canvas for the blocks, and a canvas for any animated blocks. When the background changes or moves, only the background bitmap is redrawn. When a block changes or is removed, only the block canvas changes. When an animation frame proceeds, the animated block bitmap is changed. When actually drawing a frame, those bitmaps just get drawn unscaled, one after the other, to the main canvas. Same for most any game. A Tetris game doesn't have to redraw each individual tetris block on the field, for example- instead, a bitmap can store the blocks that are "set" onto the field, which can be drawn with one operation, and similarly composed with the background and any 'active' tetrominoes being dropped. Though WinForms doesn't mean GDI+ since technically they could be using SkiaSharp and the SKControl for example.
Depending on the project type yes ([ASP.NET](https://ASP.NET) Core yes, console apps, yes, WinForms or WPF no).
Fair enough. That code is completely ridiculous for something as simple as joining a couple tables. If I saw that in a pull request it would get rejected straight away. It's so unreadable and I would imagine a nightmare to maintain. Then you have to deal with adding new joins. It's insane that anyone would consider this acceptable.
So like September then. The client side features though not done work pretty well currently.
Even More than that, though. I think a lot of People really turn off their brains when it comes to drawing with GDI+. hey figure they have to draw everything every single frame, but that simply isn't true in a strict sense. For example in a block breaker, instead of every single frame drawing the background, drawing every block, drawing the paddle and the balls, use separate bitmaps and simply compose them. the background is one canvas that get's drawn only when the background updates. Another canvas has non-animated blocks that get's drawn on top of that and is redrawn when the blocks change. Another has animated blocks which is redrawn each frame if there is any animated block in the level. and yet another can be where the ball(s),paddle, and additional drawing take place. And when drawing a frame, all of that is simply composed by drawing them unscaled. This approach can easily speed up non-GDI+ Drawing too. Reducing the size of images that are being rescaled on a GDI+ canvas helps as well. I like to have helpers that create images in a few different smaller sizes and then have them selected based on the desired target size, such that GDI+ has to deal with the fewest number of pixels.
&gt; It's a lot clearer what it does. Oh of course, my third word after "mummy" and "daddy" was: &gt; StringComparison.InvariantCultureIgnoreCase How is that _clearer_? Its more precise but its hardly clearer. Clearest and best for beginners is surely var value = text.ToLower(); if(value == "red") who the toss cares about internationalization at such an early stage anyway?
Man it takes me back to the amber 3151 terminal days :)
You da man. I'm going to try to convince my company to send a sponsorship your way, if not I'll be a patreon anytime I'm on a codebase using your code. I appreciate your work and want to support you. I just wanted you to know if there was a clause in there where companies had to buy a license or something I could easily go through procurement for this. Maybe I'll see if I can get them to pay for support time or something. I want to support what you do. &amp;#x200B; Also, I need to learn how the f- you inject IL that's insanely interesting.
.Net Core 3 is a WIP because it’s the newest version that they still haven’t finished. Your post makes it out (explicitly, in fact) that it isn’t clear that .net core is going to “work out.” While technology changes rapidly and no one can predict the future, I think (as well as most developers in this area) that it is extremely likely that .net core will continue as a strong, popular framework for new enterprise software at a minimum. Suggesting that it is somehow likely or even a significant risk to fail at this point is bad advice.
The answer is most likely thread pooling. When you start an application, it reserves a pre-defined number of threads for the threadpool. When you run a task, it will either run on the primary thread or a threadpool thread (depending on a few factors). If you have a large number of tasks, the threadpool will slowly grow to accomplish all of the tasks. The pool grows gradually to avoid resource starvation - threads are expensive to create and maintains, so the app will attempt to do the work without adding more
The question was about OOP, not the structure of a web framework.
The main reason is because im not started with the project yet. And it would be nice to go for .Net eco system on the web, with Web api and Client side. So once i start with the project, i have to keep on the decision. But it seems like it would be best to start with React instead.
.net core. If you choose otherwise, you'll regret it.
&gt; The reason being that .NET 5.0 will be Core and old framework combined. Naa, it’ll be the next version of core.
WCF services too?
You can have two aproachs here: 1-Use Stored Procedures: This way you can have multiple selects and the query wont get messy in the code, with that then you can order them as you want and put the respectives list's inside their respective parent objects &amp;#x200B; 2-Single Select: This way you will have to mess around with order's and group by's in the C# (have tried this once for 5 layer structure, i dont recomend that, i made the code, and after 2 weeks i coudlnt remember exactly what that was doing) &amp;#x200B; Personally i recomend the first aproach, its cleaner and easier to understand Hope it helps you
After all the years I've spent listening to how JS is the panacea of computing it's good to read a post with a title like this. OP - I suggest you write your own personal website from scratch using ASP.Net. Use Razor pages or Blazor if you are feeling lucky (it's still pre-release). Create an API - like a REST interface for getting/saving blogs and posts and emails and stuff. That is where your c# will do its work.
I agree it is ridiculous. There are far better ways to do this in dapper, and there are far better ways to do this in c# in general (lazy loading the lists etc.) I've got three very similar "chunks" in that code that can be abstracted away, but I wrote the thing in Reddit and decided I didn't want to go through formatting functions etc! Can do a very similar thing by: [https://dapper-tutorial.net/querymultiple](https://dapper-tutorial.net/querymultiple) &amp;#x200B; Far more readable. Entity framework is great at making life easy. Dapper is great at making things fast. &amp;#x200B; Learn from stack overflow. Write your app in EF until EF is your bottleneck, then optimise by rewriting that part using something like Dapper if appropriate.
WCF client side is ok. WCF server side for Core is a separate project that just started a couple weeks ago.
I'm in this spot, and I started on that route but decided to move down to 2.2. The preview version is preview for a reason, and it didn't take long at all to come across drastically shifting APIs and bugs that resulted in runtime errors. Most notable one I can remember is that sometimes an API controller would just return an empty array for a non-empty set. It was a real bug, forcing an upgrade from preview 3 to preview 4, which then broke something in the EFCore library, and so on. We plan to upgrade to 3.0 once it is properly released, though. A migration one time is going to be way smoother in the long run. The only exception would be if you're trying to use something that's actually exclusive to 3.0, like Blazor. That's its own set of risks, but I imagine you would already understand those if that's the route you're taking lol.
Aside from security fixes, we don't expect a 4.9. .NET 5 will be based on Core.
Vitamin B. I engage in local communities and built up a network.
It literally says ignore case bro.
Yeah, I was talking about service side. Interesting.
I agree having to do extra queries is not very efficient. Plus it's not really doing a proper join it would pull all records wouldn't it? Yeah that's exactly right about doing the switch.
If you did a showdialog try setting the DialogResult property instead.
Now take that idea and make it into a small app with a UI where you can view, add, update, and delete addresses. That’ll get you some really good experience.
Aye but there are LITERALLY three options that say ignore case. Which do you choose? What's the difference between current culture, local culture and invariant culture? It poses many questions. At least String.Compare has an option that is merely a bool despite its wonky return type.
When i learn more about how make an App with UI i'll do, the next step ora learn more and get on work with database, i step a time
port your file.txt into an sql lite database! It will remain simple but give you a feel of how SQL databases work.
Yeah, MicroORMs are great as long as you keep complex joins out of it or handle them as separate queries. If a project requires complex relationship mapping, then it may be better to go with EF.
How the hell did you read it? You have a floppy drive?
I would rather they look up one enum than teach them a terrible method.
Its not a terrible method. Would you implement [Enterprise Fizz Buzz](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) because its "best practice"? The conversation about the difference between invariant, local and current is _hard_, there's enough to be learning about without overloading the student at this point. You teach them .ToLower() and you also remind them that its garbage if you're gonna internationalize the product. That means they can crack on with stuff and know that when they build a proper app they'll need to do it properly.
I think there are USB floppy drives available.
Mobile number validation. :-) that’s a thing you can do for years...
Good for you when you continue. In my experience most people loose interest when a success is so far away.
ToLower is much better than the method suggested here as well.
You should go. I got a Jr .Net job with zero experience because they were more than willing to teach the language. They were more interested in mindset and other qualifications (DoD stuff).
You are mad because you sound dumb.
&gt;Model = you put properties on it. You don't want to put functions inside it (it is a guideline you could break it if it works better) &gt; &gt;Services= you put functions here. Usually, the services are separated on 3 services: web services, business logic (normal functions) and persistence (DAL classes). There is a reason classes are designed to be able to have both properties and methods. That reason is so you can put both properties and methods in the same class. A boat has a license number (string). A boat has a number of seats (smallint). A boat has a speed (smallint). A boat has a "go" method. A boat has a "faster" method. A boat has a "setSpeed (smallint)" method. A boat has a "slower" method. A boat has a "stop" method. A boat has an anchor up status (boolean). Having one class for boat (with properties license and seats and speed and anchor) and another for boatTasks (with methods go and faster and setSpeed and slower and stop) defeats the whole point.
Here's my notes on the topic: https://www.infoq.com/news/2019/06/WCF-Decision/
It helps when it’s a project that actually has real utility. Tough, time consuming, but definitely rewarding.
I purposefully coded a sprite engine in Direct X, then had it run within a Windows MFC program. That was a good twenty years ago, for those of you wondering. And the year before I was doing a sprite engine in C++ with SDL and some assembly here and there. Because I *could*. That's what studying is for :)
(*putting on my senior programmer hat*) Go ahead and write the shitty code. Make your classes based on "what things is this code about". (For example, if you have boat\_speed and boat\_seats and boat\_anchor, then you should probably have class boat with properties speed and seats and anchor, so, make the class and move the variables into it as properties.) Then look at "what methods (functions) apply to what types of things" and move them into the appropriate classes. Refactor code accordingly so they can find the variables (properties) and have proper names (so boatFaster() becomes boat.faster() ). In other words, write the shitty code then move it all around, you'll learn that way.
Not just this but also any token handling should be considered. The base libraries for SecurityToken and SecurityTokenHandler have changed drastically between Security.IdentityModel.Tokens (.Net Framework) and Microsoft.IdentityModel.Tokens (.Net Standard).
Client side wcf is still far from enough. It's missing support for WS-Trust 1.3.
Ugh. I still don't understand why they can't just port the damn code. Did they lose it? Do they not own the rights?
Apparently a lot of it is deeply integrated with win32. The reference code is available on github, iirc.
Then put it in the Windows Portability Pack with the other Windows only Core features.
As I understand it we don't expect a 4.9 period. There will likely be stability and feature fixes for 4.8 like there was for 4.6 and 4.7 but there are no plans for any new features to the desktop framework.
Agreed - I had so many problems getting a core client to read metadata from and communicate with a framework server that it was the deciding factor in going with framework for a brand new Web project.
I'd personally crack on with 2.2 for now, unless there's something particular in 3.0 that you need.
For desktop, could you not just do the jump to .net core 3.0 if you're starting anew?
Use params then chain with .ToList() Doesn't this suffice?? What are you trying to achieve. Give more context about what you want to do.
If new product/app development then Core. Existing product can sit on [Asp.net](https://Asp.net) 4.x for a while yet. We have a big app in [asp.net](https://asp.net) (MVC) and it's a bear to port to core.
in a constructor, I'm passing a list of ints and just didn't want to have to do new List&lt;int&gt; { 1, 2, 3, ... , etc} and instead could just do (1, 2, 3, ... , etc)
Writing code is a very hard process. You're not writing "a program". You're writing very many tiny pieces that have to communicate and coordinate with each other to accomplish a task. You're already doing it, but you don't think about it. You have a body, and your fingers typed that post. But to get there, your brain had to use neurons to do complex analysis of ideas and conversion from those ideas to language, then send signals down nerve pathways to cause muscle cells to contract and relax in patterns that moved a lot of bones. Those bones applied pressure to pieces of plastic that closed elecrical switches. The closed switches caused electrons to flow in a way that manipulated the state of transistors so tiny you can't see them. Those transistors sent pulses via a wire or even over radio to a machine that converted those pulses into more electrical signals that, after churning through billions of pathways within a CPU, resulted in some more electrons in VRAM somewhere changing. That triggered millions of other changes that went along a wire, through more microprocessors, and eventually resulted in some liquid in a cell changing properties ever-so-slightly so a letter would form on the screen. Look at how many interactions between systems had to happen just to type a post! That's what OOP is about managing. Part of what makes it hard is we can cheat. A finger is "a thing that can type". I could also say a stick is "a thing that can type", since it also can be used to push keys. So the important part of OOP is realizing anyone who talks about "apples and oranges" being different is *dead wrong*. OOP is about visualizing the core function of a thing in terms of how your program works. So in my system above, I'm not worried about the length or width of a finger, I'm focusing on the idea that it is "the thing that the brain moves in order to tell the keyboard which key is intended". This is really, really hard to understand. It took me 6 years to start thinking about it right. I think you should read *Clean Code*, and *Head-First Design Patterns*, and *Working Effectively with Legacy Code*, anything you can about SOLID principles, *The Art of Unit Testing*, and anything else you can devour. I don't know *which* of these was important, only that after I read *all* of them I started understanding OOP a lot better. But I really liked what *Head-First Design Patterns* had to say. In my opinion it has a whole chapter that could be titled, "Why what you were taught about OOP is wrong." It's a Java-focused book, but it doesn't do anything you can't easily translate to C#. Get it. Digest it. You'll be smarter.
Stackoverflow
This is probably the right answer. Dialogs aren't displayed like normal forms, and aren't actually disposed when they're "closed". The proper way for a dialog to dismiss itself is to set its own `DialogResult` property. That will return to the caller, who can then check the result and dispose of it.
What's the reason you need a list for this?
No, I haven't heard of that, although I have heard of Qt. That might be worth checking out.
No. There are various proposals on the csharlang repo to extend the language feature to other collection interfaces or spans, but nothing concrete so far.
I already made the program and wanted to add something onto it. I just tend to use lists and this is more for testing purposes.
I will give that a look, thanks for your help :)
It's not just you. Quite a few years of C# and many many of .net and I still find the Microsoft stuff hard to follow. Nearly anything else is much clearer. Like this one explains it pretty well. https://www.tutlane.com/tutorial/csharp/csharp-string-split-method Also I really like those O'Reilly pocket guides. They are tiny tiny books...if you already have a coding background you can probably blow through it quickly to get a general idea. [Me' is anwhile their 'nutshell' is over 1k pages aiee]. Certainly won't teach you everything, but it's a good reference, a nice way to crash through.
I would highly recommend not using Interop for office file manipulation/creation since it needs the application to be installed on the system it is running on. &amp;#x200B; MS has the OpenXml package that works without office installed and is free. &amp;#x200B; [https://www.nuget.org/packages/DocumentFormat.OpenXml/2.9.1](https://www.nuget.org/packages/DocumentFormat.OpenXml/2.9.1)
Now go download Wisej and lets get this running in a browser :) for fun of course :)
I like the ones on here too. There are sometimes typos but it's pretty quick to get through and easy to find things. https://www.tutorialspoint.com/csharp/
It's not production ready. Too risky for a paying customer, but I am hopeful for the future.
3.0 is only in preview. Depending on when you are planning to ship, it would be very risky.
Or *&lt;shudder&gt;*, you're stuck using some 3rd party component library / framework built for .NET Framework (or, even worse, COM) that either hasn't been updated to .NET Core or is charging a price for the upgrade that your org will not pay. I do not miss corporate IT programming.
It depends how you write the queries whether it pulled everything. If I wanted to get certain ParentObjects and all their ChildObjects: SELECT * FROM ParentObjects WHERE value = 4 SELECT childObjects.* FROM ChildObjects INNER JOIN ParentObjects (on etc.) WHERE parentObjects.value = 4 Still, not as efficient as one query as my second query is basically what I wanted anyway (albeit reversed)
I kinda miss my C#/initial programming addiction. Would code all day at work. Hating meetings. Then at home, I'd code a few apps at home for an hour or two now im just a washed up corporate jaded wageslave slavishly posting in /r/programmingcirclejerk in my misery
OOP has to be the easiest thing I've ever learned. One day while reading a book on it a light switched flipped and turn on my light. I had been coding since the 80s too, so I had much to unlearn.
He lied for the karma! \s
Instead of logging to console, raise log events. Then higher level code can aggregate all the log entries and decide what to do (log to console, to file, to DB, etc...) You'll need a class to represent a log message that inherits from eventArgs and exposes the properties you need (timestamp, message, severity, etc.) public class LogEventArgs : EventArgs { public readonly DateTime Timestamp; public readonly Severity Severity; public readonly string Message public LogEventArgs(Severity severity, string message) { Severity = severity; Message = message; Timestamp = Datetime.Now; } } Then you need an event in your lower level classes that you can raise whenever something noteworthy happens: class myDeviceController { public event EventHandler&lt;LogEventArgs&gt; Log; public DoSomething() { Log?.Invoke(new LogEventAgs("This is a log message", Severity.Info)); } } Then your form, or any other class that needs to can watch for that event: public class Form1 { public Form1() { var myDevice = new myDeviceController(); myDevice.Log += (sender, e) =&gt; { if (e.Severity &gt;= Severity.Debug) { Console.WriteLine($"{e.Timestamp}: {e.Message}"); } } } }
Hell, when I write code, I have the book of patterns sitting right next to me, so I can reference it all the time. I really love that book.
All answers are somewhat partial, so I'll clarify a bit: Asp.Net Core is just an evolution of Asp.Net. It's written (almost) entirely in .Net standard, meaning it can run on either. Net Framework (the old one, tied to Windows) or on .Net Core. The "Core" in Asp.net Core is just a marketing term in this case. As for .Net Framework or .Net Core, Core is definitely the future as Microsoft plans it, and there are very little reasons to tie yourself to .Net Framework these days. Others have elaborated more already.
Thank you. I had already learned that arrays are reference types, I guess I was trying to force myself to use refs because he was teaching them in a certain section and I got tunnel vision as far as this problem went. Wrong exercise to try and use refs in.
Thank you. I had already learned that arrays are reference types, I guess I was trying to force myself to use refs because he was teaching them in a certain section and I got tunnel vision as far as this problem went. Wrong exercise to try and use refs in.
Thank you. I had already learned that arrays are reference types, I guess I was trying to force myself to use refs because he was teaching them in a certain section and I got tunnel vision as far as this problem went. Wrong exercise to try and use refs in.
Roger... the intArray and temp ints were just attempts to get around the problem. I had gotten tunnel vision in the early morning and was overlooking obvious facts about what I was trying to do. Its always so interesting to look at problems again after a good nights rest, a lot of the frustration is simply me spinning my wheels
Yeah exactly. I feel like it's a pretty heavy price to pay in some circumstances though.
You're right. For some reason when I was trying to solve this when I was that tired, I just kept refusing to remember what I had already learned, that with int[] you are already dealing with information stored in reference form in the memory. For some reason I kept on trying to force myself to use references in order to try and use what he was teaching me in another section of the course, even though this was not the exercise where that was an appropriate approach. That is one of the most common problems I run into when programming, trying to force things to work when they simply won't work. I will continue to try and watch out for different manifestations of that habit. It dogs me pretty bad.
Sir Can i add you on discord or smth so I can message you for tips when I get stuck?
I have the reverse question. I am a C# guy that would like to learn JavaScript and the DOM(the two go hand in hand for web programming, don't they?)
 using System.Linq; public class Demo { private List&lt;int&gt; backingList { get; } public Demo(params int[] args) { backingList = args.ToList(); } }
What a fantastic suggestion. I'm new enough to C# to not know basically anything about this kind of architecture. This is the one I'll probably implement
&gt;When I first execute the program, it's only starting about 5 tasks per second. Sounds like you didn't pass TaskConfigurationOptions.LongRunning to Task.Factory.StartNew, but there's no way of telling because you didn't provide a code sample.
I'm at the beginning of that journey. I started with the React tutorials. Liking it!
&gt; IIS I'm not sure I'd even let that determine what you use. I'm of the opinion that unless you *can't* use Core (legacy support, etc.), you should use it
 I'm going to go against the grain, and say don't. Try to understand OOP, and get concepts from it, but we are finding more and more how it's not a good pattern. I don't recommend OOP, and even though C# supports it, it's much better to write clean and maintainable code by not.
&gt; defeats the whole point No, it doesn't, and it's usually a much better way to design your code. Having pure models (usually) leads to much cleaner code, and there are tons of patterns, such as MVVM, that revolve around this concept. In your example, if you had a boat, you would have a class that manipulates an instance of a boat. Manipulating it directly on the class causes bloat, and there is no clear separation of concerns. I hold my data? I change my data? I grab data from another class to know how to change my data? My layer needs to grab defaults from a DB? Even though what he posted has near nothing to do with OP, no. There are plenty of reasons to have pure models.
there's no way to 'move' the cursor from one point to another so-to-speak. all of the api calls just deal with setting the cursor's position. so, to emulate actual movement, you would have to make an algorithm to calculate absolute x/y coordinates or x/y deltas along a path and send a sequence of events to update the cursor's position multiple times. as for mouse_event, you're probably better off using SendInput or SetCursorPos. this article explains using mouse_event and SendInput if you go that route: https://dzone.com/articles/setting-mouse-cursor-position. /u/xchaosmods's link covers SetCursorPos.
Sorry, I didn't read the bit about 'moving the cursor'. Just kinda skimmed the question whilst I was at work
Please consider: 1. Adding a `readme.txt` 1. Creating a github account, if needed 1. Checking it into github 1. If you like, marking it private This helps you build up a portfolio of work, a source you can look through for your prior successes, and maybe most importantly, a history of habit on github, so that it's less scary of a tool source control is a very important thing this is a good time to engage
Besides GitHub, there's also [ReferenceSource](https://referencesource.microsoft.com/#mscorlib/system/byte.cs).
Nothing is ever written in .net standard. It is not a language or a framework but a target. Asp.Net Core is written in... surprise... .Net Core. So the name is perfectly justified. If you look at the source on Github you can see that the target framework is netcoreapp.
Class libraries targeting net standard can be referenced by both core and regular. MOST code will be written in a library targeting net standard.
Plus you'd allow people to help contribute and give you tips for your code! (assuming you make it public of course)
&gt; it takes 20% of the time to write 80% and 80% to write the last 20%. 20 minutes writing 80% of it. 80 minutes rewriting what you wrote yesterday because it was garbage.
the observer (pub sub) pattern comes to mind.
I like to use my "learn to draw" analogy At first you cant draw shit. usually beginners draw the outline of the object, instead of when you get better, you start to draw the shades/tones of the object instead so just like learning how to draw/paint, lots of practice and its hard in the beginning but you'll get the hang of it with persistence you dont have to be some 200 IQ big brained to program
there are some approaches for companies/orgs [https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#organization-licensing](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#organization-licensing) If that doesn't work for your scenario, it is best to raise an issue here [https://github.com/Fody/Home/issues/new](https://github.com/Fody/Home/issues/new) and describe the arrangement you would prefer. And TBH i would much rather companies pay that cost rather than individuals.
https://www.humblebundle.com/books/programming-packt-books?hmb_source=humble_home&amp;hmb_medium=product_tile&amp;hmb_campaign=mosaic_section_1_layout_index_1_layout_type_twos_tile_index_1_c_programmingpackt_bookbundle Spend the dollar on the humble bundle and get a modern C# book.
EF Core is a piece of shit anyway not only regarding TPT. Its query generation sucks, decisions like client side evaluation by default (or really at all) suck, its APIs are lacking. Lets see if EF Core 3.0 fixes things, after all they are removing client side evaluation and building a new LINQ provider.
I just spent 40 bucks to get this book :(
ASP.NET Core 3.0 will NOT run on the full framework.
I am not sure how .NET Framework is better regarding IIS. I deploy Core on IIS and I don't think I ever encountered problems.
Yup. Reading through the ticket for the lack of TPT was a bit depressing. Microsoft isn't doing further work on EF6, but the EF Core team is small and can only do limited development. Someone needs to help MS pull their heads out of their asses on this.
&gt; Would going for 3.0 preview, expecting to migrate to 3.1 LTS be the best bet in terms of codebase longevity? Terrible idea, IMHO. I've seen people seriously burned by doing that.
It looks like we did. They are porting EF6, the one that works to Core :)
Most tech books don't age well.
Yeah, that helps, but EF6.3 is getting nothing new and loses functionality under Core. They have explicitly said that is the end of the line for EF6 development and all future work will be for Core.
Doesn't the language stays mostly the same?
Return it and get a book by Jon skeet
You'll be able to download a version of Visual C straight from Microsoft. The last version I downloaded was "Microsoft Visual Studio Community 2015".
They don't have that book.
Can you share the link ? Thx.
Big deal. Core is downgrade. They will probably need to get to version 6 to reach parity with EF6 and that's if they stop going in the wrong direction.
https://visualstudio.microsoft.com/vs/older-downloads/
You would be missing many of the new features of the language.
Thanks
I have the same book but unfortunately mine is in English.
It does, and if you're just learning, a ten year old book on a language is more than adequate. Most of the "new features" are going to be more advanced than what you start with.
Do you have the CD you can share with me? (In the book it said that the CD will always be in english)
I found this site [https://exceptionnotfound.net/welcoming-the-coming-death-of-webforms/](https://exceptionnotfound.net/welcoming-the-coming-death-of-webforms/) (4 years ago). So yes, Microsoft and its promises.
C books are still gucci
&gt; Your existing Web Forms apps will continue to run without modification on IIS with .NET 4.6. You can’t use Web Forms apps with the cloud-optimized runtime. Not a lie.
i still don't get how this works public readonly struct Byte : IComparable, IConvertible, IFormattable, IComparable&lt;byte&gt;, IEquatable&lt;byte&gt;, ISpanFormattable { private readonly byte m_value; // Do not rename (binary serialization)
Never spend that much on a book that old to learn programming. If you can get a refund I absolutely would.
You're trolling, right?
I get what you mean but i live in Brazil and the economy is not good.
That book should be fine to start learning C# with, the language at it's core hasn't changed much. Also, the CDs typically provide you with project files to get you started, but with all the differences between Visual Studio between 2010 and 2019 you most likely wouldn't get much use from it. HOWEVER, when you have the funds I would recommend getting Murach's C# 2015 or C# 2015 by John Sharpe; I had to use both of them when I took my first C# class and they're very in-depth and make the language easy to pick up. Happy coding!
I'm not, brazilian bucks are worthless.
try putting this before your tasks start (so it runs just once) ThreadPool.SetMaxThreads(2000, 2000); and see what difference that makes. You may have some blocking (non async waits for i/o) code that is causing you to hit the threadpool thread spawn limit. At which point new threadpool threads only get created at like 1/s. You may also just be hitting some networking limits. Make sure that you are not creating a new httpclient for every request. It should be reused or managed through the httpclientfactory. Also try setting this to raise the connection per domain limit on http service points. ServicePointManager.DefaultConnectionLimit = 40;
.NET will webecome .NET 5 in the near future. If you develop for core it will be mich easier for you to upgrade your projects to .NET 5 in the near future. .NET framework will have a hell of a time converting over.
.ToList()
This book is make by John Sharpe too so I think I will be good. It's a shame that it didn't come with a CD, but if you said I wouldn't get much use of it I'm not too worried anymore.
Some of the APIs have changed and there are newer versions that you should know. Its not bad to pick up concepts. Just remember if an example shows a particular namespace or library usage that just is not working for you it may be that the library in question has been updated/moved.
Finally a good comment! I just took my 2005 book to the thrift store. Most concepts are more than useful to get you going until you understand what you need from stack overflow!
And here I am working on WPF apps unable to go to Core yet because it does not support C++ CLI :-(
Yes, I used GDI+ rendering on a form. I didn't use Controls because I think I would lose some control (xd no pun intended) and it looks very laggy. But hey, I didn't test it so can't say, look what I did with GDI+ Windows Form :D &amp;#x200B; **Why?** Good question! It all started in a C# beginner course at school. It was very basic. We were thought stuff like control events, int, long, if, else and random. I had never used Windows Form before, nor Visual Studio actually. But I did know C# and I was already very advanced in programming, like the best of all the classes teaching the subject advanced. So after a couple of courses, we were given the task to make a personal project. I just had to push the limit of that Windows Form xd, and make an amazing game. Since I only had about 2 months, I used an amazing open source tileset made by 0x72 and I used Tiled as a map editor. Tiled lets you export maps as json file, so I wrote a json level parser. Yes, Windows Form is very slow, so I had to optimize, but I always ran into another problem that would make the graphics slow again. At one point, it was so slow and hard to solve, I was almost ready to end it there, but I didn't. I kept going, and now, I have an amazing game made with Windows Form (GDI+) running on an average laptop (the one I used to develop it also) at crazy frame rates like 60 - 80 - 100 - 140! I am confident to say that I surpassed my teachers with this project because they were mind blown. I also think they learned more from me during the course instead of vice versa xd so that's cool. In the end, I had counted my hours of work and had accumulated 100h. This is only a prototype and I am determined to continue it. &amp;#x200B; Sorry for 1 day later reply and thank you all for your upvotes and comments! I never had that many! Thank you very much for the support! :D
&gt; get a book by Jon skeet Disagree. `C# in Depth` by Jon Skeet is a great book, but it's not for beginners. The one OP (/u/6Fer6 ) has is just fine. OP just needs to download a copy of VS Community Edition to get started.
you are not missing much, I am sure you could find a rip of it somewhere online. IIRC it just has all of the code examples from the book pre-written, so you wouldn't need to do much work. there MAY be some videos on it but I am totally not sure, I skimmed over that thing so long ago...
WCF... too soon to tell it's long term prospects. But really, ASP.NET REST is far more marketable.
WF is dead as far as the industry is concerned. There will be a Core version but very few people will consider using it.
WPF is still valid.
EF Core is very different from EF 4, best to relearn it.
Must learn is async/await. This is the only new language feature that you can't live without.
I hope you mean 40 reais/~10 dollars, otherwise you got ripped.
It was 39,90 reais in a 'sebo'.
Meetups, lots of meetups.
It’s a C# book written by John Sharp... dude, cmon!
I especially love this chest, that one which opens through the wall, lol. Also which algorithm u used to implement enemies pathfinding?
Your better off doing hacker rank or something
Okay, this is amazing. I am so glad you are skeptical about if I did it in Windows Form or not! Me knowing that it is made in GDI+ and someone thinking that it is not because it looks impossible and I achieved impossibility is amazing. &amp;#x200B; In short, I used double buffer because it's essential to remove the flicker. But yes even then, still slow, very very slow with the game I have. So I did some optimization, leading to sometimes too much research xd. &amp;#x200B; I want to prove it to you, but I am not ready to share the source code to anybody. However, I had this idea to release a series on my blog talking about how to make games in Windows Form (GDI+) with all the tips and tricks to optimize. What do you guys think? Also, If you know of a way to prove it to you without source code, I will do so.
I used to use [workopolis.com](https://workopolis.com). Recently I created a profile on LinkedIn and the local recruiters are starting to find me. In fact, I start a new contract next month! I should say that I'm in Ottawa and I do government contract work, so my experience may not apply to you.
Core is the go-forward set of updates for the dotnet framework. It’s similar to angularJs vs angular 2+.
Yeah, that's about right for a used book. Sadly, it doesn't seem the author put the code online (as is very common with programming books) but, as others said, you don't lose much. Anyway, if you get stuck, check out Microsoft's documentation. I also heard there are good video series in Portuguese on YouTube.
Stackoverflow is good! I had some people directly contact me there as well!
Totally. For Blazor it’s has a specific error thrown if you have both Debug and Release bin directories...you can only have 1 for some reason right now.
How do you find these local communities??
How do you find these??
Meetup.com
Congrats! I've been getting contacted by recruiters as well on LinkedIn. Actually had an interview recently through one also.
Very interesting trick! It is not the one I am using, but I definitively learned something :D. Everything is drawn on the same Graphics buffer, there is no bitmap storing parts that are not moving. Every sprite is drawn each frame actually. So every graphical element of the game can be manipulated dynamically without having to transfer from bitmap to bitmap. I use culling, to render only the sprites visible on screen and z/depth sorting with a layering system. When I had only the Player as an entity, the z/depth sorting was much simpler, if the tile's y was less then the Player's y then it's behind, otherwise its in front. But when I integrated the enemies, it had to be a little bit more sophisticated with a sorting algorithm. The layers are represented by an Enum which simplifies a lot the sorting algorithm and makes it more organized. &amp;#x200B; Never heard of SkiaSharp and SKControl before, I'll check it out!
On this page they asked the same thing https://social.msdn.microsoft.com/Forums/vstudio/en-US/31072b8e-d05e-4405-a004-5d6a223df8c0/visual-c-2010-step-by-step-john-sharp?forum=csharpgeneral https://www.microsoftpressstore.com/content/images/9780735626706/downloads/9780735626706_files.zip I can't vouch for it, on mobile
... its straight GDI+ ;) This is how one of the first versions actually worked! I just made my map in Tiled, and export it as a big image and offset it with the camera moves. But, I quickly realized that I was losing a lot of control, especially with z-order but also with separate objects that are not tiles.
I'm sorry to hear that, that's pretty harsh.
Some authors publish their books on some .edu website for free (because they are generous). Most of the CS (especially beginner) books are published for free by the author on their own or some .edu website that you can easily find through your favorite search engine. Just a tip for future!
Only downside is being able to interpret other people’s code that uses the latest language features. I’m addicted to if(obj is SomeClass classObj) {}
Also ```SomeMethod(out string message);```
&gt; WF is dead as far as the industry is concerned WinForms? no it isn't
I typically use books to learn software (quite old fashioned and slow) but do yourself a favor and get something current - you are not just loading C#, you are also learning the IDE and it has evolved a lot since 2010
I have this book, the same language and the Cd, but to be honest, the CD is kinda useless, it's only the same exercises already typed out. &amp;#x200B; But if you reaaaaaaaally want it I can copy it or something
Who is "they"? Can you get it online?
\`T\[\]\` implement \`IList&lt;T&gt;\`
how exactly do you go about storing the data in json or xml?
How's this new? This looks horrible. Why wouldn't the method just return something?
I have to say auto-implemented properties are my favorite thing ever and it took me so long to figure out they existed. I only found them out because I got a humble bundle and read the book.
Well to run this program wouldn’t you want to have office downloaded?
You had to previously declare the out paramter in a previous line. As far as your question regarding out parameters, they have a bit of a code smell but they have their time in the sun.
It's a holdover from when C# didn't have tuples.
I use it to clean up blocks that parse string contents. `if (int.TryParse(someString, out int num)) { doSomething(num); }` Also, I see it all the time in C/C++ in functions that move pointers around.
No, Windows Workflow Foundation. The fact that you didn't recognize the official acronym proves my point.
Removed: Rule 4. Check out /r/learnprogramming, /r/learncsharp, [this video series](https://www.youtube.com/playlist?list=PLsrZV8shpwjMkG96rkKLdNiX02S5LPIqS), and [Unity3D's learning resources.](https://unity.com/learn)
&gt;IIRC it just has all of the code examples from the book pre-written, so you wouldn't need to do much work. So it would probably not make much difference that the contents of the disk are in English, not in Portuguese? Also just an observation: The OP certainly seems to have a pretty solid grasp on the English language. OP definitely speaks/writes better English than quite a few "native speakers" I've met. Certainly impressive if it is not his native tongue.
ah OK, though it proves my ignorance, I use a rather limited number of technologies :-)
It’s fo realz legit. Like his mama knew he was gonna be a C# master. I had the English version of this book and his style of teaching is great, in my opinion.
No, a lot was added but a lot or what was added to the language and framework completely obsoleted older features. 2010 isn’t « too » bad as that’s .net 4 so you won’t get bad habbits on pre linq, or worse, pre generics programming. However the new trend is .net core and the language moved fast the last few years. If you want to do windows application programming you can start with this book, if you want to do web programming toss it away, that changed way too much TLDR: if you want to develop for the web, go buy a recent book on asp.net mvc core 2.0 or higher (make sure it’says core, mvc 2 is ancient, version numbers are mvc 1 2 3 4 etc then replaced by mvc core 1 when .net core came out). If you don’t care about website development, you « can » start with this book even if lt’s old Also if looking for recommandation on books i can only suggest this book https://www.amazon.com/Pro-NET-Core-Andrew-Troelsen/dp/1484230175/ref=mp_s_a_1_4?keywords=Andrew+Troelsen&amp;qid=1561003839&amp;s=books&amp;sr=1-4 It will cover C#, the recent version of .net and .net core. And start you both in windows and web development
Ignorance of bad tech is not shameful. It is truly a ridiculous tool.
see my post below.
Net core reference source: http://source.dot.net
Good info here &gt; https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/
I dun learned a C# chord on YouTube.. Why write an entire book on learning just one guitar chord.. What an idiot!!!
I would pick 2.x stream with the latest support end time. 3.x is tempting but I would not use it for prod yet. It is major release I would probably wait for at least one update after general availability.
C# has changed a lot in the last 10 years. Anything web will be so out of date it's not worth reading. Anything to do with lists or any collection of data has changed. Are you interested in web or desktop ? I might be able to find you a good tutorial.
Core runs on windows, linux and mac. Can be built on any platform. We run services on AWS linux with development on Macs and Windows and CI on linux. It is great. Cannot complain about performance either.
But 2.1 does.
I no longer have the CD
Yes. All my projects had real value for me when I started. Not so much half a year later. It’s more like the graveyard of my sideprojects. But it helps to be motivated.
Use it for your fireplace
2010? Are you for real? :/
I started using C# fairly recently as far as versions. When I first saw the old non-auto properties, I thought "why the hell would anyone do that?"
There are cases where you do not want to have office on a machine installed, like (web)servers. If you use .NET Core it means that you can run it platform independent and office is not supported on linux. Using the Interop as your base it means that windows (server) is a must and office is a must. Using OpenXml makes the application independent of those 2.
You got ripped of.
meetup.com, Google, co-workers
Which is really a dumb thing... Don't store an array in a `IList&lt;T&gt;`.
One of the absolute best books on C# by John Sharp. I started reading that book and I just insanely loved it. Dont know if he has any new editions though,
I plug this book all the time, but The Yellow Book helped me so much in school, it's free, and it manages to explain things in a very beginner-friendly way - [http://www.csharpcourse.com/](http://www.csharpcourse.com/)
https://old.reddit.com/r/csharp/search?q=variable+form&amp;restrict_sr=on&amp;sort=relevance&amp;t=all
Most language related books age very well. The core concepts don't change. The framework related books age extremely quickly.
Pass it in the constructor when creating the form
I concur. I absolutely love C# in Depth, but that is not an beginner book at all. It will not have a C# good learning curve, because that's not what that book is for. It's more a language reference for C#, how the language developed and especially why features exist and how they work internally.
Very untrue. Visual Studio is truly the gold standard for one simple reason: for decades there was no other. Yes Rider exists and its supposed to be good, but it cannot possibly have the adoption or usage, that VS itself has. It's too new to be able to beat that. Add pricing to that equation and Rider probably won't ever reach that adoption. VS is free for a large arrange of situations, Rider is never free (or has that changed recently?).
Lmao because the first or second most popular standard is as old as I am. (C99- I was born early 98)
Yes
Could be.
C# is actually rapidly evolving.
There is a link to a zip file with the CD Contents on the MSDN page here, the file looks like it is the correct files: [https://social.msdn.microsoft.com/Forums/vstudio/en-US/31072b8e-d05e-4405-a004-5d6a223df8c0/visual-c-2010-step-by-step-john-sharp?forum=csharpgeneral](https://social.msdn.microsoft.com/Forums/vstudio/en-US/31072b8e-d05e-4405-a004-5d6a223df8c0/visual-c-2010-step-by-step-john-sharp?forum=csharpgeneral)
Oh hey, someone did post it. And yes it is the correct image :)
VB.net MANO A MANO
Meh.. depends. I make a lot of tools, mostly console apps, and rarely use it in that context. There are several other things from 5-7 I’d be much sadder to not have.
First of all if you need to store different types of lists under a single list it smells of bad design and you should think about your model and whether you really need to store it that way. Second of all if you have to do it that way maybe dictionary? (if the keys will be unique)
cause it's a visual chord
Well c# is the language, the syntax. It contains the basic types and keywords. And dotnet is the runtime and provides standard libs including classes like Console, Math,...
Easier than c or c++ for sure
Oh okay thanks!
I would do something like, make the list public and when you create the VariablesForm, pass in the form so you can access the form directly from it. Goes in line with /u/tulipoika 's comment for a constructor. Another way, would be write functions to do things on the List as well, so you could call those from the other form as well, then you don't have to pass values back and forth. It would just access the data with whatever functions you provide. &amp;#x200B; Something like this: List&lt;T&gt; RegistryData = new List&lt;T&gt;(); public void AddRegistryData(T _data) { RegistryData.Add(_data); } public void RemoveRegistryData(T _data) { RegistryData.RemoveAt(RegistryData.IndexOf(_data)); }
well, that's totally fine for console apps. But as soon as you enter Desktop App / Web App territory, you absolutely *want* async code. Just imagine the ThreadPool starvation or the amout of Thread handling you would have to deal without it. *shudder*
especially now with the new Json-API in Core 3. (Yea i know, you can use json on WCF as well, but sadly i know not a single company that purposely does this, they all cling to XML, even if there is no need for metadata)
Beginner as in never programmed before? If so, depends how fast you can pick up concepts you are unfamiliar with 100%. If you have done any kind of programming it will be easier. Most concepts are the same in any object oriented language, so you just have to learn the syntax on how things are done in another language. Again it depends how fast you can pick things up. &amp;#x200B; C# is actually pretty easy to learn the basics. It's the advanced topics you are going to have to do research on. Things like understanding what Generics are. But I wouldn't worry about a lot of it until you learn the foundations of C#. &amp;#x200B; If you get to a point where you go, "There has to be a better way to do this..." then there probably is and you have to learn something new. It's probably some more advanced way of doing things or a short form. &amp;#x200B; For example, properties on a WPF form can have a get/set on them, but you can do it these two ways. &amp;#x200B; Longer way: int _num; public int num { get { return _num; } set { _num = value; } } &amp;#x200B; Short Form: int _num; public int num { get =&gt; _num; set { _num = value; } }
Here is a really to the point post about the new things by version that C# has done, so you can go through it and look each topic up to catch up on. It's not really overbearing until you get into C# 6 and 7. Even then, a lot of 7's things are Quality of Life improvements. Not all, but a lot of them. [https://blog.ndepend.com/c-versions-look-language-history/](https://blog.ndepend.com/c-versions-look-language-history/)
Well, it’s nice, sure. Desktop and web apps existed for years without it, though.
Does it mean you will share it at some point tho? Honestly, not interested what so ever in gaming and even less in creating a game outside a solid framework. I do however have a gui framework that is entirely drawn in gdi+ (manually, no pre rendered images) and I've experience the slow rendering that comes with that. So yeah, I guess few blog entries where you explain how you achieved that could be beneficial for some people. At least, I would read it.
That is true. MVVM is a beast if you are unfamiliar with it. Using the Code Behind to learn is a good way to learn the basics of Xaml's interactions. +1
You could try? Target Write `int.TryParse("34", out int num);` then go to Properties - Build - Advanced and set the language version to 6.0
while that's true, the whole market around them changed significantly. We process much more data than before, we have much more cores than before and most importantly - the users expect much more than before. User has to wait 5 Seconds for a process to complete? "Not Responding" is not great UX. So you write code that disables Buttons, toggles notifications, reports progress, allows cancellation... yadda yadda yadda
It kinda forces you to learn concepts earlier than you would in Python. Stuff like references was a major "oooh" experience for my friends learning Python, while I felt like I had to figure it out from the beginning with C#
you see, i have this list of Tags, that is sometimes a single Tag and sometime multiple Tags. I want to store all Tags of all media in a single List where each entry either contains a single Tag or multiple Tags. &amp;#x200B; Reviewer: So you always have N Tags? Dev: Yes Reviewer: Then store a single Tag inside a List that just contains that single Tag. e.g. `new List&lt;string&gt;{ "tag2" }` Dev: but that is not efficient, because it creates an extra object. Reviewer: technically it's true, but it does help maintainability greatly. Dev: Thanks, but i will try to find another solution that is more efficient. Reviewer: *Oh, that's this kind of dev again... well, i tried to help. Poor guy that has to maintain his stuff.*
Compiler magic
I'm not sure that that edition ever came with a CD, but these days people really should know that samples are usually downloadable from the publisher's web site. &amp;#x200B; This edition maybe not, but the latest edition's download is at: [https://www.microsoftpressstore.com/store/microsoft-visual-c-sharp-step-by-step-9781509307760](https://www.microsoftpressstore.com/store/microsoft-visual-c-sharp-step-by-step-9781509307760)
Yeah no. “The gold standard” means the highest quality option out there. The epitome. Visual Studio ain’t that. It’s a laughing stock, because of more than a decade of abysmal performance. Adoption is irrelevant. The gold standard means the best, and the best IDE’s around today are built upon the IntelliJ platform. Rock solid, full of functionality, fully cross platform.
.NET is: * CLR (Common Language Runtime). This runs the programs you write. * BCL (Base Class Library). This is a bunch of useful fundamental things like dates and strings, and low level functionality like networking and file access. * FCL ( Framework Class Library ). A bunch of libraries that provides useful functionality. ADO.NET (Database access) and WPF (UI library) are examples. Your C# is compiled into a language the CLR can run (IL) which looks a bit like machine code (The code that runs on your actual processor. C# is just one .NET language, VB.NET and F# are examples of others. All .NET languages compile to the same language the CLR can run, this means code written in any of the above languages can share code. It's essentially the same concept for .NET Classic and .NET Core.
DO NOT RENAME
With recent C# you can delare the out inline: SomeFunction(var out outParam)
Yeah. There was one in the same junkpile and my PC was a decade old and had the motherboard header.
You still need full-properties fairly often because it is more feature rich than auto properties.
Next time, you can go with [PackageReference (docs.microsoft.com)](https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files)
&gt; Others in team are not so enthusiastic about it so I'm looking for alternative. Before looking for an alternative, you should figure out **why** they're not enthusiastic about it. What issues do they have it for, what bothers them? Before you know what's wrong with your existing options it's pointless to evaluate new ones.
Just use that for the basics and skip straight to learning some mainstream frameworks.
About 4 C#s heh. To be honest the only changes that I think are really important (they're not even hard, you just have to check them out) are async/await, null propagation and to a lesser extent value tuples and local functions. Everything else is mostly meh.
If you’re leaning a concept which haven’t been changed a lot over time, like OS, compiler and whatnot, yeah you’re right. But a language that is extensively adopting new philosophies and features, I don’t know. I would rather want to learn using async/await without wasting my time on learning anti-patterns like traditional ‘callback’ styles.
Well, its related to implementation - you have no real control over it, debugging is complicated if you run into intermittent issues (messages not sent/received always) and it's a kind of a black box - you are not sure how downgrading connection is done, how are connection events handled and so on - we are much more open to small, compact solutions which are easy to take apart if they break down. This is the reason why we never used WCF - take a look at configuration of that monster. You could argue that thousands are using it (SignalR) without any issues but we would like to have at least two options - SignalR is one, we are looking for others. Also, if we don't find anything else that fits our requirements that will be pretty strong argument for SignalR - even though it has its downsides, if there isn't anything else we can use we will have to choose either SignalR or start reworking our in-house solution to support websockets and JSON serialization (currently its using .net binary serialization). Let's call SignalR "plan B" for now. We are looking for plan A.
Good and reasonable arguments. \*insert thumbs up ASCII here\*
i finally understand lambda expression thanks to you, cheers.
I've been programming .Net framework since its inception, and I'm trying to jump ship to .net core before Microsoft does. So far it's a losing battle.
Interestingly enough, my beginner students seem to pickup C# faster than people who have only ever coded in Javascript.
No problem :)
I feel like that with some of the limitations of Entity Framework sometimes too!
storing data in various formats is a great thing to learn. for json simply use the newtonsoft json library, for xml the system.xml is sufficient. I forogot one thing, object serialization can also be implemented
In my opinion you won't be a book to learn C#, Microsoft and the community provide excellent Resources to learn C#, and especially in the recent years C# and the .Net ecosystem took some big steps, I wouldn't read a book from 2010 because of that. If you really want a longer read anyways, The Yellowbook (http://www.csharpcourse.com/) is recommended by many people, completely free, too.
Visual C# was a free IDE, a lite version of Visual Studio, as far as I remember. &amp;#x200B; It is not useful anymore. Try to find books on C#
I know that since 2010 C# has had a lot of major changes... Since 2016 even, MAJOR changes! Good luck lad!
Here's one from Microsoft docs. &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods) &amp;#x200B; From the above link: &amp;#x200B; &gt;**If you do implement extension methods for a given type, remember the following points:** &gt; &gt;\- An extension method will never be called if it has the same signature as a method defined in the type. &gt; &gt;\- Extension methods are brought into scope at the namespace level. For example, if you have multiple static classes that contain extension methods in a single namespace named Extensions , they will all be brought into scope by the using Extensions; directive.
For your example, why not simply use public int num {get; set} ?
static void Main() { int\[\] processThisArray; HelloName(processThisArray); } static void HelloName(int\[\] returnThisArray) { // work goes here }
IMO: - Don't write extension methods to common types (e.g. `int`, `string`, `object`). - Don't write extension methods that are **not** applicable to **every** instance of the type. - Don't write extension methods for types you own. Just add the method to the type. And sometimes it's just more applicable to have a static class with (pure) static methods. If you're bothered about writing the class name every time you want to access such a method you can just use `using static` to import all methods to the current namespace.
C# is wide but not very deep meaning it has a lot of features but they rarely interact in weird and unpredictable ways. JavaScript is example of the opposite (although these days they've added a lot of features).
C# is a language. You're using a language right now. C# lets you say things like, "put a value in this variable" or "call this method". But if you want to do something useful, like "open a file", C# can't really help you on its own. The .NET Framework is a set of APIs. Those are like stories built with language. So when you need to "open a file" the .NET Framework knows how. So you need both. When you open a file with the .NET Framework libraries, they return values that you use C# to put in variables. Or you use C# to call methods from types within the libraries. C# can be used with a different API, and there are plenty of other languages that work with the .NET Framework. But it's true that for the most part, when people talk about "a language" they actually mean "a language and an API".
.NET 5 official release (probably sometime in 2020) will be actually unified release based on .NET core platform. Old .NET Framework ends with 4.8 and will receive only servicing updates, no new features.
If you want an advice, don't waste your time in translated books and read the english version. You'll improve your technical english and probably get cheaper and updated versions.
Short description: Basically, C# is what you write, .NET is what runs it. C# compiler tranforms C# code into IL (Intermediate language) for .NET. .NET then runs the program by transforming IL into machine assembly for CPU.
Go to the source if you want the best information. [https://docs.microsoft.com/en-us/dotnet/framework/get-started/overview](https://docs.microsoft.com/en-us/dotnet/framework/get-started/overview)
Your 2005 book is worthless. .NET 4 wasn't even out yet and C# was still very young/undeveloped.
They existed without async/await specifically, but they still used multi-threading to alleviate blocking the UI.
 Can you share it with me? It would be pretty helpful to me.
All the documentation needed is online and failing that, between YouTube and StackOverflow, you can learn anything!
Your argument makes good sense, but SignalR (along with most Microsoft code these days) is open source. So if something goes wrong you can compile it yourself and see what's up. https://github.com/SignalR/SignalR?files=1
As a counter-point, I recommend checking out the developer guides on Microsoft's documentation site. They're usually available in multiple translations and cover topics very well (as they're usually written by the community) https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/
Yes, you could download source and compile from it so when breaks, you can "easily" see what went wrong but it takes time and deep knowledge how it works - having source to see isn't enough because system is complicated - that's larger issue my team is worried about. Compare this to some bare-bones RPC system built around serialized methods + params... I'm not saying its perfect (we wouldn't be seeking replacement if it was) but smaller and simpler solution than SignalR would be nice. If there isn't any, well, we have alternative. Worst mistake now would be choosing something just because its popular and easy to implement and then later discover problems that can only be solved by deep diving into source of SignalR, WebAPI and Websockets. Whatever we choose now (in next few months) it will be base that will be used for next 5 years at least - we don't want to spend two years debugging some obscure issues affecting only javascript clients with frequent connection drops... Simpler the framework, less issues to debug.
I'm guessing you're setting it once in the constructor, which is run before the dependency property is set. Put a breakpoint on the set and see if it's ever hit after the ctor runs.
Waow just gonna call him out like that
&gt; “The gold standard” means the highest quality option out there. If that's what you mean by gold standard, well okay. I still don't agree with the notion but then we are talking about a pretty subjective thing here: choice of IDE. In my mind, gold standard refers to an industry standard; the tool that a vast majority uses. And Visual Studio is exactly that. &gt; Visual Studio ain’t that. It’s a laughing stock, because of more than a decade of abysmal performance. It was slow perhaps a decade ago, yes. But why keep lingering in the past? It's not slow now and this new programmer want a current IDE. It's absolutely not a laughing stock; I don't understand where you are getting this from. &gt; The gold standard means the best, and the best IDE’s around today are built upon the IntelliJ platform. Rock solid, full of functionality, fully cross platform. You are fully projecting your own experience and making it some universal truth. IntelliJ makes pretty good IDE's indeed. But nowadays VS is pretty damn solid, it is filled with functionality, getting really regular updates, has a great open extension eco-system and it's pretty fast (provided you don't use Resharper, apparently it slows VS down). And above all, it's free. **OP's question:** &gt; so if anyone can provide one that has **everything needed incorporated for C# programming with good layouts** that would be helpful. Visual Studio is exactly what OP is asking for. In the end: new programmers are best guided to VS because it's simply the standard for everyone and it's free to start with. Guides, how to's, tutorials, videos, everything is based on creation in Visual Studio. It has templates for almost any sort of application you can imagine. I'd only recommend looking at other IDE's when a programmer has fully grasped what they are doing. Otherwise you let new programmers pay $100 a year, for an IDE they cannot find examples for outside of the JetBrains site, with almost no integration with the rest of the Microsoft eco-system (Xamarin, Azure, ...), while they are still learning C# and figuring out what they want in developer life. It's simply bad advice.
Get a new book. A lot has changed since 2010, especially the way things are done. We didn't have things like .Net Standard and .Net Core for example.
Personally, I did it the hard way and rolled my own using the web browser control and REGEX filters. I've heard good things about both selenium and HTMLAgilityPack, the latter of which was recently used by a friend with limited C# experience.
Tried both htmlagilitypack and anglesharp and can recommend the latter as it allows you to find elements with css selectors!
I work with local recruiting companies who find me my contracts to work, by far the easiest way. I don't have to put in a lot of effort to find my next place, just answer the call, go for the interview, start the job.
I had same question for small hobby project. I chose htmlagility and it works ok. Didn't need to look further.
Missed opportunity for the author's byline to be [John "C" Sharp]
Write the shitty code, make it work, then refactor. Rinse-repeat, you can try and think about objects as you go. But overall most places just want you to get it working, once you do that then you can take a step back figure out how to refactor to make it more organized.
Implement INotifiyPropertyChanged on your control. Make sure elemenetName.Text raises the propertychanged event. ElementName does not need to be a dependency property unless it is the target of a binding. Use the property changed callback for ElementNumber: public static readonly DependencyProperty TestDependencyProperty = DependencyProperty.Register("ElementNumber", typeof(int), typeof(CustomButton), new PropertyMetadata(5, ElementNumberChangedHandler)); public static void ElementNumberChangedHandler(DependencyObject sender, DependencyPropertyChangedEventArgs e) { CustomButton thisControl = sender as CustomButton; thisControl.elementName.Text = elementNames[e.NewValue] }
Like the comment before me said. Non auto properties are good because you can say check if a null property is being passed and throw an exception.
The code on the CD is most likely the same code in the book, worst case you'll have to retype it from the book to try it out.
The metadata is important. I couldn't care less about XML or JSON for message transport, but I need a WSDL equivalent that is widely accepted. And if possible I would like to avoid the POST vs PUT vs PATCH nonsense as well as having some info in the message and some info in the HTTP header. The distinctions are too useful for web browsers, but too arbitrary for app to app RPCs.
I can help you. All you have to do is find the nearest trash can and place the book in it. There is nothing in that book that you can't find online, and there's a ton that's not in that book that is online.
Not really. We just faked it with background worker tasks or DoEvents().
Why did you spend $40 on a nine year old programming textbook that doesn't even include the CD?
Coming from Winforms I presume? First of all what you have isn't a button, that's a UserControl which is a ContentControl. WPF is "lookless." A button is a concept of functionality, there is no actual button graphic, just an applied default style. &amp;#x200B; You don't need to create a new button for this. You most likely don't need to create any kind of custom-control basic use-cases. Use a normal button then give it a DataTemplate in the ContentTemplate property. DataTemplates can dynamically be applied depending on the type bound to the Content of the Button Or if you want more advanced logic you can create a DataTemplateSelector, but that's unusual. &amp;#x200B; That's for the Content inside the button. &lt;Window x:Class="Wpf.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" Title="MainWindow" Height="431.377" Width="726.285"&gt; &lt;Window.Resources&gt; &lt;XmlDataProvider x:Key="ElementData" &gt; &lt;x:XData &gt; &lt;Elements xmlns="" &gt; &lt;Element Name="Hydrogen" Id="0" /&gt; &lt;Element Name="Helium" Id="1" /&gt; &lt;Element Name="Lithium" Id="2" /&gt; &lt;Element Name="Beryllium" Id="3" /&gt; &lt;Element Name="Boron" Id="4" /&gt; &lt;Element Name="Carbon" Id="5" /&gt; &lt;Element Name="Nitrogen" Id="6" /&gt; &lt;Element Name="Oxygen" Id="7" /&gt; &lt;/Elements&gt; &lt;/x:XData&gt; &lt;/XmlDataProvider&gt; &lt;/Window.Resources&gt; &lt;Grid DataContext="{Binding Source={StaticResource ElementData}}"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Button Content="{Binding ElementName=list, Path=SelectedValue, TargetNullValue=Button}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0" Width="75" /&gt; &lt;ListBox Name="list" Grid.Column="1" Margin="10" ItemsSource="{Binding XPath=//Element}" IsSynchronizedWithCurrentItem="True" SelectedValuePath="@Name" &gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;TextBlock Text="{Binding XPath=@Id}" /&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; &lt;/ListBox&gt; &lt;/Grid&gt; &lt;/Window&gt; For *appearance* of the button, which is something else entirely. You can either do it the simple way for yourself and just style properties. But if you want a completely different button, like a circle then it's a bit more work. You can right-click a button and pick "edit template" then "edit a copy" to get a copy of the default look, then edit that. &amp;#x200B; Here's the most basic circle-button, just add it within your &lt;Window.Resources&gt; and it'll apply to all buttons in your window. &lt;Style TargetType="Button"&gt; &lt;Setter Property="Padding" Value="2" /&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate TargetType="Button"&gt; &lt;Grid&gt; &lt;Ellipse Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}" /&gt; &lt;ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" /&gt; &lt;/Grid&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt; &lt;/Style&gt;
I can help you. Go back to wherever you bought that book from and return it for a refund. There is nothing in that book that you can't find online, and there's a ton that's not in that book that is online.
That isn’t fake :)
Trick question. You have to define what "learning C#" means. By analogy, it's like you just asked, "Is learning to use hammers, saws, and screwdrivers easy?" That's a definite yes but you probably mean, "Is learning to be a carpenter easy?" and that's a definite "no". But it doesn't matter what tools you use. In my opinion, some languages like Python are more gentle introductions to programming. Other people disagree with me, and argue what I see as Python's strengths are in fact weaknesses. It's not clear which of us is right. Lots of people go very far with Python as their first language. Lots of people go very far with C# as their first language. Some people start in one, then see the other and like it better. So really all I can say is "just start". If you don't like C#, pick another language like Python. If you don't like that either, maybe you just don't like "programming" and that's fine! I don't like basketball.
I don't think you showed all of the code. You say this is "all relevant code" but I don't see any code that uses `elementNames`. And I don't see the XAML template for the button, or anything that binds `Content` to something else. So if this is truly all of the relevant code, the reason you don't see "Beryllium" is you haven't bound anything to the `Content` property so there's nothing to tell the button to change.
Huh, interessting, at what time of the video did you saw that? I used the A\* pathfinding algorithm for the enemies.
Thanks
Is .NET the java equivalent to a JVM?
Partly. See /u/TriptychButWith8Bits 's answer
AngleSharp &gt; HtmlAgilityPack
Most of the new stuff in C# is syntax sugar, which is awesome, but not crucial to learning the basics, I agree with you, OP is on the right track.
And for working with Excel sheets, check out [EPPlus](https://www.nuget.org/packages/EPPlus/). Works without requiring Excel to be installed. Great for web apps.
Thank you! I am currently 17, I started programming at the age of 14. Here is my resumé: [https://www.stephcraft.net/portfolio/#cv](https://www.stephcraft.net/portfolio/#cv) ;) I am certainly going to add cs dungeon to my portfolio.
Hey, consider taking a look at [Alura](https://alura.com.br), [Caelum](https://www.caelum.com.br/apostilas) and [Macoratti](http://macoratti.com.br). Those sites can provide you with some good resources, no matter what your skill level is. Also, do you know programming at all? Because if you have no knowledge and want to start with C#, I highly recommend you start first with some logic/pseudocode practice and then go to C (not C#) -- don't worry about pointers and memory management, you just need to know how to code programs that work and understand why they work. After that start to read up on object-oriented programming and then you go to C#. I only recommend those steps because going from not knowing how programming works to straight away trying to program in an object-oriented language can be difficult and overwhelming.
:O No way, is it really possible to export a windows form project so that it can run in a browser?
You do not get bad habits out of reading a book, you get them out of writing code. After reading a book you should use what you learned to start reading code out there and more importantly, read C#'s documentation, which is much better than a book for learning about its features.
Oh right so without .NET c# is nothing?
Ohh right okay thanks!
Okay thanks!
&gt; Don't write extension methods to common types (e.g. _int_, _string_, _object_). Why not? I feel like some of the more common extensions I add to almost every single project end up being adding things like ContainsIgnoreCase() and EqualsIgnoreCase(), adding a Yes/No ToString() variant to booleans, and other common formatting method shortcuts to other built in types. I don’t see why you wouldn’t want to do this...it’s not as if you are somehow polluting the global scope or accidentally overriding other instance methods; this isn’t JavaScript. Having the methods available is completely opt-in, as you need to have the extension namespace in scope to even see them. Further, the very first example of an extension method in the MSDN documentation provided in another comment is of adding an extension method to the String class.. &gt; Don't write extension methods for types you own. Just add the method to the type. While I think I generally agree with this, extensions still have a use with _interfaces_ you own. I do this all of the time; it’s the best way we have right now to containerize methods that have a single implementation that should be available to any implementer of an interface. &gt; And sometimes it's just more applicable to have a static class with (pure) static methods. If you're bothered about writing the class name every time you want to access such a method you can just use _using static_ to import all methods to the current namespace. ...why though? An extension method is literally syntax sugar around a static class with static methods, and can even be called in an identical fashion to normal static methods if you desire. Maybe this is what you were getting at, but the system I normally use to decide whether a method should be a “normal” static method or an extension is purely based on subjective feel. Does this method _feel_ like it would make sense if it was actually an instance method? A lot of the time the answer is yes, especially if the method is just operating on the one argument.
Out var, actually, and that’s what we’re talking about :p
1:39 timing
Yeah, this is threads gradually being added to the pool to increase capacity. IIRC one a minute sounds about right.
Oh, I see. Thanks for the feedback :D didn't saw that. I made the second level to test the chests in small environments.
Theoretically, one could write a compiler that processes C#, and there are in fact other implementations such as Mono or the engine in Unity 3D, but you'd still need a bunch of capabilities such as Garbage collection and the whole BCL and so on... In fact Mono and Unity don't have the exact same capabilities offered by .Net Framework. Neither does .net Core - there are a bunch if differences between all of these frameworks, but people work to cover the differences, and the basics are required everywhere (such as Garbage Collection)
Oh right okay thanks!
you don't need to pay to learn how to program these days. I get what it's like though - you're spending money as part of your self commitment. You just have to realise that nothing can substitute just getting your head down and following some tutorials.
/r/NominativeDeterminism
Just wanted to let you know it worked. Thanks again, cheers
I would also add string interpolation, nameof, expression bodied members, out variables, static imports and property initializers. At this point it is not so meh.
Glad I could help, I do WPF all day so feel free to DM me if you get stuck.
I think it's philosophical, but also has to do with the propensity for clashes. One nice set of extension methods I've seen let me create `TimeSpan` instances from primitives like: TimeSpan timeout = 10.Seconds(); So let's say that lived in a namespace like `MyProject.Extensions`. And later, I pull in some larger library like Noda Time and it *also* defines a similar extension method. What happens if I try to bring in both namespaces? Seeing as so many projects put *all* of their extensions in one namespace, I end up in a scenario where I can use *my* extensions or *their* extensions, but not both. And I probably want some subset of both, but I don't have a way to tell C# that. Static methods can be fully-qualifed so don't have this problem. You can directly call an extension method but that defeats the syntax sugar. I think that's the reason for "don't use extension methods for primitive types", and I think it's meant to have "...if you are releasing a library" attached. The odds that you might clash with some other library's extensions are higher than if you used static methods or some other means of providing the methods. But if it's extensions within the scope of your project, and you're the only consumer, you can break it because you know if you're going to introduce something else that clashes and can take means to address it. (I also think this suggests a guideline no one follows: DO have a more complex namespace hierarchy for extension methods so clients can choose which ones to bring in. That gets messy if you have a lot, but overall I think it's an indicator that extension methods have as many problems as the solutions that existed before they were introduced.) A thing to keep in mind about guidelines is they aren't always true. They exist to help us understand what works best in common scenarios and, ideally, what the problems that led to their creation were.
Will do
Well, it has a very clear language specification. So we know exactly, in painstaking detail how the language features must work. But languages are useless without support. There's no point being able to loop if you can't do something with the results like print them to the console or write them to a file. Equally, having something that can write to a file is pointless if you have no language to tell it what to write C# is part of a family of languages that allows developers to use .NET. It's probably the most popular of the languages, but importantly, if you want to do a bit of F#, you could compile that code, send it to NuGet and use it from your C#.
You'll definitivly learn bad habits from a Book on .NET 1.0 or .NET 1.1 - so many mistakes in API design alone. I'd say .NET 2.0 was the first decent version, as was 5 for Java.
You do get horrible habbits from learning how something was done and having to unlearn it on top of having to learn the new way. I simply fully disagree with your advice there, if one thing is harder than learning new habbits it’s unlearning old ones and that’s what happens when you’re so many versions behind
3.5 was the first stand out version between linq wpf and wcf, but 2.0 was clearly the first « serious » version. We need to build a time machine to get rid of pre-generics .net
Okay thanks!
Making a UserControl with dependency properties seems to me to be only for a case where you want reusable components. If it is a one off, I would avoid using dependency properties. I cannot see the `CustomButton.xaml` file, but I would expect there to be a `{Binding ElementNumber}` with a Custom Converter that returns the string value you are wanting. Otherwise you would have to implement the PropertyChangedHandler to do it in a code behind way.
Because this is visual studios default template for a console application?
You are creating the new console project using the .NET Core console app template. That template provides a Program.cs file with the "hello world" stuff you are seeing. The regular .NET Framework Console App template does not have the hello world stuff.
I really appreciate your detailed reply. I'm new to UI in general really. I picture myself as a backend developer, but still want to learn front end. I'm going to play around with the guidance you've provided and see what I can come up with. Thanks again!
I hope it’s not late to return the book. I recommend you just go through this and you will learn c# https://youtu.be/sQurwqK0JNE
Thanks! :D I plan on releasing it
You may be trying too hard. OOP is a way to keep related functionality and data in one place. Somewhat similar to putting putting all screws in one box and keyboard parts in another. Just curious which part do you find too difficult?
What I'm doing is creating an interactive table of elements, so I would need to use the control for each one (I think).
To me Linq is still the single most valuable feature added to the language. I seriously hope we get rid of all that legacy crap once we're on 6.
In this tutorial video, it doesn't happen though. The main body is empty without any hello world stuff. I opened a new Console App just like the video. https://www.youtube.com/watch?v=hKEf4zlVXp8&amp;list=PLsrZV8shpwjMkG96rkKLdNiX02S5LPIqS&amp;index=3
Thanks for your edit! Though I value the input of others and the options they recommend, your answer was what I was trying to make happen.
When you choose "new Console App" you aren't actually doing something hard-coded in Visual Studio to make a blank console application. In reality, you are selecting "a project template", which is a set of files that consist of kind of prototype .csproj and .cs files for Visual Studio to put in the directory you specified after filling in some wildcards. So when you watched the tutorial video, they had a project template that created a blank project. It could be that they've modified their templates. It could be that they have a different version of it than you. This isn't the kind of difference to flip out about. Just delete the code you don't want and keep going.
How can I get a normal "New Console App" template with empty main body without "Hello World" in it?
Yea, took a while to explain linq to my coworkers but as soon as i used linq my wcf services method all started with return followed by a query pretty much.
Glad you got it. Good luck in your studies
I want to start with, "Why does it matter?" If you think you have a good answer for that, it would be a good idea to ask your favorite search engine, 'How do I add project templates to Visual Studio?' MS and lots of other people have written tutorials and it's a complex enough process it's better to read their opinions.
My main advice working with WPF is: always have in the back of your head that even if something might seem like a lot of work or convoluted to create, it can always be applied as a style at different scopes in the application, including application-level. Control appearances and data templates that show data in certain ways are re-usable resources. In short: WPF makes skinning really easy.
It's an eyesore. I don't want to have to delete the unwanted codes every time I start a new project.
You're not going to be creating enough projects for that to matter.
Fair enough. Rolling your own can be very useful. Good luck!
I'm not going to comment on the actual code because honestly I don't want to look at it. However I'll definitely give an upvote just for using source control. Too many self-taught people don't even consider it when starting out.
That's a good reason! Sometimes people believe if the template starts with that code but the video didn't, they can't possibly write the same code as in the video. I wanted to dispel that if it was what you believed. [This is a good source](https://docs.microsoft.com/en-us/visualstudio/ide/how-to-create-project-templates?view=vs-2019) for information. The basic process is: 1. Make a project exactly like you want the new project to be. 2. Execute the wizard as explained. 3. (Optional) Edit the template files to further customize it.
If the "hello world" code is an eye sore, you are really going to hate most of the other built-in project templates.
Thanks.
&gt; It's an eyesore. I don't want to have to delete the unwanted "Hello World" codes every time I start a new project. You've now wasted more time with this thread arguing why a template actually has some template data than deleting the two words would ever take. time wasting with arguing against something so inconsequential isn't going to make you a good programmer.
You are actually on the right track to writing a nice control. Couple tips: You will rarely, if ever, want to define your data in XAML. Others have mentioned you should not use a dependency property. The question you need to ask is "Will this property be the target of a binding? i.e.: &lt;Control:CustomButton ElementNumber="{Binding SomePropertyFromAnotherControl"/&gt; If the answer is yes you want to use a dependency property. You are probably using a dp correctly in this case. Make your control implement INotifyPropertyChanged Add string property that raises propertychanged event Set the string property in ElementNumberChangedHandler: thisControl.ElementName = thisControl.elementNames[Convert.ToInt32(e.NewValue)]; Add a textblock in XAML: &lt;Grid DataContext="{Binding RelativeSource={RelativeSource AncestorType=local:CustomButton} }"&gt; &lt;TextBlock Text="{Binding ElementName}" &gt;&lt;/TextBlock&gt; &lt;/Grid&gt;
Yeah you could probably get it to work. However it essentially runs on server and renders updates to browser similar to server-side blazor. So the latency would probably kill your performance. I know they are working on moving towards .net standard so maybe it could run on mono/wasm sometime in the future.
Check out their examples. I assume the custom painting one is where you would start. https://wisej.com/examples/
From everything I've read, it seems like source control, data structures &amp; algorithms, and design patterns seem to be where most self-taught people are lacking. I've been trying to set some time aside to focus on these while I learn the language. Hoping it helps keep things tied together while I learn.
How long did it take you to get to where you are? How much time do you usually spend teaching yourself?
There are many different ways to do this. top level idea: make a custom class for elements: ``` public string ElementName {get; set;} public string ElementSymbol {get; set;} public int Row {get; set;} public int Column {get; set;} ``` make a template and use an ItemsControl to show a List&lt;Element&gt; all in the right places in a Grid.
I've tried to commit myself to spending at least an hour every night during the week, and at least three during the weekend. It usually ends up being more. Sometimes thats reading or watching videos, and not necessarily coding. I also listen to podcasts during my drive to work, and browse forums during lunch. I started right around the beginning of the year. I've got nothing really to gauge my progress off of, so I'm not sure if I'm behind the curve or not.
Thank you for the information! I will for sure give it a try.
Nice job! Just a few things I noticed while quickly looking it over: You don't need to add the User, Date, Time comments to the top of your files, that's all stored in the Git history and you can "blame" any line in a codebase and see who wrote it. (Unless someone squished a chunk of commits that is but you wouldn't need to worry about that) &amp;#x200B; You should be more specific with your accessor modifiers on your properties, I know they default to private, but its nicer at a glance if you throw a private on there. Some people don't prefer that, so do with that what you will, but I find it easier to read. Other than that you might be doing too much in your models, maybe break out the randomizing of the numbers into a service that creates the objects for you behind an interface so you can get some experience with those. Otherwise for a first app this is fantastic! I will also piggyback on the other comment about your use of source control, thats awesome!
Nice pretty solid program. I would look more into the details of a relay command. For a bigger project you would need a folder for views too. Keep up the good work. Nice hearing from one like me programming something with a mechanical engineering background. Let me know if you need any help.
Use selenium for automation; not for scraping. Selenium's scraping is orders of magnitude slower than HtmlAgilityPack and AngleSharp. I had a project where I did it all with selenium. When I switched the scraping to HAP, it was so much faster that I thought I'd broken something.
Correct. I misread previous comments. Thanks for correcting me.
Thank you for the feedback. I've been bouncing between Visual Studio and SharpDevelop depending on where I'm at (SharpDevelop being portable) and SharpDevelop adds that info automatically. I was never sure what the standard etiquette was for the private modifier, so I appreciate the input. Do you by chance have a link to a tutorial or example project for the model idea you mention? I'm still fuzzy on properly using interfaces, but it's on my list of things I know I need work on. Again, thank you so much for the feedback! The more I learn about programming, the more I want to learn, but I also want to make sure I'm not learning bad habits early.
Any plans sharing the code? I'd be interested in how to use GDI+ in winforms.
Thanks, I appreciate it. I'll definitely look more into relay command. That's one of those WPF-ish concepts i'm still in the middle of wrapping my head around. I have a views folder in another project I started with multiple views, but is it common practice to still have one with just the one view? Thanks again!
You should consider writing tests as it's the quickest way to have a feedback about assembly issues. If you're using dependency injection, you could write a simple test that just runs the bootstraping part and it will naturally fail if there are assembly issues. That's your best option.
Você pagou muito caro em um livro muito velho.
É um livro velho mas ele é bem completinho.
What C# podcasts do you listen to?
Of course, but I meant I saw a property with no-logic get/set, just simple assign or access.
I meant I saw a property with no logic, just assign to or read from the field.
No problem! I am not sure of a specific tutorial, but here is a tutorial going over the factory pattern which is very common and uses interfaces heavily. You would learn quite a bit about their usage from following it: https://code-maze.com/factory-method/ Also, feel free to message me if you want help with anything or are confused about something. Even if I don't know the answer at least we will both learn something! :)
Thank you. I'll check that out tonight. I picked up a copy of the Gang of Four book a couple weeks ago, but I haven't started it yet. Still reading Clean Code. My plan is to finish Clean Code, move to the Pragmatic Programmer, then Code Complete 2, then GoF. Also, I appreciate your offer. I may be taking you up on that!
Coding Blocks is the one I've been listening to on my drive lately. Not C# specific, but a lot of good general coding information. That's where I first heard about some of the books I've been reading, like Clean Code.
Can you post your code to pastebin or something?
i think htmlagilitypack is no longer being developed, right?
https://pastebin.com/bCQjgYtG Here you go! The class objects defined in the MonoBehaviour class are not accessed outside of the script yet despite being public, so there's no outside interference that could be going on.
.net is Microsoft's framework that the c# language sits on. You should really take the time to learn about programming basics before you try to make a game. Learn more here: https://dotnet.microsoft.com/learn
Oh, also, the 'produce' class is defined in a different script, but it doesn't inherit any MonoBehaviour functions, it only has functions I call at specific times.
We recently started to work with puppeteersharp [https://github.com/kblok/puppeteer-sharp](https://github.com/kblok/puppeteer-sharp) and haven't had any issues yet. htmlagilitypack is great but to my knowledge has issues with dynamic javascript driven sites. We therefore use both. Puppeteersharp which is a port for headless chrome based puppeteer and agilitypack.
I will just learn as I go, trial &amp; error. (Also, I can learn from others who already have tried.) So, when you say .net is a framework, it means .net is essentially another programming languages I should learn the codes &amp; commands on, right? Do I need to know .Net commands to make a smartphone game?
If you want to make a game in Unity, yes, you should be learning C# (which is, for your purposes, interchangeable with .NET.) Unity is not a language, it's a framework. There is no language called 'engine', Unity is a game engine.
Can you explain the issue you're having a little more?
It sounds like there is going to be a few more steps between now and you producing a game than you're anticipating at the moment. Step #1 is going to be something along the lines of "Google literally everything and don't stop reading what you find until you find something that leads to some understanding and a lot of new, more specific questions" &amp;#x200B; The question you've just posted is pretty inaccurate and while posting a wildly wrong answer to your own question really is a great way to get someone to post the right answer, this is just far too general for most of us posting from our desks at work to really start answering. &amp;#x200B; This is a bit like asking "what is this planet, what is ground, I want to build a house"
Didn't they implement it in PowerShell too as some major feature? Never bothered to look at it, What's the deal with it and why is it bad?
&gt;wageslave isnt this just called "having a job"?
Okay, I'm gonna simplify it a bit since I think all the technical terms I used got mixed up and I confused myself: I'm setting variable 'A' as I would ever do to the value of another variable, variable 'B', by putting A on the left of an equals and B on the right. However, when I run my project, B is set to A when usually A would be set to B under these conditions. I switch the variables from each side of the equals thinking I just made some mistake somehow, resulting in A on the right and B on the left, but it gave the same result as putting A on the left and B on the right.
Do I have to learn .NET codes &amp; commands? Do I have to learn Unity codes &amp; commands? At the moment, I am just using online tutorials for C#.
No I'd rather not have anything simplified. What is actually being put into `currentProduceHeld` and what are you expecting it to have? From what I'm seeing, it should be `null` unless you uncomment that for loop. Taking a stab in the dark here but do you understand the difference between reference and value types? I'm guessing somewhere you make a change to the `currentProduceHeld` object and you're wondering why those changes are appearing in the array? Again, a bit of a shot in the dark because I'm not seeing anything that could be causing you issues.
Guessing here, but it sounds like a lifecycle issue e.g., at some (earlier) point in your program, the state you're expecting (A=B) exists. Then a custom event, method call or lifecycle event changes the state prior to your point of inspection. Probably due to where you're updating currentProduceHeld\_Index.
No, .net is not a language, it's a framework. If you don't know the difference you really aren't going to get far making a game.
Since you managed to commit executables and other stuff that the .gitignore should take care of (which it didn't), I made a pull request that removes all those files. Otherwise, good work. I didn't look a lot at the code, but it looked pretty solid to me.
Sorry if that last messaged I sent sounded rude, I am preoccupied with a pretty stressful IRL situation but I'll try to keep my cool a bit more in this text. I mostly simplified it for myself since I was reading back on it and not understanding what was going on. Anyway, yeah, all 9 inventory slot array spaces are set to nothing upon being defined, but the 'produce' class is made up of 3 other classes, each containing values that ARE defined. Despite doing C# for a few years now, I don't understand fully the difference between reference and value types, I'm sorry about that also. My goal of this is to make currentProduceHeld equal the the inventorySlot array's indexed value for position 0 in the array's 'produce' class. 'currentproduceheld' IS of the type 'produce', so im setting a produce to a new produce value, which in my head doesn't create any type issues. I'm just really lost on this, I feel like this is such a simple script that nothing should be going wrong like this.
Do I have to learn .NET codes &amp; commands? Do I have to learn Unity codes &amp; commands? At the moment, I am just using online tutorials for C#. (If there are separate codes &amp; commands, it's pretty much like a language.)
It's drag and drop programming of the worst kind. Everything is nested inside collapsed regions making it impossible to read it as a flowchart. Too hard to use without knowledge of C#, so worthless to casuals. Too clumsy for professionals, such that 5 or 6 lines of C# may take two pages of nested boxes.
Thank you. I just used the generic Visual Studio .gitignore when I set up the repository. It may have something to do with the fact that I've been bouncing between SharpDevelop and Visual Studio, but I'm not sure. Either way, thanks!
I wish I could say that this is the big 'aha!' moment, but I'm afraid not. The inventorySlot array, the currentProduceHeld variable, and the index have not been modified outside of this script yet, the only thing in here from outside of this script is the 'produce' class itself used in the 'inventorySlot' class, but the variables involved with that class are separate from what I'm trying to do here, which is set one 'produce' class to the values of another, but for some reason it's only setting one to the other and not the opposite way around if I put the values on opposite sides of the equals sign.
Forget you ever heard about '.NET'. It is not important for what you're doing. You need to learn C# and then you need to learn to use Unity's toolset within C#, a set of classes and functions to do game stuff.
Thanks. So I only need to learn Unity commands &amp; C# to make a smartphone game. (It's going to be similar to ping pong.)
There's nothing wrong with the equals sign, I assure you. :) My money is on some event not in your pastbin is modifying the currentProduceHeld\_Index variable, which is a value type. Ref vs. value types are tricky if you haven't worked in lower level programming languages before but they're an important concept in C# for this reason. In your code here, currentProduceHeld\_Index is an int and therefore a value type whereas your custom class instances are treated as reference types. They innately behave differently, particularly when you're copying their contents into other variables. [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types)
I couldn't copy the CD, it was unreadable :\ however found the link where you can ge the same stuff from microsoft https://www.microsoftpressstore.com/store/microsoft-visual-c-sharp-2010-step-by-step-9780735626706
You weren't rude so don't sweat it. I just want to avoid confusion around talking about hypothetical code and think it's better to stick to what you've provided. So it doesn't matter if the produce class has any values initialized on creation. Since you're not currently initializing the individual inventorySlot in your array, everything is just going to be null. You need to do something like: for (int i = 0; i &lt; allProduceHeld.Length; i++) allProduceHeld[i] = new inventorySlot(); After that, you'll have actual objects in your array and can access their properties like `allProduceHeld[0].produceOfSlot`. But with your current code, `currentProduceHeld` should always be null. Is that not the case for you?
Alright, this is helpful, currentProduceHeld_Index unfortunately could not have been modified outside of this script since I only just created it in this one. However, learning that defining a class as a type makes C# treat to it as a reference and not a value is very helpful. I have learnt that I can use what is known as a 'struct' to essentially have a class be a value type rather than a reference type, I will report back after trying this!
Thanks for trying to help me anyways
In theory, yes. I wouldn't simplify Unity as a bunch of 'commands'--it's an entire framework. You start with Unity and write scripts in C# for it, rather than the other way around.
&gt; Puppeteersharp Can this library be used for example: scroll to bottom of page to generate all dynamically created content and then to fetch it?
That's so strange. And this "persistence" and parallel stuff doesn't make up for it?
Only onna mobile so can't really read through it properly, but one thing is to use nameof(Property) rather then "property" for the OnPropertyChanged args, that means you can't type and if u rename the property that'll rename the arg as well. Also if u create a BaseVM class which implements INotifyPropertyChanged and inherit that, that way you'll only have to write the implemention once, but from a quick look it looks great!
That's so strange. And this "persistence" and parallel stuff doesn't make up for it? I can already picture how this would go with my colleagues. They'd actually be forced to write what happens at every part of the flowchart instead of just having a "wishful thinking rectangle where stuff magically works out" like they do in Visio. Which means the entire technology is worthless if it doesn't allow for incompetence.
Alright, update, structs are not what I thought they were. While they are value types, you can't do anything but declare variables without a value and methods in them it seems, which I need to do more than that. Thank you for your help regardless, I will read further into reference vs value types.
Unity is a framework but has commands &amp; codes not part of C#. I have to learn those commands &amp; codes separately, right? .NET is also a framework but I don't need it to make a smartphone game, right?
There's an extension package for HTMLAgilityPack, that allows you to use CSS selectors as well. However HTMLAgilityPack had memory leak issues for me
That's the one. I might be remembering wrong too based on the downvotes I got.
Those are two really great pieces of advice. Thank you! I actually could have used the property one while I was writing this program, because I changed names a few times so they made more sense and forgot a letter. Also, I've seen the BaseViewModel in some of the videos I've watched, and never made the connection that that is what it was doing. I feel a bit silly that I didn't catch on to that sooner, but I'm also super grateful you pointed it out. Thanks again!
I doubt you'll be able to do that. Would make bitlocker pretty pointless.
Javascript is older than C# by more than a decade.
There's no such thing as .net codes and commands, it's a framework that has hundreds of class libraries that you can use to help build applications. If you don't understand that, you really need to go back a few steps.
This might help: &amp;#x200B; [https://stackoverflow.com/questions/56685540/mvc-post-collection-as-model-without-ordered-index](https://stackoverflow.com/questions/56685540/mvc-post-collection-as-model-without-ordered-index)
Shouldn't be a problem. git works the same, since it's the same repository. You still have to accept the pull request (just, so you know).
Alright everyone, I have the answer, and sadly it's really, really simple, and I feel a little bit silly, but it's all okay because we have the answer! So it turns out that changing the value through Unity's inspector at runtime for easy modification purposes was working just fine, BUT, Unity rendered the text incorrectly and displayed the number from another box open alongside it. When I Debug.Log printed the ACTUAL value, it was set just fine. So basically, there wasn't an issue with the code after all, it was just rendered incorrectly in the inspector. Ah well, I would be more annoyed but it's solved so there's no issue!
well uhh, that was me
Alright, good deal then. I'm going to wait until I'm home this evening so I can practice checking out the branch and testing the changes. I figure it doesn't hurt to get used to it now.
Just do the tutorials dude
Hazard of IEEE floating point. Options: * use `decimal` instead of `double`. This will be slower, and cover a smaller range of values, but it uses a decimal representation, internally, so you wouldn't have *this* problem. * use `Math.Round()` to control the behavior. There are overloads that allow you to specific the number of digits retained after the decimal and how to handle rounding from, e. g., 0.5. The rounding behavior is a little limited, however, so you may want to * build your own rounding method, to guarantee that numbers are rounded the way you want them to be rounded. Consider reading up on IEEE floating point. It's a pain.
fuslogvw (Fusion Log Viewer) can help to list the dependencies used by an ASP.NET site.
A little trick that might help you (probably all cases that will concern you) is to Math.Floor after adding 0.5 to the result, essentially it helps you have proper rounding.
It really doesn't, do it at your own pace. It's not that critical anyway. I just saw it and thought, I could help you.
Tip: In visual studio if you type “prop” then hit twice it generates the auto property boilerplate for you. If you type “propfull” and hit tab twice, it does the boiler play for a full property and local variable. :)
When you’re at the point of wanting (or even knowing) about asynchrony, then yeah, time to check out the latest language features but if you don’t know a while loop from a variable, this book is fine.
Visual Studio should still support this. You can add the WSDL as a service reference and the IDE should generate the WCF client classes you need.
Yep, let .net build the client code. Import the service reference and it will give you classes
You've pulled off some exceptionally impressive rendering with Windows Forms. I'd be very interested in either seeing the source code or, even better, a series of blogs explaining how you went about rendering this game. I did custom controls development for the first 6 years of my career and I'm *astonished* this works.
Yes, even if you only have one view it is still common practice. This is because it's also common practice to keep the namespaces of the classes the same as the folder structure, so View1.xaml should be in the namespace {SomeAssembly}.Views
You won't be able to guess the key, by just using random string combinations. And you need to know the algorithm used. Are you thinking about the way enigma was solved? Enigma had a very short key. But Bitlocker will be using a large key, and it would from now and to the end of the universe for you to randomly come up with that key. To properly break the encryption in a timely manner woukd require extensive knowledge in cryptography, if it is even possible to break the encryption.
Unfortunately, with the data i am storing if the number is 500.9 it should go to 500, it can never be rounded up.
I'm using VS2013. But it shouldn't be radically different, right? I found two places to add a service reference: As a service reference: [https://i.postimg.cc/nVGmH1V3/soap1.png](https://i.postimg.cc/nVGmH1V3/soap1.png) As a web reference: [https://i.postimg.cc/HkRcSZ3k/soap2.png](https://i.postimg.cc/HkRcSZ3k/soap2.png) Either way doesn't work, as I'll show in the following pics: Service reference client code: [https://i.postimg.cc/8zjfmQRY/soap3.png](https://i.postimg.cc/8zjfmQRY/soap3.png) Web reference client code: [https://i.postimg.cc/wBNtnXbc/soap4.png](https://i.postimg.cc/wBNtnXbc/soap4.png) My attempt to use the service reference: [https://i.postimg.cc/1XmfgLRJ/soap5.png](https://i.postimg.cc/1XmfgLRJ/soap5.png) My attempt to use the web reference: [https://i.postimg.cc/cHMvLsW-v/soap6.png](https://i.postimg.cc/cHMvLsW-v/soap6.png) Is this shit just broken in VS2013?
Dude, you forgot a semicolon after 'set': public int num {get; set;}
Bitlocker by default uses AES-CBC-128 encryption, which is [resistant to brute force known-plaintext attacks](https://crypto.stackexchange.com/questions/1512/why-is-aes-resistant-to-known-plaintext-attacks). It's not practically doable - it would run for ages.
I think you're good. C# is very backwards compatible, so 4.0 code will work right alongside 7.0 code. When they came out with 5.0, 6.0, and 7.0 I was not in a rush to use any new features... except for string interpolation.
You need to put those lines inside a method.
Interfaces for some reason were a tough concept to grasp for me. I totally understood what they were but I did not understand WHY you would need to use them. I found that the book "The C# players guide" was a great book for explaining those concepts. I come from a similar background where I dev on the side, but not by trade. I have found it difficult at times to go from beginner concepts, to intermediate concepts to advanced concepts. It would be great if there was a book series that started from the ground floor, then part 2 that got into more advanced concepts such as interfaces, DI, patterns, and then part 3 that got into stuff like deployment models and microservices etc. I think alot of folks would be interested in filling in gaps of knowledge. Sorry for the rambling just to say I have been in your shoes and its cool to see folks that dont do this stuff for a living but still like to play.
I used HtmlAgilityPack in a scraping project and it did the job for me. Will give AngleSharp a try in my next project following the feedback here
Yes thats exactly why it utilizes headless chrome.
Absolutely savage.
You're not inside a function or a method, the only thing you should be doing there is declaring members. You need to put the "service.Add" line inside of a function.
public class Class1{ public Calculator service; ... public Class1(){ service = new Calculator(); service.Add(...); } }
Oh great, that's what I thought headless is being used for, but better safe than sorry. Thanks a lot mate :D
well now i'm wondering what in the world the purpose of the blog i read was, lol.
Just create a GUI using VB, and keep enhancing until it opens. I saw it done on tv.
If there are hundreds of class libraries, I have to know those library commands, don't I? So, if I want to make a smartphone game, I have to learn commands &amp; codes from C#, Unity but not .NET?
D'OH!
I admit, I seems like I have absolutely no idea how to help you in your specific case :p
&lt;input name="Parent.Child\[0\].GrandChild\[0\].ID" type="hidden" /&gt;
Structs can do most things a class can. All fields have to be initialized which can give some weird errors.
Looks like I'm adding another book to my list. Also, thanks for this. It's always reassuring knowing other people had/have the same struggles and can relate.
You can have a Response&lt;T&gt; class and pass Response&lt;User&gt; to GetJsonAsync that way you can reuse response with app the page data and have a generic "data" list inside. Or even Response&lt;List&lt;User&gt;&gt; if data can be anything
I’ll take a look soon! I’ve started to work with UWP in C# since I had a windows forms background. Feel free to shoot me a DM, I can send some helpful courses your way, both in WPF and UWP. Possibly even collab on a project at some point!!
Sounds great, and thanks!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [VS Extension Development | How to extend Test menu option?](https://www.reddit.com/r/dotnet/comments/c31xro/vs_extension_development_how_to_extend_test_menu/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
TODO VEZ QUE EU PEGAR UM LIVRO DE C# NAO TEM CD POR QUE QUE?
TODO VEZ QUE EU COMPRAR UM LIVRO DE C# NAO TEM UM CD POR QUE QUE?
I don’t have any audiobook suggestions for C# but wanted to point you towards programming podcasts. There are many excellent C#/.NET related podcasts. Imo those lend themselves better to the audio format than programming books.
##Formatting/Style Definitely pull in that gitignore request. Build artifacts don't belong in the repo. My opinion? Install [XAML Styler](https://marketplace.visualstudio.com/items?itemName=TeamXavalon.XAMLStyler) and save all your XAML files again. It lines up things and makes it easier to digest xaml. All the top level panels in your UI contain RowSpan="X" which means to me you didn't really use the right layout/panel for the job. You really have two or four rows (header, space, Core functionality, generate button) and three columns (being weapon type list, spacer, and generated item). The header and the generate button would be reasonable to have a column span. Your window resolution is too small - it cuts the bottom of your weapon selection control off. I assume generating an item (on the right) should stay generated. If you generate a weapon and then select a new item, the generated weapon detail changes. That seems incorrect. (Binding on the right should be to your GeneratedWeaponArchetype When adding comments I try to figure out how to make that function more expressive. In the case of your header label, I would make use of TextWrapping and setting the width, rather than adding in an edge case to your code base. In each of your properties you call `OnPropertyChanged("WeaponArchType")` or something similar. Prefer using `OnPropertyChanged(nameof(WeaponArchTYpe))`. Reason being is that this will get auto renamed with refactorings of property names whereas your defined strings will not (and cause missed updates). The empty constructor is unnecessary in ConsoleViewmodel. Instead of adding UI logic to your Viewmodel for errors (no selected weapon type) just disable the generate button unless something is selected. This would likely use style triggers and `{x:Null}` This is a simpler implementation of your property changed handler. `PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));` which says if the handler is null or has no subscriptions, don't invoke. Same as your code with less lines. ObservableCollection isn't necessary in this case. That collection type is used if the bound collection will change at runtime. For your current implementation, that will never happen. ##Concepts I have some more advanced UI suggestions for you using DataTemplates to display the generated item, but it might overwhelm so I'll just leave a [link](https://docs.microsoft.com/en-us/dotnet/framework/wpf/data/data-templating-overview) `new RelayCommand(new Action&lt;object&gt;(_ =&gt; GenerateNewWeapon));` can be turned into using an anonymous method. That cleans up your handlers (GenerateNewWeapon). There's also the option to pass the selected weapon type as a command parameter! GenerateNewWeapon requires a weapon type. Pass that into your method to make it a **bit** more pure and descriptive. This becomes more useful as certain weapons get damage ranges, and damage types. Read up on dependency injection. Certain classes can become more extensible and maintainable if you use that. For example, your `DamageStatGenerator` right now generates a number, holds the max damage, and the minimum damage. In the future, what if you want to have a min and max based on the weapon type. This class would need a reasonable amount of refactoring and it wouldn't be super clear where to find that detail. As a start, I would suggest that DamageStatGenerator takes in two interfaces `IGetWeaponTypeMaxDamage` and `IGetWeaponTypeMinDamage`. `GetRandomDamageValue` Would then use those interfaces to generate a random value. Using our example, if weapons now require to be based around the type, you pass that into your `GetRandomDamageValue` and then pass that into the interface calls. `DamageStatGenerator` doesn't "really" need to be modified too much as it has a [role](https://www.martinfowler.com/bliki/RoleInterface.html). This way of thinking requires you to make lots of classes but it's also a bit easier to pinpoint where issues may reside when they are discovered. You can apply this way of thinking to almost all of your classes (even the viewmodel) Hit me up with questions. If you want me to refactor given these ideas, let me know. I can make a branch and link it to you.
That link leads to a copy of the CD!
OK, so I changed my code, but I'm still running into issues: New code: [https://i.postimg.cc/1X8rdWbR/soap8.png](https://i.postimg.cc/1X8rdWbR/soap8.png) Test harness (The easiest way I know of to run my library code): [https://i.postimg.cc/HnF91wCw/soap9.png](https://i.postimg.cc/HnF91wCw/soap9.png) Error: [https://i.postimg.cc/vBqv3RqS/soap7.png](https://i.postimg.cc/vBqv3RqS/soap7.png) &amp;#x200B; Note that for the test harness, I added the dll for my new code to it as a reference. When I created a windows forms application that had both the service reference and could directly call it from the button click functionality, it worked. So I must be doing something wrong.
I recently started making an application which made use of C# as a scripting language (using Cs Script). However, I couldn't find (though didn't look very hard :D) a nice way to do scriptable UIs. So I started making a simple ImGui library for Wpf - https://github.com/samoatesgames/ImGui.Wpf Any feedback or feature ideas would be great.
No, libraries don't have commands. I honestly think you need to brush up on some basics and come back in a few weeks with some more refined and specific question.
Then, don't add .5. Add a smaller number that you can live with like 0.0000001. It will fix your specific problem. If you're doing "money" arithmetic (2 digits of precision), go ahead and use decimal as mentioned above. Remember, to use "m" on your constants:. 25.12m
JVM and standard libraries rolled together really.
I know, i was thanking you for trying to scan your CD :)
When you write 1.14 in your code, it gets converted to a binary representation, something like 00111111100100011110101110000101. Which represent a value of 1.13999998569488525390625. That's where your error comes from.
Yeah, I mean that I what i assumed was causing the problem but i wasn't sure if there was a way to avoid it.
I believe the only way to get what you're expecting is to write a wrapper around GetJsonAsync that returns a Response&lt;T&gt; and then returns response.data. Then you would call MyCustomWrapper&lt;List&lt;User&gt;&gt; from the page, which would then internally call Http.GetJsonAsync&lt;Response&lt;List&lt;User&gt;&gt; and return response.data. Main issue here is that it involves generics (which you may need to read up on) and dependency injection (which you may need to read up on). But pretty sure that's the proper way to do it here. There is no way to do that binding directly from Http.GetJsonAsync, as far as I'm aware. Though to clarify, if you had control over the endpoint, you could definitely just return an IEnumerable&lt;User&gt; straight from the Controller method and GetJsonAsync&lt;List&lt;User&gt;&gt; would work just fine from your front-end. But when working with APIs you don't control, you just have to copy the weird mapping patterns they choose to use.
If UDP is acceptable, you can use Lidgren. You don't want desktop clients to connect directly to a RabbitMQ instance anyway, not unless you want to lockdown user authorization -- RMQ is better suited as the backplane/message bus for the "backend" services.
Is CalculatorService in an external DLL? Can we post the config file for your application- the error is in there
The words "commands and codes" do not exist in this context. You should take a _number_ of steps back, do some smaller projects, and in a few months maybe come back to this one. But for now, you're mixing up so many things you don't have a clear picture of what _is_ and what _isn't_. C# is a language, there many like it, .net and unity are –in this context– frameworks, meaning : a set of premade constructs that helps you achieve what you want quicker. You should first get some basics in algorithms (this is at least a month of learning, but I'd recommend a full year to be proficient). By then you should have some basic grasp of imperative programming and the building blocks of object oriented programming (which is what you'd use in .NET and Unity). Programming mostly isn't hard, but it is something you have to learn steps by steps, it will be very painful for you to jump ahead at this point.
Perfect! thank you
Awesome thank you! if you have some suggestions im all ears
So, Unity and .NET have some commands (premade construct) that I should study and memorize aside from C# codes? That's what I mean by codes &amp; commands.
Don't I need commands to call the functionality in those libraries? That's what I mean by codes &amp; commands.
Starred to dig into later, looks interesting!
:) I barely remember, I think it was over 10 years ago the last time I had to concern myself with it :)
Haven't looked at the code (on mobile) but just wanted to say that it's admirable that you're learning programming and with such dedication. Respect, especially in this day and age when it's all about gaming and drinking. I always wonder what it would be like to learn to program if I didn't know it. I think it's complicated :D How do you find this field as an outsider? Is/was it difficult to understand concepts? Do you often stumble upon something and just can't understand why and how or is it all flowing easily?
He's a good resource for learning Git: https://git-scm.com/ And some more: https://learngitbranching.js.org/ https://danielkummer.github.io/git-flow-cheatsheet/
No worries! Funny story, the first C# code I ever wrote that made it into production for an employer was a WSDL/SOAP based data downloader/report runner. I ran into both of the problems that you did.
A couple pointers if I may. Something I learned very early in my c# days. If you are going to use a string for comparison always put the value to ToLower() or ToUpper() this will help prevent mismatching issue based on case sensitivity. Example GetWeaponIcon method in Weapon.cs your switch statement could be (selectedWeapon.ToLower() and case "pistol") also its a good idea to make sure the value is not null before using an operator on it. Try using "if(!string.IsNullOrEmpty(selectedWeapon)" to validate that its not empty before dropping into your switch. Other than that it looks pretty good for a starter project.
Nice work! The effort and attention to detail shows. I started out in the same boat, coming from a different, but semi-related discipline, doing the same as you. Starting small, absorbing as much as I could...tweaking, adding, improving, but most importantly understanding. Some really great advice has already been given above and shows what a great sub this is, and good resource. Your not alone...keep it up!
A blog is not always right haha. It sounds like they are not aware of how encryption works.
No, you write statements. You really need to find a programming 101 and understand the basics.
You'll need to explain your actual requirements - why are you Flooring a value for which you apparently care so much about its precise value? Possibly the fix is to invert the computation so that you're comparing the original value with something more precisely calculable.
I doubt it was that kind of blog. It was very well written, I clearly misinterpreted what was being done I guess. It definitely wasn't decoding though as that's not really a time intensive thing, is it? It was a post about five different methods of what I thought was decryption along with the code for each and statistics for each code block to track performance
"Statements" or "commands", the point is I have to learn and memorize some keywords, right?
Well decoding is to transport data without confusing the interpreters, this is to limit malicious input; while decryption is a mathematical function to make it difficult for people who are not authorised to view said data while being able to transport data over public network mediums. Decoding is not time sensitive, there are no keys involved; just an algorithm, maybe it was listing 5 different methods of different encryption algorithms, with comparisons of efficiency etc ?
Dude I read your post in r/csharp and decided to check your profile out to try to understand if you were trolling us there. I am going to conclude now that you are, and let me just say, A+ work. This fucking priceless. I can't stop laughing picturing somebody just sitting there fuming about the console app coming with two lines in the vs template. Huffing and puffing, just refusing to delete hello world. Going to reddit to make a thread about it, great stuff 24/29 great posts.
Yeah, ditch the book and sign up for Pluralsight. Hundreds, if not thousands of hours of fantastic online training.
Those a great pointers, thank you. I really appreciate it.
Thanks! I really appreciate the encouragement. I really have enjoyed everything I've been learning.
Thanks, I'll check these out.
Thank you for this. Really. This is great, and the information is fantastic. I appreciate the time you took to write it and the detail you went to. I wouldn't say no if you found the time and don't mind the refactoring. It would be good to see some of the concepts I'm reading about and learning get applied to my own project. Even if you don't have the time, thanks for this whole reply.
There's some occasions where I struggle to grasp something, but honestly it hasn't been too frustrating. I keep reading and experimenting until it clicks, and when it does it all feels worth it. Even simple things like getting buttons to work and random names to generate. I really wish I had started learning earlier. Better late than never though, and the feedback on this post has been super encouraging.
Cheers. I give myself the afternoon on Friday to do non-work stuff at work so I may give it a shot tomorrow.
Template should be a blank page. I shouldn't have to delete hello world. That's why I was asking what was wrong with my C# Visual Studio. Also, I wanted to know if I have to learn and know the keywords for Unity (to access its libraries or however you call those).
Great job, first of all! Other comments cover most of the items to refractor, but serious props on the drive instead of giving up and hoping the interwebs code for you. Keep it up. stackoverflow, superuser, search engines and reddit are your friend. As I read on another post (paraphrasing) - write "dumb" code for "dumb" problems. In other words, pick small goals and learn how to make that work. Get your idea working just like here, and be open to other approaches, even if it takes awhile to wrap your thoughts around them. Programming books are (sometimes) great for that. Learning how to translate what's in your mind to maintainable code is no easy feat! Dont get discouraged, welcome to a particular place in userland.
Thanks! It's been really enjoyable learning so far, and all the encouragement and advice just in this one post has been fantastic.
Name collisions are very easy to solve. You can import 2 full extensions libraries. If there is a name collision, then VS won’t let you use that one specific method - you just need to fallback to the standard method syntax
Extensions on your own types can be very useful when you need to do tricks with generics
&gt; You can directly call an extension method but that defeats the syntax sugar. Man if only someone said-- &gt; You can directly call an extension method but that defeats the syntax sugar.
This topic is chapter 1 of any numerical analysis coarse - error and floating point arithmetic. How to deal with this depends on the needs of you problem. If this value say represents money, then you would round to two digits using Math.Round ( double, int) https://docs.microsoft.com/en-us/dotnet/api/system.math.round
you can definitely do this using the azure SDK for C#, what have you tried to do?
It’d be funny if his name were Charles Sharp.
C# is still being advanced with it being on version 8.0 and .net has changed whole lot since 2010. I converted over from c/c++ development which I did many years. I haven't looked back Best way to learn which does tend to keep up with time and is free, YouTube videos, plenty of content out there and new content being created. I used YouTube as a basis with learning WPF. I was stuck using WinForms due to procrastination.
Who's the attacker? Once we know that, we can work out what the right solution is. The problem with crypto isn't crypto, it's key management...
I know this probably doesn't help but .NET Core solved this issue for us. For each nuget package you add to your project, you only add that nuget package, not all the underlying dependencies it has. It then implicitly figures out which version is compatible across all your nuget packages and handles all that nonsense. No more million binding redirects, packages.config, and explicit references to sub-dependencies in your csproj. It replaces all of that with a single line in your csproj.
No, it's way more than just keywords. You need to understand algorithms and data structures, program flow, version control, unit testing, integration testing, security, object oriented software principles like SOLID, you can't just type some keywords and magically have an application.
[An example repo](https://github.com/kealist/PeriodicStart) demonstrating what I meant. XAML: &lt;ItemsControl ItemsSource="{Binding Elements}"&gt; &lt;ItemsControl.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border Background="White"&gt; &lt;TextBlock Text="{Binding Name}"&gt;&lt;/TextBlock&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/ItemsControl.ItemTemplate&gt; &lt;ItemsControl.ItemContainerStyle&gt; &lt;Style TargetType="{x:Type ContentPresenter}"&gt; &lt;Setter Property="Grid.Column" Value="{Binding Column}" /&gt; &lt;Setter Property="Grid.Row" Value="{Binding Row}" /&gt; &lt;/Style&gt; &lt;/ItemsControl.ItemContainerStyle&gt; &lt;ItemsControl.ItemsPanel&gt; &lt;ItemsPanelTemplate&gt; &lt;Grid IsItemsHost="True" Background="Pink"&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="*" /&gt; &lt;ColumnDefinition Width="*" /&gt; &lt;ColumnDefinition Width="*" /&gt; &lt;ColumnDefinition Width="*" /&gt; &lt;ColumnDefinition Width="*" /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;/Grid&gt; &lt;/ItemsPanelTemplate&gt; &lt;/ItemsControl.ItemsPanel&gt; &lt;/ItemsControl&gt; Code Behind: public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); DataContext = this; Elements.Add( new Element { Column = 2, Row = 1, Name = "Copper"}); Elements.Add(new Element { Column = 1, Row = 2, Name = "Gold" }); } public List&lt;Element&gt; Elements { get; set; } = new List&lt;Element&gt;(); } public class Element { public int Row { get; set; } public int Column { get; set; } public string Name { get; set; } }
Coding Blocks is an excellent coding podcast, not specifically dedicated to C#. It is one of the more commonly referenced languages on the show. Merge Conflict .NET Rocks
Try not to hardcode things like this: https://github.com/eneidler/weapon_creator/blob/243df2399baa5aa372dbfcb9508f0846d3cc2fc0/WeaponStatGenerator/ViewModels/ConsoleViewModel.cs#L41 Instead use `nameof` like this: `OnPropertyChanged(nameof(SelectedWeaponArchType));` now if you want to rename `SelectedWeaponArchType` variable you just press `F2` on it and it renames everything for you. It is also easier to type since you get auto-fill so you can avoid spelling mistakes too. Also I see some of your properties depend on multiple others, you could use an attribute class like this: https://github.com/Coding-Enthusiast/Watch-Only-Bitcoin-Wallet/blob/68e04c9e17ec48b6e0a3634da274086c094c68b6/CommonLibrary/DependsOnPropertyAttribute.cs used like this: https://github.com/Coding-Enthusiast/Watch-Only-Bitcoin-Wallet/blob/68e04c9e17ec48b6e0a3634da274086c094c68b6/WatchOnlyBitcoinWallet/ViewModels/MainWindowViewModel.cs#L96 (BTW the links are from my project that I used to learn C# and MVVM,...)
Yeah, most of the solutions basically involve a low-key rewrite at best. I still appreciate the advice, though. It’s good to know I’m not missing an obvious solution.
Use a data type more appropriate to your use case.
Or the post was writing about a shitty encryption algorithm.
First of all: Then the array should still contain an Task instead of null. Only the Task-Result would be null. Anyway, the method creates at the beginning a list and returns it in the end, therefore the worst thing that can happen is that the method returns a list without elements, which still isnt null.
Are you looking for this: https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/master/README.md
The signature is private List&lt;JahrMitWert&gt; Trainieren(List&lt;JahrMitWert&gt; d, int ZukunftsJahr, int multi) There is no other WaitAll. I made a try / catch around the whole block in the OG post, including a StackFrame with GetMethod and GetFileLineNumber. The result is the Method GeneriereVorhersage() which is the method that contains the lines of code from the post above.
Honestly it's been humbling learning C#. I think everyone throws the word "easy" around but it's a relative term. I haven't found learning it easy. Many concepts are abstract esp if you're a new programmer like me. You have to put in the time. I don't think learning any language is "easy" starting out.
Are you looking for something? I am confused.
You don't _memorize_ this stuff. That's the point. If you come at it from this angle you'll never be able to do anything. Unity and .NET are composed of classes, structs, methods, enums, interfaces, abstract classes. Thousands of them.
I like what you are doing. Altough I would not consider being a mechanic as "opposite" to programming. On the contrary, I suppose. Accept that .gitignore fix pull request, as the gitignore you had might be incorrect/added to late, so essentially you uploaded the .exe-s and stuff too, which could be called "pollution". Other than that, keep up the good work! I am myself is a C++ enthusiast, but lately I have found myself working with C# through an unofficial GTA5 multiplayer mod. That is awesome way to get exposure to the language, too.
Yes, indeed.
Your post is confusing. Are you referring to the app Paint.net? According to developers, such a feature has been requested multiple times and they won't be implementing it. https://forums.getpaint.net/topic/1863-about-the-saved-as-pdn-history/?do=findComment&amp;comment=12092 Which is linked from here (2019): https://forums.getpaint.net/topic/112353-suggestion-save-history-with-pdns/ I've never used Paint.net (Adobe user), but there doesn't appear to be any plugins related to history logging. There does appear to be a History window within the app but this data is not saved to a project nor the image file, and will be deleted on exit of app or file.
Perhaps a better way to look at it is to reverse it. C# almost invariably uses .NET (or similar, such as Mono or Unity). But .NET doesn’t have to be C#. It can be VB, or F#, or PowerShell, or many others. You can use one and the same runtime and framework to host a variety of languages, and they can all use the same libraries, and an assembly written in one language can reference an assembly written in another.
&gt; Don't write extension methods to common types (e.g. int, string, object). Those are imho some of the best uses for extensions. I really dislike string.Parse and string.TryParse, since they lead to ugly code. If I write my own extension method: public static int? ToIntOrNull(this string text) { int result; if (int.TryParse(text, out result)) return result; return null; } I can now use it much more nicely: int? value = "1234".ToIntOrNull(); if (value.HasValue) {...} int value = "1234".ToIntOrNull() ?? 0; //default value int value = "1234".ToIntOrNull() ?? throw new Exception("Conversion failed");
Why not use wpf directly?
So whilst possible with CS Script (see: http://www.csscript.net/help/wpf.html), it has additional requirements. The other reason, is the application I aim to use this with is for technical artists and not programmers directly, so I wanted something that was familiar for the end user (they've seen ImGui before and used things like 3ds Max script). Also, it seemed like something fun to try an implement :D given Wpf is all event driven, making it work in an immediate mode manner sounded like fun :D
I'm mainly a lib guy in my spare time. I need something, build it and then slap it on Github and [NuGet.org](https://NuGet.org) with an MIT license. Parsing command line arguments for CLI apps is always tedious, so [I created something that parses them to a strong-typed object](https://github.com/akamsteeg/AtleX.CommandLineArguments) with automatic help generation etc. There are better alternatives nowadays, but this is simple and easy to use and extensible with custom validators and type parsers so this is still my go-to lib when I need to do something with command line arguments. For warning users who change their password into something that's already in [HaveIBeenPwned.com](https://haveibeenpwned.com/) [I created AtleX.HaveIBeenPwned](https://github.com/akamsteeg/AtleX.HaveIBeenPwned/). There were some other client libs for HIBP already out there but they were either impossible to mock, weren't async or didn't support .NET Core yet, so I created my own. Having a bunch of these projects makes it easy for me to play around with new stuff, way before I can use it at work. I quickly moved to .NET Core and .NET Standard, so I had a lot of experience with it and also with converting/rebuilding existing NETFX codebases to .NET Core before we started the move at work. Same with Azure DevOps and also their Azure Pipelines stuff. That makes me a more valuable employee too.
I don’t really understand the use case, can you explain when you would use that vs just creating the wpf objects yourself?
Why do you want to make the switch? Not happy with python? Something in .Net you don't have in python?
I think almost all common ML-algorithms today exists in most big languages. If you dont have any real reason to switch I dont really see the point. You should probably look at it like "What am I trying to achieve and how will I use/present it to the user?" and you'll see what drawbacks/upsides each platform would have. If you just want to test different algorithms and learn ML you should probably just stick to the language you are the most comfortable in.
Thanks for this one. Will take note of this :)
That's so strange. And all this "persistence" and parallel stuff doesn't make up for it?
Ive used c# for a while and if its possible to proceed in that, id very much prefer it
Then the only possibility is that one of your Tasks is null, which doesn't look possible from what you've shown us. You're going to have to step through the code in the debugger, I'd guess.
Yes, I have experience with Sterling. I use this API and Sterling every day)) Can you show what error exactly is being shown? Try to set .NET Framework to 3.5. On documentation, it says that they only support up to 3.5 but in fact it is working with 4.0 too (in my case). You can write directly to me via skype : live:daler.dixus Will try to assist you
Removed: Rule 4. Feel free to repost, but you need to rewrite or clarify what it is you're looking for.
That's fair enough. Both fields certainly require a similar thought process for solving problems, just a different skill set. I've tinkered in Unity a bit with C#, and will probably dig deeper at some point. I have a lot of projects in my head, so I should be able to get plenty of practice. Thanks for your feedback!
As long as you are interested in what you are doing, there can be no problems. Have fun! :)
Thank you sir for getting back to me. Tried all the steps , and Im able to successfully compile the sample source code. but when i tried to run it, it failed due to SterlingLib COM dll. Not sure if this is due to the .NET framework that you suggested using
Thank you sir for getting back to me. Tried all the steps , and Im able to successfully compile the sample source code and when i tried to run it, it failed due to SterlingLib COM dll. Not sure if this is due to the .NET framework that you suggested using
I haven't used Nginx before, but I hear good things about it from the community. ElasticSearch has been a joy to work with. Their terminology (with a few exceptions) also serves as a general introduction to the concept of information retrieval. Their documentation is worth reading from start to finish if you plan to use it in production. You need a good understanding of Rest interfaces to use ElasticSearch, but its more simple than most APIs and a lot of it can be tested from a browser or Postman. I've heard using it in a cluster is substantially more difficult than running it as a single node. C# / .NET works great with ElasticSearch; there is a .NET specific client called 'NEST' that makes calling it easier (it handles some of the conditional logic for nulls transparently for you). Typically with .NET you will run an application on Kestrel and reverse proxy to it from NGinx.
Depends quite a bit on your region. They used to do a single monthly meetup 30 miles from me (50km), but now the nearest ones are \~100 miles away (160km). Are there any Discord channels or other online communities that would be an equivalent for a remote experience?
If you're just learning ML, I'd really suggest taking the easiest route to learning the concepts, through the use of tutorials and what not. Once you understand the concepts of the techniques you are trying to use it's generally not that difficult to implement them in any other language. Do you care about solving the problems or do you care about implementing the algorithms? If you care about solving problems, just stick to technologies with much better ecosystems for ML and use your own data. If you care about implementing the algorithms, then stick to whatever language you know best from a performance optimization standpoint. Python happens to have a really clean syntax for manipulating data structures and fast handling of basic linear algebra which makes it a solid choice for implementing many ML algorithms that are easy to understand. I'm not sure I would consider Python the industry standard per say, although it unquestionably is the de facto standard in education around the world, replacing Java in the last 5 years or so. R is also widely used in industry as is Julia and a few other scattered technologies with much more advanced tooling for ML than there is for C#. I would consider the lack of maturity for ML in C# a drawback from a learning standpoint.
Instead of converting to lower for all comparisons you can use the overload that takes a StringComparison - eg: String.Equals(a, b, StringComparison.OrdinalIgnoreCase). This won't work for a switch statement, but it should work everywhere else. If using the ToLower approach you can simplify the null check with the ?. operator (Eg: a?.ToLower()). This will return null if a is null, ToLower otherwise.
I think it’s a great start. The bot framework has a good introduction to LUIS, Azure, and several “new” technologies. You should be able to at least spin up a hello world bot in &lt;8 hours with your skill set and build it up from there. Be sure to sign up for free credits from azure ... sadly running a bot starts to add up $$$ pretty fast!
Thanks. I'm a big user of SQL databases tho. I hope I won't have any trouble to work with Elastic while doing the switch
I am dealing with software that keeps track of ratings of the power grid equipment. We can never assume rounding because that decimal difference could be the difference between a line or transformer exploding vs not. We do all of our engineering calculations with the accurate values and then we display and store the whole number floored, because estimated down is good enough.
It is OK, we can just agree to disagree. I just think it is a shame to refrain from learning just because you have the "wrong" book. I understand it is hard to imagine for people in the USA, but having access to documentation and books in your own language is a luxury for a large portion of the world. Telling someone not to read the only book they have access to is what I call horrible advice.
What about self-hosting ? There is no need for Azure.
You can learn bad habits out of writing code in .NET 1.0; but you will also learn why the changes were introduced later in other version of the framework. That is how the people who have been using .NET since it was in beta learned the language. People who did not experience the older and flawed versions of the API do not learn appreciation of the new features. For example, I have seen people complaining about async/await and how it is "useless"; obviously they never had to deal with callbacks. Now that C# is introducing non-nullable reference types, people also say this is weird and hard to understand; but if they had to deal with NullReferenceException bugs, they may appreciate it better. Anyway, you are free to keep telling people not to read the books they have and go and invest tons of money on new books they probably cannot afford instead. I still think reading whatever book you have access to on C# is worth it. They can get better as a developer over time.
No. You can run it anywhere.
Tensorflow is the python ML stuff? You can use that through [ML.NET](https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-10-machine-learning-for-net/) &gt; It also supports the broader open source ecosystem by proving integration with popular deep-learning frameworks like TensorFlow and interoperability through ONNX. I think C# it's a solid choice.
Ideally for a beginner, I’d recommend using off the shelf tools that are built into Azure - will definitely be faster, but you can totally self-host, you’ll just need to explore a few open-source technologies
You may want the image's link to direct the user to the survey. I clicked the image, started at the larger image for a few seconds and thought, "Microsoft screws up yet again."
Too advanced. Yeah its a great start for beginners, in the eyes of experts. In the eyes of beginners though...Nope. Sorry but If your just now familiar with syntax and basic language constructs then anything other than local, simple tasks is too much IMO.
I’d say go for it. If you can follow some demos and then make modifications that’s best. IMO if it’s not an interesting project you won’t feel motivated to continue, so just picking something simple isn’t a good goal. I always like being challenged by what I build. This sounds like a fun one.
I know it's not exactly relevant to the sub but a few months back I started my own board gaming based discord bot in Python and found it to be a great starter project!
A simple example for C# would be building a weather API with a GUI. OpenWeather has some decent documentation for this, although I've noticed on mine the zip code is consistently off.(I live about 40 miles west of the major cities, but when I put in my local zip code, it'll place me in the major city) That'll get you a handle on interacting with API's and outside software.
Thanks for the in-depth reply. We're doing deep learning basics in college using python so Ill stick with that and check out ML.NET when we're done
If you are using visual studio then can you show what error it is showing on runtime ?
I agree. Beginners should slowly but surely approach topics that require external services. I think OP's next steps are stuff like persistence via text files, simple 2D game stuff like rectangular collision detection or similiar
I strongly suggest using JS instead of CS for a discord bot, I'm a professional C# developer but I found node.js just a bit better for the discord bot application. More examples and reference materials available, plus some valuable experience using node, which it turns out I love. &amp;#x200B; Install Visual Studio Code and find a basic tutorial. If you want, PM me and I can hook you up with the first one I ever made which you can sort of use as a template. You will need to go through the steps to create your discord bot user, I won't share my keys. Just does a couple sort of random things, gets a random post from a specified subreddit, grabs some server stats off battlemetrics, and I did have it running some DOS commands to enable it to restart a game server on my azure VM, but that won't be of much use to someone who is not me.
You’re right, but starting with Azure directly might be too difficult for some 🤷🏻‍♂️
My first thought was that this looks the way I'm used to creating interfaces for some of the add-on tools I sell for various 3D software. Funny to see that this was your inspiration as well!
It would be tough, but I say go for it. Your friend is 100% correct. I would approach it by breaking down app into very small pieces and working on each piece individually. Don't expect to create the entire application on your first go, create small pieces of it, and slowly start to integrate the pieces into a larger whole.
While on mobile i was able to find the survey...
You can over engineer anything and most things I’ve had the unfortunate pleasure of supporting have typically been over engineered. My suggestion for anyone over the years, is to find a problem you’re passionate about and go about learning how to solve that issue. It may lead you down a totally different road than what you envisioned, but that’s part of the joy of learning and expanding your knowledge.
Exchange or local. I know I've done it by directly accessing exchange
Wrong assumption, i’m not in the usa. And there are plenty of free good ressources online outside of books in all languages starting with microsoft’s own documentation on the language and .net. It’s not the only book they have access to, it’s the one they choose to buy, money can be tight but if they don’t want to become pro they don’t really need a book, and if they do then 50$ isn’t much of a requirement for that, we’re not talking 100 000$ college debt here. I told him in which scenarii he should and shouldn’t read the book and in the ones i listed as shouldn’t i stand by what i said, he will be worse of learning new tech after reading that than starting from scratch, essentially lowering his level bellow zero knowledge, humans suck at unlearning.
Personally I just use integers you get around the problem. To truncate, you'd calculate: 400 * 114 / 100 To round: (400 * 114 + 50) / 100 It's not so bad once you get used to reading it. The performance is better than IEEE too.
Eh, a Discord bot may be too advanced, at least from the sounds of it. For me, I chose to use games as projects to aid in helping me learn how to program. My first programming class was an introduction to Visual Basic .NET (aka VB.NET or simply VB). We had 1 major project due at the end that had several requirements (simple, generic requirements like the app has to read/write from the file system, must have some sort of user menus, etc.). I chose to develop Tetris and I completed it in a week over spring break. I think I still have the source code somewhere lol. It was the most horribly written POS ever but you know what? I learned A LOT, it *worked*, was actually fun to play and I was *proud* of it. Before Tetris I wrote single-player pong (player vs "AI"), which was significantly simpler than Tetris but what I learned from Pong expanded my knowledge base just enough to be able to start on Tetris. Choosing a personal project should be about reinforcing and expanding on existing knowledge **as well as** learning entirely new concepts, technologies, etc. **but should be small enough in scope that you can actually complete it without being overwhelmed**. The part in bold is particularly tough -- we don't know what we don't know, after all, and some projects can *seem* simple at first but turn out to be a lot more complex in the end. My recommendation for you is to figure out a project that is interesting to *you* (for me, it was games) that is *slightly beyond* your current skill level. Baby steps. What did you want the Discord bot to do, anyway?
I think it's a pretty good start. I started with it and everything went smooth. My cousin(13) started with it too and hat a good experience, soooooo....