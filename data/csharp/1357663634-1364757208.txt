In most cases I can think of, that user would have to make the method, make a delegate FOR that method, then call that delegate as the parameter. Is there any way that when the user writes the method, that I could have the program create a Delegate for it automatically? 
You're the one who creates the method that takes a method, right? That means you're the one who decides what the the delegate is. The user only has to create a method whose signature matches the delegate's.
(with the walk script being the one defined when the user who made the program did "AddCommand ("this is what the user types in", thisIsTheMethodAddCommandRuns())".) 
The call to AddCommand would look like "AddCommand("/walk", Script.walk)". C# will automatically convert the method name into an Action object.
 //definition of Walk method public void Walk() { /* user code goes here */ } //definition of AddCommand method public void AddCommand(string commandName, Action command) { commandDictionary.Add(commandName, command); } //commandDictionary declaration (in same class as AddCommand) private Dictionary&lt;string, Action&gt; commandDictionary; //Invocation of AddCommand AddCommand("/walk", Walk); //Invocation of the "/walk" command public void InvokeCommand(string commandName) { commandDictionary[commandName](); } There is no error handling here that you'd obviously want (InvokeCommand being passed a commandName not in the dictionary for example). What the InvokeCommand does is look up the commandName in the dictionary, which returns an Action delegate, which is then immediately executed (because of the () at the end of that line). Action and it's various generic flavors is predefined delegate signature. Action = void Method(). The generic expansions of Action (eg Action&lt;T&gt;, Action&lt;T1, T2&gt;) are similar except the delegate expects parameters of the number and type you specified. Hope that gets you started in the right direction. The key is whatever method the user writes have a signature that matches whatever Action flavor you've defined for your dictionary. See the Function delegate if you need the method to return a value.
http://en.wikipedia.org/wiki/Reflection_(computer_programming) http://stackoverflow.com/questions/2202381/reflection-how-to-invoke-method-with-parameters so with reflection, calling your function would be something like this: MethodInfo method = script.GetType().GetMethod("WalkScript"); result = method.Invoke(script, parametersArray);
Design patterns are your friend. http://en.wikipedia.org/wiki/Command_pattern
If you wanted to do it yourself you could use the Command pattern. http://en.wikipedia.org/wiki/Command_pattern I am finding design patterns more and more useful to know.
Ok, it looks like you have a couple of problems: 1) As mentioned by other people, you can use a delegate to point to a method to call later. Personally, I avoid delegates as much as possible; they're mostly a hangover from the time that c# didn't have function generics; I'd stick to Func&lt;...&gt; and Action&lt;...&gt; where possible. 2) Currently it looks you're requiring the user to enter their definition into the Script.cs file, wire up the function to the command processor, and recompile the application. This may or may not be what you want. 2.1) If it's NOT what you want, you'll probably want to use some sort of command pattern and a plugin architecture. You'll want an IScript interface which implements the method DoScript(IApplicationInterface) (and probably Name, so you know what to call it by); you'll want a number of implementations of IScript that you can then dynamically load from another assembly, instantiate and wire up to the Command Processor programmatically. 2.2) There are probably other ways of achieving a similar dynamic effect; for example using Rosalyn, but's that's outside my experience.
It sounds like you don't really care what (if anything) the user does with this method, so maybe [Events](http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71\).aspx) would be a better approach? Obviously you'll have to use delegates for that, too, but it may make more sense from a conceptual standpoint.
Maybe check out File.ReadAllLines http://msdn.microsoft.com/en-us/library/s2tte0y1.aspx
Not necessarily programming help, but you can replace the 'xxxxxxx' in this URL with the username you want to check: http://knowem.com/checkusernames.php?u=xxxxxxx
Thanks! I'll definitely check that out.
Hey, that's useful, thanks. Unfortunately, that won't work for what I'm trying to do. I'm trying to check availability of many usernames on one site rather than one username on many sites, if that makes sense.
Edit: sorry, I was an idiot and did not read the entire question. Your approach is different. So, what you need to do is use the System.Net.Webclient class coupled with the DownloadString() method. There are several methods available for http requests but this one is the easiest and should get you started. it would look like this: System.Net.WebClient client = new System.Net.WebClient(); foreach(string line in System.IO.File.ReadAllLines("filename.txt")) { string downloadedResult = client.DownloadString("http://website/user/"+line); //this is where you do your checking on the string to figure out what you need code //end code } Original comment below: The problem with what you're trying to do is that each website has its own implementation for username checking. Some of them use AJAX to check it before you submit the form, some check it once you submit (which, if you try to check a lot of usernames, could lead to actually creating the usernames from that list, if they're available on the website), then there's the case where each website requests for different parameters on the submission form, be those parameters the ids of the html controls you're filling in, or just different info. And let's not forget about CAPTCHA. Long story short, yes, you can do this, but it would need to be specialised for specific websites as there is no general formula that would work everywhere.
I've edited my comment for clarity on which part is the original and which one's the edit. Care to elaborate on how you would go about it?
Please never write full namespaces unless you have to. It's ugly, and useless. Also, if you use foreach on the lines, you should use File.ReadLines, which is an enumerator, and not File.ReadAllLines, an array. That way you don't load every single line at the same time, potentially consuming tons of memory.
You are using inline sql in your example, and by that I mean you are hardcoding the query. You need to have a store procedure written and compiled in your database, and when you call it, instead of having the query written out you will simply put the name of the procedure. Should look something like this. string cnString = ConfigurationManager.ConnectionStrings["MyCon"].ConnectionString; MySqlConnection connection = new MySqlConnection(cnString); try { MySqlCommand cmd = new MySqlCommand("PROCEDURENAME", connection); //I would use this method of adding parameters as well cmd.Parameters.Add(new MySqlParameter("param1", txtwithname.Text)); cmd.Parameters.Add(new MySqlParameter("param2", txtwithAcc.Text)); cmd.Parameters.Add(new MySqlParameter("param3", txtwithAmount.Text)); cmd.Parameters.Add(new MySqlParameter("param4", txtwithAvM.Text)); //You need to turn this on, so when you send the query it will send the parameters you have added. cmd.CommandType = CommandType.StoredProcedure; //open connection to database -- don't open connection till you are ready to send the command connection.Open(); cmd.ExecuteNonQuery(); //close connection to database connection.Close(); //clear textboxes after entry txtwithAmount.Text = ""; txtwithAcc.Text = ""; txtwithAvM.Text = ""; txtwithname.Text = ""; } catch (Exception ei) { MessageBox.Show("Can't access the database" + " " + ei.Message); } 
This doesn't answer the question and is really just a matter of style. For such a straight insert, there's not much to be gained by making a stored procedure. The answer to OP's question is he needs to figure out why null is being passed in to `cmd.Parameters.AddWithValue` from `txtwithname.Text`. If it is in fact intended to be null, the the table definition needs to be changed so the Customer_Name column accepts nulls.
&gt;This doesn't answer the question and is really just a matter of style. For such a straight insert, there's not much to be gained by making a stored procedure. In school, maybe. In industry, absolutely not. Even for something as simple as an insert, it's best practice to put it in a stored procedure. There are a number of reasons for this which I can extrapolate upon if you're interested. Finally, to OP, have you looked into any of the numerous ORMs out there for C# and MySql?
Mr. Negatroyd here is correct. Please don't inline SQL, and do look into your available ORM libraries if you don't want to make stored procedures. Entity Framework is a breeze to get setup and work with, and nHibernate isn't bad either. Not doing so opens you up to a ton of problems, not the least of which is SQL injection vulnerabilities.
NO! No no no no no. I once lived in that hell too and have since clawed my way out and then hoisted my coworkers with me. 90% of the time you do not need your basic CRUD operations in stored procedures. All it does is give you a shit ton more boilerplate code to maintain. I will physically fight any one who tries to force me down that ill conceived path again.
I'll admit, there are pros and cons to each approach and I will concede that there is a tremendous amount of overhead with the stored procedure approach. However, as is with most things in the software world, it all depends on what it is you're trying to do and what tools you have at your disposal. For example, if I'm working for a client who is using ADO.NET with DataTables (*hurl*), I'd lean towards the stored procedures. If I'm working on a small project with minimal database interaction (and for some reason I can't use a lightweight ORM like Dapper), I'll go with in-line SQL. If I'm working on a large, enterprise-level project, I'll go with EntityFramework and CodeFirst (no need to even worry about the question). However, I've seen the convenience of in-line SQL get out of hand more often than not. It invites people to try and get creative with dynamic SQL in managed code and it gets very ugly very quickly. Therefore, I tend to err on the side of caution and categorically avoid in-line SQL. If you'd like, I could PM you some examples of some of the nightmares I've seen with people going apeshit with inline SQL. Oh, and I'm always down for brawl. 
It IS best practice to put in a stored procedure BUT he's not risking a SQL injection since he's using parameters, this command is much easier to maintain since it's right next to the code that's using it, it doesn't require creating/managing the statement separately in the database, it's not going to run appreciably faster in a SP, and most important of all - not everything requires using Entity Framework or any ORM. Maybe he's only got one table and he's building a simple app that does CRUD operations on one table - in which case, rapidly developing it using plain on SqlCommand's is far simpler. Besides - behind the scenes, that's exactly what an ORM does anyway. It simply builds commands and sends them to the server - it doesn't magically turn them into stored procedures. If I had to create a stored procedure for every CRUD statement I wanted to write, I'd spend half my day creating and altering SP's instead of simply writing the commands I want the database to run. 
&gt;If I had to create a stored procedure for every CRUD statement I wanted to write, I'd spend half my day creating and altering SP's instead of simply writing the commands I want the database to run. When I mandate this of my teams, I provide a PERL script (or more recently, a T4 template) for code generation for the stored procs. 
Hard to say exactly what is wrong. The code looks ok. Have you tried to alter the order of the parameters (to see if the error is still the same)?
That's good that you provide an alternative/simplification rather than just insisting it be that way. To mitigate problems and keep things consistent, but still fluid, I provide a class that accepts a table name, NameValueCollection and optionally a where clause to perform an insert (or update if where specified). It handles all the data types nicely and captures @@identity in the event of an identity insert. So I can simply do this: var u = new Updater("Customers"); u["Name"] = "John"; u["Age"] = 35; u["DOB"] = DateTime.Now; u["Photo"] = (byte[])something; CustomerID = u.Execute(); Behind the scenes it's creating a SqlCommand and populating the parameters. So not a stored procedure, but similarly safe and significantly faster to implement. It's even shorter than the insert statement itself would be. Best part is, it works on any table with no code generation or mapping. Is it as robust as EF? Certainly not, but it's a trade off for rapid development. 
In fact, I had already built a light-weight query tool that would run a query and return a set of "rows" which where IConvertible to any primitive type (I started with Classic ASP and wanted to keep it simple). So you could this: var rs = Conn.GetRecordSet("select * from customers where id=1"); int CustomerID = rs["id"]; string name = rs["Name"]; bool active = rs["Active"]; //true is active!=0 &amp;&amp; active!=null bool hasLoggedIn = !rs["LastLogin"].IsNull; After seeing Dapper and the emergence of generics and knowing reflection, I rewrote to: IEnumerable&lt;T&gt; Conn.Query&lt;T&gt;(sql) { ... } so I could do this: Customer c = Conn.Query&lt;Customer&gt;("select * from customers where id=1").Single(); In either case, I'm a huge fan of building supporting classes to simplify whatever it is you're doing. I like to do things with the fewest lines of code possible provided that it's still self-documenting and legible. If it's so short, you can't tell what it's doing, you've gone too far.
Dump his class, write your own :)
This just got bookmarked! All I work with is Microsoft technologies this will be a great help.
Do you know Enterprise Library? It's also from patterns &amp; practices team: http://msdn.microsoft.com/en-us/library/ff648951.aspx
Basically, you'll want to read a line of code, save the username to a variable, then using `String.Format("www.reddit.com/u/{0}", username})`, then send that off as a `WebRequest` or something similar. Then you'll want to parse the returned html for the text you want, say "User not found" or the status code, like 404 or something. 
Thanks, I appreciate the reply. I'll get started today and see how it goes.
This is how I make webrequests with C# http://support.microsoft.com/kb/307023, you can use HtmlAgilityPack to parse HTML if you need that.
I tried to look at Your website for the examples, but All I got was: Liquid error: undefined method `PyErr_Occurred’ for RubyPython::Python:Module any way to fix this?
Tempted to but I don't think I'm good enough with basics of C#, I'd honestly say I'm pretty shitty and pathetic with them. Currently making a Connect Four game, just to learn how to use colors properly on C#.
Did you intend to post this to the C# subreddit?
Gotta start somewhere :) Pong is a good game to write for a beginner as well.
Actually, no.
A really good combo: grab the C# In a Nutshell book and then subscribe to Pluralsight for a month. The C# Fundamentals [Part 1 and 2] course they have overlays very nicely with the Nutshell content. Watch it from start to finish and do the examples. Use the book for reference during and after. Pro Tip: Keep a working knowledge of the topics and do katas to stay fresh. You'll be *way* ahead of most developers you have to compete with if looking for a job. Pro Tip #2: If you have a .EDU account get yourself into Dreamspark and do the 90 day free trial for Pluralsight. https://www.dreamspark.com/Product/Product.aspx?productid=21 After that pay for it. Or harp on your employer to keep an account for the company. Pro Tip #3: Any company that wants to bill you out for $$$ an hour but wont pay $50 a month for great training isn't a place you want to work for very long. tl;dr - The Plursight C# Fundamentals course is a dead match for the C# In a Nutshell book. Use them together! EDIT: It's actually the C# Fundamentals course. I've updated the post for readability.
Thanks for the headsup. Now, I barely know what type marshaling is. Could you describe what types of problems might occur with more complex types? As of now, I just have simple ones (string, float etc)
So in any language, lets say C, you can have a Type (or even an Object) typedef struct _FOO { DWORD Bar1; DWORD Bar2; } FOO; In this case, the type is simply two 32bit ints, Bar1 and Bar2. But rather than just process them as type ints, its nicer to create in C# an object, so you'd have: public class Foo { public int Bar1 {get;set;} public int Bar2 {get;set;} } Now that is it at its simplist form, often when your doing more complex meddling, you'll want to mabye have another property in the C# object, which doesn't exist in the C one. This is where serialization logic can help. Serialization is just the process of taking a Type (and object or struct) and making it so it is a bunch of bytes. Or vice versa. A quick skim over suggests this guys write up on Mashalling might be a good start: http://www.codeproject.com/Articles/66245/Marshaling-with-C-Chapter-1-Introducing-Marshaling If you want to see an example of custom serialization, try: http://msdn.microsoft.com/en-us/library/system.runtime.serialization.iserializable.aspx (Again serialization is just a posh word for Type (Ie class or struct) to Stream (ie Byte array)).
Never knew this existed! Very happy to have been shown this! 
I would recommend you "Beginning Visual C# 2012", from Wrox, and after youbread it, you can take "C# 5.0 in a Nutshell" although it is more of a reference book. Pluralsight membership would also help, as other suggested.
It seems like the type of thing which many do, and which most of the time will escape unnoticed. But when the right confluence of circumstances hits, creates a big yet hard-to-track-down problem. 
Yeah, C# needs [raii](http://en.m.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization) for object fields. For all its faults, C++ was practically conceived with this problem already solved. Think something like 'using (obj)', but for member fields, to automatically dispose them from construction and dispose methods. 
Interesting thought . . . So, simply set a reference to the binary in the control master, then subclass, and avoid mixing the projects? Sometimes we can't see the forest for the trees . . . Thanks!
I also concur with the subclassing - a.k.a. using inheritance to implement solution-specific members and functionality. However, you may want to familiarize yourself with the following article on NuGet. It may suit you better to host your reusable controls and libraries in your own (or a public) package source. http://msdn.microsoft.com/en-us/magazine/hh547106.aspx The major upside there is having your end solution tailored to a specific version of each of its dependencies, thereby allowing more flexible, independent code changes.
I used SubTree Merge since it was much more solid than submodules (which at the time were still a bit shaky) Here are a couple posts I wrote about how I used content/code from two separate repositories using git's subtree merge: * [Git and GitHub commands to create and deploy new version of TeamMentor](http://blog.diniscruz.com/2012/10/git-and-github-commands-to-create-and.html) * [Creating the final TeamMentor with SI Library repository via multiple Git pulls and pushes](http://blog.diniscruz.com/2012/10/creating-final-teammentor-with-si.html) * [Creating a Code+Content version of TeamMentor](http://teammentordevelopment.wordpress.com/2012/08/31/creating-a-codecontent-version-of-teammentor/)
Thanks for the feedback - I'm going to look into how you did it. 
Came here to say this. WCF or even OData.
no worries, feel free to post here questions (sub-tree merge can be tricky)
Will do! For this particular project, subtree merge seems to be the best way. I like some of the other suggestions about referencing and then deriving from teh library classes, but this project needs to stays synced between three rather different environments. Also, the controls are evolving at the same time as the main project. The Nuget solution proposed below looks good as well, except it might be problematic at work. So for now, I'm going to try the subtree thing, and hope I don;t mangle things too badly!
well, you would need to put what you are going to use it with, but for asp.net there's this stuff: http://weblogs.asp.net/scottgu/archive/2008/11/24/new-asp-net-charting-control-lt-asp-chart-runat-quot-server-quot-gt.aspx
Grammar panda says, "Yes"!
You could check out National Instruments' [Measurement Studio](http://www.ni.com/mstudio/) product. It includes both WinForms and WPF graphs. There's a trial you can download to try it out.
Probably not the cheapest option, but I'm a big fan of the DevEx package: http://www.devexpress.com/Products/NET/Controls/Charting/
Programming C# 4.0 by Orielly Media is good too, but a hefty book. IF you read through the first dozen chapters and follow along you'll learn a ton. C# 4.0 Pocket Reference by Orielly Media is good as well. Lightweight book with straight to the point examples 
[ZedGraph](http://sourceforge.net/projects/zedgraph/) is a pretty decent, free solution.
This is incredible, I cant wait to comb through the source.
If you simply google "C# Events," you find a variety of resources, most of them like this one: http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx Which all tells you to write code like: protected virtual void OnChanged(EventArgs e) { if (Changed != null) Changed(this, e); } Those 2 innocent lines of code in the body of this function turn out to create an important race condition. The problem occurs when Thread A checks the if statement and sees there's one subscriber to the event, meaning the if statement evaluates to true. Then before the next line executes, Thread B unsubscribes from the event, meaning the event is in fact now null. Finally, Thread A executes the next line of code, which is to call an event that is now null. Thread A (the publisher) thread crashes, and depending on where this event handler is in your code, you might end up with a paralyzed application. The fix is a bit odd. They instead make a temporary copy of the event, then check for null and publish the event to handlers if relevant. That means that if Thread B interjects and unsubscribes, the result is not a NullException but instead the event being called and published to its subscriber after Thread B specifically unsubscribed from it, which itself could cause unexpected behavior. It seems in many cases the only truly safe alternative would be to put a lock around both the if/handle code, and any unsubscribe calls. Depending on how you're using these events that could have a big impact on performance, or an irrelevant one.
Couldn't you also just wrap the delegate call in a try/catch block? It would look like this: protected virtual void OnChanged(EventArgs e) { try { Changed(this, e); } catch (NullException) { } }
Alternatively, you can initialize the event handler to an empty delegate. There's no need for a null check then, and no race condition. It produces cleaner code in my opinion, but its probably the slowest answer at run time. I like C# a lot, but this issue has always irked me.
I understand what you're saying, and it seems to me the use of an empty NullException handler would answer the problem, although maybe the if statement should also be included in the try block to reduce the number of times the NullException is raised. But it seems to me from my decidedly non-expert point of view that if Thread B can unsubscribe from an event that Thread A uses, then there's a fundamental design problem with the program. Shouldn't the developer realize that Thread B is doing something that could crash Thread A? Or are there situations in the real world where this situation is desirable?
Wouldn't that catch a NullException from subscribed functions?
MyEvent += () =&gt; {}; **Are you saying this?**
Yes, I suppose it would. So much for that idea.
I just did a test with this code, and it does catch the exception in the subscribed event. EventHandler ev = null; ev += ( sender, eventArgs ) =&gt; { throw new NullReferenceException(); }; try { ev( new object(), new EventArgs() ); } catch ( NullReferenceException ) { Console.WriteLine("Caught Exception."); }
Gross
Argh, that pattern always makes me cringe... Pro tip: Do this, unless you absolutely need to keep track of when the first subscriber attaches: public class Foo { public event SomeHandler SomeEvent = delegate {}; } There. Never can be null, initialized during construction. Feel free to flat-out invoke it at leisure: SomeEvent("hah! no nullrefs!"); 
 EventHandler Changed = delegate{}; is how I've always done it, and it's what I assumed other people did, too. I'm pretty surprised that many people seem unaware of this solution.
I find arrays mostly useless, and they tend to be far easy to misuse anyway (for example, google array memory leak C#).
In WPF I've used the http://dynamicdatadisplay.codeplex.com/ it was original a project by Microsoft Research in Russia I think. It's a great open source, really adaptable fast line graph, with a fairly clean API. If your making something which is just plots, this is really great, you can customise it really heavily, and it is fast, damned fast.
A solid solution - certainly reliable since the empty handler would never be unsubscribed, completely eliminating the need for the if and therefore the race condition. It would be interesting to see a performance comparison between your solution and the MSDN sample since yours wastes a jump to an empty Action every firing, but theirs wastes a branch prediction, which the CPU would initially predict poorly but quickly optimize away. CPU is cheap so the difference is surely negligible compared to the performance drivers of most applications, but I ask mainly because the problem race condition is only an issue if events can be unsubscribed from in your application - if not, there's no race condition in either version of the code.
You had essentially the same answer as spartan018, so I replied to you both here: http://www.reddit.com/r/csharp/comments/16ntkw/til_the_example_code_for_defining_an_event_in_c/c7xrm2y
It's just good form. If for example your events in your application were to get called in a chain by an outside application, it's useful if your EventArgs can be boxed up for passing up the chain - like: public event EventHandler&lt;EventArgs&gt; MyEvent; protected virtual void onMyEvent(object sender, EventArgs ev) {...} public void RespondToOutsideEvent(object sender, CustomEventArgs ev) { // Do some stuff, then pass the event up the chain onMyEvent(sender, ev); }
Its just convention. You can do your own custom event args.
Helps so much with coding standards, too.
It is worse than you think. Subscribing and unsubscribing events are themselves not thread safe, and subscriptions and unsubscriptions will be quietly lost if they're done concurrently. Explicit synchronization is absolutely required if there's any chance of events being hooked up or fired from different threads. Read [MulticastDelegate.cs](http://reflector.webtropy.com/default.aspx/4@0/4@0/untmp/DEVDIV_TFS/Dev10/Releases/RTMRel/ndp/clr/src/BCL/System/MulticastDelegate@cs/1407647/MulticastDelegate@cs). Plus of course if one of these delegates throws an exception it will prevent execution of the rest of the delegates. That can produce very odd side effects. C# events are fine for simple UI programming. For anything else, you're probably better off managing your own delegate lists, since you can directly control the synchronization and error handling behavior.
As always, the response is "profile it and see" - in this case though, I think you'd have to use an actual profiler; you'd be timing what (as you said) would be a *potential* branch prediction miss, although this is a common enough pattern I would think it's optimized away. Regardless, in my opinion, if this is the thing you (the general you, not directed at you personally) are concerned about performance wise, it's a virtual non-issue. :)
There's nothing special about it, it's just a convention. EventHandler isn't special either: public class Program { public static void Main( string[] args ) { var p = new Program(); p.WeirdEvent += Console.WriteLine; p.FireWeirdEvent(); } public event Action&lt;int&gt; WeirdEvent; private void FireWeirdEvent() { var evt = this.WeirdEvent; if ( evt != null ) { evt( 42 ); } } } This code works...but please never, ever do that. IMHO the only good reason not to use EventHandler&lt;T&gt; is to make your own typed event handler, using the sender's actual type instead of "object".
Eric Lippert (former member of the C# language design team) wrote a nice article about this: http://blogs.msdn.com/b/ericlippert/archive/2009/04/29/events-and-races.aspx
This is a decent solution 90% of the time, but it does have a few issues to be aware of. First, it's ~~completely valid for a user of your class to set Changed = null~~, for example as a quick way of unsubscribing multiple handlers, and now it's your code throwing an exception when you try to raise the event. Second, all of the benchmarks I've seen show this method to take several times longer than the null check, although it's still pretty fast. So, probably not something that will cause you any problems, but not always the best solution. Edit: Don't know where I got the idea that you could do Changed = null from a different class. That definitely doesn't work.
Events are one of my most favorite things after coming from Java. Think of the delegates!
&gt; it's completely valid for a user of your class to set Changed = null I'm not a C# expert, but that feels like a bad thing for them to be able to do. Would it be prudent to expose Changed as a property with a setter that rejects null? Or would the getter/setter pattern play havoc on the delegate? (I imagine += would decompose into a get followed by a set, which would cause a whole different set of race conditions)
Sure, there are a number of ways to work around the built-in behavior of delegates and events. [Here's](http://www.ikriv.com/dev/dotnet/delegates.html) a good introduction to some of them. That said, your time will usually be better spent just following the standard pattern: make a temp copy of the event, check it for null, and then call it. Or, use some extension methods like this, and just make sure you always call myEvent.Raise(this, e) instead of myEvent(this, e): public static void Raise(this EventHandler handler, object sender, EventArgs e) { var tempHandler = handler; if (tempHandler != null) { tempHandler(sender, e); } } public static void Raise&lt;TEventArgs&gt;(this EventHandler&lt;TEventArgs&gt; handler, object sender, TEventArgs e) where TEventArgs : EventArgs { var tempHandler = handler; if (tempHandler != null) { tempHandler(sender, e); } } 
 var myFoo = new Foo(); myFoo.SomeEvent = null; Your move. :) Edit: **Error 1 The event 'EventTest.Foo.SomeEvent' can only appear on the left hand side of += or -= (except when used from within the type 'EventTest.Foo') K:\Temp\EventTest\EventTest\Program.cs 35 6 EventTest** You win again, Visual Studio. 
Also, stop with the [Hungarian Notation](http://en.wikipedia.org/wiki/Hungarian_notation), we get it, it's an object.
Fair enough. I agree events aren't perfect the way that .Net originally laid them out - nor are locks or a number of other constructs. I assume there are people back at Microsoft who dream of writing a C^ or something that corrects the mistakes of C#, the way C# was meant to step forward from C++ and Java. But at least as internal constructs they're reasonably safe and cheap to use, for example as a first step on your way to Message Queues.
Heh - if you could actually do that, I'd be concerned. :) Can't assign event members outside of the class...now, if you're setting the event to null inside your own class, then that's your problem.
Okay... But the EventArgs class doesn't seem to have any useful properties or methods. So why does the generic EventHandler force me to inherit my object from the EventArgs class instead of allowing me to use any other object? Nothing stops people from using the same pattern with a plain object.
Huh, you're right. For some reason I had it in my head that this was valid but pathological C#. Time to go edit a bunch of my other comments, I guess.
But custom event args must inherit from EventArgs - a base object with no apparent purpose. That's what I don't understand. You can use the same convention without forcing useless inheritance.
Hey, this is pretty cool. Why exactly should I not do this? I find myself using events all the time and wondering why I have to pass two worthless objects that I know I won't ever need.
Benefits of using the "delegate { }" form are: works in every version of .net, don't need to know what signature you need for the lambda, anonymous so the compiler will generate a throwaway name (no chance of unsubscribing it)
If you've still got the harness, can you re run in release? Interested to know what optimizations, if any, kick in...
Also, 11 nanoseconds "sounds right"; instruction fetch, call preamble, invocation, stack cleanup...
Is that the same class as this one? http://msdn.microsoft.com/en-us/library/system.multicastdelegate.aspx 
Sure. At one and two delegates, it's 1.0690093s difference/~4x slower to use an empty delegate. At two and three, it's about the same time difference as under Debug, but ~1.3x slower. In both scenarios, they each shaved ~0.35s off their runtimes. I wouldn't be surprised if the null check was being optimized away by the compiler in my simple test, however, whereas it would probably still exist in more realistic scenarios. I don't think EventHandler handler = delegate{}; if( handler != null ) is particularly difficult to optimize.
Good point - thanks for rerunning the test! Gets me thinking (as I often do when I should be sleeping) if there's a way to "suggest" a better optimization by altering the construct slightly...like a special "NullDelegate" or similar. Interesting...
Consistency. Knowing that all events on all objects are used in a similar way outweights the benefits of not having to pass two objects. Imagine having to use a library where all events have their specific delegate type. Every time you want to register to an event, you'd have to look at the documentation to see what its delegate is.
Don't have a lot of time to comment right now but this should help you: http://en.wikipedia.org/wiki/Common_Intermediate_Language
Okay, so an exe is a binary executable program. Regardless of what language you write a program in, Windows needs to see an exe to know "hey, I know what to do with that" (not always, but for our purposes, this is true). Now, an EXE that's been written in C# can't really stand on its own. You (or the user of your program) must have the .NET framework (at a version equal to or greater than the version you used to write the program) installed. Fortunately this comes with every copy of Windows and/or can be easily downloaded. When you compiled your program into an EXE, the compiler didn't really compile it into a program that your computer can run on its own, the way a C++ compiler would run. Instead, C# gets compiled into a series of "bytecodes," a lower level 'language' called Intermediate Lanugage. This is a defined set of instructions that can then be executed by the .NET virtual machine (remember that .NET runtime library you and your users installed earlier...or got with Windows?). It's this .NET runtime that does all of the memory management and garbage collection and the like. Some of that is oversimplified; I don't think anything is really wrong with my description though (others: feel free to correct anything you might not like about my explanation...it was hastily done)...it's a start, anyway.
Your executable is a binary, yes. It contains among other things intermediate language that will be compiled to machine code for the platform at runtime. It can only be run by people who have the correct version of the .net framework installed. The runtime will manage memory, it wasn't done at compile time. 
The exe is an intermediate language that is run by the .net runtime. The .net run time is a virtual machine. It manages and cleans up memory for you. A computer will not be able to run your exe unless it has the .net runtime installed. It probably installed the runtime when you installed the sdk. If you want to learn the details of the runtime, I recommend you read CLR via C#. Its a very thorough book.
The MS C# compiler (csc.exe) ultimately outputs a binary file known as a [Portable Executable (PE)](http://en.wikipedia.org/wiki/Portable_Executable) file. This is the standard format for executable files on modern Windows. The PE file describes the external libraries (like kernel32.dll, user32.dll, etc.) that it needs to run on Windows - libraries which allow the program contained in the PE file to use the services that the OS provides, as well as any other libraries bundled with the program EXE. This is a standard part of any PE file. *(Note: This is also essentially the same in any modern OS which uses dynamic loading of libraries at runtime, even if they use different formats to do it.)* One of these dependencies for a .Net application is "mscoree.dll" which is the primary entry point for loading the .Net runtime and initializing a Windows [process](http://en.wikipedia.org/wiki/Process_\(computing\)) with all the in-memory structures and threads which perform the services which .Net provides ([JIT](http://en.wikipedia.org/wiki/Just-in-time_compilation), [GC](http://www.simple-talk.com/dotnet/.net-framework/understanding-garbage-collection-in-.net/), [assembly loading](http://blogs.msdn.com/b/junfeng/archive/2007/08/06/the-sequence-of-interactions-between-clr-loader-and-fusion-during-assembly-load.aspx), etc.). Because csc.exe writes the PE file with "mscoree.dll" as a dependency, Windows will load it for you. This is what really starts the .Net part of the program. csc.exe also writes a sequence of instructions to the PE file (like any compiler would) but these instructions are not native, they are Common Intermediate Language (CIL) instructions - a sort of "high level" assembly language. After being loaded by Windows, mscoree then goes back to the PE file that csc.exe wrote and loads these instructions and Just In Time (JIT) compiles them (meaning the instructions are compiled as needed, not all at once) into x86 or x64 instructions at runtime. There are a few missing details here (like extra tables in the PE format which the assembly loader uses, and how the JIT actually happens, and where all the types go in memory, whether or not the assembly has been ahead-of-time compiled with NGEN, whether or not you just output a .Net module and not an assembly, etc.), but this is the basics. After a program is loaded, and the CIL has been compiled into native code and the code is "running," all the objects you create are allocated out of memory which has been established when .Net was loaded into the process. This memory is called the "managed heap" and is called this way because the .Net Garbage Collector (GC) keeps track of each object which has been allocated on it. In order to determine if the object is not in use anymore, it uses a couple of starting points (called "roots") and sees if it can reach it by traversing the references from one object to another. After checking all objects this way, if it can't reach a certain object, it is "collected" and the memory considered free again. As to your EXE that you are running without installing .Net - you do have .Net installed. It probably just came with your OS.
&gt; What is that .exe? Is it binary? Or some kind of intermediate language? The executable is indeed binary, although instead of x86 instructions, it contains Common Intermediate Language, which will be assembled on the fly into x86 instructions. &gt; If I wanted to distribute this game, can I simply give this .exe to any windows user, and will they be able to play it without issue? Yes. &gt; Did the compiler manage my memory for me? Did it do garbage collection? Memory management and garbage collection is managed by the runtime, you shouldn't have to worry about that most of the time. &gt; run my little .exe without even having the .NET framework installed. I believe a version of the .NET framework is installed on every Windows computer automatically - if you truly don't have it... that's interesting.
open up an sdk command prompt and go: ildasm my.exe you might find this interesting
Just for completeness, this will show you the "Common Intermediate Language (CIL)" that the other posters are talking about. As you can see this is not assembly code, but the code that the " Common Language Runtime (CLR)" (aka the .NET virtual machine) then compiles "Just-In-Time (JIL)" to native code during execution. This disassembled CIL is the output of your C# source code compilation. And the .exe (or .dll) that outputs from this process is called an assembly. So, to recapitulate: C# source --[compilation]--&gt; .exe assembly (CIL) --[JIT compilation]--&gt; machine asm Edit: added info
Good response. Just an adendum, the runtime components described above form part of the .NET Framework known as the [Common Language Runtime](http://en.wikipedia.org/wiki/Common_Language_Runtime) which is itself a part of the [Common Language Infrastructure](http://en.wikipedia.org/wiki/Common_Language_Infrastructure). These are important parts of the .NET Framework, but are distinct from the .NET Base Class Library that you are probably familiar with.
Why hasn't anyone linked [this](http://www.codeproject.com/Articles/1825/The-Common-Language-Runtime-CLR-and-Java-Runtime-E) article? It's the best explanation I can find. Certainly worth the time to read it.
Also, there are certain versions of .NET you can depend on for each version of Windows. Others may or may not be there. For Windows 7, [you can depend on .NET 3.5 being there](http://en.wikipedia.org/wiki/.NET_Framework#History). If you want more, you should bundle the installer for that .NET version with your own installer. ...This is left as an exercise for the reader.
Hi, no. Just a normal Windows Form Application. 
What I am thinking of doing is creating a txt file and saving the path in there. But for that I would need to have the application create the text file in its installation folder when it is installed, how can I do this? I feel so lost but I need to get this thing to work. 
Your best bet would probably be to save the value into an XML file using [XMLWriter](http://msdn.microsoft.com/en-us/library/system.xml.xmlwriter.aspx). You can then read the value from it using [XMLReader](http://msdn.microsoft.com/en-us/library/system.xml.xmlreader.aspx) on start up. If it's null, prompt the user to enter it.
Hi, Thanks for the help. It leads me to my next question. How will I get the application to create the xml file on installation. Otherwise I can code it to create the file, but then it needs to find the installation path. Ive tried System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location); But all that is being returned is "Please specify Location Path"
Use the settings functionality that is built into .NET: http://msdn.microsoft.com/en-us/library/aa730869%28VS.80%29.aspx This seems to be just the thing you are looking for.
I just read through it and tried it. It is exactly what I was looking for. Thank You so much! I am more grateful than you can understand. If ever you need anything ever again I will do my best to help you! 
If you want different Windows users to have different values I'd toss a value in hkey current user in the registry.
You're better off using shiftend's version, but for future reference you can use [Directory.GetCurrentDirectory()](http://msdn.microsoft.com/en-us/library/system.io.directory.getcurrentdirectory.aspx) Also, if you're looking at doing C# long term you may want to look into using WPF instead of winforms. It's a steeper learning curve but other than that it's better in pretty much every way. 
You're better using something like the `%APPDATA%` folder, which is accessed with `Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)`. There's a few other options, using the other values of `Environment.SpecialFolder`.
I agree with this. If you just need to save the location, create a registry entry with the value that you need.
Can you not use some sort of database? I am not familiar with windows form apps, but that is what databases are usually for.
That doesn't necessarily return the executable path.
True, but only if he changes it. Otherwise it will return the directory where the process was started. Definitely don't rely on it to always be the executable directory, but it's an easy way to get it on app start. Of course you shouldn't actually be saving files in the install directory anyway, that's what appdata is for. 
That looks really cool. I have to take it for a spin!
This is a great start. I think you should address some things either by adding features or stating in your documentation that you don't support them: * Transactions (not supported now) * Concurrency (reading and writing to the same key from multiple threads) * Memory management (low memory causes crash?) * LINQ is only against the list items inside a key (the db reads all the items in the list from disk then performs an in-memory query) * Backup/restore (no way to ensure that backup does not happen mid-write) * Scale (multiple disks, multiple machines, etc.) Right now I see this project being a good key/val store for local app usage (like sqlite or SQL CE would be). Keep up the good work.
Okay so if I want to return that whole Console.WriteLine(); as a string how do I do it and still keep my placeholder {0} things working?
public string DisplayMessage() { string s = string.Format("{0} text text {1}", 42, 43); return s; } /// in main... SalesCalc sc = new SalesCalc(); Console.WriteLine(sc.DisplayMessage());
Like this? [Program.cs](http://pastebin.com/LEEd8d3h) [SalesCalc.cs](http://pastebin.com/Pm7hg2zm)
Looks good.
You also shouldn't store the tax values etc in the calc class. You should either set them in the constructor or maybe pass it a SalesCalcSettings class or something.
On a side note, you should not be using `double` for storing money amounts. A more appropriate type would be [`decimal`](http://msdn.microsoft.com/en-us/library/364x0z75\(v=vs.100\).aspx) http://stackoverflow.com/questions/1165761/decimal-vs-double-which-one-should-i-use-and-when/1165788#1165788
Short answer: you're doing *a lot* of extra work. Each time you try to find a prime, you recalculate *each and every* prime below it in just about the least efficient way possible. I need to read it more to give you specific problems, but that's the short answer. I hope the criticism that follows isn't taken harshly - I'm going to break the lines apart piece by piece and show problems with everything.
We learn by asking questions so no harm in the valuable input you provided. I will look at my code again to see if I can figure it out in parallel. EDIT: One thing I can do to improve the code I think is to tweak these lines. Multiplication is expensive from what I remember so I will look to see if I can do a trick shifting the bits. &gt; // multiple was found &gt; if (n1 * n2 == n) 
then in SalesCalc do something like SalesCalcSettings scs = new SalesCalcSettings(); result = totalSales * sgs.getSalesTax(); ?
To generate prime numbers, try the Sieve of Erathostenes. It's pretty simple - here's how you do it by hand: Write all the numbers from 2 to a number X For each number If it hasn't been crossed Cross each multiple of that number (but not the number itself) The remaining numbers are the primes up to X You need the first 1000 primes, so you'll have to pick a number that probably has 1000 primes below it, like 10000, and check that there are actually at least 1000 primes.
You really need to rethink the whole isPrime() method. It is horribly inefficient - checking all n1 and n2 lower than n to see if they multiply to n. You only need to check the primes below n to see if they divide n evenly. For this, it would be very useful to keep an ArrayList of primes as you go. Also, do you know about the mod (symbol %) (means remainder) function? Also, and this is important: is this for a class assignment or for your own learning?
Should the calculator be formatting messages? What happens if you want to output messages in a different language? Does the calculator need to know the name of the employee to do what it does? Can you re-use the calculator to calculate pay for multiple employees? Could you replace this calculator with another class that would not calculate pay based on commision, but rather a fixed amount?
I come from a C++ and other high level languages. I haven't programmed in a year so I am rusty as you can tell. I am brushing up my C# skills since there are a lot of C# jobs out there. I know how to program but just need to warm up again and learns the ins and outs of the C# language. This is for my own learning. Yes, I know about the mod operator. After I looked at my isPrime algorithm I could tell where I was going wrong.
When you have it, you should post the new isPrime method. There may still be ways to make it faster.
The [Prime Number Theorem](http://en.wikipedia.org/wiki/Prime_number#Number_of_prime_numbers_below_a_given_number) n/ln(n) approximation says that 10,000 is just about the right number to yield 1,000 primes. [Cheating a bit](http://www.wolframalpha.com/input/?i=1000th+prime) says that you can stop at 7,919.
I was not aware of this algorithm. After looking at an animation of it, what a smart bastard!
More like this: SalesCalcSettings scs = new SalesCalcSettings() { FederalTax = 0.18; RetirementCont = 0.10; }; SalesCalc calc = new SalesCalc(scs); or calc.getSalesTax(scs); 
Thanks again for the help. What made me post initially is that I thought C#/.NET was doing something behind the scenes that I didn't remember. 
So I need I/O or formatting class?
(Additionally, you could store the primes in a SortedSet instead of an ArrayList, but by now I'm getting very pedantic)
It's been done. http://www.gamedeception.net/threads/17994-C-WhiteMagic-Injected-NET-Helper-Library http://www.gamedeception.net/threads/14468-BlackMagic-Managed-Memory-Manipulation
Not necessarily, you already have a place where you parse input, so you can just format output there as well. But in a more complicated project, sure you might end up having a formatter and/or IO class of sorts to organize code better.
yep, that is the one.
Or save it to some file on the user's machine 
Not sure why that is happening, but I would only change the location in the case select, and prbly just stick to your picStart.Location variable. I would also use vector2 for your location variable instead of points, that way movement/ direction can also be a vector2 and they can be added, or multiplied or w/e. The rest of that code can just go at the bottom. switch (e.KeyCode) { case Keys.S: picStart.Location.Y += 1; Break; case Keys.W: picStart.Location.Y -= 1; break; case Keys.A: picStart.Location.X -= 1 break; case Keys.D: picStart.Location.X += 1; break; } label1.Text = Convert.ToString(LocationX); label2.Text = Convert.ToString(LocationY); did the best i could with formatting, w/e.
Clever... but i get an error with the picStart.Location.X(or Y) += 1; method. I get the error "Cannot modify the return value of 'System.Windows.Forms.Controls.Location' because it is not a variable" google wasn't my friend and didn't deliver an answer. any known fix?
&gt;when u press and hold the down arrow key, it will move down 1 line, pause for half a second before scrolling fast down the rest of the lines. that's how the image is in my application, as best as i can describe it. This sounds like it's due to the way Windows treats holding down a key. That is: hold down a key like, uh, E, it'll input one character, then start repeating it several seconds later. For game input, your best bet is to use DirectInput or the XNA libraries. Whether this is the actual issue I'm not sure, but it seems to fit. EDIT: I'd like to say that while Windows may handle text input one way, this may not be the underlying issue you're experiencing. It's just my thought and it's something worth testing.
thank you sir! since it is my first semester programing I will have to go with the array option. thank you again and have a very nice day
THANKS EVERYONE! upvote for all of you. this was really getting on my nerves. krueger9 thanks for the formatting and thanks to iggy andricodued for the XNA and repeat delay ideas! The problem seems to now be fixed
I may look into this. We have a client with a single overloaded sql box. They wont get a second sql box to load balance and wont let us create a cache server. So I think the only option I have is for something like this where its a file based cache, local to the web server.
I just did a quick test, and found that only checking up to the square root is slower than just checking all the primes I already found. [Here](https://gist.github.com/4573719)'s the two versions. Running the top code to find the first 1000 primes, then summing them, takes 7ms on my PC. Doing the same on the bottom one takes 20ms. Unless I cocked up somewhere, which would be embarrassing. 
Ah. Yup. I claimed performance before testing it. Turns out Where actually creates a whole new IEnumerable and returns it. Thus, you loop over the primed twice - once for the new list and once in your for loop. A better to say that would be: if(prime &gt; sqrt){break;} And wouldn't do any extra work.
I just changed the filter code so that it just checks if prime is higher than sqrt(i), and ran it for the first 10,000 primes. The time for the unfiltered check was 873ms, while the time for the filtered check was 16ms. Quite an improvement.
Does it compare against Math.sqrt(i) or int sqrtI? Probably doesn't change anything - but it could. ~~EDIT: Also, you could probably cheat a little more by only checking odd numbers for primality. The evens sure aren't.~~ Oh. You're already doing that. You can skip the multiples of 3 too. For every 6 numbers, the ones that are congruent (equal mod 6) to 0, 2, 3, and 4 can all be omitted - leaving only the ones congruent to 1 and 5 to skip 66% of all candidates.
I recommend EPPlus as a library to deal with excel in .NET, it's pretty robust. You can add the reference by going to: Tools -&gt; Library Package Manager -&gt; Manage NuGet Packages for Solution... Search "epplus" in the "Online" section and add to your project. It looks like you're going to have to take the file in, then search for lines that are blank all the way across to denote a break between separate tables. This example should nudge you in the right direction (it's in VB, yuck): [How does one read from a spreadsheet to a Datatable?](http://epplus.codeplex.com/discussions/288076)
I'm not saying you need one, but most apps require the ability to store more than one string. With him being new to programming I was just suggesting it as an option incase he hadn't considered it. 
Your explanation makes sense until you get to the dictionary part... why would you use a dictionary instead of two properties... Name and Number, with a third property, Description, which simply returns "Name + " - " + Number"
Because it's an Addressbook, so I'm assuming you'll want to be able to look up individual entries at some point. I did, however, make a mistake in my Array based solution, Array.Length will give the location of the next place, there's no need to add 1 to it (because arrays are 0-indexed).
Good points, well made. 
A suggestion for a neat isPrime function is listed below. On my PC the calculation for the sum takes about 0-1 ms (compared to 24ms your improved code). The checks at the beginning can be optimized away, if the the number passed to the function is selected carefully. http://pastebin.com/gd98wLfu
&gt; As can be seen, AES and Rinjdael provide the best performance, partly due to the fact that they are purely managed. Actually, it's surprising they work as fast as they do. The older algorithms (DES, etc) are wrappers around the C code implementations provided by the operating system. And yes, if you have cryptographic accelerating hardware, or a modern CPU that has AES extensions, it'll be faster still. 
Does anybody know what the point of using SecureString is? Supposedly it keeps the strong value out of memory, but you can initialize by building the string one character at a time. Isn't this string also visible in reflector?
It looks like it's designed for securely manipulating user-input data (such as passwords) rather than distributing secure data with an application.
I understand the theoretical concept, it just doesn't make sense to me in practice. I mean forget decrypting it, can't somebody just catch the characters before you initialize the SecureString)? Is there a such thing as a secure location in .NET? Can't somebody just patch the IL code and remove the SecureString? I just don't understand why they would spend time making a class that is undermined by the entire framework.
I was hoping more advanced algorithms would be discussed. My understanding is that quantum computing will be able to decrypt AES. On the plus side, I learned about RNGCryptoServiceProvider() which could be used to push better Random(). *Right?*
Holy shit, I happened to have written a prime solver just a few days ago. Mine solves the first 22000 primes in 1000 ms, or the first 1000 in 9 ms. It sums the resulting List&lt;int&gt; of 1000 in an insignificant amount of time(ms). It's threaded &amp; asynchronous. I didn't add any ~~cheats~~ shortcuts, because my goal was to make an algorithm that could be iterated to load a CPU and reiterated to check the stability of the CPU. *Albeit I used signed integers.* Here's the benchmark code: var stopwatch = new System.Diagnostics.Stopwatch(); stopwatch.Start(); // do something stopwatch.ElapsedMilliseconds.ToString(); I use List&lt;int&gt; to pool results from an iterator, and multiple iterators to threads returning Task&lt;List&lt;int&gt;&gt; into a *List&lt;Task&lt;List&lt;int&gt;&gt;&gt;* which I find hilarious.
may you share your code? i am curious how you did it in a threaded way
Disclaimer: WPF, Finds primes up to a number; not primes up to a limit, counts zero. * Here is the core method: private List&lt;int&gt; checkrange(int from, int to) { var intlist = new List&lt;int&gt;(); for (int i = from; i &lt;= to; i++) { bool _thisint_fails = false; for (int upto = 2; upto &lt; i; upto++) { if (i % upto == 0) { _thisint_fails = true; break; } } if (_thisint_fails == false) intlist.Add(i); } return intlist; } * Here is the threading of the method: private async void button_calcPrimes1_Click(object sender, RoutedEventArgs e) { //get range maximum var n = int.Parse(textBox_calcPrimes1.Text); var r = n; var stopwatch = new System.Diagnostics.Stopwatch(); stopwatch.Start(); var taskInt_list = new List&lt;Task&lt;List&lt;int&gt;&gt;&gt;(); while (r &gt; 1000) { var _rangeMax = r; r -= 1000; var _rangeMin = r; taskInt_list.Add(Task&lt;List&lt;int&gt;&gt;.Run(() =&gt; checkrange(_rangeMin, _rangeMax))); } taskInt_list.Add(Task&lt;List&lt;int&gt;&gt;.Run(() =&gt; checkrange(0, r))); var aggregateInt_list = new List&lt;int&gt;(); foreach (Task&lt;List&lt;int&gt;&gt; task_int in taskInt_list) { aggregateInt_list.AddRange(await task_int); } textBlock_big.Text += String.Format(" Count: {0} \n Sum: {1} \n" , aggregateInt_list.Count(), aggregateInt_list.Sum()); foreach (int _int in aggregateInt_list) { textBlock_big.Text += " " + _int.ToString(); } button_calcPrimes1.Content = stopwatch.ElapsedMilliseconds.ToString() + " ms"; } Apologies for the lack of markup. I wrote the code for fun and to to test my ability, thinking of Prime95. The biggest hurdle will be deciphering Task running, if you've never used Tasks before. * n in the first line gets an int from a WPF textBox. YMMV. * r is the remainder of primes to calculate from n maximum. A while loop fires off *ranges of 1000* to a method which will run on the threadpool, when r is less than 1000 the loop ends, then a final task is fired after the while loop to solve the remainder. * aggregateInt_list is the aggregation of all async Task&lt;List&lt;int&gt;&gt; results. It is by nature unordered above 1000. * if you're unfamiliar with .net 4.5, *await* unwraps the result of a Task. * there's an Int32 overflow in .Sum() when n gets large. * the arbitrary range size, 1000, should be adjusted based on the size of n.
I think this shows 2 things: 1) managed code really isn't much slower than C/C++ code and 2) the penalty to call into the OS via P/Invoke is high. Both of these things should be commonly known by now.
Thanks for the code. No need for the mark-up. It is like a treasure hunt so I will figure out. At first glance, I understood most of this but have to look up some things since I don't recall what a few C# keywords do.
Yes, you are right about the first set of prime numbers. Kudos on the solid developed code.
I read somewhere recently that is is better to do this for performance sake. I don't remember why though. **BEFORE** Console.WriteLine("The subtotal is..." + subtotal); Console.WriteLine("The amount of tax to be paid is..."+ tax); Console.WriteLine("The grand total is..." + total); Console.WriteLine("Thank you for shopping with us!"); **AFTER** Console.WriteLine("The subtotal is...{0}",subtotal); Console.WriteLine("The amount of tax to be paid is...{0}",tax); Console.WriteLine("The grand total is...{0}",total); Console.WriteLine("Thank you for shopping with us!");
regarding the problem with the loop, the problem is this line buffer = Console.ReadLine(); what will happen if the user types "yes"? obviously, the condition will fail
Please PLEASE do not use floating point numbers for financial calculations! Find &amp; Replace "decimal" for "double". Your future self will thank you.
The real problem with the code is after displaying the "Do you wish to add more items?" prompt there is not a second ReadLine() statement, so at that point buffer contains the number that was just entered which is not "y" or "Y" so it breaks out.
**Update:** I made the changes that you and YuiMy suggested. However, I'm not sure if I completely understand what you mean about adding the second ReadLine() statement. So, I added a psuedocode-ish statement towards the end of the problematic function. Is this similar to what you were talking about? Please keep in mind that I am a newbie when it comes to C#, so I greatly appreciate your patience. Thank you again! string buffer; double price; Console.WriteLine("Please enter the price of the item."); do { buffer = Console.ReadLine(); if (double.TryParse(buffer, out price)) { prices.Add(price); } else { Console.WriteLine("Incorrect data was input. Please enter the price as a numerical value."); buffer = Console.ReadLine(); } Console.WriteLine("Do you wish to add more items? Please type either Y or N and press the enter key."); } while (buffer == "Y" || buffer == "y"); { Console.ReadLine(price); } 
Create a class for downloadabletrack (3 strings), create a List&lt;downloadabletrack&gt; of the downloadable object in the form. create an object of it inside the candownload statement. and add it to the list. Call the list inside the button2 event, and do what you want with it Theres a good few ways of doing what you want to I guess, but if you're trying to learn c# then it might be good to get comfortable with OO I imagine you can also access your listview Items from the second click event
This code is _very_ procedural. I think you should, like Versk said, start trying to identify classes that hold the same objects together, or hold the same logic together. Probably some class that handles the communication with SoundCloud, some class that holds the relevant data that you get back etc. At the very least start splitting functionality into a few more methods! Also, for a GUI application, you preferably shouldn't use the synchronous APIs for networking. Start looking into the asynchronous stuff, in this case WebClient.DownloadStringAsync(Uri uri) and WebClient.OnDownloadStringCompleted. Finally, for someone who is used to C#, it wouldn't hurt if you followed the coding style that is used. That means, stop snake_casing your variables and start using lowerCamelCase
It's more nitpicking than anything but rather than reading a .conf file with System.IO.File, you'd be better off using [Properties.Settings](http://msdn.microsoft.com/en-us/library/aa730869.aspx).
This isn't a C# specific thing, this is a programming logic issue. These are the steps you want to take when getting the pricing information: 1. display price prompt 2. get price information 3. display continue prompt 4. get continue answer 5. loop to #1 while continue answer is "Y" or "y" If you look at your code you will see you don't have #4. At the point you are checking the while statement, buffer will always be set to whatever the last price value was. And since the last price value doesn't equal "Y" nor "y", your loop stops looping.
Think about separating the UI from logic. Other people's comments have said about creating another class but you want to have the mindset of separating concerns. So the code for your winforms should handle the events, like button click, but there should be other classes to hold logic about the music and connection. this makes it easier to evolve the code or switch it to another platform (web, mobile, etc). Ideally, your UI displays data and takes input. winform class should handle code about winforms.
I understand your thought process, and I see the mistake that I've made, but I'm not exactly sure how to implement it in terms of syntax. Here's my attempt to translate your logic into code: string buffer; double price; Console.WriteLine("Please enter the price of the item."); do { buffer = Console.ReadLine(); if (double.TryParse(buffer, out price)) { prices.Add(price); } else { Console.WriteLine("Incorrect data was input. Please enter the price as a numerical value."); buffer = Console.ReadLine(); } Console.WriteLine("Do you wish to add more items? Please type either Y or N and press the enter key."); { if (Console.ReadLine("Y" || "y")); //my latest additions here { prices.Add(price); } else if (Console.ReadLine("N" || "n")); { Console.WriteLine("Processing your receipt."); } } } while (buffer == "Y" || buffer == "y"); 
&gt;If its just one person then source control isn't such a high priority. Famous last words before losing a shitload of progress.
Noted! i can tell ya from what i have so far, i planned on looking into async stuff, the minute i hit the first button it locks the application for a few seconds, thats no bueno. Thanks for the advice!
oh woah, that is awesome! thanks :D
yeah i was wondering about that, once i figure out classes and objects i think it will be alot easier. i have had some experience with MVC style design in the past, i assume it would be somewhat similar in this too, i'll look into it ;x
awesome, thanks, i'll look into the video series ;x
sweet. i will def look into this. Really there won't be any need for a settings file if i can store it internally and have the app save it. the idea is the user will put in their name and api key and it will just retain that, so if i can eliminate an external config file, im all for it
You're asking for two bits of information, so that means you need two input points. Something like this is closer to the program flow suggested above Do Do Get Price Validate Price Loop until valid price Append price to list Get yes/no Loop while yes Process receipt And, as sauerc says, stop using double. It's the wrong type for this application. If you don't get in the habit of using the right data type for your needs, it'll come back to haunt you later.
Are you suggesting that I use two do-while loops? I'm really confused. 
Yes, one nested inside of the other. You want to two loop like things: The outer loop is about asking for data point after data point. The inner loop is for asking for the value till the user inputs a valid value.
json.net once you learn the mapping attributes and how to get around some of the small beginner mistakes it is a breeze to code with im not sure how it reacts to jsonp ive only used it with json string output so not sure if theres any additional steps to take into account with it 
it also has good documentation and some examples to get you started on their website 
Thank you so much! It's working now.
I should have also said that InitializeComponent(); should stay inside the constructor as that needs to be done far before the load of the form. 
You can use this: http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.radiobuttonlist.aspx Then you can have each subset of buttons in its own list and make it visible/hidden based on the category selected.
I prefer to always have radiobutton groups inside a groupbox. This will ensure that only one radiobutton is checked. Then you can use Linq and select from the controls that are within the container. As seen [here](http://stackoverflow.com/questions/6466952/how-to-get-a-checked-radio-button-in-a-groupbox) Dim rButton As RadioButton = GroupBox1.Controls .OfType(Of RadioButton) .Where(Function(r) r.Checked = True) .FirstOrDefault() 
Hi! I'm working on R# XAML support last year and introduce a lot of improvements in R# 7.1 - code completion was completely reworked to be much faster and more precise, resource resolution now works in many new cases. We are still not supporting resolving XAML resources from binary referenced WPF assemblies, but this is planned feature for R# 8.0 and already implemented in latest internal builds. Application-level resources are supported since 5.0: https://dl.dropbox.com/u/2209105/resources.swf We are really appriciate any feedback, please, show me issues you've reported or contact me directly alexander.shvedov[at]jetbrains.com. Thanks and sorry for inconvenience!
Sorry I should have mentioned, I'm using windows forms.
If I have say 3 groupboxes how would I only have one radiobutton ticked? wouldn't I have 3, 1 from each box?
You'd have one per groupbox and would need to query each groupbox. Replace "GroupBox1" above with the name of whichever groupbox you are currently querying.
Don't try and redistribute the .net dlls in your program's directory. Your installer should check to see if the minimum .net version is installed, and direct the user to install it (if not install it automatically) before the install can proceed. The only dlls that should be next to your .exe are: * 3rd party dlls (custom controls, etc) * Your own dlls If there is a separately-distributed package from Microsoft (Entity Framework??) then run it's installer after installing .net itself, and before installing your files. 
Sorry if I wasn't clear enough, I'm putting the DevExpress dlls next to my exe and the program crashes. I have Installshield(so i can check for .net version there) but I'm making sure that my program runs in XP (the computer in question is xp) and I don't want to go through the hassle of making a Installshield msi. I'm in the process of making my Installshield installer register the DevExpress dlls to the GAC, but yeah, real hassle for quick testing. 
Check with DevExpress. They may want the dlls put into the GAC, and there may be additional redistribution dependencies that you're missing. 
Checked. They said their dlls next to exe works fine without gac registration and that all you need to distribute are the dlls I had in the directory(and the program doesn't crash if I add the exact same dlls to a clickonce installer) 
Then sorry, I don't know. If you had an msi installer, you could tell msiexec.exe to log the output. 
Here's my fast version using parallel processing. 1000 numbers in less than 4ms. At least on my computer. [http://pastebin.com/NGUkPwjT](http://pastebin.com/NGUkPwjT) 
I'll be using Installshield when this goes out to customers but that's a good tip for future reference! I was using clickonce only as a test: due to how clickonce randomly installs stuff its a no go for me(as another program calls my exe). I'm 100% sure I got all the dlls and I even set the dlls to copy to output(and I saw them in the directories)with no success but yeah, I've had dx derp on me more than once. I only brought this up because I've had similar issues with user dlls as well. 
This is extremely quick. On my machine, I received... Run Time: 0.0043255 seconds EDIT: I understood most of the code but didn't fully understand the *Parallel.For* part. I had an idea what it was doing when I saw the *lock* but found this page to be useful. http://msdn.microsoft.com/en-us/library/dd460703.aspx
It was my first time using parallel. It appears to assign some x number of iterations to each thread. In that example it sums up the total in each of the threads. However it appears it doesn't have built in thread synchronization so it still uses interlocked. Not sure if it could be done the same with a boolean local value.
Installshield is sure expensive. Recently, I came across this solid open-source alternative and was happy with the results. http://www.jrsoftware.org/isinfo.php
Then you can put each sub-set of buttons in a panel and hide / show the panels based on category selected.
Not my dollar :) 
What addon do you use with visual studio to push to git? 
I actually just use the GitHub Windows application, although it can be buggy at times.
No problem, I figured some people might also find it useful so I might as well post it!
Yeah, I use it now for our internal git and it is buggy as hell. Thanks tho
No problem!
I started with the GitHub client and moved to the command line. Just [wrote about it on my blog](http://ventajou.com/blog/all-in-one-command-prompt-for-windows-developers) the other day if you want to see how I did it.
I used to always use the command line when I was in Linux, I figured i'd give the Windows client a go....it's ehh ok.
You mean the GitHub client for Windows? What I liked about it is that it made git seem simple. Gave me time to learn the concepts without keeping me from pushing code to a repo. Now I stopped using it because I'm comfortable with the command line.
Ha yep! I generally don't get attached to programs, but this one is one of the ones I quite enjoy working on continuously. 
I am using Win8 and haven't looked at the source code yet - thanks for sharing it. Why is the app attempted to connect to www.easytel.com? 
It attempts to connect to easytel so it will show you your ping inside the app. And no problem, always happy to share!
Here is a picture of the app. http://imgur.com/0wtqjmv I only have one hard-drive so the app should be smart enough to know I only have one. It currently lists C:\ and D:\ http://imgur.com/Cqu6LzQ
Thanks I added it to my watch list at Github. I am currently learning C++ on Ubuntu, but will move on to C# sooner or later. I've only written small programs in C#, nothing as complex as yours. Just solving math problems and stuff like that.
Thanks for showing some screenshots! As far as the disk drives, it lists the space for any media device attached to the machine. So if it is showing D:\ that probably means you have either a CD or a flash drive plugged in? Also, double click the form to take those borders away :-)
You know one thing needs is some type of alert mechanism such as being optionally alerted when my Free RAM is less than X amount or something like that. Ideally, the alert mechanism will be configurable. Again, just an idea I have right now. I love the install update feature - right click on the field to have updates install. It would be nice to nice to know what I am installing though. EDIT: I just accidentally installed the Bing Desktop.
Oh, now I see. D:\ is my CD drive. I double-check using My Computer 
I thought about implementing the alert idea, it would be quite easy to do. Maybe even have an option to turn it on or off? I suppose I could make a form show up when you right click to install updates that lists off what will be installed, and then you could choose to continue or cancel?
I am unsure if this is a bug but the CPU utilization doesn't match what the Task Manager shows. I know it delays at time but my CPU Load has never been 10% via the Task Manager. Look for the blue underlines http://imgur.com/TT7OUYt 
Of course there should be an option to turn it on and off. Regarding the updates, it should list the updates and allow you to select which ones you want to install. A simple list should be sufficient showing which ones Windows say are optional and are required.
Oh boy, that may be somewhat of a task. I haven't actually looked into if you can choose what to install from within an application, but I agree that's the way it should be.
You should look into XAML Grids and their rows/columns. Instead of using margins to align everything, you can do something like this: &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition /&gt; &lt;RowDefinition /&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="Auto" /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;TextBlock Text="CPU usage:" /&gt; &lt;TextBlock Grid.Column="1" x:Name="cpuUsage" /&gt; &lt;TextBlock Grid.Row="1" Text="Network usage:" /&gt; &lt;TextBlock Grid.Column="1" Grid.Row="1" x:Name="networkUsage" /&gt; &lt;/Grid&gt; The *RowDefinitions* and *ColumnDefinitions* tags are used to declare your rows and columns. Then objects are placed in the rows and columns, usually one per cell. That way, your app's layout will stay the same when the window is resized, and you just have to add a new row if you want a new row of information. There are three possible values for *RowDefinition.Height* and *ColumnDefinition.Width* (both are of type *GridLength*): * A value in pixels, e.g. "50px". * A value relative to the rest, e.g. "3*" or "1*". After all non-star lengths have been computed, the remaining size is attributed to star lengths depending on their coefficient, e.g. if there's one *3** row and one *2** row, the first will get 3/5 of the space and the second 2/5. * An automatic value, using "Auto". The grid will query the space needed by the children in that row/column and give enough space to fit the largest one. The default is *1**. You can also write it as *.
You mean like [this](http://www.codeproject.com/Articles/21216/C-MYSQLWrapper-Class-and-PHPWrapper-Script)?
Another useful XAML feature - styles. Instead of repeating attributes on every tag like this: &lt;TextBlock Text="Unicorns" Foreground="Pink" HorizontalAlignment="Left" FontSize="14" /&gt; &lt;TextBlock Text="Rainbows" Foreground="Pink" HorizontalAlignment="Left" /&gt; you can create a style. Here's the basic syntax: &lt;Style TargetType="TextBlock"&gt; &lt;Setter Property="Foreground" Value="Pink" /&gt; &lt;Setter Property="HorizontalAlignment" Value="Left" /&gt; &lt;/Style&gt; It needs to be put somewhere in your app's resources - for now, you should write it in your App.xaml's *Application.Resources* tag or by creating a *Window.Resources* tag in your window if you want to use that style only in one window. The above TextBlocks can then be simplified into this: &lt;TextBlock Text="Unicorns" FontSize="14" /&gt; &lt;TextBlock Text="Rainbows" /&gt; and the result will be the same. The Style I created will be applied to all TextBlocks because it doesn't have a key. But you can also declare a style with a key: &lt;Style x:Key="BigText" TargetType="TextBlock"&gt; &lt;Setter Property="FontSize" Value="18" /&gt; &lt;Setter Property="FontWeight" Value=Bold" /&gt; &lt;/Style&gt; and use it with the *StaticResource* syntax: &lt;TextBlock Text="big!" Style="{StaticResource BigText}" /&gt; You can override properties defined in the style, too: &lt;TextBlock Text="very big!" Style="{StaticResource BigText}" FontSize="24" /&gt; And sometimes you need two styles to share some properties, so you can base one on the other: &lt;Style x:Key="InvertedBigText" TargetType="TextBlock" BasedOn="{StaticResource BigText}"&gt; &lt;Setter Property="Foreground" Value="White" /&gt; &lt;Setter Property="Background" Value="Black" /&gt; &lt;/Style&gt; If your style doesn't have a key, it's applied to all controls who don't specify another style, and *its key is the TargetType*. So if you wanted to base a style on the default one we created earlier, you'd do this: &lt;Style x:Key="BigPinkText" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}"&gt; &lt;Setter Property="FontSize" Value="20" /&gt; &lt;/Style&gt; Last tip - all of the above examples use the type name as *TargetType*. This works with Styles in WPF, but may or may not work with other properties that expect types (e.g. DataTemplate.DataType doesn't accept it) or with other XAML-based frameworks (e.g. Silverlight). The long syntax for types is *{x:Type NameOfTheType}*, e.g. *{x:Type TextBlock}*.
Maybe but I still feel a bit edgy having the client hold the SQL commands... Just create new PHP scripts for each command and pass variables as a GET.etc, make sure you escape all the input though.
Try SmartGit. Costs a few bucks, but it's totally worth it. Forgot to mention, it's a standalone application. Wanted to respond to the post below.
Do you have a reference that may help in setting up what you first suggested, something that includes the php script as well?
This to call the php script: http://stackoverflow.com/questions/2701898/how-to-call-php-api-from-c-sharp-simple-examle This on the php script: http://www.w3schools.com/php/php_mysql_intro.asp
nested loop, somethng like this TabPage page = aTabControl.SelectedTab; var controls = page.Controls; foreach (var control in controls) { if (myControl.ToString() == "System.Windows.Forms.CheckBox") {//select it } else { //nothing} }
Adding one row using your system means calculating the margins for each element. Adding one row using a grid means adding one RowDefinition and placing each element. Also, hardcoded margins may be a problem on high-DPI systems, or with certain themes (e.g. high contrast) that change the size or shape of some UI controls.
Oh I see, I may just spend some time redoing everything the way you suggested. Thanks!
what I meant by My Computer is this... http://imgur.com/kOkQY0L note, i am using a different computer than what i used to test out his software.
You can look in the controls collection of the TabControl and iterate through each control in that. The trick is checkboxes could be nested under other controls, for instance in a GroupBox on the tab page. So if you want to be really thorough, you'll need to walk the entire tree of controls. Something like this should do it: LinkedList&lt;Control&gt; toCheck = new LinkedList&lt;Control&gt;(); toCheck.AddLast(tabControl1); while (toCheck.Count &gt; 0) { foreach (Control sub in toCheck.First.Value.Controls) { if (sub is CheckBox) { ((CheckBox)sub).Checked = false; } toCheck.AddLast(sub); } toCheck.RemoveFirst(); } 
Simply iterate over the TabPages property, which is the tab Control's collection of tab pages. Then you can iterate on the controls as desired. foreach (TabPage tpage in tcontrol.TabPages) { foreach (CheckBox c in tpage.Controls.OfType&lt;CheckBox&gt;()) { c.Checked = false; } }
I dig, will definitely use it for prototyping!
Since its not specified, I'm assuming this is WinForms. The TabControl class holds it's tab pages not only in the TabPages property, but also in the Controls property. You can write a simple recursive function to retrieve them all using a generator to eliminate the need to cache anything: private IEnumerable&lt;TControl&gt; GetControls&lt;TControl&gt;(Control parent) { if(parent is TControl) { yield return (TControl)parent; } foreach(var child in parent.Controls) { foreach(var ctrl in GetControls(child) { yield return ctrl; } } } This will give you a flattened listing of all controls in the hierarchy (including the root if applicable) that are assignable as TControl.
*editing is not working on my phone. To use the method just call: foreach(var cb in GetControls&lt;CheckBox&gt;(tabControl1)) { // do something with cb }
Thank you, I'll check this out.
Replace returns a value, that you'll have to assign to the variable you want the result in, and it will NOT change the instance on which it is called. So, if txtAppType is of type String and it is the one you want to replace with "WHA", txtAppType = txtAppType.Replace(txtAppType, "WHA"); Should do. EDIT: and, of course, crogeniks is right when saying that a replace in this specific case doesn't make sense. So, if that's a fragment from your actual code and not a proof of concept, his/her way is the one to go.
Strings are non-mutable; any operation to "change" them will produce a new string. To change the form value you'll have to assign it's value property (likely .Text). 
ah, I name my textbox controls txtFieldName and strings strStringName.
Then, if you absolutely don't care about the text in your textbox, txtWHATextBox.Text = "WHA" will more than enough for what you need to do. However, if you need to replace a part of the text, like other said, the Replace method return the new value, that you have to "store" somewhere. 
I think you've confused me for the OP at some point along the line... 
As I mentioned in another comment I use the txt prefix to indicate textboxes and prefix string variables with str. Similar to how you prefixed the radio buttons with rb. (Did I guess right?)
Dops, I totally did, sorry!
I'm not seeing any really good or compelling reasons not to use it? The only case that makes sense is: &gt;It was useful when there were relatively few data types (string, int, long, short, double, etc..) But that doesn't seem like a good enough reason to stop doing it with the basic set of variables (string, int, long, short, double, etc..) and the basic controls (textbox, radiobutton, label, etc). 
Learn to use String.format and get away from ugly string concatenation (Starts on 59) https://github.com/TannerMiddleton/WinkyMonitor/blob/master/ConkyForWindows/Weather.cs You may also want to use var more often so you can stop doing this &gt;XmlDocument docc = new XmlDocument(); Also look into System.Linq.Xml.. it's a bit better than xpath and will teach you LINQ (you will became a MAN) Also, make those newlines portable. Use Environment.Newline static method for \n, don't just keep writing "\n" Code review you never asked for aside, I like it!
I actually didn't write that portion of code my roommate did that, although I probably couldn't have done any better. I will definitely look into what you pointed out. The weather class in my opinion is the most jankily put together code in the whole application, and it definitely needs to be improved! I'm always looking for feedback, I'm not around many other programmers so I have no idea if what i'm doing is smart or downright dumb. On that note, did the rest of the code look somewhat decent?
Also, the reason this is the case is because strings are immutable in .NET. Every change to a string really creates a new string in memory. 
You can achieve your first goal by manually editing the csproj file so that a different version of the assembly is referenced depending on platform, build configuration, or some other criteria. It's just XML, you can open it in your favorite text editor. The key word to use when looking for documentation on the file format is [MSBuild](http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx). MSBuild is what reads csproj files, invokes the csc.exe c# compiler, and copies files around as needed. Look for where the references are and add an ItemGroup for each platform. For example: &lt;ItemGroup Condition=" '$(Platform)' == 'x86' "&gt; &lt;Reference Include="SomeLib"&gt; &lt;HintPath&gt;..\lib\SomeLib\x86\SomeLib.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup Condition=" '$(Platform)' == 'x64' "&gt; &lt;Reference Include="SomeLib"&gt; &lt;HintPath&gt;..\lib\SomeLib\x64\SomeLib.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;/ItemGroup&gt; Visual Studio might show the assembly twice in the references list in solution explorer, but it will build correctly. Be nice to your teammates and document somewhere that you manually edited the csproj file to accomplish this so that someone doesn't replace it with a newer version using Visual Studio and wonder why it breaks on some platforms now. I'd never heard of Sphinx or Read the Docs for documentation. The name I always hear for .NET API documentation generation is [Sandcastle](http://shfb.codeplex.com/).
Consider using tasks/async/await, not background worker. You can completely avoid all the thread serialization and and a lot of the event noise you're worrying about throughout your code. Seriously, learn it now; you clearly like writing desktop apps and have passion about it, you will be floored. It's only a few years old but your code will be super clean with it. You could literally just spawn off 3 tasks doing the work and updating the UI. I can post a solution tomorrow if you'd like. Main form isn't MVVM but a more traditional winforms style. Definitely learn that next. In short, you could use bindings to "automatically" update your UI when your variables change. You aren't using any bindings at the moment. Winforms style supports some bindings but you may as well just move to the mvvm style since you're using XAML already. You would enjoy them.
Take a look at this. It shows how much shorter the code could be (use imaginaaaation) https://gist.github.com/4670269 &gt;Dispatcher.BeginInvoke(() =&gt; textbox1.Text = t.ToString()); Passing in an action delegate full of what you want to update. It will run that code on the main thread (thread serialization applies, but you are barely pushing any data so it's no biggie). At least you won't have to have a separate background worker event wired up to handle changes and have to notify to trigger that event.. bleh I hate background worker just typing this.
Oops deleted my reply as you replied. (There was no content in my post except to look at my other response) And I graduated only 3 years ago! You will learn either on the job or through reading (or die homeless in the streets.. just kidding). I graduated pretty nooby (not saying you are!) and could not for the life of me put all the concepts together (and I was WAY more afraid of learning new things than you are, believe it or not). I don't have a github account but I will "watch" your project's progress and let you know if I have comments. 
Ha, I don't mind being called nooby. I've still got over a year before I graduate, so there's plenty of time to learn! I enjoy learning new things, you should have seen this application in the early stages...you just think it's bad now! 
I've seen examples like this using x86 and X64. Would the same rules apply if I wanted to include separate assemblies for Windows 7 and Linux? Assuming of course that the assemblies are api compatible.
feredal_employee, I'm sorry, I'm new to fiddling with cdproj files beyond fixing merge errors, I've got no idea what you mean.
If your favorite text editor happens to be VS, know that it can open project files as XML if you unload the project first.
IoC is inversion of control. It's a design pattern. Essentially you delay binding your dependencies until runtime. Code to an interface or abstract class and do the platform check on startup. Then pass in the correct dependency that satisfies the interface. Dependency injection is one strategy to accomplish IoC. There are performance considerations if you opt for an IoC container, but you could look at examples on how containers like ninject allow runtime assembly linking and roll your own if you wish. Good luck, sir.
Sure. If you go into Build-&gt;Configuration Manager, you can create new platforms and build configurations. You could rename "Any CPU" to "Any CPU - Windows" and create an "Any CPU - Linux" platform. Because the IL emitted by the compiler isn't tied to any operating system, there isn't anything that would make it inherently a Linux target; what would make it a Linux target is whatever changes you make to the csproj.
Sorry to just drop an acronym. Here is a wikipedia article on what I was talking about. http://en.m.wikipedia.org/wiki/Inversion_of_control And here is a popular library for Dependency Injection: http://www.ninject.org/
I think one of the reasons is that it's redundant in Visual Studio, and only serves to make the names of variables look less readable to the programmer(s). If you want to know what type an object is, hover your mouse over it and it will tell you.
That is some clever jiggery pokery there
http://dev.windowsphone.com/en-us
So, in this post where the guy posted his snippit of code you're able to mouse over it and it tell you what variable type it is? Witchcraft. If the code up there were in VS it would make a lot more sense. Here we're guessing at variable types.
PdfBox and IKVM are not new, but I found them very useful for a recent project, and decided to walk through a very basic introduction tutorial. Feedback and constructive criticism greatly appreciated. Also, I "discovered" iTextSharp after building a recent project using PdfBox. I recognize PdfBox comes with some heavy performance penalties. iText looks cool, but seems to have a higher degree of complexity. Anyone used both, and have comments about the comparison?
I've used iTextSharp a bit but I haven't done any heavy lifting with it yet. The main thing it's doing right now is pulling pages out of a huge PDF that came from SSRS and stitching them together into an executive summary type of report. SSRS spits out weird PDFs though (fuck you SSRS, I hate you so much) so iTextSharp and pretty much every other tool I've used occasionally melt down due to the PDF not complying with Adobe's standard in some weird way. At some point I'm hoping to leverage iTextSharp to cut SSRS out of the loop completely because holy fuck do I hate SSRS. For what I've done so far though, I haven't found iTextSharp to be difficult to use at all.
Yeah, those are the types of things I needed to do as well. I was already semi-familiar with the PdfBox approach, and thus found iText a little more challenging at first. I decided to wait on it altogether until I had a little time. Probably it was just a matter of already being familiar with PdfBox. I must admit, though, I was also simply interested in seeing how the Java/IKVM thing worked. 
I know this is off topic but holy shit fuck ssrs.
No kidding. It's the source of 50% of my work related headaches. Fucking hate that piece of shit.
I have used iTextSharp in several projects over the years and despite it's relatively steep learning curve I was able to create PDFs which had pretty complex requirements. From what I recall these included: various paper sizes and orientations, embedding fonts, multiple layers, rotated text etc. I have not used PdfBox - but would probably draw for iTextSharp again because of my experience with it.
Another product worth mentioning is Aspose.NET. It's not free but in my opinion it's the best product around for PDF and Office Suite document generation/manipulation. 
As I mentioned, I suspect iTextSharp is the way to go for most things beyond (or including) simple page extractions, etc. I just happened to discover PdfBox first, and found the Java/.Net novelty compelling enough to explore a little . . .
If some malware is intercepting API calls (including the APIs that Win32_ProcessStartTrace will eventually call), then pretty much any user-land API you can call will not show them. If you want some background on what it takes to find these processes, look at this [process detection test](http://www.ntinternals.org/process_detection_test.php) by the NT Internals folks. Basically, you'll need to get to NT's internal data structures, build up your own list of running processes, and compare that to what the APIs return. In other words, it's not a simple API call, and it's not for the faint of heart. It's also not something I'd want to attempt from managed code.
Good point, really. Given the widespread adoption of the pdf as almost ubiquitous, you would think they would have added at least something by now. 
I understand your frustration with SSRS but what you're doing is pretty limited as far as the entire SSRS user base is concerned. I love SSRS for what it is, a free (if you have sql server), easy to learn/use, fairly powerful report writer. Not to mention fantastic API whether you need a web service end point or full fledged asp.net control support. Just have to take the good with the bad. I am sure there are better products out there if you're willing to pay.
Hah, completely valid points. Working with ssrs can just be frustrating, but what isn't?
Not meaning to nitpick, but from a purely stylistic point of view, you don't need the '== true' bits in your if statement. if (rbWork.Checked &amp;&amp; rbWHA.Checked) {} is enough :). Of course what you have is fine too. Also, on the string issue (others may want to correct me here), you may want to intern the "WHA" string if you're going to be using it a lot. At the moment, each time you set txtAppType = "WHA" as others have suggested, you'll have a new instance of the same string sitting around in memory. Interning the string means that the same instance will be used each time it's set.
we use abcPDF.net for all our PDF needs in C#. Not free but works great.
Honestly, didn't know about Adobe COM libraries (although, as a "weekends and evenings" self-taught developer wannabe, COM gives me the shivers, just a little! On the other hand, might as well see if I have any hair on my chest, eh? Thanks for the tip!
Is this a joke? You can easily download unlicensed copies of both VS2012 and Resharper. 
The thing to remember is BizSpark is just a defered payment promotion. If your business is still around a few years afterwards, you have to buy the software at the normal price. That said, its not a bad idea at all, I've seen it has helped kickstart companies first hand. Just make sure you read the small print. As for ReSharper, jet brains have been known to give it away free to people who make good blogposts / projects that benefit the community. There is also a 90 day trail of Visual Studio, you could use it to evaluate 2012, then compare and contrast it with the Express edition. If your getting an app out, then get some revenue, you might find that, due to the knowledge you got from your evaluation, a purchase of 2012 would be a good idea. My understanding is that would be legal per the trail license agreement, but IANAL.
About BizSpark, the things is : you have all the licence you need (+ A lot of Azure services) for 3 years for free. After 3 years, if you don't want to pay the normal price, you just have to pay about $99 to leave the program. Personnaly, I have a BizSpark account. $99 for 3 years of full licences. Worth it !
Why do you make it so hard for yourself? It seems you've already bought their products once. Put on your freebooter hat, surf some waves..
Figure out what you can get for your soul to put towards a legal copy. Cause, like you I use resharper + VS and personally, I think its worth it. 
They are still available, but any software obtained through it must be used for educational purposes only IIRC.
There for different things. The web api is optimal for well... web apis. WCF just different. It's good for other forms of communication. Like internal. It is usable externally as well though. Remember: WebAPI = REST WCF = SOAP And a great article on the matter... http://mattmilner.com/Milner/Blog/post/2012/02/28/WebAPI-or-WCF.aspx But depending on how your backend communication... you may want to look at a messaging queue. NServiceBus, Azure Service Bus (my favoriate) ect.. 
Disagree. If your application ONLY has web components then its a good fit for webapi. OP mentions back-end services. WCF SOA with multiple types of endpoint binding excels at this.
WCF is not always just SOAP. You can also expose a RESTful webhttp endpoint: http://blogs.msdn.com/b/endpoint/archive/2010/01/06/introducing-wcf-webhttp-services-in-net-4.aspx
For backend communication, I want to use a mix of all those things you mentioned. Doesn't WCF give me a uniform way to program to those technologies? 
WCF can also talk JSON &amp; JSONP. 
You are correct, however it isn't optimal. The intention for WebApi is specifically for RESTful functionality. Why would you use WCF unless it would benefit you in to have RESTful AND SOAP. His question is about backend. I'm simply stating that for frontend WebAPI is the optimal choice. For backend it will be WCF. WCF supports NetTcpBinding which will be fastest on an internal network. With that being said I would also take a look at messaging queues. They will be the easiest to scale.
I'm not sure how you plan to architect your project; with that being said if I were you, i'd be looking at Windows Azure and the best practices committee. They are designing scalable cloud AND on premis applications. 
I've been denied twice for my solo / freelance web development business in the BizSpark program. I meet all their listed requirements (I'm a single-person LLC, sole proprietor pass-through), but I send in my application, only to be greeted a couple days later by a "you don't qualify" letter.
JetBrains throws ReSharper on sale every now and then. I grabbed a copy for $50 a month or so ago when they had a sale on it. As for Visual Studio, not really sure what to tell you. Microsoft has a couple programs for some businesses / students, so you might be able to grab a license from their DreamSpark or BizSpark programs. I was denied from BizSpark, so not sure what all comes with it. I got my copy from a past employer with a MSDN subscription.
Service to service? You may want to consider some other options. MSMQ if you are doing a pub/sub setup. (Works cross machine as well) Named Pipe Server if you are doing a FIFO thing and don't want queues. http://msdn.microsoft.com/en-us/library/bb546085.aspx Memory Mapped Files if you are marshalling giant quantites of data. http://msdn.microsoft.com/en-us/library/dd997372%28v=vs.100%29.aspx
I see WebAPI really only making data ActionResults obsolete in MVC. WCF offers so many more features (e.g. Two way binding, net binding, transport/message security, reliable message delivery) that just really don't work well in a Restful environment. 
I'm a bit late to the party, but I'll offer my solution here if any one happens to end up here with the same problem. I was designing a game for a school project just using Forms and I ran into an issue with quickly switching keys and using more than 1 key at a time. I ended up watching for certain keys then sending the event off to be handled by a timer which would handle the repeat while the key was held down, even if another key was pressed simultaneously. There are some obvious flaws, such as the repeat still occurring if the form loses focus while a key is being held down, but I handled this by stopping all key handling and pausing the game if the form lost focus. There may even be a better way to do this now (without XNA) that I'm still not privy to and if there is, I'd welcome the enlightenment, I'm still quite a novice. First, I watch for a key to be pressed down, this example covers the horizontal and vertical axes, and a single "action" button. If the key code matches one of the keys that I've assigned as horizontal (which it determines by comparing against a generic list), it sets a private variable that specifies which is currently being pressed and a private flag that says the key is already being handled to ignore subsequent repeats by Windows. Then a handler (HandleHorizontalKeyRepeat) is called to perform what needs to be performed by the key and a timer is started which also call the handler on its Tick event (for subsequent repeats following the first). private void frmGame_KeyDown(object sender, KeyEventArgs e) { if (IsHorizontalKey(e.KeyCode)) { _CurrentHorizontalKey = e.KeyCode; if (!_HorizontalKeyHandled) { _HorizontalKeyHandled = true; HandleHorizontalKeyRepeat(); } tmrHorizontalRepeatTimer.Start(); } if (IsVerticalKey(e.KeyCode)) { _CurrentVerticalKey = e.KeyCode; if (!_VerticalKeyHandled) { _VerticalKeyHandled = true; HandleVerticalKeyRepeat(); } tmrVerticalRepeatTimer.Start(); } if (IsRotateKey(e.KeyCode)) { _CurrentRotationKey = e.KeyCode; if (!_RotateKeyHandled) { _RotateKeyHandled = true; HandleRotateKeyRepeat(); } tmrRotateRepeatTimer.Start(); } } Upon starting the timers, the interval is changed from a key repeat *delay* to a key repeat *rate*. This allows for the very first repeat to be slightly more delayed than subsequent repeats; mimicking how Windows handles repeats. private void tmrHorizontalRepeatTimer_Tick(object sender, EventArgs e) { tmrHorizontalRepeatTimer.Interval = _KeyRepeatRate; HandleHorizontalKeyRepeat(); } private void tmrVerticalRepeatTimer_Tick(object sender, EventArgs e) { tmrVerticalRepeatTimer.Interval = _KeyRepeatRate; HandleVerticalKeyRepeat(); } private void tmrRotateRepeatTimer_Tick(object sender, EventArgs e) { tmrRotateRepeatTimer.Interval = _KeyRepeatRate; HandleRotateKeyRepeat(); } This shows the handlers performing what the keys do. Each type of "control" key using a separate handler allowed better handling of multiple, simultaneous key presses. private void HandleHorizontalKeyRepeat() { if (_CurrentHorizontalKey == _Settings.MoveLeftKey) { _Game.MoveShape(ShapeDirection.Left); } if (_CurrentHorizontalKey == _Settings.MoveRightKey) { _Game.MoveShape(ShapeDirection.Right); } } private void HandleVerticalKeyRepeat() { if (_CurrentVerticalKey == _Settings.MoveDownKey) { _Game.MoveShape(ShapeDirection.Down); } } private void HandleRotateKeyRepeat() { if (_CurrentRotationKey == _Settings.RotateLeftKey) { _Game.RotateShape(ShapeRotation.Left); } if (_CurrentRotationKey == _Settings.RotateRightKey) { _Game.RotateShape(ShapeRotation.Right); } } And finally, the timers are stopped when the key is released. The key handled is returned to an "unpressed state" and the timer interval is set back to *delay* for the next initial key repeat. private void frmGame_KeyUp(object sender, KeyEventArgs e) { if (IsHorizontalKey(e.KeyCode)) { tmrHorizontalRepeatTimer.Stop(); tmrHorizontalRepeatTimer.Interval = _KeyRepeatDelay; _HorizontalKeyHandled = false; } if (IsVerticalKey(e.KeyCode)) { tmrVerticalRepeatTimer.Stop(); tmrVerticalRepeatTimer.Interval = _KeyRepeatDelay; _VerticalKeyHandled = false; } if (IsRotateKey(e.KeyCode)) { tmrRotateRepeatTimer.Stop(); tmrRotateRepeatTimer.Interval = _KeyRepeatDelay; _RotateKeyHandled = false; } }
and xml and if you tell it to soap rss or any other format you want as long you add/write the formatters 
From what I remember; I couldn't use some extensions I rely on with the express editions - things like GhostDoc, VSCommands, and Git Extensions. I know there are alternatives and ways around this; but they just make life so dang easy!
I use WCF for named pipes IPC at work. Pretty useful for that.
Queues are FIFO. Stacks are LIFO. Great, now I'm a data structure nazi.
That's true.
You have the 4 points of the polygon, just do a normal point inside polygon test, the code here might work for you, just translate to c#. http://stackoverflow.com/questions/217578/point-in-polygon-aka-hit-test
If you are working with these products for your work and are in the US you can deduct the costs of these kinds of things from your income. IMO if you can get the money together get an MSDN pro license and renew it yearly. Also get ReSharper and write the cost of both off as deductions on your taxes. As a skilled professional there are a number of things you can do this with so you can get over your standard deduction (or boost it if you already have a home). It's really about the cheapest way I've found and having access to everything except office and TFS is extremely useful. Depending on your employer you may even be able to get you started your first year but have it under your name so when/if you leave you can just continue the subscription. 
We have a 3 person group and got approved very quickly. Perhaps if you have a normal sales person, graphic designer, etc. that you work with... up the number on your application and it may make the difference?
I'm with you. As far as I'm aware you license VS on a per user basis. If you're not at work using your copy the license isn't in use. So you can use it at home. Then again I'm sure the licensing doesn't work that way because it actually makes sense.
THIS IS GREAT! were you able to do this without noticeable lag? I mean this isn't a gigantic amount of code, but if the user continuously presses keys up and down, will that be too much for the computer to handle? just curious! thanks for your code!
I originally developed this game on a machine with a dedicated graphics card that had 64mb or ram on it and a total system memory of 512mb. The controls were pretty solid and diagonal controls were perfect. The only lag I encountered was the draw area flickering, but I guess that's to be expected drawing a big image to Forms. I double buffered it and used a timer to limit its refresh rate to about 20 frames per second. Edit: I guess the processor speed is important too. The amount of memory I had should be a good indication of how crappy the cpu was, though lol. If I recall, it was a 1.1GHz single core Athlon. Or maybe a 1.3. It's been a while since I had that machine. 
Or TCP. Or named pipes. Or msmq
! Hitler Heil
I had to deal with this a few years back, here is an AMAZING article that can help you with your current issue, and a few you're probably going to run into. http://laserbrainstudios.com/2010/08/the-basics-of-isometric-programming/
ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z, ctrl+z Well I didn't REALLY need to change it.
wouldnt it be easier to use a DbContext class and use entity framework once its configured .net does all the heavy lift and gives you data validation for free and the bonus is you use LINQ to query your objects similarly to a database table 
Take a look here: http://dev.mysql.com/doc/refman/5.0/en/connector-net-programming-stored.html Avoid passing in your SQL from .NET. Use stored procedures and just pass parameters.
Git support has been announced for VS2012.
I've sent an email many months ago, but never heard anything back, and never cared enough to pursue it further.
Interesting. I would have assumed they'd be giving it to solo developers before groups / bigger companies. I'll give that a shot.
Heavens no! I would never do that! I work in a fairly undocumented legacy codebase, in bad need of some basic documentation. Also, I never use the default documentation, its always modified to make sense. Thanks for your concern though! I will take a closer look at my usage if it.
 MySqlConnection cn = new MySqlConnection("conn string"); MySqlCommand cmd = new MySqlCommand("SELECT * FROM whatever WHERE id=?id", cn); MySqlParameter P_ID = new MySqlParameter("?id", MySqlDbType.Int32); P_ID.Value = 42; cmd.Parameters.Add(P_ID); //rest of query processing Using parameters is very simple. You create an instance of whatever type of parameter you need, replacing the value in the query with a question mark followed by a unique parameter name. You can use this for SELECT, INSERT, UPDATE, DELETE, or any other statement. Also, be sure to cn.Close() your connection in a finally block.
The .NET MySql connector couldn't be any simpler. Why add unncecessary complexity to it?
There are tons of reason why not to pass in sql a simple search would have told you that, and many more important reasons than just overhead. Yes there are times when you need to do it, but saying absolutely no reason you should use SP? hardly. 
Why don't you read my post before putting words in my mouth. I never said you should never use SP.
The *Console* class is in the System namespace and is available in any project type as far as I know. You can also change the output of the Console using *Console.SetOut(TextWriter tw)*. Point is, the Console is always there, even if it's not visible. And you can always redirect what's written in the Console to somewhere else.
It's impossible to have unsanitized input in a parameterized query, unless your literal is unsanitary.
We use Aspose where I work, and we're happy with it.
I think you have the right idea. Layer your rates by Location, City, State, Country and the go about finding the most specific rate applicable, in that order: do I have a Location rate? No. Then do I have a City rate? Etc At least this would keep the process going and you could pair it with either email alerts (when locations are not found) or weekly reports showing which rate level was used. Of course, if when looking up the location you also had the value of the rate, you could insert at that very point the Location record (perhaps with an indicator flag) then associate the commission with the new record just as if it existed all along. Again, some sort of alerting or reporting based on either flag or CreatedDate, so that somebody verifies that is the correct rate, would be advisable. HTH
I have done that but I get a try catch message saying...."FATAL error in executing the command."
The simplest way: new Microsoft.VisualBasic.Devices.ComputerInfo().AvailablePhysicalMemory You'll need a reference to Microsoft.VisualBasic.
You can either call into the VB library, or just pinvoke the native method: [StructLayout(LayoutKind.Sequential)] internal struct MEMORYSTATUSEX { internal uint dwLength; internal uint dwMemoryLoad; internal ulong ullTotalPhys; internal ulong ullAvailPhys; internal ulong ullTotalPageFile; internal ulong ullAvailPageFile; internal ulong ullTotalVirtual; internal ulong ullAvailVirtual; internal ulong ullAvailExtendedVirtual; } [return: MarshalAs(UnmanagedType.Bool)] [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)] static extern bool GlobalMemoryStatusEx(ref MEMORYSTATUSEX lpBuffer); public static ulong TotalPhysicalMemory { get { MEMORYSTATUSEX msex = new MEMORYSTATUSEX(); msex.dwLength = (uint)Marshal.SizeOf(msex); GlobalMemoryStatusEx(ref msex); return msex.ullTotalPhys; } } public static ulong AvailablePhysicalMemory { get { MEMORYSTATUSEX msex = new MEMORYSTATUSEX(); msex.dwLength = (uint)Marshal.SizeOf(msex); GlobalMemoryStatusEx(ref msex); return msex.ullAvailPhys; } } 
thanks that worked well.
Hmm researching this I found that wall paper related registry keys are in HKEY_CURRENT_USER\Control Panel\Desktop and HKEY_CURRENT_USER\Control Panel\Personalization\Desktop Slideshow I don't want to change the Wallpaper value in Desktop, as I that's not really pausing, and I think that'd reset the wallpaper rotation. (And I'm not quite sure how the file TranscodedWallpaper works) I'm trying to workout how to change the interval in the Desktop Slideshow field, upon reading it seems you can only change it to the same values as the default ones in the dropdown box. (10sec, 30sec... 1 day) which stops me from settings it to 0 to maybe do a pause effect. I'm trying to set it to one 1 day, but if I set it manually in the registry, it doesn't take effect. I'm thinking it has something to do with the LastTickHigh/Low values but I am unsure. 
Good answer. Sad this isn't in System.Environment... some bureaucratic reason I assume.
Integer division is happening here. Use doubles or floats.
Going with the assumption that drive.TotalSize and drive.TotalFreeSpace are also longs, you're always going to get 0 due to integer division. Cast one of them to double and then the whole line to long to get a better result. Something like: diskPercent = (long)(((drive.TotalSize - drive.TotalFreeSpace) / (double) drive.TotalSize) * 100);
nice that worked. Thanks guys!
Keep in mind that your diskTot and diskUsed have still been artificially rounded due to integer division, so you may want to look into doing what werdasianfaces said and invest in some doubles or floats depending on your needs.
WebClientXml returns void. try this (http://pastie.org/private/re3gpwrgh33ioimer7e3w)
LINQ to XML could make that simpler.
You are trying to iterate nothing. Foreach (and other iteration types) require the collection to implement IEnumerable, or the methods and properties described in its signature. Void does not have that as it is essentially 'nothing'. You need to return something that can be iterated over from your static method.
Hey everyone, Starting on approximately line 26, I keep getting error messages that read "Members defined more than once." This is with regards to my constructors that I am using. I have tried removing duplicate entries, duplicate declarations, etc., but nothing seems to work. I would greatly appreciate your help in solving this issue I'm having. Once I can get these errors resolved, I can get started with my program to test it. Thanks!
It probably doesn't like that you have a private field and public property with the same name "groupId" - add an underscore to the private field's name (a common convention) or just use an automatic property and ditch the private field ...
You have a bunch of private members, like groupID, but then you have public properties for each of these with the same names. Try making your private members something like _groupID and then making sure that your public properties are operating on these private members. If you don't change what your public properties operate on, you'll hit some problems. Like groupID's get calling itself until it hits a stack overflow. Hope this helps.
I think it's better to use: public int GroupID { get; private set; } ps: Underscore in front of member names is a big no-no. This may also be an interesting read: http://msdn.microsoft.com/en-us/library/vstudio/ff926074.aspx edit: A more comprehensive guide to naming standards: http://msdn.microsoft.com/en-us/library/vstudio/ms229002(v=vs.100).aspx
1. You haven't declared unsortedCustomer anywhere. In your first constructor you do declare it, but scoping it like that means you can't use it in any other method/property of your class. Try making it a private member and then changing your first constructor so it sets that member. 2. addDate is never declared or set. Did you mean to use the 'registerDate' field? I think you might have the same problem on line 125 because I don't see startDate declared anywhere either.
**m_** is a carry-over from C++, doesn't really "belong" in C# but nobody can tell you what is wrong. I disagree with a lot of Visual C#'s naming conventions and formatting anyway. 
Are you editing this in an IDE or notepad? I pasted this isn't plain old VS and it told me about everything mentioned in this thread. Pay attention to that error list, the compiler is pretty smart. 
&gt; Do not use underscores, hyphens, or any other nonalphanumeric characters. http://msdn.microsoft.com/en-us/library/vstudio/ms229045(v=vs.100).aspx Plus, it really makes the code look bad. :)
I agree, edit this in an editor of some kind. If not Visual Studio (the express versions are free) then something like SharpDevelop. All the above errors will be caught for you. I know that some schools prefer you to edit in something like notepad - presumably because it will force you learn to spot common formatting and syntax errors - but I think this is counter-productive to actually learning.
Yeah you will lose the West Minister Code Show for sure. Guys its 2013. Put a xm_r in front of any variable. Who cares. If it helps you and your team, and anyone else who has to maintain the code understand and work with the codebase... who cares?
Nice, but if I could give you some pointers. 1. You should refactor the code Program.cs some more so you get smaller methods. Things get more structured and readable that way. I recommend reading Robert. C. Martin's book 'Clean Code' or watch one of his talks. 2. Where are the try_catch statements? I see so many things that can go wrong. For example the lines array. How do you know for sure if there are any lines in the configfile at all? (Ofcourse there are, but check just in case) Check if (lines.length != 0) first before going further.
Putting underscores as the leading character in *private* member names has been part of the C# canon since v1.0 of the framework. "m_" and hungarian notation (str, lng, dt, etc) is definitely deprecated (rightly so, IMO) While the auto-properties that were added in v3.0 are certainly more convenient, sometimes you need to go old-style with a backing member. Some people have a conceptual problem using a public property to initialize a value in a constructor, and sometimes you need to add code to the property body (marking the instance "dirty" or similar). 
Properties need to have different names than the fields they encapsulate: private int groupId; public int GroupId { get { return this.groupId; } set { this.groupId = value; } }
Thank you for your reply. That just says "do not use...", as you quoted. It doesn't say why not. I agree that bad-looking code is hard to maintain, but the definition of "bad-looking" is personal (although I maintain that my style of using braces is the only logical one). I like to have class members identified in member names because it's easier for me to know what needs to be set to maintain the object state. In C++, I will also prefix a variable or member name with "p" if it's a pointer so that I know that I have to use -&gt; notation and that I have to be concerned with who owns the actual memory being pointed to.
.NET is just like Flash. To run your C# program, the user must have .NET installed. Most (all?) Windows users have .NET installed. It's built-in now. 
Thanks so much. I'll definitely take a look into the order of operation stuff.
Looks like you should make a method to handle doing the quadratic equation for you such as int[] Quadratic(a, b, c) { var squarePart = Math.Sqrt(Math.Pow(b, 2) - (4*a*c)); var plus = (-b + squarePart) / (2*a); var minus = (-b - squarePart) / (2*a); return new int[2] { plus, minus }; }
And, by pulling it out into it's own method, it's easier to write a unit test to validate.
Could I replace the int with a double?
I specifically only use underscores for backing fields to properties as a way of indicating "Don't use this, use the property accessors".
Bind the DataGridView to a list and add the items to the list, then refresh the DataGridView.Items collection.
^ this is probably this most important thing you (OP) should take away from all of this. Algorithms like this have minimal effort for maximum gain from writing unit tests.
Maybe try and break it out into smaller formulas that you can debug? Set up some variables and break the equation into logical chunks, then you can see your results, maybe figure out what's going on, and then you can tie it all back together if you want. I would make a new method that you pass in the numbers you're using (looks like rate and nper) and returns a double (or a string if that's what you prefer). AnswerLabel.Text = "Result: " + GetResult(rate, nper); private string GetResult(int rate, int nper) // you know better than I what types these would be { // break up your equation here so you can step through it and be sure it's acting the way you expect return result.ToString("c"); }
So it could be just a paran problem?
It's a good idea to split apart your massive lined formulas like this, maybe even a bit more. You'd be amazed at the bugs that can come from math functions that are too large. Plus, its way easier to step-debug!
&gt; So I'm curious about a few things here. When you want to read input, the syntax is var name = System.Console.ReadLine(); ... Is there a better way to achieve this? The above code looks pretty Python-ish and it's kinda disturbing, especially since C# is a C dialect. Does C# have a scanf equivalent? And other cool tricks you'd like to share? Well, if you have an "using System;" statement at the top of your file, it becomes "var name = Console.ReadLine();", which is shorter. If the "var" part is bothering you, don't worry: *var is not weakly typed*. The "late-bound" type in C# is called *dynamic*, and you shouldn't ever use it unless you're doing interop with scripting languages, or some special corner cases where you really know what you're doing. When you write *var*, the compiler automatically figures out the type of the variable for you. So "var name = Console.ReadLine();" will be compiled as if you'd written "string name = Console.ReadLine();". There are two main uses for *var*. The first, which is the reason *var* exists, is *anonymous objects*. You can create anonymous objects like this: var anon = new { Name = "John Doe", Age = 42 }; Since *anon*'s type is an anonymous class, it doesn't have a name, so you have to use *var* to assign it. This is often used in LINQ statements. The second usage is to reduce verbosity, if the code is still understandable. For instance: Dictionary&lt;string, string&gt; dic = new Dictionary&lt;string, string&gt;(); var dic2 = new Dictionary&lt;string, string&gt;(); The above two declarations are equivalent, but using *var* reduces verbosity and redundancy. IMHO, you shouldn't use *var* unless the codes makes the type of the variable obvious (i.e. it's a constructor), and you shouldn't use it for number literals because the actual type of the variable isn't always explicit. To answer your last sentence...C# uses C's syntax, but it's not really a C dialect. It has its own standard library (the .NET framework), which does not look like C at all, and encourages you to write object-oriented and functional code without ever using unsafe code, also unlike C. The .NET framework prefers long but clear names rather than short and cryptic ones. About your last question: I'm not into Linux, but it should be in every distribution's package repository, along with C# IDEs such as MonoDevelop.
Seriously, what is the purpose of your post? Yes, C# is pretty cool, thats why I became a professional C# Dev. and code it almost daily. One of the things I like most about C# is that (at least to me) it feels "round". It is a perfect fusion of Visual Studio, .Net and the language itself. That only counts if you work on .net, though. And C# is not a C dialect, it is more like its grandson. Reading Input depends on where you want to read it from. The example you postet is correct, although ReadLine() returns a string which you could directly pass into a string variable (var just lets the compiler decide which type to use, buts you will enhance readability if you make that decision on your own in that case) It might look a bit like python, but that makes sense because .Net is strictly object oriented and segmented into namespaces. To enhance readability, you could make the namespace "System" available to the whole file by putting "using System;" on top of it. After doing this you could just write: string input = Console.ReadLine(); There are many other ways to read user input (in fact there are many ways in which the user can provide input!). But is has to be like this in any language. Mono is safe to use for personal projects. I'd be very careful when it comes to business applications where you have contracts, timelines, security issues and so on. Mono's aim is to implement the C# language platform independend so using it should feel not much different from using .Net. Of course it does not have all features.
We also make heavy use of WCF for Client - Server and Server - Server communication. We also will continue to use WCF for a very long time so it guess yes, people still use it and it is very relevant. You also need to consider that a lot of companies have tons of legacy code. You cant refactor millions of LoC each time MS decides to release something new
&gt;If the "var" part is bothering you, don't worry: *var is not weakly typed.* &gt;When you write *var*, the compiler automatically figures out the type of the variable for you. You get my upvote for this. Worth pointing out -- for an analogue -- that if the OP has C++ experience, *var* is essentially C#'s *auto*.
If Op is some sort of Indie Dev and just doesn't have the money NAO, then this is exactly what he needs. It's not like he doesn't want to pay for it, he can't afford at the moment. 
Mono 2.10.x and .NET 4 are 100% compatible code written for .NET4 should build in Mono with no issue. Monodevelop can be used and I think there are also plugins for eclipse. 
Mono is safe to use and production-ready. Since it's C# (albeit open source) you're still going to have long class names, etc. But you also get the substantial power of the .net framework. The tooling around it is also different. You won't call gcc, but mcs to compile. http://www.mono-project.com/CSharp_Compiler 
As powerful as F# is, part of the embolism would come from its ton of weird quirks, such as the ridiculously verbose lambda syntax or the importance of file ordering.
That's not necessarily true.
Console has a number of different ways to read and write output. To read a single character input as a byte you could use: Console.Read(); To read a single character input as a Character object you can use: Console.ReadKey(); You can open a stream object for standard in, out, and error. Console.OpenStandardError(); Console.OpenStandardInput(); Console.OpenStandardOutput(); Once you have a Stream object you can use the fancy stream child objects like FileStream and TextStream, or you can use old fashioned byte arrays to read and write them. 
I guess it depends on what you mean. WPF is not a core .NET lib just a very important one for some devs. EDIT: PCL while cool is not a core language feature yet. In .NET 4 it was an extension, and based on the .NET 4.5 docs while on the path to being formally part of the core platform it does not appear to be yet. My guess would be for .NET 5 as it does seem like a great candidate for inclusion in the core libs. Heck even in 4.5 it's not installed with the rest of .NET (its being treated as a standalone framework): C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable\v4.0\Profile\Profile4\
&gt;C# is a C dialect C# is actually more similar to Java than C. It's compiled into its own bytecode and the syntax is much closer to Java.
Yeah, but there are other factors to consider. Decimals use a little more memory than doubles and if you're displaying the value, how much precision do you really need? In all likelihood, you're going to truncate the decimal places anyway to maybe 2 or 3 places in which case a decimal would be overkill. If the result was going to be used in other calculations though, a decimal would be ideal.
&gt;C# is most similar to java, to the point where you could take a java programmer and put him into visual studio and you could expect him to be able to work almost immediately. Which is both a blessing and a curse; as they are deceivingly similar. However, there are fundamental differences that can bite unaware developers.
You guys are awesome! Thank you so much for all of your suggestions! I really appreciate it!
Yeah, try that with Windows Forms - I'd argue Mono's come farther along in that space than the Windows version of .Net. It's a lot messier than the promise .Net would imply.
Hey all, I'm in a C# class at the moment, and I'm looking for ways to improve my program. It runs correctly, but my instructor gives higher grades to those who incorporate more advanced concepts within their code. As such, I want to stand out from among my classmates. My problem: I am at loss for what other creative ideas I could incorporate into my code. **The instructions:** &gt;Create a class that represents a particular group of customers and the associated account executive. &gt;The class must contain at a minimum the following: an identifier for the group, an account executive of type Employee, a List of Customers belonging to the group, a default constructor, and a constructor that accepts an Employee object to be used as the account executive. **What I've done outside of the stated instructions (so far):** &gt;Make my code output to a file I would greatly appreciate any advice/ideas for how to improve my code as well as any ways I can make it stand out from the competition. In addition, any suggestions for how I can boost my creativity when it comes to coding would be great. Bonus points for those who include relevant tutorials and/or examples. Thank you so much in advance!
I think everyone has stories about that. Heh
C# is Delphi with C-like syntax and a whole ton of polish and new features. A bit tungue in cheek, but it is actually not far from the truth. C# was made by the guy that made Delphi, and as someone who programs Delphi for a living, it is really obvious where a lot of the inspiration comes from. When you feel like Delphi has been taken as far as it is going to go, C# is the next logical step. And yes to answer your question, C# is very cool.
Also look into the [using keyword](http://msdn.microsoft.com/en-us/library/yh598w02.aspx). Also, StreamWriter's constructor has a method to take in a string for the file name you want to use, so you don't need to create a FileStream first. Also if you use StreamWriter.Close() it will close the stream it is connected to even if you pass in a stream for it, so you don't need to close the FileStream.
Knowing this is homework and not knowing how far you are into things, just a couple pointers to research... look at list initializers so you don't need to call unsortedCustomers.Add look at linq for filtering consider how to assign meaning to the calc check number in the if statement (rather than &lt;= 3, consider a constant to identify what 3 is) think about how you might move the file writing operation apart from the grouping option so that you can test each independently. Once you've done this, think about how you might separate creating a file from writing to a stream for the same reason. 
If you don't post the Customer and the CustomerGroup classes, we can't help you much. (what happens in CalcTransaction()?) * Depending on how the transaction number is calculated you could just add a method for the CustomerGroup to add a list of customers at once (avoid the for loop) CustomerGroup.AddCustomers(List(&lt;Customer&gt;) * Check out Guid.NewGuid() for IDs, might be overkill, but hardcoded IDs don't exist in the real world. * The instructions tell you to have 'a constructor that accepts an Employee object to be used as the account executive. ' (which I am guessing is for the CustomerGroup) you should make use of that constructor, instead of assigning the AccountExec after the fact 
Unless it is part of your assignment don't redirect Console.Out. StreamWriter has methods for writing text to files, use them.
My apologies--I should have included those from the beginning. My (updated) Customer Group class--&gt;http://pastebin.com/RzH6E79s My Customer Class--&gt;http://pastebin.com/mng3rxHM 
&gt; noDiscountCg.AccountExecutive.Name = "Robert Rich"; Console.WriteLine("The following customers will be assigned to the account executive named " + noDiscountCg.AccountExecutive.Name); Console.WriteLine("This customer will be placed in group number " + noDiscountCg.GroupID); foreach (Customer Customer in noDiscountCg.CustomerList) { Console.WriteLine(Customer.Name); Console.WriteLine(Customer.TotalTransactions); } This repetitive logic needs to be a separate method. Highlight that, do as instructed above, produce clean code. Parameters to this new method would only have to be the exec name, group id, and the customer list. Try to recognize which parts of your code can be refactored into separate methods. **Repetitive blocks of code with no side affects are the #1 candidate.**
&gt;look at linq for filtering Don't do this or he'll know you got extra help, but you can make each customer list in one LINQ statement each noDiscountCg.CustomerList = unsortedCustomer.Where(cst =&gt; cst.CalcTransaction() &lt;= 3).ToList(); repeat for each other list. Eh on second thought this is kind of inefficient because you end up iterating the list 3 times. Can anyone do better and cleaner?
As a fan of typography, this suggestion makes me happy. Thank you!
I followed the instructions that you and phibred gave me, and I was able to turn that big block into a single, pretty line. Thanks!
You don't need to initialize primitive types to their default values in constructors - the compiler does that for you (no need to set int's to zero). Also, look into using auto-implemented properties. public DateTime AddDate { get { return addDate; } set { addDate = value; } } can turn into public DateTime AddDate {get; set; } Along with that, I'd dump the constructor overload where you set the properties to the values supplied. If there's no logic being applied in the constructor, just let the consumer do that sort of construct-and-assign thing with an object initializer.
My instructor also mentioned something about .Split to split on spaces, and how he looked favorably on that function. I was reading some examples online, and I'm kind of confused: how can I convert how I'm currently outputting to use .split?
Being a bit vague since it is homework but we could have an insert into a bin function: private static void InsertIntoBin(Customer customer, int[] minValueAllowed, List&lt;Customer &gt;[] bins, int numberOfTransactions) { // iterate through each 'max' from the last element in the array // if its value is less than numberOfTransactions insert into the bin with the same index as we are looking at }
List initialization var customers = new List&lt;Customer&gt; { new Customer("bob"), new Customer("sue"), new Customer("billy") }; Now, of course, it's not much different from calling customers.Add(new Customer("billy")) but, it does make it slightly cleaner I think. Also, if you haven't come across var before, it's just a shortcut for saying 'this variable is the type of the thing I'm assigning to it'. So, in this case, var is just short for List&lt;Customer&gt; As far as 'magic numbers' in the if statements.... consider, rather than comparing customer.CalcTransaction() &lt;=3, doing the following: private const int CheapCustomerDiscountThreshold = 3; customer.CalcTransaction() &lt;= CheapCustomerDiscountThreshold One more thing... related to your if block. First, because your if block isn't an if/else (or if/else if), each decision block will be evaluated. This means that someone who has a CalcTransaction() value of 25 will be in both your low and high discount list. 
Learn how to write unit tests and write at least one for each example in the assignment: Even if you don't get points for it its still not a bad idea to do. As you get into more complex projects it will save you a lot of effort when you manage to break something you thought you fixed when creating/fixing something else.
&gt;When you write var, the compiler automatically figures out the type of the variable for you. So "var name = Console.ReadLine();" will be compiled as if you'd written "string name = Console.ReadLine();". Speaking of, is there a shortcut to get visual studio to replace an individual var with the appropriate explicit type name? Edit: looks like VS can't do it out of the box but you can do it with Resharper.
Instead of for your output you could load in all of your customer data from file, using .Split to break each line into the parts of data you want. I'd recomend using the .csv format, in this case you would want to split on commas for each line.
Did you delete your previous submissions about this?
Yeah, a few things I had to edit
Use pastebin or something similar rather than posting a screenshot of the code. Also, learn to crop! Edit: Your implementation of the quadratic equation is also wrong.
On your actual question: * You should use decimal for all of the values for the loan * If the interest rate is entered as "10%", you should strip out the "%" character, and divide the number by 100. * I don't understand what you mean by "Should I be entering a variable..."
"Will build" and "will work" are two separate things, unfortunately. Fortunately it's well documented which parts of Mono haven't actually been implemented yet, such as the SerialPort.DataReceived event - you can subscribe to it, iirc, it just doesn't fire.
awesome, thanks for the tips. as far as try/catch and error statements go, it's in the works..maybe :p
This post was very insightful: thanks! So, if I understand what you're saying correctly, I should change this logic: if (temporary.CalcTransaction() &lt;= 3) { noDiscountCg.CustomerList.Add(temporary); } else if (temporary.CalcTransaction() &gt; 6) { lowDiscountCg.CustomerList.Add(temporary); } else if (temporary.CalcTransaction() &gt; 15) { highDiscountCg.CustomerList.Add(temporary); } to... private const int BaseCustomerDiscountThreshold = 3; customer.CalcTransaction() &lt;= BaseCustomerDiscountThreshold private const int LowCustomerDiscountThreshold = 6; customer.CalcTransaction() &lt;= LowCustomerDiscountThreshold private const int HighCustomerDiscountThreshold = 15; customer.CalcTransaction() &lt;= HighCustomerDiscountThreshold ?
&gt; if the OP has *recent* C++ experience auto is still relatively new. For instance, I don't think they're using C++11 in classrooms yet.
And if you do it in resharper it will warn you that you should be using var in the first place.
I've heard of Delphi, but never used it. Could you point out some of the influences?
Very good post but I have to take issue with: "you shouldn't use it for number literals because the actual type of the variable isn't always explicit" Number literals are explicit, if you know what you're doing. 1 is an int 1U is an unsigned int 1L is a long 1UL is an unsigned long 1F is a float 1.0 is a double 1M is a decimal
I made a full-fledged Java-like Scanner class, but it's on my work computer and it appears that I neglected to put it on Github. Note that VS 2012 was used.
Like: fun x y z -&gt; x+y+z instead of the C#: x =&gt; y =&gt; z =&gt; x+y+z or did you mean: function None -&gt; 0 | Some x -&gt; x Instead of...oh no, you cannot even do pattern matching in C# and you don't have algebraic datatypes anyway. So you meant the "ridiculously verbose" first example that's actually shorter then? 
To be honest..No. I re-read my posts before posting. I still think the thread is irrelevant due to the lack of a real question. * Was he asking how to proper read user input? * Ask why Python and C# look alike? * Ask if mono can be used to develop (what?) ? * Inform /r/csharp that C# is a pretty cool language? The first 3 could be answered faster and in greater detail by google than by reddit and the last one is pretty obvious to any reader of this sub. I still answered, though, because I could respond to everything he wrote and because I was bored between meetings. Whats your excuse? 
&gt; don't worry: *var is not weakly typed.* I think you may mean dynamically typed. static/dynamic typing refers to whether typing information is associated with variables or values while strong/weak typing refers to how permissive implicit type conversions are within the language (e.g. automatically interpreting a string as a number). [Source](http://en.wikipedia.org/wiki/Static_type#Static_typing) and [Source](http://en.wikipedia.org/wiki/Weak_typing).
https://github.com/languages/C%23
As far as I understand it, Github is the go-to open source project place. Boot up a few tutorials on how to push and pull junk from github, they have tutorials there i'm sure.
but isn't Java's IO more verbose than C#?
A little 
Find a project or framework you will likely use in future work. Open the bug tracker and start working on bug or feature requests. That way you learn the code and contribute.
Hold up, let me make sure I have the hang of this...are you saying something like the following: private const int BaseCustomerDiscountThreshold = 3; private const int LowCustomerDiscountThreshold = 6; private const int HighCustomerDiscountThreshold = 15; if customer.CalcTransaction() &lt;= BaseCustomerDiscountThreshold { noDiscountCg.CustomerList.Add(temporary); } else if customer.CalcTransaction() &gt; LowCustomerDiscountThreshold { lowDiscountCg.CustomerList.Add(temporary); } else if customer.CalcTranscation() &gt; HighCustomerDiscountThreshold { highDiscountCg.CustomerList.Add(temporary); } ?
I am starting to look for help on an [API](https://kerbaldata.codeplex.com/) I am making. It is a serialization and data management framework for a game. The project is under the MIT license. The idea being that data management work (the core wireup of the basics) often requires some grunt work with regards to serialization, object conversion, wire up to UI etc. Building this for a game and using best practices creates a lot of opportunity for re-use in day-to-day work. The license makes it possible to copy code wholesale and re-use it without worry. Check it out and contact me if you are interested. 
yep!
That is what I had in mind... inefficient, yes, but not a bad concept to learn. Here's my two minute attempt at 'not cleaner' (also not really tied to OPs problem but I digress): https://gist.github.com/hyrmn/4950442
ServiceStack! ServiceStack all the things!
I wouldn't go that far, just the main serialization on a custom dataformat with some pre-written models to make it easier on devs and the usual injection configurable patterns to throw in new serializers as the format changes (game is still in Alpha). There will be a .Comms layer but it will mainly be a light wrapper to quickly configure WCF for common usage in that game's context. This kind of stuff does not make for good generic use as it's often context, data or implementation specific however you end up using many of the same patterns over and over. This kind of project lets me set those patterns up in a real working scenario and then freely rip off the code for other projects and re-rig the types, names and minor details. It also makes for a nice addition to the portfolio. I picked this kind of project due to the relevance of the code when having to do any kind of data piping work. 
It's little things all over the place that you wouldn't normally notice. Here are a couple of examples: Intuitive object variables: MyObject: TObject; // Delphi Object MyObject; // C# In C++ you need to specify a pointer to a class, which is unnecessarily verbose. Also all objects inherit from TObject/Object (Delphi/C#) and has similar base methods. Another example is how you can use indexers to access collections or properties representing collections. This is something that is completely standard in Delphi (and is used all the time). It is used to a lesser degree in C#, but if you are migrating from Delphi it helps to make you feel at home.
I've got a pretty long list of issues with associated milestones here: https://github.com/jbatte47/code-patterns/wiki A lot of it is documentation and testing, but I have a backlog of components from a previous version of this library that need to be brought in using the BDD workflow, and at the rate I'm going it could literally take me a year or more (there are hundreds of components in the list). All told, the assemblies coming out of this repo account for over a thousand downloads on nuget. That's almost nothing, except I haven't been downloading copies left and right, so it *does* have a user base. I'd love the help!
Ha! I was taking a crap and didn't need to wipe yet. I thought it was cool that you answered, but why the attitude at the beginning... so I decided to put some sarcasm into it. I don't understand why picking on someone that is new.. and excited about something... is a way to encourage them. He had a weird title, ended with a question mark. I'm not sure about everyone and their ability to properly form thoughts. I know when I am trying to ask something I can get a little nervous and mess things up. I don't think the thread is irrelevant. There is all sorts of discussion in it. The OP learned some new things. I learned a little about Delphi and Mono (increasing my curiosity, and getting me to do some additional reading away from reddit). 
I'm not familiar with action delegates and currying, your code is very nice to look at, and it's given me some things to research. Thanks!
&gt; Java 8 has a shorter lambda syntax You're restricting consideration to lambdas with no currying and no pattern matching which is not representative of F# code. For example, I just searched the 4kLOC commercial F# code base I'm writing right now and found one single instance of a `fun x -&gt;` for some identifier `x` in the entire code base. Focusing on three chars in an entire code base when everything else would have been 10x more verbose in Java or C# is ridiculous. Java and C# do have some real advantages over F# but brevity is certainly not among them. 
Have you tried F# for any serious work?
**Edit** I'm scratching outputting to a CSV file, and instead I want to output a pop up window displaying a message that reads "Program complete." I've been looking at some code online, and here's what I have so far. CustomerGroup noDiscountCg = new CustomerGroup(); CustomerGroup lowDiscountCg = new CustomerGroup(); CustomerGroup highDiscountCg = new CustomerGroup(); Results result; //Rest of program as from before Results message = new Results(); MessageBox.Show("Done"); Form1 Results = new Form1(); Results.ShowDialog(); Results.Dispose(); //Initialize Results.cs //.ShowDialog I'm probably completely wrong, as I'm trying this on my own. Could someone please give me some direction on this? I'd really appreciate it.
It can be a bit of a mental twist at first... but it's well worth your time to dive into actions, funcs and predicates. Exposure from a purely functional language first might help (or it might hurt!) I do like to use dictionaries with actions quite a bit to reduce branching logic. The above isn't a great example, but I guess it illustrates it well enough ;)
Not serious, no. I was just pointing out that F# has a lot of weird quirks - they don't make the language bad, but it definitely feels much more "experimental" than, say, C# or Java. The importance of file and statement ordering is another example (e.g. having to use the pipe operator to make type inference work on lambdas)
It just feels weird that in a language who screams "brevity" almost everywhere you look, the lambda syntax is clunky. Thankfully, the #light directive is no longer needed...
http://www.codetriage.com/ seems cool, I've been hoping to find some projects to contribute to this weekend. C# looked a bit thin on the ground tbh. Thought I'd let you know about it though :D
What kind of projects are you looking to help with? 
Looks like a good case for Regex.Replace
Or a char array. Regexes are a bit much for a simple replace.
And so, so much easier to read: filename = Regex.Replace(filename, "[ &amp;'+=\[\]#%\\/:*?\"&lt;&gt;|]", "-");
I feel much better about it. It caused me to limit the amount of time I spent wondering what other people were talking about today.
[Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.](https://groups.google.com/forum/?hl=en&amp;fromgroups=#!msg/alt.religion.emacs/DR057Srw5-c/Co-2L2BKn7UJ)
By "fun" you mean "a good way to see who not to promote to Programmer II," right?
what are some good C# tutorials? there is nothing on the sidebar and on learnprogramming. 
I enjoying developing and learning new things that stretch myself. If I find something that I can contribute to that I feel will be in demand or develop skills that will help on the job that would be ideal. I haven't had the time to read all the comments here but someone mentioned API and webservices as I skim through the feedback. So, I am open.
I've got something cooking. If you want to write some demos, that would be a great big help. https://github.com/longjoel/Sunfish
Not much a contribution comment but... A Radiohead fan?! alright!!! I wish there was a 'Programming Radiohead' subreddit... lol 
Delphi was one of the first mainstream languages to have properties classname = class property Name: Integer read ReadFunc write WriteFunc end C# makes use of Pascal naming conventions 
F# 1.0 was released in 2005. That's 7 years ago. And yet it already contains obsolete features (e.g. the -&gt; and -&gt;&gt; keywords in non-trivial sequence expressions), an entirely obsolete syntax (#light off) and a lot of reserved keywords, some of which are for OCaml compatibility. If F# was a strict superset of OCaml, I could understand why there is an entire area of the language dedicated to ML compat, but it isn't. Jon Harrop [said](http://stackoverflow.com/a/4239473) that there are so many changes it's virtually impossible to compile OCaml as F#. Maybe it was useful when the language was in its early stages, but it should've been removed before the language was released. Inline IL is another example of a deprecated construct (except in the compiler and standard library). Another example of experimental-ness is the lack of proper tooling. VS's F# editor doesn't recognize anything but keywords and literals. You can't collapse code. You can't even automatically refactor your code, let alone rename a variable. VS can't tell you the types returned by generic methods either, which means piping is much less useful than it should be (also, debugging piped statements is a nightmare). There is no built-in F# template for unit tests. Microsoft insists it's all about WinRT nowadays, but F# can't be used there either. There's also all the attribute noise you have to add for simple stuff, like having a main method, generating .NET-compatible events (in a .NET language!) or what should be language features (e.g. sealed). F# is powerful, probably more than C#. But it doesn't feel half as polished as C#, and it's not as developer-friendly either.
Line 17 and 19, among other things... Also, you probably want to make those properties uppercase. That is the common convention and it helps to distinguish private members from public members (especially private member fields from public member properties). You can also use an underscore before the private member. Also, depending on what you need to accomplish, you probably don't need most of those private members. If you have a property with the same name, chances are that property can do what you need to do without a private member.
You might want to look at the licensing your company has. For example, do they provide you with a laptop? If so, then you can probably put Visual Studio on that. Or if you own your own, you can probably put Visual Studio on that.
Only because the complete code wasn't provided...
You don't want to do this from a console application, GUI programming/getting a window from a Console will take some effort and understanding of Windows programming and how to setup things with with Message Pumps. Writing it out to a file is much easier.
Ok, some things I do concede you are right in some points. I did convert an expression evaluator, initially done in Camllight, to F# and there were quite a few changes I had to do, namely floating point operations and I/O library. I only have VS 2010 at hand, isn't 2012 supposed to have better F# support on the editor? &gt; Microsoft insists it's all about WinRT nowadays, but F# can't be used there either. You can use WinRT with F#, at least on the desktop version of Windows 8. All .NET languages can call into WinRT. As for the overall support, this was already communicated by the F# team. Microsoft does not believe a language like F# is appealing in the mainstream as general purpose language, that is why F# tooling is more focused in big data (type providers) and Web UIs (like in Visual Studio Web Express). This was discussed in the *Skills that matters* F# sessions. So they rather leave it in the hands of the community to provide support for other areas. I don't like it either, but to be honest F# has more possibilities to be part of the enterprise than OCaml has, at least in Microsoft shops.
&gt; I only have VS 2010 at hand, isn't 2012 supposed to have better F# support on the editor? I don't remember the 2010 F# editor, but the 2012...isn't great. Intellisense is the only part that works well. Syntax highlighting is almost non-existent; only keywords and literals are highlighted. Refactorings simply do not exist. You can't collapse expressions, although there is an extension to fix that. The default F# templates are F# app, F# library, F# PCL, F# Silverlight library...and that's it. There's a MSTest template available online, though. &gt; You can use WinRT with F#, at least on the desktop version of Windows 8. All .NET languages can call into WinRT. I tried; you can't. The best you can do is have a F# PCL containing models and viewmodels, and use C# for the views. F# cannot reference WinRT components because the compiler doesn't understand or produce .winmd metadata. (see the comment in [this SO answer](http://stackoverflow.com/a/7454392)).
I've been doing json services here for the last year or so after being a long time asp.net web/forms and aspnet ajax developer. What I've found to be a lot of help is 1. jquery (simplifies making the client ajax calls) 2. WCF services. This makes things quite easy, using attributes like such: [WebInvoke(Method = "POST", ResponseFormat = WebMessageFormat.Json, RequestFormat=WebMessageFormat.Json)] Finally, for purposes of debugging/analysis I really enjoy FireBug add in for Firefox. Tons of great features for debugging and monitoring your json calls in the browser. TL;DR: Use WCF services for the server and Jquery for the client.
Whatever else you're doing, don't build a JSON string manually - any quotes or special chars will break it. Even tabs or CRLF. Instead use JavaScriptSerializer in System.Web.Extensions.dll var ser = new System.Web.Script.Serialization.JavaScriptSerializer(); string s = ser.Serialize(some_scalar_object_or_enumerable); Then later you can deserialize back into the original type with ser.Deserialize&lt;T&gt;(string);
Check out glassdoor.com and see if you can get a sense for your area.
Oddly enough, there's not much on there.
I looked for Oklahoma and you're right. Looking nationally (http://www.glassdoor.com/Salaries/us-junior-programmer-salary-SRCH_IL.0,2_IN1_KO3,20.htm), it looks like around $40k would be right in line (just scanning bands briefly)
This ([Bureau of Labor Statistics - Oklahoma](http://www.bls.gov/oes/current/oes_ok.htm#15-0000) ) _may_ help with determining salary range for your state. It's a bit dense and if you filter text by '15-' it'll show you the salary's for computer related jobs in your state. It gives a median, mean, and annual mean, so you can estimate a little by that. Some states labor bureau's have salary statistics, the state I live in, New Mexico has one. I didn't find one for your state, though. Granted, these surveys show salary for the field, and not for .NET in general. Personally, I would try and negotiate something higher regardless, unless the contract strictly says non-negotiable. A few minutes of haggling may net you a few extra bucks in the end. Best of luck.
My employer's entry-level pay is $20/hour or about $40K/year. The area I currently live in has a pretty low cost of living, at least for California. The higher the cost of living, the more you should try to get. For example, according to [this](http://money.cnn.com/calculator/pf/cost-of-living/), in LA I would want to make ~ $54k to have the equivalent standard of living.
Don't settle for less than 40.
I see, Oklahoma isn't really all that expensive to live in. A decent apartment cost $700/month, so I see 40k'ish to be fair. Thanks for the feedback!
Thanks for the reply! I will haggle a bit if necessary, I don't want to be too stingy with having no experience.
I would be blown away for that to be my starting salary, however I doubt that will happen :-D. I will definitely update this post after Monday, so maybe future Jr Devs around my area will know what to expect! 
Up here in KC (Missouri side) the cost of living is pretty low and I would say 40k is about right. A word of advice - don't get stuck in an "academic" rut where if you can't apply exactly what you're learning then all is lost. Sometimes what helps the business most is something quick and dirty(ish) - whatever to get the job done while keeping your dignity. Balance is key! Also try to allocate time to refactor as you go, if at all possible. Also, sponge up as much as possible from any more experience folks as you can. Voice your opinion but definitely admit any wrongs. Also - network network network (aka be social). Also, the qualifications for entry/mid/senior pretty much changes by company so don't get too hung up on titles whenever the time comes for promotions or pay raises. I know some seriously derpy senior devs and some badass entry and mid level folks.
Where abouts the southwest?
Thanks for the advice, I will definitely put it to use! The job was actually wanting someone with 2+ years experience, I guess after I showed them a few of my side projects they decided to interview me. It was a pretty long 2hr interview, but in the end I guess they liked me!
Ok, thanks for the information. I had the VS 2012 installed on my Windows 8 evaluation VM, but only used C++ with it, and now that image is gone. Should have tried F# as well. Yeah, I think Microsoft still has some issues how they could monetize F#. Hence the recent focus in type providers and Azure support for big data. Still I commend their efforts, because it is still way better of any tooling you can get for OCaml on Windows. I already managed to have some fellow developers having a look to ML languages with the excuse "Microsoft is also doing it".
 Plus one for for wcf. God bless a powerful config model.
I learned OOP exclusively on java, then jumped into a job writing C# without much of a hitch, they have so much in common.
Payscale.com?
how did it go?
Mine too. Was yours a CS only school?
While that's true, I think I need to get some experience before most companies would even look at me?
Wolfram Alpha does relocation calculations. So if you know a good salary in one area, you'll have an idea of what the equivalent would be in a different part of the country. Example: $42,500 in St. Louis would be $79k in San Francisco. Much of that being driven by housing prices (about 4x in SF) http://www.wolframalpha.com/input/?i=moving+from+St+Louis+to+San+Francisco+salary+%2442%2C500&amp;lk=3 
Really depends on the cost of living for your area. Oklahoma probably has roughly the same cost of living as where I live, so 45-50k isn't unheard of for an entry-level position.
40 should be your absolute baseline. Obviously aim higher if you can, and companies can offer other great non-monetary benefits to offset a lower salary, but anyone that pays you less than 40 is not worth your time
It turned out to not be a parenthesis problem. Rather I was missing a line or two of some simple code. 
If you are working for a company that "prefers" a CS degree rather than require expect lower pay. When interviewing ask your team members what education they have. You'll likely find most don't have a CS degree. 40-50 is probably reasonable in this role as it is more of a "coder" type of role. In Seattle a CS degree with a good GPA will net you 65-70 no matter the technology. Most of your team members will have CS degrees too. This will be more of an "engineer" role. Microsoft and Amazon hires most of these people here.
Be prepared. Back when I first got hired by a large software company I had a target 'high' that I was aiming for. When I walked in, they offered me 2k above that. Had I haggled, I could have gotten even higher, but I was so shocked by the number that I just said 'uh, ok' and walked out. hahahahaha
Really? I wonder why? What is going on in Oklahoma?
I think you mean "bottom line", not "baseline."
Ya some quality side projects always help. Awesome!
That's kind of nifty, Wolfram Alpha never ceases to amaze me.
I have no clue! Looking at job postings and talking to people .NET is wildly more popular than anything else, I have no idea why though.
Cost of Living in your area will pretty much determine what you make. I live in the Boston area (HUGE demand for developers and high cost of living) and entry level is about $65k here.
Just a thought, would it be better to store the username and API key in a "setting" instead of writing it to a file? **Edit - I took the source and made it a little more robust, and added in a little error handling(hardly any) you can take a look [here](https://github.com/TannerMiddleton/SoundSync) if anyone wants.**
Wow. I am painfully underpaid.
MonoDevelop has just recently gotten a good refactoring framework backend, now it's just a matter of adding user-visible features to take advantage of that. With the upcoming 4.0 release, there's a really cool Code Analysis engine that you can enable (disabled by default, unfortunately). It's still not as powerful as ReSharper and likely won't be for quite a while, but it's open source and patches are always welcome :-)
Here are a couple projects that may be worth looking into: https://github.com/Code52/DownmarkerWPF/issues https://github.com/cwensley/JabbR.Eto https://github.com/Haacked/SeeGit https://mishrareader.codeplex.com/ https://familyshow.codeplex.com/ The best way to get started IMO is to go through the issues/tasks list and see if there are any issues you can address. 
The refactoring time allocation is very important. I started as a junior developer in a company with very short development timelines and new projects coming in constantly. I've only launched a few projects, but all of them I feel could use some refactoring and possibly performance improvements. All my most recent time estimates take into account refactoring. It works better for everyone involved and I feel better about putting that code in production. 
Why in the world would you teach VB.net? Anyone who is good with c# could pick up VB.net in weeks if absolutely needed. 
http://stackoverflow.com/questions/55828/best-practices-to-parse-xml-files
.NET has several ways you could go about doing this, depending on how precisely you want to define your parsed objects beforehand and how much of the parsing algorithm you want to implement yourself. The most conceptually simple way I can think of works like this: In System.Xml.Linq there is the XElement class, which represents a single element in XML. Calling XElement.Load on a Stream containing your XML will transform the entire stream into a tree of XElements, each with information like the element name, attribute values, and text content. All the handling of the XML structure and hierarchy is done for you. From there, you can start to define different classes that represent different entities in the XGL file, with the appropriate properties and containers for children, and then implement a tree walk over the XElements that transforms each one into its equivalent data type. However, you can also just leave the XElements as they are and refer to them when you need to use information from the file.
What you could do is use panels. For the first panel, put what you want in there and then once the picture is clicked, set the visibility to false, and show the other panel If you have Skype or something.. Message me and I'll let you know what I mean
&gt;I want to use the same form to display the models from each company, so I am looking for a way to bring a groupbox from one form to my original form. I'm having a bit of trouble following that sentence but I think I get what you're trying to achieve. I would probably use a flow panel myself - Load it up programmatically with your picture boxes on a 4x4 grid, when the user clicks a manufacture you dispose and clear those pictures then programmatically load the set of pictures for models. Finally after they select a model you hide the flow panel and display whatever options that model has available to it. Finally have the user "Submit", upon submission display the financing options. EDIT: I'm advocating flow panels over a regular panel in this situation because there are going to be many manufactures with many models. Flow panels will let you load unlimited of each without having to recreate your form anytime something changes (new model comes out etc).
[PDF File Analyzer with CSharp Parsing Classes](http://www.codeproject.com/Articles/450254/PDF-File-Analyzer-With-Csharp-Parsing-Classes)
My knowledge of XML predates the invention of LINQ. So the method recommended by mostlysafe is more modern than what you will see in my comment. I use two methods to read and write XML documents. XmlDocument and XmlReader. The difference between the two is that XmlDocument is a DOM (Document Object Model). It loads the entire XML file into memory, and then you can loop over it, go backwards, jump around, etc. The drawback with this method is it can only load XML documents up to 2GB in size due to the limitation of 32 bit applications only being able to address 2GB of memory. If your XML document is over 2GB (don't laugh, XML is notoriously verbose) you will need to use XmlReader. XmlReader reads the XML as a stream. You can only read forward, you can't go backwards, or otherwise jump around. You can find plenty of examples of both methods by googling for "C# XmlDocument" or "C# XmlReader" 
Scott writes why not to do vb.net in coding horror. you should not do vb.net because nobody else is doing it. it is that simple. :)
I'm glad others understand what you're trying to do. I don't. It seems to me that you have a form that contains a groupbox, and you want to use the exact same groupbox on a different form. I don't understand the point of this. The information you want to display should be in a database, or some other kind of storage. When your user clicks on a company logo, the groupbox should be cleared out and then repopulated with information from the database. In my years of programming, I've found that any time I try to use a display element to hold information, I get burned. In my experience, data should be stored separately, and written into the display elements (and back into the data store) only when needed. Good luck!
It seems to me he has a bunch of pictures of car manufactures, user clicks on the picture they want, he then displays a bunch of pictures of models that company makes, user clicks the model they want. He then displays a bunch of options the user can select regarding the car, takes all this information and spits out financial options. I think he's calling these different views "forms", but their not forms in the technical sense of the word.
What I'm trying to do here: Software is kind of similar to a CRM. I want to be able to have the users check their email they are about to send out to a prospect, and check their spam level. Similar to this: http://spamcheck.postmarkapp.com/ But using the api: http://spamcheck.postmarkapp.com/filter I would then like to return the values so the user can see their spam score. I'm limited to .net 2.0 at the moment, but am campaigning for them to turn it up. 
my bad, I meant southwest US area, Nevada/Cali.
Thank you... I believe these guys need to up our .net so I can do this!
Really it's not a matter of using javascript or jquery but rather executing an HTTP post/request asynchronously. In web browsers this is done using javascript and the built in XMLHttpRequest API. Jquery simply provides a facade to make the process easier. AJAX is an acronym for Asynchronous JavaScript and XML. I believe the original intent was targeting SOAP based services which are XML based (or even straight up XML data). With new formats such as JSON, the acronym isn't as meaningful, but the end result is the same. That is not to say that you cannot do synchronous calls to a web service without using the JavaScript capabilities. If you create an HTML form and set the target to the service endpoint you could simply post the form and get back a response. With that not being asynchronous however, nothing else could happen (the browser will block until the response is received) as well the previous page will be replaced with the response of the service so it would not be useful in the majority of browser scenarios.
When loading the pictures of the models, how do I get it so that no matter what manufacturer the user chooses it loads the appropriate pictures? Do I have to have them stacked on each other and make them visible depending on which manufacturer was selected? Again, this is only my second semester of programming, so I'm not very knowledgeable of these things...
It's all good! Questions mean you're learning! What follows is how i'd do it, I know it would work, but it might not be the most optimized/efficient. someone else may have better input - I'm only a couple months into C#. With that said you'll want to wire up the photos to a method so that each one loads it's own set of model pictures. Basically when you load the initial set of images, each picturebox should get a handler for its click event that runs a method. Inside that method there would be a Select/Case statement that checks a value to determine what image was clicked. This value could be anything - you can check the Image name from the picturebox, maybe tag the image, or just go off whatever it's number in the flowpanels array is. Personally i'd use the image name (Name your images audi.jpg, ford.jpg and so on). Let's assume the user clicks Audi, your method should determine that audi.jpg was clicked and then call its own method like DisplayAudiModels() that will then put all the audi models on the grid. If it's ford.jpg , run DisplayFordModels() etc. etc. DisplayAudiModels() should for-each loop through the flowpanels's contents disposing of each image individually to get it out of memory and off the display (If you just do Flowpanel.Clear() the pictureboxes will be stuck in memory!) then add every audi model you need to the picturebox. At this point the same rule of keeping track of which model is being clicked is going to apply so that your program knows what set of options to show the user. This project is going to take some time to nail it down right, but after you get the first Manufacturer/Model set working, the rest should be easy-peasy.
I did too; New Mexico here. :)
Just be well informed and realistic in what you want and can get. 
Is the Grid table the model in this case?
Which is a great example of why I prefer MVVM. 1) The simple, linear relationship between each elements Model &lt;---&gt; View Model &lt;---&gt; View Compared to the horrible circle of MVC. This makes TDD so much easier. 2) The uglyness of the interactions between what is a view concern, and what is glue code. This is inherent in WinForms and when people with a WinForms mindset (Such as PRISM) try to do WPF. For more on MVVM, this blog was a high hit on google: http://rachel53461.wordpress.com/2011/05/08/simplemvvmexample/
Want some real-time compression in your app? Feel free to use this decorating stream implementing LZ4 compression algorithm of mine (using the C# port of LZ4 algorithm by Clayton Stangeland, https://github.com/stangelandcl/LZ4Sharp). Visible attribution appreciated. My first published OSS content. See if you can find any bugs. I tested this on my 2010 MacBook Pro using Mono 2.10 on OSX 10.8.2, and got 203 MB/s compression speed (using the class default write threshold ["block size"] of 64KB) on a randomly selected dmg file 36MB in size. More testing needed. Decompression should be faster, but ultimately limited by C# memcpy.
Thanks for the reply. I've been playing with XmlReader and I can read and make sense of the structure, but Im having trouble coming up with a way to make sense of the hierarchy and the relationships between my classes. Whole different story I'll have to work on. Thanks!
Bookmarked, nice example.
Also, WPF superseded WinForms and (ideally) all new applications should be using WPF. Especially since this is Microsoft.
I got the okay to make a test environment where I can move us up from .net 2.0 to 3.5 and see how our software runs. From there I can check this out. Thank you.
This is weird and may actually be causing me some unnecessary memory use because of the way I've been doing WPF field validation. I should do some profiling. I do hope this will be addressed by the compiler. I can't see any reason you would ever want it to behave this way (I'm sure Eric Lippert will be making me look dumb for saying that before too long).
Switch statements will be your friend. Have bool flags and set them to true and false based on the parsing requirements, then use if and switches to populate the data into a structure. There is no quick solution (that I'm aware of). I recommend taking a step back from the code. Close Visual Studio, grab a pencil and a paper pad and just start drawing out the parsing logic on paper. Don't be afraid to iterate over the document several times. If the logic is too complicated to do on a single pass, do 2 passes. Hell do 10 passes, bulding your structures one layer at a time. XmlReader is stupid fast, you won't notice a performance hit. We parse 10GB XML files in a few milliseconds. Edit: You can also help reduce parsing complexity by using something known as [XPaths](http://www.codeproject.com/Articles/9494/Manipulate-XML-data-with-XPath-and-XmlDocument-C). XPaths let you pluck information out of an XML document without iterating over it. You just specify the conditions and it pulls out just the values that match your search.
Some men just want to watch the world burn.
I love that I got downvoted. I wonder if the sarcasm wasn't obvious enough, or if this is something you just don't joke about.
Central Rhode Island (one of the worst states in the US), I was hired at a measly $36k/yr. I was hoping for $45, expected $40... It's a comfortable place and I like my boss a ton, so I took it. Don't need health insurance so they bumped me up to $41k and we're SUPPOSED to be getting raises soon, hopefully I'll be at 45 then...
might also just be legacy optimization for the old way delegates were handled and invoked and really makes no difference from an execution standpoint. 
Interestingly enough, ReSharper "optimizes" to the shorter version (stolen from the comments on that article) Eric Lippert is right.. The only way to know for sure on speed optimization is to MEASURE IT.
You pretty much hit the nail on the head, I start at 40k. A friend just got his job also(with no experience) and is starting at around 50k.
[Updated API](https://kerbaldata.codeplex.com/releases/view/101890) [Also new diagram](http://forum.kerbalspaceprogram.com/showthread.php/37728-0-18-x-KerbalData-API-Helping-Developers-build-KSP-Apps-0-3-2-Dev-Update-2-20?p=489279#post489279)
Last time I checked, it isn't marked as a **warning** in ReSharper; it's a **hint** - ie. the "lowest" possible priority. Unless you changed it to be a warning, of course.
&gt;anonymous objects... how about anonymous methods as event handlers: Lambdas have cleaner syntax: someObject.someEvent += (sender, eventArgs) =&gt; { // Event handling code }; or, if the event handler is a single expression: someObject.someEvent += (sender, eventArgs) =&gt; handleEvent();
Great things I can see: * iOS Dev in Windows * New licensing options * Free for apps under a certain size seems great to get the feel of the framework * Indie License has gone down I think? * Rewritten MonoDevelop as Xamarin Studio I'm pretty excited. I was about to purchase MonoTouch and I'm glad I procrastinated! Now if only the download link would work and I could start playing with it!
1) Create GUI program with Textbox and button and labels for you to fill with the answer, 2) On the button's onClick() take the textbox.text, parse to int, multiply by 5 for the total eggs, then modulo 12 to get the # of dozens. set as the text property of your labels. We'll help with specifics if you actually have issues doing that. If you can't do that... maybe you should have paid attention in class.
Pay me 25 bucks and I'll do the assignment for you. 
WPF or WinForms?
You will need to set the DrawMode to OwnerDrawFixed and then override OnDrawItem. 
You won't be able to do it in c# directly. The ListBox control itself will output relatively simple html to a browser when a page is rendered. However, you can use jQuery to add these icons after the ListBox is rendered on the user's browser. It won't be easy and if these icons act as hyperlinks, it gets even more interesting. My recommendation is to use a jQuery plug-in so that you won't have to write the jQuery code yourself. A quick Google search pointed me this one that looks quite functional and simple to implement: [ddSlick](http://designwithpc.com/Plugins/ddSlick) Someone else here may have some better ideas for a jQuery plug-in... 
Drawfilter, or - easier, use a third party control. There will be a free one out there, try Microsofts site as well as Google. Failing that companies like infragistics have many customised / extended controls. Making your own controls you can use again and again in multiple projects is a great thing to learn though.
What you need is to create something called a Owner Drawn listbox. Here are couple of examples - http://www.c-sharpcorner.com/UploadFile/vasu/OwnerDrawListBoxWithIcons11212005071009AM/OwnerDrawListBoxWithIcons.aspx http://www.java2s.com/Code/CSharp/GUI-Windows-Form/ListBoxfontandimage.htm Also, do you want the Edit and Delete icons to be click-able? If so, then you're better off using a WinForm DataGrid control and add a command column that supports buttons. 
Putting them outside the list-box is probably the easiest solution. Just grab the selected Index and then fire the appropriate button click event based on the value of the selected index value. Glad you have it figured out. 
Sorry. I work a lot lately in the ASP.Net world, so I automatically thought you were talking about that. Silly me. Zingbat's answer should suit you and sorry for the confusion.
Try [DataGridView (Link with something im working on)](http://puu.sh/25Ppb) .. It's not too hard. I just recently started trying to use it and I know you can put images in cells
I know someone with a security CS background who netted nearly 100k out of college at Amazon. He also works well over 70 hours a week regularly and is not allowed to take vacation Nov &amp; Dec. I'm happy with my coder type of job and working ~45 hours a week.
I'm still not sure what differentiation you are making between scanf and ReadLine. What is so different about them that you prefer the one over the other? You don't have to read it right away. I like to put variables at the top too. You can say string line = null; // As much code as you want.... line = Console.ReadLine();
Use a ListView
I'm not sure if I'm missing something, but I think this is the way to go. 1. Package all your values from user input into an object on client-side 2. POST that object to some API controller you've created on server-side and show some loading indicator in client-side view 3. The API controller should receive the POST params and make the request to spamcheck filter, for which it will recieve your spam scores as a response. 4. When you receive the response from spamcheck, pass that response back as the response to the client-side request 5. Client-side app will have a callback (set up by you) to accept this response, and update the client-side view All that said, I'm not a C#/.net developer so this could be incorrect, but thats the flow of a simple client-server request. 
I'm not a native english speaker, so just for my curiosity, could you explain where the difference between bottom line and baseline is? 
Bottom line is the absolute lowest you should accept, while baseline is what you are expecting. * Baseline = 40k * Bottom line = 35k
I don't mind it too much, but it reminds me too much of Python's `raw_input`. I like your implementation, and I probably will use it in the future, but then I could write the whole thing on one line,
Cool tool, I'll have to check it out. Though I found it odd the author uses console projects for testing. MSTest or nUnit are far more useful and quicker to work with IMO than spinning up a console project. Also you should have a test project anyway so you aren't really creating a throwaway project like you do with a console. Typically I just keep a test file called "Playground" or something similar that I exclude from the project until I need to do some hacking. Roslyn looks like it can save a bit of time here provided it works well with my other plugins/extensions. 
This is awesome! Hope this becomes standard in later editions. I'm always screwing around with different calls and crap, trying to figure out how objects work. Also defining tests will be nicer using this.
Last time I tried it didn't work during debugging like the immediate window. Does it work now? 
[Mono](http://mono-project.com/Main_Page) has had this for a long time.
It's been there since Mono 2.6, quite a while ago
If you haven't already, you should check out [LinqPad](http://www.linqpad.net/) as well. Not exactly the same as Roslyn REPL, but it allows you to safely do SQL queries with LINQ-to-SQL and Entity Framework and execute C# statements and expressions even using your application businesslogic.
LINQ to SQL and EntityFramework are the main technologies I am using ATM. There's a lot of corporate intranet sites being done in MVC3 with Razor. Look into those.
Look into dot net nuke. 
Try and check out Scott Allen's MVC3/4 videos and Julie Lerman's Entity Framework videos if you can. You can find them both on Pluralsight.com which is a subscription service but they do a trial period.
LINQ to SQL has been obsoleted by Microsoft -- but EntityFramework is still kicking. ASP.NET MVC is indeed in high demand at the moment. The OP should skip learning ASP.NET WebForms. A major annoyance is that because MVC has been through several versions pretty rapidly, lots of blog results returned by Google searches will be about the older versions (but they don't tell you this) 
I agree LINQ is fading but MVC, proper db design an EF are necessary.
OP should not skip web forms if he sees himself employed in the next ten years. There are plently of legacy projects available which needs that knowledge. And web forms is still included as a default solution in Visual Studio 2012. It's sad since web forms suck hard, but that's how it is.
You're right to focus on one thing for now and get that down, but don't completely pigeonhole yourself. It all changes so rapidly, by the time you've mastered whatever thing it is you're asking about, there'll be some hotter, newer framework/library/technique/thing. Being a software engineer (or whatever subdiscipline) will quickly become a game in which it's better to be flexible, at least in my experience. Then again, what do I know, there's probably guys out there pulling in $200k/yr to write Fortran IV.
Hell no Made the mistake of building a couple of sites in dnn, never again. jaw droppingly slow, over complicated, buggy, and unpredictable.
While EF is a pretty good ORM, I've found that to get the best performance and control over what gets executed, you gotta drop back into ADO.NET sometimes. So knowing how to use the SqlParameter object is still important. :) 
Any database access way will fit into MVC. EF, Linq2SQL, plain ADO.NET, NHibernate, you name it. It's all just a set of tools to get your data, transform it into models and proceed with MVC-ing.
&gt; It's also helpful to understand that any dynamic object is fundamentally either a Value Type or an IDictionary&lt;string, object&gt; behind the scenes Not at all. Many `dynamic` objects are this way, but `dynamic` can do much more: have a look at [the `DynamicObject` class](http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx). Silly example: you could create a class so that when you access a property with any name, it downloads Wikipedia article with that name and returns its text. (Incidentally, using [my library](http://en.wikipedia.org/wiki/User:Svick/LinqToWiki) doing that would take ~20 lines.)
MVC stands for Model, View, Controller. It's a design pattern for creating websites on the ASP.net runtime and seems to be quite popular at the moment. You can use visual basic or visual c# like you mentioned so it should suit your needs down to the ground. Once to get your head around the difference between the model, view and controller, it should all slot into place. I have work colleagues who are sticking around with php because they took one look at MVC and thought it was too complicated. Trust me, putting the time in to learn really reaps the benefits in the long run. Entity Framework is what's called an ORM (Object relational mapper). It essentially creates c# objects that map to your database and makes it super easy to grab the information without having to handle things like raw SQL queries or the connections to the database. The page you linked also references Linq to SQL, from my understanding, that's the predecessor to Linq to Entities (Entity Framework) and is now retired by Microsoft. Someone will let me know if I'm wrong on that point, I'm sure :) Good luck!
C# was a copy of Java the same way that Java was a copy of C++ as I stated previously. All methods in Java, for example, are virtual by default; something that is not true for C#, which took the C++ route. I believe this to be a design flaw of Java as virtual methods imply polymorphism; which I believe is something that has to be thought about AND designed AND explicitly stated. Having a class be implicitly set as a base class and having to mark the class as sealed is backwards in my opinion. BTW, I'm not trying to start any flamewars. I'm just stating why I never bought the "C# is a Java clone" mantra after I got to learn C#. 
I'm not sure why, but by looking at his profile he is a genius and a great volunteer so I give him a pass.
Finally got around to making a barebones Git [repo](https://github.com/tylercrompton/Scanner) for aforementioned project.
I don't see many answers listing books, if that's what you really want. There are generally two types of technology books, ones that guide you through one or more projects, where you learn as you go, and ones that are more of a reference of the different features, and you skip around to what you want. I would try and find a beginner book on c# and sql server express. Or maybe just a book on mvc, that teaches you how to build a blog or a store (those seem to be the most common). More than likely you'll feel overwhelmed as you go through it and not know what you're doing or why it works, but stick with it. Do all of the code, and try and figure out why any examples don't work for you (including checking the errata online). Depending on your background and abilities, you may pick it up quickly, or, like me, have a bunch of "aha!" Moments where you keep realizing "that's why that works" or "that's what I did" Online blogs and videos/tutorials can be great but they're not vetted as well, or as detailed (plural site is an exception, and a great resource). blogs, books, videos, podcasts, and just talking with another developer or reading code in github or elsewhere, are all ways to learn. And once you start, you never stop.
Indeed. Unit tests are very useful. Tools like REPL or C# Interactive tool don't make them redundant. From my experience of using the REPL in Common Lisp and F# FSI, I usually end up using them when quickly testing an idea, API, algorithm without going through a lot of ceremony. At this stage I am not even sure if the idea/API/algorithm is going to work out or not so creating a unit tests may turn out to be not-so-productive. However, once I am bit confident of the idea, I then go on to creating unit tests. But yes, I agree with you Interactive tool won't make unit tests redundant.
Please never, ever write "output" as "outPut" or "ampersand" as "amperSand", or capitalize arguments ("AddAmperSand"). The former is ugly, the latter nukes readability. A few remarks: ## Tuples Use the *Tuple.Create* static method to create a tuple, since it allows you to use type inference: var tup1 = new Tuple&lt;int, string, double&gt;(42, "Hello", 3.14); var tup2 = Tuple.Create(42, "Hello", 3.14); If you're using tuples with more than 3 items, your code is probably unreadable and you should create a class instead. Even small tuples should be used with caution since there's no way to document the "Item1", "Item2", ..., "ItemX" properties and it's really easy to make a typo that results in valid code. Also, the reason the documentation says *Tuple* is a static class is because it's a static class. There is no non-static class named *Tuple*, but there are non-static classes named *Tuple&lt;T1&gt;*, *Tuple&lt;T1, T2&gt;* and so on. (their actual name is a bit different because it's compiler-generated since generic arguments are not actually part of the name, but you get the idea) ## ExpandoObject ExpandoObject can be super-useful, but you lose performance and type safety. Don't use it unless you have a good reason to - that's true for the entire DLR interop part of .NET. ## Caller info Caller information is not part of the C# language, it's built in the compiler. When compiling, if the compiler sees a method call where an optional argument marked with CallerXxx has not been provided, it will replace the argument's value in the method call with the proper value. That's awesome, because it means you can use caller info in C# 4 (not previous versions since they don't have optional arguments) as long as you're using the C# 5 compiler. Declare the attributes yourself (in the correct namespace) as empty classes, and it just works. ## Parallel.ForEach The example given is wrong. If you have a few tens of strings, unless you do very heavy processing, the code will probably get slower because the time it takes to sync threads is greater than the decrease in processing time. Computing stuff in parallel is a great way to reduce the execution time of *long-running* tasks; before parallelizing all the things, make sure there's actually a performance bottleneck.
&gt;Tuples You're absolutely right. I screwed this up. I tried to discover a static class with intellisense in VS2012 yesterday and couldn't see one so I assumed the documentation just went haywire. I removed the quip about MSDN being wrong. And TIL you can create them with the type inferring static method. &gt;The example given is wrong. If you have a few tens of strings, unless you do very heavy processing, the code will probably get slower because the time it takes to sync threads is greater than the decrease in processing time. Computing stuff in parallel is a great way to reduce the execution time of long-running tasks; before parallelizing all the things, make sure there's actually a performance bottleneck. I only did it to illustrate the concept. I point out that it's not practical in the post. Your action could go to the moon; the point was to be super simple in my example :) There are loads of cautionary tales you could write about the features I wrote about, I chose to just hand wave over most of them (ExpandoObject I didn't even caution against but overusing this is a horrid idea) &gt;That's awesome, because it means you can use caller info in C# 4 (not previous versions since they don't have optional arguments) as long as you're using the C# 5 compiler. Declare the attributes yourself (in the correct namespace) as empty classes, and it just works. Thanks for clearing this up, I was actually having a bit of trouble figuring out where the compiler started and the language ended in this example (I knew argument attributes have been supported for ages but got a bit lost in thinking). I knew the language team was involved so I made some wrong assumptions. It's true that there is nothing in the language about it supporting this feature, just compiler changes. Thanks for the editing! Also I read some of your posts.. Good informative stuff!
Because I didn't figure out how to do that. When the API tells me that there is something called `collectionsaveascommunitypage`, my code has no idea how to properly capitalize that. I mean, doing that is obviously not impossible, but it seemed like too much work for little benefit.
&gt;Interesting to note that, yes there are 8 different versions of the class to support Tuples that hold up to 8 values. This is the part where the C++ programmers are torn between laughing and crying.
Pretty much the same opinion here, except for Parallel.Foreach, an example is just an example and Tuple, which seems ugly to me; I would prefer a class for readability and possible extension.
Variadic templates are type safe so...where is your God now? 
Slick (and I mean that sincerely) but you didn't say C++0x or I'd have kept my mouth shut ;)
1220 pixels is a bit wide, don't you think?
Parallel.ForEach example is "wrong"? it clearly demonstrates that the actions are performed without regard to collection order; that's "right" enough for me...
This comment is better than that entire article.
First time getting any considerable traffic to my blog aaaand I've alienated people. I made it a bit less wide. Hours ago I was admiring how nice it looked on my 27 inch monitor * facepalm* let me know if it still isn't looking good on your monitor and I'll try to see what I can do further.
It's a personal preference, not particularly a physical limitation. I just like narrow reading like newspapers and half-screen windows. Fullscreen 1080p windows just take up too much screen real estate for me. Other people like really long straight lines. What you really should work for is a smoothly adjustable content width. The text should flow down to fit a 1024-pixel wide window and back up to fill however big your monitor wants to be. I don't know enough CSS to point you in the right direction, but I can tell you that there is such a thing. Something about flow and layouts. I can tell you that your RSS feed is awesome and I can squeeze it down to less than 700 pixels, way below where Google Reader starts to break down itself (~830 pixels). Your content can handle it.
&gt; which means chaining tuple instances has to be done manually. Oh the horror. Is there any reason why someone would want a Tuple with more than 8 values anyway?
Yes. When doing HTML, in any framework I've ever looked at, heard people talk about, seen trending on HN, I've always found them to be fighting state. This means you get design patterns such as MVC, which are at best a series of mess, its hard to write comprehensive unit tests for, hard to deliniate what is responsible for what, hard to track the flow of a user. When writing desktop apps, if using WPF most people opt for MVVM, which is a much nicer, leaner design pattern. Rather than a circle of communication, everything is simplified. You use nested objects that represent the workflow of the application (The View Models or VMs) these are inherently easy to unit test, and get code re-use from. DI and IoC become a lot more natural, rather than having some seperate object somewhere containing state in a 'session' you have everything stored in simple POCOs which know as little or as much of where they are as they need too. I realise it might be hard to understand what I'm rambling about, because I don't really know how to describe the contrasts between the two, short of making some *real world* example. You can read on MVVM here: http://msdn.microsoft.com/en-us/magazine/dd419663.aspx And compare it to MVC here: http://blogs.msdn.com/b/brada/archive/2008/01/29/asp-net-mvc-example-application-over-northwind-with-the-entity-framework.aspx The main problem with MVC is the seperation between the View and the Controller. Frequently the model becomes "hot", it knows far too much, and is no longer a model object at all, but a kind of ViewModel in MVVM lingo. The View becomes heavy as well, rather than just been a set of "Render XYZ at IJK" it holds state, implementation logic to actually change state. All these things are bad because they are not SOLID priniples, or even more simply, they make TDD hard. This is why I hate web development, hate it with a passion. Simply because when a client needs a web page solution, rather than a *rich desktop experiance* or whatever the salesman said, it means more work for me, it takes longer for me to deliver something. That something is harder to maintain, less test coverage and more likely to be harder to add features too, reuse existing ones and ultimately understand.
The person who downvoted me: if that was about the read error, well, I suppose that was justified. It's fixed now.
The point of Parallel.ForEach is to speed up execution, the fact actions are performed in indeterminate order is an implementation detail.
The biggest difference is probably the statelessness. It becomes especially confusing if you use ASP.NET Web Forms as it tries to hide this from you. Effectively, when you create a form in Win Forms it has state, you can declare variables inside the code of the form and they should exist until the form is destroyed, unless you save them elsewhere. In the web, your variables exist during the creation of the page or form until it is sent, then they are discarded unless if you save it somewhere explicitly, say the session. If you need these variables again when they click on a button or something you'll generally need to regenerate this information. However, the fun bit comes with Web Forms. They use some horrible techniques to try hide this type of thing from you and in the beginning you can go without noticing it. You can create a button and bind events to it in a similar fashion to Win Forms, however, there's a lot of stuff happening in the background for that. When you generate that page with the button that has an event it creates your page, sends it to the client and then the data on the server for that page is lost, including all your variables. Except, Web Forms will store some data on that page is just generated as a hidden field to save some of its state, that is called the **View State**. When the user clicks on that button it sends all of the form field values and that **View State** back to the server. The server will then regenerate the page, load its state according to the View State and then apply the appropriate event based on the new data from the form. If you're planning on doing development with ASP.NET Web Forms I would highly advise doing some research about the ASP.NET *Web Forms*\* Page Life Cycle. \* *This part may be omitted on some pages like the [MSDN Article](http://msdn.microsoft.com/en-us/library/ms178472\(v=vs.100\).aspx) on it, however, this is specific to Web Forms and does not apply to anything else.* Of course, as I said, none of the Web Forms specific stuff applies to anything other than Web Forms. However, the web is still stateless regardless of what web framework/language you're using if you're using HTML, be it C# with Web Forms or MVC, PHP, Java Server Pages, etc.
Yes, composite keys is probably the best/only use I've found for Tuples. Manually reimplementing aggregate equality/hash behavior just to use as a key to a private dictionary is an annoying waste of time, and something that I often see developers get wrong or do something worse to avoid the headache of. Their other place would be as the result of a method or function, when the various data members are orthogonally related. This would be in the place of various minor *Response or *Result classes, which are just being used to return multiple values without forcing cumbersome usage of out parameters. This one is a matter of taste; tuples don't have property names but they do have transparency of intention and usage. That said, tuples shouldn't be only a library thing, they should have language integration as well. So a stream parser with signature: public Tuple&lt;TResult, ParseState&gt; Parse&lt;TResult&gt;(...) could be called like: var result, parseState = stream.Parse&lt;MyClass&gt;(...); in order to automatically unpack the tuple into variables of the appropriate types. But you can't do that. And if people have to manually unpack composite results, they would probably rather do so with a custom type.
The recent versions of DNN are not. The ones pre-5.0 are terrible though. I can't blame you for having such an outlook. We use it at where I work, and we all agree that 5.0+, especially 6.0+ are leaps and bounds better than pre 5.0.
the version i used was 6.01 ... did not like. each to their own i suppose, but our devs were pretty unanimous that it was not a nice experience. 
I'm unique in that it was the first framework I was exposed to right out of college. Apparently it has a steep learning curve (On top of the already steep ASP.NET due to having to know a myriad of languages), so coming from other frameworks I can see how it could be frustrating. Although we never really have any issues here. Upgrading works fine 90% of the time, we never have sites "crash", we can handle any amount of users, speed is never really a problem unless you go super heavy on the ajax panels... I dunno. Like any CMS, it takes some learning. This one just happens to take a fair bit more than most I guess.
I've always wondered how to do that. That's still a bit complicated though.
Well, as far as returning goes, if you run a query on your LINQ-to-SQL objects, the return should be an ienumerable&lt;entity&gt;. You can stabbing to these using the Datasource property and calling .Databind(). Sorry for text issues. Writing from phone.
This question is 4 months old...?
I'm not sure that the age of the question matters in this case. It's a funny problem to have, regardless of time. 
To each his own I suppose. I don't understand what's funny about it, and I know funny. I'm a clown fish.
You should look into MVVM. It's a method for binging data structures to form elements. That wat you don't have to fill the elements manually as you do now, which can get messy. And when you change the value in the element the data bound to it changes automatically. I don't have any examples because I'm commenting from my phone. But there should be enough information out there especially on the msdn website.
These kinds of questions are better asked on stack overflow. You will probably get more traction there. also, f* WinForms. ASP MVC FTW 
Here is [a good tutorial of what I posted about earlier](http://www.codeproject.com/Articles/165368/WPF-MVVM-Quick-Start-Tutorial). 
&gt;Have you ever had to write a state machine? (Almost certainly yes.)
&gt; Have you ever had to write code that used a mutable variable? Trust me, I'm a functional programmer. :P
Yeah but stackoverflow is full of assholes
Thanks!
Basically, "Have you ever had a long-lasting mutable variable that you made many, many changes to, one after the other?"
Imagine you're handling a network connection. The connection can be either open, temporarily closed, or permanently discarded. You want the compiler to tell you at compile time if you try to draw from or close a closed connection, if you try to open or discard an open connection, if you try to do anything with a discarded connection, or if you try to begin with a non-closed connection or end with a non-discarded connection. You create an abstract base class `Connection` to hold any common code needed to use the underlying raw handle, placed in private and protected methods. You then create three subclasses of `Connection`: `OpenConnection` (with `Close()` and `GetData()` methods), `ClosedConnection` (with `Open()` and `Discard()` methods), and `DiscardedConnection` (with no additional methods). All the methods secretly mutate the underlying handle, but they return a new `Connection` of the appropriate subclass and using the same underlying handle. Obviously, you should not call more than one connection method on a given `Connection` object, but the indexed state monad will take care of that for you without a problem. You then declare a method with no parameters (or just a variable, preferably immutable) that returns `IState&lt;ClosedConnection, DiscardedConnection, A&gt;`, where A is the type you actually want to return. When you implement that method (or give that variable its value), the compiler will do everything I said it would, and you can use LINQ syntax to make it look as though you're actually mutating a variable. You can even just pass a LINQ query expression directly to a method that expects an `IState`, so long as `IState` is the type you're manipulating inside the expression. --- **EDIT:** The example above in code: using System; using IndexedState; using Handle = ...; // import &lt;c&gt;Handle&lt;/c&gt; from somewhere using Unit = System.Reactive.Unit; public abstract class Connection { protected readonly Handle handle; protected Connection(Handle h) { handle = h; } // any additional common code } public class OpenConnection : Connection { public OpenConnection(Handle h) { super(h); } public ClosedConnection Close() { return new ClosedConnection(handle); } // dummy public byte[] GetData() { // implement using the handle } } public class ClosedConnection : Connection { public ClosedConnection(Handle h) { super(h); } public OpenConnection Open() { return new OpenConnection(handle); } // dummy public DiscardedConnection Discard() { return new DiscardedConnection(handle); } // dummy } public class DiscardedConnection : Connection { public DiscardedConnection(Handle h) { super(h); } } public static class Conn { public static IState&lt;OpenConnection, OpenConnection, byte[]&gt; GetData() { return (c =&gt; Pair.Create(c.GetData(), c)); } public static IState&lt;ClosedConnection, OpenConnection, Unit&gt; Open() { return IState.Modify(c =&gt; c.Open()); } public static IState&lt;OpenConnection, ClosedConnection, Unit&gt; Close() { return IState.Modify(c =&gt; c.Close()); } public static IState&lt;ClosedConnection, DiscardedConnection, Unit&gt; Discard() { return IState.Modify(c =&gt; c.Discard()); } public static A RunWithConnection&lt;A&gt;(this IState&lt;ClosedConnection, DiscardedConnection, A&gt; st, Handle h) { st.Eval(new ClosedConnection(handle)) } } /* --------------------------------------------------------------------------------------------------- */ public static String GetFirstString_CompleteExample(Handle h) { return ( from _u1 in Conn.Open() from stringData in Conn.GetData() from _u2 in Conn.Close() from _u3 in Conn.Discard() select Convert.ToBase64String(stringData) ).RunWithConnection(h); }
Fantastic. Personally I was never one to obsess over these sort of things, and in my 10 year career haven't come across too many teams that were either. I know FXCop and code coverage police is out there though.
Valve uses C# for it's backend.
Good overview. Funny to see the strict rule set, and then 2000+ suppressions. 
I really enjoyed reading this. More like this please.
I was expecting to see more in-depth analysis like "this design pattern is used to manage this" and "this is where this happens". But I found the overview and brief reactions interesting. I'd especially be interested in an analysis of the generated proxies. 
Your URL should be mapping to a web service endpoint. When you create a WCF project for a web service, it creates a file with a ".svc" extension. Then each method that you expose in the service contract should have a URL mapping that matches the method name. So you would end up with a URL that looks like this: "/MyWebService.svc/GetCustomer" I think perhaps you need to read up a little on WCF services first. It's really pretty easy once you get rolling. Here's a simple entry in one of my services just to show how simple it is to set things up for json using attributes inside your service: [OperationContract] [WebInvoke(Method = "POST", ResponseFormat = WebMessageFormat.Json, RequestFormat = WebMessageFormat.Json)] public string RequestGuestPass(int profileID) { return "http://staging.mytestsite.org/vp?" + System.Guid.NewGuid().ToString() + "_" + profileID.ToString(); } 
[*wat?*](http://i3.kym-cdn.com/photos/images/original/000/249/618/d36.jpg)
This initial article is me following my initial steps for codebase analysis. What does the project structure look like? What 3rd party libraries does it use? How fast does it build? Tests easy to run/maintainable? Is there significant copying/pasting? FxCop/Coding Standard? I didn't have want the article to get massive and since nothing like a high-level overview exists anyway (I checked everywhere) I did it like this. Part 2 will definitely have to include more in-depth of the code and design patterns. At first I said I was going to do a code review but I rephrased it in the actual post and called it a codebase overview. 
As a programmer who knows nothing about how to go about reading memory from another process, isn't there a way to read the memory without altering it and letting the other process know that you're looking at it? Seems that as long as it wasn't modified, the game wouldn't have any idea.
And honestly it sounds sketchy... it sounds like a keylogger. I think you would need some kind of native language like C++ to view the memory. You can get started with using Spy++ and see the "behind the scenes" info. Thereafter you would probably need P/Invoke to call into the Win32 Api.
Nothing sketchy, It's just so I can filter through the chat of people selling things, because with a big crowd, the chat moves faaar too fast to read. The program I'm trying to make just logs lines that contain a certain keyword.. 
Use Cheat Engine to retrieve the memory address. That's how aimbots are made, I don't know if it applies here. It's worth a shot.
Awesome. Will do. I'll let you know my progress. 
The anti-cheat code that the games have look at the other processes that are running. They typically have a blacklist, but some might also look at the permissions the other process has. So if you had a process with SE_DEBUG_NAME privilege (which would allow it to attach to the game process &amp; inspect memory), that might be a flag to the game. http://msdn.microsoft.com/en-us/library/windows/hardware/ff541528(v=vs.85).aspx 
I've done something similar (although looking for images instead of strings). Assuming no anti-cheat measures (not a very safe assumption), on Windows it can be done with [VirtualQueryEx](http://msdn.microsoft.com/en-us/library/windows/desktop/aa366907%28v=vs.85%29.aspx) and [ReadProcessMemory](http://msdn.microsoft.com/en-us/library/windows/desktop/ms680553%28v=vs.85%29.aspx). The idea is you use VirtualQueryEx to find all of the process's allocated pages, then ReadProcessMemory to copy them into buffers where you can do your string searching. Check [pinvoke.net](http://www.pinvoke.net/default.aspx/kernel32.readprocessmemory) for signatures to import the functions you need. It'll probably be difficult to monitor the first line of chat, but if you can figure out a way to identify chat strings (e.g. does they always have a timestamp or something?) you can find all the new strings since your last scan. If this fails because of anti-cheat or something, would OCR be a possibility? Automate taking a screen shot of the chat window and feed it into an OCR and scan the output. Might be a lot easier either way.
You can definitely view other processes memory using P/Invoke. No C++ required.
FYI, [Twilio](http://www.twilio.com/sms) is the new(er) hotness.
That's awesome. I found the metrics you gave interesting. Definitely interested in your part 2!
I was going to link this as well. The author of White Magic has also released one called Grey Magic that's both in process and OOP
Yeah &lt;3 Apoc (if your reading this Apoc keep up the good work and don't get sued!)
I dropped out of college. Internships mean nothing.
If you already had success doing web forms, win forms will be hilariously easy to pick up. There is subtle differences in eventing tho
You might look into [Fortumo](http://fortumo.com/) or [Paysera](https://www.webtopay.com/premium_sms_payments.html). I've looked into them, but I don't have any experience using them yet.
Alright... So I'm starting from scratch and going to learn this WCF Service Library... I am looking at this right now: http://www.codeproject.com/Articles/167159/How-to-create-a-JSON-WCF-RESTful-Service-in-60-sec And then I will work from there. I think learning how it works from the ground up will be a better approach then trying to tie into something, from the start. If you have anything additional...Thanks
Well just be aware that interacting with a RESTful service usually implies that a specific URI represents a "resource" including for example in the codeproject link, the ID of a customer. This is different than doing AJAX directly to a WCF service endpoint with a post (used in my example). Mainly in this case you don't package a data string that is passed for the arguments. Instead the URI must represent those arguments and using a UriTemplate you configure the service to consume and map the arguments to a call. Just wanted you to know you are going in a slightly different direction. WCF is so highly configurable that you will run into the challenge of having too many ways to do something sometimes!
Went through some tutorials and watched some videos. It makes so much more sense now. 
From [MSDN](http://msdn.microsoft.com/en-us/library/ms127948.aspx): &gt;The Microsoft.VisualBasic.FileIO namespace contains types that support the My file system object in Visual Basic. And from [SO](http://stackoverflow.com/questions/1317263/system-io-versus-visualbasic-fileio): &gt;Microsoft.VisualBasic.FileIO is built on top of System.IO (for the most part.) It should be at most as fast as System.IO for things that have direct equivalent there. The performance difference should be negligible anyway. Nothing prevents you from using both. If there's a function you need that exists in VisualBasic.FileIO and doesn't exist in System.IO, you should be using the VisualBasic.FileIO version rather than rolling your own. Why did they choose to do that? No idea. Maybe the functionality was common in VB.NET applications, enough to include it in the VB-specific library. However, since it all compiles down to IL, there's no reason you can't use it.
I'm not 100% sure but this is what I think. It was introduced in .Net 2.0 as part of the Microsoft.VisualBasic.MyServices namespace which was introduced to bring in the My object concept to Visual Basic.Net. Looking at the guide [developing with My](http://msdn.microsoft.com/en-us/library/5btzf5yk\(v=vs.80\).aspx) it looks like it was focused around RAD and my feeling is that this was done by a VB team who were looking at user driven feedback and that at the time it wasn't seen as right to include in the main namespace. Just an opinion though. 
I'm going to guess it's because it depends on some native component extracted from the old VB runtime, and that doesn't make sense to ship in the Framework. EDIT: now that I can finally see this remark, I'll add that I decompiled it and find there is no such dependency. Thanks for keeping the internet safe, downvoters!
Thanks! I've been using it for a wee while now, and it's much easier than writing something custom. 
Nothing stops you from using it from C#, other than the slightly dirty feeling.
&gt;This means you get design patterns such as MVC, which are at best a series of mess... Hey I really appreciate your views on MVC, they're the first real criticisms I've seen of MVC when so many other people seem to be tripping over themselves to explain how amazing it is. Have you had a chance to check out ASP.NET Web API? Do you have any opinions on it as a development technique vs. webforms and MVC?
There are a few usable items in the Microsoft.VisualBasic library I use from time to time. They mostly have to do with basic file access and can be done with 4-5 times the code using C#. It almost always makes me feel dirty when I import it into a project, but it is well tested and saves me from having to support the code. Edit: Check out the [Microsoft.VisualBasic.FileIO.FileSystem](http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.fileio.filesystem.aspx) namespace for examples
The "fairly verbose" class looks better to me. It's encapsulated, tightly defined, and easy to read. The yield return method apparently has more backing code making it work (than the so called verbose method) *and* requires the end user to call AsDisposable.
Agreed. I switch between the two daily at work. Although, C# has now surpassed Java in terms of language richness (type inference, lambdas, yield, to name a few). So going between the two, I definitely feel the most constrained by Java. Though, some things in Java I kind of wish they had in C# too (static import ...*, Class&lt;?&gt; generics, ...). And Typed Exceptions... I know that there are definite drawbacks to typed exceptions, but more times than not I have missed an exception for some call, which causes errors in production. 
I'd be interested to hear what you think about it (if you end up reading it, that is). 
This is a fine academic exercise, but don't ever write this code. There are several things that are off here, but I'll address the larger issues as I see them. &gt; The class is fairly straightforward. The article claims the class is straightforward. Maybe I'm not very smart (very likely), but it's quite complicated to me. * Dispose does not cleanup any resource. Nor is the contract honored that "If an object's Dispose method is called more than once, the object must ignore all calls after the first one." The semantics of IDisposable are broken. As a caller, I don't know what's happening when I call dispose. * m_enumerator.MoveNext(); is called in the constructor. Can you explain why you did this? The reason isn't trivial and may be lost on the next dev to maintain your code. * m_result is never set. Also, enumerators are completely the wrong tool for the job. yield return null; // Pivot point Stuff like this is major code smell. When you're returning funny values at funny times, something isn't clear. Your TimeIt method is more complicated than the class you're trying to improve upon. Not to mention that from the caller's perspective, using the new pattern is more complicated. Lastly, the thing I like about the original approach is that it's clear and easy to extend. Want a custom message? No problem. Want to track nested timers? No problem. From an OOP perspective, you have a class that has a clear purpose and it does it well. Why change it? Anyway, just musings of a crazy man.
[Not the same, but related and equally necessary.](https://github.com/tylercrompton/Scanner)
That's pretty cool. I know what you mean it making you feel dirty though!
So dirty.
**Update** I've made some serious improvements in my logic, and now I'm trying to just solve an error that reads: "An object reference is required for the non-static field, method, or property." These errors occur on lines 103, 104, 123, and 124. My updated file: http://pastebin.com/A4WBYkMP My Account Class--&gt;http://pastebin.com/BemjQrvq My Checking Class--&gt;http://pastebin.com/5EGMeLeF My Savings Class--&gt;http://pastebin.com/GVqSteYt My PolicyException Class--&gt;http://pastebin.com/tXeGSBQ4 
I don't have the exact answer but I'd look at two things - first, the Redemption library massively extends and simplifies the object model of Outlook Mailitems and may be a great help if you really want to do this via Outlook. However my suggestion would be to do this via EWS - Exchange Web Services. It takes more setting up but does not require an instance of Outlook to do the work or any special DLLs and the code is far nicer and more reliable than that of Outlook. You also get a lot more options in EWS than you would with Outlook so all in all, having used both, I would take EWS. I have samples etc if EWS is of interest - drop me a reply. Sorry, I know this doesn't answer the actual question but just wanted to point out it doesn't have to be the Outlook libs to do this sort of thing.
localhost/api/web/ ???? What am I typing in here to access the category information... OR, better yet, what should I be reading to find the information on this. thanks.
Change your method signature to IEnumerable&lt;Video&gt; GetVideosByCategory(int id) and the url 'localhost/api/web/3' should work.
I actaully have the categorys as strings... but I converted to int and this was easier. I just then categoriezed them in the view. Thank you.
In addition to the solution jacerhea pointed out, you may also want to reconsider your data access pattern. You are bringing back ALL the video entries from your repository (pulling that data over the wire, hydrating the objects, loading them into memory, etc.), THEN using LINQ to find matches. This will work fine with a relatively small amount of videos, but won't scale well (assuming you'll someday end up with thousands (or more) of videos). Your best bet is to have a GetVideosByCategory(string category) method on your repository so you can do the narrowing at the database level rather than in your controller.
Is this true even if he's using EF?
.GetVideos() will return everything. He needs a more intelligent select statement.
Right - even if EF is returning proxy objects (due to lazy-loading), the subsequent LINQ statement will force the fetching of all those objects.
 private static void MakeWithdrawal(Account account) [...] Console.WriteLine("New Balance" + Account.Balance); Presumably you want to access the "account" variable, and not the "Account" class. In other words, change Account.Balance to account.Balance. And stop using confusing variable names like this. It leads to these sort of problems all too often. Oh, and stop using double for currency information. You may not regret it today, but you will sooner or later. Use the Decimal type. If you don't understand why, check out [this article](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html).
Well actually, you don't know if he is bringing back ALL the videos, because you don't know the implementation of the GetVideos method. With the source he's given, it could be either way.
I thought with the most recent ASP.NET update you could do /category/3 or category/comedy and have that map to GetVideosByCategory(string category) I have not tried it yet but I thought I saw that in the release notes.
The problem is your parameter name isn't matching up. `routeTemplate: "api/{controller}/{id}"` vs `public IEnumerable&lt;Video&gt; GetVideosByCategory(string category)` : `id != category` You either need to do: `public IEnumerable&lt;Video&gt; GetVideosByCategory(string id)` or `routeTemplate: "api/{controller}/{category}"` Since the latter would conflict with the default route, and by conflict I mean the one you place first will be the one that always gets selected when a url with two parameters come in, you could do this: routeTemplate: "api/Foo/{category}", defaults: new { controller = "Foo", category = RouteParameter.Optional } There may be better ways to handle this. This is just my small understanding of handling routes.
I don't think the issue is lazy loading since theedeacon is reading from an XML file. Loading that into memory will be the greatest cost. In the long run, moving it to a database would work better as long as GetVideos() returns an IQueryable&lt;Video&gt;. Then the .Where() would just get built into the final expression and generated in the SQL statement.
I've gotten MVC4 projects to play ball with both PostgreSQL and MySQL with no issues whatsoever, this includes using Entity Framework, but that is when I've been targeting a Windows environment. What kind of errors are you getting when you run the FCGI server? Turning off custom errors in the web.config should help identify what Mono isn't agreeing with. Guides I've seen through simple Google searches also suggest deleting a few DLLs in /bin as they come in Mono's gac. If you don't get anything meaningful after disabling custom errors, it's usually an error in your web.config. Removing the targetFramework attribute (or the httpRuntime tag altogether) usually resolves that.
hosting MVC4 on linux is just as stupid as running ruby on windows. the main issue here is that you have problem with windows server.
I have got it to work right. It was a paid contract. They wanted a cheap solution, they ended up paying so much in hours, that windows hosting was a significantly better solution. ( Windows Azure is my preference ). Eventually the cost of linode was 49 ish (??) and the azure solution was $27 ( 3 sites) + 9 (DB) a month. Here are my thoughts. 1. Last time, I had to recompile mono. That itself was very horrible. 2. Performance just sucked so badly. 3. Replaced ninject and a few other dlls with "mono" versions. 4. setting up nginx to do a passthrough to the "web" engine. 5. there are somethings you can not do, in the application, that no matter how hard you try, It just doesn't work. After I got it to work, redeploying the web app required a custom script to delete out all the DLLs and replace them with mono versions. The real problem, is that you are not wanting to use a windows server. Tough luck, use a windows server. Windows Azure has some free options, plus on a startup you can get a LOT for free through partnering or bizspark or msdn (my option ). Wish you best of luck though! 
I'm actually waiting on MariaDB and Entity Framework 6 to work together. Currently EF6 is still in beta and isn't really playing ball. I know this doesn't answer your question, but I'd wait until EF6 is finished and will work with mono once it's pulled in.
If you're simply trying to save money, bear in mind that you're going to spend much, much more in deployment and maintenance cost going mono/postgresql. Not to mention that if this is a business application, finding other folks that are able/willing to code/deploy to that architecture will in itself be a chore.
10% to save money, 90% to save sanity on microsoft "web hosting."
I love MVC4, and I don't mind using it when someone else is managing the hosting infrastructure... but jesus... managing windows servers is just agonizing.
I've gotten to the point to where I can run an empty MVC4 project (deleting the right dll's and so forth), but as soon as I start scaffolding out my models and other such fun things I wind up getting multitudes of errors. Obviously letting errors pass through just to get that far :). The majority of feedback here has been "Just use windows servers!" I may have to hold off on smaller MVC4 projects (where I won't have a fully managed hosting provider) for a while.
It's less of a cost issue and more of a sanity issue. Most of what I do needs multiple app servers, active/passive db servers, etc. Every time I have to manage microsoft infrastructure I feel like I'm in the stone age. My last C# project is running around $20k/mo in hosting costs, not including CDN or DNS. And it's retarded to manage, give developers the right level of access, partition storage, load balance IP's and services... spin up/sunset applications... MS is just in the stone age in regards to hosting. So if someone else were managing it, I'd be cool. Just schedule a deployment with ops after client approves dev environment and everything magically works (and me or one of my devs hopefully doesn't get a phone call at 2am). But inevitably I wind up having to clean up some idiot's mess (hey everybody - let's deploy via FTP! Let's use a shared deployment password! What do you mean we have to flush the SQL server DB logs with a backup?... the list goes on) and getting things to work the right way in MS land is hard (and almost always requires cygwin anyway...) because MS pretends there's no other way of doing things other than the wrong way sometimes. (ever try to install visual studio on something other than your c drive? doesn't happen. You basically have to junction a separate partition. This is part of why longhorn never shipped and they started the MinWin project.) To be fair, I'm not super with powershell yet, I kind of resent microsoft for finally giving us an almost decent CLI all these years, and not using any of the solutions that have been tried and true for 30+ years and allowing us to take advantage of all that work that's been done. I once had an noc engineer (on a $100k/mo hosting account) tell me that "Linux doesn't support spaces in filenames." I almost died. I still have that email somewhere... So idiocy is all over, I think it's just easier to mitigate and the defaults are much saner in gnu-land. Sorry about the rant :). Compiling mono isn't so bad - you just need to have mono installed to build it :). Thanks for sharing your experience... I'm curious about the performance differences. question: So you ran the xsp4 engine for hosting and just did a reverse proxy through nginx? Did you have nginx serving static content directly, and pass anything going to a route to xsp4? I may look into some of those free hosting options just so I can monkey with it a bit more. I really love MVC4 and EF for developing. Thanks for the tips!
&gt;Building against mono nightlies, which technically should have all the support they need, I've never quite gotten MVC4 to run on it. The first problem is that you're building against nightlies: If support is only in the nightly builds, I wouldn't expect it to be stable yet. Also, some MVC DLLs depend on IIS. You'd need to find out which these are and delete them, as mono should have replacements for them, if it really does support MVC 4. &gt;getting Visual Studio to play nice with non SQL Server databases is hell. I'm not sure what you mean. Can you not use the ADO.NET connector for PostgreSQL? Or do you mean the designer components? I've had big trouble getting any 3rd-party DB to work properly with Visual Studio's designer, so I don't bother.
Deleted necessary dll's. Getting the connect strings right is always a hassle. And after I create the EF classes, the auto-generated sql is either still in MS SQL language, or *partially* in their language (one time a simple sed command changed [] to () or something like that and it worked.) And the designer components totally freak out :). But not in an obvious way - I've had them think they are working just to freak out when they try auto-updating DDL's (or something like that, haven't fired up VS this year yet...) thanks for the response!
Awesome - thanks. Was searching for MVC and mono, and his blog title has neither :). Edit - I see he's deploying "Empty application." Even I got that to work. Unfortunately empty applications aren't too cool :). As soon as you start doing stuff - like scaffolding crud for a model, it dies.
Are you using entity framework attributes on your model classes? Mono includes its own EF build, and if you're using EF6, I'm not sure it'll run with Mono at all.
Ahem. Managing windows server is agonizing - I don't understand this. All you need to do is enable IIS, click "next" a couple of times and you're done.
Now, I don't want to try and sell you on Windows hosting at all, but there are finally some tools to take care of crap like deployments. Check out http://octopusdeploy.com/ for code deployment (we combine that with teamcity for lots of automated goodness) and something like Fluent Migrations (https://github.com/schambers/fluentmigrator) for the database side. On the hosted side, Azure finally (in my opinion) has a compelling story and might be worth another look. There's also appharbor.com. On the database front, what are you trying to accomplish with the log files? Not sure I can help, but maybe. I have no experience with mvc4 on Mono, but if you just want C# code and a simple web stack for rapid prototyping, I much prefer Nancy (it's reminiscient of Sinatra) for that sort of work. Check out https://github.com/NancyFx/Nancy/wiki/Working-with-Nancy-on-Mono. 
What is the actual priority? Just running on Linux? As much as I love C# and MVC, I don't think I would go there, use a Linux friendly system...like Java, Python, or Ruby. Regardless of what you choose, there will be gotchas, but I tend to think you'll have fewer if you aren't swimming up stream.
[Appveyor](http://www.appveyor.com/) was posted on /r/aspnet a couple weeks ago but it's another continuous integration and deployment solution for .NET projects. 
Definitely possible. I'm using MVC 4 for my personal site and blog (http://dan.cx/). All the code (including the Nginx configuration) is [available on Github](https://github.com/Daniel15/Website), feel free to take a look and see if any of it helps you! I'm using MVC 4 + [ServiceStack OrmLite](https://github.com/ServiceStack/ServiceStack.OrmLite) with MySql.Data + [SimpleInjector IoC](http://simpleinjector.codeplex.com/) + [DotLESS CSS preprocessing](http://www.dotlesscss.org/) + [ELMAH](http://code.google.com/p/elmah/) for error logging + [supervisord](http://supervisord.org/) to handle spawning of Mono FastCGI. Some notes: - Performance actually isn't too bad. I converted my PHP site to a C# site running under Mono, and the Mono version easily outperforms the PHP version. - You'll need to be using at least Mono 2.11. I'm using Mono 3.0.4 for my live site. - The only version of Entity Framework supported is currently in alpha (Entity Framework 6). Including either System.Data.Entity.dll or EntityFramework.dll from an older EF version will cause a lot of errors. - This version of Entity Framework is incomplete and doesn't fully work yet. I'd suggest staying away from Entity Framework all together. Use NHibernate + Fluent NHibernate if you need a "fully featured" ORM, or OrmLite if you just need simple database to entity mapping without any "bells and whistles". - Microsoft.Web.Infrastructure.dll has a custom implementation in Mono, so ensure it's **not** in your bin folder. I'm pretty active on their [mailing lists](http://www.mono-project.com/Mailing_Lists), if you have any issues you can't get past, feel free to post to mono-list or mono-aspnet-list and I (or someone else) should be able to help you :)
For what it's worth, Ninject is one of the slowest IoC containers for .NET (eg. see [this benchmark](http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison)). That's probably one of the reasons why performance was so bad.
Cool, thanks!
That's likely the issue. Performance benchmarks have actually shown quite surprisingly that that .NET on Linux via Mono runs faster than .NET on Windows.
* If you're doing it right (nobody does) get the 5000 ports (ok it's only 3, but there are ranges they are randomly assigned to) necessary for the proper RPC ports set up, and configure your IPSec or VPN and your X509 certificates... then launch your management console and connect to the server you want to manage. Oh, and it's agonizingly slow because none of microsoft's protocol designers ever imagined that somebody could ever need to connect over a WAN. * Since you're doing it wrong (like everybody does) just allow 3389 from your office's IP, log into the server's desktop using RDP as Administrator with the same password you and the other 3 guys on your team use. (everytime an admin does this, a kitten dies.) * Go click all the little dropdown menus and get carpel tunnel. * If you're doing it right, set your app root to a location on another drive. And your log files to yet another drive. This is kind of tedious because you've got to find the defaults, then click a bunch of menus to make sure you get everything in the right directories. Then you've got to make sure all the permissions are right, because MS has never done that well either. * Since nobody does it right, just put your web apps, log files, and databases all on the same super fragmented filesystem, along with your dynamically managed swapfile and operating system update, rollback, and log files. (which, btw, is all absolutely insane.) * Since you've got 60 apps load balanced across 2 beefy app servers in LA, and a failover cluster in NC, repeat all that clicking and targeting 240 times. Oops, you made a mistake somewhere. Good thing you can just diff your configuration files from your version control system and find out what went wrong, right? wrong. Scripting is a nightmare. Automation is a nightmare. Security is a nightmare. Hell, even basic management requires IPSec and RPC to do properly. I'm not sure how much has moved to powershell, but so many utility scripts out there are written in VB and only work for this one version of IIS on this one service pack of windows. Or you have to buy third party software to do half of this. And there is no SSH implementation that ships with windows. And their preferred method of deployment is FTP - which should not be used by anyone anymore unless you're doing anonymous/open public access. So now... you've got to change a setting somewhere. Let's say it has to happen on all of your sites, but the change is slightly different for each site so it can't be done at the global setting level. Or you don't know where it is so you have to dig through the GUI and find which button it's hidden under. Oh, but before that button will show up, you have to add this key to the registry. Or use a 30k program that's only available in the latest 385MB download of the admin tools. First you have to do it on dev, then push it to test so QA can look at it, then push a button somewhere that causes production to ingest it and use it. Have fun clicking. Mayyybe you can get some of the IIS export/import functions to work properly. Maayyybe you can use a find/replace utility to change any settings that need to be done from dev/test/prod on the exported config files IF there is documentation explaining them... Or you might be able to buy a tool for $800 that will do it for you, until it needs an update because of the next version of windows and that company has gone out of business, or you need to pay a $400 upgrade fee. Ok, so now let's do a quick backup in case a system dies so we can restore it quickly. Or we want to replicate the prod server offsite so we can troubleshoot something. What's that, just store the ~200k of configuration files and your database and that's all you need? No! You're going to need a 30GB backup of your entire OS. Ok so now your server has been compromised in some way. So you've just got to dig through event logs, web logs, run the sfc tool which ambiguously may or may not tell you if any of your checksums are incorrect, check through your 1,000 processes (many of which appear identical at first glance) and make sure none of them are doing anything naughty. Better to just restore that 30GB backup, db, and redeploy your apps. But you can't restore the backup over the network, or just mount your storage volume over iSCSI from another system to take a forensic snapshot, then reinstall/deploy - if your datacenter hasn't built some custom tools to do it, it ain't gonna happen, you'll have to pay them to roll out there with a crash cart. All this is stuff gnu/linux does for free and has for over 20 years. And I don't even mean free as in cost, I mean free as in no ripping your hair out. I'm not talking about cost at all. It's just built in and the default setup is (mostly) done the right way, such that many linux admins don't even know the best practices they're following. This was an excessively long post. It's not you. It's years of pent-up frustration at an entire industry that seems to relish doing things the hard and insecure way. Even though I get $$$ cleaning it up, it still keeps me ranting on forums after a couple of decades in the business. On the good side of microsoft, windows 8 is a home run. visual studio 2012 is rad. mvc4 (actually microsoft finally realizing that HTTP is stateless &lt;gasp!&gt;) is amazing. There are some things they are doing really well right now, but still some other basic fundamental problems - problems that were solved years ago on other platforms - but they somehow don't get it. Also to be fair, if you have a 50+ server farm, there are utilities and support options from some of the tier 1 vendors that make a lot of this easier. And if you spend the time to learn powershell, *some* of this might be a little better. But it all leaves me scratching my head as to why they have to make it so hard. /endrant_and_have_a_nice_day.
I hear you on the tool side. At my last job, we wrote our own in-house deployment tool. It handled bundling and targeting our various swimlanes. Not as elegant as octopus, just a lot of p/invoke stuff on target servers to handle installs. Still, it was all automated and sectioned off so us dirty developers couldn't directly do prod deployments. Still, while it's not Puppet or Chef, it's not bad. On the sql server stuff... The two common approaches for SQL Server recovery models are full or simple (they also support bulk-logged). As a rule, prod should be full recovery mode unless there's a compelling reason to do otherwise. I'm guessing you're in full mode since you mentioned tons of log files ;) The maintenance picture did get a lot better (read, less reason to buy expensive third-party stuff) with 2008 (or maybe it was 2008 r2).... but I think some of this has been in place since 2005 at least. You can set up maintenance plans (via management studio or command line) and one option for the maintenance plan is rolling file cleanup. We do rolling 7 day backups. I kick off a full at midnight and a differential at noon. We do hourly log backups. This is for a fairly low-key operation... obviously things get more interesting when you're doing active-active clusters with log shipping. But, for a simple environment, this approach is pretty straightforward. So far, knock on wood, the maintenance jobs haven't failed to keep things tidy. If I can lend an ear on anything, lemme know. My wife used to be a sql server dba at a fortune 500 and I like to rile her up now and then.
Maybe this has some starting points for you: http://stackoverflow.com/questions/10048333/capture-visual-output-of-a-directx-application-even-in-background http://spazzarama.com/2009/02/07/screencapture-with-direct3d/
Also from SO: http://stackoverflow.com/questions/397754/record-video-of-screen-using-net-technologies
Both ReadAndValidateName and ReadAndValidatePrice need a return type of bool: private bool ReadAndValidateName... Good luck :)
If this is C# homework I'm very confused as to how this is teaching *good* practice. So quickly start, out params. When you declare a parameter in a method to be an out, it means that a value will be returned in it. This means before you can ever return you need to be sure it has been set. ie: private void Foo(out int bar) { return; // illegal because bar has not been set. } So if your going to use a method called ReadAndValidateName in an if statement, you can't declare string name as the argument, it doesn't make sense. Are you wanting that method to 'fill' the variable with data? If so, use the out keyword when invoking it. Like: if (ReadAndValidateName(out name) &amp;&amp; ReadAndValidatePrice(out price)) That instructs the compiler to be cool about the fact the method wants to modify your local variable.
does your ReadAndValidateName and ReadAndValidatePrice not require both inputs? i.e. out string name, out double price? I believe that will get rid of your Method must have a return type error
There are a few errors in your code. Let's start with the simple ones. your two ReadAndValidateName and Price methods don't have a return type. Methods always need a return type, or void if you don't want to return anything. Since you're returning a boolean, put bool before the name. There's also a ; behind your if check in ReadAndValidatePrice. And finally, when calling a method, you can't specify the classes of the parameters when giving the parameters. if (ReadAndValidateName(string name) &amp;&amp; ReadAndValidatePrice(double price)) won't work. Remove string and double, and it should be fine. The same is in your price method. Now, these issues are pretty common. Even I make them sometimes :D so don't worry about them, remember them and after a while it'll only take a few seconds to figure out what the problem is. But that doesn't solve all the errors. There's still a few issues with your out parameters. The problem is, I don't know what your assignment is and how far it'll go. But making a few assumptions, your ReadAndValidateInput method isn't doing what I expect it to be doing. I assume that you want to call it with two parameters, to validate the name and the price given. However, the parameters have the *out* keyword in front of them, meaning *the method itself will set the values, not the caller*. It's sort of like additional return types stuffed in parameters. You can't call it with your own name and price that you want to validate. So get rid of the out keywords and continue from there. Or take a good look at what you want to accomplish, and redesign your validator. You should only use the out and ref (similar to out, but you can supply a value as well) keywords if you really have to, which isn't very often. So just avoid them for now.
Thanks for the links. I should have checked SO first.
&gt; but is it as simple as taking a screenshot every 1/60th of a second, storing it along with the audio, and then converting to lossless video? Yes. But is it easy? Not by a long shot. 10 seconds of uncompressed 1080p video at 60fps is ~3.5GB. Just writing that to disk is impossible using a traditional hard disk - you'd need something with huge storage space that's capable of writing at &gt;350MB/s. If you choose to compress in real-time, then it's a very fine balance between performance and compression ratio. The more you compress the video, the more CPU power it takes. But at the minimum, you have to compress enough that you get the data stream down below ~80MB/s, otherwise your disk can't handle it. FRAPS handled this by writing their own custom lossless video codec. It was designed for very fast compression of RGB video streams. Other lossless codecs, like huffyuv, typically convert the video to YUV colorspace before compression which much easier to compress but is technically not lossless. And this is just the video/audio capture portion of it. Just getting the frames out of the application is hard enough - you need to hook DirectX (and all the various versions of it) and capture the backbuffer every frame. You're also going to run into a million and a half compatibility issues with this - injecting code into a game's renderer is inevitably going to break a ton of games. It's probably worth noting that 1080p at 60fps on a commodity PC is a difficult task even for FRAPS - and this is after a decade of experience and active development of FRAPS.
Ah there you go. Thanks for the this. I'll look into all sorts of codecs then, because I doubt FRAPS open sourced theirs.
Thank you all, upvotes for everyone! I think it helped me enough to let me do the rest on my own. Thanks again!
Not really answering your question but I'm curious as to why you use fraps instead of dxtory which provides per application settings, multiple audio streams, zero performance loss (with proper setup). Do you want more customization than that?
I never really looked into my options, only chose FRAPS because I've been familiar with it's brand for a while. But I'm also not really serious about this sort of thing, purely curious. I was more interested in creating something of my own, not invented here, you know?
I understand where you're coming from and hey you may just create the next big thing (even if it is private). It pays to be curious. I used fraps for fps games a long time ago, it was great then. I simply suggested you look into dxtory to get an idea of what's possible. It's leaps n bounds better in terms of performance. Google how dxtory fundamentally works to see why. It might give you an idea on how to go about making that program.
Thanks, I'll have to check it out.
2nd Reddit post, 1st to CSharp, and first post to a personal C# blog I'm trying to start.
I liked it! It was interesting and concise. Thanks.
Oh cool. This might be closer to what I was looking for with Logging in general. 
IIRC, it's a VS 2012 feature, not a framework feature. It should work on any target framework &gt; 2.0 as long as you're using VS 2012. Also, I would assume that since it's resolved at compile time, it's immune to the effects of inlining but can any one confirm?
I just tested in VS2012 with my .NET 4.0 app. It didn't work. I included System.Runtime.CompilerServices, but couldn't resolve CallerMemberNameAttribute. So it looks like it's probably a .NET 4.5 thing, and not a VS2012 thing. 
Ah, good to know. Maybe it's the await/async stuff then. I know it's one of the new features that showed up with .net 4.5 and VS 2012 but I don't recall which one.
async/await definitely requires .NET 4.5.
Bah. Well there's *something* out there that's a VS feature rather than a .net feature. I swear it was some language feature of C#. Or maybe I'm just imagining all of it because I can't find shit about anything like that now.
Whilst its a compiler trick, the compiler when set to target lower framework versions won't insert it, so you end up with an optional parameter just set to default. However I really would say that disabling in-lining for logging suggests the approach of logging is wrong. It might be better to look if you can use an AOP driven paradigm. You can often replace the need for calling method by use of child containers from the IoC framework you use. Alternatively have a look at semantic logging. I'm not sure why it's better, having not used it. But the name. *Semantic Logging*. Isn't that just a sunset on a mountain lake? http://channel9.msdn.com/posts/Introducing-Semantic-Logging
Okay, been struggling with this all day. I'm trying to make a windows form and my validator always fails to validate. I get no errors, but it obviously doesn't work. private bool ReadAndValidatePrice(string priceString, double price) //Makes sure the number is positive. { if (InputUtility.GetDouble(priceString, out price)) { return true; } else { MessageBox.Show("Failed to validate price!"); return false; } } Basically, it's supposed to take a string (from a text field in the form), perform a tryparse to make it a double and report if it was successful or not. It always fails. Here's the method it's calling: public static bool GetDouble(string stringToConvert, out double doubleOutValue) //Convert a string to a double { if (double.TryParse(stringToConvert, out doubleOutValue) &amp;&amp; doubleOutValue &gt;= 0) return true; else return false; } Again, I hope this isn't too much to ask. Thanks in advance!
This is exactly what I came here to say.
I hope you feel vindicated!
The article does mention that larger, more complicated things are better off not using this, but other than that this is a pretty nifty solution, that is much smaller (in terms of relevant code, since the class is a write once, use for many circumstances thing, so the code per use is very tiny). The actual class is pretty clear, and perfectly matches the design of any transactional logic designed. You simply write the code, and where you'd normally have //do stuff here you instead have yield return null;//execute the code in the scope of the using statement Which is pretty clear with the additional comment. Pretty much the only thing that kills it is that the user must explicitly write .AsDisposable() (luckily it's a compiler error if the programmer doesn't). This is only here because C# doesn't support implicitly converting an interface to an object (and probably for good reason, but it would be useful in this instance). Also if the original class is really that difficult to comprehend, then you're not thinking in C#, and don't understand enumerables that well. The class is also way more bloated than it could be, since you can change it to remove m_enumerable, m_result, and their dependencies, because they aren't used. Then it becomes even more straightforward, and anyone who understands IDisposable and enumerations should be able to figure it out (and if they can't, then they shouldn't be working on those sections of the code anyways, because IDisposable is required anyways, and enumerations are a pretty basic thing in C#)
He said $85k after taxes. Not sure why he decided to word it so confusingly, but he's actually getting at least $100k in terms of salary.
You are doing this using Depth First Search, which is not a problem in and of itself, but it is not at all well suited to this sort of problem since this probably is looking for the shortest solution and has an easy heuristic (looking for the shortest solution generally means you should use BFS, and easy heuristic means you should use A*). You're problem however is that you're recursion is not doing what you think it is doing. When you find a match, you're recursion immediately returns without undoing the current move, which completely messes it up, and basically makes the search end WAY early. If you fix that so it undoes the current move, and decreases the move counter you'll get the right answer. It'll also take forever because it needs to evaluate at least 3^20 different paths (which is a very large number). There is an optimization you can do to make it faster that's quite simple, and that's changing the if (SolutionCounter &lt; maxMoves) to if (SolutionCounter &lt; bestSolution) (of course setting bestSolution to equal maxMoves at the start). This will stop the program from evaluating any paths that are worse than any it already found, and will give you a fully working, and fast (for this input) program. If you want to go advanced (and I might suggest against doing this until you truly understand recursion and DFS), you could use BFS or even A*. Basically BFS uses a queue instead of a stack (if you don't understand those concepts, then don't try to use BFS, or A*), and therefore evaluates all the paths of length 1 first, then all the paths of length 2 etc. This means the first solution it finds WILL be the best solution, and the program will never evaluate paths longer than the best solution, (whereas with DFS it will evaluate paths up to the maximum length, and without a maximum length may stack overflow). A* is basically BFS on steroids. It looks at the path which has the lowest cost, the cost being a combination of how many moves it will be, and guess of how many more moves there are. The guess must always be optimistic in that there must not be a solution which takes less then the guessed number of moves. If you truly understand DFS and BFS then you should see that this doesn't affect the solution, but rather affects only the order in which paths are evaluated (and it'll evaluate the paths which seem most likely first). If you can't figure out why this is, then again, don't try to use this method until you understand DFS and BFS and path-finding in general more. Now if you do understand all you need to do is come up with an optimistic guessing algorithm. For this puzzle you can see that there's no way that the board can be solved faster than the biggest difference between the clocks (like if there's a clock that's 3, and another that's 9, it must take at least 2 moves). This means you can evaluate "almost solved" boards before you evaluate others. With this particular example, the overhead of the heuristic and sorting the options could hurt more than using the results of that evaluation could help, but it's easy to see how in certain circumstances this would help ALOT.
Thanks, allot. I understand the general idea behind BFS and DFS algorithms, but I've never implemented either. And as you know, implementing an algorithm for the first time is harder than understanding one. I'm going to get this one to work and read a little up on A* and BFS and try to implement it with a BFS. Thanks again ^^.
How could i have missed that, reversing the clock after finding the right answer. And as regarding to the moves, it does change up, but it does move 1 ten times before using move 2. On a side note, adding the reverseClock() and solutioncounter-- to the code where it finds a matching clock, fixed it. Now all that's left is rewriting it with BFS or A* like you 2 suggested. Thank you.
Good I'm glad you understand DFS and BFS. Since it's fixed now, I'd suggest as an experiment reworking your code so you can implement BFS. First of all, you should pass in the counter and a copy of the clock, rather than using a global value. Yes this will make it slightly more inefficient, but it also makes the solution more pure. Once you do that then you can switch the recursion into using a loop and a stack like so: void Recursion(object arg1, object arg2, object arg3) { //do stuff Recursion(newArg1,newArg2,newArg3); } into: void Loop() { Stack&lt;Tuple&lt;object,object,object&gt;&gt; stack; while(true) { var args = stack.Pop() //do stuff stack.push(newArgs); } } Once you do this then you'll have basically a more pure version of DFS. Then it's trivial to convert the algorithm into BFS, it essentially just requires converting the stack to a queue, and returning instantly when you find a solution instead of continuing to search. From BFS to A* you'll need to add a 4th value to the tuple, which is your guess of how many moves there are left, and convert the queue to a list, sorting the list by a combination of how many moves are left+ how many moves it's taken. If you really want to get into it you could even optimize that further by using a priority queue.
Allright, I'm understanding where you are going with this. Thanks for the help again.
what will the internship be focused on and what areas do you feel you're lacking right now? The Pro C# book looks ok but it tries to cover a lot of ground. The C# in a nutshell book looks a bit better assuming you don't need an overview of XAML and asp.net (and I'd suggest there are better dedicated books for that) Jon Skeet has an updated C# in Depth coming out soon that might be another great option.
I have the C# 4.0 in a Nutshell book. It's an excellent reference. In fact, of all the books I have it's the one I use most often.
Let me preface with : I'm not a hardcore .NET pedant but.. &gt;reflection This doesn't seem like reflection. You used nothing from System.Reflection. StackFrame is in System.Diagnostics and probably just uses a stack pointer calculation to get stack information. Reflection is more type and assembly information (metadata querying). Reflection is getting information about compiled types/assemblies; it has nothing to do with *execution* (and is appropriately in the Diagnostics namespace which has lots to do with program execution).
I just use Google.
I have both books. Read C# 5.0 in a Nutshell. It's especially good if you come from a java/c++ background. It doesn't so much teach the concept of programming just lists the features in order with an explanation and example. It's short and to the point and really does have everything. Don't bother with the second book. It doesnt teach c# just .net The first book already contains everything useful eg collections, threads, linq even XML, networking etc that the second book has however the second book will go on to touch on the frameworks like asp.net, wpf, wcf etc but won't cover it extensively or any better than msdn could. You're best just to grab the first book and read the more extensive documentation online or if you want to _go pro_ grab a book on that particular topic eg a book solely on asp.net or silverlight but have a crack online first. 
[Safari Books Online](http://www.safaribooksonline.com/)
The "Essential C#" book is also quite good. The current version is written by Mark Michaelis, a great Microsoft MVP and Eric Lippert who until recently was both a member of the C# compiler team and the C# design team.
From my experience people that like MVC usually have a deeper understanding of how the web works. MVC, at least how it's implemented in ASP.Net, is a fairly thin abstraction over the http protocol and in such gives you much more control. I also disagree with TheAnimus' analysts of MVC on a few points. 1.) Views do not contain state by default and there primary function is to only create the presentation associated with the bound model. 2.) Models only become more complex if you want them to be. I have used MVC for a few projects now and my model classes are never anything more then simple data containers. 3.) MVC was designed with things like TDD in mind and is quite testable. 4.) If you are using the session in MVC you are doing it wrong. 
CLR via C# by Richter is an amazing book and opened my eyes to C# in some amazing ways. It's tough handle sometimes, but otherwise an amazing book.
I don't think I'd recommend in Depth as a first book to someone looking to pick up C#
I'm not positive as I haven't gotten quite all of the details yet, but I know they use C#. I am just looking to get back into the .NET environment because I haven't used VB in about 2 years. I've been meaning to pick up C#, and I just really need a pick up on the syntax and some features.
I'll recommend Essential C# 5.0. I haven't actually read it, but if you've read Fabulous Adventures in Coding, then you know that Eric Lippert knows everything there is to know about C#, and he's also a really good writer.
You could always stop obsessing about which book to purchase, start a project, and write some fucking code using Google as a reference. You're the kid who goes to start studying for an exam and ends up tidying his room and alphabetizing his DVD collection. Also the DVDs are mostly gay porn.
Are there similar books for other languages? I know the basic concepts of programming, but would need an introduction to the language specifics (syntax, or something like pointers in C++)
Correct. **C# in a Nutshell** is more like a reference manual, a very good one. **Essential C#** is more like a study of all C# features and how to make a better use of them. Mostly it's the style of presentation, but both books are great, in fact I own both and a few others like **Effective C#**, **Functional Programming in C#** and **CLR via C#**.
I will recommend the C# Yellow book by Rob Miles, its free. He also has a few other books available on amazon. You can get the free one here http://www.robmiles.com/c-yellow-book/ I had the pleasure of being one of his students while at university and he knows his stuff, although he should really as he is an MVP.
Don't get any nutshell series books. They're gay. Get CLR via C# books from Richter.
&gt; Microsoft added several new framework components to help make LINQ a reality. Iterators and Lambda Expressions both existed far before LINQ did.
Quick note: // Gets first order in list that is invalid, or throws if can't find one. var firstInvalidOrNull = orders.FirstOrDefault(o =&gt; !o.IsValid); That comment should read "Returns the first order in list that is invalid, or 'null' if it can't find one.
An article on LINQ without mentioning functional languages? Understanding the basic concepts of functional languages really illuminates the reasoning behind LINQ.
First, I knew almost nothing of LINQ before I read this, so thanks for that. But having heard so much high praise for the concept I was a bit underwhelmed at how powerful the demonstration was. Where in the past I've used iterators, and now I can see myself using enumerators, the article hasn't shown me why people are so enamored with it. I know why redundant queries can be undesirable. Can anyone explain why deferred queries would be preferable to say, an async/await? edit: Let's say you have a potentially huge query on the scale of *hours* of processing, does LINQ abstract an easy button to execute only a small necessary part of the query and without ever touching the rest? Or would the whole query be processed anyway? I thought there was a parallel LINQ?
Every time i try to use .net with something non-microsoft i feel pain.
&gt; The "late-bound" type in C# is called dynamic, and you shouldn't ever &gt;use it unless you're doing interop with scripting languages, or some &gt;special corner cases where you really know what you're doing. Given Reddit is coded in a language using dynamic types, that's probably a harsh overstatement. :-)
&gt;When you feel like Delphi has been taken as far as it is going to go That would be when Barry Kelly left. &gt;C# is the next logical step For me it's been python, which I consider the new Turbo Pascal :-) along with Qt. But yes, definitely one or the other. 
I gather linq to sql is dead anyway as in its not being developed further.
It's all or nothing in terms of processing, though if the "small necessary" part of the query comes first it's easy to preprocess (and leave the rest for later, if necessary). For example: var transactions = new List&lt;Transaction&gt;(); // Fill with 1,000,000 transactions randomly ordered. var highRollers = transactions .Where(t =&gt; t.Cost &gt; 500) .Select(t =&gt; t.User); // say it filters out 100,000 transactions, which still leaves a lot behind. // Note that highRollers has not "executed" the Where or Select yet. if(needsOrdering) { highRollers.OrderBy(p =&gt; p.Name); } return highRollers.ToList(); // This executes the query in *one* transaction, whether it needs ordering or not. If you need to prematurely execute a partial query (say to make sure the expensive part of the query is executed before heading into a section of code that could block other threads), you can call .ToList() or .ToArray() to force execution, then continue with LINQ-to-Objects as if nothing changed.
Since you're a student, I recommend you steal both. Eh, buy the Nutshell book. I have it and it's a great reference. You already know other languages, including VB (which I assume is VB.Net), so C# should be a breeze.
&gt; "Returns the first order in list that is invalid, or the default value if it can't find one." FTFY
Oddly enough, F#'s type provider for SQL server is nothing like LINQ. Which contributes to its lack of popularity, if you asked me.
It's a reference type so the default is null. I guess you're both correct?
http://stackoverflow.com/questions/9421312/jsonp-with-asp-net-web-api
Jsonp only supports get
I got this working without the links above. I was watching on fiddler, it was sending options, and 405 error result, then returning the data in a second get request. So I tried to implement this cors code but I was getting red lines in some of my code in VS2012 I ended up getting it to work by messing with my Ajax call. Then had an issue with IE and found a jQuery plug in to make that work. I however, would like to make this work, so I will post my code on Monday and the issues I have in more detail when I get on my dev machine. Thanks for the reply. 
Lol at username
This is what worked for me (see solution 2): http://patelshailesh.com/index.php/cross-domain-asp-net-web-api-call-using-ajax Now when you're testing this out, make sure you're NOT using localhost (or 127.0.0.1 etc) as the host name for any of the requests! That will never work of course (for security reasons).
Post your question on stackoverflow. inb4 downmod
That dude is trolling. 
I don't think he was. Someone got on the video and basically said he was an idiot for saying that, and he defended it pretty vehemently.
Honestly if he wasn't trolling he was really making a fool of himself... C# can be used as a scripting language, as well as a compiled language; this is a very big feature of C#. Scripting languages don't need to be compiled, so for example LUA, or Javascript. They are interpreted directly by the operating system/application/game; that's why for example you can run a console when coding in certain python varieties or javascript, where as in languages like C or Java you cannot. They are compiled languages and need to be pre-processed and compiled before they can be executed by the computer. As for why he said it, you can be a professional game developer and still not understand these things; although why you'd be so opinionated about something you aren't sure about is beyond me.
It's fucking Destiny.. (I play sc2 so I know him very well. I used to watch his stream all of the time.) This guy is 100% correct. It's just destiny Trolling. Just to add a tiny bit of value here... I see a scripting language as any non-compiled language. So if it produces a binary file that would make it a programming language. Think wow addons, they are written in LUA, a scripting language that the wow client reads. Javascript is a scripting language your browser reads. Mirc scripts are read by Mirc... Second life has it's own scripting language that it reads. C# creates exe's that run on their own.
It wasn't Destiny saying it. It was someone else in the RaidCall chat. Destiny actually said, "Wait, isn't C# a full language?" or something of that sort after the guy made this claim.
C# isn't a scripting language until recently. They've added a new fancy feature called Roslyn. More informatino on Roslyn: http://msdn.microsoft.com/en-us/vstudio/roslyn.aspx This has given C# scripting support. However in this video, the guy is just trolling hard.
oh, well I never trust anyone in a stream chat. That's actually somehow worse than Destiny himself ;p
heheehe
First of all the guy is probably not a developer of any kind, but some loudmouth idiot without a clue. Se there's your answer. :D
I wasn't saying this was a heinous crime. I just wanted to know the truth since there was so much debate about it.
The guy who called him out shouldve calmed down first.
tl;dr validation attributes
Something i wondered about domain object and viewmodels: If I have two domain object: A -string text -int count B -DateTime date -int replies and I need to serve both in a view. Would I then make a ViewModel like this: AandBViewModel -A a -B b or like this: AandBViewModel -string text - int count -Datetime date -int replies If I have a view where I need to present many domain objects, i'm going to create a huge viewmodel with the second approach. It seems like a lot of manual labor.
Fair enough but there are a ton of articles telling you to put them in your domain objects.. Even several from Microsoft. Also, the mind tends to wander when there's a lot of manual stuff you have to do in *every* page. 
It is. Read the article :). The point is that I would not use them on entity framework for the purpose of ASP.NET MVC validation because you lose a ton of control and end up with long requests for validation/less control on the clientside/noisy code. 
I love MVC, but I hate the lack os consistency. ASP.NET MVC tutorials from MS is filled with bad examples. Every book has a different approach. Trying to learn the right way from SO is impossible. I thought generic repositories where brilliant, untill I encountered "the other camp", where I suddenly could see all the flaws of generic repositories. Basically I feel that ASP.NET MVC is so powerfull, that even if I choose the wrong way, I almost end up with very readable and flexible code. But still, I would some clear cut answers on how viewmodels should be implemented, how my stance should be on a servicelayer, generic repositories and where in gods name the databasecontext should be created and disposed of. Especially those damn repositories. I have seen so many different ways of implementing delegates and generic repositories, that I simply choose to do it old school in my current project. No generic repositories, no service layer and no delegates. Just FetchById, FetchByName, FetchByCompanyId and other mindnumbing similar stuff.
That I'm well aware of. Just clarifying the tl;dr of the posted article.
Ouch.
Yeah, it's not the prettiest thing in the world. Keeps me from repeating a lot of code in viewmodels if I dont already have to though.
He's an idiot. 
And if you use llvm you can use C or C++ as scripting languages. Ive even dynamically loaded java to use for scripting. 
There are exceptions ofcourse, using various tools, but I think my point still stands :P
He's obviously trolling. Did you miss the laugh at the end? 
I never said he wasn't I was just explaining why he was wrong in case people wanted actual information.
ignore the moron and move on..
The guy on the raid-call comes across as an undergrad. Dude has literally no clue what he's talking about.
&gt; Control.FromHandle( handle ).Controls.Add( b ); // this gives a null pointer exception so idk what the hell is wrong with my handle. I've written some test code and your approach should work so something went wrong along the way. Passing in a bad handle to `FromHandle` will return a null object which then will throw a Null*Reference*Exception when you call `Controls`. I tested this by passing in `(IntPtr)null` into `FromHandle`. I'd suggest looking into `Game.Window.Handle`. Your problem is probably somewhere there.
thanks man, was curious myself as i do quite a bit of scripting for my work, but very little actual bottom-up programming. 
There is a lot of talk about using stuff like AutoMapper to flatten domain objects into view models. This seems fairly straightforward to me. I do something similar in a small MVC app I made. The question I see is, what do you do with post actions? You need to somehow 'un'-flatten the view model back into the domain object and save the changes? The way I do it now is to get an instance of the domain object in the post method. I then manually change the properties according to the posted view model and save the domain object back to the database. I feel like I must be missing somthing here as it seems like it is quite cumbersome.
This guy is a video game streamer, not at all a programmer ^^. Move on.
&gt;The question I see is, what do you do with post actions? You need to somehow 'un'-flatten the view model back into the domain object and save the changes? Automapper supports complex mappings! You can map to crazy object hierarchies that may have been created by entity framework or other code generation (when going from flat object -&gt; hierarchical) . It's not as difficult as it sounds by the way, they have a fluent interface for defining mapping strategies (but also a way to do it manually as a separate class) Hope this helps.
Imagine you have a domain object with fifty properties of mixed type. It is a completely flat object with no complex property types. I want to have a form where I can edit property 40-50 of these properties. I create a view model that only contains the 10 properties that I want to edit. Automapper can map from my source domain object to the view model here. What happens when I want to do the reverse of this? When the user posts the form, the view model only contains the 10 properties that I extracted? How can I put these properties back into the domain object without touching the other properties. The way I have solved this right now is that I have a small reflection class that simply does d.propertyXA = vm.propertyXA; d.propertyXB = vm.propertyXB; and so on, by using rtti to compare property names of the two objects. So when I post an updated domain objects, what I do is that I first get a complete domain object from the repository. I then use the reflection class to copy the view model unto the domain object, which I then finally save back. If I use automapper to create a domain object, what will happen to the fields that are not in the view model? Will they be 0 or null or what? What about the index field of the domain object? This is not part of the view model either, since the form doesn't need to know about it it just needs to know about the properties that can be changed? (I can infer the index by other means.) What happens if I save a domain object that is only partially filled out? Will it delete the database fields that have not been filled out? Lots of unanswered questions? Is this the solution: http://stackoverflow.com/questions/2374689/automapper-update-property-values-without-creating-a-new-object 
Oh sorry, it's a NullReferenceException i was getting. I put some debug prints in my code and printed out the window object as well as the IntPtr for the handle. Neither of them are null! System.Diagnostics.Debug.Write( Game.Window.ToString() ) result: Microsoft.Xna.Framework.OpenTKGameWindow System.Diagnostics.Debug.Write( Game.Window.Handle.ToString() ) result: 394320 Am i misusing Control.FromHandle? Maybe part of the problem is that the handle is for an object that doesn't have a "Controls" member? I'm not sure how else to go about this since Game.Window.Controls does not exist. The only useful member of the window object is its handle. 
&gt; How can I put these properties back into the domain object without touching the other properties. You've assumed automapper needs all properties to be there to be mapped.. Automapper leaves other properties on the target alone by default. Only source properties are even attempted to be mapped (only what you put in your ViewModel) It would be madness if you added a new property to your database and your web app kept overwriting it. It would be like juggling a million dependencies every time you made a change. If it doesn't exist in the source, it's never mapped to the target. Didn't read the rest of your reply after I got to that part but I'm sure that clears up your consternation.
&gt; Maybe part of the problem is that the handle is for an object that doesn't have a "Controls" member? Yeah, that's most probably the problem. To confirm change this: Control.FromHandle( handle ).Controls.Add( b ); into var control = Control.FromHandle( handle ); var controls = control.Controls controls.Add( b ); This will clarify which statement is actually throwing the NullReferenceException. The whole time I was focused on the handle possibly being null cause I didn't expect you were using an object that doesn't have a Controls member. Can you share more of your code? If you can't release the current stuff your working on, create a new test project that present that problem at hand.
But then you need to feed it a ready made object to map to, like in the link, right?
Yes but that ready made object would be from your repository. var order = repository. Mapper.Map(BankOrderViewModel, BankOrder); would fill BankOrder with the new values from your POST (as long as you set the mapping up) If it's a new value, Mapper.Map&lt;BankOrder&gt;(BankOrderViewModel) will actually return you a new Bank order that you could attach to your repo. It has a single type parameter and double type parameter overload.
I will try it out when I get time.
Control control = Control.FromHandle( handle ); System.Diagnostics.Debug.WriteLine( ( control == null ).ToString() ); That code prints 'true'. So i guess i can't get a control object from this handle (probably because it's an OpenTKGameWindow). I guess MonoGame doesn't quite work with winforms completely (yet). I messaged one of the guys working on MonoGame and he said that WPF and Winforms will be getting support soon. 
I would advise first to specify very clearly every steps of your program and then ask questions when you are stuck. When you have a question first ask google, as a beginner most of your questions will already be answered, if you cannot find a good answer head over to stackoverflow.com, your deepest questions will be answered here. Good Luck !!
Exactly ! It should only be used when you have a good grasp of the problem.
Depressing read for those of us who do deal with this all the time but know that they'll never be able to convince management to care. *sigh*
General*
Idk his to show this question is unansweared via mobile.
I enjoyed Head First C#.
If you want a book this is a good one that will push you and have you doing stuff pretty quickly (with GUIs).
But how is that going to let me master it? I can see Doug that after I learn Alittle bit about c# as I have no prior programming experiance tbh.
To learn: [LesterFreamon's comment](http://www.reddit.com/r/csharp/comments/1apcmq/best_book_to_learn_c_on/c8ziris) To understand: http://www.amazon.com/C-Depth-Jon-Skeet/dp/161729134X To master: http://www.amazon.com/CLR-via-Microsoft-Developer-Reference/dp/0735667454 
Oh alright thank you! And BTW do you think c# would be a good first langue to start out on?
Yep, C# has lots of job opportunities and as we move forward with technology that number is only growing. It is a high level language so you can make really cool programs without having to re-write a bunch of core functionality for example, you don't have to write a button you can just use a button that Microsoft created and tweak it as you need. Which language you learn isn't really a big deal because while you are learning a specific language you are also learning how to program in general. In a little while you will be able to look at a problem and say "I can solve this with 2 if statements and a for loop." All you have to do to write this in a language you don't know is google how to write an if statement and for loop in that language and you are good to go. It's not like re-learning to program it's just learning what word to use in place of the one's you already know and a lot of the time they are almost the same (especially if it's a C based language which a lot are, I guess that is another reason all in it's own). Good luck buddy :)
U WOT M8?
i agree there are a few tutorial based books i found usefull to get started but once you get started best thing to do is just start coding and google or SO when you get stuck 
The joke here is that Unity (which he pimps as being awesome not 2 minutes before) also uses C# x)
Here are 200 video tutorials provided by thenewboston.org http://thenewboston.org/list.php?cat=15
Scripting languages aren't programming languages? What? That makes no sense. If you write javascript to the *n*th degree, you're a programmer, albeit one who uses javascript. The fact that it's a scripting language just means it's interpreted at runtime. It does not detract from it being a programming language. Also, compilers don't always compile to binary. C# compiles into MSIL, not binary, and yet that is still a compiled executable. It does not, however, run on its own, it requires the CLR to run it. &gt; So if it produces a binary file that would make it a programming language. There is so much wrong about this that I don't even know where to start. I'm trying not to sound like a dick right now, but for your own benefit, I would recommend reading a little bit more into how the entire process works, so you can understand it a little better *under the hood*.
If you're looking for a good book, consider the O'Reilly stuff. If you're looking to start programming in C# immediately, try Google. If you are looking to pop out WinForm GUIs, and be able to program intelligently in C#, find a programmer who already programs in C#, and learn from them. Not really any different from any other language, really, in that you learn that there is simply 'a way we do things because it works {fast, best, etc.} when using this language}.' Not that you can't try and write code the way a Python programmer would in C#, or a C programmer would in C#...you'll get pretty far...but other C# programmers will look at you funny ("So you went ahead and created your own string class...hmm."). 
[C# Yellow Book by Rob Miles](http://www.csharpcourse.com/) its free.
I think I found a subreddit that is actually helpful and doesn't just troll, thanks guys.
Personally learning online is the best way. You have a vast amount of resources and source code. You have everything you need :) I do however own a book called "Programming C# 4.0" which has been my bible / Dictionary&lt;C#&gt;. It's awesome for finding out detailed descriptions and explains it nice! (Fell like a damn sales man) http://shop.oreilly.com/product/9780596159849.do
By o'reily? Yeah my girlfriend just bought me one yesterday for a different langue. Its really good I'd say.
CLR via C# got me hired at my job 7 years ago. As an art major out of college that is saying a lot. Richter is an awesome tech writer and his is one of the few tech books that I've read cover to cover and still reference. 
This. The only books I've found worth buying are those on development methods and principles, and the occasional updated c# cookbook.
That is a great advertisement of that [Octupus thing](http://octopusdeploy.com/). Sounds really interesting. But they should promote that [OctoPack](https://github.com/OctopusDeploy/OctoPack) thing more, because that one really solves the problem ... If I buy that first thing, Octopus Deploy.
Thanks for fact checking and throwing the topic of this conversation out of the window. I miss stated about C# creating a binary yes. I thought it was compiled to MSIL then to a binary but apparently I was wrong there. Yes writing in scripting / markup languages ect. is still programming but the question here is asking if C# is a scripting language or programming language and I was trying to come up with a way to differentiate. The original topic of this thread is going down a dark alley and I just went there with it.
This thread was in that dark alley way before I even arrived. I just tried to educate you and correct you so that you could learn more, and so that others reading it and wondering about it would not get the wrong impressions. It's not fact checking, you should *know* this stuff ordinarily. If you don't, you should learn it. It's basically what you learn in the first chapter of every C# programming book you will (or should) ever read. Sorry if I offended you with my corrections, but would you have rather been kept in the dark? Do you not feel as though you've learned something new?
no I don't because I knew that c# was rewritten into MSIL and that it ran on the CLR. I use VB.Net and am aware that both translate into MSIL so they are very similar even though people have long winded debates about C# vs. VB.Net. I also know that it requires the CLR to run otherwise we wouldn't have so much trouble porting C# apps to other platforms. I was just trying to relate to the question at hand and ended up misstating a couple of things. 
I get books in digital format nowadays. This allows me the use of a digital table of contents as well as search capabilities. I've found that books are great when you want to go more in depth on a certain topic. I can learn a ton in a short amount of time just by reading 1 chapter of a technical resource. While I can get that online through google and stackexchange, it can be awhile before I find an answer that's vetted highly enough to give me confidence in what I'm reading. Technical books on the other hand can benefit from having good editors. In short, I use google and stackexchange if I need a quick answer to a small problem but I'll dive into books/denser technical resources when I'm really curious about something and want to know the nuts and bolts about it.
This blog post almost seems biased towards WCF being better than Web Service. It gives no instances of best case use either. The security section bothered me the most where he mentions certificates being complicated and dismisses it as if it is an invalid security option. I feel like he either doesn't understand certificates or use them often, or he wouldn't have mentioned it as a 'complicated' aspect. Still decent in showing some of the biggest differences in rules between the two.
I don't think you'll be able to stop/start services on any box without being a privileged user of some sort (which a domain admin certainly would be). One other way to potentially solve this problem is to write a service that runs under a privileged account on the remote server which can stop services as needed. It would also need to listen on a TCP port for a command from your application to stop the service. Basically, you'd be building a service controller that runs as an admin and waits for commands from non-privileged users to control services. There is of course no security surrounding this, which is a major problem. You should seriously consider the security implications before doing this.
This is exactly what I was afraid of :( The user performing the service stop is an authorized user... I wish there was a way to capture the UAC request popup and display it in my application. You know, something like that. Im going to think about the elevated privis robot you discuss here. It might be more work than I can devote to this project. 
+1. If C# could be a girl, i would marry her, and have sex all day all night. 
UAC is (almost) specifically designed to stop you from doing things like this. Allowing software to screw with unrelated services and system-level stuff is a security nightmare, and UAC is specifically put there to stop it happening and tell the user "woah, somethings trying to screw with me, did you know about this? Because if not, we've got problems" If there was a way to do what you want, UAC would be pointless and every system would be riddled with viruses and malware like it was still the early 2000s
&gt;C++ (I wouldn't recommend anyone start with C++ but would be interested in hearing arguments for it). C++ doesn't force OOP, you can write in procedural style, in functional or in any other. So you can start learning programming without understanding of why you need to create a class for this. After understanding how to write functions and structures you can move to OOP without changing language. C++ has nothing between you and hardware. You can use raw pointer, raw memory allocation, etc. With this you can better understand how computer works.
I had read good reviews for the head first book but happened upon Microsoft Visual C# 2010 Step by Step thanks to a friend. I came from a Java background and this book was fantastic. Covered a huge amount of the language and didn't spend 30 pages explaining an if statement. Its concise and to the point and the authors give real world examples without rambling on and on. My reading attention span is quite low so I liked it because by the end of every page it had covered a new point. Note - it covers the language itself and some of visual studio. Anything GUI related you can find for free online so all you really need is a good grasp of the language itself so you can just learn from examples. Good luck :-) 
Yeah books along the lines of Effective C++ by Scott Myers (I'm fairly sure there're C# versions of these but unsure who wrote them) are worth having. Also Design and Evolution of C++ by Bjarne. These are great books to take you from intermediate to expert but won't help you starting out.
Ok, I'm doing it wrong then. I'm writing an admin console, I need to be able to control the state of services remotely on hundreds of machines; you're saying not just that it cant be done but that it shouldn't? What do you suggest?
StackOverflow.com
Your entire app must be elevated. I'm pretty sure you can use your applications manifest to prompt for elevated credentials when its started. This probably still mostly applies to windows 7+: http://msdn.microsoft.com/en-us/library/bb756973.aspx
On the service host, make a new Security Template via the MMC snap-in and modify the Access Control List to grant Start, stop and pause permissions. 1. winkey+r &gt; mmc 2. File &gt; Add or Remove Snap-ins 3. Click Security Templates, then click Add and OK 4. Navigate to System Services and find your service 5. Right click Properties and then Edit Security... The only other alternative, as PrivatePilot stated, is to build a separate artifact with elevated host privileges and use something like WCF to process start and stop requests. [Edit: Someone suggested that Nagios might be able to handle this and if that's the case it may be better than reinventing the wheel.]
Oh yeah, thats right you're trying to run things remotely. Id say your best bet is using a remote service to do it then like the other poster suggested. What you could do, is use the NSClient++ service (installed via GPO, it has a nice MSI file for gp install, and use GPP to copy the configuration ini) and use it to restart the services. NSClient++ is a windows service used by nagios and other monitoring software that does things like check cpu, memory, or anything else you want to write a small script for and reports back. That way you don't need to write something else... it listens on a port that you can issue it commands to run. So your front end software would communicate with it and it runs the remote commands. 
Ah ha, I will investigate... tyty
This might just work, thanks!
Not exactly nagios, but the client that runs on the monitored machines. It can be configured so that you specify an event to run instead of simply allowing it to run arbitrary commands. I'd write a script that used the service name as a parameter similar to the service check script and an action parameter start, stop, restart, then fill those in like a parameterized sql query.
On that note, check out the Enterprise Libraries... They come with some great tools for cryptography... And they're from Microsoft so everything should run OK. 
[oh boi](http://i.imgur.com/Z3RuDsO.jpg)
It's definitely not a scripting language and neither is Java. A scripting language is not compiled and requires a reader to run. C# runs off the .NET framework but is compiled into pure machine code. Java follows the same. Java uses the JRE and C# uses .NET but both are real languages. Not scripting languages. Lua and Javascript are scripting languages.
So you are running the application with admin privileges? I've written many enterprise applications that dealt with services and haven't had the same problem as long as the user was in domain admin and ran the application with admin privileges Edit: wait you said non domain admin... So these users are just admins locally on each machine but not domain admin? 
Yeah, as far as I know, you can only ask to elevate your app to local admin. But really, I wouldn't want to force it to elevate to domain admin as my userbase most certainly won't have access to domain admin creds. 
I'm currently about 800 pages through this book (done with the chapters about C#), and it has been very good so far: http://www.amazon.com/Pro-NET-Framework-Professional-Apress/dp/1430242337/ It does probably require some prior knowledge, which you have. It's succinct, but at the same time it covers pretty much everything, and it will also get you started with WPF, Web Development, etc. ("GUI stuff").
I've probably missed something obvious, but what is the difference between this and C#'s "lock" keyword?
This is probably slower and is nowhere near as tested as lock is. This is reinventing the wheel since the author doesn't seem to understand how lock works.
I don't get the impression that he doesn't understand how lock works. It looks like, instead of rethinking his architecture, he opted for reinventing lock. I'm willing to guess that this was to simply make it easier to work with an existing codebase.
...which is blatantly false. I don't understand why they could make that mistake, even the MSDN examples for lock use non-static instances, IIRC.
That's what made me assume it was inspired by frustrations with an existing codebase. You're probably right though. I was just trying to give him the benefit of the doubt.
&gt;its hard to write comprehensive unit tests for This is simply not true. Unit tests are easier to implement in MVC: &gt;A significant benefit of using the MVC pattern in ASP.NET is that you can easily implement unit tests for your Web application^1 ☼☼☼ &gt;hard to deliniate[sic] what is responsible for what This is also, blatantly false, and quite absurd. The entire reason for the conception of the MVC framework is that there are *distinct* responsibilities for each of the basic object types (Models, Views, and Controllers): &gt;The Model-View-Controller (MVC) pattern separates the modeling of the domain, the presentation, and the actions based on user input into three separate classes [Burbeck92]^2 ☼☼☼ &gt;The main problem with MVC is the seperation[sic] between the View and the Controller. Frequently the model becomes "hot", it knows far too much, and is no longer a model object at all, but a kind of ViewModel in MVVM lingo. The View becomes heavy as well, rather than just been a set of "Render XYZ at IJK" it holds state, implementation logic to actually change state. What you describe is not a problem of the MVC framework, but a problem of poor design and architecture. ViewModels can (and, in most cases *should*) be used in MVC framework: &gt;...the View template should receive information from the Controller. One common technique to be used for that purpose is the ViewModel pattern, which allows a Controller to package up all the information needed to generate the appropriate HTML response.^3 ☼☼☼ &gt;All these things are bad because they are not SOLID priniples[sic], or even more simply, they make TDD hard. This is another absurd claim. MVC makes TDD simpler: &gt;MVC was designed to enable testability without requiring dependencies on a Web server (IIS), on a database, or on external classes. (This is in contrast to unit tests for Web Forms pages, which require a Web server.)^4 ☼☼☼ If you prefer WebForms over MVC, that's fine. You can develop apps just fine using WebForms. But please do not spread misinformation simply because you do not fully understand the architecture. 1. http://msdn.microsoft.com/en-us/library/ff936235(v=vs.100).aspx 2. http://msdn.microsoft.com/en-us/library/ff649643.aspx 3. http://msdn.microsoft.com/en-us/vs2010trainingcourse_aspnetmvc3fundamentals_topic7.aspx 4. http://msdn.microsoft.com/en-us/library/ff847525(v=vs.100).aspx
[This one](http://www.amazon.com/The-Internet-Handy-Book-Form/dp/1906032009)
For me, there's two great books for C#: 1) C# Class Design is an excellent introduction to c sharp and how .NET works. It's a hidden gem of c sharp books in my opinion. http://www.amazon.com/Class-Design-Handbook-Effective-Classes/dp/1590592573/ 2) Once through that, C# in Depth is a great book for modern features of .NET http://www.amazon.com/Depth-Second-Edition-Jon-Skeet/dp/1935182471 Oh and to answer your specific question about network csharp books...I found this book highly recommended: http://www.webtropy.com/
C# in Depth by Jon Skeet... if you've programmed before, its a great book to show you the transition from old c# (1,2,3) to c# 4. Sure, you can learn on your own, but you might skip a lot of interesting updates and just stick with c# 2.0 and not even know it.
Wow, thanks for all the replies! I've been learning C# in school for about 3 years now so I know the language, but I don't really have any experience with programming real applications... Anyway, you've all been super helpful, so thanks to all of you, I really appreciate it.
Lets learn how to send an email from gmail using c#.
To say I'd be advocating WinForms over MVC for the reasons listed above would be a genuine sign of ignorance/stupidity. That is something worth being insulted over!
CLR via c#, then c# in depth by Jon skeet. And of course the programming language specification on msdn helps.
Destiny is a pro as fuck troller, trust me. I've been watching his stream for a couple of years.
Yep, the stack is not reliable. The 64 bit compiler is very aggressive in inlining functions.
Your post hits too close to home. But as a developer, you know what really gets me more than anything? How everything on windows takes FOREVER. Even on beefy hardware, try enabling a role or installing a feature or applying sp1 to visual studio, and have fun twiddling your thumbs (you're lucky if you don't have to reboot, too.) If you even get any kind of status, it's something inane and meaningless like "configuring components". The pain triples if you're setting up a fresh vm or something and you have to apply all updates. All the more frustrating when it's over a sluggish RDP connection that inexplicably takes 30+ seconds to connect even when you're on the same lan. Maybe some of this is fixable via diagnostics of some sort but I just....don't care anymore. I'll be over here with ssh and apt-get instead. And I also like C# a lot...
Doing anything over RDP managing servers is so wacky. "Hey I'm going to send you lots of rendering and bitmap info so we can make it harder for you to edit this configuration file." I really think someone was asleep at the wheel over there for a couple of decades. If I ever have the misfortune of managing a windows server, the first thing that happens is it gets cygwin + openssh. Visual studio only runs on a VM for me. I won't install it on my bare metal. I do love it dearly, but there are sooo many posts on the MS support forums with not-uncommon issues and the general response from the MVP/whatever guys is "Format hard drive, reinstall." Which basically means "We have no idea what's going on with this inter-dependency, circular dependency hell we've created, just nuke and pave." It's absolutely mindblowing how that is ever an acceptable solution, much less a common and preferred one. In fact, people will *brag* about it... "My machine is runnign so fast, just got a fresh format and install...." Now, to be fair, MS has to deal with this a good bit more than others because they have a fanatical backwards-compatibility mission. Apple is perfectly happy to tell their users that if their computer or OS is 3 years old to go screw themselves. And Apple users have always thanked them for the privilege. In Linux, you can just recompile whatever you need, nbd. Microsoft isn't afraid to go in a totally different direction when they feel like they need to, make up a completely new way of doing something, and then go on supporting the old way for the next 20 years. It's only in the last few years (64 bit OS's) that they've dropped support for 16 bit applications. So I finally have to run a VM to run a program I used in the early 90's, or just run it in DosBox. But I've got a buck that says I can still run the first Myst for Win32 on my hot-off-the-press copy of win8 x64. Microsoft has some smart dudes and chicks over there right now. I just wish they'd finish MinWin (get windows back down to a ~20 MB bootable footprint), implement a real POSIX interface, and quit pretending like the rest of the world doesn't exist. The old Ballmer-style management is terrified to cannibalize their own market share. But the new guard sees the light and is trimming the fat.
Dunno about Myst, but Riven works. It's quite crashy though. Your comment about pretending the outside world doesn't exist is so spot-on; it's what I was screaming in my head the couple of years I worked there (not in any of the interesting groups). A true POSIX layer (for ALL editions) would change everything. Anyway, I found this thread when googling for updates on mono+mvc4 and I'm going to try a couple real-world projects on it tomorrow for shits and grins. I've used mono extensively in the past (with postgres too) but not ASP.NET. There was lingering uncertainty around the fastcgi/mod_mono components about memory leaks and stability problems. Various unconfirmed reports. Got too nervous about putting those into production and went with Ruby+Sinatra instead.
If you use the C# 5 compiler to do C# 4, you can create the attributes yourself (in the right namespace) and it still works.
OMG, just filled my drawers. This is awesome
&gt; with respect to Unity its a scripting language phew, almost changed the title on my door to "Scripter"
&gt; Your comment about pretending the outside world doesn't exist is so spot-on; it's what I was screaming in my head the couple of years I worked there (not in any of the interesting groups). A true POSIX layer (for ALL editions) would change everything. I haven't worked there, but I have worked with some former MS-devs and quite a few folks that drink the MS kool-aid over the years to get a sense of the culture and it's really bizarre. It's also why it is so refreshing to read blogs and interviews with the "new guard" at microsoft and in MS research. These guys use linux and apple products and see the advantages the company will have if they compete instead of relying on monopolies. In a typical short-sided business decision, MS won't get behind POSIX because they feel like they will cannibalize their own market. In a way, it's like Kodak's decision not to pursue digital photography (which they famously had a number of patents and innovations towards, but sat on.) Thanks for the feedback.
Not bad at all. For those not on 4.5 you can use this for `Tuple` public class Tuple&lt;T1, T2&gt; { public Tuple(T1 item1, T2 item2) { this.Item1 = item1; this.Item2 = item2; } public T1 Item1 { get; private set; } public T2 Item2 { get; private set; } }
How is `Otherwise` supposed to work? The following never hits it private static void testForFive(int a) { a .With(x =&gt; x == 5).Do(_ =&gt; Console.WriteLine("I am five!")) .With(x =&gt; x != 5).Do(x =&gt; Console.WriteLine("'{0}' not five!", x)) .With(x =&gt; x &gt; 5).Do(x =&gt; Console.WriteLine("{0} is greater than five!", x)) .Otherwise(x =&gt; Console.WriteLine("{0} is less than five!", x)); Console.WriteLine(""); }
I imagine it'll work only if it doesn't match any of the `.With` statements. Edit: Yea check out their docs: &gt; Finally, there's the `Otherwise` operation, which is the default fallthrough in case nothing else has been satisfied. Your code will either always match the first or second statement.
Ah. Ta. Too lazy to RTFM...
Just curious, how did you think that it would work?
I assumed it would work only in conjunction with the last `With`... in hindsight that sounds way more stupid than it did in my head...
Heh, I was trying to name this "Otherwise" thing and I almost named it "Else" but I thought it'd imply what you just said. So I just took the Haskell name for it.
Neato! Ive been looking for one of these. This is nice and succinct. I didnt think Scala's pattern matching would match multiple things. Does Haskells?
`With` was just the first thing that came up to my mind and I stuck with it. :) `When` will work equally well.
Maybe it might be worthwhile to add an "Else" method as well that does that?
Yeah, I probably should.
He's a child. Why listen to children?
Yeah that's true, it wouldn't really have much of a use.
I might give it a go, since I'm really interested in how it works anyways.
Have at it. Submit a pull request!
Absolutely. OP: dont think this subtracts from the awesome little library. 
In c# you can't match to multiple branches of a switch statement. In c# you cant do comparison in your cases. It makes it nice and streamlined, rather than writing a bunch of if, else if, else conditions. 
Have you used this in an app that is also using Rx? It might be nice to have some extensions which basically wrap where and do in to With?
BTW, I just updated it to `When` instead of `With`. Thanks for the suggestion.
I haven't had the chance to use Rx, so no. But I can look into it with a quick example program sometime later tonight. Can you explain to me what you mean by wrapping where and do?
Have you used linq? The Rx where is basically the same, but it is on "ticking" data. That is data which is potentially changing. Think OnNext&lt;T&gt;, (also OnError for exceptions for the stream, and OnCompleted, for stream closed). so you can have something like (forgive me, I don't have VS here to syntax check) var myRx = Observable.FromEvent(x=&gt;this.MyEvent+=x,x=&gt;this.MyEvent-=x).Where(x=&gt;x.Foo==1).Do(x=&gt;Console.WriteLine(x)); Rx is really cool. This generates a monad from an event. Every time the event changes the Rx monad chain will be evaluated. When it meets the where, it will call the Do. However it won't run at all until .Subscribe is called on myRx. More can be read from: http://channel9.msdn.com/Series/Rx-Workshop/Rx-Workshop-Introduction 
Yes, I've used LINQ. Good stuff. Just looked Rx up in more depth. Seems like Where.Do is very close to what I'm doing. So, wrapping `Where`/`Do`, with (what it's now called, anyway) `When`. What are you looking to accomplish there? Something like: var rx = Observable.FromEvent(...) .When(x =&gt; x.Foo == 1).Do(Console.WriteLine) .When(x =&gt; x.Foo &gt; 1).Do(x =&gt; Console.WriteLine(x*2)) .Otherwise(x =&gt; Console.WriteLine("{0}?! what's wrong with you?", x)); ? If so, that's a great idea, I'll look into it. 
A minor nitpick: Tuple was added in 4.0, not 4.5
Awesome, looks great p.s. slight tweak to your fizzbuzz example: foreach (var i in Enumerable.Range(1, 100)) i.When(x =&gt; x % 3 == 0).Do(_ =&gt; Console.Write("Fizz")) .When(x =&gt; x % 5 == 0).Do(_ =&gt; Console.Write("Buzz")) .Then(() =&gt; Console.WriteLine()) .Otherwise(x =&gt; Console.WriteLine(x)));
Yup pretty much that in a nutshell. However like any idea of syntax, the proof of the pudding will be in how easy it is to write and maintain! The ability of having a fluent thing like: .When(condition1).When(condition2) That isn't (condition1 &amp;&amp; condition2) is very handy, my only fear would be how readable to someone new on the project would it be. Everytime I think I'm being clever, experiance has taught me I'm not being. So now I try and ask myself that when making something that is *clever*!
i just like taking leisurely walks
Can you not test to see when the "last modified time" was first populated? That would be essentially be the first time it was modified and you could store that value in another variable. Apologies if this didnt make much sense, or its not even possible.
you could make an array of all labels you want to be the colliders, just like: Label[] wallLabels = new Label[] { label1, label5, label8, label12 }; then iterate over it using a for loop, and check them all at the same time: for (int i=0;i&lt;wallLabels.Length;i++) { if (player.Bounds.IntersectWith(wallLabels[i].Bounds])) { //collide } } 
Two options: 1) keep a list of the labels and iterate through that list. 2) iterate through all controls in a container and if the control is a label then do something:- foreach (Control control in this.Controls) if (control is Label) doSomething(); See http://stackoverflow.com/questions/7791692/c-sharp-loop-through-an-array-of-given-labels 
Thanks for the link, I decided to use an array of labels in the end. Now I see it, it looks so obvious! Classic me. Kudos for the help!
I'm not sure if this is exactly what you are looking for but you can do: var s = ShapeFactory.CreateShape("circle") as Circle; s.raduis = 7;
If you are going to do a safe cast using the 'as' keyword you need to check for null. If you are confident the return type will cast you should just do a regular cast. var s = ShapeFactory.CreateShape("circle") as Circle; if(s != null){s.radius = 7} or var s = (Circle)ShapeFactory.CreateShape("circle"); 
758's comment is on the right track but what you want to be googling is an "explicit cast" rather than 758's use of "as". The "as" keyword is a bad habit that slowly infects a lot of production codebases, silently coercing unexpected return types to null, effectively overloading the meaning of null and creating bugs in the process. Consider the possible use of generics as well: var s = shapeFactory.CreateShape&lt;ICircle&gt;(); Or even this if you must: var s = shapeFactory.CreateShape&lt;ICircle&gt;("circle"); The returned s will be typed as ICircle without you doing any casting at the call site. Either will give both the factory and the caller more options in terms of providing type safety. 
I haven't, maybe do a repair? Reboot computer?
I don't either.
Thanks jacerhea! and everyone who contributed. I'm going with solution 2 and probably will try to make it more flexible so I don't have to change it when a new class is created.
Some of you may have heard of AOP (aspect oriented programming) with addons/libraries such as (post compile) PostSharp or (runtime) Castle Dynamic Proxy. Well this library allows you to create that kind of functionality completely through code. For example, [NullGuard](https://github.com/Fody/NullGuard) is a library that is built with Fody that injects null checks into your code.
+1. Also, in this example it is probably overkill, but for more complex functionality consider the concept of composition to add new features that can be applied to more than one shape and can avoid deep inheritance hierarchies. public interface ICircle: IShape, IRadius {} public interface ISphere: IShape, IRadius {} Obviously there's a balance here. Too many interfaces can be as bad as too deep of an inheritance chain. 
Yeah sometimes the key is to make sure it's an extension VS knows (check settings) and if the document is open in VS try closing it and reopening it
I've seen issues with all punctuation turning black when my PC lagging out, and it's usually fixed for me by doing something to the code. I usually select all, then format or comment and uncomment
If I've had VS open for a long time (like over a day) then something everything will turn black. Restarting VS always fixes it.
This works for me when this happens: http://stackoverflow.com/questions/3144585/visual-studio-2010-solution-crashes-when-opening/3144603#3144603 Also, if you run Resharper, delete the resharper folders.
Try turning off hardware accelerated rendering in VS. Go to Tools -&gt; Options -&gt; Environment -&gt; General -&gt; Visual Experience and deselect the enhanced rendering and hardware accelerated rendering. I've had similar issues with that in both VS 2010 and 2012, and disabling those features fixed the problem. 
You'll probably want to use Activator.CreateInstance(typeof(T)) with 2. and return that, since you have a generic constraint already, and it futureproofs it and saves you 'missing' adding any new sub classes of T when they are implemented. In C# it is probably preferred to use a generic method rather than downcasting a return.
If there is one feature of C# I have found myself wishing for the most frequently, it would be "extension properties." That is, the same ability to define static methods externally to a type, but have them be usable as property accesses.
Good guy Redditor: posts link to answer question; quotes relevant parts anyway.
I'll add a few things: In switch statements, it's heavily restricted: "A `switch` expression or `case` label must be a `bool`, `char`, `string`, integral, `enum`, or corresponding nullable type". Also, I just added in `Then` for 1.2, so that it supports a continuation after the `if`s, provided any of the `if`s were satisfied, which might be useful. And you don't need to do any stateful code to do that for your `if` statements. Less code, fewer bugs!
In cases where you want to extend a class with new properties, you can always [wrap the class](http://stackoverflow.com/questions/4525876/c-sharp-how-can-i-wrap-a-static-class). It's way more work than the sugary extension methods, but it's a way to achieve the same results. Extending underlying classes with state that they knew nothing about would be kind of strange.
I agree, but that's not quite what I'm advocating. You can add a property to a class without adding state to it; after all, a property is just a specially-named get and/or set method. Extension *auto*-properties, or anything that allowed you to add fields externally, would be a bad idea.
ok, perhaps check that where you have this method, it is within the class braces and that you dont have any brace errors in the other methods. The code you wrote looks ok, so im thinking its to do with the location. Also if you are increasing the reservedSeatCount value if the string is not null, you can put a ! before the string.IsNullorEmpty which means NOT EQUAL .. so if it is null or empty, ! means it returns false.
Good point! Never thought of it like that
Came for the LINQPad picture, stayed for the article.
Good tutorial. Thanks for sharing that one. Threads can be a real pain in the rear if you lose control of any one small fundamental piece. It's good to read as many tutorials as necessary until one has a firm grasp of how to manage them properly.
While the Thread APIs continue to work, the new parallelism APIs like PLINQ, Tasks, and async/await are more efficient, easier to use, and preferred.
The side div is "fixed" while the body is free to scroll. This makes it absolutely unreadable on mobile, even though I have three separate mobile browsers. I can't even find an email address to tell them about it, so would somebody mind telling them?
Thanks for the advice, unfortunately that didn't do it...
This is covered in the tutorial.
If you develop for Linux with Mono, you'll discover issues early. There will be minor frustration when you see something cool that you can't run, such as RavenDB or WPF or the latest hotness from Microsoft released yesterday, but the time delta between seeing something cool and determining that it won't work for you is small. If you want a statically typed imperative language, you have C++, D, Java, C#, Vala, Dart, and some JVM languages that might be interesting. I haven't seen anything terribly compelling from the framework side on the JVM. D isn't currently suited for web programming. Vala has a classic ASP export (well, "GTK-style", they're calling it) called Blitzen. Dart is unstable. Mono's probably the best option for web programming on Linux, if you want static typing.
Got some source code? Im thinking something simple is happening, like not using/reassigning the right variable with the new xml.
Was readable just fine on my Droid X, didn't have the side bar in my way at all.
Fantastic article. Friends have been telling me about C# in a nutshell, after reading this I'm going to buy it for sure.
I'm hoping that it's something simple that I'm just over looking...but here is the source for the two doc loads. EDIT: removed urls from code //GET NEWEST ITEMS FROM XML XmlDocument doc1 = new XmlDocument(); doc1.Load("URL1"); XmlElement root = doc1.DocumentElement; XmlNodeList nodes = root.SelectNodes("/AppList/App"); int count = 1; int left = 43; int right = 110; int rightlbl = 260; PictureBox[] NewApps = new PictureBox[10]; Label[] NewAppsLabel = new Label[10]; foreach (XmlNode node in nodes) { string Title = node["Title"].InnerText; string IconUrl = node["Icon"].InnerText; Console.WriteLine(IconUrl); NewApps[count] = new PictureBox(); NewApps[count].Size = new Size(150, 150); NewApps[count].ImageLocation = IconUrl; NewApps[count].Location = new Point(left, right); NewApps[count].BackColor = Color.Transparent; NewApps[count].Parent = pictureBox1; NewApps[count].BringToFront(); NewAppsLabel[count] = new Label(); NewAppsLabel[count].AutoSize = false; NewAppsLabel[count].Size = new Size(144, 30); NewAppsLabel[count].Text = Title; NewAppsLabel[count].Location = new Point(left, rightlbl); NewAppsLabel[count].Parent = pictureBox1; NewAppsLabel[count].BackColor = Color.Transparent; NewAppsLabel[count].BringToFront(); NewAppsLabel[count].TextAlign = ContentAlignment.TopCenter; NewAppsLabel[count].Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold); NewAppsLabel[count].ForeColor = Color.WhiteSmoke; count++; left = left + 170; } //GET MOST DOWNLOADED ITEMS XmlDocument doc2 = new XmlDocument(); doc2.Load("URL2"); XmlElement rootTwo = doc2.DocumentElement; XmlNodeList nodesTwo = root.SelectNodes("/AppList/App"); int countTwo = 1; int leftTwo = 43; int rightTwo = 380; int rightlblTwo = 530; PictureBox[] NewAppsTwo = new PictureBox[10]; Label[] NewAppsLabelTwo = new Label[10]; foreach (XmlNode node in nodes) { string TitleTwo = node["Title"].InnerText; string IconUrlTwo = node["Icon"].InnerText; Console.WriteLine("Most downloaded: " + IconUrlTwo); NewAppsTwo[count] = new PictureBox(); NewAppsTwo[count].Size = new Size(150, 150); NewAppsTwo[count].ImageLocation = IconUrlTwo; NewAppsTwo[count].Location = new Point(leftTwo, rightTwo); NewAppsTwo[count].BackColor = Color.Transparent; NewAppsTwo[count].Parent = pictureBox1; NewAppsTwo[count].BringToFront(); NewAppsLabelTwo[count] = new Label(); NewAppsLabelTwo[count].AutoSize = false; NewAppsLabelTwo[count].Size = new Size(144, 30); NewAppsLabelTwo[count].Text = TitleTwo; NewAppsLabelTwo[count].Location = new Point(leftTwo, rightlblTwo); NewAppsLabelTwo[count].Parent = pictureBox1; NewAppsLabelTwo[count].BackColor = Color.Transparent; NewAppsLabelTwo[count].BringToFront(); NewAppsLabelTwo[count].TextAlign = ContentAlignment.TopCenter; NewAppsLabelTwo[count].Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold); NewAppsLabelTwo[count].ForeColor = Color.WhiteSmoke; countTwo++; leftTwo = leftTwo + 170; }
Yep! The problem is here: XmlNodeList nodesTwo = root.SelectNodes("/AppList/App"); should be rootTwo
Actually saw that about an 45 mins ago and fixed the line and it's still a no go...
Oh. I just noticed this also: foreach (XmlNode node in nodes) The second loop should be nodesTwo