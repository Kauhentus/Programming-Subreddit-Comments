String.comapre returns a number. If you compare strings X and Y, it will : return a negative number if x comes before y return 0 if its the same return a positive number if y comes before x. In this case, you are only interested if they are equal, and not the relative position of them if they are not, so you only case if string.compare returns 0 or it doesnt. the reason its done like this is that its used in sorting - when sorting lists of strings, the library needs to know not only if they are equal, but which order they shold be in. I also echo other comments about learning linq and using that as per the example on this thread - linq is AMAZING and saves stacks of loops and flags etc...
[This one doesn't suggest text files as a way to store data](http://time.com/3767518/easter-bunny-origins-history/) but it's also not related to software development. What are you trying to ask? What is the problem you have?
I don't have a problem exactly. I just want to know what kinds of things that text files could be used for. A google search just says that text files are used to store data, but don't use them because Databases. I'm looking for other things that text files could be used for. 
Please no. I get the appeal, you can have a method that constrains its inputs naturally, but the calling code is going to either leak the SomeOption enum or have to translate from some other "thing" if it's part of a chain of calls. 
Ah ok, that makes sense :) Databases store structured data, text files, most files really don't. If you're parsing a large file, you can write the intermediate step to a text file, "streaming" the data into the file rather than retaining all that information in memory. As an example, if you use one of those dropbox/megaupload/github sites, you will often have the option of downloading a zip of your selected content. They do that by streaming the data through a zip compressor into a file. It's never held in memory. Files are good for specific local configuration details, or stuff you might put in a database, but it changes so infrequently you can get a small performance increase by serialising to a file and shipping that with your service. The service then just reads its local file and doesn't put pressure on the database. There are other uses still. You can fake transactions with text files and a bunch of directories. Read from dir A, if successfully transform, write to dir B and delete A version. If the service dies, you can pick up from where you were, If you reprocess something from dir A that already has a result in B, you know you can skip it. FS access is fast, not as fast as in memory but the next fastest thing that doesn't involve leaving the machine. 
So I guess the short version of that is: Use files where you can't recover if the power goes off and it's only stored in memory, or if you're processing large items through a series of transitions.
I've used text files as output from various logging tools (some would write to database). Every .Net application has a web.config or an app.config. Most of my front end javascript (which are themselves text files) bundling tools I use for my front end code almost all ha some sort of json config file. Hell, It is all text files until you get into compiled or bytecode format or media types.
Thank you! 
No. Just.... no. So much opportunity for abuse here, if there _is_ an API for this I hope Microsoft rips it out.
There is already some good answers here, but string.Compare is described [here](https://msdn.microsoft.com/en-us/library/x7tax739(v=vs.110\).aspx) and when you have some time read [this](https://docs.microsoft.com/en-us/dotnet/csharp/how-to/compare-strings). Good luck. 
`else if (dayslate &lt;= 1 || dayslate &gt;= 4)` This says if days late is less than or equal to 1 OR days late is greater than or equal to 4 \(so your sign is flipped here\), then the fine is .5 What you really want is: `if (dayslate == 0) {...}` `else if (dayslate &gt; 0 &amp;&amp; dayslate &lt;=4) {...}` `else if (dayslate &gt; 4 &amp;&amp; dayslate &lt;= 7) {...}` And so on.
One thing that I'll add is that both Compare and Equals have the option of using a [StringComparison](https://msdn.microsoft.com/en-us/library/system.stringcomparison.aspx), which is highly recommended and underused IMHO. The current culture of the process will determine if certain characters are considered the same for comparison purposes and also determine sort order. This can lead to subtle bugs on systems with different cultures. Also, while Compare has an option for case insensitivity, the only way to get that behavior with Equals is to supply a StringComparison value. Always good to take a look at Microsoft's [Best Practices for Using Strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings)
I think it's important to clarify what you mean by text files. A lot of things are essentially text files, they just store the text in JSON, XML or some other structured format. For example: * Config files like .csproj are text files * XAML files are text files * Storyboards in iOS applications are text files * HTML and CSS files are text files * Most git files (.gitattributes, .gitignore etc.) are text files Anything that is concerned with local configuration or layout data for UI is quite commonly stored as a text file. They're usually not large in size and sometimes having this kind of data in a human readable format can be beneficial if you need to make manual edits.
What do you think will be the most effective way to calculate the fine for age and dvd type? an if statement inside if statement?
I'm interested in knowing how this would work as abuse, I'm a dumb kid but it'll be a TIL 
I’m not 100% sure as I’m learning myself but I’ve been told it’s not good to nest if statements inside each other. You could perhaps use a switch statement. But maybe in your case it’s not so much of an issue as it’s not very complicated. 
I always mess up swtich statements, so I think i will stick if's inside each other and hope for the best haha.
Ah that’s ok. So in that case maybe as you said have an if statement like. If (dvdtype.equals “new”) etc Else if etc. Personally if there wasn’t a lot of types like if it was just 2 : old and new I would probably add it in your main if statements. But if there are lots like different genres then maybe how you suggested. Maybe have different methods to split up the if statements might help so it’s not a big jumble?
It has been a while since I’ve played with Windows Media APIs, but IIRC there’s not a way to detect master volume changes. However, you can detect volume changes within your own app, and if I’m not mistaken when System volume changes your app’s volume will change as well. So I think you can just have an event handler for changes to your app’s volume and that will capture what you need. 
Here's a real life enterprise scenario using text files which I have worked on: The company I work at has a subsidiary company that does a lot of external facing data gathering. Every so often, that data is compiled and placed into text files with a predefined format \(which pretty much looks like a CSV if you open it up\). That file is dropped off on a server location, where a separate process reads in the data from that text file and puts the data into a database. After that, my application starts processing the data in that database, syncing up the data between our systems.
I once made a prank "trojan" that fucked with the system volume and played MIDI files from C:\Windows\Media. On a slightly more sinister note you could probably "stealth" enable microphones etc., but that's still far away from just reading the information.
That's a weird question. What do you need it for?
Splitting up the work into different methods is a good recommendation.
I’ve used text files to store local configurations. In the past I’ve done it when the data wasn’t critical, and only needed on one machine. So in that case the best solution was to just save them to a text file. 
 int dayslate = 0; string dvdtype; int dvdretail = 0; int membersage; double fine = 0; double agefine = 0; Console.WriteLine("Enter days late: "); dayslate = int.Parse(Console.ReadLine()); Console.WriteLine("Enter DVD type: "); dvdtype = Console.ReadLine(); Console.WriteLine("Enter dvd retail value: "); dvdretail = int.Parse(Console.ReadLine()); Console.WriteLine("Enter members age "); membersage = int.Parse(Console.ReadLine()); // members age if (membersage &gt; 18 &amp;&amp; dvdtype == "new release" || dvdtype=="New Relase") { agefine = dvdretail * 0.10; } else if (membersage &gt; 18 &amp;&amp; dvdtype =="old release" || dvdtype=="Old Release") { agefine = dvdretail * 0.05; } else if (membersage &lt; 18 &amp;&amp; dvdtype == "new release" || dvdtype== "New Release") { agefine = dvdretail * 0.12 } else if (membersage &lt; 18 &amp;&amp; dvdtype == "old release" || dvdtype == "New Release") { agefine = dvdretail * 0.07 } // Calculate New Release &amp; fine if (dvdtype == "new release" || dvdtype== "New Release") { if (dayslate == 0) { fine = 0; Console.WriteLine("Your fine is " + fine); } else if (dayslate &gt; 0 &amp;&amp; dayslate &lt;= 4) { fine = 0.5; Console.WriteLine("Your fine is " + fine); } else if (dayslate &gt; 4 &amp;&amp; dayslate &lt;= 7) { fine = 0.75; } else if (dayslate &gt;7 &amp;&amp; dayslate &lt;= 10) { fine = 1; } else if (dayslate &gt;10 &amp;&amp; dayslate &lt;= 15 ) { fine = 2; } else { fine = 2.50; } } else if (dvdtype == "old release" || dvdtype == "Old Release") { if (dayslate == 0) { fine = 0; Console.WriteLine("Your fine is " + fine); } else if (dayslate &gt; 0 &amp;&amp; dayslate &lt;= 4) { fine = 0.5; Console.WriteLine("Your fine is " + fine); } else if (dayslate &gt; 4 &amp;&amp; dayslate &lt;= 7) { fine = 0.75; } else if (dayslate &gt; 7 &amp;&amp; dayslate &lt;= 10) { fine = 1; } else if (dayslate &gt; 10 &amp;&amp; dayslate &lt;= 15) { fine = 2; } else { fine = 2.50; } } Console.ReadKey(); } } } **really not sure if its going to work because it seems like an awful mess**
There's a big difference between a full API for the speakers/microphone, vs read-only ability to view the volume... An API can be information-only.
It's not bad per se to store the text files but it really depends on what you're trying to achieve. 1\) **You want to parse the data:** If you goal is to be able to search through the contents of the file to say, find all text files that have a particular text pattern then you need to store the contents of the file. 2\) **You only want to store the files and don't care about parsing their content.** If this is the case, then store the files on your server instead and store the filename to the files in your database.
Which I specifically said. Does nobody read anymore??
Considering that real tuples (as opposed to a class named Tuple) are in C# since last year it does not really matter that you have been a .NET dev since 2001 :)
For most practical purposes List&lt;?&gt; is like IEnumerable&lt;object&gt;
I've been trying for the past hour, if anybody could help maybe tidy it up or lead me in the right direction would be good. I really don't know how to continue. https://pastebin.com/aiLSSgjw
You can do so with NAudio.
enums are, like, the javascript of C#
A few things. 1. Use .ToLower() on your release type so you can just compare to “new release” or “old release” 2. you can use a lookup table like a Dictionary for all your fines. 3. you’re not taking into account if the age is equal to 18
Without looking to deep in to it. I think you should look in to rules design pattern or decorator pattern. 
If you are using the latest version of C# \(7.x\), you can indeed use switch statements that cover a range of values, rather than a single value, similar to this: int num = 50; switch (num) { case int n when n &gt;= 0 &amp;&amp; n &lt; 30: // do something break; case int n when n &gt;= 30 &amp;&amp; n &lt; 60: // do something break; case int n when n &gt;= 60 &amp;&amp; n &lt; 90: // do something break; default: // do something } So that would be helpful when dealing with the charge for days late. I would then apply the age factor to the result of that switch statement and continue on from there. One thing to note is the question specifies mixed case inputs, and you are only handling cases where it is all lower case, or CamelCase.. you'll need to do a proper string comparison, something like: String.Equals(dvdType, "New Release", StringComparison.OrdinalIgnoreCase) 
Pretty sure the task was build to test the knowledge of if/case statements
unless your instructor is grading you on the amount of lines of code, there's functionally wrong with not using a switch as long as you meet all the app requirements. that said, i would write a function like `double CalculateFine(int daysLate, int renterAge, int dvdCost)` and put all your calculation logic in there. you also have a requirement to run this calculation multiple times, meaning you need to wrap your `Main` method content in a `while` loop to allow the user to start over
I'm seeing that less and less. In fact, a good percentage of my C# files don't even import the System namespace.
Right, that’s my understanding as well. Create a DbContext inheriting from the IdentityDbContext and clearing the ApplicationUser/Roles/Claims. That part I’m all kosher with. My question is more in separating out the data access layer, and creating a service layer. So for services that require checking claims or user authentication and general authorization is there a better way to do that than injecting the usermanager or signinmanager into those services? 
Perhaps... :) Maybe I'm biased because I generally follow the default convention - currently with roslynator, .editorconfig seems to be the case.
That sounds like you want a discriminated union.
It's interesting reading this thread and your responses. I actually have the exact opposite problem; I don't "get" _dynamic_ languages. I've only ever used statically-typed languages (Java, C#, Haskell), I read a book on Ruby and followed along with the examples, but I just couldn't fully grasp it when I tried to do my own projects! Perhaps you could find a C# cheat sheet to use when you're trying to write code? 
It's more about, "What do databases give me?" than, "When should I use text files?" You pick a text file when you want convenience. You know you have a filesystem API. You know there's probably disk space. You can choose a format you can hand-edit or generate with a tool. But text files don't work so well if you need to support multiple users. And if your data set is relatively large (50+ MB), it starts to incur noticeable delays when you parse. If you want to search, sort, or filter, you either need to design a format optimized for it or commit to reading the entire file into memory, then searching that. Databases *can* overcome most of those downsides. You have to check the particular database to know for sure. For example, SQLite is easy to use, but doesn't support "many concurrent users" with the kind of robustness or performance you'd expect from MSSQL. A database is less convenient to edit. It increases your deployment complexity because (most of the time) the OS doesn't ship with the libraries needed to interact with the DB. Most of the time it supports multiple users well, and it can scale to thousands of simultaneous users if your budget and skill allows. There's not a black and white divide. There's not a rule of thumb like, "Start with text files, then when you get this requirement switch to a DB". You have to think about your project requirements and decide which tradeoffs you want to make. The options aren't even mutually exclusive: with work, you can write a persistence layer that uses one or both in conjunction. 
You're a bit confused. You're forgetting anything that needs system level needs administration approval. If UAC was disabled, then sure. But this API you speak weary of is call Win32.
Compare is used for something like sorting; so it returns -1, 0, 1 to say what order the strings are (i.e. which comes first in sort order, 0 being the same) Equals is probably what you want; where it returns true or false
OnCreated event
Text files are useful for communicating between user to application or from application to user... so, if the information in the file will be prepared by a human, or if the information will be read by a human then it is *generally* easier to use a text file then it is to use some other format... however, if the data within the file is only going to be read by the application and the application will be the only thing writing to the file then there is no reason to care about the readability of the file so you should use a database or binary file which are both faster for machines to manipulate the data. 
Are both Datagridviews double buffered? That might speed them up.
They are not double buffered, I will try that tomorrow!
If you're doing a full round trip to the database whenever you select a new row in the customers table, of course that's going to be slow. If the row selection for the customer DGV is dependent on the new data being loaded into the information DGV, then it's always going to be slower than the information DGV update. If you're awaiting the result of the information DGV update, consider firing off the task to update that and not awaiting it instead. If you're doing this all with synchronous code, then it's a more difficult problem. With regard to the information DGV updating slowly, one thing you can consider doing is loading all the data used in the information DGV for currently displayed customers into memory and then when a new customer row is selected, do filtering in memory so you don't need a round trip to the database to update that data source. In any case, it's very difficult to make suggestions when no code is provided. This is all speculation based on your descriptions of the issue; I don't actually know how your code is functioning so there's no way to know whether my suggestions actually apply to your case.
I'm probably in the minority, but from my perspective I think what's seriously lacking is how to get into Linux as a C# dev. There's some pretty good resources out there for .Net Core right now, but I think there's a gap between the resources out there for learning Linux and what a C# developer needs to know and understand. Here's a couple of pain points that I've run into that are hard to find good resources on. + Distro - What's the best from a deployment perspective that works well with .Net? What distro will be the best for either deploying to the cloud or transitioning to the cloud later on? To often, I just hear Ubuntu or Linux Mint if you want anything easier than that. If I'm going to invest my time to learn Linux, I want to make sure I'm doing it on a distro that really matches what I need. + Development - Am I developing on Linux? or am I just deploying to it? If I'm developing on Linux, that's going to change a lot about workflow. Do I need VMs or dual booting? If I'm just deploying, does that mean that I can do everything on Windows then push to Linux as the last step, or does Linux need to be part of the process earlier? If so, how early? + Dev focused basics - I've tried several times to get up to speed on Linux and trying to use Mono, .Net Core. One of the things that always frustrated me was that it was tough to get the basics that I needed to truly get a good workflow set up because a lot of resources want to cover all the basics of Linux even if it's not something that I need to get work done. Essentially, the bare minimum Linux that you need to get up to speed from a C# development perspective. + Managing a Multi-OS environment - Let's face it, there won't be a line in the sand where everything just gets flipped over to Linux, so how does Windows and Linux coexist and work together rather than having a "separate but equal" type of mindset. How to handle things like AD integration and authentication? How to have Linux boxes be managed along with a ton of Windows machines in an on-prem situation? Take these points with a grain of salt, just because I think that overall the path you laid out is pretty good. These are just some of my challenges with trying to use .Net with Linux and some of the responses I've gotten at work when bringing up the topic of potentially using Linux.
Some nitpicks. Start using some kind of casing rules... camelCase is common. so finalPrice instead of finalprice. dayslate instead of daysLate. Get into a good habit with this now because you will eventually come across a situation such as dogone=i which would be more clear if it were DoGone or DogOne (depending on what the intention was). Don't use int.Parse outside a try/catch block. Use int.TryParse instead. if (!int.TryParse(Console.ReadLine()) { ... handle the exception properly...} Don't put all the code into a single Main function... break it into methods. Your Main function should have a layout something similiar to bool done=false; while(!done) { var input=GetUserInput(); if (input.IsValid) DisplayOutput(input); done=GetShouldContinue(); } Where input is a class that contains the Days Late, the DvdType, the Dvd retail value, the members age, and an IsValid boolean value which is set to false on invalid user input. dvdtype == "new release" || dvdtype=="New Release" is more verbose and also slower then isNewRelease... so you can add var isNewRelease = String.Compare(dvdtype, "New Release", true)==0 @ ~line 32 and that will make the next twenty or so lines that much more readable. The lines of code involving "Old Release"... I don't see any mention of an "old release" dvd type in the specifications... I think anything that isn't explicitly a new release is an old release... so, if the user entered "Action/Adventure" as the dvdtype then it would be calculated under "Old release" values. As far as the calculation goes... the formula is constant, it's only differences in the free variables. The base calculation is: math.min(dvdRetailCost, daysLate*baseRate*ageRateCoefficent*dvdTypeCoefficent) Each of the free variables in calculable from the input and independent of each other, so it might be more clear what's going on if you did something like... var baseRate = CalcBaseRate(input); var ageRateCoefficent = calcAgeCoefficent(input); var dvdTypeCoefficent = calcDvdTypeCoefficent(input); return math.min(dvdRetailCost, daysLate*baseRate*ageRateCoefficent*dvdTypeCoefficent) calcBaseRate(myInputClass input){ if (input.DaysLate&lt;=0) return 0.0f; if (input.DaysLate&lt;=4) return 0.5f; . . . return 2.5f; } calcAgeCoefficent(myInputClass input){ if (input.Age&lt;18) return 1.1f; return 1.12; } . . And So On. 
Yep.
Also, you swapped your fines for &gt;18 / &lt;18. 
Look into MVVM. Focus on the pattern, not some specific implementation or library. Use a dependency injection framework. There are plenty of examples out there. What kind of requirements do you have on WPF? 
Put everything in a while loop so you can repeat the calculation a number of times. Try to type a word such as "test" as input for the age and see what happens. Try to fix it.
it sounds great
Ok taking all your guys help I have completed the question. If anybody wants to give me anymore pointers and tips. here is the final product. https://pastebin.com/pT24KnYM 
Is the customer DGV stored as a List (query ends in .ToList()) or an IEnumerable? An IEnumerable, even if not reassigned, can cause another call to the database server.
Will do thanks, not so sure what you mean by requirements sorry.
Looks like the issue is having multiple filewatchers on the same folders makes them cancel each other out. I will be making a new post since a lot of the information, including the title, needs to be changed. Thanks for your help; deleting this post.
I agree 110%. Sounds like you need to get acquainted with MVVM. Basically your multiple windows could each be separate “Views” in your application and share a singular “Viewmodel” for their data context. All your variables for counts, data manipulation and core logic will be stored in your viewmodel while your views will display the this information via bindings in your XAML. I personally use “Unity” as my dependency injection framework but there are plenty of options out there. 
Even though I’m on windows, I would watch.
No, I would prefer a written version. But don't let me stop you, it's still a good idea.
&gt;which database to use MySQL is free for commercial use without a table size limit. Integration in 2.0 works pretty well with pomelo scaffolding but I couldn't make it work with 2.1 yet, still some things that have to be fixed by either pomelo, efcore or MySQL. To the topic of the thread in general it sounds nice if it's well made, I don't mind u rambling a bit because things are new and deep knowledge is lacking but if u plan on learning on the video then I'm out. Sounds like a comfy series to listen to while doing sport. Would skip basic DB knowledge and just link to another guide, basic SQL and the basics of relational dbs isn't that hard. (if u have some advanced stuff a second series sounds good 😁 first costumer here for horizontal scaling and APIs gateways). 
if i understand this correctly your customer datagrid upon selection of a row triggers an update for the info dgv which involves a db call, visual updates etc. frankly sounds like you are just executing everything on the UI thread and the selection update happens last.
Distro is definitely one of the harder sticking points, especially since there are so many flavors. The reason I picked Ubuntu is for a couple of reasons, one makes sense, and the other not as much, really. * It was a recommended distribution for Linux noobs (Though Linux mint, is too) * It was supported by valve somewhat (granted, for video games), so I figured if a larger company put their weight behind it, there must be something that makes is special (even if I don't understand fully) The second reason isn't really great, since I'm just following the leader on that, but maybe in the long run it won't really matter (once I know enough about linux). As for Development on Linux, that is more of a personal choice than a practical one. As I said in the original post, I wanted to really learn Visual Studio Code, and learning Linux at the same time seems like a nice side benefit, since there's a Linux build for it. You can definitely develop in regular Visual Studio and deploy to Linux, as far as I know. But the way I figure, the earlier you include Linux as part of your deployment and testing process, the better, even if the initial setup is a lot more cumbersome. Deploying, however, will be a different beast. That will be the most interesting part about it, I think. It looks like there are a couple of processes that can host an ASP.NET Core Application(Nginx and Apache), so the flavor of Linux machine may not matter so long as it has either of those hosts. I will most certainly cover the bare minimum of Linux to get things up and running, but that's because I only know the bare minimum, so far anyways. Managing a Multi-OS Environment is definitely a tricky one. While I'm sure that there are probably ways around it, if you have to use Active Directory/Windows Authentication to secure your application, perhaps a Linux host, in that particular case, would not be the right fit for that particular application (I don't know enough about Linux to say for sure). But for something that didn't need it, Linux could be just fine (e.g. OAuth).
It is not free for commercial use at all if you are distributing it with an application. Before using any and all software you need to read the license. You can use it for open source projects, but in production if you do not plan to release the source code for your application you need to buy a commercial license from Oracle. Obviously that is only if you are packaging MySQL with your application, but it definitely should be noted. https://www.mysql.com/about/legal/licensing/oem/ 
I read the license but in a case like that with a frontend u will host the MySQL and not distribute the DB itself which should be free. 
It wouldn't be like a "Let's Code" video, if that's what you meant by "learning on the video". I'd be learning before the video, summarizing what I've learned in a very organized and concise way, and applying it to the project. If I encounter a problem/make a mistake, I want to be able to show that problems can be worked through, as long as there is something to learn from it anyways. I have considered MySQL. I remember having some kind of Issue with the licensing in the past, but maybe I was looking at the wrong edition? For MySQL, am I supposed to get the Community Edition?
You've completed ignore everyone's advice on how to handle the mixed case input. If someone enters 'nEw reLeASe' \(or any other string that doesn't exactly match 'New Release' or 'new release'\), your end result will be 100&amp;#37; wrong. Beyond that, I noticed a typo on line 50 \("New Releas"\). Solving problems is one thing, but you're a new programmer so I would strongly recommend starting to develop certain habits now. Everyone here has provided good advice about styling, formatting, use of proper methods, etc.. Take the time to understand the concepts being presented to you here, it will make a HUGE difference in your overall understanding of structure and readability, and just general knowledge of the framework.
* **Principles** * Course: [SOLID Principles of Object Oriented Design](https://app.pluralsight.com/library/courses/principles-oo-design/table-of-contents). Note: If you watch only one of these courses, this is the one to watch. * Course: [Abstract Art: Getting Things "Just Right"] (https://app.pluralsight.com/library/courses/abstract-art-getting-things-just-right/table-of-contents) Summarizing quote from course: "Abstraction is really awesome. It helps us avoid tight coupling and can make our applications easier to extend and test. But abstraction is also awful. It adds complexity and makes our code more difficult to understand, navigate, and debug. Our job as developers is to find the balance; getting the level of abstraction just right for any particular application." 
I'd deffo watch.
I would definitely watch it.
I'd be interested as someone moving in the opposite direction. I've been running and developing on Linux for a few years, but I hadn't touched C# until .NET Core was released. I feel like the .NET community could use some more alternative-OS resources/guides. 😄
This as well for me. Very familiar with Mac / Linux and developing in other languages, only recently getting into C# / .NET. (Never bothered before since the lockdown to Windows was a deal breaker). 
 You shouldn't bind multiple views to a single viewmodel, unless they are nearly complete duplicate screens, which they \(at least don't sound like they are\) are not here. Data manipulation and core logic should be in your service tier, not your view model tier. Viewmodels only job should be bringing data together to present onto a view, it's not its job to actually get the data.
Ugh... :( This stinks if that is the case.
&gt;As for Development on Linux, that is more of a personal choice than a practical one. While I don't disagree, what I think is missing is the context to make that choice. What does one "give up" by developing on Linux instead of Windows? What are the advantages that one gains? If your going to develop on Linux, then it makes sense to keep on that stack all the way, but if not, then where are the various points at which you begin involving a Linux environment? Do I need to build on Linux, or just test on it? Does it make sense to test on both Windows and Linux? &gt;Deploying... looks like there are a couple of processes that can host an ASP.NET Core Application(Nginx and Apache), Again, context to make that decision and the pros and cons that come along with it. Also, a comparison against IIS would likely be helpful to a lot of devs as well, as that's what most are used to. Nginx and Apache may be enough of a coin flip to actually go through both so anyone watching can pick what works best for them. &gt;I will most certainly cover the bare minimum of Linux to get things up and running, but that's because I only know the bare minimum, so far anyways. One thing I always find challenging is covering the basics of a new topic for an audience that has a lot of experience in a topic that is highly related to the new topic. It's hard to get the right combination of moving fast enough for an audience that will likely be able to pick up on things quicker than total noobs, but also making sure that the details are covered enough to get things straight. Good luck and I hope can walk that tight rope. &gt;Managing a Multi-OS Environment is definitely a tricky one. While I'm sure that there are probably ways around it, if you have to use Active Directory/Windows Authentication to secure your application, perhaps a Linux host, in that particular case, would not be the right fit for that particular application (I don't know enough about Linux to say for sure). But for something that didn't need it, Linux could be just fine (e.g. OAuth). Definitely a tricky one, but I know it is something that can be done. One of the shops I used to work in was primarily Windows based in terms of the typical end user infrastructure, but most of the development was done in Ruby and some other predominantly Unix based languages. We also had a lot of Macs in our environment as well. Everything still used AD for authentication purposes. So while AD integration certainly isn't easy, it is something that has been done. That said, does that make sense in our current environment? I'm not sure. The role that Azure AD, OAuth, or other new solutions could play in a more modern approach to a multi-OS environment is definitely an opportunity. I think having a user management/group policy solution that doesn't necessarily rely on Windows is an advantage within an organization that wants to allow users to leverage the tools that best fits the task their trying to achieve.
Someone probably will be interested but not me :)
I work as a full time ASP.Net core developer if you need any help doing this Hit me up :)
It is stored in a list :), I tried storing all the info results in 1 list en quering that list for a specific customer. And I tried requesten specific info directly from the database, same results no (notable) difference.
I am doing it with a selection changed on the customer dgv. I will post some code tomorrow when I am at the office. Thanks for your help I apreciate it!
Clippy Appears I see you’re trying to mute a porn video
&gt; How's the integration into ef core with postgres on 2.1 and 2.0? I'm not an EF core user, so I can't speak specifically, but a quick google looks promising. http://www.npgsql.org/efcore/ https://damienbod.com/2016/01/11/asp-net-5-with-postgresql-and-entity-framework-7/ https://elanderson.net/2018/02/entity-framework-core-with-postgres/ &gt; Is the free license comfy with using it commercially? Postgres has its own license, but is [a liberal Open Source license, similar to the BSD or MIT licenses](https://www.postgresql.org/about/licence/). You can check it out in full [here](https://opensource.org/licenses/postgresql). Basically you can use it commercially for free. So since I'm tooting Postgres's horn, I'll list off a couple other things that I like about it. Compared to all the other DB systems I've had to work with (Oracle, DB2, MySQL, old dbase shit), my T-SQL queries either just work or require minimal modification to run on Postgres. The date-time functions are far more useful and far more intuitive in Postgres than MSSQL. Postgres can deal with Arrays in a way that MSSQL can't (yes I know you can to TVPs, but those can be a bitch to declare and need to be done so in the DB prior to using them from .Net code). Partitioning large tables is something that Postgres does out of the box, MSSQL can do it, but requires the Data Warehousing or Enterprise versions which are ungodly expensive. Postgres also has a very interesting model around inherited tables that actually comes fairly close to object oriented inheritance (may not be useful, but definitely cool) The only two things that I don't like about Postgres are that it sucks at handling parameters, as it's just not very intuitive and clunky, and it runs like a crippled dog on Windows so it's only viable to run it on Linux.
It's very strange that you'd get the same performance for both in memory and database searches. Can you share the code for the onClick event handler that causes the update?
FWIW there's a course with a very similar topic on Pluralsight, [Getting Started with .NET Core on Mac and Linux](https://www.pluralsight.com/courses/dotnet-core-mac-linux-getting-started)
You’re getting downvoted because your post sounds hostile and dismissive.
You know what else is hostile and dismissive? Fuck off, retard :)
For the database, take a look at MariaDB. It's a fork of MySQL led by the original developers of MySQL. It's essentially MySQL without Oracle behind it.
Could you post your entire file? This exact code works for me (compiles, runs) in Visual Studio: using System; using System.Timers; namespace ConsoleApp1 { class Program { static void Main(string[] args) { Program p = new Program(); p.waitTimer(10); } int waitTimer(int length) { // Create a timer and set a length second interval. Timer aTimer = new System.Timers.Timer(); aTimer.Interval = length * 1000; // Hook up the Elapsed event for the timer. aTimer.Elapsed += OnTimedEvent; // Have the timer fire repeated events (true is the default) aTimer.AutoReset = true; // Start the timer aTimer.Enabled = true; return 0; } private static void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e) { Console.WriteLine("The Elapsed event was raised at {0}" + e.SignalTime); } } } 
I'm still in School, but I recently decided I wanted to do web applications and dev. So I've been learning HTML/CSS, bootstrap, JS, and JQueury for a couple of weeks now on my own. I already have a decent understand of C# due to those being my intro and intermediate programming classes. I struggle with a few concepts, but I can learn and deal with them. ASP.NET/.NET core etc.. is so foreign to me. I feel like a Canadian who traveled to France and can't speak french. Hell, I just learned that MVC stands for model, view, controller! (right??). I've also just got a desire to work with linux, so I bought a 60SSD and dedicated it to Ubutu. This post feels like a gift from god. Yes please. I Will eat this up. PM /comment with a link please and thank you. Hell, I'd even follow you on twitch or w/e.
aTimer would go out of scope and get garbage collected after the method returns. When do you get the error, when attempting to add OnTimedEvent to aTimer.Elapsed, or after the waitTimer method returns?
I get that error from compiling
Ok, so the last one is somewhat unrelated to .NET Core. Regarding the rest (only looking at .NET Core here, not Mono): Distro/Development: You somewhat mixed development and deployment here (or I misunderstood you). You can develop either on Windows or Linux, on Linux possible IDEs are VS Code and JetBrains Rider. For a list of Linux OS' that Microsoft provides the SDK see: https://www.microsoft.com/net/learn/get-started/linux/rhel Personally I'm using Rider on Fedora, but generally all Distros are somewhat similiar. So for examplr Ubuntu may use a different GUI and their package manager uses other commands but besides that there isn't really anything your missing out with preferring one distro over the other. Deployment really is dependent on what you intend to do: Do you want to create a docker container, deploy to Azure, host it directly on a server? Anyways this is somewhat detached from the decision to use Linux. As long as you don't use any platform specific libraries like e.g. Microsoft.Win32.Registry a .NET Core app runs on Linux and Windows. In that regard: You don't really have to use Linux in your development process at all just to allow deployment on Linux. 
A little messy but here: using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; using System.Timers; public class Device : MonoBehaviour { public InputField portName; public GameObject connectButton; public GameObject disconnectButton; private wrmhl device; // Use this for initialization void Start () { /* if (device == null) { Debug.Log("instantiate within start"); device = new Arduino(); connectButton.SetActive(true); disconnectButton.SetActive(false); } */ } // Update is called once per frame void Update () { if (device != null) { if (device.IsOpen() &amp;&amp; !disconnectButton.activeInHierarchy) { Debug.Log("Device connected, switching connect/disconnect buttons"); disconnectButton.SetActive(true); connectButton.SetActive(false); } if (!device.IsOpen() &amp;&amp; !connectButton.activeInHierarchy) { Debug.Log("Device NOT connected, switching connect/disconnect buttons"); connectButton.SetActive(true); disconnectButton.SetActive(false); } } } public void Connect() { if (device == null) { Debug.Log("device was null, trying to instantiate within connect"); device = new wrmhl(); connectButton.SetActive(false); disconnectButton.SetActive(true); } if (portName.text != "" &amp;&amp; !device.IsOpen()) { device.set(portName.text, 9600, 100, 100); device.connect(); //WaitForSecondsRealtime wait = new WaitForSecondsRealtime(12); waitTimer(12); Debug.Log(device.readQueue()); // device.reportVersion(); } } int waitTimer(int length) { // Create a timer and set a two second interval. Timer aTimer = new System.Timers.Timer(); aTimer.Interval = length*1000; // Hook up the Elapsed event for the timer. aTimer.Elapsed += OnTimedEvent; // Have the timer fire repeated events (true is the default) aTimer.AutoReset = true; // Start the timer aTimer.Enabled = true; return 0; } private static void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e) { Debug.Log("The Elapsed event was raised at {0} "+e.SignalTime); } public void Disconnect() { if (device.IsOpen()) { device.close(); Destroy(this.gameObject); } } } 
I don't even get past compiling. This line: aTimer.Elapsed += OnTimedEvent; give me the error with a very angry red squiggle below it.
Hi OP, .NET Developer of over 15 years here and I just went through almost exactly this over the last several months. I've been interested in Linux for a long time now but couldn't make the switch practical until .NET core came along. I'm pretty well established now to the point that I trashed Windows on my laptop in favor of Ubuntu and see no path back. I had to figure out how to move about and accomplish things in a new OS, pick and a learn a new IDE as well as how to move from hosting .NET web apps on IIS on Windows to hosting them using Kestrel with Nginx on Linux and AWS. I'd be interested in your series. Feel free to hit me up if you want feedback on how it went for me and things I had to deal with along the way.
Yes! As soon as possible.
I tried it in Unity now instead and could reproduce your problem. For some reason I can't immediately understand, it doesn't work to have uppercase "Object" in the signature. Try replacing the signature with private static void OnTimedEvent(object source, ElapsedEventArgs e)
UnityEngine.Object != System.Object Try private static void OnTimedEvent(System.Object source, System.Timers.ElapsedEventArgs e)
Upvote from me!
I see your point, sounds like you are more of an MVVM purist which is awesome. You may have misinterpreted what I mean by “core” logic. Core logic in essence meaning any necessary client-side operations. I did not mention about directly interacting directly with a data access layer or datasource. Of course, if you have an n-tier architecture or a layered design then yes your service layer should handle all your business logic. But the post did not really cite any architecture being used. So I just assume this was some standalone app. Also I did not mean that the viewmodel should be responsible for retrieving any data. Your VM should act as a layer of abstraction in my opinion. Viewmodels should not know about Views. But nevertheless, there are many ways to skin a cat; you just need to pick the approach that is easily scalable and extensible long term. 
Do I get a $1k distribution bonus?
I got downvoted to fuck and back, but this is exactly why. 
This doesn't mean that it can't be abused. Turn the master volume down? Obnoxious app will just turn the volume up to compensate. Mute during the ads? Obnoxious app will just refuse to play content until un-muted ads can be played. 
YES.
 it could also be a carry over from Java, if you learned java first, they still use 'ArrayList' as their generic type.
Thank you thestamp! You are correct that the description table is a 1 to 1 relationship. It is seperated because that is how it is in the API I get the data from so I mirrored it. My understanding is that SQL Server would be pretty quick to join those together in either case. (Although maybe I am wrong about that) The DTO explanation below is good, but at the moment I won't delve too much deeper other than to say, your hints are helpful to me, but out of my league...for now... In my app, I am just passing a full model object straight to my viewmodels via a service/dal call. I am not too familiar with the idea of a controller as I have never done MVC. Well or MVVM until now :) Thank you heaps for your advice and help and time.
Why not just do video of you learning? Do stream of consciousness on the talking part, and clean up as necessary in editing? Half of learning is learning what *not* to do. For those that want a more concise version, you can just provide them a set of instructions on how to get to where you eventually ended up.
Ah, thanks. Right. That is definitely the standard for c#. Thanks for the link. 
Yes, do it!
you could adapt the music store tutorial and make the equivalent thing in desktop app form: https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/mvc-music-store/mvc-music-store-part-1
That's a great way to learn how to swim, by actually swimming. You're gonna learn all kindsa stuff like mvc, databinding, parameterized stored procedures, logins, permissions, security, ergonomic front end drsign, back end architecture and tons of other useful stuff. MS used to teach a great example of these things with the Northwind database example. It may still be around and updated for 2018. VS 2017 is the latest version as of today. MS makes a (perpetually updated) book, c# step by step and all chapters are prerequisites for the next. Highly recommend it. MS also makes [Insert Tech Topic] Step by Step books for just about anything MS. Happy coding! 
Sounds like it would be a wealth of info! I would definitely appreciate it!
Sounds fantastic! The world can always use more high-quality resources to learn from, especially in niche areas. :)
If your app have less than 6 views with successive steps and you don’t have to display the same view multiple times at once (e.g: multiple “Product tile” views in a list), you can store the data on the backing class of your main (and only) window and display each step view inside it as needed, saving the data when changing views. Dependency Injection and MVVM is the way to go on the long run, but is overkill if your task is simple. 
Honestly do it! I create educational content primarily around ASP.NET Core. (Interactive content with a video component) Even if not a lot of people watch it, doing this will likely help you learn and retain more knowledge. Loosely speaking consuming information is pretty ineffective with the learner usually retaining less than 25% of what they learn, doing is closer to 50% effective, teaching can exceed 75% effective. :) When you do it link it, I'd be happy to plug it, and if the quality is decent there's a good shot it could get mentioned / promoted at the ASP.NET Community standup as they promote things being done in the community regularly.
Sorry if that's what you meant.
i'd prefer if you just taught what you know, rather than watching videos of you 'learning' something
I would follow along using vim but I'd love a video series like this. I've always regarded .Net development on Linux as a rather daunting endeavor.
Yes sir!
I presume that linq's OrderBy() likely uses the IComparable implementation in String which, according to the docs: &gt;The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters. Basically, without specifying a comparator, the default is selected because it is designed - in the words of [Eric Lieppert](https://blogs.msdn.microsoft.com/ericlippert/2009/03/30/every-problem-looks-like-a-nail/) - for "sorting a list of strings into a culture-sensitive alphabetical order. ". Why? Because, as one of the comments in the blog post points out, most of the time that is what you want. 
I prefer written content. In any case, I would be happy to have the other things explained. The documentation already exists, but it does not say what is acceptable or what is recommended to do, and it is not always written about the processes of CI, etc.
&gt; You are correct that the description table is a 1 to 1 relationship. It is seperated because that is how it is in the API I get the data from so I mirrored it. My understanding is that SQL Server would be pretty quick to join those together in either case. (Although maybe I am wrong about that) Ahh, I see why. And I can see why the API is structure like that, it was structured like that to segment data into relevant parts to limit unnecessary traffic and performance hits on their server. This isn't an issue when you have full flexibility on what fields are pulled from a datasource. (I'm not directing this at you, but the internet in general in case someone else comes across this. My apologies if this sounds condescending or if you already knew some of this. I'm just covering all the bases because i see this issue a lot in LOB production software) On the surface it may seem ok and simple to mirror that structure. And i understand that this is a simple prototype app used for experimentation, so this isn't a major concern for this specific app. But I have an argument for why you should [decouple your data and API structures](https://en.wikipedia.org/wiki/Coupling_(computer_programming)). But let's say this were a production app, whose database structure mimics the API. Just after you release your app (or a couple years down the line) they announce a v2 of their api that removes and adds a few fields in their "Description" API because they optimized their background processes and added support for new features, and deprecating the v1 structure 6 months from now. You've saved time previously by not having to architect a structure that makes sense for data access and instead is optimized for development, but now the entire savings benefit is lost, now that you have to build an adapter class to transform one structure to another. So now you neither have a database structure that lines up for your business' needs nor how you read or write the data. So, speaking from experience, maintainability of an application is a key piece of well-developed software. More than half the cost of an application is after you deploy to production, so you want to keep that cost down as much as you can. And that means layer abstraction, decoupling, and in overall developing to what design makes sense for the business, application performance, stability and maintainability.
&gt; Unless I write the thing as an inline abomination I tend to also derive the Parameter Class from IDisposable and then wrap the params in a using block, so I don’t clutter up memory. What does your Dispose method actually do?
Is it so hard for ppl to put a link to whatever their blogging about in their post? Maybe there’s a link on a side bar, but via Mobil I have no idea what Code Color is or does or why I need 1.0.1 
Probably cause this code is shit. Learn to compartmentalize your code.
Mostly nothing but call base dispose. AFAIK I can't instantiate classes in using blocks unless they implement Idisposable. Am happy to be schooled so don't hold back. Written via mobile btw so no formatting 
ASP.NET Core is just the newer version of ASP.NET. In typical Microsoft fashion, the naming is *terrible*. ASP.NET Core doesn't require .NET Core. If they didn't rename anything then ASP.NET Core would have been ASP.NET 5.x.
 At the very least you'll learn shit loads and have an interesting line on your CV. Go for it!
Of course there will be interest! I am first in line! Please let me know if you start doing this, give me a link or anything where I could find your videos!
Well, I could be very wrong. I am still learning. But this is my thinking; The idea is to decouple things. For a few reasons; If I raise a message thats the only thing that will ever change in that class. There is less chance of change. Testing is easier. There are less dependencies. Those that are get mocked. I suppose the reason you use the database is to make it easy to pass back, it's likely to update/persist to database anyway.... Another reason is that I intend to have a order simulation class that will execute at the same time...I only have to make it response to the message, rather than going in and adding code in the original class... I'm already messaging stuff for my MVVM UI anyway... Something along those lines anyway.....do those sound like valid points? (I hope so, but maybe not) Thank you
I'd be curious to see at which point the selection is supposed to be changed to reflect the item the user clicked (based on how the DataGridView control is coded). Is the delay due to some inefficiency in the DataGridView's implementation or is it deliberate? Perhaps the DataGridView is coded to only visually change the selection once the selection changed event handler has finished executing. Might be worth setting some breakpoints to see if something like this is the case. Failing that, I would write a JavaScript function to immediately change the style of the old and new selection elements and call it from your codebehind in your selection changed event handler.
It is in winforms c# :). Yeah that could be a possibility, I am trying to post the code block I made that handles the process.
I think this is a great example of overengineering. We are introducing enums into the mix instead of bools purely for readability, for developers who work out of an IDE anyway and can likely check what each parameter is just by hovering over the method.
 public void dataGridView1_SelectionChanged(object sender, EventArgs e) { if (dataGridView1.SelectedRows.Count != 0) { CurrentCustomer = dataGridView1.SelectedRows[0].Cells[0].Value.ToString(); rowSelected(); } } public void rowSelected() { if (selloutfilled &amp;&amp; SelloutToolStripItem.Checked) { dgv2Selection("sellout"); } if (notesfilled &amp;&amp; NoteToolStripItem.Checked &amp;&amp; toolStripComboBox2.Text == "ALL") { dgv2Selection("note"); } else if (notesfilled &amp;&amp; NoteToolStripItem.Checked &amp;&amp; toolStripComboBox2.Text != "ALL") { dgv2Selection("filteredNote"); } public void dgv2Selection(string sellourOrNote) { if (sellourOrNote == "sellout") { GetSellout(this, EventArgs.Empty); /*var changer = from sellout in lstSelectedSellouts where sellout.CustomerID == CurrentCustomer select sellout;*/ dataGridView2.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing; //The following code block is for saving the row and scroll position when inserting/reinserting into the datagridview. int FirstDisplayedScrollingRowIndex = dataGridView2.FirstDisplayedScrollingRowIndex; //Save Current Scroll Index int SelectedRowIndex = 0; if (dataGridView2.SelectedRows.Count &gt; 0) SelectedRowIndex = dataGridView2.SelectedRows[0].Index; //Save Current Selected Row Index //Here we reinsert the data into the datagridview dataGridView2.DataSource = null; // dataGridView2.DataSource = changer.ToList(); dataGridView2.DataSource = Sellouts; if ((FirstDisplayedScrollingRowIndex &gt;= 0) &amp;&amp; ((dataGridView2.Rows.Count - 1) &gt;= FirstDisplayedScrollingRowIndex)) dataGridView2.FirstDisplayedScrollingRowIndex = FirstDisplayedScrollingRowIndex; //Restore Scroll Index if ((dataGridView2.Rows.Count - 1) &gt;= SelectedRowIndex) dataGridView2.Rows[SelectedRowIndex].Selected = true; //Restore Selected Row //We set the not needed columns unvisible. In the other choices we do exactly the same. dataGridView2.Columns["CustomerID"].Visible = false; dataGridView2.Columns["SelloutID"].Visible = false; dataGridView2.Columns["Customer"].Visible = false; // dataGridView2.Sort(dataGridView2.Columns["SelloutID"], ListSortDirection.Ascending); } The commented code is the other way I tried to do it, this is what happens. dataGridView1 is the customer dgv, and dataGridView 2 is the info dgv. When dataGridView2.DataSource gets its datasource 'Sellout' that is a list with specific information coming from my presenter. lstSelectedSellouts is coming from my presenter too, but lstSelectedSellouts is a full list of info from all customers and that gets linqed. Both options have no difference, the visual lagg stays the same in datagridview1. If you need more explanation I would like to give it :)
Easier than googling for project ideas, I suppose!
This. I've found this important in my own experience.
Ah sorry PEAA Is [Patterns of Enterprise Application Architecture](https://www.amazon.co.uk/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420). I can't even spell four letter acronyms right :) EIP deals mostly with gluing stuff together while PEAA is more within the boundary of the application (vaguely) :)
C# is used alot in machine learn primarily for games through like applications like unity. Through the language used for machine learning programs isn't exactly that relevant if you are planning to learn concepts, instead of making a real usable product.
https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet Microsoft now has an official ML Library. Would like to check it out but I got no time unfortunatly D;
You're welcome :)
Although, after some thought, as for the database entry. I don't really know why not pass the message with the details (besides that I'll probably want to be saving to db anyway). Anyone else have any thoughts on that?
Indeed.
I never use them, but you can easily use them to swap values: (a, b) = (b, a).
I'll check it out when I have the time, thank you!
I haven't had experienced any machine learning libraries with c#, but here are some useful links I've found that relate to those kinds libraries: https://www.quora.com/Is-C-helpful-in-machine-learning https://www.reddit.com/r/MachineLearning/comments/3uju9s/machine_learning_libraries_in_c/ 
Thanks. I'll stick to C# for now.
Also you may want to look at tensorflowsharp: https://github.com/migueldeicaza/TensorFlowSharp. It's a wrapper around tensorflow's c library. That said a bit more of a pain to get up and running with compared to the python library.
http://accord-framework.net/ The documentation could be better, especially for a beginner. It's open source though, which is good.
Consider using Dapper rather than EF? It's smaller and quicker...EF is a whole tutorial series on its own.
Removed: Rule 4. There are some here: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F
I've used Accord.Net in one project so far, but it wasn't exactly the bets experience. The whole 1d/2d array with extension methods was quite clunky compared to something like numpy in python. A lot of the operations aren't properly parallelized/vectorized and instead consist of nested for loops (e.g. the correlation matrix function, which also wasn't numerically stable, sometimes yielding correlations &gt;1 or &lt;-1) and in the end I had to use the Lapack C library for SVD and QR decomposition instead of the Accord.net ones due to performance and stability reasons. So in my experience, I wouldn't use it for anything other than a hobby project.
The industry standard is of course python. C# has some ML libs but they aren't nearly as well tested or as popular. 
Hi op, this is the wrong subreddit for this kind of post. Try /r/learnprogramming and don't forget to read the sidebar :-) good luck.
Oh, sorry! Thanks for the recommendation though, I’ll do that now.
I've had the [ML.NET GitHub repo](https://github.com/dotnet/machinelearning) in a pinned tab at work for awhile, now. Right now, the biggest weakness of the ML.NET library is lack of documentation, getting-started docs, and samples. (Thankfully, though, there are in-progress issues for all three of those: [1](https://github.com/dotnet/machinelearning/issues/140) [2](https://github.com/dotnet/machinelearning/issues/160) [3](https://github.com/dotnet/machinelearning/issues/203)) In the meantime, I found that there are some decent starting points for the various different types of ML models under the [Microsoft.ML.Tests](https://github.com/dotnet/machinelearning/tree/master/test/Microsoft.ML.Tests) part of the repo. 
They're both "old" but they reflect the circles our industry goes though. :) Seriously well worth a read :)
lol, well it's too damn complicated :) I would suspect that's why the circles occur. I gather only a minority really know what they are doing and they never have time or inclination to be in charge. (That PEAA one has really good reviews, I have ordered it, I seen that fowler guy around a bit)
He has certainly been around :) He has a lot of experience in some pretty challenging environments, so while I never advocate taking anything development related at face value, he's been consistently progressive for a couple of decades at least. 
If you are interested in neural networks and simple ML functionality, you can check [CNTK](https://docs.microsoft.com/en-us/cognitive-toolkit/cntk-library-managed-api) which has both Python and C# support.
c# has unsigned types!
Biggest learning hurdles will be the details of WPF and differences on how things like build and app configuration are handled. The code itself is syntactically nearly identical and there are a whole ton 1:1 and near 1:1 features in C# so you wont feel without though you will feel lost at times. You are going to love the power of full lambda support.
&gt; What does one "give up" by developing on Linux instead of Windows? Visual Studio
* Use MSSQL (Microsoft's SQL Server) for starters. You can download SQL Server Express [here](https://www.microsoft.com/en-us/sql-server/sql-server-editions-express) (it is free). * Use the latest VS2017 Community (free). Download [here]( https://www.visualstudio.com/downloads/). * Use Winforms or WCF for the UI technology. Winforms is fairly easy to pickup but isn't "in style" whereas WCF is "in style" but has a much steeper learning curve. * Use Entity Framework with the [code-first approach](http://www.entityframeworktutorial.net/code-first/simple-code-first-example.aspx) if you don't want to mess around with any serious SQL queries. * If you want to mess around with SQL queries, download and install the latest SQL Server Data Tools for VS2017 found [here](https://docs.microsoft.com/en-us/sql/ssdt/download-sql-server-data-tools-ssdt?view=sql-server-2017). You'll be able to create a SQL project in your solution, just like a C# project, that will help you design your database. If you go this route, you can either use Entity Framework's [database-first approach](https://msdn.microsoft.com/en-us/library/jj206878\(v=vs.113\).aspx), LINQ-to-SQL, or if you are feeling really ballsy or are motivated to learn T-SQL, use the built-in `SqlConnection` and `SqlCommand` types to execute in-line SQL strings and then translate the results into your own data objects (effectively creating your own object-relational mapping). * Be sure to learn related patterns and best-practices. Learn how to avoid SQL injection attacks if you are rolling your own ORM. Learn MVP for Winforms or MVVM for WCF. Learn how to encrypt sensitive information and how to avoid storing sensitive data in plaintext. Learn the S.O.L.I.D programming principles and be self-disciplined enough that you apply them to everything you are designing. I don't know what you know so I apologize if I've suggested things you were already aware of.
Haven't written Kotlin but from a brief scan of the lang doc on it, it is very similar. Like Kotlin, C# lambdas are first class objects than can be constructed inline, passed around and exposed like any other object.
Ha I’m doing the same thing as a side project. It’s been rly fun. Good luck. 
LINQ is wonderful. Gotta master it.
Your question is not completely clear but I think you're looking for LINQ. Look here https://stackoverflow.com/questions/10333619/how-to-convert-linq-query-result-to-list?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa. 
`TCP/IP` and `Sockets` are a good place to start researching if you plan to implement a `Distributed Application` (i.e some headless program that lives/runs on every computer within the network and reports information to and executes commands from a master program on a single PC) This method requires you have a process, automated or manual, that distributes the DA to every domain PC. Similar to the `TCP/IP` option is a kind of "Hacky" workaround using a combination of `PSExec`, 2 C# programs (`Data Gathering Console App` and `GUI Process Executor App`), and a `.BAT` file. PSExec is part of a remote execution toolkit, within it is a flag that allows you to enumerate through every windows PC in your AD Domain and force execution of a program on that machine. Using the `GUI Process Executor App` you run the `.BAT` file that contains the `PSExec` arguments and FilePath to your `Data Gathering Console App` and before long you have your data. This method can also be employed for installation and deletion of programs. If you are only concerned with checking if a PC/Device is active on the network you can use built in `System.Networking.Ping` Class. If you know how your networks subnet is setup you can build a simple loop that will `ping` all valid IP addresses and give you a response of up or down. Now if you want to control your network even further than just Computers then you should implement some form of `SNMP` Library to your application. `SNMP` or `Simple Network Management Protocol` is incredibly powerful, it allows you to get information from nearly any device connected to a network. `SNMP` is way to complicated to explain here but you can get almost all basic information about a device using `SNMP` and some devices provide even more information than that as long as you know the proper `MIB` codes. The one I've used in the past is `SNMPSharp.net`, the documentation is pretty bad, and examples are few and far between but once you get a better understanding of `SNMP` itself the library will make more sense. I've written programs that can read printer ink and toner levels, and even enable/disable individual ports on smart network switches. I'm sure there is even more than this. Hope this helps.
 Really? I found it much easier to setup then the python version \(maybe because I know C# much better than python :\)\). Just install nuget, download cuda, go
I meant it more from the standpoint of learning. Not as many resources available for the C library to figure out what the heck went wrong.
I've heard, from a friend of course, that they set a cookie over18=1. Try sending that along.
That sounds like it would work. How would I send it to the webbrowser?
Sounds good, that would return the list without looping. Thanks!
You could just make HTTP requests instead and parse the returned pages with an HTML parsing library.
You check the Gonewild bot? It works well. 
Have you tried using the api? https://www.reddit.com/dev/api/ Create and login with an account which has over18 checked in preferences maybe
I still disagree. Just define your method signature as Sort(book sortAscending), problem solved.
&gt; Use Entity Framework with the code-first approach if you don't want to mess around with any serious SQL queries. I agree with what you have said except using entity framework. Do not use entity framework unless you are either extremely profficient in both C# and SQL or performance does not matter in the slightest. The only exception would be if you are binding to SQL objects (stored procs, views) you have created yourself but that nearly defeats the purpose of using an ORM. Just ask in a SQL orientated forum what they think of ORMs like entity framework for a perspective from the other side of the DAL. Any SQL database admin will hate you if you use entity framework and with good reason - it WILL slow to a crawl once your DB reaches a couple of gigs in size and be a nightmare to fix. 
For `CharSet.Auto` structs the marshaler will marshal `char`s as single byte or two byte depending. You can use `LayoutKind.Explicit` to force a two-byte layout even for ANSI platforms, although I think in this case that would happen anyway due to alignment. I *think* this should work, without having to emulate the union with multiple overlapping fields: [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Auto)] struct CHAR_INFO { [FieldOffset(0)] char Char; [FieldOffset(2)] ushort Attributes; }
Not sure why you would like to avoid looping, its a valid approach. However - collecting the results from sql into a datatable would work: https://stackoverflow.com/questions/1933855/how-can-i-retrieve-a-table-from-stored-procedure-to-a-datatable?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa Then use something like: https://stackoverflow.com/questions/15129770/one-columned-datatable-to-liststring?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa To put into a list if you so choose. Or you could write a recursive CTE in SQL and return as a delimited single row string but thats a bit pointless. Another option would be a SQL user defined table type but I have not seen them used in this manner and I usually avoid UDTs if at all possible due to the performance issues they have (you cannot have a nullable column with an index and you must have a index defined in the type creation rather than added after the inserts what you would do with a regular #temp table).
I remember buying a copy of this from the university bookstore back in the day, wasn't cheap as a student but I used it a lot. 
I still use and love winforms, never really got the draw of WPF. 
My friend wants to know if there is a link to download it or its git? 
https://github.com/4pr0n/gonewilder/blob/master/py/Gonewild.py
Events are sort of publish subscribe, but the full pubsub pattern a) can span machines, b) usually includes a way to subscribe to x or x.y in a uniform manner. This implementation uses events but makes a few mistakes even for a demo.
In the event section you don't try catch or better try catch around each item in the invocation list of the event. This allows one client to screw up without ruining the experience for all downstream subscribers. Have a look at GetInvocationList and why it's handy. Hope that helps :)
I’ve done couple Tutorials in ML.Net, seems to be fairly straightforward and user friendly. And by that I mean Things mostly behave the way you’d expect them to
Could you link your tutorials here?
Yeah, the way I wrote it, it could have been interpreted both ways, I edited it for clarification 
If you put a break point at the beginning does it hit it?
Removed: Rule 2.
Parse the children using json ? i.e: https://www.reddit.com/r/gonewild.json
I'm not really in the business but I had a go at CNTK and it wasn't really hard at all, worked brilliantly.
I took a look into HTTP requesting. It took a while but I managed to figure it out. Thank you very much for the help!
Was it this one? https://github.com/CrustyJew/RedditSharp
It wouldn't be valid json if you did that. Just get them to escape it correctly. If they're writing raw json (which is a bad idea) they should know how to escape stuff.
You really should use the API. Reddit will very likely ban your bot if you are scraping
Syntactically C# and Java are similar but that's almost as far as the actual similarities go. I am now a java developer after years on the .NET side. I've not done a ton of WPF, I actually prefer win forms but I seem to be a minority in that regard. Kotlin is a phenomenal improvement over Java and C# will show you good pieces from both. So dependency management is different in .net, nuget doesn't have as many libraries available but it's really simple to use and ties in well with Visual Studio which leads me to my next point. Visual Studio is just a spectacular IDE and it makes Eclipse look silly. Learn Web API for services, entity framework for ORM data access, LINQ because it's just awesome and get ready for the good times ahead. Good luck.
Hi all, Thanks for the input. Initially, when I placed a breakpoint in the code, it didn’t hit it. Had to rewrite some bits and also was able to attach the program’s process to a debugger and watch it run. As a result, I was able to find the issue. Thanks again guys. Much appreciated!
This is the correct way IMHO. Rather then creating 8 data grids the same, create one user control and use it 8 times.
I was looking at this the other day. I don't think ML.Net does any image processing either, unless I read that incorrectly 
I picked up C# really quickly. My background was PHP but I started making Android apps and from Android I just picked up C# really quickly. I love C# and now it’s my main language followed by PHP then Android.
UWP app with EF Core 2. In terms of resources, there's a lot there, just don't rely on us to tell you how to use google. You'll be good as long as you get momentum. If you want a simple one, do a flashcard app, with questions about .net core and C#. Two birds with one stone!
WCF is a webservice technology. I think you mean WPF. Thats a pretty basic mistake right there.. tbh, all the rest of the post is clearly too advanced or vague for what OP wants to do. They just wanna code. 
pfft, Entity framework is fine. Don't listen to the SQL DBAs they're precious.
I'm not making a bot.
Thanks for the offer, but I've already solve the issue.
I hear it's a great way to end up in prison.
pffffft. You are absolutely right. I was actually working on our WCF services at work when I responded and had WCF on the mind lol. Thanks.
They consider anything "automated" outside of the API to be a 'bot' if it is not actually a user.
lol hahaha... poor children :( 
Don’t use a browser control for this , you should be using httpclient and the reddit Json api, it’s easier and created specifically for projects like this. While using the browser control might work , it’s inefficient. It’s like trying to hammer a nail with a rock instead of a hammer . It will work, but it’s not using the correct tools and will cause problems that you can completely avoid (one of which you’ve already hit). I’ve written several Reddit integrations, inclusive apps that display pics (sfw) in a site and app using both c# and angular. 
Bot's are used by actual users. Any programatic accessing of reddit is a bot by convention.
At least in the US, that pay is incredibly low for a senior. 
Would you hire remote? 
[Autofac](https://autofac.org) is a mature, full-featured DI framework for C#. Its registration/resolution system is a little different than that of Dagger, but the inversion of control concepts are the same.
I’m not struggling but thanks for playing.
https://media.giphy.com/media/MtWJ2pJx7CbJe/giphy.gif
Unless you want mystery to be part of the appeal!
I think you didn't read the entire post I mentioned the GetInvocationList pattern in my last section Exception Aware Event Raise in second example https://kudchikarsk.github.io/publish-subscribe-design-pattern-in-csharp#ref5
Just so you know, if you do it “without looping” (for whatever reason), the code you’re calling will still be looping. Why don’t you want a loop by the way? It’s a pretty fundamental concept, going right down to the CPU level. 
Yeah, we only have to pick up the mess ef creates a couple of months after you devs have moved onto another project. 
Tried to get started this week with Azure and C#, thought I had it all set up but couldn't 'install' one of those tutorials. Had to install a separate tool (ML workbench or something), despite having installed just about all ML related things during the Visual Studio (enterprise) installation. It's just frustrating to find some good getting started docs. It's like they skip steps. 1, 3, 6, 7, 11. Neglect to mention some crucial stuff. Or maybe I'm just dumb and keep misinterpreting the docs. Lot of the C# documentation seems the same way. Some things are specific to WPF or Windows Forms, but those tutorials just assume that you're using the one that does have access to it and don't mention what they're using themselves. Just put a snapshot of what you're using at that moment for the tutorial so that people can compare and figure it out quicker!
I blogged about this a few years ago [HERE](http://www.nimaara.com/2016/02/14/cleaner-pub-sub-using-the-event-aggregator-pattern/) and made available a library which you may find useful: [Easy.MessageHub](https://github.com/NimaAra/Easy.MessageHub)
Pluralsight?
Microsoft virtual academy has some great courses for free for all levels. I used their .net core training to get up to speed when I switched jobs. Pluralsight was my favorite for general c# courses. 
I develop mostly middleware and backend software in C#. Puralsight with cover most of that. Entity Framework and Dapper work exactly the same as they do for controllers, albeit BCP is a great utility for massive amounts of data. Services and stream processing (akka.net) are also covered. I think if you've worked on front end development, backend development is very familiar territory. The exception being is how one executes unit tests. If you develop with a strong emphasis using patterns when apporiate, SOLID, DRY, GRASP and data access optimization, it's actually nothing new. It's all covered in Pluralsight and it's one of the tools I used to get an MCPS in C# If your company is paying for it, I would suggest it anyway. For front end development, Pluralsight is constantly being updated with new courses as the landscape changes.
TransactionScope issues are really tough to debug. Do you use async and await to access your database? Most db libraries use a connection pool approach, and since TransactionScope is something that attaches itself on a thread level, one missed await somewhere in your code can lead to threads being released back, picked up by another execution context, and then db actions trying to attach themselves to the active transaction; and then when the active transaction is in a closing state, the thread you're currently executing on will not be able to complete the db query since the transaction is no longer in a valid state and will throw these exceptions. This is a pain to debug since the code that is responsible for not awaiting is likely no where near the code that threw. 
Pluralsight 
What experience do you have e with other languages and platforms?
For all of you guys recommending Pluralsight, they only have the subscription model available? Or do they have a pay-by-course model? Because I'd like to do the C# courses, but I don't want to make the CISCO certification ones, for example. 
I think it's subscription only.
&gt;&gt;(Oracle, DB2, MySQL, old dbase shit), my T-SQL queries &gt;*nightmares* Yea I was doing a lot of system integration/ETL work at the time, so whatever the client was had was what we had to work with. While it was a pain in the ass, I got to learn SQL up and down and left to right. I left that job more than a handful of years ago, and still use things I learned there all the time. &gt;It even has a SQL Broker style event system. That's like a step above MSMQ. If you really need that functionality, take a look into RabbitMQ and Azure Service Bus &gt;I figured I'll buy a MS SQL license for my private projects (&gt;10GB tables) as they have the best support with the stack I'm good at.. saw the price and slowly walked backwards. SQL Server Express will support up to 10gb tables. If you can find a way to manually, via the application, partition the data into different tables you might be able to get by there. Frankly, Postgres was the only thing that I would recommend that's free to deal with tables that big. The reason why I know about partitioning was because I was working at a biotech company that was using Postgres and had some tables that were getting to the point where partitioning was needed, so Postgres won't bat an eye at 10gbs &gt;&gt;Postgres are that it sucks at handling parameters, as it's just not very intuitive and clunky &gt;As in for stored procedures? Stored proc parameters can be named, so no issue there. More like when you have a parameterized query you had to use an *$1, $2, $3* for the parameters. It worked, but it was just a bit clunky. Looking through the documentation (which is great for Postgres BTW), it looks like this was resolved in version 9.2. The latest version is 10.4, so I guess it's a non-issue at this point. &gt;once that changes (efcore2.1 supprtahh) I'll give it a 100% go, postgres sounds great. Definitely do. I think MSSQL is one of Microsoft's best products and Postgres is right up there. &gt;Did u ever checkout ORM's? It sounds like u could benefit from using one (guessing because of the sql mentions). ORMs are a loaded topic for me so I won't get too into it. I have used EF here and there for work, and found it to be a very leaky abstraction. My current approach is to use a micro ORM, Dapper, that bypasses all the boilerplate ADO.Net code while still keeping me fairly "connected" to the SQL itself. Overall, I find a lot of IT professionals (devs, but also admins and DBAs) treat the database as some sort of Fabergé egg that shouldn't be touched because one bad statement could screw up the whole DB. Many devs would rather learn an ORM than learn the basics of SQL, and I think that's a problem. I'll get off my soapbox now.
I’ve subscribed to Pluralsight for years, and even if I only watched the C# content, I could not watch all of it. they release a good dozen course per week on a broad array of developer content; I find at least a few courses each week that are compelling for my interests. Each course could be a multi-day workshop, and the course authors are top notch: Scott Allen, John Skeet, Shawn Wildermuth, Julie Lehrman (sp?). 
&gt;still use things I learned there all the time. Wherever I go, knowing how DB's work and SQL is always useful too. &gt;If you really need that functionality, take a look into RabbitMQ and Azure Service Bus Right now I don't need it but for adding something like a seperate signalR service I rly like that functionality. I'm gonna checkout RabbitMQ, never heard of it thanks for the hint! I'm trying to stay away from Azure service for private Projects as I fear once I got some things in azure I'll never get out haha. &gt;MSSQL is one of Microsoft's best products Agree, their software/development suite rly upped it's game in the last years. .Net grew alot &gt;Fabergé egg that shouldn't be touched Ha true that, but it could happen with a ORM too. It's good to know SQL basics and the arounds of a db but programming wise ORM's are just too good not to use, delivering all the DTO's and such and allowing for easy linq statements that get translated to near perfect sql statements. The seperation ORM's give is pretty comfy aswell, once the DB changes I can just update the ORM in a click and all of my code adjusts in a blink.
Never used pluralsight. Do they have up-to date .net core stuff?
Is that it ? https://www.pluralsight.com/paths/csharp Or as guest I can't see all the content ? 
Ay!
Yes.
That error wont affect ur compilation/runtime Pretty sure this is because you are missing the pdb file (duh). The error comes because an error occurred in the corresponding .dll (here: the utility dll). You can try downloading a fresh dll again, usually they come with the necessary xml and pdb files packaged.
Thanks for the answer man! yeah i read that, but its making it hard to debug the program, at the learning point im at need to put breaking points very often and cant get through them till i fix this. i even try to reinstall the software (fresh batch of .dlls ) but still get the same error while debugging 
Hmm Ill try to test the utility when in a couple minutes, but yea I feel you, error messages are nice :)
It's subscription. You get all the content. If you sign up with MSDN (paid or unpaid), you can try it for 30 days free.
In the context of OP just wanting to make something, I don't think it matters. I'm sure that they'll have a dialogue with senior developers and senior database administrators that will inform whatever project they work on next to ensure that the needs of database efficiency and data design are met.
If you're needing something a little more abstract to help get around shop buzz about microservices and all that, I enjoyed this two\-part article: [https://www.infoq.com/articles/monolith\-defense\-part\-1](https://www.infoq.com/articles/monolith-defense-part-1) It's just a defense of a modular monolithic pattern.
So where does your Utility.dll lie ? Whats the full name of the .dll? Where did you get it from ? Is it microsoft or some other ?
in another breakpoint im getting the same thing but with another dll this time revitapiuilink.pdb :S
C# has a [memory mapped file type](https://msdn.microsoft.com/en-us/library/system.io.memorymappedfiles.memorymappedfile%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396)
My best bet here is going back to wherever you downloaded the dll's, and make sure you got everything with. If you can give me a link to where you downloaded it, I can try as well
oh shit i fix it! i unchecked the Enable native code Debugging under project prop. debug. also checked the "enable just my code" option in Debugging . i have no idea why that works but it does (i think lol) thanks for your time man!!! 
It would be the process' responsibility to handle memory mapped file references. Unless it exposes args specifically for that purpose, I have to assume you're out of luck.
No - that's the prescribed learning paths, but I don't use Pluralsight like that. I watch individual courses (typically from the new releases section). Type C# in the search box. At the bottom of the first page of search results, keep clicking "load more". 
Your class Player is not public.
Yeah it's pretty good.
Also, you can name your parameters game and player, then inside the constructor assign it with this.game = game; this.player = player.
God speed brother, glad to be a wall to bounce your ball off :)
I'm not quite sure what you mean with the stream not being seekable, because ffmpeg can encode radio streams and all other piped stuff without any problems. If it helps you can pipe the output of ffmpeg with `ffmpeg file.mp4 pipe:1` to stdout and read from it with something like `ffmpegProcess.StandardOutput.BaseStream.Read(buffer, 0, length);` just make sure to set `RedirectStandardOutput = true,` in the `ProcessStartInfo`
Huh, that's a very interesting approach, thank you!
Ok thanks guys!
It's subscription based but it's worth every penny.
Visual Studio 2017 Community Edition has support for Python and R. I haven't used either on of those parts of it yet, but they are there.
If you already know .NET object model - you will likely find PowerShell much more useful than Python.
Very good point regarding powershell. I use powershell as my command window, and can get by with basic commands. Despite working through several Pluralsight courses on Powershell (and a few Powershell paper books), and trying to use it more in practice, its never fully gelled for me to use for longer scripts. I definitely like its terse, functional form. Would probably use it more if I did multi-server management, system admin, more dev ops. Most of my own use cases fit better with writing c# utility console apps, python or node scripts.
I prefer the m_game and m_player convention for member fields. 
I'm a day late here but let me say that it's definitely a good way to learn. I'm also new at programming and just destroyed myself for the last three days trying to get resource libraries to work on a wpf class library project I'm building as an AutoCAD plugin. I just now got it working right and even though I lost a lot of hair in the process I did learn a lot. Came here to relieve some stress and saw your post. Go out there and kick butt! 
Obviously it's not allowed to have an opinion around here
Fair enough.
All opposed?
I think people just have a hatred of Hungarian Notation and the m\_ convention is a bit of a throwback to that. It is cleaner to just use this or self in that you aren’t dirtying your member names, and you are explicitly stating, and with compiler/interpreter verification, that you are intending to access a member variable. That said, I’ve also seen the convention where you instead dirty the parameters. Not by doubling some characters in a Swedish fashion. But to instead prefix then with and underscore. Finally, although I disagree with the m\_ notation, I did not downvote you. This is a practical opinion, and is even encouraged in certain environments.
No. I will report you for your crimes against humanity.
The thing is, Hungarian notation is quite useful. I mean real H. notation, not the VB bullshit where you use sName and iAge, but the real version that adds information like "is this a member, static, or thread local variable?".
Actually the C# compiler, with FXCop or Roslyn, will enforce your intent regarding m_ and s_. It's been there for as long as I can remember.
and just when i thought i was out, VS pulls me back in. so after the changes i can debug the program with breakpoints but if there is an error in one of the breakpoints i don't receive it, the program just exit the breakpoints and moves on :SSSSS
I spell all my member fields backwards.
&gt; If you already know .NET object model - ... Iron Python is another option. 2x, not 3x, but it just had a release in February, so seems like it's still active ...
Why?
this.isAJoke
It looks like this div in data-tip isn't actually in the DOM. I'm guessing this is a custom tooltip of some sort. Try By.CssSelector(".mark.normal-monster") to find the parent div, then you can pull out the data-tip attribute and do whatever checks you need to do.
Thanks! Worked like a charm. I don't understand CssSelectors that much and didn't think they could be used in that way.
Meow.
Asp.net identity is easy to use, not sure if it's on the way out for something better in .NET Core though
Lol ikr I didn’t know what else to do
Yeah, but that still has all the downsides of Python.
Asp.net identity is a general term for the user identity classes. Windows or LDAP, Forms, exetetnal (SSO) are the authentication types.
How would I go with that database route? I imagine after the windows has authenticated the user then I just do a lookup to find the role(s) that the user has? But how can I get it to work with the authorize attribute? 
You can implement the RoleProvider class, then specify your class name in the web.config. https://msdn.microsoft.com/en-us/library/system.web.security.roleprovider%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396 examples: * http://kitsula.com/Article/Custom-Role-Provider-for-MVC * https://www.codeproject.com/Articles/607392/Custom-Role-Providers * https://docs.microsoft.com/en-us/aspnet/web-forms/videos/how-do-i/how-do-i-create-a-custom-membership-provider
Before you go too far down this route, I would make estimates of the work required. I suspect you'll find that writing an email request to the boss for the group creation will be far less work.
Use a named pipe?
Uncle Bob would probably argue that if you have so many members/methods that you need H. notation to understand what they are, your class is very likely too big. That's not an argument against decorating your names. Rather, the need to decorate is often indicative of a more fundamental problem with how you're organizing your code.
Both /u/jamesewelch and /u/ , You took the words out of my mouth.
Put the switch statement in a function that takes an int as the parameter and call recursively it from your case statement instead of using goto.
What is your functional purpose? Not knowing your functionality, I'd look into using methods. Call initial from main, pass to secondary if criteria is met, pass back to initial if secondary criteria is met.
Yeah, that makes sense. I was just seeing if there was a way to work through without using a method. Thanks!
There may be, but it's so unusual that most C# coders wouldn't know (including myself). Generally best to avoid complex language edge cases for readability.
 The functional purpose is that I'm creating a command line interface in a console application for a game. The application takes a command "status", "inventory", and "move". Based on the user input, the commands then branch off into their own commands almost like a data tree like so: * status * health * name * stamina * class * inventory * active * storage * equip * move * up * down * left * right But I think that using methods makes the most sense. Thanks for the help! 
Yeah, I think wrapping certain higher level cases instead would be the best workaround as I can call them directly.
Nice name btw. :D
Seems like you would just use do/while: case 3: do { string input... switch input case "b": break; } while {input == "a"} 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programminghorror] [Trying to perform recursion in nested switch statement with 'goto' : csharp](https://www.reddit.com/r/programminghorror/comments/8m7ndx/trying_to_perform_recursion_in_nested_switch/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I wouldn't use recursion at all for that. I would just process the next part of the command. Unless you have dozens of primary functions such as Status, Inventory, and Move. I would also assume that all of the command is on one line. So just "move" would simply do nothing if up, down, left, or right were not the next part of the string. This is basic command line functionality, and it's already designed. Just copy the basic design.
Yeah you just want a loop. Not recursion. Recursion is something calling itself over and over again. Everytime you call it, you leave the current stack frame and enter the new frame of the method again. This creates a stack that eventually has to have an exit condition as to not overflow the stack. When this exit condition happens each method return goes back to the previous method call popping the stack. This is not really what you are after. You want a simple menu system. Your menu should only contain the top level menu item. Each subsection should be it's own method or even class. This way when you start adding sections it is vastly easier. You don't have a huge code block hat is difficult to debug. You want code that is separated by modular functions. Imagine that you have 2 menues and both of them share the same subsection. Would your create your code twice, or just reuse the code through and existing method or class? Clearly the 2nd option is cleaner, more reusable, more testable, and more debugable.
I used to do that, now I simply prefer "_game" and "_player". 
The "PrtSc" button on your keyboard will capture a screenshot to the clipboard, which you can then paste with ctrl-v into an image editing application... You obviously have the ability to crop an image... It would make it much easier to erase the squiggly blue line, because the background will be a solid color.
There is a way to do it - use a loop. Another poster, JamesG269, has already posted this solution, and it’s the one I’d use.
A few things, EF already implements Repository and UnitOfWork, so it's possible you're repeating all that work for no good reason. If it's an abstraction because you think you're going to change the back end at some point, well there are different ways of doing it. On DTO's, it really depends on what your view/Controller is doing. If you're using all or most of the entity that EF spits out, and if that entity is going to be sent back to EF to be updated AND you've got a fairly flat app that's just a website connected to the database, just use the EF entities. The value of DTO's is that they represent only the data you need AND do so in a way that doesn't tie them to technology (like EF). So it's easy to serialise them and send them across process boundaries. By having DTOs that represent only the needs of the destination system you end up with an application that more likely represents the needs of the system. So that was a bit wanky, imagine you have a table that contains the lengths of each named bone in the body. (Usually you'd have one row per bone linked to a parent person record, but I'm short on good examples this morning). So this table is 600? columns wide, one column per bone. Now imagine you have a service which is interested only in heads, so it wants the 6 or so numbers related to the bones in the skull. You could send it ALL the 600 columns but that's a waste, so you'd create a DTO which contained only the head bones. This makes the service quicker over the wire, expresses the intent of the service and so on. If you're creating DTO's automapper will, relatively simply map a full entity to the correct fields on a DTO. But it's not essential to use it, you can do the mapping yourself. If it's a simple one to one case. Automapper provides some functionality for more complex cases. All the other advice you're getting is a mix of weird and ok. No one has to create interfaces, but we do because they allow us to Mock classes for tests. They also allow you to swap one implementation with another implementation (as long as they implement the same interface) and you can reduce the surface area by implementing multiple interfaces (also helps with testing, but arguably you should be making smaller classes. No idea why you are being advised not to create interfaces for the DAL or Infrastructure (service layer I guess) Most loggers implement an interface for their base type anyway, so it might just be the way you've written that bit that is making it hard to decipher. IOC is good, it helps everywhere. Give SimpleInjector a go, just have a play around to see how it works. It's one of many, but I like it because it's simple and fast. No where did you mention tests (Unit) and that might be the bit you're missing the thing that holds all the other stuff together. Take a look at XUnit or NUnit perhaps and Moq as a mocking framework. I dislike mocks generally, but they're useful in moderation (Classicist you see). It sounds like a fairly simple system, so try and get a PoC working of all the technical bits you need and then work out how to get all the other bits you've mentioned working. My concern is you're being given advice that's good for some cases but not all cases and they're not explaining which case is which. 
I created an app (basically CRUD) with a client server model, WinForms on the client side and ASP.NET Core on the server side. Used LiteDb with ASP.NET Core, no ORM needed because it was NoSQL. 
What I've Done in a similar project is inject the appropriate service from the service Layer via an interface in the controller constructor that needs it. The service layer contains the DTOs equivalent of the model. It usually is a copy of the model with only getters and setters, containing no logic. Let's say I have an Employee DTO and an Employee service in the service Layer. I inject a repository interface in the service layer, IEmployeeRepository. public IEnumerable&lt;EmployeeDTO&gt; GetEmployeeList() { IEnumerable&lt;Employee&gt; employeeList = _employeeRepository.GetEmployeeList(); return AutoMapper.Mapper.Map&lt;IEnumerable&lt;Employee&gt;, IEnumerable&lt;EmployeeDTO&gt;&gt;(employeeList); } Once Automapper is configured it's as simple as matching the DTOs and Entities like in the code above. There might be better ways but that worked for me. I'm not sure how to answer your other questions though.
An "easy" project I've done to learn about WPF was to make a simple Address Book in WPF. You could start with the code behind approach and then refactor it implementing MVVM principles by using data binding via ViewModels. It implements simple CRUD with a database of your choice, you could use an XML file or Entity Framework for that matter. Once you master these parts you can improve it by refactoring and implementing patterns, unit tests and so on. 
https://www.youtube.com/watch?v=rtXpYpZdOzM I referred this to implement the UnitOfWork and Repository Pattern. Okay, so DTO makes the data objects light. I will have a look at AutoMapper. From what I am understanding, when I make a call from Service Layer to a DAL method, I will get an output that will be a DTO (Because, we might perform joins in the DAL and it will result in a custom entity which can be our DTO and obviously DTO are light weight). I then Map the DTO to my Business Entity in the Service Layer, do some operations and then pass that business entity to UI Layer, the UI Layer will again map the entity to the Viewmodel using AutoMapper. When I am submitting the data to the service layer from UI Layer, I will send the Viewmodel, in the service layer the automapper will map it to a business entity, do some operations and forward it to the DAL. I am creating interfaces but I am not too sure if those interfaces should be in the Service Layer or the DAL. I have learned testing briefly however, haven't implemented it yet, it will take a little bit of tinkering before I get comfortable with that. I do not have any seniors at the place I am working at, hence trying to figure out everything and connect the dots.
DTO's are literally Data Transfer Objects. Their job is to ferry data between things. So if your system is relatively simple, you can use your EF entities as your DTOs and Business entities. Testing IS hard. You'll look at a dozen really simple examples and it will make everything seem simple. In real life it's a skill in itself. Simplest advice I can give: Give the test a long and meaningful name. If you can't think of a meaningful name, you probably aren't testing the right thing. Also add information to the test. Even if it's a comment. A lot of people shun comments on tests because "purity". Just remember that in 12 months time you'll have changed something in the system and it will break that test. Knowing why you wrote the test at the time will help you figure out if you made a valid change to the business logic, or an error. Having no seniors is fine. It's surprisingly common. I've almost always been "the senior" even at my first role where I was the only person doing dev stuff. I say this quite a lot. Treat code as a liability not an asset. If it's a muddled jumble of business rules mixed in with UI stuff mixed in with infratructure, you're going to have a bad time when you need to replace it. Keep business logic in one place if possible, never in the UI. You'll get the hang of it. Don't worry about making mistakes, just make software that works first, and worry about making it pretty as you learn what pretty means. Working software &gt; perfectly architected non working software.
I pasted your exact code into an empty MVC 5 project and it works as you would expect. Maybe try trimming everything else out to make an [SSCCE](http://sscce.org/)?
Wow! Thank you for your such explanatory and concrete answer! I will look into and do the research. I greatly appreciate it!
It could be seen as a violation of separation of concerns, so you're right to be suspicious.
Is the game just a way for you to learn C# or is the game itself your actual end goal? If you're just using it a learning experience it might be better to start with something a bit simpler. What you're trying to do here is write your own Domain Specific Language - that's quite a complex topic. I would spend some time looking at the fundamentals of Object Oriented programming and SOLID principals first.
Then you may have a case for aspect oriented programming, here. Seems like you might have a cross-cutting concern.
So a good example to think about is a ViewModel that has a list of models. The binding is to the viewmodel BUT all the template binding goes to the model. Your case is similar. Assuming this popup is an underlying component of the view in the same way a list box is. You provide a model that can be templated. The important thing is the ViewModel controls the presence of the radwindow and provides that popup the model to be template bound to. The stink to watch out for is if you have logic beyond binding in the model. 
https://github.com/jhermiz/lcsk
 using System; public class Program { public static void Main() { int inputInt = 3; switch(inputInt) { case 1: break; case 2: break; case 3: LABEL: string inputString = Console.ReadLine(); switch(inputString) { case "a": // probably an intentional limitation, but it looks like // switch cases only function like labels in a very limited // set of ways. You can get there with an explicit label, // though. goto LABEL; case "b": break; } break; } } } All the other advice is correct, though: you should just use a loop.
&gt; So a good example to think about is a ViewModel that has a list of models Great answer! I use ViewModels like this it saves tons of time: public class OrdersViewModel&lt;Order&gt; : BaseViewModel { // Where Order is a DTO }
I'm sorry, I had \(erroneously\) assumed that by eliminating all even numbers \(save for 2\) I thought that was sufficient to satisfy the prime number, which I realise now, is only part of the overall solution. 
Can you explain what you believe prime factorization is? You appear to know what a prime number is, but your understanding of the factorization component seems lacking. Your code as written is simply detecting odd numbers equal to or less than your input number, and consciously is omitting 2, which is in fact a prime itself. I'd recommend you take a step back and research what prime factorization means, and from there look into algorithms or patterns (eg. Factor Trees) that you could implement in your solution.
&gt;I know 2 is a prime number, that is why I used the NOT operator in the "not prime" segment of the code....
You are thinking in the right way here, while a technically simple view can get away with direct model binding inevitably its just adding more work down the line for the person who has to "quick just do this" but cant until they spend part of the day re-factoring in the VM that should have been there in the first place. 
With C# and .NET Core, you can quickly and easily build console apps that can be used to automate tasks. These console apps can be run on an interview, or turned into window services. Sometimes it helps to start with the specific problem you're trying to solve, rather than trying to find a generic language/framework to solve all types of problems. Is there something specific you're trying to accomplish? Chances are you can solve it using any number of languages/frameworks. Each with their own pros and cons for why you should use them, but most of them will do just fine. Try not to let analysis paralysis or decision fatigue set in. Try to solve it with whichever one appeals to you most. Hit too many roadblocks? See what similar solutions already exist. Adapt that solution to fit your need.
You're right - I must have misread that particular condition when I first checked your code. Sorry on that!
Yes, C# (or rather, .NET) is pretty good for that. First off, there's (more or less) first-class support to accessing Windows APIs for you to control or change just about anything running on the system. For example: https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.dllimportattribute(v=vs.110).aspx Secondly, you can design your code to be independent of any kind of GUI. This way it can be executed with different thin wrappers. You could wrap the code with a simple console command line, and at the same time make another GUI wrapper for human use, you can also toss it into a Windows Service easily. Then there are relatively easy ways to build installers to simplify installation/distribution. The runtimes are usually available on Windows installations out-of-the-box so usually you don't have to pack or have users install a separate runtime (such as Java).
I agree that it'd be good to have a better idea of what /u/vF360 is looking to accomplish. If the automation is intended for Windows only, then I don't think they need to worry about developing against .NET Core. May as well just make a standard .NET Framework project and take advantage of all the extra APIs available. If they do plan on having this run on Linux or Mac or Windows S at some point, yeah, .NET Core might be the way to go.
1. Write an IsPrime\(\) method. You've already gotten some advice on this \(is the number divisible only by 1 and itself\). 2. Find all primes that the input is divisible by \(input &amp;#37; prime == 0\).
I'm looking to build a very basic program just for fun so I can get a feel for the language. It's function is primarily to delete files whenever I fail to press a certain key within a set period of time e.g. file A gets removed if I fail to press # in the 10 second interval for every minute which passes. I want to combine it with a task scheduler so it runs at certain times of the day.
I haven't had a look at your code, but for an efficient way to merge lists have a look at https://en.m.wikipedia.org/wiki/Merge_algorithm. That's what's used in the well known merge sort algorithm. 
Ah yes, according to that link, I can improve my algorithm using a min-heap instead of iterating over all *k* lists each time to find the smallest element. However in my particular situation where *k* will be low, it is probably not worth my time to implement. I think I actually studied min-heaps at university, but it has been so long since I wrote any code, that reminders like yours are helpful.
&gt; (when one is empty, just swap it with the last enumerator in the List and RemoveAt on the last index to avoid resizing operations) It has been so long since I have written any code, thanks for reminding me about this (I'm sure I was taught this trick at one point). You are right, the only reason I was using LinkedList is for faster removal, but as you pointed out a List would be better.
I actually [wrote an article](http://www.samwheat.com/Post/The-function-of-ViewModels-in-MVC-web-development) on my blog.
Prime factorization is the process of breaking a number down into its lowest prime parts. Kind of like dividing it into two numbers, then dividing those numbers into two, and so on until you are left with only prime numbers. For Example: 24 = 4 x 6; 4 = 2 x 2, and 6 = 2 x 3; thus the prime factors of 24 are 2, 2, 2, and 3. An other example: 63 = 21 x 3; 21 = 7 x 3; thus the prime factorization of 63 is 3, 3, and 7. For 25, you should expect an answer of 5 and 5.
That's quite well written.
This link should be added to the sidebar.
Put Dto in you UI project and map the objects in the controller after they are returned from your service layer and before you return them to view. Or since you are returning view models from your service layer you should replace the models in those viewmodels with dtos and map then when you are creating/editing the viewmodel map them. I never return a viewmodel from service layer though. I try to keep that in the controller but thats just preference. Example: Var vm= new ViewModel{ Prop1 = Automapper.Map&lt;Type1Dto&gt;(unitOfWork.Type1.Where(i=&gt;i.id==id).FirstOrDefault()) } You don't need to necessarily use dtos unless you are trying to limit what the user can access or limit the amount of data transferred.
I will try python tools in Visual Studio, thanks.
if(int.TryParse(myString, out var myInt)) { // do something with myInt } if(IsFormValid(myObj)) { // do something with myObj } Where IsFormValid is a custom method that returns a bool based on custom validation var isFound = false; foreach (var item in items) { if (item.Type == MyItemType.Foo) isFound = true; } if (isFound) { DoSomething(); } Three very oversimplified examples of where you’d use bools. On mobile too so excuse the brevity/formatting.
Great, so it looks like, even the approach that I am currently using might work fine enough if I am not worried about size of data that gets transferred between layer, cool. Thanks
A boolean variable is used to store a value indicating a true or false condition. if (!isLoggedIn) redirectUserToLogin(); The isLoggedIn variable would indicate the user is logged in when True or the user is not logged in when False. The usage of a boolean is up to you. It is a value type, not a reference type so by default it cannot be null and the only valid values are true and false. Your example doesn't accomplish much because you're simply restating the condition. Sort of like, "if true is true then true". A better example could be if (lightSwitchIsOn) { RenderLight(); }
If by `Calc.exe` you mean your C# program that you've created, and not the actual windows calculator, then yes absolutely. This can be achieved by the `Process` class under the `System.Diagnostics` namespace. One additional thing to take into consideration before calling `Process.Start()` is that if the program you are launching has a GUI you need to set the `Process.ProcessStartInfo.UseShellExecute = false`. From here you can access all sorts of infirmary in about the spawned process including its SID(unique numerical process code), resource usage, and the ability to kill the process at will. 
I'll not address everything as that's already been done by the other answers, but use AutoMapper for this.
I do actually mean the windows calculator having child process of something else as a child.notepad was just an example
Unless an application is designed to spawn child processes it's simply not possible AFAIK. At most calculator can spawn its help window as a child process or open an HTML page for help as those would be built in. As a potential alternative if keeping your program unrelated to the spawned programs patent tree is critical for some reason you can still use the Process.Start() method. However instead of spawning your target program you spawn a command prompt and feed it the execution path of your target program. Spawning the process this way creates it without a parent process and still allows you control from within your program. The modified code would look like this: Process.StartInfo.FileName = @"C:\CMD.EXE"; Process.StartInfo.Arguments = @"C:\ExecutablePath.EXE" Process.Start() 
How are the moves activated? If you were going to use the number keys, for example, you'd just make it so when you press the key you check and see if they have enough experience to have it unlocked. If they do, then their character performs the move. If not, it just doesn't do anything.
Remindme
&gt;if switch is on That's a Boolean value. You literally just wrote: If (light == true) { Light = true; } With the else and so on. You already gave an example of what it's use is: remembering whether a light is on or off. Maybe you have a toggle button that should turn the light on if right now it's off, and turn it off if right now it's on, then you might wanna write: void toggleLight() { If (LightIsOn) { LightIsOn = false; //we're turning it off, so update this value TurnOffLight(); } else { LightIsOn = true; //same thing, updating the value TurnOnLight; } } In this example, we use the Boolean value to remember if the light was on so that we can know whether to turn it on or off when the toggle button is pressed.
Make it nullable and youve got a third value! Bools can store a true/false value which might be better than having to recalculate the condition and can be easier to read. while (!found) {} if (isAdmin()) {} Etc
Look in your obj file? Usually at the top. 
The mtl file is in the same directory and filename lf it is always : model.mtl
Doesn't matter. The obj file needs an `mtllib` line in it specifying the file name and path.
Opened it with editor and yeah here is something like that. mtllib model.mtlo mesh1_mesh1-geometryv
I don't recall "mtlo" files. But yeah, make sure the file path there he's what you're loading.
That did me help me a bit . I actually can open obj files dynamically but the mtl file I don‘t get how to access it
I think the Helix Toolkit should do that for you as long as the mtl file path is correct and exists. If they do and it still doesn't work, the I don't know. I haven't used the library. Might have to contact them. Maybe try changing the path to an absolute path instead of a relative path.
This sounds like a unity question have yoo tried r/unity? 
This could vary based on the specifics of your game. But I am thinking something like when there is a level/experience event it triggers a function which modifies the player's ability set. 
Thanks! This is a good deal on something I've wanted for years.
Looks like it's expired already
I haven’t, but I will. Thank you.
Booleans: either you understand them, or you don't.
Look at the answer to this StackOverflow post using the char '\r': https://stackoverflow.com/q/888533 Also just a note, when you notice yourself duplicating code that looks very similar that is a good sign you should extract/generalize the logic to a function. Then if your logic changes you only have to change it once (instead of in this case 11 times). 
No the OP put two different links. One with the old code Correct code: WM052618LT You have a few more hours
Not in C# you can't. If you P/Invoke you may be able to call the correct Win32 in sequence to get it done (if it's still supported in Windows). If you're a beginner/intermediate developer it's probably too advanced for you. https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/
Thank you! It works wonderfully now. I guess the answer was out there, but it didn't really know what I was looking for. https://i.imgur.com/mRBli75.gifv. 
I took your advice (i think) and made the code a lot shorter. Lemme know what you think! https://i.imgur.com/HF2gAPR.png
Nice refactor! That looks a lot more maintainable :)
At one point I realized that every time I struggled with learning a C# concept, Brackeys had the perfect explanation. Just my 2¢
Just checked out a few of his videos. I don't think he's _the worst_, but I think he's not very good. He is not particularly good at explaining things from the stuff that I watched, and I think he puts emphasis on explaining the things that (at least I consider) are less important. Is there a specific video that helped you understand something? It could be that there are better learning resources out there. Also the programmers you are talking to sound like they're being dicks, if you're learning, you're learning. Do whatever works best for you.
Aside from adding error handling, a couple minor things: you may want to log by just writing to stdout. That way the user can redirect input to a file, tee it, grep it, whatever they like. Also the Stream copy code you have may be able to be rewritten as ReadStream.CopyTo.
r/Titlegore TIL brackeys doesn't mean very or good
Out of curiosity, why the Thread.Sleep?
I just facepalmed so hard.
As far as I'm aware, this is not possible. I'm also incredibly curious as to why you want to do this. It does seem to be a bit of a bizarre requirement. 
Couldn't you just ignore the union? [StructLayout(LayoutKind.Sequential)] //this is actually the default struct CHAR_INFO { char Unicode; unsigned short Attributes; }
Ok so it's just the concept of it true or false I don't have to write bool.or Boolean? 
My recommendation would definately be teamtreehouse. They have an online code editor so you can start right away. They walk you through the different concepts and does not neglect on best practice. Also you get to work on the same piece of code for a long time (expanding the same code feels better for me than many small programs) 
That sounds like my scenario. About the event handler, can't you just unsubscribe to the event on closing the window?
Kinda. ViewModels can be shared by multiple windows. So you would need some sort of reference counter to track when all the windows are done using it. And that means watching not only for window closed, but also changes to the data context. The window would also need to know about the view-model beyond simple data binding in order to modify the reference count. This would only work for windows. Normal controls can be loaded and unloaded multiple times. There is no good way to determine if the control is just being moved/virtualized or if you really are done with it. (Again, a WPF problem not seen in WinForms.) *** In short, yes you can. But it's incredibly brittle and error prone so I don't expect anyone to actually get it right.
Probably so the output visibly cycles through the letters. Without a sleep it would brute Force it instantly and wouldn't look brute-forced. That's my guess.
Thank you for posting this! I was able to get it before it was too late. 
This is easily the best purchase I've made this year.
I flagged it for moderation because as it stands it's not even clear what you're asking. You need to make http://sscce.org/
I can’t do that without the database, and that’s a 12 year old monstrosity that clocks in at 700Mb fully compressed, and several Gb as-is. I have been getting indications that the DB might be directly affecting the behaviour of FV, so an sscce would be supremely impractical to put together.
good thing this isn't about the US then 
Well, the fact I flagged for moderation on SO means that obviously I did read it. I read it over twice and the amount of edits and "WTF IS WRONG" sentences made it a little cringe to read. &gt; I can’t do that without the database, and that’s a 12 year old monstrosity that clocks in at 700Mb fully compressed, and several Gb as-is. I have been getting indications that the DB might be directly affecting the behaviour of FV, so an sscce would be supremely impractical to put together. Then you don't understand what a SSCCE is. Why do you think you need a DB to use FluentValidation? You don't. Source: I use it all the time.
Would love to have a 999$ discount if it's just lying around :D Always found it prohibitively expensive to buy as a solo dev :) 
Syncfusion offers their entire productline for free (community edition).
This I did not know! Many thanks!
Quite welcome! Saved me so much money I practically just have to advocate them wherever possible because they're amazing!
This question has been asked before, and [this](https://www.reddit.com/r/Unity3D/comments/7zwih8/are_brackeys_tutorials_good/durk8bi/) is the best response I've come across.
It's a bit of both. I've already been through the fundamentals of the language, so I just decided to give myself a personal project that allows me to implement all of the principals in a concrete way. I find it very similar to learning a real language in which you can learn vocab, grammar, syntax, etc. But until you start to put all of these things together, it doesn't stick as well. The question here was just that. I could implement different ways to get around the problem (I ended up using methods that the lower level cases call back to in the higher level cases). But I could have also used a loop. It's different for different situations so I'm just trying to expose myself to a few of these. Thanks!
Without looking at the code, if you're planning on having people consume this from powershell, why not make it a powershell module? You can still do all the logic the same, but you can also make the arguments discoverable.
Post them here and let them be reviewed.
What do you mean?
I really wish my computer would... I hate it when my computer... Every time i open this website it... Man i wish there was a list of all the things that did this and that... Wouldn't it be cool if... OMGs that would be so cool! Youse know how to do all that? Yeah. Why aints youse done it yet? 
Either let people review your code (push it to GitHub) to point out style and architecture mistakes or try to contribute to an open-source .NET project. You'll learn a lot on collaboration, good style practices, and communication. Having people telling you what to do is usually a bad thing, rarely one finds a true passion in something that is forced on him. Especially, if you don't get paid for doing that.
Post your code here and we will review it and give you feedback.
$10
I find it overwhelmingly likely the database has no impact at all on FV, especially the behaviour in the browser. What indications do you have that the database is related? You could just try writing a dummy repository that returns hard coded data for now. If you get the same behaviour then at least you know the database itself is definitely not the problem and you can focus your attention elsewhere.
Sry i meant r/unity3d, my bad
This is insanely cool!! I wrote tons of "very horrible, unreadable code" that matches C# syntax trees. Having a pattern matching like this in place would simplify that code tremendously! My concern is the performance penalty that you've discussed in the thread. Do you have any concrete benchmarks? I understand that tree analysis will take longer. What about the memory consumption? Why am I asking? I am working on a C# static analysis tool \([http://sharpen.rocks](http://sharpen.rocks)\). The tool comes as Visual Studio extension and is triggered on demand. Once triggered, it starts an analysis that anyhow takes time and the users are aware of that \(progress bar, please wait, etc.\). So even if your pattern matching prolongs the analysis for 10&amp;#37; this will still make less difference for the users. The gain of having readable and maintainable code wins over the speed of execution. In other words, in my case time is not a problem. On the other side, the analysis itself eats a lot of memory so I am avoiding heap allocations like a plague. If the matching internally allocates a lot of additional objects on the heap that would most likely be a no go. Bottom line: if your pattern matching doesn't produce a lot of memory overhead it could potentially be a perfect tool for my use case :\-\) Can you provide more infos on the internals in regard to memory consumption?
Relax. [https://www.pluralsight.com](https://www.pluralsight.com) [https://docs.microsoft.com/en\-us/visualstudio/subscriptions/vs\-pluralsight](https://docs.microsoft.com/en-us/visualstudio/subscriptions/vs-pluralsight) Enjoy.
When i get home, i will link you to something that could be a tool to learn with, by majing ypunsolve game related coding challenges. As a followup question, what do you feel you need to learn first, syntax of the language or programming concepts like loops, etc? 
I thought this was really funny...
Looks pretty cool.
&gt; Several responses to this post will indicate that "heavy lifting should not be done in the constructor". For those that post this response kindly show code or psudo code that demonstrates the Clients property being set on the MainWindowViewModel class. But why are you using DI to set properties rather than injecting `Clients` into the constructor?
Exactly.
&gt; Show how and where the service that retrieves clients is registered, resolved, and called. Note that a typical VM can contain many properties that are intialized with objects that are constructed asychronously so be sure the pattern you suggest is scalable and maintainable. 
I don't like for cycles a lot. For me it's more readable to use [foreach](https://i.imgur.com/QtQf3RC.png).
https://i.imgur.com/RDLBBa6.png. Is this preferable? 
Doing while(true) and then using a break that executes under some condition goes against the designed nature of the while instruction. This is my opinion, please guys don't kill me. You should get rid of the if and place the condition inside the while. [Like this.](https://i.imgur.com/RTFMOtB.png)
.GetAwaiter\(\).GetResult\(\) causes the same issue as .Result? You could also use the adapter pattern to register someservice as a single instance \(if you can get away with it\), and inject it into the adapter.
Pluralsight for sure. Especially if you're willing to pay for something. 
No prob. Thank you.
A private field is created in the background for you. This is just shorthand for get { return name; } set { name = value; }.
Is this a remote position or would I need to relocate?
Yes, it does. It's not really a good practice anyway. &gt; You could also use the adapter pattern I'll try anything at this point but I'm not sure what you mean. Can you mock up a bit of code? 
This is correct. To clarify, the private "attributes" you (you being OP, not the person I'm replying to) refer to are actually called fields. A field is simply a variable that exists locally to an instance of a class. The getter/setter is called a property in C#. Specifically, if you use MyProperty { get; set; } it's called an automatically implemented property AKA an auto-property, because the compiler automatically implemented the logic behind the get/set for you. This used to confuse the hell out of me. Basically the reason we use public properties rather than just making the field public is because properties allow us to define the interface that the class exposes to the rest of the application. You can later change what the property does (maybe you want to remove trailing whitespace from a string when you assign it through the property, for example) in one place, rather than changing it in every place you'd be assigning the string if you were just using a public field. Another benefit is more control - you can selectively make just your getter or setter public, so that other classes can read your field, but not change its value, for instance: public string MyString { get; private set; }. These are just two examples.
I thought C# skipped MFC and went straight to WinForms
Thank you :)
Oh okay that makes sense. I'm surprised none of the tutorials I went over mentioned this. Thanks!
Well OK then if you are going to be like that, I guess no one will help. Just because in your opinion "typical VM can contain properties" does not mean that's how it is actually done or best practices, and is in fact a code smell. You shouldn't be able to swap out dependencies at run time of an already constructed object. http://dillonbuchanan.com/programming/dependency-injection-constructor-vs-property/
Weird, did he fall out with the EF team?
Savage haha
https://www.pinterest.ca/pin/118078821450823171/
The more I think about your pattern matching approach the more awesome I find it. It gave me a completely new perspective on syntax tree analysis. Up to now I never thought about my syntax tree "scans" as being pattern matching, but that's exactly what they are. Your approach brings some fresh and good ideas. I've just listed the project on the [Awesome Roslyn list](https://github.com/ironcev/awesome-roslyn).
There is a private backing field created that you shouldn't ever really need to know about and encapsulation need not be violated: public string Name {get; private set;} Always using properties is best practice because this means that when you change your mind about how this is implemented (expand the get set methods in the future) your interface has not changed and no consumers of this class will need to change or recompile. If you started with a field and later switched to the getter setter pattern every consumer would need to change/recompile.
Meh, you gotta do what you gotta do. I've been working with Visual Studio extensions a lot lately, which is like a mud bath in extremely bad practices. Shame on the VS team for their sins. builder.Register(s =&gt; SomeService.Create().GetAwaiter().GetResult()).InstancePerLifetimeScope(); builder.RegisterAdapter&lt;SomeService, MWVM&gt;(s =&gt; MWVM.Create(s).GetAwaiter().GetResult());
&gt; Well OK then if you are going to be like that, I guess no one will help. Not sure what I did to deserve that comment but in any case I am not looking to use property injection: mainWindowViewModel.Clients = await service.GetClients(); 
So what it's doing is 1. The exit method , if the input is other than what its requesting, will end with an indefinite loop. 2. if I give a letter input on the first request it says, it doesn't work and gets stuck within indefinite loop. 3. if I give a number that exceeds 20 or less than 2, it says "ok its a number " and goes directly to the exit loop
Here's my version. This makes it a lot easier to change your target string and avoids writing the random value twice when it matches. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace Brute_Force { class Program { static void Main(string[] args) { char ch; var random = new Random(); String str = "Hello World"; for (int i = 0; i &lt; str.Length; i++) { while (true) { System.Threading.Thread.Sleep(1); ch = ((char)random.Next(32, 237)); Console.Write(ch); if (str[i] == ch) { break; } else { Console.Write("\b"); } } } Console.WriteLine(); } } }
&gt; Meh, you gotta do what you gotta do. LOL that is the truth! The forums are full of chest beaters who have never faced a real design issue. Mindless Recital of Platitudes only works on the internet! But I digress. &gt; .RegisterAdapter This looks promising thanks very much! 
Home now, here is the link i was referring to : [https://www.codingame.com/start](https://www.codingame.com/start)
[https://www.codingame.com/start](https://www.codingame.com/start)
More modern Brakeys videos are better and use Visual Studio but are very games dev focused.
Wow! Speaking of awesome... Thanks very much.
If I recall correctly, WinForms is a wrapper around MFC. Or maybe they both wrap the same thing.
 builder.Register&lt;Func&lt;MainWindow&gt;&gt; Why not simply: builder.Register&lt;Func&lt;Task&lt;MainWindow&gt;&gt;&gt; And await it where you use it, rather than trying to run the async method synchronously inside your IoC. You're also just registering a Factory here. Personally I think it's clearer to define that explicitly and avoid things like registering Func&lt;&gt;'s - and I especially avoid things like Autofac's ability to automatically fulfill a request for Func&lt;&gt; based on a registration for the Func's return type. I would use something like public interface IWindowFactory { Task&lt;MainWindow&gt; CreateMainWindow(); }
You don't necessarily need classes to implement this logic. You can do it with some nested `do while` loops: https://dotnetfiddle.net/CLuMko
Thank you for The reply. I've done it before with just everything in main. I was just trying to be more efficient. I just need to keep reading and get into classes and objects a little later . 
Im not starting with unity yet i want to learn c# before i do unity i want to learn the language 
You do need to specify`CharSet.Auto`, otherwise many Unicode characters will be truncated or otherwise garbled. On ANSI systems the `char` will be marshaled as 1 byte and thus not match the size of the union/layout of the struct. However, the `ushort` field should automatically be aligned to two bytes anyway even if the first field is only 1 byte large, so sequential layout should work out in practice on this specific struct. This can't be relied on with all structs, however. Then again this only makes a difference on Win9x platforms and is probably irrelevant in practice anyway.
I always assumed they both wrap win32 (the C API). Not sure why anyone would wanna wrap MFC since it is a pretty bad design, and would add another layer of indirection with little or no benefit.
Yeah, that's why I said that `CharSet.Auto` should also be specified on the struct. If you don't do that like in your example (or use `CharSet.Ansi` for some reason) then this doesn't only apply to Win9x, true.
Thanks. Looking forward to reading .
I was in same boat and still have ways to go, but if your plan is to make games with C#, then try his 2D platform tutorials on YouTube. He does everything step by step and will even get you started on setting it up and importing sprites along with a link to get sprites. I want to say there is 15-20 videos in the series all broken into sequence. Watch the first few as by at least 2nd or 3rd video the C# begins and I think you’ll realize ... he does the same with 3D game series. It’s a fun way to learn C#.
Assembly a = Assembly.Load(bin); MethodInfo method = a.EntryPoint; if (method != null) { object o = a.CreateInstance(method.Name); method.Invoke(o, null); } Variable bin being the byte array of your other .net assembly. This is a way to execute .net assemblies from memory using the same process, if I remember correctly.
Player class should have a list of PlayerMove objects. Player object should have an attribute called experience. There should be an 'experience' controller class which will add PlayerMove objects to the player when a certain threshold is reached and also add experience points (and reduce them?). Then the player can perform the 'moves' that are available to him/her.
Someone posted that the community edition is free if you make less then a million a year. 
The big disadvantage of using a static property is that you cannot expose it through and
... you want to autodelete your porn if you step away from your computer during your porn viewing hours. Not a bad idea.
How I assign the properties is pretty basic. I have a method that loads an ini file into key-value pairs and I check each key for a match: switch (key.ToLower()) { case "name": Singleton.Name = value; break; } But I just realized that I probably don't even need this to be a singleton. It's a utility class with all static methods, so I'm thinking instead that I can just make the class and these properties static too.
You would have got more answers if you would have formatted your code properly. Your code first problem is here, you create new object and that object Num value 0. public int Checkmeth() { ... CODE OMITTED ... Check next = new Check(); next.Checkmetheq(); return numint; } ´What you should do there is call the method just normally. Not create new object. public int Checkmeth() { ... CODE OMITTED ... Checkmetheq(); return numint; } Next in other method you create object again. There is no need to do that. public int Checkmetheq() { //checks to see if number that passedthe checkmeth method is between 2 and 20 //and if not recalls checkmeth to ask for new number int min = 2; int max = 20; if (numint &lt; min || numint &gt; max) { while (numint &lt; min || numint &gt; max) { numint = Checkmeth(); } } return numint; } In overall this is a very akward recursive loop \(if user refuses to give number between 2\-20\).
If you have a chance to use dependency injection then I wouldn't use singletons at all. But if you really have to use one you should just use only single static property for Instance. Drawback is if you don't, when you give singleton instance as parameter that code can't access Name property. P.S. you know that you can use expression bodied properties making your code much cleaner?
Taking this line by line. private static readonly Lazy&lt;Singleton&gt; _instance = new Lazy&lt;Singleton&gt;(() =&gt; new Singleton()); Why? Creating a new Singleton is cheaper than creating a new Lazy&lt;Singleton&gt;. It's not going to create the Singleton until the first time you touch this class anyways. And it slows down access to the instance. public static Singleton Instance { get { return _instance.Value; } } Why is this public? There is nothing on this class that you can use from it's public interface anyways. public static string Name Static properties shouldn't modify non-static fields. That's non-intuitive for the developer using this code. if (string.IsNullOrEmpty(Instance._name)) return "Unknown"; else return Instance._name; Static properties MUST be thread safe. Where are your locks to prevent race conditions when the name changes? Consider this code: Singleton.Name = ""; var x = Singleton.Name; Developers are going to expect x to equal "", but it doesn't. 
A note on terminology: in C# there is fields (“member variables”), properties (getter-setters, often with backing fields), attributes (something you decorate classes, methods etc. with), parameters (what arguments to a method call are bound to) and variables (short for local variables).
Neither ASP.NET or SQL is free on Azure. Both are relatively expensive on Azure. Digital Ocean have a £5 VM option, though obviously at that price performance might not be the best. They have increment price options.
The cheapest possible Azure SQL is the single-database basic (B) with DTU pricing model. It will run you ~$5 a month and it includes 2 GB storage. It should be perfectly good enough for most low-volume web applications and for non-production services (CI, testing, ...). Alternatively, you don't think there is an Azure database offering which would be completely free. You can host your own SQL (in which case you need to have a MSSQL licence, which is likely more expensive, or use a free database platform such as Maria DB or postgre), but then you need to manage it yourself + still pay for the compute. In case you are open to NoSQL, I would also look into Cosmos DB, it can be pretty cheap for small workloads, though the minimum price for one collection is still ~$25 dollars due to minimum RU requirement. 
Thanks for the input. So, with Digital Ocean I assume that I'd have to go down the ASP.NET Core MVC route (so it can run on linux) with a Postgresql DB? 
Update: ended up implementing a min heap. MinHeapLists.Merged() gives the lazy iterator public sealed class MinHeap&lt;T&gt; where T : IComparable&lt;T&gt; { private ulong version = 0; private List&lt;T&gt; heap; public ulong Version =&gt; version; public MinHeap() { this.heap = new List&lt;T&gt;(4); // The heap begins at heap[1]. This is a waste of space but makes the access / remove methods faster and simpler. // but saves time and effort. heap.Add(default); } public int Count =&gt; heap.Count - 1; // No bounds checking private static int Parent(int index) =&gt; index &gt;&gt; 1; private static int LeftChild(int index) =&gt; index &lt;&lt; 1; private static int RightChild(int index) =&gt; (index &lt;&lt; 1) + 1; // No bounds checking private void Exchange(int index1, int index2) { T temp = heap[index1]; heap[index1] = heap[index2]; heap[index2] = temp; } private bool HasChildren(int index) =&gt; index &lt; Count; // Sink whatever is at index. Assumes index holds something. This could be rewritten as a tail-recursive function, // but C# doesn't optimize tail recursion and I don't want a stack overflow. private void MinHeapify(int index = 1) { int smallestIndex, leftIndex, rightIndex; while (true) { // Calculate the smallest of 3 locations on the heap leftIndex = LeftChild(index); rightIndex = RightChild(index); if (leftIndex &lt;= Count &amp;&amp; heap[leftIndex].CompareTo(heap[index]) &lt; 0) { smallestIndex = leftIndex; } else { smallestIndex = index; } if (rightIndex &lt;= Count &amp;&amp; heap[rightIndex].CompareTo(heap[smallestIndex]) &lt; 0) { smallestIndex = rightIndex; } if (smallestIndex != index) { // Swap with one of its children Exchange(smallestIndex, index); index = smallestIndex; } else { // Value is in the correct position break; } } } // Stick it on the end, float it to the top public void Add(T newValue) { if (newValue == null) throw new Exception("Error here"); version++; heap.Add(newValue); int i = Count; int parentIndex = Parent(i); while (i &gt; 1 &amp;&amp; newValue.CompareTo(heap[parentIndex]) &lt; 0) { Exchange(parentIndex, i); i = parentIndex; parentIndex = Parent(parentIndex); } } public T Peek() { if (Count == 0) throw new InvalidOperationException(); return heap[1]; } // Take one off the top, if the top is now empty, put the end on the top, take the end off the end, and float the end down. // If the top is now in the wrong position, float it down. // We expose Pop() as public in case anyone wants to interleave their Pop() calls with adding new values (which // can't be done with the iterator) public T Pop() { if (Count == 0) throw new InvalidOperationException(); version++; T result = heap[1]; heap[1] = heap[Count]; heap.RemoveAt(Count); if (Count &gt; 0) MinHeapify(); return result; } public IEnumerable&lt;T&gt; Merged() { ulong v = version; while (Count != 0) { if (v != Version) throw new InvalidOperationException(); yield return Pop(); // Have to update our copy of Version as Pop() increments it v++; } } } // This class does lazy evaluation, it can do minimum priority on a heap of infinite lists public sealed class MinHeapLists&lt;T&gt; where T : IComparable&lt;T&gt; { private readonly MinHeap&lt;EnumeratorWrapper&gt; heapL; private class EnumeratorWrapper : IComparable&lt;EnumeratorWrapper&gt; { public IEnumerator&lt;T&gt; Enumerator { get; } public EnumeratorWrapper(IEnumerator&lt;T&gt; enumer) { this.Enumerator = enumer; } public int CompareTo(EnumeratorWrapper ew) { return this.Enumerator.Current.CompareTo(ew.Enumerator.Current); } } public MinHeapLists(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; lists = null) { heapL = new MinHeap&lt;EnumeratorWrapper&gt;(); // Null check required for optional argument if (lists != null) { foreach (var list in lists) { var enumer = list.GetEnumerator(); if (enumer.MoveNext()) { heapL.Add(new EnumeratorWrapper(enumer)); } } } } public void Add(IEnumerable&lt;T&gt; list) { var enumer = list.GetEnumerator(); if (enumer.MoveNext()) { var wrapper = new EnumeratorWrapper(enumer); heapL.Add(wrapper); } } public T Peek() { return heapL.Peek().Enumerator.Current; } public T Pop() { var ew = heapL.Pop(); var iter = ew.Enumerator; var result = iter.Current; if (iter.MoveNext()) { heapL.Add(ew); } return result; } public IEnumerable&lt;T&gt; Merged() { // We need to do version tracking here because heapL won't ulong v = heapL.Version; while(heapL.Count != 0) { if (v != heapL.Version) throw new InvalidOperationException(); yield return this.Pop(); v++; } } }
Well .NET Core yes, I don't know about what type of controllers you have. You could also install SQL Server for Linux on it, could do that in a container too for easier deployment. https://www.microsoft.com/en-gb/sql-server/sql-server-2017
Wait, there is a free shared plan for Azure App Service, on which you can run ASP.NET or ASP.NET Core. It's rather limited (not sure if custom domains are supported), but it doesn't cost anything.
Thanks, I'll take a look. The prices seem reasonable. Have you used them yourself?
Yeah for personal website and tests, not anything critical. I recently switched to the more expensive plan in order to get SSL.
Oh I didn't know that, got a link? Be careful though I've been caught out by Azure claiming things are "cheap" and "free" only to be charged £50 for simply running a VM that wasn't doing anything for a couple of days.
It kind of defeats the purpose of being a singleton.. But maybe these don't belong there - perhaps move them to their own class?
Switch to something free like MySQL or Postgres. Chances are very slim that a small project uses anything that can't be easily done on one of these.
I created a small project a while ago that is (yet another) collection of Roslyn analyzers. Some of the common refactorings are in there as well as some less common ones around coding style and runtime error prevention. Currently not under very active development but with the open list of issues it's something others can step into very easily. https://github.com/Vannevelj/VSDiagnostics
The MS SQL Server Express Edition is free and the cheapest is of course to build and test the applications locally. Other than that, search for Windows VPS, my guess is for $10 per month you should be able to find one. 
I have a VPS that also hosts MSSQL Express for $20/month. It's fine for the 2 low volume sites on it. There is an option for less RAM for $10. I've been with them for a few years. http://cheapwindowsvps.com
I have a couple sites with them myself and was going to recommend them.
Thanks mate. I take it that you're happy with them as a provider. Also, do you know if I can host a Windows service or scheduled task on the machine, or am I restricted to just IIS and SSMS access?
No, you just download and install it yourself on the server. https://www.microsoft.com/en-us/sql-server/sql-server-editions-express
OK, cool. Thanks
No, you download SQL Server Express and install it on the machine.
Maybe you can, but since child processes don't really do anything special in Windows (e.g. they don't quit when their parent does), why bother?
That's using the old noodle there to get around the cost. How did you handle concurrency?
Also on SmarterASP for personal projects, and very pleased with service and pricing.
The free tier of AppService does not let you use a custom domain name, FYI.
Beware budget hosts. Many of them use open source control panels for managing accounts with common/default passwords for accessing admin resources. They are often plagued with other bad security practices, like plaintext passwords, emailing plaintext passwords during reset operations, etc. I had a really cheap host, once upon a time ($3.50/mo). Turns out they did all of the above. Some bad apples got into the control panel for the site, defaced mine and every other site on the host, deleted all the databases and began spamming any email addresses they found, such as account holders, contact lists in the databases, etc.
You can get a Linux vps for very cheap (a couple bucks a month), and install sql server on the same box. 
Linode. I pay $5/month to host multiple ASP.NET core apps with MySQL on a Linux box.
That sounds good, thanks for the suggestion. I've not used MySQL for years. Does it offer any good query analysis/optimisation tools?
Thanks, I've only just heard that MS have released a Linux version of SQL server. Do you know how it compare to the Windows version? Can you use the same tools, e.g. SSMS and Profiler?
Removed: Rule 4.
https://www.blacknight.com/ is good too, i moved there from smarter asp
To**
Azure SQL is like $5 a month, you could use the free App Service tier too. So your Azure bill would be ~$5 a month total. Don’t waste your time with those shit budget hosting options, for the $2 difference you might as well learn Azure and get the better service. 
Thanks mate, will check the out.
Thanks, I'll check them out. I'm getting a lot of good suggestions in this thread.
I, in the EU, had very slow response times from all sites hosted with smarterasp during the daytime hours over here... fast at night but super slow in the day. Just FYI.
Thanks. You've got me interested now. I'm going to set-it up on one of my Linux VMs to see how I get on.
Oh, that's interesting. I was planning on setting this up in the EU, so that's good to know.
Thanks! *googles libav*
Thanks for letting me know - that was a requirement. I'll think I'll look at other providers in that case.
Yeah, I don't need five 9s as this is just for a couple of personal projects.
Check out the amazon web services, you can host there for free or pay if you want more.
Are you me? I recently went through this for the first time with an ASP.NET Core, EF Core project, and I decided to forgo the DTO step. I really didn't see the need, as my POCOs were already very light. Curious to hear your opinion on DTOs after you're done.
If he is planning to target the 5$ tier, he might be better off using SQLite and running his own backup script. I don't doubt Postgres can handle running on minimum specs, but if the OP is planning to run the DB just for a single instance of a web app, then he can save himself the need to maintain a DB instance and SQLite will likely have better performance too.
You might as well use the developer version of SQL Server if you are running test environments. It doesn't have the performance constraints that express does, and it gives you the same features as SQL Server Standard. I'm not sure about the licensing for using it for build servers though.
Sounds like it's read only most of the time. Not a high transaction environment.
Yes they 
I used to do this with digitalocean, only I was using mono (+ nginx) instead of core. Argh, what a pain that was! 
For changes in html/css/js just refresh the web browser. for changes in c# code, you need to recompile.
Yes something like that but keep in mind that experience stuff that adds moves or unlocks moves to the player should be kept seperate from the player object, as to not make the player object too big and to make it easier to make adjustments later on. So, that Update method should be in a different class, which I'd call the ExperienceController.
GearHost is free and awesome. Not production-grade service but for being free, it is pretty damn good!
The simplest solution is usually the best, especially when it's built into the language. int num; bool IsNumeric = int.TryParse(Console.ReadLine(), out num); 
Thanks once again for sharing the link. I've just added VSDiagnostics to the list. As you've mentioned, there are some analyzers in the collection that are not that common. I would encourage people to take a look. Also, considering the starting time of the project, I can say you were one of the pioneers in using Roslyn to increase code\-quality :\-\) Thanks!
dotnet watch can do the recompile on change automatically but it still has to happen. 
Im still learning all of the short cuts. That seems pretty efficient. Mainly what I was trying to do, and actually ended up getting it to work. was Use methods and if the user failed to give the appropriate response the program wouldn't crash or end. Also how did you post the picture that way. I'm such a noob, lmao.
namespace ConsoleApp1 { public class Check { public bool parser; public static string Num { get; set; } public static int Numint; public static string Checky\_x { get; set; } public int Checkmeth\(\) { Console.WriteLine\("Give me a number between 2 and 20"\); //checks to see if input can be and int. Num = Console.ReadLine\(\); parser = Int32.TryParse\(Num, out Numint\); if \(parser.Equals\(false\)\) { while \(parser.Equals\(false\)\) {//im the scrublord Console.WriteLine\("Invalid number scrub lord {0} doesnt work", Num\); Num = Console.ReadLine\(\); parser = Int32.TryParse\(Num, out Numint\); } } else { Numint = Checkmetheq\(\); return Numint; } return Numint = Checkmetheq\(\); } public int Checkmetheq\(\) {//checks to see if number that passedthe checkmeth method is between 2 and 20 //and if not recalls checkmeth to ask for new number int min = 2; int max = 20; if \(Numint \&lt; min || Numint \&gt; max\) { Numint = Checkmeth\(\); } return Numint; } public bool Cont\(\) { Checky\_x = ""; //prompts user to continue or exit program Console.WriteLine\("Would you like to continue, Type y for yes or X for Exit"\); Checky\_x = Console.ReadLine\(\); if \(Checky\_x == "y"\) { return true; } else if \(Checky\_x == "x"\) { Console.WriteLine\("Thanks for using the program."\); return false; } else { Console.WriteLine\("Invalid input, closing program."\); return false; } } } class Program { static void Main\(string\[\] args\) { //the program countsdown and says blast off, I know mind blowing. Check temps = new Check\(\); int num = temps.Checkmeth\(\); for \(int i = 0; i \&lt;= num; num\-\-\) { Console.WriteLine\("Your number is {0}", num\); if \(num == 0\) { Console.WriteLine\("blast off."\); } } while \(temps.Cont\(\).Equals\(true\)\) { num = temps.Checkmeth\(\); for \(int i = 0; i \&lt;= num; num\-\-\) { Console.WriteLine\("Your number is {0}", num\); if \(num == 0\) { Console.WriteLine\("blast off."\); } } } } } } this is a test
 namespace ConsoleApp1 { public class Check { public bool parser; public static string Num { get; set; } public static int Numint; public static string Checky_x { get; set; } public int Checkmeth() { Console.WriteLine("Give me a number between 2 and 20"); //checks to see if input can be and int. Num = Console.ReadLine(); parser = Int32.TryParse(Num, out Numint); if (parser.Equals(false)) { while (parser.Equals(false)) {//im the scrublord Console.WriteLine("Invalid number scrub lord {0} doesnt work", Num); Num = Console.ReadLine(); parser = Int32.TryParse(Num, out Numint); } } else { Numint = Checkmetheq(); return Numint; } return Numint = Checkmetheq(); } public int Checkmetheq() {//checks to see if number that passedthe checkmeth method is between 2 and 20 //and if not recalls checkmeth to ask for new number int min = 2; int max = 20; if (Numint &lt; min || Numint &gt; max) { Numint = Checkmeth(); } return Numint; } public bool Cont() { Checky_x = ""; //prompts user to continue or exit program Console.WriteLine("Would you like to continue, Type y for yes or X for Exit"); Checky_x = Console.ReadLine(); if (Checky_x == "y") { return true; } else if (Checky_x == "x") { Console.WriteLine("Thanks for using the program."); return false; } else { Console.WriteLine("Invalid input, closing program."); return false; } } } class Program { static void Main(string[] args) { //the program countsdown and says blast off, I know mind blowing. Check temps = new Check(); int num = temps.Checkmeth(); for (int i = 0; i &lt;= num; num--) { Console.WriteLine("Your number is {0}", num); if (num == 0) { Console.WriteLine("blast off."); } } while (temps.Cont().Equals(true)) { num = temps.Checkmeth(); for (int i = 0; i &lt;= num; num--) { Console.WriteLine("Your number is {0}", num); if (num == 0) { Console.WriteLine("blast off."); } } } } } }
I have all my personal projects there right now and have for 4-5 years now. Very solid offerings for the price.
they have setup servers in amsterdam not so long ago.
SQL server is going to cost you money, if it's just a side-project I'd reccomend SQLite. It's a light-weight serverless SQL implementation that keeps everything in the local file system. If you use .NET core you can host on a linux box which would be very cehap.
Welp on the mobile app this looks like trash. 
Well, that's good so, they're not a bad crowd to work with at all, just slower in my time zone than was workable for my uses.
Something else you may want to look into then is the try catch and or switch statements. Those would also be great evaluators for input. 
You should also consider looking into the try catch and switch statements. Those are also good tools for evaluating input and performing follow up actions. As for formatting there should be a link below the comment box (on web) about markup formatting. 4 spaces at the start of a line will format text style as code. Back ticks \` are used for `special words`
still, not so straight forward to migrate your hosting account to the EU servers. u basically have to create a new account and chose the location in the process, then you have to manually migrate everything from your old account to the new one
You can always install sql server Express on your onstance. It's free. You don't have to use their sql solution...
Plus, GDPR wise, EU hosting is pretty much must for most here. Grand if it's new hosting I suppose, blackknight was my solution anyway fast and affordable and localish for me so twas just my 2 cent.
Sounds like an issue with your references. I don't entirely understand the question. Can you provide more info? Full error text? What have you tried?
My boss once asked if there was an Azure option that would be a good alternative to the 5$ a month host a site was on. I jokingly replied that it would cost more to figure out how much it would cost on Azure than it would cost to run on the cheap host for a year.
Yeah this, its not a large multi user system. Out of interest if it was i think speed would cripple you way before you run into concurrency issues.
There is actually a free option in azure. Each app service site comes with a free 20mb SQL database for 12 months. That isn't huge of course and you'll definitely want to upgrade if you actually start using it, but it works great for personal projects
You actually are missing something. It's a little known fact, but App Services does give you a 20MB SQL database for free for 12 months, which is good enough for most personal projects. There's also the option of using SQLite. SQLite is free, fast and very simple to setup. Just need access to a disk, and the free site comes with 1GB of space. EF core does support SQLite pretty decently last I checked.
I use the "IsValid" name instead init. If the default parameterless ctor is used, IsValid is false.
I had a very similar problem recently. The way I did it is to store the value in a private variable and expose a public property. This property returns the value if it is valid, otherwise it returns a default value in the valid range. Any non-default constructors validate the incoming parameter as you would expect. It feels a little hacky but works well enough in practice. You will need to implement your own equality method/operator, though.
Yeah, just public string Name { get; set; } isn't really an improvement over just having a public field. However properties have several other qualities that make them nicer in other cases. As mentioned by other you can do string Name { public get; private set; } to make the getter public, and the setter private. You can also include properties in interfaces: interface IMyInterface { int Foo { get; } } Additionally, you can maintain API comparability while changing things. If I make a library exposing class Circle { public double diameter; ...etc... } Then people using my library are setting the value directly. If instead I say public double Diameter { get; set; } Then I can later change to private double radius; public double Diameter { get =&gt; radius * 2; set =&gt; {radius = value / 2}; } and people can keep using my library (*without even having to recompile their code!!!*) 
 This looks like Selenium web driver and if it is seems a little confusing. From what you've written I'm assuming it's throwing an error of 'No definition for By.ElementType\(\)', which would be correct since there isn't a definition for it under the 'By' class. In Selenium you'll come across many different selectors and I would recommend going over them in the [documentation](https://seleniumhq.github.io/selenium/docs/api/dotnet/). 'By' is at the top there, click and you'll find all the methods that belong to it, from that you can google some examples of each to get a feel for how they can be used. Here are a few of the main ones you'll come across By.Id\(\) By.TagName\(\) By.ClassName\(\) By.CssSelector\(\) \- Ignore until you're comfortable with the basic ones above By.XPath\(\) \- Same as above, though should be avoided as much as possible as there are performance issues with some browsers \(IE\) Other than this, it's very difficult to understand what you want to achieve exactly with this code. The most I can assume is that you want to make a generic 'EnterText' method that you pass an element selector into. The most basic example I can give in your context is the following assuming element type refers to the HTML tag; **public static void EnterText\(IWebDriver driver, string elementType, string value\) {** **driver.findElement\(By.TagName\(elementType\).SendKeys\(value\)\);** **}** Then if I called it as follows; **EnterText\(driver, "input", "example text"\);** It would find the first \&lt;input\&gt; element on the page and perform the click event, though I wouldn't recommend this code structure overall since it can only select the first input tag \(CssSelector could be used here instead to find input tags with specific attributes\). This should get you started though. To wrap up, if you are looking to become more advanced after all this I would recommend looking up the Page Object Model design pattern for Selenium once you've practised the basics of element selectors, performing actions on them and the various driver settings you can use. It's a very widely used design pattern for Selenium and makes for much more readable and easier to maintain code.
I'd definitely watch it. I do ASP.Net Core on side projects but am mainly an ASP.Net MVC dev. I've never touched Linux but would like to learn about it. I hope to see a video posted in the subreddit soon! :))
You are so right. The solution that seemed to be working now is [this](https://blogs.msdn.microsoft.com/ajit/2008/06/18/override-the-system-transactions-default-timeout-of-10-minutes-in-the-code/). Issue is, I'm just following blindly now and don't know the impact this could have on other .NET applications that will need to interact with the database. Will changing the timeout amount in the machine config have an adverse effect? Also, changing the 'allowExeDefinition' from 'MachineOnly' to 'MachineToApplication', not sure what this means or why we are doing it. I want to understand what's going on.
Nice! Not looked at it yet but will check it out tomorrow. Thanks! :)) 
Ideally it would be for a position in our SLC, Utah office. But it would on the situation and skills etc... 
Is this being run on premises or on Azure? 
Second this for most programming things I've found so far. Learn it "the hard way" first, then use the tools that simplify the drudgery. I was 6 months into my first job before I learned there WAS a table designer in SSMS. Still build most tables by hand, though.
Good point, thanks.
First link on google: https://softwareengineering.stackexchange.com/questions/245802/is-there-a-downside-to-using-aggressiveinlining-on-simple-properties
I'd guess that would fill up all of the cpu's caches.. so probably not a good idea.
The main trade-off is assembly size and code cleanliness. This is an example of premature optimization. Don’t waste the time and make those trade-offs unless there is a measurable need to improve performance somewhere in your code.
1. 5min googling will find you immediate answers, no need to wait here 2. these answers were produced upon a better question than yours, and are better for it than what your question will give 3. ***What did your measurements say?*** (rules 0,1,2 of optimization are measure, measure and measure)
Assumption: MethodImplOptions.AggressiveInlining always improves performance and has no observable negative effects. Question: Why doesn't the compiler always do it without being told? Answer: The assumption must be wrong or the compiler writers screwed up. *** Example of how I think about such tings. 
Ok, Thanks for telling.
This is the correct state of mind for programmers; pure logical deduction. You should look at everything in life in this way. Combine it with Occam's razor and you don't even need Google.
Depending on how much database space you need, Azure SQL free tier is 20MB. As an example, for the past 13 months I have had two production databases storing crunched daily farm moisture levels for 8 farms (around 40 paddocks each) and weather station data from 3 data loggers at 10 minute intervals, and have only used 37MB of storage on my Azure SQL Server. I'm not using the free tier though, but that's not due to storage levels, more for DTU for responsiveness.
You are talking about Visual Studio, right? 
There are certainly cases where inlining can make your code slower. I tried to break down some of the rationale in a comment [here](https://github.com/dotnet/corefx/pull/27262). Since the aggressive inlining attribute applies to all the call sites for a method it is a pretty big hammer, and unless you know all those sites are going to be perf sensitive you might want to be more selective initially, and only add the attribute in gradually as you are doing performance tuning (backed by careful measurement, of course).
I'm not sure I understand why this is using Kubernetes or even Azure Web Jobs. Unless their simulation is particularly difficult (and I don't see why it should be), even a modest machine should be able to generate enough traffic to saturate the network card on the machine, which should surely be thousands to hundreds of thousands of IOT devices. As a demonstration of how to set up k8 cluster with StatefulSet and secrets, it's great. As a demonstration of how to generate load... I'm dubious. 
Hey there.. I'm an experienced developer so let me see if I can give you some good advice. What you want to be able to do is decouple the caller of the service from the service itself, and adding code in the caller to do a fallback call to yet another service just makes things more difficult, right? We want proper separation of concerns, be able to unit test our classes independently, etc. I'm going to hack out an example, so don't expect it to be perfect (and to other readers), but hopefully it will give you an idea how to solve this issue. I'm not sure what the service you are calling does, so let's just say that this service retrieves a list of Widgets. We can then define an interface: public interface IWidgetService { Widgets getWidgets(); } And then, we have the consumer of the service, which should take this interface as an argument to its constructor: public class WidgetCatalogViewer { private readonly IWidgetService service; public WidgetCatalogViewer(IWidgetService service) { this.service = service; } public void displayWidgets() { try { var result = service.getWidgets(); } catch (...) { // handle exceptions } } } I've skipped over finer details here, but you get the general idea. This class doesn't know what type of service or endpoint it is using, only that it has an interface to something that can provide the data. Now... let's say that I have a fallback endpoint and a regular endpoint. I can now define a new class: public class FallbackWidgetService : IWidgetService { private readonly IWidgetService firstService; private readonly IWidgetService secondService; public FallbackWidgetService(IWidgetService primary, IWidgetService fallback) { this.firstService = primary; this.secondService = fallback; } public Widgets getWidgets() { try { return firstService.getWidgets(); } catch (ServiceUnavailableException ex) { // log some message about falling back to fallback service.... try { return secondService.getWidgets(); } catch(Exceptione ex) { // log some fatal error throw new WidgetServiceException("Service unavailabe:", ex); } } } } Now the last thing we need is a class that can take some sort of endpoint configuration and call your widget service. public class AmazingWidgetService : IWidgetService { public FallbackWidgetService(String endpoint) { // somehow constructor your service endpoint } public Widgets getWidgets() { // call your endpoint and return the widgets } } The last thing you need to do is tie it all together // This is for demonstration purposes, but using a dependency injection framework to handles this for you would be even better if you are familiar FallbackWidgetService fallbackService = new FallbackWidgetService(new AmazingWidgetService(endpoint1), new AmazingWidgetService(endpoint2)); WidgetCatalogViewer viewer = new WidgetCatalogViewer(fallbackService); 
How and why are they split up? Did you add objects to the project via the "Add Web Reference" feature?
The idea isn't to create as many GB/s of traffic as possible, rather it's to have a convenient way of managing these virtual devices and have them running 24/7. And kubernetes provides quite a good way of doing that, i really like it as an environment - it's very well thought out. 
First of all, I agree completely with the post that you're replying to. To deal with the fact that the two services expose different interfaces, what I'd do is wrap them in some shared interface, just as shown in the original reply. The original reply has an interface with a method `Widgets GetWidgets()`. You say that your two services don't both return `Widgets`... and that may be true, but your client will need `Widgets` regardless, so you'll need to do some conversion somewhere. So create two classes that implement the interface, one for the main service, one for the fallback service. In each class, do whatever the service needs you to do, and convert the result to whatever your clients need before returning.
Is your GB emulator available anywhere?
Thanks... and this guy is also correct, somehow you need to deal with the same type of data.. You've not given enough specifics to give you an exact answer.. but I suggest you look into building an Adapter of some sort... perhaps google AdapterPattern... either service you call should return to you the same type (interface, object, etc.). 
The answer is that it depends... and your example code isn't specific enough to give you a good answer. If you're using dependency injection, you've probably heard people say things like "With dependency injection, never call new directly!" But, wait a minute, that's a bit extreme.. I mean new String? is that ok? Of course.. It depends on what type of object you are creating and what you are testing and how it should be tested independently or not... The real answer is that you should not directly instantiate (with the new operator) a direct dependency of a class that should be decoupled and tested separately. For example, you wouldn't want to call new inside your class to create an explicit dependency on a specific web-service. It would make it very difficult to test your class without needing to invoke the web-service. I'd recommend you design your class well... make sure it does one thing and one thing well... This is called the single responsibility principle and is one of the most important things for well structured software. After you've decided what that single thing is, write your tests such that it proves that your class achieves that purpose. In your code... if you need to decouple the creation of new Bar objects from IBar... then use a factory.. if the purpose of IBar is to convert ints to Bars or something.. then maybe that's not necessary. I mean.. what do you think your factory will do when someone calls it? (I bet you can't avoid using the new operator there..)
No worries, it was 
Yes that's exactly what I did.
I think if you just store the process id somewhere then you should be able to find the process using the id.
If nothing in here hits the boundaries of the assembly, I'd probably just write an 'integration' test, especially if it was reasonably straightforward to write, and check the contents of barList after calling DoSomething. If the internals of Bar are hitting the file system, network, database, or something, I'd start looking for ways to refactor, to inject a factory for IBar in Foo, and to wrap up the external bits involved behind an interface (or two or three, depending on how many external systems are involved and how they're being used) and inject that to Bar or the IBar factory.
Sounds like persistent Pub/Sub to me. Clients connect to the message broker and subscribe to streams. Your server publishes to the stream. Connected clients are guaranteed to receive said messages (the level of resilliency can be configured and with different techniques) Azure Event Hub comes to mind. RabbitMQ, C#'s MassTransit, or C#'s Easy.MessageHub. SQL is essentially a rollup/event log. Used for a historical view. Pub/Sub is "Hey this happend", used for live real time data. 
My solution for now is to check the platform with `RuntimeInformation.IsOSPlatform(OSPlatform.Windows)`, and if it is Windows, use the methods proposed in the Stackoverflow thread I linked (which works very well). If not, I assume that I am inside a Docker Container which is shutting down, and therefore doesn't matter. But sooner or later I'll need a method to stop the process +subprocesses in a container, without the container stopping, so I'll have to keep looking for a solution.
Thanks! I'll give those a read
Server maintains a list of events with an incrementing identifier. Clients receive the identifier associated with an event. When they "Pull" they send the last identifier they received. The server then know which events are after that identifier and can send them back. If you want to implement it yourself (could you use something existing?), maybe you can go have a look at [Redis Streams](http://antirez.com/news/114) for inspiration on the design. As for the communication framework, I would either use WCF since that gives you the flexibility to configure your bindings and has bidirectional capability [lookup WCF CallBack or duplex contract](https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-create-a-duplex-contract), or choose another communication stack and go with SignalR or something else. 
You can use Moq for this. barList.add\(Mock.Of\&lt;IBar\&gt;\(\)\). This way you don't include anything that happens in Bar constructor.
We used RabbitMQ for something like this at work. Great for decoupling client from server and it's free. But there are a bunch of technologies to choose from depending on your needs. Any Message Queue Service or brokered Service Bus, or just SignalR if that does the job.
Depends what Bar does. If it's just simple data bag, I wouldn't stress it too much that you are kind of testing the constructor also. Of course, if bars constructor does some heave initialization \(which it probably shouldn't anyway\), you have to use a factory to make this testable.
&gt;or the compiler writers screwed up. not so much that they screwed up, but they are imperfect, which is true. 
Look into [SignalR](http://signalr.net/)
Child killer
Is that WCF? Same service deployed in two places? If so, import one and just create a WCF endpoint for another in your config file. Then, when creating the service proxy, use one or the other endpoint. You identify endpoints by their name, which is in your config file.
No, it's too obvious of an improvement to just be a minor mistake. It's literally just changing a default for an optimization that already exits.
Pretty concise example here. The MSDN docs have the same but its spread over 5 articles with a bunch of info you don't need if you just want to work with containers. Just remember that if you do this using a storage key you need to make sure the compiled app is secured and only run by trusted parties.
Another in a long list of things which is really involved on Windows vs Linux/Mac/Other Unix.
I think your DoSomething method should take Bar instead of int as an argument. The IBarFactory kind of thing makes your project move in the direction of the enterprise fizz buzz. That said, it's not linear, also because the example is to simple, and depends on what you state to be the responsibility of the class Foo.
&gt; Exceptione ...Did you seriously make a class Exceptione : Exception {} just to avoid that little itty bit of English?
Just as long as you use the real Occam's razor, not the stupid "if its simpler, is must be right" version. Same for Murphy's Law, which isn't about bad luck, but rather about not designing things to be assembled in two different ways, only one of which actually work.
Thanks will do It's not for web is it... ?
Have an interface called something like `IProcessKiller` with a method for `killProcess()`, have two classes that inherit from this interface, `LinuxProcessKiller` and `WindowsProcessKiller`, and instansiate one at runtime. Then, you can just called `processKiller.killProcess()` and it will work on either platform, allowing you to change how each one works without affecting their implementation, and allowing you to add other strategies. For reference, this is called the [Strategy Pattern](https://en.wikipedia.org/wiki/Strategy_pattern).
I don't think it's overkill for this use case, as a matter of fact [https://github.com/App\-vNext/Polly#fallback](https://github.com/App-vNext/Polly#fallback) seems like it is made for this kind of behaviour.
Wasn't this problem was solved with generic programming techniques a long time ago?
[Woah!](http://oohlo.com/wp-content/uploads/2018/03/QuillIW.jpg)
&gt; For reference, this is called the Strategy Pattern. No, that's simply two classes implementing an interface. If that's all it takes to qualify for the Strategy Pattern, that's a pretty silly pattern (as most design patterns are). But also, OP wasn't asking how to model the code; they were asking whether there was already a suitable API. (There is not, as evidenced by ASP.NET's approach someone linked.)
How does generic programming solve the problem?
As /u/cryo has referenced, Job objects can be helpful here. If you have control of the implementation of the process you're running (the one that spawns the child process(es) you're currently trying to kill) then have it spawn those as Jobs instead of just new processes. Jobs spawned by a process will lifetime with that process, so if the parent is killed, it will take the Jobs with it. I'm not familiar with the specific API to do this, I just know it's been used successfully where I work to ensure that if anything (even system level events we have no visibility on) unexpectedly tears down our test harness process, it will take the application being tested down as well (rather than leave it running orphaned). I don't know how cross-platform Jobs are though.
Algorithms are written as free functions that access object data with duck typing. Look at the C++ standard library. sort() for instance is a function that can act on any collection as long as it implements the necessary iterators.
&gt;The expression problem is solved in a language when you can add a new case or a new operation without needing to recompile any of the other cases/operations. &gt;The Visitor Pattern confers some of the benefits of the functional style in an object oriented language. It allows you to add new operations to your data structure, without having to recompile the code that defines the data structure itself. The downsides are, it’s hard to understand if you don’t know what you’re looking at, and it clutters your code with implementation details that aren’t really relevant to your business logic. &gt;If we add a new case, we have to update every single visitor class to account for the new case. This fails the cases condition of the expression problem, because we would have to recompile the code implementing the visitor classes. Loved that part where you wrote some OOP monstrosity that didn't solve any problem and was worse than either the "Object Oriented - C#" or the "Functional - F#" solution. Some Java Fizz Buzz Enterprise Edition stuff there. Don't really get what the point of this was, want to handle newly added cases without recompiling? Add a default case that throws/returns -infinity casted to object/formats your hard drive. Or you can write shitcode like this: var areaVisitor = new AreaVisitor(); shape.Accept(areaVisitor); Console.WriteLine(areaVisitor.Area); And continue saying "The Visitor Pattern confers some of the benefits of the functional style in an object oriented language." with a straight face. Still trying to see where the benefits of functional programming come in setting properties of stateful classes like that but sure.
The visitor pattern allows you to add new operations without recompiling your cases code. This is identical to the characteristics of the functional approach and in contrast to the typical oop behavior. I wasn’t necessarily advocating it, just showing it as an option. I didn’t invent the visitor pattern or anything. It’s in the Gang of Four book, and classic oop.
In C# you can use [extension methods](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods) to somewhat address this problem. It's not 100% equivalent to the visitor pattern because the latter let's you properly implement the interface; however you don't always need that, so using extension methods is generally "good enough" to add functionality to classes that you cannot recompile.
It can be used for web but can also be used in windows applications. SignalR uses WebSockets to handle real\-time updates between the server and any number of clients.
Correct, in case /u/LateProduce wants to find out more, [link to wikipedia article about immutable objects](https://en.wikipedia.org/wiki/Immutable_object)
You don't need a visitor pattern to create new operations. You can use the switch statement with type patterns.. &gt; switch (e) &gt; { &gt; case Circle c: &gt; ... &gt; case Rectangle r: &gt; ... &gt; } You just have to have access to the members (just like F# would) to operate on the data outside the definition. The reason you might use a visitor pattern is for efficiency, since you can get to sub-type specific code in a few short hops. The type switch will evaluate each case linearly until it finds a match. Still, it is a bit heavy handed to use visitors everywhere. It makes sense when the logic is easily separable from the caller. F#'s discriminated unions have a hidden discriminator field that IL can use to branch quickly, like switching on a enum value. That's why you sometimes find examples of C# code using discriminators and sub typing together, in cases where the data model is actually closed but sub-typing adds other benefits, the addition of a discriminator makes it more efficient to branch between the cases without separating your logic into another class as with visitors. The C# design team is currently considering adding a form of discriminated union to a future version of C#.
True, but not all code bases can be updated to C# 7. I would love a full blown discriminated union type in C#, with exhaustive pattern matching. Then C# would essentially fully support algebraic data types (without the immutability by default).
Here's a very simple way to do things in C++: class square { double size; } class circle { double radius; } double area(square&amp; s) { return s.size * s.size; } double area(circle&amp; c) { return pi * c.radius * c.radius; }
This is terrific! I’ve been wanting to try a proof of concept in CQRS again and I didn’t want to write all the boilerplate. 
I never fell for that one, but I have screwed up immutable lists in a similar fashion.
And we're back to the bullshit. 
True. I have seen code optimized to the level of bullshit.
Thanks for the elaborate reply, just one question. Does the "9" in "Console.WriteLine(remove_char("w3resource", 1));" represent the 9th index aka "n".
The 1 represents how many characters to delete from the Nth array index.
what is the nth array index, sorry newbie : (
what value does n have? Console.WriteLine\(remove\_char\("w3resource", 9\)\); Is it the 9th letter in this case?
It has whatever you pass into it. In this case, yes, n would be 9. The other two cases n would be 1 or 0. 
Thanks makes so much sense now! ; )
It's the letter at the 9th index within the string. Remember the zero-based principle, so it's actually the 10th letter within the string. As for the `n`, it's a variable. In this case more precisely, it's variable that got created as a parameter. So once you pass the number `9` to the `remove_char(string str, int n)` method, it assigns it to the `n` parameter. Then, within the method you use `str.Remove(n, 1);` The `n` is then substitud with whatever value you passed to the encompassing method.
What was the objective of this exercise? To predict what it will output?
The visitor pattern doesn't need stateful classes though.
What's your definition of correct and optimal? In the past, I've found it hard to argue "hey, this code is crazy inefficient or 10x too verbose" against "well, it works... so no point changing it now".
It's blunt, but frankly something people need to learn. You should not be hitting Reddit for answers to these questions. You're going to get much more meaningful responses doing proper research and that's going to scale better with your growth. I think Reddit is okay for opinion-based questions. It's the wrong platform for yes/no questions that have rigid responses that've been explored thoroughly prior.
 string remove_char(string str, int n) { # Take the string array (str) and remove 1 characters starting at n (index of the array) return str.Remove(n, 1); } 
Actually I never have! Funny, I literally never used minicube! In theory it should work. In practice, who knows. 
Google is a good friend here. https://docs.microsoft.com/en-us/dotnet/standard/base-types/trimming scroll about 3/4 down the page to "Remove"
You should make a more function based approach. Here is a simple example. static void Main(string[] args) { Console.WriteLine ($"{GetInputMinMax (0,10)}\n"); } static private int GetInputMinMax (int min,int max, string err="Not what im looking for bro") { int ourValue; while (1==1) { ourValue=GetInput($"give me a number between {min} and {max}"); if (ourValue&lt;min || ourValue&gt;max) Console.WriteLine (err); else break; } return ourValue; } static private int GetInput (string inp) { int numba; do { Console.Write ($"{inp} : "); } while (!int.TryParse (Console.ReadLine(), out numba)); return numba; } } You can extend this example alot by using object type as return value. Hope the formatting aren't too horrible :) 
Do you have a link to the discriminated union C# proposal? Thanks. 
Not the same thing. There is no contract in your code that requires a function/method called `area` for both `square` and `circle` structs. Going this way it's easy to replicate in C#, you can actually do the exact same thing (although the functions would be static methods). This is different from what is presented by OP and is basically the extension methods approach I suggested earlier (which are much more idiomatic in C# than regular static methods).
Lambdas - expect them to be alloc free since no closure. Where invocation returns an IEnumerable so alloc there (not sure if myList iteration is alloc, since Where probably special-cases IList&lt;T&gt; to avoid alloc), both ToLists wasteful. Not sure if OrderBy invokes key projection function once per item or numerous times, but certainly doing at least N allocs there when could use StringComparator instead. 
Everything you said, including removing the unnecessary ToList calls, would have been considered a "premature optimization" by far too many people I met both online and in person. 
Neat. One question: how would I rollback (one or many) commands if a command later in the sequence failed?
&gt; Add a default case that throws/returns -infinity You missed the point. You can add _ -&gt; failswith "not implemented" to the F# version, but it's not the point. This would just make the compile-time error become a run-time error, which is obviously worse. Also, adding a meaningless implementation (like returning -infinity) is, well, meaningless and worse too. &gt; Still trying to see where the benefits of functional programming come in setting properties of stateful classes like that You can make the method `Accept` return something instead of caching it, which would make it stateless. I agree that using a stateful class for this is weird. &gt; some OOP monstrosity that didn't solve any problem and was worse than either the "Object Oriented - C#" or the "Functional - F#" solution Yeah. Most GoF patterns are unnecessarily complicated. I rather use extension methods and live with the expression problem.
Also, never forget the question I asked myself today at work and won big on: - Is myList something I got from the DB, where including sorting/grouping there is cheaper than in-memory for my data set? Many times the DB already has indexes to do those operations, and can handle it far better.
Keep in mind that even with structs, `default(&lt;T&gt;)` can [fake them out](http://share.linqpad.net/dc5lgh.linq). 
Why do I need a contract? If someone needs area on the triangle struct and it doesn't have it then it won't compile.
Great article. The main takeaway should be the functional vs OO approaches to adding new functionality. 
Arn't you just basically saying: "I can't update my codebase, but I'd love to see all these features which would require me to update my codebase"
Wrong way. Just loop over the characters using Char.IsNumber and friends, shoving the good ones into a string builder. It will be easier to write, better performing, and less error prone. The only reason to use a regex for this is if you want to learn how to use regex better.
Have you tried using CloseMainWindow instead of Kill? If the app you are starting is launching the secondary processes it may kill them for you cleanly although probably more slowly than an outright kill. 
Sure, Char.IsNumber is fine to evaluate if it is a number, but what about the lower case characters?
&gt; Why do I want a contract? This problem arises *because of the contract*, in both OOP (C#) and FP (F#). If you simply ignore that of course you can proceed with a bunch of functions, but it's missing missing the entire point. (Although I agree that it's not something we need to care too much about in everyday programming) &gt; this can also be done with static methods in C# but it never is Actually It is, with extension methods (which are static methods). It's a widely used feature, even the framework uses it extensively (linq methods are extension methods). --- Let me put it another way, because this problem is not restricted to the way it's presented here: For example, say we are creating a matrix (list of lists). Each inner list is a row: m = [[1 2 3] [4 5 6] [7 8 9]] By doing this way it's very simple to add a row: m = [[1 2 3] [4 5 6] [7 8 9] [0 0 0]] But adding a column is "complicated", because we need to revisit each line: m = [[1 2 3 0] [4 5 6 0] [7 8 9 0]] Now if we change the representation (each inner list is a column instead of a row), we just change the problem too: It's easy to add another column, but complicated to add another row. See? It's the expression problem. It's a general problem.
Use Char.IsLower. https://msdn.microsoft.com/en-us/library/system.char.islower(v=vs.110).aspx 
Pattern matching on type isn't that far off from type sniffing, really: using System; using System.Collections.Generic; public class Program { public static void Main() { var shapes = new List&lt;Shape&gt; { new Circle { Radius = 2, }, new Rectangle { Height = 3, Width = 4, }, }; foreach (var x in shapes) { Circle c; Rectangle r; if ((c = x as Circle) != null) { Console.WriteLine("Area is {0}", 3.14 * c.Radius * c.Radius); } else if ((r = x as Rectangle) != null) { Console.WriteLine("Area is {0}", r.Width * r.Height); } } } } internal abstract class Shape { } internal class Circle : Shape { public int Radius; } internal class Rectangle : Shape { public int Width; public int Height; } It's just prettier. Exhaustive pattern matching isn't really possible without a discriminated union. You could gin one up and add a Match() method, though. A class-based union is probably most convenient for your purpose using System; using System.Collections.Generic; public class Program { public static void Main() { var shapes = new List&lt;Shape&gt; { new Shape.Circle { Radius = 2, }, new Shape.Rectangle { Height = 3, Width = 4, }, }; foreach (var x in shapes) { x.Match( c =&gt; Console.WriteLine("Area is {0}", 3.14 * c.Radius * c.Radius), r =&gt; Console.WriteLine("Area is {0}", r.Width * r.Height) ); } } } abstract class Shape { protected Shape() {} public abstract U Match&lt;U&gt;(Func&lt;Circle, U&gt; onCircle, Func&lt;Rectangle, U&gt; onRectangle); public abstract void Match(Action&lt;Circle&gt; onCircle, Action&lt;Rectangle&gt; onRectangle); public class Circle : Shape { public int Radius; public override U Match&lt;U&gt;(Func&lt;Circle, U&gt; onCircle, Func&lt;Rectangle, U&gt; onRectangle) { return onCircle(this); } public override void Match(Action&lt;Circle&gt; onCircle, Action&lt;Rectangle&gt; onRectangle) { onCircle(this); } } public class Rectangle : Shape { public int Width; public int Height; public override U Match&lt;U&gt;(Func&lt;Circle, U&gt; onCircle, Func&lt;Rectangle, U&gt; onRectangle) { return onRectangle(this); } public override void Match(Action&lt;Circle&gt; onCircle, Action&lt;Rectangle&gt; onRectangle) { onRectangle(this); } } } This isn't actually all that different from the Visitor solution, as it just replaces the explicit visitor type with delegates defined at the callsite.
Thanks yah, I got it it \- appreciate it. if\(Char.IsLetter\(i\) || Char.IsNumber\(i\) || Char.IsSeparator\(i\)\) || i.Equals\('.'\)
 myString = String.Join(“”, myString.Split(‘’).Where(c =&gt; Char.IsNumber(c) || Char.IsLower(c)));
There is no formal proposal yet. Here is an old discussion with reference to some design discussion nearly a year and a half ago. https://github.com/dotnet/csharplang/issues/113 
&gt; This problem arises because of the contract Which is my point. There are ways to solve these sorts of complex problems without intrusive virtual method interfaces. The entire C++ standard library manages this. It has a single sort function that works on every ordered container, including any one you make yourself. You can make new sort algs that do the same without touching a single container. Generic programming techniques got us out of this mess (and created a different but perhaps less painful one). Using run-time polymorphism for is typically more of a problem than a cure. When it's absolutely necessary then there are very nice non-intrusive techniques in C++ using type erasure where the objects do not require modification and overhead is kept to a minimum. It's still a pain and rarely truly needed but works elegantly for extension once the base is created.
There are a lot of general DDD and CQRS discussions out there, but do you think you could link us to one or two that fits the paradigm of what you’re trying to achieve with these libraries? Something of an introduction. 
Oh my, now that is fancy. You do in 1 line what I do in like 20! 
Unfortunately I'm not well versed in C++ so I cannot discuss its features. Maybe I should have a look at it sometime.
The issue he is discussing is actually called Breaking Change. If you are a library author you will face it all the time. Extension method is one of solutions. Not all new methods need to be added to base class.
You should familiarize yourself with IEnumerable (list like) operations. There are quite a few but they encompass just about all types of operations on a list. Makes life a lot easier.
Linq, my friend. Once you get the hang of it, there is a whole new world of possibilities!
Instead of `[;,\t\r ]` in your regex - which won't catch other unexpected characters like !, ', " etc. - wouldn't it be better to either * Use a negated class `[^a-z0-9]` i.e. * Capture only those character/s allowed `[a-z0-9]` 
One of the key things is the ability to use duck typing. Imagine if you could do this in C#: void Increment&lt;T&gt;(T obj) { obj.Value = obj.Value + 1; } And that would compile to efficient code for any type T where the code was legal. You woudn't need a where clause for an "IIncrementable" interface that must be added to any class you want to use this with. It just works with any object that has a Value property of a type that you can add 1 to.
I'm glad you liked it! Any feedback would be appreciated! :)
I learned about the difference not too long ago myself but from Microsoft's own docs: &gt;These uses for DateTimeOffset values are much more common than those for DateTime values. As a result, DateTimeOffset should be considered the default date and time type for application development. https://docs.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime
Large methods or methods inside conditionals that are rarely true are best not inlined. Small one-liners should always be inlined. Sometimes to compiler does to wrong thing and you have to inline manually for best performance.
this is where c++ templates and c# generics differ. c++ templates are almost like code gen where it will try it out, and if it works, it works. c# generics don’t do that.
the upcoming “extension everything” in c# 8 will help further. im not very excited about some c# 8 stuff, but gimme those extension properties.
extension methods are actually my preferred way to doing functionality. treat the objects as most storage and primitive functions, and the interesting stuff is extension methods. best used with immutability.
grain of salt: performance of linq is bad. it takes a lot of machinery to run the linq magic. so no linq in perf critical code. grain of sugar: most code isnt perf critical, so usually linq magic is wonderful.
nit: ienumerable isnt list like. list like can do things like add, remove, index. ienumerable can only scan forward.
Be aware that this solution will produce invalid results with many non-English languages.
one of your comments has a comment like “jmp rax // tail call” . did you write your test in f#? how did a tail call get in there? i didn’t think that the c# compiler ever generated a tail il instruction.
i have to argue with people on this a lot, regarding the db. rdbmses are crazy good at what they do. i hate arguing about a couple joins being expensive, that we should flatten everything and handle sorting and filtering in code. no, thats literally why rdbmses exist, because the level of optimization they have for exactly that purpose is insane. 
Of course! This is a good place to start: https://docs.microsoft.com/en-us/previous-versions/msp-n-p/jj591573(v%3dpandp.10) The Xer.Cqrs project (which is a superset of Xer.Cqrs.CommandStack + Xer.Cqrs.EventStack + Xer.DomainDriven libraries) is built for use in the write side. The write side contains components for command handling + event handling + your domain objects. The Xer.Cqrs does not contain components for querying. Handling queries is the responsibility of read side. For that, a separate and lightweight Xer.Cqrs.QueryStack was built specifically for use in the read side. You will not find any Event Sourcing components in the Xer.Cqrs project as event sourcing is not really required for CQRS, but a separate library is being developed for that so that event sourcing can be easily integrated into the Xer.Cqrs when the need for event sourcing arises. Thanks for this. I plan on putting a CQRS introduction with references on the GitHub repository. :)
Nice, thanks for this! An issue can be logged for this. DateTimeOffset seem to be a better fit for Created and Updated properties. :)
Does this do exhaustive search of types? If I add new type, would I be somehow notified to update the switch to support it? With visitor pattern, you get a compile error and it needs to be fixed before moving on.
&gt; I mean new String? is that ok? Of course.. Well, technically no, that would have to be in an unsafe code block (this might be what you want but I doubt it). You can't write var foo = new string("foo"); It would have to be unsafe { fixed(char* b = "foo") { string s = new string(b); s.Dump(); } } Nitpicking I know but...
 new String("foo".ToCharArray());
By passing different types as params, the **COMPILER** \(not the runtime\) picks a method to run. Conditions are based on runtime stuff, therefore you have to write an appropiate method\(s\).
The `?` and `:` are short hand for `if` and `else` Example; return ustr.Length &gt; 1 ? ustr.Substring(ustr.Length - 1) + ustr.Substring(1, ustr.Length - 2) + ustr.Substring(0, 1) : ustr; Is the same as if(ustr.Length &gt;1) { return ustr.Substring(ustr.Length - 1) + ustr.Substring(1, ustr.Length - 2) + ustr.Substring(0, 1) } else { return ustr; } Hope this helps!
That helps abit but the: return ustr.Substring(ustr.Length - 1) + ustr.Substring(1, ustr.Length - 2) + ustr.Substring(0, 1) Is still confusing what is happening in each sub string and whats happening inside the brackets like the "-1" and the 1, (ustr.Length-2 ) and the ustr.substring(0,1) what is happening on each stage? 
[MSDN Docs for Substring Method](https://msdn.microsoft.com/en-us/library/aka44szs\(v=vs.110\).aspx) [DotNetPerls Link for the same] (https://www.dotnetperls.com/substring) Check these links out. If you still have some confusion feel free to ask. Also, It would be great if you looked at some popular classes and their methods, like String, List, Integer etc.
The first "Color Coder" text in the post is a link. &gt; Color Coder is an extension for Visual Studio 2015 and 2017. It can help you change the color of various programming constructs 
Fair enough, it's easy to resort to the simple variants of those things. I see myself making that same mistake sometimes. Most of the time I do apply the real Occam's razor but I have more difficulty applying the real Murphy's law. On the other hand, I don't actually use that law much in argumentation, I use it more as a joke. And in that case it doesn't really matter ;-)
Why wouldn't businesses use one of the most supported, most versatile and fastest evolving language?
The string "w3resource" has 10 characters. Because C# starts counting at 0, the first character (w) is in position 0, the second character (3) is in position 1, and so on. The last character (e) is in position 9. `ustr.Length` will have the value 10 (because that's the length of the string). `ustr.Length - 2` will have the value 8 (because 10 - 2 = 8). `user.Substring(1, user.Length - 2)` gets a part of the string. The part it gets starts in position 1 (i.e. the second character), and is 8 characters long. So it misses out the first and the last character. You can prove that, for any string that's longer than 1 character, this will leave out the first and the last character.
&gt; Does this do exhaustive search of types? It doesn't and can't.
I can't answer this personally, but IT Central Station has user reviews for a variety of reporting tools that might be able to help you out, including the ones you mentioned. Users interested in these reporting tools also read reviews for Windward Studios during their search. Since our community compares them more often to Crystal Reports, you can see a direct comparison between these two solutions here: https://www.itcentralstation.com/products/comparisons/sap-crystal-reports_vs_windward. *Disclaimer: I work at IT Central Station. 
Murphy's law is something to keep in mind when designing hardware or APIs.
Wow, 12.7x improvement to concurrent httpclient get requests. Impressive!
Yah I spent a great deal of time with the simple characters; á é to my surprise the IsLetter is very inconsistent. On my Mac these return true, on linux false! 
Make a method that takes any string and does the typewriter effect, then call that instead of Write line. 
I was actually referring to characters that require more than one System.Char to be represented.
I was thinking about that yea, sadly i have no clue where to start as i'm not all that experienced yet.
I never thought of it that way, but it's a good point :)
You're gonna want to create a void method that takes a string as a parameter, let's call this parameter "input". The method will have a for loop, starting at 0 and iterating towards input.length (int i=0; i&lt;input.length; i++) Inside the loop, have it write each character and then sleep the thread for a tiny bit of time. Strings are kinda like arrays, so you can use i as a way to choose your character. You'd do Console.Write(input[i]); System.Threading.Thread.Sleep(5); You can change that 5 to the time in milliseconds between each character to make it feel right. So overall your method looks like: public static void Typewriter(string input) { For (int i = 0; i &lt; input.length; i++) { Console.Write(input[i]); System.Threading.Thread.Sleep(5); } } The important thing about this method is that it doesn't automatically move to the next line when you use it the way that WriteLine does, so whenever you want to skip to the next line just add a \n to the end of your string and it'll move along. \n is a way of writing "return" like when you're typing and it moves the cursor to the next line. Hope this helped and good luck!
Impressive changes. Does anyone know how some of these compare to dotnet non-core? Curious if it's more like 2.1 due to years of optimizations, or if Core would be faster in most situations.
[Here's the original post from April 18, the day this was published](https://www.reddit.com/r/csharp/comments/8d8o35/performance_improvements_in_net_core_21/).
There is no exhaustive switch in C#. Maybe in the future. 
No need really to do substring for first and last char. This would be much better (to read as well): public static string FirstLast(string ustr) { var len = ustr.Length; return len &gt; 1 ? ustr[len - 1] + ustr.Substring(1, len - 2) + ustr[0] : ustr; }
Thankfully I have no need to support these characters as the input are system commands
If you want to skip a line after every line, just add a Console.Writeline(); to the end of the method after the loop.
That will skip a line after every letter.
Yeah just add either Console.WriteLine() at the end of the loop or add "\n" or Environment.NewLine to the end of the string in the method.
"yet" (actually you could in fact write an analyzer that detects a pattern and enforces that the switches are closed for a particular provably closed set of types) https://github.com/dotnet/csharplang/issues/486 The rough design relies on using an abstract class with a private constructor: public partial abstract class Shape { private Shape() {} } Elsewhere in the assembly you can define: partial abstract class Shape { public sealed class Rectangle : Shape { ... } } partial abstract class Shape { public sealed class Circle : Shape { ... } } You cannot define subtypes in another assembly because they wouldn't have access to the constructor, thus all subtypes must be nested inside the abstract type (therefore in the same assembly). You cannot have an instance of the abstract type that is not one of the subtypes either because it is abstract. That means the compiler can know the full set of leaf types and can enforce a switch will close over them. We may eventually get some sugar that makes this pattern nicer.
 public static void Print(string input) { var rand = new Random(); for (int i = 0; i &lt; input.Length; i++) { Console.Write(input[i]); Thread.Sleep(rand.Next(50, 200)); } Console.WriteLine(); } Something like this gives a nice human typing like effect. Increase the random intervals if you wish. Glad to help!
True, but aren't most of the base Linq operations defined for them and then passed on through inheritance to lists, arrays, iqueryable?
I can say one thing: I think you have a very common misunderstanding about how async works. Async is not the same as multi threaded. So you are actually asking the wrong questions :) See this SO question and the answer by the allmighty Eric Lippert: https://stackoverflow.com/questions/34680985/what-is-the-difference-between-asynchronous-programming-and-multithreading If you want to know more of the internals of async/await, I can recommend this blog series by Sergey Teplyakov: https://blogs.msdn.microsoft.com/seteplia/2017/11/30/dissecting-the-async-methods-in-c/ It's pretty in depth (though possibly too hardcore, depending on your knowledge level). 
Good intro from Stephen Cleary https://blog.stephencleary.com/2012/02/async-and-await.html
I hated the new behavior (doesn't help that it tends to bug out when moving the browser window to a different monitor), stumbled upon this on [today's issue of Dew Drop](https://www.alvinashcraft.com/2018/05/30/dew-drop-may-30-2018-2735/) and thought I'd share :)
Substring is commonly used with the following two overloads: * Substring(int, int) - Starting at the index specified by the first parameter, return the remaining string for a total length specified by the second parameter. * Substring(int) - Starting at the index specified by the parameter, return the rest of the string. So, given the string "w3resource", here are the results of each substring: ID|Operation|Result :--|:--|:-- 1|ustr.Substring(ustr.Length - 1)|e 2|ustr.Substring(1, ustr.Length - 2)|3resourc 3|str.Substring(0, 1)|w 4|Result1 + Result2 + Result3|e3resourcw I hope that helps explain the substrings. A better way to perform what the task is asking to do: public string SwapCharacters(string input, int charIndex1, int charIndex2) { char[] chars = input.ToCharArray(); chars[charIndex1] = input[charIndex2]; chars[charIndex2] = input[charIndex1]; return new string(chars); } Much simpler and readable, TBH.
Would there be a way to show the text cursor while this happens? I tried setting Console.CursorVisible to true but no luck.
I would just test that barList contains the correct amount of Bars and a separate test that ensures that whatever happens when you create a bar with the constructor is actually what is expected. That's all that can be read from this code. How the barList obtains the bars is irrelevant to the test, as its irrelevant to the outcome, unless there's other logic not written here..
**From the article:** &gt; Finally, all of the examples shown throughout this post were already at least as good in .NET Core 2.0 (if not significantly better) as in the .NET Framework 4.7, and then .NET Core 2.1 just made things even better. 
Oops. Missed that part.
To be fair, it doesn't really make any statements about the performance of the entirety of .NET Core and Framework, just for the methods they are testing.
To remove certain letters in a array.
The jit can opportunistically recognize tail calls.
I preffer this style: return ustr.Length \&gt; 1 ? ustr.Substring\(ustr.Length \- 1\) \+ ustr.Substring\(1, ustr.Length \- 2\) \+ ustr.Substring\(0, 1\) : ustr; 
I've found the way some improvements were described misleading. .Core serves many more requests per second than IIS does. Of course it does, IIS does a whole bunch of things that .Core doesn't. If you don't need the things IIS does, its a big win. 
I'll be doing this migration sometime soon because IActionResult&lt;T&gt; &gt;Remove all references to &lt;DotNetCliToolReference&gt; elements for "Microsoft.AspNetCore", "Microsoft.VisualStudio", and "Microsoft.EntityFrameworkCore" packages. These tools have been replaced by global tools. Ok, but a mention of how to install the global tools would have been nice.
Nice! Does anyone know if there is an update for .Net Standard as well? (In order to use .Net Standard class libraries with the full framework.)
[ASP.NET](https://ASP.NET) Core can target .NET Core or .NET Framework, and can run behind IIS as a reverse proxy to get the same benefits of IIS while still having improved performance \(though obviously less than using Kestrel directly\).
Indeed. Maybe I missed something, but I didn't see comparisons of Kestrel behind IIS vs IIS, just Kestrel vs IIS.
Other articles and my feeling that often... &gt; it doesn't really make any statements about the performance of the entirety of .NET Core and Framework, just for the methods they are testing. 
In a UI app like a winforms or xaml the main thread (aka UI thread) is not usually doing anything. Its mostly idle, waiting for input. While its waiting, its basically in a loop on an event queue. Unfinished async state machines get a chance to run on this thread when its not busy doing UI work.
Visual studio?
Visudio. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Visual studio?'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Visual Studio 2017
Does anyone have good reading about the new Channel type? 
Great to see Lazy Loading included as part of [Entity Framework Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/).
Is this a loss meme
Visual Studio is not a framework
Winforms? check [https://github.com/ComponentFactory/Krypton](https://github.com/ComponentFactory/Krypton)
Thnx a lot Bro ;)
Another solution that I see often (usually with interfaces) is to add a new interface IShape -&gt; IShape2 with the new methods and implement IShape2 only where you need it. 
There is a bit of a breakdown here: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/ Basicly async/await make working with Tasks (called promises in other languages) easier. If you unfamilar with tasks/promises take a look here: https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-based-asynchronous-programming As for how does the main thread run both the state machine and it's own synchronous code its completely up to you or the framework you're using. For example in ASP MVC if a controller returns a Task from an action the MVC framework internals will start handling other requests on new threads and then come back to that Task once it's completed but that multiple thread code/logic was all coded by the MVC team. In Javascript land everything runs on 1 thread so even though they have async/await (supported in newer javascript) there is no multi threading happening. You could have a C# framework that supports Tasks and run all on 1 thread if you wanted. 
If there’s something you know is time or memory intensive to create but there’s no guarantee you’ll use it. 
One of the biggest practical improvements not mentioned for some reason is the addition of readable async stack traces [https://www.ageofascent.com/2018/01/26/stack\-trace\-for\-exceptions\-in\-dotnet\-core\-2.1/](https://www.ageofascent.com/2018/01/26/stack-trace-for-exceptions-in-dotnet-core-2.1/) Thanks /u/ben_a_adams !
You could load it on demand yourself. Don’t get me wrong it sure is convenient and avoids nre’s when you forget to load/include something, but in the grand scheme of things I think this a crutch that leads to performance problems down the line. At least it’s optional.
Yes your example of having an if else elseif nested inside of a switch block is a nested decision structure. 
they have equivalent benchmarks of aspnet core on kestrel (what i would consider “pure” dotnet core) and aspnet core on iis (so framework) and its night and day. kestrel gets millions of rps, iis a couple hundred thousand. a large part of that is just how iis works, but the big takeaway is that if you do things the pure dotnet core way, your perf is going to be better than the traditional framework way.
do all tasks resume on that thread or just the ones originally awaited on that thread? i dont fully understand when configureawait(false) actually does anything. if i had a background thread that awaits, it doesnt have a synchronization context right? it wasn’t executing on the dispatcher thread when the execution context was captured, so presumably it would be free to resume on any free thread.
Iv'e just installed the new .NET Core on my linux box. I don't use any of the fanzy new stuff, but i did notice that the compiler seems a lot faster.
You know how a knitted sweater is basically 1 piece of string looping back on itself to make a hole for the string to go back through the next time around? That is pretty much the logic for the pattern used in an async state machine. Your method: async Task Foo() { Console.WriteLine(1); await Bar(); Console.WriteLine(2); } compiles out to something like (really simplifying here): Task Foo() { var machine = new Machine(); machine.MoveNext(); return machine.Task; } class Machine { TaskCompletionSource _tcs = new TaskCompletionSource(); int _state = 0; public Task =&gt; _tcs.Task; public void MoveNext() { switch (_state) { case 0: _state = 1; Console.WriteLine(1); var t = Bar(); t.ContinueWith(MoveNext); break; case 1: Console.WriteLine(2); _tcs.MarkCompleted(); break; } } } That line `t.ContinueWith(MoveNext);` inverts the call stack so that the state machine for `Bar()` winds up calling the `MoveNext()` method here. Eventually you call something that sets an operating system interrupt and goes to sleep waiting for a callback to occur instead of knitting through another level of state machines. 
Anyone receiving an HTTP 502.5 error when deploying to Azure?
To add to the above: To make this more realistic, I would generate a random wait between each character and word. If 30 milliseconds is a good average pause, then a random wait between 25 and 35ms would make seem like you’re actually typing. Bonus if you weight the wait based on keyboard position instead of a random number. Home row gets 20ms where other Shoah gets 35ms, punctuation and numbers get 45ms and anything requiring shift get 50ms. Then a random wait of maybe 75-150ms between words would make it seem like your thinking of the next word to type. 
No one can answer that based on the information given. 
Have you even tried looking up the documentation on Substring? It explains everything. 
Learn how to google, seriously. Your questions are very basic and the framework is very well documented. 
&gt; I don’t know how cross-platform Jobs are though. Na, it’s a Windows thing exclusively. 
So the Main thread doesn't really wait for the Task, but recieve an interrupt when the Task is finished?
Thanks, I'll take a look at them.
I have found the perfect timing for what i like in terms of random however i am struggling a bit with 2 things 1. I want the text to finish the sentence quicker if a user presses a button 2. Right now the readkey() i use (on the end of my story it says press a key to continue)is already active at the start. Which means that when the story is typing and i press enter, it continue's as soon as the typing is finished. I want the readkey to become active only once the full sentence of press any key to continue is displayed
What do you mean? You don't need to change the method due to making it virtual. Making it virtual just makes it possible to override.
Try something like this maybe \(written really fast\) public static void Print\(string input\) { var rand = new Random\(\); int index = 0; do { while \(!Console.KeyAvailable\) { Console.Write\(input\[index\]\); index\+\+; if \(index == input.Length\) break; Thread.Sleep\([rand.Next](https://rand.Next)\(50, 200\)\); } } while \(Console.ReadKey\(true\).Key != ConsoleKey.Enter\); if \(index \&lt; input.Length\) Console.Write\(input.Substring\(index, input.Length \- index\)\); Console.WriteLine\(\); }
Yeah VS 2017
Drop into the console and check the installed SDK before deploying. Looks like many regions don't have it yet
Fix it by waiting. SDK isn't installed yet. You can use the console to verify with "dotnet --info"
If you don't have an SSD in your PC, that would probably help.
I got confused because it says in the ASP.NET Core 2.1 post that you can deploy today, but on the .NET Core post it says later this week. I just checked and they’re still running rc1.
[http://www.robmiles.com/s/CSharp\-Book\-2016\-Rob\-Miles\-82.pdf](http://www.robmiles.com/s/CSharp-Book-2016-Rob-Miles-82.pdf) Maybe check out this book. Its pretty useful for in depth explanations with good examples. Also if you want to learn design patterns, I have this document pretty useful as well [https://github.com/anupavanm/csharp\-design\-patterns\-for\-humans/blob/master/README.md](https://github.com/anupavanm/csharp-design-patterns-for-humans/blob/master/README.md)
There are no settings for this which i am aware of however, i could be wrong. Might be some kind of caching issue. Likely there is something hogging your processor. Download sysinternals and use process explorer to watch for spikes when the issue occurs. 
You are converting your char to int in the for loop
Look at my page i posted post where i didnt converted char to int and the result was the same
If you want an array of ints that print 1 2 3 4 you need to use int.Parse. if you want an array of char that prints 1 2 3 4 you need to use char in your loop. No idea what you are going for because you never explained anything about what you are doing in any of the four posts you spammed out
I'm learning a lot atm! Thanks so much for the great help :). This works perfectly. Just going to adjust it a bit for my needs but implemented it! Thanks!
I didnt wanna do nothing special.I was doing some experiment and when i "spammed"i only wanna to know why the result of this program was so strange.
I didnt wanna do nothing special.I was doing some experiment and when i created this post i only wanna to know why the result of this program was so strange.
So do exactly what Lazy Loading does in a manual way rather than use syntactic sugar?
Are you running any extensions? ReSharper in particular had a reputation for making Visual Studio unusably slow. 
Has there been any movement on 2.1 standard to get some of these library features into Framework? We've got Wpf and Winforms apps I'd love to use some Memory lib content to power. 
Not runing any extensions so far.
I would recommend at least 16GB of RAM, and an SSD. Have the drives been defragged after installing 2017? I'm wondering if your computer is i/o bottlenecked, or maybe just ram starved.. anything else running also? (Psst: Newegg.com has 120GB SSD on sale right now for $30!)
Thanks, looking forward for the saga implementation in order to have atomic operations :)
&gt;how iis works Aka what IIS is doing. If you don't need those things, then you probably have a big win. If you compare naked Kestrel to .Net Fx running in IIS, it seems like an unfair comparison. I think the comparison of Kestrel behind nginx or IIS to .Net Fx in IIS would be much more fair. I'm not debating that there are perf improvements, just expressing that I find some of them (as is often the case with benchmarks) to be a bit misleading in how they are presented.
Probably not what you are looking for, but you could give VS Code a try. Its much faster, though admittedly does less for you.
That's the thing, I have an SSD. The first time I installed VS I put it on an HDD though. Later I reinstalled it on the SSD, still no significant improvements though.
Yes* &amp;nbsp; \* Sometimes.... (when an await actually happens and the task is not already complete) &amp;nbsp; \* in what I consider to be the most straightforward cases to understand (there may be other patterns that are abstracted over) --- The point is it is an abstraction over the pattern and you can use this model of receiving an interrupt to think about how it works. You can actually see this for example in a console app: csproj: &lt;Project Sdk="Microsoft.NET.Sdk"&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt; &lt;LangVersion&gt;latest&lt;/LangVersion&gt; &lt;/PropertyGroup&gt; &lt;/Project&gt; Program.cs using System; using System.Diagnostics; using System.Threading.Tasks; namespace ConsoleApp3 { class Program { static async Task Main(string[] args) { Console.WriteLine("Before"); Console.WriteLine(new StackTrace()); await Task.Delay(4); Console.WriteLine("After:"); Console.WriteLine(new StackTrace()); Console.ReadKey(); } } } Will output Before at ConsoleApp3.Program.&lt;Main&gt;d__0.MoveNext() at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine&amp; stateMachine) at ConsoleApp3.Program.Main(String[] args) at ConsoleApp3.Program.&lt;Main&gt;(String[] args) After: at ConsoleApp3.Program.&lt;Main&gt;d__0.MoveNext() at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task&amp; currentTask) at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) at System.Threading.Tasks.Task`1.TrySetResult(TResult result) at System.Threading.Tasks.Task.DelayPromise.Complete() at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) at System.Threading.TimerQueueTimer.CallCallback() at System.Threading.TimerQueueTimer.Fire() at System.Threading.TimerQueue.FireNextTimers() `Task.Delay()` [creates](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L5425) a new [TimerQueueTimer](https://github.com/dotnet/coreclr/blob/85374ceaed177f71472cc4c23c69daf7402e5048/src/System.Private.CoreLib/src/System/Threading/Timer.cs#L443) which registers an update timer that eventually calls the CLR function [`CreateAppDomainTimer`](https://github.com/dotnet/coreclr/blob/85374ceaed177f71472cc4c23c69daf7402e5048/src/System.Private.CoreLib/src/System/Threading/Timer.cs#L201) where it jumps out to unmanaged code to do various different implementations depending on OS. On Windows it registers a Windows api Timer and the CLR starts running managed code back up at [`FireNextTimers()`](https://github.com/dotnet/coreclr/blob/85374ceaed177f71472cc4c23c69daf7402e5048/src/System.Private.CoreLib/src/System/Threading/Timer.cs#L228). 
Though my VS2017 runs like butter with 8GB of RAM, I'd second your recommendation for 16GB of RAM -- VS2017 is a hog and many other things that we developers usually install on our machines can take up quite a bit of memory (looking at you, SQL Server &gt;.&gt;). In fact, on my machine, I can have 3-4 instances of VS2017 open along with SSMS and I won't notice any lag or slow loading times. Also, I'mma look at that SSD on Newegg -- I could always use another :-D.
Worst addition ever. "Our application is slow" - 99.9999% of the time because of lazy loading...
Which DIMM slots are your RAM sticks installed in? Assuming 4 slots and two 4GB sticks, are they installed in slots 1 and 2, 1 and 3, 3 and 4 or 2 and 4? Many mobos suggest installing RAM sticks in slots 1 and 3 or 2 and 4 so that both DIMM channels are being used. If your sticks are installed on the same channel, your RAM bandwidth is half of what it should be. If you have 4 slots but have 3-4 sticks then ignore everything I've said so far. I see in the comments you have VS2017 installed on an SSD. I wonder if your SSD is having issues? It probably isn't but are there any other programs like games that are taking a while to load? Have you modified the size of your page file or virtual memory? Finally, what motherboard, CPU and GPU are you using? I am only asking about GPU to get a more clear picture about all the hardware you are using. Further, are your RAM sticks DDR3, DDR4, etc.? What are the clock speeds of your RAM? My machine is harbors an ASUS ROG X370 mobo, Ryzen5 CPU, 8GB of DDR4@2666, a GTX 760 (I think?), and an SSD that contains my OS and VS2017 installation, among other things. I can have 3-4 instances of VS2017 running with each having the debugger running and it all runs like butter. Debugging webapps always seem to take awhile but I suspect it is because IIS express is doing its thing. My work laptop doesn't come close to my home PC as far as hardware is concerned but it too can run VS2017 in the manner I described above. 
This, though I would suggest that OP seek clarification from the teacher in order to be sure of the requirements.
Have you disabled anti-virus on your dev folder?
I've found that nearly every time I sat down to write an app that should have the look and feel of a console/shell, it was always easier to emulate using WinForms. I have a form control, a read-only rich text box control for output and a textbox control for user input. By subscribing to various events on the form, rich text box or textbox controls, I am able to emulate a console/shell. I can modify the colors of the text in the rich text box for various things like white for general text, red for errors, yellow for warnings, and orange for results. I always set thr background color of most of my winform controls to "30, 30, 30" with the foreground color being "System Colors &gt; Control". It is easier on the eyes and yellow text on a dark background is, of course, easier to see than yellow text on a light background. Further, my font is nearly always set to Consolas -- it is a monospaced font which means characters always line up (which is why many if not all code editors use monospaced fonts lile Consolas -- VS and VS Code use Consolas by default). If you aren't completely sold on the idea of using a Console app, I'd suggest using Winforms. Have a good one and I hope it all works out :-D.
When you're making partial updates to a complex entity. If I have an entity with 5 lists on it, and I might update any of those lists, I don't want to pull all of them just to update one. To do it manually is a lot of work, lazy loading \+ mapping is very very easy.
&gt; does less for you. Which is not necessarily a bad thing. VS is a tall tree to climb. Especially for somebody new to programming.
This is a good point. I've seen real-time virus scanners go endlessly hog wild on VS resources while debugging and file managing.
You can conditionally add includes, there is never a time where you don't know what operation you are performing. Execution pathes aren't random.
You need to have the SSD as the c-drive, as Vs always installs most of the content on the c-drive, mine was also extremely slow, until I replaced my c-drive with an ssd
There is only the nuget system.memory packge for now. But I also hope that they come to Framework sooner rather than later.
Turn off code lens. 
WPF isnt cross plattform. You can move your logic into .net standard libraries though and use these from a .net core app with some kind of cross plattform UI -&gt; Avalonia, Xamarin (in the future?), ...
WPF is not cross-platform and there are no plans to make it. You may want to look into [AvaloniaUI](https://github.com/AvaloniaUI/Avalonia).
This is not VS... Go into your task manager and see what is taking your CPU and memory when you make a controller, or do random things in VS. Windows 10 search index is famous for bogging down the system. So is chrome. Then go learn how to troubleshoot basic PC problems before teaching yourself how to code. It can be insanely useful to not need IT help when setting up your system for a job. 
Yes. 120GB. Just enough for Windows and visual studio... I wish I was kidding
You can go with a self\-contained app option. More info [here](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd).
Removed: Rule 7.
On phone, forgive me for lazy formatting. var query = context.Set&lt;People&gt;().Where(...); If(condition) query = query.Include(x=&gt;x.Item1); query.Single(...); I am recommending you plan what you will need instead of having it make multiple round trips to the DB.
Can you share a Code sample with a stopwatch of sorts and we can at least compare run times. It might help isolate poor code vs an actual system issue...
That seems incredibly fragile. I build data collection systems, so it's far more important to me that everything saves correctly. 100ms of back and forth db is fine compared to the risk of messing up a conditional include...
They have code that checks to see what projects need to be rebuilt. They recently added that capability to the dotnet CLI, which should make debugging from something like VS Code faster.
Contrived example but imagine [searching for a related entities](https://msdn.microsoft.com/en-us/library/dd456846\(v=vs.100\).aspx). You could accomplish the same thing without lazy loading but you'd have to perform quite a bit of additional labor. Just like anything else in your toolbox, it can have negative impact if you use it the wrong way (or don't understand how it works). But it's super useful when you do need it.
I have also been frustrated with how bloated and slow Visual Studio is, so with dotnet core I switched to using the dotnet cli and VS Code and have never looked back. There's extensions for the things I truly need and the overall experience is much faster/smoother.
I hope you are not doing mobile app dev... the module is like 30Gig.
I'm still in college and I work as a work\-study student in the IT department but they use PowerApps and it's my only experience for working in a team. Anything else I should consider?
Unfortunately it's very difficult without working in a corporate setting. There's a reason people do a few years as a junior dev, a few years as a senior dev and then go on to lead and stuff after at least a decade (in most cases) - real-world experience is how you grow your skills. Until you are doing that, open source is by far the best way to get exposure to the complexities of real-world programming.
Are you saying that I'm stuck more or less until then? And can you clarify what do you exactly mean by open source? Just get on github and make my projects public?
I see you've mentioned you're in college. Is it for CS or related degree? Doesn't HAVE to be but if so it would help. Why not reach out to different companies about internship. You may be able to ask your professors if they know of any part time / internship opportunities available
No. You're not stuck. I mean choose an open-source project that has a lot of activity and participate. Talk to the people on it. Compile the code. Study it. Contribute code to it. Coding with others on real-world software is the nest way to get up-to-speed as a professional.
I wasn't aware of such opportunities. Should I looking at GitHub projects or any other platforms I can consider?
I dont think it would matter about being international since you're actually here going to school...but I could be wrong. As for the CS classes, this is very likely bc you seem to have already done your research and self taught? I didn't go to school for CS but do work in that field. With the summer being here I see places looking for internships quite often
Open source in this sense means things like github yes. But also it specifically means working with others on a project. Rather than making your code open, go find some else’s project that is open and contribute to that. Showing you can work well with others, produce work in module/feature based iterations, take feedback, resolve conflicts, adapt to coding styles and preferences of others, etc. is the goal. The reason “real life” experience is priceless is because you have constraints in the real world. You usually don’t get to choose what language you’re using, your stack architecture, what security/proxy issues there are. So yeah at some point being hired/starting your own business and working on “real life problems” is the next step.
&gt;When I create a Controller it takes like 10 seconds for it to be ready. Are you scaffolding? That's usually a bit slower in my experience. Just create empty controllers and go from there. &gt;When I start a server it takes like 20-30 seconds to load a page for the first time. Go to tools &gt; options &gt; debugging and uncheck "enable JavaScript debugging for asp.net". Obviously this disabled JS debugging but I've found it to be really slow on start up. I just enable it when I need to.
GitHub is the main one by far. You'll be able to find a major .net project easy enough. The nice thing about this is that you'll be working alongside some of the best devs there are, often Microsoft devs themselves. You really couldn't ask for better. If you do that you'll be MILES ahead of other devs on your class and a lot of the ones you'll come to work with too.
By default async code resumes on the execution context that was in effect when the await happened. An execution context may contain one or more thread. The execution context associated with the UI thread has just that one thread. When you use ConfigureAwait(false) you allow the async code to continue on the thread pool’s context instead of the original context, so it will run on any one of the thread pool threads. This is best for any code that is safe to execute in parallel. If you know your code is already executing on the thread pool’s context there is no need to use ConfigureAwait. 
https://www.codingame.com/start is a great website to reinforce certain coding practices in a fun way. https://www.hackerrank.com is a great website for rerunning you through everything and it’s even a website you can use to show employers hoe far along you are in whatever language you are using.
It’s most likely a virus scanner, and this is by no means a basic pc problem. It might not even show up as an anomaly in the task manager
Start some projects of your own. You don't need to even see them to completion, just work on something you enjoy until you don't enjoy it anymore and move on. The experience you'll get from it is priceless, so just have fun with it. It doesn't even matter if there is already something out there that does the thing your project does... just code! When you're feeling more confident, try to contribute to some open source projects on git hub. 
Is your project stored on the SSD?
what cpu do you have? 
&gt; Then go learn how to troubleshoot basic PC problems ~~before~~ while teaching yourself how to code. FTFY. No need to stop learning to code while also learning how to fix your system.
Look at his/hers post: i5-7300.
Never had any stability and performance issues with Win 10 and VS 2017. Maybe something else is wrong on your end? Btw, I'm running on like 6 year old hardware. i5-3570k, 8BG DDR3, GTX 670, Samsung 850 PRO 256GB.
Thanks a lot! This clears things up 
[URL Fixed](https://blogs.msdn.microsoft.com/devops/2015/03/03/make-debugging-faster-with-visual-studio/)
very true, will edit
Yeah
I had issues on two diferent computer..The first release was pretty buggy. Last time tried, a few months ago, the Xamarin module wouldn’t install at all. Have developed for months so I hope it got better.
have you initialized the combobox?
Visual studio 2017\+ will install everything exactly where you tell it to, that's how you can put it on a thumbdrive and make it portable. 
No problem. I went to it to see if there’s anything more I can fix. My problem is ReSharper is bogging my IDE down. 
For cross-platform WPF tutorials you may have to check XKCD. 
Okey. Never used the Xamarin module, so maybe that's why it's working fine for me.
I wouldn't recommend learning Java. I've been programming Java at my job and personally for several years. C# and Java are too similar for learning Java to feel like learning something new. Plus I can only think of one feature that java has that C# doesn't have, but I can think of a lot more features that C# has that Java doesn't. If you want to learn something new that's related to C# I'd recommend ASP.NET Core or Xamarin as you already mentioned. I'm in the process of learning ASP.NET Core right now and it's pretty interesting since you can also use other web technologies in conjunction with it fairly easily. ASP.NET Core seems like a more marketable skill but if you're not worried about that yet and you find mobile development more interesting Xamarin would probably be the way to go. If you're not necessarily wanting to learn something that's related directly to C#, learning F# might be beneficial too. You'll still have the familiarity of .NET but you'll look at it through the perspective of a functional language. If you've never tried functional programming before it'll definitely be an interesting experience. I think that it's helped my general approach to various problems even if I still solve those problems with C#. 
if you are looking for work I would say start learning more of your tool chain along with anything else you pick up. Understanding the idiosyncrasies of things like Git, Jenkins, Jira, etc will help you in interviews and have you not be as clueless when working with a team. I would also suggest poking at modern concepts like container based deployment and AI to start stretching out. If you are looking to just learn, I would look into either diving into C# more (learning the other parts of Core, Standard and original Framework). If want to dive into something in Java land I would suggest Scala instead. While there is some stuff to learn in Java its more understanding that his library = that library. It won't matter much in practice anyway, most Java shops I have seen seem to shun polyglots anyway. 
Nobody mentioned Console.out.Flush(). It is highly recommended when printing one character at a time.
I have a large project with a lot of JS (multiple libraries, home brewed, controls, etc) and while the codebase ran snappy on Azure, locally it ran horribly, up to 3mins to launch on modern hardware. It ended up being the VS javascript debugging that just took everything over the brink. Adding the following to my web.config was a silver bullet, try this: &lt;add key="vs:EnableBrowserLink" value="false" /&gt; To your &lt;appSettings&gt; section
Your URL has some random "\" that look like they're being used to escape the "-"
I think that there are more to learn from c#, ev3n if you think you are at intermediate/advanced level.
If you're using Resharper, give Rider a try. It's really faster, but almost equal functionality. For me it was a solution when working with big solution \(sorry for tautology\) with 100\+ projects, where VS was just freezing during opening, reloading etc.
`if (i % 4 == 0) Console.WriteLine("{0}", go);` `else if (i % 7 == 0) Console.WriteLine("{0}", Cards);` `else Console.Write(i);`
I also posted an answer in regards to BrowserLink, add that to your check list and try it yourself locally, turned 30sec lags with 3min warmup lag into 10secs for me.
This would be more likely to come out of Unity than Xamarin.
I have having same problem but I have resharper so it might be one of the reason.
[Patch Match](https://en.m.wikipedia.org/wiki/PatchMatch?wprov=sfla1)
First and foremost you need a dev kit. You may ask Nintendo if you can buy one, but without any track record or a good prototype I wouldn't expect you'd get one.
To run C#/CLR code, a platform usually needs a .NET runtime implementation. Unity gets around this by compiling to native code via their IL2CPP compiler, Monogame probably does something similar with AOT compilation. As far as I know, your only alternatives are to either integrate a .NET runtime with the Switch's SDK (Probably Mono as it's easier to port), or do your own AOT compilation against the Switch SDK - neither are impossible feats, but probably quite time consuming. 
Can't you do something like: Name = gse.Accounts.FirstOrDefault(a =&gt; a.Id == l.AccountId)
&gt; Name = gseAccounts((int)g.Key) This didn't work, I can an error saying method name expected, but gseAccounts is a collection.
 Name = gseAccounts.FirstOrDefault\(accnt =\&gt; accnt.Id == \(int\)g.Key\).Owner 
You already have the accountID. You can't refer to 'l' because it's not in the scope of the new linq. I think you want something like this: Name = gseAccounts.FirstOrDefault(a =&gt; a.Id == AcctID).Owner
&gt; Name = gseAccounts.FirstOrDefault(accnt =&gt; accnt.Id == (int)g.Key).Owner This worked!! Thank you! How did you figure that out????
Yup, that was it. Thanks man! How can I get better with this? I searched google apparently not good enough to find an answer with no luck.
one more thing, how can I order by the count?
No problem. You where close. Really the best way is to just do it and understand who scopes/closure works and lists work 
If I have read your question right you can change it to this: var GSEOwners = equipCollection .GroupBy(p =&gt;new { p.AccountID, p.Name}) .Select(g =&gt; new myClass { AcctID = (int)g.Key.AccountID, //gives gse account id accCount = g.Select(l =&gt; l.AccountID).Count() Name = g.Key.Name }); This will group by ID and name so it's all in the same query. Have a look at dynamic objects and Expando class
You needed the ID, but you just created it yourself 2 lines before that, \(though I think you can't use AcctID at that point\), so I just plugged it into the code. I am glad it works now.
Thanks. You've provided the most information. \&lt;3
Any tips to get better at this, I did a lot of copy paste and really don't have a thorough understand of linq I guess. Some things I get and some things I don't get, its a little murky.
How big is the solution you're loading? We've recently set a minimum machine spec as we start to refresh dev PCs with 16Gb RAM. VS2017 with our main product running and minimal other background apps (a chrome instance / tortoiseHg etc) takes well over 8Gb. May be way off base, but checking you're not being ram limited is a 2 second job :)
Nothing to add other than I agree with this. 
If all you care about is measuring the time between the start and stop of the program, you don't have to make it that complicated: var start = DateTimeOffset.Now; Console.Read(); var stop = DateTimeOffset.Now; Console.WriteLine("Time: {0}", stop - start);
Brackey's goal is to teach solving Unity specific problems. In that context I think he does a pretty darn good job. Teaching enterprise C# I'm not sure how he would rank.
Could you explain further about how to do this? I am in somewhat of a similar situation. As there was nothing else out there to do what my company needed to do, I have spent the last few years developing our internal CRM app from scratch initially using VBA and then moving to VB.net. I started off with no skills and now I think that I could pretty much build anything I want. Personally I'm proud of what I have achieved but not having worked in a professional environment I have no idea whether what I've built is great or a PoS (in professionsl terms). I would LOVE to have some peer review of what I am doing but so far really only have the feedback from my users and nothing about whether my code, structure or design is any good. Anything that would allow me to improve would be appreciated!
You know, I read the github page, and I still don't know what this projects purpose is... 
Thanks for mentioning the `sealed` modifier. I had forgotten its meaning, and this was a good example.
That's not what im going for. 
It does what you asked.
Thanks, I will check out these sites.
[Above link is the mobile version of Wikipedia. Click here for the desktop version](https://en.wikipedia.org/wiki/PatchMatch)
Well, not *everything*, but the vast majority of things. There are still a few remnants that go in to the systems drive.
That's not a variable, that's a [property](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties). The curly braces are not initializer syntax, but demarking the body of the property which should contain get and set accessors but, in this case, is empty. The type of a property (here, IDictionary&lt;string, int&gt;) is both the return value of the getter and the parameter to the setter. If you were to fill in the braces, the getter must return an object that implements that interface, and the setter must take an object that implements it.
Thanks, the link describing properties is interesting and helpful! What does this mean in terms of interfaces? I didn't see any examples of interfaces being used as properties. I know that interfaces kind like an abstraction of a class, but I'm not sure how that fits into this example.
I think you should go one or the other. Consider why you made it a singleton instead of a static class - are there any advantages or disadvantages to either - serialization, testability, etc? Code should be no longer than it needs to be, but that doesn't mean shorter at all costs. If it should be a singleton, you should just keep using .Instance.(...). Using both only exposes all the disadvantages of both while giving none of the respective advantages.
&gt; Is it defeating the purpose of having a singleton in the first place? Yes, for that property. You're no longer using the singleton pattern by accessing the property as static. There are pros and cons, but if you just want to change it because it's shorter, definitely don't do that. The Instance property exists for a reason.
What the other guy said. try this instead: ``` // property: public static IDictionary&lt;string, int&gt; FooProp { get; set; } = new Dictionary&lt;string, int&gt;{{"bar", 0}, {"baz", 0}}; // field public static IDictionary&lt;string, int&gt; FooField = new Dictionary&lt;string, int&gt;{{"bar", 0}, {"baz", 0}}; ``` that's if you want to immediately instantiate it with some kind of default values, like you tried to do there. But normally in c#, this dictionary would probably be a private field, instantiated empty, and you would add values using `_myDictionary.Add("baz", 0);` in a method somewhere. 
When an interface is used as the type of a variable, it means you can assign to the variable any object that implements that interface. The same goes for a parameter typed to an interface -- it will accept any object that implements that interface. A method with an interface return type can only return an object that implements that interface (if it doesn't return null). A property is just syntactic sugar for getter and setter methods. The property's declared type becomes the getter's return type and the setter's parameter type. [More info on interfaces](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/). Out of curiosity, are you new to programming or coming from other languages?
That, and you want the temp folder to be on the SSD, as lots of small files are created during compilation. 
I am coming from other languages. I know C++, Python, and JavaScript fairly well.
That's what I thought. At a logical (not implementation) level, you can think of an interface as a pure abstract class containing only method stubs. There are many subtleties, but in a high-level, hand-wavy kind of way, that should give you a feel for them.
Using `.Instance` will likely make it easier to mock, which will make the rest of your code easier to test. 
Holy shit this just blew my mind. You may have just given me my eureka moment.
Wouldn't recommend learning F# unless you want to use it for research projects. Very few companies use it, there are better and more widely used functional languages out there.
[Please consider reading Steve Yegge's classic essay about the singleton](https://sites.google.com/site/steveyegge2/singleton-considered-stupid).
Write out an equivalent SQL query to make it clear to yourself exactly what you’re trying to do. I’d suggest also learning the LINQ query syntax.
If you don't learn Git, you will be crippled out in the workforce. Even Microsoft uses Git almost exclusively now, and it's a good indicator that you're going to deal with extremely crusty code if a potential employer relies solely on TFVC. So put that extremely high on your list, like #1. Even if you have no plans to do web design, learn web design. html, css, Javascript, TypeCode, Bootstrap, MVC, SPI, etc. At a minimum, you need to be able to build a website that looks good on a desktop AND a phone, and be able to deploy it to both IIS and Apache. If you can do this well, you will be employable, period. That said, it's a lot to learn. At least learn the basics. Learn Markdown. You will use it everywhere you don't use a more sophisticated markup language. Also learn Asciidoc, ReStructuredText, or LaTeX. I prefer Asciidoc, but that's me. Purists will say LaTeX. There's always reasons to use them. Along these lines, learn to use a static webpage generator such as jekyll. It doesn't matter which one, as long as you learn one. It only matters that you know how to spin it up in a few minutes and start adding content. Learn Ruby. And I hate saying that, I really do. But somewhat unfortunately, a lot of the best goodies out there are ruby-based. Those that aren't, are based on Java. Either way lies pointy sticks poking up from a deep pit. For the love of all that is holy: learn SQL. You don't have to be a wizard. You do have to know enough to pull data from a table. Learn an ORM. Entity Framework should be the wrong answer, but it's not. Learn EF. Learn a logging framework. Log4Net is an excellent choice. Learn a unit testing framework, and practice the hell out of using Test Driven Design. It sounds easy, and it is fairly easy, but there are rabbit holes to avoid, and it is better to learn that earlier rather than later. Learn to estimate how much time a job will take, and then multiply that times 3 or 5: that's how long it really takes. I know it feels like a ridiculous amount of time, but really. Never give an estimate without that multiplication step, ever. Learn that early, too.
Recomposable code is possible only without static state. Static should not be used for describing the state of a specific system in your code, it should be used only for state that is truly process wide.
At least take the "homework" out of your code before you post it. 
net standard already runs on the full framework. net standard 2.0 is supported on 4.6.2 and up (i think). but there is no update to netstandard. net standard is going to be very slow. its the thing that *all* compliant runtimes have to implement, so it is a big deal to change it. platform specific stuff for net core (or mono, or full framework) can move on its own.
Give Jetbrains Rider a try. It's excellent, even if not free. If you are into Emacs or Vim, you could use OmniSharp.
1. What OS do you got that VS isn't compatible? 2. Try a combo of VS Code, VS Code C# Addon and .NET Core. This should work. With VS Code you get things like AutoComplete and "IntelliSense".
I use VS Code with the dotnet cli exclusively on mac, and am about as productive as I am with ReSharper on Visual Studio on Windows. I wrote a [blog post](https://blog.uship.com/shipping-code/visual-studioresharper-level-productivity-in-vscode/) covering my setup.
I'm using Mac OSX 10.9.5. I googled that next to "Visual Studio for Mac" and found a bunch of other people complaining about it not installing.
VS Code is not the same as visual studio. Give it a try, it's good :)
It's a little pricey at $179 for the first year though, it is a great IDE though. Unless your a student then it's free (there's a 25% graduate discount too, the classic get em hooked in school and they go buy your product).
So about half as productive as Visual Studio without Resharper?
because you need at least 10.11/.12 (look here)[https://docs.microsoft.com/de-de/visualstudio/productinfo/vs2017-system-requirements-mac]
You could keep it as a property on the Singleton, then if using it that way is too verbose, just have a local variable in your method that references the Singleton instance. Something like... var gm = GameManager.Instance; gm.PropA = 123; gm.PropB = "some text";
On that note, I which we had a shorthand with type inference for dictionaries something like: `var dict = new { ["a"] = "foo", ["b"] = "bar" }` which would resolve into a `Dictionary&lt;string, string&gt;` much like `new [] { "foo", "bar" }` is a string array. 
Woah damn not op but I think I better understand Oop in general
Thank you for that feedback. I'll improve the description. BTW. The PatchMatch if you want to see one of possible applications of this method you can take a look at this project https://github.com/zavolokas/Inpainting that allows to remove objects from photos in a way like it never was there.
Another vote for vscode. I use it on PC, Linux, and Mac.
Of course it's fine. You're already basically using global variables by using a singleton. Having static members is barely different. People are telling you lot of reasons to avoid it but until one of those things actually comes up it just doesn't matter. There are much more interesting problems to think about in programming.
The surgery-with-a-scalpel answer is to get VS Code running on OSX. The surgery-with-a-sledgehammer answer is to run VS on Windows in a VM or with Boot Camp. If I was in this position, I would consider whether it would be worthwhile to get a refurbished Windows laptop just for learning. Liquidators sell decent 5-8 year old laptops for under $200 all the time.
I'm a big fan of Holistic3D's Unity &amp; C# tutorials \(you can see them here: [https://holistic3d.com/](https://holistic3d.com/)\). she explains very well and goes at a reasonable pace for beginners and her tutorial series cover a vast majority of unity/c# concepts. It might not be exactly what you're looking for but definitely worth checking out!
I assume the reason C# doesn't have that is that it doesn't have unresolved generics (unlike, say, Java's `&lt;?&gt;`). You would need to be able to write something like `var dict = new Dictionary&lt;,&gt;{ { "foo", 1 } }`, or maybe `new Dictionary&lt;?,?&gt;`, but those parts of the syntax don't exist in C#, so C# would need to duck-type instead, which I don't find that appealing.
That's what I've read. It is but a wish... At least using `var` makes it much less verbose. 
VS Code will run on 10.9, and that may help you dabble in C# a little. But if you're serious about programming, you should probably run a machine that doesn't require a half-decade-old OS.
Thanks. Yeah, probably gonna take a while until all runtimes implement it. Already using netstd2.0 with .net471.
If the account has a different root folder, you probably have to change the path.
A static property inside the singleton makes the singleton moot. It's OK (but poor practice) to declare properties as static, but you'll run into problems, most prominently a conceptual one: no matter how sure you are right now that you won't ever need multiple instances of the object hosting the property, you'll probably regret that choice someday. Singletons provide a compromise for that: they're still almost as easy to access as static variables, but adding additional instances or deprecating and eventually removing the singleton accessor altogether will be a much smoother transition. Some examples of where "we'll only ever have one object" doesn't hold true: * a user session object. Only one person will ever be using the client, right? What if you want a second object for temporarily simulating a different user? What about temporary admin rights? * a database connection object. You can only interact with one database per process, right? What if you're pulling in data from another database? What if you want to expose sync/import/export functionality to the user? * a mail service object. There's only one mail server, so why have multiple mail clients? What if, during automated tests, you want a completely different implementation altogether that doesn't send out real e-mail, or instead does, but always sends it to a special testing address? TL;DR: avoid static properties, because that design will limit you. Use instance properties accessible from a static (for now!) singleton, and think of the singleton as a convenience to the instance you _almost_ invariably want. Then, ten years from now, as requirements and design have evolved, you can still use the same class, even if there's now multiple instances.
I understand that from what I've read online. But I have yet to see *how* that is done. Ideally there would be a setting for the ftp host and one setting for resulting path. As far as I've seen, it's all part of the same uri scheme setting. So how can I tell FTPWebRequest to log in to myserver.com and just dump image.png in the default root folder (which would automatically be "folder")? That simple thing is what I'm stumped on and my Google-fu has failed me on.
I think in your case as you are already a professional the best career move would be to move to a team. If you've self-taught you've got all the inmate ability you need, but if you only ever program on your own you are missing out on the overwhelming majority of what programmers generally mean by "experience". I was in the same situation once - had spent two years doing all of a company's internal apps and they were working well (mostly). I knew I could program almost anything so I moved to a relatively small software team snd it just blew my mind how different and more professional working on a team on larger projects was. Ironically, looking back that team was riddled with bad practice, but they were still miles ahead if me on my own simply because working in a team requires you to employ the myriad of techniques programmers have developed over the decades for managing complexity and ensuring good design. I'd say you are already past the need to do open source for experience.
I just finished writing a web app that is supposed to be a copy of a class of "Network Investigative Techniques" (AKA hacking tools) used by the FBI that I pieced together using publicly available information contained in warrants and court documents. The web app can bug documents and video files so that when a user opens the file, their computer opens a connection back to my server where I log their IP address, which would be very useful for deanonymizing TOR users or whatever. For example, you can make a Microsoft Word file that, when opened, shows a cease-and-desist letter with their current IP address displayed in the document highlighted. You can also deanonymize users by getting them to open a video file, which is super interesting because I can only find a single warrant where the FBI used this specific feature and I can't find anything about this trick online. Apparently very few people know of that specific technique.
To break from a loop you need to decide the scope. If the loop will break while the program is the focus it can be done fairly easily by using a while loop. I will not write the exact syntax but consider the following. While(x = false) { If key state pressed then x = true Else End if &lt;whatever else your loop does here&gt; } If the program needs to execute in the background and break the loop when the program is not in focus breaking the loop is a little more complicated as you have to get the key state from the user32.dll which is usually done through hooking or getkeystate. Hopefully that will get you started. 
Then there's no reason to use a singleton at all.
I love that article. In my experience, there is a use for the Singleton. However, if the consumer of the Singleton knows it's a Singleton, you did something wrong. The most common case is Dependency Injection. The consuming class says, "I want an `IAuthProvider`". It turns out that the implementation of your IAuthProvider that you must use is both expensive to instantiate and has no mutable state. So you register it as a Singleton, it only gets instantiated once, and that instance gets shared among all the instances that require an IAuthProvider. But the consumers of IAuthProvider don't know if it's a Singleton and most definitely don't *need* to know if it's a Singleton. It's just another instance, to them.
I hope you're not planning on doing anything malicious with this.
Tbf latest versions of VS out of the box have a large amount of performance sapping crapware enabled.
&gt; People are telling you lots of reasons you might want to avoid it but until one of those things actually comes up it just doesn't matter. If you're mixing static and Singleton, then you never really needed Singleton in the first place and you're almost definitely doing it wrong. If you have mutable state in a static variable, you're likely doing it wrong. Asking if it's OK to mix static and Singleton is like asking if it's OK to mix diesel fuel and 91 octane in a car designed for 87 octane. It means you don't really understand the purpose behind either of them.
Currently building an invoicing system into a sales &amp; CRM system not too sure where to go design wise and usability wise, edging towards some kind of right click context menu on a grid view to right click an order and have a context menu to edit, delete, invoice. It’s not natural functionality though so I may have to do it with jQuery or JS which I don’t usually like doing. 
Is this a Unity question? I imagine it is. If so, don't use static because you don't know when the object is going to be created in the game's life cycle. You should create the Instance and assign it in the Awake\(\) method so that you know the game's resources are loaded when the singleton is created. As an added bonuses, you also get to use DontDestroyOnLoad with the Singleton Instance. The rest of the discussion here is all great in the wider C# world but for Unity, you need to stick to their framework way of doing things.
Whats so special about it and why is it highly recommended?
ftp://myserver.com/image.png?
I was thinking about open-sourcing it earlier, but probably not because I'd like to keep that video file bugging technique secret. So far, it's only been used to capture child predators and I don't want to step on the bureu's feet. I'm trying to get county-level detectives in the US interested but so far no one's responded. I think I basically wasted a couple weeks on a project that I'll never be able to do anything with haha.
Seems like at least part of the problem was the RAM actually. For some reason Windows thought it would be a good idea to keep 3GB of RAM in standby. After clearing Standby VS seems to run decently faster. Still quite slower than JetBrain IDEs but it's ok for now.
Unity does, there's nothing in .Net.
The freezes on my i7 work CPU with (sadly) 8GB RAM make me more frustrated than Resharper makes me productive.
Thank you for this incredible helpful answer. I know SQL already, and I am working on html css javascript, so I've got that going for me. I will definitely learn the other (smaller) things you've mentioned, just to be more marketable I guess. 
Definitely will work on the 'idiosyncrasies' you've mention as I do realise I have no experience with these. Thank you .
Yes I will definitely leave Java for later, if at all. I realise there's a lot more things to learn than just plain learning to code.
Why not build something you find cool ? 10 years ago when i was a C# newbie (i still am hehe) I made a fully automated windows client deployment system in .bat, vbs, C# with a ms sql server / WDS / DC as backend. I had 0 clue on how to do this in the beginning i had to do some research before i came up with this idea. I did learn a lot in the process. WAIK/WDS was the hardest part, mainly because it was so new and filled with bugs i had to come up with workarounds for. I made a GUI in C# to control it all, and yes i had to learn C# as well, i did consider making it in C since i had already 5+ years experience as a C programmer in linux, but C# was just so much more easy when it comes to windows GUI programming. Took some time to complete my project, and when it was done the company i worked for rolled out 3000 workstations in a period of 1-2 months. And i was so proud and i learned a ton in the process. My advice to you is don't learn anything unless it gives you an edge, you should rather spend your'e time learning tech in general. Just my 2 cents
Except those aren't singletons. They just have a application lifetime cycle which most DI libraries call singleton, but the class itself does not limit how many are created not has a single entry point.
Implementation detail that has no relevance to /u/RiPont's point. If there is only a single instance, it is a singleton. In fact implementing it as you describe is clunky and harder to use. What about dependencies for that singleton? With an IoC registry that is infinitely more flexible than a static class that shackles the instantiation of the singleton as well as the life cycle of said singleton into a private scope. At least with a separate factory/container registry, I am free to configure the instantiation of said class to suit my needs. 
I just started with programming two or three weeks ago and I just finished my voice controlled calculator (first project) using a speech recognition engine. I am absolutely in love with C# and coding in general. It's not much but I'm really proud of the calculator haha. 
I'm readying a new release of [Gepsio](https://github.com/JeffFerguson/gepsio), an XBRL parser and validator for all platforms that support .NET Standard 2.0. This includes Windows, the Mac, and various flavors of Linux.
&gt;Implementation detail that has no relevance to /u/RiPont's point. If there is only a single instance, it is a singleton. I have to disagree. Singleton is about how many instances *can* be created, booty how many *are* created. To claim otherwise would get to suggest that an integer is a Singleton if your application only instantiates one of them. That's just wrong. It's all about the pattern of protecting the constructor to ensure that only one instance can be created.
I've very rarely seen a case where a singleton was actually required instead of a single instance. That forced guarantee that there can never possibly be more than one of these things, i've never seen anything that had that as a specific hard requirement.
If you plan for your app to be used in mobile/tablet, right\-click context menus take longer to open and are less intuitive than alternatives. In the past we have gone with icons for each action \(with tooltips\) when laying out compact grid data, or buttons and links when we have more space to play with. A left click \(e.g. touch\) context menu might also work. Most of the modern CSS frameworks have good quality menu components that would work for this.
Well I hadn’t put enough thought in it to think about left click on mobile. The project is mainly for sales where staff have lower permissions than admin so admin need an ability to do extra things eg invoice, credit, cancel an order etc. Maybe I’m best just avoiding looking good and building a separate admin site for those functions and for reporting, profit &amp; loss etc.
&gt;It's not much but I'm really proud of the calculator haha. Professionally, it is considered a best practice for mid or senior developers to tell new developers everything they are doing wrong. It will help you learn faster, but it will suck the soul out of any feelings of adequacy you have for the first couple years working with a particular language / stack. Keep those feelings of pride of accomplishment for personal milestones close, as they are what will sustain you early on and keep you happy as a developer.
Very good to know thank you very much! 
I've not heard of XBRL before. The hype site for it seems to imply it is often used to prepare financial documents and reports in a way that the details can be easily extracted. Is it a general business markup language? Can it be used to encode orders and other types of transactions as well?
Well... that worked. It's not intuitive and it doesn't make sense to me. But uploading to myserver.com/image.png is correctly putting the file at myserver.com/folder/image.png... huh. Thanks!
Given an integer is a value type, then yes.. they _are_ singletons. 1 is only ever 1. There isn't two instances of 1.
Is this your project, or are you creating this based on a request? If you have a project stakeholder, you should be showing mockups or sketches of your ideas with the stakeholder so that you both agree on how the thing could work. It saves time, because then your development isn't slowed down by indecision, and you usually are left with less re\-work later based on misunderstandings. If this is your own project, it might save you some time to talk with a web designer or UX specialist at your company, if you have any.
1 is an instance of an integer. 2 is an instance of an integer. Integers are *not* singletons. &gt; There isn't two instances of 1. At this point I'm going to say that you need to think hard about what you just said, because the reality is that it is exactly opposite of that. Every 1 is a distinct instance. The only way you can have multiple references to the same instance of 1 is via boxing.
&gt; Every 1 is a distinct instance. Nope. Same instance, every time. There's no "reference".
 ftp://myserver.com/ This gets you to _your_ root, not _the_ root of the filesystem.
Ok, you don't understand the difference between a reference and an instance at all then. Good to know. You should *really* understand these things better before trying to correct others. You even said it yourself "There's no reference to be had." If there are no references, then every 1 **must** be a distinct instance. I'm tired of arguing about high-school level computer science stuff now. I really hope you learn this stuff someday though.
It’s a work thing, we’re not a design or software company and I just do whatever we need at the time whether it’s a website, system, fix a computer or add a phone onto the phone system. I upgraded the existing sales platform and built it in C# and I’m expanding it over time as the business needs change so yeah I do everything from design to backend to database. It’s a case of “we need it to do this” so off I go and make it do this. 
When you type `1` in your code, it is always the same instance of `1`. `1 == 1` is the same as `int one = 1; one == one;` or any other mutation you think of. You are not creating a new instance every time you use `1` in your code.
1 is the **data** not the **class**. The class is *int*. *int* is **not** a singleton as there are multiple instances of *int*.
But that is the whole point. It is not a singleton and because of that it gains a lot of freedom.
Correct. Me neither. Which is also why I'm against most uses of actual singletons. The DI "singleton" is not an actual singleton and because of that a lot more flexible
https://i.imgur.com/Ix6iveI.png
Also iirc, the definition in the GoF book has 2 specific requirements. 1. There can only be one. (Done by hiding the constructor). 2. There is a global access point to the singleton. If those 2 things aren't met, it is not a singleton. I currently don't have the book in front of me, so I can't check, but this is what I remember.
But it might make you feel worse about yourself.
&gt; Recomposable code is possible only without static state. I hate to ask this question, but what does "recomposable" mean in this context? I tried googling without luck.
Immutability does not mean that it is a singleton. Value types are copied which would mean that there are multiple instances of it. They are not referencing the same object. One of the things that do that are string literals. Using the string "hello" multiple times in code will make them all point to the same immutable object.
I've completed the first version of my app [heywillow](https://heywillow.com). This app is targeted towards mentor organizations and church's. It essentially allows for "safe" communication between adults and kids by logging all conversation in addition to some other specific features. I'm actually looking for a Xamerin developer if anyone is good here. The app is API driven with scale\-ability in mind. The web app is MVC and I have a fully developed API C# library ready to go. I can pay. 
I only recommended it because it's more less the mainstream functional language of .NET and figured he'd be more comfortable programming in a language with the same BCL. I don't recommend functional programming as a marketable skill but there are interesting patterns that can still be applied to OOP. 
I believe there are two ways to improve. You can learn by experience, by working on projects, including making mistakes, and learning from it. Or, you can read books by people who have more experience than you, and learn from their experience. So either get involved in writing code for some projects for work or school, which can be difficult unless you are very motivated or interested. Or, go pick up a book or two and read it. There's a lot of good books: clean code, pragmatic programmer, etc. I suggest reading a book. 
You need to set DataContext.
Rider all the way. It's a nice blend to me of VS \+ Resharper and the VSCode. I love VSCode but Rider is awesome for doing .NET dev on a Mac. Yes it is not free, but for a professional dev tool \&lt; $200 is not that much. Highly recommend
The set of programming jobs in the world is huge. Jobs that use ASP.NET related website frameworks represent probably less than 1% of them. MVC5 is a framework for making websites, .NET Core 2.1 is a runtime. So the latter does not outdate the former. There *is* a newer MVC framework called ASP.NET MVC Core, but it is very similar. Anyway you should focus more on learning to be a good programmer, rather than learning particular frameworks. A good programmer can get a job doing almost anything, rather than just the ~1% of jobs that are only a particular library, which, as you noted change all the time anyway. 
Thanks for your comment, To be more clear, would you mention what's make the person good programmer, I know that mvc is framework to make websites, just like xamarin which make mobile apps and wpf which make desktop application, which I don't like it all just because it's gets frequently updated, and you couldn't carry your knowledge from framework to another usually, Thanks. 
Can you be any more vague?
Focus on what makes your code run efficiently. Strive to better organise your code and to avoid redundancy. Focus on best practices (although they should always be taken with a grain of salt). Focus on the underlying parts of programming, which are rather common, rather than the technologies themselves.
&gt; rather than learning particular frameworks Conversely, there are some specific frameworks/platforms/languages that you can become a (relative) expert in and make a lot of money from (if that happens to be your goal). They're mostly legacy and uncommon technologies like AX, older versions of sharepoint etc
Hand jobs for a living... programming is hard but seriously... On a serious note i got into .net in early beta, did some winforms then wpf and left the industry for 5 years. I came back and it was mvc and java frameworks. I studied like a bitch and picked up mvc, knockout, azure, angular 2 and .net core and next is react and vue.... Knuckle down, do some work. Its a fun ride.
* learn data structures and algorithms * practice - make some things, make libraries, make apps, whatever interests you * learn a few languages that are very different. you already know some C#, explore some C++ or Rust and some F# or Lisp, to broaden your horizons on both the low level end and high level end. * learn how the hardware works, especially memory: https://people.freebsd.org/~lstewart/articles/cpumemory.pdf Think about what field you want to be in, if it is web development, learn some of the fundamentals really well, like the REST protocol, learn some SQL, learn some javascript and html/css. 
Looking for volunteers?! I could do the front end part, I've been learning and using JS and frontend frameworks for a couple of years.
You could run a windows VM and just use Visual Studio
Pretty much you found out why singletons are not as useful as they seem. The Instance only really helps with initialization, cause you shouldn't use static constructors. I use a class I created called run once, which makes singletons completely useless. The reason why I do this is multiple. But one major one is I can hold a weak refence to the data.
How to get along with my wife. Very challenging.
You might want to not use a singleton in this case &amp; use a static constructor instead.
Backend development looks as though it's propelled enormously. But, I have to say, as someone who's remained current through Perl, Classic ASP (VBS/VBA), to .NET, through to .NET Core. It's genuinely not changed much. If you were a competent coder in 2012, you'll pick up the new .NET Core in a few days. MVC has become a bigger thing since 2012 (when WebForms were still big). You'll find MVC just a nicer, easier experience. It follows the principles of C++ MVC (late 80's) development. Data in the Model. Presentation in the View. Business logic in the Controller. Not 20 minutes with MVC will demonstrate the benefits. The only thing to be aware of with MVC is there's some magic that wires up Controllers to Views by virtue of convention (completely overridable, but it's good to acknowledge right off the bat that this magic exists, no such magic existed in the WebForms world... It's similar to how the CodeBehind was always the ASPX suffixed with .cs) 
VS would probably run pretty terribly in a VM unless you're computer was an absolute beast.
What practical applications does F# have in an enterprise application? (Genuinely curious)
&gt; felt like the field moving faster than what I can acquire some knowledge to land me a junior job Okay so the field is definitely moving fast. There's new frameworks coming out by the hour, .NET has multiple runtimes now, etc. Bleeding edge technology knowledge is usually not what gets people hired as a Junior Dev. Solid foundational knowledge and the ability to learn is usually what gets people their first dev job. I'm sure there's exceptions everywhere. What market are you looking to work in? In sectors around finance or insurance there's plenty of C# and .NET work being done that's only just transitioning to ASP MVC from ASP Web Forms. Most of the intranet sites I maintain are _still_ Web Forms. The bleeding edge of technology is a fun path to follow, but it's not where established companies are generally interested in going. It sounds like you're looking for your _first_ dev job, so don't worry so much about technologies that are less than 2 years old. Things I'd suggest someone trying to get their first (C# based) dev position study: - C# Fundamentals - SQL Fundamentals - Web Fundamentals In C# you should have familiarity with the system types and common collection types and when to use them. You should be familiar with how to get data in and out of a database. In SQL you should know how to get retrieve and store data efficiently. When it comes to the web you should have basic familiarity with HTML, CSS, and JS. Learn how C# and .NET works with these. Bonus points if you have a basic understanding of web services and APIs. 
In my experience, the technology doesn't matter as much as the concepts behind it and the design patterns that are used. For example, MVC5 is the M$ implementation of the Model-View-Controller design pattern and leverages the .net framework. The goal is to understand the design pattern rather than the particulars of MVC5 (which you can just google, really). If we focus on understanding the design pattern than it becomes trivial to implement MVC in another framework and language like AngularJS or backbone wherever applicable. Also, a firm understanding of the differences between programming languages, frameworks, runtimes, etc. is super important. As well as the differences between a scripting, object oriented, and functional programming language. This is the knowledge that sets us apart from those who'd limit themselves to one tech/platform or another.
I just lost my girlfriend due my logical thinking, lol, so well done 👍 
Without flush printed characters do not appear on the screen right away. They are simply added to the buffer and then appear as buffer is flushed. Usually after WriteLine(). 
f# is used heavily for mathematical operations &amp; analysis, especially in the finance world. It is more optimized than c# for these types of applications. 
I did this for years, but now I use Rider almost exclusively. The VM trap gets old quickly, and VS 2017 is an absolutely hog in a VM to where it just becomes more pain than it's worth.
F# is fairly well suited for financial and data science applications according to most things I've read about it. I am interested in the language but I haven't got around to learning it yet so I am not speaking as if I "know" this about F#.
Hard to say what's "basic" or not. I knew C# before Generics were added and I think they are fucking great. I resisted Linq, but now I quite like it. I hated EntityFramework and I still hate it. I use ADO.NET with SQL wherever I can get away with it. I like WebAPI but don't like MVC. Whenever I have the opportunity to design a page myself I find myself using something like VueJS with WebAPI over MVC. I don't think you'll ever regret knowing MVC. There is a lot of code out there that needs to be maintained. However the industry seems to be going towards JavaScript frameworks for SPA.
I am not sure, but OPs English isn't perfect which makes me think he meant "manual labor/jobs" like construction, landscaping, etc. At least, I hope. Am I being naive? lol.
That reminds me: a girlfriend of mine once started an argument with me, saying something I did hurt her. I made a very detailed, logical case on how she was mistaken about the situation. I mean, it was rock solid. When I was done, she simply looked at me with a hang-dog look &amp; said "but I just don't *feel* that way". At that point, I lost the argument.
What is an enterprise application? That could be anything!. Generally speaking: * Equivalent programs in F# tend to be half as many lines of code, sometimes much less * The type inference system lets you program as if you are in a dynamic language, but types are figured out at compile time. So easy refactoring, good productivity, but good runtime performance and fewer mistakes at the same time. * The type system and syntax makes doing business domain modeling really easy and clear, clear enough that you can have a non programmer business person sit and look at it with you and work on it. * the generics in F# are a bit more powerful than in C#, and can sometimes work automatically for you via the type inference system. There are many features that prevent bugs such as: * immutable by default * higher order functions (just like linq in f# * units of measure * no nulls! Overall it is a very nice language to work with, the downside is that the ecosystem and tooling are not as mature as with C#, but there are some very good open source solutions. The VS Code plugin is amazing and provides a very IDE-like experience. 
I thought it was "presentation in the view, business logic in the model, and the controller to provide comm between the view and model"? If you put business logic in the controllers, that logic isn't very reusable in other apps.
&gt; Women. They are a complete mystery. Stephen Hawking
&gt;what makes the person good programmer The ability to pick up new languages and frameworks with minimal spin-up time. You generally limit yourself to a "stack". That stack may be Windows, or Linux, or JavaScript, etc. Inside each stack there will be a number of languages, frameworks, and design patterns. Be the type of person who can move fluidly in a given stack. Don't worry so much about jumping from stack to stack. If you like C# you need to be comfortable with C#, IIS, JavaScript, and SQL Server. Keep on top of those concepts and you'll have no problem getting jobs in the MS stack.
No, absolutely not. Your models should be as lightweight as possible. If possible you should be able to pass your data Model through to EF (Entity Framework), not always possible, in some circumstances you'll need models and view models. But, no, if possible you should keep logic in the model to a minimum. The Controller is responsible for massaging data into the requisite format. View - Presentation Model - Describe the data Controller - Get said data in a shape for the view to receive.
Singletons are just a way that "object oriented" programmers rationalize the use of global state to themselves. I believe global data has a valuable role but this is like putting a dress on a pig and then arguing over which is the right the fashion choice. Really it should all just be bare variable in a namespace and free functions but C# doesn't let you do either of those things so we're stuck playing make believe and arguing over which willy ways to pretend global data isn't global are better.
Phrasing, please.
You were doing hand jobs for a living for 6 years?
The controller is part of the presentation layer, then, and not the business layer. If its job is to prepare the data to be consumed by the view, that responsibility is solely in the hands of the presentation layer. The controller can't be reused as being part of the business layer because it is too tightly coupled to a specific presentation layer. Models, as I understand them, have multiple different meanings to a developer. Business model, data model, domain model, view model, etc. I largely assume "model" means business/domain/service model unless "data" is brought up. Model, to me, doesn't *have* to mean a simple DTO-like class that may have validation and other business logic (POCO). As I understand it, the controller's job is to call upon the business layer for relevant data, rework the data for presentation and marshal the result to the view.
I didn't meant what you uderstood
In larger applications, yes, you'd certainly separate the business logic into it's own layer. In a strictly MVC setup (i.e. no further layers) the Controller is responsible for massaging the data, and as you say, the Model is nothing more than a DTO. You're absolutely correct in what you say, real-world, it'd go the way you're describing. But, if you're learning MVC for MVC's sake, then the Controller should be responsible for marshalling the DTO/the Model. 
Technologies will always change, but fundamental concepts will remain. ASP.Net MVC will keep evolving, but a lot of front ends are built as SPA apps in Javascript Frameworks. But even here, the design pattern of MVC still applies. So ASP.Net MVC really just turns into WebAPI, and again, the MVC pattern applies. So, things that haven't become outdated. * Design Patterns * Data architectures (SQL, NoSQL, caching, etc) * RESTful API's * Good coding practices (SOLID principles, clean coding, regular commits to source control) Other things to add to your toolkit would be understanding microservices, event based architectures, and building systems so they are able to scale. Again, a million frameworks to do these things, but understanding the underlying concepts makes moving between frameworks easier.
I see what you are saying and I agree -- in a strict MVC app, your controllers would have the business logic.
Likewise, I see what you're saying. You're absolutely correct, the first thing you'd want to do in a large scale App is move the business logic into it's own layer (or multiple layers), you'd want a Data-Access-Layer too.
This is a never\-ending story, we \(as developers\) will never catch up, we will always be behind \(somebody's\) technology in some fashion. The key to survival is to gravitate towards things you love. While perusing insane job postings with all of the technologies they want written by non\-developers can be overwhelming, don't fall into the trap of feeling inadequate. If you have ever built something, you know how good you are and how adaptable you are to learning new things, so gravitate to the technologies and projects that make you happy \- and learn more of that. Keep an eye towards the other technologies, sure, but code your way to expertise in things you love, you'll be happier. 
Yep. We are looking at rewriting our backend because it is such a mess and maintenance nightmare for our small dev team. I've read in more than a few places that your EF entities only belong in the DAL so you'd have to have business entities as well as well as something to translate business entities into EF entities and versa. I like this idea because it keeps things modular but it also adds more bloat to the codebase (i.e a User EF entity AND a User BL entity that may or may not have the exact same members). However, we could put validation in the BL entities and then keep the EF entities light and they won't be coupled with business logic. Furthermore, assuming the DAL is dependent upon the BL, we achieve some of the benefits of Onion architecture. Thoughts? Do you use your EF entities in your BL or do they only reside in the DAL?
I graduated from university (CS) in 1994, never had OOP during the course as it became popular right after I graduated. Did I feel I had experienced only outdated stuff? Sure, in the beginning at least. But then I realized, a study isn't about learning a language, or a platform, it's the concepts of the language, the concepts of the platform. Hell, we had a course about programming hardware elements based on the MC68000. A 7mhz CPU. Luckily I was into Amiga demo programming at the time so it was a breeze but it wasn't about the MC68000, that was just a vehicle to teach the underlying aspects: what it is all about, programming hardware elements. So the course you're taking is about MVC5. Sure it's a little outdated, but that is irrelevant. The aspects of what MVC5 is all about is what is important, namely model-view-controller. Those elements are applicable in modern day aspnet core systems as well, you immediately recognize the different elements and from there can build the apps you want. Sure you miss some details but you always will with new technology, that's why there are docs so you consult those to get the fine details of the framework you're using. Like I mentioned, when I graduated I had never written a single line of OO code. FP (miranda), Lisp, C, assembler, you name it... but OO? Nope. I'm doing OO since 2002 now with C#. Was it a struggle? No, not at all. See, a course teaches you basics, the things you can built your knowledge on/with. Use that to learn new elements you add to your set of 'basics'. In my case it was learning 'what is OO' and after that apply it to a language and the code I have to write. During the past 24 years software development has changes a *lot*, so picking something up guarantees there is already something newer around the corner. That's OK, just remember the basics of CS, so with those learn new things and move on to the next. It's a bit like the difference between knowledge and wisdom. Knowledge is syntax of a language, details of a framework. You can look these things up if you need to, learn workarounds for quirks you run into from a SO reply etc. Wisdom is something you learn, the foundation with which you gather knowledge. See learning MVC5 as gathering more wisdom regarding patterns how to do web gui development, and take the knowledge regarding how MVC5 works for granted but you can learn that in a weekend anyway, as you already have learned the basics how MVC works so it's an easy exercise after that. If you look at courses that way, you won't feel you are learning something 'outdated'. 
Well, if the implementation class is internal and hidden from all clients, then the dependency injection container will make it so that it is not possible to have more than one instance. If you can't trust yourself not to new up an instance in your client code, then the issue is not with DI containers...
It's a pattern of its time when DI containers did not exist. The concept itself does not need to live up to those two points.
But the concept is that you *can* only create one. The DI container does not prevent the creation of a second one. It will only make sure that if the DI container creates it there will only one in the container.
It's important to understand that, at runtime, neither extension methods nor attributes add any functionality to an object. Extension methods are syntax sugar. Instead of `MyHelpers.DoSomething(myobject, myarg)`, you can use the more readable form `myobject.DoSomething(myarg)`. But it compiles down the same way as the first one. It's essentially just an API style choice. Attributes, as you say, are just tags. They do literally nothing more - to make an attribute do something, you actually need to write and execute some other code somewhere else that _hunts_ for those tags and makes decisions based on that. Again, it's really just an API design thing - instead of having to do something like `RegisterWebControllers(new []{new HomeController(), new UserController(), ...`, you just put `[Controller]` on your controller classes, and the library/framework does the work of searching for them and setting them up. 
It is not just me I have to trust. I would also need to trust the other dozen engineers(Junior and senior) that will touch the code. The more restricted API is, the harder it is to abuse.
That doesn't make sense, Time.deltaTime doesn't depend on any variable or property of the Game Manager, it's a utility function and so basic you could make it a macro. It'll never depend on the Singleton's internal state