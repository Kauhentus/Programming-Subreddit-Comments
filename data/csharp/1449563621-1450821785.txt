&gt; The price tag for both of these seems a little hard to understand why You said that...
I take C#/Linq over T-SQL any day. Yes there are the cases where you _should_ have T-SQL over C#, but if it's most of what you do, you're in wrong layer.
That explains it. Been bugging me why it got some of the results wrong. Thanks for the input. 
We are still discussing performance, not what we prefer to use. You usually sacrifice comfort to maximize performance and database operations are no different. It's easier for a novice developer to make something workable with EF. But in an enterprise setting, with the risk of incompetent people making bad EF queries, you easily have one hell of a mess coming your way.
Sharp develop 4.4 is for dot net 4.0 and up. I use on my work laptop which has no admin rights or dot net 4.5
When an EF query might seem acceptably performant at some point, data can grow, and that autogenerated SQL mess that EF can create will become exponentially slower. If you are certain of the data and usage requirements of your app, EF is indeed fast and smooth to use. Very easy to source control, and autocomplete and intellisense are great tools. If you are not certain, you will have a bad time. I have seen it and I will see it again.
That would be an MySQL issue, not an ORM one.
Because the only data type you have is two dimensional arrays and real world uses are much more complicated.
Most people here seem to be dumping on EF and I'm going to have to disagree. EF has its shortcomings, sure, but I've built out and participated in several complex and performance critical enterprise level applications and found success by building everything out in EF and then move certain queries to sprocs when needed. EF adequately solves 95%+ of our needs without having too much customization and without having to switch to some other random upcoming framework that people don't know and require spin up time for. 
The Xamarin annual license (including the USD 299 for Indie) is one time payment if you don't care for updates after the next year. Bit pricey? Perhaps, but a single paid project should cover more than that. Heck, even here in Indonesia where the minimum wage per month is USD 250 a professional developer get paid enough to have a license for hobby projects. It's less than 2% annual salary of minimum wage worker in US. Since it absolutely opens the Android market without being forced to use the godawful Java, it worth every penny.
Then do direct queries and code. Your logic doesn't have to be tied up in stored procs just because you aren't using an ORM.
The solution you are proposing is unsustainable. I believe there is a better way to do what they are asking but what you originally proposed I would warn against. 
You will be doing set operations yourself if you use a key-value DB, simply because that's how data works. SQL databases do key-value operations just fine. Set operations are not at all the only reasons to use traditional databases. In fact, the NoSQL movement grew out of a need to scale data access and it did it by dropping ACID properties, it was not about not having set operations.
EF's a great tool, you just can't expect it to magically solve every problem without any thought or effort from the developer's side. You're exactly right, it's a 95% solution, and with a good design you can mix and match with ADO the other 5% of the time without any issues.
When I see performance problems related to EF it's usually because people let their entities leak into their business layer without putting a Repo between them. Then any old dev that walks into the office can start pounding the database, chaining calls or joining tables together without mind for performance. They try to walk through five or six Entity FK's just to pull a single record. If performance is important at all, use a Repo so you can tightly account for any database access. That being said, EF still only hits the 95% mark as you stated. There are some queries and some applications that you just need to tweek out exceptional performance in which case Dapper or just old school queries are the best way to go. 
SQL Server Management Studio provides intelli sense for column names as well. It's just drastically slow for some god awful reason. I hate joins in EF. First, because left joins are a pain the ass and second because the code that gets generated is terrible. I've ran SQL Server Profiler against the generated EF Code.... dear god never do that! It's just horrible, horrible stuff.
Could you point out some errors that you see in my plan? 
I believe strings are always encoded the same way (though the characters may not be...) UTF-16 uses a [byte order mark](https://en.wikipedia.org/wiki/Byte_order_mark) to designate which order the bytes go in for the characters. UTF-8 supports this as well, though I believe it can always be ignored.
I hope you didn't find my comment disagreeable. I was mostly just confirming what you said (except I misunderstood intellisense part). I agree that the majority of c# devs have no idea how to correctly tune an SQL database. Dear lord if every c# dev I have ever met answers any performance issue with "add more indexes!". The last place I worked had 15 indexes on a table with only 10 columns! Explain that one. They think indexes are free. 
Not anymore. The landscape is changing. 
RemindMe! 16 hours How adding &gt; \+ "" Made a web-page load 6 seconds faster....
starred - pretty slick!
Looks nice, I especially like the use of the material design theme.
Thanks. I have made it solid now and will start to pad it out some features
Didn't realize that was encouraged. Will do, thanks!
Just a thing that immediately jump out at me (and I'm trying to avoid the urge to completely re-write this): Why are you reparsing the results from the string values back into integer to add them together for the next cycle? Just keep the two most recent integers in their own variables and change them as needed for each cycle. This will completely avoid your digit problem. (And even assuming you had a good reason for doing it this way, why process them a digit at a time?)
It's given by our teacher to use this method, to treat it as single digits, so I need the for loop.
Regarding point 2; that would work up to a point where the full number exceeds the size of an Int32.
Money == developer time.
I was misunderstanding what he meant by "2000 characters long". I thought he was aiming for the accumulated list to be 2000 entries long, not a 2000 digit number.
With Daper you literally have to write the queries yourself all it seems to do is just chuck all your query results into an object to work with. Its the literal ORM without any bells and whistles walking to school in the snow, uphill bothways. That's why it gets the performance you desire. 
If you want use/create a "generic" way to store a combination of characters, numbers and dashes a varchar is perfectly acceptable. using a GUID datatype may limit your application to a specific database vendor and will suffer backwards compatability issues should micro$oft decide to stop supporting the new datatype. 
your inner loop is doing k and k+1. It's possibly confused. You want to add the k number to the k+1 number, but the number lengths might not match. You probably want to split out the function where it takes two numbers and adds them, just to simplify this.
Till the first 2000 digit number.
This looks great. I've just tried it out, but needed a file to test it on, decided to try its own log file. http://i.imgur.com/13GA5AC.gifv Worked a treat! ha.
Ewwww, people use regions inside methods? That never even would have occurred to me. Bluck.
 using (SqlDataReader reader = command.ExecuteReader()) You can't do this if you're going to return it. The using statement destroys it at the end of the block.
I know this may sound like I'm rambling but that's because I am. Know data structures. I can't stress that enough. Know when the right time to use a list, an array, dictionary, etc. Contribute to an open source project by fixing bugs. It looks good for your resume, it helps your gain knowledge, you help the community, and you learn how to work on a team and with source control. Don't get caught up with the minutiae of garbage collection or stack vs heap. There's plenty of time for that. Spend time learning how to work on a team of developers and to hone your instincts for debugging. You want to look like a rockstar? Understand your project deployment process. Understand the different environments you have and their promotion criteria associated with it. The best developers aren't necessarily the smartest c# experts but rather they work well on a team, understand the importance of quality code and testing, hold themselves up to a higher standard, and know the application and deployment process through and through. Good developers have good instincts. Find a mentor. Find someone you can bounce ideas off of. It's really helpful. Ask to take on additional work that nobody else wants to do. You'd be surprised how valuable you become. 
One of the funnier comments on this subreddit!
I've found I have a difficult time writing code that might look like it was written by a beginner, but I can give you a few pointers: 1. Consider using a List&lt;int&gt; to store each number instead of converting back and forth between numbers and strings. For example the number 13 could be `new List&lt;int&gt; {3, 1}` 2. Notice I stored the number backwards in the list. This is because List&lt;&gt; has a method to append called `.Add()`. Whenever your number needs a new digit you can add it to the end instead of making space for it at the beginning. 3. Create a method `void Add(List&lt;int&gt; a, List&lt;int&gt; b)` that adds the number in the list `b` to the contents of `a`. 4. This way you can call that method and pass in the two previous fib numbers, always the one 2 numbers ago as `a` and the previous one as `b` and then after the call the current one is in that first parameter. 5. If you only store numbers less than 10 in each index, the length of the lists are the number of digits. You might want to store numbers more than 10 though (the program I threw together to generate those numbers instantly (it is in my gists for those who want to see it) stored numbers 0-999,999 in each index)... 6. create another method to turn a `List&lt;int&gt;` into a `string` to display it
It looks like requests.post sends the data payload as form encoded data. now to figure out how to do that with C#.
SVN is definitely a source control repo. Git tends to be where a lot of open source stuff is these days. As I said, being a developer isn't about being a godlike guru. It's about being able to deliver a quality product on time and working well with others. 
By the way, test your add method outside of writing the code for the whole loop. It is always easier to build a small part and get it right than to build the whole thing all at the same time. Write something like this: public class MyApplication { public void Main() { var a = new List&lt;int&gt; { 5 }; var b = new List&lt;int&gt; { 8 }; Add(a, b); if(a.Count != 2) { Console.WriteLine($"failed: count != 2 ({a.Count})"); } if(a[0] != 3) { Console.WriteLine($"failed: a[0] != 3 ({a[0]})"); } if(a.Count == 2 &amp;&amp; a[1] != 1) {Console.WriteLine($"failed: a[1] != 1 ({a[1]})"); } Console.ReadLine(); } void Add(List&lt;int&gt; a, List&lt;int&gt; b) { } } Test at least 5+8, 8+13 and 13+21.
http://stackoverflow.com/a/15176685
Check out [Design Patterns](https://en.wikipedia.org/wiki/Design_Patterns) for some OO theory. Understanding how and when to use specific design patterns is really important and bridges the gap between writing code and engineering software.
Winforms is going to be around forever, so if you really want to learn that you would be safe to do so. However, if you are new to programming then WPF is the ideal technology to learn for desktop applications on the .NET framework. Porting your program over is a great way to learn WPF, so I'd say it's worth doing.
Try linqpad
You're right in suggesting parameterisation, but you can't parameterise table names unfortunately, if you want table names to change at runtime you're going to need to build the sql dynamically. I'd suggest the OP be very careful with the input if it's coming directly from a user, but actually, I think it's better that this was split into multiple static queries for each table, assuming the number of table is manageable.
Oh come on. I really get tired of people acting like anything more than a few lines long is a heinous offense. I understand that the "correct" way now is to program minimally. But for heavens sake it *is* possible to take it too far. When all is said and done, your program has to actually **do** something. Oh your code has regions delineating your members from your properties from your methods? So *bloated*! Code smell! That's a dumb knee jerk reaction. I'd much rather have a fully defined and functional class with clear regions than have a dozen micro-classes each responsible for one tiny part of the overall functionality. Give me a break. Soapbox Edit: I'd also like to point out that I'm not a fan of this concept of "code smell" either. If someone is using a bad pattern, it is a bad (or misused) pattern. Saying something has a "code smell" is just a shorter way of saying "I don't like what was done here, but there's nothing really wrong with it."
oh yep - you're right. The user shouldn't be inputting anything relating to the table name anyway. I'd do what you suggested and have separate queries for each table
yisssssssss \^\^. Thanks.
What do you mean?
Completely agree. The only reason I'm thinking of pulling out EF from a project we're currently working on is the current rate of WTF with EF.
There are at least three different ways of using them in the article, and that's EXACTLY why they're so great Got a miscellaneous chink of code you need to mark-out / make minified? Here's a tool to do that! And here are some examples of ways that this might be useful. I don't get how anybody can argue against them
&gt; We use classes several thousands of lines long Your classes are most likely violating the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) if they are that big. You should look into refactoring.
WinForms probably won't ever go away, because it's how you interop with native Win32 UI code. WPF is always a better option if you don't have to do that.
&gt;I don't get how anybody can argue against them Come to [Magenic](http://www.magenic.com) and have a chat with our App Dev Practice Lead. :) Good luck. :)
&gt; UWA Do you mean UWP?
I agree with the premise, but I don't think that the arguments are well laid out in this article. I'll just nitpick two things: &gt; it’s a good idea to group the class methods by their purpose even if it means you need to combine a property and a backing field or a public and a private method together. Such practice leads to better cohesion. I would implore anyone reading that seriously to read Clean Code by Robert C Martin (chapter 5: formatting). &gt;... removed due to the Yagni principle ... I don't think this type of thing encapsulates the "spirit" of the YAGNI principle. You can use the words of the acronym, but I think it's misplaced here. There's a hatred to regions that I've never truly understood. I've abandoned code folding ages ago and been relying on just really smaller well-named classes. I suppose it's more of the fact that I just deal with regions in my code base any more so it bugs me a lot less. However, if I joined a team and they used regions ... I'd go ahead. Wouldn't lose much sleep over it. For some people, here's a related article: http://blog.codinghorror.com/the-problem-with-code-folding/
The how is not as important in my statement as the when, I completely agree.
To me, there's obviously no perfect code. I think I try to go for what's most readable and maintainable for my programmers that I work with and that come after me. Sometimes I'll break a few of these new 'rules' that we come up with, if I think, it's better for our circumstance. Pragmatism is as important as many of these.
I have been using MS tools since 93 using VB and C#. I have moved to WPF as this can be used in more situations that just Windows apps. Universal apps use WPF/XAML and there are lots of similarities between that and HTML/CSS, so again the knowledge you can helps transfer to other technologies and platforms
I'm working in a class file that has 4082 lines of code. It would probably go down to under 4000 if all the region blocks were removed.
I don't see how you can *not* conclude it's shit code if you're dealing with classes thousands of lines long. Just because a company does it (under deadlines and budgets and shitty management) does **not** make it good or even acceptable. I shudder to think about working with some of the people defending such a practice. Chalk it up to a necessary evil, but don't ever defend that kind of thing. Edit: Wow, I'm pretty convinced at this point this subreddit is either full of trolls, or some pretty weak programmers. I've never seen this naivety in other programming communities. Please, for the love of all things, learn how to refactor people.
I'm guessing he means that he has to write code that could be 'farmed out' to other methods in the containing method instead, increasing the length of the method, because .NET 3.5 didn't have the `[MethodImpl(MethodImplOptions.AggressiveInlining)]` option. It's a performance improvement in isolated cases.
Can you provide us with an example?
What were you hired as?
&gt; As I said, being a developer isn't about being a godlike guru. It's about being able to deliver a quality product on time and working well with others. I will second this. There are lots of amazing players out there, but so many of them can't talk to customers, or get caught up in how cool their code could be. They forget that the customer only cares about a good working product, not a cleverly written one.
That is correct. I did not code before this.
Experience. I've never seen methods/classes that long which is not shit code that the only the original developer can maintain.
Win32 is going away.
I recommend giving /r/learnprogramming a shot. A bit more description of what you're actually trying to do would be a good idea when you do so.
Interesting way to hire a programmer )
SOLID software design. You won't understand it for a while (even if you think you understand it) but it'll help enormously until you *do* understand it. Just don't go crazy with dependency injection. A class really shouldn't have more than 2 or 3 dependencies. A class with 7 or 13 and more is definitely the definition of **bad**. Also write your code starting from a unit test. It is always faster. It helps you write better code too. Good code is easy to test. Bad code is very hard to test.
My personal opinion is to have a settings table in your database and to save all your settings within that table. It very good for scaling, and doesn't allow your user to directly edit settings. The other option that I've seen is common is to save the settings in an XML config file but I just can't see this being any good for scaling and multi user applications. However, just like /u/dasjestyr said, &gt;whatever works best for you
Tell me what the main interface library of windows 10 is?
 &gt;Know data structures. I can't stress that enough. Know when the right time to use a list, an array, dictionary, etc. To be honest this isn't very important. Until you have system that deals with tens, hundreds, and thousands of **millions** of objects. Computers are just so fast doesn't matter. As long as you don't create algorithms that are exponential time or factorial time, there's pretty much nothing algorithmically you can do wrong with items measuring in the thousands. Bad design that requires multiple network round trips will do a 100x worse than you can do with the wrong data structure or algorithm for small data. Same with a bad sql query or bad over normalized data schema that requires massive locking to work right. 
This is a single user piece of software at this time so i dont anticipate that being an issue. Though if that becomes a change in the future then the move to database would make sense
I feel bad for you, php is the devil's spawn. Then python is even worse... 
this is not a place where people post homework assignments and get the solutions. Do the work yourself. If you have questions with portions of your project, or don't understand something. Then sure, someone might be willing to pitch in. Post an example, and ask a question. /r/learnprogramming is a good place too.
Thats actually very interesting. How did you manage to force the generator to move the mapping code to each class? Edit: but for real...I need to know this!!! =p
I wish I was joking :|
the old stuff eh?
Depending how complicated you want to get...and how you have your settings organized. If they're in class structures, then serializing them to json/xml would be simple. Just remember if you save multiple copies/versions or change one setting and save them; you are opening the file, reading it all in (deserializing back to your models/classes) then changing a property and writing it all back to the file. Not a big deal on most computers these days. But its worth the note. If you want to start simple but still be flexible, then write a ISettingRepository interface, and start with a FileSettingRepository class. Something like this... public interface ISettingEntity { int Id { get; set; } // or/and some common property you wish to have } public interface ISettingRepository&lt;T&gt; where T : ISettingEntity { T Find(int id); // use common property in ISettingEntity IEnumerable&lt;T&gt; FindAll(); T CreateOrUpdate(T setting); void Delete(int id); // again use common property in ISettingEntity } public interface ISerializer&lt;T&gt; where T : class { Serialize(T classObj, string storagePath); T Deserialize&lt;T&gt;(string storagePath); } public class JsonSerializer&lt;T&gt; : ISerializer&lt;T&gt; where T : class { // impliment methods } public class FileSettingRepository&lt;T&gt; : ISettingRepository&lt;T&gt; where T : ISettingEntity { private readonly string _storagePath; private readonly string _filename; public FileSettingRepository(ISerializer serializer, string storageDirectory, string filename) { _storagePath = storageDirectory; _filename = filename; } // impliment ISettingRepository methods using file system } Example usage: public class SmtpSettings : ISettingEntity { public int Id { get; set; } // more properties } var dataSerializer = new JsonSerializer(); var settingRepository = new FileSettingRepository&lt;SmtpSettings&gt;(dataSerializer, @"C:\mysettings", @"smtp_settings.json"); var smtpSettings = new SmtpSettings { // set properties }; settingsRepository.CreateOrUpdate(smtpSettings); // etc... If you don't plan on changing the storage method, then don't do all the above, it's probably overkill. But it's pretty flexible, because you can now change the FileSettingRepository class for an SqlSettingRepository class later, or whatever you decide to change to and everything else you wrote, just works. Many ways to skin a cat, but this is an option. Disclaimer: i didn't check the above code, but should give you the right direction/idea. If you choose to go that route.
Forcing a type conversion to use the correct index?
Implement your own StreamReader if you want that. It's just convenience class over a Stream. Nothing you can't do on your own.
Totally agreed, what a load of horseshit. Seriously, religious dogma about "how big classes should be" pisses me off. Try writing a non-trivial MVVM ViewModel (which is a damn good UI pattern, IMO) and then we can talk about how every class should be no more than 100 lines and how bad regions are.
It is feedback like this that really motivates me to get stuck in and continually improve Tail Blazer. I will add more sophisticated filtering in time like RegEx or being able to enter some logical text filtering like "Text=Info or Warn or Error" which would make it even better for you. Thanks.
Testing and code quality guidelines should be the topmost comment here. OP if you don't really see yourself as becoming a developer/don't plan to become skilled at coding and see it as something you would take pride in, I would advise against taking on a role as a developer. In the long run it will result in unmanageable and bug-ridden code, making the other developers days miserable, and the employer will have a larger iterative cost both for the functionality delivered, and for future changes as well. If requirements specification is what you're really interested in, do that instead. 
Sound advice.
I'm going to agree with the other responses in that it is not the prettiest piece of code, but instead I'll give you some tips. 1) Use the @ symbol before string representations to avoid the confusion of most escape characters (e.g. @"C:documents" as opposed to "C:\\documents") 2) If you will not be using the value in an iteration more than once, it is faster to use a for loop as opposed to a foreach. Example: for (int I =0; I &lt; collection.Length; i++) //...Code to use collection[I] 3) Separate common functionality into methods with parameters instead of event functions. 4) Learn LINQ if you don't already know it. 5) Try not to use static Boolean values for checks. It gets sloppy. I do have to say that although your code might not be pretty, if it works in your case then it works. 
you can use WinFormHost in WPF http://pastebin.com/qRHDFkeW 
The point isn't just too spread the implementation out for the sake of having smaller files, the point is that if your class is large enough that you need regions in it to make it understandable it's probably doing too much. If it was structured properly you would only be looking at a file containing only the functionality you're working on, so you neither have to unfold regions nor open 15 files to find the full implementation. If you do, you likely have a high degree of coupling that needs to be addressed. That said, I don't mind regions. I pretty much only use them to group any methods from the same interface. 
Test Driven Development
MFC is the hell. I have to maintain a MFC project which is still using DAO (which is required by a core component we use) while at the same time being forced to use MS SQL Server. Then there is the dialog editor which is just a PITA. I could go on, but those are the main annoying points.
It's implemented on top of Win32, though.
A StreamReader is a TextReader, not really a convenience class unless you want to call almost every class a convenience class. 
That's a valid point. I've worked with devs there spread things out just to keep classes smaller... I like regions, I feel that they are a clear way to label sections of a class / interface. I always try to keep my classes slim and focused, but I still like to use regions for organization. I've never once thought it a nuisance to just quickly tap ctrl+m twice to expand a region. That's just my opinion and personal style though. I'm sure that there are devs that overuse and abuse them. I can imagine that being incredibly annoying. 
It's not directly on top of it, winrt bypasses most of win32 in favor of direct ex. The windows app store requires win32 apps to run in a virtual machine. As a way to build windows UIs it's a dead end and only supported for legacy reasons.
Wouldn't it be better to just build the query programmatically: var query = ... if (boolVar == false) query = query.Where(x =&gt; x.Contains(table.intValue) LINQ (and SQL for that matter) doesn't deal well with conditional querying.
Native and win32 aren't synonymous. You can write native code against winrt.
For some reading materials I would suggest clean code and code complete which also has a list of suggested books at the end.
You absolutely can. You can even publish Win32 applications to the Windows store, although with some constraints. But why does Windows Store matter? It's not like it's the only application repository available on Windows, and by far most applications for Windows are not universal, and not all applications are even appropriate as UWP.
I agree completely. View models get long very fast. Even if you abstract out as much as you can. As for the point the guy was making in the link I just thought; "Oh, fuck off". This kind of "there's a right way and a wrong way" bullshit is tedious and best. And usually infantile. We have all come across times when "rules" don't apply. Yes, best practices exist. But saying not to use code regions is totally spastic. 
didnt notice, was in a hurry while answering. Sorry. Ill take a blink
But if we write the code for you, then how do you learn? :) The idea is that you're working with numbers. So store them as numbers, not strings. If they're just numbers, then you can do addition normally with the + operator instead of converting each character to a string, digit by digit. I understand that the reason you are storing them as a string is for the `result.Length&lt;2000` check. But you don't need to do that. The very first integer with 2000 digits is 10^2000. If you store as an number, then you can do normal addition and then check `result &lt; 10^2000`. Now, the downside is that you can't represent these in a normal integral type in C# See https://msdn.microsoft.com/en-us/library/exx3b86w.aspx. The best you've got has to be less than 2^128 for a standard type, so thats *way* less than 10^2000. Good thing there's a solution! The `BigInteger` class supports arbitrarily large integers: https://msdn.microsoft.com/en-us/library/system.numerics.biginteger.aspx The key is - you've got numbers. So work with them as numbers.
The only reason to ever refactor a long function is if parts of its functionality are reused elsewhere. But if you have a function that is only called once from a single function, then it might as well be in the body of the other function and reduce stack overhead
Fuck this guy, regions are awesome.
True, and not only true for regions. Just look at all those "controllers", "models", "viewmodels", "services", "interfaces" folders in solution explorer.
Seriously. :rollseyes:
yep, everyone who says regions are bad have never worked on a proper MVVM project.
Regions inside methods are probably not a great idea, but to organize a class for reasons of readability and maintenance? Why not? 
only on methods. Atom has code folding on wrapping characters, `()`, `[]`, `{}`, etc
The solution you are proposing, while it might make your job easier, is going to make things more difficult in the long run. You are talking about building a piece of software that will read ui a and capture information and then read ui b and capture information. This software will be unsupported but your coworkers will see the usefulness of it and start using it in their daily work, maybe even to do things other than what you are planning it for. The problems with this start with the fact that what you write might not fit the minimum design requirements for your company or the data storage requirements. What if you get audited? Next, you are trying to fix a known issue with new software, it would be better to fix the known issue. The issue will not get fixed unless enough pressure is put on the development team to fix it and by using your solution you are eliminating a business need for the fix (meaning less pressure). It may seem counter productive but taking your time away from more important tasks will increase the likelihood of a fix being implemented. (On a side note, how known is this issue? could it be escalated to anyone else?) All of this leads your department into a position where they are leaning really hard on your software, it becomes production critical. What happens if it breaks? Are you going to be in that job forever to fix it? Are you comfortable getting paid your current wage and doing a developer/app support job? If the development department is pulled in to support it they are not going to be happy about it out about having to support software that will surely be in a different design pattern than what they are required to make. What if this happens after you have left and can't explain how it works? Would you want to do that level of digging though someone else's code? The right solution would be to keep pressuring them to fix the bug. If you have some skill in programming maybe try and parlay it into a mentorship scenario where you get to work when a developer on fixing the bug. If you have been honest with your manager about your career goals, they should be on board with you developing these new skills because they are turning you into an asset for the company that has a good chance of paying off for them later. Unless you have a terrible manager, then I would encourage you to look for other work. Edit: autocorrect on mobile when nuts. 
Best of luck: http://i.imgur.com/S9CfvrV.jpg
There are some online resources but it would help if you knew where to look. Do you have access to the [Xamarin forums](https://forums.xamarin.com) with your student account? I was able to read the Java documentation from [Google's Android site](http://developer.android.com/guide/index.html) and translate that into C#/Xamarin. If you literally have no experience then I would agree this is the worst way to start.
I'd make a class to handle the settings, and keep them local (flat file or xml) for now, considering your current needs. Later, if you decide you want to move it to sql, it will be easy since it's all centralized.
Are you using fixed pixels for your page?
yes, biggest box is 640px and he is wrapping everything in . browsers load this great . it looks great and all .. but same thing in webview is just not working . 
It is true that there is not enough online resource for Xamarin. I would recommend to check pluralsight video tutorials about Xamarin. You can get free Pluralsight account from Microsoft Dev Essentials program.
It would just be super helpful to be able to indent every type of indentation in visual studio.. especially for the longer blocks of legacy code...
unit testing and oop design patterns helped me code better I know MVC is huge in .NET right now too 
SRP. I guess the conflict is how *small* is small. If my object is supposed to handle only a single responsibility it must be smaller. And when I further break that down into interfaces those are even smaller. We're always looking for smaller, simpler, more elegant solutions in our code as it is. I think it's just a natural extension of that.
With absolutely no prior experience in programming, it will be a bit tough. But, that's not the fault of Xamarin, C#, or Visual Studio because if they through you into making the same exact thing using Objective C in XCode for and iOS-only app, you'll have the same exact problems. App development has a lot of quirks that you have to just know how to deal with. That being said, Xamarin is a solid platform. It's one of the hottest things to know if you were on the job market. The amount of resources available are probably more than you think. Someone else mention the Xamarin Forums and there are a lot of things there. Xamarin is also something that directly calls the APIs in native code, so realistically, every android specific guide is also a Xamarin.Android guide too. Just instead of calling "imageView.setImageResource(R.drawable.myimage);" you would call .SetImageSource(R.Drawable.MyImage); since the C# bindings are Pascal case and not camel case.
It's definitely not, i forgot /s
I like your blog posts, but it would be **great** if you could participate and contribute to this subreddit besides self-promotion.
Considering it's all based on Mono opensorce, you'd think there'd just be something free and better. Just because Xamarin is a large sponsor to the Mono project doesn't really mean they are the authority on it. But I guess as long as you use their tools, you're required to wear that tramp stamp.
paste the code again. "Not all code paths return a value" means just that - somewhere in the function is a code path that will not provide a return value. 
To preface, I'm a C++ developer at heart and at work. I have a minor interest in C#, I have used it a few times for various things. Maybe best practices in C++ don't carry over to C#, though I always considered them best practices for programmers in general. I've written parsers, I've written a whole compiler for my own small scripting language. A properly (hand) written parser for anything more than trivial tasks is most definitely not a massive 4000 line monster class. The best parsers are split up into many sub-modules, we often call them "parselets" or "subparsers". They are miniature parser classes (or a collection of static functions, in a language like C) each tasked with parsing a very specific piece of the source. This way you can properly test your parser, and you can easily debug it. When you write code you should be writing it to be testable. Classes and functions that are thousands of lines long are not easy to get good test coverage over, there are few if any exceptions. I don't believe there is any case where a large class or function can not be broken up. And even if there is, I think it should be considered a necessary evil and be left at that, I don't believe it's a practice any self respecting programmer should be defending.
Well, a couple minor points 1) It's not quite there yet, but in an ideal world, if I can share code (ViewModels) between iOS, Android and Universal Windows Apps, there's a pretty clear benefit there. That, combined with me being comfortable in Visual Studio and not particularly caring for Java, seems like plenty of reason to use C# for Android 2) I haven't looked at this in a while, but I do remember a couple independent performance evaluations of Xamarin compared to native and Xamarin seems competitive in terms of reasonable real-world performance.
Hi I have solved the issue thanks for everyone's help, edited the code and added //uses the reader reader = command.ExecuteReader(); } } return reader;
Yup 
Why refractor something good. 
We as are discussing UI tech though. Other parts can die/evolve/remain on a much more piecemeal fashion.
There are many developers working on some of these classes. Making them big is a conscious choice we all agree on as it simplifies and speeds up iterating on such code. 
Over time, a large class may be hard to maintain. It may take more time for a developer to fully understand everything that the class is doing, and may make mistakes in changing the class if it is well understood. If there are no unit tests, there is no way to know that the changes did not bring in unintended side effects. It just becomes a maintenance difficulty over time.
Many institutions make terrible choices on beginner programming courses based on making the school look more appealing and relevant and their offerings more marketable. It's not worth complaining to the kind of people who come up with those ideas because they're idiots to begin with.
If application will run on different user accounts you can go to Project&gt;Add new item and look for Settings File, it also has nice editor. If not you could try to manually implement this: [Configuration Class](https://msdn.microsoft.com/en-us/library/system.configuration.configuration(v=vs.110).aspx)
If there are many developers working on a single class concurrently then it is almost certainly violating SRP.
You know you can separate the functionality into several classes for maintainability and keep those classes in the same file?
No arbitrary on demand folding? How primitive.
Oh, thanks. I don't see the limitations of the Starter Edition clearly laid out though. Its is limited by build size, number of builds, or features only, etc? If you have experience, can you share?
A lot of open source C# projects still live on [Codeplex](https://www.codeplex.com/). I search there first, then github if I don't find anything current. 
[Codeplex is dead](http://www.codeplex.com/site/search?query=moved%20to%20github&amp;ac=3)
I am extremely fortunate and am working hard to make it obvious why I'm a good fit. 
Hehe I never straight up ripped code from previous employers, but when you can recreate small, useful utility/helper classes mostly from memory (and at the same time improve them). I wrote a few SQL mapper utilities before Dapper was available. It's an essential piece of code in any codebase. 
You're totally right. They paid for the right to do so. But they don't own it. I guess what I'm saying is, I hope someone builds up a cool IDE eventually, like monodevelop is for mono, only for android.
I think we're talking about the .NET core open source, not C# open source projects in general. There are a lot of those out there.
Is there an error? Are you using a web.config file for connection strings? If so, make sure the provider is correct for the SQLite connection.
You don't understand, is their product from day 0 of the Mono project, back when they were still [Ximian](https://en.wikipedia.org/wiki/Ximian). They own it.
You'll get there with the basic stuff. It does make sense to try to memorize basic things because it saves a lot of time and makes programming more fun. And the great thing is that it gets a lot easier when you learn other programming languages because the constructs are similar. That said ... programming today oftentimes builds upon so many abstractions that you'll always have your IDE on one screen and an API documentation on the other. That makes it more interesting, ideally you're always learning. But especially in the setup phase where you just write a few models, data providers and UI basics it feels like you're copy-and-paste-from-brain-machine if you have a little bit of experience. You'll still forget a semicolon somewhere though.
This isn't as meaningful a question as it probably seems like on the surface. When I first started into c# it only took me a couple of days to be able to use it fairly proficiently. But that's because I already knew, and had several years experience with Java, C++, Python, and Javascript. C# was only a minor change from Java and C++, so it was fairly trivial to jump into. In comparison, when I first jumped into Java it took me several weeks to be able to get grips on the basics of the language. And C++ took me months. A couple of years before I wasn't constantly making mistakes. The more exposure you get to different languages, and to programming in general, the easier it's going to be to pick up the new languages.
Interesting. As a former recruiter, how often did you/do you see people transition from a "non-technical" position into a technical one? I'm currently a BA by title but Systems Analyst by actual work, but I really want to move into being a developer. I understand your situation would be extremely rare, but would already working in IT in a project environment be beneficial for me? Or would I solely be considered by my coding experience (which is almost nil right now)?
The more you type it, the faster you will learn it. Your early programs will likely be from tutorials and articles. Type it out instead of copy/paste. This will also train you to utilize the keyboard shortcuts and code completion features of the editor. Also, go into the options and setup your preferred formatting. You can customize all of the common formatting, such as braces, indenting, etc. Then use Ctrl-K-D to format your code after a nice brain dump into the editor.
If your proprietary dbs is SQL compliant, then definitely ADO.net. Devs should be able to leverage SQL rather than mix wrapper methods until they get it right.
Have you tried debugging it line by line and watching some of the variables to see where it fails? No one will do your homework here
&gt; i cant figure out what is wrong with my code in the program to get it working properly. Can anyone help? You expect us to copy your code and fuddle with it until we can get it to run, then find the error and come back here and tell you what it is? Help us help you! What error are you getting, and what have you done to try to resolve it? PS: Pastebin.com or some other code pasting service would also help make your code readable, when you have a large set of code.
Cross platform mobile development is difficult, hence the charge. It is a bit shady that they advertise it all and then only mention the charge at the end though! I work on an app that is on iOS, Android and Windows (almost) and we decided against Xamarin. The benefits of having shared code between platforms is obviously nice, we didn’t use it because: 1) It seemed like if you ran into performance issues you are a bit stuck behind the C# abstractions and can’t get down into the native code easily. 2) Most of the UI work needs to be custom per platform anyway, and on our app that is a large percentage of the code. (Lots of custom drawing code) 3) There are other ways of writing shared libraries, C and Go come to mind.
Yeah, but it's growing...slowly. I'd say to .Net developers who are new(-ish) to open source to get a GitHub account, start looking around, chime in with a few stars, forks, ask questions, and raise issues. And then of course, start contributing fixes, or even a project of your own.
The portable version is on other platforms but I was told this version was ported to c# and directx rather than c++ and opengl.
It depends on what you mean. I've been using .Net and C# almost daily for nearly a decade now. Most common syntax I know off the top of my head, but I still need to look up how to write a proper do/while loop. I just don't use them that often. On the other side of that, I have no problem writing code that uses the various overloads of LINQs Aggregate function because I do use that fairly regularly. What syntax you commit to memory and how long that takes is really going to depend on your personal coding style and the type of projects you work on.
Those versions are also c# I believe, well at least I was told the windows phone version is.
Some do and some don't. Is it better to give people a linq provider to give them a consistent interface?
First of all I haven't downvoted you, I don't know why we are getting downvoted. I never said I had a source... So I don't know why you are asking for one. I'm just letting you know what my beliefs are. I was told by a friend that works as a developer at Microsoft and I trust him when it comes to the phone and windows 10 version. He could be wrong but currently I believe him. And your first source was from a tweet in 2011 about a completely different version, hardly relevant anyway. It isn't that common to have a project in more than one language for multi platform compatibility's sake. At work we even have one piece of software that is written in 3 languages (one of which is only on maintenance now but still)
With practice you will memorize more. Heck, I still google syntax things and I do this professionally. 
The linked page states that you will not need to recompile or re-target your existing applications.
I am not trying to argue. Just stating my opinion on the matter. But for what it is worth you have shown zero evidence that the windows 10 edition is written in c++ you are just making the assumption really. Look when it comes down to it we don't have any hard proof in either direction. I am a software developer and completely agree that it sounds funny (stupid) to maintain 3 projects the size of mid size game in 3 languages but I am giving my friend the benefit of the doubt here.
What does this mean then functionally? Going forward, I should no longer target the unsupported frameworks?
Companies with a lot proprietary data aren't going to put code and packages out on a service that is outside the company's network unless they could setup a VPN.
Maybe I'll learn how to code native eventually but I want to at least release a game or two with C#. So I guess I'll stick with Unity for now. The engine is great, but adds 18MB to compile size. Not too bad considering the benefits in there.
I always told my consultants when I recruited to swing it how you can. Admittedly you likely have more technical experience than I do. Use that to your advantage. The best advice I can give though is to just communicate to as many people as possible your intentions. If you were a recruiter chances are you have good social skills like I do and are interacting with people frequently. Tell them all. You never know who's dad is the director of app development at your favorite company. That's how you get jobs nowadays
Writing to a database is not as easy as writing to a text file for a couple of reasons. A text file takes in whatever you input it. The database may have certain column constraints you need to be conscious of when you create it and each column has its own type. A text file can only be just that, text. The database also accepts 4 main types of commands, Creates, Retrieves, Updates, Deletes (CRUD). If you are using something like SQL Server, theses commands can be exposed using stored procedures which are easy to call through code. Other databases allow you to type the commands as a string and execute them, but then you get into database sanitation and SQL injection. Databases have to have connections, which may or may not hold usernames and passwords. Probably the easiest database to manipulate that comes close to a text file is SQLite, since it is local, free, and can be configured easily. In C# there are 2 main schools of thought when it comes to manipulating information in a database, code-first and data-first. It looks like your approach is going to be more data-first oriented. Since I do not know the extent of your project, what emphasis your professor is trying to drive, or do I know what the features are that are required for a vocabulary-trainer, any help given revolving around structure of your database is going to be more miss than hit since we do not know the requirements.
Yeah, inserts don't require ExecuteReader because you're not reading data. I think it is just Execute() or ExecuteCommand()? It's been awhile since I used SqlCommand. Additionally, the insert query is obviously missing values and thus is not a valid SQL statement. When running this, you'll also have to make sure that any strings being provided in the query string are quoted with the single quote '. For example: INSERT INTO MyTable FirstName, LastName VALUES(John, Smith) This will fail because John and Smith aren't quoted. SQL will get confused and sad. You'd need to make sure it looks like this instead: INSERT INTO MyTable FirstName, LastName VALUES('John', 'Smith')
[Fody property changed](https://github.com/Fody/PropertyChanged) just add the annotations on each class and your good :)
What do you mean by "before it is fully built"? And what does the mouse event handler have to do with this? Unless you're explicitly using multithreading in the `ComplexGUIClass` constructor (in which case: don't), this code will execute synchronously, i.e. each method is executed one at a time, one after another.
 var currency = new Currency(12); // .net 4.6 way Console.WriteLine($"a = {currency.stoneCoins} b = {currency.CopperCoins} c = {currency.SilverCoins}"); // older than .net 4.6 Console.WriteLine(string.Format("a = {0} b = {1} c = {2}", currency.stoneCoins, currency.CopperCoins, currency.SilverCoins); Is this what you mean? PS: you should keep consistent with formatting your public variables. stoneCoins should be StoneCoins... if it was a typo sorry! :) 
As an ENTP, that statement makes me twitch. SRP doesn't mean small, SRP means coherent which doesn't always mean small.
The whole idea is to make it automatic. You just specify the overall value, and it should automatically return the number of coins that would represent the value. Example: * allCoins = 32; gives: * StoneCoins = 2; * CopperCoins = 3; * SilverCoins = 0;
Absolutely not. When you target 4, you also target any 4+ (the opposite might not be true, but in a fair amount of cases will be). All of 4+ versions are a so-called in-place upgrade, meaning once you install it, you always run that version, not 4.
Well that's something the team lead should be monitoring. As a lead, I always say "I don't give a shit how you make it work, just get it to work. But when you submit that bitch code review, it ain't getting through if it's a ball of mud. Clean that shit up before you let me see it." At my company, 100% of the code is reviewed by 1 or more senior developers and bumped against a simple, enumerated coding standard (which includes the .Net design guidelines). When we bug something for style, it always has a reference back to the standard that explains why it is wrong.
How would you do it in your head or on paper?
Mostly it means don't install unsupported versions on your workstation, servers, or customer machines. The only reason to change the target is if you want to help prevent that the user/server from using a non-supported version. So target 4.5.2 so that they can't use 4.5.1. 
Companies are allowed to have a myopic view, still means they're wrong about it.
Ok I think I know what the problem was before. I don't know why, but I was thinking I could use the same DataAccessLayer objects that were created from choosing the Code First from database option in the Entity Data Model Wizard for both SqlServer and SQLite. That must've been why it kept trying to use EntityFramework.SqlServer instead of SQLite.EF6. So I will need to create different DataAcessLayer objects, one for the SqlServer database and one for the SQLite database, correct??
IIRC, SQLite will work with EF but it **will not be able to create the database** for you. You'll have to manually do that part. [See here](http://stackoverflow.com/a/23128288).
I suggest you try on /r/jobbit, or /r/forhire, or other job-hiring related subreddits.
Well, it should work exactly the same, in regards to manipulating the data, it's just that you'll have to manually manipulate the database tables when you do a migration. If you use the console command to print out the database changes, you can usually use it directly on the SQLite database in an editor.
While it's curious that an unrelated piece of code changes its tracking in this case, garbage collection (and thus `WeakReference`) is not guaranteed to be predictable in any way. Note that the specific `if (objRef.IsAlive)` is not the culprit, I'm able to trigger the same behavior with other pointless code like `if (123.ToString() == "123")`, or `for (int i = 0; i &lt; 10; i++);`.
Well I created the database using the SQLite extension for Mozilla. I tried creating new DataAccessLayers for that database using the Entity Data Model Wizard's Code First option but it is unable to complete because of a version issue, something about one of them being 1.0.99 and one being 1.098 but I'm not sure what is the wrong version...the database itself? I went through and made sure all the references were the 1.0.99 but it still said it.
I also recomend [this](https://www.youtube.com/playlist?list=PLAC325451207E3105) playlist, it goes from the start to (almost) everything, it goes into a lot of detail and personally really helped me.
I get an ArgumentException: "Keyword not supported: 'version'." my connection string is data source=C:\Users\User1\Desktop\testing.sqlite; Version=3; 
hmm, maybe it's the provider that you're using. use providerName="System.Data.SQLite" *without the EF6*. Then in your EF Providers list, try: &lt;providers&gt; &lt;provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" /&gt; &lt;provider invariantName="System.Data.SQLite" type="System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6" /&gt; &lt;/providers&gt; I really can't say anything more than, *it works on my machine* and I know that doesn't really help, lol.
Typically you would run another thread that handles all file writing.
I got this exception then: {"An error occurred while getting provider information from the database. This can be caused by Entity Framework using an incorrect connection string. Check the inner exceptions for details and ensure that the connection string is correct."} Does the ProviderFactory play a role in this? this is what mine is (applogies on the layout, i'm struggling with the code blocking on reddit) ` &lt;system.data&gt;` ` &lt;DbProviderFactories&gt;` ` &lt;remove invariant="System.Data.SQLite.EF6" /&gt;` ` &lt;add name="SQLite Data Provider (Entity Framework 6)" invariant="System.Data.SQLite.EF6" description=".NET Framework Data Provider for SQLite (Entity Framework 6)" type="System.Data.SQLite.EF6.SQLiteProviderFactory, System.Data.SQLite.EF6" /&gt;` ` &lt;remove invariant="System.Data.SQLite" /&gt;&lt;add name="SQLite Data Provider" invariant="System.Data.SQLite" description=".NET Framework Data Provider for SQLite" type="System.Data.SQLite.SQLiteFactory, System.Data.SQLite" /&gt;` ` &lt;/DbProviderFactories&gt;` ` &lt;/system.data&gt;`
You make a very good point, a lot more developers will get tripped up by lack of good communication skills much faster than they will by not knowing enough technical details. Knowing how to interact with customers and write both business- and technical-oriented material is one of the best ways to stand out among junior to mid-level programmers.
I wish I could help further but I'm at the end of my abilities for this topic.
 var posts = await client.GetAsync("").Result.Content.ReadAsAsync&lt;List&lt;Post&gt;&gt;(); No. Don't do that. When you call `.Result` like that. That will break async code. Alternative: var posts = await (await client.GetAsync("")).Content.ReadAsAsync&lt;List&lt;Post&gt;&gt;(); Edit: And by "break" I don't literally mean it will crash (though, depending on what you're doing it can deadlock... but probably not here). But you will be doing a blocking call during the most time-consuming part of making a web-request, which means you're not actually writing async code at all. See: [Don't Block on Async Code](http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html)
MSDN?
That really isn't the same as having a physical book. MSDN doesn't explain a lot of concepts very well, where books written specifically for people looking to learn (and not to use it as just a reference) do this fairly well.
Thanks, I will definitely look into this!
MSDN has a lot of articles other than reference. Most of books are just rewritten MSDN and outdated.
Some of the more modern JVM targeted languages look pretty good by these metrics too.
I've written something very similar to that already if you're interested. It runs as a service, reads an xml file for instructions, and connects to a database to run queries which it then stuffs into csv files and zips them up, and then uploads to an ftp site using ssh. The schedule for when it does this is also configurable in the xml file.
Oooh, might be time to upgrade from 1.0. ^^^trapped ^^^in ^^^legacy ^^^send ^^^help
I hate that guy.
Why, .Net? Why did you kill her? Was it her cross-platform compatability?
Rewinding the conversion (that is, subtracting SilverCoints * _silverRate) is perfectly valid. However, using Mod instead is the same operation. x - (y * r) == x % r because you're taking away an even number of r's from x, what is left is only the remainder. For example (assuming 100 and 10 for the rates) allCoins = 462 SilverCoins = 462 / 100 = 4 (since both are integers, it drops the decimals). CopperCoins = (462 % 100) / 10 = 62 / 10 = 6 StoneCoins = (462 % 100) % 10 = 62 % 10 = 2 So 462 = 4, 6, 2. If using an alternative rates, say 100 = 1 silver but 50 = 1 copper as it says in the original, we can still get the right numbers: allCoins = 462 SilverCoins = 462 / 100 = 4 CopperCoins = (462 % 100) / 50 = 62 / 50 = 1 StoneCoins = (462 % 100) % 50 = 62 % 50 = 12 So using 100 = 1 Silver and 50 = 1 Copper, 462 = 4, 1, 12. You can't use StoneCoins = allCoins % _copperRate all the time. It works when _copperRate is a factor of _silverRate, but not otherwise. For example, if _silverRate = 74 and _copperRate = 7, then we have this: allCoins = 462 SilverCoins = 462 / 74 = 6 CopperCoins = (462 % 74) / 7 = 18 / 7 = 2 StoneCoins = (462 % 74) % 7 = 18 % 7 = 4 But just having StoneCoins = allCoins % _copperRate would be 462 % 7 = 0. 
So you have to set up the click handler at startup. Then in someMethodInsideMyClass you would instantiate a new ComplexGUIClass and pass parameters of the object information into the class. Then add newInstance.Geometry to the collection. Handlers have to exist before someone clicks on the form (usually set at startup). You only remove the handler when you no longer want to receive new events. Perhaps when someone clicks a 'All Done' button or after a certain number of clicks/events? But once it is removed, clicks can't make anything happen until you add it back.
Yep you're right. `.Result` is a blocking call. I originally had it with `await (await` but I figured since I'm focusing on the extension methods I should just keep it simple since double await looks awkward. I think you're right though, it's better to demonstrate the correct way to use `await`. I'll update it. Thanks.
There's that certain something in the name.
3.5 sp1 is still supported, so...maybe not.
You never realize how much you miss nullable and typed collections.
The netduino works great with .net and in a smaller form factor 
You could use dynamic proxy to automatically add it to every class, although it's probably overkill. I assume you aren't familiar with vim or emacs?
No, I'm not. I might have heard it somewhere before but that's all.
Seems like some really odd self justification. &gt; then deploy to a Linux VM managed by Microsoft. Why is managed by Microsoft so great, compared to managed by Amazon or Google? 
Xerox PARC workstations had a fraction of memory of these systems. This isn't the 80' anymore. 
It's great compared to managing it yourself is the implication. The article didn't even mention Amazon or Google at that point so I'm not sure why you think it's comparing them.
What are you trying to achieve?
Skip college and just get a job programming. That's what I wish I had done.
 var response = await client.GetAsync(""); var posts = await response.Content.ReadAsAsync&lt;List&lt;Post&gt;&gt;(); Problem solved. 
tl;dr: don't use IoC containers when you don't need it.
I could definitely live without the former. The latter, however...
Are there any good (and/or easy) ways to ensure that .NET 4.6(.1) is on a clients machine? What is your (community) solution? Do you always provide an MSI installer? Do you use ClickOnce? Or do you just call the web installer during your software installation/update?
I don't think that it really matters - as long as you're allowed to use Python 3 (with many features to improve code quality - and therefore the developers life) and have all the required libraries for it.
When you target 4.0 you also target at least 4.5, 4.5.1, 4.5.2 and 4.6 and probably future 4.x, since all these use the assembly version 4.0 and are not (immediately) distinguishable. No guarantees for e.g. .NET 5. 
Will it? It will not help you remember better. 
There are also some related behavioral changes between 4.5.2 and 4.6 in release mode, that we observed at work. 
&gt; Any suggestions? Yeah. Describe your actual problem and show us some code. 
You are focussing on the afterthought, not why it's great. It's great that you can deploy it to a linux server if that's what your network admin is used to. They are not restricting you to only working with Windows server.
Why would you force your dev (which seems to prefer C#) to use python? Why not just move to python and find new devs that actually enjoy to code in python? Alternatively, why not have two language in one app? Python can call .NET libraries, and it should be possible to wrap python libs to be consumed in .NET.
Tell your teacher that there is no need to use Filestream class. And that using File.ReadAllText and FileWriteAllText is much simpler in this scenario. Using Filestream would make sense if you want access to just portion of the file at a time and want to either read or write, but not both. In your case, you need to load whole file and load&amp;save to same file.
It definitely does. If you constantly have something nagging you that, for example, you've got a multiple enumeration of IEnumerable, you will learn to factor that into your design in the future. And improved IntelliSense helps you learn the .Net framework better. It might not be best for first time programmer, but if you understand core concepts like OP seems to, it really speeds you up.
I second that. C# in a Nutshell is definitely the best.
Your websites a bit broken, but really good read. It looks like your css is being echo'd out or something.
I would recommend checking the MSDN for FileStream: https://msdn.microsoft.com/en-us/library/system.io.filestream(v=vs.110).aspx The idea for you would be to create a FileStream from the file then tell it you want to decode the information as text (Set the encoding) and read the information. string[] raw_text = System.IO.File.ReadAllLines("c:\\StockFile\\stocklist2.csv"); Would turn into something like: string tmp=""; using (FileStream fs = File.OpenRead(path)) { byte[] b = new byte[1024]; UTF8Encoding temp = new UTF8Encoding(true); while (fs.Read(b,0,b.Length) &gt; 0) { tmp += temp.GetString(b); } } string[] raw_text = tmp.Split(System.Enviroment.NewLine); 
The example code is almost a copy of what is in the MSDN article and they have another part of the code where they write to a file as well.
That is barely an article.
Seconded. If you want to use c# for anything meaningful, you need to read this book.
both the clr via c# and the jon skeet book are ridiculously good. seriously. 
&gt;(since both are integers, it drops the decimals). Yes, I know. Wasn't necessary to explain that. But you're right. I can only surmise that I was thrown off due to the 500/100 change, and it was also late (for me). Or maybe it's just drain bamage on my part. I could have sworn last night your code wouldn't work, but I look at it now and it's perfectly correct. 
Depending on the complexity of data being exchanged, it might require socket connection etc (even though I will go with COM to expose non .NET component to .NET, which is good enough for Adobe and gazillions other companies). However, I smell non-technical motives here. Integrating wildly different technologies with webservice, COM or socket is a solved problem. Software house did it all the time. No technical arguments will sway one of the camp, the higher up need to take a decision and just force it for everyone.
No worries, heh. I've written this kind of logic quite a few times in various areas and still sometimes mess it up once or twice. And the parenthetical comment about integers was more for the general audience; I realized I forgot to mention it in the first comment, so I wanted to slip it in here just to be sure it was said.
/r/netduino would love to see some of what you've made.
Jon Skeet - C# in depth
Why? He's great.
I don't mind functional and like to mix it in with OO at times. My biggest complaint about functional in C# is the fact that the closures end up breaking your call-stack so if something goes wrong it is much more difficult to debug where you came from.
Or we can just use the Pi with Windows IoT. https://ms-iot.github.io/content/en-US/win10/samples/Blinky.htm
can people please stop posting blogs about trying to write functional programming code with an object oriented language? Could you please switch your language to haskell and post /r/haskell to write some real functional stuff? One should use the tools that fit the requirements best and not because they favor them.
While it is solved problem, there is huge overhead in creating and maintaining the API for communication. Especially if API for each algorithm is different.
He's good. He knows his stuff. He can show you a loop and explain it. But when it comes to anything more complicated he's not good at explaining why things are the way they are. He's just a commercial YouTuber and he'll delete negative comments and ban you from commenting on his channel.
If a platform independent IDE performs the same as Eclipse, Netbeans or IntelliJ, i'm more than happy with VS on just Windows.
&gt; closures end up breaking your call-stack How so?
That's what I purchased in Alpha! It's a great book.
Although I agree forcing a "pure" functional style into a pure OO language like C# or Java is counterproductive, why Haskell? If they want a functional language that's actually relevant, they should use swift, if they want functional style code in .NET, they have F#. Outside wanking about the purity of your language (it's so pure, they even removed productivity from the language!) what advantages does Haskell have over the other functional-first languages out there?
Yeah if I want GPIO with .NET I'll either grab a netduino or something from GHI. I don't need GPIO on a PC.
What? Really?
Good call. Will do exactly that. Thanks. Edit: Updated.
Oh ok :)
Object Oriented Programming is only effective when there is either a very small inheritance chain and/or well encapsulated functionality. You can have a long inheritance chain as long as its well encapsulated and exposed functions/members are easily understood and worked with. Long intheritacne chains made code incredibly difficult to trace, understand and work with. Wait I need to understand the IAnimal to understand IVertibrate to understand IFur to understand ICat to understand the Speak function? 
You're thinking of Xamarin https://xamarin.com/ You need to purchase an expensive subscription. But, it does what it says.
Python doesn't allow multi-processing - you can have more than one thread, but only one thread is allowed to run at a time. This is because of the [Python GIL](https://wiki.python.org/moin/GlobalInterpreterLock). To me, a language that knee-caps itself to disallow multiprocessing is dead from the start.
He said fun, not correct.
The unit tests are about the same number of lines and contain the same basic steps. The only real issue here with the OO is when a dev isn't familiar with the mocking framework. If they are, both sets of code are probably as just easy to write as the other. There is one feature that C# needs that would do the best of both worlds -- keep the OO style but get rid of the need for a mocking framework -- [implementing interfaces with anonymous types!](https://github.com/dotnet/roslyn/issues/13)
The purpose of questions is to learn...
Then next time be a learner rather than make authoritative statements about things which you later admit you knew nothing about.
You're sorry, but not for using Ruby on Rails.
I just did not enjoy my experience with .net web apps.
Funny, given that Smalltalk does support functional programming, as in lambda calculus.
Totally plausible.
&gt; can people please stop posting blogs about trying to write functional programming code with an object oriented language? Only when people like you stop get past your ridiculous notion that C# is an "object oriented language". That has never been strictly true and with the modern versions is downright laughable. 
What have you tried?
Using SSH or Serial Port to communicate with a micro-controller or the PI is ok to start, but in the end is a real hardware/usb solution designed for Windows and .NET better? Granted the raspberry pi 0 is super cheap.
The enclosure makes it bigger. But as you mentioned it is for development. so you can carry the device every where and it is protected.
Do yourself a favor and pick up the Concurrency in C# Cookbook by Cleary.
Ahh, I don't use Git-Hub too often so I forgot I could upload the CS file. Anyway I've done that: https://github.com/CEObrainz/Triple-Cross-System/blob/master/TCS.cs
I think C# In Depth is particularly apt in this case, because Jon goes through the history of the language and how it has evolved across releases. It would be a great introduction for someone who is already a competent developer, but who hasn't been around to experience the changes in both the language and the community surrounding it. In fact, I'm now kind of curious to see if there are books written in this way for other languages. Anybody know of any?
I would look into something like an nt service hosting wcf with a heartbeat.
&gt; compared to managing it yourself is the implication. The article didn't even The point sailed completely over your head. The "managed by Microsoft" part is pointing out the irony that MS is managing Linux VM's. 
&gt; F# is a functional (first) language, not a language with a functional style. Not to nitpick, but I never said that F# wasn't functional (first). I said that if you wanted to write code in a functional style on .NET, you can use the functional language supported by the runtime. I'll concede that Swift is not a functional language, though, I was wrong there.
i don't see anything wrong with it. It's aesthetic is all, but i don't see the harm.
Thanks, would you happen to have any links to an example? The heartbeat part at the end sounds... scary! :)
http://www.codeproject.com/Tips/824851/Detecting-Client-Connection-in-WCF-Long-Running-Se The above will give you example code that you could use to get up and running and addresses a common issue with ASP web applications and the user of the application no longer needing the resources of a remote system (essentially how to cancel a long running operation). Another option is you could have the endpoints hosting the WCF service call out and register themselves to a centralized database that the ASP web application uses to determine which endpoints are live, running operations etc.
If I'm using a Pi, then chances are the onboard GPIO factored in to why I wanted to use it, so I still wouldn't need this product. Honestly, it's a solution in search of a problem.
This is fantastic. Thank you!
I am using something similar: public class OpResponse&lt;T&gt; { public Boolean Success { get; set; } public String Message { get; set; } public T Data { get; set; } public OpResponse() { Success = true; Message = String.Empty; } public OpResponse(bool success, String message) { Success = success; Message = message; } public OpResponse(String message) { Success = false; Message = message; } } But I believe you should use Exceptions to return information when something is not going exactly the way it should, like when the user don't fill an important field: public class RespException : Exception { OpResponse OpResponse { get; private set; } public RespException(String text) { OpResponse = new OpResponse(false, text); } public RespException(String text, Object details) { OpResponse = new OpResponse(false, text, details); } } In OP example I would do something like: public void Method() { try { //logic } catch (SomeExceptionIKnow e) { throw new RespException("Some text informing what happened"); //you may also extend RespException if you need to make an specific logic for this error } } //OR public OpResponse Method2() { try { //logic } catch (SomeExceptionIKnow e) { return new OpResponse("Some text informing what happened"); } return new OpResponse(); } Using: try { Method() } catch (RespException e) { ShowErrorAlert(e.OpResponse.Message); } //OR OpResponse resp = Method2(); if (!resp.Success) { ShowErrorAlert(resp.Message); } I Hope I've helped somehow
It's more Notepad++ than it is an actual IDE.
AFAIK it does the same thing, although the debugger keeps better track of it all. It's not as hard to find what's causing the problem. 
Yep, Xamarin Forms still sucks but Xamarin Traditional is amazing!
The margins appear to be all goofy. http://imgur.com/6st1juS
Functional master race here. We are superior in every single way. Functional master race signing out. 
User Authentication can be scaffolded into your MVC app when you create it. If you want to roll your own it can be a bit convoluted. JSON data is automatically handled by the Model Binder in MVC, and File uploads are just HttpPostedFileBase arguments to your controller actions - neither of these is remotely convoluted. It sounds like your experiences with .NET web development are a bit out of date.
Write a caching system that has the following features: * Can accept any number of caches as long as they implement your cache interface. * Will look for things in every cache in order of priority * Can flush the caches in some intelligent manner, like removing all of a certain kind of object, or certain substring of keys. So you can flush some but not all things. Then implement an in memory cache and a redis cache for your cache system. Fire up a redis instance on Azure, or on the redis cloud service (small ones are free). This will get you practical experience with C#/interfaces, highly relevant industry skills, because databases are slow. Cache everything. 
This has a certain VB 6 flavor to it. (not a good thing) In VB every method had pretty much the same thing as your code - you'd have an On Error Goto statement where you'd log what went wrong. And then return a status/result to the caller. It junked-up your code pretty badly. If something goes wrong, let the exception bubble up until you get to somewhere that you can do something about it or a place where it shouldn't be allowed to continue to propagate, like an architectural layer transition or user action (ex: button click event). 
It is also quite slow on top of that. Makes it really tough to build performant systems.
Move towards async/await which uses the threadpool but reduces the management of the threads themselves. Depending on your data context (EF) you might have async methods too
[Oh no. No, no no. Please no.](http://meta.stackoverflow.com/a/280484)
Maybe check out an intro to EF video or book. Starting out by learning how to deploy it is going to leave you with a lot of unanswered questions, like the one in your post.
That's generally ok, but thread management is somewhat unnecessary. Parallel and Task both have a task pool sitting behind them, so you don't have problems with needing to manage the threads. That's the other half of the second option I suggested; you need a manager to pop the requests off and then hand it to the Threads to go.
recently did this after being out of market for about a year. google for "c# interview prep", you'll find a ton of info and if you're any kind of programmer, the refresher is just what you need. good luck! https://www.google.com/search?q=C%23+interview+prep
Hi! I use the EF a lot but I can't really help you out with your question as I just woke up. I have a very useful link for you about the EF and if you follow the tutorial, you should be able to understand everything. If not, send me a PM and I'll help you out further. http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application
I'm using NLog and this seems to work similar to that. I can modify rules on the fly, add new ones as needed, dynamically change rules, create filters, etc... And Loupe/Gibralter support for NLog is pretty cool. What's different about this framework?
The Entity Framework is an object relational mapper that turns your database into Entities. To do this you need to create models for your tables (called `Entities`) which are just a class with a bunch of fields in them, which I am sure you have picked up already. Entities need to know two things: 1. How they relate to the database (DbContext), and 2. How they relate to other entities (Entity type configuration) and other metadata Number one is easy. All you need to do is make a class which inherits from `DbContext` and add a `DbSet&lt;T&gt;` property to it so that Entity Framework knows how to select from your list of entities, and thus it is made available for anyone who `new`s up one of your DbContext classes. There are technically two ways to achieve number two. One is using Attributes, and the other is using EntityTypeConfiguration classes. Attribute and fluent mapping have overlapping functionality but they aren't verbatim copies. Some things exist in either of them which makes things confusing. When working with EF contexts, I usually go by two rules: * `EntityTypeConfiguration` classes are for mapping keys and relationships, and * Attribute mapping is for describing validation, column properties and other table metadata. It is much easier to use data annotation attributes such as `[Required, StringLength(128)]` for validation and column properties directly on the model field itself, making it very clear which validation mechanisms and column characteristics are applied on each column in your table to anyone who reads your models. Regarding `EntityTypeConfiguration`, when Entity Framework bootstraps itself it calls a method in your `DbContext` class called `OnModelCreating`, which is at the point where EF must know all about your entity models. It knows what they *are*, it just doesn't know how they relate to each other so it relies on code inside this method to tell it what are navigation properties, and what are the cardinality of your relationships. `EntityTypeConfiguration`'s purpose is straightforward: to configure the entity type. EntityTypeConfiguration is a generic class, so it must describe your model. I like to keep my EntityTypeConfiguration classes in separate files: /// Models/MyEntity.cs public class MyEntity { public int ID { get; set; } public string StringField { get; set; } } /// Mapping/MyEntityConfiguration.cs public class MyEntityConfiguration : EntityTypeConfiguration&lt;MyEntity&gt; { public MyEntityConfiguration() { HasKey(p =&gt; p.ID); // all other relationship declarations go here via calls to HasMany() et al. } } It relates to your DbContext class inside the `OnModelCreating` method which you need to override if you are going to configure your DB model this way. All you really need to do is add **instances** of your EntityTypeConfiguration classes you made to the model builder to let EF know about your relationships. I say **instances** here because you have put all your relational mapping code inside the constructor of your EntityTypeConfiguration classes, as shown above. /// MyDbContext.cs protected override void OnModelCreating(IModelBuilder modelBuilder) { modelBuilder.Configurations.Add(new MyEntityConfiguration()); } And bam. EF now knows about your relationships and keys.
hey thanks for the response, but my main question is actually if you know good paper / physical books for C# and C# GAME dev 
I don't have any book recommendations off the top of my head, I just wanted to say that you'll want to keep in mind moving forward that [XNA](https://en.wikipedia.org/wiki/Microsoft_XNA) has been discontinued as of 2013 (though that isn't preventing anyone from still using it (see Magicka)). There does exist DirectX for Managed Code, but again that is no longer supported by Microsoft either. That being said XNA is still a great place for a beginner to all this stuff to start because it provides a simplified and easy to understand toolkit for common 2D and 3D programming tasks, which I feel makes it easier to understand the underlying concepts to 3D programming without necessarily needing to understand the gritty details of DirectX. Plus, there are tons of tutorials and online resources out there to help anyone wanting to learn it (which is how I learned!) Edit: If you want something like XNA but still in active development, check out SharpDX or OpenTK! Both have a version of the toolkit I mentioned above.
Honestly, I'd suggest Unity3D. It's a real engine that ships real games, and supports all scripting in C#.
So this just fills in the form on http://www.youtube-mp3.org/ and downloads the file they create.
XNA had been adopted by some guys and is now known as MonoGame and is still under active development. You can build games using OpenGL or DirectX and it enables you to make games for Android and Linux and OSX I imagine. All with minimal change to your code. EDIT: Also windows, obviously. 
As another here suggested, I would say learn it in Unity. It's a fun engine to use and C# is its strongest language. With even the simplest of code you'll be able to get something going that makes you feel good, and it really helps keep you interested in learning more and seeing just what you can do. The Unity website has extensive documentation and coding examples you can refer to while learning. Here is a great website that also helped me out a fair bit: http://csharp-station.com/Tutorial/CSharp/SmartConsoleSetup.aspx Also: https://web.archive.org/web/20140626101041/http://unitygems.com/
Thx for the reply, really helped me.
Unity and MonoGame(formally XNA) are the best for C# game devs. 
Use monogame instead of xna.
Is that code the quality you strife for, /u/AstuteAndrew?
&gt;That's generally ok, but thread management is somewhat unnecessary. But you'd still have to check on which threads are busy. Or you'd have to use some kind of logic to determine who gets the work, as you said. If you simply create a thread for each request, and increment a counter when it starts and decrement it when it ends, you wouldn't need to do anything more with the control thread than check if the counter is over a number.
Yep I read the release notes wrong 
Normally what happened on my laptop, I had to goto Add/Remove Programs and repair 2015. Once that finishes, restart, run CCleaner (or clear your temp/cache) and run the updater/installer as admin again. When it says "files are corrupt" download them from web.
Lolololol ur a beginner, idc The fact it still works is something else u can never get to my lvl
I see your *level* when looking at your code.
thank you so much for the effort of helping me...
Thank you. I will try out Pluralsight this time. I feel I am making progress.
I remember, I already reviewed your sBot project: https://www.reddit.com/r/csharp/comments/381je6/feels_good_to_be_open_source/crrkl23 You didn't improve on most of those points.
Comments like this are not in your favor, they just look childish. Some of your style are gear towards having only one developer and even then it is bad. Calling something Form1, Form2 etc are bad names, because I as an external person do not know what they do, and I can't see it without opening every file and looking. It also looks like you have dependencies between your Business logic and your UI, so what if you want to switch from WinForms to WPF?
I have to say that AngularBeginner's comments are pretty valid.
https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx Sign up for dev essentials. 6 months free pluralsight. I learnt entity framework from PS and it is a very good course. EDIT: more info 
All the things you give as hard are easy ( Or so do I think :) ) It is all handle by the ASP.NET framework 
I also like the using approach and find it easier to use, but what you don't get with it is the ability to automatically set the "failed" data point in case of an exception. 
&gt; because I as an external person do not know what they do It's not only about external persons. Also about yourself when you look at the code months later.
Did it this morning! Best,
Well everything he said is barley bout the code itself, its about uploading a project. I rather leave default names for forms than renaming them. I guess I am oldschool by using default. I respect the critism then, but now unless you say something bout the code itself, naming conventions means nothing tbh
Update- they intend to "sit me in front of Visual Studio," talk about things like "interfaces and polymorphism" and expect that I'll have "some LINQ." Thanks for the ongoing help!
Like this? Or are you talking about something else? The ambient/context Story injected from OWIN middleware? using(var story = Storytelling.New("Once Upon a time")) { try { story.Info($"In the land of {nameOfLand}"); //TODO: Do some work story.Debug("I did stuff"); //TODO: Some more work story.Info("All done with my story"); } catch(Exception exception) { story.Fail(exception); } }
I always use the Reddit is fun app so the site style doesn't make any difference to me.
was it vs 2015 Community? The installer kept telling me that it doesn't like windows 7. It seemed to require windows 10.
I think that for *learning* this is still very much ok. Even if it is an old version, the syntax and majority of *stuff* will be similar enough that it won't adversely tax the learning process like trying to learn two languages at the same time.
Code-first is not as bad as it used to be, and if you're starting from scratch with a relatively simple data model, is not a terrible way to go anymore.
I tend to look at the coding related subreddits more often on my dev machine whip I'm working. Either way, there's really no reason not to update the CSS. It's such an easy and low effort way to elevate the sub to something more than it is. Of the top 1000 most popular subs, how many do you think use no additional CSS? Here's my thoughts - best case scenario is the style gets updated and the sub looks more attractive and it helps grow the subscriber base. Worst case scenario is the style gets updated and nothing happens. There's literally nothing to lose here. 
This could be fair cool when run as a decorator, however running all prod code inside a logging wrapper feels a bit as though the prod code is being spoiled by cross cutting concerns. The github repo also seems to have very few tests which doesn't give me much confidence. Nice idea though - I bang on about logs telling a story at work all the time.
Correction: async/await make it easier to write asynchronous code but have nothing to do with the threadpool. Do not assume that when you *await* something the rest of the code from that point on automatically runs on a different thread or you might get burned.
Wait... Isn't WebClient just a wrapper for HttpClient? Or am I getting that mixed up with something else?
That's all pretty basic, entry level stuff. You'll be fine.
no, webclient has been around since .net 1, while httpclient is from 4.5
Same boat. We used MySql, but there were so many bugs reported years ago that haven't been fixed - we had to switch to Postgres. Due to the conflict of interests, is Oracle any better I wonder. 
Oracle offers its own EF via NuGet. https://www.nuget.org/packages/Oracle.ManagedDataAccess.EntityFramework/
How should I start?
Will have a look into this too, thanks! Edit: This sounds perfect! Hopefully implementation won't be overly complex, since I'm hoping to keep it simple :)
You're very welcome, dude.
While I agree with you, I tend to not leave much up to the "black magic". Too many times I have had to read the EF source code to find out the black box behaviour. Admittedly a lot of it was borne of my naivity of how it works, but I much prefer to control as much of the behaviour as possible.
Visiting different subreddits that all look different is disorienting. I don't like custom styling anywhere for this reason. It's the epitome of inconsistent UI.
They are offering 1 demo lesson, not lessons.
The code in the *pictures* is too small for me to read. Come on now.
Make sure you have the latest windows updates. My installation kept hanging until i got all of windows updates installed and restarted my computer.
I second that, love the idea of grouping logging into contexts, and choosing what to log, regardless of log level, as a whole based on that context. But to alter production code to run inside a logging lambda seems invasive. I was thinking it would fit nicely to apply this kind of cross-cutting concern into a WCF extensibility point like IOperationBehaviour. However, I'm afraid CallContext doesn't exist yet at that point. Also, there seems to be some issues with shared CallContext on thread reusage for WCF services hosted on IIS : http://mycodingnotebook.blogspot.no/2015/03/working-with-callcontext-in-wcf-with.html?m=1 Anyway, would it be possible to set up reuse of existing logging, like add a log4net appender that reroutes to Story? 
&gt; One should use the tools that fit the requirements best That's why we don't use haskell. 
Thanks for the feedback- You're right about the lack of testing- working on it :) Regarding use in production code- This framework originates in a multiple libraries that I've been using in production for ~2 years now. While in no way perfect- I found the approach to be very insightful and it allowed me to experiment with different types of handlers such as- * A latency handler which fires when an observed tasks goes over a configured threshold. * A generic performance counters handler (takes story.name and story.elapsed and emits: total ops, ops/sec, average run time, # succeeded, # failures, etc). * An analytics handler- emits analytics data based on data set on stories. ..and more.. Regarding the ugliness- I've been mostly using the "ugly wrapper" to create stories in select areas such as an OWIN middleware or command dispatchers (I'm doing CQRS). Once a story has been introduced into the context, you can use it inside nested methods by calling the static methods on Story. That for me took away most of the ugliness but there were special cases where I explicitly had to create a story in order to observe a block of code which was super important to me. If you have any suggestions on how to improve the framework and make it more accessible I'd like to hear more about it. Thanks!
I simply googled "download html code c#" and similar queries and it spits out WebClient examples. I haven't seen what you put there, so it could work! Thank you!
I don't know if this was already mentioned in the list of what you saw, but this also works (At least on my machine). WebClient wc = new WebClient(); string html = wc.DownloadString("http://jayski.com/schemes/2006/24cup.htm"); Console.WriteLine(html); 
If report generation is CPU-bound... - Implement `static Report GenerateReport(ReportRequest request)`. - Whenever you get a request, Task&lt;Report&gt; task = Task.Run(() =&gt; GenerateReport(request)); tasks.Add(task); - At some point, `await` the tasks and log exceptions. If report generation is IO-bound... - Implement `static async Task&lt;Report&gt; GenerateReportAsync(ReportRequest request)`. - Whenever you get a request, Task&lt;Report&gt; task = GenerateReportAsync(request); tasks.Add(task); - At some point, `await` the tasks and log exceptions. Read [Task.Run Etiquette](http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html) as many times as necessary.
Thanks man your answers where insightfull.
EDIT: removing my trolly question
ASP.NET itself has no concept of what databases are, as they are entirely orthogonal to the problem space it addresses: providing a framework for web-based applications. So, what you need to do first is get Entity Framework connecting to your database. Oracle provides [ODP.NET](http://www.oracle.com/technetwork/topics/dotnet/whatsnew/index.html), which adds Orcale database providers for ADO.NET (and thus EF). Everything you need to configure EF will be at that link. There's nothing ASP.NET-specific that you need to do.
So the problem is this line `System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\Users\richard\Desktop\Programing\MaxResults.txt")`. This creates a new StreamWriter, but it is set on rewrite file, so everytime you write something to it, it deletes what was in it. Try changing it to `System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\Users\richard\Desktop\Programing\MaxResults.txt", true)`. This sets it to append mode, so it just adds on to the file instead of rewriting it.
There is the standard Sockets library within .NET that you can use. No need to use any external libraries. A link to get started: https://msdn.microsoft.com/en-us/library/w89fhyex%28v=vs.110%29.aspx Note that this is Tcp, and will need some adjustment to work for Udp.
Upvote for good advice.
Good advice, but it falls short of explaining the reason for it. A using block, actually wraps your code in a try/finally which makes sure that Close/Dispose is called on your disposable object. Basically, it makes sure that dispose is called. 
I definitely agree with using TAP vs direct threadpool, don't get me wrong. I was just trying to say that you could have a method like this: public Task ExecuteSynchronously() { //bunch of code return Task.FromResult(false); } Which will execute synchronously because *await* does not spin a new thread/use a threadpool thread. You seem to know the drill, but I've seen a lot of people make this assumption and just wanted to make sure that OP didn't get confused.
Not exactly women, but there is the DigiGirlz program: http://www.microsoft.com/en-us/diversity/programs/digigirlz/default.aspx
I had tried that at one point, too. It did work with Jayski, but not with Racing-Reference, which is the main focus.
As a man I feel discriminated by this. Where is the list of initiatives for men in the MS community?
No meninism here please.
Best guess, you're missing the column definitions of `tableName`. It should look like this: INSERT INTO tableName (col1, col2, col3) VALUES ('val1', 'val2', val3') I'd highly recommend downloading SQL Express for situations like these. You'd spend more time trying to figure out the generic error as opposed to SQL Studio which is way more helpful.
This is totally doable. There are a few particular gotchas, like EF doesn't always choose the correct type (short/int/long) for oracle sized numerics (number(5,0)), which can cause overflow on hydration; It can be difficult to remove unneeded fields from the edmx; the sql generated is not always that great. But I've used this stack for a number of projects.
Thanks Verschlimmbessern I've added it there :)
Sorry for that. :(
No, you can't directly use it as a variable name. C# is strongly typed. However, you could create a dictionary of &lt;string, object&gt; use the string as the key and enter "w/e" as the value. var dict = new Dictionary&lt;string, string&gt;(); dict.Add(textbox.Text, @"w/e"); //If textbox was "Hello", this will print "w/e" Console.WriteLine(dict["Hello"]); Do a lot of error detecting, and remember there can't be duplicate keys in a dictionary.
Line 15. That's not how you declare and set a variable in c# at all. The colon is causing all the errors you see, but really it's just that line that's causing all the issues. 
I probably should. I'll just stick to Javascript for now, untill I learn more about C#. Thanks for the help though.
You can save yourself some headache by using a const string to hold the same data that you currently have in that hidden text box. I would also recommend checking out the StringBuilder class, as normal string concatenations in loops is a very bad code smell. https://msdn.microsoft.com/en-us/library/system.text.stringbuilder(v=vs.110).aspx
This isn't C# related. edit: Whoever downmodded me, please rethink yourselves, because you're wrong to do it. I'm quite right to state she misposted here.
The configuration is indeed different in ASP.NET 5 though, due to project.json vs web.config and registering the Oracle provider. That's really the only piece that's unclear to me.
That sounds very cool. Are there references or samples you can recommend to get started? Maybe a pretend real-world use case that I could follow while I do this? To say I did it for a particular scenario, I mean. That's easier for me to grok and for an employer to get. In other words, what is an example of where this might be used? Thank you. Your idea is very compelling.
Hello my friend :D - I see your point... We just would like to collect events/initiatives where women can feel comfortable to share experience with others (men and women).
Much better, logo is blurry though.
We're not going to do your homework. Show what you've done/tried so far.
Here's one problem to hone in on.. This line: `peerEvals[row, col] = double.Parse(inputFile.ReadLine());` You're basically saying "read one full line from the input, parse it as a double, and assign it into the array". This is where it is helpful to use the debugger and separate your values a little. i.e var line = inputFile.ReadLine(); peerEvals[row,col] = double.Parse( line ); So what is going to be in `line`? A full line of input like `1.0,0.8,0.9,1.0,0.6`. That's not going to parse as a double. Look into the `string.Split` method.
Seriously. At first I was expecting a missing parenthesis or misunderstanding ==.... then I saw a Unity namespace. Good on you OP. Keep at it!
Sounds like you did something else before rebooting, tbh.
project.json is not a replacement for web.config. It is part of a new type of ASP.NET project, based on the new [Visual Studio Common Project System](https://github.com/Microsoft/VSProjectSystem). project.json is the new place where you declare your application's NuGet package dependencies, build configurations, etc. ASP.NET 6 uses an entirely different configuration model, which is detailed [here](http://aspnetmvc.readthedocs.org/projects/mvc/en/latest/migration/migratingconfig.html).
What IDE are you using? I like the inline error popups!
So I am trying threadpool and still seem to run into the issue of threads working on the same request id more than once.. Example of code: public static void ManageRequest() { reportrequest = ReportRequest.GetReportRequests("PROD"); var reports = reportrequest.Count; WaitCallback wC = new WaitCallback(RunThreads); ThreadPool.SetMaxThreads(1,1); ThreadPool.QueueUserWorkItem(wC); } static void RunThreads(object threadcontext) { ProcessRequestListener2(); } public static void ProcessRequestListener2() { try { foreach (var REQ in reportrequest) { var completedStatus = REQ.ReportRequestId; Log.WriteLine(REQ.ClientNumber); REQ.PrepRange = 999; REQ.Environment = "PROD"; ReportRequest.UpdateCompletedStatusToRun(REQ); if (completedStatus == REQ.ReportRequestId) { completedStatus = ProcessRequestNew(REQ); } ReportRequest.UpdateCompletedStatus(REQ, completedStatus); } } catch (Exception ex) { Log.WriteLine(ex.Message); } } 
Why exactly would you want that? Variables are simple containers for data. There name only serves a purpose during design time. Why would you want that name to be dynamic at run time?
It appears to be JavaScript.
Is the button click hooked to that event?
Dude, you're awesome.
You mean like a safe space?
Pretty good, should have the revealed module pattern too, imo.
Use LINQ power :) Read all lines into a variable, so you have array of strings, and apply Select to it, like that: var values = lines.Select(line =&gt; line.Split(',').Select(double.Parse).ToArray()).ToArray(); You will have an array of arrays of double. Nice and clean 
Post your code? What have you tried? Have you looked up any documentation on MSDN for the GUI components? Have you googled this question?
 private void subietm1ToolStripMenuItem_Click(object sender, EventArgs e) { UncheckOtherToolStripMenuItems((ToolStripMenuItem)sender); } public void UncheckOtherToolStripMenuItems(ToolStripMenuItem selectedMenuItem) { selectedMenuItem.Checked = true; // Select the other MenuItens from the ParentMenu(OwnerItens) and unchecked this, // The current Linq Expression verify if the item is a real ToolStripMenuItem // and if the item is a another ToolStripMenuItem to uncheck this. foreach (var ltoolStripMenuItem in (from object item in selectedMenuItem.Owner.Items let ltoolStripMenuItem = item as ToolStripMenuItem where ltoolStripMenuItem != null where !item.Equals(selectedMenuItem) select ltoolStripMenuItem)) (ltoolStripMenuItem).Checked = false; // This line is optional, for show the mainMenu after click selectedMenuItem.Owner.Show(); } I asked my teacher but he was no help at all. Yes I've googled the question many times. 
JavaScript developer here turned C# (originally Java) If you're trying to use OO javascript, outside of the context of a framework like backbone, you're gonna have a bad time. Typically, most javascript is functional. We treat objects as a collection of functions. (Underscore/lodash is a good example of this) Because it lacks type safety you can treat objects as just containers of garbage data and as long as you set up your functions correctly OO is, generally, a waste of time. 
Well, for one thing there's no need to use Linq here. You already have a collection (selectedMenuItem.Owner.Items) so just loop through that collection. You basically have a nested loop here: your outer foreach and the inner Linq query. If you eliminate the Linq query which is just adding complexity and inefficiency, you might find it easier to debug the code.
I think its MonoDevelop
I'm sorry, I'm still new to C# and that was a piece of code I grabbed online since I couldn't figure out how to go about it. I don't know what part of that is Linq. I would ask my teacher but he has been no help at all
Hey guys, thanks for the fast answers. Home i dont have VS... so now i could test ur commentaries. I dont think you really understood how i meant to do it so i took an example screenshot : http://imgur.com/Y8ngNl2 @FallenWyvern : Yeah your right. There aren't as many options you get in the new versions, especially in CE. For example there are no autocomplete methods given. @mconeone : I dont choose to work with this Framework. I have to cause the programm is going to be exportet into a CAB and then on a "smartDevice" wich is an little hand scanner from "Datalogic"(Memor x3). In the ende the datas will be saved in an .txt with the right form to get easily a .csv . The master datas are also in .csv and the mathing will be done in Excel....
Garbage data for a garbage language. ;) 
Have patience with him. The blog is called "Learn .net with me", so he clearly just learned C# 6 and he needed to share the love.
There are some errors in the article: 1. Some of the equivalent syntaxes regarding null-conditional, aren't actually equivalent since the variable isn't declared or initialized in the "before" scenario. 2. In the getter-only auto-property the syntax for the "before" scenario is wrong; there is no "get { }". Also, "private set" is not equivalent to no setter. In the latter case, the backing field will be made readonly and can thus only be accessed from constructors. Not an error, but in the multiple null-conditionals it's a bit silly that the "before" scenario uses nested ifs instead of two conditions with &amp;&amp;, no? :p Kinda makes the "before" worse than it needed to be.
Format your code better. Press the "fomatting help" when posting reddit comments, and read that.
You are aware that meninism is satire of feminism, right?
Also note that cmbTest.Items.Add("1"); and cmbTest.Items.Add(1); is not the same. You may need/want a `.ToString()` after i.
You probably mean "something like Eval" rather than invoke, but ok. Things like that are possible, although a bit complicated. As /u/AngularBeginner says, you should probably describe your problem :)
&gt; would ask my teacher but he has been no help at It's tertiary education, not high school. Why don't you teach yourself? Try resources like Pluralsight, Dreamspark, stackoverflow and even youtube. Once the course is over, that's what the rest of us do every day. Did deadblade97's response help?
Such a beast exists (where the sense comes from side effects)
ive been putting it off now for a while, but i should learn it.
To be completely precise - result1 = "11" (it's a string, notice double quotes), result2 = 2 (it's an integer).
I've introduced an interface in our code that internally calls SeriLog's Log.ForContext and then logs the message with that in order to tell a story based on the correlation key, e.g. public void Write(string correlationKey, LogEventLevel level, ... var log = Log.ForContext("CorrelationKey", correlationKey); log.Write(level, message, variables); which I considered a cleaner way of masking the implementation of the logger. Is there a concept of retrieving an ongoing story in a similar manner to retrieving a context logger in SeriLog? The only issue would be its disposal and the logging of the overall time, however that would be implicit in the final log statement's time vs. the first one for the story.
Learning C# might be a good start.
I'm on it!
I will try but I think it's too late already.
Thanks, i've put in an example. Ignore the syntax please, i'm on my phone.
keep the declarations for Resinovic and r1a where they're at, but do the variable assignment inside Form1's constructor. see: http://stackoverflow.com/questions/14439231/a-field-initializer-cannot-reference-the-nonstatic-field-method-or-property
This line is the problem: Razred r1a = new Razred("R-1.a", Resinovič); You're using variable Resinovič to initialize r1a, and you can't use an instance variable to initialize another instance variable. This is not allowed as there is no guarantee that Resinovič will be initialized before r1a and you may get a NullReferenceException. Move the variable assignments into the constructor. Here's some additional info: http://stackoverflow.com/questions/14439231/a-field-initializer-cannot-reference-the-nonstatic-field-method-or-property https://msdn.microsoft.com/en-us/library/5724t6za.aspx
The whole internet must be incredibly difficult for you then.
How is flatten diffrent from SelectMany? Also when working with IEnumerable you should use yield return
`each` already exists in .NET as `foreach (string name in names) { ... }`. It is deliberately not added as an extension method (i.e. `.ForEach()` or `.Each()`) because LINQ expressions should not have side effects- they are lazily evaluated. Unless there's something I don't understand about `each` from Ruby.
what does `yield return` do?
Yeah, I'll have to look in to that - I'm not sure the benefit of adding an alias to iteration is worth it atm.
Firstly, none of these appear to be extensions - just static util methods. That may be your intent but calling them 'extensions' implies extension methods (and I think that's probably what you actually want). As for some of the others, I have some further comments/questions: * Is `Create()`/`NewIntsanceOf()` meant to only work for generic types? Why do they have different names? And what do they do differently or better in comparison to the `Activator` class? * I believe the method you're looking for instead of writing your own for `IsA()` is [IsAssignableFrom](https://msdn.microsoft.com/en-us/library/system.type.isassignablefrom%28v=vs.110%29.aspx) * I'm not convinced about the usefulness of your reflection wrappers - are they just there to bring ruby nomenclature in to C#? * `FirstOrDefault()` has an error- `T` is not constrained to the class type, and therefore it is possible that the default for `T` is not null (imagine a list of ints). Be warned that even if you change the check from `== null` to `== default(T)` I believe the behaviour would still not correct. Here is an example of what I think would happen: `int[] ints = { 0, 1, 2, 3 }; int fod = FirstOrDefault(ints, i =&gt; i &lt; 10, 234); // fod is 234` * And finally your `Flatten()` is a bit weird. Use `SelectMany()` in the implementation; and specify `T` as `IEnumerable`. Here is a copy of my own `Flatten` method (non recursive, however): --- /// &lt;summary&gt; /// Flattens the collection of enumerables of type &lt;typeparamref name="T"/&gt; into a single collection. /// &lt;/summary&gt; /// &lt;param name="this"&gt;The extended IEnumerable&amp;lt;&lt;see cref="IEnumerable{T}"/&gt;&amp;gt;.&lt;/param&gt; /// &lt;returns&gt;An enumeration of all elements in all the enumerated collections.&lt;/returns&gt; public static IEnumerable&lt;T&gt; Flatten&lt;T&gt;(this IEnumerable&lt;IEnumerable&lt;T&gt;&gt; @this) { if (@this == null) throw new ArgumentNullException("this", "Flatten called on a null IEnumerable&lt;IEnumerable&lt;T&gt;&gt;."); return @this.SelectMany(containingCollection =&gt; containingCollection); }
Ye, that's what I figured too, hence the specific mention of readonly with it :)
I'm more than open to a pull request for all of these things, if you have the time. As for extensions vs static helpers: here is the entry point for all the methods: https://github.com/NullVoxPopuli/csharp-extensions/blob/master/Extensions/Methods.cs They all contain the `this` keyword on the first parameter, making it an extension method (or at least, what I believe to be an extension method) - Create / NewInstanceOf is a work in progress - it started when I was trying to duplicate an object that I didn't know the type of - but I'm not doing that anymore in my projects, so I sort of left it as is for now. - I'll look in to that - I'd love to simplify the logic for `IsA` - They are partially for bringing ruby nomenclature to c#, but the most usefulness comes from the `RespondsTo` / `Send` methods, especially for unit testing non public methods / property stuff (I know some people think private stuff shouldn't be tested, but I respectfully disagree -- the more (good, quality) tests, the easier it is to track down bugs) - FirstOrDefault: That's interesting, I'll look in to it - Is SelectMany recursive?
I've developed a couple using Xamarin Forms. Dead easy and I get ios and android for free!
Good luck
&gt; As for extensions vs static helpers: here is the entry point for all the methods I see- I didn't spot the entry points. It isn't really standard practice to write the extension methods as stubs, however. If you're worried about code reuse it is possible to call an extension method statically anyway. &gt; Create / NewInstanceOf is a work in progress - it started when I was trying to duplicate an object that I didn't know the type of Cloning objects is a rabbit-hole problem (i.e. once you go down that route it gets more and more tricky)- especially deep clones. If you're using code that requires cloning, either make custom types and give them a `DeepClone` or `ShallowClone` method (or both); or don't make your methods extension methods, because it doesn't make sense to clone a lot of types (e.g. what happens if you clone a NetworkStream etc?). That's without even considering cyclical dependency graphs etc. If you don't know the type at compiletime that's a bit weird but could be legitimate - still not a good candidate for an extension method though. &gt; but the most usefulness comes from the RespondsTo / Send methods, especially for unit testing non public methods / property stuff That's fine, it's up to you how you do your own unit testing; but again these shouldn't be extension methods; just static util helper methods in your test project(s). Reflection-based methods should not appear on every variable you'll ever use just for the sake of unit testing (and also you shouldn't be using dynamic that much at all unless you're integrating with a dynamic lang). &gt; Is SelectMany recursive? No, but you should still use it in a recursive implementation. On a side note, I actually prefer a non-recursive implementation, myself; as I (as the user of that method) can choose to flatten all the way down or not, depending on my need at the call-site (I may only want to flatten the top level, for example). Best of luck.
Look up the division and the modulo operator. Then divide by 10 with both of them. Try play around with both until you figured it out.
My school only taught VB6, and that wasn't even until the last computer class. I wouldn't expect too much out of a high school "CS" curriculum.
string NameofVehc; string ModelofVehc; int AgeofVehc; int CcofVehc; string FuelofVehc; int CostofNewVehc; string name; //Doing the work Console.WriteLine("Please enter your name: "); name = Console.ReadLine(); Console.Clear(); Console.WriteLine("Hello: " + name); Console.WriteLine(""); Console.WriteLine("Press enter to continue"); Console.ReadKey(); Console.Clear(); Console.WriteLine("Enter the Model of your vehicle: "); NameofVehc = Console.ReadLine(); Console.WriteLine("Enter the Name of your vehicle: "); ModelofVehc = Console.ReadLine(); Console.WriteLine("Enter the Age of your vehicle: "); AgeofVehc = Convert.ToInt32(Console.ReadLine()); Console.WriteLine("Enter the Cc of the vehicle: "); CcofVehc = Convert.ToInt32(Console.ReadLine()); Console.WriteLine("Enter the Fuel used in your vehicle: "); FuelofVehc = Console.ReadLine(); Console.WriteLine("Enter the Cost of the vehicle new: "); CostofNewVehc = Convert.ToInt32(Console.ReadLine()); Console.Clear(); //outputting the input from the user Console.WriteLine("┌────────────────────────────────────────"); Console.WriteLine("|Vehicle Name: " + NameofVehc ); Console.WriteLine("│Vehicle Model: " + ModelofVehc ); Console.WriteLine("│" + AgeofVehc + " Years Old" ); Console.WriteLine("│" + CcofVehc + " Cubic Centimeters" ); Console.WriteLine("│Fuel Used: " + FuelofVehc ); Console.WriteLine("│Cost of Vehicle new: " + CostofNewVehc ); Console.WriteLine("└────────────────────────────────────────"); Console.ReadKey();
Why use WinForms? It's an old, clunky technology. Would you care to elaborate on the project you have to do, like requirements or field of study?
I appreciate the article. The underlying fundamentals are important to understand. I think I will start _writing_ OO JavaScript with TypeScript though. 
Well, yeah. I guess sarcasm doesn't convey so well on the interwebs.
What else do you recommend? Here is roughly translated version: &gt; *Create a graphic editor, which allows fast creation of flowcharts for teaching a programming. Emphasis is placed on easy diagramming. The program should include a variety of flowcharts. The diagram should be created by placing signs on the imaginary board. Flowcharts would be connected with "rubber" lines between them. The editor should have place where you can write code for easy viewing. The resulting diagrams are stored in a standard graphic formats, eg. * .bmp, * .png, Etc... Diagrams should be printable. It should be possible to format the background of signs and texts written to them (Standard font editor), should be able to change the font, font size, font style or color.*
What's wrong with asking your teacher or your fellow students?
You followed the link, right?
Yes. And I read it.
That's an unintelligent comment to make, and sounds very defensive. I'm not targeting your work; there's nothing to be defensive about. I don't expect all websites to look the same, but websites should generally be consistent within their own style.
I'm slightly confused. Are you saying that you have to do it in WinForms because of your school requiring that? Because it's certainly not something you can't do in just about any language. Mind you, the description of the project that you posted in another comment makes it clear that his is **ABSOLUTELY UNACCEPTABLE** as a HS level project. I'm not sure if you quite realize how difficult this project is. Like, it's a lot of work for a skilled programmer. You should consider it undoable for a HS level programmer. I would advise talking to your teacher about getting an alternative project or something. I think your description was either made by a non-programmer, a really poor programmer (who somehow hasn't put thought into it), or someone with a very specific library in mind. It's just plain not a good assignment and your teacher should feel bad for even considering it.
https://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners
First and foremost, do not name your posts like this. Use appropriate naming. You need to put more effort into asking questions. This is a serious shortcoming of yours and one you must takes steps to fix, since asking for help in an intelligent way is vital to modern programming. Well, do you know what methods are? Can you at least take a guess on how you'd do it, and post what that looks like (even if it's not working, as then we can point out what may be wrong). I think you need to review the basics of your textbook or notes. This should absolutely be covered there. It's not possible to not use methods (`Main` is a method), so you should at the very least have an idea of what they are.
i don't really see why. learning how to program has little to nothing to do with the language used. my intro to programming class in high school was taught in pascal on 5+ year old computers at the time and it was just as good as anything else for learning basics like conditionals, loops and functions/procedures. it also did a pretty good job at letting us kids know if we were interested in taking ap computer science (taught in c++). if it isn't broken, don't fix it. updating curriculum and computers and training teachers is extremely expensive for schools.
http://www.codeproject.com/Articles/22952/WPF-Diagram-Designer-Part
The Go language enforces the paradigm that you follow. There is not prefix increment operator and it is a statement, not an expression. This means that it doesn't return a value.
Regex, its a bitch to learn, but can be very useful in parsing strings.
Please do no use non-ascii characters in names. It's against the law. Those people who use the puppy and poo characters as variable names will be responsible for WW3.
P.S. take note of the license applied to the code. &gt; 5\. b. You agree not to advertise or in any way imply that this Work is a product of Your own. I would speak with your teacher and be prepared to make *measurable* improvements on the code you find here. Aside from being technically plagiarism if you use it as your project (IMO, don't reinvent the wheel if you can help it), the license explicitly states you can't pass it off as your own project. Please follow the license, it's what separates coders from barbarians :) It will be up to your teacher whether it's acceptable to use this project as your base, but I would hope he/she would allow you to improve on it as your project!
Am I missing something? My first thought was cast the number to a string and then check the length of the string...
My thought was that there might be alpha characters in there, so you'd have to iterate over the contents and check whether each character is numeric or not (hint: there are static methods on the Char class for doing this) 
Sigh. Its an interesting language to be sure. I think its problem is its *too free*... There are a thousand ways to accomplish the same thing; and its rarely clear which is "better". I rarely see code with the same style/patterns. Also the asynchronous stuff can get ya if you're not careful. And the other issue - its ubiquitous, so better learn to love it. I've actually grown to like it a lot more these last several years.
GAH!... I really hate the notion that if you know a language you know how to program. THIS IS NOT TRUE. Try to understand that it is more important to know algorithms and data structures than knowing a computer language For me it's just like learning English very well (grammatically) but you have not taken a single class of creative writing. It doesn't matter if you know the language, if you cannot express your ideas in a coherent and easy to understand way then is all useless. (You write your code once but read it a lots of times) Read and learn from this free BOOK: Structure and Interpretation of Computer Programs Structure and Interpretation of Computer Programs is a textbook aiming to teach the principles of computer programming, such as abstraction in programming, metalinguistic abstraction, recursion, interpreters, and modular programming. 
Gotcha. I actually know literally no c#, I subscribed here as motivation to learn the language
I'm not calling any string, thats how Invoke wants the name of the method you want to call. Also I want it to happen after 7 seconds and not right away, thats why i wont just call the method. 
You write what you read xD I read a lot of fantasy and it affects how I write XD and I am not a native speaker. JavaScript works awesome both as a functional and as a OOP language. It supports very cool and flexible OOP paradigms in addition to classes and OLOO like mixins, traits and stamps. I am going to write some articles about that in the future. I think that when you write rich client side applications in JavaScript it feels very natural to bring your domain model objects that used to be in the backend somewhere into the front-end. In that context JavaScript OOP feels like a good fit. That and it is a very familiar paradigm for C# developers.
So... Next time give us a bit more to work on :D Other than that I believe that WPF app is rather neat, but you should cut a lot of the stuff you wont need and then work a LOT on it - it's from 2008 - 2 years after the release of the technology. Basically - you've found yourself a skeleton and something that can help you learn C# and XAML.
Thanks u/FizimixMan. That's what I was looking for. 
Ah, I see. I assumed that `Invoke` was just some kind of functional pseudocode. Now I see that it's a part of WinForms (I don't have any experience with that, as I've been working entirely with ASP.NET). However, [the documentation](https://msdn.microsoft.com/en-us/library/system.windows.forms.control.invoke%28v=vs.110%29.aspx) doesn't even mention a version that takes a string. So I'm not sure where your code is coming from. This code takes a delagate, so you'd use either the method name directly (eg, `Invoke(MethodB)`) or you'd pass an anonymous function and do whatever you want in there (eg, `Invoke(() =&gt; MethodB())`). You'd have to do the timer yourself. I'm thinking something like var timer = new Timer(7000); // Miliseconds var control = this; timer.Elapsed += (sender, ev) =&gt; { timer.Stop(); control.Invoke((MethodInvoker)(() =&gt; // Ugly casting bullshit because this is old legacy crap { // Doesn't have to be this method call -- put whatever you want here MethodB(); })); }; timer.Start(); Although having never worked with WinForms or really event experienced the C# intricacies of dealing with a UI thread, I can't say if this necessarily works as expected. You might also find [this SO thread helpful](http://stackoverflow.com/questions/19847724/such-a-thing-as-control-invoketimeout-in-winforms).
I tell him my problem, he says he'll see if he can find a solution and get back to me and never does. And I have asked him more than once. 
&gt; if it isn't broken, don't fix it. but it is broken. like you said: &gt;learning how to program has little to nothing to do with the language used. so if thats the case, why not pick a language the students might actually encounter in the workforce? for every pascal job out there theres like a hundred opportunities with other languages. I think the main reason is because in highschool, theres rarely a dedicated comp sci teacher, let alone an "IT" teacher, and it's usually the math or english teacher who also happens to teach a programming elective. they haven't programmed anything in years and thus the best you get is pascal/fortran/something irrelevant by today's standards. 
Uh..then don't click on the link and don't comment if your time so so valuable 
There won't be any unexpected characters in a numeric type that is converted to a string. You'd just have to remove the decimal and then take the length. If the input is given as a string originally, just do a TryParse first.
Famous last words
Looks good. Did you pretty much copy/paste the style sheet from /r/dotnet? If so, perhaps we ought to ask first. I know we looked into getting a custom CSS setup earlier this year, but there were minor (but required) fixes needed to it that never quite materialized.
I'd be happy to read the articles. I actually really like javascript these days. Anything I can do to improve my skills in js would be welcomed.
&gt; For the sake of our industry, let it die or be replaced as soon as possible. I don't see that happening. Seriously, its so damn ubiquitous, I can't see it going anywhere.
Sorry Tinister, there is so much bad code out there already that has come from the mindset you just tried to pass off as 'advice', I can't encourage anyone to listen to you.
I will learn Linux only when I am paid to do so. I find the whole idea of learning an OS extremely boring and I will not do it on my own. Also do people really do all these big data things so often? I've yet to work on a big data project so either nobody asks me for big data solutions because I don't work with Linux or most people so not have big data problems but like to pretend they do so they can use these technologies.
Software moves too fast to hold to the idea that someone won't pay for you to learn, and what's valuable today won't necessarily be valuable tomorrow. The only sane way to approach it is to learn what you need to know for the project you're on and maybe the next one. Beyond that you are just trying to predict the future without a crystal ball.
Generally do object construction in the constructor instead of on the member declaration. There is a gotcha related to member declaration assignments in inheritance, so don't assign them at declaration unless you have a good reason to.
I would go with this: namespace Interface.Library.Model { using System; using System.Collections.Generic; using System.Text; public class MTF { public int Id { get; set; } public string MTF_NAME { get; set; } public string MTF_DMIS { get; set; } public bool IsActive { get; set; } } }
you get downvoted because you're asking people to do it for you. If you want us to help, post some questions and we give answers. But I don't see any questions here...
Do you have any interest in explaining yourself or should I just take your word for it? 
The company, even if the higher ups are not aware of it, it is required to change software stacks or at least move forward at a steady pace. It's a lot easier to sell a technology you have some proficiency in, but using company time to learn it can often be a hard sell depending on the technology and who is in charge of that decision. I also think that the people pushing technology tend to be higher on the ladder than those that simply just work on whatever is placed under their nose.
Pardon my ignorance, but what's CI? And you're totally right. It's extremely hacky. It's not meant for production code and I'm mostly doing it as a learning experience.
In countries like Germany, if your experience isn't part of your daily job it isn't relevant to HR profiling the CVs, regardless of whatever you might do off work and the pile of Github projects.
CI stands for continuous integration. Basically what you should strife for is that updates and changes are released to the customer as soon as possible and as automatic as possible (of course after proper testing). It's easy to set up something like this as a start: - Developer commits a change. - Build server automatically builds the project with the changes. - Build server automatically runs thousands of automated tests (that you wrote earlier). - If build failed or one of the test failed the commit is rolled back (or prevented in the first place, gated commits) and an e-mail is written to the developer. - If everything is fine the new version is deployed to a test environment and the Quality Assurance department/person is notified.
Why are you using UTF-7? It was a proposed workaround for MIME to get around the 7-bit ASCII issue, not something you should use for regular applications. Unless you are dealing with MIME or have some super special use case you should use UTF-8. Anyway the format is ISO 8601. [Here's a stack overflow question on it](http://stackoverflow.com/questions/3556144/how-to-create-a-net-datetime-from-iso-8601-format).
I *am* interested in this more, but it seems a bit overkill for what I'm trying to accomplish. The customer is **me**. All I'm trying to do is provide plugins that can override the core functionality of the program.
What this article is basically saying is to learn Java. Learning Linux is a broad thing and it's not clear, what it's meant.
That is a generalization. My experience is pretty much the opposite.
When i tried to read it without specification or with UTF-8 chars like ä,ö,ü etc. were shown as ? in my datagrid. When using UTF-7 its suddenly all fine.
Sounds like it actually is UTF-7 then, otherwise it would decode incorrectly since ä (which would encode to "+AOQ-" in UTF-7) etc. falls outside ASCII-range. But I would say UTF-7 is an extremely odd encoding to use. 
Can anyone confirm these reads? Not sure if should trust this blog 
In ReSharper there are some beginnings of static analysis. I should say that before we started developing PVS-Studio for C# we had a close look at all the existing tools including ReSharper. We came to the conclusion that the knowledge base we have would allow us to make a tool for deeper analysis. Yes, PVS-Studio C# isn't working to its full capacity as we started its development only a few months ago. But very soon it will show all abilities that it has. 
You're close. You have the array of integers and the output code, but you need to determine how to get a random integer between 0 and 3, then use it to access your array. [System.Random](https://msdn.microsoft.com/en-us/library/system.random.aspx) is the Microsoft page on the Random class. I recommend looking at the available methods list and seeing which looks to be the best option. Next I recommend looking at [this array overview](http://csharp.net-tutorials.com/basics/arrays/) for information on arrays and how to use them. Read the links and give it a shot. If it is still confusing, come back with your code and we can walk through the lines with you.
Just a quick follow up, when I tried the code in a new project it worked fine, but I just inserted it into my main project and I am getting errors. For example, when I type "random rnd = new Random(); it errors on the word random and says I need get or set? Is there a way to fix this? EDIT. I fixed it, I just retyped it and it fixed it for some reason haha
1) Files are in UTF-8. It's one of the most widely used and supported character encodings. 2) C# fully supports non-ASCII characters in identifiers.
Amazon links to the three mentioned books: [Agile Principles, Patterns and Practices (Robert C Martin)](http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258) [Applying UML and Patterns (Craig Larman)](http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0131489062) [Art of Unit Testing (Roy Osherove)](http://www.amazon.com/The-Art-Unit-Testing-Examples/dp/1933988274)
I've read these, they are just great. It doesn't have Clean Code though - it's not C# specific but that book is a must read. 
There is a 2nd edition version of Art of Unit Testing which came out at the end of 2013 (Original is from 2009) with the examples focusing on C# which may/may not be more useful for people interested: [UK Amazon Link](http://www.amazon.co.uk/Art-Unit-Testing-examples/dp/1617290890/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1450183542&amp;sr=1-1&amp;keywords=Art+of+unit+testing) [US Amazon Link](http://www.amazon.com/The-Art-Unit-Testing-examples/dp/1617290890/ref=pd_sim_14_3?ie=UTF8&amp;dpID=51Gxwv4a1SL&amp;dpSrc=sims&amp;preST=_AC_UL160_SR128%2C160_&amp;refRID=0A4ACXTB35099541J125)
&gt; BizSpark BizSpark is kind of a trap though. You get hooked on Windows Server and SQL Server. But then after three years you either have to start paying, or start over. [I've commented on this elsewhere](https://www.reddit.com/r/dotnet/comments/3w8wrc/why_net/cxv8uli?context=3).
I was tossing between including or excluding the Clean Code but I thought it would be duplicate as I already have a course called Clean Code and I didn't wanna repeat a book on the same topic here. 
I agree, both should be there if you're serious about C#.
Are you debugging from Visual Studio? If so maybe you could try the Step Into (F11) option to see where the execution of your program is starting from. 
to be honest, Im just clicking start at the top (Ive been coding like a week sorry, im really not sure). I clicked F11 like you said, and (i think) it says that I am starting from a program with nothing in it. But this program isnt displaying on task bar and when I click continue I cant find it again. I hope that makes sense
Yeah it is in English. Okay so I just deleted some classes that I wasn't using (because I thought that is where it could be starting from?) But now it isnt even building because it says "1&gt;CSC : error CS2001: Source file 'CompartmentC.cs' could not be found" Even though I deleted the file and I am not using CompartmentC anywhere in my code?
I got more from Clean Code, personally. Definitely start with that.
Ah ok, as long as it's covered, that's what matters.
is "random rnd = new Random()" a typo? Should be; Random rnd = new Random(); note the case on "random"
Where do you delete them from? The Solution Explorer or Windows Explorer?
Oh that might have been it, I just retyped it in the program and it worked so maybe the Case was the problem, thanks!
Yeah it's pretty much a copy/paste job from r/dotnet so it would be good idea to contact the mods over there. Their style is very similar to a few other Microsoft subs, so they'd probably be able to give us some suggestions as well. This was a *really* quick thing I threw together anyway, so it needs to be massaged a bit to look just right. I'm not opposed to changing it up a bit too, the main thing I was going for is having the same look and feel as r/dotnet, r/windows, etc. I'm not a CSS guru by any means, but I'll offer my assistance wherever needed.
We probably would contact them. In retrospect, perhaps we should colourize/tweak it in some significant noticeable way so people don't get confused or mistake which subreddit they're on. I imagine may subscribers of /r/csharp are also subscribers of /r/dotnet.
The thing is, that you have categorically stated that ReSharper is able to detect all of these bugs without providing any arguments. I am quite sure that it's not so, that's why I've started arguing. I apologize if I have offended you. I see that you are sure that you are protected from bugs with ReSharper, but it's easy to check it. I suggest downloading and trying PVS-Studio. If your project is big enough, I think you might change your opinion. :) 
Okay i put in the main bit, but now it is asking for a '}' even though i moved the first one down to bottom of my code, and there were no errors before so I know Im not missing any others? But if i highlight the }, it also highlights the top one, which means its connected right?
Okay so I tried doing it bit by bit and its still not working : static void Main(string[] args) { public bool WelcomeMenu() { bool carryOn = true; Console.WriteLine("Welcome to Old Time Rail! Please select a departure time from the list below. "); Console.WriteLine("1) 13.00 - Beggin Terminal to Endline Station"); Console.WriteLine("2) 14.00 - Endline Station to Beggin Terminal"); Console.WriteLine("3) 15.00 - Beggin Terminal to Endline Station"); Console.WriteLine("4) 16.00 - Endline Station to Beggin Terminal"); Console.WriteLine("5) Save and exit"); } } So even with this code, the { after Main is complaining that } is expected and end of file is also expected, am I missing something? 
Read [the MSDN documentation on default marshalling behavior](https://msdn.microsoft.com/en-us/library/zah6xy75(v=vs.110\).aspx). 
Never delete from windows explorer. You need to go into your csproj and remove the respective lines for that file now. If it was just a reference, search for the name and delete the three XML lines for it.
Thanks!
Okay its working now, thanks for your help :)
Been using .net core cross-plat with DNX for a while now, love it :)
Do you have a recommendation?
Thank you, I just added a new class with the bit you mentioned earlier and it worked now! Thanks alot for your help
These are great OO books. If you already know C# and want to improve your design skills these are must-reads. They're not for someone who's just learning the language.
I'm a huge fan of Larman's Applying UML and Patterns. It's by far the best OO book out there. I wasted a lot of time reading other OO books and learning the hard way (i.e. painful experience).
Instead of Uncle Bob, please read [Code Complete](https://en.wikipedia.org/wiki/Code_Complete) by Steve McConnell. YMMW, but unlike Robert Martin's books, that is based on an actual research and not anecdotal stories or "this sounds cool". Of course, Uncle Bob is much easier to read... but Code Complete is a whole lot more useful than "since my variable names started to be like Pink Floyd, NO ONE should listen to music when coding" (paraphrasing here) or “The proper use of comments is to compensate for our failure to express yourself in code. Note that I used the word failure. I meant it. Comments are always failures.” (actual quote!). P.S./edit: I am sure that this comment not following the I-love-Uncle-Bob bandwagon will get a whole lot of downvotes, but I will guarantee that at some point of your career you will take over someone's code and go "oh... this is just really hard to understand", and then realize that the previous coder was following Uncle Bob's advice to a T. But, of course, since majority of developers don't read a single programming book after graduation, even Uncle Bob is better than nothing.
Azure is super easy to get your app up and running online. You can publish right to your Azure account from Visual Studio with a few clicks. You don't worry about IIS or anything like that when hosting a single web app. Definitely get the free trial and see how you like it.
It's not my area, but their are plenty of companies out there that offer to host IIS applications. If you want to make your app available quickly, then it may be worth talking to them.
I think it is more that mac/linux users prefer the code editor instead of an IDE. Having VS Code satisfies this crowd, mostly. They get everything they had in sublime, atom, brackets and then some.
Cleanup method is stubbed already, just didn't show it. 
There also evidence to the contrary that demand might be high, but there is a lot of unemployment. &gt; Given the skills shortage one would expect graduates from computer science courses to have very high employment rates. However, it seems that is not the case. The Higher Education Statistics Agency found that computer science graduates have “the unwelcome honour of the lowest employment rate of all graduates.” Why is this? Anecdotally there seems to be a mismatch between the skills the students graduate with and those that employers expect them to have. [(1)](http://mikehadlow.blogspot.com/2015/12/learn-to-code-its-harder-than-you-think.html)
the quickest way would be to serve it off your computer. the problem is the version of iis you have only wants to bind to localhost. try putting nginx in front of your web app. download the nginx/Windows-1.9.9 archive and extract it. http://nginx.org/en/docs/windows.html go into the conf/nginx.conf file and add an entry like this. make sure its inside http{ and change the ports to whatever youre using. server { listen 555; server_name default_host; location / { proxy_pass http://localhost:33035; } } if youre using a router you'll probably have to configure it to allow tcp traffic on whatever port nginx is listening on. 
Well chances are that this is because most graduates simply suck and do not meet my requirement of "remote chance of learning the tech". Of course I expect that students will have demonstrated ability to learn. For example I find it hard to believe that you have a project that is kind of real world (say written a forum, blog, chat or something like that) you won't find employment after graduating. Don't know how it is in the UK but most graduates in my country (Bulgaria) can't demonstrate this. Note that my definition of "real world" is "something that would be used if there were no better alternatives" so you don't need to build a forum like Discourse just one that won't double post if you hit F5 and can't be hacked by changing the user ID in your cookie.
No more so than, say, Java.
Why not just leave a machine running? Next best thing might be to find a cheap site that rents you a shell account of some kind, and permits you to schedule tasks. I know you can find the former, but the latter is probably harder to find. I'm not familiar with azure accounts but I gather they don't allow scheduled tasks?
And to put my money where my mouth is, here is a proof-of-concept manual allocator written in C#. Assuming that you have some bootstrap code that tells you where in physical ram you can start doing allocations, the below code could run on a bare-metal machine: /// &lt;summary&gt; /// Demo program to show how a C# program could provide its own allocator. /// &lt;/summary&gt; public static class Program { unsafe static void Main() { // vvvvvvvvvvv Bootstrap vvvvvvvvvvv // In a real implementation, this would be replaced by code that sniffs the physical // page mappings of the machine; looking for holes that refer to device-mapped regions, etc. long ramStart; long ramLength = 1000*1000; byte[] ram = new byte[ramLength]; GCHandle handle = GCHandle.Alloc( ram, GCHandleType.Pinned ); ramStart = handle.AddrOfPinnedObject().ToInt64(); // ^^^^^^^^ Bootstrap ^^^^^^^^^^ // Everything below this line, excepting the Console writes, could run on a bare-metal // machine with no OS. // Note that invoking 'new' on an unsafe struct does not cause memory allocations. // 'alloc' is stored on the stack and the 'new' invocation just calls the constructor // and the constructor is just a function. Allocator alloc = new Allocator( ramStart, ramLength ); // `sizeof` when applied to unsafe structs gives us the raw size. Thing* thing = (Thing*)alloc.Allocate( sizeof( Thing ) ); thing-&gt;Value1 = 5; Console.Out.WriteLine( thing-&gt;Value1 ); // Test for exhaustion void* target; int allocations = 0; while( true ) { target = alloc.Allocate( 1000 ); if( target == (void*)0 ) { break; } else { allocations++; } } Console.Out.WriteLine( "Allocated {0} 1kB blocks before the allocator ran out of memory.", allocations ); } } public unsafe struct Thing { public int Value1; public int Value2; } public unsafe struct Allocator { private long blockStart; private long blockLength; private long current; public Allocator( long blockStart, long blockLength ) { this.blockStart = blockStart; this.blockLength = blockLength; this.current = 0; } public void* Allocate( int size ) { if( current + size &gt; this.blockLength ) { return (void*)0; } else { void* result = (void*)( blockStart + current ); current += size; return result; } } // No 'free' is implemented, for brevity. }
I had discounted VM's (I'm trying to keep costs down as much as possible) before, but I'm going to give them a second look (I don't think I had a full understanding of their capabilities when I originally discounted them)
&gt; Why not just leave a machine running? Boss won't allow it. We got hit by a lightning strike earlier this year and learned that the wiring in our building may not be completely correct (fried a desktop when we got hit, through a surge protector, without ever tripping the circuit breaker). When it starts to storm, we shut down all computers that aren't laptops
To make it worthwhile, maybe host file shares on it and set up IIS to host your websites there too. You'll likely have more scheduled tasks and automated things you'll like to run as the work progresses anyway. 
lol TIL C# is "a polished up Visual Basic"
&gt; heavy dependency on the runtime... THIS! Hello Visual Basic ! Also, I feel like you're making this statement without actually understanding what it means. Saying C# is the same as VB is a gross misunderstanding of both.
I am very impressed with your code...I am still analyzing it at the moment...you are very good !
I believe you want to change convertedtext = Convert.ToInt32(TextArray); to convertedtext = Convert.ToInt32(alphabet);
Thanks u/robertmaclean. That's what I ended up with with the exception of the using statements being inside the namespace. Why are they inside the namespace instead of before it?
And the most useless post goes to...
Char type has GetNumericValue. example: int val = (int)Char.GetNumericValue('8'); Another issue you are going to have, is this: convertedtext = Convert.ToInt32(TextArray); You are not trying to convert the char, but the entire array. Edit: After reviewing the code further: your array of alphabet characters is never being used. Also, you are using the same variable name in the foreach which references something else (each char in the TextArray). Ditch the array you create with the actual letters as characters. 
Many things are going wrong here: * Why is there a char[] variable 'alpahbet', and a char variable 'alphabet'? This seems incorrect, and a source of much confusion. I'd rename the variable used in the foreach loop to something else ('character' perhaps). * You never use the 'alpahbet' variable (the one with a to z in the char[]), so why is it initialized? * As /u/Sasken mentioned, 'convertedText = Convert.ToInt32(TextArray)' should be 'convertedtext = Convert.ToInt32(alphabet)' * You assign 'Convert.ToChar(shiftedtext)' to decryptedText in each foreach iteration, thereby overwriting the previous value. The resulting value of decryptedText will now be a single character (namely the last one you 'encrypted') Even though you didn't mention at which line the exception is thrown, I'm going to assume it's the line 'convertedtext = Convert.ToInt32(TextArray);'. Are you sure that you changed it to 'convertedtext = Convert.ToInt32(alphabet);' and not the very similar 'alpahbet' variable (which is a char[], which would be the wrong argument for this function)? 
Can confirm, this is is a pretty viable option for smaller projects.
Yes you can, and it's been done several times, and some using free open source licenses. Some long abandoned, some that are still currently active. Examples that I know of, in order of creation (I believe): * [Singularity](https://en.wikipedia.org/wiki/Singularity_%28operating_system%29) (developed by Microsoft Research, Microsoft Research License) * [SharpOS](https://en.wikipedia.org/wiki/SharpOS_%28operating_system%29) (open source, GNUv3) * [Cosmos](https://en.wikipedia.org/wiki/Cosmos_%28operating_system%29) (open source, BSD) * [MOSA](https://github.com/mosa/MOSA-Project/wiki) (open source, New BSD)
Actually, production environments I've worked in generally host their own systems, so having a machine running is normal. I don't know why you decided to make such a statement though. Posting something like that helps no one, and is only intended to try to make me feel bad. Worse, you said that without even explaining why you think it's a bad idea. There are a lot of good reasons why someone might want to leave a machine running. Also, your post to him was simply something I'd already mentioned: a scheduled task on Azure. Lotsa help YOU are.
I have done a few of these solutions before. What i do is to wrap as much of it as i can in a C# api and then use that in my application. I do not know if this is best practise. 
&gt; Hosting your own stuff is a bit more than leaving a desktop running 24/7. I didn't say it was. He said his issue was that he wanted to schedule a task but wasn't sure how to do it in the cloud. My response included one option which was "perhaps leave a machine running". It wouldn't be HOSTING. It would simply be running a scheduled task which would generate a report. There's a huge difference between doing that and hosting your entire site yourself. Also, it would likely be cheaper to simply leave a machine running regularly to generate reports than to pay for an account somewhere to schedule the same thing.
I disagree. Sadly, "common sense" is never quite as common as we imagine.
No, I can't think of a good reason to do this either. If done correctly, though, it will pretty much produce the same code. But it seems simpler to just... not do it in the first place :p. I suppose it does make it easier to clone the instance, as you can simply assign the entire struct to the new instance.
At my company (US based) we might give some extra points for side projects, but for our core needs we are going with work experience. If we need a java programmer, we aren't looking for someone who is a C# programmer but has done some java on the side.
C# is a fine language. Better than java for the most part. BUT, the C# ecosystem is just not as good as the JVM ecosystem. So if you want them to jump ship, the ecosystem needs to improve.
Indeed it has! I still think it has a couple of years to go, at a minimum, to claim a degree of equivalence. 
Where does one get started writint applications that can run on Linux?
HostGator is another cheap option, I've never used it for Windows hosting but it's there and the price is right. 
There are many ways to go about this... Are you wanting your saves to be cross platform? You could make export files in json, xml, csv, etc.. You can also store that info in a database and deliver it from a web service... Sorry if I missed the point of the question, I am on vacation and have been drinking. :)
I'm not clear on this completely. To my understanding the null coalescing operator "??" requires that a nullable field be on the left so really all I should need is h.expdate to satisfy that. Also since 'expdate' in my code is a nullable datetime field, ".Date" will not work if it is indeed null. My test case has 5 records, the first 4 have a null value for 'expdate' and the 5th has a valid datetime value. This is the code I am trying to use in that part of my where clause but for some reason it's still failing. .Where(h =&gt; (h.expdate ?? DateTime.Today).Date &lt;= (Convert.ToDateTime(todate))) I appreciate the input but the code example you provided doesn't seem valid unless I'm missing something.
I haven't done this in a long time, but [this](http://blogs.msdn.com/b/toub/archive/2006/05/03/589423.aspx) seems right based on what I remember.
Yeah, don't. Not if you're planning on releasing to public anyway. Stealing focus and functionality away from the application I am currently using is Virus behaviour, and your application/game will be treated as one. It also implies that, even though your game/app isn't being currently used, you're still monitoring my activity. Not good. Also make sure you are handling multi-user environments correctly. If I keep seeing your application while I am paging through my online banking statements just because one of my kids wanted to play your game, we are going to have a problem.
Or backed up. A lot of public school file servers save a few days of backups. 
Just wait to hit the Ballmer peak ;) 
Okay that makes sense, how would I do that?
I can't explain why that didn't cross my mind.
Post your source on either [gist](https://gist.github.com/) or [pastebin](http://pastebin.com/) so we can get a good look at what would be easier for you.
Yes you can, but Xamarin is not as straight forward as you may think. If you want cross compatibility for an old school text based game, you could try converting this over to a web site, signlr, angular, etc.
Okay here you go http://pastebin.com/AejA6uDg
You may want think more object oriented for this project. Currently, you have no way of retrieving any previously added information. This can be fixed by storing it all in a class (i'd call it "Passenger"). The Passenger would have an option for carry-on, booked luggage (and where it is located), their seating class and finally their seat number. After the class has been implemented, and functions correctly, you can serialize the information into an xml file and your program could read that xml file and ask if you would like to make changes to their trip.
Yes, that object would store those values, this is the point of an object oriented language
Okay I am looking at using the get; set; words in another class ( is tht right so far?!) but all the examples I am seeing are for when the user types something in, how would I use get and set with my switch statements?
Sorry for the bad formating, on my phone, but I'll try and give an example. class Passenger{ public int SeatNumber { get; set; } public string SeatSection { get; set; } //other properties public Passenger(int seatNum, string seatSection){ SeatNumber = seatNum; SeatSection = seatSection; } } public static void Main(){ Passenger cust1 = new Passenger(1, "A"); //setting other properties based on user input } The above is an example of how a class would look and is used. It helps keep related items together and helps make the code cleaner.
that would be //this is for the date switch (key.Key) { case ConsoleKey.D1: case ConsoleKey.NumPad1: passenger1.DepartDate = "Saturday"; LuggageCar(); break; case ConsoleKey.D2: case ConsoleKey.NumPad2: passenger1.DepartDate = "Sunday"; LuggageCar(); break; default: Console.WriteLine("Please enter a valid number! "); validInput = false; break; }
and to get that value Console.WriteLine(passenger1.DepartDate)
No problem
This can be helpful if: * you want to clone the class easily * you want to serialize the class easily * the struct is defined in some legacy native context and your class just wraps that IMHO: this is a bad practice, because for all the above reasons there are better alternatives. 
He said it was for a game tool, which implies that the user will want to be able to interact with his application while it doesn't have focus so they don't have to pause and tab out of the game, and I've never seen a game use PGUP as a default binding. What he wants to do isn't unreasonable. 
What do you mean by "indicate the status of the insert"?
You're trying to debug by writing the values to a text file? I would recommend you simple write it to the console, a lot less hassle. Console.WriteLine(variableName.ToString() + "\n"); By doing this you can view the values easily without the need for a .txt
Honestly its kind of a joint thing, I have been looking at learning to write to a text file and saw this as a good opportunity to do so
Ok thanks :)
Thanks for replying, just a simple bool that returns a number after data is inserted, as this indicated the data being successfully inserted. 
Like a try-catch?
Yer something like if values are not null then return bool ---, else return "unsuccessful"
Naming conventions means a lot since your team needs to understand what is going on. And you have weird dependencies between your classes, like i stated.
like in my example... sw.Write takes in a string and outputs it in the file. There is WriteLine too if you want to just write one line per call without doing \n everytime you need newline.
You could perhaps do something simple like: var query = Contracts.GetContracts() .Where(h =&gt; (h.startdate.Date &gt;= Convert.ToDateTime(fromdate))) .Where(h =&gt; (h.expdate == null || h.expdate.Date &lt;= Convert.ToDateTime(todate))); Rather than replace the null date with now if that is an option for you. If not, go with /u/DesertIce 
...which is a c# 6 feature. OP has to tell us if he uses the new compilers already
Uh. Well. To the question. You need some spaces after "INTO" and before "VALUES", otherwise it becomes "INSERT INTOtableNameVALUES...". What you're doing (just gluing sql expression) is extremely unsafe. Google "sql injection". What you should do is use parametrized query, it takes more to setup it, but is much better.
&gt; c# 6 feature I'm using c# 5. 
This really sounds like a case of over architecting. Why would you need base classes that only are differentiated by an Enum value. Why not a single object and your code use the Enum for what ever logic your attempting. Base on the link and your description it's honestly a WFWY moment. 
Just File.WriteAllText() and you're good! (using system.IO)
This is such bullshit. If someone wants global hotkeys in their app then let them have it! This isnt /r/enterpisestandardsandpractices
Ok where would i put that? I havent come across that term before!
HOLY MOLY I want to actually kiss you. Ive been stuck on this for 2 days AHHHHHHH Thank you you so much it works!!! i wish i could gild you
And there's SQL injection vulnerabilities, the code isn't using bind variables, value strings that contain apostrophes will fail, etc. IMHO, You are better off using an ORM (i.e. Entity Framework) unless you are skilled enough in your DMBS to want the tighter control of manual SQL
You will soon learn to use MSDN a lot :p [Here's the informations on WriteAllText](https://msdn.microsoft.com/en-us/library/ms143375\(v=vs.110\).aspx). It says that if the file exists, it is overwritten, else it's created. If you want to append some text to an existing file, use instead File.AppendAllText("c:/myfile.txt", "contentToAppend"). It will also create the file if it doesn't exist, but won't overwrite it, simply add the new content at its end.
Yeah I was just looking at that, the problem I had was it threw up an error saying it couldnt the path, my path was @"C:\temp\MyTest.txt" Is there any reason you can as to why it wouldnt recognise that?
unfortunately the data is generated by a multitude of smaller devices and the report is going to be a summary of them, so the data has to be collected somewhere first (not really feasible to poll the units while running the report)
First of all, thanks for your explanation. For your larger question, all I can say is the teacher wanted us to do it this way. Now it is a bit more clear for me that how EF uses enums. Although I have manually set enums to start from 1, the discriminator column in the database shows as TypeA and TypeB (children class names). It would help even if I could read that value. I don't even know why these are saved as class names instead of int values. I will try to make it save as int instead of string.
I do believe the FILE will be automatically created, but not the FOLDER. So if `C:\temp` doesn't exist, you should get a DirectoryNotFoundException. This is just from the top of my head though.
"discriminator column" fancy way of saying column with different values that we want to key on. Ideally what you'd do is use a where statement. var results = db.Table.Where(x =&gt;x.value == something); then you want to wrap them all in a class. var myDesiredTypes = new List&lt;MyDesiredType&gt;(); for (var aResult in Results) { myDesiredTypes.Add(new MyDesiredType(aResult)); //or was it push, either way use the constructor to build your object } AFAIK EF would not do this directly for you and because it may be atypical convention for a ORM, it would be easier to trace your code. 
Side project or not, it's not that much more effort to parameterize it.
BTW, who knows a better highlighter for asm code? I use http://pygments.org/ with `sass` language.
I think I would start with a simple intro to programming course or tutorial, learn the basics first. 
If you're not learning to do the right thing in your sideprojects, then where do you do it?
Yeah as well, but just first off what the actual path would be to write it?
You need a fourth option, that it's dependent on the size and scope of the project. I charge for my quoting period about 50-60% of the time, but I always have some sort of quoting phase.
Okay yeah its working now, thanks alot thats really great :)
did you fill it in already? ill add a 'other'
Okay thanks alot. For another piece of code I am using get;set; to get information from a UI and then print it into a textbox using file.WriteAllText. But only one of the get;set; is actually going into the text box, all the others just seem to disappear? This is one of the codes that isnt working : private void DateSetting() { Passenger whatDay = new Passenger(); Console.Clear(); Console.WriteLine("What day would you like your journey?"); Console.WriteLine("1) Saturday "); Console.WriteLine("2) Sunday "); bool validInput = false; do { validInput = true; ConsoleKeyInfo key = Console.ReadKey(); switch (key.Key) { case ConsoleKey.D1: case ConsoleKey.NumPad1: whatDay.DateSetting = "Saturday"; LuggageCar(); break; and the get;set bit is: private string dateSetting; public string DateSetting { get { return dateSetting; } set { dateSetting = value; File.WriteAllText(@"C:\Users\Dan\Documents\testText.txt", value.ToString() + "\n"); } 
Hi! I'm a student myself, but I'll give it a shot: Firstly, when I click options to edit my start and end times, the main form itself closes and I lose all my tickets. I presume this is to stop tickets existing that break new open/close times defined? I'd suggest keeping the main form open and instead launching the options form from the main form (and using a constructor to pass any variables you need!) - and rather than clearing old tickets, perhaps you could mark the date of said ticket, or allow the user to remove a ticket instance entirely? One or two spelling mistakes, but nothing to worry over: "next availalble entry" (options form). In terms of form structure, I'd consider moving the time from the window and instead placing it as a label within the main form. Controls could be organised a little more - centre buttons on containers, or group multiple buttons to one side, with styling consistent across all forms. You could also add a scrollbar to your listbox by default, makes it look much more polished! Some of your text goes off the screen: "lblTicketTime.Text = "No available ticket time, please wait!", I'd suggest simply extending the form to fit your text, or use newlines (or just group the labels closer!). Regions are awesome - it's great to see them used! I'd also recommend additional comments to explain your code, specifically when you declare variables, run statements, etc - comments demonstrate that you understand your own code, and helps the marker understand too! You can also use comments to show what different group members worked on, or to outline recent changes, etc. Hope this helped! :) Edit: As an additional thought, perhaps you could also include a way of attaching a name to a particular ticket, since a ticket will need some way of being identified with an owner: and this would also make removing older tickets easier for an end user, because a ticket belonging to John Doe is much easier to understand than Ticket #2311!
ok, other is added :) thanks
Okay yeah that worked! I read about that AppendAllText but didnt really understand its use but now i do. Its just all on one line and weirdly formatted but i think i can fix that. Thank you so much :) 
Sweet :) Just for how I found my advice - definitely check MSDN to figure out exactly how a method works. The difference is obvious now I'm sure - WriteAllText overwrites the file, AppendAllText adds to the file. Otherwise they have the same functionality. It's a good skill to be able to figure out what a method does without guess and check style coding. Imagine if it took ~5 minutes to compile your code each time. You wouldn't want to do that. :) Good luck on the rest of the project!
So I have tested it a few times and what is happening is its just adding on to the information from the previous text every time? I have tried adding a WriteAllText for the first one but its still happpening? For example this is 5 different texts all put together in one file for some reason: First Class Saturday First Class 4Sunday Car D Open Seating Saturday Third Class Compartment Saturday Third Class Compartment 
Hmm... Instead of your "\n" try using Environment.NewLine
Uh... What the fuck are you talking about? I literally don't have the faintest clue what you are on about. If you must know, the tool I'm working on is a tool made by a guy I met on YouTube. It is for the video game Halo 2 Vista, and it edits the values in the game memory to let you have a higher FoV and Raw Mouse input. I'm making revisions to the tool's UI to make it easier and more functional. At the moment, you have to alt tab to press the activate button, but I'd like to make a keybind to activate it instead. Christ, here's the video the guy made showing the tool off, even, and my revisions are in the comments, the most recent one... http://www.youtube.com/watch?v=zWBnku_56gs Now with that being said, seriously, what the Hell are you talking about? Did you just skim over my OP and jump to the extremely stupid conclusion I am making some type of retarded virus?
Okay yeah that puts it on a new Line, thank you. It still is displaying previous tests, but I dont think its a big deal, thanks again :):)
Yes you are right, was just a typo. To be honest Im not sure I knew you could just seed the first enum and the rest would increment.
Ha, yeah. You could just do File.WriteAllText(path, ""); to fake clear it out. :P
That is a very good point actually. Seriously though, you have been so helpful I wouldnt have got through anything today with you so, thank you so much. ^.^
No problem! Feel free to DM me if you need help in the future. I'm usually quick about responding.
I love when someone does Mongo code, it's hard to find good examples. I've been doing database work ..well as long as there have been databases(yeah so I'm older..), and I find it a really amazing approach. And it beats the heck out of buying SQL for small projects(what a bloated, overpriced...).
&gt; You can also use comments to show what different group members worked on, or to outline recent changes, etc. I hope this suggestion is only for the assignment. Please, never, ever do this in real code - that is what source control is for.
I'm not real sure what you're asking. Do you want to write the file to cd? I know that isn't trivial. 
It's really hard. That's why I've originally started answering on Stack Overflow: http://stackoverflow.com/tags/mongodb-csharp/topusers
Cool little project! Resizing forms messes with the layout a lot and makes the forms unusable, either put anchors or put a minimum/maximum size on both forms. As previously stated, I would not close the main form when you go to the options, I would instead use ShowDialog(). You should do a check for DialogResult on the options window, it's good you took away the exit, but what if you don't want to save the changes you made - there's no way to cancel. I alt+f4 the options window and the application still runs, but the main form never reappears. Default values for StartTime/EndTime are broken "The endtimes should not come before the Start Time. Please adjust". Good error message, but should not occur for default options. But I'm not sure that is correct, what if I want the close time to be 2AM like bars? Ints are easy to use for the starting number, but are faulty if you reset them - especially without some kind of backend like was mentioned before for a database or XML/JSON based. You could even run sqlite or something with a transportable database. I would have set an event on [Elapsed](https://msdn.microsoft.com/en-us/library/system.timers.timer.elapsed\(v=vs.110\).aspx) for the timer to check periodically, but I'm not familiar with the WinForms timer. You never clean up the timer on FormClose either (again, not sure if the WinForms timer will resolve this for you). I would make frmOptions a member of the frmMain class and then do .Show() on the member instead of reinitializing a new instance of it every time. Instead of btnExit_Click you can set a DialogResult.Close in the designer and set it to btnExit which will allow you to remove the event. Unless you had other logic to clean up. I agree with the enums comment mentioned. It is not recommended to use booleans as it takes extra brain power to distinguish which is the proper state as opposed to an enum - plus it's type checked. You should really try to separate your logic from the view. Which could have been a different project that you could write unit tests against. EDIT: Good on you for using git branches too!! EDIT2: [Link to Naming Conventions](https://msdn.microsoft.com/en-us/library/ms229002)
&gt; Form1_Load Guh... hurr... blech (Please name things after what they do, auto-generated code is no excuse) &gt; public string Open Why is "Open" a string? If this can only have two states, why isn't it a boolean? &gt; public class oDay This class violates the single responsibility principle. For example the class name is clearly a reference to time keeping, but there are members that have literally nothing to do with time (e.g. `CurrentRiders`) &gt; public string riders Why are some of the properties lower-cased and some upper-cased? Be consistent. &gt; public void GiveTicket() If this were a public API I'd be very confused about how to use this. The documentation indicates that this changes the state somehow, but it isn't clear what *next* action is needed by the programmer to fetch the state. To put it another way, if I call this method how can I know if it succeeded or what changed? In this case I would expect GiveTicket to... give me a ticket. But it returns void instead which is really confusing. &gt; button1_Click Gak... oDay newDay = new oDay(dtpStartTime.Value, dtpEndTime.Value, numMinutes.Text, (int)numRidersPer.Value, (int)numFirstTickets.Value); Main.today = newDay; Main.Show(); Close(); You're having a child dialog mutate the state of the parent? That's a code smell because of tight coupling. It would be preferable to have the options dialog expose a "NewDay" property that the parent can read upon closing. private void frmOptions_Load(object sender, EventArgs e) { //hide the main form upon load. Main.Hide(); } A principle I believe in strongly is the principle of least surprise. When you surprise your users it's generally a bad thing (tm). A parent window disappearing when a child window opens is unusual and surprising. Duration = 1; MaxRiders = 5; Queue = new List&lt;oTicket&gt;(5); Magic constants are magic. &gt; public int Duration Duration is an integer but what's the unit? Duration in seconds? Duration in number of rides? &gt; public int index { get; set; } A field called "index" with no hint about what it's an index for. On the surface this is confusing. I've never purchased a ticket that had an index. &gt; CheckTickets There's a very tiny race condition in this method. You call `DateTime.Now.Ticks` repeatedly rather than once which means the definition changes as the loop executes. Supposing you had two tickets with identical time slots, there's a slim possibility that one ticket gets added and the other gets rejected. You should record `DateTime.Now` in a variable before the loops and use that instead. 
I was thinking the same thing. The only exceptions I can think of off the top of my head is prefixing interfaces with I and some cases in graphical programs. 
Ah, I had a brain fart on how File.Open worked. That actually just gives you a FileStream so you can parse the file. Instead of that, do System.Diagnostics.Process.Start(filepath); As long as the filename you wrote the file with ends with .txt it should open in the users preferred editor. public void Run() { var filepath = GetFilePath(); File.WriteAllText(filepath, "Smashing Hotdogs Everyday"); Process.Start(filepath); } private string GetFilePath() { var filename = "fileena.txt"; var testFolder = "SandboxDocuments"; var environmentVar = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); return Path.Combine(environmentVar, testFolder, filename); }
I dont understand, I want to use my program on a computer where I havent previously set up a text file, and have the computer open a text file with my information in it? Is that what you mean? Im abit confused as to your solution, sorry
Oh, my snippet was just an example. Once you write to your file you can just do the line: Process.Start(filepath); And the operating system deals with the rest. I had to write a sample project to make sure my suggestion worked :P
Erm, Im not sure I get it, where abouts would it go in my code? So for (below) where would I put it? (Ignore the file path in that, I was just trying out different solutions) private string timeTravelled; public string TimeTravelled { get { return timeTravelled; } set { timeTravelled = value; File.AppendAllText(@"C:\Windows\System32\notepad.exe", value.ToString() + Environment.NewLine); } }
Here is my two cents, from a code review perspective. 1 - code standards for formatting is typically. I've seen people argue different standards for the private class fields, but i prefer this way. Consistency is important too! (touched on by /u/karmadilla) public -&gt; PascalCase private -&gt; camelCase private class fields -&gt; _camelCase A formatting example: public class PersonService { private IPersonRepository _personRepository; // private class field public int NumberOfPeople // public property { get { return _personRepository.FindAll().Count; } } public PersonService(IPersonRepository personRepository) { if (personRepository == null) throw new ArgumentNullException(nameof(personRepository)); _personRepository = personRepository; } public void Add(Person) // public method { // code to add person to repository } private void exists(Person person) // private method { // code to check if person is in repository } } 2 - No Hungarian notation formatting, it's not very useful anymore, except in key areas. (stated well by /u/MurphysParadox) 3 - Formatting project. For larger projects people seem to favorite the feature structure. e.g.; a folder for each piece of the project with all related code inside it. For smaller projects (maybe such as this), I go for general folders, such as Models. An example for your current project might be... &lt;SolutionName&gt;.sln -- &lt;ProjectName&gt;.Core.csproj ---- Models ------ Day.cs ------ Ticket.cs ---- Repositories ------ ITicketRepository.cs ------ InMemoryTicketRepository.cs -- &lt;ProjectName&gt;.WinFormsClientApp.csproj ---- Windows ------ frmMain.cs ------ frmOptions.cs --- Program.cs -- Tests ---- &lt;ProjectName&gt;.Core.Tests.csproj ------ DayTests.cs ------ TicketTests.cs ------ Repositories -------- InMemoryTicketRepositoryTests.cs This of course is just an example, but a good habit to get into when your projects get larger. 4 - SRP (Single Responsibility Principle) (touched on by /u/Karmadilla) The idea is basically you want to keep each piece of the puzzle as thin as possible, addressing one concern in each piece. For example; your oDay class has basic model properties (lines 17 - 26), ticket properties (line 28, 40), ticket methods (line 147, 162), and three methods for Windows (lines 92, 111, 130). I have to leave right now for some work, but will try to continue this later. Don't be discouraged, these are just tips to hopefully help you for the future! 
This and the string interpolation ($ before a string to do a neater String.Format) are definitely my favourite features in C# 6
I just did some reading and I came across using StreamWriter,which seems abit simpler since I dont think im understanding the File.AppendAllText, but I cant get the streamwriter to make a new file, is this my fault? using (StreamWriter writer = new StreamWriter("important.txt")) { writer.Write("Word "); writer.WriteLine("word 2"); writer.WriteLine("Line 2"); 
You may want to give the stream writer the path from before instead of just important.txt because I have no idea what directory that will save in
The problem with the lack of exception handling is the thought that there can be perfect code. I have seen so much code that SHOULD have been perfect and yet did not work. eg: Had a a loop that went from 1 to # of rows in a grid, and sometimes (rarely) it would keep going. So yea, I am one of those developers that encapsulates ALL functions within a try catch and log it all. That way I know when and where an issue happens
It seems like you're doing things correctly as long as that bracket is closed. If you just pass the filename, the directory it will be put in is "your_project\bin\Debug".
The "try" is where the cost is. It doesn't matter much whether there's a catch and/or a finally. It's just the fact that there's exception handling at all. Don't stress too much over performance impacts of exception handling. If it's useful and necessary then use it. Unless you're writing something real-time you won't notice the difference. The main issue around exception handling is developers who use it for flow control. That's almost universally a bad thing. It's for handling exceptions, which by definition should be exceptional. But the last thing you want to do is leave it out with a "that should never happen" attitude. Because whatever shouldn't happen, will eventually happen.
It is a Java thing. C# style guidelines largely recommend PascalCase. (However, I still use camelCase for private methods, which was the style in the early 2000's.)
I assume they aren't themselves directly posting the data to the he sql database?
Good to know. From one perspective, I don't think the exact style you use matters that much. It's like arguing over emacs vs. vi or 3 spaces vs. 4. It just needs to be readable or consistent. When I do a code review and I don't know the exact style guidelines that are in play, I look for consistency more than anything. Styles need to be consistent across an organization, but the specifics generally don't matter. On the other hand, if you can use the same style that the creators of the language used, you should. Which is why I write C using the style exemplified in K&amp;R as much as possible.
 I guess so :)... But really, most of the answers I found back then were old or wrong and I didn't have enough reputation to comment or downvote so I started answering. Even my first answer was about MongoDB: http://stackoverflow.com/a/20017270/885318
It seems JIT supports Math operation optimization. It's a CSE candidate https://github.com/dotnet/coreclr/blob/release/1.0.0-rc1/src/jit/optcse.cpp#L2041 And Math.Abs should be replaced by intrinsic operation here https://github.com/dotnet/coreclr/blob/master/src/jit/importer.cpp#L3006 Why doesn't it work? I don't know yet.
Okay Im going to be honest with you, This is for a project for uni, I took a module in programming because I was really interested in it and it turns out I absolutely SUCK at it, but Its due in tomorrow and i really really need to pass, I am really sorry I didn't mention it before but I didnt want people thinking I just wanted them to do it for me so i could get free marks, i am trying really hard but its so frustrating i just dont understand how to do this problem. I had a list of 5 things to accomplish with my program and I have done 4 of them, the last is to paste the information the user puts in into a text file on a university pc, the uni pc has two libraries of H: (my personal login library, so cant use this one) and O: which is a shared (pretty sure this is the one i need to use i reckon) The only help i have got from my teacher is that i need to look up AppDomain, which i did but i really struggled to see how that helps with this text file issue. The code to go into a text file is (ignore the file.append bit that was from before). Any advice you could give would just be amazing I am completely stuck :( public class Passenger { private string timeTravelled; public string TimeTravelled { get { return timeTravelled; } set { timeTravelled = value; File.AppendAllText(@"C:\Users\Dan\Documents\testText.txt", value.ToString() + Environment.NewLine); } } private int seatNumber; public int SeatNumber { get { return seatNumber; } set { seatNumber = value; File.AppendAllText(@"C:\Users\Dan\Documents\testText.txt", value.ToString() + Environment.NewLine); } } private string seatSelection; public string SeatSelection { get { return seatSelection; } set { seatSelection = value; File.AppendAllText(@"C:\Users\Dan\Documents\testText.txt", value.ToString() + Environment.NewLine); } } private int bookLuggage; public int BookLuggage { get { return bookLuggage; } set { bookLuggage = value; File.AppendAllText(@"C:\Users\Dan\Documents\testText.txt", value.ToString() + Environment.NewLine); } } private string dateSetting; public string DateSetting { get { return dateSetting; } set { dateSetting = value; File.AppendAllText(@"C:\Users\Dan\Documents\testText.txt", value.ToString() + Environment.NewLine); } } }
AH okay the important one worked, how would I apply that to the code i pasted below??
Please take everything I say with a grain of salt. I'm a first semester CIS major with little experience. I noticed that non of the windows opened in the center of the screen upon running. You could change the project icon as well as the form icon to make it look less generic. For showing your Messagebox's "The endtime should not come before the Start Time." in frmOptions. You could change endtime to End Time or just end time and Start Time to start time. Maybe have an exit button to get out of options in case you accidentally click it and wish to go back to the main screen without seeing the error message that your times are incorrect.
Azure has a front end called IoT hub where they get to dump data. The hub handles putting it in the database
Yeah, I was looking at https://github.com/dotnet/coreclr/blob/release/1.0.0-rc1/src/jit/optcse.cpp#L1770 and for some reason just saw that subtree expression being handled and assumed that it knows to expand higher. Alas, it's only a debug printout :( 
Actually, C# and Visual Basic *are* extremely similar, and intentionally so. Most of their differences are superficial; they even share much common implementation in Roslyn. It's not a knock against C#; rather, it demonstrates that Visual Basic isn't *entirely* terrible, it's just ugly as shit.
Do you need to use StreamWriter? If not, try using this: System.IO.File.WriteAllText("BookingInfo.txt", value + Environment.NewLine); Otherwise: using( var writer = new System.IO.StreamWriter(@"C:\BookingInfo.txt", false)) { writer.Write(value.ToString() + Environment.NewLine); writer.Close(); } 
Really? Interesting. Can you point me to an article on this?
You can create new files with your program too.
Wow that's great man, I should start answering those. I used to really get into answering the questions on that site, but trolls ruined it. You work for Microsoft? That's really cool that they are OK with Mongo etc, I got hired(but turned it down..good story there...) by Microsoft years ago, and they made pretty clear that they would only tolerate 100% Microsoft solutions. That being said, it was their WebTV product... Sorry got a little off topic there... I'll see you on StackOverFlow.
The most important thing is that all developers on a project follow the same conventions and styles. If I'm looking at a project that's part of an acquisition and the code style is not the company standard, I need to either follow the existing style or update all the code for the new style (usually not practical on larger projects, especially on shared interfaces).
Edit: Removed a huge block of code 
It might be rude, but I've totally associated your blog pic with blogspam in my head. 
Make it static.
How so?
I went to options and I can't change time using numeric up down. I also cannot press ok because then it complains about the end time being before start time. Also it would be good to specify if the time is PM or AM as it might be quite confusing. Here is my window: http://imgur.com/QfJ0LqN. I can't get out of this window now. Always give some names to your controls, especially when you are using git. If you leave default names (label1, button1 etc.) it might get nasty pretty quickly as soon as two or more people add things to GUI and then you try to merge it. I also checked your github workflow. Seems reasonable for a group school project. It would be good if you followed some good practices on commit messages ("xd" is not a good commit message!). This is a nice blog post on how to write nice commit messages: http://chris.beams.io/posts/git-commit/. Listen carefuly to /u/Karmadilla and /u/MurphysParadox advice, they seem to know their stuff!
Works now. Thank you.
 Project GrpPro12-2AssigningTicketTimeSlots frmMain.cs:2 Using directive is not required by the code and can be safely removed frmMain.cs:3 Using directive is not required by the code and can be safely removed frmMain.cs:4 Using directive is not required by the code and can be safely removed frmMain.cs:5 Using directive is not required by the code and can be safely removed frmMain.cs:6 Using directive is not required by the code and can be safely removed frmMain.cs:7 Using directive is not required by the code and can be safely removed frmMain.cs:8 Using directive is not required by the code and can be safely removed frmMain.cs:13 Name 'frmMain' does not match rule 'Types and namespaces'. Suggested name is 'FrmMain'. frmMain.cs:21 Name 'today' does not match rule 'Fields (not private)'. Suggested name is 'Today'. frmMain.cs:42 Name 'updateTime' does not match rule 'Methods, properties and events'. Suggested name is 'UpdateTime'. frmMain.cs:45 Qualifier 'this.' is redundant frmMain.cs:45 Localizable string: "" frmMain.cs:60 Localizable string: "By going into the Options Settings you w…" frmMain.cs:61 Localizable string: "Options Warning" frmMain.cs:64 Use object initializer frmMain.cs:98 Name 'updateListbox' does not match rule 'Methods, properties and events'. Suggested name is 'UpdateListbox'. frmMain.cs:113 Name 'updateButton' does not match rule 'Methods, properties and events'. Suggested name is 'UpdateButton'. frmMain.cs:125 Name 'updateLabels' does not match rule 'Methods, properties and events'. Suggested name is 'UpdateLabels'. frmMain.cs:129 Convert to '?:' expression frmMain.cs:135 Localizable string: "No available ticket time, please wait!" frmOptions.cs:2 Using directive is not required by the code and can be safely removed frmOptions.cs:3 Using directive is not required by the code and can be safely removed frmOptions.cs:4 Using directive is not required by the code and can be safely removed frmOptions.cs:5 Using directive is not required by the code and can be safely removed frmOptions.cs:6 Using directive is not required by the code and can be safely removed frmOptions.cs:7 Using directive is not required by the code and can be safely removed frmOptions.cs:8 Using directive is not required by the code and can be safely removed frmOptions.cs:13 Name 'frmOptions' does not match rule 'Types and namespaces'. Suggested name is 'FrmOptions'. frmOptions.cs:47 Localizable string: "The endtime should not come before the S…" frmOptions.cs:47 Localizable string: "Time Error" oDay.cs:4 Using directive is not required by the code and can be safely removed oDay.cs:5 Using directive is not required by the code and can be safely removed oDay.cs:6 Using directive is not required by the code and can be safely removed oDay.cs:7 Using directive is not required by the code and can be safely removed oDay.cs:15 Name 'oDay' does not match rule 'Types and namespaces'. Suggested name is 'ODay'. oDay.cs:17 Field 'open' is never used oDay.cs:28 Name 'riders' does not match rule 'Methods, properties and events'. Suggested name is 'Riders'. oDay.cs:34 Use string interpolation expression oDay.cs:75 Parameter 'maxRiders' has no matching param tag in the XML comment for GrpPro12_2AssigningTicketTimeSlots.oDay.oDay (but other parameters do) oDay.cs:75 Parameter 'startingTicket' has no matching param tag in the XML comment for GrpPro12_2AssigningTicketTimeSlots.oDay.oDay (but other parameters do) oDay.cs:79 Use string interpolation expression oDay.cs:94 Qualifier 'this.' is redundant oDay.cs:97 Redundant parentheses oDay.cs:130 Name 'removeOldWindows' does not match rule 'Methods, properties and events'. Suggested name is 'RemoveOldWindows'. oDay.cs:133 Loop can be converted into LINQ-expression oProgram.cs:2 Using directive is not required by the code and can be safely removed oProgram.cs:3 Using directive is not required by the code and can be safely removed oProgram.cs:4 Using directive is not required by the code and can be safely removed oProgram.cs:9 Name 'oProgram' does not match rule 'Types and namespaces'. Suggested name is 'OProgram'. oTicket.cs:2 Using directive is not required by the code and can be safely removed oTicket.cs:3 Using directive is not required by the code and can be safely removed oTicket.cs:4 Using directive is not required by the code and can be safely removed oTicket.cs:5 Using directive is not required by the code and can be safely removed oTicket.cs:10 Name 'oTicket' does not match rule 'Types and namespaces'. Suggested name is 'OTicket'. oTicket.cs:14 Name 'index' does not match rule 'Methods, properties and events'. Suggested name is 'Index'. oTicket.cs:32 Use string interpolation expression oWindow.cs:3 Using directive is not required by the code and can be safely removed oWindow.cs:4 Using directive is not required by the code and can be safely removed oWindow.cs:5 Using directive is not required by the code and can be safely removed oWindow.cs:12 Name 'oWindow' does not match rule 'Types and namespaces'. Suggested name is 'OWindow'. oWindow.cs:14 Auto-property can be made get-only oWindow.cs:16 Auto-property can be made get-only oWindow.cs:50 Name 'loadTickets' does not match rule 'Methods, properties and events'. Suggested name is 'LoadTickets'. Properties\AssemblyInfo.cs:2 Using directive is not required by the code and can be safely removed
Exactly. Since the name in the summoner object and the key are the same, you shouldn't have to worry about knowing the key in the dictionary.
Yeah, formatting is more or less easily resolved in minutes, but naming conventions are the real trouble area, especially when they're poorly followed.
No idea man. 
On the scope of localization, you could consider an approach like this: public static class Localizations { // call like: // Localizations.Localized($"asdf{123}") public static string Localized(FormattableString formattableString) { //do something here with formattableString.Format to get the localized version var culture = CultureInfo.CurrentCulture; // get correct value here return string.Format(culture, formattableString.Format, formattableString.GetArguments()); } } You cannot make that an extension method nicely though (compiler doesn't know to do that conversion) ... edit: here at work we are considering a requirement that every string literal in our system must look something like this: Resources.Get($"KeyName: {var1}, {var2}, ..."); Our resx files look something like this: &lt;data name="Key1: {0}, {1}" xml:space="preserve"&gt; &lt;value&gt;blah {0:...} more blah {1:...}&lt;/value&gt; &lt;/data&gt;
&gt; Single Responsibility Principal lol touche, I've corrected it :)
ugh!! i just typed out about an hours worth of stuff and then hit the back button accidentally :(... I've read the other comments, and most the things i was typing was already covered anyway. Some great points are made in here, hope you use them to continue to learn! Great job. 
I haven't used Adapters in years but if I remember right, you have to specify the SQL command for the Insert and the Update of the DataAdapter. I think what the message is telling you is that there isn't a valid Insert Command specified on the DataAdapter. See the following link on MSDN of more information. https://msdn.microsoft.com/library/33y2221y(v=vs.100).aspx Here's another example. https://msdn.microsoft.com/en-us/library/system.data.common.dataadapter.update(v=vs.110).aspx
I'm no expert but one thing I would personally do is transition all of your standard properties into dependency properties. It will allow you to easily add property changed events, which will improve your extendability. I would also use regions to separate your code by general content. I typically use 3 main regions: Events, Methods, and Properties. It makes it easier to navigate - and thus maintain and make changes to. Putting everything in alphabetical order by name is huge for me. Makes it so much easier to find everything later down the line. Admittedly I did not look into your code much, I just looked at the layout. It's not a very large class definition, it only seems confusing and large because it's difficult to navigate.
 public static string SomeString;
I would like to export it packaged as an application which virtually simulates a console that you type into, just as you would if you were testing it in an IDE. I'd also like to have sounds and maybe very very minimal/simple 2d animations, but more importantly sound. Am I asking too much? xD
&gt; I presume there's a good reason you can't use the "using" statement, but as long as your class implements IDisposable, it is one of the best options if possible. It triggers even after an exception is thrown. Just mentioning that a `using` block is just a `try/finally` block in disguise.
https://www.reddit.com/r/csharp/search?q=recommended+books&amp;restrict_sr=on
I don't think those are good books for someone who doesn't just starts to learn C#, but starts to learn programming in general.
On your last point: Any() vs Count() Any() would be more efficient since you don't need to count, you can stop at the first (any) object found in the collection. But I suppose the property Count would be even more efficient in this case, because a List most likely has this stored and does not need to count.
http://referencesource.microsoft.com/
Or just reflect on the class to see if it's TypeA or TypeB if they both inherit from Accounts... I think this is a case of XY Problem.
thx
I guess I need a new pic then...
&gt; The "try" is where the cost is. It doesn't matter much whether there's a catch and/or a finally. It's just the fact that there's exception handling at all. Definitely not. A try hardly costs anything, and try-finally is used a lot in the framework in performance-sensitive areas. Actually throwing an exception is expensive, though.
Yes, more precisely (from the standard), a using-statement like this: using (ResourceType resource = expression) statement is semantically the same as: { ResourceType resource = expression; try { statement; } finally { if (resource != null) ((IDisposable)resource).Dispose(); } } when ResourceType is a reference type (otherwise without the `if (resource != null)` bit).
Can't agree more! That's why I wrote in the post: "Shall I say this is the best or the only OOP book worth reading?"! It amazed me how one of the Reddit readers commented (with arrogance): "who uses UML these days, unless they work at IBM", which shows complete ignorance. Because the book unlike the title, it's not just about UML. It's far beyond UML. Plus, Larman uses UML only as a quick communication tool to explore a few design ideas, and not something to be documented... 
Probably meant "it's missing *at least*...", meaning he's not sure if the list is missing any other book that are great "Top Reads", but for sure is missing CLR via C#.
lock() does something similar. It's worth playing around with a reverse engineering tool to see what the compiler actually does with your code.
For learning purposes, there's also Pluralsight training videos and you can get about 3 months free atm -&gt; https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx 
Don't be an asshole just because they're learning. I'm sure you asked the same kind of questions when you started programming. 
the .net reflector VS addin also lets you view assembly definitions. 
Both gives you a list of the exposed methods. Compare and see.
Almost **no documentation**. That is really shitty for a library to be used by other people.
And that is why it's on github so other people can help. Hooray
The also have a whole book. [Practical Guidelines and Best Practices for Microsoft Visual Basic and Visual C# Developers (Developer Reference)](http://www.amazon.com/Practical-Guidelines-Practices-Microsoft%C2%AE-Developers/dp/0735621721)
Should be fully feasible. As long as you're ok with allowing users to see data they normally don't have access to. Let the service run as a user with the appropriate rights. You can either rely on the command line tool, or the powershell functionality to actually get the dfs data. And then pump it to some storage accessible by your web app.
If you have such a big class, then perhaps it is time to start separating some things.
That is a very **shitty** attitude. You're too lazy to document your own library, even partially. If the author does not care enough about his own code, why should others do it?
I looked through plenty of classes, and almost none had any documentation. So no, it was not documented. And it is great if people work on such projects and contribute it to everyone. I just wish that those people would care more about it and would work on the quality of the libraries. And you removed it? Because of some criticism? Grow up.
That's interesting, I was targeting Mongo for a Document Imaging project I'm working on, what kind of volume are you talking? 
yey a league player :-)
C# 5.0 in nutshell by Joseph Albahari. The best book I found on C#.
`Func&lt;Action&gt;` is a method that accepts no parameters, and returns a method that accepts no parameters.
WTF is the actual question in that wall of text? Even after reading it I have no idea. Yes you can have have functions that return actions and you can put them in arrays. What is the question?
&gt; Yes you can have have functions that return actions That was the question. Can I create a Func that returns an Action w two paramaters (object sender , Event Args e)... which references and operates on a third parameter (value)... thereby returning a method which matches the standard model for the majority of event handlers? Reread what I wrote. I feel like what I was looking for was as reasonably clear as I could make it. I minimized the question, provided an example form of what I wanted, along with the implementation that I'm currently using which works. 
The answer is yes. *Edit just so you don't think I'm being a dick here is an answer for you. Func&lt;object, Action&lt;object, EventArgs&gt;&gt; generatorFunc = obj =&gt; (o, e) =&gt; Console.Out.WriteLine(o.ToString() + " " + e.ToString() + " " + obj.ToString()); Action&lt;object, EventArgs&gt; retValue = generatorFunc("foo"); retValue("object", new EventArgs()); retValue("Poop", new EventArgs()); Here is a link to it in action https://dotnetfiddle.net/TObnRG 
Wherever possible, I like to answer my own questions if I figure it out. This may not be the "best solution," but it's significantly cleaner than using a switch: //myAppplication.cs void TheMethodThatPopulatesTheNodeTree() { string[] nodeTitles = { "Title 1" , "Title 2" , "Title 3" }; Func&lt; object , EventArgs , object , Action&lt; object , EventArgs&gt; &gt;[] nodeFunctions = { ( s , e , v ) =&gt; ( s2 , e2 ) =&gt; { MessageBox.Show( v.ToString() ); } , ( s , e , v ) =&gt; ( s2 , e2 ) =&gt; { MessageBox.Show( v.ToString() ); } , ( s , e , v ) =&gt; ( s2 , e2 ) =&gt; { MessageBox.Show( v.ToString() ); } }; string[] nodeActionTexts = { "Pop a Messagebox!" , "Pop a Messagebox!" , "Pop a Messagebox!" }; //et cetera... for( int i = 0; i &lt; 3; i++ ) { subNode.NodeFunction = nodeFunctions[i]; subNode.FunctionValue = i; subNode.NodeActionText = nodeActionTexts[i]; } } In the NodeItem class, I'm using the following: //mynodeitem.cs public object FunctionValue { get; set; } public Func&lt;object, EventArgs, object, Action&lt;object, EventArgs&gt;&gt; NodeFunction { get; set; } and: public void SubscriberFunction( object sender , EventArgs e ) { nodeFunction( sender , e , functionValue ).Invoke( sender , e ); } I'm subscribing the control events like: //myAppplication.cs Click += NodeItem.SubscriberFunction; This may in fact be more convoluted than it needs to be. Apparently it wasn't clearly enough asked. In any case, I'll leave it up in case anyone else asks the same question. 
Yeah, what's the value for tablename? The error is going to be thrown from the reader = command.ExecuteReader(); line because that's the point where the DB is contacted, but the ExecuteReader function is the correct one. It is purely DB.
I really hope you do not believe this code is clean code. You have just confused the code a ton using these functions in a terrible manner. 
The Action vs Func implementations is a big reason why I wish C# used a Unit type instead of void. Same with VB.NET's Sub vs Function implementations.
Thanks for the correction.
I work in a system which has throws and some try catches at critical points, returns from legacy async calls, and the global error handler that just call Utility.HandeException(ex) method that does the logging, messages the user and decides what to do.
Without more information my guess is your string tablename is malformed or pointing somewhere that doesn't exist. You can always use SQL profiler to inspect the call to see what it is generating. 
There's not a general answer to that question. Ideally, you should be catching a *specific* exception type, and handling it. In this case, "where you go" will depend on what you need to do to handle the error. If you are building a library, it *may* make sense to catch and wrap *all* exceptions with your own exception type or types, then throw the wrapped exception. This allows code that uses your library to catch your exception, instead of having to guess at what sorts of exceptions can be produced by the code you're calling. If you are writing an application, it mostly depends on whether you know how to handle the error, and if you can handle it at your current location in the code. Hypothetically, if a file operation throws a FileNotFoundException, you may be able to take some different actions: * if you were trying to open a file to process the data in it, you probably need to handle the error by alerting your user and exiting gracefully. Depending on where in your code this happens, you may need to let the exception go all the way out to Main(). * if you were trying to open a file to write to it, this may be a cue to create the file. In this case, it may be worth alerting your user that something unexpected occurred, but it may not mean the program has to stop. This isn't a great way of dealing with missing files, incidentally, as exceptions are not for flow control: exceptions are for *exceptional circumstances*. Ideally, you should be throwing exceptions for cases that probably shouldn't occur in the first place. If they're things that *can* happen, you should be detecting the conditions that would produce the error and handling it that way. TL;DR: what you do about an exception depends a lot on what kind of exception occurred and what you were doing when it happened. In some cases, you may be justified in catching the exception and doing nothing, in others you may need to handle it and move on, and in others you may need to stop what you are doing entirely.
Generally if you run in in debugger it will catch unexpected exceptions for you. You should not need to throw in a try - catch at the top to get those.
In essence yes, the debugger is at a loss, but you should be going "an exception! I wonder where this came from" Having the debugger catch it let's you get all the runtime information about what caused it. This includes the stack trace and the state of any variables associated with the code that threw it. From there you should address the issue, or for more complicated issues, walk up the stack to find the real cause of the issue. This detailed analysis is much harder I'd you only have a console log of the stack trace. 
Are there some guidelines on when to prepare for exceptions? I almost always see try/catch around IO/database/network stuff for example, but usually they are "catch-all -&gt; revert everything" which some folks here have said is bad/code-smell
ISTR that MSDN has something to say on it, but it mostly boils down to: catch any and all specific exceptions that you *know* can be thrown and you *know* how to handle and can handle at the current level of the code. If you can't handle it there, or can't handle it at all, or have no reason to think it can be thrown, there ... don't catch it. Let it bubble up to a location where it can be handled gracefully. The code smell usually comes from catching System.Exception (if your database call threw an exception, you should probably at least attempt to rollback so the database isn't left in an inconsistent state--but you need to pay attention to the exception that was thrown, because there's no use trying to rollback on a failed connection). This tends to make for code that eats bugs that might be recoverable and sometimes throws new errors because it didn't handle the original ones properly. There *are* times and places for catching System.Exception, but it's not something you should be seeing all over or deep in the guts of your application, usually. If you're using things from the .Net Framework, MSDN usually documents the types of exception you should watch out for, and what can cause them. In many cases, you can handle this before making calls that would produce exceptions and either give your user a more useful error or just prevent the error from ever occurring. You should also check out the finally keyword. It sounds like something you're about to find useful.
Catch only the exceptions you're actually going to do something with.
At the risk of being "that guy": please don't use code like this in a production system. The "SELECT *" construct is inefficient, using more bandwidth and potentially disk IO to retrieve and transmit data you possibly don't need. It also makes it more difficult to track dependencies - what code is using which tables and columns in the database. But more important, creating dynamic SQL commands like this is just asking for trouble. It's going to be fragile code that's hard to maintain at best, and if there's any way that tableName can come from the user interface, you've got a huge SQL Injection vulnerability.
Pascal was specifically written to not be useful commercially, but to help students learn structured programming. Not having commercial applications limited the pressure to add non-structured features (like direct access to memory) and preserve its adherence to its standards. The point is that courses that use Pascal are emphasising educating students in how to program in a structured language, not training them in a specific technology that is likely to be obsolete in a decade. 
Dumping out Resharper suggestions isn't exactly helpful...
Unless I am missing the issue, myStudent is a new Student() and never has any values added to it, therefore myStudent.getLName() is empty. 
Put a break point on the "string query = "SELECT * FROM " + tableName;" line. When you debug it should stop on this line. One of the tabs on the bottom is called "Locals" (IIRC) and should list all the variables currently in scope. You should find tablename (and it's value there). I'm going with that value of tablename being an empty string. The error returned is pretty common when a table name is omitted from a select statement. 
What if I do not create the new student object, will I be able to call its method getLName anywyas to display the Advisor's last name?
your listStudents_SelectedIndexChanged method doesn't populate your Student class instance (named myStudent) with any data. You're simply applying all the data to the winform textboxes. private void lstStudents_SelectedIndexChanged(object sender, EventArgs e) { int selectedIndex = lstStudents.SelectedIndex; var myStudent = new Student { FirstName = StudentsList[index].FirstName, LastName = StudentsList[index].LastName, Major = StudentsList[index].Major, GPA = StudentsList[index].GPA.ToString("n2"), }; txtShowStudentFName.Text = myStudent.Firstname; // populate rest of text boxes... etc txtShowStudentAdvisor.Text = myStudent.LastName; MessageBox.Show(myStudent.LastName); } You'll probably want to add a property to student class for an CurrentAdvisor. You could setup Ids in each class and use the Id property, or simple use the last name. Depends on your relationship requirements between students and advisors. Also a few tips to make your life easier... first: [more details about properties](http://www.dotnetperls.com/property) you don't need to use a method to retrieve the last name, because you setup a property (LastName, with a getter). Meaning you can retrieve the the last name value by calling; string myLastName = myStudent.LastName; instead of string myLastName = myStudent.getLName(); second: you dont need to use fields to back properties, you can simplify a lot of your code with the following property declarations; public string FirstName { get; set; } replaces private string _FName; public string FirstName { get { return _FName; } set { _FName = value; } } hope that sheds some light, ask away if not!
Why don't you say where T is some thing? You can force it to be a specific type.
I think you can do this with [CodeContracts](https://msdn.microsoft.com/en-us/library/dd264808.aspx). They work like more advanced static_asserts.
If `T` is a method parameter, you could accomplish this with a more specific overload and the `ObsoleteAttribute`, e.g. void Foo&lt;T&gt;(T value) { // do stuff } [Obsolete("Foo() must not be called for type WrongClass")] void Foo(WrongClass value) { throw new NotSupportedException(); } And then configure the compiler to treat obsolete warnings as errors. This relies on the statically inferred type of course, and could be intentionally circumvented by explicitly calling `Foo&lt;WrongClass&gt;()`. If `T` is a generic class type parameter, I can't think of a built-in way to accomplish this. 
Thanks! That makes sense. 
I think that gets me 95% of the way there. Thanks a ton. It didn't occur to me that I could throw away the generic part and overload it with the specific type.
unfortunately I can't really rely on VS plugins (whcih that seems to use). This is part of a bigger build system and is usually not built from within the IDE.
The Obsolete constructor has an overload with a second parameter, `bool error`. If you set it to `true`, you'll have an actual compilation error. Took me years to notice that. [Obsolete("Foo() must not be called for type WrongClass", true)]
An alternative but more flexible method to what /u/tweq proposed would be to write an analyzer yourself. Using Roslyn you can *"easily"* write a program that analyzes the complete solution for forbidden code constructs. When such a construct is found then program would output an error message. When you have this program written, you can add it to the compilation pipeline by adding a new target with the BeforeCompile dependency in your msbuild file (the .csproj). In this target you execute the program. If the program outputs an error the compilation will stop and the error will appear in the Visual Studio Error List. This would also work when you compile outside of Visual Studio, as long as you use msbuild. It's more effort to do this, but you are much much more flexible. You could even add rules like "Use `System.String` instead of `string`. It's not very difficult to do this. Give me a bump if you're interested in this and want to follow the approach. I could post some demo code that I have buried somewhere.
You don't need the interface and you don't need the test implementation. You only test CustomerRepo in an integration test that hits a real database (localdb is a great candidate). Let's assume you have CustomerService(CustomerRepo injected). Here you use mocking a framework. You make sure your Find method is virtual. Using Moq, you'd have code like: var mock = new Mock&lt;CustomerRep&gt;(); mock.Setup(x =&gt; x.Find(It.IsAny&lt;string&gt;)).Returns(new Customer("userid")); var testSubject = new CustomerService(mock.Subject); testSubject.DoSomething("userId"); Now inside your CustomerService, when you call Find("userId") you'll get the object you setup. This will let you test your class without a database and in the fastest possible manner, both in test run duration and in shorted time to code. Don't make more work for yourself creating pointless interfaces and pointless test implementations. Don't give yourself false trust by testing db code without a real db. Don't test data consuming services with a real db. 
&gt; I'm not trying to write an analyzer but I'm very interested in Roslyn for generating code documentation. Roslyn is great, because it does not let you only access the methods, but also the XML documentation that (hopefully) wrote! &gt; Is there a list of what the various tokens mean? (like Trivia) The Roslyn code is very well documented.
Consider this the tough lesson about why version control is basically a necessity, even for small projects. 
&gt; That's not even valid syntax for Find. Find only takes a params... string. You can't specify a lambda on which to match. Sure you can: https://msdn.microsoft.com/en-US/library/x0b5b5bc(v=vs.110).aspx
&gt; No idea why you were downvoted Because the original context is different! The question relies on the section **Testing a Controller** and not an *imaginary* section **Testing a Repository** 😉 But the first paragraph suggests integration testing, which is not the point here. After that the author changes to unit testing, but overall his posting is quite hard to read, as the context is changed quite often without *warning*. So imho lots of voters do not read the whole story and so he got downvoted... And for a unit test one needs to mock away everything besides the system under test (which could be more than one class btw!) So yes, a (conceptual) *interface* is needed in order to do so easily. I like [NSubstitute](http://nsubstitute.github.io/) btw. Imho it has a nice and terse API :-)
He wasn't saying use a second one to handle your bad class, but to narrow down your good ones to only types of t that are valid classes. Do they have a common base class or interface?
Sounds like you're looking for source control. Check out [github.com](http://www.github.com), good documentation there. You can commit at any time which saves a snapshot of all your current files (not really a snapshot, but functionally similar) that you can return to at any time.
When posting, remember, from "formatting help": Lines starting with four spaces are treated like code.
If you're looking for reading from/writing to files, read about StreamReader/StreamWriter classes. They are pretty straightforward to use and they have all functionalities you need. You may also need to read about CSV/JSON/XML formats as they may help you. But I think the best solution for you would be to create a database and send data there. It's more complex than writing to file, but more beneficial for you in the long run.
You should really be looking at using a database for this, rather than using a file. Visual Studio and SQL Server Express will be a good start. Then something like Entity Framework to get the program to communicate with the database Something like this: http://www.c-sharpcorner.com/UploadFile/abhikumarvatsa/entity-framework-console-applications-with-sql-server-compac/ Or this: http://ef.readthedocs.org/en/latest/getting-started/full-dotnet/new-db.html Would be good places to start reading
Hi again, We solved this by manually adding a column to the table which stores enum values. I think we had a design flaw in the beginning, but this is how noobs learn. :) Thank you for your help and time.
I have been using if(x!=null) statements. This looks much more practical. Thanks or sharing.
Another option, that wouldn't require an extension method, is to have a public static BookViewModel FromModel(Book book) method. Both are more or less equal, but I have a slight preference for this one, since it restricts the view model logic to the view model, instead of putting it away in some static class.
Thanks for all this it is very valuable. &gt; Resizing forms messes with the layout a lot and makes the forms unusable, either put anchors or put a minimum/maximum size on both forms. I don't know why I haven't explored this more... I am always so frustrated with the seemingly erratic position of form controls from computer to computer. 
Need vs Good habit are two different things. You don't *need* an interface, but it's a good habit. Every time one class is taking a dependency on another - ensuring that's defined in an interface as a contract makes it explicitly clear the things your class can do. Interfaces also let you compose things together differently on demand. For instance with CustomerRepo, say I want to add a caching layer. Well, everything that depends on CustomerRepo now needs to be changed to CachedCustomerRepo, with CachedCustomerRepo taking a dependency on CustomerRepo. Oh, but in some scenarios we want to bypass the cache, so now I need to have classes need to take a different dependency that figures out whether it should be directed to the cache or not. Instead, if CustomerService takes a dependency on ICustomerRepo, then when we're spinning up CustomerService we can determine if we inject the CachedCustomerRepo or just CustomerRepo. 
https://xkcd.com/327/
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/327#Explanation) **Stats:** This comic has been referenced 1018 times, representing 1.1001% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cy3cgmy)
What led you to think it relies on VS plugins?
Find can absolutely take an expression.
persisting information from an application can be done several ways. The fastest is probably serializing a class into a file on the machine. XML Serialization: https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer(v=vs.110).aspx Json Serialization: http://www.newtonsoft.com/json You can also go with a database storage, where using a ORM is recommended but not required for the mapping your c# model classes to the database table data. SQLite is a flat database that requires no install to use, just a library. Works great for small/medium projects. https://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki There is also localdb instance, mssql, mysql, etc... that can be used but require installs. ORM's most commonly used are; Dapper: https://github.com/StackExchange/dapper-dot-net &amp; Entity Framework: https://msdn.microsoft.com/library/bb386876(v=vs.100).aspx
Explain the &lt;T&gt; part please. I have the most basic understanding of what it is doing but don't know enough to search out more specific information.
Interfaces: Good: LocalFileSystem : IFileSystem AmazonS3 : IFileSystem AzureBlob : IFileSystem IEnumable&lt;IFileSystem&gt;().ForEach(stripe over multiple) Bad: CustomerRepo : ICustomerRepo Any time your interface has domain specific words in it, like customer repo and the interface has the same name except it's now "I" + name, that shows it's pointless. Interfaces having 1 implementation (usages under tests don't count as implementations) are bad uses.
You don't unit test repositories it is worthless to do. Even if you're able to run linq code over objects in a unit test it's worthless. It doesn't mean linq is translated to sql/etc that it will work. Repositories under test **must** touch a real database. Services that consume repositories **should not** touch a database except if the test is a full vertical functional test (which in MVC would be posting to a controller) &gt;I like [NSubstitute](http://nsubstitute.github.io/) btw. Imho it has a nice and terse API :-) I agree that papering NSubstitute over Moq/others makes testing much easier and radically more readable. NSubstitute's dsl/api is far more discoverable than testing frameworks usually are. 
Instead of typeof(e), what you want is: typeof(T) or e.GetType()
That's for List&lt;T&gt;, not DbSet&lt;T&gt;.
List&lt;T&gt; can, not DbSet&lt;T&gt;.
List&lt;T&gt; can, not DbSet&lt;T&gt;.
[How to: Set the Tab Order on Windows Forms](https://msdn.microsoft.com/en-us/library/bd16a8cw\(v=vs.110\).aspx) from MSDN.
In WinForms, controls are tabbed through in ascending order of their `TabIndex` property. You can either set that value manually for each control, or see and set them with the Tab Order option in the View menu.
data is a List According to the OP's reference: private List&lt;Customer&gt; data = new List&lt;Customer&gt;();
&gt; You don't unit test repositories it is worthless to do. Even if you're able to run linq code over objects in a unit test it's worthless. It doesn't mean linq is translated to sql/etc that it will work. Repositories under test must touch a real database. Again: Nobody has disagreed to that as far as I see... 😏 Neither me, nor the OP or the author of the linked article... It was simply not the question! &gt; Services that consume repositories should not touch a database except if the test is a full vertical functional test (which in MVC would be posting to a controller) Again: Yes! **That** was the question 😃 As I have allready addressed above, it would have been better if you would have started with this part of your answer and not with the part, that describes how one would test repositories...
That's a good point. Makes sense.
So your code really doesn't make sense to me. Here are some options (haven't compiled these so there could be typos). Your generic method doesn't make any sense because `Enums.WorkflowStatus` doesn't have type `WorkflowStatus`. In fact, it isn't even a valid expression. You could make a generic method like: public static string GetDisplayName&lt;T&gt;(int enumId) { return Enum.GetName(typeof(T), enumId); } and call it like: string name = Enums.GetDisplayName&lt;Enums.WorkflowStatus&gt;(1); If you did that, I would use the [ExtraConstraints.Fody](https://github.com/Fody/ExtraConstraints) to constrain `T` to an enum type like: public static string GetDisplayName&lt;[EnumConstraint] T&gt;(int enumId) { return Enum.GetName(typeof(T), enumId); } I would question why you even have ints rather than enum values. If you had enum values then you could make a method public static string GetDisplayName&lt;T&gt;(this [EnumConstraint] T enumId) { return Enum.GetName(typeof(T), enumId); } Notice I've made that an extension method. So you could then call it like: string name = workflowStatusValue.GetDisplayName();
Oh, I misinterpreted him because I think he misread me. No, if the good ones had a common base class it wouldn't be a problem. That's what I meant when I said "Refactoring all of the 'good' types to have a common interface is probably too heavy". There is a LOT of code, and only a handful of classes that cause issues. I agree, though, that the "correct" answer is to have a common base type shared by the good ones, that is just not feasible at this scale and at this point.
Ah, I misread the "... you do not have to write a special parser or compiler. A Visual Studio add-in lets you specify the level of code contract analysis to be performed. " But, I had already seen that it was a separate static analysis build step -- which we already have and which I stated in the OP is not what I'm looking for -- so at that point I was just skimming out of interest.
&gt;catch (Exception) blocks are generally to be avoided in control flow. Can you expand on that? If I'm using an instance of a class, and that calls another class and then another class which is where the exception is thrown. I can catch it at any level and do something about it. Where should I be avoiding the catch? 
What I ended up doing was creating a lot of different types of exceptions of my own. I scattered them across the program whenever I could think of some new edge case scenario. I knew something could cause this to go wrong, but I didn't know how to fix it or deal with it at the time of writing that part of the code. So I just kept creating new exception types and put them all in the same file and didn't really implement the inside of any of the exception classes. Now I have roughly 10-12 different classes that all derive from Exception and I'm planning to merge them into 2-3 common themes. And I just want to figure out where best to place a catch without being redundant or inconsistent. For example one of the exceptions is EntityNotFoundInDbException. If I pass the entity into the class constructor, Is it okay to execute an insert into the database and then get back to whatever I was doing before the missing entity was found? So if class A called class B and that called class C where the exception was thrown, I think the best place would be to catch the exception in class B. Let the exception constructor do the insert and then call class C again to do whatever I was in the process of doing. 
Ah, I stand corrected. That's what I get for making assumptions.
There are two parts to this. 1) Don't throw System.Exception - It doesn't provide enough enough information to callers to differentiate between different error cases. 2) Don't catch the actual type System.Exception. This means you will eat everything, even if you have no idea what do with it. For example, what are you going to with a BadImageFormatException or a MissingMethodException? Those *should* crash your program unless you are writing a plug-in system. Instead you should catch the specific type of exception you know how to handle. For example, if you are trying to write to a file, you want one handler for FileNotFoundException to tell the user that the file does not exist and another handler for UnauthorizedAccessException to tell the user that they don't have permissions, and potentially to try to acquire the needed permissions. So for example, this is good: public void DeleteWrapper(string path) { try { File.Delete(path) } catch (FileNotFoundException) { Console.WriteLine("The file {0} does not exist.", path); } catch (UnauthorizedAccessException ) { Console.WriteLine("You do not currently have permission to delete {0}", path); if (this.TryRequestAdminRights()) { this.DeleteWrapper(path); } } catch (Exception e) { // This is the only reason you should catch System.Exception: logging and graceful termination Console.Error.WriteLine("An unknown error occured {0}. Terminating the application.", e.ToString()); Environment.Exit(2); } } And this is bad public void DeleteWrapper(string path) { try { File.Delete(path) } catch (Exception) { // I have no idea what happened here. What do I even do with this? } }
You should check out the awesome library [Humanizr](https://github.com/Humanizr/Humanizer), which does this, and much more, for you. 
Shouldn't it be something like if(mug.IsEmpty()) { coffeeMaker.DispenseCoffee(mug); } I hate seeing the object of an action be where the method is defined, if that makes sense. It's some kind of antipattern, isn't it?
Makes you wonder what the coffee could be drinking...
Right? It makes no sense to me. Bad developer got a job designing bad mugs?
Isn’t the if/else block supposed to be in a while (true) loop or something like that?
I believe you want to look into Jon Skeet's something Melody libary. It lets you do stuff with enums that the CLR allows but isn't supported by C# 
Well, there’s only so much room on the cup, so the code’s a little abridged. The instantiations are provided for context.
I was thinking it would be better if you did something like: myMug = new Mug(); myDispenser = new Dispenser(DrinkTypes.Tea); //I don't drink coffee if(myMug.Fill &lt; 0.1f) { myDispenser.Pour(myDispenser, 1.0f - myMug.fill); }
Even visual Basic ? That is incredible, is there like one example of it ? Just one, I am just asking for one.
This code violates a StyleCop rule! You need a space between the first character of the comment and the // signs. Make a new mug!
Another option is a java-style enum: public class WorkflowStatus { private WorkflowStatus(int id, string name) { Id = id; Name = name; _statuses.Add(this); } public int Id { get; private set; } public string Name { get; private set; } private static readonly List&lt;WorkflowStatus&gt; _statuses = new List&lt;WorkflowStatus&gt;(); public static readonly WorkflowStatus InSetup = new WorkflowStatus(1, "In Setup"); public static readonly WorkflowStatus InProgress = new WorkflowStatus(2, "In Progress"); public static WorkflowStatus Find(string name) { return _statuses.FirstOrDefault(s =&gt; s.Name.Equals(name, StringComparison.OrdinalIgnoreCase)); } } then you can use "WorkflowStatus.InSetup" when you need to specify the type, use the "Find" method when trying to determine which ones to use, etc. When you want the text, use something like this: var wf1 = WorkflowStatus.Find("in setup"); Console.WriteLine(wf1.Name); var wf2 = WorkflowStatus.InSetup; Console.WriteLine(wf2.Name); 
Bit offtopic, but why are you writing CRUD code? Are you gonna implement the same interface for every object-repository? By your code I suspect you're using Entity Framework. EF is already a repository pattern. Why are you making a repository pattern upon a repository pattern? It doesn't make any sense. It is completely redundant. http://stackoverflow.com/questions/14110890/not-using-repository-pattern-use-the-orm-as-is-ef
You were already given examples [here](https://www.reddit.com/r/csharp/comments/3wyqw6/can_you_program_an_os_from_scratch_using_c_the/cy044i9). The language used doesn't matter, as long as the compiler emits CIL. These projects take CIL (the .NET common intermediate language, a type of assembly language) and produce native executables from it in some form or other.
 Person me = new Person(new CoffeeMaker(), new Cup()); for (;;) me.DrinkCoffee(); i'm pretty sure the Person class should be responsible for all of the logic needed to ensure there's coffee in the cup to drink.
Below are two classes, one has only state (properties), the other has state and behavior (properties and method). The one that also has a method is considered NOT a POCO but a heavy business object. as /u/CodeBlueDev said, this could also be considered a data transfer object (DTO). In my solutions, where I have multiple projects, I have a single project that only has POCO objects that all other projects reference. class Person { public string FirstName { get; set; } public string LastNAme { get; set; } } class Person { public string FirstName { get; set; } public string LastNAme { get; set; } public static void SavePersonToDatabase(Person person) { Console.WriteLine("Person saved"); } }
Assuming that filling the mug is always successful and no one left the machine empty. ;)
Also, shouldn't `Empty` really be named `IsEmpty`? Otherwise the name suggests that it's a property for the null-object pattern.
the amount of nerdery in this thread makes me smile
Yes. The code doesn't make sense because the conditional will always evaluate the same based on the contents of the constructor.
Where should var be used? 
The type declaration of "Coffee" in "Coffee coffee = new Coffee();" could be var. I'm bothered more by the "Coffee coffee" with the only difference between the symbols being the capitalization.
I got a similar one on amazon: http://www.amazon.com/Programmers-Coffee-Ceramic-Choose-Between/dp/B010Y0QZEK 
why floats? Because crumpets?
Dude thats obviously java.
I know how var works. I'm just saying what you called a type declaration is not a type declaration.
C# requires you to declare variables before you can use them, although you could shorten it to `var coffee = Coffee()`, in which case the compiler will infer the type. Why require declaration? What if you typed `cofee = new Coffee()` while assigning to `coffee` everywhere else? Would you prefer to see an error, or just automatically create a `cofee` variable? Different language designers will give different answers. Many of the rules in C# are aimed at enabling smarter tools to analyze and manipulate the code.
Because lots of times it won't be Coffee coffee = new Coffee(); IE: IBeverage beverage = new Coffee(); 
Never messed around with ASP.NET, think I know what I will be doing over the weekend now. :)
Wow, this code is terrible. If you need a cup with such a bad code then maybe you should switch to project manager in stead?
Nowhere but foreach loops in my opinion. It makes code less descriptive.
 var barista = new Barista(LatteArtSkills.Max); var cup = new Cup(CupStyles.CSharp, Capacity.FiveHundredML); var cupMonitor = new CupObserver(cup, barista); public class CupObserver { if (cup.HasCapacity &amp;&amp; barista.Available) { barista.Refill(cup); } }
OP wonders where he or she can find the mug, Reddit corrects the code...
The tight coupling sickens me
Need to catch the pot out of coffee exception that the CoffeePotFactory can throw as well. 
Thats amazing! Gonna share at work.
Could be some next-gen badass tutorial for C#: Assert, Linq, Events, Lambdas...
That was beautiful, thanks.
I'm not going to claim this is the best approach, but this is how I would do it... I would put all my game logic in a web service and have a web front end that does all of your UI (fake console, sounds, and such). Then you can create an app using Xamarin or make an app for each platform that has a web browser control that displays your front end. That's just how I would do it if tasked with it today. One advantage to this approach is you can easily make it multiplayer since you have it web based.
Crumpets float!
Your "vaules" variable is set to an empty string. Also, you are passing in a whole dictionary to String.Format so you will get something like: "DELETE FROM TableName WHERE = 'System.Collections.Generic.Dictionary`2[System.String,System.String]" I assume what you actually want is to pass something like a Tuple to the function like: public bool Delete(Tuple&lt;string, string&gt; id, string tableName) then your query would be: var query = String.Format("DELETE FROM {0} WHERE {1}='{2}'", tableName, id.Item1, id.Item2); Or if you want to delete everything in the dictionary with this function you will need to loop over each KeyValuePair for the dictionary and call that query. 
Hi thanks for replying, I am have to use public bool Delete(Dictionary&lt;string, string&gt; id, string tableName) although now I hace just changed the var query slighlty to var query = String.Format("DELETE FROM {0} WHERE {1}='{2}'", tableName, id, id); I adjusted the var query now it has this error could not find a non-generic method 'Delete' that has parameters: id, column, table. therefore I think its due to the var query and how to just the dictionary. so i guess i need to somehow implement the dictionary within the statement 
Oh you! good one.
Thanks, always looking to expand the portfolio, just never got round to ASP.NET.
But where is SQL Clause?
Thanks for adding the comments as I was able to share with my wife and get a laugh from her.
:D
Cute but if you have to add comments to your code, it's not readable.
Consider refactoring your data structure access to abstracted objects/APIs while you're at it. This could make future optimizations/changes/tests/experimentation simpler to manage.
This one is new to me! Thanks! https://msdn.microsoft.com/en-us/library/ms173226.aspx
Can you give me an example of that refactor? 
Apparently Santa should have checked his list three times instead, since he seems to have his naughty kids and his nice kids mixed up. The elves need to write more unit tests.
I agree to everthing, just a comment for the OP: &gt; redesigning for proper/fast multithreaded queries That should work. You can either parallelize the outer loop or the inner loop on the nested lists. In any case, I'd recommend using /u/tweq advice on refactoring the inner loop. Regarding your edit: I guess you've put the outer loop in the Parallel.ForEach. Is this list large enough? This could be a hint that the bottleneck is in the inner loop. Again, refactor as /u/tweq proposes and then parallelize the inner loop. 
True true, then it would have been caught following the refactor. Luckily, it was caught in code review.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Need to write a program which merges\/syncs two ms access databases \[C#\/Windows forms\] can anyone help me?](https://np.reddit.com/r/programming/comments/3xko84/need_to_write_a_program_which_mergessyncs_two_ms/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Oh yeah .. Larman. We used that book when I was studying Computer Science. Great book.
What are you trying to merge? Tables, all data?
Tables and all data, and it has to be in c# but I cant get anything to work. I would be happy if anyone could help
Right now your panel 2 changes to green only when their boundaries intersect. Try checking for the panel's current color, then switch to the other one. i.e. if (panel1.Bounds.IntersectsWith(panel2.Bounds)) { if (panel2.BackColor == Color.Green) { panel2.BackColor = Color.Yellow; } else { panel2.BackColor = Color.Green; } }
/r/learnprogramming would be a better place to ask this sort of question If the assignment is open ended as it sound then this is could be rather complex to do – so I'd carefully read the question again I am going to assume the tables have same structures in both databases and you are just going to merge data - as that will keep it simpler and give you an idea how you might approach it, there is a lot of work still to do from what is outlined below. It would be sensible to do a small step at a time and check you can make each work First you need to be able to connect to the Access databases - see [link](https://msdn.microsoft.com/en-gb/library/aa288452%28v=vs.71%29.aspx) First you to identify when two rows are the same record – you may think ID, but if the two databases are both being used there may be a clash in IDs e.g. in old db, id 34 may be John Smith and in new DB, id 34 may be Joe Jones. (One way around this is if db has different Ids allocated, e,g, old has odd numbers (1,3,5,.. ) and new has even (2,4,6,…)) Of course you may have two different “Joe Jones” The approach I would take is to define an object to represent a row on a table to be merged - e.g. if table Merge_Me has columns ID int, Name TEXT and Address Text the object would be class MergeMe{ public int Id {get; set;} public string Name {get; set;} public string Address {get; set;} public string CalculateKey(){ //TODO work this out based on how you identify which record is same } } Then, assuming the tables won't be that large, I would load both new and old database table records into dictionaries (one for each database) - note you can't have duplicate values CalculateKey() from a database Dictionary&lt;string, MergeMe&gt; dict = new Dictionary&lt;string, MergeMe&gt;(); foreach (DataRow dr in dra) { var row = new MergeMe{Id = dr[0], Name = dr[1], Address = dr[2]}; dict.Add(row.CalculateKey(), row); } Then you need a way to check two records are the same or modified – which means comparing all the values not used to identify which record (or should be ignored because they are local only) Then you could create a method something like ( you also need methods CopyRecord, AreSame &amp; UpdateRecord) void DoMerge(MergeMe source, Dictionary&lt;string, MergeMe&gt; destinationValues, Connection destinationDb){ var key = CalcKey(source); if ( !destinationValues.ContainsKey(key) { CopyRecord(source, destinationDb); return; } if (!AreSame(source, destinationValues[key])) { UpdateRecord( source, destinationValues[key], destinationDb); } } You then need to loop around all the rows read and compare them with rows in other database
I did put the parallel foreach on the outer loop. When I get back to the computer later I'll take a stab at using it on the inner loop and see what impact that has. The outer loop is the large one. The inner loop always has 9 items. 
Write a script to export the tables as csv files using VBA.
Secondly, lol, my 'made up' statistics? No man. Nothing made up there. MS has utterly failed to enter the mobile/web market. COM died a horrible gruesome death. It was resurrected in .NET and that's failing too. You want statistics? lol, okay. You tell me what language is growing and what is dying. http://www.indeed.com/jobtrends?q=asp.net%2C+angular&amp;l=&amp;relative=1 
Enterprise Architect! LMFAO. Of an enterprise of one, maybe. Go away schmuck. No more of your nonsense.
Your comment about "I have thought about using HashSets, but that would require me to change a lot more code" leads me to belive that you might pass around this `List&lt;List&lt;Object&gt;&gt;` around your code base and do queries on it. Simply wrapping these data collections around custom classes and exposing methods to do these custom queries might be best. For example, and note that you should use a more appropriate, meaningful class/method names for your particular application usage: public class MyCollectionOfCollections { private List&lt;MyCollection&gt; Lists = new List&lt;MyCollection&gt;(); public List&lt;MyCollection&gt; DoSomeQuery() { var listsThatMadeTheCut = new List&lt;MyCollection&gt;(); foreach (var list in Lists) { if(list.IsProp1SumGreaterThan(X)) continue; if(list.IsProp2SumGreaterThan(Y)) continue; var prop3Counts = list.GroupBy(l =&gt; l.prop3); if (prop3Counts.Count() &lt; X) continue; if (prop3Counts.Any(p =&gt; p.Count() &gt; X)) continue; listsThatMadeTheCut.Add(list); } return listsThatMadeTheCut; } } public class MyCollection : IEnumerable&lt;MyObject&gt; { private List&lt;MyObject&gt; MyObjects = new List&lt;MyObject&gt;(); public void Add(MyObject myObject) { MyObjects.Add(myObject); } public bool IsProp1SumGreaterThan(int lowerLimit) { return MyObjects.Sum(l =&gt; l.prop1) &gt; lowerLimit; } public bool IsProp2SumGreaterThan(int lowerLimit) { return MyObjects.Sum(l =&gt; l.prop2) &gt; lowerLimit; } public IEnumerator&lt;MyObject&gt; GetEnumerator() { return MyObjects.GetEnumerator(); } System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return this.GetEnumerator(); } } In this case, a few key things: 1. You pass around and bind your API against a `MyCollectionOfCollections`. This way if you change your underlying data structures, or choose to add more collections the rest of your application API _doesn't care_. It makes it trivial to add tests and try different optimizations out. 2. I've eliminated the nested collection type (that is, the `List&lt;List&lt;MyObject&gt;&gt;`), so now if `MyCollection` were to be refactored internally to be a `HashSet&lt;MyObject&gt;`, no problem. You could even do things like have multiple combinations of `List&lt;&gt;` and `Dictionary&lt;,&gt;` and `HashSet&lt;&gt;` to optimize each query type. 3. I've also moved the `.Sum(l =&gt; l.prop1) &gt; X` check into its own specialized (and named) method. (Again, use a meaningful name for your usage.) This makes it A) easy to change _how_ you do the check, and B) make your high-level query more readable. Note that in the case of "B", I would really only consider it "more readable" if it had a meaningful name, perhaps something like "IsTotalCostGreaterThanIncome". I didn't refactor the other checks (I'll leave that to you). In this case, let's look at point `2` above. Now we can refactor the entire usage to eagerly calculate the sum of `prop1` as items are added: public class MyCollection : IEnumerable&lt;MyObject&gt; { private List&lt;MyObject&gt; MyObjects = new List&lt;MyObject&gt;(); private int SumOfProp1 = 0; public void Add(MyObject myObject) { MyObjects.Add(myObject); SumOfProp1 += myObject.prop1; } public bool IsProp1SumGreaterThan(int lowerLimit) { return SumOfProp1 &gt; lowerLimit; } ... } Now our original `if(list.Sum(l =&gt; l.prop1) &gt; X)` query is done instantaneously. The cost is instead pushed to the original collection creation where perhaps the impact for the user is mitigated or inconsequential. Of course, this also assumes that the data collection is a bit immutable. If you can remove items, then you can subtract from the total. But if individual `MyObject` instances in the collection can change, then you may have to consider other ways of doing this. _But that's ok_ because now that you've abstracted the internal implementation details of _how_ this is calculated, it becomes much easier for you to experiment or overhaul these details. Speaking of which, if you can also move your data/usage to a more immutable state, it should also make it trivial to add parallelized queries to your data. Though as we really don't know your specific usage, this may not be a viable idea. EDIT: I forgot to mention, I purposefully implemented `IEnumerable&lt;MyObject&gt;` on `MyCollection`. You don't have to do this, it just makes transitioning away from (or continuing to use) your LINQ-based queries much easier. If you find that when you're done you don't want to be iterating or querying directly on `MyCollection`, feel free to remove it. Or you can keep it if you find doing some simple iteration-based queries on it to be fast enough and convenient enough.
I think the problem you're having is everyone is giving you examples that are far and away more complex than a beginning programmer is going to understand. When in reality constructor overloading can be applied in much simpler situations. There are several reasons why you may want to overlaid constructors. One really good "why" is for generating objects with default values. Let's assume you're building a simple calendar app for tracking calendar type things. One such class that you might have is CalendarEvent defined as '''' public class CalendarEvent { public CalendarEvent(DateTime start, DateTime end) { Start = start; End = end; } public CalendarEvent() : this(DateTime.Now, DateTime.Now.Add(TimeSpan.FromHours(1)) { } public DateTime Start { get; set; } public DateTime End { get; set; } } '''' Albeit a bit contrived, what this does is gives two constructors. One that allows you to create an event with a start and end time that you define or an event that starts now and ends in an hour. The second constructor assigns the defaults by calling the other constructor on the class (that's what the call to 'this' represents) and passing the default values. Sorry in advance for any formatting issues as I'm doing this from mobile.
Don't update the 1st view from the 2nd. Update the data that is the source of the 1st view. Otherwise you'll have a circular dependency where the 1st form depends on the 2nd form and vice versa. The 2nd form can have an event on it that tells the first form to update/re-bind to it's data.
Fine, I apologize; allow me to set my annoyance aside for a moment... If you worked with me, this is probably what you'd hear from me: &amp;nbsp; People that make blanket statements such as "If you have to add comments to your code, then it's not readable" drive me up the wall and is indicative of a person that aims to copy what those he/she feels came from someone else superior to themselves. It feels like this person is simply parroting back what they read on the internet without giving it any real though. To me, saying that needing comments is a result of otherwise unreadable code is like saying "If you have tattoos, then you're not a nice person." which brushes *argumentum ad lapidem* and is honestly just Asinine. Development isn't that cut an dry and all comments (or practices) like that do is hamstring collaboration. Instead, why not use different techniques intelligently? I believe that good code is self-documenting in that it can be read like a book, so I'm in partial agreement with you there. However, NOT commenting your code on that same premise is ASININE. &amp;nbsp; Using the "read like a book" analogy, would you ever claim to understand the intent of every line or paragraph of any book simply because it is written in plain English? No, you wouldn't because you don't necessarily know what the author was trying to achieve by writing any one line or paragraph and to assume that you do is borderline arrogant and will probably lead to some drastic misunderstanding of what is written. This is why people, when studying a works, make notes in the margins. This is why there are also books out there that have annotations pre-printed in extended margins. &amp;nbsp; Well-factored code should be pretty close to readable in this way, but sometimes (a lot of times, imo), the intent of well factored code isn't clear in terms of 'WHY' the developer wrote it a certain way or why he's doing it all, and you can't always show intent through good factoring or efficient naming (see my sarcastic method name in a previous reply). In fact, Java devs do that a lot (long method names), and while I don't think it's wrong because clarity is king, I hate that particular concession. I prefer to have that kind of textual noise in comments rather than in my method and variable names most of the time. One could even argue that getting too ridiculous with your naming will make your code look too ... NOT .Net. This isn't necessarily wrong, but when possible, I prefer to have the entire application look like the main framework it is using, and the least I can do is keep to concise naming conventions, and then place any explanations or complexities into comments. This is a preference that I have had work better than anything else. I have extensions that hide comments in the case there are noisy classes (usually complex domain classes), because I believe in leveraging your tools vs. adding noise to the actual code in the name of clarity. In other words, there are other (maybe even better) ways to achieve clarity. But for the record, I don't usually comment every line in production code. Usually I only comment code that I feel could be unclear as to why I'm doing what I am doing. &amp;nbsp; In this case, I'm having some fun representing a song in coding terms. More importantly, I'm representing the song in a way that *I* interpret it. For example "He knows when you've been sleeping" -- I interpret "knows when" as an event listener, but I don't expect that most people would have made that connection in the same way that I did, so I put it in the comments. Rather than put the actual lyrics in the comments, I chose to make it look more like something I'd write in an actual application. Not that I would have written that particular comment in application code because the subscription to the event speaks for itself, but that was a middle ground I chose for the sake of humor.
Thank you! Just the answer i needed to know :D
It is all about making code quicker to write by avoiding you having to do lots of extra steps - e.g. creating a list you can pass in an array with values to initiate it with, but you can achieve the same adding values afterwards it just needs more code. Sometimes you want the same type of object but don't want to provide all the details or need to provide a completely different set of details - e.g. you may want to create a DateTime object for the very beginning of day so may create it as var dt = new DateTime(2015, 12, 20, 0, 0, 0); but it is nicer to write var dt = new DateTime(2015, 12, 20); Somewhere else you might not have the year, month and day but instead have a single long value for the number of ["ticks"](https://msdn.microsoft.com/en-us/library/z2xf7zzk%28v=vs.110%29.aspx) (e.g. if data coming from a web service ) so you can then do var dt = new DateTime(ticks); 
are you making a wpf app? if you wanted to represent two-way relationships between people, like friendship, it might make sense to use a graph as your data structure. what you are proposing seems more like A "likes" B, but B "dislikes" A
I don't have the time to type out a full fledged answer right now, but I will return to this reply if there's the need. An important thing to understand is: a constructor is just a method, that "constructs" an instance of a class. So every constructor is a method but not every method is a constructor. If it hasn't been answered in a clearer way by tomorrow I'll do it then. Cheers!
Didn't know it existed. Why isn't it in the sidebar?
Now that subs can have two sticky posts, this is a great idea. I think the the top sticky post should have links to related subreddits, learning subreddits (like /r/learncsharp and /r/learnprogramming) and a list of reference/self-study books, an overview of the rules, a link to the wiki, etc. It would make these things way more discoverable for those using mobile clients too, since the sidebar is usually hidden away there. Actually, now I'm motivated. I'll write the post myself. Edit: [here's](https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/) my post. Please reply with suggestions! I'll get around to expanding the content and adding a Table of Contents sometime.
I've suggested something like this to the mods before. I was told that without the content from the learners, there wouldn't be enough content in this sub. But maybe that's changed, and maybe sending them that way is more feasible now than it was before. There's also the problem of active voters in this sub. Without people upvoting interesting content and downvoting posts better suited for other subs, the learner posts end up on the front page. 
No. ^(well, maybe a little) I think that the sub should have a topic. Seeing as there is a /r/csharp and a /r/learncsharp, it is at least implied that the former should be discussion about C# and the latter should be discussion about leaning C#. As it is, the first takes both roles and makes it more difficult to use it for its intended purpose. Also, if we manage to revive /r/learncsharp, it will turn into a sort of self-directed FAQ about the language, while this sub can be about the language itself and its ecosystem. Would this not be more useful to everyone involved? 
Done!
Pluralsight is probably one of the best sites out there but Microsoft virtual academy is also really good. If you are going to be doing webforms do some research on the mvp pattern, you will thank Mr when you have to maintain what you did later.
Oh, okay, thanks. I guess I'll use blend then 
You're all noobs: return coffee.Empty ? coffee.Refill() : coffee.Drink();
No. I've worked for Nortel Networks. Morgan Stanley. Safeway. GM. My software is running at intact and numerous other major insurance companies. I have the creds. Why would a frame work exist in the browser. It's just a client. Do you think all JS is hacky scripts that it was in 1999? That's when es3 was released. ES 4 was abandoned and rebuilt into ES 5 and it changed what javascript was. This isn't news. It happened 7 years ago. You said I didn't have stats and there they are. Look at the graph. Which is dying and which is growing. That's only one popular framework too. React is great for your views. Meteor has a bunch of promise. N really I don't mean to disrespect what you do. I'm sure you're quite good at it. But it seems you don't have much experience in Web or mobile applications. The things they are doing with Cordova in javascript are basically fixing massive problems that Java and. Net n c# n x code other big platforms just didn't solve. Yes. It makes sense to have server side JS. It makes all your code very portable. Client/server code is also dramatically 'the same' and is easily shared. Isomorphic JS... just a single example, it allow you to easily preload and pipeline pages to dramatically improve performance. That first page load is critical to usability and hugely critical to a sass company's success. You can literally run and cache each users top 100 pages and searches, actually run on the exact same code pages are built from natively in the browser and be ready with 0 code being run when your user hits that page in real time. Static html is sitting there waiting to merely be downloaded. Isomorphic javascript works and is seamless. Someone has an ancient browser or there's some kind of issue? You don't even need JS running to serve the pages. It's the kind of thing that can save a company millions to billions. It's what makes a search engine like google succeed where others have failed. And despite the fact that there are major accounts reconciliation frameworks that do indeed operate in the browser it's ridiculous to insinuate major things are not working from mobile and the Web. The whole world is running on it. Including its biggest corporations. Browsers are not only consumer level clients. Portable lightweight maintainable Web pages run the largest companies in the world. Web applications drive enterprise. It's laughable that you're claiming that JS isn't capable of building en enterprise level application when those same enterprises, like your little accounts app, are presently running in freaking excel. N really. Again. If node can run Uber and Walmart and eBay I am pretty sure it can handle some accounting software. It's elegant. And I didn't even mention Npm. Yes, I may just work for Pizza Hutt one day. They're the kind of massive company that can afford my services. But I would be 'running' Pizza hut. And I would clearly be doing it from web browsers.
My advise would be that good companies are not looking for a list of frameworks you can use. They will probably ask you to write some plain C# and you will need to know how to write clean tests and implement simple solutions. (Not directly related but perhaps a tip to help you) In my experience it is better to use all the time in an interview to write half a solution well with good tests and code you are happy with than to solve the problem in a rushed way. Edit: there is no harm in applying to any and all companies even if they say they are only hiring snr devs. Just remember to tailor your CV and write a cover letter unique to each company just to show you care about them and you are not just dumping your CV on everyone. Given your position though, do look for junior positions as a priority. Oh and there is plenty of work in Chicago to be had ;) Edit...again: I just reread and remember your unit test section. Drop everything and learn how to test. Not just unit tests but all forms of automated testing. This is one of the most important things in our industry right now and is widely wanted by the more modern development companies.
Thank you for the feeback, the full list of diagnostics can be found here: http://www.viva64.com/en/d/0368/#ID0EZKAK
&gt; I have a little bit of experience with mvc5. most people go the other way. I imagine that it would be harder to learn webforms from mvc than the other way around. especially if you havent done any event driven programming before. like /u/bobtjanitor says, pluralsight will help alot. I dont have a specific book, but you should look into events, delegates and understand these. As far as the HTTP process goes you should be okay though. one thing to keep in mind is that webforms is not as 'separate' as mvc. Things happen onclick on the backend, as it uses javascript to do postbacks behind the scenes. One of the hardest things i'd imagine is not getting to use Razor, and having to bind things into literals. It depends on how your company use webforms as well, since best practises changed a lot during its main lifetime. My honest answer? you were probably hired knowing that you didnt have webforms experience. jump into your companies code and mess with it (obviously dont check anything in) - that way you will learn webforms and learn the companies processes at the same time
As a lead developer on a suite of WPF software, the post above smells like horseshit :)
StreamReaders don't dispose themselves, so that does need to be handled separately. Though what most StreamReaders actually do when disposing is to call Dispose() on the underlying Stream object. The behaviour might be different for each StreamReader so it's safest to always call Dispose(). var sr = new StreamReader(AuthResponse.GetResponseStream()); Console.WriteLine(sr.ToString()); sr.Dispose(); C# wraps the above with the ```using``` keyword: using (var sr = new StreamReader(AuthResponse.GetResponseStream()) { Console.WriteLine(sr.ToString()); } 
Good post, so why isn't this a sticky yet?
Is that not allowed?
Check out the [dotnetperls tutorial](http://www.dotnetperls.com/process) on using Process.Start. Also, you can get the filename the user selects from the openfiledialog.Filename property, and use that when calling process.start: Process.Start(OpenFileDialog.Filename); Edit: Oh yeah also, please read the link posted by /u/canton7 in regard to posting.
What variable are you trying to switch on? I.e. the enum is kind-of irrelevant, you need a variable to switch on and some states to capture. E.g. int state = 5; switch (state) { case 5: // this will be called; break; case 6: // this won't be called; break; default: // this won't be called; break; } So change the int to your enum and the cases to instances of your enum and you should start getting sensible behaviour....
&gt; Should I just create 2-3 ASP.NET MVC applications, create a resume, and start job hunting? Yes
Are you sure you’d be getting any sleep with that much coffee?
Sounds like you've got a good grounding in most of what you'll encounter in a .Net job. Strongly recommend learning about testing too, both unit testing and how to approach testing the behaviour of a piece of software. Given that you're comfortable with ASP MVC, you'll pick WebAPI up quite quickly, there are a lot of similarities but some gotchas in behaviour differences. Lastly, while async code isn't essential (I've been at my job about 18 months now), it's very useful and becoming much more important.
Im using a simple TCP connection with Stream Writers and Readers to get and send data. In my small test project, this gets caught correctly (client closes without closing the stream), but the same code in my MVVM pattern project crashes. Any ideas?
The catch block is not missed. This is just the display of the first chance exception. If you continue running with the debugger then it will enter the catch block. You can turn this behavior off in the dialog that pops up, there's a little checkbox in the lower area.
as long as you dont catch the fish for them ;)
This is Unity which has its' own engine for managing state. I don't really know Unity but having a look a your example it seems to be mixing the 'hunger' variables with a 'time' parameter - i.e. you seem to be kicking the point the hunger would trigger ever into the future....
In vs2010 theres no checkbox, only * viewdetail * enable editing * copy to clipboard And I cant find an option in the debugger menu either. And both project have the same settings, so my other project's debugger just stops short.
That's probably a better idea. We could try to redirect more general questions over there but keep the C# specific ones here? That might help with concerns people have raised about a lack of content. 
I've already talked to the mods about it, and they're discussing among themselves about what to do regarding subreddit rules, sticky posts, etc.
This is *entirely* the wrong subreddit for this kind of post.
Heh, I read your post and thought "Nah, no-one would ever post a screenshot of code". This was the next post I visited, saw the screenshots of code...
Restarting VS usually fixes this as was already said here, but if you want to know for sure what's locking a file, try a free tool called Lock Hunter. 
Sounds like you wrote it already :)
Glad you have LINQPad, amazing how many people do not know about this awesome tool. There's also JustDecompile (but it's by Telerik) and I frequently use Fiddler (also owned by Telerik now). Not sure if you want to include ReSharper or StyleCop (StyleCop comes with VS now).
It's a small optimization but may well add up, if the inner loop is always 9 items then unroll the loop and remove the for/for each. 
Note to people who : I think you can still get a full 1 year resharper license with a valid .edu email for free. Picked one up when I started 5-6 months ago and all products are still working with the license :).
To **not** use LINQ for everything.
I wish I would have avoided working with SharePoint in any way. 
That gives you a byte array which is the file, not the pixel values. These are two very distinctly different things.
Reflections. I've written quite a few generic classes that save me a lot of time rewriting things for particular objects.
Amen to that.
Learning the framework classes better in the beginning and getting on reflection earlier. Reflection is like magic.
What do you mean by simply solve problems with code? Would you consider the utilization of these frameworks and libraries as solving simple problems with code? I've done courses on Lynda and Pluralsight on these frameworks and libraries specifically while working along and it makes sense to me. Now I will build things without guidance. edit: build
I actually just plunked down the cash for the JetBrains toolbox. All their tools. Since I already had R# Ultimate, it was only 199 for 2 years, then 149/year after that. I'm pretty satisfied with that price. They also just came out with a SQL IDE, so I'm pretty excited to check that out.
I've used it since day 1. So... Nah...
As someone who's been in the healthcare industry for the past 7 years I want to mention that you should become very well versed on how to manipulate XML and parse random text files. A very large area of healthcare that is often misunderstood is HL7. They come in file formats such as plain text and XML that will require you to parse them. They let you do things like pass patient data around between systems, create and receive electronic labs and other types of orders, and send things like insurance claims to the proper clearinghouses. Understanding [the various formats](http://www.hl7.org/) and how to manipulate them in C# is a huge skill to have when it comes to finding jobs in this industry. Let me know if you need any help, I can point you towards some good resources. 
It'd be good for me to work in health care because initially at the beginning of my college career I was set on nursing so I learned a lot about evidence based practice, disease processes, labs, medications, etc, I used EPIC daily. But I couldn't give shots and disliked the disease contact. I found applications development much more interesting and I love learning this everyday. I'm curious about what other things I should know besides XML specific to healthcare.
Good call, I didn't consider that. I don't work with imaging enough to really realize there might be a difference.
While written in VB.net, I know of an individual that wrote [FastPix](http://www.vbforums.com/showthread.php?586709-FastPix-Rapid-Pixel-Processing-for-Dummies-and-Dudes).
TPL - https://msdn.microsoft.com/de-de/library/hh228603(v=vs.110).aspx In particular Dataflows. 
I wish I was born smarter so I could work at better company's on more important projects.
Someone wants to drag me down the SharePoint path, but all I have in my defense is anecdotes I've read online. Please, will you share more anecdotes so I feel even worse about my grim future?
It allocates memory that needs to be reclaimed by the Garbage Collector.
You actually can. If you have any kind of student email you are eligible for their 1 year free license for the whole jetbrains kit. And if you don't have that, you can just send them a mail with some sort of evidence of studying, and they will manually check whether you're eligible or not. 
Well, I'm mostly kidding. I have been doing work with SharePoint for some time now, and it's actually been a good move financially. It can be frustrating because, if you are dealing with the older farm solutions, which are deployed and run in-process on SharePoint servers, there is a lot of frustration before you can even begin to get down to work. First you need a dedicated dev environment with SharePoint, then you need to deal with how slow the develop/deploy/debug cycle is, and there is usually some frustration with some nuances of the platform. Once you do get going, you realize your locked into a slightly out of date version of the .Net framework. Furthermore, to add insult to injury, the dev tooling from Microsoft has historically been complete garbage - only recently (3 years) being really usable. The platform architecture itself is both bizarrely loosely coupled in some places and at the same time also tightly coupled in others. There are even legacy COM issues to deal with. If you are doing SharePoint development in the modern era, and are able to do everything you need to do with the new SharePoint Add-In (a.k.a. App) Model then you are able to take advantage of modern web development techniques. In this case you have the ability to use modern .Net (or anything actually) on the back end. 
That's a question for the mods (I'm not one). Personally, I'm against it as well, unless the blog has sincerely useful content that is thoughtfully researched, well-written, and *isn't* a straight rip from some documentation or another blog. A good example of a blog I'd be okay with being promoted is Scott Hanselman's blog. In other words, good blogs are okay, shit posts get removed and warned, then shadowbanned via automoderator on second offense.
Didn't exist when I was starting out, but read c# in depth. 
this seems to popup sometimes. If you're going to make a tutorial for newer people to follow, try to relate them to the environment. Use the same application(s) they would be using. Visual Studio 2015 is free in the community edition, and you can install it side by side if you still need your 2005 for something. I'm going to have to agree with /u/angularbeginner here...
&gt;There are even legacy COM issues to deal with Pretty much everything you do programmatically in SharePoint has to go through the SP.SPRequest COM object.
I'm sticking to only C#-related material, because that's the theme of this subreddit. If people want more reference material, they can ask in one of the related learning subreddits.
Yep. There are a variety of tools to deal with disposal / memory leak issues because of it. 
Why?
So does pretty much everything.
Nice. If I don't work with a team or mostly on private projects, would you say it is worth transitioning?
I don't think so. Not really sure what you mean exactly.
Onion Architecture. For the first half of my career, my "business logic" basically amounted to pass-through, static "manager" classes. Learning about Onion, coupled with the excellent book Domain-Driven Design brought me to the next level. Would've been nice to have those tools in my pocket when I first started out.
I wish I could go back in time and murder C++/CLI in its sleep. 
So... no link posting? Just do away with the feature?
I wish the company I work for did the same, so knows maybe it's something we can work towards! 
Reeeeallly. I'm going to have to check out that SQL IDE. Aside from MSSQL Server manager and MySql in linux I haven't had much experience with other database IDEs. 
It's a very simple language, yet powerful enough to create quite stunning experience in the web and with good (not as robust as .Net Framework) server capabilities that brings nodejs, it's just a matter of time until nodejs gets way better. In essence, javascript let's you do much stuff with less ceremony code, maybe this flexibility compromise some convenience that C# .NET framework brings to the table (well defined structure for organizing code to mention a few). Humble opinion.
I have a personal subscription, but your student's e-mail and a link to the site of your university where the format is explains is already enough.
Amen. I have to maintain a legacy project that has both the old style and new style c++/cli. It can die in fire
You've piqued my interest. I'll google F# and see what's it all about. I'm new to c# and if f# can give me a better understanding of c# I'm all for checking it out.
autoupdater? https://autoupdaterdotnet.codeplex.com/ streaming updates?
Sounds like a joke but I'll definitely follow up on this Onion Architecture. Got any good pointers? websites, articles etc that I should check out first. 
I'm pretty new to programming but Func/Action and lambda expressions made a lot of other stuff very intuitive. And figuring out Events and Tasks made coding a lot more fun for me. 
Also Essential C# by Eric Lippert and Mark Michaelis, incredibly smart people. Jon Skeet (C# in Depth) and Eric Lippert both have blogs you should follow and read everything they write. http://smile.amazon.com/Essential-Edition-Addison-Wesley-Microsoft-Technology/dp/0134141040?sa-no-redirect=1
Turns out I just had to change access modifier to public. 
VS has been sherlocking a lot of Resharper functionality.
I don't know anything about MVC and controllers. But I know what you mean. I watched a few videos and got the gist of it but when I downloaded autofac and tried to use it...the few online examples I found were again all MVC and repositories related so I never got into it because it was just more stuff I'd have to learn first. I think I've watched some videos of Mark Seeman (maybe on unit testing?) but I'll check out the book you mentioned. As for the EF courses, I'll keep it in mind, but for now I want to move on from just working on the models to some actual back-testing and at some point I'll circle back to the db again and re-do it code-first. Going back to IoC...I have 6 classes that derive from an abstract class and all do the same stuff (processing data for some entity) and all follow the same steps, so I enforce that with an interface. Now I pass it a stock object, a date and it will collect data for that object, save it to file and simply hold it in a public property so I can pass it to database or just use it. How would Ioc make this easier? 
I would create public properties that get `endTime.Text` and `startTime.Text`.
This is great, thanks! 
This post is now stickied, BTW.
List Sort does as well. Arrays should IMO be avoided in general.
Please stop spamming your low-quality video tutorials.
Not in the same way. The real cost in LINQ has to do with state tracking and evaluating the lambdas within, invoking the delegates. If you take a look at disassembly, you'll often find that LINQ evaluates into more operations and complexity. Your mileage may vary. What /u/metapyziks probably means by 'garbage' is the possibility that extra stack variables may be used to keep track of things, more registers get used, whereas in a regular foreach or the basic for you wouldn't need them. Its not a massive deal for most C# use. But it's definitely a concern when it comes to high performance pieces of code. I don't know about 'using LINQ alot less', but I'm just explaining anyway.
That was awesome. I'm really blown away by how simple it all seemed. I think I might give f# a real try very soon. I have some trading backtests and strategies to code real soon, I think F# might be good for that.
I wish I grasped the properties and fields design pattern earlier. It would've helped alot with my appreciation for MVVM. I've only come across a handful of scenarios where I have multiple models potentially attaching to a view, but property getters and setters are a great way to flesh out classes than the more traditional "GetVar() SetVar()" functions.
Check out simple injector. Lives up to its name
Isn't there some form of checked list box that can do it? Or better yet, creating your own template for a regular ListView.
If you have a collection of objects - i.e. a list of transformer stations, and you want each in some way represented by a checkbox, you can use an ItemsControl bound to that list with a data template. The ItemsPanelTemplate can use lots of controls, but a stack panel is probably a good start. You can set the orientation either way and wrap it in a scroll viewer if you want. i.e. &lt;ItemsControl Grid.Column="1" ItemsSource="{Binding TransformerStations}"&gt; &lt;ItemsControl.ItemsPanel&gt; &lt;ItemsPanelTemplate&gt; &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Left"&gt;&lt;/StackPanel&gt; &lt;/ItemsPanelTemplate&gt; &lt;/ItemsControl.ItemsPanel&gt; &lt;ItemsControl.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;CheckBox Content="{Binding StationName}" IsChecked="{Binding StationSelected}" /&gt; &lt;/DataTemplate&gt; &lt;/ItemsControl.ItemTemplate&gt; &lt;/ItemsControl&gt; The result of this is that your collection of transformer stations will have a property StationSelected which will be set whenever that checkbox is selected - then just grab them and do what you want - TransformerStations.Where(x=&gt;x.StationSelected).ToList().ForEach(EmailThePeople) or whatever. Edit: you can put anything in that DataTemplate section - a whole grid with as many controls as you like.
I think the reason you've had no replies is because people are not quite sure what you are trying to achieve. My guess is that you want distinct for each individual column not for the whole thing - if you have data like: col1 col2 row1 1 1 row2 1 2 then select distinct * will give you all rows, and therefore you'll dupe col1. You can either handle this in code - perhaps by reading it into a hashset or just by checking the existing values as you go, or you can separate your query out into 5 sub queries in the format "select distinct voznik from data", "select distinct regstvoz from data", etc. and read 5 times into the combos. You could probably bind it directly to the combo too which may be a better pattern for you, depending on your use case and your technology.
Thanks for the reply! This seems like a good idea, but I might need some help making it work :) Do you mind if I PM you some questions? :)
Embrace Code Analysis. It's taught me more C# and .Net nuances than anything else. Every time I get a CA warning I haven't seen before (that isn't immediately obvious), I take an hour just reading about it on StackOverflow, various blogs and forums, to get a deep understanding of its background. One good example I remember that surprised me is the combination of creating an IDisposable with object initializer syntax, which warns that this object might not be disposed along all execution paths, no matter how much you try to prevent it (the reason for this you should investigate yourself 😉). 
thanks :)
&gt; Parallel.ForEach() Thank you for this. Consider me your younger self.
You and me both. Fuck constant maintenance of legacy code, fuck it hard in the ass. I won't work for a company that won't let me rewrite legacy components.
My coworker called P/Invoke straightforward. He honestly doesn't know he's a genius...
Never ask yourself "Am I using too many anonymous functions?". The answer is no. Use more.
Nice
Noted, thanks. Also, Happy Cake Day :P
Yes, how do I use order by on a list ?
Interesting you say that. List is implemented with an array behind the scenes, and this is a clever move by C# as modern CPUs make arrays faster than Linked Lists almost 100% due to caching issues. 
Having NuGet restore packages on build isn't a viable solution for you?
There's nothing to 'deeply disagree' with me on. I never stated that LINQ is not more readable. That is not what is being discussed here. Nowhere did I read anyone disagreeing with you to have an opinion that LINQ is more or less readable. In fact no one even mentioned that. At all. Anywhere.
See the example in the documentation: https://msdn.microsoft.com/library/bb534966(v=vs.110).aspx#Anchor_3
I've used these extension methods my fair share of times: public static class SortExtension { public static void Sort&lt;T, TKey&gt;(this List&lt;T&gt; list, Func&lt;T, TKey&gt; keyFunc, bool ascending = true) where TKey : IComparable&lt;TKey&gt; { list.Sort(new KeyComparer&lt;T, TKey&gt;(keyFunc, ascending)); } public static void Sort&lt;T, TKey&gt;(this T[] list, Func&lt;T, TKey&gt; keyFunc, bool ascending = true) where TKey : IComparable&lt;TKey&gt; { Array.Sort(list, new KeyComparer&lt;T, TKey&gt;(keyFunc, ascending)); } public static void SortBoxed&lt;T, TKey&gt;(this List&lt;T&gt; list, Func&lt;T, TKey&gt; keyFunc, bool ascending = true) where TKey : IComparable { list.Sort(new BoxingKeyComparer&lt;T, TKey&gt;(keyFunc, ascending)); } public static void SortBoxed&lt;T, TKey&gt;(this T[] list, Func&lt;T, TKey&gt; keyFunc, bool ascending = true) where TKey : IComparable { Array.Sort(list, new BoxingKeyComparer&lt;T, TKey&gt;(keyFunc, ascending)); } struct BoxingKeyComparer&lt;T, TKey&gt; : IComparer&lt;T&gt; where TKey : IComparable { private readonly Func&lt;T, TKey&gt; _func; private readonly bool _ascending; public BoxingKeyComparer(Func&lt;T, TKey&gt; func, bool ascending) { _func = func; _ascending = ascending; } public int Compare(T x, T y) =&gt; _ascending ? _func(x).CompareTo(_func(y)) : _func(y).CompareTo(_func(x)); } struct KeyComparer&lt;T, TKey&gt; : IComparer&lt;T&gt; where TKey : IComparable&lt;TKey&gt; { private readonly Func&lt;T, TKey&gt; _func; private readonly bool _ascending; public KeyComparer(Func&lt;T, TKey&gt; func, bool ascending) { _func = func; _ascending = ascending; } public int Compare(T x, T y) =&gt; _ascending ? _func(x).CompareTo(_func(y)) : _func(y).CompareTo(_func(x)); } } They make `List&lt;T&gt;.Sort` work just like `IEnumerable&lt;T&gt;.OrderBy` except in place instead of returning a copy. Without this you can sort a list like this: var sorted = mylist.OrderBy(item =&gt; item.Key).ToList(); but that makes a copy of the list to do the sorting (and another copy again when calling ToList I think?) which results on increased GC pressure (bad for things like games). Sometimes you don't care that the list stays unmodified; if you already have a `List&lt;T&gt;` (or an array) these extension methods operate in place: mylist.Sort(item =&gt; item.Key); or: mylist.Sort(item =&gt; item?.Key ?? ...); (important that the function never returns null)
Look into BackgroundWorker class, its easy to use. https://msdn.microsoft.com/en-us/library/cc221403%28v=vs.95%29.aspx
My advice is to not be too hard on yourself. Software development is tough, and "we create tomorrow's problems, today" (my quote I tell Support every day, heh). This business of software development, trying to learn new things as well as support legacy code, can drive one crazy. So do the best you can every single day - meaning, use your time wisely, carve out time to learn new things. You must make it a practice to take time away from your daily work to learn and play with new technologies, languages, and the like. Otherwise you'll #regret. I wish you all well, and let's get to it in 2016.
Exactly that :)
So does this modify the List class itself ?
Beware of the licensing of emgu.
If this script is running on the same GameObject as the script you're looking for, then you would want to use the [`GetComponent&lt;T&gt;`](http://docs.unity3d.com/ScriptReference/Component.GetComponent.html) method instead. Substitute "T" for the class name of the script you're trying to get. (I assume the class is not named `hex1`; perhaps it's just "hex"?)
+1. If it's an issue with non-nuget references, it's shockingly easy to set up your own internal repo as well.
Dis is way over the guys head me thinks. However, it's **Very** good stuff to understand. What u/Lord_NShYH is describing above is often referred to as Dependency Injection (DI) or Inversion of Control (IoC). Specifically, Constructor Injection. which is one of the several kinds of DI. https://en.wikipedia.org/wiki/Dependency_injection You'll really want to learn and use the concepts of DI as they make testing much more manageable. MVC and Web API are very good places to be using DI as you can write tests for a significant percentage of your application compared to many other 'technologies'. I'm actively working on learning the nuances of Ninject, an IoC container, and attempting to correctly implement it in a project I'm working on.
BackgroundWorker class is probably the easiest to implement. Basically, if you have any long-running operations in the form_load or such, it will cause your UI to lock up or get jittery or crap out altogether.
Thanks . Here's what I came up with, full working example for the next guy // added search example using System; using System.Collections; using System.Collections.Generic ; using System.Linq ; using System.Threading ; public class Thing { public string stringVar ; public int intVar ; public int num = 4 ; public Thing ( string A, int b, int c ) { stringVar = A ; Random rnd = new Random(); intVar = b ; num = c ; //= rnd.Next(1, 9000); ; } } public class Program { public static void Main() { List&lt;Thing&gt; mylist = new List&lt;Thing&gt;() ; mylist.Add ( new Thing ("AOK", 10, 3000 ) ); //Thread.Sleep(2000) ; mylist.Add ( new Thing ("ZZZZ", 2 , 30 ) ) ; //Thread.Sleep(2000) ; mylist.Add ( new Thing ("One", 10, 3) ) ; var sorted = mylist.OrderBy(item =&gt; item.intVar +item.num).ToList(); Console.WriteLine( sorted[0].stringVar + sorted[0].intVar + "sort by number " ) ; sorted = mylist.OrderBy(item =&gt; item.stringVar).ToList(); Console.WriteLine( sorted[0].stringVar + sorted[0].intVar + "sort by string " ) ; // testing remove Console.WriteLine( sorted.Find( x=&gt; x.num== 3 ).stringVar) ; Console.WriteLine( sorted[0].stringVar + sorted[0].intVar + "sort by string " ) ; } }
I'm not quite sure how you even set up a RedditUser instance, I guess I just need to keep reading through the code and try understand a bit more or just try find a way of doing it myself.
&gt; Specifically, Constructor Injection. which is one of the several kinds of DI. Thanks. I think Constructor Injection may be the simplest approach to understanding the benefits of DI. You could be even more loosely coupled by removing the default parameterless constructor and forcing the injection of the _db every time the controller is instantiated. 
Try `Reddit.GetUser(string name)`. EDIT: When trying to understand a project and its source code, download and open the main solution in Visual Studio and use its aids to help search. For example, I found that method by finding all references to the `RedditUser.Init` method.
Homework is a perfectly valid reason to post to /r/csharp looking for help. (But as you pointed out, copy/pasting the assignment text and asking to do it for them is probably not acceptable. But since we currently don't have any official rules, not necessarily remove-worthy. Just downvote it.) That said, we're open to introducing a rule of requiring users to post [a good question](http://stackoverflow.com/help/how-to-ask), though with a bit more leniency for open-ended (not suitable for StackOverflow) questions. We can adopt /r/learnprogramming's [guidelines for asking questions](https://www.reddit.com/r/learnprogramming/wiki/index#toc_1), and if they fail to meet those standards, remove their post and direct them to those guidelines. (Of course, determination of whether or not a self.csharp post asking for help meets that bar of quality would be subjective of the mods) EDIT: I messed up my words.
What key is that in? I'm pretty sure it's not C++.
Not ideal but you could always make a note of what you had to do for the project. But I know what you mean. When I start a new project using some library, I always have to go look at the previous project to see what I'd added.
I don't see any unit tests!
Can't agree more. You learn so much by doing serious unit testing and I remember how much it open my eyes. 
Where is the script located relative to the script youre trying to access it from? If the script youre trying to find is attached to the same gameobject, you can do gameobject.GetComponent&lt;NameOfScript&gt;(). Hope this helps. Im heading out for the night but you can always ask over at /r/unity3d
What key? Definitely C# ... or Db for the morose MF'ers out there ;)