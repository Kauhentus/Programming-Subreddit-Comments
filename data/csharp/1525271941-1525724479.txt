Am I missing something? Why are you surrounding `Items.*` with parenthesis? Like this line: PrimaryColourBox.Text = (Items.PrimaryColorHexString); Also, as a good rule of thumb, if you are using something that implements `IDisposable` (like most `Stream` classes that I am aware of), you should be using a [using statement](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement). There are times where you don't like when the instance of a disposable object needs to remain undisposed throughout the lifetime of a class, in which case the consuming class would implement `IDisposable` itself and dispose of all of its disposables in its `Dispose` method. Example of how you would use a using statement in the above code: byte[] buffer = ... ; //insert logic to get buffer here Bitmap bmp = null; using (var ms = new MemoryStream(buffer)) { bmp = Bitmap.FromStream(ms); //don't call close, the using statement will do it for you } //etc Also, don't use hungarian notation when naming your variables (prefixing your variable names with an abbreviation of its type or character to denote scope). In full disclosure, I do break this rule when naming UI controls (i.e txtName for a textbox that accepts a name or lblVersion for a label that displays a version string). Example: //don't do this var strName = txtName.Text; mStrName = strName; //do this: var name = txtName.Text; _name = name; //by convention, you can prefix private fields with _ //preferably, you'd have a Name property to assign to instead like this: //Name = name; (In the above example, I wouldn't have declared the *name variable in such a simple scenario, I would have assigned the property or private field directly like `Name = txtName.Text`). You should never be setting the value of private fields directly except in a property or a constructor **for a struct type** (structs require that all fields must have a value assigned to it by the time the constructor leaves scope, keeping in mind that a short-hand property declared like `public string Name { get; set; }` creates a private field under the hood so the struct will require such a property to be assigned a value to as well). Classes do not have this limitation, so you can initialize such fields or properties where you've declared them (i.e `public string Name { get; set; } = "John Doe";`) or use the property to assign the value of its related private backing field (avoid using the private backing field directly in the constructor of a class). Finally, I don't know if the code you pasted here all sits in a single file, but all **public** types should be in separate files. Basically, only 1 file per public class, public struct, public enum or interface. Only private classes, enums or structs are declared in the same file as a public type and *only as a nested type*. Example: `MyClass.cs` (ignoring namespace declarations) public class MyClass { //DO NOT DO THIS public class MyOtherClass { ... } //DO THIS private class MyNestedClass { ... } } //DO NOT DO THIS public class MyOtherTypeDefinedInSameFileAsMyClass { ... } Also, use the keyword `var` when declaring its type would be redundant. Example: StreamReader reader1 = new StreamReader(stream); //redundant and verbose declaration var reader2 = new StreamReader(stream) //cleaner, easier to read, not as verbose which means less typing You initialize a variable declared with var with a null value (i.e you can't do this: `var name = null;`) because its type can't be inferred. Also, don't overuse `var`. Only use it when declaring the type is redundant or the type is obvious. Example: var users = GetUsers(); //don't do this -- You can't immediately tell the type of users, you'll have to look at the return type of the method in order to know what users is var name = "John Doe"; //this is OK because its type is obvious var id = 42; //in this case, the benefits of var is lost since the type 'int' has the same amount of letters as var! In some cases, you *have* to use `var` like when you are handling anonymous types like in LINQ queries. I won't give an example of that here but felt as though this was important to mention. Finally, **do not confuse var with dynamic** -- var is **not** dynamic. The name of a type should follow the Pascal Case format, so your `Rootobject` class should be named `RootObject`. More information on which capitalization style to use and when can be found [here](https://msdn.microsoft.com/en-us/library/x2dbyw72(v=vs.71).aspx). Hope this helps.
I hate so as well despite constantly doing it. Every email I write I have to loop back and remove it from the start of each sentence.
Ive been there since day 1. It's *always* been that way.
The first step to fixing it, like in AA, is admitting you have a problem! Truly it is learning to see that your have a problem. It is hard to break habits but impossible if you don’t see the habit for what it is. When I was younger I used to swear a lot. One day I realized that wasn’t what I wanted to do. Once I decided this I slowly realized just how often I used swear words. It seemed hopeless at first. But slowly through recognizing when I swore I was able to stop it. 
Serilog is great.
Cool man, I'll take all of this on board. Only starting programming in c# like 3 weeks ago. Still learning! 
It's definitely a nervous habit, probably from not being very confident about my own communication skills. I try to slow down and think about what I want to say now, first, and that helps. Being aware of it makes me cringe every time I do it. 
I can see that as a nervous habit. The usage actually seems like the speaker/writer is unsure of himself, which is why I particularly don’t like it. It can be like ‘um’. Of course there is a way to be confidently non commital and that is how lawyers write and speak. One thing that has helped me with my confidence is realizing my problem was rooted in my own perfectionism. It isn’t that I’m so worried about other people’s judgment if I’m wrong. I’m worried about actually being wrong. Learning to be less judgmental of others has helped my own confidence. I don’t know if that is a problem you have but I really do think a lot of confidence problems are rooted in our own views of our own perfection. 
Yup, for sure. I picked up from my Mom, that much I know. The worst use is the random dangling so at the end of a sentence. "I'm heading out for a couple of hours so...." And then you wait for the rest but it never comes.
Looks to be quite a huge release
&gt; People who wear too many hats. That one hurts. At work I organize the backlog, plan new applications and integrations, create project files, configure the build and deployment systems, design database schemas, configure and update our test and production hosting environments, provision cloud services and offsite VMs (Azure and RackSpace), do production support on multiple critical applications and integrations, configure our full text search system (ElasticSearch)...and in my spare time at work I am apparently a full stack developer.
As team lead I jump on those grenades. I go to all of the 'just in case' meetings so that I can collect notes or make comments and then I report back to the team if its something they will need to know about soon.
Are you using some sort of RAD (Rapid Application Development) control?
My friend is in the BT in Software Development at OSUIT. He chose it because it was an accredited program over some of the other online options. He’s doing a hybrid of in person and online classes and he’s been working on campus with the web developer to gain experience for two semesters. He has 3 semesters left before graduation an was hired to start an associate developer position next month. Their job placement rate is really high, and faculty and staff are very invested in each student’s personal success. 
Fair point, but I did offer to help further in explaining things if OP had questions about why. I know personally when I started learning (back in the days of basic) I learned a lot through example.
Not that I'm aware of? Just Windows Forms, git, and some services (that's the business-sensitive part) that we use to read/write from/to the database. The services expect, essentially, DataSet objects.
 I've been in a VERY large project that did this (over 700 + tables). If you know for sure that most Datasets are going to map directly to your UI controls then I would just avoid the extra overhead of a business layer. All that layer will do is literally have one lined functions for EVERYTHING that just call into your Data Access layer and return the result. That's the "middleman" code smell (https://sourcemaking.com/refactoring/smells/middle-man). In this case, most of your business logic is probably all in Store Procedures or in the DB? You can always (later on) create a separate "Services" project that does contain business logic in code, but only for specific cases that require it (maybe for application specific stuff like importing excel files to code objects (which can then be passed onto the Data Layer to store in DB) etc. Ya, it sucks, but you have no choice :( And, it's not your fault.
If the software already exists, use the "when in Rome" principle -- introducing different albeit proper architecture without revamping *all* the related components would likely cause more harm and offset the benefits completely. If this is software that is in the design stages, then your boss is absolutely wrong. By the time any data hits the BL from the DAL, the individual records should be data objects (DTOs) (they can be in collections as well). The BL should communicate with the DAL via some interface (i.e `IMyDatabaseContext`) and the DAL should return entity objects/DTOs or insert/update/delete records based on parameters that the BL provides the DAL through that interface's methods. The interface and any implementations of that interface should follow the `Unit Of Work` design pattern and, via properties, it should expose objects that have implemented the `Repository` pattern. Your Winforms app should be using the **Model-View-Presenter (MVP)** architectural pattern. The views and presenters will reside in the same assembly but your model classes are your reusable BL service classes. Depending on the flavor of MVP, you'll either databind the view to the presenter or the model (I personally prefer binding to the presenter as binding to the model will nearly always cause UI logic to leak into the model by future maintainers). The presenter should receive its view and its model/service objects by **interface** types via **constructor dependency-injection**. The view will never know about the model's type nor the presenter's but you'll likely want to perform the databinding in the view which means the data object you plan on binding to will be passed to the view (as an `object` type). The view communicates with the presenter either through the databinding logic itself or by invoking its event (which the presenter has subscribed to). In all cases, the model/service class will never know the type of the presenter or view that uses it. The only common types between the layers are the entities (which should have been defined in their own assembly so that the BL layer and UI layer can reference it). Do **not** expose the UoW or repository classes to the UI layer -- only the BL/service layer can use those types. If you define those types in the same assembly as the entities (not recommended), mark them `internal` and use the `InternalsVisibleToAttribute` to expose the internal types to specific BL/service layer assemblies.
Why not C#7?
Removed: Rule 4. You'll have to provide example code of how you're compiling the code. The answer will likely differ depending on what API/technology you're using for compilation. It will also help for you to post an example of what you're asking ("accessing objects like lists"). Maybe a C#-equivalent of what code/class you're trying to compile.
 while (!proc.HasExited) { if (proc.HasExited) You're basically relying on a race condition here. This only works if the moment `HasExited` changes happens to fall inbetween the `while` condition and the `if` condition. If it happens at any other time in the loop, the `while` loop will exit without the `if` condition ever being true. Have a look at [Process.WaitForExit](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.waitforexit) instead.
Does it mean it runs on core? Since they discontinued mono, how else can it run cross platform?
reminds me of when I made a simple static site generator because all these other static site generators/CMS tools were so bloated However for now, I really like ASP Razor Pages in .NET Core 2.0 for "static site generation". Like you can create an ASP Razor Page without a model - ie basic cshtml page, have a consistent layout.cshtml for all pages, etc.
My whole team decided to quit using ReSharper and just move to Rosylnator and other free alternatives. Most of the code hints have been learned by now, and a lot of refactoring stuff has been in VS (Enterprise at least) for years now We are saving the company money too I guess
That's definitely it. I'm way more worried about being wrong than of others think I'm wrong. I'm working on not being as judgmental of other people, but that is yet another in a (grossly) long list of bad habits I'm trying to unlearn. Cutting other people Slack, or just butting out usually lowers my own stress levels immensely. The tricky part is remembering this. 
https://docs.microsoft.com/en-us/dotnet/standard/net-standard
Not that I know of. It would be a separate code base from the serverside one.
If you are using an MVVM approach you can handle all this by binding a SelectedItem from the View into your ViewModel and and wiring the logic in its setter before the RaisePropertyChanged(). Or something like that :D
I don’t agree. I’ve been there since 2008 and I don’t feel it used to be this snarky. 
Sounds like you have some high quality apps (just joking)
&gt; but again LOL I had a coworker who would start saying "again" when he was getting defensive. I felt sorry for the guy. &gt; not what I'd consider good practice in anything but the smallest of applications. Meaningless. &gt; It used to be conventional to new up the VM in the View ctor, but it's awful for anything that scales. It doesn't support DI, or unit tests that inject a mock (I've bitched about mocks elsewhere, but they still have a place). Who is doing that? Copy/paste the code please. Look at the code where I inject the VM then answer the question about where where initalization is awaited. &gt; Your code doesn't work because you've missed the point a bit. Meaningless. Support this claim. Show psudo code. &gt; Why are you assuming that the View has to initialise the ViewModel, let alone in its ctor? Show psudo code that does it differently. Show code. &gt; How do you handle View-&gt;child view relationships where there's a local messenger involved? Stay on topic. We are talking about constructing obects. &gt; This goes back to DI again, new is just not a scalable construct. It is what you'll see in a bunch of small scale MVVM tutorials, and I feel that's the issue here. I will copy/paste my instruction to copy/paste: Who is doing that? Copy/paste the code please. Look at the code where I inject the VM then answer the question about where where initalization is awaited. &gt; As I said, I wouldn't stand in your way if you wanted it as a language feature, You wouldn't stand in my way. &gt; So you can't have a reference to it until it has been constructed. Already addressed in this thread. &gt; This is the convention. Meaningless. I need a better argument than calling something a "convention". &gt; If your View relies on the ViewModel ctor in its constructor as above, then you can't provide feedback about things like loading, because the object isn't initialised and live while the ctor is running. If your ctor throws an exception and you've already subscribed to its "Loading" event, what does your code do then? Look, I need you to slow down and think this through. You are going in circles. What if you new up an object (or receive an instance from DI), subscribe to its load event, call Initalize() and it fails. Its the same thing.
My last employer hired someone new to "manage" me (even though I had over twice the experience and she couldn't manage her way out of a paper bag, she was female and latina so HR decided the company had to give in to her every demand including being hired and put in charge because every time anyone implied she might be mistaken about anything no matter how trivial she threatened a lawsuit for discrimination and demanded people be fired) and she immediately announced that there was only allowed to be one project per solution, so our perfectly good working solution with 30something projects had to be broken up, which immediately caused NuGet hell for each and every programmer but her. I literally spent about half my day every day fighting with NuGet and trying to get it stuff to compile, usually ending with my having to throw my hands in the air and get someone to help me with it. (I was the senior programmer, if I couldn't do it, it couldn't be done.) Usually they'd end up reverting to a previous version to make it work, which would work for a few hours until someone wrote something requiring the new one, and then the problem would start all over. Lather, rinse, repeat. 
Some of them are quite the pile of hot garbage; I won't lie. They are also old and written by folks who were probably in over their head. It happens - even to the best of us. I'd actually be willing to argue that had they done a better job with logging etc instead of sending it to an email box to die; a lot of the random issues would have been better addressed over time; improving quality. To be totally fair; it does take several months to get that full. Even still. It is all kinds of the wrong way to do long term error monitoring.
Hey, I've chucked out what I think, based on what I know. You're fighting a fight for reasons I can't fathom, so I'll leave you to it. It's annoying that you're fighting the fight rather than engaging with it. Some of your counter arguments above are technical, suggesting you don't want to be right, you just want to win. So, you win! Best wishes fella. 
F# has ranked very high on income in a few surveys.
Every time I get specs not written by a programmer (which is most of the time) I end up writing a list of questions about how to specifically implement the things that are ambiguous in the specs, with my list of questions being longer than the original specs were in the first place. 99.9% of the time I get back answers which are mutually conflicting and I have to go back and ask *more* questions because it *can't be done* the way they demanded. (Step 1: Collect insufficient input. Step 2: Read the user's mind. Step 3: Do what the user wants, not what they said.) Then about 90% of the time they get angry with me and refuse to answer any more questions, and management forces me to start implementation despite there being no signoff on specs, so I have to basically *guess* and implement *something* that *might* be compliant with the original specs... which invariably, the client will find fault with and reject as not being complaint with their revised demands, their original demands, and the additional demands which are all in their head and they never communicated to me but they demand that I should have divined from their mind and implemented anyway. By this time my programming team has moved on to other priorities and doesn't have time to go back and make an unreasonable client happy, but management demands we do anyway rather than managing the client like they're supposed to. In all but one job of my 30 year career, specs have been worse than useless. In that *one* job specs had to be written by a programmer and the client had to review and approve them. If they had any revisions those had to be approved and signed off on by a programmer or it would go back to the client with their revision removed. When a final version was signed off on (a literal physical signature on a literal physical piece of paper) the client had to sign off on it (a literal physical signature on a literal physical piece of paper) before work would begin. If the client called about any changes before the product was done, all work would halt *immediately* and the client would pay the entire team's consulting rate while they twiddled their thumbs as specs were renegotiated, and the revised version required physical signoff as before. The result of this was that the programmers could never be hit with unimplementable specs, management could never shove impossible requirements down programming's throats, and the client (this was *really* important) could never claim that you didn't deliver what you promised in the first place. 
Simply enough you need a name for your object so that you can access it in the C# file.
Awesome glad you got it figured :)
Noooooooo... don't re-sign them!
&gt; We write how it does it, we don't make the rules. That's a business analysts job We don't even do that. The spec should make clear, in most cases, how it's done. What *we* do is explain to the computer what is needed in a language the computer understands. We are, in good cases, a *translator*, translating vague English to precise C#. 
I can't live without C# 7 now though. 6 feels ancient haha
I think when you just do a blanket try-catch, you are basically saying "I don't really understand this block of code and I want to save my butt if it blows up". You'll need to deal with those cases later and it's probably going to end up needing manual intervention. Talking from the perspective of business software here.
If it prevents ppl from losing work, catch away i'd say. But if possible, try to write the exception incl stacktrace to a file or something. Users are terrible at reporting crashes and error messages.
My similar one is that often a business person will demand to know how long it will take my team to implement something in which I've identified some major unknowns. I reply "I don't know because we don't know how long it will take to do *X*", and they demand "Why not?" So I tell them that it's because we've never done that before and we need to figure out *how* to do *X* if it can even be done at all, and they jump down my throat again and demand "Well how long did it take you do to last time you did it?"... to which I can only reply "We are not doing piece work, making an identical widget over and over again using a machine which makes identical widgets. Everything we do is custom and unique. If we had ever done it before we would copy that and give it to you, we wouldn't be having this discussion and we certainly wouldn't be wasting our time doing it over again." Somehow the idiots never understand that.
Here's what Jonathan Chambers said about that back in January: &gt;We can probably increase the C# version supported. It's complicated by fact that currently we use the Mono C# compiler. The plan of the upstream Mono devs was to end of life the Mono compiler at C# 6 \(i.e. not implement C# 7\+\) and migrate to Roslyn. &gt; &gt;However, upstream and us have found that the Roslyn compiler runs noticeably slower than the Mono C# compiler in the context of batch compilation \(driving the compiler via command line flags\). Roslyn runs faster in a "server" mode where incremental compilation is possible, but the current Roslyn server support is Windows only. We are looking into our own Roslyn server, but it's not complete yet. &gt; &gt;That leaves us with the Mono C# compiler. They are now adding C# 7\+ features, but only as time permits and only the more important features. This means we won't have \*full\* C# 7.x support for a few releases, either via an improved Mono compiler or a faster Roslyn compiler. [https://forum.unity.com/threads/c\-7\-support.512661/](https://forum.unity.com/threads/c-7-support.512661/)
&gt; It's annoying that you're fighting the fight rather than engaging with it What's annoying is that your expectation is that you can beat your chest and throw out anecdotes and others will take you seriously. I've made legitimate arguments to support my claims. I've offered you every opportunity to support your claims and all you've done is waste the time of everyone who's reading this thread. 
There is only so much flexibility Agile can handle. When the client specs out and signs off on a small slow blue Toyota and you're 99% of the way through building it and the client comes to you with new demands that the project should actually deliver a fast golden Learjet, whether you are using Agile or not, that's requirements creep and you need to stop work and communicate with them how to start the project over, or finish the job, deliver the small slow blue Toyota, and try to convince them that you did what they asked for and they should pay for it and wait until the team is free again before trying to make new demands. When you're 99% of the way finished with building them their fast golden Learjet and they insist that no no no, you idiots, what they asked for in the first place was a high powered blender that will let them make their teenager's smoothie more quickly in the morning and you've gone and built them a car and a jet that they didn't ever want (even though you have their signature on both sets of specs), you know you're dealing with your standard issue idiot client. And I don't see how Agile could handle that transition more gracefully than any other method, and I think that trying to claim it can is foolish.
So you're trying to be un-just, huh?
That and it gives your users something specific to google. There's nothing wrong with hiding the big scary exception message behind a friendlier "Oh noes, an error! :(" dialog so long as you provide a way for the savvy and/or desperate to dig in the details.
You have not. I won't engage again.
I have two ways of dealing with this. 1. Every time IT does something that makes my work impossible, I send an email to IT and my boss saying why my work has become impossible because of the change they've made, pull out a novel to keep me busy, and wait for my boss to scream at them until it's resolved. 2. "If you give me local admin rights on my computer I will make a pan of homemade fudge for you." You'd be surprised how well this works. (And how awesome my fudge is.) 
True, definitely need to alert the user that something went wrong. Oh and now i think of it, try to rollback any state changes (again, if possible/needed) so you don't have any complications of a half executed function
&gt;&gt; Having to answer stupid recruiter questions e.g. how many years experience I have... with Windows &gt; &gt; This one's actually funny to me and I agree, recently saw a job with 5 years of windows 10 experience. Windows 10 hasn't even been out for 5 years :) I once applied for a job, the ad for which said it required 7 years of Java experience. Java had, at the time, been available for a year or so. (And I'm counting since v0.6 or so became available for testing and Sun had published its first book on the language.) I assumed it was a print error or written by someone who wasn't really involved, and applied because it otherwise sounded interesting and why not. I got a phone call from an angry HR person demanding to know (before even introducing herself) why I had wasted her time by applying for a job that I was *obviously* not qualified for. After forcing her to identify herself and what her maladjustment was, I *tried* to explain that there was *nobody on Earth* with 7 years of Java experience but she was having none of it, wouldn't let me talk, and just had called to scream at me about it. I let her run herself out and said "I don't want to work for a company that employs idiots like you. Go to hell and never call me back or I will sue." and I hung up on her. 
It might even be worthwhile to slap a wrapper around the API that does this for you (or at least the portion of it that you use). So instead of doing something like this: try { Document.ModelSpace.DrawCircle(...); } catch (...) You can instead just have: Wrapper.ModelSpace.DrawCircle(...); And put the try/catch block that invokes your handler-of-last-resort in the wrapper's `DrawCircle()` method. If you later discover that there are exceptions thrown from the API's `DrawCircle()`method that you can actually handle and recover from, you can alter your `DrawCircle()` wrapper to catch and rethrow those specific exceptions to the calling code instead. Then your calling code becomes: try { Wrapper.ModelSpace.DrawCircle(...); } catch (WellDefinedThingICanDealWith ex) { } I'm not generally wild about rethrowing, but this seems like a sensible time and place for it.
Business sensitive, technical reasons but are unable to provide the design needed or a working sample implantation? Sounds to me like their technical reasons are likely unfounded and the business sensitive part is likely BS too. Someone with much more time under their belt should be responsible for figuring this out and making it work.
Um, mono isn't discontinued. It's an official Microsoft project.
&gt; I've been in the programming game for &gt;20 years, and noticed that many of my peers who ended up in management &amp; senior positions, have returned to being hands on (myself included) because they miss doing the actual things they enjoyed doing in the first place in their careers. I've been in the programming game for &gt;30 years, and I've learned that when I accept a management job I need to be very clear to them that once in a great while I will have to do some actual programming and they're going to have to back off of me for a day or two while that happens. When it *does* happen, I've usually had to fight with upper management for my time, but I produce the original emails where they agreed to this and they back off. I have learned that it's best at some point if I take an architectural role and let my team be responsible for most implementation, but keep one or two small key pieces of code for myself so I know they're being done right and the team doesn't have to panic about touching something vital. For example, I worked for a security hologram manufacturer that makes holograms (most of which have serial numbers) for major league sports products, credit cards, etc. We sold hundreds of millions of holograms per day, most of which had serial numbers. Our solution was highly modularized, and there was one program that did nothing but sit there and churn out serial numbers (which got put in the database) all day long. I wrote it. It was very tight, very tiny. In two years of usage it grew from 10 lines of C# to 11 lines, not because of a bug fix but rather a new feature. It worked flawlessly - every instance of unexpected results was *always* because of bad user input. (I'm not just bragging, I *personally* studied every problem and determined that the user had created bad specs and got what they asked for.) The other programmers were terrified to touch this code because it was so vital to everything we did. However, QA had a bug up their ass about it and could never understand how it worked. It was supposed to always make 20% more serial numbers than had been ordered so that there were always extra on hand so when a new order came in they could start printing numbers before the full batch had been generated. (This was a big important requirement from manufacturing and couldn't be changed.) QA could never understand this no matter how many times or how simply I explained it (or more accurately the QA director couldn't, all of his people did) and literally twice a week he'd come running to me and tell me "there's an emergency! The serial numbers are being generated wrong!" and I'd have to drop everything and analyze his problem. Initially it was that he'd ask for 10 serials, it would make 12, and he wouldn't care that they were 12 perfect serials, it hadn't made 10 so this was an **emergency**!!! Eventually he started coming up with more complex scenarios that required me to analyze his sample orders for half an hour to determine that no really, it was still working perfectly. The fact that it had been in production working perfectly for a year without changes meant nothing to him, he kept trying to find something to call an EMERGENCY about it. The only reason he couldn't pull it from production was that I wrote it and *I was his boss* so I could say "nope, you may *not* pull it from production until I have analyzed your alleged problem and determined that it's real," which it never was. Thus, a management position came in handy.
I'm not sure I understand what you're saying--the project is dependent on a set of third party, proprietary services that the company uses for other projects. I know what they are. I just won't tell Reddit any specifics.
Did you try running it multiple times within the same program? Perhaps the initial JIT compile and first run takes a long time and that's blowing out the results. Although I would have expected that to maybe provide a constant time added.
This is only if you use their compiler. I have for years just imported compiled assemblies instead. Meaning I you could use C#6 features for years, even in the net35 days, and avoided faults specific to their mono compiler. I assume for C# 7 you can do the same.
Sadly that didn't improve anything.
IMO if you get in the top 5% in any of the major languages you will get compensated very well.
This is really helpful! We will pretty much be doing everything this way, so you are right I have to just do it this way and live with it--knowing that there is a better way. I didn't post this to complain about my job to the Internet, so forgive me...but no we're not a large company we're just very behind. I spend hours reading about 'good' practices, then when I use them in my code my boss makes me remove them after code review. Regardless, I appreciate your optimism. I will look at this as a learning experience until I am able to move on. I just hope it won't hurt me for interviews in the future.
¯\\\_(ツ)_/¯ Kinda makes me miss Silverlight now.
I just ran the installer on one machine and it seems to be ok. It lists the C\+\+ llvm transpiler but I wasn't sure if I should see a specific .net version in the .net section. Unity is something I keep edging towards but don't have the time to dig into so I'm painfully naive Also. is it a transpiler or compiler? 
 I meant we write how the computer achieves what they said.
Can you move your "special sauce" techniques and methods into a web service that you control, then give each broker a unique API key?? I think keeping your proprietary data/algorithms on machines you control has many benefits like 1. you can widely redistribute the VSTO \(just post on a website\) 2. brokers can reinstall on a different machine without having to get a new key. 3. You can see which brokers are using the add\-in 4. You can collect the data the brokers are using to improve your techniques 5. You can revoke api keys if a broker goes bad or it looks like a broker is giving out their key 6. You can reach out to heavy users to have them contribute feature requests/bug tests/be beta testers
I didn't see you edit the first time. Using Arrays instead of IList improved performance a lot. Down from 7000ms to about 450ms. Overall it's still much slower than the other implementations, but at least an improvement. I will upadate the repo tomorrow.
Yeah I have been looking into certain methodologies to use but until I get in and get my hands dirty it's hard to know exactly what works and which one I will be best at implementing. For the current development team I think agile would be best due to current personalities and what it achieves. I will 100% read that book and report back!
Thank you teressapanic. That is what I ended up doing. Works really well. I had everything fixed in about an hour and a half.....\(It took that long just to install resharper haha\)
Is this using today's 0.3.0 release of Blazor?
Yep. This is a good solution. The one I have used. It took me about an hour an a half to fix all the problems. Works really well. Now there is no going back because I set things to error when I don't follow the capitalisation rules. Very nice. Thank you Joniator and Stylecop.
Nice. What about `List&lt;T&gt;`? 
Agile is essentially a given these days. It has proven itself over two decades and to be honest, the best teams used it long before that. But the one thing to remember is that communication and compromise are essential. preload the risk, push it the the front of the queue so to speak and you will be be a rockstar :\) Hope it all helps, always feel free to ask more questions, the industry is better off with people like you in it :\)
Blazor 0.3.0 is out and it supports components https://github.com/aspnet/Blazor/releases/tag/0.3.0 Don't miss #build2018 stay tuned for what Progress/Telerik have to say about blazor ;)
https://github.com/aspnet/Blazor/releases/tag/0.3.0 is out. It seems we can divide those couple of years by 2 :) stay tuned on #build2018
0.2.0, as far as I can tell there weren't any big changes to the mono part since then, mostly Blazor specific changes. But I will give the new version a try tomorrow!
Thank you, but I would like to avoid to check the Open state, if possible. I have edited my answer. Hopefully it is more clear now.
I have not thought about a web method - its an interesting idea. The reason the project is in the form of an Excel AddIn is that it has to operate on data that is freely distributed to anyone in the industry who wants it. It is industry wide historical data that is in the public domain. Once our brokers have this data open in Excel our AddIn would process it using our methods. Brokers freely installing our tool on additional PCs has been ruled out by our board of directors (for now). They have decided that only our top 20-30 brokers (80% of our business in turnover) will get this tool and they will only get a limited number of copies each (1-5) depending on their size. We know these companies well and work hand in hand with them on a number of fronts, so we can easily work out their allocation with them and sign them up to usage agreements. (As you can probably tell our board of directors are a bit on the paranoid side). So I'm stuck with allocating copies to hardware to control its distribution Its an odd one I know, but my hands are tied. If I build everything in VBA I could use a product like LockXLS and launch it as a standalone spreadsheet rather than an AddIn. The coding would be protected, as would its usage, but it would be slower and not as easy to use for the end user.
 MyObjectBuilder b = new MyObjectBuilder(); b.EventRaised += o_EventRaised; // o_EventRaised is defined elsewhere. MyObject o = b.Open(); o.DoThis(); // Open has obviously been called, no need to check o.DoThat(); // Open has obviously been called, no need to check
It's moving so much faster than I anticipated. This is so great to see!
At this exact moment in time? [Everything is terrible!](https://i.imgur.com/QikF2Wq.png)
Thank you both. This was very helpful.
No, there is no dark theme in free version :(
Ah man. I was hoping to wait for it to come out to learn all about new C# 7, but if it's gonna be that long, I might as well just learn from everywhere else and save the $100. 
Er, no. We had an open plan office in my last job. And everyone would come in with a cold and cough and sneeze and make the whole environment germy, so everyone else would get sick. I got pneumonia and died. No really, **I died**, I was *dead* for over a minute, spent 2 months in the hospital, and am now a cripple. FUCK open plan offices. 
Meh I feel like u can learn everything about 7 on ur own. However, non? nullable ref types in C#8 will be the next biggest change IMO
COBOL because all the devs are, like, 90 years old.
&gt; Well, firstly - in an average week, I probably spend at least a day's worth of my time in meetings. Sprint pre-planning, sprint planning, story estimations, showcases, retrospectives, stand-ups...and that's just the routine stuff. Chuck in random ad-hoc meetings spun up by management for whatever reason validates their existence on that particular day, along with stuff like running interviews for recruitment, and suddenly I'm not a developer any more, I'm just a drone bouncing from one meeting room to the next, with barely time to check my email for the next meeting invite in between. At one point I looked at my calendar and saw I had 40 hours of meetings scheduled for that week with no time for lunch (I'm diabetic and if I tried to do that I'd pass out and die sometime in the afternoon) for two weeks flat with the third week rapidly filling up. At my next meeting someone demanded to know when something would be done, and I replied "never". He gave me an angry glare and said "excuse me?" as the president of the company looked at me in shock. I replied "it will *never* be done. Look, here is my calendar showing I have 40 hours of meetings booked each of the next two weeks, all meetings with you or people like you demanding to know why something isn't done. You have left me literally no time at all to actually sit down, design a system, write some specs, and communicate them to my team such that something can actually get done, I will be spending literally *all* of my time telling you why it's not done yet. So if you don't back off, cancel some of these pointless meetings, and give me some time to do my job instead of spending all of my time talking to you, *nothing will ever get done*. Not to mention that since I am diabetic and you have given me no time to eat I will probably die in the next 48 hours and then you will have a *real* problem." And I stood up and walked out. The president of the company tried to chew me out over that but I was having none of it. In the end he told some of the salespeople to back off and give me time to do something, so some of my calendar cleared up. &gt; On the rare occasion that my calendar is (relatively) empty, the second most irritating thing is random interruptions or context switching. I had a programmer working for me... one day my boss came to him and switched his project literally every 15 minutes. It takes like 3 hours for a programmer to get back into The Zone after they've been bothered. I pointed out to boss that if he didn't stop this nothing would ever get done and my programmer would quit. My boss told me to mind my own business. My programmer told me that day that he was planning to quit because of my boss. I followed him out the door. &gt; But the worst part? Having to deal with other developers not contributing. I have made it high enough up the ladder that when I encounter them, I fire them. I don't like to do that, I try to help people become useful and keep them in their job and even promote them if I can, but if they refuse to be helped I will fire them. Unfortunately a guy I had to fire last time I was a manager went on to do the same thing at his next job, and when he got fired he came back with a gun and shot his former boss dead. 
Not the person you're responding to, but my solution at work is a few hundred megabytes. Add in a continuous testing session and everything slows to a crawl.
Do you have a source for that? I couldn't find anyone saying as much.
As a programmer, a software manager who thinks they know better than me what is possible. I've had software managers tell me that they merely wanted me to invent full on artificial intelligence so the user could enter, in broken English, what they wanted, and the AI would read their mind, do what they really wanted (instead of what they asked for), and respond to them in plain english. And I had two weeks to do this. I've had software managers sign contracts committing me to write software that would process input from the user a year before they entered it. I've had software managers forward to me user complaints that the user tried to enter data that we didn't accept (or want) in a part of the screen that did not accept user input (they clicked on the instructions and tried to type) and failed, and the manager demanded that I fix this "problem" overnight. Bluntly, a "software manager" that accepts or writes specs without a programmer at their side to tell them what is and isn't possible is a fool. 
IIRC, didn't they say that the Mono WASM implementation was with 0 optimizations? I thought they were just focusing on implementation at the moment.
&gt; Well nothing is impossible, yes. * Write HAL. In Javascript. You have two weeks. Oh, and he has to respond to any instructions in any language, including ones you don't speak. * Since the users think usernames and passwords are too hard, make the web page read the user's mind and log them in automatically. There can never be any registration process. * Users are completing their online shopping but abandoning the purchase because entering their credit card number is too confusing. Make the web page magically divine the numbers on the credit card from their pocket so they never have to enter it, not even the first time. * Let the user enter any data they want, anywhere on the screen they want, even if they want to enter it on the instructions and it's data we can't use in any way. From what they entered, divine the correct results and magically make happen the thing that they wanted when they came to the web site. * Make sure to issue to the user a check for their reimbursable expenditure. Make sure the check is in the correct amount and not a penny more. You are forbidden to ever ask the user how much money that is. * This web page is too slow. You are required to ensure that it will load *instantly* - and I really mean it must take 0.0 seconds - no matter what kind of computer the user is using, what kind of internet connection they have, how much software they have running in the background, or how fast our company's existing internet connection to our servers is. * I don't care if the user is using a text-only browser from 8 years ago running on an ancient and unsupported version of Linux, the web page must get up and sing and dance and look just like it does on my laptop with the latest version of Safari installed, at all times. * I don't *care* if the users is blind, it *must* use red and green to symbolize stop and go and is forbidden to ever use the words. Oh, and it must also be fully handicapped compliant and pass an inspection from the state disability office. I've actually received each and every one of these requirements. And told each and every one of those managers where to shove it.
I've been a coder for 40+ years. From this, I know that when a programmer tells me something is impossible I should listen to their reasons, if I don't agree I should discuss it with them, and either way it will end up being a learning experience for one or both of us. These learning experiences are more valuable than the time it takes to discuss the issues. In most cases I know some way it can be done that hasn't occurred to them and I am able to help them by teaching them something new and they come away a better programmer for it. (I pride myself in the fact that I turn junior programmers rapidly into senior programmers without injuring them in the process. As a result my people are intensely loyal to me and continue to turn to me for career advice decades after I worked with them.) On rare occasions they do still sometimes surprise me by telling me about something I didn't know about the project. 
The web page must read the user's mind and do what they want without them ever having to input anything. You have 2 weeks to implement this. It must be accomplished by one programmer (you and only you), in client-side Javascript, and must run on any version of any browser on any OS, including those that do not have Javasctipt, on any hardware.
I'm working on a web server, and a C# API implementation of a database format I'm making to be used with the server
Why not?
The observer pattern is trivial to implement. Just encapsulate a list and expose some events. Fire them on property set.
&gt; I'm assuming C# has an equivalent map/filter method. Enumerable.Select and Enumerable.Where, respectively
The factory pattern exists explicitly to solve this problem and can be asynchronously. Long running constructors are frowned upon for a reason. Async ones would be a disaster.
They use the mono compilers to compile C# to intermediate language then the LLVM (with a custom IL frontend) to compile the IL to a native executable. 
How often do you see deadlines adjusted? I had *one* employer that used to adjust deadlines when requirements changed. In 1999. Not before or since.
&gt; I'm not generally wild about rethrowing, but this seems like a sensible time and place for it. In general, you should only catch an exception to either: - deal with it gracefully - add context and then re-throw (while saving the original exception as an inner exception object) Where developers run into trouble is when they do too much of either. Or get into the bad habit of trying to catch every possible exception.
If you're doing web development on Azure, lean into Application Insights. Or a 3rd party tool like Raygun. With tools like Raygun, you just configure it (Web.config) so that all unhandled exceptions get written to the Raygun server. While you also have the option to log directly you should rarely use that unless you are going to "catch, add context, re-throw". &gt; I do not like using third party apps and importing stuff Ditch this mindset. Yes, there are a lot of poorly thought out 3rd party apps/libraries. But there are also a lot where the author(s) have spent more time then you have to think about corner cases, edge cases, and how to generalize the solution to be flexible.
I've got news for you, based on decades of experience: At *any* company, no matter *how* good or bad you do, sooner or later manglement *will* come in and shove a really bad waterfall model (usually with lots of painful accessories) down your throat. At a usual good job the period of sanity lasts about 1 year, on very rare occasions it can last 2 or 3. Then things go haywire, and your only choices are to either find another job elsewhere (and for most people this is a necessity as manglement will go crazy and start firing people) or put up with all their BS and jump though all the hoops (no matter how high and if they're flaming) and survive longer than manglement until a new regime comes in and there's another brief period of sanity. 
Thanks for providing a data point; I will see how my primary solution compares but my assumption is it isn't as large. What specs is your dev box? I am not sure why asking the question is bad -- I wasn't saying it doesn't impact performance -- just that it hasn't impacted me.
If there is time to eat snacks the meeting is too long. I used to have a daily team meeting, and there was someone whose job it was to call the end of the meeting if it hit 5 minutes, whether people were done or not. This encouraged everyone to be terse, so everyone could get a word in and you'd know who you wanted to talk to after the meeting. 
I find most managers I meet usually just think programmers are idiots. Until everyone figures that out about them and proves them wrong by either getting them fired, quitting, or both. 
I once had sales for another company *convince* my client to buy their system... and it took me 3 weeks to get the client to see that the system did not in fact exist, that the salesperson had merely dazzled them with a bunch of buzzwords and was trying to get their money after which nothing would be delivered. 
Thank you, but: MyObject o = b.Open(); // Copies the EventRaised property from b Hasn't this line a problem with multithreaded code?
&gt; You are not describing requirements creep at all. A car, a jet, and a blender are fundamantally different things. You and I know that, but if the client doesn't, your sales department doesn't, and your client manager doesn't, then it becomes scope creep. &gt; it is up to the team to recognize when creep is going too far and manage the client's expectations. My experience is that manglement rarely allows the team to communicate with the client about such things, if at all. 
So I have a couple questions for you. First, what kind of machine/processor is going to be running this. (I. E. Win 7/10 on an Intel iSeries or AMD Ryzen or a server OS with a Xeon chip specially suited for high volume calculations on multiple threads) Second are you loading your data into a database and working with a live dataset that refreshes? Third regardless of your answer to question 2 have you considered offloading your calculations/analytics into a more "data analysis friendly" language or environment? These languages/environments may include: the R programming language (know as a data analytics powerhouse) python and its associated math and analytic libraries (also a favorite of AI and data analysts), or if using MS SQL Server the analytics and reporting engine (SSAS/SSRS) which can be automated and manipulated via C#. If you can start with these I might be able to help a bit. I also might just be highly intrigued about how you intend to pull off a task generally achieved by data centers, HPC Clusters, or super computers. 
In your calc for .NET you are using an 'Average' call. That would enumerate the collection again. The equivalent JavaScript code isn't doing that, its just doing a division operation against the collection count. I would get rid of all of the IList usages. In performance code using arrays directly is preferred, especially for fixed size collections. At the very least, at least use List instead of IList. It looks like on WASM the call lookups are much more expensive. Also, it looks like you have some console hookup in your index in JavaScript. If that is listening for Blazor console writes, then you need to comment out all of your console writelines that occur during the test unless you are certain that the console piping can't happen asynchronously and accidentally overlap with testing code (its doing an element lookup and writing to the DOM, that can be very expensive, and if it is happening async, it is most likely occurring in the middle of your performance test). What version of which browser are you using to run the Blazor test?
Very good. There are other useful extensions for this, such as Async Analyzers.
Standards for readability vary, but I think split some of the logic in GroupIsVaild out the way you've done with the other methods, leveraging LINQ's All() method, and being willing to rewrite some of your ifs as direct returns would get you some improvement: private bool GroupIsValid(Group x) =&gt; !x.Display.InForm || x.Kids.All(KidIsValid); private bool KidIsValid(Kid x) { switch (x) { case Group y: return GroupIsValid(y); case Line y: return LineIsValid(y); default: return true; } } private bool LineIsValid(Line x) { return x == null || !x.Display.InForm || x.Kids.All(LineItemIsValid); } private bool LineItemIsValid(BaseClass x) { if (x.AssociatedDataItem == null || x.Readonly) { return true; } if (x.AssociatedDataItem.IsMandatory &amp;&amp; x.AssociatedDataItem.IsNull) { return false; } return x is PickList y &amp;&amp; PickListIsValid(y); } private bool PicklistIsValid(PickList x) { return x.Choices == null || x.Choices.All(y =&gt; !y.ExtraFieldRequired || !string.IsNullOrEmpty(y.ExtraFieldValue)); } (I've used awful, single-character variable names because none of them live more than a couple lines, they don't say much less than the ones you've got there, and I don't like to use long variable names just for the sake of have long variable names. YMMV.) You could break out the validation on pick list choices, too, but it's debatable how much value that adds.
I've now updated to Blazor 0.3.0, and performance didn't improve.
WARNING HUGE WALL OF TECHNO BABBLE INCOMING WITH NO TL;DR So with regards to my first question: Yes your i3 will very much struggle to pull off anything close to this complex lol. To be fair though even an i7 would end up having a hard time keeping up after a while. The reason for this is that the i series processor is designed to excel at handling one thing at a time incredibly well and many things fairly well. Xeon processors on the other hand, which are generally but not always found in servers, excel at performing an immense number of tasks and calculations simultaneously, all while handling countless more requests by the second. Generally speaking xeon chips will run circles around a desktop (iSeries) chip with it comes to handling multiple processes and serving them quickly. But when it comes to handling a single intensive thread/process the desktop chip is the clear front runner. In regards to my second and third question: Without a doubt you should be loading your data into a database. I would strongly recommend that you download the developer version of MS SQL server and do some reading up on TRANSACT-SQL (TSQL Microsoft unique flavor of SQL) Having your data loaded into a proper database will make it much easier to work with. Additionally if you use MS SQL it works beautifully with C# (it's also free for developers.) I would generate a series of basic input and manipulation queries and load them into the database as stored procedures for quick access both in your program and SQL. Once your raw data is loaded into the DB I would look into the raw power of SQL Server Analytics Services (SSAS) and SQL Server Reporting Services (SSRS) to handle any advanced data manipulation, transformations, or calculations. SSAS and SSRS are designed for well, data analytics, they are tied directly into your databases, and with some practice, alot of patience, and a tiny bit of luck, you can generate SSRS packages (that's what the analytics process is called in SSRS) that will handle your calculations and analytics on your data, without moving or changing it, and output it into temporary tables that can be retrieved by your C# program. Did I also mention SSRS has C# scripts le elements too? And while yes, as I said in my OP you could use other languages, such as R or Python with libs, since you are already working within the lovely land of .Net you may as well stay in it. Everything is usually compatible and in keeping with the greatest programming paradigm ever invented, Keep It Simple Stupid (KISS). Conclusion: If I was going to pull off something like this I would probably break the project down into individual components based on specific process or features. For example, the first thing you mention is the need to pull data from a source at interval (t) and push it to the DB. Knowing that (t) is a small time value and the event it raises will be resource and thread intensive I would separate this from the main program and create a standalone data grabber, that accomplishes the same task, but isn't being slowed down by your other processes and inversely isn't affecting those processes either. As a further example I refer you to the section on my second question about offloading your analytics into a friendlier environment. Which again would somewhat reduce your overhead as it's not interfering with other stuff and can run multi thread/core naturally. In terms of hardware, you could probably pull this off to some degree with a second hand server. I purchased a Dell R710 (rack mount pizza box server) with 64G DDR3 ram**, dual socket xeon chips, and 2 1TB HDD for around $400 from SAVEMYSERVER. The major drawback here is you only get an evaluation copy of windows server OS that shits down every hour when the eval period expires and the cost of windows server OS makes my eyes bleed, even more so since they switched to a "per core" licence model..... WHY YOU GOTTA BE SO DAMN EXPENSIVE MICROSOFT. /RageComplete **given the level of analytics you are performing here I almost want to say DDR4 with ECC (error correction code) is a must. ECC will ensure that all data in memory is correct and error free and if not it will perform operations to fix the error. If you wanted to go overkill and could afford 2 of these bad boys they each come equipped with 4 NIC ports which you can NIC team together to create a 4GB/s connection. Combined with a switch capable of handling 2 Link Aggregate Groups (4 ports each) you could have 2 systems that can transfer data between themselves incredibly fast. Meaning you could setup server A to be your database server and server B to be your UI/Data grabber server. That way all of your available resources on server A can be devoted to analytics without being bogged down by the constant action of the DataGrabber. Lastly in response to this "I gather what you are saying is that my intel core i3 will bust a nut trying to do this? :) If it needs a supercomputer, I guess I'll give up now" I will refer you to the fact that the ~Chair~ Air Force told the pentagon they needed a super computer but were told no because it was too expensive. So instead of buying a super computer, they went out and bought something like 300 PS3s, modded the OS, and slaved them together to make their own super computer. The moral of the story there being "where theses a will, there's a way."
I was interested in how Bridge would benchmark against your Wasm and JavaScript tests. Looks like Bridge is running about 10x faster than Wasm/Blazor, which is pretty much exactly what we're seeing in our local performance tests. * **Bridge.NET** * Generate: 18ms * Sort: 20ms * Calculate: 37ms I combined your files into one Deck so we can share easily... https://deck.net/90d5f88199753f64b37b5e2256bdb4bc Can you run the Deck above and respond with the results? Run on the same machine/browser as you're running the Wasm and JavaScript tests.
It depends on the language implementation. One might do the former, others might do the latter. 
Cloud computing/microservices can be implemented in any language.
This is the registration process for a company that produces one of the best selling Excel AddIns. https://www.ablebits.com/support/activation.php#automatic Do you think this is something they have developed in house along with there own authentication server or have they employed some premade off the shelf solution?
That's awesome! :) I did a first quick run, and got the following results on Chrome: * Generate: 22ms * Sort: 25ms * Calculate: 53ms I'm really curious why Calculate is running slower than the rest. I will get more results and look into your pull request later today and update everything accordingly. Thank you!
We think the danger of them trying to de-compile our programming is very, very low. If someone is determined enough to do it they will hire someone to crack whatever we do on that front. We will put in some basic measures but not much else on this front. The big danger (and the most likely scenario) is that our competitors will get a usable copy of our calculator on their PCs. This will allow them to put together quotes using our results. Its this scenario we are more focused on preventing.
Checking a boolean is a lot simpler than any event shenanigans, so I'm going to assume that checking your object's Open state is expensive. Easy solution. The panacea to all OO problems. Add another level of abstraction!!! public class OpenCheckingWrapper { private object openLock = new object(); private bool isOpen = false; public MyObject MyObject {get; private set; } // &lt;- initialize in the constructor public void OpenIfNeeded() { if (!isOpen) { lock(openLock) { if (!isOpen) { this.myObject.Open(); this.isOpen = true; } } ... You can try and do it lock-free with `Interlocked.CompareSwap` or something, but it's probably not worth the likelihood that you'll do it wrong. 
You could always `builder.GetOpenMyObject(o_EventRaised);`, if you're worried about that.
They are planning to (or at least thinking about it): http://xoofx.com/blog/2018/04/06/porting-unity-to-coreclr/
&gt; I'm really curious why Calculate is running slower than the rest. I suspect the difference occurs in how `avg` and `stDevSum` calculations perform in C# (using LINQ) vs JavaScript (using native). See [.js](https://github.com/stefan-schweiger/dotWasmBenchmark/blob/master/dotWasmBenchmark.JavaScript/src/Calc.ts#L4-L5) vs [.cs](https://github.com/stefan-schweiger/dotWasmBenchmark/blob/master/dotWasmBenchmark.DotNet/Calc.cs#L15-L16). Calling the native JavaScript `.reduce` plus the basic calculation for average is likely faster than spinning up LINQ to run `.Average` and `.Sum` for those calculations. Just a hypothesis. I have not tested.
You're missing the code that displays the result or calculates it. First take all the ref's off the parameters of all the methods. They're not needed. Change CalcStayCharges to remove the DAILY\_BASE parameter, because you are defining a constant \(const\) at the top for DAILY\_BASE of 350, so we don't need to pass it in as a parameter, and certainly not with the same name, that's just confusing. Finally you need to populate the bit of code at calculateButton\_Click that currently just has comments. Then in CalculateButton\_Click, you need to set all the variables you have from the text boxes values. So daysAdmitted would be daysAdmitted = Decimal.Parse\(daysAdmittedTextbox.Text\); \(you'll have to check the syntax of Decimal.Parse, I can't remember if it has a second parameter. You can get all the names from the resetButton\_click code. Call CalcStayChages and CalcMiscCharges, set variables to the result and then set the output textboxes to the values. Other weird stuff, in resetButton\_Click you're mixing String.Empty and "" , these are the same thing. So mixing them together is bad practice. Not terrible practice, but it looks confusing to beginners. this.Close only closes the current form, and if that is the only form it closes the application. So there's a bit more to it than it just closes the application.
Nice. Thanks for your answer.
The **Generate** difference of **7.5ms** vs **18.0ms** is almost completely caused by `Math.random` in JavaScript vs `new Random();` in C#. The C# `new Random();` is just doing more work vs `Math.random` which is optimized to run natively. With a couple minor adjustments, I can get **Generate** down to **5.0ms** using Bridge, and that edit perfectly matches your original JavaScript logic.
Uk wise I've been to DDD a couple of times - http://developerdeveloperdeveloper.com/ http://www.dddnorth.co.uk/ https://dddsouthwest.com/ There are a few more in different locations that I've missed out, admission is free but they're not the easiest events to get a ticket to.
Seems like a great choice, thanks!
NDC London is great as well but the ticket is pretty expensive.
No worries. Was a legitimate question, don't know why you were down voted.
Okay, i have been swamped with other obligations. So the first request header shows content-length:86 which i would not expect with an image being transmitted? content type is multipart form-data. No disposition header is present.
Future Decoded in the UK is a free event run by microsoft. It can often be quite business orientated, although the technical deep dives are what you're describing.
Are you sure you want to be using Begin/End? It's an old style of asynchronous programming, and the ReceiveAsync/SendAsync pretty much makes it completely obsolete. I don't have a lot of specific advice, maybe you shouldn't call BeginReceive more than once, but that's just a guess.
What if you use a native sort function instead of rolling your own?
You can find .NET user groups here: https://www.meetup.com/pro/dotnet/ 
I'm not sure it is though, because some languages perform better with naive implementations than others. C# is likely going to be seriously hurt by your high level friendly implementation, javascript probably isn't anywhere near as much.
That's more or less why I don't want to use native implementations if possible, because their optimizations can have such a serious performance impact for doing the same task and make it harder to compare algorithm performance.
&gt; Did you try running it multiple times within the same program? This is stupid advice, when you browse a website you don't reload it 1000 times to hope to get good performance, you want something that is fast on first run This is why Apple don't want JIT based applications in their store
I saw a video presentation by some guys who did something similar using react in wpf at one point. I *think* it was these guys: https://weareadaptive.com/2014/04/08/reactive-ui/
I think you were just going against the majority of people's experiences so they voted with "disagree" in mind instead of "does not contribute to the discussion". My work Dev box is a 2015 i7u. That u is very likely most of the issue. I read somewhere else that people like to run 64-bit vs because of address space. That makes some sense, so I might try that.
This is _diagnostic_ advice to try and identify the culprit bottleneck/cause of the poor performance of an experimental runtime. JIT overhead for benchmarking is a known variable. I am not suggesting that the OP fix their problems by running the code multiple times in practice.
Thanks for the reply, I've seen ReceiveAsync/SendAsync implementations. I will change the implementation if I can't find a solution to this issue. If I do not call BeginReceive more than once I will only get one message.
Have you considered putting the responsibility of checking validity on each class? In this case it looks like each of the classes has enough information within themselves to validate. So you could for instance add an IsValid() method to the Group class. Then each of these methods would exist with their class.
Removed: Rule 7. Be aware of the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion) This is the second removal as such.
Got it. Took a bit of doing though....kept timing out...
Doesn't print out results to the console. Thank you for your time, but I think we're going to go in a different direction.
Well they were waterfall all along. We are talking about a fortune 50 company with thousands of employees. They are about as hardcore enterprise driven as any company ever. 
`Enumerable.Range(1, 100).Select(y =&gt; new[] { ((y % 3 == 0 ? "fizz" : null) + (y % 5 == 0 ? "buzz" : null)), y.ToString() }.Max()).AsParallel().WithDegreeOfParallelism(1).ForAll(Console.WriteLine)` Do I get the job?
`Enumerable.Range(1, 100).Select(y =&gt; new[] { ((y % 3 == 0 ? "fizz" : null) + (y % 5 == 0 ? "buzz" : null)), y.ToString() }.Max()).AsParallel().WithDegreeOfParallelism(1).ForAll(Console.WriteLine);` Do I get the job?
Hi /u/Zecuel One thing you may want to check out are the hundreds of free seminars and webinars that Microsoft runs every year. Some will be more business focused and not so tech-heavy, but others are aimed at more of a developer audience. https://events.microsoft.com/ I'd also echo one of the other commenters who suggested looking for a .NET/C# user group or meetup in your area. These are great events that not only have regular deep dives on a variety of tech topics, but will also provide an opportunity to meet other developers from all kinds of backgrounds. The Future Decoded event that someone mentioned usually falls in late autumn and has dozens of talks like the one you mentioned. It's usually divided into two days, with Day 1 being business focused and Day 2 being tech focused, so I'd probably head to London for the latter. Finally, as you may have guessed from my username I work at Microsoft, so do feel free to reach out via private message if I can help you any further.
Its probably the bets intro to C# you'll get. I hate to say it since I really didn't like the chap when he was my lecturer but his book is pretty damn good Using XNA gives you a framework to explore a lot of concepts that otherwise would be very difficult. You get to design a game using OOP pretty easily while having most of the graphics stuff handled fo ryou. You wouldn't want to be writing graphics libraries etc. You're not learning XNA, you're learning OOP. I would recommend C# in Depth afterwards.
This guy is just learning for loops - he has absolutely no need to get his head around Linq yet.
 .Select(y =&gt; ((y % 3 == 0 ? "Fizz" : null) + (y % 5 == 0 ? "Buzz" : null)) ?? y.ToString()) Cuts out the new array and Max
I actually did this a while ago using ternary operators. Enumerable.Range(1,100) .Select(i =&gt; (i % 15 == 0) ? "FizzBuzz" : (i % 3 == 0) ? "Fizz" : (i % 5 == 0) ? "Buzz" : i.ToString() ) .ToList() .ForEach(Console.WriteLine); It's across lines for readability but it's a single line syntactically.
[Welcome aboard!](https://i.imgur.com/MxMXxOW.jpg) Everyone, I'd like to introduce the newest member to the /r/csharp moderator team!
That looks disgusting, good job!
Two null strings concatted give you an empty string (or at least it is in LINQPad), not null. I'm getting two empty strings, fizz, an empty string, buzz, fizz, etc.
It was worth a shot.
In the same spirit, I improved your example: string.Join(Environment.NewLine, Enumerable.Range(1, 1000).Select(i =&gt; (i % 3 == 0 ? "fizz" : null) + (i % 5 == 0 ? "buzz" : null)) .Select((o, i) =&gt; o == "" ? i.ToString() : o)) Method | N | Mean | Error | StdDev | ------- |----- |----------:|----------:|----------:| Other | 1000 | 251.01 ms | 0.4175 ms | 0.3701 ms | Mine | 1000 | 88.15 ms | 0.2018 ms | 0.1888 ms | 
Here's my one-liner: Enumerable.Range(1, 100).Select(y =&gt; y == 0 ? "fizzbuzz" : y == 1 ? "1" : y == 2 ? "2" : y == 3 ? "fizz" : y == 4 ? "4" : y == 5 ? "buzz" : y == 6 ? "fizz" : y == 7 ? "7" : y == 8 ? "8" : y == 9 ? "fizz" : y == 10 ? "buzz" : y == 11 ? "11" : y == 12 ? "fizz" : y == 13 ? "13" : y == 14 ? "14" : y == 15 ? "fizzbuzz" : y == 16 ? "16" : y == 17 ? "17" : y == 18 ? "fizz" : y == 19 ? "19" : y == 20 ? "buzz" : y == 21 ? "fizz" : y == 22 ? "22" : y == 23 ? "23" : y == 24 ? "fizz" : y == 25 ? "buzz" : y == 26 ? "26" : y == 27 ? "fizz" : y == 28 ? "28" : y == 29 ? "29" : y == 30 ? "fizzbuzz" : y == 31 ? "31" : y == 32 ? "32" : y == 33 ? "fizz" : y == 34 ? "34" : y == 35 ? "buzz" : y == 36 ? "fizz" : y == 37 ? "37" : y == 38 ? "38" : y == 39 ? "fizz" : y == 40 ? "buzz" : y == 41 ? "41" : y == 42 ? "fizz" : y == 43 ? "43" : y == 44 ? "44" : y == 45 ? "fizzbuzz" : y == 46 ? "46" : y == 47 ? "47" : y == 48 ? "fizz" : y == 49 ? "49" : y == 50 ? "buzz" : y == 51 ? "fizz" : y == 52 ? "52" : y == 53 ? "53" : y == 54 ? "fizz" : y == 55 ? "buzz" : y == 56 ? "56" : y == 57 ? "fizz" : y == 58 ? "58" : y == 59 ? "59" : y == 60 ? "fizzbuzz" : y == 61 ? "61" : y == 62 ? "62" : y == 63 ? "fizz" : y == 64 ? "64" : y == 65 ? "buzz" : y == 66 ? "fizz" : y == 67 ? "67" : y == 68 ? "68" : y == 69 ? "fizz" : y == 70 ? "buzz" : y == 71 ? "71" : y == 72 ? "fizz" : y == 73 ? "73" : y == 74 ? "74" : y == 75 ? "fizzbuzz" : y == 76 ? "76" : y == 77 ? "77" : y == 78 ? "fizz" : y == 79 ? "79" : y == 80 ? "buzz" : y == 81 ? "fizz" : y == 82 ? "82" : y == 83 ? "83" : y == 84 ? "fizz" : y == 85 ? "buzz" : y == 86 ? "86" : y == 87 ? "fizz" : y == 88 ? "88" : y == 89 ? "89" : y == 90 ? "fizzbuzz" : y == 91 ? "91" : y == 92 ? "92" : y == 93 ? "fizz" : y == 94 ? "94" : y == 95 ? "buzz" : y == 96 ? "fizz" : y == 97 ? "97" : y == 98 ? "98" : y == 99 ? "fizz" : y == 100 ? "buzz" : "").ToList().ForEach(Console.WriteLine);
Thanks! That looks very promising/interesting, checking it out. Thank you!
&gt; I noticed it was written over 4 years ago The latest version is ~18 months old (October 2016), and is available free [here](http://www.csharpcourse.com/) It is definitely relevant and an excellent starter book.
Interesting; I just got to work and double checked the size of our main solution. Not counting nuget packages. .vs folder, or .git folder, etc, it is right around 800mb. So surprisingly larger. My current machine is an i7-7700HQ, 16 gb of ram, 1tb ssd. The machine before was an i7-6700, also 16gb of ram and ssd. Before that they were i5s with 12GB and spinning rust... those machines bogged down a little but it wasn't specific to R#.
I think it's very likely the 64-bit or the i7HQ. The i7u I have is for battery savings...
Yeah the battery life on my T470p is NOT great lol. I do wonder though why companies are STILL cheaping out on developer machines. There is so much productivity gain from such a comparatively small CapEx.
Microsoft Build - watch it live online for free next week.
Question for you - how do you do a benchmark like that with your line of code?
I used BenchmarkDotNet nuget package. This is the class that benchmarks the code: public class FizzBuzzBenchmark { [Params(1000)] public int N; private string data; [Benchmark(Description = "linnrose")] public void Main() { for (int x = 0; x &lt; N; x++) { string.Join(Environment.NewLine, Enumerable.Range(1, 1000).Select(y =&gt; new[] {(y % 3 == 0 ? "fizz" : null) + (y % 5 == 0 ? "buzz" : null), y.ToString()}.Max())); } } [Benchmark(Description = "GoneWrongFor")] public void Mine() { for (int x = 0; x &lt; N; x++) { string.Join(Environment.NewLine, Enumerable.Range(1, 1000).Select(i =&gt; (i % 3 == 0 ? "fizz" : null) + (i % 5 == 0 ? "buzz" : null)) .Select((o, i) =&gt; o == "" ? i.ToString() : o)); } } [Benchmark(Description = "PhonicUK")] public void Submitter1() { for (int x = 0; x &lt; N; x++) { string.Join(Environment.NewLine, Enumerable.Range(1, 1000) .Select(i =&gt; (i % 15 == 0) ? "FizzBuzz" : (i % 3 == 0) ? "Fizz" : (i % 5 == 0) ? "Buzz" : i.ToString() )); } } } And then I run the benchmark like this: var summary = BenchmarkRunner.Run&lt;FizzBuzzBenchmark&gt;();
My bosses boss just accidentally ordered the wrong one. They both said i7, but one was $300 cheaper. (About 20% difference)
Others in this thread have made similar statements so I give your arguments credibility based on quantity alone. However my reply to you is the same as it has been to others: Support these claims! &gt; Long running constructors are frowned upon for a reason. What reason is that? Show code that demonstrates it justifies not implementing async constructors. &gt; Async ones would be a disaster. Support this claim. Show code. 
How do you think I earned my flair? ;)
Oooooooooh, we're doing microbenchmarks on single-expression FizzBuzz implementations! I want to play! using System; using System.Globalization; using System.Linq; using BenchmarkDotNet.Attributes; using BenchmarkDotNet.Configs; using BenchmarkDotNet.Jobs; using BenchmarkDotNet.Running; namespace ConsoleApp0 { public class Program { static void Main() =&gt; BenchmarkRunner.Run&lt;Program&gt;(ManualConfig.Create(DefaultConfig.Instance.With(Job.Default.WithGcServer(true)))); [Params(1000)] public int N { get; set; } [Benchmark] public string GoneWrongFor() =&gt; string.Join(Environment.NewLine, Enumerable.Range(1, N).Select(i =&gt; (i % 3 == 0 ? "fizz" : null) + (i % 5 == 0 ? "buzz" : null)).Select((o, i) =&gt; o == "" ? i.ToString() : o)); [Benchmark] public string linnrose() =&gt; string.Join(Environment.NewLine, Enumerable.Range(1, N).Select(y =&gt; new[] { ((y % 3 == 0 ? "fizz" : null) + (y % 5 == 0 ? "buzz" : null)), y.ToString() }.Max())); [Benchmark] public string PhonicUK() =&gt; string.Join(Environment.NewLine, Enumerable.Range(1, N).Select(i =&gt; (i % 15 == 0) ? "fizzbuzz" : (i % 3 == 0) ? "fizz" : (i % 5 == 0) ? "buzz" : i.ToString())); [Benchmark] public string airbreather() =&gt; string.Join(Environment.NewLine, Array.ConvertAll(Enumerable.Range(1, N).ToArray(), i =&gt; (i % 15 == 0) ? "fizzbuzz" : (i % 3 == 0) ? "fizz" : (i % 5 == 0) ? "buzz" : i.ToString(CultureInfo.InvariantCulture))); } } 
I mean it is really easy to blame your team, but when upgrading is a cause for fear and loathing maybe its a sign...
Geesch that's a fast one-liner!
Coding Blocks recently ran a contest asking people to send in their favorite NuGet packages. Thought /r/csharp might be interested in the results!
XUnit and Serilog are my favorites on the list, though I prefer Autofac over Ninject. The most obscure one is probably MarkdownLog which can take an array of object (including anon. objects) and convert it into a Markdown table. It's perfect for formatted text output, though it needs a bit of maintenance love.
But that isn't solved by using your own implementations, because your visually similar algorithms can be completely different when compiled...
Liar liar, bits on fire.
40 years of the advice of people who know better than you. **Including the people who wrote the framework**. Constructors are not just static methods, they're something different and unique all on their own. An object being constructed both exists and does not exist at the same time. Write an async factory.
No, check out my new flair. It's totally legit, for real.
That's too bad code-reviews are removing what are considered best practices. But ya... not much you can do about it. Better to learn and be nice to your superiors than be bitter and have everyone dislike you lol. Also, keep track (in private spreadsheet etc.) of everything you work on. Specific tasks. What they were for, how long it took, how long it was supposed to take (estimate) and (most importantly) what business goal it achieved and some metric (i.e.number) to go with it. Once you're ready to start looking elsewhere you can fill your resume with "Accomplished [technical thing|business goal] which [improved|increased|etc.] [system performance|business goal] by [metric]. If you can show that your technical skills actually affected the business (in a concrete way) then you'll have no problem finding the next job. Side-note, what industry are you working in?
Here's one I made earlier: Enumerable.Range(1, 100) .Select(x =&gt; { string result = ""; if (x % 3 == 0) result = "fizz"; if (x % 5 == 0) result += "buzz"; return result.Length &gt; 0? result : x.ToString(); }) .ToList() .ForEach(x =&gt; System.Console.WriteLine(x));
My contributions to this were: - `string.Join("someString", someArray)` should tend to be faster than `string.Join("someString", someEnumerable)`, because the implementation can compute ahead of time exactly how big the result string will need to be instead of having to regularly reallocate a dynamic array. - `Array.ConvertAll` should tend to significantly outperform `Enumerable.Select`, because it only needs to make one indirect call per element (the callback we give it) instead of three (the callback we give it, `MoveNext()`, and `get_Current()`). - That previous item may seem counterintuitive since I'm tacking `.ToArray()` onto the `Enumerable.Range(1, N)` anyway, but I happen to know that .NET Core (at least 2.0) has a specific optimization: `Enumerable.Range(1, N)` returns an object that the `.ToArray()` extension method knows about and ultimately (after a few quick type checks and one-time indirect calls) does the whole thing as a `for` loop, bypassing the normal inefficient `IEnumerable&lt;T&gt;` looping construct. - Finally, `.ToString(CultureInfo.InvariantCulture)` fetches the invariant culture with a simple field access, as opposed to `NumberFormatInfo.CurrentInfo` used by the default `.ToString()` which reaches into the current thread's storage and just generally does a bunch of really odd stuff... since this is done in a loop, every access matters (if you actually had a **specific** reason to want to use the current culture's formatting, you could still avoid the performance hit by fetching `CultureInfo.CurrentCulture` outside the loop and passing that in... I couldn't do this here because that would break the "single-expression" rule, so I cheated and used something that I knew would be cheaper to fetch a zillion times).
Hangfire or Service Stack 
microsoft.net.compilers
I have a one line fizz buzz on my resume. A technical interviewer mentioned that he noticed it while going through my resume, and now he's my colleague.
Ban me bro.
My only beef with putting the IF statements one after the other is, if there is more than one problem with the input, the user only gets informed of one at a time and they need to keep resubmitting. Very frustrating experience. I would build one error message that tells the user everything that's wrong. 
Careful - they'll think you're "Mr. Linq" after this. &gt; I dunno. Go ask /u/csdahlberg - he doesn't look super busy. 
[CodeMash](http://www.codemash.org/) is local to me so I've been a few times. Jon Skeet is there most years. I'm not sure what you mean by inexpensive since potential travel to another country and accommodations are likely more expensive than admission. 
FSharp.Core :P
&gt; We're going seriously backward. Ha. JavaScript was executing _faster_ than native DotNET Console in some of the benchmarks. Interesting work @Staeff.
There you go.
I'm a sucker for ternary operators... :)
Your use of scanning/retrieving the prefix and postfix makes me wonder if the following is valid, where given: value = "Some stuff (prefix)text to extract(postfix) some other stuff"; treeConfig.Prefix = "(prefix)"; treeConfig.Postfix = "(postfix)" Is the intended result here to be `"text to extract"`?
Well, 16 bytes is 16 bytes. It will depend upon the variable types used in the struct, and how many bytes each variable uses up. For instance 4 integers would 16 bytes (4 bytes per int) public struct Foo { public int a, b, c, d; } But a string could more or less than 16. 
That's a ridiculous "rule" and you should ignore it completely. It's premature optimization at its worst. If you need a struct, use a struct and don't worry about the size. If you run into major performance issues down the road and you can't solve the issues by fixing your algorithm then maybe you can look into the time taken to pass larger structs by value.
A string would be a reference afaik. And those are also 4 bytes iirc.
Same, i believe some thing don't justify writing a whole if for it.
Variables do not randomly change their types. Of course it's theoretically possible that there's a bug in the IDE, but since some version of the code apparently successfully compiled and executed I find that very unlikely. The most likely explanation to me is that you declared multiple variables with the same name in different places (e.g. a local variable and a field), but it's rather fruitless to speculate about it without seeing the actual code that causes the issue.
Now this is confusing to read: hasPrefix &amp;&amp; !containsPrefix
Travel expenses won't be an issue since I'd like to visit either country regardless if there are events or not
Thank you, that's very clear.
Actual difference between struct and a class in C# lies in way the memory is allocated for them. Therefore number and frequency of allocations, actual size of the object and how much you pass it around in your code determines performance of struct vs class in a program. I suggest reading this: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct
Here's a fun one-line linq solution to fizzbuzz without checking divisibility. Enumerable.Repeat(new[] {"","","Fizz"}, 34).SelectMany(x =&gt; x) .Zip(Enumerable.Repeat(new[] {"","","","","Buzz"}, 20).SelectMany(x =&gt; x), (a,b) =&gt; a + b) .Zip(Enumerable.Range(1, 100), (a,b) =&gt; a == "" ? b.ToString() : a) .ToList().ForEach(Console.WriteLine);
Use the sizeof operator to get the size of a given unmanaged type: [https://docs.microsoft.com/en\-us/dotnet/csharp/language\-reference/keywords/sizeof](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sizeof)
try Console.Write(taskA.Result);
The "16 bytes" are often quoted, but they're just a very rough and largely arbitrary guideline. It depends on where and how the struct is used, mainly how often it is copied around. If you are really trying to optimize the performance of a piece of code, you should benchmark your own code instead of taking the 16 bytes as gospel. If you're not working on performance critical code, don't worry about this at all and just use what works best for you from a code quality and maintainability perspective.
If you can't keep your struct under 16 bytes then there's no advantage to using a struct at-all. struct's are great because they're references types and are stored on the stack. This makes them blazing fast to operate on because there are no heap lookups. If you're planning on putting any references or more than 16bytes of data in a struct, you may as well use a class, because the performance will be identical
I'm convinced it's a bug in the IDE. I was printing to console directly from a Vector3 array and it was printing floats, which should be impossible.
this.OnShow += (s, e) =&gt; { // bad joke sorry. }
I'm honestly shocked at how many mainframe dev positions I see and even more so about how picky they are. I'm sure people who actually qualify for these roles are rapidly retiring or dying 
This doesn't follow at all. 
'Task' does not contain a definition for 'Result' and no extension method 'Result' accepting a first argument of type 'Task' could be found. Any idea what it is i'm missing? heh
NLog and Entity Framework
It would be stupid to declare a 4x4 float matrix (64 bytes) as a class purely based on the 16 byte rule. 
:)
Dapper
Gives no errors, but still returns "System.Threading.Tasks.Task`1[System.String]". Not sure if its supposed to, and if it is, how to get the repo names from it.
Only if you intend on both creating and consuming that within the same scope. If you need to pass it somewhere else then it will likely get boxed and you lose any benefits. It would be wrong to assume that your well designed struct will never be used by a future developer in a more intensive scenario. There's a well informed discussion here: https://stackoverflow.com/q/2407691
AutoMapper is a great one. Autofac for di / ioc. NLog. Moq. Bogus is a great data generator. Effort and NMemory are great for unit testing databases I use it with EF, it take a lot of the hassle out of testing DbContexts. 
Console.Write(GetAsync(giturl).Result); ? Maybe you should remove the async Task and just use reader.ReadToEnd() 
Easy - my own :P
It turned out I had to explictly define my columns. I thought DataGridView could do that for me. Oh, well. That's probably not a bad thing. 
Copy overhead of larger structs is a concern, but can often be avoided by passing by reference. Structs only get boxed when they are cast to a base class or interface. 
Here's an expanded version of the idea above so it's more clear what's happening. void Main() { foreach(var line in FizzBuzzN(100)) { Console.WriteLine(line); } } public IEnumerable&lt;string&gt; FizzBuzzN(int n) { var fizzes = Cycle(new[] { "", "", "fizz" }); var buzzes = Cycle(new[] { "", "", "", "", "buzz" }); var numbers = Enumerable.Range(1, n); var words = fizzes.Zip(buzzes, (a,b) =&gt; a + b); var result = numbers.Zip(words, (num, word) =&gt; word == "" ? num.ToString() : word); return result; } public IEnumerable&lt;T&gt; Cycle&lt;T&gt;(IEnumerable&lt;T&gt; source) { while (true) { foreach (var item in source) { yield return item; } } } 
There is no reason to use async here. But change it to var or Task&lt;string&gt; and Console.Write(taskA.Result).
No its not possible. Something was wrong with your code. We would need to see your code to confirm. But I am 99.9% sure it wasn't the ide.
That's...somewhat unfortunate. Any guess why interfaces in particular were singled out for this treatment? The interface is kind of the primary thing to me (LSP, etc.). It's not a big deal to forgo certain integer types in your interfaces (or just entirely, really) but it feels kind of strange that keeping the interfaces CLS-compliant forces you to cater to the lowest common denominator and *only* the lowest common denominator. Admittedly, I don't fully grok how interfaces are implemented at the CLR level ([something something virtual stub dispatching...](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md)) but I can't see any obvious technical reason why interfaces are strictly go/no-go for compliance.
Removed: Rule 4.
It seems like you are adding unnecessary complication just to avoid doing checks. Is there a specific reason you don't want to do the checks?
I believe you can also do: Enumerable.Range(1, 100) .Select(x =&gt; x % 5 == 0 &amp;&amp; x % 3 == 0 ? "FizzBuzz" : x % 5 == 0 ? "Buzz" : x % 3 == 0 ? "Fizz" : $"{x}") .FirstOrDefault(x =&gt; { Console.WriteLine(x); return false; }); 
As I understand this code it looks like it isn't counting the dice side instead it's adding up the numbers of both dices and then showing how many times a sum was diced (like shown below) 6 and 1: 7 2 and 4: 6 1 and 5: 6 Output: 1x 7 and 2x 6 Is that what you wanted? Or do you want to output the following? Dice 1: 1 Dice 2: 6 Dice 3: 1 Dice 4: 2 Dice 5: 1 ..... Dice n: x Output: 3x 1, 1x 2, 1x 6
You are completely right. Nested ifs like that are awful you should return as early as possible. And again you should return a list of all validation errors otherwise you will need to fix them one at a time which is super irritating. 
Hard to pick just one!!! FluentAssertions, petapoco, xammvm
Use reference types when you want reference semantics. Use structs when you want to avoid memory overhead for your objects, avoid heap allocations, avoid pointer chasing, and don’t mind (or can avoid, or prefer) your objects to be copied when read, and don’t mind (or can avoid) boxing.
Jason.NET
&gt; x % 5 == 0 &amp;&amp; x % 3 == 0 ? "FizzBuzz" I'd change this to x % 15 == 0 But otherwise, I love the FirstOrDefault hack! My version if this was: Console.WriteLine(string.Join("\r\n", Enumerable.Range(1, 100) .Select(x =&gt; x % 15 == 0 ? "FizzBuzz" : x % 5 == 0 ? "Buzz" : x % 3 == 0 ? "Fizz" : x.ToString())));
[Optional](https://www.nuget.org/packages/Optional/) This with C# 8's non-nullable references will be very nice
Maybe if you sacrifice more data the climate gods will stop sending hurricanes. ***** ^Hi! ^This ^comment ^was ^made ^by ^a ^bot ^[[info]](https://www.reddit.com/r/WutbotPosts/).
Change Task in your variable declaration so var taskA = ... the returned result is a Task&lt;string&gt; but you are casting it to a task, that is why it doesn't have a Result property. Your not running it async though, unless you await an async method it just runs normally. No if you used normal calls it would block until it's finished. I don't think you quite understand async await. It doesn't work the way you think it does. It likely worth having a read up on it.
Yeah I thought that was a cool hack. I actually had no idea what this FizzBang thing was so I googled it and decided to give it a try, and after looking through the thread realized what I wrote was pretty close to /u/PhonicUK lol. I like the `x % 15 == 0`, thanks!
Neat! Learned 4 new things today.
Gonna be honest, I didn't even know WithDegreeOfParallelism() existed, and I consider myself pretty good with C#. Always nice to learn something new! That's a pretty clever hack to get around not having .ForEach() :)
Yes, you are right, which is what I suggested in my second pseudo-code
Aight, that worked. If you don't mind me asking 2 more questions before i go read up on it; Is the async function wrong/would the use be right if done like "await GetAsync(giturl)...." inside another function? and if i were to do something with the list of repos, would i just parse it since it's returned as a json from github or is it done some other way in c#?
Yuck :(
Kind of. When you await something control returns to the caller function until the async operation finishes. Look up Newtonsoft.JSON to parse json to a class.
Just one package? Are you people crazy? :) Here are just a few of my favorites: Serilog'n'friends, Newtonsoft.JSON, Swashbuckle, Stackexchange.Redis, AWS wrappers, Polly. 
alright. Thank you
CacheManager
Automapper saved my ass on several occasions. 
No worries. Hope you get it working.
You won't be running wasm; you'll be running interpreted il by wasm. OTOH, calling functions in the runtime (e.g. builtin sorts) should be AoT'd to wasm rather than interpreted il
Yeah man love it.
Form1 needs to store a reference to Form2. The easiest way would be a field or property. Then Form2 exposes a public method. You can then simple call it in Form1.
And I'm really looking forward to it. I'm extremely grateful for the work the mono team is doing! But currently it's just a bit hard to get solid information where the mono\-wasm project is headed. The last update about static compilation was from January and as far as I can tell there is no publicly accessible development branch available. I would just like to get a bit more communication and updates from the mono team. Running C# in the Browser is just a very exciting topic and no one can wait to get their hands on it as soon as possible. But because of this, it would be appreciated to get updates from time to time on what's the current status of the development process.
I quite like my functional/F# version: let fizzbuzz n = match n % 3 = 0, n % 5 = 0 with | true, false -&gt; "Fizz" | false, true -&gt; "Buzz" | true, true -&gt; "FizzBuzz" | false, false -&gt; sprintf "%d" n let fizzbuzzSequence x y = [x..y] |&gt; Seq.map fizzbuzz fizzbuzzSequence 1 100 |&gt; Seq.iter (printfn "%s")
They simply enforce best practises. If you run one on your code you likely see lots of places that can be made better. They are also very useful when working in a team to ensure you all stick to the same standards.
Interfaces don't create anything. They are simply contracts that classes must implement.
Also automatically mapping new properties you add with zero work if they match. 
You can make an event handler async void currently. It is the only reason you should use an async void method.
The async void method signature can be used for event handlers currently.
Are you using visual studio? If so I don't believe it would be a bug in the IDE. Vs has a lot of issues, but something like this would affect more than just yourself. Could you share the original code? I'm sure there will be some easy to miss mistake :) 
&gt; Automapper I've had this argument a *lot* of times with coworkers, and I stand by my "never automapper" mantra. Yes, it is nice to map to/from objects with exactly the same properties. However, what about when those two objects start to differ from each other? I know you can handle this within Automapper, but at that point, you're just better off writing your own mapping logic. It takes marginally more time to write the mapping logic, but it's totally future proof.
Func static string GetInfixValue(String prefix, String postfix, String text) { Regex r = new Regex($"^(?&lt;prefix&gt;{prefix})(?&lt;infix&gt;.*)(?&lt;postfix&gt;{postfix})$"); Match match = r.Match(text); if (!match.Success) return String.Empty; return match.Groups["infix"].ToString(); } test static void TestFixes(String prefix, String postfix) { Console.WriteLine($"Using Prefix: {prefix} and Postfix: {postfix}"); List&lt;String&gt; testStrings = new List&lt;String&gt;(){ "PreValuePost", "ValuePost", "Value", "PrePostValue", "ValuePrePost", "PrePost" }; foreach (String s in testStrings) { Console.WriteLine($"{s} =&gt; {GetInfixValue(prefix, postfix, s)}"); } } static void Main() { TestFixes("Pre", "Post"); TestFixes("Pre",String.Empty); TestFixes(String.Empty, "Post"); TestFixes(String.Empty, String.Empty); Console.ReadKey(); } Output Using Prefix: Pre and Postfix: Post PreValuePost =&gt; Value ValuePost =&gt; Value =&gt; PrePostValue =&gt; ValuePrePost =&gt; PrePost =&gt; Using Prefix: Pre and Postfix: PreValuePost =&gt; ValuePost ValuePost =&gt; Value =&gt; PrePostValue =&gt; PostValue ValuePrePost =&gt; PrePost =&gt; Post Using Prefix: and Postfix: Post PreValuePost =&gt; PreValue ValuePost =&gt; Value Value =&gt; PrePostValue =&gt; ValuePrePost =&gt; ValuePre PrePost =&gt; Pre Using Prefix: and Postfix: PreValuePost =&gt; PreValuePost ValuePost =&gt; ValuePost Value =&gt; Value PrePostValue =&gt; PrePostValue ValuePrePost =&gt; ValuePrePost PrePost =&gt; PrePost 
&gt; You shouldn't do much work in your constructors. Several in this thread have made this same statement but none have given a solid argument why. Perhaps you will? 
They seemed redundant. But, in the end, I went with the checks.
For me it's unit testing and di. A constructor should take the interfaces it requires in its constructor and store them in fields and set any properties it needs to. If your doing lots of stuff in your constructor something is wrong with your design.
There is a way to set up a global uncaught exceptions exception handler... generally, I'll put that in... and still try to handle as many exceptions as possible locally, but if there is still an uncaught exception instead of crashing the application it triggers this exception handler which may or may not force the application to shut down depending on the severity of the exception.... Here is a tiny code snippet that is the basis for this functionality... Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException); AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException); Application.ThreadException += Application_ThreadException; 
I only use it for straight mappings, generally through different layers. Like you say once you step past that it becomes redundant quickly. If I have to map some object with 10 or 20 auto properties I'm not doing it by hand. It makes it impossible to miss properties as well. Which is something that can fall through the cracks unless your unit testing is really concrete. 
Doing something complicated to avoid something simple but repetitive often creates bugs.
which is?
This package contains `ReadOnlySpan&lt;T&gt;` and `Span&lt;T&gt;` types which are amazing for working with strings or data chunks.
&gt; something is wrong with your design. What would that be?
[A command line parser named clipr](https://www.nuget.org/packages/clipr/1.6.1). I write a lot of cli tools, so I use it all the time.
The statement above is one I can get behind!
2 excellent suggestions 
If you auto gen them they will be invisible for the purposes of of EF but will exist in the SQL DB. You can get them back in after the fact (I've done it once because I was an idiot) but its a PITA if I remember correctly. Best bet is to include them at the outset. You can declare a property as a foreign key for a virtual relationship with [ForeignKey("PropId")] So in this instance it'd be something like: public class Item { public int Id { get; set; } public int ParentId { get; set; } [ForeignKey("ParentId")] public virtual ParentItem Parent { get; set; } } In this example if you did not include ParentId or the associated attribute EF would auto generate it for you in the database but you wouldnt have access to it in the code.
A bit late, but one more: Enumerable.Range(1, 100).ForEach(n =&gt; Console.WriteLine(new string[] { n.ToString(), "Fizz", "Buzz", "FizzBuzz" }[(n % 3 == 0 ? 1 : 0) + (n % 5 == 0 ? 1 : 0) * 2]));
My parser compiler, Pegasus
I'm doing some early prototyping so I'm not being very strict with my version control so I don't think I have it any more. It'll remain a mystery for history.
Alright so i got it working the way i want more or less, i just have one last question before I leave you alone. To parse the JSON would i only have to add the contenttype to the request, then use what i get from "var taskA = GetAsync(giturl);"? I'm sorry if this is way off.
Thanks for the recommendation, I'll continue on with the course/book 
Thanks for the recommendation, I'll continue on with the course/book Also it's good to know that about XNA, I won't skip it
If you’re “doing too much work” whatever that means, then I would gather the argument is that your classes are doing too much. The point that people are making is that if your Model is calling a service, awaiting a response (I mean why else would you make a very quick operation asynchronous?) and error handling then it’s not really a model anymore. All that logic could live in a factory, then when you call CreateModelAsync or whatever you await your stuff from the service, pass it into your shiny new model and return that. Btw I’m with you in that “convention” doesn’t mean much so I’m glad your asking why we are so scared to do async constructors. But given the examples I’ve seen in this thread this paradigm lends itself well to the factory pattern 
wouldn't this only work if the prefix was right at the beginning and the postfix was right at the end?
that is what I'm going for. The code also needs to be valid if we are only dealing with a prefix (so take everything after the prefix) or only a postfix (so only take whatever is before the postfix). So I need to check if we have a pre/postfix configured (hasprefix) and if it is present in the string(containsPrefix). If we only have a prefix configured, and its not present, the result should be an empty string. If we only have a postfix configured and its not present, the result should be an empty string. If we have both, and both are not present, the result should be an empty string. If we have both and one is present, the other not, the result should be as if the not present value is not configured 
Go on ‘Do not Disturb’ so I can finally write some goddamn code between meetings. Co-workers visit me in person, because they can’t IM me. 
in the code I posted, the string gets chopped at the end of the prefix before its checked for the postfix. Unless you are suggesting there is some more graceful way to manage the postfix being before the prefix.
When would that not be true though?
&gt;when an exception happens the user gets a little error message and can forward it to me for bug fixing &amp; continue with their work Logging is a blessing to have so your teammates won't have to do any work reporting bugs to you. Expanding on what other users said, wrapping API calls and logging on an exception can help report errors easily
It doesn't get boxed, it gets copied. Those are different things. It only gets boxed if you pass it as a reference parameter (like to something expecting an 'object'). Can't you pass a larger readonly struct as an 'in' parameter and avoid most of the value copying penalty as well?
You won't find many job postings that list Winforms - or even WPF or UWP, for that matter. But at least you'll be using C# and gaining experience with it. 
Its not the newest technology but there are a lot of applications still written or being supported in it. I've worked on a 911 call center application that was written in Windows Forms but was skinned so you couldn't quite tell. The same is true for the application I'm currently working on. The legacy version was written in Windows Forms but new development is primarily being done on the web. Its probably not ideal to be learning an outdated technology, but what you're learning with respect to C# and the general .NET Framework will transfer to other UI layers in the .NET world. An anecdote: my first development job during college was writing applications in Visual FoxPro. After staying awhile at a small local company, knowing FoxPro, a mostly dead platform, opened many doors for me. Those companies with FoxPro apps wanted them rewritten in .NET and I was able to leverage that to get paid to learn .NET. Its not going to hurt, and might even help, to be exposed to Windows Forms, but maybe spend your own time working on something a little more modern. 
I'ma write this out right now
Unless its for an interned string with multiple usages, then the average might be less than 4/8 bytes per usage because of the reference sharing, but that is kind of a fringe case.
Ok, follow up question, what kind of ui system should I be learning with c#?
Hmm no i haven't. I've posted on various forums to ask questions but I've never tried to create a bug report or anything. I'll keep that in mind.
WPF probably. It uses XAML (looks like XML) to layout the forms. It's used in WPF, UWP and Xamarin Forms (probably some others, but thats the ones i know). Desktop applications are less common these days since most stuff is moving to the web (for better and worse).
Yes. Regardless of what people here might say, there are lots of legacy winforms apps in the wild. Done of us even get paid to maintain them.
Well that's relieving, you wouldn't happen to have an example of a current winform app, would you?
Totally agree. Use it, but don't abuse it. It's for mapping, not for converting from an object into something completely (or even moderately) different. In the past I've been in the "never use automapper" camp AND in the "automapper everywhere" camp. Nowadays I use it when appropriate, although that can be a difficult "rule" for a team to be consistent on
Made a lot of money developing them many years ago, making more money now replacing them :-) 
With WPF I presume?
I did a little Visual FoxPro in one of my early jobs. 25 odd years ago. :)
If you only want to learn in order to get a software industry job, you need to focus on the web and browser technologies. If you want to learn in order to understand how to make desktop Windows software, either Winforms or WPF will satisfy that need.
Oh yeah they're definitely out there. Hell I just wrote a new one the other day and I maintain 4 different ones. Regardless of what people say here, they are out there. Most of what I do is web or CLI based now though. But I still use WinForms for quick stuff because I am more comfortable in it than WPF and it's faster than Web
It's probably still in use in tons of legacy applications. Not much of a benefit there. But I guess for the purpose of learning C# it doesn't really matter all that much.
This should have been added to CLR years ago, or at least something functionally identical.
soo... does it work for you guys? 
I've used ILMerge with little success (kept hitting all kinds of conflicts including one dependency that had its own Newtonsoft source compiled version embedded inside its dll), I wonder how much better this is for .NET Core applications.
WPF is dead, yo.
Less than 4/8 bytes per usage for the portion that goes to the reference. I guess I could have been more clear about what I meant.
UWP is the current way for desktop Windows Apps. I haven’t worked with it much myself, but my understanding is it uses XAML which is shared with WPF. I would be studying ASP.NET Core, though. Everything is moving towards the web. Also the basics of software development that aren’t platform specific: SOLID principles, design patterns (I love Head First Design Patterns book for this), source control with git, etc. 
&gt; Pegasus Wow, very cool!! 
I thought they just hired that guy? Maybe in the cards if so?
Good libraries make complicated things simple. Automapper takes the most simple thing \- property assignment \- and introduces reflection. When you choose Automapper, you decide you don't care that much about static typing. I used it religiously as a junior dev because it saved so many lines of code. In the long run, it cost so much extra time to maintain because I was too lazy to write a few extra lines of mapping code up front. I've worked on two major software projects in my career that started with Automapper. It ended up being ripped out of both for different reasons. I also stand by the "never Automapper" mantra.
Everything is dead these days. But it's probably the most usefull if you wanna do windows desktop applications in C#. Even if it is just for practice.
What was the conflict with newtonsoft merged at source level? A namespace collision? Any decent source level merge should have relocated the merged source to a new namespace ...
Mind you this is merging compiled DLLs pulled from Nuget, not source code.
I would not underestimate the value of knowledge of "legacy" platforms. If you plan to work in the enterprise sector, you will often find that many companies will hire you either to maintain their legacy systems (perhaps written with WinForms) or to replace them altogether. True, you hopefully will not ever have to develop a brand new WinForms app from scratch, but if know how to you can jump into more positions. The more knowledge you have, especially with older technologies, the better suited you are for most business positions. 
From what I’ve experienced it seems that college courses are generally more beyond than the current technology stack.
I mean he literally asked what the equivalent to map/filter is. It's Select and Where, which are Linq methods.
Well, that's true, but that doesn't give you the ability to handle errors at all, right? I haven't had occasion to do this stuff in a while.
You shouldn't need to add a migration if you're just adding a foreign key property. Or if it's generating one it's something stupid like it's generated Parent_Id and you named your property ParentId (which is solvable with attributes)
Yes, definitely, but desktop development in general has been seriously diminished because of Web apps.
Probably angular or vuejs or something
&gt; Also the basics of software development that aren’t platform specific: SOLID principles, design patterns (I love Head First Design Patterns book for this), source control with git, etc. Kind of, but there are things to be aware of when doing desktop vs. Web (too many bad apps out there where, for instance, it's a Web app but there is a shitload of state stored in the session for every user for no good reason, or it's a desktop app and it's full of long-running operations that lock the UI, etc.)
I'm really trying to interpret your comments in a way that make sense, but so far I'm failing. Maybe we're just talking past each other. I suspect you're using the term "reference" to mean "instance" (a heap allocation), and "usage" to mean "reference" (a pointer to a heap allocation). But even then I still can't make sense of the "Less than 4/8 bytes per usage for the portion that goes to the reference" part. The 4/8 bytes refer to the constant size of every individual pointer and are what actually contributes to a struct's size if it contains references. The 4/8 bytes aren't reduced or averaged down by having multiple pointers to the same memory location, having more pointers just means more 4/8 byte sized values. 
Its been a long time since I had to do it so you're probably right.
I guess if you're doing a long string of parameters where each parameter could have a prefix or a suffix?
Very little to be honest - there are so many different ways to do things these days and a lot of places are replacing whole stacks to modernize.
Hell no. Nobody uses that shit except companies who are maintaining garbage ass form applications or companies whose developers are old and have no idea what they are doing. Learn WPF / XAML with MVVM or ASP.NET MVC 5 Razor w Angular . Thank me later
Wtf is this post. Like what is going?
You say it's all web now and WPF is Vista era technology, but web has existed long before Vista.
Thanks for the info - I was more getting at the overall point that if there are methods like that, would it be better for me to learn them first instead of going through for, foreach etc. 
Thanks for the info - I was more getting at the overall point that if there are methods like that, would it be better for me to learn them first instead of going through for, foreach etc. I'll keep Linq in mind, cheers! 
Yeah, I wouldn't want to do date/time logic without NodaTime. AutoMapper, xUnit, NewtonSoft JSON, Moq, FluentMigrator - I could survive without them if I had to. But it's far easier with them. Then there's the handful of internal Nuget packages we have created in our company which are hugely useful (reducing the boilerplate and yak-shaving across our dozens of APIs / projects). Some we've open-sourced, others are too specific to our needs.
idk the downvotes. WPF is definitely more dead than winforms...
You’re junk code was wrong. VS doesn’t do that
No WebForms surely. Everything is moving online these days.
It’s still nice to be able to declare arrays and get contiguous elements, so if it’s small enough that multiple structs can fit in a cache line then there is that advantage.
This is c#. That string is stored as a ref and thus will not vary in size wrt the struct
Late to the party, but what about the case where the prefix or postfix has the same string as a part of the inner text? Like: {test}{thisisatest}{test} My understanding would be that you would get back “thisisa”. As far as coding goes, looks pretty straightforward to me. You might be able to optimize it some more in terms of speed, but I think this format makes it readable and pretty easy to understand.
I am talking about usages, not references. If you have a literal in code multiple times, then it will get interned. There will be less than one reference per usage of the literal because they will share a reference.
That WPF app just sounds like a badly designed app. I’ve developed a few WPF apps with MVVM and they run just fine.
Uh, yes?
[WPF makes the hard trivial and trivial hard](https://www.red-gate.com/simple-talk/blogs/5-reasons-why-i-hate-wpf/) 
Sure, most new applications are written in WPF or UWP, and for good reason, but WinForms has its place too. There's nothing else as well-supported as it is that provides the ability to interop with native lower-level Win32 infrastructure. Hopefully something like [WinApi](https://github.com/prasannavl/WinApi) or something equally good will win out over it, but that'll be a long time coming.
I'm your friend, mate.
What are your recommendations to move from C#/VB.net WinForms? Pretty much everything i have done the last 4 years has been on WinForms and i don't mind (Or the company i work with) to change it, so i might take it as a good learning opportunity.
I'm pretty sure LINQPad still uses WinForms.
You *should* learn WinForms, WPF, *and* UWP. WinForms is still useful when you have to interop with native code written using the Win32 API. WPF is pretty much the standard for .NET desktop UIs, but I can really see UWP gaining steam for lifestyle apps (like social media clients, media players, and common end-user utilities). 
Um, no, WPF isn't dead. It's still in active use, even within Microsoft, and is actively updated.
Also, memory leaks. Memory leaks everywhere.
The weirdest thing is that this post was written in 2011 and it is still relevant in 2018. XAML editing improved a bit but WPF still has the same steep learning curve. 
&gt; I will speculate and say the rule about lean constructors probably has it’s roots in lazy developers using the constructor as a dumping place for “everything else” kind of work Why is being lazy a bad thing? I would say that the whole purpose of a constructor is to conveniently initialize an object to a sane or logical state. I also believe in many cases it’s more logical and understandable to have simple constructors. Would you rather see var point = new Point(int x, int y) or var point = new Point(IGeometryService service); I would argue that the first example is easier to comprehend, and simpler to work with and reason about. I find there’s merit in doing things a way most people can understand. Remember KISS (keep it simple, stupid) ;) &gt; But what if I was to re-frame the problem? What if I were to ask “Should a class - any class - be allowed to have a public (edit: or private) property that is initialized asynchronously You can assign props asynchronously. client.Name = await nameRepository.GetNameAsync() What’s the real need to initialize the property in the constructor asynchronously? What is so unpleasant about await-ing your data THEN initializing the model? &gt; Here is where we run into the “can kicking” problem I have written about in other places in this thread. Are you saying instead of injecting my ViewModel into my View I should inject an async factory? If so, where do I await that async factory? I create an async Initalize method, right? Now, where do I await THAT method? I think you lost me. What do you mean by async initialize? Awaiting a factory? If you’re speaking in generalities then the real answer to all that is “it depends”. If you’re trying to ask a design question for some code your working on then I’d love to see it. Code reviews are fun :) &gt; My complaints are: 1.) there appears to be a better way, and 2.) the obstacle that prevents consensus on how to reach that better way is this zombie-like mindset that making an async call in a constructor will somehow make you evil. I don’t think that it’s evil. I think async constructors are a novel concept, but it seems to me that they have no real use. The “lazy” way works, and works pretty damn well. No need to complicate things here. Also if this was truly a “better solution” i really think we’d have a handful of libraries implementing this, or blogged to death and back and Jon Skeet would have written a Stack Overflow post about it. I think in this case it’s a “if it ain’t broke don’t fix it” scenario for constructors.
I work for a nearly fortune 100 company and currently our entire department is built on a giant windows forms app. Obviously, they're trying to replace it, but the tech exists. Like others have said, in the current state of technology, C# is more often used for backend only such as API's with a web frontend of ASP.Net or Javascript libraries (Angular, React, etc), usually the latter.
3S Software CoDeSys and its rebadged versions by other vendors. It's a major IDE for programmable logic controllers. The Visual Studio of the process control world. Forgive me for sounding like an ad, I just wanted to show the scale. 
Depending on next to no information about the stability of the data connection, I would suggest you just buffered a lot more than 4 bytes, like 4k bytes. Queue up the data and have another thread pull off the back looking through the bytes matching the pattern. If a match is found, read the jpg and push the remaining data back into the queue and restart looking for the next occurrence of the pattern. I would think an in memory byte array (or multiple) are a lot faster than reading the stream sequential.
It really depends. If your class needs some data that has to be retrieved async why not just pass it into the constructor as an argument? Once your doing that work in your constructor you can no longer unit test it's methods because you are also testing the constructor. A constructors job is simply to initialise an object. It should be passed all the information it needs to do this.
Awesome :)
Could you provide a pointer to more info on this? I have been thinking of rewriting a workflow as a standalone app using winforms (very simple dialog, fill in the info over and over and over again). This seems the best approach compared to being part of a crappy, legacy web site. The users need minimal latency. It's basically a data entry flow.
I don't follow. An async void is he same as a void it just allows you to use await. You would handle errors the same as any other method.
I promise I’m not here shilling for Tim Corey, but I’ve been reading his blog recently and thought you find these articles relevant. [Teaching C# vs Teaching Magic](https://iamtimcorey.com/teach-console-applications-instead-drag-drop-winforms/) discusses why he generally teaches console apps vs WinForms (too many things to do before you get to the code) and how WinForms has become the standard for teaching. [Is WinForms Dead?](https://iamtimcorey.com/ask-tim-is-winforms-dead/) discusses why he teaches GUI concepts in WinForms verses WPF / UWP (too many things to do before you get to the code). He goes on to discuss the relevance WinForms still has. I work in the enterprise oil and gas sector and they’re definitely still using WinForms all over the place. 
Yes. The enterprise world and other companies still exists.
Interned strings do not share references, they share *heap memory*. 
&gt;college courses are generally more beyond than the current technology You sure? I think it is pretty up to date when we write legacy 16 bit assembly code in an IDE that only runs in legacy 16 bit environment, so we emulate it inside DOSBox.
Okay i have one more question. I hope I haven't bothered you too much. Let me see if i can explain this well enough; So i made another function that gets the languages used in a certain repo, i need to have this run for every repo a user has, easily enough done trough a for-loop. I then need to add up the total amount of bytes used of each language used in all repos. For example if a user has 2 repos, 1 where they wrote 10 bytes of C# and 10 bytes of JS and another where they wrote 10 bytes of JS, the result would be 10 bytes of C# and 20 bytes of JS. In JS i did something similar by creating an empty Json "result", then iterating trough the result of languages i got. I checked using " if(result.hasOwnProperty(key)){add values to existing ones}else{ add key + value}" Is there something similar to that for c#? and on a sidenote, how do you make an empty JsonObject?
Yes, they are. One of my customers still uses it a lot. However it is officially in maintenance mode, and it will never get anything beyond bug fixes. So much of Windows Forms related work is to add features or bug fixes to already existing applications, don't expect green field projects on it.
One of Microsoft's biggest failings in the dotnet space is in terms of thick client applications. WPF is a very complex framework with a somewhat unclear future, and Universal Windows Applications aren't universal even on windows. Because of this a lot of thick client stuff is still on Winforms. It's ugly as sin, but it's fairly simple to stand up working applications quickly that will run on basically any version of windows you choose to target. That being said, if Microsoft continues down what appears to be their current trajectory and core replaced framework, winforms will absolutely not be ported over.
Currently working on Winforms here too within the Fintech world.
That list of from 2011, I didn't see anything in there that is still an issue, perhaps the vectors, there are ways around that. Conceptually XAML apps are very different from Winforms, so some of its techniques require time to learn. His example of having to copy **the whole template** to create a new standard look instead of just subclassing is one such example. You can absolutely subclass xaml controls and templates are applied in order, so you don't need the whole anything. I switched from winforms to WPF years ago and there was a transitional period where if I wanted a little gui test harness for some code I'd still run up a new Winforms app to add a button and ... call a service or something. It took me a while to comprehend how WPF works. Now I do, it's far more consistent. There are still oddities, behaviours are good but odd I think, but in generally it's a step up from Winforms.
I'm guessing, until they provide some more concrete examples, that they are misusing events in their WPF app. Perhaps not events, but some other coupling between views and viewmodels perhaps which prevents a child view and viewmodel being collected when it's finished with. In general it is not a leaky system.
I think you're conflating having a learning curve and being easy to use. If you're going from Winforms to WPF it's normal to feel a bit frustrated that your old workflow isn't relevant any more. It took me a while to get the hang of when I switched, and it is more complex than Winforms, but it's also capable of doing things that winforms couldn't do without resorting to code behind. That said, if you look at the original WPF samples from microsoft (They're still out there, I don't have the URL to hand right now) you can see that when they were written they used a buttload of code behind in basically every example. They do predate MVVM though. They're interesting and useful. I still find it infinitely easier to work WPF than I do HTML+CSS for example. Although it probably isn't a cogent argument to compare my prefered tech (WPF) with that clusterfck.
The problem with UWP is it only runs on Windows 10 and many enterprises refuse to adopt it. Windows 7 is still very very common in large enterprises. I'd like them to switch to Windows 10 simply because I prefer it. 
WinForms has an awful designer that can be tricky to use. WPF is much easier but has stagnated from no updates. It also doesn't work so well with high numbers of objects. It seems the world has moved onto JavaScript for front ends and RESTful services for backend.
I found the head first books a pain in the neck, but I get why some people like them. It just felt like you could trim out 90pc of the waffle and be left with the actual information. You're point is spot on though. Although patterns are largely the way we resolve them. Of course each of those tech's have specific design patterns that are only documented in books dealing with the technology. 
So this is sort of reiterating a lot of other people's views with a bit extra hopefully. Winforms is still used in enterprises and Microsoft is still developing it. The latest version includes DPI functionality (so you can scale for high DPI displays). However, a lot of this work will be maintaining legacy applications or building on niche hardware. The alternatives are XAML based or web based. XAML is very different to Winforms and there is surprisingly little overlap between them, so people who know winforms have more work to do in transitioning. XAML also comes in several slightly incompatible versions. Silverlight (legacy), WPF, UWP (Windows 10 only (Technically windows 8, but their push is towards Windows 10), Xamarin (for mobile). There's a large push towards web apps instead of desktop apps. It's easier to deploy web apps, and there are lots of people who know how to make them. There's even less crossover here because you're not even using C# for the client side. C# is still used in web development for server side code and ASP.NET Razor client side for example. So do the course, it will be useful, pay close attention to the bit where they talk about thread affinity, because almost all UI's regardless of their tech have a single thread responsible for rendering stuff and learning how to do things in the background without breaking this rule is very useful. After the course, try to pick up some XAML and some web tech stuff. Both will seem entirely alien to you at first and you will have to fight through that. It will be worth it though.
The company I work for still has VB6 apps.
Electron is a good choice these days https://electronjs.org
Sure… if you want to replace an app that uses 5Mb of memory with one that uses 500Mb of memory to do the same damn thing. Electron certainly isn’t the best choice for anyone who has a system that is memory constrained in any way (either low memory in the first place, or lots up and running on a regular basis).
The idea of using winforms is to give an easy UI to code to. Its the backend that's important not the front end. After learning that then we do Xamarin and asp.net core. The same backend code but different UIs. 
Yeah he's part of the core team now. I think he's working on signalr at the moment 
WPF is replacing it, but they are more or less the same AFAIK. It's best to be ahead of time. 
I think you meant to type this into Google Calendar because in this context you're just being a Random Diatribe Generator
And since you are at it take a look at MVVM!
&gt; Everything is moving towards the web. I remember when .Net first came out, I was busy writing some C++ stuff straight out of university. 'Everyone' was saying desktop software is dead with .Net "Everything is moving towards the web" was the call. Yet here I am many years later still doing desktop application development (along with some web based systems). "Everything is going on the web" seems to be a statement that is said often, and it feels that way at a certain time, but most things stay the say, just different :)
Yep. The fact that about 50-75% of all jobs eventually devolve into that, is why I quit doing freelance coding gigs.
Most people just make websites. Even apps are just becoming websites. Desktop apps are dying. That's not to say there aren't cases where some desktop apps are the best choice but even something like Microsoft Word, a traditional desktop application, is now available online and Google Docs is usually all you need. 
WPF itself won't move past Windows, but the XAML language is still alive and well in WPF, UWP and Xamarin Forms. Also WPF is alive and well.
WPF
&gt; A command line parser named clipr Very nice!! 
It's definitely confusing :) You can think of it as ASP.NET and ASP.NET Core. It's probably best to start with ASP.NET Core Web Api. A course like this looks good: https://www.pluralsight.com/courses/asp-dotnet-core-api-building-first WebForms is not used in Core and is not used in standard as much either (at least for new projects) so you probably want to avoid that. A lot of the trend is going towards having a front end like React interact with an API back end. You'll notice in Visual Studio there are project templates to do just that. I know it's hard but try not to get too overwhelmed with all the options. Pick one area to start, learn it well, then expand from there. When you learn one area it will give you context that allows you to see how all the other pieces fit together.
It's HEAVILY used in enterprise. Especially internally.
So you have a list of repos and for each one you have an amount of bytes for each language. And what you want to do is loop all the repos and total the byte values? If so what you could do is create a Dictionary&lt;string, int&gt; where the string key is the language. As you loop through if a language is not in the dictionary you call Dictionary.Add(languageString, bytes) if it is you call Dictionary[languageString] += bytes. In the end you will have a dictionary of language to total bytes.
&gt; That list of from 2011, I didn't see anything in there that is still an issue, perhaps the vectors, there are ways around that. What about the message box thing? That just sounds ridiculous.
What do they have you working on that the clients want desktop apps?
95% of our shop is winforms.
I would start with .NET Core MVC apps. This will give you experience with .Net Core (which is going to be eventually the flagship Microsoft platform) and MVC (which will give you experience with fundamental web development concepts).
Same. However we are now migrating to web apps. 
Alright, would the correct code be something like this? foreach (var item in JSON){ if(dictionary has item){ dictionary[item] += JSON[item]; }else{ dictionary.Add(item, JSON[item]); } } That's more or less what I've used before in js. and i just want to say, thank you so much for all the help, it's much appreciated.
In a world where desktops are sold with 32GB of memory or more these days... 5mb vs 500mb makes NO difference.
In c#, events covers the observer pattern
Yeah exactly. Dictionary has a ContainsKey method to check if it is already in there.
Currently working on making updates to a legacy win forms app that is used in pharmacies' day to day workflow.
Most companies buy the cheapest machines they can. There is no way my office would upgrade all there machines because I wanted to use a new framework for no reason. I'm still supporting a couple xp laptops lol
That Foo is very ugly, I hope you don't have stuff like that in a real code base. IIRC, the implicit operator doesn't require an explicit cast. &gt;The implicit keyword is used to declare an implicit user-defined type conversion operator. Use it to enable implicit conversions between a user-defined type and another type, **if the conversion is guaranteed not to cause a loss of data**. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/implicit https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/operator 
WinForms is still very much used just mainly legacy apps. Most people starting a new application would use WPF or similar. Web is great but if you have 100s of laptops out in the field it's pointless to install a web server on all of them. Core can self host but the lack of an accepted gui framework means any you choose is a gamble. If another becomes the winner and yours is no longer supported your fucked. Kinda like the old js wars were jquery came out on top and anyone who chose a different one was essentially screwed over.
The message box thing is total bs. It's one line to show a message box in XAML: MessageBox.Show(...)
Some things just don't need to be on the web, and will run better outside a browser...
You're not even the person I asked.
I have a WinForms app that mounts a ticker to the bottom of the users screen (mounted right on top of the Windows Taskbar, and is friendly with Maximize and Minimize commands). It's a new ticker program. You can't build that using mobile technology, or web languages, it would be trapped in the browser, or it couldn't access the Windows API I am calling to mount the bar to Windows. There's all sorts of use cases that while few and far between lend themselves to WinForms and native API calls...
Hey if you don't want random people to chime in use private messages.
It would have been nice if you had an actual answer to my question instead of just injecting your opinion and downvoting. Honestly, what the hell.
What do you find so difficult about HTML and CSS?
Tons of them. At my job there's a main application and there are like 50 different tools that all use WinForms and I use/maintain/fix them every day. There were a few that I was given the green light to redesign from scratch and enhance the functionality using WPF, but a lot of them are still using WinForms. The odds of you going to a company and them having all of the latest and greatest technology is very slim.
This is probably the best C# one: https://github.com/Auburns/FastNoise_CSharp This is much faster, in C++, using SIMD instructions. It is not hard to bind to it with pinvoke though. I can help out if you don't know how: https://github.com/Auburns/FastNoiseSIMD
"Everything" is definitely hyperbole on my part, but I see the majority of the work going towards the web and the majority of the jobs there in my area. *Most* \(or is "many" more appropriate?\) desktop apps are heading towards EOL and will be converted to web \- but there are certainly exceptions where desktop is the best way to do things and that probably won't change for awhile. I've made my living on desktop software for 15 years. I don't hold any grudges \- I still love desktop apps, but looking at the job market in my area it would be crazy to not start training up for web jobs. Its where the strongest demand seems to be.
Idk the downvotes -- you are right.
I gave you an extremely obvious answer to your question that literally applies to many different work spaces. If you really need a specific example, fine. At a bank I worked at they needed software to help handle incoming calls and manage and track call times, etc. This application needed to interface with the phone-modem in the computer. It was written in C# with WinForms, and worked wonderfully. A non-desktop app would have been a nightmare to implement to give the same functionality and would have likely required a complete rework of houw their phone system worked. Welcome to Reddit, sometimes answers come from people you didn't ask them for.
Yeah, difference is consumers and enterprises are abandoning windows as a platform in droves and going to web for its cross platform, license-free nature in 2018.
Thanks for the feedback, I wasn't aware of the Windows 10 limitation! I can't see any but the largest enterprises holding out for much longer, though. Windows 7 is EOL in January of 2020. Unless you can pay the rates for them to continue issuing security patches you'll need to move along in the next couple of years.
WASM crack 😎
I'm really excited for the future of XAML MVVM on the web with avalonia, etc.
&gt; Welcome to Reddit, sometimes answers come from people you didn't ask. But does it have to come with snark and a downvote?
I didn't downvote your orig. post, there was also no bitterness in my first reply, I think you read into it a bit much.
That motherfucker.
You should have said that instead. But even then I disagree. Most internal business software is still made in WPF.
Qt
WinForms designer is super simple and fast. While generating readable C# code.
You seem to be novice in IT, so electron. Knowledge you gain will be universal and always more sought by employers, because everything is going to the web.
WPF flopped. Too complex to build simple apps.
Until you try changing a complex form - or try rearranging the hierarchy of controls.
&gt; Webforms is the older versions of dot Net wat
Don't assume anything. 
My work has a few internal tools made with Windows forms. It's decent for putting together something small real quick if you are in a .net shop.
WinForms.
Wrong. Memory prices have gone way up in the last two years. Most people are definitely _not_ loading up with 32GB RAM because of how prohibitively expensive it is. And for those using Mac laptops, 16GB is the max — no way around that for now.
https://github.com/dotnet/csharplang/blob/master/spec/expressions.md#boolean-expressions &gt;A *boolean_expression* `E` is required to be able to produce a value of type `bool`, as follows: &gt;* If `E` is implicitly convertible to `bool` then at runtime that implicit conversion is applied. &gt;* Otherwise, unary operator overload resolution ([Unary operator overload resolution](expressions.md#unary-operator-overload-resolution)) is used to find a unique best implementation of operator `true` on `E`, and that implementation is applied at runtime. &gt;* If no such operator is found, a binding-time error occurs.
Agreed, it's just often cited as a reason. Faster for web devs, and we are common as muck these days.
Ugh. I work on a team that has to maintain a .Net CF 3.5 app (running on WinMo/WinEH 6.5). The last two major Win10 updates have *trashed* the tooling for it. We actually have an old, spare Win7 laptop sitting in the corner that we can remote into and do updates to the barcode scanning app that we maintain. Fortunately, that app is being replaced with an Android one that we're going to roll out in the next year or so.
It is badly design. But the major issues come windows and lack of hardware. Put your app on a 1ghz, 1gb ram system atom processor system.
I'm not that familiar with WebForms so I won't comment on that. You can think of ASP.NET as an earlier version of ASP.NET Core. Core was written (mostly) from ground up to support other platforms like Unix etc. and is therefore (somewhat) platform independent. Want to host your application on Unix? .net core! Want to host it on windows? .net core or .net! So when it comes to what to learn, go with .net core MVC is not that different, it stands for Model-View-Controller and describes a programming paradigm to separate presentation logic (view), business logic (controller) and the underlying data model and connection (model).
Most systems I see - the affordable consumer ones, that is - are still the cheaper ones with memory ceilings in the 8-16Gb range. I ought to know, I do a lot of hardware support in my area. Plus, few consumers ever buy more than the cheapest, base model, often with only 4-6Gb to start. And that doesn’t include all those systems that have been upgraded over the years and who might only have 4Gb max memory, but which work just fine when the client uses intelligently-authored programs that don’t suck up insane amounts of memory for tasks that should be doable in a fraction of the memory with any other kind of programming architecture.
This doesn't answer the question. The question was what do you use instead of WinForms AND WPF/UWP.
I meant its older application framework that started using the foundational .Net Frameworks. &gt; ASP.NET Web Forms is a part of the ASP.NET web application framework and is included with [Visual Studio](https://www.asp.net/downloads). It is one of the four programming models you can use to create ASP.NET web applications, the others are ASP.NET MVC, ASP.NET Web Pages, and ASP.NET Single Page Applications. from [Microsoft.Docs](https://Microsoft.Docs) \- [https://docs.microsoft.com/en\-us/aspnet/web\-forms/what\-is\-web\-forms](https://docs.microsoft.com/en-us/aspnet/web-forms/what-is-web-forms)
I feel like i'm being a giant pain in your ass at the moment, if i am i'm sorry. After trying to do what you mentioned last, i ran into 2 issues. First one being that when trying to do this: foreach(var item in languageJSON){ if(languagesSummed.ContainsKey((string)item)){ languagesSummed[item] += languageJSON[item]; } else{ languagesSummed.Add(item, languageJSON[item]); } I'm getting errors saying "Argument 1: Cannot convert from 'Newtonsoft.Json.Linq.JToken' to 'string' and another one for int (due to the Dictionary&lt;string,int&gt;). After playing around with it, i managed to remove the errors by placing (string)/(int) where it needs to be, but i feel like this isnt the best solution. Is it an okay way to do it, or should i look into fixing it another way? The other issue i run into is that this piece of code: JArray jsonResult = JArray.Parse(json); int jsonLength = jsonResult.Count; for(int i = 0; i &lt; jsonLength; i++){ listOfRepos[i] = jsonResult[i]["name"].ToString(); } Gives an "Index out of range." error on the for-loop bit and i can't see why. (exact same piece of code works fine when using it to test earlier.) Any idea what's wrong?
But that is nearly only office and home user apps. Industry, government, medical, ect won't touch a web app. Web apps cannot interact with devices, without another app running a http server locally on the system for JavaScript to interact with or the browser needs to support plugins. Especially with modern browsers, plugins and java applets are out of the question these days (which is a really good thing)
https://docs.microsoft.com/en-us/dotnet/standard/events/how-to-implement-an-observer This was a useful article for me to understand the IObserver&lt;T&gt; pattern.
Otherwise, WPF is what I do too. I have a soft spot for WinForms, but it takes x10 longer to do any basic UI overhauling plus WPF support for touchscreens is nice.
Also software running in any production facility where IT security is prioritized.
I'm skeptical about how much WPF is used. I've had it and a couple of years developing in C# / WPF on my resume for years and nobody has ever called me, out of the hundreds of calls I get a year, looking for a WPF developer. I agree with the other commenters, it's all going to web apps.
That’s funny. I just joined a team with strict rules set on resharper. Yet the code is pretty shit. So shit they had to hire contractors to fix it. And guess what. I don’t use any “anal”ysers. 
Substring.indexof gives the first instance.
Yeah, I hope it pushes people over the edge, but at the same time I want some of the common bugs fixed. I keep coming across corrupt start menus. Happens on all my machines. It used to be so bad you actually had to reinstall windows to recover it. These days the icons just stop rendering and a reboot fixes it. So speaking of UI development, it makes me a little tetchy that the start menu breaks like that. What does it have to do that Edge doesn't do every day? It doesn't need magic rights or dangerously optimised code. It has some slightly open API points, but very few. It just annoys me. But... I'd still take Windows 10 over 7 any day :)
It's still in early alpha, but [Blazor](https://github.com/aspnet/Blazor) looks like a promising new framework you can make websites based on C# .NET Core 2.0. You can host it on a .NET platform, or VS2017 can compile your project to static files you can use on any host. It is all very early on but really neat and not hard to get started with. 
Not intentionally. I still use code behind for things that it would just be far too much faff to do "elegantly" in XAML only. But on the other hand I will take a bit of time to utilise the XAML features where they're an improvement. My general distrust of code behind is that people start "doing businessy stuff" back there. MVVM isn't magic, and I've seen it misapplied enough times that we might as well go back to just bunging it all in one file, but when it is done right, it's good. tl;dr: Use it sparingly but don't cut your nuts off to avoid it.
Start with dotnet core. Forget about MVC5 and below. That was good years ago. The actual dotnet core still uses MVC pattern but the Http pipeline is sooooo much easier to work with now. The concepts of MVC+Razor are all the same across all versions. The thing that changed are API integrations and things like bundlers. MVC6 started with bower but us now MVC dotnetcore. Just go with the latest. ASP Netcore 2.1 is really great !! 
That seal is super keen to play fetch. ***** ^Hi! ^This ^comment ^was ^made ^by ^a ^bot ^[[info]](https://www.reddit.com/r/WutbotPosts/).
For occasional users like me steep learning curve has the same effect as being difficult to use. Let's say I have not done anything UI-related for a year and want to create quick and simple front-end for my console app. With windows forms I can drag, drop, click and have some quick and dirty working app really quickly. With WPF/UWP there is no chance to do anything quickly. Each field in UI goes through like 3-4 different levels. Binding, view model, dependency injection and XAML. Worst thing - it is all manual, I have to remember each step and IDE does not help. I cannot just drop control in XAML and have property in view model with automatic binding and change notifications. I gave up on simple UI apps because of that and I think that many developer did that too. It is either console apps or HTML for me. 
There are real work applications for this. I wish you never to have to work on them. Good luck 
Too bad that it's not free.
HTML, nothing, but CSS I think is a bit mental. It's probably lack of exposure in part, but it makes me feel confused more than I remember feeling when I started looking at styles and templates in XAML. I'm arguing for people to push through that when going from Winforms to WPF, it's the exact same thing but css didn't have the near clean sheet they had when they started with XAML, so perhaps it is more opaque.
Thanks for the breakdown. I was told elsewhere I should be using memory stream and I've changed the code to (and this is changing like every couple of minutes due to trial and error): // Upload file to encrypted blob // Creates new encrypted container var enryptedContainer = _cloudStorageEncrypted.GetBlobContainer(merchant.ContainerName); var ms = new MemoryStream {Position = 0}; enryptedContainer.UploadStreamToBlob(result.Filename, ms); 
No your fine bro. So putting (type) in front of a statement does an explicit cast. As long as JToken implements those casts this is the correct way to do it. If it doesnt you will get an error when it executes. I imagine all elements are returned as Jtokens and they implement the operators so you can convert to the correct value type.
Winforms fills the following niches: * Developing internal tools/utilities * Introducing programming and C# to beginners * Desktop application for resource-constrained systems (i.e ones that can't run WPF) With that said, many companies still maintain legacy apps that were (likely) written in VB6 that was ported to VB.NET (which I like to call VB++), so learning Winforms is still beneficial. However, I would emphasize learning WPF and MVC over Winforms as far as what is more valuable for a C# programming career (but again, don't ignore Winforms).
Imagine xamarin forms running on a stripped down mono on WebAssembly in any browser.
Yes I use winforms on a daily basis and I work on software used internationally. We want to move over to WPF and MVVM but there are a lot of times we're stuck w/winforms and vb.net vs c# I'm fairly new to this and self taught but I don't think learning windows forms is going to hurt you at all
A few reasons I guess. You can still drag from the palette onto a XAML Window, just open the toolbox window. You can still double click it and start putting code in the event handler for click. No problems. So from that perspective it's on parity. I think it feels more complicated because it's quite opinionated. You only got high DPI functionality in 4.7.2 I think in Winforms, but we've had that for ever pretty much because of the way the rendering engine works. But that means layout is usually relational, i.e. fill this space in this grid. When I used to do Winforms, we did a lot of stuff with controls that you just couldn't do with drag and drop. It was all code. Treeviews that did funky stuff in the nodes, grids with funky cells, I very rarely drag and dropped controls. Then we had to wrap MVP or MVC up into our own framework because there wasn't really a standard way of doing data binding or separation of concerns. XAML sort of encourages that with it's DataContext. But I'm rambling as always, you can just drag and drop controls in WPF. It won't give you any more, so I'm kind of with you, just use what works for you :) I'm really not here to convert anyone, but it is a transition I made so I know the sorts of things that gave me pause for thought.
If you haven't done much work with C# in the past, you might want to read the Yellow Book (link in the sidebar). If it's a position that mentions ASP.NET then you might wanna look at the book called "Pro ASP.NET MVC 5" to get a feel for how the framework works. There are free lectures on the basics of .NET (not just C#, but the framework as a whole, too) coming straight from Microsoft as well. If you have enough time, look at an ORM (Entity Framework comes to mind) and learn the basics of creating databases and doing CRUD operations with the ORM. Look at how to do unit testing - using Microsoft's own tools or NUnit. Look at what mocking is, and possibly learn the basics of, say, NSubstitute. Not exactly C#, but definitely know the fundamentals of http requests, what parts they have, what the difference between SOAP and REST is, etc. etc. Try to make an API with ASP.NET WebAPI. Try to use SOAP and REST services with your app. Learn the basics of threading in C# if you have time after all that. Whew... I don't know what else you could do in a month. Honestly, if you don't have too much experience with C#, I feel like the stuff I mentioned should give you a good basic understanding of how stuff works.
Just want to build web application in a good statically typed language.
Well wait till C# comes out with all its functional work programming techniques. 🔥😂😜 People seem to think resharper fixes it all those problems you said. It annoys me to bits. Code reviews before merging into master or RC by a competent person/people. That’s how you stop crap 💩 code. Problem is when the gate keepers are rubbish and think resharper / style cop fixes it all. That’s all I’m saying. End of day it’s code complexity and convolution that bricks systems 
Code wise it's a piece of piss, someone else replied with it. The difficulty he's talking about is making message boxes appear in a truely MVVM manner. That requires a bit more work and it's handled badly in every. single. damn. tutorial I've seen on the subject. I should get off my ass and write one. In MVVM you have purists and sensible people. I'm one of the sensible people (natch). So I treat message boxes the same way I treat everything. A viewmodel requests an interaction via the application messenger and passes its private messenger along with the message. There's an application wide messenger, sometimes a few specialised messengers, but it's rarely needed, and then when I create a viewmodel, in some circumstances it gets it's own messenger for coordination between itself and its peripheral UI elements. A service picks up the message and makes a decision to spin up a modal dialog which it hands the private messenger of the viewmodel that wanted it. It can then send a UI agnostic message back to the view model when the OK or Cancel or Send or Simba! button are clicked. The messages both causing the message box and returning from the message box contain a known payload so they can populate themselves. That sounds like a lot of work, it's just infrastructure and I wouldn't recommend it unless you're doing a project or projects that need to scale. But it doesn't need to be huge. Any case where several UI elements or windows have to know when an event occurs benefit from this sort of model. 
WPF wasn't designed for "simple". It was designed to encourage the use of practices that make large, complex application code bases more maintainable.
I'll dig into it, if I can use XAML with it's nice UI features and still use old school API calls like [this](https://msdn.microsoft.com/en-us/library/windows/desktop/cc144177\(v=vs.85\).aspx) to create an APPBAR for Windows that would be ideal. 
 List&lt;Func&lt;valueType, bool&gt;&gt; validators; var result = valuesList.Where(value =&gt; validators.Any(validator =&gt; !validator(value))).ToList(); Depending on the complexity of your validations you may be able to get away with just delegates, otherwise a set of classes with an abstraction over them will be a better option.
https://i.redd.it/1fl5yi6bbpzz.png 
It doesn't have to. You can still drag and drop buttons and textboxes, give them names from the properties window, double click a button to get into an autogenerated event handler and set Pooples.Text="Hazzza!". But I totally know where you're coming from. I just said in another reply that I don't want to push people to the new and wonderful when the old fills a need. My first UI role wasn't actually a UI role it was a tactical developer role. This meant we were parachuted in to fix issues across departments (I personally wish they'd just let me use the lift, but that's business.) So I did a lost of VSTO and Winforms stuff. I loved it. WPF was coming around then and it was a PITA, but these days I just can't go back to Winforms. 
You mention you're thinking observer pattern, but this is more set up for using the [Chain of Responsibility](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern) pattern. In short, you set up a chain of your validation objects, where each one calls the next if it succeeds, and exits (and logs result if needed) it fails.
Microsoft should buy them and port it to webassembly
Alright, much appreciated :)
Seems elegant
Two ways if you cannot modify the validation methods to return a boolean: 1: var validators = new Action&lt;YourValuesClass&gt;[] {ValidationA, ValidationB}; foreach (var value in values) { validators.Any(validate =&gt; { validate(value); return !value.IsValid; }); } 2 (not really the way I'd do it): // declare wherever static class YourValuesClassExtension { public static bool Validate(this YourValuesClass value, Action&lt;YourValuesClass&gt; validation) { validation(value); return value.IsValid; } } foreach (var value in values) { if (value.Validate(ValidationA) &amp;&amp; value.Validate(ValidationB)) { // is valid } }
Looks more like don't-repeat-yourself than optimization to me.
How do you optimize code if it doesn't already work?
I see that you're using a side effect. Make ValidationA and ValidationB return a boolean indicating if the value is valid in addition to the side effect. Then you can say: if (!ValidationA(value) || !ValidationB(value)) { invalidslist.Add(value); continue; } booleans stop evaluating when they hit an "or" if the value is already true, so if !ValidationA returns true it will never run !ValidationB. This way you have exactly one "if" statement. 
Because you get access to automatic bindings, separation of concern, separation of design and code, automatic layouting that scales to window sizes without additional work, and a modern framework. But then, it's all compiled to CIL anyway, so why don't you just write in that directly?
No worries :)
Just to add to this, || is often called short-circuit OR. In a lot of languages you can use | for a non-lazy evaluation. People usually use short-circuit OR and AND unless they have a specific reason not to.
Can't help with that, but always use some kind of version control like GitHub or Bitbucket. If you don't know what is, basically you can make saves of your code, and if something goes bad like this time you can always go back to a previous version of your program. There is plenty of tutorials how git work.
"short circuiting if statements"
First bit of advice is to use bigger buffers. And use the same one over and over to avoid an obscure garbage collection issue. If you have any control over the sending side, see if the jpg data can be put in a message wrapper that contains the filename, *and* the size of the data. So you aren't scanning for the jpg signature any more - you'll know to read the next 123,456 bytes (because you were told that) and that'll be the photo data. 
okay one tiny other thing.. I've mistaken the return when calling the API for languages, it returns a JObject rather than a JArray, so i ended up getting a few errors, after parsing the return to a JObject my "foreach" look kinda breaks. It's giving me these errors when using the old code of: foreach(var item in languageJSON){ if(languagesSummed.ContainsKey((string)item)){ languagesSummed[(string)item] += languageJSON.item; } else{ languagesSummed.Add((string)item, languageJSON.item); } "Cannot convert type 'system.collections.generic.keyvaluepair&lt;string, newtonsoft.json.linq.JToken&gt;' to 'string'" and "'JObject' does not contain a definition for 'item' and no extension method 'item' accepting a first argument of type 'JObject' could be found" I know the foreach part runs as it should, but i'm kinda stuck on what the rest should be, would you mind helping me out one final time? 
But this only reports the first error. Is that what OP wants? I'm currently working on a validation project in which I run a series of tests, and show a report of all tests that failed, not just the first one.
Web Applications. Using C# with .Net Mainly where I am anyway. Then aspx or razor with an MVC design pattern for the actual page with Jquery. Haven't been at a company yet that wants to make the leap to angular but its also another good choice to learn for application development.
Yeah, I think it takes only a casual perusal of job postings to realize that demand for native applications is pretty low. The couple years of experience I do have writing native wpf apps only exists because I was working in a goofball pseudo IT environment that didn't have the resources or political capital to have their own server, so we had to tie together multiple APIs into a few frankenstein apps. I sometimes wonder if the move to browser based is good, some of them seem awfully clunky.
I've been writing an experimental library for using a single method in an API controller for serving both HTTP consumers and native .NET callers without compromising the methods \(throwing special exceptions, modifying the HttpContext etc\) using wrapper methods \(methods for handling the request/response that return ObjectResult/HttpResponseMessage etc that call into other methods\) or giving up any control over the response \(losing the ability to specify response headers/content serialization, which you can't do with type\-safe returns from attribute\-routed methods normally\). It also has some sugar on top like translating decorated model properties, setting custom response messages for exceptions \(also translatable\), or determining which parts of the exception object to serialize. It all works via attributes and the processing is done via ActionFilters and OWIN middlewares. EG: \&gt; \[HttpGet, Route\("my/route"\)\] \&gt; \[HttpStatus\(HttpStatusCode.Unauthorized\)\] \&gt; \[HttpContentType\("application/json; charset=UTF\-8"\)\] \&gt; \[HttpBadRequest\("{@:SOME\_TRANSLATION\_KEY}", typeof\(ArgumentException\), typeof\(ArgumentOutOfRangeException\)\)\] \&gt; \[HttpUnauthorized\("{$.Message}", typeof\(NullReferenceException\)\)\] \&gt; \[HttpNotFound\("{@:USER\_NOT\_FOUND\_TRANSLATION\_KEY}"\), typeof\(null\) \] \&gt; public User RetrieveUser\(int userID\) \&gt; { \&gt; // Your normal code here. \&gt; }
The move to any platform can be successful if we embrace that platforms paradigms and you work with its benefits and limitation rather than trying to fight it and beat it back into the shapes we were familiar with. I see so many web applications trying to look like desktop (fixed size, no taking advantage of fluent layout, small number pagination over vertical scroll, post-backs on everything - oh gods the postbacks) and on top of that looking like a desktop application built by someone who hated their users to begin with (we'll solve this horrible UI with user training). Same with mobile apps built by wrapping a web app with no consideration to native/platform guidelines
Please to be using if statement brackets.... After digging through this old codebase I'm expected to fix up, non-bracketed if statements have become a special hatred of mine...
It makes sense, I wasn't thinking on this approach, I'll try it.
I understand what you say but yes, I want just the first failing one.
He's only ever adding the value to the list, it would simply appear multiple times without disguising which validation failed anyway.
We've somehow changed from micro optimization is 'evil' to any optimization is 'evil' to now basic refactoring is 'evil' No, trying to figure out the idiomatic and semantically clean looking way to do what you want is not evil, figuring out a nicer way to do an if statement is hardly an 'evil' optimization ...
 var invalids = values.Where(v =&gt; {return validators.Any(f =&gt; { f(v); return !v.IsValid; }); } ).ToList();
Neither of those are good options. For your first example, something has to make the ViewModel right? public class MyViewModel { public Client MyClient {get;} public IEnumerable&lt;AccountManger&gt; AccountMangers {get;} public MyViewModel(Client client, IEnumerable&lt;AccountManager&gt; accountManager) { // no real reason to call any services here MyClient = client; AccountManagers = accountManagers; } } // The piece you seem to be missing or disliking public class AccountController : Controller { private readonly IAccountManagerRepo accountManagerRepo; private readonly INameRepository nameRepository; // You probably have Dependency Injection here, so you don't new / async ANYTHING public AccountController(IAccountManagerRepo accountManagerRepo, INameRepository nameRepository) { this.accountManagerRepo = accountManagerRepo; this.nameRepository = nameRepository; } // Its been awhile since i've messed with asp.net but you get the idea public async Task&lt;IActionResult&gt; Index() { // prepare your async stuff outside the models for simplicity and better testability string name = await nameRepository.GetNameAsync(); IEnumerable&lt;AccountManagers&gt; accountManagers = await accountManagerRepo.GetAccountManagers(); // NOW you pass your awaited stuff into the view model. var myViewModel = new MyViewModel(new Client { Name = name }, accountManagers); return new View(myViewModel); } } No need for a factory, but if you did you'd just replace the Index() with CreateAsync(). Same concept. Do the heavy lifting outside the constructor and just pass it to the ViewModels
OP said he's removing repetitive 'if's, so you interpreted this question as factoring code and changing design, while I interpreted it as optimizing code. Two different interpretations!
&gt; I was printing to console directly from a Vector3 array and it was printing floats, which should be impossible. If you are doing Debug.Log(Vector3), the output will automatically be a comma delimited string of the float values (i.e. it automatically converts the vector3 to (0, 0, 0)). So it might look like you are printing floats even if you are printing the Vector3
If you're serious about building something like this, I'd suggest looking into something like [Akka.NET](http://getakka.net/articles/intro/what-is-akka.html), the [LMAX Disruptor pattern](https://github.com/LMAX-Exchange/disruptor/wiki/Introduction), or perhaps [Orleans](http://dotnet.github.io/orleans/). I've yet to see/hear about Orleans being used in the trading/finance world, but Akka and the Disruptor pattern are both used in those areas. In fact the Disruptor pattern was created specifically for high-volume trading. Having done some Akka.NET production work, I can say that while I think you could build such a system it would not quite look like the architecture you're suggesting, but much of that is the way that Actors are modeled. The Disruptor pattern will probably be closer to what you're suggesting. [Here's a link to a .NET Disruptor implementation, btw.](https://github.com/disruptor-net/Disruptor-net) One of the nice things is it is made specifically around multicasting events (versus a normal Producer/Consumer).
Debug.Log(myVector3) was printing -2.7 rather than (-2.7, 0, 3) ...for example.
You should use a `Validation` type similar to [this one](https://louthy.github.io/language-ext/LanguageExt.Core/LanguageExt/Validation_FAIL_SUCCESS.htm) Then you can chain your validation functions and obtain either the final result or the list of failures.
I actually was not talking about asp.net but it makes no difference at all we are just changing the names. Using your class "AccountController" we still need an instantiated object as a viewmodel: Public class View { public View(AccountController factory) { // cant await here.... where do we do it? this.DataContext = ??? } }
I'm partial to NLog. Some people like Serilog because of the idea of 'structured logging'. I don't necessarily like that however, because it smells like I'm getting tied to a logger. Besides, you can do the same with JSON, and it won't be tied to your logging library that way. Most loggers can be configured to write out JSON, making it easy to be parsed by a number of tools/tooling. You can do this by writing a Wrapper to convert an object into JSON before calling the actual 'log' method. This should ideally follow some common sense rules, i.e. check that loglevel will actually be logged before serializing, use a seraializer that won't make your logging be a perf drain (JIL or UTF8Json come to mind). But then, you can structure your logging nicely via: myLogger.Debug(new {Event="Item Ordered", SKU="ItemSku"}); 
no point unless you are doing massive I/O work or something like renaming 1000s of files or something or processing lots of images. then you need to check your for loops and code structure for better optimizations 
With implicit keyword in operator definition, no cast: var f= new Foo(); bool val = f; Without implicit, requires cast: var f= new Foo(); bool val = (bool)f; I'm inclined to think that one should not have both 
I'm a total beginner, that's how.
Thanks! :)
It's dangling so like, exceptions won't bubble up in your UI? Stop me if I'm all wet but I'm pretty sure this is true
Weird. It would be helpful if we could see your code, but it really shouldn't be possible for a variable to change type. Try making a pastebin and I can take a look later
I can't find anything from Google I'll have to test this sometime.
this, use version control. If you go with git (which is quite likely), read [Scott Schacon's Book](https://git-scm.com/book/en/v2). First two chapters are enough to start using it. If you keep using it, you'll be eager to read the remaing chapters eventually.
Let's try a different approach. Copy the returned json string. In visual studio and create a new class and remove the class. Go to edit, paste special, paste json as class. This should generate a number of classes. Then after you get your json string write var result = JsonConvert.DeserializeObject&lt;RootObject&gt;(json string) this should give you a single object with all the data in. You can then do your work against this.
I'm afraid I fixed it before the next back up push so it doesn't exist. If I had anticipated the level of scepticism I might encounter when talking about it I would have saved the script but it didn't occur to me to make a post until later. I know it shouldn't be possible, that's why it took me two hours to discover the issue and why I sat there staring at the console saying "....what...?"
This conversation can go on for a very long time until we regress to Application.Load(). In the interest of time I will just show the simplest factory pattern and try to get to the essence of the argument. In the class below Initialize() is the de facto constructor. Because it does not adhere to the syntax of the scholarly definition of a C# constructor, developers are mentally liberated from thinking they are "doing heavy lifting in the constructor". But in actual fact that is exactly what they are doing. And for good reason - there is often a need to construct a class with a property whose value is obtained asynchronously. public class SomeClass { private SomeClass() { // this is functionally useless } public static async Task&lt;SomeClass&gt; Initialize(ISomething something) { SomeClass = someClass = new SomeClass(); someClass.Property = await (...); return someClass; } } // get an instance of SomeClass: SomeClass someClass = await SomeClass.Initalize(...); In a conversation in this thread I was accused of something like "fighting the framework" or some such. But if the above isn't fighting the framework I don't know what is. So lets all hold hands and say together: "Lets Just Call Things Exactly What They Are And Dispense With Trying To Play Word Games With Method Names": public class SomeClass { public async SomeClass() { // yay a real constructor we can actually use! this.Property = await (...); } } // Hey this is easy and gives me a fully initialized object and plays nicely with all the other async methods I write!!: SomeClass someClass = await new SomeClass(...); BTW the factory just adds more layers of work with DI containers like Autofac because you usually have to write a "factory around the factory". The reason is that Autofac only knows how to use a real constructor and cannot inject into a method (property construction is not an option for me). I haven't even made that argument here because I believe the classes I am showing in this post allow the argument to stand on its own.
I'll give that a go, thanks again
Just to clarify, Github and Bitbucket aren’t actually version control. They just offer repo hosting. Git is version control, and you can manage it entirely in a local repository without ever needing to push code to a remote repo on one of the above services. The main reasons for using Github would be a) if you want to collaborate with other people and b) it’s a handy way to backup your code.
This. I teach C# and the most common problem is that students create an event and then delete the function. The problem is that the form will still reference the event. 
&gt; Is this a philosophical question or a practical one? Practical! &gt;stop trying to instantiate things here lol, do it outside LOL it dosn't always work that way. You are welcome to answer the question or post an example app! &gt; This is where dependency injection really shines IMO. Nope this has nothing to do with DI. In fact DI only makes it harder as I explained in my other post. I guess the problem is not obvious until you sit down and try to write a good sized app using Winforms or WPF or UWP. Well I'm out of time on this issue. Thanks for the interesting dialog! 
No worries. It's much easier to work with classes but if the json response is variable it won't work so well.
One is the correct interpretation, the other is from someone who didn't read the OP.
Jumping in here: double click on the error message gets you straight to the .designer.cs file. From there proceed as instructed above.
GitHub is also a convenient way to demonstrate your coding experience for job interviews.
I missed that part, its legacy stuff. 
yeah, should‘ve said that aswell!
Yeah, I suppose what I'm thinking of is horrible UI mostly. I'm out of that game so I'm not familiar with the struggles and paradigms that define a good vs a bad web app. I think the one comment I have there is that it's got to be some fiddly, frustrating work to support an array of browsers. That's why one of the last companies I worked for maintained a version of Explorer from 97 or some such nonsense in 2014 - it was the only browser their ASP web apps still worked in. On the other hand my current employer is risk averse so updates are slightly delayed. As a result I've got a version of chrome that is a couple minor revisions behind and it turns paying my AT&amp;T bill into a fun game of guessing where the link is in the middle of the fragmented mess it renders. Still, it's got to be less challenging than trying to support multiple platforms and sets of hardware, but I always thought that was what the good lord gave us Java for.
Yeah :) it is ... and it shouldn't even exist in C# it's nasty :) 
Exactly so if you had: {something}{abc123}{abc} Your return would be “” because the first index of the postfix “abc” is position 0 after the prefix operation is done. Is this not a problem?
If you have multiple controls using the same event, that might not be a possibility.
I believe this depends on running the build process though. That said, OP, try compiling the code so that you can follow the steps. 
If i needed any of that... sure. But often, I dont.
I too remember the days of thinking "this isn't the latest, newest trend. Why are we even bothering to cover this 'ancient' technology?" Then I got into the real world and I realized that software is not rewritten from the ground up every few years. Winform applications will be around for a loooooonngg time.
Maybe then.
I would argue that you always need a lot of that.
Won't any unhandled exception crash your app?
This applies to optimizing for performance. But in this case it also applies to code readability, where your argument is invalid.
Quick caveat: the short-circuiting behavior described above works for the conditional OR operator, "||", but not when using "|". Shouldn't be an issue since most just default to using "||".
Hey congrats Def speak with your senior devs/team leads they should point you in the right direction on what you need to learn that's more applicable to w/e project you're working on but in general * GIT, Git workflows, branching, etc * SQL, basic knowledge of SQL and relational data * Entity Framework, code first, migrations, LINQ * SOLID principles * setting up and configuring IIS for a website * design patterns, Unit of Work, Repository pattern * dependency injection * bootstrap, basic html and css 
I hear you, and i'm not saying it _didnt_ happen, it just sounds really unlikely. I use unity all the time and i've never seen that bug. It would have been cool to see the code and see how to reproduce it. (or, see if it was just a programming mistake you missed, since that happens too sometimes :)
Slack, Spotify, Signal, Discord, GitKraken are all electron apps. You can interact with hardware, but most desktop applications aren't required to. Notifications and filesystem integration is really all apps need.
What devices are we talking here? I can't imagine many large use cases beyond highly specialised software (POS systems, Industrial Work etc)
Or, if you want to copy and paste a method from somewhere else. Maybe it should be a preferences option, but I like the current behavior. Once you dealt with it once, you’ll know and it’s a non issue.
Thanks!
Integer? What use is an integer? "Great, I have 3 failures from 6 validations."
Web apps as in apps in a web browser. Electron is a UI built using chromium parts. Not the same thing.
500mb as a percentage of 16gb = \~3&amp;#37; Something tells me they'll be fine.
I’m assuming you mean [this](https://msdn.microsoft.com/en-us/library/system.numerics.vector3.aspx) I would need to see your code to see what’s going on. I’ve never heard of a bug like this because it would break most compiled code.
500mb as a percentage of 16gb = ~3% Something tells me they'll be fine. Here's an HP with 8GB for $250 at Amazon: https://www.amazon.com/HP-Probook-6470B-Notebook-Professional/dp/B06X92SJF8 So, 6% of the memory. Again, I think the'll be fine.
500mb as a percentage of 16gb = ~3% Something tells me they'll be fine. Here's an HP with 8GB for $250 at Amazon: https://www.amazon.com/HP-Probook-6470B-Notebook-Professional/dp/B06X92SJF8 So, 6% of the memory. Again, I think the'll be fine.
500mb as a percentage of 16gb = \~3&amp;#37; Something tells me they'll be fine. Here's an HP with 8GB for $250 at Amazon: [https://www.amazon.com/HP\-Probook\-6470B\-Notebook\-Professional/dp/B06X92SJF8](https://www.amazon.com/HP-Probook-6470B-Notebook-Professional/dp/B06X92SJF8) So, 6&amp;#37; of the memory. Again, I think the'll be fine.
&gt; I’m assuming you mean this Yes, it's used a lot in Unity for tracking positions, directions, and rotations.
You might consider using the fluentvalidations library on nuget.
[CLR via C#](https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454) for a better understanding of the runtime you're working with. [C# in Depth](https://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X/) for a deep dive into the language and it's features and their details of implementation. I'd consider those two to be the primary intermediate texts.
Also, C# in a Nutshell is good too. The first few chapters are like an entire C# beginner book, but then the book deep dives into the real features of C# (or .NET framework for that matter) Like LINQ, async/await, etc
&gt; ...and that XAML is just using the standard Windows API to render WinForms for the user anyway. If I'm reading that right, you're verifiably wrong. Yeah, the UI is drawn with standard APIs, but the similarities basically end there. If you ever have to interact with third party apps, the approach between WinForms (where I can use old Win32 APIs easily) and WPF is significant for this. Also why WindowsFormsHost can be a total PITA if you need to do anything weird (ScrollViewer is weird enough). They are fundamentally different technologies.
&gt;Here's an HP with 8GB for $250 at Amazon: https://www.amazon.com/HP-Probook-6470B-Notebook-Professional/dp/B06X92SJF8 &gt; &gt;So, 6% of the memory. Again, I think the'll be fine. Plunk 5-6 Electron apps on your system, and you will find it a challenge to run more than a few full-sized programs properly without running into memory/paging issues. I already have three Electron-type apps on my work computer (Gitter, Slack, Discord), and Gitter+Slack *alone* is a 1Gb hit to my system. And since I run databases, Visual Studio, dev environments and other shit from my system, even the 12Gb it comes with isn’t enough sometimes -- I have to shut down other programs just to get my work done without getting held back by the paging file. If the Electron apps I do use were as much of “heavy hitters” as my daily bread-and-butter tools (MSSQL, VS2017, Waterfox, etc.) I could forgive them. But sucking down 1Gb for doing absolutely nothing? Yeah, kill those fuckers, they aren’t worth the trouble. And with nearly half the computers out there in active use being more than three years old (I see many 5-8 year old computers still in play, with 8Gb and 4Gb memory ceilings), memory usage is still a very important aspect of putting out a quality program. You simply cannot expect everyone to upgrade just because *your program* needs memory that a better-programmed product could easily do without.
I had to do an APPBAR with WPF for work and ended up creating a class that I could bind to in XAML (I would usually create a subclass of Window specifically to have it available and use that) and work with it in an MVVM manner still. I can't share that code, because work, but it's totally possible. It's not a one-to-one thing, but you can hook into the Window's WndProc event and call the APPBAR APIs etc. moreorless just like you would in WinForms.
thank you i could not get the formatting to work 
I don't mean to be a naysayer but this is absolutely awful advice. It is really wrong and will probably lead to errors being swallowed somewhere. At a minimum its a lot of work that can be done much easier. The real question is "Is it ever acceptable to put the bulk of a program OUTSIDE a try/catch block?" The answer is mostly "NO!". The correct approach is to wrap the program in a single try block as follows: public class Program { public static void Main(string[] args) { try { new Program().Run(); } catch(Exception ex) { // This is the global exception handler. Use it! // log errors here } } public void Run() { // Your program } } In a perfect world there will be only one try block as shown above. However in practice you often need to catch errors. The rule is ONLY CATCH ERRORS YOU ACTUALLY HANDLE. Logging an error is NOT handling it. All other errors should flow up to the global exception handler as shown above. In my world the following is a VERY BAD THING to do. When I see this kind of code I shudder because this is how errors propagte throughout a program and cause data corrpution: public void MyMethod() { try { DoSomething(); } catch(exception ex) { // Nothing. No handler. No one sees it. Ever. // Logging an error is NOT handling it. Logging belongs in the global exception handler. // If you MUST swallow an error as shown here you need to clearly document your intent and justify why you are doing it. } } Alot of guys say "Well, I need lots of diagnostic info in my error msg." Maybe you do. You probably dont need as much as you think you do but if you want that warm feeling here is the correct approach: public void MyMethod() { try { DoSomething(); } catch(exception ex) { string diagnostics = "blah blah happend. See inner exception for more info."; throw new exception(diagnostics, ex); // always include the original ex otherwise you lose the stack trace. // let the global ex handler do its job and log the error. } } 
I don't mean to be a naysayer but this is absolutely awful advice. It is really wrong and will probably lead to errors being swallowed somewhere. At a minimum its a lot of work that can be done much easier. The real question is "Is it ever acceptable to put the bulk of a program OUTSIDE a try/catch block?" The answer is mostly "NO!". The correct approach is to wrap the program in a single try block as follows: public class Program { public static void Main(string[] args) { try { new Program().Run(); } catch(Exception ex) { // This is the global exception handler. Use it! // log errors here } } public void Run() { // Your program } } In a perfect world there will be only one try block as shown above. However in practice you often need to catch errors. The rule is ONLY CATCH ERRORS YOU ACTUALLY HANDLE. Logging an error is NOT handling it. All other errors should flow up to the global exception handler as shown above. In my world the following is a VERY BAD THING to do. When I see this kind of code I shudder because this is how errors propagte throughout a program and cause data corrpution: public void MyMethod() { try { DoSomething(); } catch(exception ex) { // Nothing. No handler. No one sees it. Ever. // Logging an error is NOT handling it. Logging belongs in the global exception handler. // If you MUST swallow an error as shown here you need to clearly document your intent and justify why you are doing it. } } Alot of guys say "Well, I need lots of diagnostic info in my error msg." Maybe you do. You probably dont need as much as you think you do but if you want that warm feeling here is the correct approach: public void MyMethod() { try { DoSomething(); } catch(exception ex) { string diagnostics = "blah blah happend. See inner exception for more info."; throw new exception(diagnostics, ex); // always include the original ex otherwise you lose the stack trace. // let the global ex handler do its job and log the error. } } 
Thanks! I'll have to check those out. I didn't know about the mobile prices either. 
Their algorithms are already optimal. If it's available, and it works - why not use it?
Udemy has $10 courses by Mosh Hamedani on Intermediate and Advanced C#. I'd also look at subscription to DevU. I learned C# by watching Bob Tabor. I only knew Perl, PowerShell, and Java before him.
so that is what im trying to figure out. i can explore the moves past the first by creating and cloning the boards i manipulate. but i cant keep the move that is the parent.. thanks you for your info i am very bad at coding. 
I've never spent any time determining how big of a problem it is, but I was turned off from the CLR via C# due to the lack of revisions by the author. The last revision was in 2012. The author didn't update it and said in a blog post at one point that he hadn't updated because the CLR version hadn't been updated. Fast forward to now, and we're years into having CLR 4 (his book covers CLR 2). And as far as I can tell, there's no revision coming.
As far as I can tell most of the information holds up. I wouldn't expect it to apply to the dotnet core run-time, but the concepts are still very useful.
All of our desktop products at my company are on Windows Forms. We still have to support Windows XP, and even if we didn't, I don't think we would move to anything else unless we have to. 
SOLID and Design Patterns for the win!
In the context of what i was discussing it would be the same, or rather not different for my usage.
The New Boston has some decent learning points and lessons. It's good to use resources that can really help you grasp concepts or offer tutorial level content to really get it. However, there's several poor design choices and chances of picking up bad habits from a learners prospective. Some "learn programming" groups have an automatic bot to say as much.
I highly recommend the c# courses on Pluralsight.
Solid list. I have been working with .net and c# for almost a year now. I would suggest reading something like code complete 2. Apress has pretty good books on c# and asp.net.
And here is the official report that shows it is infact not what you think: Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008 R2+.
And a reminder to all who keep thinking this is Win10 only: &gt;Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008 R2+.
Hi, thanks for your help but I'm not sure what I did lastnight but I think I panic'ed and closed visual studio to try and reload it from a save before I messed it all up. Now I can't even get the error to show up, designer mode is showing just a blank form but all my code is still there? I think I'll just recreate it all as my labels were really bad anyway and ill just use the same code with changed labels. Any suggestions on how to avoid this in future? (I know not to close VS now and just use your fix you posted above) but anyway I can save-as under different names or something so if something does go like this, I wont have to start from square one.
I wrote a library called Snapper which does Jest like snapshot testing in C#. [https://github.com/theramis/snapper](https://github.com/theramis/snapper)
&gt;what is an interface if not an abstract type? An abstract type is a root class. All implementations of that abstract type will inherit from that specific type. An interface is a basically a list of method signatures that need to be available for a specific object. The line gets a bit more blurred if/when they implement default implementations for interfaces. &gt;A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant I'd like to know what this means as I am not particularly familiar with this attribute. It sounds like it may be a key piece in why the entire interface needs to be marked compliant or not vs individual members/properties. 
Ah, thanks for reminding.
Except port 22 for ssh is often necessary. Or FTP on 20/21. We're forced to use IE11 for internet usage, so they use a .PAC file as a stand in proxy. More info: https://docs.microsoft.com/en-us/internet-explorer/ie11-deploy-guide/auto-proxy-configuration-settings-for-ie11 The current script they're using messed with a lot of https traffic, so much so that doing a clone on a github, using apt/yum/dnf/npm, and a litany of other tools are rendered useless. Though pretty much all sites using 443 encounter some kind of problem more often than not, a lot of these services are obviously port 80 and still fail. To be honest, I'm unsure if it's the proxy script in place doing it, or one of the many issues with the network. For example: They just began migration of everyone over to a new domain. Users who were able to access these package managers/repo are no longer able. Another issue: Speeds in-house are excellent. On the VPN however, the max speed you can possible get during and sftp session (if it decides to work that day) is about 10 Kb down. As to the last piece: I'm doing work in C, and not using VisualC either, tend to have to use mingw. Often times the lack of administrative rights cause issue during debugging. I agree that by default all ports should be blocked, but when you're dealing with a primarily developer focused group, there should be considerations so that it doesn't take a month after submitting a ticket so we can actually get our work done. I've worked at enough places to know when an IT team is good, and knows what they're doing, and one that simply follows basic rules without thinking of the impact (in other words incompetent)
In 2D I think you would want to create an image and build it pixel by pixel. That would likely be the easiest to do.
Project can't find the System.Net.Http dll after targeting 4.7.2, back to 4.7.1 I go :( 
Hmm, did you install the SDK or the runtime? The installation (on this computer) of the 4.7.2 SDK added that dll at C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2\System.Net.Http.dll
How did you change targeting to 4.7.2? I've installed dev pack but I can only target 4.7.1 (which targeting pack I've installed through VS installer - FYI there is no targeting pack for 4.7.2 in VS installer).
Using MVVM you can translate your app logic from UI to another UI. For example, using ReactiveUI you can build a Winforms app that can be translated to WPF or UWP.
Reactive Extensions are events on steroids.
Their naming methodology reminds me of Nintendo. People had no idea the Wii "U" was another generation. Cracks me up.
Avalonia? Ouii.
I agree. This seems pretty innocent. You can only go so far. There are plenty on here that are not going to a university.
Can't name only one... - Reactive Extensions - Reactive UI - Linq2db - Akavache
How to avoid this? Use a versioning tool like Git. Maybe an overkill but better than creating manual copies. This stuff can‘t be avoided. When you create something in the designer and then remove the method, the designer code will have an error and won‘t compile so there is nothing to show. This may be harsh, and probably unnecessary, but remember that WinForms is from the stoneage of C# and the whole language moved on to WPF, UWP and ASP.Net. They won‘t fix this, so you just know it and fix it the way suggested. Other thing to do would be, remove the event from the properties-window and then delete your own code. But that‘s just the approach from the other side of the problem. It’s a general problem with generated code.
I’d add logging to this list and how to trace production issues that appear via the logs generated to assists troubleshooting. This is a required skill in my role as we provide support to the business. Check out Splunk too maybe. We’ve just implemented this recently.
Work your way through a book on object oriented programming. This is one of my favorites: Head First Design Patterns: A Brain-Friendly Guide https://www.amazon.com/dp/0596007124/ref=cm_sw_r_cp_apa_i_nGu7Ab5ZBTF2A It's simple, repetitive, and thorough. It's almost impossible not to learn from it. Some people find it too repetitive, but I think it's great if you don't have much experience with design patterns.
Try 2gb man. There not spending a penny unless one of the old ones catches fire.
WPF never flopped. Ever heard of Visual Studios? WPF. If you think WPF is too complex then you shouldn’t be programming in the first place 
you think more than one character ahead of what you're writing
Some of us still get paid extremely well to write them.
WPF works on a Mac, iPhone and Android? Cool! Wait, no it doesn't? Guess it's going the same way as Silverlight, then. Use HTML in the browser for all UI.
And Blazor will soon be here too!
Inject all the way!
The majority of enterprise apps are for Windows. So your argument isn't really relevant. Web has lots of use cases but creating a desktop application with it simply because it's hot is not always the best way. There are many cross platform gui frameworks, most will die out and anyone who chose the wrong one will be stuck with outdated unsupported frameworks. Look at all the javascript ui frameworks eventually one will come out on top and unless you chose right you'll be fucked. This is why you still see enterprise WinForms apps, it's been around for years, it works and is solid. A lot of companies will not gamble on new tech until they are solidified and battle tested.
I would say that knowledge of what SOLID is should be junior level. Applying it thoughtfully to your code is intermediate to advanced 
This is great advise. I’m just starting with MVC in C# and it’s surprising how different it is. Also how many bad habits you pick up. From my own experience and bare in mind I’m transitioning from PHP to C#, MVC comes up a damn site more when looking for tutorials/resources/help so I think it’s worth diving into this. Also, comments comments comments. Oh and GIT commit has saved me so many times!
Thank you!This is all gold to read. I especially like [Akka.Net](https://Akka.Net)'s documentation there. It's really good. The disruptor pattern I havent been able to understand on a first skim through. Its going to take me a while to digest all this, so I am unable to discuss or converse about it, but I must say that, you have given me the right stuff to read and look at, and for that I am super grateful. Thanks so much
and one more important item is missing: learn how to write units test and maybe get to known to Visual Studios Debugging Features and shortcuts and use it to its full extent 
Okay so, I played around with it some more and got it working mostly the way I needed it to i just got 2 quick questions. I'm trying to return some percent values, but it i'm having some issues showing the decimal points. I believed the "ToString("0.##")" would return it with 2 decimals but that doesn't seem to be the case. Here's the code that calculates and prints the percentages to the console: foreach(KeyValuePair&lt;string, int&gt; entry in languages){ var percent = ((entry.Value*100)/totalbits).ToString("0.##"); Console.Write("\r\n"); Console.Write(entry.Key + " : " + percent + "%"); } it returns: Ruby : 91% Shell : 0% CSS : 6% HTML : 1% JavaScript : 0% which you can see don't make too much sense since it only adds up to 98% without the decimal points. What it should return is Ruby : 91.01% Shell : 0.40% CSS : 6.64% HTML : 1.93% JavaScript : 0.02% Got any clue how to fix this? The other thing was regarding the language JObject i asked about yesterday, i played around with it for a while and got it working, i just wanted some input on if it's an okay solution or if there's something i should change about it. Here's what i ended up doing: foreach(var item in languageJSON){ if(languagesSummed.ContainsKey(item.Key)){ int temp = languagesSummed[item.Key]; int temp2 = (int)languageJSON[item.Key]; int result = temp + temp2; languagesSummed[item.Key] = result; } else{ languagesSummed.Add(item.Key, (int)languageJSON[item.Key]); }
Alright, Thank you so much. I doubt I would've gotten this without you, or atleast it would've taken me much much longer :P
No worries man. A lot of the problems you have had are issues that everyone runs into when learning and then they're not a problem again. The percent one gets pretty much everyone haha you've just got to know these things. Like I said always happy to help. I love programming and remember how hard it can be at first. It been a fun journey, good luck with it.
Thank you :)
What you don't want to do with a large file is read it to the end before processing it. Instead, you want to read the file piece by piece into a buffer, processing it as you go along. using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) using (BufferedStream bs = new BufferedStream(fs)) using (StreamReader sr = new StreamReader(bs)) { bool keyFound = false; while (sr.ReadLine() != null &amp;&amp; !keyFound) { // check for key } }
I say this a bit, so sorry to the people who have read some variation of this before :/ Most of this is not C# specific, and I'm posting it because you've had some good suggestions for C# specific resources but few for how to use C# effectively. Software is a people problem not a technology problem in 9 out of 10 cases. If that sounds mad, we produce software to enable people. It's defined by people assessing what other people want and then often intermediate people will translate what the first lot of people wanted into something you could have written yourself. So embrace people; figuratively, they get annoyed if you start hugging them; and their foibles. Treat code as a liability not an asset. This means the more code you have the more risk you adopt. Which means write code that can be replaced easily. Don't mix your concerns, keep UI stuff away from the business bit. Write the business bit once, clearly and with behaviour based tests \(not necessarily a BDD test framework because they're a bit cack\). There is a lot to learn. Don't feel overwhelmed, just go with it and learn to how to research and solve problems. Write code that works first and make it pretty after. Writing code that works will make more people happy even if it's awful, so always start here. Make it work, then make it better. Having read the above paragraph, you're thinking these are incompatible. Pretty much everything we do is mediation between incompatibilities. When you write code, write tests. Writing tests is hard. I will verbally eviscerate any agile coach who says otherwise. Learn to write tests. Learn the idioms and pick a style. Fowler categorised test writers as either mockist or traditionalists. I'm a traditionalist, Google the man and read the article, pick a side \(traditionalist ;P \) and the working code you write will have some documentation and assertions. Which leads to the last one... Naming stuff. Here's the implicit loop statement, software is a people problem in most cases, so learn to define the problem in terms the people understand and then agree it with them. Keep the feedback loop short. Get frequent feedback, diagram flows in a form the business will understand without attending a day long course. Identify behaviors and flows. Name tests after the behaviour or flow it tests. If the test isn't entirely explicit about why status must be KK, replace KK with a constant with a sensible name \(KipperKiatter?\) and add a comment that will remind you or another dev wtf you are testing and why. If you can't name something, you can't describe it, if you cant describe it you can't code it. Comments in tests are often useful because they have space to express more about the business intent. Comments in the rest of the code should be minimal. Never translate the code into comments "// loop through critters", do add comments if the code isn't obvious "case "KK:" and then replace the code you commented with better code that doesn't need a comment. Keep comments that honestly convey business intentions. Love cats.
I would consider using Unity3D as it allows you to write code in C# but takes away a lot of work (graphics and cross-platform deployment for example). Instead of pixels / images you could have stars represented by actual entities which might come in handy if you want to zoom in, attach tooltips or so at a later point.
Anytime :)
I second this.
Yup, and then switched it back. :(
Hey, so this will work but there are literal infrastructure queues. For example take a look at the Amazon Simple Queue Service. There are other queues that do not need to run in AWS like a Mulesoft queue. The basic pattern is you have a requesting system hit the queue, the queue creates a "file", a worker process (the end system) processes those files. Those files normally contain the JSON that would have been in the body of a request. https://aws.amazon.com/sqs/ There are also solutions like RabbitMQ. Hopefully that helps! 
I was going to say exactly this. Recently started a new rather large enterprise app and did unit testing from the start. It's amazing! I can check every service works as it should before it goes out. Still figuring out integration tests though haha And bang on about learning visual studios well. It has so many useful features Things like snippets, refactoring, auto formating, style enforcement, code analysis. As well as learning all the shortcuts. It can increase your productivity so much!
I find once you have the core concepts down like classes, events and delegates, linq, async await etc. Is to learn the class libraries. So many of the things you need are already implemented and available. The amount of apis that come with .net now are staggering. Then you want to learn things like di/ioc unit testing. That leads to mocking etc. Then you have all the tools to create pretty much anything you need.
https://www.microsoft.com/net/download/visual-studio-sdks -&gt; .NET Framework 4.7.2 -&gt; Developer Pack Developer Pack should include the targeting pack.
I wouldn't call it a bug. But after all these years they should of built something into the designer. Like if it was there and then gone next time it could pop up saying "you've removed a method that is linked to designer code would you like to update designer?"
Well if the choice is WinForms vs HTML, I think we all know which will attain cross-platform ubiquity, have a greater development resource pool and last longer. Also, WinForms? Really? That's the touchscreen future?
Wow that formatted like crap. sorry ahead of time.
[This demo](https://win95.ajf.me/) is what started the movement. 
&gt; I feel like I'm quite possibly confusing this concept with Message Queues/brokers or whatever. Ehh, what you're describing is often built on top of a Message Queue/Broker. While /u/jaybyrrd mentioned RabbitMQ, that's just a Queue/Broker. Unless you have a good reason to reinvent the wheel, you'll want a library to help. [EasyNetQ](https://github.com/EasyNetQ/EasyNetQ) is a pretty dang Minimal interface for RabbitMQ on .NET, and has the advantage of low ceremony so it's easy to get started on. [MassTransit](http://masstransit-project.com/) is a bit more mature, but it has a LOT more going on inside, so there's more setup, but you can do some really cool things with it in theory. [HangFire](https://www.hangfire.io/) Is useful, but primarily for Background jobs; It would probably wind up looking very much like your implementation in Quartz. All of that said, without knowing the specific requirements (i.e. is there a requirement to do these only once a day? or can you really do them whenever? Is ordering of requests important?), I don't think what you're doing sounds particularly inelegant. The database approach abstracts the data enough that it is somewhat easier to model something like 'cancelling' a request (i.e. I still want to send Requests 1 2 and 4 but not 3); To do that with a Queue would take some additional thought and programming to do correctly. With a DB you can take the specific record and flip a bit. If you need that kind of capability (I have) the database approach wins out from ease of understanding. With a Queue I'd have to consider some sort of extra logic to check for cancelled entries (perhaps other messages on the queue, perhaps checking a table which defeats the purpose of going with queues)
Init probably isn’t being run you probably have the test set up incorrectly, should be able to see with the debugger 
You are creating an instance of _testMe in the Init() function but not the function that actually uses the class. 
with NUnit your setup function is meant to be able to carry that over. This is working successfully on other tests but i'll give it a shot and see what happens.
Ah ok, that would then make my comment invalid ! Good luck. 
I added more error details
A lot of projects like to keep the top-level folder for administrative such as licenses, read mes, and generic stuff. Having the source code in a separate folder helps avoid the noise. Of course, I come from the Linux side of things where almost every project has a `src` directory.
btw, C# 7.0 in a Nutshell is already out
I couldn't find any laptops being sold on Amazon with only 2gb. Some with 4 but not any with 2gb. Still, plenty of space. This fantasy that devs have about needing to worry so much about memory use comes from the early days of my career when it did in fact matter. \(When I got started 640kb was the max in a machine.\) It just doesn't matter as much any more and we should stop wasting so much time and effort pre\-optimizing. Does that mean we should be completely indiscriminate with memory... no. But it also does mean that we should value other things more than memory. Such as being able to write a GUI app once, in one language, and then build and deploy it to all desktops \- Windows, Mac, and Linux. Cross\-platform can be more important than the fact that \- at the moment \- Electron is a bit bloated.
The only reason I’d consider it bad practice is if you are on a Windows machines because of the problems you can have with long paths (which aren’t even really long). 
There are a few different ways, one of the most commonly seen is the ViewModelLocator. This is a class that has the sole purpose of creating your view model. If you're doing dependency injection then it would also usually be the object that calls to resolve your types. A nice way of implementing it is to have it as an application level resource, then you can do something like DataContext = {Binding myViewModelLocator.MyViewModel}. Alternatively, you could treat the view model locator as a "main" view model. Where main window sets it's data context to the MainWindowViewModel without calling the constructor (as you are currently doing). Then any child of the main window can get it's specially constructed view model by calling a property on the MainWindowViewModel, e.g. &lt;grid DataContext="{Binding ChildViewModel}"&gt; public class MainWindowViewModel { public OtherViewModel ChildViewModel { get; } = //Create view model here } 
This is a bit of a sidebar, but just to clarify: I just meant that as a rhetorical question in the context of general type theory. Interfaces are types, and are abstract in that you cannot directly instantiate them. In C# the conceptual difference is that abstract classes are ad-hoc polymorphism while interfaces are examples of LSP/design-by-contract (think duck-typing). From an operational semantics point of view, the difference is murkier. Traditionally, both are accomplished by vtables. This used to be the case even in .NET. Each class had what amounted to an interface vector table which pointed into the vtables of whatever interfaces it implemented. However, it seems that it now uses [virtual stub dispatching](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md) for whatever reason. To me, it just sounds like vtable creation by lazy evaluation/caching, but I could be misunderstanding that. Sidebar aside, I was just speaking this: &gt; Assemblies, modules, and **types** can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant, as long as two conditions are met: Whatever else you want to say about an interface, it is definitely a type. But the above is demonstrably false for the specific case of interfaces. Try this: using System; [assembly: CLSCompliant(true)] namespace ClsInterface { public interface IFoo { [CLSCompliant(false)] uint X { get; } int Y { get; } } public class Bar { [CLSCompliant(false)] public uint X { get; } public int Y { get; } } } It will generate: warning CS3010: 'IFoo.X': CLS-compliant interfaces must have only CLS-compliant members Which raises a couple questions: 1. If this is a "must have [...]" semantic, then why is this only a warning? 2. You don't get a warning for `Bar`, so the quoted bit above is correct for classes. Why is it not true for interfaces? &gt; &lt;integer stuff&gt; I probably could have been clearer about what I meant regarding consequences. The intent of the CLSCompliant attribute is to prevent exactly what you're describing. So I think it's safe to assume that _non-compliant methods_ are ignored by CLS-only languages. What I'm wondering about are the consequences (with respect to CLS-only language) of having an entire interface flagged as `[CLSCompliant(false)]`. I can't find any information about the dynamic semantics of this attribute. What is compiler or language runtime supposed to _actually do_ with this information if it's present in a referenced assembly? Does it ignore the presence of the entire type entirely? I would assume so since all of its members would inherit the attribute. And -- in case you were wondering -- you can't have your cake and it too. If you tag the interface as non-compliant, none of its members may be tagged compliant: &gt; warning CS3018: 'IFoo.Y' cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type 'IFoo' It's just odd. From the behavior of classes, it seems clear that the intent was to able to have side-by-side compliant and non-compliant interfaces in the same type, even if that meant the compiler couldn't really enforce the semantics. The compiler has no idea if `MethodA()` is an alternative version of non-compliant `methodB()`. The compiler can verify the first "as long as..." clause, but not the second. And yet interfaces were singled out for all-or-nothing. Language designers are rarely arbitrary, so even if ultimately doesn't "matter" (I'm just making everything CLS-compliant and moving on with my life...) I'd still like to know why this exception exists.
&gt; Such as being able to write a GUI app once, in one language, and then build and deploy it to all desktops - Windows, Mac, and Linux. You can now do that with C# and a few third-party tools. It might not be as slick and easy as with Electron, but it is doable and easier than something like Java.
&gt; You can now do that with C# and a few third-party tools. Which tools are you referring to? I'm interested. The only other truly cross-platform gui toolkit I've used has been QT.
It's been recommended above but SOLID will get you far. GRASP patterns will help as well. Pluralsight is amazing resource too. I used it to pass the Microsoft cert for C#. 
Two definitions of src, seen in context * source, outputs, build-scripts * source, tests The first one makes no sense because outputs/build artifacts are always placed under the project by default. The second is just solution folders for organization.
My first question is why consider using this over ASP.NET Razor?
https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient
I'm almost definitely misusing (*and* abusing) events.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/
Because the WebAssembly code runs client side. That said there is something from MD in preview that is close to Razor: https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/
I rather use Windows.
So is this like Blazor?
Whenever you get an error that it can’t convert Task&lt;T&gt; to a T, that means your forgot to await the method call. A Task&lt;string&gt; is “an operation that will complete sometime in the future and give you a string”. So basically you need to wait until the operation is complete and extract the string. The await keyword is how you do that. 
emacs runs on Windows...
Maybe if they designed it to be simple and maintainable more people would use it. Ever have to debug a g.cs file? 
[You missed the joke.](https://en.wikipedia.org/wiki/Editor_war) &gt; As a poke at Emacs' creeping featurism, vi advocates have been known to describe Emacs as "a great operating system, lacking only a decent editor".
Hey, thanks for the thorough answer. To my understanding, the message brokers help in cases where one or more distributed services aren't available. I've actually been thinking that it would make sense to use one in a particular customer's application, because a lot of registration using other internal services is done, when they use certain endpoints. For example, the customer's application uses this gateway service in question. And you're right to bring up some of those scenarios. I think it simply bothered me to have to use a database as a queue, because it in a way didn't seem semantically correct. I've been struggling a bit with organizing batch jobs that work on the data we receive. We basically improve it in "versions" using different services, where the next version relies on changes made by the previous. Currently I'm just using flags in the database, which I guess would be okay, if it wasn't for the fact that we'd like to be able to perform these versioning functions again, as we improve them - but I guess that's a different problem altogether. I think the point was that I've been thinking about queues in three different scenarios, where it only makes sense to think about queues in one of them.
Blazor performance currently is abysmal compared to JS unfortunately.
Use user controls if your form is too complex. It’s no different from any other component based architecture. The winforms designer works great with custom controls.
I would love to not do it as a daily task, but I have no choice. The external system allows only a single file per day, so I can't do much other than queue up the requests as they come in. Regarding search, yeah it would be nice, but I'm starting to wonder, if I've been thinking about it all wrong, because even after the task is handled, I still need to store it as a "request" in a table anyway in order to acknowledge it, when the response comes back the following day. Does that make sense?
Well, personal bias aside (W3Schools is on my personal blocklist)... MDN would be the equivalent source similar to W3Schools. And if that's what you're looking for then the MSDN would be the equivalent of that for C#. If you're looking for education on how to go from noob to pro then you'd be better off getting more focused on the application you want to develop (Unity, MVC, Core, etc).
In the sense that it shares the same technology stack beneath \-\- mono\-wasm and WebAssembly \-\- yes, it is exactly like Blazor. The main difference is the underlying UI pattern used. Blazor follows in the footsteps of [ASP.NET](https://ASP.NET) Razor, which uses a variation of the MVC pattern and constructs the UI statically and dynamically on\-demand. Frogui aside, this sort of UI pattern is unique in and of itself and is very different from, say, MVVM, as is used with WPF or any other Microsoft XAML variants. Our Lesarde.Console class follows the "console UI pattern" ;\) \-\- simple text i/o, but within a browser. But, for many decades consoles have been used to do amazing things, and I think mono\-wasm and WebAssembly need to have amazing things done with them!
yea if i'm gonna write a small native web app.. I can accomplish it pretty easy without a framework..
Yup, that makes sense. I wanted to ask just to make sure. In _my_ opinion, a queue doesn't fit your use case. You could certainly make a queue work for you, but I would typically reach for message queues when I want to handle events in real-ish time, and / or when I want to send integration events to more than one downstream service. Since you are doing neither of those in this case, I would question what you would gain from the overhead of adding another piece of infrastructure. Message queues are a pretty awesome piece of technology, but I'm not sure they are necessary here. In your case, I would actually (personally) lean towards continuing to use a database. Queues / job processors aren't necessarily _forced_ into handling tasks as they come in, but they do lend themselves to be used that way. Using a database allows you to store an arbitrary amount of information for a processor to pick up at some point in the future.
Does frogui even need a server? Could it be served from a local file directory?
Hell, Windows probably runs on emacs.
People like their development environments and don't want to change environments for each language the want to write.
If I understand your question, you are correct. It definitely does not require a back-end server, just a local, lightweight web server. BTW, one is included in the Lesarde.Frogui.Wasm NuGet package.
Cool idea. I'm hoping this works out as there are so many things about javascript that trip me up. Not having to switch to a javascript headspace when working on the client side would be nice too. But do you think it can ever replace javascript as the primary client side language? It doesn't seem like it could ever really ever become more than a niche solution. But I hope I'm wrong.
Mind if I ask why W3Schools is on your blocklist? I use them regularly just for reference. I hate using Microsoft's sites but to be fair, I haven't used their MDN site in years. Looks like they improved it.
My question was if http is necessary but instead using local file Uri?
I installed it hours after it was first released to windows 10 1703. Since it was so new I took some extra precautions such as rebooting first to make sure I had a clean slate and creating a restore point. I then installed it and restarted again. And sure enough, during startup the loading spinner froze for 5 seconds, then it bluescreened. Never bluescreened before and never heard of the bugcheck I got (all the parameters where zero). Anyway on my second attempt the computer started fine, dotnet 4.7.2 seems to be working fine, and I haven't had to use the restore point. Not sure if it was a fluke or something to be potentially aware of. Curious if anyone else experiences this. 
You need to await the Task&lt;string&gt; to get the string from the task
I believe http is necessary, but I haven't tested.
Thanks. You are definitely not alone re wishing there were a non\-JavaScript way to code for the web. And, you will be happy to hear that JavaScript's death\-grip as \*the\* web client language was dealt a serious blow when all the major browser players agreed \-\- and subsequently implemented \-\- WebAssembly. The future arrived in 2017. The upshot is this: JavaScript will have no inherent advantage in the browser over other languages once they are tooled up. For the foreseeable future my understanding is JS is required to do a bit of bootstrapping for these other languages internally \(not our concern\), but I am guessing we are talking nanoseconds. Now it's just a matter of having tools to support the various languages. I cover the history and future a bit at [https://lesarde.com/frogui](https://lesarde.com/frogui). So, yes, IMO JavaScript's relevance will slip substantially over the next several years, if for no other reason that personal language preference.
Removed: Rule 4.
Again most enterprise software is windows based so cross platform isn't an advantage. And generally you don't write a website using only html, you usea javascript frameworks and they can stop being supported anytime.
Very nice! Thanks.
MDN is [Mozilla's Developer Network](https://developer.mozilla.org/en-US/). MSDN is pretty darn good for the equivalent C# documentation. Then there's always digging into the actual source (if thats your thing). W3Schools is on my blocklist because MDN is always better but Google insists on putting W3Schools at the top of the list. There's never been a time when I wanted W3Schools over MDN for HTML/CSS/Javascript related items. This goes double for SQL or any of the other classes(?) they offer.
I think.. Oh hang on.. Phone call.. Yes. Yes.. Yes, they're here. It's for you.. It's the 90's. They want to know which software from that decade you're still using?
Its a joke flair from a [joke thread awhile back](https://www.reddit.com/r/csharp/comments/76dau1/ask_me_any_cprogramming_question_then_after_ive/dod8iju/?context=3). 
Also worth comparing against 'Ooui'
I did not have it visible on vs :-(
For sure. Ooui is a very cool tool, and one that I owe much gratitude. In fairness to Ooui, it's got a different mission and is more mature.
It's payroll.
I would think file:/// urls would work, but ok.
I think your solution is adding complexity to your program for the wrong reasons. That pattern is good if you have an indeterminate number of validations to do, but if you know you only have two validations and there aren't going to be any validations added later it is overkill and reduces first glance readability. Generally, you want to keep your code as simple as possible unless you need to add complexity to it. Right now, I do not see a need for that complexity?
You're right. Growing pains. Though the tables should turn when mono-wasm's compiler is ready; currently it's interpreted.
The code is just an example, my real validations are several and each require many different parameters.
Are you planning to do something with GUI? And I guess it would be a different approach than Blazor.
Yes and yes. The GUI is shaping up nicely, parts of which will be introduced next. I use Blazor and expect it has a bright future. As you probably know its UI pattern strongly resembles ASP.NET Razor -- MVC and dynamic page construction. Really clever. Frogui will be more like -- but not the same as -- Silverlight and WPF; MVVMish, but evolved to take advantage of the web's vast IU power. What would you like to see?
This should have a NSFW tag
You may have needed to rebuild the local cache. Installing dev and using in VS2017 worked just fine for me.
You have to rebuild your cache most likely. Sometimes just reopening VS is enough to trigger it
Oh I have no doubt and I’m unboundedly excited for that time.
You crazy m&amp;#@+ers...
Ah got it.
Wtf, this is like an argument with the girlfriend that brings up shit you did wrong from 3 years ago. 
This practice is really annoying, I guess it helps people that are really bad at organizing their projects. 
For the most part our large WF app is just a bunch of UserControls. This is so much simpler to maintain, and manage. 
&gt; According to documentation, the Start method of Thread inserts a full fence. If stated in your own words, every write before the Start call would be made thus making it safe to use the something variable in the new thread (it would not see a null reference). Is it safe to apply this thinking in general to full fences regardless of environment? Yes; that is the definition of what a full-fence does (or actually just a store-fence, for what you *precisely* described; but full-fences do that too). Also, starting a new thread is a kind of exceptional situation anyway, as the new thread has no cache context that already exists. &gt; In other words, I'm making sure it's not that lock that maintains visibility of the something variable reference but rather the fact that a full memory barrier is present. Again, I'd just be sure what you mean when you say 'visibility'. Once again: Barriers only prevent reordering of operations on a single thread. But in short, yes, it's barriers here that provide the *coherency*. Locks provide both *coherency* **and** *atomicity*. [Coherency](https://en.wikipedia.org/wiki/Memory_coherence) is the concern of making the program's state coherent to all cores; whereas [Atomicity](https://en.wikipedia.org/wiki/Linearizability) build on coherency to ensure that groups of multiple operations can not be interrupted or seen by other cores halfway through execution. &gt; One more thing, are synchronization points (volatile being one of them) where writes/reads become visible a feature of the language or something part of the fences? Again, what exactly do you mean by 'visible'? Anyway: Unforunately like I mentioned in my first comment, C# has no official memory model. Sometimes the documentation on MSDN conflicts with what's in spec. There is also unofficial information from experts/compiler implementers/MS employees scattered around the web. MSDN says that volatile writes "ensure the latest written value will be seen by all threads", but that is **more** than what a memory barrier guarantees, and it seems [the wider C# community thinks it's wrong](https://stackoverflow.com/a/40939544/158109) (as do I). Finally, I actually wrote a blogpost about a year ago that might help you: [http://benbowen.blog/post/cmmics_iii/#assumption_2-_coherency](Here). Especially the section on Coherency (linked).
I've never heard it's bad practice, and I don't know where you would have heard of it. Quite the opposite. I mean, do you mix your documents with your code, and your tests, and your libs... sounds quite messy. Nearly every piece of advice in organizing a project includes a source folder, and so does most mature libraries that I've ever looked at.
&gt; But that is nearly only office and home user apps. Industry, government, medical, ect won't touch a web app. You'd be surprised.
Not to mention that a tremendous number of apps that are meant to work with "devices" now seem to be attached to a cell phone or an iPad or something rather than a "desktop" per se.
&gt; Performance is key when you aren't building consumer apps. Flashy electron or web apps don't cut it and don't impress. Depends on what you're doing, I guess. A lot of internal apps are ugly *and* slow.
This is a big reason I never invested that much effort into learning WPF. I'm sure it's nice if you get the hang of it, but in the mean time my needs are pretty small and I know how to use Windows Forms already (and if you use the Presenter pattern diligently you can avoid most of the downside).
This combined with a text-based GUI API would make for quick, easy to deploy apps that could have great use for many internal project. One issue with the web is that is killed productivity. What was great of mainframe was little time was wasted developing interface. I find it ironic that as developer, we often praise the use of console for ourselves while assuming our users need shinny interfaces. Console apps would often do the job for small pools of users doing highly specialized tasks.
&gt; I sometimes wonder if the move to browser based is good, some of them seem awfully clunky. As a developer or user who knows, but as a sysadmin it's pretty amazing. Fiddling with trying to deploy apps through Active Directory sucks.
Hey try using RestSharp NuGet package, it’s awesome for using the http protocols with apis or sites . 
Maybe your can go through each item and if it's a Monday appointment add it to another string array of "Monday appointment".
Such a lot of hype over WebAssembly these days, but I'd rather be using something that compiles to plain old JavaScript (like Bridge.Net or Websharper), just in case all these new WebAssembly frameworks would be dropped some other day.
It's OK.. You can carry on using WinForms and BASIC. Nothing to see here.
Interesting project! May I suggest sticking to ONLY console apps? My reasoning is this: if I want to write a full application, I'm going to be doing it in Blazor. All the UI, backend interactions etc. will demand a lot of planning, so I'm only going to do this for big projects. Now if I want to rattle off a quick console app (which I do far more for script-like automation, importing data etc.), I will do that using a .NET core console app. I then have to share it with someone, explain how to unpack it, provide updates to everyone separately etc. With this project, I have a far better alternative. I still gain from the rapid development process, I publish it somewhere as a static app directly from VS. My users gain from not having to get my script via a zip in an email OR update it each time I make a change. If THAT was the future, I would use this framework every time I wanted to write a console app. From your perspective, this makes your framework the go-to framework for console app development - a huge market.
How do I rebuild local cache? What exactly do you mean?
How is this different from Blazor, and whether it is or not, can you give examples of why/how it might be superior?
Blazor for example has a polyfill that compiles to JS if wasm support is not detected on the client browser.
Oh, this is nice, didn't know that, thanks!
It is nice - doubly so because it means your site will even run in IE. *IE*
DI/IOC: * If it's a console application or a Windows Service I'm working on I'm very likely to not use a container and wire up the object graph of dependencies myself in the [composition root](http://blog.ploeh.dk/2011/07/28/CompositionRoot/). Have a read [here](http://blog.ploeh.dk/2012/11/06/WhentouseaDIContainer/) as to why I do this. * If I'm working with something like WPF or ASP.NET my preferred container is SimpleInjector followed by AutoFac. Unit testing/mocking: * xUnit followed by NUnit. I prefer how xUnit has a fairly more straightforward API compared to NUnit which has like 3 different documentation sites and good luck finding the correct and up to date one. * NSubsitute. It's a great mocking library and I particularly like it's approach: "Mock, stub, fake, spy, test double? Strict or loose? Nah, just substitute for the type you need!". Compared to Moq's pomp and ceremony, it's a joy to use. * AutoFixture. I barely have to setup the Arrange part of tests now, it is a lifesaver. It also has integrations with a number of mocking libraries, such as NSubstitute and Moq. * Shoudly. Nice, fluent, readable assertions. * All of these combined together means testing is SO DAMN GOOD. As for serialisation, I guess JSON.NET mostly. Cross platform UI: Avalonia.
Yeah autofac is my goto aswell. Using the owned's to manage my top level view models is so great. I use nunit and moq for my testing currently. What does nsubstitute do better? The arrange is the one part that's still a pain so will look up autofixture, so thanks for that :) I love AutoMapper for straight mappings, it can become a bit convoluted once you move past that though I find.
I just prefer NSubstitute, I find it's easier to read, clearer syntax. Have a read here: http://hamidmosalla.com/2017/09/28/isolation-frameworks-why-fakeiteasy-and-nsubstitude-are-better-than-moq/ &gt; Edit: just looked up NSubstitute and Autofixture they look awesome! Looks like I might be rewriting all my tests soon haha Nice! Glad I could help :) There's an example here http://techblog.invitationdigital.com/2015/08/11/an-inroduction-to-unit-testing-with-autofixture/
I'd go dapper over EF any day. EF is entirely way too bloated, imo
I didn't downvote, but okay.. strange comment 🤔
At least use nameof instead of introducing magic strings
yeah same was not aware of autofixture.
You can keep a list of all date times. Then create lists for each day of the week. Use LINQ and filter the list of all date times and check the DateTime.DayOfWeek
but can it run Crysis
.NET \*Bows\*
I built a site recently with kind of the same setup. We’re not actually using different areas based on the url we just pass a different customer id on each db call. We do it through a service call that’s dependency injected, but it requires httpcontextbase being injected as well. One recommendation is to load all that customer data into your application cache so you don’t have to deal with the extra db hits on every request. Depending on how many different customers you have and how much data they have etc 
Everything I'm going to mention, we use at work. We haven't transitioned to .NET Core yet, so I can't pick for the availability of these libraries in Core. IoC - Autofac. Very easy to configure and powerful. Works with a lot of other libraries (including WebApi). A lot of control over lifetime scopes. Logging - NLog. Easy to configure. We had a brief push to Common Logging as a wrapper around it, but eventually settled on just using NLog by itself. We use Splunk to aggregate the logs. Messaging - MassTransit. This is a new one for us, most of our messaging layer is written in straight RabbitMQ, but we're slowly bringing on more MassTransit. It's free, removes the need to write a lot of boilerplate, has built in support for retrying with Polly, easy to test with an in-memory bus, connects to RMQ as well as Azure Service Bus. Works with Autofac. Scheduling - Quartz. Very flexible, you can use cron strings, works with Autofac, works with MassTransit if you want to schedule a message to go out. Service Wrapper - TopShelf. Since non-Core only works on Windows, you end up writing a lot of Windows services. TopShelf removes almost all boilerplate from doing this. Your service can either be run as a console app for testing, or you can install it as a service. The console commands you get also allow additional instances to be installed with a consistent naming convention. And it works nicely with Autofac.
Find a boss / company that cares about results not butt in seats time. I work about six hours at my desk, another from home. Those six are punctuated by a decently long walk and lunch break., and three or so smaller breaks where I do a couple bits of stretching in a private meeting room. You can find something as long as you have an understanding of results, not time spent staring at a monitor. 
&gt; I was able to kind of get it, but it only shows the first Monday it comes across instead of ALL the Monday appointments. Please include the code you have of your attempt.
monogame
&gt; it’s not a full ORM really That's a feature! &gt;It does not handle concurrency for example. huh? in what sense? 
IoC: Historically Autofac, however recently removed it from our netcore services as the built-in container is sufficient for our needs (add Scrutor for scanning https://github.com/khellang/Scrutor). Autofac added an additional layer of complexity and at times difficult to integrate. Logging: Serilog. If you're not using destructed logging and message templates, you need to move in that direction. Critically important for observability and operations. Combine with GetSeq. Testing: xUnit2 with Shouldly for assertion. Using Respawn to reset database between tests - no more transactions or snapshots. Bddfy to drive the test structure and get confidence that business logic is correct. A little unknown extension of Shouldly is the approval/snapshot testing. ORM: It depends. EF Core or Dapper. And everything else: Automapper (projection only, one way), NodaTime, Mediatr. 
This. Butts in seats is the management metric for those with no other option (because they lack a single clue). Such poor management is indicative of either misunderstanding their businesses own efforts or a predatory employer. Developers, especially good, user-focused developers are very difficult to come by. Don't sell your labor to somebody who doesn't deserve it.
I feel similarly. I love coding, particularly in the C#/.NET ecosystem, but work at least 60 hour weeks, and manage our IT infrastructure on top of it, so I’m on call 24/7. Unfortunately all can I do is commiserate rather than offer advice—I, too, feel totally stuck.
For me it would be Monogame + Nez.
IoC -&gt; Autofac, easy to use, powerful UT -&gt; Moq, also used NSubstitute - no special feelings to any, both allows to get the work done pretty ok logging-&gt;log4net, easy to configure, easy to use, stable ORM-&gt; EF, I use it at work, but i don’t really like it. Missing some out of the box features like bulk insert for instance. 
I've only really used Autofac for ioc, but I'm surprised there's not something obviously better out there. I find the Api confusing. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/tha_pit] [Looking for \[FREE\] programmers for a game "We REALLY need some"](https://www.reddit.com/r/tha_pit/comments/8hf67t/looking_for_free_programmers_for_a_game_we_really/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thank you for the vote of confidence and excellent points! It's this quality of input that helps shape a project and, no doubt, your ideas will affect frogui. Here's what I'll do: 1\) Make sure that, like .NET, a developer has a choice of building a console or gui app, with one not impacting the other. 2\) Continue to improve the console. As for your choice to use Blazor for big projects, I am a big Blazor fan and \-\- assuming it inevitably switches from experiment to official Microsoft tech \-\- think it would be a solid choice. Frogui's gui \(which has not been made public yet\) uses a *very* different UI pattern than Blazor; it's much more Silverlight and WPF\-ish, using something like the MVVM UI pattern. Both of these UI techniques have been used for years to great effect and likely will continue to thrive and peacefully coexist!
&gt; The first one makes no sense because outputs/build artifacts are always placed under the project by default And THAT makes no sense. The default has been bad pretty much always. Build artifacts should really not end up in the same directory where the source code is.
Thank you for the info. I can already see the benefits of those frameworks.
Thanks for the vote of confidence and input. Frogui's console will continue to improve!
We use Autofac and NLog love them. Have to check out the others.
Yeah man. I was taught xna at university. Monogame builds on it brilliantly. 
Nice. I use NMemory and Effort for EF in unit tests, gives you a nice in memory database that you can just throw away when done with.
We use EF. Like you say it's missing some stuff that you may need implement yourself. But gets the job done and is well supported.
Autofac is great. I haven't had any issues with it and it's very powerful.
Removed: Rule 1, spam.
I work remote fulltime for a company that 100% puts family first. If you need to take a few hours in the middle of the day to catch your child's school play, take a snow day, or whatever, then that's what you do; no questions asked. I work 40 hours a week, no more. it's really a fantastic setup, i definitely count myself lucky. My point being, companies that care do exist. You can check reviews on companies at places like Glassdoor.
I'm 52 and I can't remember the last time I worked longer than 8 hours in a day. Just say no to throwing more hours at the problem. It doesn't work. 
Have a look at Prague. Very low unemployment and a lot of demand for skilled developers makes it pretty easy to find a good position. The major tech areas of the city are very central, a few colleagues live locally can walk to the office in under 10 mins otherwise the public transport is excellent making it possible to commute from pretty much anywhere in under an hour. Also homeworking is a very accepted thing here, 1-2 days a week working remotely is very common. Salary is good, not high compared to the UK or Germany but the cost of living is also quite low. As a developer you should expect to make a good 3-4 times the average wage which means a comfortable life. Plus Czech girls are literally everywhere. Which is nice.
From my experience, companies will take as much of your time as you give them. In the US, the assumption is that you're working 40 hours a week. Work that 40 hours and go home. Do not feel pressured to stay late by the environment, the culture, or your boss. Get in, do your job, and go home. If you start this out from day 1, you'll have a much easier time sticking to it. If you have to work outside normal hours to push out an upgrade or something, make sure you take that time out of your normal hours. Overall, it sounds like you would be more interested in remote work, or working for yourself. Both allow you much more control over your time, but with various degrees of trade offs. At the very least you may not be stuck in an office while your working and can choose a place that suits you much better.
Great ideas! I'm looking into the features you requested now. Title\-wise, how do you imagine the title appearing, in the browser tab's title or a simulated console title bar as the first line? That link is so Old\-School Cool! I used to love to code "Rich" console apps. You've sparked my imagination. Is it the look\-and\-feel of console apps you like, the portability code aspect, or both? I ask because frogui could be made to do a pixel\-perfect rendering of any console app, but using modern UI techniques. For example, menu, label, textbox, button, etc. controls could be added to the frogui console emulator \(your link had a good example of a menu\). Historically speaking, this would be a natural progression since the state\-of\-the\-art console tools before GUI started to dominate \(\~1993\) were UI frameworks that allowed developers to work at the control/widget level, largely/completely avoiding the character\-level text i/o.
Haha! I LOVED BORLAND!!! Philippe Kahn was a genius and, had he had a bit more business savvy, Borland would have become a powerhouse still relevant today.
LMAO! Thank you.
The guy know how to rebound. He went from being a multimillionaire, to losing everything, to later become a billionaire. https://www.forbes.com/forbes/2001/0709/128.html#24db7ef8685f Some people are just head and shoulders above the rest. It's almost an insult to them to consider ourselves of the same species. 
A single character isn't guaranteed to take up just one byte, so if you convert a single byte to a character you end up with gibberish.
Okay, I like this, but I keep getting the NullReferenceException when trying to invoke the EventHandler. 
With your level of experience and flexibility on pay, you should be able to work for a 100% remote company. I have a friend that lives in Colorado and spends his time hiking, but works 8 hours tops a day for an Agency located in Columbus, OH. Lots of opportunities out there. It's half setting reasonable boundaries/expectations, and half finding the right company that respects them.
I have slightly altered my original post showing that I thought about this and tried to convert the numeric representation back into an array and convert the array as a whole, but was also unsuccessful.
- You must use `Encoding.UTF8.GetString` to decode the output of `Encoding.UTF8.GetBytes` - UTF8 may use more than one byte to encode one character, you must decode all bytes at once instead of one at a time - You formatted the bytes to strings, so you must parse numbers in the string to bytes. `BitConverter.GetBytes()` does something completely different.
Denmark is usually pretty relaxed with work hours.
You need to check for null first in case an object hasn't subscribed to the event. That's what the ? operator does when invoking: VariableChanged?.Invoke(this, EventArgs.Empty);
Well, my day job did some UWP development for desktop and mobile app projects, but I've never bothered trying to sell apps on the MS app store. I've had nothing but trouble the two or three times I tried to buy apps on the app store. MS screwed it up, I don't trust it and don't recommend anyone buy anything there after my troubles. I've had to waste several hours on the phone with MS because apps I bought would not launch and ended up having to get refunds each time. 
I thought Europe had the best work-life balance sheet?
I work from home full time and they operate flexible hours. So if I need time off I just make it up. And if they need me to do overtime I can take that time off later. I have crohn's disease so it's great for me as I am normally ill at least a couple days a month. But it is very easy to make that up doing an hour here or there. Just got to find the right job. They get their hours and get my money, it's perfect.
This isn’t really related to C# (although .NET ships in general do tend to be more 9-5 enterprise type companies; think banks, insurance, healthcare, etc.). I would at least try to find a new job at similar compensation. You sound like you have a lot of experience. There are remote positions available. Try one of the online job boards that allows you to filter by remote opportunities, like: https://stackoverflow.com/jobs
I'm afraid to get a job writing code because it's my love. Normally I teach kindy and then work on coding a game when I get a home. But about 20 years ago I started working in IT..and after a while realised six months had passed without working on any of my projects at home. Programming had become a job - and I didn't want to do any when I got home. I moved into payroll instead, stopped programming, and eventually became creative at home again. I'm sure it doesn't work that way for everybody but it certainly worked that way for me.
Unless you're pulling 250k+ get out. Sounds like they are taking advantage of that bond you've built with them. You're doing two seperate jobs that both pay 100k plus. Make sure you are compensated accordingly. 
That definitely sounds rough if you're one of the few that can relied upon. However I would encourage you to use your clout to try to better your situation. Talk them into hiring after hours staff so you don't at least have to do that. Talk them into hiring junior developers that you can train. If you are as important as you say you are, then when you burn out they will be truly screwed. Gotta get ahead of that problem asap
I am being paid a salary that covers only one of the jobs. The problem is that it’s a business of passion run by people who aren’t in it for the money, and I’m taking home as much as the two owners. What I’d like to do is wrap up the projects we have in the queue, then move on to consulting in the industry I work in, with my current employer as my first client. The problem there, however, is that I’m already 7 years in, and those projects will take another 2-3 years to complete—and 2-3 years is simply too long at this point.
See my response above as well. I actually did completely burn out a few years ago, as things were even worse than they are now, and they let me take a hiatus to recover while we came up with a strategy to reduce my workload. I unquestionably need to hire a junior developer (if not 3), but every time I get the go ahead to hire, I devise a job structure, interview candidates, then at the last minute, we spend money on another project, and I no longer have the budget to hire assistants. It’s excruciating. I’ve finally been given the go ahead to hire someone to do part-time front-end web dev, but I’m only aloud to give them 20 hours a month, which is completely ridiculous.
I usually just have a content control on my main window bound to an active view model property and using data templates to get the view. Then all I have to do is set that property and he screen changes. 
We haven't covered lists or LINQ in my class, so I'm not sure those would be accepted on the project. I'll look into them though, thank you!
I might try this out! Thanks!
You keep resetting the text that's in the text boxes. Try using `+=` instead. Better yet, build up a separate string using `+=` then assign that full string to you text boxes. You'll probably have to add a newline (`"\r\n"` or `Environment. NewLine`) each line/iteration as well.
I have a pavlonian response to a certain ringtone because of this 24/7 bullshit oncall. The MBAs can fucking learn to take care of their own shit. Since I have to run my life as a business (thanks Obamacare and greedy MBAs), I will NEVER do 24/7 for anything less than $300,000/tear paid up front.
Perhaps you may need to give it to them in these terms: when I burn out completely, you guys will honestly be completely screwed. Either pony up the funds for more employees or suffer the consequences
Different tools for different jobs. I use EF primarily because it is vendor agnostic. If I needed crazy performance, I would definitely be using prepared statements/store procedures and dapper.
Personally I love 24 hour support. We get paid 200 Euro a day just for being on call, 100 Euro for each call we take and 100 Euro per hour for each hour worked. Usually we just bank the 200 Euro day rate and don't work any extra. Life is good.
2 hours of free time a day??? What a luxury! Imagine if you spent the next 6 months on a project spending only 1 hour a day 5x week. That's 120 hours! I had a side project with some friends that just took the payroll csv outputs from restaurant Point of sale systems and converted it to a csv output that a payroll provider could upload to their system. It was basically a very simple electronic data integration app. We installed it as a Windows service on the POS. Charged $300/install then hourly for support. After the development, all of our efforts then went to sales and marketing. Income was sporadic, but we managed to make a couple thousand some months. It didn't cover all expenses, but it was a nice side gig and provided some flexibility. To many people, 2 hours of free time a day is a lot. Not necessarily because they are working all day, but because they may have a lot of responsibilities in their lives that takes up a bunch of their time. I think you have an opportunity in your life right now that if you carefully take advantage of, may lead to what you are looking for. 
Use `Encoding.Utf8.GetString(bytes)`
Word. Out of tree builds are much easier to deal with.
Day trade crypto??? 
How mandatory is knowing czech? I really loved Prague when I visited and have been interested ever since.
MBAs do not allow this in the U.S. We are paid salary for a readon! (That reason is that we cannot have enough money to actually compete with our MBA overlords).
100% remote here. Haven't commuted in over 5 years. I'm 32 and don't ever plan on going to another office again. Also, when I'm done with my tasks for the day, I'm done. With the talent shortage of developers (in the US at least), it's nice having some pull with your actions.
 &gt;I’m one of only two or three developers in the world with the expertise necessary to work in my particular niche, and the business relies entirely on systems I’ve built. So leave or ask for 500k+ a year. &gt;On top of that, my boss and his wife have basically become family Nah bro, if you were "family", you'd be working 20-30 hours a week.
If your boss/friend can't/won't hire someone to take some of the strain off you then they may not be the friend you thought. Be honest. Tell him you need help. If he doesn't hear you, then they are not the loyal friends they need to be for you, so you can not feel guilty about being "disloyal". 
Unless you're building a Space Shuttle, software shouldn't take 3 years. 
*Sis, but no, it’s not like that. It’s a business of passion and we’re all ridiculously overworked, including the owners, and don’t have the cash flow necessary to pay me appropriately (I’m making money many would be envious of, but still not enough for the level of stress I have to deal with) or hire a dev team. I’m just going to have to cut my losses and split at some point.
I think you have a point. There’s no question that we’re genuinely close, but I need to stop fucking around and make it clear that we hire or I walk. Every time I bring up the subject, I receive permission to hire, then we end up not having enough cash at the last minute. I just need to be completely firm.
They know, and they’re terrified of the possibility. You’re right, though, I need to drive it home much harder.
Several projects in the timeline for multiple businesses.
I’ve never heard it put into words so eloquently. Mind if I use that phrase (“either lack understanding of the business or are predatory”)?
&gt;You’re not wrong, but I’m one of only two or three developers in the world with the expertise necessary to work in my particular niche, and the business relies entirely on systems I’ve built. Unless you are getting paid incredibly well for that knowledge I'm not sure what your point is. The only thing you owe to the business is what they pay you for; your family and own welfare comes first before them.
Even excluding burn-out, literally anything could happen to you and make you incapacitated, and then they are screwed again. Too many eggs in one basket, that sort of thing. It really is the best for both of you
The point was simply that they would not be able to find a replacement were I to leave. And we’re in total agreement—I recognize what I need to, I’m just too goddamn nice.
I've always told people that, if you can't identify your replacement, you're not doing you whole job. You want to be valued, but being mission critical and irreplaceable, is an invitation to prison. You've heard about the bus number? How many people can be hit by a bus before your business collapses? I actually got a job with a company that had two programmers and one got shot in his hotel room while on vacation in Mexico. The programmer I took over from was mission critical and I kept the boat floating, but I wasn't interested in prison. I left. Company doesn't exist any more. 8 other people are out of jobs because there wasn't any redundancy. If the owner is family, you *have* to have a number 2. You owe it to both of you. 
We all know it, and have even discussed it on several occasions. I have done everything possible to organize my work so another developer can pick up should anything ever happen to me, but the likelihood that they would be able to find another developer with the background necessary to do so is slim-to-none. But yes, it would be best for both us, and I need to make it clear that not hiring is a dealbreaker.
And don't forget Stack Overflow itself is written in C# for back-end and they are okay with doing 100% remote. :)
Check out the free courses on MVA https://mva.microsoft.com by Microsoft. I would suggest you to the take the C# fundamentals course and the ASP.NET Core beginners course. The courses are taught by great instructors.
Agreed. I couldn't even imagine having two hours a day to myself. I forgot what that's like a long time ago.
I felt that way throughout my career in government IT and development. Then I got a job offer out of the blue to work from home full time on a project that's extremely exciting and rewarding for me. I can't even count the number of remote dev jobs for which I've applied, and I only got call backs on a couple of them. So this one falling from the sky into my lap was like winning the lottery. The only advice I have is stick with it, keep positive, and seek out exactly what you want. Be specific. It's out there.
Are you trying to use a single ViewModel for all the Views in the Frame?
I will never understand people who spend more than 30 minutes commuting in total per day. Also who works more than 7.5h/day? 
no every page has its own viewmodel and the mainwindow with the frame controller also have one
thanks, i am looking into it
I appreciate the encouragement!
Another beginner question here. Do people/businesses use MVC or Razor?
You could change Move GetMove(Board board) {/*...*/ to Tuple&lt;Move, Board&gt; GetMove(Board board){/*...*/} Then, return both the move and the result board, so you can basically, GetMove(GetMove(currentBoard).Item2);
I think these tutorials are decent: https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/getting-started I would try to find some C# tutorials first before you start learning the web and database. I started with console apps and then did some web forms apps for fun. I feel like I did more core C# development and wasn't split between coding database and web components as well. So I spent more time learning the language rather than learning those technologies. Of course the other stuff is very important, but it's a bigger learning curve to do all at once, and I see people starting out doing really strange things when there's a much more straightforward solution that they'd probably reallize if there core C# knowledge was better. I think it's better to just learn C# itself first and get a good foundation before learning database and web. Otherwise you'll be getting stuck much more often I think.
“Register” button is misspelled, “Regsiter”
They aren't mutually exclusive. In fact, ASP.NET MVC almost implies that you will use Razor. At the risk of oversimplifying, MVC is how the backend is organized and Razor is how pages are made to be dynamic. Razor allows data from the backend methods to be used while generating a page. It's kind of like MVC is the layout of your kitchen and Razor is your mixing bowl. There must be a better analogy but I can't think of one right now.
So, you’re letting the update product 1, and are afraid they’ll update product 30 instead. Do they have access to update all products or just a few or just product 1? If they have access to all products, current and future, don’t worry about it. They could just as easily change their get and edit it anyway. If they don’t have access to all products, then the proper way is to recheck their permission on post before processing the change. Never trust what you don’t control. That includes everything the client sends you. For example, if you trust a text field, you could open yourself up to XSS or SQL injection attacks. If you accept an ID, never assume they gave you the correct one back. You should always verify stuff like that. Either by checking the state if you stored it somehow, or by checking for permissions on the object that they’re trying to update
Thank you for the reply. The user would only be able to update items that belong to them. But yes, exactly Jim hits edit on his item of ID 1 since I need that I'd to post back to the server to update the correct record, Jim could be an asshole and try switching it to ID 3 which would Screw over another users Item information. How do I stop jim from being an asshole in that way? How would i check their permission? Since I am only checking to see if the Items column of who "owns it (their userID from another table)" Since editing isn't just an Roles thing more of a if it belongs to you then you can do what ever you want with it.
So you check it server side. When they do the post which says 'update item 3' you check that they are allowed to update item 3 Write all of your Api methods like someone is going to access them not from your UI, but by just sending a straight request. If Jim owns both item 1 and 3, who cares if he changes the product he is updating from 1 to 3? Its only the same as him going to edit item 3 anyway 
oh fuck duh! Not sure why I didn't even think of that... Funny enough I just checked and in my validation I actually check to see if the user Editing the Item is the same user who owns the item.
MVC is how you prepare the food and razor is how you present it on the plate?
I would love to find a job that is remote fulltime. Is there any website which only offers that kind of job?
If you want structured learning and professional quality tutoring and support, consider Northcentral Technical College. It served me well.
MVC 5 is going the way of the dinosaur fast. Core is where it's at. Source: experience.
No worries man! Everyones experienced not being able to see the wood for the trees. Happens all the time! 
I like to use www.pluralsight.com. It isn’t free, but has a lot of C#/.NET courses.
I love that you are responding to individual responses... Please don't try to compete with Blazor, (fellow fan-person!) you will lose (I think you know this). Make a bloody awesome console emulator and you will have a huge market. One thing I forgot to mention earlier... If the use can provide the command line arguments as part of the URL... That would be huge.
There are two ways to "submit" data to the server : GET or POST. You may be over complicating your solution if you're just sending over one parameter over POST. I use POST if I'm sending at least two parameters. I also tend to do more validation with my POSTs than GETs. If you insist on doing both then consider doing [HttpGet] Action(id) { Return view result } [HttpPost] Action(id, bool? save = null) { // save code Return RedirectToAction(...); } 
I appreciate the love! If anything, I'd be contributing directly to the Blazor repo... The command\-line arguments idea via URL is great \-\- coming to a frogui near you soon! Thank you and keep the ideas flowing :\)
&gt;&gt; Title-wise, how do you imagine the title appearing, in the browser tab's title or a simulated console title bar as the first line? I'm thinking browser tab title only. Most users don't look there, but it's the logical equivalent. Also, I'd the user bookmarks the URL? It's the right place. &gt;&gt; That link is so Old-School Cool! I used to love to code "Rich" console apps. You've sparked my imagination. Is it the look-and-feel of console apps you like, the portability code aspect, or both? I ask because frogui could be made to do a pixel-perfect rendering of any console app, but using modern UI techniques. Absolutely, go for pixel perfect replication. Make it so that simply replacing using System.Console; gives you a perfect emulation. I don't wish to labour the point, but you gain a huge market this way. &gt;&gt; For example, menu, label, textbox, button, etc. controls could be added to the frogui console emulator (your link had a good example of a menu). Historically speaking, this would be a natural progression since the state-of-the-art console tools before GUI started to dominate (~1993) were UI frameworks that allowed developers to work at the control/widget level, largely/completely avoiding the character-level text i/o. I'd actually not do this. Instead, I'd call (yes - phone and talk to!) the owner of that package and find a way to develop a version that simply replaces System.Console with your library and published that using nuget. If they are using pure System.Console (and I expect that they are), developers would need to do a single search and replace to make their app work in the browser. I live what you have here... Keep at it and let me know if I can contribute... Best wishes, a_n_t
Generic answer, but my go-to. Pick a program you've written before. Preferably often. Now write that program, from scratch, in the new language/platform. You already understand the problem and the desired results; all your energy will be on the c# learning curve. . My own pet programs are Lunar Lander and Conway Life, but that's just my age showing. 
Can I tell you that I commute 4 hours per day and have so for the last 4 years or would that give you an aneurysm?
Sounds like the job of a good rest API.
It's an in house legacy app.
How do I find developer jobs at Prague? Any sites that you can suggest?
RIP, there’s a lot for me to look over haha thanks for pointing that out!
You can probably sub any technology in for MVC 5 in that sentence and it'll still be true. Web frameworks move at an unreasonable pace.
I added that... and I know I added a listener in my one viewmodel, but it's not firing off.... argh
If you're doing 10 hours a day on 5+ days a week on a regular basis, then *something* is wrong. I'm an American, and the usual expectation as a business programmer has been more like 8 hours a day, as long as you're keeping up with your work. Overtime/crunch sometimes becomes necessary, but it really should be quite unusual on any mildly well-managed project.
Adam Freeman has also written a variant of the same book for ASP.NET Core as well. He gives a good introductory treatment to many of the topics you will need to know. I read the book linked above for MVC 5, and scanned through most of the Core version book to look for differences. Specifically for ASP.NET Core, the official documentation is pretty good, and they have a section called [.NET application architecture](https://www.microsoft.com/net/learn/architecture) that will give you a good introduction to the high level view of building web applications in the .NET world.
Microsoft does this on most of the ASP.NET Core repositories, and they look immaculately organized compared to any private commercial repository I've ever seen. Microsoft manages some of the largest known repositories in the world.
You could use SDL2 bindings: https://github.com/flibitijibibo/SDL2-CS If you use SDL_Image to load jpegs into an SDL2 Texture then you get efficient rendering/scaling/etc that will use the gpu if available, and fast-ish software rendering if not. 
Pretty sure the one I linked is the 'best' for .NET, and is mostly stale just because it doesn't often need fixing and updating, not because it is abandoned or anything. 
Holy cow. Thank you. I can't believe I overlooked that in my notes haha I really appreciate it.
Wow, thank you! I definitely overlooked that in my notes! Must just be burnt out on working on this thing. I appreciate it!
Np, it's actually a pretty common mistake. Keep up the good work! Hope you're enjoying your studies!
How can you handle that? I would go crazy... 
ok, thanks.
I learned c# watching this guy's video! It's good if u can get past the accent. It got me into the door for an entry level developer position. https://www.youtube.com/user/kudvenkat/playlists?view=50&amp;sort=dd&amp;shelf_id=1
I think you need to set expectations clearly. Make it known that you are not doing well, that you need better work life balance, and that half the things - like managing IT are things that need to be handled by other roles and you hire for them. Make it known that if you things aren't improved, your work *will* get impacted negatively. Passion should NEVER be an excuse for being overworked and underpaid, unless *YOU* have ownership of the business in terms of fairly calculated equity. Either that or the expectations of receiving better equity/appraisals (which are met frequently) are the only conditions on which I would ever work for more than what I'm paid.
Great advice, and most eloquently put; thank you.
Being nice is the easiest way to end up with being exploited. I have been there and realized, that unless we take up a stand, we'll be taken for granted and be left unrewarded for all the dedicated work we put in. The fact that they won't be able to find a replacement for you, means that you have all the leverage in the world for doing your work on *YOUR* terms and if you're not leveraging this advantage then you're doing yourself injustice.
I did some work with Monogame a couple years back, cool project, definitely overkill for what I am doing ... but yah monogame is awesome!
if your company is that cash-strapped 7 years in, after all you've put into it (with no equity I'm assuming?), what is the point? Sounds like the company is close to going tits up anyways, and if they can't afford to pay the rates it takes to attract talent, the business should die anyways.
It’s a bit difficult to explain without giving away more personal information than I’d like, but it’s a business in which cachet matters more to those involved than money, and we’re internationally recognized—the business isn’t going to fall apart, but it’s also never going to pull in enough cash to pay me a salary that justifies the amount of work on my plate.
so again, what's the point of all of it? I mean, few things on this planet are worth that sort of death march for years on end. If the company isn't making enough money to hire more staff, they need to raise revenues somehow, or die. It's really that simple. Is there a big payoff you're all going for someday? And do you have equity? Are you personally receiving the international recognition, and will it benefit you in any measurable way?
This worked amazingly! Thanks :D
You could try my graphics library [Veldrid](https://github.com/mellinoe/veldrid). It's primarily a low-level 3D graphics library, but it can also be used to blit pre-rendered bitmaps to the screen with hardware acceleration. It might be a little lower-level than you want, but it will be the fastest and most portable option available.
The easiest way to do this would probably be using SetWinEventHook to get notified when the active window changes and terminate its process if it doesn't match your criteria. This can be a bit difficult if you're still new to programming though.
There is potential payoff in selling some of the systems that I’ve built, and my work has gained enough recognition to support a lucrative consulting career. When I began working for them, I was intensely invested in in the industry and the mission of the business—I was in my 20s, full of energy, and naive of the value of my work. I did, however, aggressively push for raises at every opportunity, mostly successfully. Now, I no longer see any value in investing so much time and effort without appropriate remuneration, but do feel obligated to finish a string of projects to leave them in a stable position. As evidenced by my other replies, I recognize that this isn’t as important as taking care of myself, and I’m working on plotting my exit. 
Wow thanks for adding that extra info. So I should google Filters during request pipeline?
ORM: Linq2db UI: ReactiveUI
IT recruitment here is mostly handled by agencies, even if you see jobs posted on some random site its highly likely the ad was posted by an agency. My advice is to contact Hays.cz and Zeebra.cz and get them to do the work for you, if you have a decent CV you will be drowning in interviews pretty quickly.
I'm pretty similar, but 7 to 4 with 3 hours commuting. I'm in Los Angeles though, so no train option, I'm stuck in the car for 3 terrible hours. I hate that commute. Luckily I get to work from home a couple days a week now and so that makes it with it for me. 
Yeesh. I wouldn't cope with that. I get awful motion sickness in cars. Mad props buddy!
God I hope so haha
Just an FYI, there are two community maintained lists of .NET libs: [Awesome .NET](https://github.com/quozd/awesome-dotnet) [Awesome .NET Core](https://github.com/thangchung/awesome-dotnet-core)
Thanks that's a great resource.
It's really not that bad... A large portion of it is by train, so I can get work stuff done on the way. Also helps that my current living situation is so cheap that after these 4 years I'm able to buy an apartment by myself (which is pretty good for where I am). So I guess it's a combination of sheer willpower and Stockholm Syndrome.
Razor is just a way to write html that gets rendered in the browser. So in MVC razor is the V - which is the view
I’ve leveraged it into rapidly increasing my income at every opportunity, but have hit a hard wall due to the reality of our cash flow (we’re in the middle of building out a second business, so money is extremely tight at the moment), as well as as much vacation time as I’d like, within reasonable limits, and extremely leeway regarding the hours that I work—not the quantity, but when. Still, it’s not enough, *especially* when we’re opening a second business that will only increase my workload. They have to dedicate resources to a hiring budget for me.
Yep, here is a good start: https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-2.1
I am in India and work with a guy whs based out of India. His job description matches exactly to yours. Aaron?
while i love c# i dont think you should use it for microcontrollers. any kind of interpreted/managed language should not be used on them. you dont have that many resources to begin with. take it as an opportunity to learn a bit more about low level programming
Whilst I would use Unity3D you have the option of programming it on Html5 canvas object too. Html5 will have its performance limits and you will have to limit your datasheets but the developement and deployment will be easier. With Unity3D you will be able to do everything with graphics.
Yeah dude, for real.
I've been working on a small dotnet core application which takes a long youtube video and splits it into smaller files based on some timestamps provided in the video description. Found it pretty awesome for long videos which have multiple songs \(often soundtracks\). [https://github.com/kiran94/splitter](https://github.com/kiran94/splitter)
well he mentioned arduino, where the most common version has 2KB of ram and runs at 16 Mhz. a pi is more of a full computer already. 
Just start coding
Are you opening multiple connections to the database or using one connection? Are you connecting to different databases? 
If you wish to use VS2017 for embedded programming, then I suggest using the addon from VisualMicro. You'll have all the Arduino IDE capabilities, couples with the IntelliSense features.
Thanks for the response. I'm just using one connection. I'm connecting to the database via a repository class. This class is inherited by other classes that do the database work query. Instantiated the repository class and used 2 methods in 2 different class. Each class per table. The method it fails on first uses a method in one of the child class and then the output of that method is used in the input of the second method (from the second class). To answer your second question. No, I'm only using one database. Didn't even know one could connect to 2 different database in the same application. Still have a lot to learn.
Thanks for the response. I'm just using one connection. I'm connecting to the database via a repository class. This class is inherited by other classes that do the database work query. Instantiated the repository class and used 2 methods in 2 different class. Each class per table. The method it fails on first uses a method in one of the child class and then the output of that method is used in the input of the second method (from the second class). To answer your second question. No, I'm only using one database. Didn't even know one could connect to 2 different database in the same application. Still have a lot to learn.
Ah, I should have payed more attention.
The architecture piece is the hardest part of learning Core, in my opinion. The IOC container and dependency injection framework is not newbie friendly. PM me if you need some hints!
Are you using async and await? 
I toyed a bit but keep in mind you lose things like generics and Linq. 
Yeah, I hope you get an HTML UI too! It is the future, after all... Good luck!
So does core still use the model view controller approach? What’s the difference between both?
Core extends MVC with additional design patterns like IOC, dependency injection, and service-oriented support.
Surprisingly, I've heard Java is still used quite a bit in the embedded world and unfortunately, I've seen JavaScript used on micro-controllers
I've seen it on a lot of ports from Java libraries. I almost shot myself trying to figure out an obscure bug with Commons.Logging for .NET the other week.
It depends on what you want to build. Lats time I tried Netduino it seemed like it wasn't well supported anymore, and it's about twice the price of a Raspberry Pi. I've done quite a bit with a UWP app on Raspberry Pi and Win10 IOT. You can build some pretty powerful stuff with a GUI, network access, etc and you get all the power of C#. I built a device that controlled a stepper motor, gathered input from limit switches, and served up it's own web server for controlling the device. As a C# developer by day, the Raspberry Pi really appealed to me because I enjoy working in C# and my project was complex enough to warrant it. There's some effort involved in getting the Pi set up and learning how to get an app running on it, but it's not bad and Microsoft has good getting started information. (see [www.windowsondevices.com](http://www.windowsondevices.com) ) That being said, you can learn a lot by going more low-level with things like arduino. I don't normally program in C, but the learning curve isn't too bad if you already work with C#. If you're interested in more network-connected devices, you might also like the Particle Photon. I've been playing with one lately and it's kind of fun. You write fast low-level C, but you also get built-in functions for doing things on the web like publishing events.
guess it has to do with people being afraid of the low level stuff. so they rather take the performance hit cause its probably enough for their use case. most MCUs that run managed languages are also a bit beefier than the atmega328. for example the esp32. but if you want to get the best performance out of the device c/c++ is the way to go (yes assembly is also an option sometimes, but only madmen write the whole controller program in assembly)
I write WinForm applications all the time. Anytime you see me publish a screenshot of software I made, it’s WinForms. WinForms is great because it’s very light weight, barely leaves a foot foot print memory, and has had a decade of battle testing making it stable and the most functional.
I agree with this assessment. I programmed a Netduino when they first came out and was (not entirely, but a little) surprised that the overhead of the .NET framework just gobbled up memory. Even though the .NET Microframework didn't support Generics, it was still very "heavy". This was 7 years ago now, so I don't know if they've somehow managed to improve the memory usage situation, but I'm guessing not as much as just writing in C instead.
ASM is not too bad on microcontrollers compared to an x86 program. I use `Atmel Studio` and they have a good debugger/simulator to use and all the symbols pre-loaded so you can run the code there before uploading it to actual hardware. I've been doing more C these days though, because AVR ASM has no `DIV` and a few other annoying quirks that I would rather not spend a lot of time dealing with.
IMHO, the challenge remains that Windows 7 is still in it's extended support window: Until all Windows PCs are able to run UWP apps, it's not going to make sense for a lot of developers to make them versus legacy apps. And until major developers are making UWP apps, the Store won't be the go-to for users.
What I was saying had nothing to do with a suggestion for OP, he should definitely use C\C++ and not C#, and definitely not ASM. If you've spent a lot of time with ASM it gets much easier. But I agree with you, C makes a lot of things easier.
You can. Since this add-on is basically AtmelStudio for VS2017: as you can see on their [website] (www.visualmicro.com)
Oh, oh, oh. I know. I was never really expecting it to be super efficient, but dang, it was really quite bad in the beginning. (Not sure how badly it consumes memory now.)
Actually, I think I read it on Reddit and stackoverflow..
No, I keep projects in their own folders, with appropriate subfolders. Just not "src".
My experience has been with .net core 2.0 and the raspberry pi using raspbian. It works great, but I did have to setup scripts to auto push publishes to the pi and you can't live debug the code. I did hear that there were some plugins to help with live debugging but never dove into them.
Thanks, ant. Good ideas! **Titles** Added \[issue #7\]\([https://github.com/lesarde\-co/frogui/issues/7](https://github.com/lesarde-co/frogui/issues/7)\). **Pixel\-Perfect** Added \[issue #6\]\([https://github.com/lesarde\-co/frogui/issues/6](https://github.com/lesarde-co/frogui/issues/7)\). **Contributing** I appreciate your offer to get involved. If you \(or anyone\) would like to start on issue #6, which is to port \[Gui.cs\]\([https://github.com/migueldeicaza/gui.cs](https://github.com/migueldeicaza/gui.cs)\) to frogui, I'll make improving the console for code compatibility and pixel perfection a high\-priority. Cheers, t
You can check out what Microsoft is building with Azure Sphere. I don't know what the programming language is gonna be, but could be C#. [https://www.youtube.com/watch?v=YVgBplMOLu0](https://www.youtube.com/watch?v=YVgBplMOLu0)
Write a stored procedure to do your search. You won't have to do all that property mapping and the search is guaranteed to happen on the server (the query can be optimized - EF's queries are usually .. not optimal). 
Still not solved. Edited with update
I'm surprised and pleased that they are moving to Core on the desktop- this seems to suggest that the whole framework will eventually be moving to Core
Just in case one of the team sees this. You've course corrected in a way that I admire. It's exactly what I try to inspire teams around me to do, and to be fair I don't have a tenth of the technical pressure that you endure in terms of conflict. You've done well. Kudos. Let's never speak of this again so I can berate you later ;p (outside of the) team hugs all, seriously good work. 
&gt; It’s the C# code in Windows Forms and WPF that we’ll include as a set of libraries with .NET Core 3. Windows functionality, like GDI Plus and DirectX, will remain in Windows. Does this mean cross platform wpf/winforms?
Thanks, very helpful!
Don’t get me wrong I know low level languages fine. Cut my teeth on 68000 assembler back in the day but there is a specific reason why using C# is a specific client orientated factor in this project. The code will need to be maintained post my work and they simply don’t have the time or resources to up skill a dev team with low level language skills.
No (the answer is in your quote). GDI and DirectX are Windows tech, and will remain Windows only. 
Okay might be worth a little more context The client is building a “phone home device” that will connect to green energy solutions. It could be solar on one installation, wind on another etc. The device will need to call back to a central WCF service via WiFi, GPRS, or 4G and detail any faults, daily statistics and/or meter readings. On top of this they want to integrate an iBeacon for local engineers to grab remote meter readings so they don’t have to go and get ladders etc
They also state c# code for forms and wpf will be included. That to me suggests a separation of the windows specific api's since they say "Windows functionality, like" will remain windows.
You can throw out wherever you heard it from. It's definitely not a bad practice. Let's see how I've set up [my stuff](https://github.com/CreateAndFake/CreateAndFake): * artifacts (everything automatically generated and ignored by git) * build * docs * src * tests * .gitignore * .travis.yml * *.sln * license.txt * Nuget.config * readme.md That's already a very crowded parent folder without having a bunch of individual projects littering the top level. The thing about having a src and tests folder, is that in each one I have a Directory.Build.props and *.ruleset file that applies to each project respectfully, as well. If you have a very small solution with few projects, having a project folder at root might appear fine. But anything that starts having a couple projects in the solution, and you start to have a mess. I have a Xamarin project that requires 4 projects, which would be 8 projects including the test projects. Having 8 projects at the top level would be a nightmare, and then add to that I can't have my .props and .ruleset for them as well. With my way, if I had to add a project to my solution, then nothing on my top level would change. It still remains nice, neat, and easily navigateable. I'm not just saying it's not a bad practice, I'm highly recommending it.
This might help a bit: https://mspoweruser.com/its-official-700-million-pcs-are-running-windows-10-microsoft-increase-developer-revenue-share-to-95/
How do I install this? Or is it part of visual studio 2018\+?
No, Core is sufficiently different for many things not to make sense. Fundamentals, mostly, but still. .net configuration? Gimme Core any day! .net trace sources and stuff? No thanks! We will instead get a Core rewrite od everything , eventually - and I don't see why that would be called "Core", but I don't care at all.
&gt; Major thanks to Samsung and Qualcomm for investing heavily on .NET Core ARM32 and ARM64 implementations. Please thank them, too! These contributions speak to the value of open-source. and &gt; The .NET Core Brotli implementation is based around the c code provided by Google at google/brotli. Thanks, Google! are nice to see.
Don't downvote the dude for asking a question...
Doesn't mean they can't implement vulkan or something for rendering on non windows systems, and use directx for windows.
Read the third sentence of the linked article...
Not a fan of this idea. Why muddy the waters? .NET Core is/or should be the cross platform .NET Grr.
It's not too bad on microcontrollers. It's fairly memory efficient. Not as fast as other "Micro" language implementations \(e.g. MicroPython\) though.
It's some machine learning, as such it seems to improve over time, but what about privacy concerns? Is the data shared with some server? If so, this tool is automatically useless for a huge percentage of the industry, as nobody will allow to share code or track and send off every input.
But it doesn’t make any sense to share a reference. To do that, you’d need to refer to the shared reference somehow, which would be by using a reference, getting you nowhere.
That sentence isn't saying that they're separating WPF/WinForms to be independent from Windows, but rather that the WPF/WinForms code they're releasing is incomplete without Windows-specific APIs.
Same with all the Microsoft Graph features shown at BUILD. Most companys wouldnt allow this type of content/data sharing.
PI, Computer, MS-DOS 3.3... the only things I understood reading your comment. I am so new to hardware programming it’s not even funny. I feel bad. Haha
While I'm curious about your concerns, it does seem like the data they are gathering is from open source projects, not necessarily what people are typing into their editor: https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.VSIntelliCode &gt; Contextual recommendations are based on the best practices developed in over 2,000 open-source C# codebases (with 100+ stars). This is also echoed by their FAQ: https://docs.microsoft.com/en-us/visualstudio/ide/not-in-toc/intellicode-faq#q-what-makes-ai-assisted-intellisense-powered-by-intellicode-better-than-regular-intellisense I don't see anything that suggests they are sharing what you're typing with a third party server.
VS Clippy :P
Ya, I've seen it especially with nuget packages that have long names and versions, it is like PackageName - Version\obj\lib\x86\PackageName - Version\lib\... If you already have your nuget directory at a lower level this seems to happen quite a bit.
Why not? The article explicitly provides the answer, which means "the dude" couldn't be bothered to read it.
It’s an extension :/
If you use NAudio, there is a simple way. Each device has a 'number' when it enumerates all audio devices upon initialization. So you can access it through methods, and assign a very specific device on playback. I found an example of how it works on a SO: https://stackoverflow.com/a/5869019
^- This. For your type of query, it is more suited to allowing the database itself do all data manipulation and checks. That's what databases are for, so it's better to allow a specialized system handle very specific tasks.
How's latency with this tool? Visual Studio 2017 has already had some responsiveness issues with typing, is this better or worse?
Config and logging are just implementation details. You never had to use the built in framework stuff. In fact many people didnt as there were countless nuget packages out there doing things differently already. You can even use the "core" logging and config stuff on the full framework right now as theyre just .net standard packages. The fundamentals did get rewritten but it does seem like the plan is to recompile as much of the full framework into core. Even if it isn't going to be cross-platform. It makes sense to be able to port the whole framework over to core as most tooling going forward will support core better. VS code for example doesn't work well at all without the new SDK csproj format
I said *something like*. Why am I being downvoted?
Okay, I get I may not have a popular view, but why am I being downvoted so hard?
This will not be added to core but instead be stand-alone OS specific. Here's a quote from Rich Lander in the comments of the article: &gt;‘Support for Windows desktop will be added as a set of “Windows Desktop Packs”, which will only work on Windows. .NET Core isn’t changing architecturally with this new version. We’ll continue to offer a great cross-platform product, focused on the cloud.’ WPF, for example, isn’t being adding to the .NET Core runtime directly. It will be available as an add-on. That’s the “desktop pack” idea. The product is already layered and will remain layered. We think this plan is the best of everything we offer: – Small base runtime that is cross-platform. – ASP.NET Core, for example, is a cross-platform component that layers on top of the .NET Core runtime. – We also offer packages that are operating-specific, such as the Windows Compat Pack[1]. WPF will be like that. On Linux or macOS, we will also offer OS-specific APIs, like daemons or specific crypto. 
OK I see your point. I haven't used it myself, but I always thought it is powering spotify, slack etc. so I \(perhaps wrongly\) assumed it might be okay. Electron was just an example, my point was to get cross platform UIs.
TBH I think this is cool but I'm always wary of 'AI' solutions (basically data-driven decision making in this case from what I can tell... Is that really AI?). I never understood why intellisense couldn't make somewhat smarter suggestions just based on context. Why do we need AI to guess that a `Length` property is probably a good fit for a `length` parameter? Also just simple matching of types would go a long way (e.g. match the required parameter type first, related types second, similar names third, etc.). Nonetheless, this is cool.
&gt; I always thought it is powering spotify, slack etc It does, and as a result my work chat uses the better part of 1GB of ram to sit idle 90% of the time.
This will not be added to core but instead be stand-alone OS specific. Here's a quote from Rich Lander in the comments of the article: &gt;‘Support for Windows desktop will be added as a set of “Windows Desktop Packs”, which will only work on Windows. .NET Core isn’t changing architecturally with this new version. We’ll continue to offer a great cross-platform product, focused on the cloud.’ &gt; &gt;WPF, for example, isn’t being adding to the .NET Core runtime directly. It will be available as an add-on. That’s the “desktop pack” idea. The product is already layered and will remain layered. &gt; &gt;We think this plan is the best of everything we offer: &gt; * Small base runtime that is cross-platform. * ASP.NET Core, for example, is a cross-platform component that layers on top of the .NET Core runtime. * We also offer packages that are operating-specific, such as the Windows Compat Pack[1]. WPF will be like that. On Linux or macOS, we will also offer OS-specific APIs, like daemons or specific crypto. 
I've played around with the stuff by GHI but looking at their site, they seem to now have a limited selection of boards. I think I had used one of the boards with my 2017 setup several months back...but it was an older board from a few years back.
Well, that's disappointing. Mostly just Windows and Windows 10 exclusive stuff and a few performance improvements. In the comments they even confirm that they have no plans for a cross-platform UI.
Hey! It looks like you're trying to write a function!
I remember when intellisense would use freequency of usage to determine what to show first after the the. We used a lot of calls to .DataSource followed by .DataBind(); it would always suggest the last used one which was always wrong. 
You can speed up the lookup with a hash table, much faster than `FirstOrDefault`.
Do you want to make this function recursive?
Looking for a freelance consultant for some Crystal Reports work. PM me if Crystal Reports is in your wheelhouse.
&gt; Once EF Full works on Core, why even continue with EF Core? Because EF 6 is not cross-platform.
Neat, didn't see the FAQ. Well companies don't like sharing their source code with third-party for more or less obvious reasons.
I dislike this. Despite their assurances, this will slow down the development of .NET Core for web and it isn't even a cross platform solution.
Will probably do the opposite as all efforts will be focused on Core rather than split between Framework and Core? Also the compat testing/assurances for Core can be lower as it allows side-by-side install. (Rather than the machine-wide upgrade)
That looks neat, does it allow the use of AVR C/C++ without using the arduino library? 
Use a better ORM? Entity Framework will give you a list of parents each with a list of that record's children. But more seriously, what ORM are you actually using? Each one has different APIs and features that could help. In the end, you shouldn't have to do this. Your ORM should be doing this for you. The thing you need to figure out is what tools your ORM allows you to use to accomplish this.
Its only on the left in the diagram, but it does say "cross plat"
They test and release versions of .NET core together with the supplimental projects (aspnet, ef, and signalr for example). They also refactor code in the codebase to take advantage of new language features (e.g. Span&lt;&gt; ). This greatly increases the surface area and complexity of .NET core releases.
Easy, MS-DOS 3.3 was the first really usable version of MS-DOS, with support for directories. PCW 1512 was this little machine over [here](http://www.old-computers.com/museum/computer.asp?c=183), you can see it in action over at [youtube](https://www.youtube.com/watch?v=yPyZdQoUTNM). So lots of nice capabilities with 512KB, where you already could use high level languages like Basic, C, Pascal, Lisp, Forth, Modula-2. Of course games and video related stuff still required pure Assembly programming. The [ESP32](https://www.espressif.com/en/products/hardware/esp32/overview) has the same amount of RAM (512KB), but it is a dual core, with networking and wireless chipsets. So plenty of juice with high level languages that can fit into anybody's pocket.
I am writing the ORM.
&gt;Why muddy the waters? This lets me deploy my WinForms/WPF stuff to customers without waiting for their IT departments to upgrade their .NET Framework (or nagging them about it). I simply ship the dependencies I need. Which in turn means Microsoft can eventually stop maintaining .NET Framework altogether.
&gt;This greatly increases the surface area and complexity of .NET core releases. This isn't part of a .NET Core release, but part of a separate package. Sure, it increases the overall load of work, but it eventually frees them from having to do that work on the .NET Framework side.
&gt; Will probably do the opposite as all efforts will be focused on Core rather than split between Framework and Core? If that is the case, then why did they announce it together with plans for .NET Framework 4.8? Do you mean they might stop making .NET Framework after 4.8? &gt; Also the compat testing/assurances for Core can be lower as it allows side-by-side install. (Rather than the machine-wide upgrade) Making desktop testing easier at the cost of making the .NET Core product bigger and potentially harder to release doesn't feel like a success for me as a web developer, unless there is an assurance that .NET Framework is eventually going to be deprecated.
You don't think they will plan, test, and release the desktop packs in parallel with .NET Core releases like they do with ASP.NET Core, EF, and SignalR? &gt; eventually frees them from having to do that work on the .NET Framework side They haven't announced any plans to retire .NET Framework.
Yeah that’s where I have been leaning towards. Interesting comments on the thread as well. Would love to just drop it down to a low level build though would keep in work for years lol and would more than likely work much better than an interpreted platform
Rather than building a unique list of the parents, you should build a dictionary from the parentId to the unique parent and then use each child's ParentID to access the record in the parents' dictionary associated with that child. The main performance issue here is that you're enumerating the whole parent collection for each child; avoid using the IEnumerable interfaces on your collections as much as possible, since a FirstOrDefault call is the equivalent of a table scan in SQL.
if youre using a pi and dont do any heavy computations you will probably not run into any issues with c#. and there is always p/invoke 
Top level folders in our projects are `src`, `test` and sometimes `doc`. We haven't yet moved our artifacts out of the `src` folder, but that's a really good idea.
&gt; You don't think they will plan, test, and release the desktop packs in parallel with .NET Core releases like they do with ASP.NET Core, EF, and SignalR? Possibly, sure. &gt;They haven't announced any plans to retire .NET Framework. They have not. But this makes sense as an early step in that direction. And while .NET Framework is still getting some updates, the big new stuff hasn't been happening to it in years. Heck, they themselves are selling .NET Core as being a better runtime for Desktop: &gt;Performance improvements and other runtime updates that will delight your users
So dotnet core which is crossplatform, will have windows only features. Doesn't that defeat the cross platform bit??
It isn't. It's probably a mistake.
https://www.nuget.org/packages/NAudio So Install-Package NAudio -Version 1.8.4 And then you can add: using NAudio; and continue.
I don't really see what values libraries like this add. The main problem is that without actual language support for patterns and unions, the compiler cannot understand the completeness of the patterns. This can lead to bugs from unhandled cases, as well as lots of compiler errors about unassigned variables or missing return values, which then require more convoluted code structure to fix. Also, even though it's trying to emulate the concise F# syntax, the final result ( `(n =&gt; n == 0, _ =&gt; "Zero"),`) is an inconvenient mess in my opinion.
... multiple Windows platforms :P
Thanks again. I'll work on it for a couple hours and see what I come up with.
&gt; They haven't announced any plans to retire .NET Framework. This is the first announcement I've seen that makes it seem to me that they (.Core) are on a path that could include the eventual replacement of the .Net Framework. 
Doe the database needs to be local or some global database for more applications? If only one application uses the database you can choose SQL light
&gt; They have not. But this makes sense as an early step in that direction. And while .NET Framework is still getting some updates, the big new stuff hasn't been happening to it in years It seems like they are spending a lot of resources on .Core rather than .Net so it makes sense that not much is happening.
So is there eventually going to be a cross platform UI that works on every OS?
Ofc I've rebooted :-) Will try this tomorrow. Thanks.
Just the one;local. It would be for personal use, not really to share or link other users information together. It's for a project for school. Our teacher gave us a list of requirements for a final project and pretty much said "figure it out lol." So, would I create it in SQL then link or can I create an SQL database within the program? Like, when a it's started for the first time, it will create it's own database the first time it needs to write something to it?
Does anyone have a link to the new span based crypto packages? I can't seem to find any more information on them. Thanks!
That's my point. Runtime improvements, for example, are almost exclusively happening in Core now, not in Framework.
Removed: Rule 4. You'll need to dive in and check out local databases, as suggested, perhaps SQLite. If you don't need a full-blown database proper, you can read/write a text file with the data you want, or use JSON or XML serialization of a list of lap records stored in a file.
This isn't a port of WinForms or WPF (which involve a lot of reworking — such as, say, replacing DirectX dependencies with Vulkan). It's a mixture of improvements to .NET Core and adjustments to WinForms and WPF to make those work without relying on .NET Framework.
&gt;Electron may be bloated and slow but in the many years it has existed nothing has come out to challenge it. Not sure what that even means. Electron competes with plenty of other application stacks. Cocoa, WPF, UWP, web apps, Xamarin Forms, …
SOLVED