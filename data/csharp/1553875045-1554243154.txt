Thanks for the advice.
Worth noting that using the proper handling is also **significantly** faster than try/catch methods. When I was fairly green and, maybe, 10 years ago now (?) I wrapped stuff in a try/catch during a migration from one ancient system (SQL Server 2k, if I remember right) to a newer one (2008?) and it took *hours*. Swapping to TryParse on everything made it WAY faster. I'm not sure if if(!String.IsNullOrEmpty(myVar)) Int32.Parse() is faster than TryParse though.
Most important question: Can **you** connect with smtper.net using the same properties listed in your source code? Maybe their support is using the correct properties to connect while you are not. For example, maybe your host doesn't use the standard port 25, or maybe they require SSL. It you can send a test email through smtper, then... * It could be a firewall or proxy issue on your end. * Try removing the DeliveryFormat and DeliveryMethod properties * Try increasing your timeout. .NET's default is 100 seconds, so you are actually decreasing the default significantly.
Yup, you are definitely correct. I haven't seen that.
Seems like it depends on whether you want null values to be converted to 0 :)
What are these buttons connecting to? Does each have its own ViewModel with he button text and the command to run? If so, I would try to use a [ItemsControl styled with a DataTemplate](https://docs.microsoft.com/en-us/dotnet/framework/wpf/data/data-templating-overview#styling-and-templating-an-itemscontrol). You would write the button once as the DataTemplate, and have a Grid with the required number of rows and columns set in the ItemsPanelTemplate.
If you really want a null value to resolve to zero, you could have a special case for it like int intValue = string.IsNullOrEmpty(stringValue) ? 0 : int.Parse(stringValue); Although I'm going to have to agree with the others that `int.TryParse` is the best option. int intValue; if (!int.TryParse(stringValue, out intValue)) intValue = 0; I think the best part about using `Parse`/`TryParse` over `Convert.ToInt32` is that you can pass a `System.Globalization.NumberStyles` to control how you want the string parsed, for example you can disallow negative numbers, permit thousands separators, or parse the string as hex instead of decimal.
 public partial class MainWindow : Window, INotifyPropertyChanged { public int C { get; set; } public int R { get; set; } public MainWindow() { InitializeComponent(); DataContext = this; } private void Grid_TextChanged(object sender, TextChangedEventArgs e) { Matrix.Children.Clear(); int amount = C * R; foreach (var b in Enumerable.Range(1, amount).Select(i =&gt; new Button() { Content = i })) { Matrix.Children.Add(b); } } } XAML &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:DockingApp" xmlns:m="http://metro.mahapps.com/winfx/xaml/controls" x:Class="DockingApp.MainWindow" mc:Ignorable="d" Title="MainWindow" Height="450" Width="800"&gt; &lt;Grid TextBoxBase.TextChanged="Grid_TextChanged"&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="293*" /&gt; &lt;RowDefinition Height="126*" /&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="371*" /&gt; &lt;ColumnDefinition Width="421*" /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Border Margin="5" BorderBrush="Black" BorderThickness="1"&gt; &lt;UniformGrid x:Name="Matrix" Columns="{Binding Text, ElementName=Columns}" Rows="{Binding Text, ElementName=Rows}" /&gt; &lt;/Border&gt; &lt;Grid Grid.Row="1" Margin="5"&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto" /&gt; &lt;RowDefinition Height="Auto" /&gt; &lt;RowDefinition /&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="Auto" /&gt; &lt;ColumnDefinition /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;TextBox x:Name="Columns" TextWrapping="Wrap" Text="{Binding C, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Margin="3,3,1,3" /&gt; &lt;TextBox x:Name="Rows" Grid.Row="1" TextWrapping="Wrap" Text="{Binding R, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Margin="3,3,1,3" /&gt; &lt;TextBlock Grid.Row="0" Text="Columns:" HorizontalAlignment="Right" VerticalAlignment="Center" /&gt; &lt;TextBlock Grid.Row="1" Text="Rows:" HorizontalAlignment="Right" VerticalAlignment="Center" /&gt; &lt;/Grid&gt; &lt;/Grid&gt; &lt;/Window&gt;
Do you have free time later today or this weekend? Maybe we could connect and I'll help you out? I'm in EST time
Anything can be made into spaghetti, but if you organize it properly, managing the dependencies is way easier This is a recent publication and, I think, a good resource if you're interested https://www.manning.com/books/dependency-injection-principles-practices-patterns 
UniformGrid? public partial class MainWindow : Window { public ObservableCollection&lt;int&gt; Items { get; } = new ObservableCollection&lt;int&gt;(); private int c; public int C { get =&gt; c; set { c = value; OnCRChanged(); } } private int r; public int R { get =&gt; r; set { r = value; OnCRChanged(); } } private void OnCRChanged() { Items.Clear(); foreach (var i in Enumerable.Range(1, C * R)) Items.Add(i); } public MainWindow() { InitializeComponent(); DataContext = this; } } XAML &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:WpfApp1" xmlns:m="http://metro.mahapps.com/winfx/xaml/controls" x:Class="WpfApp1.MainWindow" mc:Ignorable="d" Title="MainWindow" Height="450" Width="800"&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="293*" /&gt; &lt;RowDefinition Height="126*" /&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="371*" /&gt; &lt;ColumnDefinition Width="421*" /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Border BorderBrush="Black" BorderThickness="1" Margin="5"&gt; &lt;ItemsControl ItemsSource="{Binding Items}"&gt; &lt;ItemsControl.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Button Content="{Binding}" /&gt; &lt;/DataTemplate&gt; &lt;/ItemsControl.ItemTemplate&gt; &lt;ItemsControl.ItemsPanel&gt; &lt;ItemsPanelTemplate&gt; &lt;UniformGrid Columns="{Binding Text, ElementName=Columns}" Rows="{Binding Text, ElementName=Rows}" /&gt; &lt;/ItemsPanelTemplate&gt; &lt;/ItemsControl.ItemsPanel&gt; &lt;/ItemsControl&gt; &lt;/Border&gt; &lt;Grid Grid.Row="1" Margin="5"&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto" /&gt; &lt;RowDefinition Height="Auto" /&gt; &lt;RowDefinition /&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="Auto" /&gt; &lt;ColumnDefinition /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;TextBox x:Name="Columns" TextWrapping="Wrap" Text="{Binding C, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Margin="3,3,1,3" /&gt; &lt;TextBox x:Name="Rows" Grid.Row="1" TextWrapping="Wrap" Text="{Binding R, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Margin="3,3,1,3" /&gt; &lt;TextBlock Grid.Row="0" Text="Columns:" HorizontalAlignment="Right" VerticalAlignment="Center" /&gt; &lt;TextBlock Grid.Row="1" Text="Rows:" HorizontalAlignment="Right" VerticalAlignment="Center" /&gt; &lt;/Grid&gt; &lt;/Grid&gt; &lt;/Window&gt;
&gt; returning 0 for null is horrible behavior. Never use Convert.ToInt32. Not always, it depends on the requirements. There are plenty of cases where you would want it to default to 0 if no value was provided. For these cases it is probably still better to use int.Parse or int.TryParse, but that sort of behavior is only horrible if you require a valid input.
According to this thread I was taught wrong. I was always told that using methods with an "out" was bad practice as it was anti-pattern for c# in that a method sneakily returns multiple variables instead of arguments going in and a single object coming out. I was told that full try-catch handling was the proper way to do it. Could someone explain what's so bad about proper exception handling?
The common mindset that using a lot of memory is bad really gets to me sometimes. Maybe back in early 2000 when you only had 2gb of ram it mattered. But now days the average machine has 8gb on a minimum and in some cases 64gb. My development machine has 32 GB of ram.... Memory is astronomically faster than mechanical drives, even SSD's, so you want to use as much of it as you possibly can. Empty RAM is wasted RAM... If you're not using it you're not getting it's performance benefits. There's literally no reason to force your computer to have free RAM unless you're out of RAM and it's 100% occupied. It's kind of like having a house with 8 rooms, and you have 3 rooms you're not using, but because the 4th room has stuff in it, you start throwing stuff out because it's taking up space, some of that stuff is stuff you need... But you still have 3 rooms you're not using, so wth are you throwing out stuff you might need from the 4th room?
Interesting, though that was here (https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-fields) but it says for example this: "Internal and private fields are not covered by guidelines" my bad 
&gt;It's exactly the output of google translator.
The last version that added something I care about (basic SIMD support) was 4.6. But 4.6 has some bugs, which were only fixed in 4.6.1. It's also a good idea to use the lowest version you need. That way less people have to manually download and install the latest .NET Framework before running your software.
Exceptions are incredibly slow. If possible, they should really only happen in erroneous circumstances; your program flow really should not be designed around them, as they should be avoided when possible. Also, while many believe that `out` is an antipattern, a lot of those people believe that the `Try(out value)` pattern is the exception to that rule, as it is incredibly fast, and easy to read.
&gt; Imagine you have a method that calls some external service using web or http client. How do you test it Why would I test glue code? If it isn't glue code then I don't really "depend" on any code except maybe standard things like an iterator or dictionary.
That's a poor reason to choose Convert.ToInt32
You were taught wrong. Usually out parameters are bad practice, but this is one of the good use cases (until C# gets proper pattern matching). Using exceptions for this is **very** wrong. You should not use exceptions for control flow, you should use them for exceptional cases. Invalid user input is a common and expected case. And throwing exceptions is slow.
&gt; Exceptions are incredibly slow. Do you mean throwing an exception (constructing it and setting the stack trace property etc.) or the overhead of the try-catch itself?
Yeah, you are right. Seems like there is no good reason to use Conver.ToInt32
Throwing.
The `try-catch` statement has almost no overhead, but once an exception is thrown, the program slows to a crawl.
I had the most fun reverse engineering video games and making bots. Basically I figured out how to use all the Windows Debugging Functions: * [https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-readprocessmemory](https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-readprocessmemory) I designed a windows desktop app in c# on WinForms that had tools to let me look at an applications Random Access Memory. This process started by designing a grid for viewing memory data. The grid was a user control written from scratch that used MeasureTextWidth and a Monospace font to calculate how many double digit Hex Values I could arrange in columns and rows in a view port. The grid was split up into memory addresses, starting from the applications minimum address, to it's max, and used a virtual view port (only looking at certain addresses at a time, not rendering the whole thing). So each cell in the grid was a byte of data in Hexedcimal Format. Then I design a text column on the right side that would show you an ascii view of the bytes on that row and it had other features. I.e. if I highlighted 2 rows I could see different values for those 2 rows (short, float, int) etc. And then I built a struct mapper. So basically I could group values in ram to members of a struct and I could put conditions on it so I could scan for them again next time I need to find them. The tool also had search functionality, so I could search for hp values, mana, and you could search for pointers. and searching for pointers is tricky. I.e say you find your players HP, so you get that memory address, Now, that address is almost always going to be within the address space of the HEAP for that application. So you need to find the pointer to that value in memory. But the HP is likely part of a structure and isn't directly pointed to, so you need to find the start of that structure and get the pointer to that. (Struct map comes in there). And searching for pointers within a range. And sometimes you're dealing with linked lists, and even more complex ways of object structure in memory. But basically, you want to eventually trace a value down to a pointer where the pointer resides within the address space of a loaded file. I.e. Something.Exe, or MainThing.Dll. Knowing that requires knowing the addresses of every module loaded in the process, and you can enumerate those, no big deal there and you need to know their size in Memory so you know where their end address is. You don't need to worry figuring out real physical addresses, windows Virtual Memory Manager takes care of all that for you. I.e. you can have two applications that both load a dll to the same memory address, but they aren't really. The virtual memory manager will load them someplace else, but the windows api will tell you they both have the same address in each process, when in fact they don't. That's all magical stuff windows does for you , no need to worry about it. I recommend building this tool, because doing so teaches you a lot of what you need to know to reverse engineer a game. It's a LOT of fun. I'm not really big on cheaters, but when you build everything yourself and didn't get your cheats from anyone, it feels a lot more epic, like you deserve it... LOL
It's amazing how many people use exceptions as codeflow, just swallowing stuff that didn't let them get through their debug session. Makes otherwise efficient code extremely slow.
Also, the parse methods accept a number styles, so you can also pass NumberStyles.Any
&gt; If possible, they should really only happen in erroneous circumstances; your program flow really should not be designed around them, as they should be avoided when possible. Note that this depends on the language. Some languages are designed to use exceptions for normal flow control (like Java or Python)
My rule of thumb is to avoid `Convert` entirely if at all possible, and never use it for parsing. It's almost never necessary, adds nothing of value to specific parsing implementations, and it includes a few unwise implementation details that can only ever cause bugs or code misunderstandings. Use the specific parsing implementations instead (like int.TryParse or int.Parse, here)
There are no fathomable requirements which would be satisfied by parsing null as zero. Sometimes c code uses 0 as an in-band signal for an error, but that is not the case here because empty strings, whitespace, or, in fact, everything that can not be parsed as a a valid int32 doesn't return 0, but throws a FormatException. This violates tons of .net framework guidelines about dealing with null parameters and with error handling. Just use TryParse. TryParse is superior in any way. The funny thing is that it does exact the same thing when called with null. But this is actually follows an established and easily recognizable Pattern. This means that everyone who has at least some some familiarity with .net immediately recognizes that there is something funky going on because the return value is not checked in any way. Convert.ToInt32 on the other hand is a landmine: Everyone with more than a passing familiarity with .net design guidelines would expect it to throw an ArgumentNullException. The odd behavior around null isn't even mentioned in the &lt;summary&gt; part of the documentation, and thus doesn't show up in Intellisense. It is a relic from .net 1.1. Leave it in the Museum next to the pre-generic System.Collections. 
This page is pretty much unreadable on a mobile device.
Many language features can be abused and lead to code that is just garbage for any number of reasons. With that being said, out parameters being an anti-pattern is just someone's anal retentive personal preference. Maybe they were thinking about one specific use case when they said it, or maybe they actually think that following a list of dogmatic rules is the same as good code, but I always view such statements with skepticism.
Cries in company rules that don’t allow the compiler to use anything above 7 but the IDE suggests features above that
Yes, the server address, port, user, password, and disabled SSL are all the same. I also tried other port like 587, 2525, 465 with and without Secure Connection sometime the error is different: The server actively refused... My email verification part of the website is dependent on this and it's been hours that I'm sruggling with it but no luck.
similarly they have updated the 'is' operator, so that you can do: `if (o is MyObject someBetterObjectName)` `{` `someBetterObjectName.Property1 = ...` `}` &amp;#x200B; Which does the 'is' and the 'as', and the local variable assignment all in one fancy line.
Can you explain when the speed hit occurs? Is it when I try catch, or is it when the exception is caught? The latter suggests I should add try catches at the last possible moment to remove as many exceptions as possible first, the former that I should only try catch low level code.
Looks like I have some reading to do, [MSDN's Exceptions article](https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions) doesn't really help much. Don't you just end up with "if" statements all over the place to check that every method did it's job properly? E.g. public MyClass GetMyClass() { var bla = new MyClass() { Prop = getProp(), Prop2 = getProp2() }; if (bla.Prop == null) return null; if (bla.Prop2 == null) return null; return bla; } Etc.
Use UniformGrid with Columns = 3
Because it takes object I guess?
[You can select the appropriate C# version for your projects](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version).
I recommend you to do everything inside an .NET Standard2.0 library. Use an .NET FullFramework only if it is an desktop app, otherwise always go for .NET Core. Even if it is only desktop, try to put everything inside the standard library, when .Net Core 3 is released you will be able to migrate your code easily just adding another project to target Core 3.0 and run WPF on it. OBS: .NET Core 3.0 will have some optimizations that the fullframework won't get, and it will be able to run windows only features as WPF, Winforms and UWP.
The problem is that it will only allow a major version. Changing away from that will cause builds to fail
I like Scott Hanselman's [thoughts on this](https://www.hanselman.com/blog/GoodExceptionManagementRulesOfThumb.aspx). &gt; throw an exception if your method can't do what it says it can. It is referenced [here](https://www.bennadel.com/blog/2708-exceptions-are-for-exceptional-circumstances-is-not-a-value-add-answer.htm) in regards to advice about exceptions that have no "value-add."
Try to connect using `telnet` / `netcat` (*nix) and upon a successful connection send the following text: "`HELO server-address.com`"
OoO didn't know about that one. That woulda saved me some ugliness recently. Thank you for sharing.
The slowdown happens when the exception is actually thrown. The best way to handle exceptions is to find out why they are thrown, and put checks in your code to make sure they never get thrown in the first place. Then you won't even need a `try-catch` block. Once you determine that an exception will be thrown, you can attempt to take steps to fix the issue. If there's nothing that that method can do to avoid it, you can have that method throw its own exception describing the specific cause of the error. Then, the caller of that method can add in its own checks to make sure that your exception is never thrown, and so on. By the way, there are some types of exceptions, such as `StackOverflowException` or `OutOfMemoryException` that should never be handled. There's really nothing that can be done to fix those issues at runtime, so you should just let the exception end the program so that it can be debugged. The only time it would ever make sense to catch those exceptions is so that you can show an error message to the user before the program crashes.
Yeah I'm not sure it's ever the right thing to use. Over 15 years working primarily in .Net and I can't recall an scenario where I'd have chosen that. I see it used often to convert floating point to integer types, but same as your suggestion that's relying on the particular rounding behavior. It's unclear, and if you want a specific rounding method you should call a specific rounding function, and then at that point you can just cast the floating point number to an integer. Anytime I've wanted to polymorphically convert values of one type to another type, I need something far more flexible and capable than Convert - often TypeConverter and some helpers, or just round-trip serialization through JSON.
Because .net core 3 is not out yet? Even if it was out many applications use external libraries that might not get ported to .net core 3 right away. And sometimes 56kb executable is better than 50mb one. 
Because this is the reality of large projects, database queries, calling other external services, code that's layer s deep. 
http://docs.topshelf-project.com/en/latest/configuration/quickstart.html
Out params are difficult to mock when methods return them, but in this case you aren’t going to ever mock TryParse. If anyone has used Moq you’ll understand this pain. 
Oh yeah, looks like I'm fine. Just validate inputs and you're good to go. Phew! The only thing I was doing wrong was refusing to use TryParse.
tryparse it. That way you can catch it when some dumb ass thinks the field named *Amount* means he types "Taco" in the form. . . . 
I didn't say you have to. But if you want to run your projects on Linux, then you have to. Docker containers on Windows gave us a lot of problems so we are moving towards docker containers on Linux. In general, I have found that. Net core let you do the same things in more elegant ways. 
Create a class that implements IIdentityMessageService Look at the part of the page with the heading "*Set up email confirmation*" In this class you will either wire up a service to send the emails (like they used SendGrid) or use an SMTP server to send them. &amp;#x200B; &amp;#x200B;
It really depends on a ton of factors honestly. If you’re worried about a property being null or you’re only going to use it in one way, you can always put some logic in the setter. I think there’s some non-nullable stuff introduced in the latest versions of C#, or you can also throw exceptions if you try to set a null member. With those safeguards, you can keep the accessing code cleaner without having to check everything. But definitely don’t dogmatically follow that advice, it was made in a vacuum - see if it makes sense in the context of your code. Maybe there’s a better way to handle it or it’s not even needed.
I remember using it when mapping data from a database reader but I am not sure it was the right thing. I just saw it from a senior dev and never thought about it. Certainly Parse wouldn't do it there, probably whatever the datarow indexer returns implements IConvertible?
none of these. use `Int32.Parse` instead
&gt; I am not sure if it would be better to us an array or a list in the situation. Lists can grow as you add items to them. Arrays are for when you know in advance how many items you'll need (you *can* change the size of an array, but once you start doing that, you should question why you're not using a list). So in this case, the answer depends on how items get added to this shopping basket - do you know, before you create the shopping basket, how many items will be in it? &gt; I figured you would be able to do it with a list but I do not know how to make a string list that will also keep totals for items and allow taxes to be calculated as each item is selected The correct way to do this would be to use classes. Do you know about classes? You would create a class called something like BasketItem. Each BasketItem will contain the name of the item, the price, the tax, etc. It can also include methods which will do calculations such as working out the tax. Then, you would create a list of basket items as the basket: `List&lt;BasketItem&gt;`. On the other hand, if you don't know about classes yet, then create more than one list - one for names, one for price, one for tax, etc. That's not the best way of doing things, but it's a way of getting it to work using the techniques you already know about. &gt; I thought that maybe a 2D array would be useful here Items in a 2D array all have the same data type - so you'd create a 2D array that can only contain strings, and that wouldn't be able to store prices or tax. So no, that won't work here.
Places that I worked at had 1M lines of code (although maybe half was JS/html). I disagree. It doesn't seem to get thicker, it seems like there's just more crap added near the first layer that does it own thing. IE dozens of microservices and poorly written pages on webservers. Some are hosted on another physical server because it's scary to change dependencies on the main. It's wider, not really layers on top of layers
I am just a junior and I'm also learning but since no one else has responded I figured I'd give my 2 cents (maybe more like 1 cent haha). But I would say it defines requirements that are to be included in a class so that it later can be assumed to have those requirements. A class A can access another class B that implements an interface and class A doesnt have to implement that interface. But it can assume that Class B implements the requirements that were agreeded upon when it "signed it's contract" 
I can't take too much credit, I found that nugget doing a code review for a younger dev who actually reads the c# updates. Improved my life for sure though!
may be considered evil: intValue = int.TryParse(stringValue, out int intValue) ? intValue : 0; https://i.imgur.com/K0xOIz6.png 
A class like this one that gets added to the project by default in App\_Start\\IdentityConfig.cs maybe? public class EmailService : IIdentityMessageService { public Task SendAsync(IdentityMessage message) { // Plug in your email service here to send an email. return Task.FromResult(0); } } &amp;#x200B;
I agree. I just haven't gotten around to fixing/switching out the theme.
That's a bit of an understatement. They flat-out ripped off Java for legal and technical reasons. When Java first showed up on the scene, Sun was supporting their own OS (Solaris) but still wanted cross-platform support for Java. So they handed the spec over to Microsoft, IBM, Apple, etc. and had them build their own JVM's to the spec. All of them hopped on-board and did so. They all got lots of complaints from users that Java ran like crap. Since it was their platforms' JVM implementation, they responded like they normally would for any implementation of a standard: fix bugs and clean up performance issues themselves. After all, that's what they'd do for a web browser or an email client. Why would a platform implementation of a runtime be any different? Now, at the time, Apple's "OS" was a thin layer of API's talking directly to hardware. Having no structure to speak of, MacOS (classic, 9 and earlier) could do *whatever* and not have a problem. Apple's response to JVM issues was mostly "tough crap". Likewise, IBM's OS was Unix, so it was perfectly fine with whatever reference implementation Sun provided, since Solaris was also Unix and the two were "close enough" that only minor changes were needed between the two. But Microsoft's OS was strongly structured and structurally *very* different from the Unix systems Java was designed for. This led to lots of Microsoft-specific changes to the JVM, then to the libraries included as "standard" with Microsoft's version. Most of these were ways to convert paths to use different separators or handle the weird conversions of 8.3 filenames for compatibility with FAT file systems or draw Swing and/or AWT windows with GDI+ instead of older GDI routines or slow unaccelerated blitters. But then, developers who were used to Microsoft's near-monopoly on the desktop simply stopped caring that these extensions weren't *standard Java* and began writing software that relied on Microsoft's weird implementation details. Sun sued to get Microsoft to stop developing their JVM, and took it in-house. Windows XP didn't ship with a JVM. And Sun's implementation of the JVM on Windows was a *dog*, performance-wise. By refusing to work with Windows' platform architecture, it had all of the same problems that Microsoft was attempting to work around when they were still making their own. Around the same time, Visual Basic was using the VBRUN series of runtime engines. Microsoft's R&amp;D guys saw immediate parallels between the JVM and VBRUN and began work on a best-of-both-worlds version. The Common Language Runtime. It would support VB for the users and newbies, Java for cross-platform developers, and a C++-replacement language they were yet to fully define for the system programmers. Microsoft hired Anders Hejlsberg (the Delphi guy) to design that C-style language. They twisted VB to fit the new runtime. And they ported their now-legally-defunct not-legally-Java implementation to work on the CLR. Also, Microsoft figured out the internet existed and was the Next Big Thing, but about 5 to 10 years too late to hold on to their monopoly. They tried rolling everything into a ball and calling it .NET, including what is now called "Microsoft Account". (Remember Passport.NET and Windows Live ID?) And thus, .Net as a programming ecosystem was born. (With some inconsequential flotsam and jetsam under the same name for a while.)
Yep. There are times when you need it but I try to avoid it as much as possible.
We have not learned about taxes yet at least. The goal of this app is to call multiply functions under tye main. So i assume id right A separate functions for each list. That does seem a bit much but I supoose inder the main I would just loop each fiction every time an item is added then correct?
r/learncsharp
Soon we’ll just write public App(); and the compiler will know what we mean and add all the business logic for us.
...until Core gets the ability to package the runtime into the application. 
I think what matters is the semantics of what you are doing. You're thinking too much about what the documentation says and not what your code is saying. `int.Parse()` accepts a string and **only** a string. It means you are expecting a string to match some specific number format, and you'd like to interpret that string into an integer type. It will fail if that string doesn't match the numeric type you specify. `Convert.ToInt32()` accepts **anything** and, if it has even the faintest idea of how to convert that thing to an integer, it will do so. You *can* provide the same kind of information about how to parse strings to it, but it's also going to try and convert `double`, `long`, and even arbitrary types like `Random` to an `Int32`. It will fail with most of those. It's not common, but there's an interface a type can implement to make `Convert.ToInt32()` able to convert it to an int! So usually the way we decide which one to use is pretty simple: * If we know our input is always a string, we use `Parse()` or `TryParse()`, depending on how we feel about exceptions. (Too many people say "always use `TryParse()` without asking why.) * If we know our input is some other type that is NOT a string, we use `Convert.ToInt32()`, and prepare for an exception.
I had completely forgot about MS Java. Good old days!
Hi, I just tried to telnet to [myDomain]:25 with ConnectBot Android app and it doesn't connect. Then I used the Fing app to scan open ports on my server and I don't see any 25 or 587! I don't know how smtper.net can connect to it!
I myself have use int.TryParse most often, but I tend to use int.Parse when I either know what I can expect or don't mind that an exception is thrown (else I'd just be throwing another redundant exception when TryParse returns false). Convert.ToInt32 I don't use for strings, but I do use it in some rare occurences for other types.
This seems great until your company goes "we'll just need to design some configurable extensible metadata to tell App what to be, and then it'll create itself" and then accidentally writes a bad homegrown version of .net. 
Make sure you double check thing before you migrate. I have had issues rolling back and adding other migrations to the point where I've had to drop the database and recreate it. Other than that I like them
Just as an aside. The reset password functionality should fail silently. That is to say that even if the user doesn't exist on the database, the message shouldn't disclose it. So it should always say something like 'An email has been sent to your email address to reset your password'. It makes it more difficult for somebody trying out different email addresses on the site in order to find out who is registered. This is what I've read / learned and it makes sense to me. 
did you check to see if the IP address you are connecting from is on a blacklist?
Not to feed the flames but [WCF is trending higher than .net core web api.](https://insights.stackoverflow.com/trends?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=gen-blog&amp;utm_content=blog-link&amp;utm_term=javascript-frameworks&amp;tags=wcf%2Casp.net-core-webapi) WCF is still very relevant in the industry, just not web development. In my case, we're using WCF as the communication interface between a downloadable winforms app and the web server. Why? Because development was *dead simple.* And when your team consists of 4 developers and zero QA people, we take every opportunity to reduce what we write. WCF allowed the team to implement remote execution with *zero* serialization code, just viewmodels on the service. The WCF takes care of the plumbing, and the data is simply returned from the called method on the client. In regards to "isolation of security" i was referring to older alternative approaches where the client itself has access to databases (which I have seen in the wild.. yuck).
So you would do that one instead of doing your is and then check for null? Which is how I usually do it... This way does certainly seem more readable.
It has a Plesk panel and I looked around its setting, nothing suspicious.
yes, this is equivalent to: `MyObject a;` `if (o is MyObject)` `{` `a = o as MyObject;` `}` &amp;#x200B; `if (null != a)` `{` `...` `}` &amp;#x200B; we tend to check for null before the cast, actually, as input parameter validation, but it would be fine inside the first if block. 
Hank you for the advice. I suppose the last point is why it’s bad practice to catch Exception?
You may not have learned about classes yet, but that's no reason you can't use them. Take a look at [this page](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/intro-to-csharp/introduction-to-classes). As /u/LondonPilot said the correct way to do this is with a List that is strongly typed to your basket item class, that is to say that the list will only contain that type of object, like so: var basket = new List&lt;BasketItem&gt;(); Then you can iterate over the List to get the total using `foreach`, or use [Sum](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum?view=netframework-4.7.2#System_Linq_Enumerable_Sum_System_Collections_Generic_IEnumerable_System_Nullable_System_Int32___) to get the sum with a single call. As an aside, you should use integers to track currency, not floats. So, $5.00 USD would be stored as an int value of 500. This is because floats are not always accurate and can lose data. See also [this article](https://culttt.com/2014/05/28/handle-money-currency-web-applications/).
Ugh, just use a few more lines and make it readable.
Correct
I usually do something like... var a = b as MyObject; Then check a for null as I was under the impression that using as gives a null if the cast didn't work or was invalid. I never use is in those circumstances, though if the code earlier is functionally the same it does seem a bit cleaner and more readable as to what exactly is happening.
It's hard to know if your assignment is intended to force you to learn something specific ... But, ideally "products" would be in a database, with Name/Description/Price, and you would pull them from the database, into class objects ... var products = new List&lt;Item&gt;(); You can use ado to pull them in from the database and loop through them ... so for each record returned ... \-make a new Item \-set name/title \-set description \-set price \-add item to list &amp;#x200B; When you have a list in the back-end, spit it out on the front-end. Now, your 'cart' can use real class objects, and you can do your math on the Item.Price
Well, apparently it can't. It seems like you have a networking problem. Maybe a VPN?
&gt; Convert.ToInt32 is more generic to handle other types. I used this just a few hours ago to make getting a numeric from an SQL query much more readable. At first I was going all out with string conversion and parsing and whatnot to finally arrive at an integer, but all of it was super clunky in comparison.
This is what I use most often. You can even do an inline new int like: if (int.TryParse(someString, out bar int theInt)) { //use theInt here... }
That arrival is a good find. Tha ks for the follow up. And yea I suppose as long as I keet the requirement for the assignment all is good.
I think the easiest way is to just store the passwords in plaintext somewhere, and then just email it out. 100% recommend this approach. So KISS.
An array or list will work fine. Without more detail on the assignment it's hard to know if there's a preference. Regardless you effectively have to do some calculation every time you modify the "shopping cart".
One thing that `Convert.ToInt32()` has going for it is the ability to convert an arbitrary-but-compatible value to an `int`. This makes it handy at the edges of your system in places where the schema you're interfacing with is potentially fluid. Like, say, when querying a database. I think it's *generally* better *not* to rely on that sort of thing--especially since it still throws when it *can't* convert the value--but there are times that it's *convenient*, at least.
So you don't have anything better to do on a Friday night than waste someone's time by being an idiot?
No VPN. I'm desperate. I successfully sent an email with the same code with my google account and google smtp configs. It seems to me that the problem is on the server but the support teams keeps telling me the server is OK and they and I both can send email with [smtper.net](https://smtper.net). I really can't figure where is the problem. In the past 24 hours I'm just searching and keep asking on different forums online.
The instructions doesnt specify. Juat simply to write a program and call 2 functions for it. I think I got it thought just have 2 write 2 loops. One for the pricing and one for the items. Then calculate the tax
Sure, but even then, with third-party frameworks to be ported and all, that’s probably be some time.
Oh definitely. But it's been something I've wanted since VB 3 so... well lets say I'm not holding my breath.
Have you tried connecting via telnet from another computer that's not on the same network? Maybe you've been blocked by a firewall.
Literally my life at the moment. If I see another blog that says "Fix the entire codebase upstream to support async" I'm going to throw an exception.
I know Python uses it in iterators, but where does Java use it?
I'd argue that's because try/catch is taught everywhere but Int32.TryParse isn't. TryParse wasn't something I thought to look at *plus* it's not clearly obvious just how slow try/catch is because doing just a handful of them doesn't appear slow. &gt; just swallowing stuff that didn't let them get through their debug session For me, I was migrating from one database to another *and* the data wasn't consistent. As a very simple / trivial example here are the options for sex: null, 0, 1, 2, male, female, m, f, Male, Female. I'm not joking. It was like this all over the place. So as "codeflow" -- the fact that, ultimately, this migration would be done a small handful of times and wouldn't be a party of daily operation isn't a big deal. In fact speeding it up only allowed us to do tests faster. &gt; Makes otherwise efficient code extremely slow, and no way to diagnose odd behavior. Exceptions are a very helpful things. Debuggin tools are amazing.
Out vars are syntactic sugar for that same pattern as far as I'm aware, though they may also restrict usage of the our var to the enclosing scope block.
Microsoft.Extensions.DependencyInjection has no dependency on asp.net core and I use it in console apps
.net core as a runtime does not know and does not care about DI. It's just a nuget package. 
For example, this very same situation! Integer.parseInt in Java throws an exception on failure, there's no tryParse in Java.
out var syntax creates the variable in the same scope that the if statement is in, not inside of the if.
Personally, I see nothing wrong with 20 collections and 10 properties. Especially if that's the primary purpose of the application your building. But in your example, I already see a lot of duplication. However, I also don't see why you need 20+ separate collections. Why not just have a single collection with a list of apps that user has access to? Each item in the list could contain things like the app ID (eg App1, App2 in your example), UserId for that App, etc. And you can use inheritance to create specific fields required by some applications. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
just write your own: int WTF(string input){ int testValue = 0; while(true){ if(input == testValue.toString()){ return testValue;} testValue++; if(testValue == int.MaxValue){ throw new Exception("This isn't a fucking int.")} } } That should do it *claps dust off hands*
Except WCF doesn't have zero serialisation code, it has **a shit load**, it's just not code you personally write. WCF is a full SOAP implementation using CORBA RPC patterns. The number of ways that can go wrong with that even a QA team won't catch is significant. **Especially** if you try to implement any kind of security into the interface, which should. Jesus Christ, it's 2019, serialisation and deserialisation to or from pretty much any format you like is a couple of lines of code. Adding literally thousands of lines of code to your project to avoid a couple of calls is insane. 
I Feel it may just be missing a /s
That is definitely best practice, same goes for authentication failures, you should always return "invalid combination" etc. 
Its available since ancient times, they just add the template.
Nothing wrong with using exceptions as long as 1) you aren't blindly suppressing the exceptions and 2) the exceptions are the exceptional case.
I loved finding this in the code... my old boss referred to them as try/catch/fumbles. int someNumber = 0; try { someNumber = int.Parse(someNumberStr); } catch { }
Try to get up to 4.7.2 if you can. It is backwards compatible and also has full support for .NET Standard which many libraries are moving or have already moved to. If you're starting a brand new solution and the dependencies allow for it you should be using .NET Core instead, since .NET Framework is being sunsetted into maintenance mode.
I believe it's this one [https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/](https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/)
What's the deal with pieces of the NET library that use exceptions for communicating information, like CancellationTokens? Their intended behavior is to throw if a thread is canceled, and then be immediately caught so the calling code can detect between an early cancel and finishing normally. 
Right. Yeah, we use Autofac as well at my workplace. 
Man, I don't even use core. IMO it made many things for difficult that outweigh the benefits. 
If you have: item, quantity, and price then you potentially have 3 pieces of information for each entry in the shopping 'list', right?
You sir deserve a gold star. I've done 10 minutes on chest engine in my life and it was extremely fun, didn't think c# had that many ways to access memory like c++
May using exceptions was the only possible way for them to implement that feature. You should avoid exceptions when you can, but sometimes you have to use them. Also, Microsoft is obsessed with backwards compatibility. Even if there is a better way to implement it, they will never make a breaking change, so we're stuck with that old, possibly wrong design choice.
"[swallowing](https://digitaldrummerj.me/dont-swallow-the-exceptions/)" kinda implicitly mean blindly suppressing. &amp;#x200B;
No disagreement there, I was just adding to your comment.
The new template is based on the [Microsoft.Extensions.Hosting](https://www.nuget.org/packages/Microsoft.Extensions.Hosting) package. The blog post more or less is announcing the addition of the Windows Service lifetime for hosting package.
one that already exists :) https://docs.microsoft.com/en-us/dotnet/api/system.timespan
And it the comments section, the writer says there's ability to do this on Linux. &gt; I plan to do a post about that next, short story is that with something like systemd you create a service config file and it runs fine. But there are a bunch of interesting details to dig into.
yes, i agree , it is more limited than autofac. But good thing is that you can use the mix of them. For example, you can register DbContext and HttpClientFactory with IServiceCollection and other services with Autofac and everything still works.
Duration? Timespan? DateTime? What are you doing? 
It depends on your scenario. you might be working on project, where things like microservices, servicebus etc don't make sense. For us it absolutely does. We have scenarios where there is a huge spike in traffic. and at the same time, we need to send several hundred thousand emails. We use service bus to offload that email sending to other microservice which can scale independent. I worked only at one place where they didn't use Dependency Injection and it was almost impossible to test that code. In my opinion, there is no one right way to do things, it depends on your project what you use.
this is an excellent read for anyone who wants to understand Dependency Injection. 
That's kind of the direction I'm heading/thinking of. I'm wanting to have a dedicated Entity and Controller for the Application because I'll also need that info separate for approvals and for orphaned accounts not yet assigned to an Identity. If I create a simple Application entity that has the Name, Server Info, Url, etc with a collection of UserAccounts holding Id, UserId, Name, and Roles that should provide me with everything I need. I'm using OData so based on that I should be able to query from either direction.
If you're really trying to avoid using classes, you can use a single List&lt;decimal&gt;. If so, you would: 1. Declare the list 2. Declare the tax rate 3. Call a function that fills the list (with 10 'items', but in this case just their prices) 4. iterate through the list (i.e. foreach) and call a function that adds tax to the item. &amp;#x200B; So that will work, but there's a downside. The calling of the tax calculation is considered destructive, since it will permanently change the value in the list. It will work great once, but calling it a second time would add tax to the already taxed item. Again, this is probably filling the requirement for this example, but has little real-world worth. Plus, depending on how the question was phrased, I suspect you're supposed to be using classes. So... if you're using a class, you can store way more information about the item, just like /u/LondonPilot said above. public class BasketItem would have at least 3 properties: * Item name (string) * Item cost * Item tax &amp;#x200B; I'd go a bit further and also have a quantity and an individual cost, so the 'item cost' would be quantity \* individual cost. &amp;#x200B; Then, the steps would be to: 1. Declare the list 2. Declare the tax rate 3. Call a function that creates BasketItems and adds them to the list ([naynay447](https://www.reddit.com/user/naynay447) is right, in the real world this shopping list comes from somewhere, you wouldn't just hardcode a bunch of items to add) 4. Call a function that iterates through the list and calculates the 'item tax' property. &amp;#x200B; And this way is NOT desctructive, you could have it re-calculate the tax on every basket item without affecting the item's cost. I'm sure we'd like to see what you come up with, so you should update us when you think you have an answer. We are doing our best not to just solve this for you. &amp;#x200B;
I'm taking an argument from the command line and converting it into seconds. example: ClearSession --olderThan=1h &lt;-- converting 1h (1 hour) to seconds. s = seconds, m=minutes, h=hours, etc I wrote a function that does it very easy, but I just have no idea what to call the format. 
Interval?
I think you have the right idea, we have not used classes yet the point of the assignment is to be able to call multiply functions in one method. I figured I am supposed to create a list for each aspect of the "shopping list". However, he has expressed that we are allowed to make adjustments to the program as we see fit. So I do plan to learn some about classes. To do it any other way just seems like more work, and not quiet what I want it to be. Also, I did not know the method of just hardcodeing would be destructive so thanks for the heads up on that, it would really be more annoying than it is worth on my end to try and figure that out on my own. I think all in all just learning ahead some is going to be what is best since it will produce a cleaner product.
I wasn't sure if I could code a way a list to call a specific item and instead of saying do you want this item, more of how many do you want. But, I think after reading this I am going to learn how to use classes since the end product would be a lot nicer looking and accomplish the same thing.
https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference
tl;dr, use `^`
Thats the same as int.Parse, just using the object type rsther than the primitive.
A lot of end user isps block port 25 connections unless you are connecting to your isp's mail server, as a spam prevention measure. Connect to the ssl port instead, port 587. You'll need to start an ssl session.
Time unit
UserManager probably gets IIdentityMessageService from the service container. You can't change the fact that its using IIdentityMessageService, so of course you can't change the methods. You can only define an implementation for IIdentityMessageService which will be called by UserManager &amp;#x200B;
What do you mean format? Sounds like you should call the "format" seconds and you should call the function "ConvertToSeconds"
What are you trying to do, bud? Tell us more.
It doesn't, you need to pinvoke into the windows API and use marshalling features. Pinvoke.net is a good resource for that.
You add a line break at the area where you want to know the variable. Use F11 to move line by line, and hover your mouse over the variable to see its value. https://docs.microsoft.com/en-us/visualstudio/debugger/navigating-through-code-with-the-debugger?view=vs-2017
When I was in High School (Canada), we took Turbo Pascal 7.0. Our teacher gave about 6 of us an extra credit project. To learn HTML and do the schools website. There was no HTML / Web Design at that time. By the time I hit grade 11, I finished all the programming course work for Grades 11 and 12. I then wrote a Visual Basic program for my teacher to help him grade the typing tests for students so he didn't have to look up 3 different spreadsheets to figure out the grade. &amp;#x200B; I basically told him, I will write it and I will make a Module for Visual Basic Introduction to submit to the school... but can I take that Borland C++ book as well? &amp;#x200B; I actually threw the book out only 5 years ago, and that is because it got water damaged :( &amp;#x200B; After writing that program I did a few other VB projects, and I don't regret picking it up a little. But yes, Arrays starting at a user-definable index is annoying for someone who switches between two languages.
There's many ways todo this depending on if you want to detect it at design time (in the IDE) or at runtime (via logs, console messages, etc). Or do you mean you want to detect the value and then do some sort of logic based on the value? It's kind of a vague problem statement you're giving us, with many different answers. Try to give us a detailed example of what you need to do, and why you need to do it.
You can also do a char[] search of the string based on position as well, depending on how long the string is. If it's *always* going to be the first position, doing a char[] search will be very fast and very easy to implement.
I have had similar problems. It had to do with the way the mail server expects that the client initiates the connection. There can be a one or more reasons why this initiation fails but our solution to these problems was to not use the default smtp client of. Net and swap it out with the one from mailkit. This is easy enough to do and solves a lot of headaches
The ^ should be the start of string or line character. 
Best answer on almost all of these kinds of questions: it depends on what you want to achieve.
 var a = b as MyObject; if(a != null) { /*do stuff*/ } serves the same purpose as if(a is MyObject) { a = b as MyObject; } if(a != null) { /*do stuff*/ } However, using an `as` after using an `is` is unnecessary, since you could at that point just use a straight cast, since you then know whether or not I can indeed be casted. if(a is MyObject) { a = (MyObject)b; /*do stuff*/ } Combining is/as just adds bloat and an extra unnecessary check. 
It's not just an implementation of a set of methods and properties, though. It's an implementation of those behaviors that must conform to the Liskov Substitution Principle. So it can provide more specified behavior than the contract calls for, but not less. People always nod their heads in agreement when I say this until I point out that it means, as far as OO is concerned, a square is not a type of rectangle, and then they wanna fight. :-)
Looking forward to this! It's not that hard to get things running as a unit, but I'm curious if they're doing anything special / convenient.
&gt;I think there’s some non-nullable stuff introduced in the latest versions of C# Correct, C# 8.0 adds nullable references, that you will have to opt into in your project build settings. They act the same way as nullable value types, in the way that you will have to specify `SomeType?` to be able to assign null values, while `SomeType` can only be assigned non null values. 
I didn't realize your time was so valuable that the one second wasted reading a quip warranted enough anger to comment insults back. My sincerest of apologies, douchebag.
I can tell you're very passionate about this topic, but I do think think it's something to get upset over and insult each other. I like WCF for its simple contract-based data exchange with little configuration and simple deployment, considering the composition of the team (little to no web experience, but solid windows development history). I am nowhere near the scale at which I would see a tangible performance benefit of rest over soap. I do agree that under the hood it could use improvement, and it's something that's looking to be addressed for .net core in the future. I'll take a look at .net cores capabilities and whether a sort of shared interface approach would work. Top things I would look into are how memory streams and datetimes are handled (iirc JSON was picky about dates). Regardless though, let's try to keep discussions positive and not questioning each other's sanities. Let's be respectful to each other. We are all learning and navigating this ever-changing landscape together. The fact that we are having civilized discussions about technology and different approaches in itself proves that we are not insane.
Restart your machine. That'll do it
Threshold, tolerance or cutoff?
And I'm telling you as someone who has **a lot** of web experience that WCF is about as far from simple as you can possibly get. SOAP is a minefield and it will bite you in the ass. It's not about the performance of Rest, it's about the awful hidden complexity of WCF. If you're not ready for core, that's fine, but please, for your sake, especially if your team is week, don't use SOAP. It's **not** simple. 
Yup. Might be an idea to write something like “If the account exists we have sent a password reset email. If you have not received any email within 1 hour please check your spelling” for a better user experience. Lots of people don’t remember what email they used to register or if they even are registered..
You likely just need to fire the onchange event of the fields after filling them out. If you can execute arbitrary JavaScript on the page there are several ways of doing it, depending on the browser and if the page has, say, jQuery available. That said, use Selenium. Don't reinvent the wheel unless you want or need to.
U can try Debug.Writeline(yourVariable). Results will write in output window
Use SendGrid instead, they have a web API.
Replace your ORM with Dapper: https://github.com/StackExchange/Dapper 🙂
I'd recommend Qt/QML. You can use it with [Qml.Net](https://github.com/qmlnet/qmlnet). PS: I'm the author. It's still pre-1.0, but I'd consider it stable. I use it in production embedded devices.
Have you seen my project, [Qml.Net](https://github.com/qmlnet/qmlnet)?
You should really check out [Qml.Net](https://github.com/qmlnet/qmlnet). PS: I'm the author.
*Whoooosh*
I definitely would *not* recommend QtSharp. It didn't serve my needs, and doesn't support QML. I've already mentioned it, but you should really checkout [Qml.Net](https://github.com/qmlnet/qmlnet).
Couldn't you create a second lookup table 'lookup value category' with the different categories needed and filter your lookup table for them when needed? Also why not have multiple lookup tables? 
Rather than 1 Boolean column per piece of functionality, can't you have a column with an integer in it? That way you can do basically the same thing as before but you just need to add a new int value and change front end code for what that value represents
Not available in my country
I might have misunderstood the problem, but move the "booleans" out of the main table into a related table. You have a one to many relationship, the new booleans table has a foreign key to the original table. The original table doesn't need any additional columns to function, you just see what's in the booleans table.
Visual Studio 2013?!
I just contacted my ISP and they confirmed that they block port 25 for their dynamic IP clients (which includes me). Also the 587 port on my server is closed. I used [ping.eu](https://ping.eu) to check.
I bet there's a jQuery plugin for this. Jokes aside, your question is too vague.
So this is more or less a wrapper around GenericHost? Will be useful to use this to replace some of old stuff. 
Could be dancing atound the problem here, but it sounds like you are mixing UI concerns with data concerns. A possible solution would be to populate the few entries known to the app for UI purposes just before rendering the dropdown that have values that wouldn’t appear in the database, such as negative numbers. This is no different than adding the “select a value...” with Id=0 that appears in most dropdowns. The app could abstract those values as enum:int to do a quick check onsubmit for UI commands and if not found in the enum, send the value to the data layer for filtering.
[Debugging is your new friend](https://docs.microsoft.com/en-us/visualstudio/debugger/debugger-feature-tour?view=vs-2017)
If I'm reading your pattern correctly, your match needs to start with a letter, so it would never match the 1.
The SerialPort library in C# is notoriously bad for this. I find myself just using a Read() on the base stream without a timeout and doing something when it returns data. You need to set up your own threading and procedure to close the port when done, but you can get it to work. After opening a serial port, I only touch the stream property. Everything else is of questionable quality.
Put a breakpoint on the `return Task.FromResult(0);` line. You should find that this method does indeed get called - the mechanisms by which it gets called all get set up behind the scenes. All you need to do is write the code in here which actually sends the e-mail. You can use `SmtpClient`, but many e-mail services (e.g. SendGrid) provide their own API to use instead.
There's no silver bullet here; you're trying to map business cases to a form on the UI without writing code OR defining data and there's simply no way to do that. To figure out the best approach _for you_, you really need to be thinking about what drives your business cases; how many you have, how complex they are, who defines them, and how you want to update the system to add or modify them. If your cases are added by a programmer and are as simple as hiding or showing fields, I'd probably use a "field mask" to go along with your lookup in the database. This might be an int or bigint if your fields are fewer than 32/64, or you could pack multiples into a string or something, but the idea is that each bit of this mask would map to a form element and would determine whether it was hidden or shown. You would then need to maintain logic for the UI that would map form elements to bits (or perhaps maintain this in a db table), and write a function to spin through the bits and show/hide elements based on this map. You could even create a copy of your form UI to let users build these masks by selecting/deselecting form elements if you wanted. Usually in these cases the logic eventually goes beyond hiding/showing fields and you end up needing to change the order of things, or repeat a set of fields X times etc. In these cases I've resorted to creating a form definition schema and building the form dynamically in the UI. I've also ended up hating my life after a while and wishing I would have just hard coded X number of forms in HTML; it's more flexible and easier to maintain.
yep
So why use that instead?
My question was more about whether I can essentially replace var a = b as MyObject; If (a != null) { a.whatever; } With this... (From the syntax above) if (b is MyObject a) { a.whatever; } I haven't actually looked at the syntax for is so I don't know if I got that completely wrong, but that's what I took away from it. And if that's the case, then the second example to me seems more readable as to my intent and seems more concise too.
because `int.Parse` is morally incorrect
You're missing the assembly that houses that method. My guess is their nuget package is missing the reference. Just add whatever assembly houses it to your app and you should be good. The Microsoft docs will tell you which lib it's found in.
yes. That's how I got it to work eventually. In case someone is having the same problem, here is how I solved it : https://pastebin.com/LXr7MyA7 Thanks! 
Instead of F12ing through everything to find what you want, you should re-train yourself to just jump *directly to the file you want* by using Go To, which is CTRL-T. just type "f MyFile". There's even a shortcut you can map that'll prepend the F for you.
I would honestly love to see what your typical domain and/or application layer looks like. You post here a lot, and your comments are always very polarizing. I'm curious as to what works best for your projects. For the record I'm not trying to defend or attack CQRS / MediatR here. It's a tradeoff like all things. You're writing a lot of boilerplate for sometimes little benefit.
Ah, yes the pattern matching if(b is MyObject a){ /*do stuff*/} does basically the same thing var a = b as MyObject if(a != null){ /*do stuff*/} It's really neat, and way easier to read IMO. 
This site has a lot of exercises https://www.w3resource.com/csharp-exercises/
https://projecteuler.net/ has a series of challenges. Or try codewars.net. Basically they give you puzzles, and you try to use your C# skills to solve them. 
These exercises are really good, small exercises that sometimes are really helpful. I really like the string ones.
Those are more challenging, you need some time to think about them.
I find myself recommending [Edabit](https://edabit.com) for quick "wake me up" problems. The great thing about this site is the "Resources" section that will give you a bit of insight about the methods you could use to reach the goal.
Codingame.com is another site for exercises. There's also Blazor in-browser: https://dotnet.microsoft.com/learn/dotnet/in-browser-tutorial/1 But... there's a big difference between learning the syntax of the language (variables, loops, branching, collections) and picking a platform to develop for. For example, you could be learning C# in order to make Windows desktop applications (winforms vs wpf vs uwp), or games (Unity or Monogame), or web (ASP, front end or back end services.) Each one has their own peculiarities and learning curve and will be their own adventure. 
The certification is more about the usage of the .NET framework in C# rather than C# itself so minor versions are less of a concern (as you can read [here](https://www.amazon.com/Exam-Ref-70-483-Programming-Miles/dp/1509306986#reader_1509306986) if you scroll down to Introduction). As linked in the book description you can see the skills and knowledge areas checked [here](https://www.microsoft.com/en-us/learning/exam-70-483.aspx) And lastly, the book seems to be updated to 2019 so you should be fine. You can always check the summaries and cross reference it with the skills being tested in respective links. Hope this helps and good luck!
I participated in the hearthstone game ai tournament, man was that fun!!
!remind me 7 hours
&gt; winforms does everything lol
I will help when and where I can. I was there getting started. I would suggest building your own app locally. Use GitHub as a source control. It's free, so VS and SSMS community editions (they are pretty good for being free) Other than that I would be happy to Collab with you on some pet projects to see where I can help out. also I have learned in the industry that there ton of different terms used professionally for the same process. Let me know.
Try going to the Microsoft page for the exam and asking there. I didn't find the awnser by searching yet.
I like Brian Hogan's "Exercises for Programmers" as a way to practice. If you're feeling really ambitious, you can even do the exercises TDD-style so you have a working set of tests for your solutions. https://pragprog.com/book/bhwb/exercises-for-programmers
In my opinion, no amount of exercises or assignments are a substitute for just creating something. Pick something you want to loosely recreate (twitter/fandango/gmail/anything), then just start. Even if you never finish, the problems you have to solve in the process of creating an application are where you really learn practical apppication.
I'm aware of it, and have done my tinkering with it before. But I am mostly waiting for [OpenGL support](https://github.com/qmlnet/qmlnet/issues/79). PS: I'm the ticket author.
Very simple. * Models: Pure C# code. Shove as much business logic, validation, etc. as possible into them, since they can be easily unit tested. * Services: These perform any database/3rd party service access. Has authorization/validation that requires database access. Does not have any ASP.NET stuff so I can reuse it in automated tests, command line tools, and Windows Services. * Web: ASP.NET controllers. They handle authentication (who you are) and any web-specific logic. Everything else it delegated to the service layer, making this layer very, very thin. The reason I think MediatR is garbage is that it is redundant with ASP.NET. What's the difference between the various filters you can apply to ASP.NET MVC/WebAPI and the various filters you can apply to a MediatR pipeline? 1. MediatR requires a bunch of boilerplate code to adapt the ASP.NET request pipeline to the MediatR pipeline. 2. MediatR doesn't make it obvious when a pipeline is incomplete. (Countless times on my last project I've seen someone forget to add a validation or action filter, so an update web request would "work" but not validate or do anything at all.) 
&gt; maybe OP should revise to talk about "the mediator pattern" instead? We have a mediator already. I forget the name, but it handles routing raw web requests to the correct controller class/method. MediatR just poorly implements what ASP.NET offers out of the box. 
I tvivl you are confusing http endpoints and domain logic..
Variables hold values right? I want to detect when an int variable has a specific value. &amp;#x200B; &amp;#x200B;
Http processing is the domain that we need mediation for. Beyond that point you need a really good justification for a second round of dispatching.
how is this related to c#?
How is this related to c#?
&gt; Do I insert the payment request in the apk, or shoud that payment and verification request been done in server side? Alone by asking this question you should absolutely reconsider this. You should definitely get professional help regarding this, and/or outsource this. If you want to accept credit card data, then the server must be PCI compliant. https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard
I'm thinking of doing a virtual vending machine thing. Any good communities for support, or is it all Stackoverflow?
Thanks a lot for your offer!
Ok. I get it. I will reconsider that. Obviously, this is a security question, and I need to make sure that implementation is properly done.
Best not to mess around with cards until you have a good idea how pci standards work. There are a load of payment providers (not ready made ecom sites) that have their own API’s and tokenisation systems so you never have to deal with the card details at all - you essentially put the customer through to their infrastructure and get back an authorised and amount, which gets reconciled for billing later. 
It's not only a security question, but it's mainly a legal question as well. There are numerous laws in most countries around the handling of credit card data.
One idea could be a console app to play blackjack (with play money and playing against the computer, for starters). It turns out that such a simple game has a lot of edge cases to consider, and a wide variety in rules. One aspect I’m particularly interested in myself is making dealing provably fair, and experimenting with variations of rules.
the web browser control is via c#, im not programming in angularJS, im programing the program in c#
Dreamincode.net is hands down the best community for programming help and advice. Avoid SO like the plague.
I'd stick to the first two pages if you're just looking for basic exercises.
Got any ideas for side project? I got a few if you want to collaborate
You should only avoid SO if you don't want your questions answered with the most detailed and accurate answer.
there was a similar question posted a few years ago [Muting sound in c#](https://www.reddit.com/r/csharp/comments/43kgye/muting_sound_in_c/czivicl?utm_source=share&amp;utm_medium=web2x) which points to a [Stackoverflow post](http://stackoverflow.com/a/14322736/996081) which uses the Windows Core Audio Library.
The C# serial library isn't great; it's a shame because w32 didn't have these issues. I'd suggest looking for a different library to do serial reads or wrap your own over Stream. 
Just out of curiosity, why do you suggest avoiding SO?
I wouldn't limit yourself to a single source of input. You'll find, as you run into problems, sometimes the solution will come from SO or a blog post or a random message board. A Google search is your source of info, wherever that ends up being. Now if you're looking for interactive help, SO is fine as long as you have a specific question. For just general questions, I'm not sure I have a good alternative unfortunately. 
One thing not to ignore is the objective oriented programming aspect of c#, make sure you understand those concepts. Sites like leetcode or geeksforgeeks have a lot of good oop problems and solutions
You need to find a payment processor in your area. I have used paygate, payu, payfast. Best to look for one that suits your needs , also make sure to look at fees. 
The exam has been updated in December of 2017. 
 int q = 5; if (q == 5) { Console.WriteLine("yaa."); } else { Console.WriteLine("naa"); }
Try create something you really need. That way you will actually try to solve problems by searching and learning.
Not who you were responding to, but the SO community is notorious for flagging things as duplicates and just generally being very unhelpful if they at all think something similar has been posted before. It just seems like a fairly hostile community to join. That said, it also has a huge amount of resources and I use it often, I just don't participate or ask questions myself.
I would agree with all these things.
1) Think of something you'd like to make - mind the scale though, overscale it and you'll end up frustrated. 2) Try to make it, *guaranteed* you'll face problems that will *force* you into either getting creative with problem solving or applying what you already know. 3) ??? 4) profit &amp; experience. &amp;#x200B; Rinse &amp; repeat, upscale your projects a bit once you feel comfortable. &amp;#x200B; Also, you don't have to write good code when practicing, but you have to *not write bad code* either, i.e. try not to gain any bad habbits.
I mean I'd say generally just look at anything you think you can't code and try coding it don't quit until you finish it even if some of the futures aren't there as long as you have a basic project that you learned at least 1 thing from you're good to go on to the next project. Or at least that's what i think is the best way to get good with a language a project i'd recommend to start you off is probably trying to make a simple thing like a todo-list focus on the functionality and the style of it and try to come up with ways to make it visually pleasing. Another thing is chat bots (discord bots if you use discord) and finally any original idea you have that you can't find anywhere on the internet for me this was some launcher that basically made it so you can add a template with a bunch of files in it and once you clicked on it inside a list it would launch every file so that you could have one for work for example and one for general things.
Well, at least you know what the problem is. Do you control the server? Could you reconfigure it to support smtp-tls on 587?
Why would your company have rules like that?
Microservice aspirations but failing and thus pipelines limited to a major version... of course C# releases aren’t going to line up with .NET anymore 
Thanks for the clarification! Then it is indeed syntactic sugar :)
To be fair most of the posts marked as duplicate are duplicates or the answer can be easily solved by the linked answer. If they weren't so strict on that there would be hundreds of the same questions making finding the solution by searching harder. I agree the community is hostile and unhelpful overall though. A lot of people abusing any amount of power they get.
&gt;I'd probably use a "field mask" to go along with your lookup in the database. /u/i8beef suggested an enum, I am suspecting your solution is similar. Will look into this, thanks.
Yea I understand the reason for lots of stuff getting marked as duplicate, but I have definitely seem people complaining that they searched and searched and couldnt find an answer only to post and have it essentially be marked as a duplicate right away. Then again for me, there has rarely been an issue or problem I havent been able to find on SO. So I do imagine that most of anything I might post has been answered before. So for me, along with a lot of the hostility I have witnessed, I simply use it as a resource, and not a community to participate in. So, I would never say to avoid it... just maybe best to avoid participating.
4.7.x more stuff to desktop development features than web though.
Removed: Rule 3. You might be best opening an issue/question on the CefSharp website or GitHub.
General questions would be something for forums or chatrooms. Before Slack and Discord came into the scene and fragmented communities into hundreds of separate parts by removing any skill, technical, it financial barriers to entry...
I like to teach it this way. You look out on the street and you see 100 cars including yours. When you want to go somewhere, does it have to be in *your* car? No. You could get around in any car. Why is that? It’s because every car implements the same interface and you understand that interface. Think about it. That interface includes a steering wheel, and a couple pedals. You have learned this interface and you know it. That enables you to get around in any car that implements that interface. 
public interface IBuddy { void PurchaseDrinks(ICollection&lt;IBuddy&gt; buddies); void AttendStripClub(); void BailOutOfJail(IBuddy buddyToBail); }
You should put more effort into your question. Can you show more actual code?
Like most comments on here, you just need to go forth and make something. I just started learning and using C# last week and I've already created an application that parses data from random subreddits to show you images. And I'm currently developing a wifi scanner
&gt;The certification is more about the usage of the .NET framework in C# rather than C# itself so minor versions are less of a concern (as you can read [here](https://www.amazon.com/Exam-Ref-70-483-Programming-Miles/dp/1509306986#reader_1509306986) if you scroll down to Introduction). &gt; &gt;As linked in the book description you can see the skills and knowledge areas checked [here](https://www.microsoft.com/en-us/learning/exam-70-483.aspx) &gt; &gt;And lastly, the book seems to be updated to 2019 so you should be fine. You can always check the summaries and cross reference it with the skills being tested in respective links. &gt; &gt;Hope this helps and good luck! &amp;#x200B; While I 100% agree with the above comment stating that the 70-483 C# Exam is mostly about the .NET usage of C#, I do want to add that the linked book is not the best resource for the exam. &amp;#x200B; I purchased the book and, while it's actually a pretty solid C# book, it hardly preps you for **the exam** at all. It definitely covers the topics that you will be tested on and provides examples / learning on those topics, but it *does not* give you any sample test questions, exam scoring information, skills / strategies for reading and breaking down the test questions, etc. &amp;#x200B; I definitely would have expected at least a brief practice exam at the back, or several sample questions at the end of each topic chapter that mimic the exam's question structure. Instead, the book has "Though Experiments" for each chapter that are mostly narrative questions and have no commonality with the exam other than the topic the question relates to. It strikes me as a little odd that this is the official Microsoft exam reference... &amp;#x200B; I'm not sure what the best resources are (I'm sure there's a ton...for a price), but I definitely recommend googling / reviewing as many sample exam questions as possible. If you just go by Microsoft Virtual Academy C# videos and the linked book, you'll definitely know your shit...but you're going to be blindsided by the exam format and question structures. Wouldn't want that to happen to you! &amp;#x200B; (The exam itself is pretty easy if you are familiar with C# and work in .NET everyday, but if you are an absolute beginner I really recommend finding Practice Exams -- there were even some questions on the test that threw me...mostly the random Debugging / Assembly stuff that you either never use or just look up the *one* time you have to think about it during configuration) &amp;#x200B; Sample Exam Questions Resource: [https://www.itexams.com/exam/70-483](https://www.itexams.com/exam/70-483)
I agree, however i dont think this gets into why you dont just implement it without any interface.
They say a certificate is worth about a years experience (for Junior developers), but if it doesn't it's going to at least give a sharp edge. Towards an employer without much knowledge a certificate will be worth more than a portfolio (since whats there won't mean much to them) but the other way around for an employer that does have knowledge. However a certificate will still increase the employer's opinion of you in the second case. It's your money and your opinion so we can't tell you whether its worth it to you or not but we can give you info to help you make an educated choice. Lastly, I don't have enough experience with employment to really know what makes a difference so I hope others will comment with more information. Good luck!
Because then nothing would force each car to implement the same interface. 
I've just read up about the course and it does not seem worth it to me. You're already studying for a degree why spend money on a qualification that will be superceded in a couple of years? My advice would be to contribute to open source projects. It will show collaboration as a team and that you know how to do the things university doesn't teach but are super important in a job. Reading bug/story Jiras, creating pull requests/version control management, and delivering code to a pre-existing project.
God I hate EF
You'll probably begin to realize that many of the problems you will run into while building something have already been encountered by other programmers and solutions documented somewhere on the internet. Learning to sift through different types of websites and search results to find the solution you need is a skill itself. So when you run into a problem, try to find an answer before asking the question yourself. You may be surprised :)
Well at least in Denmark certificate isn't worth much. Most employers iknow don't take them serious. They focus more on passing the test and not giving real life experiences. They don't really care if you learn anything. Just the general view on them in my area. 
Maybe last decade lmfao
You could use in-app payments as an alternative?
Meh. No, it’s not. 
You should read up on what the local database works. But that being said, click on the database in solution explorer and set the CopyToOuputDirectory to something other than Copy Always. A copy of the database is being copied to the bin/debug folder everytime you run the application and that version has no data. By making this change, you will not copy with each run and your data will remain intact in the bin/debug folder.
Can you give examples what it can do over wpf? I have an OP pc for the small apps I write so speed isn't usually a factor for me
I'll just quote myself from answering similar "why wpf:" &gt;WPF allows for winforms-based approach if that is what you're familiar with. Close the xaml and stay in the designer and code-behind if that's what you want. &gt; &gt;But it doesn't trap you into that way of doing things - extending and completely changing UI controls is relatively "easy." There's a learning curve, but the difference is that anyone can make all buttons round, blink and spin with highlights when you mouse over them, and still be able to easily modify the details like background and content on per-button basis after the fact. This extensibility applies to any control in wpf. &gt; &gt;Good luck doing that in winforms. &gt; &gt;WPF has a concept of "styles" where you can apply a style to all the specified controls within a scope, like for example the application scope, sort of like CSS just more powerful.
This person sounds like a nightmare to have on a team.
You’d have to hire an obnoxiously positive person to counteract. 
I possibly agree but possibly for different reasons. Would you like to expand? &amp;#x200B; I want a coding standard. I'm fine with a commit in a code review which brings code back to that standard. Next time around, when there's a functional change, it will be less cognitive noise to deal with.
Awwwwwwwwww mother fker I just spent like 6 hours implementing a winforms custom theming system, and its still crap and so in-efficient its not funny Thanks
I'm really excited to delay the feedback on my next iteration so I can ensure I have the prescribed amount of whitespace around parens, my indentation is pristine, I've commented out all the debug variables I have hanging about, and that I haven't used any language features that some pedant doesn't like. &gt;I do not know why but causing FxCop to actually do the analysis can lead you to spend hours working out what went wrong. There have been occasions where I checked in code that I thought passed the rules, but actually FxCop only kicked in when someone else tried to compile the code. I'm more than a little disturbed the author had the experience above and didn't immediately burn it with fire. 
It depends on what you've learned so far, the earliest "game" I made was Tic Tac Toe, then Hangman. Hangman probably took me about a week to get working properly. I think it was the perfect thing for me at the time, there were enough things slightly out of my grasp so I had to Google how to do them, but 95% was adapting what I'd already learned.
But anyone who dr definitely shouldn't be writing regular expressions!
If you know Java you should know pretty much all you need to know. Might take a few weeks to pick up the syntax and the esy c# does stuff but c# was built from Java (more or less). 
Other great antrypatterns; try...catch...and release: try { DoSomething(); } catch { throw; } try...catch...and confuse: try { DoSomething(); } catch (Exception ex) { throw ex; }
I feel personally attacked
Dependency injection, n-tier architecture, cqrs, entity framework, microservices, service bus messaging, http and amqp protocols These are some things to look into for backend work
IDE0003 Name can be simplified.
Lol
thanks, I'll look into that
https://i.imgur.com/s4UXvGK.jpg
This place has been invaluable to me both just for finding fun topics to learn and also for my career. The commenters are generally real positive and helpful and I appreciate that.
You might want to consider looking into viewmodel concepts and how to use your controller to handle different requests. The "Create/Edit/details" is not a thing anyone actually does in MVC. It's a good thing for demonstration, but it's not practical by any means.
Why not mongodb ? Bad C# driver?
I recommend learning authorization, authentication, auth delegation, and permissions in microservices. Very important and PITA to try to add late. There are a lot of other security concepts to understand, but auth is a good place to start.
The amount of truly valid use cases for mongo is almost none, you'll see many people use it because it's a quick start up, but it's gets harder and harder as time goes by and complexity increases. 
&gt;this. Get out.
Mongodb uis more of a pain than it's worth. Sql server supports json selectors, so you can (not necessarily recommending) easily save json in a table and access it in an advanced fashion. 
Hey, it ain't perfect. FxCop was neglected by Microsoft for years. That's no reason to not use code rules. If anything, it exemplifies the problem of lack of code quality.
Pooh with monocle: this.Subscribers.Count &gt;= 100_000
Yoda with monocle: 100_000 &lt;= this.Subscribers.Count
Oh wow I've never realized how many subscribers this sub had; for some reason I thought it was small and niche
Thank you! I'll be taking a look at this. By the way, I noticed on the MSDN website that they have separate sections for Razor and MVC. Is there any difference between the two in practice? Should I consider switching to MVC? 
it definitely helps you in finding your first job, as will 70-486
Buy access to Pluralsigth. There's a really great tutorial by Thomas Claudios Huber where he builds a mvvm project with several views and models from scratch. Continuously refactoring the code and explaining choices underway. 
`const that = this`
I use 1 partial view, _editorcreate with a disabled attribute on it or remove details
To add onto other suggestions: * [OWASP top 10](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project) \+ [ASP.Net core security guide](https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-2.2). Security gets overlooked so often and while it's no pen-test at least being aware of those exploits is a huge head start. * Work on TDD practices and check out the [integration testing guide](https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.2). It's so much better to not have to go boot up the server and send requests manually. &amp;#x200B;
What the hell, using `this` is horrible :c (except for extension methods)
Thanks, I heard now several times about pluralsight and I take a look at it.
You definitely need more mod help. Tomorrows the perfect day to reconsider it.
That's the one. Even if you're not doing EF or any database work in your app its still very useful I think. He uses great tools and is really good at organising his code and files.
I set the CopyToOuputDirectory to be (copy if newer) but also same problem??? 
amespace WindowsFormsApplication11 { public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void tableBindingNavigatorSaveItem_Click(object sender, EventArgs e) { this.Validate(); this.tableBindingSource.EndEdit(); this.tableAdapterManager.UpdateAll(this.database1DataSet); } private void Form1_Load(object sender, EventArgs e) { // TODO: This line of code loads data into the 'database1DataSet.Table' table. You can move, or remove it, as needed. this.tableTableAdapter.Fill(this.database1DataSet.Table); } private void button1_Click(object sender, EventArgs e) { this.tableBindingSource.AddNew(); } private void button2_Click(object sender, EventArgs e) { this.Validate(); this.tableBindingSource.EndEdit(); this.tableAdapterManager.UpdateAll(this.database1DataSet); } private void button3_Click(object sender, EventArgs e) { this.tableBindingSource.RemoveCurrent(); this.Validate(); this.tableBindingSource.EndEdit(); this.tableAdapterManager.UpdateAll(this.database1DataSet); } } } 
Started the trial and go through the course today, thanks!
Started the trial and the course now, thanks :)
It feels small and niche to me too. I think that's because there are only a few comments usually on each post.
Why?
It boils down to using a technical approach to solve a social problem, and doing so heavily. It’s one thing to agree, as a team, on style guidelines, and to use a tool to help you see where you missed a spot. It’s a whole other thing to turn them into errors, and do so gleefully: &gt; Believe me, nothing stops a lazy coder dead in their tracks like a compilation error. If they can’t get the damn thing to compile, that unused variable just ain’t making it in to version control. I’m not really concerned with my team’s ‘heart’. I’m concerned with writing good code, and humans are notoriously bad at it. And: &gt; There’s always some person in the team who insists on leaving variables in the code that shouldn’t be there. I don’t care what anyone says, that person just should not be allowed to get away with it! Bad code is a thing. Having the tooling help you make it better is a thing. Your team members having a “heart”, though, isn’t the bad part. I don’t know if this fella is autistic or just playing it on TV, but have they tried working *with* their team, not identifying every human being as a potential danger to project success?
*How* is it not working for you?
Always explain *how* it’s not working. But first read the documentation and understand this isn’t C, this is C#. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-define
https://media.giphy.com/media/l378fIHIADPMXGwww/giphy.gif
Thanks a lot for your tip. The ISP was blocking port 25, I contacted the hosting support and they opened port 587. Everything's working now.
:) Great answer. I'm guessing OP has been conditioned that way rather than being psychologically predisposed, but you've nailed it. &amp;#x200B; :) &amp;#x200B;
I read this page but unfortunately did not understand much as i am very new to this. I wrote at the top of the program "#define Yeet int" and for some reason what ever i write in the int place is red lined as error. I also did not see in that page the use for define as this post shows or how to use it. Would very much appreciate if you could show me how to do the trick the post shows. Thank you for your reply and time (:
It's a common convention to name private fields with an underscore, and public properties with CamelCase. Using these conventions makes `this` obsolete, and the common convention is to never use `this`
What you wrote would work in C. In C# defines are just “does this exist or not.” They’re binary flags. You can say `#define STUFF` and then check `#if STUFF`. There’s no preprocessor that would let you define any value for the defines. So you simply can’t do what you tried to do in C#. 
So there is absolutely no way to get that result in c#? Unfortunate.
Thank you anyway 
No, there isn’t. Which is a good thing. 
Too early dude. the first of April is tomorrow. Unless you're in the wrong hemisphere in which case it's 1954.
I rly wanted to this in my next test but ok xD
Forgive me for not understanding.
Is there a particularly reason to why? Something with the way c# was built.
Assuming you're talking about SQL, you want either TOP or LIMIT (depending on the server you're using). https://www.w3schools.com/sql/sql_top.asp
Why it doesn’t work? Because the designers of C# didn’t see it useful. Bjarne Stroustrup also would like to remove #define from C++ if it were possible, so I would wager there’s more people who don’t want this in languages than who do. It doesn’t really add anything but makes it possible to confuse or break things a lot, so I assume C# designers decided it’s better to not have such a feature. Having defines as flags is useful and that’s how it’s mostly used in C and C++ also. It’s more of a question “why does C have this” (C++ has it because of compatibility and history) because it’s not like this is a common feature of languages. You can of course build your own language or preprocessor if you want (or even use a C preprocessor) but that might not be very useful. 
Fair enough. I’m just getting used to seeing a lot of comments on programming subs where the commenter has an overblown reaction to something frivolous (you use for loops? Calm down Satan!), so I like to ask the question.
Thanks :) 
claiming that macros add nothing is disingenuous. 
Claiming I said so is doubly so...
What's wrong with this?
You are forgiven and blessed :)
“it doesn’t really add anything” 
Is completely different from what you claimed I said. There’s a big difference between “not really adding anything” and “adding nothing”. You can see it, can’t you? And especially when we are talking about positives, not negatives as the original code example would be. 
Maybe, but that presupposes that this person is one of those fabled 10x rockstar devs in the first place. Otherwise, not really worth it.
&gt; I’m guessing OP has been conditioned that way Yes, that’s quite possible, and it sucks that we have such cultural deficits in our trade. My main point though: absolutely do introduce coding guidelines (but do so as a team) and absolutely use tooling to help recognize mistakes — but do it for the right reasons.
I celebrate enough arbitrary numbers.
Well sorry, I didn’t mean to sound like that. It was mostly a joke, for me `this` for fields stinks like Java. It is fine if that’s your choice or convention, but C# made `this` pretty much useless in an example like this (accessing a field). It is very useful in other areas (extension methods, constructor calls, indexers, fluent api).
You can extend the entities created by the db first code generation process by using the partial keyword. You will need to create the same class in a different file and just add the partial keyword to it: Public partial class SomeEntity { //your logic goes here that you want to have persisted across code generations. }
Seriously, I’m unsubbing now /s
I’m not exactly for this level per say, just curious on how you’d react to dealing with this type of individual who doesn’t have any motivation to do anymore than the bare minimum which is get code functional for the happy path use case. 
Such an individual is a problem in a team, but no amount of technical solutions will help. They are a social problem. They need to be talked to, listened to, coached, and if none of that helps, they’re a bad fit for the team. Marking their code as “containing errors” is just going to escalate to mutual resentment.
If you are using linq you can use .Distinct().Take(100)
Oh boy, you're going to have an aneurysm in about 24 hours.
Well, not now. But soon.
&gt; the first of April is tomorrow. Oh shit.
While we’re being pedantic: camelCase always starts lower, PascalCase starts upper. https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions
Yeah, I always mixup those two.. 
This is the correct answer. 
This makes logical sense. Perhaps in my case stated above if this individual had a manager to motivate him to clean up his act this wouldn’t be a problem. 
I've also noticed that this subreddit is generally the most helpful programming subreddit I've posted on. I usually crosspost my questions to as many subreddits as I find relevant to the question at hand to hit a bigger surface area, but even if the question isn't exclusive to C#, I usually get more and better answers from this subreddit than any other subreddit, regardless of the size of the other subreddits.
These days, (private) fields begin with an underscore, properties are PascalCase, and local variables are camelCase. The `this` keyword is almost always unneeded noise.
There's a bit of a learning curve though. Understand what is and isn't important can be a bit daunting at first, and if you want skinning and styles you have to learn the xaml.
&gt; 100,000 100_000 is supported now!
Yeah, but Reddit is still running on .NET 3.5.
I avoid the issue altogether (not due to memory deficiencies, I swear!) and just refer to them as UpperCamelCase and lowerCamelCase.
Google 'walkthroughs' you'll learn some more stuff and good ways to go about it as you follow along.
Unless you are overloading/overriding. It has its place.
:) 
When using top or take you may want to sort first. Depending on how the records are sorted you will get a different result set. If you dont sort you get whatever order the records were processed.
Are the elements new elements to the database?
Can you go into more detail? MongoDB is great as a document store in my experience, and the C# driver with IQueryable is insanely powerful. The biggest issue with MongoDB in the past was its consistency, which was addressed and shown reliable by Jensen over a year ago.
Are you working in SQL? If so I might be able to help you out.
I always liked the format HH:MM:SS (hours minutes seconds).
This isn't JavaScript....
Bleugh. Personally prefer to only use this in constructors when passing an item I need a referenced stored to. E.g. having this.items = items makes it far nicer to use items in the rest of the class instead of _items. The _ notation (or m in java) are horrid imo.
`this.Subscribers.Skip(99999).Any()`
You are entitled to your (wrong) opinion
In my (anecdotal) experience there are two kinds of IT jobs. The kind where you work for a company and do intranet stuff for them --and-- the kind of company where you're sent out as a contractor (in some form or another) to do stuff for other people. If you work for one company and just do internal (or external website) stuff -- certifications mean very little. These companies *tend* to just care if you're competent and skilled. If, however, you work at a company where you're do work for others (e.g. contracting or as an IT *company*) then that's something the company can bring to the table as something of value to validate them -- then there is an appeal to you being certified. &gt; My second semester starts monday and every company just wants master students or at least people with working experience. Are we talking a *Masters* degree -- 6 years of college? Because if so, we're talking about a whole other discussion here that gets a bit more complicated. &gt; or at least people with working experience. As an alternative work with open source stuff. Become a big contributor to something you feel passionate about.
&gt; There’s a big difference between “not really adding anything” and “adding nothing”. You can see it, can’t you? I for one can’t see it. &gt; And especially when we are talking about positives, not negatives as the original code example would be. Yes, but that doesn’t appear to be at all what your original comment says. It suggests that it is largely useless. Is that still your position?
SQLite is exactly what you need. I believe ef core has provider built in or added via nuget.
Yes. Do tell what macros would bring to C# if you feel they would be very useful. And I do suggest grabbing a language book if those two things are identical. And I don’t think you see them as identical since you now said I meant they are largely useless. That’s not the same as useless that was posited as my meaning. So there is a difference. But this isn’t an English language forum, let’s stick to macros. What would they bring to C#? In C they’re more useful but this is not a C forum either and C would also mostly be quite fine with just flag defines. 
See, the problem I have with this (no pun intended) is there is nothing EXPLICITLY enforcing this design pattern, as opposed to any other. Additionally, while this design pattern may currently be the accepted approach, it may not have been in the past and could very well change in the future. In my honest opinion, this is the inherent flaw with trying to enforce design patterns, if they suddenly change anyone who doesn't change with it is doing it wrong, despite it being right in the past. Wouldn't it make more sense to take advantage of the languages constructs, such as `this`, and put a greater emphasis on writing readable and functional code? While enforcing a design pattern may remove "unneeded" code it adds unneeded complexity to the code and considerably impacts readability. I may be entirely wrong, but it seems to me that writing clean, readable, and functional code should take precedence over arbitrary afterthought patterns. 
F# is leading the way in the sheer number of different ways to represent a null. Want classes that aren't nullable unless an ORM is involved? Mark it as CliMutable. Want classes that are always nullable even if the variable is not marked as such? Use AllowNullLiteral on the class. Option&lt;T&gt; sucking up too much memory? Try the new ValueOption&lt;T&gt;. It's like Nullable&lt;T&gt;, but different. And of course F# 5 will support `String?` just like C#. But don't use it except for interop, we can't be using the same standard as everyone else. 
Why, would be my question. Also why not just use the build / revision in the version?
F# is copying C#'s implementation of non-null references because it is a hell of a lot better than what they have now. 
So your position has now evolved from they’re useless, to you never quite said they were useless, to why won’t anyone tell me why they’re useful. Cool.
Nice way to side step the question and misread. I just said that my position was and is that they are mostly useless. If you don’t agree, do explain your point of view and what they would bring to C#. I am writing plain English here and not using any difficult words even, is it really so difficult to understand what I’m saying?
No, but `that` is. 
What he wrote wouldn't work in C either. `cout` and `&lt;&lt;` are part of C++, but not C. And it wouldn't work in C++ either, because the namespace `std` is missing.
And for a bit more background from the C# FAQ: https://devblogs.microsoft.com/csharpfaq/why-doesnt-c-support-define-macros/
I haven’t needed macros in over a decade of writing C# full-time. I can see situations where they’d be useful, such as a nicer INPC syntax. The original poster’s situation is fucked up up and most certainly not useful.
Why do i get downvoted for posting a question? I mean i am sorry i rly new to this i guess...
This is actually not what I wanted to do. I wanted a HWID. 
Linq life.
I apologize in advance as some of this may seem pendantic. Using (or not using) `this` is not a design pattern. It is a coding style. Like using tabs versus spaces, or curly brackets on a new line. As you correctly noted there is nothing that can enforce these styles. You can sometimes enlist various tools like analyzers to help. Coding styles let us more easily understand code by getting rid of textual noise, and in some cases allow us to do things like static analysis on our side code more easily. Design patterns are templates you can follow to solve a specific problem. These are generally self enforcing. For example, the adapter pattern is everywhere. Ever used a JSON (de)serializer? Adapter pattern! &gt;writing clean, readable, and functional code should take precedence over arbitrary design patterns. You're definitely right, clean, readable, functional code is always the goal. But what that actually looks like, changes based on both coding style and (required) design patterns.
Is your data relational? Does the schema of your data change constantly? Could you store the data as something other than a document? If you answer no to all three you have a use case for mongo, otherwise, it's unlikely to be the best choice 
People are pretty harsh if they perceive the question is low effort, or could be relatively easily resolved with a google search. In particular, your question is more C-based, not C#, and it's not terribly clear how you're trying to relate your C code to C#.
I'm creating a xamarin app for a friend, it's my first serious program and I'm obsessed with it. I'm learning *a lot*, I would recommend that, do something but in a professional manner. There is a point where the games you make on college can't teach you more. 
That "author" is very annoying and dead wrong.
I never said using or not using `this` was a design pattern, rather that it was a construct of the language. If I didn't express that properly in my comment I apologize. The point I was trying to get across, based on prior comments I read, was that the currently accepted design pattern seems to steer away from using constructs such as `this` based on its associated naming conventions and implementation. I understand the difference between coding styles and design patterns. I also understand the use of design patterns in terms of developing adapters, (de)serializers, etc. as they require information to be formatted properly for use in external systems/APIs. It seems to me that this "implied culture" of enforcing design patterns can greatly detract from the existing constructs of the language itself. 
But if that is, what's this?
I asked it as clear ae i could for my knowledge. And ofc i tried googling it i came her as s last hope. Anyway thank you for your time (:
Also local variables in Pascal case.
Well, the first result googling "C# #define" is the [official MSDN documentation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-define) which also basically states it doesn't operate like C does. Furthermore, your code contains C constructs like "cout". So I can't really blame people for the downvotes.
What about cases where team members begrudgingly, verbally agree to a standard and then don't follow it? Code rules can help in scenarios where you agree upon a rule as a team, but have the problem where several team members simply do not follow the rules.
Of course. What do you think code rules are for?
I'm hearing a lot of hostility here. My experience in the past has gone like this... Coders who care about their code and take pride in doing it properly naturally gravitate toward code rules, or at least putting the code through Resharper once in a while. But, all the worst programmers I've come across are hostile to code rules. The same programmers who insist on leaving unused variables littered through the code, and breaking naming conventions etc. refuse code rules. If they were happy to take pride in their work to fix these issues, the code rules wouldn't be a problem because they'd just fix the issues before compiling.
&gt; What about cases where team members begrudgingly, verbally agree to a standard and then don’t follow it? Then perhaps the standard is terrible. &gt; Code rules can help in scenarios where you agree upon a rule as a team, but have the problem where several team members simply do not follow the rules. You’re solving the wrong problem, and no amount of technology is going to help you. Talk to those team members, listen to them, offer them external coaching, and if none of that helps, perhaps your standard sucks, or perhaps they’re not a good fit for the team. But no matter what, marking trivia as errors is just going to escalate the situation, and not solve anything (other than perhaps temporarily making you feel good).
Have you never worked with a coder who refuses to clean up their code? There's always one or two who will nod their head when their manager asks them nicely, but then just slide back in to bad habits. What should be done? Fire the person? Perhaps... But, this rarely happens Bad code festers. Everybody experiences this. If you're not the one producing the bad code, code rules aren't going to affect you. But, nothing is more frustrating than sitting in a situation where your coworker is poring bad code in to the codebase, and you are left helpless to stop it. Code rules are simply one way to start tackling the problem. They don't have to be added holus bolus. They can be added incrementally in an opt in, cooperative way that everyone agrees to.
You're pretty convinced of this. Why wouldn't you try technology as a possible tool in the toolbox to help with the problem of bad code? Do you do not believe that technology can help you build better technology? And, what do you do when you are are not the coach, and the person is clearly not a good fit for the team, but you are forced to work with them anyway? What happens when you are running an open source repo and you have to point out the same coding mistakes again and again instead of just putting the rules at the build level before letting someone submit a pull request?
Oh I have. I have 1 right now on a team. He’s the most tenured person on the team and therefor like it or not he influences his team to pickup on his bad habits. There’s a management position open on his team, he thought he’d get it by default but it wasn’t offered to him and they are openly looking for outside candidates. You can’t help those that don’t want to be helped. Yet like you said he’s pouring in bad code and teaching bad habits to the newer team members. I’m at a loss. His team is seeking to improve and he’s there holding progress back. Management is simply too busy to address the problem. It’s terrible to see the rest of the team deal with this guy. 
That's exactly the kind of scenario where code rules can help. They're not a silver bullet. But, at the very least, they can be a talking point for pinning down a few things that are wrong with the code. 
I'm no expert at CI, but doing all of that on build seems like overkill. Maybe trigger it on commit/push it back?
What is the exception being thrown?
have you at the start of the view @model IEnumerable&lt;\[YourProductModel\]&gt; ? &amp;#x200B; &amp;#x200B;
 Server error in application /. The source cannot be found. Description: HTTP 404. The source you are looking for (or a dependence on it) may have been removed or temporarily unavailable, or its name may have changed. Check the spelling of the following URL. Requested URL: / Category / Product Version information: Microsoft .NET Framework Version: 4.0.30319; ASP.NET Version: 4.7.3282.0 &amp;#x200B; This is all it shows me.
Yeah, that's at the start of my view &amp;#x200B;
Sounds like a routing issue, maybe? Check your routes configuration for a route that handles a string / token / etc.
My guess is the default route doesnt understand "CategoryName" as a string. The default route handles an "id" of type integer.
What's the name of the controller? I noticed in the comment above the action it says "Categories/Products", but the link at the bottom says "Category/Product".
It's weird that recreating images takes so long, maybe you have some issues with dockers cache? For me starting up project even with several containers takes no more than 20 seconds.
Ope, good catch, bet thats it.
This weekend I use a lot of time working on controls. Created a web app that captures device motion. And translates it into game controls. 
i haven't changed anything in the routes config; public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute("{resource}.axd/{\*pathInfo}"); &amp;#x200B; routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional } ); you mean the url: "{controller}/{action}/{id}" should not be {id}? &amp;#x200B;
the controllers are called Categories and Procucts, so i should change it to that? 
Yeah, those need to match, exactly
I changed it to no avail :/ same server error as before
Of course. What do you think code rules are for? 
Try changing your link to use the category ID instead of the name. Then, change the action to have an "id" of int, and use that for your query. Im spitballing at this point, because I'm on my phone.
Neither.
Salaried employee. What do you want to know?
Permanent. I really like the company and my coworkers, and the predictability is nice. I also still have a fair amount of freedom day to day (75% of time work from home). My coworkers are some the generally nicest people I’ve worked with. Our average age is prob mid 30s on a ~15 person team, and everyone is punctual, available, and helpful. Nobody really needs any oversight or micromanagement during sprints. I did receive another offer at the same as this one for a couple % more, but it was no work from home, 35 min one way commute, big corporate office environment, and I don’t regret passing it up
I suspect you're after UK-based opinions, although you don't mention it. Employment in the US is very different. Me, I've always been permanent. It gives me and my family a sense of security, and means I'm not having to constantly worry about the "next" contract, any illnesses, paying for training to keep up-to-date, or all the nasty-looking IR35 rules that I've seen many others caught by.
How can I modify the getters and setters though? I get an error saying that these properties have been already added.
I don't understand, please explain in more detail.
I don't think this is much to do with CI, which as I understand should run remotely, and is more about deployment, this is more debugging which is local on the developers machine. My advice would be to cut out debugging on docker. Write something that can run on your local machine, then make it run on docker. If it's something that you want to debug on linux (assumed from docker usage) then run a linux box somewhere, and debug on that.
That's also not working 😅 same error as before
Im out of ideas - can you post the code to github, or somewhere similar?
Are the things you are trying to add already a part of the database structure?
I believe, when looping over the contents of the "bag", your code is assuming everything in the bag is the same type. In your foreach loops, use var, instead of the actual type, and then inside the loop do a check to see of the object is of the right type: In the biscuit loop, for example, try: foreach(var itemFromLoop in bag){ if(!(itemFromLoop is Biscuit){ continue; } //do stuff with what SHOULD BE a biscuit } 
I see, thank you so very much, i was not aware var is a thing
it seems that i.name and i.stock no longer work if i use var
You could also apply a where clause, using LINQ in the foreach... Something like this: foreach(Biscuit item in bag.Where(x =&gt; x is Biscuit){ }
You'll have to cast it to the type you need once you know its the right type. After the "continue", cast itemFromLoop as a Biscuit var itemFromLoopNowABiscuit = (Biscuit)itemFromLoop;
The work from home aspect is really nice. I can work from home 4 days a week, it makes it incredibly hard to move onto different opportunities with 40+ minutes commutes in each direction. 
Var is very useful. Also, take a look at the docs for "is" and "as". They'll do a better job of explaining than I will.
Both. And entrepreuner too. Do you want money or stability or independency?
Will do, thanks again! the program is working properly
There's good and bad sides of this too. Yeah, if traveling is seriously hard or time consuming, I agree. But at home your work and personal life becomes one big mess (when are you working? when it is ok for your family to disturb you?) while at actual working place you are at work and that's it. You also have face-to-face time with your co-workers more or less whenever you need. Completely up to your personal preferences which one is better. The point is that it isn't all black-and-white.
While it's cool to try this out for experimental/learning purposes, and microservices certainly have their place, it's shit like this that would make me hesitant to jump straight to a microservice-based architecture for new projects. I'm working at a new company and even their more recent projects have accrued a ton of tech debt and decayed into moderate spaghetti. I've been looking into the eShopOnWeb (monolithic version) project as inspiration for how these projects could be re-engineered. It's much easier to debug/deploy monoliths and in fairness if a monolithic architecture is constructed properly, it should never be too much hassle to decompose it into microservices.
I feel I have a solid handle on this. My profession is my true interest and I say this 18 years into my career. My office is secluded from the rest of the house. I get face time via teams/Skype calls with my peers. The days I do go into the office I’m usually in meetings. I’m a top performer in the org. This seems to work well for me in the last 2 years. I would like to find another company to grow my profession. But currently where I live all the solid job offers I’ve been given are an hour plus away (one direction) and offer little work from home options and I’m just not that desperate to switch jobs just yet. 
Yes. I want to add functionality to the getters and setters of these properties. How can it be done?
I like it for the simple reason that it's easy to see my vars via intellisense. 'this.'... 
Totally agree. To add on to your point, lots of times you'll also have developers who see microservices as a silver bullet to fix their spaghetti code, which while I understand that moving to microservices does require actual physical boundaries between applications which *may* help with writing more decoupled services, there is honestly so much nuance in *how* to create them correctly, plus the actual complexity you deal with in distributed systems, that you really just have the same developers writing a distributed monolith or macaroni code (spaghetti code chopped up into different services). I really think that teams should only strongly consider moving to microservices when they actually start running into *unavoidable* problems with their monolith, and have people who are really willing to put a lot of thought into the right architecture. By that point, they have a good idea of the actual problem they're trying to solve, plus the domain, which can allow them to split up components based on their bounded context. They'll also be looking at real ROI if they're running into issues with productivity loss due to having actual scalability issues, not theoretical ones. AND, depending on their product, they will have quickly gotten to market and the feedback loop will have been much quicker, allowing the team to realize that they actually have a mature product with real demand, and know what direction to go with it. But from what I've first-hand seen, it's really just people getting blinded by fancy tech, splitting up an application based on arbitrary boundaries, using synchronous HTTP communication, not versioning their APIs, running into issues with performance, complexity, change management, yadda yadda yadda... But it can be done right, and there can be huge upside to it...maybe I've just been unlucky in my experiences with it.
What error or warning do you get when you try to modify them?
`bag.OfType&lt;Biscuit&gt;()` does the where and the cast in one go!
Havent seen that before, though I don't use ArrayList either, but yeah, that would be a lot cleaner!
People would argue that using the underscore would do the same. I personally use "this" because it makes for a great contrast of colors in the editor so I can see at a glance where the fields/properties are accessed
Oddly missing from this entire post is the motivation. Why did you build your architecture in microservices? Was the previous architecture too monolithic? Did you have scaling issues? Because it sounds a bit like you jumped on a hype without a real reason.
If you put a breakpoint on var Products = ... do the breakpoint hit? I think perhaps the error is generated by your return statment and not the request.
Underscores wouldn't list all properties/fields; only the "private" vars... Personally, I just like being very explicit and 'this' tells me right away that the var belongs to THIS class (or subclass). 
I can't edit them in the generated class, because that is a bad practice. When I make a partial class it tells me that this property has already been declared and that there cant be two properties with the same name.
You should be able to build automated tests using something like xUnit without invoking a docker image build. You ideally shouldn't be finding too many bugs that are not covered by unit and integration tests. I don't generally spend a lot of time spinning up an entire environment to test. Post docker image testing would involve more smoke and some E2E tests that can be done in the build pipeline, though you'll write the code to execute them. 
I'm sorry but I think you missed my point. I'm not dogging FxCop but the thought process of keeping it after experiencing that much negative value from wasted time.
As well as not debugging on docker, remove the docker compose project from the build configuration.
Sorry, can't
We've been caught, /u/FizixMan!
Microservice architecture has its place, but can involve a lot of moving pieces and fewer people have the right experience. Since there are inherently a lot of network boundaries few people build the right mitigations (circuit breaker, retry logic) or instrumentation (health monitoring). With a typical 3-tier web/api/RDBMS system these can be less of a concern. I still see a lot doing microservices and such, put N instances behind a load balancer, get some rough scaling out of the gate and think it's going well, but do a poor job properly utilizing data storage to scale. Probably first key problem I see most is not using partitions. You have to use partitions and think hard about access patterns and make sure they are built to scale as well.
OP is basing his question off a popular Github project - its now his own. The question is more general than specific to his own code base.
The knowledge you learn has value regardless of the cert. 
Keep in mind that the GitHub repo was also designed to highlight Docker and containers. Containerization is completely orthogonal to microservices. Microservices is a decades-old concept that absolutely does not require Docker or containers (the ideas date back to the 60s).
You'll find value in the learning experience. The test to get the cert isn't terribly expensive, either. If you have the extra time to invest, I'd say go for it. I do not have a degree but read rather constantly. It's done my career extremely well in that I can talk intelligently about problems, know possible solutions that others do not, and know where to go to get them working. 
All the normal troubleshooting steps have occurred with the other commenters, it's time to dig deeper. - Can you post your Routeconfig.cs? - where is the controller located? Show a screenshot of your directory tree in your solution with the controller showing. - What is the name of your controller and action right now (you've made changes, according to your other comments)
"Full time / permanent" is a better deal from my experience and those of pretty much everyone I know. I think there's something to be said about starting your own company, setting up an LLC, and doing consulting, however. Harder to do this due to marketing/sales efforts, but if you have the right network and contacts it can be very lucrative. 
Are you trying to set default values? What are you trying to do? Maybe you can post the source on GitHub and tomorrow I can dive in and help?
[Shhhuuutup](https://youtu.be/3sX_sE31r9Q), they don't suspect anything yet.
I don't doubt that works for you. I'm just trying to bring up that for someone else a chance to work from home might actually even be a bad thing in the end.
Oh no doubt. There’s been individuals at my work past and present that abuse it. 
What exactly are you trying to do? There might be a eaiser way that is also good pratice
ArrayList is an older alternative to List&lt;object&gt; before C# 2, which introduced generics.
Audio warning, maybe?
By SQL do you mean mssql? Or [structure query language](https://en.m.wikipedia.org/wiki/SQL)
Desktop link: https://en.wikipedia.org/wiki/SQL *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^248086
How extensive is your testing? I find that I can test most functionality with tests and eliminate the need to run through my code in debug.
MSSQL I can do LINQ also. 
&gt; See, the problem I have with this (no pun intended) is there is nothing EXPLICITLY enforcing this **design pattern**, as opposed to any other. In all fairness, you did say exactly that. 
Unironically impressive CSS tbh
Contractor, and I'm in Ottawa, where most of the work is with the federal government. I like jumping between ministries and seeing what other people are doing and how they do it. I've been asked if I would be interested in being an employee at a few departments that I've worked for, but I just can't imagine going to the same place and doing the same thing for the next 20+ years. But surely I'd be promoted into higher positions over the coming years, you may presume, but higher positions are bilingual imperative. 
I think you are going about development the wrong way. We use a microservice architecture and I will usually just run 2 or 3 visuals studios at once. Way faster to run and debug like that then going through the whole docker deployment. Once I commit our CI/CD process picks up the changes and deploys to a server environment
Meh
Containerization (a la Docker) is a deployment, not development, tool. Your code should be able to run inside or outside a container equally, and once it does you’re all set: just bind all the services to localhost during development. 
[Dear god..](https://i.imgur.com/yJaIvai.jpg)
"this" in this sentence was not in reference to the keyword `this`, I suppose a clearer way to state that would have been with this idea or concept. My mistake. 
This looks so terrible
Temporarily deaf now but cool.
That’s not even how it works in the US It’s completely possible to be a long-term contractor. You work on year long contract terms with basically the same security as any regular employee. There are a number of pros/cons
As is typical in most software developments, its readability/usability was not a consideration.
Agreed. It met the MVP.
Interesting indeed. Do you still get paid competitive day rates as the same securities as a US contractor?
Interesting. I’m going to look into permanent salaries for the US vs UK as by the sounds of it, it isn’t as common to be a ‘1099’. The UK is quite different in my experience, contracting is not too difficult to get into if you are brave enough to make the leap and compared to your equivalent ‘grade / level’ can be extremely lucrative of the start line. 
Okay. Own company? Or is C# a hobby?
UK / US? What makes you stay being a salaried employee?
This is a great response, I can completely relate to the working environment ‘trumping’ salary / benefits. If you buy into your company vision and the team you work with are spot on then it does make it easier to want to do good work for them! WFH is always an added benefit. Coffee. Code. Cake. All when you want it. 
I can completely understand your motives, government contracting can be great. If you build your position and work hard to keep it and become invaluable to a department then a few business cases later and you can be set for the next 10 years as a career contractor. If you were to be bilingual as a contractor do you feel it would open more doors?
Personally independence and then money. I love the freedom to explore new ideas and avenues but also to have the financial freedom to upgrade my laptop or buy a new VR headset (with my wife definitely knowing about it) when I would like. 
You could do If (item is Biscuit) Eat(item as Biscuit) 
Canada. The company I work for is fantastic: great colleagues, great management. Everyone there wants to make the product better and help each other learn. Challenges are met head on and there's little to know "pulling rank" when it comes to solutions - a junior 3 days in can still have good ideas and people will hear him/her out. In short: it's a great environment. Plus the stability of a steady paycheque is nice.
Hey dude. MVVM - Check it out. You are absolutely right, loosely coupled WPF projects are the right way forward. There are tons of lightweight and very easy to implement frameworks for MVVM out there. Each have different methods of resolving DataContexts. You can use a Service Locator, name based resolution or directory referencing the VM in your Window.DataContext element. 
Also sometimes VS won’t initialise a VM binding in designer mode. 
In the US you basically have W-2 tax form and 1099 tax form. W-2 is a full time permanent job with benefits (assuming &gt;30hr/wk job). 1099 is for independent contractors, you just get paid and have to handle your own healthcare and other benefits (retirement, disability. Some consulting companies will hire you W-2 but only for a specific job or placement. Some people call that contract, but it really isn't. You still get benefits including unemployment should they end the project and fire you, though unemployment can be a pittance in many states. Usually its because where you are placed doesn't want the HR overhead, want to "try before they buy" or have a short term project. 
The more people I come across that are permanent really buy into their company ethos and direction... the question is: what is the companies approach to beer on a Friday?
There’s new shorthand for this If(itm is biscuit b) {...} This will create b by casting itm to biscuit
Okay so W-2 is permanent and 1099 is contract. Makes sense. Do employee still pay your tax at source for a 1099 or not? Do you have any more rights as a 1099 than just a simple contractor?
You should be careful here. Many people don’t understand what var is at first. It DOES NOT create a dynamic type variable. Instead it looks at your list, sees the type is “object” and it creates an “object” variable
Yes your right, apart from the variable names ;) If (item is Biscuit biscuit) { biscuit.DipInChocolate().Eat().FeelGuilty(true); }
On my first day the CTO gave the other newbie and me a small tour. In the kitchen he pointed out the various drinks and snacks that the company provided: CTO: "You've got bagels, cookies, fruit, soft drinks, sparkling water, espresso, beer..." (This is where he noticed a bottle of brandy on the counter) CTO: "Brandy, haha" Me: "Good for a Friday afternoon!" CTO: "Friday afternoon, Monday morning... Whatever you want! (hearty laugh)"
This. This is why people stay. This and clean, efficient and well tested code. 
Which we also strive for! I'm telling you I seriously lucked out, haha.
Absolutely, Should have gone the superior dark theme.
Sorry :) bad recording
I totally agree with all of you guys to write proper Unit / Integration Tests. I prefer the tdd approach. Sometimes it could be a solution to map your Code temporarly as a Volume into your Container. Then you have to save/ build your Code locally and a simple restart of your application in your Container is necessary. You will save the time to rebuild your Containers. I use docker compose for this Kind of use case. 
At best meh. I can play better games on Kongregate in 2002
Thank you for the heads up! offtopic: wow that css.
At least I don't have a warning about ReSharper causing 13 seconds of delay at the top.
You should check into reflection. Check the type via reflection and cast it into the appropriate type. If you use the 'as' operator, it will return null, if the cast is not successful. If possible, you might want to think about implementing on an interface and adding it to your collection. I think this would be the much better approach then working with reflection.
I had the chance to do 70-483 for free while I was doing my last year internship at Microsoft I'm Belgium. I never struggled to find a job and it is definitely something more to bring on the table when looking for your first job, even as a student. My previous boss used to bring the "c# certified developer" on the table when talking to clients to seal the deal. It is a good way to show that you like learning stuff and that you are good at it imo. Good luck in your search ;)
How did you get the `:` character in the rule filenames? Seems fake.
The internet has made me hate April Fools Day.
Use DbContext. It is already generic and provides both unit of work and repository implementation.
 string reaction = "badass"; Console.WriteLine("This is {reaction}");
This is amazing.
I will send the code today evening, in the meantime there already are 2 links in the original post where you can see my code. So its like this: Entity Framework generated a class for me - thats in the first link. I want to add my own getters and setters to it. Those getters and setters will call OnPropertyChanged when the user adds something to the Invoice window, for example when they enter Amount or Price it should calculate NetAmount and TotalAmount. I decided to use INotifyPropertyChanged, because I want it to be calculated dynamically so that the user can see the results immediately. I decided to use inheritance and inherit from this class - that's how the class in the second link was created. When I try to save to the database however, I get an error. The error message I posted in the original post. I tried using partial classes, but when I do that, the compiler tells me that these properties have already been defined. Which makes sense, because I cannot 'override' properties using partial classes, so now I am stuck. 
We have around 20 sevices in project, but in usual task can be changed 1,2 maximum 3 of them. I open services, where i will make changes, in IDE. If i need some other services for work, but dont want to change them, i run their last release versions locally in docker or inside kubernates test cluster. Also i have global solution with all services outside of git - for case when i really need debag everywhere. But i didn't use this solution last half a year. &amp;#x200B;
Stripe. 
I've tried the generic repo&lt;T&gt; inherited by actual implementations. Far from perfect. But works.
Could not agree more.
https://dnug.berlin/dnugbb/ (certificate expired, but legit) Organized by Robin, a great guy.
for the querying part in most cases no further abstraction is needed. Updating however I usually put somewhere to have some control over it (in a Mediatr handler for example), to apply constraints/deep validation and logging etc 
What's the tech stack behind the game?
Thank you very much! Just what I was looking for.
Thanks for helping people! The problem has been solved :) 
Awesome! My boss thinks I'm working :-)
In my opinion then permanent job should be avoided. If you have ideas of what to do, find your own company and you are pretty free to do whatever you want. And if you want money, just get hired to projects thru some consult company. For example we are looking for new people all the time, but then again, so seems to be everyone in Finland.
So I left my background out for a reason. I’m a career contractor it’s my own business. Just interested in everyone’s opinions. Finland sounds cool!
CQRS fits what you're describing perfectly as well.
Are you directly exposing the `IQueryable&lt;T&gt;` of Entity Framework in your generic repository?
Thanks I hate it
Germany here. I've always been a salaried employee in the beginning of my career. It's great for security. Employee protection laws are strong in Germany, so getting fired is pretty much not an option. Health insurance is strong here as well, I don't have to worry about money when I get sick. However, 2 years ago I quit my job and started to become a contractor. I'm selling my work-time, not a product. I get hired by companies to work in their teams for some time (usually 3-9 months). At the end of the month I write a bill based on my hours worked and that's it. The pay is a lot better, but the risk is higher as well. If I can't find a new project I won't get money (tho this just can happen due to lazyness - the demand is there). If I get sick I don't get money. If I go on vacation I don't get money. I still prefer contracting (at least for now) for the sole reason of growing myself. As a contractor I can change projects and companies more frequently. I get to know more companies and how they work, I get to know more people and code bases. This will help me grow.
I used to use a base AbstractRepository&lt;T&gt; from which all my other Repositories inherited, along with interfaces for each repository (and more general IRepository&lt;T&gt; from which they all inherit). Each Repo would expose IEnumerables rather than a queryable interface, where a dev could craft a query where more could be extracted from the database than they were aware. Back in the day I was using NHibernate though (back before EF was even close to being parity, like pre code-first EF and when .edmx was all the rage). Even though ISession did change tracking, I found it not so clear as EF and DbContext with its interpretation of the Unit Of Work pattern. Now I just go EF and DbContext with it's lifecycle handled by the IoC container and the correct scope. One of the benefits of this method is easily using eager loading when you need it. I found with the Repository pattern I needed to create lazy and eager methods for the same query, depending on the situation. I'd hope all but the most junior of developers understand the difference between IQueryable&lt;T&gt; and IEnumerable&lt;T&gt; and if not, hopefully a couple of code reviews at before merge will make them aware.
XAML is just C# code written as XML. &lt;Window Height=100&gt; &lt;Window.DataContext&gt; &lt;MyViewModel /&gt; &lt;/ Window.DataContext&gt; &lt;Grid&gt; ... &lt;/ Grid&gt; &lt;/ Window&gt; is var window = new Window; window.Height = 100; window.DataContext = new MyViewModel(); window.Content = new Grid(); On window, both Height and DataContext are properties. Height is a simple property, so you can set it as above, DataContext needs a bit of effort to create a new object, so we use the second syntax. The only "tricky" one is the grid. It's actually setting a property called "Content", which is the default property for content controls. As an example, if you have a button and just want to give it a text label, you can do this inline: ```&lt;Button Content="Hi!" /&gt;``` instead of ```&lt;Button&gt;Hi!&lt;\ Button&gt; For your binding issue, you'll need to provide a bit more code, but it might be that you're not using INotifyPropertyChanged (either properly or at all)? 
I used it before ef.core. Used to hand roll repos for testing. Now with ef.core, I just use in memory database for testing so no need for testing. I have never liked repos. I think they give you a false sense of abstraction 
Super wrong to not have the opening brace on a separate line
Without going too much to politics, Finland isn't really a sexy country for serious professionals. Too much taxing, dark, cold and insanely hard language (although a lot of people speak and write a lot better English than I do, English is definitely not my native language).
That is a built in .net function. But it's not available in Core. Could that be the problem?
It's a function on the AppDomain class. It doesn't exist in Core though.
I love it But somehow, I feel like loving it is wrong.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [The guys at \/r\/csharp have a new design](https://www.reddit.com/r/programming/comments/b8098i/the_guys_at_rcsharp_have_a_new_design/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Microservices need to be regulated closely. I don't deal with docker, but as a general rule; if the services require a lot of debugging across sides, I will merge them together as it massively accelerates debugging. I tend to leave microservices for more simple programs. I recently made one that parses IIS request logs for a website and puts them into a SQL Server db. The web application producing these logs can now query them as required. There's not really any need to debug from the web API to the request logging program, so it doesn't cause issues. As another example, I had an MVC project and an API project, and it was very common for MVC requests to hit both projects. This was an absolute pain in the arse for debugging, so I merged the MVC project into the API project. TL;DR: Make microservices for simple, isolated programs.
 if(user.ComplainsAbout(redesign)) { user.Score---; }
$"This is { reaction }" ftfy
Visual Studio + Unity2D + C# No fancy mathematics, just how it is done in practice. 10 posts on the blog for the artificial neural network with actual data and source code.
Master's degrees vary by country, but in England they tend to be 4 years as you specialize from the very beginning.
You don't need to know about PCI to accept payments. You partner with a company that handles this for you. Braintree is one such company, with amazing support, but they don't have any Xamarin SDKs, so it's a browser solution for us. There are also other companies like Stripe. These companies take the payment details and process the payments.
&gt; it will eventually explode. Unless it doesn't. It depends. For console apps, it probably won't since there is no sync context in play.
DbContext is fine when it's use crud, but if you need to start adding helper methods (GetAllActiveOrders, GetLastMarketPrice, etc) then it gets its own repository. Also, repositories are used when the data source could change, and to add caching etc (ie use an API, but cache locally, etc).
This is still a JavaScript question, because the front end is made separately from the .NET web app. However, AngularJS works with models attached to the $scope. Properties on these models are changed in the view by updating the input elements that they are attached to. AngularJS has two-way data binding that keeps the model up to date at all times. All you need to do is send the same model back to the server. There's not really anything in your question that would tell us why it's not working, but if you can't get your AngularJS working, you could wire up some onChange event handlers with jQuery and update data manually.
Thanks for the bug report. This was purely a visual bug, the underlying file system implementation was fine. Nothing fake. No fake. You're the fake.
Chris Pratt has an ( i feel) really great couple of article on abstract base entities and generic repositories. It's the only approach I personally use anymore. All for dumping the Unit of Work wrapper, it's just pointless bloat.
Holy shit this fucking hurts to look at
Jesus this is some crazy good theming
VB/F# should have the respective logos in the sidebar
I've edited, as obviously it wasn't clear: I am UK based.
Legit though, this is really good haha. As someone who can only just about make bordered table cells with CSS... Good job man
To much tax seems to be a problem for all of us. 
&gt; All for dumping the Unit of Work wrapper, it's just pointless bloat You prefer a round trip to the database for each operation, then?
Nah that's not what i'm saying. I'm referring to the age old monolithic Unit Of Work class that people would layer on top of a generic repository abstraction. Where you're basically just wrapping the dbContext( a UOW) in a UOW. Not sure where the round trips for each operation would come from. 
can we have it like forever? its plain gorgeous
error. "reaction" not defined
Got it, you meant UoW on top of EF, and I agree.
waoh.... I'm honestly stunned.... Great job guys! :D
How do you really unit test without a repository interface for mocking external data sources? Sure, you can use InMemory EF provider but it does have some glitches of its own. For example, it doesn't clean up between xunit theories, you have to manually seed the actual database and it's a bit confusing when to savechanges() and how it behaves for inmemory db. You introduce a hidden logic in tests. Also, it' might be subjective but I think my IRepository mocked tests run a bit faster than InMemory ones. When you have 1000 tests with InMemory 10ms -&gt; 10s but with mocks 5ms -&gt; 5s. This is important for me when doing Live Unit Testing and TDD. For me, writing Moq on IRepositories is a lot more safer and smoother than initializing InMemory context.
If that's the case, what's the actual design pattern that you're referencing? Because everything we're talking about here is code style. Design Patterns are a completely different concept and they have a specific meaning. There's no "Design Pattern" for creating adapters and deserializers. That's a **paradigm** of convention over configuration. It's a totally different concept than a design pattern, so when you are using these terms interchangeably, everyone reading is getting confused as hell.
The survey does not appear to include developers using custom solutions, on the contrary, it explicitly lists those as "reason not to use UoM libraries".
Both ;-)
Lazy loading will easy lead to **more** requests. The argument "preserves DB requests" is only true if you rarely access the properties to cause lazy loading. But if that is a common approach, then it's usually better to just load everything at once, instead of step by step. Worst case is a "1+n" issue. You loop over a collection, and each time you access a lazy loaded property. That means you have 1 request to get the collection, and n more individual requests to load the lazy loaded property each iteration.
And what was the solution? Might wanna post it for other people that run into the same issue :)
If the language supports UoM, then they're usually used. C# does unfortunately not support UoM, so adopting in C# is.. non existent.
Sorry if a few of the questions are a bit awkwardly formulated but that fall into the subset of developers using UoM libraries (even though it's a custom solution). Though now you mention about it, I should have explored the reasons why developers would prefer to implement a custom solution than use a commonly used UoM library.
F# does have inbuilt support for units of measure. But I mistakenly conflated that with C#.
I had to find the "turn off style" button in order to find this thread
Slightly broken with 140% zoom on 1080p - the [Meta] flair is offshoot and some other layout issue with text lines: https://i.imgur.com/3stLDD1.png 
now i have to wonder why auto complete is not triggering when typing posts.
In my case, custom was simpler because of very narrow requirements. My reason to not use it in general is that I strictly use SI units, so there isn't a huge benefit.
But what really sets off C# from C++ is that it is continually moving away from saying and seeing extra visual baggage. I call it the ergonomics of the language, the inverse ratio of how much syntax there is in a program to how much you wish you had in order to say a thing. So there's something odd here in seeing extra syntax added to look more C#-like, since it's like that's going in the wrong direction... Fun attempt, though. I always like it when people try stuff like this. I just hope everyone keeps in mind that the real coolness of C# is that it looks less gratuitously nerdy and lets you focus more on the domain, not (as here) vice versa. So when April Fool's Day rolls around (next week, right?), maybe the final version will reflect that. :)
Interesting to see a dissenting opinion, but I completely disagree. Storing local time to me is only appropriate when the data is only used for display logic. Otherwise data migration, data comparisons, and just general database readability (via common select statements) are all unnecessarily difficult. now that SQL server has the capability of including time zone in the data, it amounts to a similar thing, because that's essentially what SQL server is doing -storing the time relative to utc as well as the user. But In the end pick the data that makes sense for your use cases.
Looks great except for one thing completely destroys my immersion with this theme - the footer says `Build succeeded`. Riiiggghhhhttt.......
But the comment blocks all have it on a separate line. Really gives that authentic feel of looking at the previous developers code.
Nice job on the css guys.
I prefer to still wrap entity framework with a repository but I don't use a generic one. That way the repositories actually represent what your application uses. If you build it correctly there is no leakage of EF stuff to higher layers and it makes mocking a lot easier along with easily letting you swap out methods to use dapper for example. 
I love it. Please give me a way to do this permanently
this
You can use lazy loading if you have little data with a very simple database schema. Otherwise it gets terrible pretty fast. Using Include lets you control what is happening and especially WHEN. It gets difficult to measure your application's performance bottlenecks when your database can be called anytime
End user satisfaction was not a requirement
Can someone add a screenshot of it since im on the mobile and i cannot try it by myself
The big cross-platform lie that results in `PlatformNotSupportedException`. They should *just* remove the unavailable APIs.
https://www.reddit.com/r/programming/comments/b8098i/the_guys_at_rcsharp_have_a_new_design/ejveosz/
i want this to stay...
Woops. I knew we forgot something.
They are indeed quite different
Okay cool. I'd like to run a use case by you if you don't mind: I want to load a Company for editing, but since I'm not manipulating any of the information to do with the company's fleet of cars, I don't want that data. Should I just never mark my related entities virtual and thereby prevent lazy loading? In the above example, this would be fine since I don't need the cars, but what happens when I do? I can't overload `CompanyService.Get(int id)` to get the Company with *and* without the Cars list. I assume then that the best course would be to have a method `GetWithCompanyCars()` for example? This could get expensive in terms of code to maintain if I've got a lot of related properties on the object...
Looks like absolute dogshit, love it
Also disable client side query processing if using EF Core or you can still get 1+n queries during the initial request. 
Hah. You know, I think it would have been possible to setup separate dark and light theme variants via the flair filter hack: https://www.reddit.com/r/LinkFlairCssCodes/comments/1kmlo6/beginners_guide_for_setting_up_link_flairs_and/ But developing that would be ***brutal*** with my astigmatism. ([looks like this, but not quite this bad.](https://jessicaotis.files.wordpress.com/2017/11/full-text2.png))
OMG, please stop. This is actually stressing me out. Stoopid April Fools.
Thanks for the migraine. :p
loool XD
I love it. Now only need about three things from you: 1) The CSS so I can put it in my extension for future use when you eventually disable it 2) to change it to dark mode 3) I forgot 3 but maybe I'll think of it the moment I post this
Starts the douchebaggery then gets indignant when he gets some of it back. Don't dish it if you can't take it jizz stain.
That makes sense. Thanks for the confirmation :)
Interesting.
https://m.imgur.com/a/4dllXip?utm_source=share&amp;utm_medium=ios_app OfFsiDe 
Back! I'm sorry for the delay. Now if it's not too late, here it goes: &amp;#x200B; I loved the examples, but I have a few notes. For example, on your HttpPost Section, you're receiving the actual Model you want to work with instead the ViewModel and only then create the Model and pass the data from it. Is it a better approach to create the action as you described? &amp;#x200B; As a short example, taking into account the AspNetUsers and AspNetRoles classess, if you want to let the user select which kind of role should be assigned to a certain user, wouldn't it be better to receive (HttpPost section) a ViewModel with all the information and create a new User with all the extra information from there? &amp;#x200B; Also, how did you "link" your last variable " selectedCategories " with the checkbox selected values from the view? Is this a default behavior from .Net? And if so, is it doable for other kind of multiple options such as DDLs or you're better off creating a variable that holds the ID from the selected value from the list? &amp;#x200B; Thank you so much for the help, while my goal is not to create an "amazon-like" architecture I'd like to stick with the best practices and sometimes when I'm stuck, I might end up following a few solutions that might not be the smartest to apply (such as the ViewBag, as you mentioned). &amp;#x200B; Thank you, @sander1095
No all caps menus? Ugh, total garbage.
Are the older versions worth reading before? Whats so good about it? Maybe i get it. 
Before getting worked up about this, you should really read the proposal linked in the article.
&gt; Should I just never mark my related entities virtual and thereby prevent lazy loading? That's up to you? You can also just globally disable lazy loading for your context. &gt; In the above example, this would be fine since I don't need the cars, but what happens when I do? If you don't eager load it and lazy loading is disabled, then the property just has whatever value was assigned in the constructor. Most likely it's `null` and you will get an exception when attempting to access a member. &gt; I can't overload CompanyService.Get(int id) to get the Company with and without the Cars list. Uh.. Sure, you could. If you want. That's a design decision. &gt; I assume then that the best course would be to have a method GetWithCompanyCars() for example? Or you have a `CarService.GetForCompany(int companyId)`. There's no universal right answer here. &gt; This could get expensive in terms of code to maintain if I've got a lot of related properties on the object... Abstraction, like the CompanyService is, usually comes with overhead. It's a decision the developer has to make. 
This is triggering PTSD from back in my visual studio days...
Unfortunately, this doesn't show that parallel.for is faster than rolling your own; what this shows is that updating shared state is a lot slower than keeping local state and only updating shared state AFTER the full calculation has been performed. The same result, as far as speed, could be accomplished had he done the same in his original code where he has an array of tasks.
Definitely worth reading if you use mainly C#. The book does a great job explaining how things work when you use the language, going through each version of C#. The previous version goes up to C#5 (2, 3, 4 and 5).
I don't work with future dates and times much, so this advice doesn't really fit well with what I do. In fact, it's quite the opposite case for me. I write and maintain shipping/logistics software. We used to have all of our dates as local. It was a constant source of issues with users complaining that "it's off by an hour". Sometimes it was a TZ issue, sometimes it was a DST issue. But it was *always* a huge headache, and usually unfixable. We re-architected a huge portion of the system (for *other* reasons) and took that opportunity to convert to an all-UTC system, and built ourselves a couple of scalar functions in the database to do LocalToUtc and UtcToLocal conversions, which accept a time-zone offset for the conversion (based on location data) and "automagically" convert for DST as well. (It's just a wrapper around @someDate AT TIME ZONE 'UTC' AT TIME ZONE @locationTZName, really. Or the opposite order, for the Local-to-UTC conversion.) Now, when we have a shipment that leaves, for example, Indianapolis (Indiana is all Eastern Time), goes to Decatur (Illinois is all Central Time), then goes to Evansville (back to Indiana), the scan times for all of that freight is compared *in UTC*. So we know that the truck left at the correct time, arrived at its stops at the correct time, and stayed on schedule with no late deliveries. This is a common issue for US trucking carriers, since trucks often cross TZ boundaries even on a "local" delivery route. (Indy and Decatur are only about 150 miles apart.) And another issue that this article brings up that's very specific to other situations is that of DST changes. The US DST last changed in the Bush-43 administration, but it moved the start/end dates each year by about 3 weeks. And it probably won't change again for a few decades. So, yeah, if you're in the EU, you have some changes to deal with. But in the US, we don't. If you're not affected by this change in the EU, all of his reasoning about why not to use UTC dates falls apart completely. So while UTC isn't a silver bullet, not-UTC is also not a silver bullet. Which brings us back to where we've always been: *think about your architecture and designs and don't slap things together because they're "best practice" in someone else's situation.*
Very classy.
I think in his preferred approach he stores both local and utc. So you aren't losing the ability to use utc for comparisons etc. That said I have almost never regretted just storing utc, but I can appreciate that there are cases where it would be useful to have the timezone.
I didn't write in the article since it wasn't conclusive, but my experiments showed me that: I can get to the same performance as **Parallel.For** by manually queuing to thread pool. So I didn't actually prove that Parallel.For is more performant than "manual" parallelism. It just has better syntax. Having said that, I'm guessing there's a lot of optimization the TPL guys did which will show in other experiments. Or maybe it just determines the "MaxLevelOfParallelism" better for different cases.
Did you read the article? He discusses a situation where storing UTC doesn't work correctly.
I never found a use for document stores until I was evaluating Umbraco. I'd never used a CMS before, so I thought it best to try developing my own. I started converting parts of my site to be content managed, thinking about the database, and a rigid schema doesn't really work with the CMS concept. However, Umbraco does use SQL Server/MySQL to store its documents anyway. The only thing I would personally put in Mongo's favour is that SQL Server can become very expensive.
Read the proposal, makes sense to me!
End users are the dental appointments of programming. 
&gt; Indiana is all Eastern Time Not that it matters for the example, but that's not true. Evansville is actually Central time. There are a number of counties in the northwest and southwest of the state that are Central time.
Fair point but you also make it out as if lock statements and interlocked operations are the reason why the code is slow when you really take a completely separate approach on how you solved the issue without ever explaining why it was solved...calculation everything and storing it locally vs updating shared state on every iteration. This is a very VITAL aspect that most will miss. I think you did a very poor job with transparency in this sense and it will cause developers to instantly think that locks and interlocked operations should be avoided.
No dark theme? this is awful... I love it
Yeah, like I said you should analyze your own requirements, but as he said his preferred method was storing local time, I got the impression it was meant his general preference, not his preference for this specific problem.
Mine is supposed to be here tomorrow!! Totally haven't been checking the Fedex tracking for the last week. Nope. Not at all.
Yeah, Gary is "east Chicago" and gets stuck in Central Time, but for the most part, those areas aren't much of a concern due to the particular business this shipping carrier specializes in. Evansville is, though. In any event, using UTC across the board made those transitions *far* more manageable. Prior to that change, one of our biggest problems was when a mobile barcode scanner device would cross a TZ boundary, but not be in cell-tower contact for a clock update. Then you'd get CT locations scanned with ET local times recorded against the scan event. Now, we just grab UTC from the scanner and adjust it for the known location on the server side.
The solution explorer belongs on the left side. No dark theme. Unable to use.
Yeah probably can emphasize that part more, Thanks. I'll see about editing. As a side note, I do believe locks should be avoided if possible without adding too much complexity. 
As a beginner in c# (some knowledge I have and also in ASP. NET), do I have to go through previous editions or I could start with this one? 
Why test it on Edge? That is going away in a few months.
Holy shit is this dedication or what? It's an almost perfect reproduction! I want to sat good job but I feel like I am too much of a nonentity to say it. 
I know that this is probably only for april fools day but damn, this is one of the best themes of any subreddit I have ever seen. Hats off to whoever did this.
Editions != Parts
1099 the employee is responsible for taking out taxes, paying quarterly estimated taxes due, etc. W2 the employer does all this, you only full out an exemption form for state and federal when you start to let them calculate the right amount. 
Only 13 seconds? Lucky you...
I thought I did VS2017. Maybe I have some custom local styling that looks like VS2015? I don't remember anymore. Regarding Edge: because I had it available.
The article probably should have mentioned that the underlying CLR features needed have been there since .NET 1.0. There's a rarely used VB feature that requires it called `On Error`. https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/on-error-statement
Can we get visual studio code too?
http://codereddit.com You are welcome
I’ve found birthdays to be another place where local time is more important than real UTC time. If you were born on the west coast on April 1 at 12:30 AM, but now you’re on the east coast, that doesn’t mean you’ll celebrate your birthday on March 31. Similarly, you won’t consider your age to be the next number until April 1. It’s important to keep in mind what the user *thinks* they’re entering. Almost always, UTC makes everything better, but for future meeting times that might change and birthdays, they mean what they said instead of an actual time.
He maintains NodaTime, so he has a wide variety of options. Sadly many of them are not supported by the database. 
Yea, I never understood why they did that. It doesn't benefit us for sure. So who does it help? 
&gt; Or you have a CarService.GetForCompany(int companyId). There's no universal right answer here. This seems like it'd be the better way to go tbh but I don't think I like it anyway since it still means another round trip to the database. Still, 1 query is better than "1 + n" right?
this.Comment = "Now this is just beautiful. Great CSS work, you monsters.";
I'm definitely going to have to look at the struct usage in my code now. I always forget about the defensive copies. 
Paste in your code, not photographs of it. 
Don't run your Visual Studio in administrator mode.
Your environment variable is x86 but you're probably debugging as Any CPU on a x64 machine?
This is some pretty damned impressive css.
//Argg! {All the braces} //Argg! {Where my dark theme?}
&gt; 1 query is better than "1 + n" right? Uh... How does it make a difference? If you need the cars for multiple companies, then you'll call the `GetForCompany` multiple times, then you end up with "1+n" again. Or if you just have one company, then "n" is 1 and you just have "1+1" (2) anyway. Regardless, if you don't like it.. Either always include it, or provide an overload with a flag, or just drop abstractions that don't suit your need.
&gt; or just drop abstractions that don't suit your need. I've actually been debating whether I should just scrap the abstraction altogether but deadlines approach and it would be a hell of a job to rewrite every page (asp.net web forms I'm afraid - company policy) to use the DbContext directly...
Thanks for the clarification! 
Stahp, you're giving me flashbacks!
Just get the new one :) He's doubly good at this actually. The original started the idea of doing a bit of a history lesson so you got to see how the language developed. That's continued in each new edition. &amp;#x200B; The first edition was one of the first C# books I read and I've been a fan ever since. &amp;#x200B;
Nice mate, thank you :) 
Lol! I've been home ill today. I wasn't expecting any deliveries, so when the door bell rang I went all church mouse until they buggered off. It was a nice surprise :)
On my Gameboy it was called Galaza
Because it's not a dark theme.
Bug Report: I can't click on the back button or window name to go back to the main subreddit page.
I agree. At least we can turn this one off, though. One joke here and there would be great, but it's every post in every sub. 
Every sub. Every website. Every news feed. And most of it is more annoying than it is funny or interesting.
nbvvhj
&gt; you can't do anything custom for resolving, such as overriding a parameter/injected type Yes you can: serviceCollection.AddTransient&lt;HttpClientService&gt;(serviceProvider =&gt; { var httpClientFactory = serviceProvider.GetRequiredService&lt;IHttpClientFactory&gt;(); var someOtherParameter = serviceProvider.GetRequiredService&lt;ISomeOtherParameter&gt;(); return new HttpClientService(httpClientFactory, someOtherParameter); }); Inside that lambda expression you can provide whatever kind of generator you want for any type. Unless I am misunderstanding your use case?
Awesome
Is it bad that I want the rest of reddit to look like this forever? 
Sometimes it can be favorable to use .Load() if the whole table of your navigation property is going to be included anyways.
And still, you managed to end user satisfaction!
How the hell do you turn off custom CSS for a sub? I'm never enabling it again.
Windows/.NET isn’t very good at child processes inheriting environment settings (as in they don’t). You will need to copy your environment data (PATH) into the environment of the child process before executing it by using StartInfo (if I recall correctly).
This is giving me PTSD. WHY DID YOU DO THIS?
Regarding back-button: I wish I had thought of it. Regarding window name: Also wish I had thought of it. For now, you can click the Visual Studio logo icon at the top left to go back to the root https://www.reddit.com, or you can click the "C#" logo at the top-right by your username to go to the subreddit root /r/csharp.
If you're using RES, there should be a built-in button in the ~~sidebar~~ Properties widget right above the "subscribe/unsubscribe" buttons or number of subscribers. I don't believe there's another way of turning off individual subreddits without turning off _all_ subreddit styles (you can do that in your user settings).
Whenever I try to put weirdly specific pages on the Internet Archive's Wayback Machine, I always find that 3+ others had the same idea.
this.Score++;
&gt; I can't overload CompanyService.Get(int id) to get the Company with and without the Cars list. I assume then that the best course would be to have a method GetWithCompanyCars() for example? One common technique is to consider the scenarios where you do and do not need the Cars list as separate bounded contexts. Google can help with more detailed explanation, but essentially you say even though we're dealing with a "Company" in both scenarios, we need something substantially different for a "Company" in one place vs another. The simpler method is just to load all the data for a Company whenever you retrieve one. Is it really going to matter if you do that? Probably not. And if it does end up mattering, you'll likely have this specific scenario where loading all that data is too heavy and you need better performance. It's relatively easy at that point, once the need is clear, to break off something along the lines of a bounded context to handle the specific, known situation where the normal case isn't good enough. This is a *super* common problem to encounter in business/crud/enterprise type apps, in most apps really. You'll want to understand your options and their trade-offs well.
No, they inherit from the starting process by default. The underlying Win32 call is CreateProcess, and it says &gt; A pointer to the environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process. The .NET documentation is slightly less clear, but I am positive it works the same. 
Unless you need to. Maybe OP doesn’t, but I sometimes do. 
It didn’t the last time I had to code loading a process. The documentation made the same claims when I had to work around this same problem. Maybe it is fixed now, but I would not be surprised if it hasn’t.
Why no mention of `DateTimeOffset`? That has been my routine solution for this sort of thing. https://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset?view=netframework-4.7.2
I have no choice, that's how IT setup my laptop. On the plus side it's a way to get an admin console without their permission. 
One of the reasons NodaTime (and JodaTime) exist is because descriptions of time are *very* context-sensitive. Some times are absolute, and never change. A timestamp of an event that happened in the past, for example. Most times are relative. Scheduling often uses xth-unit-related-to-y, like "10 minutes after midnight" or "second saturday of June" or "3 hours ago". Relative times are often *recurring*. Databases don't handle this well at all, and need a *lot* of very *error-prone* assistance (usually from app code) to make it work. And then there are *speculative* times. Exact moments when things *might* or even *should* happen, but that are "working data" that could change between now and when they become a historical absolute. Additionally, precision matters *in context*. If something occurs daily, you need to know what time of day. Sometimes that's "at noon" and sometimes that's "at exactly 07:32:48.039". But without truly *stupid* amounts of custom logic, there's no way to know whether you should require better precision for a given time value. By rights, *all of these* should be separate data types in a database or programming language. But the way things work now, we have to generalize them all down to just "when" or "how much", rather than working with them in all of the different contextual situations that they get used for. And not even [JN]odaTime fixes all of those issues.
&gt; I can get to the same performance as Parallel.For by manually queuing to thread pool. Without testing on a system that's under contention from a variety of tasks, that isn't saying much of anything.
We’re local admins at work. Otherwise I think I’d really get frustrating. For example, on Windows you can’t really bind to local HTTP ports from a console program without adding settings to netsh. Stuff like that. That said, my default shell is not elevated. 
My experience is that it inherits. This doesn’t mean that it gets changes made to *global* environment, so maybe that’s what OP did.
My contribution at my last company was to fix this issue with our software when running dynamic reports. Because the object graphs were legitimately huge and twisted in on themselves, we didn't want to just eliminate lazy loading, so I ended up getting the XML for the report and finding all the referenced properties to determine which child objects should be loaded in bulk. This feature was an opt-in because it wasn't implemented perfectly (there were properties that would expose data in grandchild objects that were difficult to locate!) This had the effect of not actually harming the existing functionality, but reduced deep reports from hours to maybe a minute. What a fucking mess.
Jealous, Amazon says mine is still 2 weeks away (just in time for a weeks leave though so there is an upside)
I have an IDatabaseContext interface which I inject everywhere. I have created a mock of my DbContext so I just setup my dbsets. No in memory db needed
That's why I didn't write it in the article. My point is that I can't really claim that Parallel.For helped performance
Lazy loading for single properties, include for list&lt;singleproperty&gt; this is how I use it. 
Can we keep it?
Fun fact: this CSS is so extensive it manages to layer over the RES controls in my browser so I can't click them. 
The poor line numbers stop at 304. Kind of a weird spot to break off, really.
&gt; use virtual Lazy loading for single properties That's awful as well and easily lead to abyssal performance. I've seen way too many 1+n queries because of this.
This completely defeats the purpose of Docker.
it's 1+n (where n will always be 1) since its only a single property, I don't think the performance will be that awful. either ways you're still going to run an extra query to get that single object, so it's the same thing 
 System.Diagnostics.Process.Start("CMD.exe", "/K ffmpeg");
Tried both x86 and x64 same outcome. 
The 1+n issue persists regardless whether you have a single item or a collection of items. That makes no difference. var items = myContext.Items.ToList(); foreach (var item in items) { item.MyLazyNavigationProperty. // ... } No matter if `MyLazyNavigationProperty` is a single element or a collection, you will fuck up your performance needlessly.
Ok. Have you tried /C ?
Yeah, that was the "it's 1:30am, and I'm tired of taking screenshots and lining them up, screw it, that's good enough for now, I'll come back to it ~~later~~ never" spot to break off.
https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/
so how will you suggest to retrieve a related entity? 
When I used /c nothing happened and when I logged the cmd it was blank. 
Buy a book. They typically provide structured steps instead of a hodgepodge of videos.
:) &amp;#x200B; I don't want to spoil it, but the fourth word on page 162 is "by". 
Just eager load it. Be explicit with your loading. Lazy-loading is a universally bad thing. It requires the creation of runtime proxies and it easily hides database requests.
What specifically do you want to use it for? C# is a vast language with many frameworks and possible applications. I'd recommend finding something you want to use it for / do with it (make it fun to keep you interested) and work towards that. Then find something else and work towards that.
isn't eager loading also 1+n? 
Wich book should i use i have head first c# but it isnt updated for the 2017 version of visual studio
This was a very helpful comment for me.
Well i want to lear to program maily because of app and game design
Finally fixed it cleanly. Here's what I found/did: - The partial view can receive a model directly, so I added the Models.Item class in the @model directive. - Throughout the view, any call to the model was changed to @Model.Field. - On both views that call the partial view, I pass the model and the ViewData as follows: &lt;partial model="Item" view-data="ViewData" /&gt; And voila! Both views can now handle the form well, and client side validation works out of the box. Thank you all!
No. If you use `myContext.Items.Include(x =&gt; x.SomeNavProp).ToList()`, then the items and the SomeNavProp will be loaded in the same query. Alternatively when you have change tracking enabled you can just load the nested elements first, then the parent items, and EF Core will connect them. That'll be two queries.
WTF. It wasn't in admin mode so I decided to run it as admin it then worked. I close it down and ran it normal and it's working in normal mode too. How strange. 
Did you add the environment variable after you started Visual Studio? You need to re-start applications for them to notice new environment variables.
oh, I get it 
No. I created the Environment path yesterday and had since restarted my machine. 
I'd recommend you trying to make something. Make Tetris or something. Download a starter app that had the basics set up and running then just start experimenting. Get a box on the screen. Add a while loop so it moves. Read the key input so it moves when you press a button. Build it up. I'm a strong believer in learning by doing. Getting a book and reading it, or watching video tutorials is useless unless you do stuff alongside it. You will be terrible and struggle with ever line for a long time before you get better. But it's like learning guitar - you can't watch a video tutorial and do it. You need practice practice practice.
For the most part - Visual Studios version is less of an issue than say the .NET version of c#. Shoot for .NET 4.0 and continue on.
You need to run the absolute path rather than the relative path. I.E. Run c:\temp\ffmpeg.exe (or wherever you have the executable at) rather than just ffmpeg.exe. 
That was this issue, so I followed erlendr's advice
I got this a week or two ago with the new edition of the Dependency Injection as well. I have a lot of reading ahead of me!
&lt;- Also from Berlin What do people talk about there? Do you just meet and say „i love delegates“ and conversation starts from there or is it more like a conference with some presentation?
Thanks for all the responses guys. Appreciate it. The problem is fixed (for now haha). Cool that this community is so active. cheers
C# was my first language too! Great choice. I learned from this book called "Starting out with Visual C#": https://www.amazon.com/Starting-out-Visual-C-4th/dp/0134382609 It is very expensive (maybe you can find one used or an earlier edition?), but I found it to be easier to understand than Head First C# and the examples are very good at ramping up from easy to more complex. Some may disagree and say you can learn from free tutorials online, but since I'm very comfortable in C# now, I'd say it was worth every penny imo. The online videos included with the book were nice too.
I've always been a fan of Microsoft Virtual Academy ([mva.microsoft.com](https://mva.microsoft.com)). Courses are really well presented. &amp;#x200B; Also, just saw someone post on /r/dotnet that there is a .NET Humble Bundle - [https://www.humblebundle.com/books/microsoft-and-dot-net-books](https://www.humblebundle.com/books/microsoft-and-dot-net-books) 
Ok for game design I would recommend Unity, as well as Brackeys tutorials on YouTube :)
Thanks ill check it out
It makes perfect sense. If you can hard-code the types in the code, you can use explicit casting. Cast the object you get back from the array into the type you want, then you have access to all its properties and methods. If you have to be able to do it dynamically (without knowing the types beforehand) you will need to learn about Reflection. p.s. If all the objects are the same type, you should use a Generic List instead of an array. Then you don't have to cast anything. Even if they aren't the same type, you will almost always benefit from a List vs. an array.
Good luck with your journey, it's worth it!!
A reasonable decision. This is already an insane amount of work you put in. Still, major props on all the interactive components. This came out really well.
Oh, I didn’t even think about that but that seems rather obvious lol. Thanks!
Generic Lists are the best thing ever. 
I love lists but my code just feels cleaner when I have an array of determinate size rather than a list of indeterminate size
There are a few useful string methods: .EndsWith(), .StartsWith(), and .Contains(). If you need case-insensitivity, just use .ToLower() or .ToUpper() on everything. (I know there are more efficient ways as well as more culture-insensitive ways, but sometimes brute force is fine)
Regular expressions.
Finally found the upvote button. Good work.
Where's the dark theme?
Is it cool or are they old and not as good?
This. I use Contains() on a regular basis
Havent seen the example chapters so far, I wonder if you have switched to using local variable type inference, or still explicitly declaring local variables. 
Here is an example of what I'm talking about, public T GetService&lt;T&gt;(MyClass overrideObject) =&gt; resolver.Resolve&lt;T&gt;(new TypedParameter(typeof(MyClass), overrideObject)); &amp;#x200B;
I love the new redesign!
I'm not from Berlin. But usually at meetups one or two person hold a presentation about a topic they like, and in the break and after the meetup people socialize and talk.
That's what I want to know. Anybody can confirm that these books are relevant for today?
.Contains("your string", StringComparison.OrdinalIgnoreCase) will do what you're looking for without any other .ToUpper()/.ToLower(). 
Maybe you can get it to work in Visual Studio but obviously asking for some magical Python to C# convertor is not going to work. Ever. 
`public class Shape` `{` `public string Name { get; set; }` `public int GetColor()` `{ ... }` `}` &amp;#x200B; then objects that inherit from Shape can either override the method (and properties), or let the base class take care of it. Things like Area would be heavily dependent on the type of shape, so that would be a bad example, but something like GetColor() is more independent of the actual shape, and would be reasonable leaving in the base class. So adding a few more classes such as: `public class Square : Shape` `public class Circle : Shape` &amp;#x200B; then you can make your array or list as: `Shape[] myShapes = new Shape[] (12);` &amp;#x200B; and then use it in your loop or whatever as: `string thisColor = myShapes[i].GetColor();` `string response = $"Shape {myShapes[i].Name} is {myShapes[i].GetColor()}.";` &amp;#x200B; Only need to cast as the Square or Circle if you're going to be doing things specific to those classes and not in Shape. And I'm a List&lt;T&gt; guy myself, I found that there's rarely a time where we're building a collection of items and you already know at compile time how many will be in there. &amp;#x200B;
0/10 where is the darktheme ffs.
I can recommend the udemy course C# for beginners from Mosh Hamedani. It gives you a good base to start. Also check C# in depth from John skeet. Generally I would follow his blog. Further you might want to check into Design Patterns, search for Martin Fowler.
No need to get the older versions, the newest version is cumulative.
Entity Framework has a few options for using a database. Code first method is popular and allows you to write classes that EF will then use to create your database. EF will create the database tables, columns, relationships etc. Here is more info about this: [http://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx](http://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx). Database first is another option when you have an existing database, like from an existing application, and you would like to use that to automatically generate the classes that you need to use in the rest of the application. If you don't already have a database from your Windows Form application, then I would just look into the code first approach. 
Think most of them are relevant. 
If you already have an existing database, you can connect Visual Studio to that and generate the needed code from there ***in a separate project in your existing solution***: [https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/workflows/existing-database](https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/workflows/existing-database) &amp;#x200B; If you now want to use this project in your Forms project, you'd just add a reference to the database project, right? Wrong. Doing that will introduce a dependency on Entity Framework in your Forms application, while you only want to reference EF in your database project. Create a third project, that houses classes that are only used to transfer data between your EF project and your Forms project. These are called Data Transfer Objects, and I personally name projects that house these classes "Shared" or "Domainlayer". 
[Asp.net](https://Asp.net) core on docker definitely is worth the price alone.
 public static bool like(string str, string pattern) { pattern = Regex.Escape(pattern); pattern = pattern.Replace("%", ".*?").Replace("_", "."); pattern = pattern.Replace(@"\[", "[").Replace(@"\]", "]").Replace(@"\^", "^"); pattern = "^" + pattern + "$"; return (Regex.Match(str, pattern).Success); } 
Sweet! Yeah I'm going for the full bundle.
var? Always. Explicitly typing variables feels a bit like the over excited kid at the movie who keeps shouting out "HE HAS A HAT!". 
:D Skeet is very easy to read, there's no back pressure, you just sort of chill into it :) Which is the new DI book? Is it an update to the Manning one? I can't remember the title off the top of my head. 
Yes, but only a few more doors. Most contracts are English essential, but a few require bilingualism. &amp;#x200B;
EF6 or EF Core?
There's several on C#7, which is the current language version
No i don't want a code conversion i want to call a python code from inside c# i heard about iron python but i don't know how to use both together.
I have the previous edition, does this new one provide a lot of value over the old one?
This is terrible. Thanks so much. 
Until you find out your migration didn't run, your cascade delete didn't do what you expected or you didn't configure a default value correctly. Integration testing is the BEST way to avoid hidden logic, period. If you're not doing some semblance of it, then you're going to get caught up in a world of pain sooner or later.
I always liked going through the keywords and operators here https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/ Do one at a time and you can probably understand the syntax completely. Abstract (first one) might be too complicated so don't feel like you need to do it in order. Start with `for`, `break`, `int`, `in` and keep at it.
I have no idea if they are good, but they seem to be new: C# 7, ASP.NET Core 2, VS Code, etc.
Dependant on your use case either a. Regular expressions, or b. Like in Microsoft.visualbasic Option b might not be the favoured option, but can be really practical where an end user needs to enter search based queries like “name*” or “n???” Without having to teach an end user regular expressions or to reinvent the wheel. 
Truth. I've paid full price for three books on this list already, but buying the whole thing. It's downloading as I type this.
Can confirm, these are fairly new and relevant. It's a good deal.
Not for minmaxers if that makes sense. We're in a new era now where C# n is already C# n-1 or n-2 for authors. Skeet does magic by joining the past with the present and I try and absorb the way he teaches because I teach sometimes. It's a "buy" from me. We don't operate in isolation and Skeet has a compassion and enthusiasm that makes people I explain stuff to smile. Probably the second most wanky thing I've written this year, but this is his key differentiator. You get the smarts and you learn how to communicate them in. &amp;#x200B; Does any of that make sense? This is literally why I'm not a Skeet :) 
I'm not really familiar with the [ML.net](https://ML.net) stuff but isn't basically just a stand-alone SDK version of their online machine learning studio? If so, this article might provide some insights [https://docs.microsoft.com/en-us/azure/machine-learning/studio-module-reference/train-matchbox-recommender](https://docs.microsoft.com/en-us/azure/machine-learning/studio-module-reference/train-matchbox-recommender) I realize it won't totally connect the dots but thought it was an interesting read, hopefully it helps in some way.
He wanted a solution to his problem, not a second problem.
InMemory db doesn't support migrations nor relation database properties like cascade delete. That being said, I totally agree that you would need a layer of integration tests for anything more serious. I would have unit tests for services and domain that test edge cases, integrations tests for system endpoints like controllers that test general use cases. That feels like the best compromise.
It’s new stuff, I have the version 6 of the C# pro book. I can say that you will get a lot out of it especially if you’re not a beginner.
I support this. 
But not unexperienced with coding before i guess? Great one, nice work! 
this is even more unreadable, god dammit
You know, there was a time we'd take a guy like you out back and beat you with a hose.
Will this be helpful if I am currently learning MVC 5 and not .net core?
It might help convince you to move on to. Net core?
I'm gonna have to agree with this. I'm new to programming as well and I've done plenty of exercises and just plain screwing around. It isn't until I get an actual assignment at work where I have to make something "real" where I learn anything substantial. I'm in a pretty lucky position where I work as a lead designer (CAD) so on big projects I'm not putting my nose to the grindstone I'm more leading the technology application to the job. We ended up needing to automate something for our current big job for the sake of accuracy and QA, so I wrote a program to do what we needed, and although it's ultimately a simple code, I learned a lot doing it and I'll be able to take this experience forward to the next thing. 
I like it in general, plus please get rid of the two green "this" comments under each poster's name. It's distracting, takes up screen space, and seems useless.
https://old.reddit.com/prefs/ Under "display options" untick "allow subreddits to show me custom themes".
Yeah I intend to learn .net core as well but the current course I'm taking is focusing on MVC 5. I guess it's still worth the purchase, but more for future use!
These are all very relevant and current. I'm a full time dotnetcore developer and will likely still grab these. 
Thanks! Correct, I have a few years of python and C++ experience. But this is my first experience with C#.
[Update by same author](https://www.manning.com/books/dependency-injection-principles-practices-patterns) I haven't read the first but the new version seems to have .net core DI containers and just off the contents seems to have a larger section dedicated to 'DIY' DI. I read it back in early access and highly recommend it.
What if I am a beginner to .NET? Is it something that I can still easily learn from, or should I look elsewhere to start?
I don’t know, there will be some stuff particularly in the beginning of the C# 7 pro book that won’t make much sense. However it’s a very thorough book. It’s what I used to start off in the language. I will say it wasn’t my first language.
Next step: learn to setup the .gitignore file to remove all binaries and generated files :) Joke aside, I see you used WinForms which is probably easier to use as a first experience with GUI in C#. As an exercise you could try to redo the exact same program with WPF (learning curve is bit tougher) and then see which one you like most (spoiler: both have strengths and weaknesses). Final note, your naming rules don't follow what is usually found in C# applications and libraries. It's perfectly fine to see your own rules, but know that most other projects out there use PascalCase for properties and methods, and only camelCase for private fields. Good luck! &amp;#x200B;
Lots of allocations that could be avoided.
Thanks for the tips! 
This is why I still use old.reddit.com
Just add a reference to Microsoft.visualbasic.dll and you can use that functionality in C#
Buy them directly from Manning. You also get the pdf and ebook formats.
Excellent link
hah
Is it the Mosh course? If so you'll be surprised how much translates, and extremely happy on what doesn't. 
Asp.dotnet core on docket is a must read book
Including Troelsen in the $8 set. That's 1300 (or thereabouts) pages. Light reading for the rest of your life! :)
You should be able to call a python script pretty easily in C# but if you want to use the library Uber open sourced directly in your code you're in for one hell of an unpleasant ride
That looks more confused than the baby Hanselman and Edwards had together.
You'll do fine as long as you don't need your hand held throughout the entire learning experience. If you take your time and experiment as you go along, you'll be just fine. The book touches upon things normally you don't see right away, like Async Main Methods, processing command line arguments... and this is before it deals with strings LOL. &amp;#x200B; It's basically 1300 pages of: Topic -&gt; 2 to 4 sentence detail -&gt; code sample -&gt; next topic.
The web api template is for creating APIs. Since you’re consuming, you’ll want to use either console or form. Use the form if you want a user interface and use the console app if you only need to manipulate data. Sounds like console is your best bet. I’d recommend installing Postman too
Thank you so much. Just another quick question, these apis are called via get set methods right? So I would have to add a class for this huh
I’ve had pretty good luck using [this one](https://github.com/github/gitignore/blob/master/VisualStudio.gitignore) as a starter for VS projects. Good job though!
Ok so how to call pyhon code
You can interact with APIs using GET, PUT, POST, and DELETE requests. These are all different formats of an HTTP request. There are C# frameworks that will do most of the heavy lifting for you, so you won’t need to create any classes to perform those actions. Here’s a good [tutorial](https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client) that’ll get you started. Afterwards, just change the endpoints to use your twitter routes instead.
Sub-reddit custom themes: off. No F#'s given.
Thank you so much! 
I think I'll go with the $8 bundle 🤔
The Teams one seems a little bit irrelevant. Others look good on the whole.
Doing ordinal comparison will not normalize Unicode, so é might not be equal to é. For that you need CurrentCulture or InvariantCulture (with IgnoreCase).
I'm not sure what you expected them to do instead? Stop supporting all their dev products the second the ML fad started?
I am a proud c# developer, no complains on that. And I love the Microsoft tech stack. But don't you feel it was time that Microsoft moved on to something newer and something that would eventually be the future of programming?
I am a proud c# developer, no complains on that. And I love the Microsoft tech stack. But don't you feel it was time that Microsoft moved on to something newer and something that would eventually be the future of programming?
No
Cognitive Services APIs on Azure?
Why do you think Microsoft has not ventured into ML and AI extensively? Because they definitely have already and will continue to do so.
The Cognitive Services stuff is legitimately amazing. I say that almost more as a product than from a technical standpoint, since sadly I haven't really read much about what goes into it.
They sure are amazing. But majority of the. Net developers of the world still work with conventional oops programming and are not exposed to these.
The exposure to most of the developers in the c# world are not even aware of the newer developments of the technology. One could argue that with the need in change, you could as well sign up for the latest trends and be abreast with these. But my concern is , why does Microsoft not promote it's newer stuff to a wider audience like it has successfully with its asp.net core suite or the SQL suite of applications and pretty much of what the visual studio encompasses.
$8 is where it's at, there is some really niche filler stuff in here as well.
Hey I'm just a beginner but how about nameof?
Nope! I'm attending a web dev course at my local university and they decided to go with MVC over .Net Core. Will probably be purchasing the bundle anyway :)
How can something that is already the thing take over that thing? What do you think ML and AI are, magic? They’re also just software. So to that point, all the other cloud offerings in this niche are just that, software. In fact, they’re lowest-common-denominator pieces of software designed to allow quick iteration on common use cases. Any team worth it’s salt would eventually roll their own anyway, which they’d probably just run on top of... wait for it... plain ‘ol services. All this to say that there is really no point to your post, nor now that I think of it, to my comment either. 
Microsoft is actively promoting their ML and AI solutions. It's not restricted or hidden. But the simple truth is that the majority of users have no need for ML or AI.
The majority of .NET developers has absolutely no need for ML or AI.
And for what it’s worth, I think those of us that take objection with this post are doing so at the hubris of saying that anything is the future of anything. Look back in history at how often people have guessed that something was the future of something, then look to see how often they were right. Don’t believe me? Hop in your flying car and head off, then. 
My contribution will be adding some knowledge and re-sorting your list: * Programming language * Database design (entity-relationship diagrams, database normalization), database use (queries and table creation,), independently of ORMs like EntityFramework * **Clean code** * IDEs, it will increase your productivity * Unit testing * Design patterns * **ORMs** * Networks * Security, authentication and authorization * UI frameworks (focusing on code, away from UI and styles, could be a good idea, console applications can do the trick)
Do you mean to say that there are not enough problem statements in operations that Microsoft won't find to use it's arsenal of AI and ML services?
Start a little project, like a task manager, a to-do app. As you need to expand, you will gain knowledge and experience.
Shakes his head in C# https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet
No. You clearly did not understand what I was saying whatsoever, but I don't feel like arguing on the Internet tonight. Not sure why I bothered in the first place.
Didn't know there was something like this. Thanks.
I would advise searching for "iron python c# sample code" or "iron python c# sample project", to hopefully see real code that does roughly what you want to do. Just from a quick skim, [this tutorial](https://www.codeproject.com/articles/53611/embedding-ironpython-in-a-c-application) seems like a good start.
Cool and cute, congrats! Next step: WPF apps!
Thank you 👍
If only it had a dark theme
Honestly the best april fools 'prank' I saw this year. Good job!
From looking quickly at your code, it seems that you have duplicated the Data2 class. You should probably move that out of the CuteSubredditData into a standalone class. Furthermore, you have dublicated the subreddit urls (."../hot.json"). You could consider just returning "astronomy" there and then creating a new String by surrounding the subreddit with the full url. Both of these fixes make your code easier to maintain and reduce errors related to typos/fixes which you forgot to apply throughout your project :)
I believe what you're referring to with the cookie is JWT, which contains a bunch of data (customizable) and is signed by the server. You send it to the user on login and they can send it back to you with each request to verify their permissions. You're right that this will ignore changes until the JWT expires. In MVC 5 and Web API 2, a different proprietary format is used by default, where the entire token is encrypted so that the user can't see what's inside, but I believe the same rules apply. If you want to keep permissions 100% up to date, then an in-memory table is a good option. Rather than trying to cache yourself, let SQL Server do it. I have a table that is accessed for permissions, and I made it a regular table. The SQL Sever advisor actually recommends making it an in-memory table due to the high frequency of access. If you leverage SQL Server for this, you can cut out the hard work of manually persisting data and keeping the two stores current.
You could just do &gt;"foreach control in form.controls" And select the control types you want with if statements. Or maybe put something in the accessibility fields like "PRINTME" and search for that. That way, whenever you add a new field to your form, as long as PRINTME is in the accessibility field, it will be included in the print. Also, if you have a control layout panel, the controls inside wont get looped through by default unless you add logic in for that. then can do: &gt;foreach control in form.controls &gt; &gt;if control.acctext = PRINTME &gt; &gt;{ &gt; &gt;sw.WriteLine([Control.Name](https://Control.Name) \+ Control.Text) &gt; &gt;} in your current circumstance. &amp;#x200B; It's not smart, but it doesn't involve any third party bloatware in your solution. &amp;#x200B;
Core is not too different, but there’s no reason you should be using Franework. With Core 2.2, Franework damn near got put into legacy status. 
Opened. Told me to go to forum.
I also thought that \`DbContext\` is a repository until you put it into practice. The main problem I found was code redundancy, I found that a lot of queries were re-using similar components, so the solution was to refactor the duplicated sections and then join that call into the queries. This then leads on to the problem of expression translation of scalar functions and other complexities. I came to the realisation that even if a query shares the same join as another query, it cannot be seen as the same join as the query as a whole is fundamentally different thus I decided to abstract the context away into several object repositories that returned concrete types. This does mean I end up writing very similar queries, multiple times but like I said, each field, join or where clause condition results in an entire new query. Also, using the DbContext directly as a repository couples EF/EFCore directly to your business logic. If you wanted to swap EF out with Dapper for example, this would mean modifying this layer instead of the data access layer.
[removed]
Nice work. It could use a bit of refactoring to get rid of all the duplicated code in the Cool/Cute/WholesomeSubredditData classes and the click event handlers.
I am not an expert on ml but if this may help take it purely as a possible suggestion. As far as I know (I used to work in retail) most of product recommendation would work on the shopping basket analysis (the customers that bought products that you have bought oftentimes buy xyz). You can think of you place a camera in your shopping basket the recommendation engine can pick up that sku for 500gb memory card is highly correlated with a camera sku and hence pop it as a recommendation. In order to work out the correlation you will use matrix factorisation that I think ml.net does out of the box so probably you may be after matrix factorisation example for ml.net your matrix would be cols and rows representing individual skus and cells indicating if sku x occurs in the shopping basket what is the probability of product y co occurring in the basket. To calculate this you will need to multiply the matrix with itself and to do it efficiently matrix factoring from linear algebra. But I think this is the high level crux of of the problem you are trying to frame
Thanks :) I did read the first one, but I might have a poke through this one too :)
RemindMe! 6 Hours
I will be messaging you on [**2019-04-02 15:37:19 UTC**](http://www.wolframalpha.com/input/?i=2019-04-02 15:37:19 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/b87bta/humble_book_bundle_microsoft_net_by_apress/ejxq76p/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/b87bta/humble_book_bundle_microsoft_net_by_apress/ejxq76p/]%0A%0ARemindMe! 6 Hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
 RemindMe! 5 Days
Just nabbed all . Start at the beginning, ya?
this.☜(ﾟヮﾟ☜)(☞ﾟヮﾟ)☞();
holy fuck what have you done
Never used it for years. Even if I had to wait Task.Delay is better.
If possible you should use async await and Task.Delay. But sometimes you just need to pause a thread. Only time I've used it recently is to wait for data to become available on a stream. I only used it then because the app didn't use async await and I couldn't refactor it.
you can use it in debug builds to help expose race conditions and deadlocks when testing,
I'm genuinely surprised, this is one of the better humble bundles I've seen in a while. 
RemindMe! 12 Hours
Asp.net has authentication/authorization frameworks to help accomplish all this. Depending on your business rules you may need to create a(n) derived class(es) to suit your needs. How many users are you talking about? What is the likelihood of this scenario happening within the token timeout? How many authenticated requests do you anticipate your service doing? We have about 100k users across 46 instances of our SAAS. We do role/rights permissions to account types within our model, so there’s only ~10 variations in permissions across an entire instance. Our process checks to see if the valid token (1 db hit) and may retrieve the account types effective permissions if the cache expires. If we want to block someone, we can revoke their access and in doing so we invalidate any tokens. Next requests that come in from that user result in a 401. 
Don't focus on specific technologies or implementations. Start a project and think about how its going to work. Break each stage down and if you are unsure about a certain stage, do some research on the best practices or see other peoples work on GitHub / other host. Once you implement a certain practice and you have to add code to that code base, you will begin to understand why other people have chosen said technology / design pattern / methodology. If the area is niche and isn't likely to be expanded upon and you would like to know more, then you can do some research on said component. I recently took over an android project without ever touched its dependencies (e.g Kotlin, Android SDK) Kotlin: I was already pretty good with Java and other similar languages e.g C#. Any area I was unsure on, I searched for it on the documentation. There has not been an instance yet where I have not been able to translate between Java and Kotlin directly. Android SDK: The Android community is pretty big so finding help on sites such as StackOverflow or reading through the official Android developer documentation helps a lot. There are still lots of areas I have no clue on how they work but I've not needed to touch them components yet. Once they are required, I will pick them up one by one. And the list goes on, as you can see, figure out the project requirements, see how other people have implemented it and compare that against the documentation to gain an understanding of why.
Timer is much more efficient and accurate, Thread.sleep is going to wait at least amount of time you specify, but OS might put it to sleep for much longer period. In other words if you put Thread.sleep(10) it will sleep for at least 10ms, but it might sleep 20ms as well. While the timer will fire the callback as close as the time reaches 10ms.
Unrelated, really, unless OP has grossly misstated his problem.
Yes, yes. I, too, am familiar with the Jamie Zawinski quote. Regex will become nearly necessary, though, if he ever needs anything much beyond `string.StartsWith()`, `string.EndsWith()`, and `string.Contains()`. And, in the meantime, it's a really useful tool on its own.
Good question, I will try to attend one of the meetings soon to get a better feeling for this meetup. Would be so great to exchange some knowledge and get new inspiration.
&gt;&gt; And that's a very interesting part where another pitfall comes into play - e.g. an admin decides that user John Doe shouldn't belong to a role Moderator and makes changes. If you do go with ASP.NET Identity there is a built in/configurable heartbeat check to hit the database every so often and refresh the claims/roles/etc. stored in the cookie.
Why? Just why?
Usually (eg, in my past experiences) classes definitions are written as c sharp and T4 is able to generate the same classes in other languages (for instance, c++ client communicating with dotnet services, including C++ serialization/deserialization)
Experimenting with T4 Templating. [http://www.github.com/Epsilekt/TexTran](http://www.github.com/Epsilekt/TexTran) &amp;#x200B; Tell me what you think, hoping to receive feedback.
You cna use it to make sure a message is displayed to the console for a specified amount of time before it is automatically wiped. That's all I've ever used it for. 
Title clearly says I am experimenting with this. The description also says I am experimenting. Oh, see my repository? It says I'm experimenting. I believe I also stated in the [Readme.md](https://Readme.md) that I am experimenting with T4.
To play around with T4 according to the readme...
But you’re making this public and asking people to test it, at this point the why is likely not « why did you write it » but « why would i use it »? Doesn’t seem any simpler than writing the code directly
Maybe people here can point out code improvements? Instead of nagging on why I do or don't do things
To pretend a time-consuming operation which is not yet implemented
Bob Tabor https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners
Darek banas on youtube is insanely good. I would merry him. 
Removed: Rule 3.
Removed: Rule 3.
6. Still learning Core so I don’t use it at work. 
Tim Corey https://www.youtube.com/channel/UC-ptWR16ITQyYOglXyQmpzw
There are valid use cases, but if you see `Thread.Sleep()` in any code you should be *extremely* suspicious; it's almost always the wrong choice. People have already mentioned `Task.Delay()`. This has the advantage of not freezing the thread and you can actually cancel the delay (for example if the users exits the application). You could also use `SemaphoreSlim` which also supports `async` but is intended for the cases where you use it to synchronize tasks. I've seen an impressive amount of times where people have implemented spinlocks using `Thread.Sleep()` and a `volatile bool`, and recently one bug where an application scheduled a `Thread.Sleep()` in the UI thread of an application which is *always* wrong.
Is there some sore of livestream of some of the events? I'm at work and would love to have this playing in the background.
No one is nagging, you’ve just taken this wrongly from the get go, a why isn’t an insult it’s a genuine question « why would i use this, what is the use case ». If anything a project not having a use case sounds like pointing a core issue to me? Much more important than a code level bug
I was wondering the same thing and found out that they will be live-streaming the event on [Twitch](https://www.twitch.tv/visualstudio)
Awesome, thank you for the link!
Exactly this. I don't see any point in writting the classes in .txt when you can write them (in my opinion even faster) in the language you want to actually use.
I call a web-service that does not have a good re-try logic. I use thread.sleep() whenever there is a connection issue or some odd behavior outside my code to wait some time before re-trying. 
Yes, thank you!
Timer isn't *that* accurate in all circumstances. If more than one timer event is due at a specific time, all but the first are scheduled on thread pool threads, which may reduce accuracy.
&gt; This has the advantage of not freezing the thread and you can actually cancel the delay (for example if the users exits the application). I assure you that if people exit an application, any sleeping (background) threads are shut down :p
You rock! Thanks for the link! 😁
Reasons to use it have always been rare, but I think it's rarer these days as C# leans more toward asynchronous programming and `Sleep` is synchronous. Beyond debugging/testing, you might use it to implement backoff in threading primitives.
 using System.Threading; using static System.Console; static class Program { static void Main() { WriteLine("Hello World!"); new Thread(() =&gt; { Thread.Sleep(30000); WriteLine("Whoops!"); }).Start(); } } The application will halt until all threads join, or you execute a failfast.
Great! 
Calendar.AddEvent(); with nothing passed in. Nice.
Shitty code. Agreed. 😂
Nice work with this, a fantastic first project, cool idea for an app too! &amp;#x200B; There are a few minor issues, like code duplication, naming and general style etc. Actually, I got a bit carried away and refactored it a little - you can see it [here](https://github.com/mark-s/EyeBleacher) .The [commit history](https://github.com/mark-s/EyeBleacher/commits/master/EyeBleacher) explains what I've done to it. As a note - you didn't write any tests, and using interfaces (added) will help you mock the hard parts to test (the randomiser for example) &amp;#x200B; Can't wait to see your next project!! &amp;#x200B;
Yes, but only because the thread isn’t a background thread.
So what? All threads aren't background threads. Having your thread exit before it's execution completes is not always desirable operation.
I've been hearing for 30 years now that automation of software development is right around the corner. Yet there is still an overwhelming demand for programmers. I don't buy it any more. Programming is basically the art of extracting information from users on what the computer should do, including every edge case. Once AI develops interviewing techniques which accomplish this better than a human can, then humans won't have any work to do in any field.
Headed into the Redmond, WA campus for it right now!
There's always a YouTube link. https://youtu.be/Hg0tKNAQ1UQ
I can't bring myself to say "there's no reason" because software has a way of throwing bizarre problems at us that warrant strange solutions. In realistic production code, it's better to schedule the next work on a timer, or refactor to asynchronous code, or use a synchronization mechanism that isn't timing-based, etc. The list goes on. When debugging, sometimes you don't want to refactor something so that it's asynchronous. Sometimes you're suspicious it's a timing problem and you *want* to freeze the thread. Trying to engineer a solution that lets you turn that on and off from your UI can be a feature in and of itself. Thread.Sleep() gets the job done in a hurry, and code reviewers should definitely ask about it if you accidentally submit your debug code. That's probably a decent reason to leave it around. Sometimes you want to disrupt thread timings for debugging purposes. This is easier than awaiting a `Task.Delay()`, and you don't have to worry about context captures or any of the other baggage that comes along with `async/await`. 
Bing out the popcorn, I can’t wait. 
I originally said that it would shut down background threads. &gt; Having your thread exit before it’s execution completes is not always desirable operation. Same with a task, but since they run on background threads always (as long as there is no sync context or you don’t flow it), you don’t get a choice. 
Thanks OP, couple of those are worth the price on their own.
Don’t. It’s useful for debugging and testing, though it really is only a bandaid solution. 
Good thing I use SingleThreadedSynchronizationContext that doesn't use background threads then :) I use a CancellationToken to join all synchronization contexts when the application exits.
if you're using the Graph api maybe the object referenced is delegate based on the current user.
Currently working on an Alexa skill and Siri shortcut that will fetch the current ice cream flavors and related information from my favorite local ice cream shop. Using node and Puppeteer to scrape their website. I currently have 3 functions: fetching all flavors, checking for a particular flavor, fetching the description of a particular flavor. Another function I’d like to add would be notifications for changes in flavors and favoriting/notifying about particular flavors. Next step will be to get my app into Lambda and hook it up to Alexa. I’ll likely need to set up storage, as well, to limit how often I need to scrape their site. 
&gt; I use a CancellationToken to join all synchronization contexts when the application exits. Right, but this doesn’t quit the thread if it’s stuck somehow, so will not be appropriate in all situations. In many cases, when the application exits, it’s fine to just quit background work because the kernel closes all handles anyway. 
In that case you take a process dump and end the process in task manager.
&gt; Bing Surely you meant "Google with Bing" ?
&gt;How many users are you talking about? What is the likelihood of this scenario happening within the token timeout? How many authenticated requests do you anticipate your service doing? I was thinking in terms of a big data solution, such as *reddit* or *stackexchange* with thousands of requests a second. &gt; If we want to block someone, we can revoke their access and in doing so we invalidate any tokens It works only if we literally want block someone from accessing the system. But if we want to **restrict user from just one permission** \- with token invalidation a user loses interaction with the app and needs to sign in again (in order to obtain a new token). &amp;#x200B;
I meant bring out the popcorn 
I disagree. There are legitimate reasons for using the functionality that background threads are automatically quit. 
aw i was just being silly, it's a thing Scott Hanselman says in his talks a lot... https://twitter.com/shanselman/status/454301463293198336
When I use it, it's to yield control to other threads. For example, I have some places where I need to constantly monitor a digital i/o bit, but really only need to react to a change in that bit within 20-100 ms. So, in a while loop I'll check the bit and then sleep.
Lol, nice. I was a bit slow there
I don't disagree with that.
You can create a bool that sets true after first call and check if it's false before calling a function
Why not use Roslyn for this?
You shouldn't really \*need\* to use anything like tweet sharp... these web apis work by receiving an http request for a url, then respond with a json document instead of an html document. &amp;#x200B; Sometimes you need to be able to work with the header data... but sometimes you can do everything with the url directly. &amp;#x200B; &amp;#x200B; void Main() { //Build the Endpoint Url Usually something like // &lt;baseUrl&gt;/&lt;EndpointGroup&gt;/&lt;Function&gt;?Parm1=val1&amp;Parm2=val2 //sometimes: // &lt;baseUrl&gt;/EndpointGrou&gt;?function=functiontocall&amp;parm1=val1&amp;parm2=val2 var url = "https://api.twitter.com/1.1/search/tweets.json?q=nasa&amp;result_type=popular"; var apiKey="MyApiKey"; //Populate as per //https://developer.twitter.com/en/docs/basics/authentication/guides/authorizing-a-request.html var consumerKey; var oauth_nonce; var oauth_signature; var oauth_signature_method; var oauth_timestamp; var oauth_token; var oauth_version; var AuthStringB = new StringBuilder(); AuthStringB.Append($"OAuth oauth_consumer_key=\"{consumerKey}\""); AuthStringB.Append(",oauth_nonce=\"{oauth_nonce}\""); AuthStringB.Append($",oauth_signature=\"{oauth_signature}\""); AuthStringB.Append($",oauth_signature_method=\"{oauth_signature_method}\""); AuthStringB.Append($",oauth_timestamp=\"{oauth_timestamp}\""); AuthStringB.Append($",oauth_token=\"{oauth_token}\""); AuthStringB.Append($",oauth_version=\"{oauth_version}\""); System.Net.Http.HttpClient client=new System.Net.Http.HttpClient(); client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); client.DefaultRequestHeaders.Add("User-Agent", "MyOwnUserAgent"); client.DefaultRequestHeaders.Add("authorization",$"{AuthStringB.ToString()}"); var s = client.GetStringAsync(url); if (s==null) throw new Exception("Expected Response"); if (s!=null) s.Wait(); var jsonStr = s.Result; Console.WriteLine(jsonStr); // S should be a json formatted response. // The response to each endpoint is always formatted the same. // Create an object to deserailize the response into // example: {"foos":[{"bar"="1","baz"="A"}, {"bar"="3","baz"="Z"}]}" //would need a set of classes such as // //class FooList{ // public Foo[] foos{get;set;} //} //class Foo{ // public int bar{get;set;} // public String baz{get;set;} //} // // And you would deserialize it like: // FooList fooResponse = NewtonSoft.Json.JsonConvert.DeserializeObject&lt;FooList&gt;(jsonStr); } &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
I did not make it.
And? You can still edit it
Calender.InitNewEvent(); Calender.SetDate(somedate): Calender.SetDescription(somedesceiption); Calender.AddEvent();
Early pessimization for for later unethical but easy optimization.
Yeah!
can you give me an example of how to do this?
So then my use case is different than yours. I was just describing how we handle this as we are more concerned with user personas and their permissions vs binding such unique access per user. With that said, if we revoke access we invalidate the token. If we change the account type then the user immediately gets the new permissions on the next request in this model. Either way, let me ask questions to poke holes in your solution as when you start talking high usage/high user base it changes things: would it seem realistic to store all the users on such a massive user-base in memory on a website instance? If you are getting 1000s of requests a second/minute, it is likely there’s more infrastructure than just a single website instance. Also, what about failover / redundancy planning? Would storing such data in memory even be manageable? 
bool isTriggered = false. Then add &amp;&amp; !isTriggered to your if statement And inside if statement add isTrigfered = true
There are *tons* of ORMs for dealing with the database. It seems today, Microsoft pushes their EF.Core library but others keep using the SQL-like LINQ or other things like NHibernate. In our job, no one liked the LINQ SQL stuff, so we don't use it as a policy. It was more of a gimmick (for us) where chained methods was easier to understand. Ninject is in a different axis though. As for parameterized SQL, you probably just want to use the `System.Data` approach with `SqlConnection`.
Yikes imagine using setters in C# instead of get/set props
or inject them in spots so that you can "improve performance" by eliminating them later :P
Good point, by the way. I can't even imagine how to handle such a huge amount of In-Memory data. Hell knows how many gigabytes we would need to keep those portions of data for dozens of millions of users. And just for the sake of handling roles / permissions this may not be worth it. I used to deal with aspnetboilerplate - the framework has permission system just as I described, only the code queries the DB (if I recall correctly). Need to look it up one day. Their code seems rather messy and over-engineer.
 private void timer1_Tick(object sender, EventArgs e) { //Velha for (velha = 0; velha &lt; 1 ;velha=velha+1 ) { if (button1.Enabled) timer1.Enabled = true; else velha = velha + 1; } if (button2.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button3.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button4.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button5.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button6.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button7.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button8.Enabled) timer1.Enabled = true; else velha = velha + 1; if (button9.Enabled) timer1.Enabled = true; else velha = velha + 1; label4.Text =Convert.ToString(velha); } } } I want when the "velha" int variable is equal to 10 execute the code once: [MessageBox.Show](https://MessageBox.Show) ("Deu Velha!");
Was going to paste the same thing.
It's pretty new still. You may also be interested in F# which is a functional language on the .NET stack and perfect for data science. There is a link at the bottom: [https://dotnet.microsoft.com/apps/machinelearning-ai](https://dotnet.microsoft.com/apps/machinelearning-ai) 
Congratulations to the entire team. For those that don't yet have it, Visual Studio 2019 Community is the best free IDE and C# 8.0 is the best language with the best ecosystem ever. Plus, Scott Hanselman.
_triggered_
Maybe this is happening bcuz your date[contor] is storing nothing and bcuz of that the sqlcommand is not returning any rows
I think it's a mixture of product and Machine learning. You don't want to rid of everything else or stop what they have already buillt, but improve the things that already exist with enhanced ML features. So you don't really just move on to other things, it becomes another feature they begin to work on and improve, i.e ML .NET and that not having a major release yet, either. ( version 0.11.0 )
It is great! I have used it for a number of Medium to Large projects. &amp;#x200B; It dose a good job of warping large complex topics into easy to use modules. If you going to have complex SAAS model with tenants this is a really good place to start, as it dose a lot of the heavy lifting for you and makes sure even your most jr. member can't mess it all up and access the wrong clients data. but for everything else it maybe overkill. &amp;#x200B;
It took me just a month to replicate its basic functionality https://github.com/aliakseiherman/eixample
How to spot the former java developers.
You are correct. One of the primary purposes of, for example, entity framework, or Linq 2 SQL, is to provide a strongly-typed context in which to manipulate data stores. Indeed, Linq as a concept attempts to abstract data manipulation away from the underlying data store. It’s important to note that Linq is a language feature, whereas ORM’s are a modular extension to the language, (that ultimately, produce low-level statements, e.g. SQL, that interact with the data store, based on your higher level instructions). The two should not be confused. ORM’s offer an easy to use, often generic interface to data manipulation, (be it sql server, oracle, etc), but inevitably, are less performant than lower level interfaces such as ADO.net.
And is that a static method?
Come to think of it, I shouldn't have started the thread with a negative vibe to it. Always fails. Thank you guys for the information.
I would imagine not. One single, global calendar with everyone's events would probably not be a popular implementation.
It's ok. Every comment here was posted by ML algorithm powered bots. No one will ever know.
C# 8 is still a long way from release... We don't even know the full feature list yet
Agree- I would hope not. But I don't tend to encounter many capitalized instantiated objects. Class names, on the other hand...
I wish they'd handle text templates better &amp; update item templates.
I'm brand new so forgive me if I'm wrong but in your for statement couldn't you do (velha =0, velha &lt; 10, velha ++); and then the if/else can just repeat that for statement for each button?
Nice work! Am I correct in saying that nswag / swashbuckle will generate proxies for any APIs you create in a controller? For example, custom APIs for creating many to many entities? 
Can you code ruby in it? 
Wasn't live, not enough product demo for my liking. Having said that, Visual Studio 2019 is the best IDE I've ever used (I've been on the Beta for ~3 months), largely down to amazing coding workflow, refactoring, Intellisense, etc. Plus all my plugins. Great job Team VS!
Preview works fine in vs 2019
No, but you can use its younger sibling, VS Code for that on PC, Linux and Mac: https://medium.com/@willvelida/using-visual-studio-code-for-ruby-development-e5caad013060
I should say, inserting a record into a join table
How to spot the SQL developer.
I was thinking of the calender object as more of a cursor which points to an event Im currently modifying. Not as an instance per say
This is awesome! Of course, this is my first C# project so I have a few more in my Github repo. This is also my first project I've actually shared, so the tips you've given are very helpful and you've given me new insight on the language. Feel free to check out my other projects, my other C# project right now is a wireless administration tools application. I noticed my error in the EyeBleacher with the code duplication and tried new techniques to mitigate this!
I did what you said and it was the same thing :( &amp;#x200B; Note: I'm new to programming
&gt;The type or namespace name 'Calender' could not be found (are you missing a using directive or an assembly reference?)
Side mention, don't use EF. It's usually overkill and there is too much framework noise. Use raw ADO.NET, with Dapper is OrmLite.
I am a fan of this. Have been using the I guess, beta, for a few weeks now with Line Manager to collaborate on some things and its worked really well
Maybe try adding a Boolean (like ‘bool executed’ for example) and then you set it to true at the end of the code? And then add the if in the head of the If clause I’m not a pro or super efficient but that’s what I do if I want something executed only once 
I'm amazed at how incomprehensible using Thread.Sleep() seems to be for most commenters in here. But as soon as you do something that's not just your computer, there are plenty of scenarios where's it's the best choice. I don't need to poll a multimeter as fast as possible, every 100ms will do. I know that I can wait for a few seconds after sending a firmware update to our product before it reboots and don't need to program anything complex. And so on, and so forth.
Reddit Visual studio is pretty damn neat but absolutely fucking horrendous to use lol
Got a link to the new features list?
Ye hey!
This looks like it would be really unsafe. 
Pfft. It's *obviously* using `Thread.CurrentPrincipal`. /s
1. The return keyword is now pink 2. The menu bar is more compact, giving you like 25px more vertical space
1. Dont use a for-loop if it iterates only once. It is useless. 2. You dont show the whole class code here, but since it does not show that you are resetting the value of velha anywhere, then simply wrapping the line with MessageBox.Show in an if statement will do the job. If (velha ==10) { MessageBox.Show() }
Yup. You'll have to get used to it though. Way too much work to set it back to what it was. This is our life now on /r/csharp.