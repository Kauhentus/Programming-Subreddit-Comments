Actually understand and use patterns. https://en.m.wikipedia.org/wiki/Design_Patterns Should at least understand factory, Singleton, observer. They are all important but those ones are very important to understand. (Yes I know many people dislike Singleton now, but still important to learn)
I know you’re new to everything but I’m gonna throw some things at you that you can research at your leisure but don’t get overwhelmed. So like everyone said I recommend entity framework. I also recommend learning linq and lambda expressions. A broader category of subjects would be: * repository pattern * design patterns as a whole * clean code * clean architecture. With a good architecture you wouldn’t need to completely rewrite your app, just a single layer or project. * SOLID principles of OOP * C# interfaces. Interfaces are how you can make an application maintainable and adhere to a lot of the points above so it’s critical that you can understand what they are and why you would want to use them. I love guiding people and sharing my knowledge that I’ve learned the hard way myself so if you have any questions just let me know.
You're 100% correct, of course. C# 3.0 and .NET 3.5 (Hey, it's been almost 10 years since I've seriously written any C#... Still my favorite language.)
Toss it.
I've been to uni (didn't quite finish) and have a general idea of the concepts of 'clean code' and design patterns, but I also have no idea how to apply them. I'm pretty familiar with LINQ and lambda at least, though - I played code golf for a little while with C#, which was certainly interesting. I'd love to talk with someone who knows what they're doing, give some examples of what I'm doing in my project or code snippets, and see if you could give me a functional idea of how I would clean it up. I'm constantly stressing about how ugly my code is, but even when I try to design it all carefully from the start, it always just ends up being gross again. And I still have no idea why I would make anything private instead of public, for example ... which I'm pretty sure this is a great example, because if everything was private with accessors I could very easily pop in some code to write it to db when it's changed But even then, as a quick/small example, I've got these Users who can Challenge eachother, so each User has a List&lt;Challenge&gt;. When they make a challenge, I instantiate a new challenge, and then I add it to each User's list, all within the command processor. It feels like maybe I should add it to each user within the instantiation method, but wouldn't that be mixing up my scopes? I don't think I want Challenge to be able to modify anything on a Player. But then of course, my command processor is modifying players, which also feels like it's not supposed to be happening - but I can't just never modify the players. So what's the best concept there, making the command processor call a function on Player that adds the challenges, instead of adding them directly? Even that feels like I'm crossing scopes, because the command processor should be in its own Discord module that doesn't affect players - except it kinda has to change Player somehow. Sortof an abstract example, if you want me to go for some code snippets and get you my design document, PM me so I'm not just spamming it here? I'd really appreciate some hands-on help with how to apply clean design concepts to an actual application
[removed]
Yes but OP is Inserting a b Reading out a b c &amp;#x200B; It's not a syntax error but it feels strange. (Do check the code snippet I have added [as part of my comment](https://www.reddit.com/r/csharp/comments/bfjxqt/indexoutofrangeexception_help/eleyavz/))
You can look at integration with SQLLITE. It should work just fine. And is also able to support all your requirements. Ps. I haven't worked with SQLLITE since windows CE. So no idea how you would go about setting up.
I’m gonna watch the whole thing when I need to optimize my code at work. Bookmarked
&gt;not even 9 US$ per month &gt; &gt;Only 27 cents per day! &gt; &gt;Based on a 50 weeks, 40 hours per week, only a nickel per hour!!! What a bargain! Sorry, but we're gonna need a *cups of coffee* equivalence here, that's the real currency we see the world in today. All else is just numbers and noise. The UN is even close to declaring it the official new world reserve currency, legend has it.
&gt;800 different services that cost only a couple ~~of dollars per month~~ hundred cups of coffee per day. FTFY
I'm hoping to learn that from my current job. It's mostly just maintaining c++ code from a giant framework, fixing bugs, and testing them
Any other analyzers that you would recommend? I like CodeRush and I've heard good things about Roslynator
You can use pdfsharp, it's fairly simple and xGraphics should have all the methods of a System.Drawing.Graphics https://stackoverflow.com/questions/30655407/how-to-save-a-system-drawing-graphics-object-to-a-pdf-file-using-pdfsharp/30655459#30655459 I personally never used pdfsharp but it seems like a really simple solution. Just remember that writing on a Graphics object without unsafe is slow
Yes! But I'll warn you, it only has very, very basic error handling when compiling and *zero* error handling at runtime. I'll add those as soon as possible, but I uploaded it anyway.
Great, others have mentioned libraries that all look great, but something simple like this is really what I am looking for. &gt;Just remember that writing on a Graphics object without unsafe is slow I don't know what this means. Are you saying that using GDI+ from within managed code is slow and I should use C++, or are you saying something else?
Fantastic talk.
From what I experienced I can say that GDI+ is fairly slow because every method call makes A LOT of bound checks, sanity checks and other things. You don't need C++, you can use the unsafe keyword
[removed]
And this is how LeftPad for C# begins. Please, no.
\&gt; I personally am unable to write good code without a strong framework to base my work on Oh dear.
Might be better off using the sqlite or in memory providers.
Any reason you don’t want to use Docker? Besides, unless you have a need for SQL Server, there’s better alternatives out there that are more accessible.
+1 for roslynator
Actually, I just figured how to create my database with docker and it’s working great. Will I be able to use the same database for developing web applications?
It's a pity that the Roslyn documentation is so poor. So far I couldn't find an easy way to figure out if a using statement is needed or not.
Secure coding is *different*. It is very easy to introduce vulnerabilities with stuff that would be considered best practice in other areas. Just knowing your way around hash algorithms isn't enough. For example, can you spot the errors in this code? bool IsCorrect(LoginFormData login) { var user = Cache.Get&lt;User&gt;(login.UserName) ?? database.GetUser(login.UserName) return login.Hash == user.Hash; } You have to assume a vast asymmetry in resources stacked against you. If you have a somewhat valuable database, an attacker spend ten times as much on the attack than you should reasonably spend on implementing your own security. You should also assume that the attacker is an expert at breaking into systems, while you are an amateur at securing stuff.
Thank you !
I'm not sure I understand what do you mean exactly. &amp;#x200B; Of course you can put a new instance of an object with the same key in the cache thus refreshing it. The point of my post is how you can leverage the callbacks provided by both .NET Framework and .NET Core to get a specific behavior. I want the cache object to refresh itself without doing anything more than the initial setup.
If you have the data in memory, what happens if your program crashes? Or if the machine fails, or there's a power cut or something that causes your program to stop running? Will you lose that data? Do you care that you've lost the data? How would you get things up and running with the latest state again? If you think any of those things would be a problem for you, then you probably want a database. The database ensures your data gets persisted to disk so you can pick up where you left off when you restart. If you do that, then your service (assuming you've separated out client and service) can be stateless. It doesn't hold any transactional state (maybe just some caches of reference data or similar), but loads it from the database and saves it back when required. With each command from the client, you load the relevant state, manipulate it and save it back to the database before telling the client that you're done. [See this diagram](https://i.imgur.com/y6S9gwy.png) There are other ways of doing things, but this is probably the simplest way to use a database. And you're correct that looking up a dictionary entry by key is going to be faster than loading something from a database. When things get more complex, a database pays for itself. You can index your data in multiple ways, so when you need more complex queries than just simple key lookups, you can do them efficiently. Any tutorials on SQL will help you in that regard.
It'll hold up a wobbly table.
If you write you application in such a way that you handle everything in memory then it won't scale well when the data gets to the point that it can't be considered "small" anymore, and suddenly a rewrite is a must. Just make it scalable from the beginning.
May as well have a flick through it as a free read. A lot of the basics will still be relevant, just that there may be more efficient and newer best practice changes you'll want to know if using the latest version of the language. &amp;#x200B; Here's a concise summary of changes from version 1 to 7 so you can see how the language evolved, why some changes were necessary, and what each version brought to the table, to get a feel for how out of date the book will be: &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history)
It’s not feature complete either.
In fact, until 7.1, no minor versions of C# have existed.
Try stylecop analyzers. At least until .editorconfig supports all the same code style rules.
Look at CouchDB: http://couchdb.apache.org/ I don't know if it supports regular expression searches, i am not aware of any database that supports this. If you understand Regex you would know that it typically gets compiled to code and can get really complex in what it supports. You will probably be better off in having an instance of Lucene on the mobile device as this supports complex searching like proximity. Maybe see: https://github.com/lukhnos/mobilelucene
I don't disagree with you, but this is /r/csharp and Interfaces/DI are almost a de-facto standard these days. Look at .net core, it literally has DI baked into it and I challenge you to use asp.net core _without Interfaces and DI. It's all well and good pointing out that there's other patterns - there are, but you can't _dismiss_ interfaces because of their prolific use within C#.
Especially these days
To be honest I don't get why would you want cache objects to refresh themselves in the first place, those objects may no longer be needed. In fact it looks like the caller still has the burden of checking if the cache had that object and getting it from the original source if it didn't, then potentially storing into the cache, so I don't see the benefit. Net Core even has the GetOrCreate method which abstracts this away from the caller.
Can you detail exactly what you found with the first method?
I think the Scala approach here isn't too bad. Since it is an expression-based language, you do not need special constructs to support this feature. You can declare a new scope and do whatever you need there. For example: var sum = { val foo = getFoo() val bar = getBar() foo + bar } and you can put scopes in any conditional constructs as well: if ({val foo = getFoo(); val bar = getBar(); foo + bar &gt; 10 }) { // stuff } Kotlin has a similar feature as well.
As typical with golang, any features they introduce are very limited in scope, and cannot be generalized. You cannot use this feature if you need to introduce more than a single variable into the scope. Scala and Kotlin already have superior support for this feature, I give a couple of examples in [this post](https://www.reddit.com/r/csharp/comments/c8a8v5/preview_of_c_8x/etoi4gn/).
I've done that, I'm pretty sure that I'm downloading the wrong versions for the database version I'm using.
Caller will set the cache only on the very first call. After that the callback takes care of it. Also the double TryGetValue() with the lock is just an extra insurance, because we don't want to get a cache miss under any circumstance. We'd rather return stale data, than no data. Both cases I had to resort to this type of solution were very specific though.
I care little for most of identity, but the IPasswordHasher &lt;T&gt; interface and its implementation are correct and should be the basis of any Auth implementation you have.
I'm not sure but isn't calling ReadAsync inside of ReadAsync the reason for that exception?
Android has the Room Persistence Library as an abstraction layer over the top of its SQLite implementation. It's really handy but I have never used it in a Xamarin project so I don't know how hard it would be to adapt. The latest versions offer indexing for full-text search via FTS3/FTS4.
Sure. Docker is just a container. As long as your web app can communicate with it, docker will work just fine.
ReadAsync is just what I called my method. It's not calling itself.
In .net core it is **dotnet test**. MSDN has descriptions of all parameters.
im no computer professional but from experience if you call 400,000 of the same method in the same thread, your computer is going to be unhappy. so yeah you might want to use separate threads
Trying to ensure a method runs every 2500 nanoseconds and doesn't run longer than that is a recipe for disaster. What is it you are trying to do? There is probably a better way to solve the problem you are trying to solve.
I played with it to attempt to go up and down my call tree to look for needed/useless null checks It was for fun It was not fun.
It would be a lot easier with some context, what might seem as the only solution rarely is and I will almost quarentee that someone on here has an alternate solution if given more of the context.
Using a general purpose, garbage collected language for such a thing is IMHO a colossally bad idea. If it's a school project, by all means, try it. System.Threading.Timer may be a good start, although I'm not sure that it's precise enough. On the other hand, if you are working for Boeing: Please, for the love of god, look elsewhere.
What you're asking is to make X calls in Y microseconds. Whilst working in a language that can stop running and clean itself up/optimize itself when it wants to, stopping your time guarantee. Listen, I love C#, it's fast. It's fast enough for games or even applications that appear to be real time. Fundamentally, C# is not real time. It doesn't have guaruntees around execution time bounds. If you really need a time dependent series I would suggest hooking C++, and if you have an app that needs to be driven by some time dependent sensor visual C++ can integrate with C# and it'll be great for you. What you're asking is a lot to ask, and as mentioned above when you're writing real time programming your life gets incredibly hard. Work on your idea, and good luck to you.
Instead of a timer, I would use an endless loop with a spinwait. And even then, I don't know if the Windows clock is precise enough.
That feels like a XY problem. What are you trying to achieve?
Yeah, but did not find a was to generate a XML Report in jUnit Format... &lt;testsuites&gt;...&lt;/testsuites&gt;
Password could be changed.
You cannot. Windows is not the right operating system, C# is not the right language, Core is not the right runtime.
Oh right, I see. By chance is it possible to have the same reader in two or more of these async functions? I see it's a private function, Is the reader a property/variable in a class and you call two async functions using it? My suspicion is you're either calling the same reader twice (once in each function) or your async function is being executed before another is done using the same reader.
Take a little of these: [https://www.thoughtco.com/programming-games-using-sdl-net-958608](https://www.thoughtco.com/programming-games-using-sdl-net-958608) [http://cs-sdl.sourceforge.net/](http://cs-sdl.sourceforge.net/) &amp;#x200B; And a sprinkle of these tutorials: [https://lazyfoo.net/tutorials/SDL/45\_timer\_callbacks/index.php](https://lazyfoo.net/tutorials/SDL/45_timer_callbacks/index.php) [https://lazyfoo.net/tutorials/SDL/46\_multithreading/index.php](https://lazyfoo.net/tutorials/SDL/46_multithreading/index.php)
Could be absolutely fine. 4ghz = 4.000.000.000 hrtz (4 cycles per nanosecond (1.000.000.000ns in 1s)). A CPU can run multiple instructions per cycle too.
Nah there's nothing else calling it. You see it's in a while loop? The first time it goes through the loop it's fine, then on the second it throws that exception. However I see the same code in examples online? So I've no idea!
only thing i could think about is using the highresolution clock and busy waiting, though i did that in c++ and even there you MIGHT get timing down to the microsecond and thats it. if you need nanosecond accuracy use an arduino or other microcontroller that is not running on a complex operating system. because windows and linux use preemtive schedulers for threads you will always have unexpected hickups
Maybe I didn't explain myself. The code within GetSettingsAsync makes perfect sense to me and I think it's the standard approach. Why I don't understand is why would you want a callback to autorefresh the cache, you could just let GetSettingsAsync refresh the items when necessary (and in NET framework you can do the same). Basically I was asking what's the advantage of this autorefresh feature compared to refreshing when necessary. I'm thinking maybe this makes sense when there's no risk of the cache growing too big and there's a specific time of the day when the workload is low so you want your cache to always refresh at that time.
Its not.
You use Stopwatch which uses QPC or rtdsc depending. I mean, even without those techniques, you could test 10 seconds and count up with a simple counter. Then youll know exactly how much a simple counter times and how many you need for 2500 NS.
I think that languages suitable for that are Assembly and C, C# not really.
Lets see, thats 2.5 microseconds. Similar to /u/grauenwolf , I would busywait in a loop and call every 2500 NS. Id lock the thread to a single core and set it to the highest thread priority. Id use rtdsc to count cycles and figure out how many I needed to wait. If I needed to pass data, I would use a single consumer single producer waitfree queue. A second thread would have a single consumer, multi producer queue to get the special high priority thread its data.
I came across an awesome language during the Google CTF qualifiers this year that can do what you're asking for. It's called SystemVerilog. It's a bit different to get used to, as it runs on an FPGA and is designed to be used in situations where precise timing is required. You can totally make it work for this though.
&gt; garbage collected language I just remembered. You can turn off the GC in .net. You just have to be aware that this means you are effectively leaking memory until you turn it back on.
I'm sure you could have some success trying it out for fun, but there is a reason there are Real-Time Operating Systems. No matter how well you tune your C# application, if it's running on Windows or Linux it's subject to the OS scheduler. If that scheduler decides to do something that taxes the system, your program will get fewer slices. That puts you at risk of not being able to service a call within your time window. A RTOS devotes all of its resources to running a single application. That's why you need it. On an RTOS, so long as it's *possible* to do your work in 2500ns, it will be called and executed every 2500ns so long as your system clock has enough resolution. There aren't a lot of examples of doing this with C# for the same reason it's hard to find tutorials about using race cars to plow fields.
Agreed. I believe C# (or maybe Windows in general) is only really precise to the millisecond level. Trying to count nanoseconds is too much.
What is the specific problem your are trying to solve? A little more information might get you better help, as it sounds like a bad idea.
Yes, you can just make a for loop, check the value at the index and return it if it matches.
fair concern. of course it depends on what's inside the method, and u/MiesL is absolutely right: in the most cases it won't be a problem for a modern CPU. however in this particular case, it's some fat math there, and CPU will definitely be far from happy. I hope CUDA will help.
But I want it to be the other way around. If it is the only one in the array it should be returned. Maybe I understood u wrong?
You just can't do what you're trying to do. If you do try in C#, you would certainly need to disable the garbage collector, but even then you might have some issues. If rewrite your whole project in C (and use no external libraries because you don't know what they might do), you're still out of luck because you have an operating system. The OS will schedule your thread for a certain amount of time, and then do something else, and then schedule your thread again later. And I believe there's no way for you to work around this, short of using a real-time kernel.
You missed the 'if' part - it's like this: for (int i = 0; i &lt; array.Length; i++) { if (array[i] == 1) return array[i]; }
Ah I see. But I do not know what the values will be beforehand, the one up there way just an example. It may be 5 6 5 6 8 and then i want to return 8
 int FindNum(int[] numbers, int numberToFind) =&gt; numbers.FirstOrDefault(n =&gt; n == numberToFind);
yes, it's as bad as it sounds. i have an idea of a device and as PoC I wanted to build an oversimplified version, controlled by the PC directly (ie no MCUs, no buffers - PC DAC output connected to the transistor of LED).
But doesn't this one assume that I know which number is the only one beforehand as well?
I'm thinking something like this... eventhough this one doesn't quite work
At some point you will know which number you're looking for at which point you'll assign it to the variable "numberToFind". The FindNum(...) method is written in such a way that it can accept any integer number as an argument to search for in a list
You'll need to know what you are searching for to search for it.
Yeah so my question is, how do I find the lonely number?
Ah, you want to find a number there is only one item of? You'll probably need to check each number one at a time, and count how many instances of it is in the array: for (int i = 0; i &lt; array.Length; i++) { int n = array[i]; int c = 1; for (int j = 0; j &lt; array.Length; j++) { if (j != i &amp;&amp; array[j] == n) { c++; break; } } if (c == 1) { return n; } }
Oh I see what you're saying now. You want to take an array and find the "lonely" aka single numbers. Try Distinct() from Linq: using System.Linq; IEnumerable&lt;int&gt; lonelyNumbers = numbersArray.Distinct(); // lonelyNumbers now holds all values of numbers with only 1 instance For more info: https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinct?view=netframework-4.8
i have an idea of a device and as PoC I wanted to build an oversimplified version, controlled by the PC directly (ie no MCUs, no buffers - PC DAC output connected to the transistor of LED).
Lots of questionable responses here... What you want is .GroupBy(), then filter that result set to groups that have a .Count() of 1.
shame on me, I totally forgot about GC :) yep, it won't work this way, thank you.
if i got it right, a program w/o new object creation won't affect memory that much, right?
What is it you actually want you aren't clarifying and so get answers you don't like. Are you asking for a function that returns the least frequently occurring number?
I want to return the number that there is only one of
FPGAs are designed for tasks like this. The problem with OP is that he wants to use a general purpose CPU and a high level programming language (C#) to do it.
It seems as if Distinct returns if they are not in sequence. 2 2 3 3 5 return 2,3 and 5???
If you are looking to control PC DAC output, I highly recommend looking at the [WASAPI](https://docs.microsoft.com/en-us/windows/win32/coreaudio/wasapi). It is supposed to be a low latency asynchronous way to control the DAC output - you can even [offload some processing to the hardware of your DAC](https://docs.microsoft.com/en-us/windows-hardware/drivers/audio/hardware-offloaded-audio-processing) so that your CPU jitter doesn't affect your output.
&gt;If you're going to a non relational storage engine I'd bet your abstraction won't save you. It does. I've had to do it once or twice. I've swapped out between rdms, docdb, and eventstores without changing the repository interface.
"XY problem" is something new for me. that's good it has a name now. but the problem is more about greed and laziness: I wanted to test an idea without spending money on hardware.
You might want to look at Rust.
yes, FPGAs are quick thanks to almost "hardware" level of execution. I've been working with them in college. IIRC we have been using VHDL instead of Verilog (not sure why)
\[saved\] thanks :)
Dont seem to understand how to use this one. Could you give an example? An int list is what I am using
You'll have to make everything a struct and use stackalloc for those structs.
Oh yes it worked. Thanks a lot man &lt;3
thanks, interesting. my toy is a bit less of sound, a bit more of biology. i wonder how safe is to use sound card outputs to control anything. i mean, nothing critical like a life support and still.
thanks. having a decent cross-platform sound/visual abstraction level will never hurt. and there's even a [SDL2 with Core C# tutorial](https://samulinatri.com/blog/net-core-sdl2-window-creation/) will definitely try next week Thanks man!
As others have said, if you want 400kHz frequency for your function then you will need to carefully calculate the number of cycles, etc. and ensure nothing adds to the cycles, C# is not great at this. However, C# is great at async IO and the [Hastlayer](https://hastlayer.com/project) project is made for something like this, where a C# program needs to do a lot of specialized processing very quickly. The C# program communicates with a FPGA and does the processing with much lower latency. As for outputting at 400kHz, your DAC will still need to support that. AFTER reading that you wanted to connect it to an LED, I think you wanted something like PWM? Maybe [this](https://www.mathworks.com/matlabcentral/fileexchange/9366-pwm-signal-from-soundcard) would help.
the bad idea has been dropped thanks to you guys, thanks :) now I'm wondering what this "GC power button" is capable of. I want to benchmark it ON and OFF on heavy calculations I'll be working soon.
Correct. So in theory if you never use `new`, it won't matter if you turn off the GC or not because it will never run either way.
learning a new language to test a random idea is too much for me :) and another thing, I've tried golang a couple of years ago and there was something in the documentation about the timer precision on macs and windows. I was sorta disappointed because the both of my computers were called buggy :)) i mean the point is that is likely Rust will have the same bug
You can't. Windows and most of the "vanilla" Linux aren't real time OS, so they can't guarantee your access to the CPU at such a ultra-high resolution. There is some linux kernel where you can do it. However, the best way, read by what you want to do, is use an Arduino or equivalent micro controller - many have such a resolution.
what about included libraries? i mean, it's not a problem and a test run will show if there are any activity, but still, is it possible that say math lib will create and dispose objects during work?
That's where the "in theory" part comes into play. Though there are static analysis tools that will tell you if a compiled library function can allocate memory.
Well unity has ok tutorial material. Also last time I checked (years ago), unity still uses very old c#
MVC is the model-view-controller framework. Razer is just an option for the "view" part of it. You can also use html with your favorite js framework.
Thanks a lot! Before CUDA I was dreaming about a device like Hastlayer, but all FPGAs were not fast enough for really intensive use. And then GPUs with CUDA came and dream has faded - until now! &amp;#x200B; (they're using a remote service to translate .net into fpga instructions, not the most user friendly step)
Decompiling it allows you to very easily jump to methods, types etc which you can't do in GitHub. [referencesource.microsoft.com](https://referencesource.microsoft.com/) is another option which is easily navigable 🤷‍♂️
This isn't true, I think you're talking about JavaScript.
Next up, "How do I create third person shooter in Excel?" xD
int\[\] numbers = { 1, 2, 3, 4, 2, 3, 4, 5, 6, 7, 6}; var singles = numbers.GroupBy(a =&gt; a).Where(x =&gt; x.Count() == 1); foreach (var x in singles.ToList()) Console.Out.WriteLine(x.Key); &amp;#x200B; First you group the numbers by themselves, then only get the ones which occured only once.
It's a [PropertyGrid](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid?view=netframework-4.8)
You could try something like: string address = "Mushroom road 2b"; var lastSpace = address.LastIndexOf(' '); var road = address.Substring(0, lastSpace); var numberAndLetter = address.Substring(lastSpace + 1); var number = new string(numberAndLetter.TakeWhile(@char =&gt; char.IsNumber(@char)).ToArray()); var letter = new string(numberAndLetter.SkipWhile(@char =&gt; char.IsNumber(@char)).ToArray());
RazorPages is different from just Razor. It is a new approach from MS though it's similar to the old WebPages. Also it's recommended by MS but not very popular because of that old approach requiring lot of data going back and forth between client and server. So... learn MVC
Love the Boeing comment. The more I learn programming, the more fearful I become of an ai driven world written by interns, students, and a mashup of stack overflow threads.
Why?
Razor pages place the controller methods in their respective view files.
I'm not very versed in unity, but if you are working on something 2d or not intensive 3d, monogame has pretty good documentation and ports to all kinds of places. I would add though that I've had great luck with udemy, so they are worth checking out in my book.
You'd be surprised with how little c# you can build games in Unity. I'd say just give it a whirl (start a small project) and search for solutions to problems as you encounter them. If you want a tutorial something like this could be for you: [MOVEMENT - Making an RPG in Unity (E01)](https://www.youtube.com/watch?v=S2mK6KFdv0I) I personally really enjoyed following this text based game tutorial completely in c# (no unity): [http://scottlilly.com/learn-c-by-building-a-simple-rpg-index/](http://scottlilly.com/learn-c-by-building-a-simple-rpg-index/)
&gt; if you never use `new` I'd says that the presence or absence of `new` is a pretty bad indicator of allocations in C#.
Depends on what you do. If you use `Thread.Sleep`, I think you won't get past the millisecond level. But if you use `Stopwatch`, you should be able to do better.
It's not unique to UWP. IOS, Android, WPF and WinForms all have ways to save preferences. You say you want to save variables and access them in another form, you shouldn't be saving to disk for this scenario, can't you just pass them between forms?
Thanks
[Too late](https://www.youtube.com/watch?v=QnjmJKMtB7g).
This. You need to be near-metal or on-metal for this. C# is a high-level language. You need a mid-to-low level language.
Still not going to save you from potentially getting time-sliced off the CPU by the OS. Need an RTOS for this kind of precision, probably.
iirc there's a tiny bit of garbage created every time a timer fires in C# / .NET, though.
You might need an RTOS, too. What're you trying to do?
Lots of things in C# allocate without the programmer explicitly using the "new" keyword.
I like this approach, it's typically how I was trained to do VM's. We call them 'dumb' view models because they just take the PO's created by the service and binds them to the views. Clean and easy to test.
Those are bugs or bad design decisions, not vulnerabilities, at least as long as you do not fuck up cache invalidation. The problem here is that the cache lookup is several orders of magnitudes faster than the db lookup, which allows the attacker to guess usernames. Furthermore, even the way the hashes are compared introduces a vulnerability to timing attacks. If an attacker can gather a lot of response times, he might be able to guess the hash. This is more complicated than measuring the difference between a valid and an invalid user name, but if he can take enough measurements, he might be able to filter out the noise from http and whatnot. Writing secure code is hard.
&gt; which allows the attacker to guess usernames. How?
&gt;The problem here is that the cache lookup is several orders of magnitudes faster than the db lookup, which allows the attacker to guess usernames. Why would you anyone allow to send shitton of requests to login endpoint?
was going to say the same thing - Unity tutorial is good!
Because it was implemented by someone who was annoyed about the classes of the default implementation exposing too many properties, somebody who thinks that this is easy peasy lemon squeezy, and probably didn't think about rate limiting. And please keep in mind that this was just a single example. There are tons of very non-obvious ways to introduce vulnerabilities. It's an incredibly bad idea to take that risk just because you OCD over a few properties that show up in IntelliSense
Ok, so then the easiest way to achieve this is to loop through the array, and count the occurences of each item. Then knowing the number of occurrences, return the items that occur once. Obviously if you have a long list of items where there are many different items there is likely to be more than 1 unique number so you probably want to return an array too. This sounds like a homework question, so I won't give you an answer, but that information should be able to get you started.
Windows is not a real time OS, there are no guarantees. So no, not exactly 2500 ns.
At this point you're arguing semantics because in a language with multiple inheritance, an "abstract class" _is_ an interface. C# is very opinionated when it comes to how it handles inheritance. That's why it also has interfaces. Arguing that interfaces don't matter because _other languages_ can achieve the same thing is utterly pointless and unhelpful in a subreddit dedicated to csharp.
MVC: The "Mode-View-Controller" is a framework that helps you build how your webapp behaves, including login, data access (probably database), routing, authentication, etc... Razor: Is the "view" part of the MVC (of course, not mandatory, you can use raw HTML, JS or whatever you like). It is a framework that let's you embed C# code into HTML pages, just like you can do with PHP. It also grants you tons of functions that helps you render editor / view fields for the properties in your model.
You can write everything in functional, but it is a different question that is it always the most practical / efficient way to do it. Probably not. OOP is a powerful tool for certain type of problems.
For what it’s worth, it’s not just the interns and students code you have to watch out for. I’m in aerospace and I’ve seen some real head scratchers.
Microsoft is unfortunately confusing about all these approaches. So. * MVC is **not** outdated. * Razor Pages are a simpler *alternative* to MVC where you skip writing a Controller and instead start with a Page (essentially a View). Just like MVC Views, these use Razor syntax and are therefore cshtml files.
I assume this is homework? One clear and relatively efficient way to do this is to build a Dictionary that maps elements to the number of times they appear in the array. You can loop through your array once and try to add elements to the dictionary with a count of 1. If an element is already in the dictionary then you increment the count: create dictionary that maps elements to integers for each element in array: is element already in dictionary? if so: increment dictionary integer for this element else: add new entry to the dictionary with value 1 Then you can loop once through the dictionary looking for an element whose count is 1: for each key in dictionary: if corresponding value is 1: return key
Razor pages is just a framework on top of mvc. Check the examples. You will still see "UseMvc" in startup. The biggest difference is that routing is not specified but routes to pages by default (you can always enhance since mvc is underneath)
If you use the windows performance counter, you can get 100 nanosecond precision. Accuracy depends on the particular computer. The Stopwatch class wraps it, or if you want to do it yourself check out the win32 apis QueryPerformanceCounter and QueryPerformanceFrequency. I've done timing in this realm, and it's not hard if you know what you're doing. You can pre jit all of your methods. That's used for the construction of Constrained Execution Regions, which must have no memory allocations. Finally, the GC can be turned off for periods of time. https://docs.microsoft.com/en-us/dotnet/api/system.gc.trystartnogcregion?view=netframework-4.8#System_GC_TryStartNoGCRegion_System_Int64_System_Int64_System_Boolean_ You can also listen for when the gc wants to do a collection: https://docs.microsoft.com/en-us/dotnet/api/system.gc.registerforfullgcnotification?view=netframework-4.8#System_GC_RegisterForFullGCNotification_System_Int32_System_Int32_ And do it yourself when you have an opportune moment. ASP plays these games - if everything goes right, then a client sending a query to an ASP server will never see the effects of a collection. ASP does the following : * registers for gc notifications using a thread that blocks on the gc methods. * registers itself with the load balancer to receive queries. * services queries until the gc notification pops. * unregisters itself from the load balancer. * performs a full collection * rinse repeat.
This fits pretty well with my experiences. I know the initial point of VMs was supposed to be "they're easier to test" but I get itchy if they have complex methods.
For such precision even general purpose OS is a bad idea. Threads may start, higher priority processes may hog CPU, your thread may not get CPU back in time and so on and on.
&gt; Interfaces are almost required for any kind of abstraction I'm not arguing interfaces don't matter, I'm arguing they aren't necessary for the kind of abstraction you are describing. They are what is necessary in C#, they are not necessary in some other OOP capable languages.
What pages are you looking at? ASP core is correct https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2 I found it slightly hard at first. But if you pay attention to @page and model you'll have an easier time
Nice. &amp;#x200B; n.b. To anyone throwing exceptions when it's an expected result DIAF. n.n.b. Anyone returning true/false from a function instead of raising an exception, the 1990s wants its programming technique back, it sucked back then and it sucks now.
When we studied computer science 25+ years ago, they taught us C is a high level language. It’s amazing how terminology has changed over time.
Reminds me of the ild Asp net days. Stinks to high hell and back, but they added it back in anyway.
Meh, they’ve surely added things like linq, WPF, etc but that book actually should be good for the fundamentals. Obviously anything beyond 1.x will need other resources, but it should still be a good resource.
Haha nice one. I'd like to have said that in the article, but you know... The article wasn't really dedicated to properly using exceptions, but if it were, it would definitely have something to say about returning IsSuccess and so on.
You are wrong, op asks about razor pages which merges the model, view and controller into one single page check this: https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-2.2&amp;tabs=visual-studio
&gt; lower end devices doing a multi field regex search over 50,000 records 1) Sounds like you could structure the data better and avoid regex search. 2) Properly implemented regexes (with DFAs) should not be slow; 50k records is not much.
MVC is a framework. Razor pages is an implementation of the framework. That should be the takeaway.
System.Xml.Serialization.XmlSerializer(Type) throws a handled exception every time you use it under normal circumstances. It's absolutely obnoxious for things like this. There is a more awkward static instantiation version that doesn't have the problem, but come on Framework team, you're better than that.
What is the URL of your angular page?
&gt; we still have to do so much work to support INotifyPropertyChanged That's true. But fortunately nowadays it's relatively easy to create some kind of a helper function that hides most of those details (`public _ Set&lt;T&gt;(ref T field, T value, [CallerMemberName] string propertyName = "")` ). It's probably good enough for view models, but unfortunately doesn't work for everything. Mostly because it has to be defined in a base class. Otherwise it would not be able to raise the PropertyChanged event. Which is a pity, placing it in an extension method of the INotifyPropertyChanged interface would be even better. &amp;#x200B; When it comes to the syntax, I'm still waiting for a way to define backing fields as visible only to their front properties. Preferably without even defining them. Something like a `filed` keyword that within a getters and setters would work similar to the `value` keyword. At compile time it might be replaced with a name of an auto generated private filed. I've seen (and made) to many mistakes when trying to bypass the main logic off getters and setters.
It's a nice thought, but of course (sadly) if I tried this in my code base it would take an hour of pressing the continue button before the code got to the actual problem I'm trying to debug.
&gt; n.n.b. Anyone returning true/false from a function instead of raising an exception, the 1990s wants its programming technique back, it sucked back then and it sucks now. Are you saying .NET shouldn’t have TryParse? Sometimes I *know* there’s a good chance I won’t get a proper result. I’d rather just have a Try* method then and move on. Exceptions would be needlessly slow and cumbersome to deal with.
You would need a real time operating system for that.
eh, it's great for stuff that's too small to warrant MVC. Your 404 page really doesn't need a three file framework to be good readable efficient and sufficiently flexible code. If source isn't long enough to give your IDE vertical scroll bars, you probably don't need MVC. The problem is that as a community we haven't done enough to delineate between when MVC is needed and when it isn't, nor to talk about why experienced devs put the line where they do. ...And also that junior devs--which make up like half of the industry--tend to get ahold of one idea or the other and then use it unthinkingly for everything so there's that problem.
Right, I was just pointing out that making use of existing abstractions is a different thing from "abstraction", and though interfaces are clearly required to make use of code written to require interfaces--which is a lot of code to be sure--they are entirely optional when creating your own. Nobody learning C# can afford to dismiss interfaces, but the notion that they are a requirement for abstraction is patently false. I have nothing against interfaces, but neither do I want to wind up working with the guy who was taught, as a newbie, that abstraction is all but impossible without interfaces. I think maybe I just have PTSD from working with too many fools, over the years, following dogmatic beliefs in lieu of anything resembling reason. For example, one guy was big on "descriptive naming", "self documenting code", and "extensive comments". That translated into 5-8 word long class and parameter names full of pronouns--lots of letters with very little meaning--and a comment before every line of code that merely restated the code in english. &gt; // if theOneThatTheyDependUpon equals 5 then... &gt; if(theOneThatTheyDependUpon == 5) { So, when I see an idea with some weight behind it (interfaces are important) coupled with blatant falsehoods (interfaces are necessary for abstraction) it sets alarm bells ringing in my head. Some people are not so bright, and in their infinite confusion, such people will assume the legitimacy of the former means the latter is true in a literal sense. That's how monsters are made, and so I try--perhaps in vain--to head off their birth with a little clarity.
OK. But, it would be worth fixing this problem because those exceptions will be eating performance. And if you fix the issue, finding real problems will become much easier.
&gt; n.n.b. Anyone returning true/false from a function instead of raising an exception, the 1990s wants its programming technique back, it sucked back then and it sucks now. No, not at all. Rising exceptions is costly, it is always should be a last resort, or when the operation itself is incorrect. There are a lot of cases when the method should except possibly incorrect input or incorrect states. Throwing an exception for each and every case greatly reduce the performance - as /u/chucker23n said, TryParse is such a case. If it would throw an exception every time when you don't pass correct, number-only string it would kill a lot of applications, especially ones processing user-created inputs...
Plus exception handling is absolutely awful for performance. If something could go wrong with the thing you're about to do and you're want your caller to handle it, exceptions are the wrong way to go, as nothing in C# forces someone to handle it, so at some point someone will forget and it'll crash your app/web service/etc.
I'm experimenting with C++\\CLI instead of using P\\Invoke for a WPF project. The library we depend on at work are getting bigger and bigger and using P\\Invoke makes our life harder day by day. For example, lot of data types have to be duplicated between C# and C++. The business logic got scattered accross domains, which makes it hard grasp how certain things work, how ownership are dealt with and also not trivial how to surface errors. C++\\CLI seems to tackle these areas, still it has its own shenanigans, like you can't include &lt;mutex&gt;, &lt;thread&gt;, ... in managed C++ files, strange compile errors when managed usings and includes are not in the right order, etc. I hope by the time I port all the functionality to C++\\CLI, I won't have to turn back to P\\Invoke. Luckly, I've identified some ways to make P\\Invoke better suited by pushing as much logic to the C# side as possible and make P\\Invoke layer more like WINAPIs with their "simpleness", handles and static behaviour.
I totally agree with it. We do the same with trace listeners for WPF Binding errors.
Some time ago, I'd have read this article and gone "Surely, everyone knows this...", but then the last 3 hires I did at my old place, ALL of them didn't know there were exception settings... so, actually glad you put this out there and have an up-vote.
Luckily you can tell Visual Studio to ignore a particular exception from a particular place... otherwise yeah, I can imagine that getting fucking annoying really fucking quickly.
It's a nice thought for ALL projects. As /u/emanresu_2017 says, it's worth fixing.
Do you have suggestions on how to deal with threading? I have threads that do stuff like reading samples from our hardware or processing data from files. The UI needs to show the data that is being recorded or results from the processing (real-time). The view can only be updated from the UI thread. And if I use INotifyPropertyChanged or an ObservableCollection in the view model then that also needs to be on the UI thread. But is it possible to switch to the UI thread without coupling the view model to the UI framework (wpf)?
Oh, I'm Sorry! .. great man
This is what the "Just My Code" option is for.
That too!
Good bro. oh a lot of coded ..
Lol. Yes. I know your pain. I recently joined a team with about 20 microservices. As a matter of course, I turned on break on all exceptions and found that it was throwing exceptions in a loop as soon as it starts up. I don't understand how people can work that way, but there are plenty of programmers who just ignore the exceptions. It makes no sense but that's just how some teams operate. Hopefully Microsoft will eventually make it the default setting.
I usually just setup a reverse proxy instead of dealing with that garbage. It's fairly simple to do with docker and nginx. That way you don't accidentally end up with cors headers in production.
Nice article, but: &gt; My rule here is that I always question if a property Update method is not to long when it has more then 2 lines Whilst I understand the thought behind this, number of lines should never dictate when do move/refactor something.
The regexes are user supplied. Either way it seems couch base lite which was suggested by another commentor should work so I'm trying that out now.
You would have to use a real-time OS, like FreeRTOS or VxWorks to ensure the deadlines.
Yes, you're right, but if you turn on "Enable Just My Code" in Visual Studio, you won't see those exceptions from serialization. That's one reason I mentioned it. Is this still a problem in .NET Core? Someone should submit a PR to fix that if so.
On Windows the shortest timespan you can sleep for is 0.5ms, so you can't really use any kind of sleep/delay. You instead have to use a loop and constantly check the elapsed time, which fully uses 1 CPU core. You also can't generate any heap garbage, because garbage collection freezes all threads and sometimes takes more than a millisecond if the program is highly unoptimized.
&gt; number of lines should never dictate when do move/refactor something Very true, I totally agree. That's why in the next sentence I wrote: &gt;Of course it’s just a rule of thumb and longer constructions are also allowed, though should always be verified. I would say that the number of lines should not be the reason behind refactoring, but usually it's a very strong indicator that a real reason might be hidden within those lines. Especially in the case of VMs.
Yes, fair point - you did clarify and I hadn't had my morning coffee!
&gt; Part of me wonders, though, if at this point it’s a shame we still have to do so much work to support INotifyPropertyChanged. It definitely is. Various proposals in `csharplang` GitHub have gone nowhere so far. Closest you can get is use Fody to rewrite at compile time…
What is the content of the second request? The one returning a 500. Seems like you're getting a CORS unrelated exception that you confuse with CORS. The request before, the one returning 204, is the one related to CORS.
There are plenty of hidden allocations that do not involve `new` operator. - Plenty of library methods allocate objects. - Using `params`-methods allocates arrays. - LINQ usually creates a shit ton of objects. - Closures allocate objects.
Yeah, the documentation is pretty much non-existent. It's the same shitty deal with NuGet.
CPU with CIL support would be a thing!
there are a lot of games created in excel, from Oregon Trail remake to real-time strategies. so why not.
Probably because of the entire point of the message that got missed... There is a right tool for the job. Just because something is theoretically possible to do does not make it a good or intelligent decision to do so.
We probably have to take a look at the role of view models. They bind business logic and presentation layer together. And because of that they cannot be completely decoupled from any of those. A view model shouldn't care about how views consume its data, but it has to provide that data in a way so that those views are able consume it in the first place. That's why we implement the INotifyPropertyChanged interface (it's not needed from the plain VM's perspective). And that's why I believe that it's VM's responsibility to manage threading. This piece of logic doesn't belong anywhere else. So I wouldn't try to avoid calling the dispatcher from within of the vm. In fact I usually take the UI dispatcher as one of the dependencies of the view model base class, so that it's always available. And the dispatcher is not in fact a part of the WPF, you can use it with other frameworks and application types as well. So indeed, a coupling takes place, but to a much smaller component which is then shared between presentation layer and view models. So whenever there is a method (callback) that might be called from another thread, I dispatch it. The idiom I really like: `public void DoSomething() =&gt; _dispatcher.BeginInvoke(() =&gt;` `{` `// Do some stuff here...` `});` (though to use it you have to create an extension method on the dispatcher - by default it doesn't accept plain lambdas in the BeginInvoke method)
Thanks, this is what I am doing but thought wasn't the nicest. But now I'll feel better using that approach. Putting the Dispatcher in the base class is a nice idea, I'll consider that.
Thanks. &gt; oh a lot of coded .. Yeah, I've gone a little bit wild on this one. But two most important pieces of code are: \- [Cuda kernel](https://github.com/TomaszRewak/RotatingVoxels/blob/master/RotatingVoxels/Cuda/VoxelKernel.cs) (which is written 100% in C# using Alea GPU) \- [Shader](https://github.com/TomaszRewak/RotatingVoxels/blob/master/RotatingVoxels/Shaders/InstanceShader.vs)
Just for the completeness of the reply I must say that it's possible to create a converter that would await a result of an async operation on the side of the view. [Example here](https://github.com/TomaszRewak/WaveDotNet/blob/master/WaveDotNet.Designer/Views/Converters/AsyncConverter.cs). It's sometimes nice for very simple scenarios in which the view model doesn't care abut the result of the operation and the view can take full ownership of the task. But overall I think that dispatching operations on the UI thread inside view modes is the right approach. And your question is totally valid. I've also spent some time trying to discover a different approach. But finally I've settled on this one.
&gt; Hopefully Microsoft will eventually make it the default setting. Not as long as .NET and ASP.NET MVC is still heavily used. They throw exceptions here and there in those frameworks.
Interesting, didn't know about that solution. Thanks for sharing the info!
It's still nice that you pointed this out, because indeed, it's very important to keep in mind. That's the same as optimizing without profiling. Some people just do it.
When I wrote that I actually thought about that, and was like... meh.. I actually expected to be chastised that it was still considered high-level. Maybe our current ones are super-abstracted languages or building block languages? I feel like all I do as a developer these days is "brick and motar" or "glue and block" type work.
GameDev.tv have multiple Unity courses on Udemy. I learned more from them than I did from 2 in-class courses at a well respected specialist institution. They regularly update the content on the courses and the community forum/Discord server are a gold mine of advice. As an aside, the Udemy courses cost $15 AUD each while the in class courses cost $1000 + $2000.
Try following some tutorials and make games, it will give you the confidence to apply that logic while you create your own games
Linux is very popular on servers and embedded systems and for implementing all kind of systems, larger than a single user application on a PC computer. With Linux, you have much greater control of the operating system. You can tailor it for your specific need, you can choose how you want to update it, run it, what you want to include in it and what you want to leave out. You have much more power over the operating system than what you have with Windows or Mac. By other words if your target is building something else than a GUI application running on a desktop PC, Linux may be very viable operating system for that purpose. Linux is for example often used as a backend for networked applications or in places where reliability and long uptime are needed.
It's happening. The amount of... I hear incompetence is a strong word, but let's call a spade a spade; with the amount of incompetence in the industry currently, I wouldn't take a cruise, just saying.
Yeah, the VM should be aware of its thread context. It is part of the UI layer. Classes that use the VM shouldn’t have to worry about the VM’s threading context since that is an implementation detail of the VM.
This answer is going to suck but... IIRC herb sutter said (in a video, I don't remember which) that C++ standards got it wrong and they can not change it but size_t should be signed and that he's sorry. I can barely remember it but I think it's because if you want to write strict code you shouldn't be comparing signed and unsigned values. Also it's faster to compare if you don't need to check the highest bit (because -1 and 255 should be false in a byte even tho it's the same value)
Found the answer on stackoverflow. [Stackoverflow: Why is count not an unsigned integer](https://stackoverflow.com/questions/3658560/why-is-count-not-an-unsigned-integer)
I have this issue with the codebase I work on. My workaround is just to change the exception settings right before I reach the action that needs debugging, rather than before running the solution.
Also, \`new SomeStruct()\` and stack allocations do not involve GC.
so for request with error 500: The request header is: Accept: application/json, text/plain, */* Content-Type: application/json DNT: 1 Origin: http://localhost:4200 Referer: http://localhost:4200/create-user-profile Then it has the payload. For error 204 the response has these: access-control-allow-headers: content-type access-control-allow-origin: http://localhost:4200 and the request header is: Access-Control-Request-Headers: content-type Access-Control-Request-Method: POST DNT: 1 Origin: http://localhost:4200 Referer: http://localhost:4200/create-user-profile
Imagine having to cast that number every time you pass it to a method that accepts integer
And the response body of the 500 request?
Udemy. The classes are cheap and on a good day you can find some classes free.
I dont see a response header for the 500 request. When I click on the response tab, it says: &gt; This request has no response data available. My controller does get hit when I put a breakpoint, the model state is valid. Heres the actual controller method: [HttpPost] public async Task&lt;IActionResult&gt; PostUserProfile([FromBody] UserProfile userProfile) { if (!ModelState.IsValid) { return BadRequest(ModelState); } _context.UserProfiles.Add(userProfile); await _context.SaveChangesAsync(); return CreatedAtAction("GetUserProfile", new { id = userProfile.Id }, userProfile); } When I use postman, I am successfully able to save a profile in my DB.
I did a related [answer on StackOverflow](https://stackoverflow.com/a/47838574/3013249) some time ago. It was an attempt to explain why the CLR uses Int32 as an indexer (other than that it’s just the common denominator for most languages)
To save a click: `uint` is not CLS-compliant.
Thank you
If you have £25 Humble Bundle currently has a unity [C# bundle](https://www.humblebundle.com/software/learn-game-development-software?hmb_source=navbar&amp;hmb_medium=product_tile&amp;hmb_campaign=tile_index_2)
Can someone explain to me what this is? What's cls?
&gt; CLS-compliant Common Language Specification my poor understanding... if your code is compliant it can be used by other languages. Example, in an API.
No one sas your array has to start at zero. If you want an array that goes from -10 to +10 you can do it. This was very common in the COM era. So even though no one does it in C# (despite it being allowed), you may run into it when writing interop code.
.NET can support most programming languages. However, it's too much to ask every programming language to offer every feature. So the CLS says "this is the bare minimum your programming language needs to use the base class library". Or in other words, "the base class library won't use non-CLS features without a damn good reason".
If I recall correctly, Mono has an option to enable Int64 indexing on arrays.
The .net runtime supports multiple programming languages. The minimum features they have to support is tied to cls compliance. Everything in the runtime has to be cls compliment so it can be called by all languages. An easier to understand cls rule is all methods are not allowed to vary by case alone. You cannot have a foo() and a Foo() method on a class, and still be cls. In reality it’s because VB.net is case insensitive so you don’t want runtime methods the VB.net compiler would have problems with, even though the C# compiler won’t have a problem. So, it’s likely VB.net has lousy unsigned support, and so MS declared that unsigned isn’t cls.
Lot of people mentioning the fact that unsigned ints are not non-compliant or that Herb Sutter called it a mistake (both true). But I actually think signed integers have some small advantages for indexes. For example, iterating backwards over an array: for (var i = arr.Length - 1; i &gt;= 0; --i) { // if arr.Length is unsigned, this loop will continue forever } There's a couple of other cases that I can't remember off the top of my head like this too. It's not that it can't be worked around (you could probably replace the condition with `i &lt; Uint32.MaxValue`) but it adds extra complexity.
That being said, any language that doesn't support unsigned arithmetic is a joke. VB supports them now even. Only language I know of that doesn't is Java (*shots fired*).
Razor Pages is a high-level framework that sits on top of MVC.
A passing score is 700 out of 1000, or 70%. I'm not sure exactly what has been changed recently but I can assure you the changes don't comprise 30% of the exam. You failed because you don't know the material.
That's not fair. VB's feature set far exceeded Java's since VB7 (a.k.a. VB.NET). You can't expect a beginners language like Java to catch up to VB now. It has too much of a head start.
Yes... that's what implementation is. There seems to be some confusion on my answer. Please allow me to clear it up. From OP: &gt; it says that for newer versions it recommends RazorPages instead of MVC. I'm explaining that RazorPages IS MVC. That it isn't one or the other. That if you're using RazorPages you are also using MVC, but just a built in implementation of MVC. You can still use a mixture of RazorPages and other frameworks or just other frameworks. All of it will still be MVC.
All of the above. You just continue to build, read, learn, and grow. There’s no perfect path ... it’s just a continual process. Just pick a topic that you are most interested and study it. If you get bored of it, move over to something else. Come back to it when you want to try it again. Enjoy the learning journey. 🤓
&gt; Yes... that’s what implementation is. No. MVC itself is already an “implementation”. My guess is you didn’t originally know Razor Pages exists, and are now trying to weasel yourself out of the mistake, because your original post just doesn’t make sense.
I think you might be right, I never tested it though.
I admit that I was wrong when I said it was just a replacement for the view. I corrected that mistake with my first edit. Which was before anybody responded to me. And I did also forget to add the model to the edit but once again that's not the point that I'm making. Which is that RazorPages IS MVC. So unless you are saying that RazorPages ISN'T MVC we can move on as the following discussions have been made. * I was incorrect to not include the model * RazorPages IS MVC * RazorPages can be mixed with other frameworks
Because of the ECMA standard they wrote... unsigned ints are not CLS compliant and therefore anything using them would also be non-CLS compliant. The want lists to be CLS compliant (for obvious reasons).
I can't think of any reason to want it. You can get the same effect with an array of arrays, though you have to be careful if you want the same performance.
To me it sounds like a great opportunity to refactor some old code and improve the performance of your code base.
The new edition of the 70-483 book is a good material to study?
Yeh my argument was, if you require such a large Dara structure, you generally need another approach all together.
Buy and read the imposter's handbook. https://bigmachine.io/products/the-imposters-handbook
JavaScript?
Hardware plays into this. No software is benefiting performance-wise by only using the 31 most significant bits of a 32 bit integer, because the hardware does 32-bit comparisons. The fastest way to compare the least significant 31 bits of two 32-bit integers is actually to mask off the most-significant bit of each and do a regular 32-bit comparison, e.g. bool aEqualsB = (a &amp; 0x80000000) == (b &amp; 0x80000000);
Im guessing you wernt programming in the 90s and have got lucky to avoid this... I mean functions swallowing exceptions and returning false otherwise returning true.
I guess you missunderstood me. I mean functions swallowing exceptions and returning false otherwise returning true. If you didnt understand me because you havnt seen this approach, considdr yourself very lucky.
If you didn't care about CLS compliancy for your program, could you just make a custom collection whose indexes are unsigned ints?
You may have already going this, but follow this closely and it should work https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md
Would it be worth the effort?
If you do topcoder in C++, there is a high chance you made a mistake with looping to some size_t - 1.
Maybe for a queue where you want to store tons of elements, you are less likely to fill it up and have to create a new queue.
Just make a queue of queues!
Well, it's a joke. Statement still stands.
Well, I hope you update the thread and tell us what you ended up doing (or if the requirement of 2.5 μs was not viable). Because it gets hard to even keep track of time at nanosecond level since x86 processors use out of order execution and L3 cache/DRAM access costs you nanoseconds that could be used for calculations. Hard to track passage of 2.5 μs when the best resolution offered by the timestamp counter (QPC) on x86 is 1μs, let alone access memory/execute code. Windows has an API for high resolution timing, [QueryPerformanceCounter](https://docs.microsoft.com/en-us/windows/win32/sysinfo/acquiring-high-resolution-time-stamps#low-level-hardware-clock-characteristics) and the page for it gives good insight on the timings you can achieve. I suggested FPGAs not because they are performant. They have very low jitter unlike x86 CPUs and are used in applications requiring high resolution timings because you can control everything. Highly doubt CUDA (PCIe latency + GDDR5/HBM2 latency timings PLUS DRAM/L3 latency problem) will be coming close to the timings you require.
Thanks for bringing in some “C# isn’t the only language” kinda disheartening to see how much discussion taking place and mindshare that imperative/OO has around here. Would highly recommend F# and functional paradigm to anyone that gets that “but this doesn’t generalize” feeling when working with OOP!
&gt; What next? Regular dev still feeling as a junior. A lifetime of feeling you are worse than your peers :)
I get that this is a ton of work, it the framing in the post is disingenuous. Microsoft has been moving stuff out of the main process since the 2015 version, but the post frames it as though it’s a recent revelation that it would be a good idea for Resharper to do the same.
Don't blame VB for this, it handles unsigned integers just fine. Java and JavaScript don't, both of which were part of the first version of .NET (J# and JScript.NET respectively).
Those methods should probably also use unsigned ints.
So a couple of points: 1) I make it _Very_ clear that my post is opinionated. In fact the bit you quoted doubly clarifies this: &gt; Interfaces are almost required for any kind of abstraction (Again, **this is an opinionated comment**) Off the back of that, I make it clear in my opening gambit: &gt;**This comment is opinionated** and some will disagree, but that's ok, it's a start. Go into it with an open mind, try to understand the bits and then **decide for yourself**. 2) This is /r/csharp... &gt; They are what is necessary in C# So I'm not sure why you feel the need to wade in on this.
Unity uses C# 7.0 since 2018.3 and you were able to use C# 6.0 since 5.4 with .NET 4.6 (if i recall both versions correctly)
&gt;Very clear that my post is opinionated An opinion is not beyond criticism.
Nice, but It would be nicer, if they emitted a 15-20 page document with the most typical scenarios and what to watch for and a bit of background explanation. A lot of low level stuff touched in the vid is new to me and just hangs in empty space. &amp;#x200B; A bit of explanation of typical scenarios, pitfalls why they can be expensive, where the allocations (one would not think about) happen etc would be nice. In written form. I think it would be reasonable if the .NET team made a white paper like document with that subject..
Java's had unsigned arithmetic support since JDK 8, though it's a bit awkward. +, - &amp; * are as normal, but instead of / &amp; % static methods on Integer and Long must be used. There are also static methods for unsigned toString and unsigned parsing.
Well... no. Math.Max should use unsigned? Of course you can add a bunch of overloads but that has a cost too. Signed Count is probably less painful.
Angular is a JS framework that makes use of TypeScript (a strictly typed language). At the company I work for we primarily use Angular for front-end and .NET Core APIs for the back-end.
Thanks for your reply. Since I'm still a noob, would you mind giving me your thoughts on my learning roadmap? Is it best to focus on learning vanilla JS first, while picking up HTML/CSS, and front end dev with React, then as I develop my skills dabble with Razor and the .NET Core for the backend? or should I not mix it up and do Node.JS after?
I can only speak from my (admittedly limited) experience. I never covered JS in my studies and Angular was pretty much my first experience with JS. Personally I would preferred to have known JS before using Angular, since it just builds on existing JS knowledge. I haven't used React before but I've heard good things, I think it's right up there with Angular/VueJS in terms of popular JS frameworks. I've done very little programming using Razor so I can't really comment on that. I do enjoy Angular though. HTML is pretty basic but I've found CSS can get quite complicated, but overall you'll pick up knowledge over time in all aspects. The best thing you can do is literally just code stuff. You'll learn far more from *doing* than reading. Sorry I can't be of more help!
&gt; I do know/use advanced stuff like asynchronous programming, delegates/events (not so often but..), generics, LINQ etc, but I still feel like I'm a junior. IMHO delegates/events, linq, generics, or even async/await arent advanced stuff.
At my company we use angular as well. Developers are expected to k ow that, c#, entity framework, asp.net, sql. HTML, bootstrap, css... We don't get to pick a front end or back end. The people who are full stack are the ones getting the job. That was a company doesn't have to hire two employees, they can hire one. If you are still dabbling, I suggest start with html, css, JS. Once you want to take another step, try implementing some C#. Then Angular. Bootstrap after that maybe. I think that would be the route I would go. There is no wrong way, so long as you are learning and advancing.
Unsigned integers don't permit you to have some values representing special cases. The classic example is a find method looking for a value in a vector can return the position if the element is found and -1 otherwise; with unsigned integers alone you are forced to have a method retuning a bool and taking the position by out / ref risking to use it if not checking the return value property. In the case of signed integers even if not checked properly accessing position -1 can easily be spotted as an error by the following invocations. Using unsigned values in C++ was definitely an error that cannot be fixed now.
No when a user sends a request it will create a new scope and process the request. It will not magicaly create a new instance. A singleton service will have the same state for each request
Thanks for correcting me. TIL I can also blame C# oddities on javascript too.
Uhhhh what does the count have to do with what the index is? IDC if you have -1 to -100, the amount of entries is 0 or higher.
School is just good for papers. Now you can start learning for real
There's \`LongCount\` for that [https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.longcount?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.longcount?view=netframework-4.8)
I have similar interests and while I'm no expert and tech is unpredictable, I've decided to stick with .NET and C#. I tend to see plenty of offerings for it around my area. My reasoning behind this is the major initiative and overhaul Microsoft has been pushing. Check out Blazor and Wasm. While JS will likely always be around, this seems like the next big thing Microsoft is also pushing Core OS, has a pretty awesome new Edge browser based on Chromium, Windows Subsystem for Linux and also the new Windows Terminal to consolidate all of the different shells into a single area. I'm excited for the future and while I don't have much developer experience, this makes me feel like I have somewhat of an even start with others if this causes a paradigm shift in web dev.
You could also use the community (free) version of Visual Studio if you really aren’t succeeding in getting VS Code to work.
&gt; `using System.Windows.Media;` `System.Windows.Media` namespace is a part of WPF and you shouldn't use it for Console apps. &gt; I go to put SoundPlayer but it doesn't exist. `SoundPlayer` is a part of `System.Media` and not `System.Windows.Media` &gt; `System.Media` `System.Media` namespace is a part of .NET Framework and you should be able to add it. Are you sure that your project type is "Console App (.NET Framework)" and not "Console App (.NET Core)" ? `System.Media` does not exist in .NET Core as of now (but it'll be added in 3.0).
Indices aren't the same as a count though. How do you have a negative count?
I would recommend learning as much as you can about design patterns. They will take you a long way and stay the same whatever version of .Net you are using. Also, I recommend the [book for the exam 70-483](https://www.microsoftpressstore.com/store/exam-ref-70-483-programming-in-c-sharp-9781509306985). It's not very in-depth but it covers most of the functionality of C# and I personally found it very easy to read, if you already know basic stuff. As for feeling like you are a junior, it is common and I also feel this way despite having coded for 6 years now. But ask yourself where you were 5 years ago? And then compare that with what you know today. You will find that a lot has changed since then and that's the important part.
I just checked and it is .NET Core. How do I change it to .NET Framework?
Easiest way would be to create a new project. Or you can replace `&lt;TargetFramework&gt;netcoreapp2.2&lt;/TargetFramework&gt;` in your `.csproj` file with `&lt;TargetFramework&gt;net47&lt;/TargetFramework&gt;` I think. Also, SoundPlayer only plays WAV files. Use a library like [NAudio](https://github.com/naudio/NAudio) if you want to play MP3 files. See [this](https://github.com/naudio/NAudio/blob/master/Docs/PlayAudioFileConsoleApp.md) example.
Thank God someone else feels like I do!!! I study by watching courses on pluralsight and read articles about technique and the industry every week. Still feel like I'm so far behind my excellent coworkers. I'm not that far behind but it feels like it. 😀 Best advice: this career is a marathon, not a sprint. Then, just when you feel like you are going to cross the finish line, someone moves it another mile down the road!
Depending on the systems you work on. We've implemented a microservices architecture for our systems so messaging is now a basic concept for us. Previous to this, I never worked on a system with messaging in 25 years of being in the industry. It all depends on your systems and exposure.
C# path is your first stop. Then you need to do Entity Framework Core + the specialization of your choosing. What language did you code in at college? &amp;#x200B; Also, do not take 6 months off from job searching. You should have already been applying to jobs before you even graduated.
I did C#/.Net and yes I am also applying at the same time
I recommend reading The Daily WTF to cure imposter syndrome.
That's a GREAT point. Thanks for adding
Got you covered, boss. https://www.freecodecamp.org/news/2019-web-developer-roadmap/
I'd rather go for HTTP / Security instead of OOP bullshit and interview purpose algos.
You could do the problems on exercism.io too. Just make sure to do "Independent Mode", otherwise you will be waiting for days for someone to review your code and you can move on to the next task.
When you have a codebase as large and as old as ours, a whole team of people working on it, and constant demands for new features and specific bug fixes from customers that operating a successful business requires you *must* handle, you really don't get to just choose to do a large refactor project even if it'd be a good thing in the long run. At best you can do incremental fixes while you're doing other things and slowly improve things a bit over the next few years.
Speculation: C# might actually end up being more common outside the Bay Area. C#/.NET is more associated with enterprise work and somewhat less with tech companies (there are plenty of exceptions to this). Overall Python / Javascript are the 'hottest' areas for new developers, but it's entirely possible to start anywhere. Also, unless your goal is to work on actual 'hard' CS-type problems, I'm not sure that a MSCS is really needed especially if you're interested in working in web. Javascript (and HTML/CSS) are going to be much more relevant there, and honestly it sounds like you've already got the programming knowledge. It's a bit harder to get the foot in the door without a CS degree of some type, but if you already know how to code and are a diligent learner I think you'd be ready to start the job hunt. Overall a coding portfolio is going to be a lot more relevant when your application crosses someone's desk than your degree.
Not an expert on the job market in the bay area but I suspect JS is easier for entering the market. I don't know what my advice would be though especially for a person who says they prefer working in statically typed language. There is a chance that you will be unhappy with the job. I know I'd rather not work as a programmer than work with JS full time.
Speaking as primarily a JS dev, it is very much worth it to learn Vanilla JS if you want to work on web stuff. It's seldom that you'll find a job where all you do is write new code, or work inside a framework the whole time. JS has a lot of design 'gotchas' that, whatever you think of them, are still going to be there when you write or maintain code. .NET and Node can do some similar stuff, but overall .NET has a well-defined set of best practices that come with it. Node.js is far more flexible, but provides a lot of ways to blow yourself up along the way.
You are not modifying the "same" model when two users edit a record. They are just modifying the same database record and whoever pushes their changes to the database last will "win". So lets take a practical example: We have person A and B both modifying record X, which has a property FirstName: 1. A and B get X from the database simultaneously. 2. A changes X.FirstName to "Walter" 3. B changes X.FirstName to "Hans" 4. A saves the changes to the database 5. B saves the changes to the database In this case, the record's FirstName property will first be changed to "Walter" then to "Hans", so B wins in this case. As for creating new instances of your app, this is not the case. Let's take another example in form of a fast food joint, you have multiple cashiers tending to multiple customers at the same time. For each customer, a new cash register is opened. They will not magically clone the whole fast food joint because that would be inefficient as fuck, so they only open a new cash register. This abstraction would be the request scope in [ASP.Net](https://ASP.Net), which creates a new scope (cash register) each time a new user (customer) connects to your application (fast food joint, you get the idea).
Ah that sweet passive aggression. Seems *people* have a lot of personal reasons to keep it passive.
I worked with medics for a while and was horrified by the ridiculous mix of wrong concepts in the heads of regular doctors. That was in the aughts and nothing got better since then: people have the same limits they had five hundred years ago when the scribes were replaced with printers.
As you said you’re not familiar with design patterns, I guess it’s a good time to invest some time in, they can be applied to any other object oriented language, quite worthy spending some time. And also maybe some design principles, you may know them at the very beginning of your career, but I found you may find something new if you study it again after you got some experience
 if (optionvalue.IsNone){ } or: if (optionvalue.TryGetValue(out var value) { } or with linq: var result = from val1 in optionvalue1 from val2 in optionvalue2 select val1 + val2;
Get used to it, cause that feeling will never go away.
Get some knowledge of Web API, Asp.net Mvc, entity framework, angular js and also native javascript and jaunty. Bootstrap and css are also required, do some learning on unit test. I am a .net full stack developer, those are first things pop in my brain. Btw, I think there are quite a lot entry level positions for .net developer.
Assuming you want to enter the industry and don't really care in which field the most common way is ASP.NET web dev so - C# in console apps - some algorithms to make sure you understand how lists and dictionaries work, have an idea what a tree and graph is, no need to know complex algorithms but be able to recognize them even when they are not explicit for example controls on a web page form a tree but there is not Tree&lt;Control&gt; type. Learn what space and time complexity is. Make sure to stop yourself if you feel you've gone too far past what I suggested, you can spend your whole life learning about algorithms and still not be done with it. You can come back to improving your algorithm knowledge after you get your first job. - SQL with Microsoft SQL Server (queries - the basic ones plus joins, group by, having, how to do paging, db design - one to many, one to one, many to many, normalization, optional - basic indexing) - Entity Framework (still in console apps, learn how to use existing databases, you can skip the part where the C# code creates the DB) - some HTML + CSS (divs, a, h, tables, ol, ul, select + option, input, form, semantic meaning of tags, don't go into things like canvas and svg) - some JavaScript (make sure to not assume that it works like C#, learn functions, arrays, objects on a basic level, learn to do validation and manipulate elements on the page (hide, show, slide) - learn some HTTP (methods, semantic meaning of methods and status codes, how to use browser tools to check that) - ASP.NET Core with MVC, learn what a service layer is, disregard any tutorial that does repository unless they are using the specification pattern but if you can just skip the whole repository thing - Build a web project of your choice with the following elements (I will use a blog engine as an example but you can invent your own project bonus points if a relative or friend of yours can actually use it like a small business website, local charity website or something) a) Have users with roles (use ASP.NET Identity), say moderator can delete comments, admin can promote moderators, editor can post blog posts b) Have one to many relationship (blogpost - comments), have many to many relationship (blogposts - tags), if it goes well add a tree relationship (for example child comments), learn how to use CTE in SQL Stored Procedure to write recursive queries and plug that into EF, learn how to put and retrieve binary data into the database for example store user avatars in the database c) use AJAX somewhere for example to post comments. Do client side validation d) Implement a grid with server side paging. Put the page number in the URL and load the proper page on first load. You should only retrieve the data from the database that is shown on the screen. Bonus point if you combine with sorting by column and if you learn what are the potential problems with this type of paging and what alternatives exist e) make sure you have all the necessary pieces for a real world project. For example the fact that I didn't mention registration page and forgot password page doesn't mean you shouldn't have it. You should have simple but fully usable project preferably deployed to the world and not ugly. Don't go deep into things with no actual learning value. For example you can probably invent 20 more roles for users but you won't learn anything new from that. f) learn something about security. Learn about SQL injection, html/script injection (a.k.a. XSS), how cookies are used to recognize the user and why and when this is secure. See how many times you fucked up and fix the existing code. Register a user with the username &lt;script&gt;alert('test')&lt;/script&gt;, start posting comments and blogposts and observe the horror. g) if you make it here and still don't have a job continue applying and use the time to learn a JS framework like react, vue or angular and implement small part of the project with it. For example you might implement admin panel that uses it. Good luck
it is
Some PowerShell calls will fail if a class or method is not CLS compliant. [Here](https://www.catapultsystems.com/blogs/using-non-cls-compliant-types-in-powershell/) is an example of this behavior.
Additionally: You can create a custom indexer for a class/struct that could use negative values for something.
Jetbrains never wants to acknowledge that about 90% of Visual Studios performance problems are caused by their product or that they've bought their feature set through horrifically tight coupling. The argument that the problem is that Visual Studio only being 32 bit also plays well with the ignorant. When it works, Resharper is a pretty amazing experience, but it simply doesn't work most of the time because the awesome flow it *can* give you is destroyed by the grinding performance issues.
This helped. Thanks alot.
I honestly don't know what that means. I thought entity framework simply mapped databse objects to c# classes, and that linq was a way to work with entity framework to query against a database.
In your code you really should make it IDisposable + using(). Similar to transactions. &amp;#x200B; Or try{ } finally{ } at the very least
What do you consider advanced
You sound more mid level to me. How many years of exp do you have? If you keep trying to learn, you will be senior/architect in no time. Learn decorator and strategy patterns. Learn WET vs Dry, CQRS, Event sourcing, cloud, functional programming, rxjs, DDD and you'll be well on your way.
What is your goal for this project? I was tempted to write something similar myself...
Sounds like it's no different to when I used it back in Java 5/6 days. Basic arithmetic works the same anyway and unsigned arithmetic still requires pretending your `int` is a `uint` with various methods that help work around it. As long as there's no inbuilt `uint`/`UnsignedInteger` it's still not good enough IMO. Don't even get me started on that triple-shift operator.
That's interesting, so it could be something to do with improper configuration. The project I'm contributing to is actually a .net framework project, not .net core. So changing the query results to iEnumerable I'm guessing is a really bad thing since it pulls in all the records &gt;_&lt;
It works fine. There's an up front hit, but even in VS 2019 I still prefer the Resharper experience rather than the vanilla version
Your better option to learn how to program in a professional environment is to go onto github and find an open source project that is interesting to you. Find one that is semi popular or at least has an active developer community. Start going through their github cases. Start with the small things just to get acquainted to the code base. Small bugs that are easy to solve, then move onto harder ones and then features. As you go along people will start to recognize you and you can put it on your resume that you contributed to an open source project like vscode, vue.js, .net roslyn or something. You might be able to meet someone who has a job opening and you can get a job.
It's not just an upfront hit, it's a massive ongoing hit unless you disable all the features that actually make it useful. There's also not just vanilla and Resharper, there's a bunch of extensions since Roslyn that can do most of what Resharper does with a much lower penalty.
When you use ReSharper, then all your code constantly gets parsed twice: By Roslyn, and by ReSharper. On every single keystroke.
&gt; What is your goal for this project? CSV parsing came up at work a couple of times, and I was not too thrilled with the open-source libraries that I could discover at the time (I put a bit more detail about halfway down the page [here](https://airbreather.github.io/Cursively)). So at first, my goal was just to make something that deals with just the details of RFC 4180 with minimal overhead. Now that that's out of the way, my main goal is to make it easier to use by adding wrappers that build on the foundation that's there now.
You want your count and indices to be of the same data type. Better performance because it eliminates casting.
When I first tried vs code I struggled a little bit. When you have a C# project you should get a suggestion for the C# addon (by microsoft) that's powered by omnisharp. If you install it, let it download and install it's thing (will take a few minutes) then you should get a message about missing files. You should get a launch and task json file. After those I was able to debug Except in one project, IDK what's going on but only one console project of mine doesn't debug. It only debugs when I throw an exception.
Count is the difference between the lower and upper bound plus 1. Why complicate matters by adding a cast?
I agree, it is an amazing experience. Unfortunately, as you probably implied, it starts to become sluggish after running for a while. I was able to get some additional space by editing the VS Executable and making it large address aware, but it still gets bogged down by Resharper sooner or later. Also, I notice they keep saying to try Rider. For what it is worth, I do like Rider, but it still has some rough edges that make it feel incomplete compared to Visual Studio. The most noticeable is when I am working on WPF or other XAML oriented projects. I still have to use VS for editing XAML since Rider doesn't have all of Resharper's XAML features. :( There's other things as well, but that's the one that sticks out in my mind the most. Still, I'll be patient. I just hope they don't give up on it.
Hey- saw your work on the Hikvision. Used your command on (which you gave credit for finding elsewhere) a pfsense box, and was able to read out the file. Passed the file through xor engine here- &amp;#x200B; [https://wiremask.eu/tools/xor-cracker/](https://wiremask.eu/tools/xor-cracker/) &amp;#x200B; (pretty cool, figured out the 4 byte code too), and dumped the text. Turn off adblock. &amp;#x200B; Then I could see my passwords. &amp;#x200B; Sadly, it didn't help me crack open my POS EZVis NVR or get access to the cameras. But it's a start.
Lately I've been using vscode with dotnet core wherever I can. It's not a substitute for everything, and it's definitely got some rough edges, but it's pretty nice.
Look at this guy not having problems because his organization polices their file line counts so he doesn't crash VS whenever he opens an 8000 line EF generated class.
So, what I’m hearing is, you plan on a good amount (12+ months) of further development? Also, I assume you plan on keeping it generally up to date? Assuming I’m not wrong with my assumptions, I’ll check it out and contribute something to it when I have some time later :). It would help us you broke down your “issues” for future work into slightly more manageable chunks so that people can pick up tasks.
This is a very good point. Using `long` would probably be the easiest work around but then you might as well have used long for the index in the first place.
Uhhhh, count is the amount of elements in the object regardless of their index/key (hence why strings work as keys)
I've been on the path all along without knowing it. Hope OP finds his way too. Thanks for taking the time.
In addition to the other answers here, (CLI compliance, reverse looping technicalities), it mostly has to do with the fact that everything else uses `int`s, and complicating things by creating a special case `uint` for `Length` or `Count` simply isn't worth it for the extra bit of length. If you really need that extra range, it's simpler to just jump to types that have`long` indexes and lengths. Adding to this, many methods use negative numbers as a "special case", such as socket reads. A length of -1 usually indicates end of stream or error. Using `int`s in this case, but `uint`s in other cases makes programming with lengths a lot less convenient.
Mostly because we're all not very good at our jobs :(
Consider: for (int i = 0; i &lt; myList.Count; i++) If this is in a tight loop, do you really want to pay for a cast with each iteration? And would that even compile? There are no safe casts between an Int32 and an UInt32. Actually it will, because both can be cast to an Int64. But why take the performance hit of doing so?
I just checked and `long` is what the casting rules use. Int32 index = 0; UInt32 count = 5; var x = index - count; //long
CodeAcademy has a great course in C#. Also, [https://books.goalkicker.com/CSharpBook/](https://books.goalkicker.com/CSharpBook/) is a great resource I use frequently. &amp;#x200B; Get in it and practice with I! Best of luck
Yeah casting the IQueryable to IEnumerable will force it to execute, which, if the query runs a lot of data, *can* be a very bad thing. I would verify that whatever property you're trying to access is properly wired up to work with your query provider, because that's almost certainly what's causing your main problem. Also, idk if this is what you were referring to, but it's worth mentioning Entity Framework Core can also target .NET Framework. The naming is a bit ambiguous, for sure though.
Don’t worry about 90% of your samples being CRUD because 90% of dev jobs are CRUD.
You can start by going through Microsoft repo in GitHub. Here is the link. https://github.com/Microsoft
This also should take priority over "new features". Resharper is pretty feature complete - they should focus a whole lot more resources on this over anything else.
Linq to Entities is a framework that predates Entity Framework. Different thing. Your error message makes me think you're using it.
Right in the feels
Everytime I get this feeling I know it's time I find a new job. A few years working on the same team with the same stack makes everything feel stagnant. Moving to somewhere new will expose you to more and you'll grow as a dev, all while getting paid more.
If you are looking for content, I would recommend Tom Corey on YouTube (he also has some paid courses). What I like about him is he is very good at showing some c# principles and showing real life examples on how to apply them. Also he teaches you how to think like a senior dev.
You're mostly right, just missing some of the nuance. LINQ is literally **L**anguage **IN**tegrated **Q**uery. Really all that means is the ability to use the query syntax and underlying extension methods on the `IEnumerable` and `IEnumerable&lt;T&gt;` types. In and of itself, LINQ doesn't let you perform any magic, it's just a very easy way of querying collections in C#. Buildong on top of that, using the related `IQurryable` interfaces allow you to use the same syntax and have it dynamically translated into another language, then execute that query when the `IQueryable` is enumerated (i.e. by calling `. ToList()`), and then parsed and read into memory as C# objects. `LINQ to SQL`, `Entity Framework`, and `Entity Framework Core` are all examples of Query Providers that can take your code and your C# query, convert that into SQL, and run it against a database. LINQ to SQL is considered deprecated, as is the original Entity Framework (for new projects, at least).
I'm not sure what you're trying to say or if you posted on the wrong comment. My comment is highly voted and is saying there's better performance with int. I also said count and index has nothing to do with eachother because even if you can use a negative index (which is only allowed in a dictionary or something that uses a key) count would still be positive. You said earlier "Count is the difference between the lower and upper bound plus 1". If I have -10, -11, -12 is the count -3? What if it's -10, -11 and -16? Is it -7? Count has nothing to do with the index, it's the amount of elements in the dictionary or the size of the array (0 or more)
Good answers here. A lot of places also just plain signed 32 bit integers for every whole value numeric type (such as db keys or flags that might only have 3 values)
This is an awesome reply, man. Thanks a bunch.
Thank you for sharing :)
Read all the keywords and operators here https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/, if you understand the keyword in the example you can skip the page. I learned a few things from those pages. Do a few simple dotnet console projects then take a dive and try to learn asp.net core. The part that got me started was paying attention to @pages at the top of cshtml files.
&gt; I also said count and index has nothing to do with eachother. And I'm saying they do because they are often compared.
Ok that makes more sense. (For anyone wondering, `for(var i=0; i&lt;thing.Count; i++)` is an example)
Thanks for all the help! Really appreciate it!
You can use the `checked` keyword to force bounds checking for over/underflow. This causes an exception to be thrown when the condition occurs.
Yes that's the point. Another one is mixing signed and unsigned integers in a statement (which you'd often do in similar cases). While there are strict rules for that, they are far from intuitive.
Yeah man I installed and removed Resharper the same day, I don’t care if it made me coffee and performed blowjobs at the same time nothing is worth the performance degradation it comes with.
now a better question becomes *why was it not made CLS compliant?* the answer might be that signed ints are much easier for arithmetics.
&gt; have an idea what a tree and graph is I know! I know! Stuff CS majors like to mention that never had any relevance to my 35 years creating business applications! Did I get it right? :)
&gt; Find one that is semi popular or at least has an active developer community. Start going through their github cases. Sorry to be a lame beggar -- but can you specify a project, please? I have no idea how to research this.
The worst part is that you'll start using it and it'll work and it'll be like magic, but then it'll stop. It teases you.
sure. You could do [vscode](https://github.com/microsoft/vscode) [Node Js](https://github.com/nodejs/node) [.Net](https://github.com/microsoft/dotnet) You'll have to poke around and read a bit and find work your way through it but keep trying and finding code that you like to work and something you think you can do. There's millions of code bases that would love your help.
Yes. Successful people read a lot. Successful developers read a lot. Our kinds of books can be expensive, but most of us can convince our bosses to buy a few books for us or get a subscription to O'Reilly. If not, buy them yourself because it's an investment into your own career and future.
Everybody has the parts they like. I'm glad there are protocol &amp; security people out here. I personally hate the thought of learning interview-purpose algorithms. I do, however, love the OOP junk, design patterns and all. Thanks for sharing your opinion, I'm glad you're here. It's funny though, everybody has areas of interest, and most of the paths to get there are good ones.
Yeah I agree, OOP is fundamental and can be used in any language with OO-like constructs, which includes python and java, and even javascript to some extent.
&gt;At best you can do incremental fixes while you're doing other things and slowly improve things a bit over the next few years. Yes. That's what I mean.
Sorry, those are way too big for me to contemplate. You're seriously proposing that I could *contribute* to .Net or add a feature to VSCode? Do ordinary coders *do* that?
&gt; Anybody care to push back about this? When did the repository pattern become a code smell? Maybe because he was pointing him to EF and EF essentially already covers repository pattern? Unknown
Do people really have that much of a performance hit with ReSharper after startup? I work on a 10 million line project at work, and on a mid-range azure node I don't experience any serious slow down during the work day.
I've used so many trees and graphs, and even a Bloom filter once. I know you were only referring to your career, but to give a counterpoint: data structures can be critical.
That's good, but I don't think they're going to want that. What they're going to want is someone who can help solve their problems. Lets stick with vscode. So the first thing you want to do is download the vscode repo and get it to compile, link and run from source. The next thing I would do is start to go through the [bug help wanted label](https://github.com/microsoft/vscode/issues?q=is%3Aopen+is%3Aissue+label%3Abug+label%3A%22help+wanted%22). Find a case in there that looks easy and see if you can replicate the bug. Next is to try and solve it. Once that's done then submit it. Rinse and repeat with another case. There's over 5000+ cases so there has to be one in there that you can solve.
Ok.so linq to entities is another query provider.. is it possible to have more than one query provider per project? Ill have to go back in and look tomorrow but I think the intellisense showed others in there.
Only sporadically, when something has clearly gone wrong. Most of the time it's fine, and hardly any noticeable difference from vanilla VS, after start up. But then it'll just choke. And sometimes it just keeps choking until I restart VS. With each new version of VS I try it without Resharper, filling holes with plugins. But I always go back to Resharper. Half the plugins around are barely working garbage, and a bunch of them overlap in features and often in incompatible ways.
Just as you don't let it lead you the false-rockstar syndrome, which frankly is way more toxic. (not saying you do, btw... just always good to bear that in mind never to get overconfident when seeing such catastrophic examples). At least feeling dumb pushes you to realize you need to keep learning instead of settling into false confidence :)
https://www.youtube.com/user/IAmTimCorey
I'm not sure &gt;strictly typed Is actually a thing. Do you mean strongly typed?
I've switched to rider. Which has provided a different set of problems lol
[removed]
What out of curiosity?
No, it's impossible.
most annoying: it doesn't save in the file.ecodiing ive.set in settings. I can't get js debugging to work. after launching and auto openin the browser, rider becomes unusably slow for whatever reason.
Which is probably expected given you haven’t paid $100 or whatever R# coats.
I love it. Shameless plug to ask you go over to /r/vscode and tell folks what you like/don't like about it.
Thanks for the reference. I do read a lot, but not books I guess.
Actually everything you do get more knowledge falls under the subject of 'reading' I read a lot of blog posts, ebooks, Reddit topics etc. I also listen to about ten different podcasts. This all helps.
Inspiration is hard to manage. Normally you would build a tool, as your project, that fulfills a need you have. Normally you encounter this doing other stuff on your computer. But you could always try to recreate an existing tool, like a calculator, or (but this is harder) a little email client.
EF already implements UoW and Repo pattern. That's why I believe he mentioned service later in particular. In .net core you also inject in your context as well so it has a layer of abstraction for unit testing
You could look up c# programming tutorials, build it yourself and compare with the tutorial’s solution.
The kinds of projects you should do to learn a language should be simple, and they don't need to be original ideas. If it sounds interesting, try cloning simple apps that ship with your OS - notepad and calculator are two good projects that taught me a lot back in the day. These kinds of projects where you clone simple apps work so well for beginners because you'll be able to find plenty of documentation online explaining the things you'll need to do to get it running. I'd also add that it should be something that'll actually interest you, as that's the major motivating factor. Beat of luck!
I think they mean work towards solving a specific goal or task, because that's what programming is. Nothing more than solving problems to work towards a final result. It becomes easier to understand the fundamentals of programming by picking an end result that you are attempting to achieve, and then step-by-step work on doing so. Example: Say you want my create a program that can batch rename files of a certain type, now break that into smaller problems. How do you find these files via code? How you determine if they are the type you want? How do I want to rename them? What if the user does not have permission to rename them? etc. etc. Even minor tasks have lots of smaller steps that it takes to accomplish them, and many contingencies that you must plan for. The project doesn't really matter what it is, it is just for learning purposes. It is merely somewhere to work towards. Kinda like telling someone to "go somewhere". It really doesn't matter where to, so long as it going towards some destination and not sitting and going nowhere.
Well, I know those 2 patterns (mentioned that I don't know all of them, but some of them). &amp;#x200B; Anyway If we exclude my internship experience (no one gave a f for me and learned nothing) I have 2 yrs and 3 months of exp. Working as middle dev for 3 months already.
Okay then, I value your opinion. What are the "advanced" C# topics?
What does Resharper do that VS doesn’t? I remember ditching RS with VS2012 because I no longer felt that VS was lacking in any area and VS has only gotten better since then.
Visual studio has a ton of performance problems without R#, and it's increasingly caused by the, imo outdated, decision to keep VS a 32 bit application. The argument against it was old back in 2012. It's been almost a decade, and while we have *some* out of process features now, we're still hearing the same arguments against a 32 bit VS. It's annoying, and I can't fault JetBrains for harping on it. They are one of the few companies that have enough weight to make a difference in this decision.
The Roslyn full solution analysis is as much a problem than R#. Microsoft tells you to disable it if you have performance issues in vanilla VS as well. I see a bigger difference with that than I do R#.
One way is to come up with a solution for your particular needs. Otherwise, you will need to figure out which area (web, desktop) you want to dive into first and work your way up from there. An idea I usually suggest to people who would like to get started on programming is to write a basic IMDB clone. Obviously, IMDB itself is a huge undertaking, but having a basic web application with a list of movies, a list of actors, some ratings, some Many to Many relationships between movies and actors and comments (reviews) is something that should get you started nicely.
You could do the Microsoft Certification 70-483 "Programming in C-Sharp". You won't learn much about architecture but you will learn a lot about the whole ecosystem. Also, a microsoft certification doesn't look bad on your resume, I suppose.
It would be nice if you could disable the built in VS one but they’re not likely to put in the work for that.
your EF operations still belong in a repository. the entire point of repository pattern is to abstract from from the actual database implementation. not implementing a repository just gets you hard coupling.
It really doesn't, at least not in recent versions. There's really no compelling argument to make the core app 64 bit, because unless you're trying to run something massive in process the memory limitations really aren't a problem, and only Resharper actually does that.
I should add, so far I like using it better than VS. Might be biased because of how much I've used intelliJ in the past, though.
Already subbed there, and most of my issues have already been addressed (until fairly recently you had to reload the workspace far too often when stuff crashed). At this point I'd mostly just like to see more refactoring support, though that may not really be possible.
Yeah, I'd second this. Working on an open source project can demonstrate how you work in a team and how you respond to criticism as well as displaying the quality of the code you write. It will also get you an honest assessment of your skills, and give you an opportunity to improve. Find some bugs in an OS project and attempt to fix them, but also take a look at bugs that have already been fixed and see how they were addressed; ask yourself why the fix was implemented that way, and whether you'd have done the same thing. If your way was different, how would you assess which was 'better'? You'll be contributing to something more useful than a solo project is likely to be, but will also get an understanding of the discipline needed to work well in a team, and being able to demonstrate this should help with job applications.
For specific help on Plurasight, I would recommend: - Doing the majority of the C# Path, as it gives a very strong foundation to build on - Do C# Generics, Links, Dependency Injection, and watch the course on the SOLID principles from 2010. This will help build your C# knowledge, as well as understand some of the basic principles of well-designed code - Start building your own apps! Think of interesting ideas you want to implement. One of my first apps was making a Console App that downloaded trailers for all the movies I had downloaded. It was stupidly fun, easy to make, and utilised a wide variety of skills Good luck!
\`Math.Max\` *has* overloads for all numeric types.
Are you on MacOS or non-windows by any chance? I've seen when web browser issue seems to be Mono going to 100% CPU usage. Can happen after a Build as well for some reason, but looks like its a mono issue in my case, rather than a Rider one.
Bad example I guess. Point still stands.
try to set a goal in programming. I started making an electric calculator to calculate equations for me in electronics like V=IR, R=V/I, etc. I could Google how to read console inputs and put them into variables, how to convert them to ints, divide and multiply and then output the final number to the console. then I started to build it into WPF to give it some UI. it took months to get used to UI design because there's so much to do with it, so you probably want to start with console for now.
 Heard of Design patterns (I don't know all of them because I still didn't find a need to use most of them or write them by myself Yeah, a junior programmer would add design patterns just to be cool. Your not one. N.b. Without seeing your code the only bit of advice I can give is I find juniors mosly lack in OOP, database design, KISS, YAGNI, TDD, actually knowing the traps of EF and fundamentals they would know if they did C or C++ and overall exposure to different ways to structure an application.
Which extensions do you suggest?
Being behind your peers sound amazing, such a great environment to learn. I really miss that. The last guy I worked with that was a lot better than me said 'you have a great attention to detail, but arent a pain in the arse like most people that are analy retentive'... i suspect the reason was I was learning everything I could off him and was more than happy for him to steer the ship. Learn while you can.
windows 10. I am using the edge dev, so that could be it. But I don't know why that would cause Rider to be slow, even after I've killed edge and IIS express.
I am :)
Danger Will. The GOF book said in the introduction that it helped provide a common language so when someone said a factory pattern, everyone knew what they were talking about without having to describe it. The bad side of the book is junior programmers implementing factory or abstract builder patterns everywhere. Its bloody obnoxious.
Yes. VS constantly hangs for 5-30 seconds and then give me the, "We suggest you turn off Resharper" thing. I have a 3.4GHz, 32 GB Ram, SSD machine. So, it's not specs. If i turn off Resharper everything is fine.
You could find some ideas for projects on the internet. Just google something like 'project ideas for software engineers'.
If you're using a UIElement (almost anything) in WPF as your capture area, you could use the [mousedown](https://docs.microsoft.com/en-us/dotnet/api/system.windows.uielement.mousedown?view=netframework-4.8), mousemove, and mouseup events to capture your drag area. The idea should be the same for WinForms, etc. Those three will be the hooks you want for starting, updating, and ending a snip. After that, it's just a matter of using the start+end points.
You could follow Tim Corey's courses/videos, where he makes a complete project from start to finish. Or just use them as inspiration. https://www.youtube.com/watch?v=Xtt6mS0p2_c&amp;list=PLLWMQd6PeGY0bEMxObA6dtYXuJOGfxSPx and https://www.youtube.com/watch?v=HalXZUHfKLA&amp;list=PLLWMQd6PeGY3t63w-8MMIjIyYS7MsFcCi
Pretty sure greenshot has what your meaning, https://github.com/greenshot/greenshot
One can try hitting HackerRank.com or geeksforgeeks. I myself had quite a eye opening experience after reading those sites! I am a solution architect, and thought I was at the top of the game. But sites like these showed me the basics I have been missing. It's not what advanced programming skill I mastered, or how many so-called frameworks Microsoft which I have learned, that matters, but good old algorithm and data structures. Realizing these shortcomings also help me have a better appreciation of those big data computing. So for fellow programmers who felt like missing something, try looking back at basics. No fancy jagon can replace good old OOP, Algorithm and Data Structures.
Roslynator.
Code cracker is pretty good and roslynator are pretty good, refactoring essentials is good if you've got 2017(it's not been updated to 2019). It sort of depends which refactoring you use most. Some things I've never seen outside Resharper, most notably refactoring namespaces, though there are some other more dubious ones.
Thank you for your feedback. It gave me a more clear mindset.
Thanks a lot. It was really helpful.
This is the latest change document. http://download.microsoft.com/download/A/D/F/ADF027D4-0541-4CFB-9202-3C48571ABB54/483_OD_Changes.pdf I took it a couple of years ago so not sure about latest additions.
Here are a few things that I feel pushed my skill level forward significantly: use benchmark.net to benchmark just about everything. Anytime I find there are multiple solutions to a problem ( which is most of the time), I benchmark and/or read the netcore source code. A junior will use the first thing that works and stick with it - a senior will be able to explain why they used it. Sort of in the same vein, read the dotnet core source code. Learn about the new span and memory types as they are amazing. Learn about threading and understand how to make things thread safe. Learn about semaphores and interlocked. Having knowledge about them comes in handy. Learn about debugging and performance Profiling. I've met plenty of devs that can produce decent code and solve business problems, but I've only met very few that are proficient at doing advanced debugging or cpu &amp; memory Profiling. Hope that gives some ideas! Sorry for formatting, on mobile.
EF can work with many different DB. Using repo pattern with EF is an abstraction of an abstraction and gets painful to maintain and defeats the purpose of using EF in the first place. &amp;#x200B; OK, so maybe down the road you want to swap to a different ORM? Has that ever happened? I have never changed ORMs on a project ever. Adding a load of boilerplate to make something that I will never do easier for me is a waste of effort in my opinion.
Documentation of the `Thread.Join` method: &gt; Blocks the calling thread until the thread represented by this instance terminates. So you create a new thread, start it, then wait for it to finish. So no, you're not making use of multi-threading.
If I use Thread.Join it is way faster than without it.
you can't get around the fact that EF is a database access implementation. you don't use EF as a replacement for the repository pattern, but rather as an abstraction of the steps required to read from and/or update databases in more traditional ways. why do we use the repository pattern? so that whenever we want to access the database we just call on our domain object repository and execute what we want. if we don't we get implementation-specific logic in unrelated classes. you now have code that pertains to accessing the database not only in one class which is the repository, but several classes that need to access databases through EF, when all you wanted to do was write data to the database. what does that mean in the long run? if you want to change anything about the database access implementation you need to hunt down all the places in the code where this is used or referenced. **or** you could use the repository pattern. it contains **all** the logic regarding accessing the database and if any changes are to be made it's in one place and not spread out all across your code wherever a database is accessed for whatever purpose. and I would agree with you that there could be time wasted implementing the repository pattern, if it wasn't literally just an interface, implementation of said interface and a DI registration. you're still writing the same code as you had to before, the difference is that you're only doing the bare minimal in the unrelated classes as opposed to before.
Can confirm. Even a cutting edge project I'm working on mostly boils down to CRUD, just automated
I have no idea what you're doing in your code. You should know that multi-threading is no silver bullet that will automatically improve performance. Depending on what you do it may even reduce performance.
trying the fastest threading, tried 3 already and the above one is the fastest, but it can be faster I think. I am writing 1000 lines to the console.
&gt; In .net core you also inject in your context as well so it has a layer of abstraction for unit testing Sorry, noob question - what do you mean by Context here? is that the HttpContext Class ?
Is that because you're starting too many at once, causing thrashing, and actually the way you're doing it sequentially is more efficient? In which case, you don't need threads. By calling join on each thread in turn, you're blocking until each thread completes before starting a new one, so it really is wrong whichever way you look at it!
Writing to the console is **slow**. You won't benefit from multi-threading at all, and you won't be able to create a proper test. You're using **a single shared resource** across multiple threads.
Thank you for the reaction! It still is slow, tried 3 ways.
Nevertheless, there is no actual multithreading in your posted code. The only possible speed boost is by you increasing the thread priority class, but I doubt it makes any difference. Your code above would likely run faster without the threads (since you’re not really using them anyway).
Just buy a course from udemy that includes solid projects. It will be easier
You can't force it. It depends on many factors, including the operating system.
Or you can use Rider.
Several of my colleagues use Rider because VS can’t handle large enough solutions.
I've worked as a. Net developer for 10+ years and started studying C# in 2001. Never heard of it, never seen it being used or referenced in any tutorial or documentation anywhere. Some parts of C# /.Net just rarely get used and get obsoleted as the platform and language evolve.
I found that what defines you as a full blown dev/senior is not jumping into coding immediately. Planning your way through what you're about to work on. Programming is one od those things where you just keep learning something new every day, but its the way you implement that knowledge that defines if you're a junior etc. At least this is my opinion.
Sounds like a bad version of interfaces. Never heard of it. Wouldn't recommend using it if it's marked obsolete.
I think contracts are a great way, but unfortunately they have never been really supported by Microsoft. The static code analysis was always just an experiment / a preview, and it has been completely dropped in never VS versions. I think they will still be relevant with C# 8.0. First of all, the "no null" support is purely a compile time hack. When dealing with other .NET languages or older C# compilers you can still end up with null. Secondly, null is not the only case where you'd use contracts. Ideally you should verify all input arguments (and the result) of public methods. Your method has a specific range it can operate correctly, and that should be guaranteed.
&gt; I know its impossible to get a job unless I do the impostor syndrome You don't seem to know what the impostor syndrome is...
https://docs.microsoft.com/en-us/visualstudio/debugger/walkthrough-debugging-a-multithreaded-application?view=vs-2019
Support for floating windows. Most top-voted feature request on GitHub, but completely ignored by the team. Issue is open since 2016, conversation was limited end of 2018.
&gt; you can't get around the fact that EF is a database access implementation True but you can make conscious decision to not abstract that implementation and accept that implementing repository pattern is more work than actually swapping the DA implementation everywhere in your service layer if need be. &gt; and I would agree with you that there could be time wasted implementing the repository pattern, if it wasn't literally just an interface, implementation of said interface and a DI registration. That part isn't true though. Writing a LINQ query in your service layer is far easier than thinking of a method name, passing a bunch of parameters including parameters for Includes and integrating those parameters in the query. Note that if you accept Expression&lt;T&gt; or return IQueryable&lt;T&gt; you are doing it wrong and you have defeated the whole purpose of having a repository. If you don't then dealing with those parameters is quite a lot of work (the proper way being specification pattern)
If you need fast console, I suggest having one thread that does only the console writing, and whatever threads you need for logic separated. No real point in having several write to console.
The Entity Framework DbContext, the root object that represents the database in EF.
Same here! It really depends on what you are working on. I used to think I didn’t need to know math and data structures and write some rather horrible code with significant performance problems that was discovered too late. A couple of examples where I’ve used this knowledge: Had to output a layer graph given a PSD file for a gamification engine Had to create a tree for running calculations based on other calculations in a spreadsheet where one column was based on another column etc. App that calculated eating speed based on a sensor watch. Had to find threshold that wouldn’t kill the phone battery or take forever to finish. Data consolidation performance problems as we were using lists and Add (and a few more things) in wanted loops. And many more examples. Make sure you know your data structures! But don’t stress about it in the beginning, start by having fun and writing code before getting into the specifics is my recommendation.
&gt; Visual studio has a ton of performance problems without R#, and it's increasingly caused by the, imo outdated, decision to keep VS a 32 bit application. While that design is problematic, I think you'd have to expand on how that decision causes performance issues. Are you saying it's because of the cross-process communication?
I did try going R# free in 2019, but there were still a load of little things that didn't feel quite as smooth. Stuff like automatically importing namespaces. VS will do it with an additional key stroke or two. VS has improved dramatically though which is why I thought I'd give it a go without :)
Lol, I am the police :) We do have some stupid big service classes and EF generated files, and a bunch of other bits. Do you find it's a ram thing? I used to find that if VS (with R#) went over 2 gig of ram usage it would usually be better to restart it :/
You can also have it constantly run your unit tests and calculate code coverage. It's a miracle my work laptop doesn't just sit there with its fans at 110% all day
Yeah I keep meaning to look into Roslynator :)
Consider topics like service-oriented architecture, devops and library / framework design, but ultimately it'll come down to what opportunities come your way.
Contract support regressed a few years ago with the release of netcore. Ensures didn't work, no static analysis, etc... If that didn't change C# Contracts are pretty much useless. As to the paradigm itself, it roots from a hardware design, where every element is thoroughly specified, which gives you an ability to safely connect the elements. It gives you an ability to have a safer codebase, with static checks that only applicable to your domain. E.g, you can define type that can only have values 0-100. If you will try to init the type with value of 101, you will get a compile time error. If you will try to init it with value from another type, with a less strict rules, you will get a compile time error, thus requiring you to take care of out of range values. This is a good complement for developing applications with high reliability requirements. Although it still requires good discipline, since you can omit writing the rules, which is actually much harder than it seems. It is a good thing to be familiar with it, in case you'll ever run into such a requirement.
We actually don't use R# so I generally don't run into issues unless I have a naughty extension installed, which I've generally been able to live without. The Typescript compiler itself seems to have trouble with high line count files though, but I haven't analyzed the performance graphs. We're still on VS 2017 and it's at least reasonably stable, so I usually just wait for it to snap out of it.
I have some code, tell me what you think?: static Bitmap GetScreen() { //Create a new bitmap. var bmpScreenshot = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height, PixelFormat.Format32bppArgb); // Create a graphics object from the bitmap. var gfxScreenshot = Graphics.FromImage(bmpScreenshot); // Take the screenshot from the upper left corner to the right bottom corner. gfxScreenshot.CopyFromScreen(Screen.PrimaryScreen.Bounds.X, Screen.PrimaryScreen.Bounds.Y, 0, 0, Screen.PrimaryScreen.Bounds.Size, CopyPixelOperation.SourceCopy); // Save the screenshot to the specified path that the user has chosen. //bmpScreenshot.Save("Screenshot.png", ImageFormat.Png); return bmpScreenshot; }
thanks!
:) I was &gt;.&lt; close to being able to live without it in 2019, but it just felt more fluid with. I am going to play with roslynator and similar though. I haven't done much with Typescriipt yet, but it'll be interesting to see what happens :)
There's a bunch of free training here: https://www.pluralsight.com/role-iq/microsoft-azure-developer
Contract based programming is pretty big, but it tends to be more oriented towards formal verification and the like.
Automatically importing namespaces without the extra keypress is coming to the next release of Visual Studio 2019 :) Its official title is "completion from unimported types": https://docs.microsoft.com/en-us/visualstudio/ide/reference/intellisense-completion-unimported-types?view=vs-2019
ShareX (https://getsharex.com/) is a free, open source (made in C#) screen capturing piece of coolness. It can record video and stuff too. Plenty of code to look at for examples of how to do stuff: https://github.com/ShareX/ShareX
MQs are not a core part of the language either though, bad comparison. You’re comparing language features to architectures which are typically in the senior side.
Thank fck :D I've used R# since the early 2000's, I can't remember exactly when, but I've never, ever learnt what namespace anything is in :)
&gt;It's a pity that we still don't have an effective way to distinguish developer mistakes (e.g. accessing a null reference) and actual application errors. How do you categorize them? Aren't application errors just developer mistakes? For the most part, in my eyes, bugs are application errors caused by developer mistakes based on false assumptions. We assume we've got enough memory, we assume a reference can never be null, we assume a value is within a certain range, we assume this collection will never exceed N objects, etc.
&gt; Rule 4- Request-for-help posts should be made with effort What you wrote sounds like gibberish. No idea what you're trying to achieve.
WCF (proper, not just using the easy stuff , things like message inspectors), proper use of reflection (say dynamically loading assemblies to isolate custom app domains or generating IL code dynamically would fit the bill), calling external win apis or using any of the Interop stuff (was harder prior to 4.0 from memory). Knowing the different collections and their execution and usage profiles properly, creating complicated custom controls in asp.net forms for the masochist, proper multi threading and concurrent programming (not just spamming lock all over the place). There’s a start
[NET has a Queue implementation](https://docs.microsoft.com/en-us/dotnet/api/system.collections.queue?view=netframework-4.8) Not sure what this post is, sounds like college homework or a plea for interview help.
Well if simple. I need queue with two items. One pass but second stay. Or both path.
&gt; Aren't application errors just developer mistakes? No. Only a few exceptions are developer mistakes. Exceptions like failing to read a file is not - that is something you simply can't prevent. Some exceptions I consider developer mistakes: - Any of the `Argument*Exception` - `NullReferenceException` - `StackOverflowException` Basically when a method has a clear pre-condition that was not fulfilled.
With my team I consider skill legs with the following Junior-still mastering language features Mid-still mastering design patterns Senior-still mastering architectures Solution architects-mastering multiple interconnecting systems and business concerns Senior solution architect-top of the chain
It can happen, but honestly those gigantic hundred project solutions are kind of an an antipattern in dotnet.
Didn't think of file read exceptions, and I regularly get pinged at work because a third party fixed-width file keeps changing :) Thanks for the input.
Thanks, didn't know about that. It task for tech support operator. Constant because he should complete exactly that count of tickets.
You could, but then you're basically giving Jetbrains extra money for fucking up Visual Studio in the first place. And you need a JVM with all the joy that brings.
Best example is a `FileNotFoundException`: if (File.Exists(path)) content = File.ReadAllBytes(path); The `ReadAllBytes()` method can still throw a `FileNotFoundException` if the file got deleted right between these two method calls.
Contracts is basically an abandoned experiment. The history is that there used to be a fork of C# called [Spec#](https://en.m.wikipedia.org/wiki/Spec_Sharp) that offered Eiffel-inspired code contracts. This never actually shipped as a release, though. The example is rather interesting: static int Main(string![] args) requires args.Length &gt; 0; ensures return == 0; { foreach(string arg in args) { Console.WriteLine(arg); } return 0; } Instead, we got a half-baked version in .NET Framework 4.0. Some of Framework’s own code uses it internally. There used to be some limited code analysis integration in VS that would verify these contracts. These days, even that is basically dead. We might see a comeback using the more modern Roslyn analyzers, but the idea of actually extending method declaration syntax the way Spec# did seems discarded for now.
&gt; Sounds like a bad version of interfaces. They serve a completely different purpose than interfaces. They're not related.
It's a pity that Microsoft never really went through with this. :-(
I guess you can check Environment.CurrentManagedThreadID to see that the threads are different, and check DateTime.Now or Environment.TickCount to see if they're concurrent. But like others here said, thread scheduling isn't really up to you, and I have a feeling the methods I proposed won't give you the exact answer in all cases.
Have you seen this: [https://github.com/AdrienTorris/awesome-blazor](https://github.com/AdrienTorris/awesome-blazor)
Welcome to the world of getting better at your craft. The better you get, the more you realize how much you don't know. I've been at it for over 30 years now, it never goes away.
You could create a timer in one thread with a one second tick rate and log every tick. That or use thread.sleep to hault one thread and see if the other one still continues?
They are useful if you're programming in the Upside Down.
We're not given time to be good at our jobs. Either industry has marked what we know as obsolete and came out with something new, or our jobs demand such rediculous delivery pace that we can't learn the right way.
IMO There's really not much reason to wait. More classes after your 4 year degree will never teach you as well or as quickly as getting out there and working on real projects. Working also gets you paid, and employers hire new grads knowing that you're not going to be super fast yet. Start applying now regardless, and if you have time figure out a project application you can do for yourself. For an example of a good size, when I was in school pirating MP3s was still big, but a lot of the files had weird naming schemes. So I wrote a little app for myself that could operate on every file in a given directly to replace underscore with space, add/insert/remove a specified number of characters in the filename, and a bunch of similar stuff. **Something like this is going to give you way more practical experience in a much shorter time than yet more classes would.** As for continued learning while you're on the job going forward, my advice would be to watch the lectures from various .NET conferences on youtube in the evening or during your lunch. Those will help you figure out what you haven't learned yet, and after that it's pretty easy to go look for info on that thing.
You can see a fair bit of them in mscorlib and corefx codebases, so MS is or at least was using them at some point.
Your exe is a single process, but it can host a (practically) endless amount of threads. Each new request comes in a new thread and the only shared data is in the db, or singletons. I'm greatly oversimplifying this, but this is the gist of it. In fact, many processes = bad, many threads = a lot better (but also better not get carried away, and use techniques like async/await)
I done somthing similar recently no github though sorry. i used a nuget package for capturing the mouse clicks "MouseKeyHooks" and then a solution simular to Carny666 reply feeding the mouse co-ordinate that i captured to only copy the selected square. \-Keypress to trigger key click event subscription \-Save 2 clicks x,y positions \-CopyFromScreen using captured coordinates
If you can build a crud app, you know enough to get a job. Start applying now and keep building in the meantime. You probably need more experience building more than more coursework. You can do coursed on the side to learn specific things, but building and applying for jobs should probably be your focus.
Oh yeah it's totally possible--it's just a dependency like any other, it's probably not recommended though. I mean it's totally fine to have multiple DbContext classes all wired up to EF Core because they call different databases, but if you have different providers they may require slightly different syntax or configuration so it could lead to confusion.
Removed: Rule 3, Rule 4. /r/learnprogramming has a good section in their FAQ regarding practice projects/exercises: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F
Didn't know SO has Reddit account
Follow [this guide](https://docs.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code) and it should work. Pay extra attention to the part where VSCode asks you to add debug assets.
Sharex is what you need
I'm not sure what OP meant by that either.
People who maintain poorly architected legacy apps need tools too though, so I really wish they'd do it. It's not like a 64 bit VS would hurt people working on better designed solutions, other than by taking dev time away from features.
If you build a concrete repository for each entity, you will end up with giant classes and completely ignore solid principles. If you want the generic approach, you take 90% of ef functionality and throw them out of the window. Kind regards Gudu
Thank you. This was the software which I was looking for
&gt;It can't realistically be avoided by the developer, no matter how hard he tries. I wish .NET provided a locking API here. using (File.RequestExclusiveAccess(path, throwIfDoesntExist: false)) { content = File.ReadAllBytes(path); }
I don't know of a way to do this in .NET but that shouldnt be your concern. You should write programs that are multithreaded in a way that it doesn't matter if operations are running parallely or not. It's up to the OS and the CPU to decide what and how to run the threads thatyou create. .NET is so far abstracted from machine code that those are not concerns of .NET developers. They are concerns of OS and Kernel devs.
&gt; MS is or at least was using them at some point. I believe I've only seen them in code written in the .NET 4 development era, so ~2007-2010.
Good point, I completely forgot! Ignore that bad example then. Point stays: There are exceptions that can't be avoided and that are not the devs fault.
Actually it makes interfaces better. Right now, your interface contract might say, "An implementing method should never return null", but you have no way of enforcing it. The best you can do is provide an Abstract Base Class instead of an interface and implement a guard in a nonvirtual public method before calling the abstract protected method. With contracts, you can say, "this method should not return null" and have the compiler enforce it for you when the method is implemented. (Ideally, contracts can support more complicated conditions too.) MS never invested in it though, they were too busy replacing UI frameworks and promising C# features that still haven't released.
So you mean like YouTube? Any language is good for it, including C#, because you don't have to write the difficult part that handles video streams (video streaming and transcoding) in that language. There's not much difference between such an app and an ordinary web app written in C#. If the app involves real-time live streaming, I'm not sure if it still applies...
Or better yet: if(File.TryOpen(path, FileStream fs)) { // open succeeded }
I don't have a clone, but I did make a screengrab tool using Pinvoke. It wouldn't be too hard to extend it to draw a rect on screen and clip to that.
Would you be faster or slower if I asked you to write 1,000 programs at once? Your system can only do so many things at a time, up to but not always the number of CPU cores. When there is one core, every thread shares time on that core, so if you start 1,000 threads the best you can expect is for each to get 1/1000th of the time. So most of the time when people have a lot of work to do and want to benefit from multi-threading, they build a "work queue". That's just a data structure that has enough information in it to start each individual task. Then they make some number of worker threads. Then they write some code that, when a thread is not busy, grabs the next item from the work queue. There are whole libraries devoted to this, and to some extent the Task API does it for you. But it's a pretty complex topic so there's no silver bullet.
Lol yeah kinda like YouTube but also nothing like YouTube. It would involve live streaming though, so I'm hoping that it does still apply. If not I'll have to learn to use what is necessary. Thanks for the reply.
You mean like this? https://codingvision.net/miscellaneous/c-get-desktop-screenshot
Alright, so I just gave this a shot, and sadly it doesn't work. FT2DI2XX.dll doesn't detect the FT260 because it's strictly an HID device, but of course it can detect my FT232R, which is useless as that already has a serial number.
Came here to say this. LOVE Greenshot.
Well, I prefer rider over VS myself.
Perhaps, but here we are. Legacy code bases exist all over the place.
Any gameplay videos?
Good point, I plan to do some in a few days. They are able to greatly introduce the game and feel its gameplay.
I did one at my job... As I'm a hobbyist game developer, I implemented a simple loop just like an update function for a game and did all the logic there... It is really lightweight and simple... The snipping areas are resizable windows without anything but the background color with some transparency. I made some logics to make each loop run for about 34 milliseconds, which gives you a refresh rate of 30 calls per second, but you can easily play with it...
So like Twitch?
Is this a game you're working on, or are just a fan of?
http://www.catb.org/esr/faqs/smart-questions.html#explicit
If anyone here is from Microsoft and interested in bringing on a programmer writer to doc Roslyn at a higher pay grade than my current company, PM me!!! j/k, kinda
C# is a fine language that can do anything other languages can do unless you need maximum performance (ie 10% slower than C is too much, or 2x memory usage is too much). So yes. However, the real question is are the tools and libraries compatible with the language. Some are only Java compatible, others are only C compatible, some with require you to write wrappers and some require a lot of hardware like if you wanted to store a petrabyte (1K TB or 1M gb) of videos on your site
Haha I dont know why but this made me smile. Basically I dont want to give too much away as I think (hope) that this could be profitable and I dont really want to say what it is exactly that I have in mind. That being said I would have thought my question is straight and to the point. I'm new and I've got no idea of it's common practice or just plain silly to write a video hosting app with C# as I know there are many languages, each with their different uses.
Thank you, this is encouraging
Yes... but no
 That should work. // Create timer in the constructor and bind the event update = new System.Timers.Timer(minutes * 60 * 1000); // minutes to millisecounds update.Elapsed += OnUpdatePing; private static void OnUpdatePing(object source, ElapsedEventArgs e) { //Update the ping; }
Ideas are rarely unique and it's always the implementation that is valuable. Most popular and profitable companies didn't do that based on an idea, but a proper implementation. Google was not the first search engine. Facebook wasn't the first social network. Youtube wasn't the first video hosting platform. You're going to try to compete with giants and that's objectively hard to do. You're still learning to code; think about everything you didn't know a month ago. Now compound that by 20 years and 12 months each. It's not just the programming language. It's the platform. The underlying technologies. The design and architecture. I think an app that would beam knowledge directly into a users head would be pretty damn cool, but it's technically impossible with current consumer technology. It doesn't matter how much money you could hypothetically make, you literally can't do it.
Yes, I'm an author of it.
Propably better way for you is use some cron to do that. I made app like you described but for GRPC server pings. My solution is: create simply app which will be: 1. Ping your server 2. set cron to do that 1 time for hour 3. store data in remote postgres 4. you will have stable data for demand by connecting directly to database, and little lite app to fetching data.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/tensorflow] [Tensorflow + CSharp. I want to build simply library to train, and predict images.](https://www.reddit.com/r/tensorflow/comments/cdk9rn/tensorflow_csharp_i_want_to_build_simply_library/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
You are right, I've got a lot to learn and will probably fail many times. But sorry man I think a mindset like that will keep you stuck in the box. It's why you will most likely stay an employee. Maybe this is ignorance on my behalf, but people have made something out of nothing before and they assuming we dont kill the planet, they will continue to do so. Creation is tasteful stealing
I agree I use repository pattern on top myself. Just trying to come up with a reasoning for the original comment
[removed]
Haha, that's awesome, and Julie has a card too. Are there ones for Mads and Anders?
Look, if you want to be protective of your idea, that's fine. But it's on you to learn how to ask questions with enough context. You should also learn how to do that without being an asshole to everyone that's trying to help you. And 99.999% of people that might offer their free advice are classified as employees. The people that aren't also aren't browsing programming forums answering beginner questions.
Don't focus purely on .net core if you want an entry level job. The .net Framework is much different from as far as your learning goes and there is a ton of code out there to be maintained written in .net framework. A lot of companies might be wanting to move to .net Core which is why you are seeing the postings for senior posistions. They are looking to bring in people who can help them do the migration. As far as career options though, if you want to be a web dev you really should look at react / nodejs. You can make things strongly typed with TypeScript or babel. Look at the number of downlaods of react each week compared to .net Core. That's where the industry has currently shifted to.
I needed to stay with something for an extension pack ;)
tf
Yeah, I was a bit of a dick to say that how I did. Theres nothing wrong with being an employee of course, most of the working population are. I'm sorry.
Thank you.
Anytime. Goodluck.
It's not going to create a new variable each time, if that's what you're asking. It will just update the existing "x" to whatever myfunc() returns.
Solid advice. Plural sight is an awesome resource. And actually coding while learn helps so much.
Awesome... And just put that in the MainWindow initialisation?
You're right I was kind of dick here, but I feel like at some level of OOP it's just everything about arguing / theorycrafting with people about certain solutions
Hmm, most of that is foreign to me but I will research it. I’ve heard most of those terms, so I guess it’s a learning opportunity.
Sorry I am late to get back to ya. I just go the chance to look at it. How would I implement this? I looked at it just dont understand it that well.
Optimize how? You haven’t given much to go from here. What type is it? How is it used? What kind of optimization are you interested in? With “C#” do you mean the compiler? The JIT? Since the language itself won’t optimize anything.
Yes, just create the timer and bind the event in the constructor and the update function in your MainWindow class.
I can help you if you want.That is really easy
I'm really sorry, but I don't quite understand what you mean here: &amp;#x200B; &gt;bind the event in the constructor
Do I not need to use Linux / OSX for Cron jobs?
Don't forget to start the timer (either by calling `update.Start()` or setting `update.Enabled = true`)
probably easiest cron is crontab but you don't have to have any Unix system to use that
Talking gibberish you are. Sentences that are ambiguous you keep writing. Good spelling is your talent. /S
Oh thats just this line in the constructor where you add the event to the function it schould call. update.Elapsed += OnUpdatePing; And like u/RiverRoll said you need to start the time. I forgot to add that.
I had a a problem at work where I had to iterate a collection and write some stuff to a console. The iteration itself was very fast, but it took very long to write all the outputs to the console. In this scenario creating more threads won't help because your bottleneck is the console naturally running in a single thread. My solution was to create a class that would save all the incoming logs in a queue and every second I dequed them in a thread safe manner and wrote all the logs at once. The performance improved dramatically.
&gt; It’s not going to create a new variable each time, What would that even mean? “Variable” isn’t a machine code concept.
What in the world? I'm sorry but who cares.
Last time I tried (.NET 4.6.1 or so) referencing a function "on the stack" it created new heap garbage every time it was assigned.
Maybe he's referring to the same memory location used? I'm curious too because there's many compiler optimizations that take place in C# that I *believe* would create garbage in C++ or C, but not C#.
A new reference for an object or value for value types.
Wouldn't it just be like foreach selected dog { dog.price = dogs.Where(...).First().Price }
Why not just use List.RemoveAt to remove the item you want.
Cool!! :) I'm looking forward to seeing how it plays.
What I'm saying is that the issue lies in too much functionality being forced to run in a shared address space under a single 32-bit process. Core functionality, all the dessert functionality, and any extensions are under a single roof. Which is expected, no one is asking for a dedicated process to be spun up for IntelliSense, and a dedicated process for the Roslyn Analyzers, and one for each extension, and another for Debugging (which I think is already out-of-process in VS 2019?). What is being asked for is a single process better capable of handling those things. Performance really becomes a concern with large solutions. Recently, we had to deal with a solution containing around 55 projects, with hundreds of thousands of lines of code in each. It was structured decently for its age, but it was a slog to deal with on a daily basis in VS. I understand the argument that moving to a 64-bit process can lead to lazy coding and that you should focus on writing better code before you consider writing bigger code. However, it seems we will reach a point where keeping Visual Studio a 32-bit application is counter to that goal, and that it will take longer to do the job in a 32-bit process than doing in a 64-bit process. It's no different than when we switched from 16-bit to 32-bit computing. I don't know when that will happen, but I'm on the side that thinks we should address it now, instead of waiting for it to become a problem. A 64-bit process isn't just about larger address space. It's also about the ability to utilise all of the specialized 64-bit registers, specialized instructions, and you get an increased number of registers available. I struggle to see what we lose by making the switch at this point, but I've only been programming for about 6 years, so maybe I just don't have the right perspective.
Begone.
But it will be anew reference or value, it’ll just be stored in the same place. Anyway, “variable” is a static concept so anything else would be pretty weird.
It can create garbage in C# if the function called returns an object. But yeah, he was referring to the memory location (or register) used, which would be the same.
It will not re-initialize x. You can see what it does when you create a demo project, compile it and then decompile it using dotPeek or ILSpy (though have only used dotPeek). (Note: Don’t do it when the .pdb is around. It messed up my decompiling results) In my Test, both debug and release configurations will only initialize all locals once in the beginning.
Thanks, I think I get it. I'll have a play around on Wednesday ( can't tomorrow ;\[ ) and hopefully let you know the positive outcome!
What if MySQL isn't installed on the client? Are you wanting to install that with your too? Sounds like a lot of stuff for your installer to take on if that's the case. If you're assuming MySQL is already installed, then one approach would be to create a process to call the MySQL CLI to run the sql script that creates the database. I always prefer to have the database creation/installation as a separate process from my application install when using a stand-alone relational database like MySQL or SQL Server.
looks cool!
Yes, MySQL won't be installed in the client computer prior to the installation of my app. What other options do I have if this is too hard? I'm starting to think about migrating everything from MySQL to SQLite because it seems to be easier to do that way but I'm a little concerned about performance issues, my database is expected to grow with time and have tables with millions of rows with simple data like 8 columns with ints, bools and varchar(25) and I don't know how much I'll be giving up performance wise using SQLite instead of MySQL
I know this is a very controversial idea, but hear me out. You could, you know, just maybe, [read the documentation](https://docs.microsoft.com/en-us/dotnet/api/system.random).
Thanks!
Ew documentation? Anyway to be fair on me there is nothing in that documentation that says running it too fast on a limited range of numbers will output the same number twice
You can't state that like it's fact. That's completely opinion based. Some people leave them separate for debugging. Some for readability.
It's easier to maintain then a database.
Read the documentation. &gt; To produce different sequences of random numbers, you can make the seed value time-dependent, thereby producing a different series with each new instance of Random. The parameterized Random(Int32) constructor can take an Int32 value based on the number of ticks in the current time, whereas the parameterless Random() constructor uses the system clock to generate its seed value. However, because the clock has finite resolution, using the parameterless constructor to create different Random objects in close succession creates random number generators that produce identical sequences of random numbers. This is the #1 newbie mistake with the .NET Random class. You make one instance and reuse it. If you create multiple instances or create it in a loop, you get bad results.
The easiest way is to pass to the base class' constructor.
Not a C# question and not really and [ASP.NET](https://ASP.NET) one . Look at the &lt;audio&gt; tag [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)
...... shit Okay my bad but I'm still a newbie ! There's a reason it took me 2 hours to make this shitty app :D
It also cheeses me off it's the #1 newbie mistake. It used to be a lot more obvious, something they put towards the top of the article. Now that whole thing is like a 4,000 word treatise. For the short term, just save yourself trouble: when I have just one class that needs a random number, I add this to it: private static readonly Random _rng = new Random(); Then I just use that when I need a random number. When I do this, I don't have to worry about keeping just one instance around, because only one instance can exist!
If you have more than one user for the app, or might have more in the future, I would put the database on a single machine and have all clients access it over the network. You can't use SQLite if you anticipate tables with millions of rows.
This is super impressive.
The app will be installed in multiple client computers that are going to access their own database, two clients can't have a shared database and the app needs to work without an internet connection.
What do you suggest for someone that isn't a huge fan of HTML? Is there a way I can use some JS functions or modules to spearhead and replace HTML type up?
looking forward for a mobile or a windows game
All good. thank you for the excellent reply. I'll be more vigilant with what's in demand in the bay area. I have a solid foundation of DS/Algs in python so I just gotta improve my design skills, OOP, and build something worthy. If anyone is in the bay area, are there any meetups you can vouch for? preferably near oakland
&gt;Speaking as primarily a JS dev, it is very much worth it to learn Vanilla JS if you want to work on web stuff. It's seldom that you'll find a job where all you do is write new code, or work inside a framework the whole time. JS has a lot of design 'gotchas' that, whatever you think of them, are still going to be there when you write or maintain code. You're absolutely right. JS is a frustratingly weird language at times. This is why I initially shy-ed away for a while, but I'll learn good design patterns and understand the core of how the language works. Do you have any book recommendations that are not so intro-level but just dive in?
&gt;It's a bit harder to get the foot in the door without a CS degree of some type, but if you already know how to code and are a diligent learner I think you'd be ready to start the job hunt. Overall a coding portfolio is going to be a lot more relevant when your application crosses someone's desk than your degree. Yea I initially went on this journey to prepare for The online MSCS program at Georgia Tech, but I'd like to just start working and not be drowned in academia for so long. I'd prefer to be industry ready. My biggest obstacle is finessing the application process as a non-traditional applicant.
That was my reasoning as well. It seems Microsoft is doing amazing things with the NuGet and Blazor tech they're rolling out. I'm sure it'll be the next big thing, so I'll do both C# and JS in tandem
Thank you for listing the tech stack. I'll do my research on how to get started with all those frameworks and APIs. Where are you based? I'm curious where the demand is for the .NET core devs in the US
Yes, my apologies, I quickly typed out my post before a midterm xD
I'm from South Africa so can't help you there :P
There are a couple of solutions: 1. Cleanest, but requires a bit of reading the docs: Write a [`JsonConverter`](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonConverter.htm) and apply it to the `XYZ` property with the `JsonConverterAttribute` 2. Declare the `XYZ` property as a `JToken`, then inspect it after serialization to determine if it's a `JValue` or `JArray` 3. Same as 2., but use a private property for `"XYZ"`, and then copy the value(s) to another public property in a [serialization callback](https://www.newtonsoft.com/json/help/html/SerializationCallbacks.htm)
&gt; `private static readonly Random _rng = new Random();` &gt; Then I just use that when I need a random number. When I do this, I don't have to worry about keeping just one instance around, because only one instance can exist! `private static readonly Random _rng2 = new Random();` where is your god now?
Out of memory? Game should be written in java.
Tacking on to the fact that you need a custom deserializer, you might have more luck with making the resulting property a list. Then you can deserialize "string value" as a list with one element. If you have to serialize the JSON data in the same way you received it, maybe skip the custom deserialization classes altogether, and just go with interpreting the Newtonsoft JObjects directly.
yeah, but people like to say oh a few plugins can do most everything ReSharper can.
True I suppose, but project explosion is a fairly easy poor decision to fix. If you have two projects and you copy all the files into one project, all you have to do is remove a single reference and the code will work exactly as before. Project structure exists above the code level and while by convention your namespaces should match your physical project structure, there's not actually any requirement to do that.
Half of the job is learning to read doc. Now you know why - it prevents you from looking like an idiot.
Which is fine, you're allowed to have your own preferences. My issue is with the idea that the solution to the fact that Jetbrains wrote shitty code is to pay them more money to use their IDE. Never mind that Rider isn't feature equivalent to VS.
Have you tried [ML.NET](https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet)? You can read TensorFlow Models. I don't think you can write them, but if I remember correctly, you can read the TensorFlow model and train it, but it saves in the [ML.NET](https://ML.NET) specific format.
They eventually probably will, but taking things out of the main process, including into 64 bit processes is a better performance pay off than making the app 64 bit, because despite what Jetbrains is saying, memory limits aren't the entire problem. The problem is that Resharper is tightly coupled to shared process state, which is why they can't get it out. It's also worth noting that fixing project sprawl is probably the easiest bad architecture fix to do.
&gt; ​I believe the above code also breaks the MVP pattern because I give the presenter direct access to the user control instead of by interface. It has "direct access either way". The most important thing I think people need to know about interfaces is that they aren't just the `interface` keyword. When you hear the word 'interface' in terms of design, your first though should be API or Application Programming Interface. More specifically, every class has a "public interface" consisting of all of the properties, methods, and events marked `public` on the class. All classes, other than Object itself, also have one or more "base class interfaces". They may have a "protected" interface as well. And of course it might have "abstract interfaces" defined by the `interface` keyword. But they are often the least interesting. *** Back to you question at hand. If you have a reference to an object, then you have "direct access" to that object. It doesn't matter if you are accessing it via its public interface, a base class interface, or an abstract interface. *** Questions to ask: * Is there more than one class that implements `ITipManager`? [1,2] * Do I need to mock `ITipManager` because there is no other way to test it? [3] * Am I using some kind of framework that requires abstract interfaces such as `ITipManager`? [4] Unless the answer to at least one of these is 'yes', then there is no reason for `ITipManager` to exist. *** 1. If all of the classes share a common base class, the answer is still no. 2. Look a `List&lt;T&gt;` and `ObserableCollection&lt;T&gt;` as a good example of this 3. Be honest here. Don't just mock things to make them "unit testable". If you can test against real databases, etc. then your tests are going to be far more useful for detecting bugs. 4. WCF code sharing is a good example of this. The client gets a copy of the abstract interface code, `IMyService`, but not the service class itself.
It takes a while, even for new grads. Two things that I think work pretty well: Find some job descriptions that you think you'd be a good fit for, and run them through a word cloud maker. Write a personal statement that includes as many of those as you can. Write a specific cover letter to the places you think you're a decent fit for. The first filter at a lot of places is just keyword matching on the resumes that are submitted because 90% of them are just garbage that someone is shotgunning out to every job there is. Second having some evidence of your work, even if it's just a Todo App using bootstrap or something small, will go a long way in showcasing that you've got the knowledge. What got me my first 'real' programming job was showing off a dumb game I made where you dropped cows out of a helicopter into a moving cart of hay. It wasn't a great game, but it showed that I knew how to use Unity which was all they were looking for. Also, leverage your non-developer experience wherever you can. Not every place needs pure coders, and it goes a long way to saying you can understand business problems, write good documentation, communicate well, manage projects, design products -- this is all the stuff that new CS grads don't necessarily have.
I'm more of a video / code-along learner so haven't used a lot of books. Fortunately my favorite talk on JS is both a video and a book: JavaScript: The Good Parts, Douglas Crockford. [Video](https://www.youtube.com/watch?v=_DKkVvOt6dk) | [Book](https://www.amazon.com/JavaScript-Good-Parts-ebook/dp/B0026OR2ZY) | [Follow-Up Video](https://www.youtube.com/watch?v=bo36MrBfTk4) (the Better Parts) I also really like the course [JavaScript 30 by Wes Bos](https://javascript30.com/) (it's free!).
You should be able to export your model to ONNX and run it in ONNX Runtime ( [https://github.com/microsoft/onnxruntime](https://github.com/microsoft/onnxruntime) ) which support .NET. Or use ML.NET ( [https://github.com/dotnet/machinelearning](https://github.com/dotnet/machinelearning)). &amp;#x200B; Here an example of training in Tensorflow and scoring in [ML.NET](https://ML.NET): [https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification](https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/image-classification) &amp;#x200B; DNN training is coming soon to ML.NET.
I can maybe help with mobile side if OP wants help.
No each interface I've created gets applied to its own user control. I'm sure there are other ways to test it but I don't believe that's the point. Although this isn't an abnormally massive project I wanted to implement the MVP design as a way to learn from it for experience and possible future use. The use of the MVP and interfaces has to do with the clear divisions of responsibility, maintainability, and basically to be able to strip the UI out completely or even migrate to WPF if I choose to do so by simply implementing the view interfaces again. I do appreciate you taking your time to respond but you didn't really help me any. Creating an interface for the view is common practice in MVP. You telling me it shouldn't exist and that "it doesn't really matter" provides no assistance towards the initial question.
/u/ben_a_adams you might be interested in seeing this. 😛
MVP is mostly about testing and not so much about divisions of responsibility. The key phrase to remember when implementing the view interface is that it "must be trivial to implement". All the complicated view logic is in the presenter and that's what you're testing. Mine look something like this interface View { interface Listener { void onClick(String username, String password); } void use(Listener listener); void showFailureMessage(); } class Presenter implements View.Listener { private final Gateway gateway; Presenter(View view, Gateway gateway) { view.use(this); this.gateway = gateway; } void onClick(String username, String password) { boolean authenticated = gateway.auth(username, password); if(!authenticated) { view.showFailureMessage(); }else { // proceed } } }
😊
"C#" is a misnomer at that point. That kind of optimization will be taken care of by the JIT or AOT compilers, which work with MSIL and not C#.
&gt; MVP is mostly about testing and not so much about divisions of responsibility. LOL MVP long predates the modern obsession with abstract interfaces and unit tests. It was an answer to the question "How do I deal with all this disorganized code crammed into the view?". If you want to call the "separate of concerns" so be it. Personally I think "organization" is a more accurate term, but they mean roughly the same.
&gt; even migrate to WPF if I choose to do so by simply implementing the view interfaces again. That's not how it works. Well, technically you can, but everyone is going to be confused as to why you are using MVP instead of MVVM in a WPF project. The only piece you can reuse is the models. Assuming of course that they all expose `INotifyPropertyChange` like they are supposed to. &gt; You telling me it shouldn't exist and that "it doesn't really matter" provides no assistance towards the initial question. Remove the unnecessary interface and you eliminate the question. In MVP you are always going to have tight-coupling between the view and the presenter. You can create as many interfaces as you want and it's not going to change because at the end of the day the presenter needs read/write access to the individual controls on the view.
This is a bit hard to answer and comes with “it depends” caveats, but: * if we turn it around: there is no benefit to declaring the variable _outside_ the loop, if that’s what you’re asking. This used to be a thing in old compilers of day C, where moving declarations outside would be considered an optimization. (These days, compilers aren’t that dumb.) * but also, in C#*, a declaration doesn’t really come with a cost anyway. * more than that, if the value of `x` is guarantee to never change (that’s clearly not the case here, as we don’t know what `myfunc` does), [C# will hoist the *assignment*](https://en.m.wikipedia.org/wiki/Loop-invariant_code_motion). That is, if you assign the value to a variable inside a loop each iteration, this code will only run once. *) I’m using C# and IL interchangeably here.
Your title says you “can’t code”, but then: &gt; I have created several projects but 90% of them are CRUD which are not complex at all. I’m going to let you in on a secret: the vast majority of enterprise software requires just that. It doesn’t have complex algorithms or AI or anything fancy (even visually speaking — it’s often ugly). It just has to get the job done. There’s no need for imposter syndrome here. You’ll find that some of the qualities you thought were important really aren’t valued much or don’t matter much in the grand scheme of things. Others you’ll have to fight for if you want to, like quality, longevity, documentation. And yet others may not come natural to you at all, like empathy for the end user’s needs, long-term planning, or cutting corners where it hurts in a difficult meeting. But CRUD? Yeah, that’ll probably matter. (Unless, say, you want to go into game development.)
Removed: Rule 4.
This is getting out of hand. Now there are two of them!
you can't write but you can try them yes I tried but it works okay for regressions but no for photos
It’s too late to type out more. But yes. Yes you do. And you want to too. Just read into it. It’s the greatest IDE out there. We are all lucky it exists.
You can customize the entire layout if you don't like the default. I prefer VSC personally but it doesn't really matter. If you work in a professional shop that standardizes, it'll probably be on VSC though.
Thanks for taking the time to post this. I'll look into Typescript
Yea you're probably correct. Thanks for your input
That's some solid advice amigo! I have a couple passion projects in the works, but I was using python which isn't the best for GUI stuff. I'll make a to-do list app as a chrome extension. I definitely possess a lot of those non-technical skills, thanks for your reply :D
sweet! thank you :D
I mean myfunc(...) has different parameters/result each iteration. Otherwise it's a very simple case of course.
Fact. Best IDE ever.
For .Net Framework your options are Jetbrains Rider and visual studio are your only real options and as i Rider user i would wholeheartedly recommend visual studio. If you're using .Net core you can use both of the above or whatever you like as all the build tools can be run in the command line. i would recommend grabbing the .net core SDK, that way you can use VSCode or whatever you wish. That being said i would recommend one of the 3 tools I've mentioned as they all have plugins to make life easier.
Yes you do. Change it to dark theme.
Not a noob question at all, I apologise for not being detailed enough, as it has already been commented before, yes the database context.
If you are Windows, Visual Studio is the obvious choice, though Rider is an extremely close second place if all you need is .NET/C# support, especially if you use VS in conjunction with ReSharper. As a Linux user, I switched to Rider and don't miss Visual Studio. Has every single feature you ever need, and is extremely similar, but also notably less resource usage and bloat if that is an issue for you. There is always going to be the Visual Studio fanboys out there who would swear it is the only IDE in existence. If you plan to only ever stick to code development on Windows, then it is true to a degree, and there is not a whole lot of reason to not use it, it is undeniably powerful. If you plan to work across multiple platforms, JetBrains products are close contender, and good for a consistent experience on any platform. TL;DR If you are Windows, and plan to stay there, then just use Visual Studio, it is the most powerful IDE out there, albeit bloated. If you plan to work across multiple platforms, never hurts to be familiar with other cross-platform solutions.
However, until this point, Rider is still missing some of the key features that VS has. So VS is the no-brainer to this day.
Having recently moved to the Java world and IntelliJ I would argue that it's at least equal with VS.
Hahahahahahahahahaha!
Wer lesen kann ist klar im Vorteil!
Be aware that `Random` is **not** thread-safe.
Not sure what on all which key features specifically you are speaking of, but I do agree that on Windows, yes, Visual Studio is obvious choice, as I stated. The only obvious features that I have personally found missing are T4 templates (slated for release in the very new future), and a lack of built-in project templates. The lack of built-in templates is a bit annoying and hide some of its features. It has a full-fledged designer for WinForms, but no ability to simply add it via a template, and must be created manually. Rider does get large feature updates much more frequent, and is catching up extremely quickly for some of these lesser-used features (though still missed). It is not near as mature as Visual Studio, but is a great choice for those that aren't on Windows. Any time C# is mentioned, it is too often assumed that someone is on Windows, which is no longer a safe assumption to make. I am a full-time C# dev, and haven't so much as booted a Windows machine for months, nor used Visual Studio. Am just offering an alternative to OP that Visual Studio is not some requirement for .NET development, because it is not.
I've had this before and it's possible to writer a converter but impossible if there are nested occurances of single-item-or-array properties. In my case the reason this existed at all was the 3rd party (UPS in this instance*) were transforming their XML outputs to JSON at runtime, so a single nested tag was always treated as a single item. Schema be damned. ^(*in fact it was worse than this, they develop soap services, then use a runtime to strip the envelope from the outputs, call it a "REST" service, then also have a JSON transformation layer on top of that. And when on the phone to their developers explaining the inconsistency in schema, all I got was "derp but it's JSON!!1" on repeat)
This one drove me nuts...API I was integrating with had a ton of Dictionary collections and all of the codegen stuff can't handle. Took me a little while to realize why. JSON is a collection of key value pairs. The basic building block is a key and an object pair. Codegen tools always treats that key as the object name. So if you have { "Name": "Matt" } the codegen creates a property called Name with string as the type. But if you have something like this: { "People": { "Matt": { "Last": "Smith" }, { "Jane": { "Last": "Smith" } } You'll get a class called People that has a property called Matt that is its own class with a property called Last that's is a string. You'll also get a Jane class with same property. When you want a property on the root object called People that is a DICTIONARY&lt;String, object&gt;. Codegen and default serializers will always treat Matt and Jane as properties. As others said above you'll want to create a custom JSON serializers. But if you have any influence with where the JSON is being created at ask them to change it.
How about you go here: r/java
Here's a sneak peek of /r/java using the [top posts](https://np.reddit.com/r/java/top/?sort=top&amp;t=year) of the year! \#1: [JEP draft: Add detailed message to NullPointerException describing what is null](https://openjdk.java.net/jeps/8220715) | [74 comments](https://np.reddit.com/r/java/comments/b55drf/jep_draft_add_detailed_message_to/) \#2: [Multiplayer FPS Engine in Java](https://np.reddit.com/r/java/comments/9oy4ai/multiplayer_fps_engine_in_java/) \#3: [GitHub announces free private repositories](https://blog.github.com/2019-01-07-new-year-new-github/) | [47 comments](https://np.reddit.com/r/java/comments/adq1qr/github_announces_free_private_repositories/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
You should be kidding or maybe hallucinating.
VS looks fine with a 1080+ screen and dark theme. For all my projects (including C#) I actually switched to vs code EXCEPT one console C# project because for some reason vs code refuses to debug it unless I throw an exception. And exceptions are not substitutes for breakpoints. But besides one project I'm leaning towards vs code as best IDE. I know jetbrains and vs code has better tooling but I'm fine with the rename and other limited tools in vs code. However when I profile (almost never) I do break out other tools.
If you've ever had to develop anything in Delphi you'll realise that whilst Visual Studio has it's quirks (main issues for me are the wpf xaml editor freezing / dying, and complicated projects reporting missing items / randomly not compiling when you need to move them to another folder), Visual Studio is pretty solid and has some great debugging tools. The Delphi IDE on the otherhand is firmly stuck in the 1990s. In terms of performance and features!
You can do the clean way as /u/tweq is telling you to do. &amp;#x200B; You could also take your string, check for "XYZ" attribute, and replace "abc" with \["abc"\]. And then you serialize it, and you will always have an array.
I am looking to see what I can find, I have been working with .NET since 1.0 and would love to keep doing so. You can find my work at GitHub.com/ubiety
&gt; My issue is with the idea that the solution to the fact that Jetbrains wrote shitty code is to pay them more money to use their IDE. That’s hardly a fact, and more like speculation. &gt; Never mind that Rider isn’t feature equivalent to VS. Sure, and that goes both ways.
&gt; If you have two projects and you copy all the files into one project, all you have to do is remove a single reference and the code will work exactly as before. Yeah but no, it’s really a good deal more complicated in our setup. Also, huge projects hurt our overall compile time when we have around 1000 assemblies in the final result, many of them from compile-time generated code.
Looks great. Just a heads up that your sentence "so we how already some publishing know how" doesn't read correctly so you might want to change that a little.
Do you need to store the data or build a communication system? Maybe checkout redis, as it is somewhat in-between.
Code is never perfect. Look back a few months and you will always find something to complain. Instead focus on delivering correct working solutions, and focus on writing code that will be maintainable in the future.
I would also want to store it in the end.
No, it really isn't. And no, large projects don't hurt your compile time, large projects will actually compile faster than a thousand small ones. Now obviously *some* thought needs to go into hoe your project should be divided up when you're done, but SQL Server has less than a hundred dlls, you shouldn't have a thousand
&gt;redis redis is not a persistent database.. even if you can hack it to be its still the completely wrong tool for the job..
I would split up the communication part and the storing part. If both gets implemented in redis, fine. If not proper abstraction is going to make it easy to interchange it for a messagebus and a database.
Definetly sounds like you need a message queue. Perhaps RabbitMQ or ZeroMQ.
First you need to define how everything connects together (wired, wireless) then you can decide the best communication protocol. &amp;#x200B; For database any variant of NoSQL should do the job if you want to store data in the machine itself. If you need to store data from multiple machines in a single database in a remote server, MSSQL / MySQL variants. &amp;#x200B; But by your description seems you still have lots of planning to do before you can chose what to use, during planning all those questions should answer themselves given you have experience to do the job properly, which doesnt seem the case and you're taking more than you can shew.
&gt; And no, large projects don’t hurt your compile time, large projects will actually compile faster than a thousand small ones. Look, I’ve been in the business for many years and I maintain our build chain. Trust me, many small assemblies compile faster overall because it lets us build many more in parallel. Now this may not be the case for every scenario, but it certainly is for us, and we tested this a good deal. &gt; Now obviously some thought needs to go into hoe your project should be divided up when you’re done, but SQL Server only has a couple thousand dlls, you shouldn’t have a thousand. You should realize that you know very little about our setup. Part of the reason for our many assemblies is legacy.
Write your code for readability. Write performance code when you have a problem and identify the bottleneck. Often writing performant code before it's needed just creates needlessly complex solutions. That said don't write badly performing code deliberately, well without a good reason. e.g. your concatinating a string and expect more than 20 concatinations, consider a string builder but even then, dont sacrifice readability for a couple of milliseconds gain (possibly bad example because someone will tell me to always use a stringbuilder because the code in the future will change to which the only reasonable response is YAGNI, but I could be wrong). &amp;#x200B; n.b. Your code will never be perfect because you keep improving. The day you write perfect code is the day you stop learning.
Yes. What's your resistance against it? That it doesn't look like hipster atom?
Along the same vein as premature optimisation. What you’ll find as you progress as a developer is you’ll improve your code and these things just get easier. You’ll look back over old code and wonder what you were thinking but that’s all part of the game. I’ve been doing it 20 years and I still look over code from a few months ago and wonder what I was thinking. Make the solution as a priority and find nicer ways to do things as you go along. Spent too long on trying to get something 100% first time and you’ll never deliver anything
[removed]
Whats a machine code concept?
[A quick sample in sharplab shows](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBLANgHwAEAmARgFgAoQgZgAIS6BhOgbyrs4fsNKTuwA7DHQBiECAAohIhAEoOXdpS6qGAdjrE6AKjoIA3Is4BfY3XO0GKOgFlJctlXOqAbgEMoAugF46pAAYAoxU1ThcuAHcACzwYaToAPjoAhVCw5TCwjy8EXzEJaTkQrLUIsPEpeRLSrnK1bDg4GrCzdLo2kyA===) that for a simple loop like this: ``` var i = 100; while(i &gt; 0) { var x = Foo(i); Foo(x); i--; } ``` the IL will only contain one `int32` declaration for `i`. The C# compiler is an incredibly advanced piece of software and will possibly optimize things better than you'd ever think to optimize yourself. Even in Debug configuration memory for that `x` will be stack allocated before the `while` loop. That is of course if you're not capturing it. If `Foo` was to receive a lambda with `x` for example ``` Foo(() =&gt; x); ``` the IL would get much more complicated and a new lambda object would get allocated on the heap in every loop iteration. [See sharplab sample](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBLANgHwAEAmARgFgAoQgZgAIS6BhOgbyrs4fsNKTuwA7DHQBiECAApCAVgA8QjAD46ABygQAbtgAmMKAEoOXdpS7mGAdjrE6AKjUbteqJIMBuY5wC+Xun9oGFDoAWTc2Kj9zTQBDKAE6AF46UgAGVM8zC04orgB3AAs8GElsOhVUoyzs02zs2PiEJLEJSXDElWwPXOyei3EpdpUEbuq6nLHx7Dg4TPHfMYXvIA=).
I would suggest [MPI.NET](https://github.com/mpidotnet/MPI.NET)
It's not a data_base_, it's a data store and does sound like what OP is asking for.
Depending how fast you want this to be, you can go from a simple redis solution possibly with a message queue like zeromq, all the way up to your own custom IPC Pipe similar to how [linqpad does it](https://www.youtube.com/watch?v=mLX1sYVf-Xg).
Something that’s reflected in the actual CPU. A CPU doesn’t have “variables”, it has registers and memory, of which a local variant is the stack.
Legacy is not a reason, legacy is a situation. An understandable situation, but it's still not a reason, let alone a requirement. If you're getting substantial benefit from parallel compilation you have a lot of unrelated code, which might be better off in a completely separate solution. Even then I'd be really surprised to see the entire solution compile significantly faster as small projects, dotnet compilation is quite fast to begin with and linking and resolution aren't free.
I am very curious as to why declaring the variable outside the loop would be an optimization even for old C compilers considering that a declaration is a noop at runtime.
Thank you all for your advise! So do you think redis would be a good solution for me? Why/why not?
The IL always contains the amount of declarations that appear in source code (or less if some are unused and optimized away). There is no concept of a declaration in a loop, this is not optimization this is how variables work.
WTF?!? Unless the function is pure and the arguments are the same the behavior you describe will be simply wrong.
I answered in another comment but it depends on how realtime the system has to be and how robust you want the implementation to be.
I've done this before... And it works, just a tad slower.
I called removing the declaration of `x` entirely an optimization. And then said that the memory allocation will happen before the while loop anyway. The point is, I don't get your point.
&gt; Each new request comes in a new thread Not true. ASP.Net Core uses tasks all the way down, and everything shares the same thread pool threads.
That's why I said I was oversimplifying. Threads are easier to explain than tasks. Tasks either use a thread from the thread pool, or wait while some async operation executes. Except for real async IO, there's always an underlying thread there. That it's from the thread pool is just semantics. The thread pool also creates new threads on demand.
Mobile/online is somehow on the radar but for quite distant future, as for now. Anyway, thanks!
Focus on delivering a working solution, you will learn new and better ways of doing things as you go. Also something that has helped me hugely doing pluralsight is write unit tests. Not necessarily tdd or anything, just write tests to verify behavior and understand what code is doing. Them when you change things you can verify it still passes tests and should work
Not sure if they would like to see .NET-based game😲
I'd probably look at a queue for the communication part...you \*could\* use a DB but a queue would likely be easier to manage for that sort of communication.
Redis is to be used as a cache system for a database in order to make result queries faster instead of a lookup in the whole dataset, to store queues, or as a message broker between systems, Redis wasn't made to persistently store data as the OP requested, quoting him: " Data shall be store at the end. " " where they can store, access and possibly rewrite data. " So the data does needs to be persistent in order to be accessed at any given time and hacking Redis to do that is not a good solution compared to alternatives.. &amp;#x200B; Redis might be a good solution here as a message broker if the data coming in is too much for a SQL/noSQL type database to keep up with (ie: reading and writing the raw data from multiple sensors at same time in the same DB). If this machine can keep up with the read/write in a normal database, theres no point adding the extra complexity of Redis. &amp;#x200B; But has i mentioned in my other comment OP still needs to plan what he really want to do by doing that he will find limitations/requisites of what he needs.. Maybe he needs Redis as a message broker / queue before he stores things in database for later use, maybe he doesnt, without proper specifications everything is just speculation..
He means that the stack frame for the loop's scope won't be destroyed and rebuilt on every iteration and you know it.
Each file should contain one entity (class/interface/struct, etc). The file structure should mirror the namespaces. That's basically it.
Could you give an example? :)
&gt;MappingCache.cs, MappingModel.cs, Do you have any example with my files in this case? The class and interface is in MappingCache.cs and the mappingModel is using in Mapping cache
Storing data at the end is trivial, "at the end" is up to OP and his requirements, for the rest of the solution redis fits.
Really it's just that. You have MappingCache (class) and (guessing) IMappingCache (interface) in the same file. Separate them into two separate files. If their namespace is MyApp.Caches, then create a Caches folder in the assembly and put the class in there. Often you can move the interface to another assembly, but this is only valuable if it doesn't rely on types in "the other" assembly.
Should I in all cases split interface and class into separate files?
 string jsonStr = "{\"XYZ\": [\"moo1\", \"moo2\"]}"; JObject jsonObj = JObject.Parse(jsonStr); if (jsonObj.SelectToken("XYZ") is JArray) { } else { } You can check if XYZ is array and handle accordingly.
It might just be a myth. A colleague of mine does it because his professor used to say it’s a optimizations. He got his degree in the 2000s, so my charitable guess is this *used* to be true (perhaps in very specific situations) when the professor himself was learning, and he’s never updated his knowledge. I mean, that, or he was talking out of his ass. Either way, yay cargo culting.
Eirenach’s point is that the int32 doesn’t appear once because of some optimization done by the C# compiler, but because that’s how IL’s syntax works. It has no notion of “this local keeps getting redeclared inside a loop”; it has “I need this local for this method”.
Yes, one entity per file. Otherwise you will have a few files with immense amounts of code, that nobody can comprehend
Also consider separating your factory/validation code into separate factory and validator classes. Ideally, a class should only have one responsibility.
Using Q-Learning is probably over complicating it, inefficient, and may yield false results. Sometimes an "AI" is unpredictable and might not solve it or take _forever_ to do so if not trained well. But, if your task is to see if the random maze is solvable, then maybe check out some "pathfinding" algorithms, for example: https://en.wikipedia.org/wiki/Pathfinding#Sample_algorithm It's a fairly well studied problem and there should be a boatload of resources available to learn from.
The real answer is to look at how easy it is to refactor, Can you rename or shift any of those without breaking things? For AnimalHandler the more common naming convention would be AnimalFactory.bHandler is generally not great, categoryHandler doesn't let me know what it actually does. Startup should almost be always be in the application root (same with settings), aside from that it's actually a very hard question. Generally people split by layer, Infrastructure and domain in your case. Or perhaps a variant of '[clean architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)'. In both scenarios the general idea is keep infrastructure crap out so you can focus on the important bits. The other major area to split things is by different areas of the domain (e.g. clients, accounts) but that's not as useful for a small application.
But there are _two_ locals here, the compiler optimizes the `x` declaration altogether, and just pastes the result of `Foo(i)` into the next `Foo` call. And that's an optimization, one that you don't see in Debug configuration, where you'll find two `int32`, one for `i` and one for `x`.
It's not just about seeing if it's solvable it's also about outputting the most efficient route.
Then you _definitely_ want to use a pathfinding algorithm. An AI would be unlikely to find you the most efficient path.
I would recommend using an source folder. If you look at projekts on github you can see that most of these projekts having a src folder and after that the folder representing the namespace. The src is not included in the namespace.
Well if it is something like while(…) { int a = 5; } Then it might have been optimization at some point but not because of the declaration but because of the assignment. If you pull the declaration alone I don't believe there's been any point in history when it made any difference.
So sorry for not understanding but what would be the difference in a q learning and path finding, surely in my case they'd be the same thing or am I really catching the wrong end of the stick?
I'm guessing this is a manufacturing application. Can you elaborate on the machine architecture? Does this code run on a PC? Or multiple PCs? How are you interfacing with sensors? PLCs? What's the throughput (number of parts per minute), what's the gap time between sub-processes? How is the stored data used? Is there a reporting interface? There are a ton of details that need to be shared before anyone can toss out suggestions.
My understanding of Q-learning is that it will act randomly but you have to feed it some "reward" or "quality" for some decision making. I'm not sure how that would translate to a maze. You could have it look at the cells around it and favour cells that head closer to the goal, but it might head it down the wrong path, or find a non-optimal path. And I don't think you can load the entire maze as an input set. Using "AI" related methods can lead to fuzzy or bad results, even with _many, many hours_ of training. Coincidentally, Code Bullet uploaded a video the other day on a bit of a tangential problem of getting a Q-learning AI to play Snake. That took _a lot_ of effort (even for someone who has implemented plenty of AIs before) and it still didn't work even close to optimally: https://www.youtube.com/watch?v=-NJ9frfAWRo Pathfinding though is the exact solution to the specific problem you're working on. It should work in a reasonable time, and you can do the extra work (if necessary) to find the absolute, guaranteed shortest most optimal path. And unlike AI/Q-learning, there are a _tonne_ of beginner resources on understanding and implementing it as it's commonly taught in early year computer science programs and very often implemented in a wide variety of applications.
Seriously, Dark Theme looks great. Maybe my sense of taste isn't as developed as OP, but I love it :)
&gt;same with settings), aside from that it's actually a very hard question. &gt; &gt; &gt; &gt;Why would you choose factory as naming? &gt; &gt;Well, The handlers contains methods that creates and returns new list of elements and manipulate the data based on the "animal/category" data I fetched at startup.
What would you call the model for the mapping cache object? I now call is AnimalMap, but I'm not sure if it is a good name...
I mean you can change the entire theme. Also download textsharp it will help alias the text and make it look better
Okay yes. Thank you for clearing it up yeah I saw code bullets video. And the inspiration of my project was from the video when he teaches the car to drive. The clip where he teaches the mouse to go through the maze. I think he used q learning for that and it worked well. I don't know if you know the part I'm talking about that's what I've based my whole report off of.
Okay yes. Thank you for clearing it up yeah I saw code bullets video. And the inspiration of my project was from the video when he teaches the car to drive. The clip where he teaches the mouse to go through the maze. I think he used q learning for that and it worked well. I don't know if you know the part I'm talking about that's what I've based my whole report off of.
That was amazing. Thank you for the link!
The whole talk is very interesting and linqpad is a fantastic tool, extremely underrated.
I love it. Everyone in my the has a license to it. I do all my prototyping in. I just wish they'd improve on the intellisense and indentations.
Yep, that's why I weaseled around "when I have just one class" and pointed out I do something more complex for multiple classes. It's kind of sad exactly how long a true tutorial on how not to get burned by `Random` needs to be.
What woud do, let's say that you have a DateTimeHelper, which contains most methods/functions that is used in the Business Logic Layer. But it also contains a few methods / functions that is used in the FTP layer. Since I'm having the FTP Layer referenced to Business Layer, I cannot "find" retrieve the DateTimeHelper from Business Layer from FTP. So I need to have the DateTimeHelper in the FTP layer. Do you think this is right? Or should I have it in the Business Logic layer and create a new DateTimeHelper for FTP? If so, what should the naming convention be for those new files?
What woud do, let's say that you have a DateTimeHelper, which contains most methods/functions that is used in the Business Logic Layer. But it also contains a few methods / functions that is used in the FTP layer. Since I'm having the FTP Layer referenced to Business Layer, I cannot "find" retrieve the DateTimeHelper from Business Layer from FTP. So I need to have the DateTimeHelper in the FTP layer. Do you think this is right? Or should I have it in the Business Logic layer and create a new DateTimeHelper for FTP? If so, what should the naming convention be for those new files?
The "one class" is irrelevant. As soon as you have async methods anywhere or you run in a multi-threaded environment (e.g. web server) you're at risk.
Besides the message queue as suggested above, you can also take a look at gRPC.
Sorry I would have to see some code to be able to provide further help as what you are saying doesn't make much sense to me (not because it's worded badly but because I have no idea what your requirements are).
Well Atom/Vs Code and analogues are a step up from text editors, but not an IDE I would use for any serious work. VS in dark mode looks really great for me, especially 2019 one. Sure there are a lot of windows everywhere that can and will scare you. I would recommend Bob Tabor for beginners, as he helps you with learning C# as well as getting accustomed with VS [https://www.youtube.com/watch?v=sQurwqK0JNE](https://www.youtube.com/watch?v=sQurwqK0JNE)
I fully understand you. Thanks a lot anyways :D
&gt; you can tell by their names alone that these 2 programming languages are going to have many similarities The C-style syntax. That's about all.
Just be sure to take the time to learn Object Oriented programming, and associated design patterns, so that you don’t write a bunch of C# like it’s C. If you don’t, you’ll severely limit your ability to get the most out of the language and anyone else working with what you write will greatly appreciate it.
Maybe I'm misunderstanding the intent here. A) Do you need to validate that a maze is solvable and/or find the shortest path? B) Or do you want to learn Q-learning/AI and maze solving is just the scenario you chose to use to learn with?
I'm noticing a trend that you can't call any language "easy" in its own subreddit.... It was an introductory level course. My point is that C# looks easier to transition to than Java, for example. Java also shares similarities, but even at an introductory level you can notice more differences.
&gt; I'm noticing a trend that you can't call any language "easy" in its own subreddit.... It has nothing to do with that. At all. You said they have many similarities, but didn't name a single one. No idea what the "SoloLearn certificate" checks, but I suspect it's very shallow and does not go in depth. Overall your post just lacks of any substance and is just plain bragging.
Likely not available on a system like a camera or a sensor. Those are likely running simple operating systems or have none at at but support a protocol for getting their data out. If that's the case then any MQ will likely not work.
C# doesn't allow for any depth. I just clicked through and answered the questions. If you've already studied C, no real study is required at the introductory level. That's what I mean by "similarities;" they are remarkably similar at a cursory glance.
&gt; C# doesn't allow for any depth. Uhh... it sure does. &gt; I just clicked through and answered the questions. Like I said: A very shallow course. &gt; That's what I mean by "similarities;" they are remarkably similar at a cursory glance. At a glance, sure. That glance is the C-style syntax. Beyond a superficial glance it's not similar at all.
If you think c# doesn't allow for any depth, you literally have no idea what c# is about.
It works for photos. [https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning\_ImageClassification\_TensorFlow](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow)
Removed: Rule 7.
&gt; C# doesn't allow for any depth. https://i.imgur.com/BHuFhzY.gif https://www.manning.com/books/c-sharp-in-depth-fourth-edition
For depth of a blog article, which was the complaint. At an introductory level, it is too similar to C to justify any further explanation. If you've studied C already, you can jump right into learning C#. Compared to Java, for example, there are noticeably more differences to take into account even at an introductory level.
Those sensors connect to something that is capable of writing to a queue, surely. Are you thinking somebody's going to hand-transfer data from the sensors? That's not how automated system work at all.
Couple questions: Why is wired vs wireless relevant to the storage tech decision? Why does the number of contributing machines impact the SQL vs NoSQL decision?
We don't know the specs, but I've worked with embedded devices before and I know first hand that many are really simple. Likely not the case for a camera, but a sensor could work off something like ProfiBus and have their own unique communication scheme. I just know that embedded implementations of a message queue require an operating system because my last company wanted to implement it but couldn't due to them running without an OS.
&gt; At an introductory level, it is too similar to C to justify any further explanation. You still didn't name those similarities. Can you list 10?
Why do you use Rider over visual studio? Just curious
&gt; I just know that embedded implementations of a message queue require an operating system because my last company wanted to implement it but couldn't due to them running without an OS. Why does it have to be an embedded implementation? Why can't it just be a regular message queue running on a regular machine?
If the name has enough information in it so that you understand what it does, it's a good name. You're actually doing the smart thing and asking someone who doesn't know the code, whether the name conveys its purpose (Sorry if that sounds patronising). You can go two ways here. It's a cache, which is naturally a way of mapping x to y, so AnimalMap makes perfect sense, or you could go AnimalCache. If it's more "cache-y" then go with AnimalCache, if it's really just a static mapping class, go with what you've got.
Because I'm under the impression these cameras and sensors are individual units. If they're not then I'm wrong
They are most likely individual units but even that is irrelevant! They're all connected to the same computer as specified in the very first line of the OP. Why would it matter how many packages contain those sensors?
It will run on multiple PCs. Basically all the inputs from the sensors are evaluated on a PC but need to be shared with the other PCs. &amp;#x200B; There is a gap time of 20 seconds. &amp;#x200B; The data is not stored yet but probably will be stored in a database at the end. There is no reporting interface; Would you recommend one and why?
Wired VS wireless was to reply OP question about fast communication between devices. Nosql is more suitable for single 'point of entry' while sql can have multiple requests in table. NoSql doesn't need any service running in the background therefore is easy to deploy anywhere. Sql needs a service running all the time, makes it harder to deploy with software and is best used in a remote server where all machines can make requests simultaneously without being locked when read/write
I wish you or someone with your knowledge would do a write-up regarding these obsolete or abandoned technologies. As a beginner it's quite overwhelming to dive into .NET and constantly scratch my head when I encounter libraries that seem to be ignored, forgotten or currently re-invented with 5% of the features as some third-party web library that for some reason get super-popular.
Thank you all for your input. The sensors are connected to something that is capable of writing to a queue (like a PC).
It'll take me longer to do that than it did to complete the course! I read through the text, found nothing revolutionary, and breezed through the questions. Easy. Am I creating .NET applications after completing this course? No. Do I want to? No. Am I confident that I could learn to do so in a relatively short time period? Yes. You've helped inspire a future blog article, by the way. I find it fascinating how many programmers use high-level languages, which are often self-described as being easy, and strenuously reject the word "easy." Why isn't everyone using Assembly? Because ASM is hard. Why do so many use C#? Because look how hard it would be to do .NET apps in ASM. Does that mean C# is relatively easy? Yes. Compared to creating .NET apps in ASM, I'm declaring C# much, much easier. Furthermore, how hard is it to learn C#? If your background is PHP, relatively hard. If your background is C, relatively easy.
If it has any networking capabilities, this is what [MQTT](http://mqtt.org/) was designed for.
Yes, unfortunately, Microsoft is quite dishonest about deprecating APIs. They leave them around seemingly forever but only have them in maintenance mode, never modernizing them or even thinking about how they might fit into a current-day environment.
So I take it that you are unable to list the similarities, alright. I rest my case and mark you as a troll.
Wow! That's why you need a high-level programming language! Thanks for the insight!
Updated my comment. More mad ranting.
Based on a 20 second gap time I'd recommend a central SQL database; this would be the standard solution for the manufacturing industry. I asked about the reporting interface because it is implied if you're storing data. Do you have other needs? Are you supplying data to other systems?
The random numbers are generated based on the time. You can't generate different random numbers in the same millisecond
Is it really underrated?
Both a and b. Sorry I should be more clear next time :/
Is any of this correct?
Is there anyone out there with the knowledge about all these things to make the sort of write-up that could orient people or is it simply up to people to do their homework?
I wouldn't trust a stranger in the internet either, props for that, all info available from multiple sources with a simple Google search :) Spoiler: Yes, the info is correct.
Apologies for the late reply, I saw the notification but then forgot about it. So to answer your question there's a small performance gain if the object you're refreshing is beefy and the call + response is slow because it's a 3rd party service. Let's say your service is under high load and the time is 59:50 of the current hour and the cache will expire after 10 seconds. You have multiple calls passing through *TryGetValue()* and they all pass fine and get the item from the cache. If you don't use the callback one of your calls after 59:59 will fall through inside the lock because the item is not in the cache anymore. That single call will execute the slow 3rd party function and will wait for the response to cache it back in. While this is happening the main execution thread is blocked because the item is still not in the cache and everybody is waiting for the lock around the second TryGetValue() to be freed up. If you have the callback you won't block the main thread because the refresh is going to happen in the background. It's still possible for a queue to form and wait for the lock, but the chance for that happening becomes even smaller. Hope I'm explaining it clear enough. 😅
Thanks for your advise. What are the biggest advantages of that in my case? Do you think the use of a message queue is necessary?
Thanks for your recommendation. The PCs will supply data to each other. Basically the machine goes sequentially through all the worksteps: 1. PC 1 2. PC 2 (will need data from PC 1) 3. PC 3 (will need data from PC 1 and PC 2)
Do you have a central server you can use? That's a sticking point in a lot of facilities. You can always designate one of the PCs as the "server" but the others won't be able to operate if that PC is powered off. Do you have an identifier on parts? If parts A and B come out of one subprocess but someone swaps them on a conveyor and they go into the next process as B and A, is that a problem?
Rabbitmq is ridiculously versatile and supports a mqtt plugin, which is widely supported by IoT type devices (not sure the exact type of devices OP is using, but is likely a good starting point).
In my honest opinion, file and folder structure isn't that important nowadays. Sure it's good to use common sense: one file per entity, folders as namespaces (be it layers like Model/Services/Controllers/whatever; or feature folders like User/Comment/Order/etc). &amp;#x200B; What you should really invest to is naming your classes and methods. If you have adequate (and consistent, that's even more important) naming system, you can actually forget about your file system at all. Hide your tabs + hide your solution explorer, open up extra helper windows (think database, history, class structure, etc.). Thanks to our old customs navigating will be pain in the ass first few weeks, but trust me, you'll like this approach a lot later. With tools like find all, recent files and navigate to you'll be hopping around your code much faster, and you won't have to think that hard about files and folders. &amp;#x200B; If you have to go through multiple folders to find something you need - you're doing it very inefficiently. Instead find a class/method by its name, from there you're free to navigate to other stuff you need.
https://github.com/mmacneil/AspNetCoreApiStarter This is a pretty good starter. Just curious, what does FTP Layer mean?
I love VSCode, it adds a new depth to learning because you need to learn the console for it to work correctly. But it's so much nicer being able to have my React front-end and .net core API in the same places rather than switching back and forth from VS and VS Code.
 [https://dilbert.com/strip/2001-10-25](https://dilbert.com/strip/2001-10-25)
I graduate this coming summer, but my last semester I only have 1 required online course. I'm looking for a full time internship position for the spring semester with the possibility of full time after graduation. I've worked with .NET since high school, and have a had a few research positions. Currently working on learning angular. Work samples are on my github: github.com/agentender
As an addition to all the answers above, I think it is critical to understand what data are going to be persisted and what are the future use cases for that data. From my experience, data from such systems will often be used in analytics/data-science tasks, so you would need to think about a good and reliable way of exporting it to some external systems. While some data will be used for debugging only and you would be fine with something simpler, just so a technician or a developer can access it in case of a problem.
I think this has a touch of personal preference so long as you are consistent. For a long time, I always split them. I followed practices where we didn't *always* have an interface for each class then. So it was helpful to see a file to tell me if an interface was there or not. The current team uses AutoFac and has configured it to expect an interface for every class. So now there's no value in having a lot of extra files in Solution Explorer, and interface/implementation are in the same file. The exceptions I've found so far: * If an interface has multiple implementations, it's best to split them all apart. * Sometimes I have an interface in one library and intend to implement it elsewhere. Obviously they have to be split then.
You should call presenter.ButtonClicked and the the presenter should call something along the lines of view.DoThat(); Where the last method is extracted along the rest of the methods of the view to an interface so you can mock or stub it and test/verify that works as expected.
Yeah it worked ok for me in 2017 debugging a C# CLI program in Linux remotely, albeit I believe I was running a Vagrant VM. Going over a physical network may be slow.
In other words, you have no idea what you're talking about. It's ok, the mods removed your post because it was as full of BS as you are.
Are you planning to read in an excel file in C#? If that's the case the System.Data.OleDb library can let you manipulate and read an excel file as if it were a database. You can read the data in as DataTables were you can refer to Columns and Rows.
I'm still a code newbie but I would suspect you could use Microsoft SQL Server as a database instead of a local text file. Itll be faster and less issues. As for connecting it in csharp, you can use the SqlConnection class with the connection string as the parameter. From there you could turn it into a DataTable and use various methods to get the data you want. If I can find the example documentation I'll edit with the link. There might be easier ways but I think that's the basics from what I can remember off hand
I completed a C# introductory course in 1 day. I'm sorry you think the language is difficult.
2 references for you. [https://github.com/dotnet-architecture/eShopOnWeb](https://github.com/dotnet-architecture/eShopOnWeb) (by Microsoft) [https://github.com/ardalis/CleanArchitecture](https://github.com/ardalis/CleanArchitecture)
Not knowing exactly how you are using the tables i'll give you a couple of options with using json for data storage. Option 1 tavernnames.json [ "Eagle's Mount", "Hidden Chamber", "Drunken Goat" ] Code: `List&lt;string&gt; tavernNames = JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;(File.ReadAllText("tavernnames.json"));` Option 2 tableTaverns.json { "Tavern": [ { "id":1, "name":"Eagle's Mount", "owner":"Player One" }, { "id":2, "name":"Hidden Chamber", "owner":"Player Two" }, { "id":3, "name":"Drunken Goat", "owner":"Player Three" }, ] } C# Classes public class Tavern { public int id { get; set; } public string name { get; set; } public string owner { get; set; } } public class TavernList { public List&lt;Tavern&gt; Tavern { get; set; } } C# Usage `TavernList playerTaverns = JsonConvert.DeserializeObject&lt;TavernList&gt;(File.ReadAllText("tableTaverns.json"));` &amp;#x200B; Essentially, using Json and converting the json to a class, you could store all your data in the json. It's super fast, use Linq to query against if you need, and yea ... for really minimal tables like what I think you're doing, it would be the better option for any kind of storage of data.
I made a log view utility, and am working on a monitoring utility, for Polycom (now Poly) phones. The monitoring utility listens for Syslog and telephony event notifications from phones, and works with REST API. Both implemented in WPF. I'm learning a lot!
If you really really want to use an excel workbook as a data store for your application, then I highly recommend using [EPPlus](https://www.nuget.org/packages/EPPlus) If you just need some file format to store your data, which could be written from Excel and read by your application, I suggest CSV. You could easily read the file into memory and split it into rows/fields. I would say this by far the easiest and quickest way to get going, and even learning some basic stuff like file IO and arrays. (That could then in the future be easily abstracted so it can be swapped out to use some other store or format if needed.)
I guess “someone” didn’t bother explaining why they think that’s nonsense? .NET is not going anywhere and there isn’t really any other modern way from Microsoft to do applications on Windows. So I’d very much like to know who thinks that’s nonsense and what they actual proper way of doing things would be. Considering they’re bringing WPF to .NET Core on Windows etc it’s quite obvious what the direction is. Don’t have any links to official Microsoft stuff though.
1. Are you suggesting wireless wouldn't be fast enough? 2. What do you mean by "single 'point of entry'" and "multiple requests in table"? 3. NoSql will need some kind of a service running otherwise how would it work 4. Sqlite doesn't need a service running and MongoDB does
A. Which function? The one the loop is contained in, or the one called in the loop? B. The IL Code was almost identical.
Yes, 4.8 will be the last major release for .Net, though they are going to continue to support with security/bug fixes. .Net Core is the future. &amp;#x200B; [https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/)
You could look at LiteDB. An excellent embedded NoSql database written in .net
You could look at LiteDB. An excellent embedded NoSql database written in .net
The one that is called in the loop like in the original post.
Naah, you must be trooling right? Or you really believe what you wrote? If it's the later, I would suggest you to do your research again.. Because 100% of what you wrote is wrong..
I know what he means. I was just asking a follow up question. Why do you make my comment out to be critical?
&gt; Legacy is not a reason, legacy is a situation. In the business world there are many different priorities from customers. Big Bang rewrites are usually not high not list. &gt; Even then I’d be really surprised to see the entire solution compile significantly faster as small projects, dotnet compilation is quite fast to begin with and linking and resolution aren’t free. The main reason is that 1000 projects will have a lot of unrelated sub graphs that can build in parallel, say 10-way. Otherwise you’re right, simple compiling three projects one at a time or one combined, the combined one wins.
I'm not trooling but I assume you are Also *latter
How much data is in your files? You would probably want to use CSV files or some other portable format, but if the amount of data is limited an easy solution might be to convert the data into C# string constants in an array. If you are experienced with Excel it is actually quite easy to generate C# code using formulas.
I agree. Much, much worse in the long run to have that "rockstar"-attitude. People will stop asking you questions because of the long and arrogant answers.
There's not a ton of data. Like, 30 entries in a column tops.
WinForm and WPF are highly productive ways to write desktop apps. So much so, they’re being ported to Core v3, with the goal that you can run your legacy apps with minimal changes (on Windows, not *nix) But if you really need to dive deep into window handling, then Win32 might still be your best choice. But thats likely less than 5% of applications.
Going to need an example.
https://anglesharp.github.io/docs/Examples.html CTRL+F bold and italic
With .NET 5 we're all on the same page again and that's already happening in .NET 5 in 2021. So, don't worry, Microsoft got you covered.
My impression is that in the past, the OS division of Microsoft had frosty relations with the Dev division (including .NET). And this has resulted in mixed messages, and certainly a less-than-complete embrace of .NET as the technology of choice for Windows development. I'm under the impression that OS division wanted C++ to be the Windows language of choice, and if someone wanted a managed language, they could, uh, (dang, what can we say here other than .NET...?) use Javascript. Maybe my impression of the past is incorrect, or maybe things are different between those teams now. I don't know.
Based on your use case, it sounds like you really need a streaming service like Apache Kafka https://kafka.apache.org/ Check out the Use Cases for more info.
&gt;Can C# optimize this ? Here's an imgur collage: [https://imgur.com/a/bK650Bj](https://imgur.com/a/bK650Bj) What in the images does not prove my point? I'm genuinely interested. (No /s)
Ehhh, sorry, but no. .NET 5 will be just rebranded and expanded .NET Core. But if you use frameworks that are not part of .NET Core (and won't be added), then you will still be stuck on .NET 4.x.
&gt; NoSql doesn't need any service running in the background therefore is easy to deploy anywhere. Which NoSql database can run without a process? Are you talking about SQLite?
Look at you messages 👍 A simple way to start would be to setup a method LoadData that at first just loads your static data, but that you could expand to read from files later. Inside this method you could just setup an object containing the various arrays you need and return that. The data in the arrays could then be generated from your excel sheet. To generate the data you would use a formula that references one or more cells and outputs it as a C# string. Say if you have three cells with the values a, b and c you would use a formula to output the values "a", "b", and "c", (with the commas) into new cells. Finally you can copy the contents of these new cells into your C# code and add var myArray = new[] { before the data and }; after it. Now you have converted your Excel data into a valid C# array. I'm on mobile btw, so I hope this is readable.
SqlLite is a pretty decent in memory database system. This will allow you to do advanced sql queries fairly easily. Otherwise, XML or Json are both good choices for hand edited datafiles. I wouldn't bother dealing with CSV... It would work... but I don't feel that it is as well defined as using XML or Json. &amp;#x200B; Once it is off the disk and in memory you can use the [System.Data](https://System.Data) namespace for Data Sets and DataTables and data Rows and DataColumns etc.
What do you call "re-initialize". The IL code has the assignment of the str variable in the loop itself i.e. it is doing it multiple times.
Since you're so intrusive, I'll leave you to your ignorance.
Yeah most people I mention it to haven't heard of it or just think it's a text editor or something.
I think every developer works in a sort of agile fashion, whether they agree with that mentality or not. What it means is they first focus on getting "something that works", even if it's messy, slow, or doesn't handle all error cases. This at least gives them something workable. Then they back up and refine it. If it's messy, it gets cleaned up. If it's slow, they start to think of how it could be faster. If it's missing error cases, they start to fill those in. They repeat that cycle until either they run out of time or they feel like the improvements they could make aren't worth the effort. This means after the first initial step, they always have "something that works", which can be shipped in a pinch. Each iteration is better than the last. But it always works! It's also important to note it could always be *better*, so it's as important to know when to stop as it is to know how to make it better.
Search for nosql embedded library should show a few you can use depending on your language of choice. Nosql is a file based database in its core, so all you need is a library to work with it. Some variations that support concurrency (ie: MongoDB) aren't a pure Nosql database (thus I think because of MongoDB people don't quite understand what is nosql) , if you read the wiki about nosql it should explain better the difference of both.
I'm sorry you think completing a very shallow introductory course gives you enough insight or experience to make the statement that its oh so easy. Any language is easy enough to pick up for an experienced developer. You are not special or unique.
I'm well aware of the differences, you just made a curious assertion that implies NoSql is capable of an in-process deployment while SQL is not, which is not true.
Came here to include SqlLite in the conversation. Would be super easy, more portable than SQL server, and definitely easier to read from/write to than CSVs/XML. In particular, it's nicer to deal with LINQ than it is anything you'd deal w/ on the CSV or XML side.
Maybe if you read what I wrote without malice intent you will notice i wrote no such thing. But if it makes you happy, sure :)
You comparing embedded databases to standalone databases. SQLite and LiteDB are both embedded, SQL and NoSQL. SQL Server and MongoDB aren't, SQL and NoSQL.
&gt; NoSql doesn't need any service running in the background therefore is easy to deploy anywhere. What's the purpose of making this statement in a post clearly intending to illustrate the value of NoSql over SQL, if not to imply that SQL isn't capable of being deployed the same way? I didn't read your post with 'malice intent'; someone asked for help and you used misinformation to support your response.
With re-initialize I mean the process of allocating memory again and storing the the result into the just allocated spot after it had been discarded at the end of the scope of the loop. That’s at least the definition my professors used. And according to the ILCode it was not doing exactly that. It just creates the variable once and just keeps filling it with different contents in the loop. Of course the ILCode does not tell us though, how it actually handles the string (in my example) in terms of allocating memory.
you can use sqlite
&gt; I’ve been under the impression for many years that .NET was the framework Microsoft preferred devs to use for Windows desktop apps Few Microsoft apps are written in .NET. &gt; it’s everywhere from APIs to PowerShell. Sure, but PowerShell is basically just another API. The short version is that Microsoft was never able to provide a coherent story on whether and how you were supposed to write a .NET Windows desktop app. The much longer one: See, a long long time ago, after Windows XP shipped, there was going to be a relatively small release code named Longhorn. In the first demo, among other things shown was a File Explorer rewritten to be a .NET app. As Longhorn progressed, more information and tools emerged, such as the weird Microsoft Max app, also .NET. The other shoe to drop was something called “WinFx”, purportedly a new set of APIs you should use for your next Windows app instead of Win32. At this time, .NET was publicly at version 1.x. As Longhorn development progressed, it became a mess in multiple ways: it went from small scope to having a plethora of new features, with very varying state of completion, pushing the release out by years, and Microsoft saw new priorities that those features didn’t address. What was meant to ship in 2004 basically never did. Instead, we got XP SP2 to address growing security concerns, and then we got the Longhorn Reset, which cut a ton of features in order to actually ship something in a reasonable timeframe. Among the stuff that made the cut? Windows Sidebar, seen in that original demo. Among the stuff that did not: the notion that WinFx was to be the new way to write apps. So File Explorer was rolled back. Some of the new ideas remained, but were reimplemented in the old XP codebase. WinFx got rebranded to be far less significant: it became .NET Framework 3.0, and its features were also mostly backported to XP. Longhorn got the final name Windows Vista. At that point — late 2006 — WinFx was no longer a key part of the marketing message. So why not? Probably four driving factors: * overarching team animus. .NET was developed by DevDiv, who do Visual Studio and the like. But Windows was developed by WinDiv. There was little motivation for them to work together, and maybe a bit of empathy for each other’s needs would’ve helped (see below) * inertia. A “we’ve always done it this way” attitude. * lack of maturity. As a counterpoint to the above, a good case can be made that it was *way* too early to present WinFx as the new way of doing things. As I wrote above, at this time, .NET 1.x was public. 2.0 wasn’t even out yet, so people weren’t even using generics. Performance was quite a concern at the time — computers would become faster, and the JITter better, but not *yet*. * it was seen as a nice-to-have rather than a must-have, and they simply couldn’t afford any further public embarrassment (ironically, Windows Vista didn’t end up collecting glowing reviews either way). Thirteen years later, that kind of sucks. We’re now in a world where Microsoft *still* doesn’t use .NET that much on the desktop (most of the big apps other than those by DevDiv tend to be C++ or JS). So the big usage of Windows Forms or WPF (code name Avalon, one of WinFx’s pillars) is really in enterprise apps rather than something you see publicly. Rather than increase interest in WPF in particular, they introduced *another* framework in UWP, this time opting *not* to backport it, making it even harder for developers to decide. Should they make an UWP app? Or WPF? Or should they just give up on Windows desktop apps altogether, as Microsoft itself is starting to do (see, for example, Teams), and just make a web app?
That seems to be correct, yes.
\`\_rng3\` A NEW CHALLENGER APPEARS
For system to system communication I've used WCF with callbacks and that worked quite well over TCP. Though SignalIR may be better now. SQL is the best for data storage and if you don't need direct machine to machine communication. So if you need them all to access the same list or table use SQL. And you can use entity framework to do code first design if you aren't too comfortable with SQL.
[here](https://github.com/sbarrac1/QuickExamples/tree/master/Basic%20Snipping%20tool), I wrote a basic version of what I think you are trying to do. Press the button on the form, then click 2 points on the screen. It will save the image to wherever the exe is as 'capture.png'. This is a very rough version but should help you figure out what you need to do.
Developers tend to be tribal individuals who get very prickly. You met one of them. If you have a spare hour, it usually defuses them to ask them to explain themselves. You never get a well-meaning discussion of the flaws of your framework compared to the advantages of theirs. Instead you get a stream of half-baked thoughts lifted from blog articles of other nay-sayers that have been parroted so much it's equivalent to ".NET is pee pee that was only made because Anders Hejlsberg is a poo-poo face." But it's usually worth asking to see which one they are. In short, expect developers to interact like neanderthals. Most are unable to say, "You're wrong because..." Instead they only know they can say, "You're wrong and your mother should've aborted you." because they're the biggest fish in a tiny pond and maintain that status by scaring away anyone who might know more than them. .NET is the most modern framework MS is throwing their R&amp;D at. They have plans for it beyond 2020. The same can't be said about their earlier technologies. COM/MFC/APL/etc. aren't getting a lot of new attention, they're merely being supported going forward. That doesn't mean every facet of .NET is well-supported. Windows Forms will probably live the longest, even though it hasn't seen anything truly new in at least a decade. WPF got abandoned for a chain of frameworks that either died or aren't wildly popular. It's still a great choice for desktop apps, but you can find 100 excited WinForms users for every 1 WPF user. I have a feeling some time in the next 3-4 years we'll see something that tries to replace UWP/WPF/WinForms. I don't know if it'll be successful, but I do know it'll be based around .NET. There's no indication MS has a replacement for it in the works, and it's far more likely they want to drop Win32 from Windows than .NET.
&gt;Hope I'm explaining it clear enough. 😅 You did. Thank you!
I think that libraries like [EPPlus](https://github.com/JanKallman/EPPlus) are better than using OleDb for this. Primarily because EPPlus parses the file itself, using the office XML spec. You don't even need Excel installed on your machine to use EPPlus, whereas you need Office (and the ACE or JET OLE drivers) installed for the database-style access, or for Office Interop.
Now quote the second half where i mention SQL, did I imply sql isn't caple of doing it? You refering to Not only Sql while I'm refering to Non SQL (file based non relational db) which all senior dev would know by heart the difference, especially when compared side by side with sql.
You don't happen to have a blog?
Thanks for the info, I'd never seen this library before! I was just pulling from previous experience I've had working with Excel files in .NET. Will definitely look into this project.
It's pretty nice. You have a lot more control over things if you're writing to the file, like ranges, styles, colors, all that. But for all that, it's not as familiar as writing database code is, so there's a learning curve. But I use it all the time now; I don't use the Ole method anymore at all.
 *&lt;div class="reddit"&gt;* *&lt;span class="badge badge-primary" style="font-size: 12px;"&gt;* *c-sharp reddit* *&lt;/span&gt;* *&lt;br&gt;* *Reddit is cool* *&lt;/div&gt;* &amp;#x200B; Something like the above, but I want to grab only *Reddit is cool,* but since the span block is under the div block, it also gets scraped when I select just the div block to be scraped
“Should”, but it’s also nice to put interfaces and their implementations in the same file, and is done quite often.
It’s quite easy to comprehend a file with different entities, so I don’t know what the hell you’re on about. Even if I load a file with 20 interfaces, it’s clear to see where each starts and ends.
No, if you know programming concepts and patterns, and yes, if you don’t.
Idk, felt pretty snarky when I read it. If you didn't mean to come off that way I'm sorry :)
There are lots of ways to write windows apps though most businesses I have been across use .NET exclusively for thick clients unless they were doing something multi-platform, needed more performance or the legacy code base was written in C/C++. I have also seen a ton of hybrid apps running C/C++ cores with .NET UIs. What is official from microsoft? Anything that builds, runs and follows microsoft guides on best practices (and this only matters if you plan to submit your app for certification). No specific language or platform is implied mainly due to, as others have stated, a long and storied history of siloed departments.
&gt; You refering to Not only Sql while I'm refering to Non SQL (file based non relational db) I'm talking about the difference between embedded and standalone databases. This is completely orthogonal to your (or anyone else's) definition of NoSql.
I'll check that tommorow. thank you. Believe me guys, it will come a day which your help for me will change world by AI and ML ##bad guy laughing mwhahahahaha##
&amp;#x200B; You can never be sure
oh me oh my, thank you very much for your multiple solutions. I'm gonna try declaring XYZ as a JToken (which I mistook for JObject) and I'll sort those into the string or List&lt;string&gt; buckets later.
Lmaoooo I'm crying at your analogy.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower), [8](https://www.reddit.com/user/viorica_presedinte), [9](https://www.reddit.com/user/werner_sclavul), [10](https://www.reddit.com/user/basist_infect), [11](https://www.reddit.com/user/felix_presedinte), [12](https://www.reddit.com/user/werner_la_puscarie) ultimately in an attempt to make you pay money for the service he runs (endtest). [This is the kind of person you're dealing with here](https://imgur.com/xyfZ59P) Still want to give endtest money? **Vote and report accordingly.**
You lost me there, anyway this won't lead nowhere so.. See you around, i guess.
Yeah, I guess I see now that it could be read that way. Actually I didn’t intend that. All good :)
The idea is that going forward you don't use .NET Standard or .NET Framework beyond them being legacy, similar to how Windows still ships with VB6 and it's still maintained for legacy users.
Thank you all, I won't have to wonder that much on what should I spend more time on (:
Without knowing what the input JSON is there is no way to help you out. Check this question for some guidance: https://stackoverflow.com/questions/25473879/newtonsoft-json-linq-jarray-does-not-contain-a-definition
Is Main a static class, and you are trying to access it through a WeatherData object instance (results in this case)? I think you want to have a property on WeatherData of type Main.
&gt; Few Microsoft apps are written in .NET. Tbf, that incredible and informative answer that you have excellently posted doesn't answer the question being asked. Op didn't ask if Microsoft preferred .NET for their own apps, they asked if MS prefer devs in general, who are developing Windows desktop apps, use .net and the short answer to that is: yes. They very much do.
There are also tools to auto generate C# from JSON and vice versa. http://json2csharp.com/
If you like funny stuff, you should check out OP's comment/post history. Guy is a fucking riot. That same day he made a different thread about how upset he was that the template for a console app came with a couple hello world lines, and how he shouldn't have to delete those lines, they're an eyesore. This week he's looking to find a Russian wife who is a "conservative virgin". H'es also super passionate about racism (he loves it), and posting unpopular opinions about various Asian cultures. It is absolutely fascinating.
Important to who? To me it's very important to have a very polished code, but your manager will probably be most concerned on getting the things done. Both are legit points of view and you have to reach an equilibrium. Delivering fast without putting much thought on the code can be detrimental long term, but you may as well waste a lot of time overthinking a good enough approach. But IMHO it is OK to take your time to solve something as a learning activity outside of work.
There is no such thing as allocating memory for variable at runtime, at least not for a single variable. There is of course allocating memory for the object on the heap if it is a reference type but the memory for variables on the stack is created all at once. The compiler (actually the JIT compiler) counts the variables, measures their size (it is known in advanced based on their type) and generates code to bump the stack pointer as much as needed. Then in the assembly code itself it hardcodes the offsets for each variable. Pretty much nothing about declaring variables except increasing and decreasing the stack pointer is done at runtime. The assignment of course happens at runtime but in this particular case it happens exactly as many times as the loop requires, there are no optimizations. If the code had a variable assigned to a constant the compiler could pull it out before the loop to avoid multiple assignments to the same value, that would be an optimization.
Lol the internet introduces us to some weird people.
There really isn't an "official" or "preferred" way for application development on Windows. Like every other language or API, .NET is a simply a tool for developers. It has its strengths and it has its weaknesses. Whether or not it is going to be the best choice depends solely on what is being developed, the knowledge of the developer(s), and what is most appropriate for what they want to accomplish.
&gt;I tried getting around the Object Reference requirement for non static field by There's no way to get around that. &gt; except Main absolutely is a public class within the class I created. It's looking for a public property named Main, not a class. What you can do is public Main Main {get; set;} public class Main { // your class here } within WeatherData.
Mine does :(
&gt; making it even harder for developers to decide. Should they make an UWP app? Or WPF? Or should they just give up on Windows desktop apps altogether I'm reminded of the response a .NET developer gave when handed a brochure entitled: "Winform or WPF, how to choose which to use for your next app". &gt; why do I have to choose? This question remains unanswered.
That would make me consider not using autofac.
Development is a funny thing in this way, and what a lot of people already said is very true about how developers prefer to become tribal and only stick with one thing without explaining why. But the reason why they do this is simple. You see as soon as a developer decides to learn something new there is a certain level of effort and time that goes into it. I think a lot of people shut out opinions over other languages, APIs, and in this case, platforms such as WPF and Win32 C++ just because they don't want to feel as if their time learning it was wasted. For me, I used WPF on one of my most ambitious hobby projects because I loved the effects you could pull off with minimal code written, (think: BitmapEffect, Effect, and DoubleAnimation classes) but that being said I still understand the utility of WinForms and typically use it for smaller programs such as dialog boxes that save values to a settings file. You don't see emulators using UWP for video plugin settings, do you? :P (UWP, in this case, seems far too advanced for a one-page settings dialog to developers) The point here is the looming feeling of abandonment Microsoft puts off when they pick up and throw away projects they create. Windows developers at the time might have thought .NET was a fluke and decided to stick with the tried and true. Either way, I see it as use the right tool for the job, but do the job in the way you see most efficient.
&gt; you won't have to think that hard about files and folders. if you have to think at all, or their are too many layers you have to navigate your doing something wrong.
Lol, I feel for you. Mine has a scheduled virus scan at midday that screws everything up as it thrashes the nuts of it :/
The question seems a little vague... simply put, in what context? In terms of the C family of languages, I would say it's medium difficulty. The syntax is extremely forgiving and the error detection is incredible. The memory management is done for you and that is a blessing for beginner devs and larger applications in my opinion. But compared to the simplicity and power of C, it can seem daunting. Suddenly there is a standardized way to do almost anything and the likelihood of code you've written being already included in the .NET standard **somewhere** is annoying at times. Compared to the simplicity of C, .NET is incredibly vast with a lot of quality code buried under situational junk. C# itself is fairly straightforward, especially if you're already a developer in another language. If you're just starting out, it's completely possible to master with enough time though.
&gt; pushing devs away from Win32 and to .NET for years Don't confuse the Windows system call APIs with a language run-time. Asking about a Windows push from Win32 to .NET is like asking if Linux was pushing people from POSIX to Ruby. It's nonsensical because they occupy completely different roles and layers on the computation stack. The vast majority of .NET applications on Windows are Win32 applications. A small minority are WinRT\UWP applications. Windows did have a push back when Windows Phone was a thing for developers to move from Win32 to WinRT/UWP. WinRT and UWP offered C++, JavaScript, and .NET bindings out of the box, but any language can use them (I know there are Python bindings for example). From what I can tell, the WinRT\UWP push seems to have died along with Windows Phone. As far as Windows is concerned, it does not care what your application is written in. The .NET team would certainly be happy if you chose .NET. But the VC++ team would be happy if you chose C++, whoever packages Python into Visual Studio would be happy if you chose Python, and so on. The Microsoft recommendation is always to use whatever works best for you, but they'll be more than happy to sell you Visual Studio.
I prefer separate. My logic is that if you have an interface it suggests that there should be more than one implementation, or a need (actual need) to mock out the dependency in a test. On that basis the interface wouldn't live with the class because there may be more than one class. But I wouldn't reject a code review if you did put both in the same file :)
You \*can\* use stuff that references "cells" as in an Excel spreadsheet if you want to, but one thing to think about is that even within the context of a spreadsheet, what you're looking at, given the OpenXML framework that MS uses, is just a neatly formatted way of viewing an XML file. I think that generally speaking what you want to be thinking about as a developer is what the data objects themselves are. In your actual code, the only time you really should ever be thinking about the file or file type you're storing the data in is when you're actually boxing or unboxing it. To be honest the only time I'd ever want to use OpenXML as the medium of storage is if I wanted someone to be able to read the data directly outside of the context of the application. The APIs for it are a bit of a PITA since you're diving down into individual worksheets in workbooks, etc., whereas with something like JSON or a CSV (or a pipe-separated file, which is often my go-to since people rarely use pipes) it's very easy to just pop the data in and out and not really have to think about it again. There's also serialization, which involves decorating your container and then when you save it you can retrieve it as the actual object with no translation needed. That's a pretty old way of doing things, though, and I think it's generally fallen out of favor because you're generally not going to be able to deserialize stuff unless you either have access to the .dll that did the serializing or else are willing to spend some time playing with reflection.
&gt; they asked if MS prefer devs in general, I guess that’s technically true, but it’s not how I read it the first few times. &gt; and the short answer to that is: yes. They very much do. But, whatever the complicated reasons, they clearly hardly eat their own dogfood. If they did (more), 1. the frameworks would be much better off, as they would be informed by their actual experiences. 2. they would offer high-level APIs for new Windows features on day one.
I think learning the language is easy. Learning the base libraries is what takes the time.
&gt; .NET is not going anywhere and there isn’t really any other modern way from Microsoft to do applications on Windows. Sure there is. Recent apps like Windows Terminal aren’t .NET, which can be justified from a performance point of view but is also a slap in the face. &gt; Considering they’re bringing WPF to .NET Core on Windows etc it’s quite obvious what the direction is. Bringing WPF to .NET Core is a necessary step to deprecate .NET Framework. It says that Microsoft is committed to keeping WPF around and offer it new benefits (faster runtime, various C# 8 features, etc.), but not much more than that. They could’ve made a recent app like Calculator, Settings, Terminal, whatever .NET, and they chose again and again not to. That’s an unfortunate mixed signal.
Have they actually announced that there won’t be a .NET Standard 2.2 or 3.0?
Did you know that Visual studio supports Json 2 csharp out of the box? Just copy any json, then in any c# file right-click then Paste special.
Game Engine Architecture by Jason Gregory is the book for learning how to do that.
Game Engine Architecture is written for C++ and has a lot of subjects that are solely of concern in that language (efficient allocation of memory). I would advise dabbling with Monogame to implement an engine that attempts to add some structure to that framework. There is not much material on Game Engines, sadly.
Sure there’s lots of applications being done without .NET, but it’s still the most modern framework to do things. It’s not for everything obviously, but going for WinAPI takes a lot more work. Microsoft has the knowledge and manpower, many others might not. It’s true they never went for full .NET themselves even though for a long time they were saying WinAPI will be on the back seat and .NET the way forward. But at least they’ve been committed to keeping it around and brought WPF. But it’s a bit of a question will there be something else in the future or what’s going to happen exactly.
Out of curiosity how are those apps built? UWP?
UWP with C++, yes.
I did quite a lot of VSTO stuff. Learn about IRtdServer, the rest of it is just the Excel object model. Feel lucky, when I started C# didn't have optional parameters :/ You'll also need to learn some VBA. I learnt it by developing projects for work. The Excel object model is huge, so don't worry about learning it all, just figure out how to do the specific things you need to do. Once you figure out how to solve the first problem, everything else will follow the same pattern. As an aside, are you doing this for a specific project? The whole emphasis has changed now because of Office 365. Unless you have a reason to use VSTO I'd probably look at the newer JS api.
Why don't you compare checksums?
Noob programmer, which .Net types are best to use? I haven't been able.to find a real article to explain the different OS comparability levels.
They said there would be "only one .NET going forward" with the implication of .NET Core being the only actively developed (not just maintained) version of .NET but I haven't seen them outright say that .NET Framework and .NET Standard won't continue to be updated. We do know that .NET Framework is pretty much sunsetted at this point similar to other projects that are simply maintained for bugfixes so I can't imagine much point in furthering .NET Standard.
&gt; But if you use frameworks that are not part of .NET Core (and won't be added), then you will still be stuck on .NET 4.x. If you use frameworks that are not part of .NET 4.x (and won't be added), then you will still be stuck on .NET 3.x.
Interfaces don’t necessarily require multiple implementations even be planned. Especially with a lot of dependency injection, having a controller access an interface rather than an implementation can help ensure package visibility is correct. More than once in large code bases, I’ve used autocorrect in an IDE to link to a method that should’ve been private. I find interfaces hugely helpful there. But I agree with you, it’s not really ideal, and if you have more than one implementation, you definitely shouldn’t do this. Interfaces and their implementations are really the only ones I can justify this for too. Had a dev once put 3 enums with a random domain object file. It really shouldn’t have taken me so long to find, but I was just baffled for a good half hour, trying to figure out what was going on.
My understanding is that calculating a checksum requires you to read the entire file into memory, so unless you have a pre calculated hash, then reading both files and doing a bitwise compare is faster. Looking for the most efficient way to compare. Filestreamer?
BufferedStream and a hash function? There are faster hashes o course but this is how I do it and it works for multi-TB VMs. `using` [`System.IO`](https://System.IO)`;` `using System.Security.Cryptography;` `using System.Linq;` `namespace ConsoleApp4` `{` `class Program` `{` `static void Main(string[] args)` `{` `var file1 = @"C:\Users\scott\Downloads\`[`ll.zip`](https://ll.zip)`";` `var file2= @"C:\Users\scott\Downloads\`[`ll.zip`](https://ll.zip)`";` `var cs1= BitConverter.ToString( GetChecksum(file1));` `var cs2 = BitConverter.ToString(GetChecksum(file1));` `Console.WriteLine( GetChecksum(file1).SequenceEqual( GetChecksum(file2)));` `Console.ReadKey();` `}` &amp;#x200B; `static byte[] GetChecksum(string filePath)` `{` `using (var stream = new BufferedStream(File.OpenRead(filePath), 1200000))` `{` `SHA256Managed sha = new SHA256Managed();` `byte[] checksum = sha.ComputeHash(stream);` `return checksum;` `}` `}` `}` `}`
I struggled to find anything myself. Thankfully I was already pretty proficient in VBA and C# so I just worked off bits and pieces and trial and error mostly. My advice is to get in there and play around and Google/Bing/Jeeves a particular question you want the answer to. Hardest part is unit testing. I’m still trying to find the best way of doing that.
UWP uses .Net though..
This is false, UWP can be written in C#, C++, Visual Basic, and Javascript. They no limited nor exclusive to C++.
I just Googled IRtdServer and I see it's part of the Interop package but in the course I linked I used Tools.Excel and not the Interop package. Do you think I should be focusing on the Interop instead? I don't have the possibility to ask at the new place before I start and they didn't specify wether I should use either, just that I should read up on working with AddIns to Excel and then some CVS generation. Why'd I need VBA over C#? I am doing it for my new internship which is in industry-IT which uses VSTO Excel AddIns. VSTO Web isn't a solution for me. My problem is that I didn't get a lot of info besides what I've wrote and I don't exactly know where to go after completing the course.
Yes, and?
There will be at least .NET Standard 2.1 which won’t exist for .NET Framework. It’s possible they don’t bother with a 2.2 because Mono will be largely dead by then, but I haven’t seen that.
C# is only good for private and small projects, the majorly of developers use C++ with a mix and match of others languages and APIs. But an APP fully written in C# is extremely rare to see, even from Microsoft.
Oh and there's an alternative technique used by things like rsync called 'sliding window hashing' it's a bit more involved though. Of course there's a C# version [https://github.com/GrzegorzBlok/FastRsyncNet](https://github.com/GrzegorzBlok/FastRsyncNet)
And you make it sound it only works in C++, it's that simple.
Thank you a lot, the text aliasing was my biggest issue with it. I don't get how people don't see it as a big deal. Any little detail I don't like about a font or display type makes everything a pain to read. Hopefully this will help!
&gt; There is not much material on Game Engines, sadly. I did notice that, I couldn't find any youtube videos or anything, but I just assumed it was because I didn't know what I was searching for. How do people learn about building game engines in C# then, from college? I work fulltime so that isnt an option I have.
I checked out that book its unfotunately orientated around c++
You could use a library that is designed to extract information from HTML pages like [https://html-agility-pack.net/](https://html-agility-pack.net/) or [https://anglesharp.github.io/](https://anglesharp.github.io/)
Er. You’re taking matters out of context. The Windows-bundled UWP apps I named aren’t .NET. That they *could* be is irrelevant.
Your analogy doesn’t work. .NET Framework 4.0 was a superset of 3.5. In contrast, .NET 5 will be a superset of .NET Core 3.x, but *not* of .NET Framework 4.8.
When you say 'private' do you mean very large enterprise applications? I hope you do, otherwise you are talking complete bullshit.
[At //Build](https://mybuild.techcommunity.microsoft.com/sessions/77008) it was announced that WinUI is going to be the future of Windows desktop development. I’m fairly certain we’ll see WinUI outside of the UWP app model, and once any long-standing features that never made it from WPF are added there shouldn’t be a reason to write a new app using WPF. Out of curiosity, why do you ask for a Windows only solution and not something cross-platform?
I'd advise looking at something like Quartz [https://www.quartz-scheduler.net/](https://www.quartz-scheduler.net/) . Otherwise you'd really need to poll the DB constantly looking for entries which are &lt; the current time...to do it 'exactly'...you'd need to have a small 'polling' frequency or (more likely) store them in an in-memory object you can then check in a loop with a built in delay. Again, I'd use something that already exists like Quartz or AT (windows task scheduler - see [https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler?view=netframework-4.8) )
Again, combining projects is **not** a big bang rewrite. It doesn't require a rewrite at all. Nothing is stopping you moving related components into a single project without changing a single line of actual code. Nothing is stopping you splitting unrelated components into separate solutions, again without changing a single line of actual code. Eventually you'll probably want to match your namespaces to your physical structure, but even that isn't a rewrite. I'm not saying you can end up with a perfect project without a major charge, but I'll pretty much guarantee you can end up with a dramatically improved situation, again without changing a single line of code.
Here is a recent blog from Microsoft [.NET Core is the Future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) Basically they're saying that new applications should be built on .Net Core.
Doesn't UWP compile to MSIL and run on the dotnet Common Language Runtime?
You could remove the nested nodes. var node = doc.DocumentElement.QuerySelector(".reddit"); var children = node.Children; foreach (var child in children) { child.Remove(); } var text = node.TextContent;
Microsoft doesn’t care what you do or how you develop. There’s many tools out there- use what works best for you. I’ve used .NET for games and Enterprise applications it works well and is easy to use. I compare .NET to 1996 Ford Ranger- it will get most jobs done but not as cool as a Ferrari.
I did not know that, thanks!
Game engines aren’t really done in managed languages like C#. Not to say it can’t be done, Monigame exists, but usually you want manual memory management to squeeze performance.
honestly, learn C++ if you're looking to build a serious 3D game engine. Personally I wouldn't tackle it with .NET
We have a subreddit over at /r/gameengdev for discussing engine development with links to common resources (videos, books, et cetera). I mostly work in C# so if you have any questions I'd be happy to help 😀
C# actually gives you a few options for handling memory management yourself - with the recent addition of Spans and ref types you can almost entirely avoid interacting with the garbage collector
If you are going to access the same file once this solution is good. But if the app is going to check the same file multiple times I think is better to create the checksum just once and keep a lookup table.
Doesn't have to be that way, it's a configuration choice made before I arrived and I don't have the time or the clout to try and change it. By default, autofac doesn't auto-register things. It's up to you to register your types. That's cool in a smallish project, but when you're pushing a few hundred types around it's pretty boring to write out all that configuration. You have a few choices beyond that, as far as I can tell. You can do some reflection magic to try and find the types you want to register and configure them that way. Or, autofac has a way to plug in to what it does when it's asked to make a type that hasn't been registered. It sort of comes down to if you want to pay your heavier reflection costs up-front (do all your lookups at start), per-instantiation (let it resolve without registration), or none at all (manual registration with factory delegates). Maybe there's more. I've "used" autofac for about 2 months now so I'm still learning. The 99% case is "if I ask for an `IWidgetSorter` there's probably a class named `WidgetSorter` that implements it. The bootstrapping code I have is smart enough to cross assemblies to satisfy that. Now, I *could* ask for a `WidgetSorter` and in a lot of cases there's only going to be one. But then I'd have to choose some other ways to go about registering the types so resolution could happen efficiently. I have ideas, but it's not yet my project. And as I said, I haven't been using Autofac long, so for all I know my ideas don't work. But in the end I'm getting shit done and it's not getting in my way so I don't really care. I'd love to hear though how you'd do DI in a project with a few hundred types.
Start with the docs: https://docs.microsoft.com/en-us/visualstudio/vsto/excel-object-model-overview?view=vs-2019 One trick to figure out how to perform a specific task is to record a macro and look at the resulting VBA. The code will need to be rewritten in C#, obviously, but it will show you which parts of the Excel Object Model you need to access to perform the task.
You don't need to read the entire files into memory **at once** to compare them. You open a `FileStream` for each file simultaneously, read a portion (let's say 4KiB), compare that portion, repeat. To compute a hash over the entire file you of course also need to read the entire file, which is a waste of time if there is a difference much earlier in the files. Hashing the files only makes sense if you compare the files multiple times and you can precompute or cache the hashes.
You quite often need VBA in tandem with VSTO to make the spreadsheet work as expected. You may never use it, but I've yet to anything non-trivial that doesn't have some VBA in it too. I wouldn't sweat it now, see how it pans out. &amp;#x200B; IRtdServer is the way you get real time data into a spreadsheet. This may not be of any value to you at all, but it's been essential for all the projects I worked on. &amp;#x200B; If this is an internship, don't worry too much about going in tooled up. It's great that you're showing initiative, but, unless they've said otherwise, you probably don't need to be an expert. try and knock out a few demo projects with VSTO. It's always hard to pick a topic, so have a look on the web for anywhere people have used it, and just copy their idea :)
Yep, there are always exceptions and personal preferences. I can be very specific in how I expect project structure to look, but sometimes it's not worth fighting for it :)
&gt; Recent apps like Windows Terminal aren’t .NET, which can be justified from a performance point of view but is also a slap in the face. Wrong example. At this stage, the fact that most of the project is C++ has more to do with legacy. On one hand, Windows terminal is based on the original conhost which of course was made in C++ (since C# didn't exist at the time). On the other hand, all samples (but one) are written in C#: https://github.com/Microsoft/Terminal/tree/master/samples
Not quite what you asked for, but check out open source engines like [Godot](https://godotengine.org/) for some examples.
There are plenty of other strategies for that. MVP is about testing view logic. You don’t have to use interfaces though. I’ve seen plenty of code where the presenter’s methods are called directly by the view. Interfaces are cleaner. Let’s see your implementation.
It's a method call.
&gt;WinForm You sure that's being backported? I know WPF is.
Interfaces aren't even a real layer of indirection. All they are is a copy and paste of the class's public interface. Saying that they are cleaner is like saying a car is faster because you like the paint job.
I'm not, since it Windows Bundled UWP APPs weren't mentioned, but only UWP APPs in General.
No bullshit whasoever, I rarely come across software written in C#, compared to C++.
[from here](https://devblogs.microsoft.com/dotnet/net-core-3-and-support-for-windows-desktop-applications/) &gt;The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows Presentation Framework (WPF), and UWP XAML.
Stick to your main degree for your day job. Game programming is usually a labor of love, the money is not usually as solid as other dev jobs unless you get lucky while owning and keeping control of the IP long enough to reap the reward. That said, from a tech perspective Unity is usually the platform of choice for games written in .NET.
Yep. https://channel9.msdn.com/Shows/On-NET/Updating-the-WinForms-Designer-for-NET-Core-30
I'll be starting my learning with C# soon. Any resources you recommend besides Tabors 8 hour course (where I'll be starting since it's geared for absolute begginers)? Keep in mind, my goal is to gain entry employment as soon as I can. I'm also in a B.S program for software development currently.
Yes I understand, something that i forgot to tell is that I want to work for major developers especially first parties. I'm trying to get as much as I can on C# in order for future opportunities and jobs.
Yes I understand, something that i forgot to tell is that I want to work for major developers especially first parties. I'm trying to get as much as I can on C# in order for future opportunities and jobs.
I'm going to get smacked for this- but MS only cares about Azure now. Everything they're doing is an attempt to make things easier to run on Azure. They no longer care about devs on Windows- Windows is now a cost center.
I like having a lot of control so I really like using SDL for .NET. Try googling SDL2 CS or SDL2 .net or even use the old SDL (version 1) which is quite good. This lets you draw but not much is done for you. No animation code, no 3d loaders, nothing like that. There might be something for sound and IIR they're something to load PNG and GIF images. But anyway, I like it but people say good things about unity3d. Although IIRC it's somewhat difficult to do 2D games there. It has lots of things built in though
If we're talking about Windows desktop development, I would say that .NET is still Microsoft's primary recommendation. The vast majority of UWP example code is C#/XAML and WinForms and WPF are being ported to .NET Core in the upcoming 3.0 release. C++ (win32, winrt) appears to be a secondary option for more specific types of applications (games for example). &amp;#x200B; I do however, find it slightly disturbing that a lot of Microsoft's own applications from the past couple years have been built on Electron.
Just to add to this- the syntax is called “dot notation”. Dot notation is using dots in object oriented programming to indicate the path you are navigating through object relationships to methods and properties.
This is true, I was actually experimenting with speeding up an OpenTK project with Span today
That's great! It's a powerful language. As for resources books never did it for me, neither did **8 hour** courses... the best resources you have are stackoverflow, google, and **yourself.** Remember that whenever you are programming you are learning, and as you run into things that stump you you can search questions on google and find answers in seconds! Start simple, start with a Console application in Visual Studio 2019 and try to get writing text to the window down and user input. Try out math next and learn from the Microsoft Docs documentation to get tutorials on all the arithmetic operators in C#. Experiment with types such as floats, strings, and ints. Remember you don't have to learn everything at once, you can learn at your own pace!
I'm guessing you're trying to pass an object to the GPU memory. You can only pass structs. You'll have to define a struct with the data you want to use and the code to run on it separately.
Is `Index` and `Timespan` valid structs for GPU's? I know nothing about using the GPU directly for things so I honestly have no idea.
Also you should put your stopwatch start and stop outside the loop you're iterating over... It's just going to start and stop each iteration. stopwatch\_gpu.Start() and stop has to be outside the test\_for\_loop\_gpu method.
Method. You can also call it a function but usually people say method when it belongs to a class/object.
Wanting to be a video game programmer is great. But consider the a few things. * competition is fierce, there's a HUGE pool of people applying for all of those jobs * AAA game dev is cut throat, with lots of extra hours, and people get cut and laid off at the drop of a hat. * Entire game studios can disappear in a single buy out transaction and the new owner might just scrap all of their non relevant projects (I.e. EA bought and shut down Maxxis, Sierra, Westwood studios, and many more). There are so many more things that could be added to that. If you're not the cream of the crop, talented as all get out, and highly self disciplined, it's really risk to try to move up in game dev from entry level. What's much wiser, is to find a nice cushy comfy web development job starting out at 75k or more and work your way up to $120,000 or so over 10 years (job hop if you need to in order to go up in rank or pay scales). Get financially stable. And in your free time, learn to build games. Build your own game and launch it yourself as an Indy game developer. If that doesn't work out, use your Indy game in your portfolio and make a horizontal move into Game Development working for someone.
Also keep in mind that with c#, you're options for making games are limited to certain engines like Unity and Mono Game etc. If you want to get down to the metal and use all the latest graphic SDK features etc, then C++ is still the king.
Umm Microsoft uses a ton of .NET on the backend. Where they don’t eat much of their own dog food is the front end stuff. There, we can agree, Microsoft seems to prefer JS.
yes, it's very hard to learn.
If you're looking for the name of the operator, it's called the "member access operator" or just membership operator.
It does not matter where you are in the gaming industry, your starting pay will be lower and your ceilings lower than developers in just about every other industry segment. Game developers even first party also work more hours than nearly any other segment. You might get lucky sure, though I would suggest getting versed in something like AI systems and working for a business while developing an indie title. Something you can control and own, if it gets popular you can sell to a bigger studio and dictate some of your own terms while getting a nice payout. Since you are still in school maybe consider AI and Statistics and go into quantitative analysis. Those roles can pay north of 300k in the first few years. Most of what you learn can be applied to a next generation indie game.
This was exactly what I needed to hear. Thanks so much man!
When you say "presenter.ButtonClicked" where should that method be called or do you mean just a method within the presenter that interfaces a view method?
It only does if you have a specific package installed unfortunately. it is free, and it's in the installer, but it's not clear as to which one at first glance. &amp;#x200B; It is in the `ASP.NET` `and Web Development Tools` package in the Visual Studio installer though.
A method called specifically on an object, rather than a class, is called an **instance** method. A method called on a class is a static method.
I think you should focus on just one: * building a game engine * learning C# It's not that learning resources don't exist for game engines in C#, but you are severely limiting your options because the choice of language seems arbitrary. It's like saying you want a great tutorial for X but the background colour of the website must be blue. Instead, choose what you want to focus on.
I think they're asking for the verb
Yeah, Timespan is for sure an object too
If you get smacked, it's probably because you're not making any coherent sense.
the frameworks and tooling around .NET make C# for web development easy to pick up. That's the main point of the video
I use a MacBook
I do, Rider on Arch Linux.
Methoding
Yeah, made the switch about 3 months ago to Ubuntu and haven’t looked back.
There may be other factors that limit your design decision, like what your network latency/architecture is looking like. I doubt that's the cause, but it may be worth consideration. other than that, I'm with others who posted earlier. Are these one-off or repeated checks? is it worth your time to calculate a ton of hashes and persist them on the server and locally? Also, have you thought of abusing git diff or other version controls for this?
 Prepend every line with 4 or more spaces to render it as code: ---- using System; using System.IO; using System.Linq; using System.Security.Cryptography; namespace ConsoleApp4 { public class Program { private static void Main(string[] args) { var file1 = @"C:\Users\scott\Downloads\ll.zip"; var cs1 = BitConverter.ToString(GetChecksum(file1)); var file2 = @"C:\Users\scott\Downloads\ll2.zip"; var cs2 = BitConverter.ToString(GetChecksum(file1)); Console.WriteLine(GetChecksum(file1).SequenceEqual(GetChecksum(file2))); Console.ReadKey(); } private static byte[] GetChecksum(string filePath) { using(var stream = new BufferedStream(File.OpenRead(filePath), 1200000)) { var sha = new SHA256Managed(); var checksum = sha.ComputeHash(stream); return checksum; } } } }
I am pretty sure that there are no windows hardware drivers written in .net and as such it means that .net is dead. &lt;/sarcasm&gt;
I’ve tried several times but I’ve never been happy without Visual Studio. I have done Angular development in Visual Studio Code on Fedora and that was great.
I do. But when I hit something weird, I use my desktop for debugging
To add to the current responses you can look up extension methods. These are cool if you want to write a method for an object and use it as if it was defined in the object itself. Say for example for want to write a method for the String-class. You can't write it in the class definition of String directly but you can instead write an extension method for String class and invoke it like you would any other instance method. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods is a pretty good read on extension methods.
My day-job programming is on Windows with VS, but my personal work environment has always been Linux - right now I'm using VS Code in Mint
Nah, I still use windows 10 with VS2019. However, I host everything in docker containers on Ubuntu VPS's.
Coming from python I picked it up very easily
This is the correct answer.
Micro$oft Widows / Visual Studio by day, Zorin / Visual Studio Code by night. I prefer the latter, but the tools are only appropriate for my home projects. The complexity of my work requires Visual Studio.
Lets say you have a button in your view. On your cluck event handler delegate the call on the presenter