Dude, you left a lot of personal details in the screenshot...
Thanks, really glad you liked it. It's been really fun to write the posts and start building out the architecture after a few years of just thinking about it. I'm aware of ServiceFabric and had a quick play when it was first announced, but not really since. I think my main reservation with most of the emerging microservices style solutions in the cloud, is that although they look really good, I'm building a system for the next decade at least I hope, and the pace of change in the cloud as it matures is pretty staggering, look how far containers have come in just a few years. I just don't have confidence that I wouldn't be rewriting my app as the infrastructure api's evolved and you cannot control when those updated api's are applied. Once you're on the treadmill, you cannot easily get off! Now, off to finish that follow up for you...
There's a [port of Redux](https://github.com/GuillaumeSalles/redux.NET) to .NET. I'm not sure if it's using persistent data structures under the hood, though, so it might run into performance problems with very large state objects. In my experience, however, application state cloning is rarely a performance bottleneck. They demonstrate a "time-travelling debugger" here: https://github.com/GuillaumeSalles/redux.NET#using-devtools
Equivalent exchange ;D With each patch you get some new feature, but you lose something else. Seriously though... It's really, really annoying working with this SDK. I sometimes just drop it for a month or so because it's just too much. It's not good when barely anything maker any sense, and that debugger to boot... btw. It's funny how the only answer that does follow the original topic is also the only not upvoted one. Shame.
Hello. I recently updated my code again yesterday so please check it out. I ran your recent test when inserting 5, 3, 7, and 2; and deleting 7 afterwards give me 2 3 5. No errors.
There is no topic. You didn't ask a single question, you were just ranting.
tried to run it, windows 8 gave me a warning that it was un safe. Ran it anyway didn't get anything... 
Oh I forgot to mention, I'm executing the code based on a DateTime.Compare, so I can't just go with a string. 
I think he means it didn't launch anything?
Do you think the only option is to switch to stopwatch instead? I kinda liked the code I had built up there :) 
So every x seconds it adds more to a food counter. Since this is a game, you probably have Draw loop and a Work loop. I'm at work myself right now. Let me see what i can do when I get home.
Reddit application haaaa
wow that's clean, thanks. Can you explain why i need to keep it out of the scope of the gameTimer? Also why don't i need to create a second datetime? I'm pretty new but trying to learn as much as possible. 
Yeah totally makes sense, I was doing nothing with that game timer other than giving it a nice new name haha
Ok, due to that loop issue, I tried just getting rid of the game object and just comparing a datetime.now to my foodTimer - all with my old code. it suddenly works? I dont know. haha
you need to maintain the values outside of your game loop. this is the general gist of it: namespace Game { using System; public class Program { public static void Main(string[] args) { // five-second timespan var foodUpdateInterval = new TimeSpan(0, 0, 5); var lastFoodUpdate = DateTime.Now; // enter main game loop while (true) { var now = DateTime.Now; // other game logic if (now - lastFoodUpdate &gt; foodUpdateInterval) { // update food here lastFoodUpdate = now; } } } } } 
Can you have a look at the new code and tell me why this is working right? I mean, I'm happy but I would like to know why it even works haha. I put the class at the bottom so you dont have to jump from two files, but I have it separate on mine. https://gist.github.com/sherylyulin/e7be73cdc6f8d7c4b10b1c06454792b9
Remember that Datetime is immutable. So you will need to do this instead: timeForNextFood = timeForNextFoodAddSeconds(5);
If you used to have the gameTimer outside of your while loop, then that is why it is working now. Your original gameTime was set once. When you set it to DateTime.Now, you weren't telling the program to always keep that object set to the current date/time, you were telling the program to set that object to the date/time at that moment of the call and never touch it again. By switching over to DateTime.Now in your foodCompare= line, you are now comparing to the current date/time at the moment of that call.
Singletons and DI aren't too things opposed to each other. We inject singletons where appropriate. I think this is more global variables vs dependency injection
So kind of like linqpad?
Nice catch! Updated original code.
oh ok, that makes sense. So what you're saying is, I've actually made something that works? We have a first! haha
Well done! :)
Kind of important for me. I just left a high paying career in advertising to get into games. I've worked with one of the big game studios in the past and it's something I want to do again. I don't think I will be a developer, but as more of a product manager I need to know how things are built. One last question now based on the code I have - I want to assign villagers to roles, like farmer. If I wait for a key press, the loop stops while waiting for an input. Is there a way to wait for an input without stopping the loop? 
Thank you again, that looks like the way to go. I assume this is why most game engines have an input, gameworld, render, they are all running on different threads. 
All I wanted was a left-nav with actual expandable/collapsible tree views, and I get...*this*. &lt;sigh&gt;
Yea it looks a lot like linqpad. However, rosylnpad seems to have a few features that you can only get with the paid version of linqpad. Also I don't believe linqpad runs off Roslyn, or at least it didn't used to, I'm not sure about version 5.
I'll have to check it out. I like the whole sandbox notepad idea.
http://www.linqpad.net/howlinqpadworks.aspx &gt; LINQPad 5 compiles your queries using the Microsoft Roslyn libraries (in the past it used .NET's CSharpCodeProvider and VBCodeProvider).
DI and singleton patterns aren't mutually exclusive. If needed, most DI containers allow a singleton pattern if the design fits. Found a Ninject example at https://github.com/ninject/ninject/wiki/Object-Scopes
I just tried it on windows 10 and still nothing happens. I extracted it and then I tried to run RoslynPad.exe, 32 and 64 bit versions. Still doesn't work. How do you run this thing?
If the schema is always the same, can't you just represent the Json "schema" with a C# type? Then, you can just use Json.NET or whatever to do the translation to/from.
Yeah I can't find any current examples. So it must have been a previous version of .NET or an older version of ReSharper. I have a bunch of anonymous inline delegates in older parts of my code(from 6+ years ago), and now ReSharper is happy to turn them into lambda expressions.
Just make sure you maintain the distinction between Dependency Injection, Inversion of Control, and Inversion of Control Containers. 
I think you're looking for "\b", which is the regex word boundary symbol. Add one before and after your regex pattern (e.g. "\b" + theROC.FieldVariablesList[z].name + "\b"). Another note - regex is pattern-based, so using a string as a pattern will work... most of the time. However, you will find that some characters need to be escaped. For example, did you know that your example "1.1.1.b_1" will also match "1e1e1Nb_1"? Periods are wildcards - it's a good idea to escape them with a leading "\" (e.g. "1\.1\.1\.b_1"). I find that it's a good practice to use a regex tester, like this one: http://www.regexr.com/
Sure. I guess I was trying to make the distinction between dependencies that are injected and non-injected dependencies which I've lazily called "static dependencies". Maybe there's a better term? When I want to do a File.Exists() I don't create a wrapper for the File class and inject it. I use it directly. This would be an example of a "static" dependency. I was making a case for these kind of dependencies in certain circumstances e.g. when mocking is not required. 
How so? The definition of a singleton is "a design pattern that restricts the instantiation of a class to one object." whether you do that via di lifetime or a static variable is an implementation detail. 
You should escape your values with `Regex.Escape()`, otherwise your patterns will match stuff like "1a1a2ab_2" because `.` matches any character.
Still a good write up. Keep it up
Happy to help. Just out of curiosity, where did you need to add the @?
Where more specifically would I put that? I'm not too worried about it, because the program is just searching out a word document where I have placed those requirement numbers.
Very interesting. Has it been used successfully?
Yes, it's similar to LINQPad with a few key differences: * RoslynPad is open-source - https://github.com/aelij/RoslynPad * It uses Roslyn's script language, so you can put in the same document: reference directives (#r), using statements, type declarations, and statements. You can even end your code with an expression and it will get evaluated. This means you don't have to think about "modes", just start coding. * The .csx files are now a C# standard, and you can execute them using the 'csi' command line tool that ships with Visual Studio and .NET Core. * I've tried to keep the UI as minimal as possible.
With DI you usually don't restrict the instantiation. ;-)
Do you mean screenshots? There are a few on the GitHub page - https://github.com/aelij/RoslynPad And on my twitter - http://twitter.com/aelij
Tons of not implemented exceptions. I don't think this is production ready. 
Looks nice bro
How do you test `BankGateway` now? You'd have to run each test in an own process/AppDomain to properly test it, otherwise you use a shared instance across tests which prevents proper testing. That has a huge impact on performance of your tests and adds unnecessary overhead.
Why not use a timer? * System.Timers.Timer, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime. * System.Threading.Timer, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the System.Timers.Timer class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime. * System.Windows.Forms.Timer, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment. * System.Web.UI.Timer, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.
Very nice, sounds like fun. I will definitely give it a try. Parabéns!
No thats the issue, users have the ability to alter the schema by adding fields.
Looks great and simple. The schema convertor... It'll take an MSSQL schema and convert it to SQLite? Does it generate a giant script when transferring data or does it connect directly to the dbs and do some kind of bulk copy? Wondering if it's viable as a quick data migration tool within the same schema type.
You can't predict when they do so if you've got beforefieldinit flag.
You don't. You make a decision that this component won't be unit testable. At some point you have to stop creating layers of abstraction.
How do you prevent regressions if you don't unit test those components?
Approximately just in time.
I'm not very experienced with this but why not read it as a string, let the user change the string then overwrite it?
Keep the untested parts simple. You can't test everything.
Thanks!
Thank you for your feedback! The schema convertor takes an MSSQL schema and converts it to SQLite, for example, by connecting to both databases and bulk copying data from one database to another. We will implement the "giant script" option soon.
Considering it's a 2d grid, my guess was it's trying to make you loop through every cell Something like for(int x = 0; x &amp;amp;lt; max_x; x++) { for(int y = 0; y &amp;amp;lt; max_y; y++) { if(y % 2 == 0) { if(x % 2 == 0) Console.Write("x"); else Console.Write("o"); } else { if(x % 2 == 0) Console.Write("o"); else Console.Write("x"); } } Console.Write(Environment.Newline); } It's not the smallest code, but I think this was the purpose of the assignment
Ahm, well. I wanted it to be just like the original "Save the day with C#" shirt, but I couldn't find that graphic other than in photos of people wearing them (such as [this](https://blogs.msdn.microsoft.com/dotnet/2015/05/21/save-the-day-with-a-visual-basic-c-or-f-t-shirt/).) So I ended up tracing it using Illustrator. It's not perfect, but it's good enough for me.
Wow. Thank you for your kind words :)
Probably a stupid question, but how is security handled? For example, all of our SQL Server instances are configured for Windows Authentication only; but our Oracle instances are not - they have the standard username/password configuration. With the Windows Authentication, how do you handle the Kerberos double-hop problem commonly encountered?
I only start thinking about the Domain Model pattern when the complexity of the Business Domain warrants it. To simply say that "you should be using the Domain Model pattern" can lead you to some accidental complexity, especially if the Business Domain isn't complex and doesn't account for a huge portion of your business/customer's competitive advantage. A pattern I like is using Layered Expression Trees in the Controller in a CQRS fashion. You can check it out [here](https://msdn.microsoft.com/en-us/magazine/mt147237.aspx) and [here](http://buildplease.com/pages/lets-iqueryable/). You can eventually refactor this into using the Mediator Pattern like Jimmy Bogard's [CQRS Contoso University](https://github.com/jbogard/ContosoUniversity) 
Thanks again.
looks cool! It can import/export csv's? or other readable file formats?
Haven't looked at it yet so forgive me if it already does this: Please build in a tool that actually creates a decent ERD.
You could try a different ORM that does support SQL Server 2000. I haven't used it by I think Dapper .NET supports it. I'm sure there are others. Or you can go back to the old fashioned .NET datasets, datatables, and data adapters as you mentioned. These are bindable to winforms grids and controls, so they still work. If you use datasets, and it's a simple app that is just running some calculations, I'm not sure what the benefit would be to translating these in to seperate entities. You can just iterate over the datarows and do whatever calculations are needed.
Regarding what the resulting code is: There is **no difference**. `var` simply means the compiler will infer the actual type based on the assignment. The resulting IL is the same. In regards of code readability: - In assignments (like in your case) it **improves** readability, because you simply don't have to repeat the type twice. `var user = new User();` is more readable than `User user = new User();`. - As a result this **reduces** readability **without an IDE**, because you simply can't know the type anymore by just looking at teh code. An example would be: `var user = GetUser();` - will this really return a `User`? Or perhaps some other obscure object? Without an IDE it's difficult to know.
The counter argument to this is that design patterns give a common universal terminology to allow you to express design and implementation details. Having a single instance of a class that is reused by a DI container every time an object of that type is requested isn't a singleton because a developer *could* still new up an instance of that class in an uncontrolled manner. The singleton design pattern prevents this from happening. This is an important distinction re the point above. Now, if you implement the design pattern as per the GOF definition, and then wire that up to a DI container that's another matter completely, but here I think we're in danger of entering hypothetical territory where developers should be taken out back and shot.
There is no functional difference in terms of resulting execution, performance, etc. It is purely a stylistic choice. For simple names like `User` it makes no difference, but for types like `ConcurrentDictionary&lt;UserIdentifier, UserDataStore&gt;` it looks a lot more tidy. You can configure Resharper's inspections based on your needs. I've set it to use full names for primitive types, and offer a hint rather than a warning to use `var` for other types.
You could set the property ShowCheckBox to true and when you do the search you simply check if Checked is true or false.
could you possibly have some job copy the tables to another sql instance that supports EF? Then program against that db instead?
To add to this, in this case the class name is short, but when the class name is really long and doesn't fit in the screen anymore and you can't read the constructor without scrolling right, it's a pain.
Thanks for your work on this. While we're talking feature requests... I think a killer feature would be a little pop out next to the transfer data checkbox on the convert tab that allows you to write a filter query for the subset of source table row data you want to transfer to the destination table. So many seemingly simple data moving tasks are difficult even in sql mgmt studio. Upsert option on specified columns, source to destination would be awesome too (think merging records). The fact that you can do your heavy lifting in something like sql express and convert it to SQLite with a nice admin page will make working with embedded dbs much easier.
&gt; •As a result this reduces readability without an IDE I don't know about that. I spent years programming in VBScript without a real IDE and I never once got upset that I didn't see the type in the declaration.
&gt; I don't get it... why? Think about it the other way. Why do you want to include the type name a second time? If this was the only thing you could write, var u = new User(); would you find yourself typing this? var u = new User(); //u is a User 
Thanks dotnetaccount, will look into it again. Have seen discussions of other ORMs, but nothing concrete. DataSets/DataTables seemed like the easiest way to pull the data in; and as you mention, good to just iterate over the datarows for simple calculations. Perhaps I'm just overcomplicating what I want to do with the data, and keeping it in a DataSet/DataTables will be just fine. Seems like more of a pain to try to make my own entities and keep all the data types in check, handling nulls, etc. If I just pull the data into a DataSet and appropriate table, then operate off of it as I need; perhaps that's the way to go. Thanks!
Interesting idea; though wonder if it'd be too much effort to have to pull the data into a separate DB, just so I can use EF? This app will be more light-weight; and would like it to be quick. Would it be a local DB, such as a non-server SQLite or similar; or were you suggesting a separate server manage pulling the data, and I EF from it?
I also like var with generics, and it simplifies refactoring too. I also like that when multiple variables are declared they are aligned and the variable name starts on the same column. 
Well, it's going around correcting things like: string[] keywords = query.Split(' '); to var[] keywords = query.Split(' '); To me, it's not clear that query is a string...maybe it is, maybe it isn't. Any programmer knows that Split() is a method on String, but it's just string[] is clearer to me than var[]. Likewise: for(int i=0;i&lt;listOfPoints.Count;i++) is far more intuitive than for(var i=0;i&lt;listOfPoints.Count;i++) I get what you're saying with the: var user = new User(); But the rest of the corrections seem to make it less clear than more clear.
I don't think it's too hard to create something in sql to sync to another db. I think it can insert straight into another instance of sql (use dts). The sql dba guy be in the other comment would have a better idea than I. You can install a separate install of sql on the same server as the sql 2000 without any issues. if the db is under 10gb just use sql express imho oh look up sql mirroring. maybe that'll help you
Well, `var[] keywords = query.Split(' ');` is incorrect. It only needs to be `var`, not an array of `var`.
You shouldn't be using var with primitive types, because that is just ridiculous. A primitive type are things like ints, doubles, decimals, strings, arrays of any of the previous types. Use var, if you want, with complex types and linq, basically.
to var or not to var. it's mainly a preference thing. you lose some readability in certain situations. you gain some in others. one thing that hasn't really been touched on is in regard to the return types from functions that /u/AngularBeginner talks about. var can sometimes make your code more maintainable in the sense that if you change return types without changing the interface, you don't have to go through your code base and update all of your type names. you also don't necessarily need to include some using statements. here's a super basic example: TimeGetter.cs namespace ConsoleApplication1 { using System; public class TimeGetter { public DateTime GetTime() { return DateTime.Now; } } } OtherClass.cs namespace ConsoleApplication1 { public class OtherClass { private readonly TimeGetter timeGetter; public OtherClass(TimeGetter getter) { this.timeGetter = getter; } public bool SomeFunction() { var time = this.timeGetter.GetTime(); return time &gt; this.timeGetter.GetTime(); } } } Program.cs namespace ConsoleApplication1 { using System; public class Program { public static void Main(string[] args) { var otherClass = new OtherClass(new TimeGetter()); Console.WriteLine(otherClass.SomeFunction()); Console.ReadKey(); } } } notice that SomeFunction() in OtherClass uses the System.DateTime without needing a `using System;` statement in the file. also notice that we could change the return type of GetTime() in TimeGetter without having to change any other code in our program, as long as the new return type implements the &gt; operator. 
just google the concepts you know from working with vb and add "c#" to the end of your search string. - if c# - for c# - function c# etc...
Oh man, I wish I could do that for member variables. 
There are more than similarities; the languages are nearly interchangeable... except for a few differences (XML Literals in VB, "unsafe" code in C#, etc) most code translates directly from one to the other. [This site](http://converter.telerik.com/) (and other similar ones) can be very useful if you know how to do something in VB, but aren't quite sure of the equivalent c# syntax. 
WPF or UWP.
look at the right side for a lot sources.
Var number = 1.1 So what's that, a float, double, decimal? 
Check OmniDB ERD feature :)
Thank you for your feedback! Still can't... But we are working on it, we plan to release this feature soon.
This should help you: [Learn X in Y Minutes - C#](https://learnxinyminutes.com/docs/csharp/)
It's a double. Real literals default to double, integer literals default to int (falling back through uint, long, and ulong, in that order, until it hits a format it can be represented in). Since that affects type coercion in any expression involving literal values, it may be worth knowing. [Real literals](https://msdn.microsoft.com/en-us/library/aa691085%28v=vs.71%29.aspx) [Integer literals](https://msdn.microsoft.com/en-us/library/aa664674%28v=vs.71%29.aspx)
If you want to get laughed out of an interview for anything other than a junior developer job, go ahead and use var wherever you like. It shows a lack of experience in maintaining complex systems and in working as part of a team, and it is a clear flag that you have less than ten years experience in the field in general. But functionally, no, in that case there is no difference.
A double of course. My students learn that on day 1. It won't be until I start teaching them to write their own functions that I even bother showing them the `double` keyword. Right now they only use `var`. (Or `Dim` for the VB group.)
Wow, that site is perfect for me. Thanks!
 LoadFile(fileName) var contents = File.ReadAllLines (fileName); return ParseFile (contents) Looks pretty simple to me. And most of the logic can be unit tested, leaving the functional tests just for edge cases like missing files.
This is proving very helpful, skimming throught it for now and keeping it for later. Thanks!
Isolated testing is useful, but it isn't the only valid form of testing. For example, anything that touches a database using System.Data is going to be used a connection pool. BankGateway is like the connection pool, a low-level resource that needs a different style of testing. *** That said, I object to the design for other reasons.
No, VAR is useless noise that obscures the real information....by definition. Your comment makes no sense.
That's an awful example. You should have used an interface instead, OR your code is still going to break, but NOW you dont know where
my boss likes to use var as a test in interviews. can't explain why you used it when you didn't need to? no job for you. she may be wrong but i won't use it at interviews anymore.
I generally use var when the returned type will be obvious... For example new Class() will almost always return Class, var s = "lololol" is obviously a string, however var dom = XMLHTTP.Parser.SuperAwesome(StuffId) isn't obvious and var will not be used.
That's great! And a cool project. If I get some time I'll try to contribute. I like the looks of some of the libs used so it'll be good intro. I read the enhancement / issue and its a perfect summary except the last sentence... In the case a record exists in the target table (by virtue of extant user definable 'keys'... Not necessarily pk) but does not exist in source, I would want an option to either remove the record from the target or keep it vs always removing it, similar to a one way sync with file sync. Could be tricky with identity inserts though... Hmmm... That solved would eliminate so many little 'data massaging' console apps you invariably end up writing just to push data around :)
How about showing some real code? The `var` keyword is only available inside functions. That function usually gives the context needed to understand what's going on without needing to explicitly list the types. So by only showing that one line, you stripped out most of the context. You further cheated your example by not even giving it a proper name.
Trying to popularize a library I've built and used on almost all my .NET projects in the past few years. The article I wrote about it on codeproject ([easier. Net settings](http://www.codeproject.com/Articles/475498/Easier-NET-settings)) was well received (4.9 with 95 votes), but there was no public repo when I wrote it. Would love for people to review it, and contribute to it now. It's basically a library for managing application state (e.g. window locations&amp;sizes, last entered username... basically any data that's not domain data). This library has made me love this requirement, and since I like it so much, I figured might as well present it to other devs and a) get oppionions and b) get myself some reputation points:) I'd really appreciate people taking a look and commenting. Thanks!
&gt; You should have used an interface instead, No, because that doesn't cover the 10% of the cases where `IZ` didn't expose everything that was needed. &gt; your code is still going to break, but NOW you dont know where Are you confused about what `var` does? Perhaps you think it is the same as `dynamic`? Because it's not. The compiler will tell us exactly where the change will cause problems. 
Specifications change. Sure, if a change like that is likely, I'll use an interface from the start. But unlikely doesn't mean impossible. 
Wow! That's no fun. I would say, scorched earth on that version control and start from the current build forward. New master, new master, you've got a new master!
WPF :)
wpf + mahapps + reactiveui is my toolset of choice there.
Looks really good OP and I surely will give it a try. Are there any docker containers which I can use? Or is it still DIY?
Well, technically that is a form of version control.
Better than nothing i suppose
Slowly get up, smile!, and walk out. Don't look back, there's nothing there for you.
Please don't say or even think ReSharper is *correcting* your code. All it does is make a suggestion, not more. If don't agree with a suggestion of ReSharper, don't follow it. If you're bothered by some suggestions, change the severity level or disable it. I've seen enough people installing ReSharper and instantly disabling their brain. Don't be one of them. Just because ReSharper says "you could change this to that" it does not mean you have to or that it makes sense.
I love that the date format just switches abruptly. 
I was thinking about that, its cause at new years the guy realized that it wouldnt be sortable by name without the year first
Nice! A minor suggestion - make the page a little bit shorter so that no scrollbars are necessary in a standard 1920X1080 view.
I'm bothered by that green dotted underline.
I read the title, but didn't READ the title. I saw the screenshot and was like "oh that's a clever shell extension for Windows File Explorer, showing branches and the current state of them" ....then I re-read the title and went "ohhhhhhhhhhhhhhh eek"
The correct question to ask us "which version control do you use?"
Happens really rarely, but say you want to instantiate a Dictionary of functions that returns a tuple, it would look something like this: Dictionary&lt;string, Func&lt;Tuple&lt;string, string&gt;&gt;&gt; blah = new Dictionary&lt;string, Func&lt;Tuple&lt;string, string&gt;&gt;&gt;() instead of var blah = new Dictionary&lt;string, Func&lt;Tuple&lt;string, string&gt;&gt;&gt;() and as it was said in another comment, say you want to change the signature, you'll have to change it at 2 places instead of just one. Edit: I love how Reddit added a horizontal scroll bar to the code snippet (at least on my end) to add to my point.
With Mercurial at least you could override the commit timestamps with `--date` using the folder date there. Probably could do the same thing with Git but I don't know the command offhand. A powershell script, something like (typing in reddit window, not tested): $p = (get-location).Path md \repo cd \repo hg init ls $p | sort LastWriteTime | % { erase * -Recurse -force -exclude .hg ls $_ | copy -destination . -recurse hg addrem hg ci --date $_.LastWriteTime.ToString() -m ("importing " + $_.Name) } should do it. 
I don't agree with Gauenwolf's original statement that having "User" obscures real information (I would say it is conveying redundant information, which is why it is noise). [Edit: I guess you could consider the fact that the name of the variable being in an inconsistent place because the type on the left is almost certain to have different lengths to be an argument that having the type name could "obscure" information. It's certainly easier for me to read variable names defined with `var`, for that reason.] Technically, `var` is conveying the information of "this is a variable declaration" (and, technically, "the type is inferred from the right", but most consider that information elided). So, it has a meaning and purpose, not really useless at all. Whereas `User user = ...` conveys both "this is a variable declaration" AND "it's type is specifically `User`". Since the type on the left is often conceptually irrelevant (or obvious because the expression on the right tells you the type, making it redundant, which is the case in this instance), the type specification is considered noise by some (including myself).
I went to contract for an extremely large multinational treaty organization several years ago... This was their system when I got there. It was a hard sell, but they eventually gave in to Subversion.
Actually thats a good idea. But wouldnt deleted files not actually get deleted? I could probably pretty easily fix that later though. I might do this.
Dropbox.
You would have to look for the shift key being pressed as well as the corresponding ~~numrow~~ key to get the ~~ampersand~~ char you want to stop EDIT: helps to read the entire question
You can do: 1. Copy revision 1. 2. Commit. 3. Delete all versioned files (only keep .svn/.git/.hg etc.). 4. Copy the next revision and repeat (possibly using a script like above). This way you also sync deletions and all file operations should match up.
NOT LIKE FOLDERS HAVE A TIME STAMP, BETTER NAME ALL THE FOLDERS FUCKING NUMBERS
Hmmm... I just tried that (below), for KeyUp and KeyDown, and neither works. I also tried it on Form1, and my datagridview and a textbox. Nothing is working : / if (e.KeyCode == Keys.Shift &amp;&amp; e.KeyCode == Keys.D7) { MessageBox.Show("You have entered an illegal XML symbol. Please remove this and do not use it as it will corrupt the Word document."); }
You should really be escaping the invalid characters or write the XML with a library that does this for you instead of (presumably) cobbling together XML with string concatenation and forbidding arbitrary characters.
This is why in an interview you ask, "What source control system do you use?" If the answer is not Git or Mercurial alarm bells should be ringing.
It's obvious but pertinent to mention, but maybe copy them to another directory to experiment? :D
I hear that - but this program is to help write a 300-page word document, and does a massive Regex.Replace operation. If users put in "I reviewed this &amp; that", I can't just escape the character, or the answer wouldn't make sense. I need the user to put in "I reviewed this and that".
What the actual fuck. I'm so glad I've never wondered into a mess like that. I've seen some piss poor examples of source control, but that's ridiculous.
That's some high tech you've got there, have you considered using a single USB stick that gets passed around the office instead?
You install Dropbox to that USB.
Alright - looks like this is working!: if (e.Shift &amp;&amp; e.KeyCode == Keys.D7)
Go look at the source over at github.com/aspnet and rethink your opinion.
what if: 1. take the oldest folder, commit everything and then delete everything 2. take second oldest folder, overwrite everything and then delete everything not in the second folder and then commit everything and so on would that work? 
[This is all so sudden](https://youtu.be/g4GbZLC0esk) 
&gt; File.Exists Use a [testable filesystem](https://github.com/tathamoddie/System.IO.Abstractions) &gt; Debug.WriteLine That's what logging is for. &gt; Stopwatch.StartNew Yeah... that one's difficult. Maybe get a time machine? I agree with your take on static dependencies.
SVN? TFS?
This, but it's probably easier to just move the `.git` directory around.
I was trying to figure this out. Commit revision 1, push to a remote, go to revision 2, add the remote, fetch, rebase, commit... your way is easier.
He just said he did not want to use WinForms lol
Nice idea, but probably not worth it. Archive the folder-vcs-from hell on read-only media. Start a new, proper repo from the latest source. When doing the initial checkin, do not use your personal account, because you don't want the "blame" function pointing to you for every single line of code in the system that hasn't been changed in the new repo yet.
Maybe this can help you a little. http://www.codeproject.com/Articles/21248/A-Simple-WPF-Explorer-Tree
Because var leverages the type inference feature of C#. It is in line with the principle of DRY (Don't Repeat Yourself). If for example you want a string variable you write: var x = GetValue(); , where GetValue() returns string. But then a few days later you discover that the type of x should actually be int. All you have to do is change the return type of GetValue(). If you would have written string x = GetValue(); You would have to change the return type of GetValue() and the declared type of x, because type of x is not being inferred from the return type of GetValue(). Yes, it's a very small time saving, but it adds up in the long run. 
You say that, but Dropbox does store incremental revisions automatically. On everything. 
At least they upgraded from the month first vcs to the new year first vcs. It's much easier to sort the mess that way. 
the counter-counter argument is ideally I shouldn't care as a consumer of a class if it is a singleton or an instance per web request or whatever. I get IVendorService, do my work and bob's your uncle. If you are concerned about people newing up an instance you could still use the standard pattern and just configure DI to serve that up for the appropriate interface. All the testability, standard GOF pattern and nobody gets shot.
Ah, the locks...
This is absolutely version control, just manual 
Ha ha my comment is victim to the religious wars on source control. Should have known that was going to happen...
&gt; Perforce I feel like the days of paid source control systems should be long over. Pretty close to a solved problem in computer science. Lets move on.
some some some some times times times times redundancy redundancy redundancy redundancy reduces reduces reduces reduces readability readability readability readability.
There was an edge case at work I encountered at work once. We had two COM interfaces, one using v-tables and the other dispatch. The dispatch interface inherited from the v-table interface. If we used var it defaulted to the dispatch interface, so we actually got a performance gain by explicitly using the v-table interface name instead of var. The resulting IL wasn't the same, and there was a difference in performance in this case, but it's a damn weird case.
I'm not sure if this is still 100% up to date, but when i first flipped from vb to c# [this guide was a lifesaver](http://www.harding.edu/fmccown/vbnet_csharp_comparison.html)
Oh my god I didn't even notice that until now
It has a bit of a learning curve but I found it very helpful. 
I've look to IL code, it's the same for both. 
Git has the exact same command line argument. I vaguely recall that there's actually two dates associated with each commit, though. To get them both, you'd have to do extra work. Personally, I probably wouldn't bother doing this. There's no useful edit summary, really, so just make the commit message the folder name (which has the date).
Conflicts? Those shouldn't happen in the case of copied folders. There's no merging here; just flat out different sets of files.
This is a great question. Because SVN sucks. Do you really wanna work with that if you have other options? And did you know some places still use CVS?! Best to make sure they're using Git, Mercurial, or something similar. Preferably one of those two. Anything too exotic is a pain in the ass to deal with whenever you encounter some trouble. I dunno about you guys, but I want to spend the least amount of time wrangling with my VCS. Oh, and TFS is bullshit too.
Me too. The company *really* likes Microsoft products. They use MS versions of just about everything.
I remember those. What the hell was the purpose anyway? Did it not support merging or something?
&gt; my comment is victim to the religious wars on source control Well, I mean, the way you phrased it was just begging for controversy. Complaining you're a victim when you fired the first shots is a little silly, don't you think?
I have this feeling that most of the people that vehemently oppose a very limited form of type inference that is `var`, have never extensively used a language with full Hindley-Milner type inference, but mostly C-family languages. Having that experience makes it way clearer when to use explicit types (e.g. context boundaries, interfaces, top-level functions) for various purposes like full-system clarity and documentation, and that type inference is totally fine everywhere else and helps a lot with code comprehension.
So use the Microsoft version of git.
I take a more nuanced view; you can't claim that it improves readability for everyone in your first point. People are different. It does for me, though. As for the second point, I find that this also improves my readability, since I don't need to bother with a type name I typically don't need anyway. But people differ a lot on this one. 
This is the only sensible response. Run, run as fast as you can. This is mediocrity at its finest.
That brings back bad memories of shouting around the office "who's got file *xyz* checked out? I need to make a change to it"
Excuse me while I just big my own OSS up: https://github.com/ButchersBoy/MaterialDesignInXamlToolkit
Dropbox is actually used for deployments: https://www.troyhunt.com/sharing-files-on-azure-with-deployments/
IF they let you introduce proper version control (and probably lots of other best practices they don't currently use) and IF they will appreciate you for doing that, it might be worth staying. Those are some pretty big ifs, though.
...I am adding this to my list of interview questions. Crazy crazy.
It is syntactic sugar, the complier knows the explicit type under the hood. I just to be annoyed that it is encumbered my readability, but used C# for a while now it actually improves readability.
Tend to agree with the overspecification statement. I see far more value in asserting the exception is of a useful type be it a custom extension of the Extension class or one of the built ins such as NotSupportedException that accurately describes the issue. Naturally the extra thought process testing enables around this can help catch generic thrown exceptions when they could be more specific and helpful. 
We need to see what happens on 1/1/2017!
In my experience most places will give you a programming test, and this will have a larger influence over pay offered however ymmv. If you are confident in your c# then your lack of experience in the language itself but your understanding of OOP, patterns and generally adhering to maintainable code practices will speak more than your lack of professional c# experience. Languages can always be learnt and an employer will always value someone who has a strong understanding of the core principles and has been willing to actually learn a new language, the software world moves fast and sometimes a language isn't the right tool for the job, what you would have exhibited is the ability to pick up a new one and thats worth a lot more imo. If you're worried about not having gone through the deploy process grab yourself a free azure trial account and have a go with that, look into msbuild and CI tools like TC and even better combining it with CD tools like octopus deploy. Once you've got those practices down you'll be able to answer most questions they would ask you about and it'll give you more confidence heading into the interview process. 
I know your pain. The proponents of TFS are no longer with the firm, but changes like this take time.
https://xkcd.com/1597/
[Image](http://imgs.xkcd.com/comics/git.png) [Mobile](https://m.xkcd.com/1597/) **Title:** Git **Title-text:** If that doesn't fix it, git\.txt contains the phone number of a friend of mine who understands git\. Just wait through a few minutes of 'It's really pretty simple, just think of branches as\.\.\.' and eventually you'll learn the commands that will fix everything\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1597#Explanation) **Stats:** This comic has been referenced 99 times, representing 0.0903% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d2v0q52)
At my first job (2011 - 2013), source control was nowhere to be seen. Attempts at telling the boss and owner all the reasons why that was a really bad idea were met with the wonderful mix of ignorance and hostility that perfectly explains why everyone at the office referred to him as "Captain Cock".
More than just saving typing, declaring variables as var lets me get on with defining the expression that represents their value, instead of figuring out the expression, determining the type of the result, and making sure that the declaration matches up to the result. This doesn't just save *typing*, it saves *thinking*, so that I can spend my time and effort on the part of the expression *that matters*, instead of on redundant bookkeeping about implementation types and so forth. It is a *small thing*, but it is a small thing that a programmer may do *many times* over the day. I am not wholly decided on its affect on readability. I generally find it doesn't matter. Either the type is plain from the expression, or it doesn't matter at the callsite, because it's just being passed to another function, where it may be cast or coerced implicitly, anyway. Because var is still *statically typed*, this doesn't introduce the sort of ambiguity that comes with dynamic--*dynamic* typing is a *whole other* kettle of fish. You may find [Eric Lippert's thoughts on var](https://blogs.msdn.microsoft.com/ericlippert/2011/04/20/uses-and-misuses-of-implicit-typing/) to be interesting.
You know what? I prefer that to Git/SVN/TFS - all those have ever done is give me a massive headache and slowed development up to the point where devs are just sitting about watching someone fix up their repos.
No, I mean the os file modified timestamps are all before the folder names timestamps. 
You should consider using a simple text file or PHP script instead of trying to use HEAD requests. For example, let clients request https://example.org/update.php?version=&lt;currentversion&gt; with a simple GET request. The server can then return the latest version + a download link + maybe a checksum in XML or JSON format. Your client can then proceed to download that file using a normal WebClient or HttpWebRequest. Registering a domain probably wouldn't hurt either. You can point them to Amazon, Dropbox or your own server later.
Could be worse: VSS. Actually folders are better than VSS. At least they don't randomly corrupt like VSS does.
In these cases you are paying for hosting not the software. Even with paid solutions you have to still pay for these on top of licensing costs
Begging might be a strong word. At this point I would strongly consider not taking a job that used VSS, SVN, or the mess the OP posted. Not because SVN is bad, but because there are better tools for the job. If my new employer isn't going to let you have the best tools, that is a warning sign for me in the hiring process.
[This won't work?](https://msdn.microsoft.com/en-us/library/ez801hhe%28v=vs.110%29.aspx)
Love F1 transitions. Good stuff man
same here
Try hosting it on AWS S3.
Raising an event invokes a list of delegates. I am not sure what you mean by overriding events. The list of delegates will not change when someone inherits from your class, and invoking that delegate list in your class or in a base class will still function the same. Can you try giving a more concrete example of what you are talking about?
&gt; Oh, and TFS is bullshit too. I don't dislike git, but I'm curious what your beefs with TFS are. If you're working in Visual Studio, I think TFS is the right choice.
When my last company forced me to send zipped exe files by mail to deliver package while I made a Git repo, I decided to start looking for a new job. Few months later I was out of this shit.
When should you not use var? When you want do define a short literal. I am pretty sure you need explicit declarations for unsigned numbers as well. 
The superior branching is the biggest one. The decentralized nature of Git is also appealing. The constant need for a connection slows things down. I've always found support for git issues to be easier to find. I can't immediately recall the various causes of issues in the past, but some have definitely come up. The most obvious I can think of was with regards to the fairly well hidden login credentials. TFS frequently likes to not track new files in an inconsistent matter (some new projects would be included automatically and others weren't). Particularly when changes were made outside of VS. Git seems to work better. I suspect because it's not bundled with an IDE. To be honest, I've had pretty meh experiences with IDE integration of VCS. I much prefer to stick with the command line.
&gt; The constant need for a connection slows things down. This I definitely agree on. You can "go offline" but that makes for a real bitch of time getting back "online" and figuring out what files need to be checked in. &gt; TFS frequently likes to not track new files in an inconsistent matter (some new projects would be included automatically and others weren't). Particularly when changes were made outside of VS. When adding stuff from within VS, I've never had an issue. If you add a file to the file system outside of VS, and don't add it to TFS, that's kind on you, no? You'd have to add that file to your git commit, so why is having to add it to TFS a big deal? It's as easy as "right click, add to source control." &gt; I much prefer to stick with the command line. For some things, I would agree. However, for version control, I really, really like it being integrated into my IDE.
To be fair (to myself, I guess), my git committing is almost always done with `git commit -a` or `git add -A` with a quick glance at the files that got added to make sure that was indeed what I wanted to do. I don't think all IDE integration is bad. I'm a big fan of line markers showing what parts of the file has changed. Never bothered for things like committing, adding, branching, etc. And VS's merge tool is kinda meh.
Overriding the OnPaint event is a perfect example. If you subscribe to OnPaint, you have to subscribe with a sender/args method. If you extend an existing control and override the OnPaint method, you actually override a method that is an overloaded version of the actual event handler - as evidenced by the fact that you can neither subscribe without an ( s , e ) signature, nor override the event handler method with ( s , e ) arguments in the definition.
Ah, okay. I think that makes the tracking of newly added files kinda moot point. As for the merge tool, it's definitely *different* from how git handles things, but I don't know that's it's inferior.
Dude, TFS is easy...
Huh... so really... what exactly do they version control here?
Each handler for the `Paint` event must match the signature of the [`PaintEventHandler`](https://msdn.microsoft.com/en-us/library/system.windows.forms.painteventhandler\(v=vs.110\).aspx) delegate.
An IPFS post/comment in /r/csharp?! I would not have expected that. Is there IPFS client libraries for C#?
OMG trying to resolve merge conflicts in Git sometimes feels like I should bring in a Santeria expert and a few farm animals.
You must be easy to please if that's all you wanted. Their site was so freaking slow it was maddening. It truly looked a relic from days past. Not a great way to showcase your tech to the world when you're not eating your own dogfood. Glad they're putting in all these changes.
Handling threading/mutex/etc is a complicated subject and requires alot of information. Perhaps, if you looked on MSDN or other websites for how to use ThreadPool class, then it'll make it easier. Just be aware though that if you have multiple threads that share/modify data, then a lock system needs to be planned for so the different threads dont overwrite each other's data at the same time
My perception has been that /r/csharp users tend to think webforms are cool still, and server-side rendering with MVC, and etc. IPFS is very new compared to most stuff I see discussed here.
thanks! I'll look into that 
Even if you are trained you might not be taught it. They never even mentioned source control when I was in college. And just about every job I've had has started like OPs post, usually the first thing I do after being hired is set the company up with some form of source control.
Spot the newbie! 
I've used the [PetaPoco](http://www.toptensoftware.com/petapoco/) miniORM successfully with SQL 2000. Works great. You just need a few decorated objects: [PetaPoco.TableName("Call")] [PetaPoco.PrimaryKey("Call_ID")] public partial class Call { [PetaPoco.Column("Call_ID")] public string CallId { get; set; } [PetaPoco.Column("CallNumber")] public string Callnumber { get; set; } [PetaPoco.Column("Status")] public string Status { get; set; } [PetaPoco.Column("AddeDateTime")] public DateTime Addeddatetime { get; set; } [PetaPoco.Column("AddedbByUser")] public string Addedbyuser { get; set; } [PetaPoco.Column("Summary")] public string Summary { get; set; } [PetaPoco.Column("PulledFromDBDateTime")] public DateTime Pulledfromdbdatetime { get; set; } } and can then get the whole table from the DB with a PetaPoco.Database.Fetch&lt;Call&gt; or .Query&lt;Call&gt;... 
I don't disagree - but I don't even know what post-entry validation means in terms of implementation - I'm flying by the seat of my pants here - programming is deeply challenging to me. I'm just amazed that anything is working at all!
What's so complicated about it?
300 page audit, wow that's crazy. Mind sharing what kind of audit this is? Anyway, I would use a small database like SQLite to store the questions and answers. You can then output/print the report as needed. As for updated questions I would look for a way to parse and import the questions into the DB and perhaps version the questions. 
Have you looked into using a timer for this? The basic gist of it is that you create the timer and handle the OnElapsed event, which would handle your resource allocation. This might even allow you to stagger resources, 1 timer for x every 1 second, 1 timer for Y every 30 seconds, etc... This should already be handled for you regardless of the key wait... 
Removed: Rule 8.
This is how most games do it - they check to see if a key is available while inside their game loop.
Haven't used it in maybe 10 years. Found it pretty much impossible to only use a little bit of it - the dependencies meant all of it was going to get dragged in (they may have fixed that since then). Even so, there's nlog for logging, dapper for data access, etc. these days. 
There is a special bread of enterprise senior .net developers that learned that and use nothing but. Same guys who use reflection where genetics would suffice and bring up how to avoid SQL injection attacks using sqlparams in any conversation about data access. 
Burn it with fire
I'd recommend using a `Stopwatch` for calculating time deltas. Using `DateTime` for stuff like this is indeed problematic, and using `DateTime.Now` instead of `UtcNow`is even more so. Imagine what happens when the game is running during the switch between summer and winter time for example.
Just a note, you have this in your code: while (game = true) This condition will **always** evaluate to `true`. You're not doing a comparison here, you're doing an assignment - you always assign `true` to `game`, which **then** gets evaluated to `true`.
I've seen it before, but it was really designed for early versions of .net. I think you're better off using alternative software. EntLib hasn't been updated in a very long time and most of its functionality is no longer meaningful. I see no reason to use it in newer codebases unless you're making something for .net 1 or 2 for some reason. 
This is very cool. I built a sql IDE for Excel recently (not going to plug it further here :-)), so I find this particularly interesting. I also used avalonedit but had to roll my own parser for squigglies, autocomplete, star expansion etc. I don't have the bulb or the function insights for overloads like I see you do. Can't wait to dig into your code and see if I can steal some ideas :-) 
The class you're looking for is cryptostream. It's a little counterintuitive to use, but once you've worked it out it's about eight lines to do the whole thing. 
I am currently looking at a block of code that looks like this // Create an MD5 hash digest of a file public string MD5HashFile(string fn) { byte[] hash = MD5.Create().ComputeHash(File.ReadAllBytes(fn)); return BitConverter.ToString(hash).Replace("-", ""); } The thing is I have no idea on how to implement that to my scan button
Fair question. Basically the advantage is a lot less code. Compare the two scenarios. **Scenario A - using some sort of settings manager class (or a .settings file):** public MainWindow() { InitializeComponent(); this.Left = MySettings.Default.MainWindowLeft; this.Top = MySettings.Default.MainWindowTop; this.Width = MySettings.Default.MainWindowWidth; this.Height = MySettings.Default.MainWindowHeight; this.WindowState = MySettings.Default.MainWindowWindowState; } protected override void OnClosed(EventArgs e) { MySettings.Default.MainWindowLeft = this.Left; MySettings.Default.MainWindowTop = this.Top; MySettings.Default.MainWindowWidth = this.Width; MySettings.Default.MainWindowHeight = this.Height; MySettings.Default.MainWindowWindowState = this.WindowState; MySettings.Default.Save(); base.OnClosed(e); } **Scenario B - using Jot:** public MainWindow() { InitializeComponent(); Services.Tracker.Configure(this)//get or create a TrackingConfiguration object for the window .IdentifyAs("MyMainWindow")//arbitrary unique string to identify the target object .AddProperties&lt;MainWindow&gt;(w =&gt; w.Height, w =&gt; w.Width, w =&gt; w.Left, w =&gt; w.Top, w =&gt; w.WindowState) .RegisterPersistTrigger(nameof(Closed))//window.Closed will trigger persisting data .Apply();//apply any previous state straight away } If you count the number of times you see the words Top/Left/Width/Height in each example: in example A you see each of them **four times**, in example B just **once**. That's four times you need to get the property right while typing it. Now suppose you have 10 resizable/movable UI elements in your application; you get a mess of properties in your manager class and it's difficult to find the property you're searching for. When integrated into your IOC container, Jot can do something even better: you can hook into the container with a few lines of code (the UnityIOC hook is already in the library) so that just after the container resolves an object, the hook automatically applies tracking to the object. The result is you can make any property persistent just by slapping a [Trackable] attribute on it. That's all you need to do to make it survive an application shutdown. Not sure if I'm explaining this part very well, but there's a demo project in the repo that shows it off, it's really neat IMHO, I'm very proud of that little feature (the integration with IOC).
Hi there. I have also recently desired easier settings. First and foremost I love a lot about your project, but I have a few comments. I am a noob so take them with a grain of salt. Personally, I feel like the interface and method chaining/attribute use is just all a little heavy. I'd like to see some more plain/light weight options :). I prefer to use as much of the built-in stuff as possible. I actually wrote a little settings lib recently too, here is an example of how one might save ui settings with it. public class MyAppSettings { public static readonly MyAppSettings Default = new MyAppSettings { Location = new Point(500, 500), Title = "MyApp" }; public string Title { get; set; } public Point Location { get; set; } } internal static class Program { public static Settings&lt;MyAppSettings&gt; Settings { get; set; } [STAThread] public static void Main() { Settings = new JsonSettings&lt;MyAppSettings&gt;(MyAppSettings.Default); var form = new Form1(); form.Load += FormOnLoad; form.Closing += FormOnClosing; // .. } private static void FormOnClosing(object sender, CancelEventArgs cancelEventArgs) { var window = (Form1) sender; Settings.Current.Location = window.Location; Settings.Current.Title = window.Text; Settings.Save(); } private static void FormOnLoad(object sender, EventArgs eventArgs) { Settings.Load(); var window = (Form1) sender; window.Location = Settings.Current.Location; window.Text = Settings.Current.Title; } } Your library is much cleaner than mine and more supportive, but if it is of any use feel free to peek at mine and take any ideas you find useful. https://github.com/lolp1/Settings.NET
I don't like using IndexOf because it is expensive.
 var list = new List&lt;string&gt;(); list.Add("Alan"); list.Add("bob"); list.Add("CHRIS"); Console.WriteLine("Who are you looking for?"); var keyword = Console.ReadLine(); foreach (var item in list) { if (string.Equals(item, keyword, StringComparison.CurrentCultureIgnoreCase)) { Console.WriteLine(keyword + " was found : " + item); } }
 private void scanButton_Click(object sender, EventArgs e) { txtHash.Text = MD5HashFile(txtFilePath.Text); }
Oh, how would i go with that method? How would I create a cryptostream instead of what I have now? 
That seems very simple, what is the pro's and cons about using that method?
Found a solution that suited my needs, Thanks so much for the help. List&lt;string&gt; posts = new List&lt;string&gt;(); //List that stores every post string[] post = new String[2]; //Title and Content string keyWord; Console.WriteLine("\nSearch for: "); searchKey = Console.ReadLine(); foreach (string result in posts.Where(log =&gt; log.ToUpper().Contains(keyWord.ToUpper()))) { Console.WriteLine("\n{0}", result); } The code compares in upper case, but displays everything exactly like it was typed in the first place.
I always treated it more as an R&amp;R project. A place to see interesting ideas that I would then implement myself. I don't think I've every actually used their code.
Sometimes I have to go the other direction and use `dynamic`. It's weird, but some COM libraries will forget to include important methods such as Save on their static interface.
Its not failed, far from it - I am just wanting to excel that's all man. Was hoping the community would be good enough to point me in the right direction. 
Yes, we ran into some issues with it at work, where someone was trying to be clever and use indexOf, turns out it slowed down the feature overall enough for us and the clients to notice that something had changed. I think we found that it was costing us around 25-30% speediness. The other culprit was the over use of LINQ. Both are pretty fast, but in some cases, particularly ours they were not fast enough.
http://stackoverflow.com/questions/2124468/possible-to-calculate-md5-or-other-hash-with-buffered-reads That question is about something different, but your answer is actually the first block of code in the question.
Look like you have four clear objectives here:- 1. Reading files 2. Putting the data to graphs 3. Making that graph data selectable 4. Calculating averages Each of those can be further reduced down into separate goals. No one here is going to do the work for you.
Thanks for the reply, Sorry I wasn't specific enough. What I was looking more for was advice calculating Interval detection in C# as the math side is my weak point and its killing me. "An interval is a period of work in a workout followed by a period of rest. For example 5 minutes and 300 watts followed by 5 minutes of recovery at &lt;200 watts times 5. Your software should be able to automatically detect the periods of work (the high power and they may be different durations) and calculate averages for each period detected. Interval sessions tend to be done on a static or turbo trainer and are easily controllable because there is no wind or changing road conditions, so the data should be quite clear. You may have to have the client explain this to you."
Sounds like you could write this out in VB. It's build right onto Excell and provides an easy way to read and color the cells.
IndexOf() will be faster than converting the content and keyword to uppercase before comparison... In fact, unless you want to write your own case-insensitive Boyer-Moore search; IndexOf() is probably your best bet. I've seen LINQ slow down stuff when misused; but it's the first time I've seen someone complain about IndexOf(). Are you sure it wasn't something else in the code? 
I did not clearly understand the reason behind your project. It seems a lot better now and is not really comparable to why I wrote mine. I wanted a way to store settings beyond my app settings easily and get the values. Something like this. var settings = new JsonSettings&lt;PathingProfile(new PathingProfile { .. }); settings.Save(); public class PathingProfile { public Vector3 StartLocation { get; set; } public List&lt;Vector3&gt; Waypoints { get; set; } public List&lt;Vector3&gt; BlacklistedWaypoints { get; set; } public string ProfileName { get; set; } } I agree, the default app settings are kind of meh and yours looks pretty sweet. Will try it out :)
Databases can handle things like multiple users (or processes or whatever) accessing data at the same time, grouping complex operations into isolated transactions to ensure that they either all succeed or are rolled back to not leave behind partially edited data, efficiently querying data without holding all of it in memory at once, making the database file fault tolerant in case of crashes or other errors, and so on. For basic, single user and single-threaded applications using an object graph or list or whatever and serializing it at the start and end of the application may work fine, but what happens in a year when your data contains millions of objects and has grown to be a few gigabytes in size, or the requirements change and two people need to work on the data at the same time? It always depends on the project, of course. Not everything *needs* to use a database, and databases don't always make things easier.
Does ReSharper suggest var when the type is not mentioned on the right side? I don't use ReSharper and I write my code with var when the type is mentioned on the right side and with type name if it is not.
Sure, there are various ways to do this. You can set the initial value to true and only change it in the loop if it's false. If you add a `break;` to the `else`, the loop won't continue and the value won't be set back to true by other iterations. If you set the initial value of `mybool` to true, you can use boolean logic with `mybool &amp;= vecs[i].z &gt; 1)`, basically saying that `mybool` should be true if both the condition matches *and* `mybool` was already true. You can also use LINQ: `bool mybool = vecs.All(vec =&gt; vec.z &gt; 1);`
Linq would probably be best but if you are more comfortable with loops the below should work by setting it to true by default and then changing it to false if any of the checks fail. bool mybool = true; for (int i = 0; i &lt; vecs.Count; i++) if (vecs[i].z &lt;= 1) mybool = false;
If you want to avoid the Linq route that everyone has given you, here's a vanilla C# alternative: bool mybool = true; for (int i = 0; i &lt; vecs.Count; i++) { mybool &amp;= (vecs[i].z &gt; 1); } A `foreach` would work too. \* Just saw that /u/tweq said this too. *Side note*: The purpose of a loop like this, without a break, is most likely if you have other operations you want to do on each list item at the same time. I.e. don't loop over the collection to see if any `z &gt; 1`, then again to see if ... bool mybool = true; foreach (var vector in vecs) { // Other operations ... mybool &amp;= (vector.z &gt; 1); // Other operations ... } 
For curiosity's sake, is there any reason to use the bitwise operator?
Ahh, I get it. I was thinking you had a `break` in there. My mistake.
&gt; You can also use LINQ: bool mybool = vecs.All(vec =&gt; vec.z &gt; 1); This is the best answer.
I love using &amp;=. It makes me feel like a wizard. But yeah, in this case .All() is the best way to go.
Detail to be aware of with regards to LINQ's All() function: All() is true for an empty list. Enumerable.Empty&lt;int&gt;.All(x =&gt; 1 == 0) // true! Which is maybe not what you're expecting. LINQ's All() function is apparently implemented something like this: public static bool All&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; p) { foreach (var x in source) { if (!p(x)) { return false; } } return true; } (Correspondingly, Any() is something like public static bool Any&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; p) { foreach (var x in source) { if (p(x)) { return true; } } return false; } This means that Any() is false for an empty collection. ~~I fully expect that All() is implemented as !Any() or vice-versa, but I'm too lazy to check.~~ Edit: disregard that, I can't think after 11pm, apparently) Anyway, you can still get what you've outlined above a couple different ways with LINQ. You'll just want to check that vecs isn't empty, which you can do with Any(): x.Any() &amp;&amp; x.All(p) // x is not empty AND everything in x satisfies p
It's the same thing, `All` will stop after the first element that doesn't fulfill the condition. Inverting the condition and then inverting the result again just makes it more confusing.
You'll be using a data grid to display the results or a list view but let's go with the data grid. The output in your moq up doesn't seem to mirror the data rows and that's fine, just keep that in mind for now. When you read the excel file you'll want to create a class that represents your data record and I'll assume you already have that. Let's call it DataRecord. Now in order to create the grid you want, you need to have a wrapper class that displays the details you're looking for. DataRecordView That class will hold the Datarecord and the validation results that the grid is displaying. Each "column" will be a property on the DRV class. Look into INotifyPropertyChanged interface if you're not familiar with it as this will allow any validate changes in these properties to propagate to the UI. Create an observable collection that will hold all your DataRecordViews, and bind that to the grid. Now how do you color the grid? There's a could of ways to do if. Their not terrible but can be lengthy. The first would simply be a xaml template that handles each state of validation. While that works it means that a lot of work is handled in the markup, which some ppl like but to me the view should be as simple as possible. That leads to the next suggestion which would be to use a color to enum/value converter. WFP value converters allow you to take the value of a property and convert it to another more useful type. In this case you want to convert the validation state to a more useful type. 
LINQ is my preferred method but as I stated in another comment be mindful when using All vs. Any if you may have an empty collection. var ints = new int[0]; ints.All(i =&gt; i &gt; 0); // true ints.Any(i =&gt; i &gt; 0); // false
If I understand your question correctly, this is a new UI debugging feature for WPF with Visual Studio 2015 Update 2. You can disable it by following the instructions here: http://stackoverflow.com/questions/36618494/disable-visual-studio-2015-extra-debug-option
Thanks! I found it helpful but also distracting when I just wanna look at my app. Wish there was a keyboard toggle for it or at least the ability to move it.
Yeah read that as well. Unfortunately since I'm on a single monitor, it's a hassle to alt tab just to toggle. Microsoft please!
The right way to do it would be to double click the created xsd file and add commands to your table adapters. https://msdn.microsoft.com/en-us/library/ms171919.aspx
Okay, looks like I've got some research to do. Haha. Every time I seem to get a grasp on things I have to introduce a new vast element to do what I want to do. Blah. I'll keep you posted! Thanks for your help!
Crapola! :( I think something to do with the installer
howd you get a single exe installer
idk it was on my work pc, i didnt bring it home. also what it might be is some shit is blocked by our network, are you accessing a server or something
 bool mybool = true; for (int i = 0; i &lt; vecs.Count &amp;&amp; mybool ; i++) { mybool &amp;= (vecs[i].z &gt; 1); } This make it even faster, as it will quit form the loop as soon as it change to false - no need to check other values. 
well it installed, i had to uninstall it so id think it worked
Add a break to the else
I'm just curious - how does your code not throw an error when you try to add post into the posts list? post is a string array yet posts can only contains strings. 
It is also the least performant by a factor of 20-30. I used to love linq but have had to move away from it recently due to performance issues.
In 99% of cases the readability and brevity improvement of a LINQ one-liner like that will be more important than whatever performance loss there is. I doubt OP is writing a high-performance algorithm of some kind and even if he was I doubt that would be a bottleneck.
Maybe for you but not for me. It became a performance bottleneck about 80% of the time and after profiling had to be removed for a non linq variant.
 List&lt;string&gt; myList = new List&lt;string(); // Value that creates the list that we'll store the arrays in string[] myArray = new String[2]; // Array that will store user values Console.WriteLine("Add the first user value: "); string userValue1 = Console.ReadLine(); myArray[0] = userValue1; // The first spot in the array (index 0) get the same value as userValue1 Console.WriteLine("Add the second user value: "); string userValue2 = Console.ReadLine(); myArray[1] = userValue2; // The second spot in the array (index 1) get the same value as userValue2 myList.Add("\n" + myArray[0] + "\n" + myArray[1]); With the add method your array element gets stored in the list, "\n" ain't really needed but it looks cleaner with a row break if you wanna write your saved array out later
[For anyone else who always messes up connection strings](https://www.connectionstrings.com/)
You don't need to add a break, but you want to. Once a single check evaluates to false, there's no reason to continue running the loop
There isn't a way to do it with a `foreach` loop because each iteration makes a check that `myList` hasn't changed. However, you can achieve this with a standard `for` loop, you'll just want to iterate _backwards_ because otherwise it's easy to skip entries as you remove them (because you shift their indexes). You can do it scanning forwards through the list as well, it just makes the code a bit more complicated. for (int i = myList.Count - 1; i &gt;= 0; i--) { var entry = myList[i]; if (someCondition) myList.RemoveAt(i); }
You might want to read up on MD5's weaknesses and programs like "HashClash"... basically, any "bad" file can be modified so that it will MD5 hash to the same hash as a good file.
Because you say so
I think using a counter would work as well, if it matches you add one to the counter, and after the loop you check if the counter == vecs.Count. If it does, then set mybool to true, else set it to false.
You can use linq. Var newlist = list.except(a =&gt; a == condition) Excuse the casing. On mobile. 
`.Any(_ =&gt; true)` will not return true for an empty list. \* And where I work, you would be murdered in code review for using `_` as your parameter name. 
What are the *specific* performance issues you're seeing? `All()` and `Any()` will both break as soon as their conditions are `false` or `true`, respectively, without continuing to loop, which seems to be the most common performance optimization in this thread.
Garbage generation? That implies strongly that your lambda methods were creating new instances inside a loop, either doing some kind of string manipulation, which are immutable, or pass by value instead of pass by reference. 
Linq seems to generate loads of garbage all over the place actually. Especially when working with dictionaries with non trivial keys. We use reference passing whenever possible and never generate/manipulate strings at runtime. I should point out that I still love linq and we use it extensively in some of our tools.
It's not uncommon in more functional languages to use _ for an unused lambda argument. 
Go with signalR it can handle the all/one/group situations. But you have to do a bit of leg work in order to do it. In your "hub" override the connection and disconnection methods. Create a client class that stores the connection Id as well as the name and what ever else you think you need maybe state (away,napping,here...) When a client connects add it to a client collection. And when they depart remove them. Now channel chat is simple it's just anyone connected to the channel that's simple. The challenge is private messaging. You can treats this two ways either as private channels or by whispers. With the whisper you have to parse the inbound message and look for the command and the target, once you have a valid target you can send a direct message to that user by looking up their user name in the clients collection. I'm on my way out, when I get back I have a sample I'll push to github that shows exactly how this is done... 
&gt; Your Any() code should have if (p(x)) instead of if (!px)). And All() is not the opposite of Any(). Both of the following will return true: You are correct. I have updated my comment. As regards needing to use Any() and All() together, I've seen it pop up with requirements written by business users. Normal people don't think in terms of formal logic. (Whether or not they *should* is quite beyond the scope of this topic.) Have also gotten to read requirements use 'and' when they mean 'or' and vice-versa for the same reason. Edit: missed word, added some quotes for clarification.
From memory the code generated for the xbox 360 is not the same *and* is less efficient than that generated for the pc. Things that run quite well on the PC can run really badly on the Xbox 360 and the only way to tell is to actually profile. Even simple things like overloaded operators on a vector3 can have a large difference. If you're writing for a game it can matter a lot. 
LINQ tends to generate lots of avoidable garbage just by virtue of creating an enumerator for the source, returning an enumerable for most operations, the delegates for predicates and so on, without even getting started the buffers and other allocations that their actual function requires. Even a method as simple as `All`/ `Any` has to allocate an `IEnumerator&lt;T&gt;` that a `for` loop wouldn't. Sure, one object more or less doesn't matter most of the time, but when you call this method in a tight loop suddenly you leave a million objects for the GC to clean up.
If you want the application to work on Windows 7 or earlier and want to use C# with the full desktop .NET Framework then I'd recommend WPF (Window Presentation Foundation). If you and your target users will only be using the application on Windows 8-10 then you could still use WPF, or go with the new UWP (Universal Windows Platform). This would allow you to also easily target mobile windows devices and the xbox in case you'd ever want to do so. UWP does however use a subset of the full .NET framework (which WPF has access to), so you may find you are missing some required features. You will also find far fewer supporting libraries and google results for helping you through problems. WPF has been around since 2006 and UWP was only introduced in 2015 (although these apps were previously known and developed on Windows 8 as Windows RT apps). Whichever one you choose won't set you down a limited path, so I wouldn't worry about that. With either you will still be learning Visual Studio (assuming you choose that as your IDE), the .NET framework (the APIs are largely the same, some namespaces are a bit different), C#, and the surrounding Windows development environment as a whole.
&gt; `.Any(_ =&gt; true)` will not return true for an empty list. I was showing that Any() and All() are not opposites by showing one case where they return the same result. In my example, the lists are not empty.
&gt;Oh, and TFS is bullshit too. It's alright. It's about as good as SVN, which puts it behind git. One of my coworkers had his workspaces set up weird and so when he went to Pending Changes, it showed everything across all of the projects (which makes sense but if you didn't know that before hand, you have to go remap all of that shit). There were some other gotchas too. It just isn't a nice UI/workflow for a VCS.
What is this magic word of power called LINQ?! I can define a variable as the function I want to test? I googled it but I get a lot of complex explanations without clear examples. Please point me to a simple tutorial, please! Thank you.
Thanks for reading. :)
Correct. Have I made a mistake somewhere? Why did you point this out?
Ha! It is not a comparison thing, but rather a progression i.e. this leads (&gt;) to this. Sorry for the confusion. The left is the best one. :)
Hey, thanks man. You can use whatever you like from the provided documents. I also uploaded the word file for people to edit. As for the changes, what are you specifically talking about? Where are these located?
First document, the cheat sheet? In the lower left. Edit: c# classes
Ah, I see. Thanks for the clarification. I will try and update it. :)
Yeah, will try that, was hoping for less work with xaml
Pretty neat! Thanks for the response!
Well sending the password more than once isn't going to help. I would try to encode the password using Ascii, UTC8 and UTC16. I would also vary the line ending for each between "\n", "\r" and "\r\n". If the MIA programmer's code is .NET, I'd use a program like dotPeek to decompile it and see how he does it. You might try wrapping the stream in something like a TextWriter (or the equivalent for your situation) which would negotiate the translation. You could also inspect the connection objects for some insight into what kind of format the server expects. You can also try the telnet command in windows (must be installed) or linux to see if you can manually connect and then use those tools to inspect the connection to see what they're sending, perhaps using a packet sniffer. Then compare that to what you're sending to discover the differences
 bool result = true; for (int i = 0; i &lt; vecs.Count &amp;&amp; result; i++) { result &amp;= test(vecs[i]); }
4.5.
Glad you like it man. No need for donations. Just enjoy it. If you really insist, I PMed you my details. lol
Thanks!
Sorry but if you're a professional anything, someone asking you to do professional work for free should be a giant red alarm in your head. 
No problem man, enjoy that shit. lol
If removing things is something you do commonly, and you don't access items via the index, a linked list might be a better idea since removing things is O(1) rather then O(n)
**Here is the content of the document.** I am a self taught developer and these are my notes, taken over the course of several years and written in a "human" way. I constantly go back to them to revise certain concepts. https://drive.google.com/folderview?id=0BztLOG55I2FVT0NNLTVXM1JOYlk&amp;usp=sharing **I highly advise you watch the tutorials** because they are fucking amazing. **Simon Allardice and [Mosh Hamedani](http://programmingwithmosh.com/)** are incredible teachers. Included inside: - Programming Basics - [Foundations of Programming: Fundamentals - Simon Allardice](https://www.lynda.com/JavaScript-tutorials/Foundations-of-Programming-Fundamentals/83603-2.html) - C# Basics - [Up and Running with C# - Gerry O'Brien](https://www.lynda.com/C-tutorials/Up-Running-C/164452-2.html) - Object Oriented Design - [Foundations of Programming: Object-Oriented Design - Simon Allardice](https://www.lynda.com/Java-tutorials/Foundations-Programming-Object-Oriented-Design/96949-2.html) - Data Structures - [Foundations of Programming: Data Structures - Simon Allardice](https://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Data-Structures/149042-2.html) - Databases - [Foundations of Programming: Databases - Simon Allardice](https://www.lynda.com/Access-tutorials/Foundations-Programming-Databases/412845-2.html) - C# WPF/XAML - [Enterprise WPF with XAML and C# from Scratch - Jesse Liberty](https://www.pluralsight.com/courses/enterprise-wpf-xaml-csharp-from-scratch) - WPF MVVM - Some articles... - Design Patterns - [Foundations of Programming: Design Patterns - Elisabeth Robson and Eric Freeman](https://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Design-Patterns/135365-2.html) - Angular JS 1 - [Shaping up with Angular.js](https://www.codeschool.com/courses/shaping-up-with-angular-js) - [Building a Site with AngularJS and PHP - Christian Wenz](https://www.pluralsight.com/courses/angularjs-php-building-site) - Angular JS 2 - [Angular 2 with TypeScript for Beginners: The Pragmatic Guide - Mosh Hamedani ](https://www.udemy.com/angular-2-tutorial-for-beginners/) - PHP PDO - [Accessing Databases with Object-Oriented PHP - David Powers](https://www.lynda.com/PHP-tutorials/Accessing-Databases-Object-Oriented-PHP/169106-2.html) - RESTful API - Some articles... The cheat sheets are about: - C# getters and setters i.e. what does **{ get; set; }** replace. - Strategy (Composition) and Observer Pattern. The notes are a bit chaotic because they were intended only for my own reading. I do plan to tidy them up a bit, although the order does reflect my progression and interests. I hope they are of some help.
Thanks bro 
Ascii is a 1 byte per character encoding, UTF8 is 1 byte or 2 bytes while UTF16 is always 2 bytes. If it wants an Ascii password and you're sending UTF16 you'll be sending twice as many bytes as you want. 
You are right. MS has a different casing convention than Java. Even tools like reaharper wants you to follow Java casing style. If one follows a consistent style across the project/solution I would not bother to change it. After all its a convention.
I tend to find the only time merge conflicts are painful is when two+ developers are working on large Jiras which completly overlap on each other. In which case i tend to blame the sprint planning more than anything... the rest of the time, git mergetool, git rebase --continue isnt that bad.
If only the interns and fresh grads that I regularly interview had copies of this (and read them), my job would be much easier.
Damn, is it that bad? I had a really hard time finding a job as a developer. I ended up giving up because I kept getting low-balled and I am simply unable to start from the bottom. I think I have more knowledge than a junior developer, but companies don't want to risk it. I ended up realizing I don't want to program for others. I want to build my own things.
&gt; Even tools like reaharper wants you to follow Java casing style. Uhm, no, it doesn't. 1. It depends on your settings 2. The default uses PascalCase for classes, methods and public fields/properties. Only private fields and local variables use camelCase.
I'm not sure if there is a *simple* tutorial on LINQ and first-class functions. LINQ is a combination of extension functions for the IEnumerable&lt;T&gt; interface, and query syntax for using same. Not all of the extension functions are wrapped up by the query syntax, and you don't need to use the query syntax to use the extension functions. Storing functions in variables pretty much what what it says: functions are first-class values in C#, so you can assign a function to a variable, and then use the variable as a function. private static int DoTheThing(int i) { /* ... */ } // delegate type delegate int DoThingsDelegate(int i); /* Meanwhile, back at the Main() */ DoThingsDelegate f = DoTheThing; int x = doThings(y); In C#-ese, these are known as *delegates*, and there are some generic types (Func and Action, principally) that wrap up the delegate syntax for common use. There is also an alternate syntax for defining functions that is called 'lambda syntax'--this mostly just strips out some obnoxious boilerplate in the older style of delegate definition: /* Func&lt;int, int&gt; describes a function that takes an int, and returns an int. The last type argument to Func is *always* the return type: if there is only type argument, the function has no arguments! Action&lt;T&gt; is similar, but the return type of an Action is always void. */ Func&lt;int, int&gt; f = DoTheThing; // delegate syntax for anonymous function DoThingsDelegate g = delegate(int i) { return i * i; }; // lambda syntax for the same thing DoThingsDelegate h = i =&gt; i * i; There *is* some additional overhead with this sort of thing, but it's probably not worth optimizing out in most situations. For details, you can Google up the MSDN docs on Func&lt;T&gt;, Action&lt;T&gt;, delegates, and LINQ.
Except() takes a collection of elements to exclude and, optionally, an equality comparer. Probably something like var newList = list.Where(x =&gt; !*someCondition*).ToList();
Have you tried to read error message?
Actually, they don't HAVE to be overwritten in inherited classes if the inherited class is also abstract. Only none abstract classes must override it :)
Here you go Sorry for the delay... https://github.com/jcanady20/Chat Its not perfect by any means... 
Seriously? Fucking use WPF.
Stop using a shitty database. Postgres &gt; MariaDB &gt; MySQL. or MSSQL.
There are a lot of options available. Have you considered NoSql solutions like Azure DocumentDb? While possibly a bit more boring than hooking up a database, the following are some good things to have in place that will make the transition from Winforms to WPF and MVVM easier. * Is it encapsulated correctly? * Are your concrete classes well defined? Based on solid contracts? * Is it modular and loosely coupled, or tightly coupled? Now that you've learnt a lot it's worth looking at a refactor based on the above, which for me is easier in your current app, before you switch the WPF.
Interesting way to do it, I usally do it with a regular while-loop (and an else to the if-statement that increase the index).
As soon as the app starts up, the installer is off looking to see if an update is available...if you get a call-stack from that error when you back at work I'd love a look at it...
Thanks, but I as I have written in the post, I know that I can do that I was wondering what happens if I do this in Class Another: class Another { public static Random RandomGenerator = Main.RandomGenerator; void SomeOtherMethod() { // Use the Random object from the Main class int anotherRandInt = RandomGenerator.Next(); } } does it then save the refrence, is it equal to your code?
Cool! Please post the link. :)
Classes (a.k.a. reference types) are passed around as references to the same data in memory, assigning `Class2.rand = Class1.rand` will cause both variables to reference the same instance of the `Random` class. So yes, this will work as you want it to. There are also value types (structs) which behave differently, but this probably shouldn't be a concern to you right now.
Epic!! thanks dude
Happy that it helped. :)
Winforms isn't going anywhere, but don't let that be a reason to not use WPF. WPF encourages and benefits greatly from a much cleaner separation of concerns. Once you get to terms with the MVVM pattern, and the UI flexibility that XAML offers, the time spent learning it will be paid off in dividends.
It still baffles me why developers still use WinForms, except for maintaining legacy applications. As a good developer, it's always possible to separate one's concerns regardless of the technology; it's just that WPF lends itself better to solving that problem. Plus XAML is so damn flexible.
Thank you a ton for sharing these. I used to keep a rolling text file of my "memory" - which was a cookbook for everything I was doing and tricks I've learned along the way and lost it about 3 years ago. This is an excellent jumpstart. Thanks again. 
&gt; `internal` - can be accessed from anywhere inside the same assembly. This is not entirely true since you're forgetting about something important. `internal` is equivalent to `public` for the same assembly **and** every other assembly that is configured via the [InternalsVisibleToAttribute](https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute%28v=vs.110%29.aspx). To every other assembly it's like `private`.
Damn, such a shame you lost them. It would have been cool to read them. Glad you liked mine. :)
That's true, but probably not something you want beginners messing with. :) And since you control what assemblies you expose your internal items to, the simple case works as a general rule.
It will work as you intend. You'd probably be better off over the long haul if you passed the object to the constructors of each class, though.
You need the OnStart event as this is what the service host calls to begin the service. Move all your console code into another assembly and within the OnStart() method create a new instance of your Program class. Then call a method on the Program classes (like Start() or something) to execute your service code. Basically do this: 1. Convert your console app to a class library. Refactor your classes so they make sense in the context of a windows service 2. Create a new Windows Service project in the solution and add a reference to your console class library 3. In the OnStart() event of the windows service, create a new instance of your console app class and run it's main method (perhaps Start() or whatever you want to call it) 4. The Start() method should return something, perhaps a bool to that the service can read to know if it's complete or not. 
Wrap it with topshelf.
Thank you. Great Resource!
I do this by checking Environment.UserInteractive, using ServiceBase if it's not, using a "Start" method to call the OnStart method if it is. Example here: https://github.com/mgroves/EmpiriCall/blob/master/EmpiriCall.Data.RabbitMQ.Consumer/Program.cs and here https://github.com/mgroves/EmpiriCall/blob/master/EmpiriCall.Data.RabbitMQ.Consumer/ConsumerService.cs
Hey, thanks for the effort! I will follow up with the google searches you suggested.
Here's the template for a basic Windows service. You'll have to either write an installer package or manually install it via CLI: static class Program { /// &lt;summary&gt; /// The main entry point for the application. /// &lt;/summary&gt; static void Main() { ServiceBase[] ServicesToRun; ServicesToRun = new ServiceBase[] { new MyService(60000) }; ServiceBase.Run(ServicesToRun); } } namespace MyService { public partial class MyService : ServiceBase { private readonly int _TimerTicks; public MyService(int ticks) { InitializeComponent(); _TimerTicks = ticks; } protected override void OnStart(string[] args) { // Update the service state to Start Pending. var serviceStatus = new ServiceStatus { dwCurrentState = ServiceState.ServiceStartPending, dwWaitHint = 100000 }; SetServiceStatus(ServiceHandle, ref serviceStatus); // Set up a timer to trigger based on the given tickes interval. var timer = new Timer {Interval = _TimerTicks}; timer.Elapsed += OnTimer; timer.Start(); // Update the service state to Running. serviceStatus.dwCurrentState = ServiceState.ServiceRunning; SetServiceStatus(ServiceHandle, ref serviceStatus); base.OnStart(args); } protected override void OnStop() { // Update the service state to Stop Pending. var serviceStatus = new ServiceStatus { dwCurrentState = ServiceState.ServiceStopPending, dwWaitHint = 100000 }; SetServiceStatus(ServiceHandle, ref serviceStatus); // Update the service state to Stopped. serviceStatus.dwCurrentState = ServiceState.ServiceStopped; SetServiceStatus(ServiceHandle, ref serviceStatus); base.OnStop(); } public void OnTimer(object sender, ElapsedEventArgs args) { if (backgroundWorker1.IsBusy == false) backgroundWorker1.RunWorkerAsync(); } [DllImport("advapi32.dll", SetLastError = true)] private static extern bool SetServiceStatus(IntPtr handle, ref ServiceStatus serviceStatus); private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e) { // Call your code here } } public enum ServiceState { ServiceStopped = 0x00000001, ServiceStartPending = 0x00000002, ServiceStopPending = 0x00000003, ServiceRunning = 0x00000004, ServiceContinuePending = 0x00000005, ServicePausePending = 0x00000006, ServicePaused = 0x00000007, } [StructLayout(LayoutKind.Sequential)] public struct ServiceStatus { public long dwServiceType; public ServiceState dwCurrentState; public long dwControlsAccepted; public long dwWin32ExitCode; public long dwServiceSpecificExitCode; public long dwCheckPoint; public long dwWaitHint; }; }
Have you worked in a place large enough to have multiple branches that merge regularly? I have. It can be a nightmare. Merging two developer's code changes is a very small subset of merging operations.
You can achieve that using a do..while loop bool restart = false; do { if(line == "R") { restart = true; } else if (line == "A") { [...] } }while(restart);
I came here to post this. Topshelf is amazing.
 Does it have to be spotify desktop? You can use their api to get the songs of a playlist: https://developer.spotify.com/web-api/console/playlists/
&gt; Use of goto is generally frowned on Having an 'endless' loop like that is just as frowned as a goto.
I know this isn't helping you directly, but /r/programming might be a better subreddit for this type of question since it doesn't really have anything to do with C#. Good luck :)
I want you to be able to type one thing and get up "information", and then return to the main screen and be able to type some other thing to get up other "information"
Try /r/algorithms
 Public Static Void commandHandler() { String line = Console.ReadLine(); if (line == "R") { Console.Clear(); commandHandler(); // as the input is R this will go back to the start of this method } else if (line == "A") { // do what ever A needs to (you should probably use a switch case for this but this is just for example) } }
**Parallel programming** means different threads are doing the same operation on different pieces of data. For example, one thread may be adding up all the numbers between 1 and 1000, while the second thread adds up the numbers from 1001 to 2000. **Concurrent programming** means that you have multiple threads doing different things on the same piece of data. For example, one thread is adding items to a queue and another is removing them. (This is much harder to get right.) Multi-threading just means you can have multiple threads. Multi-threading is used in parallel programming, concurrent programming, and (sometimes) asynchronous programming.
Are there student rates?
It's much quicker to create a WinForms app than a WPF app, not to mention I don't have to go look at the designer code and mess with it with WinForms. I understand the benefits of WPF and have made a couple WPF apps over the years, but this trend of things being such a time sink is really getting to me. For Windows apps I prefer a simple RAD drag and drop and set properties experience. WPF has never felt that RAD to me. It has drag and drop controls and a properties pane, but it doesn't change the fact that I'm spending most of the GUI time in XAML. Reminds me of WebForms. Microsoft tried to make it RAD but it was more productive (and cleaner) to work directly in the HTML. Just my experience any way, maybe if I had more experience with WPF I'd love it or just feel differently.
Definitely do not do this. This will eventually run right into a StackOverflowException if it runs long enough. When you call commandHandler() from within commandHandler(), the first commandHandler() does not terminate and remains on the stack. Then the second commandHandler() calls commandHandler(), remains on the stack, etc. The program below called CallMe() about 16,000 times before it crashed. class Program { private static int counter = 0; static void Main(string[] args) { CallMe(); } static void CallMe() { counter++; Console.WriteLine(counter); CallMe(); } }
Ah yes.. good catch. Hungover advice retracted
Thanks! How about asynchronous programming? Would that be creating a thread(s) to do the calculations while allowing the code to then do another set of operations before the calculations in the parallel example are complete?
You're trying to manage state in a console application. So your "menu" is a state, the individual views are states, and "quitting" is a state. As it's been said, you need to pretty much be running in a big loop. That loop should know to stop if you're in the "quitting" state and allow your program to close. Otherwise inside that loop you tell the application how to work with the various states. You can deal with this by having one variable that is assigned the state, and checking it inside your loop.
Asynchronous programming doesn't necessarily create new threads. 
As /u/Jermny pointed out, asynchronous programming doesn't necessarily create new threads. First, let's start with what's easy to understand: Synchronous programming. This is what we start with. This is what we're all used to. Things happen in order, one after the other. Asynchronous, therefore, simply means "not synchronous". Things don't necessarily happen in a linear order. Events and callbacks are one type of asynchronous programming. If you send a signal to a device, then exit the method, then the device calls an entirely separate method... that's an example of asynchronous programming without needing multiple simultaneous threads (though, in practice, it usually does). The `async/await` *pattern* in C# is a compiler trick to let you structure your asynchronous code in a way that looks like the synchronous code you're used to. Some async methods such as the underlying File and Network I/O commands will actually punt off to hardware to do the async bits, or the OS level at the very least, and don't create a new thread in C#/.NET runtime land.
If you have ever written any nontrivial javascript you have likely either done asynchronous programming or you have repeatedly found yourself up against the "this page is not responding" message most browsers provide. This is because web browsers run javascript in a single thread and the thread blocks the UI of the page. 
Actually your "work packets" (or queue jobs) have nothing to do with the two concepts. This is up to you. In Concurrent Programming tasks can overlap in the same time period while in Parallel Programming tasks are executed simultaneously (e.g. on different cores). (Threads are basicly light-weight processes that share the same address space) [Tasks here != Unix Tasks] Liebe Grüße
I've used clickonce which is built into visual studio. It's quite serviceable but has some limitations at scale: - update only happens on startup - user cannot choose install location - if update URL is offline update is not done - app name is the unique key, so if you want MyApp for test and live, you need to do some hackery and rename things: MyAppTest, MyAppLive. This can break explicit wpf resource URIs during dev.
Squirrel sounds like it will help you out: https://github.com/Squirrel/Squirrel.Windows
I've used squirrel for some internal apps, it works really well
No, it is not but thanks for the reply.
You can use the deployment API to periodically check for updates.
That is so super nice of you! Sorry I haven't replied sooner, it's finals week and I've been busy. I've got a new issue that's related if you'd like to tackle it with me. :D
That's so nice! Feel free to add me; just make sure you let me know you're from the C# subreddit so I don't mistake you for spam. :P
Used stopwatch - all working now! I Have a completed game. Thank you so much. 
I've done that, is that what you'd classify as adding Student objects to the Course object?
Make the array a member of the course object. 
Yes. 
And would there be a way of doing this through the Program's Main() method instead of inside the Course class itself?
Yeah, I've just launched an app using Squirrel to auto update over the internetz. Pretty simple...way less friction than ClickOnce.
Does this solve your problem? availableConstructions = empire.availableConstructionsEmpire.Except(structures); Alternatively, how about this? availableConstructions = empire.availableConstructionsEmpire.Where(x =&gt; !structures.contains(x)); If not, I may not be fully understanding what you're trying to do.
Yes. "runas" is everything you need. And just remove the workingDirectory or set it to an empty string to make it to be able to use the current directory your program is located in.
Having been developing software since the mid-80's and starting Windows development with Win16 (Windows 3.1) it is a bit hard to me to have a proper perception of what might be the problems. However, have you looked into the video tutorials as well? Although UWP 10 is a not the same as the Universal Apps introduced in 8.1, these tutorials are quite interesting. https://mva.microsoft.com/en-US/training-courses/building-apps-for-windows-phone-8-1-jump-start-8671?l=eLhkSlG1_3004984382 You might find some interesting ones at the MVA https://mva.microsoft.com/training-topics/app-development#!index=4&amp;lang=1033 Sorry if you already went through them.
alright cool. so I'd replace "exit" with my actual command, I got that, but what about that /K? Would I replace "/K exit" completely? Also I get the error "the type or namespaces 'Process' could not be found. And the same for 'ProcessStartInfo'. What's that about?
'/K' is a CMD argument. It will make sure that CMD runs the line and return to command prompt. While '/C' runs the CMD then terminates it. You can choose one that fit your program best. You get the error message because you forgot to add using System.Diagnostics.
The Wix Toolset is the only thing I've found that gives me what I want for installers and auto-updaters without the hassles that comes with ClickOnce. I've also grown fond of the WixSharp project to simplify it even further and have the ability to handle your installer with C# rather than raw XML. http://wixtoolset.org/ https://wixsharp.codeplex.com/
From the material: &gt;In the Main() method of Program.cs: &gt;1. Instantiate three Student objects. 2. Instantiate a Course object called Programming with C#. 3. Add your three students to this Course object. 
 using System.Dianostics; Needs to be way in the top. Along with the other usings. And your Arguments line needs to have a '+' sign. startInfo.Arguments = "/k " + command; // notice the space inside the quotations mark
You could use 'Directory.GetCurrentDirectory'
ok this was extremely helpful! Can you just tell me how I would send multiple commands after another to cmd? I tried "\n" for new line but that didn't work and multiple lines with "startInfo.Arguments = " under each other didn't work either. Nvm: I figured it out. thanks's a lot, man. You're a lifesaver!
I would really suggest learning MVVM pattern for the coding part. [https://msdn.microsoft.com/en-in/library/hh848246.aspx](https://msdn.microsoft.com/en-in/library/hh848246.aspx) [http://blog.falafel.com/using-the-mvvm-light-toolkit-with-windows-10/](http://blog.falafel.com/using-the-mvvm-light-toolkit-with-windows-10/) You can also use JS and HTML to develop the UI [https://msdn.microsoft.com/en-us/windows/uwp/get-started/create-a-hello-world-app-js-universal?f=255&amp;MSPPError=-2147217396](https://msdn.microsoft.com/en-us/windows/uwp/get-started/create-a-hello-world-app-js-universal?f=255&amp;MSPPError=-2147217396) 
I'm pretty sure reference equality should be sufficient for comparing types. &gt; Which of these are the best under certain scenarios? Best how? Most readable? Most maintainable? Uses the least memory? Runs fastest? Profile them and see? I don't think we can say, *really*, although Find(), FindAll(), Contains(), and RemoveAll() are going to be O(n) operations on a list, so those approachs are all O(m * n) (where m is the size of structures, and n is the size of empire.availableConstructionsEmpire). It should be OK for small collections, but if your lists are large at all, you ought to rethink things a bit. You might try something like: var excludedTypes = new HashSet&lt;Type&gt;(structures.Select(x =&gt; x.GetType()).Distinct()); var availableConstructions = empire.availableConstructionsEmpire .Where(x =&gt; !excludedTypes.Contains(x.GetType())) .ToList(); seems like it really ought to do the trick, *if* type equality is the way to go. (I'm not sure that approach is *best*, but it should reduce the cost to something like O(m + n), instead. If structures contains *the same object instances* as empire.availableConstructionsEmpire, though, it *may* be faster to do this: var availableConstructions = empire.availableConstructionsEmpire.Except(structures); because you don't have to do the extra business of getting the type to do a reference comparison. But! Profile it. We can't tell you.
I've gone the other way, from app dev to ASP.NET dev, so I guess I can give you the opposite? Stuff I know that has no relevance in what I currently do. I don't have links for you right now unfortunately - learn about async/await and how they interact with the UI's dispatcher thread. Most important pitfall IMO is to understand what .ConfigureAwait() does and why it's necessary. - learn about the lifetime cycle of an app. i.e. Tombstoning/ suspended/ terminated states, they are different between 8.1 and UWP. - background tasks, you might need to structure your app in a different way to what you expect. e.g. to play music you need a background task registered with a certain capability. Finding an efficient and reliable way of passing info between two tasks is a big pitfall here, especially on mobile. - The MVVM pattern, it's not essential but it's generally accepted as the way to structure your UI code - On UWP, compiled bindings. Previously XAML bindings were interpreted at runtime, now they are not, which might cause some confusing behaviours (or more realistically, non-behaviour) - Portable libraries, if you're interested in the new Xamarin tooling you need to know what code you can put where. There's a lot of other stuff that's probably too niche to look into atm, if you have any questions though you can check out /r/wpdev. :)
[I wrote an alternative simplistic code for this.](http://pastebin.com/EjfHt7KK) It is a bit harder to explain, but basically, you have to ensure that you can cancel the blocking code at anytime with CancellationTokenSource object and you isolate any thread blocking codes in it's own task. You would also have to determine when the stream ends. Does the stream disconnect when it reached the end? Is there an EOF marker? Any Length of Content determined? Any other conditions? Note, the code I wrote is **NOT** the correct way of doing it in it's current form, especially the message construction part, but it illustrate the concept on what I'm talking about on isolating the blocking thread code. To get explain everything about how to handle blocking threads code and networking would end up with me writing a book.
GET ORF MA SWAMP!
Thanks for the code snippet. Is there really no cleaner way to do this with SslStream? Seems kind of like a lot of work considering NetworkStream works fine with the DataAvailable attribute. I will keep it in mind though in case I can't find a nicer solution. This is normal HTTP(S) traffic so the connection doesn't really end before the client gets a response (unless it times out of course). I could check for \r\n at the end of the message but of course that is no guarantee the message is really over since it could just be cut off at a bad location. I also can't use any HTTP headers since they aren't mandatory.
Is it Winforms or WPF or anything?
Yeah, if you want to do this "properly" and by hand, you'll have to get very familiar with [Events](http://www.tutorialspoint.com/csharp/csharp_events.htm). The problem is there's a lot of boilerplate code involved just to get a Control to update when a value changes. If you want to learn something really cool that will help, I seriously recommend [ReactiveUI](http://reactiveui.net/). Be warned it's a little bit of a mindfuck getting your head around how reactive programming works, but once you "get it", you cut down your code immensely.
haha another part that is missing from my work process. I know how testing works and what it is for. But I don't know how to intercorporate it into my work. But I can already see how it is easier to create test for seperated logic than it is for a brown mush of business and ui logic.
I believe the more proper term for "quitting" would be "transition," in the context of most state machines, or less commonly, "trigger." The state itself would be "quit."
&gt; But I don't know how to intercorporate it into my work. This, a million times this. I struggled with this as well, because how the hell do you unit test button clicks and mouse scrolls and all that? Everyone is very quick to tell you that you need to test your code and write unit tests, but nobody ever makes it clear quite how you're supposed to do that in a way that isn't a total ball ache. As you've said, the key is pulling your business logic out of your UI. Your UI should just be a *view* of the application, not a direct part of it. Once you understand how Dependency Injection works and start writing classes that don't depend on anything other than a few interfaces, it starts to make a lot more sense.
Cast sender to a list box item. Then cast the data context of that item as the type is is suppose to be. Something like: var item = sender as ListBoxItem; var toDoItem = item?.DataContext as ToDoItem; var desc = toDoItem?.Desciption; 
Isn't this more of a general rule of coding. I would assume OP already knows this with his web development. This isn't something specific to app development I wouldn't think...
So, now you can write a method in the Course class called "Add". For example: public class Course { const int MaxStudents = 50; public int NumStudents { get; protected set; } public Student[] Students { get; protected set; } public Course() { Students = new Student[MaxStudents]; } public bool Add(Student student) { if (NumStudents &gt;= MaxStudents) return false; Students[NumStudents] = student; ++NumStudents; return true; } }
Removed: Rule 3. Perhaps try /r/dotnet or /r/webdev? What kind of throughput are you looking at? The server you're talking about has 64 cores and 256gb of ram to handle _emailing_ tasks? If that's the kind of hardware you need to handle that kind of throughput, then a solution will likely have to be a bit more novel and nuanced than a simple Reddit post could probably handle. If there isn't much throughput and you're dealing with an overkill system right now, then yeah, do something simple like tossing the emails into a database and have a Windows service running on the ASP.NET server to fire off the emails. It's pretty easy to make a lightweight Windows service in C#.
Ok, that is actually what I was thinking it would be just wasn't sure. Any good suggestions on where to learn LINQ?
&gt; Any good suggestions on where to learn LINQ? http://www.amazon.com/Head-First-C-Jennifer-Greene/dp/1449343503
Well, the problem you're running into is that your datatable is not automatically updated when the data in the database is updated. You need to reload the datatable and rebind it. You can also use a binding source to make things a little easier though it won't solve your problem on it's own. Here are two links that cover what I'm talking about. https://social.msdn.microsoft.com/Forums/windows/en-US/cd16cf2d-5017-4659-adac-f689255670ff/refresh-dataset-for-new-fields?forum=winformsdatacontrols https://msdn.microsoft.com/en-us/library/801dxw2t(v=vs.110).aspx
How about software requirements you don't control? It's not always the developer's choice what they can use to produce something. In many cases, the people who control the requirements know nothing about programming or practice and aren't interested in something they don't understand; if it doesn't look like "Windows" to them, it's not acceptable. As a programmer, sure, it's frustrating. But remember that the other side of that application, the end users, they are the ones who matter because they pay you to make the applications the way the way. I think Microsoft is a perfect case study of that point. Win 8/8.1 were poorly received with a large portion of end users because they introduced an unexpected, forced change that didn't fit with their preconceived notions of "Windows." Windows 10 has fared more strongly (greatly thanks in part to an aggressive campaign to provide a free upgrade) because visually it was an intermediate step for the end users between Windows 7 and Windows 8/8.1, which is really all they wanted. Plus, let people demand WinForms applications...that just carves a nice niche market for people who are adept at that particular platform! 
Personally, I would recommend you clone the [Microsoft UWP Samples github repo](https://github.com/Microsoft/Windows-universal-samples) and keep it handy, there's tons and tons of mini-apps in there that will teach you the basics of the most popular APIs to get you started.
Old timer here who has worked with Microsoft products since Windows Foundation Classes and Delphi 1.0 (like, Windows95 era tech). Today, all I do is web sites and its hard to go back. The controls are all different POCO classes with deep inheritance structures, so sometimes they feel very restrictive. Combo-box vs list vs edit box seem like they should have more in common than they do and that can surprise you. Styling is a PITA. That's why all native windows apps look the same. (Like: "Oh, hey, haven't seen a Delphi app in a while.") I can usually identify the source of the controls on apps I use because you just end up having to accept the way the controls look. Unless you're a fan of crushing minutia and deep dives into obscure documentation. Learn to use Expression Blend. For me it makes developing the UI and bindings to the view model so much easier. I usually have the same solution open in Expression Blend and Visual Studio at the same time. You can debug from either. Installation and distribution are another factor. You'll need to invest in an installation writer. For my own personal work, I use [NSIS](https://sourceforge.net/projects/nsis/). It works well and is free. You can do everything with this, including installing .dlls to the GAC.
I'll look into MVVN and Onion; I regularly use MVC for websites and applications. Though, this is kind of generic; business logic, database logic, markup, etc etera ALWAYS need to be separated, not just in apps. :) I have the option to build it as a UWP app for Windows 10, thankfully. The installers look like a pain in the ass indeed.
Lots of nice tips and links in here. Looks like I'll be having something to read the coming days. Thanks all. ;) 
Not a fan of buzzwords myself. But it's easier to use when it tells something about a person's skillset, rather than writing out full sentences with languages, design patterns and skills I'm familiar with. Don't be an ass.
 void main() { Student s1 = new Student(); Student s2 = new Student(); Student s3 = new Student(); Course ProgrammingWithCSharp = new Course(); ProgrammingWithCSharp.Student1 = s1; ProgrammingWithCSharp.Student2 = s2; ProgrammingWithCSharp.Student3 = s3; } class Student {} class Course { public Student Student1 { get; set; } public Student Student2 { get; set; } public Student Student3 { get; set; } } hmm... this doesn't seem right
Sometimes people confuse LINQ with LINQ to SQL (a specific implementation of the LINQ pattern) which is an alternative to Entity Framework.
Oh man, that "other way to think of it" actually helps me visualize the concept so much better! 
Er, sorry. It's something I've noticed when I've been reading posts on here. People seem to jump from one project to the next but don't seem to fully understand fundamental concepts. Part of that is 'It works. That'll do'. Which, working in IT is quite often all you have time for. If you have time: Make it work (build) Make it right (refine) Make it fast (optimize) You'll learn more during the refinement process simply because you've learnt more. Optimization is where you can start working on threading/concurrent design.
Thank you so much. I've been stuck on this problem for a while and no amount of googling got me any answer. 
Not sure on MF, but you can do Win10 IOT, and write UWP on it. 
Seconded. I developed for both Netduino and RP2, MF and Win10 UWP respectively. Everything I could do on the Netduino I could do on the Win10 IoT build, and more. Porting code wasn't too bad, either.
No, you have got it spot on. I'll give these a whirl. 
I think it's better that it all lines up. Having something like this... var item1 = new Dictionary&lt;string, string&gt;(); var item2 = new List&lt;int&gt;(); var item3 = new Func&lt;Tuple&lt;string,string&gt;&gt;(); ... looks better than this: Dictionary&lt;string, string&gt; item1 = new Dictionary&lt;string, string&gt;(); List&lt;int&gt; item2 = new List&lt;int&gt;(); Func&lt;Tuple&lt;string,string&gt;&gt; item3 = new Func&lt;Tuple&lt;string,string&gt;&gt;(); Just easier on the eyes.
Ok, closest I got I think was this: availableConstructions = empire.availableConstructionsEmpire.Except&lt;Iconstructable&gt;(structures); This gives an error which says you can't implicitly convert from List&lt;Building&gt; to IEnumerable&lt;Iconstructable&gt;. This sort of explicit cast seems very daunting. Nothing I tried got it to work. 
I feel like .net core will be suitable for small deployments due to its reduced dependencies (even on the PI). As others have said Mono could be used already however.
Im not an author but is "async void" a bad practise?
Yes, I think Stephen Cleary has a blog post on it way more in-depth than I could explain though. I think it has to do with that method now not being awaitable due to it not returning a task therefore synchronously running a method with awaited async calls
there is quite a bit of information on the subject, but in the end it is supposed to only be used for event handlers. exceptions are swallowed and the method cannot be awaited (so you are not guaranteed a specific order of operations). here is a pretty good writeup on it: http://www.jaylee.org/post/2012/07/08/c-sharp-async-tips-and-tricks-part-2-async-void.aspx
Note that the "runas" verb is not normally needed. It will cause your command to run elevated if your account has administrator privileges. 
Well... it is wrong.
[Developer Edition](https://blogs.technet.microsoft.com/dataplatforminsider/2016/03/31/microsoft-sql-server-developer-edition-is-now-free/) is also free with all the goodies of Enterprise edition for development purpose
I was able to get this working with a StreamReader like this: using (StreamReader reader = new StreamReader(stream, Encoding.UTF8, false, 512, true)) { do { char[] buffer = new char[512]; int read = await reader.ReadAsync(buffer, 0, buffer.Length); message += new string(buffer.Take(read).ToArray()); } while (reader.Peek() != -1); } Now the only issue is getting websocket support working too since I need the raw bytes in order to parse the websocket header. Well, it's a start I guess. ;)
Very cool! I actually think I might implement this in my own program https://github.com/SpoinkyNL/Artemis/tree/development and get rid off all my own implementations Should clean things up nicely, if I run into any issues I'll let you know on GitHub 
Thanks. I am sure there are issues I am unaware of, but for the most part I have been personally consuming a large portion of the library with out issues. I hope to get a test project up in the near future.
I would, and I will be publishing it to nuget in the near future. However it will be my first Nuget package and I would like not half-ass it and finish some documentation and get at least some test going before doing so. If I had to guess, I'd say it will be a couple of weeks before it is on Nuget. 
I would say it is likely you could completely eliminate the need for either with the default implementations or minor modifcations of them. This is of course under the assumption you currently use AutoitX/Autohotkey to simulate basic input, which is the reason most people use the I think. 
Yeah I know. Maybe I'll take it out later but for the moment I want to keep it in. 
I found a patch that fixed the text-based GUI crashes on arm-hf. Winforms now works just fine. I'll link it when not on mobile.
Touché, that's true. Just as long as business understands that the code should be rewritten if the idea is taken to production.
This is one of those depends on what you want to do with it questions. If your new to REST API's though I'd suggest the MVC route
Could you give some examples?
I prefer WebApi
&gt; Solid default implementation of all the interfaces is provided. Thanks! I always like having something that works instead of having to implement the interface myself. Some refer to interface only as being 'extensible' but I like some basics to jump-start.
I'd say it would be a great library to write a screen recorder with. You can easily detour endscene like fraps does.
Aaah, good ol' management!
How's your delegate knowledge?
Thanks for your reply but you misunderstood, we're using dependency injection via constructor parameters and are merely manually resolving the the top-level dependencies via the IoC-container. Everything else is resolved automatically by the IoC-container (autofac). This pattern does however not prevent me to include a lower-lever interface (that should not be exposed) as a constructor parameter to a high-level service.
Use them all the time; my applications typically have a lot of dynamically generated forms in which various controls can optionally have dynamically assigned events. Think autocomplete textboxes, value dependencies, et cetera. But isn't that quite basic? I mean, if you're double clicking any control in any WinForms / ASP.NET / MVC / WPF application you generate and work with a delegate, technically.
Can you write custom delegates?
oops lol
Just center the Create/Cancel buttons, widen them up and add a background image with white text fields since it's a hip thing to do right now.
I am. Can't seem to manage a perfectly centered form though :/
You still haven't changed the LocalDB location :) If you target a server hosted DB, you'll need to move the connection string to [app.config](http://stackoverflow.com/questions/6536715/get-connection-string-from-app-config), however, since you're using LocalDB which I assume means your DB is located alongside your app, you can use get the path on [runtime](http://dailydotnettips.com/2013/10/29/different-ways-of-getting-path/) and construct your connection string dynamically. It appears you're putting the whole logic &amp; presentation in a single UI class. First off, separate them. For example if you use [3 layer architecture](https://msdn.microsoft.com/en-us/library/ff648105.aspx?f=255&amp;MSPPError=-2147217396), codes for initializing connection to DB should be in their own class (library, actually), so do codes for business logic (getting ordered list of categories) and codes for presentation (displaying the list on your listbox). It's pretty straightforward to refactor your current code. However, if you're planning to code for living, it will be a good time to learn XAML &amp; MVVM [right now](http://stackoverflow.com/questions/1405739/mvvm-tutorial-from-start-to-finish). It's used in WPF, which newer B2B apps tend to be developed with, also Universal App, which is (probably) the future, and also in Xamarin Forms, so you can develop for Android &amp; iOS. The earlier you familiarize yourself with MVVM pattern, the better your transition will be.
i don't get it, can you explain?
Code for a living? That's a joke. Haha. This is just for fun. :P I think I need to do more reading because everything you said went TOTALLY over my head. I'm using visual studio, if that helps. I think what you're trying to tell me is that my methods I made should be somewhere other than for the specific form I'm using? So, maybe I should create a new class and reference those? 
Yes, basically your Form class should only contain the bare minimum for displaying stuff. Try [Pluralsight free 3 months offer](https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx) for learning about [patterns](https://www.pluralsight.com/courses/csharp-design-strategies).
Many good choices. I really like WebAPI, but mainly that is do to my background in C#. If you really want a challenge, use Node.js
Only way to do this is with some assembly splitting I think. Assembly that knows about both that bootstrap autofac. Front end only has a reference to the assembly interface that it should know about.
Do you mean this: We're having our program-assembly and an interface assembly (containing interface IClassA) as well as an implementation assembly (containing implementations ClassA and ClassB as well as interface IClassB)?
Although I haven't met anyone that actually thinks that foreign key constraints are bad, I have had to deal with a lot of databases without them. I think at some point someone has used a lot of time trying to import bad data into a database, and thinks that the constraint is the issue, when in fact it's bad data. I guess that some then comes to the conclusion that constraints are bad. I hate to have to deal with datasets without foreign key constraints. There is always orphaned data, and pointers into missing records, and it makes the client code a lot more complicated and failure prone.
oh thanks i didn't see that
The default behavior of objects is that the == operator is used to reference checking, yes. But if you want to use it for value based comparison, that's fine too. Strings are objects and the == operator for that is overloaded for value based comparison as well, because its more convenient.
&gt;The default behavior of objects is that the == operator is used to reference checking, yes. But if you want to use it for value based comparison, that's fine too. Should you only do this on objects that won't typically be checked for reference like in my situation?
You can always use Object.ReferenceEquals(a,b) if you really need it. However, maybe a vector type would be better as a struct.
I'd do: vecs.All(vector =&gt; vector.z &gt; 1) LINQ is one of the more powerful concepts you will ever learn to leverage.
If this is something where overloading == makes sense, perhaps it should be a struct instead of a class.
A good overview of how to use `yield return`. If anybody is interested how `yield return` a.k.a. iterator blocks actually work under the hood, I recommend reading [Iterator block implementation details: auto-generated state machines](http://csharpindepth.com/Articles/Chapter6/IteratorBlockImplementation.aspx)
Also async/await use same technique. Basically await works as yield return and scheduler iterates over returned tasks scheduling next after current is completed.
So let's give them some crappy names * PrivateInterfaces * PrivateAssembly references and implements PrivateInterfaces * PublicInterfaces * PublicAssembly references and implementes PublicInterfaces , as well as references PrivateInterfaces for implementations there * App.Bootstrapper references all four to tell autofac how to do it's thing * App.Web references app.boostrapper and public interfaces. On Startup it calls appBootrapper to wire everything up, and can only ask for (and see) copies of public interfaces. 
I took a shot at your homework. using System; using System.Collections.Generic; using System.Linq; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { var salesmen = new List&lt;string&gt; { "Gertrud", "Trixy", "Bob" }; var products = new List&lt;string&gt; { "printer", "laptop", "chickensoup" }; int colwidth = GetColWidth(salesmen, products); colwidth += 1; int[,] sales = new int[products.Count, salesmen.Count]; InitialiseSales(salesmen, products, sales); WriteHeading(salesmen, colwidth); WriteBody(salesmen, products, sales, colwidth); } private static void WriteBody(List&lt;string&gt; salesmen, List&lt;string&gt; products, int[,] sales, int colwidth) { for (int p = 0; p &lt; products.Count; ++p) { WriteRow(salesmen, sales, colwidth, p, products[p]); } } private static void WriteRow(List&lt;string&gt; salesmen, int[,] sales, int colwidth, int p, string product) { WritePadding(colwidth, product); for (int s = 0; s &lt; salesmen.Count; ++s) { WritePadding(colwidth, sales[p, s].ToString()); } Console.WriteLine(); } private static void WriteHeading(List&lt;string&gt; salesmen, int colwidth) { WritePadding(colwidth, ""); foreach (var s in salesmen) { WritePadding(colwidth, s); } Console.WriteLine(); } private static void WritePadding(int colwidth, string str) { Console.Write(str.PadRight(colwidth)); } private static void InitialiseSales(List&lt;string&gt; salesmen, List&lt;string&gt; products, int[,] sales) { for (int p = 0; p &lt; products.Count; ++p) { for (int s = 0; s &lt; salesmen.Count; ++s) { sales[p, s] = p + s; } } } private static int GetColWidth(List&lt;string&gt; salesmen, List&lt;string&gt; products) { int colwidth = 0; foreach (var s in salesmen) { colwidth = Math.Max(s.Count(), colwidth); } foreach (var s in products) { colwidth = Math.Max(s.Count(), colwidth); } return colwidth; } } } 
Thank you let me run it and give it a shot to better understand your code.
Lesser know than the if statement at least. Not to say that it is still pretty common.
I use Telerik's [JustDecompiler](http://www.telerik.com/products/decompiler.aspx) and can recommend that as well.
String is an example of how something can work, technically that's true in many cases. That said, strong is kind of a special stepchild and you shouldn't use string as an example of how to do things. Class are pass-by-reference, but structs are pass-by-value, and in this case that might be the right way to go.
for(var i = i;i&lt;11;i++) wat
I'm curious about the level of experience of a C# dev that thinks yield return is a lesser known feature? I'm not knocking you, I think it would just be good to qualify a statement like that since it doesn't seem to square with my reality as a consultant working on lots of different codebases across a wide range of industries. I see (and write) yield returns every day. 
In case you didn't know, ReSharper integrates this functionality into Visual Studio so you can right click any method/field/type and get the decompiled sources of the library where the method is defined.
Oops. Good catch. Fixed now
Assigning i to itself. 
Lesser *used* maybe?
&gt; Not everybody knows ASP.NET Pure ASP.NET? ASP.NET Web Forms? ASP.NET MVC? ASP.NET Web API? ASP.NET Core?
After properties and structs, this is probably my favorite C# feature over Java.
Depends on what you consider lesser known. To be honest, I've seen a lot of devs who don't know, or have heard of it but don't know how it works. If you have 10+ years of experience, I do expect you to know it (but even then, there are lots of people that don't). On the other hand, there are lots of people with less experience and they often don't use/know this.
That's what I would do based on the description. Awful exercise for a 2D array though.
I've known about it's existence but never really took the time to understand it until now. I work with a small team of .Net developers (around 4-6 years experience) and I've never seen them use the yield operator in any of their code. So I can say for sure they don't know about it but I wouldn't be surprised.
Yikes, that is scary stuff. I guess it goes to show years aren't everything!
"The yield return statement is probably one of the most unknown features of C#." Not for the Unity community, haha :)... Actually it's sad.
I better hope that's mean. I honestly can't fathom how this could be a "lesser known feature". This feature is explained in every single C# book since the introduction of the feature. Stuff like the `OptionalAttribute` I could understand, but a **basic language feature**?
I've used it maybe once in the past few years. Not because it's not needed, it's just that at the time of coding, I got the job done using another approach. The only way I can see it needed in my current project (mvc 5) is to use it when throwing error messages to the user (don't want to throw all of them at once, so do it one at a time).
CCR or their own interpretation of the idea?
Certainly, there is more than one framework for RESTful web services in C#, but most documented one is the WebApi framework. Of course, with ASP .Net Core, MVC and WebApi are no longer separate frameworks. But the programming model will stay mostly the same, but there will be less confusion over which class is which and from which framework. So, starting out with WebApi 2 is a very reasonable place to start. But, more importantly, learning how to organize REST services is really useful, so understanding the role of how resources are organized, mapping HTTP verbs to actions, the role of HTTP response codes and how to use them is really key. All that will transfer from framework to framework. 
Up tomorrow: "All about the lesser known `??` feature."
How many times I have missed the `typeof` method in Java...
Thanks! What's the lowest version of .NET that WebApi 2 is in? (My client refuses to upgrade from 4.0)
What point are you attempting to make, exactly? He was talking about junior devs level of awareness for the feature, not his own. And to add to the discussion, just this past month I worked with a dev who has been in .NET for at least 4yrs and he wasn't familiar with yield or its implications.
I find that most people ignore yield until they realize that it can be used to make single method state machines.
OP was using a typewriter.
Nice article, thanks. Great that you spread knowledge about yield, people should really be using it more often. 
Java support generics, doesn't it? List&lt;E&gt; etc
Instead of using an array, you could use a List&lt;Student&gt; property inside a Course class, like this: class Student { ... } class Course { public List&lt;Student&gt; Students { get; private set; } Course() { Students = new List&lt;Student&gt;(); } } // in main var course = new Course() { Students = { new Student(...), new Student(...), new Student(...), } }; 
Not literally, but it did use the same transformation engine. 
I'm not trying to mess with you but honestly, you really prefer not to use source control? I've only used SVN and Git and I've had a few merge/lock nightmares over the years but nothing that's come anywhere close to outweighing the benefits 
At least it should be immutable. Plenty of types in the framework implement equality, but just about all of them are actually immutable or present themselves to be immutable from a public perspective. 
Oh yes, definitely generics! LINQ not so much, typical use generates far too much garbage for the area I work in.
yield break can be useful too
C# interfaces can't have variables. Properties are not instance fields. Properties are syntactic sugar, a property on a c# interface is exactly the same as a get/set method on a Java one.
It seems that Java doesn't have the equivalent of C# properties : http://stackoverflow.com/questions/2963243/does-java-have-something-similar-to-c-sharp-properties And instance fields (even if it seems to be static and readonly), broke a bit the aim of Interfaces that is to only describe the contract and not the implementation of it. 
But dont properties automatically implement a backing field of some sort or am I mistaken?
You missed the bit where msbuild was shuffled between vs and dotnet teams multiple times. If they're going back to msbuild I hope they at least rework the retarded "kind of xml but not really" syntax.
On classes they do/can, but not on interfaces.
It's to do with with the memory layout at a low level, which is kind of like an array. Let's say you have property x and y, anytime something access these the compiler will transform it so foo.y will become foo[1] . With single inheritance this is easy. The array for each class is the size of the parent, plus the number of variables in that class. With multiple inheritance, this becomes a nightmare. Technically this is done with pointer offsets, but arrays make it easier to visualize.
&gt; I see (and write) yield returns every day. When do you use them? I find that I hardly ever write yield returns.
Couple options. SSH would work. Any kind of remote shell exec would be ok. You can have it run a specific command once it has connected I believe so you can "run and done" so to speak. As an alternative, why not hack up a php script that's exposed with apache and have it run what you want when called via http from webapi? It would be quick and dirty but you could use the htaccess or vm network comfig to limit accessibility to the host. 
Excellent answer. I think it's also important to note that interfaces are used for information hiding. By providing an interface of a class, you can determine what information you want to be publicly available to the consumer, and what information can remain hidden and untouched.
You will most likely have to use a older version of WebApi if 4.0 is a hard requirement. The packages are still available via NuGet, but some newer features may not be available. 
[EDIT] Looks like others have already said all this. A few things: 1. C# properties are syntactic sugar for accessor/mutator methods -- so a property in an interface isn't state. 2. It's bad form to have state in an interface. State belongs in the implementation 3. The old-timey name for interfaces was "contracts" because an interface is just a contract that enforces common behavior. It's better to think of them this way. 
The "15" part is because current VS 2015 is Dev14
Sorry to bring it to you, but this is not the console. This is a GUI application that looks like a console. What you are doing there is not possible in the Windows console.
I do. But those features used back then do not work on the console available in modern Windows systems anymore.
I think everyone was. The only one surprising here is you tbh.
[removed]
I thought I was in /r/pcmasterrace, was incredibly confused as to what the OP was trying to show off.
Don't let your dreams be dreams. Anything is possible in software engineering! ^Would ^^still ^^^like ^^^^the ^^^^^source!
[removed]
&gt; Properties are syntactic sugar, a property on a c# interface is exactly the same as a get/set method on a Java one. Properties are not syntactic sugar in C#. They generate `.property` CIL which you cannot express in any other way. If you can't express the same thing using another language construct it can't really be considered syntactic sugar.
Mouse events are possible. Open up Vim in a cmd console. You can select text with the cursor, and even drag tabs to reorder them. I discovered it when I accidentally clicked on a tab inside the console. I was blown away. Some MSDN links to get you started: * [The Mouse Events section in Console Input Buffer](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682079%28v=vs.85%29.aspx#Mouse_Events) * [The `ReadConsoleInput` function](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684961%28v=vs.85%29.aspx) * [The `MOUSE_EVENT_RECORD` structure](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684239%28v=vs.85%29.aspx)
Is that just for reflection?
I think so.
[removed]
[removed]
Pretty much all code versioning software is bad. Git is so overly convoluted that it's a full time job working out how to keep code synchronised. SVN....well, I'm just not going there. TFS - "I've made a change - my colleague should be able to see that" - Colleague: "What change? TFS says, 'everything is up to date' ...goes to "changes", yep, can see the change but can't actually have a copy to work with. What is the point of that? Also, why "sync" and "merge" - both do absolutely nothing in TFS so what even have the options. I really can understand why people would rather version it themselves in Explorer than put their trust in overcomplicated, overblown, crap software, seemingly designed to get in your way and stop you from actually doing the job you were employed to do: coding and creating productive software.
As for point 1, it's a bit more this syntactic sugar. It's a pair of methods plus some metadata.
For what you are doing there is not much difference to clientside code depending on your implementation. You can go down the route of a windows service but a console app would also work with a scheduled task to kick it off. Unless you want team members jumping on the server constantly you want a method of returning the data (unless its in a central database accessible by your team). If its not in a database then a web service would work. They can sound a bit scary but honestly they are not hard to set-up. When you say clientside programming I assume you mean you have experience writing .Net applications that run on the client e.g. winforms or a console app o r wpf? Also a bit more detail on exactly what your application should do and how its data is intended to be accessed will help us provide better advice.
[removed]
First, don't use arrays like ever. Use List&lt;T&gt;.
Books are ok but are generally dated by the time they hit the shelves. /r/netsec You will learn more on hacking forums like hackthissite and watching videos demonstrating concepts and reading white/black papers. What area of security? Preventing intruders as a web coder? Network security? Hacking web applications? Cracking applications? Social engineering? Browser exploits? Hacking 'smart' devices? Phone hacking? Car hacking? Obfuscating exploits? Malware? Forensics? Its a very broad field and you need to specialize if your going down this route.
Definitely agree to some extent. I can handle git until one tiny thing goes wrong and then its a fucking disaster
[removed]
[removed]
We have been using SVN on a massive corporate project for 4 years and branching and merging is a dream :)
&gt; We have a small team of 4 devs, not one of us can get Git to work in any way that doesn't leave us trawling through code pulling out "&gt;&gt;mine" crap and not having updates etc... Just use a tool like WinMerge to resolve merge conflicts! None VCS can do everything *magically* for you; sometimes you have to decide, what to do... You have to invest into learning a VCS tool - no matter which one you pick. Imho git (or mercurial - as both resemble each other very strongly) is much more felxible to perfectly adopt to the chosen or established versioning strategy of a team, than other, none distributed tools like Subversion or even CVS.
[removed]
[removed]
[removed]
[removed]
I have tried with git - a lot, but things just don't seem to make much sense for a team. If I write a project solely on my own, it's fine, I can stash code, commit and push - no problem; it's just when I want to work on a project with other devs. I would imagine that we commit code we are happy with, then push when we're ready to share that code - or branch off for development or bug fixes and merge back into a Dev branch and have other devs pull down and merge from that again. The other dev(s) pull it down and merge and we're all on the same sheet. Git doesn't appear to work this way - is there anything that does? - we don't need all the bells and whistles etc... we simply need to ensure we're working on the same project and that we don't get too far away from each other. TFS (with Git???) is the same. We've been testing this morning to see if it's the tool for us...it isn't. A colleague added a line of code to a project...I get to my machine, I pull, I merge, I sync...in fact, I press every-bloody-thing in there in an attempt to get my codebase the same as what he's just pushed...AND....whilst I can see his change when I view Changes, I cannot get his one line of code into my project no matter what I do. I fail to see how this "tool" is helpful to a team of devs in any way. I could cut and paste the line in, but that somewhat seems to defeat the object of code versioning software. I'm really absolutely at the end of my tether with it - there doesn't appear to be anything out there that will actually do the job at hand without a huge waste of time. A tool is supposed to help - so far, all these have done it hinder our development. My boss is suggesting that we simply host the project on a network drive and let VS tell us when the file has changed with the "xxxxxx.cs has changed. Do you want to reload the file?". I'm running out of reasons why we shouldn't do just that.
it is
[removed]
[removed]
[removed]
I've just never seen or heard of that in the several years and thousands of check-in's we've done here. If someone commits a changeset, and in Visual Studio I right click and Get Latest (Recursive) at a solution level, or on any individual file - it grabs it and I'm all set. Recursive versus non-recursive I could see causing issue though... I've seen someone "Get Latest" thinking they were updating an entire solution recursively, when in reality it was just the *.sln file itself.
[removed]
I don't even have the option of "Get Latest" - I have Fetch or Pull (and Sync etc...) - none of which actually do what the name implies it will.
And you're doing this from within Visual Studio? Or what?
Thanks for the tip about remote shell exec. I ended up using [SSH.NET](http://sshnet.codeplex.com/).
Ok. This is started to really anger me now - I figured a day or two would get me a Git server up and running and me and the other devs would be able to start sharing code and working on the same projects. This is not the case. Could someone please explain to me how I can set up a Git server and what practices I should be using, as the way I envisaged it working (write code, commit, push to central repo, other devs pulling from it, maybe branching off, making changes, committing and pushing) clearly isn't how it's supposed to work. 
Removed: Rule 3, Rule 8 (consider this an official warning).
Love the hidden/under the hood stuff, thats awesome
I've given up with TFS - none of it made any sense, I've gone back to trying Git and am making some headway I think.
I just feel like you must have been missing something fundamental somewhere at the onset with TFS... it's been nothing but reliable, clear, and straightforward for me.
1) generally for release you can just grab the .dll .exe and .config files and move them to another PC. The other pc is going to have to have access to the same .NET version as you built your project under. 2) The "default" installer package for VS is now http://learn.flexerasoftware.com/content/IS-EVAL-InstallShield-Limited-Edition-Visual-Studio 
Hah, what a bit of good timing eh? :) Glad I could help.
Dude you and your team are doing something wrong. What you describe you want to do, is exactly what git does. You have a branch you, you pull it down local. Then you make changes and commit the changes to the local branch. You then push or sync to ensure that the remote branch gits the changes. It is in your using of the tooling i'm guessing something goes wrong.
Great write-up, thanks for sharing! I have a interop-heavy project where this might come in handy.
All of them. 
.net 5 was renamed to .net core 1, not 4.6... :P
It does when you are using Git within TFS.
Something that wasn't clear from your explanation: does this require the use of the `unsafe` keyword?
Was just working on that kind of thing too!
Get latest is a TFVC option, Fetch/Pull/Sync are for Git.
compared to that other "hidden unused feature called 'Yield'" garbage blog spam post this is some actually obscure interesting stuff
No, I haven't added public int SaveChanges(); We're expected to add all the methods manually? BTW: I think I just had an epiphany about interfaces and such. You're only supposed to expose the stuff you need and no more. Correct?
That doesn't swap the values, it simply overwrites the variable...
1) Only the .exe and/or .dll files are required, you can ignore the *.pdb, *.xml, and *.vshost.exe files. The .exe.config file is required if you have application settings but is technically optional. To elaborate on what those files are for, the pdb files are debug symbol files that aren't used at all unless you're debugging, the xml files are used by intellisense and code documentation generators, and the .vshost.exe file is the Visual Studio host used to speed up application startup when debugging. 2) There are various installer generators available, popular ones include [InnoSetup](http://www.jrsoftware.org/isinfo.php), [WiX](http://wixtoolset.org/])and [InstallShield](http://learn.flexerasoftware.com/content/IS-EVAL-InstallShield-Limited-Edition-Visual-Studio). InnoSetup is probably the easiest to use and WiX is definitely the most complex but also the most powerful and extensible.
[In the 2nd Swap method you overwrite the pointer variable](http://i.imgur.com/wJ2U4iS.png)
Quite possibly but I still can't see it. It seems that if it's that easy to miss something then it's not all that stable and not something i want to risk our business on.
Sorry I can't answer your question, but are these custom application insight events?
My boss isn't going to go for something like that. He is under the impression that sharing the project on a network drive and letting vs tell us about files that have changed is all we need...and git doesn't seem so far to be a better option. 
Removed: Rule 4.
Thanks for you reply! When I say client-side, I do mean WPF and winforms apps. The tool is used to collate data from a half dozen sources and present it in a user-friendly way. The data is related to technical problems. The tool needs to be loaded each time a team member takes on a new case or when they re-open an old case. The main problem right now is that the databases we are using (which are out of my control) vary between pretty slow and extremely slow. In addition, our team is split across the Atlantic, and most of the datacenters that host our databases are located in the US. This means that queries can take anything from 100ms to 10,000ms. Starting up the application right now requires several queries, so the load time might be 10 seconds to 3 minutes depending on how the databases are behaving, and where the user is located. In addition, the tool needs to be loaded 5-10 times a day, which means long load times can be really frustrating. I would like to pre-process data for two reasons: 1) Multiple people are accessing and processing the same data at the same time. Pre-processing data would reduce the initial load time of each user's "reader tool", and quick response times are essential. 2) I believe being able to pre-process the data in the US and send it in one package across the Atlantic would dramatically reduce the load time for them. Right now, the large ping is making it really hard to use the application by our non-us team. Does that make things more clear? I really appreciate the help. 
One.
This is the Windows console, not a GUI application.
https://github.com/Sidneys1/BlokeAndDagger
Thank you, but I must say I don't think that's fair. If you did indeed mean [this post](https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/) I wouldn't consider it blog spam. He gave numerous explanations and examples of `yield` being used, and explained it well and clearly. Although you and I and others may not have learned anything new from it, not everything has to target advanced-level C#.
There are two approaches to this issue, the C# method is to create a POST or PUT method on your API and handle the updates from there... You'll have to get the Computer and Scope and update the records accordingly. public asycn Task&lt;IHttpResult&gt; Put(Model model) { try { await UpdateComputer(model); await UpdateScope(model); return Ok(); } catch(Exception e) { return new ExceptionResult(e, this); } } private asycn Task UpdateComputer(Model model) { var computer = await db.Computers.FindAsync(model.ComputerId); ... Update Fields db.Save(); } private async Task UpdateScope(Model model) { var scope = await db.Scopes.FindAsync(model.ScopeId); // Or Computer ID ... Update Fields db.Save(); } Now the second option which relies on Sql Server. Create a single Sql View that suits your needs. Use an Instead of Trigger attached to the view which handles your update there. While this relies on a Sql View and trigger it does make your C# code simpler... 
Oh man. I missed out. Wonder what people were saying. :(
This is the kind of thing [Chain](https://github.com/docevaad/chain) was built for. Assuming that ComputerId is the primary key on both tables, ds.Update("dbo.computers", value).Execute(); ds.Update("dbo.scope", value).Execute(); *** If it isn't, then you need to let Chain know you are using an alternate key. In your model, [Key] public int ComputerId {get; set; } Then the database code becomes, ds.Update("dbo.computers", value, UpdateOptions.UseKeyAttribute).Execute(); ds.Update("dbo.scope", value, UpdateOptions.UseKeyAttribute).Execute(); *** Really you want to do this in a transaction, so it becomes a bit more complex, using (var trans = ds.BeginTransaction() ) { trans.Update("dbo.computers", value).Execute(); trans.Update("dbo.scope", value).Execute(); trans.Commit(); } 
&gt; You're only supposed to expose the stuff you need and no more. Correct? Yes, that is true. But taking a step back, do you really need the `IMyContext` interface at all? Probably not. As an industry we have a bad habit of unnecessarily creating abstract interfaces. *** Bonus material: Everything on your class that is marked public, directly or on its base class, is considered to be your class's "public interface". The vast majority of the time, the public interface is the only thing you need. The exception is when you want to use two totally different classes in the same place. Then you create an "abstract interface" for them to share using the `interface` keyword. One such reason is to create a real and mock version of a repository. *** Bonus material round 2: Interfaces aren't the only way to create mocks, and I personally find them to be less effective. An alternative is to use inheritance. public class MockAuditDataManager : AuditDataManager public overrides GetAudit(AuditType auditType) { // nothing to see here, it's been mocked } The advantage of this is that you can reuse code between your real and mock class, making your tests more accurate. 
What do you do with the grid once you find it? Can't help but wonder if event aggregation or some pub/sub model might work. The parent knows what tiles it has. it handles some notification, then publishes this message. The tiles subscribe to the parent's notification, and then validate if they meet the criteria for what ever action is to be taken. But this depends on how frequently you're publishing these messages and what is done with the tile. 
I'd love to try Chain out, are there any plans for an F# api? 
That's some great stuff. I'm all about testing and doing it right. It's not like I get that from anyone I work with. Some of them even hard code connection strings. 
&gt; Some of them even hard code connection strings. Many of my ideas and beliefs are controversial, but I can't think of anyone who thinks that's a good idea.
Since Async came up... using (var trans = await ds.BeginTransactionAsync() ) { await trans.Update("dbo.computers", value).ExecuteAsync(); await trans.Update("dbo.scope", value).ExecuteAsync(); trans.Commit(); } If you need to pass in a cancellation token, you can do so with the ExecuteAsync call. Likewise, both Execute and ExecuteAsync support passing in a state object. The state object is exposed by the logging events and is usually used to correlate multiple database calls that make up one logical request. *** Strangely, there is no asynchronous commit in ADO.NET. I really should file a bug report about that, as it seems like an easy change for them. 
Better, but like \u\SalizarMarxx you are glossing over all of the boiler plate needed to make it actually work. &gt; If for some reason you really need to specify the transaction (its already in a single statement above): I would agree that EF's implicit transaction when calling SaveChanges is enough.
If I recall correctly, in IL it literally makes `get_Name` and `set_Name(value)` functions.
Why? As best as I can tell it is just a wrapper around an array and really didn't need the overhead of being class. The generic version of it, ImmutableArray, is a struct.
Your car keys on a table without another pair of keys laying next to them.
Basically more functional apis. You could look at Akka.NET for an example of a fairly big API that supports both F# and C#.
Also, of you're reading up on this stuff, vtables is how interface inheritance works. They're a pretty important topic to understand.
This was not a help request. Unless the lack of effort would be being to lazy to say help. 
thank you all for the replies, i will play around with the suggestions to learn how they work.
I won't hate you :) And I understand you have this rule. But please consider that I did put some effort in it. I hoped this brevity would lead to active curiosity. And I am using this format because people liked it last time (56 upvotes). https://www.reddit.com/r/csharp/comments/2l0898/covariance_and_contravariance_explained_by_the/
And yet, the two discussions in there were questions or issues based on that brevity and lack of explanation: &gt; * Can someone TIL5 what is the result and purpose of such an operation? &gt; * Cool, now do it with more meaningful class names so it is more clear. Furthermore, that submission you made back in November 2014 was before we instituted these baseline rules to try and improve the overall quality of content on /r/csharp. (Back then, _anything_ went so long as it didn't violate Reddit's general site-wide rules) This submission, as it is, is going to be seen by two camps: 1. Developers who already understand what `ref` is (because it's a pretty basic feature of C#), in which case the submission is a waste of their time. 2. Novice developers who don't understand what `ref` is, and IMO, this post does very little to explain it. I think most likely they would ask, _"Wait, why is `B.Value` 2? I don't get it. Why did they change? What is `ref` doing? What magic is this? Why did I have to pass in `A` by ref too?"_ And there's no followup in this submission to sufficiently communicate the concept to these people learning C# or programming. I appreciate what you're trying to do though. Perhaps it's possible to include additional clarifying and educational content in the code, or simply make it more like a blog post with a combination of text and images. Also, might I suggest that you include the code in a copy/paste format (you could include separate links to pastebins or gists if you want to keep the syntax highlighted images) so readers can easily test and play around with the code as well. EDIT: We've also shut down similar blog posts that just link to a dump of code without associated remarks. We're also quite happy having blog posts on any C# feature (from the rudimentary, such as here with `ref`, to the complex or obscure), as we do have a wide variety of readers.
I fully appreciate your efforts.
Thinking about your comment: you might have missed a fairly large 3rd group of readers. The developers that do know ref, but have only used it for structs, and find them selves surprised that it can be used for classes too. And maybe this group is not so interested in reading a full page blog, covering all the novice introduction, before getting to the core. It's for a reason that these "blogs made with some effort" usually only get 1 to 10 upvotes.
CNotSoSharp already mentioned a good Lua wrapper for .NET languages. I would like to add that C# already is a good scripting language for your game. Using MEF 1 or 2 for a plugin system and exporting your quest/ai/items interfaces so that a plugin can extend upon it. A big benefit is that you have Visual Studio's IntelliSense helping you develop faster and that C# is compiled and most likely faster than Lua. That said, if you want Lua then go ahead.
Always thought that "interface" is a poor name for what is much more like a "contract".
What boiler plate? Do you mean remapping the updated changes to the model pulled from EF? I would want business logic handling that regardless
Since someone said that boilerplate is being glossed over, I'll try to post how I would resolve this solution. Edit: I'm putting my notes and code comments here to help clean up how everything looks below: * This code assumes an integer as a key * I use the name "Computers" throughout to represent a single computer, as you did. That seems to be a strange choice to me, because the 's' makes me think it is a collection. * Opinion: Why have a "ComputerName" property? Why not just "Name"? Its on Computer already, right? * Opinion: Booleans should try to start with "Is" or "Has". It forces you to answer "yes/no" when you read it aloud. * I don't consider error checking at all. Good code would check for null, etc. **Business Layer** ____ public class Computers { public Computers() { //constructor logic } [Key] public int ComputerId { get; set; } public string Name { get; set; } //comment above public string CPU { get; set; } //all the other properties done similarly here public int ScopeID {get; set;} [ForeignKey("ScopeID")] public virtual Scope Scope { get; set; } } ____ public class Scope { public Scope() { //constructor logic } [Key] public int ScopeId { get; set; } public bool IsInScope { get; set; } } _____ **View Models**. Keeping the names the same as the business layer really helps AutoMapper do its magic without much setup. _____ public class ComputersModel { public ComputersModel() { //constructor logic } public int ComputerId { get; set; } public string Name { get; set; } public string CPU { get; set; } public ScopeModel Scope { get; set; } } ____ public class ScopeModel { public ScopeModel() { //constructor logic } public int ScopeId { get; set; } public bool IsInScope {get; set;} } ___ **AutoMapper**. This syntax might be a bit off. I used it recently, but I don't remember all of the details and I can't pull up that project right now to get you the perfect sytax. FIGHT ME. public void AutoMapperConfiguration() { Mapper.CreateMap&lt;Scope, ScopeModel&gt;() .ReverseMap(); //This will do the mapping both ways without setup. Mapper.CreateMap&lt;Computers, ComputersModel&gt;() .ReverseMap(); //Automapper will see Scope on the business class and map it with the //scope configuration above. Kinda schweet. } **APIs** public async Task&lt;IHttpResult&gt; Put(Computers computerModel) { using(var db = new MyContext()) { var computer = await db.Computers .Include(c =&gt; c.Scope) .SingleAsync(c =&gt; c.ComputersID == computerModel.ComputersID) var vm = AutoMapper.Mapper.Map&lt;Computers&gt;(computerModel); //vm is now converted to a business layer Computers computer.Name = vm.Name; computer.CPU = vm.CPU; computer.Scope.IsInScope = vm.Scope.IsInScope; db.Entry&lt;Computers&gt;(computer).State = EntityState.Modified; await db.SaveChangesAsync(); } return Ok(); } ____ Now, I *think* you can replace the last 10 lines with this. var vm = AutoMapper.Mapper.Map&lt;Computers&gt;(computerModel); //vm is now converted to a business layer Computers db.Entry&lt;Computers&gt;(vm).State == EntityState.Modified; await db.SaveChangesAsync(); And I think becuse they have the same Ids, it will update both properties in one transaction. There's also the AddOrUpdate extension method that I've used before. https://msdn.microsoft.com/en-us/library/hh846520(v=vs.103).aspx 
Ditto. Love this utility.
That and managing the context itself. Sure you can reduce it somewhat using automapper and a DI framework, but it isn't an honest comparison if you don't address those points. Especially when comparing to a library designed specifically to avoid the need for that overhead.
What exactly is a "file tail utility" and when would I use it?
&gt; Why is there no source control software that allows me to branch out for a piece of work then fold that back into dev and then up through test and then live? I assure you that git lets you do precisely that. Have you even considered that, when thousand of devs at thousands of companies do something every day but you can't get it to work, the problem is at your end? Merging and branching in git is entirely straightforward. 
&gt; Otherwise you open yourself up to manipulation and a user becomes admin easily. Ha! We're not using Rails; the only fields that are going to be acknowledged are the ones defined on the model.
[Here's](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) an example using Roslyn. 
Never worked with Roslyn before. I can recommend MEF based on previous experience. [Use this tutorial](http://www.codeproject.com/Articles/366583/MEF-2-Preview-Beginners-Guide). If you're on pre .NET 4.5 then MEF 2 isn't available. MEF 1 uses a different method making a pluginsystem. [This page explains how to use it very well](http://randomactsofcoding.blogspot.nl/2009/11/working-with-managed-extensibility.html) If you're on .NET 4.5 then you can reference the MEF 2 api through Visual Studio-&gt;References-&gt;System.ComponentModel.Composition. Your game should also reference System.ComponentModel.Composition.Registration so that you can register which classes it should look for in the plugin-dlls. The gist of how to use both MEF 1 and MEF 2 is (Note: IPlugin is an interface you make!): - Somewhere in your game you have a List&lt;IPlugin&gt; declared. - Eventually your game requests/registers types/classes in MEF and 'boots-up' MEF to look inside your plugin directory. - MEF works its magic and automatically loads and instantiates the IPlugin classes found in the plugins and stores them in those List&lt;IPlugin&gt; variables you've cleared somewhere in the game. Most likely this is very vague. I recommend following above tutorials for MEF 1 or MEF 2 respectively.
Hey dude, I wrote you a big massive comment but my ipad crashed, then it took ages to find this post again /fml. So I'll keep this kinda short. I was in your situation too, solo dev for a very small business. Now im a senior dev with a team of 4, still tiny but I've learned a whole lot since i started thanks to having to do everything myself from scratch. The biggest thing that had an impact on my career was reading Domain Driven Design by Eric Evans. That book seemed to be the answer to alot of the problems I was having at the time. Also Patterns, Principles and Practices of Domain Driven design is great book too which is a fair bit easier to read. As for layering your code, yes! Definitely do it! We break our solution into multiple bounded contexts using solution folders. Then within each bounded context we use the onion architecture. So we have this structure for layers: Presentation, Infrastructure &gt; Application &gt; Domain. Domain is the inner most layer and does not reference any of the others. It is the heart of the software where all business logic resides. I've written a ton of ADO in the past, now we just use EF with Linq and it's wayyyyyy better and much more maintainable. However for queries that are a pain to do we end up just use ADO but that's rarely. EF does have its downsides but its well worth the sacrifice. We do all authentication and authorisation in the presentation layer. Keep all code out of controllers, our controller actions contain only a couple of lines of code. We use CQRS heavily, we never expose the domain, use different models for queries and commands so things dont get bunged together. Emmmm, bottom line is read about Domain Driven Design! I'd recommend that patterns and principles one its easier to read. The blue one is a bit dry and may put you off. It all really depends on what project your doing, there is no silver bullet. But DDD was what we needed. So much for keeping it short! Best of luck bud, hope i've helped! 
This is really great for log files and huge (well, long) data files. It'd be nice if it didn't open a console window up and provided some rudimentary options such as assigning file associations. Also, my usual right click context menu on the application bar has gone, which is a little annoying as I can't 'pin on top' using [WindowFX](https://www.stardock.com/products/windowfx/). But with those things aside, it's incredibly useful!
I thought the Windows 10 kernel was finally moved to 10.x.
&gt; or Visual Studio specific, however it covers topics such as frameworks, separating the user interface (such as a website) &amp; the database from the business logic, and the MVC/MVP/MVVM patterns. &gt; You might want to skip the first 4,5 minutes though, since the intro is unrelated to the rest of the talk. (Or don't, since it's still pretty interesting!) I'm about 10 minutes from completing it and thanks a bunch, its definitely confirming a lot of ideas I've been throwing around about how separated the architecture should be.
Congratulations on your interface epiphany :)
HEYYYYYY!!! SO sorry it took a month, but Yeah! http://blog.agupieware.com/2014/06/online-learning-intensive-bachelors.html Hope you havn't lost interest, and sorry I had forgotten for a moment. But I was finally getting back on track today and doing some studying and remembered this comment. so yeah. 
Use a different class or just pass an anonymous type to the Update method. Once you drop the requirement that each table is represented by one and only one class, this kind of problem disappears. 
That's not answering the question I posed. If you have a user object that has a "role" that can be regular or admin, how can you handle conditionally updating that field or not based on the current user's role? How do you handle updatedBy or lastModifiedTime type of updates? How would you handle any business rule related updates?
 &gt; If you have a user object that has a "role" that can be regular or admin, how can you handle conditionally updating that field or not based on the current user's role? As I said, you can use another class or anonymous type. My recommendation is to have a separate endpoint for privileged users that includes things like changing admin status. (e.g. `/user/5/setAdmin`) so disallowed field updates don't silently fail when mixed with allowed one. But if you don't like that plan, you can still use mapping just like you did with EF. **** That said, we could extend the audit rules to cover this scenario as well. Let me think on it.
@roguement: Currently the article [Learn-XAML-by-doing-Netflix-app](http://blog.roguecode.co.za/Learn-XAML-by-doing-Netflix-app) is no longer available on the URL [blog.roguecode.co.za](http://blog.roguecode.co.za/). Did you take it down? May i ask why?
The "new" flexbox system in css3 simplified it a lot, as long as you don't need IE10 support. https://css-tricks.com/snippets/css/a-guide-to-flexbox/
Yep. CSS blows oh so very much.
I quite happily realise that we don't have a grip on it - but if it's that difficult to use and any minor 'infraction' results in hours of lost work, then there's something wrong with the software.
That's neat, but SQL CE is deprecated
Having only learned WPF in the last month of so, but having a background in HTML/CSS, the experience has been rather nice. I've noticed a number of similarities in the way the two systems work. Both language systems are trying to solve a problem in a similar way; by allowing a developer to code a ui in a declarative fashion. It's really clear to me that the team behind WPF recognized a lot of the frustrations from HTML/CSS and tried to avoid them. I've been delighted so far, every time I write some xaml the result I see makes sense, and it's usually clear how to tweak something further.
Good tip. I wasn't aware of that trick. Will definitely apply it. Thanks :)
Styling in wpf is a nightmare though.
The reason is that HTML was designed to layout content like a PDF document. Therefore HTML itself avoids layout elements in the markup and exports them to CSS because the structure of the document is supposedly what is important. XAML embraces the fact that it is an application development framework and puts the layout options in elements as opposed of styles. Well at least this is what I always thought was the reason...
There is no benefit, they would still work in either scenario. But MSDN best practices states: "Abstract classes should be used primarily for objects that are closely related, whereas interfaces are best suited for providing common functionality to unrelated classes." There's a whole host of info when looking at abstract vs interface classes. 
One thing to note is that you can share implementation with an interface as well by using extension methods. Abstract classes are necessary when you want to share fields or non-public members.
The difference between evolution and intelligent design. You expect ID to be more thought out and logical. As opposed to evolution, where sometimes you get a pinky toe.
Agreed. CSS is a fantastic idea, but one major issue is that it's ages old and has plenty of past relics that work weird but can't be changed because it'll break sights. And stuff like flexbox's functionality should have been in CSS way earlier than it was. The browser incompatibilities aren't as bad as they used to be. These days it seems like the biggest issue is just the default styles of things, which can clash. For example, if you don't style a button yourself, what does it look like? Hell if I know. Every browser is different. Especially Safari. Stupid special snowflake. I guess in this sense a big advantage of the likes of WPF is simply that it's the equivalent of only using one browser. CSS is nicer when you only support one browser. To CSS's boon, though, it's insanely powerful. You can do things in CSS that are amazing. Animations and simple graphics are one. You can do things that used to require scripting, these days. Rules can be made super generic so-as to reduce code reuse (although the downside is that it's super hard to figure out where a rule applies to).
IMO an abstract class could increase grief and coupling later on when someone maintaining the code is seduced into introducing a concrete method into the implementation. interface would ensure that no implementation details creep into the structure. 
I think you meant line 74. I can see what you mean there, because there's no validation in ReminderRepository. Perhaps I should be writing unit tests for ReminderRepository as well, and ReminderRepository should be throwing a NullReferenceException if it receives a null parameter. Is this what you meant? I find it difficult to write tests for ReminderRepository, because there is no interface available for the SQLite library I'm using. So I can't isolate the library itself unfortunately without writing my own interface, which becomes a pain in the balls to maintain.
I used to design web sites/apps back in early 2000's. I got turned off by the fact that you have to account for so many variations of what the client web browser might or might not support. I can only imagine it's worse now. Maybe this is old thinking, but anytime I have to make a web form for work or a project I always use the most basic HTML elements because I don't want anyone complaining how the page doesn't look right lol
Current web trends are similar with react and angular component based design
To specifically answer your question as it relates to your response here: learn how to use EF correctly so that you don't cause any of those problems. Complaining about and refusing to use perfectly useful tools that are close to ubiquitous in the .NET world just because some developers don't use them correctly is probably not the way to land a .NET dev job.
You may want to try at /r/cscareerquestions 
Yeah I plan on removing the comments. I added them to anything that was public and realized afterwards that they were just redundant and un-necessary.
Also, what I'm mostly looking for is whether or not I'm following patterns correctly, using the correct patterns, etc. Things I may have missed. Like the OP says, this is my first attempt at Unit Testing and TDD. So I'm just trying to make sure I got the idea right so that I don't build bad habits.
I heard a good definition of abstract classes and interfaces: the former represents an 'is a' relationship, the latter a 'can do' relationship. Interfaces are good for representing _concepts_ and abstract classes for representing commonality between parents and children. I can see the rationale for the abstract class - it feels dirtier to implement an interface because the method might be misused. "I require a Sort(List&lt;string&gt;) method, so I'll just use that interface" vs. "You must be a sorting algorithm to implement that class"
When I am interviewing for senior architects I am looking for a deep understanding of the framework and what is has to offer. The only way to learn that is by building things...and don't just build things, build them as elegantly as you can. Well written code is extensible, maintainable, and easy to read. I like to browse code on GitHub or decompile it (JustDecompile) to see how others have structured their solutions. The best place IMO to start writing code is in the business layer, or maybe a Web API project. That is where the .NET framework will be leveraged the most without being inundated by other technologies (HTML, CSS, Javascript). This is such a complicated question, some of it depends on where you want to end up in 5 years...I know my answer is grossly inadequate but I wanted to chime in in support of your goals. 
Agreed. He was really just questioning to the thought pattern of the example. I love using abstract classes just like I love using enumerations. Another advantage would be that you can require the abstract type. I think for this pattern another reason why they went with abstract vs interface is due to inheritance. It demonstrates that the subclass can only inherit the parent class. If it were an interface there could be multiple implementations. This way you're defining the concrete example of the sort from the abstract version.
&gt; Pluralsight C# Path &gt; 16 courses can you provide a link? i cant seem to find it 
I also didn't look at all of it but from skimming I noticed that you're throwing NullReferenceExceptions when checking method arguments for null. It's a better idea to throw ArgumentNullExceptions there instead. See this blog post for a good explanation on why https://blogs.msdn.microsoft.com/brada/2004/07/11/nullreferenceexception-or-argumentnullexception/
i get "403 Forbidden You're not supposed to be here. Try retracing your steps or you can always try searching for a new skill to learn"
Why switch? In my experience, a solid sql dba / guru is worth more to an org than any entry / mid level c# dev (which you will undoubtably be for the 1st year or so) and they can usually command a higher scale. If you want to expand into c# I'd suggest leveraging your sql experience and either contribute to an oss orm or start a new project around db utilities, monitoring or, if you're brave, your own orm. Just think about the stuff you had to do in your day to day tasks that could be made better with a new tool, dashboard or automation. There's a free pdf floating around called .net book zero written for c++ programmers coming to .net that may be a good a read. The oreilly c# 'cookbook' series is also good for new c# devs because it's full of short code samples that solve everyday problems and gives a great overview of Apis available in the framework. Good luck.
So weird, I don't see it logged onto pluralsight.... You just on the website via browser? https://www.pluralsight.com/blog/software-development/learning-path-c-end-to-end &lt;&lt; same courses?
nop https://i.imgur.com/E7UGywv.png
i can see this. but its only 56h 22m. Is it the same one? 
thanks for sticking around and helping me out 
PDF is really designed for layout, in the sense of placing boxes of text at fixed locations on the area of a page. Much like you would author in quark express or PageMaker. HTML is much more about presenting a long list of text in a somewhat readable fashion on screen, with hyperlinks. Wikipedia is the ultimate example of what HTML was designed for: present information not in pages, as you would in a book, but allow clickable anchors which reference you to another page. This is aparent in the name (hypertext markup language) and in the typical tags (paragraph, header 1, 2, 3, unnumbered list, basically the first functions you used in ms word). I always argue the web would be better off with a system like PDF, maybe slightly more parametrized in the direction of TeX.
yup
Best real usage example I have is working with Unreal Engine 4 (which is c++, but still) I create an abstract class for each type of monster I want. so BaseMonster is abstract, BaseOrc inherits from BaseMonster and is abstract, etc. I created and used interfaces for interactive items. Let's say I have FriendlyOrcShaman which inherits from BaseOrc. Normally I can't use my interact button to interact with monsters, but I can add the IInteractive interface to FriendlyOrcShaman and now I can use my "generic" IInteract code in my players controller to interact with the FriendlyOrcShaman simply because it implaments the IInteract interface. It's a great tool for multiple inheritance like behavior.
I have the same thing, just with a different end date.
yes, but you might have a very different expectation of the following expressions, especially if you come from dynamic or duck typed languages. var x = 10; var y = 10.5; x = y; 
you can embed all your references as resources with "Install-Package Costura.Fody" type that in the package manager console and on your next build everything should be included in your exe making it nice and portable
Like tap? I implemented that with method extensions and it worked pretty well. The other c# devs hated it though.
Tap, integer.times for quick loops
And any Ruby code looks rubbysh?
I can't speak towards transitioning from ruby, but for anyone learning c# I'd highly recommend learning linq and lambda expressions asap as they make a huge positive difference in general.
Nlog and log4net dont incorporate into code automatically and don't give you any analytics, you should write everything by hand. This tool provide solution for specific problems.
Probably you are right, for a while I don't need this and I want to hear feedback from people to know what do they really need before moving forward
 using System.Linq; Enumerable.Range(0, 10) .ForEach( n =&gt; { Console.WriteLine(n); }); Like that?
nah mine was even more concise. it was literally a copy of ruby's x.times with a block
Subjective, a.k.a. without foundation but emotionally satisfying.
You are missing a huge piece of the puzzle, namely what the consumer looks like. Chances are nobody is going to want to use you interface. Rather, they will want to write, list2 = list1.ShellSort(); The interface (as in "application programming interface") you need is an extension method, not an abstract base class or abstract interface. What about picking which one to use at runtime? That's what the Func delegate is for.
So I ran into this the other day the whole 'path' thing is in beta on plural sight and not everyone has it :(
I'm just a noob but you should check out Bob's course at learnvisualstudio.net. He does a good job at giving you challenges and breaking it down to keep you engaged.
Get ready to hate NuGets "broken by design" idea of how versioning works. Biggest thing for me was that I couldn't specify a range, and have it resolve the latest version. It always chooses the lowest version. 
There's an option for that... 
On Udemy I've rather liked Mosh Hamedani http://programmingwithmosh.com/courses/ You could probably jump strait to C# Intermediate and C# Advanced
&gt; Biggest thing for me was that I couldn't specify a range, and have it resolve the latest version. It always chooses the lowest version. You can specify a range, and when updating it will update to the latest version following that range.
A bit off-topic but what is the benefits off using LUA instead of for example iron python? In my last game I tried iron python and it was easy to set up and and worked really well. 
If LINQ means the strange SQL-like syntax, I'd personally pass on that. As for using extension methods on IEnumerable, I am all for it. Lambdas will follow as a necessity. 
Ok - so here's an example that's just happened. On Friday, I created a new git repo into a new server install - so clean. I opened up SourceTree this morning. I also opened up the project that I am working on and added to Git on Friday. I've just made a minor change - Sourcetree now tells me that I have uncommited changes. I look and they are changes in a project I haven't opened since January and wasn't (can't have been as it didn't exist) added to Git. I tell SourceTree to stop following changes and it moans at me that the files don't exist - which they don't, as I moved it in January to a network share. The changes I made in the project that I am working on aren't even listed. Quite how I've managed to do anything wrong in this instance is beyond me - I haven't been here since Friday and my PC has been off. If this is correct behaviour from Git, then it has to be the least intuitive software ever written...in fact, not just non-intuitive but downright misleading and dangerous. I find it incredible that there's no source control software out there that lets me make changes to my code, and then lets me commit the code and/or push so that other devs can see my changes and merge and continue working. Something as fundamentally simple as that should surely be commonplace?
Where did you clone the project to? Or if the project only existed on your machine, where did you run git init? A directory is only a git repo if you've done one of those things, which creates a .git directory in it. 
Then it sounds like sourcetree is misconfigured, since nothing outside that directory is considered part of the repo. Can't help with that, I don't use sourcetree. 
git add my_file git commit -m 'my first commit!'
Indeed you are right. Thanks for catching that. Fixed Now :) I just copied the output from the browser where I have an extension which prettifies it for me. Should have payed closer attention.
Page_Load happens with every request (so when the user opens the page and with every refresh). So when the user presses the "update button" the page load happens again and sets your values as you wrote. So, from what I read it, you set your hidden field on the load so that inner if blocks will always be false. To clarify, on page load check checkbox is checked you set value to 1 and then try to run an action when checkbox is true and value is zero - so that never happens. Maybe try to change your first if block in Page_Load to: if (!IsPostBack &amp;&amp; inputCheckbox.Checked) This should solve your problem. 
works like a dream, thanks!
Is resharper that much better than visual studio ?
You can use MoonSharp, Lua Interpreter written entirely in C# for the .NET, Mono and Unity platforms, in .NET 4 based in Lua 5.2, still updating and compatible with all CLR languages - C#, VB.NET, C++/CLI, F#, Boo and whatever else you like. It could also work with DLR languages (IronPython, IronRuby, etc.).
I wasn't aware of that. Just done it but now it's complaining that I have the column "StartDatetimeStamp" in there twice...which I don't.
https://docs.nuget.org/create/versioning "NuGet supports using interval notation for specifying version ranges. The NuGet specification was inspired by the Maven Version Range Specification but is not identical to it. The following summarizes how to specify version ranges.... NuGet v2.8 and greater - the lowest package version will be used" And the only way to guarantee a version is with the []. Otherwise it will resolve a compatible version. " Generally, the guidance in most cases is to only specify a lower bound, and leave the upper bound open. e.g. &lt;dependency id="ExamplePackage" version="1.3.2" /&gt;" (Ranges are assumed) 
Is this what you're referring to? And then AddReminder accepts this object? I assume throwing an exception if the object isn't valid, because it would be unexpected as the proper way to use the method would be to ensure validity before providing the object? http://pastebin.com/m6SykaWN
I'll apply that. I'm not too familiar with all the available exception as I don't use them very frequently. It makes sense without even reading the link you posted, just looking at the name of the exception. The information it provides just in the name is much more appropriate for the scenario.
Yep, my apologies for the lack of clarity. I mean the linq ienumerable/iqueryable methods that can be used in conjunction with lambdas.
Yeah, there's backups running every night. I'd like to be able to trust MS's EF though.
No. That is exactly what I didn't mean. What I mean is that instance of ReminderName can only be created valid. And the creation code returns the validity enum. Something like : public class ReminderName { private ReminderName(string name) { Name = name; } public static ReminderNameValidationState Create(string name, out ReminderName result, int minLength = 3, int maxLength = 32) { result = null; if (string.IsNullOrWhiteSpace(name)) return ReminderNameValidationState.NullOrWhiteSpace; if (name.Length &lt; minLength) return ReminderNameValidationState.TooShort; if (name.Length &gt; maxLength) return ReminderNameValidationState.TooLong; result = new ReminderName(name); return ReminderNameValidationState.Valid; } public string Name { get; private set; } } And then the Reminder class and Repository will require instance, which, guarded by the creation code above, will always be valid. And that means code that handled the raw non-validated name will be forced to validate it and it will be able to react to it's invalid state. Also, in your case, if you make it a rule that persistence-related code cannot accept invalid data, then your DataStore will become nothing more than call-through to repository, rendering it meaningless.
Not much, it's just something more analogous to `times`
Staging / test environment would be a good step if you can get one setup, that way you can run the application on there against what should be a mirror of production and catch these problems before hand.
People who know me will roll their eyes at this suggestion but... have you considered learning F# in parallel with your journey into C#? My reasoning: * Some genuine F# knowledge distinguishes you as a self-starter. (This is why some roles are advertised using F# as a keyword even if they have little F# content in reality.) * You may find F# a more natural fit with your SQL skills (as it involves a lot of set-based rather than item-based thinking). Thus you may progress quicker and stay interested. * It's a more expressive and modern language. (Eye-rolling intensifies.) If you are persuaded by this, my Pluralsight course 'F# Jumpstart' is one way to start. (Eyes roll so hard they actually fly off.) All that said, you will definitely need a solid grasp of C# to break into .NET. Good luck!
Just a few tips: - Visual Studio, get comfortable with it. - MSDN is your friend - GitHub and VS Team Services - Strong typing - Null checking - Exception handling - LINQ and Lambda expressions - OOP - Design patterns
yeah rub it real good
I'm actually moving from test to live. It works fine in test. 
&gt; Setting the release/build to the date/time (by using asterisks) is not an option.
Are you using WinForms with a custom tree view item class? If so, just set the 'CheckBoxes' property on it to true. If you're using WPF, the easiest way is to write a custom data template for it (with a checkbox and a label inside of a stack panel). 
I ran into a bunch of odd things like this one too. Somehow that file got corrupted or something. The fix I used was simply to open the file in the gui editor and delete all the tables. Then I just went into update and readded all the tables. Problem solved
I recently tried EF for a small project I was doing at home, and my god it's a nightmare. The initial setup was a breeze, and then I changed the model and it was not happy. I tried everything to get it to play nice, nothing worked. In the end I ended up using DropCreateDatabase for the initializer.
This will do what you want (and much more) http://unclassified.software/en/apps/netrevisiontool
Yeah, I've written myself a similar executable that gets called with this in the build events: call "$(DevEnvDir)Plugins\VersionAutoIncrementer.exe" "$(ProjectDir)" But that seems somewhat sloppy. I'd like to be able to just reference a class and be done with it.
Announcement: https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/ (.NET Core) Site: https://www.microsoft.com/net/core Download: https://www.microsoft.com/net/download
I currently have this in the build events: call "$(DevEnvDir)Plugins\VersionAutoIncrementer.exe" "$(ProjectDir)" The "VersionAutoEncrementer" is a tool I wrote (and currently have in my %ProgramFiles%\&lt;VS dir&gt;\common7\IDE\Plugins folder) that finds the AssemblyInfo.cs file, and scans it for the "AssemblyVersion" and "AssemblyFileVersion" entries, and increments the last value in those. This just seems a very "hacky" way to do it. I was hoping for a "sexier" method that's more accepted by industry.
So interfaces are just purely abstract classes, right? So why the difference? There are many arguments, but this is how I look at it: Interfaces give you... interfaces (I don't know how else to say that). They define the public facing shape of the object. Abstract classes [should] give you interfaces AND behavior. That is, they give you the public interface and some default behavior, and perhaps some internal behavior as well. For example, the abstract class might have public method that mediates between two abstract methods to sort of enforce how they interact with each other. So which is better? Neither. They are just tools; use them as you need them. Abstract classes (as some have mentioned) will couple your child classes to any behavior that is enforced by that class and you may or may not want that, but I think the real meat of whether or not you should use the abstract class comes from you knowing how and where it's going to be used. For example, if you have a method that takes an instance of your abstract class (or rather, children of that class), then you're saying that you want anything passed in to have the same behavior that is enforced by the abstract class. So maybe one of the internal things done by the abstract class is that it sends a log to your database or something and you want that behavior to be required. Now if you don't necessarily care about any internal behavior enforced by the abstract class, then maybe you should use an interface. By requiring an instance of the interface, you're saying that you don't care about the implementation. Rather, you only care about the public members of the object being received. This is more flexible because any consuming areas of your solution can simply implement the interface and it will work with that method. And since you can only inherit from one class but you can implement any number of interfaces, that would allow for a much richer class to be used with that method. For example, look at the interfaces that are implemented by List&lt;T&gt;. It implements several and can thus be used in place of a number of different things. By why not both? You could always create the interface and then have your abstract class implement that interface. That would give you more options about future methods -- whether or not you want a specific base implementation or just care about the interface. Children of the abstract class would be usable with either, in that case. It goes without saying that you should think about why you're creating an interface or an abstract class and that you should only do so if you're gaining something from it, or at least plan on utilizing it somewhere in the near future. Just don't start creating base classes simply because you don't want to write the same properties multiple times. By sub-classing an abstract class, you are creating *related* classes. If they are not semantically related, then don't have them inherit from the same class, abstract or otherwise. Interfaces are fine, just not classes. That being said, if they are actually related objects and have the same properties, by all means, create a base class. I personally don't default to that approach, but I don't see anything inherently wrong with it. Personally, I write everything as its own object until I have a compelling reason to relate them. For example: Fireman is a Person, but I will leave Fireman and Person as separate, unrelated classes until I have a real reason to make Fireman : Person. Early on in the dev cycle, you don't really know what those classes are going to represent in the bigger picture, so I choose not to make those assumptions as it will be harder to decouple them than it would be to refactor them into related objects. 
There are not many good BI developers out there, have you considered expanding your skillset in that direction?
search youtube for chat programming tutorials in c#. I saw a lot there when I was looking for threading, which you will need to handle the different connections. actually, chat programs is the most common example used in those c# tutorials that talk about how a server can handle multiple clients.
Deleted all the comments. You don't need them. Class, method, and variables should be descriptive enough.
i found this a while back http://stackoverflow.com/questions/826777/how-to-have-an-auto-incrementing-version-number-visual-studio the answer starting with &gt; You could use the T4 templating mechanism in Visual Studio to generate the required source code from a simple text file : that could be called with a pre-build task command perhaps? Edit Figured id mention that this can be adapted to something other than datetime.
The ridiculous amount of code needed to make things look nice.
Job market.. :(
I'm currently at stage 1 and I'm seriously considering switching career path. Programming was fun before. Maybe it's just me having a hard time adjusting, I don't know.
The only thing I could think is that it sounds like you're using Git, additionally when you're using "TFS" you're using "Git hosted within TFS" rather than "TFVC hosted within TFS". Also, I wonder if you're appreciating the distributed nature of Git or whether you're purely seeing it as client/server software. With Git being "distributed" different commits and different branches can exist in each different user as well as the "central" repo. When you commit, it only commits locally, then you have to push or pull the commits to the remote repository. Also if you want to pull commits from a different branch you'll have to either switch to that branch or merge the changes in. You'll also need to pull changes from all the branches you're working with locally before you can work on them. Actually you may not need to do that strictly speaking, but I'm just trying to get you to think about where each user is committing AND pushing to and where the data would be when you're trying various operations. I don't personally have the benefit of being able to use Git professionally, but it's industry standard and there's no issues with it, plenty of documentation, plenty of video and HTML tutorials and plenty of books to read, so you really should be able to get this working with a little background reading. The biggest alternative is TFS with TFVC, when creating a repository, be sure to select the TFVC version control option rather than the Git option. One other option, a last resort, would be to consider SVN. Obsolete now, not nearly as flexible as Git and has some known limitations. But it could fit you mindset a little better if there is a disconnect for you on the distributed / centralised version control thing. P.S. Forgive me if I'm reading too much into this, but I'm having difficulty imagining your exact issue. 
Looking forward to building my projects in visual studio rather than command line - hopefully xunit tests w/ resharper come soon! Edit: Update on where I am right now: xunit runner seems to be broken. Error code 1 on test discovery due to https://github.com/xunit/xunit/issues/843 Castle Core doesn't support RC2 yet though PR is in. Run/Debug work on projects - no longer need to compile in command line, then add exe as project :D Also, publishes (which I needed for running) are way faster than whatever build I was on previously - like, easily 10x faster from observation (1 min build times -&gt; seconds)
Do you have to currently build them in command line?
It takes a bit getting used to. My first 2 or 3 months back at c# from Ruby were horrible. Then I got into the groove of things and it was fine. 
You'd be better off implementing your server code with Web API (REST with JSON). It's just so **simple**, and it's easier to get started, understand, and debug. 
Wow and it still takes 10 seconds to load a page. It sure have improved.... /s
very nice app but reading logs over network, especially logs overseas, is too slow.
It sounds very much like your development / test schema does not match your production one.
With the new VS tooling, you should be able to get what you want. The "Test Explorer" window will work as you probably expect (same as other Xunit projects), provided you have your project.json set up correctly. Also you're able to run tests from the command line via `dotnet test`.
I'm actually not very familiar with the web projects in VS, but yes, I believe that should work.
What do you normally build in?
WCF will be great if your client can reference the .wsdl and automatically integrate it. If you have any plans to vary the language or type of client, or make it where someone besides yourself can write a client, then you would do well to make a Web API. You said the client will POST data or only send to void methods. If you want the bidirectional capability you spoke of, you could use a callback with WCF. If you you're running a Web API, the server cannot really push to the client unless the client does periodic GETs or you architect some sort of API on the client side, which may have issues if the client is natted over the open internet. Also depending on what you're doing, a socket could be appropriate and is strait forward in WCF.
Very free wheeling thought here but I would use abstract for things that I plan tight inheritance on, just like the code example. In the example, i would never see a need to have .sort do anything implicitly different than sort the list. On the other hand, I would use the interface when there is a need for dependency inversion to support mocking or different implicit behavior when used in different environments. Abstract is a foundation to build children on and interfaces are a set of rules to enforce against implementations that may or may not behave differently than implied.
I have considered that but doing so would just create another problem and require a lot of additional code to do it in the actual application. As a different solution I was looking into somehow triggering PropertyChanged event when CollectionChanged event triggers, but I couldn't completely figure it out. PropertyChanged event of ObservableCollection is not directly accessible. Maybe there are other solutions?
Loads just fine on mobile
So now I'm supposed to use Node to build ASP.NET?
If you want to trigger `PropertyChanged` when the collection changed (a nasty hack), then you can do that easily. You just need to attach an event handler to the `CollectionChanged` event. Don't forget to unattach the event. This is **demo** code. You would also suddenly need a cleanup method, to property detach the event handler when not needed anymore. [CustomValidation(typeof(ItemViewModel), "ValidateAddresses")] public ObservableCollection&lt;string&gt; Addresses { get { return item.Addresses; } set { if (item.Addresses != null) { item.Addresses.CollectionChanged -= OnAddressCollectionChanged; } item.Addresses = value; NotifyPropertyChanged(nameof(Addresses)); if (item.Addresses != null) { item.Addresses.CollectionChanged += OnAddressCollectionChanged; } } } private void OnAddressCollectionChanged(object sender, EventArgs e) { NotifyPropertyChanged(nameof(Addresses)); }
command = command.Replace("\*name\*", "Sidney"); You could use a key/pair and then send it to a method which will then run through the key/pair and do the replacements.
k
That's what I understood as well.
What about using an existing template engine, like [dotliquid](http://dotliquidmarkup.org/)‽
lol... I read your comment before clicking the link, so I decided to time the page load. It was instantaneous.
Could you post the part of the code that splits and rebuilds the string? When string twiddling code is slow, it's often because of excessive concatenations. Strings in .Net are immutable, so with every concatenation, a new string must be created. If you have a large input string with a lot of \*param\* in it, that could be your problem. If that's the case a StringBuilder will fix it. But again, if we could see the code (with actual data, if possible) it'd be easier to pinpoint the problem.
[removed]
thanks for the reply and yeah i am just a Newbie and i was lazy so far that i haven't yet upgraded to 2015 :)
I finally found time to finish the course. I loved it. Thanks again.
It's a habit from a previous job :P My old boss used to name all of his member (private) variables with the prefix "m_" xD sorry about that 
Add a breakpoint on the if (controlName.StartsWith("UC")) then debug the solution. This should allow you to see what's actually happening and find the problem. What happen here is the actual values of controlName are "UserControlsTutorial.UserControls.UCWindow1" and "UserControlsTutorial.UserControls.UCWindow2". But don't 'fix' your code by simply changing the StartsWith parameter. You already have the reference to ucWindow1 &amp; ucWindow2 anyway, so just do this : private void DisplayControl (UserControl uControl) { uControl.Dock = DockStyle.Fill; uControl.Enabled = true; uControl.Visible = true; uControl.BringToFront(); } 
It isn't the standard convention, so it adds cognitive load. 
Ah, I see. Thanks a lot 😀
Good job! Bet it was fun to build too. :)
Ah yeah, I remember that from when I used to do Android.
You could probably get decent performance in the WinForm it you disconnect the input from the painting, possibly not painting all input points, or connecting a subset of them by lines. I don't have any idea how the Kinect connects, but you can probably have two threads; one to take the input and put it in a (threadsafe) list or queue; and another thread that 25 times a second or so pulls points from the list and paints them in the form. I assume that you use a Graphics object on the form to draw, or similar. What I'd really recommend is using Direct2D as you probably would get x10 performance with regards to how much stuff (compare polylines) you can paint in a single frame without lagging.
`m_p_str_name`
I did this in 2009 with Java. Man were my friends pissed about my scores. They accused me of cheating. Can you believe that! I can see you have some optimizations you can make on which ones you should move based on getting the highest score possible. Would you agree? Let me know if you did do those and what you found out. I learned a lot about the best strategies for looking ahead to making high scoring moves. Very fun. 
ItzWarty from LoL?
Thanks, I'll try it out!
huh? Could you further explain what you're asking?
Not when using a Script Task as part of a SSIS package. You declare your variables in the property section of the script task.
WinForm does not normally work by "frames"... if you draw something on a Form, it will remain there without you having to redraw it. In that case, FPS does not really apply. If you've somehow modified the Form so that you call it's Paint event yourself X number of times per second or in a tight loop, you just need to measure how long it takes your Paint code to draw 1 frame in millisecond and then divide 1000 by that number to get an approximate FPS. 
This. Don't roll your own naive implementation of something like this when you can get an off the shelf solution that will do the job better. An alternative package you may want to consider is [Nustache](https://github.com/jdiamond/Nustache)
 #region Help: Using Integration Services variables and parameters in a script /* To use a variable in this script, first ensure that the variable has been added to * either the list contained in the ReadOnlyVariables property or the list contained in * the ReadWriteVariables property of this script task, according to whether or not your * code needs to write to the variable. To add the variable, save this script, close this instance of * Visual Studio, and update the ReadOnlyVariables and * ReadWriteVariables properties in the Script Transformation Editor window. * To use a parameter in this script, follow the same steps. Parameters are always read-only. * * Example of reading from a variable: * DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value; * * Example of writing to a variable: * Dts.Variables["User::myStringVariable"].Value = "new value"; * * Example of reading from a package parameter: * int batchId = (int) Dts.Variables["$Package::batchId"].Value; * * Example of reading from a project parameter: * int batchId = (int) Dts.Variables["$Project::batchId"].Value; * * Example of reading from a sensitive project parameter: * int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue(); * */
Here is my version from 2012: https://www.youtube.com/watch?v=3Iv7WNaWNPw :)
That's the problem. I refer to it as a DTS variable (it's setup in the variable properties) and it's still failing. This works: AttachedTo = "93725c05-f77b-49a1-9edd-6ce9fd5505c1", This fails: AttachedTo = Dts.Variables["User:CustID"].Value.ToString(), Here's what pops up if it's any indicator. https://sli.mg/9h17z8
For a game in winforms that you have the source for? Or are you trying to make a Fraps style FPS display?
Thanks for posting here and on GitHub, Dan. Really loved seeing how you managed to get the app to play the game for you.
Instead of `regex.Matches` use `regex.Replace`, it'll do exactly what you're looking for!
Funny how 'VB' doesn't get a hyperlink, hehe.
Excellent. Stickie this.
Yup. That was it. Rookie mistake. TAKE YOUR GOLD, SIR!!!
Sometimes it really does take a second set of eyes. Thank you for your time, stranger!
Ah, it's the least I could do.
Yep! Now just Warty.
Got a few questions: - How can I get this running on IIS? Is it just not ready yet? - I was able to get it connected to MS SQL Server, it listed all the system tables when I left the schema blank. It didn't list any of the tables when I told it to connect to a specific database. Is there something I'm doing wrong, something wrong with the way this DB is configured, or is a bug on your side? - Will there be any sort of "auto-completion" like features in the future? I'm mostly interested in trying to autocomplete table names, not actual commands. - Will the option for Windows Authentication / SSO to OmniDB be added? (Not the connection from Omni to DB, the connection from the client web browser to the Omni web application). Thanks, this looks pretty awesome. Looking forward to the full release. 
Heh. I did something similar for Farmville around 2008 or so. I was bored.
Removed: Rule 8.
Thank you for the link. I've read so much about Git that I'm pretty much 'gitted' out now. I understand how it works, I understand the differences between Git and other versioning software - what I don't understand is all the garbled messages I get when doing a simple push after a commit. I simply want to push my changes to, say, a master branch, and have a colleague pull it down to be able to work on it. So far, Git has failed to do this consistently. I thought SVN was trouble back in the day, but Git is seriously starting to remind me of just how bad SourceSafe was - it's oddly reminiscent of the nightmare world that created for coders.
Yeah, I'm not going to be very much help. You're not providing much here.
The best thing I can think of (and I don't like it) is to have some static function that takes your stack and puts it somewhere outside of VS (e.g. a file). Here's some code I haven't tested: public static class DesignHelpers { public static void Dump() { //implementation of IsInDesignMode left to reader if(IsInDesignMode) { using(FileStream fs = new FileStream(@"C:\foo\bar.txt", FileMode.Append)) //optionally skip the top stackframe, as that's this function, and you probably don't need to see it fs.WriteLine(new StackTrace().ToString()); } } } Then somewhere in the code for which you want the stack trace: public class AmIAwesomeConverter : IValueConverter { public object Convert(Object value, Type targetType, Object parameter, CultureInfo cultureInfo) { DesignHelpers.Dump(); return false; } public object ConvertBack(Object value, Type targetType, Object parameter, CultureInfo cultureInfo) { return Binding.UnsetValue; } } Now, I'm no great fan of this (in fact, I generally turn off code execution in the designer and/or avoid it all together), but because the designer _is_ executing the code, you should get the stack dumped into the file. You could extend this idea to dump parameter values, etc. To me, this smells bad - now we have a design-time concern starting to infect runtime code. That caveat having been said, I think this would at least let you view the design stack without opening up a second VS instance to debug the first. edit: s/Environment.StackTrace()/new StackTrace()/
Your previous boss did MFC, right?
Afaik, the EF is the dal. People also use the repository and unit of work patterns for non-trivial apps so then these classes become part of the dal. Concerning syncing changes, the official ef docs have good examples for this i think. On mobile so can't link.
What you can do is running a CGI host on server B and then do a GET request on http://serverb/yourpythonscript.py with server A.
It sounds like what you're really asking is how to draw graphics in C#. There are a bunch of different API's that depend on what platform you're targeting. If you want to make a simple desktop view with simple graphics, you could just use WinForms. Then you'd need to research System.Drawing. Or you could use WPF, which uses the System.Windows API (research the Canvas). Or if you want to do something more high-end you could research the DirectX API. You may even want to use C++ and look at OpenGL. If you're not looking at a desktop app, you'll want something completely different. If you're new to this kind of thing, maybe see if this is helpful: http://www.gamedev.net/page/resources/_/technical/game-programming/introduction-to-isometric-engines-r744 Or do you want to just use an existing isometric engine? Maybe this: http://www.codeproject.com/Articles/4915/C-managed-DirectX-HexEngine-Part-I .
Don't use EDMX. Use Code First. Use AutoMapper after you ToList your results. Don't use Projection. 
So make POCOs in the BLL and user AutoMapper?
Go to bitbucket and sign up. Add your repository. Install SourceTree and follow their guidance. You can do it.
&gt; Don't use Projection. What's your reasoning for saying not to use Projection? You certainly don't want to have to query the entirety of a blog post when all you are trying to get at is the post date.
Another way is to make a copy of the 1st list and iterate that: foreach (var item in myList.ToList()) { if(*someCondition*) myList.Remove(); }
Hey I hope this helps: 1) Make sure to enclose your Console.ReadLine() with Convert.ToInt32 so it would be Convert.ToInte32(Console.ReadLine()); 2) You can use switch statements. Here's a good example: https://msdn.microsoft.com/en-ca/library/06tc147t.aspx 3) You can keep the entire main program in a giant while loop. So while(true) { .... .... //GameOver Text Console.ReadLine(); //This will prompt the user when they want to continue } This way when the program reads the last line, it starts from the beginning 
For your first thing (Selection = 1) you're not doing what you want to here, additionally you don't actually need to convert Selection to an integer at all because you can instead just check for the string version of the number i.e. "1", unless you have some specific reason it needs to be an int for your second thing, look more into flow control such as "else if", someone's suggesting switch statements and i say ignore them for your third thing, it really depends on what you call a "reset"
Ahhh loops, I think I need to refresh my memory on loops, especially if I intend on doing combat. looping the combat until either the monster or the adventurer's health is reduced to 0 
Something that takes people a while to catch onto... in C#, the assignment operator is different from the comparison operator. = &lt;-- assignment operator == &lt;-- comparison operator So your line should be: if (Selection == 1)
And even F# gets one! I'm glad I moved from VB to C#. 
This is awesome! I spent a few days trying to make a c# bejeweled blitz bot like a year ago, it was harder than i thought it'd be! I was able to get it to resolve the 10x10 gem color array using pinvoke pixel color sampling and i could emulate mouse clicks to select a gem in the grid. The thing that i couldnt figure out was how to deal with the game animations. Does the bot know when the gem falling/powerup animations are complete? And do the animations ever cause gem color to be interpreted wrong? 
I'm also coming from Ruby, and more recently, Node, because of the job market. If you care enough, let me know which resources you find particularly useful.
I love Hungarian. In large code bases it helps you find functions that other people wrote that do the thing you want to do.
I was hoping that ASP.NET "Core" could work stand alone like Node, since they seem to belong in the same group. Maybe I'm misunderstanding something here.
Faster ways of calculating the pixel color? Or are you hinting at reading the memory?
This is a great explanation. I am learning design patterns at school currently and this has solidified a lot of thoughts in my head.
http://lmgtfy.com/?q=Get+List+of+Shared+Network+Folders+by+C%23.&amp;l=1 I don't know the code off the top of my head but copying your post title and googling it yields many results that should give you a starting point. Rule 101 of programming: Google before asking.
EF has already implemented the unit of work (DbContext) and the repository (DbSet) patterns for you. _Do not wrap these in your own abstraction_! So the "DAL" is taken care of. As far as the "BLL"; it's most common probably to see services abstracted into pairs of interfaces and implementation classes. Each interface is a "service" for a different feature or whatever. The "DAL" is referenced from the class (often via dependency injection). But we can do better: http://josephdaigle.me/2016/05/17/command-pattern-therapy.html
Oh I see. You count the "98% solution" of autogenerated code up in your head and say that's easier? It's fixing the remaining 2% of stuff that auto-generated code doesn't help with that creates 98% of the burden of using the frameworks to create and maintain that service code, long after your code generation feature is a distant memory. Service Code generators and WYSIWYG front end design tools (web forms, etc) always seem like a good idea when you started. In my domain (healthcare), JSON based rest is perfect since FHIR and HL7 specify ISO 8601 (textual) strings which are exactly what JSON REST servers in healthcare should use according to the standards bodies (HL7, IHE, DICOM). Did you know that in some healthcare systems, it is expected to be able to store a year (1902) without the month and day, for when a patient's year of birth is known, but not the month or day? Similarly "1969-10" is expected to be accepted (meaning: October of 1969, day of month not specified, and not assumed to be equal to 1). 
If you want to stay in C#, Unity will be a source of quick reward. There's a few tutorials on their site worth exploring for top down games. All their 2d games are really just 3d with a 2d perspective which makes debugging prefabs a breeze. It their tutorials are no exactly up to date so you'll have to bridge a few, but manageable, knowledge gaps. If you want something with a little less overhead, try Phaser in JavaScript or TypeScript. You can use tools like Tiled to create levels with spritesheets and import them right into your game. It's all 2d but I've found it to be a much shorter path to and end result. 
Alright. The most obvious optimization is to implement a `StringBuilder`. Because strings are immutable, each time you are concatenating to `script`, you're creating a new object that is a copy of `script` plus whatever you are concatenating, causing your performance to plummet due to this being a nested loop. var script = ""; script += "some string"; // instead of doing this... var scriptBuilder = new StringBuilder(); // import from System.Text script.AppendLine("some string"); // and then when you are done and want your finished string... var script = scriptBuilder.ToString();
It looks like you would benefit tremendously by using prepared statements. Depending on your flavor of DB, you could look at either: - MSSQL: https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.prepare(v=vs.110).aspx - MySQL: https://dev.mysql.com/doc/connector-net/en/connector-net-programming-prepared-preparing.html Either way, the trick is to get as much as possible outside the loop. Even if you don't go with the prepared statement (which you absolutely should!), you should pull everything except the row values outside the loop, so you don't generate the same beginning of the insert statement 3000 times.
You're doing a loooot of work the way you have this implemented. Just look at a rudimentary big o analysis. You're taking 3k rows x 42 columns x the unboxing and casting x the comparisons. And that string reassignment is nasty business. Is there anyway you could only work with changed rows? I'm just repeating what's already been said, but consider sqlcommands , using stored procedures, or at the very least a string builder. You already have a data row, any chance if using a datatable and updating via that?
First, use the StringBuilder and reduce the amount of reallocations of strings as suggested by many others. If you still need more performance and you have many rows, you can try parallel execution like this: (written in Notepad++, you might need to change some lines) string[] values = new string[data.Rows.Count]; Parallel.For(0, data.Rows.Count, i =&gt; { DataRow row = data.Rows[i]; string value = String.Format("INSERT INTO {0} ({1}) VALUES (", table.DestinationTable, string.Join(",", table.Fields.Where(f =&gt; f.Name != "id").Select(f =&gt; f.Name).ToArray())); foreach (var field in table.Fields) { switch (field.Typ.ToUpper()) { case "BOOLEAN": if (row[field.Name].ToString() == "0") value += "false,"; else value += "true,"; break; case "FLOAT": case "DOUBLE": case "DECIMAL": case "NUMERIC": value += row[field.Name].ToString().Trim().Replace(",",".") + ","; break; case "INT": case "INTEGER": if (row[field.Name].ToString().Trim() != "") value += row[field.Name].ToString().Trim() + ","; else value += "0,"; break; case "MEDIUMTEXT": case "CHAR": case "VARCHAR": value += "'"+ row[field.Name].ToString().Trim().Replace("'","''") + "',"; break; case "DBDATE": case "DBTIMESTAMP": value += "'" + Convert.ToDateTime(row[field.Name].ToString()).ToString("yyyy-MM-dd") + "',"; break; default: break; } } script = script.Substring(0, script.Length - 1); script += ");"; values[i] = value; }); string script = string.Join(Environment.NewLine, values);
The 2nd result is surprising, I thought `new T()` was implemented using `Activator.CreateInstance` under the covers (there aren't a billion ways to create an object in .NET). You should look at the IL to see what's really going on there... Also, in UWP (and .NET Core, I assume...?) expressions are no longer JIT-compiled but interpreted, which should completely change their performance.
(I wrote the benchmark the results are from). While grauenwolf might have an agenda (don't we all!), you can check for yourself whether EF is slow or not: https://github.com/FransBouma/RawDataAccessBencher For the record: it is. It's *terribly slow*. I've profiled it to see where they dropped the ball in EF6 but it's mainly due to overengineering and piles of complexity that they're so slow. Same goes for NHibernate btw, same ballpark performance and same massive layer of complexity. memory consumption is also terrible with EF6 btw, with more than twice the # of memory consumed during fetching 31K rows as the rest. See for yourself, code linked above is ready to run, if you have the adventureworks DB (linked in the readme on github). Cheers ;)
How exactly are you going to make C code faster by porting to C#? Just by using C# you have already said that performance is not a primary concern.
You don't use `Database.SetInitializer` anywhere in your code. You don't disable `LazyLoading` anywhere in your code. You put all of your `DbSet` in one `DbContext` class. I don't see how that is considered a good test.
One context, with multiple DBSets; one per model. i.e.: namespace MyProject.Models { public class MyContext : DbContext { // Context / connection name. public MyContext() : base("name=MyContext") { } public DbSet&lt;MyModel&gt; MyModels { get; set; } public DbSet&lt;MyOtherModel&gt; MyOtherModel { get; set; } public DbSet&lt;MyLastModel&gt; MyLastModels { get; set; } ... } } 
Not sure why the LB formatting is off...sorry...
Returning negative values is odd, it should not be doing that ? 
Oops, I had misread the code and thought it was supposed to return a short, not a ushort. Updated the link.
Nope just double checked, this code: string s = "hello"; int i = Convert.ToInt32(s); throws a 'System.FormatException': Input string was not in a correct format. TryParse is the method when you cannot be sure of your input 
On top of the string builder suggestion which will improve the efficiency of this loop, I suspect you're likely experiencing delay in the actual insert of data. Running 3200 individual sql statements comes with a lot of extra overhead depending on how you're doing it. If you're using MSSQL take a look at [bulk insert](https://msdn.microsoft.com/en-us/library/ms188365.aspx?f=255&amp;MSPPError=-2147217396)
Here it is: the high amount of forced casts is due to the fact that all binary operators in c# elevate the type to int and then have to be forced back to ushort to get the exact behaviour that this code had in c ushort rng_function(ushort input) { if (input == 0x560A) input = 0; ushort s0 = (byte)(input &lt;&lt; 8); s0 = (ushort)(s0 ^ input); input = (ushort)(((s0 &amp; 0xFF) &lt;&lt; 8) | ((s0 &amp; 0xFF00) &gt;&gt; 8)); s0 = (ushort)(((byte)s0 &lt;&lt; 1) ^ input); short s1 = (short)((s0 &gt;&gt; 1) ^ 0xFF80); if ((s0 &amp; 1) == 0) { if ((ushort) s1 == 0xAA55) input = 0; else input = (ushort)(s1 ^ 0x1ff4); } else { input = (ushort)(s1 ^ 0x8180); } return input; } 1 million executions take 29 ms on my machine (i7 3ghz) since the code does not include any allocations or loops there isn't much room to optimize it. Using the same algorithm you won't get much faster. 
If you already have a datatable, why you don't send it to the database? (Okay, I don't know what kind of database you have...) But if you use MS SQL, then: string tableConString = "Data Source=IP,PORT;Initial Catalog=DATABASENAME;User Id=ID;Password=PASSWORD;"; using (SqlBulkCopy bulkCopy = new SqlBulkCopy(tableConString)) { bulkCopy.BulkCopyTimeout = 20; // in seconds bulkCopy.DestinationTableName = "DESTINATION_TABLE"; bulkCopy.WriteToServer(DATATABLENAME); } It will be MUCH faster.
he used the char type (which is 2 bytes in c# -&gt; which changes the behaviour significantly and i am afraid breaks the algorithm) have a look at my implementation
Or, if you are okay using an older framework, try XNA - not a modern one, and it is basically dead, but it is very easy to use, and you will gain a LOT of inside view how graphics are shown on the screen. And using the knowladge you can use ShardDX or SlimDX for the more modern "still-near(er)-to-the-machine" approach - from C# And, there is a super-great XNA tutorial: http://www.riemers.net/ He teach how to use the very basics (you will need basic C# knowledge, off course), and then you can learn how to create shaders and more advanced stuffs.
Good catch, updated my solution to account for that.
I obviously can't speak for /u/justin071894, but I remember [Jeff Atwood making a case] (https://blog.codinghorror.com/why-ruby/) a while back.
Tbh it took me a bit because I was so caught up in the obfuscatory SQL it took me a bit to realize it was totally unrelated to SQL per se.
So you set the data type as `string` instead of `DateTime`. That's not a particularly difficult or interesting problem.
So creating a repository layer with EF is not a good idea?
not c# but good for HTML games https://www.scirra.com/construct2
Read the entire worksheet into memory into a DataTable with oledb, then with user input, get the columns and rows they want
Takes an unsigned short and returns an unsigned short... so there are only 65,536 possible input values giving 65,536 outputs. If you want to go fast, just create a lookup table using an array and use that. You can generate it from the C code and be 100% sure you'll get the same output. 
EF _is_ your repository layer. All of the 'DbSet&lt;TEntity&gt;' properties hanging off your DbContext, or calling 'DbContext.Set&lt;T&gt;()': those are repositories.
Would it make sense to store each individually completed statement in a list structure like List&lt;string&gt;? or some kind of other array.. since you are appending to the same single string 30,000 times, you will lose performance with the string+string like everyone is saying.. and then throw everything through sql bulk insert, or if not SQL Server, concatenate the list later and run the script? are you sure its just this part and not the sql execution later? 
Makes sense. How simple. 
I've had a good experience using [EPPlus](http://epplus.codeplex.com/) to easy read Excel spreadsheets. Once you open the Excel file and choose the main worksheet, reading the first 10 cells is as simple as a basic `for` loop: var numberOfRows = GetUserInput(); var columnNumber = 1; for (int row = 1; row &lt;= numberOfRows; row++) { var cellValue = myWorksheet.Cells[row, columnNumber].Text; Console.WriteLine(cellValue); }
The output of this looks far from random.
Sorry, Should've made that clearer, I am running it from another script using this method void Start () { benInstance = Instantiate(benPrefab) as BenDesign; StartCoroutine (benInstance.runBen()); } Surely this should make it accesible, or Do I have to define it out of a method?
What line is the error being reported on? You also have a two names that are almost the same (`listOfx` and `lystOfX`). You should change the names some they are more distinctive and better describe what they contain and why they are used. Side note: When you post code, you should format it properly so it is easier to read. Looking at the source of the post, your indentation is all over the place. Keeping a consistent style will improve readability.
I'm fairly new to coding, could you put this in baby terms for me? :')
I suppose it is a lil insane :') idk it makes sense to me, it wouldn't use more memory or anything substantial would it?
Oooh new errors now haha, messed up my capitilaztion the first time, thanks man :)
If there isn't a implementation failure (feel free to point any you spot out), what does random really look like? Whoever engineered this function had something in mind with it.
On to of what others have said, don't create multiple inserts. Make one insert with several values. INSERT INTO table (columns) SELECT columns UNION SELECT columns UNION SELECT columns... Your loop should be creating the `UNION SELECT`s, not the `INSERT`
The field types don't change from one row to another, it's quite unnecessary to call **field.Typ.ToUpper()** 42 * 3000 = 126000 times, even if you can do it in parallel. Same goes for **INSERT INTO** string if he's always inserting all of the fields.
Inline SQL? That's your problem. Use prepared statements and then call each one as needed.
I've had great success with [**ExcelDataReader**](https://www.nuget.org/packages/ExcelDataReader/), might want to give that a shot.
Reformated and tidied up a bit for better reading. using UnityEngine; using System.Collections; using System.Collections.Generic; using System.Linq; public class BenDesign : MonoBehaviour { public Mesh[] meshes; public Material[] material; public IntVector2 spawnPos; public GameObject benCopy, Ben; public int spawnPosx, spawnPosz, totalEnemyCount, maxEnemyCount, i, noti; public float timeToMake; int coordinatex, coordinatez; //public void Start(){ //spawnPosx = ; //spawnPosSize = spawnPosz; //int [] benPositionx = new int[spawnPosx]; //} public IEnumerator runBen() { WaitForSeconds delay = new WaitForSeconds(timeToMake); CreateList(); //gameObject.AddComponent&lt;MeshFilter&gt;().mesh = meshes[Random.Range(0,3)]; //gameObject.AddComponent&lt;MeshRenderer&gt;().material = material[Random.Range(0,2)]; while (totalEnemyCount &lt; maxEnemyCount) { yield return delay; PlaceBen(); //CreateBen(); } } public void CreateList() { List&lt;int&gt; listOfx = new List&lt;int&gt;(); List&lt;int&gt; listOfz = new List&lt;int&gt;(); while (i &lt; spawnPosx) { listOfx.Add(i); i++; } while (noti &lt; spawnPosz) { listOfz.Add(noti); noti++; } Destroy(GetComponent&lt;MeshFilter&gt;()); Destroy(GetComponent&lt;MeshRenderer&gt;()); //WaitForSeconds realdelay = new WaitForSeconds(timeToMake); //ChangeItAll (); //yield return realdelay; } public void PlaceBen() { int[] lystOfX = listOfx.ToArray(); int[] lystOfZ = listOfz.ToArray(); List&lt;int&gt; listOfx = ((int[])lystOfX).ToList(); List&lt;int&gt; listOfz = ((int[])lystOfZ).ToList(); coordinatex = lystOfX[Random.Range(0, spawnPosx)]; coordinatez = lystOfZ[Random.Range(0, spawnPosz)]; InstantiateBen(coordinatex, coordinatez); listOfx.RemoveAt(coordinatex); listOfz.RemoveAt(coordinatez); totalEnemyCount++; } public void InstantiateBen(int coordinatex, int coordinatez) { Instantiate( benCopy, new Vector3(coordinatex, 5, coordinatez), Quaternion.identity ); } }
1) You are declaring List&lt;int&gt; listOfx twice in two different scopes. Its probably better to parameter your functions and pass in the information the function needs or declaring those variables, if you intend to share state across multiple functions/methods, by declaring them in your class scope. Parameterizing is simply someting like: public int DoAThing(int with, int stuff) { return //something else as a result of with and stuff; } As opposed to: int with; int stuff; public void DoAThing() { //do things on with and stuff } The first is uses data to do a thing, the second changes the data (state). You want to avoid changing state explicitly as much as possible because that is where complexity exploding problems with timing and order come into play. 2) You variable names listofX and listOfX are ambiguous. Better to name them something more descriptive, or to find a way to remove the need for them since they both appear to temporary variables, simply pass the results directly. 3) Use visual studio if you can, the community edition is free. This will help you find your problems easier. VS Code is available with c# intellisense as well for non-windows machines. 4) Try to declare variables, unless they are really temporary, at the top of the scope. And your functions should be declared by order execution/priority. Ie, your methods come first followed by any helper functions that it used. Or ordered by the event loop if your application uses one. 5) Avoid extraneous bracket nesting/scoping. You have some while statements nested inside two bracket scopes each. It is confusing and doesn't actually do anything significant. edit: Sorry if that seems a bit pedantic. I'm not trying to be mean. Also, a bit more on to your issue. As other have pointed out, your variable is declared inside of your function scope, which is not available inside the class scope. As soon as the function is over with, the variables declared inside cease to exist.
Is there any reason the entire log file has to be transferred out constantly, rather than only when App1 finds the error message, or only a timestamped empty file as a notification?
Completely agree. ORMs may indeed be a good choice. I haven't tested it myself, but I hear that EF7 has excellent batching capabilities.
AppendText worked perfectly. Content2 was an unncecessary artifact from a previous attempt. Thanks!
Before you get into classes and what not, I'd work on just reading the text file and outputting it. I.e. literally try to get your program so it can read the various columns in the text file and output the exact same data back out. Once you can do that, you can work with manipulating it.
Either a) use a StreamWriter using (var writer = new StreamWriter(fileName)) { for (int i = 1; i &lt;= LoopNum; i++) { double numX = XArray[i]; double numY = YArray[i]; double numZ = ZArray[i]; writer.WriteLine(@"MoveSequenceItem %00 True X {0:0.000} Y {1:0.000} Z {2:0.000} 0", numX, numY, numZ); } } or b) use a StringBuilder var sb = new StringBuilder(); for (int i = 1; i &lt;= LoopNum; i++) { double numX = XArray[i]; double numY = YArray[i]; double numZ = ZArray[i]; sb.WriteLine(@"MoveSequenceItem %00 True X {0:0.000} Y {1:0.000} Z {2:0.000} 0", numX, numY, numZ); } File.WriteAllText(fileName, sb.ToString()); Consider looking into the standard format string for numbers, too. {0:0.000} can be expressed as {0:F3}. If you use string interpolation, you don't need to specify the format arguments and positions separately, either.
Thank you! I changed the standard format and figured out how to concatenate into the file. I appreciate the help.
Makes sense. I'm going to investigate using StringBuilder, as this code will get more complex as time goes on. I appreciate your help.
Give [NPOI](https://npoi.codeplex.com) a shot. Works well for reading and writing spreadsheets.
FTP is not an ideal choice for a messaging protocol. It's better than actual carrier pigeons, but that's about it. e.g. Do you have access to message queuing systems? Can App1 expose a http GET url for the other apps to read? 
How does APP1 make use of http? Genuinely curious.
I have no idea what that means but you still get an upvote.
Yea, ignore the guy who actually studies ORM and database design. It is far better to pay attention to someone who has never used anything but EF and thinks that the number of records in the database somehow magically affects ORM performance. 
I have been dying to use MediatR for sometime now, I see it being talked about more and more now.
I am thinking along those lines, but I just had a gut feeling that C# had some kind of way to handle on 1 of this group can be selected type thing that I could add on to. 
by exposing a get url. I'm pretty bad at things, but I can try to explain from what I know. REST APIs all use HTML verbs (GET, POST, PUT, PATCH, DELETE) to transmit data in formats such as json, xml, soap, etc. When you're submitting a form online, you're typically POSTing to a specific URL to send data to, say, a php script to handle that data. You can also use GET to send info and get return data. (GET and POST kinda do the same thing, but there's a long list of reasons when to use which, for what kind of data, etc) So app5 would 1) send data so that app1 would know it needs US data, through a GET request to the exposed URL from app1 2) on success, store the response in an array (ok, not array, but serialized data) 3) use the data however it needs app1 would open a url that it would monitor, fire an event handler when it receives a request, and shoot back all of the errors in either the US or Japan error queue, respectively. So basically app 5 and 6 could just query this url every 20 seconds, and app 1 could be loading all of these errors into a queue, as the errors are detected, to be delivered when it's queried by app 5 and 6. I only know how to do that in Node and PHP, but i'm sure there are web extensions for whatever app1 is written in. this may be slightly wrong, but I'm pretty sure that's the idea. (I google a lot when writing things, and don't really stick to one area for very long) Edit: I used "like" way to many times, and because formatting edit, but more of an update: all http data, even webpage data, is transmitted though http verbs. When you request a website, your browser sends a GET request to the webserver, with a bit of information, and receives the page data in response. Then it parses that HTML, and sends GET requests for all of the content like scripts, images, etc. You can also use HTML verbs as a messaging system, that takes a request, and sends info as a return. It's the same concept as a webserver, as they're the same requests and response format, but you're sending message objects that (typically?) don't contain HTML or "webpage data" edit #9001 and by "exposed URL", i mean, it could just be as simple as the IP address of the machine app1 is running on, with a port opened by app1. final edit: I'm so sorry, many things I've never had to explain to someone before, as I'm mostly self-taught, and often times am working alone.
You are running it in a forloop, try get the First value and try the extension method on that
You're not using the return value in the production code.
Is there a reason why the value wouldn't be modified while it's within a for loop?
I am just running through what I would do if it's not working in prod.
Ahh, I got ya. I'll give it a try.
OP's text wasn't entirely clear about this. I presume the apps receiving these logs have logic running based on log file contents other than the error 1017 condition.
The last piece of code seems ... redundant. Why not just return the IEnumerable you're iterating through?
Why not just try it?
&gt;use an EditableExpression as a API action parameter so your client can query with all the richness of LINQ. How nice, RCE built right into the API.
Been in the game a long time at all levels. As a hiring manager or the tech reviewer; I have never cared about your certs and only passingly care about your school or degree. You will show me who you are in person and I will put you on the whiteboard to show me your skills. That is where I decide how good you are and if you are worth hiring. IMO you would be better of spending the same time and effort building up your own personal site from scratch and posting it as an OSS project as part of your portfolio. I WILL (for many employers just having the gumption to post your code so willingly for review will get the thumbs up without even reading the first line) review your code and be more interested that you have samples for me than any stamped paper you show me. 
* If it were me, I'd want a solution file included. Probably not that big a deal. **BUT** what you have doesn't actually compile for me, so that's probably a bad sign to an interviewer. * The spelling in many of your variable names is questionable. Sorry if English isn't your first language, but this could impact how your code is perceived. (Then again, many programmers can't spell their way out of a paper bag, so...) * If you want to use WPF, you should learn about data binding. It might make some pieces cleaner. The call to Double.Parse(textBox.Text) in Intro.xaml.cs is one ugly thing that would be avoided. It would also **demonstrate you understand the technology.** * I don't want to be the guy who comments on the way you've named things in your code, as every development team will have its own coding guidelines, but I must point out that it's a bit unusual to name your classes with "Class" in the name. I understand that for Intro, you already had a class named Intro, so I'd encourage you to think about what your objects actually are when thinking of a name. Perhaps Intro should have been IntroPage or IntroDialog, and IntroClass could have been something else. In fact, "Intro" isn't a very descriptive name, other than saying this is the first page they see. * That said, you don't use a consistent style when naming variables and fields. CreateMealClass is bad for this. _budget, meal_mame/Meal_Name, costString/CostString. What is Ing? What is Met? * You might want to research the Single Responsibility Principle / Separation of Concerns, which is a major part of OOP. It's not entirely clear what the responsibilities of each of your classes are, and they could be cleaner and clearer if they were better defined. (This could also help you with your naming.) **I look for this when looking at an applicant's code.** * You might want to research the MVVM pattern. MVVM is a typical style that works well with WPF, and is one way of doing SRP with UI code. **They could be impressed by an understanding of this pattern.** * You've mixed UI code with non-UI code in a few places by using MessageBox. This is one thing that breaks SRP. * You create a new CreateMealClass in SplashScreenClass for no apparent reason. I might be able to give more tips a bit later. This project is a start, but definitely needs some tuning if you want to impress potential employers. Nevertheless, good luck with your job hunt. Feel free to post or PM me any followup questions.
That reminds me, I have some abandonware I wrote that uses SharpDX and SlimDX for some screen sampling of colors for DMX lighting. I have to get back to that project. Timely response.
I did say the use cases were 'crazy'! Seriously though, I'm more trying to spark ideas for readers than suggesting production ready things to do. Also, as the expression is mutabl e you can edit it to remove unsafe code. Where I could see this being useful would be for internal APIs.
Hmmmmmmmm. To my eyes, mutability is rather a disadvantage. Do let's ask: What kind of advantage do you see in mutability?
I learned about them two weeks ago. It is really make a huge difference - previously I did the stupid "build a string" step, which was okay for some values, but then I ran into a problem where I had to add 500-5000 values and I ran into the bulkCopy. Althought it is only useful if you going to insert a lot of value, for some, string still better.
Try dnSpy by 0xd4d, the author of dnlib and de4dot
Wait a second, NHibernate is still slower.
Didn't have my laptop with vs to hand and my brain needed an answer 
Following your comment I did a google and you are nearly correct! They do handle invalid inputs differently but its based on if the value is null rather than if the value is a string thats not a number. Basically if you pass in a null reference to Convert it returns 0 whereas if you pass in null to Int.Parse it throws an error.
The code you posted wouldn't work because the MyClass methods aren't declared static, but in general, yes: yield return is very flexible!
This is very relevant. Again not to discredit, but most certs actually test you've memorized a particular answer to a particular question. Not that you can problem solve and think in terms of your chosen stack. 
it's used with last value being fed back in : ushort last=0; for (ushort i = 0; i &lt; ushort.MaxValue; i++) { last=Rng(last); Console.WriteLine(last); } this is not really about random numbers, it's about predicability without seed, you can get predictability from this with a look of random, a really good example is blinking, in a true random blinking you would get rare instances of lots of blinks together.. which would look like a glitch, in this rng example this won't be the case
The `System.Net.Http` stuff is .NET 4.5+ (?), `HttpWebRequest` and `WebClient` from the `System.Net` namespace are available in older versions.
Didn't even turn it into a one line function with `=&gt;`, 2/10 for effort.
Are we kvetching about the formatting, or that naïvely translating a foreach loop into LINQ generates suboptimal results?
Note that it says you "can" convert it to a linq expression, not that you should. 
For a little more info, we dump all of our production data to these drives. A large group of users need to check this data visually, and at the end the program goes through and marks some metadata as checked. To give them rights, they'd essentially need full control of all data, which would leave it all vulnerable to any type of problem (cryptos/malicious etc) I only want these certain changes done, under the control of our software. The runas command works, but it requires manual entering of the password to switch the context to as far as I've been able to tell. It would require giving everyone the password or having it stored in an exe.
I have the code for opening a excel file in the project I am working on currently, it loads an excel sheet into a datatable which can then be easily queried or looped through. Unfortunately you need to download access/excel libaries to make it work atleast on windows 10. Have not tried other windows versions. *edit - forgot links to libraries, I needed to install both of these for it to work - https://www.microsoft.com/en-us/download/confirmation.aspx?id=23734 https://www.microsoft.com/en-us/download/details.aspx?id=13255 * If you want to change it so that it opens the excel file in read only mode (and does not throw an error if you have the file open in excel) you just need to add ReadOnly = true; to the connection string I think. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Data; using System.Data.OleDb; namespace Utilities.Excel { public static class ExcelFileOpen { public static DataTable LoadWorksheetInDataTable(string fileName, string sheetName) { DataTable sheetData = new DataTable(); using (OleDbConnection conn = returnConnection(fileName)) { conn.Open(); // retrieve the data using data adapter //foreach(var sheet in ) OleDbDataAdapter sheetAdapter = new OleDbDataAdapter("select * from [" + sheetName + "$]", conn); sheetAdapter.Fill(sheetData); } return sheetData; } public static List&lt;string&gt; GetSheetNames(string FileName) { OleDbConnection objConn = null; System.Data.DataTable dt = null; objConn = returnConnection(FileName); objConn.Open(); // Get the data table containg the schema guid. dt = objConn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null); List&lt;string&gt; ToReturn = new List&lt;string&gt;(); foreach(DataRow sheet in dt.Rows) { ToReturn.Add(sheet["TABLE_NAME"].ToString()); } return ToReturn; } private static OleDbConnection returnConnection(string fileName) { return new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + "; Jet OLEDB:Engine Type=5;Extended Properties=\"Excel 12.0;\""); } } } 
Of course but it's so *beautiful*
&gt;use a StringBuilder Yup SB is the way to guy. Much better performance and also strings are [immutable](https://en.wikipedia.org/wiki/Immutable_object) meaning that Str1 = Str2 + Str3; creates 3 objects in memory. Whereas a stringbuilder can be modified in memory without creating a new instance of an object. In addition in the code above those 3 objects persist until the garbage collector does its magic.
It's not a magic shortcut. The definition of the Select extension method is IEnumerable&lt;TResult&gt; Select&lt;TSource, TResult&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TResult&gt; selector) If _DoSomethingWithTheItem_ satisfies the selector delegate, it can be used as the selector. It doesn't have to be an anonymous methods or more specifically a lambda expression.
On a more serious note, once it's properly formatted in different lines it's most of the time very understandable and maintainable.
probably the first, but a lot of people don't know the second. 
I second this question.
I'm using Resharper too; but how did you do that? Is there a setting? Mine must be turned off.
Unfortunately, the client takes YEARS to upgrade anything. This also makes using any external 3rd party libraries a non-starter. I've changed it to use WebClient (System.Net instead of System.Net.Http) so will test that later to see.
A lot of things that are underlined green (such as his foreach declaration) will produce that lightbulb (forgot what VS calls it) off to the left, which opens a dialog giving you the option to accept ReSharper's suggestions. Some of them are helpful, some are ridiculous. You could go either way on whether OPs post is more readable or not, but I've seen tons of times where what ReSharper suggests is fewer lines, but much more difficult to read or refactor later.
I hate the query syntax. But if you rewrite to Linq methods it does become better. public IEnumerable&lt;Pair&lt;Card, int&gt;&gt; SectionsOfTownInContact(List&lt;Connection&gt; connections) { return connections .Select(conn =&gt; new Pair&lt;Card, int&gt; { First = conn.First, Second = (0 == conn.Second % 2) ? (conn.Second / 2 + 1) % 4 : (conn.Second / 2 + 3) % 4 }) .Where(x =&gt; TerrainType.Town == x.First.Sides[x.Second]); } You can now use SectionsOfTownInContact in another Linq expresion and connections will only be enumerated when you enumerate the results of that expression. To fix the method the way you wrote it I would change it to this: public IEnumerable&lt;Pair&lt;Card, int&gt;&gt; SectionsOfTownInContact2(List&lt;Connection&gt; connections) { foreach (var conn in connections) { var card = conn.First; var gate = conn.Second; var side = (0 == gate % 2) ? (gate / 2 + 1) % 4 : (gate / 2 + 3) % 4; if (TerrainType.Town == card.Sides[side]) yield return new Pair&lt;Card, int&gt; { First = card, Second = side }; } } 
Just FYI, you're missing the wrapping of the Linq expression and a .ToList(). The way Linq expressions are lazily evaluated, the Linq version isn't "frozen/captured/whatevered" inside a list, so it's pretty different behavior to what your original list returning version was. The latest version of ReSharper is generating the following for me, which seems to maintain the List/Freeze semantics, maybe older versions of ReSharper missed that? Or if you were just trying to Doge /u/horstenkoetter then please ignore all this, but it is something to be mindful of. private static IEnumerable&lt;DateTime&gt; GetTimes() { var ret = new List&lt;DateTime&gt;(); foreach (var i in Enumerable.Range(0, 3)) { ret.Add(DateTime.Now); } return ret; } private static IEnumerable&lt;DateTime&gt; GetLinqTimes() { return Enumerable.Range(0, 3) .Select(i =&gt; DateTime.Now) .ToList(); } 
I don't see any reference to password salting. Only a fixed hash. Why are you rolling your own auth instead of using identity framework?
First...five years isn't THAT long. Web tech hasn't changed THAT much. The browser stack is far better, and there are definitely new frameworks. But HTTP is still HTTP. Should you become versed in web dev? Absolutely. Brush up on MVC 5 / ASP.NET Core. Run through some current front end tutorials on CSS, Angular, etc. They're more "first class citizens" than they were five years ago, for certain. As for certs, it's up to you. Just build stuff! If you really dig it, sure...spend the time, get the paper. Don't dwell on it; rarely will that determine whether you land your "dream job". It's still about what you can "do".
https://msdn.microsoft.com/en-us/library/bb387098%28v=vs.110%29.aspx
from dual; ?
 if (Hashing.ValidatePassword(password, User.Password)) { BaseLogin Login = new BaseLogin { UserID = User.Id, Token = Guid.NewGuid().ToString(), LoginDate = DateTime.Now }; db.Logins.Add(Login); db.SaveChanges(); GenerateCookie(User, Login.Token); return true; } The password is salted and then hashed when the user account is created. This function basically does the same with the password from the login request in order to compare the salted+hashed output values. If the new value matches what's in the database, then the password validates: public static bool ValidatePassword(string password, string correctHash) { // assumes user just registered //if (String.Compare(password, correctHash, false) == 0) //{ // return true; //} // Extract the parameters from the hash char[] delimiter = { ':' }; string[] split = correctHash.Split(delimiter); int iterations = Int32.Parse(split[ITERATION_INDEX]); byte[] salt = Convert.FromBase64String(split[SALT_INDEX]); byte[] hash = Convert.FromBase64String(split[PBKDF2_INDEX]); byte[] testHash = PBKDF2(password, salt, iterations, hash.Length); return SlowEquals(hash, testHash); } Although now I see it, I probably need to remove that if statement. Haven't looked at this for almost a year. &gt; Why are you rolling your own auth instead of using identity framework? That wasn't in the MVC tutorials I've learned from so I never learned how to. Now you've actually named it, I can google and learn.
Storing critical information such as user identity, role and validity in a cookie is a really, **really** bad idea. Users who can authenticate in any way or are able to gain knowledge of the authentication mechanism would be able to impersonate other users, change their own role to a more privileged one and so on. At the very least the cookie must be encrypted *and* authenticated, which is very hard to get right if you do not have extensive cryptographic expertise. Do not roll your own security. Also, what is `Hashing.ValidatePassword`?
dual is mostly a thing with Oracle, not a part of the SQL standard. It's definitely not a thing with, say, SQL Server. Oracle is an understandable source of nightmares, though.
Yeah, just pointing out that the ToList drastically changes the behavior by forcing eager Linq evaluation and preventing the Linq query from being executed multiple times. var linqTimes = GetLinqTimes(); Console.WriteLine("Times: {0}", String.Join(", ", linqTimes.Select(t =&gt; t.TimeOfDay))); Thread.Sleep(500); Console.WriteLine("Times: {0}", String.Join(", ", linqTimes.Select(t =&gt; t.TimeOfDay))); Executed with my previous example GetLinqTimes() will output the same values both times. But if you remove the .ToList() from GetLinqTimes(), you'll get different values each time you enumerate linqTimes.
Read this and start over. [Auth &amp; Identity](http://www.asp.net/aspnet/overview/authentication-and-identity)
Yeah that's why I've taken it out. Your comment, however, is not even remotely useful given that I'd already pointed out the problem that you've just commented on.
 /// &lt;summary&gt; /// Creates a salted PBKDF2 hash of the password. /// &lt;/summary&gt; /// &lt;param name="password"&gt;The password to hash.&lt;/param&gt; /// &lt;returns&gt;The hash of the password.&lt;/returns&gt; public static string CreateHash(string password) { // Generate a random salt RNGCryptoServiceProvider csprng = new RNGCryptoServiceProvider(); byte[] salt = new byte[SALT_BYTE_SIZE]; csprng.GetBytes(salt); // Hash the password and encode the parameters byte[] hash = PBKDF2(password, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE); return PBKDF2_ITERATIONS + ":" + Convert.ToBase64String(salt) + ":" + Convert.ToBase64String(hash); } 
Abstract classes are redundant with IOC/DI. You can couple all you like but if you want flexibility, especially in agile, then you don't want a huge dependency chain throughout your projects. Abstract classes have their place, but it's hard to justify one in place of an Interface.
I need to store that information **somewhere** in order to verify that the user has permission to access the data. Sessions are not recommended for reasons that nobody will tell me now you're telling me its a bad idea to store it in cookies as well. Seeing as I can't exactly hide it up the user's ass, where then shall I put it? &gt;Do not roll your own security. Because other people don't make mistakes? Use a commonly implemented solution? A safe whose lock is the same as the lock on 7800000000 other safes is not a secure safe. I pasted that function in another comment on this thread: https://www.reddit.com/r/csharp/comments/4k2n65/c_is_my_login_sufficiently_secure_or_does_it_need/d3bmx1h
Here is a class I made some time ago to read sheets from a XLSX file: http://pastebin.com/BV2JwP09. It depends only on SharpZipLib. In my case I was expecting a uniform 2D array with no gaps in rows or columns. If you're going to have gaps then this may not work well.
"Your code can be made to compile slower, run slower, and be harder to understand" 
People use "repository" a lot of ways, but in DDD, the purpose of the repository layer is not to provide a generic interface to everything your db can do, it's to provide the interface required for the problem at hand. For example, in an accounting app, your repository layer wouldn't have update/delete.
Can you show us where do you construct your button ? Also try to assign to your field a null value
Allow me to amend my position. The word "coupling" is used by people who have no idea what they are doing and are instead operating purely on a mixture of superstition and willful ignorance. 
It's not just here, it's on places like Stackoverflow with highly rated posters who essentially tell you to do everything you can do before reverting to `out` and `ref`.
I just finished a project with reading Excel data, and tried out several different libraries for the job. ExcelDataReader was the easiest to use.
Var would imo make more sense
I like the query syntax for joins. For everything else the lambda syntax is better
OP: either you want help, or you don't. You're getting lots of good advice from the commenters in this thread, and your first reaction has been to be a dick in return. You're making a number of mistakes with your code as many people here have noted. You have two choices: 1) you can throw attitude at each of these people trying to help you, and choose not to learn from the situation; or 2) you can reflect on the input your getting and show appreciation that others are taking the time to help you.
I'd be more than happy to have implicit typing on private fields (using the var keyword), but doing this on a public field seems like it would make the public interface of your type prone to unexpected changes. Doesn't seem like a huge win, regardless.
&gt; You're making a number of mistakes with your code as many people here have noted. Which people are these? Mostly all I see is people asking "where's this function?", "what's that do?" [This comment](https://www.reddit.com/r/csharp/comments/4k2n65/c_is_my_login_sufficiently_secure_or_does_it_need/d3bmzsp) so far has been the most helpful as it indicates one or two problems, but provides no suggestions on how to rectify those problems though I will admit, encrypting the cookie is a good idea but I don't have the experience to ensure that its done correctly. &gt; 1) you can throw attitude at each of these people trying to help you, and choose not to learn from the situation; Learn what exactly? "Don't roll your own security"? Yeah I've got that but the die is cast and apparently it'll take throwing away 3 months worth of work to "uncast" it. You yourself have indicated "a number of mistakes" with my code, but you've followed the trend of not elaborating at all as to what those problems are and how I can fix them - this doesn't help me. You don't go to a mechanic to tell you that there's something wrong with your car. You go to a mechanic to tell you *what* is wrong with it and to fix it. Understand, its not that I don't appreciate the time people are taking to look at my code and all, but I don't feel like the feedback I'm getting is at all constructive. Yes I'll look into using Identity Framework but thats at least another week before I'm competent to implement it and at least another week after that to actually do the implementation. Currently I've got code that I understand and can modify if needs be.
It's actually fairly standard to store everything as one value. The advantage is that you can increase the cost or swap the algorithm without having to invalidate older passwords and complicating the storage schema.
&gt; 3. Don't compare boolean with boolean. Write !x.Deleted instead of x.Deleted == false. I disagree with this, for readability. It's a lot easier to miss a bang when reading long conditions. We've found heaps of bugs in code reviews coming from misreading of conditions. Since there's no difference in generated IL, we suggest `if( thing == false )` instead of using bang. 
Which is also in C# and use [Linq](https://github.com/ShareX/ShareX/blob/fbd46041926b52c2e911552d8f3b947ca6c476fe/ShareX/UploadInfoManager.cs).
I like it. Good stuff :-)
While I don't exactly have much to add currently other than the "don't roll your own" argument, /u/AngularBeginner has provided a very nice rundown [here](https://www.reddit.com/r/csharp/comments/4k2n65/c_is_my_login_sufficiently_secure_or_does_it_need/d3bnayn) that I think is beneficial for you.
I had blocked /u/AngularBeginner for harassing me relentlessly on very many of my posts across very many subreddits, however, I threw the link to his comment and I see a wealth of information and excellent points so I've now unblocked him because that comment is amazing. In deference to the whole "don't roll your own" argument - I get it already. People have been telling me this literally for hours now, but my reason has been dealt with early on in this post's comment history. I was unaware how to implement IdentityFramework that comes with MVC - I didn't even know what it was called - so I did the next best thing and wrote my own. Its fun writing my own stuff though. More fun, I think, than implementing something that someone else has written anyway.
Easier to read. More logical (you already have a boolean, why compare a bool with a const bool).
 &gt; but I've seen tons of times where what ReSharper suggests is fewer lines, but much more difficult to read or refactor later. Literally every time it uses Aggregate() That method is balls 
See, I disagree. I think &gt;if(value == false) is easier to read than &gt;if(!value) for the most part. And as for why compare a bool with a const bool? To see if the bool matches the const bool. I don't understand how that is illogical. It has the same goals, after all, as !value
It's fair that you have your opinion, and I have mine. I consider my version more readable by far.
OP still needs a database technology to use that the interviewer can run easily. There is an in-process mini SQL Server thing I've heard about but I don't know much about it. Or they could just go with MySQL or something else equally portable. Or even just a file. 
Reduce/Fold/Aggregate is a staple of functional programming; it certainly isn't "balls".
I've gone through multiple iterations of getting MCSD/MCPD certs over the last 10 years. While everyone knows people just do brain dumps and pass, for the folks that read through the exam books thoroughly, you do get a quick and vast crash course on all the things Microsoft offers for a particular technology. Stuff you wouldn't think of or be exposed to on the daily. I mean, when I see it on a resume, I definitely ask pointed questions to the candidate in an interview to make sure they know their stuff. In your case, I'd definitely see the initiative to learn an area you had been lagging behind on as a positive. Same could be said for a side project as well though but that won't catch the eye of recruiters, as much. I would however bundle any of that with going through some Plural Sight tutorials to get some focused hands on projects. I'd definitely recommend deploying and configuring whatever you build out to Azure (or some cloud hosting) as that competency is going to continue to be huge in the coming 5 years. Edit: Personally, in your case, I'd go the Azure cert route and do Plural Sight MVC tutorials to build an app that gets hosted within the cloud environment.
Let keyword is awesome, especially where you have multiple from statements. The methods really have their wheels fall off when you have multiple selects and/or selectmany statements 
How do I sign up?
Would have been more impressed with this. let side = (gate / 2 + gate % 2 * 2 + 1) % 4
I don't mean to come off as defensive. Its just that everyone's telling me "don't do this" or "don't do that" but nobody telling me what TO do except to use a proven security solution but then again nobody's suggesting anything I can have a look at. Its just frustrating is all.
Readability is about a -47
The methods ReSharper creates from foreach statements that have aggregate are. It uses it extremely nonsensically
In this case i'd go with XDocument too (for direct editing). When dealing with more complex xml files, have a look at serialization/deserialization with XmlSerializer too. https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer(v=vs.110).aspx
but muh vertical space
Look into jwt httponly cookies. That way the cookie cannot be accessed from others. The jwt is encrypted as a standard. I have done this with an angularjs project with asp.net webapi backend and it works great. 
14. WHY IS THE PASSWORD NOT SALTED HASHED? THAT'S 101 OF SECURITY! This is a website he said, not an application. Hashing the password on the client is tedious and only slightly better than not. SSL would be much better than any home-based crypto. And would be a must.
A few things. You need an expiration, and it has to be in that token. Your method is manually noticing a bad user, but that's always going to be late. A test account token you made now, will live forever. You have to implement SSL, or all of it won't work. You should really look at Json Web Tokens https://jwt.io as this does exactly what you are.. but better. It's securely hashed and the token won't need to be stored entirely. You're rewriting the wheel, it's never going to be as smooth. JWT is implemented for .net very easily combined with OAuth. 
&gt; Being 100% self-taught I used to use if (string == "some value") and a friend told me not to do it that way and recommended String.Compare as an alternative. The man's been doing this for pretty much all of my adult life so I trusted that he'd advise me correctly. Probably in error on my part, I never thought to investigate other, maybe better alternatives. Using `value == "string"` is fine for equality checking, and in fact uses `string.Equals` which uses the `StringComparison.Ordinal` (the fastest type of checking there is) which is the same thing as using `value.Equals("string")` or `string.Equals(value, "string")` depending on whether or not `value` could be null. `string.Compare` should only be used when needing to sort strings, and usually the overload with culture (or invariant culture) is used. You can find some great string information over at MSDN: [Best Practices for Using Strings in the .NET Framework](https://msdn.microsoft.com/en-us/library/dd465121.aspx). 
While I love Sql and working in Sql Server/MySql/Mongo I personally I can't stand the sql syntax in C#, its distracting and forces my brain to switch gears... 
&gt;For everything else there's mastercard. 
That's not ReSharper reformat 
&gt; dual is mostly a thing with Oracle MySQL guy here, what?
For setting certain code to run in Production vs Debug, here's a decent stack overflow article http://stackoverflow.com/questions/3409598/need-net-code-to-execute-only-when-in-debug-configuration Personally, I've mostly used the preprocessor version. Just make sure to use the debug drop-down next to the run button to switch between release and debug. 