TIL I am lucky.
Performance. Ease of use. Clarity of intent. The use of statics has been part of FXCop guidelines forever.
C# isn't exclusively a FP language, but if you aren't using FP concepts then you are really limiting yourself. Also, F# isn't exclusively a FP language either. Hell, it's based on a language that is explicitly a hybrid between FP and OOP.
Hopefully this will help you with the difference between functional and object oriented. https://en.wikipedia.org/wiki/Comparison_of_programming_paradigms
Well start! Visual Studio is awesome!
If you can't implement every LINQ operator with SelectMany you're doing it wrong /s
I am strongly comfortable with LINQ it's all that work i did with Underscore and the built in functional programming. 
delegates and lambdas are similar...most people are more comfortable working with lambdas as they show up more with LINQ. 
&gt; the problem with the script above is when it collides with a wall, it "breaks" the wall instead of sliding near it Not really a C# question, but you need to cast a ray from the target model (i.e. the player model) to the camera location, and re-position (and re-orient) the camera according to the first hit (or optionally the first hit on static geometry). I don't use Unity so I don't know any specific code, but that's the gist.
in the particular case the difference is basically that F# supports currying and values are immutable by default. You can write pure functional code in any language, if you want. F# doesn't even force you to, it just encourages it slightly. I love F#, but not because of the 'functional' nature of it. 
If I may offer up an entirely different kind of device. 1. Best practices are suggestions, the key to being great is being comfortable ignoring them. Every problem is different. 2. Learn how C# actually works. Be able to inspect the bytecode, or resulting assembler of code you write, so that you can check for performance problems. 3. Learn how to benchmark run time and memory issues (check out benchmarkdotnet) , learn how to profile your code intelligently, so you aren't guessing at how to make code efficient, you will actually know. 4. Understand the hardware your code runs on, so you can make better default choices when you write code. Do you know how long a request from L1 Cache takes compared to ram? Do you know how to take advantage of L1 cache? 5. Understand .NET itself. Do you know that foreach on any collection other than array causes allocations and is slower? Do you know that Linq can be many times slower than imperative loops, AND causes allocations? Do you know why allocations can be a problem? Do you know when it tends to be net beneficial to change a class to a struct, and why? 
Not something I would use in prod, and it seemed kinda pokey, but couple this with WebAssembly, and it seems at least interesting. C#/XAML is very elegant compared with the current technologies for SPA type apps - IMHHO. Gives me hope..
I liked this book called "Effective C# - 50 Specific Ways to Improve Your C#" https://books.google.com/books?id=d936ujpl_V8C&amp;source=gbs_similarbooks Also, Programmer Competency Matrix: http://sijinjoseph.com/programmer-competency-matrix/
As others have said, immediate window. In addition, declare independent variables for each of those conditions with descriptive names and then check them (could use the watch window out simply hover). Your intent is not clear strung together like that in a series of ORs. Like another user said, put it in a private method that returns a bool with a descriptive name.
Do that anyway.
Gonna flair this as "Solved" since you got a good answer in your [other post](https://www.reddit.com/r/Unity3D/comments/55k83y/camera_script_soulslike_problem_with_unity_541/) and seem to be more or less happy with another utility/script.
This is not really correct. C# has plenty of functional features (including first class functions), and F# is not a purely functional language. It might be better to claim that F# is functional *first*, and C# is OO *first*, but neither's limited to a single paradigm. (Very few languages are strictly limited to *just* OO, or *just* functional, or *just* procedural. Any programmer (regardless of language or platform!) worth their salt should understand functional programming, at least in principle. (I don't think you should have to speak in continution passing style or monadic transformations, but you should at least grasp how functional programming differs from procedural, what advantages each has, and how they might interleave with an OO paradigm.) LINQ is strictly functional, for instance, and pure functions tend to make parallel processing much easier to deal with.
Being exposed to multiple languages means being exposed to multiple ways of solving problems, and some problems are more easily solved with one methodology than another. This isn't an uncommon piece of advice for programmers: you should be exposed to multiple languages, and multiple programming paradigms. If everything you know is imperative, procedural, and object oriented, a functional system utilizing lazy evaluation (like LINQ, but also like some caching models!) may throw you for a loop, even if you're not changing languages. And there are advantages to other programming paradigms. Procedural OO isn't some be-all, end-all approach to programming.
Do solve some problems with parallel LINQ. PLINQ will show you some false assumptions you make quickly, figure out why it breaks under parallelism. You'll learn a lot about threading 
Well, in the example I provided, the increment command is binded to "appearance", which is the name on an int field in my "character" class. However, Execute takes an obj as a parameter, on which I can't simply do "++" or "+=1" or whatever. I have to unbox it. But once it has been unboxed, I don't know how to say "that new value is the new value of the apperance field of my character instance", or at least not without a return. 
Ok thanks! I'm studying it now.
Hi, thanks again for the time taken to answer. public partial class MainWindow : Window { Character myCharacter = new Character("random", "your name"); public MainWindow() { InitializeComponent(); this.DataContext = myCharacter; } } as you can see in the quote above, I bind my character as the datacontext of the window. I don't really understand two points in your example : --what does the action do, finally? you invoke it , but unless the action is "messagebox.show()", I don't see where you define it. --How is your example related to my situation? I guess that your "DataContext="{Binding RelativeResource={RelativeResource Self}}" in the view definitions allow you to say that the parameter received in execute is still the button in the view. However, my objective is to change the content not of the button I click on but of another value. Let's say you have the same example with a label under the button. How would you do that a click on the button changes the label's content? You have no reference to it via the sender, and you have no reference to it via the binding.
Has it been explained to you why "magic numbers" are a bad thing? How do you think your solution makes that bad thing better? Magic numbers usually refer to mysterious numbers with no apparent meaning. For example: int seatsRequired = numGuests * 2; // why 2???? That 2 is a magic number. Your fix is: int seatsRequired = numGuests * TWO; What extra information does that give? None! How does it help a reader understand the code? It doesn't! In fact it makes things worse because the reader can't be sure (without searching your code to find the definition) that TWO is actually the number 2 at all. So you're causing the reader of your code to go off looking for definitions of constants in the hope that there's some meaning there, but then they finally come across: const int TWO = 2; Aarrggh! No answers there! It would be much better written as something like: int seatsRequired = numGuests * SEATS_PER_GUEST; and elsewhere defining the constant SEATS_PER_GUEST (along with a suitable comment explaining why it's that number). // Each guest is allowed to bring one partner. const int SEATS_PER_GUEST = 2; That substitution adds *meaning* to the code. If you want to change it later, you only have to change one line of code and all formulae that use it will continue to work correctly. If I'd chosen to use `TWO`, and later the value had needed changing (wait! now each guest can bring two people!), I'd either end up with the nonsensical `const int TWO = 3;` or I'd have to go through all my code, find all occurrences of `TWO` and change it to `THREE`. Ugh! In your case, where it's just a constant from a formula, it adds no meaning to the code, just the opportunity for obfuscation and oddly behaving code (imagine someone somewhere else in the code base doing `const int TWO=3;`). It's making your code **less** clear/readable/understandable, and that's a bad thing. Do your future self (and any other maintainers of your code) a favour - always strive for clarity in your code. To make your code more clear, add a comment explaining the formula and preferably a reference to a resource about it. For example, I'd prefer: // Use cosine rule to work out the angle // A = acos ( (b² + c² - a² ) / 2 * b * c ) // See: http://www.bbc.co.uk/schools/gcsebitesize/maths/geometry/furthertrigonometryhirev2.shtml double radians = Math.Acos((sideb * sideb + sidec * sidec - sidea * sidea) / (2 * sideb * sidec)); Which is much clearer, IMO (note also the change of variable names to more closely match the formula). Anyone reading that code knows not only what it's calculating, but how it's doing it, it's clear that the 2 is just a constant from a well known formula, and there's a URL for further reading (and the name of the formula) if something's not quite obvious. For additional clarity in your above code, I'd create a RadiansToDegrees() method and call it from both CalcAngleA() and CalcAngleB(). Then you have: static double CalcAngleA( double sidea, double sideb, double sidec ) { // Use cosine rule to work out the angle // A = acos ( b² + c² - a² / 2 * b * c ) // See: http://www.bbc.co.uk/schools/gcsebitesize/maths/geometry/furthertrigonometryhirev2.shtml // Note that Math.Acos returns radians, but we want degrees, so we need to convert the result. return RadiansToDegrees( Math.Acos((sideb * sideb + sidec * sidec - sidea * sidea) / (2 * sideb * sidec)) ); } static double RadiansToDegrees( double radians ) { return .... ; // Formula left as an exercise } 
Post code plz?
HELLO! I ALSO AM HERE TO HELP FELLOW HUMANS LIKE US. HERE'S A FACTORY OF TASKS THAT I FOUND IN CASE OP COMPLETES YOURS: https://msdn.microsoft.com/en-us/library/system.threading.tasks.taskfactory(v=vs.110).aspx
I don't have code for it, I'm using the interface for the construction of the form itself. Here's a video however; https://youtu.be/lwA3QZc-glo (37 seconds)
Can you post it on GitHub?
 // Gets rid of the ReadLine / null bit and makes it easier to read List&lt;string&gt; textboxLines = textBox1.Text.Split(new string[] { Environment.NewLine }, StringSplitOptions.None); foreach (string line in textboxLines) 
I've been looking a tiny bit on the web and can't find "advanced" tutorials for Interface. I understand the "why it should be good", but not really the "how to make it good". Could you provide examples/links/books demonstrating how Icandothis is REALLY useful ? :-/
If you want to check those values in debug mode, put the values into their own variables instead of running those functions within the If condition itself. You can then mouse over and inspect them. But do consider refactoring this code.
At the moment, the microphone that comes as part of the Microsoft Lifecam. https://www.microsoft.com/accessories/en-gb/products/webcams/lifecam-cinema/h5d-00014 
How will I draw on Page? Can you give me some clue. I'm a little bit frustrated with this because I also tried to draw in Print method but still not working :( Help pls 
&gt;This has nothing to do with quantum mechanics. Of course it does. &gt;All he's doing is generating a list of all the tiles that could fit in a spot based on the existing neighbors and picking one. Yeah, like this: https://upload.wikimedia.org/wikipedia/commons/7/7d/Wave-particle_duality.gif
Can you provide an example on how this is more useful than a unit or integration test? I don't really see it, but want to believe. 
Sure. So we have a legacy application that is used very heavily by one customer. Basically when it is all said and done it produces some XML that gets submitted to an endpoint. What we did we copied and updated as much as the logic we could to a new better modern app. But we didn't want to take a gamble and potentially impact thousands of customers. So we use Scientist and tell it to do two things. Run on the existing path (old legacy app), and run on the new path (new modern app). Serialize the XML, compare them and if they differ in anyway dump them to Cassandra for further investigation. The nice thing is that we can continue to use the old path, while making sure the new path fully confirms to the actual output from the old path. We started using it within our team, and then once we shared it with the company a lot of other teams started to use it for pretty much the same purpose.
You can use an out of the box solution like Auth0 or you can create your own credential provider that uses authentication tokens to validate for each website. You login to one website, the SSO provides a token. That token is valid for all sites when they contact the SSO service. It's fairly simple to do. Basically the site will contact SSO to see if the user attempting to login has a valid token. You'll need to pass through the user id. If this is Windows Auth using AD this is easy as just getting the User from the request. Cross check this against a database for permissions and return/refresh a token.
Pretty cool, is it a PCL? This looks useful for a game I am making on Xbox.
Thank you. So, do you run scientist as a test or in production code? That kind of is the missing link for me to fully understand. 
Production code.
Think of it like passing a function around like it was a class object. If you're doing some operation on a list, you can pass in the thing that's applied to each list element. It has some similarities with the visitor pattern in OOP.
Represent yourself as Class A. You are working as a lego builder. Like many creations, it uses a lot of different parts. So you have a List of parts and find a method to easily build a house. That's great, but now your friend comes over and he's Class B. He wants to build the same kind of walls to help make a bigger house. So you create this method as a delegate, and it outputs the Wall the same way as you want everytime. Like sharing instructions, and you can even add or change them with your own building still. Can we do the same thing in different ways. Yes, we can have Class B reach into Class A to "use" the same instructions. But, it can be messy or poorly implemented. In the end, being able to simply point to the instructions like a method/function pointer is the best way to simply share a specific code block. Instead of creating extra classes/interfaces to achieve similar goals. Less work, easier to maintain.
Interfaces are really powerful when used in Dependency Injection context. For example. Let's say you have the following interface: interface IDateFormatter { string FormatDate(DateTime date); } Now let's say you have a Display class, where you want to display a formatted date. Using constructor dependency injection you'd do something like this: class Display { IDateFormatter _dateFormatter; public Display(IDateFormatter dateFormatter) { _dateFormatter = dateFormatter; } public void ShowCurrentDate() { string date = _dateFormatter.FormatDate(DateTime.Now); Console.WriteLine("Current date: " + date); } } Now lets say you have two ways of formatting dates in mind. The US and the European way. So you end up with the following two implementations: class UsDateFormatter : IDateFormatter { public string FormatDate(DateTime date) { return date.ToString("%mm-dd-yy); } } class EuropeanDateFormatter : IDateFormatter { public string FormatDate(DateTime date) { return date.ToString("%dd-mm-yy); } } A client would use the display function as follows: ... IDateFormatter dateFormatter = new UsDateFormatter(); Display display = new Display(dateFormatter); //dependency injection display.ShowCurrentDate(); ... or ... IDateFormatter dateFormatter = new EuropeanDateFormatter(); Display display = new Display(dateFormatter); //dependency injection display.ShowCurrentDate(); ... So what did we gain with interfaces? Look at the Display class. You can now handle displaying dates in any format, without ever having to change the Display class. Why? Two reasons. First, it only knows about IDateFormatter interface. It is completely ignorant of specific implementation (Us or European). The second reason is that we took that dependency on IDateFormatter interface, and injected it into the Display class. That way if you ever want to display a date in a different format, all you need to do is inject the formatter you want, without the need to modify the Display class. If you didn't use an interface, you would have to create (or pass in) an actual type instead of a generic IDateFormatter. And if you passed in an actual type (like UsDateFormatter, or EuropeanDateFormatter, you'd end up having to change every line of code, that explicitly mentioning that type's name.) In my contrived example, we only used an interface with a simple, single method. You can imagine this technique becomes much more important as interfaces grow. They're also indispensable when it comes to Unit Testing. Why? Because I can take the class I want to test, and instead of injecting my production dependencies, I can inject their test (mocked) versions. Mocking frameworks work really well with Interfaces. You pass in an interface, and get an implementation for free. EDIT: Coincidentally the following article has just been posted on CodeProject. Check it out for some good DI notes: http://www.codeproject.com/Articles/1135745/Dependency-Inversion-Principle-DIP
They're reference types, but you don't pass them between the methods. You pass _copies_ of the pointers or references to the object. One you start in the method, you essentially have two different pointers to the same list. When you assign the new list, you're just making the local pointer in the method point to the new list. The original pointer in the `Main` method is left unaffected by this (because it's just a separate, independent copy). If you wanted both pointers to be updated when assigning the new reference, you would use the `ref` keyword.
I tried using Fiddler and it says that I don't even try connecting to Netflix until I try connecting with https://www.netflix.com/browse. Any ideas why?
I See. Thanks a lot. Sounds like something we should try. 
It is not a PCL project, but I believe you can run it pretty much everywhere since it doesn't have any external dependencies. It can be really useful for games indeed. I'll use it to decode patches coming from the server in a multi-player game. Cheers!
Well, you need to retarget it for PCL, otherwise it won't work.
Func&lt;&gt; and Action&lt;&gt; ARE delegates, they're just standardized and suggested in most cases now rather than rolling your own.
How in the world can paper help in a code review?
Old project, old way of doing it. I just don't want to waste a ton of paper and ink because Microsoft decided to remove a check box from the print dialog.
Was that very dense algorithmic code, like the inner parts of a game engine or something? In most of my work I couldnt digest a codebase without an IDE that lets me quickly jump to class definitions and method references. But the whole -multiple dudes add their 2cents to the codes and meet up for the mop up- deal really sounds intriguing. 
perfect thanks
Look into closedxml. Then you can read excel data to datatable and use as datasource
I know I appreciate this must be frustrating for someone who knows what they're doing but I'm a basic bitch and the more googling I do, the more confused I get. 
Ah that is making a bit more sense now. I thought the ref key word was just for passing value types for ref. Clearly I was wrong 
Yes I think so? It seems to run okay! And then I assumed I had to do the ToInt32 thing? But I get like 100 errors! I think it's okay that I don't validate it, but yeah I know in reality people will input any old thing; I myself input 8 digits the first time I was asked for an octet! I'm still reading the article you sent me! Perhaps there's a sneaky in there that even i can use without cocking it up! 
Thanks I appreciate! I am a very thorough person normally, I am just up against it for this particular assignment as I got my due date wrong! But I promise for any and all of them in the future, I shall avail of these resources!!
Move past how to do something and incorporate knowing why things work the way they do. The one who knows how and why is the sign of true understanding as opposed to the how folks who get by with rote memorization/code regurgitation.
The code was not what I would call deeply algorithmic, but it was security-sensitive and was going to ship to millions of users automatically (as an update) so the quality bar and level of scrutiny were quite high.
Removed: Rule 3, Rule 4.
I don't know who the hell downvotes declaring independent variables for something like this. Maybe not every single one, but 59 conditions strung together in a single if is a nightmare.
Using byte arrays could be problematic for leather files. Would it be possible to support streams?
That is an example of a connection string you use with ADO.net (System.Data.Oledb specifically) connection object to access a table inside an Excel spreadsheet. 
I don't believe I have done that? 
The error is quite clear, isn't it? You instruct in your Razor view to render your array `var datapointArray = @datapoints;`, and that's what he does. Razor will use the `ToString` method of the argument, and for a decimal array this will print `System.Decimal[]`. You probably want to render the `datapoints` variable as JSON using something like JSON.NET: `@JsonConvert.SerializeObject(datapoints)`.
My thoughts too
I'm sure it can be done, although I'm on my royal throne (toilet, whatever) right now and cannot check. Have you tried just opening the files up in Notepad++ if all else fails? I think that supports printing with line numbers.
&gt; If I decide to use a library then I must think that the cost of using it is lower than the payoff. True, but you have to take into account that a whole team need to do manual mapping, and sometimes during revisions. I think it still adds value for consistency. (Although its a long time ago I used a mapper)
Benchmarks would be really great. I'll try to do it during this week. :)
Nice! I'll try to include bsdiff in the benchmark as well. I had considered using bsdiff in my JavaScript server, but the diffs generated were quite large. It seems that Fossil's algorithm is not very well known. It was created by the same author of SQLite, so it has some credibility.
Especially with a team the difference manifests even more. My two devs (one quite junior and one somewhat talented guy with 2 years of experience) came to me with quite a bit AutoMapper problems that I was able to solve instantly (i.e. I would not have ran into them at all) but they were confused. At one point they were trying to follow the mapping pattern and tried to implement complex logic not in the service code but in the mapping configuration because they reasoned this is where the code goes if something needs to change between the DTO and the Entity.
What is the command line terminal with lambda? 
I often get asked that, it's ConEmu see https://conemu.github.io/
thanks
Why not rewrite in WPF? Unless you want to put the app I the app store, it'd stick with WPF.
&gt; the concept of Inversion of Control, which is all about flipping dependencies That was the part that bothered me. IoC isn't necessarily about Dependencies. My assertion is that you should have just said "Learn about Dependency Injection". Then later on said that DI is a type of IoC and then explained the larger concept. Here you present IoC as being about DI (without showing any other types of IoC.) It's a pet peeve of mine as I think it muddies the waters in the learning process.
Well, you're going to have to handle it no matter what anyway, with exceptions or without. If you consider the error from the service as _exceptional_, and it shouldn't happen, and want your application to fail fast, throw the exception. If the error is expected and not necessarily exceptional, and you want to manage it and continue operating with your application, then the "response" object is usually a good way to go. Leave exceptions to represent something truly unexpected and _wrong_ with your program. Another option is if you can fake your own semi-valid response in the case of an error, you can wrap your library calls, handle the error, and return back to the caller a fake response for them to use.
I should work only on regular Windows, so preferably I'd go with WPF but since I was working last few months with ASP.NET i got used to bootstrap and it's "responsive" style, which I can't somehow get to work in WPF and I thought that it would be easier in UWP.
I would avoid UWP when possible. Besides not having access to the full framework, it has a lot of memory leaks that make it unsuitable for large applications. 
Naa, much better to use `as` or `is`. 
I recently built an API using the #2 approach and it worked out really well. This was for a REST service called directly by the client from a web front end. My result object looked something like this: public class DataOperationResult&lt;T&gt; { public bool WasSuccessful { get; set;} public T Data { get; set; } public string[] Messages { get; set; } public string[] Warnings { get; set; } public string[] Errors { get; set; } } Every call to the service returned this object. There's also a non-generic version with no `Data` property for operations that don't return data. Using this object you can return whatever error messages are appropriate and the UI can respond to that accordingly.
I used the second opinion in a project once. IIRC somewhere deep down there is/was a generic error handler/override in Web Api where exceptions fell in and you could construct a response. I'd just throw or let exceptions fall through the controller methods to this handler. There I looked at the exception, checked if it was an SQL, regular or custom business exception and constructed a not-too-revealing response model and sent it down to the client. On the client side, I created an appropriate modal popup. 
You can use `TimeZoneInfo.ConvertTimeToUtc()` to convert an unspecified `DateTime` to a UTC `DateTime` based on a given time zone. If the `DateTime`s are local (but actually in a different offset) you may need to use `DateTime.SpecifyKind` because it won't let you convert local times from a non-local TZ. To change the offset of a `DateTimeOffset` without adjusting the time, you can just use `new DateTimeOffset(original.DateTime, newOffset)`. Not sure if there's a "proper" way to do that.
Sounds a bit like an XY problem: &gt; The XY problem is asking about your attempted solution rather than your actual problem http://xyproblem.info
For me, whenever I start having requirements around things like Daylight Savings and Time Zones I switch to using [NodaTime](http://nodatime.org/)'s classes like the `ZonedDateTime` class. NodaTime doesn't let you mix the idea of local and global times, unlike `DateTime.Kind` which has problems with [violating the Single Responsibility Principle](http://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html). You may be tied down to using the BCL `DateTime`, but in some cases you can cast between NodaTime's types to gain benefits from its approach to keeping responsibilities focused to what is appropriate. Especially when thinking about local and global conversions. Sorry if that doesn't solve your specific issue. I wrote something when I had a similar issue and realized that I needed to step back and give NodaTime a try: [Converting DateTimes by Offsets with NodaTime](https://buildplease.com/pages/dates-from-offsets/). There are some links at the bottom to articles by Matt Johnson who has some good stuff out there about DateTimes.
It has to be a desktop app, so probably WPF will be the best choice there. Material design looks great, I will take a look at it and test some things with it. Some responsiveness would be great as well. Ninja edit: By responsiveness i mean something like bootstrap has, so when screen is smaller i can place controls in different places (stack them instead of displaying them inline for example). So far I've worked only with default control set, so maybe that's why it sucked :)
Can you elaborate? I've not run into this issue at all.
I believe in bubbling up exceptions to the lowest layer in the chain that can handle and continue. In most cases this ends up being the top layer of the application. In an MVC application this would be the Controller because the Controller can catch the exception and rout the user to an error page. In a Windows Forms application it would be my Form (or if you're using the MVC pattern my Controller again). I absolutely despise when someone adds an Error property to the object their method returns. If my calling class *can* handle the exception/error state then my calling class will handle it within a TryCatch. Don't force me to check your returned object for an error! If my calling class *can't* handle the exception/error state then it will bubble up to the next call in the stack. This will happen until it reaches the top level of my application at which point it will absolutely be handled by either displaying a user friendly error or if I am writing an API that calls your API then my API will return a model that has an error property (if an httpstatuscode doesn't apply). If you're wrapper can handle it and return valid information to the caller then please do, but don't forget to log it! But please, please, please don't expect me to call your method and *then* check your return object! Make it *easy* to use and **hard** to misuse!
Bad interactions between the reference counted COM UI objects and .NET's mark&amp;sweep style GC. Microsoft has confirmed, but I don't fully understand the details. I hired someone to write a report on it for InfoQ once we know more.
WPF
I pretend that whatever I am trying to create already exists and that I just installed it via nuget. Then I ask myself how I would expect that library to behave.
Chrome lets you do this: http://username@domain.com
That's what I usually do. But I think "InPrivate" mode would work as well.
I've started using exception filters in WebAPI, if an exception bubbles up through my repository/service/controller the filter catches it and then I can create a response with a few details on the failure and ship it off to the client.
Transient error handling is also very important, it's quite possible that the HTTP request you made 500ms ago that failed would succeed if you tried it again, possibly after a short delay. I wrote a rest sharp extension that allows you to specify the timeout and number of retries. It also implements incremental retry meaning it will try the request right away, after 2 seconds, after 4 seconds, etc. It'll also fail fast if I get back a non transient error such as 401, 404 whereas a 500 error might just mean a temporary issue. Also keep in mind that bombarding a failing server with requests might make the problem even worse, ensure that the number of retries attempts are limited to 3-5 at most. Of course if the user will feel any impact from a delay you'll want to have how request fail within a 1s-500ms, but that is still enough time for at least one retry. I use the longer timers for microservices that are passing data around on the server side since those are less critical/delay sensitive plus most data that users would request is cached.
Windows 7 is in extended support. By the time the app is ready to go, it'll have less than 3 years of support.
Let me just take a look into my crystal ball to see your code... nope, nothing, I guess you'll actually have to post it before anyone can help you.
To be honest, there is a lot of flaws in this. 1. Only create one Random and use it. Initializing random is more expensive than getting the next variable. You have a lot of 500-1000 pauses. Make that a function in your writer class, avoid typing a lot of extra stuff. That way you can also easily shorten in DEBUG mode to make it easier to work with. 2. You hard-code paths to `E:\`. Not good if you don't have an E: (or use Linux). 3. Way too much is hard-coded and should be separate files/classes. I highly recommend you do searches for "data-driven design". If you are going to have a game-based virtual file system, you probably should implement as a virtual file system, that will give you flexibility to do nifty hackery thing. 4. It really isn't a game. It's a bunch of ideas that have the potential of being a game but you have a *long* way to go before it is interesting.
In form one: this.Hide(); Form2 main = new Form2(); main.Show(); In Form 2: listBox1.Items.Add("test"); Anything else?
 var a = (string.IsNullOrEmpty) || ... var b = (string.IsNullOrEmpty) || ... var c = (string.IsNullOrEmpty) || ... if (a || b || c) { ... }
Removed: Rule 4. Please ensure your code is properly formatted for Reddit and to include enough context for people to easily understand your issue. From what you've said thus far, perhaps your `listBox1` isn't actually visible in your `Form2`, or you're adding items to the wrong list box.
Those new instances of Random are killer. Use one instance, and try using my SecureRandom class: https://gist.github.com/gubed/1a932d5d3c7270bd57ac
Hi, just want to thank you again for this good breaking down the loop, this version is more understandable by me and my friends who are just starting to learn to code (C#). I'm not always in front of a computer so this one can help me solve problems a lot. :)
Thanks everyone for your constructive criticism, it's much appreciated, I will post updates here when I feel it's necessary, I will continue to update my github to so expect frequent progress updates
Thanks, its great to see so much support from the reddit community, I will be posing more updates here soon.
Take a look at this article from Microsoft https://www.asp.net/mvc/overview/security/create-an-aspnet-mvc-5-web-app-with-email-confirmation-and-password-reset It includes email confirmation but you can easily skip that part. If you're not already you should get into the habit of hashing passwords even if it is a personal project.
The only thing missing is '\Debug\x86\'
i don't disagree, but were your framerates dipping?
UPDATE: just fixed a bunch of stuff and created an X86 debug version, also modified the credits a little, it's all on my Github
I came up with an idea, I added the new Random function to my console function, I can now specify the delay using two ints, if you want the practical demonstration I just updated my github.
It was a joke.
well there is one now
I'm new to github so I don't actually what .gitignore does, I'm guessing it tell github what files to ignore.
whoops forgot about that. Fixed now.
wait, the framerate was dropping, it shouldn't be, how bad was it? when in the game was it? bare in mind that I have simulated delays in the program so it might be that. 
Dont forget `Predicate&lt;T&gt;`! :)
What are you actually having trouble with? This is very simple.
What have you done so far? 
So what this looks to be trying to accomplish is a kind asynchronous behavior where you ask this library to do the speech recognition and it gets back to you when it's done. In this case, I think what you're going to want to do is take a pointer a callback method as a parameter. This callback method will be a void method that takes a single string as it's only parameter. Then when you set up your `GodListener` object, you have the event handler for `SpeachRecognized` event call your callback method passing in `e.ResultText` as the argument. Back in unmanaged land, the body of your callback method does what it has to do with that string. You can use events with COM Interop but it would probably get pretty messy in this case since you would have to deal with dynamically allocating a new instance of the COM object, hooking up the handler, then destroying the instance when everything is done. This is extremely easy to screw up with COM objects and cause memory and handle leaks. Blech, COM Interop sucks.
My guess is nothing. It's a crazy simple task. The prof even told him what methods to use...
The best way to start with DI, is by using a poor-man's dependency injection 'framework' (i.e. inject the dependencies yourself, in the application root). Of course it becomes unmanageable in larger applications, which is when you should move up to proper IoC frameworks. I highly recommend [SimpleInjector](http://simpleinjector.readthedocs.io/en/latest/quickstart.html). Not only it's the easiest IoC framework to use. It's also one of the fastest. Whatever you do, stay away from Ninject: https://cardinalcore.co.uk/2015/01/28/ioc-battle-in-2015-results-using-ninject-think-again/
People on here won't do your homework for you. You've been given the exact functions to use. Google them. If your still stuck post a specific question.
If you are having trouble with this simple of task, I suggest you start by doing some reading or watch some tutorials. 
Please post what you have now and what isn't working. Honestly this requires a handful of lines of code at best and should be straight forward.
oh nice, I plan on porting this to Mac and Linux at the end though i don't want to confuse my self with multiplatform right now
Ah! Well, in that case, sure. There's also /r/dailyprogrammer
Do you mean that writing the recognised phrase to a text file is a terrible idea? It doesn't seem much different from what I am attempting here; instead of the recognised phrase coming from the .dll into Gamemaker, Gamemaker gets the phrase from a text file sitting on the computer. I haven't used pointers before, but I'm willing to give it a go! I have other work to do today, but I will get to it when I can. Thank you for your help.
While I certainly agree with you, ever since I figured out how not-so-random System.Random is, I have made it my best effort to break the habit of using it.
On mobile now so this will be short but there's a whole a heap of trouble in passing messages through text files. You have file locking and concurrency to start with. Performance will be orders of magnitudes worse, which may or may not matter. You'll have to deal with potentially missing folders and potential permission issues. It's not the way you want to go, trust me. 
That might be the true but in this particular case using RNGCryptoServiceProvider to randomize the delay between lines in a text adventure is obscenely over engineering the problem. This is just not a case where you need secure random values. Or even good random values. The lines could alternate between a delay of 500, 750 and 1000 with no randomness at all and nobody would ever notice a difference. I'm not even saying that RNGCryptoServiceProvider would add massive, unnecessary overhead and cause a huge performance drop. The difference would likely not even be noticeable. But with the class you provided you'd still add an unnecessary layer of complexity to a program that just doesn't need it when a simple call of Next() on a reused instance of System.Random already provides the desired result. And just to clarify, I don't think your class is bad or shouldn't be used at all, just that it adds unnecessary complexity to what looks like a beginner project. 
 Convert.ToByte(hex, 16) Do that with each 2 characters in the string
I heard about Avalonia, but never used it. 
You can check out [Gtk#](http://www.mono-project.com/docs/gui/gtksharp/), they have .net bindings but IMO, the UI looks a bit "developer designed" unless you work really hard at it. I would 2nd other recommendations to follow a good pattern for separating your UI from your logic even if you go with Gtk#, as it can enable you to swap out UI technologies easily in the future for different platforms... I find the mvvm pattern perfect for this. Edit: I've also used [QTSharp](https://github.com/ddobrev/QtSharp) in the past with good success. There are a few more listed [here](http://www.mono-project.com/docs/gui/), but I don't have personal experience with them.
I [found a StackOverflow question](http://stackoverflow.com/questions/1938932/pointer-to-function-for-unmanaged-code-in-c-sharp) talking about exactly what you need to do. Let me know where that gets you.
Your question is great. HTML JS CSS specification promised to do that but browser developers are wild. Devexpress and some other GUI library developers are close but not there. (if you need I can find you two other names that may be better) Visual studio controls are too poor for professional use. Xamarin is always slow and buggy in my experience. dmoonfire's solution is nearest to what I think is best for more than one reason. 
great answer in my opinion.
I'm guessing Focus doesn't work because you're in the middle of executing a handler on UI thread. Haven't worked with WinForms in a decade. I know in WPF you'd put it all in a function and BeginInvoke it on the main dispatcher.
I don't use it. I wonder what others are using that is like resharper but not.
I feel that Gtk# has suffered from a lack of love lately. It hasn't been brought up to Gtk# 3 for a while, there is no real good NuGet packaging available (I ended up making my own for a while). I love the library (and how it looks) but it was hard to get the customization I needed for my project. QTSharp, unless it changed recently, suffers from not getting out of alpha for quite a few years. I don't know if it is stable yet, I haven't seen anything to indicate it was production ready.
However, a lot of the controls will not work on windows desktops. So your UWP project will have to check the platform and show the corresponding UI. 
It really depends on which parts of the Enterprise Library you're using, and for which kinds of applications you are working with, and what needs you have. Enterprise Library is kind of a broad spectrum of libraries. For example, my company still uses the Logging Block and the Exception Handling block, but uses StructureMap instead of Unity (Since Unity is technically a part of it). And we don't need the validation block because the validation is done using System.DataAnnotations combined with the MVC framework. What kinds of things are you looking to update?
Just configure it the way you want. The problem is not the syntax highlighter, the problem is just how you have the colors configured. The colors are defined in the theme. If the current theme does not match your preferences, you're free to select one of the many many available (check out the gallery!) or add your own one. You can find information on how to add a new theme here: https://code.visualstudio.com/docs/customization/themes Unfortunately the capabilities are not well documented and you might need to experiment a bit. You can orientate yourself on existing themes, like https://github.com/gerane/VSCodeThemes/blob/master/gerane.Theme-rainbow/themes/rainbow.tmTheme The syntax (containing possible scopes, names, etc for C# themes) can be found here: https://github.com/OmniSharp/omnisharp-vscode/blob/master/syntaxes/csharp.json By adding your own theme you can completely customize it the way you want: http://imgur.com/a/ROnVD
Use the Sharepoint SDK.
We announced 6 languages yesterday across our social media (https://app.mailerlite.com/c4b7x6). Some of these have been live, but hadn't been publicly announced or released to pre-signups as we've been building up content... The front page has each of the new language options to signup with and take that content
What do you mean by using BeginInvoke? I find programming very difficult, and googling that did not help me. What's a main dispatcher?
Resharper used to be the only way to get decent refactoring tools inside VS. In 2015 and possibly before, you now get a lot of those basic tools for free. Certainly there are things that Resharper still does better, but it's also slower and adds more overhead to things like CPU/memory usage while running VS instances, especially in large projects. Resharper used to be the first thing I'd install on a new machine with VS, but I find I don't need it in 2015. All the tools I cared about are already in the default installation now.
Genuinely curious as to how you would want that to be coloured? It's all chained method calls - i.e. the same type of syntax...
Ah, snap, right. I've got the download link from early access program, just realized that, sorry for misleading. But as far as I remember they have announced it would be free, at least "basic" version (like IDEA). I'm kind of lucky since I have ReSharper student license at home and I have full ReSharper at work paid by my company. 
Why Resharper when CodeRush is better?
electron (HTML JS CSS) is pretty good: http://electron.atom.io/ (used for VS Code)
Something like [this](http://imgur.com/a/vWpWx) maybe?
Try this: MDS_Popup_WebBrowser.Document?.ActiveElement?.Focus(); 
All very welcome features. If they continue the good work on the editor I can ditch resharper for good. It's not that I don't like resharper but it's slowing down VS considerably...
Yup, there are progress bars in most .NET application types, including WinForms. Here's a basic overview/tutorial: https://www.dotnetperls.com/progressbar
Thank you very muxh
Install the trial version of R#. And then nick their theme settings.
what you are looking for is called resharper. and turn on custom coloring in the settings. also try some random hotkeys (or read the manual) and be amazed what resharper can do.
http://www.codeproject.com/Articles/14170/Extract-Text-from-PDF-in-C-NET It might not answer your question.. but take a look anyways. Simply parsing the text in the pdf makes a lot more sense than simulating user input in a browser which opens pdf.. Your solution gives that "I print and then scan to pdf" feel..
Just saw your updated response, thank you very much for all of the information! That is super helpful.
That's for sure. Vs stalls for no reason sometimes and I blame resharper
 private void dataGridView1_MouseClick(object sender, MouseEventArgs e) { if (e.Button == MouseButtons.Right) { MDS_PDF_Panel.Visible = true; string req = ""; int currentMouseOverRow = dataGridView1.HitTest(e.X, e.Y).RowIndex; req = dataGridView1.Rows[currentMouseOverRow].Cells[0].Value.ToString(); MDS_Popup_WebBrowser.Focus(); MDS_Popup_WebBrowser.Parent.Enabled = true; LoadthePDF(); if(!MDS_Popup_WebBrowser.ContainsFocus) { MessageBox.Show("The PDF does not have focus."); return; } this.BeginInvoke(new Action&lt;WebBrowser&gt;( browser =&gt; { browser.Focus(); }), MDS_Popup_WebBrowser); MDS_Popup_WebBrowser.Focus(); InputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.CONTROL, VirtualKeyCode.VK_F); InputSimulator.SimulateTextEntry(req); InputSimulator.SimulateKeyPress(VirtualKeyCode.RETURN); InputSimulator.SimulateModifiedKeyStroke(VirtualKeyCode.CONTROL, VirtualKeyCode.VK_2); } } private void LoadthePDF() { string directoryName = Environment.CurrentDirectory; string the2 = directoryName + "\\Resources\\RoCxpsversion32.pdf"; MDS_Popup_WebBrowser.Navigate(the2); }
Wow! These changes look great. I can't wait for the final version of this to ship so I can really dig in and use it.
had a small part in "performance improvements in fsharp.core" the Array higher order functions are faster now!
Can you use a proper PDF viewer control (maybe [Syncfusion's](https://www.syncfusion.com/products/windows-forms/pdf-viewer) or [DevExpress'](https://www.devexpress.com/products/net/controls/winforms/pdf-viewer/))? Syncfusion has a [community license](https://www.syncfusion.com/products/communitylicense) (individual developers or up to five users at companies with annual gross revenue below $1 million USD) that could allow you to get it for free if you aren't doing this for a large company.
I've been using their full suite for over a decade now and love their products. And their support is top notch.
I've tried all of the test of these, but hadn't heard of okhosting... Going to try it out. Thanks for the suggestion!
I'm not sure offhand the order of event firing, so don't take this as gospel. Perhaps the reason you are having trouble with focus is because this code is in the MouseClick event of the DataGridView and the DataGridView is granted focus by an event occuring after the MouseClick event. If I am right then the effect would be that you set focus to the Webview, and focus returns to the DataGridView after MouseClick and following events finish. Try moving the code from the MouseClick event handler to the EnterRow event handler. Eventargs for EnterRow will give you the row that has been selected so you won't need to do a hit test, and mouse handling events for DataGridView will be finished so that DataGridView doesn't getting focused again after your set focus to the webbrowser.
As a test you can set up a gotfocus event handler for the webbrowers and datagridview control with a Debug.Writeline so you can see the order of focus events that are occurring.
No real need, just dicking around 
Still no Core support :(
Ditto they had semi similar in ctrl+, buy having the same as ctrl t and also the auto file creation of name and such are a few of the things I use all the time from resharper
I saw that, still not up to all of the functionally of ReSharper.
I did this for a project recently at a client and it took very minimal changes to work. The only site that gave me problems was SharePoint. The identity of the SharePoint user had the name of the provider used to create it as a prefix so we had to strip this off in other applications that accepted the same cookie. 
Oh sure, just saw your "maybe in vs 15 they will add even more" so wanted to comment saying that they are which is nice. My two most used features anyway :). They've added a lot of the refactoring already with Roslyn, and other 3rd party projects have added more using Roslyn.
&gt; In XAML, we have added IntelliSense completion for x:Bind which provides a completion list when you attempt to bind to properties and events. Namespace completion offers to auto-complete the prefix if the reference to the namespace already exists. XAML IntelliSense has also been updated to filter out types and properties that do not match. The closest match is selected, so you only see relevant results and don’t have to scroll through a long list of types. Yes, finally! I was wondering why this wasn't in there yet.
Were you using WPF?
I've only used it for WPF. And it's horrible. Maybe their other stuff is better. Very maybe.
Yes, for the taskbar, you could for instance google "taskbar shortcut location" and follow the first (or several other) links, to learn that they are just files in a specific place. Same goes for Start Menu. I don't know about the so-called "system tray" (not an official name), but my guess is it's in the registry and that a google will easily reveal it. TL;DR: my standard advice in this subreddit: do you even google, bro?
They stole the alt+shift+l thing just recently. It's now a little sync button on top of solution explorer. 
Finally we're getting some performance improvements. :) Visual Studio has become really big and complicated making it really slow compared to previous versions. Which is a shame, because it's the best IDE around.
I still think the project settings screen is a mess.
Adding the option *Break when this exception type is thrown* to the exception dialog was already great. The new *Except when thrown from* option makes it even more useful. Also, seeing which variable was actually null is also awesome.
Thanks very much, I'll give this a go. I'll report back when I can.
If you can, run the old machine as virtual image in the new one with only the applications you need in it; office shite natively.
I dont know why MS hasn't just bought jetbrains and merged it
I don't see how this is related. Viasfora is not available for Visual Studio Code.
Look through the properties for RichTextBox. There is an enabled/editable property.
Wow, a release where I care about every feature. This just made my day.
There were 3 reasons I still use resharper. 1. Ctrl+T navigation 2. The ability to filter read and writes to variables in the find references window 3. A few of the refactorings like creating files from class names etc... All of these are now in VS 15, so I think I might finally be able to get rid of resharper! 
ListBox
this one is what you want @op
Is it installing fine for everyone? Even after removing all VS15 traces and rebooting I get the following error when trying to install it Verbose : SetupEngine.Installer.InstallProduct reported error. [channelId: Microsoft.VisualStudio.Channels.Preview, productId: Microsoft.VisualStudio.Product.Enterprise, installationPath: 'C:\Program Files (x86)\Microsoft Visual Studio\VS15Preview', PackageFailureException: Package 'Microsoft.PortableLibrary.TargetingPack.Msi. failed to install at at Microsoft.VisualStudio.Setup.InstallOperation.Run(CancellationToken token)
Two ways which could work for you: &lt;Textbox IsReadOnly="True"/&gt; The other solution would be to use a &lt;Label&gt; instead.
JetBrains uses its own compiler, so basically they would need to rewrite everything. In addition JetBrains does a lot of other things too (Java, python, ...), so I'm not sure it would make sense.
for a listbox, is there anyway I can make it so it the users cant actually select items from the box themselves but rather display what theyre selecting from their computers Edit:Ooh actually I think I found it. Thanks a bunch
If you want scroll functionally, but don't want the user to be able to interact with any of the items you could also use a ItemsControl in a ScrollViewer like this. &lt;ScrollViewer VerticalScrollBarVisibility="Auto"&gt; &lt;ItemsControl&gt; &lt;/ItemsControl&gt; &lt;/ScrollViewer&gt; ItemsControl is what a ListBox derives from, and it doesn't have any interaction functionality. 
Ctrl-,
I'm glad I could help you save some time and learning these things the hard way. Let me know how it goes. The callback method is definitely the way to go here. Once you get the details worked out, it's pretty straight forward.
If we don't have admin rights, you think they give us VMs? We only work on a single windows based site (or portals of it) that requires extra security so we don't have a good enough excuse as to why we can get them. 
[Lua](https://en.wikipedia.org/wiki/Lua_\(programming_language\)) is a pretty simple language. [C# Intepretter](http://www.moonsharp.org/) 
Just use the CSharpScript in Microsoft.CodeAnalysis.CSharp.Scripting eg var script = CSharpScript.Create(sciptCode, scriptOptions); await script.RunAsync();
thanks, will check that out. 
thanks, will check that out. 
I use the LinqToExcel Nuget package. * it grants complete access to an excel file * you can enumerate the worksheets * you can query the rows and columns * it is fast -&gt; so ten thousand lines with multiple columns will be no problem 
Man, I always hear great things about Linq. I really need to start learning it.I'm pretty sure I have pasted bits of it in my projects here and there. The syntax is quite readable, I just need to know what goes where. =&gt;
Both WinForms and WPF, but we use far more controls in our WinForms projects (100% DevExpress) than we do in our WPF projects. That said, I also buy the full subscription, so I have source code and could make changes if I even needed something that wasn't corrected by DevExpress (it's been several years since I needed to do that though). 
[msdn](https://support.microsoft.com/en-us/kb/321686) SELECT * INTO XLImport4 FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0', 'Excel 8.0;Database=C:\testxltest.xls', [Customers$]) [Technet](http://social.technet.microsoft.com/wiki/contents/articles/24236.importing-an-excel-spreadsheet-into-a-sql-server-database.aspx) for xlsx
Mine also fails on the 3 computers I have tried it on. This is my error. 2016-10-07T01:13:04 : Verbose : SetupEngine.Installer.InstallProduct reported error. [channelId: Microsoft.VisualStudio.Channels.Preview, productId: Microsoft.VisualStudio.Product.Enterprise, installationPath: 'C:\Program Files (x86)\Microsoft Visual Studio\VS15Preview', PackageFailureException: Package 'Win10SDK_10.0.14393.33' failed to install at at Microsoft.VisualStudio.Setup.InstallOperation.Run(CancellationToken token)
DevExpress used to make some similar tools, but Resharper ~~is~~ was much better the last time I tried both. -edit- Some below are claiming the DevExpress tools are better now. I haven't tried them in 5+ years, so my opinion might be outdated.
lol I have Googled and for the Taskbar and I found a registry key for it. TBDEn or something like that, but it didn't include what the user pinned to the task bar. But thanks, I was searching "c# get all pinned apps windows 10" but that was leading me no where. This file location method is better. For "system tray", I'm searching "system tray icon file location" but apparently there's no location that stores this information for System Tray. Any other way to figure this out?
Oh maybe I'm confused then, sorry :)
XAML is a markup language, not a UI framework. There are a lot of UI frameworks that use XAML, and they all work on different platforms. WPF is the framework that uses XAML and has the most widespread Windows support. Windows all the way back to Vista is capable of running WPF applications. However, WPF can only target Windows, and there is no equivalent for any other platform. Silverlight is a different WPF platform. It targets browser plugins, but has been out of support for a long time. Microsoft, being Microsoft, only developed plugins for Windows, but Mono had the "Moonlight" framework which allowed OS X and Linux to run Silverlight applications. Windows Phone is yet another platform using XAML. To make things more exciting, there are several sort-of-but-not-completely-compatible versions. WinRT is around when I gave up and left the Microsoft stack, but from what I understand it's the basis of Windows 8 "it used to be Metro" applications, and had some commonality with Windows Phone 8. This framework can only run on Windows 8 or 10 (and maybe one of the Windows Phone versions.) Windows UWP is the platform introduced in Windows 10. It can only run on Windows 10 devices, though Microsoft seems to have unified the platform such that UWP is how you target Windows Phone. Xamarin Forms is another platform using XAML. It can target iOS, Android, and create Windows UWP applications. So this is the only XAML-consuming UI platform in active development that can target a non-Windows platform. But the only desktop environment it can target is Windows 10. If you need to support macOS, Linux, or any Windows 8 or older, you can't do so with Xamarin. (Some might point out there is a Xamarin.Mac. That is a product separate from Windows Forms, and does not use XAML. Similarly, Xamarin.iOS and Xamarin.Android are separate products from Xamarin Forms and use UI constructs idiomatic to their platform, such as Interface Builder for Xamarin.iOS.) So that's XAML's fate: the vast majority of UI frameworks that consume it are Windows-only. The only exceptions are either no longer supported or can't target Desktop platforms more out-of-date than Windows 10. If you want cross-platform UI, your best bet at the moment are the "host HTML in a browser" frameworks like Electron.
[This code may be of assistance.](https://github.com/telerik/ui-for-aspnet-mvc-examples/blob/master/grid/excel-export-server-side/KendoUIMVC5/Utilities/Excel.cs) Here's some code I had laying around which built on top of it. It uses openXML (XLSX). You pass it a class and a file path, and it populates the fields (not properties) that have matching column names in the file. It is not robust AT ALL. It (bass-ackwardly?) populates a datatable which it uses to populate the class. I'm sure it could use many improvements. Critique welcome! using DocumentFormat.OpenXml.Packaging; using DocumentFormat.OpenXml.Spreadsheet; using System; using System.Data; using System.Collections.Generic; using System.IO; using System.Linq; using System.Text.RegularExpressions; public static List&lt;T&gt; GetListFromXLSX&lt;T&gt;(string path, string tableName = "Spreadsheet") where T : class, new() { return GetListFromDataTable&lt;T&gt;(ConvertXLSXToDataTable(path, tableName)); } public static List&lt;T&gt; GetListFromDataTable&lt;T&gt;(DataTable table) where T : class, new() { try { List&lt;T&gt; list = new List&lt;T&gt;(); //make sure each field in class exists in table ValidateDataColumns&lt;T&gt;(table); var fields = typeof(T).GetFields(); //populate list foreach (DataRow row in table.Rows) { T item = new T(); foreach (var f in fields) { //set field value on object object newVal = row[FormatFieldName(f.Name)] as object; //Trim strings //Additional field formating goes here if (f.FieldType == typeof(string)) { newVal = newVal?.ToString().Trim() ?? String.Empty; } //format dates /datetime? if(f.FieldType == typeof(DateTime?)) { if(newVal != null) { DateTime tempDate; newVal = DateTime.TryParse(newVal.ToString(), out tempDate) ? tempDate : DateTime.FromOADate(Convert.ToDouble(newVal)); } } if(newVal == DBNull.Value) { newVal = null; } f.SetValue(item, newVal); } list.Add(item); } return list; } catch (Exception) { throw; } } private static void ValidateDataColumns&lt;T&gt;(DataTable table) { try { var fields = typeof(T).GetFields(); foreach (var f in fields) { bool found = false; string name = FormatFieldName(f.Name); foreach (DataColumn c in table.Columns) { if (c.ColumnName.ToLower() == name.ToLower()) { found = true; break; } } if (!found) { throw new Exception("Column " + name + " not found in data file."); } } } catch (Exception) { throw; } } private static string FormatFieldName(string name) { var r = new System.Text.RegularExpressions.Regex(@" (?&lt;=[A-Z])(?=[A-Z][a-z]) | (?&lt;=[^A-Z])(?=[A-Z]) | (?&lt;=[A-Za-z])(?=[^A-Za-z])", RegexOptions.IgnorePatternWhitespace); return r.Replace(name, " "); } public static DataTable ConvertXLSXToDataTable(string path, string tableName = "Spreadsheet") { try { DataTable dt = new DataTable(tableName); using (SpreadsheetDocument spreadSheetDocument = SpreadsheetDocument.Open(path, false)) { WorkbookPart workbookPart = spreadSheetDocument.WorkbookPart; IEnumerable&lt;Sheet&gt; sheets = spreadSheetDocument.WorkbookPart.Workbook.GetFirstChild&lt;Sheets&gt;().Elements&lt;Sheet&gt;(); WorksheetPart worksheetPart = (WorksheetPart)spreadSheetDocument.WorkbookPart.GetPartById(sheets.First().Id.Value); Worksheet workSheet = worksheetPart.Worksheet; SheetData sheetData = workSheet.GetFirstChild&lt;SheetData&gt;(); IEnumerable&lt;Row&gt; rows = sheetData.Descendants&lt;Row&gt;(); //Get Column Headers foreach (Cell cell in rows.ElementAt(0)) { dt.Columns.Add(GetCellValue(spreadSheetDocument, cell)); } for(int j = 1; j &lt; rows.Count(); j++) { Row row = rows.ElementAt(j); DataRow tempRow = dt.NewRow(); for (int i = 0; i &lt; row.Descendants&lt;Cell&gt;().Count(); i++) { var tempCell = row.Descendants&lt;Cell&gt;().ElementAt(i); int index = GetColumnIndex(tempCell.CellReference) != null ? (int)GetColumnIndex(tempCell.CellReference) : -1; if (index == -1) { continue; } tempRow[index] = GetCellValue(spreadSheetDocument, tempCell); } dt.Rows.Add(tempRow); } } return dt; } catch(Exception) { throw; } } public static string GetCellValue(SpreadsheetDocument document, Cell cell) { SharedStringTablePart stringTablePart = document.WorkbookPart.SharedStringTablePart; string value = cell.CellValue != null ? cell.CellValue.InnerXml : String.Empty; if (cell.DataType != null &amp;&amp; cell.DataType.Value == CellValues.SharedString &amp;&amp; value != String.Empty) { return stringTablePart.SharedStringTable.ChildElements[Int32.Parse(value)].InnerText; } else { return value; } } 
The only real benefit to UWP is that you can put it in the app store, and have the option of supporting Xbox One and mobile devices. WPF is a perfectly fine UI framework for writing desktop applications.
That's actually a good point. Assuming it's a field, make it a property with a manually created setter. Then put a breakpoint in the setter. You can use conditional breakpoints but it's a point in the code, not a watcher over your whole application. Breaking in the setter is the simplest method.
Hi grrangy thanks for your answer, I guess it's something like this : private string myValue; &gt;public string MyValue &gt;{ &gt; set &gt; { &gt; if (this.myValue != value) Debugger.Break(); &gt; this.myValue = value; &gt; } &gt;} http://stackoverflow.com/questions/6333380/how-do-i-run-until-this-variable-changes-when-debugging
F# is a great scripting language also! 
Yup, that's a good way of doing it. You could also put a debugging breakpoint, right-click the breakpoint red circle in the left margin and select "Conditions". Then in expression, type the `value` variable, and change "Is True" to "When Changed". Benefit of this is you can easily toggle on/off the break point, or tweak the options so it only breaks when it gets set to a certain value (or to an unexpected value).
Removed: Rule 4. Making a method is a pretty basic/fundamental aspect of C#. You pretty much already have all the examples available of a method definition with arguments. Normally you would just cut/paste the code parts you want in the method, and call that method. Perhaps repost in what way "it doesn't work", and how you're having difficulty? Perhaps you're having issues with the fact that the requested method signature requires an `int` return value, but you're working with `double` values and need to convert it?
That must be frustrating. Try checking out /r/learncsharp and also on the side bar of /r/csharp there are some good places for beginner stuff. If you want to type up exactly what the book says I can try help you too
Why should they? Developing and supporting features is a ton of work for a large enterprise that has millions of users in 100+ countries and dozens of languages. The amount of work that goes into one feature for a product like VS or Office is astounding. ReSharper has a TON of features. It would be very burdensome for Microsoft to absorb all of those features. Instead it's better to see what is really needed by a large set of customers, and then implement those. Also, purchasing up ReSharper or someone like DevExpress is risky because you don't want to stifle innovation or competition. The closed door Microsoft of yesteryear is (almost) gone and they now benefit a lot from the community and 3rd party vendors who drive innovation and change. The same argument can be made for 3rd party control sets. Why doesn't Microsoft just buy DevExpress or Telerik? Their controls are far better than the default ones. But right now those companies are in competition and releasing new versions multiple times a year. A competitive market has been formed that causes innovation. *Microsoft benefits from this because .NET developers have access to a constantly improving set of tools.* Why would they mess that up? 
If it's a property, you could try this: http://o.oz-code.com/features#whenSet
legit had that exact conversation 
Honestly OP is underestimating how useful this program is
I will implement multi threading later on. Just trying to get the image thing show up. I dont mind the window freezing for test purpose.
The exact bug they're not fixing: https://www.devexpress.com/support/center/Question/Details/T406959 The biggest problem with the WPF stuff is they've tried to adapt their WinForms controls to WPF it seems, so it's completely asinine at times. And half the solutions on their support center feature an awful lot of code-behind...
For desktop apps I do much the same. See http://sourceitsoftware.blogspot.co.nz/2008/04/database-versioning-part-1.html?m=1. For web applications, I use red gate's SQL source control. All database changes are checked into version control. Our continuous integration process then checks the latest version in VCS and updates the db to match. Works well but it's not a cheap solution.
I use nhibernate and let it do its magic ;)
Where can I find ReSharper for vscode? I'll transfer you 1000 euros if you show me, really.
You can use Entity Framework Migrations without using Entity Framework. The nice part about EF Migrations is that you get a pretty decent DSL for both upgrading and downgrading your database, making rollbacks pretty comfortable. I just hate to see people roll their own solution when there are open source and community-driven projects which solve the sam problems. Aside from EF Migrations there is also FluentMigrations but I found that the tooling was better for EF.
Check out DbUp. That's what I use. Never had any issues. Really easy to use.
I know that you said you want to avoid using EF but, properly optimized, it can be a great solution. You just need to write intelligent LINQ and use a tool like LinqPad to get a peek at the resulting SQL. Then you also get the advantage of EF migrations which make the migration process pretty painless.
Ef is really good at this. Dataadapters were the forerunners to this tech and they do basic crud as well: point at a db and go. Saved me weeks on two recent projects from existing schemas. Only downside is if you make schema changes you have to redo your code, where if youre going through stored procedures the mapping can change at db level.
Little more info would be nice, you could always go for a CRUD based system. Get a database, and make sure you can Create/Read/Update/Delete entries. Maybe even use Entity Framework? However what may be a little more interesting for you, is to dive deep into one of the mechanics, or a pattern. You could dive into (P)LINQ, learn about Machine Learning(Genetic Algorithm, Neural Networks), Encryption, Multithreading etc. C# is a massive language, take your pick. Again, a little more info like experience, and interests maybe helpful...
Read a little closer, I work in Xamarin. &gt; Xamarin Forms is another platform using XAML. It can target iOS, Android, and create Windows UWP applications. So this is the only XAML-consuming UI platform in active development that can target a non-Windows platform. But the only desktop environment it can target is Windows 10. If you need to support macOS, Linux, or any Windows 8 or older, you can't do so with Xamarin. "Any OS" today has to include iOS, Android, macOS, Windows, and Linux. Xamarin Forms can't target macOS, Linux, or "all relevant Windows". If the question were about *console* projects, then we could point out it works. But if you want UI you can't support Win7, which is a version the enterprise is stubbornly holding onto. (Seriously. I'm not allowed to update from 7.)
I only have a little bit of experience with [Roundhouse](https://github.com/chucknorris/roundhouse/wiki/GettingStarted), but I'd likely use it in this scenario. Getting it up and running was a learning curve, but I really like how you can handle your migrations with `.sql` files.
Might as well do it all in one line! IElem.AddRange(XDocument.Parse(p).Descendants("Item").Where(x =&gt; double.Parse(x.Element("orderedQuantity).Value) &gt; 0 &amp;&amp; x.Element("ResourceId").Name != "NULLOrderItem")).Where(xelem =&gt; xelem.Element("Name").Value.ToLower() == "oneofmyvalueIneed" || xelem.Element("Name").Value.ToLower() == "anotherone" || xelem.Element("Name").Value.ToLower() == "yetanother")).Select(xelem =&gt; new FieldProperties() { Fieldname = xelem.Element("Name").Value, Fieldvalue = xelem.Element("OrderedQuantity").Value } );
Ok, I just did some digging around about GameMaker and unfortunately I don't think it supports what you need to do. It seems to be pretty limited on what you can do when you call external dlls, specifically in the way it passes parameters. It seems there are only two variable types it lets you pass as arguments, strings and doubles (floating point numbers). Furthermore it does not have any mechanism to allow external code to call back into your GameMaker code. I think you're going to be stuck doing something like you were talking about earlier with files. Unfortunately I can tell you from experience that that path will be a buggy nightmare. I've had to use similar hacks in cases just like this where you're trying to force some new functionality into a third party application that doesn't provide any of it's own mechanisms for doing that. All I can say is that I hope the debugging tools provided with GameMaker Studio are good because you will be giving them a workout. It's also seriously bad news for trying to distribute this game because you're going to run into a whole pile of problems with different configurations and permissions on the end user's computers that you never saw on yours. It's a crappy situation with no good answer. If you're not too far down the rabbit hole, you might consider changing to Unity as it's a whole lot more robust (from what I can see from my cursory examination) and can easily call arbitrary C# code. Good luck.
I've spent a bit of time with office.interop but you need an office license on each PC. I haven't found anything better... not to say it doesn't exist.
Hopefully that's the only issue. 
Pluralsight has a learning path for asp.net mvc. [Here](https://www.pluralsight.com/product/paths) To get a free three months of Pluralsight sign up for Windows Dev essentials.[Sign up here](https://www.visualstudio.com/dev-essentials/) 
Removed: Rule 4. /r/learnprogramming has a good resource on stuff you can do: https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F
Yep and you can easily log your EF queries if you want as well. context.Database.Log = Debug.Write Plus you can always have it call straight SQL too.
Ah, THAT is what the gnawing feeling in the pit of my stomach is all about! I thought that this might be the case. From what I have already seen, you can only pass methods from a .dll into Gamemaker if they are completely self-contained. This is easier for some things than others. I am too far down the rabbit hole (for this project!) to start using Unity, unfortunately. I am going to try my file writing/reading approach. If I can get this working to a satisfactory degree, then it should solve similar problems that I have with this project. For the next one, I'll use Unity :) Luckily, I can remove one big problem; this is not an app for distribution, but an application for one PC that will be running in an installation environment. I don't need to worry about distribution, but I will keep in mind what you have said about bugs, and try my best. Thank you for all your help.
If you use procs there are no free tools I'm aware of. I believe there are several commercial tools that can do it. 
I wonder if there is a way to implement speech recognition in C# that does not rely on events, but can just return any recognised strings from a single, self-contained method...
That's an android app as far as I can tell, it's closed source and everything about it is in Portuguese. I still haven't found anything that's perfectly filled the niche the above program does. 
Yes i tried that. Give no error at all
FluentMigrator
Just make sure you do a lot of in situ testing on your target machine.
I have a guess. I'm a professional programmer, and this one has bitten me in the butt far too many times. If something goes seriously wrong, like you're trying to divide by zero, C# will throw an exception. Normally, an ugly popup will appear accusing you of total idiocy. But in event handlers, like your Click handlers, C# will figure that you don't want your program interrupted, and not bother showing you exception messages. So you need to have exception handlers in your Click event handlers. Look up "try" and "catch" in whatever book or web site you're using to learn from, and use them in all of your Click handlers.
&gt; But in event handlers, like your Click handlers, C# will figure that you don't want your program interrupted, and not bother showing you exception messages. **C#** does nothing special for events. The framework (or whatever code) that invokes the event might catch all exceptions thrown by the handlers, although this depends on the framework.
I could write one for you in about a day. What exactly are you looking for?
Cool bro.. Thanks a lot for a help :)
With style, class, and a minimum of fuss.
looking good! :D 
This is a good question. I've never done any Xamarin but it would be interesting to still find out. I did a quick google and I found quite a nice write up on it here: https://adventuresinxamarinforms.com/2014/11/17/creating-a-xamarin-forms-application-part-4-dependency-injection/ and here too: http://www.codenutz.com/using-dependency-injection-container-xamarin-forms-labs/ Edit: Why am I being downvoted? wtf
We wrote a tool that uses classes deriving from (library based on https://github.com/migratordotnet/Migrator.NET): public abstract class Migration { public ITransformationProvider Database { get; set; } public virtual string Name =&gt; GetType().Name; public virtual List&lt;string&gt; Dependencies { get; } public abstract void Up(); public abstract void Down(); } There is a table in our databases: Migrations( name nvarchar(max) not null unique PK) ... a few other columns as well but they don't matter for the algorithm (timestamp, etc) The following algorithm is run: db backup create set Completed fill set with "select name from Migrations" create queue MigrationQueue create stack Ran for each Type in assembly derived from Migration instantiate Type (and set Database) if Name in Completed continue else append instance to MigrationQueue start Counter at MigrationQueue.Count * (MigrationQueue.Count + 1) / 2 while MigrationQueue.Count &gt; 0 and Counter &gt; 0 Counter-- dequeue Instance from MigrationQueue remove all values from Dependencies that are in Completed if Dependencies.Count = 0 run Instance.Up() add Instance.GetType().Name to Completed insert name in db as well add Instance to Ran else enqueue Instance in MigrationQueue if exception or Counter &gt; 0 db restore throw mentioning all types left in MigrationQueue Down migrations are generally not run outside of a testing environment, but when they are a separate migration does them with the Up in the new one calling Down in the previous (it is rarely that simple... more likely there is some data saving and some log stored with some sort of report). --- Why so complex (as opposed to the whole give them a number and run them sequentially everyone else does)? We have a modular ecosystem involving potentially unique contractual obligations to specific clients that are not to get certain schema changes that others do, or they might get certain features in different orders. Migrations may be in separate projects/applications even. Or a sequence of migrations might be written as some feature branch.
Maybe use a DI framework that allows for property injection. 
Still not open source, and all of them require a browser. 
A bit vague but something like this ? var myDoc = @"&lt;root&gt;&lt;rows&gt;&lt;row id='1'&gt;&lt;/row&gt;&lt;row id='2'&gt;&lt;/row&gt;&lt;/rows&gt;&lt;/root&gt;"; var doc = XDocument.Parse(myDoc); doc.Elements(XName.Get("rows")).ToList().Select&lt;XElement&gt;(x =&gt; /*DoSillyDataBaseStuffHere*/); Schema Validation: https://msdn.microsoft.com/en-us/library/bb340331(v=vs.110).aspx
Deploy your code with PDBs. If there's any concern about the safety of your code because the PDBs are there... 
I remember them saying just the opposite... lets check. :P Edit: they don't https://blog.jetbrains.com/dotnet/2014/04/10/resharper-and-roslyn-qa/
Encog
cheers! thank you, I was planning on developing my own unless I find something here. I will probably just need to figure out how to feed the schema to the generator.
http://accord-framework.net/
Not to mention game developers like me!
You're quite right. IoC container, or attributes. These are both cracking ideas. An attribute to switch class implementations at compile-time or a configuration flag/IoC implementation swap. Both would work fantastically. Thank-you for your insight. It was 4AM when I wrote that, forgive my hazy insight into the problem at that moment in time. You've both given me excellent suggestions to run with! I can't thank you enough. EDIT: So, you're thinking perhaps if (bool.Parse(ConfigurationManager.GetValue("IsInternalBuild"))){ IoCContainer.Register&lt;IAuditObjects&gt;.As&lt;Auditor&gt;(); } else { IoCContainer.Register&lt;IAuditObjects&gt;.As&lt;NullAuditor&gt;(); }
What is the real thing you want to know? Do you want to know if mono performs well? If C# interacts well with linux? If there is a community of C# linux people to hang out with? Mono performs well except in a few particular and demanding enterprise situations. I don't use it entirely on Linux but I use mono on Linux a lot and it is fine. 
I develop F# on OSX and deploy to linux and love it!
Look at the variable names.
I've done quite a bit of work with Linux and Mono over the past couple weeks. I got ASP.net running on Apache 2 and that wasn't too hard. I've also used Unity3D to port a game over to Linux, as well as made a few desktop applications. I haven't had any issues, and everything seems to be working just fine.
..but .Net Core appears to have zero graphics libraries :(
Related question: what stack would someone use to develop C# in Linux? Is there an effective way that it could be done with Vim? Monodevelop doesn't seem well supported anymore.
You can use something like ClosedXML (think its on Nuget) or the MS Excel Interop DLL to do the reading (both would do it just as well, plenty of documentation out there, MSDN has documentation: https://msdn.microsoft.com/en-us/library/microsoft.office.interop.excel.aspx And so does Closed XML: https://github.com/ClosedXML/ClosedXML Then you could just import the rows/whatever data into the DB using whatever way you prefer like manual SQL and data adapters/datasets/EF. Again, searching for that returns a lot of tutorials easy to follow out there.
Oh, sure, but it's a great basis for a game engine.
Avalonia is slowly getting there, there is a branch working on Core with Skia back-end engine. Also, Xamarin with Xamarin Forms is at least cross plat on mobile. They might also extend to Mac. Also there's Eto.Forms, although I have no experience with that one. 
I use Mono a lot on OSX to develop cross-platform games
I do exactly this and I recommend that you don't. I use C# because we have some legacy code written in C#, but it must interact with a program that only runs on GNU/Linux. Debugging C# that interacts with native C++ code on GNU/Linux is very difficult. Right now I am having an issue with my program segfaulting when things reach a certain size and I do not have a clue how to fix it because the C# debugger won't step into C++ and GDB won't step into C# code
Roslyn scripting is probably your best bet, but if that doesn't work out for you then the [Flee](https://www.nuget.org/packages/fleesharp/0.9.27-pre) library (Fast Lightweight Expression Evaluator) might also be a good fit. It can evaluate [boolean expressions](http://flee.codeplex.com/wikipage?title=BooleanExpression) and can be [extended](http://flee.codeplex.com/wikipage?title=ImportingTypes) with custom external methods. I haven't used Flee in any production projects, but I played around with it last year and it was very fast.
.Net Core is all about this, with or without mono. Have been doing a lot of Devon recently with .net core on macOS with VSCode https://www.microsoft.com/net/core#ubuntu
I've found .NET Core to be totally unready for real usage. Just too many packages that aren't compatible and too many APIs missing or altered to migrate in packages for advanced purposes 
Depending on the scale and complexity of your application, trying to port it to raw HTML/JavaScript might be a daunting task. There are a couple solutions out there that let you run C#/XAML content in HTML5. Off the top of my head, there's http://www.cshtml5.com. That runs on top of [JSIL](http://jsil.org/), but adds support for a bunch of Silverlight XAML and controls. They also have a [Silverlight Migration Guide](http://www.cshtml5.com/links/migrating-from-silverlight.aspx) which you might find useful.
For what it's worth, debugging p/invoke is fairly painful on windows as well. 
I'm in the process of porting a few ASP projects to .net core, and also working on a server backend stack fully in C# .net core :)
Monodevelop is in active development, from my understanding. Yes, Vim is definitely a good editor for C# though. Here is a plugin, developed with support from Microsoft, that works in several editors, including Vim. http://www.omnisharp.net/ Atom, Visual Studio Code, and Sublime Text are also good editors for C#. Visual Studio Code is probably the best since it's directly supported by Microsoft. Edit: MonoDevelop is in active development as Xamarin Studio. MonoDevelop from their site is in version 6.1 which matches the equivalent version of Xamarin Studio.
Is that available for EF6?
There is also https://exaphaser.github.io/SharpJS/ which is open source and MIT licensed. www.wisej.com might be a good fit though the ui library is more like WinForms however it is actually running on the server.
I think Angular 2 with Typescript would be best approach. It's an SPA framework which has share similar patterns to SL such as MVVM, separating view and logic, component based design etc.
I'm building a WMS and WMTS server in .Net Core. Our target platform is a custom version of Linux and it's working out very well. The biggest pain points were replacing the system.drawing library which we did by making a nice wrapper of the image magick library. Dev/test path is basically write everything in Visual Studio 2015 on Windows move the solution over to CentOS to flesh out any obvious problems between windows and Linux and then finally we build on our custom baked version of Linux. Our final release is due on October 15th and we've had 2 success engineering releases so far. So yes, we use Linux as our system platform and C# and .net core as our language/framework. Loving it so far. 
I found the solution using the same method, It was missing extension of the file plus a Slash in the path
I don't work with Java, so I can't really make a comparison there. ASP.net needed some configuring, but that was mainly just a learning experience. Otherwise it's been smooth. Things seem to just work.
I use [omnisharp-vim](https://github.com/OmniSharp/omnisharp-vim) and [neocomplete](https://github.com/Shougo/neocomplete.vim) and it works great for me, even on Windows.
Nailed it. This is the most advanced C# machine learning toolkit. It's also got a lot of good standard math goodies in it. It's pretty robust, but according to an associate of mine, who is an actual data scientist, and has contributed code to it, it has unpredictably just been flat wrong in some cases in the past. It's OSS, of course, so you can just submit a PR. I would heavily test anything I intended to put into production built in it though.
extern is the only gfx library you need
Although I develop on windows, I do run a full stack on Linux for web. Replacing VS for VS Code, you can do: Vs code .Net Core Asp.Net Core / Kestrel server Entity Framework Core Npgsql (PostgreSQL db adapter for EF) Postgresql
Yup. It's been available since EF 4.3, according to Wikipedia.
In my entreprise we start digging .NET Core. Next modules may be build with it. One step at a time :)
in a VM, yes
Any reason to choose Mono over .Net Core?
How does Eto.Forms compare to Xamarin.Forms?
I don't really know, never tried Xamarin.Forms. Eto.Forms works only for Windows, Linux and Mac OS, no android or iOS support.
Same here, I would like to use it but it's totally incompatible with many other useful libraries and in the meantime, I have real work to do.
I really do enjoy the language, currently waiting for [Rider](https://www.jetbrains.com/rider/) to come out so I can start using it properly. Much like Java, it's not a language you easily use with any text editor. It's kind of a pain to use it without a specialized IDE. Therefore, on Linux, I still strongly prefer Python and C++.
Mono namespace has some useful stuff. Especially on non-Windows platforms
MonoDevelop / Xamarin Studio unfortunately is as good as dead since Microsoft bought it. Version 5 doesn't support recent versions of C# and Version 6 is borderline unusable for more than half a year now. Even in Xamarin's official forum people often recommend just using Visual Studio instead. I'm still using 5 without the new language features but I definitely wouldn't recommend anyone start using this program anymore.
I need to consider a learning curve. I have experience with HTML/CSS but I didn't do any JS for a long time. And I didn't touch Angular JS almost at all.
You haven't provided any detail so it's difficult to provide any help. I've done precisely what you describe a bunch of times using either threading or tasks, depending on the era, and there's nothing fundamentally unworkable about it. Deadlocks or whatever probably come down to local bugs in your code. Use any of the open source scheduling libraries and and write a Windows service. Stopwatch should work fine for what you're doing.
What other details? At least explain what else is needed.
16 minutes and already -11 points? Wtf is happening in this subreddit.
I've got no words except thank you. R.I.P my dignity
I'm a .NET person. I'm moving that way. Currently, Visual Studio is still the bees knees for editing .NET code, but all my latest projects are .NET core that I run on my Ubuntu box.
I've seen it done here. I think that's fine. Also /r/learncsharp and /r/learnpromming 
I should spell things better /r/learnprogramming
I am currently building an app with Angular 2 &gt; ASP.NET Core &gt; Mongo. It will be hosted in the cloud (Azure to start). The value of Core, for me, is that Linux VM tend to be cheaper than Windows VMs. So (assuming its successful enough to scale) I want the ability to move to cheaper linux VMs. The other valuable aspect of ASP.Net Core is that it no longer requires only IIS to run. Microsoft's new Kestrel server is going head-to-head with Node. http://tostring.it/2016/01/12/Using-Kestrel-with-ASPNET-5/ http://web.ageofascent.com/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/
Tis ok. Some people need to learn [how to prom](http://thumbpress.com/wp-content/uploads/2013/11/2-Somebody-Spent-Too-Much-Time-on-the-Tanning-Bed.jpg) too.
http://codereview.stackexchange.com/
Latest? Perhaps. Greatest? Definitely not. I agree with your general sentiment; I don't need cross platform support immediately on my newest project, but I DO need a lot of the missing features.
These guys were (are?) Working very close with Microsoft on aspnet core http://web.ageofascent.com/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/ They have a very cool demo from build with Scott hanselman http://web.ageofascent.com/age-ascent-microsoft-keynote-presentation/
Removed: Rule 4. Please include code you've attempted with, what incorrect result it produced, and what correct result you expected. Perhaps also include the written language used in the assignment or translate the relevant parts to English.
I have no problem if you drop it here asking for a critique. Some others might who want to keep this sub to C# news and program reviews, but I haven't seen much vitriol here as I have in other subs.
I'd recommend studying each languages history. They have different roots and different designs because they were solving different problems. Swimming through different paradigms is fun! SQL land has set theory. Server programming has other concerns (security, reliability). JS world is functional prototypical and values flexibility. Try doing some F# and ask yourself which language features are good in which circumstances. 
haa ha ha ha... oh, excuse me, you're serious.
Stack exchange is a bunch of dicks. I deleted almost all my accounts other than SO. All other programming SEs are full of awful people 
Tried posting there... Immediately got closed as "too broad" for not having a particular file I wanted reviewed in a quite small project. &gt;_&lt;
&gt; Who is .NET core aimed at? "Hey XYZ client, we are now able to sell you our products on Windows, Linux or Mac instead of only Windows. Remember that old Debian box you have there? Maybe we can use it and save some $$$ on licences. What do you think?" My boss a couple of week ago, we're moving our core projects running on asp.net and web api to net core. There are some rough edges here and there (no lazy loading on EF Core vs EF 6) but it's a long term investment.
/r/reviewmycode/ /r/codereview/
We ALL do it 
I love uncle Bob!
Removed: Rule 4. There are plenty of learning resources in the sidebar, plenty of books on C# development and Unity3D development. You can also check out the resources available at /r/learnprogramming, /r/learncsharp, and /r/Unity3D.
I've been using this library for various things. Simple and it just works. [Punchclock](https://github.com/paulcbetts/punchclock)
You're thinking about it like code. Making it 'read only' or whatever in your code means absolutely nothing here. What you have is a server and client model. Both need to know the state of the game - presumably, the clients needs to be able to draw it. Now, only the server is allowed to change it. The client sends commands to the server, the server sends gamestate changes to the client. You will get better responses in r/gamedev. In short: You're thinking about it in entirely the wrong way, and your proposed method is completely outside the domain of the problem of clients cheating.
Yes, but likely not what you want. You either can: - Provide only the program name, e.g. `notepad.exe` -- This program must be in the %PATH% system variable. Windows will search for the program in every folder defined in this %PATH% variable. The first matching file will be started. - Provide a relative path: -- This path is always relative to the working directly, which can be changed by the user at will. - Provide an absolute path: -- This is likely what you do already. -- You can calculate an absolute path based on your executing program location, if the program-to-start is located relative to your own program. If the issue is only the "hardcoded" you have a few options: - Let the user pass it as a command line argument. - Configure the path somewhere (App.config, INI file, Registry, JSON file, TOML file). - Make the user add the folder to %PATH% (discouraged).
This article is very good.. http://www.codeproject.com/Articles/990492/RESTful-Day-sharp-Enterprise-Level-Application
This is what I ended up with and its working. private SemaphoreSlim _concurrencySemaphore = new SemaphoreSlim(3); private void Start_Work() { while (true) { _concurrencySemaphore.Wait(); Task.Run(async () =&gt; { await Do_Work(); }).ContinueWith(_ =&gt; _concurrencySemaphore.Release()); } } private async Task Do_Work() { //dowork }
Nice finds. I really should look more into TPL dataflow. Right now I only know the basics.
Thanks for tip, this article seems really old, as they are using Visual Studio 2010, and sql 2008, is this tutorial still relevant?
Try again with some improvement. I posted a bunch of time with great results :)
Old? It was published this March. Ignore the version of the tooling, and focus on what the article teaches.
TPL is awesome.
at least it's on the roadmap. there are other libs that aren't right there, like automapper and I believe log4net
Out of curiosity, if there was a site where you could have your code reviewed for a small fee ($1-$10), would you use it?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/codereview] [\[c#\]\[Review\/Criticize request\]\[GitHub\] Watch only bitcoin wallet. • \/r\/csharp](https://np.reddit.com/r/codereview/comments/56m68t/creviewcriticize_requestgithub_watch_only_bitcoin/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Good: * Using WPF instead of WinForms Needs work: * You have no unit tests * No sign of dependency injection, which will aid in the above. * Far too much logic in singular places. For example: https://github.com/Coding-Enthusiast/Watch-Only-Bitcoin-Wallet/blob/master/WatchOnlyBitcoinWallet/MainWindow.xaml.cs#L43-L81 You shouldn't be doing this sort of thing all in one place and especially not in the UI layer. This should instead kept in another class (e.g. `BitcoinCalculator`). You could then use dependency injection to inject this into the ViewModel. * No documentation and I'm finding it hard to understand what some of the classes are meant to do from the name. * All your UI logic appears to be manual. You should be using the MVVM pattern. Look into XAML more. * https://github.com/Coding-Enthusiast/Watch-Only-Bitcoin-Wallet/blob/master/WatchOnlyBitcoinWallet/BlockchainInfoAPI.cs Does not follow C#/.NET naming conventions. * https://github.com/Coding-Enthusiast/Watch-Only-Bitcoin-Wallet/blob/0139b99eec041bc3f1767953f771ee94aab32d67/WatchOnlyBitcoinWallet/WalletData.cs#L70-L87 This is another place that would ideally be an injected class or at the very least simply not in this class. I had to resort to searching your repo for usages of `HttpClient` to actually find where you are calling the Bitcoin API, I simply never would have thought from the name of the class `WalletData` that this is where you are calling it. * Need validation/exception handling so the user knows something happens. Like in the above code, if an exception was thrown they would not know and think they had 0 balance. Pretty good overall just needs a lot of work in terms of structure and organisation, this will help in creating easy to maintain and change software. Have a look into design patterns and something called "coding to the interface not the implementation". Feel free to reply/message if you want to talk more about it.
- Split up your business and your GUI code into different projects. Makes testing your code easier and your code cleaner in general. - Add unit tests for your business logic. - AboutWindow.xaml.cs, 12: Do not leave away the access modifier. Be clear in your code, always be explicit. - AboutWindow.xaml.cs, 22: Do not use fully-qualified names unless necessary. Rather import the namespace. - AddressWidnow.xaml.cs, 18: Having a second constructor on a WPF control is very very uncommon. Instead look into MVVM. - AddressWindow.xaml.cs, 18: Prefixing arguments with`_` is VERY uncommon. And you do not use this naming convention in other places. When the argument name is the same as field you can still access the field using `this.field`. Often fields are prefixed with `_` to avoid this issue. - AddressWindow.xaml.cs, 27: Do not use abbreviations like `txt` or `btn`. Just be clear and explicit in your code. `Button` is much easier and pleasant to read than `btn`. Also: WHICH button? WHICH text field? - AddressWindow.xaml.cs, 34: Personally I consider `String.Empty` clearer than `""`. Perhaps you also want to check for whitespace? Then use `String.IsNullOrWhiteSpace`. - AddressWidnow.xaml.cs, 39: Sometimes you use `this.`, sometimes not. Stick to one style. - BlockchainInfoAPI.cs, 9: Common C# naming guidelines are having the word pascal-case when it's equal or longer than 3 characters, so `Api` would be more C#-ish. - BlockchainInfoAPI.cs, 11-17: Common naming convention in C# is PascalCase for property names. - BlockchainInfoAPI.cs, 13: Avoid obscure abbreviated names like `n_tx`. I would have no idea what this means. - MainWindow.xaml.cs, 25: Assigning `null` is pointless. That's the default value. - MainWindow.xaml.cs, 29: Add some empty lines to improve readability of your code. Split up thematic matching lines with an empty line. - MainWindow.xaml.cs, 39: Look up interpolated strings. Much nicer to read than `string.Format`. - MainWindow.xaml.cs, 49: Look up LINQ and `Enumerable.Sum`. - MainWindow.xaml.cs, 89: Store the result of `GetAdornerLayer` into an variable before calling remove on it. Makes debugging nicer when you can first step through the lines and evaluate the result of the method call (without having to step into it). - MainWindow.xaml.cs, 95: Always wrap the body in curly baces, prevents famous bugs like the goto-bug. Whether you do this or not, pick a style and stick to it. - You have absolutely **no documentation at all** in your code. Always document your code. Documenting your code helps yourself in the future (you'll not remember a thing about this in 1 year) and it also makes you think about your code more. What is this method doing? If your documentation gets too long odds are the method is already too large.
Well, I certainly have a very long way to go and so little time to work on getting better, with job and everything else... I certainly wouldn't mind doing something small like freelance jobs. but I don't think I can get good enough to call myself a dev.
Thanks a lot for your comment and also the time you spent, I really appreciate it. On my computer, I have fixed most of these and will fix the rest with other suggestions soon. one thing though. As i said below the `BlockchainInfoAPI.cs, 11-17` naming is the custom class that I instantiate when getting the API response which looks like [this](https://blockchain.info/address/1Q9swRQuwhTtjZZ2yguFWk7m7pszknkWyk?format=json&amp;limit=0) so I don't think I can follow the naming convention here
&gt; interpolated strings One more reason for me to upgrade to VS 2015!
Well, at my last company, we would have hired anyone who looked like they had common sense and had a willingness to learn. I've been in the .Net business for over a decade and I've pretty much learned on the job. I wouldn't let your lack of experience hold you back, you might not be find the best job/company in the world initially, but you can't beat getting paid to learn.
Designing a great API that any client can use is not really a .NET problem. There are certainly some .NET tools that you will need to know, but in general the API/REST part of it is shared by any tech stack. I would start by just reading about REST principles. This might sound crazy, but I'd spend a few days looking at a full-stack framework like Ruby-on-Rails. It has everything done in a decently opinionated way. REST API controllers, ORM for database models, validation, environments (prod, test), database migrations. I don't think .NET itself has any full stack framework that compares (maybe ServiceStack, but it has become non-free). Then you can apply those concepts when picking a toolset for .NET. As for .NET, for APIs I'd say look into Nancy, WebApi, ServiceStack. WebApi is currently my favorite. For databases it's easier to bootstrap with a NoSQL, but in practice you'll want to pick your database technology based on the domain of the application. Which database you use will heavily influence what kind of ORM you'll use, but they mostly follow the same pattern.
Kudos for figuring it out without help. 
It's an implicit choice.
What is the goal? Is this self-organizing or something?
also checkout /r/unity3d
Yeah, my bad sorry, I indeed read too fast. And don't worry bout your 7, we're stuck on 7 enterprise too. 
I did some work in front end and javascript, and I think from a language that needs 6transpilers, 9 pre-loaders, 32 frameworks and whose paradigm changes every three hours, it's harsh to say C sharp ends in spaghetti code. /rantoverjavascriptoff. Now I understand your struggle with some points, indeed you need to know which library does what and if your object already implements an interface or not (not the user made, but the IEnumerable, IEquatable, etc which are like the basics of the language). However, OOP is a very good and stable paradigm that helps a lot to work, I was lost at the beginning too, but you'll find your way if you're interested. LINQ is just a way to do sql queries on virtual objects representing your database. Good for ressources and memory, but tricky since half c# dev will pretend it's not well optimized. Inversion of Control is just a "new way" to express that your objects should not depend from each other. That is where Interfaces are useful : you say one object "A" needs an IWhatever, you say that the object "B" you will pass to "A" is also an IWhatever, boom, "inversion of control". Nothing magic at first sight, the power only appears when you want to change the method of IWhatever or reuse parts of your program. I totally feel you on the "it's more an art than a science" though. Programmation change very fast and web dev is still so young... half what we learn won't be of much use in ten years, and we have to keep up to date everyday. But isn't that why we love it?
&gt; Personally, and our coding standard at work, we always leave out redundant private and internal modifiers, but this is a point of frequent disagreement. The choice to leave them out is to try to promote a private-first (by default) approach. The choice to leave them in would, of course, be to be more explicit. That is a valid point. My argument is that by clearly specifying it as private you leave *less* space for guesses: "Was this intentional or did he forgot?" &gt; A similar discussion can arise with the use of var (which I always use when possible, and our coding standard leaves vague). Personally I used to always use `var` when possible in the past - but nowadays not anymore. I use `var` whenever I use the `new T()` initialization on the right side. But if I call a method and store the result I use the proper type. This improves the readability of the code, as I can see directly what the type is - I don't need the IDE for this trivial task. It also improves code reviews, because the intent is much clearer what the type is storing. &gt; for long expressions, I don't think it's nicer to read myself. I still prefer interpolated strings for *longer* expressions. You can easily split up the lines and just concatenate them, and interpolated strings are safer (no wrong numbering). For very long expressions neither is suited, then a `StringBuilder` should be used.
Amazing thank you! I'll give it a go.
Thanks again. I knew there was a way to do it. Heres the code if you would like to pass a critical eye over it: public static object Dispatch(IServiceObject serviceObject) { if (serviceObject == null) throw new ArgumentNullException(nameof(serviceObject)); var callingFrame = new StackFrame(1); var callingMethod = callingFrame.GetMethod(); var callingMethodName = callingMethod.Name; var httpMethod = serviceObject.Request.Method.Method; var handlerClassName = callingMethodName + "Handler"; //Construct a handler name to a specific format var declaringType = GetCurrentMethod().DeclaringType; var verbHandlerInterface = typeof(IVerbHandler&lt;&gt;); if (declaringType == null) return null; var currentNamespace = declaringType.FullName; var verbType = Type.GetType($"{currentNamespace}.Verbs.{httpMethod}", false, true); var handlerType = Type.GetType($"{currentNamespace}.Handlers.{handlerClassName}", false, true); var verbObject = (IVerb)Activator.CreateInstance(verbType); var verbHandlerInterfaceWithVerb = verbHandlerInterface.MakeGenericType(verbObject.GetType()); if (handlerType == null) throw new ApplicationException($"Could not find a handler for the named {handlerClassName} incomming request"); var verbHandler = (IVerbHandler&lt;IVerb&gt;)Factories.ContainerFactory.GetInstance().Resolve(verbHandlerInterfaceWithVerb, handlerType); if (verbHandler == null) return null; //Find the method in the handler. Constraints are one paramter of the verb type and name is Handle var handlerMethod = verbHandler .GetType() .GetMethods() .FirstOrDefault(m =&gt; m.GetParameters().Any(p =&gt; p.ParameterType == verbObject.GetType()) &amp;&amp; m.GetParameters().Length == 1 &amp;&amp; m.Name == "Handle"); if (handlerMethod == null) return null; verbObject.ServiceObject = serviceObject; var result = handlerMethod.Invoke(verbHandler, new object[] { verbObject }); return result; }
The larger problem is that it'll have to run through this type resolution on every request. If you're going to try and work in this problem domain (which already has a lot of mature solutions) you should be using Reflection.Emit or System.Linq.Expressions to generate methods which create and invoke the controller. Windsor is also a very slow IoC container. I'd suggest considering carefully if you really need to write your own REST server, or if one of the many existing libraries would work.
Too bad it's GPL.
&gt; Was this intentional or did he forgot? I forgot, LOL. Actually it was my latest push I did a copy &amp; paste, it was `public static` which I removed. You had a very good point in your comment about `this.` where you said "Stick to one style" which I think is a golden rule that I must pay more attention to.
Maybe relevant: https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator
Why delete?
I don't know how to change them to images. I'd almost guess that's a registry edit. However, you can hit ctrl r + w to show white spaces and tabs as dots and arrows
I'm not downloading a random exe thanks. What is it, just a wrapper around `WebBrowser` as well? WinForms too I bet.
http://powergamestech.com/gpsource.txt
It is used to initialize the size of the internal value cache of the `DependencyObject` with the number of expected entries so it doesn't need to be resized multiple times.
What is this? Just a wrapper around the built-in `WebBrowser` control?
You've put more work into the website then you've put into this 'webbrowser' of yours. http://greenpandabrowser.tk/ This web page is found within the source code that OP has provided. ( http://powergamestech.com/gpsource.txt ) 
The theory, yes. Here is an example of altering XML comments: http://www.skorkin.com/2011/05/visualization-xml-doc-comments-painter/#.V_vBWE3n-cw I don't know how hard it is to create a new plugin.
So many interesting questions there get shot down or closed by mods. Over-moderation at its finest if you ask me
I think you're saying is that when you run a python script via a C# application that you don't want the end user to see the output of the python script. What you have right now should do the trick.. I tested it (with a hello world script) and made no other changes and it worked.. unless I am not understanding what you asked.
It's a [sorted array instead of a hash table](https://referencesource.microsoft.com/#WindowsBase/Base/System/Windows/DependencyObject.cs,3222), but yes, that's the idea.
Oh right. thanks!!
No, It works.
Cause thats from the project folder also there is only ONE thing. Do you know how virus total works?
Ahh, my mistake. I was thinking it would try to execute the process and didn't read far enough into the [MSDN doc](https://msdn.microsoft.com/en-us/library/53ezey2s%28v=vs.110%29.aspx) which stated: &gt; If the address of the executable file to start is a URL, the process is not started and null is returned. In actuality, it gets handled like launching a URL on the system. So it launches your web browser to the URL which prompts you to download/run it from there.
Its not harmful in any way. I don't understand
exactly
Just going by the result you posted here: https://www.virustotal.com/en/file/4b82176f3babe92326ccad976fde0a34400722c5c9e7746fd17a0e9027476ca4/analysis/1476115584/ I would suggest you upload the project to GitHub, or other public source control site, and post a link to the source code rather than to a compiled exe. EDIT: But I think you should be aware, if you do so, don't expect to receive high praise. I expect people might criticize you for your method for auto-updates, and for claiming this is your own browser that you made but it's really just a wrapper around the `WebBrowser` control.
I'd recomend WPF, don't quite remember if it supports cross platform
WPF for Windows only, Avalonia for all. https://github.com/AvaloniaUI/Avalonia
Yeah I'm not using something that's still in alpha.
The right architecture is usually domain specific. I suggest writing how you anticipate the user will interact with your library first and then implement whatever is needed to meet that use-case. Always keep the end-users needs in mind when you're making decisions. However, I did notice that you didn't mention [interfaces](https://msdn.microsoft.com/en-us/library/87d83y5b.aspx) at all - you certainly should be using them heavily to connect your modules together in an abstract way.
Are you saying they're functional while zipped, or would they have to be unzipped as part of the install process? 
Seems like a lot of overhead for what will essentially be useless to the average user, no? Currently, if a user has a particularly sticky problem, I can just send *that* user the .PDB installer.
Keepass does this, but you can protect it with a certificate file that you can share via other methods. That way it's safe.
if you want a plugin system, MEF should be good for this. If you plan to do a lot of plugin, you can even use nuget to manage them. As you said, it may be a bit overpowered.
What version of Windows do you have? I believe it'll only create if you have win10
There is a filestream class no? I can maybe do something with that? And yea ill try your auggestion. But if i do that, there will be traces?
Not without giving the website access to the "very secure secret stored elsewhere." A certificate works because you can keep it private on your local computer, you never store it anywhere else. 
&gt; And then does it compile? It's just a visual enhancement, the source code is not modified.
I use the pattern (or something similar): public abstract class JsonMessage&lt;T&gt; where T : JsonMessage&lt;T&gt; all the time, so I know I can provide a method that will provide a return of the same type, usually to deserialise it back to the correct type after it's sent over a network: public static T From(string json) { return JsonConvert.DeserializeObject&lt;T&gt;(json); } This will ensure the implementing class will deserialise the type correctly **EDIT** As I have edited above, as this is an interface, not an abstract, unless you are using this interface to implicitly type the object, the where T : ICloneable&lt;T&gt; is not necessary
Technically. The file would still exist until it's hard drive sectors are overwritten and could be recovered (just like any "deleted" file). You wouldn't need to use the FileStream class; just use the file path as you already have. Still, if there's a significant reason you are trying to keep the file inaccessible to the user, even as a resource it still isn't very secure. It's pretty easy to decompile your program and read the resources.
Does Xamarin only work cross platform on Win10?
Hey thank you for replying. I really appreciate the insight and overview you supplied. As for my mention of csharp ending in spaghetti code, I meant MY csharp ends up in spaghetti code (ends up looking like functional programming more than object oriented) though over time I hope that changes. Just getting confirmation on IoC and how LINQ works is awesome. I totally appreciate it.
I should have mentioned it in the original post, but this is not a web application. Isn't selenium only for web applications?
You could accomplish this with a web app all the same. The site could only store your password db as an encrypted file, that is encrypted/decrypted in browser by the app using a key supplied by you from your desktop.
If you're into some distributed applications and want to know more about Event sourcing and CQRS pattern - I'd suggest you a great free write up from Microsoft - "CQRS Journey": https://msdn.microsoft.com/en-us/library/jj554200.aspx It's a very detailed set of articles on how to apply Event Sourcing and CQRS patterns to build distributed apps. They are more into architecture and domain design and less about particular choices behind technologies. Not sure, if it's exactly what you're looking for but may be an interesting read to see the thought process behind pretty complex application. 
[removed]
Exactly what I meant.
no its a chat that i wrote in python that i dont want anyone to see the code. so you got any way i can share my python chat without anyone else be able to see the code?
To expand on this, the [MSDN documentation](https://msdn.microsoft.com/en-us/library/system.icloneable.aspx) recommends to not implement this interface for public APIs for the reason you mentioned (see the Notes to Implementers section). It's still *okay* to do so for your internal code, since you'll decide what the contract is in the context for your application and don't have to communicate it to the universe at large. 
I have a few problems with Telerik in general, but the [Telerik Testing Framework](http://www.telerik.com/teststudio/testing-framework) might work for you. It can be used to write automated tests for Wpf applications, thought I'm not sure about Windows Forms.
The best advice I can give you is to download Visual Studio at home if you haven't already, and just start writing C#. Think of a few simple console programs you'd like to make (minesweeper, checkers, guess-the-number, etc) and make them. That is the fastest way to learn anything, including C# and OOP. The problem will only get worse over time at university if you don't keep programming in spare time. By the third year you will be expected to create entire applications from scratch.
Great... except the article is from May 3, 2004, and they evidently didn't obsolete it.
Let me try answer your questions: 1) There's number of alternatives like SmartBear TestComplete, HP UFT, Borland SilkTest etc. I need to point out that none of these tools is free but all of them have options for purchase depending on your testing needs (Desktop apps, web apps, mobile apps etc.). I haven't found any free software that can utilize UI testing for desktop applications and work with full end to end regression tests properly. But this all depends on what kind of tests you are creating. The real question here is if you would like to create your own automation framework or use generic ones and modify them for your needs. I have found Coded UI extremely capable of automating desktop apps and it can be extended with Selenium and Appium for web and mobile platforms. If the test project bothers you because of running your tests, you can run your tests through MStest prompt with batch files without any issue. What I mean is, you can create your tests, export you release/debug folder and for example copy them to your test server or machine. The machine does not need a copy of Visual Studio, just Agents and Controllers (they are free.). Now, I know that you can use CodedUI only with VS2015 Enterprise and VS2013 Professional and up, and that increases the price of your VS package a lot so that could also be an issue. Keep in mind, that only test developers need to have Visual studio and all other testers that are going to run the tests only need agents and controllers that are free. 2) Yes, this is one of the benefits of creating your own framework that utilizes your methods for working with controls. Are you recording your tests or are you coding them? Are you using the generic UI map from CodedUI or are you creating your own? There's a lot of ways of working with controls. Recording is good for some small smoke tests but nothing else. I would need more info on how you are working with Coded UI to help you out. 3) Yes, there isn't a lot of documentation on this. For general usage of CodedUI you can google it yourself. If you would like to create something custom for yourself I would recommend that you start with this: http://www.codeduitutorial.com/2014/05/coding-in-codedui-test-using-c.html http://incyclesoftware.com/2013/03/build-a-coded-ui-test-without-a-ui-map/ The second link basically describes control search through hierarchy by using control properties. This gives you a means of creating your own map and control search methods that utilize different control waiting and handling mechanisms. 
Read up on `AutoResetEvent`. Can't give you more as I am on mobile now.
Your console window should not be closing until the `LongProcess()` method completes... unless it is `async` and you are calling it wrong. Is your `LongProcess()` an `async` method? In other words, if your code looks like this... async Task LongProcess() { // your long process } void Main(string[] args) { LongProcess(); } Then you should indeed use `LongProcess().Wait()` and the console should not close until it completes.
We used to work through this exercise with our new developers. Its not perfect, but it does illustrated TDD fairly well. https://domscode.files.wordpress.com/2010/05/cannonattack-a-test-driven-development-tutorial-in-c-4-01.pdf
A lot depends on what you want to do, and the type of game. Unity is very simple for simple games, but can also be "hard". If you do the stuff they do in their tutorials or similar stuff, you'll find that most of the time, Unity is fantastic. Stray off the path, and you could find yourself trudging through the dark for a while.
Look into [public-key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography). Have the servers/clients generate random public keys and transmit them to the other and store them in memory for the session. That said, encrypted communication is a solved problem. Investigate that (maybe ask around in /r/learnprogramming and /r/netsecstudents) and see about implementing something. Trying to hiding the source code of your program is a fool's errand. You can hide it and obfuscate it but it can be inspected; don't assume anything you put in there (including source code in your assembly resources) is secure, because it is not.
Thanks for your responses, but on #2 and #3 I think you interpreted them wrong. Those questions were related to Microsoft UI Automation (https://msdn.microsoft.com/en-us/library/ms747327(v=vs.110).aspx) not Coded UI Tests. I find that there is lots of good documentation for Coded UI Tests but not very much for UI Automation. The code in Coded UI Tests seems very easy to understand and read and I don't see any loops that constantly pole the UI so I was hoping the same thing could be accomplished using Microsoft UI Automation. 
Ok ty i look on it!! 
Atleast in EF6 you don't need a foreign key constraint in the database and entitities can point to views with the Table attribute so it should be possible.
I many cases it's sufficient to simply add a Clone method to the type you want to clone, i.e. no need to implement any interfaces. Generic ICloneable&lt;T&gt; (or similar) is not super useful as for an abstraction to be useful, you need to have methods consuming the abstraction (taking it as a parameter), and I have not seen many cases where reusable routines could consume ICloneable&lt;SomeType&gt;.
So, a console app cannot truly be asynchronous? For example, getting users, and while getting the users, printing you are busy with getting the users, and when it is done you print that you are done? I never fully grasped async await, I hope you can help out. 
That only works until i get to the part where i have to count cents however.. I can't calculate money/ 0.5 (to get the amount of 50 cent coins) because Operator '/' cannot be applied to operands of type 'decimal' and 'double'.. 
Have you considered treating 500 euros as 50,000 cent?
It'll make more sense if/when you learn about how floats and doubles are represented by the computer. See [IEEE floating point](https://en.wikipedia.org/wiki/IEEE_floating_point) for details.
100 cents to the euro, presumably, so 50,000 cents, rather than 500,000, right?
Decimals can be devided by an integer though, so money / 500 should work just fine. Floating-point numbers has a large range and mathematical operations can be performed quickly BUT the accuracy gets worse with larger numbers. When accuracy is important, use decimal instead of double or float.
Actually this is a beginner course so we're not allowed to use methods and various other things (even if we already have pre-existing knowledge).
Uhuh you're right, me no thinky. Cheers, need sleep
Also, you could just throw a format specifier in your WriteLine format string: Console.WriteLine("{0:N2}", st500); I mean, yeah, don't use doubles for monetary calculations, but if all you want to do is eliminate the artifacts of IEEE floating point, that's a simple solution.
http://codepad.org/ https://ideone.com/ &lt;- compiles c# http://pastebin.com/
http://pastebin.com/DayxZ4iv thanks
Yes it can, but it can obviously not end its main thread and continue running, and neither can any other type of program. In the typical GUI program, the main thread runs in a loop outside of your code. 
That may very well be a wonderful document, but I can't subject my eyes to 30 pages of Comic Sans!
The checkboxes works fine, your problem is elsewhere. Either: One of the other inputs are incorrect, or maybe your checkbox names are wrong? Confirm that your checkboxes are truly called checkBox1,checkBox2,checkBox3 -- no other checkboxes around you're confusing them with? Maybe start off with renaming your checkboxes in the designer? "cbTopping1", "cbTopping2" etc.. Would be easier to spot. In any case, your checkbox code is correct. 
hmmm, I checked the names and they were the same in the code and in the design. Changed them anyway and still have the same problem. No matter which single one box is selected it still registers as "0" in the total thanks for the help 
Upload a zip of your project? http://zippyshare.com (onedrive, dropbox etc works fine as well) I'll take a look.
2.99 with cone and 1 scoop selected
I get 1.75 (no options selected at all), 2, 2.25 and 2.50 Looks correct. If these are not the results you are seeing: 1) Close all open files 2) Close your project 3) Delete the "bin" and "obj" folders 4) Re open and try running it again. Obs: Simply doing project/solution clean will not do it. **Original post** - Damn wrong button.
Cool, I'll have a look. I suppose I shouldn't be tied to and input to output process, its just that the 'use cases' i had in the past really focused on that. I.e optimisation operators working on data (population sets) and outputting a new population set / individual solution.
Your dropbox for cone/cup does not work correctly. It is prob throwing off your calcs by "$.25". &lt;-- There is your problem
changed all variables to doubles, then made the formula: toppingTotal = (topping1 + topping2 + topping3); scoopTotal = ((strawberry + chocolate + vanilla) * 0.99); total = toppingTotal + coneCup + scoopTotal; still not registering that first checkbox as 25 cents 
how would I change the if statement to reflect that? thanks
have not learned the List function, this is my first c# programming class, sorry! I wasn't sure if there was something better than an "if" to use there
List.Union
Thanks, I'll look into this.
I'd still love to see your complete, running code, and also I'd love to see a statement of your requirements. If this is a homework assignment, I'd like to know exactly what the assignment says. Perhaps List.Union will be what you need, but I am really confused by your original description. 
Awesome! Good to hear and thanks for the feedback on this. It really is easy to understand when looking at it(at least for me). I don't know C# Lists THAT well, so was curious if there was an ultra shortcut to this requirement.
**Sorry, I should have read your post till the end....I've used Console.ReadKey(); before. Put it at the very end. It will just stay open until you press any key.
For the future, set a breakpoint (click left of the line number) on the first line of the function. Then just go trough it line by line, and see where the value changes ;) 
Since there are a host of good answers here, I'm going to make one more, use while loops: var num = 0; while (money &gt; 500) { num += 1; money -= 500; } console.writeline("500 euro notes: {0}", num);
Also, look into the "KeyDown" and "KeyPress" events. You can configure the text box to allow numeric only, avoiding any issues with having to TryParse.
Removed: Rule 5, spam.
My understanding is that modulus should not be used on anything other than ints for consistent performance
That may be true, but this doesn't look like performance critical code.
And I think I would suggest you look at timing it before settling on one way or the other, personally.
To clarify on the projects I am talking about, the goal is to make C# a first class citizen on Linux. I am unsure whether or not if I should focus on creating a new Linux Distribution to replace most of the libraries and codes that relies on obscure libraries and codes such as X11 and QT5 (which as of now, C# have no reliable binding for) as well as providing additional library interface inclusions for each package that is installed on Linux to have both Header files and C# equivalent library. So it would deem necessary to create a new Linux distribution with a set of fundamentally different libraries and code from a normal Linux distribution you would see in Red Hat Linux, Fedora, CentOS, Ubuntu, Debian, Arch Linux, Majaro, Mint Linux, OpenSUSE, SUSE Enterprise Linux, and so forth. Obviously this goal would include the needs to create a new Display Server, IPC Protocol (Like X11 or Wayland), binding most of the fundamental libraries, and so forth in the way that is friendly and smaller to C#/VB/F#/PowerShell languages. C# is by no means a one size fit all solution, since there are some disadvantages to C# like how it would suffer performance penalty as opposed to natively compiled code, so the goal is to use them interchangeably when necessary. For now I'm trying to create basic interfaces with some of the programs that exists like Gimp or VLC Player to establish a programming foundation for native C# development coding guideline along with the help of prototype Transpiler I've recently built for bidirectional C#/C languages. (To clarify, Transpiler does not necessarily compile from IL to C, rather it compile C# source code into C equivalent source code and optimize that much in the same way as CFront was made for. It also have the options to translate C code into C# equivalent or to bind it.) Transpiler is particularly useful, because it catches unique situation where a C language Structs could allocate more buffer than expected like [this](https://gist.github.com/CsharpOnLinuxDev/1aa626c5e041ce6be238e4390ef8dce2) and the reasoning for that is alignment: http://stackoverflow.com/questions/833526/why-short-is-stored-as-4-bytes-in-a-struct-in-c Transpiler is still in early development however, but it is showing itself to be promising. I posted on here to see if there is any interests in making .Net Languages a first class citizen on Linux.
Instead of Mono, why not use .Net Core, where native images will exist soon... 
.Net Core particularly the CoreClr is one of the priority that I'm working on. Mono was written in C, so that why I went for it initially, because it's easy to work with when I haven't figured out the CoreCLR source code yet. (particularly some of the C API calls it provides.)
This may be relevant.. https://github.com/dotnet/coreclr/issues/659
 return ExcelDATA.SelectMany(e =&gt; SQLServerDATA.Where(s =&gt; s.B == e.B), (e, s) =&gt; new ReportDATA { A = s.A, B = s.B, C = s.C, D = s.D, E = e.E, }) .ToList(); I'm not confident it will be *more efficient*, though I'm also not sure any difference is noticeable. You could move simplify the loops a little bit, moving the ReportPOCO into the if statement var reportData = new List&lt;ReportPOCO&gt;(); foreach (var e in ExcelDATA) foreach (var s in SQLServerDATA) { if (e.B != s.B) { continue; } var rContrstructor = new ReportPOCO { A = s.A, B = s.B, C = s.C, D = s.D, E = e.E, }; reportData.Add(rContstructor); } which mainly saves you allocating a ReportPOCO for every ExcelDATA and SQLServerDATA by limiting it to just the ones that match up. for() loops would be *slightly* more efficient than foreach() loops, but it may not matter. var reportData = new List&lt;ReportPOCO&gt;(); for (var i = 0; i &lt; ExcelDATA.Count; i++) for (var j = 0; j &lt; SQLServerDATA.Count; j++) { var e = ExcelDATA[i]; var s = SQLServerDATA[j]; if (e.B != s.B) { continue; } var r = new ReportPOCO { A = s.A, B = s.B, C = s.C, D = s.D, E = e.E }; reportData.Add(r); } (Apologies for the very terse syntax.) This just saves you the allocations for the list iterators used by the foreach() loops.
You can check out [WpfBindingErrors](https://github.com/bblanchon/WpfBindingErrors). I would recommend wrapping the attach call in a #if debug statement so it doesn't accidentally hit prod.
Update: main problem was that server administrators gave access to file server to wrong identity that was running different server. It took me some time to figure that out. But that at first also didn't solve the problem. SPSecurity.RunWithElevatedPrivileges(...) that you advised works perfect now and everything works. Thanks a lot!
The System.Random class have a [bug](https://connect.microsoft.com/VisualStudio/feedback/details/634761/system-random-serious-bug#tabs) that won't probably fixed due to the risk of breaking legacy applications. It doesn't work very well on [multi thread code and have significant bias on the returned number](http://stackoverflow.com/a/6842191/529282). While it may work for casual randomization (say, randomizing text color), it might become problematic on games if hundreds of objects rely on better distribution. The advantages of System.Random would be speed (though not so much so, see previous link), and having seeds means we can replicate the sequence. This is useful if you want to replay a battle consistently (it would be bad if a character died early due to lucky roll, but survive on replay). Main disadvantage is if you really need a random distribution, especially on scientific application the risk of generating flawed result may be unacceptable. RNGCryptoServiceProvider advantage is in better distribution and randomness. On encryption, or even simple shuffle like cards when money are involved, you really don't want an adversary to figure out the pattern. Disadvantage is since there's no seed, if you want to replicate a sequence you would have to store them to playback afterwards. Imagine a RTS where the effect of each hit is randomized, a short skirmish could easily require thousands of numbers just to replay it afterwards. 
Aww. I did that before the first add-on. But I don't want to fix nuspec every time I change dependencies or anything else.
You can take a look at some of the courses Microsoft offers at [edX](https://www.edx.org/course/developing-windows-10-universal-apps-microsoft-dev209-1x-1).
You can try nuproj. I personnaly use AppVeyor to achieve this.
Awesome thanks.
I linked AppVeyor to my GitHub and to NuGet. Basically each time I merge to master, AppVeyor run the build. When I tag a release, AppVeyor push the build to NuGet. You can see the project on [Github](https://github.com/aloisdg/Licorne), [AppVeyor](https://ci.appveyor.com/project/aloisdg/licorne) and [Nuget](https://www.nuget.org/packages/Licorne/). It stills a work in progress, but any feedback is welcome. ;) I followed this [blog post](http://andrewlock.net/publishing-your-first-nuget-package-with-appveyor-and-myget/) to get everything running.
You can ask on their gitter if you want.
Yea, I made like a Tic Tac Toe, application. Went well but I only used like main, and had one class. static void Main(string[] args) { Findout find = new Findout(); while (find.over == false) { if (find.player == true) { Console.Clear(); find.write(); Console.WriteLine("Player 1's turn"); string k = Console.ReadLine(); find.player1(k); } else { Console.Clear(); find.write(); Console.WriteLine("Player 2's turn"); string o = Console.ReadLine(); find.player2(o); } find.checkifwinner(); } find.write(); Console.WriteLine("WINNER WINNER CHICKEN DINNER!"); Console.ReadLine(); } I Keept my "Main" pretty clean.
&gt; I would recommend wrapping the attach call in a #if debug statement Just stick a [System.Diagnostics.Conditional("DEBUG")] on the method.
That's why open source is so important, because that's a lot of trust to put in ANY app, regardless of paradigm. 90% of users are not interested in managing their own sandbox to maintain greater control.
Actually, I'd suggest WinForms first. WPF is pretty complex for someone just starting out with GUI development. 
I might not be completely clear on your question, but one thing you can do is use [partial classes](http://stackoverflow.com/questions/30075661/placement-of-extended-partial-classes-in-entity-framework) to supplement the auto-generated model. Are you using code first or auto-generated classes? Assuming the latter, which is a big assumption, say your generated model class looks like this: using MyApp.MyNamespace; public class MyModel { public int Id { get; set; } public virtual ICollection&lt;MyLedger&gt; MyLedgerEntries { get; set; } } And you want to add some functionality to it, say the `LatestLedgerEntry` property. You could make a partial class by adding a file like so: using MyApp.MyNamespace; public partial class MyModel { public MyLedger LatestLedgerEntry { get { return MyLedgerEntries.OrderBy(mle =&gt; mle.CreatedOn).Last(); }; } Now with an instance `myModel`, you can call `myModel.Id` or `myModel.LatestLedgerEntry` just the same.
&gt; but specially the fact that I can't refactor in my ViewModel and update it automatically in the XAML file. If you set a design time context that is associated with an interface and use Resharper (pretty much a requirement in VS anyway) you do have this feature available. I never manually update XAML after refactoring, unless I'm dealing with some edge conditions and complicated templates. The biggest hurdle with WPF and XAML is that it forces you to do the right thing, and that does have a certain overhead. But as any good developer should, find the right tools to make life easier and faster. I was in the same boat as you are right now when I started with WPF, but I followed some online courses and spent time improving my techniques and I now find it much cleaner and easier than Windows Forms.
I went from e.Graphics.DrawImage (There's some specific name for that - Where you're using a Forms OnPaint event...) to XNA to MonoGame to Unity. Unity has a TONNE of mathematical methods and class libraries specifically created for Game Development that the base .NET Framework lacks. There is also a metric tonne of free content (Shaders, Textures, Models, scripts, etc, etc, etc) over at https://www.assetstore.unity3d.com/en/ that is awesome to get you started with a game. I enjoy spending 20 hours trying to correctly import a .obj model to XNA exported in Blender with settings a, b, c, r, x, and z checked that all conflict with each other as much as the next person (Not to mention the textures are now shrunk, inverted, and wrap incorrectly), whilst with Unity you can literally drag the saved .blend file in and it will work as expected. A lot of little things that go a long way :)
This actually seems like a very questionable implementation. The important part is byte[] randomNumber = new byte[1]; _generator.GetBytes(randomNumber); Which creates a byte array with 1 element and fills it with a random byte from the crypto RNG (`RNGCryptoServiceProvider` retrieves cryptographically secure random numbers from the operating system). This means that this function can only ever produce 256 (range of a byte) different random numbers, regardless of how large the desired integer range is. The basic idea is - create a random multiplier between 0 and 1 based on the random byte - determine the possible `range` of values between `minimumValue` and `maximumValue` (e.g. between 10 and 15 would be a range of 0-5) - multiply the `range` with the random multiplier - add the result back to the `minimumValue` to get a number between `minimumValue` and `maximumValue` - done There is some weird rounding stuff going on there, and the way he converts the random byte to a double is convoluted and nonsensically named (it has nothing to do with ASCII encoding), so this implementation is much more confusing than it actually has to be in my opinion.
Don't know for sure, but if I had to wager a guess I assume the bits for Visual Studio and Team Foundation Server will be released at [connect](https://blogs.msdn.microsoft.com/visualstudio/2016/10/05/join-us-in-november-for-connect-2016/) in November.
You need the cryptography namespace because that is where the type `RNGCryptoServiceProvider` is found. This provider generates a cryptographic secure random byte stream which can be turned into whatever datatype you want. This method is also buggy... 1. `NumberBetween(0, 1000)` will only generate 255 different values 2. there is a statistical bias towards `minimumValue` in that the 2 smallest values generated will be closer together than any of the other 255 values. I would write something like this instead: public static int NumberBetween(int minimumValue, int maximumValue) { long random; var randomBytes = new byte[8]; do { _generator.GetBytes(randomBytes); random = BitConverter.ToInt64(randomBytes, 0); // force the number to be [0, long.MaxValue] if (random &lt; 0) random = -random; // repeat if you happened to get exactly 0x7FFFFFFFFFFFFFFF... // should be about a 1 in 9 Quintilian chance } while (random == long.MaxValue); // now random is [0, long.MaxValue - 1] // convert it to a double in the range [0, 1) double randomDouble = random * (1.0 / long.MaxValue); // it is possible that max - min &gt; int.MaxValue... long range = (long)maximumValue - minimumValue; // force the result to be an integer in the range [minimumValue, maximumValue - 1] return (int)(minimumValue + (long)(randomDouble * range)); } perhaps with a few minor optimizations (ex: check if range &lt; int.MaxValue at the start and do a int version instead of a long one).
If you're using code-first migrations, you can just create the property as you've outlined above. Throwing a [NotMapped] annotation above the property would ensure it doesn't try to map it in migration. You may also need a getter for MyLedgerEntries that handles null cases, depending on whether you're using eager or lazy loading.
I'm an idiot without my contacts &amp; didn't pay attention to the error. Wrong keyword order: public partial static class Deleting to avoid further embarrassment. :P 
+1 for using the `[NotMapped]`attribute - it does exactly what OP needs. &gt; You may also need a getter for MyLedgerEntries that handles null cases, depending on whether you're using eager or lazy loading. Or, initialize the `MyLedgerEntries` collection as an empty list or something in the entity's constructor. That way you don't have to litter your code with a bunch of null checks. 
Yeah, learn WPF if you have a choice. WinForms are a bitch to get right, especially if you want your app to be asynchronous and responsive. 
TIL, thanks.
WinForms is old. Uses old tech (GDI+). Doesn't have fancy bindings like WPF does and Microsoft uses WPF for Visual Studio for example. Exact differences are better read from a blog though. WinForms isn't going away easily because it's rusted into Windows itself but strongly consider going with WPF for new projects.
I've always been bothered by the standard "Use Decimal, not Double" answer. Hear me out. Other users are correct in pointing out this is a problem with floating point numbers in general. Decimal doesn't solve the problem. It adds more bytes, and it's much harder to create an example where it becomes a problem. But it's still a floating-point number and subject to the same kinds of problems. It's kind of like solving "my program leaks and I run out of memory" by buying more RAM. "Back in my day", which wasn't really that long ago, I was given this problem in C, and there wasn't Decimal to fall upon. Professors give you this problem to make you aware that there are inaccuracies in floating-point arithmetic. The way we handled this in C was to recognize that "fifty cents" can be expressed as either a fraction of a dollar, or an integer number of cents. 100 cents = 1 dollar = 1.00 dollar. So the trick to solving the problem was to convert the money into integer cents, do the math on integers, then as the last step convert the integers back to decimal numbers. That approach will NEVER be subject to inaccuracies, and I think is the right lesson. It frustrates me that the de facto .NET answer is, "eh, Double does that, use Decimal". 
WinForms is still worth learning since there are still lots of jobs for it. And as bad as WinForms may be, at least it isn't VB6, which is still paying the salaries of lots of people. 
These are indepth tutorials made dummy proof for anyone who is interested in image processing. Feedback is very much welcome :)
The first one is a field, not a property, which is why. Vs doesn't show references to fields because they largely shouldn't have any. It's best practice for fields to be private or protected, and not public. Just use a property and initialize it in the constructor. Google "C# field vs property" for more info on them.
Doesn't work when I click on view any of the tutorials. Just a blank screen.
&gt;That's because you aren't supposed to pretty much nuke all the rules. I can think of about 5 at the most rules that I always disable. There's no point using StyleCop and FxCop if you are just going to ignore or disable everything they warn you about. No. I am not going to disable all the rules. But having to correct something that Visual Studio put out by default is just beyond me. `App.xaml.cs` is not like a file that I code myself or i will have to touch it regularly. And please don't quote me out of context like that. &gt;How is it a competitor? They are the same thing. .NET Foundation prefers a C++ way of naming and style, which is what StyleCop is steering away from. For example: &gt;We use _camelCase for internal and private fields and use readonly where possible. Prefix instance fields with _, static fields with s_ and thread static fields with t_. When used on static fields, readonly should come after static (i.e. static readonly not readonly static). &gt;We avoid this. unless absolutely necessary. 
What happens when you press pause in VS, where is it currently? Sounds like something is blocking or there is a deadlock.
Good call. Tried hitting pause, and it just jumps back out to the line: "Application.Run(new FrmMain()); This is in the Program.Main() of all windows form apps.
I keep it simple: * Format document (Ctrl+K, D) before save. * Avoid regions (based on past overuse - I learned the hard way). * Parenthesize even single-line conditionals and loops. Other than that, I just follow most of the .NET Foundation Style. I've never read that document before, so I guess I just picked up those habits from C# bloggers and Stack Overflow posts over the years.
How are you reading the file? If you're using the MSOffice interop, I could imagine that taking some time to query through the libraries/executable (though I'm just guessing with this). Have you considered using a different library? Maybe give [EPPlus](https://epplus.codeplex.com/) a shot. It'll load the entire spreadsheet into memory (I believe) and should hopefully be super fast iterating over all the rows. EDIT: It could also be some poorly performing code in your loop, though it doesn't sound like it.
I am using MSOffice interop. I will have to give EPPlus a shot. Thank you for your help :) Edit: This is in response to your edit. The loop is ...well it's about as basic as it comes. It's merely a for loop that iterates through each row in a column checking the value. 
You can easily extract the resources from a program.
[101 LINQ Samples](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b) is a great place to start.
No, I mean that she has an ASP.net application, and she is splitting the project into separate projects, for the Model, the Domain etc, for separation of Concerns. But what has she created those separate projects from? The icon looks like a class, but its obviously not, she doesn't say how she made them, they are not more web projects. How did she make MVCSalesApp.Domain
She is creating additional projects within the solution. The project type she is using is a "Class Library." Right click on the solution -&gt; add -&gt; project -&gt; class library. 
I use Linq to Objects extension method syntax every day of my life. I second the Jon Skeet Edulinq recommendation.
He didn't say if he was doing it as a hobby or as a profession. I doubt it was on the job because it's be impossible to ignore in your existing code base. If you're just learning fundamentals it's easy not to touch LINQ for a while, it can look scary at first. I'd also argue you shouldn't use it at first so you understand the alternatives when filtering through collections.
Eh, if performance is really critical you should probably be doing your data manipulation in the database.
also try to understand what linq is doing behind the scenes, knowing that where(x =&gt; x.BooleanCondition) is the same as public static IEnumerable&lt;T&gt; Where&lt;T&gt;( this IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; predicate) I won't bore you with the logic that invokes the predicate over the input returning the list of objects that meet the condition, but you can see how it makes life easier, but don't use it without knowing how and why it's working
I love regions! But yes, to point 3, agree.
yeap, perhaps some work with List&lt;Object&gt; before could simplify the learning
[LINQPad](https://www.linqpad.net/) is a great scratchpad for learning LINQ. It comes bundled with a buttload of tutorials that you can find in the Samples folder - as shown in the bottom left of [this screenshot](https://www.linqpad.net/images/mainscreenshot.png).
Thank you, will do next time
We (Big enterprise) stick to StyleCop. ALL rules enabled with two exceptions: file headers and doc on privates are not required. It can be a bit annoying for maybe the first week (usings inside namespace what) but after that it just becomes your default way of writing code. Get ReSharper, get the StyleCop plugin, fix code until all blue squigglies are gone --&gt; pretty code.
Those are all horrible guidelines which directly violate the Microsoft ones. C++ developer by any chance?
Yea, but StyleCop's default rule set sucks.
WTF are you talking about? This is a well known problem for XAML based tech.
Suck it up and deal with it. Unless you are using UWP with static binding, which leaks memory by the way, there isn't any good answers. Still, it beats JavaScript...
The `List` class always (since 2.0, at least) had `Sort` and `FindAll`, which was already than `foreach`-loops, but still pretty much sucked without lambdas. 
I do. StyleCop and FxCop are actually 2 different tools: the former checks for pure coding style, the latter actually uses your compiled assemblies to do static analysis (so it doesn't care, nor does it check stuff like how your brackets are indented). We actually use both. And yes, the default templates put the usings outside of the namespace (although that's easily fixed). I think that's the only difference between what StyleCop says and what VS does.
Resharper taught me LINQ. It automatically converts for loops into LINQ which is an awesome way to learn.
I really like the Mono Coding Style for C#.
If you open both the Threads and Tasks panels (Debug -&gt;Windows -&gt; Threads, and Debug -&gt; Windows -&gt; Tasks) and then press the 'Pause' button, do you have any blocked threads/tasks?
There are still some people that build huge desktop apps with Winforms. You don't always have a choice in what you use, or time to look for better.
LINQ is overall slower than regular methods, but you don't use it for performance-critical algorithm. You use it to have a more readable and easier to produce code (once you get the hang of it ;p).
Here's the coding guidelines I drew up for my game engine: http://pastebin.com/tkQPW6xG
&gt; I don't know why you'd say extension methods are hidden FP, that's not true at all. They're a more modern alternative to extending types, hence the name. My mistake, I meant to type 'procedural'. Because if I would take your giant heap of extension methods, and delete the `this` before every first parameter than you would have a giant collection of static methods, (possibly) not structured in any way. Then you're just doing plain old C again. Again see Microsoft's own [recommendations](https://msdn.microsoft.com/en-us/library/dn169395.aspx) 
It depends entirely what industry you are in. I see almost zero LINQ code in any codebases I have to deal with.
I like http://www.wpf-tutorial.com/ It starts very simple (like "What is a GUI?") and builds up to more and more advanced examples. I recommend that you type all the code examples into Visual Studio as you read it.
[LINQPad](https://www.linqpad.net/)
&gt; Of course not, but there's nothing in the language preventing me from doing it. If you have a big project with hundreds of classes, and one dev creates a class 'Extensions', other developers start adding their totally unrelated extensions to it, you'll have a "giant heap" in no time. And having all your devs extend all your classes is better how? At least with class extending we *do* have something in the language to prevent it happening: *Sealed*. &gt; I do prefer composition over inheritance, but this is C#, not javascript. If I have class with 10 methods that are just void Method() { this.child.Method(); } Then I'm switching to subclassing whatever class child is. Which is bad practice. You're introducing coupling for no reason other than saving a few lines of code. Remember, we're not talking about "`SUV -&gt; Car -&gt; Vehicle`" here- those types would fall under the definition of *explicitly designed for inheritance*. We're talking *every class* in your codebase. They should be sealed by default. Sorry, there's no way you'll convince me. &gt; Types don't have to be sealed since there rarely is a reason for saying "this class should be in no circumstance ever be subclassed by any other developer ever." Take that sentence and see how it sounds like this: "*Implementation details (such as fields and methods) don't have to be private since there rarely is a reason for saying "this field should be in no circumstance ever be accessed by any other developer ever."*" Same argument, really. *Sealed* is about controlling access and reducing unwitting dependency on implementation details. Just like access modifiers.
Performance is always important and not everything that people write code for even has a database.
In my personal experience, LINQ is very worthwhile in web programming. Many of the statements in my web applications take the form of "For all X do Y unless Z", which is an idea very well expressed in LINQ. var loggedInUserNames = Users .Where(_ =&gt; _.IsLoggedIn()) .Select(_ =&gt; _.UserName); You specifically asked if it is "faster", which might mean application execution time. My understanding is that LINQ compiles down to equivalent IL statements which should be the same speed as if they were written otherwise. Parallel LINQ however lets you use the same syntax in order to easily get into parallelized computation if desired. The definition of "faster" I'd focus on for web applications is developer time (both before and after a feature's release), particularly because I/O (database read/writes) is almost always the actual performance bottleneck in a web application. LINQ seems to give me more consistent, readable, and error-free code than the same logic written in loops. I'd recommend trying to learn the LINQ queries one at a time, as needed, primarily using IntelliSense as your guide and falling back on MSDN as needed. Learning *.Where* and *.Select* was more than enough to show me the usefulness of the approach. After that I just investigated suggestions from Resharper and take time to look up if a particular problem can be solved with LINQ once in a while.
I coded with .net for four years before I learned about linq
1) The difference between ForEvery and List.ForEach is that ForEach can only be used on lists, and ForEvery can be used on any IEnumerable(including lists, arrays, etc. Anything you can foreach over). DoTo gets an item with a predicate and then applies a function to it. So DoTo( {"John Doe", "Mike Doe", "Mike Hancock"}, (x =&gt; x.Split(' ')[1].Equals("Doe"), (x =&gt; x.ToUpperCase())); for filtering purposes, etc. 2) Yeah, some of the terminology is real confusing. I'm going go through and pretty much change anything that's not a real English word lol. Would you say that the name of something is equal to or more important than the documentation comments for explaining what stuff does?
You seem to keep thinking that by _subclassing_ an object you can _modify_ it... So no, it's not at all like access modifiers. In my 5 or 6 years in C# development I have not once seen too much subclassing (in C++ that's another story, because of multiple inheritance). Messy extension methods on the other hand: a lot. Probably you have a different experience. Anyway, we're not going to convince one another, luckily we don't have to work together ;)
1) There's nothing wrong with naming your ForEvery extension method ForEach if it does the same thing as List.ForEach(). There are actually several libraries that have extension methods for ForEach()... Using the same name makes it easy to infer what the method does (for anyone that has seen/used the List.ForEach() method). For the importance of naming, I think of it like the old joke about electronics "Who reads the manual?" In development, I'm OK reading documentation if I have to, but I do it grudgingly. If you can: A) Name the classes and methods something intuitive B) Have Code Comments that document all public classes and members Then I'm much happier using the library. Think of Method Name as your first way of telling a consumer what something does and the code comments that show up in intellisense as the second. Each of those are easy to access while reading documentation and the source code is a distant third and if I have to do it too much for a library, I tend to start thinking about "Maybe there's a more intuitive library out there I can use?" The above might sound a bit lazy, but as you start putting together larger projects with more code that use more libraries, the cost of a library not being easy to pick-up and understand without spending time hunting down their documentation is a real problem.
There's a slight problem having it be called ForEach, because the return type is different than List.ForEach, but List implements IEnumerable (which gains ForEvery from HumDrum), so there would be a method of the same name with a different return type, meaning you couldn't call it like an extension method on lists. I totally get what you mean with the names though. I basically 100% learned basic reflection for this library by browsing the names and return types of System.Reflection, so I'm going to put some real effort into seeing if things are named the best they could be, and what the change them to.
Yes, OP definitely needs a lot more praise for the documentation alone. I mean, creating a nice big project like this is one thing...documenting it this well is another level. 
Ahh, I didn't notice that, my bad. I hadn't looked at the code so took a bad guess for what that method is doing. ForEvery() is really Select(), and going through the code of the HigherOrder class (I might have the details wrong on some of these): * When() is Where() * ForEvery() is Select() * DoAll() is All() * Collapse() is Aggregate() * While() is Where() So you've essentially created your own LINQ grammar... Not that that's a bad thing, just pointing out there might be some cases where you don't need to write your own code/wrappers/replacements.
This is exactly how I learnt LINQ too.
No, all my suggestions work with any IEnumerable&lt;T&gt;. See https://msdn.microsoft.com/en-us/library/system.linq.enumerable.aspx for the full list of operators. I agree about there being a use case for other generators than Range() and Repeat(). One more thing I think LINQ is lacking in.
Found the solution (updated the original). Thank you for the help!
Found the solution (updated the original). Thank you for the help!
https://github.com/ExcelDataReader/ExcelDataReader is what I've always used.
Is there something besides Windows Forms you prefer for desktop applications? Currently using them at work, and I don't mind it.
There are some powershell scripts in this tutorial which you may find helpful https://www.suchan.cz/2014/10/how-to-deploy-your-own-nuget-server-on-azure-website-in-15-minutes/
Are they stuck with .NET 2.0? Because WinForm and LINQ are not mutually exclusive specially on the business layer side of things.
Easier and more importantly: so much easier to read. I have completely abandoned the SQL-looking syntax in favor of method chaining. The method chaining just seems easier to read to me: collection.OrderBy(XXXX).First(). Boom, I just sorted a collection by some field and asked for the first element. Of course I'll put a line return between each chain method for better readability: var myStuff = collection .OrderBy(XXXX) .First();
I'll have to try it out sometime. Was considering it when starting a new project but all devs on the project were used to WinForms. It didn't really make sense to switch.
Google "Costura Fody".
I am not sure what this provides over using LINQ?
So just create a new class library project and store all my classes in there? Then reference it in the console app and any changes needed I would just make to the class library then rebuild that and replace the dll in the console app directory?
You could just do Single() instead
Yeah I see the sort you mean.
You don't have to know what it's called ahead of time. You can also avoid assembly versioning issues this way. 
Single and First while COULD be useful, are generally not. They throw an EXCEPTION if nothing is returned. You're assuming I've seeded my database with default values. Nope. That's a really bad idea. Best practice would be to assume default and check config differs than it. Single and First are so useless that because they throw an exception they don't allow you to provide meaningful information to your user if they are not found. I mean sure, you'd throw it into a try catch statement, but do you really want to do that? Is it really "Exceptional" that there is no entry for something in a database? It's much easier to do a Null check and handle the contingency for that. 
I attempted to solve Project Euler problems with as much Linq as possible in LinqPad. eg. Problem 1 Enumerable.Range(0,1000) .Where(x =&gt; x % 3 == 0 || x % 5 == 0) .Sum() .Dump();
It's definitely exceptional if you're doing a lookup for a record by it's primary key, or if the design of your system expects there to be an entry for any reason. There are plenty of reasons to throw an exception, and not having a record in a database when you're expecting it to be there is definitely one. You're arguing the merits of Single vs SingleOrDefault/First vs FirstOrDefault, which wasn't what I was talking about. I'm saying you should use Single instead of First, be that the plain exception throwing version or the OrDefault version. If you filtered the table on your discriminator it would enforce a Unique result. But it sounds like you're trying to reinvent the wheel of TPH to me. 
&gt; Actually something that I feel is missing from LINQ. There are Take() and Skip() methods, but nothing to take or drop elements from the end. I agree, but is this because the same operation in SQL requires a subselect? (edit: I thought LINQ has its roots in SQL) It is technically possible with `list.Reverse().Skip(1)` or `list.OrderByDescending().Skip(1)`.
Have you considered reusing static buffers instead of allocating new ones for each invocation? Saves you the GC collection, most of the memory allocations and having to work with unsafe code. You'd just need to be a bit more careful with multi-threading. Another `unsafe` option is [`stackalloc`](https://msdn.microsoft.com/en-us/library/cx9s2sy4.aspx), which is freed and zeroed for you unlike `AllocHGlobal`. Although the size of your biggest arrays might be a bit borderline for the stack, dunno how that works out in Unity. Generally it's a good idea to place `FreeHGlobal` global calls in a `finally` block to avoid memory leaks after non-fatal exceptions. It's not part of your excerpt, and it probably won't make a difference for a `Vector3`, but a common mistake is incorrectly determining the size of structs. In theory, the runtime can pack structs however it wants to depending on the platform its executed on, and `Marshal.SizeOf` is not always the same as the unsafe `sizeof` operator.
If you're using linq on an IQueryable it will do the operations in the database. Have a look at https://msdn.microsoft.com/en-us/library/bb425822.aspx
Thank you a lot for taking the time to write this up. To clarify, I do know the Framework very well. I know LINQ in-and-out, but wanted to implement these functions on this library so that the collections themselves would have the methods. Additionally, I wanted to remove the System.LINQ dependency, because this library actually started before LINQ worked very well with Mono. Transformations.Make is essentially just new[], yeah. And what I mean by LINQ-like syntax for all IEnumerable is that any IEnumerable&lt;T&gt; can use the functions in HigherOrder. Noted about the .Files. I'm gonna make the file list private and shift it to the function, like you said here. That's a really good idea. ObjectBuilder is actually only useful in one of my projects. Really, really, niche. The long-and-short of it is it's getting type information from a database that must create new objects given a certain format. As breakable and slow as ObjectBuilder is, I actually quite like it lol. Being able to make a factory to manage multiple constructors, etc. is really nice to be able to do on the fly. It needs a LOT more work to get it stable. Traits is another section that needs a LOT of work. Right now it's just a proof-of-concept, and I used it to give a rough port of some Scala code (which has Traits. Rust and Haskell do as well, it's a really powerful design pattern that C# is actually going to have eventually. Compile-time, though.) And yeah. This thing is going to be split up into 4 separate git submodules / project files as soon as I get the chance. Thank you very much for your input man
You're more than welcome. Just for the record, I realize the fairly long list of issues may seem a bit like pissing on your campfire, but that's not at all my intention. :)
I used it in 2012 this is my post-build event "$(SolutionDir)ILMerge\ILMerge.exe" /out:"$(SolutionDir)\deploy\$(TargetFileName)" "$(TargetDir)$(TargetFileName)" "$(TargetDir)*.dll" /target:winexe /targetplatform:v4,C:\Windows\Microsoft.NET\Framework64\v4.0.30319 /wildcards
Why rename the functions if they're duplicates of existing LINQ functions? Why do they need to exist in the first place?
Don't scripting languages have their own security holes? Whatever you use (C#, Lua, IronPython...) you'd still need to secure it somehow (preferably with an AppDomain).
If there's no rhyme or reason to the permutations and how they match up to images, you can at least create some sort of configuration file using XML, JSON, or the like which would be read in to map the combinations to images. If there is some pattern to it (for instance, "the first checkbox is checked means that the image filename starts with 'orange'"), then you can use string concatenation to build a filename to load the image. And since this is being done in realtime, you might want to preload all the images by looping through all the permutations, then storing them in a dictionary or other data structure.
Write a plugin system using reflection. Don't do it this way.
Sure, completely. If you're really interested in running arbitrary code, you'll have to have those safeguards. However, if you're really just interested in running methods in your business logic, something like https://github.com/rstarkov/LsonLib would let you easily write some lua scripts to generically use your premade logic. If that doesn't have the flexibility you need, then you might be stuck redeploying or using library plugins.
What's the point of a scripting language if you're not running arbitrary code? To cut down on compilation time, perhaps?
If you create an administrative installation template for Office, you can set configuration options so that Outlook creates a profile on first launch with your Exchange server settings. You'll need to reinstall Office using the installation template. After that, anyone who logs into that desktop and launches Outlook will get a profile created automatically with the necessary settings to connect to their mailbox. There's no need to approach this problem with the requirement of using C# or any other programming language. More importantly, why are you using Office 2007?
Do they have their own credentials for Outlook that aren't what they use to log in to Windows? Usually it's all set up through active directory. 
In the case above, the point is that it's an easily readable and writable data storage system that your app can interpret as function calls, but only allow your prebuilt business logic.
Use a pool of buffers if you need thread safety or a single buffer pool if your code is single threaded. The overhead on keeping collections of that size around on your GC is pretty minimal once they live past the first generation. Unless you are seeing a performance boost from the unsafe code I would stick with the safe stuff. Less to worry about when solving bugs.
What I would suggest is break your interface into 2, with one inheriting from the other. e.g. &gt; public IFactory&lt;T&gt; { string Get(); } &gt; public IFactoryLoader&lt;T&gt; : IFactory&lt;T&gt; { void Load(); } Any class that meets the IFactoryLoader&lt;T&gt; requirements will also meet the IFactory&lt;T&gt; requirements. The other option is to have 2 completely separate interfaces without them inherititing, and just implement them both when needed (e.g. [interface-segregation principle](https://en.wikipedia.org/wiki/Interface_segregation_principle) ) 
It could be as simple as having a JSON list of functions to call with their arguments as your script. An example script that could move a file, and then create an event to notify something that's waiting for it to be moved might be, [ { "FunctionName": "moveFileFromTo", "From": "some defined argument", "To": "another argument" }, { "FunctionName":"NotifyObserver", "Event":"FileMoveEvent" } ] When your c# app parses the json, it could switch/case on the function name arg, and run the requested method with the given args. Would be fairly easy to implement, and would directly define what your scripts can and can't do. 
Cool stuff! I wonder if you could make an adaptor for [Eto.Forms](https://github.com/picoe/Eto) or similar on top of your window manager. It is still missing Qt support for the reasons you already know. Or maybe some integration for [openTK](https://github.com/opentk/opentk) or Vulkan? I dabble in ebuilds, so please let me know if you want me to add some of your packages to [gentoo/dotnet](https://github.com/gentoo/dotnet) overlay. PS: I would not downvote; I think your work is very interesting, but maybe some people get tired of reading.
The files are all visual studio files, but I don't see a way to add them into the project. Copy+paste doesn't work because it doesn't recognize keywords. I also don't know where the files are supposed to go anyways.
If it is useful to you great, but at first glance, I'd rather not try and use it.
Great for practice but really seems like there are plenty of other full featured components that already exist. Don't reinvent the wheel, invent something that has wheels.
Perhaps it might be overkill now, but in my experience you'll keep expanding the usage scenarios so it ends up being a good choice.
This is true. There are a lot of different projects that do things pretty similar to some aspects of the library. Collections (other than Markov and Groups) can be replaced by LINQ, like you and others have pointed out. And Operations.Database is handled better by EntityFramework, etc. I'm separating out Markov, Groups, Traits, and Structures, because these are the components that I couldn't find projects that do something similar to.
HttpClient is thread safe when it comes to making requests (it has methods that aren't thread safe but you only need to use those ones when setting up the client). See https://msdn.microsoft.com/en-us/library/system.net.http.httpclient%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396#Anchor_5 for more information on which methods are thread safe. I'm not sure exactly what you are trying to achieve, but if you want concurrency you are going to want to avoid awaiting the http call as soon as you make it otherwise they will be made consecutively instead(assuming that you are making all of the requests in the same method, they won't do that if they have been awaited in separate threads). public static async Task&lt;HttpResponseMessage[]&gt; DoWork(List&lt;HttpContent&gt; dataList) { List&lt;Task&lt;HttpResponseMessage&gt;&gt; tasks = new List&lt;Task&lt;HttpResponseMessage&gt;&gt;(); using (var client = new HttpClient()) { foreach (var content in dataList) { tasks.Add(client.PostAsync(url, content)); } } return await Task.WhenAll(tasks.ToArray()).ConfigureAwait(false); } 
Critique on Transformation.cs: * As mentioned by /u/Ravek, some creation methods seem pointless. * In many of your methods, such as Subsequence, you call Get from Information.cs. Get runs in O(n). As a result Subsequence runs in O(n^2 ) when it should run in O(n). Structured programming makes you generally want to make code call each other in a self-documenting manner but when you are designing Library methods you must eke out as much performance as possible. Try this: using System.Linq;... public static IEnumerable&lt;T&gt; Subsequence&lt;T&gt;(this IEnumerable&lt;T&gt; list, int start, int length) { return list.Where((x, i) =&gt; i &gt;= start &amp;&amp; i &lt; start + length); } * RemoveAt as well public static IEnumerable&lt;T&gt; RemoveAt&lt;T&gt;(this IEnumerable&lt;T&gt; list, int index) { return list.Where((x, i) =&gt; i != index); } * RemoveDuplicates is replacable by Distinct in System.Linq * Unbind public static Tuple&lt;IEnumerable&lt;T&gt;, IEnumerable&lt;T&gt;&gt; Unbind&lt;T&gt;(IEnumerable&lt;T&gt; originalList){ return new Tuple&lt;IEnumerable&lt;T&gt;, IEnumerable&lt;T&gt;&gt; (originalList.Where((x, i) =&gt; i % 2 == 0), originalList.Where((x, i) =&gt; i % 2 == 1)); } * Zip already exists in System.Linq. I would also use KeyValuePair instead of a Tuple to avoid creating massive numbers of Objects. However I would have to do more in-depth testing to see if it actually helps. public static IEnumerable&lt;KeyValuePair&lt;T,W&gt;&gt; ZipAlt&lt;T,W&gt;(IEnumerable&lt;T&gt; firstList, IEnumerable&lt;W&gt; secondList){ return firstList.Zip(secondList, (first, second) =&gt; new KeyValuePair&lt;T, W&gt;(first, second)); } * Concatenate exists in System.Linq as Concat * RightShift and LeftShift are not very performant, plus you generate *multiple* new IEnumerables depending on positions. I would do this, which also allows you to use negative values public static IEnumerable&lt;T&gt; RightShift&lt;T&gt;(this IEnumerable&lt;T&gt; list, int positions = 1) { return list.LeftShift(-1 * positions); } public static IEnumerable&lt;T&gt; LeftShift&lt;T&gt;(this IEnumerable&lt;T&gt; list, int positions = 1) { var count = list.Count(); positions = (positions &lt; 0 ? count + positions : positions) % count; return list.Skip(positions).Concat(list.Take(positions)); } * Reverse exists in System.Linq * Cross generates potentially devastating numbers of Tuple objects! public static IEnumerable&lt;KeyValuePair&lt;T, W&gt;&gt; Cross&lt;T, W&gt;(this IEnumerable&lt;T&gt; list1, IEnumerable&lt;W&gt; list2) { return list1.SelectMany(elem1 =&gt; list2.Select(elem2 =&gt; new KeyValuePair&lt;T,W&gt;(elem1, elem2))); } 
hmm interesting. Not a bad idea, I'll try it, thanks!
Further critiques on HumDrum.Collections * Information.cs: significant overlap with System.Linq, for AsString you might consider using a StringBuilder, which is specifically built for what you want there. * Predicates.cs: seems to get overcomplicated. Who would ever choose to type "Predicates.Tautology&lt;string&gt;()" rather than "x=&gt;true"? * Sections.cs: Interesting, but probably not very performant for real life file parsing. You're expecting the entire file to fit in memory as a string, then the same copied into a char array, as then all of the file's individual selections parsed as List&lt;char&gt;, then finally the selections converted individual strings for use. At that point you are consuming an amount of memory 4 times the size of the file. If you want to make a good parser you need to find a way to only solidify the parts you need into memory, and only for as long as you need it. Also, use StringBuilder instead of direct string concatenation. * HigherOrder.cs: a point by point reimplementation of some System.Linq functions * Groups.cs: StateObject looks to be a more complex IEnumerator?
Sure, that's easy. You just need to use the CS Script package from Nuget. 1. Create a static (or member) delegate variable (Func&lt;T&gt; or Action&lt;T&gt;) for each overridable method. 2. Use CS Script to read the file and convert the raw string into a delegate. 3. If the delegate variable is null, use your default behavior. Otherwise invoke the delegate with the new code. I warn you, this method is error prone. That said, it can be quite effective. In fact, there are multiple languages based around this concept of runtime method replacement. Erlang and Smalltalk are the most noteworthy. 
Roslyn by itself doesn't offer scripting support. You need a wrapper library such as CSScript to actually use it. They may change someday, as it was part of the original plan.
Why create an entirely new language when there are several to choose from off the shelf?
Plenty of Unity devs around. They probably don't use LINQ though.
Good suggestion, but that's not the "interface segregation principle". LSP is arguably applicable, but ISP deals with reducing compile times in C and other header based languages. An analogy to ISP in C# would be breaking up assemblies into smaller, highly cohesive parts to reduce recompilations. But it isn't a perfect equivalent.
&gt; One of my factories that implements IFactory&lt;T&gt; wants an overloaded Get method that takes an additional parameter. Then it isn't an IFactory&lt;T&gt; and you shouldn't treat it as one. It is a BarFactory, possibly with a IBarFactory interface, but that's debatable. 
Technically you can avoid the violation with a property such as IsReadOnly from IList&lt;T&gt;. Though I would prefer separate interfaces.
Feel free to add it to MoreLinq :)
[AutoHistory](https://visualstudiogallery.msdn.microsoft.com/dfcb2438-180c-4f8a-983b-62d89e141fe3) It's a great complement to source control. 
.FirstOrDefault() instead of .First() returns null instead of throwing an exception in cases where there's no result. You can then do a null check :)
Just FYI if your factory doesn't require any external dependencies you might be able to just make it static. If you do this then you won't need to inject them with DI and thus they don't need to implement an interface you can just reference them.
Thanks for the tip regarding ToPointer, I knew void* could be cast to other pointers, but didn't realize IntPtr also had such casts. As for zeroing out the memory, I definitely do if AllocHGlobal does not do it for me. If you check the script I provided you'll notice all my assignments to the memory are of the form += which means I need them to start at zero. As for performance of zeroing, it's insignificant compared to the rest of the work being done. For each iteration of the main loop I'm doing 35 floating point additions, 20 floating point multiplications and 1 floating point division (and then I do a bunch more work in another loop I snipped). Zeroing out the memory contributes very little comparatively.
GROUP POLICY.It does all of the above, with roaming profiles and redirected folders you could automate everything listed...
Here is how i do this: &lt;Target Name="AfterBuild"&gt; &lt;ItemGroup&gt; &lt;MergeAssemblies Include="$(OutputPath)\MainAssembly.dll" /&gt; &lt;MergeAssemblies Include="$(OutputPath)\Newtonsoft.Json.dll" /&gt; &lt;MergeAssemblies Include="$(OutputPath)\Aq.ExpressionJsonSerializer.dll" /&gt; &lt;/ItemGroup&gt; &lt;PropertyGroup&gt; &lt;OutputAssembly&gt;$(SolutionDir)\..\ILMergeBuild\MainAssembly.dll&lt;/OutputAssembly&gt; &lt;Merger Condition="('$(OS)' == 'Windows_NT')"&gt;"$(SolutionDir)\packages\ilmerge.2.14.1208\Tools\ILMerge.exe"&lt;/Merger&gt; &lt;/PropertyGroup&gt; &lt;Message Text="MERGING: @(MergeAssemblies-&gt;'%(Filename)') into $(OutputAssembly)" Importance="High" /&gt; &lt;Exec Command="$(Merger) /internalize /out:&amp;quot;$(OutputAssembly)&amp;quot; @(MergeAssemblies-&gt;'&amp;quot;%(FullPath)&amp;quot;', ' ')" /&gt; &lt;Copy SourceFiles="$(OutputPath)\MainAssembly.xml" DestinationFolder="$(SolutionDir)\..\ILMergeBuild\" ContinueOnError="true" /&gt; &lt;/Target&gt;
&gt; Thanks for the tip regarding ToPointer, I knew void* could be cast to other pointers, but didn't realize IntPtr also had such casts. No problem &gt; As for zeroing out the memory, I definitely do if AllocHGlobal does not do it for me. If you check the script I provided you'll notice all my assignments to the memory are of the form += which means I need them to start at zero. Fine, that's absolutely fine. I only glanced at your code last night and didn't spot the +=.
Not sure that this is a replacement for AutoRecovery. &gt;2. the extension does not save your snapshots to disc until Visual Studio closes, so it is not a substitute for saving your work. I don't have issues with source control. My problem today is what happens while code is still being written. AutoRecovery is supposed to kick in automatically every couple of minutes, but I guess we'll have to rely on Ctrl-S 
Well losing changes to text files is very difficult unless you're not even hitting save regularly, which there's not really an excuse for as with source control you can always revert your changes to hunks of a file. I suggest you plan your projects in micro components which can be built and unit tested as they're completed, and commit to a feature branch as you complete each micro component. If you like you can then squash the feature branch on merge, but you'll thank yourself later. I dont know your level of experience, so I'm happy to expand on any of this if it's gibberish.
Strictly speaking, your code still has a potential memory leak if the second `AllocHGlobal` call throws an exception. It would be safer to do something like IntPtr sTanPointer, tTanPointer; try { sTanPointer = Marshal.AllocHGlobal(numBytesInTempArrays); tTanPointer = Marshal.AllocHGlobal(numBytesInTempArrays); // etc... } finally { if (sTanPointer != IntPtr.Zero) Marshal.FreeHGlobal(sTanPointer); if (tTanPointer != IntPtr.Zero) Marshal.FreeHGlobal(tTanPointer); } In practice your process is probably screwed anyway if this happens in this case, but this is the sort of thing you need to be mindful of when using exceptions.
Start using bootstrap :)
It is tedious to create one and they're irritating to use, but if you use a general purpose language, you open up all sorts of possibilities, which you may or may not want.
Thanks, that sentence was not worded well. I've altered it to "One obvious example is the lock keyword, which forces all but one thread to wait for access to the critical (locked-over) scope.".
SOAP is super easy, from a programming point of view. It's also pretty easy to test for as well since most SOAP servers do have a generic testing confirmation you can check for and some companies also provide valid schema files to check against.
Mistake 1: using threads. No, I'm almost serious. I have enough threading experience to know that each new thread I add multiplies the potential for bugs to happen in my code, even when you are super careful to do "everything" right. Don't do that unless you absolutely bloody have to. That'll save you bugs. Take my word for it.
Would be interesting if you included some more modern approaches. Tasks to begin with and how they affect the Thread utilization, ConcurrentList it's affects on thread syncing (if any).
NUnit theory tests let you express test data in terms of constraints over all possible values, which can often be a very useful test set from not much setup code.
What are you trying to do? What *kind* of form? I've got a few potential links but not sure which way you're headed...
Yeah, it was down to 0 at first and I was curious on why. And Eto.Forms and OpenTK are doable to plug on top of a GUI Toolkit that I have in the work once I have a fully featured Windows Manager done. As it stands for my project priorities: 1. A completely functioning C/C# Transpiler - Still have work to do to complete [all of the test suites from GCC for C](https://github.com/gcc-mirror/gcc/tree/master/gcc/testsuite/gcc.c-torture/compile). 2. A fully featured Windows Manager with an established IPC protocol to replace X11/Wayland (Still early and specific to Nvidia EGL only since I don't have AMD or Intel GPU, I am looking into some workarounds on buffer allocations/sharing.) And list goes on... Finally at the very last priority is to convert .Net Core into a C equivalent code (personal goal/preference on how I envision my Linux distro to be completely friendly to all languages since all libraries under this Distro are accessible in C without suffering any losses in performance.) I'll definitely hit you up if I have something going for this project.
I went over MVVM in a podcast about Universal App, but the concepts apply to all kinds of projects (20 minutes) https://www.youtube.com/watch?v=8xaGEQe__jQ 
Not sure if this will be the best solution for you but if all shapes can convert to RLE (run length encoding) or create an RLE mask, you can pretty easily do what you're talking about. 
Yes and no. Keep threading code in isolated infrastructure components, general purpose (business logic) code should never be starting threads.
Fun fact I found recently, ThreadAbortException's cannot be caught. The runtime will regrow from your catch block. This was causing some unit test failures for us.
&gt; ISP splits interfaces that are very large into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. Why is that a benefit? That's a big problem with how this principle is commonly interpreted is that the supposed benefits are assumed rather than examined. The client only "has to know" about the methods that is actually invokes. If you completely remove all of the extra ones, as in delete the source code, the client won't change in the slightest. You don't even have to recompile the client to use the new version of the library. What abstract interfaces allow the client to do is "declare" that they are only interested in a subset of the functionality. (Though that's not ISP, but rather "just how abstract interfaces work".) There is a huge difference in connotations here. If you add a method to an interface, the client may ends up declaring more than it intended, but it still doesn't "have to know" about the new method. *** This discussion becomes important when we start talking about parameters and return types. With parameters, it is common to specify an abstract interface rather than a class's public interface. This reduces what's being declared as necessary and thus makes it more flexible from the client's perspective. For the return type, the client gets no such benefits and may lose functionality. So casting the returned object to an abstract interface is usually inappropriate. 
I use XUnit and shove all of the test cases into a database or CSV file.
Holy moly now I know I'm old. &gt; Are there any equivalent libraries for dealing with SOAP that anyone's used successfully? SOAP and its friends was part of the first generation of web services, and we had all of the problems that are being addressed now with REST APIs/JSON serialization sorted out back in the day, including a complete service description language and tools to generate proxies to call the services from that description. Things like Swagger are just starting to be mature enough to be reliable for REST services, but we had that shit *sorted* for SOAP services with WSDL. You haven't said what the server-side technology is, but if it's Windows it's 99% likely to be ASP.NET web services (ASMX) or WCF. In either case, you can request the WSDL (Web Service Definition Language) document from the server. If it's a non-Windows server, it will still generally express a description of its services in WSDL format, but it might not be generated automatically so you may need to ask the owner of the service for the WSDL (publishing the WSDL to describe your SOAP services used to be a pretty standard thing to do). In fact, if the server can spit out WSDL then you can simply add a web reference to the service in Visual Studio and you'll get everything you need to call it. Otherwise you can feed the WSDL to something like svcutil.exe to generate a proxy by hand. The tool will create a set of C# classes that you can use to call the service without needing to understand any of the guts of networking or serialization.
http://nunit.org/index.php?p=theory&amp;r=2.5
I had a program I wrote recently that used Office APIs. I used a finalizer to shutdown the Office processes when they were finished with.
Both Google and I have not the slightiest idea about what you are talking about...
try [dribbble](https://dribbble.com) and search for 'form' 
&gt; Format document (Ctrl+K, D) before save. I find this awful in practice. You might end up with changes in a file unrelated to what you're working on. Blame/annotation tools have a harder time visualizing the origin of a line of code. And it increases the chances of a merge conflict. It's okay to auto-format hunks of a file you're working on - never the whole file unless it's new or you've already changed most of it anyway.
I can also imagine a hypothetical scenario in which there is need for the end user to be able to customize the site's scripts but won't have access to the server itself, so the relevant TypeScript gets moved to the database, and this could be used to recompile to JS after every edit they make. Very niche case, though, of course.
I'm no fan of Javascript in the slightest but this is very cool. It uses something called the JurassicJS Engine and a feature of that is: "Compiles JavaScript into .NET bytecode (CIL); not an interpreter". That is very impressive.
The CQRS/ES pattern makes sense in many business applications, particularly those that have one or more of the following requirements: 1) Hard Audit Log - ES provides a guaranteed-correct audit log. 2) Scalability - CQRS provides essentially unlimited scalability by the creation of many read-only, query-specific databases. 3) Offline Operation for Mobile Apps/Multiple concurrent users - Using sequence numbers in your commands and events ensures that multiple mobile devices trying to modify the same aggregate root will lead to commands with out of sequence/duplicated sequence IDs, which can then be identified and put into a queue for manual correction. 4) Unknown analytics - Because all the state is captured, new read models may be derived at any time, for all the data since the application went live. In traditional systems, the system would have to be modified and only gather data subsequent to the modification. 
To point number 4 though, have you ever tried to do that? I get it's possible in theory, but it requires a ton of infrastructure to pull that data out. I haven't really come across anyone else doing cqrs so I don't know if my team is just doing it completely wrong. 
OMG now we really know how bad javascript is. We now have a converter going from C# -&gt; Typescript -&gt; Javascript. Software community please start working on a replacement for javascript. It really really sucks! 
Writing something in c# is loads easier to start (and complete) than it is in JS.
Correct, it simply compiles the TypeScript compiler to make usage easier. It then exposes the compiler API to C#.
I agree with you, but for OP's problem, I suspect the issue is either higher up (e.g. trying to shoehorn something into an interface/inheritance where it really doesn't belong) or farther down (e.g. the additional parameter is a filter that could be applied after the factory returns it's object). In either case, I usually break the interface into 2 different ones, see how things pan out, and then refactor out the duplication. 
Thanks for the link and info much appreciated 
Thanks that's really useful info and much appreciated. I'm not 100% sure what the server side technology is as it's a third party provider and I've only just been given their API docs. Integration will begin in earnest on Monday morning. I will certainly be requesting a WSDL from them first thing! When GraphQL or something similar is the standard and people are asking about REST I'm sure I'll feel the same way! 
It's unfortunate it uses Jurassic which is turtle slow 
&gt; That won't compile (use of unassigned local variable) so I'd have to initialize them to some garbage value outside the try block to do something like that. Sorry, I was writing that from memory. You'd want to set them to `IntPtr.Zero` during variable initialization. In this case, like I said, all of your errors are probably unrecoverable so it won't make much of a difference one way or the other. I only point it out because it's a very common sort of subtle mistake that you can make once you start following this pattern. Not all unmanaged resources are blocks of memory on the unmanaged heap, and if you translated this code directly to other use cases, you could definitely end up leaking resources without encountering unrecoverable errors.
This is a great feature!
I don't want that. I want javascript to go away and the community to come up with something that is better than javascript! 
So, WebAssembly
This seems like it would make heavy byte transfer from external systems to internal systems much more memory performant. Meaning, I would expect Gen 2 collections to be lessened with heavier use.
Correct, it just embeds the TS compiler to make it dead simple to transpile TS to JS and then execute that JS from your .NET apps.
The transition should be easy, it's only a change in syntax really. There's plenty of resources out there to help you make the move, just give it a google. [You will find "cheat sheet" quick reference guides like this helpful.](http://www.harding.edu/fmccown/vbnet_csharp_comparison.html)
It should work just fine with the JINT interpreter, which is a bit faster, and works on PCL and .NET Core... I was even going to make a version with JINT and .NET Core for use in web apps
&gt; Source control for work in progress that doesn't even compile yet? This is why you have a personal branch. When you're "done-done", merge it up then mark the branch obsolete. Team Foundation Server Version Control is a little weak on this area, to be honest. Git is better (local repository separate from your working folder, so you can put it on a second drive). Rational Clear Case has per-user branches that are transparent to you. 
Yea, I don't mean that as a negative. In fact, I was looking for a password manager a couple days ago myself and pass came up multiple times, so this is actually quite useful for me. I was thinking though that most regular users are not going to be able to figure out how to install/use GPG or Git or add it to their PATH, etc. 
You don't need to implement the commands in the viewmodel if you don't want to, you can create classes that encapsulate a given command (using no less than the classic GoF 'Command' design pattern), and just instantiate those in the ViewModel. Not always the most direct way to do it, but at least you don't violate SRP so blatantly.
It's simply going to take some practice. Pick a relatively simple program that you've made before and remake it in C#. By the time you're done with that, you'll be familiar with the syntax.
While it doesn't specifically mention gen 2 collections, the internal external data passing is exactly the the thing they are targeting as stated in their scenarios section.
It also "allows the piepline to abstract the phisical chunks of buffers" Edit: I'm also liking that "ReadOnlypan&lt;T&gt;"
Unless you have a list of list for one of the coordinates, I think I'm missing something. Having a counter doesn't sound like that bad of a solution. I'd first worry about solving the problem and then optimization.
Google until I find someone who had a situation similar to mine, unfortunately. Spent 3 hours on a binding error last week, with absolutely no help from the output message. Finally found a fix in my style.xaml that I would have never found by myself.. Why can't the output window give better information about it's errors? It's so frustrating. **Edit: I had previously just skimmed your post, but on read-through I see that that is the exact same error I was struggling to track down.** Not sure if you've solved it, but for me it had to do with my Comboboxes getting their Items dynamically, but not getting styled at the correct time. So, although my UI looked like it was working properly, my output window was getting filled up with errors. The solution was to explicitely set the HorizontalContentAlignment (and VerticalContentAlignment in my case) in my Style.xaml file for the control in question. 
Apparently I need to spend some time working on my XAML tools, because this was news to me. I just always assumed IntelliSense was unable to help me very much in XAML when it comes to bindings.
Removed: Rule 4. There are quite a few ways to achieve this effect. Do some research (plenty of hits for "C# checkbox image") and take a stab at it. If you still have troubles, repost your question but include what you tried, relevant code, and what worked and didn't work.
As far as I know, there's no built-in way to do this. Perhaps you could use [`BinaryFormatter`](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter%28v=vs.110%29.aspx) to serialize/deserialize the form, but I've never done that. No idea if it'll bork the WinForms framework. Typically, one would define all the data to populate the form (and including scroll position for your case) in some simple class. Then your form would save/load to/from an instance of that class. (Mind you, this is more-or-less the basis of the MVVM pattern) However, the fact that you're asking to maintain the scroll position leads me to believe that perhaps your intent is to be able to close/open the form within the same session of your application. In which case, I think you can simply hide/close it, keep a reference to the form around (say, in your main application/form), then re-open that instance instead of instantiating a new instance from scratch. Perhaps you can provide more context as to what you're trying to achieve?
As everyone has said already, it's pretty easy to shift between the two languages. Learn about the braces ({,}), and remember to put a semi-colon at the end of each line. I learned to program with VB.net and now use C#. The way I learned C# was by translating one of my own apps. There are also online code converters that will convert a block of VB to C# (or vice versa). You can use these to help, though they don't always work properly. If you know your fundamentals you will be surprised at how easily you can learn C# (but expect to forget the semi-colons and braces from time to time as you learn). I recommend getting a copy of the C# Pocket Reference to look up syntax and general reference tips, and maybe a proper C# book to learn from. Microsoft's Virtual Academy has a lot of free C# videos, as does YouTube.
Well, you will most likely be calling webservices in SOAP or REST. For SOAP, you've got to retrieve a .wsdl file provided by the website, and import it in your visual studio project by right clicking on your project &gt; add service reference. It will create a few client classes to call the webservice from your code. (http://stackoverflow.com/questions/31852448/how-to-add-a-web-service-reference-in-visual-studio-2015-to-a-console-app) For REST, you will communicate with the webservice by 'text', as in you'll receive a string in a specific format (JSON most likely, but could really be anything) when calling an URL from the service, and you will have to work with it in your code. To do that, you'll have to use a HTTPClient class. (http://stackoverflow.com/questions/9620278/how-do-i-make-calls-to-a-rest-api-using-c) 
Sounds cool. Are you guys done with refactoring? Can I see the source code?
You can use variables in the application settings, you can then write the current input into the program variables and retrieve it on open or click. See the below link - should point you in the right direction. https://www.arclab.com/en/kb/csharp/save-and-restore-position-size-windows-forms-application.html
depending on how complex is your form this could end up being a lot of settings, but add a Setting (under project settings) for each control's state or position, and then go back i
thank you that was it i guess i was thinking that since my counts would all be integers and the sum would also be that they needed to be integers and the devision would result in a double.
Pick up the trial for ReSharper. Feel free to go over board with {} ReSharper will tell you where they're redundant Also learn ReSharper smart complete/ line complete. It will put the semicolons in and be a visual tutor on where they go 
I have a full time (more then full time usually) IT mid level management position with 3 kids, finding time to learn new things and actually put them to use is really hard for me. But this year I wanted to write more code, share it, learn from my mistakes. Right now I am working on a simple blog in MVC using Aspnet core. I would like to get it running on Windows and Linux and figure out how to dockerize it, make use of tech that I have never played with before like reddis or something. I would like to make a p90x app for the apple watch, and a site that goes along with it. I did p90x for over a year and I spent a considerable amount of time writing everything down on paper. So figuring out how to make an app that is quick and easy to use, even if it just helps me will be a win. 
Wow, I wish I knew about this when I first started on the path to becoming a .NET dev. I just checked it out, fantastic resource.
I've been chipping away at this over the last few weeks and just got it to alpha: https://github.com/ButchersBoy/doobry It's an Azure DocumentDB SQL tool which I started help me with a website developing. It also serves as another little demo of Material Design and Dragablz in action.
You may be right :), but if I may take a different stance: LINQ actually introduces some really great concepts for beginners. LINQ is, at least in part, conceptually similar to list comprehensions in Python, and in the Python world most beginners have no trouble understanding them. In fact, these concepts help build the foundation for higher-level abstractions. It only takes slightly more time to understand them (over "for" and "while" loops), but the payoff is immense. Once you understand LINQ, you start to understand %&gt;% pipelines in R, list/dict comprehensions in Python/Haskell, pipes in UNIX, SQL queries etc. because they are all conceptually similar. The reason for this is because they are all thinly-veiled representations of operations over mathematical sets. Side note: LINQ is actually built upon ideas from category theory, which is why it is such a deep solution, and is useful everywhere in programming. But the user doesn't ever have to know anything about that to use it. LINQ is actually quite easy to pick up. 
The assignment is asking you to check the shipping zone using the `switch` statement. The resulting code would probably look something along the lines of: decimal zonecost = 0; bool invalidZoneEntered = false; switch (myZoneTextBox.Text) { case "X" : zonecost = zonecostX; break; case "Y" : zonecost = zonecostY; break; //repeat pattern for other zones default : invalidZoneEntered = true; break; } At this point, you can check against `invalidZoneEntered` to show the error message (or you can do that directly/immediately in the `default` section). EDIT: Just to clarify, it sounds like maybe you have used `switch` before, but only on numbers? Switches can be used on any of the following types: sbyte, byte, short, ushort, int, uint, long, ulong, char, string, or an enum-type. Then your case state
I'll give this a try. In my notes I had case "1": case "2": etc and never thought to change it to letters. Facepalm. 
.ToLower() or .ToUpper() e.g.: switch (myZoneTextBox.Text.ToUpper()){}
To simplify: any unmanaged type
Ah yes. Any time decimals get dropped, look around for sneaky ints
And I'd love to get feedback and insight into things you think would be helpful to do next! Thanks for taking the time to look, I appreciate it.
Hey, Don't worry about it. It's something to look into for the future; And while I completely agree with the other posters (And yourself) that you need to do this at your own pace, I urge you to at least look at the latter part of my response. While LINQ is something that's fine to pick up later (And again, when the time comes, please do take a look at it. It's a very powerful concept that has many fundamental similarities with other equally powerful concepts in other languages.) - It's never a bad idea to at least think about state changes at an early stage. Choosing to freely mutate an object's internal state in an unrelated static method somewhere else is an approach that has a very high chance of leading to future headaches. Currently, Week.WeeklyAverage isn't giving you the weekly average of that week; It's giving you the average of that week some arbitrary time ago, at some arbitrary position, depending on when you called an unrelated static method. Your application is probably going to be perfectly fine without taking things like that into account, just like it'll be perfectly fine doing things the long way rather than using LINQ shortcuts. It's still a good idea to at least consider how you approach mutability and state of your application's objects and data: It's an extremely fundamental thing to keep in your mind, and one that can help produce significantly easier to reason about code.
Here's a project I work on every once in a while. It's a simple and fast file search. I haven't open sourced it yet, but I plan to do so someday. I'm currently using Visual Studio Online for source control, but will eventually move it to GitHub. I have some screenshots and a download link below if you are interested. Technologies/libraries/ used: - C# / WPF (Core) - ReactiveUI (MVVM) - MahApps (UI) - Squirrel (Application updates) Some screenshots: http://imgur.com/a/1p0ck Download link: https://kotacode.blob.core.windows.net/aurora/Setup.exe
Your issue could be multiple issues, because your teacher could have written his code with a different setup. First, try a Clean and Rebuild. It should find all your Tests. Make sure your tests settings and your builds settings match on their architecture style. Tests should be public access, and the test project's configuration is set to build. [Why VS can't find my tests](http://stackoverflow.com/questions/13533259/why-does-visual-studio-2012-not-find-my-tests) A playlist in testing is similar to a playlist in a music application. We don't always want to listen to every song in the library, so we create a selective list that jumps to the good ones. It's the same concept with tests, we don't want to spend all day testing everything, when we simply need to check if our latest code fixes a known issue. Here's a quick over view that might help you out. [Run unit tests with Test Explorer](https://msdn.microsoft.com/en-us/library/hh270865.aspx) It might be a problem with the way your teacher linked to his tests in that playlist, and you just need to recreate the playlists.
There are some really good Pluralsight courses with code available on Github. Do you have a subscription? If so I can go through my history and see which ones I enjoyed.
Live client-side rule validation + trusted environment (server side) making the final call. One example: zxcvbn ... There's a C# version of it but I can tell you from reports from users that the score in C# differs from the JS version in a few corner cases (not certain what they are, however, but they're supposedly just barely passing our requirement on the client side, but fail server side). Thus, to have server-side validation to reflect what the user sees live on the client-side, you have to run the actual Javascript version. You could always only do validation on the server side, but it's always going to be slower/worse user experience.
Shameless plug for my blog. It's my first actual post (I don't count the one before it) and thought this might be a good place to post it. Thanks for taking the time to read it (assuming you did). Edit: ugh, it had to use the picture of me.
why would you write your own test runner?
Just a reminder that source control is NOT the issue of the original post. This is about a feature in VStudio that is supposed to save your work in progress every couple of minutes - that did not work for me. if source control is all that you guys can talk about, then by all means... 
Good start, you started with what a lot of people struggle to grasp about TDD - it's about good design, not just testing. I agree that people need to understand how the test runners work, but it remains to be seen whether writing your own is the best mechanism. Starting out it feels a bit short, but in future it should flow when you have more parts up. Just keep the quality writing up. :) 
Education isn't the same as writing production code, some times a bit of re-inventing the wheel and code duplication is good for learning. As long as it's followed up with a good explanation of how to transition to production practices - which is much easier in a classroom environment with a set course scheduld. Not convinced here yet, but we'll see when the series is done.
You can put anything in a ViewBag and easily use it in the Razor. You can append to it just like a Session. I'm at mobile so I can't write any code sample but there are other data types like ViewBags which you can use to communicate with Client side, all with their own ups and downs. Just search ViewBag and it will take you on a journey of learning.
Is the time the same on all of them? Is the process started at exactly the same time?
thanks for the advice, but I don't know if the 30 sec rule would work as the monitor does not only provide the up/down information about the server but information about ftp connectivity, drive usage etc which takes a while to do
Assuming y is something you need to launch from C# code and can't be done from SQL you could use the [SqlDependency](https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldependency.aspx) object. Note: It requires the sql server to be running Service Broker.
This is the right answer. Using a table for this work is an anti-pattern. http://mikehadlow.blogspot.com/2012/04/database-as-queue-anti-pattern.html?m=1
Well, at least you have that. Lord knows the headaches that ensue when the formatting changes _because reasons_. I know you probably don't want to hear it, but I'm a fan of separating my data transfer/web API concerns from my application concerns. I'd skip LINQ-to-JSON and just model my class after their API structure as 1:1 as possible, then run it through another class to convert the content over to my nicely formed application class (along with whatever bells and whistles make sense for it, like say, immutability). It's one of those painful things, but with any luck you do it once and you're done. Usually doesn't take that long either. Also helps for any data formatting conversions (e.g., non-standard dates); or perhaps more relevant in your case, favouring fahrenheit or celsius, and pascals or PSI. Finally provides other debugging benefits and flexibility to leverage other data sources (though I doubt this is the case here). But, maybe there's a way of bending JSON.NET to your will in a more simpler fashion. Hopefully someone with more experience will have a good answer for you.
I'm not sure I understand what you are trying to ask here? Everything looks pretty good with your code except you need the '@' symbol in front of the session variable in order for the razor parser to know you outputting a variable. So this &lt;li&gt;Hello, Session["UserName"].ToString()&lt;/li&gt; becomes this &lt;li&gt;Hello, @Session["UserName"].ToString()&lt;/li&gt; and I wouldn't name that variable 'v' in your first snippet. Other than that though everything looks fine
&gt; just model my class after their API structure as 1:1 as possible, then run it through another class to convert the content over to my nicely formed application class That's probably a good way to do it too in case the incoming JSON changes structure when they update the service. I found that happens more often than I'd like. 
You can use `JsonPropertyAttribute` to specify names that can't be automatically resolved. Deserializing nested JSON structures into flat classes is unfortunately something that just isn't supported by Json.NET in any convenient way, and has often annoyed me as well. Your only options are to change your class to match the JSON, deserialize the JSON into a matching DTO and manually copy the values over to your actual class, or manually read the JSON with LINQ. You can sort of fake a flat class structure by having a private property holding the child object (e.g. for `main`) and then have public properties that just pass through the values from the child object. I've written a `JsonConverter` that can deserialize nested values, but this is of very limited use because Json.NET does not allow multiple properties to share the same JSON name even when reading, so you can only access one nested value per child object this way.
I got a routine to check whether the status (up/down) has changed. So the emailing service checks every minute, but only sends a mail if it changes mentioned status
You're not going to make it work with both types of services set to 1 minute exactly. There will always be one that goes a second/two past that and you'll get messages. What you could do is that when you first see too-old timestamp, you add another grace-10-15sec and only if the timestamp is again this old, you email the error.
I'm looking forward to following along with the rest. I've dipped my toe into unit testing, but I always give myself the excuse that there isn't enough time, that I'll go back to unit tests later. It never happens. I want to take it seriously and go all the way with TDD instead.
This site helped me when, I was doing lots of this type of work. You paste in a JSON object and it spits out classes for you. http://json2csharp.com I also definitely recommend creating an intermediary class. Convert your JSON to the intermediary class, then convert the intermediary clasa to the real class that you need for your business logic. 
That way of doing it is what I did before as well, but then it gave me an exception.. I'll try again and post back once I get home
&gt; Also, you can just go to Edit&gt;Paste Special&gt;Paste XML/JSON as Class from within VS to achieve the same conversion Yup, just be careful with the types it tries to automatically assign to things. 
Use JSON2CSharp and then make a struct with all those variables. Make a class that's contains an instance of the struct and use properties to get data out of the struct instance. Use JSON.Net to desetialize json and cast it to that struct using the ToObject method. There you go.
it's to be application wide settings. Are you saying i should create an "Application User" 
what I am planning is to use inheritance and have the discriminator column be unique it's crazy but an interesting solution I'd like to explore. 
Simple is almost always better unless it literally doesn't meet your needs, but it does seem an interesting concept - haven't played with it yet, myself. 
https://msdn.microsoft.com/en-us/library/hh242985(v=vs.103).aspx Sounds like you want observables.
https://youtu.be/Zl4XrVBx16U
Due to me being fairly interested in physics (especially quantum physics) and software development, I created a program which lets you simulate the double-slit experiment (a fairly well-known experiment in quantum physics) with different configurations and nice renderings - the physics teachers at my school and some other schools nearby now use it for illustration purposes when explaining it. I haven't pushed anything to GitHub lately but have been working behind the scenes on improving it and adding more features. It has definitely been an interesting excercise for improving my skills related to rendering, multithreaded calculations and general performance optimizations and UX stuff. Link to the GitHub page with the full source code, screenshot and more explanation if you're interested: https://github.com/stefan-baumann/MultislitSimulator And a link to a wikipedia article for those who want to know more about the topic: https://en.m.wikipedia.org/wiki/Double-slit_experiment
If the mail is coming from your organization, it should *always* come from your organization's mail servers. Why? Because all outbound mail should be filtered for spam (even yours), it should all be checked for consistency, and should be subject to signatures ala DMARC. You need something that'll properly handle queuing, will honor your domain's SPF policies, etc. You can't do that all correctly if you're sending mail directly from your application or through some proxy. So the right way to do this would be to use a C# smtp client to talk to your local enterprise's mail server's submission service, and submit outbound mail that way. Don't have a mail server? Run one. Postfix is one of the best mail servers there is.
 @if (Session["UserID"] != null) { string username = Session["UserName"] as string; &lt;li style="color:white;"&gt;Hello, @username&lt;/li&gt; } else { &lt;li&gt;&lt;a href="../Login/LoginView"&gt;&lt;span class="glyphicon glyphicon-log-in"&gt;&lt;/span&gt; Login&lt;/a&gt;&lt;/li&gt; } Right now I got it working this way with /u/Princefluffly25 his comment, I'll look into what you wrote tomorrow! Thanks!
Our email is hosted by RackSpace and this is a virtual machine not hosted by them. I could use the smtp to send the email through, if that is an reasonable option?
Yeah, I assumed it was something like that. But I did find a solution already. :P I'll update the original question.
Maybe SignalR is an option https://www.asp.net/signalr
10 seconds would be the maximum, but obviously the shorter the better. There are around 1000 inserts per minute so relativity low transactions.
I always just remove the pluralization convention in the dbcontext. Instead of having to decorate all the classes with the table attribute. protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;(); }
Ah, good to know. Might have to do that myself.
Elance merged into Upwork; I've applied for some projects on there, but haven't had much luck yet. Don't know if I'm asking too much or my inability to work full time is hindering me or what...
Tried freelancer.com, it's full of incompetent posters from india that can't write in basic english and good luck ever trying to get a set of clear requirements from them. Overall I've found free lancing pretty lack luster.
This. IObservable with the RxFramework.
You can debug in VS if you install the Azure SDK although it's wasn't a particularly good experience when I used it a couple of months ago, that may have changed now if they've updated the SDK. What worked best for me at the time was to develop my functions inside a console application then cut and paste into the web portal when I was satisfied with what I had. You'll probably have a better time linking it to source control and using vs code though.
Don't run an SMTP server yourself. You're opening a whole new can of worms there.... SPF, DKIM signing, reverse PTR DNS records, throttling from the big 3, etc. Easy answer: Sign up for https://sendgrid.com/ and use the SMTP credentials they provide to send your emails. Send under 12k emails per month and it's free.
If you use ES to populate an in-memory model, you can have a POCO domain model without having go through the pain of object-relational mapping.
I would take a look at, for example, RefactoringEssentials: https://github.com/icsharpcode/RefactoringEssentials/tree/master/RefactoringEssentials/CSharp/Diagnostics/Custom I have picked a diagnostic which suggests the use of nameof and looked how they replace the part in the document: https://github.com/icsharpcode/RefactoringEssentials/blob/master/RefactoringEssentials/CSharp/Diagnostics/Custom/NameOfSuggestionCodeFixProvider.cs It looks like you have to use the ReplaceNode method and are free to to type whatever text you want, e.g. "p" + parameterName For the quick fix not being registered I would compare your implementation with theirs. I'm on mobile at the moment, but I guess that there must lie the problem 
Only freelance work I've done is for someone who posted on /r/csharp
I tried installing that once and it was a dismal experience and nothing seemed to work. Did you have any luck with it?
Omg. I had no idea you could do this. Thank you!
So basically you want a message bus without the server? If webhooks or wcf won't do, start coding. I have been looking for that for years. It does not exist. I have written it on my own and it is pretty easy if you don't need persistence ( and even then). The real question is: why would you? There are some awesome solutions out there that can easily do what you need ( rabbitmq which i ended turning to) . Just keep in mind that the lack of dependencies comes with a big cost of support. At first, you just need feature a. But soon you need feature b. In the end, next to the actual product, you are supporting a second product being sed service bus. Having gone down this road, i would go with the existing servicebus 10/10.
the message bus that you're talking about is for LARGE scale System/Service Oriented Architecture (SOA) I am just trying to decouple my code internally. It would be extremely stupid to use an external message bus or event queue to communicate with myself. Why the fuck would it make sense to add that network latency and the stupidity of having to maintain an independent server. think of it like this. message bus (in process) is like a click handler on a web page. does it make sense that your computer would send a message to a third server just so you could communicate with the main server to handle your click request. FUUUUCK no. SOA ==&gt; Event busses are for orchestrating large systems that have unique enterprise and business processes that are discrete and independent from one another. 
[Foundatio](https://github.com/exceptionless/Foundatio#messaging) has an in-memory message bus system.
I think the combo of MediatR and Hangfire will give you want you want. http://codeopinion.com/background-commands-mediatr-hangfire/ 
You're preaching to the choir. It's not up to me.
Consider naming your objects/tables in a way that works well with the defaults. I see what you're doing here and agree that your preferred naming is clearer in this case, but it still feels off. Why are you abbreviating "acknowledgment"?
Foundatio, and exceptionless, has a pretty kick ass code base. 
The Fluent API is the only way I know of to specify names for many-to-many tables/relationships. Not specifically OPs question, but it may come up sooner or later.
The fun part is that it also removes s's from table names that natively end in them...
FYI, ZeroMQ is not a traditional message queue. It does not require a broker or out-of-process orchestrator as you seem to think. Unless you have other reasons to disregard ZMQ you should probably take a look at it.
Agreed. It's very unfortunate, IMO, that using the `new` keyword is not a requirement in the language (not using it only produces a warning). That and whenever you do see someone use it, it's often a sign that something is wrong.
I recommend not using SendGrid. I've had a few issues with them lately with regards to emails through their service not being correctly delivered. I am considering Mailgun.
I guess the article is over my heart. A custom compiler means you could write something like TeamCity?
They are virtual, internally. By making it explicit you intentionally say you do NOT want this public. This just smells really really bad. And introducing more smell won't help with that.
2 hints: 1. Start by taking your ReadLine out of the loops. You want to ask once and then do your loops. It should be after the variables are initialized. 2. You only need one loop and your loops++ should be inside that loop. 
Ok - So you've a couple of what we call 'nested' while statements there. IE a loop within a loop. Everything within the curly brackets of a while loop is going to be executed again and again until the condition for the while loop is met. Look at your inner most while loop. You're looping until "loops &lt;= 5", but within the body of the loop you don't ever change the "loops" variable. This will run forever. The If statement is all you need here. The two outer loops are also completely redundant. If you know how many times you want to do something, the "For" loop is more suited to that. I'll tell you now, you only need one iteration statement to achieve what you want to do. Think about what you want to do multiple times and what you want to do once. 
Things I did to learn c# better, File manager (I\O operations) encrypter(crypto), MVC REST full api (that was fun), making decent looking ui in XAML and WPF Good luck 
Exactly, that's why I've suggested it in the first comment. It's just a lib OP.
They suggest using PowerApps instead. Is it even near the same thing ? I have the impression it is really different. I have used none of them though.
I was wondering about Power Apps too. It looks... interesting. But I guess it's not aimed at software developers. It fills me with fear at the thought of what people would create with it. Anyone got any experience with it? 
Is there a way to integratie such a rewriter with something like msbuild/csc?
Thanks, I've just been browsing the Eto API. It certainly looks full feature, and anything that might be missing I guess you can use their pixel method. The table layout concept seems pretty standard, but somehow very 90's (; https://github.com/picoe/Eto/wiki/Tutorial-3-Table-Layout I definitely agree with you on the 1 out of 10 in regards to GTK# given how much work seems to have gone into that project it really is a mess. I guess I am dreaming way to much to think I might be able to find a multiplatform C# gui tool kit with a layout tool to pair with it... hah
&gt; There's no such thing as a 0-1 relationship. He's obviously thinking of a 1-0 relationship, where the reference/fk to the other object is optional. However, because `MySettings` isn't even in the database I don't think the request makes any sense. There is no table, no foreign key, linking a "settings object" to any of the rows in the DB. OP is going to have to populate each object manually.
https://github.com/AvaloniaUI/Avalonia
It's not a custom compiler
I tried it last week. It is still in preview and a lot of features are buggy or missing. But I really liked what I saw. I think it could become something great - unless Microsoft kills it off next year ;) I created a real simple app that reads data from an Excel sheet on my OneDrive, shows a ui to view/manipulate it. And then ran it on an iPhone. And it worked. Not really as usable in its current version but I do hope they improve it!
I dont know much about LightSwitch, but I'm using [Serenity](https://github.com/volkanceylan/Serenity) and I've seen people suggesting that it could be a good replacement for LightSwitch. 
Use a tiered caching strategy: MemoryCache for the servers, Redis for cross-server, then finally whatever caching your database engine uses. See the stackoverflow network architecture for some ideas:http://nickcraver.com/blog/content/SO-Architecture-Overview-Logical.svg
Lightswitch wasn't supposed to be aimed at professionals either. But sticking it inside Visual Studio was a big mistake in my opinion.
We use events, that all subscribers act upon. Boiled down to: &gt; Event: "hey, this is thing is invalid now, remove it from your cache". &gt; Box 1: "Okay, thanks" &gt; Box n+1: "Okay, thanks"
Take a look at Mailgun service.
Almost as big a mistake as putting a fairly complete version of Visual Basic 6 inside all Office applications. The number of legacy Excel VBA monstrosities I've had to maintain... Edit: fixin' mistrusted mobile monstrosities.
private void button1_Click(object sender, EventArgs e) { bool isA = false; if (isA) { button1.Image = Image.FromFile(@"Images\b (1).png"); } else { button1.Image = Image.FromFile(@"Images\a (1).png"); } isA = !isA; //Properties.Settings.Default.button1 = } still only goinf from b to a but not a to b ??
OMG THANKS TOTALLY WORKED! :)
any idea how to save the button1.Image then load that image later when I re-open the program?
for this example, you would need to have `bool isA = false;` _outside_ of the function to have it "stick". Having the variable inside the function like that will reset it every time the function is called, effectively only setting the image to "a".
Store the file bytes or the file path when you assign it. Then when opening, read the file bytes or load from the path. Plenty of ways to save/load content. Do some googling, make an attempt. Post if you have troubles and include the code you attempted with.
This is definitely the worst.
Oh, apparently the link doest work :/ Anyways i still dont get it
I think this is an excellent feature. Good work!
Anecdote for you - been using gmail smtp from some of our applications for years and never had a problem with outgoing mails caused by gmail. A while back we discovered that the .NET smtp client was broken with some releases of .NET (4.0?, sorry was a while back so not sure anymore) for good long while we used a 3rd party library to get mail out. For you doubting thomases - we proved that the problem was .NET as we ran outgoing mail using the same gmail accounts using both libraries and only the 3rd party was getting out. Then suddenly one year all was well again. Nice to be able to drop a dependency. Moral of this story - just because it used to work doesn't mean it is still working. Good luck! Edit: changed smtp service to smtp client
Ahaa, i get it thank you so much!
Looks ok to me ... how many other ContactTypes are there? The only thing I can think is to have a ContactType[] of the ones you want to check for and check against that in your LINQ statement? I doubt that EF (assuming you're using that) would know what to do with that though. Perhaps if you declare the array in the lambda body instead? var contactTypes = new [] { ContactType.ProjectManager, ContactType.Architect, ContactType.Client }; var users = await _userManager.Users .Where(x =&gt; contactTypes.Contains(x.ContactType)) .ToListAsync(); 
Never use a multidimensional array, it's a maintenance nightmare. Build a custom class.
So first off, how many times do you want to hit the database? You've decided to optomise this to once, which is good, but that's bound to be duplication. I'd suck it up, it's worth a tiny bit of duplication for performance, but I'd rename the local variable from just 'users' to something more descriptive, maybe 'filteredUsers' because I often expect users to be all... That's a minor convention thing but it does help when dealing with something like IQueryable which has a tendency to be leaky abstraction. Secondly the constructor on ProjectUser... That looks familiar in each useage, maybe have something inside ProjectUser like public static ProjectUser FromModelObject(WhateverItIs model) { return new ProjectUser { Id = model.Id, Name = model.FirstName } } Then you can just .Select(ProjectUser.FromModelObject); Another think you might want to consider is the cost of making ProjectManagers Architects and Clients have their value as an Array. At the moment, every call to one of those properties will result in the Select being executed for everything that matches the Where filtering. This can be expensive if you are hitting this method more than once. So a .ToArray() can help. Also consumers of the ProjectViewModel might be better off knowing it's an IReadOnlyList&lt;T&gt; rather than IEnumerable&lt;T&gt;. Verbosity isn't always a bad thing.
Might even be a good use of ToLookup() instead of GroupBy/ToDictionary. Conveniently, Lookup gives an empty collection back if it doesn't contain the specified key. var usersByContactType = users.ToLookup(x =&gt; x.ContactType, x =&gt; new ProjectUser { Id = x.Id, Name = x.Name }); var projectManagers = usersByContactType[ContactType.ProjectManager].ToList(); var architects = usersByContactType[ContactType.Architect].ToList(); var clients = usersByContactType[ContactType.Client].ToList();
I wrote this extension that let's you combine an If and Select. This might be useful here https://codepad.co/snippet/5NP4g6xq
Alright, thanks. I still wanted to know how it works tho :)
yeah, i know i kinda got it since i looked at the link, and i also looked at some videos about it! Thank you!
Yeah, just use an array of arrays like a normal human being.
How clear are you with your expectations? How bad is their code? Describe the nature of common failings. Maybe the candidates are trying to impress you by rushing and completing early?
Basic skills: I've love to see a sample of this test. I'm moving from desktop to web dev and will be interviewing soon. I have no idea what is expected in a typical interview. Soft skills: How are you assessing the last two bullet points? Those seem to be subjective - especially the last one. Source control: If this is an in-house (or take home) test, how complex is it that you would expect many commits?
then how could I save and load button1.Image?
You're only hitting the database once, which is the key thing. In terms of repetetive code, the only bit I'd question as duplicate is the creation of a new ProjectUser in each Select. If it was me, I'd probably add a ProjectUser constructor that takes a user as a parameter, and use that instead. ....Select( x =&gt; new ProjectUser(x) ); 
Classic Microsoft... "Stop using that old shit we sold you on 2 years ago, it's crap now. By the way, here's our new shit that we'll abandon 2 years from now... you'll love it."
sorry I'm very new to c# so can you show me some code examples?
What kind of app are you building?
 Properties.Settings.Default.Button1CustomImage = @"Images\a (1).png"; b1a = Image.FromFile(@"Images\a (1).png"); Then when loading, check if that custom image is set and use its value, like `b1a = Image.FromFile(Properties.Settings.Default.Button1CustomImage);`
Removed: You already have this question submitted here: https://www.reddit.com/r/csharp/comments/588amz/using_visual_studio_c_how_can_i_save_and_load/
I too would love to see the actual project test to check it out. Off the top of my head, if I was going through this as a developer, I would be wanting to know: Basic Skills: - Builds: What method are you tracking builds by? I've seen some people who equate builds to compiles and others who relate builds to implementation milestones. - Unit Tests: Any preferred UT mechanism, or is it the dev's choice? That could provide a small slowdown initially because the dev may not be as familiar with using a certain testing framework. - SQL Scripts: Assuming your test project would clarify by looking at it, but without seeing that: what flavor of SQL are you using for a data layer and what form of data access/entities? That can make a modest difference in time in situations where the dev may not have used a particular flavor of SQL, or where a dev may be less familiar with a particular access methodology and has to consult reference material for particular nuances. Soft Skills: - Smart Assumptions: Unless I *am* the user, I will never see things 100% in the eyes of the user, and I won't assume anything. BTDT, got that t-shirt. I'd be looking to fill out the incomplete requirements with a few emails, phone calls, or an in-person meeting. Likely I'd try to create some test cases and mock-ups with the user to help them understand what I need to know about what they want. - UX/Design choices: Same as above. I've seen users that want stupid complicated interfaces and users that want as little as possible on their screen. It's easier to sit down with the user and make some mock-ups of what they want. Source Control: - Separation: Really unsure what you're looking for here, but admittedly I'm not a highly proficient git user (been in VisualSVN environments purely by chance my entire career). To me, a commit should always include all changes necessary to ensure no checkouts are ever broken due to added, removed, or depreciated functionality. Ideally the repo(s) structures were created by someone who understands the larger picture and is capable of breaking the projects up properly so that as a developer I don't need to worry about structure; I can commit each project or library's changes, then finally the main application changes. Better yet, I don't ever have to commit changes to libraries because those are handled entirely by another developer and I'm just using a working pull of their repo. Obviously, different teams have different ways to accomplish these things obviously due to team size, codebase size, project structure/complexity, and other factors. Meaningful messages is a given...that's documentation!
I've never used ToLookup, thanks! Looks very useful.
Got it, thanks for the response. The decision sounds well thought out, and it falls under C#'s original goal of not surprising the developer.
a bool should be just 1 byte and not 4 (as in int). idk whats going on there. as for the rest, you are forcing the bool to store 10 as its value and it shows true since the value is != 0 but when comparing it to true (1) it will result in false, makes sense. its an undefined behaviour
Your code disagrees because you didn't assign the integer 10 to your true boolean variable.
You can assign multiple controls' events to the same event handler, by going to the events section in the properties and selecting an existing event handler. Then you can access the specific control via the `sender` parameter, you just need to cast it to `CheckBox` to access its properties. From there you can dynamically choose the required image, e.g. from the `Name` property or by assigning the numbers to the `Tag` property.
Line 13 gets the pointer of b2, casts it to the pointer of an int and sets it to the integer value of 10.
 private void checkBox_CheckStateChanged(object sender, EventArgs e) { var checkBox = (CheckBox)sender; if (checkBox.Checked) { // ... } }
Bonus: If the integer value of b2 is uneven(last bit is 1), b1 &amp;&amp; b2 will be true
There is an empty default Visual Studio unit test project to hint to them that it is a good idea. I don't expect full test coverage. I'm much more interested in the presence of any tests and the quality of individual tests. I'd agree delight is very subjective, but I feel like it should be rewarded when I see it. And there are definitely variations I've seen before that I'd be delighted to see again.
Your question stands, but he's not making a *pointer to a pointer*, he's casting the address of the bool to an integer pointer and then dereferencing it.
Line 13 gets the pointer of b2, casts it to the pointer of an int and sets it to the integer value of 10. Essentially forcing the value of b2, by editing the value directly in memory.
This SO question points out that there are other factors at play when it comes to boolean byte representations: http://stackoverflow.com/questions/294905/why-in-net-system-boolean-takes-4-byte So I am fairly sure it has something to do with the way your assigning 'true' using a pointer to a 32bit int pointer. Would be interested to know why tbh.
I think line 16 should be: Console.WriteLine($"b2({b2}) == true =&gt; {b2 == true}"); Curiously, under the debugger, b2 == b1 evaluates to "true". But the print is different...
https://i.imgur.com/M8HVryB.png I suppose the debugger treats the equation as booleans rather than integers
I can't share the test, but if you imagine a very basic TODO app with a search function you'd cover most of what we ask for. The soft skills are subjective, so I'm open to refining those entries. There are a couple of problem descriptions that are intentionally vague, so we explicitly ask about a few to see if the candidate has thought through how the user would interact with those functions. If they've preemptively attempted to solve some UX issues, that's a solid plus. Delight is almost purely a "I know it when I see it" test, but it seems so clear when I do see it. Basically there are many times when the most straightforward way to develop a solution, does not give the most straightforward way to use it. When you take the time to think from the user's point of view, it can make even completely specced features much more usable. The test is take home and fairly simple. So far all of our candidates have left only a single commit, although most claim to never have done so for a real project. My position is that more commits is almost always better than fewer. It shows logical sets of changes, shows a path of thinking during development (especially useful when someone has to take over Work-In-Progress). While I'd be thrilled with a dozen good logical commits or more, I'd be well satisfied with two or three separating library updates from completing each feature description.
Senior position aspirants often tend to seek their own decision making power. So they'd be turned off from asking questions and will try their own ideas.
A managed `bool` is just one byte, but they may be aligned to word boundaries on the stack. Unsafe code doesn't care if the data sizes of your pointers match, it'll happily write beyond the original value. In fact, if you do something like `*(long*)&amp;b2 = 0`, you'll likely find that both values are now false. Also, `b2 == true` isn't actually correct. It's just that the `== true` is optimized away, and any non-zero value is considered to be true. If you do something like `b2 == bool.Parse("true")`, it'll return false as well.
Agree. Word-alignment. Back when I wrote C, you would order the fields in your structs in decreasing size so that you didn't lose space to internal word-alignment padding. 
just use the tag property of the checkbox. You can assign any object to it. so for your checkbox1 assign 1 for checkbox2 assign 2 as tag property. in the methods for the event you can just extract the information again and cast it to an integer which you can put into your filename 
LINQ, unfortunately, does not lend itself to sorting things into multiple collections like this (most of the time). If we approach the issue from a more OO perspective instead of abusing LINQ, we can simplify things rather well. class ProjectViewModel { ProjectViewModel() { ProjectManagers = new List&lt;ProjectUser&gt;(); Architects = new List&lt;ProjectUser&gt;(); Clients = new List&lt;ProjectUser&gt;(); } ProjectViewMode(IEnumerable&lt;Contact&gt; contacts) : this() { foreach (var contact in contacts) { if (contact.ContactType == ContactType.ProjectManager) ProjectManagers.Add(new ProjectUser(contact)); else if (contact.ContactType == ContactType.Architect) Architects.Add(new ProjectUser(contact)); else if (contact.ContactType == ContactType.Client) Clients.Add(new ProjectUser(contact)); } } /** Field Definitions **/ } // and to use: return new ProjectViewModel(_userManger.Users); Note that as written, this doesn't exactly work. If you change the collections in the VM from IEnumerable to IList, it should. As users often prefer to have their UI elements alphabetized, this is probably a change for the better anyway, since IList implies an order. It will also expose modification, in case the UI allows the user to modify the collections of users.
trust me it's fine plus I'm not mass releasing this its just for me and some friends. but still, how can I do this?
Thank you for your kind words! Motivated me to fix some issues I had left hanging.
Is this class still suitable for your requirements? public class MainCard { private readonly Random random; public MainCard(params string[] noteNames) { random = new Random(); NoteNames = noteNames.Length &lt;= 0 ? new [] { "I", "II", "III", "IV"} : noteNames; } private int NoteIndex { get; set; } private string[] NoteNames { get; } public string CurrentNote =&gt; NoteNames[NoteIndex]; public void Randomize() { NoteIndex = random.Next(0, NoteNames.Length); } }
If they want a senior position they must show ability and initiative to gather additional requirements as needed on the job. In fact, I'd say good senior developers ask as many if not more questions than junior developers. Senior devs just ask different types of question. They rely on their decision making capability to answer the ones junior devs ask and they know or think of questions juniors devs don't.
 public void init() { NoteToPlay = Notes[Random.Range(1,5)]; } Think index 0 will never be hit because I assume Random.Range(1,5) goes from 1 to 4 like OP.
Right, fixed.
&gt; public string RomanNumeral { get; } Note that this doesn't have a setter. This is important. If you put setters in your structs you are in for a bad time.
Serenity looks interesting. What's your experience been with it? Are you building LOB apps? 
It's tough to give super-specific advice without knowing how you intend to use the class but here's some thoughts that may (or may not) help. If you can get rid of the bools (more on that in a second) then you can save a lot of code with something like this: var notes = new string[] {"I", "II", "III", "IV", ""}; int whichNote = Random.Range(0,4); noteToPlay = notes[whichNote]; * var tells the C# compiler to figure out what type notes should be. Very handy. * The empty string is there to handle the case where your random value is 5. I assume doing nothing when the result is 5 is what you want? This also keeps noteToPlay from being null which is generally good practice. * There's no need to make whichNote a member variable unless it's used elsewhere in the class. Why do you have bools, a string, and an int indicating the note to play? That feels unnecessary and is potentially dangerous. What happens if I do something like this: var card = new MainCard(); card.noteOne = true; card.noteTwo = true; card.noteToPlay = "IV"; If you really need a bool, a string, and an int to represent a note then you'll want to do something to couple those values together to prevent getting into a weird state. This means more code, but it's much less error prone. A Note class would be good for that: public class Note { int id { get; private set; } string label { get; private set; } bool enabled { get; set; } public Note (int id, bool enabled = false) { /* code to set the class properties goes here. I'd use the same array trick to set the label appropriately */ } } * The private setters prevent outside code from changing those values like in my example above. If you take that approach the above init function gets changed to something like this: var notes = IEnumerable.Range(1,5).Select(index =&gt; new Note(index)).ToArray(); int whichNote = Random.Range(0,4); noteToPlay = notes[whichNote].label That first line is using LINQ (you asked for slick!). It'll take some time to get up to speed on LINQ but it's worth it. It's probably my favorite thing in C#. What it's doing is essentially the same as this: Note[] notes = new Note[5]; for( int i = 0; i &lt;= 4; i++) { notes[i] = new Note(i + 1); } You could also make noteToPlay is a Note instead of a string. You can make noteToPlay's setter private too if you don't want any code outside of MainCard to change what Note noteToPlay is set to.
He is talking about the core part of Windows. And this developer is Raymond Chen. He have been with MS for décades now and run a really interesting blog. https://blogs.msdn.microsoft.com/oldnewthing/
I think the comment is kind of tongue in cheek, and the context seems to be restricted to the OS itself and applications shipped with it. And indeed few if any of those are written with .NET as far as I know (although this might have changed with some of the recent Windows store and PowerShell stuff?). Raymond Chen is a long time Microsoft veteran and is intimately familiar with C#, so it's not like he thinks it's some obscure language that no one uses.
There's also [Midori](https://www.wikiwand.com/en/Midori_(operating_system\)), which was an experimental OS initially written in an extended version of C#.
public partial class Form1 : Form { public event EventHandler CheckBoxStateChangedEvent; public Form1() { this.CheckBoxStateChangedEvent += new EventHandler(this.Form1_CheckBoxStateChangedEvent); } private void checkBox1_CheckedChanged(object sender, EventArgs e) { if (this.CheckBoxStateChangedEvent != null) { this.CheckBoxStateChangedEvent(sender, e); } } private void Form1_CheckBoxStateChangedEvent(object sender, EventArgs e) { Check checkBox = sender as CheckBox; int checkBoxNumber = int.Prase(checkBox.Name.Substring(CheckBox.Name.Length - 1, 1)); if (checkBox.Checked) { checkBox.Image = Image.FromFile(string.Format(@"Images\aa ({0}).png", checkBoxNumber)); } else { checkBox.Image = Image.FromFile(string.Format(@"Images\bb ({0}).png", checkBoxNumber)); } }
&gt; Second way of doing it is to make two arrays instead, one with the strings That's called a Dictionary, not "two" arrays.
You can have multidimensional arrays var multidimArray = new int[3, 2]; and arrays of arrays (sometimes called 'jagged' arrays) var arrayArray = new int[3][]; A multidimensional array is really a sort of wrapper over a single-dimensional array that does some modulo arithmetic to index into the array. An array of arrays is a collection of references to other arrays, and these references can be null (and will be, by default, unless/until you initialize them to something!). In practice, this means that every cell in the multidimensional array is allocated and referrable when the array is created, but an array of arrays needs to be initialized row by row. This is also why creating a multidimensional array requires you to declare the size of both dimensions, and an array of arrays requires that you only specify the first dimension. As a tradeoff, an array of arrays doesn't require that every row be the same size. Sometimes, that's handy, and sometimes it's not. A multidimensional are kind of clunky, unfortunately. You can walk through every element in an array of arrays more or less like so: for (var i = 0; i &lt; arrayArray.Length; i++) { for (var j = 0; j &lt; arrayArray[i].Length; j++) { var cell = arrayArray[i][j]; } } To do that with a multidimensional array .... for (var i = 0; i &lt; multidimArray.GetLength(0); i++) { for (var j = 0; j &lt; multidimArray.GetLength(1); j++) { var cell = multidimArray[i, j]; } } because the `Length` property of a multidimensional array is the total number of elements in the array. Jagged arrays seem generally preferred. They're just a little better behaved, 
Only in higher level languages
Um, what? Hash tables *are* dictionaries (but not all dictionaries are hash tables) in any fucking language, you dense donut. It's a data structure, not some language specific detail. 
nono, how do i write the deduct method :D ? 
[`Int32.Parse()`](https://msdn.microsoft.com/en-us/library/b3h1hf19.aspx)?
Too bad for strandart it does against spec. This literally conflicts with quite from language spec I quoted above. Probably they never thought that dereferencing pointer isnt the only way is shooting your own feet.
nvm i made it work :) thanks anyway
Calm down :p
The only problem I see is the usual, that *not* using msbuild to build with is going to get increasingly harder. It's already pretty hard due to all the magic taking place at the msbuild level.
&gt; The only problem I see is the usual, that not using msbuild to build with is going to get increasingly harder. It's already pretty hard due to all the magic taking place at the msbuild level. What are your reasons for not wanting to use msbuild? Just asking, never been in that situation before.
[removed]
Whenever you use switch, you should check if it makes more sense to use types. 
Maybe the point is for you to learn C#?
This doesn't help me understand why they even went with the weird JSON-based system for Core in the first place. Multitargeting and command-line based csproj manipulation will come in handy though, that's neat. Wildards are already supported in csprojs, but Visual Studio doesn't like them too much (you can't create them via the UI and when you add another file to the project, VS will not consider wildcard and instead will add the file to the project as usual, causing the file to appear twice after you reopen the project).
Good clean solution. I would probably replace init() with a constructor, and create a new MainCard everytime I need it, instead of resetting/calling init again. It also makes sure the MainCard instance is always valid (has a NoteToPlay).
With these extensions: public static class EnumExtensions { public static List&lt;T&gt; Enums&lt;T&gt;(this T enums) where T : struct, IConvertible { if (!typeof(T).IsEnum) throw new ArgumentException(typeof(T) + " must be an enumerated type"); return Enum .GetValues(typeof(T)) .Cast&lt;T&gt;() .ToList(); } public static string Description(this Enum value) { string name = Enum.GetName(value.GetType(), value); System.Reflection.FieldInfo field = value.GetType().GetField(name); if (field != null) { DescriptionAttribute attr = Attribute.GetCustomAttribute(field, typeof(DescriptionAttribute)) as DescriptionAttribute; return attr != null ? attr.Description : name; } return name; } } 
&gt; What I'm trying to do is, send a message to my background Skype without using their Skype4COM API Why?
Except they still exhibit the same problem.
I think it just introduces headaches for everyone involved. At least this way nobody expects they can change anything on the existing struct, they'll just have to explicitly create a new one if they want to change values. 
It's the dictionary initializers introduced in 6.0
aah i see, great thanks, makes sense, neat feature
Two words for you to research Enum Switch
Welcome to the horrible syntax of dictionary initializers :p
I mean, it was intentional hyperbole. Well, the first two sentences were. 
Polymorphism
A beginner likely should be encouraged to use a List, too (not an array).
I think in this case you would still need a switch, if, etc. to decide which subclass to use.
I agree I haven't set expectations well. I don't want candidates to treat this as a small throw-away project. I need to set the expectation that this is going to viewed as if it were a real project project with an extended life. I should then find qualities of good software development in their code without having to explicitly state those qualities.
OP said he was not a trained programmer so I just wanted to make sure he was aware of the switch. Also I'd argue that in some cases a switch makes the code easier to read even if it is functionally the same as nested if/else conditionals. The switch I suggested wasn't meant to be the most elegant solution to his problem, I'll leave that to the much more talented programmers than I, but more to offer a suggestion on one way he could circumvent the if/else structure. :)
&gt; This doesn't help me understand why they even went with the weird JSON-based system for Core in the first place. [This](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/) does a pretty good job explaining why they initially went with xproj and json and why they eventually had to migrate back. &gt; Wildards are already supported in csprojs, but Visual Studio doesn't like them too much (you can't create them via the UI and when you add another file to the project, VS will not consider wildcard and instead will add the file to the project as usual, causing the file to appear twice after you reopen the project). I imagine this is what they had to work on, the xproj &amp; json project structure seemed to handle it flawlessly.
This is a bad move. Working with project.json files was a refreshing change of pace compared to working with MSBuild for the past decade+. Going back to MSBuild is a step backwards and I'm really disappointed they did it.
Fixed Midor Link: [Here](https://www.wikiwand.com/en/Midori_(operating_system\)) Alternate C# OS: [Cosmos](https://en.wikipedia.org/wiki/Cosmos_(operating_system\))
I was looking for this a while ago! http://rcc.thehivenetwork.com/2016/02/13/angular2-with-typescript-mvc-web-api-in-visual-studio-2015/ It is a bit dated, so compare it to the angular.io getting started page for what libs to include and changes to system.config, and the new way of bootstrapping the app (modules n such).
I am doing Shawn Wildermuth's course on Pluralsight which is excellent as a person with limited programming experience. I did VB6 years ago but never fully dove into .NET at all. He does it at a nice pace.
fixed it: replace: &gt; int checkBoxNumber = int.Parse(checkBox.Name.Substring(checkBox.Name.Length - 1, 1)); With: &gt; int checkBoxNumber = 1; &gt; if (checkBox.Name.Length == 9) &gt; { &gt; checkBoxNumber = int.Parse(checkBox.Name.Substring(checkBox.Name.Length - 1, 1)); &gt; } &gt; else if (checkBox.Name.Length == 10) &gt; { &gt; checkBoxNumber = int.Parse(checkBox.Name.Substring(checkBox.Name.Length - 2, 2)); &gt; } &gt; else &gt; { &gt; checkBoxNumber = int.Parse(checkBox.Name.Substring(checkBox.Name.Length - 3, 3)); &gt; } this makes sure to change the number depending on if the number is 1, 2, or 3 digits. :) 
We are going to develop our current Windows-Based ERP solution (~20 Modules that written in Embarcadero Delphi) for web sector. So we evaluated a lot of frameworks and exist products like DevExpress XAF, but actually we chose Signum framework. It is so mature in core and also extensions. The most important thing about Signum is Olmo. He is a perfect man and always keep himself and also the framework uptodate. I love working with him. Currently we are working together to add Workflow and Dynamic worlds to the Signum. Finally, I strongly recommend using Signum to produce web applications.
Isn't there a template project built into VS by default?
Since, judging from the other answers you've given, this is a take home test. Being annoyed that people aren't asking questions when presumably the only way to do so is to email you seems off. Email is inherently Async so unless you're sat there answering their questions at exactly the same time they've put aside to do the test you're going to massively extend the amount of time it takes for them to complete the task. If I'm interviewing and have got a take home task I expect all of the info I need to be in the task or to have to take the initiative. I might only have time to do it after work once my kids have gone to bed and after I've cooked dinner that might be 9pm - midnight. Odds are I'm not going to get a response so I won't bother. Unless this is a remote role then it's not indicative of how they'll be working day to day.
I have a similar issue with some of those elcheapo tablets. But it's not just my WPF apps, it's everything. At a certain point the touch screen won't respond to touches in the main UI area, but will accept touches in the SuperBar area. Once I touch the SuperBar, or the Start Button, then touch works again in the rest of the app. 
Try http://blogs.msmvps.com/deborahk/angular-2-getting-started-with-a-visual-studio-2015-asp-net-4-x-project/?
I googled "angular 2 visual studio 2015". It was the third link. Please tell me you tried googling first?
For this thread's problem they wouldn't help. Some developers say you should always prefer polymorphism over switching on enums, but I don't see why. The main time I can think of to prefer polymorphism is if you would switch on an enum in a bunch of methods that do different things, and if you wanted to change what one of the enum values "means" you'd probably want to change the switch case for that enum value in all those places. By making that enum value a subclass and those case statements methods, all of the methods you'd need to change are together one file. It's also perhaps more extensible to use classes, in case in future you decide you want to carry around some fields with your "enum" too. Also with an enum all the values it can take must be defined in one assembly together, whereas you could have implementations of your interface in different assemblies. Finally it's easier to mock out behaviour for unit tests with interfaces.
Removed: Rule 4. Plenty of resources out there on using Selenium. For example http://stackoverflow.com/questions/34138838/open-link-in-new-tab-selenium-c-sharp Adding the URLs to a ListView is also pretty rudimentary. Do some research, make an effort. If you still have issues, post relevant code that you've attempted and explain how it's not working the way you want it to.
&gt; e structs are c When I don't use a setter I get an error. "GameManager.Note.Index.get' must have a body because it is not marked abstract or extern. The property can be automatically implemented when you define both accessors..." Using a setter resolves the error though, and works in the game.
how would I save and load so that those checkboxes are still checked/unchecked when reopening the form? at first I did: &gt; Properties.Settings.Default.c1 = checkBox1.Checked; again, c1, c2, c3 all for checkBox1, checkBox1, checkBox3... then loading was: checkBox1.Checked = Properties.Settings.Default.c1; I tried to implament what you said arlier with this as well but had no luck. how can I make a simple loop to save all of my checkbox states?
One of the main benefits I can think of is that you can have private repos in VSTS for free(up to a certain user count). You have to pay for that if you use GitHub
&gt; caveats Well, you are using Git for starters.
try turning off anti-virus?
You shouldn't use deflate on 32 byte packets. Why compress something that will take a full packet anyway? Especially because deflate will likely make your packet actually bigger. If you do want to use deflate, look into the Microsoft.IO.RecyclableMemoryStream to avoid buffer allocations and GC. That might be what you are encountering (garbage collection that pauses your threads)
ReSharper supports that nicely, and even shows you all todo/review/bug items within your solution in an extra window.
Sounds like you are on an older version of C#. In the past we would write it this way: private readonly int m_Index; public int Index { get {return m_Index; } } 
Ah, we use ReSharper fortunately. What should I look for in here?
Two weeks later... http://i.imgur.com/snLplqq.jpg
I really like VSTS, and it's integration with the agile/project tracking can come in handy (although honestly I haven't used it.) The built in code review they have in the UI is pretty good. Not perfect but pretty good. **Ultimately** I think the biggest difference is that for small groups or solo work, free github is public repo, but free VSTS is private by default.
What's with everyone sharting out code with no formatting in this sub over the last day or so?
I found this on /r/learncsharp it seems exactly what I was after http://bestprogrammingbooks.com/popular-csharp-books/
Also, how are you doing reviews? If you review the changeset via the tfs, doesn't it highlight any piece of code that you comment on? 
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace PA05UnruhS { class DiscountApp { static void Main(string[] args) { // bool membershipStatus; int age; double discountRate; // DisplayTitle(); // DetermineMember(); // if (membershipStatus == true) { InputAge(); DetermineDiscount(); Console.WriteLine("The discount is {0:P2}", discountRate); } // else { Console.WriteLine("Sorry, discounts apply to club members only."); } TerminateProgram(); Console.ReadKey(); } static void DisplayTitle() { //Changes console background to white and foreground to black and clears the console Console.BackgroundColor = ConsoleColor.White; Console.ForegroundColor = ConsoleColor.Black; Console.Clear(); //Displays the title of the project and a line break Console.WriteLine("\n\tProgramming Assignment 5 - Determine Discount"); Console.WriteLine("\tProgrammer: Spencer Unruh"); Console.WriteLine("\t_____________________________________________\n"); } static bool DetermineMember() { bool member; Console.Write("Are you a member? &lt;Y or N&gt;"); member = Convert.ToBoolean(Console.ReadLine()); if (member = Convert.ToBoolean("Y")) { return true; } else { return false; } return member; } static int InputAge() { int customerAge; Console.Write("What is the customer's age? "); customerAge = Convert.ToInt32(Console.ReadLine()); return customerAge; } static double DetermineDiscount() { } static void TerminateProgram() { //Displays a line break and tells to the user to press any key to terminate the program Console.WriteLine("\n\t_____________________________________________"); Console.Write("\tPress any key to terminate program..."); } } }
I would personally go a small step further and use a dictionary. That way you can 1) Access them by key lookup which is order-1-ish 2) You can reference individual check boxes, and do logic based on which checkbox it is. Or you could store the checkbox text as the key, so you can look up from the user side. 
Removed: Rule 4.
Read the .NET Framework Design Guidelines. It explains how to think like Microsoft's core API developers.
Microsoft Visual C# 2013 Step-by-Step by John Sharp. I'm not sure if there is a later (e.g. 2015) version, but 2013 will do just fine.
Check here... https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream
You can get into C# on linux with Mono and MonoDevelop IDE. It certainly isn't as robust as Visual Studio but it is quite good. It is definitely doable and many people are doing it.
Have no idea if this syntax will work, has been years since I touched GridView's - can't remember if GridView.Rows is 0 based or not either.. for (var counter = 0; counter &lt; limit; counter++) { var gvr = GridView1.Rows[counter]; var cb = (CheckBox)gvr.FindControl("chkSelect"); cb.Checked = true; } Edit: would also have to check if .Rows has &gt;= limit in it and if cb is found too.
 GridView1.Rows.Take(100).FirsOrDefault(gvr =&gt; { if (gvr.RowType == DataControlRowType.DataRow) ((CheckBox)gvr.FindControl("chkSelect")).Checked = true; });
I may be late to the party here, but I want to emphasize /u/sards3's point about commits. In the my day-to-day work, I don't tend to do a commit until either the end of the day or I finish the work, depending on the size and complexity of the work that I'm doing. In my experience, this is similar to what other devs tend to do -- if no one else needs my code (i.e., I'm working on a self-contained feature/project/bug) I commit when I'm done, after I've tested my fix/feature. You also mentioned in an earlier comment that you expect the whole test to take 2-3 hours. That's less than half a day's work, and I'd be willing to bet that to most devs that's not worth multiple commits in a real-world project. I don't know about you, but I am not in the habit of stopping my development work every couple of hours to commit what amounts to unfinished code. :) Combine the two, and you're almost guaranteed to get only a single commit for the project. Given its size, scope, and the fact that only one person is working on it with no one dependent on that person, it's not surprising. So I would go one of two routes: if you insist on multiple, detailed commits, then I second the suggestion of making that expectation explicit. Otherwise, don't ding them if they only choose to do one commit at the end of the work.
Yes, the to-do list (or task list) has been in VS forever. No need for extensions here. Although, if you need some custom actions, then you could quickly write a Roslyn analyzer that can flag 'todo's and perform some custom action, like failing a CI build, if you need (though thatd be a bit extreme :))
It does in the context of the code review, but not in the normal text editor AFAIK.
New in this version: * Latest Roslyn beta (Enables C# 7 "Preview 5" features) * Quick info tool-tips * Compile and save assembly * Restore NuGet packages from an existing document * Support for `#load` directives * Caret position fixes * Fix for orphan execution host processes Original release post: https://www.reddit.com/r/csharp/comments/4hvctr/roslynpad_an_open_source_c_editor_based_on_roslyn/
One thing your foreach does it go through all the gridview rows even if your limit is already met. Performance wise this is not great. Dont know the syntax right now but you should check the limit and breakout of the foreach.
We used to have the same exact issue caused by windows update in the background; in our case we were running full screen wpf and had set the window to the front; then at an arbitrary point windows would open a pop-up, it wouldn't be shown on screen and touch events, unlike mouse events, don't bring the window back to the front. Could be something similar?
However they will be working during business hours and presumably they will have been involved in designing the solution and scoping the work which is a longer process where back and forth around requirements is expected and time is assigned to do this. They would also be sitting with colleagues who they can discuss it with or just have the ability to move onto other projects or other areas of the project without wasting their time doing nothing while they wait for a response from the stakeholder. If you gave me a 3 hour dev project and expecting me to start it then email you questions then come back to it once you've responded having to once again carve out more time around my day job and family life. It sends the message that you don't value my time especially if the task is small enough that you could have given me everything beforehand. Personally I would be put off enough to look elsewhere. You might give them an opportunity to read the task and ask you before they go away to do it but interview situations are very different to real life working conditions. I think it's unreasonable to expect people to ask every question they need an answer to on the first pass of a problem. Another issue you may be overlooking is that many take home code tests for interviews are intentionally left vague to allow scope to demonstrate ability rather than to test the candidate's ability to ask the right questions in an interview situation. 
Coding - 20% knowledge, 80% stackoverflow ;D
Hey, I think the JSON reads much nicer than the C# initializer syntax. Of course it's not really comparable, since the former would new up a bunch of fixed classes (dictionaries) and not just be an initializer for anything that conforms.
Get. Out. Of. Here.
Yes, you are right, I will make sure to cover different names for processes to eliminate confusion in the future. 
Using LINQ: var rows = GridView1.Rows .Cast&lt;GridViewRow&gt;() .Take(100) .Where(row =&gt; row.RowType == DataControlRowType.DataRow); foreach (var row in rows) { var cb = (CheckBox) row.FindControl("chkSelect"); cb.Checked = true; } The cast is needed because GridViewRowCollection does not implement typed version of IEnumerable.
Yeah, the "Task List" gives you a summary of "ToDo" items, but that's not what I'm after. I'm trying to actually visibly see a highlighted comment when there's something specifically for the review. (Though the task list would allow me to quickly find/remove them once the review is over). 
[Similar question here.](https://www.reddit.com/r/csharp/comments/58itju/visual_studio_highlight_commented_code_like_todo/d91lsjt/)
During code reviews, we actually sit in a room and remote in to the developer's box so we can go through the code in Visual Studio. While "ToDo" comments do get highlighted (I believe this is a ReSharper specific feature?) I can't seem to get other comments to be highlighted as well.
So close! I was able to go in and add a pattern, but this only causes the IDE to treat the "Review" tag the same as the "ToDo" tag. (In the ToDo Explorer itself, it's different, but in the IDE, it's indistinguishable from the ToDo). I'd like it to highlight a different color in the editor.
This doesn't actually work. The LINQ First() function takes a predicate, not a number of items. ForEach() is a method of List&lt;T&gt;, not of IEnumerable or IEnumerable&lt;T&gt;.
A simple for() loop is probably the most efficient. foreach() will be slightly slower (it has to allocate an iterator), but not so much that it would be noticeable outside of a tight loop. LINQ will be slightly slower than that, but, again, not so much that it would be a problem in most usage. for: var max = Math.Min(100, GridView1.Rows.Count); GridViewRow row; for (var i = 0; i &lt; max; i++) { var row = GridView.Rows[i]; if (row.RowType != DataControlRowType.DataRow) { continue; } var cb = (CheckBox) row.FindControl("chkSelect"); cb.Checked = true; } foreach: var max = Math.Min(100, GridView1.Rows.Count); var count = 0; foreach (var row in GridView1.Rows) { if (++count &gt;= max) { break; } var row = GridView.Rows[i]; if (row.RowType != DataControlRowType.DataRow) { continue; } var cb = (CheckBox) row.FindControl("chkSelect"); cb.Checked = true; } LINQ (method chain): var checkBoxes = GridView1.Rows .Cast&lt;GridViewRow&gt; .Take(100) .Where(r =&gt; r.RowType == DataControlRowType.DataRow) .Select(r =&gt; (CheckBox) r.FindControl("chkSelect"); foreach (var cb in checkBoxes) { cb.Checked = true; } LINQ (query syntax) var checkBoxes = from GridViewRow r in GridView1.Rows.Take(100) where r.RowType == DataControlRowType.DataRow select (CheckBox) r.FindControl("chkSelect"); foreach (var cb in checkBoxes) { cb.Checked = true; } YMMV. LINQ query syntax is probably the most readable of the bunch. 
I do see your point. For example "Mothers In Law" is the appropriate term for many a "mother in law". Thus, if you had a table where each record was a single "Mother In Law" then "MotherInLaw" becomes an entity now unrelated to the physical being, and "MotherInLaws" becomes the convention. (Not unlike how a single "mouse" becomes "mice" in a group, unless you're talking about computer "mouses" which is actually "mouses".) But the problem is, when you stick to the naming convention for the sake of convention, it muddies the clarity, and IMO clarity should always trump convention. If I give you a table with the title: "PatientRecords" Do you know by that title whether one patient has multiple records, or that one patient has many records? But if I call this table "PatientRecord" (or even "PatientsRecord") I immediately know (according to my own convention obviously) that this is going to be a table with one record for each patient. I'm not a big fan of attaching a pluralizer to every table just because it has multiple records. Of course it does. It's a table. And when you add an s to everything, you may as well add an s to nothing. So why not have the naming convention actually *mean* something valuable to help with the system's self-documentation? But then, I'm still a staunch user of three character Hungarian notation, and I literally use class names such as "SendChatMessageToClientCommand" and variable names like "smcSendPrivateMessageToCurrentUser". I also have almost as many comments as I do lines of code, so perhaps I tend to go a little overboard. I just blame it on my poor memory.
i just made a simple WPF app with a button that popped up a messagebox and ran it and its doing the exact same thing. Im going to grab a different tablet and see if it does it. Thanks for the replies.
thank you
Hmm, that is a very specific ask. So, you're asking for a feature that highlights a line of comment in the VS Editor with a specific color, if it looks like something the dev needs to revisit later? Perhaps I didn't get your requirement fully, but if visual highlighting is what you are after, it'd only be visible for the file you have open in the editor. The task list is still a better feature because it aggregates TODOs from all files (including files that are not open in the editor). But anyway, back to the original question - I don't think what you ask is built into VS and I'm not aware of a popular extension that does it, though you should certainly look in the VS extensions gallery. 
Gotcha. I'd come to a similar conclusion. I was hoping that Visual Studio would have more robust custom code highlighting options.
Removed: Rule 4. Be sure to properly format your code for reddit. Plenty of resources out there covering serialization for Unity. For example: http://answers.unity3d.com/questions/23734/need-to-serialize-a-monobehaviour-class.html Do some searching around and take a shot at some of the patterns suggested. If you still have issues, feel free to post them (with proper code formatting), and describe what is and isn't working.
Yeah, the more I thought about it, the less I liked the idea. While it would ultimately save me like 1 line of code per class, the resulting code would be less clear, I think. Thanks anywho! 
They wrote things in javascript to prove it could be done instead of just using C# which they knew would work. 
Your class doesn't match the XML. You have all the wrapping nodes `PublicSafetyEnvelope`, `PublicSafety`, and `Response`. Either you need to manually trim the XML down to the `nmmain` node or define the rest of the wrapping classes.
&gt; Latest Roslyn beta (Enables C# 7 "Preview 5" features) Is there a way to select which version of C# you want to compile against?
Not at the moment. There's a GitHub issue for that though. 
You should have a "paste XML as class" option in Visual Studio. See if that gives you better results. http://csharpcorner.mindcrackerinc.netdna-cdn.com/UploadFile/pranayamr/generate-class-from-json-xml-in-visual-studio/Images/past%20spacial.jpg
Removed: Rule 4. Please include relevant code for how you are interacting with it. If it's always displaying as `"Progress: 0/500 (0%)"` then you may be referencing the wrong progress bar in your code. Plenty of resources out there for calculating and/or displaying a percentage and/or rounding to a specific number of decimal places. As it stands, you aren't calculating any percent whatsoever.
SOLUTION: &gt; int percent = (int)(((double)progressBar1.Value / (double)progressBar1.Maximum) * 100); &gt; progressBar1.CreateGraphics().DrawString(percent.ToString() + "%", new Font("Arial", (float)8.25, FontStyle.Regular), Brushes.Black, new PointF(progressBar1.Width / 2 - 10, progressBar1.Height / 2 - 7));
Ah, ok. I see. So trimming down the XML to just the `nmmain` and setting the `xml...typeof(Nmmain), new XmlRootAttribute("PublicSafetyEnvelope"));` to `new XmlRootAttribute("nmmain")` makes it work. But if i wanted to try to go about this without doing programmatic trimming of the data before it gets in, how would the classes need to be set up? The classes got generated with the site that i used, and they look like this: http://pastebin.com/QzQSXvYm I guess i thought i could ignore them since the only place that had data that I wanted was nmmain. 
Hey, great work! Can I contribute to the repo? 
Thanks! And sure, but please start with opening an issue for whatever you'd like to add so we can discuss it.
That question makes no sense. What does she really want to do? What's the problem she is trying to solve?
Why would I want to do this, exactly? I feel like I'm missing the utility here besides "just cuz" 
Take home tests are different to real work. I would be frustrated by a take home test that required me to ask questions about requirements even though that is exactly what I do at work. In my limited experience take home tests have been about technical skills only and interviewing is used to judge soft skills, unless you make it clear that you do things differently then I wouldn't be surprised to see people not doing it. 
Way to jump to a conclusion. I was stating the obvious and telling the OP where he's gone wrong. Feel free to vent your rage at places like /r/rage not /r/csharp.
Run the debugger and double-check the value reported by `this.Width`. It should be around 783ish or the value you expect (just did a quick check in Paint.NET so I don't know the exact value). Do your boxes or containing control have any margins or padding? What is the containing control that the boxes are in?
Ok, so I promise I'm not trolling. :) I'm curious about something: what is the niche for RoslynPad? I'm assuming it's a lightweight, free alternative to Visual Studio, but you can get VS for free (at least, you used to be able to; I have an MSDN account through work so I just get whatever version I want). I have a lot of respect for people who make this sort of thing, and I've always wanted to do it myself, though I've never come up with a project that I considered worth putting out to the world* -- in fact, I'm considering contributing to the GitHub project, assuming that's possible. But what's the case for using this over the (admittedly extremely robust) "official" alternative? ^(*That's because my imagination is shit, not because I have particularly high standards.)
yes.
Back your progressBar1.Maximum back down to 500 to match the 500 items you seem to have. If you are updating progressBar1.Value between 1 and 500 and have a maximum value of 50,000 then when you are at 500 you'll have a progress bar that displays 1% complete. As for why it always says 0%... are you forgetting to set progressBar1.Value in the loop where you are processing the items? Are you processing the items on the UI thread? It could be that you aren't giving the program any time to handle drawing the updated label and progress bar. Try putting a Application.DoEvents() after you update label3.Text.
It's a bit more overhead but you can use the view model locator approach and reference the view model locator then grab the view model you need.
So you get no downvotes for a one word answer, and I get downvotes for explaining to OP why he's confused? k then.
TableLayoutPanel makes alignment issues like this easier. Also, I use (and recommend) this Stack Overflow post as a guide for Winforms layout: http://stackoverflow.com/questions/22735174/how-to-write-winforms-code-that-auto-scales-to-system-font-and-dpi-settings 
Just to add to this answer - since Roslyn, the C# compiler, is open source, the code that runs most of the editor features in RoslynPad is the same as Visual Studio (minus behaviors that are VS-specific and lots of attention to detail, which make VS a truly great C# code editor). RoslynPad can also a great sample if you want to integrate C# code editing into other apps.
Hmmm, interesting, thanks for the feedback.
wow that site has some really solid tutorials. Thanks OP.
Oh man. If you keep moving forward with "consistent design on WinForms," you're really going to have a fun time when you try to hit desktop scaling. It's incredible, and stack overflow calls all questions duplicates of a single one, with a painfully incomplete answer.
Thank you, it really means a lot :)
Use a `BinaryWriter` and write to a re-used `MemoryStream` if you want to minimize allocations, or directly to the output stream if possible. Depending on the use-case, reflection based serialization can also be quite fast if you do runtime code generation.
If you have: Type implBase = typeof(ImplBase&lt;&gt;); Type genericParmType = typeof(SomeOtherType); as your open generic type and parameter type, you can say: Type desiredGenericType = implBase.MakeGenericType(new Type[]{genericParmType}); I don't know why `MakeGenericType` takes an actual array instead of a params list...
Define your messages as structs, use methods on the Marshal class to read them into raw byte arrays. [Liek dis](http://stackoverflow.com/questions/3278827/how-to-convert-a-structure-to-a-byte-array-in-c).
&gt; and write to a re-used MemoryStream if you want to minimize allocations Check out Microsoft's Recyclable MemoryStream: http://www.philosophicalgeek.com/2015/02/06/announcing-microsoft-io-recycablememorystream/
Do you have another ImplBase class which is not generic? Perhaps you forgot the `&lt;&gt;` at the end of the type name when creating the type definition, so you got the non-generic version instead.
Ahh, yeah, I glossed over that. You would definitely get that error if you were trying to pull out the type using: asmEpicorServiceModel.GetType("Epicor.ServiceModel.Channels.ImplBase"); You would need that to be: asmEpicorServiceModel.GetType("Epicor.ServiceModel.Channels.ImplBase`1");
So that was the problem, and I am super grateful for the help. If only all code issues could be solved by adding a `1 at the end! I have a new issue that just came up now though. Since there are generic type parameters, When I try to get the .UriPath field value it gives me the error: &gt; Late bound operations cannot be performed on fields with types for which Type.ContainsGenericParameters is true. I guess that makes sense, because I'd have to create an instance for the generic type to give the static field a value. However, when I mouse hover over the _ImplBase instance I can finally see that it loaded the proper type, and that is awesome. 
Vsts has great tools for build and deploy. For private work it is just easier.. 
Nice! That looks pretty clean. Wave interference patterns always look beautiful.
Just added that sry. Basically all lines 230-335 (every time the class "About"). Already tried changing it to a static class, created tons of new errors
really nice buuuut on the cpu? :o
im just saying that the gpu is made for image processing so why not use it? :D
Oh, I'm still a little fresh in this :D, I'll look into how to do that. If you have any recommendations where I should start, I would appreciate it very much.
Everything. What are you trying to do?
T4 works great for this. You can adapt the template below to do that. http://www.developerhandbook.com/c-sharp/t4-templates-for-lookup-tables/ But be careful that is what you really want to do. It has a bit of a code smell. Is there a reason why a direct query does not work for you.
It's been a while, but I know you can have fairly low-level control over how everything is marshaled. There are attributes to configure the marshaler. See [here](http://stackoverflow.com/questions/28761167/serializing-marshalling-simple-objects-in-c-sharp-to-send-over-network-for-an).
put break points in your code and make sure your variables are getting values. Use F11 to step through your code. 
I'll try the breakpoints, but I'm confused about the variables. It is set to get the variablesame "the number in the text box" so why isn't it getting it? I mean even the exit button isn't working. T
Quick and dirty? Use SSMS to query data to table, then select all and copy to Excel worksheet. (You could query right from within Excel as well) Then use CONCATENATE to get the code right. After you do, drag the formula down the table, then copy paste into code file. Or possibly use [NimbleText](http://www.nimbletext.com)
The code looks fine to me. Since you say it won't clear, exit, OR calculate then there's something wrong with how the buttons are linked to the "click" events. I haven't done Windows Form programming in forever, so I don't remember how it works anymore, but you need to associate the buttons with their events. The event name should show up in the properties for the buttons somewhere. In other words, your code is fine but it isn't being called when the buttons are clicked. You need to find out why.
Any guidance on how? Is this where the F11 part would come in?
The best hint I can give you is that the problem isn't *your* code. It is also not a runtime or logic error. My guess is that you hand-coded all of this. Visual Studio can be tricky because it does some bootstrapping (wiring up components) for you behind the scenes. Try going back you your form designer and inspecting your buttons' properties. You may come across something missing. 
OMG THE EVENTS TAB! Thank you! That fixed it.
Hard to say. But my best guess is that when you placed your buttons in the designer, you double-clicked them (before writing your event handlers in the form code) which will automatically bootstrap the click event. I'm doing this all from memory, though. I haven't done much WinForms development in a very long time.
well aren't you delightful.
Thank you very much, I'll check everything out and start studying ;)
To format your code properly you must: - Leave an empty line before and after your code. - Indent every line with 4 spaces. Please properly format your code (rule 4). Then: - Understand that your array `alphabet` makes not much sense like this, as it contains **strings**, when you actually want **characters**. - Look up the `Contains` method. It can be used to check if an array contains a specific element.
Was done, sorry
Checkout the Char.IsLetter method which returns true if the given parameter is a letter. I tried it out really quick and it seems to work but you should test it out in every scenario you have. Here's some sample code: static void Main(string[] args) { ConsoleKeyInfo letter = Console.ReadKey(true); var isLetter = char.IsLetter(letter.KeyChar); if (isLetter) { //Code to execute if input is a letter } else { //Code to execute if input is NOT a letter } } 
wow ! Perfect, i'm beginer in csharp and i didn't know that it's possible to check if char is letter with a method ! Thank you so much !
Oh i've understand ! Thank you so much !
In the designer, look at the button properties. Near the top should be a lightning bolt icon for "events". Click that, look through the list for the click event and see what methods are assigned.