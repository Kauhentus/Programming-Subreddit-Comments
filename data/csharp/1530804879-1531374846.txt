I'm not really a designer so I prefer more back-end stuff, which is why I was trying to do things in the code-behind. I just have to throw together the UI for a simple test program. Do you happen to have any resources on these things or example code? Google searches are giving me different things when I search for "viewmodel." Thanks guys :)
&gt; Do you understand what a blockchain is and what it does? It sounds like you've heard of this new shiny technology and want to use it, without having a real use case for it.&lt; How condescending. I've over 20 years experience in systems design, encryption and dev. I think I can figure out what BC is and is not for. It's not just for money and it's not just for parties that don't trust each other. There are many applications for BC that simply involve separating the keys from the app , or for identity management. I am simply exploring the option of users storing their keys using BC so that we never have access to them. thanks
If I may ask, could you go into a little more depth on how to do this? A google search didn't give me a lot. (Or a link to an article or something would help).
I think [TcpListener](https://msdn.microsoft.com/en-us/library/system.net.sockets.tcplistener(v=vs.110).aspx) and [TcpClient](https://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient(v=vs.110).aspx) classes might be of interest for you, to start out with. Those links come with some basic examples on how to use them, but there's also a lot of good examples if you Google for "c# tcp tutorial" or such. 
I'll get you an example when next I'm in front of a computer, probably tomorrow. 
&gt;Console.WriteLine(“You are {0}”, age); A better way to write that these days is: Console.WriteLine($“You are {age}”);
TradingView.com offers the best one for JS.
Thanks for the tip :)
&gt; I am simply exploring the option of users storing their keys using BC so that we never have access to them. That you never have access to them? Then, who will store the blockchain? Will you have your users mine the chain? And with what incentive? The reason a blockchain is more than just a Merkle tree is because it includes a nonce and a hash that must be lower than the current difficulty, which is designed such that enough computing power is spent by all parties to create a valid block. Also remember that a blockchain is meant to be public, so the statement that you will "never have access to them" is false. The only benefit I see here is that it preserves the integrity of the data, but that works with a Merkle tree alone. Seriously, I'm not trying to be condescending. You have the expertise. Read about the gory details of how blockchains work. Unless you store the data in an existing blockchain, like Bitcoin, you're building a Rube Goldberg machine that isn't even working towards your goal.
Exactly this.
Thanks!
I personally use [pcap.net](https://github.com/PcapDotNet/Pcap.Net), it is relatively simple and straightforward to both generate and send\\capture packets. All participating devices need to have winpcap driver installed though.
Great, that sounds good. I got it to work with Service Broker Listener for .NET Core but now where do I put my Listener instance. Putting it inside controller file would be wrong. It will generate an instance on every request. What would you suggest?
How many users are you using it for?
I've only used ClickOnce. It worked fine for me and everyone who I distributed my installer to!
There is only a third party architect, no seniors, nothing. This is a small shop, I have to learn and do everything by myself. Luckily, I am able to find most of the things. And I do ask queries on discord or slack so that's how I get help.
No underscore but explicitly made private in code. 
This just looks so bad that it is allocating objects, but not a concrete type. When the appropriate type is then added, it's going to have to allocate more space, so what's the point in tying to preallocate it now? As someone suggested already, can a strut be used. Also can you use a pool of allocations (do you need to the 40000000 now or a small subset now)?
You might check out this simple project on GitHub for an example of what you are trying to do [https://github.com/BrandonPotter/SimpleTCP](https://github.com/BrandonPotter/SimpleTCP). Sending it to multiple clients is kind of a interesting problem and starts to sound like a candidate for WebRTC. You might want to look at WebRTC as a possible solution.
First variant. I pretty much never use `this`, unless I explicitly want to pass a reference to the current instance.
For sure. I'm just using object in the example code rather than some concrete type just to show that it is happening with the most basic of objects, and there's no funny business triggering the issue related to a specific class that people might be unfamiliar with. My actual code is not doing anything close to what is shown here. It's not doing gag-inducing looped generic object allocations, haha If my understanding is correct, swapping to a struct wouldn't change my core question.. as the GC would still likely kick in to look for anything it could clean up before it asked for more memory for all the new structs. Seems like GC activity is just heavily correlated with the system asking for more memory (whether for classes or structs). At least, that's what I've come away with after reading everyone's posts
Definitely the first way. I'm a big fan of allowing people to understand the scope of a variable or member just by looking it.
Why would you want that? 
I see. Do you mean: class MyClass { private object someObject; // &lt;-- making private explicit here public object SomeObject { get }; public MyClass(object someObject) { this.someObject = someObject; } }
Yep. 
The target server has an api that suppose to take care of backup and upload of some filse from the machine to a remote storage. I want the task service to be able to send such a message to all the targets at once event after sacel out without the need to configure another adress into the task server
What kind of load balancer? Different load balancers have different features. That said, there's probably a better way to accomplish what you want. HTTP is not intended for one-to-many communication.
I'm using httpclient for restful backend (dreamfactory)
Why would you want this to be orchestrated rather than running scheduled jobs on each server for backups?
There is a manual trigger for this as well ... Not only scheduled 
Are you referring to the red channel in RGB? Normally those can only be integers, so it's unclear what you mean by "reaches 1". On the other hand, it sounds like you are looking for the modulus operator. `a % b` gets the remainder when `a` is divided by `b`, which seems like what you want. I think.
What would you suggest ? Give that there shuld be both scheduled and manual trigger to tell all servers to start the task at hand .. ? And i dont know who or how many servers they are as they can scale up or down rapidlly .. 
Why cant you bypass the load balancer and hit the servers directly?
Because when the servers are scaled up then ill need to manually register them and same with servers that gow down .. I do not want nor can manage a list of curentlly active servers ..
I tried this now using localhost and it turns out that these classes are working fine. Sending and receiving strings between applications seems to be really easy with those. Thanks for the help!
I prefer these: https://csharpcodingguidelines.com/
I am not sure if http is what I really need since it doesnt seem to be that safe. Do you use an own encryption for sending messages with http?
Thanks mate, clear project!
&gt; What would you suggest ? Use [SignalR](https://docs.microsoft.com/en-us/aspnet/signalr/overview/getting-started/introduction-to-signalr) backed by a Redis cache so that when a request for backup hits a single server, the Controller method uses a SignalR hub connection to the localhost to invoke a Hub method that sends the backup request to all servers connected to that Redis cache. There are both Asp.Net and Asp.Net Core versions of SignalR, and they're similar, but with some differences.
I'm using https, to be precise. Since it is an internal server, I won't get a trusted certificate. I'm using a self signed one. That causes a trust error, so I had to use certificate pinning. That's safe, because I trust only my own certificate. Dreamfactory has built in login mechanisms, as far as I know, it's a combination of basic authentication and OAuth2. It was super easy to set up, I'm using it to access a MySQL Database (from Xamarin Forms Application). For our internal use its good, I think it's also used in real webservers directly accessable from the internet.
This will require to install a pice of code on each target machine to connect to the signalR hub .. In this case i culd just make a scrip that registers the ne server to the main task service insteadnof introducing new components .. Thats an inrltresting tougth .. Thanks .. I would still think that there shuld be some way to make the load balance provide a fan out capability ..
If you're only setting the value in the constructor you can make it readonly
Sorry, this whole thing is worded poorly. I'm trying to recreate the wall color effect in this [http://www.thisemptyroom.com/](http://www.thisemptyroom.com/) but it's turning out to be kind of difficult to regulate the parameters of the color change. If you notice in the example the colors are never too primary so that it hurts to look at, or too dark that it becomes black. I've tried using Mathf.Sin but I can't seem to regulate the colors. So instead I am trying to come up with something that will effect the value in Color(R,G,B), which from what I can tell is a float value between 0 and 1. Please correct me if I am wrong, though. 
&gt; I would still think that there shuld be some way to make the load balance provide a fan out capability .. In my opinion, that would defeat the entire point of a load balancer. I don't want clients to be able to choose to hit all of my servers at once with a request.
HTTP works (usually) on top of TCP, neither are considered safer than the other and the former needs the latter to get its messages across :-) HTTP is a well defined application protocol and TCP is a well defined transport protocol.
I prefer second one. For instance MS suggests avoid using prefixes for field names in [https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members). As for me underscore is some kind of prefix showing private fields. Also it is good to make "someObject" field "private readonly" as suggested and declare scope for MyClass.
Building a .NET MVC web app to help people calculate their [Crypto Taxes](https://www.cryptotrader.tax). Currently porting it over to .Net Core so we can run it on a Kubernetes cluster!
Ok, I think I get it. I have done something like this in the past. Like you, I used sinusoidal waves across rgb values to achieve it. The 3 components were controlled by sinusoidal waves, phase-shifted 120 degrees apart so there's never anything to bright or dark. The output amplitude of each component has to scaled up from 1 to 255 using multiplication of course. Does that make sense.
Depending on your more detailed requirements, zero mq might work well for you: [http://zeromq.org/](http://zeromq.org/)
If you're asking question like your OP on Reddit, your "Third Party Architect" isn't doing their job. Either Management isn't letting them, or your "Third Party Architect" is hoping for job security by keeping everyone in the dark. Either way, It's a problem. Because sooner or later, the TPA is going to go to the wayside, and you'll be up a creek without a paddle. I'd posit the question to management this way: How can we be sure we can keep this design clean in the future if the Third Party Architect isn't mentoring us on how to build to spec? 
That title was painful to read.. 
Although they specifically say "...Internal and private fields are not covered by guidelines"
I prefer the first, Which ever you pick, make your code consistent and use your convention throughout. 
add a "public" for example before "class MyClass" too. Its default is "Internal", a modifier you should use selectively.
I'm using HTTP(S) with C# on a daily basis for work and I think it is actually really easy once you get used to it. Visual Studio comes with some simple project templates for HTTP-APIs, and for the .Net HttpClient class makes HTTP easy to use. For the server you might want to have a look at Microsoft Azure. You can sign up for a free account and there are free offerings for web apps which can host and run your server code without the need to setup, run and maintain a "real" server with hardware, Windows Server OS, IIS and so on. Out there on the internet there are a lot of excellent resources, just have a quick, straight forward google (e.g. "C# client server tutorial"). My personal recommendation is Microsofts own Virtual Academy [https://mva.microsoft.com/](https://mva.microsoft.com/) where there are high quality courses on multiple different topics for free. If you need any more help or directions, just leave a message.
I'm sorry, I'm not that good at this and I don't know what sinusoidal waves are. I ended up finding a solution with if statements and color lerping that is going to take some tweaking but should work out. Thank you though for your help!
If you want help, you need to actually explain your problem. The server you are talking about is behind a load balancer for a reason. You are shaping the answer you will receive by your own understanding of your problem. Let people give you the right advice by putting some effort into your post.
Removed: Rule 3.
I don't need this type of code/solution but it would be nice to post your solution when you have found one, even if it is not the optimum or best one. It allows future search queries with similar problems to have a reference point. When people search "color looper" and and it lands on this page, your solution of " I ended up finding a solution with if statements and color lerping that is going to take some tweaking but should work out. " can be a bit frustrating.
So, I slept on this, now knowing your use case. You MIGHT be slightly better off with approach 2 as I outlined in my other reply, so long as the application is ONLY doing this calculation. I'd suggest profiling both ways. Reasons: - There IS an overhead with starting/killing threads explicitly. - Abort-Restart means you have to wait for the abort and do a new function call. This MAY or MAY NOT be better than the cost of a lock. [Unless your SHA is happening in less than a millisecond, there is no overhead to the static read](http://share.linqpad.net/3d8otj.linq).
“ivars” are usually called fields in C# lingo. 
I always omit default keywords (like private) myself, and have a more relaxed view of public fields. I’m not dealing with binary compatibility, so a public field is as good as a public set-get property with backing field. 
First variant is what Resharper will recommend. Private fields are named "_something". That being said, since a private field should have a scope to a single file, it's not too much of a concern whether you use an underscore on the front or not. You can always change your mind later. Also, always specify "private" vs "public" when declaring. It's less mental effort for other people to read the code.
Why? Classes should be internal if you don’t need them outside the assembly. For single-assembly programs you don’t need to specify class modifiers. 
 $ cd ~/project/folder $ dotnet run If you want to create a self-contained binary: `$ dotnet publish --self-contained --runtime linux-x64`. Look under `bin/Debug/netcoreapp2.1/linux-x64` for the results. I would imagine that you'd have to deploy all the contents of that folder to the target system. 
Will do. Thanks.
&gt; Also, always specify "private" vs "public" when declaring. It's less mental effort for other people to read the code. I hadn't thought about that. Thanks for pointing that out.
Started picking up C# last month as I’m getting into software development for my career path and I just finished a chapter on encapsulation. It makes me happy to understand what you all were talking about regarding the this key keyword. Along with private and public properties, plus how if you don’t name it public prior it automatically is private. Just thought I’d chime in out of excitement lol
It makes it a bit harder to unit test. 
Agreed, they're awesome classes, used them myself to build a local port checker.
100,000 
I'm in the same boat! Hoping someone has a solution.
Create new projects as.Net Standard projects. It is designed to be used with both Core and Framework.
This is it, although it's important that the .net standard project doesn't reference the new asp.net core since the old project will have to also.
I'm a big fan of removing the underscore from the keyboard. I really wish they would require 'this' to access fields. Optional use means that nobody uses it, and I get stuck using underscores. 
I think you need to show some code here. It sounds like the way you have it coded is wrong or else this wouldn't be a concern.
If you find something that does all of that for free let me know, I want to see a Unicorn for the first time in my life.
the servers are behind a load balance because the have APIs that needs scaling in different situations (times of day \\ year etc.. ) There are several maintenance commands I want to issue to all of the API servers at once while other should be routed using regular balancing algorithm. example for commands to Fan-Out: 1. Upload logs to remote storage. 2. Clear Cached configuration 3. Clear Cached data 4. Run a batch\\ script file
What you seem to need is a message queue with a pup/sub system.
First what load balancer do you use? 
I would probably speak to the person that manages the load balancer. There are various algorithms (e.g. round-robin) that determine how the traffic is routed. They might be able to do something different based on the specific URL or a pattern match for that URL. 
Also worth noting that if you have to choose, you want to run on .NET Core since that's where all the development of happening these days.
Azure AD B2C - first 50,000 users and auths free. 
With purchase of Office 365 license at $10/user/month, and extra if you want self-service password reset.
Well, I've been beating my head on this for the better part of the past year. Throw out the idea of a turnkey application security subsystem in .NET Core. Just forget about it completely. It doesn't exist. Now, let's talk about architecture. First step, a secure directory and credential store. You need a database that keeps hashed and salted passwords for your users along with role information. The database should be very secure. Next step, bearer token issuance. JWT is a perfectly good way of implemented bearer token auth. Use basic authentication over SSL to request the token. After that, it's time to make an API. Let the token be included in every request as a header. Let auth be stateless. Let the API validate the token against the secure directory when a request comes in (with a time cache for high frequency optimization). Total cost: $800 dollars (SSL cost) and about 6 months of developer time.
load balancers don't do this. the balance the load. they don't broadcast the load. you need something else. make your http request that gets load balanced. that server then hits some notification bus announcing that there is work to be done. all servers, includinf that one, are subbed to that notification. so they all get the message and do the thing.
Azure and Office 365 are separate products. You don’t need one for the other. You can sign up free for Azure. Further, AD B2C is a different placement than Azure AD https://azure.microsoft.com/en-us/pricing/details/active-directory-b2c/ But I get it - MS rubs some folks the wrong way - you can use AWS Cognito at a similar price structure. https://aws.amazon.com/cognito/pricing/
I've gone through this recently. I'm not a security expert so this may be wrong and I'd hope someone would call that out if it's the case. I have a .NET Core API running on the public internet. It has an authentication endpoint which accepts only POSTS and is served only over https. I'm using [ASP.NET](https://ASP.NET) Identity Core which handles user management quite nicely and simply IMO. Upon successful authentication I'm returning a response to the client that includes a JWT token that has an expiration date out in the future, say 30 days. I read about refresh tokens but they really seemed useless in my case so the JWT's live for 30 days and then the users have to re-auth. All other endpoints in the API are marked with the Authorize attribute which will only allow access if the token is passed in the Authorization header as a Bearer token. I should mention that this is all baked into .NET Core and I didn't have to roll anything of my own or use external servers or services. All free, just time to understand it and configure the various resources in your Startup class. You can also pick up a free ssl cert using let's encrypt. Hope this helps. Cheers!
This would requir evry target to register to a Q
Thnk you all for the insigths... I understand that this is the opposit of balancing the load i belive that adding code to the target machine that do some announcing that it is up and register it with the service is unavoidble .. Thanks !
What version of .NET Core are you using?
If you're not picky about protocol you can try [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/?view=aspnetcore-2.1). It's a nice framework that abstracts 2-way communication that also includes serialization, authorization and easy one-to-many message passing. message passing.
I'm on 2.1 but it was working before I upgraded recently. I think that was 2.0 but I'd have to look back to confirm the previous version.
Keep going my fellow dev. We are excited with you!
That is for server / client communication via a web page. OP needs to co communicate via a TCP packet.
From his post: &gt; (preferably TCP, HTTP (s) is also okay I think) 
HTTPS is TCP over SSL port 443. Still not saying "web page options". SignalR is for dynamic web pages which it does a fantastic job. But that isn't what OP is asking for.
SignalR is not limited to that and we use it in .net desktop applications
All you have to do is add an assembly attribute MakeUnternalsVisibleTo(“MyTestAssmbly”); And your done. That’s not that hard. 
Omitting key words like that simply makes your Brian take longer to reason out what the code is doing. 
Just keep in mind that other languages will have different rules, so it’s always a good idea to use specificity when creating classes/fields/methods and properties. The code you right today will require someone else to read it tomorrow. And that someone else includes your self.
Did you know you can access private fields/methods from a static method in the class? Example: public class PersonMapper { private int _clmId = -1; private PersonMapper(){} public static PersonMapper CreateMapper(IDataReader reader) { var m = new PersonMapper(); m._clmId = reader.GetOrdinal(“Id”); return m; } } 
What the underscore gives you at a glance is scope. Class level fields start with _ while method level variables don’t. Not only do you avoid clashes with internally scopes variables this way you also can determine the variables scope without tracing definitions.
You and me both. I have a MVC 5 application that I would like to migrate fully to [ASP.NET](https://ASP.NET) Core, but unfortunately that is not doable right now so I'm trying to find a way to use the new [ASP.NET](https://ASP.NET) Core alongside the existing application.
There are multiple reasons to use TCP Client, but you could use HTTPClient for HTML communication or anything else that requires strings if that's all you need. That's true. We use TCPclient, and in more tricky situations sockets, for a lot of network service communication. Have used HTMLClients for proxies. You'll need full packet control to build your packet and protocol to work exactly as you need it with as little bytes as possible. Want to build your own VoIP system from scratch? Implement multiplayer network code to a game engine? Create a multiplatform, non-web driven, instant messaging platform for proprietary systems? Need to work with sockets, TCP or UDP. There's nothing wrong with SignalR for a lot of situations. And I totally understand how you misunderstood OP. However SignalR, even in a desktop application, is bringing in web functionality for that purpose and needs wither IIS or Owin to host a web server instance, even if self hosting.
Hi we (Https://decision.tech) are currently running both side by side as our approach to migrate to core. To achieve the two running side by side we have rethought our infrastructure and are routing at a top level using aws application load balancers. We have also got our core code running a proxy to help with other requests so it knows where to point traffic to inside the app. This works for us as we know what our routes are. This is also a nice progressive way for us to migrate functionality over to core, see the effects of the migration, learn and move on
Makes simple communication very easy! :)
That's a nice tool, but I fear you misread OPs question.
There are millions of xamarin debugging nightmares. 
I forgot to also say you can only do this if your existing dependencies support .net standard. If its an external dependency you'll end up with needing to put in seams and new services to abstract the dependency away.
Yes. But you can then write once and read with all your subscribers at once, which is the whole point of pub/sub.
My main point was you should specify the modifier. It gets down to a "do I need optional semi colons in Javascript" type argument, but most all style guides recommend specifying the modifier because then it's explicit. I agree with that notion (and that you should use semi colons in JS). I don't dislike the default. If you're writing a single assembly program chances are you don't care if they're internal or public, although it means if you have tests in another assembly you'll be using InternalsVisibleTo, and then all your test fixtures may or may not need to be public depending on framework too. I'm not anti Internal, it has its place, but the majority of the code I write has public classes and we expose them via interfaces and instantiate them with DI containers. Interfaces are always public of course. We could make the classes internal and use factories to return internal classes that implement the interfaces, but again it gives us little value because if the class has lots of internal (or private) code, it's probably more than a single responsibility. That's dependent on the class rather than a hard rule and has more than one answer depending on the developer. If I were writing an API for distribution externally I would use more internals. It doesn't prevent access, I can still get them through reflection and instantiate them. This is how vendor API's used to be abused to get around artificial restrictions. Essentially it's just two ways of approaching design. There's the new protected internal in 7.x so there's plenty of support and options for controlling how and where your classes are used. For enterprise work, as I said it's all DI, tests and interfaces and the majority of the code is public with private methods where we explicitly don't want to expose something. 
Why do you post this trash?
Https is a pretty much all you need to make secure connection. But be aware that by using tcpclient you use unencrypted connection, so you'll need to add your own layer of security on top of that
&gt; Dinoloop adds syntactic sugar to expressjs enabling C#/Java programmers to easily switch to Nodejs with zero or less learning curve. Zero learning curve is already impossible, but you're claiming it might be less than zero‽
Thanks for your inputs, It was just a typo ;). I would just like to let people know, it is very easy to use.
Move the caches to a separate data store. Set up your logging to always upload to a remote storage without being prompted. Do not run scripts on production- deploy new servers with the new configuration
How does this improve on already existing "webapi" like tools in nodejs ecosystem? Like for example [inversify-express](https://github.com/inversify/inversify-express-utils)? Why would I choose dinoloop instead of above mentioned lib?
Okay, I switched now to System.Timers.Timer. It's definitely working better.. I don't need window-focus for the timer to call my functions and even locking my PC worked. Was already convinced that this fixed it until I tested further.. [Screenshot](https://i.imgur.com/oetUaCT.png) Around 19:30 I started a match of Leauge of Legends while keeping the bot running in the background. I watched the console on my second screen.. It didn't print anything until I clicked on the window.. Then printed 3 "Update.."s in a row before getting three times the same message in my Discord channel. I repeated the same process with another game and even a simpler function (sending just a plain test-message) but the result was the same.. It seems to pile up the functions and execute them at once as soon as the window gets focused.
Two options spring to mind immediately: 1. Define the route for that action with extra parts and put the parameters in there (assuming easily stringable values). For example you might then call your method with the URL: Project.Web/Areas/Area/Controllers/Folder/Controller/Method/Parameter1/Parameter2 This is detailed here: https://www.tutlane.com/tutorial/aspnet-mvc/url-routing-in-asp-net-mvc-example-with-multiple-parameters-query-strings 2) Add your data to the body of the HTTP request from your JS and use the HTTPContext (I think? general principle is right, but might be off on this specific) to get the Request and its body then parse that yourself in the method to get the data. I'm assuming your question was about the solution to use, not about how to do an HTTP request from your JS, but if I'm wrong let me know and I'll try to assist with that too.
 var data = JSON.stringify({ scienceName: $('#studySelect').val(), //string timerMode: timerMode, //int }); $.post({ url: 'Areas/Studies/Controllers/Practice/UpdateController/Update', data: data, success: alert('success!'), error: alert('error'), }) The request doesn't gets to the controller at all. The path is correct.
``` domain/area/controller/method?parameterName1=thisValue&amp;parameterName2=thatValue
That's definitely something to consider too. I didn't try myself on a service yet. I would like to have a simple UI/Log for the bot's settings in the end though. Is that a possibility as a Windows Service? The task-scheduler probably is a bit unpratical if I understand it correctly, considering that the bot needs to be available between the time intervals.
Is static, thanks! My first attempts were garbage-collected..
Thanks for your time, That's a great link you have shared but I guess [inversify-express](https://github.com/inversify/inversify-express-utils) do lack some stuff. 1. They tie you to use inverifyjs framework and DI framework is not pluggable 2. You have to use DI even if you dont like to use it (some community of developers) 3. It is a matter of taste, you dont need to inject request, response everytime in your controller (less keystrokes). 4. I am not sure whether inverify can run parallel with expressjs without polluting express APIs 5. How easy is to set up content-negotiation in inversify-expressjs. 6. Can inversify-expressjs without affecting expressjs endpoints and vice-versa? 7. Does inverisy have start and end middlewares at request level than controller? 8. Does inversify provide exception filters at controller and application level? There are some key issues which still need to addressed. I really like the way [inversify-express](https://github.com/inversify/inversify-express-utils) does but i really see some advantages of dinoloop over it. 
My current project is a Xamarin one. Kill me. 
If your Razor views are clean, I mean most of the logic is in Controllers, you could refactor your code to Clean Architecture + Mediator pattern (MediatR). Then moving to ASP.NET Core shouldn't be a huge task. This is what our company is planning to do. Basically abstract Web part of the code so that Web platform will be easily switchable. This of course means you need to add Dependency Injection to ASP.NET MVC app. I would suggest SimpleInjector. With mediator pattern Controllers can be very simple. They would only send commands with mediator pattern, receive models and command handlers would in separate Core project. More info https://www.dotnetrocks.com/?show=1538 https://docs.microsoft.com/en-us/dotnet/standard/modern-web-apps-azure-architecture/ (PDF) https://github.com/ardalis/CleanArchitecture https://ardalis.com/using-mediatr-in-aspnet-core-apps https://github.com/jbogard/MediatR ASP.NET Core Razor doesn't support helper methods but can use functions instead if your Razor views use them. https://github.com/aspnet/Razor/issues/715#issuecomment-198456302
That's sort of the point of the question, based on peoples experience I'd like to hear what it is I am going and not going to get with these different token servers, etc.
fuck off.
Is nodejs even capable of achieving the same performance benefits that C# has? Looks cool for those making the switch though
Why would someone that knows C# would want to switch to an inferior programming language like javascript?
Removed: Rule 5.
I am not really sure about the performance benefits of Nodejs over C# but Nodejs is really great for microservices where you keep firing http requests. This post is intended for programmers who wants to switch to nodejs from C#. We are not really trying to compete with C#, we love C# &lt;3. Most of dinoloop concepts are from C# WebAPI, 
Thanks for your time, Indeed you are right. Target audience for this post are the ones who wants to learn nodejs as secondary skill to C# :)
Masochism. 
Have seen the problems with expressJs, started working on side project and now open sourced as [Dinoloop](https://github.com/ParallelTask/dinoloop). Dinoloop is an ExpressJs library, completely written in Typescript project designed to build REST APIs. Dinoloop adds syntactic sugar to expressjs enabling C#/Java programmers to easily switch to Nodejs with zero or less learning curve. You can reuse OOP, SOLID principles, Controllers, Services, Well-Proven OOP Design Patterns in Nodejs while developing REST APIs using Dinoloop. Contributors and Pull requests are always welcome &lt;3. Please refer: [https://github.com/ParallelTask/dinoloop](https://github.com/ParallelTask/dinoloop)
how about you remove this ad.
Because I want to celebrate everyone's birthday, even if I hate them
Can I ask how long /how much work it took to develop the framework? I've wondered how big a project something like that is. Did you start from scratch, or did you pattern off existing work?
Thanks for your curiosity question :) It actually took roughly 30 to 45 days. Yes I have started from scratch and it is really a simple library which wires up the API with expressjs. I took some time understanding decorators, have looked at angular/react implementations and other existing API frameworks. Looked at the pros and cons of others and built it.
You'll need attribute routing for that: https://blogs.msdn.microsoft.com/webdev/2013/10/17/attribute-routing-in-asp-net-mvc-5/ Let me know if you have any questions about it.
If you’re using .net core 2.1 you can create an application that can run as both a windows service and a web application.
So, Xamarin is... bad? What should I use instead of Xamarin?
In general, but not always: When someone asks why they should use your stuff rather than something else, they are asking you to do the comparison. They aren't asking you to guess and they aren't asking you to ask them a series of questions.
Take a look at an actual .NET Core microservices project that was posted over on r/dotnet. [https://www.reddit.com/r/dotnet/comments/8w7s1a/net\_core\_microservices\_dshop\_project/](https://www.reddit.com/r/dotnet/comments/8w7s1a/net_core_microservices_dshop_project/)
It is okay if you are willing to spend some time to get into things. I just did a Xamarin Project fory bachelor thesis and it really is alright. If you want to do a cross platform native app and not use Xamarin, check out React Native or Flutter. :)
Your view shouldn't have a reference to its presenter at all. You'd only be doing that if you were using MVVM instead of MVP. Your model can be injected into the presenter as well but that is up to you. If your view needs to communicate with the presenter, it should do it either via databinding or raising events. For example, the button click that calls `ValidateLogin` should actually raise some event that the presenter subscribes to which will call the presenter's `ValidateLogin` method.
We use CryptoLicense. It can be embedded in the DLL/Exe and then obfuscated. Seems to work well and much cheaper than flexera/flexnet or the other one that is just like it.
Why not use routing-controllers, TypeDI, TypeORM and class-validator together with TypeScript. Dinoloop is quite similar to these libraries. So what is the advantage of using Dinoloop versus those libraries? Setting up the stuff I mentioned doesn't take long to set up either.
The load balancer is a "load balancer" for a reason, it is meant to spread the load of incoming requests regardless of the number of actual web servers the balancer represents. You probably are better off using a solution like a pub/sub system (like MassTransit). 
Super helpful! Thank you! Ended up using MapMvcAttributeRoutes and setting a custom route in the controller. Easy Peasy!
Ahh! I was actually in doubt about that so thank you making it clear!
Thanks for this. That helped me find this [SO post](https://stackoverflow.com/questions/42939454/what-is-the-difference-between-net-core-and-net-standard-class-library-project) regarding .NET Standard. A comment from the post: &gt; ASP.NET Core isn't dependent on .NET Core at all, despite the name. It is written as a library that targets .NET Standard, therefore you can use it everywhere you can use .NET Standard. 
I've been working on a project that gives .net core developers some tools to help them (hopefully) simplify stuff like: * No config / super simple task scheduling that just uses your c# code * No config Task queuing (so you can defer sending emails etc. to a queue that's managed in the background for you) * (In progress) Some .Net Core caching extensions to make caching a little bit simpler (.Net Core already has a fantastic caching api, but this would be a tiny bit simpler for general use cases) * (Not started yet) A zero config (to get started) email system (including being able to use razor pages as email templates and easy email sending etc. * And hopefully more... I was inspired by Laravel (php framework) and it's easy of use. These features are inspired by the corresponding Laravel features. Hope to keep hacking away! [https://github.com/jamesmh/coravel](https://github.com/jamesmh/coravel)
What is the UI written in? WPF? WinForms?
Why is nodejs really great for microservices? Any metrics? Or features? 
It's a pretty big combination of things. Basically you need identity management (that could be done with something like Active Directory), then you need an API management tool (lots of vendors out there for that), and then you need some kind of either API Gateway or Proxy. Then based on that you can go way up in price depending on how secure you need it to be once you start looking at needing a WAF or anything else beyond that. Not a single bit of any of this is remotely free.
By reading that, you probably just learned more about how .Net Core works than 90% of the people I work with. Asp.Net Core is the same way.
I think the idea of using Standard is worth exploring. However, I work with a contract developer who is telling me differently. He went to a Microsoft conference recently and they were telling him use .Net Framework or Core, not Standard. He's telling me since we're not building a library and not targeting multiple platforms, using Standard would be overly restrictive. Does that jive with anyone's experience?
Because not every problem has the same solution.
you can use the [Keyboard](https://msdn.microsoft.com/en-us/library/system.windows.input.keyboard.aspx) class get get the current state of any keyboard keys being held down. try accessing that in your ViewModel if (Keyboard.IsKeyDown(Key.LeftCtrl)
Wouldn't that break the mvvm pattern? 
Pro C# 7 covers a lot of useful non language stuff that will help you get a bit of insight into the MS ecosystem, but it's almost 1500 pages and some of the sections I read dragged it out a bit. I swear they could cut it down to under a thousand without losing anything of value. Not on your list: C# in depth 4th edition is a joy to read and covers the language as it evolved which you'll find quite useful as it puts into context a lot of design decisions. I've bought each version since the 1st and still enjoy it. The other one I have no information about. I'll chuck in [Microsoft Developer Essentials](https://visualstudio.microsoft.com/dev-essentials/) which isn't a book, but microsoft's all in one developer resource. You'll get the software, training (3 months of pluralsight (probably, it changes from 0-3-6-3-n) and the MVA) and other stuff for free.
But when a problem has two solutions that achieve the same, just in different ways, but one is vastly superior, why would you choose the worst one.
But when a problem has two solutions that achieve the same, just in different ways, but one is vastly superior, why would you choose the worst one.
But when a problem has two solutions that achieve the same, just in different ways, but one is vastly superior, why would you choose the worst one.
Ionic 4 is about to drop, and it's pretty good, but NativeScript is still pretty solid, or jump on the train and make a PWA (they're pretty great :))
You wouldn't. But the problems don't always have the same solution like I said and if you're working with a team you don't always have the choice of language because of other constraints.
&gt; Not on your list: C# in depth 4th edition is a joy to read I can't seem to find a 4th edition. **[This one](https://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X/)** is the newest I could find.
Yes it would... to be true MVVM you can add another parameter to your viewmodel as a modifier then bind the a new keypress event to that see this [https://stackoverflow.com/questions/23452821/mvvm-light-passing-pressed-key-through-commandparameter](https://stackoverflow.com/questions/23452821/mvvm-light-passing-pressed-key-through-commandparameter) &lt;i:EventTrigger EventName="KeyDown"&gt; &lt;cmd:EventToCommand Command="{Binding Path=ParseCommand}" PassEventArgsToCommand="True"/&gt; &lt;/i:EventTrigger&gt; you may have to deal with whether the control is in focus or not
other options. use Input Bindings with modifiers [https://stackoverflow.com/questions/23316274/inputbindings-work-only-when-focused](https://stackoverflow.com/questions/23316274/inputbindings-work-only-when-focused) &lt;c:FunctionButton Content="Click Me" local:InputBindingBehavior.PropagateInputBindingsToWindow="True"&gt; &lt;c:FunctionButton.InputBindings&gt; &lt;KeyBinding Key="F1" Modifiers="Shift" Command="{Binding FirstCommand}" /&gt; &lt;KeyBinding Key="F2" Modifiers="Shift" Command="{Binding SecondCommand}" /&gt; &lt;/c:FunctionButton.InputBindings&gt; &lt;/c:FunctionButton&gt; and use the &lt;MouseBinding&gt; option
Is this person looking to make money? Looks like he or she is just excited to share something that might be useful to some of y'all. Lots of ridicule in these comments for such a benign post.
I don't think 4th is out - but it's coming soon. But I concur, Jon could describe paint drying to a sold out crowd and they would walk away knowing more than they thought possible about the subject.
Say it is easy to use then rather than trying to make up marketing speak. It takes away you validity when the claims get ridiculous 
In Soviet Russia, C# learns you!
Sorry if I was not able to use words in right order. I have updated as per your advice, please check it and let me know :)
So a learning curve is knowledge over time. A positive curve is one that moves in quadrant I. Is a negative curve in quadrant II or III?
My Mistake, I never went on to talk to people on topics like you have mentioned. Thanks for your valuable advice, I would follow it from now on. Please refer my updated comments for it :)
I've been there. Not touching Xamarin ever again.
how much were you paid to comment that, shill.
Removed: Rule 5.
While I haven't read The C# Player's Guide, I did read Pro C# 7 cover to cover knowing absolutely nothing about C# and .NET. My background was zero formal training and a fairly amateurish understanding of C++. I can't recommend Pro C# 7 enough. I am not content with learning how things are the way they are, but WHY things are the way they are, which I felt this book did a fantastic job of doing. It starts out with the ideas and mindset behind .NET before introducing the syntax of C#. While it does touch on the basics you're trying to avoid, it quickly goes through them and ramps up the teaching and difficulty quickly. I spent a good three or four months studying this book. I walked into it knowing nothing about C# and walked away feeling very confident in that I had at least a basic understanding of .NET and the ability to advance further in my learning. If I had to give some cons of the book, it can be noticeable in areas that it wasn't a complete rewrite of the prior edition. I had a copy of the seventh edition and I noticed where things were awkwardly added and where sections were rearranged but left inconsistent. This was all very minor though. To wrap, for myself and my style of learning my opinion is that there isn't a better way to start learning C# and .NET than Pro C# 7.
Because you can. 
Ah looks like it's not out in paperback stateside until December. It's on [Manning](https://www.manning.com/books/c-sharp-in-depth-fourth-edition). I'd either get the ebook, wait until Dec or skip it. The 3rd is good, but you'll benefit from the newer material.
It's great because you can hire 20 junior js devs fresh out of a shitty bootcamp to start working on your shit instead of taking the time to hire expensive senior devs with actual degrees and experience. 
But … why?
Not everyone is Hemingway. Just sayin'. 
*YOU* may not want to, but it's possible that someone in your company decides its a good idea and pushes it through. Plus, it's good to have a smattering of node. 
At some point, once you've learned the language (or even now), go have a look at the language spec on github. It's all in markdown, all free, and pretty excellent for understanding the language itself.
First one, because that's the coding style that Microsoft's CoreFX uses and it avoid bugs caused by missing "this." https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md 
There’s a decent number of jobs in it. If someone was paying enough I’d happily move to Node.
Microsoft's CoreFX coding style uses first form https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md 
I wouldn't even for double salary. Maintaining my sanity is more important for me.
Was your action method called ‘Employees’ if so, that probably breaks Microsoft’s recommended naming guideline. If you are listing all of your employees on one page you could name the action ‘Index’ then you will get ‘url/employees’!
Yeah, he has a point. ‘Standard’ is more for the ‘standardised’ operating platforms, I.E deploy and run anywhere. 
You wouldn't accept double your salary to become a js dev? Seriously? I would do it for 15% lol
Hahahahaha
I don’t see it as “becoming a js dev” because I don’t consider myself a .NET developer. I’m a software developer, I’ll use whatever tools the problem calls for or I need to for management reasons.
I’m not sure where network latency comes in, that’s a relative constant when comparing C# and C/C++ C/C++ are just as good (if not better) than C# at threading. It’s more work to implement, but the performance of the code is better .NET Core is improving, but C# will never be as fast (generally) as compiled code. That’s just the nature of the beast. I love C#, use it 30+ hours of my week, and use it wherever it’s a good fit (nearly everywhere) ... but where you’re looking for maximum performance (eg when mining cryptocurrencies), it is not the best option.
Yes it is actually. Great to know! Thank you. I’ll run this by the folks that handle user the client facing stuff. 
Best way is probably to just try and build something very different than you have built in the past. When you run into things you don't know how to do, look up those specific things.
A project that has an ASP.NET Core backend with an UWP client should do it. For some of the features, you'll need to write a high performance crypto library or something, they're really specialized. 
You can whip through the C# Player's Guid in like 2-3 weeks to be honest. That is what I did (maybe more like a month) and this summer I have been going through Pro C# 7. I think learning is very iterative. C# player's guid will get you up and running! Then Pro C# 7 will give you more in depth knowledge of the .NET Ecosystem and C# itself.
As a follow up, get on Manning's deal of the day mailing list. I regularly get 50% off coupons, some of which apply to anything they publish!
C# In Depth CLR Through C#
I suggest learning how to use Postsharp. One thing often overlooked is figuring out how to automate your boilerplate. You can inject all of that stuff on-demand and keep it out of the way, minimizing typical mistakes. Some examples of tasks you could automate: * `INotifyPropertyChanged` for MVVM designs. * Logging, especially temporary and detailed loggers for debugging. * Caching * Threading models e.g. Actor pattern - permits multi-threading with synchronous queueing. * Serialization * Inject before/after on methods, properties, classes, interfaces, events, etc...
Quite frankly this looks like bad design with assumption that servers would keep their state for some time. Proper implementation would do this: 1. Logs should be uploaded automatically either at certain periods or directly from the app. There are nuget packages that can forward logs from app to centralized location. Another option is to write files locally and upload them periodically. SumoLogic, ELK, DataDog would be good for that. 2. Usually the amount of configuration information is pretty small. Small local cache that expires quickly should be good enough for this one. 3. Clearing cached data should be done automatically or should be cache-aside pattern should be used. One option is to have shared Redis/Memcached in-memory cache that could be accessed by all hosts. Another option is to expire cache at reasonable time intervals. Managing cache manually is a big pain in the rear end. 4. All hosts should be treated as stateless as much as possible. If there is some batch processing is required then it makes more sense to store data into some shared database/file share/AWS bucket/Azure blob storage and then run process on a different machine than production hosts. 
I have a vague vagueness in vagueing, vaguely. How do I vaguely vague, without vaguely describing anything?
Thanks.
It is not free for full featured use, but Auth0 has been a dream for me and team.
Why not Head First C#?
WinForms
Make sure to download, install and run Xcode to install your Apple signing certificates and provisioning profiles. Here’s some more info: [https://docs.microsoft.com/xamarin/ios/get-started](https://docs.microsoft.com/xamarin/ios/get-started/?WT.mc_id=none-reddit-bramin)
I do not know what "VS4W" refers to. Without going into a ton of detail, provisioning profiles are related to code signing. You should read up on all that nonsense [here](https://pewpewthespells.com/blog/migrating_code_signing.html). You create and download profiles on your apple dev account page. It's the same web page where you create your app IDs and developer certs. Create a profile, download it, double-click it and xcode will put it where the tools can find it.
You can get the pre-order, which to my understanding is a nearly finished version minus 1 chapter thats not finished... plus you get an ebook of the 3rd edition, since I don't think the fourth necessarily overlaps. Haven't read any of them, waiting for a deal, but I definatley think pre-ordering 4 is the way to go since you get 3 anyway
I've been told it's not nearly as great as `Head First Java`, and that other C# books were better.
I'm in Europe, but it's not yet available here either.
VS4W Visual Studio For Windows
I prefer the 3rd edition.
THanks :)
Build something with a framework not an engine
Native. Simple as that
If you're finding the C# path on Pluralsight dull, try skipping to the Intermediate or advanced courses. There is also a knowledge assessment you can do as part of the c# path, if you get a skill level of 300 then you have nothing to learn from the path, but anything lower and it might help you work out gaps in your knowledge and allow you to learn things you don't already know. If you're looking to simply expand to other uses of C#, you could try building a website for one of your games using ASP.NET, or building a desktop updater/launcher for your games using WPF. 
He s asking for help cos his situation s vague. If you cant help fuckoff maybe? As for the OP, I would direct you to getting a copy of C# in a nutshell or go through the C# programming guide on the official docs and see what gaps need filling.
I've been trying to implement it but without any luck. However [this](https://pastebin.com/3wSj1aHw) works, but I'm not sure if it's allowed. If I remove the Presenter from the View, the event will not fire. I am so confused at this point.
* The ecosystem is bigger. Because of the lower barrier to entry and lingering stigma to Microsoft and lacking Microsoft front end JS tooling, that will likely be the case for a long time unless Blazor takes off. * Learning TypeScript is useful anyways. Most modern C# based web applications could use Angular or Vue on the front end and knowing TypeScript makes that less painful for a C# team. * It has bindings for 3D in web applications (things like three.js and directly using WebGL). * In some instances you can reuse code between the server and client. To directly answer your question though...I wouldn't recommend switching, just learn both. I'm not sure if Dinoloop could be useful to do SSR, but maybe that's an option, and maybe it would be a nice middle ground when C# developers are working together with a team of JS devs on a project, or for a C# team when they want to separate the hosting of the front-end from the back-end.
Seriously, getting it all t work on windows is a massive ball ache and it’s buggy as hell. Download visual studio for Mac and do the iOS building on the Mac. It’s just easier all round. 
It works very well on Windows and you're mostly right that it's easier from VS for Mac... But I miss Reshaper... 
Can you help me? I have x knowledge and I'd like to obtain y. How do I get to z? Please answer numerically.
Goddamn redesign. Thanks for letting me know. I'll see about transferring them over.
The simplest thing would be to add a class library project to your solution to hold that code, put the code in the project, and then put a reference to that PROJECT (not the raw DLL file) from your main project. If you've done that and it's not working, make sure that that project is compiling properly.
That's the equivalent of being a lumberjack and your manager is asking you switch from cutting trees with chainsaw to a kitchen fork, sure you can do it eventually but do you enjoy doing it? Does it make your job easier?
yeah, that's an excellent point.
Nope. That's not what he said. Again, if you are only capable of answering extremely specific questions maybe you should STFU and let the others answer instead of being an obnoxious cunt
Upvote for the CLR book. Extremely good coverage of C# but underrated book.
I mean... We can gather that OP is looking for none-beginner material and is able to comfortably make a game. Aside from that, OP is looking for some sort of direction but isn't sure we're to look. Replying to the question shouldn't be hard... You don't need to supply 10 answers or any at all if you think being a smart ass is the best course of action. Not sure if you're having a bad day or what, but you may want to go off the computer, grab a glass of water and get some fresh air. 
Don’t think of this as passing from js to .Net. It doesn’t matter that it’s a mvc controller or not. You’re attempting to make http calls. If your calling a restful api end point, then as others have mentioned use fetch/jquery (I’m not recommending XmlHttpRrquest as differences between browsers). If your calling an mvc route that returns a new page, then @Http.Action tag helper can generate the link for you.
Back in my day we just called it Visual Studio :)
This worked! Thanks. I also had the add the library into the unity folder btw
Lmao.. someone is angry. Did mommy not love you enough. You poor thing. *tear*
That difference is in fact rather insane. 
It's almost as if memory allocation is expensive :)
I for one, am so glad that .NET is starting to have nearly as fast as c++ performance in some areas. It's far nicer to use c# than c++, that's for damn sure.
If C# programmers had to pay a fine for every wasted heap allocation they would all be homeless.
I for one am glad that they are finally closing the gap on C# vs the high performance Java runtimes. Server side Java processing is where C#'s real competition is.
Interesting, I hadn't thought of Java as performant before this comment. Is it, actually?
A ton of R&amp;D has been dumped into making server side Java fast. Microsoft is playing catch up here and it is good that they've decided to start taking this seriously. https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=json
It's too bad the API doesn't always let you prevent the allocations. Want to write an in in little endian format to a allocated-once buffer? Easy, just do the bit math. Want to do the same for decimal? Good luck, all you can do is call Decimal.GetBytes. Ditto for IPAddress and plenty of other types.
JVM is incredibly good in *long running* programs. It outperforms compiled C++ binaries in some cases. However JVM consumes a truckload of memory.
&gt; It outperforms compiled C++ binaries in some cases. In theory this should eventually grow to cover most nontrivial cases as the technology advances. A JIT compiled program should be able to use the runtime conditions and actual runtime performance data to optimize better than a static compiled language is able to.
It's not the allocations, though. All of the string allocations are done in the non-measured setup code; the only test allocations are for the BaselineLineParser class, and switching that to a struct has no performance impact: | Method | Job | Runtime | Mean | Error | StdDev | Allocated | |--------- |----- |-------- |----------:|----------:|----------:|----------:| | Baseline | Clr | Clr | 22.701 ms | 0.5875 ms | 1.7046 ms | 0 B | | Depiecer | Clr | Clr | 11.870 ms | 0.2389 ms | 0.5344 ms | 0 B | | Baseline | Core | Core | 18.915 ms | 0.3840 ms | 0.9346 ms | 0 B | | Depiecer | Core | Core | 8.084 ms | 0.1654 ms | 0.3561 ms | 80 B | Memory allocations *aren't* expensive (quite cheap, in fact). And cleaning up afterwards with GC isn't typically all that expensive either. But to maximize performance, you have to chase every little optimization; memory allocations are one but hardly sufficient. When I call `int.TryParse`, it passes through half a dozen wrappers before reaching a master number parsing function with a wide variety of flags for different parsing modes. When I call `Utf8Parser.TryParse`, it's wrapper layers could be peeled away by JIT time constants, inlined into a direct call to the specific function to parse that format; that function does not have a single flag for different modes, its assembly code was carefully pored over to find any inefficiency, minimizing the code size, making sure the bounds checks could be eliminated, finding and fixing weaknesses in the JIT itself. And the end result of those many small improvements and considerations is a function that, for my purposes, does exactly the same thing more than twice as fast.
How about using a message bus system which where you listen for/ fire a LoggedInEvent and on application start you define what happens if LoggedInEvent is received. Ex.: ``` // Where navigator decides which control is currently shown // And Pages is a Enum/Constant-Class to reduce magic strings eventBus.Subscribe&lt;LoggedInEvent&gt;(e =&gt; navigator.Navigate(Pages.MainPage)); ```
Yes, the JIT compiler is the reason why it can outperform C++. 
Explain to me what Spam&lt;T&gt; does please? Jr Dev here.
It is, I think Java is the language that is zhe closest to C++/C in terms of performance (and compared to others)
There are a handful of languages closer, such as Rust or Pony. Java used to have the best performance out of the managed languages, but C# on .NET quietly passed it a couple years ago for most trivial compute bound calculations (e.g. programming game and similar). Real-world performance is much harder to get a grasp on. The JVM still has some great engineering in it, but C# has some advantages as well that Java doesn't have (like the benefit of reified generics and better value type handling).
I yeah I forgot to mentiom that, out of the high level languages that are self managed. Its obvious that other close to the metal (rust) language are faster xD
That's super interesting. I have seen the open programmer jobs are highest with Java. I attributed that to old school govt./corporate dependencies on Java. I have to say, even knowing that Java might be more performant, I have no desire to learn it.
Nice, I didnt really asked you to learn it and didnt ask why you asked it and I probably dont even care what you do, tho
Let others correct me if I’m misinformed. It’s an abstraction of a continuous sequence in the memory. It allows you to peek into memory without knowing the detail and without any memory allocation. 
Here you go, a 15 minute talk on the topic: [https://channel9.msdn.com/Events/Connect/2017/T125](https://channel9.msdn.com/Events/Connect/2017/T125)
I mean... Yes... And I certainly hope it gets used where applicable in lower level libraries where it makes a difference. I think it's handy for that, and handy for unity. I do agree that it's a great thing for C# in the long term, as it helps us write good lower-level code for performance-critical sections. Maybe I've spent too much time as a .NET wage slave, but it's something I won't get to see much/any use of personally. I just hope that library writers make use when applicable.
Yeah, Head First C# isn't the best like some of the other entries on the list.
Don't see what performance has to do with jobs or wanting to learn it. For 99% of software out there this entire conversation is irrelevant.
Java has a leg-up in salaries because Mobile apps for android are relatively easy to write in most cases, and everyone wants a mobile app, pushing the demand up. I'm actually thankful to Unity (and, to a lesser extent Xamarin) in This regard; It's presence before NetCore was very helpful in ensuring that the language was kept in the limelight while .NET was getting important but somewhat overlooked (in the larger development community) improvements.
Yes and no. The two have traded blows over the years. For instance, .NET does have a lot of great *capabilities* around I/O. The `Begin` `End` async APIs weren't that hard to code around, and the threading model of C# (workers vs IO completion) was especially handy. On the other hand, JVM has had a lot of work put into the VM and it's GC. There are loads that will almost certainly do better under JVM. For instance, the .NET Runtime has the concept of a LOH, the JVM doesn't. Java also looks at Stack and Heap differently. As others have replied, there has been a lot of work in making Java fast on the server. I'll also state, having worked at places that had both Java and .NET applications in place (oh, I should start a blog,) The Java systems certainly *scaled vertically* well. OTOH, the essentially crud reporting JVM system needed *at least* double the cores/memory as our live auction trading .NET application. I'd posit there's a suck curve for writing performant applications in each language, and .NET has an edge earlier on in that suck curve.
So in the gist, which one is the before and which one is the after using sapans? If it's `Baseline Clr` vs `Baseline Core` then a speedup from 21ms to 18ms doesn't seem like much.
[Threading in C#](http://www.albahari.com/threading/) is always suggested reading to any Developer I work with. You may not use all of it, but you'll almost certainly use *some* of it. I think an important question is whether you want to keep your knowledge limited to Unity, or if you want to expand to other things (for example, web services that your Unity App will comunicate with or the Website for your App). If you want to expand out to that level or beyond, I'd suggest learning the MVC/WebAPI frameworks, and possibly getting into learning at least one ORM *and* Micro-ORM. (I have my own preference, but consider learning both so you can develop your own thoughts.) I know, I'm saying to learn frameworks and patterns versus parts of C#. If I had to suggest parts of C# to learn, I'd suggest Expressions and Reflection (in addition to the threading eBook above.) But really... most of the really 'interesting' C# is going to build on those three concepts. LINQ (And the ORMs that use it) are really just expansions on concepts of Expresssions. Reflection is useful (where allowed) for some types of Dynamic Loading, and Serialization, as well as (well thought and limited!) metaprogramming within the limits of C#. Threading is useful just about anywhere, if the need presents.
A lot of microservices are java-based for couple of reasons. * Java runs on linux and windows when c# is windows-only. * Linux VMs are cheaper than windows VMs * Linux got some useful devopsy features much earlier than windows did. Like docker for example. With .net core Java finally has a good competitor on linux.
Speak for yourself, I for one will always prefer C++ to C#, for a number of reasons.
It's not the only reason. Higher level development means it's easier to implement new algorithms, or performance improvements
"Baseline" is the old fashioned naive way, `int.TryParse` on each of the strings in an array. "Depiecer" writes the strings into a byte array and then parses each piece of the byte array with `Utf8Parser.TryParse`. The Clr vs Core comparison is interesting because it shows the impact of "slow" spans (Clr) against "fast" spans (Core)
Aren't you depending on a third party system by moving it into a block chain?
Even before .net core it was not true that c# was windows only. Xamarin worked perfectly fine.
You are correct. However Xamarin was not a Microsoft product and as such had a limited appeal. 
Look at `$ dotnet publish --self-contained --runtime XYZ` where `XYZ` is a run-time identifier (RID). On Linux, that creates an executable binary file under `bin/Debug/netcoreapp2.1/XYZ`. But I have not played around with trying to copy/run the output on another system yet. See the following for a list of RIDs: https://docs.microsoft.com/en-us/dotnet/core/rid-catalog 
I ended up caving finding a way to do exactly what i wanted, and just ended up writing a small powershell script to run the app which i use a bat for.
I love love love that C# is adding features like this. With each passing release, I am less and less inclined to reach for some native alternative. I just used `Span&lt;T&gt;` in my project, and it paid off nicely.
I am a C++ loyalist myself, but each new feature like this that C# adds weakens my resolve.
Has the story changed with .NET Core? It is my understanding that a substantial amount of the runtime was rewritten and/or heavily optimized.
Something I made a bit ago. Because I didn’t find anything I liked to do a similar job. 
I haven't worked enough with .Net Core to have a meaningful opinion. All the benchmark numbers they publish look nice, but there are edge cases both in performance and functionality.
Basically unmanaged pointers without using "unsafe" code.
I quite enjoyed it, but it's basically an intro. It's not going to get too deep, so I guess it depends what you're looking for.
Normally you use `dotnet run` to run your application, or put it in a docker file. Are these not options for your environment?
Your “crazy slow” time is my normal time. 
I feel like every feature C# adds is an attempt to catch up to C++. I use C# professionally but I grew up with C++ and it always pains me when I think of a solution in C++ only to find out that C# has no corresponding feature/ability to do what I want :(
compiled programs do that too, already, via profile guided optimizations. Until Java gives you access to memory layout and simd intrinsics it won't be beating c++ with top level c++ effort. C# however...simd intrinsics are coming and structs, span, etc give you a lot of control over memory layout!
no it isn't, and no it doesn't.
C# beats Java on all but 2 of the benchmark game tests right now, and one is mostly a function of how good the built in regex library is.
Java is more or less the industry standard. Almost everyone who studies CS at a university will learn Java. At least in my area, most of the huge corporations actually use .NET, so there's plenty of work but it might not be terribly interesting.
You could always use another JVM language. I really like Kotlin and for me it now occupies the niche that Python once dominated.
Can you give an example?
Resharper isn’t really worth it anymore now that Roslyn is a thing 
&gt; it always pains me when I think of a solution in C++ only to find out that C# has no corresponding feature/ability to do what I want :( That...doesn't sound like something that would happen often. At all.
Visual Studio on the PC is still just called VS
on osx you can try Rider, which has ReSharper built-in
This highly depends on your location, in Dallas for instance there’s a really high level of demand for .net developers. 
Try NestJS nestjs.com or typestack's routing-controllers https://github.com/typestack/routing-controllers
I like it, I have something similar I use on my projects, it’s. A bit more dynamic. As it aligns with attributes instead of hard coding the “routes”. There’s another version of this that works with value types and arrays instead of just string inputs. I just have to find it. :) [testbench](https://github.com/jcanady20/TestBench)
On a few minutes you can setup your own token server/login page. If I’m remember correctly Asp.net has a couple of bits dealing with two factor Auth as well. Oh yeah here’s the bit I saw about it. [2 factor with SMS](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa?view=aspnetcore-1.1) Now cool, with a bit of work you can setup this up in no time.
6months?!??! I just be a god as it took me less than a day to figure this out...
This is the correct answer...
Senior dev here, I didn’t know either. Don’t feel bad. 
Impressive. I feel like an idiot now.
Yes, it most definitely can. Unless it's immaculate C++, and/or a very short-running program, the JVM will likely beat it. There's benchmarks showing as such, it's not theoretical - it's fact.
Magic strings! Magic strings everywhere!
&gt; [weakens my resolve](https://i.imgur.com/4DixQFC.png)
True but I think we can't target iOS using Rider or am I wrong? 
VS for Mac is not yet as good as VS for Windows for refactoring. ReSharper is still better for code analisys in my opinion. 
What if I was talking about Visual Studio for mac? :)
&gt; Decimal.GetBytes Can't you now do this with Span? ``` // Get a preallocated array somehow. A fast way to do this is stackallock: Span&lt;byte&gt; bytes = stackalloc byte[2]; ```
It's not pretty, but you can use: decimal someDecimal = 12.34M; Span&lt;decimal&gt; decimalSpan = stackalloc decimal[1]; decimalSpan[0] = someDecimal; Span&lt;byte&gt; byteSpan = MemoryMarshal.Cast&lt;decimal, byte&gt;(decimalSpan); Or: decimal someDecimal = 12.34M; Span&lt;decimal&gt; decimalSpan = MemoryMarshal.CreateSpan(ref someDecimal, sizeof(decimal)); Span&lt;byte&gt; byteSpan = MemoryMarshal.Cast&lt;decimal, byte&gt;(decimalSpan);
When someone says, "I for one", they are speaking for themselves.
On first sight I would say you put the spacings on top / right / bottom / left with hard numbers (f.e. 50, 30, 50, 30). When you then chose a different phone with different sizes the image tries to match the spacing leading to your funny resizing Instead try using percent values (if thats possible) like f.e. 30&amp;#37;, 20&amp;#37;, 30&amp;#37;, 20&amp;#37;. :)
Do you have a link? Sounds interesting :)
C++ And C# lover here... only time I've missed a feature from C++ is placement new but even I admit that's a pretty niche case.
Agree. For 99% of the code I write, readability and understanding beats bleeding-edge performance. I'm not writing high speed stock trading apps or game engines, but line of business stuff that will probably be fairly frequently adjusted as needs and requirements change 
Allocations are cheap. On my machine allocating 10 bytes with the GC takes 12 ns mean. Allocations with AllocHGlobal takes 92 ns mean. Still not something I would call a costly operation. What you pay for aren't the allocations; it's copying and constant cache misses.
That helps, thanks. PS: the article would be a lot clearer if that para (and `Basline` is before spans, `Depiecer` has spans) was directly underneath the test results.
How long did it take to implement that? 
I mean you are basically just admitting that Java isn't faster than C++ unless it isn't very good C++. There are isolated benchmarks you can do where the JVM's garbage collector happens to map really well to a problem, such that a C++ program that is faster would be an impractical amount of work, but these are rare cases. Just as a basic example of a JVM limitation - the JIT will not do any autovectorization of floats, and you can't do vectorization by hand either, as Java doesn't expose SIMD intrinsics. Modern cpus can operate on 8 floats or 4 doubles at a time and Java can't leverage that at all. With ints the story isn't much better as the autovectorization is very limited, with a JIT there isn't time, and no, leaving it running a long time doesn't cause it to do better than C++ compilers at it. I've seen many benchmarks where someone claims Java is faster than c++ and every time its a naive c++ implementation. Which isn't an unimportant thing. The JVM is very very good at making a mediocre programmers code a lot faster than it should, and that has value. But it is delusional to walk this earth believing that it is normal or common for Java to have a higher perf ceiling than C++, or Rust. 
[https://benchmarksgame-team.pages.debian.net/benchmarksgame/](https://benchmarksgame-team.pages.debian.net/benchmarksgame/)
Many thanks.
Yes but a 3rd party system that will scale and not cost a fortune. Having to open thousands of accounts on a password manager service would be very costly and leave it totally dependent on that service (and it's survival). Storing keys , even encrypted and hashed locally is never a good idea. Always better to have the keys separate from the data. Blockchain is just one idea and nothing decided yet. Just looking at the pros and cons of using it for something like this.
It allows you to create spam bots which post messages incredibly fast
Try rust, you won't look back ;)
Are these the exact copies of your Goblin class?
I'm pretty sure this is because there's ambiguity in your constructor. Try renaming the constructor parameter to something like `Hp` (or some other variant that isn't like your member names) and see if that helps. FWIW, here are a couple things that might help at a more fundamental level: 1. Just declare `public HP { get; private set; }` to have it publicly accessible but only privately settable. This would probably also clean things up for you. 2. I like to add an underscore before private member variables and make them lower case, make public fields UpperCamelCase, and make local variables and method parameters lowerCamelCase. This avoids local variables accidentally hiding the class variables and also fixes your problem.
Sure - but much of the C++ written *isn't* well written. The JVM can make even pretty mediocre code run fast. There's no question that we'll written C++ runs faster. I'm not contesting that! Especially in the memory department; the JVM exacts a pretty heavy penalty on memory use, and warm-up time. Rust is more promising; it's much harder to write poor code in, and is just as performant as C++ (by virtue of LLVM), especially now that it has SIMD intrinsics (in addition to the LLVM auto-vectorisation).
you may enjoy: https://github.com/jackmott/simdeez 
The code you posted works just fine, are you sure there's nothing you've forgot to include in the post?
Surely this is just dependant upon your application and hardware? Similar to rendering a video that's 10 minutes long and one that's an hour long
I thought stdsimd *was* in stable Rust now? Or am I thinking of the raw intrinsics... Neat library, anyhow! I'll give it a go; thanks :)
 the value of Robin.hp should be 10 right? because that's what I'm trying to assign. The messagebox gives me 0 instead 
I recreated the projected using only the code provided in the post and the message box shows 10, just like it should.
raw intrinsics are in stabe, not stdsimd. 
Warning CS0649 Field 'Goblin.HP' is never assigned to, and will always have its default value 0 
&gt; copying and constant cache misses Which are usually the direct result of unnecessary allocations.
I copied the code again and suddenly the error disappeared... It's like it didnt update my error message. Thanks for the help anyways!
Try close all open documents then clean solution and rebuild
I'm not yet sold on Rust. One day. ;)
Sometimes visual studio intellisense breaks and can report incorrect messages. If you're sure your code should work as is, your first step should be to try and force re-evaluation of the code, i.e. restart VS, reopen the project, or delete a word from the code and add it again.
It's hard to say exactly what the problem was without having been there but I'm glad you got it working!
&gt; In theory this should eventually grow to cover most nontrivial cases as the technology advances. People have been saying this for literally decades, and it's not really coming true. I'd love some counter evidence to read, but people seem to compare only the most naive transformations. For instance, if a C++ program is written all business-logicky and uses `std::string` every place Java is using `java.lang.String`, yes, Java will win. Allocating for every tiny object is heavy in C++, but that is the trivial case. The nontrivial cases are where C++ is allowed to embrace its direct handle over memory layout and use regions and whatnot. Frankly, I just don't see Java ever quite catching up. A well crafted C++ program runs _way_ faster than Java/C#/anything. But I don't say this as doom and gloom for Java/C#. I just think it isn't a point worth advertising; they should focus on the memory safety, productivity, etc. I'm starting to use C# in places I used C++ before because the libraries are extensive and beautiful. Sure, I can accomplish comparable performance with some work, but if I really want blistering speeds, I'm still going to use C++.
It's not. C# beats Java on all but 2 of the benchmark game tests right now, and one is mostly a function of how good the built in regex library is.
Copying is allocation too, isn't it?
&gt; private int HP; &gt; public int hp o_O
Am I weird? I don't think about code when I'm at the beach.
Agreed. Even from PC to android device it can take ages. 
No, you aren't, OP seems to be either weird (nothing wrong with that, unless you do shit wrong) or one of those types of people who do nothing but work, even on breaks
Allocations are almost free with a GC. Now, deallocations...
No I’m the weird one, I like to read on the beach. I usually take a good history book, but I thought I would be more productive this year and read something productive and enjoyable. 
There is a 10 day free trial for pluralsight. Here is a video on using Solr https://www.pluralsight.com/courses/implementing-search-dotnet-applications Another option is to use your database to host the search engine. Here is an example https://www.mikesdotnetting.com/article/298/implementing-sql-server-full-text-search-in-an-asp-net-mvc-web-application-with-entity-framework
[Clean Code by Bob Martin](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_3?ie=UTF8&amp;qid=1531067317&amp;sr=8-3&amp;keywords=clean+code) It's written in Java, but for the most part, it's very transferable to C#. When I was a junior dev transitioning to intermediate, it was pretty worth my while. It's a relatively easy read and doesn't require you to be writing code or sitting at a computer (at least it didn't for me). Feel free though while reading it to critically question some ideas as to how applicable they are in the C#.NET ecosystem, current best practices, and your day-to-day work. (For example, he argues that you shouldn't prefix interfaces with the capital `I`. I still do that though and I find it worthwhile.)
I.e. Don't build your own search, use a search engine that handles a whole lot of detail and language nuances for you.
He’s right. Microsoft still refers to Visual Studio on PC as VS. Source: Microsoft Employee
C#'s Span was based upon D's slices (language feature). So its quite interesting to see what the wider population makes of a lesser version of one of our innovations :)
I usually prefer to read something that's very easy to digest, which is usually language-agnostic by definition. Some of my choices would be *Code Complete 2*, *Mythical Man-Month*, or Joel Spolsky's book.
Tried it. Ran away. C# is still king for me. I recognize the value of Rust, but the syntax is too heavy. Too much control over memory. That's awesome for some cases. But most of the time it is overkill. And i mostly do game dev. 
This is the winner. Clean Architecture was one of my favorite reads. 
U can target any specific platforms with UWP, the PC AAA games don't run on mobile..... Yet And MS store is only the first to distribute UWP, not the only place, it is completely free and open platform. Kodi distributes on their site, Adobe distributes XD on their site. The upcoming MSIX will make it easier to distribute UWP from anywhere including Enterprise.
&lt;a target="_blank" href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=mp_s_a_1_1?ie=UTF8&amp;amp;qid=1531071008&amp;amp;sr=8-1&amp;amp;pi=AC_SX236_SY340_FMwebp_QL65&amp;amp;keywords=refactoring&amp;_encoding=UTF8&amp;tag=10c63-20&amp;linkCode=ur2&amp;linkId=d5e143cee88b89382decd5a3f951a871&amp;camp=1789&amp;creative=9325"&gt;Refactoring book&lt;/a&gt;&lt;img src="//ir-na.amazon-adsystem.com/e/ir?t=10c63-20&amp;l=ur2&amp;o=1" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /&gt; I love reading this one on my vacation. Helps to take a different look at a code you've written in the past.
C++ requires more ceremony to achieve the same effect, but it can and does. I love regions. I can acquire many objects from the region, and then freeing them all is a simple `_count = 0;`. When I'm truly done with the entire subsystem, then I can `free(region);`. I weep for anyone who, to this day, opts to use `malloc` (or `new` with the standard allocator) for each and every object they need.
https://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258 Good for an intermediate read. 
[removed]
Not the best way of learning. Like do not write your own diploma work, use existing one.
I thought gamedev is one of the industries requiring high performance and control over memory and resources.. There's a reason huge AAA titles use c++ ;) Whatever works best for u. C# is still an amazing language.
Learning about what search engines do by working with an existing one is likely to teach more about the problem domain of search than fumbling through the dark. Once you know the problem domain, then code it. 
"build a search" is really vague. Brute force would be to create a view in the database that concatenates some useful string fields together and then does a "LIKE" query on it. For small quantities of data, this is enough. After that you get into database full-text search or products like Lucene / ElasticSearch.
Using existing one and examine existing one are two different things
Naming conventions could help here. - Method parameters like `public Goblin(int HP)` should be camel-case, e.g. `(int hp)`. - Class properties like `public int hp { get { ... } }` should be Pascal-case, e.g. `public int Hp`. - Private fields should start with an underscore, e.g. `private int _hp;`. In this particular case, you (probably) don't need a private field at all as you could just use auto-props and define your class property as `public int Hp { get; }` and then set the value in the constructor (by saying `Hp = hp;`. I'd also, from a style standpoint, argue that `Hp` is a bad name and `HitPoints` would be better.
I'm guessing he's using Unity game engine which is indeed written in C++ and has a C# scripting layer to allow users of that engine to develop games faster. You lose some performance but Unity engineers are constantly working on improving the code that gets compiled from C#.
C# in Depth is still an essential read.
I don't want to distribute the application at all. It's an internal application that only runs inside the building. 
I read mythical man-month on a family vacation on Malta, so I can agree to that one. 
Yes, Enterprise deployment is part of the new format. You can build a UWP, only target a certain type of form factor and input, for example PC and keyboard/mouse, then deploy it withing ur building using MSIX. There's no restrictions on type of layout u want either, Edge, OneNote, Adobe XD, Groove are all UWP that look completely different from each other. MS store isn't involved in any of that process. This is a really good vid to watch. https://m.youtube.com/watch?v=FKCX4Rzfysk
That will work **really** great with large data sets! Go for it! What can go wrong to first retrieve a million rows, just to filter out 99 % of them?
Install a google custom search and let them index it. You can easily build a test search with nothing more than a "LIKE" in a sql query, but if you want something that returns "what you want" instead of "what you typed", you're off in a whole different world.
Is it work if you enjoy what you are doing or learning?
It is when you get payed for it, thats what work is
Haha yea, as I made the post and went to the bathroom I realized what I typed up. But thanks for being a jack ass about it.
Concurrency in c# Cookbook, by Steven Cleary. Currently on my third read-through. Great both on the conseptual level, and with small code samples, so it works great on the beach away from computer. 
If i'm on the beach i'm celebrating life without caring about technology or work. Fuck that noise
Take a look at this : https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/ They lay out a few optimizations they've done on the core libraries thanks to Span&lt;T&gt;, and they're all about very basic stuff like string comparison. All of this adds up to a lot of perf gains on .NET Core, and that's one of the reasons why it is so fast now. All of these performance stuff isn't made for "basic" developers like you and me. They come from requests from the ASP.NET team what wants to build the fastest web platform possible, and everything that makes ASP.NET faster is a big win for everybody.
Allocations can imply copying, but you can easily avoid allocations without avoiding copying (e.g. pooled buffers) 
I concur.
I really enjoyed Illusions by Richard Bach. It's only like a hundred pages so you can read more or less the entire thing in one trip. It's good because it's deep and thoughtful while still having a good story to follow. Perfect for the beach, I read all the way through it on the beaches of Barcelona and loved it.
I agree
In certain situations this isn't a bad idea, but that's mostly limited to small tables that get frequently queried with costly overhead on each request. Typically you'll want to stick to traditional filtering in the query itself.
I sense your sarcasm but coming php background not sure how else one would do it other than a for each loop.
Thanks for sharing this one. I was looking for something like this as well.
Thinking about code is kind of my brains screensaver ... 
Are you talking about “searching” said database and displaying the results? Is this search based on all columns or do you want it narrowed down? 
Honestly I don't understand how someone can realize what is going to happen (filter in memory) and still ask if this is the right way to do it.
In general you should always let the database handle as much of the filtering etc as you can. In practice you'll often times want to observe user behavior first. Take a product comparison site as an example. The user is very much likely to keep changing filters so you might as well provide all of the products in that category within reason and handle the filtering client side. Same for edge cases like academic research databases. If the bit amount of data is constrained but the computation done upon it large then in a multi user environment it's always better to transfer as much of the data thats likely needed as you can.
I need to display all the data contained in a row.
I also don’t want my users to be able to type raw sql into the application.
So your search will be based off the primary key/column? Is this a GUI application or console? You’ll just have to do a Select * from “TableName” Where “PrimaryColumn” = @search_string Then perform a query against it and add the parameter @search_string that the user inputs. Again I’m not sure what database you’re using or he answers to my initial questions. I can send you example code or point you in the right direction at least.
Because I don't have enough practical experience to know which would cause more of performance hit, constantly reaching for the DB or holding something in memory. My current degree that I am still in school for, teaches me the foundational things, but I have no real measure of knowledge yet of other real world variables like data coming over the wire or being constantly pass back between different layers/servers/etc I don't understand how some one could go through life thinking others can't make mistakes.
&gt; cts in that category within reason and handle the filtering client side. Same for edge cases like academic research databases. If the bit amount of data is constrained but the computation done upon it large then Hey thanks for the reply that makes sense. I just have to think about it more thoroughly then.
Maybe you’re in the wrong field. I love programming and software engineering and learning new patterns, strategies, or deep insight into languages is interesting and something I like to do in my free time. I’d assume its the same for doctors, physicists, mathematicians who read scientific papers in their free time. If you aren’t interested in the field and can’t see the point in reading about it during your free time you might just be in it for the money. Either way I’d say you are the weird one, not the OP. 
I’ve been holding off on buying it since the new edition is only a few months away but it’s killing me!!!
Umm... thanks for sharing?
* Dependency Injection in .NET * Writing High-Performance .NET Code * C# In Depth by Jon Skeet
I love reading at the beach
I read and programmed when I was 12, not for work. Is that considered work now that I now get paid for it? I enjoy it. If you don't like it, fine, but other people can enjoy their work.
Your original post doesn't mention you are going to cache the result. As you have described it it appears that you would be querying the data every time anyway. If you add a caching layer it is perfectly OK to pull some tables in memory. Here are some hints which tables you can cache this way - tables which are hard coded by the dev or do not change very often. - tables with less than 5000 rows - tables where rows do not contain a lot of data for example images or long text Examples for such tables - a list of countries - these don't change very often and are usually put in the DB by the dev and not by users or admins. The data is in each row is usually small and there are about 200 rows - a list of languages - similar to countries - a list of categories You can cache for a small amount of time like 2 minutes. With such tables you can often get away with not invalidating the data in cache because even if you add new entry you are fine waiting 2 minutes until you see the new data. Data that is submitted by your regular users and tends to grow a lot is not a good candidate for this type of full table caching. Examples include user comments, orders, etc. These can still be cached but the strategy would be much different
I do enjoy it, but whether I enjoy it or not doesn’t change what it is, if you enjoy your work, great, if not, it’s still your job and somehow it needs to get done
I read this one before I really understood async/await/concurrency in C#. I highly recommend people do NOT read this if you're beginning to learn how this stuff works. It's much more of a reference manual and only if you like how Stephen Cleary writes (I don't).
The Pragmatic Programmer by Andrew Hunt &amp; David Thomas. Very conceptual, with some brilliant themes.
No problem. Anytime
Give a person a job they love and they never have to work again.
Because he has used this there is no ambiguity. 
Ah, that did cross my mind, thanks. For my own sanity I've never let a parameter and a field have the same name, so I wasn't sure, haha.
How do I learn more about this kind of stuff? Should I be reading the C# language books, the specification...?
Ah, right. I've gotten things all confused as I regularly use both the stable and nightly compilers haha. Thanks for the correction.
get the new edition on MEAP it's like 80% done
Sounds like you don't have much of a life.
Until they get worn down by continually changing technology and bad management decisions. 
Way to bum me out!
I designed a system a couple years ago where there were two tables that got 250000000 records added to each every day. If anyone tried to query all and then filter it in memory, the system doing the query would crash every time. (No I didn't like doing it with huge tables either but I wasn't given any choice.)
Worth noting that Fowler is finally issuing a second edition of this to be released sometime later this year.
I do both. Designing code and Ui is really relaxing. It also takes me a couple of days to completely stop thinking about code.
I was going to say "Clean Architecture" as well. Not coding-intensive, but really helps to lay the groundwork and provide a mindset for maintainable code.
http://mattwarren.org/2018/01/22/Resources-for-Learning-about-.NET-Internals/ is a good starting point for learning the basics. If you want to learn tricks to shave off every last cycle possible... then the source I've learned the most from is the coreclr github issues, but unfortunately not well organized for that kind of consumption. /u/ben_a_adams coreclr issues &amp; pull requests in particular have been a gold mine for me over the past couple days.
Came here to say this. I can't recommend it enough.
&gt; continually changing technology Maybe I'm just old but....ugh....so much this. When I was first learning, everything was so amazing and interesting. Now I'm like, 'ugh, not again' 
Just because he doesn't do it at the beach doesn't mean he doesn't do it in his non-beaching free time.
I can't think of much now (I'm actually on holiday so programming is out off my head at this point haha) but the obvious one is stuff to do with generic programming, so variadic templates and type constraints (real constraints, not the weak and incomplete c# ones). Inheriting static classes is another that comes to mind, C# doesn't allow it for some bizarre reason.
You clearly have never used both languages then. I'd really suggest broadening your knowledge of other languages, it will give you different tools and views for solving problems that you won't get from learning a single language. Things that I can remember that aren't possible in C# but are in C++: * variadic templates * preprocessor stuff * static class inheritance * destructing/deallocating objects when you want them to (TL;DR: GC is not your friend) There are a few more that I can't think right now. Long story short, open your mind to other languages and ways of solving problems.
That's why you need to use stored procedures.
You must be fun at ~~parties~~the beach
Require is too strong a word. It depends on the case. If you're careful about memory allocation you can code any game, for desktop specially (for consoles it is C++ only unfortunately), in C#. The productivity gains in using C# far outperforms it's GC troubles. You just have to avoid allocating memory inside the game loop, optimizing your allocations as much as possible. These days C# GC is really efficient. And you can adjust GC behavior to some point. Btw, i don't use Unity but my own custom engine. That said, i'm always open for alternate languages. No problem. In fact i really like trying new languages.
&gt; variadic templates I learned on C++ and used to love it, but have since forgotten a lot. Never heard of variadic templates, but a quick glance at [this](https://msdn.microsoft.com/en-us/library/dn439779.aspx) has me a little confused about how it works. It seems like you can pass in an arbitrary number of varying types to a function template... but I'm not clear on how the method does anything meaningful with the values. The example at the bottom does some recursion to print all of the arguments, but I'm not familiar with the ... syntax. I don't think the argument really needs to be that one language is better than the other. Both clearly have their strong suits and purposes in life. It's always good to have a few different kinds of screwdrivers in the toolbox. 
Oh. History. Combine both? "The Soul of a New Machine" by Tracy Kidder is awesome.
So one of the biggest hurdles to becoming a senior developer is burnout. You go through stages where you're all in, all the time, and that's necessary to build a certain level of skill, but I think work-life balance is really important for longevity. Maybe instead of reading something directly about programming, read something tangentially related, but that still lets you step away from it a bit. Zen and the Art of Motorcycle Maintenance is a classic, and can be applied to loads of different types of technology, one of which is troubleshooting code and other complex systems. 
I believe that VSCode has switched to using InnoSetup. I think Git for Windows may as well. Don't have any sources, but seem to recall reading that the VSCode team was doing that.
&gt; doctors, physicists, mathematicians who read scientific papers in their free time difference there is that those professions do something that matter 
I actually am one of the few that uses C# in both career and in hobby and they don't mix. My job is stressful but what it burns me out on is project management and user stories. Programming is a deep seeded passion in me. Which is funny... I started in 3d modeling and went to school for art. Now I don't draw jack, haven't in years... But o deeply love studying practicing programming.
I get this. I think about programming when I space out. That or flying toasters.
This is almost r/iamvery material
I read the whole thing in about a week on vacation. Very good book.
No, you are a normal human being that does things besides your job/possible hobby. I spend my weekends biking and taking pictures. 
This one so for is the most full answer on when you should keep data in memory!
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 100.0% out of the 5 submissions from /u/UnitedHeron1 appear to be for Udemy affiliate links. Don't let spam take over Reddit! Throw it out! *Bee bop*
DOWNVOTE SPAMMERS
I was chilling here waiting for the 'no_underscore_but_this.object_squad. I guess it is all clear. Over and out!
Hey, I do these things too
You did not define the rows. Put this after columndefinition &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Width="Auto" /&gt; &lt;RowDefinition Width="Auto" /&gt; &lt;!-- the rest of the rowdefinition --&gt; &lt;/Grid.RowDefinitions&gt;
Damm I tried to put in RowDefinition but with &lt;RowDefinition Height="1*" /&gt; But this worked :-) One small issue, I have some of my lines that are multiline notes where i use &lt;Editor&gt; to edit them. With the Auto RowDefinition, they are quite high as it is now, any way to make them smaller? Perhaps even to auto size based on content of the fields?
Thank you very much.
Nice! 
Not in games, but Fintech has been happily replacing C++ servers by Java ones. They are one of the reasons why Oracle is so interested on the ongoing work to improve Java's story regarding value types and vector data layouts.
Slices in programming languages is older than D, there are lots of examples if you bother to research 70 and 80's languages.
This.
Here are my two cents (not only for beach mode): 1 - Short and pretty good: [Concurrency in C# Cookbook](https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569/) 2 - Long but also awesome:[Writing High-Performance .NET Code](https://www.amazon.com/Writing-High-Performance-NET-Code-Watson/dp/0990583430/) 3 - Another very good one that can deepen your knowledge: [CLR via C#](https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454/) I can't resist: I don't get all these people bashing OP because he asked for books while he's at the beach. Why do you care? I mean, it's not like he's forcing you to ask. Ppl these days always have to say something negative, gez. 
Everything else beside, you can't "call" a field. You can access a field, either reading from it or writing to it.
Yes, it is. You're still a worker and you're using your time to make money for somebody else. The rest is just ideology and sugar coating.
You can specify a fixed value as well. &lt;RowDefinition Height="50" /&gt;
There is such a thing as work-life balance. I used to think like you, but then I discovered that there is more to life than coding. This mind-set isn't a negative; there is nothing wrong with being a well-rounded individual, and it doesn't mean that people like that aren't great software engineers. The company I work for actively encourages it because it leads to happier developers who are loyal to the company in addition to loving their work.
Since when did I say I didn’t have work life balance? I used to not and got chronic migraines because of it so trust me, I definitely had to make adjustments to have more balance. I don’t know why I’m getting the downvote brigade but don’t care - the top reply was trying to call the OP weird for asking for fucking book suggestions in a fucking programming subreddit. Shit like this pisses me off. Just because he wants to read a god damn book on a beach doesn’t mean that he has no work life balance or is weird. 
But why though? For saying it’s ok to enjoy reading any book about whatever you want on the beach without being called weird?
Not a c# read but the devops handbook is a really good read when on vacation. Its was much easier for me to read while on vacation and away from home than a technical book. 
Right. So why under that the OP is weird just because he wants to read at the beach?
If your looking for an open source project you can modify go with oxyplot. I have uses it for the exact items you listed above. Just be prepared to spend a bit of time learning it and going through the source code to figure things out a bit. It works in xamarin fairly well also.
Hello. I just want to ask if there will be possibility to watch the record of the stream later. 
While this is a great practice project, I would reconsider writing a repository abstraction layer around Entity Framework for any serious project. You should definitely read this article: https://www.thereformedprogrammer.net/is-the-repository-pattern-useful-with-entity-framework-core/
Sorry if I caused offense 
I will look into that. Thanks for the tip.
It will be up there on the same link while the course is going on (\~2 weeks).
&gt; Downvoted into oblivion in a CSharp subreddit for saying it’s OK to read books about programming at the beach and it doesn’t make you a weirdo. You made the claim that if you don't do that, you're in the wrong field. 
Why AngularJS instead of Angular(2+)?
I'll leave it up to you to figure it out bruh 😉
It is Angular 6 to be precise but the Angular team doesn't seem to highlight versions anymore. 
I haven't written any Rust code, but I was looking around the ecosystem trying to figure out how I could structure a production-ready web server and easily host it, (i.e. which crates, servers, and tools to use) and I'm left with the impression that choosing a framework is kind of risky and that tooling / monitoring, hosting, configuring, deployment, web sockets, load balancing, logging, and similar concerns are things that are either fragmented or I would need to figure out on my own. I want to try it, but when I think about how much of a headache it would be to actually run a service in it...I kind of gave up on that idea. In [ASP.NET](https://ASP.NET) Core, all of those concerns are a cohesive and well documented package which works well as a starting point and which I know will have upgrade paths and a large user base. If I pick a Rust framework and cobble together a bunch of other crates to make a web service, my chance of those tools working together and all being updated for the next couple years is unknowable.
Can I tell you about this new JavaScript library?
The Name of the Wind. The main character does some c# coding in chapter 3 (no, I lie, but it's a great read and would be better than a c# book).
The defacto way since the break was that "AngularJS" refers to 1, and "Angular" refers to 2+.
Good bot
Yeah it’s correct on our site and course catalog, just got my wires crossed. Good looking out.
&gt;Writing High-Performance .NET Code Obligatory what would you recommend for a beginner on that topic? :)
Try Visual Studio Code. Extremely simplified version of VS that has some limited functionality but a vastly easier to use interface (esp if you're just coding for unity scripts)
There’s never a better time to lower the intimidation factor than now. Start learning! I find xamarin studio convoluted and non simplistic but it’s been a few years since I’ve had to touch it. 
They are similar languages both in syntax and runtime architecture largely targeted at the same use cases.
Similar syntax. Similar OOP principles. Both are prominent in the professional world
"Two wrongs don't make a right" sigh
The fact that Microsoft made it to replace their usage of Java.
As well as other answers: In the original version of dotnet they included Java.NET. It was seen as a direct move against Java. That said, MS released VS.NET which included Winforms, C#, VB.NET and Java.NET (I can't remember if C++ for CLR was in there too). Possibly ASP.NET, can't remember if that was actually in VS.NET or came a bit later. I mention Winforms because Java did not do GUIs well, so there was an immediate differentiator. For ages there was a server/client side divide between Java and .NET. VB.NET was a weird one too. It was mostly created as a way to lure VB6 developers over. There were even some tools from MS at the time to convert *shudder* VB6 to VB.NET. It was also the best way of using Office because it supported optional parameters and C# at the time did not (You'd have to see the Office API to know why that's a PITA). 
I like visual studio very much, but I second this. If you're overwhelmed by VS then try vs code with unity. I already tried it out about six months ago and it was fine and it seems to be developing fast.
Oh yeah! I know about Studio Code! The thing is that the software is installed on multiple computers so getting it to work with Unity (AKA downloading and installing the multiple required Extensions and extra SDKs) doesn't sound like fun :P. But i will use it if there is no other choice tho! Code was an amazing move.
In my view, nothing. C# has better syntax and more features. Possibly Java has more libraries but it’s hard to count.
I believe the newest update made VSCode mobile so its entirely possible that you may be able to just throw it on a USB with all the extensions and just bring it from place to place. As long as the heavy hitting required stuff is in your path it should work right?
Beware sql injection with that... best to pass a parameter into an sp... just to clarify that.
mmm i'm afraid i'm not really up to date in the updates of VSCode since i don't really use it. Will google that up tho! Thanks!
That's what I was implying, but as the question is pretty vague I didn't elaborate. SqlCommand cmd; cmd = new SqlCommand(sql,cnn); cmd.Parameters.Add("@Search", SqlDbType.VarChar).Value = search_string
Ha, yeah, remember J#? 
I haven't played much with shared configuration files but it's my understanding that you can create config file on a share drive. (ui and settings changes) and then lock it to prevent local overrides. This should allow you to create a reference file, there is even a command prompt to load the settings file. https://thomasardal.com/the-ultimate-guide-to-share-visual-studio-settings-within-a-team-or-organization/
While they were designed by the same person the real reason they are "competitors" is that they are both framework languages meaning that the code you write does not target hardware but instead runs on an intermediate runtime environment (in java it's the virtual machine for .net it's the clr). With .net core ms has come a lot closer to "write code for any hardware" were in the past that was java's perview and ms s more "works with any Windows". 
That is pretty much *just* the thing i needed!! Thank you! Will try those out!
The book is so good! The big problem is that it spoils your 'book taste' and it is hard to find anything close in terms of style to read later on.
&gt; they were designed by the same person Can you cite some sources on that?
The direct answer is they're trying to target largely the same application spaces. Microsoft initially fired shots directly at Java with C#. For example, ASP .NET is used for exactly the same thing Java was trying to do with Servlets and NetBeans or whatever they were called then. In initial C# releases, one of Microsoft's example C# applications was a port of one of Java's C# applications with loud claims that C# was many multiples faster and better with system resources. On the desktop, it was an easier comparison: Windows Forms makes apps that look and feel more natural than Java apps. MS pushed really hard that C#'s interop with Windows API made it perfect for that. At the time, few people *really* cared about cross-platform desktop apps. Even today, I see very few people choose Java for that reason. I've always wondered if there's not a historical reason, though obviously MS has invested a lot in C# for more reasons than competing with Java. MS is one of the victims on the list of "people who Sun/Oracle have sued for trying to promote or use Java". I was a little young when it was going on, but as best as I've been able to sort out (I have no idea how wrong this is): * MS had a lot of great programming tools in the mid-to-late 90s. Lots of people still miss the weird amalgam of apps that more or less made up Visual Studio 6. But they didn't really go out of their way to make Windows a friendly place for Java. In particular, I remember Netscape was way better at running Applets than IE ever was. Sun sued MS and asserted they were intentionally making it difficult for Java to interoperate with Windows, particularly because MS didn't distribute a JVM with Windows. * MS wrote their own implementation of a Java Virtual Machine. This was as far as I remember allowed at the time, just not the kind of undertaking many people had the resources to do. The MSVM was better at some things than the JVM. Sun sued them for responding to "make Java work better" by writing their own proprietary implementation of Java. Sun won this round. * MS wrote their own spec for a runtime environment that interpreted bytecode, just like Java. They took particular care to make the spec open and allow anyone to implement it, just like Java did before suing MS for doing it. They also made an open spec for the C# language, very similar to Java but different. This spec was also open for others to implement. There was also a J# language but I can't tell if they were sued or if, in the end, no one cared. So basically: MS got sued for not having a JVM, then got sued for implementing a JVM, so it's *possible* they only created .NET to try and kill Java. Sun went on to be eaten by Oracle, who went on to sue Google and many others for using Java. Meanwhile, no one's been sued for using .NET.
Few things on RestSharp Serialization and Deserialization. 1. Create your own custom serializer that works with RestSharp by implementing ISerializer and IDeserializer 2. Set the Serializer on the RestRequest object using 'JsonSerializer' property then do 'AddJsonBody' 3. Use 'AddHandler' to Deserialize the response for content type Application/Json
I saw some examples of #1, they were probably outdated. I thought of #2 but didn't actually try it. If I encounter issues de-serializing, I will probably do the same sort thing using NewtonSoft. 
VS.NET 2002 did ship with Java.NET (called J#) and C++ for CLR (called Managed C++; eventually replaced by C++/CLI, which in turn has mostly been superseded by C++/CX and eventually C++/WinRT). ASP.NET isn't a language; the original ASP let you use VBScript (and JScript?), whereas ASP.NET just lets you use any .NET language and is typically written in C# or VB.NET.
`public class DefaultJsonSerializer : ISerializer, IDeserializer` `{` `private string dateFormatString;` `public DefaultJsonSerializer() : this(new JsonSerializerSettings())` `{` `}` `public DefaultJsonSerializer(JsonSerializerSettings serializerSettings)` `{` `SerializerSettings = serializerSettings;` `DateFormat = serializerSettings.DateFormatString;` `}` `/// &lt;summary&gt;` `/// Serializer Settings` `/// &lt;/summary&gt;` `public JsonSerializerSettings SerializerSettings { get; set; }` `/// &lt;summary&gt;` `/// Serializes the Json using` [`Json.Net`](https://Json.Net) `///` `/// &lt;/summary&gt;` `/// &lt;param name="obj"&gt;Object to serialize into Json&lt;/param&gt;` `/// &lt;returns&gt;Json String&lt;/returns&gt;` `public string Serialize(object obj)` `{` `//Make sure we are always using the correct date format string when serializing.` `if (!string.IsNullOrEmpty(DateFormat))` `{` `SerializerSettings.DateFormatString = DateFormat;` `}` `return JsonConvert.SerializeObject(obj, SerializerSettings);` `}` `public string RootElement { get; set; }` `public string Namespace { get; set; }` `/// &lt;summary&gt;` `/// Date Format` `/// &lt;/summary&gt;` `public string DateFormat` `{` `get =&gt; dateFormatString;` `set` `{` `if (string.IsNullOrEmpty(value))` `{` `// throw new Exception("Date format can't be null/empty.");` `return;` `}` `dateFormatString = value;` `SerializerSettings.DateFormatString = value;` `}` `}` `public string ContentType` `{` `get =&gt; "Application/Json"` `set { }` `}` `/// &lt;summary&gt;` `/// Deserialize the JSON String into object of type T` `/// &lt;/summary&gt;` `/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;` `/// &lt;param name="response"&gt;Rest Response&lt;/param&gt;` `/// &lt;returns&gt;Object of typye T&lt;/returns&gt;` `public T Deserialize&lt;T&gt;(IRestResponse response)` `{` `T responseModel = JsonConvert.DeserializeObject&lt;T&gt;(response.Content, SerializerSettings);` `return responseModel;` `}`
Then on the RestClient class you create you can do this: public void SetHandlers(bool useCamelCase) { var xmlSerializer = new DefaultXmlSerializer(); var jsonSerializer = new DefaultJsonSerializer(); if (useCamelCase) { jsonSerializer.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); } ClearHandlers(); AddHandler(MimeType.Application.Json, jsonSerializer); AddHandler(MimeType.Text.Json, jsonSerializer); AddHandler(MimeType.Application.Xml, xmlSerializer); AddHandler(MimeType.Text.Xml, xmlSerializer); //The Serializer isn't important, this allows us to accept all Content-Types. AddHandler("*/*", jsonSerializer); }
To add some clarity: - As said, implement `[ISerializer](https://github.com/restsharp/RestSharp/blob/develop/RestSharp/Serializers/JsonSerializer.cs)` and `[IDeserializer](https://github.com/restsharp/RestSharp/blob/develop/RestSharp/Deserializers/JsonDeserializer.cs)`. Those examples are good. - The only thing I have to add on Point 2 is that technically you can still use `AddBody` IF the request type has been set to JSON before calling `AddBody`. You'll still need to set the JsonSerializer BEFORE the property is set. I like to have a helper factory for this sort of thing if this is not a one-off sort of thing. - For clarity, the `AddHandler` should be used on the `RestClient` before the request is executed. Also, it's worth noting that [a number of different content types should be registered with the custom deserializer unless you are certain of the content-type being returned by the other side](https://github.com/restsharp/RestSharp/blob/b52b9be2467003e79d63f55d17f8ee2a74febe54/RestSharp/RestClient.cs#L60-L68). Definitely should be in some sort of helper method if using more than once.
 public class RequestFactory { /// &lt;summary&gt; /// Creates a Request. /// &lt;/summary&gt; /// &lt;param name="dataFormat"&gt;Request Body Format: JSON or XML&lt;/param&gt; /// &lt;param name="url"&gt;URL&lt;/param&gt; /// &lt;param name="method"&gt;HTTP Method&lt;/param&gt; /// &lt;param name="requestBody"&gt;Request Body&lt;/param&gt; /// &lt;returns&gt;Response&lt;/returns&gt; public static IRestRequest CreateRequest(DataFormat dataFormat, string url, Method method, object requestBody = null) { var request = new RestRequest(url, method) { RequestFormat = dataFormat, JsonSerializer = new DefaultJsonSerializer(), XmlSerializer = new DefaultXmlSerializer() }; if (requestBody != null) { request.AddBody(requestBody); } return request; }
thanks this helps and makes a lot of sense
thanks these little tips are helpfull 
&gt;If you cant see the point in reading about programming during your free time you might just be in it for the money. How is this not true OR offensive? If you aren't personally interested in it, then you're probably doing it for the money. It doesn't make that person a bad programmer or a bad person. 
I was just trying things out after I read about encapsulation. It will never happen again lol
Looks like a comprehensive solution for someone who is unable to avoid using the serializer that is included with RestClient. 
I haven't seen anyone else reference it, but prior to .NET, Microsoft created J++ and their own JVM, which deviated from standard Java. Sun Microsoft was the creator of Java, and this pissed off their CEO Scott McNeally to no end. I swear he spent more time bashing Microsoft than running his own company. Sun filed a lawsuit against Microsoft and won. Part of the DOJ's findings was Microsoft's internal use of the phrase "embrace, extend, extinguish" [1]. As part of the ruling, Microsoft was forced to remove J++ from Visual Studio 6.0. This, along with Microsoft's hostility toward open source, cemented the Silicon Valley vs. Microsoft feud. Java vs. C# was just part of that overall feud. Since Microsoft couldn't develop their own proprietary JVM, then switched tactics and created C# / .NET, which was aimed at the same sectors than Java targeted - primarily the enterprise market. Back then, it was harder to target different databases. The programming tools &lt;=&gt; database server relationship was more hard wired. You could do it, but you had to jump through more hoops. MS Sequel Server was one of Microsoft's cash cows, so this was a move to protect that part of their business. [1] https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish
\&gt; Private fields should start with an underscore No, fields \*can\* start with underscore if you want. This is ok: private int hp; 
I made a quick guide a while ago to simplifying the visual studio layout a lot: [https://jackmott.github.io/programming/tools/editor/ide/visual/studio/2016/07/11/decruft-visual-studio.html](https://jackmott.github.io/programming/tools/editor/ide/visual/studio/2016/07/11/decruft-visual-studio.html) This isn't an extension but it is probably the best you can do. Alternatively you could use VSCode
Quickonce works fine but only for the most basic needs. You have to have everything managed by msbuild to copy / create what will be in the installer package, so it's quickly limited. You can't also run scripts during the install process. Squirrel is much more powerful. 
All of the types in that list. [It's worded a bit clearer in the spec](https://github.com/dotnet/csharplang/blob/master/spec/unsafe-code.md#pointer-types)
Yeah, I mixed the techs in with the languages because that's how we viewed it back then. Everything was new! A collection of new languages, any of which you could use with all the new techs. 
So vaguely :) I'm pretty sure there was some legal kafuffle between Sun and MS about it too, but can't remember the details. I even got the year wrong, I could have sworn it was 2001, but I was at the wrong company that year. I remember us stood around the single boxed copy we just received in awe :)
The original version of .NET had J#- I don't think it was ever called Java.NET except unofficially. Even the Beta called it J#. It's reason for existing as I understand was largely to provide a suitable upgrade patch for J++ developers. Due to the Sun lawsuit, J++ basically had to be killed. J# provided a way for J++ developers to migrate their existing Java/WFC Applications to .NET. &gt;VB.NET was a weird one too. It was mostly created as a way to lure VB6 developers over. Kind of a failed attempt since VB.NET is so wholly different from Visual Basic "Classic", Considering Visual Basic had traditionally been backwards compatible moreso than not this was a sticking point. Many VB6 developers- myself included- decided it wasn't worth trying to deal with VB6 mental baggage and opted to just learn C#. A lot of others completely jumped ship from MS technologies altogether. VB.NET is more like Visual Basic "done over"- it removes a lot of the old cruft (gosub...return, on error, etc) and cleans it up a lot. It has historically had one or two features C# didn't. Exception filters were one such feature for a long time, as I recall.
Types that are external to the .NET runtime, I think. https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.unmanagedtype(v=vs.110).aspx https://docs.microsoft.com/en-us/dotnet/framework/security/secure-coding-guidelines-for-unmanaged-code
&gt; \&lt;RowDefinition Height="10*" /&gt; -- this is 10% of the parent view height I don't believe that's true. To my understanding, in this example, it makes no difference if you use * or 2* or 10*. However, in this example, it does: &lt;RowDefinition Height="50*" /&gt; // this now takes 5/6 of the available space &lt;RowDefinition Height="10*" /&gt; // this takes the remaining 1/6
Anyone know how performance is on framework as opposed to core? Mono/Xamarin support or timeline?
Unmanaged means types which are not tracked by the GC and can not contain GC-tracked references. For example, the following struct **is unmanaged** because it only contains other unmanaged types: struct S { public readonly int I; public readonly float F; public readonly bool B; } However, this next struct **is not unmanaged** because it contains a reference to a `string`; and strings are always created on the GC-managed heap: struct S { public readonly int I; public readonly float F; public readonly bool B; public readonly string S; }
Sorry, can't find a source. I'm not really correct anyways. I believe the original c# team had former java team members but the lead creators are different people.
Ah yes, that sounds familiar :) I spent a week or two (Can't remember exactly) at Microsoft's offices working through their VB6 to VB.Net migration process and tools. Our end conclusion to bring back to the business was "Just learn C# otherwise people will keep thinking in VB6 terms and screw themselves". 
It was good (VB.NET) for Office stuff early on. All the Office API's had signatures like CreateCell(optional a, optional b, optional c, optional d, optional e, optional f, optionial g, optional h) VB.Net could do the optional so coulld call CreateCell(b=1) (I forget the syntax honestly), where as in C# you ended up with CreateCell(Missing, 1, Missing, Missing, Missing, Missing, Missing, Missing, Missing, Missing, Missing,) Thank god we got optional parameters :) 
(Some of this will seem wrong, and I'd love a correction, but this is my experience.) Xamarin, ScrollView, and multi-line Editor fields do not work well together. It's in the documentation, but not super clear: &gt; Note ScrollViews should not be nested. In addition, ScrollViews should not be nested with other controls that provide scrolling, like ListView and WebView. ([Source](https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/layouts/scroll-view)) Editor has a ScrollView inside of it to facilitate multi-line editing. Every time I've ever put one inside a ScrollView, things go haywire. I have a feeling if I looked at the Xamarin innards, what they're doing is more complex than "just a native control". The best way to go about what you're doing is to adopt a multi-page approach. Instead of displaying multi-line editors, display labels with the current value of the field that, when tapped, take the user to a new page that has JUST the Editor on it. Let them edit the field, then come back. Part of the problem is how layout works in Xamarin. I'll be very brief: When a ScrollView lays out its children, it has to call each one's `Measure()` function. The purpose is to sort of say: &gt; If I give you this much width and height, how much of it would you like to take? Since ScrollView can scroll in one or more directions, it always tells its children they have infinite space in at least one direction. That interacts REALLY weirdly with a control that's set to grow in the same direction. Think about how that might be implemented. If there are 100 vertical pixels, it wants 100. If there are 200, it wants 200. So if it's told it has infinity pixels, well, it asks for infinity pixels. That causes weird things to happen when things want to grow in a scroll direction. The Grid has to ask the Editors how big they want to be, but a row height of 1\* implies "filling available remaining space". Since you start with infinity, there's still infinity remaining after filling remaining space. If you REALLY want the Editors there, you're going to have to commit to more fixed heights. That's safer. But I advise against it, because scrolling is janky when you have a scrollable element inside a scrollable element.
&gt; &lt;RowDefinition Height="10*" /&gt; -- this is 10% of the parent view height This part is only sometimes correct. The true definition of star sizing is something like this: &gt; After sizing non-star rows, divide the remaining space among star-sized rows proportional to the values provided. So if there's only one star-sized row, it doesn't matter what number you use. It uses "all available space after sizing the other rows". It's when there are two or more rows that it all starts to get interesting. Let's say you have 10\* and 1\*. The 10\* row will be 10 times taller than the 1\* row. If they are the only two rows, then it's the 1\* row that is 10% of the Page. More complex, what if we have 8\*, 6*, and 2\*? Well, the page would be divided into 24ths (the LCM) and: * The 8\* row would be 33% of the screen's height (8 / 24). * The 6\* row would be 25% of the screen's height (6 / 24). * The 2\* row would be 8.3% of the screen's height (2 / 24).
No no please no nonononono 
Haha! I guess no one will make you use it... 
&gt; not really correct anyways Completely wrong. 
Until you stumble on it across some legacy code C: Thats an imho, but i really feel those default methods in Java just durty and completly out of space when you have inheritance exactly for the same Job :) 
I actually agree with you btw. I'm really not sure why we need this, when an abstract base class does the same thing. An interface should be just that. I sometimes think that C# is basically 'finished' and new stuff just gets added because it can be. 
Yeah... as we all know abstract base class and an interface are the same things...
It is not only de facto it is also official way.
Why are so many so opposed to this? It works just fine in Java, and quite often I write abstract classes simply because I can't fit something in the interface, or the interface requires a ton of boiler-plate to implement. And the only argument anyone ever gives about it is "I don't think interfaces should be like that because it historically hasn't been like that". It's more or less "I don't like it therefore no one should use it". This has been discussed to death on the C# language GitHub.
 People don't believe interfaces should include implementation. It's just a contract. That's why most people are opposed to it. It's changing how we define interfaces, it's not just a "it didn't do it before so it shouldn't now", C# developers are one of the most used to change, it's making interfaces into something that's not an interface. The idea behind an interface is that I don't care how you do your contract, just that you do. Your interfaces are now state-full, and can even define how your contract should work (why can you declare private functions now?). What about things like mocks? If you start adding functionality to default interfaces that are supposed to be DI'd, you can no longer mock that interface for it to return what you expect, it's already a default implementation.
Well, an abstract base class is different from an Interface because you can add some logic to it. Sorta like a default interface method... 
This is what the stackexchange.redis client is updating to, IIRC. 
So if a struct is made up only of structs and value types then I can point to it? Also, is there a better way to deal with something you wish was implemented as a class instead of a struct than to use unsafe code and pointers? I'm having to deal with a feature that was implemented really badly in Unity, at least from my perspective.
 You can't implement multiple abstract classes, is the thing. You can with interfaces, which is one of the reasons this is useful.
What if we just had *one* abstract type that allowed default implementation *and* multiple inheritance?
Based off your objections, would requiring default implementations to be virtual so that they can overridden make them more palatable? It was my understanding that that was the case, but I might be wrong. For the record, they should be. I think you guys that are against it are crazy since this sounds crazy powerful, but that would probably be the thing that would make me agree with you.
No way
Just launched my service [https://www.api2pdf.com](https://www.api2pdf.com) to make the experience of converting html, urls, and office docs less miserable. The web app portal is built in .net core and I really love how fast it is. The actual PDF engines run on AWS Lambda though.
Deja vu... &gt; I don't like Extension methods because blah blah blah....
&gt; Why are so many so opposed to this? I need re-review the state of the feature on github, but ISTR that it allowed for non-virtual members in interfaces, which is the sort of thing that can cause headaches. In particular, it's the sort of thing that will break a lot of your mocks and stubs if/when it's done wrong (and it *will* be done wrong). There is also a sense that this is possibly coming at the expense of the shapes and extension anywhere features, which seem like they might be better fits from the standpoint of typical development.
Also because you can have only one base class. Of course you can make a change to the language to allow multiple inheritance. I'll leave it as a homework to find out the remaining difference between multiple inheritance with abstract classes and interfaces with default methods.
&gt; So if a struct is made up only of structs and value types then I can point to it? If a struct can be allocated on the stack in a finite and unchanging region of memory, then you can point to it. &gt;Also, is there a better way to deal with something you wish was implemented as a class instead of a struct than to use unsafe code and pointers? Write a wrapper class? Write extension methods? It really depends on what you're trying to do with it. For most things, a struct just acts like a class with only fields.
Types that are not handled by the framework's capabilities (like GC, array size check, try/catch...etc) for example array declared by "fixed" statements or variables having "Unmanaged" attribute
In case anyone is searching this post later on I wanted to post a link to a number of beginner projects with solutions. I cannot remember where I found this but it appears very useful. [https://github.com/karan/Projects](https://github.com/karan/Projects)
That’s correct. Marc Gravell [blogged about it](https://blog.marcgravell.com/2018/07/pipe-dreams-part-1.html?m=1). 
I'm curious whether this package (plus the new Span&lt;T&gt;) fixes the problem where you can artificially run out of memory, because the buffer the network driver is writing to got pinned in place and the GC couldn't relocate it.
I'll give you the long story, since I'm not sure what someone more experienced than me would do. Unity has a really nice system for creating terrain with a few design choices I don't really like. Specifically, the tree system. Trees are represented as an array of TreeInstance structs (which just contain some data about the tree). Adding trees is done through a specific AddTreeInstance method on the Terrain object containing this array. Yes, this is an array and not a list, and using this method seems to resize the array to fit the new tree. Why the hell they used an array and not a list is completely beyond me. There's also no method to remove a tree. I can only expect that it's because I am not supposed to be able to remove and add trees the way I want to. Too bad for the developers, I'm going to do it anyway. My terrain is divided into hexagons a la Civ V, and each hexagon either has or doesn't have trees. If it does have trees, it has a bunch of them, and each hex needs to know which trees belong to it. Thusly, when placing hexes, I need to make a list of each tree in each hex. Already, I need to keep track of these things in multiple places. Furthermore, because they're structs, I have to keep all of those copies in memory multiple times. They're only about 512 bits each, and even writing thousands of them multiple times isn't a huge deal, but there's another problem: Since they're structs and not classes, I don't really have a way of telling exactly where in the array each tree is. I COULD just store the index of the tree in the main array in the hex, but this would get complicated when removing trees, as each time I removed a tree, I'd have to go through each index in the hexagons and update the indeces. Unless using unsafe code can really, really mess up my day, I really think that using pointers is my best bet.
This is the correct answer. Unmanaged types come from places like COM, C DLLs, and the Windows kernel.
I haven't read the latest releases of C# In Depth by Jon Skeet but I'm willing to bet it covers async/await in a beginner friendly fashion. It's a topic that takes a lot of hand holding, back and forth, and explanations before you can fully understand it.
No, this is different. Extension methods were just static methods at the end of the day. This is backdooring a half-complete version of.multiple inheritance.
If they want multiple inheritance they should do it right. And they way you talk about abstract classes sounds like you share the common Java developer fear of them. I swear, four out of five Java devs treat abstract classes like shut on their kitchen floor.
The whole purpose of this feature is to encourage and facilitate bloated interfaces that grow with every version. Features whose primary use case is bad API design are necessarily suspect.
Then add real MI instead of this.
well, I found this article... looks like I'm going to have to start a new project, copy and paste, and configure [https://docs.microsoft.com/en-us/aspnet/core/migration/proper-to-2x/?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/migration/proper-to-2x/?view=aspnetcore-2.1)
C# 7 adds `ref` returns and `ref` locals, which are effectively managed pointers. I don’t know if that’s helpful, though, since Unity is often far behind on language version.
Delphi and C# had one designer in common. C# and Java not so much.
I tend to just write new applications and use my forwarder/reverse proxy to map different url prefixes to different apps.
I think lots of people misinterpret the word *contract* and *interface*. Both are truly *conceptional* terms - their *technical* implementation can differ from language to language and from technology to technology! A poco can of course have the role of an *interface* - I don't need the C# language component called "interface" to express that. It only depends on my needs, the use case and of course the *philosophy* behind the team or project. In dynamic typed languages there isn't often any specific language construct to express a contract! It only depends on the - somehow documented - *behaviour* and less on the *shape* of a component. And yes you can achieve good results in those languages too. So people should really realize that it only depends on their own abilities to use language features in a proper way. You won't automatically get worse code by this new C# 8 feature - and with less powerfull features you don't automatically get better code! It only depends on the programmers capabilities. So don't fear features, embrace their possibilities! Better fear too low communication and knowledge transfer with other devs.
Is this an issue with heap compacting? I doubt changes to this package will fix that - moving to 64 bit is probably a safer option.
As mentioned else where, this isn’t new behavior that can’t be done today with using extension methods against the interface. Testing will be a challenge for these types as you won’t be able to instantiate an instance of the interface directly in order to test your implementation of default behavior. You’ll have to create something that implements the interface, potentially changing the behavior of the default implementation. There’s no indication that there is default behavior. The proposal as I understand it is that an existing interface could be changed aka adding a method, and default behavior could be added that if the implementations didn’t change they would not be affected. Implementing a new object from the interface would not contain the default behavior and would be an empty method. Meaning anyone behind your change would have different meaning to the default implementation. How drastic that could be is a wide margin of error. If I’m implementing an external interface via nugget and they make a change to an interface, I would honestly like to know about the change as soon as possible instead of quietly proceeding as if nothing was of issue. The longer that takes to manifest itself the hard those changes can be.
Something like Eiffel, C++ and Dart....
This is one of those features that feels like a terrible idea, but I haven't really played around with it enough to know for sure.
What group at Google is doing C# development?
C# is my preferred language to interview in.
Just go over "cracking the code interview" book
I must admit you took interesting, concise approach I didn't see before. However, as someone already mentioned, if I were you, I'd put more effort to utilize C#'s static typing capabilities and get rid of those magic strings. Your framework looks nicely suited for rolling small apps and I believe that static typing could bring many benefits for bigger apps. I've published some time ago project solving the same problem of boilerplate code in command line apps - [https://github.com/ninjah187/Jarilo](https://github.com/ninjah187/Jarilo). I've added `async/await` support in 1.1.0 which is basically used in production already but it's still in beta version due to my recent lack of time for writing tests and docs. Hope you'll grasp some ideas :).
Though I typically welcome new features, I’m one of the devs in the “no” camp on this one. Tacking this extra syntax on interfaces feels like a half-assed stand-in for actual traits (aka “shapes”), which [have their own proposal](https://github.com/dotnet/csharplang/issues/164). Furthermore, regardless of whether or not it *should* be this way, many devs regard interfaces as contracts. Because of this, I don’t feel like the conflation of contracts and trait-like behavior should exist under the umbrella “interface”. This is a big enough language addition that it deserves its own concept.
Okay here is I am gonna do. I will write a bunch of words you will google and learn more about them. Dynamic array, linked list, deque/queue, cyclic buffer queue, heap, heap sort, hash table, binary search tree, balanced binary search tree: AVL, Red-Black tree. These are the basics. I doubt they will ask anything beyond this.
“Suck curve” is now permanently in my mental model of how to communicate... so many things. Thanks!
Bazinga
So `public abstract class` is now going to be renamed `public interface`? Got it. /s
But should probably do in this case, so you can write public Goblin (int hp) { _hp = hp; } instead of public Goblin (int hp) { this.hp = hp; } It really helps preventing mixing up parameters and private fields.
once you're over the 100k record mark DB is a given for me *especially* if your table isn't normalized. Honestly I'd almost always let the DB do what it's designed to do.
This doesn't deserve the downvotes. You can interview at Google in your preferred language (I have, using C#).
[Cracking the Coding Interview](https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=mp_s_a_1_1?ie=UTF8&amp;qid=1531222469&amp;sr=8-1&amp;pi=AC_SX236_SY340_FMwebp_QL65&amp;keywords=cracking+the+coding+interview). See also [this Steve Yegge blog post](https://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html).
He's getting downvoted because he said his preferred language is C#. Can't have that in a C# sub-reddit!
What happens (happened..) is when you make an asynchronous socket request (the I/O Completion Port kind), the buffer gets handed to the network driver to fill. This means it has to be pinned - the memory address has to be fixed for the duration of the call. So the GC can't do a compaction - it will stop at the first pinned object it finds. So over time the memory does become fragmented, and the free pointer keeps moving higher and higher, and eventually you get an out of memory error. In the past, to prevent this, you would allocate your socket buffers at program startup so they're low in the heap. And never free them or allocate new ones - you'd just reuse them over and over (create your own pool of them).
So comparing only with Java, otherwise this would be too lengthy. C# has direct support for SIMD, value types and low level unsafe programming, including some ways of doing manual memory management. It also handles dynamic types and has meta-programming via expression trees. It has language support for events instead of the Java Bean patterns, and there are a couple of ways of using lambdas. Initially there were only event handlers, then anonymous delegates and finally proper lambdas were introduced. There are several ways to generate native code from .NET (NGEN, JIT PGO Cache, .NET Native, CoreRT, Xamarin with Mono AOT, IL2CPP from Unity). Extension methods are more flexible than what default interface methods allow for. Given the way generics work in .NET you might also get some differences from what you are expecting, given the support for value types and the latest improvements on 7.3. The language has syntactic sugar for writing generators, no need to write iterators by hand. As of recently it is also possible to nest methods like in Pascal line of programming. It allows for default parameters and named ones as well. Also given one of the language main designers it is better to think of C# as a merge of Java with Delphi. Just a very basic overview of some differences.
Slypenslyde has the long and short of it. I'll add *passionate tribalism* to the list. Some people use C# or Java to get the job done, others are on "Team C#" or "Team Java" and start a monkey poo-throwing fight if they meet anyone from a rival team. I've also seen this in the Angular vs React debates that crop up from time to time. 
You can read 'Algorithms' by Robert Sedgewick. Samples are in Java but you can convert them to C# easily. Also try to solve as many problems as you can at [leetcode](https://leetcode.com/) 
I was aiming for small-medium apps with it. I'll probably write 100 small apps for everyone that would need something bigger than this. And I'm still working on the second half of the API for accessing the results. I want to do something more dynamic with that part, and am looking for the best way to do it. That said, I don't think the first part has a true magic string problem. Magic strings are a problem when they are in user-land causing them to get an unexpected result. Hence the name. Look at DateTime.ToString() and String.Format(). I literally just separate the flags with commas. And while I definitely see the value of attribute tagging a custom class. And that was my other option, when I was deciding how to make it. This is still mostly for personal use and small apps. So I didn't want to trade a pound of boilerplate for a pound of configuration.
repost 20 days https://www.reddit.com/r/csharp/comments/8sd6gk/default_interface_methods_in_c_8/
You can do a lot of customization of VS but its tedious. You used to be able to drag and drop things when in Tools|Customize mode. Once customize, you can export the settings and re-import them on other machines.
.Net Framework has a slower version of `Span&lt;T&gt;` than .Net Core, so the performance should be worse there, [but not by much](http://adamsitnik.com/Span/#slow-vs-fast-span). And avoiding allocations and copying should help a lot on any framework. And [the System.IO.Pipelines package has a .Net Standard 1.3 version ](https://www.fuget.org/packages/System.IO.Pipelines/4.5.0/lib/netstandard1.3/System.IO.Pipelines.dll/System.IO.Pipelines), so I think it should work on Mono.
I don't know. In Hack I use generic traits all the time in Hack to compose objects. Default interface implementations are the closest thing I'll get to that in C#.
It does, if you set it up for that. `Pipe&lt;T&gt;` uses a `MemoryPool&lt;T&gt;` to allocate memory. The default one uses normal managed arrays, so I think it's still going to have issues with pinning. But you can use a custom one `MemoryPool&lt;T&gt;`, for example something like [this experimental `NativeMemoryPool&lt;T&gt;`](https://github.com/dotnet/corefxlab/blob/7639b2b/src/System.Buffers.Experimental/System/Buffers/Native/NativeMemoryPool.cs).
I highly recommend skimming the recent features in the roadmap. This will help make sure you are aware and familiar with recent developments. https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/
thank you!
thanks, I will look through it
Personally I'm not a fan of this whatsoever. Defining contract vs implementation should be separate. This muddies the waters. Especially for new developers learning these concepts.
Google don't tend to ask you questions about libraries, they expect you to know how to select an appropriate algorithm, how to implement it, and how to identify edge cases. What language you implement the algorithm in doesn't matter, so long as they can understand your code, and read your handwriting. They also won't ask you to just implement an algorithm, they'll ask you a question which you could solve using a set of algorithms and you'll have to figure out how to solve it. You aren't likely to get a question asking you to implement a max heap for example, but you might get asked how you would select the largest k item in an list of integers, which you could solve using a max heap, but you could equally use a partial quick sort to solve the question. Google are usually more interested in how you come to an answer than the actual answer, practice talking through your thought process: * A naive approach would be to do X but that would probably take too long for sufficiently large data sets. * Is that okay, are the data sets ever going to be that big? * We can use the principle of "Divide and Conquer" to break this down into smaller problems. * I could use X but that's got Y time complexity. * Does how much space I use matter? Because Z solves this but it would have a huge memory foot print. * I could parallelise this across multiple machines. You will be asked how you could improve your solution when you think it's done, so maybe be ready for that, avoid premature optimisations and have an ace up your sleeve. Be conscious of the time you spend, if you solve the problem too quickly your interviewer might start asking really hard questions, if you take too much time then you won't solve it. **Source:** I've reached the final stage interviewing at Google twice. **Caveat:** I've never actually been hired by Google (Although they've asked me back again and I've said no)
The biggest improvement in C# over both Java and C++ is properties. They are extremely simple concept but improve code readability more than every other feature. For game development value types should make a big difference and they are not present in Java and work differently from structs in C++ although they are declared with the same keyword.
&gt; C# has direct support for SIMD Eh, not really. The compiler may use it, and there may be framework support, but there are no C# constructs exposing this in any way I am aware of. &gt; Initially there were only event handlers, then anonymous delegates and finally proper lambdas were introduced. Initially there was delegates, which is just a fancy word for a function pointer (possibly with an associated "this"). Events are just an access control mechanism for delegates. I don't think there is such a thing as a "proper lambda", and if there is, anonymous delegates would qualify as well. It's just that the lambda syntax is more terse, can convert into expression trees, is optimized more aggressively and can infer more automatically, compared to the older syntax. 
There is a separate proposal for that. I forget what it was called, but it was far more comprehensive. 
[System.Numerics namespace ](https://docs.microsoft.com/en-us/dotnet/api/system.numerics?view=netframework-4.7.2) &gt; This namespace includes the following types: &gt;... &gt; The SIMD-enabled vector types, which include Vector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane, and Quaternion.
&gt; The whole purpose of this feature is to encourage and facilitate bloated interfaces that grow with every version. Maybe it encourages you to do that personally? Abstract classes already support bloating classes with new members, and this is what everyone says you should defer to if interfaces doesn't fit the bill. &gt; Features whose primary use case is bad API design are necessarily suspect. It isn't though, this is a complete misrepresentation of the feature. The motivation is to remove something that today can be a migration *blocker*.
OP, is this an initial phone interview, or an on-site? I’m assuming it’s the phone interview. I just did one, and I’m going to an on-site next week. My interviewer asked me explicitly to implement a data structure with one classic function. That one was obviously to be implemented by me from scratch. He then asked me to solve a somewhat harder problem, which was similar to challenges you’d find on hacker rank. For that problem, I used a couple of the standard library data structures, and called their methods. It was obvious on the second problem that he was not looking for me to “roll my own”. He’s already seen that, and also it would take way to much time. But if it wasn’t obvious, I would have simply asked. Asking clarifying questions is very important, and will also make your life easier. If you haven’t already, I recommend asking about a coaching session. I found that helped very much with nerves. They will discuss things like this question. 
It is only a migration blocker if you are expanding the original scope of an abstract interface instead of creating a new interface (or extension method/interface pair). Yes, it does take a little upfront planning to decide if something should be an abstract interface or abstract class. But it is rather clear that this feature is primarily aimed at people who are an unreasonable aversion to abstract classes and wish to expose everything as an "interface". (The fact that interfaces are now going to be half-broken abstract classes not withstanding.)
&gt; &gt; &gt; Defining contract vs implementation should be separate. I strongly disagree with that statement, but I still maintain this is a bad feature.
/u/Eirenarch mentioned properties already, their usefulness cannot be overstated, they provide encapsulation and basically replaces the whole getter/setter system, just a big tip, use the shortcut: Type "prop" then press tab twice.
These resources might help: * https://swizec.com/blog/google-sent-me-a-what-to-know-in-on-site-interviews-email-here-it-is/swizec/4251 * https://www.reddit.com/r/learnprogramming/comments/477n3c/thanks_rlearnprogramming_after_failing_multiple/ 
Agencies like Wipro, Volt, Insight Global, Aditi are good places to start. 
Thanks!
\&gt;Eh, not really. The compiler may use it, and there may be framework support, but there are no C# constructs exposing this in any way I am aware of. For a while there has been System.Numerics which is VERY nice to work with but limited in usefulness due to the small number of intrinsics it exposes. But on the way very very soon is raw intrinsics. Thank science.
Depends on the client. Either way it is a grest way to gain professional experience. 
Properties appeared first in Eiffel and were adopted by Delphi, C# did not invent anything new here. In fact they were already present on J++ as language extension, if I recall correctly.
&gt; this isn’t new behavior that can’t be done today with using extension methods against the interface. Sort of. As I mentioned in my other comment, I need to re-review the github summary, to see how much of what I remember is (still) true, but: * this feature is supposed to allow adding new features to an existing interface without breaking *binary* compatibility -- this is a big deal for people maintaining large libraries and frameworks, and *shouldn't* be able to break existing code, because the new features wouldn't be used by existing implementations * it allows operations over an abstract hierarchy to be overridden by derived types, instead of relying on type sniffing in static extension methods -- this decouples and simplifies the implementation of things like the Enumerable type I think this comes with some ugly tradeoffs that can also make code harder to understand and maintain, but it really has all been discussed to death.
Visual studio community for C# will be the best IDE you ever find.
LINQ, `async`/`await` and delegates
I've been down with shapes, and even found myself having a use for them at one point. Extension everything is also a cool idea. But in absence of those, I'll have to settle for default interface implementations.
Pracice LINQ until you stop using loops. That's the biggest "Java programmer writing in C#" thing I see is writing a bunch of loops. Also use extension methods. They're kind of meta-OOP and make certain code much more readable and maintainable.
That's my fear. If default interface implementations are added, then these better alternatives have a much higher chance of being cancelled.
What a dumb statement! 
Tuples and destructuring. var (result, success) = GetResultAndSuccess(arg);
Since you already know Java I'd recommend to have a look at the Wikipedia article [Comparison of C# and Java](https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java). I remember it helped me to get started with C# without having to read trough a bunch of stuff I already knew from Java.
You should never stop using loops. I'm a huge linq evangelist, but you should not get rid of loops. For instance, calculating the `nth` fibonacci number should not use linq.
Thank you, I will definitely look into those
Definitely true. But loops should be used when loops are needed.
Wow, I've completely forgot about that, I'm gonna give it a try.
linq is great for developer productivity, but it is less obvious what the runtime cost is. Usually better to write explicit loops when code is performance sensitive.
It's slow on my machine sadly ;(
Ahh... I feel you there.
Depending on what kind of work OP does, there aren't many situations when it's better to hand-write your loops (with some notable exceptions, like the .ForEach() abomination). If specific code runs slowly, you should try deconstructing a LINQ statement. You shouldn't guess that there will be a performance issue and write a loop instead of LINQ.
Yup, Many years ago I was pulling out my hair trying to discern why windows kept insisting on displaying the 32x32 size despite there being all sorts of sizes in the ico. Windows icon caching was the culprit.
Your opinion is?
Try rider by jet brains. Especially if you’re used to intellij
The prefixed ++ operator killed me when I began
I usually just search on Indeed, used to use Dice but it seems to lie all the time (a job posting from a company 10 hours ago.... from a company that shut down a few years ago.) I don't know if they've fixed it yet, but, haven't used it in a long time.
Back in my day, Sedgewick was in C like God intended :)
It's a phone interview. And wow congrats! That's awesome. Good luck on your interviews. A coaching session with Google? 
Very helpful. Thank you! If you don't mind, what happened in your interviews? Did they maybe have too many good applicants? 
Got it! 
Thanks! :) 
C# Architects: Invests numerous personnel and thousands of man-hours towards research of new language features before deciding to implement them. Reddit User: Reads a headline and in .08 seconds declares the C# architects wrong. 
Yes. Ask your recruiter ASAP. Mine offered it up, as I assume they are supposed to. It’s a 45-min google hangout session with like 5-6 candidates. They have an engineer who has experience conducting interviews talk to you. Good advice, and also they’ll walk through a sample problem and point out tips along the way. 
This is not about opinion but about a totally unlogic statement! How on earth can one tool for a specific task be better than any other tool for any other task?! Sorry but that's simply bullshit! I know there are fanboys everywhere, even in domains where I would consider members to have more intellectual capacities than the average. But it still disturbs me everytime I read such phrases.
Got it! That sounds really great. Thanks! 
How is `++` in C# different compared to Java?
Honestly if you're learning C# (I'm VERY new to it as well) I picked up some great knowledge from Brackey's tutorials, he's really great at teaching and telling you what's going through his mind, he doesn't make like any mistakes though, and he is quite a fast talker, I had to put the video at .75 speed to even follow along. He does go very in depth with his concepts at least in his beginner tutorials, he does do more advanced tutorials, but it does require at least SOME knowledge of C#
No, I used C++. I’m not very familiar with C#, only subbed here because I occasionally maintain an old MS stack application. 
Thanks, I know brackeys but his videos are quite long from what I have seen and I don't have the patience. I will go through each thing as I go on my own. Thanks for the suggestion though.
AFAIK they work exactly the same
Interesting. Thank you
With MI on abstract classes, though. We can finally do mixins
Got it. Well, best of luck with your interview! Where are you flying out to? Are they paying for everything? 
Yes, they are long, but it makes for easier learning, but if you have previous coding experience, there's actually a lot you can skip over in his videos, I'd like to say around 1/3 to 1/2 of most of his videos are just explaining why he wrote the code he just did. If you don't understand the concept, listen to his explanation, if you know what you're doing, you can skip over a couple minutes of his talking. A while back when I wasn't gaming, I worked on his FPS Game tutorial, and honestly my game is pretty identical to his, except I tried my own things, like instead of following his tutorial for importing gun models, and making gun flash/bullet impact, I did those all on my own. It's probably because it doesn't require much coding, although in a couple incidences I would put in a gunshot sound, and it would break EVERYTHING. So here are my couple tips as I went through my beginner experience; ALWAYS keep a save of your last stable copy of the program, so once you mess up, even if the saved work is very far apart, you can go through and copy over the code, while looking for the mistakes. Keep any successful previous work you have done as a reference, VERY helpful i found. You're going to need to learn to be patient, even if you're a really good programmer, you're going to have to do a LOT of trouble shooting and reading code line by line. Sometimes Unity will give you a very vague error, so you'll have to go through an entire script to find the mistake.
Well there's all sort of trends. Others have mentioned LINQ. I haven't tried it yet but they better be really good and readable to replace loops just like that ;D As for extension methods, I heard about them and they sound pretty cool
Keeping a backup save is always a good plan! You could use services like github for that. Though I haven't used github for large projects. Atm I am documenting everything I learn. I write them down in a text file so I can easily find anything I need and forget. So far learning unity itself (with the interface and so many options, animations, objects etc) has been more of a challenge than learning actual c#. But I will get somewhere eventually. Right now I have around 3 weeks to learn unity and c# for an interview at a game developer studio, so that's why I wanna go really fast. Also because I am really impatient ^^ Thanks for the support!
Thanks! They’re flying me to NY, everything is on their dime, and booking travel was very easy. 
Yes, Unity is very frustrating to deal with. I haven't used github because I'm having trouble even uploading to it, so right now I'm just kind of using my Google Drive lol
It’s not “unlogical”. It’s a tough statement to prove though. And yeah visual studio really is that good of an overall tool. Rider is close. 
They are MUCH more readable than loops IMO. For example, instead of: var lastNames = new List&lt;string&gt;(); foreach (var cust in customers) { if (cust.Include) { lastNames.Add(cust.LastName); } } You can write the following in LINQ: var lastNames = customers.Where(c =&gt; c.Include) .Select(c =&gt; c.LastName);
&gt; It is only a migration blocker if you are expanding the original scope of an abstract interface instead of creating a new interface (or extension method/interface pair). This is a really poor argument. You're suggesting a workaround for something that's a non-issue with this. &gt; Yes, it does take a little upfront planning to decide if something should be an abstract interface or abstract class. In many cases this will remove the need for an abstract class since they're often used to implement simple boilerplate functionality that every implementer must provide even if they're something stupid like `GetType()` or `nameof(Foo)` in most cases. &gt; an unreasonable aversion to abstract classes Maybe because they impose a needless inheritance hierarchy on the contract implementer, and they're not very discoverable? You cannot implement multiple abstract classes. &gt; and wish to expose everything as an "interface" Yes, because if you ask for an interface as an input and require the user to implement it, they shouldn't have to go looking for an abstract class for that interface. &gt; The fact that interfaces are now going to be half-broken abstract classes not withstanding Ridiculous.
I never claimed they were invented for C#. In addition do you realize that Delphi and J++ were created by the same person who created c#?
&gt; quite often I write abstract classes simply because I can't fit something in the interface, or the interface requires a ton of boiler-plate to implement I don't get it, this is how abstract classes are supposed to be used. I understand the specific reasons why default iface methods are being implemented, but this just reads that you want abstract class features in interfaces so you don't have to use abstract classes...
Ok. This isn't a joke: Build an idea generator. Think about what constitutes an idea and then figure out how to build something. Start with the magic 8 ball thing or the Cards Against Humanity approach. Then think about how to present the idea, perhaps a UI? Web based? WPF? UWP? Perhaps a RSS feed (Does RSS still exist?). Add multi user features so internet Randos can vote on the ideas generated, add an Angel Investor portal for people to invest in the ideas ... ok sod off this is my idea now *plans IPO* Anyway, go nuts with it :)
One more thing: Unless you end a LINQ query with ToList(), what you're creating is not the collection so much as a query. That means you can make a complex search query on a dataset that pulls only data the user has permissions for, then re-use that query for user searches by keyword. So, for example: var data = db.Records.Where(r =&gt; r.WebAccessAllowed &amp;&amp; r.AllowedUsers.Contains(user.Id)) .Where(r =&gt; r.RecordDate &lt;= DateTime.Today()) //future records should not display .OrderBy(r =&gt; r.Description) //sort by description .ThenByDescending(r =&gt; r.RecordDate) //ThenBy sorts without discording past sorts .Select(r =&gt; new RecordViewModel(r)); //convert raw data objects into ViewModel objects In this LINQ statement I've filtered by permissions, by date, then applied multiple sorts and converted the raw data--probably from a SQL table but not necessarily--into some ViewModel objects. But *I haven't actually queried the database yet*. That means when the user searches for a keyword, I can go like this: var searchResults = data.Where(r =&gt; r.Description.Contains(keyword)); This is a new query and doesn't change the original one, so now my keyword search is just the one line instead of each keyword search needing all the other parameters to be applied. This one line is thus equivalent to: var searchResults = db.Records.Where(r =&gt; r.WebAccessAllowed &amp;&amp; r.AllowedUsers.Contains(user.Id)) .Where(r =&gt; r.RecordDate &lt;= DateTime.Today()) //future records should not display .OrderBy(r =&gt; r.Description) //sort by description .ThenByDescending(r =&gt; r.RecordDate) //ThenBy sorts without discording past sorts .Select(r =&gt; new RecordViewModel(r)); //convert raw data objects into ViewModel objects .Where(r =&gt; r.Description.Contains(keyword)); In terms of loops, think of this as the ability to selectively re-use parts of your loops. Like I said, you're not actually iterating over the collection with any of these queries. If you actually use the data (for example, by data binding to an object), THEN the source collection will be iterated. If you want to force the query, that's easy: just turn it into a List. var runQuery = searchResults.ToList(); //ToArray() also works The ability of LINQ to break loops into re-usable pieces is one of its most powerful characteristics, in my opinion. This, paired with libraries such as Entity Framework that allow you to treat SQL (and other) databases as queryable collections, provide the opportunity for some truly elegant solutions to business problems.
I just purchased a copy. Thanks for the input! 
Haha, I do like the concept of that idea
C# is much more organized; not everything is in System (std namespace)
Prove your own point then, find something better. If you're inconclusive then my original statement was right in this circumstance.
If you end up as the next Facebook, I get 10% ;)
Hmm, sorry
Understanding the benefits and pitfalls of the IEnumerable interface, as mentioned below in the context of Linq. How to correctly write async code using async/await. 
I found it conceptually easier to understand LINQ with the SQL-like syntax first, because I already knew SQL well. "Language Integrated Query". You can use SQL to query in-memory items (and more, but let's start there). `from` comes first and `select` comes last because *that's the way it should have been from the start* and it makes intellisense and all other forms of compiler inference much easier. var oldPeopleNames = from p in allPeople where p.Age &gt; (me.Age + 10) select p.Name; This produces an `IEnumerable&lt;string&gt;` because `Person.Name` is a string. You can stick it in a `foreach` loop or convert it to a `List&lt;string&gt;`, etc. After you understand this, then the other form (lambda syntax) is just a different syntax for the same thing. var oldPeopleNames = allPeople.Where(p =&gt; p.Age &gt; (me.Age + 10)) .Select(p.Name); SQL syntax vs. lambda syntax is a matter of preference, mostly. Lambda syntax provides a clearer order of operations.
Second this. Love Rider.
You still haven't grasped it! Better think about it again. It is totally irrelevant what IDE I consider best - that's simply not the point. 
Google always have a lot of applicants, they can pick and choose and they would rather not hire a good developer if they aren’t sure than accidentally hire a bad developer. Basically because everyone wants to work for Google they can be picky.
The way you wrote your comment sounds as if C# introduced it. I know Anders' work since Turbo Pascal 4.0.
That cost tho
Sounds like C# is more a Java(with more syntax sugar) crossed with a little bit of C/C++
Everyone else is hitting the important things, but I'm just gonna touch one one small thing: getters and setters. The way they work in C# is amazing and blew my fucking mind. I know it's a little thing but, like, it's so nice. 
Comparatively speaking; VS as an IDE for C# is better than any other language's IDE. Does that help? VS is hands down the best IDE I've ever used for anything ever is also a pretty fair statement.
Why does it matter if it was "invented" for C# or not? It is an advantage of C# over the other two languages; as stated.
You claim that I can't prove it's the best, but you can't disprove that either. I'm quite sure I, along with everyone else here, has grasped your illogical point
As someone who has switched over recently, the biggest difference is that there are way too many ways to do any particular thing you want. Microsoft tends to stop and start and extend some things and ignore others.
Sounds about right.
Kind of, as I mentioned, "merge of Java with Delphi.". However Java also has quite a few cool things that aren't present in .NET. Both eco-systems kept copying each other since the early days. 
&gt; Why does it matter if it was "invented" for C# or not? To minimize urban myths. &gt; It is an advantage of C# over the other two languages; as stated. There I do agree.
&gt; &gt; &gt; &gt; In many cases this will remove the need for an abstract class since they're often used to implement simple boilerplate functionality that every implementer must provide even if they're something stupid like GetType() or nameof(Foo) in most cases. It is an abstract class. Allowing the `interface` keyword to define abstract classes it exactly what people are complaining about. &gt; You cannot implement multiple abstract classes. This feature requires altering the runtime. If we're going to do that anyways, why not introduce fully featured abstract classes instead of this weird hybrid?
It really doesn't
visual studio will auto format your code for you with Cntrl-K Cntrl-D, and it has a lot of settings for how it formats it. that might be enough. Would also advise that probably everything in life will get better if you worry about this less!
If you're really "trying to be more efficient", you should probably spend less time worrying about whitespace, and try to just roll with whatever the IDE will do for you. There may not be a tool out there to do this for you: I checked VS2017 and Resharper, and neither has quite what you're looking for (Resharper won't put the first .call on its own line, VS2017 doesn't appear to have a setting for this, at all). You can check the code formatting options in VS2017 under Tools-&gt;Options-&gt;Code Editor-&gt;C#-&gt;Code Style-&gt;Formatting, though
The only time I use loops is when the linq solution gets too convoluted for a single line or when I have to use some of the linq keywords that are bigger less frequently used words. Like Aggregate. I know what aggregate means but I just don't feel like it's one of those 1000 most commonly used english words and I feel like it's important to keep the verbiage simple for readability sake. 
var a = someObject .SomeMethod() .AnotherMethod(new { Property = b.YetAnotherMethod() }) .YouGetTheIdea(); 
* The [Task-based Asynchronous Pattern \(TAP\)](https://download.microsoft.com/download/5/B/9/5B924336-AA5D-4903-95A0-56C6336E32C9/TAP.docx) is a new pattern for asynchrony in the .NET Framework. It is based on the `Task` and `Task&lt;TResult&gt;` types in the System.Threading.Tasks namespace, which are used to represent arbitrary asynchronous operations. * Starting with the .NET Framework 4, the [Task Parallel Library](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl) is the preferred way to write multithreaded and parallel code.
&gt; Unless using unsafe code can really, really mess up my day Have you ever worked in C++? Unsafe code can absolutely destroy your day. Segmentation faults are notoriously difficult to debug.
Tuple is a nice feature - the code can be come difficult to read and maintain but by using tuples you can send data around without having to create custom objects all the time
SIMD intrinsics is a part of the CLR, not C#. The System.Numerics.Vectors library builds on these intrinsics but in the end it has nothing to do with C#, and C# is oblivious about SIMD intrinsics.
I've been a .NET dev for 12 years and only have a vague idea of what Java offers that aren't present in .NET... Can you do a similar breakdown from the perspective of Java? I want to know what I'm missing.
I mean... You could just make your own extension that calls aggregate but with a name you choose. It'll be the same once it gets compiled. :)
For sure. Could do that too. But it usually isn't a common enough thing I need for an extension. Nor is doing a loop all that complicated. Also there are different things aggregate could mean depending on what I'm aggregating. So coming up with a single word name for it is challenging. Probably why they chose to use aggregate as the keyword in the first place. 
If you have an 2 dimensional array, you can easily use it to store 2d-mazes; and show them on the screen But it's easy to have 3-dimensional arrays - and not that hard to write an algorithm that generates three d mazes that can be stored in them. (In fact there are probably some lying around.) You might give people "cues" (like a ladder and a hole) as to whether you can climb up or down; or if your programming is good enough actually procedurally generate the meshes for a true 3d maze. You need a largish 2d maze to get "lost" in it; the size a maze needs to be to confuse someone is smaller for a 3d maze. But why stop there? It's just as easy to have a 4 dimensional array (maze[,,,]=new maze[a,b,c,d].) Now you can still represent the three normal axes of movement (up down,, left right, forward back) but in addition add tomorrow and yesterday - so people can step forward and backward in time! Even a pretty small maze of this type ought to be very confusing very quick. Next a five-d maze - up/dn/lf/rt/fw/bw/yes/tom and perhaps charm And later you could perhaps add colour and strangeness for an 7d maze that's rather quirky (or quarky). If you're really good you might be able to set it up for an abitrary number of dimensions - algorithmically and code wie it's not really hard to do. The problems is eahc of those dimensions should be represented on screen somehow so the user knows at a glance how far they can travel in each direction - the same way they can look at the usual 3-dimensinal part and quickly see ahead plus any turnings. 
Yeah, I think they chose the right word. That sort of functionality should be wrapped in well-named methods anyway so I'm fine with it. And if it seems to opaque, well, that's what comments are for. :) But hey, nothing wrong with loops either.
Agreed. C#-in-theory has nothing to do with SIMD; "C#" is just a document specifying some grammar and its meaning. C#-in-practice does, via Microsoft's compiler/Microsoft's CLR/Microsoft's class lib. Not everybody makes the same distinctions, and some may consider the distinction vacuous, but I understand you. I think most people are downvoting you because you seem to imply that the only simd support is whatever support the compiler might have internally for its own purposes and not for the developers purposes; maybe they see you as implying that the developer has no explicit mechanism to ask for simd support which is false because we can explicitly ask for simd behavior via System.Numerics.
&gt; However Java also has quite a few cool things that aren't present in .NET. I'm... curious as to what's left at this point? The only thing that comes to mind is Default interface methods (doing something similar in .NET is often tricky/hacky.)
I mean, is this a real thing or a toy thing? The sweet spot between Q&amp;D and Correct would be to have a `login` endpoint (HTTPS) that takes credentials and sends an Oauth bearer token back. Then include the bearer token in requests the client sends. [Here's a not-terrible example.](https://www.red-gate.com/simple-talk/dotnet/net-development/jwt-authentication-microservices-net/)
&gt;I spend a lot time on whitespace compared to actual programming. &gt;Specifically, I like having very little on each line. Most of your lines are almost entirely whitespace. What is this accomplishing? And if your answer is going to be 'because I find it more readable', have you considered whether it's more readable to you only because you're accustomed to it?
&gt; It is an abstract class. Allowing the interface keyword to define abstract classes it exactly what people are complaining about. It's by **definition** not an abstract class. Also you can implement as many interfaces you like, and interfaces cannot define fields or auto-property implementations unlike abstract classes.
Never worked in C++ but I'll try a different way.
&gt;Sounds like C# is more a Java on steroids This is how I feel about java now. I started my career with Java 7. Now and for the past 3 years I mostly work with C#. Recently, I made a parser for a custom file format my team came up with that is essentially graphs in a text file with support for variables. I never fully lost contact with Java because, as I work with automation, sometimes I have to touch other languages, like, Java. Anyway, on the past weekend I had nothing to do and I decided to translate that parser code from C# to Java 8 and it was plain easy. Just syntax mostly. The only thing that took more time was to modify Linq queries to Java streams but in the same can. Both languages feel pretty much the same to me. Both heavily OOP and hard to use without an IDE. The steroids part that I felt was thing like C# has string.IsNullOrEmpty method readily available and in Java I had to write a somehow more complex if to achieve the same. That said, the language that I love is Python. I only work with C# because I have to. 
&gt; It's by definition not an abstract class. Also you can implement as many interfaces you like, Your knowledge seems to be limited to just C# and Java. In many other OOP languages, a concrete class can implement multiple abstract classes. The primary difference between an **abstract class** and an **abstract interface** is the existence of an implementation. &gt; interfaces cannot define fields Which is why we're calling an incomplete or broken abstract class. 
In Java by default class methods are `virtual` In C# by default class methods are `sealed`
He's a Java programmer. They've been trained for 30+ years that "interfaces are good, concrete classes are bad". They see abstract and concrete classes as "icky" or "gross" and will do whatever they can to avoid seeing them in their code. And it annoys me to no end that C# programmers have been adopting the same counter-productive attitude for the last decade or so. (I think it started around the time WCF was introduced and they started adding shadow interfaces to every WCF service even though it offered no value.) 
&gt; this decouples and simplifies the implementation of things like the Enumerable type You have that backwards. If you start shoving more stuff into types that implement IEnumerable you increasing coupling as it now has to understand a bunch of additional concepts that are currently segregated 
You are grossly exaggerating how much time they've spent on this feature and how little thought we've spent on it.
Default interfaces are supposed to be in c# 8
Do note that unity's environment isn't vanilla C# tho. Its in the unity ecosystem, so you'll be missing some things that a windows console or forms application has to offer. I learned c# the vanilla way, im not sure how effective it is learning it through unity. Could be better or worse, im not sure
C# can be verbose at times, but often provides very clear code and some slick stuff with LINQ (God I love it).
Absolytelt not. I've worked professionally with C++ which doesn't have interfaces but rather classes where all members are pure virtual. But unlike C# and the CLR C++ supports multiple inheritance. Why should they implement multiple inheritance? Usage in C++ has generally made it clear that it's a bad idea which is why Java and C# have interfaces instead, and most other languages that implements something similar uses traits (like C# will).
You may want to check your reading comprehension there, that’s not implied at all. 
How does this compare to Roslynator's?
Removed: Rule 4. Regarding login forms, plenty of ways and tutorials out there to do that. Regarding database access, check out Entity Framework.
Some contract positions will be permanent, but there will also be some that are contract-to-hire. So basically the company will "try you out" for 3 or 6 months before agreeing to hire you permanently. The rest will be contract-only with the contract length stated clearly. Even those contract-only positions can become permanent if they like you enough. Once you get your foot in the door, they might want you to stick around.
Basically, network through friends, family, and colleagues, check job boards like Dice, and also get in touch with a recruiter at a consulting company. Don't limit yourself to one avenue. Even without experience, a good recruiter might be able to find a place willing to hire a new programmer/developer. And you may need to talk to more than one recruiter, but if you do, make sure you don't get presented twice for the same position (by two different recruiters). That's a good way for everyone to lose out.
Hey, author of Veldrid here. That's a very unusual issue you're hitting. I haven't seen that error before, and I'm not sure exactly what it's referring to, unfortunately. &gt; The problem will occur if i invoke the garbage collector with GC.Collect() after the first Dispose call. The object reference is null here, so it shouldn't actually cause any problems. That's very odd. Like you said, it shouldn't even do anything if the object is null, which it will be on the first call to the function. &gt; I've tried disabling this and then running the garbage collector, but nothing goes wrong if i do that. So, if you remove those Dispose calls, then everything works fine afterwards? That sounds very odd, indeed. Are you able to get the same crash if you call those functions from a different place in the app? Since you're on Windows, are you using the D3D11 backend? Knowing which graphics API is in use could help narrow down potential bugs.
It's definitely not cheap, but given how painful VS has been lately, I feel like it was a worthy investment.
I haven't worked in Unity so I don't know much about this. Does the TreeInstance have an ID? Maybe you could create a list with just the IDs (or a dictionary)
TBH If they made it more accessible for the rest of us, they would get more corporate usage - What we use at home tends to be what we use at work - It's why Windows is dominant.
I don't think it's purely a style or what I'm accustomed to: I believe it literally takes less brain power to parse several nested braces and parenthesis when they're broken up like this. Another advantage is source control diffs. Having less code on each line means when you make a small change, it affects less code. Some tools have more intelligent diffs to make up for this. I do find it strange that 4 random strangers don't value whitespace as much as I do. 
You're absolutely incorrect that Resharper won't do this. it won't do it out of the box but you absolutely can easily do it with the native options.
&gt; However Java also has quite a few cool things that aren't present in .NET. Ooh.. can you provide more info? I always had the uninformed impression C# could do everything java can and then some..
Developer who doesn't get the acronym checking in... What the hell is SIMD? *puts noob hat on*
Everything in java is virtual by default, whereas everything in C# is final by default. I.e. overriding methods in c# requires the base class methods to be marked virtual, but the opposite is true in java -- you can override anything unless its marked final.
I'm happy to be wrong. Which options, though?
Under code formatting
Obviously I'm exaggerating with the numbers but the underlying point still stands; the C# team has spent much more time researching this topic (seeing as it is their actual job) than the average reddit user. It's typical (irrational) human behavior for us to greatly value our own opinion on a subject even when we are consciously ignorant or grossly un-informed on the subject matter. Just take note of the numerous comments like "I haven't used this but let me state my opinion anyway." It's not rocket science to arrive to the conclusion that regardless of how much of your personal time you have devoted to this it more than likely pales in comparison to what the C# team has invested in it. Not to mention the Java and Kotlin architects who implemented similar designs into their respective languages.
I have to second LINQ. Every day it gets used.
https://en.wikipedia.org/wiki/SIMD Single instruction, multiple data. It lets you exploit data parallelism to execute multiple operations in a single instruction. For instance, if you need to adjust an image brightness by adding some value to every pixel rgb component, you could use SIMD to load multiple pixels worth of data into a single SIMD vector and add the brightness value to each chunk in the vector, in a single instruction call. Super fast.
Is that C# 7+?
No kidding. Under code formatting, which options? Because I checked out forcing it to always chop lines before member calls when I was writing the original comment, and it seemed to be pretty consistent about leaving the first one on the same line, yielding something like var a = someObject .SomeMethod() .AnotherMethod(new { Property = b.YetAnotherMethod() }) .YouGetTheIdea(); Again, I am perfectly happy to be wrong--I didn't look into this *that* deeply--but which, specific set of options produce the formatting OP is asking for?
Ah! TIL! Thank you :)
If someone doesn't have ReSharper then .editorconfig is the way to go.
Do people still use resharper? I gave up after most features were baked into Visual Studio, but more importantly, because performance was *absolutely awful*.
My licence is expiring in a month, I don't want to go back to VS :(
Towards the bottom. 
Is this the 908th tutorial on getting started with dapper now? Please, all content creators, do some OC. We don't need 1000 of the exact same article over, and over again. If you do cover a topic, add something new that we might not know, or some cool trick.
Yes.
C# has a traits-like proposal called "shapes". It's rather complex but I think it is the right way to go.
especially as this is only the most basic stuff to do with dapper. Utterly useless. And in addition to that extremely poor presentation.
I’m not sure why you’re being downvoted. I’d love to give up resharper but it’s a requirement for where I work :( my poor visual studio performance!
DotSettings is something by ReSharper. editorconfig is something close to becoming a de-facto standard supported by almost all editors.
Both do basically the same. Mine seems to catch more expressions (but I'm not claiming mine's better, maybe I have holes in other places).
Do not use interpolated strings in SQL queries as this tutorial suggests. It leaves your app open for SQL injection. You might think you figured out that this one query can't be injected from the user, but NO, just DON'T. Instead use parameterised queries. Interpolated (DO NOT USE): db.Query&lt;Customer&gt;($"SELECT * FROM Customers WHERE CustomerId = '{id}'") Parameterised: db.Query&lt;Customer&gt;($"SELECT * FROM Customers WHERE CustomerId =@customerId", new { customerId = id }) 
`.editorconfig` is a standard for declaring some common basic settings that can be picked up by almost all editors and IDE's. DotSettings is a file that ReSharper uses to save "team shared" settings. ReSharper has hundreds or thousands of settings and configuration abilities that are specific to ReSharper and do not have an equivalent EditorConfig standard. Configure as much as much as possible in EditorConfig since it will be used by all developers using any tool including ReSharper. Then if you're using ReSharper and want to declare more settings that can be shared by other ReSharper users in your team, you will need to have the DotSetting file.
[They call it traits in the proposal](https://github.com/dotnet/csharplang/issues/52). Shapes is a different proposal with different goals.
Real anonymous classes. Not just value types, but stack allocated classes that can implement interfaces. 
Resharper recently added a conversion to go from .editorconfig into Resharper settings. They had an outstanding task from Jan to go backward - Resharper -&gt; .editorconfig. Unfortunately it's been bumped a few times, and has been bumped again from 2018.2 to a future release. https://youtrack.jetbrains.com/issue/RSRP-468159 The feature is good because it allows non-resharper users to follow the code styles enforced by Resharper. 
Updated my comment.
Updated my comment. I was referring to the runtime as well, not only language grammar.
Updated my comment. I was referring to the runtime as well, not only language grammar. 
R.i.p tragic
stfu 
They are.
What makes these two programming languages competitors are their differences and similarities. I have listed some of them below: Java \-High level, robust, secured and object-oriented programming language developed by Oracle \-Designed to be run on a Java platform, by the help of Java Runtime Environment \-Type safety is safe \-Build-in data types that are passed by value are called primitive types \-Arrays in Java are direct specialization of Object \-Does not support conditional compilation \-Does not support goto statement \-Does not support structures and unicorns \-Supports checked exception and unchecked exception C# \-An object-oriented programming language developed by Microsoft that runs on .Net Framework \-Designed to be run on the Common Language Runtime \-Type safety is unsafe \-Build-in data types that are passed by value are called simple types \-Arrays in C# are specialization of System \-Supports conditional compilation using preprocessor directives \-Supports goto statement \-Supports structures and unions \-Supports unchecked exception
So THAT is really something I overlooked. Thanks
I've disabled all of the Dispose calls, the problem sometimes moves to the next GC.Collect() call: var frame = new StackFrame(true); GC.Collect(); var frame4 = new StackFrame(true); //MainSceneColorTexture?.Dispose(); var frame7 = new StackFrame(true); GC.Collect(); var frame8 = new StackFrame(true); //MainSceneDepthTexture?.Dispose(); //MainSceneResolvedColorTexture?.Dispose(); //MainSceneResolvedColorView?.Dispose(); //MainSceneViewResourceSet?.Dispose(); //MainSceneFramebuffer?.Dispose(); //DuplicatorTarget0?.Dispose(); //DuplicatorTarget1?.Dispose(); // //DuplicatorTargetView0?.Dispose(); //DuplicatorTargetView1?.Dispose(); //DuplicatorTargetSet0?.Dispose(); //DuplicatorTargetSet1?.Dispose(); //DuplicatorFramebuffer?.Dispose(); var frame5 = new StackFrame(true); GC.Collect(); var frame6 = new StackFrame(true); If i comment out the StackFrame variables the problem doesn't occur, but once it gets back to code that is creating them it starts up again. I've already tried the following: * Restarted my computer * Reinstalled the x86 runtime (running as 32 bit program) * Updated to the latest x86 runtime I had a problem where running a simple exe set to x86 would fail to run, but that turned out to be because the dotnet command is invoked from the 64 bit runtime directory, which doesn't understand how to run those. Explicitly using the x86 version works. It does not affect my hosted environment since that's pointing at the x86 version already. I tried running my program with that exe as a launcher, but the same problem persists. I'm using the OpenGL backend, i've set the following OpenGL attributes: SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION, 3); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION, 0); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK, (int)SDL.SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_DOUBLEBUFFER, 1); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_ACCELERATED_VISUAL, 1); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_DEPTH_SIZE, 24); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_RED_SIZE, 4); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_GREEN_SIZE, 4); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_BLUE_SIZE, 4); SDL.SDL_GL_SetAttribute(SDL.SDL_GLattr.SDL_GL_ALPHA_SIZE, 0); I'm using SDL2-CS here to handle the SDL2 part of things. My program is a very specific setup where i set up a CLR host to run managed code under an existing managed program. This is a 32 bit program so i can't run it with the AnyCPU setting. The original program uses an older SDL2 library so i've had to modify the SDL2-CS library to load another instance so that it can use the SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING option to avoid shutting down. Even if i run it as standalone and use the original SDL2.0.8 library it still breaks, so that isn't the cause either. The only thing i can think of is that some Veldrid OpenGL calls assume a function is 64 bit and sets a parameter type as such, but ends up being different so the managed stack winds up being corrupted during the call. I don't know if any OpenGL functions have this sort of difference between 32 and 64 bit, but i don't see any other causes here. I should note that the original program also loads the OpenGL library because it creates an OpenGL context of its own. I destroy the associated window before starting my managed code, so the library should still be the same, but the context should have been destroyed already. I don't know if this could have an effect on managed code though. I'm also using ImGui.NET, but it has only had an effect insofar that using it causes a garbage collection to occur. If i comment out the ImGui renderable code it still happens before any other ImGui code executes. The ImGui library isn't loaded when the problem occurs, so it should have no affect whatsoever on this. I'm using a custom SixLabors.ImageSharp build since the current NuGet build wasn't compatible due to this: https://github.com/SixLabors/ImageSharp/issues/569 It's just a build of their latest codebase from a few weeks ago, i don't think it's related. When i run the NeoDemo sample i get this exception: Veldrid.VeldridException: 'Failed to compile HLSL code: C:\Users\Sam\Documents\GitHub\veldrid\bin\Debug\NeoDemo\netcoreapp2.0\unknown(161,5): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation This is using the D3D11 backend. When i use the OpenGL backend it works just fine. It would be great if the debugger could detect managed stack corruption when it happens so i can see where it is, but i suspect it's happening in native code somewhere, and the native debugger doesn't know about the managed stack so either debugger will not give me the whole picture. I figure i'll have to build the CLR myself and see if i can catch the corruption in the act. I can force the corruption to occur but that will probably only show the symptoms, not the cause.
If anyone somehow started with EF Core before dapper and are wondering why they didn't overload FormattableString to allow this here's the GitHub issue https://github.com/StackExchange/Dapper/issues/838
Really cool features but they come with a few gotchas: Never use an async void (except for events or if you know exactly what you're doing). They hide exceptions and cause debugging nightmares. It's generally bad to call an async method without an await, especially in a web application. If you need a background task use a mechanism designed for it. LINQ is lazy, that is, not executed until something forces it to be (i.e. .ToList()). This can cause unexpected behavior if your expression contains variables from the surrounding scope (it will likely execute with the final value of the variable, not the value at the time the expression appeared to be run).
What do you think about this link: https://fluxmatix.com/en/blog/getting-started-cross-platform-asp-net-core-web-development-part-3-you-first-asp-net-core-app ?
Alright, that's a done deal :)
Thanks! Makes me sad were stuck on 6 due to some old well intentioned code contracts in our code base.
That is a crazy but interesting idea. I would actually be very impressed if someone produces this, to the specifications you have outlined. I'm off to do some research on dimensions :)
That's fine, you can post it.
Include a .ToList() on the end for it to be the same, otherwise the two examples don’t result in the same since your LINQ examples returns an IEnumerable.
what value are you trying to gain by splitting by table/entity? queries naturally join multiple tables so you shouldn't try restrict scope that way. What's wrong with using an ORM like EF where you have a single model of the database? it's simple, it works and it performs well (where you'd need to be careful not to cause a N+1 problem - https://stackoverflow.com/questions/97197/what-is-the-n1-select-query-issue). If you need something more complex then i'd go down the route of query objects and potentially using mediatr. https://lostechies.com/jimmybogard/2012/10/08/favor-query-objects-over-repositories/ https://lostechies.com/jimmybogard/2015/05/05/cqrs-with-mediatr-and-automapper/ what's the fallback rules between the local sql and the remote url? does the data get duplicated between them? why? you could potentially use the decorator pattern where all data providers implement the same interface and if they can't find the data they fallback to the data provider that was passed to their constructor &gt; var dataProvider = new CacheDataProvider(new SqlDataProvider(new RemoteDataProvider())); &gt; dataProvider.GetCountries(); I generally find the middleware pattern more flexible than the dectorator pattern, but it's a bit more complicated. Something like this https://github.com/ipvalverde/PipelineNet 
Linq. Java has something similar since Java 8 (the stream API) but Linq is infinitely more convenient, and with extension methods you'll soon start seeing it as a hammer and everything that has to do anything with collections as a nail.
That was awesome! Thank you.
Cool. thanks.
The other person is wrong, you are right. We tried to enforce this, since we like it like this on our team too, but this was literally the only thing we found we wanted that ReSharper couldn't pick up automatically. Shame. 
Git repositories don't require a remote repository. If you just want to be able to revert to previous versions of a project, a purely local git repo will work fine.
Thanks for you reply! &gt; what value are you trying to gain by splitting by table/entity? queries naturally join multiple tables so you shouldn't try restrict scope that way. What's wrong with using an ORM like EF where you have a single model of the database? I'm not aware that I restrict anything, except that I have to take into account that the data can come from multiple different data sources; SQL, REST API, CSV files, whatever. Do you know of an ORM that supports _all_ possible types of data sources? &gt; what's the fallback rules between the local sql and the remote url? does the data get duplicated between them? why? The data gets duplicated because certain types of data isn't available at certain times during the day/night. These aren't necessarily fixed times throughout the week either, so what I'm trying achieve is to ask the 3rd party provider first, then local SQL second. But, wait, it gets worse! Becaue of privacy concerns (long story, please don't ask), some of the "duplicated" data can only be stored in a volatile system, like a memory cache. It can never be written to disk. So: 1. Ask 3rd party for the data, if they are online 2. Ask local SQL for the data 3. Ask local memory cache for the data, if necessary _fml_ :) var dataProvider = new CacheDataProvider(new SqlDataProvider(new RemoteDataProvider())); dataProvider.GetCountries(); This is close to where I'm at, I think, as described in my original post. But wouldn't it make more sense to send a list of data providers to each factory? I feel that it's something like this I want to achieve in my factory, pseudo-wise (but, please correct me): class UserFactory { private _dataProviders; public UserFactory(List&lt;IDataProvider&gt; dataProviders) { _dataProviders = dataProviders; } public UserFactory ByCountryId(int id) { for (var dataProvider in _dataProviders) { dataProvider.ById(id); } return this; } public UserFactory Limit(int limit) { for (var dataProvider in _dataProviders) { dataProvider.Limit(limit); } return this; } public List&lt;User&gt; AsList() { // Unknown magic; execute queries and consolidate // the data from all of the data providers. } } ...so that I can achieve this magic in the application: var userList = DataModel .UserFactory() .ByCountryId(123) .Limit(10) .AsList(); How far from reality am I? :)
Read the [official docs](http://dapper-tutorial.net/dapper) instead. As other comments have pointed out there are a lot of issues in this article.
`They hide exceptions and cause debugging nightmares.` Would love if they did. Exception? throw on UI-Thread as Unhandled Exception. Click - Dead. Every single `async void` that has no `try-catch` around it, gets one for free, with additional error reporting, if i see that in my `Desktop App`-Codebase `generally bad to call an async method without an await ...` Except when you cannot await it, then you ~~should~~ *must* add an `.ContinueWith(t =&gt; /* Handle Completion/Error */)`
and *soon*^tm can also be extended to any Type! ([Extension Everything](https://github.com/dotnet/roslyn/issues/11159))
&gt; -Does not support structures and unicorns &gt; &gt; Feeling sad.. luckily not a Java dev :D
Yes, since power users still don't have any good options to replace it. Sure, if you just used Resharper to rename a variable then it's too much bloat and you're better or using just running VS2017.
Did you only run them once? Iterate them and grab an average from at least 100 runs
Have you checked the SQL the queries are being compiled to? Most of the time LINQ and SQL will optimise the query and execution plan behind the scenes if you give them the space to.
Is this with Entity Framework (Core)? If so, EF Core acts a bit weird with GroupBy. You can check with SQL Profiler what EF is actually doing.
 Second faster (maybe xD)
Option 2. I know the code is just an example, but Option 1 is not clear about what will happen when I call Add(), whereas for option2, the tooltip will show the default values of parameters. Methods should be clear about what they do without having to look at their code, Option 1 Add() is not at all clear.
I didn't think EF core supported groupby yet? I will admit i have not checked on the status of that in a few months though.
Makes sense, thanks.
One less method call in the second one to achieve the same thing, so this sounds logical. Not sure it would be significant enough to be the deciding factor though?
Thank you and good luck...if you do it please send me a link! 
Default parameters in public methods are discouraged: https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1026-default-parameters-should-not-be-used 
I was under the impression that it was simply shorthand, and that the compiler will make the overloaded method. And if that were true, I might stop throwing those default parameters around like candy ...
Ah - that explains why I see overloading used so much more than default parameters! The reason I asked the question is because default parameters seem to be the better option to me, but I rarely see them used. But I think you've perhaps got to the root cause. Thanks.
/u/JoeGaggler has linked to a Microsoft document (a little higher up this page, as it stands right now) which suggests this is not the case.
I tried like 10-20 times each one; the time actually can change for about 50ms for any of them; but not for 400+
I dont know SQL well; also I tried to find the statement via debugger/ googled how to do it with no success. Did not spend enough time on it though, I think I need to investigate it properly.
It should with 2.1
In this specific example I'd go with option 2, however it's not always possible. Default parameters cannot express this: public void Foo(int a, int b, int c) { // Your code here } public void Foo(int a) { Foo(a, 0, 0); } public void Foo(int a, int b) { Foo(a, b, 1); } i.e. they cannot change depending on previous values. 
It's compiled with .net framework 4.5.2 in VS 2017
Actually, that's a very niche reason for not using default parameters and 99,99&amp;#37; of code you're going to write will never fall under it. Because of that, I don't believe that's the root cause of overloads being prevalent - if I had to guess it's mainly because default parameters weren't originally part of .NET and many non-.NET languages do not have similar code constructs, so people are doing what they're familiar with. I personally prefer default parameters, despite being a .NET dev since 1.0/1.1.
I've never had the impression that it generates overloads. I wonder if it behaves like public const declarations where the value is copied to the consuming code and requiring a recompile if it changes.
Well, an int can not be null, for one. But something being "null" still carries a meaning in general.
Not sure if there's another way of doing this, but when I want to see what LINQ-to-EF is doing, I run SQL Server Profiler. Click the "New trace" button, then run your code, and finally look in the trace and you can see the exact SQL that was executed. Having said that, I think the LINQ that you really want is: var query = from kh in db.CodeDeviceKeyholes join linked in db.LinkedKeyholes on linked.KeyholeID equals kh.ID into counts select new {kh, counts.Count()}; 
default paramaters are great because they can also be used like named parameters and it avoid you having to write stuff like `ChangeItemValue(1, null, null, null, "bar);` instead it just goes `ChangeItemValue(id: 1, description: "bar");` and the you have cleaner more powerful functions I genuinely think it's one of the best features added to C# in my memory
&gt; Well, an int can not be null, for one. Obviously! But I think you know what I was asking. But I take it from your reply that you'd still favour default parameters, even if setting a `string` or an `int?` to `null` as the default. Thanks.
Adding defaults instead of overloads is a breaking change if you intend distributing the code over different systems. Otherwise it's fine.
Your analysis sounds very plausible. The one place I might disagree is with the .NET FCL itself, where Microsoft use method overloading extensively. Presumably they need to cater to every case, including the niche case of defaults not being supported, which is why they avoid them? And perhaps other programmers follow their lead so that even though the niche case isn't important to most programmers, they learn to account for it by chance, simply by following what Microsoft do?
That's a very good point which I hadn't considered, but makes perfect sense. Thanks.
I'd still be able to see that the default was null. It would indicate that I don't have to worry about potentially passing null to the method. The problem with the example is that I don't actually know the name of the class. Context matters... a lot. For example: If the class was called WaterBottle and the method was Add(int count = 1), I still wouldn't have a clue what it would do, but if the method was called AddWater(int milliliters = 1) then I'd know.
I will give you an example: We have a bunch of core assemblies here and we update them regularly, which our CI server builds and tests. However, not all systems get updated at the same time so if a function pattern changes, it immediately breaks systems that expect the old pattern. Using an overload preserves the change and allows you to extend functionality without breaking things regressively. It does require careful management though, otherwise we get overloads everywhere and it can be difficult to navigate.
Yep, that's what I was imagining reading your first reply, but the clarification really drives it home.
True. I was avoiding context to make the question as general as possible, but I agree context may sway you one way or the other in specific cases.
That's a great example of when the choice is made for you. Thanks.
Named parameters is something I really don't use very often at all, and should consider using more, especially in the context of combining them with defaults like this. I wish I'd included them in the original question now!
Yes, I would. In fact I don't think there are many cases where you would use anything other than `null` as a default, considering most parameters are reference types.
What was wrong with virtual in an abstract base?
Default parameters are constants, and when referencing another third party assembly the compiler may keep a copy of that value in your assembly. The implication is that if the third party assembly ever changes its default parameter values, you'll need to recompile your own code as well. So it's fine for private or internal methods, but be careful using it in public methods. 
.NET can have a customized GC, but to do that you need to host the CLR yourself because the GC is outside of managed code. see http://tooslowexception.com/zero-garbage-collector-for-net-core/ there are also several available runtime options to control various exposed options for GC like the server collection flag: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcserver-element It is not nearly as diverse as the Java options though. Perhaps that will change now that CoreCLR is OSS. 
I tend to use LINQPad to test snippets like this. This is the form I get for the first (removing the table/key/fkey names from my dataset); SELECT [t0].[Label], ( SELECT COUNT(*) FROM [Table1] AS [t1] WHERE [t1].[FKey] = [t0].[Key] ) AS [Amount] FROM [Table0] AS [t0] For the second (hopefully I kept the naming conventions consistent between these...); SELECT [t0].[Label] AS [Name], [t2].[value] AS [Amount] FROM ( SELECT COUNT(*) AS [value], [t1].[FKey] FROM [Table1] AS [t1] GROUP BY [t1].[FKey] ) AS [t2] INNER JOIN [Table0] AS [t0] ON [t0].[Key] = [t2].[FKey] Running queries of this form shows the latter to be ~10x faster with my sample data.
ok I tried this: string r5 = ""; double t3 = 0; DateTime t020 = DateTime.Now; var query4 = from kh in db.CodeDeviceKeyholes join linked in db.LinkedKeyholes on kh.ID equals linked.ID into counts select new { kh, counts.ToList().Count }; t3 += (DateTime.Now - t020).TotalMilliseconds; r5 += query4.Count().ToString(); and it made it faster than 1 ms. Maybe I measure time incorrectly?
I'm no expert on benchmarking, but I'd probably start by using a `System.Diagnostics.Stopwatch` rather than `DateTime.Now`. Or even better, use a third party tool that's specifically designed for benchmarking. But even more important - you're not actually timing the running of the query. LINQ and EF are lazy - they only run the query when they absolutely have to. You're adding the time taken onto the timer before you've actually looked at the results - and if you haven't looked at the results yet, then you haven't run the query yet!
I tried to use linqpad with my ancient postgresql version (I cannot update it), and it throws some error during generation tables after connection. Is it possible to get sql statement from linq request without database; or I have to create another database and fill it with similar data?
Interesting, I had exactly the opposite view: the lambda syntax was much easier to understand first because it is simply calling methods that return stuff and passing lambda expressions that get evaluated via callback arguments. To me the linq syntax was odd because it was unclear what was the same variable and what was a new one in a second lambda: from p in allPeople // this "p" is never a variable on its own where p.Age &gt; (me.Age + 10) // this "p" is the first parameter for the lambda called inside a "Where()" method which implicitly closes over a "me" variable select p.Name; // this different "p" is the first parameter for a lambda called inside a "Select()" method I'll admit I didn't really get query expression syntax until I read https://github.com/dotnet/csharplang/blob/master/spec/expressions.md#query-expressions (well the version of that which is in the word document that comes with visual studio). I still don't understand why this syntax was ever added to C#.
When I try this on my data it compiles down to the same SQL as the first example OP gave.
Ah, I'm running this against MS SQL Server. Can't speak for postgresql. My knowledge there extends about as far as the basic operators.
Fair enough. I haven't tried it, it just seemed more simple.
Check the task result for any errors, ensure your task is not throwing exceptions. You need to tell TPL your task is long running you also may want a timeout. 
In a case like this I'd prefer the latter as it is more honest. The argument and default would be visible to the caller, while in the former you would have to examine the method body to see the default behaviour.
For EF6 add this to the DbContext constructor #if DEBUG this.Database.Log = s =&gt; System.Diagnostics.Debug.WriteLine(s); #endif For EF Core you need to setup a logger - https://stackoverflow.com/questions/39282951/enable-raw-sql-logging-in-entity-framework-core Then you look for the results in the Output window of Visual Studio when in debug mode.
Roslynator's appears to suggest adding ConfigureAwait(false) to every await.
Doubtful. 
For a long time I used overloading, partly because of a Java background (no default parameters), and partly out of habit. Now, generally speaking, I will use default values, because it produces neater, more compact code - you don't waste a bunch of space on the over-ridden functions, nor do you need an additional function to do the actual work (to avoid duplicating code) However, it's worth noting that default values do not always make sense. In most situations, over-ridden code does make sense with defaults, because they fit the "there's a default value, but the user can over-ride it" scenario. However, there are times when you should still prefer to over-ride the method. One example being where you wish to perform different behaviors when passing different combinations of parameters in, although you should probably at least consider whether you just need two different functions, it may be that the single function is correct, but the logic to perform it varies. The other biggest example I tend to find where over-riding makes sense is for constructors. Eg I regularly find that I have model objects which can be instantiated in several ways: 1. Given an ID, from which we retrieve the data from the database and "self build" the object 2. Having a DataRow passed in, and pulling the values needed 3. Having the individual values passed in In these cases, default values make little sense because the logic is rather different. For these situations, it usually makes sense to have some kind of `Initialize()` method, and then each over-ridden constructor calls that after performing the separate logic needed to prepare the data to pass into it. Eg if we only have examples 1 and 2 above, `Initialize(DataRow)` would make sense, where option 1 retrieves the row for the given ID, and option 2 just passes the row straight through Generally, though, my preferred approach is to use default values. I then tend to use named parameters when calling them, particularly when using more than one optional/default parameter. Eg `Add(count: 1, bigEndian: false, useGreekArithmetic: true)`
Make your "SynchronousMethodCall" async. Adapt the webservice calls using httpclient with GetAsync, PutAsync, PostAsync, etc. Async all the way.
I have a string feeling your right about that 👍
Are the parenthesis after await processTask() just a typo? According to the code you sent, processTask is an awaitable Task, not a method that returns a task. The () should not compile as is.
What about making the windows app offline and online and develop all in one. Something like this: [http://thewinduck.com/2016/06/05/thedevduck-your-website-as-a-windows-uwp-app/](http://thewinduck.com/2016/06/05/thedevduck-your-website-as-a-windows-uwp-app/) Though, your idea with React sounds fun and if this isn't a business related project maybe you should take it up for the experience
Another possibility, is the fail fast, instead of works incorrectly. Controlling your methods values from start to end makes debugging a bit easier than a magic number problem.
the whole point of optional/default parameters is that the method will work whether you supply a value or not though, right? so say if you're calling Multiply(int a) { return a * 5; } and then it gets changed to Multiply(int a, int b = 5) { return a * b; } whether the update has been received or not, nothing breaks? i've been reading about this whole "default parameters are evil" thing for about 20 minutes now, and i'm just not seeing what problems are being caused, and what overloads are even solving. you're still hard-coding a value in at some point, and you're still able to call the method the exact same way as before. i must be missing something?
No errors, runs perfectly fine without using async. I don't think setting a timeout will help, but I'll look into it.
You should never use `new Task&lt;T&gt;` - always use `Task.Factory.StartNew&lt;T&gt;` instead.
I don't have the ability to alter the web service implementation on my end, so I can't make it async. I would think there's a way to call a "normal" method asynchronously, ie just run it while keeping the UI responsive.
Not a typo - I'm using an anonymous function which has 1 line - my synchronous method call. This is a pattern that I've seen all over async/await blog entries and in books, so I assumed it's good to use. I've also used Task.Run() and TaskFactory, and all either have the same outcome or still block the UI thread.
You are correct, nothing breaks until something consumes the function that expects a different parameter pattern. Say for example, a compiled system using that code as a dependency. So, you create an assembly with this function in it, it has static parameters and all is good. There are numerous systems that use this assembly, not all can be updated at the same time when a change is made. But you need to compile and release anyway. So far so good, all systems work. A change comes a long that forces you to add a new parameter to the above function. To prevent breakages you add an optional parameter. The system you are developing with is fine with that because it knows about the change. It recompiles fine and it works. The assembly is compiled and distributed across all the other systems because they depend on this assembly. KABOOM. Some systems crash because they were expecting a function entry point with a pattern that matches the old version. If you add an overload instead, you preserve both the original function pattern and the new one. If you compile and distribute this, all systems are ok because they can locate the function they want, yet other systems can still consume the new 'version' of the function.
I agree with textverified's advice (make it async all the way down), but if you must keep the call synchronous you should be able to do this: Task&lt;MyObject&gt; processTask = Task.Run(() =&gt; SynchronousMethodCall(paramValue)); MyObject processResult = await processTask;
I tried this before and it seemed to suffer from the same issue, HOWEVER now that I've got more process tracking in my code (ie, Console.Out.WriteLine() calls peppered throughout), I can see that while the UI thread does return immediately the process actually *does* execute, so thanks! Now, maybe you can help me keep the form in "running mode", by which I mean have the buttons/controls disabled but keep the form responsive in terms of moving it, wait cursor, etc. Using Task.Factory makes it look like it's finished immediately even though the process is actually still running in the background.
Maybe you’re misunderstanding what I’m referring to? This line: MyObject processResult = await processTask(); should not be able to compile as is, which means this code does not reflect what you actually have, unless your real code isn’t even compiling. processTask is defined immediately above as a Task&lt;MyObject&gt;. As is, this would lead to a “Method name expected” compiler error since you are trying to invoke processTask as a method, which it is not.
Yeah, I wish I could make it async all the way down, but I cannot. However, Task.Factory.StartNew() seemed to work, but that's led to another issue as described in my reply [here](https://www.reddit.com/r/csharp/comments/8xzrhl/asyncawait_doesnt_seem_to_be_working/e270llz/).
You're right! My original code is a typo, the line in my code - which does/did compile before I changed it to Task.Factory.StartNew was: MyObject processResult = await processTask; Sorry about that, and good catch!
Personally, I'd consider avoiding both if you can, then there is no confusion over anything. Eg. Have an Add(int n) and an AddOne() method Some languages (Go) don't even have support for either.
It also makes mocking a bitch
&gt; I don't have the ability to alter the web service implementation on my end, You can wrap and add behavior to anything you want. Your consumers just need to use the wrapper instead.
Yes, we have a ReSharper rule that flags optional parameters as violations now.
Can you tell me why? Task.Run() &lt; Task.Factory.StartNew() ?
Well, sure, but at some level I'm still using async calls against synchronous processes, which is where I'm having trouble. I'd make every single (applicable) method async if I could.
https://blogs.msdn.microsoft.com/pfxteam/2010/06/13/task-factory-startnew-vs-new-task-start/
i just tested it and you're right, i didn't realise that changing the parameter pattern would break it. makes sense now that i think about it, thanks.
I see, you are midunderstanding what TPL does. Its not just threading. [This](https://blogs.msdn.microsoft.com/pfxteam/2011/10/02/keeping-async-methods-alive/) may help some, sorry I could not find the 6 part async/await howto I normally refer to. Check out the [PFXTeam](https://blogs.msdn.microsoft.com/pfxteam) and especially refer to articles authored by Stephen Toub.
Its syntactic sugar, the default value you give to b is copied to the call site. If you change the default, you need to recompile all callers to get the new value. You will need to recompile callers after adding the b parameter.
i see that now, i tested it myself to confirm. thanks.
I do understand it's not threading per se, but in terms of keeping discussion simple and that things behave as if there is multi-threading going on, I wrote it that way. But anyway, I am far from an expert (obviously), so I appreciate those links, which I will check out!
We found out the hard way
You need a layer of abstraction on top of your ORM or other sources. Look at the repository pattern. https://martinfowler.com/eaaCatalog/repository.html 
We have a couple of soft rules in our codebase: 1. no default parameters on instance methods or constructors, only on static or extension methods 2. the only default value permitted is default/null/0/false \#1 arises because it is pretty easy to have the same method in inheritance hierarchies that has different default parameters... for example you can have: public interface IFoo { void Foo(int x = 0, int y = 0); } public class Bar : IFoo { void Foo(int x, int y = 0) { } } and then the required parameters are different based on static type information. This isn't that bad with rule #2 in place, but without either rule you are in for a bad time in a big codebase because then you can have different values: public interface IFoo { void Foo(int x = 1, int y = 2); } public class Bar : IFoo { void Foo(int x = 2, int y = 1) { } } \#2 is in place because default values get compiled into the parameter list in whatever assembly uses the value so once you have one, if you change the value you risk unexpected behavior in other assemblies that depend on the default (which now becomes one of multiple values depending on when you compiled the assembly). Fixing the default value to always be `default` codifies that problem to not exist.
is the web service not exposed via http/wcf or some sort of rest api?
&gt;4 random strangers Or to put it another way, everyone who made a top-level reply to your post.
Events seem to be well suited for your needs: User Input =&gt; UI registers event handlers for the services' update progress event(s) =&gt; Invokes service to do something =&gt; service returns an immediate response of ok and starts processing =&gt; UI event delegates update the UI based on the service's published progress events
Lazy&lt;T&gt; might fit your needs.
What is the benefit of the local variable? Why worry about an address stored on the stack instead of the heap?
You could use a non-static class by allowing a dependency injection library to maintain it with container/singleton lifecycle, meaning that the first time the class is requested it is created, but every subsequent request (across even multiple web requests) will get that same instance. Since you say the collection won't be changed at runtime, you probably won't have to worry about concurrency issues across requests.
I think its not, because each of objects in collection will be used very often, and its preferable to store them in memory constantly.
I think its a bit faster, and performance means a lot for this process.
I do want to build up to progress reporting on the UI, so I'll look into this. This Events in .Net are a bit of an enigma to me (aside from your standard button clicks, etc) so I'll need a better understanding before I can implement it. But I'll get there because I'm not a fan of background workers. 
How would default parameters in any mess with mocking?
That's one way, but I think it depends on what you're trying to use the data for. Could there be multiple instances of this application running? When would the data become stale and need to be refreshed? The particular scenario that you're writing the solution for is what will determine if it's the right way or not. What's your goal?
The call you are making that you want to test : MyMockedObject.SomeFunction(5); The call you need to moq out because of the optional parameters myMoq.Setup(m=&gt;m.SomeFunction(It.IsAny&lt;int&gt;, It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,It.IsAny&lt;int&gt;,).Returns(true); Vs if you use an overload, you only have to moq out the one parameter you are actually calling with. 
&gt;And also, I created a local variable and assigning it to static field, to have address stored in stack instead of heap. That's not how it works. Your collection is (almost certainly) a reference type, which are always allocated on the heap. The variable on the stack just contains a pointer to the heap. Even if it was a value type, the act of assigning it to the field would copy it from the stack to the heap.
I forgot to mention that it is a private method. The output will be used only by this class, and the class will be instantiated one time. So I dont think that singleton is what I need. Maybe I misunderstood something?
My guess is that selecting into a temp table is creating extra overhead on query 2.
Default parameter values are pure syntactic sugar; at compile time the default values are substituted into the calling code in the same way that a constant value would be. This is one of the reasons that I prefer overloads (since it keeps the control over what the "default" is within the declaring code, rather than depending on compiler behavior). It's likely not a practical consideration, but to me it is a philosophical one. It's also worth noting, however unlikely, that if you have a class in library A that exposes a public function with default parameter values and that function is consumed in library B, if you were to swap out the DLL for library A within the application directory with a version that specified different defaults, you will still get the defaults that existed at the time that library B was compiled (much/exactly like you would if library B utilized constant values declared in library A)
Just because the *one* class uses the *one* collection doesn't necessarily mean that it needs to be responsible for it. A singleton isn't necessarily required, it's just a nice name to understand what the DI container is doing. Let's give some names to make this simpler. - Class `MyWorker`can be instantiated many times. - `MyWorker` has a method that *always* needs the same collection of data. Private/Public makes no difference. That data is a *dependency*. - You have created a static `MyData` class that contains your collection. - `MyWorker` fulfills its dependency on data by using the `MyData` class. So it works. The only "problem" is that you have an explicit dependency on `MyData` to get that data. Your code would be more flexible if you removed that dependency using an abstraction that still ensured you could get the data, but you don't care what provides it. In order to accomplish this, you want to use dependency injection. - `MyData` becomes non-static. It also implements some kind of interface that exposes a way to get a collection. It may not need to be more complicated than that in your case. Maybe `IMyData`, but you can be more clear with the naming. - `MyWorker` needs to have *an implementation of your new interface* injected into its constructor (this may also mean that you'll want `MyWorker` to be provided via dependency injection). By injecting the dependency, you now have a way to get your data without having to worry about creating it. - A dependency injection library should be set up to provide `MyData` as an instance every time `IMyData` (or similar) is requested by a constructor. Depending on the library used, the "how" will be different, but the goal is to not provide a *new* `MyData` every time, but to provide the same instance each time. With this set up, you can have as many `MyWorker` instances going as you want and they'll all use the same data in your `MyData` class. If you're not familiar with dependency injection, it might be a bit much to implement at once. Your static class works fine, and you can always refactor to this approach when it makes sense. 
Odd, a web service by its very nature should be truly asynchronous relative to your app. When you say its not asynchronous are you referring to some API you are using to call the web service?
To me they are basically the same. I would do option 1 if I either wanted change the order of parameters given multiple parameters. I find Option 2 cleaner as long as you don't go overboard with optional parameters. I think more than 2 or 3 optional things is too much. That said I hate methods with more than 4 or 5 parameters as well. 
Considering that only const values are allowed as default parameter values, I believe the compiler inlines the value. It seems much easier than performing a method resolution everytime the method is called. Perhaps u/rwmshen meant "faster to type".
The event method buttonClickAsync is a void async method, meaning the caller cannot await it.. Its generally not a good idea, unless you have other mechanisms in your app to indicate that a background/async operation is going on, like a UI hint and a cancel button, etc.
There are very few methods that should require more than 3-4 parameters, and regardless, that's specific to how Moq works, that's not the only way to moch :) From: [https://softwareengineering.stackexchange.com/questions/145055/are-there-guidelines-on-how-many-parameters-a-function-should-accept](https://softwareengineering.stackexchange.com/questions/145055/are-there-guidelines-on-how-many-parameters-a-function-should-accept) &gt; According to "Clean Code: A Handbook of Agile Software Craftsmanship", zero is the ideal, one or two are acceptable, three in special cases and four or more, never! 
It probably is, but I'm not on that part of things. At this point I just want to have a practical understanding of how to not block the UI thread while running normal/synchronous processes via async/await rather than my old BackgroundWorker way. I have read C# in Depth and have a baseline theoretical understanding of things, but when I run the code I was getting the behavior I described in the OP. Now, with /u/Jestar342's advice I got the background process to run in, well, the background, but the UI returns immediately as I described [here](https://www.reddit.com/r/csharp/comments/8xzrhl/asyncawait_doesnt_seem_to_be_working/e270llz/). I think that once I get a better handle on this - as well as having time - I do want to do my best to pursue a "async all the way down" approach, but I'm not in that position at the moment.
That's not what he said. [Task.Run](https://Task.Run)() is not new Task().Start(). [Task.Run](https://Task.Run)() is a shortcut that should usually be used so you don't have to specify a ton of parameters every time for Task.Factory.StartNew().
&gt; I'd consider avoiding both Yes, in the case of an `Add` method I'd prefer different names too. However the arity of the function may be very meaningful depending on the case. Example: Connect(string strConn) Connect(string host, int port, string username, string password) That's a good use case for method overloading: the same action with different parameters. 
Yep, I should learn about Stopwatch; also I think the query completes on the line with r5 += query4.Count().ToString(); so it's more or less accurate
I just need to iterate through constant collection to compare some data with objects from collection. The goal is to get best performance.
I am using linq2db, not sure if its possible to enable such logging. For some reason I thought that linq is clever enough to replace my clumsy queries to good SQL one; looks like I was wrong. 
thank you again! I’m currently attending KCDC 2018!
Oh, I’ve edited post to be correct: “I created a local variable and assigning static field value to it” So, local variable will store the pointer to collection. It is not faster than using class field instead? Why?
Thanks, I’ve got it!
&gt;This collection is used by only one method, this means that I should use a local variable to reference it. I don't think that is necessarily true... I mean, if I had a value that took awhile to calculate and it would only ever calculate to one particular value during a given session... then I would likely just make the value static, I'd probably add a static constructor to the class to calculate the value. I may be wrong, and I'd like to see someone correct me if I am not... but reading a value of a static vs a local variable should be identical (If they aren't identical it should be negligible and it *should* if anything be faster to access a static variable as it would only have to jump to it's memory location rather then jump to the memory location of the object to read the memory location to jump to to read the collection.... 
I may be wrong either, but guys there saying that its faster: https://stackoverflow.com/questions/17703539/local-variables-or-class-fields https://www.dotnetperls.com/local-variable-field-optimization
This is the first time I hear about linq2db but some guy on their GitHub mentions that it is possible to intercept queries if you use the MiniProfiler integration. I suggest you find out how. LINQ itself is not clever any potential cleverness is in the LINQ provider (linq2db in your case). There are indeed some clever tricks but it is a leaky abstraction and you'd better not leave it unattended before you get a lot of experience with the specific provider. The experience does not directly translate to other providers. For example if you know that a certain query generates good SQL on one provider it may be terrible or even not supported on another. The reverse is also possible. If you get used to writing inferior LINQ because the provider handles it badly you may find that another provider is doing well. LINQ has quite a few benefits but replacing SQL or even generating good SQL is not one of it. You need to baby sit it.
Just add: LinqToDB.Data.DataConnection.TurnTraceSwitchOn(); LinqToDB.Data.DataConnection.WriteTraceLine = (message, displayName) =&gt; Debug.WriteLine($"{message} {displayName}");
true, but you could still explicitly name them different and I would probably do so in your example since the first "string" parameter represent completely different concepts/values... it is all a matter of style, and I'd prefer keeping the style consistent within the codebase.. but having said that I would prefer... If these are constructors being overloaded, instead create static factory methods and make the actual constructor private ``` Connect.WithConnectionString(string conn) Connect.With(string host, int port, string username, string password) ``` If these are methods then just name them differently ``` public IConnection ConnectWithConnectionString(string conn) public IConnection Connect(string host, int port, string username, string password) ```
Ah, ok. And this link shows some relevent IL : https://stackoverflow.com/questions/30205997/why-is-a-local-array-faster-than-a-static-one-to-read-write So, the reason for the performence increase doesn't have anything to do with actual retreival of data, but compiler optimizations. So, you're saving something like 2 instructions using the Compiler Optimized Local Variable retrieval IL. In any case, you'd lose that performance gain quickly if you were re-calculating the value each time vs calculating it once and using a couple extra instructions to access it. 
Yes, but you’re doing that *after* `t3 += ...`, not before, so it’s not included in the timing!
Yes, that's the information I was looking for. Although I have not encountered this, if I ever do, I will know what's going on. Thanks for the digest of the issue!
Always option 2. 
&gt; Interesting, I had exactly the opposite view: the lambda syntax was much easier Not surprising at all. I think it depends on your background with SQL and how much you've been using lambdas for other things. &gt; I still don't understand why this syntax was ever added to C#. Because it's a good syntax for querying and can be sent over the wire as a query tree and directly translated to SQL or some other query format.
UserManager&lt;T&gt; would need to declare T as a covariant type, *however*, that's only valid for *interfaces* and delegates. You may wish to consider an interface, IUserManager&lt;T&gt; where T is declared covariant: public interface IUserManager&lt;out T&gt; : // whatever would go here
I recommend using FreshMVVM. Google it, it made everything easier for me.
If you swap the order you run them is the time difference the same?
I've been trying something like this, however i keep running into issues because the Identity code that's part of .netcore won't accept variants. UserManager is part of the Microsoft Identity framework so i can't modify it. so is it just impossible to use polymorphism with generics (that aren't declared covariant )? There are a tone of interfaces in the Identity framework and none of them support co-variance
I'm not sure I understand the problem here. Maybe a minimalic example of the 2 classes and the lines the issue happens would be nice. However, I glanced upon the code in the GitHub and noticed: * You use local private variables to "save" your values in Form1.cs * You instanciate a new class "Attack" on line 580 in Form1.cs * You create a new insatnce of Form1 on line 17 of Attack.cs called "game" and use this to update your variables So you have at least 2 different instances of Form1. Is this what you want? I think you only want one instance, so you probably should pass the existing instance when creating Attack. You can pass the current class your code belongs to by using `this`. //Code in Form1.cs Attack attack = new Attack(attackLoaded[i], this); //Remove the part with "new Form1()" and change your constructor in Attack.cs public Attack(string atkName, Form1 game) { this.game = game; ... }
This is EXACTLY what i wanted THANK YOU!! Yea I know creating 2 Form1 was probably stupid but I could not find a way around it. Thanks!
Glad I could help 😃
I looked into your code, the issue is that you are getting the str value from the save file, and not from the actual runtime information. So basically you are loading on line 93 with a for, you are getting the info from the save file everytime you call for the info. Here is what i recommend. Create a new value for loaded info playerStr = loadedStr playerStr += attributePoint call playerStr when attacking (LoadedStr should only be called once in all the runtime) do this to every attribute.
Actually, use `Task.Run`
Not that I know of. There are a few on audible.com but they aren't meant to be listened to - I think it's a great idea with a real market but nobody's done it yet. The best you can do is a few podcasts that are c# focused (like .net rocks was at first) 
How often does the remote data change?
This is the most important reason to avoid default parameters. If you want to use them, do it in methods that can't be called from external assemblies. I also prefer overloading because default parameters are a sign that your method has some obscure side effects.
Yea that makes sense, thanks!
 I might be missing something as i've not used this assembly before. I am curious as to your use case though as i am a fan of powershell. --- There are two steps here: 1) Add a reference to the System.Management.Automation assembly to your .csproj file. [This nuget](https://www.nuget.org/packages/System.Management.Automation/) seems to be the "most official" version of the package. Some install instructions are in the link - various methods exist depending on old vs new .csproj format, VS vs VS Code, CLI, blah blah. So, you're adding the reference to your project, not your code. 2) Add `using System.Management.Automation;` to the top of whatever .cs files you wish to use [things the assembly/namespace exposes](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation?view=pscore-6.0.0). minimal example, using the "new" csproj: foo.csproj: &lt;Project Sdk="Microsoft.NET.Sdk"&gt; &lt;PropertyGroup&gt; &lt;OutputType&gt;Exe&lt;/OutputType&gt; &lt;TargetFramework&gt;net461&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include="System.Management.Automation.dll" Version="10.0.10586"/&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; program.cs: using System.Management.Automation; namespace foo { class Program { static void Main(string[] args) { var ps = PowerShell.Create(); } } } 
I’ve added the example, how do you think, is it acceptable?
Not really. What exactly are you having issues with?
You don't write xaml outside of forms.
I de-compiled a bit of my code to check. The default value is copied to the call site. Callers must be recompiled when the default changes
I do code binding with xamarin, I dont code the design, seems slugish. 
I figured this out, though not sure if it's the ideal way, but either way I'll leave this solution here for improvement and in case it's helpful to anyone else in the future. And anyway, this might be super basic to many of you out there in /r/csharp land. It seems that when you enable/disable form controls outside of the async method (the one with the await in there), the form controls get re-enabled as if the Task completed immediately. But when you have those calls inside the async method, then the controls aren't re-enabled until after the Task has completed, which is exactly what I want. So for example, if we have this method that disables a button and textbox so the user cannot interact with them while the process is running: private void setFormControlsEnabled(bool enabled) { textBox.Enabled = enabled; button.Enabled = enabled; } If we use it this way, then the second call to setFormControlsEnabled() happens immediately: private void button_click(sender, e) { setFormControlsEnabled(false); processDataAsync(textBox.Text); setFormControlsEnabled(true); } Where processDataAsync() is private void processDataAsync(string someValue) { Task&lt;MyObject&gt; processTask = Task.Run(() =&gt; synchronousProcess(someValue); MyObject processResult = await processTask; processResult.RandomMethod(); } But if you take those setFormControlsEnabled() calls out of the button click and put it into processDataAsync() like this: private void processDataAsync(string someValue) { setFormControlsEnabled(false); Task&lt;MyObject&gt; processTask = Task.Run(() =&gt; synchronousProcess(someValue); MyObject processResult = await processTask; processResult.RandomMethod(); setFormControlsEnabled(true); } The the UI's controls are disabled until the Task is complete, and all the while you can move, and alter the form size/state. Now onward to progress reporting!
 No, what I'm saying is he's asking about [Xamarin.Android](https://Xamarin.Android). Not Xamarin.Forms. [Xamarin.Android](https://Xamarin.Android) makes you write your user interface using the native platform, you don't write it in xaml like you do for Forms, it's not even an option.
 No, what I'm saying is he's asking about [Xamarin.Android](https://Xamarin.Android). Not Xamarin.Forms. [Xamarin.Android](https://Xamarin.Android) makes you write your user interface using the native platform, you don't write it in xaml like you do for Forms, it's not even an option.
Any podcast suggestions ? (Plenty of lists out there but i've looked at 'em. When searching yields nothing but "purpled" links i start asking humans hehe.)
https://vimeo.com/116986391
reading that book atm, must read!
DotNetRocks. MS Dev Show. Coding Blocks. 
Man, wait 'til they get a load of `void Foo(params Whatever[] blah)`!
I think audio books can't be really anything else than theories, because you really learn by doing or at least by seeing. Would be very boring to hear someone \_reading\_ code to you.
The default being visible to the caller is exactly the problem. And they're not "honest" at all. The compiler trick that allows them to work is as dishonest as code can get. When you add a reference to a library that defines, say, `public int DoSomething(int magic = 1)`, and then compile your app, the compiler generates a hidden `const int magic_constant = 1;` in *your app's code* and calls `DoSomething(magic_constant)` anywhere you call `DoSomething()`. If someone later updates that library to change the function definition to `public int DoSomething(int magic = 2)` and you just drop the library into your app's deployment directory, your app is still calling it with the *old, wrong magic_constant value* until you recompile. Worse yet, if they change it to `public int DoSomething(int notMagicAnymore)`, your app *still defaults to sending the old const value* unless you recompile it. Default parameter values are pretty much terrible. If you want callers to see default values/behavior in documentation, triple-slash comments exist for that reason.
I write all of my layouts in Android sutido then copy and paste into visual studio. It will look all jacked up in the design view in vs but renders like it looks in Android studio
In c# it can actually. It's a trick but, still. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/nullable-types/
Same problem with *any* public constant in C#, and the default parameter value on a public method is essentially a public constant. The compiler will freely inline anything that is a constant. Use `static readonly` for anything that isn't an honest-to-god constant. `PI` is a constant. `DEFAULT_MAX_THREADS` is not. No workaround for that problem on default parameter values, though.
&gt; Because it's a good syntax for querying meh &gt; can be sent over the wire as a query tree and directly translated to SQL or some other query format. Expression api I totally get and enjoy abusing on a regular basis. `Expression&lt;Func&lt;T&gt;&gt;` generation from source is a nice feature where it works as well (I've made myself heard on https://github.com/dotnet/csharplang/issues/158 and several previous iterations of that issue in other places over the years). I see how it would have been annoying to type: var oldPeopleNames = Queryable.Select( Queryable.Where( allPeople, p =&gt; p.Age &gt; (me.Age + 10) ), p =&gt; p.Name ); And get that extension methods have the benefit that you can represent methods that don't actually exist in expression trees pretty well: var oldPeople = Queryable.Select( Queryable.Where( allPeople, p =&gt; p.Age &gt; (me.Age + 10) ), p =&gt; p.Name.SqlFrobbleFunc() // extension method here enables the expression tree to represent calling a method ); // that doesn't exist on the .NET type But with extension methods, we got "lambda syntax" for free: var oldPeople = allPeople .Where(p =&gt; p.Age &gt; (me.Age + 10)) .Select(p =&gt; p.Name.SqlFrobbleFunc()); Were I designing the new version of language, I would have stopped there. Query expression syntax is both redundant and rather heavy baggage to have to take into account in every new language feature that comes after it. From a language design standpoint that seems like an absurd hill to try and climb.
I'll have to give this a go because for android I prefer android audio. 
We don't have a hard constraint to not use forms since we might have iOS at some point, just not a main priority. But I have seen this referenced before so I'll look into it!
I use named parameters for readability when I'm calling a method with inline constants. `DispatchMethods(5, methodList, 200);` vs. DispatchMethods(workerThreads: 5, methods: methodList, retryDelayMs: 200); 
Front end mostly. Or even getting the backend to add an item to a menu for example. Getting the logic to run isnt so bad, I have found RunOnUiThread very nice and simple. Even going from one activity to another is simple enough. But as soon as I tried getting the camera stream to work, or customize the default drawer menu icons to change to use FontAwesome icons, I couldn't. Those are my bigger issues I've had so far.
It varies; at times it can be many changes per minute, pause, a few changes per hour etc. etc. etc. It's very unreliable in that sense, hence the reason I want to build a solid (not SOLID) backend that can handle it; * Read from primary (3rd party) source as much as possible * Store that data locally in case 3rd party goes down (pauses) * At the same time store some of that data only in memory because of security reasons It's a big mess, really, and not something I thought I could encounter in 2018 (yes, it's an old system behind it all), but nothing I can do about that. :)
I highly recommend this blog series for understanding the limitations of variance better from a language perspective. https://blogs.msdn.microsoft.com/ericlippert/2007/10/16/covariance-and-contravariance-in-c-part-one/ Those limitations bleed through into the framework (both fortunately and unfortunately)
Typically console apps don't have much interactivity, so there wouldn't be much to do in terms of GUI tools. 
&gt;I'm trying to type the user manager to the interface type because in some projects my login api is backed by a mongo implementation and some are backed by mysql, but the rest api is the same regardless. Have you considered adding a type argument to your API implementation to represent the user type and registering each type separately? services.AddScoped&lt;UserManager&lt;MongoUser&gt;&gt;(p =&gt; ...); services.AddScoped&lt;UserManager&lt;MysqlUser&gt;&gt;(p =&gt; ...); in LoginService.cs: (assuming it's structured that way) public class LoginService&lt;TUser&gt; where TUser : class, User { public LoginService([existing args], UserManager&lt;TUser&gt; users) { ... } private UserManager&lt;TUser&gt; Users { get; set; } // example usage that shows retrieving an IUser from UserManager&lt;TUser&gt; // doesn't even need a cast! public async Task&lt;IUser&gt; FindByEmailAsync(string email) =&gt; await Users.FindByEmailAsync(email); } in MongoService.cs (assuming it's structured that way): public class MongoService { public MongoService(LoginService&lt;MongoUser&gt; login) { ... } } 
So, obvious question pertaining to the code sample, why not just create a UserManager&lt;IUser&gt; in the first place, instead of a UserManager&lt;UserModel&gt;?
&gt; (edit: syntax should always be nearly the last decision made when designing a new language feature) The expressiveness and clarity of the syntax are very important. Otherwise, we'd all be using LISP. Querying is its own domain and SQL is a domain-specific language for querying that is widely understood and suitable for the purpose.
Can't extend two abstract base classes 
Could you use the built in programs like ipconfig, ping, netstat? Are you familiar with reading the output of console programs? It's been 7+ years since I have messed with that kind of stuff, but I may be able dig up some examples. I can't think of any console apps off hand outside of the built in Windows ones, but if you just want something to work with, that could be a start.
In Python there's no method overloading. To do overload you use default parameters. And because all bindings are made at runtime, it's not as restrictive as in C#. On one hand I do think it's more readable (in Python) to write foo(color='red') or foo(shape='square') for calling in a function with a signature foo(color=None, shape=None) because it's clear what argument is being passed. On the other hand, if you have a lot of possible arguments, then overload is better to read at the function signature. In the end I think it's a matter of choice and style. If your all your team follows the same guideline then it's fine. But in a statically typed language like C# I think that default parameters can introduced a problem. Default parameters are great to introduce an extra parameter without breaking every method call of the method. But in my experience, you will miss method calls the need the parameter and then run in null pointer exceptions or divisions by 0. Default parameters can very easily introduce bugs, and this is why I stooped using them in C#. 
It's pretty much exactly what you wrote. Stick a dollar sign on the start of that and quotes around it, and you can insert variables exactly like that. ```cs var name = "Dave"; var myString = $"Hello, {name}!"; // myString : "Hello, Dave!" ```
Removed: Rule 4, Rule 2 (asking for pirated content). In general, sure. You can buy it and dive in. Also check out learning resources in the sidebar and at /r/learnprogramming and /r/learncsharp.
C# 6.0+
Yes, perhaps "hide" was a poor choice of words. Sudden unhandled errors on the UI or service threads are fun. I imagine the .ContinueWith would be safe enough in desktop, but suspect it is still dangerous in a web application (if it runs too long IIS can clean up the thread without allowing it to finish).
Because it just pushes the issue down the line. one of the arguments taken by the UserManager constructor is the storage mechanism Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt; then i just have the same casting issue with my IUserStore implimentation
You can't create an IUserStore&lt;IUser&gt;?
The way Identity works is that the manager takes a "Store" Implementation thats the part that communicates with mongo, then my API Login uses UserManager [Route("api/[controller]")] public class LoginController : Controller { public LoginController (UserManager&lt;IUser&gt; users) { ... } } Now if i changed that to [Route("api/[controller]")] public class LoginController&lt;TUser&gt; : Controller { public LoginController (UserManager&lt;TUser&gt; users) { ... } } I'm not sure how that would work since the mvc framwork auto wires the controller based on the fact that its a controller with a route attribute, I'm not sure how it would know what TUser is 
All Lazy&lt;T&gt; is going to do is change when the collection is initialized. With Lazy&lt;T&gt;, it'll be the first time Lazy&lt;T&gt;.Value is referenced. With a static intializer, it'll be just before a thread reaches any method referencing your myClass, regardless of whether myClass.myMethod() is ever invoked. Additionally, if any uncaught exception occurs in a static initializer, the class and everything in it is toast until the application restarts, which is a really weird thing to see and I guarantee nobody will ever expect it, just something to keep in mind. Best practices-wise, there's nothing inherently bad about using static initializers as long as they're simple, lightweight, have no side-effects, and leave nothing to chance. If you're going for absolute speed, your best bet probably be using the static initializer, using an array type instead of a List&lt;&gt; type, and adding the readonly keyword to your static array. But even with that, the only way you're getting an array onto the stack is by dipping into unmanaged territory and using the stackalloc keyword, and even then you can't make it survive past the end of the method which allocated it. Honestly, beyond some basic acknowledgement of garbage collection behavior it's rarely ever worth it to trick the CLR into being more efficient than the way it was intended to be used, you can end up shooting yourself in the foot and slowing other things down in the process.
Static variables are a crutch used by those that don't want to properly architect their software. They have many valid uses, but in many cases they're used for things that have no right being static. You should reconsider the circumstances that make you think this deserves to be part of your static state, instead perhaps some context object that is provided in calls, or through dependency injection.
No, the mongo c# driver uses the type to serialize the object, if i use IUser on my store then i get a runtime error "Unable to determine the serialization information" because now the mongo collection is typed as IUser and it only works when typed as a class
That’s not an int. That’s an “int?” Or “Nullable&lt;int&gt;”
So in method1(), it's going out and checking the current value of Program._temp1 and then storing that value +1 back to the same place. And it's doing that every single loop. In method2(), it's only reading from Program._temp1 once and writing to it once, but as a consequence it won't notice if another thread was concurrently messing with _temp1 at the same time, which would be a problem if you were doing something like tallying. If instead of a value type, _temp1 was a reference type and you were doing Program._temp._someValue++, that's now two levels of indirection each time _someValue is read in, because not only could another thread have altered _someValue since last time, it could have also change the reference pointer so that the object at Program._temp isn't the _temp from last time. It depends how it's being use as far as what assumptions you can get away with. In your case assigning a local reference to your static collection will waive one leg of indirection each time you access members of the collection, and that's fine as long as you can guarantee no other thread will mess with the static reference to the collection. Or you can include the readonly keyword and let the compiler waive the indirection automatically for while also forcibly guaranteeing that no other thread can tamper with the static reference.
Do a using statement at the top.
If the MongoUserStore isn't sealed, derive something like public class InterfaceMongoUserStore&lt;TConcrete, TInterface&gt; : MongoUserStore&lt;TConcrete&gt;, IUserStore&lt;TInterface&gt; where TConcrete : MongoIdentityUser { delegating the implementation of IUserStore&lt;TInterface&gt; back to the base implementation of IUserStore&lt;TConcrete&gt;, casting TInterface -&gt; TConcrete as needed. You run the risk of blowing something up if somebody passes in a TInterface that isn't actually your concrete type, however.
&gt; Static variables are a crutch used by those that don't want to properly architect their software. That's a pretty extreme stance to take, especially since this is a textbook case for using static data. There's exactly one set of data associated with a universally accessible static method. A singleton-mode dependency injection is just going to be that with extra steps. And this pattern doesn't even preempt the ability to mock data, assuming that's something useful for whatever this is. About the only reason I could justify for having an instance floating around for something like this would be if the whole thing, inner collection included, needed to be serialized for some reason, and even then I'd feel dirty for doing it.
&gt; I'm not sure how I should deal with several data providers, You might try [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient). The [Zamagon Demo](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) shows reading from MSSQL, MySQL, and WebAPI using both WPF and Web apps. 
&gt; Static variables are a crutch used by those that don't want to properly architect their software. That's a pretty extreme stance to take without qualifying what you'd consider a misuse. Unless OP is really badly misrepresenting his problem, that collection is either going to be a static member, or dependency injection in singleton-mode, which is just a static member with extra steps. Static instantiation or lazy-loading wouldn't even preempt data mocking, if that's even relevant to whatever this is, so about the only reason I can think of to keep an instance floating around for it over a static member would be for serialization purposes, but that would be really weird.
Is it IQueryable compatible?
No it is not, it only returns IEnumerable&lt;T&gt;.
We tried to avoid all IQueryable syntaxes as it is very slow. That's the reason why we stick using the simple Dapper until we developed this advance Micro-ORM. Remember, we are processing billions and EF and NH is not meant for that.
Are there any plans to support IQueryable in the future?
I could not see it in the near future, but who knows 2 years from now. Again, we aim to have a very good performance, and IQueryable is not the solution for that. May I know the reason why are you rooting for IQueryable?
Oh this makes sense, so I need to make sure that my primary key is the product names column. I have been a little confused as to how to approach this task. Thank you. That helps a lot.
I like using LINQ for making queries, whether in chain or query syntax. Though I see in your documentation you guys have your own expression tree that I may take a closer look at.
It doesn’t HAVE to be, but if you’re searching for one distinct row you would generally use the primary key as the search string. Let me know if you get stuck anywhere and I can send you some sample code.
EntityTypeConfiguration&lt;T&gt; class are a big draw for me, as I don’t like hanging attributes onto poco classes as it limits the ability to share them between assemblies without spreading the referenced assembly everywhere. And copying those objects to DTOs is wasteful in high performance use cases. 
Thank you for that. Our expression tree is also easy and direct to the point and is safe from SQL injections. It is almost the same as Dapper as we are use into it already. The reason why we developed RepoDb and is using Dapper is to avoid the slow IQueryable of Microsoft. We are avoiding the "ToList()" method of the IQueryable, because EF is composing a crazy SQL Statement. Below is a sample code to query Customer from DB where the Id is between 1023 and 1050 using RepoDb. ``` connection.Query&lt;Customer&gt;(new { Id = new { Operation = Operation.Between, Value = new [] { 1023, 1050 } } ); ``` or via Repository ``` connection.Query&lt;Customer&gt;(new { Id = new { Operation = Operation.Between, Value = new [] { 1023, 1050 } } ); ```
RepoDb is an attribute less library. We only introduce the attributes as requested based on the actual business scenarios. In reality, you have DTO in your application that is not matching on the name of your database objects (table, view, stored procedure). But, RepoDb will run without the attribute, and we are campaigning that even here in our company.
On thing I can assure of, using RepoDb, it will let you develop your application with right patterns and structures. And you will feel more faster than Dapper in terms of code development and on the performance itself. We are not anti-pattern like what Dapper did.
Link to the source?
For your review: https://github.com/mikependon/RepoDb
Maybe try visual studio code with the C# plugin? It's not like full Visual Studio, but it's still pretty good. 
You might be interested on our new ORM. It is awesome, named **RepoDB**. Docs: https://repodb.readthedocs.io/en/latest/index.html Package: https://www.nuget.org/packages/RepoDb/1.2.0-beta5 Syntax: ``` // returns IEnumerable&lt;Customer&gt; - all customers connection.Query&lt;Customer&gt;(); ``` or ``` // returns IEnumerable&lt;Customer&gt; WHERE Id = 1 connection.Query&lt;Customer&gt;(1); // or by name connection.Query&lt;Customer&gt;(new { FirstName = "ANNA", LastName = "Fullerton" } ); ``` or ``` // returns IEnumerable&lt;Customer&gt; WHERE Id &gt; 5 for the last 3 months connection.Query&lt;Customer&gt;(new { Id = new { Operation = Operation.GreaterThan, Value = 5 }, CreatedDate = new { Operation = Operation.GreaterThanOrEqual, Value = DateTime.UtcNow.Date.AddMonths(-3) } } }); ```
Does it support query multiple? 
It is a different approach from Dapper, I followed a model based approached and implemented the Recursive Query, Recursion Depth and solving the Cyclomatic Stackoverfow Complexity. This is the very latest feature and we enabled it at v1.2.0-Beta5. Not yet part of the documentation, but I can explain further about this. Note: I made the 15 secs Recursive Query of EF and Dapper to just 2 seconds, and this is no joke.
That's a good compromise. You'd want use a tool to measure the speed to be sure. Visual studio has a CPU Profiler built in.And I remember using one called Sleepy or Very Sleepy but the only ones I see by that name now say they are for C/C++... iirc you may be able to use those even though it's C# and not C++ 
that being said, there are a lot of concepts that would be very valuable. But they would have to be written specifically for the audio style. Like why use one pattern over another, what is clean code and how can you write it, and what are some security mistakes that many coders make, on a conceptual level. It's never going to take the place of learning to code, but it might clear up some things for someone who would otherwise be listening to the same tired songs on a long drive to work. 
Yeah when he reads like an asshole, of course it's not helpful. If he was trying to teach then it would be a totally different story.
Please never do that for real. It's a nightmare for the next guy to have to deal with, especially should additional overloads get introduced down the road.
Not with that attitude.
DateTime.Now should be plenty for database benchmarking. If there's any disk operations at all, the variance between runs is going to be on the order of tens of milliseconds so you're not getting any benefit out of sub-millisecond precision.
Here is the video for RecursiveQuery (https://www.youtube.com/watch?v=dv1jCZcqBEE).
There's too many ways this could play out to draw any conclusion without seeing the actual execution plan for each. But my gut says Table1 isn't indexed on FKey and that's causing the first query to overscan Table1 as it joins on Table0 one row at a time. The second query would suffer from the same problem but the aggregate workspace would only have as many rows as there are distinct FKeys and so would be proportionally quicker to scan. If that's what's going on, the proper way to deal with it would be to throw on another index just for Table1.FKey, which ought to make both queries perform the exact same execution plan and both ought to be dramatically faster than they currently are. The easy way is just continue using the second query as-is. It's probably the best performance you're going to get out of a Linq-generated query without any manual intervention.