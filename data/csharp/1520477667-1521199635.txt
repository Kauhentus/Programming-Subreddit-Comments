There is Task.Run
I using this code in WEBApi, if i use Task.Run. It will fire and forget and sometimes the thread got cancelled before it finished. 
UWP doesn't run on .NET Core. UWP runs on top of [WinRT](https://en.wikipedia.org/wiki/Windows_Runtime) which can be accessed from .NET, c++ and javascript. You should link to [this page](https://docs.microsoft.com/en-us/dotnet/standard/net-standard) if you want to explain the .net environnement. 
I do that in one place because I want the array to be resettable. When you copy the array, you automatically copy all of the pre-populated values at the same time. If you want to reset the array after making changes, you just perform the copy again. 
I'm really surprised that they didn't do that with other collection types. You take a real hit when iterating over a Collection&lt;T&gt; as compared to a List&lt;T&gt;.
Yeah that's totally wrong.
Yeah that's totally wrong.
In Visual Studio when you are developing a .Net UWP app, with the F5 debug experience your app is running on coreclr with a hybrid of .Net Core and UWP versions of the library. Some UWP libraries are different because they build on top of the native UWP implementations, for example HttpClientHandler is built on the UWP HttpClient. These libraries are used on coreclr in the debug scenario in place of the .Net Core libraries. Othe libraries are different because of aspects of the native tool chain. For example LINQ expressions are effectively an interpreted version of the expressions whereas .Net Core actually emits dynamic code using ref emit. These libraries only use the UWP versions when compiling to native code, otherwise the .Net Core version is used. Then there are libraries which are identical on all platforms such as the generic collections. These are identical on .Net Core and on UWP. Source: I work on the team building the .Net Core WCF client implementation and do some occasional work on the serializers in .Net Core.
[removed]
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [New to ASP Core - Best Authentication way for WebAPI](https://www.reddit.com/r/dotnet/comments/82uvgd/new_to_asp_core_best_authentication_way_for_webapi/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
And yet Microsoft's own ValueTuple's are very much mutable.
Task.Run coupled with the async savecontext API and awaiting the Task.WhenAll is definitely the most efficient way. 
The first three points are basically the same. A JWT is just a self contained token, meaning once issued it no longer requires the authentication server to validate it or to get claims from it. Owin is middleware that enables the usage of tokens. Have a look at identity server 4 there is a lot of samples for setting up an authentication server as well as many client samples for getting and consuming tokens as well
Dont understand what you mean by jacked up scope? If you want to log an exception without it crashing, I think try catch is your method. 
That actually feels more like a 4-column-structure, than the 3 columns in the old diagrams &amp; articles. If I understand you correctly, UWP debugging runs on some sort of derivative of/hybrid with .NET Core, but the final app does not, but still uses .NET Standard (when targeting the Windows 10 Fall Creators Update or later; correct? Thanks or the clarification.
Do you mean something like this? using(var context = new dbentities()) { var async1 = await Method1(); var async2 = await Method2(); var async3 = await Method3(); var async4 = await Method4(); if (async1 &amp;&amp; async2 &amp;&amp; async3 &amp;&amp; async4) context.SaveChanges(); }
I thought .NET standard is a set of APIs that is implemented by a framework. More like an interface. eg interface IDotNetStandard2 { // bunch of apis } platform DotNetCore2 : IDotNetStandard2 { } platform DotNetFx471 : IDotNetStandard2 { } platform MonovWhateverIDontKnowMono : IDotNetStandard2 { } etc so if my app or library targets .NET Standard 2 then I can compile against all these platforms that implement it. I didn't think it was a library in and of itself, it's a specification that frameworks implement and so if my Library&lt;FlavourOfTheMonth&gt; NuGet package targets .Net Standard 2.0 and .Net FX 4.7.1 implements that standard then I can use that NuGet package on that framework. 
actually, the only other option for me is taking a C# course that is focused on web applications or taking a Java course. 
How are you managing the users that are registered on your identity server? As far as I'm aware there exists only IdentityManger, which was discontinued after IdentityServer 3 I believe? 
As I am working on an errata anyway I will look into this to clarify it as well.
Nuget Package Manager in 15.6 is completely broken. Crashes immediately When trying to start. Nuget console freezes at Initialising Power Shell Host. But only when using an existing Project. Creating new Project it works fine. Xamarin is also broken. Can´t deploy because of System.Runtime.InteropServices.COMException at GetReferenceNearestTargetFrameworkTask.
Latter with `await context.SaveChangesAsync();` Makes most of idle time 
Yes if you use .net to target UWP. But if I use cppwinrt to do a UWP apps I doubt any part of it will use .net core.
Have you changed the output folder of the addin dll? I once did that when developing Outlook addin and it didn't properly register after build. Outlook then loaded addin from the old folder.
To add to this, if you do this inside a Word app, using old Office interop, then you should not do anything multithreaded with the Office objects. Threading with Office object model is complicated and usually not beneficial at all. You can read more about it here [https://msdn.microsoft.com/en-us//library/8sesy69e.aspx](https://msdn.microsoft.com/en-us//library/8sesy69e.aspx)
We went ahead and built our own. Definitely took a little longer than expected. Thinking we should have found an out of the box solution. I’m curious about what others did. 
The number 7 result on google for "factset api c#" is a reddit post a guy made. Maybe you could visit that page and maybe some of the replies have the answer. https://imgur.com/a/vtLmb
&gt; Do you recommend to install the nuget package? If you're using .NET Framework already then I wouldn't generally recommend using the NuGet package. &gt; Do I get any benefit from using the nuget package? I believe it has a few updates that aren't in the Framework version, but I don't believe any of them are significant. &gt; Will the Net Framework use it's "own" System.Net.Http regardless of the nuget package? Yes. &gt; Did I get everything wrong? (could you explain me if this is the case) You're generally on the right track, except this: &gt; If you wanted to use HttpClient with .Net 4.0, Ms introduced the nuget package System.Net.Http. The NuGet package is for use with .NET Core applications/libraries. So if you have a .NET core application you can just consume the NuGet package. If you try to load the NuGet System.Net.Http package into a .NET Framework 4 project you'll get a compatibility error. 
You guys are assholes, at least explain your downvotes
Read the .NET Framework Design Guidelines. If I recall correctly, they have some interesting discussions on this topic and the violations in the .NET Framework.
&gt; The first option have the advantage that we only pass what we need What specifically is the advantage...? When passing the "User" object it's just a reference, it's not like it's copying the object.
Don't worry about the downvotes, imagine some people are just overly competitive maybe. I think you brought some good improvements that others didn't touch upon, like the TryGetValue. I think your comments in the code was a nice touch to explain why you did things for OP, however, I find comments after lines of code to make things a little clustered and harder to read (especially in browser, I have to scroll horizontally to read them, yuck). I would just stick them before the lines of code being described. Extension methods are cool, no doubt, but you should be careful in using them, they has some particularly rough issues with namespaces, they can be difficult to understand where they're coming from and so on. Now, the problem was to fulfill 'public string IntToRoman(int num)', but many people seemed to attach static onto it here anyways so I doubt anybody cared about you also adding extension capabilities to it, unless they really hate extensions.
Interesting, and I love to see C# on Core2.0 perform so well, but these are all just plain Hello World examples. I was hoping for a little more than that. Not saying I want a performance comparison between the languages, those have been done elsewhere, but maybe access a file from AWS storage, perform a calculation based on a provided value, perform some simple DB query...
Ok, thanks.
That is the post I made one day ago.
🤔
Looks like the web access is wrapped in their own class packages. The Quick Start guide seems pretty clear how to get started. Importing packages and such. Creating the FactSetOnDemand object is going to be the tricky part. What I'd do is wrap the method in a try-catch and just start creating the object and call for data. If an error gets thrown, see if it indicates what data is missing. APIs like this are frustrating because they include everything possible, so it can be difficult to determine a minimum data set required to make a call. Where exactly are you stuck in this process?
Yes I'm aware of this issue. Here's a good article about this http://www.nimaara.com/2016/11/01/beware-of-the-net-httpclient/ It's sad that although httpclient makes things easier in some aspects, it also has these nasty caveats. Lately I'm considering using back ye' olde httpwebresquest. It's more hand made but you can easily create a helper class to make thing easier.
I totally get that (eyes his own downvoted response), reddit can be a fickle mistress. You spent time to come and help, then it's like somebody wronged you without spending equal effort and it doesn't even give you a fair chance to defend yourself... but it's best to just ignore the numbers as they don't really matter, and they don't actually mean you're in the wrong to begin with.
So they’re ignoring cold start times and not measuring throughput (just running a simple hello world function over and over) so these results seem worthless for just about any real world use case for Lambda. If you care about latency then you definitely care about cold start times and if you don’t you’re probably much more interested in sustained throughput than hot start times.
Learn C#. If you find yourself forced to work on a VB.Net project (as I currently am) it will take you very little time to transition. I actually got hired to this job despite having zero VB.Net experience. I have a lot of VB6, but no VB.Net prior to this. It's the .Net experience that matters, the language is secondary. (But C# is soooo much better than VB.Net).
[removed]
This post just came up on /r/programming and it may be of interest to you: https://www.reddit.com/r/programming/comments/82wpiw/the_redmonk_programming_language_rankings_january/ If you go for C#, you will have 3 of the top 5 programming languages under your belt.
Have a look to the courses of Mosh Hamedani
What kind of advantage you get if u go code first? 
LOL. U Americans...
Bit of history. Back around 2000 a lot of people coded in VB6 and initially VB.Net was supposed to provide a bridge for those people. In reality it was not a great strategy. The skills needed to code in VB6 did not directly transfer to VB.Net. Most everyone back then went directly to C#, metaphorically ripped the plaster off fast. VB.net did find a few niches. It included support for optional parameters which made it good for Office interop, but C# added all those features later. So for you, I'd forget VB.Net unless you have a very specific need for it. You'll struggle to find up to date help if it's your language of choice. You're going to learn the same things regardless of language, but you'll find it much easier to get support if you adopt C#. 
C#. I've actually worked with VB "developers" and safe to say the stereotype is painfully true about them.
How do these tests account for the underlying hardware? Is Amazon hardware performance stable?
They’re ignoring it because unfortunately .net core has one of, if not the, worst cold start times out of anyone on AWS lambda 
Serious deals!
Ok so i figured out private void Sleep_Click(object sender, EventArgs e) { using (PowerShell PowerShellInstance = PowerShell.Create()) { PowerShell ps = PowerShell.Create(); ps.AddScript(@"D:\Desktop\alllightsoff.ps1"); ps.Invoke(); } } is working, but instead i dont wanne create *.ps1 files for each command and put the commands in the app itself
Lucky you. I got hired to a job where they still do vb6. Very confusing coming from a c# background. 
And Lynda.com too. There's a good chance you already have access to it for free through your public library if you live in a big city.
If my memory serves correct, then you should stick to calling .ps1 files for your commands. It's a lot less headache than creating a new Powershell pipe or whatever dark sorcery it is to build the script dynamically.
Have you considered using [`Invoke-Command`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-6)?
Why not? I mean, he/she can learn both. 
It’s a waste of time.
Go C#. I was with VB since v3, went from 6 to dotnet years ago and haven't stopped cursing it yet. Shop finally switched to c# as they went asp mvc, and even though I hadn't done anything c based since college (in a previous century), I immediately felt more comfortable. Trend-wise, 5 years ago you could find VB.net examples of everything, now - good luck.
Declare the web service object outside the try..catch block, like this: MyWebServiceClient client; try { client = new MyWebServiceClient(); // do something with client } catch { // handle any error here } 
Avoid superdatascience like the plague. Go for anything by maximillian, colsteel, frank dane. What kind of courses are you looking for?
&gt;&gt; Vector3 position = GameObject.FindGameObjectWithTag ("replace").transform.position; Use a random Vector3 position. Unity is using the first object found that has the replace tag on it.
Like this: Invoke-Command -SessionOption $options -ComputerName HTPC -ScriptBlock { params($foo) &amp; 'HarmonyHubControle.exe' $foo } -ArgumentList @("10.90.1.8", "issue_device_command", "42458302", "Light7") Of course, this goes in your `ps.AddScript()` method. I have also shortened the path for brevity. If you want the values of "10.90.1.8", "issue_device_command", etc. to be dynamic, then you can build this `Invoke-Command` statement as a string, replacing the necessary parts with the desired values. Hope this helps.
Anything really, I want to end up competent with network integration but gotta get through the basics first I guess. I like the idea of doing a project, like I got more from Scott Lilly's RPG than I did from Bob Tabors course. I'm thinking either [this](https://www.udemy.com/unityrpg/), or [this](https://www.udemy.com/create-your-first-rpg-and-fps-multiplayer-game-in-unity/) atm.
i think this is going to the right correction, the code still shows me some errors ps.AddScript("Invoke-Command -SessionOption $options -ComputerName HTPC -ScriptBlock { params($foo) &amp; 'HarmonyHubControle.exe' $foo } -ArgumentList @("10.90.1.8", "issue_device_command", "42458302", "Light7") 
Very similar languages but C# is the da wey to go given the current market and usage.
Just do some profiling in VS or with Resharper to see if your API requests spend a lot of time in reflection code vs business logic and then decide imperially. I suspect that unless your API is super low latency (sub millisecond level) reflection won’t add any noticeable performance lag. Unfortunately when you ask questions here all that happens is just a bunch of people yelling at each other because they “disagree”. 
&gt; The NuGet package is for use with .NET Core applications/libraries. So if you have a .NET core application you can just consume the NuGet package. If you try to load the NuGet System.Net.Http package into a .NET Framework 4 project you'll get a compatibility error. No it won't, it properly defines net45 and net46 targets so it will handle those frameworks fine. Whether it installs an assembly or references an existing one is up to whatever the target framework is.
&gt;Should I be worried about using Reflection for every request that arrives at my API? Maybe, maybe not! Like other posters have said, you need to measure. On the web application I work on for work, we had a particular path that did reflection, which was hit on almost every request. On the one hand given our current load and server horsepower, total CPU usage and latency were fine. On the other hand, that little bit of reflection was the number one CPU hog on the whole site! So as traffic to our site grows, it would have become a problem eventually, so I went ahead and got rid of it, as it was trivial to do so. 
Performance in programming is always relative. Reflection is slow in the sense that calling a method with reflection can be ~100x slower than a direct call, but even 1000x of a nanosecond is still just a microsecond. It depends on the context. If you're doing it in a loop millions of times, it may be the difference between button click taking a few imperceptible milliseconds or a whole second. But if you do it a dozen times while handling a web request sent across the world, you might not even be able to measure the difference. When worrying about performance, always benchmark instead of making assumptions.
Mosh has some really good video series.
http://deviq.com/static-cling/
The name of the package should correspond more to the namespace than the main class. This is what most Microsoft packages do. Third-party packages sometimes use a name that's entirely different from their namespace (for marketing purposes more than anything, I assume).
&gt; Is Amazon hardware performance stable? Probably not. [Even EC2 instances of the same type](https://www.reddit.com/r/aws/comments/547xbx/netflix_found_5x_performance_variation_between/) on AWS suffer from performance variance.
namespace WindowsFormsApp1 { public partial class Form1 : Form { double months = 0; public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { double savings, interestAnnual, months, total, interestMonth; double.TryParse(txtSaving.Text.Trim(), out savings); double.TryParse(txtInterest.Text.Trim(), out interestAnnual); double.TryParse(lblMonths.Text.Trim(), out months); double.TryParse(txtSaving.Text.Trim(), out total); interestMonth = (interestAnnual / 100) / 12; total = (total * (Math.Pow(1 + interestMonth, months))) + (savings * (Math.Pow(1 + interestMonth, months))); lblBalance.Text = total.ToString("c"); } private void btnNextMonth_Click(object sender, EventArgs e) { months++; lblMonths.Text = months.ToString(); } private void btnExit_Click(object sender, EventArgs e) { this.Close(); } } } 
namespace WindowsFormsApp1 { public partial class Form1 : Form { double months = 0; public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { double savings, interestAnnual, months, total, interestMonth; double.TryParse(txtSaving.Text.Trim(), out savings); double.TryParse(txtInterest.Text.Trim(), out interestAnnual); double.TryParse(lblMonths.Text.Trim(), out months); double.TryParse(txtSaving.Text.Trim(), out total); interestMonth = (interestAnnual / 100) / 12; total = (total * (Math.Pow(1 + interestMonth, months))) + (savings * (Math.Pow(1 + interestMonth, months))); lblBalance.Text = total.ToString("c"); } private void btnNextMonth_Click(object sender, EventArgs e) { months++; lblMonths.Text = months.ToString(); } private void btnExit_Click(object sender, EventArgs e) { this.Close(); } } }
&gt; C# added all those features later. VB still has xml literals!
namespace WindowsFormsApp1 { public partial class Form1 : Form { double months = 0; public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { double savings, intAnnual, months, total, intMonth; double.TryParse(txtSaving.Text.Trim(), out savings); double.TryParse(txtInterest.Text.Trim(), out intAnnual); double.TryParse(lblMonths.Text.Trim(), out months); double.TryParse(txtSaving.Text.Trim(), out total); intMonth = (intAnnual / 100) / 12; total = (total * (Math.Pow(1 + intMonth, months))) + (savings * (Math.Pow(1 + intMonth, months))); lblBalance.Text = total.ToString("c"); } private void btnNextMonth_Click(object sender, EventArgs e) { months++; lblMonths.Text = months.ToString(); } private void btnExit_Click(object sender, EventArgs e) { this.Close(); } } }
this is what I have so far! 
If the compile target of your app is netcore or netstandard then you need the nuget package, if the target is netframework then you do not. Not sure if the package is compatible with netframework 4.0.
A great book is C# in a Nutshell (it's a very big nutshell at over 800 pages). Clear and concise, it makes an excellent reference.
"Real world" is not one use case. If you have to call lambda infrequently then cold start is important but if call volume is high then cold start may not mean that much. 
Stack overflow will be your best friend
In my part of the world VB.Net programmers shall we say generally struggle to learn and companies that are wearing a lot of technical debt. Avoid at all costs. 
I wouldn't advise this. It isn't a great practice to run parallel queries here. I know it would work, since you're using a new context for each, but it is still a bit hacky. Plus, your real problem is you're trying to solve a set problem with iterations. I am quite certain this problem will be reduced if you use the correct sql statements. If you don't want to write the sql statements yourself, you can still have EF generate them, but you'll need another nugget (such as https://archive.codeplex.com/?p=efe) to do set operations. The parallel approach is a bandaid solution imo. Fixing the either the Query or DataModel will be the much better approach here. 
First and foremost you will have to excuse me because it is late here, and I am not as accurate as I would normally be if rested. This is probably not the best answer, but I hope it will get you going in the right direction. So it looks looks like you are setting up your total in the method. Your essentially reseting your variable "total" each time it's ran. So you could do the same thing you did with months and put it in the class/global scope. This will let it survive as your application runs. So I slapped together a bit of scratch work here. just so you could visualize what I'm saying. void Main() { //simulate the user clicking 3 times for (int i = 0; i &lt; 3; i++) { app(); nextMonth(); } } //set global/class vars here. double months = 0; double total = 0; private void app() { double savingsMonthly, intAnnual, intMonth; //inputs savingsMonthly = 600; intAnnual =37; //calculate monthly interest intMonth = (intAnnual / 100) / 12; //get the total. the total should now persist since we moved the variable declaration outside of the method scope. total = (total * (Math.Pow(1 + intMonth, months))) + (savingsMonthly * (Math.Pow(1 + intMonth, months))); Console.WriteLine("total " + total); } private void nextMonth() { months++; Console.WriteLine("Month " + months.ToString() + Environment.NewLine); } The above code will return this. total | Month -----|----- 600 | 1 1237 | 2 1952.02809236111 | 3 Hope this helps. If you have any questions, or need clarification let me know. Hopefully I read your issue correctly haha. If this is what the issue is then you were super close to the solution.
So...why would you ignore that then? Seems like a rather important metric to conveniently leave out in an article about *AWS lambda* performance testing.
You are retrieving the value of the text boxes in the Form Load event. The user won’t have entered anything yet when the form loads! You need to retrieve the value of the text boxes in the Button Click event instead. I’m on mobile right now so I can’t see if that’s the only problem, but it’s the most obvious. Hint: learn about breakpoints. If you set a breakpoint in your code on one of the lines that retrieved a text box value, you’ll see straight away that it’s not happening at the right time.
If you're saying they should ask this question on stack overflow I absolutely disagree. This would be a very poor question for stack overflow. 
True :) My lazy writing, I was supposed to be highlighting the features that made VSTO a PITA back at the start. I can only just remember now, didn't we C#ers have to add lots of "Missing" for all the parameters we didn't want to provide? 
could you not create your object outside the try catch and instantiate it in it? this way you can use it everywhere, even outside the try/catch.
It's impossible to believe that Amazon still has to fix the impossibly long cold start time of lambdas in a vpc. 15 seconds to run a 200 milliseconds script is unacceptable... Sorry, had to vent
A common convention is to have Company/Organisation name then product then component then follow the directory hierarchy. So Acme.Equipment.Optical.MagnifyingGlass as a contrived example. Acme is the company, Equipment is the badly named product, Optical is the component and this code is in a directory called MagnifyingGlass. In this case the project would be called Acme.Equipment.Optical.csproj What you want to avoid is namespaces that are so generic they might clash. There are plenty of ways of getting around clashing namespaces, but they're really there to fix up the work of idiots rather than fill in for good planning. If you don't have a company/Organisation make the project name expressive. So instead of Acme.Equipment.Optical you might have CartoonProps.Optical. I quite often use my Initials for organisation; XXX.CartoonProps.Optical, just try to make sure the namespace means something. This is really an extension of the "Give things meaningful names" rule of development. As an example, don't call a unit test "TestWorksProperly()". That means nothing and suggests you don't really know what the definition of "works" is. 
Sort of. You'll find Microsoft packages follow the convention I detailed above for none framework code packages. So .Net framework classes might live in System.... assemblies, but more general Microsoft libraries might be in Microsoft... assemblies. The line between "Framework" and "Microsoft" blurs a little at times. For 3rd parties, it's not marketing, it's to avoid namespace clash. You'll find lots of projects have a "Common" or "Shared" bit of their namespace somewhere so by prepending their company or organisation name you help guarantee uniqueness. As I said above, there are lots of ways of getting around namespace clashes but they're there to fix exceptions. The best approach is to aim to minimise namespace clash.
Seems like it is indeed fixed https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes#15.6.1
What errors? You ommitted the definition of `$options`, but you have to add that before `Invoke-Command...`, like this: ps.AddScript("$options=New-PSSessionOption -SkipCACheck -SkipCNCheck ; Invoke-Command ...") 
I like courses from Brad Traversy, mostly web dev. However, he offers also a lot of tutorials on YouTube.
What is the error? 
You have two choices. Either put the whole of the method concerned inside the `try` block. Or, if you know there's only a small part of the method that might generate exceptions, put only that bit in the `try` block, but make sure any variables that are needed *after* the `try` block are declared *before* it. For example, if your code is currently: int x = MyMethod(); DoSomethingWithAnInt(x); and it's only `MyMethod()` that you want in the `try` block, you would do this: int x; try { x = MyMethod(); } catch (Exception e) { } // Do something with the exception; DoSomethingWithAnInt(x); 
No, he's quite serious. See comment by /u/Totenlicht. 
Form1 is the Name of the class and not the name of the instance of the class. You need something among the lines Form1 form = &lt;Form1Reference&gt;; form1.activate() with Form1Reference being something like new Form1() You likely have something like Application.Run(new Form1()); You could change that to Form1 form = new Form1(); Application.Run(form); and somewhere else (given that `form` is in scope (e.g. as a parameter)) form.activate();
Good design dictates that the dev tools window doesn’t know about the existence of the main form. That way, the dev tools window can be used over and over again in different applications, perhaps with different main forms. Therefore, the correct way to go about this is that the dev tools form should raise an “event”. The main form then listens for the event, and calls activate() when the event fires. If you think about it, this is exactly the way Microsoft have designed Windows Forms. For example, a Button raises an event because it doesn’t know about the code that will eventually receive the event, and your code handles that event when it happens. It’s the same here... your dev tools form raises and event because it doesn’t know about the code that will receive the event, and the main form receives the event. There are plenty of tutorials online about events, so I’ll let you research them from here, but feel free to post or message me if you need more help.
Breakpoints (Debugging generally) in C# + Visual Studio is gods heaven. Learn to fully be able to use these tools, and you will have a good time developing stuff.
Plus he would get destroyed by the community for asking such a thing...
I suggest some kind of a utility class that holds the values you need to change. Then when the main form is loaded, or whenever you need to call that information you do so. 
using otherFile; otherFile.function(); 
mm im keep trying, my knowledge about c# is very very basic. ps.AddScript("$options=New-PSSessionOption -SkipCACheck -SkipCNCheck ; Invoke-Command "C:\Program Files (x86)\Home Control\HarmonyHubControl\Release\x86\HarmonyHubControl.exe" -ArgumentList @("10.90.1.8", "issue_device_command", "42458302", "Light7"); Gives me syntax errors
I think you are way over thinking this. Ask yourself a simple question: does it work and achieve the business goal? If you answer yes, it's "good enough."
Hmm...
Use a logging abstraction in the backend layers, and configure the actual logger implementations in the executable/startup code.
I think this method will do what you want if you invoke it in your C# code with the correct arguments, but really you need to specify what error message you are getting. void RunScriptWithOptions(string computer, string ip, string command, string commandId, string label) { using (var ps = System.Management.Automation.PowerShell.Create()) { ps.AddScript($"$options = New-PSSessionOption -SkipCACheck -SkipCNCheck ; Invoke-Command -ComputerName {computer} -SessionOption $options -ScriptBlock {{ param($arg1, $arg2, $arg3, arg4) &amp; 'C:\\Program Files (x86)\\Home Control\\HarmonyHubControl.exe' $arg1 $arg2 $arg3 $arg4 }} -ArgumentList {ip}, {command}, {commandId}, {label}"); ps.Invoke(); } }
Oh I’m with you, I’m just pointing out the reason why they probably did.
I would do as /u/tweq recommends, but use somehting like Serilog which will give you the outputs you require. Once you have the logging abstraction right you can potentially log from any point of they system. After that the question would be where do i want to push these logs to. [Serilog](https://serilog.net/) allows you to configure sinks to push messages to different sources. making it easy to configure the output of your logs.
Wow thanks! Ya that seem to do the trick! Thanks so much for taking the time to write this all out!
Thanks for the tips!
Logging has been done to death, you can find many logging libraries and their comparisons via google. I have experience with [nlog](http://nlog-project.org/) and [log4net](http://logging.apache.org/log4net/index.html).
Could you elaborate on the problem you are trying to solve? Fibs are relatively simple and make for a fantastic interview question.
 Never would have expected c++ in a c# sub
Yes, that solution is for WPF, but there is a more universal solution. The AppDomain (AppDomain.CurrentDomain) has the event UnhandledException, which you can use for the same purpose. It also has FirstChanceException, which allows you to catch the exception early instead of late.
I have to write a programm, that asks the user for an integer m and the computes and prints all Fibonacci primes (fibonacci AND prime number) between 0 and m (including). On a new line print the total number of fibonacci primes found
Where are you stuck?
You need one of two things: either a reference to an object that can communicate with Form1 (or a reference to the Form1 object itself) or your dev ops window needs to expose an event that, when invoked, the subscribing object will call the `Activate` method on the Form1 object. &amp;nbsp; The first option is achieved by injecting the object we need via the dev window's constructor. Something like this: public partial class DevWindow : Form { private Form1 MainForm { get; set; } public DevWindow(Form1 mainWindow) { InitializeComponents(); MainForm = mainWindow; MainForm.Activate(); //example } } Option 2 is more involved. Let me know if you want an example of that as well. &amp;nbsp; Peace.
Beginning😅
C is C regardless if it is naked || ++ || sharp. 
Thanks! So, I am modding someone else's code for work. This block here: static void MyHandler(object sender, UnhandledExceptionEventArgs args) { Exception e = (Exception) args.ExceptionObject; Console.WriteLine("MyHandler caught : " + e.Message); Console.WriteLine("Runtime terminating: {0}", args.IsTerminating); } Would it go in the same {} as the constructors or?
What does "beginning" mean? You can't cout? Btw, wrong sub, this one is for C#, completely different language
I would say learn C# first, not because this is a C# sub but because once you've got C# down, VB.Net feels very similar and is (or was in my case) **very** easy to learn. If you have formal education in Java, C# is going to feel pretty familiar to you. Don't get too hung up on languages though, they're secondary. Learn programming fundamentals.
But what about Java? I mean you could say it’s C and offee
AP CS Teacher here. I am not giving you the answer. Scaffold your project: *You know you need a main or _tmain depending on your requirements. *You know you need a function (either static or class instance based) that takes an int as a parameter. There is no stipulation on the return value. I would return a pointer to a String. This would enable the caller do as they wish with it whether it is output to file, web service, or console. *You know you need to output from 0 to m *You know you need to determine if each integer between 0 and m is a prime. *You know you need to determine if each integer between 0 and m is a fib number. *You know you need to determine if each integer between 0 and m is both a fib and a prime The algorithm from there goes timtowtdi. Makes sure you comment profusely. 
What I tell my students... going for C++/C# to Java is much like going from a color laser jet to a black &amp; white dot matrix. Java is the bane of my teaching. Really wish the College Board would adopt more a modern language like C/C++/C# that wouldn't handicap the students.
That is funny. 
I have a singleton class that has methods in it for my logger. I pass in info from all other classes and it's only responsibility I logging. Info and greater levels go to console, if they are debug level it gets encrypted into a text log. Is it overkill, yes, but when a defect is open I can decrypt the logs and find problem within a couple minutes via transaction ids
Definitely VB.Net. All the kids are using it. 
**facepalm**
You think c is more modern than java?
C &amp; C++ can compile into a nice little compact package. Albeit processor and OS dependent. C# and Java less so. Both can do all kinds of pretty things. There is a major reason why high-performance video games are done in ASM, C, and C++. 
There's very specific reasons, none of which has anything to do with which is more modern. C# is more modern than java and both are significantly more modern than c and c++. And though c# and c++ have backwards compatibility in many respects in terms of syntax, they are entirely different languages in both paradigms supported and memory management. I get that you're simplifying things for your students but I think you are way oversimplifying, especially the relationship between c# and c. 
&gt;Are you using a join table? Because you're going to need to use a join table. table with only foreign keys yes. Doesn't show up as a poco in ef6 tho so i have no clue how i'm supposed to insert on it. &gt;Use outer joins the .DefaultIfEmpty()'s in the middle of the query looked even worse than those cross joins i'm using now but i might give it another go XD I was hoping someone who knows the method syntax a bit better than me would come up with a nifty way to format that kinda query. 
Good code is acceptance-tested code.
If you are making network calls, don't worry about reflection.
Removed: Rule 3, Rule 4.
Perhaps conditional serialization might work? https://www.newtonsoft.com/json/help/html/ConditionalProperties.htm 
If your forms are .xaml files and have .xaml.cs for codebehind then you are using WPF. Your .xaml files should reference an xml namespace like this: "http://schemas.microsoft.com/winfx/2006/xaml"
Oh, it is a DLL, no UI.
&gt; Doesn't show up as a poco in ef6 tho That sounds like a problem; join tables are definitely supposed to use poco classes (and each record type should have a collection of the join table poco objects representing its associations with the other record type). That said, I usually do code-first, so I'm not sure how to get the database-first migration to generate those poco classes for you.
Well, the problem isn't choosing what properties to serialize - I'm already doing that with the contract resolver. I need a way to apply JsonExtentionData to a property from the contract resolver. 
If you're doing c# with a UI you're probably going to be using wpf, which many have mixed feelings about. However, I couldn't say what the experience is like in vb. However, c# is a much more heavily used language so it may be better to do it in c# so you can put it on your resume for your next job. 
Not using WPF then.
Log4Net is the way to go. Super easy to use and set up. 
lol Looks like someone downvoted me. Sorry for the total noob question. This is my first C# project ever. It is updating someone else's code for a new web service for work. My only professional coding experience is PowerShell. I have no resources here at work I can ask. Last time they got an MS consultant to write this thing and no one knows how his code worked until I started taking a crack at it. I have access to SkillSoft classes, but don't know which one(s) to take or have enough time as this project is waiting for me to learn this one DLL and mod it for the new site plus I have other duties at work, ugh. Sorry.
Thank you for the link, though there's a lot of people in that thread highlighting that the sources aren't as good as the OP said they are. I'm guessing there's more reliable research somewhere.
Use a callback event to the main window. https://stackoverflow.com/questions/19383345/async-delegate-invocation-and-callback When the subform needs to send a callback to the parent window, it just calls the callback. The parent window then handles the event.
Could you link some examples?
It doesn't *really* matter where MyHandler is, but it's usually easiest to put it in the class that has Main/App_Start. The important part is that you run *this* code in your Main/App_Start code: &gt;&gt; AppDomain currentDomain = AppDomain.CurrentDomain; currentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyHandler); ...which is what directs MyHandler() to be used to handle UnhandledExceptions. If you wanted to 
Parallel.Invoke or Task.Run would work, but I think your problem is just submitting 1 row at a time to the database. You want to batch them using TVP and a stored proc. http://www.c-sharpcorner.com/uploadfile/78607b/using-table-valued-parameters-in-entity-framework/ You can still do this in parallel if you want.
I used log4net and it was easy and could hook into our enterpize splunk. Great for service stuff and webserver stuff. And thick client ztuff
net core can reference net standard packages just fine. did you mean to say full fat net framework? for example, magick.net explicitly states that it supports "- .NET Core (.NETStandard 1.3 and higher on Windows)"
Wow! Thanks for the tip! I am still learning all this and that sounds like exactly what I need.
No worries! Feel free to post any follow-up questions, I'm always happy to help out beginners. It sounds like this is a learning exercise for you, so I'd wholeheartedly recommend sticking with this project and continuing to build on it.
Not exactly what you are asking, but it sounds like you want to get the data but only parts of it. If you were to put a layer of OData on top of your service / controller, it naturally supports selecting to include only the columns you want. Further more, if you are using MVC, there is an Odata nuget package that requires almost no changes to your code or any new code for that matter.
Yeah, this is for work. I am technically a professional developer, lol I am re-writing someone else's code to connect to a new web service. It worked before the web service was updated and now the owner of the updated service says my DLL is not even making web calls. I didn't change the code that makes web calls, so I don't think that is possible. But I am not in a "guilty until proven innocent" situation and need to log what is happening to prove if it is making a web call or not...
Do not let logging considerations influence the design of your business layer. In fact, when modeling a layer or a class, you should not worry about collaboration until you have identified all the responsibilities of the current layer or class and are ready to think about how it interacts without its sphere. In this particular case, the important responsibility of the *business layer* that will address logging is, "Sends out notifications of processing progress". Once you have this, you don't have to think in terms of "Logs outcome of processing". To fulfill this responsibility, the business layer needs to have a notification protocol which is likely to be implemented with a C# interface. So, you would end up with something like this. namespace BusinessLayer { public interface INotifications { void ProcessedPresentation(string info); } public class Processor { INotifications notifications; public Processor(INotifications notifications) { this.notifications = notifications; } public void ProcessPresentations() { foreach (...) { // do the processing notifications.ProcessedPresentation(...); } } } } namespace Application { public class Logger : INotifications { public void ProcessedPresentation(string info) { // do the logging } } } As you can see, your business layer is not coupled to any logging library; in fact, it only knows how to send out notifications. Your application code is what implements the handling of the notifications. It can log the information to event viewer or to files; print it; email it; or whatever else you decide to do with the info. 
Well that's what I actually do, but instead of coordinates, it's objects (spawn points) placed in a scene. Then I remove them both from the list with spawnPoint.Remove (spawns); and from the scene with DestroyObject (GameObject.FindGameObjectWithTag ("replace")); 
Shameless plug https://github.com/lloydjatkinson/log-wrap Or any other abstraction. It bugs me how often I see people using log4net deeply in their architecture but will happily abstract other things... don't forget logging too!
Erm no
No? Is there something better?
Ah shit, I didn't mean any offense. Well, if you hadn't assigned the MyHandler code to be used to handle exceptions by calling... AppDomain currentDomain = AppDomain.CurrentDomain; currentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyHandler); ... and that MyHandler code kicks off some sort of Post to a logging endpoint, I could definitely see that causing some sort of problem.
No offense taken. This is literally my first professional programming assignment ever. The last time I coded anything was in c++ back in Borland in 1991, lol I have been in IT and am an ACE PS scripter, so I got tagged with this assignment as the most likely to be able to figure out what the previous guy did and replicate it... So, that is what I meant by "technically" lol LMAO oh crud, this just got real, lol
NLog
Do you have a reason for your preference?
Here, you forgot this: **/s** You're welcome.
The last actual code commit for log4net was May 2017 (https://github.com/apache/logging-log4net/commits/master). Even then, it's a meagre code change that shows nothing is really happening with it. The last 30 commits of which stopped around June of 2017 were all build configuration. Meanwhile, NLog's last commit was 2 days ago (https://github.com/NLog/NLog/commits/master) with actual code changes. Log4net has had 3 contributors and 50 stars, NLog has had 127 contributors and 2909 stars. Furthermore, compare these: https://github.com/apache/logging-log4net/pulse/monthly https://github.com/NLog/NLog/pulse/monthly log4net has had 0 PR's this month meanwhile NLog has had 27 merged PR's with a further 31 on the way. Finally, the NLog site and documentation are light years ahead of log4net's. Log4net has been in maintenance mode for a long long time, and working with it has a number of quirks NLog simply does not have.
If the properties have the same names on the Dbmodel as the viewmodel, you could do something like this: Dbmodel.GetType().GetProperty(propInfo.PropertyName).SetValue(Dbmodel, propInfo.GetValue(model)); You might also want to look into AutoMapper :)
Have you tried creating a dictionary or other way to map one property info to another? You could then go (pseudo): foreach (var p in properties) { dbProp = map[p]; if (p.Val != null) dbProp.Val = p.Val; } Prior to this you could have an init method that sets up mapping between the two models.
You need to reflect the db models properties as well. The easiest way is matching the names. As someone else has said AutoMapper is perfect for this sort of thing.
I recommend C# the syntax is modeled after c/c++ which is a much more common. I.E, Javascript, java, c, c# all share a similiar style syntax but visual basic uses a very verbose syntax that, personally, I think makes more complex code harder to understand. It isn't a terrible syntax to get started with.. but you'll likely need/want to learn c style syntax anyway... and once you know c# vb.net is pretty much unneccessary. Anything you can do in vb.net you can do in c# and vb solutions can use c# projects as references... 
Thanks, that's interesting. I'll give NLog a go for my next project. 
Right now you are getting a count of how many times it occurs in the table, not the quantity. Are you looking for something like this? var query = Equipment .GroupBy(f =&gt; new { f.TypeID }) .Select(g =&gt; new { type = g.Key, Count = Sum(x=&gt; g.Quantity)}); 
Stopping by to recommend [Serilog](https://serilog.net/) as well. I recently had to replace log4net on a large enterprise application with something better, and Serilog was so easy that I finished the task in like thirty minutes.
Nope, it's fine without the parens, that was my mistake!
Btw... you can chain where queries into multiple lines to make these kind of things more readable. 
I'm also a noob programmer, so please forgive my silly questions I just can't find it online anywhere. 
 var lookuptable = Types.Select(x =&gt; new { x.Type, x.Id }); var joinedTableResult = query.Join(lookuptable, l =&gt; l.type, q =&gt; q.Id, (l, q) =&gt;new {q.Type, l.Count}); I tried this, it gave me an error in the join clause saying argument null exception, any ideas? my lookup table has two columns one is ID and the other is Type which is the name of the equipment.
 var query = repo.Objects.Where(x =&gt; x.Test == false); query = query.Where(x =&gt; x.AnotherTest == true); query = query.Where(x =&gt; x.LastTest || x.ReallyLastTest); They're all treated as &amp;&amp; for the purposes of the final query but its far easier to see what is actually going on, especially for queries with a lot of where conditions.
 var testQuery = Equipment .Join(Types, e =&gt; e.Id, t =&gt; t.Id, (e, t) =&gt; t.Type) .GroupBy(x =&gt; x); This gives me the name but not the quantity, I think I need a count somewhere. Do you recommend anything I can read so I can understand this a bit more clearly? thanks!
Ah great! Didn't think of that and it definitely makes it easier to read. Thanks!
Each grouping has the count. Are you even trying it?
Learning is a waste of time? For the downvoters, do you really think that learning any language is a waste of time?
Compared to c#? Absolutely 
Word of caution, ensure you still have an IQueryable between each statement. Don't do a ToList() or whatever between otherwise it will split your queries. 
I'm working on www.bettercoder.io where I am trying to build a list of job interview questions together with answers and tools that will help both developers and technical recruiters or tech leads. Would love to hear your feedback...
Regarding Xamarin.Android, Sometimes I get really weird build issues with Xamarin. I spend a while googling them, and in the end it's usually either solved by updating my NuGet packages or by cleaning and rebuilding the solution. Had an issue recently with images that I was trying to display in a Layout. I put them in the drawable-xxx folders, built the solution, but the images didn't exist. If I deleted one, cleaned the solution, added it back in and rebuilt, it would then work.. sometimes. I don't know if this is a Visual Studio issue, because it's supposed to process the file in some way before it can be uses in an Android layout, or if it's Xamarin, but sometimes I have annoying issues like this.
ELIJ (Explain like I'm a junior): IQueryable extends IEnumerable to add, well, querying a datasource (e.g. LINQ to SQL). 
IQueryable is a live query and needs and open database connection. IEnumerable should be, but is not necessarily, a "dead query" that operates only against something in memory.
wow - that helped so much. Thank you!!!
Traditionally an IEnumerable has stuff in it that you can enumerate. The stuff is already there. When you ask it for stuff it just gives it to you. An IQueryable will get and give you stuff when you ask for it. It traditionally doesn't contain stuff, it needs to get it's stuff from somewhere else, and generally does something to modify that stuff before it gives it to you. Here's some more information: http://blog.bartdesmet.net/blogs/bart/archive/2008/08/15/the-most-funny-interface-of-the-year-iqueryable-lt-t-gt.aspx If you have time, it would be well spent getting lost in this guy's blog. Hasn't been updated in a long time, but the information there is gold. 
Not true. IEnumerable iterators also compose. Though calling `ToList`/`ToArray` or using `foreach` will force it to iterate.
IQueryable is basically used more with LINQ while IEnumerable is more associated with generics collections like lists. That's the most I know about it. I'm teaching myself this stuff too, but it's great once you learn it.
Definitely better than my explanation.
Don't really expect it for a junior dev, they will just barely be able to use collections and generics as it is. Really I am not sure I would require it from a senior other than "something something LINQ, I think" simply because in my career I have used IQueryable directly exactly 0 times. Through a mediating API like LINQ its used all the time, its just not really exposed other than as return types that are most ignored as the generic parameter is most important as long a IEnumerable is supported.
C# is closer in syntax to Java so it would be easier to pick up. MSDN has API and many solutions can be solved on stack overflow. If you feel the need for a book, it is either O'Reilly series for reference or Head first for a lesson approach. I've worked with C# for about 5 years and I had to work in VB for about a couple months for an application. I found it rather easy to pick it up but hated it. For the benefit of your resume, learn C#. VB.net is going the way of the dodo
IQuerable compiles into a query that executes against a data source. An example is using an IQuerable C# statement to generate a SQL query against a database. IEnumerable lets you process collections of data in memory using c#. This won't be an interview question for entry level positions.
Has VS ever been stable? - guy who works for Msft 
It's a terrible interview question. People who have never used .NET will have no idea (and you shouldn't be limiting yourself to only .NET devs). Even most people who use .NET don't touch `IQueryable` unless they are doing LINQ to SQL. I've been working in .NET for almost a decade and I've never touched `IQueryable`. Even when I work with SQL, it's usually via Dapper.
The asynchronous task-based stuff is neat.
linq is pretty handy
Xamarin forms. Easy answer. Kind of steep initial learning curve, but worth it. Xamarinuniversity.com.
Agreed :) 
Linq, auto properties, reflection, and async. 
Vs2012 was okay after the second update
Technically you can get IEnumerables directly from the database without an IQueryable and query from there, but yeah the biggest difference is that you can remotely execute your LINQ operation on the database instead of pulling the entire thing into memory.
Opportunity cost. Whenever you are learning something, you are spending time that could have been spent doing something else. It is possible to inefficiently be spending time learning something less useful.
Xamarin is a great tool. It has some annoying build issues sometimes, but other than that it is basically building a native app within a C#. Generally I would say C# is a better language than what Google and Apple use. This makes a lot of things simpler, such as instead of using a listener object in Java it uses C# events. I would not say Xamarin.Forms is not ready for complex apps yet. It is getting better, but if you want to do anything complicated it is going to be a lot more work than just using native APIs. This is because if you need to create a custom control there is another layer of overhead you have to create. 
Depending on the type of app, Unity might also be a good choice. Unity can be great for making apps with complex graphics.
So like 7 minutes?
Being able to call in c++ dlls and going unsade since interact with both c# and c++
Generics and collections. And LINQ as a result of those features. Being able to just add stuff to a List&lt;&gt; or Dictionary&lt;&gt; or whatever is SO much better than the bad old days of having to use arrays for everything.
Well, my main use for it is, as said before, Unity which is much easier to use C# for than other Mono variants. But yeah, C# is pretty derivative
Any enumerator could be doing that, not just yield return.
I like that fact that C# can be used for almost anything.
I'm ok. Kinda tired. Thanks for asking!
&gt; either solved by updating my NuGet packages or by cleaning and rebuilding the solution. To be fair, that's pretty common with bog standard .NET these days as well.
Asynchrony is pretty great. If you just want to wait for something without blocking the calling thread, it's quite simple here; but alternatives for Java, for instance, seem to be not so simple.
Totally agreed. For a junior level understanding, I think this explanation is sufficient. It should be more or less true for most of what a junior does with their time. As with most things programming related, any simple explanation is a lie.
Stable as in doesn't crash? I don't think I've had any crashes.
Try using ienumerable.where vs iqueryable.where with your db trace running one will select all then filter the other will select where and return the result very important difference when dealing with large data sets. One processes as an in memory array the other is evaluated into an SQL statement.
Lol this is an interview question I use
I work in a .NET workplace, and this is the first time I've heard of `IQueryable`. (I understand `IEnumerable`) Should I be worried? 😅
 public class Foo { public int Id { get; set; } //[JsonExtensionData] public IDictionary&lt;string, JToken&gt; ExtensionData { get; set; } } public class FooContractResolver : DefaultContractResolver { protected override JsonObjectContract CreateObjectContract(Type objectType) { var contract = base.CreateObjectContract(objectType); if (objectType == typeof(Foo)) { contract.ExtensionDataSetter = (o, k, v) =&gt; { var foo = o as Foo; if (foo != null) { if (foo.ExtensionData == null) { foo.ExtensionData = new Dictionary&lt;string, JToken&gt;(); } foo.ExtensionData[k] = new JValue(v); } }; } return contract; } }
Eh, it doesn't *need* a connection, nor a database. That does happen when working with databases, a somewhat common case.
This combined with async/await and the tooling having amazing autocomplete is what makes me love C#. A language itself can be amazing, but if the tooling for it sucks then it's not going anywhere, and same with the opposite. 
How have you not touched iqueryable in a decade. I'm over a decade deep and it's used in places far more than SQL. I've had to deal with it in POS "OPOS", working with raid disks, and random places with WMI. All are Microsoft, not third party, technologies. You likely HAVE touched it but just don't remember.
That would make sense if IQueryable didn't also implement IEnumerable. The latter is just an abstraction over any steam of logical data that you can enumerate through, the former is an abstraction over lazy-evaluated streams of data that are resolved by querying a data store.
Entity framework with lazy loading. If you use entity framework, normalize your db and include the relationships in your model you don't have to use a bunch of complex joins. http://www.entityframeworktutorial.net/lazyloading-in-entity-framework.aspx
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication7 { class Program { static void Main(string[] args) { Console.WriteLine("How many users will you register? "); int users; bool loop = true, isFound = false; string[] username, password; string tempusername, temppassword; username = new string[10]; password = new string[10]; users = Convert.ToInt32(Console.ReadLine()); for (int x = 0; x &lt; users; x++) { Console.WriteLine("Please enter the user's name: "); username[x] = Console.ReadLine(); Console.WriteLine("Please enter the user's password:"); password[x] = Console.ReadLine(); Console.WriteLine("User {0} has been registered at index of {1}", username[x], x); } Console.WriteLine("Please test a few of the user accounts?"); while (users &gt; 0 &amp;&amp; loop) { Console.WriteLine("Enter the user's name:"); tempusername = Console.ReadLine(); Console.WriteLine("Enter the user's password:"); temppassword = Console.ReadLine(); for (int x = 0; x &lt; users; x++) { if (tempusername == username[x] &amp;&amp; temppassword == password[x]) { Console.WriteLine("User login successful at index of {0}", x); isFound = true; break; } } if (isFound) { Console.WriteLine("User not found!"); } Console.WriteLine("try again? 1 - Yes, 2 - No"); temppassword = Console.ReadLine(); if (temppassword == "2") { loop = false; } else if (temppassword == "1") { loop = true; } else { loop = false; } } } } }
Are you allowed to use LINQ? 
Im not sure but we're only allowed to use Visual Studio
That's dumb. You should be using jetbrains rider. Way lower hw reqs, teaches programming way better. Free for students. 
Well this is under a course in my program so i dont really have any other options :\
Is the course called visual studio or c#?
Can you use a dictionary instead of arrays?
Something like that, yeah. It's being taught in my school.
No, we can't. We are only to follow what was given :\
Extension methods, linq, collections, nuget, visual studio, dapper
This is a Google question. 
Ok. I'm on mobile so I can't do this very well. But I think the function would look something like this given the restrictions. Once you've got the users entered name and password, pass those variables to this method. The full username and password arrays would need to be passed too by the look of the existing structure...Also, this is a bit messy because I'm combining the method to look for the username in the list and validating the password. Ideally those should be split into 2 separate methods but sounds like you're only allowed to make 1? No doubt there's an easier way to write this. So don't take my word for it haha. bool ValidPassword(string enteredUsername, string enteredPassword, string[] allUsernames, string[] allPasswords) { //store the index of the username for checking passwords if username is found int usernameIndex = 0 int count = 0 // check username exists bool usernameFound = false; foreach(var user in allUsernames){ count ++; if(user == enteredUsername){ usernameFound = true; usernameIndex = count; } } if(!usernameFound) return false //username is found //because of the way the user names and passwords were already collected you can just check the password at the same index as the username return passwordEntered == allPasswords[username Index] ; } 
I love this wide range what you can do with C#. I mean I have one language an can programm with WPF for Desktop, with Xamarin for mobile, with Win 10 IoT on dedicated devices such as Raspberry Pi 3 and with Azure and ASP.NET for the cloud. All this with one language that brings greate tools with it.
I love this wide range what you can do with C#. I mean I have one language an can programm with WPF for Desktop, with Xamarin for mobile, with Win 10 IoT on dedicated devices such as Raspberry Pi 3 and with Azure and ASP.NET for the cloud. All this with one language that brings greate tools with it.
[Here's a solution using a lot more of the C# language](https://gist.github.com/Miesvanderlippe/5e2cfa17e375f328a5ed657459b53b93) [Here's a solution closer to yours](https://gist.github.com/Miesvanderlippe/aa7c1bd902af97d93314fd3dbaca6ea6) I've added explanatory comments to the first solution and critique to yours. Don't take it the wrong way. I added it for you to learn from, not to bash you for being a beginner. Also don't be sad your coding style differs from mine or that you don't know all of C#'s syntax. You're a beginner and that's not a bad thing. 
Caveat - don't copy and paste this because it definitely won't work. Spelling errors etc. Type it out and see if it gives you what you're after. 
Blazor's not here yet, but when it is, you are right! Until then, I'll get some other dev to do the shitty javascript stuff.
That beeing said: dont use winforms . Start with WPF, it will get you further in the long run.
For sure! Alt-enter everything. Yeah, I kind of strayed away from C# but i the toolsets are a big part of what makes using C# great sooooooo...oh well. 
&gt; IQueryable is a representation of a abstract syntax tree that acts on an IEnumerable. A junior might not know what an AST is, so I'm not sure that's a good explanation.
I think this explanation teaches the wrong lesson and is likely going to introduce misconceptions. Especially since the fact that LINQ to Objects (which operates entirely on `IEnumerable&lt;T&gt;`) is lazy is one of its most confusing aspects.
IEnumerable when your datasource is not that expensive,, IQueryable when it is. At a very high level. IQueryable also intels something about being more attached to the datasource. Which imho is a bit of the problem with the interface itself.
&gt; IQuerable compiles into a query that executes against a data source. That's not necessarily true, you can write e.g. `new int[] { 1, 2, 3 }.AsQueryable()` to get `IQuerybale&lt;int&gt;` which does not compile into a query (unless you have a very wide definition of what a "query" is).
Nope, I’m in the same boat. Worked with .NET for years, large code base, currently C# 7/.NET Framework 4.7.1, and I didn’t use IQueryable. And I do remember. It depends on what you do, I guess. 
Well, IQueryable is an abstract system to make it possible to implement what you described. 
`IEnumerable&lt;T&gt;` forms the basis of LINQ to Objects, so I don't think it makes sense to say that IQueryable is used more with LINQ.
It's in the name: `IEnumerable&lt;T&gt;` represents an [enumeration](https://en.wikipedia.org/wiki/Enumeration), or a sequence of items. `IQueryable&lt;T&gt;` represents a query, often against some kind of a database. Using LINQ operations on `IEnumerable&lt;T&gt;` means that those operations will be directly executed in memory. On the other hand, LINQ operations on `IQueryable&lt;T&gt;` can be compiled to SQL or a similar query language and executed on some remote database. In both cases, most LINQ operations are lazy.
It's really, really unlikely you've never used IQueryable at all, though it's entirely possible you've never used it explicitly or on purpose.
I did that and it gives this error: Visual Studio cannot start debugging because the debug target &lt;file location&gt;\&lt;Project name&gt;\&lt;Project name&gt;\bin\&lt;Project name&gt;.exe is missing. Please build the project and retry, or set the OutputPath and AssemblyName properties appropriately to point at the correct location for the target assembly.
Loving the new string interpolation stuff. I say new it’s been here a while now but it’s great 
I'd recommend WPF as well. Is there a specific reason that you're drawn to winforms? It's not a bad technology actually, in some ways it's simpler than WPF because it's not quite as opinionated but that also means you have to solve a bunch of problems for yourself and that's one more thing to learn right now. You could probably skip the learn C# bit and pick it up as you go along. Your Java will allow you to fill in the blanks pretty quickly, so just pick a course that teaches WPF, or Winforms if you really want. You might want to read a little about how generics work in C#, it's different to Java, interfaces too, LINQ as it's really good and can look totally alien. Threading and async too. ... Ok, there are a few things you'll probably have to read up on, but honestly you can find out about them as you discover them or come back and ask questions if you get stuck.
&gt; void RunScriptWithOptions(string computer, string ip, string command, string commandId, string label) &gt; { &gt; using (var ps = System.Management.Automation.PowerShell.Create()) &gt; { &gt; ps.AddScript($"$options = New-PSSessionOption -SkipCACheck -SkipCNCheck ; Invoke-Command -ComputerName {computer} -SessionOption $options -ScriptBlock {{ param($arg1, $arg2, $arg3, arg4) &amp; 'C:\\Program Files (x86)\\Home Control\\HarmonyHubControl.exe' $arg1 $arg2 $arg3 $arg4 }} -ArgumentList {ip}, {command}, {commandId}, {label}"); &gt; ps.Invoke(); &gt; } &gt; } im getting 0 references
WinForms is an old technology. It does not translate well to mobile development. It has no real programming model behind it that offers good testability. It is not as customizable. It does not play well with HighDPI Screens. I could go on. Yeah. The learning curve is a bit steeper.. but it is the better choice (TM) if you start in 2018.
...Pretty much a .net feature written for and because of C#...they go hand in hand.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [I built a library to make pattern matching against Roslyn syntax trees less horrible • r\/csharp](https://www.reddit.com/r/programming/comments/83eqjs/i_built_a_library_to_make_pattern_matching/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I think the danger with this question is your showing how smart you are and possibly not giving a junior a chance to show how smart they are.
Yes, WPF can but UWP cannot. UWP is another XAML based system that is used for Windows Store apps. Xamarin do another XAML based framework for mobile development. But WPF works in Windows 7 perfectly. XAML is as simple of as complicated as you want to make it. You can still drag a button off the toolbar onto a window and double click it to get to some code behind and make it do something, just like Windows Forms. There's probably a bit more to learn with WPF but that's because they include solutions to problems you will have in Winforms and will have to create a solution for yourself. WPF is not perfect, it will leave you scratching your head, but so will Winforms :) There's no rush though, Watch an introduction to WPF, like an hour or so and see if it starts to gel, you can always try Winforms if it doesn't. In the long run I think you'll find WPF helpful especially if you want more than just a button on a form. 
Use typescript man
&gt; Even most people who use .NET don't touch IQueryable unless they are doing LINQ to SQL. It's used with Entity Framework too. 
Automagic (de)serialization for instance, or when working with attributes. Sure you can work around it but it does make some things easier :) 
Thanks for your precious tip, folk! 
Thanks for your precious tip, folk!
Thanks for your precious tip, folk!
Thanks!
Thanks, guy! But that link you've posted isn't work! :(
Imagine a modular system where the services to be loaded are specified in a configuration file. Reflection makes it much easier to do this.
LINQ to data providers*
Link is down. Also what framework do you use? WinForms, WPF,...?
And in Forms it feels like you depend on the WYSIWYG-Editor to move things around or dive directly into code, since the file you have that saves all the position and property stuff is a generic c# source file that grows into an utter mess. With WPF you have this clean, seperated file that is pretty easy to get a first idea if you've done anything with HTML before. The whole Binding Stuff can get pretty hard to wrap your head around, but once you get used to it, it makes everything so much cleaner and everything.
No one talking about expression trees? An IQueryable object works with an expression tree which is either a lambda or a query (method syntax and query syntax). The expression is a data representation of the LINQ query/code. This expression is then analysed to know what the intent of the expression is. This intent is then translated to whatever: SQL, web services calls, morse code, custom data retrieval, etc. An IEnumerable simply states that it has access to object through an iterator. It is general used for "in memory" access. [Expression Tree Basics (MSDN blog article)](https://blogs.msdn.microsoft.com/charlie/2008/01/31/expression-tree-basics/)
&gt; C# Features: Linq, generics, a bunch of collections, properties, lambdas, on-the-fly out parameter declaration (about all the syntactic sugar which makes your life easier) Well, Linq, generics and collections are .net features (you can use it in vb.net and F#).
IEnumerable can be an aggregation of data manipulations while IQueryable is an aggregation of query manipulations. One is playing on the data itself and the later is on the request to get that data from an external souce. Both will be executed when they are enumerated. Which is when you call foreach, take a part of the results or transform the results to a specialized collection (ToArray, ToList, etc). More than often, IQuerable is used against an sql source, because it's one of the few implementations that is included in .Net's api (System.Linq.Sql).
- Auto properties and getter only auto props - async/await - using static - expression bodied members - null conditional operators (?: and ??) - declaration expressions - pattern matching
&gt; How would you describe the difference to the junior? Generally speaking that means someone using EF. Most senior devs haven't seen IQueryably in any other context.
That seems to be the theme here: technically correct answers that are useless in the context of the question.
That's a great idea! I recently successfully made it through a coding interview and landed the job, I'm still a little fresh on this. I'd add a section about general CS topics like data structures, sorting algorithms, memory maps, and big O notation. Another great topic would be discreet mathematics. Set theory is a big one for data science and SQL devs, and linear algebra may come up too. 
What uses it besides EF/Linq 2 SQL that you've actually used?
First-class pattern matching combinators are an interesting idea. My initial thought was to eliminate some intermediate bindings by null coalescing as-expressions: var memberAccess = (((methodDeclaration.Body as BlockSyntax) ?.Statements[0] as ExpressionStatementSyntax) ?.Expression as InvocationExpressionSyntax) as MemberAccessExpressionSyntax; if (memberAccess?.Identifier.Text == "WriteLine" &amp;&amp; ... But that's not really cleaner. My next thought moves more along your lines, where you create reusable functions or extension methods that match certain compound patterns and bind results: if (methodDeclaration.Body.IsInvocation(out var invocation) &amp;&amp; invocation.IsMemberAccess(out var memberAccess) &amp;&amp; memberAccess.IsStaticCall(out var name, out var expression) &amp;&amp; name.Identifier.Text == "WriteLine" &amp;&amp; expression.Identifier.Text == "Console" &amp;&amp; invocation.ArgumentList.Arguments.Count == 1 &amp;&amp; invocation.GetArgument(0, out LiteralExpressionSyntax literalExpression)) Assert.AreEqual("Hello world!", literalExpression.Token.ValueText); Anyway, just some random thoughts. I'll definitely check out your library if I ever do any Roslyn work.
I would not use the Microsoft namespace and package name. Consider using your own name or something neutral like "RoslynPatternMatching"
Of course you are correct, but if you take it very precisely everything used in C# is a feature of the CLR/the .NET Framework :-)
From my perspective, the nice part of using MediatR is that everything is hooked up using DI container. If you want to add a new behavior after C# event is dispatched, you need to manually subscribe to it somehow - can't image that such code would look clean with many subscribers. Would these event handlers be static, or per instance? You have potential memory leaks if event emitter lives longer than subscriber, so you have to always remember to unsubscribe manually in such cases. With MediatR (or similar library), as long as you register all handlers from assembly instead of adding them one by one (I've seen such code, it wasn't pleasant), all you need to do is to create a class that implements specific interface. Everything else is automatically taken care for you by DI container - including handling dependencies. With default configuration, container will create instance of your handler before it's needed, and it can be garbage collected just after it's done, as nothing holds reference to it. As a nice bonus, this pattern encourages (though not forces) creating single class per feature. While at the beginning it looks like a chore, I've seen too many services which started out as a nice looking class with two or three public methods and ended up with thousands lines of barely related code (in many projects, class like `UserService` being the prime example). You can have better separation of concerns, even in projects which don't use micro services. If you call your event handles indirectly (or query/command handlers, as it's also useful for that), you also get a nice bonus of handling cross cutting concerns in a single place. You can easily handle errors, log execution details, handle transactions perform some cleanup, etc. for all or a subset of your handlers. You won't get that with C# events, unless you use tool like PostSharp.
Spontaneously (not being a C# programmer) this looks like a huge improvement but coming from "let's simplify a horrible API!" and not "how would this API look if it was great?" I'm gonna spitball some pseudo code for an alternative matcher to the one you have above: if (buildMatcher("Console.WriteLine(__token__);", p =&gt; expression = p.Token.ValueText).IsMatch(methodDeclaration)... Maybe? I've thought a lot about making similar AST matcher stuff in python, but never had the time to get to it :P
Oh, I love it too! After C++ strings, I’m never going back! 
In the future it will be a reserved namespace on the NuGet gallery. But that announcement was several months ago already... so who knows when it will land. It's unclear what will happen with existing packages using the "Microsoft."-prefix that are not by Microsoft.
I did it because as of my project I have a few more and thought it looked nice (and I'm lazy). As I said, just a proof of concept right now. Maybe later if I do decide to put it up, I'll change it, even if only the package/assembly name.
The biggest problem I have with the manual stuff, besides readability, is that it products a lot of locals. If you have a few of these in a method, at some point you start to get crap like memberAccess2/3/4 which is just a mess. The way I did it now you only get locals that you actually need. Your approach looks nice and maybe I can incorporate something similar, but you still have that issue.
It's small, but I love the ?., ?[, and ?? operators. I'm currently working at a job that uses java, and the Optional interface just doesn't feel as clean. 
This seems to be a nice use-case for a domain specific language. Specify the pattern in a specially designed language (which then is sort of a C# meta-language). Embed this language in a string, and have a runtime matcher using that string. Bonus points to earn for a C# emitter, and extra bonus points is you make it a MSIL emitter.
Well, aside from the fact that a .NET career of any length where you've literally never touched code that uses either of those technologies would be a really weird one, it's used in pretty well every Linq provider beyond Linq2Objects, and in some cases you'll even use it there. You might not know you're using it of course, which is my point, but if you've used a Linq provider to anything you've probably had IQueryable in your code.
Does it build at all?
In its current state, Blazor is actually not bad for tools and little prototypes.
Almost true. Resharper made VS usable. True top down refactoring enabled development is only fully doable with jetbrains in c#. This is what students need due to the auto suggestions. The best developers or ones that truly are interested in being better do not use plain VS. Roslin continues to be a usable pipe dream a decade into that effort. So for someone learning to code c#, rider is everything that was good in VS when fixed by resharper without the bloat. Ignore at your own peril.
You could cache a code-gen'd matcher by string key, making the first call expensive but subsequent calls very fast.
Oh, you meant my version with the string is slow, I thought you meant your API. True. 
Uhm, that should be doable with Antlr. That itself is a DSL to create parsers, which would allow something like this to be created. The DSL itself spits out C#, so kind of ticks all your boxes. It does sound a bit overkill though 😊.
I was thinking about caching and with my current approach. The only thing I could think of was doing something with dynamic so I could generate some code that caches the the tree and reuse it. That'd be complex though because if the closures. This at least would solve the caching issue.
I have seen quite some Roslyn AST matching code. All is difficult to follow, you really need to "be into it" or read it a few times. It would be really nice if the mental overhead of understanding the matching pattern would be reduced.
Do you know about expression trees? https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/ They allow you to programmatically construct new functions at runtime that are compiled into IL (and then JIT'd just like normal statically typed code) making them as fast as the handcrafted matcher.
That's kind of the reason I wrote this. It's nearly impossible to understand what is doing if you need to get back to it later. At least I comment what it's trying to match; that helps. I thought if I at least make it look like the syntax factory stuff, it's more familiar and easier to recognize.
Agreed, but I dislike the name focus. It’s “just” a generic collection library, at least for most people. Stuff like that doesn’t have a fancy name in other languages. I realize that LINQ can mean more than that, but for many people it doesn’t. 
JetBrains Rider for the win! I’ve used it for some months now, and it’s (IMO) so much better than Visual Studio. 
A lot of LINQ are language features: extension methods, lambdas, expression trees, anonymous types, automatic type inference (created for LINQ), query syntax.
I dislike var. It too often results in having to read extra code just to figure out what type is being used. 
Ok that sounds pretty cool! Does it handle comparisons of lists? It's not that bad having to use several Assert.Contains, but a single equality test for lists would be awesome.
&gt; If you have a few of these in a method, at some point you start to get crap like memberAccess2/3/4 which is just a mess. Right, that's why I suggest making reusable functions a standard idiom so the locals that are bound are hidden within those functions. I only bound the expressions whose state is actually being tested. So the above expression could be wrapped up as an reusable extension too: public static bool IsStaticCallTo(this Expression e, string type, string method, out var InvocationExpressionSyntax invocation) { return e.IsInvocation(out invocation) &amp;&amp; invocation.IsMemberAccess(out var memberAccess) &amp;&amp; memberAccess.IsStaticCall(out var name, out var expression) &amp;&amp; name.Identifier.Text == type &amp;&amp; expression.Identifier.Text == method; } public static bool GetArgument&lt;T&gt;(this InvocationExpression e, int argIndex, out T arg) where T : Expression { if (e.ArgumentList.Arguments.Count &lt; argIndex) return false; arg = e.ArgumentList[argIndex] as T; return arg != null; } And then your code would look like: if (methodDeclaration.Body.IsStaticCallTo("Console", "WriteLine", out var invocation) &amp;&amp; invocation.GetArgument(1, out InvocationExpressionSyntax lit)) Assert.AreEqual("Hello world!", expression); Or something like that anyway. I'd have to play around with it a little to define some good idioms. You would quickly build up a set of reusable compound expressions that would make most of your pattern matching code very short, and with no performance overhead.
Agreed. however, generics was an implementation for c# that was baked into the entire .net framework. The majority of the things mentioned in this thread are non-existent without generics.
This looks cool -- how does it compare to Clang AST Matchers? The idea looks similar -- write a pattern-like expression rather than a bunch of chained expressions in a huge if statement? https://clang.llvm.org/docs/LibASTMatchers.html FWIW there is some related discussion about representing code with trees here: *From AST to Lossless Syntax Tree* https://news.ycombinator.com/item?id=13628412 http://www.oilshell.org/blog/2017/02/11.html https://github.com/oilshell/oil/wiki/Lossless-Syntax-Tree-Pattern -- Roslyn does seem to be a great example of this, and probably one of the earliest ones, in the sense that it was built into the compiler and not an "extra" package on top. It's interesting that you find working with the tree difficult, as people have said it's difficult in C++ and Go as well. 
I'm definitely going to try this out on my next project, it sounds like you put a lot of thought I to it!
Maybe something like Func&lt;SyntaxNode, Tuple&lt;T1&gt;&gt; CompileMatcher&lt;T1&gt;(string expr); Func&lt;SyntaxNode, Tuple&lt;T1, T2&gt;&gt; CompileMatcher&lt;T1, T2&gt;(string expr); ... and you'd call it like var matcher = CompileMatcher&lt;string, string&gt;("Console.WriteLine($1, $2)"); var res = matcher(node); if(res != null) { Console.WriteLine(res.Item1, res.Item2); }
For the people who pointed out flaws in my post: I updated it, like I announced. It should be more accurate and original now.
From a quick glance it looks similar, but the Clang thing does seem a lot more advanced (not that surprising; I maybe spend a day on this).
If you hover over “var,” it tells you the type. 
Properties and the short getters and setters compared to Java. 
Sorry, I did not notice. I can remove the post if you guys want.
Interesting guy. Not most experienced with C#, but he has some cool insight on his channel overal.
Reserved namespaces are live on the NuGet gallery - you can no longer upload packages with ids like "System.*" or "Microsoft.*". Existing packages with ids that are now reserved are unaffected. Their authors can continue to upload new versions of these packages.
Assuming credentials and data entries are transmitted via post requests (form, json, whatever) you can just mimic those requests (I think HttpClient keeps cookies automatically, if not you have to get them from the response and provide them in subsequent requests)
I disagree. This: Dictionary&lt;int, Func&lt;object&gt;&gt; dict = new Dictionary&lt;int, Func&lt;object&gt;&gt;(); vs var dict = new Dictionary&lt;int, Func&lt;object&gt;&gt;(); Are you sure that you need to read extra code for know the type?
If that's all it is, why was Java's 'streams' such a big deal? 
Yes, because I am naturally going to be reading what is on the left anyways. With var I now have to read what is on the left and what is on the right. This is also far from the most egregious cases where it is used in conjunction with a method that does not tell you what type it is, which is far more common than it should be. A suggestion someone else made that I think makes a lot more sense is instead of reducing the amount of syntax on the left you reduce the amount of syntax on the right. Instead of: &gt;var dict = new Dictionary&lt;int, Func&lt;object&gt;&gt;(); it should be &gt;Dictionary&lt;int, Func&lt;object&gt;&gt; dict = new();
Oh, thanks for the update.
&gt; Yes, because I am naturally going to be reading what is on the left anyways. And then, you need to look for the variable name inside all that code. If you have several declarations, and you are looking for an specific variable, it will take more time to look for the var name than you are looking for. Dictionary&lt;int, Func&lt;object&gt;&gt; dict = new Dictionary&lt;int, Func&lt;object&gt;&gt;(); List&lt;Customer&gt; cust = new List&lt;Customer&gt;(); SomeLargeTypeName variable = new SomeLargeTypeName(); vs var dict = new Dictionary&lt;int, Func&lt;object&gt;&gt;(); var cust = new List&lt;Customer&gt;(); var variable = new SomeLargeTypeName(); The first has a lot of noise.
Again you are making an assumption that I am reading it in an IDE that has that feature.
That log4net repository is an out of date mirror. If you follow the project link from *the official nuget package* you'll see that issues are tracked [here](https://issues.apache.org/jira/projects/LOG4NET/issues/LOG4NET-582?filter=allopenissues) and code is committed [here](https://git-wip-us.apache.org/repos/asf?p=logging-log4net.git), which has some recent work being done to support .net core.
A little lacking in the C# side overall, but he tries at least.
I disagree that it takes less time, especially if they implemented the suggested syntax in my comment. Also the variable name is less important than the variable type. I will agree that at first glance using var does look nicer, but looking nice at a glance does not necessarily mean it is a good thing.
So you never look at code online in a web page? You never look at code in a YouTube video? Come on man, think about it.
Whenever I see things like this in technical discussions, in person or online. I can't tell if the person is pedantic or constructive. 
&gt; Also the variable name is less important than the variable type. But you need the variable name for know the type. 
... no? I work for a company that wrote their own provider (.net 1.1 days) before any of those were ever created (or iqueryable itself).
IQueryable is not limited to sql, it's to any kind of data providers. The most popular is indeed linq to sql, because it's one of few available in the .NET libraries. So I guess pedantic?
&gt; So you never look at code online in a web page? Sometimes, but I work in an IDE editor.
You're totally right. My explanation is an easy to understand lie that grossly oversimplifies, assumes an overly specific use, and leaves a lot out. It is an explanation that I would consider satisfactory coming from a junior developer if I were interviewing them. I would expect a very different explanation from a senior developer.
Your definition is much more correct, but if I heard that come out of a junior developer's mouth during a phone interview, I would be listening very carefully for keystrokes after I ask my next question.
No
Here's a [working example](https://dotnetfiddle.net/6Bi19D) using `&lt;string, object&gt;`
What build errors do you get? It can't find the executable because the executable can't be built. If you clear up the build issues then the error you should be able to debug.
Binding is hard to understand at first, but I‘m glad I chose the WPF way since I‘m starting out with Xamarin and it seems to also have Bindings the same way.
Thanks, I am just adding support for tagging, so I could make things searchable more easily. One category per question is obviously not enough. If you had some job interview questions, ping me and I will add them.
I probably wouldn't recommend the Head First books. They're pretty but they do drag a bit. YMMV, I know people who loved them. The best way to learn to code is to code, so as you want to do Unity, perhaps look at [Learning C# 7 By Developing Games with Unity 2017](https://www.amazon.co.uk/Learning-Developing-Games-Unity-2017/dp/1788478924). That way you'll be learning C# and Unity at the same time. I haven't read that book, so have a poke at the "look inside" bit on Amazon to see if you like the look of it. Don't worry too much about learning everything before you produce something. The trick is to make something, anything, work and build on that knowledge, either by starting again or literally building on what you have. 
vb.net supports lambdas, expressions trees, anonymous types, type inference, query syntax, etc-
Not everything, there is not support for deconstructors in vb.net.
Oh, I see! So setter is when you're doing deserialization and getter is when you're doing serialization. I'm trying to serialize the data without the property name, so I would use the getter, right? Is there a way to strip the property name like that? Something like [this](https://dotnetfiddle.net/HrkzyH) but not have the "ExtensionData" in the json. 
Could you use c# to drive excel to generate the charts? Then just print the excel to pdf? 
Head first is a great series. I used it for Java and C#. 
Good point! Thanks for the answer.
I don't know if I would recommend Unity right off the bat. They have some cool tutorials but they require you to have a basic understanding of C# first. 
That's an option. Problem I've found is interop can get flaky. 
https://university.xamarin.com
Sql Reporting Services might be of help too. But you are right, it'll take a lot of work to get it to match exactly the output they'll expect. It can be done, just a pain. You need to be up front that automating this will require trade-offs in terms of getting things pixel perfect, and add about 5x the estimated development time because the group needing the report will require hundreds of iterations that they take hours or days to get back to you.
I know it's not a c# solution but I'd probably just use http://www.chartjs.org I haven't found a c# graphing library that I like as much as that and it's interactive in the web page.
Why are the sides of `MemberAccessExpression` the wrong way around? (It's `Console.WriteLine`, not `WriteLine.Console`.)
Stable enough, but I had some crashes
 Yes it is, if you don't yield return, you're creating the entire collection at once. That is not "on the fly". The only way to have an enumerable calculate "on the fly" is through yield return, as results can differentiate between different take requests.
Thanks for the answer serentilla!
If you had a "magical" compiler which used C# syntax, but otherwise could do pretty much anything you wanted it to do, how would you make this look? Maybe something like this? if (Match(methodDeclaration.Body, "{ Console.WriteLine($0); }", out var expression))
You could try something other than interop, aspose library is quitegood at generating excel graphs. And they save as pdf with no extra coding. 
what if he is targeting one, but in the future he need another one? Isn't a better idea to develop in a language with support for more platforms?
https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/SentryEventBuilder.cs#L26-L32 Why are you setting the default value? Why are you also setting them to be the same value as they are by default anyway? https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/SentryEventBuilder.cs#L99-L108 You have a field of type `Dictionary&lt;string, string&gt;` and then a method that adds to that dictionary. Except that method takes `IEnumerable&lt;KeyValuePair&gt;` which yes is the type you get by enumerating a dictionary, but it makes no sense at all given the current context. Why not just accept a dictionary and loop over that, and add to the field? https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/ErrorLevel.cs#L6 https://stackoverflow.com/questions/648823/when-declaring-an-enum-should-you-force-the-type-to-byte-for-under-256-entities https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/UnixTimestamp.cs This functionality is already built into .NET https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/DataModels/ArbitraryData.cs Ouch. Honestly, I think this whole file needs scrapping. I don't like or see any benefit to things such as: * Having a field of type Dictionary and then exposing various properties of it in a mutable fashion. Because it's `ICollection&lt;T&gt;` instead of `IEnumerable&lt;T&gt;` someone could come along and add things. Is that really what you want when you are already implementing Add on line 49 anyway? No. * Implementing IDictionary/implementing in built collection types/inheriting from in built collection types. This is not an easy task, I mean it, it's hard. There are so many edge cases you haven't even thought of. https://blogs.msdn.microsoft.com/nicholg/2006/06/04/implementing-idictionarytkey-tvalue-isnt-trivial/ * In relation to the first bullet point, you are implementing IDictionary, and then also newing up a Dictionary as a field as well. This is just dictionary overload, what are you trying to gain by doing all of this? * Scrap it. This whole file can be replaced with `public IDictionary/IReadOnlyDictionary&lt;string, object&gt; ArbitraryData { get; }`. The dictionary overload is having serious implications on the rest of your architecture, such as brittleness and stringly typed systems. See here for example, you have lots of files with just string indexers into everything. https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/DataModels/OperatingSystemData.cs The whole directory needs to be thought out again. Due to the inherent underlying operating system design, you should never be doing this in a library. `var client = new HttpClient { Timeout = DefaultTimeout };`. You should be allowing a user of the library to inject (https://stackoverflow.com/questions/14301389/why-does-one-use-dependency-injection) an instance of HttpClient in. This is because newing up HttpClient enough can exhaust the available TCP/IP ports! (https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/). You can of course still new it up in the library, but only so long as that can can be changed eg method overload. 
of course, I mean learn another language (just for learning) isn't a bad thing.
Good point about the 3rd party sign-in trust issue. Thank you for the detailed response. This is exactly what I was looking for. Unfortunately the website doesn’t have an api available. It’s a small (poorly designed) website for a local Sunday soccer league. The best course of action would of course build a better website as opposed to an app but I am not a web developer and I am just looking to get more app development practice in. This would at least allow users to use what the website provides but in a much more user friendly way than the website. Another issue I have is if the website isn’t HTTPS, is it safe to build an app for said site??
&gt; If you're doing c# with a UI you're probably going to be using wpf There are a lot of people doing c# with a UI in Xamarin, or even UWP. I don't think wpf is the most used UI framework.
I do this way too often at the expense of performance, but sometimes it's worth it. 
&gt; So setter is when you're doing deserialization and getter is when you're doing serialization. Yep. You can override CreateProperty so the dictionary is not also serialized as-is. [Check it out](https://dotnetfiddle.net/gxITg0). 
&gt; https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/SentryEventBuilder.cs#L26-L32 Why are you setting the default value? Why are you also setting them to be the same value as they are by default anyway? &gt; &gt; None of those are the "default values" for those fields.
&gt; What is this? What is this actually testing? I really can't tell (The name is bad and it just doesn't seem to be doing much) &gt; &gt; It seems clear to me that it's validating calling the "Capture" method causes the "Send" callback to be invoked.
This is another reason to be disappointed that XNA is no longer a thing. The way it is just as good for teaching C# and OOP programming as building games. There is still a mono version, but I have limited use with it so I'm not sure how simple or complicated it is to get working. 
And what is the end-game in testing that? It was called.. So what?
Of those 3, one is yet another database ORM, one doesn't actually use IQuerable, and the last is make-believe because you couldn't actually think of anything.
So.... now you know that this particular part of the API contract is being fulfilled. The callback is being respected and invoked at the appropriate time. 
In what context is it called? Why can't you just call it outside of the client in the first place? It's returning null, why? It's not accepting a single argument but what is this value? This just wreaks of trying to get to 100% code coverage regardless of whether or not it makes sense.
* In Visual Studio 2017 =&gt; `Tools` =&gt; `External Tools` * Select Button `Add` Title: `Execute YourSolution.Build-Safe In Output Window` Command: `C:\windows\system32\windowspowershell\v1.0\powershell.exe` Arguments: `-ExecutionPolicy Bypass -file "$(SolutionDir)Scripts\YourSolution.Build-Safe.ps1"` Initial Directory: `$(SolutionDir)` * Tick Box `Use Output Window` if you want the powershell to run inside your Visual Studio IDE, otherwise it will run in its own shell and it's up to you to capture it =&gt; `Apply` =&gt; `OK` * Look at the list of `External Tools` and remember the position that your new command is on. I am using `External Command 4` in this [example image](https://i.imgur.com/n60bevL.png) * In Visual Studio =&gt; `Tools` =&gt; `Customize` =&gt; `Commands` =&gt; Select Bubble `Context Menu` =&gt; Select `Project and Solution Context Menus | Item` * Select Button `Add Command` =&gt; Categories: `Tools` =&gt; Commands: `External Command 4` =&gt; `OK` (See Step 4) * Still in the `Customize` menu =&gt; Select Button `Keyboard...` * Set a hotkey for `Tools.ExternalCommand4` =&gt; `OK` (See Step 4)
&gt; In what context is it called? Why can't you just call it outside of the client in the first place? No idea -- why would you be able to learn that information from a random unit test? &gt; It's returning null, why? The return value of the callback is likely unimportant or uninteresting in context of this unit test. That doesn't seem like a red flag or otherwise interesting to me. &gt; It's not accepting a single argument but what is this value? Huh? Again, the parameter to the callback (if that's what you're referring to) is likely uninteresting or unimportant to this particular unit test. &gt; This just wreaks of trying to get to 100% code coverage regardless of whether or not it makes sense. I'm not really getting that. It seems like a fairly insignificant thing to validate, but I have no idea about the overall architecture of the system. It could be that there's been a lot of problems with callbacks not being honored in the past and this is an attempt to ensure that it doesn't happen again -- who knows. I'm not sure why there's a need to jump to the worst conclusion, though.
Ahh, thank you so much for being so patient! I followed what you said and it worked. 
I've been super happy with the charting components from DevExpress (both in the reporting tools, and the plain chart controls).
It's homework. On 101 level. Do you really think that piece of information will fit into anything he/she is currently learning?
Can't stand talking head videos. I'd much rather see a bunch of charts/graphs and have a voiceover.
No problem here but with resharper and big solutions it can be slow to start.
That seems like it would be insignificant compared to parsing a source file. 
I hope it serves you well. Not a lot of response so far, so I'd appreciate any feedback on your experience with it if you get the time/urge, good or bad.
I usually do other stuff while only listening so they're the best for me.
Yeah, I was thinking that they're like podcasts, but the video is kind of a waste of bandwidth, no?
Why not just create one ps1 script file to execute all commands at one invoke? You may use user temp directory to store it, just to be sure you have write rights.
Useful for things like validators that can be called on an object, but you don't want to build a huge, manually constructed, prone to screw-ups, list of the validators. With reflection, you can just scan the assembly for all validators and wire those into your Dependency Injection tool for use later. Need to add a new validator? Just create the new class following the pattern. No fussing about with switch statements or code somewhere else. Probably 90% or more of the times I use reflection, it's to keep from having to manually build a list of something that exists as classes / constants / types in the code.
I am very happy with [FastReport.Net](https://www.fast-report.com/en/product/fast-report-net/) from [Fast Reports](https://www.fast-report.com). * Mono compatible version available * .Net Core compatible license * Support for ASP.NET (Core) * Reports from POCO, DB, XML, ... * Good export modules * Designers are easy to integrate This product is like heaven when compared to CR. We tried to use the DevExpress libraries, but they weren't as good and we switched back to FR again. 
I'd say for 1. ClassNameTests, if your class is so big that you need to break the tests out into separate test classes you're probably violating SRP and the class should probably be broken down. 2. is spot on. CalculatesXCorrectly probably makes sense when you first write it because you can see what "Correctly" means when it's green that first time. It's only when it goes red later that you're truly screwed because you have no idea whether "Correctly" has changed. Do you change the test to make it green or change what broke the test? 
This. It does not have to be chart.js,though, but I get why you recommend something you have used yourself. Personally I have used plotly.js. and rickshaw, and both work fine. Data can be exported as for instance CVS-files from backend c# and at least plotly.js has commands for loading that data in. This kind of solution can be created pretty quickly provided users are happy with the generic plots the js charting package provides.
Before IOC containers were a thing, cycling through all types in an assembly to see if they descend from base type x and/or have attribute y. Caching the outcome in a dictionary made a huuuuge difference on .net 2
Go doesn't have generics, case closed.
Are you trolling? 4 is literally the default.
Cross-posted [to Stack Overflow](https://stackoverflow.com/questions/46937278/net-core-2-0-alternative-to-microsoft-chart-controls). 
No, I'm not trolling. Explicitly specifying the initial capacity is a good way to signal intent for the object and what size it's expected to grow to. The fact that the size chosen for this particular instance is the global default isn't a good reason to omit the parameter if it would otherwise be beneficial to signal that intent. Also, your original comment seems (at least to me) to imply that there's no reason for any of these constructor calls -- otherwise the wording is very confusing. Obviously, these constructor calls are needed, but I guess your problem is with the default capacity being specified (which is a pointless nitpick, IMO).
This is actually how it originally was. I'm trying to integrate as many functions as possible directly in the code as the learning experience. 
Especially when it lets you cut great swathes of code out of your project.
Hey! Thanks a lot for your questions! Regarding `SentryClientTests.`As others have pointed out. It tests the the functionality of the abstract class`SentryClient`. [It tests that `SendAsync` is called from `CaptureAsync`](https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/SentryClient.cs#L37-L48). It does so via a derived class called `TestableSentryClient`. I wrote this test very early, before I could motivate using Moq. I should probably update the test now! 1. I try to keep my classes really "short and sweet", the same ideas goes for my tests. For some classes though, there's certainly room for restructuring. I'm not a TDD-master, far from, so I'll take any feedback! How do you usually go about structuring and naming? I'm thinking, one test-class for each "major feature" perhaps? 2. I try to stay away from `CalculatesXCorrectly` test names, and I try to pass in expected values wherever I can. There are however, some cases where it's not feasible, and "correctly" is whatever the test (or spec) defines. I will go over and revise some test names/functionality. &gt; Also what is the benefit of using this over just having an OnException filter and then logging out using whatever logging library you're already using? I use splunk a lot and I can just log out an ERROR that way and it's all centralised (I have used elmah in the past but it's such a configuration nightmare and there's not enough flexibility in the outputs) This *is the OnException filter*. The Pidget Client is simply a transfer mechanism for sending exceptions or or messages to sentry.io. Pidget.AspNet is a middleware (sort of like a filter) which automatically captures application exceptions and attaches (and sanitizes) request data.
He's not implementing IDictionary, he's just wrapping it. The underlying data structure *is* a dictionary, which makes it pretty meaningless, as it exposes no functionality that separates it from a dictionary. It's not difficult or dangerous at all to extend the internal collection types this way, as long as what you are doing is just wrapping and underlying type. I do it constantly to give my aggregates the appearance of an IEnumerable, ICollection or IDictionary. It is extremely powerful.
What advantages does this have over NSubstitute or any other?
&gt; He's not implementing IDictionary, he's just wrapping it. The underlying data structure is a dictionary, which makes it pretty meaningless, as it exposes no functionality that separates it from a dictionary. &gt; public class ArbitraryData : IDictionary&lt;string, object&gt; Yes, he is. He is also wrapping another one. It's a mess.
I'm not sure if you're allowed to use Microsoft namespace if you're not associated with them or if they didn't approve it.
Say you want to call a method or set a property through reflection. You need to first find that method, property, field, etc, and you’ll have a method object that you can then call invoke on. There is an overhead to finding the method, but repeated call aren’t that bad. So, you can only find the method once, save it in a cache, then call it repeatedly, and it’ll perform better than if you had to look it up every time. 
But why? When was the last time you ever saw someone need to set it to 4?
Thanks for your comments, based on them I have decided to make this Senior question here https://www.bettercoder.io/JobInterviewQuestions?q=ienumerable&amp;cid=Any+category Originally I was thinking more about Junior level but the truth is that Juniors are using it without actually knowing what the difference is and how things are implemented.
I had hoped to get feedback on the builder! It's one of the messier classes which I hope to somehow clean up. - *Why are you setting the default value?* ... - I am not setting the default value, the default value is `null`. I'm setting a default capacity for the dictionary (4), which is about how many items I think will ever go in that dictionary. I know initializing a dictionary without ever setting it is a overhead. But it simplifies, and is (to me) worth the overhead. - *You have a field of type* ... *Why not just accept a dictionary and loop over that* - Why doesn't it make sense? You can still pass in a `IDictionary&lt;string, string&gt;`, as it is derived from `IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;`, the method requires only iteration over a key/value-pair, so would I require somebody to pass a higher derived type? - Regarding the Enum, gotcha! I'll update it. :) - Regarding the UnixTimestamp, what is your preferred way of handling it neatly? - Regarding `ArbitraryData`, this critique is entirely valid (and this class is a bit of a brainfart in the first place), as of now, it's more of a label for derived classes. I will certainly revise this taking your critique into account. If you have the time (and if your heart so desires), feel free to create an issue! I'd love that! :) - Regarding `HttpClient`, have a look at the [constructor for the `SentryHttpClient`](https://github.com/mausworks/pidget/blob/master/src/Pidget.Client/Http/SentryHttpClient.cs#L45-L51). It accepts a `HttpMessageInvoker` which is a subtype of `HttpClient` (for instance). I leave managing the `SentryHttpClient` up to whoever implements the library. Pidget.AspNet implements the `SentryHttpClient` as a singleton, which means that only one `HttpClient` will ever get initialized during runtime, this should be an OK implementation. See also [PR #33](https://github.com/mausworks/pidget/pull/33)
100% code coverage does not mean 100% tested correctly. It just means you have tests that ran every line of code at some point. Also it might be 100% lines but not blocks. If you throw any type of exception anywhere in code then you can't get 100% block coverage.
I don't know, I can't tell you. I did not look at his project very much. He may decided that 4 is the right capacity and it's performance critical that no resizes happens and he does not want to rely on implementation details. But most likely: Pointless.
Using the namespace violates the guidelines for namespaces, but saying its not allowed it a bit extreme. Using "Microsoft" in the package name however is probably infringing on their trademark
I would say yes - we just finally put senior devs over to it full-time in January, all had stuck with 2015 for our large solutions. It had been pretty unstable in earlier builds, and major features just didn't seem to work build to build. After a few weeks, I've finally unpinned VS2015 from start menu. 
Assuming you're using WPF, fix the margins on your button so it doesn't overlap the entire tab control. [Overriding the style of a button](https://stackoverflow.com/questions/17259280/how-do-you-change-background-for-a-button-mouseover-in-wpf) is not terribly difficult, but it's not exactly obvious, either. Create a static resource style and attach it to the button. The style will need to override the Button ControlTemplate and add in an IsMouseOver Trigger if you want the style to change on MouseOver.
The whole string within your `ps.AddCommand(...)` call is not a command. It is a script, which means that you need to use `ps.AddScript(...)` instead. 
What does it mean to eat an exception?
I tried both mate, addcommand gives me the same error
This tells me that with `.AddScript`, the script is being executed but there is an error in the script itself. You could run the command inside the string directly on PowerShell and see what error it throws back. (Sorry, without the same set-up as you, it is difficult to give a definitive answer, but my test with a similar invocation of another .exe works.)
A SQL stored procedure that takes @username as a parameter. Your code can get the logged in users' name, pass it into a function that calls a stored procedure and passes the username as a parameter to the stored procedure. The username parameter gets used in the sql query's WHERE clause (select [Orders] from order_table where username = @username). [Here's a basic example.](https://forums.asp.net/t/1742349.aspx?how+to+pass+parameter+of+stored+procedure+in+sqldataadapter+in+conjunction+c+asp+net+)
Github search c#
https://www.sourcecodester.com/c-sharp
Microsoft provides some great samples of patterns for the enterprise scale. Some of the tech might be dated, but the principles still apply. Try a query for: [AdventureWorks](https://github.com/Microsoft/AdventureWorksSkiApp/blob/intelligent/README.md) 
Me being explicit. Anybody looking at the code will know for certain that I explicitly set it to 4 (it's a hint), and not that I KNOW that it's 4 by default, and did not set it. I set it to 4 to indicate that it's likely the largest size it will ever have.
[removed]
Thanks a lot for the answers! I think GitHub and Adventureworks might be a good example to start with. While learning i want to stick with with more "approved" stuff. 
What I was trying to point out was that since I couldn't find a test with null input, *no* test would hit that particular line and therefore the tests could not have reached 100% line coverage. I'm no expert in code coverage tools, but I assume that throwing an exception also marks that line of code as "covered".
I think I've only use `?[` once. 
I just re-read the code and saw that `Assert.ArgumentNotNull` was used for the null check. Then you can of course reach the 100% code line coverage without checking for null in the `Create` function, if some test hits another method that uses `Assert.ArgumentNotNull`. In my two earlier post I for some reason had in mind the null check was inlined in `Create`.
If you're interested in architecture then checkout: https://github.com/ardalis/CleanArchitecture. Its a great example on how to structure a project following SOLID design, well worth a study!
I feel like my answer to the other comment here gives a good overview, but I'll give it another go. For mocking, there are two distinct advantages I introduce. 1) Value equality for parameter matching in mocked calls. 2) You can specify how many calls you expect upfront, and automatically verify all calls later without having to once again specify each of them. I like the syntax I created, but that's just opinion, and a biased one at that. You specify a call, you specify a behavior, always. The behavior can be anything, a simple return, a complex method, whatever you set. Lots of people like NSubstitute's syntax, but I instead chose a syntax more like Moq or RhinoMocks (but different from them as well). One of my goals was to create a clean design programmatically. Which doesn't much matter to users, but it does to me. There is no global state in my design, I don't use CastleProxy like the rest of them (I created my own proxy behavior), and my faker code is a few hundred lines across a little more than a dozen classes. ... But that's just the mocking aspect. There is a lot more to the tooling than just mocking. You could even ignore the mocking aspec for your own favorite framework, and just use the other tools provided. I'll just quote my [docs](https://createandfake.github.io/CreateAndFake/) here: The library provides a handful of tools that are both easy to use and customizable should the need arise: Randomizer - Creates random instances of any type. Randiffer - Creates random variants of objects. Duplicator - Creates deep clones of objects. Valuer - Compares objects by value. Faker - Creates mocks and stubs. Asserter - Handles common test scenarios. One of the benefits of this library is that the tools are logically integrated with each other. For example, the randomizer will use stubs for interfaces that have no known implementations in the code. Or the mocks created by the faker utilize value equality in matching arguments.
I am a web developer. I got my first "real" full-time job with a portfolio only. I was studying in IT field but not programming directly. I had some game projects as well as some Wordpress websites to show. I was a project manager in a hobby project. A lot of companies offered me small tasks/projects to program. Also few of my friends got into programming position basically by just linking their Github account with a lot hobby projects. If you want to just program, skip the school. Start learning and store all of your code into Github account. Make an account to LinkedIn if you don't have already. I have not updated my profile for quite some time and I am not looking for a job but I still get messages from people about open positions. I would start learning Java. You can create basically everything with it and it is one of the popular programming languages in corporation world. It is similar to C# so changing later to C# would not be a problem. I will get down votes for saying this but I got the feeling that Python is more of a scripting language for small tools and automation and it is not that popular for big projects as some other programming languages. I am not saying it is bad and there are many exceptions but at least in my country there is not that high demand for a Python programmer as for example Java or .NET. Knowing Python of course helps you to get a job. Situation in your country might be different. Just check open programming positions in your area and check what they are looking for. Start learning things that are in high demand.
&gt; I would start learning Java. You can create basically everything with it You can create basically anything with basically every language! &gt;Python is more of a scripting language for small tools and automation and it is not that popular for big projects as some other programming languages Was AlphaGo a big project? 
Sub millisecond GC pauses is pretty nice though, and native executables. 
Check the stored procedure code, probably it need a prameter: var objcmd = new OleDbCommand("storedProcedureName", myConnection) { CommandType = CommandType.StoredProcedure); var adapter = new OleDbAdapter { SelectCommand = objcmd }; adapter.SelectCommand.Parameters.Add( "@Id", OleDbType.Integer).Value = customerId; try { var dataset = new Dataset(); // blah blah blah return dataset; } finally { // close conn. }
&gt; You can create basically anything with basically every language! That is true. &gt;Was AlphaGo a big project? I don't know AlphaGo but I think Reddit is written in Python. There are many big projects written in Python but in my experience amount of companies looking for a Python programmer is much smaller than for Java or .NET. Many of them of course lists Python as a "good to know". At least in my country. It also seems that most open Python positions here are looking for a Test Automation Engineers. With Java I can find a lot of different things, like game projects, Android applications, web sites.. Sure, you can do any of those things with any of programming language but if you want a programming language that has most open jobs then I would suggest to start learn Java. This was my point and I did poor job to bring it out. 
Learn both Python and C#. It's my experience that they're the 2 best languages out there right now, both in terms of modernness as well as demand. You'll also learn a lot about programming and software engineering because they do a lot the same, they also do a lot of things differently. And that contrast will teach you a lot. You may want to learn one and then the other, though. Learning 2 languages at once is probably pretty hard, though not impossible.
Thanks all for the suggestions Out of python, C# and Java Which would you say is best to start with? I will try learn all over time, but probably best to focus on one first.
isn't suppose that xamarin is native? isn't more effort to learn a new language?
If you're UK based there's a huge amount of web dev jobs going around at the moment. Usually c# and JavaScript. Look at ASP and JQuery. Maybe also consider a more complete JavaScript framework, Angular or React are solid 
Python is lower entry but it's really a pain to work with in real projects and it's exceedingly slow.
&gt;isn't suppose that xamarin is native? Using the definition of native where it means "runs as an app not in a web browser" yes. But being the first class development citizen of the device, no. Learning a new language I don't think is very hard, especially when its C# vs Java. C# -&gt; Swift would be a slightly bigger change if you have never done anything but C# in your life. 
I've said something similar once or twice, but I didn't copypasta. 
c#
&gt; Regarding the indirect call to the handlers, I'm using Reflection to call the handler "Execute" method. Do you think this is a good approach? Do you need reflection, when you already have a generic interface? I imagine that such interface as yours could be defined as public interface IDomainEventHandler&lt;in TEventThatWasRaised&gt; { Task Handle(TEventThatWasRaised raisedEvent, CancellationToken cancellationToken); } Given such interface, you can use your DI container to grab strongly typed instances of such objects, and thus you'll be able to call them directly. Assuming that your mediator implementation has method called `Publish`, it could look like this: public async Task Publish&lt;TEventThatWasRaised&gt;(TEventThatWasRaised raisedEvent, CancellationToken cancellationToken) { var handlers = serviceProvider.GetServices&lt;IDomainEventHandler&lt;TEventThatWasRaised&gt;&gt;(); foreach (var handler in handlers) { await handler.Handle(notification, cancellationToken); } } This way you don't need any reflection based code.
Probably the likely answer in this sub-reddit but yes i'm gonna go for it. Anyone recommend any sites for online courses? Ive checked udemy but nothing there stands out. Just installed visual studio enterprise
&gt; No degree: would this be a problem in this field? I had a 30 year career in programming and rose from the ranks of junior programmer to a VP level position with no degree. However, I estimate that not having a degree probably cost me about half a million dollars over the course of my career. Assume that to start with you could be earning $20,000 a year more per year with a degree, and in the end it was probably costing me more like $50,000 per year not to have one. It may not be cost effective for you to enroll yourself in an ivy-league school at full cost, but if you can go to a community college or night school or online school and get a degree cheaply, slowly, it may be a good idea for you financially. Now, I'm not saying it's going to change your life. I actually had an MIT professor tell me there's literally nothing he could teach me in a graduate course that I hadn't learned on the job, but *employers* like to see that degree and they will *pay* you more because of it. &gt; Hi, I'm interested in studying software development / programing but have no idea what is best to start with. &gt; I only know basic VBA / C++ / sql but i'm willing to put a lot of time into learning something that's in high demand and will help me get into a good career. Let's call VBA a "toy languge" which just doesn't have much call in business and put it aside. However, C++ is respectable, although in the end you may find C# *easier*. If you want to make a good career out of it, you need to start looking at job ads to see what languages employers want in your area. No one language is popular nationally, and it changes over time. For example, when I started here in Boston companies wanted various database languages and maybe C. Then it became Perl. Over time it eventually became Java, then moved to C#, then Ruby, then Python, then Javascript. I think now it's C++, but I'm slightly out of touch. My point is, you need to find out what's in demand *where you live* and learn it and write some sample code in it if you want to get jobs easily. And you'll need to either find a job you can hole yourself up in for a long time, or learn new languages over time, or be prepared to face a restricted pool of jobs (the ones that are still hiring for the language you know), or to argue to employers that they should hire you for a job for a language you haven't learned yet. (It can be done, I've done it, but it's *not* easy.) That's why we can't tell you what language to learn to build a career with. There's no one answer. Some general advice: Programs these days have layers. Underneath is often a database, usually running some variant of SQL. So, knowing SQL is very helpful to you and valuable to your career. Learn it *well*. Often you won't deal with the database directly, you'll work with a layer called an *object relational mapper*, but knowing what that layer does under the surface, and sometimes being able to write SQL directly, will help you *a lot*. On top of the database is a *middleware* language, like C++ or C# or Java or Python or Ruby or Perl or VBA for example. This is the language where the program logic occurs. It's where you take data (maybe gleaned from a user, maybe from the database, maybe elsewhere), do stuff with it, and output it (maybe to the screen, a printer, or maybe the database). If the program is user facing, you have a *presentation layer* sitting on top of that. It may be written in the middleware language, particularly if it's a desktop program or an app, but if it's a web program (these are good because you can use almost anything to access them) it'll be HTML with probably CSS and Javascript. These will be (mostly) output by the middleware and used to interact with the user. So you know some SQL. Learn it very well. You know one middleware language, you could decide to learn more or learn it better. You should decide about whether you need to write user facing applications, and if so learn one or more presentation layers. 
If you want to act on changes to the property within the class declaring that property, just add that code to the getter/setter instead of using an auto property.
Not with the long term direction Oracle is going though. Java isn't a smart long term goal and a lot of enterprises, while currently dependant on Java, are looking hard to get off it. This isn't a popular fact, but it is a true one and it pays to know Java but also be proficient in another language such as C# to ensure your own usefulness in the long run.
I'm going to try this tomorrow, thanks!
Udemy is pretty good i've taken a couple courses through them including some C#. They have beginner and advanced stuff but i've only done beginner. Microsoft has good sources for everything C# including tutorials and reference material.
c# or Java over Python for the static typing alone. I think it's a matter of taste which one of the two you pick. If you are programming primarily in a Windows desktop or server environment go with c#. Now with .net core you might want to go with c# either way.
Thanks for the advice, some great info I will see what my options are and what is best but its definitely something i want. Ive been stuck in average jobs over last 5 years and even though its ok, i know i can do much better. I enjoy vba and i automated some reports in my last job. Something that took over 20 minutes, i got down to about 30 seconds. Learnt things such as variables, loops, arrays which probably will help me with other languages. 
Seconding all of this. I'm 12 years in with a tech school associates. I had a similar experience early on, but I'm *pretty sure* I'm up to market now. I suspect I'm near the ceiling now, because I refuse to go into management. Even now, there are certain companies that won't even interview me because I don't have a bachelor's, but not many. There's definitely a disadvantage to not having the degree, but it's not insurmountable.
Managed to get complete java masterclass for £5.26 off Udemy Seems solid with good reviews and plenty of content
Pain how? I've found that PyCharm and VS are about comparable and they seem to scale about the same. &gt; Exceedingly slow Eh, I'd say that Python is a little bit slower, but it's fast enough for most everyday usage scenarios. The only sucky thing about Python is the multi-threading. It's super easy to implement (easier than C#), but it isn't (necessarily) true multi-processor multithreading. (Which is part of the reason why it is easy to implement.)
Thats exactly what I tought, but the powershell script itself seems to run fine. ik think we need a or another setup of the ps.addscript line. Looks it doenst get exectued proberly
The tough part (after writing the `Expression` =&gt; roslyn pattern code which should be a pretty straigtforward expression visitor pattern over your existing code) is if you want to match anything that you cannot represent in an expression tree without resorting to the raw type creation syntax. see https://github.com/dotnet/csharplang/issues/158 For this particular example (matching a method call to Console.WriteLine and extracting the parameter) you could use something like this: if ( statement.TryExtract&lt;string&gt;(v =&gt; Console.WriteLine(v), out var parameter) &amp;&amp; parameter is LiteralExpressionSyntax literal) Assert.AreEqual("Hello World!", literal.Token.ValueText); with an extension method interface like: public static bool TryExtract&lt;T&gt;( this SyntaxNode node, Expression&lt;Action&lt;T&gt;&gt; expression, out SyntaxNode value);
Hi again Dathen. That was my thought as well. If I know the generic interface, that's all I need to make it work. But I hit a wall. When doing `serviceProvider.GetServices&lt;IDomainEventHandler&lt;TEventThatWasRaised&gt;&gt;();` it returns a empty list. I guess that somehow I need to be more specific about the `type` of the domain event that I'm trying to fit into `IDomainEventHandler&lt;T&gt;` when asking the DI container? In my current implementation I'm joining the `IDomainEventHandler&lt;T&gt;` with `IDomainEvent`, making it a full type. Then I pass that type to `GetServices`. The problem is that I ended up with a list of objects and can't see a way of casting them to `IDomainEventHandler&lt;T&gt;`. 
so i tried ps.AddCommand($"$options=New-PSSessionOption -SkipCACheck -SkipCNCheck"); ps.AddCommand("Enter-PSSession -ComputerName HTPC -SessionOption $options"); ps.AddCommand("C:\\Program Files (x86)\\Home Control\\HarmonyHubControl.exe"); ps.AddArgument("10.90.1.8, issue_device_command, 42458302, L06"); ps.Invoke(); } it fails within the first line with Additional information: The term '$options=New-PSSessionOption -SkipCACheck -SkipCNCheck' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again. it has ' included which shouldnt
Clicked it and had instant sad at the organisation by architectural principal rather than feature / function. /Interfaces /Events etc namespaces can get in the sea - totally produces massive code change hotspots. I know it's common, but urggh.
Whilst not a fan of the comment style / xmldoc bloat - I love the code organisation in Ninject https://github.com/ninject/Ninject/tree/master/src - along with it's veritable masterclass in exception message authoring code.
For a more modern utility, the Polly codebase is pretty nice too https://github.com/App-vNext/Polly The Brighter project - https://github.com/BrighterCommand/Brighter Also well organised and readable code.
It has nothing to do with the development tools, rather the languages themselves. Though for the record, PyCharm is horrific on high-DPI displays and I can say from experience that it's not as fast as Visual Studio. The performance differences are substantial - certainly not just a "little bit slower". I did a Monte Carlo simulation in Python and C# and there was a 30x performance difference. Things like general concurrency, in the form of asynchrony and parralelism, are very important and exceedingly well implemented in .NET. We have very good support for this stuff, and it's pretty essential when you want to create responsive applications. It's not about concurrency though. Going back to the start, it's about the languages. Python is inherently difficult to develop in and maintain. It's ok when you're just starting out, but the complexity comes from the initial simplicity. When you've got a whole load of functions that do not enforce what goes into them, due to there being no type-safety and no static typing, things get complex. You get errors that should be caught by the compiler, but can't, because that's not how the language works - so you get them at runtime, which wastes your time. You come back to a function later that has three arguments, and you pass the wrong type into one of them - it builds fine, because Python cannot enforce this stuff, but then crashes at runtime. In larger applications, it really helps to have the compiler on your side, and to have things that restrict the visibility of your code and enforce behaviour. 
I've put together a small demo program - maybe that will be helpful. From what I've noticed .NET Core DI is quite limited in terms of convention based registration. To avoid manually writing reflection based code to find all instances needed I used a library called Scrutor which extends .NET Core DI. https://pastebin.com/xs7RNCx5
Thanks! I think I found out the problem. In your example you are calling `Publish` with a concrete class. In my scenario, because I want to stack up my events, I have a list of `IDomainEvent`. Then, I publish the events one by one, calling Publish for each entry of the `IDomainEvent` list. That's the part where it gets lost because it's receiving the type of a interface instead of the type of a concrete implementation like you did. Do you have any ideas of how can I keep stacking my events and avoiding Reflection to handle them?
Isn't UWP only for Windows 10 and xamarin only for mobile? 
Pluralsight.com might have what you're looking for. It's subscription based but comes with a free trial. 
I completely agree. This sample project is completely missing the point of DDD.
&gt; I did a Monte Carlo simulation in Python and C# and there was a 30x performance difference. So did I for a Risk Management class I took last year. It was pretty quick. You must be a mediocre programmer if you couldn't get Python to perform. &gt; Python is inherently difficult to develop in and maintain. You're kidding, right? I've written similarly large programs in C# and Python. They both scale pretty well. Do I prefer C#? Sure. Is Python also good. Heck yes. &gt; When you've got a whole load of functions that do not enforce what goes into them, due to there being no type-safety and no static typing, things get complex. You get errors that should be caught by the compiler, but can't, because that's not how the language works - so you get them at runtime, which wastes your time. Can't argue with this. It's the one thing I don't like about Python. Well, rather because it is Dynamically typed, it helps to using the Type Hinting feature of Python 3.5 and code defensively. 
&gt; I'm 12 years in with a tech school associates. I had a similar experience early on, but I'm pretty sure I'm up to market now. I suspect I'm near the ceiling now, because I refuse to go into management. You basically don't ever get up to market without a degree. Even an associates from a tech school is better than nothing. Without any degree you'll always get the bottom of the range for your position - so, if the range is $75000 to $100000 you'll get the 75. &gt; Even now, there are certain companies that won't even interview me because I don't have a bachelor's, but not many. There's definitely a disadvantage to not having the degree, but it's not insurmountable. When you don't have a degree, you have a problem getting certain jobs, but that can be gotten around. In general, they'll pay you less than they would someone with the degree, usually about $20000 per year. My experience is that if you have no degree but some college, it's best to leave the college off the resume entirely and let them *imagine* that you have a degree instead of telling them outright that you don't. I've had employers ask me about my degree after I'd been there for several months and been promoted, and they told me, when I told them that I don't have one, that they assumed that I had one in an unrelated field but left it off because it wasn't in computer science, and they were glad they didn't know because if they knew I had no degree I never would have been hired, and they were very happy with me. 
Well I did them as part of my Masters degree in Physics, and Python was what they taught us to use for it. We were simulating particle physics problems. The simulations were pretty long and involved complex mathematics. If I remember correctly, some of the simulations took hours to run. I got pretty good grades in my Python modules so I don't think I was at fault. In any test, it's easy to see the huge performance gap between C# and Python, and complex particle simulations is just one of them. In that scenario, I found a 30x difference for one of my simulations. You can find much larger ones just by adding numbers to an array in a loop. C# is inherently much faster; and if you had performed even a basic test, you would know that. Dynamically typed languages are well known for being slow. The simulation was very long for everyone, it was just significantly faster when I wrote a C# version, which I did to collect my results faster. "Defensive programming". So you program around the weaknesses of the language. Alright, cool - you can do that. I'd rather not have to. 
&gt; C# is inherently much faster; and if you had performed even a basic test, you would know that. Oh, I know. I just think people like to take the piss out of Python. It's good enough for most day-to-day stuff. (Push tab A into slot B type code.) Like I said before, I had to write a complex sorting algorithm once and C# 2.0 came thru for me. 5 second run time for a rather complex simulation. (And this was 8 years ago on a Core2Duo.) &gt; "Defensive programming". So you program around the weaknesses of the language. Alright, cool - you can do that. I'd rather not have to. Well, I always program defensively. It's mostly to protect against bad programmers who might consume my code. Not the languages. ;) But I agree with you. I'd rather not have to defend against runtime errors that could be caught by a statically typed language at compile time. And there's no "perfect language". We're always coding around some weakness. I happen to like C# the best (as languages go), but Python 3.5+ is pretty darn solid and I enjoy coding in it on a daily basis. 
&gt; But certainly, in the first few years, I took what I could get. You pay your dues, and if you're good, the rest slowly becomes unimportant. Unfortunately that's not always true. I went from being a highly sought after consultant bringing $400/hour into my employer to being an unwanted nobody in the blink of an eye. When 9/11 happened the whole computer industry in Boston just *evaporated* and I scrambled to find any way to pay the bills for the next few years. I ended up taking a series of jobs I didn't necessarily like with employers I didn't necessarily want to be at before I finally got on my feet again, and I only survived because of connections I'd made when times were better. 
No no... The proper way to do this on dependency objects is to register a dependency property (there's a handy snippet for that, propdp then tab, tab) Then, to react to changes, register a dependency property changed handler on the registered property (the second constructor parameter in the property info) 
yeah, don‘t copypasta, this will result in spaghetti code
This appears to be WinForms, not WPF.
Ah. Ignore my comment then. 
Yeah, that's about as far as you can go without reflection calls if you want to have list of parameters of different types and just an interface to implement. You could use dynamic type instead of reflection for a bit of a nicer code, although it won't be as explicit with what method exactly is being called. I've looked at [how MediatR solves that](https://github.com/jbogard/MediatR/blob/master/src/MediatR/Mediator.cs), as it also allows you to use non generic `Send` method. They they kinda do it the other way around - instead of calling method directly through reflection, they create a generic helper class using `Activator.createInstance` (and cache them, so they pay the creation through reflection cost once per type). It's also not as clean solution as just using DI container with generic methods. You could get away without reflection call by using base class instead of an interface, but I don't like this solution as much as interface based, so I'll just leave it as a food for thought: https://pastebin.com/wQx5yfdU
Properties of a base class will accessible from a derived class as long as they’re marked with public or protected keywords. 
what about with the objects of the derived class ? 
Of course. Let’s use your example: public class A { public string P { get; set; } } public class B : A { public B() { P = “some string”; } } You can then instantiate B and have access to P. var bObject = new B(); bObject.P = “some new string”; Here try it out - https://dotnetfiddle.net/NzWbpB
Gone for it day 1, it's better release after release. Today you can go fir it blindly.
&gt; I have a class B which is imported from class A (Class B: A) You mean: I have a class B, which is derived from class A. &gt; Now, I create a object O of class B . And when i try to change the property P of object O. It does not affect it . That can't be true. You probably have an error in your code making the property do nothing, or similar.
and not to mention NHibernate and others. in my opinion, its more odd that Cadoc7 has never touched IQueryable.. 
Its used quite a lot in .Net ORMs (EntityFramework and NHibernate, which are super commonly used data access frameworks in .Net)... also used in OData fwiw.
Edit : My bad, Sorry to waste your time . The initial Class A is a control and my company has imported it to make their own controls . In the repaint event , they are applying the properties, so the property I set, gets overwritten Did not see that before as I was using it as a dll and just now saw the code. I was breaking my head, everything looks good but the property doesn't show up . 
Edit : My bad People, Sorry to waste your time . The initial Class A is a control and my company has imported it to make their own controls . In the repaint event , they are applying the properties, so the property I set, gets overwritten Did not see that before as I was using it as a dll and just now saw the code. Thanks for your time 
Sorry to hear that. Obviously there are other factors at play. I imagine many people had similar experiences circa 2008-09. I think *generally* my point stands, but that's an important caveat.
_Warning following code is influenced by `my opinion` and might not reflect yours_ `requires copy/pasting code` Where did you get that from? Y'know there is something called a "Package" and you can define custom structs that handle code for you (woo, "object orientation") Regarding error checking: yea.. but still a lot better than Java (imo) just think of all the Try-Catch phrases you need to use in C# if you don't do a `catch (Exception e)` but catch every single exception that might be thrown `catch (FileNotFoundException fex)` `catch (UnsufficientPermissionsException unsufEx)` Go handles this case by "forcing" you to knowingly ignore errors (which are _NOT_ exceptions in Go) or handle them. (which is nicer than Java's "Hey either you try-Catch all the exceptions or you declare that you throw all these exceptions so someone else need to handle them")
&gt; and they were glad they didn't know because if they knew I had no degree I never would have been hired, and they were very happy with me. AKA, people doing the hiring have no clue what they are doing.
Yes I'm using `dynamic` as well. I agree that going with `Activator.CreateInstance` doesn't look as clean as using the DI container. It might also require extra code to manage the handler instances. With the DI container I can define the lifetime of my handlers and it automatically takes care of that for me. And I also agree with you on the interface instead of the base class. I will have to think about this. In my current approach with Reflection everything is looking clean and easy to maintain. It appears that non-reflection approaches might introduce some coupling or add an extra layer of complexity. However, I also don't want to suffer from possible (big) performance hits from Reflection. Dathen, thanks for all the help! I really appreciate it. 
&gt; Where did you get that from? Y'know there is something called a "Package" and you can define custom structs that handle code for you (woo, "object orientation") I got that from the lack of generics. 
Standing recommendation: Never go into a language-specific sub to ask if you should learn it or some other language. Each language-specific subreddit is like a church. You're only going to get one answer. (I learned VB6, then C#, and then came back years later to VB .NET, which I prefer personally over C#. But C# is more common these days and has a lot more support.)
I'm also new to the industry, recently got my degree and I've been working as a C#/WPF developer for about 7 months now and since it's career advice you're after and not just programming advice what I would suggest and what I've learnt in my short time working is that in order to succeed it's not just about the languages you can develop in because everyone on your team can develop in those languages. It's about what you specifically can bring to the table, any good careers advisor will tell you it's not about being good at everything, it's about being great at one thing. What interests you, do you like system architecture, focus on networking and architecture. Do you enjoy blurring the lines between developer and designer, study UX, learn all of the abreviations and rules that make good code, great (DRY, KISS, open closed) because it's not just about the code, it's about the process and if you can improve that process for the team, you'll be in good standing. 
I think it would help if you give a type of project you might want to see, then we'd probably be able to point to something better. Like, do you want to see a mobile app? Reflection library? Test frameworks? A game? Makes it easier to come up with examples. Sadly enough, "properly commented" is likely the biggest challenge. I got you covered though with my own work for that though: https://github.com/CreateAndFake/CreateAndFake
By newing-up the objects you need, you have created tight coupling by forcing a dependency for the class you just instantiated. You're basically forcing the class you're working on to say, "This is how I do X, Y, and Z. This is the *only* way I can do X, Y, and Z unless I'm changed later." The better approach is to just provide that class with what it needs to do X, Y, and Z. Because really, it doesn't care how it gets done, only that it can call on something to perform those actions that adhere to a contract. So, by using dependency injection and avoiding that coupling, your class can say, "I need to do X, Y, and Z, but I can do that however you want. You just need to provide me something that I already know how to use [meaning an interface]." The obvious benefit is for unit testing to be able to inject a more controlled object for testing purposes. But really, it goes much further than that. When you can modify behavior of classes without having to change the code in them directly, you end up with a more maintainable system that is resilient to other changes in the system. 
I would aim for a newer C# version, because there were many new things like async/await that were introduced after C# 4.0. 
In addition to the testing benefits, most dependency injection containers also allow you to control the lifetime of the injected dependencies. For example, you could configure a DbContext to be injected on a per-request basis for a web project, rather than in singleton scope. Then that same instance is available for all services that have requested it rather than having multiple context objects conflicting with each other.
Dependency Injection is not about the `using` statement to automatically clean up resources. It is about being able to swap out implementation depending on the context. &amp;nbsp; * Let's say you have a `SendEmailService` **class** that sends out email. * If you are using it as `new SendEmailService('my.smtp.server', port)` everywhere, **how do you prevent it** from sending out an actual email when you are Unit Testing the class that is using the `SendEmailService` service? * Let's say your `SendEmailService` is very populare and is being *new-ed* up everywhere all throughout your code base. But what do you do if you need to add a new parameter to its constructor? Now you have to go through all of your files and update it. &amp;nbsp; With dependency injection, you can avoid all those problematic issues just by updating your dependency injection **registration root** in your project. Every class that uses **`ISendEmailService` interface** don't need to be updated if something changes in your concrete implementation **`class SendEmailService implements ISendEmailService`**, right?
If this was a decade ago, Java would be the one. But today? C# is in a much better place than Java. Although, Visual Studio might spoil you rotten. Good news though! You can code Python in it too. If you're going to go to a school, you'll likely be using primarily Java there, however.
Doesn't .NET have an AOT compiler that also generates native executables? And what's the state of GC on .NET? There's been quite a bit of work on the JVM with several new GC modes including G1, project Shenandoah, and ZGC.
OK, I put the second block in the Contsructor. AppDomain currentDomain = AppDomain.CurrentDomain; currentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyHandlerClass.MyHandler); //Note that we're calling 'MyHandlerClass.MyHandler' instead of just 'MyHandler', since the MyHandler method isn't in our Program class any more. Now I get the following error from the IDE: Error 1 'MyHandlerClass.MyHandler(object, System.UnhandledExceptionEventArgs)' is inaccessible due to its protection level c:\fim\dev\mim.connectors.webservice.activedirectorynext\managementagent.cs 73 95 MIM.Connectors.WebService.ActiveDirectory 
Except it's easy to forget to handle errors in golang. Case in point, fmt.Println() returns an error. How often do you see people handling it?
If you always create the objects you need privately, you limit the use of your own class. The famous goto example for why DI is needed are databases. Databases go into your code at a very, very low level. If you go the route of creating everything privately, all your objects up your architecture are dependent upon a database, and then testing becomes a nightmare. You don't have to have one or the other, either. You can in fact, provide one constructor that takes in an interface, and another that just news up an instance of that interface to use as default. Boom, best of both worlds.
.NET kinda/sorta has AOT compilation. Microsoft's tooling will do it but only for UWP apps. Mono can kind of do it? Last I checked but you still need the runtime around. When xamarin compiles C# for IOS it does do full AOT compilation to target IOS. Java and .NET both have *very* good GCs, but they are optimized for throughput, not latency. One is not innately better than the other, but sometimes you prefer low latency, in which case Go may be the best. For instance a game or otherwise realtime-graphical application may prefer low latency GC, or server jobs that need low latency even in the worst case. (the latter is why google optimized it for low latency) If throughput is lower you can solve the problem easily with more hardware, but solving worst case latency with more hardware is more or less impossible. 
You can implement a class that implement IEnumerable yourself, with a custom Enumerator class that returns calculated values. You don't actually need to have the yield keyword anywhere.
How often do _you_ see people writing `try { Console.WriteLine("Ups, there is no stdout for whatever reason") } catch (Exception e) { */ Try to write to file/eventlog/whatever /* }` But how easy is it to forget error checking to open a File? Go `f, err := os.Open("...")` C#: FileStream fs = null; try { fs = File.OpenRead("...")} catch (Exception e) {*/ some error logging /* throw;} If you cannot write to a Stdout / do not have a fallback or muxed logger, you clearly got more issues than that.
With DI: * I can use interfaces so my consumers never know what my implementations (this is a big one!) * I can control which implementation gets injected where via configuration. * I don't have to add using statements and I never have to write "new" anything (using the new keyword makes testing more difficult).
For language details you can't go wrong with "CLR via C#" by Jeffrey Richter. It might be a little too in-depth for a beginner, though. 
&gt; Java and .NET both have very good GCs, but they are optimized for throughput, not latency. My background is working on the JVM, that statement is not entirely correct :-) The JVM GC has tons of tuning knobs and ships with several GC modes you can choose from. The G1 GC (and the upcoming ZGC and project Shenandoah) are targeted at low latency use cases. How tunable is the .NET GC in comparison? I'm just starting to take a serious look at .NET recently.
.NET can compile .NET "Application Launchers" which use platform specific runtime Dlls to run your application and JIT-Compile them. (DotNet Core) Also there is .NET Native but AFAIK this is limited to UWP right now. (correct me if im wrong)
There had been a discussion around a few days ago: [Link](https://www.reddit.com/r/csharp/comments/82dlit/need_help_to_understand_dependency_injection_in/dv9e5od?utm_source=reddit android) My advice: Get yourself a copy and read it 😉
&gt;The G1 GC (and the upcoming ZGC and project Shenandoah) are targeted at low latency use cases. Any idea if they can get sub ms pause times on 18 gig heaps? Would be neat to do some comparable benchmarks to these: https://twitter.com/brianhatfield/status/804355831080751104?lang=en regarding tunability of .NET GC - I know it has workstation mode (lower latency) and server mode (higher throughput), but workstation mode isn't anywhere near as low latency as Go's GC. I think Go took a way more aggressive approach on latency than others were willing to. Perhaps at rather large cost to throughput? 
Really good article explaining the performance implications of `in` and `readonly` structs. I do wonder about one of the conclusions however: &gt; If the size of a readonly struct is bigger than `IntPtr.Size` you should pass it as an in-parameter for performance reasons. Is this always true? Or does the locality of memory on the stack sometimes still beat the cost of copying; versus the one extra pointer indirection of passing by reference? I'm at work at the moment so I can't run a benchmark, but I wonder if anyone's already done it or has any insight in to this?
benchmarkdotnet it! 
Short answer: add "public" before the MyHandler method declaration. So instead of: static void MyHandler(object sender, UnhandledExceptionEventArgs args) ... write this: public static void MyHandler(object sender, UnhandledExceptionEventArgs args) Long answer: "Inaccessible due to protection level" means that the code you're trying to run can't be accessed by the code you're calling it from due to an OOP-feature called *access modifiers*. Access modifiers are a tool to be used when you're building an object to ensure that you or whoever is using that code is only calling the methods and accessing properties that you want accessed. This allows *Encapsulation*, (a fancy word for hiding information), a key concept of OOP. For example, if I'm building a Calculator object that implements Add, Subtract, Multiply and Divide methods. However, inside the class there are all sorts of other functions that are used internally, but never need to get called from outside the calculator. Functions like validating/converting input, formatting answers, etc will never need to be called outside the Calculator class, so we'll hide those methods using Access Modifiers so that they're invisible to any code outside the Calculator class. C# has a bunch of access modifiers (here's [the MSDN doc](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/access-modifiers) that explains all 6 levels), but the three that are most important to understand off the bat are: Public: Any code can access this field or method. This is the most permissive access level, and should be used whenever a method is intended to be called from outside the containing class. Protected: Code can only access this field or method if it is contained within *the same class or subclass*. To go back to our Calculator example, a Protected method in our Calculator class could be called from inside Calculator, or from a subclass of Calculator (like a GraphingCalculator subclass that extends Calculator). So a ConvertToDecimal() function that exists in Calculator should be Protected, since it can be used in GraphingCalculator. Private: Like Protected, but sub-classes don't have access. For example, I might want to make my PrintOutput() function in Calculator private, since I don't want it getting called from GraphingCalculator, since graphing calculators have a different output format. (This is actually a terrible example, I just can't think of a better one at the moment) Anyway, as always let me know if you've got any other questions, I'm always happy to help!
Honestly, I'm not sure there's any reason to buy a book. There are so many free resources online that a single book is really not worth it.
Pro C# 7: With .NET and .NET Core by Andrew Troelson. It's huge but it's got everything that C# 7.0: The Definitive Reference has plus heaps of .NET stuff that you might as well learn while you're at it.
Have you heard of udemy.com? I too was learning through books, but i only use udemy since i discovered it. You can easily find coupons with google, that will give you every course for 10$.
Already linked last week i think. Still interesting though :D
Hm, works for me... Have you restored the NuGet packages?
They still respect lifetime of handlers. Helper class is created once per type and cached, but with normal configuration, every time it's called it uses DI container to create an instance of a handler. You're welcome :) . Good luck with your project.
The **.NET Framework Design Guidelines** is a must have if you want to know why .NET works like it does. It is all about API design and how to make libraries that are easy for others to use. But at the same time, it explains the thoughts and debates it's creators were having back then.
If an AOT compiler was a first class citizen for JVM or .NET (high quality output, supporting all major platforms, easy to use) then yeah. I wouldn't use Go. I would use F# or C# or Kotlin. 
C# in Depth from Jon Skeet.
The reason I want a book is because I don't always have internet access and personally don't really like e-books.
Sorry for the late response. I can extract fundamentals that are reported by companies, but I am stuck on estimates call. In the code example provided by them, it shows only examples of reported fundamentals which are being called: df = fsod.ExtractFormulaHistory(); The estimates have different API call which is: factlet=EstimatesOnDemand&amp;id=MSFT&amp;items=EPS,SALES&amp;start=NOW&amp;report=ACTUALS&amp;fiscalperiod=-1,0&amp;periodtype=ANNUAL When I try to call estimates, it gives me an error: No overload for method 'EstimatesOnDemand' takes 3 argument My end goal for this project is to able to extract all the fields from their APIs 
Fair enough
The updated version is coming soon too!
Yes, I updated them, perhaps I'm targeting the wrong framework. 
As soon as a function tries to access a nil value it will panic and the application will crash (if not recovered). And you cannot forget to handle an error, gofmt will not let your code compile with an err not handled, if you choose to ignore the error `f, _ := ...` then you know it was your fault.
``` f, err := foo() // does not handle err b, err := bar() if err != nil { } ``` Also, you're assuming that the other value will always be nil if err != nil, which is not always the case. For example, what if a function returns a (int, err) pair? The error will propagate silently and you'll end up with a crash at some other point if you're lucky, otherwise good luck!
My recommendations from beginner to advanced: * C# in depth (start simple and get progressively more advanced) * Effective C# (best practices) * CLR via C# (very detailed stuff most books don't have)
Clone a couple high profile open source C# repositories while you're online. Can be fun to just read through, looking for patterns you recognize.
Try doing a fresh checkout in a separate directory and see if you have the same problems. If so, good chance you might be missing some file(s) that should be committed to the source control. Are `.csproj` files committed? What about the `packages.config` (Nuget) file? Make sure you don't commit the `csproj.user` file or the `[MY_SOLUTION_FILE_NAME].suo` file as those are your local user/environment settings. Check how references are being stored in the csproj files too. Perhaps one (or both) are referencing DLLs in an specific path rather than the Global Assembly Cache, and that path doesn't exist on both machines. Try creating a simple "Hello World" console application, and see if you run into any issues pushing changes to that. If not, try adding a Nuget package, then try referencing a common assembly (like `Microsfot.Codedom`).
using is not the same as DI 
C# all in one for dummies is my favorite C# 7.0 All-in-One For Dummies https://www.amazon.com/dp/1119428114/ref=cm_sw_r_cp_api_5yRPAbSRC3XJQ
There is aync/await in C#? That sounds awesome (I'm a JS developer looking to get into C#).
You can argue that most programming errors are obvious. A well designed language prevents user error as much as possible, otherwise we'd all be writing C :-) 
Network calls are orders of magnitude slower than reflection calls, so your time will be likely better spent optimising those calls. 
And to answer some of your questions: Yes, it's not that heavy A little on each request won't hurt I would think hard about using it to implement domain events. A lot of uses of reflection (eg scanning assemblies for handler Types which are then dynamically instantiated) break compile time safety and make an app harder to follow 
C# in a Nutshell is a beast that weights 500 tons, but it explains certain areas very well. Look at the free sample chapter about [Threading](http://www.albahari.com/threading/) to get an impression. 
Hi Guys, We're currently working on a collection of open source libraries to help build systems using the CQRS/Event Sourcing patterns. Check them out at https://github.com/XerProjects. We're also open for contributors! :)
Hi, we are currently working on some collection of open source projects to implement these patterns. I initially started the project as a way to learn about DDD, CQRS and Event Sourcing, so I hope you may find it helpful. :) Link: https://github.com/XerProjects
I'm all about the Yellow Book (I believe it's still on www.csharpcourse.com, if not it's somewhere on www.robmiles.com).
Looking in the [OnDemand Developer's Toolkit Manual](https://www.factset.com/download/statlink/Docs%203.0/DevToolkitManual) page 37 Looks like the way to call this is: Data = F.EstimatesOnDemand(ids, items, report, startDate, optional arguments) Now, I'm not sure what the above inputs should be, but this looks like what you're looking for. If that doesn't work for you, in reviewing your querystring above, you have: id, items, and report, but not a start date field. You're calling a FiscalPeriod, but that appears to be an Optional Argument. So, try either adding a start date to your querystring, or calling the above function with the correct inputs. Good Luck! 
Have you considered a build machine ? it will automatically build the project on change and ensure each checkin doesn't break the build. Visual Studio Team Services integrates with SVN, and is free for less that 5 users.
Yeah, it is very very beginner friendly but short enough to make a good occasional fun little read for those with established knowledge. Plus, it's free
*Generally* that's true, but this has happened to me over and over again in my career, notably every time a republican is in the oval office. 
Wanted to add my go to for learning a language. Reading is good, but the brain has a nasty habit of making you think you understand when you do not. Practice will fix that. This site allows you to compare your answer to others. The short feedback loop is great for learning. http://exercism.io
Do you have any recommendations off the top of your head of some source I could look through? 
This is a great answer. Also +1 for TortoiseSVN
yellow book?
Ironically, I'm looking around at making the opposite jump. Still love C#, but Python seems to have more interesting and better paying gigs right now. Still, good luck - I'm sure you'll come to live the tooling (as much as I'll come to miss it). When I was learning C#, I appreciated the "C# in Depth" series.
I'm not sure if there are newer versions, this is just what I had bookmarked. https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf
Last time I checked, October 2018 :/
It's not cool until JS does it 🙄
Dependency injection is easy. The rest of my answer is in another thread. You can find out which thread my answer is in by referring to the master thread.
For whatever reason, C# hasn't implemented any syntax sugar for INotifyPropertyChanged despite it being very important. Instead, we've focused on creating multiple different shortcuts for creating properties that *don't* notify on change. Maybe by C# 10 or 15, when we have 8 different auto-property syntaxes, one will support this use case. But you can probably take advantage of infrastructure already present in the class to help you implement it. The dumbest possible solution: private Image _icon; public Image Icon { get { return _icon; } set { _icon = value; OnPropertyChanged(new PropertyChangedEventArgs(nameof(Icon))); } } I strongly recommend rethinking using `new` on the Text property as you did. When you shadow a property, you break polymorphism. This is usually a very bad idea. What will happen (and this is especially true when you interact with Windows Forms) is something somewhere is going to have your MenuItem in a variable of type `Panel` or `Control` and try to change the Text property. When that happens, it will get `Panel.Text`, not your property, and you're going to be very confused. Voice of experience here. Just use the `Text` property that exists. 
I'd love to have a webdev job with Python/Django, but in my area, there are at this moment just 2 jobs in the whole country, just one of which requires knowledge of the framework, while the other just has it as an extra optional point. Meanwhile, every second job is either asking for knowledge of the .NET framework or PHP. Also checking the wages for Python/ASP.NET developers, ASP.NET developers earn about 30% more, but it obviously depends. So yeah, the reason I consider switching is mostly cause there's not enough jobs for Python devs. 
Once you're comfortable with the basics and you want to learn a bit about program design I can really recommend [Adaptive Code: Agile coding with design patterns and SOLID principles](https://www.amazon.com/Adaptive-Code-principles-Developer-Practices/dp/1509302581/ref=sr_1_1?ie=UTF8&amp;qid=1520881047&amp;sr=8-1&amp;keywords=c%23+adaptive+code). After my teacher told me he was happy with my code but thought I should focus more on the SOLID principles to get it to the next level, I read this book. The first couple of chapters cover Agile and Kanban which was interesting, but I certainly got the most out of the next chapters covering the SOLID principles. Thorough explanations on each one of them.
It's a good book but too philosophical for beginners.
I'm all in with C# in Depth, especially that vol 4 is coming out soon
**Succinctly** *ISomethingThatBarks.Bark()* *House(ISomethingThatBarks dogLikeThing)* House.SomethingMakesANoise() dogLikeThing.Bark() **Given** a House(MockDogLikeThing) **When** House.SomethingMakesANoise() **Then** MockDogLikeThing.Bark()? 
*Isolation* is the goal. Particularly, isolation from *volatile resources*. What are those? Well, anything that changes for reasons not related to your code. For example: the status of your network is controlled by many factors outside both you and your program's control. Why do we want "isolation"? Two major reasons: * If you depend on a volatile API, when it changes you have to change all parts of your program that use it. If you build a facade over it for isolation, when the volatile API changes you only have to update your facade's internals. * If you depend on a volatile resource like the network, you will find your tests against it are brittle and that it's hard to reliably create some circumstances like "really slow network". If you create a layer to isolate yourself from it, you can substitute something you control when you are testing. Most of the time, we use DI for both concerns at the same time. Let's imagine software that stores browser bookmarks in some database. Now let's imagine that database company is going out of business, and you really need to convert to a different database. The naive implementation imports `SomeCompany.Database` whenever and wherever. It directly uses all of the database types when it needs them. You do a quick search and realize 50 different files import the namespace, and there are more than 800 lines of code that need to be edited to use whatever new database is selected. Ouch. Also, every unit test needs to be touched, as it's likely there's extensive code within them to create/manage the test database instances. Ouch. A better implementation created some "data store" abstraction and uses that instead of directly using `SomeCompany.Database`. Even if it's instantiating the types in place, this is less of a maintenance nightmare. 50 different files using it still might need to be modified, but if you're clever you can edit the "data store" parts without significantly changing their API. Odds are high those 50 files need some minor tweaks. The unit tests, though, still have to have significant overhauls because ultimately the "data store" can't be separated from the "real" database, so the same work exists. The DI implementation did the same thing as the last one, but injected it and used a container in bootstrapping. Again, clever work means you only need to do significant work in the "data store" types, but now instead of "maybe the 50 files need to be updated" you just update the container and it takes care of the rest. For unit tests: you're sitting pretty. You already wrote a fake "data store" implementation that pretends some in-memory dictonaries are the database, so once you update the facade types the tests just work. All of this represents a curve of benefits that is a function of your project complexity. If you try DI in simple projects with no unit tests, you will find you spend more time struggling with DI concerns than getting your work done. But if you try it on relatively complex projects with volatile dependencies AND unit tests, you'll find you never want to write code without DI again. 
I believe C# was inspired by F# support for asynchronous programming. But what F# does is quite different, so I think it's fair to call C# the originator of async-await.
Definitely. I think you're right about that. F# has a different keyword for it... um... *goes to look it up* `let!` source: https://en.wikipedia.org/wiki/F_Sharp_(programming_language)#Asynchronous_programming 
[TaskScheduler.UnobservedTaskException](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler.unobservedtaskexception) &gt;If not, it would seem that using the "Tasks" at all is just begging for some nightmare errors in the code base. Tasks aren't the problem here, the problem is that you're using `ConfigureAwait(false)` in UI code as well as not observing the task in `MainWindow_Loaded`.
I've added the UnobservedTaskException. It makes no difference if await is used, it seems.
These two here! 
`UnobservedTaskException` only triggers once the `Task` object is finalized by the GC, so it may not happen immediately (or at all, if you prevent it from being GC'ed)
Sorry, I should have clarified. We are using visualSVN server as well, with tortoise and ankh. I believe we are running into issues where the csproj file is referencing a local file. How would we go about changing that? We have tried uploading whole solutions, only source files, and a ton of configurations but I think the main issue is the csproj file you mentioned. We are not uploading binaries anymore either, just trying to stick to source. Thanks for your response. 
Well, it basically is the same thing as a singleton. The IOC container just handles the singleton pattern for you. You tell it you need a certain interface, it checks if that interface has been instantiated, if not it instantiates it first, then it returns its instance and keeps it running in case anything else needs an instance of it too. So, if you have 4 different classes that hit the database, they all get handed the same database instance/connection, so that it gets reused. But yeah, it's definitely one of the biggest benefits of DI. That's actually one thing that blows my mind with the singleton pattern. The fact that you can have a static class that can write to its own private property, and have that value stored for later. It's amazing that's even possible in the first place.
This sounds interesting! I will have to look into this. Thank you!
To async or not to async that is the question!
Check out the Unity tutorials. There are online educational classes no Pluralsight &amp; Udemy. Here is MVA's class: https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169 C# is a huge language unless you are Jeffery Richter. 
&gt;Tasks seem to silently swallow the exceptions (and not JUST GUI exceptions, mind you, ANY exceptions) this make Tasks the problem. The exception is swallowed because you do not await the task. What else is supposed to happen? The task cannot know whether it will be observed in the future or not.
Could you post one of your failing csproj files?
First of all, thanks for replying. This is the way I've implemented the solution provided on a comment above in my code: [Description("The icon displayed for this MenuItem."), Category("Appearance")] public Image Icon { get { return MenuItemIcon.Image; } set { MenuItemIcon.Image = value; } } [Description("Text for this MenuItem."), Category("Appearance")] public string ItemText { get { return MenuItemText.Text; } set { MenuItemText.Text = value; } } I've followed your advice and renamed the property to something other than Text in order to avoid future problems with my code.
Using SVN is a very viable solution and as /u/FizixMan has said, it is likely a problem with you checking in things you should not or not checking in things that you should. However, given that it sounds like you are a small 2 man team I would strongly recommend going to a hosted solution like [VSTS](https://www.visualstudio.com/team-services/), [GitHub](https://www.visualstudio.com/team-services/), etc. My reasoning for this is that they take care of a ton of the DevOps stuff that you don't have time for. /u/lordofthepi mentioned a build server. VSTS gets you that for ['free'](https://www.visualstudio.com/team-services/continuous-integration/). You need to routinely backup your source repository and verify that those backups are functional. You need to keep a server running to serve your repository. Etc. Etc. You're guys job is to write code that makes your customers happy. You don't want to spend time off in the weeds figuring out DevOps stuff if you don't have to. Just pay/use someone else solution to all that.
We are a small team, but we are part of a large organization with sysadmins and operations teams that take care of most of our needs. Thanks for the suggestions though.
Due to the nature of the organization I am a part of, I don't think that would be alright. I know there is a local path reference somewhere in there though. 
Well, let! is used to extract a value out of a computation expression. F# has an async keyword but it's not actually a keyword it's one of these computation expressions which are basically monads as known in Functional Programming. I would link but I'm on mobile. They are pretty confusing at first but if you take time to study them understanding computation expressions opens up your world to amazing things programmatically!
Removed: Spam. Please familiarize yourself with the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
 Didn't find any ProjectReferences. This seemed important: &lt;Import Project="..\..\WebApps\packages\Microsoft.Net.Compilers.2.6.1\build\Microsoft.Net.Compilers.props" Condition="Exists('..\..\WebApps\packages\Microsoft.Net.Compilers.2.6.1\build\Microsoft.Net.Compilers.props')" /&gt; &lt;ItemGroup&gt; &lt;Reference Include="Microsoft.AI.Agent.Intercept, Version=2.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.Agent.Intercept.2.4.0\lib\net45\Microsoft.AI.Agent.Intercept.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.AI.DependencyCollector, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.DependencyCollector.2.4.1\lib\net45\Microsoft.AI.DependencyCollector.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.AI.PerfCounterCollector, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.PerfCounterCollector.2.4.1\lib\net45\Microsoft.AI.PerfCounterCollector.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.AI.ServerTelemetryChannel, Version=2.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.2.4.0\lib\net45\Microsoft.AI.ServerTelemetryChannel.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.AI.Web, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.Web.2.4.1\lib\net45\Microsoft.AI.Web.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.AI.WindowsServer, Version=2.4.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.WindowsServer.2.4.1\lib\net45\Microsoft.AI.WindowsServer.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.ApplicationInsights, Version=2.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.ApplicationInsights.2.4.0\lib\net46\Microsoft.ApplicationInsights.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.AspNet.TelemetryCorrelation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.AspNet.TelemetryCorrelation.1.0.0\lib\net45\Microsoft.AspNet.TelemetryCorrelation.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.8.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.8\lib\net45\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Microsoft.CSharp" /&gt; &lt;Reference Include="System.Diagnostics.DiagnosticSource, Version=4.0.2.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL"&gt; &lt;HintPath&gt;..\..\..\..\..\source\repos\WebApps\packages\System.Diagnostics.DiagnosticSource.4.4.1\lib\net46\System.Diagnostics.DiagnosticSource.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="System.Web.DynamicData" /&gt; &lt;Reference Include="System.Web.Entity" /&gt; &lt;Reference Include="System.Web.ApplicationServices" /&gt; &lt;Reference Include="System.ComponentModel.DataAnnotations" /&gt; &lt;Reference Include="System" /&gt; &lt;Reference Include="System.Data" /&gt; &lt;Reference Include="System.Core" /&gt; &lt;Reference Include="System.Data.DataSetExtensions" /&gt; &lt;Reference Include="System.Web.Extensions" /&gt; &lt;Reference Include="System.Xml.Linq" /&gt; &lt;Reference Include="System.Drawing" /&gt; &lt;Reference Include="System.Web" /&gt; &lt;Reference Include="System.Xml" /&gt; &lt;Reference Include="System.Configuration" /&gt; &lt;Reference Include="System.Web.Services" /&gt; &lt;Reference Include="System.EnterpriseServices" /&gt; &lt;Reference Include="Library1"&gt; &lt;HintPath&gt;.\Library1.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;Reference Include="Library2"&gt; &lt;HintPath&gt;..\..\..\..\..\source\repos\Program1\Program1\bin\Library2.dll&lt;/HintPath&gt; &lt;/Reference&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt;
So let me ask you this, should my boss and I have the exact same directory structure for our local VS projects? 
https://bitbucket.org/buddelflink87/csprojscan/overview
&gt; Well, yes, but there is no "correct" way to use it in UI code. Requirement: 1.) User presses button. 2.) Update UI. 3.) Execute long-running task. 4.) Do additional calculations that don't need to be done on the UI thread, but don't warrant a separate task. 5.) Possibly kick off another long-running task. Regardless, none of this means anything since the problem has nothing to do with the UI at all, but rather using ConfigureAwait(false) at ANY time would have this same symptom. 
You can learn for free, but how much is your time worth? In my experience your average book is higher quality than your average free online tutorial. I’d rather pay for a well reviewed book and save my time. 
You're right. Dependency injection can make it harder to understand what is going on. In a perfect world, it would be enough to understand each class in isolation, but in practice interactions can be very subtle.
GC is not run on a timer, it's most commonly run when you try to allocate memory for an object, but there isn't enough available in generation 0. So, if you just let an application sit there, it won't allocate any memory and so the GC won't run. If you want to force the GC to run, call `GC.Collect()`.
I would personally ditch SVN for gut and use a hosted solution like VSTS, BitBucket, or GitHub. Make sure to set up a gitignore file for any extraneous files. Make sure that you ignore all NuGet directories and setup VS to restore NuGet on build. Use a branching structure that makes sense for your team. Every user should have their own topic branches off of a development branch. Then maybe a stabilization branch. Then a main branch. Each release should have it's own branch or at least a tag. I know you said the team was small but this is when you setup good source control management. Once you have another team member it will be trivial to add them. If you don't have good management it will be exponentially more difficult.
Ah, lemme try that and see what happens. 
You `await` the `Task` returned from `WaitOneSecond`in `RunDelayAsync`. That will observe the exception and place it on the `Task` returned from `RunDelayAsync`. But you don't `await` that `Task`, which is why you don't observe that exception.
&gt; await WaitOneSecond(); That await will observe the task returned by `WaitOneSecond()` and rethrow the exception, which will then correctly mark the task returned by `RunDelayAsync()` as faulted. But then in `MainWindow_Loaded` you do not await or otherwise observe the task returned by `RunDelayAsync()`, and so the exception goes unnoticed. &gt;The exception should be caught by one of the TWO events I've subscribed to in order to see exceptions. Copying the posted code verbatim to a new WPF project does raise the `UnobservedTaskException` event for me after a few seconds as expected. But perhaps if the test app isn't doing anything and isn't interacted with, there just might never be GC pressure that will cause the task to be collected and finalized. Unfortunately there isn't any way around this, GC is indeterministic and the runtime cannot know for sure if the task is unobserved before it is garbage collected and definitely cannot be observed anymore. Anyway, if you want to catch exceptions from tasks, then observe the tasks (all of them).
Clr via c#
Reading it currently, recommend it for everyone :)
a calculator is a good start, research WPF or WinForms and get to work. 
&gt;rather using ConfigureAwait(false) at ANY time would have this same symptom Using `ConfigureAwait(false)` in code that does not interact with the UI (or another sync context) is fine. Indicating that you don't want to continue on the UI thread when you actually interact with the UI is not. &gt;Additionally, arguing about the "correct" way to implement anything is always moot. Particularly when, as I've stated, the code base already exists. It has a problem. I need a real-world, viable solution to a problem. Your code base has a bug. The real world solution is to fix the bug. There are two independent issues here: - Don't use `ConfigureAwait(false)` in contexts that interact with the UI - If you want to catch exceptions thrown in tasks, don't ignore the results of those tasks
Some great answers here, so doubt its needed, but I've been doing some reading on DI myself recently, and this was handy... http://deviq.com/strategy-design-pattern/
[`let!` was sort of an early forerunner of `await`.](https://blogs.msdn.microsoft.com/dsyme/2007/10/10/introducing-f-asynchronous-workflows/) // Get the response, asynchronously let! rsp = req.GetResponseAsync()
Lots of great info in this thread already, but the other less mentioned piece of the puzzle is Inversion of Control (IoC). It's a pattern in which the "container" is responsible for managing the lifetime of your dependencies injected by the DI mechanism. There are various containers out there, and the terminology varies slightly, but generally they offer very similar functionality.
&gt; Using ConfigureAwait(false) in code that does not interact with the UI (or another sync context) is fine. This would still cause this symptom of the exceptions being "swallowed" until garbage collection. &gt; Indicating that you don't want to continue on the UI thread when you actually interact with the UI is not. I don't disagree. That wasn't the point.
Indeed, it looks like the problem was the lack of garbage-collection. Going to have to find a "clean" solution there, even if it's having a timer push it every second (which I'd hate).
Can you not observe the result of the task by awaiting it ?
Async for some, miniature American flags for others.
Bro you don't seem to understand how async works. Just await or .Wait() your Task to have any exceptions thrown. 
+1 for Effective C#, especially for folks newer to C#
Once you tackle some of the fundamentals of C#, I'd like to suggest *Dependency Injection in .NET* by Mark Seeman. A new version is planned to release this year. 
How does this compare with Sigil? https://github.com/kevin-montrose/Sigil
Second for TortoiseSVN (and its brother TortoiseGit).
Well i need to know the schema, I assume the Id matches to TypeId
Sigil is more of a complete replacement for ILGenerator, while this library supplements ILGenerator with more strongly typed emit methods. On top of that, it targets netstandard2.0 and as such has a wider support range, which Sigil does not. Sigil mainly targets DynamicMethod and orients itself towards that. This library is "closer to the metal", and doesn't make any use case assumptions.
* Reverse a String (without .Reverse()) * Count vowels * Count words * CD key generator Then create some games, like hangman, tic tac toe, rock-paper-scissors.. Start learning topics such as static vs non static and classes by creating a movie or library catalog. Use WinForms or WPF.
Funny how that works out. Looking back, I think I was seeing that to some extent in the late 2000s. But I was in military contracting, directly related to the wars. So for me it was more "I can't find a new, better job" than "I'm going to lose my job." Couple that with me being young and stupid, it's easy to see how my opinions could be skewed a bit.
I always recommend creating something that you will use. Doing this will not be easy, unless what you need is very simple... so think BIG. Take the time to learn to write a bit of a spec, that will be helpful too. Having a target, an app/game that you will use will drive you to learn more.
Dictionaries are awesome when you have a list of dictionaries and each dictionary represents a database row for loading data. The key is the column name and the value is the column value. Then you just iterate both to insert tons of data at once using ADO.NET
Other people have given good answers, but I'll give my own, as a person who is still not big on DI (I'll give those reasons too.) But one really nice thing about the whole thing is that if you're writing good code that follows SOLID principles, DI is rather transparent and does not get in the way of things. It saves a lot of time writing the sort of boilerplate code that allow maintainability, especially on gargantuan projects. OTOH, I still have my counterpoints: - *IF* A module is sufficiently small, there may be no need for DI. Microservices are an example where this may be relevant. - People find horrifying ways to abuse DI, be it with interception, Configuration schemes that remind you of the worst of EF EDML and Code First *at the same time*, Container-in-application usage, and all the other ways that *make your code dependent on DI*. That's my real point here; people often wind up writing code that is dependent on DI to function on an application/business level or otherwise have a design that is arguably more brittle than what non-DI usage would provide. - If your code is good enough to use with DI while not cursing at %library%, unless your code has very very very deep dependencies it won't be much more work than setting up a DI Container to just wire up some factory methods that will be almost as maintainable and a bit more likely to break at compile time than run time. - One nice thing about a past project I worked on was the lack of DI made it very clear when something broke in the dependency chain. Other projects in that shop that used DI were not always lucky, with dependency issues cropping up at runtime. I'll admit, You can write up a method to check your dependency chain on startup. (SimpleInjector actually has some of this capability out of the box, not sure which others do if any.) But it's a little more work to keep in consideration. Does all of this mean you shouldn't use DI? At this point, I'd say you should use it when appropriate, *but* you should write more DI-Able code under normal circumstances because it's going to be more maintainable anyway.
Lambdas are in VB.Net too. We just don't talk about them because the syntax is horrifying. ;)
Late to the party... I like the syntax of C#. It feels less obtuse and wordy than Java (Even before auto-properties were a thing). On a broader level: - Generics. Beautiful abuse-taking generics. - Reflection. Able to do so much more with Library code thanks to reflection, so much less boilerplate for things. - Expressions! Learning how to even *look* at Expression types in code has let me write libraries with absolutely *beautiful* syntax.
What does maintain the altered value of the boolean funtion mean? 
They have the Early Access Program though, so you get access to the older version and new chapters as they are written!
If you mean retain the returned value of the credential check the simpilist thing to do is write the value 1 or 0 to a text file in your project directory.
So, the form pops up and it's a username/password window. The first code I have does a string check to see if the values are a certain string. If they are, it changes the credentialCheck boolean function to true. Otherwise, it changes it to false. After the form closes, this true/false declaration no longer holds. You could substitute the function for a boolean variable, and it's the same thing. If I declare is true/false based on user input, it no longer maintains that value after the form closes.
Oh! That..makes a lot of sense. Ok. Thank you!
Probably the simplest approach would be to You could use ShowDialog and set the DialogResult based on the result of your simulated log in. Check this out. https://support.microsoft.com/en-us/help/816145/how-to-use-the-dialogresult-property-in-visual-c
definitely "C# Players Guide" its awesome book takes you from beginner to advanced topics. you can look at a sample from the book in their website and if you like it you can buy. Awesome book http://starboundsoftware.com/books/c-sharp/details
I'm not a C# expert but Illustrated C# is my required text for my C# class and I like it a lot. I am more of a Java Developer, but I also really enjoy C# and have found the way the book breaks everything down is really great. https://www.amazon.com/Illustrated-2012-Experts-Voice-NET/dp/1430242787
Check out this Async Await Best Practices video. Hopefully it helps clear up some questions! aka.ms/AsyncAwaitBestPractices
I think you're just missing a little bit of Task understanding. If you await the Task in MainWindow_Loaded, as you really should here, then the exception would be caught by the try/catch. It's not caught there because you're not awaiting it, and exceptions from Tasks are thrown when awaited.
Instead of `Application.Run(new Form2());` you should replace it with `Application.Run(formObject);`.
This didn't seem to do it :c
That is a book I really love. But not for learning the language, but to get little details on specifics of certain things. CLR via C# is really low level, so isn't either for the beginner but it's a great book for advanced topics
I don't disagree with you in that it is obviously the programmer's mistake for not checking the return value. However, humans will make mistakes, and so using tools that minimize the effects of said mistakes, or prevent classes of them altogether (e.g. non-nullable types) will result in a net positive on code quality. My argument is that golang's error handling is marginally better than C's. While Java's error handling is aggressive, the vast majority of other JVM language (e.g. Kotlin, Scala, etc.) went the way of C# with using unchecked exceptions. Now whether or not these are better than say Rust's error handling can probably be argued, but the point remains that an uncaught exception will bubble up and either cause your program to crash or get caught at the base exception handler, as opposed to causing the program to silently remain executing and may as well end up in some undefined or unexpected behavior as may very well happen with golang.
I would need to have a look at your whole project, particularly your entire `Form2` class.
You can do this using an ApplicationEvents file.
If hes starting programming dont tell him to go code a calculator or games. Learn what data types are. Variables. Ifthen, arrays, cycles,..
Yes, for a couple of reasons: - virtual calls (through an interface) are inherently slower than direct calls - virtual calls aren't inlined - `List&lt;T&gt;.GetEnumerator()` is optimized to avoid a heap allocation for the enumerator, but going through `IEnumerable&lt;T&gt;` will cause a boxing allocation However, we're generally talking about nanoseconds here. Unless you're working on very high performance code and accessing the list in a hot path, don't worry about it and focus on code quality and maintainability instead.
Oh man just looking at these numbers is such an obvious example of selection bias. &gt;55% of developers contribute to open source, and &gt;80% consider their job a hobby? These numbers are so far off my experience with developers I've met in my jobs it's not even funny. Not saying the data isn't valuable or interesting, but God Damn those numbers are seriously skewed to a demographic that isn't your everyday developer just working his/her job.
Why do u call InitializeComponent yourself?
&gt; t only knows how to send out notifications. Your application code is what implements the handling of the notifications. It can log the information t Thanks. I am doing something very similar. in fact its almost exact. I was just getting annoyed with all the coded Notification text I was coding into the processing class. But I guess it is how it needs to be. I have to coordinate between Image Processing classes, database messages, cloud services, etc. lots of work! This tool runs has 2 separate logs. 1 for each item processes (A verbose log of everything) and second if it is running as a console app (rather than a service) it logs messages to the console as well. "Processing ID-&gt;123456, slides 56, URL http.Meh.com/bart.pptx-&gt;started {Time} "Processing ID-&gt;123457, slides 56, URL http.Meh.com/lisa.pdf-&gt;started {Time} "Processing ID-&gt;123457, Completed -&gt;Elapsed Time "Processing ID-&gt;123456, Completed -&gt;Elapsed Time 
Sure thing - I'll get some up on the repo.
There's a school of thought that it's actually easier to maintain if you have those things written out explicitly. Containers make construction dynamic and you lose many of the benefits you get from static typing. 
If you look at the Experience section I think you’ll find your answers. But I think you misinterpreted the hobby question. It’s asking if they code as a hobby, not if they consider their job a hobby. 
I don't use it. It's bad voodoo do have different outputs depending on compilation time values. In most cases it's better and safer to just use a configuration, e.g. feature flags. And if I really have the need to omit code from the compilation result I move it to dedicated classes and use proper `#if` regions.
&gt;selection bias. I assume that this is a survey of Stack Overflow users
Very interesting. 
Bob tabors C# Fundamentals for absolute beginners was a decent series for me. It’ll get you started and give you the skills for basic stuff like most of the console application stuff others have listed. Just try to start slow, and use resources instead of trying it all alone.
Not trying to start a flamewar, but why is Python so popular? I've tried using it and I just don't see the appeal, compared to c# Although I don't like whitespace scoping so that doesn't help...
Perhaps this can help? He's probably referring to a winforms app. https://stackoverflow.com/questions/38903150/integrate-a-c-sharp-console-application-with-a-gui
Database access Is really helpfull so take a look at MySQL or SQLite and how yo use them from c#. Good luck!
hes specifically stated that it MUST be run from console and ONLY show UI if there are no args given
It’s the language to use for machine learning, and machine learning is on the rise. 
this seems a lot cleaner than my previous solution, I will give this a try
I used to do something similar using compiler directives, but found I was really in need of a good design pattern such as dependency injection. There is a need for something like this in the case of highly specific code such as com objects that maybe platform or cpu dependent.
Try catch is only scoped to the thread it's in. If you use another thread such as a task you need a try catch in that code too. I am not aware of a feature in Tasks that will allow the exception to bubble up. See this for more info: https://stackoverflow.com/questions/778437/try-catch-and-threading 
"Must be run from the console" doesn't mean it has to be a console application. Personally, I'd go for a Windows Forms application. In the Main() method, you'll find the following line: Application.Run(new Form1()); That's the line that shows the UI. So you can easily arrange it so that that line only runs if the UI is required. Then, as I said in my first post, you can google how to show the console from a Windows Forms app.
you deleted your comment as I was replying, I will give it a try, thank you very much
Ok thankyou
Its data-structures are super clean and powerful. Also, while using tabs for indentation can be a gotcha sometimes, getting rid of curly braces cleans things up even more. It's generally just a super concise and readable language, especially in the hands of someone who knows what they're doing.
Question for you - why did you use the correct spelling for every single word within your sentence except for 'you'?
It might matter in performance critical environments, though. I'd generally agree, if the code you're writing won't be performance critical, use conditionals. On a related tangent, the Solaris kernel supports a tracing mechanism called DTrace that solves this problem - it allows you to turn on trace points while the kernel is running, without recompiling the kernel - and - the tracepoints consume exactly zero CPU time when they're not active. How? The kernel re-writes its own instructions at the trace points to enable or disable the trace. Neat, isn't it?
I've got a project that used #if to decide which objects to inject. It was lots of fun to discover that our fake email sender was hidden behind `#if DEBUG` and our development server only uses RELEASE builds. Lots of users got spammed that day. (In my defense, I originally used a flag in the configuration file. My client was the one who demanded this nonsense.)
If you want to get detailed... I'd do four projects in one solution. 1. Launcher 2. Console Application Logic 3. GUI Application Logic 4. Library for Shared Logic Launcher points to console or gui depending on application args. They both share the library to keep it DRY. Launcher could be as simple as main that opens to a branch statement saying if no command args instantiate gui, show dialog, hide console. Else run entrance function for console application with passed arguments.
That's actually pretty cool. But I still hate anything that changes behavior based on debug/release builds. The only `#if` I allow in my own code is for targeting multiple platforms. 
Well, that is pretty useful in game dev. Say you use your own debugging system, you wouldn't want any CPU or RAM overhead caused by it to appear in the final game.
Man, different perspectives are weird. For me, weak typing and whitespace scoping are clear negatives
I work in game dev and conditional compilation is pretty useful here. The behavior I described in this question is actually slightly problematic, even though it could make sense. I'm a bit disappointed that the only answer is merely repeating what I said in the question and not digging any further.
I can't stand whitespace scoping. Something other than tabs and spaces needs to maintain scope. Maybe whitespace vs brackets is more about personal preference/aesthetics.
What are 'super clean data structures'?
The method I prefer the most for this problem which is used for Visual Studio (devenv) and what I used for OpenRCT2: * location.com (console app) * location.exe (windows app) * location.dll `location.com` and `location.exe` are identical except for one byte which says what subsystem it is. You can edit this using the `editbin` tool. They are a wrapper around location.dll, just passing through the arguments. The benefit of this is that if you invoke the application via explorer, you do not get the console. If you run it on the command line without an extension, it will default to .COM as that is higher precedence on %PATHEXT%. E.g. ``` location -p 43 -h www.google.com ``` I am not sure why this is part of your assignment as it seems overly technical. The simplest solution is just to always build a console app, and just open a window if there are no arguments. The only disadvantage to that is that you can still see a console window, but that might not be a problem for your situation.
https://code.tutsplus.com/articles/advanced-python-data-structures--net-32748 Take a scroll through here and check out the syntax. It's less heavy and more fluent than C#. This is part of the reason why Python is popular for data-science applications.
Try walking the stack. Or maybe (just maybe, could be wrong) try going the task/await/async routes. Could also be the code you're calling is just eating errors and not rethrowing them. Check your event viewer also, might have clues in there. If it's talking to sql server, use the spy tool to watch what is being called and returned (i can't remember the apps name but its an ms sql tool).
I have never seen it before, I'm guessing it returns the type's `default` value if the value does not exist/is null? (outofbounds/nullreference)
My first question would be - are you using an ORM and if so which one? If you're using Entity Framework 6 (or EF Core) I would highly recommend against using a repository pattern as EF basically does that for you already. At that point you're just redundantly abstracting for no reason and no value. If you have multiple data providers/sources I would look into using an API gateway to handle all of that and you can make it into one endpoint for you to consume. I also don't understand why you need to query both? If you prefer to use ElasticSearch for performance reasons than query against that. If you're concerned about the delay, then query against your source of record knowing you're going to take a performance hit. If you query both you're getting the worst of both worlds while making things more complex and getting zero benefits for doing that.
that's very well explained, thank you
I did hear back from MSFT just this morning and they confirmed what we already knew. He did add that defining service endpoints at different scopes (besides project) is on the roadmap for future releases.
&gt; My first question would be - are you using an ORM and if so which one? &gt; If you're using Entity Framework 6 (or EF Core) I would highly recommend against using a repository pattern as EF basically does that for you already. At that point you're just redundantly abstracting for no reason and no value. Because of learning purposes, I want at _this point_ use as few libraries as possible. &gt; If you have multiple data providers/sources I would look into using an API gateway to handle all of that and you can make it into one endpoint for you to consume. The problem would be the same; how can I - as easy and "pretty" as possible - combine multiple data sources? &gt; I also don't understand why you need to query both? If you prefer to use ElasticSearch for performance reasons than query against that. If you're concerned about the delay, then query against your source of record knowing you're going to take a performance hit. If you query both you're getting the worst of both worlds while making things more complex and getting zero benefits for doing that. As I explained, I want to query Elasticsearch first for performance reasons. But because the Elasticsearch cluster isn't 100% updated, I want to query the original data source (the third party provider) in case the query against the Elasticsearch fails. I know that in cases where this happens, there's actually a performance hit, but only 1% (or whatever) of the requests towards the Elasticsearch cluster will fail, so _in general_ it's much faster than querying the third party provider. Consider this pseudo-ish logic that I want simplified: public User getUserById(int id) { var user; if (user = esUserRepository.getById(id)) return user; if (user = thirdPartyUserRepository.getById(id)) return user; } I can also end up with a _third_ data source. I just want to explore the opportunity to do "all this" in an elegant way, if possible.
Yeah, this is actually extremely useful in any performance critical code. `Logger.Log($"Position {x}, {y}");` could still allocate a string every frame in your production code even if your logger is setup to only log if a debug flag is set in your config files.
Not related but I'm curious, is OpenRCT2's drawing (sprites/images onto the window) performed in Windows using SDL2?
Create a Win32 subsystem application (so no console is allocated by default). This is the default when you create a WinForms/WPF application. In your `Main` function, either initialise your GUI or call [`AllocConsole`](https://docs.microsoft.com/en-us/windows/console/allocconsole) to create a console window as needed. The downside of this is that if you launch your program in command-line mode from `cmd`, it will create a new console instead of attaching to `cmd`'s console. Alternatively you can create a console subsystem application and call [`FreeConsole`](https://docs.microsoft.com/en-us/windows/console/freeconsole) as needed, but then you will see a console window pop open and then close if you e.g. launch your program from Explorer without arguments. If your program will always be launched via `cmd` (as you mentioned in another comment) this may not be a problem.
That's a shame but as you say , expected. Thanks for coming back to update though
can I be a pain and ask "Launcher", what project type would that be? since it is neither a console or a UI project
One nitpick here - they refer to Angular as AngularJS - these are actually two different things. I don't quite remember but did the survey itself distinguish between the two? If not then this will skew the numbers upwards.
The Launcher could easily be a console project that reads a config file and loads the requested front end based on the config setting. 
It returns null if the object you are trying to index is null. It doesn't not handle the case of index out of bounds. So something like List myList; String something = myList?[0] ?? "Foo"; Doesn't crash with a null reference exception. 
I created a websocket library that may be of some assistance, either in helping you simplify your code or learn from the way I built it. Specifically, take a look at the TestClient and TestServer projects for consumption on client/server side, and the WatsonWebsocket project for the underlying classes. https://github.com/jchristn/watsonwebsocket
I don't find this neither useful, nor elegant. Who's responsible for the `DbContext` or something similar? And what if I want to retrieve the `User` in order to change it? What if the `User` in the first repository is stale? And what if I want to optimally retrieve other user related entities? What if I just want a projection? Doing this hides all the benefits of what Entity Framework or Elasticsearch would provide. They are so different that there isn't any point unifying them. You would be missing exactly the things that they are good for. Embrace them as tools. Use them explicitly in your code instead of trying to hide them behind a leaky layer.
Look at the template for a brand-spanking-new WinForms project sometime. Then do the same for a brand-spanking-new Console project. The only points of interest are in Program.cs. (For shiggles, you can do the same thing with a WPF project, but that can get a *bit* more advanced.) Note the differences between the two project templates' versions of Program.cs. Now you can begin to understand how there's basically *zero* difference between the underlying executables. It's all about what you do in Main(). Now what do you need to do to handle args[]? Put that in Main(). Now what do you need to do to determine whether to show a UI or not? Put that in Main(). That should get you 90% of the way to where you need to go.
You may want to set the id's for the classes as that is what add or update will use to determine if they exist I would of thought. 
Turtles all way down: public interface IUserRepository { User GetById(int id) } public class TurtleRepository : IUserRepository { public TurtleRepository(IEngine engine, IUserRepository next) {} public User GetById(int id) { var user = _engine.GetUser(id); if(user==null &amp;&amp; _next!=null) { user = _next.GetUser(id); if(user!=null) _engine.SaveUser(user); } return user; } } You could then simply (heh) instantiate a repository chain using something similar to `var repo = new TurtleRepository(cacheEngine, new TurtleRepository(elasticSrch, new TurtleRepository(new DbContext(), null)));` As /u/SirSooth wrote, wrestling with multiple repository layers isn't a very good idea. There are some use cases though, like wrapping a repository for read only data in a caching repository.
"Bro" I understand plenty. I've updated the original post for you. (Also, your suggestion could cause deadlocks.)
And for lots of robotics!
https://www.hanselman.com/blog/CargocultProgramming.aspx
Side-question, how would returning an array affect performance?
Just some suggestions as I haven't actually run the sample, but [AddOrUpdate](https://msdn.microsoft.com/en-us/library/dn176991\(v=vs.113\).aspx) uses primary keys in the database to decide whether to add or update. The PK property isn't set on Customer, Inventory or Order, so if you're happy to hard-code these IDs you could add this to the Seed() method. Otherwise you could add some logic to clean up the records from previous Seed() calls.
The whitespace scoping absolutely irks me. I don't understand the thought process behind that. I've had all kinds of errors and i think it is a logic in method calls, etc. Nope. Didn't have the right amount of spaces. 
I would recommend calling [GetConsoleWindow](https://docs.microsoft.com/en-us/windows/console/getconsolewindow) or [AttachConsole](https://docs.microsoft.com/en-us/windows/console/attachconsole) before calling AllocConsole.
If you want to avoid deadlocks then keep your async code in a Task.Run(async () =&gt; ...);
I love your profile avatar. :)
People like python for a few different reasons - but as with all things in this industry, to some extent it's just momentum. Right now, python offers more interesting jobs, and higher pay - so people are excited about it, which means more smart people going into python, and generating those interesting exciting projects. If you are bright-eyed and hungry, looking to innovate - the .NET ecosystem can seem pretty stodgy, and seem like a death knell of doing enterprise stuff for the rest of your career. I'm not saying that it's completely true - but at the same time, it's not completely false either. 
I really don't see much of an advantage over C# and linq. I doubt that things like this are responsible for Python's popularity in those arenas.
But then how will publisher push p2w lootboxes to a single player game?
It depends on whether or not you want to learn C# for Unity or for other purposes. And it depends on any prior experience with programming. Learning with Unity will be very Unity-specific. You'll be learning things that have little to no relevance in other C# programming, such as the Unity MonoBehaviour class. With Unity developing you typically don't touch on some of the more advanced concepts, especially not in a beginner's course. You'll spend more time learning about Unity components than learning C# in depth. You'd need to be making a pretty complex game before you'd need to use C# 'properly'. When making games in Unity, there is a tendency to use C# as a scripting language, which is quite different to how you might use it in other contexts. ----------------------- I'd recommend learning C# and Unity in parallel. By all means do a Unity course, but also find some C# resources and learn it as a language rather than just as the scripting language for Unity. And get a good C# book you can read in depth and use as a reference.
Measure with a profiler. Most likely you won’t notice a difference. So use whatever is the most readable solution in your opinion. 
UWP is Universal Windows Platform. Don't get confused with WPF (Windows Presentation Foundation). UWP is for Windows 10, Xbox One and Windows 10 Mobile.
From Xamarin site: &gt; Deliver native Android, iOS, and Windows apps, using existing skills, teams, and code. It is supposed that the final executable is native.
You could pass in a CancellationToken and write the loop as `while(!token.IsCancellationRequested)`, which would also give you a way to cleanly shut down the thread or task.
I agree, I dont like lambdas in VB.net.
I think if you have an alternate programming background Unity is a great way to get started with C#, since you’ll already have a taste of proper structuring and perspective and you’ll seek it out as you explore unity. My first exposure to C# was through quite a bit of Unity, but I had already been a professional dev for some time.
Thanks :D
If the threads need to finish a loop before ending use the CancellationToken suggestion, otherwise use Thread.IsBackground = true, then the runtime will terminate them on exit. 
The language, perhaps. Sort of anyway - they're usually late with the versions. But the language is only the very start, really. If you're talking about professional applications of C# (outside of Unity, that is), it's better to start getting the handle on the frameworks that make up the .NET ecosystem, and its prevalent design patterns.
&gt; If you're using Entity Framework 6 (or EF Core) I would highly recommend against using a repository pattern as EF basically does that for you already. I wish it did. In truth using EF correctly requires a lot of boilerplate code that should be hidden behind a repository layer.
&gt; the Solaris kernel supports a tracing mechanism called DTrace that solves this problem Windows has that too. I think it was called "Event Tracing for Windows", but don't quote me on that.
Pay2Debug, of course.
I self taught to learn programming in Unity, first JavaScript then C# shortly after (~3 months). Now I am hired as an application developer in which I primarily working C#. A bit of a road map for someone who doesn't know programming to being with (which might not be you). Before doing anything in Unity I picked up a JavaScript book and learned the basics of programing and object oriented programming. I then started doing scripting in Unity with JavaScript, your basic stuff to make a simple game work. Then I was asked to help on a project that used C# in Unity. After a bit of reading and using it I was liking C# more than JavaScript in about 2 weeks. Unity had more support for it and C# had better features. Again continued to use C# and learning OOP design. What really helped was looking into creating Unity editor tools and creating them. Created a 3d map tile editor, created a simple sprite animation tool, and 3d building system. After finishing up my Computer Simulation and Gaming course (as a designer) I got a job in tech support. I got to learn a lot about the back technologies such as SQL and databases, web servers, services / deamons, etc. I continued to learn about C#, but now aiming to be professional about it, such as version control, unit testing, security. Lots of reading and practicing at work. I made sure to put my skills into automation and bug fixing at my job. After two years of tech support and inserting myself into projects more the company promoted me as an application developer. I will still continue to learn. Moral of the story, there is so much knowledge out there you can learn almost anything. Can you start learning C# in Unity? Definitely. Do you have the willingness to continue to improve your craft and knowledge? That depends on you. 
&gt;UWP is for Windows 10, Xbox One and Windows 10 Mobile. Right, so you think uwp is used more than wpf despite how new it is? &gt;Xamarin is not only for mobile, you can create applications for Mac and WPF. Are you talking about xamarin forms or the editor? 
Sure. I mean, used like this, a CancellationToken is just a glorified bool.
No it is not. You’re writing C# in a very different way. On top of that you’re only learning C# 4.0 unless you use experimental C# support.
Yes and no. You'll certainly learn C# syntax, but you won't learn any best practices, or even scratch the surface of C# potential. Get your start in Unity for sure. If you do only unity and get a job in game dev, good for you and enjoy a kick arse career. If you find that you want to instead get into business app development later on down the track ensure you realise that further up skilling will be required otherwise the imposter syndrome will come knocking. Let me be clear, yes, Unity dev is a very good way to learn C# programming **basics** from scratch. Do what's fun, which Unity certainly is.
And it's always worth insulating your code with a layer of anti-corruption in the event that EF receives a breaking API change.
But a bool is not object oriented. Everything is better when it's an object with an interface that can be factoried, injected and unit tested with mocks.
It sounds like you need to add another layer of abstraction above your repository layer. For lack of a better name, a service, which uses a combination of repositories and other data sources to access data and perform its work. I don’t think I’d be looking to wedge another data source into a repository that’s designed to access a database. Rather, just add a wrapper. 
Video linked by /u/274Below: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Episode 1 - Mongo DB Is Web Scale](https://youtube.com/watch?v=b2F-DItXtZs)|gar1t|2010-08-27|0:05:36|4,183+ (97%)|458,843 $quote Q&amp;A discussion discussing the merits of No SQL and... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/274Below ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=$comment_id\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
I think learning to program with video games is a great way to start. Getting that visual feedback really helps to understand what is happening. With that said Unity would not be where I would start with programming. Really any kind of game engine would not be good imo. The reason is there is a lot of other stuff you will have to learn on top of the language, and engines tend to direct you towards a certain style of programming that can be very specific to that engine. I would suggest finding a gaming framework like MonoGame(XNA), and using that. It will have the benefits or learning through game development, while also not hemming you in to a specific style. This will allow you to explore a wider variety of topics, and get a much better understanding of programming in general.
Well, look at the names. Server GC is optimized for server scenarios--it sacrifices memory consumption for throughput by scheduling GC less aggressively than Workstation GC does. So processes using Workstation GC will tend to use less total memory, but pause more often. Server GC processes tend to use a little more memory, but pause less often.
[Let me google that for you...](http://lmgtfy.com/?q=workstation+garbage+collection) First result - https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/ Really in depth guide from microsoft. The TL;DR is that you should probably profile your application with perfview or something to figure out which works better for your application.
I should show this to a coworker. Maybe he'd stop stuffing fucking redis, solr, ""SHARDING"", "HIGHLY AVAILABLE", "OUT OF BAND MONITORING", "EXTREMELY SCALABLE", "DISTRIBUTED TRANSACTIONAL", and other disgusting cringe-worthy, vomit inducing catch phrases into every other sentence.
 public interface IBoolean{ bool Value(); } public class AlwaysTrue : IBoolean { public bool Value() =&gt; true; } public interface IForever { void CallMe(IBoolean maybe); } public abstract class ForeverTemplate{ public virtual void CallMe(IBoolean maybe){ Bing(); If(maybe.Value()) { CallMe(maybe); Bang(); } Boom(); } public abstract Bing(); public abstract Bang(); public abstract Boom(); } //use while(true){}
Personally these days I don't see it as Beginner-&gt;Intermediate-&gt;Advanced-&gt;Expert in a strict way. Instead I think once you get past 'Intermediate' or so you instead just have Expertise in different areas. For example you could be an expert in performance, or maybe an expert in the build system/platform, or an expert in certain areas of .NET like the TPL, SEH, PInvoke, etc. I think it generally becomes waaaay more branching out as you go higher up, and whereas back when I was a beginner I thought you got to 'Expert' and that was it, I now realise that I'll never be able to know everything there is to know about C#/.NET, so it's better to keep important knowledge up to date and specialize in areas that I'm good at and are marketable. Hope that helps!
I had a professor who explained it like this. Begginer can write code. Intermediate can write functioning programs. Advanced can write optimised algorithm and highly effective programs. Expert got it all in his own library and just edit whatever he needs.
Thankyou i will try get it Currently working working through C# basics course from Udemy
while(someBoolVariable) . . if (statementYouCheckForExiting){ someBoolVariable = False } . . If you can't structure your loops this way, than your code is most likely overly convoluted. As for the getting rid of threads: Thread th = new Thread(function1); th.Start(); th.Abort(); // This is how you force close the thread.
Yes and no. If you're currently using a `Thread.Sleep(x)` in that endless loop, you can replace it with `Task.Wait(x, cancellationToken)` which solves a serious problem during shutdown.
1. Learning basic syntax (I liked **Expert C#** when I was a tutor) 2. Learning the common libraries (**MSDN**. Seriously, spend some time just familiarizing yourself with the documentation) 3. Learning API design (**.NET Framework Design Guidelines**) 4. Learning architecture and project management (**Code Complete 2**) 5. Learning specialties (SQL, COM, multi-threading, WPF custom controls, EF (ugh), distributed systems, etc.) Though I hate it some times, if you aren't learning you're backsliding. No one can just 'rest' for more than a year without losing touch on anything but the specific code base they're working on.
I went and got a drink just so I could come back, re-read your comment, and spit it out.
Definitely learn to use CancellationTokenSource and it's beautiful little baby CancellationTokenSource.Token. You can use IsCancellationRequested in a while loop, or supply a token to an Async method to let you bail out prematurely. Tokens are used commonly for Async tasks, and if you use a token in a Task.Wait(token), and the token is marked cancelled before the Wait returns, an OperationCancelledException is thrown which you can catch and clean up things before shutdown if needed. I fuckin love cancellation tokens.
If this was Java I'd say you're missing a ForeverFactory
Luckily, I'm confronted with a read-only scenario (except for caching, of course, which needs to write somewhere). I totally see your point, but I was hoping to come up with an elegant-ish solution where I only needed to write the front end application once, and letting adhere to one syntax independent of the backend, and then just worry about the backend itself.
That looks way too complicated, but maybe I need to go down The Complicated Road to get this done. :)
But just python bindings, only lunetic would write ML internals in python instead of C++. Is there actually some ML written purely in Python?
Can you recommend any specific source? I've been learning c# since august and also shifted towards Unity. But as you said , it doesn't seem like I am using it to a full extend
No, because Unity isn't just about programming.
Thanks, jeyjeyemem! I'll check it out.
[Thread.Abort](https://stackoverflow.com/questions/1559255/whats-wrong-with-using-thread-abort)
Monogame you'll be a champ after a month I promise 😂
I don't see why you should *not* upgrade. 
Don't know why this is downvoted, but this man speaks the truth. Why you'd want to start with a specialized subset for a specialized purpose rather than the basics (in this case raw C#) itself is beyond me. 
Pause less often but for longer time. 
That sounds like a pretty bad idea. The “project directory” what’s that? And why would it be writable, or even exist, at runtime?
No, the problem is that you abandon your tasks instead of awaiting or waiting them. 
It's not. `CancellationToken.IsCancellationRequest` is obviously just a bool, but `CancellationToken` has a wait handle, and you can register tasks to run when cancellation is requested. I use `CancellationToken` all over because it's extremely useful in both asynchronous and parallel applications.
&gt; CallMe(IBoolean maybe) This is crazy!
Came here to suggest [the Albahari](https://www.amazon.com/C-7-0-Nutshell-Definitive-Reference/dp/1491987650/ref=asap_bc?ie=UTF8) as a desk reference, I go back to mine constantly. Protip: the writer of [linqpad](http://www.albahari.com/), also has some [nice articles](http://www.albahari.com/valuevsreftypes.aspx).
but here is my number 
Oh. Thanks for the clarification. I was not aware of that. It sounded like some generic pseudo code you whipped up on the fly.
[removed]
So call me maybe
Some major improvements to the System.Security.Cryptography APIs in .NET 4.6 when RSACng support for X509 certificates was added.
Workstation.
Using a bool for cross thread signalling requires remembering to insert memory barriers also (or marking it as volatile).
Using a bool for inter-thread signalling in the way you've written is an error, see here: http://benbowen.blog/post/cmmics_iii/#reordering_optimisations_and_variable_caching
1. understanding and using the syntax 2. understanding and using OOP principles 3. understanding and using design patterns 4. understanding and using the .NET framework 5. understanding and using third party libraries 6. emitting direct IL code with a charged needle on an hard disk platter
There is no such thing.
I’d say it’s a good way to learn programming from scratch because the feedback is more encouraging than console messages. And I think the start-in-the-middle way of learning is more effective than the spend-forever-doing-fundamentals-first way. But programming for games is way different from programming for applications. If you want to program for games, Unity is a fine way to learn C#. But you’ll come across some quirks of their API, even if you use the latest mono to support the latest features. For example, UnityEngine’s objects behave differently when you check them against null, and that can maybe confuse you regarding the behavior of .? and ?? operators.
Support tor C#7 features is nearing stable. But for beginners, you do get possibly unexpected null checking behavior when you use .? and ?? on UnityEngine objects. That’s been true forever though.
If your thread is background thread it will be aborted once program finishes. If you want to have thread to finish on its own you can pass him a reference to an object that contains one bool. Bools are atomic meaning changing its value is thread safe. While will stop when your bool will become false. Dont forget to use thread.Join() to actually wait for thread to quit the loop
Unity does not use C# in standard/common ways. So if you want to learn C# to do C# for work or personally but properly, learn it elsewhere. if you want to learn C# to use only Unity. go straight into Unity.
Personally for me the best way to learn any language is when you have a problem to solve or an idea to create. So if you have a game idea in your head, go for it, 
Removed: Rule 7.
Do you have any documents about that? I didn't know that.
Interesting, thanks! I'd seen some SDL2 references in GitHub but couldn't get an idea of how much it's used in the game.
No, unless you are already familiar with programming in general. If you aren't, start with the basic "Hello World" console program, then make a simple calculator in winforms, then make another calculator in WPF, then make Pong, then make Tetris, then make a chat program, then do whatever.
&gt; Bools are atomic meaning changing its value is thread safe. Nope, it only means that you can't observe torn values. Changing *any* variable without some kind of synchronisation is never "thread safe". I'm really trying not to spam this submission with the same comment over and over but this is the third time I've seen this mistake here. I'll just refer you to this: https://www.reddit.com/r/csharp/comments/848wac/what_should_i_use_instead_of_whiletrue/dvoj1yz/
e.g. The build server building your code may not have the latest version of .net framework. 
&gt; UnhandledExceptionEventHandler &gt; 1. Is there a way to throw an Exception that doesn't halt execution? Sorta. Yes, you can catch the exception (look up try/catch), but in that case the exception is counted as "handled" and wouldn't be picked up by your handler. &gt;2. What do you think I am doing wrong? I have no idea, I'll build up a quick little testbed to figure out what's happening here. 
It has properties and methods. It even implements interfaces.
btw, right now i'm on the latest VS2017, and i can't choose anything beyond 4.6.1. So in my understanding 4.7.1 is not official yet, so why would you want to use a version that is not finalized yet?!
If the website doesn't use HTTPS, their credentials aren't safe anyway. You can totally have a user store their credentials in your app (in the secure keychain) and then you fill in the data and submit it. It is slightly different than what you want, but I did something similar. I had a webview in my app that loaded some 3rd-party site. The user could store their credentials for *that* site in the app, and when they went to that particular screen, I filled in their username and password via javascript in the webview; then auto-submitted the form. They were still browsing the other site, but you can interact with the request/response/DOM when using a webview.
I use https://github.com/dotnet/BenchmarkDotNet
What is your reasoning for this? Maybe there is a different way to solve your issue than to change the target SDK version of an Android class library.
Not having it installed does not mean it's not finalized. You need to have the .NET Framework 4.7.1 SDK and targeting pack components installed with VS 2017 to have that option. I have a bunch of options available.
Not at my computer to verify, but i think you have to explicitly install it from the vs installer.
Personally, I'd do this recursively. Create a function which takes as parameters: - The parent folder ID (type nullable-int) - The recursion depth (type int) From Main, call that function with parameters (null, 0) In the function: 1) Do a SELECT from your table WHERE ParentId = &lt;the parent ID parameter&gt; 2) For each result: a) display the result with the indent as per the parameter b) then call the function recursively. For the parent ID, pass in the current ID. For the indent level, pass in the current indent level + 1 The only downside of that is multiple calls to the database. Make sure there's an index on the ParentId column in the database. If performance is important, you might consider doing one call in the database in Main and storing the results in some kind of IEnumerable, then using LINQ to query this when required. Or storing the results in a Dictionary, where the key of the dictionary is the parent ID, and the value of the dictionary is a List&lt;&gt; of folders with that parent. It would take some benchmarking to see which of these is the most efficient.
Yes, of course that is the best solution. But sometimes, in larger companies, the build server is out of your control and there might be some processes to go through to update servers.
Oh golly is that right? One of our developers has been working on a library, where he insists all projects implementing the library should be downgraded to 4.5. We have various Web APIs running in a test environment. I thought some of them ran on 4.7.1 and some on 4.5 based on their build. But you're saying that's not possible right? I guess I have to bring that up with the team tomorrow then.
I did something similar once for a custom debugger that output to a console window. I wanted the indent level to represent how many calls deep the message came from. Messages from the ui would be zero indent, messages from the manager classes, one level, services under the managers, two, etc. I built a wrapper around the Console. The only addition was that it kept track of the current indent level and calls to any of the WriteLine functions would be intercepted and preceded by writing copies of the indent character ("-" for you, or tabs, or spaces, whatever) equal to the indent level. When a class needed an instance of the debugger, the instance of the debugger in the class creating the new class would generate a new instance of itself, and increment the indent level. It sounds like a lot of instances of the same class floating around, and it is, but since they are all just wrappers around the Console, which is static, the memory hit is minimal. If your nodes know their own depth, you can forgo the inc/dec operations and just pass the depth in as a argument to the indent level parameter. E.g. TreeConsole.WriteLine(int depth, string msg); Not a solution, I know, but an idea that worked for me in the past. I also created an interface for it so the console output can be replaced with file output, output window output, or null output, as needed. 
You'll need to install 4.7 SDK. You can either do this manually through your web browser or you can use the Visual Studio Installer and add it as an additional package by modifiing your current installation. People who didn't jump on the Windows 10 "Creators Update" didn't get it through Windows updates automatically, but that really doesn't matter.
It's on the todo list right after I fix this cobol bug. EBCDIC, amirite?
It'll make your life easier if you let SQL Server do the heavy lifting: with Recurse As (SELECT f.FolderID, f.Name, f.ParentID, 0 as depth, cast(f.FolderID as varchar(255)) as path FROM Folder f WHERE FolderID = 1 UNION ALL SELECT f2.FolderID, f2.Name, f2.ParentID, depth + 1, CAST(path + '/' + CAST(f2.FolderID AS VARCHAR(255)) AS VARCHAR(255)) FROM Folder f2 JOIN Recurse on Recurse.FolderID = f2.ParentID ) SELECT * From Recurse order by path 
 If you're in a larger company and your build servers are out of your control, you need to change how you access your build servers. You should not need any more hand-offs on updating the .net framework on the server the same as the server pulls code to build it. What if a user adds a pre-build event to download and install the new .net framework version? You shouldn't have more permissions on one and not the other.
There are really two versions of framework - v2 which is everything from 2.0 to 3.5, and v4, which is all from 4.0 and up
I thought everyone would be interested to know what our problem and resolution was. Following the advice of /u/FizixMan, I unversioned bin and obj directories, as well as csproj.user files, as well as properties/publishprofiles. What was breaking the relative directory references is that my csproj file was referencing a solution directory (WebApps), but on my boss' machine, his directory was called WebApp. We both face-palmed when he changed it and everything started working. Sometimes it's the little things. Thanks again to everyone for their help and suggestions.
We are upgrading everything at work, there are some good improvements 
This is extremely strange, there's some black magic going on with the UnhandledException handler code. Check it out: using System; namespace ExceptionHandlingTest { class Program { static void Main(string[] args) { var x = new TestClass(); throw new Exception("This is a test exception"); Console.WriteLine("Passed Exception."); Console.ReadKey(); } } class TestClass { public TestClass() { AppDomain currentDomain = AppDomain.CurrentDomain; currentDomain.UnhandledException += MyHandler; } public static void MyHandler(object sender, UnhandledExceptionEventArgs args) { Exception exception = (Exception)args.ExceptionObject; using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\DEBUG.txt", true)) { file.WriteLine(args.ExceptionObject.ToString()); } var x = 1; //Breakpoint Test } } } So what I was expecting to happen was: * TestClass gets created * The constructor sets MyHandler to handle UnhandledExceptions * The Main method throws an exception * Exception is handled by MyHandler * A log is written * The breakpoint on the line 'var x = 1;' is hit. What actually happens is: * TestClass gets created * The constructor sets MyHandler to handle UnhandledExceptions * The Main method throws an exception * Exception is handled by MyHandler * the Using statement on line 27 is executed * the file.WriteLine() *is not executed* and control returns back to "throw new Exception("This is a test exception"); ...weird. I tried breaking the logging out into its own static class, but that yielded the same results. static class LogWriter { public static void Log(string log) { using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\DEBUG.txt", true)) { file.WriteLine(log); } } public static void JustLog(string log) { string path = @"c:\MyTest.txt"; //File.WriteAllText(path, log); Console.WriteLine(log); Console.ReadKey(); } } If I modify MyHandler to read like this, the var x = 1; line *is hit*. So it either doesn't like file IO or the using statement. public static void MyHandler(object sender, UnhandledExceptionEventArgs args) { Exception exception = (Exception)args.ExceptionObject; var x = 1; //Breakpoint Test } Alright, let's try writing the log without a using statement: public static void JustLog(string log) { string path = @"c:\MyTest.txt"; File.WriteAllText(path, log); Console.ReadKey(); } ...and once again our breakpoint holder (in this case Console.ReadKey()) is not hit. It very much seems like the UnhandledException event handler chokes on any sort of file system I/O. But just to be sure, let's make sure it's not breaking for another reason, like accessing a field on the exception (by way of accessing log). public static void JustLog(string log) { string path = @"c:\MyTest.txt"; //File.WriteAllText(path, log); Console.WriteLine(log); Console.ReadKey(); } That code works great. So, now we know it's definitely Filesystem I/O that is causing the execution flow to get kicked out of those methods. Can I ask what the purpose of this logging is? I'm assuming it's some sort of monitoring and logging for a continuously running job, but is it anything more complex than that? There are mature, extensible, free-and-open solutions for doing that, it's probably worth looking for a logging library to solve this problem if at all possible. 
What is it from?
I don't think so because C# in unity does not work like c# in other appliances, such as .NET.
Microsoft is *extremely* careful with the .Net Framework to not make breaking changes. So yes, it will likely run fine.
Hmm can't really manage to figure it out https://i.imgur.com/wCZ1QI9.png
See the query posted by /u/Fortinbraz. Replace your query with his, and just Console.WriteLine the output from the reader. PadLeft the Name with '-' with a length of depth form the output. You'll end up with output from the query that looks like this... |FolderID|Name|ParentID|depth|path| |---------|-------|----------|------|-----| |1| A| NULL| 0| 1| |2| B| 1| 1| 1/2| |4| D| 2| 2| 1/2/4| |5| E| 2| 2| 1/2/5| |6| F| 5| 3| 1/2/5/6| |7| G| 5| 3| 1/2/5/7| |3| C| 1| 1| 1/3| 
Custom character from a roleplaying group I'm in :) 
The try/catch is useless without an await. As soon as the called async method (RunDelayAsync) hits its first await, execution returns and you "fall out" of the try/catch even if there was in fact an exception thrown inside RunDelayAsync. That's generally why you need async/await all the way down. Now if you need a fire-and-forget Task where you don't care or can't await, you can use the ContinueWith() method. This schedules a Task to run when the antecedent task completes. You can specify whether the continuation runs only on fault, cancellation, or completed, etc. The problem with relying on unobserved task exceptions is that it is only triggered when the task is garbage collected. So you have to be careful not to hold onto references and allow GC. But in general, I suggest either use await or ContinueWith(). By the way, you should always use ConfigureAwait(false) in UI tasks. However, this does not guarantee that the continuation will run on a threadpool task, so it is still possible to deadlock. Where you must run CPU bound work not in a UI thread, then Task.Run is one answer.
The main reason I can think of that you'd use a repository pattern with Entity Framework is if you wanted a non-EF alternative as one of the repository options.
[Microsofts documentation](https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/runtime/4.5-4.7.1) on the runtime changes. The same for the [build time](https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/retargeting/4.5.2-4.7.1) changes. If none of these things are problems for you then you should upgrade. If they are problems for you, then you should resolve those problems... then upgrade. You're missing out on 4 years of development effort.
Here it is, right from the horse mouth https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
I am a Unity developer for 7 years. I would not suggest you start with Unity and C# at the same time because you start with two things that are unknown to you. Most of the developers that start by learning both are equally unqualified with both, because they only learn whatever is useful for them at a very given moment. A good game development in Unity is all about optimization - pooling just about everything, writing your own collections, structs with 0 offsets etc. You need to have a solid and deep understanding of C#, before you start with Unity. Oh, and Unity is full of stuff that is not intuitive.
Yeah we ran into this trying to use some C#6 features, but just updating the build server (msbuild) fixed it.
I took that Unity course and I highly recommend it. Worth every penny (make sure you get a huge discount, there always is one). I was up and running working on my own projects in no time. They also have a great blender3D course and blender is free :)
Hi! One of the TwitchLib devs here :D The Unity component to TwitchLib (TwitchLib.Unity) is a relatively new component (last couple weeks). It is replacing the hacky guide we had for using base TwitchLib that you referred to. This Unity repo is functional, but there currently isn't any documentation for it yet (will be when we're ready to create a distribution for it. For now, you can refer to the README in the Unity repo here: https://github.com/TwitchLib/TwitchLib.Unity/blob/master/README.md Cheers
Six years here. I don't think it can be scaled like that but there are qualitative measures that indicate expertise. I think these include: 1. Branch management. Consider a situation where you have six different clients with their own hardware and framework dependencies, and even their own feature requests. 2. Risk management. Figuring out how to refactor legacy code, or how to migrate your clients to later versions of SQL Server/Windows Server/ORM/etc. 3. Justification. Ability to explain the choice of one framework over another, one pattern over another, one algorithm over another. Also why a dependency should or should not be upgraded. 4. Detective work. Such as troubleshooting obscure bugs that Stackoverflow can't help you with. 5. Ease of onboarding. If you hop onto a big project, it will take more or less time to piece it together in your head. That's what I can think of so far.
&gt;I am not getting any errors, so I was hoping maybe I can catch it as an exception. Well, if you're not getting errors or crashes you're not going to catch the problem as an unhandled exception. An unhandled exception will crash your application, always. So if your app isn't crashing either: * It's not generating errors/exceptions * That exception is being handled by a try/catch somewhere above the code that you're looking at. Sorry I didn't ask you about this sooner, but this approach to catching unhandled exceptions isn't ideal. What you really want to be doing is try/catch. Try/Catch is a 2-part expression that looks like this: class Program { static void Main(string[] args) { try{ //Your application will attempt to execute code in the try-block. //If an exception is thrown, the application will move code execution to a catch block that handles the specific type of exception. //After the catch block code is executed, the execution flow passes to the first line *after the catch block*. throw new Exception("This is an exception."); Console.WriteLine("Passed Exception."); } catch(Exception ex) //The Exception ex argument does 2 things // First, the catch block will only catch Exception types that match the type in the argument. // In our case we want all exceptions, so we use Exception. // If I only wanted to deal with a specific type of exception, like a divide by zero exception // I would write 'catch(DivideByZeroException ex) // // Second, it allows us to access the exception details, like the message { Console.WriteLine("Exception Encountered: {0}", ex.Message); // This will print the message contained in the exception } Console.ReadKey(); } } So, basically what this thing is doing is: * Throwing an exception * The exception gets caught by the catch block * The catch block prints "Exception Encountered: This is an exception." * The line Console.WriteLine("Passed Exception."); *is not hit* * Control passes out of the catch block and returns to ReadKey at the end of the catch block. Now, there are a few reasons that I really think you should be using Try/Catch: First, it allows for logging. You can put using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"C:\Windows\Temp\DEBUG.LOG", true)) { file.WriteLine(log); } ...inside your catch block and it should execute properly. Second, your application will continue running after catching an exception. But most importantly, if there's a try block wrapping a call *above* yours, that try block is handling your exception, which would explain why your UnhandledException event handler isn't firing; because your exceptions are being handled by code above yours! For example, if your ManagementAgent() class is being instantiated, or its methods are being called from inside a try/catch block, that try catch block is handling those errors. I'm sure there's a OOP term for it, but the phrase I've always heard and used is that "Exceptions bubble up". Like a bubble, an exception will rise through the call stack until it is handled, or until it reaches the top level where it will become a fatal error. Note, if you're trying to debug an application with try/catches, it's helpful to open up Exception Settings while debugging and make sure that "Common Language Runtime Exceptions" has a check, not a square, in the box. Default behavior is to ignore errors that have been caught, checking that box ensures that the IDE breaks when an error is thrown in a try block. As far as web-debugging goes, I can not recommend Fiddler (now Fiddler4) enough. It's a free piece of software that allows you to inspect all incoming and outgoing HTTP traffic, decrypt HTTPS sessions on your machine, and generally just get a better idea of what data is moving in and out of your machine. If your tool is sending out data to the web, you can use Fiddler to inspect that traffic and the raw response. As far as debugging compiled code, [dotPeek](https://www.jetbrains.com/decompiler/) can be useful. It's a decompiler that can consume the DLL and generate C# code, but the code can be pretty unreadable. Unless your problem coincided with a DLL update I would recommend focusing your effort on trying to catch an error or inspecting traffic. I'm rooting for you, let me know what you find! 
its not always that way though. For instance, we sell software to other companies. As much as Id love to turn everything over to .Net Core, not all my customers are allowed to just install updates on their servers.
[More or less this](https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/version-compatibility#compatibility-and-side-by-side-execution). Each major version of .NET can be run side by side, but upgrading to the latest 4.X is an in-place upgrade over previous 4.Y. I suppose that doc doesn't prove that they don't run 4.5.2 targets in some sort of emulator to preserve perfect backwards compat, but.... they don't.
So, the problem with Try/Catch is that any variable created in try/catch only exists inside try/catch (scope). I tried this first (I am a PS scripter and have used this before). But the line that I am most worried about creates the iservice web service object that is used in the entire CS file. So, I would have to encapsulate the entire CS file in a try/catch. That seems to me like a bad design, but at this point, it doens't look like I have much choice... Yeah, fiddler is awesome, but I am always leery of man in the middle attacks (even when I am doing the attacking, lol). Yeah, the app calling my DLL (MIM) has horrible logging and error info. It might be catching whatever is going wrong, but I'll never know, lol Is it bad design to put an entire main {} in a try/catch? Or am I just overthinking it?
Udemy for me has been a god send, they have alot of sales as well (as they are right now) The page below has a list of C# courses. I personally own Learning C# .NET - Programming for Beginners. Its very packed and has helped me with learning :) Hope it helps! https://www.udemy.com/courses/search/?q=learning%20C%23&amp;src=ukw
&gt;So, the problem with Try/Catch is that any variable created in try/catch only exists inside try/catch (scope). I tried this first (I am a PS scripter and have used this before). That's true, but the easy workaround is to declare the variable outside the try/catch and get/set it from inside, so: class Program { int z = new int; static void Main(string[] args) { try { z = 6; Console.WriteLine(z); } catch (Exception ex) { Console.WriteLine("Exception Encountered: {0}", ex.Message); // This will print the message contained in the exception } Console.WriteLine(z); Console.ReadKey(); } } --------------------------------------------- Output: 6 6 ...will work perfectly. &gt;That seems to me like a bad design, but at this point, it doens't look like I have much choice... If you were planning on designing the service like that for production, that would *usually* be bad. Ideally you should write a separate try/catch for each type of exception you could encounter, and place them where they will only catch the specific exception they're handling. Bulk-wrapping try/catches is a code smell; it's not 'incorrect' per se, but it generally indicates that there is a bigger problem with the codebase such as poor input validation, or in your case, a poorly behaving DLL. For debugging/development it's totally fine, just make sure that every time you encounter an exception you write a specific try/catch to fix that error.
[removed]
Used to be Microsoft Certified Professional but with decades of marketing, who knows. I'm sure there is a title worthy of that exam because i have the book for it and it's great stuff. Congratulations btw! But remember, passing an exam and being a coder are not the same thing. 
Thanks! I can't find an official answer anywhere though..
My hero lol 
So the line in question is the declaration of this object. iClient MAClient = new MAClient(this.MAServiceEndpoint, this.ClientCertificateThumbprint, this.ServiceCertificateThumbprint, location); And then MAClient (it is a ClientBase-based web object) is used all over the place to do the actual work. I did see an article that said to declare it outside of the try/catch. But if I make it a dummy value of a dummy type, then I am concerned that the type might not match and cause other problems with my code. But if I declare it of the correct type, then I am moving my variable outside the try/catch...
Pluralsight is what the industry uses, here's the initial primer: https://www.pluralsight.com/courses/csharp-fundamentals-csharp5 And then the "just past zero to certified hero" learning path: https://www.pluralsight.com/paths/csharp I cannot emphasise enough how important it is to use the best resource vs the cheapest. Pluralsight is hands down the best $29/month you'll spend on your career. It's also what the industry tends to give their devs for on job training.
`System.IO.File.ReadAllLines(name)` https://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx
If your app is an old Windows Form app and your users might be using high-DPI screens, definitely go for it. Windows Forms is DPI aware in 4.7.1 which makes apps that would previously have blurry text have beautiful crisp text. Difference is night and day when I tested it with one of my old Forms apps. 
used to, the VB certs were MCP. usually the MCxx titles require 4-6 exam passes to get to but i could easily be wrong as i haven't worried about that since 1980-something. Happy coding!
&gt;But if I make it a dummy value of a dummy type, then I am concerned that the type might not match and cause other problems with my code. TypeMismatch errors are pretty rare in C#, you usually have to be trying pretty damn hard to evoke one. &gt;But if I declare it of the correct type, then I am moving my variable outside the try/catch That's totally fine, the object declaration doesn't need to be in the try/catch. I'm not 100% certain, but I don't think you could possibly generate an error on the declaration. However, you *do* want your instantiation and initialization to be in the try/catch in case there's an error generated by the object constructor. Then, of course, make sure that any calls that do work against that object are in the try/catch as well. I think what you should be doing looks something like this: class Program { iClient MAClient; //declare object outside of try scope. static void Main(string[] args) { try { MAClient = new MAClient(this.MAServiceEndpoint, this.ClientCertificateThumbprint, this.ServiceCertificateThumbprint, location); //instantiate/intialize object inside the try/catch MAClient.SomeMethod(); //Do work against MAClient inside the try/catch } catch (Exception ex) { //Log Errors Here } } }
I am thinking that this is the best method available... I *should* have started WITH that, but live and learn, I suppose. I've got all weekend (and the next couple nights) and my program is NOT particularly large or complex. **ROOKIE mistakes**
I had heard Pluralsight was great before and tried them out for C#. I was not very keen on their C# course (can't remember exactly why - whether it was the presenter, the pacing of it, or how the content was delivered). The courses also didn't seem to flow from one to the next, probably due to them having different presenters for each course. I tried out Treehouse instead and thought it was much much better. I did quite a bit of the Treehouse course before being a non-coding related job which caused me to have to stop learning C# for the time being. I would consider going back to Treehouse or Pluralsight (if they updated their course), but am wondering what else is out there. PS - just looking at Pluralsight - they could really do with updating their C# courses! They range from 2013 - 2015. I am aware that there have been new versions of C# released since then. But IMO they could really do with a whole new rewrite of their C# curriculum and update the course to the latest version of C# while they're at it.
The new VS update fixed it although the version notes say nothing about this. Maybe it acted as reinstall. Interestingly when it broke I had a project open and on the project I had open it worked but it stopped working on another project I had open. When I closed and reopened the project that worked it stopped working too.
That's good to know, thanks mate. So as long as you have a 4.x that is higher than your target you're fine and you'll get any CLR updates.
throughout your coding lifetime, you will have to rely on this technique to create solutions - whether you have to inject (or even extract) code you wrote a decade ago or some new junk you found on the web that solves your problem. it is part of the development process and none of us have crystal balls (some of us have steel ones haha) and cannot predict what will happen to a SOW when some new accounting prick comes along and says all reports need to be redone. sometimes you have to take out parts of your code and rework the whole architecture to accommodate for the removal - sometimes it's the addition of new stuff - and other times, it can be both. working with teams will teach you this, leading teams will teach you how to handle it and delegate it properly. happy coding!
ps, this will help to teach you how all of these parts work and fit together and exactly how they will not. that is very important if you want to be a back end developer and write architectural stuff, make the big bucks. leave the front end mvc crap to the college grads with no experience.
Unfortunately IAddable&lt;T&gt; isn't available yet. 
Might be worth taking a look at Microsoft Virtual Academy, they have lots of different c# courses from beginner through to to advanced. Here's the beginners one https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949 Search for c# on there for the other courses.
Do not do any bootcamp. You need time to process what you learn.
The new versions of C# for the past like 8 years don't offer much... really just syntatic sugar (which means you type a few characters less). C# 8 will be kinda big tho, but again, only with advanced features.
I did Mosh’s intermediate course when I got hired as a entry level C# developer. I was hired because I had sufficient C++ and Java experience, C# reminds me of Java
You ever check out Bob Tabor’s DEveloper University. Awesome clear style of teaching. [Devu](https://www.devu.com/) 
Devu looks interesting but they have no introductory videos on their website!! I don't think I will buy a course that doesn't introduce me to the tutor. Thanks anyway.
Huh? Why would anyone want to write that in their signature? Who cares about signatures anyway. Skills are more important than Microsoft certifications, as I see it. 
Bob Tabor recorded several intro courses on the free MS Virtual Academy. That's...what...6 hours of free videos? His DevU stuff is even better.
It covered classes, inheritance, some abstract classes, sealed classes, some polymorphism and there were practice exercises. You def need OOP knowledge to get hired and I remember getting asked about Data Structures and loops, data structures is typically thought in either C++ or Java, but if you’re working on a degree it’s part of the curriculum. It’s more than just knowing a language. There’s a lot on the internet about the software interview also to help you prepare. 
About as long an introduction as you can get here: [C# MVA](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949)
I need to get a new job in a language where people aren't insane. This obsessive OOP madness is some kind of evil mind virus.
Same here. We just setup a message queue and a separate Windows service to update 1 field for 1 record. Literally that's all it does, but now we can say we have micro-services. Total Resume-Driven Development.
I know everything about C#/.NET... &amp;nbsp; ...except for: 1) Everything I don't know. :-D
There are only two reasons I can think of to *not* use the latest .NET framework: &amp;nbsp; 1) The end-users of your application have .NET 4.5.2 installed and getting them to update their .NET would be too much for them to chew (looking at you, DoD). &amp;nbsp; 2) Any 3rd party codebases that are using &lt; .NET 4.7.1 won't be able to compile your code. &amp;nbsp; If neither of those situations apply to you, then upgrade to 4.7.1.
RDD. Nice. I'm gonna use that.
Regarding the GC improvement. &gt; Runtime – GC Performance Improvements .NET Framework 4.7.1 brings in changes in Garbage Collection (GC) to improve the allocation performance, especially for Large Object Heap (LOH) allocations. This is due to an architectural change to split the heap’s allocation lock into 2, for Small Object Heap (SOH) and LOH. Applications that make a lot of LOH allocations, should see a reduction in allocation lock contention, and see better performance. These improvements allow LOH allocations while Background GC (BGC) is sweeping SOH. Usually the LOH allocator waits for the whole duration of the BGC sweep process before it can satisfy requests to allocate memory. This can hinder performance. You can observe this problem in PerfView’s GCStats where there is an ‘LOH allocation pause (due to background GC) &gt; 200 msec Events’ table. The pause reason is ‘Waiting for BGC to thread free lists’. This feature should help mitigate this problem. https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/ Isn't this a improvement? I see some of you guys saying that it is the same. Can someone kindly explain to me?
Spoken like a person who's never lived under an IT department that does whatever the fuck they want.
 The CEO should never be in charge of a build server... do you not have a CTO? And I never said you as the developer yourself should be able to specifically access the build server, having a person in your department in charge of your CI/CD process is still having the build servers in your control. CEO: "Chief executive officer is the position of the most senior corporate officer, executive, leader or administrator in charge of managing an organization"
&gt;The new versions of C# for the past like 8 years don't offer much... really just syntatic sugar (which means you type a few characters less). Value tuples are a pretty big deal (especially the syntax) since, in practice, it does a bit more than just save you a few characters. `ref return` and `ref` locals are a bit more than syntax sugar, although they're not really something you should be using unless you know why you need them. Going back a bit further, C# 5.0 added `async` and `await`, which, while largely syntax sugar, save *far* more than just "a few characters".
I honestly don't even understand our master corporate structure. I work for a subsidiary but the mother ship runs Global IT and they are tyrants. If I need something done I basically have to go to my CEO who goes to the big boy CEO who literally has to walk down to IT and chew those fuckers out for being morons. It means you mostly just put up with whatever. There are certainly developers who have access to the build servers but they cannot independently override any policy IT wants to enforce. Realistically those guys could upgrade the .NET framework without much hassle but there are plenty of things they can't do. And it's terribly arbitrary what suddenly becomes critical for IT to enforce. They pushed an anti-virus upgrade on us that broke Visual Studio and it took us weeks to get them to relent and reverse it. Probably $50k in lost productivity.
You can't choose it because you don't have it installed. Run the VS Installer and select .NET 4.7
The best thing you can do is stop preparing and just start programming. So much time is often wasted in the preparation stage. Just start and Google the problems you face. Still read and research best practices, but none of that is going to matter if you don't get started.
4.7.1 allows you full access to the .NET Standard libraries also, which will let you keep up to date with your dependencies on top of a bunch of bug fixes and performance increases. You should do it if you can. It will also provide an easier migration path if you ever plan to shift towards .NET Core.
alternatively, System.IO.File.ReadAllText(name) to get the file contents as a single string (encoding optional) System.IO.File.ReadAllBytes(name) to read the file contents as a byte array
I bought all of mosh courses on c#, .NET, MVC, .NET core, and they look quite good. I am going trough the intermediate level. Maybe if I knew beforehand I would have taken the pluralsight ones, but I guess I am gonna be fine with Mosh's courses.
Oh now I get it. So memory barriers or volatile keyword is required right ?
http://asp.net is where i learnt back in the day. edx.org has some useful courses for free as well
You can find back-end expert and hit him with XAML real hard. Or get some WinForms guru and make his life miserable with webby stuff. Or make grown men cry in UWP. One day you are an expert and the next you could be running away from garbage collector.
What about [C# 7: Play by Play](https://www.pluralsight.com/courses/play-by-play-visual-studio-2017-csharp-7) or [C# 7: First Look](https://www.pluralsight.com/courses/csharp-7-first-lookhttps://www.pluralsight.com/courses/csharp-7-first-look)? There’s also a [c# 6 from scratch](https://www.pluralsight.com/courses/csharp-6-from-scratchhttps://www.pluralsight.com/courses/csharp-6-from-scratch) course. [This](https://www.pluralsight.com/courses/basic-unit-testing-csharp-developershttps://www.pluralsight.com/courses/basic-unit-testing-csharp-developers) looks handy also. 
In this case, it's one of our developers who's been working on an OAuth implementation. So we have an API that makes the tokens, and then he says that in the other APIs we have that consumes that tokens, they don't compile on 4.5.2 and above due to some Microsoft OAuth library issue.
I personally recommend All of Mosh’s C# courses(excluding the shortcuts course). His MVC 5 ,Entity Framework and unit testing courses are also very good. And practicing a lot via building simple console apps to moderately complex apps or programs will get 100% job ready. 
Hmm, unless your OAuth implementation is meant to be copied into each new API project (i.e. you aren't using private NuGet packages or shared project references) it shouldn't matter. That OAuth project *should* target an earlier version of .NET but all of the projects that reference it (your APIs) can target any newer version. MSBuild will continue to compile the OAuth library with the older version. It's possible your coworker misspoke and the issue is actually a regression bug in the runtime, meaning the OAuth code breaks at runtime when run on .NET 4.7.1, but if that were the (unlikely) case you would have to roll back the .NET version on the server too.
The cheapest way to buy Udemy courses is via their mobile app.
I second the Pluralsight suggestions, but would like to point out that some of Mosh's courses are on there as well and for me his courses personally have been very helpful in many areas. 
where did you learn object oriented programming (and concepts)?
Microsoft Certified Professional: https://www.microsoft.com/en-us/learning/microsoft-certified-professional.aspx 
So really the Pluralsight courses are fine, it just might be a good idea to look up some tutorials on new content added to c# since those courses were made. 
Tabor is good but pluralsight was more helpful bc it has more content. I worked in IT for 10 years and enjoyed automation / scripting. I’m now a dev and literally barely knew python. I started with tabors free dev u and then went to pluralsight. Don’t sleep on either of those things. 
Is the only reason you're trying to replace json.net with jil due to the claimed speed increase? If so, I really wouldn't bother. Any speed increase you may find something like this will be inconsequential. Meaning in terms of a regular request you most likely won't notice much difference.
A slightly different approach. Try and program something that you want to write. Back when I started I tried to write a top down real time strategy game in visual basic (i know). It kept me motovated. I never finished it but I got enough done to demo it in an interview and was hired on the spot. Pluralsite and books are also good, books can be good to flip though and find stuff. 
Pluralsite on 130% speed or faster is good. There is nothing like being taught by someone who sounds like a smurf.
&gt; Value tuples are a pretty big deal (especially the syntax) since, in practice, it does a bit more than just save you a few characters. True, but you can implement similar feature via C++/CLI. 
Microsoft has a compatibility system ("tweaks") which look at your TargetFrameworkAttribute. This attribute is automatically emitted by the compiler and tells the system which framework you intend to target. Various tweaks are then enabled to make your code more compatible. For example, the default sorting algorithm switched in .NET 4.5, so the framework has this code now: if (BinaryCompatibility.TargetsAtLeast_Desktop_V4_5) { ArraySortHelper&lt;T&gt;.IntrospectiveSort(keys, index, length, comparer); } else { ArraySortHelper&lt;T&gt;.DepthLimitedQuickSort(keys, index, (length + index) - 1, comparer, 0x20); } to enable compatibility with people who don't read the specification before writing code.
There are probably other features I've missed, but they're the ones I used the most. I've mostly switched to F# for .NET stuff, but I'm keeping an eye on C# as it appears to be the most actively-used and -developed.
Do you know about interfaces? If not, then I'd suggest doing some research into them. An interface is a way of saying "there are lots of classes that all have a method called X(), but what they do in that method is different". So what I'm thinking here is that you could create an interface called something like IOptionChecker, which includes a method called ProcessOption(). You could then create many classes that implement that interface, and each class, in its ProcessOption() method, could do one of your "if" statements, and run whatever it is that needs doing. This way, you're separating them all out from each other. Then, your bulky meat of the program would contain a List&lt;IOptionChecker&gt;, and would use a foreach loop to run ProcessOption on each of your option checkers. The last part of the puzzle is how the List&lt;IOptionChecker&gt; gets populated, and I'd suggest that to get started, you just populate it in the constructor of the meaty class. But going forward, you might want to change that - so that for example the Kitten class adds a KillAKittenOption class to the meaty class's List.
At the highest level you could use a factory pattern (https://www.tutorialspoint.com/design_pattern/factory_pattern.htm). This would get the main operations and with in that return for underlying implementations. This would greatly separate out the the control logic. The link i have has a good description.
&gt; and would use a foreach loop to r This is great stuff. thanks. DocProcessor IS an interface, this is perfect stuff, see I do not work on a team of professionals. mainly a bunch of kids straight out of college. I am self taught in all aspects of coding, I know the code I am doing does some great things, but I know there has to be a better way - and this seems to be it. thanks!
Glad to help; also, Eric Lippert did a great blog post series on these sorts of problems: https://ericlippert.com/2015/05/11/wizards-and-warriors-part-five/
`using(StreamReader sr = File.OpenText(path)){}` is probably closest to what you're thinking of. `System.IO.File.ReadAllLines(path)`is also 100% valid (and probably better in some cases)
I've worked for companies that wanted it in the email signatures and would put it on company business cards too.
In that JavaScript book. It taught the language as well as programming concepts. I just read it at the college library so I don't know if I would be able to find it again. I don't know that I would recommend it as I didn't read to the end and it was one of the few books I've read on programming. Really though objects is a pretty simple concept but the implementations can be quite different between languages. Then there are the high level design patterns built around objects which is really applying OOP. 
Replace "settings.xxxx == SettingsFromDB.Yes" with something like private bool IsSettingYes(Settings settingToCheck) { return settingToCheck == SettingsFromDB.Yes; } That would make it a little easier to read : If(IsSettingYes(settings.ExportPdf)) DocProcessor.ExportPdf(); If(!DocProcessor.ErrorStatus &amp;&amp; IsSettingYes(settings.ExportImages)) DocProcessor.ExportImages(); if(!DocProcessor.ErrorStatus &amp;&amp; IsSettingYes(settings.KillAKitten)) Kitten.Terminate(new SnapNeck());
Since this is a csharp subreddit, if you are interested in C#'s OOP here is a technical overview. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/object-oriented-programming I'm sure there are resources in the side bar or community page for absolute beginners who want to learn C#. 
I love Mosh. I highly recommend him.
Learning c# is the easy part. That's why those courses are older, as the content hasn't changed enough to demand new courses. Getting into all of the various frameworks is where things get more complicated. I'd recommend .NET core, MVC, EFCore, and Web API. Plus you need to be familiar with the non-core versions of .NET/EF (plus webforms :( ), as they are still widely used. And you definitely need to learn a bit about front-end frameworks. Bootstrap/jQuery is pretty widely used.
R# does make VS super slow. So you have to weigh you own sensitivity to slowness against how fast your computer is to decide on if that matters. Also in the last 3 years a lot of features R# added are part of VS now, so it seems less useful. You certainly don't need it! 
Of course, learning new languages is a good idea if those languages are of contemporary relevance and have actual legitimate use cases where they are better suited than other languages. Being functional programming languages, Haskell and F# would fit into that category. VB.NET does not, however. It basically has more or less the same capabilities as C# due to both using the .NET CLR, but with significantly clunkier syntax.
At my company, we've stopped using R# as it doubles the memory used with VS with our solution
it is completely a personal thing (if you do not work for a company). I personally dislike R# because of the way it slows down a machine, and also the shortcuts are (IMHO) bonkers to use. At work they are making us use it, but have not been able to show any features which i have not already got in VS, out of the box.
Maybe what you have is actually good. I see some responses here to hide all this behind interfaces so it can be done in a consistent fashion but you have to ask how does that improve anything. The logic get buried to what ends? Be wary of making everything more OOP just because you can. You should strive for your code to be understandable and it is very often the case that a central controlling routine is most clear just the way you have it.
I imagine that every programmer has those "omfg I am a moron" moments at least once a week. I had mine yesterday. VS wasn't running my app for whatever reason so I was just building it and running it directly from the bin folder. At some point I switched the configuration to "Release" but I was still running the exe in the bin\debug folder and, for 45 minutes, couldn't figure out why the fuck my changes weren't being made. Not the first time I've done this, either lol.
I've actually really been enjoying the code-first SQL/DB stuff. I HATE IT, but I have never gotten a better sense of satisfaction out of making something work than when I made my .net core join class function properly. All the little non-functioning parts and making them cooperate has taught me SO MUCH about this stuff. Some of my colleagues have joked that I'm now our 'resident expert' on it, but that may also be because I'm the ONLY one using it.
GOOD! keep doing that and you will go far. SME is what they call the 'resident expert': Subject Matter Expert. Be that. Be the one people come to for answers because in meeting that challenge, you will excel to the ranks of guru. A guru is a perfect student: able to self teach anything, learn from anything and communicate these things effectively to those who come to you for answers - and effectively explain your position to other gurus for discussion. When you obtain guru status, you will know. For me, it was when i realized the answers i sought were always within my own grasp. It takes time to come to that realization and become comfortable with it but with humility, you will ascend to the ranks of the code gods.
What is your main application built with? It should not be difficult to add visualization support for different kinds of primitives if you already have 3D rendering up and running. I recently added support for a similar kind of debug visualization to my game engine and it was very trivial.
I'm 35, no degree, 2 young kids, little time to study. I had an interest in coding but have done nothing more than an intro to HTML/CSS and Javascript while in community college. I got a job as a tester/DBA support. I expressed interest in learning to develop as we were short staffed (still are). I started with Udemy.com, C# Beginner with Mosh. I liked this course but felt it was a bit disjointed. His lectures did not always cover the material used in his challenges, but I will go back into his other two courses eventually. Next I watched the Bob Tabor videos others have mentioned. I liked these, they were a little more direct and showed more actual coding than the Mosh vids. Third - I read the first 20 chapters of this book: https://www.amazon.com/C-Players-Guide-3rd/dp/0985580135/ref=sr_1_1?ie=UTF8&amp;qid=1521128465&amp;sr=8-1&amp;keywords=C%23+Players+Guide (most of this would be a review, but I like seeing how other people teach the same material) Now, I'm working through this book: https://www.amazon.com/Head-First-Learners-Real-World-Programming/dp/1449343503/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1521128540&amp;sr=1-2&amp;keywords=Head+First+C%23. After this book, i will move onto Pluralsight. I am very much still a beginner, probably still a year or more away from supporting our devs at work. But the best advice I got was to code every day. You won't learn it if you don't do it. I don't know if any of this will help you get "job ready" super fast, but its the advice I was given and I just wanted to pass it along. 
I would recommend a degree in Computer Science.
Oh no! It happens to the best of us.
I have a Bachelor's Degree in Computer Science. It still didn't mean shit, because I learned most of the things in my spare time...Of course this could be a personal issue, but what I'm trying to say is that you don't need a degree (or spend 5 years in University) to get a dev job. 
It appears that you need to change the .net framework configuration. https://msdn.microsoft.com/en-us/library/system.threading.tasks.taskscheduler.unobservedtaskexception(v=vs.110).aspx &lt;configuration&gt; &lt;runtime&gt; &lt;ThrowUnobservedTaskExceptions enabled="true"/&gt; &lt;/runtime&gt; &lt;/configuration&gt; Any help ?
The worst part was the fact I was exploring the ins and outs of how nuget resolves dependencies with different configurations, floating versions and version ranges. Because I was learning, I thought *I* was doing something wrong or that nuget had bugs. I had tried to remember what all I had tried to do that failed because of my idiocy so that I can get it straight in my mind what is true and what is false involving nuget dependency resolution. I am still suspicious of my knowledge in this area because I am not 100% confident I haven't attributed some false fact about nuget because of this issue lol.
this guy javas
Agreed. Unless you have some performance metrics showing that the lion's share of processing time occurs during the serialization, I wouldn't bother. This reeks of premature optimization.
I think that's the problem with our mindset. At least, it usually is for me. I usually start with the most complicated possible reason and work my way back to the simplest. I of course intend to do this the other way around, but it doesn't always work out that way lol. I've often had those "I need a good slapping for that" moments in my 14 years of programming :)
This doesn't appear to have changed anything. In the interest of full disclosure, the client is still using Silverlight, so don't know if that plays a role.
There is a [StackOverflow](https://stackoverflow.com/questions/3284137/taskscheduler-unobservedtaskexception-event-handler-never-being-triggered) question about this. 
I stopped using R# when 2017 came out...kept trying to use it for a while since I had paid for it but the features I still used a lot like unused namespaces etc weren’t worth the sluggish behavior 
* n00b * rookie * expert * &lt;see code block&gt; var humility = 0; while (arrogance + pride &gt; humility) { LearnSomethingNew(); GetProvedWrong(); Brain.HaveThought("I thought I was an expert but I am now."); humility += 1; } Brain.HaveThought("I just know stuff and, statistically speaking, I don't know everything."); return humility; * Jon Skeet L33t
hmm. realistically, though how many other places is this code repeated? is it literally just in this one overgrown 'Export' function? if so, you don't need to refactor it yet into reusable components that are never re\-used. you might well need to rethink other things first like why it's trying to do 4 different kinds of exports from the same class... you might not even need to change anything at all. maybe that makes your code 'less easily testable' but if you're not testing it anyways, that doesn't matter. keeping all the logical conditions in one place might even benefit the junior programmers maintaining the system until a larger rethinking can occur. also moving stuff around in ways you don't understand might end up having negative performance implications \(there's a reason .NET game programming code looks very different from 'best practices' samples of generalized OOP principles\). always test out and see if the new way works better for you and your situation. if there were only one good way to do these things, we'd have been replaced by small shell scripts already.
Turning off solution wide analysis is a must. R# still worth it even with that off.
these are all advanced topics way beyond a beginners realm
? No. There's not. I mean, that question has some of the same words, but that's a question of why it's not being triggered (answer: Garbage Collection). 
After turning that off, VS will be faster?
Muchly. The real-time solution analysis is a massive resource hog (obviously dependant on how large your solution is, but it's exponential)
That is really interesting, thank you. 
Thanks &lt;3
Is there a alternative for R# auto import/completion while typing? I dont want to remember all class names and namespaces for every type in the framework or my solution.
productivity power tools helps with code tidieness, while roslynator helps with refactorings, code fixings and static analysis
This won't behave properly if the various exports are causing the error status flag to be set; OP has it checking every time but you have it checking only once.
It's one of those quirks of pure OO languages that you'll use types to designate multiple implementations of a common interface even though you only ever use on instance; if you want to talk about game development, a common Unity practice is to have, say, a Player component that is only instantiated once in the scene - but it has to be a unique type, because types are used as identifiers (in the component system) as much as they are used to group state and behaviour. But you're right, it's overkill and a possible maintenance risk for this exact situation, but it's a simpler model to explain for OP, especially as we don't know enough of OP's context to give a more specific model. I'd personally use a list of (Func, Action) tuples to host the two methods in a functional style without the interface/multiple type declarations and declare them all in situ, but that would change depending on multiple dispatch (do the behaviours need to change based on the document being passed in), support for runtime plugins or otherwise. Ideally I'd suggest a metaprogramming approach that "loops" over the functions at compile time but that's a non-trivial.task in C#.
I think that was the funniest comment I've ever seen on Reddit. Loved it. Bravo! 👏
https://github.com/Dreamescaper/IntelliSenseExtender
Newer versions have an options menu with a list of stuff to turn off to improve performance. It helps. There are replacements for things like refactoring and analysis, but they only go so far. Keyboard shortcuts that are specific to R# are another thing I couldn't go without. So, install all the extensions and plugins you want, but none of them replace all features of R#. However, in the spirit of survivor bias, I use VS with R# on 3 systems that are more than capable of handling it. You have to make that evaluation on your own system. 
The only feature that I like resharper for is the Refactor Namespace. If only there was a plugin to replace that functionality then I would dump it in an instant. Sure there are a couple of plugins that will go through and update all the namespaces to be correct but they don't update the using statements. Which means you have to manually go back and fix all those. Beyond that Resharper functionality is mostly in VS 2017 and Resharper makes VS super slow.
I use it currently because I am having to work in a legacy codebase regularly. The little bulbs help me make the code more consistent and easier to read without having to think too much about it while code reviewing. If I was in my own code I am not sure I would need it or the performance hit it gives me until I wanted to run some specific tool. 
Interesting, thanks for sharing. Looks like it might be useful for quick transfers between friends or colleagues and probably lots of other uses that I haven't thought of.
Roslynator looks awesome!
This might have some tips: https://stackoverflow.com/a/11942617/564755 Can you run Silverlight in 'Full Trust'? That is probably the issue. It may not be a good idea to run in Full Trust all the time, but to debug unobserved tasks it should be safe.
Yeah, running it in "Full Trust" does seem to permit it to work, but for obvious reasons, this isn't a long-term solution. Any idea why that would even be necessary just to capture exceptions within tasks? I have to assume there's a reason for it.
Did you consider setting [ThrowUnobservedTaskExceptions](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/throwunobservedtaskexceptions-element) to true and using the resulting crash dump? Broken code needs to be fixed and a very good way is to let it crash and fix using the crash dump.
One nice feature of R# is that if you have the misfortune of working on some ASP.NET MVC crap instead of an ASP.NET API project, you can navigate between views and partial views via F12 or CTRL + Click, which makes things soooo much easier to figure out where views are.
You'll also want to lookup the phrases "dependency injection" and "polymorphism" :) Both apply incredibly well to your exact scenario.
Thanks!!!
With VS 2017 I don't think there is any real need to have it. Most of what R# used to do VS has built into it now. Not only that, but as you (and others) have mentioned there is a performance issue. My team wanted it so I have it installed but I don't use it at all.
i mean, it's a good thing to learn. i could just see the guy over\-applying this to everything he sees and ending up with 3 layers of OO to go through all throughout the backend to get at a bunch of settings objects that still have to run all the same code... just slower now. probably because i've been that guy a time or two. haha. still good advice, just caveat emptor
Does Silverlight support async/await? If so that's you're long term solution for taming the exceptions. Beyond that all I can say is good luck. I've ben through this myself so I know how painful it can be.
My workflow is totally dependent on R# and even 2017 feels super awkward without it. However, it does indeed make VS slower, although I think the latest VS and R# patches have made some improvements. In my opinion Project rider is a better ide than VS. 
I would stop worrying about being 'job ready' and instead focus on learning the fundamentals, then start working on some open source projects on Github and start contributing. The only way to become 'job ready' is to start coding, and doing it daily.
Whoa, thank you for the Roslynator clue, it's amazing. I just ran it through a new project I'm working on, not much to fix but still a few good Conditional access RCS1146 warnings and other small optimizations.
This is exactly what I've been looking for to play around with my home network. Thanks :)
Very cool, but why Windows only? This seem like it would be a really cool application for a [global .NET Core Tool](https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/). I know something like this would have been really handy when I was jumping between Windows/Linux/Mac often.
thanks, thats exactly the bit i was missing
How do you plan dependency injection to help with this? He needs to learn a factory pattern. User can choose to print a PDF one time, then an excel document the next, what dependency object should you have?
I use the hell out of ReSharper and dotTrace in vs2017. Just make sure you turn off solution wide analysis and have a good dev machine. 
Just to let you know, I took your advice to heart! In the most recent release, you can now instantiate objects like so: var inst = new ObjectName() and destroy them like so: inst.destroy() Still no arguments, but that is a priority of mine. Cheers! :)
The server could be but the client would have to target mono to be cross platform
It feels like the performance of R# in 2017 is worse than 2015.
I'll look into porting the server and CLI to Core, it should be pretty easy if there's an HttpTaskAsyncHandler. I actually wrote this a few years ago before .NET Core was a thing, and only recently cleaned it up a bit and added it to Github. The WPF context menu tray app thing I'm not sure where even to begin making something like that for Linux or Mac.
Easier to just switch the virtual directory of your site tbh. This means you have easy rollback, too. `appcmd set vdir "Name Of Your Site/" -physicalPath:"/path/to/v2"`
Everyone has been suggesting C# specific skills to you, so I'm going to offer this computational course called [DestroyAllSoftware](https://www.destroyallsoftware.com). This exists to teach you real world scenarios and how the basic fundamentals can help you to handle complicated problem solving tasks.
I am thinking of paying for it, so i get here to ask :((
Interesting. New author too! A search against the author's name and the exam ref gives us a couple of links: https://www.microsoftpressstore.com/store/exam-ref-70-483-programming-in-c-sharp-9781509306985 Which suggests the publish date isn't until June or July (But June I expect, given it's a US site and the US express their informal month and day order in a cack-handed manner). And: https://bookauthority.org/book/Exam-Ref-70-483-Programming-in-C/1509306986 Which says this: "The new Second Edition, now authored by Microsoft MVP and best-selling author Rob Miles, reflects all updated exam topics released by Microsoft through mid-2017". Which is vaguely informative. No mention of C# version number though. Probably for a number of reasons you can guess.
Looks great! Thanks!!
I love many resharper features and my ability to navigate and not just refactor but outright redesign large codebases feels really limited without tools like https://www.jetbrains.com/help/resharper/Navigation_and_Search__Structural_Search_and_Replace.html It can make large solutions slow, especially if you don't have a higher end desktop. But turning off some features such as solution wide analysis (which it will automatically prompt you to do if it notices slowness) can help a lot. 
Migrations with a policy of never (unless absolutely unavoidable, then down time is also unavoidable) implementing incompatible changes. Deprecation policy of two releases. Sometimes this means we have redundant "duplicate" data because we are maintaining the old columns or whatever until we satisfy the deprecation policy, but it does me we can rollback.
Consulting firms like it because it wowzers the client. Used to have (circa 2000) MCSE+I, MCSD, MCDBA and the bosses always wanted it in the email signature, on business cards and on the website staff page. I mostly chased it because the company offered free MS cert testing and it took me about six to eight months to get all the possible MS certs. While I had been programming as a hobby / side-line for ten years at that point, I didn't have much "official" experience on the resume. So it was an investment to bulk up the resume.
Our deploy and build process takes &lt; 1 minute. DB Updates are in migrations... it just works. There is no "downtime". We move things through two environments after dev (beta and demo)... so issues should be caught ahead of time. So I just don't know that the added complexity is worth it? I could see having two DB servers with a master 'slave' scenario to keep data squared away... but even then. /shrug
&gt; don't worry about it and focus on code quality and maintainability instead. So true. Make it work correctly and in an easy-to-maintain style. Then prove to me that it's a bottleneck and needs optimization. It's far easier to make working code faster, then to try and debug over-optimized non-working code.
It's imperative for us to maintain data integrity at (nearly) all costs. If we release (call it v2), then rollback (to v1), the _data_ that was added or updated during that window of release (of v2) it _must_ be present after rollback (to v1). We can't do that with a blue/green DB setup.
Your process works great until it doesn't, then the added complexity is worth it.
If just the frontend, why not slots with r/azure then move on coding.
Just never delete columns on your downgrade step. That isn't very hard to do with entity framework migrations or many other migration tools.
So how do you verify that a release is downgradeable? Is there room for manual error or is it all fully automated? 
That doesn't secure you compatibility, what if you have FK's referring the new column/table, stored procedure/views expecting data to be written to them and thus giving incorrect results, et cetera? Or do you mean you downgrade the DB as well, but leave any new columns/tables behind but revert everything else? That must be quite a job to test for every DB change.
This is awesome! Have never liked having to google for msdn + [opcode] - figure this'll save a lot of time and headache. I think there'd definitely be value in adding use-cases into the documentation, e.g. for add: load 1 load 1 add Thoughts on supporting higher-level flow control structures (e.g. having helper functions that make emitting for loops or if statements easier)?
&gt; what if you have FK's referring the new column/table I wasn't thinking about cardinality changes, those would cause issues. &gt; Or do you mean you downgrade the DB as well, but leave any new columns/tables behind but revert everything else? That is what I meant. If you create new columns, then leave those on the downgrade. Have your upgrade only add the column if its missing. This wouldn't work well for changes to identity / foreign key columns.
If i install R# but disable it in Option Menu, will it consume any resource?
I have a text box. The text box will be filled from a ToString method. I need to make the text appear. If I do not update the text, the text will not display, because it's being set from another file, not in VB. There is no button, this a text box in a blank form, nothing but it is here. I need to show the text from said toString. Right now, the text is only appearing if I click on the textbox and press a key. I'm trying to get it to update as soon as the application is ran. 
I would ditch this variables and feed the values straight in. You should also be using Try and Catch blocks whenever trying to access data outside of the application.
Unfortunately I don't think I can. These are processed string objects with manipulated text from the file. I can't really hard code those in if that's what you're saying. I'm still learning a lot so I could be wrong. Yeah, just added try&amp;catch! 
Probably won’t work without full trust either. 
Made by two little girls, great.
but thank you though, I really appreciate the quick responses. It's crazy how sometimes very simple things stutter me up haha
It happens to all of us. If you are new you should really begin to familiarize yourself with MSDN and the C# API. Everything you need will always be in there. If you are using Visual Studio which I assume you are. All documentation can be downloaded through the Help Viewer so you can take it with you anywhere you go regardless of your internet connection. I always make sure to have documentation of any kind in-front of me or beside me. You’ll get into this habit someday which is some of the fun in programming, digging through documentation or trying to implement something with little to no documentation at all. But don’t worry about that for now, unless you plan on invoking parts of managed code. You’ll learn a lot here.
It shouldn't
True. But many people don't use azure, hopefully this helps those people. 
I don't think that will work well - you can't pre-test your newly deployed site and more importantly you can't warm it up. It'll be too slow upon first access. 
Thanks for the response, the main application is built using WPF, we already have visualization for different kinds of primitives, but we want to be able to easily visualize something that we debug. This would not be possible in our existing application when, for instance, we hit a breakpoint and want to visualize what happend. Another example is when our application is live running at a customer, and we want to add some debug output such that we can see what the program did in the algorithms. Due to this we require something that allows us to export our visualization (set of primitives) and open it in a different program, for this we are looking around on what is possible.
Interesting idea, thanks, but for our application it would not be necessary to use code analysis. It is not that we want to analyse our code and make a visualization out of it, it is just that we want to have a quick way to visualize our debug data, as for when you are working in 3D, it is quite a bit more convenient to see what happens in 3D (instead of looking at a bunch of coordinates). As you pointed out, the biggest challenge is deciding the map, which is what we are thinking about. Instead of writing our own standard for the map, we would rather adapt something that already exists, and build on this, the two formats I mentioned (URDF and X3D) are examples of this.
Yes
k thanks
Removed: Rule 1.
Removed: Rule 4. Should be a few resources out there for manipulating the DOM with the `WebBrowser` control. For example: https://stackoverflow.com/questions/9873668/how-to-update-dom-content-inside-webbrowser-control-in-c
That's the obvious thing, yes - but there is more to it than that. When we roll forward again we have to ensure that whatever happened in the v2-&gt;v1 release+rollback window is still available and functioning in v2.1 which sometimes requires a manual _data_ migration script, to populate the new columns with anything "missed" during the rollback.
i meant how do you plan a OO program, how to break up functionality into classes (when it becomes too complicated)...
Manual. We have rule-of-thumb stuff like "never delete a column" etc. but we also review DB changes amongst the whole team as part of the release cycle, with a prize (usually beer) for finding breaking changes.
Interesting, but ultimately not useful I would argue because it makes it unclear in the code what is happening. In the example provided, another person reading the code would not understand the property about the class that made it true. var value = new TrueFalseOperator(10); if (value) { } They would have to look in the code for the TrueFalseOperator class to understand what is going on. The code below makes it clear to the reader what is happening. var operator = new TrueFalseOperator(10); if (operator.Value == 0) { }
I was asked how we did migrations in an interview and I told them this was the policy we used. They looked at me like I was crazy. Then they started asking all these questions about what we would do if something went wrong. I told them that we deploy hundreds of times a year with no issues yet, but we always have a full backup if needed. More grumbling. Still no idea what they wanted.
I am just not really sure it would actually pay off for me. I don't read that many books and wouldn't really have many uses for a tablet.