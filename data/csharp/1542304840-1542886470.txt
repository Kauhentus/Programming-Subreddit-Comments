Yep, good catch and a sign you'll go far: you actually read and try example code instead of taking it at face value ;)
You should check out RestSharp. It will make your life a lot easier. 
Will do! thanks for the advice
Deploying with Visual Studio, Right click on the project, Publish
Mhm I'll do it manually next I guess... Would've been nice if it all was automatic
I'm sure you'll be able to get it working automatically, my suggestion was more of a troubleshooting step than a solution; Creating it manually and deploying via VS should allow you to determine whether or not your issue is with the setup and provisioning of the Function or with the deployment. If you get some info and share it here I'll be happy to help out further, but thats about the best I can do with the information I've got. I'm not really up-to-date on the publish from VS feature set, all of my functions are built and deployed via Azure DevOps CI.
Probably happening because asynchronous method is called synchrously.
chances are you should be able to figure out how to make that api call directly (especially if it's made from javascript) and that's probably the route to continue down. however, if you really want to do browser automation, probably just use selenium with the chrome driver in headless mode: https://stackoverflow.com/questions/45130993/how-to-start-chromedriver-in-headless-mode phantomjs is abandon-ware at this point and i wouldn't recommend using it. .Dispose() should be fine but it's not going to immediately free the used resources. those resources should be freed by the garbage collector at some point after though.
I realize keep trying to crack the API would be the best way to approach my issue but I really can’t and considering it checks if I’m on their network first (data cap on a mobile network) I doubt anyone could help me out. Anyway the page is internet.tre.it if you’re curious.
Just want to parse a string from the content? Look into WebRequest and just find the string with regex or do string parsing. 
It'd be ideal if unfortunately the site didn't load the data I need through a private API that utilizes instead of my login credentials the fact I'm connected to their network or not. With every request it sends as parameters several different strings calculated at runtime through Javascript I can't understand what half of them mean because they keep changing at each call. Thanks for the help though, really appreciate any help I can get as I'm new to C#.
https://github.com/AngleSharp/AngleSharp - or - https://github.com/kblok/puppeteer-sharp
Thanks! This feels like it may be the best alternative. Now I just need to test them and see which one has the smallest memory footprint.
Oh yeah, didn't think it through. Perhaps chromedriver could be of use? I haven't used it but there's a nuget package with selenium but you might not need selenium. 
Release Notes are here: https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md
How much is it exceeding the limit? A few ms, or seconds? You are not guaranteed super-accurate timeout behavior, but it should not be too long. You should be calling it with `await` in an `async` method rather than `GetAwaiter().GetResult()`, but that may not be your problem. However, if all your other Threadpool threads are busy, you may be blocked there. HttpClient uses an HttpMessageHandler to do the actual sending/receiving. If the message handler is in the middle of transmitting/receiving, you may not get a timeout in the middle. You can also pass in a CancellationToken to PostAsync. Try this: public async Task&lt;Result&gt; YourMethod() { var httpClient = HttpClientCreatedElsewhereAndReused; // do not use a new HttpClient for every requests!!! var cancellationToken = new CancellationTokenSource(TimeSpan.FromSeconds(2.1)).Token; var result = await httpClient.PostAsync(url, new StringContent(data), cancellationToken).ConfigureAwait(false); return result; } Finally, DNS lookup and HTTPS connection establishment could be adding time to the first request to a particular host, and HttpClient may not be considering that part of the request for timeout purposes. (You *are* using HTTP 1.1 with KeepAlive, right?)
Why does memory matter here?
I know, I know, but link from release page is not working
I had issues today, picked up an AF release that I started a couple of months back, set up a CI pipeline in Devops and it kept jamming on deploying the zip to the App Service, bailing out with a 502 error. Glad to see it wasn't just me.
Is anchor routing still a thing these days? I thought most browsers supported [history.pushstate](https://developer.mozilla.org/en-US/docs/Web/API/History_API) now which lets you have SPAs and nice URLs too
Try: https://stackoverflow.com/a/30605900/564755 You can probably get the proxy URL from your Windows proxy settings. if it uses an automatic configuration script, you may need to dig inside (it's a text file) and find one that works for you. var proxy = new WebProxy() { Address = new Uri($"{proxyHost}:{proxyPort}"), BypassOnLocal = false, UseDefaultCredentials = false, // Leave out if you don't need to authenticate with your corp proxy Credentials = new NetworkCredential( userName: proxyUserName, password: proxyPassword); }; var httpClientHandler = new HttpClientHandler() { Proxy = proxy, }; var client = new HttpClient(httpClientHandler);
yay, my docker containers are broken now. It seems never versions of dot net core get released before official docker images get updated.
Licensing is an incredibly broad and challenging topic. There are entire companies who's focus is providing software licensing frameworks. If you're going to roll your own licensing, you've already highlighted some of the challenges and variables with regard to license model. * Lock license to the hardware? Makes it less likely to be shared, but makes it difficult when the customer needs to change the hardware or migrate to new hardware. Only you can decide whether this is acceptable and it should relate to how likely and frequent you would expect the application to be needed on a different system. If it's a consumer application it should be as portable as possible, but a server application typically doesn't move much once put into production. * How do you determine the "hardware key"? Do you use a physical token like a USB key? Do you hash the motherboard serial? HDD serials? MAC address of a NIC? * What if someone just installs it on a VM and then clones it? Will the license follow the VM, allowing multiple instances of the application by copying VMs? The company I work for uses asymmetric key encryption and XML-based license files. So when you install the product, you have an "initial license file" which allows the installation and enables designated features. The license file is signed with our private key so that the software can validate that the license file was issued by us. The software runs normally for a 30-day grace period giving time to get the system setup and activated. When activating, a license request file is generated based on the state of the system. This will include information about the server and cameras added to the software. Our license server validates the request against our internal database - ensuring they are not trying to activate more cameras than they are licensed for - and then issues a signed "activated" license in response. The activated license also has a signature which is validated client-side before being processed. This license scheme makes it pretty difficult to compromise, but any sufficiently experienced developer/hacker will be able to find a way to get around just about any licensing scheme. In our case, if someone was able to modify the public key used to validate the license file signatures, then in theory they could generate and sign their own license files using their own public/private key pair. Or, they could find and modify the method calls by recompiling a DLL and, for example, changing a weak validation method like "IsLicenseValid(License license)" such that it always responds "true". 
If your software can call home this is fairly easy, generate a counter key when the software. This is for the install, its activated with a key provided by the company. Software calls home every so often to re-validate its key. You know how often you expect calls home so anything more frequent or from a different network suddenly can get flagged and shut down. 
Yep. You can make it more complicated than just changing one method but essentially any client-side software licensing can be skirted with some effort. Fortunately the vast majority of people pay for their products, and those that bypass licensing schemes were unlikely to ever be paying customers anyways.
Could you elaborate the stage after the 30 day free trial stage a bit more? You generate that request file based on the system. How does your license server know that the license request comes from a valid customer?
We have a "software license code" which is a human readable hex string with dashes separating parts of the code. So, for example, A01-B12-C123ABC A01 identifies the product B12 identifies the version C123ABC is a hash based on the first part of the license and a salt. New SLC's could easily be generated by brute forcing the salt for the hash, but our license server is only going to activate licenses it actually issues. An attempt to activate an "unsold" license results in that user account being deactivated and an alert sent to our company for review. Activation is authenticated using the a registered username/password in our software registration portal. So if someone tried to activate a valid SLC that they do not own, they would first have to get access to that software license code in our software registration portal.
Why are they broken? Wouldn't you just keep running against the previous version?
yes but if you update your nuget packages regularly, your project will be at a higher version than what is in your Dockerfile. In my experience, the official dot net core docker images are always a little behind the latest release of dot net core. 
Global find=&gt;replace :) Sounds like a joke, actually works, probably take a few minutes.
You may check out how to use Entity Framework with MySQL with the MySQL Connector or use the MySQL Connector directly
[Prism has only gotten more professional](https://github.com/PrismLibrary/Prism/tree/master/Source) and github commits seem to be active. I think it'll always be relevant for WPF - UWP I have no idea. I recommend you download the Prism Template pack on VS Tools - Extensions, it gives you some really neat snippets I use even when not making a prism app but using the BindableBase class. propp is like propfull only it adds in the setproperty&lt;T&gt;
EF is awesome
If you have Office installed in the start menu search for spreadsheet compare
Any try catches here? Any reason why you're not looking at the number of rows affected by the nonQuery to verify the operation worked?
It’s something I’m considering. Thanks!
Do you have code example for option 1 and 2? just a quick example? :)
* MSMQ/RabbitMQ/*MQ * WCF w/ named pipes * Logging
You would use a local database like SQLite with [SQLite.NET](https://SQLite.NET), or perhaps easier for you, a text file.
Jesus I am reading through a net. Core 2.0 book right now. Will I ever catch the wave of updates 
And then change all the expected exceptions, and all the asserts etc
What can be so complex on the page itself that wouldn’t be handled server side? Can you give an example?
Which book?
Pro asp. Net core mvc 2 by Adam freeman 
Or [JSON](https://www.newtonsoft.com/json)
Maybe you could start programming in binary using toggle switches too. 
What's wrong with using the dotnet CLI and project files?
Will you explain them to me? I'm literally on day 5(ish?) of using C# independently of Visual Studio, so I'm missing a lot of important stuff. 
Dotnet cli is a console application you can use to create a .net c# project across OS. Therefore outside of IDE. You can use any text editor to edit the files, and use the CLI to run the application, or build an executable, or binary that you can run in whatever system you use. If you have more questions please visit the Microsoft documentation. 
Alright... so I've gone through the release notes and the download page and... I just can't find the actual list of changes. So ... here's the [list of commits (with messages)](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6-commits.md) that were included in this release. tldr of relevant ones; * Security fixes * Support for Ubuntu 18.10 * dotnet CLI bug fixes mostly related to newlines * A few performance improvements But don't trust me on this. See the [actual commits](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6-commits.md)
Hmmm uh oh! Is COM not worth learning? My impression was that it is still rampant on Windows
What version of Visual Studio are you using? I had this problem while running Professional but my coworkers do not when running Community.
Thank you very much! useful links
Web application developer that focuses on enterprise applications: solving business needs via internal applications (that can also have publicly-accessible components). Two-plus decades of web experience, but also extensive experience in satellite skills such as virtualization, systems and network administration, DBA, hardware work and much, much more. I would love work local to south-central British Columbia, but would gladly entertain remote and contract work.
What does the diagnostic info say? 
Sed through command line. Pain in the butt, doable in a reasonable time. Been there, done that
I think it's very good. It's exactly what I was looking for in my next level of c#
From the perspective of a programmer, very little has changed since 2.0, and I strongly suspect that this trend will continue as the whole thing matures. They will gradually introduce new performance oriented features like Span and Pipelines, but familiarity with those isn't that important for Joe Webdev. 
Well, if you are asking this then probably you have not had the need or you have not built that kind of a page, else you would know. For example, Slack, Discord, Google's Gmail, Azure's portal, Complex real-time booking sites, Netflix, Facebook etc? Could you imagine building that kind of sites in pure JS? On the other hand, going to the server and refreshing the page all over again and again is redundant and not a good UX. Also also, jQuery lib is 30kb while Vue is 20kb minified and gzipped. I can't see one reason why you would not use Vue or React :)
This specific overload of `AdDbContext` is taking a function as it's parameter. In this case, the function takes parameter of type `DbContextOptionsBuilder` and returns nothing (it is `Action`, not `Func` if you want to be pedantic). The function then can call methods on the `DbContextOptionsBuilder` to create configuration for the `DBContext`. See [Builder pattern](https://en.wikipedia.org/wiki/Builder_pattern). I'm not sure exact reason why it is done like that, but I would say it is for simplicity sake, as you don't have to instantiate the type yourself. And possibly to make the fluent syntax easier to use.
If you look at the following overload: [AddDbContext&lt;TContext&gt;(IServiceCollection, Action&lt;DbContextOptionsBuilder&gt;, ServiceLifetime, ServiceLifetime)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.entityframeworkservicecollectionextensions.adddbcontext?view=efcore-2.1#Microsoft_Extensions_DependencyInjection_EntityFrameworkServiceCollectionExtensions_AddDbContext__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Microsoft_EntityFrameworkCore_DbContextOptionsBuilder__Microsoft_Extensions_DependencyInjection_ServiceLifetime_Microsoft_Extensions_DependencyInjection_ServiceLifetime_) `public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDbContext&lt;TContext&gt; (`**this** `Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection,` **Action**`&lt;Microsoft.EntityFrameworkCore.DbContextOptionsBuilder&gt; optionsAction = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime contextLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped, Microsoft.Extensions.DependencyInjection.ServiceLifetime optionsLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) where TContext : Microsoft.EntityFrameworkCore.DbContext;` * You can see that it is an extension method (**this**) that can be used on an IServiceCollection, so the first parameter in this case is **Services.** * You can see that the second parameter expects an **Action**. An action doesn't return anything, it just executes some code. * The third &amp; fourth parameter have default values set. It would probably look like this without using a lambda expression: `services.AddDbContext&lt;DbContext&gt;(delegate(DbContextOptionsBuilder options)` `{` `options =&gt; options.UseSqlServer(Configuration.GetConnectionString("Default"));` `});`
That's...not really true. The difference between 2.1.0 and 2.1.6 may be extremely minor, but 2.0 to 2.1 had some pretty significant changes.
You can use Cake and Nuke to trigger MSBuild, which will take project files (csproj) and use them to call the C# compiler csc.
&gt; Maybe for clarity sake, what would the parameter look like without using lambda expression? services.AddDbContext&lt;DbContext&gt;(ConfigureMyDbContext); void ConfigureMyDbContext(DbContextOptionsBuilder options) { options.UseSqlServer(Configuration.GetConnectionString("Default")); }
Yup. I haven't seen any substantial changes since 2.0. The rate of change was quite high before that, though. 
When will this be supported by Microsoft ? It looks like an incredible project, I still can't believe this isn't receiving any financial support. What is Microsoft waiting for ?
True, but the author understands that it will receive changes and until there is another rework he stated he will add more content to his github. In stead of just releasing another book. 
The only practical encounter I've had with COM is automatic some Excel stuff - Excel doesn't have a .NET library but it does expose its COM library. In other words Excel is written in C++, uses C++ objects and then allows you to use that C++ code in C# by using COM objects as the interface between. Things like Sheet, Range, Cell, etc The objects represent the actual item in this case, so var `app = new Application();` actually does create a new invisible Excel process and you can make it visible by going `app.Visible = true;` This is fun and all, but like I said COM objects represents the actual process instance, as if you had started it from the desktop manually, which means the API calls are notorious at stealing window focus. Doing loops with value inserts will make it impossible to scroll through a website. [COM is however the way to go if you want to create an Excel addin with its own tab within Excel.](https://docs.microsoft.com/en-us/visualstudio/vsto/walkthrough-creating-your-first-vsto-add-in-for-excel?view=vs-2017) You can find addins in Excel - FILE - Options - Add-Ins In a nutshell: COM is a way for you to use C# to call APIs that don't exist in .NET Tangent: As for Excel automation - I'd be more inclined to use ADO.NET for data selection/insertions, or OpenXml/[ClosedXml](https://github.com/ClosedXML/ClosedXML) for creating MS Office files from scratch. OpenXml is the file format standard, ClosedXml is a library to use the underlying [Packaging API](https://docs.microsoft.com/en-us/dotnet/api/system.io.packaging?redirectedfrom=MSDN&amp;view=netframework-4.7.2) easier to use. These are .NET libraries that handle the underlying file structure of the "x" suffix Office file format. ie .xls is the old binary format, .xlsx is the new compressed XML format. You can try this by taking an .xlsx file, replacing the extension with ".zip" and then unzip it, you'll see all the files.
The only practical encounter I've had with COM is automating some Excel stuff externally - in other words by not using VBA. Excel doesn't have a .NET library but it does expose its COM library. Excel is written in C++, uses C++ objects and then allows you to use that C++ code in C# by using COM objects as the interface between. Things like Sheet, Range, Cell, etc The objects represent the actual item in this case, so var `app = new Application();` actually does create a new invisible Excel process and you can make it visible by going `app.Visible = true;` This is fun and all, but like I said COM objects represents the actual process instance, as if you had started it from the desktop manually, which means the API calls are notorious at stealing window focus. Doing loops with value inserts will make it impossible to scroll through a website or doing other work at the same time. [COM is however the way to go if you want to create an Excel addin with its own tab within Excel.](https://docs.microsoft.com/en-us/visualstudio/vsto/walkthrough-creating-your-first-vsto-add-in-for-excel?view=vs-2017) You can find addins in Excel - FILE - Options - Add-Ins In a nutshell: COM is a way for you to use C# to call APIs that don't exist in .NET &gt;Is COM not worth learning? Do you have a task that can be solved by automating a separate program? Then sure. Tangent: As for Excel automation - I'd be more inclined to use ADO.NET for data selection/insertions, or OpenXml/[ClosedXml](https://github.com/ClosedXML/ClosedXML) for creating MS Office files from scratch. OpenXml is the file format standard, ClosedXml is a library to use the underlying [Packaging API](https://docs.microsoft.com/en-us/dotnet/api/system.io.packaging?redirectedfrom=MSDN&amp;view=netframework-4.7.2) easier to use. These are .NET libraries that handle the underlying file structure of the "x" suffix Office file format. ie .xls is the old binary format, .xlsx is the new compressed XML format. You can try this by taking an .xlsx file, replacing the extension with ".zip" and then unzip it, you'll see all the files.
This is indicative of a slow, incremental rate of change. 
I would recommend [https://www.codeproject.com/Articles/996001/A-Ready-To-Use-Software-Licensing-Solution-in-Csha](https://www.codeproject.com/Articles/996001/A-Ready-To-Use-Software-Licensing-Solution-in-Csha) which uses hardware IDs. I also modified it to work on the server side so when people make a successful PayPal payment [asp.net](https://asp.net) generates a key and emails it to them.
Granted yes - did a big codebase with thousands of tests in about 2-3 hours once with VS find/replace. A slog, but one hit :)
You said you have an extension method. That extension method is likely currently in scope because you imported the namespace where the hosting type is in. The `BigInteger` type has such a method itself too. So now you have two methods with the same signature in scope. &gt; I only have using System.Numerics; on top. But this function is in System.Runtime.Numerics namespace. Methods are tied to types, not to namespaces.
Microsoft own Xamarin who develop Mono, this technology is also being used in Blazor-an upcoming component of ASP.NET Core. As far as support goes I think they’re doing a good job
oh boi you have like a week or two of research ahead of you regardless of what you're going to use. NAudio is good in terms of signal "recording" and playback but if you wanna do more advanced stuff like the examples you gave ya really need to step up that buffer sampling and signal processing game. AForge.Math i believe can help you with some stuffs like Fourier Transforms for splitting an analog signal in all the composing wavelengths (bass-mids-highs and such). Can't remember for sure, but I think you can find some stuffs for BPM analysis online. For real-time and accurate results I believe you need to be comfortable working with linked lists and other esoteric isht like that. source: dude trust me. Experimented a bit with audio processing after I found out that logitech provides a C# SDK for their RGB lighting products, made myself an app that blinks my mouse after the music played and I'm planning to get a keyboard from them for the same purpose. &amp;#x200B;
Blazor server side that shares most of the code with the client side version will be release in ASP.NET Core 3.0 as Razor components.
https://docs.microsoft.com/de-de/dotnet/api/system.net.http.httpclient.timeout?view=netframework-4.7.2 Read the Remarks
https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.timeout?view=netframework-4.7.2 See remarks + RiPont answer
Definitely try NAudio. You may be able to get the average volume by simply measuring the average magnitude of each audio sample in a given file. As for beats per minute there may be stuff already out there you can use, unless you feel like reinventing the wheel. As a starter you can download this project I made a while ago: https://github.com/adscott1982/Mp3Utilities/blob/master/readme.md It takes an MP3 file and allows you to split it up into smaller MP3 files. I needed it because I had audio book files as single large mp3s many hours long. I wanted to split them up into 30 minute chunks so I could listen to them while swimming with my underwater MP3 player. I couldn't obviously get the audible app on that and needed to reliably listen to the specific chunk I was on. Anyway it uses NAudio and it might be useful to you to see how it works. 
I mean Cake literally works by compiling your cakescript at runtime, but the fact remains - csprojs are the way to go.
Thanks a lot. Your explanation helped a lot in making things clear. I realize I should familiarize myself with more of the C# specific terms and keywords(Action, Func, Delegate). Now I'm not just writing things for the sake of it just working!
Thanks for explaining the overload. I was definitely a bit overwhelmed by the signature, but your explanation filled in a lot of the holes. I think I have a better grasp of reading it now.
C# uses a XML-based scripting language called MSBuild to facilitate everything in recards to automating console calls to CSC etc. MSBuild is bundled with Visual Studio, dotnet sdk/cli, even Windows to some extent. Its one of the strongest build language out there and its written in C#.
See this [Stackoverflow post](https://stackoverflow.com/questions/3871270/shortcut-to-create-properties-in-visual-studio) Type propfull then press tab twice. Or use **CTRL + .** on an existing field and select Convert to full property
With propfull i have to type property name twice, one time for backing filed, another time for actual property. I want to type in once and have backing field auto generated with underscore. Also i need my custom code in Setter &amp;#x200B; &amp;#x200B;
I think they are being very cautious and insisting this is experimental for one particular reason: They want to be free of making heavy breaking changes during development, thus saying this is experiment basically means "we can break everything when we want so you are warned". IMO it's the right decision although yes, I'm really excited about this thing and I whish I could use it NOW.
If you don't intend to actually display anything and only need an invisible window to receive window messages, WinForms is the easiest approach. WPF works as well, but I think that's just unnecessary bloat in that case. UWP won't work since you need a native Win32 window, unless there's some UWP-specific global hotkey API I'm not aware of.
I'm on the April update, 17134
Yes, but you don't have think to think of it as a build language with tasks to be able to use it. In the simple case, its just a file describing what framework to target and which libraries to include, so that when you run 'dotnet build' in the folder you don't have to pass in any arguments.
Install the most recent dotnet SDK. Use "dotnet new {project type}" to create a project file in a folder (it will by default have the same name as the folder, google dotnet new to see a list of the project types). Use "dotnet build" in the folder to build your project. It will include all .cs files by default that are found recursively from the root folder. If you want to setup dependent libraries or have advanced build tasks, then you will need to read more documentation on MSBuild and/or Cake.
You don't need a GUI framework if you only wnat the have Hotkeys. You can register Hotkeys with a nativ function (P/invoke) [DllImport("user32.dll")] internal static extern bool RegisterHotKey(IntPtr hWnd, int id, UInt32 fsModifiers, UInt32 vlc);
As been said, JSON would be perfect for this. Would be cool to have a datagridview to handle it all, very easy too. Then on app startup, read json file into table. Makes editing older reminders easier too
&gt;What is Microsoft waiting for ? For WebAssembly to mature and become more than an MVP. If, for whatever reason, the WASM project completely collapses (which is highly, highly improbable right now) then client-side Blazor dies with it. Blazor's server side model however has been confirmed to ship with .NET Core 3.0 so in my eyes Blazor has got support from Microsoft since the server side model will share the exact same code with client side Blazor, making it extremely easy to swap back and forth from server side to client side. Right now it's just a waiting game for [WASM to build on its skill tree.](https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/)
[Try this](https://www.c-sharpcorner.com/article/create-custom-code-snippet-in-visual-studio-2015/).
&gt; Get referred to the top tech companies in the US. This is really sad... And it's not even specified which those companies are. I vote spam. **Especially** since neither .NET or .NET Core are supported. They support "gmcs 3.2.8", which refers to a very old Mono compiler that only supports up to C# 3.0 (7.3 is latest).
You didn't read his post, did you?
I am available for hire starting Nov 26 for job in Austin, TX or remote &amp;#x200B; * 20+ years of programming experience * Extensive C# full stack web development experience * SQL Server, PostgreSQL, Redis * Azure * Lots of high performance and gamedev hobby projects (opengl, simd etc) * C#, Rust, F#, Go, Javascript, C, C++ &amp;#x200B; Open Source/Hobby Work: * Contributed performance improvements to the F# language core libraries * A high performance LINQ-like library for C# [https://github.com/jackmott/LinqFaster](https://github.com/jackmott/LinqFaster) * A SIMD library in Rust [https://github.com/jackmott/simdeez](https://github.com/jackmott/simdeez) * A super fast noise library in Rust [https://github.com/jackmott/FastNoise-SIMD](https://github.com/jackmott/FastNoise-SIMD) * An educational programming video series [https://gameswithgo.org/](https://gameswithgo.org/) &amp;#x200B; &amp;#x200B;
Then just use Chrome? Isn't it available for pretty much every platform that matters?
Definitely agree while span and pipelines are great (so fast) they're really only important in performance critical paths.
I'm assuming the private server is for hacking and such? I'd use Wireshark to analyse the packets.
&gt;Give i used wireshark but it jus give me like 20 different packets in 1 second.. what packet should i try to analyse? the packet that send after i press on item to obtain? which one you recommend?
Removed: Rule 2.
Analyse all of them until you find the packet/s that fit. LiveOverflow [did a video series](https://www.youtube.com/watch?v=RDZnlcnmPUA&amp;list=PLhixgUqwRTjzzBeFSHXrw9DnQtssdAwgG) where he goes through how he hacks this hacker challenge called Pwnie Island. It'll give you a good idea of where to start.
Nice work! I’ve been writing hooking libraries for about 20 years off and on (since vb3 using vbmsg.vbx - then I went straight to c/win32api) as a hobby - you should explore other low level hooking mechanisms and you can do some amazing things. I mostly worked with hooking wmcreate and customizing windows and making spying tools - looks like these type of projects are a lost art in the realms of all these web apps. Keep it up!
have link for the video series he made?
This isn't Java, you dont need backing field.
You usually need some kind of message loop, or the main thread will just exit. I recommend using WinForms, subclassing a Form to make it always hidden, and putting it in Application.Run(). WPF startup is much slower than WinForms and there's no reason to use it if you don't need a UI.
&gt;This article was written by a Microsoft employee talking about an in-progress Microsoft project, so I'm not sure what more you could ask for. I don't believe Scott is directly involved in Blazor. Last time I checked (summer-ish), client-side Blazor was still considered an experimental project, and Microsoft had explicitly _not_ yet committed to having staff working on it full-time. Server-side Blazor is a different matter; it has since been rebranded and probably as such became quite official.
&gt;Microsoft own Xamarin who develop Mono, this technology is also being used in Blazor-an upcoming component of ASP.NET Core. Two different things. This blog post is about client-side Blazor, which does use Mono for WASM. The upcoming component for ASP.NET Core was formerly known as server-side Blazor and is quite a different thing, architecture-wise. They relate mostly in the way you structure your website, but are completely different in compilation and rendering. Client-side Blazor runs entirely in the client (any static web server will do); server-side Blazor a.k.a. Razor Components runs on the server and streams the rendered result to the client using SignalR.
Does anyone know if this library (or any library) will give me a unique ID of the device that generated the event? I'd love to be able to know the difference between a Q on keyboard 1, and a Q on keyboard 2.
&gt;Do other browsers have such protocols for their own devtools? More or less. Safari has the Remote Debugging protocol. Edge has the DevTools protocol. Firefox has Remote Debugging. [This page](https://remotedebug.org/specifications/) shows some specs, but it doesn't even mention Edge yet, so it seems a little outdated.
Why are web developers so keen on monoculture?
&gt; I think they are being very cautious and insisting this is experimental for one particular reason: They want to be free of making heavy breaking changes during development, thus saying this is experiment basically means "we can break everything when we want so you are warned". Sure, that's part of it (and they _have_ been making massive breaking changes, such as to JS interop), but it's also about how many resources Microsoft is investing. They could put more staff for engineering, documentation, marketing, VS integration, etc. on it, but don't want to at this point.
You can use the GetRawInput api in user32.dll and filter it for any specific device. Good example here: https://www.codeproject.com/Articles/17123/Using-Raw-Input-from-C-to-handle-multiple-keyboard
I implore you to ignore the down votes and leave this post up because it's helpful.
This is glorious. Thank you. OP any chance you could add this to your lib? You could achieve total global event domination lol
I'm running the latest version, so that's not it. I started it from the command line, and now it's showing me a stack trace, which is more than I had before. Here's the useful bit: Stacktrace: * at &lt;unknown&gt; &lt;0xffffffff&gt; * at (wrapper managed-to-native) Gtk.Application.gtk_main () [0x00002] in &lt;e8d21baece374fadb4e2b3899720848c&gt;:0 * at Gtk.Application.Run () [0x00000] in &lt;e8d21baece374fadb4e2b3899720848c&gt;:0 * at Pomodoro.MainClass.Main (string[]) [0x00151] in &lt;9433f3bad54242cf91b294065f90a503&gt;:0 * at (wrapper runtime-invoke) &lt;Module&gt;.runtime_invoke_void_object (object,intptr,intptr,intptr) [0x0004e] in &lt;9433f3bad54242cf91b294065f90a503&gt;:0 So it looks like it's an issue with the Gtk UI. So I need to dig at that. But I have more information than before. Thanks!
You could do all of that, or you could use the one-liner specifically designed for .Net: `Form f = new Form();` From there, that hwnd parameter is just `f.Handle`.
There are also WinForms apps that use the NotifyIcon control, which decorates the form so it will minimize to the task tray.
That might be a bit of a red herring, I didn't realize you were doing a gui app. You GTK might always throw errors when you run it from the command line, so you should make an effort to ensure that's not the problem before diving too deep.
A delegate is simply a function passed as a parameter. In C#, one can define a delegate type, which expresses a named method signature to which anonymous delegates can be constrained at compile time. Action&lt;T&gt;, Func&lt;T&gt;, and Predicate&lt;T&gt; are generic delegate types which simplify the most common use cases. In today's C# dialect, we almost never set up a custom delegate type or use the delegate keyword explicitly. Rather, we use the built in generic delegate types and the lambda expression API to express functional logic. This is shorter, easier to read, and easier to maintain.
Windows only I assume?
Learn how to do database stuff first. Once you understand that, you'll be better able to grok SQLite. SQLite is an abstraction that *looks and acts* like a database, but is really just a local data file. The confusing part is that it hides *everything* from you and just looks like a black-box database connection like any other. That's fine and dandy once you have the hang of working with a database, but for beginners, it can be overwhelming. If you *really* need to start out learning on a local "database-ish" file for storage, I would recommend something more open (though no less complicated and pitfall-laden) like a .Net Typed Dataset. These have the benefit of being able to open the file in a text editor to see all the inner workings of what it's doing. It also has a nice GUI for beginners to set up the structure. (SQLite expects CREATE TABLE scripts like a real database.) Or best of all, you could use a more modern process like code-first Entity Framework, then point it at a SQLite "connection" for the backing store. This is probably the preferred way of doing things in the real world, and it's no harder to learn than the other ways given here. (Though you can't just open the files up and look at what's being stored like the typed dataset. That can be a valuable learning tool, but not strictly necessary.)
I never mentioned anything about Razor Components and that aside is there any announcement to suggest that WASM Blazor is not part of ASP.NET Core as I’m 99% sure they’re both being released as part of ASP.NET with Razor Components coming out first and this coming out later. 
hahahaha goddamnit. Thank you, the facepalm I would have had after a few more hours of this might've killed me
MonoDevelop is *awful*. It had promise at one time but I'm not sure it's even maintained anymore. Just don't even bother. Use the native dotnet packages for your distribution and develop in VS Code or something.
All mostly good advice except that you don't seem to be aware of [DB Browser for SQLite](https://sqlitebrowser.org/). It's more or less SSMS for SQLite - allows you to view &amp; create table structures, generate DDL SQL for your DB, execute SQL statements, etc. It's invaluable when working with SQLite DBs.
You're right, I've never heard of it. But thanks for telling me. It's always good to have more tools.
In same situation. Searching for real dev world examples to learn from.
Any idea how complex the database can be?
It is going to be almost impossible to find a proper start-to-finish guide on any application because if the tutorial isn't contrived then the application would be a product, not a tutorial. Beyond diving into framework tutorials or more abstract tutorials dealing with design patterns like Domain Driven Design your only actual option is to dive into github source code of applications. Popcorn is a WPF app that has to deal with data, navigation and presentation - you could check out how that is structured. In a workplace, to get some quality more often than not Line of Business applications require teams of people so that tasks can be delegated. I'm a Business Analyst in our IT dept Then you should start looking into APIs that work with data. Get familiar with ADO.NET in the System.Data namespace, how DataTable and DataSet works, understand how and why the paradigm has moved over to Entity Framework and how to create Data Models to quickly generate database graphs for tables, learn LINQ to formulate queries, learn both the query syntax and the method syntax - which will introduce lambdas, which introduce delegates. This ties neatly into the LINQ To XML API in the System.Xml.Linq namespace, and why that is superior to the System.Xml API
It is going to be almost impossible to find a proper start-to-finish guide on any application because if the tutorial isn't contrived then the application would be a product, not a tutorial. Beyond diving into framework tutorials or more abstract tutorials dealing with design patterns like Domain Driven Design your only actual option is to dive into github source code of applications. Popcorn is a WPF app that has to deal with data, navigation and presentation - you could check out how that is structured. In a workplace, to get some quality more often than not Line of Business applications require teams of people so that tasks can be delegated. I'm a Business Analyst in our IT dept Then you should start looking into APIs that work with data. Get familiar with ADO.NET in the System.Data namespace, how DataTable and DataSet works, understand how and why the paradigm has moved over to Entity Framework and how to create Data Models to quickly generate database graphs for tables, learn LINQ to formulate queries, learn both the query syntax and the method syntax - which will introduce lambdas, which introduce delegates. This ties neatly into the LINQ To XML API in the System.Xml.Linq namespace, and why that is superior to the System.Xml API, but still learn how XmlDocument works. XPath is definitely worth it as well as [Regular Expressions](https://www.regular-expressions.info/quickstart.html). And then get to know the JSON API to make your data formats interchangeable.
I'm sure you love using the open source work others have done though.
Amazon lets you preview the contents page and the first chapter, for lots of programming books. This is how I choose which book to buy. The previews aren’t available on iOS devices. 
Oh I do... at least when the code is up to quality.
EFCore uses Microsoft's broken implementation of the SQLite drivers. I had a lot more luck when I gave up on it and switched to the official drivers for my ORM. Nuget Package: https://www.nuget.org/packages/Tortuga.Chain.SQLite/ Documentation: https://docevaad.github.io/Chain/Introduction.htm 
Do you have this package installed? https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite.Core/2.2.0-preview3-35497 
Yep.
 Microsoft.Data.Sqlite.Core Microsoft.EntityframeworkCore.Sqlite Microsoft.EntityframeworkCore.Sqlite.core SQLitePCLRaw.core + Dependencies (Many)
And you're using this code in your DBContext? protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseSqlite("Data Source=blogging.db"); } 
It's in the post sir, yes same signature.
My apologies. Unfortunately, I'm not finding anything else that could explain the problem you're having.
No apologies necessary, thank you for trying.
Yes, and Steve said in summer that he cannot work on it full-time yet, as Microsoft has yet to fully commit.
I'd also like some CQRS links too.
&gt;I never mentioned anything about Razor Components No, but you said "an upcoming component of ASP.NET Core", so I clarified that that's only true of the server-side part. &gt; is there any announcement to suggest that WASM Blazor is not part of ASP.NET Core [Not explicitly, but…](https://blogs.msdn.microsoft.com/webdev/2018/10/02/blazor-0-6-0-experimental-release-now-available/) &gt;We're also excited to announce our plans to ship the server-side Blazor model as Razor Components in .NET Core 3.0! IOW, the client-side model has _not_ been announced to ship as part of .NET Core 3.0. And: &gt;As part of integrating the Blazor component model into the ASP.NET Core we've decided to give it a new name to differentiate it from the ability to run .NET in the browser: Razor Components. IOW, "Razor Components" refers specifically to the server-side model. And: &gt;Our primary goal remains to ship support for running Blazor client-side in the browser. **Work on running Blazor client-side on WebAssembly will continue** in parallel with the Razor Components work, **although it will remain experimental for a while longer** while we work through the issues of running .NET on WebAssembly. &gt;I’m 99% sure they’re both being released as part of ASP.NET with Razor Components coming out first and this coming out later. Microsoft isn't as sure. ;-) That doesn't prevent any third party from shipping a product based on it, of course. Anyone could fork it, rebrand it, and commit to have people working on it.
Removed: Rule 7, spam.
How do i invoke INotifyPropertyChanged.PropertyChanged then?
i think what is ultimately the problem is twofold: 1) as you allude, wasm isnt baked enough yet, or rather, wasm runtimes aren't baked enough yet. afaik nobody does any optimization. so the underlying runtime is slower than it could/should be. 2) because of 1 and the newness of wasm at large, mono.wasm is really lacking in performance for a handful of reasons, not the least of which is that removing unused code from the runtime download effectively doesn't exist. corert could help by way of a single binary... if it ever actually ships. microsoft isn't going to sign up for supporting blazor until those two are addressed. i have high confidence that it will be supported, but i suspect the scary "experimental" tag is primarily to free themselves from any obligation of support until there is something worth supporting.
1. If my list of T is smart/complex enough that I need TViewModels, I’ll build/update that list in a property changed handler for the ‘dumb’ list property. 2. I’ve never heard of not setting the VM in the code behind. All my projects have the view take the VM as a ctor dependency, set the binding context in there. 
I would recommend not using EF if the goal is to understand SQL. EF hides a lot and is really fucking slow. 1. Select your SQL dialect. There are plenty of open source options. MySQL, H2, SQLite are all popular. 2. Get a server up and running. 3 Dive into SQL. Understand how to make a table. How to make foreign key constraints. How to make specific row properties. How to do basic crud operations on a simple table. Then move to one to many and vice versa relation ships. Then many to many. Understand how to make a junction table. What it does. SQL is pretty standard across DBMS’s. 4. Learn Dapper. Dapper is a lightweight object relational manager. You will need to understand how to write queries in SQL first to use it. It will deserialize your databases responses into POCOs. It is awesome and much faster than EF. Again, EF fucking sucks. As for resources they are enumerable. For getting used to writing sql queries use codesignal.com and it will gamify the process. For everything else. Use google. 
In my opinion, the judgement of the similar filename needs code by yourself, any other tool can't do the perfect things better than you. after assorting the files by name, you can use iditect pdf library(which I used) to [merge and combine the PDF in c#](https://www.iditect.com/tutorial/pdf-page/) though the classification 
You don’t need to refresh the whole page in .net you can return partial views. With internet speeds these days is 10kb a game changer? I’m not trying to be cheeky or anything I just haven’t found a need to use a JS framework all I have needed is AJAX and Jquery.
Oh! I use this in a project now. I'm using EF core which has its own provider for SQLite and it works out of the box with very little configuration. Lemme know if I can answer any questions, I use it for some really light weight config data so it's nothing big, which I suppose where SQLite shines.
I've recently been working on a project with the same components (SQLite, EFCore and WPF). I struggled with it for a while (especially the `SQLitePCL.Batteries.Init()` call) but managed to get it going. Mine looks something like this: Requires the `Microsoft.EntityFrameworkCore.Sqlite` nuget package public class SqliteContext : DbContext { public SqliteContext() { // This is the magic line that made it work for me SQLitePCL.raw.SetProvider(new SQLitePCL.SQLite3Provider_e_sqlite3()); Database.EnsureCreated(); } protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseSqlite($@"Data Source=.\database.db"); } protected override void OnModelCreating(ModelBuilder modelBuilder) { // Entity mappings } }
I'm also confused by this. I haven't had any issues. I'm not really doing anything complex though.
When you phrase it like that it makes a lot of sense. With them launching razor components they have largely committed, but they can continue to move fast if they claim completely unsupported, and mitigate any bad PR there. Thanks for the perspective.
I also have had no issues.
I’ve actually started a learning community that creates real world projects from start to finish using best practices and such. Is this something that would interest you?
I've been using it on basically every netcore project since 1.0 if I'm not mistaken. It works fine.
It's very simple. Any one of Greg Young's CQRS videos on YouTube will show you. However, for into testing the write side it's Given: past events When: I run the command Then: I get this event (or events sometimes) For read side it's Given: past events Then: my read model looks like this
It's good if spying tools get lost in the realms... :-( You should just trust your girlfriend instead.
There's a very easy way to fix any issues with MonoDevelop: don't use it, get something actually functional.
It shouldn't be a full thrown exception with stack trace, should it? I know it will give feedback on the command line but it's not usually an exception, I don't think. 
The simplest solution would be a database of key-secret pairs. Keyes are, well, keyes, and secret can be in a nullable column, and can be generated based on, say, system config + MAC address. Hash that too, for security. Then just make the app call your API on every startup, generate a new hash, and compare it with the one on database. To handle hardware changes, you can provide an online service where the license owner can request the key to be regenerated.
Thanks a million
Timers in C# are not precise, especially for things like timeouts. Remember, timeouts are not expected to be perfect, they are just a hint. Unless the difference between timeout and actual time is some crazy value, I wouldn't be too surprised.
As an aside, [CallerMembetName](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=netframework-4.7.2) should help avoid the predicate, assuming it's being used to get the name of the property.
We are talking browsers here, why are comparing browser to an IDE/Editor? Browser is just sandbox where you run your app.
And this is exactly what I have been doing 3 years ago. But my friend, once you go with Vue and experience that beautiful beautiful code you will never come back and write another jquery line. I understand that you're trying to stick with what you're familiar or teach us something but time has moved on and trust me when I tell you that replacing jQuery with Vue will be the best decision you have ever made.
I just let it run on a fairly complex database with around 343 generated entities. I did not try to use it yet, but it just generated everything.
Your namespace can be invalid after generating when your database has some special characters.. had to go through find &amp; replace.
After sorting out everything I tried to create an initial migration. But it failed: Unable to determine the relationship represented by navigation property 'Customer.CreatedByUser' of type 'User'. Either manually configure the relationship, or ignore this property using the '[NotMapped]' attribute or by using 'EntityTypeBuilder.Ignore' in 'OnModelCreating'.
you might be right.
If only we had a way to make source code available online without forcing the users to download suspicious zip archives...
Try creating a .net *core* targeted test project, and using that as the startup project for the powershell commands. That's how I've worked around issues when targeting .net *framework* (WPF).
it's never a suspicious zip. Download it, scan it and get back to me if you find anything suspicious
So just to put into context, because of the way Ajax and Jquery works I have no found myself to need to have 100s of lines of JavaScript. You have any business logic you send to the .net and do on server side behind tests. I can see the benefit of you were doing a front end project where you are calling APIs not in your control however I can not see the benefit when you have control of back and front end. I am interested in it, we have a project at work using vue.js which I am leading. The devs asked if they could use Vue and I said yeh sure but there is no back end for that. I am also a tech lead for another project in .net for a logistics booking and processing of shipments etc and have not had a need for anything other than JS. Anytime we do something complex or there is logic it goes to back end for processing
GitHub, Please
Those things sound very interesting actually and I am sure you are doing a great job but maybe you really didn't have the business case for this kind of thing. We have some real-time high-performance complex sites and dashboards and without some framework(other teams use React) we would shoot ourselves in the leg. They were also doing jQuery ajax + partial views and this code is now just part of the old monolithic application and the new microservices and microwebs are in dockers and built with the modern frameworks and it really makes our lives easier. Let's just agree to disagree. I was in your shoes before and we also built awesome stuff, but using Vue won me over and I would never come back.
Unit testing is the same concept regardless of architecture pattern used. In this case you would basically write unit tests for all the commands and queries individually, mock out any external dependencies(database,http requests etc) and just test that part of the code. This was a generic answer but do you have any specific question?
Thanks for bug report. I’ll get that fixed. Was the character in the database name?
Thanks for example butI have already created such a snippet. I want snippet to automatically add understore prefix to backing field name and also make it's first letter decapitalized. I think thats impossible without resharper then.
This is the missing nugget needed to make cross platform Blazor development feasible (even if the client side model itself is still experimental).
If you can share your schema privately, I can get that fixed. Thanks for bug report. 
Hey! I checked and it's very cool! But there is one thing that I don't understand : you replaced all typed variables with 'var'? Why?
Thanks, I will for sure!
Glad it helped. What unit test framework are you using? I suggest xunit. Also Moq and AutoFixure for mocking.
I am using Microsoft.VisualStudio.TestTools.UnitTesting, but I know xUnit a bit - I was using it with a selenium to test a web app. I was thinking about Moq - this seems to be popular now and guys from InSTEDD are so cool doing what they are doing. I was just reading about this project (linked from Moq github). &amp;#x200B; Never heard about AutoFixure. Thanks. I will have a look. 
I noticed references (Code Lens) show up in October’s VS Code update... good stuff. We gettin there 
May I ask how you finally implemented your solution? Has it performed well under load, network anomalies, ect..?
yea, should be an incremental change, which is great. are there differences between razor/blazor syntax? I don't know a ton about razor... it looks like they are the same to me. 
I would probably create a map and count each occured number there. Maybe not most efficient but at least viable 
I use Microsoft suggested coding conventions (style) for refactoring and increasing my quality of code. It's suggested by Microsoft to use var instead of explicite type. Please have a look at it =&gt; https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions#implicitly-typed-local-variables
If you are not comfortable with it. Should I revert that change and push that change to PR. After all its your repo, you are the king! 😂🙌
this may be true but doesn't help op's situation
Curious why people like VSCode for .Net development? I'm assuming it's the heavy resources Visual Studio consumes? Or is it because doing FE work with frameworks are better with VSCode? Or is it something else I am missing? Don't get me wrong, I love VACode and use it for everything except .Net/Unity development. 
3 years coding c# and you've never seen an indexer? Have you not used an array?
I'd say that getting a working IDE will help him with this, and any other past and future issue with MonoDev
How did you think `Dictionary&lt;TKey, TValue&gt;` works? Haven't you seen anything like `someDictionary["aStringKey"]`?
There are no hidden syntaxes. They're all documented. Writing custom indexer is a basic feature.
Guys, don't all shit on someone for admitting they don't know something. There was a time for all of us that we didn't know about this. It's especially understandable considering that custom indexers are a more esoteric feature. To the OP: Yes, this functionality is what lets us index lists with `myList[n]` or key in to dictionaries with `myDictionary[key]` etc.
Your read side testing is the same
That's how Lists, Dictionaries etc. do it. It's a standard language feature you just haven't stumbled across. Not hidden.
Agreed. Come on guys, like you’ve never missed Out on learning something for a while?
Blazor has function blocks, data binding to the properties in the function block, some special syntax for UI events, component-related stuff that looks kinda like helper tags, and some other stuff I'm too ignorant to speak of at the moment. But yeah, the stuff that makes Blazor tick.
I was trying it recently. And while it's got good support it's just not enough. Vs does so much and allows for so much debugging 
In many languages you are not allowed to define your own indexers. 
Tell me, when was the last time you created a custom indexer? Once ever three or four years is probably my average.
It ceased being a "basic feature" with the introduction of generics in .NET 2. The vast majority of scenarios where we would have once created a custom indexer is now handled by generic base classes such as `Collection&lt;T&gt;`. 
The `async` keyword tells the compiler you plan to use the `await` keyword somewhere in the method. If you don't use `await` I think it's a compiler warning. You can call a method marked `async` without using `await`; if you do, it returns a `Task` or `Task&lt;T&gt;` and you're expected to do something with that. So in summary: you only need to add `async` if you use `await`. Second question: There are idioms and patterns for converting older async patterns to the Task pattern. But `await` only works with `async` methods. So in general you have to make a new class that hides the old async pattern behind a method that returns a `Task&lt;T&gt;`. Third question: Don't use tasks or thread pool threads for long-running things. Use `Thread`. Tasks are expected to complete.
I agree. And I see people downvoting. When I opened the discussion only u/quentech comment was here and the reply. I could've posted a top comment and bring up dictionaries or reply in this chain. Suddenly if you bring something up through a question it means I am shitting on someone. Anyways, it is a feature that you rarely need to implement yourself. No wonder one won't hear about it just by coding. Heck, I don't even know when I first heard of it, or where, or how. I must've been reading on C# features or simply wondering how dictionaries looked so different from the ones in Java.
Calling overloading polymorphism seems like a bit of a stretch...
What I do in windows forms, which should work similarly, is store the tabs that need to be hidden in new private objects within the form class and remove the originals from the tab page collection. Then when I need them, I add them to the collection as needed. This also allows you to access their attributes programmatically.
If you want to reap the benefits of async code, you need async all the way to the top. C# 7.1 allows an async main, so there's no reason not to. Of course, if you're doing a GUI desktop app there's a lot of care to be taken around thread contexts, but that's a separate issue. &amp;#x200B; It's fairly easy to wrap old callback-based async code. What you'll want to look at is the [TaskCompletionSource](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1?view=netframework-4.7.2). &amp;#x200B; Whether you run the task from it's own class or not, does not matter a lot, I think (I personally prefer to push status updates from the worker process). If it's going to be long-lived, make sure to use the appropriate flags. Consult [David Fowlers excellent list](https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md) to make sure you aren't falling into any less-than-obvious traps.
You might consider extending TabbedPage. Check out this explanation https://forums.xamarin.com/discussion/138302/how-do-i-hide-the-tabs-of-tabbedpage-when-clicking-a-nested-navigationpage
BTW, there is a Xamarin Forms sub
It had (has?) a problem though, the references were searched when you focused the file. So every time you switched file tab there were a scroll in the window because the lines needed for the references lines were added.
Now I feel stupid lmao
Happens to everyone
You shouldn't be calling `AcceptTcpClientAsync` on a timer at all. There is no need for this, just call it once per `TcpListener` and then call it again once the previous `AcceptTcpClientAsync` task completed.
&gt; You shouldn't be calling `AcceptTcpClientAsync` on a timer at all. Wouldn't it be a problem if you were to accept multiple clients? In my case I have a high throughput client which sends files continuously while others are health checks from AWS. Timer calls `ListenData()` method which in turn calls `AcceptTcpClientAsync()`. Can I limit number of active clients to a certain number using that solution?
It basically comes down to value types vs reference types And arrays are of reference type, even if they consist of value types &amp;#x200B; &gt; Or stores the array the pointers to the elements (of type int) so if I modify the element, the pointers element is modified? Yes, reference types store the pointer to the object &amp;#x200B; You could also pass whole objects by value, if you really wanted to, by using structs However, this will have downsides if you're not careful &amp;#x200B;
If you're building a commandline tool that is more than a basic one off utility, consider getting comfortable with a command-line parsing nuget package. There are some libraries out there that take care of the /help and usage examples, and parse the options straight into an object. They can also help with attributes defining what options are required or multiple options that are part of a set.
Prefer (args?.Length ?? 0 &gt; 0) to gracefully handle a null arguments list.
Your call to AcceptTcpClient will not return until a client connects. You can process that client and then listen again. Calling AcceptTcpClient on a timer doesn't really make sense, since you are just going to be unnecessarily queueing things up. Just call it again after the first connection is accepted.
You should create a map where the \[index\] is the is the value in the 2d array. 
An int\[\] is an array of values. Arrays are reference types. So you're passing a reference to the array, which stores values. So basically, you are passing a reference to the values. If the array were an array of reference types, then yes, it would be storing references to those types. However, in your case, the array stores values, but since the array is a reference type, you are passing a reference to the array into the method.
I think (args != null || args.Length &gt; 0) is better, just because it looks more readable to me.
That throws a NullReferenceException if args is null.
Fixed, meant to use and not or.
No, because downloading is a premium feature that is reserved for YouTube premium users. Which is a monthly fee, aka this is technically piracy.
It's not illegal, it's merely against ToS, so Youtube has all rights to terminate your account, but you are not breaking actual law. If you started sharing these videos, then yes, it would be illegal.
So by that logic, it's okay for me to download mp3's from YouTube as long as I don't share them right? Oh wait.
Yes, actually it is. Again, you're merely breaking ToS. If you were to create a website that allowed people to download those songs from Youtube directly, THEN it would be against the law, because you are distributing that content through your website.
I'm assuming you are in a class for this kind of request, and in that case it would help to know what kind of structures you are expected to use. There are two different methods that come to mind, the first of which would be to do as others have said by using a Dictionary&lt;int, int&gt;. Just loop through each value, map the value into the dictionary and either set the count to 1 if it's not already in the dictionary or increment the count by 1 if it is. The alternate method would be to use Linq, you can accomplish all of this in one line using the OfType, GroupBy, OrderByDescending, and First/FirstOrDefault methods.
So, are you just trolling now, because I'm confused about this severe misinterpretation about what I said. We are talking about legality here, not whether it's okay to pirate music. Also, this is not quite piracy, because you are capturing content from a legal source of said content. Piracy involves taking downloading the content from sources that are not authorized to distribute it, Youtube is. You are by law, allowed to back-up your music CDs, your video games, etc.. Backing up content that was legally distributed to you is not technically piracy. Now we can get into a debate about whether it's right to download music from Youtube instead of buying it off something like iTunes, but that was not at all what this discussion was about, it was about **legality**, of which this is legal, don't twist the discussion just because you don't like being wrong.
Downloading someone else's copyrighted work without their full consent, is completely illegal. You're right this is about legality, and that is illegal.
I will make it legal 
Well, on smaller projects or if working alone there aren't any. It actually makes you slower. But, for mid to big project and working in teams it makes a huge difference. When I take over a particular feature from my colleagues having Typescript makes the code a lot more readable and you can see a clear intent about what data goes where and of course what are the types. I would recommend at least trying it. Other popular option is Flow. If you don't want TS but want type checking, take a look at Visual Code //@ts-check feature. Since most of your models are in razor maybe you will not benefit so much from those things but you can try it and see if it works for you and your team :) 
I use [youtube-dl](http://rg3.github.io/youtube-dl/) for this. It's a command line tool with many options (that I ignore) and also supports many other sites.
Thanks, great work. I also use your LightBulb, another good app.
Consent for download is given upon uploading to YouTube, hence how it is legal for YouTube to offer this service to its premium users. By circumventing YouTube’s TOS, you are able to download a video without paying for premium. This is still not a breach of any rights of the copyright holder, as their consent for download has already been provided via their agreement with YouTube.
I agree, one of the first things I dl with choco on clean windows machines
&gt; Are there any more hidden syntaxes like this that you know of? Get a copy of *C# Pocket Reference*. I've picked up a number of tidbits from that book that I hadn't seen elsewhere. Speaking of indexes, I think it's where I first saw that you could use the null operator in front of index brackets, e.g. `array?[0]`. 
In Germany - yes
There is also [FreedownloadManager](https://www.freedownloadmanager.org/) But having a project like this does not hurt either
Actually there's a minor performance gain to having methods that simply return a task, simply return a task. Don't make them async at all. Otherwise you're spot on as usual :)
The array is a reference type issue has been covered so I'll move on from that. ALL types in C# are passed by value to a method, unless you use the ref or out keywords. Stay with me here. Reference types contain essentially a pointer to the real data, this 'pointer' itself is a data structure of sorts. When you pass it to a method, it is passed by value. Ie it's a copy of the original pointer. It is still pointing to the samething though, so when you make changes to the object it references they actually change the original (same) object. Where you will see a difference is if you assign a new object to the variable when inside the method. If you didn't pass it by reference this new assignment will not be reflected outside the method, because you are changing a copy of the 'pointer' not the original pointer
There are three possible scenarios when passing an object, in this case an array: public void outer() { int[] arr = new int[] { 1, 2, 3 }; Console.WriteLine(arr[0]); // 1 Inner1(arr); Console.WriteLine(arr[0]); // 5 Inner2(arr); Console.WriteLine(arr[0]); // still 5 Inner3(ref arr); Console.WriteLine(arr[0]); // 100 } private void Inner1(int[] arr) { arr[0] = 5; } private void Inner2(int[] arr) { // without 'ref', setting arr to a new array doesn't affect outer array arr = new int[] { 10, 20, 30 }; } private void Inner3(ref int[] arr) { // with 'ref', setting arr to a new array does affect outer array arr = new int[] { 100, 200, 300 }; } The differences between Inner2 and Inner3 show the impact of the `ref` keyword.
VSCode is just...meh for .NET development. I'm only a beginner but it seems like a half-assed job to get .NET development, it lacks a lot of stuff, it's the best at Web development(and maybe other stuff like PHP, Go and Python) but for C# and .NET, uh, stay away from it. Rider seems like the best alternative for VS.
&gt;beginners to WPF \&gt; Lists bunch of utilities that hide all the important shit that WPF does I think someone learning WPF needs to manually do some of the stuff those libraries do for you, understand why `INotifyPropertyChanged` needs to be implemented, understand how to apply styles and triggers etc within XAML, then get pissed off about how repetitive and fiddly it is THEN find a library to simplify it. I mean what you've listed is great for someone who's already got a handle on WPF, but some of the principals that are wrapped up in these libraries are pretty fundamental knowledge on how WPF works.
&gt; learning WPF needs to manually do some of the stuff those libraries do the 1980s are calling you...............
&gt;If you were to create a website that allowed people to download those songs from Youtube directly, THEN it would be against the law Which makes this tool illegal, right?
Personally I would rather know how everything *works* as opposed to just making assumptions and using external libraries. I don't really see a down side to furthering my understand.
Thanks mate will take a look
I think it's legal in Europe in general, at least in France too...
 int HighestCount = 0; var highestOccurance = (from y in mat let CountOccurance = (from x in mat select x.RELEASEID).Count() where HighestCount &lt; CountOccurance let tHigh = HighestCount = CountOccurance select new { y, tHigh }).FirstOrDefault();
 List&lt;Service.Person&gt; persons = new List&lt;Service.Person&gt; (service.returnPersons()); should work. What’s happening here is that even though you appear to return a list, web services will actually serialize it as an array. Therefore, if you need to consume it as a list in your client, you need to make one. (You also really shouldn’t be using .NET 2.0-style web services in 2018 if you can avoid it.)
You do understand that every time you watch a YouTube video that your web browser has to download it to your computer first, right? Are you trying to say that going to YouTube is illegal? 
Just using `(args?.Length &gt; 0)` is more readable, less work for your brain. That `?? 0` in parent post isn't needed.
No, it does not. The greater did not make a website hosting the videos/songs, did they? If so, then you would be correct. Otherwise, you are incorrect.
In C arguments are passed by value, but not in all languages BY DEFAULT passed by value. If you don't want an array and its arguments to be incidentally modified by others, you can absolutely write an ReadOnlyArray&lt;T&gt; to do so. That's what I'm doing to pass an array in multithreaded occasions.
Hit the breakpoint and inspect what exactly your web service is returning. &gt; List&lt;Service.Person&gt; persons = service.returnPersons().ToList(); This should work unless the output is null. 
The webservice merhod could be simplified by usig Select and ToList. But it looks like the webservice is returning null. Have you debugged to check what is being returned? Edit: Or the service variable could be null.
I only use it to make backups of my own YouTube videos... 
Are you using doubles? They are able to represent numbers as small as about 10E-300 which should suffice for your application. However, the problem which floating point numbers is that if you do operations which a big and a small number you will get a precision loss (e.g. 1+1E-16=1, 1+1E-15 would be ok though with 1.0000000000000011). One possible solution is to do the operations from small to big numbers so that the precision error is minimized. What does your algorithm look like?
You need to install the server separately from management studio. Download SQL Server Express 2017.
I hate the term but interfaces are like contracts. An interface is a way you have to abstract behavior. You are saying "look, I don't care which class this object is instantiated from, I just care it has these methods / properties", and that's it. You can of course write a CompareTo method but without declaring that your class implements IComparable, any class that expects an IComparable simply won't accept it as an IComparable. By implementing an interface you are \*\*forced\*\* to at least declare the methods it describes, thus granting any consumer of your IComparable the existence of the methods it expects in your object.
Imagine you have a method that will accept any of the following classes from a single argument: Cat Dog Tiger Hamster &amp;#x200B; You can declare it as accepting a type IAnimal, an interface from wich all those classes inherit, and then the method can know that the objects will have certain properties and/or methods. That is the reasoning i've encountered so far with my brief work experience on c#. &amp;#x200B; There is likely others. &amp;#x200B; Cheers
The interface creates a contract so the calling program understands some of the functionality of the class in question, without having to know details of how that functionality is implemented. I use this example- say I’m throwing a party at 8pm on Friday. I invite my next door neighbor, a friend from work, and another friend who lives out of state. They all show up to my house on time. Think of this as me invoking an interface on each of them called “go to x address at y time”. Each of them succeeded in the task, but probably using different means (my neighbor walked, my work friend drove, and my out of state friend flew). I was able to invoke that interface without caring about how they did the task. 
Think of them as a contract, you have the signature without the implementation. Implementing can be anything as long as you can pass in/return the types in the method signature. Class implementations can have multiple interfaces where they only support single inheritance from other classes. Perhaps you should read into SOLID principals and unit testing. 
&gt; Can't I make a CompareTo method without IComparable as well? You could, but the type system would have no way of knowing that your "CompareTo" is "the same" as IComparable's "CompareTo", even if the signatures match. Interfaces allow you to say, "hey, anything that implements this will have a method with this signature", which would in turn allow you to do something like interface IMyInterface { string SayHello(); } public class A : IMyInterface { public string SayHello() { return "Heyyyyy"; } } public class B : IMyInterface { public string SayHello() { return "Hello there"; } } // Now, you can do something like this List&lt;IMyInterface&gt; list = new List&lt;IMyInterface&gt;(); // and add instances of both classes to it... list.Add(new A()); list.Add(new B()); // now you have a list of various concrete types, but because they // all implement the IMyInterface interface, you can interface with // them through the methods of the interface foreach (IMyInterface implementer in list) { Console.WriteLine(implementer.SayHello()); } Sorry the example is so contrived, it doesn't really do interfaces justice. I'm struggling to come up with better examples at the moment, if you keep researching into interfaces I'm sure you'll find much better arguments for their capability and usefulness.
I used to have trouble understanding the point too. But take a look at it this way: Say you own a door factory, and there are lots of styles of doors, but they all need to have a width, and height, and have a doorknob. You can create an IDoor which has properties for DoorKnob, Height, and Width. Then give that IDoor to your door engineers. They will always know at least that they need those three things. Doesn't matter what the value is but its expected to have a Height, Width, and some kind of DoorKnob. &amp;#x200B; The same thing with programming, you can have an IWriteToFile. That has an output file path, an input string, etc. But you can implement that IWriteToFile interface to output JSON, or CSV, or plain text. The other nice thing is you can test interfaces easier because it's just an idea of something, not an actual thing, so you can have an IWriteToFile that does other special testy things. &amp;#x200B; Not only that but with interfaces, you can easily inject them into classes using a Dependency Injection framework like AutoFac. (I can explain more about those too if you haven't encountered them before!) That allows you to maybe switch out the implementation of IWriteToFile at any time during development or even at runtime between the JSON, CSV, and plain text writers. &amp;#x200B; Let me know if that answers your questions or if there's anything else around them that you're curious about! &amp;#x200B; &amp;#x200B;
Lots of answers here already, but here's mine. Because Microsoft is about to implement "[Default Interface Methods](https://dotnetcoretutorials.com/2018/03/25/proposed-default-interface-methods-in-c-8/)", you can no longer just say that interfaces say what "should" be there, and classes actually implement it. Because interfaces now can also have implementations. So along with all the other answers here's another one. &gt;Interfaces define behaviour. Classes define state. That is, interfaces define the behaviour that will always be there (Either implemented on the interface or not, the caller doesn't care). But it cannot hold the actual state of the object. I would say as well that looking at IComparable and things of that nature is probably going to confuse you more. Best examples are always the ones with animals and the like because they are easier to understand from an "inheritance" point of view in the real world rather than using interfaces cause OOP. 
I understood it through physical description: You buy a panel with some buttons for a crane - they say left, right, grab, drop. This one panel is great because you can screw it on to loads of different cranes from different manufacturers and it will work exactly the same. The only requirement is that the crane manufacturer must have implemented the standardised crane-control interface for the panel to fit to.
It means you can treat all those objects that implement that interface the same. So you can have a list of IComparable and know that you can foreach through all of those items and run the compareto method. You don't need to know anything else about those objects. 
C# is a strongly typed language which means that the compiler cares about the type of an object and what methods it has. Interfaces are like extra types you can give to classes, but in saying that something is of a certain type, you are guaranteeing that class will implement the methods of that type. When you do that, you ensure that anywhere that type is used, those methods will be available. It's called an "interface" because it describes how other classes inter-face with that object. API, application program interface describes all the methods that are publicly available for a library, say. The interface, is that list of methods. it's like how can other consuming classes connect with this class? Through these methods, or this "interface"
Another example: Let's say you are writing a program and you want to log its output on a file while you are debugging it, and on a beefy ass database while you are in production. The implementations of logging to a file and on a database are different. You don't want to write a case for both loggers, let's say in your constructor you expect an ILogger: private ILogger _logger; public void MyProgram(ILogger logger) { _logger = logger; // rest of your init code } You define your interface ILogger like this: interface ILogger { void Log(string message); } And your logger classes: class FileLogger : ILogger { public void Log(string message) { //blah blah write to file } } class DatabaseLogger : ILogger { public void Log(string message) { //blah blah write to database } } Somewhere else you check whether you are in debug or release mode and pass the correct logger to the MyProgram constructor. You are just declaring that you expect any class that has a public method called Log that takes a string parameter called message. In your code when you want to log, you just call logger.Log(somemessage), and you don't care whether it's a file or a database logger. You just log, not caring about the implementation details of where the message ends. Let's say that later you are tired of opening the log file to read its contents and want to log to console, you just can write a simple class that class ConsoleLogger : ILogger { public void Log(string message) { console.WriteLine(message); } } and instead instantiate that when you are in debug mode.
Your explanation is good, but as you point out in your edit your weak point is they can all just inherit from Animal. I like to use automobiles for explaining how OO and interfaces work. So you have cars, trucks, buses, etc. that all inherit from automobile. Then you have a brand(interface), the brand can be applied to any car, truck, or bus but not necessarily every car, truck, or bus is of a specific brand. By applying a brand to an automobile it guarantees that automobile has certain features and properties.
&gt;Microsoft is about to implement "Default Interface Methods" Mutter, grumble, "get off my lawn", "back in my day", "that's what abstract classes are for!", etc. etc.
Thank you!
To over simplify them; they’re a way to make sure anyone coming along later and writing a new object that is intended to work with your generics follow certain rules so your genetics actually work and don’t crash my referencing a property or method that doesn’t exist in their object. You can combine them with constraints (on your generics) to make sure their object inherits from your interface. The interface will include a declaration to any property that your generics require to do their job.
Hey it is a '+' character.
Definitely don't want to call ```AcceptTcpClient()``` on a timer. Maybe try something like this, with added exception handling or course. ``` var servers = new List&lt;TcpListener&gt;(); // add some servers to your list // ... // called ONE time Parallel.ForEach(servers, srv =&gt; { var count = 0; while (true) { var client = srv.AcceptTcpClient(); count++; if (count &gt; 10) { count--; client.Close(); } else { Task.Factory.StartNew(() =&gt; { // do some stuff with the client // ... count--; }); } } }); ```
Yes! Duck typing! More on that here... https://devopedia.org/duck-typing
It's not a placeholder. It holds you to a contract where you have to include those methods from the interface being implemented.
The same example of doors could be used with basic class inheritance, what are the reasons to use interfaces over classes?
Holy crap that guy is good. 
I've always found interfaces make the most sense when you're introducing a similar behavior. Take `IDisposable` for instance, this is easily the most common interface in C#. `IDisposable` basically exists for objects who have resources unmanaged by the GC, such as open `FileStreams`, `Sockets`, and so on. The interface basically defines a common method, recognizable by most C# developers, that when you're done with the object, you need to call its `Dispose` method. When you get down to it, it essentially defines common behavior. An `IDisposable` object will always have a `Dispose` method. &amp;#x200B; What about other cases though, such as streams? Well, a stream is always going to have some form of a read, write, and close method, and we don't really care about what the source of the stream, whether its a network stream, file stream, memory stream, IO stream, or whatever. We always know that in order to interact with an `IStream` object, we will use the common read, write, and close methods (there are far more than that, but I just use them as an example). &amp;#x200B; The reason they're not defined by default, such as inheriting a base class would, is because we don't know the exact behavior, except that it has a method that performs similarly to others. A read on a NetworkStream is vastly different than a read on a FileStream object, thus we cannot define it in one fell swoop like we would in a base class. That's how it is for your IComparable, when you compare a mathy-object such as a complex number (real + complex), you're not going to have a similar compare to a DateTime object. &amp;#x200B; Hope that helps with what others put in.
I was admit tally slow to learn them as well, mainly cause you have to understand when to use them. For instance, if you had birds, bats, cats and insects classes. Well you run into issues with some of them flying, some of them crawling, and some being mammals and others being non mammals. Interfaces lets you have flight functions on some of them. If you were trying to solve it with regular inheritance you'd run into a lot of duplicate code.
[ListBox.SelectedValueChanged](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.listcontrol.selectedvaluechanged?view=netframework-4.7.2)
As mentioned in other comments you probably only installed the **SQL Server Management Studio (SSMS)** and not the actual **Database Server** component which is what does all the work and what you need to connect too with SSMS, which is just used for interacting with the server. As a side note though, once you do install SQL Server itself, if you leave all the settings as default and assuming your computers hostname is MyPc you would type either: MyPc MyPc\\MSSQLServer or just . to connect to the server
The reasoning is pretty sound though - it's all about forward compatibility - and that's pretty cool.
It literally is... It's frustrating to see them waste time adding features we already have...
&gt; Your call to AcceptTcpClient will not return until a client connects. Can you give me a little code snippet about the solution you are telling me about?
Inheritance ties you to an *implementation*. Much more importantly, people take inheritance too lightly at first. Inheritance implies an *is-a* relationship. Child Class C must work each and every place that expects a Parent Class P. This becomes exponentially harder to satisfy as you grow in complexity. For a great example, look at the Stream class in the BCL. It uses inheritance, and it *sucks ass* because of it. You have to check the `CanSeek` property before you try and seek, because the stream might not be seekable. Every. Single. Descendant. of Stream must not only implement all of the CanSeek-type properties, but must consider how people might be using those properties and precisely match the behavior of other implementations that can or can't seek. Can they seek forward but not back? Back but not forward? Do you fake a forward seek by buffering up the data? Can you read and write to the same stream? What if you're trying to implement a Stream that writes to device that has no way to `Flush` before all writing is finished? When you program to an interface, you are using a very small set of obligations. You avoid painting yourself into a corner by taking on obligations that you might not be able to meet in a sensible manner. If you're writing a generic `Sort` routine, you don't care if you're sorting carrots by size or CPUs by GHz or people by FamilyName. All you need is the ability to compare one to the other and get -something for A &lt; B, 0 for A == B, and +something for A &gt; B. You don't care what class the items you're sorting descend from, you only care that they implement `IComparable` and have a `CompareTo` method.
Inheritance ties you up to a specific hierarchy. Interfaces can be implemented anywhere.
Simpler example... So, you know you have a CompareTo method for sorting. That's all over the place. However, someone wrote a library that compares used cars. For IComparable.CompareTo, the result is only checked for &lt; 0, 0, or &gt; 0. For ICarAppraiser, the integer return value maps to an ID in a database that gives you a report on the two cars. Same method signature, completely different meaning. If you had **duck typing** like Python/JavaScript, you could try and Sort using a CarAppraiser. The result would be nonsensical.
Interfaces are VERY similar to base classes, except a base class can have actual properties and methods defined in it. An interface just forces you to implement its properties and methods in any classes of that interface. So it's basically the same thing as a base class, but a bit more flexible. Base class is good for something like animal, then you can have different types of animals that add extra methods and properties, but they're still animals so they can use the same basic functionality like eat, sleep, move, be born, die, etc... But you can still add properties and methods to an interface with extension methods. So in the end they really end up doing pretty much the same thing. I think the best way to look at it, is use a base class when you have a bunch of derived classes that do the exact same thing at the base level. But interface is usually used for things that aren't as similar, but from a programming or database storage standpoint, they all implement a lot of things that are useful to you as a developer. So like you could have an interface for all of your database model classes, called ITrackable or something, and it ensures that every derived class implements properties like Created on, CreatedBy, ModifiedOn, ModifiedBy, etc... Interfaces are often used for dependency injection, so you can write a class that does things with other objects. So you can build multiple classes that all do the same thing, but one pulls data from a production database, one pulls hardcoded data for unit testing, and another pulls from a development database for development. You code them all to an interface, and anything that uses them only pulls in that interface. Then, in various environments, your IOC container will automatically supply whichever implementation is appropriate for that environment. And the classes that utilize it don't care which object they're being fed at run time, they only care that they're being fed a certain interface. Or say you want to make a utility class flexible, so instead of coding it to only work with a single class, you write it around an interface that simply enforces a few specific properties and methods. So you could have totally unrelated classes, like RaceCar, Television, Rabbit, and PaperClip. But they all implement an interface called IDimensional that includes things like length, width, height, and weight. Then you could have a class that will pull in any IDimensional class, calculate its Volume, and even tell you the density of weight to volume. It doesn't care whether it's a RaceCar or a Rabbit, it will be able to do the exact same thing with any of them, because they all implement the same interface that ensures they are capable of supplying the information it needs to do its job. Interfaces are just another way to implement polymorphism, and make your program more flexible at run time.
They are fundamentally different things. You can think of inheritance as a "I am this thing" and an interface describes "I can do this thing". The door example probably wasn't the best to describe that. But also, you can only inherit from one thing but you can implement as many interfaces as you want. &amp;#x200B; Do you can have a Metal Door that inherits from BaseDoor, but you can also make it impliment things like "ICanOpen" or something like that.
I think the way Go does interfaces shares some similarities with duck typing, but I believe they are all sorted out at compile time rather than run time. &amp;#x200B;
You can make a comparision method without implementing the interface but you won't be able to use this method in methods which require IComparable type object
So, this was something really stupid. public SqliteContext(**~~DbContextOptions&lt;SqliteContext&gt; options~~**) **~~: base(options)~~** { } All this code is from EF6, EFCore is empty constructor.
Thank you very much sir, i just fix the issue and run my database, thanks again
Interfaces are a way to declare that a derived object can do what the interface says it can. 
Interfaces are a way to do duck typing while maintaining static typing. Effectively you define that a IDuck interface which has the methods Quack, Walk, Swim and you can treat anything that implements that interface like it's a duck. It's not true duck typing in that no, implementing CompareTo won't make something comparable*, but you get compile time type safety. *There is an exception, IEnumerables are sometimes duck typed. Foreach and collection initialisation is duck typed. 
You are correct, the behavior can be done without using an interface. That would make it **strictly coupled**, which means that one class depends on the other class directly. By wrapping your classes with interfaces then you can swap them out later because they are **loosely coupled**. The interface has just enough information for the compiler to safely use it as a placeholder. This gives you the freedom to take a piece of your program off and snap a different piece on at will. This way if you change from a database logger to a file logger, you only have to write the new class and inject it rather than changing thousands of lines of code. It's just a method of creating generic behavior so that you can deal with what happens when the requirements of the problem change later on.
There are a lot of really long winded analogies here, but interfaces just mean that an object must implement functions that match the signature of whatever functions are in the interface(s) it conforms to. This also means that other things with a reference to that object can treat it as an instance of that interface, and are guaranteed to be able to call the interface functions, regardless of their implementation. So you could for example have a list of objects that are all completely different classes but implement the same interface, and you’ll be able to call those functions without caring about their actual type. It isn’t inheritance, because no functionality is defined in the interface, rather it is *conformance*, as an interface is just a guarantee that an object will contain a set of functions. 
Best explanation, right here \^ Also, doing this means your crane drivers can operate every crane without having to have special training on the specifics of each one. If we have ten building sites, all requiring their cranes to perform the same action, we can use one crane driver to visit each site and perform that action (foreach loop). My addition just adds complexity though, yours is elegant and straight to the point.
Wait. Do you have everything in one big loop? &amp;#x200B; Generally programs with user interfaces are (mostly) event driven, what that means is nothing happens until a user does something. I.e. clicks on a button, types etc. &amp;#x200B; [Windows Forms Event Handlers](https://docs.microsoft.com/en-us/dotnet/framework/winforms/event-handlers-overview-windows-forms) &amp;#x200B; The easiest way in Visual Studio to create an event handler is to double click the object (i.e. button) and it will create it for you and chuck you in the correct position in code.
One way I've used to describe them is that interfaces can be used to implement "plugins." For example, in my own application, I have a couple of different algorithm implementations for analyzing the readability of a chunk of text: &gt; https://github.com/nazuke/SEOMacroscope/search?q=IMacroscopeAnalyzeReadability&amp;unscoped_q=IMacroscopeAnalyzeReadability ...the user can choose what algorithm they want to be used in the UI. Behind the scenes, the piece of code that asks for a piece of text to be analyzed, and presents the results, simply expects an object that implements the appropriate interface; it doesn't really care how that object does that internally. The same idea can be used any place where you have something that does something with a particular input type, such as an image, and returns a particular output, such as a transformed image; like with Photoshop plugins. 
Hey, I created a couple resources a while back that have gotten a lot of good feedback. Hopefully can help: &amp;#x200B; * [https://www.youtube.com/watch?v=IfKysjyXr-8](https://www.youtube.com/watch?v=IfKysjyXr-8) * [http://www.provausio.com/2015/06/13/no-really-why-should-i-bother-with-interfaces-interfaces-in-c-part-3/](http://www.provausio.com/2015/06/13/no-really-why-should-i-bother-with-interfaces-interfaces-in-c-part-3/) I may do yet another blog on it to illustrate it in another light which is from an architectural standpoint. In short, it is a great tool for adding a safety buffer between dependent classes and what uncle bob calls a "stable" class.
I think their question is not whether it’s okay to tightly couple the application (too early in their education I’m guessing if they are still learning interfaces). If I’m understanding their question properly, he/she is saying why make an interface if you want to make a method. You don’t make an interface just to make a method. The point of the interface is to make sure there is functionality there for shared similar behaviors amongst many classes. It organizes behavior and makes it easier for us to use with collections. You don’t make an interface unless that functionality will be used by more than one class. My explanation would be to think about when you would want an interface. The built in IEnumerable is a good example. You have all of these different data structures and they all need to have functionality for reading a collection of items. Yes each could have their own method to access their items one at a time, but by having an interface that they inherit from we know the purpose of the method even though it’s used by a bunch of classes and it makes it much easier for us to recall one method name for similar functionality. Can you imagine them each having a different method name that all did the same functionality? It would be a mess. Inheriting from an interface makes it easy to know what methods a class “must” contain. I would also say dependency injection and polymorohism are important reasons for interfaces, but that’s probably beyond the scope of the question. I hope that wasn’t too long winded. There are excellent explanations on here!
It's partially correct. It says that polymorphism is achieved in c# by overloading which is misleading. Overloading is a kind of polymorphism and Overriding is another.
It's .Net's flavor of component based web development. It simply uses the same pattern as ReactJS and Vue. I really hope the get it ironed out and converted into a real thing, and soon. So maybe they'll only be 5 years behind the curve instead of a full decade.
Fantastic answer! I responded as well but I think this is one of those things that doesn’t “click” until you get into dependency injection and testing and they probably aren’t there yet. During my education interfaces were the last thing to click for me just like OP.
Indeed. I did a project in Vue and it was 1000% better than ReactJS, but that flux pattern that you need. F. That. Noise. All the hoops you have to jump through too for keeping things reactive/observable. Ugh. Just gimme C#'s events and state management please. 
Another way to say what a lot have said already: A class is a template for how to do something. An interface is a template for what a class can do. Basically and interface is a promise of "these methods will be implemented in the object, so you can feel confident calling them". When you are able to feel confident calling a method on an object implementing IMyInterface, then it doesn't matter what the object is other than "I know it's gonna have the methods that IMyInterface has".
The problem is that you need to look the other way around. Think like you're crating a library that depends on somebody else implementation of the method, let's example that with the CompareTo. So, you just implemented the fastest sort algorithm in the world, but you don't want to limit yourself to compare numbers, and depending on the use case, you can't make a truly generic comparison method, so, instead, you make an Interface, with a method CompareTo which you can call independent of what object implements it, and let your co-workers implement the CompareTo. Now you have the fastest sort algorithm in the world, that can sort anything, not only numbers. See whats the point of it? Doesn't matter what type of object it is, as long as it is implementing the IComparable, you can call it on your unique sort method, to know if its smaller or bigger than the other, and you don't even need to stress yourself about how to compare it, let the others, the ones that know what their problems are, tell you how to compare their own objects. Thats what interfaces are about. If you start to make a truly modularized project, you'll notice that many times you'll relly on interfaces to make everything decoupled, otherwise, your module will need to have dependency to other modules to know what types they are implementing.
You can use it without problem just keep in mind that users can change it through developer tools. Don't use those values to validate user permission, etc. 
I really don't think you understand how licensing works. By your logic, I have permission to use an audio recording program to record every mp3 from Spotify, and then I legally own those MP3's. That is not how things work, I get it that you think you own media just because your opened a url but that is not the case.
I think a good way to understand how interfaces could be useful is going through your code and checking for methods that accept a `List&lt;SomeObject&gt;` and don't do anything but go over them with a `foreach`. E.g. say you have: ``` public void DoSomethingWithList(List&lt;SomeObject&gt; list) { foreach (var item in list) { // Do stuff } } ``` That works fine if you have an actual `List&lt;&gt;`. But there are many other types that can be enumerated over, like arrays, or results from LINQ expressions. If you wanted to call this method after e.g. filtering the list it would be like: `DoSomethingWithList(myList.Where(x =&gt; x.y == 1).ToList());` But you can change the signature of the method to: `public void DoSomethingWithList(IEnumerable&lt;SomeObject&gt; list)` And call it directly with any type that implements `IEnumerable&lt;&gt;`, e.g. with an array or: `DoSomethingWithList(myList.Where(x =&gt; x.y == 1));` If all you need from the list is `foreach`, then you don't really have to care if it's a List or not. You only need to care that it implements `IEnumerable&lt;&gt;`. Yeah you can convert any IEnumerable to a List with LINQ, but that can be quite expensive for larger lists
This question is vague and difficult to answer because you don't typically wait for anything when writing Windows Forms applications. You write handlers that fire when things happen; e.g., an OnClick handler that fires when a button is clicked. For instance, perhaps you mean, "I have a button, but I don't want it to be enabled unless an item in the ListBox is selected." One solution for that is to set the Button to disabled by default, and enable it when selection happens on the List Box, and disable it when selection is cleared from the listbox.
Multiple abstract classes can'tbe inherited simultaneously.
 If you have a class that implements interface IX, you can create a DebugX class that implements IX and takes in another IX on the constructor. This way you can capture or trace all calls to the original object, log or check them, and then pass the calls on through without affecting the program. An example with the logging code above, you could enable a '-debug' option that enables console logging in addition to the normal logging via: If(debugging) log = new DebugLogger(log) 
In pseudo-code: &amp;#x200B; `while (true)` `{` `//Next line will not return until a connection is accepted.` `await AcceptTcpClientAsync(listener);` [`Task.Run`](https://Task.Run)`(() =&gt; { ProcessClient() });` `}` This would be an infinite loop which accepts clients as they come in, and delegates them to the thread pool for processing. &amp;#x200B;
Also of note, when using an interface like this refactoring the code is a lot easier. If you say add a new function to your logger interface you now get compile time errors forcing you to fix all the loggers in your code. This forces you to actually think about that that new option means for each implementation. 
This can couple your interface design with your inheretance structure in a way that is unfortunate unnecessary. Perhaps a better example might be an lFlyable that has Altitude (), and a ISubmersable() that has a Depth(). You could create a Sub base class and a Plane base class, and then for a sub that flies you then really need a FlyingSub base class And C# doesn't allow multiple inheritance (for good reasons).
IEquatable&lt;T&gt; is a pretty good example of a good interface. A method that accepts IEquatable&lt;T&gt; as an input is saying "listen, you can be anything you want. A cat, a pizza, a river, or just an integer. I don't care. Just promise me that you know how to check equality against this type." The idea is that each class can have only a single baseclass, but when you're trying to create a general type that can work with a \*bunch\* of different things, then you can use interfaces to be as general as possible.
Are you familiar with C? Think headers, function prototype, whatever you want to call it. Interface just lets you pass around an object that guarantees whatever interface it implements, so that other code doesn't have to care what implementation/class that object actually is. I don't care what MyFancyImplementationClass actually does, I just care that it has the methods in IFunctionsINeed for me to use.
Yes! That's a huge benefit. Especially when your project has a lot of DI going on. Interfaces are what makes it possible to both write the adaptive code and also refactor it later.
We're saying the same thing so I agree with you.
It guarantees that objects of a particular class have certain given functions, properties, or overloaded operators. You may want this when you want to work on an object without actually knowing what its exact type is. (You just want to operate on some specific trait of certain things) Different objects can be made from completely different classes, but those classes can share the same interface, which will allow you to work with both in the same way regardless of anything else about the classes. Consider the concept of having a personal name. A cat, a dog, a rat, and a person can all be made from classes that descend from the Animal class, which display a certain trait by implementing an interface (say ... IPersonalNameable) - because of this, you find out the personal name of these things without accessing their individual classes. Let's put them into an alphabetised list by their names. In this case, you could refer to them as instances of Animal rather than IPersonalNameable, but what happens when you want to add an alien to that list? An alien isn't a member of the animal kingdom, they're part of some completely different kingdom of life. And you can't just give all life a personal name - otherwise, Mushrooms suddenly have personal names, amoeba have personal names, blades of grass have personal names, etc. - this is just silly. And what happens when we add other things? A sentient AI, a fictional character, a treasured flying red car named "Lola"? They're instances of classes completely and utterly unrelated to the Animal class, but they share a basic trait with them: They have personal names. Their classes implement IPersonalNameable, and because of that, you can arrange them longside all the other things with personal names in your list of things with personal names. TL;DR: Interfaces let you operate of objects of completely different and unrelated types, without necessarily knowing their type, but acting on a desired trait of them rather than on the type themselves.
I know IComparable doesn't make much sense on your class, because you have to implement it, but think about the methods that use it like sort or distinct. They can be reused by a list of any type, because they don't care about the type, they only care that it can be compared: colors, cars, shapes, beards; as long as it is IComparable, sort can rank them from least to most. You have to implement it, though, because there's no generic way to compare things. What makes one beard bearded than another? Only you can answer that question. As to why not just have the method, instead of also having the interface? In JavaScript, for example, you wouldn't have the interface. You would just have to know it should be there, and sort would check that it is defined, and then throw an exception of it isn't. But, that exception wouldn't happen till you ran the program with a bad object. With interfaces, the compiler can check before you run that anything you pass to sort is IComparable, and it can further check as you code it (in a proper IDE). So you might type a few extra lines (mostly autocompleted), but you save time preventing bugs you wouldn't discover until testing.
Oh cool. Neat.
Thanks :) I shall try it. 
Great explanation! Would you mind elaborating/expanding on why you hate the term “contract”? I was taught the concept in undergrad and IIRC, my profs used that term too.
This is a good explanation for beginners (so OP don't read my comment) . Interestingly C# can also do contracts without interfaces. The await keyword works with every class that has a method GetAwaiter. It just looks for it. I guess C# only needs interfaces if I want to store the contract in a variable. (parameters, fields..). 
Everyone's given very good example but I think that throwing in custom classes is unnecessarily complicated. Let's say you have a bunch of numbers and you want to find the maximum. Now, List&lt;int&gt;, int[] and HashSet&lt;int&gt; have no ancestor in common (except for object), so how do you write a generic method that can take all three? Without interfaces you would have to write a new overload of the method for every possible type. Instead, you can just declare that you need an IEnumerable&lt;int&gt; and you are done. You don't care what they *are*, you care what they *do*.
&gt; You have to check the CanSeek property before you try and seek ? You just seek and if the stream is not seekable it'll throw an exception. What you describe is necessary in cases where an operation can be implemented both with and without seeking, but it's, e.g., more efficient with seeking.
There is a way to secure the hidden fields, I will try to find it and add it to this post.
I would be better to expose a property on Form2 and set that.
It's worth pointing out that interfaces exist purely because multiple inheritance is not supported by programming languages like C# and Java. Interfaces are a way of doing multiple inheritance. In fact C# is rolling out default interface methods so that an interface will be able to not only specify part of a classes contract, but implement the details of that contract (further moving towards multiple inheritance).
&gt;listens for the next client. This solution isn't accepting new client, the code I used is private async Task AcceptTcpClientAsync(TcpListener listener) { var port = listener.LocalEndpoint.ToString().GetPortNo(); while(true) { TcpClient tcpClient = await listener.AcceptTcpClientAsync(); HandleClientAsync(tcpClient, port); } } private Task HandleClient(TcpClient tcpClient, string port){ //Handling client here } This code is not accepting new client for some reason, am I doing something wrong?
Is it bad practice? Absolutely. Efficiency aside, you're writing way too much code for what should be a one-liner. You should avoid accessing controls through .Controls (or Forms through .OpenForms) at all costs. If Form1 creates Form2, then you should remember Form1 by storing it in a field. Otherwise you should find a way to pass a reference of Form2 to Form1. How exactly depends on how you've set up your project. If you want to change the text of a Label, create a public property for it. The code for this could look like this: \[Form1.cs\] Form2 _otherForm = null; private void OpenOtherForm() { _otherForm = new Form2(); _otherForm.Show(); } private void OnClick() { if (_otherForm == null) return; Form2.LabelText = "Hello World!"; } \[Form2.cs\] public string LabelText { get { return label1.Text; } set { label1.Text = value; } } If you're not familiar with one of the concepts shown here, I'd highly recommend to look them up and not just copy/paste the solution.
One thing to remember is that you can't just flip it like this `if (args?.Length == 0)` because `0` doesn't match with `null`. So if you want to flip you need to use `if (!(args?.Length &gt; 0))`. 
&gt; You just seek and if the stream is not seekable it'll throw an exception. We'll just have to agree to disagree. I try to avoid exceptions if there's an easy way around them. The main point was that there's no way to tell the compiler "this algorithm requires a seekable stream", because `System.IO.Stream` is a kitchen sink base class that should have been split up into interfaces like IReadableStream, IWriteableStream, etc.
Hi, Check out our tutorial and open-source C# CQRS (Command/event-focused) testing library at [http://www.cqrs.nu/](http://www.cqrs.nu/) It also contains our approach to writing CQRS aggregates using event-sourcing
\&gt; your weak point is they can all just inherit from Animal. It's not a weakness. You can only inherit from one class, you can inherit from any number of interfaces. "Animal" might be a reasonable base class in this example, but imagine your want to seperate them out by carnivore vs herbivore vs omnivore. Suddenly you want your method to accept ICarnivore so that Tiger and Cat are accepted, but hamsters and dogs (assuming they're omnivores) are not. This simply isn't supported using classes. Unless you actually have a use case for using a base class you should not use one, don't follow OOP principles for the sake of following OOP principles. A legitimate reason for using an Animal base class is you might want a default implementation for "Walk()" or "Eat()".
Wow! This is so cool! Thanks a lot! 
Here are some ways [https://stackoverflow.com/questions/102567/how-to-shut-down-the-computer-from-c-sharp](https://stackoverflow.com/questions/102567/how-to-shut-down-the-computer-from-c-sharp) &amp;#x200B;
Hi again, Have you looked at this project : [http://www.litedb.org/](http://www.litedb.org/) Thats one point to start
Yup!
Just because an ex coworker overused it.
This! Loose coupling and high coesion
Indeed :) As with everything, you do the right thing in the right situation as there's never a one size fits all solution. Is this yours? The ConfigureAwait section is TBD. You can fill it in by saying (keeping in mind the above) use ConfigureAwait(false) for all the things :)
I see a lot of people in here mentioning contracts and IAnimal interfaces and similar things. I scrolled down quite a way and couldn't see anyone talking about the dependancy inversion principle (the D in SOLID). Interfaces are fantastic for removing dependencies from your code, and enabling you to write unit tests. Most tests I see in the wild are actually integration tests, because the code they are testing have dependencies on other classes, and the tests are testing not only the code in the unit being tested, but testing code in other classes. I'm not saying integration tests are bad, just that they are missing the point of unit tests (which is to test a single unit of code). As a basic example, say you are writing an MVC app and somewhere you use `HttpContext.Current.Request.Cookies.Get("mycookie")` Now if you want to write a unit test for that method you have to initiate a HttpContext object (which is a right hassle). Instead if you were to make an interface like this: `public interface IHttpContextWrapper { string GetCookieValue(string cookieName); }` and then inside the implementation you put your `HttpContext.Current...` call. You haven't changed much, but you have made your own code testable and not dependant upon something else. Your class you are writing is now dependant on `IHttpContextWrapper` which the unit test does not care about, and you are able to mock the output. You might say "shouldn't we be testing that `HttpContext.Current` works?" Maybe, maybe not. The point is that if you want to test that you can go and test it in a different unit test written for just that case. For HttpContext specifically I wouldn't bother, because it is a MS class that I was using for an example. For your own classes that you remove dependencies from you probably should be writing a separate test. If you have the time/inclination to read further about this, check out these links: [Short blog post about Dependency Inversion](https://blog.thecodewhisperer.com/permalink/consequences-of-dependency-inversion-principle) [Martin Fowler's long blog post on Dependency Inversion](https://martinfowler.com/articles/dipInTheWild.html) [Uncle Bob's design principles web site. Dependency Inversion is in the first table (ctrl + f DIP)](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod) [Uncle Bob's clean coders video on the subject.](https://cleancoders.com/episode/clean-code-episode-13/show) It's quite pricey, but I found this whole series improved my skills as a developer more than any other single thing.
Ah, the dreaded [loop-switch sequence](https://en.wikipedia.org/wiki/Loop-switch_sequence).
Does your school network use a Proxy or any sort of authentication?
Have you made sure to check that the `http://api.icndb.com/jokes/random` is accessible at school? It could just be that your school network filters it out.
Yep it works through browser, once used in code it its blocked. Thats not the only API that is blocked, just used that in the example cause its easy to use.
If it works in a browser but not your app then my guess would be proxy. Check you browser settings. 
Try to use Rider. Our team successfully migrated from VS 2017. It better
I'm enjoying this so far. Looking forward to the VS Code version as well; I really like to theme them in the same way as I think it reduces the mental shift when using different IDEs.
Cross origin resource sharing issue maybe? Are you hosting the API?
I've been there. Its simpler than you think. You use an interface when you only care about the function, and you don't care what class its a member of. Imagine you're a manager at a small business and you need to be able to print some letters that go out to customers. Your business is too small to justify a print department, so you go to kinkos. Now, how do you interact with kinkos? Do you tell them what kind of printer to use and how to do their markup and what ink is best? No, of course not. But let's just pretend you did. You write up a contract with kinkos that specifies exactly what model printer to use (Epson 5000) and the name of the guy that should do the printing. This is strong coupling. The printing goes great with kinkos for years. But then one day a new print shop opens in town. They do better work in half the time and are cheaper. Nobody uses kinkos anymore. Your boss tells you you need to use the new, better print shop. You have one problem. The new shop doesn't have an Epson 5000! It doesn't have a print guy named mike! So you have to write up a new contract in order to use the new print shop. Again, this is strongly coupled contract. What you need is a loosly coupled contract. The contract should just say "[insert name] print shop will print letters". We don't care how they print the letters, and we want to be able to use the same contract (*cough* interface) for any print shop. In programming this is like the difference between kinkos.print() and IPrintShop.print(). We don't care what object does the printing, only that it has a print() function. If it has a print() function, then we will run it. We can swap out implementations even at runtime.
Not hosting the API. As I mentioned, it works on my home network but not the corporate network
The network might be filtering on http request header content also.
Hang in there! (I keep telling myself that.)
Of course, I will use enums, this only is a curious test
He does :) Did he do the first version of ASP.NET MVC too? It probably doesn't matter :)
No one is going to help you do your homework.
Nope
You haven't provided any details about what the problem you're trying to solve. What algorithm do you need to write? What progress have you made so far? &amp;#x200B; I don't want to make any assumptions but if this is for your homework, it wouldn't do you any good to ask somebody else to solve it for you. We can however, point you in the right direction or give tips on where to look
If you have questions or you stuck, just post them here and we will help you out our point toward the right direction - but as others said, we won't solve the whole task for you.
 extroverted perpetual chasm Foo number [ qty i := 0 aslongas i lt number [ communicate i i := i + 1 ] ]
Thank you for replying, i am only looking for assistance with parts of the assignment. Nb.when I complete the assignment I will have to explain how i did it to my lecturer
I jist need help with the part of the assignment im stuck on. N.b I will have to explain how I did the assignment to my lecturer after I turn it in
Post the part you need help on...
I would load up a copy of Wireshark and trace/capture the details of your HTTP request packet. Either that, or you can look at network tracing as explained in [this](https://docs.microsoft.com/en-us/dotnet/framework/network-programming/how-to-configure-network-tracing) article. 
What do you recommend?
It's not "the system" that rounding your numbers. `double` is defined in https://en.wikipedia.org/wiki/IEEE_754 and has 64 bits available, which gives a _finite_ number of floating points to represent an _infinite_ number of reals. This means that there are numbers, that a `double` cannot represent and this is not specific to `C#`. One thing that help you a bit when printing to number, and hence converting it to a `string` representation, is to use the [`G17` format string](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings#GFormatString) as it will include more digits.
When you say the project idea isn't there, I'm assuming you're waiting for the right idea before you start? Its probably better and more productive to build anything at this stage. Pick something off this [list](https://github.com/karan/Projects) and build it in C#. In fact, keep building from this list until your project idea comes to you. If you're driven enough, then your portfolio should grow pretty quickly, and that speaks for itself. It would demonstrate that you're driven, willing to try new things, tackle new challenges. It will also somewhat be **proof** of your knowledge base and in interviews you can talk about any challenges you came accross when building them. Without any code examples, its going to be a little difficult for any company or interviewer to justify considering you. Bear in mind, a lot of companies will already have a large number of applicants anyway and in the interest of time, will filter down that list. You want to make sure you're on the 'go ahead' list. And you'll also want the code/project examples to be of somewhat high quality with tests etc. I would expect anyone looking at your projects to look for those things. You sound pretty confident which is good, but code examples will definitely boost your chances. Good luck
Ok, I'll look it ty
Biggest differences between browser and code. \- Browser proxy settings - possible that it's configured for some form of proxy \- Browser packs additional HTTP headers - content type, accepts etc. Some intermediary may be blocking responses absent of these headers. Wireshark or Fiddler is your friend.
I'd like to add that interfaces are also very easy to fake. This is useful when writing unit tests. They are also commonly used for dependency injection implementations.
You can only inherit from a single class but you can implement as many interfaces as you like. Furthermore, inheritance tightly couples the subclass to the base class. Also, it is much easier to break the Liskov Substitution Principle (LSP) when using inheritance than it is when using composition (implementing interfaces), though you can still break LSP with interfaces. Interfaces allow us to produce *modularized components* that can be swapped out easier. They enable us to do things like "yeah, in production we want to be using an actual database, but while in development, we want to use this class that mocks the database so we don't have to stand up an entire database just for testing". Basically, interfaces also allow better *unit testing*. Others have given sufficient examples of using interfaces. I just wanted to emphasize important aspects of interfaces. It should also be said that one can go *overboard* with interfaces -- not everything should havr an interface.
Sadly my favourite beginners C# book was discontinued years ago. As a general rule I like books published by [Manning](https://www.manning.com/) and [Wrox](http://www.wrox.com/WileyCDA/). 
I had that problem - if your folder is a network folder that the program is running from it will be blocked - try running it from a usb or a hard drive instead. I used to get it to run from a mapped network drive but not if it was “my documents” folder mapped from the server!
Here, have an algorithm: private static Random rng = new Random(); public static void Shuffle&lt;T&gt;(this IList&lt;T&gt; list) { int n = list.Count; while (n &gt; 1) { n--; int k = rng.Next(n + 1); T value = list[k]; list[k] = list[n]; list[n] = value; } }
My second thought was CORS.
You seem knowledgeable about this subject so I have a quick question: &amp;#x200B; So, I have an issue not with understanding how or why to use interfaces, but with finding a situation where they'd actually be affective. I came across a moment where I was overriding a method in a class and the parameter for the method was an interface instead of a class or variable. And this got me thinking; Does that mean that any object that implements that interface can be accepted by that method? Say, for example, I have an interface: &amp;#x200B; `public interface ICar` `{` `//Whatever methods and properties and such` `}` and then a method like this: `public void RollCar(ICar someCar)` `{` `Console.WriteLine("The car rolled.");` `}` Can I pass any object into that method that implements interface ICar? 
Looks plausibly like Haskell
Worked some on it, as far as I can tell. https://www.linkedin.com/in/davidfowl
Can you explain some more about what you're trying to achieve?
I think you want something like: observableCollection.GroupBy(g =&gt; g.Code).Where(w =&gt; w.Count &gt; 1); That will take all the items and group them by `Code`, and then filter the groups that have more than one item in them.
Thanks, it helped solve the problem
where is the goddamn question gosh
Totally off topic: I've never seen that type of formatting. How do you feel about it compared to: var itemsView = CollectionViewSource.GetDefaultView(myObservable) { Filter = i =&gt; (i as MyObject).SomeProperty == SomeValue };
Rider would be best, I strongly recommend at least evaluating it for 30 days. If it doesn't convince you to spend some money on it, you can use SharpDevelop. 
I prefer the object initialization method you used in most cases. In this case, my formatting was from habit, because typically when I'm using the ICollectionView I'm often building the sorting, grouping, and filtering from view-model properties (meaning some things are multiple lines). The sorting in the ICollectionView is through a collection using the Add method, so that part couldn't be used there anyway.
I only code for fun with C#, so I doubt I'll spend the money on an IDE. But I'll check out SharpDevelop. Thanks.
That's not what they said. &gt; If you were to create a website that allowed people to download those songs from Youtube directly, THEN it would be against the law, because you are distributing that content through your website. In this case it may not be a website, but it's still a tool that allows people to download those songs from YouTube directly. In what way it gets executed doesn't matter.
It would probably never survive my autoformatting settings of my VS and R# setup.
You misunderstand. The reason that is a weak point is because it isn't obvious to someone who doesn't understand the purpose of interfaces as to why you wouldn't just inherit from Animal and bypass IAnimal all together. 
I have a function that pulls data from webpage A. Once executed, it begins populating a form on webpage B with the data it has pulled from webpage A. At one point, there is a dropdown box in the form on webpage B that has a slight chance of not having the same value that was pulled from the webpage A. In the event this mismatch does occurs, all of the available options on Webpage B's form's dropdown box are spit out into a listBox. How can I stop the function from doing anything else until a new selection is made in the listBox, and then continue running the function to fill out the rest of the form?
I have a function that pulls data from webpage A. Once executed, it begins populating a form on webpage B with the data it has pulled from webpage A. At one point, there is a dropdown box in the form on webpage B that has a slight chance of not having the same value that was pulled from the webpage A. In the event this mismatch does occurs, all of the available options on Webpage B's form's dropdown box are spit out into a listBox. How can I stop the function from doing anything else until a new selection is made in the listBox, and then continue running the function to fill out the rest of the form?
Removed: Rule 4.
Yes, this is a bad practice for many reasons. It is, sadly, a common practice featured in tutorials. That makes it a very valuable lesson about learning from tutorials instead of mentors. That said, it is only a "bad practice" in large-scale applications. That's why a ton of people working on small applications read it, try it, find it's a "neat trick", and never write an application where it becomes a problem. The key contributing factor to this tends to be, "They are the only developer on their team." When you work on a very large project, and especially when you collaborate with other developers, it is very important to make sure it is very clear how different parts of your program interact. The fancy term for this is "dependency management". It means that Form1 cares about the controls on Form2. If someone changes the name of `labelName` or deletes it, they might not realize Form1 cares. Because the dependency happens so indirectly, the program will compile. If there doesn't happen to be a manual test to notice this, the feature is broken and nobody knows. Customers are going to report the bug, and if only one person knew about the relationship then only that person might find the problem without hours of debugging. So that's the biggest smelly part. You want to make sure Form2 screams "some other form cares about this label, so if you muck with the label you need to make sure that label still works". That's how /u/NekuSoul's solution works. If you implement things that way, then someone who changes that label in a way that breaks Form1 will *also* cause the program to stop compiling. That tells them to stop and think about what they've done. If you want to stop there, you can. However, that's still not a *good* way to build applications. One day, you need to read about Presentation Model, a pattern that describes how other patterns like MVC work. It's never "too early" to start playing with it, and I think a lot of people are stunted because experts act like it's a very complicated thing that takes a lot of knowledge to understand. If that were true, then MVC wouldn't be very popular. When I first started learning, people repeated over and over how complex it was. It took me 6 years to try it. It turns out they were all bad developers, and afraid I'd make them look bad if I did better. I'm going to reply to this post with a very quick overview of how to use a "Presentation Model" kind of pattern to separate your UI from your logic. It is "overkill" for this question. But I find a lot of people never learn this concept. Windows Forms does not encourage it, but *literally every other UI framework* does, including frameworks older than Windows Forms. If you plan on a professional career, the sooner you learn about it the better. And you sure as hell won't learn it from WinForms tutorials. (I know this: I was a professional WinForms developer for years before I learned about this style of development, and now I'm much better at what I do.)
There is a pattern named "Presentation Model" that makes a simple statement: life is easier if UI code does only UI things and the rest of your code does logic things. To me that means dividing the app into 3 categories: * "Views" are your Form classes and custom controls. The ONLY thing they should do is handle events that tell them either to change properties on Models (discussed soon) or update the display. * "Models" are classes that represent your data and things you can do to it. No Model should EVER know ANYTHING about a View type like Label or Button. * "Glue" is the code you have to write so the Model doesn't have to know about the UI. It might be in its own class (true MVC dictates that), but sometimes it's just code you write in the UI if you feel like cheating. I'm going to cheat in this tutorial. So let's call my pattern "View Model Glue" or VMG. I like to start by talking about the Model. Right now, in your application, there is a String value that is represented by a Label on Form2. Form1 knows this String value exists and sets it. Form2 wants to display the value. We want a way for Form1 and Form2 to coordinate without knowing directly about each other and how they are put together. It ends up looking a little something like this: using System.ComponentModel; public class DataModel : INotifyPropertyChanged { private string _interestingValue; public string InterestingValue { get { return _interestingValue; } set { _interestingValue = value; // Glue: tell other code that the property has changed. RaisePropertyChanged(nameof(InterestingValue)); } } // Boilerplate glue helper: you will write this ten million times private void RaisePropertyChanged(string propertyName) { PropertyChanged?.Invoke( this, new PropertyChangedEventArgs(propertyName) ); } // Glue: this class tells other things when its properties change. public event PropertyChangedEventHandler PropertyChanged; } The `INotifyPropertyChanged` interface is important to every .NET GUI pattern. Classes that implement the pattern notify other classes when their properties change. You might notice this class is one property and I had to add 90% of the code just for the property change pattern. I told you that sometimes glue is ugly. Windows Forms does very little to help you here. Everything else has some helpers. What is important is we have what I said we needed: a class that represents the data both forms share, and a way to change that data such that every interested Form knows it changed. Next, it's best if we start with Form2: one thing you learn when using patterns is sometimes they change the order you solve problems. Form2's job is to display the value and change its display if that value changes. Again, we're going to have to write a lot of glue to make that work. Start by adding a new Windows Form to your project. Drag a Label on that form. Then add this code: using System.ComponentModel; using System.Windows.Forms; public partial class Form2 : Form { private readonly DataModel _model; // Glue (ugly): You need this for the Designer to work, but should not // use it in your program because you NEED to set the model. public Form2() { InitializeComponent(); } // Be careful to remember the 'this()': that calls the other constructor. // Forget that, and you won't get any controls. InitializeComponent() // is important! public Form2(DataModel model) : this() { _model = model; // Glue: listen for model changes and take its current values. _model.PropertyChanged += WhenModelPropertyChanges; label1.Text = _model.InterestingValue; } private void WhenModelPropertyChanges(object sender, PropertyChangedEventArgs e) { if (e.PropertyName == nameof(DataModel.InterestingValue)) { label1.Text = _model.InterestingValue; } } // Glue: When the form is closing, "disconnect" from the model since // it probably keeps living. protected override void OnClosing(CancelEventArgs e) { base.OnClosing(e); _model.PropertyChanged -= WhenModelPropertyChanges; } } I added a constructor that expects to get a DataModel. It could have been "easier" to add a property. Most people who use these patterns do not like making their models be properties, because then you have to remember to call the constructor AND set the property. It's easier to remember to call the constructor that takes what it needs. But we have some ugly "glue" here: the WinForms designer does NOT work if you don't have a default constructor. Frameworks like WPF and UWP have more clever workarounds for this, but WinForms is based on 1980s tech so you have to use some glue. Pay close attention to the comments. Anyway, after it gets its `DataModel` instance, it sets up an event handler for its `PropertyChanged` event. If you look at that event handler, it's not complex: when the `InterestingValue` property changes, the label is updated. For good measure, at startup we also grab the current value so the label doesn't show its default. The only other bit of not-obvious glue is the `OnClosing()` handler: since this form subscribed to an event, it should unsubscribe when it closes. If you don't do this, that event handler technically keeps the "dead" Form2 hanging around. And the next time the property changes, it will try to run the dead Form2's event handler. That will end poorly. So *always* remember to disconnect. (Frameworks like UWP and WPF so some of this for you in easy cases. That's part of why MS asked people to move to them 10 years ago.) Now we are ready to tackle Form1's list of responsibilities. It has to allow the user to change the String value. It has to create a Form2 and display it. That involves a little bit of glue to make sure the Form2 gets the right `DataModel` instance. So go to Form1's designer and add a TextBox and a Button. Then add this code: using System; using System.ComponentModel; using System.Windows.Forms; public partial class Form1 : Form { private readonly DataModel _model; public Form1() { InitializeComponent(); // Glue: to share with Form2, make sure this form has a Model // to share and listen to. _model = new DataModel(); _model.PropertyChanged += WhenModelPropertyChanges; } protected override void OnLoad(EventArgs e) { base.OnLoad(e); // Make sure Form2 is visible and // Glue: shares the same model as Form1. var otherForm = new Form2(_model); otherForm.Show(); } private void WhenModelPropertyChanges(object sender, PropertyChangedEventArgs e) { if (e.PropertyName == nameof(DataModel.InterestingValue)) { textBox1.Text = _model.InterestingValue; } } // Glue: When the form is closing, "disconnect" from the model since // it probably keeps living. protected override void OnClosing(CancelEventArgs e) { base.OnClosing(e); _model.PropertyChanged -= WhenModelPropertyChanges; } private void button1_Click(object sender, EventArgs e) { _model.InterestingValue = textBox1.Text; } } When it's created, it creates the `DataModel` it will share and subscribes to its changes. Why? Well, what if we add a third Form, and that one can also change the value? We don't want Form1 getting out of sync. So it needs to listen to the `DataModel` property changes and respond, too. You'll notice the `PropertyChanged` handler looks very, very similar to Form2's. Glue is ugly. We only put up with it because it makes it easier to grow. When the form loads, it creates a new `Form2` and gives it the same `DataModel`. Then it shows the other form. When the button is clicked, it changes the property on the `DataModel`. We know that will cause the model to raise its `PropertyChanged` event. That will cause Form2 to change, if it's still around. That's "it". That's all there is to Model-View-Glue, which is very similar to Model-View-Controller. The very obvious criticism is I added about 30 lines of code to a 10-line example and it "does the same thing". Here's the trick: the last application I worked on had something like 45 different Forms, some that shared some 30 different sub-forms, and there were at least 400,000 lines of code. Maybe only 20,000 lines of that application were "glue". That sounds like a lot. But without those 20,000 lines, it'd be impossible to maintain the application because it'd be very hard to answer questions like, "Is it OK for me to change this Label to a TextBox and let users edit the value on this form?". We'd have to manually test every feature of every form every time we made a change, and that would be impossible. So those patterns are for "larger" applications. "Larger" is very hard to define. A lot of "large" projects start with the expectation they'll never be "large". Then, when they realize they're "large", it's too late to change without spending a lot of time rewriting things. So in the end, it pays to follow these patterns for every application. This is especially true in every other GUI framework but Windows Forms. Windows Forms doesn't have any intrinsic support for this kind of pattern: it asks you to implement your own tools to help you manage it. But UWP and WPF have built-in tools to support their pattern (MVVM). And Objective-C from the early 90s onward had built-in support for MVC. Web development has traditionally been nothing but MVC. When you survey the professional landscape today, Windows Forms is the only framework that doesn't *assume* every application uses this practice. It turns out as ugly as "glue" is, it's worth it. Consider trying to write applications more like this, and less like what you see in tutorials. 
By the way, you said to ignore the `i as MyObject` vs. the `((MyObject)i)` code, but I thought I'd bring it up anyway. The reason I explicitly cast instead of using a checked conversion like `as` is, because it is truly an exception circumstance in this case and something I don't want to recover from. I know that everything in my ObservableCollection&lt;MyObject&gt; is a MyObject. However, it's possible that in the future my code gets changed. I want it to fail with a meaningful exception when that happens. As written, mine will fail with an InvalidCastException. Yours will fail with a NullReferenceException. To make your code safe from the NullReferenceException you'd have to write it as: Filter = i =&gt; (i as MyObject)?.SomeProperty ?? SomeDefaultValue == SomeValue Doing this protects you from the exception, but might result in confusion for future developers when they wonder why no items are showing in their list. An InvalidCastException is in your face and shows them that this code has a dependency that they just broke.
Do you mean that not all objects have a property called "Code"? 
So below is in my shared layout: &amp;#x200B; &amp;#x200B; and below is in the view for the app: &amp;#x200B;
So I have below in the \_Layout.cshtml: &lt;script src="\~/Scripts/jquery-3.3.1.min.js"&gt;&lt;/script&gt; &lt;script src="\~/Scripts/bootstrap.min.js"&gt;&lt;/script&gt; &lt;script src="\~/Scripts/jquery.filedrop.js"&gt;&lt;/script&gt; &amp;#x200B; &amp;#x200B;
You said windows forms in your title.. What tech have you used so we can help you with the best approach. MVC? ASP.Net?
Doesn't filedrop() alse require jQuery-UI next to vanilla jQuery?
Interesting, and something Dapper doesn't have. Now that you're not just passing through SQL, how do you handle different SQL databases? Also it looks like for Query&lt;Order&gt;(1) you know the PK, but in InlineMerge(order, o =&gt; o.Id) it needs to be specified? Is that just a //TODO?
I was going to try to test it later. What was the issue?
1. For handling different dabatases, we supported StatementBuilder that is extensible for different data provider. Foe now, only SqlDbStatementBuilder is supported (soon will include Oracle, OleDb, Postgre and MySql). 2. For Query&lt;Order&gt;(1), we have a first touch in DB to check PK, otherwise the PK identification will follow (PrimaryAttribue, Id, Class+Id, Mapping+Id). 3. In InlineMerge, if PK is present, then the qualifiers does not need to be specified (same goes with Merge).
From doc regaring the qualifier. “Note: The second parameter can be omitted if the data entity has a primary key.”
If you don’t mind using 3rd party libraries, you can also use ReactivateUI library. There is ReactiveList&lt;&gt; which implements all necessary -notify interfaces and can also be a source for IDerrivedReactiveList&lt;&gt;, which can be filtered, sorted and so on automatically and be always up to date with the original one. And there are a lot of other very useful things for realizing MVVM pattern in the “reactive style“
You can spool off tasks that run on a separate thread, that would probably be the easiest way to do it. I like this example from Microsoft's doc: [https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-based-asynchronous-programming](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-based-asynchronous-programming) I would put an infinite loop (like a while(true)) in the task and then it will run as frequently as possible. 
in Main(): while(true) { myStateMachine.MoveNext(); } I imagine that Unity's Update method does a lot under the hood, though. In a standalone C# project there is no concept of 'frames' unless you add a reference to a graphics library for which that term has meaning.
`if(args.Any())` Too, for a more readable version. Need to be `using System.Linq`
This is the correct answer. Keep it simple, use route attributes. 
The big drawback is that you can easily write expressions that compile fine, but will blow up at runtime.
Expression combinations are millions, so even EF could not handle all. In RepoDb, we handle the best and simple way that is usable to certain test case and common scenarios. Again, it is way behind than EF (of course). Good thing, the extracted SQL is optimal as possible to the best of our knowledge.
Does merge() work with relations? One-to-many?
I'm aware that it's in EF the same, and it's an argument against EF too. I prefer the F# solution, but unfortunately C# won't get such an amazing feature like type providers in many many years.
Hmmm, I find it hard. Is it possible in RawSql? The answer is NO, it only supports single table.
It's literally the starting point of my thread
Uhh... That makes no sense. It's impossible to handle most possibilities, because you can add basically any code. Including code that can't be translated to SQL.
Oh sorry, i missed your statement of converting to SQL. Of course, that is true. Most cannot be handled if we are to convert to SQL.
Sorry - I forgot that 🤥
Hello. I am .NET Consultant. Looking for remote job. Based in Europe but able to work with States. My strongest skills are C#, Azure, Reactjs. I really like functional programming and F#. One month notice. 
How is this different to Linq2Db?
It is a Micro ORM (Hybrid), and is a method based fluent ORM. Originally using dynamics, but we just extended it to Expression Tree. I hope you have the time to read the docs to see the other features. Btw, it has not fully support the IQueryable yet.
[https://andrewlock.net/resource-specific-authorisation-in-asp-net-core/](https://andrewlock.net/resource-specific-authorisation-in-asp-net-core/) &amp;#x200B; This may not be exactly what you are looking for, but he does a good job of explaining Roles, Policies, Claims, and Resource based authorization.
&gt;jQuery.UI.Combined? &gt; &gt; &gt; &gt;whats vanilla? Not seeing that in nugets? &amp;#x200B;
The spirit of your statement is why I didn't include any null checking; because the code doesn't make sense if it's the wrong type. Personally, I'm okay with the `NullReferenceException`; I don't think it'd be more difficult to track down or anything. It's probably a slightly more cryptic error message, but I'll accept that trade-off in exchange for slightly less cryptic code. I've never found the explicit casting syntax very readable; all those parenthesis end up muddying the waters for me. :)
Yeah, I suggested this to OP last time he posted here already.
The fact that website does not host the content is the important distinction that makes it not piracy. The way it gets executed matters quite a bit.
DLR caches expression trees. And if you have some dynamic classes you can cache them too manually.
I actually just got done making my own implementation not even a few days ago as I’m working on an almost identical project. What I did was create an interface, and have a single Update method inside of it. You implement the interface and Update like you would derive from MonoBehaviour. Once done, when the program starts up it creates a list of every class that implements the interface by using Reflection. Then I loop through every class and find the Update method which gets added to a new list. I cache the methods only because reflection look ups can be quite costly depending on your projects size and how many classes and methods your inspecting. Once all my methods are cached I now create a timer inside of the System.Timers namespace, and on every tick, I invoke every method inside of my list of methods. Doing this not only saved me from having to manually create a reference to each class, but it allows me to create and use the Update method just like in Unity anywhere, just as long as the class implements the interface. You can also ditch reflection and perhaps and the instance of the class to the list using the classes constructor and removing it in your classes finalizer. Just thoughts for improvement because Reflection isn’t the best.
Find problems that are interesting to you and solve them with code. For example if you have a hobby or some subject of interest create a website about it. Work on it daily. 
1. Besides exercises, play with the language yourself. You're struggling to develop a mental model of programming, and not everybody does that using exercises only. Do what kids do: play around with it, automatically developing ideas about how it works and then testing them immediately. See what happens when you do something a little differently. Try to come up with little projects that only require things you already know, and then see how you can improve them any time you are learning about something new. 2. Don't just use one book. There are lots of beginner's tutorials out there. Maybe other ways of teaching work better for you. 3. Watch some YouTube videos about topics like computer architecture, how CPUs work, how assembly / machine code works. You don't have to be an expert in it, but it might be useful to understand a bit about what programming actually does. 4. For a day, maybe try a different language. You don't have to learn it. But those little insights into what's some quirk of C# vs. what's common in most languages may help you too. Here's the most important thing about programming: it's not 100% a tool for solving problems in a straightforward manner. If it was, it would have been automated a long time ago. You can't just know everything about C# and then solve any problem. You have to act a bit like a scientist who studies some strange new phenomenon. And like an artist who accumulates a bunch of tools and techniques in order to create better and better things. The exercises are just for testing your skills. If you keep forgetting things, revise. Make a list of concepts that you've learned, and then go through that list at least once a week or more. Only cross things off when you can't forget them anymore. Even better, keep using as many of these concepts in your toy projects and exercises as possible.
Now the fun part...locking her down ;-)
Don’t ever feel bad about going back to chapters to look at stuff. There isn’t a day that goes by where I don’t need to look something up. Documentation is there to free your memory for more important things. Eventually you’ll pick up most things but no one remembers how to do everything all the time. We all forget some order of declaring something or the same of some method we rarely use. 
Shouldn’t be too trivial. Only allow one client, all other clients get booted if trying to connect. And any client that does connect must pass a hashed key to the server, if the two keys don’t match, disconnect the client. If the client that connects does not deliver said key within 5 seconds, disconnect the client. But I don’t need to lock this down thankfully, it’s meant to be open for all to view what’s going on. The server can only send logs, clients can only receive them. And only one client may be connected, but you can view these logs using any computer on the same network. I was goi g to go for an internet based approach but figured that’s pretty overkill and could potentially be annoying as some users may be required to port forward just to view logs.
Can you give us some examples of the exercises you are struggling with? 
Can you dynamically combine expressions with this? The examples are all statically typed in structure (I understand there are no issues changing the lists, not what I'm getting at here). I just wonder if you run into the "Node type Invoke() not supported" exception when you try against an actual SQL context, i.e. not just a unit test. Even if each expression individually is fine, i.e. simple equivalence, like, gt/lt, etc. Not talking about abstract methods. ex. Expression&lt;Customer&gt; exp1 = c =&gt; c.id &gt; 0 Expression&lt;Customer&gt; exp2 = c =&gt; c.Name == "John" (both valid for SQL). But if you do something like this: if (lookingForJohn) { exp1 = exp1 &amp;&amp; exp2; } context.Query&lt;Customer&gt;(exp1); Does it chooch? 
There is a really funny comment on stack overflow by one person who tried to upvote the answer he gave to a question from years before. It's like anything man. Repetition. Repetition. Don't get discouraged. Your foot's in the door. Just keep hacking at it til it makes sense to you. It would be helpful though, if you put up an example so people can give you something better and more useful than generic platitudes.
I convert expression trees into internal objects ‘QueryGroup and QueryField’. That makes my life easy, it is suit to our design. Same goes if you use dynamics. The cache layer for now is at ‘QueryGroup’ layer. If you go to the bencher, this ORM is the most efficient, least memory usage just next to hand-coded (manual mapping) which is cannot be beaten as per FranzBouma. But definitely, 2nd layer cache for ‘Expression&lt;Func&lt;TEntity, TResult&gt;&gt;’ will soon be places. Thanks for this.
You can use the RawDataAccessBencher of FranzBouma, this ORM embedded there. I hope no one will kick my ass here, the last time Franz run it, RepoDb was in the top 1 to top 3 in the list of. - Set Fetch - Set Fetch - Memory - Individual Fetch - Individual Fetch - Memory Link: https://github.com/FransBouma/RawDataAccessBencher/pull/42#issuecomment-420193825 Insert was not yet introduced in the bencher as it was a new feature as well (as per Franz).
Right, I just ran into this while trying to build a search API, where the consumer will pass in any of, say, 5 optional parameters, and I wanted to have a single .Where(exp) where exp was built rather than the combinatorial set of queries in my repository based on what was actually provided. This seems like a common problem. There's an expression visitor solution for this that survives Linq2SQL by basically "compacting" the expressions, and you can build a builder for it, and you end up with something like: So controller/business layer would call something to do this for you: var builder = new MyCustomerQueryBuilder() .WithName(query.Name) .WithBirthDateGreaterThan(query.Date); if (query.RelatedPerson?.IsFriend) { builder.WithFriend(query.friend) } var exp = builder.Build(); then pass the exp to the repo: customerEntity.Where(exp); //runs fine Really has nothing to do with if each expression is supported by the ORM or not, but the fact there's an implicit Invoke() on Expressions that bombs during Linq2SQL translation as the Invoke itself is unsupported for fairly obvious reasons.
I find sometimes that it helps to write out the pseudo code. First you want to analyze the problem and figure out the logical approach to it and then you just incorporate it. If you can't figure out what is the problem, then it's hard to come up with the solution. 
Fair enough, neat work either way! 
Thank you man. Cheers!
Thanks. I’ll check that when I get back.
Ofcourse, some examples: (btw this is chapter 4, making decisions) 6: Account Number sometimes contain a check digit that is the result of a mathematical calculation. The inclusion of the digit in an account number helps ascertain whether the number is a valid one. Write an application named **CheckDigit** that asks the user to enter a four-digit account number and determines whether it is a valid number. The number is valid if the fourth digit is the remainder when the number represented by the first three digits of the four-digit number is divided by 7. For example, 7770 is valid, because 0 is the remainder when 777 is divided by 7. &amp;#x200B; Still on this problem 3 days later. Today was a rough one, pretty much just gave up and decided to take a break from it. Could care less about the grade at this point, just want to understand it. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Informative, thank you for taking the time out to shed some advice. I've edited my post to share some exercises i'm struggling with if you would like to check them out.
That makes me feel better thank you. I feel so dumb when the other student next to me gets it in a snap, and I'm left staring at my screen like I've gone half blind. Although he has been programming for years, where I've only been at it for a few months. I've edited my post to share some exercises i'm struggling with if you would like to check them out.
So the problem can be broken up into parts 1. Obtain the input from the user 2. Validate the input 1. Split the input into the first three number and the last number 2. find the remainder of the first three numbers divided by 7 3. Compare the remainder to the last digit 3. Do something with the validation result. Return error to the user if its invalid? Where abouts are you stuck?
I've edited my post to share some exercises i'm struggling with if you would like to check them out. Also, I may just look into a different language. Maybe it will bring some things to light. Good advice, thank you.
I've edited my post to share some exercises i'm struggling with if you would like to check them out. Thank you for replying and for the encouragement.
Logical thinking is hard for me. We actually started with flowcharting and pseudocode at the beginning of the year. They both were hard for me, but not near as hard as the coding now.
It's hard to say? I do great on my tests and other things. When it comes down to remembering things, understanding what to use, when to use it, and sometimes blatantly understanding the code itself is where I go south.
First of all, don't worry. Even more seasoned developers such as myself struggle sometimes or forget about stuffs.The main reason is that there is so much to cover when programming that, unless you are yourself a machine, there is no way you can remember everything at any point of time. Throwing a few keywords here (just for illustrating, it's fine if you don;t know what they mean yet), when I am working on threading or concurrency issue, I am very focused on that area and at the same time I might forget other stuff such as string interpolation or maths. Even after almost 10 years of experience I find myself googling for some answers in problem I know I have already solved but just can't remember how to do it properly. That's normal and nobody should be ashamed of doing it. As others have suggested, class or standardized exercises will only get you that far. The best teacher is yourself. Do experiment at lot and don;t be afraid to do stupid things. Software development is one area where you learn more by making mistakes and unless you directly code without testing into a nuclear plant software, the worst thing that could happen is that you will inadvertently delete or screw up some data on your own computer (or the one from your school). Not an end of the world event. Now. What kind of self challenge can you do? Depending on your current knowledge, you might be able to do different stuff. I would suggest to start small and simple. Think of a application that is very clear in your mind and that would only have few features. For example a shopping list where you can add or remove items (the most contrived implementation is just a `List&lt;string&gt;`). Then try to extend and add features on top of that. Maybe add a date/time to the items and/or try to sort them by priority. Next, you are adding categories. Next, you are adding multiple users that can share those items or save it into a file, etc. Try to split your work into very small tasks that are self-describing and can be done in a reasonable short time (a few minutes to max a day). Good luck with your endeavors. And come back here later to tell us about your experience :) Cheers
No problem! Well for the first example you posted you can break it down as follows: 1) Get a number from the User and make sure its exactly 4 numbers. If it's more or less, or non-numeric then reject it. (the easiest way to check if its all numbers are to use int.TryParse(), it returns a bool if it was successful or not) 2) The second step is to split the input string into an array of separate characters (or chars as they frequently called). 3) Then you take the first 3 numbers in the array, convert them to ints, and add them up. 4) The divide that summed number by 7 5) Then compare it to the last number in the array. &amp;#x200B; I think the issue you might be having is step 2. Getting a number, splitting it into separate digits, and operating over them might seem a little difficult at first. But once you consider that it's just a string when you get it from the User that means you can split it into individual characters and then convert those into numbers. &amp;#x200B; There are other ways of doing it through something like LINQ which would require fewer steps but it seems to me the purpose of the exercise is to get you comfortable breaking down complicated seeming tasks into bite-sized chunks and to not over complicate things (which I still do sometimes...haha) &amp;#x200B; The second example is a little simpler than the first actually. Try thinking about breaking it down into steps as I listed above. Let me know what you come up with! I can help explain it a little bit too if you get stuck somewhere! I think it's important to try and step through one of them by yourself after checking out what I posted to reinforce it. Also explaining your thought process will reinforce it in your own mind too!
It's okay. Coding exercises are not always designed to only take a few minutes to an hour. Some take many hours, possibly even days. I once had a Java assignment that took 18 hours of total time, two 9 hour sessions to complete. The trick to being a successful programmer is not getting frustrated when something doesn't work or when you don't know something, and also understanding that once you learn how to make it work, you'll retain that process for similar problem solving approaches and processes in the future. Don't freak yourself out. The more you work at it and practice, the easier it becomes later on. These aren't simple math problems, these are complex puzzles designed to make you think. You will improve. A word of advice, start getting into the habit of writing down system requirements and planning the program out in pseudocode and flowcharting before building it. 
Sounds like you are having trouble with basic algorithms/logic and not the language itself. 
What is F# 's solution?
Type Providers e.g. https://fsprojects.github.io/SQLProvider/core/general.html
I would hit pause on the book and start looking at highly rated intro to C# videos on YouTube. Having someone walk through the problems could be a better method of learning. Also, don't be afraid to Google stuff. You might not be able to Google the entire problem question, but you'll definitely find luck if you search in parts. For example: 1. How to read user input C# 2. How to divide integers C# 3. How to calculate remainder C# 4. How to output to console C# Everyone learns at their own pace and things will click for at some point. If you're searching the internet to better understand programming, I'd say first start with these topics: 1. What is computer memory 2. What are variables in programming 3. What are loops in programming Keep practicing basic problems until it's too easy, then move up. 
There's a lot of good advice here already. My two cents as someone who's worked over a decade in the industry is that don't worry too much - everyone starts programming with similar problems you are now facing. In the beginning, you cannot reach very far and might get turned off easily and repeatedly, and that's completely normal. Some qualities, like patience and curiosity, will help you a lot through your career, but only after a certain amount of time and accumulated experience you start to really see what you're doing and how you should improve your approach and skills. I'd say focus on the things you already know and the things you want to understand and truly interest you. Also, like others have said, search and study more basic level stuff from various sources. If possible, try pair programming and sparring with others to pass your courses, no matter with what grades. One good thing could be to learn from someone experienced who could be your mentor. In worklife this is a pretty common practice for new developers. I'm not getting into the various coding principles, development phases or the like, because I feel you need more confidence first in just writing something and getting used to dead-ends and the process of rethinking and rewriting your ideas with better ones. Don't worry too much about the design phase before coding, but do try to write down notes and charts and whatnot that make sense to you. The more you write and play with everything, the more you'll learn. Everything new you learn will help you in the long road of growing up as a developer. Both resilience and rest are equally needed when walking on this path.
Well aside from Server Side Blazor going committed and switching from both modes is as simple as changing a line of code. They're betting pretty heavily on it. Add to that aside from Mono, CoreRT is also progressing quite nicely on their Wasm port but is focusing directly on AOT while Mono focuses on Interpreter modes and AOT side by side. The experimental flag is there since there's still alot of work on WASM as a whole that MS can't directly influence, they want to avoid a SilverLight situation of supporting something that browsers doesn't implement. WASM still needs quite a bit like GC or native DOM usage without JS interop to make the runtime being brought down leaner compared today which brings alot to support what WASM doesn't support yet by JS shims etc... The strategy their betting on as said by Dan which is the PM for the Blazor project, is that they'll commit with Razor-Components (Server-side Blazor) while both WASM and Mono / CoreRT matures. This way they can continue on building Blazor without any blockers on Runtime limitations and when the WASM Runtimes are mature we can have an easy migration path to Client side.
I'm hopeful that add from native browser debugging support is to have actual full Native debugging support using an IDE like VS / VS Code. At the moment while using Blazor I use Server-side for developing stuff since it has full .NET runtime debugging capabilities for VS then switch back to Client-side to check if anything broke. Luckily most of the time nothing breaks when switching, unless you use Server-side specific functions (e.g. File usage, IO etc...) or some weird errors regarding the IL linker. Overall the dev experience is quite good especially compared to most non TypeScript supported frameworks I work with. I don't have to worry about wrong type definition version used vs actual library version and missing intellisense on most types.
Is the remainder by any chance the thing you're struggling with? Because that's often why people fail that "fizzbuzz" interview question. All you need is the modulo operator: int remainder_is_two = 12 % 5; You can figure out digits of numbers that way too, but it's easier to just convert to string and then access the individual characters and parse them as numbers again.
You could simulate the idea of frames, by only updating the state machine every interval. Something like ``` while (true) { myStateMachine.MoveNext(); Thread.Sleep(17); } ``` To simulate roughly 60 updates per second. If updating is gonna require a non-trivial amount of time, you could pace it like so ``` var frameTime = new TimeSpan(0, 0, 0, 0, 17); var sw = new Stopwatch(); while (true) { sw.Restart(); myStateMachine.MoveNext(); var t = frameTime - sw.Elapsed; if (t &gt; TimeSpan.Zero) { Thread.Sleep(t); } } ````
Both exercises stumped you because they require you to figure out individual digits of integers (and the remainder, which you get with % as I explained somewhere else). Just Google how to do that and the rest should be easy. Remember, programming is all about "divide and conquer". You divide your problem into lots of small functions that you can implement, and when you get stumped and can't figure out a function you wrote like // Returns nth digit of an integer int GetDigit(int integer, int n) { // TODO } then you just Google it. If you don't know where to start, you're a beginner. If you're looking up specific problems on google and stack overflow, you're a programmer.
Ah thank you for the answers. I made it.
It's, most importantly, about understanding the problem. Once you do that, you can look up how to do those things in whatever language you choose. Let's take the number issue. You need to check a number. This means knowing how to read a number the user inputs. Do you know how to do that? Great, let's move on to the next step. You need to check the first three and last digit of a number. Can you do that directly? No. Numbers have no such concepts. This means you need some intermediate way to split the number and perform such operations. This one may not be quite intuitive so I'll spell it out for you: strings. You need to convert your number to a string in order to be able to read its component parts. So, you've converted your number to a string. Next, you need to split it in two: the number and its checksum. This means reading the relevant parts of the string. Once you do this, you end up with two strings. Can you perform mathematical operations on strings? No. Ok, time to convert the strings back to numbers. Now that you have two numbers, it's all a matter of finding out the remainder of the division of the first one by seven (hint: there's a method for this in C#) and comparing that to the second number. End of problem. As I said, more often than not it's not about understanding the language itself (although there can be some rare cases where you end up with "gotcha" situations) as much as it's about understanding the steps you need to take. Good luck, you'll get there.
SSRS, SQL reporting tool. It's in the Microsoft.ReportingServices.ReportViewerControl.Winforms nuget package. LocalReport.Render("PDF") should do it. Might have to also install the VS extension "Microsoft Rdlc Report Designer" on Tools - Extensions and updates to get a report as a new item option.
Yeah but that wont work for web though. Esp in mvc or . Net core
You can create a model class and pass it around removing need of direct references. I hope I understand the rules correctly. 
Main is static; GetAccounts is not. You need an instance, or to make it static as well.
Thanks!
Main is a static method. GetAccounts is an instance method. You can call GetAccounts either by converting it into a static method too, or by creating an instance of the Program class and then invoking the GetAccounts method on it. var p = new Program(); p.GetAccounts(); OR static void Main() { GetAccounts(); } ... public static void GetAccounts() { ... }
You generally don't make interfaces out of concrete concepts, like a car - no use having an interface. It should describe behavior instead. A car can be started, right? Well, so can a plane, and a lawn mower, and some random machine. interface IStartable { void Start(); } So now the function doesn't care if it's a car or a plane, or a lawn mower. It just gets something that can start and tries to start it. static void StartAllTheThings(IEnumerable&lt;IStartable&gt; things) { foreach(var thing in things) thing.Start(); } &amp;#x200B;
What you are saying pretty much defeats the purposes of not trying to reference the boxes. I would say you should attach the to TextChanged events of the text boxes. You would update some common data model every time the text changes, but only submit them when you get a click. You can also take advantage of data binding, which allows you to have certain controls that automatically update when certain properties are changed.
I think you missed the entire point of the reply - it doesn't have to be a web app. Just create a project that would help with a hobby, or just be fun. I don't know - a catalog of all your music with a way to add and remove from the list, etc. A calendar where you can save appointments. An image viewer. Just keep adding to the project as you learn more things. It's about practice. Things that stump you now will be easy later on. 
I think the purpose of not allowing direct references is to prevent coupling. Right now, your button click requires that those text boxes exist. If in the future you want to change them to something else, then your button click function will fail. On the other hand, if you just have the button click control some central model, then no matter how you change the text boxes, your button click code is not affected. The only code that needs to be changed is how the new controls properly update the data. This way the amount of code you will break or have to fix after every change is minimized.
PDFSharp and MigraDoc are pretty decent and easy to use. It's not .NET Core in itself, but you can find a fork and [accompanying blog post](https://damienbod.com/2018/10/03/creating-a-pdf-in-asp-net-core-using-migradoc-pdfsharp/) if needed.
a big thanks!
I'm not great at C#, even average is a stretch of the imagination. However, my advice on learning quickly from very limited experience: - go to meetups and talk about coding with people who know more than you - join some FB groups and do the same thing - try and find a mentor, someone who gets a kick out of you getting better is the key - go on Udemy and get a course. I started making games in Unity, this is something I'm interested in and could see tangible results from my lines of code. In your case find a course that covers something you're interested in with a good rating and student feedback. I hope this helps you out, it's important to keep it fresh but also repeat the same concepts as a form of revision. Everyone has a different learning type so you need to find what works for you. (I know that I would struggle to learn from a book.)
Thanks for the insightful tips, however how am I supposed to identify which text box it is,, age or salary without using any refrence to to the control or its properties? &amp;#x200B; When I click I want the age to send its data to compute age method and salary to the compute salary input.
Why do you want to abbreviate it though? &gt; because its a lot to type Which IDE are you using? Most, if not all, and especially Visual Studio offer great means for autocomplete purposes. You would probably just type _ass_ and have your variable suggested regardless of whether it is named `associationCookie` or `assCookie`.
Visual Studio 2017? I'm not aware of any autocomplete feature that'll help with naming new variables...
&gt;6: Account Number sometimes contain a check digit that is the result of a mathematical calculation. The inclusion of the digit in an account number helps ascertain whether the number is a valid one. Write an application named **CheckDigit** that asks the user to enter a four-digit account number and determines whether it is a valid number. The number is valid if the fourth digit is the remainder when the number represented by the first three digits of the four-digit number is divided by 7. For example, 7770 is valid, because 0 is the remainder when 777 is divided by 7. I think your problem lies with problem solving, not programming. Forget about programming for a second and think about how you would solve this problem given a pencil and a sheet of paper. &amp;#x200B; Spoiler: This is how i would do it: &gt;!1 Split the input between the first 3 digits and the last. --&gt; 7770 =&gt; 777 and 0!&lt; &gt;!2 Divide the first part by 7 =&gt; 777 / 7 = 0!&lt; &gt;!3 Check if the result is equal to the second part =&gt; 0 == 0!&lt; &amp;#x200B; After you have done that think about how you can solve these individual steps using C#. (Thats probably the easy part) Good Luck and keep at it!
Try `FileAccess.Read | FileAccess.Delete`. A rename is essentially a delete and create.
Using abbreviations is only acceptable if the abbreviation is **well known** in your domain. I'd argue that the abbreviation "ass" is not well known for "association". It'll increase the ambigiouty of your code and will make it more difficult to read. And remember: You read the code 100 times more than you write it.
Worked perfectly. Thanks! :)
Start with python, then go to c#... it lessens the chance you will get frustrated. My preferred language is c#, but python has been getting more popular by the day, so it’s a good stack to learn anyway.
Sounds tough. I'm about to have my first interview but wouldn't expect such specific questions either. Do you think it makes sense for them to search for people who are that proficient in these areas? Is it a requirement? Did they communicate that before the interview, for example in the job ad? Or maybe they wanted to stress test you and see how you react when asked about things you don't know.
I've been doing C# on and off for 10 years ish and thinking about getting a new job in the new year. Posts like these make me frightened to go for an interview because I still basically google everything and don't really have everything memorized. Im just very good at finding what I need to in reference material to give me hint to what to do.
The solution you provided helped a lot. Although in the `ListenData()` method, I was calling `AcceptTcpClientAsync(listener)` which didn't accept clients more than 1, I called `AcceptTcpClient(listener)`. The implementation for both methods is as follows. I don't really understand why `AcceptTcpClientAsync()` didn't work with `await` while `AcceptTcpClient()` worked. //This doesn't work public override void ListenData() { Action action = async ()=&gt;{ await AcceptTcpClientAsync(TcpListeners.First()); }; action(); } //This works public override void ListenData() { AcceptTcpClient(TcpListeners.First()); } private void AcceptTcpClient(TcpListener listener) { var port = listener.LocalEndpoint.ToString().GetPortNo(); while(!ShouldStop) { TcpClient tcpClient = listener.AcceptTcpClient(); HandleClientAsync(tcpClient, port); } } private async Task AcceptTcpClientAsync(TcpListener listener) { var port = listener.LocalEndpoint.ToString().GetPortNo(); while(!ShouldStop) { TcpClient tcpClient = await listener.AcceptTcpClientAsync(); HandleClientAsync(tcpClient, port); } } &amp;#x200B;
I actually makes sense to ask domain-specific questions and how to solve concrete problems. If you were only expecting language-level questions, then you were definitely not prepared. Consider the employer point of view. They are not looking for someone that is doing research on language theory or writing a compiler (unless that's what the job is). Although in your case, with only a few years of experience it would make sense to focus a it less on very technical aspect and more on assessing your overall knowledge and interests. With all that said, failing to answer a question doesn't necessarily means that you failed the interview. I usually ask some technical questions and how to solve some specific problems. But I don't actually care about the answer by itself. I'm more interested on the thought process. What questions the candidate is asking him/herself. And I largely prefer someone telling me "I don't know" to someone bullshiting an answer. Also consider this, lot of people forget but you are also interviewing the potential employer. If they ask you gently very technical questions, see that you could not answer, tried to help you or ask easier questions; it's good. It's probably a good work environment with good mentors. On the other hand, if all questions were tricky and/or if the interviewer was not nice or condescending, then you probably dodged a bullet: find a more welcoming opportunity.
Removed: Rule 3, spam.
I'' take it in account. I just give much more time and effort to learn C# language itself , and language agnostic skills like design patterns architectural patterns and a little bit data structures and algorithms .
I recently had to implement a custom authetication lib in two different backends in order to integrate them (the backends used different technologies and their auth libs were incompatible). I had to know how the standard auth lib works otherwise I couldn't write a custom one to replace it. You generally don't need to do these things, but sometimes you hit edge cases. Also, knowing the edge cases of EF is totally necessary for developing any large-scale system. EF is highly abstracted, which is quite good in 95% of the time, but sucks in the other 5%... You better recognize that 5% when you see it! The employers can't actually ask all relevant questions in an interview, they have to choose some questions. I see nothing wrong in the subset of question they asked you. 
Look into this VLC wrapper for C# https://github.com/ZeBobo5/Vlc.DotNet Also for a video play a native toolkit like WPF/WF is a way better match compared with html5 and electron. 
Sounds like a load of crap to me, they just didn't want to give you the job so kept on going till you fail. No programmer needs to know that much , but hey they are the gate keepers and you need to forget about them and try and try till you find people who are looking for someone who can do the job and not just some bozo with encyclopaedic knowledge of useless stuff that never gets used. I have always solved every problem or task given to me, but cant go on a memorization marathon even if I had a chance for some idiot joker. I was mocked during an interview and my agent was told that I am no where near what they expected, strangely enough I had worked on sufficiently complex projects before and after being rejected by those morons, you can't just win every time, later I ran into some programmers who had left that organisation in disgust, now I couldn't be happier for their favour of rejecting me.
Those are more senior questions . The kind askedat the 5+ year mark imo.
You probably know more than you think if you were in an interview. Everyone Googles everything and the fact you know what to Google is actually a positive thing. It's hard to look stuff up if you don't have a base knowledge of where to start. And 10 years is a lot of time during which a lot of stuff changed. If you are planning to interview next year, start doing some prep now. It doesn't have to be endless hours, just read up on each bit and get a feel for it. Also, remember that not all interviewers will like you and that the questions they ask can be a crapshoot. The important thing is that you take away something positive from each interview and don't get disheartened. 
https://github.com/videolan/libvlcsharp/pull/20
A little tip, if you have multiple `using` statements immediately following each other then you don't have to nest them: ``` using (FileStream fs = new FileStream(@"Path/To/File.txt", FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) using (StreamReader sr = new StreamReader(fs)) { ... } ``` 
I just went through a round of interviews and I studied for a good 6 weeks. I used multiple online interview learning sites and did hundreds of coding and system design practice problems until I could do them in my sleep. Totally worked and I got offers from everywhere I interviewed. You can’t just waltz into an interview unprepared anymore, even with years of experience. If have 14 years of experience and still had to study.
That's what sucks about most books and online courses, they never cover that 5-20% of a technology that would include edge cases and gotchas. Unless you run into the issue, a blog post about it, or know what to look for, you won't know about it. I'm not sure that even Microsoft documentation mentions these. I often have to provide feedback about the documentation and blog posts that leave out details. The response is always "this is not meant to be a comprehensive guide, but more of an example of what it can do", or whatever. You're on your own in many cases.
Can you recommend any sites in particular?
It reminds me of dating. You can become bitter and question yourself about why some girls are rejecting you, or you can just accept that the chemistry and specific requirements on their list weren't there. You learn and grow into a role, or just wait until the right role comes your way. You need to change into the type of developer that can land a certain job you want, or there's no reason why they would lower their standards to be with you. Be honest with yourself. But like dating, you'll run into jerks.
I'm the same as you when it's about writing some SQL queries. When it starts to be a bit complicated I just couldn't figure out even by searching and searching on internet. For your exercises, read and implement them is inverse order! Start by coding the end of what the exercise says and then follow back to the top part. You should think how to write the tiniest parts first. Forget about the bigger picture. At the end, all your tiny pieces of code will stick together into medium pieces of code and finally all your medium pieces of code will all fit together to create the big picture! Think for example how over the years we arrived at a result of displaying a video on a computer screen? What code do you need to write to achieve that? Break that ideas into many pieces and daw the tree in your mind. You'll at the end arrive to just display a single black pixel on the screen (and we could actually go even lower). There you found it! You should start by creating a function that can display a pixel on the screen! Nothing more! Only after you can go one step higher and create a function to display a line. It sounds a bit ridiculous to create a DisplayPixel function but without it, it would be impossible to watch movies on a computer. So go ahead and Google "how to get remainder C#". Because yes, don't forget about it, internet is here to help you. It's not cheating. Google changed the way our brain works. We don't learn things by heart anymore but we learn how to quickly find what we want using Google. It sounds scary but that's the truth. There are several simple things in programming, I've used them countless times, but still I can't remember them exactly, every time I have to Google it. But it doesn't matter because I know I can find the answer in less than 10 seconds. That's enough to reach my goal which is: doing my job. Moreover with C# and the .NET framework, you have access to countless APIs, each with it's own specific usage. You can't know them all it's impossible. You will slowly discover them as you Google some problems and find answers. Even in 30 years from now, I bet you won't know all the APIs provided by C#/.NET Now I arrive at the part where some might disagree with me, it's just my opinion. You're in a 9-months studies, not a PHD. They don't teach how to become a data scientist but simply the basis of programming. I've a master degree in computer science and hell yeah I completely forgot all those kinds of sorting. Like sorting an array with the bubble algorithm and so on. I'm a web developer, I don't need to know that. In my everyday job I'm not manipulating numbers, but most of the time transfering data to/from the database to/from the users' browsers. So if after 3 days you still can't figure out how to solve your matching digits problem, I'd say go ahead and Google it. You'll see that most of the time, you'll have to adapt the code you find on internet to fit your problem. 99% of the time you won't find that magic piece of code you can just copy paste and it works. You'll almost always have to understand the code and change it a bit. When my friends ask, what is my job exactly, I answer that most of the time it's simply copy pasting code from internet. The real skills is how to copy paste them in a way that at the end you arrive at the desired result. It's a big puzzle with tons of pieces. It's up to you to create the image you want with them. Sorry for this big text, I'm trying to explain the way I feel it. As I said, some might also disagree with me...
Programming isn't about memorizing information, it's about knowing how and where to find said information.
First rule of programming, try to divide the problem in smaller problems. For your exercise 6 for example, you can divide it like that: 1: Ask for user input 2: Validate Now, what each of these points mean and how to subdivise them? ----- 1: Ask for user input You can use Console.ReadKey or ReadLine. ReadLine is more convenient. None of these will verify that the user enters only digits, and only 4 of them, so you need to check the input's format. Also, what to do if the check fails? You need to return to the start of your "ask for input" function. We'll use a while loop coupled to a "formatOK" boolean. Now, for the check itself, you can do it on the spot or create a function. The latter is cleaner, more readable, so we'll do that and create a "bool CheckInputFormat(string input)" function. In your Main function: 1.1: Create a boolean variable named "formatOk", set to false originally 1.2: Create a string variable named "userInput", set to string.Empty originally 1.3: Start loop: while (!formatOk) (as long as the format is not OK, we'll ask for a new input) 1.4: In the loop, ask for input (Console.ReadLine) and store the result in a string variable named "userInput" 1.5: Still in the loop, call CheckInputFormat(string userInput) Out of your Main function: 1.6: Create a CheckInputFormat function: it will return a boolean (which should be true if the format is OK, false otherwise) and take the input (which is a string) as a parameter 1.7: Check the length of the input; if it's not equal to 4, return false 1.8: Check each letter of the input; as soon as one of them isn't a digit, return false 1.9: If you reached the end of the function without returning false, it means the format is OK, return true To check the length (1.7), simply do "if (userInput.Length != 4) { return false; }" (with proper coding style of course, indentation, line breaks...). To check each letter being a digit (1.8), you can use the aptly named foreach loop; it will convert the string into a char array on the fly (basically), allowing you to check individual characters. For the check itself (if the character is a digit), there are myriads of way, some good and some bad, so I'll just use one arbitrarily; verify if you learned a method yourself in class, and if so, use it. foreach (char c in userInput) { if (!System.Char.IsDigit(c)) return false; } There you go, half the exercise is done. ----- 2: Validate It's actually the easy part if you ask me. **You'll place the code at the end of your while loop**, so you'll be able to test multiple input one after the other without having to restart the program; it doesn't seem like it's required, but it's a nice touch anyway. You really only have to know about **the modulo operator %**. It basically solves your exercise for you, because it returns the remainder of the division. You just have to extract the last digit of the input and perform an equality check with the remainder. How to get the last character in a string? Simply use the string as a char array, and use its length to know the index of the last element in the array: char lastCharacter = userInput[userInput.Length - 1]; // arrays start at index 0, so we need to put -1 here to compensate Now you just have to validate the input, check if the remainder is equal to this digit; but wait, this digit is of the "char" type, you can't compare it to an integer. You just have to convert it to an integer then; luckily, there's a built-in method for that: int lastDigit = System.Convert.ToInt32(lastCharacter); Let's check and display a message to the user depending on the result: if (userInput % 7 == lastDigit) Console.WriteLine("The number is valid"); else Console.WriteLine("The number is invalid"); 
&gt;Posts like these make me frightened to go for an interview Don't be. Interviews like his are the interviewer, not the interviewee. You'll inevitably come up against someone with 0 social skills who measures the world by how much their ego can face you in a power setting. The way you deal with those chumps is you roll them, turn it into asking questions about them and their work, their theories and opinions. You'll find noone ever asks what they think (because they are asocial assholes), and by using conversational skills 201 (thanks dale carnegie!) you'll walk out of the room with them thinking you don't know as much as them but you're an alright kid.
This. I wouldn't get bent out of shape over not knowing framework specific questions. I've always focused much more on critical thinking and problem solving on the interviews I've given. Frameworks are merely tools, that specific one isn't always the correct tool and it's usage is just memorization. Fundamental understanding of what they do and the problems they are solving, like the patterns they use, are far more important to me. But, that's just like my opinion dude. 
&gt; It's hard to look stuff uo if you don't have a base Yup. One of the things I say often is "I don't know what I don't know". For example, suppose I never heard of "ORM" frameworks like EF -- obviously, I could never know to google something like "which ORM should I use for X". We all will eventually come across things, sure, but we all have had that "damn it, I wish I knew that existed" thought. My most recent thought like that was when I discovered the `Microsoft.Extensions.Logging` NuGet packages *after* I came up with my own "common logging-framework-agnostic logging interface" which was, of course, `ILogger` -- I wanted a common logging interface for the purpose of being able to build adapters for various logging frameworks like NLog, log4net and others. Before that, I did some research into microservice architecture which, of course, talked about a "message bus/broker/queue" that integrates the services, which led me to the very easy to use, open-source and free RabbitMQ. You don't know what you don't know.
Yep, and even just being able to read the instructions for, for example, setting up RabbitMQ, you know enough that the instructions make sense. I used to struggle following instructions for putting app services on Linux servers. I didn't have the experience and kept forgetting what the file system looked like (And thank fck for Docker) :)
from my experience they dont want you to give the right answer, they want to know how you think, lets say they ask you what kind of database you would use on X framework, you could say, i don't know that framework specifically but know XYZ i would use that database for XYZ reason
I ask the same type of stuff. And yes, I ask until you fail. To see when and how you fail. To see what your limits are. You pick this stuff up with experience.
I think this is largely true but, with some things, you *should* know them off the top of your head. Furthermore, requiring a minimum level of knowledge in a heavily-used framework at your potential employer should be a reasonable constraint for the job. However, expected me to basically architect a solution to a complex problem using that techology in a *phone* interview would be a bit over the top I think.
For me it helped by breaking up pieces of your code in understandable human language first, and creating a workflow. For example, "first X has to give an input, with that value I will do some string manipulations, then an output has to be shown to the user". Then you can start breaking down these already broken down steps in code, what do you need for user input? Maybe a console app? OK, let's google "how to create console app C#" and start from there. How to get user input from keyboard? Google that, add C# or console app to the query to find a more specific answer. Etc etc. Eventually you'll have to also "get in the programming flow", know when to create classes, use inheritance, write functions that do only ONE thing, interfaces, etc... The best thing is to practice and just do it, this is struggeling at first, so was I, but eventually it'll become like learning and talking a new language. First you'll suck, you won't know the correct words, have to look up a lot of translations online etc. But the more you try talking, the more you suck at it but pick up on new words etc., the better you'll eventually get until it becomes like your mother tongue and can speak it fluently. 
&gt; or in which case EF faster than pure ADO.NET Little off-topic to the OP's concerns, but I'm genuinely not sure what they're shooting for if that was the question... EF is built on top of ADO.NET, the only times I can imagine an operation being faster is if the operation never actually hits the database at all (e.g. EF validation errors), or maybe if the query generation is generating better Sql than you yourself write (which is rare, considering EF's Sql is pretty naive). Overall EF has a lot of benefits, but performance isn't one of them (and certainly not relative to raw ADO.NET/Dapper/etc). 
That's why experience &gt; education. As a developer for over 20 years and no college degree, I built my career on identifying the edge cases, mitigating their impact and honing my noise filter when searching for solutions on Google. A large percentage of edge case solutions are found about 20 posts into forum threads on years-old locked threads.
This is purely subjective, but I disagree. One major project in which you implement EF and user maintenance would be sufficient to expose you to the answers to these questions. They're by no means peripheral or esoteric.
If this was on the job description then maybe that's just the sort of person they need. If not then I would probably not want to work in a place that deems ADO.NET vs EF "simple common knowledge". On the flip side if and when you do plan to go for more senior roles, questions about how you'd architect a system and what database you'd use, etc. will become more prevalent. Don't be disheartened! Keep practising and you'll get there.
Thanks for encouraging words
The only case I can see is in development time.
Hi! We are a software company based in Minsk, Belarus and specialize in Xamarin development. There are currently three Middle and one Senior developers on the bench. The rate is very good so if you're interested just let me know. :) 
If I were interviewing a C# dev, and they had no Entity Framework knowledge it would definitely be a red flag, unless it was someone fresh from school, with no real-world experience. The only other excuse would be them using some other ORM, and even then I'd ask for a reason they didn't just go with the de-facto standard. I also wouldn't want someone who just wastes time re-inventing the wheel, by manually coding their DAL (and it still wouldn't excuse their lack of familiarity with EF). As far as lack of ASP.NET experience, it would depend on the type of position they are applying for. If they were front-end desktop dev, then it would be perfectly normal for them to be only familiar with WPF. Then again, these days knowing server back-end is not a bad idea.
&gt; No programmer needs to know that much You're delusional
What would the Deserializetion like then?
I'm a senior, lead developer who hires junior, mid, and senior developers. These questions don't even come close to where I expect a senior dev to be. Very few developers are senior level at just 5 years. They might think they are, and with 5 more years of experience they might get there.
Interesting thing through 2.7 how many projects I should change to work with all of that stuff? And between when i said that I do not know EF that does not necessarily mean that I do not know literally anything. Basics EF I know for, example approaches(code first, database first) how to add, update, delete I know. Pure ADO.NET(DBConnection,DBCommand,DbUdapter etc).The point is this post was about that they went a little bit far about asking me 85 percents frameworks and overall they concentrating on them.
You know EF context caches retrieved entities, right? There's one faster scenario for you.
 List&lt;SerieList&gt; list = JsonConvert.DeserializeObject&lt;List&lt;SerieList&gt;&gt;(json); &amp;#x200B;
A senior developer needs to know everything OP mentioned like the back of their hand along with a whole lot more. Most people in this thread have a very skewed to the unskilled side idea of what constitutes a senior developer.
I came to say this as well. 
You are **still** trying to deserialize as a list, while your JSON **is not a list**.
With the exception of one company that specifically barred me from googling things during the interview, the interviews were pretty fair. Ironically I did not need to google anything for the other interviews...
I've been doing WinForms stuff for almost 6 years with the occasional web app. I'm sure that I am going to have to start from the bottom with whatever is the most popular stack at the time when I change jobs. .NET Core 9.x APIs with an Angular12 front-end probably.
You can trivially hold onto results from ADO.Net and re-use them at your pleasure. EF Context's state is just a abstraction that may be convenient (or a gotcha). I think using that to claim EF is "faster" is kind of silly, since that claim relies on several assumptions including: throwing away duplicate results in ADO.NET and not using something like AsNoTracking(), short lived DbContexts, detach, etc in EF. 
Sounds like they wanted someone who knows more than just the existence of code-first vs db-first. Can you competently discuss the trade offs and working differences between each approach? No one cares how long you've been working. They care about what you know.
The first ever! World's smallest 60W USB-C charger with 35% faster charging speed and 6 different connector tips so that can then power up 6000+ laptops!! What are you waiting for? Let's get a free one right now! [Just the size of 55cc shot glass!!!!!!!] Let's get a FREE 60w USB-C charger!!!!! Just found that there is a super cool thing which is pre-launched. This amazing USB-C Charger is only the size of a 55cc shot glass and ultra-light, Innergie 60c is the most powerful adapter that boosts power supply for all devices from 60W laptop to mobile and more. There is a campaign released and I want to invite you guys to help me get the free one. Also, everyone could join that as well. kinda like a great deal ehh? Hope all of us could win the free one. Good luck! This campaign will last from today to 12/09/2018 only. Don't let something slip through your fingers. Check out more if you want to know more: https://www.60c.myinnergie.com/or if you'd like to do me a favor and credit to me by clicking on the link and subscribe: https://www.60c.myinnergie.com/?refferalFrom=e03qp271 I'm ganna say thank you in advance here:))
Yea that's what I was thinking too. Like I can tell you about SOLID or what technologies I've been exposed to, but when it comes down to it it will depend on how the application you're working on is written and if you can adapt to it. 
&gt; The point is this post was about that they went a little bit far about asking me 85 percents frameworks and overall they concentrating on them. Why wouldn't they? If the position is going to be heavily utilizing those frameworks, it makes sense for them to be looking for someone with a strong familiarity with them. I'm assuming they were asking about more obscure frameworks than EF, as I would expect any mid level engineer to be quite familiar with it. 
 public List&lt;T&gt; SomeFunctionName(string q) { // Not searching. if (String.IsNullOrEmpty(q)) { apps = GetAdmin(); } else { apps = GetAdminByQuery(q) } return apps; } private List&lt;T&gt; GetAdmin() { // User is not an admin, limit selection to user's own applications. if (User.IsInRole(nameof(UserRoles.Admin))) { return db.Applications.ToList(); } return db.Applications.Where(x =&gt; x.Agent == agent).ToList(); } private List&lt;T&gt; GetAdminByQuery(string query){ if (User.IsInRole(nameof(UserRoles.Admin))) { return db.Applications.Where(x =&gt; { x.Name.Contains(q) || x.Surname.Contains(q) }).ToList(); } return db.Applications.Where(x =&gt; { x.Agent == agent &amp;&amp; (x.Name.Contains(q) || x.Surname.Contains(q)) ).ToList(); } I thought I'd give it a go. Try not to think about too many if statements if they're required but think about readability. Break down your code into functions with good names that describe what the code is trying to do. For example, I've had to read through your code a few times to figure out what you're trying to do, whereas the function name GetAdmin() can be easier to figure that out at a glance. &amp;#x200B; Also a good trick is to avoid else statements if you can, writing functions like this and *exiting/returning* early will improve the efficiency of your code overall. &amp;#x200B;
Look up the "CollectionView" and how to add a filter to it. You would add your observable collection to the CollectionView and register your filter. The filter is basically a delegate that gets called to decide if any given row should be shown or not, and you can use whatever logic you want to decide that.
Reading OP's post I'm guessing that the interviewer asked questions based on the his/her personal past pain-points. Sorry for the alliteration.
Eh, questions about ADO and EF are not senior level questions. I'd even say they're even slow pitches to mid level engineers. They are stack specific questions, though. So this company is obviously looking for an actual .NET developer, as opposed to say a Java developer looking to transition. 
These types of questions are generally prodding for a conversation, not necessarily a hard answer. They're designed to see if the OP has a baseline knowledge of the tech and can talk reasonably about it. I'd imagine what you said would be a sufficient response. 
You know you can select all the json and paste it as completed classes in VS?
OP stated this interview was for a mid tier developer. I'd expect a mid tier developer to be able to talk about EF and ADO.
It really is not fine. It has lots of unnecessary repetitions.
I agree - and add that abbreviations should just never be used. Even if it's a well known abbreviation to you and the organization, it likely won't be to some new guy that just joined. Then again, people lazily naming variables based on keystrokes is a huge peeve of mine. Every time I see an int i = 0 my eye starts twitching. 
Edit - paste special - paste json as classes
I think the concept you need for this task is *data binding*. You link the text boxes (or any other control) to the data model, so that when you modify the text in the box, it automatically propagates it to the model. Important question. Are you using WinForms or WPF?
No offense, but all you've really done here is move the messy logic from the main method to 2 separate methods. While this does pretty up the main method, it doesn't do anything for the overall complexity or structure of the problem. I also don't really get the use of generics here. You know the return type of all those methods, why not return it? 
This is what styles are for. If you want all your buttons to be 40 pixels in height by default you add &lt;Window.Resources&gt; &lt;Style TargetType="{x:Type Button}"&gt; &lt;Setter Property="Height" Value="40" /&gt; &lt;/Style&gt; &lt;/Window.Resources&gt; &amp;#x200B;
Ah, I'm just using this JSOn as a mock data source. I can't call an api from my network
&gt; Sounds like a load of crap to me What are you on about? If you were looking for a C#/ASP dev with experience you'd be an idiot to not ask about basic things like ASP, EF, ADO.NET, ASP Identity, Web API's, AutoMapper etc. Especially if those things were in the job description or if you put them on your resume.
&gt; You can’t just waltz into an interview unprepared anymore Yes you can, I just did. I got a large step up in salary too. It depends a lot on who you are interviewing with and what level you are interviewing for.
What are you talking about...
&gt; A rename is essentially a delete and create. Well, only as far as sharing flags go. Renaming an open file doesn't close it, for instance.
You can live-transcode any format to m2ts with h264 and aac codec, and make this available through a controller &amp;#x200B; eg /api/transcode?videoId=my-video-id &amp;#x200B; which again calls the ffmpeg CLI and streams the Stdout to the Response.Body Stream &amp;#x200B; Did something like that previously
Just give your variables full descriptive names. You only have to type the first few letters and autocomplete will do the rest. It makes your code much harder to read.
No offence taken. Prettying up the main method is the point. Its easier to read. &amp;#x200B; Never mind the generics, I just wanted to put something quick together. You can use the return types if you want. &amp;#x200B; OP is asking how to handle that logic without so many if statements. My point is that he shouldn't worry too much about them and improve it by breaking down the code into functions to make it more readable. I'm assuming that was his issue with it, otherwise its not that bad. I'm not saying what I've done is perfect, but its certainly less strain on the eyes. It also makes it easier to add or refactor as well. There is always room for improvement
I have 10 years of dotnet and two years of Angular. I flunked an interview so hard I almost showed myself the door lol. They asked me to live code in Typescript 'The elevator problem'. I nearly laughed at them right there because live code exercise are complete bullshit gauge of someones abilities. Anyway, I flunked it so hard I would have been embarrassed if the place wasn't such hell hole to begin with. I mean the manager was talking 80 hour work weeks. They have an R&amp;D team and a cleanup team. The R&amp;D does the fun work and throws it over the wall to the cleanup team to make sure the piece works cleanly and cursedly. What a trash job that would be! No inspiration! Bitching aside, HERE IS MY RECOMMENDATION. Write down every question you don't know and go home and study it. Do this for every single interview. Eventually you will have a better grasp on what skill sets people are looking for. Here is the thing. Some companies just need 'programmers' and some companies need specific skill sets to fill in the gaps they are missing at the time. I do a lot of hiring here and sometimes we just need devs who understand micro-services, event sourcing and queuing. Sometimes we need devs who understand EF, data models and 3 tiered applications. And sometimes we just need a developer with a broad grasp of concepts who can fill in the glue anywhere in the system. Don't take it personally, learn, and move on!
I personally don't see any reason to abriviate names at all. It's straight up lazy and makes the code harder to read.
It's straight up lazy tbh.
Thank you this is exactly what I was looking for
Do it in the database, if you can. blahblahblahyaddayadda... JOIN User_Role ur ON ur.RoleID = blahblah.RoleIDRequiredForAccessToThisData LEFT JOIN User u ON u.UserID = @UserID AND (u.UserID = ur.UserID OR u.IsAdmin = 1) All you should have to do is identify the user to the database and the query should filter it down for you. SQL is built to do this. C# is not. That's not to say that C# can't, but it's *not* the optimal tool for the job. But if this is a pre-existing query that you can't change, perhaps write a method that wraps up those ifs that you can call throughout the rest of your code as a one-liner.
Ya, I've hired SOLID, 4 Pillars, GOF OO Patterns guys before. Sometimes they are great! Sometimes they can't write an extension method for their life and generics are out of their grasp. I've learned to ask a smattering of framework specific questions to get a gauge on how much experience with "rubber meets road" and then I delve into the higher order theory so assure I got myself a thinker. 
Woe, woe, woe dude. Hold on. Did you just say studying design patterns are useless? Holy crap man! That's just terrible advice.... I mean maybe something like "Start with a framework and then ease into design patterns" would be OK.. but to say studying design patterns is useless is like saying studying Calculus is useless because Calc is just based on Algebra so you should study Algebra instead!
&gt; I'd ask for a reason they didn't just go with the de-facto standard. The answer from a person interviewing for their first mid level position would 9 times out of 10 be "I didn't pick it, a senior architect did".
So this doesnt actually work, you know that right? &amp;#x200B; In the original statement, when q has a value &amp; the user is not an admin, they have the agent filter applied. .Where(x =&gt; x.Agent == agent &amp;&amp; (x.Name.Contains(q) || x.Surname.Contains(q)) &amp;#x200B; Yours does not do this. &amp;#x200B;
Yup, I got to get a good grasp on what your capabilities are. OO Patterns and Programming Principals are great! You need those! But I also need to know if you can write a for loop, query EF and got a grasp of generics. I'm not interviewing a mid level guy to re-write our architecture, though your input is important, I'm interviewing you to crack out some business domain logic, implement some patterns, and write some libraries *using* those OO patterns and programming principals.
The issue with this is that if this isn't entity framework (and nothing suggests it is) then it runs 2 queries against the IEnumerable (maybe even the database). This is a performance hit.
Yeah one important thing is knowing how to efficiently self a scheduling problem offhand within 30 mins because the person who asked the question had the solution from looking at it for weeks.
He's using LINQ-to-Entities, and the filtering **is** happening on the database.
My mistake, of course it's supposed to be `IQueryable&lt;T&gt;`. Had that in my mind when I wrote the code, but meh.
But what if the model list you're listening to changes? For example, let's say the model list is in an object of a property that's on your VM. If that property changes, and you've implemented some kind of listener list that's listening to that list, you're now listening to the wrong list. This would be considered a nested property in XAML and, because data binding is smart, would change to the new list on the new object. But your listener list wouldn't because it's simply a reference and not a data binding. So now you have to keep track of list references and change them whenever the binding changes... That seems really error-prone. Is this really how people do it?
I know. I'm saying if it wasn't IQueryable it COULD have ran against the database twice, depending on the technology backing OP's code. If it's entity framework he would have been fine, but if not it can be a performance hit.
No, it couldn't have run twice. The enumeration is only happening once. The calls to where to not enumerate, they don't fire any queries, they just create a where iterator.
Yeah. I mean, fact is, you can't ever trust a resume, or a recruiter, or the person saying they know X. So, as an interviewer, we come with some basic knowledge about what you claim to be able to do, and some basic knowledge about what we want you to be able to do. And some more hypothetically basic knowledge about what we'd like you to do AFTER you do what we need you to do today. And almost nobody, I find, fits a mold of "mid", "senior", etc. Most seniors I know couldn't explain the difference between a LinkedList and a List. But many mid level people just out of CS class could. It's all over the map. So, I just ask questions, and we keep going deeper into a subject until you don't know. But literally everybody I interview is eventually stumped. EVERYBODY. That is to say, I have stumped every single person I have ever hired. Because eventually everybody hits bedrock, and my job is to figure out where that is, to see how you can fit in to the existing task, or your potential for growth into other areas. This last part I think is important: nobody ever knows everything. So, all interviews end up with somebody saying "I don't know about that." But that's not ruling you out for hiring, obviously. 
Its always been my interviewee strategy to focus on the abstract principles primarily and the language or framework specific constructs secondly. Any decent Software Engineer can figure out how to build something inside the confines of a language or specific dev stack given enough time. I think your strategy was right on and that job was perhaps not the most conducive position for your talents. Best of luck moving forward. 
&gt; or your potential for growth into other areas. This is an important statement. It really is important that I the seniorest engineer on the team understand where you need to grow. This is something I can help with! I can give you tasks in that area and guide you with some of my knowledge or my google foo arts or my books. I didn't ask that question in the interview to prove my superiority, I asked it so I can help you grow as a developer. Sometimes you don't know what you don't know until someone asks you about it. If you are talented and driven enough to get hired by me I can help round out your experience, given the project we are trying to complete allows for it. I also hope that you will bring something to the table to help the team round out our knowledge. 
It really depends on the company how in depth the interviews are. But one thing that helps a lot when you don't know, explain how you would figure out how to do it. Or how you would do it with your current framework experience. Also, after the interview, go do some research and answer the questions. It show initiative and proves you can do what we all do, research and learn. It's not all about the things you know, but how you deal with the ones you don't. It is hard to find new roles with little to no experience, good luck. 
It is generating the joins as shown above... Do you have any experience with LINQ-to-Entities?
At this point you have heard it all and are problaby tired of reading. Well read this last little tidbit from an someone who has experience on both sides of the table. At the end of an interview the interviewer will almost certainly ask "Do you have any questions for us?" This is your time. In your scenario you should say "Yes, I noticed you did not ask any OO pattern questions or OO Principals questions. Does your team implement patterns and use principals while architecture the code base?" Seed your questions with what you know so you can diver further into your own knowledge. We, the interviewer, don't know what you know... we are trying to figure it out... so give us a helping hand by putting questions to us.
This. This is what's frustrating about all the "when should you use ORM X versus Y?" interview questions, especially for something that isn't a senior-level position (which, with OPs 2.x years, I wouldn't expect). This has almost always been already-decided by either management, senior people, or you're just mostly stuck with what other people already chose.
Hahaha thanks for advice. As you said he in the end of the interview asked me about do I have a questions))And I instead of that question started to ask some dummy questions))
Thanks)
Forgive my ignorance here, but I'd like to learn about this. I clicked the link you indicated. It feels similar to types generated by various tools for C# (such as EF), except more robust in two ways that are immediately evident to me: 1. It's not simply a tool that generates classes; the metadata of the classes remains coupled with the source based on the configuration of the provider. That means data source updates don't require a manual code generation step. 2. There seems to be more robust IDE support for SQL constraints, so that invalid expressions (i.e. LINQ expressions that don't convert to valid SQL statements) can be flagged with warnings/errors. \#2 would be a huge boon for C#, especially when dealing with EF, and it strikes me as strange that there aren't tools to provide that functionality. As long as we're decorating properties to indicate primary keys, foreign keys, etc., why not use those decorations to resolve one of the biggest issues with dealing with EF? Also, are there are major benefits of type providers that I'm missing?
Agreed. This is a more abstract way of solving the problem, which results in less code and more maintainability. Need to add a 3rd filter? No problem. The OP code would have branched even more where as this is a simple flat addition.
Suggestion: The ID parameters seem predictable and a good candidate for defaults; I'd recommend adding overloads that assume an `int Id` field so that you only need to provide a lookup field if there isn't an `int Id` property for that object AND no other property is decorated with a `[PrimaryKey]` attribute. There's a chance you've done this already? I'm seeing this line: var order = connection.Query&lt;Order&gt;(1); And maybe that's what you're doing?
What? Whether that’s IQueryable or IEnumerable, it runs a single query. Both are lazily evaluated - they won’t run until the ToList call at the end of the function.
If you listen to changes to the model list, you have two choices when that list changes: rebuild the entire VM list on any change, which is the simplest and very reliable, but can be expensive if the list isn’t small. Or, when the source list changes, iterate the source to find if just a single object changed, and update the single VM that corresponds to that entry. I’ve used this for large lists with great success (updates are essentially instantaneous from users perspective, memory usage stays fairly low). 
That's exactly the problem with some companies, they're not looking for someone with a good understanding of the language and the best practices, just for someone who can code using a certain tool and that, I think, is the wrong approach. If you have a developer who knows about OOP, Design Patterns, TDD, SOLID principles, version control, etc. you can teach him about the stack you are using. Well, you don't even _"have to teach him"_, only point out and he will find a way. Don't be disappointed or sad about it, there are a lot of companies out there looking for good developers, if someone doesn't hire you because you don't know X or Y tool, then not an ideal job.
Agreed. The only time I ever find I acceptable, is in short for loops, where having the word be 'counter' or something is just plainly obvious.
Thanks @dipique. That is already handled. This library is attribute less and will just work without decorating anything in your class. var affectedRows = connection.Delete&lt;Order&gt;(1); var customer = connection.Query&lt;Customer&gt;(10045); var affectedRows = connection.InlineMerge&lt;OrderItem&gt;(new { Id = 120004, Quantity = 5, ProductId = 12 }); The code above will work assuming all 3 entity above (Order, Customer, OrderItem) has a field named "Id". \*\*Note\*\*: \- First, it checks for "PrimaryAttribute". \- Then it checks for "Id" name. \- If not present, then it will check for "Class" + "Id", which is "OrderId" for "Order" \- If not present, then it will check for "Map" + "Id", let say if you map your Order entity to "\[Map("ActualOrder")\]", then it will check for "ActualOrderId". The rules are here. [https://repodb.readthedocs.io/en/latest/pages/attributes.html#primary](https://repodb.readthedocs.io/en/latest/pages/attributes.html#primary) Everything is just done once in the library and is cached statically via "PropertyCache" object.
I cannot explicitly say the type of the "Id" to "int" or "guid" or "any type". That is why the argument name is "whereOrWhat" for that overloaded method. - where - means you have to create an expression - what - mean you have to give the Id
Don’t sweat it everyone uses Stack Overflow and google all the time 
Sorry, I didn't mean inside the list; I meant the object that contains the list. If you have a VM, and on the VM you have a property of an object that contains the list of models you're listening to, and that object changes to another object (or even if the list is made into a new one!), your list listener is now listening to the old list. 
I stand by my opinion. Once you see a pattern in practice learn its name and maybe read a bit on it (mainly the criticism part). Studying them is pointless.
Just because you can write your own caching system still doesnt invalidate his answer that you so quickly dismissed.
Googling is an acceptable skill.
/bow :) 
I can remember one interview where they asked me a couple of basic questions then moved on to more obscure questions. I struggled and felt the interview was a failure... The last couple of questions were about threading, some I struggled with as generally I try to avoid threading where possible. So at the end of the interview I asked them where they used threads in their winforms application. They used it to display a spinner for long running sql queries, I then mentioned the backgroundworker and they hadnt heard of it. I walked out of the interview thinking their lead dev was about half as good as he thought he was. I guess my point is, if your going to ask obscure questions you might find yourself judged.
Ah! This makes even more sense. This was the aspect of the concept that I was missing from school. They kept using concrete objects, so I would think "What's the point of using an interface for that if you're just gonna end up implementing everything differently anyways?" That's why it makes more sense to just use an abstract class, and then override whatever you may need for that particular implementation. But, when you relate interfaces to behavior, now it makes more sense as to how and why you can make a function/object more modular.
We'll just have to agree to disagree. Note that I didn't say your organization HAS to go with EF. But if you claim to be a C# dev, and have not even heard of Entity Framework, then I'm sorry, but it raises a red flag. You'd have to go out of your way to avoid working with it, even if you were just looking at ASP.NET or WPF tutorials it would be bound to come up the moment a database comes into play.
Agreed. There are such things as positions where they need an expert in a specific framework. There are positions where they just need a great programmer who can learn the ropes over time. Sounds like the position they were trying to fill was the former. So don't feel bad. There are plenty f jobs out there that will fit your skill set. 
So to know, everytime you want to add new feature or something new into the applications or your project google the best possible on doing it. Though which you/one can get knowledge of latest trends in those fields and can increase the knowledge effectively! 
EF is always slower than a stored procedure and you never end up using those classes created by EF in the long run anyway. It's always faster in the long run to do stored procedures and store things in redis or azure queue when needed. After EF6 things got a little better, but when you add up the total time debugging and linq queries that go wrong, might as well do [ado.net](https://ado.net) and stored procs. And if you think about it creating a query and creating a custom class that can easily turn into your response doesn't take all that much time.
Yep, this! You never know until you hire the person. Most jobs are get it done asap, throw away, repeat. Move stuff to cache, go serverless, scale. Drives me crazy people spending time trying to shove stuff into a design pattern
Pretty much. And this also ties into what others have written that you don't have access to. If some function accepts some simple interface then you don't have to go out of your way to find their special-case class or figure anything out, you just implement the interface and let it fly. This is the case for WPF - if I databind a textbox's Text property to one of my class' properties it will also check if my class is of type INotifyPropertyChanged. If it's not then it continues on as normal, but if it is that type then it will subscribe to the PropertyChanged event. So lots of code *others have written* don't need to know anything about any of *my* classes, or than checking if my class is INotifyPropertyChanged. Which means its entirely up to me to decide if I want their code to listen to my code.
This sounds like a shitty interviewer, like the one I had that forced me to make an EF call on a fucking piece of paper. Don't let it get you down, there are good people out there that hopefully can see your potential. Dont let this get to you.
Yeah, if someone can't remember like, a LINQ method or how the method works for example (like Aggregate), but can Google it, find/figure it out, and get done what I'm asking for, I'm good. They knew about the method or the "idea" of the method, but just needed a reminder of how it works/how to use it. I do that literally every damn day of my job, and anyone who would hold that against someone is asking for too much. I'll also do stuff like if I see they did `.Where().FirstOrDefault() `instead of just `.FirstOrDefault()` I'll ask them why, and depending on their answer I may delve into asking them what happens in each and why the latter would be preferred over the former in the hopes I can lead them to the right answer, and maybe even learn something. Current gig had me doing what was really some fairly simple math to make adjustments to the code I wrote as part of an initial sample exercise. Guy told me, "Dude, if you need to bust out a calculator go ahead. We're not assessing your math skills." They kept it super chill, and the whole experience ended up being rather enjoyable instead of super stressful.
Nothing you do will be a jump from not understanding to complete understanding, it's all about grinding it out over time. The biggest thing I can tell you is to practice breaking down problems into manageable chunks. What is it you want to do? What does it mean to actually do that? How can I get this to a problem I know how to solve? Those are the biggest questions I ask myself at the beginning of any task. Mastering this practice is the key to prevent from feeling overwhelmed and actually getting stuff done. You'll eventually hit problems where you can't break it down to a point where you can solve, but once you get it down to the smallest most manageable chunk it becomes much easier to learn how to solve that small problem versus trying to figure out to solve your original huge problem up front. All of this together takes time, but you are never beyond help and you can always get it with enough practice. It is possible that you may find you don't particularly enjoy it or are well suited for it at the end, but there is nothing stopping you from learning and doing it. 
It's never fun to fail an interview, but even failed interviews are valuable learning experiences. You now have some things you know it wouldn't hurt to brush up on, and can hopefully do better on the next one. I do that all the time with interviews, making mental or literally notes of questions I was asked that I either couldn't answer or struggled to answer so I can review and learn from them after the fact. This is an especially good idea if you struggled on a phone screen but make it to an in-person, because they may check to see if you tried to learn anything you missed/struggled with from the phone screen. Saying what's normal and not with interviews is a question that can't really be answered; it depends entirely on the company, the position, and even the interviewer(s). Some questions may not come up often, but all that matters is whomever interviewed you asked it and clearly cared about it to some degree.
Except for the fact that OP never said it was a senior position and neither did I.
Maybe college has stepped up its game, I would expect the candidate at 2.5yrs knows how to use EF in a basic code first scenario. I would now expect actual pattern knowledge or for the person to understand how the API works. 
&gt;I'm in need of a simple solution to store data in a proof of concept app How proof-of-concept are we talking here? If you don't *actually* need to persist user data yet, and just need to show what the app would look like if it were connecting to an actual persistent store, Entity Framework Core has an in-memory mode, so you can use it just like a database except that you don't need to set up a database server or install a local database. It's just that all the data you save will disappear as soon as you restart the application. Once you get past the proof-of-concept stage, you can configure EF Core to point to an actual database that actually persists your data without changing any of your implementation code.
If you feel this way and already know object oriented programming, yeah it's not good. If you however don't, then that's your problem. It's like a wall you have to keep climbing, when you finally grasp it properly, everything suddenly becomes very easy to understand. So just keep climbing that wall.
You could implement 10 projects as a junior and never learn design patterns or how EF works (honestly do you ever really learn how EF works until you try to shoehorn a pre-built DB and want to abstract the table models?). You would perhaps be surprised how many people get by their first couple years repeating patterns of more senior folks by rote esp if you are in a larger system. Further I rarely see folks with 2.5 years experience do anything other than assist seniors in an existing an rather large codebase.
I'm using windows forms. But how do you data bind without mentioning neither the form name nor the controls properties?
Practice. Some people make it look easy but spend a butt load of private time learning and a rare few just make it look easy. Neither should be your role models. You're experiencing a mix of performance anxiety and lower self esteem which is dicking about with your confidence. Don't measure yourself against others, measure yourself against past you. It's a psychological trick to stop you fixating on stuff that isn't helping you. If you want some tips on ADHD, check out [this Youtube channel](https://www.youtube.com/channel/UC-nPM1_kSZf91ZGkcgy_95Q). It's the most concise and practical advice you'll find. Check out gamification specifically as it helps ADHD developers develop. Ask for help (You just did :D ), people will help you with specific things that don't make sense. But most of all, just practice. Don't give up. It's harder at the beginning, it gets easier as you learn more. 
&gt; .Where().FirstOrDefault()instead of just .FirstOrDefault() Why would you ever do it the first way? Legitimately curious as I can't think of a reason. 
You're going to get up and leave an interview if they ask stack-specific questions about the stack they are hiring a dev for? Good luck with that.
Yeah, so its a very basic assignment, so I don't have to validate the input. The code runs ok, I'm just having a bit of a hard time trying to understand how this part works `storage[i]=..` how/why does my loop counter go into the array. Basically the logic behind it.
We have no clue what the role was or what the employer looking for, I agree that the role sounds like was beyond OP. I believe I even stated to OP in my first post that those questions are for a more advanced role than their experience obviously implies.
I didn't dismiss the answer, I said it didn't answer what the question actually *asked*. The question was "when EF is faster than ADO.NET," neither are "faster" re-using objects they have already retrieved and have as CLR objects. You don't need to "write your own caching system" to re-use ADO.NET's results, it populates POCO objects which can be held onto just like any other CLR object, and just like EF does behind the scenes. I think it is quite odd that you and the other poster are essentially arguing that holding onto results within EF's context is completely different than holding onto an object reference to a POCO that is returned by ADO.NET in order to justify why one is "faster" than the other. Is it more *convenient*? Sure. That's EF's bread and butter right there, convenience. Is it faster? No, since they're exactly the same (well actually the object mapper is *slower* in EF due to complexity overhead). 
Ugh, you know I use Resharper and it's a lazy habit to write .Where(...).First() and then let Resharper tidy up for me :) I had an interview years ago where they gave me a PC with VS 2013? 2012? And no Resharper. It took me way more time working out namespaces to add than it did to solve the developer problem :) I interview and apply some pressure. It's how I distinguish between answers that the candidate knows because they use the question subject in actual code and answers that they know from reading. I'm with you on the lending hand. It's nice to see someone have that little Eureka moment once everything clicks :)
You wouldn't as far as I know, but by asking why the latter would be preferable over the former without directly stating the former is better, I'm looking for the candidate to supply me with the right answer without leading them too much in the right direction. If, through asking them how each executes, they can tell me the two method version gets all records that match the criteria then returns the first from the results or a default of the value if a match isn't found, and the second stops and returns the first match it finds or else returns the default if nothing matches, they should then be able to tell me why the single method version is better and should be used, and not just because, "It's less code." I might even go so far as to explain how each executes if it's for a junior position, but after that they should, hopefully, be able to tell me why the single method version should be used over the double method version.
Yep. Lead them in the direction of the right answer without straight up giving it to them to see if they can figure out both the right answer, and why it's right.
I would go with SQL lite in this case especially if your app is SQL centric. 
&gt; which, with OPs 2.x years, I wouldn't expect This is irrelevant. OP stated the position was for a mid level engineer. A mid level is typically going to have 3 - 5 years of experience. He applied and interviewed anyway. 
&gt; Look up the "CollectionView" and how to add a filter to it. &gt; You would add your observable collection to the CollectionView and register your filter. The filter is basically a delegate that gets called to decide if any given row should be shown or not, and you can use whatever logic you want to decide that. Ok, now that I have the collection view, how can I add a filterdescripter? What would the logic be? :D 
NullReferenceException can occur on any member access. InvalidCastException can only occur on casts. If the method is potentially a bit larger and you don't have line numbers in your stacktrace (because production deployment), then it makes a difference.
I'm going to use this in a list box and not data grid.
Sometimes you need someone who can start contributing immediately without needing ramp-up time. This could have been one of those times. But there are a couple things I want to dive into deeper for jobs that don't need an immediate contributor. &gt; I mean should not i have been asked C# language specifics No. Languages should be relatively easy to pick-up. Asking about language trivia isn't productive or a good indicator of a candidate. If someone mentioned that they were a C# or .NET expert on their resume, I might probe their knowledge of certain big items like async\await to see if they were lying. Without that claim on their resume though, nothing would be language or framework specific in my questions. &gt; what kind of database you would use for some app This is a high-level application design question, and it is definitely a good question for an interview for a generalized position. Knowing when to use the wide variety of databases out there such as SQL, key-value, document, column, object, or graph databases is incredibly important when designing an application. They each have strengths and weaknesses, and knowing how to apply those in the right situation is important. The specific type of SQL database (for example) isn't important in an interview question though. The data model will drive much of the rest of the application architecture all the way through to what is presented to users and the actions they can take. It will also be one of the hardest things to change once the application or service is being used. &gt; how user authentication would work Again, depends on your resume for how detailed to make this question, but as a high-level (not framework specific) question for a senior position, it's okay. It gets into what crypto principles do you know and touches on requirement gathering: salt + hash passwords, protecting session tokens and cookies, forward perfect security, ability to revoke access, password reset methodology, two-factor, advantages\disadvantages of using something like Google Sign-In, and so forth. The big Facebook vulnerability from earlier this year was due to improper handling of user authentication tokens and being conversant in crypto is a very important skill to have. &gt; in which case EF faster than pure ADO.NET This is only a good question if those technologies were on your resume.
Keeping up to date with the latest technology even on your own time is an incredibly important part of being a software developer. It doesnt mean you have to know how to jump in and code React, Vue, Angular but being aware of their existence and what they are built on is important. We have devs here that refuse to learn anything new, they wont even update VS from 2013. I think they will find it very difficult to land a new job in the ASPNET world.
Yes, if you don't keep somewhat up to date on skills you will probably have a harder time getting new positions than someone who did. That's always been the case though?
I've heard of EF, but in the decade I've been coding in C#, I've never touched it. I would be unable to answer anything about it besides being able to say that it is an ORM with a reputation (deserved or not, I don't know) for being slow.
Actually, it sounds like they were looking for a specific set of experience to match their environment and the OP didn't have that. Just sounds like it wasn't a good fit.
Yes. And I stated the reason. Interviews like that doesn't really test anything other than that specific thing, unless they are used as a base for a discussion. I don't care if a candidate knows when EF is slower. I care if he has solid problem solving skills and knows about programming principles and I can figure that out in many other ways than quizzing. If a company believes quiz is a good way, I don't want to work there. To me, it's a sign that the interviewer is more concerned about showing off than figuring out if the candidate is a good match for the company. 
EF constantly caching and change tracking is one of the largest problems people tend to run into when developing large EF projects. It's a boon until its not. 
i is essentially a number, in this case between 1 (i=0) and 100 (i&lt;100) (sidenote: yes i know arrays start at 0, its easier to think of it this way). Every time your loop goes back to the start, the program will increase your loop variable, i, by one (i++) and will compare it to 100. When i &gt;= 100 (ie when i&lt;100 evaluates to false), the loop will terminate. C# exposes this loop variable to the code block inside the for loop for exactly the reason you are using it here: it helps keep track of the number of times you've gone around the loop. Using that index (why almost everyone is taught to call it i, since its the index of an array you're messing with) allows you to insert items into your array in the order in which the user enters them at the command line. So what storage[i] = really means is "assign the value on the right side to the i'th element in my array (the element at index i), then continue the loop.
I'm no EF fanboy, but why would you be bringing tables into your project you have intention of using? People misusing EF is part of the problem - though only part.
I’ve seen it a lot among more junior devs. What I’ve found is that they know FirstOrDefault() works but don’t realize that there’s a version with a parameter on it. 
Yeah, and that would be a great thing to bring up and discuss in an interview to show that you have a deeper understanding of the technology. The question posed to OP was "in which case EF faster than pure ADO.NET" /u/TimeRemove's answer dismiss the possibility entirely of there being any scenario where EF can be faster than pure ADO.Net, and does so condescendingly towards whoever posed the question. What do you think's going to go over better in an interview? "I'm not even sure what your point is. Is that a trick question? I can't imagine any scenario where that's true." Or "Well, EF does have a built-in first level cache. That could make it faster than *pure* ADO.Net in some situations, but it's not without caveats like common use patterns with short-lived contexts not providing much benefit to the caching, or developers not knowing or understanding that multiple sections of code may be operating on the same cached value rather than freshly retrieving the data from the database. Of course, that might be the case in any caching system that isn't cloning objects on retrieval. Immutable structures can help prevent developer mistakes here."
We'll have to agree to disagree. To me it sounds like the interviewer is hiring for a position that likely utilizes EF and wants to make sure the candidate knows it. I can't see how that's a bad thing. 
Sounds like they also don't know how .Where() works - as an empty one sounds pointless. 
&gt; /u/TimeRemove's answer dismiss the possibility entirely of there being any scenario where EF can be faster than pure ADO.Net, and does so condescendingly towards whoever posed the question. Please don't misquote me so egregiously. I literally said, as my very first example: &gt; the only times I can imagine an operation being faster is if the operation never actually hits the database at all (e.g. EF validation errors) The only one being condescending in this thread is yourself. You obviously misread my post and are using that to justify acting this way. 
The way your interview went, simply states that you weren't a match for each other. Though, keep in mind that the development ecosystem is so pretentious it's ridiculous. I've been programming, mainly web development, for over 20 years, 12 professionally, and come January I'll be starting at my 5th professional job, having been to about a dozen interviews in the last 3 months. I've also noticed a lot of companies asking questions about (and sometimes requiring experience in/with) a crapton of frameworks, methodologies, design patterns, languages, etc. Thing is, let's be blunt, the majority of these companies are not your average innovative Silicon Valley startup and the majority of them don't use the latest frameworks, coincidentally have legacy scripts and programs written in ancient languages scattered all over, and craft the majority of their things together with outdated but proven technology. In many of the interviews I was asked if I had proficiency in framework X, language Y or tool/IDE/platform Z, but by the end of the conversation they'd admit they don't really use it \*that\* much and resort to old stuff. Why even bother to ask or emphasize it so much? And it's not just in interviews, it's how developers very commonly act towards each other too. You don't even use Angular? "Lol, you suck." You've not done anything with HTTP/3 yet? "Noob!". You haven't even ported all of your existing applications to .NET Core yet even though they'll always be ran in a Windows environment/server? "omfg get with the times!". You haven't even fully implemented dependency injection and automated unit testing in ALL of your code? "omg how do you even test your software?!" It's not just developers though. Whenever I have contractors over for my fixer-upper, every single one of them will use a different approach, and completely bash the solution another contractor suggested. People are just asshats.
Not disagreeing with anything you've said. Most of the answers I've read in this thread would likely have been good enough in the interview room - especially if the interviewer asks follow up questions which he should.
Simply because knowing EF would be a tiny part of the job anyway. Most solutions rely on many other parts of the. Net framework and many outside of it as well. You need a really long interview to cover everything in that case. And you would most likely end up with no one, because most programmers use Google to figure stuff out. When you are hiring you want someone that can figure stuff out, writes good quality code and most importantly goes along with everyone in the team. Simply knowing random facts about a random tech you are using goes way down the list. You are more than welcome to disagree though, but I would want to work for you. 
That's what I'm saying. I don't even like using auto mappers. 1st the time creating the query, that's about a wash, assuming you have sql skills which you should. Next mapping results into an object - here EF will win no question. I have a few small helper files that will work with my results into my custom objects. But they do the job well and it's easy to read. Then you gotta convert those objects into responses or something you can use. Maybe you use an auto-mapper or whatever. This is an extra step you don't need with ADO.NET Next comes maintenance, how many times have you asked, "Is it a problem with EF or the database" In the real world, you end up saving so much more time. Next comes database changes and 'Oh crap EF is broken', 'it doesn't sync on my system', 'hey lead, can you sync EF for me that new db'... Oh and don't get me started about code-first EF. The thing is reading in a query from ado.net is a 1 time thing, it doesn't take much time, maybe 30 min at the most. EF is always slower than SP, if you have a query you want to optimize, it will end up being a SP anyway.
I think you misunderstood what the OP has said then and what I responded to then just to clear it up. The OP had said that he can describe what EF is but had not worked with it, that is a high level overview type of knowledge of what I'm responding to that is ok not to know for everyone else reading this after the fact that doesn't have a lot of experience yet. &gt;And between when i said that I do not know EF that does not necessarily mean that I do not know literally anything. Basics EF I know for, example approaches(code first, database first) how to add, update, delete I know. Pure ADO.NET(DBConnection,DBCommand,DbUdapter etc). If you want to use what he said here earlier basically summarizing as the basis of your qualifier statement of that equating "no Entity Framework knowledge/lack of familiarity with EF", then right afterwards say "have not even heard of it" at all as the response, then IDK what to tell you or what you are expecting because your target is moving. Just for the record anyway I wouldn't consider someone for a mid level role anyway that is still adding a qualifier of 2.7 years vs 2 or 3 and thinking there's some magic bar to being labelled in a new role, this person in particular based on their responses. &gt;You'd have to go out of your way to avoid working with it Again for everyone else reading out there not really for who I'm talking to, this is totally false so take what he says with a grain of salt. 
more to his question, you can also replace the "40" in your snippet with a value bound to the underlying view model, right?
I'm not saying I wouldn't use the tables, I'll end up creating custom objects anyway. 'People misusing EF' Yes, that's also part of my point. When developing with a team, less can go wrong.
&gt; but I would want to work for you I assume you meant would not want to work with me. That's fine - based on your responses here, I wouldn't want to work with you either. We agree on something.
&gt;When developing with a team, less can go wrong. Not using frameworks because there is a possibility of using it wrong seems to be a pretty extreme measure. I'd rather use a framework that makes sense, and ensure everyone is using it correctly than roll everything from scratch.
If their questions we're unreasonable then they will not find candidates who can answer them and you will still be considered for the job. If other candidates can answer those questions easily and that would contribute to their performance in that setting then they should hire that person instead of you. Just keep improving your skills in areas that are in demand and interviewing for positions that fit your experience. You and the right job will find each other if you keep trying, especially in this job market. Labor has most of the power right now so think of it more like you are interviewing them. You want to find a place that needs what you have to offer and values the chance of getting you to come to work for them. It's just about finding the right match.
The entire point of MVVM is to split the presentation layer from the business logic. Binding the UI to the viewmodel to access presentation values kinda defeats the point.
Eh not necessarily, somebody googling every time will know if things change, and won't misremember information
No, for you. Even though I disagree with someone about recruiting, doesn't mean I can't work with them. The reason I wouldn't want to work for you is that I wouldn't want to work with the type of programmers you would hire. It has nothing to do with you as a person since I don't know anything about you. The reason I wouldn't want to work with you would be more because you seem to get really personal about a simple discussion about recruiting strategies. 
The entire point of MVVM is to split the presentation layer from the business logic. Binding the UI element properties to the viewmodel to kinda defeats the point. Might as well directly access the named controls in the code-behind, no need for an external round-trip. You should be using margins and automatic scaling. Any hard-coded size of items should just be placed directly in the view, on the control.
That depends entirely on how .where is handled by the underlying implementation. A list is also ienumerable l, and linq statements execute immediately NOT only at the end.
That depends entirely on the underlying implementation of the interface l, doesn't it?
I think a good interviewer should ask questions based on your résumé If you included EF there, I ask you questions about it and you don't know the answers, then that's an issue. If you didn't include EF there and the company is looking for someone who already knows it, then you should have been filtered out before the interview even happened.
&gt; So yes your version is shorter, but it's the same code and it will work the exact same way. except when you need to maintain it, then it's worse.
Ok I agree with you, in some extent. But here is the case, for example i have used automapper when i got my first job and I have done hardly a couple of mappings between domain models and view models. It was about 2 years ago,after that I have not used automapper so far, and therefore I have forget literally everything about mappers. So should my skills be judged based on the fact do I know automapper or no? I used to think that knowledge of particular framework doesn't necessarily. Well as a matter of fact I was wrong.
I'm not sure what the code is meant to prove. Even if you enumerate that list, it won't throw an exception. It never throws an exception, using any form of enumeration? &amp;#x200B;
&gt; Even if you enumerate that list, it won't throw an exception. ... Add a `ToList()` at the end, forcing an enumeraton, and the code will throw a `NullReferenceException`. At this point I have to assume that you are trolling.
The rules are very weird. In WinForms you need to reference the control by name to make the binding. Unless someone more experienced than me knows about it.
IQueryable is used for lazy evaluation. IENumerable has nothing in the spec for lazy evaluation, and presuming that it is lazy evaluated is incorrect. THE WHOLE POINT OF THE IQUERYABLE INTERFACE IS FOR LAZY EVALUATION. That's why it exists. If IEnumerable did the same thing, there would be no need for it.
I'm curious why you would say that. IMO, a view model driving xaml is the purpose of MVVM. For example, if the program, at run-time, detects a touch screen, it could make the buttons larger. Stuff like that.
`.FirstOrDefault()?.FirstName;` vs `.Select(c =&gt; c.FirstName).FirstOrDefault();` would be a good question to ask. First example gets the entire record and then uses only one property value, while the second example gets only that one property from the server.
Sounds like UI logic that should stay in the UI to me, doesn't need a VM to tell it that information.
Upvoted. I've been a C# dev for about 10 years. Never knew that.
Yeah, there's loads of stuff you can ask with LINQ. I'd likely ask this of someone more mid- to senior level and likely not junior unless they were acing every question so far and I wanted to test the extent of what they do and don't know.
What if the height changes based on a user setting, such as chromes resize feature? There are plenty of reasons you would want your VM to handle it instead of your view.
Don't you guys margins and layout panels that wrap and change things automatically?! I couldn't imagine starting to list up control dimensions in a viewmodel, sounds like a nightmare.
I think one of us needs to read up on the MVVM pattern. I think that business rules, whenever possible, should be in the view model, and not in the view's code behind. It's much more than the size of a button (which is a marginal use case). think about branding your application by dynamically changing UI elements base upon run-time configuration: colors, graphics, text values, etc. &amp;#x200B; I'm not trying to be argumentative or disrespectful. Our ideas about MVVM are just pretty different.
How would you suggest doing a scaling option then? In the code behind load settings and then apply it to a template settings? You're suggesting to have an MVVM app that doesn't do MVVM. Yes, your view should have margins... And layouts... I'm confused what you mean by that. Your app should be able to scale based on the parameters given, but the parameters in some apps could be dynamic. I work in educational software and some parents need to increase the size to 200%. That is a user setting. Which can be a service. Which is the entire point of MVVM.
I call it efficiency and if I misspell efficiency Resharper will fix it for me :D 
The only way to sort of enforce this at the type level is a form of the curiously recurring template pattern: abstract class Foo&lt;TSelf&gt; where TSelf : Foo&lt;TSelf&gt; { public List&lt;TSelf&gt; Selves; } class Bar : Foo&lt;Bar&gt; { } But this has numerous fatal downsides and isn't appropriate in many situations.
Interesting. EF is getting smarter. 
It is usually mentioned in the study materials or a colleague mentions the pattern name. In any case even if you miss to identify a pattern the value lost is not that big.
I suppose it could be quicker if you're really good with ODATA and use that, but it's somewhat limiting and I haven't seen it being used much
Biggest help for me was past experience with a dozen or more other languages. Prior to C# I had programmed in Delphi, VB, C, C++, a bunch of forms of BASIC, COBOL, FORTRAN, Java, JavaScript, and others. Especially after learning Java and Delphi (the actual inspiration languages), C# was a breeze.
This is why I like generic whiteboard problems -- problem-solving, not language-specific tasks. There are two tricks to it: * Ask the question in such a way as to *not* sound like a homework problem. I've found making up a real-world scenario that applies here works just fine. * Remember that answering the problem isn't the goal, nor is judging syntax. The goal is to see how a candidate thinks, not whether they memorized a language or know a specific problem. I've often said, "Syntax is easy; programming is hard." We can teach you C# relatively quickly. We can teach you Java relatively quickly. At my current job I picked up enough Angular to be useful to my team within a couple of days. But teaching someone how to architect a feature is a lot harder. 
I think you're attacking the wrong point being made here. Are you actually telling me you're listing up all possibly different properties of controls, like a dimension mirroring in the viewmodel?
Suboptimal? For an *optional* condition? Please. EF will do no better.
&gt; There's no difference in the speed or effectiveness of your code at all One part of effective code is that humans can understand it. The new code is more comprehensible, thus more effective.
&gt; you seem to get really personal about a simple discussion about recruiting strategies Not sure how you're coming to that conclusion. You're the one that said you'd just walk out of interviews when you don't like their questions. 
Try with Akavache
I think we're speaking about something different. Assume all properties call INotifyPropertyChanged's event, and that the view's list is binding to ModelBVMs. class ModelA { public ObservableCollection&lt;ModelB&gt; Models { get; set; } } class ModelB { } class VM { [Inject] private IFactory VMFactory; public ModelA ModelA { get; set; } public LinkedObseravbleList&lt;ModelBVM&gt; ModelBVMs { get; set; } public VM() { // Takes the list to listen to, the factory to create the vm, the type of the vm, and the model property. ModelVMs = new LinkedObserableList(ModelA.Models, IFactory vmFactory, typeof(ModelBVM), "Model"); } } class ModelBVM { public ModelB Model { get; set; } } In this example, LinkedObseravbleList listens to a list of models and, when that list changes, creates a vm for that model and add it to its internal list which the view is listening to. I already have this working and it's what I want. The problem is when the property ModelA on the VM changes. If this was a binding, everything would update accordingly. Because it's not - and the ModelVMs is just referencing the Models list - it does not know when ModelA changes. You could just recreate the list in ModelA's setter, but this seems error-prone to me.
Vlc.Dotnet is perfect for this. You can transcode stream a video to a local port over http in a format that HTML5 can play easily(from what I remember OGG is the easiest to stream over http with libvlc). I did exactly this to embed some RTSP feeds in a .net core application.
The word "association" can be abbreviated as "assn" or "assoc". Be careful with "assoc", since it can also mean "associate".
Not it's not, more effective code is faster and runs more efficiently. How code is written has no impact on that. Also I disagree the new code isn't "easier" to read in any way, it's just shorter.
Hmm... I feel like the preponderance of the above post suggests the exact opposite. That is, EF (although this applies to nearly all ORMs) fail when applied to systems that are *far* from trivial. CRUD of course being the ideal system within which an ORM can shine. When rules start to become complex and the *data* model generated by EF begins to no longer align with the *domain* model necessary to usefully abstract business requirements (the hallmark of any non-trivial system), an ORM not only becomes performance bottleneck (and therefore a leaky abstraction), it begins to serve no purpose as well because the mapping features (the real winner here) can no longer be utilized.
Your ViewModel should care about the state of your UI, but not the presentation. For example, you could have a bool property in your viewmodel "WidgetIsVisible", because the ViewModel can reasonably control what things are currently available for interaction. But the ViewModel shouldn't care about how wide/tall a control is, because that could be different between a desktop app and a tablet app. &amp;#x200B; As other answers have said, you'll be interested in using Styles to remove markup duplication.
So basically the rules were created to allow any two developers to exchange their classes and forms and have them both be compatible with each other without either dev knowing the name of each others controls. &amp;#x200B; I don't know if there were maybe a couple of exceptions to the rules that i missed, but in in the text it states that \-no direct references to the controls on the form from our classes are allowed. \-There can be no mentioning of the form name on our class. \-our class will contain all the methods and all the code (excluding click call events) &amp;#x200B; I think this is supposed to be an intro into encapsulation and object oriented programming, but I have no clue what standard practice would be for actual software engineers making a simple program like this?
Effectiveness is in the eye of the beholder. I spend a significant amount of time most days reading code. So I value readability. &gt; Any fool can write code that a computer can understand. Good programmers write code that humans can understand. - Martin Fowler *Refactoring: Improving the Design of Existing Code*
I can sometimes pass for a youthful 35 year old.
EF has been the best ORM I've used, but still always issues. I didn't even mention when updating versions or your automapper version, things break. Working with .net, .net standard and core. I really don't have a problem using EF (as long as it's not code first), it just always ends up eating up more hours than it should and it's always going to be SLOWER. Dapper is a little faster I hear, but even that is slower.
I prefer Dapper myself, and a lot of tests have shown that Dapper is even faster than pure ADO. That sounds impossible, but it was actually the case primarily because the ADO code people were writing wasn't as optimized as Dapper. It's really just a very thin wrapper to ADO. 
I'm a seasoned, reasonably successful independent contractor, and throughout my career I've come to realize that no one knows anything inside out. That is to say, even self proclaimed experts in a topic absolutely rely on their Google Fu. There might be isolated exceptions to this, but in general that's just not the case. To me, the best IT professionals inherently understand that they don't know everything. Their real talent and value to clients is being able to figure out how to do something quickly and efficiently. To me, if a company doesn't hire you just because you can't recall every detail about some api, it could be that the company isn't very mature and/or has unrealistic expectations and you likely wouldn't want to to work there anyway. Demonstrating that you know how to quickly learn is far more valuable in my opinion. 
Maybe you should just review your design? There might be another way to do this without using generics. Once you start using generics to make your own classes generic, they start to spread like wildfire and make things lot harder. Generics are really good for solving some problems but you should use them sparingly.
&gt; the two method version gets all records that match the criteria then returns the first from the results Does it? Being lazy won't the Where().FirstOrDefault() one still only go until it finds the first match? As far as I can tell the only downside is creating an additional iterator.
As you mentioned Laravel i assume your talking about a web server. [For ASP.Net core, RTFM](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-2.1) ;) it will run you through how to set up policies. After that it really depends on where your trying to access user information, i'm happy to answer further once i know what your directly after; .Net Core or full framework? where are you authenticating users? where are you accessing user roles from?
It is not the most used architecture pattern but really elegant sample - I personally like very much Gregory Young’s ‘The Simplest possible thing’ that is cqrs + event sourcing - https://github.com/gregoryyoung/m-r 
file:///android_asset/md/#wherefirst
Honestly the big fours interview questions (and solutions) are posted all over the internet. Do some project euler and run through their scenarios. That will settle you for the comp sci part. The rest is just knowing some basics. I mean realistically does anyone not know that EF is a slow turd in comparison to literally everything? OP just doesn't have a wide experience using different language features. 
Ok so for certain LINQ providers it will be much worse, but it still looks fine for the normal ones (the IEnumerable extension methods and entity framework).
Even for the ones it's not worse, using the single method is simply cleaner. 
You don't need to understand every nook and cranny of EF to use it. Most times someone else decided to use a technology like EF, and the team wound up "using" it, so they put it on their resume. But I don't really fault someone for not staying up all night studying the EF source code to be able to answer every arcane question about it pulled from some interview questions website.
Implementation of new numeric types.
Computation on complex types is the place where I've seen it the most. Couple of scenarios: \- Comparing/operating with other instances of complex types - Example: DateTime operations are all overloads, to deal with TimeZone offsets when DateTimes. e.g. ([DateTime.Now](https://DateTime.Now) \- DateTime.UtcNow) returns a TimeSpan \- Operating two disparate but related types e.g the DateTime overloads for Timespan are a reasonable example of where the rationale makes sense. e.g. [DateTime.Now](https://DateTime.Now) \+ TimeSpan.FromSeconds(60) returns a Date Beyond that the approach diminishes quickly when compared to the chaos it can cause if misused. 
`DateTime` and `TimeSpan` are types that overload some operators, which allows you to write code like DateTime billingDate = GetBillingDate(); TimeSpan overdueLimit = TimeSpan.FromDays(14); TimeSpan age = DateTime.UtcNow - billingDate; if (age &gt;= overdueLimit) ShowWarning($"Bill is overdue by {(age - overdueLimit).TotalDays} days"); Sure, you *could* use methods like `Subtract()` and `CompareTo()`, but would that actually make things any clearer?
Overloading the equality operators is something I do all the time for classes when I implement IEquatable&lt;T&gt;. It makes the instance method .Equals work the same as the == operator. For a good example that just (almost) bit me, the BCL provides a class for IPAddress, but they never overloaded the equality operator. Using it will give you incorrect results, whereas using the instance method Equals works. As for the other operators, I rarely override them. The only time it usually makes sense is with custom numeric types.
 public struct Size { public Size(double x, double y, double z) : this() { X = x; Y = y; Z = z; } public Size(double size) { X = Y = Z = size; } public double X { get; set; } public double Y { get; set; } public double Z { get; set; } public override string ToString() { return $"{{ X = {X}, Y = {Y}, Z = {Z} }}"; } } # Arithmetic Now I want to add two sizes: var s1 = new Size(5); var s2 = new Size(5); var s3 = s1 + s2; To do that I'd have to override an operator. I also want to be able to add a number without making a size first, like `Size s4 = s3 + 10;`, so we need another operator for that. public static Size operator +(Size s1, Size s2) { return new Size(s1.X + s2.X, s1.Y + s2.Y, s1.Z + s2.Z); } public static Size operator +(Size size, double add) { return new Size(size.X + add, size.Y + add, size.Z + add); } # Equality. VS also provides a way to help you override equality; in this case we can agree that the uniqueness of a Size object is reliant on the X, Y and Z values. By default Equals will do a Reference comparison, which means even if two Size objects have the same values `s1.Equals(s2)` will return false - ie the variables do not point to the same object in memory. So we want to override the Object.Equals method, and we want to add == and != operators. If you've copy-pasted the Size class to VS you can right-click the class, select the light-bulb and choose "generate equals..." then choose OK. Now it's possible to use == on two Size objects which will make a call to the strongly typed Equals method and do an X,Y,Z comparison. If the Size is boxed, ie, you created it like this: `object s1= new Size(10);` and then try to compare it with `s1.Equals(s2);`, the call will be to the base `Object.Equals` method which by default does a Reference comparison, not a value comparison. But since we override it, we yet again return the result of our strongly typed Equals method. This ensures the == operator and Equals method return the same result. Not doing this might indeed confuse developers as depending on if you make an Equals call, an operator == comparison they can return different results.
&gt;Most seniors I know couldn't explain the difference between a LinkedList and a List. Damn I *feel* like I should know that but I don't. My gut is telling me that the link list would be a doubly linked list, where as a list would just be singly linked and index by position. 
+1 for this. It didn’t happen too often but a few times when interviewing a candidate would say they’re not sure but would explain how they’d find out. Really good candidates would then ask me/us about how we would do X or what Y meant. To me that showed that they’re a) not scared to admit they don’t know and b) are keen to improve and learn. It would often span into a more interesting conversation than just a series of questions and answers
And the OP's code is easier to understand than the short version.
It's reasonable for different people to have different opinions on which one is more readable. I won't argue that point. I will argue that readability matters though.
Without more context it seems like your VMs are too heavy. This happens to me when I try to reuse VMs on multiple views. They should really be view specific. One responsibility, one reason to change. That said, there’s no reason that updating the list in that setter should cause any problems. Why are you trying to keep a VM instance around and change the underlying model data it represents though? If you really need to do that, it’s going to be a heavy operation - you’re changing the meaning of that data. 
I don't think you were wrong. Sometimes you've also got to account for the fact that hiring is tough and some people don't always know how to hire good talent. Alternatively, you could have just been out shined by someone who really know his or her stuff. Happens. Alternatively still, it could be just a lack of confidence thing. Maybe they found nothing wrong with the questions you couldn't answer but the way you answered them struck the wrong chord with them. You should practice interviewing with some people and see if there are non-technical areas you could improve at as well. Personally I feel a good interview shouldn't ask you about stuff you don't know unless you've said you know that stuff on your resume. If it wasn't on your resume, yet they required it and they shouldn't even have interviewed you and they messed up. However, if you said that you knew it on your resume or you bring up during the interview then it's fair game for them to probe deeper into it. 
Well the binding would occur in the form itself. Your class just has the data and logic. The form will then hook up to specific functions in your class, but that is from the outside. This way, your class has no direct references. The form obviously will have direct references since it has to link its own controls to any code that responds to the events.
 Writing this out helps. Each control has some properties like "Hovered", "Pressed", "Checked" (specific to Checkbox) and so on. A Control's state is used to identify how to render the control in the application. Hovered, Hovered+Pressed, Checked, will all render differently. The goal of `ControlState&lt;T&gt;` is to encapsulate the logic that defines a single state, and decouple this from `Control`. ``` public abstract class ControlState&lt;T&gt; where T : Control { protected ControlState(T owner) { _owner = owner; } public abstract bool InState(); } ``` The `T` allows us to access the derived class' specific properties that are needed to perform the `InState()` check. public class CheckedState : ControlState&lt;Checkbox&gt; { public CheckedState(Checkbox owner) : base(owner) { } public override bool InState() { return (_owner.Checked &amp;&amp; !_owner.Hovered &amp;&amp; !_owner.Pressed); } } Now we can use the definition `CheckedState`and tie it to a `ControlStyle`. Dictionary would be one way. We can loop through the Dictionary, asking each `ControlState` if we are in it, and then pass the associated style over to the rendering component. We could put it into the State itself, but I want it to be flexible and it would may be easier to just have a mapping somewhere else in the application that can be updated if Styles ever change, as opposed to going into each Style to change them. 
I interviewed in June for a .NET job, particularly working with wpf on .net framework, and a little .net core. I graduated with a CS degree technically in August, and started only 2 weeks after. I did have a software engineering job since January of this year so I had some experience in my belt, but it was in a data center primarily working with servers, vms, and particularly various *nix environments, so the scope of the 'languages' I was working with were bash, sql, or python. Any way, I had next to no experience in .NET, other than the basics from working with a steam bot a couple years ago, and yet still I had no problem landing a job across the country, even after going through with easily the most intense rounds of interview questions I ever faced, just by being really good at computer science/programming in general, and having a high-level understanding at the most important concepts. Within a couple of weeks I was able to catch up with at least some of the other software engineers who've been there for years, and now months in I feel very comfortable with the .net suite. This isnt meant to be a humblebrag, but rather to increase your confidence. I think interviewers who are exclusively looking for those who understand and work with a single specific language can lead to niche engineers, which in really large products with a large scope can actually be limiting what you can accomplish with each engineer. I think it's safe to say when it comes to interviews that understanding many general concepts at a higher level is _usually_ better than understanding a few specific concepts but knowing them well at a low level.
Definitely don't want to do that, thank you. I appreciate that you showed how to force it anyhow, but I am doing this as a learning exercise and want to find the right pattern for this problem. I'm thinking maybe I'm just going down the wrong track. I'm trying various versions of the [State](http://gameprogrammingpatterns.com/state.html#the-state-pattern) pattern, this is just my most recent one.
I program by using a lot reusing a lot of previous code with copy and paste to the point that I forget how to do the most basic things. An example is using linq query syntax, I seriously couldnt build a simple query with a couple of joins off the top of my head. But last week I wrote a linq query that was complex enough that it took me an hour to write in SQL.
This is true. So far I haven't used any generics in this application at all, and things have been clean. This is certainly an interesting problem and I'm going through various "State" patterns to try and find the right fit. I think there must be a way to do this that doesn't involve T, but still doesn't couple too much code into a single class. That's the whole point of this exercise for me, to figure out the right patterns to use to solve these kinds of problems, so I'm always willing to review the approach and change it when it starts to go off the rails.
Not everyone is a good interviewer. Some people get caught up in minutia when they should be looking at the big picture.When I interview I just try to get an idea if they understand the concepts, have worked with a particular framework or technology. No one knows it all and I don't expect them too. 
If it is used logically, I feel it just looks nicer, I don’t exactly want to have to nest functions in order to perform like a chain of additions
As an example of a real world scenario, a couple of years ago I made a “CheckNumber” class. This was intended to model a checkbook and the way that check numbers increment for each check. The check numbers were represented as output as strings, since they could contain leading 0’s, and other special formatting. But the class itself was aware of an actual numeric value and could do math on existing instances. So I overloaded some of the obvious math operators to make the class easier to use. (Implicit cast from numeric types) CheckNumber n = 6; ToString() = “0006” (Overloaded operator) n+=4; ToString() = “0010” (Another operator overload) n—-; ToString() = “0009” (implicit cast to string) string asString = n; And so on. 
Is there a common implementation of something like a `Branch` or `When` operator on IEnumerable/IQueryable? Something usable like `query.When(user.IsAdmin(), q =&gt; q.Where(...), [optional else])`
I feel'ya. Couple months ago, I couldn't remember how to construct a `for` loop lol. I kept trying to use a crazy mix of both `for` and `for each` syntax.
I wrote a math game with a friend and I did the "calculation engine". The problems always consisted of two terms and an operator. So I overloaded all the mathematical operators on the Term class so when I needed to operate on two of them i could use more readable notation. 
No. It's like the 30th language I've learned or something silly.
Seconded. EF seems like a heavy lift for a beginner, but it's a really easy way to get your feet wet in ORM and it's so not fun to manually wire up your schema and SQL reads/writes and mapping them to objects yourself. It's worth the 1-2 hour investment in tutorials to start out right.
IMHO, not used very frequently in C#. Used more in something like C++ to streamline code so it reads more logically.
Sounds like they went into the specifics too much. **I'd be more worried about your problem solving skills than your experience.** 
Developers are in such high demand right now that you can write your own ticket if you are legit. The trouble is, most people doing the hiring don't know who is good and who is faking it. I own a software engineering firm and finding good developers is our biggest challenge. We specialize in high quality (read: expensive), enterprise applications. I can't tell you how many candidates apply with loaded resumes and .net expertise, but can't answer questions like these. These are questions that anyone who has done meaningful .net development would have answers for. When you interview with a high level developer, it will be clear what your depth of knowledge, experience, or problem solving skills are. You'll be exposed quickly if you misrepresent yourself. At the same time, having all the answers isn't everything. There is attitude which is important, potential which is valuable, and so forth. It takes the right environment to gain these skills and it can seem like a chicken and egg scenario. Seek out a position where you're the least knowledge person on the dev team and learn your ass off. If you have the drive and work ethic, you'll become desirable to any company out there. 
One does not simply new up a value type. /s
You can override operators on structs as well. Consider a vector.
I use them for complex unit of measurement types. Unit type coupled with a decimal type. For example class Size might be in inches, meters, whatever. (Size.Length lentotal = len1 + len2;) 
I am getting older. Trying to remember which way I split a String, in the 5 I know, and the 3 I work with only every 6-8 months when I write new low-levelish stuff that becomes my libraries, I am not going to retain it. Is it mystring.Split(‘,’); or String.Split(‘,’, mystring) or write my own? Wait, in this language is the string mutable? Does it really matter in my case?
Imagine you've got a class that holds data pulled from something like a database where the data source defines its own ID for an object. In this case, if you pull the same row twice, then there's a good chance that the 2 instances should be equal, but they won't be unless you overload the operator. Note that this is a real world example because I do this all the time at work as a decent bit of my job is pulling data from other systems (mostly SQL based).
Most of the applications out in the wild are not greenfield apps that were written in the last three years by a company on the bleeding edge. Most have an older architecture, and that's alright. To think that one is more "correct" than the other is leading yourself down the wrong path. &gt;For more simple projects with no so heavy domain logic, more simple crud operations and so on, what's the best solution how to manage codebase. It really depends on the scope, scale, and potential longevity of that codebase. Is it a proof of concept, or is it something that will be continuously built on? The former may be fine to throw together as quickly as possible with fat controllers having their way with DbContext. The latter might need to think ahead about the potential needs of the codebase 6/12/18 months down the road. Failing to think of that is potentially shooting yourself in the foot. &gt;Are repositories just overhead? No, but my take on repositories isn't a typical one. IMHO having DbContexts everywhere in your code is a sign that you're far more dependent on your DB than you realize. Only when you try to make your code more testable do you realize that it's a pain, and much easier (for both consuming code and the code working with DbContext) to have interfaces that encapsulate operations to be performed against the database. Behind that interface (which I'd call a repository), have whatever data access you'd like; EF, Ado.Net, MicroORM. &gt;Experience with CQRS or any other project structure patterns ? CQRS is really good when you have to scale the read side independently from the write side. Do you need that? Are you prepared to deal with the issue of coordinating the read and the write side? Are you finding that your app is having trouble scaling? Every architectural decision is a trade off. It's very hard to define those trade offs early on in development, so try and put those decisions off for as long as possible. Would you rather split an app into a Read side and a Write side or combine a split app into one? I'm not saying either is easy, but if you're doing the former it's because you've grown to the point of needing it. If you're doing the latter, you've probably jumped into that decision sooner than you needed to, it wound up being unnecessary, there was a lot of pain with the app being split, and bringing the read and write side together was better than keeping them split.
what did your `Either&lt;T1, T2&gt;` do?
Ah I can tell you one. When creating a game once I used `structs` as a sort of tiling system. Where tiles were a struct with an `x` and `y`. It was experimental, but TL;DR I overloaded `+` and `-` to easily grab tiles in a relative fashion.
They never overloaded equality with good reason: the standard practice is to overload equality only on value types when equality is meaningful, not on mutable reference types because a) reference equality is much faster and built-in by default, and b) certain assumptions in the Framework are made about equality: 1. If there is a valid equality (==) between x and y, it should always produce the same result as x.Equals(y) or y.Equals(x) and if there is a valid inequality (!=) between x and y, it should always produce the same result as !x.Equals(y) or !y.Equals(x). 2. If two objects x and y exist, for which x == y or y ==x, then x and y should produce the same key when stored in a hash table. The first one is fairly obvious: if you're checking for equality, you want *all* variants of equality checks to always return the same, consistent result. This is why Microsoft recommends that when you overload == or !=, you overload both and also override Object.Equals() to ensure identical semantics. The second one is less intuitive on the surface until you remember that many internal operations in .NET rely on some type of hash table for speed. That lets us do something like: var x = "key1"; var y = x; if (x == y) { var ht = new HashTable(); ht.Add(x, "value1"); // Remember this is no different than saying ht["key1"] var htValue = ht[y]; Debug.Assert(htValue.Equals("value1")); } It would be very bad if that Assert() was suddenly not true, right? Sorts, searches, comparisons...think of the number of things that would be broken! The point is that you don't want to introduce nonstandard equality behavior and you don't want to waste cycles checking equality when reference equality would be sufficient. Instead, C# provides the methods Object.Equals() (and the partnered Object.GetHashCode()) as a method to override and implement a check for custom equality while still preserving the equality operator for internal operations. 
Why exactly?
Look up the Model-View-Presenter (MVP) for Winforms.
One of the biggest causes of bugs that aren't visually recognizable in code is when something isn't in an expected scope, like the content of an if statement. Forcing use of braces even when they aren't required effectively removes that cause. Yes there are other ways around this, but using braces (or whatever language thingies are appropriate) generally requires the least mental gymnastics.
Not that I'm aware of in EF but that seems like a really quick extension method to write and would actually save me some effort at my work and I now plan to do this tomorrow...
No, but that is trivial to write yourself. public static IQueryable&lt;T&gt; When&lt;T&gt;( this IQueryable&lt;T&gt; src, bool condition, Expression&lt;Func&lt;T, bool&gt;&gt; predicate) { if (src is null) throw new ArgumentNullException(nameof(src)); if (predicate is null) throw new ArgumentNullException(nameo(predicate)); return condition ? src.Where(predicate) : src; }
It either contains a value of `T1` or a value of `T2`. Accessing that value directly is forbidden. Instead it comes with special methods that call a delegate if the value is `T1`, or call another delegate if the value is `T2`, e.g. myEither.Map( (T1 value) =&gt; /* Do something if the value is of type T1 */, (T2 value) =&gt; /* Do something if the value is of type T2 */); The result will an `Either&lt;,&gt;` with the types returned by the two delegates, so calls like this can be chained. This concept comes from and and is heavily used in functional programming. Personally I think it does not play really nice in C#, but is fucking awesome and results in so much cleaner and more reasonable code in F#.
I honestly hate horizontal layers. They ultimately lead to a "structured mess". I much prefer vertical layers, aka feature layers.
I was thinking something more like public static IQueryable&lt;R&gt; When&lt;T,R&gt;( this IQueryable&lt;T&gt; src, bool condition, Func&lt;IQueryable&lt;T&gt;, IQueryable&lt;R&gt;&gt; predicate, Func&lt;IQueryable&lt;T&gt;, IQueryable&lt;R&gt;&gt; elsePredicate ) =&gt; condition ? predicate(src) : elsePredicate(src); with an appropriate overload for T -&gt; T queryable mapping where else is optional.
Don't use `Func&lt;&gt;` with `IQueryable&lt;T&gt;`. Always use expressions.
Change it so it spans 2 columns and aligns right when expanded?
CQRS/ES
Added the ones I used
I edited the OP with sites I used.
Added to my comment
I've tried this, but I guess I missed some 'gotchas' and I couldn't get it to work, maybe you have that piece of code handy?
The only practical example I can think of doing it the way of my examples is if you just want the ID of something to pass around instead of the whole object, then other parts of the application can do queries on the ID.
Sounds like you're trying to create a discriminated union
That's essentially what it is, yes.
OP: If you play with event sourcing just be aware it's quite situational. It doesn't play nicely with every scenario and it can be hard to right size the events, especially on new applications.
&gt; All information systems are inherently CQRS/ES but are implemented badly due to old paradigms that are no longer relevant. Every source of information I come across on CQRS/ES says that it should be used carefully in the specific places that it is warranted, and that it should not be used across an entire system without thought, because it increases complexity.
Yup, which is stupid, because many developers like myself stay away from all these hot and hip frameworks as long as possible until they've matured enough, I can be certain that they'll be around for a while, and there's a solid business case for it rather than just dogmatically using it because someone says so. Plus my productivity is far greater using just low level/small libraries/frameworks (such as jQuery) and raw techniques because I can do everything in them and am not limited to a canvas that a certain library/framework often establishes. I never did touch Ruby. I won't even consider switching to .NET Core until I can be certain I can do anything with it that I do in Standard now, and there's a solid business case for it (everything I make now runs on Windows servers). I only recently started using Angular.
FYI, `DateTimeOffset` is a better replacement for `DateTime` in most cases.
You can use margins around the content in the column to pad it out, then set them to 0 when it's expanded, or you can use negative margins to make it overlap other content.
I'm like this. I remember generalities about algorithms and not specifics; I know a number of languages (basic, pascal, forth, c, c++, c#, 6502 asm, z80 asm, 68000 asm, 8086 asm) and rather than remembering everything specifically I think of the algorithm I want to write then look up the syntax of the specific language in the manuals (or google it). I'd probably do terribly in an interview yet I've been programming for 40 years. I've even programmed computers with dip switches (no monitor, no mouse) and punched cards.
It's CYA. It decreases complexity. We have decades of working around Moore's Law to have tooling and a mindset over limiting storage needs - ie, we're hiding greater complexity. Those limitations no longer apply.
Nice to know, was there a question somewere in that statement?
There is no good way. The *best* and safest way is to use something like Roslyn to analyze the code and explicitly use a **whitelist** to only allow calling specific whitelisted methods.
&gt; the standard practice is to overload equality only on value types when equality is meaningful, not on mutable reference types You can overload them on immutable reference types, like it's done on string. 
&gt; sucks in the other 5% What's an example?
Interesting, thanks. Do you know specifically why CAS is considered unsuitable? Assuming I do something like: PermissionSet permSet = new PermissionSet(PermissionState.None); permSet.AddPermission(new SecurityPermission(SecurityPermissionFlag.Execution)); to ensure an absolute minimum of permissions, is there a specific way that this can be abused?
&gt; The most used architecture patterns from your experience [Big Ball of Mud](http://www.laputan.org/mud/)
&gt; Are repositories just overhead ? There are so many techniques and patterns (e.g. I'm thinking of DI + IoC container) that can be demo'd in a simple app. And every time it's true to say "that's overhead, you don't need all that complexity". No, you don't, _in a simple app_. The real test is do they help you manage a large app. But you can't easily demo that large app, sop you demo a simplified example that doesn't need it.
The code would crash if the question mark wasn't there and the FirstOrDefault returned null. No choice.
I did a quick and dirty mockup, it's not a 100% right but I think you will get the idea public partial class MainWindow { public MainWindow() { InitializeComponent(); } private void UIElement_OnMouseDown(object sender, MouseButtonEventArgs e) { if(!(sender is StackPanel clickedPanel)) return; clickedPanel.Width = 200; var panels = MainGrid.Children; foreach (var panel in panels) { if (panel is StackPanel currentStackPanel &amp;&amp; clickedPanel != panel) currentStackPanel.Width = 100; } } } &lt;Grid x:Name="MainGrid"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="Auto" MinWidth="100"/&gt; &lt;ColumnDefinition Width="Auto" MinWidth="100"/&gt; &lt;ColumnDefinition Width="Auto" MinWidth="100"/&gt; &lt;ColumnDefinition Width="Auto" MinWidth="100"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;StackPanel Grid.Column="0" Orientation="Vertical" MouseDown="UIElement_OnMouseDown" Background="Blue"&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;/StackPanel&gt; &lt;StackPanel Grid.Column="1" Orientation="Vertical" MouseDown="UIElement_OnMouseDown" Background="Red"&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;/StackPanel&gt; &lt;StackPanel Grid.Column="2" Orientation="Vertical" MouseDown="UIElement_OnMouseDown" Background="Green"&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;/StackPanel&gt; &lt;StackPanel Grid.Column="3" Orientation="Vertical" MouseDown="UIElement_OnMouseDown" Background="Yellow"&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;TextBlock&gt;SomeText&lt;/TextBlock&gt; &lt;/StackPanel&gt; &lt;/Grid&gt;[link](https://i.imgur.com/Oq9Cbw1.png)
Your opinion doesn't seem to match with the opinion of CQRS/ES advocates in the public realm. Is there a reason we should trust your opinion over that of the CQRS/ES advocates? Are you an expert in this area? (I don't mean that sarcastically. I want to know).
Clippy? Is that you?
The obvious, most secure way is to write your own compiler. With this you can control absolutelly everything. The downsite is that writing a compiler can be an incredible hard task. If you give us more details about what code you're going to execute we could point you to the right direction. For example, using Lua is a common solution. If using Lua is possible in your scenario, it's probably going to be the option with better balance between flexility, security, stability and maintainability. 
Is this code in the full fat dot net framework? Do they have a dot net core version perhaps? If it is dot net core, you could always throw it in a docker container and get your sandbox in the container. Blow the container away after you are done. 
Alright thanks Ill try that
Dynamically changing button sizes and things based on high-level changes such as detecting a touchscreen or branding settings should be handled by the viewmodel, BUT it would most likely change something higher up than just the height or a set of strings inside (what I consider) a top-level view model. It may be better to have a full branding class that gets used, loaded with stuff, and displayed rather than sticking those props in the upper levels of a view model. For a touchscreen, I would actually suggest something more like how UWP handles it and just create a whole ‘nother view that has a layout designed for touch screens (same view model of possible). It also doesn’t have to be an entirely new window or anything, it could just be another grid or panel that just has a visibility bound to a touchscreen-detect property. Just a thought. My guess is our ideas about MVVM aren’t that different, we’re just thinking of 2 very different use cases where we’ve seen MVVM stretched to its limits in a way it probably wasn’t intended to do. 
It uses the `Microsoft.CodeAnalysis.CSharp.Scripting`, which, as far as I know, is not available in .Net Core. So I'm stuck with Framework I'm afraid. Thanks for the suggestion though.
No. He should build his own computer, including an own processor architecture. Then he can control absolutely everything.
&gt; If you give us more details about what code you're going to execute we could point you to the right direction. I'm building something along the lines of ".Net Fiddle", where the user can type code into the browser and run it. I'm planning on integrating that with a series of "Learn to program" videos and tutorials, so that users can view the tutorial, type their code, and see its output as it runs. It started off just being something I was doing for fun. I happened to mention it to my professor, who suggested it could make a good starting point for a dissertation for my masters degree. But if I'm going to do that, I need to show that I understand the limitations of the techniques I'm using, and followed best practice. It's unlikely that it will ever be used by the public, but it will be studied by my professors which is more than I'd originally planned when I wrote it!
Good idea. OP must buy an ASIC. 
Windows containers exist as well. 
The mono team ist working in a port of the CLR to web assembly. As far as I know Blazor is running .net code in the browser using this technique. the challenge might be (or not) to run roselyn in the web assembly clr. Take the compiled .dll and execute it.
Let's say you have a Dollar class. And you see this in code: \`\`\` Dollar result = dollar1 + dollar2; \`\`\` You will know that `result` will have the Sum of the amout of dollar1 and dollar2.
Can you explain what you mean, or link to some resource? I consider what I described to be feature layers, and thus vertical. Because the general business services call out to other more specific business services (i.e. a service that represents a feature). 
A lot of projects have an onion architecture. First a web project, then a business project, then a data access project. Each project represents a horizontal layer and has a strict responsibility. Sounds good so far, but as the project grows the pain will grow too: Each of the layers grows with each new feature. You have three large projects that contain code for every single feature. With vertical slicing you create projects per feature. You have one project for dealing with web, business and data access for specific feature ABC, and another project for feature XYZ. If you want you can create each into three smaller projects too, but I consider that too much overhead. Features are now nicely encapsulated and don't spread through large projects, gubbled together with all other features. It's a step before Microservices (which just make with DDD and CQRS really good sense). https://medium.com/@jacobcunningham/out-with-the-onion-in-with-vertical-slices-c3edfdafe118
Oh, interesting, thanks for the very quick response. 
First I would try to compile and execute some code using roslyn in web assembly. To do so ckeck out blazor and the templates. https://github.com/aspnet/Blazor
I am not the person you are replying to, but IIRC, I think it has something to do with .NET Core not fully supporting `AppDomain` like explained [here](https://stackoverflow.com/questions/27266907/no-appdomains-in-net-core-why). I explored trying to make a C# analog to [Screeps](https://screeps.com) and one of my concerns was being able to sandbox the code that users "committed" to the game server.
I cannot speak highly enough of RavenDB. Absolutely love it. It can run embedded into your application as well (so end user doesn’t have to install anything). And it’s free for most uses
User supplied code is not "Partially Trusted". It is the enemy. Whether intentional or not, it will find a way to mess things up. The best way is running untrusted code in a disposable, restricted container or VM. Language level constructs don't really offer enough safety for something like this, is my opinion. 
As is mentioned below, String has a custom equality operator (it's certainly not cheap), and it's a great example of why Java made some bad choices on this topic. Reference equality makes sense as a default (although even there, I'm beginning to have my doubts), but IPAddress is an immutable class. It behaves like a value type except in terms of equality, where it's only partially implemented. This isn't a good choice on the part of the .NET Framework team, it's simply an oversight.
 T foo = (T)obj; Or do you mean something else?
I think this definitely sounds like the route I'm going to look into. Thanks.
The warning appears to apply specifically to Framework, not Core, so I don't think that's it. I think there's something more than that, and other posters have suggested alternatives. Thanks anyway.
My 2 cents: I would try to avoid loading those assemblies in the same process as your application. In vanilla .NET there was AppDomain. You spin up a new appdomain, load assemblies there, and then you can use those objects, call objects on them, etc... It is harder, and you must do marshaling / unmarshaling of parameters and results. Also, it hits the performance. It is not the same as calling methods on objects on your own AppDomain. But you can keep isolated and quite safe. For .NET I believed that they weren't bringing AppDomains, but there are similar solutions. The other day I saw this: https://natemcmaster.com/blog/2018/07/25/netcore-plugins/ What do you think?
By "implicitly convertible" do you that `Foo&lt;T&gt;` declares a conversion operator to `Foo` but does not inherit `Foo`? If so, there's no "clean" way to do so, easiest workaround would be to cast to `dynamic` first.
Why would you do that? When reading the code I need to know that you've overridden implicit (which I confess I've never heard of) and I need to know what the mapping is between int and ExitCode, or else keep checking back. Seems far easier to return a descriptive enum?
Well thanks for answering anyway
If you're free to choose the language, I say you should go with Lua. It's trivial to limit the API a program can access, also its syntax is really simple and its runtime is tiny -- all the reasons why it's so used for user-defined plugins in videogames. If using C# is a must for you, you have a problem. I can't think of any way to limit the API the user can access. Perhaps you should limit the environment running the program (the virtual machine), so the user would still have access to the `System.IO` API but it would raise an exception at runtime for not having permissions (the same for http requests etc). Too bad you can't build your own language for this. It would have the benefit of rich error reporting, which is very important for people learning programming, and also you could control things like the amount of iterations a loop can perform (to avoid infinite loops for example). 
Some really good ideas. &gt; If you're free to choose the language, I say you should go with Lua I am free to choose the language, but I'm not familiar with Lua. I will investigate it to see whether it's worth the learning curve. &gt; the user would still have access to the System.IO API but it would raise an exception at runtime for not having permissions In fact, I've already got that working using the techniques on the Microsoft page I linked to, but Microsoft suggest that this is not enough. &gt; Too bad you can't build your own language for this I'm thinking of using this for the dissertation for my Masters degree. I wasn't planning on doing a PhD, but if I change my mind, you may have just given me an idea for my PhD dissertation!
I don’t have a supervisor yet, but once I’ve been allocated a supervisor and agreed a scope I’ll find out if this is allowed. Thanks.
There are a lot of reasons why that’s not a good approach. For one, I can easily cause you grief; I could allocate a very large array and cause OOM exceptions, overflow the stack, run an infinite busy loop and hog all of your CPU cycles, etc.. Generally a good enough approach is to use containers to run the code in a sandbox. This might be a good option for you. It’s fast and if you’re on Linux you can easily isolate _most_ attack vectors (via apparmor and seccomp profiles) and you can kill the process if it runs too long, along with setting memory and CPU limits. This is also how coding competitions work. Alternatively, use JS (or some language that is transpiled to JS), and run the code in a V8 process. In either case, you want untrusted code to run in an _out-of-process_ sandbox. However if you want strong isolation, virtual machines are the only answer right now. 
Suppose you are writing a CLI framework that is intended to be used by other devs wishing to create their own console CLI. Since exit codes will vary for each possible CLI, you can't create a "generic" enum to apply to each. However, I believe they recently added/will be adding generic constraints for enums which may basically make `ExitCode` obsolete. If that is the case, an enum would be better and you could do something like this: public interface ICommandHandler&lt;TExitCode&gt; where TExitCode : enum { TExitCode Execute(string[] args); } At the end of the day, you still have to convert to an `int` before returning from `main`, though. Without the enum constraint, `ExitCode` is useful. Each CLI are free to define an "enum-like" class like this: public static class ExitCodes { public static readonly ExitCode Success = 0; public static readonly ExitCode InvalidArguments = 1; public static readonly ExitCode Unauthorized = 2; public static readonly ExitCode GenericError = 3; //etc. } Of course, the above class does break the Open/Closed principle. Also, my implementation of `ExitCode` can also implicitly convert any enum anyway, so you could do something like this: public ExitCode Execute(string[] args) { //omitted return MyErrorCode.Success; //return MyErrorCode.Fail; } Plrase note that I don't think `ExitCode` is the most valuable thing. I simply wanted to illustrate that overloading the `implicit` operator can be useful/syntax sugar for specifying what a return is *semantically* when your return is a primitive/string and its purpose can't be easily understood by the method's name (i.e `string GetPersonName()` vs `int Execute(string[] args)`). Basically, by overloading the `implicit` operator to add semantics to primitives, you are effectively extending the available primitives. This can all be abused, however, and you are right -- the implicit conversions of `ExitCode` aren't immediately obvious to consumers, so the benefit of removing the ambiguity of returning an `int` may be dimished or completely offset.
Only for high cpu counts. [pricing](https://ravendb.net/buy) 
Windows Containers can run old school dot net framework? 
It's not a matter of opinion. You can believe what you want. I'm one if the biggest CQRS advocates out there. I was one of the contributors to Microsoft's CQRS Journey book.
You might be looking for the [Factory design pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) Or the "as" or "is" keywords might be of help. if (foo is InheritedFoo) { ... } OR InheritedFoo myfoo = foo as InheritedFoo
Thanks for the detailed response. I love this shit.
Yup, it also avoids the user having to install anything seperate on the system, which OP seems to want to avoid.
Did you do this on linux?
Thanks, waiting for this
How is licensing going work if OP wants to embed community edition? Tried to read about it from RavenDB homepage but couldn't find any information about it.
Haven't tried this yet, but I thought of using it in my next project that will need an embedded database. http://www.litedb.org/
Could you share how did you get libvlc binaries to use with Vlc.Dotnet? Their wiki page is about using it on windows, I'm unable to find something similar for linux
If `Foo&lt;T&gt;` inherits from `Foo`, then every `Foo&lt;T&gt;` is also a `Foo`, so it should be safe to cast directly to `Foo`. If not, you could probably get there with reflection. Foo Convert(object o) { var t = o.GetType(); return (Foo) t.GetMethod("op_Implicit", new [] { t }).Invoke(null, o); } That will get messier if you have multiple implicit conversion on `Foo&lt;T&gt;`, however: you'll need to use `Type.GetMethods()`, instead of `Type.GetMethod()`, and search through the results for the one with the right return type.
Consider a filesystem-like structure. Folders can contain files or other folders. The contents of a folder is ordered heterogeneously. Then you might have something like this. class Folder { IList&lt;Either&lt;Folder, File&gt;&gt; Contents { get; } /* ... */ } Using the implicit cast operator on `Either`, you can do this. folder.Contents.Add(new File("foo.txt")); 
Like python's `NoneType`? That's not particularly numeric.
Operators are resolved staticly. I don't think operator overloading has any relevance to that case of working with generic parameters.
[according to Ayende](https://ayende.com/blog/178434/ravendb-4-0-licensing-pricing) it’s the same. Free as long as it’s limited to a few cores on each deployed machine, no clustering. 
That's bonkers! I love it.
You could use a Windows container or Linux container
So how is OP going to share that app with other people with licensing like that? I mean how is he/she going know cores etc. of peoples machines?
&gt; cqrs + event sourcing I can't imagine ever calling any variation of this 'The Simplest possible thing'
They mentioned blockchain and IoT. How could you not take their opinion at face value? /s
Can you post your code? ICollectionView has a filter property: ICollectionView someView = CollectionViewSource.GetDefaultView(someCollection); someView.Filter = codeForFilterHere; 
Also if you need to add statements to an if block later with one line of code already there, already having brackets means it is a no-brainier to just add more as well as easily visualizing code blocks in general. They cost nothing except a few extra bytes in the source.
I feel like everybody is thinking about your post a bit too seriously. I'm assuming that you understand or at least aware of practical naming conventions. With that aside, there's been so many variables I've wanted to give a ridiculous name like "userShit" or name a method "DoSomeShit" but those obviously aren't good descriptions of what's going on. Actually, the confusion could potentially get out of hand pretty easily since profanities aren't very good adjectives. But it could definitely be entertaining. \&gt;"We put the input into this variable, called 'fuckYourDescription' which concatenates with the string returned from calling the 'GoddamnParse' method before adding it to the HttpContent and passing it through the 'bitchAssAPI' HttpClient. " &amp;#x200B; No idea if this has ever been a thing but if so that'd be crazy.
On Windows you can use an [AppContainer](https://docs.microsoft.com/en-us/windows/desktop/secauthz/appcontainer-for-legacy-applications-) on Windows which is a per-user, per-app profile which you can lock down and then launch the process with [`CreateProcessA`](https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa) - likely some p/invoking would be needed for this flow. I think you have to first create an [AppContainer Profile](https://docs.microsoft.com/en-us/windows/desktop/api/userenv/nf-userenv-createappcontainerprofile). There is an older article by [malwaretech](https://www.malwaretech.com/2015/09/advanced-desktop-application-sandboxing.html) and [related code on GitHub](https://github.com/MalwareTech/AppContainerSandbox) which may be of assistance? Then you can also go full on Windows Container, which is even stronger, or a full on VM which is strongest. On Linux you can run as a different user with restricted permissions (weakest); use [cgroups](https://en.wikipedia.org/wiki/Cgroups) which the kernel feature that Docker etc uses (if you don't want to use Docker); use a Docker container, or full on have VM. Code Access Security and AppDomains were an effect to achieve what is now built into the operating system and its main issue was its too easy to escape from as the controls are running in-proc with the code.
 Some context on CAS https://github.com/dotnet/corefx/issues/33234#issuecomment-436437239 &gt; This is horribly close to what Code Access Security tried to do, and ultimately failed to do. &gt; *As such we use a runner process which loads the user assembly at runtime and executes the code. Since the code is untrusted we would like to limit its access to resources such as network/File System etc.* &gt; The problem here is as you're loading untrusted code into your own process any protections provided at that layer are going to be exploitable in the case of buggy code. When we looked at the eroding of CAS we came to the conclusion that the framework is not the right place for this, because it's loaded into your process and accessible by anything you load. The right place for this is using OS processes or separate containers/VMs, so the enforcement of permissions isn't under the control of the framework, but at the higher level.
`System.Collections.Generics.List&lt;&gt;` is array buckets.
May need more information, but I think it'll be easier just using the \[Authorize(Roles = "Admin")\] description in your controllers if these things are on different pages. I think it'd be way easier just copying and pasting that all over the place instead of trying to concoct a way to create a global overreaching type of thing. Because Authorization works more as a whitelist, the admin role technically already has access to everything. You just use the \[Authorize\] tag to keep non-admins out. So I think you're kind of thinking about it backwards. &amp;#x200B; If it's an element on the page, you can wrap it with a statement to prevent it from showing up for non-admins: &amp;#x200B; @if (User.IsInRole("Admin")) { //whatever it is you want to show for admins } &amp;#x200B; That way only the admins will see it.
It's `"".Split(',')`. It's a `params` overload for char[]. There's also `string[]` accepting versions. That's from memory.
That sounds ok then. Good to know, I wish there was explanation in their web site about this.
I agree. They write really awesome software, but aren’t as good at documenting the business side of things. Thankfully they’re quick to respond to questions. 
According to this blog post https://ayende.com/blog/183555-A/ravendb-4-1-features-running-ravendb-embedded last comment Ayende (Oren Eini) is that it needs CoreCLR to be installed in machine it's running. That mean it's probably running in separe process. That will mean that OP needs to bundle CoreCLR with the app or it needs to be installed on target machine. Compared to just creating self contained exe with CoreCLR that is really simple to distribute, embedding RavenDB will complicate app install.
Have you tried it?
You can just use the implicit conversion. Why are you trying to cast? void Main() { Foo&lt;DayOfWeek&gt; ft = new Foo&lt;DayOfWeek&gt;(); Foo f = Convert(ft); } Foo Convert&lt;T&gt;(Foo&lt;T&gt; f) { // Conversion implicitly happens here // in fact you don't need this function at all. return f; } class Foo { } class Foo&lt;T&gt; { public static implicit operator Foo(Foo&lt;T&gt; arg) =&gt; new Foo(); } 
You're absolutely right, of course. Honestly didn't read your link. My bad.
SQLite is a good option, for .NET I might suggest MySQL since it seems to be gaining more support and features from MS. 
So then why not have an interface public interface IControlState { bool InState(); } And have the dictionary on Control be a Dictionary&lt;IControlState, ControlStyle&gt;? You're passing the component to the ControlState&lt;T&gt; upon construction, so you don't need to know what T is to determine which controlState you're in for any given control.
Can you give me a codeForFilterHere example? Then I can try and provide one? &amp;#x200B; `var test = CategoryCollection.GroupBy(Category =&gt; Category.Code).Where(w =&gt; w.Count() &gt; 1);` But it didn't work. My code sample: &amp;#x200B; My code sample: &amp;#x200B; `public ObservableCollection&lt;Category&gt; GetCategory` `{` `get` `{` `this._getCategory = GetCategory();` `this._getCategory.GroupBy(category =&gt; category.Code).ToList().Where(w =&gt; w.Count() &gt; 1); ;` `this._getCategory = new ObservableCollection&lt;Category&gt;(_getCategory);` `return this._getCategory.` `}` `set` `{` `if (this._getCategory != value)` `{` `this._getCategory = value;` `this.OnPropertyChanged("GetCategory");` `}` `}` `}`
Both your arguments are valid. But I must admit, that having curly braces around a single statement IMHO makes the code less readable. Also with the advanced IDEs of today, any additional statements added later will get its indentation changed by autoformatting, so it will be immediately spotted to be outside of scope. 
&gt; that originally was Foo&lt;T&gt; Foo&lt;T&gt; is not the same than T.
 var fooVar = objectVar as Foo. objectVar is the object variable.
No I haven't but it's clearly in the docs here https://ravendb.net/docs/article-page/4.1/csharp/server/embedded that it uses dotnet exe that needs to be in PATH to run it. `RavenDB Embedded does not include .NET Core runtime required for it to run.`
Using a BindList as your data source would probably be the first step - see an example [here](https://stackoverflow.com/questions/16695885/binding-listt-to-datagridview-in-winform).
I would second this approach. In blazor you can inject your code processor service into your model and have it evaluated in the users browser sandbox. The support is pretty good at this point, and I would imagine there is a high likelihood your service will work as expected. Keep in mind the code in the client can't make DB calls or anything else requiring server resources. Blazor will be the future, if you can use it now I say go for it, and it sounds like a great fit to your use case.
[You betcha](https://hub.docker.com/r/microsoft/aspnet/)
CAS is dead don't use it.
My team and I have done a few app front ends using Excel VBA over the years. In VBA you can assign a variant array straight to a range. We had a couple of goes at VSTO as it looked promising. We quickly ran into all kinds of problems and limitations with interop and gave up and just used VBA ever since. I know that's not much help to the immediate issue but it might be more straightforward to achieve the overall goal using VBA instead of VSTO.
Have you tried what the error message suggested (calling Bind)? I 100% guarantee that if you google this exact error message you will find a chunk of code that you can just use.
Oh God. I feel really stupid right now
I avoid excel all together for speed reasons. I used to use the NPOI libraries. Now i pay for the devexpress spreadsheet controls and it works great for these kind of table dump and format jobs. 
C# error messages are often pretty good. Sometimes they aren't of course, but a lot of people (including me) just treat an error message as a boolean: if it exists then something is wrong and I have to figure it out. Reading the message is always the first step :)
Have you looked into SSRS reports?
Hell no.
Interesting, thanks for the answer. Do both libraries share controls / API or the difference between them is notable?
We've ended up with a selection of stand-alone applications that specifically run just one report each, but it's painful having to alter, recompile, and transfer over to whichever user wants to use it each time there's a change or update. Seems the vsto option will be fine for small work, but the big queries may have to be csv output. It's a shame as the first thing people will do once the csv file is completed is to load it in Excel! Thanks for the tip about screen updating - didn't know that was available. I'll give it go.
I'm not sure SSRS works with a Firebird database?
Unfortunately actually purchasing any dev tools (which would be a quicker solution) isn't an option. I think I may have to rethink and route around the vsto restrictions.
Something like this perhaps? private ICollectionView categoryView; private List&lt;SampleObject&gt; groupedCategoryList; private List&lt;SampleObject&gt; totalCategoryList; public List&lt;SampleObject&gt; CategoryList { get { return this.totalCategoryList; } set { this.totalCategoryList = value; } } public List&lt;SampleObject&gt; GroupedCategoryList { get { return this.groupedCategoryList; } set { this.groupedCategoryList = value; } } public ICollectionView CategoryView { get { return this.categoryView; } set { this.categoryView = value; this.OnPropertyChanged("CategoryView"); } } public List&lt;SampleObject&gt; GroupData(List&lt;SampleObject&gt; source) { return source.GroupBy(x =&gt; x).Where(y =&gt; y.Count() &gt; 1).Select(y =&gt; y.Key).ToList(); } public void Main() { this.GroupedCategoryList = this.GroupData(this.CategoryList); this.CategoryView = CollectionViewSource.GetDefaultView(this.CategoryList); this.CategoryView.Filter = a =&gt; { var item = (SampleObject)a; return this.GroupedCategoryList.Contains(a) ? true : false; }; } 
[removed]
I wouldn't recommend starting a new WinForms project. Any new project should be WPF or some newer technology, not an obsolete technology. But there are TONS of WinForms applications out there and you could easily end up working on one of those projects. So you may be forced to learn it at some point. It's really easy to pick up though. So it kinda depends on where your career is at and what kinds of jobs you're looking for.
If you work, or may work, for a company which maintains win forms app, yes. I actually like winforms, and wpf, both are useful. 
Nice advice, so it would be nice check it out at least in case I have to maintain some app.
You must call the Bind method before performing this operation.
Removed: Duplicate submission.
Removed: Rule 6, Rule 7, spam.
Only if you are starting a job that requires it.
Sorry I wasn’t challenging that part, what I meant was “have you tried bundling CoreRT with an application to see how complex deployment is.” I really didn’t make that clear, apologies. I suspect it’s pretty easy, but I’ll have to give it a try to find out. If you/OP have a project where you are certain all clients will be on windows (which WPF would make sure of) you _might_ be able to grab the 3.5 version of Raven embedded, which ran on .NET Framework. Nuget probably still has the libraries. I used it quite a bit, and was very happy with it. 
They are extremely different.
There is a metric asston of Windows Forms code out in the wild and a huge amount of development still being done on it, especially in the enterprise. Support for it from the component vendors (Telerik, Infrgistics, DevExpress) is still top tier and the vendors are still committing to Winforms as much as WPF. (DevExpress is in the process of revamping the UI rendering layer on all of their WinForm controls to use DirectX over GDI) And Microsoft is now adding support for WinForms in Core 3.0.
If you need to choose between learning winforms and wpf/uwp/xamarin forms then my advice would be to choose one of the later. It is not very clear how the future for desktop apps will develop but it is more likely to be similar to mvvm/xaml than to winforms. That being said, it is not like winforms will suddenly disappear. Instead it will gradually be used less and less. Learning it might be useful to see another approach to ui, but I think most of the things you could learn on the job if you needed it and already have experience with .net and one of the xaml based frameworks. Now I think about it I think winforms is easier to start with, and the advanced stuff is harder (ie custom rendering). In xaml the basics took some time to get right (for me, an old-school dev), but it is very adaptable.
This site has a pretty good explanation; &amp;#x200B; [https://www.tutorialspoint.com/csharp/csharp\_operator\_overloading.htm](https://www.tutorialspoint.com/csharp/csharp_operator_overloading.htm)
Good answer +1. Container or vm
There's also EnableEvents, DisplayStatusBar, and PrintCommunication (2010+ only). As for the query, I would check with /r/excel. VSTO might be more work than needed. There may be a way to use the built-in query tools on the Data tab to feed the data into an Excel formatted Table.
Lots of people still swear by WinForms for new projects. They think it takes a lot less time to build applications because you don't need to fuck around with styles and view models. Performance is great because it is mostly native and it automatically inherits the basic appearance from the active windows theme. This matters to some people. 
Also note that WinForms runs on linux via mono. 
If you've got the time, its never a bad idea to learn another piece of technology. Even if that technology is considered legacy.
I could've sworn you could. I think you have to install the Firbird drivers on the server and setup with an ODBC connection, but I'm pretty sure you it works.
The beauty of Winforms is that there is not much to learn. There's some gotchas here and there, and some widgets behave weirdly. But it's mostly intuitive. There are some aspects of data bindings which have to be learned, or you might turn it into a bit of a mess on a bigger project if you don't. &amp;#x200B;
Yeah! I saw that, I want to build a multi-platform app just to practice but Windows Forms is not that appealing, I was looking for a way of using WPF with mono but that's more complicated. Anyway I will give it a try.
SQLite is the best decision, is simple, efficient and doesn't require anything but a simple file. I use it all the time.
&gt; If I want to give someone my software. Choosing a database platform is like choosing a doughnut: Having more to choose from is always better! Write your software using [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) and your client can choose the creamy filling or the sprinkle topping. Or both :). 
I really don't see how if(agent == TheAgent) { return queries.Select(q =&gt; q.Name); } is less readable than if(agent == TheAgent) return queries.Select(q =&gt; q.Name); IMO it's more readable, because you have vertical spacing between the if and the rest of the block
And after this one?
I was hoping you were going to tell me.
It's worth being at least familiar with. Tons of jobs use it and you might need to maintain or add on to an existing one. Im actually in the process of writing one right now. Most of what I do is web, but sometimes I do desktop. I'm faster with WinForms than I am with WPF so that's why I chose it this time
I've been working with Microsoft stack for 20 years at this point. Don't bother with WinForms, unless your job requires it. WPF is where it's at, when it comes to desktop development these days.
&gt; or you might turn it into a bit of a mess Which is what 95% of the real world WinForms projects looks like, at least judging by the ones I've seen. This is the beauty of WinForms: The worst possible code will work and people will just accept it as is.
What about writing out directly to XLSX? You can create the file on a machine without Excel and then users can manipulate the data in Excel after the fact (which is most likely what you need the Excel file for...) https://blogs.msdn.microsoft.com/chrisrae/2011/08/18/creating-a-simple-xlsx-from-scratch-using-the-open-xml-sdk/ 
Adding to this, I recommend learning winforms simply because you can learn the basics of it very quickly and it’s not a huge investment of time.
Yeah, I've worked for a few companies that still maintained winform apps. I'm not saying to learn it and nothing else but it's still pretty useful and it comes in handy if you just need to quickly build a UI for a prototype.
Nice advice! I never thought about prototyping, I think Windows Form can be pretty handy for that matter.
I have worked for several companies that still maintain and use a ton of winform apps, also very easy to use to do something quick and easy. 
It has a performant graph control. That's about it.
WinForms is drag and drop. It’s probably the easiest front-end framework you can possibly learn. 
Shit so what now
Well, bro... I mean, want to split a cocaine or something?
I'm down, where and when? maybe that tim corey fellow has some
Well, you can also drag and drop on WPF but there's still a logic behind it that you have to implement and sometimes modify by yourself. I like the way you can design user interfaces in WPF/Xamarin just by writing a simple XAML file.
WinForms, WPF and UWP are all native. The latter render with DirectX instead of GDI+ which makes them more performant because of hardware accelaration. Of course that is depending on the hardware, but most desktops, laptops and tablets should be able to use hardware accelaration. [Source 1](https://docs.microsoft.com/en-us/dotnet/framework/wpf/graphics-multimedia/wpf-graphics-rendering-overview) [Source 2](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/graphics-rendering-tiers)
I’m not saying he should learn WinForms over WPF. What I’m saying is that it’s worth learning because you can master it in less than a week. 
WPF may technically use DirectX, but it is implemented so poorly that GDI/GDI+ software rendering is faster and more efficient in most cases. No experience with UWP.
Nothing wrong with using WinForms. It's usually faster than WPF and not Windows 10 exclusive like UWP.
This couldn't be more true. DialogResult.NoThanks.
So it's the PHP of the .net world?
Winforms is the closest you'll get to "pure" Win32 in C#. That can occasionally be useful. For example, the Windows Forms ListView is effectively a wrapper over the Windows Built-in ListView control, which means that there is a lot of information, articles, documentation, etc covering it. The interface (Visually as well as interacting with it) tends to be more consistent with other Win32 Applications- WPF Applications have their own distinct look which has always made me regard it like Java's Swing. There is also the angle that Windows Forms applications are often much easier to port to other platforms, especially compared to WPF. 
Depends of your goals. What are you trying to achieve?
&gt; Why aren't these things being developed anymore? People these days prefer deploying a web app packed into a full featured, stand alone browser. It's like a hundred times slower but apparently people can't do UI without reactive javascript libs anyome. Sad but true. ¯\_(ツ)_/¯
That sounds really good, I'm thinking in learn about it at least for prototyping and just in case I need to maintain an app in the future
Faster? That sounds interesting, it would be nice to see some kind of benchmark. BTW I think WPF can work on other Windows version besides 10.
Right now just learning, my main stack consist on PHP and JavaScript plus some frameworks, now I'm focus on learning C#, anything from console and web applications, to desktop and mobile applications, I'm planning to work as .NET developer in the future, right now I'm just looking for the things I must know.
&gt; value types (structs) would be the main 'new' thing you will run into early on. And good generics. And LINQ. And language-level async/await. And properties for getters/setters. And type inference. And extension methods. And anonymous classes. 
What Mono/.NET version are you using in the GTK+ example? Compilation shouldn't fail.
I have made the switch from Winforms to WPF to javascript/react/node aver the last decade. Yes, you can make a shit-ton of money in COBOL and winforms, and it could be practically guaranteed employment. But the "webdev" train is moving at a breakneck speed in the meantime, around, you, and _without_ you. Webdev comes with a constellation of tools that are fast moving, and it makes thinks interesting, and fresh, and always better. Every hour invested in Winforms is an hour that you can't invest in the browser, or on the backend, or devops/docker, or node/express, and so on. 
The instructions here mention this: &gt;The build is the traditional: &gt;./configure &gt;make &gt;make install When I try this on my system: $ ./configure bash: ./configure: No such file or directory $ make make: *** No targets specified and no makefile found. Stop. $ make install make: *** No rule to make target 'install'. Stop. 
.NET Core 3.0 but only on Windows. Just to be clear, even though .NET core is supposed to be cross platform, winforms won't be available on Linux and Mac
Here are a couple cross-platform GUI projects that are actively being worked on, however they're both still in beta: * [Avalonia](https://github.com/AvaloniaUI/Avalonia) * [QML.NET](https://github.com/qmlnet/qmlnet)
WPF isn't "native" in the sense that the OS rendering the UI like it is with many of the WinForms controls. Instead it relies on .NET to communicate with DirectX, which often results in performance issues. That's one of the reasons why UWP uses C++/COM for building the controls that communicate with DirectX for rendering. (There are other reasons, such as allowing fully C++ applications to use the same UI framework as UWP+.NET applications.) Hardware acceleration helps with WPF's rendering, but "helps" isn't the same being fast. WPF controls are far more complex than WinForms (well really Win32) controls and often need that hardware acceleration to get decent results.
It doesn't have to be that way. You could write in a proper model-view-controller style. But lets be honest, most people don't.
Don't bother with drag-and-drop in WPF. It is incredibly fragile and you are much better off just starting with working in raw XAML.
I've done my own measurements years ago and don't have them anymore. Here's a good link regarding WPF performance though: https://jeremiahmorrill.wordpress.com/2011/02/14/a-critical-deep-dive-into-the-wpf-rendering-system/ 
Yes, WPF is available at least back to WinXP. What he was saying is that "UWP" is only on Windows 10. 
The application I work on is a 14 year old legacy PHP5 project, which I am tasked with moving to PHP7. We've written a really amazing tool to get used to php7 features and made it a priority to write the best, cleanest, organized, well structure project we could. It still feels like a dirty asshole of a language.
I use [Eto.Forms](https://github.com/picoe/Eto) for business application. It's production-ready and works great so far. 
All the downsides of a web app with none of the advantages! Don't you love it? A lot of people start to learn programming with JavaScript and that's all they know. A man with a hammer sees every problem as a nail.
I use it CONSTANTLY for developing small tools, or proof of concept classes to import into larger projects later. Not as much as console, but pretty damn close. 
I guess that's just where you and I differ. :-)
Because it just works and you can guarantee how it will work on every platform. I never felt like any of the desktop JavaScript apps were slow. They all run just great.
Which one is that?
You can have a look at [https://github.com/picoe/Eto](https://github.com/picoe/Eto) and [https://github.com/mono/xwt](https://github.com/mono/xwt). Both are actively being developed and both use gtk-sharp for the GTK backend. 
WPF sucks
How?
Even though it's correct, I honestly see no future for Electron. It really feels like a passing stage to me. Even as a Javascript developer, I don't use it nor will use it. People are not using it because they want to, they are using it because they must to, if you look around you will find there is no a lot of cross-platform UI frameworks, there are C++ but I doubt anybody would learn it(since it has a very steep learning curve) there are Java, there are Python but it's slow as hell! and...that's it. Once there will be cross-platform ways to build desktop programs, Electron will just disappear. That's what I meant with "passing stage"
You can place an icon in the notification area. It has to be 16x16 though; you cannot make its size flexible like date/time is.
It will be interesting to see if MS makes a move in this space. I mean it's nice .NET Core is multiplatform but without a supported cross platform GUI toolkit, the whole cross platformness thing seems a bit half assed (to me anyway). Xamarin.Forms could be a potential solution to this. 
&gt; UI rendering layer on all of their WinForm controls to use DirectX over GDI This seems cool and pointless at the same time. WPF is using DirectX too but still doesn't makes it " overall faster" when compared with WindowsForms. 
I’m not sure if this is exactly what you’re looking for, but it may have some functional overlap. https://github.com/PhilipRieck/WpfAppBar
Try this [Animation and Text in the System Tray](https://blogs.msdn.microsoft.com/abhinaba/2005/09/12/animation-and-text-in-system-tray-using-c/) link.
Depends on what you want to achieve. WPF has a steep learning curve but I personally found it worth it. That said however, they modern methodology is that your application should exist with business logic and presentation layer separate, so the same code can exist as a WPF desktop application and an ASP.NET application, at the same time. If the goal then is to get a prototype out real quick then it *might* still be worth using Forms. I'm not entirely convinced on that - if you want anything fancier later like automatically generate your buttons in a listbox for each item, with minimal effort, automatically bound to an eventhandler or command, you'd have to migrate to WPF anyway... so yeah I'd say Forms isn't the best option.
Web assembly to the rescue! Blazor rocks.
&gt; WPF is using DirectX too but still doesn't makes it " overall faster" when compared with WindowsForms. It's probably not about speed, but to mitigate the amount of rendering artifact that you get with Winforms. 
Hey, i had to something similar stuff. The slow part is i think the for each row part. If you really want to speed it up, you have to manipulate the data in code. So not per row and then paste it, rather manipulate it as a data object in code, select the range the same size the data object is and then paste it to this area. I hope this tip helps &amp;#x200B;
&gt; public List&lt;SampleObject&gt; GroupCategoriesByCount(List&lt;SampleObject&gt; source) &gt; { &gt; return source.GroupBy(x =&gt; x).Where(y =&gt; y.Count() &gt; 1).Select(y =&gt; y.Key).ToList(); &gt; } &gt; Does this example work if I have used ObservableCollection? I'm kind of bounded to it. 
Yes. https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.observablecollection-1?view=netframework-4.7.2#extension-methods 
It *is* possible, but you have to make it fit in a 16x16 tray icon.
 Windows Forms is reliable, well supported by both built-in and third-party controls, and easy to learn.
I don't know anything about ZedGraph, but I do a lot of work with industrial process data (involving temperature sensors, pressure sensors, etc) and a common requirement when visualizing time series data is to reduce the data set down to a size that is no larger than the number of horizontal pixels on the screen. I'm not sure exactly how well this would translate to what you're doing, but with time series data, you would typically do something like the following: * Split the data set into a number of buckets, where each bucket covers the same duration of time (e.g. your time range might be 7 days, and you might choose to have 1000 buckets, with each bucket covering 604.8 seconds of the overall time range). * In each bucket, reduce the set down to points that are more likely to be "relevant" e.g. first, last, minimum, maximum, or any other criteria that you want to apply. * Display the reduced set. In your case, I suspect that you could take a similar approach, but your methodology for choosing which points to visualize would have to be customized to your needs.
I started a new internal tool at work just a few weeks ago that uses WinForms. I haven't used WPF much, but it does seem like a much better designed library. However, for small tool programs, the simplicity of WinForms wins out IMO.
&gt; I feel like everybody is thinking about your post a bit too seriously. You get it :) I'm so happy! The thing about the names I posted was just illustrative and I LOVE your quote xD
&gt; Since the columns are limited to a particular number of bytes, I can't exactly substring the intended value... And why not? That is the cleanest approach (besides rejecting invalid data as part of validation), and nothing stops you from doing it.
&gt;And why not? That is the cleanest approach (besides rejecting invalid data as part of validation), and nothing stops you from doing it. Well I'm not sure... Can I safely assume that 1 character == 1 byte? I would have thought that making such an assumption would be negligent...
unless you're going to be maintaining old legacy code for your job, no.
You can not safely assume that 1 character == 1 byte. But you can just check how long the string would be in a specific encoding and start truncating. What encoding are you even using? ASCII?
And by none of the advantages you mean: works on every platform, looks natively and roughly the same on every platform. Also, has auto-update, crash recovery and logging, process isolation, media support without per-platform implementations of codecs and the same about GPU things like 3D or heavy 2D, universal networking and it just works (tm).
I haven't explicitly set any encoding so I don't know what it is... Not sure if its helpful or not but I did this... ASCII at least seems to be 1 char == 1 byte based on the results... I'm thinking of getting the bytes length of the input string and actually just saving the first *x* bytes of the string that fit in the column... I may still end up with data loss, but the error will be handled. var stringLength = 20; var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321 "; var rng = new Random(); var output = string.Empty; int i = 0; while (i &lt;= stringLength - 1) { output += chars.Substring(rng.Next(0, chars.Length), 1); i++; } Console.WriteLine("Length = {0}", output.Length); Console.WriteLine("Value = {0}", output); Console.WriteLine("Byte Length = {0}", Encoding.ASCII.GetBytes(output).Length); &amp;#x200B;
&gt; auto-update, crash recovery and logging, process isolation, media support without per-platform implementations of codecs and the same about GPU things like 3D or heavy 2D, universal networking Yep. Even if we don't use any of these. &gt; looks natively It's a web app. It looks like an web app. &gt; works on every platform Of course it does. You're literally asking your customer to re-download the entire Chrome just to run your app. --- These days I had 5 Chromes open in my PC: * spotify * vscode * slack * postman * the regular one But that's OK I guess... Chrome is known for its efficient use of memory... Right? 
Best option off the top of my head: Set the form to be always on top, borderless and force set the position using Top,Left,Width,Height. You can draw to an image and set the application Icon to that image but that is going to be really small on the taskbar, maximum 32x32.
If your boss cannot give you the maximum length of the data, you'll just need to make the columns large enough. Try to determine what the maximum sizes are based on the input you get. &gt; My boss is telling me we need to increase the size of the column. As it seems that data loss is not acceptable, without enough information, increasing the size if your best bet.
It looks consistent, not native. \_Defiantly\_ not native.
It's Active Desktop all over again. Maybe it'll stick this time, but the problems that existed previously are still there. [https://en.wikipedia.org/wiki/Active\_Desktop](https://en.wikipedia.org/wiki/Active_Desktop) \&gt; **Active Desktop** was a feature of Microsoft Internet Explorer 4.0's optional Windows Desktop Update that allowed users to add HTML content to the desktop, along with some other features. \&gt; Active Desktop never attained any significant degree of popularity, as its limitations included high use of system resources and reduction in system stability. The component was retained in Windows XP but was replaced by a feature named Windows Sidebar in Windows Vista. Sidebar in turn was called Windows Desktop Gadgets in Windows 7, which also allows components to be added to the desktop, but it was also discontinued due to security issues; Windows 8 replaced it with live tiles in the Start screen. 
Yes! If you've already been doing console applications then there really isn't much to learn to develop Windows Forms. I mean, you could easily change a Console App to a Windows Form in an hour. Visual Studio uses a Visual interface to help you design your forms - you can simply drag and drop controls, give them named and set attributes all before even looking at a line of code. Then if you look at the code in the "Designer" page that's automatically created you will see the initialization code for all of the controls (don't modify this page unless absolutely necessary, just view) I'd highly recommend putting in a very small number of hours to learn Windows Forms.
You know that **varchar** doesn't support UTF-8 until SQL Server 2019 is released? It means that those columns don't support all characters that C# string supports. Using **nvarchar** is also easier because it maps directly to C# string length. So you can easily check length of your strings in C# before trying to insert or update database rows.
Is it hard to make a cross platform GUI? Java can do it.
I'll tell you how it became the norm. I'm going to make a prediction here. When you finished your Electron POC, whatever it was you did next, I'll tell you what it wasn't. What you didn't go do is implement your photo album app on OSX, Linux and Windows. You didn't do that because that would be a lot of work, especially for yet another photo album app no one actually wants. Electron has a cost, about 300MB. That's over kill for a photo album, but it's fuck all for something like VS code. And you wrote a recursive function that ate 4 GB of RAM. You can write that in literally any language, a developer wrote shit code that leaked memory. Woopdie Doo. 