WCF isnt in. net core. Hence he didn't list it. 
Except that the nobody uses leftPad from nuget and nuget doesn't create infinite node_modules inside node_modules folders until the Windows file system fails
Please do not accept every suggestion! I think that this chart is partly excellent because it is uncluttered an does nt try to include everything. I love it and will use it at work to spark some discussions for sure!
I think this really is an answer to the question. Until pre-rendering ships Blazor and Razor Components is a no-go for anything requiring SEO.
You seriously care about 300mb of small files? Usually what you get there is compilers, test runners, bundlers, frameworks. You prefer 30gb IDE instead?
To be fair if it gets pre-rendering it will be reasonably useful.
Yes I do care especially when it is the longest part of my CI far longer than all the others combined. Also the JS ecosystem is very rich but of extremely low quality.
.NET Core is pointless unless you are developing cross-platform apps. No real difference besides that . Also it isn’t true that .NET lives inside of .NET core, technically they are two different independent things.
Fuck Razor Pages!
I could still get my own domain from elsewhere and point it at my free Azure site, though - right?
&gt; EF Core is good but still in progress Literally the worst ORM I have used and that includes NHibernate 
Keep in mind where you are. This sub by and large are the creme de la creme. 90% of developers out there would never even consider spending their free time on posting about work related things on the internet. The reality is that (and I'm ass-timating here) 90% of software developers couldn't even name 5 design patterns, let alone know them by heart. And many of these people are "senior" people. Everything is relative. You don't have to be an elite software developer to be successful or do right by your position. I'm not saying it's not a good idea to strive to be the best you can be, but I've been in the industry for 15 years and I don't know half the things on that list.
Npm caches its packages, it should take seconds on any CI... And you could say that about any open ecosystem, at open source in general. Nothing is stopping you from running for example only packages from say Oracle on npm.
It’s not just operator overloading that makes C# superior to Java. Getters setters, proper generics, delegates (I.e. pointers to functions) all make the language far more concise. The only JVM language that comes close (and maybe exceeds in some cases) is Kotlin. 
With winforms you have one file that's generated by the designer and another that's your code - you don't want the designer fucking with your code. That's why you use partial in that case. Other use cases - sometimes you just can't follow SRP. Your class has to do more, but you can still contain each thing to one file. My most common use case however is when I have a collection of stateless, static functions. C# does not have free functions; using a partial class let's me put them in different files but still keep them in the same 'namespace'.
I've used it several times in the past every successfully. My world hasn't yet collapsed around me, I haven't been fired, etc.
Funny I've been developing on the .NET platform since day one and I have never heard of Google Cloud Spanner. Yet I'm aware of EF since it's original release. Perhaps OP is on to something.
SOAP? Prepare for downvotes.
What is your suggestion for task scheduling?
`QueueBackgroundWorkItem` will prevent IIS thread pool shutdowns and is an acceptable way to do this, however, from an infrastructure point of view, not considered best practice. People have been complaining of deployment complexity but with a proper CI/CD pipeline built, you do the hard work once and from then on it’s easy street. 
Roslynator is great. Worth installing the extension to get all of the code fixes / refactoring as well.
I am prepared, the stupid mentality of new = good and old = bad exhaust me. 
Sure ! Thanks. 
Well the npm install task in VSTS takes a lot of time, more than nuget for sure. It probably doesn't cache, I don't know. Also the quality of packages is lower on npm than on nuget. First of all the ecosystem has accepted low-quality packages from random guys as standard. Babel had dependency on leftPad. In addition you can't build anything with JS if you go for Vendor X-only policy because there is no vendor that covers wide enough range of packages like Microsoft does for the .NET ecosystem.
So, excluding that we could run core on Linux, what is the advantage of core?. Fewer features?, A library that is still changing? (I don't love to be a guinea pig, do you?). Poor performance (in some situations)?. I repeat, the ideology of new=good, old=bad is cargo cultism 
On Windows? There's literally a thing called "scheduled tasks"
&gt; This sub by and large is the creme de la creme Lol no
Iis thread pool will wait 30 seconds for tasks created by QueueBackgroundWorkerItem to gracefully stop (finish) then terminate the process. I used it in the past and it bit me hard once. An option but not the silver bullet.
var is the devil , especially for beginners. Especially when you get into IQueryable&lt;T&gt; repo methods being called by beginners. I myself was a victim
Is there really? You mean the kind that kicks off executables or scripts? Wow. Don't be and asshat, the question was clearly about some sort of generic framework/product like hangfire or quartz. 
Where can I find more roadmaps like this for other technologies? 
&gt; If I am going for any job interviews in the future that has competitive coding in the initial rounds It's rare to find a job interview that involves competitive code. Usually, a candidate is picked for more pragmatic reasons: * Salary. * Where do you live? * Experience. Some companies ask for at least 3 years of experience. * If the candidate knows what the business needs. For example, if the business uses C#, WinForms, and Access, everybody could argue that it is not the best stack yet, the company uses it, and they want to hire somebody that can work with it, it doesn't want to hire somebody to pick a new technology (unless it's a startup). So, a company is not hiring an efficient stack but a worker that is able to do the job. 
The reason it didn't work with quantityOfSand as a method parameter is because that created a new local variable (local to the method), which meant you lost access to the class field.
I would also recommend the Google tools (Datastore is really nice) and since this guide targets web/api, docker and containers would also be a nice thing on the road. Maybe also extend it with DevOps. But nice guide, I think it’s a good way for new developers to get an overview and suggestions on where to go. 
The person you replied to said not to do scheduled tasks via websites at all.
Hence my question if a better setup. If I remember correctly you can setup hangfire to run as a service alongside the administration UI. Quartz doesn't run in an IIS container, it at least it didn't used to it years ago. 
No. More language features in core. Framework dev is slowing down. Core is more performant. You are projecting. All that aside. No obe is telling you to use it. If you dont use core then this post is not for you. Not everything is about you. I dont use core yet either but i dont make a grouchy comment about it. 
Ah! I knew I shouldn’t have brought it up. I’ve never used it, having been taught not to. Good to know though, thanks!
I have used it to offload some things like logging where they will complete in 30 seconds under normal circumstances. So it is valid for certain use cases, just not a scheduler that you want to run constantly.
Depending on what you need, scheduled tasks may do exactly what you want I often use Azure Functions for scheduling, or depending on what it is, I might use a cron job in something like TeamCity or Jenkins There are many better ways of doing it than within a website
Avoid using it - it should really be classed as an anti-pattern these days If you absolutely have to use a singleton, do it via the DI container instead
We use this exact setup with Hangfire at work and it works out pretty well for us, makes it really easy to scale out background task execution separately from the rest of the app. But if I had my way I’d probably rip it out and build something on top of RabbitMQ to avoid any lag from polling.
As is your grammar.
I generally have a problem with these roadmaps, because there's very little "why" behind them, and following them blindly without a "why" is a good recipe for focusing on learning technologies without understanding what they're truly useful for and when it makes sense to apply them. This feels like a resume focused roadmap to get a lot of buzzwords, but de-emphasizes the concepts that really make a good developer, rather than a good technology learner. A number of things to emphasize my point. Design patterns are literally the last on the road map and come across as an after thought. The fact that the Chain of Responsibility pattern is not included, but literally what you'll be using in developing Middleware is telling to me it's an afterthought. Why is Caching so high on the roadmap? Testing is pushed so far down, but this has me looking at Redis first? Caching, despite how it seems on it's surface, [is not easy](https://martinfowler.com/bliki/TwoHardThings.html), and why are you caching? what are you caching? what are the performance gains of doing so? and do you need them? There isn't a single thing on here about authentication, authorization, and security. There's nothing on here about data modeling, which is going to directly impact how all of your Entity Framework stuff performs, why you might want to choose a No-SQL database over a relational one, what adjustments you might have to make to a data model to work more appropriately with a No-SQL model, and what implications you might run into when switching from a on-prem database to a cloud one. There's nothing here directly about cloud platforms and cloud technologies like Docker and Kubernetes. Presumably if I'm trying to use .Net Core, then I'm likely looking at it for those purposes. To that end, probably would be well served by some basic Linux knowledge too. If this is just an ASP.Net Core roadmap, it doesn't present itself as such once it starts to branch off. And at that point it looses direction and focus. Thinking that you have to know everything is going to lead to a lot of trouble. Sure it's fine to have a good overview of what all these topics are and how they fit together, but beyond that you'll find it real tough to have a level of proficiency at all of these technologies enough to be effective and efficient. What's also missed, is that in a professional setting, you'll likely never be asked to do all of these things yourself, and if you are, you probably have other problems. It's great that you put this roadmap together, but this either needs a ton of focus to get through it all, or simply needs to focus on one area rather than everything.
Thanks for that. I *have* had the sense that the sub has advanced developers. My guess is that they're mostly CS grads. Computer Science didn't exist when I went to college in the early 70's. They taught a couple FORTRAN classes in the engineering school, that was it. So much of the time I'm bewildered by the conversation in /r/csharp. I check it out routinely, though, to pick up some of the moderne terms, hear about cool stuff. Might come in handy during a job interview someday, if I decide to return to work. Thanks!!
Singleton!?
This needs more redis. Redis can be used as a message broker also, please add it there as a yellow
1. Less ceremony than Java or C++, better type system than JavaScript. 2. C++ with garbage collection, maybe. 3. Strong, static typing, for preference--I feel like it's less error prone and easier to reason than weak or dynamic typing. Functional programming works perfectly fine in a environment that is strongly typed--Common LISP has used strong, dynamic typing since it was created, AFAIK, and Haskell seems to use strong, static typing: in practice, functional programming is orthogonal to the type system.
*Hey just noticed..* it's your **6th Cakeday** HydrA-! ^(hug)
&gt; Learn why you should never use Singleton Learn why you should'n use design patterns as a recipe. They are good for talking to people, for communicating what the intent is (e.g. I'm going to use a pipeline, should I use a buffer? or "we need a facade for interacting with the cloud" - there are so many details of what goes into that, you can't just follow a step by step approach). Trying to apply 100% of a pattern to your case is rarely optimal, almost never. 
Vs2017 also takes less than 1 gb if you exclude all the stuff you're not gonna use. (rider is smoother anyway and has some stuff I wish vs had) 
What bad habit? This isn't another one of those "OMG, var will ruin everything unless you only use it for anonymous types" rants, is it?
1. Java was a good start, but was hung up in a number of fronts. I still can’t forgive the lack of properties, and their lambda functions. I wrote my first Java back in 1996, I’ve done it on and off a lot since then. But the JVM is still an amazing piece of technology. 2. I also programmed in Delphi a lot. C# was a lot cleaner than Delphi, more powerful than VB6, and easier to understand than C++. 3. For most my career, JavaScript was kingly a browser language, making it way to limited. I was making lots of desktop, and mobile, what I was doing with JavaScript was usually done in conjunction with JQuery. 4. Back in ye olden days, I was using asp pages. You could write then with VBScript or JavaScript. JavaScript was a bad idea. At the same time, it was still better than Asp.net webforms. 5. Lambda functions in C# are my jam. Microsoft made a number of technology mistakes along the way. C# was not one of them. Sun also made mistakes, but the JVM wasn’t one of them.
Use string.[split](https://docs.microsoft.com/en-us/dotnet/csharp/how-to/parse-strings-using-split) and string.[join](https://docs.microsoft.com/en-us/dotnet/csharp/how-to/parse-strings-using-split).
👍👍 Thank you! Will do.
 &gt;Learn why you should never use Singleton So definitely do: `using (var client = new HttpClient()){}`
Being confused by var and dynamic is the only bad thing that I could come up with. Not convincing though.
It's similar to the difference between Linux and applications running on Linux.
It is not a var problem. It is misunderstanding of linq.
Addendum to #3; if you're changing the type on a variable, you're a bad person and you should feel bad. So weakly typed is pointless.
In all seriousness, wasn't the C++ renaissance thing from 2011 and never took off? I mean maybe it did in some niche but I haven't heard anyone push that in a while. Is that still a thing they're pushing and if so do they have any marketing people on that? Because I haven't heard a peep in years.
It's aspnet core so unless you are using httpclientfactory you should absolutely use Singleton pattern for HttpClient. https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/ Yes that article applies to both asp.net and asp.net core.
Just remember you cannot change a string, only make new ones with your changes.
Am I the only one who hates Entity Framework/LINQ?
Totally not useless. It’s the future even if you have only one platform
Thanks. Your doing a good job in helping fresh programmers. As others said already testing is a mayor aspect that is a little bit low in comparison to other languages like ruby. +1 to move it way more up. It helps to understand and learn the other techniques. 
Great response! +1.
&gt; Microsoft says Core is not a subset but it is. `StringBuilder.AppendJoin` is in .NET Core but not .NET Framework. Already, that proves you wrong, but I can keep going if you'd like to know the depth of your wrongness. :) &gt; When Core started, it started as a subset, first as asp.net 5 beta, then later it turned into core 1.0. Later, Microsoft rebranded and says, no, it is not a subset but it is the future. OH REALLY? Are we talking about what Core _is_ or _was_? You're bringing this up as if it proves anything. It doesn't. .NET Core is not and will pretty much never be a subset. &gt; Pragmatically, you could do practically all core operations using net framework (excluding linux and a few core specific features), the opposite is not true. So, pragmatically core is a subset. Yes, if you port a Core project to Framework, _most_ of the code will work. You did not say "almost a subset" or "pragmatically a subset" in your original post. Hence the downvotes. Also, writing off Linux and Core's added features as aspects unqualified to differentiate Core is just silly. &gt; Now, Microsoft says it is not a subset but at first it was. But Microsoft talks so much. Do we remember when LINQ2SQL was the future?, or Metro? I feel so sorry about the developers that trust on Microsoft. So what Says Microsoft is based on nothing but internal marketing. What does this have to do with anything? Man, did Microsoft hurt you or your dog? &gt; Core is not the continuation of net framework. Net framework 4.8 is here and it is more complete than net core 3.0. And yes, Microsoft says that Core is the future and net framework is the past. Fools me once...? And yet, we are running Core in production, not Framework. Framework does not support Linux, and Mono is a shoddy workaround. Core _is_ the future because it is not tied to the operating system. The team is free to make breaking changes thanks to stand-alone builds and side-by-side installs of Core. Meanwhile, Framework must remain compatible with the bazillions of computers and programs currently out there. So, Core will continue to receive enhancements that Framework will be unable to support. &gt; Core supports some net framework features and again, the opposite is not true. For example, Entity Framework. Core is just catching up the net framework and only Core 3.0 will be production ready but again, it is still a subset. You do realize that ASP.NET Core, Entity Framework Core, etc. are not just casual rewrites of the original libraries, right? Microsoft didn't just start over with the intent to copy what they had before. The Core versions have substantial changes to the APIs and substantial performance boosts. From where I'm sitting, the original frameworks are already behind and need to catch up to the Core implementations. &gt; Missing features (core 2.0) Have you seen the .NET Core 3.0 previews of UI? They run roughly twice as fast as Framework. Until that time, most of us are writing web servers or console applications anyway. We're not desperate for the UI components. &gt; Microsoft calls it the future but again, Microsoft says that Windows 10 will be the last and one version of Windows and it was BS! .NET is owned by the .NET Foundation, not Microsoft. Microsoft is probably still the top contributor, but the Windows team an entirely separate entity. So, I'm not really sure why you feel the need to bring this up. &gt; Now, why I was downvoted? Well, you had a chance to come out of this unscathed. You could have said, "Thank you for the clarification! Apologies for not being clearer!" Instead, you said, "I was _basically_ right. Y'all don't know just how mean Microsoft is to me. If you truly understood, you'd side with me and expose .NET Core for the fraud that it is."
We're in a similar boat. We currently generate WinForms UIs dynamically from simplified schemas (several hundred of them). We're moving those schemas to the server and just presenting a web equivalent instead.
1. C# is more productive than C++. C# has nicer syntax, is easier than Java and has no licensing headaches. Javascript is the messiest popular language there is. Not good for mental health. 2. I do not believe in Microsoft C++ renaissance. Going back to C++ does not make sense. There is just too much unnecessary complexity. 3. Weakly typed is for small things. For bigger projects weak typing just adds one more unnecessary testing dimension. I do not see correlation between weakly typed and functional programming. &amp;#x200B;
did you tried ef core 2.2 ? 
All this bot love is making me feel so warm inside
Was it ironic? Is it bad practice? 
Yes.
I used to use Quartz quite a bit in Java days. To be honest we've gone completely low-tech in recent years and simply use Windows scheduler with executables that take command line parameters for different background tasks. It's simply as hell and easy enough to rerun or end task, etc. Sometimes I miss the idea of simply writing a class and then scheduling it via some generic framework like Quartz. But often it's simply overkill and what we're doing today is perfectly sufficient.
I believe the HttpClientFactory package is good in this specific instance
I really don't care about polling most of the time, as long as it's easy to use and administer. Easy to monitor progress and easy to abort the operation.
The performance improvements are worth it alone. For example they deemed it worthwhile to port WPF and WinForms to core despite not being cross platform.
Wow, so before it was just a trash, right ?
The past few weeks I have studied a bit of "modern" C++ because I was looking to see if it made playing around with microcontrollers less of a pain in the ass than C (especially being able to use templates and classes to make repetitive register access code cleaner and less redundant). It is incredible how much progress C++ has made in the last ten years. &amp;#x200B; I started learning C++ when I was 14 because I wanted to make video games (terrible idea! Wish I had learned Python instead). A lot of stuff in C++ just didn't make sense to me. I spent a lot of time spinning in circles trying to understand code but never really mastering any of the underlying concepts until I took Computer Science in high school and learned Java. &amp;#x200B; I think a lot of my respect for C++ is a product of my growth as a programmer. Templates actually seem pretty brilliant to me now (although they still make me say WTF when you get deep into metaprogramming), but template programming really reminds me of F# for some reason. &amp;#x200B; The smart pointers are awesome, if used correctly you basically never have to manually manage memory with new/delete ever again. References essentially give you pointers that are harder to shoot yourself in the foot with. Compile-time constant expressions eliminate the need to resort to metaprogramming in some cases. There is now support for lambdas. Enums have become more strongly typed so you can avoid issues with implicit conversion between integers leading to undefined enum values. Unit testing is just as easy as .NET and the library ecosystem in C++ gives you so many powerful choices right now...assuming what you need hasn't been incorporated into the STL recently. &amp;#x200B; My biggest gripe would be the complexity of build systems. In .NET, I can just start plugging away at a project and I can build it at anytime that I want. In C/C++, once I get beyond a handful of source code files, then I need to set up a makefile or use CMake (which seems like a pretty good tool, but the documentation is scattered all over the place and trying to use it while following best practices eludes me). But then again, I have invested minimal time trying to learn those build systems because there are way more fun things to learn :D &amp;#x200B; I'm never going to run to C++ for a project at work. I am way more productive and comfortable in C#. But would I consider playing around with C++/CLI for a personal project? Maybe. If I want to play around with microcontrollers, I'll do so in C++ over C any day, although Rust looks like it could be really promising.
I use them for organizing large classes. Important stuff like interfaces get shoved into partial classes. 
While you should not do it, you still can using unsafe. But due to c# interning strings, modifications to a string of same content modify both versions, like a pointer does
I use them for cross platform code. Code that isn't available on all platforms get shifted to partial classes. 
You shouldn't be using this approach. Despite HttpClient implementing IDisposable, it's intended to be long lived, but using it as a singleton brings a whole host of other issuis Use HttpClientFactory instead and it gets around all these problems, plus has the advantage of being able to decorate requests using DelegatingHandlers, which means you can keep cross cutting concerns out of your business logic
It's really not about education. I'm also a CS graduate. It has more to do with where you work. In my personal experience, most places are not top notch development shops. I've worked in a lot of small businesses and these places can't attract nor pay the sort of talent that would be top notch. Nor do they really have a need for super skilled enterprise developers. When I worked at large shops, I found that there were a few really really smart people running things, and average Joes that simply followed orders and filled in the templates so to speak. The only places I've ran across that were very top notch were the shops that sold development. In other words their core business was the development competency. I just know that reading these forums is often a double edged sword for me. I ready because I want to somewhat see what the cool kids are doing. At the same time it could be anxiety inducing AF. The reality is that the industry is huge, and there is place for everyone.
HttpClient is built to be reused, you don't want to new up a new one every time you make a request as it'll create a new socket that will go into a TIME_WAIT state after being disposed, instead of closing. https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/
Take a look at Serverless (Azure functions/AWS Lambda etc.) - you can literally write a single command and have them handle scheduling for you They have the benefit of being able to write it in a host of different languages, so you can use the one that fits best
That's how it goes, you start with something concise then everyone pipes in that you must know everything about everything and you end up with something that one one will even look at.
Pick the right tool for the job. Ideally, a new dev learning about EF should be learning the when and where as well
I can understand the hate for EF, but why LINQ? All LINQ is is a library of fundamental enumerable operations such as map, reduce, pairwise, and fold. Maybe you're thinking of LINQ-to-SQL?
We're 100% on prem, cloud stuff is a pipe dream for now.
It is, even though it implements IDisposable the instance is meant to be re-used. When you dispose of HttpClient, it leaves the underlying socket in a terminating state which prevents it from being used again immediately and apparently memory leaks were an issue with lots of instances at one time, but that may have been fixed. \[You can learn more on this SO post\]([https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed?rq=1](https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed?rq=1)). &amp;#x200B; Personally, I use \[Flurl\]([https://flurl.io/](https://flurl.io/)) to replace HttpClient in my code, I love the fluent interface it provides me and the F# bindings are wonderful for it.
Why don't you add properties?
CS dropout here, my interests in data structures and theory were pretty close to nil until I was asked to leave university and started working full time. I was incredibly fortunate to have a rockstar mentor for three years when I was in software consulting...he was our enterprise architect and he taught me how to create testable code, pragmatism vs design patterns and risk analysis. I haven't had a mentor in close to a year and a half and I feel like I've stagnated some during that time. Still love programming but have not learned as much and did not feel as driven to be the best I could be. Working as the sole developer at a company is pretty lonely :(
I don't hate it per se, but I have learned the hard way that you need to be very mindful of what you are doing and how EF is handling your queries under the hood. A lot of the tutorials on EF are garbage and do not teach you best practices or even encourage you to consider the things that could go wrong (n + 1 selects, etc)
For really simple sites it's actually a pretty decent solution...not everything has to be overengineered to the brim
I agree. I prefer to be explicit rather than let EF do the work for me.
It is still trash.
Yes, but preferably it wouldn't be badly engineered.
We've been using scheduled tasks for over a decade to automate processing millions of records a year with no issue. As with anything, if you use it correctly it'll work just fine
that is my last resort, the objects are of a generic-ish type and implementing the property would require another level of inheritance and :effort:
Why would it require more inheritance? I'm assuming you have fields that you want to use now? Change them to auto properties.
Proper design is something you will be learning throughout your entire journey as a developer, so my advice would be to just start coding. Allow yourself to spend 15-20 min sketching it out first if you need to, but start writing code or it will never get done (analysis paralysis FTW :/) You can refactor later as you learn if you design is optimal and once you have some code written, you can share it with others for a code review to learn more.
+1 for windows task scheduler. I wrote an app which required auto restarting legacy apps that could crash due to memory leaks and accomplished it by simply wrapping the apps into scheduled tasks and using the task scheduler's custom event filters (xml) as triggers on app crash event. There's a great wrapper library for the task scheduler, called TaskScheduler.
I've always had good luck with FileHelpers and in the latest versions it has async methods for reading the file.
Most are referring to the DI way of singletons...
Pinterest ;)
Because nothing compares to Visual Studio.
You want to be teaching beginners how to be clean and clear with their code. There are many situations where using var reduces the clarity of what code is trying to do. It is always best to instill good coding practices from early in a person's training because it is hard to break habits. In other cases var is used in situations where you "do not care" (that is a misnomer if I've ever seen one) what object is returned by a method. For an experienced developer who understands what they are doing that might not be an issue. For a beginner they can just see it as an easy way to make breaking changes without actually breaking anything. You want to be teaching beginners the importance of thinking ahead, and avoiding breaking changes. When it comes to syntactic sugar elements you typically do not want beginners using them until they really understand what they are doing, and what the syntactic sugar is replacing.
Use Regular Expression Groups which allow you to match those 'certain letters' by pattern, placing the matches into an array of object groups, so you can then manipulate them by shuffling them around. This feature of Regular Expressions is a very powerful tool that you will be glad you learned after you spend an hour learning them well.
Yep, another panic attack about var. 
I am glad you brought valid counter arguments to the table.
This is nice. I still use the more robust NPOI excel libraries. It would nice if NPOI was actively updated but there hasn't been to much action for the last 5 years or so. 
Could do something like this to move it. &amp;#x200B; var newString = $"{oldString.substring(0,10)}{oldString.substring(20)}{oldString.substring(10,10)}";
I can't counter an argument that doesn't exist. Even the nonsense about it leading to breaking changes doesn't hold water because breaking changes aren't an issue unless you are shipping a library. 
Could do something like this to move it. &amp;#x200B; // Move the 10th to 20th characters from the middle of the string to the end of it var newString = $"{oldString.substring(0,10)}{oldString.substring(20)}{oldString.substring(10,10)}"; &amp;#x200B;
And even that's only half true. Really the compiler always infers the type for the expression; now we're simply not being asked to double check it's work.
I haven't used any of the Excel libraries, yet my next project will need it. How does this library compare to OpenXML? 
Model does not solely mean model of your data structure. It's meant as model of your business logic, so your Service and Repository are APIs of your model and may consumed by your view models. How they are used is dependant on the model api then. 
A lot of people said the same about Silverlight. I was stung there. While I've been tracking web assembly for a while now and it looks like a great piece of tech, I would not consider touching it until a few more iterations at least.
I use C++ along with python in some of my ML projects. So I'm familiar with all of the new goodness. Plus I was a game dev back in the old days, so lived that life years ago as well. OP however mentioned the C++ campaign that Microsoft did years ago. I was curious if that was still something they were pushing. And if so, what niche of the programming world are they pushing it? That's what I was asking about in the original comment.
Just worked with libraries like this. I tried interop, open XML, and closed XML. I ended up getting corrupted files when updating sheets with closed XML. Will check out yours later. 
I use it for autogenerated code. Having one file generated and the other hand written. But I try to avoid it mostly. 
I've been using ClosedXML for awhile now. Works great for our purposes.
Somewhere along the way design patterns went from being a way to discuss common solutions to problems to being a pokemonesk goto learn them all. Shits me to tears. /rant
i have these business objects, and they're being held in a tree. which is generic. and in the list i'll just keep specific/filtered nodes of that tree. Adding specific properties would defeat the purpose of generic tree. One can add extension methods, but not extension properties. (That Print() method fomr above is an extension method) hm. i could derive a new class from that generic tree node, and keep that in the list. use events to update original list. hm
I just implemented EPPlus for a project recently where I needed to write an Excel file containing a collection of product data and store the file in an S3 bucket for later use. It's super easy to use and functions much like CsvHelper. That being said, I'm always interested in any open source project that handles writing/reading Excel files. Keep my options open and whatnot. I'll definitely check it out. 
Generated code is a good use case for a partial.
I think using moq should be a part of testing.
&gt; Use HttpClientFactory instead and it gets around all these problems So, **never** use a Singleton, right? But if you use a Factory that internally holds a Singleton and provides it, that's all good? Pedantic, but this "never use Singletons" is just cargo cult garbage, and most people when they say it are only even thinking of a very specific, single implementation style of a Singleton (the GOF one, obviously).
I'd urge you to push against that It's possible to be hybrid and start the migration. You're not going to jump to 100% cloud native, but this could be a good start
I didn't used to get the point of var. Then when our database library had to support more than SQL server, I got to experience the joy of changing thousands of calls from SqlDataReader to DbDataReader - so I decided to change them to var instead
In the context of the discussion, I assumed they were talking about the Singleton pattern, which doesn't have anything to do with DI
&gt; This sub (vocal majority) by and large are the creme de la creme. More like teenagers who have never worked a real job, much less one in development.
EF is really great for a lot of stuff - especially the basic stuff - but it gets hairy fast when you start hitting the edges and rough spots. Getting a micro-ORM to do the same things is often as much work if not more, but it's simpler work, unlike trying to bend EF to your will.
&gt; it should really be classed as an anti-pattern these days Why?
&gt; Redis can be used as a message broker also An unreliable one, and one that will chew up lots of CPU on your Redis instance causing delays in processing other requests.
There's a certain point where the problem isn't the language, but the team. If a colleague goes out of their way to write bad code, don't blame the tools.
&gt;I think this mixup comes from the fact that "Server Side Razor Components" or "ASP.NET Core Razor Components" etc lack a catchy name, whereas "Blazor" has been around from the start as a catch-all for the project. Well, this mixup also comes from the fact that, up until a few months ago, _all three hosting models_ were called Blazor. It was only recently that server-side hosting has been announced as a shipping feature for ASP.NET Core 3.0, and given new branding. It's fairly recently that they've started changing type/namespace/assembly/package names.
What should you use [scrutor](https://github.com/khellang/Scrutor) for?
[MoreLinq](http://morelinq.github.io/) is really awesome too and can save you some time having to re-invent some tricky queries. 
Saved the link for future study, thanks! 
Singletons have problems and risks, particularly when implemented badly, but then so do all patterns. DI is clearly a way of isolating yourself from that decision, but I can't see that the answer to "how do I ensure that I always have one instance of a class" necessarily has to start with "well, first you have to evaluate a range of DI frameworks and implement one top to bottom". 
Can't believe I didn't know about LLBLGEN. Would have saved me a lot of initial work on my last project.
*I could still get my own domain from elsewhere and point it at my free Azure site, though - right?* I dont know. *Also, how do I sign up for the free service, as opposed to the paid service?* There is no separate sign-up. You just select the free tear app service when creating. 
Because it hides state - see my original answer for more
MVVM is the presentation layer, business logic should live in another layer.
to quote myself: &gt; If you already know this stuff, great If a person is new to this or has been following along casually (those who the post was directed at) they should be learning the difference between Razor Components and Blazor. If a person is not new to this, they should know the difference and use current nomenclature.
Singletons hide state - check out the link I added You don't need to evaluate multiple frameworks - all DI containers can do this
I'm super hapoy with Epplus, I don't think that I need another library for something EPplus is doing fine. But a library to export an excel to another file formats (like pdf) would be fine.
\+1 for EPPlus. Having sticking to it for years and we don't have any issue.
Removed: Rule 3. You might have better luck at /r/Unity3D.
So I should go ahead and enter my credit card information? They won't charge me unless I actually sign up for a paid service?
Yes, that is right, they wont charge you as lomg as you use free services. 
Great, thanks!
I like to have the callback set a TaskCompletionSource to completed and await that TaskCompletionSource.
The test I give to candidates is not particularly difficult. I'm not overly concerned as to the language choice (we do both C++ and C#). What I care greatly is an attention to detail. At the very least it must work correctly. But what I really want to see is coherent organization, logical flow and all the edge cases covered. A competent Dev can provide a solution in 45 minutes and under 200 LOC. It's not a hard test, but its the details...
I'm not sure I understand. Could you write a bit of sample code?
Got around to making a few improvements to reduce steps in execution path of commands: replaced if for command detection with a much more efficient switch statement. Source located here.. https://github.com/BanalityOfSeeking/ServeExcel
NPOI now has a .net core variant that is maintained by Microsoft as part of .net core official release 
They also share many of the same purposes. I know databases written in C# and Java and others written in C. Same goes for lots of different software.
Great work! I like this. 
Windows service works pretty great for us.
partial keyword is quite rare in most cases. I've used them a few times myself in these instances: 1) When we have to mix generated code with custom code. I've done this myself with T4 templates. This also happens in, for example, EntityFramework Database-first workflows, where the data models or DbContext are generated from the database. 2) Where we have many extension methods for a single type, it can be helpful to break up the extension methods into different files (MyExtensions.Validation.cs, MyExtensions.Mapping.cs, etc) while keeping the class names the same (so we can find extension method classes 3) In MVC and WebApi Controller classes, where the number of endpoints we need to have becomes large, but can be broken up by responsibility into separate files In general, it's probably preferable to split large classes into smaller classes and delegate responsibility, except in situations where a single class is required (like the MVC/WebApi controller example, above, or any place where we'd be looking for methods and properties by reflection without being able to search a nested structure). If you find your own code files getting so large that you consider breaking them up into multiple files with partial, you should consider creating separate classes and delegating instead.
That user had such a good and pragmatic comment until that part. Sometimes I feel advice like this comes from elitism: "you make sure you never use singletons, leave it to the smart people like me, or Google etc". Stupid. The singleton pattern is a trivial pattern,with both potential drawbacks _and_ positives. Its use is widespread and people should embrace it and learn when and how to use it, not dogmatically avoid and vilify it. 
Is subscribedEvent a field or a property? If its a property, what does the declaration look like? It is unlikely to be due to inheritance, unless the member is defined in both the base and derived class. Possibly the value was assigned to a member in the base and a duplicate member in the derived class simply sits empty?
(somehow mangled my original account credentials in my pw manager, but I am the original poster) This project is really a wrapper around the OpenXML SAX API, which is not the most user-friendly API in the world. OpenSpreadsheet makes it easy to quickly create your mappings and get to reading/writing spreadsheets, but the heavy lifting in the background is OpenXML.
(somehow mangled my original account credentials in my pw manager, but I am the original poster) I honestly could never get ClosedXML to work properly for my purposes: it ran out of memory when writing large datasets, and it seemed a lot of work to get it to write a simple IEnumerable&lt;T&gt;. Using it felt like I was back to doing Excel interop in VBA, which isn't what I needed at the time. I didn't stick with it long though, so it's very possible I missed some step in their documentation that would have fixed my issues.
(somehow mangled my original account credentials in my pw manager, but I am the original poster) I didn't discover EPPlus until after this project was nearly completed, but it seemed like a pretty fast library. I didn't find any way to create easy-to-use class maps like those used in CsvHelper, unless I missed it in their documentation. That feature was one of the main things I found lacking in many of the libraries I've looked at; it's so darn useful for quickly setting up reading and writing scenarios. 
Guess i haven't check status in couple years. Thanks, i'll check it out.
So I've used Microsoft's OpenXML API before. Just for comparison's sake, why would I select your solution over their solution? I'm just trying to get an idea of what problems your solution aims to solve over what I already have some experience with.
I’ve written a similar library, albeit a private one for a previous employer - I’ll try to take a look over the next few days and provide you with feedback. I have some thoughts based on skimming the source on my phone just now, but I don’t want to give you my feedback before I’ve had time to read more code and actually use the API.
Huh. Neat, I've never considered that before.
1) It's my favorite because it makes sense. I cut my teeth with C++ and Java in college, and took a web dev class that was taught in VB which is where I was exposed to the .Net framework and I've liked it ever since. Now that it's open source I feel there's loads of great things going for .Net moving forward. 2) Not really sure I have an opinion on this as I haven't touched C++ since college, but in general I think so long as a language is performant enough it'll come down to the tooling and how quickly developers can get set up with a working product. 3) Very much prefer strongly typed. I love .Net but a turn of events last year now has me working professionally with Rails. It's not bad and there's lots to love with Ruby and Rails, but it's been hard for some reason to get used to a dynamically typed language. I honestly hate how I can't just look at a method signature and not know the type of the things it wants, made worse by the occasional bad naming convention. Jumping around the code also feels like it takes longer. I have a JetBrains Toolbox sub, but the codebase I'm working with is massive and doesn't seem to work very easily with InteliJ or RubyMine. I've mainly been using VS Code, and I really miss having things like Code Lens to tell me where something is being used, how many times, and I can just click and quickly jump to those locations. So yeah, navigating the code can also take a while. I'm sure I'll get faster as time goes on, but for now I feel like I'm walking down a dark hallway feeling my way around until I find the right door to walk through. Also having less love for the "Rails Magic" and the whole notion of, "Oh, if you do it this way it just works." And the documentation for Ruby and Rails can be pretty lacking, especially coming from Microsoft's absolutely stellar (albeit not without its own problems) documentation.
Same... I'm not a fan of how they implement formatting / styles in OpenXML either. It's like 60 lines of code to turn a few cells a new color or change a forecolor value. 
Yeah... If you really want something elegant to use, you do have to basically put a pretty heavy-duty wrapper around their API stuff instead of calling the API directly.
C# is there for so many different stuff now. Can make desktop apps, webapps and mobile apps using it now.
I'm glad you enjoyed it! It has been 3ish years since I have written a mobile app in Xamarin and it sounds like it has come a long way since then. A lot of the device-independent SDKs Xamarin touts as its biggest selling point weren't stable or reliable enough to use at the time, so it was a mess creating an iOS/Android app. We had these two codebases which were supposed to be unified through a common codebase which were instead having to make really specific calls into iOS and Android SDKs, I really don't feel like we gained anything by using it at the time. I am in no hurry to try it again!
Sorry but properties are more important tjat you think, for example, you can't bind fields, only properties. Why not only follow good practices and add properties and not use fields?
Try Epplus?
BDD Buzzword Driven Development
No
It’s come a long way. Essentials NuGet and freshmvvm will get you super fat.
Do people really lie about why they are leaving their job? That seems strange to me. 
What's the test? 
Xamarin is getting better at every release for sure. But for enterprise level applications, it is not that promising. I personally think cross platform frameworks are BS. It's not that good as it sounds.
I just stared xamarin forms as web developer too and i hate customizing the controls to be uniform across different platforms, you have to use custom renderers for each control! and to add a border or drop shadow you need to write 5-10 lines of code behind for that for each platform! wait till you get this problem. 
xamarin is a steaming five coiler
Want to get even better at Xamarin? Learn basics of Android (and if you have access to hardware) iOS. They have absolutely different way of organising basics, while being CPU/battery efficient. Also, something I found important: if you need a lot of system integration, think about using the native platforms, otherwise it's a deep hole full of rabbits.
What's wrong with Xamarin.Forms?
Sounds like you don’t have a great use case for forms. The whole point is to not have to do a lot of custom work. Have you considered just going with Xamarin native?
I wouldn't but Singleton in there. Just learn how to work with DI and use Singleton-Scopes where required.
Ha, I had a marathon weekend trying to learn Razor Pages, EF Core, and enough html/css to make a page look nice. Got to where I needed to be, looks nice and seems to work ok. But a hell of a lot to learn, I lost an hour just to database migrations, did everything I needed to in the wrong order; so now I know have a better idea of how they work and how to recover 👌. One thing im sure is wrong, i couldn’t work out how to redirect between pages and pass results. In the end I did a search which provides results, saved the results to a db against a guid, passed the guid into the redirect, and retrieved the results using the guid. Seemed long winded and inefficient but couldnt find another option. Guids seem reasonably safe, given it was financial data was it enough protection? 
Singleton is extreme - it's not necessary to only have one instance, just don't create a new one for multiple requests. Sometimes, you need different clients for different purposes. 
Yeah. It's a compromise. But a necessary one for many, when you don't have programmers to build three different products in three different languages.
A what?
What are you talking about? don't underestimate cross platform frameworks. They are very tricky to use. You still need programmers to build apps with it.
Yes, but at least you only need one team for two apps. Not many know both native Android and iOS development. And if you're a C# developer, Xamarin is probably the easier way in.
Is Xamarin that different from WPF? I just clicked Effects - new - DropShadowEffect - ok
if you want it to be a list of strings: List&lt;string&gt; result = list.Split(' ').toList(); If you want them to be parsed to int, create an extension method: public static class Ext { public static int ToIntOrNull(this string text) { int result; if(string.TryParse(text, out result)) return result; return null; } } And then do the following: List&lt;int&gt; result = list.Split(' ').Select(p =&gt; p.ToIntOrNull()).Where(p =&gt; p != null).Select(p =&gt; p.Value).ToList();
Xamarin.Forms is to get a native look on each platform with one code base! Not to get the same look and feel on each platform. Sorry, but that is not what Xamarin.Forms should be used for...
Xamarin AND Android Studio have made me avoid anything mobile for the rest of my life. Life is too short for that kind of blood pressure.
no, our architech decides xamarin forms is our route.
&gt; var list = Console.ReadLine().Split(' ').Select(int.Parse).ToList(); This is not a good idea, since any additional whitespace will get you an exception.
&gt; But due to c# interning strings It doesn’t really do that, though, at least not in framework, since v2. For performance reasons. It still unifies strings at compile time, of course. 
The Singleton design pattern and singleton lifetime/scope in IoC containers are not really related despite the name. The main problem with the Singleton design pattern is that it makes it easy to implicitly access global state all over the place. Basically, client code will directly access it with Singleton.Instance.Whatever instead of injecting the instance. The singleton design pattern is about *enforcing* that a single instance of the class exists across the application and the instance is globally accessible. How often do you actually need that?
could've sworn i once fought unsafe legacy code that modified strings, and one we used CLR4 instead of CLR2, the code suddenly modified all strings of equal content, but YMMV
NPOI wasn't even on my radar. I'll check it out, thanks!
It would really depend on the app and how well it was originally written. I've seen several WinForms apps that were so poorly written and tightly coupled between the UI and business logic that very little could be done to modify them easily. If you can modify the app's UI without any complications, I would suggest switching the font to Segoe Ui from the old MS San Serif. This should be a relatively easy search and replace. Then you can tweak the sizing visually as necessary. Next, flatten out screen elements and use modern looking graphics to replace the old 90's Windows look. This is a little more complicated, depending on the quality of the underlying code. Essentially, you would want to go for something that looked more like Office 2017 than Office 2000. &amp;#x200B;
First of all, get rid of that `async void` if you do not intend to have a `try-catch` in there. Next: What do you need the `BackgroundWorker` for? Events do not block until they happen. The way you described the issue, someone *might* modify a category, which would fire a `CategoryChanged`\-Event, Since the MainViewModel listens to the event, its handler (`mainViewModel.OnCategoryChanged(object sender, EventArgs&lt;CategoryChangedEventArgs&gt; args)`) will be invoked. Now you can react to the changed stuff inside that handler. &amp;#x200B; Tl;Dr: Why do you need a `BackgroundWorker`?
&gt; Next: What do you need the BackgroundWorker for?Events do not block until they happen. The way you described the issue, someone might modify a category, which would fire a CategoryChanged-Ev The dataloadmode in the telerik gridview works really bad. I want to run it async when I add filter. Somehow, when I add filter, it hangs up when I use async Task. 
Out of the box, OpenXML is not a general purpose solution. It takes a lot of work to get it up and running, especially when using the SAX API, and you'd have to change your code significantly for each class type you plan on reading or writing. OpenSpreadsheet allows you to map your class definitions and then it will take care of the rest for you. For example, let's say you have a class named TestClass that holds some data related to a person's account balances. You wanted to be able to read this data from an existing spreadsheet in order to manipulate it in your program, and then create two new tabs in that spreadsheet for records with negative and positive balances. You'd start by providing a mapping file such as below that defines how the class relates to your spreadsheet: public class TestClassMap : ClassMap&lt;TestClass&gt; { public TestClassMap() { Map(x =&gt; x.Surname).Index(1).Name("Employee Last Name"); Map(x =&gt; x.GivenName).Index(2).Name("Employee First Name"); Map(x =&gt; x.Id).Index(3).Name("Employee Id"); Map(x =&gt; x.Address).Index(4).IgnoreWrite(true); Map(x =&gt; x.SSN).IndexRead(10).IndexWrite(5).CustomNumberFormat("000-00-0000"); Map(x =&gt; x.Amount).Index(6).Style(new ColumnStyle() { NumberFormat = OpenXmlNumberingFormat.Accounting }); } } When you're ready to read or write, you simply create a `Spreadsheet` instance and call the appropriate read or write methods. using (var spreadsheet = new Spreadsheet(filepath)) { // read var originalRecords = spreadsheet.ReadWorksheet&lt;TestClass, TestClassMap&gt;("Sheet1"); // write spreadsheet.WriteWorksheet&lt;TestClass, TestClassMap&gt;("Negative", records.Where(x =&gt; x.Amount &lt; 0)); spreadsheet.WriteWorksheet&lt;TestClass, TestClassMap&gt;("Positive", records.Where(x =&gt; x.Amount &gt;= 0)); } Building out this scenario from scratch in OpenXML would be a huge amount of work, and that solution would be tightly bound to that particular scenario. Hope that helps!
What do you mean with a "generic" tree? `Tree&lt;BuisnessObj&gt;`? Why do you ***need*** extension methods? You can always go like this switch (myObj) { case myObj is IPrintableObj printable: printable.Print(); break; case myObj is Customer customer: PrintCustomCustomer(customer); break; default: // Handle objects that have no special meaning for you. break; } &amp;#x200B;
Dealing with styles was, by far, the largest source of grief when writing this.
&gt;Somehow, when I add filter, it hangs up when I use async Task it would be good to know *why* it hangs up. And what exceptions / logs you get inside your debugger. Sadly i have no access to any telerik Tools. &amp;#x200B; Since i don't know how this datagrid works exactly, or what you want to do inside your `CategorySelectionChanged`, i can only guess what you want. &amp;#x200B; It would be nice to have more information and actual code snippets (preferably with comments) &amp;#x200B; If the filtering occurs for each row, and is slow, you need to adjust your filtering algorithm. If you need to fetch data before you can properly Filter, then use something like this public async void CategorySelectionChanged( ... ) { try { Func&lt;List&lt;DataObj&gt;, List&lt;DataObj&gt;&gt; asyncFetchedFilter = await GetFilter(); this.Data = asyncFetchedFilter(this.Data) } catch (Exception ex) { /* HANDLE ME! */ } } &amp;#x200B; Old event's EventHandlers can, by definition not be async Task, exceptions are EventHandlers that are defined like this public class TestHandler { public delegate Task AsyncHandler(object sender, EventArgs args); public event AsyncHandler MyAsyncEvent; } var test = new TestHandler(); test.MyAsyncEvent += MyAsyncHandler; public async Task MyAsyncHandler(object sender, EventArgs args) { await Task.Delay(1000); } &amp;#x200B;
&gt; AsyncHandler Hi, where should the testhandler be in? MainViewModel or the CategoryViewModel? The task just add filter to a populated collection. 
We tried using it at Lockheed. Once you venture out of Xamarins 80% use case, things still start to fall apart relatively quickly. There were featured we need that didn't exist and straight up bugs on existing libraries.
I am sorry, but i do not know what the issue is. It might just be that the Datagrid is filled with TONS of rows and not utilizing Row virtualisation, or the Handler is not allowed to add something to the filter list (wrong thread executing the code?) &amp;#x200B; Also // Remove async, it's pointless in here. private /* async */ void HandleMetaDataFilterOnContractGroupSelection() { SelectedCategory.FilterDescriptors.Remove(FilterDescriptor ); // What is "FilterDescriptors"? (is it an instance field/property?) FilterDescriptors= new FilterDescriptor { Member = "ID", Operator = FilterOperator.IsEqualTo, Value = 5 }; // What is this closing bracket supposed to do? // } // What is "FilterDescriptor"? // You do not modify a field/property with that name in this code. SelectedCategory.FilterDescriptors.Add(FilterDescriptor); // Same as the other: What does this closing bracket do in here? // } } &amp;#x200B; I encourage you to read [http://xyproblem.info](http://xyproblem.info) The "TestEventProvider" example is just an informative example of how one would structure an truly async event publisher and handler.
Hi, what worked was to do: public event AsyncHandler OnSelectedCategory; Then I invoked the event in with this.OnSelectedContractGroup?.DynamicInvoke(this, EventArgs.Empty); in the CategoryViewModel. Then in the MainViewModel I did this: private async Task CategorySelectionChanged(object sender, EventArgs e) { try { InvokeOnUIThread(() =&gt; ContractMetaDataViewModel.IsLoading = true); var test = new TestHandler(); test.MyAsyncEvent += HandleMetaDataFilterOnContractGroupSelection; await onCategoryChanged(); } catch (Exception ex) { MessageBox.Show(ex.Message); } } } Is it possible to do this in another way? Like in a cleaner way? :)
I shouldn’t think so but... the CLR does intern string by default, but C# adds an attribute to your code automatically to opt out of this. 
The Access engine comes in both 32 &amp; 64 bit versions, except if your using the really old "Microsoft.Jet.OLEDB.4.0" which is 32 bit only. So when compiling your .NET code, you need to select the appropriate platform x64 or x86. &amp;#x200B; &amp;#x200B;
Is this basically a wrapper to simplify OpenXML, or a separate library altogether? I've been trying (really hard actually) to limit the number of 3rd party dependencies in my apps. That being said, I can either spend hours trying to write my own, or include just ...one ...more...dll... 
How do I invoke the Testhandler?
Yeah I started this, and I can't recall where I left off. I was trying to make it flexible enough to return a column, rows, or cells with formatting intact... and I remember just being completely annoyed with how they implemented all of it. Nobody at work actually asked for this, but I was working on a generic exports library for PDF/Word/Excel/CSV/etc... and thought... hey... why don't I implement our company color scheme / headings in this. NOPE.... Not for the 6 miles of code that it requires to do it. 
using something along these lines public async Task PublishEventAsync(EventArgs args) { var handler = MyAsyncEvent; if (handler is null) return; var delegates = handler.GetInvocationList(); foreach (AsyncHandler hand in delegates) { await hand(this, args).ConfigureAwait(false); } }
Can you post the code for S?
`var` != weak typing. 
Candidates lie a lot. Also, there is a difference between a lie and a "decoration" (or "dramatization"). In this case, they deceit saying "I want to join us because I love your business..." (and here they recite the ads/motto of the company), while it is politically correct but it is still bs. Usually, Devs jump work because: * money or better conditions. Nobody would want to sound like a mercenary but it is the usual cause. * they want to join a high profile company, what it is nonsense (unless the candidate wants to build a CV). * they hate their current work (bad managers) * they aren't working in their field, for example doing paperwork. * they want to work to somewhere near from where they live. * they were fired. 
Could I point you at this? https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/shell?tabs=android It's still WIP, but it might help you out here. 
I'm not 100% sure what you're doing, but passing an id in the url is a standard way of doing things *However* using a guid to obfuscate data is nowhere near good enough for any personal data, let alone financial data Guids are intended to be unique, not secure (and they aren't even unique - look at the Birthday paradox and guid collision). Guids are predictable, so it's entirely possible to work out others that you will have generated You need authentication - not obfuscation
Tl;Dr: just execute the StartReceive again, like you would with BeginAccept &amp;#x200B; &amp;#x200B;
Seetest is not good.
Great, I'd really appreciate it! I've been in the same boat, having written code like this a few times in a few different places and finally deciding to make a real project of it. Finding out that other people have had the same kind of idea would be validating. Finding out some of the other ways people have approached the same problem would be enlightening.
Thanks mate, this looks absolutely fantastic and I am so going to use this!
It’s never going to be in producio , just a petsonal project. Brief was to input a few details including salary and then display a result after validation. Easy but for the amount I’ve had to learn. &gt; authentication Cheers, I’ll do some research about that tonight. My brief didnt have a requirement to authenticate so I might get away with it. Possibly a question I’ll be asked though, so shall prepare.
Well ok, one per host. That's still singleton-ish.
Thanks for the info. Next time I need to do something with spreadsheets, I might give your solution a try. :)
Just wanted to add that I'm also using the free tier, no problem at all. However, I did add a SQL Server database to my account. That's not free - it costs me a little over £1 per month. I'm not sure if you'll need a database or not, but thought I'd point that out before you go too far down this road and then find unexpected, if small, charges.
Thank you for your work, I'll be giving this a test soon :)
Thanks for letting me know! Are there any other databases besides SQL Server I can add to my account? How do I know in advance how much something will cost?
Check Krypton Toolkit, ir Isabel free and supports skins.
Funny that you release it around the time I wanted to start looking for one. Will check it out.
Linq2Db Is at least as fast as Dapper and it supports linq. Anu reasons to change my orm and use Castlron?
That an unconstrained generic can't be made nullable is one of the things about this feature that really bugs me. Building and resolving separate methods seems like something that ought to have been handled by the compiler. I guess delegate parameters make that really awkward.
I'm not sure I'd recommend this approach for someone who is learning, but I've been playing a lot with `Span&lt;T&gt;` lately and wanted to share an approach using that: var text = "hello, world!"; // allocate a new char array on the stack to hold the string while we manipulate it Span&lt;char&gt; span = stackalloc char[text.Length]; text.AsSpan().CopyTo(span); // save "hello" to another char array on the stack Span&lt;char&gt; hello = stackalloc char[5]; span.Slice(0, 5).CopyTo(hello); // copy "world" over "hello", resulting in the string "world, world!" span.Slice(7, 5).CopyTo(span.Slice(0, 5)); // copy the "hello" we saved over the old "world" hello.CopyTo(span.Slice(7, 5)); Console.WriteLine(span.ToString()); We have to allocate memory to old the new string regardless of approach, as `string.AsSpan()` returns a `ReadOnlySpan&lt;T&gt;`. You can skip `stackalloc` and operate on the string on the heap like so: Span&lt;char&gt; span = text.ToCharArray(); Span&lt;char&gt; hello = span.Slice(0, 5); span.Slice(7, 5).CopyTo(span.Slice(0, 5)); hello.CopyTo(span.Slice(7, 5)); `stackalloc` makes sense if you're going to manipulate the string a lot; there's cost associated with allocating the new memory and copying the existing string into it, but operating on the memory in the stack is faster than the heap so there's a tradeoff and you'll have to decide if it is worth it for your situation.
Ok, so I just checked, and in fact the price I pay is variable, depending how much I use the database - it's an hourly charge (I presume they charge for each hour in the day which the database is used, even if it's only used once in that hour, but I'm not certain). I found the prices for the UK by going to https://azure.microsoft.com/en-gb/pricing/calculator/ but obviously that URL will need to be modified for pricing for other countries. Then, I clicked on Databases, and found that there's support for Cosmos, SQL, MySQL, MariaDB, PostreSql, and some other options which seem to be specific to data warehousing. I only looked at SQL Server, so I don't know how prices differ between databases, but I did find that there are many different options, and I had to play around a bit and do some extra research to find the cheapest option.
Dude, this is really cool! Thanks for releasing it FOSS. Not sure exactly what I want to do with it yet, but I have some ideas. 
This looks great - I have a project that I use to save my Reddit comments to a DB for easy searching, I'll have to try your library with it. Thanks for putting in the work.
You should probably fix the retry logic to use a gradual fallback. You don't need to wait 3 seconds for the first retry, but the second should have a larger gap, then the third an even larger one. Addtionally, that retry count and strategy should be a parameter or configurable, not hardcoded into the project. For the following code, https://github.com/sirkris/Reddit.NET/blob/master/src/Reddit.NET/Models/Internal/Request.cs#L247-L268 It looks like those are the only places where that exception is used, so shouldn't the constructors perform the code that is in the BuillException method? You should not be parsing the response body to detect special scenarios. They have response headers for rate limiting, https://github.com/reddit-archive/reddit/wiki/API What's the comparison to https://github.com/CrustyJew/RedditSharp ? Do you know what features your library has that this one doesn't?
Is there a reason why you didn't call it "cancer.net"? :p
It is a field. Good call! I \*had\* created an override version in the descendant; however, fixing that still did not fix the problem. In fact, I have confirmed it is an inheritance problem - explicitly casting "this" to the expected descendant type (e.g.: aSub.subscribedEvent = (EventFrameChange)this) leads to the assignment succeeding. This is not a real fix to my code in that it completely breaks the inheritance structure. I am used to working in Eiffel which is pretty bullet-proof when it comes to complex inheritance schemes. It is possible this is a bug in Unity's implementation - or that it is totally correct and still just beyond my tiny understanding of the complexities of inheritance :).
 &gt;Personally, I use [Flurl](https://flurl.io/) That looks pretty neat, thanks! Not sure how I feel about extension methods on strings though...
&gt; How often do you actually need that? It comes in handy pretty often, really. Before DI really took off we typically used the Service Locator pattern (some DI libs kind of implement this still actually) and the Service Locator was usually also a Singleton. The big reason everyone hates the Singleton pattern is that it's nearly impossible to do any unit testing with one unless you also provide a public API for tearing it down in addition to instantiating it (e.g. between tests), which defeats the purpose. If you're not doing any testing or using DI the Singleton pattern can be pretty nice.
I second the retry logic fixes. In fact, that should probably not even be baked into the library, or at least if you do, make it highly configurable. Enter, [Polly](https://github.com/App-vNext/Polly). They make it really easy to do exponential backoff (what you call gradual fallback). Policy .Handle&lt;SomeExceptionType&gt;() .WaitAndRetry(3, retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)) ); This will retry 3 times, performing some math each time for the next retry. If you go with Polly you should bake it in in a way that the user can provide their own policies, or override your existing ones. Probably by using the register (see wiki).
Exponential backoff was definitely the term I meant to use. I still haven't had my coffee yet. I have no freaking idea what gradual fallback was supposed to mean in that context. 
The only time I use partial outside of automatically generated ones is for extention classes. I'll create a single extentions class and a seperate partial class for extentions of each type. 
I have actually posted a complete simplified example on StackOverflow(because they made it easy to do so): [example code](https://stackoverflow.com/questions/54611796/despite-class-runtimetpye-match-assignment-fails)
There are a bunch of YouTube videos that show how to make WinForms look more up-to-date. [Here's an example.](https://www.youtube.com/watch?v=nLfzH4xOVqo) Mostly, you have to remove the window borders (and replace the title bar and all of its widgets) and make sure you use Panels with BackColors set on them all over the place. Never put non-panel controls down on the form itself. Also, change the fonts away from the defaults (yes, this "breaks" Windows' already-anemic theme compatibility, but then again, so does everything else about this style of UI design).
Very cool; how is it different from the other one on nuget? (https://www.nuget.org/packages/Reddit.Net/1.0.33)
100%!
How does everyone know this? Is there more reading on the topic? I considered using Redis as a backplane for SignalR until I saw people warning against it.
They're completely unrelated. That NuGet package is for an old closed-source project of some kind that appears to have since been abandoned.
Yeah only for school projects. Not for Enterprise level apps.
Heh I knew what you meant, im still having my covefe too. For the record fallback is a thing https://github.com/App-vNext/Polly#fallback Pretty useful feature if you want to carry on business as usual even if an HTTP call fails. 
What do you do with this? 
Pretty much anything that can be done using the Reddit API. Did you have any specific use case in mind?
Um. I know? But I didn't want to have to every go through again changing the variable declarations if our library changed to return a different type in the future
Don’t they both implement IDataReader? That’s what I use for data readers when the implementation might change. 
He means you only need c# developers. Not you don't need developers haha
Build a good Reddit app for IOS? 
If it can run .NET, then yes. I know very little about Apple tech.
Here's a better one: https://github.com/Finickyflame/DesignPatterns
I can think of a few....
They bring new meaning to "loose coupling" 
&gt;.net standard so 2018, do you plan to switch to core?
I think the one drawback I see in your OpenSpreadsheet library is that the tests are tightly coupled to physical file locations/paths. Now if I want to test integrating with you library I have to jump through an additional hoop just to validate what should at the end of the day be as lightweight persistence as a memory stream. &amp;#x200B; `if (File.Exists(this.filepath))` `{` `File.Delete(this.filepath);` `}` `using (var spreadsheet = new Spreadsheet(this.filepath))`
Yea, I really hope that they fix that by RTM.
I don't know about you, but I generally prefer a 500kb Windows binary to a 50MB .NET Core Standalone binary :p
Are you thinking of .NET Framework? .NET Standard libraries are fully compatible with (and are recommended for) .NET Core apps. 
He didn't say he wasn't trying to get a non-native look on each platform. You specifically override both platforms to make sure you are. On Android, you could add a dropshadow, on iOS, you could raise it instead. That's the entire point of the custom renderers.
It should be reiterated that this project is a managed library, not an app. The package size on NuGet is around 170 KB I think.
&gt; I didn't find any way to create easy-to-use class maps like those used in CsvHelper, unless I missed it in their documentation. This is a good point; I just realized this feature is very nice. It would be even better if you had the concept of tethering a table to some logical offset. I'm not sure I understand the examples on GitHub, though. What does IndexRead/IndexWrite/IgnoreWrite/ConstantWrite do? I think it would be more intuit-able if you walked people through examples of how their C# POCO would be hydrated given a screenshot of an Excel document.
They do, but you need to declare them as a concrete class. No problem. I was addressing "it's evil for a library to ever change the class it returns so why would you need var". That makes sense most of the time. But having been burned by a time when it didn't, I'm more accommodating to var now.
+1 for Polly. Great circuit breaker pattern support.
`table` is a reserved keyword in SQL. If your table is really called "table", then you need to place the name in square brackets.
Why not name it OpenXmlHelper? You will come up in nuget search results more often then.
@folkcoder2 this is a great question to add to an FAQ section on your GitHub. Your elevator pitch however is rather long.
Historically, the only significant feature difference between C# and VB.NET features was `unsafe` code (which 99% of developers never touch). New language features like `async`/ `await` and tuples were typically added to both languages at more or less the same time. Only more recently (C# &gt;7?) have big features become C# only. The most important ones are pattern matching, as well as `Span&lt;T&gt;`-related stuff. C#8 will bring various new language features as well. If you look through the [What's new in C#](https://docs.microsoft.com/en-us/dotnet/csharp/) section you'll find more details. Since these are all recent additions to C#, you'll find countless articles introducing and describing them.
NSwag will generate a client for you, Look at it and learn, you will need to understand how it works eventually.
Like implementing many interfaces in a single class? All the implementation code goes in a partial to prevent polluting the main class code?
Apologies, I removed my comment as it was answering a different question.
Not to be unhelpful...but if the exam is tomorrow, isn't this a bit late?
Or one really big interface. As you can see in this example, the interface methods are just redirected to normal methods on the class. But the return types are different so they can't just be implemented by the methods directly. https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.SqlServer.source/shared/SqlServer/OleDbSqlServerDataSourceBase.Interfaces.cs https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.SqlServer.source/shared/SqlServer/OleDbSqlServerDataSourceBase.cs 
ugh, but, it is a good use case for using a partial
ugh
Perhaps you misspelled "hug." Would you like one? 🤗 --- I'm a bot, and I like to give hugs. [source](https://github.com/as-com/reddit-hug-bot) | [contact](https://www.reddit.com/message/compose/?to=as-com)
Interface segregation principle should mean you depend on abstractions, not concretions. I can’t think of a situation where you’d need to declare something as SqlDataReader would work, var would work, but IDataReader wouldn’t. But perhaps you could explain to me? Always room to learn. 
Yea, I wasn't too happy about having to do that. But with all the generics needed for the database-specific versions, the only way I could make a non-database specific API was via that interface. I actually got the idea from System.Data. In it you'll find a parallel hierarchy, one using interfaces and one using database specific classes (e.g. IDataReader vs SqlDataReader =&gt; DBDataReader) 
Definitely WinForms. With such a tight timeline you cannot afford to learn WPF as it would eliminate your safety buffer. Lone term I highly encourage learning WPF for desktop development. But not is not the time.
I'm interested to know why you think ms test is poor? 
I'd be interested in an answer to this question as well... kind of annoying that they seem to be trying to push Azure here.
ugh\_bot and hug-bot should get a room
In this case, he has to use `base` -- one of the method's parameters is the same name as the protected field he is trying to access.
Are there async/await versions of the many API methods? Thanks
Or, if what you want to unit test is built in house (which it should be), you could just change the scope to prototype instead of singleton. Everything you said was spot on, except the last line. Unit testing isn't something you can just not do... 
No worries I didn’t explain myself well. I’ve practiced loads and have a good amount of knowledge. It was more like the quirks of the exam that I’m after, like things to watch out for that can trip you up. 
Thanks for your response. How exactly "use modern looking graphics" is done? 
Didn't notice that detail and I have to admit, it is one of the darker sides of OOP or better to say the compilers not bringing the warning in this cases (although IIRC VS does now by default). 
A lot of older WinForms apps use 3D multi-color icons and bitmaps for buttons and other elements. Newer applications use flatter graphics with gradients of a single color. Replacing graphics depends on how they were loaded originally. 
When you drop a deuce and it coils around in the bowl, due to its length. And it steams because, well, it's hot and gross. Steaming five coiler. 
Okay, in hindsight I wish I didn't ask for that clarification, I feel like I might get a reprise of my dinner. But thank you for coming through nonetheless.
Yeah I thought about it a bit this morning, really wondering if I should clarify. But there were a couple of upvotes on your question, and I felt I had a larger obligation to explaining the term which is used quite a bit in the hick-ville redneck town I'm from. 
I don't know about you, but that small 500kb binary depends on 200mb of dependancies on the server that you may also have to install.
Id suggest searching /r/csharp older posts for this exam as some people disclosed their experiences
Why did you not call it Reddit.Api? 
Okay I’ll have a look more into the comments
Yes. Many, but not all. I'm always open to pull requests that add more asyncs.
I bind to interfaces in parameters. But I declare local variables of concrete types. IDataReader is an interface. You cannot instantiate it, only an object which implements it. https://docs.microsoft.com/en-us/dotnet/api/system.data.idatareader?view=netframework-4.7.2 "An application does not create an instance of the IDataReaderinterface directly, but creates an instance of a class that inherits IDataReader." var reader = MyLib.GetReader(....) Or DbDataReader reader = MyLib.GetReader(....) But never IDataReader reader = MyLib.GetReader(....)
Have you considered @using in your view? Not sure if this is the standard way in .Net Core but it works
Why another controller? It seems what you need is just another method to handle the date range in the same controller.
The solution works now thanks to your class ObservableCollectionExtended with a modified T4 template that includes INotifyPropertyChanged. However because I used your ObservableCollectionExtended instead of the original Collections of the Entity Framework data model I ended up writing a Save method in the ViewModel which was quite tedious again. This is primarily because I have to check the copies of the collections on modifications and apply those changes to the data model before calling save to the Entity Framework to commit the changes. I wonder if you have a better idea than the following tedious code in the ViewModel. &amp;#x200B; public void Save() { ValidateBuchung(true); // Overwrite Modified Items (Buchung) foreach (Buchung buchung in BuchungCollection) { Buchung dbitem = mDao.mKino.Buchung.Where(o =&gt; o.ID == buchung.ID).FirstOrDefault&lt;Buchung&gt;(); if (dbitem.Email != buchung.Email || dbitem.Name != buchung.Name || dbitem.PlatzNr != buchung.PlatzNr || dbitem.VorfuehrungID != buchung.VorfuehrungID) { SetBuchungItem(dbitem, buchung); } } // Added items foreach (Buchung buchung in BuchungCollection) { Buchung dbitem = mDao.mKino.Buchung.Where(o =&gt; o.ID == buchung.ID).FirstOrDefault&lt;Buchung&gt;(); if (dbitem == null) { mDao.mKino.Buchung.Add(buchung); } } // Removed items List&lt;Buchung&gt; delItemsB = new List&lt;Buchung&gt;(); foreach (Buchung dbitem in mDao.mKino.Buchung) { Buchung buchung = BuchungCollection.Where(o =&gt; o.ID == dbitem.ID).FirstOrDefault&lt;Buchung&gt;(); if (buchung == null) { delItemsB.Add(dbitem); } } foreach (Buchung delItem in delItemsB) { mDao.mKino.Buchung.Remove(delItem); } // Overwrite Modified Items (Vorfuehrung) foreach (Vorfuehrung vorfuehrung in VorfuehrungCollection) { Vorfuehrung dbitem = mDao.mKino.Vorfuehrung.Where(o =&gt; o.ID == vorfuehrung.ID).FirstOrDefault&lt;Vorfuehrung&gt;(); if (dbitem.Bezeichnung != vorfuehrung.Bezeichnung || dbitem.Datum != vorfuehrung.Datum || dbitem.FilmID != vorfuehrung.FilmID || dbitem.SaalID != vorfuehrung.SaalID) { SetVorfuehrungItem(dbitem, vorfuehrung); } } // Added items foreach (Vorfuehrung vorfuehrung in VorfuehrungCollection) { Vorfuehrung dbitem = mDao.mKino.Vorfuehrung.Where(o =&gt; o.ID == vorfuehrung.ID).FirstOrDefault&lt;Vorfuehrung&gt;(); if (dbitem == null) { mDao.mKino.Vorfuehrung.Add(vorfuehrung); } } // Removed items List&lt;Vorfuehrung&gt; delItemsV = new List&lt;Vorfuehrung&gt;(); foreach (Vorfuehrung dbitem in mDao.mKino.Vorfuehrung) { Vorfuehrung vorfuehrung = VorfuehrungCollection.Where(o =&gt; o.ID == dbitem.ID).FirstOrDefault&lt;Vorfuehrung&gt;(); if (vorfuehrung == null) { delItemsV.Add(dbitem); } } foreach (Vorfuehrung delItem in delItemsV) { mDao.mKino.Vorfuehrung.Remove(delItem); } // Overwrite Modified Items foreach (Saal saal in SaalCollection) { Saal dbitem = mDao.mKino.Saal.Where(o =&gt; o.ID == saal.ID).FirstOrDefault&lt;Saal&gt;(); if ((dbitem.AnzahlPlaetze != saal.AnzahlPlaetze) || dbitem.Bezeichnung != saal.Bezeichnung || dbitem.Dreidimensional != saal.Dreidimensional) { SetSaalItem(dbitem, saal); } } // Added items foreach (Saal saal in SaalCollection) { Saal dbitem = mDao.mKino.Saal.Where(o =&gt; o.ID == saal.ID).FirstOrDefault&lt;Saal&gt;(); if (dbitem == null) { mDao.mKino.Saal.Add(saal); } } // Removed items List&lt;Saal&gt; delItemsS = new List&lt;Saal&gt;(); foreach (Saal dbitem in mDao.mKino.Saal) { Saal saal = SaalCollection.Where(o =&gt; o.ID == dbitem.ID).FirstOrDefault&lt;Saal&gt;(); if (saal == null) { delItemsS.Add(dbitem); } } foreach (Saal delItem in delItemsS) { mDao.mKino.Saal.Remove(delItem); } // Overwrite Modified Items (Film) foreach (Film film in FilmCollection) { Film dbitem = mDao.mKino.Film.Where(o =&gt; o.ID == film.ID).FirstOrDefault&lt;Film&gt;(); if (dbitem.Bezeichnung != film.Bezeichnung || dbitem.Dauer != film.Dauer || dbitem.FSK18 != film.FSK18 || dbitem.Preis != film.Preis) { SetFilmItem(dbitem, film); } } // Added items foreach (Film film in FilmCollection) { Film dbitem = mDao.mKino.Film.Where(o =&gt; o.ID == film.ID).FirstOrDefault&lt;Film&gt;(); if (dbitem == null) { mDao.mKino.Film.Add(film); } } // Removed items List&lt;Film&gt; delItemsF = new List&lt;Film&gt;(); foreach (Film dbitem in mDao.mKino.Film) { Film film = FilmCollection.Where(o =&gt; o.ID == dbitem.ID).FirstOrDefault&lt;Film&gt;(); if (film == null) { delItemsF.Add(dbitem); } } foreach (Film delItem in delItemsF) { mDao.mKino.Film.Remove(delItem); } mDao.Save(); } &amp;#x200B;
What have you tried? Where are you stuck?
Mine defaults to "Store user accounts in-app" in the dropdown on the right. Clicking the "Learn More" link takes me to [this page](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/individual?view=aspnetcore-2.2).
I solved this with a modification of the T4 template (.tt file). Now the data model classes raise a INotifyPropertyChanged event.
So I guess you only run 1 program on your entire server? Wow - Talk about light-weight!
In your 30 field sample, at what # of records does ClosedXML have OOM exceptions? I would include that in your benchmark on GitHub as it would be illustrative. It looks like for 500,000 rows x 30 fields, it uses 2GB of memory (100% more than your approach). In this sense, it looks like you have not necessarily solved the problem of memory usage, either?
.Net Standard is an on-paper spec. .Net Framework is an old, large, messy implementation that implements the .Net Standard spec. .Net Core is a newer, sleeker, cross-platform implementation to replace the ".Net Framework". It *also* implements the .Net Standard spec. Think of .Net Core (and also .Net Framework) as being ".Net Standard, plus some other stuff". Essentially, you're telling your project that it needs to verify that everything you've done is available in .Net Standard 2.0 when you compile it. That way, none of the .Net Core-but-not-Standard stuff slips through and causes invalid or unavailable code to be linked.
One option would be to use Anchor's `ChangeTrackingModelBase` as your base class. Then check the `IChangeTracking.IsChanged` or `IsChangedLocal` property to determine if there are unsaved changes. This would require changing your T4 template again as Anchor models need to use this pattern: public int HitPoints { get { return GetDefault&lt;int&gt;(50); } set { Set(value); } } References: * https://docevaad.github.io/Anchor/PropertyChangeNotification.htm * https://docevaad.github.io/Anchor/ChangeTracking.htm
You are so helpful, it's amazing! I hope I can help you one day as well and be grateful for this.
Another option would be using reflection to make the comparison between the old and new version of the class. Or maybe update the T4 template to expose an "AreEqual" method since it already knows the list of properties at compile time.
Use my stuff, say good things about it, tell me about bugs so I can make it better. What more could an open source developer ask for?
[From the documentation:](https://docs.microsoft.com/en-us/ef/core/saving/transactions#using-external-dbtransactions-relational-databases-only) &gt; If you are using multiple data access technologies to access a relational database, you may want to share a transaction between operations performed by these different technologies. The following example, shows how to perform an ADO.NET SqlClient operation and an Entity Framework Core operation in the same transaction. using (var connection = new SqlConnection(connectionString)) { connection.Open(); using (var transaction = connection.BeginTransaction()) { try { // Run raw ADO.NET command in the transaction var command = connection.CreateCommand(); command.Transaction = transaction; command.CommandText = "DELETE FROM dbo.Blogs"; command.ExecuteNonQuery(); // Run an EF Core command in the transaction var options = new DbContextOptionsBuilder&lt;BloggingContext&gt;() .UseSqlServer(connection) .Options; using (var context = new BloggingContext(options)) { context.Database.UseTransaction(transaction); context.Blogs.Add(new Blog { Url = "http://blogs.msdn.com/dotnet" }); context.SaveChanges(); } // Commit transaction if all commands succeed, transaction will auto-rollback // when disposed if either commands fails transaction.Commit(); } catch (System.Exception) { // TODO: Handle failure } } } 
CastIron doesn't do LINQ, by design. It's for raw SQL strings. If your project already has LINQ bindings and LINQ calls, you should probably stick with that. If you have inline SQL strings and want a better way to organize things, consider CastIron.
As long as you make the business layer and the presentation layer seperate you can create a winform version now that can be easily ported to other display layers later. Unless there is a customer using the application there's no need for it to be super "Pretty" and winforms will get the job done quicker and easier. 
Could you elaborate on these?
We shall keep naming tradition: always end names with .NET or Sharp. :)
For data-heavy applications I'm to the point now where I'm faster with WPF than WinForms because of the better support for data-binding. But I have to be careful or I end up wasting all the time I saved on trying to make it look nice.
Okay all that makes sense. I have a newly created .NET Core class library. I changed its target framework to .NET Standard 2.0. Now, what I want to confirm is that when I press the build shortcut key in VS, how does it know to build a .NET Core project? Does it know to do so by looking at the new format `csproj` or something else? I ask this because there is no reference anywhere in the project to know that it is about to build a .NET Core project. So my thought was that when we specify `netstandard2.0`, why does VS not assume it is about to build a .NET Framework assembly and instead builds a .NET Core assembly? Thanks again, I am being a total idiot, I know. I blame the microservices architectures.
gutsy! 
Are you not familiar with the Mvvm design pattern?
Can you upload a sample project to GitHub so we can see what you have done so far? Are you familiar with \[FromBody\] attribute?
The controller aspect is probably irrelevant to his question, unless he has routes that are structured as /controller/method
Is this your problem? [https://www.jetbrains.com/help/resharper/PolymorphicFieldLikeEventInvocation.html](https://www.jetbrains.com/help/resharper/PolymorphicFieldLikeEventInvocation.html)
Think about .NET Standard as an interface. .NET Core and .NET Framework then are two (different) implementations of that interface. When you build a .NET Standard library, you're building a library that consumes that "interface" instead of the actual APIs. You're not building a .NET Core or a .NET Framework library specifically but your library can, in fact, run on either of these because they both implement the .NET Standard interface. The word "run" in that last sentence is key - the runtime framework is what determines whether the application as a whole is .NET Core or Framework. If you build a .NET Framework library, it will only work when running under a .NET Framework runtime. But if you build a .NET Standard library, it will work under both .NET Core and .NET Framework runtimes. And you're not being an idiot. I've been coding in C# since .NET Framework 1.0 and it still took me a long while to wrap my head around it all.
All of the targets are stored in the project file (the .csproj), and you can even multi-target by using different build configurations. There are two configurations by default (Debug and Release), but you can modify them, delete them, and/or add new ones. Each configuration is a completely new set of build properties, including the target framework. So you can actually have your project built both ways, if you want. "Simply" (is anything that simple?) create a "Core" and a "Standard" config, then set the target framework for each one in the Project Properties window. If you go a step further and set up TFS (or the Azure one they're pushing now, Azure DevOps), you can have it auto-build *each configuration* from the repo on a schedule, and even upload them to Nuget.
I'm familiar with mvvm, I'm curious about the benefit of these packages
Your questions would make for a great section on a book: * Are you allowed to access the repository directly from a ViewModel without going through a Service first? * Imagine for a second that your Repositories are in an assembly called [MyProject.Data](https://MyProject.Data), and your services are in an assembly called [MyProject.Services](https://MyProject.Services), and your views are in an assembly called MyProject.Views - then the answer to what you are "allowed to access" comes down to application partitioning and whether your partitioning scheme creates circular references. Just ignore the business rational for MVVM. Most developers accidentally create circular dependencies without realizing it. For this reason, experienced architects tend to create assemblies with very narrow roles, because we can then see what ProjectReferences are added in the csproj file when reviewing code, and if we see MyProject.Views referencing [MyProject.Data](https://MyProject.Data), we can instantly know there is tight coupling between the data access layer and the view layer. * If you're allowed to put business logic in your ViewModels, do Services serve any purpose then? * Services are a Domain-Driven Design concept. The main benefit should be that you have relatively simple entities, and your Services provide calculation and workflow progress and preservation of invariants. * ViewModels should be where you put presentation-specific concerns, such as negative numbers displayed red, positive numbers displayed green. What color you present the data to the user does not affect the data itself. * What exactly does presentation logic, application logic and business logic mean and how are they different? * First, give yourself some grace. Some of this will come with experience, and even after 11 years of professional programming, I occasionally make mistakes here. * Presentation logic deals with how the user sees and interacts with the data. Things like, "is timesheet submittable" determining whether Submit is a valid button/action on a form. * Application logic deals with how the user experiences all the presentations as a whole. For example, modal vs non-modal is a huge design question with vast repercussions for test cases and code re-entrant conditions. Additional "application logic" concerns usually involve gluing together how the code runs on the target platform, such as "single-threaded apartment" for WinForms applications or the [ASP.NET](https://ASP.NET) runtime model where code can run on different threads and the actual thread is determined by the runtime, not the user. &amp;#x200B;
That just seems like you’ve imposed an arbitrary rule on yourself and then had to work around it. What could be wrong with declaring a variable of type IDataReader?
Here is what I've tried... 
I'm following the documentation of the developers who wrote the classes and interfaces. I wouldn't call that arbitrary 😇 var will get me a variable of type DbDataReader today. If the library changed again, it would get whatever new type we decided to return, even if it's some other interface entirely, or a class which implements IDataReader and ICoolStuff. I'm not really following your position. You declare local variables to be of type SomeInterface? You can't new them up. All you could do would be to call some method which returns an actual concrete type that implements that interface. In which case your declaration would be misleading. Variables can't _actually_ be of type SomeInterface, since that's not a type. VS may show it as SomeInterface, but in reality it's SomeConcreteClass as set by whatever fills it in. DbDataReader for instance implements IEnumerable, which is not part of IDataReader. Wow I haven't looked at these in ages. Somehow IDataReader implements IDataRecord, and one of the methods in IDataRecord returns IDataReader. Wonder how they got out of that circular mess
Speed, flexibility and extensibility All three of these are lacking in ms test. The newer versions of it may be better than it used to be, but i've no compelling reason to go back to find out They lost me when you *had* to load test data from a spreadsheet! (tip - don't do that!)
Winforms fast and easy. Next .netcore will also support winforms.
&gt; Interface segregation principle should mean you depend on abstractions, not concretions. 1. No it doesn't. 2. The public API exposed by a class is "an abstraction". Having a class name isn't the same as depending on the implementation details of that class.
First of all, IDataReader is slower because every call requires a V-Table lookup. Every single call. So you are throwing away performance for no reason. Especially if the alternative is inlining the methods that you are calling. *** You are also potentially losing access to useful methods that don't happen to be exposed by the interface. I don't think that's a problem in this case, but it certainly can be in other cases.
&gt; You declare local variables to be of type SomeInterface? Yes, that is a very common habit, especially among Java developers. It comes from a fundamental misunderstanding of "program to the interface, not the implementation" and the "interface segregation principle". 
&gt; Somehow IDataReader implements IDataRecord, and one of the methods in IDataRecord returns IDataReader. That's so they can support OleDB. While we normally think of OleDB as a relational database driver, it is really much more flexible and can handle things like OODBs. Which means you can have records that contain collections of records.
Come on bro, you don't want to install 87 different runtimes and emulators to get a screen to load?
&gt; I can’t think of a situation where you’d need to declare something and SqlDataReader would work, var would work, but IDataReader wouldn’t. Oh, that's easy. IDataReader doesn't expose SqlDataReader.ReadAsync. https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqldatareader.readasync?view=netframework-4.7.2 
Oh yeah - easy! Haha! I guess I meant only using methods from IDataReader. 
Where? There's nothing in your post about what you have tried already.
Did you debug your code? Set break points and step through it line by line, each time evaluating whether the content of the variables are as you expect.
A dotnet standard library will be consumable by either a dotnet framework app, or a dotnet core app. I haven't used any yet :( What ends up in your /bin folder? Our multi-target csproj builds end up with different folders for the different frameworks targeted. [https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-visual-studio](https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-visual-studio) Ah, looks like there should be a bin\\Release\\netstandard2.0\\Foo.dll &amp;#x200B; That should be usable by either platform. You could also multi-target if you wanted to. I don't think it would buy you much with netstandard.
There are no errors according to Visual Studio (What I'm using for C#). You are correct that I want the integer result to be equal to the value the user inputted for the Console.ReadLine towards the top of the code.
&gt; There are no errors according to Visual Studio 2017 (What I'm using for C#). That's not what I asked for. I asked if you **debugged** your code. With a debugger (the one in VS is great). If you don't know how, then I urge you to look it up. It's an absolutely invaluable skill. &gt; You are correct that I want the integer result to be equal to the value the user inputted for the Console.ReadLine towards the top of the code. But why? You're replacing the value with a new one.
[https://blogs.msdn.microsoft.com/cesardelatorre/2016/06/28/running-net-core-apps-on-multiple-frameworks-and-what-the-target-framework-monikers-tfms-are-about/](https://blogs.msdn.microsoft.com/cesardelatorre/2016/06/28/running-net-core-apps-on-multiple-frameworks-and-what-the-target-framework-monikers-tfms-are-about/) &amp;#x200B; You can have #if NET452 blocks in your code, or #if NETCOREAPP1\_0 for core. Like maybe ... write to event log, vs write to stdout. &amp;#x200B; [https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20](https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20) &amp;#x200B; Has some info too, on what you may change in including packages, etc
Thanks!
Well again there's the minor performance hit. I would be careful about it for IDataReader because it is used in a tight loop, but in general it's probably not going to be significant. My main point though is that picking the interface over a single concrete class is an example of **premature generalization**. Until you have at least two implementations, with no common base class, that want to share the same code there's no reason to jump to the interface. Especially when it means that you lose access to capabilities that may prove to be useful.
Separated library: [https://github.com/JanKallman/EPPlus](https://github.com/JanKallman/EPPlus) using(var package = new ExcelPackage(new FileInfo(@"c:\temp\tmp.xlsx"))) { // calculate all formulas in the workbook package.Workbook.Calculate(); // calculate one worksheet package.Workbook.Worksheets["my sheet"].Calculate(); // calculate a range package.Workbook.Worksheets["my sheet"].Cells["A1"].Calculate(); }
I see what you mean now, sorry. I went ahead and did that. It's an issue with this whole area. while (result &gt; 0) { int remainder = result % 10; reverse = reverse * 10 + remainder; result = result / 10; } Because it goes through this multiple times, the 3 digit number is divided by 10 multiple times to where it just ends up being a decimal. I believe I just need to start over and figure out a new way to reverse the number that is inputted into the console by the user.
Did you create your library as .NET Standard? If so, then it can be used for iOS projects (via Xamarin)
I don't really know anything about filtering of a grid view, but it seems the part that you want to be asynchronous is the filtering happening within the grid view after you assign your filter. It seems to me that the grid view itself is the thing that is executing on the UI thread. I don't think there would be anything you could do on your end to make that process asynchronous.
Basically yes. Ty for the link.
Is there a way I can write your last example without iterating records twice?
I may try this out tomorrow (optimism around having free time... or even thinking I can plan my day). Thanks!
And WPF...
just a quick look probably because you are getting floating point and integer math messed up
Why is it so popular these days to allow unbounded buffers?
A bit peculiar that you can estimate the time it will take you to learn WPF well enough for this project. If you know what you don't know yet, you are probably far enough to learn it during the project?! I can't tell you what UI tech to use. Personally I'd go for WPF for most projects. But I can't estimate the amount and kinds of work that are ahead of you based on the details given. Regardless of UI tech - MVVM is a winner, especially for TDD and maintainability in general. When I started with WPF I skim-read an ebook for a few evenings after work and that got me to a point where I could pretty much google the problems I ran into while building the first projects. Your millage may vary.
The video is unavailable now, any other suggestions that is like this video.
There is not much difference between nutshell 6 &amp; 7 but I am not sure how much has changed since version 5
FWIW... Component One has a [utility](https://help.grapecity.com/componentone/NetHelp/c1themes/webframe.html#materialtheme.html) for applying the material design look to Winforms. I haven't tried it but I'm a fan of some of their components and find them to have good technical support when needed.
For each version, probably not, although C#5 is a bit out of date now to say the least. (you don't need to stop reading as everything in 5 is still there though) C# in depth might be another option with the [4th edition in early access](https://www.manning.com/books/c-sharp-in-depth-fourth-edition) which includes changes coming in C# 8.
I have early advantage. First heard about it in 1999 (when it was called Project Cool I believe...90s!) have worked in it ever since really. Spent 5 years at MSFT and got even more into it (spent a LOT of time going through the source for [ASP.NET](https://ASP.NET) when I was there). Still some things I suck at though, contra and co-variance never REALLY clicked for me. But read and write source constantly... 
Turn on code analysis. That will guide you towards having a better C# coding style and teach you along the way. Also, read the **.NET Framework Design Guidelines, 2nd edition**, if you haven't already done so. This book is key to understanding how APIs are designed in .NET.
Is there such a thing as having expert knowledge of c#? In the old visual basic times one could be an expert because the language and runtime had only a couple of thousand different things that you could know about it. A modern language as c# and environment like the .net runtime has far more than a few thousand things that you can know about it and as such you can never become an expert in c#. At least not if you are one of the normal people out there 😁 So the first thing is that you need to choose an area of expertise. For me it was desktop application development. Then I did all those kind of things you mentioned. Reading books, doing projects, listening to podcasts (I recommend doing this every day during your commute to work), subscribe to repository change notifications of interesting open source projects, etc., Etc. Also I made sure that the things I had to do during my work hours aligned with the things I was studying. If my work required me to do things that are outside this area of expertise then I would look for ways to change my work including changing jobs. If you can keep doing this for a while then you will get to an expert level. The best thing to this is that at the moment you feel you are getting near then you probably are already and you can choose another area and start all over again 😂 
Read the language specification, or as much of it as you can stand. It's pretty dry, but it's *the* authoritative source.
Pick an area you want expertise in and build something difficult in that area (even if it's a personal project).
Language, sure, framework? Well, that's a moving target. Just lots of time, lots of code reading :)
Understood that you've 1) learned the hard way and 2) there are lots of garbage tutorials...any good resources you'd recommend for EF?
I came over from many years of C++ development. The first few years I just tried to use C# as if it were C++, but as the language matured and I used it more and more, I became much more a C# dev rather than a C++ dev in disguise. It didn't hurt that the language was much simpler back then. I might recommend looking at some of your work and see if you can find something that can be 'modernized'. For example, 12 years ago, I used arrays of classes **a lot**. "I wish there was a way to add elements to an array without having to do this Array.Resize()," I'd say. Enter Collections. "But all this casting is so painful." Generics arrive. "I want to do more sophisticated things with collections like I do in SQL." LINQ is introduced. "But all those predicate functions!" And in came lambdas. This does not happen overnight. Generally, I learned a new concept and it would take some time to feel comfortable with it; that I understood how it really worked. It still happens now, currently, it is certain async constructions. I will master them and move on, though. And so it goes. The original code was fine, but is so far removed from what I'd write today. Today, it is more performant and much more concise.
&gt; 15 years of using the language. On top of 15 years of Win32/MFC/VB development before it.
Select "store user accounts in-app". It does not embed users into the code. It sets you up to use the Identity framework and you can use a database locally to store user accounts. 
Sounds like my story (spent 6 yrs at MSFT, BTW). For me, I launched myself into understanding CIL deeply. It had a fundamental effect on how I learned everything else. I first learned everything in 2001, so it was all new. I think I had Jesse Liberty's book and Eric Gunnerson's book, plus one published by Microsoft Press that was deeply focused on CLI (can't remember the name anymore). I later went on to work with Eric Gunnerson, Scott Guthrie, Anders, and Don Box (who could make me feel mentally exhausted after only 5 minutes) - I was lucky to have had the honor to work with them. They all challenged you really KNOW the code once it turned into CIL (or WinAPI calls). Eventually, I wrote and published my own C# book from the knowledge I gained (which made me a "hundredaire" :) ). tl;dr: Everything keeps changing, but, ultimately, the stuff "under the hood" doesn't change as fast. I learned that knowing the lower level stuff made it easier to adopt new ideas and syntax.
Idk. I think there's too much for someone to ever be an expert in terms of knowing all the things. I think what makes an expert is knowing the fundamentals of programming well, knowing the conventions and patterns of the language to the point it becomes almost instinctual, and having the creativity and stubbornness to find a solution for any problem. It's also important to know enough of the terminology to search for the things. Knowing the common things is nice in that it saves Google time, and it's important to know the broad outline of things so you can formulate a plan. But the details are always only a search away, so it's silly to try to know absolutely everything. 
Make use of a temp var to store the result in the beginning int result = Int32.Parse(Console.ReadLine()); int startValue = result; int reverse = 0; At the end use that var to display it to the user Console.WriteLine("Your original value minus itself in reverse order is equal to: {0}", startValue - reverse);
I'll check it out, thanks 
Xamarin essentials is a package that facilitates access to more native apis (geolocalisation, platform independent filesystem, network access etc...) The other is one of many Mvvm frameworks the kind of which have developed over the many years of WPF being a thing.
Required, not always but usually. You'd be at a significant handicap without one.
If you get into this career you will work with a lot of people who don't have a degree, or who have a degree in something completely unrelated. A degree definitely isn't necessary. HOWEVER, it's a good first thing to filter on when people are looking at resumes. If it's between you and another guy, both with the same skills and same history, the job is probably going to the guy with the C.Sc. degree.
If you don't have experiences, a degree can give you your first job. It also depends on the companies. Some of them will only give you a certain salary based on your diplomas.
You need a degree or "equivalent experience". Honestly, I would target hire someone with four years of practical experience than four years of book learning and toy projects. But I don't always have that option and everyone starts with zero experience. -- former applicant screener 
Hey there, Always good to see people coding, I'll assume based on your code that you're a bit new to coding so I'll phrase things from that: * [The documentation headers](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L46-L50) you have at the top of your functions should follow an already existing convention: [Which you can find here](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments) * [Your use of FileStream](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L72) inside the folder containing your programs executables could be considered quite dangerous given that your program is a web facing server. If someone had access to your endpoint and knew of this vulnerability, they could exploit it. * I know lot of people have lots of opinions on the use of comments in code, but I feel sure enough to point out that [comments like this](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L63) are overkill since the line below it is very obvious. Consider restricting your usage of comments, at least to those that provide some extra information that you would not have if the comment were not there. (Though personally in the team I work with, maybe 1% or less of all line in our code base are probably comments) * Using a [Catch all](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L82) is [generally considered a no no](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1031-do-not-catch-general-exception-types?view=vs-2017). If you wrote this because you wanted to use the `finally` statement, you can just write `try{...}finally{...}` no `catch` required. * [Code like this](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L93-L132) is a perfect candidate of extracting into a method of its own. General rule of thumb is methods should not be longer than 10 lines long. It's a guideline, but if you can't fit your whole function on the screen without scrolling then it almost certainly needs some refactoring love. * Good to see that you are [Checking your arguments](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L155-L158) but what about if `reportName` is null? or what if `content` isn't null, but just empty? * [Finally blocks](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L87) are not really needed for this. Setting`binFormatter` to null does not dispose of the object in the way you are probably thinking. If `binFormatter` has a `.Dispose()` method then you should call that. If it doesn't then you can get rid of the `finally` block. * [This if statement](https://github.com/BanalityOfSeeking/ServeExcel/blob/master/ExcelTemplate.cs#L225) should be inverted. A simple `if(...){return;}` without the else statement would suffice. The less indentation you have the more readable your code is. There is quite a bit more I could nitpick but probably the most valuable things are just how clean you make your code. You're obviously missing a lot of knowledge of C# development do's and don'ts but you'll learn all that with time, the code I've referenced isn't terrible at how it is achieving the goal it is meant for, but it is probably a little too messy. I hope my feedback helps you out! Developing little project here and there was my bread and butter when I was starting out and looking back at the code I wrote for them it just looks so terrible compared to what I can write now. In the end, it's all a learning experience! Best of luck!
It’s not required, but it’s definitely one of the things that managers, especially HR people, will filter on. It’s not impossible to get a job, but it will make it much harder to get that first interview. 
**Essential**? No, experience and some demonstration of skill is arguably more important in the long run. **Helpful**? Significantly, a degree will get your foot in the door to get said experience, it also gets you past the infamously clueless people in HR. I have a CS degree and it provides the basics in; * Mathematics * lower level computation. * data structures * project management * VCS management * Ethics/professionalism * software design * virtual machines * networking Jack of all trades but there's a lot of building blocks and skills that a self taught programmer is probably not going to have. Compared to the real world experience I don't consider it immensely useful in my day job but it is a very useful thing to have on a resume. 
In our scenario, it was \`good enough\`. Interval is very small (something about 500 ms) and the batch size something about 10k per message type so as long as this code is on production, we didn't encounter any problems right now. In fact, we didn't think about setting any limit on a buffer, cause we want all of the messages to be proceed since in previous implementation we send messages immediately what causes problems (for example duplicates).
&gt;Is there such a thing as having expert knowledge of c#? In the old visual basic times one could be an expert because the language an &amp;#x200B; Read the VB manual from end to end, was expert. Hated myself. Wen't back to C.
 *I hope not :)* Not got a degree but work as a Principal developer for a multi million pound company
Thank you, I will implement all your suggestions, and hopefully get better, at this C# thing.. Coming from ASM and C++ its still how I think. I do know a bit more about C# then this lets on, definitely no pro though.. 
Welcome to the club. It would be sad if after just couple of years you would feel like an expert. 
No.
C# is a relatively shallow language, in a fairly standard paradigm: object orientated, single inheritance, multiple interfaces, garbage collected. It's pretty much Java with different syntax, with a few minor differences. I started working with C# about a year ago and had a really solid grasp of the language in about 6 months. There's not too much to know (unless I'm missing something hugely). Even "Linq", the "functional" parts are really just object orientated methods on interfaces, they're not really functional at their core, and the implementation for enumerators again, is just syntactic sugar for interface implementations. In addition to C# being a strictly object orientated language, it also prevents some of the flexibility of say, C++, which allows multiple inheritance, and also a more holistic approach between both value and reference types, but C# jams you into reference types if you want inheritance, and multiple inheritance is banned, so that greatly reduces the learning code. In short, if you're even a half decent software developer you will be able to code in C#, there's just a good chance you'll find it frustrating because it's restrictive paradigm does not fit well with many real world problems (i.e. not everything fits into a nice single inheritance object tree).
I have a degree in English and I've been a developer for 15 years.
&gt; Even "Linq", the "functional" parts are really just object orientated methods on interfaces, they're not really functional at their core, and the implementation for enumerators again, is just syntactic sugar for interface implementations. So many people don't understand that, to their own detriment. 
The most common answer to this question in any of the following fields: programming, web development, machine learning developer, ai developer, game developer and similar is: It's not required, but definitely helps.
Not C\# specifically but a recruiter I talked to recently told me about an interviewee of his who rated himself a 9/10 on entity framework - he couldn't name the difference between a DbContext and a DbSet&lt;T&gt; or eager loading vs lazy loading but he knew how to use db.Users.Id to return an int. So by my accounts, if that guy was a 9/10, being an expert in c\# is as easy as knowing control structures and loops.
What other way is there than to study the reference material and ingrain it by applying it in your projects? I worked with C# for years on hobby and professional projects, read the MSDN C# programming language articles, read Eric Lippert’s blog for years, read the C# spec, read assorted C#/.NET related blog posts, read the proposals on github from time to time, help people with questions on Reddit and StackOverflow, help my coworkers with the same, etc. 
No.
Why would self taught programmer do not have knowledge in virtual machines and networking or even basics of data structures?
&gt; Turn on code analysis. This exactly. I (personally) have a thing for ReSharper, but from what I have heard Roslynator has come a long way and CodeMaid can be a great assist.
If you want to write games with C#, try /r/Unity3D or /r/godot
&gt;one published by Microsoft Press that was deeply focused on CLI Would that be CLR via C# by Jeffrey Richter? 
Hmm, reading this I started questioning if I know these things myself. DbContext - Represents your entire database, no? So through a DbContext object you can access the different tables within it. DbSet&lt;T&gt; - I don't think I've ever used this directly, but from the name I'd guess a DbSet represents one table within the context? As for lazy loading/eager loading, I think it relates to how and when you perform tasks. When doing something eagerly you do it all in one fell swoop, whereas when doing something lazily you do it as required. For example if you're eagerly loading a webpage, you load all of the elements and make all of the calls required to finish drawing the page as the user calls to draw the page. However with lazy loading you might omit loading certain elements until the user stumbles upon them, through scrolling or interacting with something. I think images are the most common example of things that can be lazy loaded. --- Granted, I'd never say I'm a 9/10 in anything. The reason I'm a programmer in the first place is because there's always new things to learn.
I know pretty much all of the language features. But there are huge chunks of the framework I've never touched. So from a C# point of view you just have to read. Once you've learned the basics like classes, delegates, reflection etc you just have to keep reading up on it. Now they release new language versions more often it's very easy to read up on the new features as they are released.
By using dataloadmode = async, it would enable it, but this is not recommend by the provider itself. It seems like the search is async for a couple seconds, then it suddently hangs, and then releases the UI thread as fast as it's done searching...
I've posted my code?
A degree is really helpful to get your foot in the door. Once you have a couple years experience it's not such a big deal. But some large companies will require you to have a degree. I think that's almost more of a HR thing.
Yes it's .NET Standard 2.0.
&gt; You should probably fix the retry logic Yeah I did put that one in a bit hastily. If somebody wants to do a pull request on this I'd be more than happy to merge it in. I'll get around to fixing it myself eventually if nobody else beats me to it. Your comment covers a few topics so I'll respond to your other points later when I have more time.
Hmm I don't think I included monitoring of a user's comment history, but I should be able to get that in for the 1.1.0 release. In the meantime, you can still do it but just not with the built-in monitoring functions. You may consider that an oversight on my part.
Thanks! 
Thanks!
I don't know if it's less overwhelming, but you can try this repo : [https://github.com/rafaelfgx/DotNetCoreArchitecture](https://github.com/rafaelfgx/DotNetCoreArchitecture)
Just read some C# tutorials as if you were a beginner. If you're coming from VB, you'll be able to skim through it at 100x speed because you already know almost everything. That way you're guaranteed that you'll not be missing any tools/keywords/features. (well, assuming the tutorial is complete). &amp;#x200B;
I agree with this. Languages have evolved; there's so many areas to know it's hard to be an expert in everything c# (Unless perhaps you're John Skeet?) 
I first heard about it in college when C# 2 was the current version. I really started learning it when C# 3 was just out, so there weren't so many features that I was overwhelmed by it. Every time there was a new version, I spent a lot of time reading about and learning the new features, even updating the code in some of my projects. Again, not so many new features to be overwhelmed by it. I can understand C# can be difficult to learn for newcomers because there is so much at one time. So, I know the language very well but that's not all there is to it. Knowing C# doesn't mean one knows ASP.NET, the Entity Framework or many frameworks. (I'm not very experienced in ASP.NET for example) I started reading Jon Skeet's book "C# in Depth" The book explains C# in almost the same way that I learned it. It starts at C# 1.0 and then goes through each version. It's pretty good.
Hello, I'm a beginner myself but have done a lot of research. From all the sources I've found, I think the best to start at would be the tutorial course of sololearn.com (free). It's however for the biggest part theory, so I recommend doing praxis on your own at the same time. 
Hey FlareGER, Thanks for the advice, I'll make sure I check it out! Appreciate it, Vep
Acabo de encontrarte por aquí, y no pierdo de vista tu canal, ¡suscrita!
If its not a ton of data why not make it key:value pairs and dump the lot in a json? Or maybe one json per recipe?
If the data is only stored locally XML is fine.
learn Entity Framework, it may sound like something "too complex for now" but it isint, you will thank me later. The only thing you need to know in advance as a begginer is LINQ queries.
*Less likely. None of these are hard but it's entirely possible for any of these skills to simply never have come up. Basic sushi is easy but many chefs wouldn't have a clue how to make it for the same reason. You can be a self taught web dev and not have a clue of what a stack is or how the HTTP protocol works past POST/GET json to a URL. If you're good at it, you will learn them eventually but a fleshed out course is a massive jump start. A course like software engineering or comp sci gives a lot of background knowledge into various areas, there's a lot to learn outside the course but the fundamentals are there.
This is also highly cultural related. Where are you from?
What have you tried so far to solve your issue? What keywords have you looked up? What have you tried out?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Building your own Java-like GC logs in .NET](https://www.reddit.com/r/dotnet/comments/aps1j7/building_your_own_javalike_gc_logs_in_net/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Not sure if I'm missing something really hard but I can't seem to find how to get a (self-)posts content? All examples resolve around the title only but how can I get the body of it? 
&gt; ASP.NET Core, docker, microservices, best practices, etc. ... &gt; for a beginner Be careful! maybe learn one at a time or just as needed if you're in a professional position and dropped in the deep end (we've all been there). I'm a fan of [jasonGT/NorthwindTraders](https://github.com/JasonGT/NorthwindTraders) and using something similar in production. Not doing micro services (too small a business) but codes clean enough that i don't see a future transition a concern. If you get into that sort of style maybe read [Dependency Injection Principles, Practices, and Patterns](https://www.manning.com/books/dependency-injection-principles-practices-patterns) if you're not super well versed with DI. 
Since OP asked about expertise, I would say knowing of all the features is very very far from making anyone an expert. 
I recommend my project - [https://github.com/kgrzybek/sample-dotnet-core-cqrs-api](https://github.com/kgrzybek/sample-dotnet-core-cqrs-api) This is not example of docker and microservices, but you can look how to design one application / service using Clean Architecture, CQRS, Dapper, DDD, EntityFramework 2.2.
not at all. i'd rather hire somebody that enjoys programming in their own time than just any rando with a CS degree and no other experience. all a degree actually gets you is a slightly higher chance of being called in for an interview until you get your first job. after that you may as well wipe your ass with it. i can think of a million things i'd rather spend 50-100k on.
Yes it would. Good job! Wow. Brings back memories :)
 var selfPostContent = r.SelfPost("t3_someid").About().SelfText; 
https://learncs.org/
Can you show me documentation that recommends against declaring a local variable as an interface type? Not somewhere where they don't do it in their example code, but somewhere where it specifically says, you shouldn't declare variables of an instance type. Yes, I declare variables of interface types. Obviously you can't new them up, but there are other ways of getting an object, most obviously in this discussion as the return value of a method. The declaration isn't misleading. You don't have to declare your variables to be the exact concrete type returned by a method, that would just reduce the flexibility of the code. And if it was important at all, then the compiler would enforce it. If there's a method that returns List&lt;int&gt; and I'm going to call that method and then use the result, there are various ways I can do this. Presumably your idea of the "correct" way is: List&lt;int&gt; items = obj.GetList(); However, for me, the declared type of items indicates what it's going to be used for. Looking at that line, I'd assume it's going to be treated like a list, ie things might be added, removed, reordered, or whatever. If I was only going to do a foreach loop through the result though, I'm not going to make my code depend on the Add, Insert, Remove methods, the Count property, and so on. I'd just do: IEnumerable&lt;int&gt; items = obj.GetList(); It's now clear right at the declaring line that the list won't be modified in any way and will in fact only be enumerated. Not only is it clear to the reader, but to the compiler too - IntelliSense won't show me the Add method and so on, and if I try to call it, it'll be an error. Can you please tell me what the down-side of that approach is in your opinion? When you're using var, you're saying, I don't care what type it is. You can't have an object of type "var" any more than you can have one of type "IDataReader". The difference when I use IDataReader instead of var is I'm saying I don't care what type it is, *as long as it implements IDataReader*. So it's actually giving both the reader and the compiler a bit *more* information on that line. Using var in your approach only works if whatever object gets returned includes all the methods/properties you're accessing on that variable lower down. If one is missing, and you don't call that method for 20 lines, then the compiler error for "method not found" (or whatever it's called) won't appear until that line. If instead of var you'd used IDataReader, then the compiler error would be on the line where you initialised the variable, saying that the type returned from the method doesn't implement IDataReader (type mismatch). To me that's more helpful. By using an interface I convey intent to the reader. Using "var" gives zero information other than "don't care". Which isn't true; you do care because you're about to use methods on it. 
Sign up for for Microsoft developer essentials and get Pluralsight 3 months trial. IMO pluralsight is the best source for c# and .net Fundamentals of c# for absolute beginners on Microsoft virtual academy is also pretty good and it's free too 
&gt; The Interface Segregation Principle (ISP) states that clients should not be forced to depend on methods that they do not use. By declaring a variable of a certain type, you make your code dependent on that type, including all methods that you do not use. And as has been seen in this very conversation, if you change to a different type being put into that variable, it's a breaking change that requires changing the declaration of the variable. If both old and new methods return objects that implement the same interface, and the variable's type is that interface, no change is needed.
I've found this repo https://github.com/EdwinVW/pitstop and the accompanying youtube-video (https://www.youtube.com/watch?v=-AfZxdXa7yc) very helpful.
I don't know if I'd recommend that kind of deep dive for a beginner, but here's what I'd recommend instead. First, write an app that you know you can write. It should seem kind of boring. Don't be ambitious, pick something you can finish kind of quick, like a to-do list. The goal is to be able to finish your "without containers" projects from memory, without errors, in less than an afternoon. If you can do that, you're ready. If you can't, you're trying to learn two things at once and cognitive load doesn't scale linearly. Learning 2 things in parallel often takes 4x as long as it would to learn one thing at a time. When you are ready, I think the next step is to learn how to implement an API endpoint within a container. Your app is probably asking a database some questions. Pick one of those questions and start writing an app that will run in Docker that can answer it. It's OK if what it returns is a hard-coded response, what matters is that it's a VALID response. When you can do that, you'll have learned a boatload about Docker. So the next step is to move more things into more Docker containers. Then your app becomes "a thing that asks many apps that happen to be at many different endpoints different questions". At some point, you'll notice that it's MORE complicated to have this architecture than it was when you had a monolithic app. This doesn't mean microservices are bullshit. They're tools for managing large, complicated apps that need scalability and robustness. That's not really true for a hobby to-do list app! So when you reach this point, you try bigger projects, or start asking questions like, "How do I make it so I can shut down some containers but the app still functions?" Also now's probably the time to try those community projects again, they probably aren't overwhelming anymore. You really want to learn in layers, so it will go in this order: * Get good enough at ASP .NET you can tell if an error is the server itself or the container. * Get good enough at simple container management to understand the common errors and their causes. * Understand how to coordinate multiple containers to act as a cohesive whole. * Understand how to make multiple containers that do one thing, load balancers, etc. By the time you get to the third bullet point, these example projects won't be overwhelming anymore. You'll find you can guess things about how they work and be right more often than not. 
I don't do any Java, so I can't really speak to whether those developers are experiencing a misunderstanding. But in C# people do it all the time, for good reason. A class that implements 5 interfaces but you're only going to use one? In that case, declare the variable to be of that interface type. It's clearer what the intent is, and it makes sure you don't accidentally call something from the wrong interface. There's also the situation where the methods on an interface might be explicitly implemented, and thus not available when the variable is of a concrete type. What would you do then, cast the object of concrete type to an interface? I'd just have the variable be of the interface type in the first place if that was all I was using. What if the method getting you this object *returns* an interface type? Surely it's allowable then? Here's my reply to another post with more: https://www.reddit.com/r/csharp/comments/ap1sal/why_c_is_your_favorite_language/egauytv/
I have an associate degree in network security, never took a single programming class in my life and I’ve been working as the only programmer for a small but high income company for over 6 years making decent money. Sometimes it’s about what you can do, not definitions to general terms. I’m self taught and I do all the frontend/backend/database/web development for the company I work for. If you can’t learn it yourself take classes but if your determined to learn it you can do it without school.
I prefer to use the IEntityTypeConfiguration interface to do my fluent entity configurations, so that at least the configs are cleanly separated by entity. That said, I don’t think there is some “easy” way around this. You’re defining your DB Schema, so if you do it right, you only do it once, and you’re good.
Just do the simplest thing possible: Store each recipe in its own text file. Don't use XML or JSON, just something that you can make up and allows easy reading and writing. If you need a more complex solution, try storing parts of the recipe in a subdirectory with different text files for different parts of the recipe (e.g. description, ingredients, etc...).
For a true beginner you should just try building basic things off of the normal project templates while you spend time going over the ASP.NET Core documentation (it's relatively comprehensive and covers many topics). As someone who self taught, I'm going to give you a hard truth...you can learn all there is to know about microservices and best practices, but you will still be terrible at applying them until you have helped design and support a dozen or so projects / products. It may sound odd, but knowing **when** to apply microservices is more valuable than knowing how to. It should never be done up-front and when done for the wrong reasons it can jeopardize the throughput or stability of a system and negatively affect developer productivity. The truth you won't hear as often organizations or advocates that are hyping certain patterns or tools is that *the devil is in the details*. The hundreds of small choices and tradeoffs you make when developing are often more important than the large broad ones and **all** of the choices small-and-large need to be guided by experience to be effective. That said, there is still a lot of value in learning the best practices, as you will recognize the advice as you start to build systems and it will make it easier for you to form opinions and communicate about those practices and grow as a developer...but as a beginner, learning as much as you can about the basics of your platform will speed up your early learning more than knowing the broad patterns, unless you are planning to build large systems without any experience (which I tried many times when I was learning, but wouldn't recommend).
Losing access to methods that aren't in the interface you're using is a feature, not a bug. The whole reason we use types is to restrict ourselves to make life easier. As for the performance issue. Wow, never heard people warn against using an interface for performance reasons before. Even if what you said was true, how much optimisation of a DataReader do you think you'd need to do before vtable lookups were the bottleneck? But of course it's not true. If the type of the object can be ascertained at compile time then those concrete methods can be called directly. You won't be doing lots of vtable lookups unless you're assigning your variable to types that implement the same interface but can't be known at compile time. And in that situation you really have no choice.
Picking IDataReader over SqlDataReader (or var) isn't really generalization, although I can see some argument for it. In fact, IDataReader doesn't include some methods, because it only contains the methods that *all* data readers can use. By using that interface I'm saying I'm only interested in a DataReader, not a specific type. A person reading it can instantly see that it doesn't necessarily need to be a SqlDataReader for the code to work.
Thanks for that. I still can't find a way to get links from a post however. Applying the same logic from a selfpost to a linkpost doesn't work apparently. Is it some other prefix instead of t3? I guess that stuff undocumented is a bit too high for me. :D 
* Install visual studio community (IDE and free), not visual studio core that it is only a notepad with plugins. * Create a Winforms application: IDE menu: file-&gt; new project -&gt; c# -&gt; windows desktop -&gt; windows forms application. * And press play. It will show you an empty application. And now, you can start playing. However, it's easy to learn if you have a focus. You will go to nowhere if you don't have an objective. For example, let's say that your objective is to **land a job** (objective). * Question, what I should do to land a job?. Earn c#? not really. Companies don't hire c# programmers, they hire c# programmers that also know webforms,mvc, sql server, ef,linq and so on. Of course, you can't pick all of them (at first). So, even if you have an objective, you must set your course, and since you can't pick all technologies then you must select one of them. MVC is a good start (is just an example). So, your course could be as follow c#-&gt;mvc-&gt;second technology-&gt;thid technology-&gt;get a job. 
**A degree is a waste of time and resource**. You will only get a single line in the CV. However, **some jobs ask for it so, it can't be helped**. But the current trend is = no, we don't care about your degree. Why?. (There are a few exceptions) * They teach you outdated technologies if any. * They teach you out-of-focus topics. * They are clueless of the reality. * They fill years with useless courses. Usually, you will learn more in your first 3 months working for a company than in years of university and the best, the company paid for it. :-) So it is not rare to find a job that asks: "we need a developer with 3-6months of experience (or 2-6 years of experience)." 
1. Possible yes; advisable not really. 2. That's the problem.... See this SO answer for a definitive account of the issues. [https://stackoverflow.com/a/1943836](https://stackoverflow.com/a/1943836) &amp;#x200B; There are other approaches...example; can you pull all of the data into something other than a JET (Access) DB - in memory cache? Even into SQL and have a single process updating and reading the Access data? Even something like Event Store running as a facade in front of the Access DB may be a partial solution...
Can't be modified with ? to denote a nullable result of a non-nullable type, if you wish to be pedantic.
But somebody without experience can volunteer and join some startup, or use his network (relatives or friends) to find a job. 
The issue with wpf is the learning curve. Once you've learnt I would agree that it's actually much quicker to get a data driven (maybe any) application up and running. And the way it deals with layout can actually be much quicker than fucking around with anchors etc.
You are right, having contacts is also one of the best way to find a job.
In pluralsight.com there is a path to master c#, I followed that after years of pure experience knowledge. It worked 
tsk tsk. Let's say you want to learn German. You don't want to learn and memorize a german's dictionary, you want to read/talk in German. It's the same with programming, you don't want to learn and memorize all C# framework and libraries, you want to program (i.e. design programs), so the percentage is quite useless, you could be an expert by only using the basic. Its not rare to find a novice using a lot of tools, libraries, and paradigms for no reason. so you are an expert if you could: * do good programs that work that use less resources and time to develop/ maintenance. 
You could have also chosen a `DBDataReader` and have gotten access to more methods at no additional cost. 
Yeah but I don’t *want* extra methods. If I need it to be a DbDataReader then that’s what I’ll use. But in general I’ll choose a type that accurately conveys what I’m going to do. If the method changed to return some other class that implements IDataReader but isn’t a descendant of DbDataReader, again it would be broken. 
&gt; If the method changed to return some other class that implements IDataReader but isn’t a descendant of DbDataReader, again it would be broken. That's exactly what I mean by "premature generalization". You are worried about being able to make a swap that in practice will never happen.
Hmm this *should* work.... string url = r.LinkPost("t3_someid").About().URL; 
&gt; All the methods like Read() and GetInt/GetString() etc are virtual anyway, so changing from IDataReader to SqlDataReader just means that you look the method up in a different vtable, not that you miss the vtable out entirely. Ugh, right. SqlDataReader should have been marked as `sealed`. They lost a good opportunity there.
&gt; Losing access to methods that aren't in the interface you're using is a feature, not a bug. The whole reason we use types is to restrict ourselves to make life easier. That makes perfect sense when talking about a parameter. But for a local variable or return type, in my 20+ year career I've never once said "Gee, I really wish this was more inconvenient. I know, let me discard half of the object's functionality." I have said, "Fucking asshole. Now I've got to check each and every one of these IEnumerables to see if they are a collection or a query and call AsList or ToList as appropriate".
&gt; It's clearer what the intent is, and it makes sure you don't accidentally call something from the wrong interface. And that's a problem why? In very specific circumstances like "Here is the IAsycMethods interface, use it so you don't accidentally call a synchronous method" that would make sense. But in the general case that's worrying about nothing. &gt; What if the method getting you this object returns an interface type? Surely it's allowable then? Methods should be liberal in what they accept (interfaces if possible) and specific in what they return. The latter is so that you give as much flexibility to the caller as possible because you don't know what he'll need. 
But if you're only using those methods, it's *not* inconvenient. It's more inconvenient to have a bunch of stuff in your IntelliSense that you have no intention of using but might autocomplete accidentally. It's more inconvenient when reading the code to come across a line of code declaring an instance of a type with 10 methods than one with 2, since you have less idea what it's needed for. And for your second point, just call ToList(). Or are you advocating for premature optimization?
&gt; Is it some other prefix instead of t3? Nope. With Reddit API types, all posts are t3. Comments are t1, users are t2, subreddits are t5, and t4 is supposedly for "Account" but I have yet to ever actually see one. &gt; I guess that stuff undocumented is a bit too high for me. :D Nah, it's never easy finding your way through a library-- let alone a brand-new one-- that somebody else wrote without examples. =) I laid out the basics, but it's my hope that the community will start filling in the blanks from there in terms of producing examples and other docs. I'll of course be available to correct any errors as I see them to ensure quality. Also, check out the tests for more detailed examples. There's a butt-ton of 'em in there.
Are you struggling to create your own events, or to use events on built-in controls?
&gt; Yeah but I don’t want extra methods. Then don't use them. They don't hurt you in the slightest. &gt; If the method changed to return some other class that implements IDataReader but isn’t a descendant of DbDataReader, again it would be broken. Is that really going to happen? In the list of possible changes, you are far more likely to be asked to convert your code to use async calls than to be asked to support a database that, for whatever reason, only supports the obsolete `IDataReader` interface. (Yes, it is obsolete. It wasn't even supposed to be part of .NET Core, but they decided to add it for backwards compatibility reasons.)
Being thrifty with memory allocations is not a "premature optimization". GC pressure is a know issue for any performance sensitive application and needlessly copying potentially large arrays because someone has a hard-on for interfaces is idiotic.
No, no. The Read() method is in DbDataReader, so marking SqlDataReader as sealed wouldn't stop a call to Read() from being a virtual call.
If SqlDataReader is sealed, then it's methods can be treated as non-virtual by the inliner. (Assuming that you are using the SqlDataReader interface and not the base class interface.) 
Oh, there is also devirtualization. If the JIT knows that the concrete type will always be X, then it can devirtualize calls. For example: IList x = new List&lt;Foo&gt;(); var y = x.Count; This is a .NET Core only feature and I don't know the extend of its capabilities yet.
In my minimal experience, I find myself picking up knowledge about the language and framework as particular projects and issues call for a new approach. If I don't use that newly-acquired knowledge regularly and need it again months or years down the road, I always have to go back and reference my old notes (if I've kept them). Typically, I don't expect every detail to remain fresh in my mind for years.
We are specifically talking about a situation in which it *did* happen. 
Really? What database driver was added that supported IDataReader without DBDataReader?
Why Access? You can use SQL server Express is free and allow multiple users without problems
It's up to you, but once UI's get n complicated (You'll know n when you hit it) you code everything pretty much. When I used to do WinForms, I'd lay out some basics on the form, regions rather than actual form. dialogs I'd usually just layout manually, but anything complicated was dynamically build. Don't know laying stuff out by hand. Do that until you're comfortable with it and perhaps dabble with adding controls programmatically through the presenter (assuming you're using MPV) I spent a while at MS and our project was very different. They had 400 (yes I said 400) near identical forms with zero code so they were easy to transfer to .NET 1 (so going back a bit). We had 2 forms and everything else was code. We were not good candidates :) On the other hand our code did clever stuff, so meh :) So anyway, in summary. Stick with laying stuff out, dabble with using code to move, shape, etc controls, and look up MVP which comes in two versions but is the MVVM of the Winforms world :) Good luck :)
Ugh, so many typing errors. I'll leave them "for flavour" ;)
If you can google a problem and solve it then you’re 90% there. Just know the correct patterns to use and you’re there imo. 
The Interface Segregation Principle is something that a lot of people get wrong because the don't understand the context of the word "interface". The interface in ISP originally about C++ header files. Imagine you have a massive object that is used throughout the whole application. You only care about methods 1 thru 10, but anytime methods 11 thru 40 are changed, you have to recompile all of your stuff because that's how C++ works. With ISP, they broke that class's header file into 4 files. This allowed you to only take a dependency on methods 1 thru 10, the methods in your version of the header file. How does this apply to C# and Java? In a direct sense, it doesn't. Because their compilation model is completely different. Unlike C++, you don't pay for changes to header file with long compilation times. So there's no additional cost for referencing `Foo` instead of `IFoo`. But you can still benefit from the philosophy of ISP. Your "interface" isn't a specific header file, but rather a whole JAR or Assembly. By moving infrequently changed code to the bottom of the dependency stack and frequently changed code to the top, you can still reduce the number of recompilations needed. 
To build Windows WinForms applications it is best to use Visual Studio to do it. While it would be possible to create a UI from scratch, I've never seen anyone try to build a real world Winforms application not using it. For WPF applications you can use VS, Blend or another tool to create the XAML file. I've always used VS to create this since it's easier to work with when there is no separate UI designer. Most internal corporate apps are done by a single developer or a small team of 2 to 4 people doing the full stack.
Built-in. Sorry, I should have been more clear. 
I figured it out once and kept a code snippet to reference. I'll link you to it shortly. You generally tend to subscribe to the event in the load event or constructor though.
Please spend the time and buy ReSharper. And get in the habit of not allowing any of your code to be checked in until you pass all the warnings.
This is a snippet from a Pizza POS system. Then in your form/whereever: PizzaController.PizzaChanged += OnPizzaChanged; You'll also need to create the OnPizzaChanged function with the event args as an argument (in the form). ========================================== public class PizzaController { public delegate void PizzaChangedEventHandler(PizzaChangedEventArgs e); public static event PizzaChangedEventHandler PizzaChanged; public static void OnPizzaChanged(PizzaChangedEventArgs e) { PizzaChanged?.Invoke (e); } public class PizzaChangedEventArgs : EventArgs { public Pizza Pizza; public ItemStatus ItemStatus; public PizzaChangedEventArgs(Pizza pizza, ItemStatus itemStatus) { Pizza = pizza; ItemStatus = itemStatus; } } }
Hopefully you can figure out what's happening there and rename everything accordingly :)
I dropped out of university 80% of the way through, but that's another story... I would have made more money at my first few jobs if I had had a degree. But now that I have about 6 years of professional experience, it really doesn't matter. If a company only hires candidates with degrees, they just made it a lot easier for me to screen them out as an incompatible company culture :P I've considered going back because I was so close to finishing, either doing cybersecurity or trying to focus more on ECE/EE instead of CompSci. But for someone who hasn't been to college at all, I don't know if it is worth the debt and risk. I can tell you from experience being deeply in debt sucks ass and makes you feel trapped.
Expert? I mean I have done software development for 25+ years and C# from 1.0, mostly learning .NET, and 2.0 and on professionally. I just got so used to using C# as well as other design patterns and practices (useful for developing with anything) that I feel like I am really good at it. Not sure if I am an expert, always something new to learn.
Is IEntityTypeConfiguration available in EF Core or just EF 6? I have a hard time keeping track of what's been ported. 
Real answer right here. Access is terrible.
You're pretty much spot on with your guesses about the database stuff. DbSet is used in code-first migrations (and maybe in the .edmx file in database first? I haven't done db first for 8 months) to tell the builder to create the table if it doesn't exist, and to expose the table to the DbContext. DbContext is pretty much exactly like you said, it's like a wrapper for your entire database. So if you have a DbContext with a DbSet&lt;Product&gt; named Products and you instantiate a new DbContext named context, you can access the products table using db.Products. Eager/lazy loading on websites is pretty much how you described it, but entity framework's eager/lazy loading is a little different. Say your Products table has a foreign key to a Vendor table. When you call db.Products.ToList(), lazy loading will only load the information from the products table and won't get the information from the vendor table until its explicitly requested. This helps speed up query times. Eager loading can be enabled in the builder if you want it to be, but lazy loading is the default. I know enough about c\# and entity framework to be useful, but I'd consider myself about a 3/10 in both because there's just so much to learn and so many different ways to apply that knowledge. Your attitude about new things to learn is an awesome trait to have, and it's the same reason I became a programmer as well. I'm starting my first software dev job in about 2 weeks and I can't wait to see what else I learn.
I am on 2.2.1 and IEntityTypeConfiguration is in the Microsoft.EntityFrameworkCore namespace.
Thanks.
Access is not good at multi-use, use SQL Server Express. If the company doesn't like that, you will need to sell SQL Express to them. Access, at least from what I remember, I haven't used it in a long time, has the database engine inside the app you are running and database files on some file server. This means you have multiple applications do database access against a shared file - this will generate a lot of deadlock-like situations, resource conflicts, and performance issues. SQL Server Express, obviously runs on a server, your app uses a provider to access the SQL Express server to issue queries and commands and SQL Server Express handles all the database access and conflict resolution of resources - performance would be likely better as Access databases, especially on a network share, quickly degrade in performance as the file grows.
I’m not trying to be a dick, but you’re talking about a lot of information to take on at once for a beginner. I don’t see any way that combining all of this could be anything but overwhelming for a beginner. I’d start with one and work your way though, I think most people would be suitably whelmed just learning .NET Core. Build a Core app with a tutorial. Then, learn about microservices. Refactor or better yet re-write your app with what you learned of microservices. Then learn docker. Learn how to containerize your app. Microservices basically is “best practices” in this space, at least right now. But learning about microservices before you learn your framework is probably going to be wasted time since you won’t have a reference to go off of, I doubt much of it would stick in your mind. 
You'll need to use DbSet for mocking also 
&gt; When you call db.Products.ToList(), lazy loading will only load the information from the products table and won't get the information from the vendor table until its explicitly requested. This helps speed up query times. Eager loading can be enabled in the builder if you want it to be, but lazy loading is the default. Oh yeah, this makes a lot of sense as otherwise you'd risk puking up the entire database at the user, particularly if there's any circular references. An endless self-referencing loop of products and vendors. Ah. Recursion hell.
This guy learns
Thanks. I appreciate it. 
I use a mix of Forms and UserControls. Most of them designed using the Designer. There are cases where I build custom controls, but I also make sure they are compatible with the Toolbox. For complex forms however, I tend to use methods which build the forms using reflection by matching types with input controls and then adding then to a UserControl which will deal with layout.
I don't use excel as a database. 
I've been a developer for over 20 years and never needed a degree for any job I applied for until last year when I tried to apply for a lead position. Despite having lead experience at multiple companies they only wanted applicants with a degree. So I guess maybe? Personally I've always found education to be a small part of the whole person with experience being more important. Almost all job specs I've seen list education requirements as degree/diploma/relevant experience.
Everybody wants to learn programming in 31 days. I used to really beat myself up because I'd look at tutorials for 4 or 5 days and not get it and feel like I was so stupid. Then I started doing the above and accepting that it takes me 4 or 5 days to know what I don't know, 2-3 weeks to learn the basics, and 2-3 months to be dangerous with anything. That sounds like a long time, but if you do it a couple of times what helps is the *anything*. The really big hurdle to get over is realizing you can't learn faster by studying more than one thing at a time. 
For built-in stuff, attach the event handlers using the designer, then check the code-behind (i.e. Form1.Designer.cs) to see how it does it..!
I've been a designer of the C# language for the last 15 years. I can only keep about 75% of it in my head at any one time. Maybe 10% of the framework: things like List and Dictionary. Thank goodness for Intellisense (tm)!
so for standard windows forms, there are 3 files. one is a resource file that we can ignore for now. the other two are what you're looking for. FormName.cs -&gt; this is generally where your event handlers will go. FormName.Designer.cs -&gt; this is generally where components are created and wired up. the quickest way to see the default behavior is to add a button to a form via the designer and double-click it. this will automatically create and wire up a click handler for the button. in the FormName.Designer file, you'll see relevant lines of code added to the `InitializeComponent` method. something like `this.button1.Click += new System.EventHandler(this.button1_Click);` should be there in addition to setting the size, position, name, text, etc... for the button. in the FormName.cs file, you'll see `InitializeComponent` being called in the constructor and a method signature for your event handler should be present. something like private void button1_Click(object sender, EventArgs e) { } now, there's no mandatory reason for this code to be in separate files as they are both defining stuff for the same class (you can notice the `partial` keyword at the top of both). however, this was done just for organizational purposes. the Designer file has everything to create the form itself and the non-Designer file is where all your actual logic goes.
[https://marketplace.visualstudio.com/items?itemName=SimonHughes.EntityFrameworkReversePOCOGenerator](https://marketplace.visualstudio.com/items?itemName=SimonHughes.EntityFrameworkReversePOCOGenerator)
It should be optional or an extension, think azure functions where you would not want something staying alive for ages if it didn't work the first time a. D if retry was baked in it might me a nonstarter to even use the lib. I agree poly is good.. But keep it flexible. 
Imagine what happens when one day somebody who doesn't understand Turkish has to read your code. 
You don't need a degree to be a C# developer. If a company says you do, then that company is wrong. Try to avoid working for companies that are wrong.
But why 
When making a Disctionary, think about what you will want to use as the key. IE, what information do you have (key) and what info do you want (value). In this case, the user will give you a color and you need to look it up in the dictionary. So you need a dictionary with the key =&gt; color. So how do you store the sizes? Well they are all doubles, so how about as a list of doubles. So your dictionary would look something like: Dictionary&lt;string, List&lt;Double&gt;&gt; fishDict As for a random value: https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.7.2#System_Random_Next_System_Int32_ where the 'max' is the size of the List for that color. Also you may want to look at: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-initialize-a-dictionary-with-a-collection-initializer and you may also want to change your fish colors to be an enum instead of a string. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum 
Oooh, nice, thanks! I'll read up on this over lunch + the rest of the day.
Definitely need to use the Random class from the Math namespace. Just to get you thinking, you probably want to define your dictionary as Dictionary&lt;string,List&lt;decimal&gt;&gt; If you can figure out why the dictionary is set up that way the solution becomes trivial. Hope that helps!
I did a project with MS about conversion from VB6 to VB.net many many years ago. It did not go well. Make the leap, VB.Net does you no favours.
You beat me to it with the dictionary declaration, I personally prefer list over array because I'm lazy lol
What is that editor? In any case, I have no idea why you'd choose to use this over fully fledged IDE, like VS, or Rider. 
I indeed wouldn't recommend converting from VB6, because you're ultimately stuck with the wrong paradigms and idioms. That said, VB.NET as a language is fine. It even has some cool features C# lacks, like XML literals, and it had optional parameters long before C# did. It also has some anti-features like automatic default form instance (I wish this were a compiler option). So does C#, though; for example, making `/` a C-style integer division was IMHO a bad call, and VB gets this one right. Overall, I prefer C#, but recent versions of VB are vastly underrated. It matters more that you understand the idioms of the ecosystem, like data binding and LINQ (which, too, VB does just fine), than any particular language.
The concept is called Developer lockin
obligatory ryanreynoldsbutwhy.gif
Can't you use at least the Community Version of VS?
notepad.exe master race!!!! epic!!!
This is my go to. It's what finally made me get it all. Just spend some time reading the code and do a little side reading on each of the techs used. 
Great book. It's written very well and is easily understandable. 
For money :)
ahhh job security
Actually I sort of agree. We are talking about people who rock at language design though :)
This is eBA Workflow Studio which is created to develop workflow projects for a system called eBA. Not so popular outside Turkey. The codes written in this editor are getting hashed then transferred to somewhere else and compiled there. I have no pyshical access to the .cs file. I thought maybe i can write the code in v.s. and copy paste in the editor but i have to manually create every object in the form so that doesnt really accelerates the job.
Quite a pickle you've found yourself in
Sorry I had never thought of it. The origin of this system is Turkish so all the solution partners are also Turkish. 
Or just vs code.
Or rider...
Visual Studio Community is free, so is Visual Studio Code.
i wish :/
So I should declare my variable to be of a type with loads of stuff in it that I don’t need, and then not use any of it, just because you don’t like interfaces? Sorry, no. Look we’re both obviously knowledgeable about this stuff and I’m sure if we were in a meeting we’d come to an agreement in just a few minutes. Reddit isn’t the place to try, though, so I’m going to respectfully bow out and say we both have valid viewpoints. 
actually it colors the strings. better than notepad
VS Code is free. Which is why I mentioned it. Rider is not.
that is not the reason i'm using this IDE
Sad ... no dark theme
Op didn't mention price being a factor
Removed: Spam.
I'm not sure where you are going with this, but often free software is more appealing to a company or an individual than pain software. Especially when said free software is a huge step up from what they are currently using. OP also didn't say he had a budget. In fact, OP said that he uses this because that's his companies setup, and compilation is done remotely. If you want to nit pick, your rider comment is just as useless.
Just remove the links and check out the tool ;) . Easy to mark immediately as spam 
Then Removed: Rule 3, Rule 6, Rule 7.
I think most of the hate from VB.net comes inherited from the VB6 era.
Just increment `i`.
You having a bad day or something? I just threw out an alternative. Plenty of times I've paid for software out of pocket because it made my life easier even though the company didn't pay for it. Rider, I believe, is worth the investment even if he had to pay out of pocket. Even if op doesn't actually compile his own code he can still benefit from having automated code analysis, unit test support, etc which he probably doesn't get from his current setup. 
Also know as Job Security.
Wow ! Even though my brain hurts from really wanting to refactor that \_OnClick into smaller functions (40+ rows of code in \_OnClick ?!)
So why ***are*** you using it is what they are asking.
This is unbelievable. Traitor.
&gt; The codes written in this editor are getting hashed then transferred to somewhere else and compiled there. I have no pyshical access to the .cs file. AAAAAAAAAAAAAAAA- *takes breath* AAAAAAAAAAA
Can't you copy the .Designer VS generates precisely to create those forms? Unless the ones you place are not the one that comes from .net by default. https://imgur.com/a/RmLDL5O
Community isn't free for all cases. For all but a few specific purposes in businesses over a certain size, then you have to pay. Code is free, but only marginally better than any other coding text editor for C#. 
If you liked (or have to convert something from) VB6, then sure... I can see the attraction to VB.NET. And if you've been in VB.NET all this time, I can understand any reluctance to move to C# or something else. But I have serious difficulty understanding why anyone would want to pick up VB.NET instead of C# at this point. It seemed like a questionable choice even a *decade* ago.
The numeric "parse" methods don't know what to do with the non-numeric characters, so they throw an exception. You need to remove all non-number characters before you call "Parse". Also, there is an alternate "TryParse" method that you may want to try using. That one returns true or false rather than throwing an exception. It does have some differences in how it's used, so you'd need to look that up, but it should help.
OP: &gt; The codes written in this editor are getting hashed then transferred to somewhere else and compiled there. I have no pyshical access to the .cs file. I thought maybe i can write the code in v.s. and copy paste in the editor but i have to manually create every object in the form so that doesnt really accelerates the job. 😂
Thanks for all of your comments but i want to enlighten something. This IDE is not free. You have to pay couple hundred thousand euros to buy the system for your company and the workflow studio is being installed only into servers. You can't even have it in your local system. &amp;#x200B;
First rule of coding; look to see if someone has already solved your problem [https://stackoverflow.com/questions/21950093/string-calculator](https://stackoverflow.com/questions/21950093/string-calculator)
You could at least use VS Code. It's free, and based on an open source project. https://code.visualstudio.com
I believe the Regex has a **Matches** method, that returns all the matches in the string in a **MatchCollection** that you can loop through. Each **Match object** in the collection will also give the start index and length of the match for each match in the string (**Index** property and **Length** property). That way you do not need to bother with IndexOf.
Thank you. I have been taking the wrong approach it seems like, thank you very much! :)
*twitch* 
Yeah, every VB.NET project I've ever come into contact with came from a shop that had reluctantly moved on from VB6 and recently heard of this hot new thing called XML. I'm sure you *could* use VB.NET for neat projects, the language is perfectly capable. But I've never worked with anyone who does. 
I can say without doubt that VB.NET is far easier to code in than C# and there are many small things that make it so easy - just see how we open new forms and can control them easily. Whereas in C#, both starting forms and controlling them is more or less like Java. **However**, C# is superior to VB.NET in overall development because of many-many things. Microsoft is also balling on C#'s side more. VB.NET development updates are almost a joke at this point, we can say VN.NET won't be updated in near future. So shift to C#. You also get more NuGet packages.
Form objects are customized [asp.net](https://asp.net) objects. Thanks for the advice tho
Do you mean outside the if statement but within foreach? I'm gonna try out and report back, thanks!
there is also native support for CSV in VB.NET but not in C#. You need 3rd party library or reference Microsoft.VisualBasic assembly for that.
I guess I can't do Regex.Matches with a list of strings, or can I? I tried i = match.Index; but it always returned 0 for every matched item.
&gt; So shift to C#. You also get more NuGet packages. What? NuGet packages are language agnostic; it doesn't matter if you're using C# or VB.NET as long as the targeted .NET Framework versions are compatible. 
Sorry :P edited.
Try setting the customized DLL as references in VS and see if you can use them there, then you just need to copy the Designer file contents into the class and it should work just the same.
If you got 250 pcs or make 1 million in revenue and can’t afford a license of visual studio professional then you doing something wrong 
I converted a 80k line project from vb6 to .net, it was quite easy.... Then we refactored to fix the pradigms and idioms... I dream, my boss said we are not upgrading to .net and I quit 3 months later.
*Back in the days* VS Professional was needed if you wanted to use the highly optimizing c/c++ compiler and/or advanced debugging tools. Now you can simply run away with the Community Edition and all is fine. I see the team using the Enterprise version plus IntelliJ Ranger and the Team Extensions. They need a i7 Surface laptop with gigs of ram to even run this monster. But that is a completely different beast to work with. VS Code is much better for C# than most other "simpler" editors around.
This isn't programming.... These are macros.
I know but i have to manually update the class everytime i make changes on the form. All these extra work makes this method inefficient.
At some point they should have realised pretty much all the good developers use C# and the conversion path is almost free. I cant think of a logical reason to continue to use vb.netin any active project.
Mmm really? I honestly though it would be a copy paste every time you want to compile on the other one? You could try to mimick the designer class with just another class using the partial keyword like the designer does, so you only have to copy paste when you make changes in the respective class. But if it doesn't work for you guess nothing much can be done.
You actually sounded like your taking the piss out of vb developers...
&gt;These are macros There are customized objects used in this code. No change in the c# syntax
I think vb is a lot easier to read than c# is, but C# gets all the love.
damned macros... hehe what's a macro if it's not code btw?
Are you sure lazy loading is default? I thought eager loading was?
I've been a professional developer since 1987, working in C# almost exclusively since 2002. Definitely not an expert, but I know how to do what I need very quickly, even if I'm not always using the most recent language features. I do need to learn more about the Task and async stuff, and I should work on getting better with lambda expressions. I've also been working mostly in WinForms, so I've probably only gained about 1 year of total WPF experience over the past 5-7 years - I feel like I know very little about WPF. 
&gt;But I have serious difficulty understanding why anyone would want to pick up (*Edit: as a newcomer to .NET*) VB.NET instead of C# at this point. For me, I started with VB.NET because my experience was primarily with VBA so the learning curve from VBA --&gt; VB.NET wasn't as steep as it would have been going from VBA --&gt; C#, since I didn't have to try and relearn all of the syntax and keywords and everything else *on top of* learning the framework. &amp;nbsp; Once I was a lot more comfortable with the .NET Framework and differences in design patterns and approaches (and came to appreciate the value of lambda expressions), I made the transition to C# (`r =&gt; ...` is ***so*** much nicer to write than `Function(r) ...`), and the learning curve from VB.NET --&gt; C# was a lot nicer because it was primarily just having to break the old muscle-memory stuff and relearn syntax (and to stop forgetting to type `;` at the end of every line all of the time). &amp;nbsp; I imagine it might not be as difficult for people who are already experienced in using multiple languages regularly, since you'll already be used to switching syntaxes, but the progression from VBA --&gt; VB.NET --&gt; C# felt a lot more natural to me and I feel like I spent less total time struggling to figure out how to do something than I would have if I tried going right from VBA to C#. &amp;nbsp; But I think it ultimately depends on your reasons for learning .NET in the first place. If you're doing it for employment/career purposes, C# is where you want to be. If you're basically just experimenting and already have a decent understanding of VBA or VB6, then with VB.NET you'll at least be able to hit the ground ~~running~~ a little faster because you won't have to relearn syntax and can also bask in the glory of the multitude of quality-of-life improvements that VBA lacks (like implicit variable declarations and single-statement declaration/assignment (e.g., `Dim SomeVariable = 1`)). &amp;nbsp; For the majority of people, though, it's almost always going to make more sense to go right to C# instead of VB.NET. 
Why would u work there then? Is finding another job position not feasible?
Hey, Nobody forces you to use self contained applications, feel free to use the runtime dependent deployment if you care that much about space savings. Not to bother you, but a single app (~120MB) usually produces or consumes a many, as in 3+, gigabyte large database. Nobody really cares about pesky 150MB.
It returns zero, I guess because your regex indicates a whole match of the regex, obviously. What are you trying to extract for each string exactly?
Not at all. I love VB more than C# to be honest because of how easy development becomes and the syntax is so good. Never feel like doing C# after doing VB for a lot of years. But sad that VB is really disliked by new C# devs. They bash VB to the point that they never even coded in it and base their opinions on some articles :(
IDE is really awful but i like my job.
It might depend on the specific 8mplementation, but I'm pretty sure lazy loading is the default. C\# corner also says it's the default in [this article](https://www.c-sharpcorner.com/article/eager-loading-lazy-loading-and-explicit-loading-in-entity-framework/) but that you can force eager loading using linq include, or by setting Configuration.LazyLoadingEnabled to false in the DbContext class (as seen in the documentation [here](https://entityframework.net/lazy-loading))
Here is how I go about trying to become an "expert": In short, if you have ever read Alan Perlis's "[Epigrams on Programming](http://www.cs.yale.edu/homes/perlis-alan/quotes.html)", most of the things there are pithy explanations of what I'm about to say. Probably my favorite epigram as it relates to being a "language lawyer" is: &amp;#x200B; &gt; 10. Get into a rut early: Do the same process the same way. Accumulate idioms. Standardize. The only difference(!) between Shakespeare and you was the size of his idiom list - not the size of his vocabulary. &amp;#x200B; This is critical, because, as most here will tell you, it's nearly impossible to keep every aspect of C# - both how and why - in your head at all times. &amp;#x200B; That said, at one point I was an awful engineer. Let's get into how I became a significantly better engineer. * ReSharper * I would diligently fix *everything* ReSharper would warn me about. Even typos. You might think this is dumb, but as a 12 year old kid, I would sit in IRC chat with the founder of Dinkum Software, Tom Campbell, and he would tell stories about how many places he's consulted for where the engineers would ignore compiler warnings. * Mastering for loop, foreach loop, while loop, do-while loop * I practiced a lot of problems from books like Deitel&amp;Deitel, but also read books like Code Complete which talked about off-by-one errors, as well as research by Whitehead et al on [bug fix patterns](https://dl.acm.org/citation.cfm?id=1553603). If you read the research, you'll see that most bugs are caused by relatively simple mistakes. What's also interesting is the same developers repeat the same mistakes. Meaning, if a developer has a bug because they used for loop instead of foreach to iterate over an IEnumerable, chances are they have written code elsewhere in your code base with the same mistake. The same goes for not closing database connections and not using using statements to automatically dispose of external resources (like database connections). * Avoiding Anti-Patterns * Was told in college, by an engineer from Naughty Dog Software, who worked on Crash Bandicoot and other great games, to avoid using singletons, because you can never predict when you might actually need more than one of something. *Gosh, looking back, this simple advice was so hard to follow at the time.* * I read books on the subject of Anti-Patterns, such as Eric Allen's *Bug Patterns in Java* * I read blog posts about anti-patterns, and would discuss them with friends. It may sound weird, but I did not want to ever be that engineer who was programming with their pants down and didn't realize it. * LINQ * I spent a lot of time writing SQL and "Thinking in sets". * But I also benefited a lot from listening to Bart De Smet talk about The Essence of LINQ and the "MinLINQ" talk he gave on Channel 9: [https://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-MinLINQ-The-Essence-of-LINQ](https://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-MinLINQ-The-Essence-of-LINQ) \- at the time, I had been reading blog posts about anamorphisms, catamorphisms, and isomorphisms written by Haskell programmers and most of the stuff flew right over my head, but most of what Bart discussed here deeply resonated with me. * Parallel LINQ * After digesting Bart De Smet's Essence of LINQ talk, I started to parallelize code at work by figuring out what the serializable sequences of business logic were, and splitting IEnumerable's of my entities via things like candidates and companies, and then passing that down to a timesheet processing engine I wrote. * Task Parallel Library * This is slightly more complicated than Parallel LINQ, especially if you have not done much concurrent programming before. * One of the first things I did was search for common TPL bugs on Stack Overflow, via searching for "tpl deadlock [asp.net](https://asp.net)" on Google. Boom. Bunch of blog posts came up written by consultants teaching me some things that I probably learned in my computer science program, probably got right on a test at some point, but forgot about. * One of the most basic things you can do when writing concurrent code is to know if the libraries you are using are thread-safe. Many libraries will say as much, especially those written by Microsoft. For example, Entity Framework DbContext is not thread safe. If you're going to start using concurrent code, probably the hardest thing to get to grips with is how to safely call non-thread-safe code in a thread-safe manner, or how to look for alternatives that are 100% thread-safe. * Micro-benchmarking * Learn how to benchmark code. Even if it is just using StopWatch and Xunit to start out. * Try implementing things two different ways that on the surface seem identical, but are syntactically different, and then figure out why one is slower or faster than the other. If you can't figure out why, ask someone, and then try to generalize their answers so you can apply those lessons learned in other areas of performance tuning. * Learn every step of the build pipeline * I grew up with Visual Basic 6, so I was somewhat accustomed to dragging and dropping objects to create user interfaces, and doing "rapid application development" (RAD). While my first employer helped me break this habit, it wasn't until I read Chris Sells' [Windows Forms Programming in C#](https://www.amazon.com/dp/0321116208/ref=rdr_ext_tmb) introduction in chapter 1, "WinForms From Scratch", where he built things from the ground-up, that I started to believe *it was even possible* to pull back the curtain of such vastly complex systems. In this book, he uses the most basic feature, the c# compiler and a text editor, and doesn't even use \*.sln files or \*.csproj files. Then he dives into configuration settings XML-first and then shows you the Visual Studio GUI for it *after the fact.*\-- I apologize to those of you laughing at me reading this, but you have to realize, growing up, walking to Barnes &amp; Noble as a teenager and sitting on the floor hoping to one day learn enough to do this cool programming stuff professionally, I had glanced through thousands of books, and this "hands on" ground-up approach was nothing short of revolutionary. * If you're talking to a database, learn a database migration framework. I recommend FluentMigrator, but I've also used Chuck Norris' RoundhousE and Flyway. * Learn how to configure and use a build server like TeamCity * Learn how to configure and use a deployment server like Octopus Deploy * Code as Data, Data as Code duality * I recommend learning Lisp to deeply understand expression trees, but understanding the trade-offs in storing code as data, and then Eval()-uating it on the fly (such as is done effectively when you call Entity Framework ToList()), can give you powerful new concepts to think about how to solve problems that otherwise wouldn't seem possible without piles and piles of code.
But you didn't answer the question - how did you do it? The OP did not ask you how to read the german dictionary.
Then if you're using the runtime because you have multiple applications, .NET Core is pointless. That's sort of my argument :p
When I began teaching myself to code about 10 or so years ago, I started with [VB.NET](https://VB.NET) because: 1. It was a quicker learning curve, 2. I already had a little bit of VBA experience, but not much else 3. The company I worked for, at the time, built any web apps in VB (this has fortunately since changed) I was told by more than one developer that (being self-taught), I probably did it the right way, but I ought to start learning C# if I wanted to progress in my career. That was about 10 years ago; now, I can't stand the sight of VB. \*shudders\*
&gt;I would like to make a script that documents time spent playing Cancer every day - help would be appreciated FTFY ^(Bleep bloop. I am a carcinogenic bot | ) ^[info](http://redd.it/amo7ot/)
Hi Matt, I upvoted your answer because it's humble, but-- how did you do it? For example, how did you get into designing languages in the first place? Somewhere there was a meta-learning step that took place that enabled you to become someone who mastered Ronald Rumsfeld's "known knowns". For example, how did you know you could implement a LINQ 2 SQL framework for type-safe database calls?
VB.net has an awfully syntax, and I say that as somebody who has done a lot more VB.net than c#. Once you get used to the c syntax, VB is just a pain in the ass. You spend forever writing out overly verbose statements that are a handful of chars in c# (e.g implements vs :).
Unless the site has an API, maybe look at web scraping which is essentially downloading the HTML and searching through it for the data you're after. You strip that out and use it in your own program. Take a look at the HTML agility pack.
I will do that, thank you!
Hello Again, one of the ideas to mitigate FileStream, is to move to a entirely transient IO path, no files ever hitting disk of the server. try { Template = new TemplateContainer(); TemplateObject tempObj = new TemplateObject(); Template.TObject.Add(tempObj); Template.FormatLength = header.Count(); tempObj.Format = new string[Template.FormatLength]; header.CopyTo(tempObj.Format, 0); binFormatter.Serialize(ms, Template); InMemContainers.Add((reportName, SheetName), ms); return true; } catch(Exception ex) { ms.Close(); ms.Dispose(); Console.WriteLine(ex.Message); } } Any thoughts?
Why do you need to use DbSet for mocking? What are you trying to mock?
It works, big THANKS. You're a lifesaver, I spent a whole day with this thing. I wouldn't have thought it was that simple lol
I'm just playing with some word combinations for some NLP tasks, so I want to extract specific tokens depending on their POS tag. In the end I could get the index of each token thanks to u/tweq
 public static bool TemplateInit(string reportName, string[] header, bool createNew, HttpListenerContext socket) { try { TemplateInit(reportName, header, createNew); socket.Response.OutputStream.Write(Encoding.UTF8.GetBytes("Successfully Initialized " + reportName), 0, ("Successfully Initialized " + reportName).Length); return true; } catch (Exception ex) { Console.WriteLine(ex.ToString()); socket.Response.OutputStream.Write(Encoding.UTF8.GetBytes("Failed Initialization " + reportName), 0, ("Failed Initialization " + reportName).Length); return false; } } public void TemplateInit(...) { using(var ms = new MemoryStream()) //I assume you intended this to be a memory stream (I'm also sure this examples constructor is missing a parameter or two { var template = new TemplateContainer(); var tempObj = new TemplateObject(); template.TObject.Add(tempObj); template.FormatLength = header.Count(); tempObj.Format = new string[Template.FormatLength]; } } I'd recommend that you catch your System.Exception higher up. A rule of thumb here is that you should only catch System.Exception to prevent a fatal error. You should catch it as late as possible and use it for logging and either a safe failure or a recovery of the application.
No worries. I should say that web scraping can be seen as dodgy and you shouldn't use it in a commercial project unless you have permission or own the site being scraped. It's fine in a small personal project though when you're learning IMO. The better way would be using an API if the site provides one.
You can say without doubt it's easier *for you*. I have a hard time doing some things in VB cause they just make no sense and are super easy in c#. Also new forms are literally identical in c# vs VB have you ever written in c#?
Snitches get stitches.
I will keep that in mind.
God you unfortunate bastard. 
Unit testing repositories 
return 24; 
dodgy in terms of reliability, but web scrapping is a very common thing. 
So what are you complaining about?
you will be happy to know that I have removed static from almost all code, still a bit more to go and it should be gone completely. I will also implement the protection levels suggested. Here is a more accurate picture of where I am.. public bool TemplateInit(string reportName, string SheetName, string[] header, bool createNew) { BinaryFormatter binFormatter = new BinaryFormatter(); byte[] MemoryBuffer = new byte[header.Length * 1000]; MemoryStream ms = new MemoryStream(MemoryBuffer, true); if (header.Length != 0) { //Handle Creation of new template if (createNew) { try { Template = new TemplateContainer(); TemplateObject tempObj = new TemplateObject(); Template.TObject.Add(tempObj); Template.FormatLength = header.Count(); tempObj.Format = new string[Template.FormatLength]; header.CopyTo(tempObj.Format, 0); binFormatter.Serialize(ms, Template); InMemContainers.Add((reportName, SheetName), ms); return true; } catch(Exception ex) { ms.Close(); ms.Dispose(); Console.WriteLine(ex.Message); } } else { try { if (InMemContainers.ContainsKey((reportName,SheetName))) { using (ms = InMemContainers[(reportName, SheetName)]) { ms.Seek(0, SeekOrigin.Begin); Template = (TemplateContainer)binFormatter.Deserialize(ms); TemplateObject TempObj = Template.TObject.Find(x =&gt; x.SheetName == SheetName); TempObj.Format = new string[header.Length]; header.CopyTo(TempObj.Format, 0); if (Template.ContentLength &gt; 0 &amp;&amp; Template.ContentLength % Template.FormatLength == 0) { TemplateFill(reportName, SheetName, Template.ContentArray); } ms.Seek(0, SeekOrigin.Begin); binFormatter.Serialize(ms, Template); } return true; } else { return false; } } catch (Exception ex) { ms.Close(); ms.Dispose(); Console.WriteLine(ex.Message); } } } return false; } 
Code gives you intellisense, line level debugging, a build and task system, better git integration than VS, TypeScript support, some code refactoring and a cleaner interface. It might not be equivalent to full VS, but if you think its barely better than a text editor, then I'd have to question if you've ever actually used it before.
Bad bot. Very bad bot.
Why are you repositories exposing/leaking DbSet?
Intellisense makes your argument void, no? Do you actually type out 'implements'
I think you're missing the design flaw in this approach. I hope for your sake you switch jobs before you have to deal with it.
When I wrote it the first time I used list&lt;double&gt; then fixed it since array would technically be better here.. That is actually how things become arrays in my code. I start with list, and later thing, Hmm I know the size and it is fixed, why don't I just use an array. Also, this is why I almost always pass things as IList&lt;&gt; -- so I can muck with them later.
.Net Framework isn't going away immediately, but it seems like it's basically deprecated/on life support. A big chunk of the new stuff in C# 8.0 depends on stuff that isn't going to be directly available in Framework 4.8, for instance, like async enumerables.
Framework will need to be supported in legacy apps lots of places for a long long time I'm sure. But in the future winforms and wpf will support .net core so he has a point. However a lotttt of stuff would carry over as C# is C#. So don't feel like working on framework is a waste.
No, if it is a commercial product then it is dodgy in terms of you are causing a potentially heavy load to a website you don't own and profiting off of it while degrading the website or causing the owner to pay more to get better servers.
Here is a gist I've made of your code, with some comments attached to give you an idea. https://gist.github.com/ocbaker-fabric/1d4ddfa82443d6ece6a4397f42d50e57
It's made even easier to convert with the MSIL, just archive your vb.net code, grab the dlls and import them to your shiny c# libraries. Boom, converted. 
C# can user the library just as easy as VB, just ignore the name.
&gt; upvoted your answer because it's humble, but-- how did you do it? For example, how did you get into designing languages in the first place? Somewhere there was a meta-learning step that took place that enabled you to become someone who mastered Ronald Rumsfeld's "known knowns". &gt; &gt;For example, how did you know you could implement a LINQ 2 SQL framework for type-safe database calls? Accumulated knowledge, interest, passion, being in the right place at the right time, obsessive compulsive need to express an idea locked in your head, fool-hearty over confidence, arrogantly believing your own b.s. and thinking you can do it better, and typing real fast.
Yeah, I'm really hesitant to sign up for a service where I don't even know how much I'll be charged. I'd rather pay a flat rate for a certain number of databases or whatever and know that I can't go over my limit!
&gt; If you liked (or have to convert something from) VB6, then sure... I can see the attraction to VB.NET. As somebody who went from VB6 to C#- I felt it was the opposite. My first "real" programming language that I developed a level of comfort using was Visual Basic 2.0. But VB.NET was different enough that it really was a brand new language that was "mimicking" what I was already familiar with. Breaking changes throughout the language made it rather untenable to "migrate" a project since significant portions of anything non-trivial would tend to need rewritten anyway. Considering that, C# seemed almost obvious to me. I'm going to be learning a new language anyway, so I may as well go for the "native" CLR language instead of "Visual Fred" (as people used to call it). Interestingly, while I've not developed anything in VB6 for years, I have a few utilities I use regularly (like a command line expression evaluator) that I wrote in VB6 over 10 years ago now.
I prefer using a template to read my DB's schema and generate my entities and mappings. When I make a schema change, I implement it in code as a migration (not using EF, using a more direct migration helper library), run the migrations, the run the template to update my EF code. For the past handful+ of years I've been using T4 for templates, though they've never had very good IDE support. Way back in the day I used something called.. MyGeneration iirc. Perhaps Razor would be easier to work with than T4, but I haven't had time to port my templates. No syntax highlighting in code-generating templates is a PITA.
Can you breakdown a bit that accumulated knowledge? Just those bits, I think, is what the OP is asking about. Typing real fast is a good point, though.
I started off with Visual Basic but quickly realised that the jump to C# wasn't that huge in terms of complexity. There's tons of amazing educational content for C# making it definitely one of the easiest and most powerful languages to learn!
Welcome to the ride. Rather than buy books, I'd subscribe to a service like Safari and/or Pluralsight. Language and framework shelf life isn't long enough to support books anymore. 
Recruiter saying that shows a rise in jobs for that niche and a lowering for others. Could just be people are not leaving their jobs. 
Recruiter is right for once.
.NET Core is the future. But as others have pointed out, legacy still exists, and needs to be supported too. That being said, If you're still very new to .NET, it isn't really going to hurt you to continue learning .NET Framework at this point. Core and Framework are still very similar from a fundamental coding perspective, and I've not heard of anybody who is expecting new hires to know .NET Core, most of the time it's still counted as a "Nice to have", their primary concern is still if you know how to develop in .NET at all, moving from Framework to Core isn't hard. Basically at this point, do what feels most comfortable to you. Just expect that if you are applying for a job in a variant of .NET you are not familiar with that you might have a bit of extra knowledge to pick up, but nothing that should put you at risk of failing an interview.
Years ago my old boss and I went to the “What’s new in C#” talk at PDC (or maybe it was build). After we got seated and looked around we mutually commented that we expected the talk to be more popular, there was maybe 20 people in the very large room. A few minutes later the presenter started and announced his talk, “what’s new in vb.net” 😆. We, and a few others got up and walked out once we realized our mistake. When we found the C# talk, the room was packed and not allowing more people in. The overflow room was packed and not letting more people in. 
There will be gigs porting from .net to core for years to come. That said, there isn't a slower turning ship then some of my Enterprise native clients. I really don't see a need to toss those books... Or use a recruiter in the .net space right now. Core for anything new, but as a a dotnet enterprise dev - I touch more 4.5 than anything.
I mostly learn by doing, trying and failing and trying again. I wrote my first language when I was 14, it was more of what I would now call a transpiler, that added function signatures and let you program without line numbers in BASIC in MS-DOS. It did not use any technique that an actual compiler would use because I did not know any then. I built many more mini languages for other things (like games) I was trying build because mostly that's what I thought was fun to do. I built a message passing task switching operating system like sub-system in 8086 assembly, because I read some computer science-y magazine that talked about solving problems using multi-processing algorithms and I didn't have a multi-processing operation system and wanted to try some of those ideas out. It was really bad and had lots of flaws, but it was also cool and engaging. I built my own integer based graphics library on 8-bit Atari 800 because I wanted to make a game and the built in graphics were too slow. So I had to figure out how to draw fast circles, lines and ellipses from basic precepts of geometry and 6502 assembly. It was like solving a really hard logic puzzle, except you only knew you solved it when the program worked. I guess I got my 10,000 hours before I even had a job. &amp;#x200B;
&gt;I have a hard time doing some things in VB cause they just make no sense and are super easy in c#. As someone who programs in both. This goes both ways depending on the task. 
We use CI/CD, but we are a small team. In our workflow we expect our devs to do a full compile and run the unit tests prior to check in. This causes the builds and unit tests to be successful more often than none. I feel your questions assume that the team is really large and that can't be done. I think you should have a team size and or component size in your survey.
What does VB.Net do with csvs that C# cannot natively do? The solutions [here](https://stackoverflow.com/questions/11118678/convert-csv-data-to-datatable-in-vb-net) look totally doable in C# .Net
I should have made it more clear that the above is my opinion and if you prefer VB.net then more power to you! Although i'm not sure why my argument is void because of intellisence... that was just one example, and even with intellisence you have to type more than with c#, also that was only one example. You are correct that a lot of the tedium is helped by tooling though, for example a few years back i had to maintain a VB6 app which has very poor tooling and compared to that VB.net is the nectar of the gods. For me though; I find that C# is just easier to read and write.
Lol. How bad do you think technology is. Plus you can create web scrappers so you don’t have to render everything. What do you think google does? 
You are 1000 percent correct, the tests need a lot of work. I still haven't grappled with the best way to automate tests for some of the write operations, and the persistent files are a way for me to glance at the outputs for accuracy. PS: Thanks for opening the github issues, I really appreciate it!
This might not work for your situation, but couldn’t you just store the records normally and then just query the newest X?
I don't either, but I don't usually have final say over customer requirements.
I thought of this, but since I only deal with the spreadsheet specification I didn't think OpenXmlHelper would be an accurate name. I wanted SpreadsheetHelper but someone has already claimed that namespace on nuget gallery...
This is exactly the same thing I did! VBA -&gt; VB.Net -&gt; C# I really liked VB.Net coming from VBA, and it is a good language. But there are just so many more resources for C#, and once you get started you realize how much nicer it is to write.
Y tho
That doesn't mean it won't be available in Framework 5.0 though
Depends on your use case since there are lots of ways to achieve this. Is it critical that there is only ever 20 records? Is it OK for your program if there is more than 20 records at a given time before a cleanup job runs? How fast are records being inserted into the table? The most performant way would probably to run a background task that bulk deletes everything every few minutes or days, as long as your app is OK with periodically having more than 20 records. &amp;#x200B; One of the downsides with EF Core is that you cannot bulk delete records without first loading them all into memory, unless you use raw SQL (\`FromSql\`). The other option is to use scheduled tasks/jobs on Mysql/SQL server &amp;#x200B; &amp;#x200B;
If I'm understanding your question correctly, then yes, you can declare explicit writers and write individual rows as you iterate through a collection. Something like this: using (var spreadsheet = new Spreadsheet(filepath)) { var records = spreadsheet.ReadWorksheet&lt;TestClass, TestClassMap&gt;("Sheet1"); using (var writerNegative = spreadsheet.CreateWorksheetWriter&lt;TestClass, TestClassMap&gt;("Negative")) using (var writerPositive = spreadsheet.CreateWorksheetWriter&lt;TestClass, TestClassMap&gt;("Positive")) { foreach (var record in records) { if (record.Amount &lt; 0) { writerNegative.WriteRecrd(record); } else { writerPositive.WriteRecord(record); } } } }
They aren't silly! 
He is right... .net core has made me hate .net 4.x... It's just so much better.
Why? The startup time is faster yeah, but it’s not *that* much better. 
And here my job is trying to convince me to learn and use Webforms and FileMaker for greenfield projects.... I'm pretty damn resistant, as I am already falling behind on the .net ecosystem because all my work is legacy. I sure as hell am not going to use extremely old or poorly fitting frameworks on new projects because that's what someone who won't even be working on it is familiar with...
If you want to use google as an example, google respects robots.txt and noindex because it is dodgy to just scrape websites unless you own them or get permission. Moreover, you don't know about the technology of the website you are scraping. For all you know they could have massive performance problems and if they get a few extra thousand requests per day they would have to increase their hardware specs and cost money. Sure, you can scrape. The point of all of this is that it is extremely unprofessional to put a service out that places a burden on a third party without their knowledge.
Don't bother. Technically, it's supposed to be doable, and I worked on several projects some time ago, including one company that did implement a multi-user database in Access that was being updated by about a dozen people throughout the day. Every single day, there were multiple database corruption events that required taking the whole thing down and running a database cleaning operation. And, there is no way to prevent it, because there is no proper locking for pages, rows, tables, sufficient to manage multiple access. It's totally fine if everyone wants to just read the database, but if there are updates, it can't be done without the company inheriting a whole lot of daily grief. There's a version of SQL Server that is free, is designed for desktop apps, and works. If a company insist on using an access database, find another project. You will not win.
Lol are you just here to complain because you are sounding ignorant if think web scrappers are putting people out of business 
This is why I will still prefer ADO.NET and stored procedures.
Give me a website you own and I'll write a service that web scrapes it and scale it to simulate thousands of users. It shouldn't be an issue since that should cause 0 issues since luckily every website is high tech and capable of handling any amount of traffic at any given time.
Pluralsight.....well worth the money.
You can run SPs with basically all ORMs.
What you literally is telling me is that you want to a do DDoS attack, which is pretty much illegal so thanks for admitting that you are about to perform a crime. Btw. Web Scrapper != DDoS attacks. Web scrapping goes to website gets its data and leaves. It should be not be scaling to simulate thousands of users. 
(not same person u replied to) That's the point though - there most likely won't be a 5.0. Everytime i watch a conference or listen to a podcast interview with one of "the Scotts" or Mads or anyone in the know, the carefully-worded responses boil down to focus on small changes, security, 'slow but stable' kind of stuff. .NET Framework is the new VB6 kinda thing.
There you go now you get it!!!! So what is the difference in your mind between me making the thousand requests to a website myself and me putting out an app where every time a user visits it scrapes your site and 1000 users visit my app at the same time? Both have the same end result. Just to reiterate, web scraping is fine if you rarely scrape the site. But when you put out a commercial service that scrapes a site multiple times it is dodgy as shit.
Don't ever, EVER take career advice from recruiters.
&gt; putting out an app where every time a user visits it scrapes your site and 1000 users visit my app at the same time where did this ever become mentioned that anyone was gunna do this? 
&gt; I should say that web scraping can be seen as dodgy and you shouldn't use it in a commercial project unless you have permission or own the site being scraped. It was said in the first comment you replied to, where you replied with it is only dodgy in terms of reliability. Putting out a commercial project that scrapes a site would imply you are scraping the site per user request since each user would require scraping a different page. For example in the context of the post, each user would be requesting a different page, /stats/{username}, and since you want people to like your service you would probably scrape it per request instead of caching the page so you can have the most up to date info, so scraping the page per request. &amp;#x200B;
Oof, as a presenter that would have crushed me But as a developer I would have done the same 
I kind of fell into a development role, because I had created a spreadsheet system using VBA that was very useful, but severely limited in expansion. Never had written a line of code before other than VBA, needed to create a desktop application that used a SQL server to expand, so VB.Net was the most seamless transition. Within 6 months I was slapping myself in the head for not going the route of C#, but at that point the app was already in use, with a backlog of interfaces and functionality that it took two years to catch up. I wanted to re-write, but it would be a complete re-write of core architecture. Fortunately there were several other applications that I had to develop during this time period, which I did in C#. Now that the application is stable and has no backlog, I'm planning on a full re-write in C#, as well as making it web based instead of desktop based.
Because who accidentally builds a webscrapper that creates a DDoS attack? Nobody. And it makes no sense in context of the post. The person just wants to check a specific username, his brother, at least once a day and a specific time and place it in a spreadsheet for how many hours a day. The website already hosting the data of how much the user has. If that information is not hosted on boards on a single page then you can definitely go directly to the same route. Or you can scrap the information for the username and then have the crawler navigate to the link attached to the username. So if you think the best way about solving this case is to go down the list, go to each route, gather all the data just all. Then filter for just one user for all the information perhaps you should take sometime to read some architecture documents.
Thank you so much I will try to incorporate these changes as well, and before that research what makes your code functionally better overall and how you made your decisions to compose it that way. 
It was linked in my comment, maybe 2 up, where they say apps do not declare IDataReader, but declare one of the classes that implement it. It was specifically for IDataReader, not a general statement. I've gone on some stack overflow searches since this convo started. It seems opinion based. To me using var, but having VS show me the class when debugging makes more sense than seeing an IDataReader variable. Interfaces can never be instantiated, so it seems weird that the tooling in the ide makes it look like it is. IEnumerable came up in one of those SO threads. It indicates intent, but does not provide that guarantee. You can cast it to Collection and call Clear() on it. I mentioned that DbDataReader implements IEnumerable in addition to IDataReader. If you declare your variable as IDataReader you can only use those methods, not the GetEnumerator() (?) methods which are present in the DbDataReader object returned. So... Pick your poison? It's been an interesting discussion. We also have methods returning an in house DynamicDbRows class, which implements both dynamic interface, and IDataReader. The caller usually only uses one interface when processing the data, but both are present in the class, but you need to call .ToDataReader() to use it as a data reader. I think, I use it all the time but I don't look at the internals much. We use dynamic to use .ToBson() to store it in memcached. Devs use a mix of var, concrete type, or dynamic when declaring the variable to hold it. 
No worries, don’t take my code as gospel though! Even with almost 10 years under my belt I’m still learning new things all the time. All the best though, and happy to help!
Again, as stated before by others. It is fine if it is your own personal thing checking your own stats. It is a different thing altogether if you are putting it together as a commercial service, the commercial aspect is the only thing I have ever brought up in this thread. I think you misunderstand what I mentioned. I as a user to this service would go to the page to look up my stats (only 1 request to external service) I'm not talking about making n requests to get every single user's info. The issue is if n people come to my site to get their own info then I would have to make n requests to the external service. It seems you think I am talking about if n people come to my site i make multiple requests for each user to gather a list of info. Either way is irrelevant. Your service is unbounded and will be producing a request to a website who has no idea of what you are doing, and if your service is popular enough you will be essentially ddosing the third party. This is my last message, if you still can't grasp how it is unprofessional then I would suggest talking to a backend developer how they feel about having someone write a commercial product that will call their page an unbounded amount of times.
because vb.net is easier fir lazy programmers. you dont even need to convert database data and just assign it to a string or int and it just works. then u get in the habit and hate any language that expects you to do it right
Lol way to go to avoid the topic that you completely brought in something out of context into something. This person not bringing up creating a service for anyone to use. How is what you are talking the same as the context of this post. Please reread this post. Also if you have n requests then you have n requests. You dont have 1000^n requests. The website should be easily able to handle n requests because are you suggesting that if you cut out whatever stupid application you make and the n people go to the website the website would shut down? It can't even handle the requests from actually visitors. Lol I do backend development brah. Trust me man, I can really tell you aren't in charge of any huge architectural decisions.
&gt; This helps speed up query times. Be careful with this line of thinking. Continuing the `Product` example, let's say you need to get an order with a list of `OrderItem`s and a `Customer` attached. It would look something like: class Order { public List&lt;OrderItems&gt; OrderItems {get;set;} public Customer Customer {get;set;} [...] } Let's say you need to have a method that prints the `OrderItem` as a line in an invoice and the `Customer`'s details at the top. If you fetch `Order` using lazy loading there will be several database calls made: 1 for `Order`, 1 for `Customer` and, 1 for each `OrderItem` in the list. This isn't so bad if your dataset is small, but when you are talking about several thousand `OrderItem`s, you may notice a performance issues. On the flip side, if you fetch `Order` using eager loading, you would load the `Order`, `Customer` and, `OrderItem`s in a single call to the database. In the end the code is still getting the same amount of data from the database, however, the amount of calls to the database required is different between the two. Please know that either approach is fine and I am sure there are people out there who prefer one method over the other. It's just something to keep in mind.
Select top 20 * from table order by createdOn desc
I mean you definitely need to keep current and .net core will be the future; but if you think 4.x is going away anytime soon you are just flat wrong.
C# is a very balanced language between spoiling the shit out of you and also being technically workable.
It's definitely not "essential", in my experience, but there is useful information conveyed by a good CS program that may be difficult to pick up, later.
I would respectfully disagree with the recruiter. Most top tier employers do not care about which developer platform you work on. You can generally interview in the programming language that you are most comfortable with. If you want to read, I would suggest reading more about the platform that you already work on as part of your day job. The better you are at your current job, the higher the impact you can create, and the better you can showcase it in your resume and during job interviews.
it is true but the language is the same. doesn’t matter what book you buy or whatever unless you are learning about .net core only frameworks
That's what I actually needed and asked for Thanks :) sorry for the late reply
It’s all the same really with .NET Standard. In the end it’s all C#. ASP.NET Core and EF Core are things to learn because they are the future and very different. But you have to search hard to find any difference in a plain C# class which most of the projects are (once you move more backend from the frameworks). The runtime is very different but makes no real difference for the dev. But do you really care about it. Also, .NET Core is still very unstable in term of API, much like .NET Framework was until 4.0 with a lot of breaking changes between versions. .NET Core 2.1 has been Long Term Supported but expect much more to change. It’s definitely the future but still in a relative infancy.
Thank you codebasedgod
He is right, .NET Core is the "new shit"; it's the newest and most modern .NET implementation. But old code doesn't vanish. Somebody has to maintain it. if the decision is made to move or recreate software in .NET Core, somebody needs to be able to work with the old code to understand what it does. And whether that decision is made is still an "if". It's not always in the best interest to immediately and obediently follow the carrot on a stick that Microsoft or whatever development platform hangs in front of you. One needs to determine the best way forward both for development time investment as well as for the needs of your customers. Constantly rebuilding software based on what is hip or cool isn't going to do that. 
Because your connection is not static.
Read up on the static keyword To access a field from a static method, that field needs to be static. Simply add ‘static’ before the field
Yeah... This specifically speaks ONLY to web development. Desktop development isn't even released yet in .net core. .net core 3 will bring it in, but even then lots of companies need to wait for things like Visual Studio 2019 to even get started in enterprise solutions. I know people will say otherwise and say "you don't need Visual Studio" or "Use Visual Studio Code", but fact is large companies will be on older than VS2019 and arnt going to go with Code. And when they need to start a project NOW they aren't going to get on a preview or beta build. They want long term support. Plus, Microsoft said there's no multiplatform support for UI and .net framework isn't going away. .net core is the future. But it hasn't even started yet for desktop development. Everyone keeps forgetting that not everything is a website.
Plus, .net core is only web and console apps. .net core 3 isn't ready yet for use in enterprise solutions. .net framework is still very very relevant in my field of embedded and desktop development, in places the "web" can't always touch.
This is very true. They are essentially marketing and not especially technical.
As long as you work smart and don't spend hours reinventing a wheel just because it's a shiny new wheel, especially if there's no benefit for you or the company. Sometimes rewriting a project away from webforms is the right thing to do. Sometimes, as the sole developer, extending the webforms project is the only cost effective thing to do until actual time and resources open up. Many developers, especially new ones, get so cought up rewriting they never ever finish and so far behind. Good software development sometimes is knowing how to best spend your time to benefit your company and projects and when to actually stand up and fight.
TL;DR; don't make that *SqlConnection* static as others suggested...it will allow your code to compile but is not "correct". First and foremost, you're using the variable *conn* as a member field to the *class* this is contained within. That is, it *belongs* to an *instance* of the *class* you're writing. It does not belong to the *definition* of the *class* nor would it be accessed via the *class* directly. When you mark something as *static*, you are saying it does not belong to an *instance* of the *class* but instead can be accessed directly. You **could** fix your code by marking the field *static* but in actuality that is a **terrible** thing to do with a *SqlConnection* in most cases. You should instead keep that connection very close to where it is actually being used. In many cases it is the correct way to always re-create that connection right before use than to attempt to keep it open by other means, or a reference to it. Before others chime-in, keep in mind that the volume of simultaneous SqlConnections is a concern, but not one your likely to encounter just starting out and it's better to stick to best practices while learning and worry about scaling issues with tried and true solutions by others. Since the *SqlConnection* implements *IDisposable* I would always utilize a *using* statement. Stolen from [dotnetperls](https://www.dotnetperls.com/sqlconnection): class Program { static void Main() { // // First access the connection string. // ... This may be autogenerated in Visual Studio. // string connectionString = ConsoleApplication1.Properties.Settings.Default.ConnectionString; // // In a using statement, acquire the SqlConnection as a resource. // using (SqlConnection con = new SqlConnection(connectionString)) { // // Open the SqlConnection. // con.Open(); // // The following code uses an SqlCommand based on the SqlConnection. // using (SqlCommand command = new SqlCommand("SELECT TOP 2 * FROM Dogs1", con)) using (SqlDataReader reader = command.ExecuteReader()) { while (reader.Read()) { Console.WriteLine("{0} {1} {2}", reader.GetInt32(0), reader.GetString(1), reader.GetString(2)); } } } } } I've fixed many legacy applications with lingering problems due to the large code smell that is non-disposed nor properly closed *SqlConnections*. First and foremost you want that connection returned to the connection pool. There is a pretty good chapter on the subject by Microsoft themselves that discuss the IDisposable pattern and why you should use it [here](https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff647790\(v=pandp.10\)#call-close-or-dispose-on-classes-that-support-it).
Indeed. Just getting to 4.7 here on IoT devices. And no enterprise is going to jump into a .net core 3.0 desktop app rewrite without a damn good reason.
This is the right answer
Maybe log the error in CallApi instead of trying to capture it upstream?
.net core is to .net 4 as electric cars are to combustion engine cars. Sure it's the future, but there will be plenty of .net 4 in the years to come; and .net core isn't quite ready for primetime yet.
Don't throw out your books. While the Core is the future and the Framework means supporting legacy code, C#7 is still C#7 and a lot of libraries are compatible. 
There are ways to do this to the database, just google for SQL create a new table column and then write a method that takes in the new column’s name and then runs the create column SQL statement. Here is the general idea: https://www.w3schools.com/sql/sql_alter.asp However there is no way to expand a class during runtime at least not that I’m aware of. The the only option I can think of is maybe you can do it with dynamic objects.
Typically you would first update your model class with the required column and utilize [migrations](https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/migrations/) to update the database accordingly.
Your book arrived yesterday. Looking forward to chapters 6, 11, 14 and 15! https://imgur.com/a/6ioPgWn
Can’t speak to the threadstarter’s experience, but for me it was the fact that code ran on linux and in Docker, behind nginx or PaaS lb (e.g. AWS ALB) that made a real difference. No windows, no iis, no weird permission issues, no registry crap, no antivirus rescanning all assemblies on redeploy
Add a post insert trigger that will execute the delete you need. Then you don't have to worry about it from EF at all
Find another job. 
Possible solutions: * Scheduled Task * Background Job (even Hangfire, etc. as you suggested) * Cleanup as you create data * SQL Trigger Example Trigger: /* Create a Trigger on Table Name 'MyTable' After any INSERT/UPDATE check the row count and if its greater than or equal to 20, delete those rows. Be sure to update the ORDER BY to the appropriate column. */ CREATE TRIGGER LimitMaxRows ON MyTable after UPDATE, INSERT AS BEGIN DECLARE @rowCount INT = (SELECT Count(*) FROM inserted); IF @rowCount &gt; 20 BEGIN DELETE FROM MyTable WHERE id IN (SELECT id FROM MyTable cs INNER JOIN (SELECT id, Row_number() OVER(ORDER BY id DESC) AS Row# -- THIS DECIDES ORDER TO DELETE FROM MyTable) c ON c.id = cs.id WHERE row# &gt;= 20) END -- view remaining rows: -- SELECT *, ROW_NUMBER() OVER(ORDER BY Id ASC) AS Row# -- FROM MyTable END; Should work, haven't tested. Keep in mind eventual table fragmentation, etc. If you're trying to maintain a *Queue* table, where as data is processed it gets cleaned up, consider instead using an indexed flag marking an item for deletion and only every querying for data that isn't flagged. For very large data sets you can even maintain the last key scanned so that your query only starts from there on. Then, run a SQL job to cleanup said data periodically and keep table integrity in check as part of it.
Wrong.
I think it was entirely needed. If not for the simple reason of not needing to deal with keeping backwards compatibility. They can more easily change the APIs now and not need to worry about breaking legacy applications. Not only that but it’s just nice to start over sometimes with a fresh perspective ya know? It’s kinda like saying “well why did they even make windows 10 when they already had windows 8?” With massively complex systems it’s really difficult to just go in and refactor the entire thing. Might as well start over. They were also able to modularize it this time which saves on space and allows them to work more quickly. On top of all this open sourcing something isn’t as easy as “let’s just throw this on github”. There was probably a lot of proprietary code and internal stuff that would need a lot of cleaning up. 
It's not just cross platform for development, it's cross platform for execution. The fact you can build your .NET app on Windows (or macOS, or Linux) and then run it on Linux is pretty significant. You no longer need to pay the overhead of a Windows license just to run your software.
&gt; They can more easily change the APIs They barely changed the APIs though. I’ve worked in ASP.NET Framework apps and an ASP.NET Core app and the syntax is almost identical. And even if they wanted to change them, all it would take is a major version bump. 
Yes. Even without the cross-platform stuff we needed a way to break the stagnation that was CLR 4. Originally .NET Core was called .NET 5.x, but the name changed because it was clear that they couldn't achieve their goals while being fully backwards compatible. As far as performance goes, it is much faster. They've learned a lot since CLR 4 was created. 
We’re talking about a $120 one time fee. That’s minuscule compared to the hundreds of thousands of man hours lost by forcing people to rewrite everything in .NET Core. 
Is this a multiuser application? If so, what happens when two different users alter the database, differently? 
The winning factor for .NET Core is that apps can run on Linux and MacOS.
Hah, fair enough! I was salty when I wrote that because I was wearing my "Excel is not a database" shirt and just had a winded discussion on the topic. I'm actually just a structural engineer who writes proofs of concepts to show/shame what R&amp;D should be doing. I'm introducing the whole idea of "writing a specification and sticking to it".
&gt; the stagnation that was CLR4 What stagnation exactly? 
&gt; Sure it’s cross platform now but most of the C# devs I see in the wild are still on Windows. Yes, but they can deploy anywhere. Linux servers are an order of magnitude cheaper than Windows servers, and you don't have to worry about ACLs what-so-ever, that makes a big impact on operational costs in terms of both the resource cost and the manpower required. &gt; Sure it’s a little faster but it is that much faster? Yes, it's a metric fuckton faster, ASPNET WebApi performance around 7x faster in typical workloads for example, Data access is faster too, and it also massively reduces memory allocation in the ASP.NET stack. &gt; Almost all of ASP.NET is the same whether you’re on Core or not Firstly, that's hardly a bad thing, it makes it quite easy to port code to .NET standard and .NET core and means you really don't have to re-learn a lot of the BCL APIs. Secondly, the differences that do exist are generally for the best. For example DI is idiomatic in ASPNET Core, which encourages people to embrace IOC in general, leading to much more modular, flexible and testable code. It simply would not be possible to open .NET framework and achieve the same results, for example there are HEAPS of dirty-as-fuck hacks going on under the hood in .NET Framework, a good example being the System.Transactions.TransactionScope class in Framework depends heavily on the Windows Distributed Transaction Manager, something that is not actually part of the framework, but an OS feature that the framework leverages, making it quite literally impossible to run on any platform other than Windows.
Unless you're hosting on something like AWS where it's $0.1880/hour for a Windows m5.large compared to $0.0960 for a Linux server with the same specs. It adds up.
You should probably post/crosspost this to r/unity2d.
It's also not just the licensing cost. The tooling around running applications (I'm thinking [ASP.NET](https://ASP.NET) Core primarily) is much more diverse when you're not limited to a single platform. Docker, Kubernetes, etc... rather than just Windows and IIS.
Yep. Core is love, core is life. Go download VS 2019 preview and play with server side blazor.
Mono is the cross platform .NET runtime for desktop.
&gt; Yes, it's a metric fuckton faster This alone makes it worthwhile for me. I like making games in my spare time. Also keeps ASP.NET competitive.
They are good for repeating the buzzwords they hear. You'd probably be better off keeping up with the community on your own, but noisy data is still data. 
&gt;Why? The startup time is faster yeah, but it’s not &gt; &gt;that &gt; &gt; much better. &amp;#x200B; Just off the top of my head: No web config, a lot less dll hell, Startup.cs actually makes sense, a lot more baked in stuff (SignalR, DI)... None of the route crap. Hell I can actually make an API without MVC sticking its nose in, simpler auth, InMemoryDb for testing... If I keep going someone will eventually find something I got slightly wrong so lets sumarise: &amp;#x200B; Pretty much all the stuff that makes my life hell trying to fix a beat up 4.7 API is gone. &amp;#x200B;
That's why I mention that these are greenfield projects. Projects that are new and have no restrictions or requirements to interface or extend legacy code or systems. Using Webforms as an example will take more time, and have lower operational efficiency than using asp.net MVC or asp.net core MVC, or even a web API and a SPA framework like Vue.
Sure that might be what's best for the company but it's not what is best for the career of the developer! 
.NET core also plays really well with Docker &amp; Kubernetes now that it’s cross platform
Not in my opinion.
There are official docker images for .NET Framework though: https://hub.docker.com/r/microsoft/dotnet-framework/
That only run on Windows.
Being able to host my services in docker on Linux makes all the difference! Also my Co workers that use Mac love being able to run code without a windows vm. 
Depends what the job wants. If you will support legacy apps for the rest of your life. Maybe your skills are good. But most companies would build new components in net Standard and Core if this is possible today (some things like GUIs are not yet supported). You really should learn Core 
There was a blog post. There will not be a 5th release. 
&gt; Linux servers are cheaper But again this is Microsoft’s fault. They could simply reduce the price of Windows servers. They didn’t have to rewrite .NET to fix this. &gt; 7x faster than typical workloads Source? In real life I’m not seeing much of a difference at all &gt; System.Transactions So instead of fixing this one thing (or simply removing it), you’re saying it’s easier to just rewrite everything? 
True most of the time. But same goes for internet strangers like here on reddit :-)
Right but the way you worded your comment sounded like you couldn’t use .NET Framework with Docker or Kube. You can, as long as you do it on Windows. 
https://youtu.be/yysUerUhxOE This helped me understand
[TextFieldParser](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.fileio.textfieldparser?view=netframework-4.7.2)
With a mixture of dread and resignation.
Hi, thanks for your suggestion. I cannot change the survey now, but I will consider your tip for the next surveys (i.e., asking for the size of development teams participants are working in).
.Net core is Framework 5.0, there will be no new big features added to Framework.
So there are a few ways you can do this. None of which are necessarily clean. You could have some sort of JSON definition of the rows that you store in the database as a template and then bind data to it on the UI and the save that in some other table. Is this for work, school, or personal development?
So there are a few ways you can do this. None of which are necessarily clean. You could have some sort of JSON definition of the rows that you store in the database as a template and then bind data to it on the UI and the save that in some other table. Is this for work, school, or personal development?
There is not such a hard guideline a in Java but take a look at this guideline from Microsoft: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-namespaces Furthermore it is recommend that your folder hierarchy follows the namespace hierarchy.
Yeah, it's the way things are headed. One of our projects at work has been replatforming a bunch of our core systems from .NET 4.6 to .NET Core so that they can be containerised. If you're starting something new I don't see any reason not to be using .NET Core at this point.
https://docs.microsoft.com/en-us/dotnet/framework/wpf/data/data-binding-wpf
Recruiter clearly has .Net Core roles he needs to fill.
.net core is very much ready for primetime, just only on the web... which is the primetime anyways.
.net core is the future yes but if anyone thinks that any enterprise level company is going to suddenly upgrade their monstrous legacy or new .net framework systems they need to go take a good hard look at reality.
Blazor is garbage stay far far away from until it's client side.
Thank you everyone! I think I have to get them to use something else, like SQL Express!
They had to reerite it if they wanted cross platform execution. Even if they lowered prices of windows, some services would still not be natively available on windows, so people would still want to run .net on linux.
#redditIsTheNewDebugger meme
Good luck convincing any decently sized company to move their legacy applications to mono
career doesn't go very far if you can't deliver projects
Awesome! I hope you will find them interesting, as well as others :) Do not hesitate to leave review somewhere after reading!
re: "only on the web" Fair enough. I'm not arguing against .net core (used it myself 2 years ago for a OPCUA service), but one shouldn't skip .net 4 in favor of core; but instead use either depending on the task. It's not like they're very different :)
What are your requirements? You say the page is dynamically changing - do your clients need to see it updating in real time, or do they just need a snapshot? If real time, how frequently does it need to update - every second? Every minute? Every hour? How many clients do you have? How big is the file? How frequently does it change? How much of it changes? Is there any other way of capturing the changes other than reading the whole of the file? The answer to all of these would impact on how I'd go about this one.
They do need to see the updates in real time. As far as the frequency, it's quite flexible
.NET Core should be way more suitable to embedded development than the .NET Framework.
Phew, I'm exhausted.
Visual Studio has a setting that does that by default. I've had good experiences doing that.
Thanks for the opinion. I however did get this right with reflection, which you can get [here](https://gist.github.com/TachyonRSA/05a902e23e93c2460acef4ddb8005ce3)
[https://csharp.net-tutorials.com/xml/using-xpath-with-the-xmldocument-class/](https://csharp.net-tutorials.com/xml/using-xpath-with-the-xmldocument-class/)
Thanks man, I'll look into it
Sort of... no need to throw away any books more than usual, though, as there obviously is a huge overlap between the frameworks.
The async enumerables stuff must be deliberate by Microsoft. There is no reason it couldn't be added to .NET framework except that they couldn't be bothered to. It's certainly not because it's problematic for stability.
It prepends a known value and uses a direct, letter-by-letter substitution cipher on the identifiers. What a useless algorithm for a useless concept. Maybe, maybe useful as a learning project. For anything else, utterly useless. 
I am seeing a steady rise in the use of .NET core at work, and a rise in it being mentioned in job ads. .NET core is the cool new thing, no doubt about it. However "Forget .net 4.x" is very premature for two reasons. 1) You are going to see both around for a long time to come. 2) they're so similar, the overlap is maybe 90%. In fact, a lot of library code will be compiled for *both*. 
So one option would be to use to JavaScript's setInterval function - you can then send AJAX requests to a server at regular intervals to get the latest data. This would work well with longer intervals and fewer clients - with short intervals and lots of clients it might create a lot of load on the server. Use Web API for the server, have it serve up the XML. Then build a web page that sends an AJAX request that gets the data and displays a static page. Once that's working, adding setInterval is trivial. That would be the easiest way I would think, but as I say, not appropriate for all circumstances.
They're right, as Microsoft is pushing it hard as a cross-platform paradigm. .Net 4 is not going to make it to version 5, but will not go away either. Microsoft just extended support for the VB6 runtimes, so expect .Net to be around for at least another 10 years. However, all those VB6 applications were made 20 years ago in the windows embedded gold rush, and mainly exist as hardware driving applications in manufacturing or medical. .Net was primarily used online, with very little movement into the hardware space dominated by XP embedded, but where it is used, the development pipeline would be such that migration to .Net core would be more trivial than the complete front and back-end upgrade required to leap from VB6 to .Net or Core. So, .Net isn't going away, but learn migration to .Net core as it will be a sought after skill, and if you know VB6, even better. 
A lot of replies here just take for granted projects are web-based. Every single .NET project at my employer is Desktop only. From that perspective, Framework is the only viable Enterprise-class option for .NET Desktop.... I’d love to leverage Core to make my desktop apps cross-platform without the overhead of third party solutions but that day has not come. 
access static fields from static fields
There's no such thing as cross platform (well, apart from possibly sandboxed software like Flex). You'll still need to build specific runtimes for the platforms, just look at xamarin, Avalonia and imGui.net.
I work for a big bank. Here we are upgrading .Net projects to dotnet core. Also, new projects are being build in dotnet core. Dotnet core saves money on windows licensing fees (you can run it on linux). However, there are lot of big projects which I don't see will be upgraded anytime soon. The projects that are being upgraded are mostly API based projects as dotnet core API performance is really good compared to .net standard. That being said, dotnet standard is not going away anytime soon. We still have legacy dotnet projects (think silverlight, web forms) which the managers are too afraid to upgrade
Wrong opinion. I used Ceaser as an encryption algoritm. Because it is simple and understandable. Popular Obfuscators using different and advanced techniques instead of making hardcoded "encryption". Let's not forget that is a simple and instructive project.
https://docs.microsoft.com/en-us/dotnet/api/system.timespan.milliseconds?view=netframework-4.7.2#remarks
I think it's because Parallel.For spawns a thread for each iteration and in the end of each thread execution they have to synchronize with the main thread and also because the CPU switches between all threads available to the CPU to give them their time slot so the threads aren't running constantly (and so create a backlog that has to be worked through rather than taking one file at the time). However, I'm knowledgeable enough to be sure that this is the cause but I hope it helps in some way 
Probably would want to order by the id because it’s a PK
I do
I thought it would be way too bulky for that purpose. I know .NET Core has been doing a lot of work towards keeping installation sizes down for embedded applications.
Not at all true. You still benefit from more modern API and performance improvements, with possibly lower memory footprint aswell (Span&lt;T&gt;, and other shenanigans)
Of course it's a list of nice things to say about VB. But I'm sorry, it really is a broken language. Using () for both method call and array indexing for instance makes reading code hard: Dim i = foo(j) what's `foo` ? Method? Array? unclear. Public Overrides Overloads Function SomeFunction() As SomeType Implements ISomeInterface.SomeFunction really... ? (ok, granted, 'overloads' isn't necessary in modern versions of VB.NET) From my work on a full Linq Provider, I've learned (sadly, the hard way) that the VB.NET compiler generates different expression trees from the same lambdas: they introduce needless coalesce expressions for elements which can't be null, the anonymous types are named differently (but granted, that's minor), and what's pretty terrible is this: if you compare two string typed elements in a linq query, it produces a `CompareString(a, b, false)=0` expression. This method is a Visual Basic method defined in Microsoft.VisualBasic.CompilerServices.Operators. However you have to check for that and add special code for that specific call. And it's completely unnecessary. The compiler also generates ConvertChecked expressions for To* method calls (again in the special compilerservices assembly), which require special handling. This is unnecessary as we're talking expression trees: these are handled by a handler, they're not ran. It's only a burden to the people writing a Linq provider, and serves no purpose. Using 'And' in a linq query is different than using 'AndAlso'. You again have to add special code in your linq provider to deal with that. Using e.g. `Where f.SomeCollection.Count() = 10` in a linq query creates a memberaccess expression for the Count property, not a call to the Count() extension method. Why, no idea... But it only leads more special cases to deal with. And don't get me started on the GroupBy differences in linq queries between VB and C#: the expression containing the projection in a linq query generated by C# with a Group by is in a separate Select call. In VB it's inside the groupby. If you used a compound grouping (using an anonymous type), VB generates specially named elements called eg. $VB$Key. You have to write a special case for handling these expression trees to be able to handle group by if the query comes from VB. Yeah VB... lots of fun. I seriously don't know why people would pick it over C#, altho C# isn't always great either. 
I did the opposite, coming from VBA I chose C#. I'm still using VBA on Excel, but I was so tired of it that couldn't choose VB. From my perspective it is and was and the best decision.
What hardware are you running on?
Do you know what its an analogy?. Knowing c# by percentage is bollocks, however applying is different and it is what marks the difference between a novice and a master. 
I use these mainly, https://www.st.com/en/evaluation-tools/nucleo-f746zg.html But you can use almost any board really. I use .Net Nano from [Here](https://github.com/nanoframework/Home/blob/master/docs/developing-apps/getting-started-guide.md)
Well I use .Net Nano from [Here](https://github.com/nanoframework/Home/blob/master/docs/developing-apps/getting-started-guide.md) It runs fast and has all the features I need.
yeah, they're trying pretty hard to get everybody to use core and azure. i wouldn't be surprised if they announced that they're going to stop updating .NET framework altogether in the not too distant future.
Glad you got it working. It’s not something I’d ever do though, too obscure for Schema configuration IMO.
I think the cleanest way of doing this is to design your database schema so that, instead of having all the columns in one table, you instead have a table that contains a list of allowable "columns" (perhaps we should call them "attributes" since they will no longer be columns in a table), and another table that contains the actual data, with a foreign key that indicates which of the attributes the data represents. There's a discussion of how to do this [here](https://stackoverflow.com/questions/2932322/how-to-design-a-schema-where-the-columns-of-a-table-are-not-fixed), which gives a lot more detail than I'm able to do with the limited time I've got right now, so hopefully you'll find what you need there, but do ask more questions here if you need to.
Where is that setting?
Long term I hope so. &gt; Sure it’s cross platform now but most of the C# devs I see in the wild are still on Windows. Currently I am one of those .NET developers still holding to .NET Framework as several of our tools and third parties aren't yet available on .NET Core, with the exception of the stuff we are doing with UWP. 
CLR4 has that version name, as it was released with .NET 4.0, hardly anything changed at the CLR level, hence why the languages use some clever tricks that could be done in a better way with additional MSIL instructions for example on the async/await implementation. 
Idk why people are downvoting you. As far as I know Core is basically what Framework 5 would have been. https://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx &gt;ASP.NET 5 is now ASP.NET Core 1.0. .NET Core 5 is now .NET Core 1.0. 
A nuget package is just a zip file so unzip it and see what's inside. It should be Dlls and some other stuff. Download DotPeek (free) and export those DLL's projects. Hack around in the source a bit. You already know the entry points. Start with those. Add a new project with .Tests at the end. This is where you will put tests. The tests can be either finding out how something works, or documenting how it works. Give the tets good names "Test_An_Input_of_8_triggers_the fireball" not just "test8" Add some comments to the test. Explain the business reason this code is here, it might not be apparent from the code. Use NDepend to find dead code, but Resharper and Visual Studio will give you some hints. Removing dead stuff is not a priority here. Done.
There is a lot of discussion about this here: https://stackoverflow.com/questions/10846550/disappointing-performance-with-parallel-for I recently found similar issues with a recursive use of ForAll which had massive performance problems, on investigation it seemed the issue was that for each level of the depth of the tree I was searching it was spawning n tasks where n was the number of branches. I modified the code to only use ForAll at the route of the search and then performance was improved but even then it was only when the tree was large otherwise it was the same as non-parallel or in some cases worse. It could be a few different things and the page I linked above covers most of them in replies.
What he said... dont kill your career.
If a product is viable and active and your good and the framework is stable... port it. Or in 5 years your company is paying a premium for average developers... But take what I just said wiith a grain of salt.
Port the business layer back to .net standard... Done.
Removed: Spam. Please review and follow the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion) This is the [third warning](https://www.reddit.com/r/csharp/comments/aautdx/creating_a_selfdriving_car_simulator_2019/ecvvaih/) now.
Removed: Rule 4.
Actually I'm more open to strangers telling me what to focus on because they are trying to sell something, theoretically.
What UI framework are you suggesting should be used with that? Mono's port of WinForms? Gtk#? I'm not sure either of those is a good choice.
&gt; .net core 3 isn't ready yet for use in enterprise solutions. Well, of course it isn't, it hasn't even been released yet.
&gt; Framework is the only viable Enterprise-class option for .NET Desktop Very soon, it won't be, since .Net Core 3.0 will support WinForms and WPF. In that sense, .Net Core is the future, even for desktop applications. Though switching to .Net Core won't make your desktop applications cross-platform, WinForms and WPF are still Windows-only, even on .Net Core.
Wow that was all of my questions answered in a timely and efficient manner. Thank you kind stranger! 
Using Parallel.For() makes a request to the runtime to parallelize the operation if it thinks there will be a performance benefit, having it in your code does not guarantee it will actually result in parallel execution. I don't know how big those files are, but if you are reading multiple files simultaneously and allocating large string buffers to hold the results, then the cost of blocking I/O operations is likely going to be more pronounced.
Yeah, me neither.
thank you so much if i can give an award would definitely give you one but thans alot
You still didn't answer HOW you applied yourself. If the OP wants analogies he can go read Plato and enroll in a philosophy program. Meta-analysis of what makes people experts - in any field - suggests: * Experts notice features and meaningful patterns of information that are not noticed by novices. * Experts have acquired a great deal of content knowledge that is organized in ways that reflect a deep understanding of their subject matter * Experts’ knowledge cannot be reduced to sets of isolated facts or propositions but, instead, reflects contexts of applicability: that is, the knowledge is "conditionalized" on a set of circumstances. * Experts are able to flexibly retrieve important aspects of their knowledge with little attentional effort. Source: https://www.csun.edu/science/ref/reasoning/how-students-learn/2.html
They won't stop using framework for years, but the rumor I keep hearing is that 4.8 is going to be the last major release. After that, MS will consider it feature-complete, and any updates will be but fixes and security patches for awhile before becoming security patches only. So, no updates? Probably going to get updates. New features? Probably not after 4.8.
sorry yeah i should have said new features, that’s what i meant
\*laughs in forgotten system classes\*
Yup, I agree with him. 
That's both a true and a really false statement. Your recruiter is probably mediocre to OK at recruiting but not a programmer to very bad at programming. .NET Core is clearly going to replace the .NET Framework, yes. That is in burning letters on the wall. But "throw away your .NET Framework books" doesn't make any sense. .NET Core's just another implementation of the CLR. What worked on .NET Framework will work in .NET Core. The problems he probably heard some dev talk about and misunderstood happen when you try to use third-party code. DLLs compiled for .NET Framework don't work so readily with .NET Core. They have to be recompiled. But in the enterprise world, there's a jolly tradition of needing to depend on third-party libraries that were written 10 years ago by companies that no longer exist. Often that happens because your company uses machines that only one company in the world makes and only about four companies in the world want. Nobody has the source, nobody can recompile, and nobody else is making the machines so it's impossible for the company to use .NET Core for their main app. So in that sense, it feels like doomsday to developers who are in that position. But it's not the end of the world. If you have a WinForms app that interacts with that junk, you can write a server that interacts with that junk and a GUI app in whatever modern thing you want that interacts with the server. Kablam. Now the old, must-have-.NET junk can run on as old a computer as it needs. Of course this is an oversimplification, but it's better than what I've seen a lot of VB guys do: stick their fingers in their ears and scream that MS is going to bring COM back any day now and forget .NET. Anyway, be careful taking career advice from recruiters. Most of the ones I talk to are open about if they're actually a dev, and the majority aren't. *Good* ones don't try to give you career advice unless it's something like, "Well, our company uses Python and Java so I'd suggest brushing up on those, or if you don't want to use them I don't think you'll fit." Also: when you *are* hired, fight tooth and nail against using third-party libraries that are mission-critical and you have no source access. A lot of companies will offer source agreements (for additional cost). 5-10 years from now, when MS is replacing .NET Core with something else, your employer will be pleased as punch you might actually have a migration path. Otherwise, plan to leave in less than 5-10 years after project completion.
 CheckTime(); runthebatch(); You first call `CheckTime()`. This method creates a timer that will call `GetBatchToRun()` after 10.000 milliseconds. Then the method is finished and it returns. Next you call `runthebatch()`. Here you iterate the `query`-list, which is initialized empty, and no values have been added. You probably assume `query` contains entries added by the `GetBatchToRun()` method, but this method hasn't been executed yet. Remember, it's called after 10.000 milliseconds.
&gt; all it would take is a major version bump. They do not follow semantic versioning. And a major selling point of .NET was the incredible backwards compatibility.
Hah, there will be others along shortly to fill in the gaps I imagine, but that the outline :)
is there a way i can get the values in checktime()?
To add on to AngularBeginner's answer this, you would normally have something like this running in a loop. The loop would either be set to continue until a certain amount of time has passed, or some other control. A couple of notes though... Timer.Start() and Timer.Stop() is a little more explicit than enabled and disabled. Functionality they do the same, but it is a little more clear. Another thing to keep in mind is you probably want to empty your list after each batch. As it is, it will reprint all the previous values every time as well
What can I do. I only want to help. Please help me
ok you got the answer to the question but you need to stop the crazy inheritance now. If you have a bunch of classes with only one function then your code starts to smell. Then every class is a subclass of the one before it. &amp;#x200B; How are you learning to program?
The ability to do that from one code base is what makes it ‘cross platform’. 
Where did you get 10.000 milliseconds from? Is that the default time of ElapseEventHandler?
The funny thing is that all methods are `static`
Please review and follow the [guidelines for self-promotion on reddit](https://www.reddit.com/wiki/selfpromotion) and the associated links in those guidelines.
Since it looks like others have answered your question already. Your use of white space makes your code hard to read. You should clean that up, you will thank yourself later. 
Definitely read up on inheritance, and the use of static. If you're trying to implement a real-world scheduled task or recurring job, you should consider built-in task managers (ala Windows' Task Manager). A single long-running executable is pretty doomed from the beginning.
First step: make the ReadLine part a variable on its own, debug the unity script, and see what the actual result you get is. 
to be honest im learning programming in some threads i read in stackoverflow
Well, the exception tells you what the problem is: "Input string was not in a correct format" [The documentation tells you what the correct format is.](https://docs.microsoft.com/en-us/dotnet/api/system.int32.parse?view=netframework-4.7.2#System_Int32_Parse_System_String_) Now it's on you to find out what the input string is, and then you can figure out why it is not what you need or expect it to be.
Oof that might not be the *best* way to start 
It's in the code, assigned to `Interval`. Tho I think it's 30k, not 10k. The resolution of the screenshot is fairly bad.
Either don't use a timer at all, or just call your second method when the timer runs.
I figured that was the interval. Just got confused since the image displayed 30000. Your explanation is on point.
random thread in stackoverflow
Not really the best analogy. Electric cars are not the primary means of transportation for a number of reasons, but notably because they are expensive, limited by production capability, and have less than ideal recharging station infrastructure support. They also still have a reliance on fossil fuels (86% of the world get's its energy from fossil fuels, so charging that battery isn't as clean as most people would think). net core on the other hand, has no reliance on Windows and runs on prem or in cloud on a number of different OSes, is not in any way framework dependent, and is open source and supported by open source tooling. &amp;#x200B; Finally, core is absolutely ready for production (prime time). It has been battle tested for some time now as it was released in June 2016. Also, unless you have a crystal ball, you can't reliably tell us what the future of the automotive industry looks like. The path for .net on the other hand is pretty clear, as Microsoft has stated its intention that netcore is current priority for the platform.
This can be used in C# and has poor performance.
Oh, that makes a ton of sense. This is really good information to know, thank you
I would look up C# Events, Delegates and Lambdas. After learning about those my life got so much easier.
Stackoverflow is not a place to learn programming. Stackoverflow is a place to hone your existing programming skills. I recommend you follow some proper C# courses, there are literally hundreds available online.
Can you describe in plain English what the tests should do? Maybe I can help you refactor them. As for mocking out persistent files, for .NET core, you can use https://www.nuget.org/packages/Microsoft.Extensions.FileProviders.Abstractions/ and https://www.nuget.org/packages/Microsoft.Extensions.FileProviders.Physical/ - or a similar abstraction to decouple direct dependency on file paths. To be clear, some end-to-end tests that cover physical file providers makes sense, but you're probably best off shoving that in an independent assembly and naming the assembly something like OpenSpreadsheet.Tests.System or OpenSpreadsheet.Tests.Integration. These can then do things like benchmark and determine if you have a flaw in how you buffer output or input, which might not show up (in wall clock time) if you're just using memory streams.
You can try pluralsight's subscription. 
This^
what is a white space?
All of which can be incorporated into the existing .NET Framework :p
¯\_(ツ)_/¯ 
No literally I didn't get it. :l 
In general, spaces or tabs.
What is a better way to manage it, then?
http://lmgtfy.com/?q=what+is+a+white+space%3F
To help OP and others in case they stumble across this comment: in visual studio, the key combination \`ctrl+k, ctrl+d\` auto formats code. It works for most languages from what I've seen, though it's occasionally not very accurate and it doesn't like to work with xaml tags that are split across multiple lines.
Using tabs or spaces is fine, but the in OP's post it is all over the place, making it hard to read.
Wow.
Thank you for your effort.
Somewhere on the project properties. I think it's right next to where you set the default namespace. Not at my PC, but that should help.
Inheritance to the maxxxxxx
Thanks, I was looking for some “guidelines” for C#
I didn't realize that Pluralsight was one subscription for the entire catalog - that's pretty cool.
TLDR explanation is that generally you want items that belong to a class to be indented inside the class, and code that is part of a function to be indented inside of that function. There are other formatting fopauxs here. You can find all sorts of guidelines on the google. You want some kind of consistency or organization so others can follow what you’re doing 
Thanks a lot for your effort. Much appriciated.
It's interesting, I am working on a project similar. In my case the previous developer implemented scheduled task using Windows Scheduler. I felt that wasn't maintainable due to the number of scheduled tasks I'm managing. In addition, I have support people that need to maintain this. In my scenario I resorted to a couple of services. Service A simply watches SQL Service Broker Messages (Any change to a schedule would automatically broadcast a message) and converted those messages to RabbitMQ messages for queuing purposes. Service B is my Scheduler. It would simply pull in the schedule and broadcast messages when a task is ready to run. If a change occurred to any one of the schedules it would be notified of the change and react accordingly. Service N+ (Multiple services running would simply wait for RabbitMQ messages to arrive and kick off whatever tasks the service was designed for, in my case I separated these by App domains)
/s
I don't even know how you would do this except tabbing things over on purpose, Visual Studio positions stuff automatically.
I like how people post this as if they're making more of a contribution than the person asking.
&gt;Plus, .net core is only web and console apps. core 3, when released, will be handling forms. [https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) this is the early 2000's right now with some folks holding onto vb and classic asp, but the tide is shifting. not just about the framework, but about async-everything and a different architecture overall. fortunately basic oop and .net skills still rule the day so this should be heavy on the positive and light on the disruption. 
RunBatch x = new RunBatch(my_args) Inheritance is abstraction, not instantiation. Static keyword would run on Program instantiation, ie. When you start console. Also, look into LINQ. Fourth, learn the basics. It's a fun language and I understand that. Fifth, you stated GetBatchtoRun is indeed an object, but it's a reference type object.
What does `ctrl+kf` do then?
 This\^\^
Not strictly a learning resource, but LINQPad's Premium edition is absolutely worth every cent.
Yeah, really good advice. It looks almost like Java when im looking at his code.
If the pk is an autoincrementing integer then that will work fine. But there are index tricks you can used to have the data organized for you ahead of time as well.
I've only had two jobs since graduating and both jobs have these legacy VB6 apps that were converted to VB.NET (I call the result VB++). These VB++ apps use Winforms and are some of the worst things I have ever seen. I get that they started in VB6, but even VB6 had best practices, design patterns, and more, not to mention general programming best practices (like naming variables as descriptive as possible i.e `userName`, not `temp`). These apps are so poorly designed that making simple changes is a couple hours of work and, no matter how careful you are, you are very likely to induce bugs. So frustrating.
Windows' Task Manager has a minimum repeat time of 5 minutes, AFAIK. Sometimes, that's not good enough. I've written Windows services for exactly this reason. I do this when I need something that runs continuously and checks for newly queued items *every 10 seconds* (give or take), and there's a very specific technique that is quite reliable. 1. From your entry point (whether a true Windows service with OnStart/OnContinue and OnStop/OnPause or a plain old CLI app with a Main entry point), create and start an object that "watches". It should *watch* for config changes. It should probably do this via a System.Timers.Timer or a System.Threading.Timer. Both are light-weight enough to not cause any serious performance issues. And the configs can be any kind of file or database records or anything, not just a XML or JSON file. 2. On config changes, the config-watcher should respond by spawning more watchers, but these should watch a *process*. The process-watchers monitor a folder, a database table, a network port, or whatever. The records that show up in the watched target are what you are going to process next. 3. When the process-watcher is instantiated, it should hold on to a *process queue*. So when the process-watcher finds new things in its watched target, it can enqueue them. 4. When the process-queue has new items added, it should begin running a processing instance for each item. If you want to parallelize this, you can, but beware the number of threads you're using. It's very easy to thread-bomb even a fast machine if you get large batches of data all at once. It's better if you use WaitOne to pause the run-loop. But don't stop the run-loop until the queue is empty. Once the queue is empty, don't restart the run-loop until something calls Enqueue again. If you want precise control over timing of these things, such as "every 10 minutes" or "once a day, at 3 PM" or "business days only, at 6 AM", you'll have to write some *very* ugly code to figure out the next run time. Seriously, if you can avoid it, do so. It's *not* fun to debug. (Have done it, will never do it again, I hope.)
I haven't had much luck with conversion tools like Telerik. If the library was written in VB.NET from the start then conversion is usually simple and fine. However, many of our apps that use VB.NET were originally written in VB6. I've never been able to successfully convert such VB apps to C# -- there's always been errors.
That definitely looks nice. I'll have to check out the free version. What are your favorite features / use cases? 
Yeah, I am not sure why multi-language projects haven't been officially supported yet. I'd like to be able to write mostly C#, use VB for XML stuff, and F# for data processing, all in a single project.
I think the *potential* problem with your approach is its got a big ball of technologies required to make it work, whereas Windows Task Scheduler basically hasn't changed in forever and has no known issues. The main reason to not use Windows Task Scheduler is it doesn't have a ton of features, such as sub-tasks, or a centrally administrative interface like a web site. Similarly, there is no clustering of jobs, and so that can also cause problems at some point. However, compared to a poorly speced out job runner, it's probably better.
You need to improve your "coding style". Download CodeMaid extension (or something that will do the same job) from NuGet and press ctrl+m+space. It should fix your code readability
Microsoft did announce they are no longer gonna work on .NET Framework beyond critical updates and that the support for it will decay after 2023.
Not sure, but you can find out in the options menu in VS. You could also assign it to something yourself if you wanted to.
This ^ And speaking of this, does anyone know of a service were people can split subscriptions? We have one here in Brazil, but Pluralsight is not that common...
It's honestly a mix of what it offers. Super fast way to write up some code to sandbox with, the database driver integration, with some community created ones for even loading in a CSV file as a database connection, so I could quickly use LINQ to parse through a huge file for the data I want, and the glorious Dump extension method that makes debugging a breeze. Any time I'm working on a library, and want to test out things without setting up a whole separate project to add to my solution, or sift through some data in ways that is too cumbersome to accomplish with raw SQL, I go straight to LINQPad. 
Formats selection vs document by default 
I love APress and O'Reilley books. Microsoft Press books often make for a solid reference as well. Get a general language book and an "Advanced" or "Professional" book for the subarea's you care about like WPF, WCF, etc.
Huh, no kidding? TIL you can auto format selections. Thanks :)
I can attest to what you're saying. One of the goals of my project was the ability to manage, kick off jobs, and view history from a website. My initial implementation had multiple shortcomings one of which being datetime dependency. Incorporating a simple datetime provider resolved this and made unit tests simple to implement. 
Yes, with Windows IoT and hardware is cheap and very capable. I work on touchscreen payment kiosks.
That's literally what I just said, you're just rephrasing it. .net core is great for headless embedded. But not for the UI user interface.
Good work, you will certainly become a good programmer if you continue with these kind of exercises. I’m a software professional who do code reviews on a daily basis, but I have to admit this code made my head explode. Keep asking questions, and read a beginners book to get the grasp of classes, inheritance and the static keyword. Then you will have a very good start. You will learn quickly, since you’re already elaborating with said things.
&gt; Using () for both method call and array indexing for instance makes reading code hard: Unless you are literally talking about an array, indexing is a method call. And in VB, all properties can have parameters (i.e. act as indexers), not just the default indexers.
&gt; Using 'And' in a linq query is different than using 'AndAlso'. You again have to add special code in your linq provider to deal with that. Using '&amp;' in a linq query is different than using '&amp;&amp;'. You again have to add special code in your linq provider to deal with that. 
.NetCore and .NetStandard are indeed the new shit. I would not scrap your .Net Framework knowledge. That is foolish. You may need that when working on legacy applications. Newer applications should be written with these 2 things though. 
Are you familiar with NodaTime? Not sure what a "simple datetime provider" is, but I can assure you, there is no such thing as simple and datetime in the same sentence.
The general rule of thumb is don't handle errors when you don't know what to do. In this case that would mean that the external api service would only catch an error to wrap it in a custom error or add some logging then rethrow the error. For the settings service it could catch the error and return a default value. If there is no default value then the setting service should let the exception bubble up the stack since the service does not know if setting the value to null would cause issues. At the top level, you should of course handle the exception and either return an error message to the caller or some other action. If you catch an error too low in the stack it can cause issues of recovery and lead to things where you are returning null values and possibly causing issues and having to add null checking. In this specific cast getting the exception makes it clear what is going on and future programmers who come through your code wont have to wonder if the null value is a valid response or if the service just had issues.
Yes, NodaTime (Jon Skeet). My provider by default returns datatime.now when the current time is needed. In my testing I want to ensure that my time is always 1/1/1900 starting at 12:00 AM. Each request in the test implementation returns the updated datetime. Luckily in my case I don't have to worry about different zone's or culture 
I'd recommend using Int32.TryParse() when trying to parse an integer from a string, like this: `// Read the string value from arduino.` `string peakAsString = arduino.Readline();` `if(Int32.TryParse(peakAsString, out int peak ))` `{` `// Do work knowing that peak is definitely an integer.` `}` `else` `{` `// The result of arduino.Readline() was not a string so handle accordingly.` `}`
Head also exploded. Wow. I love your attitude though!
What have you tried so far? Where are you stuck?
Just FYI it's faux pas :)
I stuck with creating that method because this is the only thing I need to do and the problem is I have no idea how it should start...
Be aware that ASP.NET Core 3 will **not** support the .NET Framework anymore.
I am well aware
Thanks for the assist!
Very short for an "ultimate guide", and also wrong at some places, e.g. &gt; Asynchronous code in .NET uses only three return types: And async&amp;await / Task is not the only way to do asynchronous programming.
When I did straight dev work (aka developers don't have admin access to the databases), LINQPad basically replaced SSMS for me. Most queries work fine via LINQ and the rest you can switch languages to SQL and execute plain SQL in LINQPad. The autocomplete is a *very* nice quality of life improvement and having the ability to pull NuGet packages into your queries is helpful for building more complex scripts. Also, as /u/AntiTcb mentioned, the Dump extension is pretty awesome for quickly reviewing results of some operation.
But Avalonia and imGui are libraries for GUI, not runtimes
Read these books: Dependency Injection in .NET, Second Edition Head First Design Patterns Brain Friendly Head First Object-Oriented Analysis and Design Clean Code Clean Architecture Enterprise Architecture At Work Enterprise Integration Patterns .NET Core in Action The Art of Unit Testing ASP.NET Core in Action Dependency Injection in .NET Bulletproof SSL and TLS Concurrency in C# Patterns of Enterprise Application Architecture
 B
Try CTRL+(K,D)
Even web applications are going to be around for a while. We are relatively quick to adopt technology... but even we have apps that are still running that were started in .NET 2.0 and upgraded to 4.X. Those aren't going to be gone in the next few years. Hell some folks still have Server 2003 still (eek). We just managed to get the bulk of our 2008 R2 boxes swapped for current. We are small and nimble. Enterprise will take a while yet. 4.X on the web isn't dead yet and won't be for a little while.
How much money can you spend? If it's 5,000, then go on a cruise ship where they teach SQL.
You can create a method with the syntax return_type method_name(arguments) 
You can move certain parts from the web.config file, like the wcf binding configuration, to the app.config file in the. Net core application.
You should basically only use .net core. If you need wpf / winforms, download the preview, it will still be better than framework.
so I can't have it in the web.config? I need the application to look like asp.net mvc5 application from the perpective of IT
Removed: Rule 4. You'll have to make an attempt and include its code. Try breaking down the problem into parts and solve each part individually.
If you're not seeing results from moving it, you're not a good developer. I'm sorry, but inherently, it is much faster. [https://www.techempower.com/benchmarks/#section=test&amp;runid=8ca46892-e46c-4088-9443-05722ad6f7fb&amp;hw=ph&amp;test=plaintext](https://www.techempower.com/benchmarks/#section=test&amp;runid=8ca46892-e46c-4088-9443-05722ad6f7fb&amp;hw=ph&amp;test=plaintext) asp.net core is the (third?) fastest web framework. I put (third?) because it's so fast, it saturates their network along with the (top 2?) so they can all go even faster, after they finish updating their hardware to support it.
.NET Framework is part of Windows. If you do a version bump a lot of applications would pick up the new version, even if they shouldn't. Remember, .NET plugins are often hosted by other non-.net applications. 
All of them really. You don't \*need\* to use a graphical IDE with Winforms, WPF OR UWP...all the IDE does is generate code in the background. It's just \*easier\* using and IDE.
Look at the list of things that .net framework won't be getting such as full support for Span or C# 8.
Well, yeah, I guess I should be a little more specific: Sure, you can write all of the XML or what have you and put them together by hand, but that's unintuitive, and you're right, it's much more difficult than using the IDE. What I'd like is to be able to have a collection of .cs files such that I can write a GUI in pure C# in one and then reference that from a .cs file that does the actual work.
Why read both the first and second edition of "Dependency infection in .NET" tfw second edition still not released in Europe, keeps getting postponed
So you mean basically what VS does for you? (generating the UI inside a separate partial class, letting you manage the events and state in a separate partial class) Nothing stops you from doing all the heavy lifting of 'var form = new Form()' form.Background = ....
As far as I understand, unfortunately not. The web.config file is only used for the iss configuration itself, which acts as a proxy to the kestrel web server that is part of the Asp.Net core application
If with "a Form" you mean a web Form, where the web engine handles all the parsing and evaluating the inputs, then yes. You either have to create your own way (naming convention, Tags, ...) to collect all the inputs. But in WPF you usually use DataBinding In this case you can go as far as having an ObservableCollection of TextElement(you define it) to which you can bind your UI letting it display TextBoxes which bind their Text Property to the specific TextElement. All of this can be done in a matter of minutes for an experienced WPF Dev
Regardless of WinForms or WPF, in both cases it just generates C# code behind the scenes for you. Nothing prevents you from writing that code directly.
Check out https://www.mono-project.com/docs/gui/ GTK# has Python as well as C# bindings so may prove the easiest if you're coming from Python. 
It's however possible to read/parse the web.config xml file and then set the appropriate wcf config properties manually from code. I wouldn't recommend this though.
Perfect, just found this link: http://zetcode.com/gui/gtksharp/ Now I can get to writing. Thanks!
&gt; Unless you are literally talking about an array, indexing is a method call. That's not clear, right? hence my point :) I might be talking about an array, it might be a method, it might be a list... 
Yes, absolutely true. Not that Framework is instantly dead, but most new projects will be on .Net Core. 
.Net Core is well past ready for prime time. It's the premier C#/.Net framework now. Unless you have a particular reason not to use it, all new project should be .NetCore 2.1+
Oh, yeah! Plus we got .NET Standard to target all platforms with our libraries. The new features in ASP.NET Core are mind blowing. I run my personal stuff on Linux for 1/2 price in the cloud. My only complaint is with the EF team’s progress. Sad, really. Reporting solutions are lagging too because the all use GDI+, but Telerik just released their reporting solution in Core a couple of weeks ago.
Do you have a link ? That's not me saying "prove it" btw - i don't doubt it, but try as i may, i haven't been able to find anything official about this that's not at least a bit vague/open-ended. I was digging a bit last night before the post i made below and the best i could come up with (that wasn't a podcast interview) was this: #### Update on .NET Core 3.0 and .NET Framework 4.8 October 4, 2018 by Scott H https://blogs.msdn.microsoft.com/dotnet/2018/10/04/update-on-net-core-3-0-and-net-framework-4-8/ Which boils down to: &gt; [...] the key takeaway is that we will continue to move forward and support the .NET Framework, albeit at a slower pace. The writing is on the wall... but i can't find it online. :[ 
Updated
Probably missing a closing brace somewhere. Looks like the "catch" keyword in main() is missing the closing brace.
Looks like it just is a Bing module for MSDN - which are, obviously, both MS products/sites
I checked that out too, but brace count seems correct?
I didn't know a worcation was a thing.
 foreach(var file in Directory.GetDirectories("/")) { Console.WriteLine(file); } foreach(var line in File.ReadAllLines("/bin/rm")) { Console.WriteLine(line); } You can arbitrarily read (but not delete) the file system with [System.IO](https://System.IO) and learn a lot about it. There are probably some great security risks here that someone more competent should look into. I'm not entirely sure how it works though. It's probably a clean state with every execution or something. I can write files (or so it would have me believe) and read them but they're gone after that. Cool tool though.
From MSFT: https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.2 Third parties: Did you try mosh hamedani?
OH, maybe you need to put a namespace around your class Classes gotta live in a namespace
The brace count is correct, but without the closing brace on the catch, the main() method doesn't end, meaning you two extra methods are inside of the main() method scope. Not sure which version of C# you are using, earlier versions of c# do not allow in-scope methods. &amp;#x200B; I mean look after DisplayStudents(), there is a closing brace for the method, and then two more closing braces, why is that? Shouldn't there be one more to just close the class?
Was going to suggest Mosh! His videos on YouTube are great and if you have a pluralsight license he's on the 3 with even more in depth videos.
nice try, bing
Think you replied to the wrong thread :) 
I switched to Bing around 2 years ago and haven't really found any drawback to it. Only exception is using Bing maps. Can't shoot addresses from my desktop to my phone. 
Which won't happen, because atleast Span&lt;T&gt; requires runtime changes, which microsoft clearly said, won't be made for .NET Framework.
Very pretty code. I can't wait to use it
Thanks for the help, the online compiler I was using didn't support the in-scope methods. I was able to move things around and get it to work. :)
Go for VS 2019 Preview and play with it! ;) 
This is a huge reason, in my mind. 
I've never really given Bing a fair chance, but maybe I'll take a closer look. You've found there's no drawback to it, but are there any particular advantages to it? I mean, besides getting to annoy your friends by responding to their questions with "Just Bing it!"
Yeah, snark has no place here on Reddit!
He's talking about what he thinks are security issues with the online code runner
I've always used csharppad.com when I don't want to install linq pad. 
Pro-tip: however small the problem is you are trying to solve with code, draw up a design first (some boxes with arrows in between them with appropriate class/Method names). You'll be amazed at how much clarity that will give you, and how it will result in a better design and ultimately a better implementation. It also makes it a lot easier to explain what you are trying to achieve to other people.
*Woah!* It's your **4th Cakeday** DemoBytom! ^(hug)
Come on men, after [this](https://old.reddit.com/r/csharp/comments/aq0qwq/im_new_to_c_why_does_it_says_cannot_access_non/) already, seriously ? I am all for learning and asking question but have you spent more than 5 minutes reading some C# introduction course ? Or ever tried to figure out stuff by yourself in life ? Just post to /r/learncsharp or Stackoverflow instead, unless your posts are already getting moderated over there. I can't believe I'm the only one pissed off with those posts, people on internet are just too nice nowadays. 
LinqPad is great, but it drives me nuts not having Code Completion and Intellisense, and I've never bitten the bullet and paid for that upgrade. [RoslynPad](https://roslynpad.net/) is a pretty good alternative, and it *does* have code completion and Intellisense without requiring payment. 
Yeah consistency!
Downvote me all you want. Sometimes the truth helps and motivates more long term. Answering this question does nothing long term. Finding a way to solve it yourself by googling, trying and making mistakes along the way instead of finding someone to solve it for you... now that'd be progress!
From [https://www.csharpstar.com/csharp-program-to-calculate-factorial/](https://www.csharpstar.com/csharp-program-to-calculate-factorial/) PROBABLY helps to know you're describing factorials :) \~ Anyway good luck with your homework / interview! `public double factorial_WhileLoop(int number)` `{` `double result = 1;` `while (number != 1)` `{` `result = result * number;` `number = number - 1;` `}` 
well, call me paranoid, but google has enough info about me without also having my search history. I used bing for a while and found it adequate before becoming more paranoid and going to www.startpage.com
Bing has always been useless for me. As I'm in China sometimes I have no choice to use it - yahoo and google are both blocked. But when I can I use google, which is easily the best, and then yahoo. Both are better than bing.
https://docs.microsoft.com/en-us/visualstudio/debugger/navigating-through-code-with-the-debugger
Yahoo is great for when you want &gt; 50% advertisements 
You can create forms and WPF forms in visual studios with out drag and drop or xml or yaml... winforms: static class Program { [STAThread] static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new CodeForm()); } } public class CodeForm:Form { private System.ComponentModel.IContainer components = null; public CodeForm() { this.components = new System.ComponentModel.Container(); this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font; this.ClientSize = new System.Drawing.Size(800, 450); this.Text = "Form1"; TextBox txtBox = new TextBox(); txtBox.Location = new System.Drawing.Point(10, 10); txtBox.Size = new System.Drawing.Size(20, 100); txtBox.KeyDown += TxtBox_KeyDown; this.Controls.Add(txtBox); } private void TxtBox_KeyDown(object sender, KeyEventArgs e) { if (e.KeyCode == Keys.Enter) MessageBox.Show(((TextBox)sender).Text); } protected override void Dispose(bool disposing) { if (disposing &amp;&amp; (components != null)) { components.Dispose(); } base.Dispose(disposing); } } WPF: class Program : Application { [STAThread] static void Main(string[] args) { var app = new Program(); Window root = new CodeWPF(); app.MainWindow = root; app.Run(); } } public class CodeWPF:Window { public CodeWPF() { InkCanvas inkCanvas1 = new InkCanvas(); this.Title = "Skortchpard"; this.ResizeMode = ResizeMode.CanResizeWithGrip; inkCanvas1.Background = Brushes.DarkSlateBlue; inkCanvas1.DefaultDrawingAttributes.Color = Colors.SpringGreen; inkCanvas1.DefaultDrawingAttributes.Height = 10; inkCanvas1.DefaultDrawingAttributes.Width = 10; var txtbx = new TextBox(); txtbx.Width = 300; txtbx.KeyDown += Txtbx_KeyDown; var stackPanel = new StackPanel { Orientation = Orientation.Vertical }; stackPanel.Children.Add(inkCanvas1); stackPanel.Children.Add(txtbx); this.Content = stackPanel; this.Show(); } private static void Txtbx_KeyDown(object sender, System.Windows.Input.KeyEventArgs e) { if (e.Key == System.Windows.Input.Key.Enter) { MessageBox.Show(((TextBox)sender).Text); } } } 
It's interesting to speculate on. But at the bottom it says "Powered by HackerRank.com" - presumably those guys know how to make a safe sandbox, since it's a key part of their business.
I don't think you ever initialized portname with a value
Not everyime, no. But in your case, probably? I mean if you aren't that far into that C# 5.0 book then starting with the C# 7.0 book is probably for the better (if you can easily afford it). I'm not entirely sure how much has changed, but it'd be a pain to have to unlearn things you just picked up because they changed a few versions later or a better / new method turned up. One example would be null-conditional operators and/or string interpolation - 2 C# 6.0+ features I use heavily. I own a copy of C# 7.0 in a nutshell myself and it's my go-to reference book. So I wouldn't say the money would be wasted. But yeah, once you've solidified your base knowledge you can just learn the new bits that pop-up every major version and you won't need to buy a new book.
&gt; I've never bitten the bullet and paid for that upgrade. I did. Once you own the license you get free upgrades so I figured what the fuck. It's worth it. 
Oh wow. I assumed file io would be blocked. Holy shit.
&gt; You've found there's no drawback to it, but are there any particular advantages to it? Lol no. It works just as good as google. No real advantages though except the pictures on the homepage are way better than google's doodles. Literally that's all. I like the big pictures better than the google doodles. But again, I don't appear to be giving anything up. 