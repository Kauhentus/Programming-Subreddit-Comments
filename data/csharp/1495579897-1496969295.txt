Also try to focus on creating tests for the public methods as much as possible rather than the private methods, testing the behavior, not the implementation. That way you're not having to rewrite a whole bunch of tests if you decide to change the implementation. See [Test Behavior, Not Implementation](https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html) for an example. You private methods will still be covered by your public method tests (or at least if they're not, that suggests you might need to refactor or create additional tests - e.g. with appropriate inputs to follow all paths).
Well, a regular function (method, rather), can be called via an instance of the class from the outside, which local functions can't. 
Local functions are converted into regular instance methods by the compiler, which, as their argument, take some synthesized struct containing arguments. No stack magic. 
If you don't have one, get yourself a bug tracker. At minimum, this is an Excel spreadsheet with columns for: 1. complete steps to reproduce the bug 2. expected behavior 3. observed (buggy) behavior 4. ~~who it’s assigned to~~ (suggested to add if you get more developers) 5. whether it has been fixed or not 
Isn't there a rule, "don't attribute to malice that which can be explained by stupidity"? Sounds like that's the issue here, they had two developers who had all their valuable code stored pretty much locally without a source control or working backup, then both developers left and the people there didn't think to have them setup a copy for the next guy in. No company would do that on purpose, it sounds to me like those two people were the only ones who had any understanding of coding etc. and the rest of the company felt that them leaving wouldn't be an issue as long as some scrap of code was saved on an email server somewhere. My advice to OP would be to chill out, sounds like you're already doing a great job in a bad situation and if the customer's deadline has already been missed by months then it's not the end of the world if it's missed again. Do you best to hit the deadline, but if you think you aren't going to make it then make a list of remaining issues, estimate the time (multiply by AT LEAST two if not ten) and then attack the problem the right way rather than trying to rush everything and not make any progress. If they do eventually fire you it'll be their loss since it sounds like you have the right mindset, willingness to learn, and a good attitude.
&gt;a local function can **close over** the parameters What do you mean by "close over"?
Creates a closure. It's been a decade and a half since I was a CS student, cut me some slack.
i will never understand why small companies would rather hire a newbie to save their entire livelihood than just hire someone for more so they can float for a few. customers start bailing at a company that small and its doors shut. Good luck brother i know the feeling, if all goes well you will learn some valuable experience. This happened to me and my lead dev before me. We joke about having QA now
Yeh, im sure the other "Devs" left because they had a better opportunity a.k.a an actual real work environment that wasnt on the fly reactionary programming. They got their exp found out real companies pay more and laughed out the door. =/
This. The DIY security community would appreciate it!
That's an awfully big request :) At first glance of your code one of the first things I like to do is to organize my class definitions into separate regions for public members, private members, constructors/factories, public methods, and private methods. That way, as I'm reviewing the code, I can easily navigate to what I'm wanting to see/use. I also notice that you use a bit more whitespace within method blocks than necessary, but that like my previous suggestion is personal preference. I don't have context on what the project is, really, so I can't offer much more constructive feedback than that. Cheers :)
The key here is to think in abstractions. I haven't ever looked at the Repository pattern in detail, but I think what I'm going to describe fits its spirit. It'll give you some idea how interfaces fit in. When you're not using abstraction, it can be very hard to test volatile things like the database, filesystem, or the network. Abstraction is a powerful tool. It doesn't need a big definition. If I ask you to get me "a chair", I don't know what I'm going to get back. You might get a recliner, a folding chair, or some kind of modern art whatsit that I can sit on. I was vague, and there are lots of things that satisfy "a chair". But if I say, "Get me a gray metal folding chair", I expect something specific, and won't be happy if you return with a recliner. "A chair" is an abstraction. I ask for "a chair" if all I care about is a place to put my butt. Large programs get easier to maintain if we always ask for "a chair" instead of "a gray folding metal chair". So. With that in mind. Ask yourself what a database is, in abstract. If your program is an address book, the database is more or less "where I store and retrieve contacts". Maybe it has filtering options, maybe not. All your program really needs is something that can answer the question, "Which contacts match this?" and handle the command, "Please save this contact." Anything else is a concretion, and we should do our best to make only the database class worry about the concretion. Let's say you want to load all your contacts. If you have no abstraction, you implement this by putting a bunch of DB code in some UI event handler. This is yucky and you're probably past it if you're thinking about unit testing. I bet you have a class that looks something more like this: public class ContactDatabase { public Contact[] GetAll() { using (var connection = new SqlConnection("...")) { ...and on and on } } public void Save(Contact contact) { using (var connection = new SqlConnection("...")) { ...and on and on } } } That fits the bill of what we said before: "the place where I safe and get my contacts". But we can't separate the database from it, because we built database access code right into it. So when we need to test how something else works, and "something else" uses this class, we have to worry about the database. Even this simple method can't be tested without messy database setup and teardown: public Contact[] ContactsThatStartWith(string beginning) { var db = new ContactDatabase(); var allContacts = db.GetAll().Where((c) =&gt; { return c.Name.StartsWith(beginning); }); return allContacts.ToArray(); } That's a stupid way to write this method, I obviously should do the filtering at the database level. Whatever. You can see why this method can't be tested. That's what matters. We need a way to say "a thing that stores and saves contacts" without saying "ContactDatabase". So we need an abstraction. Interfaces are a tool of abstraction. Interfaces are kind of like describing "shapes" of types. Suppose I made this interface: public interface IContactDatabase { Contact[] GetAll(); void Save(Contact contact); } What this says is, "There are some types that implement IContactDatabase. Any type that does so should have an implementation for these methods." All implementors of interfaces should behave the same way. So we can make a small change to the earlier ContactDatabase: public class ContactDatabase : IContactDatabase { //... It already implemented the methods, so we're good there. How do we get the class with ContactsThatStartWith() to use it? We make a thing that Roy Osherove called a *seam*. Seams are the parts of fabric that are sewn together to make clothes. Seams in testing are the places where you use abstractions to put mock types in instead of messier types. How do we make a seam? This is what the class that contains the method would look like: public class ContactSearches { private readonly IContactDatabase _contactDb; public ContactSearches(IContactDatabase contactDb) { _contactDb = contactDb; } public Contact[] ContactsThatStartWith(string beginning) { var allContacts = _contactDb.GetAll().Where((c) =&gt; { return c.Name.StartsWith(beginning); }); return allContacts.ToArray(); } } The seam is the _contactDb field I added. Since it's an IContactDatabase, I can use ANYTHING that has the GetAll() and Save() methods. At runtime, in your program, that will be a ContactDatabase, and when you need a ContactSearches type, you'll have to: var searcher = new ContactSearches(new ContactDatabase()); The next bit is an aside, but fun to read. *This is actually a very important pattern called "Inversion of Control" or "Dependency Injection". I have a big book about it, but it really boils down to the idea that your types should generally ASK for things they depend on rather than creating helper classes themselves. If you follow IoC, your code relies heavily on abstractions, and code that relies on abstractions is easier to test. There are libraries called "IoC containers" that help deal with the problem 'Argh! My constructors are so big!', but that's another tutorial and honestly I'm finding big constructors are a smell even when using IoC.* Anyway. Let's talk about testing. I want to test that ContactSearches.ContactsThatStartWith() returns an empty array if the database itself is empty. If I want to create ContactSearches, I need an IContactDatabase. I want to be able to control WHICH contacts are in the database. So I can make this mock type: public class StubbedContactDatabase : IContactDatabase { public Contact[] Contacts { get; set; } public Contact[] LoadAll() { return _contacts; } public void Save(Contact contact) { // do something with the array } } It's not a "database" by the computer science definition. But it does what I want out of a database: store and retrieve contacts. So, using this, I can write my test: [Test] public void When_database_is_empty_ContactsThatStartWith_returns_empty() { var db = new StubbedContactDatabase() { Contacts = {} } // 'sut' is 'system under test'. Read Roy Osherove's book! var sut = new ContactSearches(db); var expected = new Contact[0]; var result = sut.ContactsThatStartWith("foo"); Assert.That(result, Is.EqualTo(expected)); } I make the "database", ensure it has no items via setting an empty array, then exercise my code using that array-backed version of the database. There are "mock libraries" that can help automate creating these backing types. I use one in my professional code, but I think there's some value in hand-writing mock types for a little while before trying one out. Test pedants will want me to explain that "mocks" and "stubs" are a different thing, whatever. You should read Roy Osherove's book. I have a post to finish. That's how I test around things like databases that are volatile. I make a layer of abstraction that represents "what a database does" for me. Then, in tests, I can make versions of the abstraction that do exactly what I want. To get there, I have to use interfaces, and the Dependency Inversion principle (as SOLID calls it)/Inversion of Control pattern (as other people do). To me, Repository looks like the ten-dollar explanation of this pattern. It's a bunch of fancy diagrams and lots of words to say: &gt; Don't directly use your database types like SqlConnection in a class you want to test. Instead, make an abstraction that represents what the database does and use Dependency Injection to provide an implementation. In tests, you can use mock objects in place of that abstraction. At runtime, you can use real implementations. Try it out with something simple your database does. Get messy. Make mistakes. 
So context. The project is a configuration creator/manager for an AV system in a typical corporate conference room. The ConfigurationLoader class is the file manager, and manages when things change, including saving and loading the file. I have a class for updating and reading each section of the JSON file (DisplayConfigUpdater, etc) which is deserialized to an object using the JSONConfiguration class. I created an abstract base class for the couple different types of objects (arrays vs. Non-array. DSP is non-array, Displays is an array). To be more specific, when I was working on refactoring things, for instance in the DSPConfigurationUpdater class, I found myself copying the entirety of the VTC class and doing a search/replace exhanging DSP for VTC. It seems that that's a signal that there's a lot of duplication, but I'm not sure how to extract that duplication and reuse it between classes.
Also, thanks for the tips.
I think I get it, I am going to have to play around a bit, but the more I learn the more I slowly realize the people leading my project may have no idea what they are doing... (They did state this was their first webApi as well) I think you pointed out a lot of misconceptions that I had and accepted as truth. I have already ordered that book and will be sure to go through it. Thanks a ton for your help!
Yep, that's how I intend to use it.
I default to no visibility modifier at all. Not writing anything is easier than breaking the habit of public by default.
I'd consider that a code smell; not necessarily wrong but definitely suspicious.
&gt; No, nothing is allocated for a local function unless it is converted to a delegate. Delegates always allocate memory. 
You can never run code faster than a unit test. As in shortest feedback loop possible of write lines, execute output. Debug, repeat. The moment you need a UI or even a command line argument... test was faster. 
You have try/catch blocks in nearly every method that only logs an error if caught. This is bad practice. Rather than repeating what others have said, I'll share some popular Stackoverflow quotes about the matter. [Eric Lippert](https://stackoverflow.com/a/9007287/5107677) &gt; The solution... is to eliminate the code that is throwing the exceptions, and if you cannot eliminate it, then isolate it to a tiny region of code that does use exception handling. [Yuval Adam](https://stackoverflow.com/a/1722991/5107677) &gt; The basic rule of thumb for catching exceptions is to catch exceptions if and only if you have a meaningful way of handling them. &gt; Don't catch an exception if you're only going to log the exception and throw it up the stack. It serves no meaning and clutters code. &gt; Do catch an exception when you are expecting a failure in a specific part of your code, and if you have a fallback for it.
https://msdn.microsoft.com/en-us/library/bb348051(v=vs.110).aspx `Array.Resize` would be easier to read, inside `.Add`.
Also, your indexers need to check for index out of bounds conditions, otherwise you might read/write old garbage.
We'll take a look at adding **WeakReference** support. At a minimum, compiler support for the class(es) can be added so porting existing code to Bridge would be possible and at least compile. Perfectly reproducing the functionality in JavaScript may not be possible, but we can investigate. Issue [#2701](https://github.com/bridgedotnet/Bridge/issues/2701) has been created to track this feature request.
That makes sense... My team seems to be re-writing a process that was done very poorly. In an effort to write cleaner code we have been first documenting everything we wanted, what the method will take and what it will do. It appears we should be doing this as unit tests instead of on a word document right? Basically what i've got from all this is creating a test for every method will probably help me grow as a programmer, I can later decide what does and does not need to be tested but having too much is better than too little. I need to learn more about abstraction and inversion of control and implement that, then I should be writing mostly clean and maintainable code.
A very quick and brief review. Repeated issues in code are not repeated here. - There is absolutely no documentation present. This makes it nearly impossible to understand what the purpose of most of the code is. - There is not a single unit test present. Unit tests help in understand the purpose of the single units too. - BasicConfigurationUpdaterBase, line 9: Prefer properties over fields, especially for mutable fields. - BasicConfigurationUpdaterBase, line 17: Avoid static state. This state is shared across all instances of your class. This makes unit testing more difficult, as you can't properly test the unit in parallel and independent. I don't know if there might be a reason why this is static, since there is no documentation, but a static state that can be modified by any subclass seems smelly. - BasicConfigurationUpdaterBase, line 23: Common naming convention is PascalCase, not a mix of snake_case and PascalCase. - BasicConfigurationUpdaterBase, line 45: Just use `JsonConvert` instead of the `JsonSerializer`. It's nicer to use. - BasicConfigurationUpdaterBase: This whole class just makes me very uncomfortable. This class is just... a mess. You have static methods that manipulate static state, then again you have virtual protected instance methods that only call another abstract method attached to static events in the instance constructor, and you have abstract methods that indicate that they manipulate values. - CameraConfigurationUpdater, line 10: Sometimes you have delegates as nested types, sometimes directly in the namespace. Does it really make sense here to have it nested? A guideline is: If the nested type is public, it's usually used outside of the encapsulating type and mostly warranted to be moved to the namespace. And commonly you have one type per file. - CameraConfigurationUpdater, line 19: Do you really need this properties public and mutable? This way they can easily be `null`, but you never do a `null` check when calling the delegates. When you accept them only in the constructor you can just verify there that everything is set correctly and then just call them. - CameraConfigurationUpdater, line 49: Avoid Pokemon exception handling. Only catch the exceptions you expect and can handle meaningful. - ConfgurationLoader, line 100: Stuff like this is **really** difficult to read. It's better to just always wrap all statements in blocks, even if they're just one line. If you really don't want that, please at least move the statement into the next line and indent it. - JSONConfiguration: Ideally just one type per file. Move the types into a folder and another namespace if you want. I'm gonna stop here, because most of the other stuff is just more mess. I'd **strongly** suggest you: - **Start to document your stuff.** Maybe then some parts make sense, maybe then you realize that some parts don't make sense. - **Forget about `static` state.** Seriously, forget about it. It's the cheap way out and most of the time just leads to bad and messy design with uncontrollable dependencies and code paths. With your current code you could not even use two "Updater" at the same time, because they'd overwrite each others `Info` because it's stored in a common static state. - Your classes do way too much. What's their purpose? Deal with changed data? Persist/restore data? - Don't use `JArray` and `JObject` to store your data. Use proper data structures like a `Dictionary&lt;TKey, TValue&gt;` instead. - Don't use `ushort` when you don't really need it, just use `int`. This will get rid of the constant `ushort` casting everywhere in your code. - Since most of your code is hardly understandable, I'm not sure if all the delegates actually make sense. You have a lot of them. Perhaps try to tone it down a bit, and just provide some events that the user can attach to.
For the beauty of recursion :) &gt; public static void DisplayPossibility(string s) &gt; { &gt; if (s == null) &gt; { &gt; return; &gt; } &gt; if (s.IndexOf("*") != -1) &gt; { &gt; DisplayPossibility(s.Substring(0, s.IndexOf("*") + 1).Replace("*", "0") + s.Substring(s.IndexOf("*") + 1)); &gt; DisplayPossibility(s.Substring(0, s.IndexOf("*") + 1).Replace("*", "1") + s.Substring(s.IndexOf("*") + 1)); &gt; } &gt; else &gt; { &gt; Console.WriteLine(s); &gt; } &gt; } &gt; 
a) Cleaner to read I couldn't format my code correctly. Add a carriage return and tab after each lambda statement. One line against 4. You have some operations over a list, you can know what is being done on this list with only a quick glance. Filtering, one line, iteration, one line, projection, one line... b)Cleaner to debug It is just an iterator calling a function... Set the breakpoint inside that function and you are done. That way you will able to reuse that function automatically for a list of Product or a single Product. Think he is like trying to log all his product of a defined type, he most surely will need that same call for a single product.
&gt; One line against 4. If you add a carriage return and tab after each lambda statements (like you suggested for readability) it's not one line against 4 anymore. product .where(item=&gt; item.Type.equals(type)) .ToList() .ForEach(i =&gt;result.Append( getNameType(i))); vs var matchingProducts = product.where(item=&gt; item.Type.equals(type)); foreach (var matchingProduct in matchingProducts) { result.Append( getNameType(i)); } And the big point still stands: You create a completely new list, just to call `ForEach`. At the bare minimum just create an extension method that operators on `IEnumerable&lt;T&gt;`. Don't create garbage that's immediately thrown away just to call a comfort method.
With your first instruction you created an Enumerator. With the call to that Enum in the for each statement you created a new list too. Use Linq or don't. Don't add its complexity to avoid it in the next line, it will force your brain for extra effort reading it.
Xamarin is not something that can run on the web; there's no way to run XAML on the web beyond the dead/abandoned Silverlight plugin. (Which was a rather awesome thing killed by the fact that iPads don't run browser plugins. Now desktop browsers have been moving from the plugin model as well.) It does make it fairly easy to deploy simplistic mobile apps to Android and iOS devices. My main concern with it is app startup times. I built a "hello world" app and published it to my Android phone, and I thought it took way too long for the app to start up. I'm not familiar with Electron, but at a glance it looks more like a substitute for desktop Java or GTK+ apps than anything else. I think desktop, and XAML in particular (once you figure it out), is generally easier and faster to develop than web apps. With XAML you've got all of this "free" stuff that just comes baked in. There are some better third party control toolkits like Telerik UI, but the baked in stuff often works well even if it doesn't look the best. On the web you often need to find something like jQuery UI or Kendo to get you controls beyond a text box and a button. But you can build web apps that work on anything from a 4" phone screen to a wide desktop monitor. The idea is called responsive design, and a framework like Bootstrap provides a grid you lay your pages out with, and as the screen gets wider, it adjusts how the columns fit on the page. On the web you can mimic things like modal windows, but I would stay away from stuff like that since it gets painfully complicated sometimes for those to play nicely on smaller screens. I generally feel that if I need a new window for something, that is a transition to another page and back rather than a modal window. If you look at some of the biggest websites out there, most don't use modal windows for anything beyond a simple notification window, and many are even not even doing that and opting for banners or sliding panes that show notifications. I think it's good to start with the desktop and move on to the web. With desktop you basically need to know C# and XAML, and the designer can help you build (awkward) XAML while you're learning. Once you start building a web application, then you're adding HTML, JavaScript, CSS, and probably something like Razor templates on to that, plus the challenge of getting data to/from the client and server. That's not to say on desktop that the client/server piece can't be challenging as well, but there's an additional layer needed for most web apps to facilitate that communication which you can get away without on simpler desktop apps.
Quick Google brings up atleast 3 projects already available and 3 videos on YouTube? Not sure how you missed them? https://www.google.co.uk/search?q=discord+chat+bot+c%23 E: More effort response, I tried making my own Slack bot using the native API - It was more hassle than it was worth and just went down the avenue of using a solution available on Github - Noobot. I suggest you do the same. If you've no c# experience then why code in c#? Use your language of choice...
I use the PresentationFramework source code quite a lot for digging around in WPF internals - sounds like that would be more useful for your purposes than a book: https://referencesource.microsoft.com/#PresentationFramework,namespaces
&gt; No. Debug your own code. The where clause will be executed upon call at foreach statement over all items of the initial list and creating a generic collection (a IEnumerable) in the middle. You said before it will create a **list**, which it does not. I never claimed it will not create an enumerator or `IEnumerable&lt;T&gt;` - but it will simply not create an entire list. Quote from you: &gt; With the call to that Enum in the for each statement you created a new list too. This statement is wrong. Iterating the enumerator does not create a list. &gt; if you go linq, and this usually means you go for maintainability go fully linq. Again: The part that's related to LINQ is the same in your code and in mine, in both cases it's the `Where`. The `ForEach` is not related to LINQ, it has nothing to do with LINQ. To summarize important points again: - Iterating an `IEnumerable&lt;T&gt;` does **not** create a list. It creates an enumerator, and enumerating this enumerator does not create a list either. - Calling `ToList` creates an entire new list. When it's created from an enumerator, it can't know the amount of items beforehand, so potentially it needs to resize the internal array mutliple times when too many items are added. - `ForEach` is not related to LINQ (https://blogs.msdn.microsoft.com/ericlippert/2009/05/18/foreach-vs-foreach/). - Don't create a completely new `List&lt;T&gt;` and throw it away immediately, when all you want to is to call a comfort method `ForEach`. If you prefer a more declarative syntax, create an extension method `ForEach&lt;T&gt;(this IEnumreable&lt;T&gt; src, Action&lt;T&gt; action)` - but avoid the `ToList` call.
Thank you so much papa! I don't know why i didn't remove the brackets - but it works now!
Holy fuck, are you seriously? &gt; Not a ILIST but a generic collection (a list). When I say "list" I mean `List&lt;T&gt;`, the actual type. An enumerator/iterator is not a generic collection. It's not creating any kind of collection, it just iterates an existing collection. Let's compare again. In both cases with the assumption that `product` is a `List&lt;Product&gt;`. Your solution: product .where(item=&gt; item.Type.equals(type)) .ToList() .ForEach(i =&gt;result.Append( getNameType(i))); This will: - The `Where(..)` call will create an iterator `System.Linq.Enumerable+WhereListIterator'1` (often called enumerator). -- Internally this iterator will use the `List&lt;T&gt;.Enumerator`. This is a struct, so no further garbage produced. -- This enumerator does not produce anymore garbage. It's using internally an index. When iterating (calling `MoveNext` and `Current`) it returns the of the current index, and increments the index. Again, a struct, no garbage. - Next the `ToList()` call, this will create a new `List&lt;Product&gt;` based on results of the enumeration. -- This call will actually enumerator the iterator from the previous `Where(..)` call. -- It will create a `new List&lt;Product&gt;`. Internally the `List&lt;Product&gt;` uses an array to store the objects. So immediately you have two new objects on the heap. -- Then it iterates the enumerator and calls `list.Add(..)` for each element returned by the enumeration. -- The array internally in the list is a buffer. If more elements are added than it can store, it's resized and the elements are copied over to the new array. So potentially you create multiple more arrays. -- Once it finished enumerating the enumerator it returns the created `List&lt;Product&gt;`. -- The iterator created from the `Where` call is now eligible for garbage collection. - Then you call `ForEach`. -- This is using the `List&lt;Product&gt;` indexer, so no garbage is produced. A simple `for` loop. -- Here we actually call the action we want to perform (`result.Append(..)`). - After the `ForEach` is finished the previously created `List&lt;Product&gt;` is eligible for garbage collection. It's not used anymore. Next my suggested version: var matchingProducts = product.where(item=&gt; item.Type.equals(type)); foreach (var matchingProduct in matchingProducts) { result.Append( getNameType(i)); } - The first part is the same, here we also have a call to `Where(..)`, including the iterator and the internally used list struct enumerator. - With the `foreach` we actually start iterating the enumerator. This happened in your code too, only that in your code it was happening within the `ToList` call. - Next we already call the action we want for each element: `result.Append(..)`. Again: Your version creates an entire `List&lt;Product&gt;`, which is just used to call `ForEach` on it and then is thrown away again. This extra list is avoided in my version. If you insist on having a `ForEach` for more declarative way of coding (it's not related to LINQ) just create an extra helper method that operates on an `IEnumerable&lt;T&gt;`: public static class EnumerableExtensions { public static void ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; src, Action&lt;T&gt; action) { if (src == null) throw new ArgumentNullException(nameof(src)); if (action == null) throw new ArgumentNullException(nameof(action)); foreach (var element in src) { action(element); } } } // Now you can do it your preferred way, but without creating an extra list: product .where(item=&gt; item.Type.equals(type)) .ForEach(i =&gt;result.Append( getNameType(i))); This way you avoid the creation of the list, you avoid creation of unnecessary garbage. If you still don't understand something, please be more specific in which part, so I can (ideally with source to back it up) clear up your confusion.
And don't put the password in your code
Hire someone in India to do it for you
Thanks, I really appreciate it. I'm in a small company and am the only person that writes C#, and I haven't been doing it that long. I appreciate the feedback. &gt; There is absolutely no documentation present. This makes it nearly impossible to understand what the purpose of most of the code is. I know better, I'll get this fixed. &gt; There is not a single unit test present. Unit tests help in understand the purpose of the single units too. This is something I'm learning about and need to implement. I appreciate the push to do so. &gt; BasicConfigurationUpdaterBase, line 9: Prefer properties over fields, especially for mutable fields. Make sense. This one I actually removed since it's not needed in this class. &gt; BasicConfigurationUpdaterBase, line 17: Avoid static state. This state is shared across all instances of your class. This makes unit testing more difficult, as you can't properly test the unit in parallel and independent. I don't know if there might be a reason why this is static, since there is no documentation, but a static state that can be modified by any subclass seems smelly. Absolutely. I had the same thing in the ListConfigurationUpdaterBase and didn't catch this one. &gt; BasicConfigurationUpdaterBase, line 23: Common naming convention is PascalCase, not a mix of snake_case and PascalCase. Is there a way to change the auto-generated method names to be PascalCase instead? I'm using VS2008 Pro SP1 with Resharper. I know, I know, Crestron processors run on Windows CE 7 and need the .Net 3.5 CF support. They're working on changing that. &gt; BasicConfigurationUpdaterBase, line 45: Just use JsonConvert instead of the JsonSerializer. It's nicer to use. Ok, I"ll look into it. &gt; BasicConfigurationUpdaterBase: This whole class just makes me very uncomfortable. This class is just... a mess. You have static methods that manipulate static state, then again you have virtual protected instance methods that only call another abstract method attached to static events in the instance constructor, and you have abstract methods that indicate that they manipulate values. Yeah, the static methods and value shouldn't have been there. Sounds like I went to far in trying to make something more abstract. My intention was to not have to repeat some of those things, since I found myself doing the same thing over and over in the classes that inherit from BasicConfigurationUpdaterBase. &gt; CameraConfigurationUpdater, line 10: Sometimes you have delegates as nested types, sometimes directly in the namespace. Does it really make sense here to have it nested? A guideline is: If the nested type is public, it's usually used outside of the encapsulating type and mostly warranted to be moved to the namespace. And commonly you have one type per file. That makes sense. I'll make that more consistent. &gt; CameraConfigurationUpdater, line 19: Do you really need this properties public and mutable? This way they can easily be null, but you never do a null check when calling the delegates. When you accept them only in the constructor you can just verify there that everything is set correctly and then just call them. Yes. Part of the problem is that S+, which is the language I have to use to actually consume what I've written here, can't handle instantiating a C# class with a non-default constructor. If the class doesn't have a default constructor, then I can't access it from S+. Stupid, I know, but that's what I'm dealing with. The delegates are registered using a proprietary 'registerdelegate' function in S+, so they have to be public and mutable. I do have null checks prior to attempting to actually use them. &gt; CameraConfigurationUpdater, line 49: Avoid Pokemon exception handling. Only catch the exceptions you expect and can handle meaningful. Makes sense to me. I'll change that. &gt; ConfgurationLoader, line 100: Stuff like this is really difficult to read. It's better to just always wrap all statements in blocks, even if they're just one line. If you really don't want that, please at least move the statement into the next line and indent it. Got it. &gt; JSONConfiguration: Ideally just one type per file. Move the types into a folder and another namespace if you want. That makes sense too. &gt; I'm gonna stop here, because most of the other stuff is just more mess. Probably more of the same repeated mess. :-) &gt; I'd strongly suggest you: &gt; Start to document your stuff. Maybe then some parts make sense, maybe then you realize that some parts don't make sense. &gt; Forget about static state. Seriously, forget about it. It's the cheap way out and most of the time just leads to bad and messy design with uncontrollable dependencies and code paths. With your current code you could not even use two "Updater" at the same time, because they'd overwrite each others Info because it's stored in a common static state. Makes sense. &gt; Your classes do way too much. What's their purpose? Deal with changed data? Persist/restore data? Got it. This is one thing I wasn't sure about. &gt; Don't use JArray and JObject to store your data. Use proper data structures like a Dictionary&lt;TKey, TValue&gt; instead. &gt; Don't use ushort when you don't really need it, just use int. This will get rid of the constant ushort casting everywhere in your code. I'm using ushort because it maps to the basic INTEGER type in S+. Otherwise it would be int. This is also the reason for the `boolValue ?(ushort) 1: (ushort) 0` everywhere. S+ can't handle bools.
I don't know if this helps you or not...I think probably not, but I woke up and still no answer yet.... So its worth mentioning. I have a program I wrote where I ran into a similar problem. It was PowerShell (from c#)I was using, but I had settings that needed to be set. The scripts I was running worked fine when I ran them, but the settings were different coming from the exe. I don't even remember exactly the name of the setting, but it was a scope of some sort. I.e. I had to have various settings to allow me to run the scripts, but I had to change that setting a different way for it to work in the program. Long shot, but you never know. 
I'd probably do it something like this: public class Warehouse { readonly List&lt;Product&gt; _products = new List&lt;Product&gt;(); // returns a copy so users cannot modify the warehouse storage inappropriately public List&lt;Product&gt; AllProducts =&gt; _products.ToList(); public void Add(Product product) =&gt; _products.Add(product); // apply single responsibility principle and have a better name // avoid coupling this Warehouse class with the internals of Product except where explicitly desired public IEnumerable&lt;Product&gt; RetrieveByType(string type) =&gt; return _products.Where(p =&gt; p.Type == type); } public partial class Product { // separation of concerns: string representation of a product should be responsibility of the product class public string DisplayString() =&gt; string.Concat("Name: ", Name, " Type: ", Type); } public static class ProductGroupExtensions { public static string ToDisplayString(this IEnumerable&lt;Product&gt; collection) =&gt; string.Join(Environment.NewLine, collection.Select(p =&gt; p.DisplayString())); }
Ideally, though, you'd build a unit test around the externally visible portion of the class/API that would route through the affected code. If this is impractically difficult, maybe you need to refactor the 'complex piece of logic' to its own class or something. You shouldn't *need* to have persistent unit tests of non-public code. And, OTOH, if you're just trying to verify that a particular approach will work before you commit to it, it may be that the thing to do is to throw away the test when you're done.
Wow, what an excellent reply! Thank you very much! That cleared up a lot for me. 
Again, this is an experimental library and while it doesnt follow every rule in the book, it opens the possibility to generative animations, animation expressions and emitters, relative animation targets, generic animations, state-based mathematic easing principles, nthPowerMatrixAnimations, insanely powerful element targeting expressions exceeding the capabilities of WPF binding expressions, custom logical trees to react differently in different contexts... There is no other semi-competent way to do anywhere near the level of animation and transition expressively in WPF. I'm not saying that the library is bulletproof and people should consider it in their next business app. But desktop developers are falling so far behind when it comes to modern, beautiful UI design compared to mobile and web, and this is something ive been working on for around 6 months and you really can create some very attractive animations across sets of UI elements very quickly and get beautiful results with it. I just want to minimize my amount of hacks and WPF-exploits before i release the library as much as possible.
Compress your data and write some magic Bytes (unique for each compression type but equal in length) in front of it. Strip them when you fetch your data and you can determine your compression type.
If you can't work out how to do it, even with the source it's an unmaintainable monstrosity. Hell if you need the source it's probably still going to end up an abomination.
Hmm, apart from the searchProduct method, why no constructor? Does it behave in the same way?
Nah, just have the bytes a fixed length that you define.
As an aside, 1000 to 20000 is not a 2000% increase it's a 1900% increase.
Are you using SQL Server? Could always just enable page level compression
I've read *The Pragmatic Programmer*, actually (about five years ago, though it was recommended to me a decade prior to that). It's a fine book. Not really what I was worried about. I did not say you should test *all* of your public API: I suggested you should be testing *only* your public API. Testing the interior of your system tends to bind your tests to your implementation, which will complicate refactoring if/when it becomes necessary. This may or may not be a problem, but it's definitely a bit of a smell.
Good answer. It's a shame when we have to basically order people to write with DI and testing in mind. Why are you still using Unity? 
Add a column/property that defines the type of compression.
Well, it was a long journey and the internet today is very different. The first time I read about unit testing was maybe 2004 or so. I had a co-op position in a manufacturing plant and I was writing Windows clients in VB .NET. I liked the sound of it, but didn't have any mentors and had no clue how to write testable code, so every time I tried it I decided it was "more trouble than it's worth" and brushed it off. In 2005 I had an internship at a consultant. They had processes that I'd recognize as "agile" today, but at the time it wasn't really a buzzword. They had high requirements for testability, but shoved the interns in a corner and didn't mentor us. I did a lot of heinous things to meet my testability metrics and, again, felt it was more trouble than it was worth. In 2007 I got a job on a team making a suite of Windows Forms controls. They had an in-house unit testing framework because they jumped on .NET before NUnit even existed and never had time to port thousands of tests over after it appeared. Most of the tests were bad unit tests, I'd call them more integration tests, today. But they were pretty good at catching errors in the non-UI logic, and I learned a lot about abstraction from them. A handful of people were passionate about the tests and helped mentor me, but most of them left within a year or two. In 2011 or 2012 I read Osherove's book, and it made a lot of things "click" for me about unit testing. I'd been playing with WPF and using the MVVM pattern made it a lot easier to think about writing testable code. Twitter existed and was in full swing, this helped expose me to lots of other ideas around writing testable code. I pushed really hard to try and get started auditing/reworking the tests we had, but it was that interesting time of WPF/Silverlight/HTML5 confusion so there were always bigger fish to fry. So it took several years, mostly because the information was dramatically more accessible after Twitter hit the scene and made it easier to stumble into a dozen blog articles every day. I had no mentors until then, and didn't really have the support of my managers to go off and do testability research experiments. Had I taken a different job offer post-college, I can easily see how I might STILL be writing WinForms clients without unit tests.
A lot of conferences like this release their videos for free afterwards. Usually you are paying to attend for the experience (Vegas conferences are typically awesome), social networking, and access to talk directly to experts. If you are just trying to learn, you are better off watching videos from home IMO. That time spent traveling and socializing could be dedicated to study instead.
This is spot on. Having attended a Build conference, I would say it was a great experience, but my company paid for me to go. Would I go back? Probably not. Unless you're there to talk to specific people or are trying to promote something to other attendees, it's probably not worth it. (Most people I did meet were selling something.) The only thing that would potentially make it worth the cash is that some years Microsoft gave out free items to attendees. The year before I went they gave out free laptops, and the time I went they gave us each a Windows RT tablet and a Win7 phone because at the time they were trying to encourage developers to write apps for the new platform (it didn't work). I'm not sure if they are still give away thousands of dollars of swag any more. 
I'm no threading expert so take these with many grains of salt (I did not look at your code): 1. It's not a good idea to hard-code the number of threads. It should be configurable and ideally the application should be able to tune this setting itself. That last thing is hard to do though, so consider it a "nice to have" feature rather than mandatory. 2. Threads that sit in loops defeat the entire concept of multi-threading. A thread should only be running when it needs to do something. If you have a thread pool (which you should have and most frameworks give you for free) then the cost of starting a thread should be negligible. At the very least your threads should be suspended when not doing something useful. 3. Yes. I know this sounds glib, but it's also true. Multi-threaded code is a mind fuck. Anything that can go wrong, will go wrong. And it will probably pass all your tests and then fuck you over later. 4, 5: no idea. p.s. Fun (ish) story. Many years ago when multi-core CPU's were still a new thing, I had a Web application that was randomly failing for one particular user but worked fine for me. I spent HOURS trying to duplicate the issue with no luck. Then for some reason I happened to try it on my laptop (which had 2 cores) and the issue was instantly repeatable. My development PC was a single core so it didn't have the issue. Something in IE's JavaScript implementation (I told you this was a long time ago) had some kind of bug that only occurred on true multi-threaded hardware. Multi-threading is evil. 
It's relatively old enterprise system, some parts of it are 12 y/o (which is old in .net world), some are newer. If we add independent modules we usually design something similar to microservices, which allow us to choose new technologies, but if we work on the core, we don't have that privilege. 
Yes, I mentioned it on point 4), and I've already tried it, but I'm still learning to code so I like to recreate things from scratch, as for the queue, I only enqueue from main thread and only dequeue from the thread that's using it, does that still make it thread-unsafe? And actually I like the idea of having just 1 queue now that I think about it, I will change it
Have you verified through the debugger or other means that you're properly receiving the JSON data? Are you parsing it to a format that can be handled by your GridView? Are you familiar enough with debugging to determine the point of failure? Maybe you're improperly targeting the GridView if you're certain you've got proper data. Edit: as a test, you can try simply outputting the raw JSON. As well as checking out [this](https://stackoverflow.com/questions/1212344/parse-json-in-c-sharp) on parsing JSON in C#
Yes definitely. I am cleaning it up for the sole purpose of open sourcing it
These events can be fun, but I wouldn't pay out of pocket. There are a lot of low cost options if you don't want to shell out money. Microsoft hosts a lot of regional code camp events that are free (e.g. here is the NYC one for example but they have them all over: http://codecampnyc.org/). There is also the Build Road Show events that are free. 
It's a discord chat bot, there is already plenty of documentation on discord.NET https://discord.foxbot.me/docs/api/index.html as for documentation on the bot itself... yeah maybe i should do a little Also thanks for the input, its very much appreciated
**TL;DR**: No, there are much better conferences for about the same price. If you can get into them. This will probably get pretty long... :) --- Several fellow tech leads/architects and I went to the VS Live conference in Orlando a couple years ago. We go to conferences regularly, ranging from local and regional stuff (Music City Code, Code on the Beach) to big international stuff. (Build, DevIntersection, etc.) So we know a fair bit about attending conferences. We had all signed up for a pre-conference session on Monday, then the conference ran Tuesday-Thursday, and then we all had a post-conference session on Friday. Here were some general impressions: * The pre-conference session I attended was decent, if a little heavy on the Xamarin evangelism. (The presenter was a Xamarin employee; the topic was listed as "Angular, single-page applications, and cross-platform development with Xamarin", and he covered Angular and SPA apps in the first 2 hours of an 7 hour session.) * Usually, each time slot only had one session that caught my interest. If that. * Most of the presenters were not well-known names. John Papa was there briefly, and Scott Allen gave a couple of quite good sessions. * Most of the presenters thought they were funnier than they really were. * Most of the presenters thought they knew their subject better than they actually did. * By day 3, most of the presenters were new and hadn't been around for the previous days. So every one of them started out each session by spending 20 minutes rehashing what had already been covered in previous sessions. Sometimes, the entire session was a duplicate of earlier content. * Some of the sessions were standing room only as *everyone* desperately tried to find something interesting and useful. Or, people would come and go in the middle of sessions once they figured out that they weren't getting anything out of it. (I only left one session, and that was because the presenter spent the whole time laughing at her own jokes and only talking about stuff that was tangential to her topic.) * I skipped the Friday session to drive over to Daytona for a ride-along. From what my coworkers told me, I didn't miss anything. * Ironically, the food was probably the best of (or as good as) any conference I've been to. And it was right off the Universal Orlando boardwalk. Now, here's what I'm comparing it to: The following year we went to DevIntersection Vegas. * Two excellent full-day sessions covering Typescript and Angular, with John Papa and Dan Wahlin. * Many well-known presenters such as Scott Guthrie and Scott Hanselman, the entire Angular team from Google, and the aforementioned John Papa and Dan Wahlin. At least half the talks I attended were by Microsoft or Google employees or alumni. (And Ward Bell was sitting right behind me in the Angular session with John Papa.) * Too many choices - most time slots I had to pick between 2 or 3 equally great options. * Some presenters reviewed slightly at the beginning of a session, but in most cases they'd taught the earlier session so they knew what had already been covered. * Meh food... but Vegas was only steps away. We sent a couple guys to Build this year. Unfortunately, it's really tough to get tickets at all, and then only 1 or 2.
I strongly dislike regions. If a class is large enough that regions make it better, it is probably doing too much. Sometimes a class has a good reason to be abnormally big (visitor pattern classes regularly get this way) and then I like partial class files and now in C#7 I lean on local functions. The problem with regions is that they arbitrarily divide a file up with little syntactic meaning and no semantic meaning whatsoever.
"Loading Async JSON Data"? You mean "Loading JSON Data Asynchronously", I reckon.
I agree with everything that you mention here. The reason I enjoy them is because the rest of the code doesn't mentally distract me; I can just roll-them up and jump to the area in the file where I know the item of interest exists. Cheers
.FirstOrDefault will return default(T) as opposed to null. The OP will need to be aware of that if implemented. The caller will need to check for that.
Winning.
I attended last year's Visual Studio Live and they had a drawing for a bunch of prizes. Didn't win anything, but it was on the company dime so can't complain.
That price doesn't sound right. Is that really the while cost or did you forget hotel, airfare, taxies, etc.? Conferences don't make sense unless your employer is paying for them. It's a really valuable learning opportunity if you have something very specific that you want to learn and you need to.ask the presenters questions. Otherwise, just watch the videos from home.
I went to the Vegas VS Live this year. Other than being in Vegas and getting to ask a few questions to get instant good answers it wasn't worth it.
P.S. If you join InfoQ as a part time reporter, we can often get you free press passes. That's how I keep my costs under control.
I went to the one in Vegas. It was interesting to see the sites and it was fun to network a bit, but it wasn't really worth the time for the conference itself. I'm not sure I would go again even if it was free. If I had set aside a week to just read documentation, blog posts, and instructional videos I would have learned just as much.
I have been going to build for the last couple of years, but i think it is time to try something new that is less "this is what is coming" and more this is how to utilize todays tools better. DevIntersection seems pretty good, any other good .net focused conferences you would recommend? 
No amount of testing? Not the normal brand of unit testing that you're likely to think of doing, no, but writing highly concurrent tests will tease a good deal of them out, and there are static checkers that can determine most of the pain points. Also, writing the correct kind of multi-threaded code for your use case works wonders. Shared, lockless, mutable state? You're begging for pain. Message passing? Very safe and hard to mess up.
* ASP.NET MVC / HTML / CSS / JS / JS Front End * Xamarin * WPF Pick one and learn it. Learn these: * OOP Design / SOLID * DI / IoC * Unit Testing * An integration testing framework that works with your platform choice (above) * Optimistic Concurrency / Transaction Isolation (if most of your SQL has been reporting based and non transactional) Specific to you: Make sure you aren't coming across as racist and homophobic as your comment history implies. I'm not trying to be mean here. Many dev positions are client facing and they won't let you get away with as much as most companies will let their high value data analyst get away with when they talk with staff members.
default(T) for reference types is null.
Try taking the SoloLearn class and write some code to see if you like it. C# can range from small to large apps, so the scripting background you have should translate well. If you end up wanting to do full stack development, you would want to look at Sql, html, css, and javascript as well. https://www.sololearn.com/Course/CSharp/
I've worked at a few F500 companies, I save my bigotry and racism for reddit..not the real world ;)
In my opinion, attending a conference allows you to hear what other *attendees* are doing in the industry. They're good for stimulating new ideas and you may gain a few new contacts too. Lastly, they're a good/decent experience in general -- you may be able to visit another part of the country and get away from the office... and the experience is related to your field of work. I've been to TechEd, Ignite, Anglebrackets, VS live in the past... Microsoft Ignite is probably the best and VS Live is a distant 2nd..? 
More like "less guaranteed" to mess up.
I was struggling with a disk benchmarking tool I made today, trying to get it to shutdown gracefully and close/release files safely. I used a producer/consumer pattern with BlockingCollection, but couldn't figure out why it would never shutdown. Turns out I wasn't passing my cancellation token into the GetConsumingEnumerable() method correctly. Spent three hours debugging threads just to get that working correctly.
The call is taking about 10-15 seconds, and the count for the largest one we're hitting is about 4,100 objects, but that's just a test database, the actual production dbs can have up to 50,000 user objects in some cases. The other thing we're about to implement is parallelization. The JSON response includes pagination in the headers, so we're thinking of asynchronously deserializing each page, since order doesn't matter.
According to this doc from Microsoft: https://msdn.microsoft.com/en-us/library/7y3x785f(v=vs.110).aspx, under Capacity And Count Properties.
If you have some magic bytes to represent your encoding, keep in mind to reserve a value for 'none'. Very short documents might not get benefit from compression and you can conditionally decide to compress or not based on some arbitrary document length.
Hell, they should comp you a ticket just for working though the hellhole that was MFC.
If your objects are that large then you might want to look at a more performant JSON library like Jil.
Well...yeah. JavaScript is slow compared to traditional backend languages.
The amount of work for each task is not known, therefore I would opt for one shared queue of work instead of one queue per thread. You could simply measure the length of the queue and add/remove workers depending on queue length. Be careful about adding to many threads. Maybe add two, and re-evaluate only after a second or so.. If you don't care about strict first-in-first-out fairness I would use ConcurrentBag&lt;&gt;, otherwise I would go for ConcurrentQueue&lt;&gt;
Heads up -- You are overwriting you're allocated list on the next row. In the current form, it's pure waste.
I did a similar thing to this in ASP.NET MVC 4. I don't think it was particularly hard and the only annoyance I've had was publishing the DLLs for the second site into the Areas folder which, for some reason, weren't being picked up.
I mean it makes sense. Was I able to use this information to fix the problem... no but it makes sense lol. I'm still trying to figure out how to troubleshoot this when I don't get an error. 
Simple values, go with App.config. If it get complex, you can use a sqlite database.
No obviously not, each of us will open up 4/5 vulnerabilities on purpose without telling the other which one we opened. The core of the question is not finding the vulnerability tho, it's merely the communication between two distant programs.
If you're going to primarily be searching through the items to find them on an attribute *other* than the unique key, and it's time critical, then a dictionary isn't for you. Fragmentation won't be a problem as long as you implement IDisposable correctly and where needed. And you don't have any pinned objects (like from async network calls). 
You might find this interesting: https://github.com/mcintyre321/LinqToAnything/wiki/Using-LinqToAnything-to-index-a-large-collection-using-a-hashtable 
Depending on what it is you're storing, you might consider `Settings.settings`. https://stackoverflow.com/questions/453161/best-practice-to-save-application-settings-in-a-windows-forms-application
Adding each item is an amortized O(1) operation. Adding n items is an amortized O(n) operation. You're right about how it worked, but I think you're missing the amortized part of my comment. It's not exactly O(1), but the resizing is also almost never going to be the bottleneck. Edit: This explains it well. https://stackoverflow.com/questions/15079327/amortized-complexity-in-laymans-terms
Thats quite interesting, tho I think it may be a tad overkill for this situation. Tho it is funny, part of the project I am working on does deal with csv files. The example there will definitely be handy!
Isn't metasploit supposed to find the weaknesses? I will still need to have a program executed locally on his PC to inject the code. But tbh I'm a poor hacker even though I'm a seasoned programmer. 
https://www.codeproject.com/Articles/1415/Introduction-to-TCP-client-server-in-C
Sorry, the entire method is taking that long, although it's not much more than grabbing the code and deserializing it. What I'm building is just a library of methods to retrieve data from a specific external api, to be used by the front end for all sorts of processes.
Sure, but if you are trying to optimize the difference between N and &gt;2N is still important even if they are both represented as O(n). Big O really isn't good for describing micro optimizations.
Before you start to optimize code you need to put in some basic timers or run the code through a performance analyzer. If the call to get the data is inside your method, it is almost certainly causing the majority of your delay and not the deserialization...especially if it exposes pagination and you aren't using it. Can you tell me with certainty how many milliseconds or seconds the call to grab the data without deserialization usually takes? That should be your first question.
Right, but it's still O(n). OP doesn't actually know how long the allocation and deserialization are taking. He's certainly not at the point that he should be trying to micro optimize.
Usually you use nessus or something like that for the scanning. Metasploit is for the exploitation.
1. Is this a desktop app? If not, how do you manage different users with a static? 2. You might be able to get the scope to work via MSDTC, but I doubt that's the core issue. https://stackoverflow.com/questions/2111507/informix-net-provider-and-transactionscope-not-rolling-back 3. If you are just creating stateless/pure functions, then there is no need for an instance, but if your class is holding data, it should probably not be static. 
The same issue here. Being on your phone is no excuse.
Yep, that would be my guess, too. Hopefully he takes your advice. It'll be a good learning experience for him.
He's talking about 50,000 object graphs (each has multiple sub collections of assignments, courses, and events). Being a governance database, the information *could* be quite comprehensive (e.g. if each user graph had 1,000 events that would be 50 million objects). That is why I asked him/her several times about the size and shape of the data (though I don't think he/she knows offhand based on their responses).
This is my code so far: var document = new HtmlWeb().Load(listBoxItem.ToString()); var files = document.DocumentNode.Descendants("a") .Select(a =&gt; a.GetAttributeValue("href", ".mp3")) .Where(h =&gt; h.Contains(".mp3")) .ToArray(); listbox_urls.Items.AddRange(files); &gt; I scrape the URLs from a google search and put them in the ListBox. Then I take every link and load it in HtmlWeb and start scraping URLs. The problem is that the method works but it only scrapes titles, not URLs. Any suggestions or help on how to fix this? Thanks in advance. Rewrote some of that for you. You need to give us the code where you set the values you get from a google search into the list box items. We don't know what listBoxItem.ToString() should be without seeing where it came from.
I hate that the transformations only apply at publish time, not build time.
It works for me
`volatile` does not automatically make integer fields thread-safe. If you're modifying the value from multiple threads, you still need to use synchronization with a lock or `Interlocked`.
Here's what I read: they had a solution written in Node.js; they rewrote the solution in .NET Core; it was 20x faster. It's anecdotal, sure, and Microsoft prompted them to write it, and YMMV, but they did a thing and it had a remarkable result so they've remarked on it. It's not realistic to expect them to take the time to build a representative sample that doesn't expose any of their proprietary business logic; they're running a business and have more important things to do. Anecdote of my own: I was working on a web bug that had to generate a few v4 UUIDs on every request, and using a version of Node for which the libuuid wrapper wasn't working, so I was using the fastest script-based generator I could find, but it was still too slow. A .NET Core version of the same code handled something like 40x the number of requests on the same hardware. If nothing else, it demonstrates that using the same solution for all your different problems is A Bad Thing, because there are surely things that .NET Core is not particularly good at either.
I wasn't exactly, just wondering as none of the information I found benchmarked accessing items without using the key hence my question.
If you are just trying to test your transforms, you can right click the web.config/app.config and click "preview transform." *Edit: right click on the actual transform file, not the base config*
Either app.config or a resources file is the direction I'd go. Allows you to change them in a deployed environment easily. 
Removed: Rule 3, Rule 4.
&gt; if a dictionary would help at all It could. Say one of the properties you search on is Department, with values like "Accounting", "Manufacturing", "Shipping", etc. You could use a Dictionary where the keys are each unique Department value and the value of the Dictionary is a List of the unique id's of the objects that have that Department value.. for example. "Accounting", { 27, 772, 12, 3215 } "Manufacturing", { 155, 9, 7, 1143 } You'd also have a dictionary of your objects keyed by their unique id. If you want to search for "Accounting" pull the list of id's from the first dictionary and use them to look up each object in the second dictionary. You could also have multiple dictionaries for multiple properties, look up each, and use a set intersection on the id's to get only the object id's that match every (or use union for any) matched property.
It is not a spam just my new website 
If you need fast search across different axes, have different key types and put values in different dictionaries, each with their own key type. This is the usual trading of memory usage for speed. Or at least , that's the idea :-)
Right. That's why I said "if JSON.net is a must". 
You'd just use multiple dictionaries or lookups, one for each index.
How often is searching required? Might be an idea to implement an AVL tree or something?
So it is spam then. Please read [Reddit's general guidelines for self promotion](https://www.reddit.com/wiki/selfpromotion).
You may want to check this: Cheat Sheet: Speed of Common Operations https://www.scribd.com/document/79483223/Data-Structures-Cheatsheet The cut Notes for Dictionary says "Although in-order access time is constant time, it is usually slower than other structures due to the over-head of looking up the key." For specific operations, Dictionary has better performance than List - O(1) instead of O(n). Here is the source DOC document: http://xbox.create.msdn.com/downloads/?id=123
Because you are sending the SAML assertion to them, I assume you are the "identity" provider, and they are the "service" provider? The identity provider is the one who says "this user is Bob, and he is allowed to access your system". The service provider simply decodes and validates the assertion, and logs bob in as if he had entered his username/password. So the general concept would be that you would build the SAML assertion with an attribute section containing the information the Service provider needs to identify the user. Then you digitally sign the assertion using YOUR private key. Then you encrypt the assertion using the "service provider's" public key. When you send that signed/encrypted assertion to the service provider, they can then decrypt the assertion using their private key, and they can verify it came from you using your public key. 
We had trouble getting SSH.NET working properly. Since we didn't have the bandwidth to write our own (it's a lot of work), we ended up going with Rebex which worked out pretty nicely; it only took a day to integrate the code.
Most of the important stuff was already written, just to add: WinSCP can be easily integrated and worked reliably for me in the past: https://winscp.net/eng/docs/library
Dunno that it's better than others but I recently used Rebex.
If you can afford it just buy ComponentSpace SAML2.0. It reduces all that stuff to a single line of code. Even if you can't afford it, download the demo and run the sample application, it has webforms, mvc and OWIN implementations of identity provider and consuming service provider. Load that up in studio and run both the IPD and SP, place some breakpoints in there and see how the service provider redirects the user to the IDP SSO page, a successful login sends a command to the SP assertion service, and the user is redirected back to the SP.
We use Rebex in production - it is so much better than all the other alternatives we've tried. Fully managed, and it doesn't have stupid DRM protection - also has a SFTP server that we use. https://www.rebex.net/file-transfer-pack/default.aspx
Just a few things to consider here. 1) things do go wrong. Every ten minutes means you'll be doing this more than 50000 over a year. Plan for: - what if two things try to do it at the same time? Can I tell? Will the writes get interleaved/corrupted? - what if 1,000,000 things try to do it at the same time? - what if I get disconnected halfway through? 2) size matters. What if your file ends up at 10Gb? 100Gb? 1Tb? What if your internet is slowed to 14.4kbps? The "read all lines then append a few" doesn't make sense at some point. Not all libraries support "append" reliably without transferring the whole file from server to client. 3) consider a "staging" or "work" area and just *move/copy* files into and out of it at the very beginning and end. Eg: - connect - copy file.foo work/file_uniqueid.foo - append to work/file_uniqueid.foo - move work/file_uniqueid.foo to file.foo (overwrite)
And Dictionary&lt;TKey, List&lt;TValue&gt;&gt; if the "other key" is non-unique.
Just wrote one myself with winscp. 
Spam.
I've walked into similar projects. It's a six-month fix probably, not a one-month fix. There's a lot of good advice in here, I'll repeat some of it. The first thing you should do is put together a 'State of the Project' document. In it, you want to document every 'meta' problem you see (lack of documentation, no source control, no comments, etc.). Basically use the original post in this thread as a template (avoid branding yourself as a beginning programmer, just mention that you're new to the language under discussion). This goes out in a shotgun blast to everyone appropriate at the company (e.g. Not just your immediate boss.) As part of this document, you want to give them a high-level scope of the work in front of you, which I'll discuss next. This document should also explicitly say "Hey, this isn't going to be fixed in a month. If anyone tells the customer it is going to be fixed in a month, be aware that you're lying to the customer. I will try and get this mess sorted as quickly as possible, but it's not going to be a month." Stuff You Need to Do First, get a version control system set up. This should be relatively fast. Second, get a bug tracking system set up. Ditto. Personally, I'd also drop $10 on a personal version of Jira, and start setting up small (one-week sprints). Your initial stories are going to be stuff like "Get the project to compile with no errors", "Get the project to compile with no warnings", etc. These aren't really user stories in a strict definition, but they will add some formal process to the clusterfuck. Now start filing bugs. If it isn't compiling, make a bug for every error, and for every warning. Don't fix a bug until you've created a matching entry in the bug tracking system. Do daily code check-ins that document which bugs were fixed today. Once you get the code compiling, you can start dealing with actual run-time stuff. Create a user story for stuff that is broken (e.g. "Customer wants to add someone to the database. The program should do this successfully, and not crash."). Make bugs for everything that is breaking. If the functionality is completely missing, as opposed to just breaking, all you need is the user story. Go for the low-hanging fruit first -- you will look better if you fix 20 fast bugs in the first week, rather than 1 really tricky one. This also reduces your need to grok the entire code base from the beginning. By the time you have fixed a few dozen easy ones, the hard ones will be easier to deal with. At the end of each week/sprint, do a shotgun email to everyone appropriate summing up the week, and letting them know the targets for the next week. Keep repeating this process until they either fire you and go out of business, or you get the program into a functional state. Even if the project is doomed, you come out of this with a good story to tell, and a lot of project management experience that you didn't have before. At your next interview, you will be able to explain the situation you came into, how you analyzed it, and the process you put in place to rectify it. On the other hand, if the company decides to absorb the loss of the 'fix it in a month' customer and continue on as a going concern, after a couple of months of this process (assuming that you are able to really fix stuff), you will be a fucking hero to them. Good luck, it's a challenging situation. 
EVERY SUB IS A POTENTIAL ANTI-TRUMP SUB /s
Can we get this removed plz? 
Msi has laptops with decent specs and a slimer-profile for a gaming laptop. I think you could find one within your budget to satisfy your needs but you'd need to look through their site. Edit: The only reason I mentioned MSI is because you mentioned gaming as a side-use. If you're going to get a laptop and primarily use it for programming but want to play games on the side you might as well go for something that can get the job done. Especially if you're considering spending $1200 on it. If you only care about programming, aren't making resource intensive programs and want something lightweigh with long battery life then I wouldn't consider gaming as an option. Maybe if you can get one using an AMD APU, but the intel onboard graphics are pretty terrible and have poor driver support. They'll run most games at an unsatisfactory level. Ex: You could run WoW or Diablo 3 but you'd need to make a sacrifice to get it to run at a framerate you're happy with (even around 30 to be honest) 
This, and download the first 👌
2nding. All the cli bits of the putty suite can be called individually and easily.
msi laptops have terrible battery life and ugly tn panels though
Specs aren't really that important for programming unless you want to do some heavy lifting. When you choose a laptop you want to make sure that you like the keyboard+trackpad and the screen. If you are going to move a lot then battery life is a big one too. People often hate on macbooks because theyre expensive for the specs they offer, but theyre comfy thats why people like them. 
We could afford it, but we have a contract in place with one of our clients where any third party software we use, it has to be vetted and approved by them, and that process is just too arduous. Plus, I'd like to learn what's going on with the inner workings anyways :). I'll check the demo out though. Thanks
Have a look at the Microsoft Surface Pro / Laptop / Book. Depending on how mobile you want to go, these are pretty great. I have the Pro, ultra portable and I love to work on this thing. It does not have a dedicated GPU, but the i7 has a good internal one that have no problem with D3 or WoW. Head over to r/Surface if you have more questions. There are quite some CS students that asked for advice there as well.
Yes, we are going to be sending an ID to them saying, hey, log this person in. So I'm too the point where I have the saml xml built. What terms should I look up to see examples on encrypting/signing it. Is it just like sha 256 or something for the encryption? Is it something I pick and then let them know the encryption protocol? I actually have the self signed cert portion, once again, I'm just looking for the proper google terms to get some help with that. i.e. I've got my cert here, using some previous code I had written to accept a saml request. //just assume this is the saml xml string samlXml = GetSamlRequest(); // Use this line to get a .p12 file into the Hex format. Then copy/paste the Hex into a string to store it in the source code. //string sslCertBytesInHex = Utility.BytesToHex(File.ReadAllBytes(Server.MapPath("~/app_data/ssl.p12"))); string sslCertBytesInHex = "ABigLongHexStringHere"; // This will load the cert just fine. By using "MachineKeySet", we avoid the need to use "Load User Profile"=true in the AppPool. X509Certificate2 clientCert = new X509Certificate2(); clientCert.Import(Utility.HexToBytes(sslCertBytesInHex), "1234", X509KeyStorageFlags.MachineKeySet); //not really sure where I go from here
I've used this one before and it's really nice, but I actually found a paid one that made FTP logging much easier for me. It's called Chilkat. I don't even know if it's still being actively developed (it's been around forever), but I use it at work in both C# and old VB6 code. Works great for SFTP and FTPS.
To be honest when I'm going for a performance laptop battery life isn't something I care about. If I wanted amazing battery I'd go for a macbook. and TN panel? I'm assuming you mean the screen, first time I've heard the term and all I can find related when I look it up. Not sure the experience you've had but I have zero issues with my screen, nor would I call it 'ugly'. It has decent colour reproduction and doesn't catch much glare at all. 
Macbooks are shit. 
Hmm, I can't get that sln to load, I get this error. C:\websites\SAML for .NET Core\Examples\SSO\MiddlewareExample\MiddlewareExample.csproj : error : The default XML namespace of the project must be the MSBuild XML namespace. If the project is authored in the MSBuild 2003 format, please add xmlns="http://schemas.microsoft.com/developer/msbuild/2003" to the &lt;Project&gt; element. If the project has been authored in the old 1.0 or 1.2 format, please convert it to MSBuild 2003 format. C:\websites\SAML for .NET Core\Examples\SSO\MiddlewareExample\MiddlewareExample.csproj I googled around and installed a .net core sdk for VS 2015 but that didn't help. I also tried adding that xmlns line to the &lt;project tag in the csproj but that didn't work either. Any ideas?
I would advise against the Surface Book. No denying it's sexiness, but its processor is far too weak for a decent dev experience. For double the power and less than half the cost you could get a 2015 macbook pro.
Not going to comment on your method of authentication, but in general all you need to do is query the database WHERE Username = Username and Password = Password. I'm not certain by your wording but I am thinking you are generating an Entity db connection right? using(var context = new WhateverYourDbContextIs()){ return context.TableName.FirstOrDefault(user=&gt; user.Username.Equals("username") &amp;&amp; user.Password.Equals("password")); }
Wrap the connect (open your connection) in a try/catch block and handle that.
You think its not ugly until you gaze at an amazing ips panel like the 4k xps's 15 one! 
That's what I have, and it manages all my stupidity splendidly. SQLServer Express, Anaconda (Spyder, specifically), 3 instances of Visual Studio 2015 running, and it doesn't even break a sweat.
good idea, totally forgot about that. Thanks
I'm not sure what you mean by Entity db? I have simply just used a new MySqlConnection class. Thanks
Maybe it will be `default(T) where T : IDefaultable`?
This question is confusing to a certain level. I believe I know what you are asking but I think you need to understand the tools at your disposal a little better before you jump into factories (if you don't understand methods yet!) I would recommend PluralSight for finding great tutorials. Especially for the basics. 
How do you figure double the power, and where would you get a 2015 MBP? A new MBP and Surface Book are basically the same price, but the MBP does come with a larger SSD for the base. They have almost the same processor. However, this is the C# sub, and you're going to need Windows. Why get a MBP and bootcamp (or VM) when that will cost extra? You're looking at a Windows license and software fees if going the VM route. I have the base Surface Book (i5) and I have no problem running multiple instances of VS as well as god knows how many instance of Chrome :) 
Look at the processors and google a benchmark. The Surfacebook has a really weak processor. The 2015 macbook pro, used with the i7-4770HQ runs ~$950. A processor which is double the power of the top of the line new Surfacebook i7-6600U which runs ~$2,600. https://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-4770HQ+%40+2.20GHz https://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-6600U+%40+2.60GHz Bootcamp or VMWare is still a hell of a lot cheaper with a lot more power to boot. I wanted to love the Surfacebook but it just sucks compared to the competition.
XPS13 here. Both are great builds. I like the 13 because I do a lot of my work in bed and like to be comfortable but I'd get a 15 if I were using it at work on a desk. Bonus points for how well it runs Linux and not needing a bunch of crazy proprietary drivers. 
&gt; Eh, they used to be. Now they offer pretty good performance for the cost (Atleast for Dev) Sure but then what , you install windows on it anyway to make the most out of VS? Might as well just get a windows laptop get equivalent specs on hardware for 60% of the cost of a macbook. 
You would be hard pressed to find a laptop with the equivalent of a i7-4770HQ for under the price of $950. My argument was never that it was the lowest cost option, but a better value option. I hate Macbooks, but for right now they do offer one of the best dev machines on the market at a competitive price (Compare the specs of some of the more high end Dell, Microsoft Laptops and Macbook Pros all at new pricing. I know it's surprising because Macbook pro's used to have laughable bad or slow hardware.). 
Just picked up a 1080p 14" Razer Blade. i7-7700, 16gb of RAM, GTX1060, Thunderbolt 3, in the form factor of a Macbook. Kills every game I throw at it, and hasn't even hiccuped while developing. My only complaint is that the function/secondary parts of the keys aren't backlit. So the "5" is backlit, but the "%" is just printed on the keys. But that's so minor I'm hesitant to even mention it, and I've grown to like the cleaner appearance. EDIT: NM Just saw your price range. 
The 14" Razer Blade is a solid machine with a dedicated GPU in the form factor of a MacBook/MBP.
Removed: Rule 7. &gt; content should be relatively current (that is, not terribly obsolete or outdated), and there should be sufficient content to be worthwhile to readers.
Fun fact: In GoLang the only loop is a for loop
Amazon for a used one, specifically the higher end 2015 model. The cheapest macbook pro (13 inch) runs $1,499 new. And has a I7-6660U vs the lowest end Surfacebook at $1,499 with a weaker i5-6300U.
Strange, all the 13 inch pro's I can see on https://www.apple.com/uk/shop/buy-mac/macbook-pro none of them have an I7 they are all I5. And to say get a second hand laptop for the same specs you'd get for a new one... I don't know. You're just not really selling it to me. I never suggested a surfacebook, I suggested getting a high end laptop possibly an ultrabook for the same cost. You then wouldn't have the additional hassle of changing the OS and buying a second hand laptop.
&gt;Is it possible to do something like this in reverse using the same type of dot notation? I have no idea what this means. Maybe give some examples of what you're trying to accomplish?
You might have to hold your breath a bit longer, see https://github.com/dotnet/csharplang/issues/107
this is what I have started so far. If clears up what I'm trying to ask here is about Repository Pattern Standardization 
I am using the Lenovo IdeaPad Y700. It's a $1000,- gaming laptop with a quad core I7 processor that can be over clocked and a GTX-960M with 4GB of GPU memory. Also it has 16GB of ram and a 1TB HDD and a 96GB SSD. It can handle everything you throw at it but it has some cons. The battery life is kind of depressing. 4-5 hours avarage. Also, it's heavy. Around a kilo or three. It's huge too coming in at 15,6 inch. If I could go back in time I would've gotten a XPS13 because I am not really a gamer. Yes, I do like to develop games but they're not that heavy. For video editing it is great. For screen recording it's great too. And the keyboard is really nice. The trackpad isn't. It feels like a cheap piece of plastic but you get used to it. Programming on it is great too. Visual Studio runs smooth as butter. I will give the laptop a 6,5/10. Great performance for the price but not that portable. 
You should never do that, `task.Unwrap()` was made to reduce nested tasks down to a single task.
That is working...it works already. I need to do it in reverse...I need to write a value to the token. Seems like I can using jObject[element][element][element] = "foo" but I have no idea how to dynamically size that request. None of this is set at compile time, all requests are created at runtime, so I have no idea if it's going to be a root element or something that's multiple layers down.
TN can be fine, because lots of desktop TN panels and older 1080p laptop TN panels are good, but most of today's laptop TN panels have very poor contrast and viewing angles. https://i.imgur.com/Sajajqc.jpg Not all MSI laptops are low quality TN, but MSI/Dell/ASUS have a fairly disproportionate number of them in higher-priced laptops with what are IMO too poor quality displays for the price. These N-series models seem to be using IPS 1920x1080 displays though. 72% NTSC color gamut rather than 45% NTSC, too, which is nice.
If you deserialize it to a dynamic you should be able to do assignments/add properties etc. at runtime. var foo = JsonConvert.DeserializeObject&lt;dynamic&gt;(json); foo.clients[1].Name = "Bar"; foo.clients.Add(new { blah blah blah }); Edit -- Oh you probably want to be able to do something like foo[whatever][1][someField] = "asdf"; Probably use a dictionary like in this example https://stackoverflow.com/questions/32603113/c-sharp-adding-objects-dynamically-adding-dynamic-property-names
No dynamics in 3.5 compact. EDIT: Yeah...that's what I want to do, but I need to be able to dynamically size that request...I'm not sure how to do that without a bunch of switch cases. 
Fair enough. Here's the model I have I believe (they have too many and I'm just looking quickly) https://us.msi.com/Laptop/GE72-Apache-Pro-GTX-970M#hero-overview The contrast on the monitor is absolutely fine for me and the viewing angles aren't an issue. Obviously if you go too far of an angle the screen gets a little 'dark' but it doesn't distort the image in anyway. Honestly by that angle you wouldn't be able to see anything properly just because of the amount of screen you could properly see. It doesn't say the specific part used for the screen though.
Indeed, Couple of virtual machines, Visual studio, Firefox and Warcraft all running together doesn't seem to present it any problems, I bumped mine to 32GB but even under that load it doesn't need that much. I went for the 512gb SSD and it turns out if you don't have a 2.5" drive they put a bigger battery in... Which was a great bonus.
Linux on these is a doddle. I run Win 10 now but have switched it to linux a few times and it's been very easy. I was looking at the 13 for a while but for reasons I forget exactly the 15 was my machine of choice. I think partly for the nvidia gfx and partly just a bigger screen.
Thanks for the kind words of encouragement
He is suggesting to use a stored procedure to check the password because he is assuming the OP is talking about a desktop application that connects directly to a database and will be used by end users. That is, there is no server side application verifying the client actions. In web applications where you have a server component it is perfectly fine to use application code to verify the user credentials (often necessary, since your web server will usually set a client session and handle other parts of the login logic).
Thanks! Incidentally, I just edited my post not knowing you responded with the same information.
oh well there we go haha.
I'm surprised that VS 2017 doesn't offer to convert from the verbose csproj to the new compact one. 
I haven't read it myself, but it seems like this is the reigning book on software architecture: Rozanski and Woods, *Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives* Other perennially popular books are *Code Complete* (McConnell), *Clean Code* (Martin) and *The Pragmatic Programmer* (Hunt and Thomas). I'd say they are more focused on general style and approach, but they are appropriate for your stage of development as a programmer. 
Definitely surprised me too. Although it is quite rewarding to trim the fat by hand
I'm pretty sure you can assign anonymous typed objects to variable of type `object`?
But then you can't do `obj.Property`. You get a compiler error.
I didn't say anything.
Removed: Rule 4. Make an attempt. And if you have a specific problem about your attempt, then post the _relevant_ code (not _all_ the code) to the problem, what you tried and what did/didn't work.
I recommend thinking of a personal project. Something that interests you and would be useful. 99% of what I do right now is building tools to make my job easier. Over time these tools have become more elaborate and complex. A while back I built a log file analyzer and framework. It tokenizes the log files based on some regexs, and enables fun functions like getting a list of all application start and stop times, or all crash timestamps, and the ability to export everything between two timestamps. The need to be able to use this tool on multiple applications with different log formats led to specific design choices/changes to make it adaptable to just about anything. Think of something you could use for work or hobby, and just go to town.
 var obj = new { name = "test user", email = "test@example.com", details = new { dob = new DateTime(1980,1,1), addr = "123 main st" } } var json = JsonConvert.SerializeObject(obj);
I've been using the Surface Book as my daily driver for web development for a year now and am really pleased with it. Visual Studio is a pig that will team up with Resharper to make your battery miserable, but that's nothing to do with the laptop itself.
Depends upon how you are distributing the app. When we still used Windows Installer, we had the installer handle it. Now that I use my own custom installer, I distribute the fonts in the main zip file, and use FontReg.exe to install them. If you don't want to install the font on the users machine, there's this (but you still have to get the font to the users machine with your exe): https://stackoverflow.com/questions/3007805/embedding-deploying-custom-font-in-net-app/3008351 
Not quite. Compiling takes an input and transforms it into another (typically lower level) language. Lowering has the same language in input as output. 
Did you set hasPlayed to true? edit: also, 21:00 is 9pm ;)
I'm not sure what do you mean.. It looks like this mate. if (DateTime.Now.ToShortTimeString() == "21:00" &amp;&amp; !hasPlayed) { bell.controls.play(); } if (DateTime.Now.ToShortTimeString() == "20:59" &amp;&amp; hasPlayed) { hasPlayed = false;
Yeah, I'm only using VS Code right now. I was using SharpDevelop, but they haven't (and I worry might never) update to C#6 and later. So I ended up finding this article in my quest to migrate to using VS Code + .NET Core.
Right, but it that first if statement, you never set hasPlayed to true, so it never thinks it has played (or something like that maybe, I need to sleep) 
Thanks, I was (still am) too tired to actually write code for this :v
No, I'm not limited to creating the project over ssh, so I'll definitely look at these links. Thanks very much.
`var` is useful for that, yes. But 9 times out of 10 it's an convenient alias for `int`, `string` or e.g. `IDictionary&lt;string, &lt;List&lt;Order&gt;&gt;&gt;`
Even tho it's not the new hot thing, Prism is pretty cool and used in a lot of enterprise apps
&gt; keep holding my breath that they're going to finally add code rewriting as a language feature... That would be cool, but somehow I don't think that it's in keeping with what the designers intend for the language. With great power comes great responsibility etc.
ReactiveUI isn't a framework, but it it definitely the way to go with WPF. You'll make a lot of mistakes in the beginning, but it pays off in the end.
I'd check the licensing on those fonts too. Very good chance that's something you can't do
To me, mvvmlight strikes the right balance. If you're doing wpf, you can take full advantage of design-time data in xaml, which is helped by the way mvvmlight sets up its vms.
Ok good try with the non .net core examples. I can help you with those but not the core ones.
I learned sort of the opposite way. I barely read a full book on the topic before I was already pretty decent (though lacking somewhat in a few obvious areas). Nothing beats learning by doing, preferably on a project or projects that keep you *highly* motivated. As long as you are constantly curious and critiquing your own code, standards, and what you think you know. For instance, I worked on a multiplayer 2D game with one other guy for ~7 years (off and on) where I learned a good chunk of what I know today. This is a bit all over the place, but perhaps youll get something from it. I'm only 31, but for awhile now I have seen a distinct lack of knowledge of basic computing and the lower levels that I think prevent people from becoming good programmers. Luckily when I started learning in my very early teens I dabbled with basically everything and learned quite a bit that, I think, has given me a much bigger advantage over most people entering the industry, but not sure how best you would about it with a plan (besides college/courses and what not). Some of those that I think are helpful to have at least a basic or decent understanding of: memory, bits/bytes, binary/hex, program image layout, assembly and how it is compiled from code or to byte code, how it translates to bytes, and how it is executed by the CPU, operating systems, network stack/sockets/packets/client-server models, the hardware, how most of that works together/acts when executing a program, debugging/disassembling other programs, and more I'm sure. Those are just some of the building blocks / foundations of course. I didn't master 8086 assembly or anything, I don't think I actually ever wrote a full program in it from scratch, but enough to know how to for example "crack" simpler software protection mechanisms by NOP'in certain instructions, reversing jumps, and some other basic methods, and how high level code gets translated into it and how that can affect things like performance, JIT'in, etc. Another motivating factor for me back then was cheating by altering another programs memory, altering the instructions in the binaries, or hooking into and replacing its code (mostly for the fun of learning/programming it).
Why would you avoid EF? It works very well
What if name is var or a string? Am I supposed to use a parsing function?
 using System; public class Program { public static void Main() { var name = Console.ReadLine(); // ReadLine returns a string, so name is a string Console.WriteLine("name is " + name); var age = Console.ReadLine(); // ReadLine returns a string, so age is a string var age2 = int.Parse(age); // int.Parse() returns a int, so age2 is a int var age3 = age2.ToString(); // ToString() returns a string, so age3 is a string Console.WriteLine("age2 is " + age); // int.Parse() expects a well int-formated string. Dont give it "12a" for example // var is just an alias over a type. At compile time, var is replaced with the correct type: string, int, etc. } }
First of all 'var' isn't actauly a type. It's a keyword in C# which means we should infer the type of a variable based on the assignment. so for &gt; var num = 1; var is actually an int since 1 is an int And for &gt; var name = Console.ReadLine(); var is string an string since the method Console.ReadLine() returns a string. Which leads me to your question. Generally speaking, Parse methods in the primitve types (i.e. int, double, float etc) are used to turn strings into the respective type (double.parse to double, int.parse to int...) Since Console.ReadLine returns the user's input as a string, parsing is important if you intended the user to provide a number. In the 'name' case, you already got the name the user entered as a string and there's no need to parse it.
var isn't a type, it's just syntactic sugar. C# does lowering, where it determines at compile time what type of variable the other side of the equation represents. This is why you can't just declare "var x;" you have to initialize it with some value that the compiler can infer the type from.
&gt; Console.ReadLine returns the user's input as a string That explains why we parse it. I see now. Thank you! (and of course to everybody else that added some clarification) 
What are you looking for? What problem is the framework trying to solve? For example, if you want validation or IRevertableChangeTracking and IEditableObject support, Tortuga.Sails is your best bet. Sails also has a lot of helpful value converters, but not much else.
What are you using for an IDE? Dont tell me youre using VS9/10 whatever that is, or not VS at all? Unit tests arent difficult with C#? They can certainly be tricky to learn how to setup/configure at first / sometimes though ill grant you. NUnit is nice, but you can also just use regular old MSTest. They are easily interchanged though, but not without changes.
What if you need change tracking in your models? Maybe even a second level of undo for dialog windows with a cancel button? A good MVVM Framework like Sails will give that to you. (In addition to property change notifications.) 
Care to show done actual examples of the horrific queries generated from a recent version? We output all queries to the console (simple one liner) when debugging and the queries are well optimized. You can send it plain SQL just like you *have to* with dapper. Edit: auto correct fixes Also if you do a select() and only tell it a few fields it will only select those fields. I think most people who bash EF haven't used it in years and used it ibcorrectly (eg tolist() before filtering or selecting subset of data)
I'm on mobile ATM so just two quick points. 1. Parse is used when converting FROM string TO another type. This is why String.Parse doesn't exist, because you wouldn't need to covert string into string. 2. The easiest way to explain how var works is that it yields the assignment of the data type to the right hand side of the assignment operator. If it's not clear to the compiler given that information, then you can't use var. I would recommend reading up on the var keyword. I think it would answer most of your questions.
Ah, I figured it was something like that once I got into the code, should have waited til I did lol.
I use the PropertyChanged add-in for Fody to deal with property changed notifications. It injects the events into every property at compile time so you never need to raise the event in your code.
To be honest I heard about it and tried to find a decent tutorial, but failed. Can you give an example of one for a newb please?
Thank you!
Ladies and Gents, OP here to say thank you for everybody who spent some time to share their opinion with me. As basically everybody is on the same opinion, I hope you don't mind if I reply in this comment to all of you. It seems the only way to be a better programmer is to go through a million project, no materials will teach me that. Thanks again for everyone
Also if new @ C#, post your questions on StackOverflow, not reddit :) You have a better chance of fast and relevant answers In other words: Reddit != StackOverflow Edit: Clarification. Than you /u/dotted
Yeah a you've got to read the docs unfortunately. If you go at it naively it's really easy to generate N+1s. I'd still be interested in seeing any actual EF queries you had trouble with, my guess is it's a result of not understanding the tool.
There is no rule against asking for help.
Nor did I say there was one. 
~~Then your post is pointless~~ Your edit makes it more appropiate
I've been at it since 1983 and this is sound advice. I am much more likely to hire someone that can show me his side projects. I'll also add find a first job where you can work under someone that's a good mentor and a great programmer. Don't worry about salary your first job but find a place that you can learn.
Due to return types. The return type of the ReadLine method is a string. The Parse method is polymorphic, in that it's defined multiple times with parameters of different data types, one of which is string, with a return value of type double. That is to say: Var in the second statement will become of type string because the return type from the ReadLine method is string. But in the first statement, var evaluates to the return type of the Parse method (double)
To add to what you said; "var" is synaptic sugar (aka "lowering") for a type evaluated at runtime, not compile time. You can use "dynamic" explicitly as your data type to avoid static type checking. I haven't read anything specifically, but I suspect it's now recommended (since the introduction of "dynamic" in C# 4) that you use dynamic over var (and object+boxing to keep static checking) for production code. If you have any corrections, please let me know; I'm trying to bone up on my C# (studied it years ago, but got a job as a Systems Engineer and my team uses PowerShell exclusively, so I couldn't use C#), it's atrophied quite a bit. But I'm being loaned on a stretch assignment to one of our dev teams since they need help and I know C#. EDIT: ok guys, I feel I need to clarify my meaning a bit because I think a few of you misunderstood my meaning on one specific point. My fault, I'm sure. But IIRC dynamic is used if you have no way of determining the type at compile time, at which point you should implement your own type checking in source, but you want it to compile. The OBJECT data type would be used to retain compile time checking. And I'd inferred from my intro programming classes that var was only used until we understood datatypes; effectively only using it for quick spikes or as a cheat for language training before the concept of data types has been introduced. As for my saying "runtime type evaluation", I actually meant "runtime type ASSIGNMENT" (little difference, I know), which is of course still wrong since syntactically (IIRC), Roslyn uses method calls and return types at compile time to determine the type and correct memory allocation (don't want to screw up that SBI, after all...well, if it's a reference type of course. Value types of course sit on the stack and, at least I don't think...value types don't have an SBI...). I'd inferred that there may still be very specific circumstances to use dynamic, especially when implementing multiple user defined types, like byte streams being returned from a network interface. I will admit that it may have been merely bad design on my part; but I'd run into this issue if I were unable to determine if returned value from a network connection was a specific protocol (for instance, ASN1) and I wanted to pass that to a constructor of the correct protocol, with the only thing to rely on being a byte stream that contained a very specific byte value at a very specific cell. Or even one of several values at the beginning. Take LDAP, and its use of ASN1 for example, the leading byte value COULD indicate if it's a compounded BER term, being boolean AND or OR (ever wonder why, in LDAP, there is a "conjoining" boolean operator combining terms? Because that's how Abstract Syntax Notation One [and specifically the BER encoding format] is structured) As always, if I'm STILL completely off base, please let me know. I don't want to look like I'm an idiot the first day on the new team; would rather I look like an idiot now :)
*syntactic sugar Although synaptic sugar sounds incredible. Though it may just be another term for Cocaine... :D
I should probably learn what the hell that is then.
This is true. 5 &amp; 6 are still both very good choices for new projects
I'm looking at Prism at the moment, and I still can't find any example of working with different dialog views / passing parameters between them. In official documentation I searched for words "dialog" and "modal", both not found. Can you point me on such a thing?
Lowering is the process the compiler does to turn complex syntax into simpler syntax. Not really a direct equivalence to syntactic sugar. Although there are similarities between var and dynamic in use, what is happening behind the scenes is vastly different. It's *not* recommended to use dynamic in place of var, and doing so will effectively make it so you're no longer use compile time type checking. There are use cases where dynamic is useful, when you might not know the shape of data you're consuming apriori, for instance, but in the general case, don't use dynamic without fully educating yourself on dynamic. This isn't a 'oh it'll improve over time' situation, the intent of dynamic is completely different.
I implemented my own inheriting from the standard WPF Interactivity namespace. I forget exactly what interface or base class I used. I found an example that inspired it in either the Prism 4 documentation or Prism 5 documentation tl;dr Search for Interactivity
yeah you've been out of the game for a while.. var is compile time + statically typed. dynamic should only be used for interop stuff and never in place of something with an actual type 
Look it up, real term :) Just found out recently from another Reddit thread that it's actually called "lowering." EDIT: ohhhh...shit. I sometimes read things too fast (and have tigers to big for my little smartphone). I didn't realize you were correcting my spelling; obviously (obvious to me) auto-correct changed syntactic to synaptic....now I get the joke about cocaine...only took me an hour.
I believe there is a working interactive dialog in Prism. I only implemented myself because it was going into a shared library and I didn't want to make all the clients of the library dependent on Prism Edit: this is what I was thinking of https://msdn.microsoft.com/en-us/library/ff921081(v=pandp.40).aspx Edit edit: can't figure link out. Google prism interactivity quickstart
So I've tried a lot of MVVM frameworks/libraries, and ReactiveUI is imo by far the most elegant way to write WPF apps. But the learning curve is probably the steepest, compared to others. To really "get" it, and be able to use ReactiveUI to its fullest potential, you'll want to take a look at the fundamentals of (functional) reactive programming. The talks linked in the Introduction section of ReactiveUI's readme are all very good. Once you get the hang of it, you really can't look back. ReactiveUI is based on the Reactive Extensions which exist for [a bunch of languages](http://reactivex.io/languages.html), so that programming paradigm certainly isn't only applicable to either front-end or C# applications.
I do have the GoF pattern book but there's so many which ones should I focus on? I heard that dependency injection is a biggie for decoupling and abstract factory for....something? Do you know any good example applications I should look at on github or something accessible?
This post would never do well on SO. SO has higher standards for post quality, which also tends to make it hard for beginners. 
Actually in the Reddit comments on that article, the author(?) gets corrected on that
Oh, understood. I hadn't read that and I'll stop repeating it.
Another place they leaked was their EventToCommand style binding. The stupid thing was that it wasn't the event hook that leaked, but an unnecessary CanExecuteChanged handler. I had a Silverlight app leaking hundreds of MB of memory over 20 minutes from that alone. 
I like it! But how will it work with EF?
Same here. Much easier than fighting the big ones. Plus you have total control and creativity. I'd just mention here that Fody.PropertyChanged helps a lot (with any MVVM) reducing code bloat with auto implementation of INotifyProprtyChanged. 
You need to create a new c#.net console application, windows forms or WPF app in visual studio, also the answer is 2. That's really basic, if you're trying to learn programming start at the very beginning.
I appreciate your help buddy, all I've got to work with currently is visual studio.
No. What you can do is have this "enum" as an actual table with the entries as rows, then use relationships. Otherwise you can wrap an int ID property to access this enum under the hood, but that's very cumbersome and error prone. You can't make EF store an arbitrary type like this into an int column.
The latest edition of this book will be released on August 25, 2017. https://www.amazon.com/dp/1491987650/_encoding=UTF8?coliid=IFRETBPWLFYRO&amp;colid=11QVEMNY6RZ6
Think I would prefer a custom serializer/deserializer ([doc](http://www.newtonsoft.com/json/help/html/CustomJsonConverter.htm) ). You should be able to make it work with attributes as others have stated but I'm not a fan of decorating base models like that (really is up to the implementation in my mind to dictate that info). What happens if you implement another service call that fills the same model but returns the data in a slightly different structure? To be fair, I'm a little biased towards hating serialization decorators from xml serialization days. Would end up with classes where 75% of the lines were serialization attributes or instructions....just seemed dirty and wrong. 
What class is `bell`?
Generics would be something like this: public function T Generic&lt;T&gt;(T genericO) { return (T) genericO; } var test = Generic&lt;TestO&gt;(new TestO()); As opposed to TestO test = Generic&lt;TestO&gt;(new TestO()); This would infer the type of test as TestO via a function that utilizes generics. 
EF is very little extensible, unfortunately. Requests to improve this have been made for years already.
There's no need for any kind of attribute to deserialize the data structure.
Thank you very much. That worked - it was a real d'oh moment when I saw it.. I literally exclaimed "Of course! I'm an idiot". Of course everything looks obvious after you know the answer :) 
Tests prove it works
I really don't want to waste time writing tests for boilerplate code.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [sethrudesill/directionless/.../**Direction.cs** (master → 00d9ec9)](https://github.com/sethrudesill/directionless/blob/00d9ec973f975ba8bb7b56c9ebca7569cdeb87c1/source/Direction.cs) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply di59qhu.)^.
Kind of.
I can make it work with EF using T4 templating. I'd be happy to work with you on this. PM me.
It would still only take a dozen lines or so as an actual enum. What benefit do you see yourself getting here? 
How much experience would you say you have with Entity Framework? Which version(s)? How many years? How much data? Model-first? Code-first? Seems like you're pretty lazy overall since you "don't want to waste time writing tests" lol
Looking at what your "tests" do, the time is going to be dominated by Output because you're doing a writeline each iteration. All those numbers tell you is you've got a simpler ToString implementation than System.Enum
By heavily reducing readability.
I updated the performance "tests" and the Enum Pattern is still faster by over 50%: * Switch/Casting System.Enum took 00:00:01.4895377 * Casting/Parsing System.Enum took 00:00:01.4113025 * Static Dictionary Lookups using System.Enum took 00:00:01.0303442 * Enum Pattern took 00:00:00.4332373
For doing performance tests you should really use BenchmarkDotNet instead. https://github.com/dotnet/BenchmarkDotNet
Actually, it's measuring the time it takes to look up the "inverse" of a direction and it was only running 100,000 times. I've updated it to 1,000,000 and here are the results: * Switch/Casting System.Enum took 00:00:16.3700644 * Casting/Parsing System.Enum took 00:00:15.6769965 * Static Dictionary Lookups using System.Enum took 00:00:13.8439932 * Enum Pattern took 00:00:04.2284749
Thanks. I'll update the code today.
Look at your code. Every single iteration of the first two tests calls Enum.Parse 16 times and implicitly calls Enum.ToString 16 times. Test 3 is a little better, but still calls Enum.ToString and Enum.GetHashCode 16 times per iteration. You need to remove all to actually measure the thing you claim to be interested in. Here's how I would implement test 3: Console.WriteLine("System.Enum"); staticDictionaryStopwatch.Start(); for (int i = 0; i &lt; iterations; i++) foreach (var direction in AllDirectionTypes) DirectionTypes inverse = AllDirectionTypesInversed[(int)direction]; staticDictionaryStopwatch.Stop(); And use an array for AllDirectionTypesInversed, not a Dictionary.
This was very kind of you, thanks!
I agree, I am missing the point of var. like I said, I didn't see a point to use it after I learned about datatypes. Except maybe out of laziness. But this is beside the point; I was wrong on when to use dynamic and that it could be considered a replacement for var. Really, I was wrong about a lot of things.
I prefer Unity myself. That said, I believe Visual Studio itself uses MEF. I forget what the real benefit it has over Unity is, but there is a nice comparison somewhere in the Prism docs
Sounds to me like an school assignment... Why not create an endpoint on the Website where you can make a REST call to update the number. You can there check if its valid to increment. This eliminates the use of "app2" entirely. Depending how long you need to keep the number you have different ways to store: * In memory (If loss of information on restart isn't bad) * In database (If you need to make sure you don't encounter any race condition and need save the number on disk) * In txt file (Quick and dirty and race conditions aren't an issue) I personally would choose method 1 or 2.
It's not a school assignment. I wanna do anonymous usage statistics on a app I made, and the website I'm using is a github Page (README and the GitHub pages page), that's the problem. I can't post to github with my app that other people use. So I'll need app2.
What you're describing is a framework. The most common way of distributing a framework is with DLLs. You can even separate your framework in separate independent parts, and make multiple DLLs, making it easier to update one without recompiling a whole project. You can use a root namespace ("YourCompanyName" for example), but each independent part should have its own sub-namespace ("YourCompanyName.Graphics.Engine"), as to avoid confusion.
My advice would be to split out the "shared" functions that would occur throughout multiple projects into a new library project. You could use a project reference to it at first, and then, as your application evolves and your shared functions become more stable, break the reference and instead build a [NuGet package](https://docs.microsoft.com/en-us/nuget/create-packages/overview-and-workflow), which you can host on your own local servers.
Trending on GitHub: https://github.com/trending But if you're looking for something to contribute to: http://up-for-grabs.net
You could use Azure (If I'm not mistaken you can host a website for free as long you don't need many resources) Azure makes it really easy to use once you set up an account. You can do everything directly from visual studio (release and deployment). You could then either display the number on the Azure app or make on the app2 one endpoint to increase the counter(and validate) and one endpoint to get the cointer info, which then could be displayed on the github page. You have then a choice to link your github page in your readme or link your web app.
https://github.com/trending/c%23 for (only) trending c# repos
You need to take a peak at value types on the stack vs typical reference types on the heap. Also, boxing, if you aren't familiar. int is a value type in most cases, but C# also has the object derived version Integer. 
I'm aware of boxing, but I appreciate the mention :) So value type is stored on stack and ref is stored on heap? If so I still don't see why int is stored on stack, is it a struct or something because I thought all classes were stored on the heap?
You don't want to treat your value objects as a reference otherwise 1==1 would evaluate to false.
I believe your starting point should be a method inside the first class that allows a user to edit the list. Such as adding an object , or range of objects to the list or removing a single object or range of objects.
I believe the correct statement would be everything can be cast to an object, instead of everything is an object
[GitHunt Dark](https://chrome.google.com/webstore/detail/githunt-dark/eaholbmncablicmnmlpngnhhgpkfcjfa?hl=en) new tab page and /r/coolgithubprojects/
The statement: "value types are stored on the stack and reference types are stored on the heap" is incorrect. Where they are stored depends on many factors. For example where do you think a value type that is closed over local variable of a lambda or anonymous method is stored? Or how about a value type which is inside an iterator block? Or what if your variable ends up on the register? It is important to note that where they are stored is purely an implementation detail as none of this is actually a language requirement. It is much better however to think of it this way: * There are three kinds of storage locations: **stack** locations, **heap** locations, and **registers**. * Long-lived storage locations are always heap locations. * Short-lived storage locations are always stack locations or registers. * There are some situations in which it is difficult for the compiler or runtime to determine whether a particular storage location is short-lived or long-lived. In those cases, the prudent decision is to treat them as long-lived. In particular, the storage locations of instances of reference types are always treated as though they are long-lived, even if they are provably short-lived. Therefore they always go on the heap. Credit goes to Eric Lippert: https://blogs.msdn.microsoft.com/ericlippert/2010/09/30/the-truth-about-value-types/
int is a synonym for System.Int32, which is a struct. The stack is relevant to method parameters and local variables, so in that context, you are correct that an int is stored on the stack. An int field in a class is different, since all data for a class stored on the heap. This is all nice to know, but where the data lives has less consequence to most programs compared with copy and argument passing semantics. That is what you need to master.
Thanks 
Thanks 
No real problems, if you're checking in to a common source control. Only potential downside is if you split up - who owns what code? 
Not *every* type inherits from `System.Object`. [There's pointer types, interfaces, and type parameter types](https://blogs.msdn.microsoft.com/ericlippert/2009/08/06/not-everything-derives-from-object/).
while I do appreciate your attempt at helping, please bare in mind that I've only been using visual studio for a mere 2-3 hours, and have absolutely no idea how to go about this.
Alrighty, a couple more hints: - You've got a textbox control named `classATickets`. But you've also declared a `decimal` field with the same name at the top of the `Form1` class. You can't do that (compiler error). - Read the compiler output to find errors in your code. - Right now you're trying to calculate the ticket totals as class-level fields. This means the calculation will never be correct because it would be executed once when the `Form1` class is constructed. Calculate the totals in `calcRevenue_Click()` method. For example: private void calcRevenue_Click(object sender, EventArgs e) { decimal classATotal = decimal.Parse(classATickets.Text) * classAConversion; ... the rest of the calculations }
Classes are reference type, they're on the heap. Instead of reinventing the wheel let me just point you towards Jon Skeets blog on the topic: http://www.yoda.arachsys.com/csharp/memory.html
Check out codewars.com and projecteuler.net for some good programming practice. I'm not sure what the best way to learn monogame is but as for the core C# language features I would suggest learncs.org and the official documentation https://msdn.microsoft.com/en-us/library/aa288436(v=vs.71).aspx
&gt; What decides if a class is value type or reference type? This guy does. https://en.wikipedia.org/wiki/Anders_Hejlsberg (plus a large team of talented architects) Seriously though - it was a fundamental decision that was made for 1.0 that would save memory and increase performance (since the runtime didn't have to dereference a pointer for every single object access). 
Boy this has a lot of upvotes, but it seems somewhat misleading. Maybe I'm missing the subtlety here, but classes are Types. I don't think that's what Op was referring to. I think he wanted to know about instances of types...instantiated types. These are objects, and they exist on the heap. Yes the pointers to their location can exist on the stack...IF they were created on the stack. If they were created on the heap, those references too exist on the heap. In general as a C# developer none of this matters because the GC handles your memory, and you let it do its thing unless you're referencing COM objects and need to start caring about external memory allocation. Even then the built in Using statements will handle the vast majority of cleanup (DON'T write your own finalizer unless you're damn sure you need one). I HAVE on .NET WPF UIs with a lot of objects seen profiling instances where understanding what was on the stack and what was on the heap made a difference to the generation of object that my stuff was being GC'ed by .NET, but that's really the exception. Take the UI out of it and create a few thousand objects per second in a high performance algorithm and you wont notice the difference. On the other hand...Understanding what value types are in .NET vs object types and how they get pointed to is good to know as a dev. Not looking into this would be a bad sign as a developer. Long ramble...enjoy the investigation, I know I did when I started writing C#. 
I'm on mobile so I can't view the links, but isn't passing a pointer to a class by definition pass by reference? A pointer is a reference to a memory location as you said. Right now I'm thinking about it in terms of C. Passing a struct is pass by value and passing a pointer to the struct is pass by reference. If C# is passing the pointer to a class, how is that not pass by reference? Does the language do something differently? 
Oh of course it's Eric Lippert. When will the guy just let me have my misconceptions about .NET in peace?
A pointer is essentially an int/long and you are passing that by value. If you assign it to something else it changes what the parameter points to; but not what the callers version points to. If you pass by ref you would also change what the callers version points to. (e.g. passing address of pointer or pointer to pointer)
Line 56. classAtotal + classBtotal +classCtotal And as Nugsly mentioned move your calculations after you do your parse
&gt; How can I call (execute) the promptForInput method from the Main method in the following code? something like this: https://pastebin.com/0fx6ZHnB But why are you passing the response to promptForInput? You don't do anything with it before assigning it to the input response from player. So i'd say drop the parameter and just do... return Convert.ToInt32(Console.ReadLine()); instead of int firstPlayer = Convert.ToInt32(Console.ReadLine()); response = firstPlayer; return response; Keep in mind if the value entered by the player isn't a number you're going to have a exception thrown by Convert.ToInt32 method. 
Just played around with it in C and I see what you're saying. I'm a CS major and was taught pointers in C were pass-by-reference but I had never tried changing the pointer so thanks for *pointing* that out to me :)
you're welcome, happy programming!
One last question if you dont mind. How can I verify that the user input an int which was assigned to the int player1Response? I currently have if (player1Response == "") { MessageBox.Show("You forgot to make a choice!"); Environment.Exit(0); } I understand this wont work as I am mixing an int and a string. Any suggestions?
Removed: Rule 4.
This is exactly what my post said, just in far more simple terms excluding my mentioning of the stack. I said that you can manipulate the object itself, by accessing the pointer that was passed (by value). But you cannot use the assignment operator to change the value of variable that was passed - you have to pass by reference for that. Read those links i put in my post as well.
Maybe this is what he was referring to; if that is the case, then my bad for misinterpreting his post. But since he brought up int and compared it to Java's int, and he didnt quite go into too much detail, and I also was confused about this same topic when I was a wee lad, i figured this might be what would help answer his question. Hopefully it has. EDIT: For clarification on some terms. You said `value types ... vs object types` and I thought it was important to note that in C#, value types *are* objects. I think you meant `value types ... vs reference types`. Sorry for cherry picking, just wanted to point that out.
As someone still early in his programming hobby, every time I dip into the ref vs value thing I just never seem to really get the big picture, then I put off learning it, forget what I've sort of learned, and then repeat. lol
Im also a noob, but im guessing an idiotic " (player1Response != 1 || 2 || 3) ..." Edit: just got it, first check the one you wrote, and then convert.toint32 if the response wasnt a ""
Removed: Rule 4. The code link you posted is invalid. Assuming you're using a `ListBox`, or similar, there should be a property along the lines of `SelectedValue`. You can use that to see what item the user picked. You can then use some basic `if/else` blocks to choose the applicable conversion factor.
Just to add to this, you can declare the *success* variable within TryParse now, since C# 7. E.g. *Int32.TryParse(Console.ReadLine(), out int success)*. Good to know but for now I say stick to the example, as this may confuse your understanding of scopes.
I've just realised that following your code I made a bit of a mistake. The "out" parameter for TryParse isn't the bool, it's the int. TryParse returns the bool. Should be more like: { bool success = Int32.TryParse(Console.ReadLine(), out int value); } But anyway, I should mention the scope of *value* then. If you do it the new way, *value* is scoped to the same level as TryParse.
According to the great Eric Lippert the answer to why value types are not reference types is - because they can. Value types are an optimization. Technically value types derive from System.ValueType (which derives from System.Object) and this is how the runtime tells them apart but some programmer somewhere declares what is value type (by declaring struct) and what is a reference type (by declaring a class)
google "cat like coding" and take a few university level math classes (or khan academy... ) 
You're probably being downvoted because [Java is to Javascript as Car is to Carpet](https://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java).
Note that strings are not interned by default, so in general they will never be.
&gt; The more tags you have in your repository, the more likely it is that some of the images should be in another repository. This is something that we are discussing, including with Docker. We’d like to split the .NET Core repository into two or three repositories to make it easier to use. Unfortunately, there are no good mechanisms to discover other related repositories. We’re hoping this gets fixed to enable us more freedom around repository factoring. Can someone eli5 please? 
Removed: Rule 3, Rule 4.
Passing everything by reference would be stupidly slow, not just because of all the pointer hopping, but also because every primitive would have to be heap allocated and garbage collected. Unlike a few languages, C# is designed to still make it possible to write fast code.
What exactly do you want to do? I assume you have a web app and the text to scan comes from your backend? If yes, depending on your special use case, you could either write some JavaScript to parse the text and notify the user - or do that stuff already on the backend and transfer a notification data thing to the client. Depends on your exact use case. Tell me more :)
Sure you can: class Program { static void Main(string[] args) { Junk j = new Junk {Something = "1", SomethingElse = 2}; MakeMess(ref j); Console.WriteLine(j.SomethingElse); } private static void MakeMess(ref Junk junk) { junk = null; } class Junk { public String Something { get; set; } public int SomethingElse { get; set; } } }
first thing that comes to mind : Screengrab &amp; ocr . Is failproof but also the worst way to do it. 
There is no difference between that and just writing `j = null`, and it doesn't destroy/free the object, it just clears the reference so that it may be garbage collected at some point. After you cleared the reference you can't call `Equals` on the instance anymore, so it has no bearing on OP's concern.
Take a look at web scraping. This is what you basically want to do. Scrape a webpage for B2 and get notified in some way.
I will look into that, thanks!
Stop doing what? What site? "Inbox"? Can you give me a scenario from start to finish
moved my comment from below to here so I could more accurately attend to your concern of me not providing evidence and being one worded.. 
I was looking at something similar, but I want a one time read of a list of strings in a flash game. Is my only option a combination of screen grab and OCR?
Lots of things can be overridden, but good point.
To learn C#, I don't recommend web development or mobile development. Web development in particular requires many disciplines to do yourself: HTML, CSS, JavaScript, C#, probably some variant of SQL, ability to set up a web server, probably the ability to set up and manage your own domain... with mobile development using XAMARIN, you also need to learn about Android/iOS APIs and XAML. This isn't good when you're just trying to learn C#. To simplify things, learn C# with console applications, where C# is the only technology you need to know. I don't have any Pluralsight recommendations for you, but I completely recommend this tutorial series: https://www.youtube.com/playlist?list=PLAC325451207E3105 
Can you explain your issue again? I don't think the problem is clear.
This would be a good time to learn about Exceptions in c#. They're basically an event that happens when something unexpected occurred. For instance, trying to convert a string to an integer. But ultimately TryParse is simple and achieves the same overall goal. Exception Way: Console.Write("Enter your age in years:"); var input = Console.ReadLine(); int userAge; bool isNumeric = true; // Default value try { userAge = Convert.ToInt32(input); } catch(FormatException formatException) { isNumeric = false; } if (isNumeric == false) { Console.WriteLine("[Error] : Age must be a numeric value representing a persons age in years"); // do something to prompt for user age again...look up recursion } // do something with userAge TryParse Way: Console.Write("Enter your age in years:"); var input = Console.ReadLine(); int userAge; bool isNumeric = Int32.TryParse(input, out userAge); if (isNumeric == false) { Console.WriteLine("[Error] : Age must be a numeric value representing a persons age in years"); // do something to prompt for user age again...look up recursion } // do something with userAge You can see both ways of doing the same thing, but the TryParse was made for this reason, and is much simpler to read / use. 
According to the C# Documentation, passing variables is indeed by value. And you have to use the `out` or `ref` modifiers in order to reference the variable that was passed - regardless of if its a value type or a reference type. I already linked this in my original post but: [Here, the .NET documentation strictly defines PB Value vs PB Reference using out and ref](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/passing-parameters) Here is an example proving that C# is pass by value by default (similar to Java, C, and C++)... I apologize ahead of time for the comments making the code rather big: public static void Test() { var builder = new StringBuilder(); builder.Append("Hello,"); builder.Append(" World!"); Console.WriteLine($"builder.ToString() before PassByValue: {builder.ToString()}"); // Im passing an object into this function. // // If C# is pass by value, then the following is the case: // Whats actually being passed is a pointer. // A pointer is a value - it can change, and is copied, // just like a value type. When the pointer itself changes // It does not reflect that change to all of the varaibles // that held that pointer's value. PassByValue(builder); Console.WriteLine($"builder.ToString() after PassByValue: {builder.ToString()}"); } public static void PassByValue(StringBuilder builder) { // Here we're reassigning the parameter `builder`. // If C# is pass by reference by default, this SHOULD // change the value of the variable that was passed // into the function. // // If C# is pass by value by default, this SHOULD NOT // change the value of the variable that was passed // into the function. // In PBV, calling Append on the newly instantiated // object should also only affect the local variable, // and shouldnt affect the variable that was passed // into this function whatsoever. builder = new StringBuilder(); builder.Append("Goodbye,"); builder.Append(" World!"); Console.WriteLine($"builder.ToString() inside PassByValue: {builder.ToString()}"); } [This is the output of this code](http://i.imgur.com/lWGfhoz.png) As you can see, I am indeed changing the **value** of the local function argument `builder` but the originally passed variable is not changing. This is pass by value. Now, I can indeed make this pass by reference by prepending the `ref` keyword like so: public static void Test() { var builder = new StringBuilder(); builder.Append("Hello,"); builder.Append(" World!"); Console.WriteLine($"builder.ToString() before PassByReference: {builder.ToString()}"); PassByReference(ref builder); Console.WriteLine($"builder.ToString() after PassByReference: {builder.ToString()}"); } public static void PassByReference(ref StringBuilder builder) { builder = new StringBuilder(); builder.Append("Goodbye,"); builder.Append(" World!"); Console.WriteLine($"builder.ToString() inside PassByReference: {builder.ToString()}"); } [And the output of this code](http://i.imgur.com/nSmUcTA.png) You can also complete something similar using the `out` keyword - but the `out` keyword *requires* that something be assigned during the function's call time.
Trying to use 12.0.0.0. When you say remove the refs. You mean remove anything and everything about reportviewer in the web.config? And all the aspx.cs files too right? 
Of course! Been going at this so long the brain is shortcircuiting.
Exactly. In the animation (right before section What Is Unit Testing) it says Assert.AreEqual(GetTimeOfDay(), "Morning") 
Same result. &gt; Severity Code Description Project File Line Column Suppression State Error The type 'Microsoft.Reporting.WebForms.ReportDataSource' exists in both 'c:\Windows\assembly\GAC_MSIL\Microsoft.ReportViewer.WebForms\12.0.0.0__89845dcd8080cc91\Microsoft.ReportViewer.WebForms.DLL' and 'c:\Windows\assembly\GAC_MSIL\Microsoft.ReportViewer.WebForms\11.0.0.0__89845dcd8080cc91\Microsoft.ReportViewer.WebForms.DLL' c:\Users\user\AppData\Local\Temp\Temporary ASP.NET Files\root\9f9551b5\1f28604a\App_Web_wxpt0qb4.14.cs 2028 I have to believe that it is related to the publickeytoken for both 12 and 11 being "89845dcd8080cc91" &lt;--- that just seems wrong but I cannot find any reference to those public key tokens needing to be something different than 89845dcd8080cc91 
The point is you can create an object and pass it to a method which destroys the original object which is retarded. 
I am not sure, but you may want to rewrite it in C and call windows.h functions, specifically ReadConsoleInput: BOOL WINAPI ReadConsoleInput( _In_ HANDLE hConsoleInput, _Out_ PINPUT_RECORD lpBuffer, _In_ DWORD nLength, _Out_ LPDWORD lpNumberOfEventsRead );
Why is that? C#/.NET can call the majority of winapi's just fine.
I just recently realized I could make my own NuGet packages. This is a game changer.
How can implement that? Sorry if this a really basic question but I am still learning.
It's not big as it sounds. The way I explained might be a bit misleading, apologies. On the C# side, I just want to set an encoding page for European/Chinese language. On the VB6 side, there's a conversion function of double to hex. However, the conversion doesn't work for Chinese Unicode for values beyond 63. Hence, I would like to use the C# .exe file which uses the encoding standard by opening the it using VB6 code (shell command). My question being, what do I need to do on the​ C# side? 
The error is saying that you are using the wrong model. You should use your CreatProfileViewModel with your Create method. [HttpPost] [ValidateAntiForgeryToken] public async Task&lt;IActionResult&gt; Create(CreatProfileViewModel model) After that you can map the properties manually or with Automapper.
It's necessary if you want to use anonymous types, but... yeah, I'd avoid those as well, along with LINQ query syntax. 
Hmm can you make sure that you got all the references that hit that assembly and that your bin folder is cleaned. If you check the csproj, you should be able to see the hintpath used, this should be a relative path to your &lt;package folder&gt;/&lt;Reportthingiemajig&gt;. *Edit* If you still have wrong references, remove them, remove the nuget package and reinstall it. That tends to be the easiest way of dealing with these things 
Of course! This makes sense. Thank you also for your code snippet 
Look in your project file (`csproj` or `vbproj`). There should be a section for references like this: ``` &lt;Reference Include="Microsoft.ReportViewer.WebForms" /&gt; ``` This needs to specify a version. Change it to ``` Microsoft.ReportViewer.WebForms, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845DCD8080CC91 ``` 
https://support.microsoft.com/en-ca/help/320727/how-to-use-the-icomparable-and-icomparer-interfaces-in-visual-c https://stackoverflow.com/questions/14336416/using-icomparer-for-sorting https://stackoverflow.com/a/16474877/1269654
Thanks. 
In going through all this, I must have fixed something. Had to have been a bad reference somewhere. It's working now.
Something like this right? - https://image.prntscr.com/image/d26b68ca21824cd89b9fd19a057c3d8d.png Any idea how to fix that error? On (p)
Thanks. That worked. But I have another problem.
[removed]
Try adding BringWindowToTop(_handle); after SetForegroundWindow(_handle); and see if that helps. https://msdn.microsoft.com/en-us/library/windows/desktop/ms632673(v=vs.85).aspx 
Nice, that would probably work for the ops needs, my idea (before reading ops actual needs) was to find text on screen and actually be able to perhaps click on it or do something near it which would require being able to get screen location of said text on window.
&gt;use their order to compile a simplistic program of methods outputting to other methods, till the result is saved as an output on the disk. An Abstract Syntax Tree? Or bytecode, perhaps? &gt;a kind of code that does not need to be compiled You mean an interpreted language? It sounds like you should read up on compiler design. These are problems that could likely be solved with Expression Trees and Roslyn in .NET, or by designing a DSL and compiler.
The var keyword helps a lot with LINQ. You'll probably change your opinion on it when you work on a big project IMO it should ALWAYS be used when "newing" up such as the following: var intArray = new int[10] vs int[] intArray = new int[10] It's just redundant. 
Also after the explanations I haven't grasped the problem yet! You should really try to explain it better. Encodings usually only appear at the IO boundings of an application, like reading from a file, writing to it or show something on an UI. Internally C# uses UTF16 as its *internal unicode* type (aka strings). So one has to and should *decode* as early as possible for input and *encode* as close to the output as possible in order to save one from trouble. If you need different encodings for input or output it would be probably a solution to store this information in some sort of configuration. Right at the start you get the configured encoding and then use that one to de- and encode.
Thanks!
So imagine this - I have 2 monitors, on the one I enjoy my hobby - developing small games on the Unity engine, and on the other monitor I have an IE opened with a page of a some random mail inbox that is always opened at the messages tab and displays all the received and currently incoming messages. So I have to filter out the messages that I really don't care about, and only pay attention to the ones I care about. So every topic/title message that contains the string/word "2B" in it I really care about it and I want to take a break from my hobby and take a look at it. Now I do not want to delete or send all the rest of the messages to the garbage, I just want to ignore them for the day. Now in order to see if I have a message with a certain string (2B) in its title, I have to look away from my first monitor, and look at my second monitor, and look up and down the titles of the list of emails that I have received and if I see an email containing "2B" in the title I open it and read it. But I have to manually click the button "Inbox" in order for the mail to refresh (old stuff). I want to make something that clicks the button "Inbox", look for the string "2B" on the current web page and send a notifying sound/pop up to let me know about it. Every few minutes. That's it Wow I really thought something like this wouldn't be so complicated :D
Why do you have to do any of this stuff like constructing a program? Why can't you just interpret the graph every time you want to process it?
Does not work unfortunately, behaves the same.
Put some more context in your post next time. You start out mentioning "node" as if it means a single thing. This is a C# subreddit, not specifically a your-favorite-3D-tool or whatever this is subreddit. Remember that other people don't have all the context you have in your head.
There's also a class named CollectionAssert for collections unit testing. https://msdn.microsoft.com/en-US/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx
Learning Javascript from C# is from my experience not a long and painful journey. I'm required to know both C# and Javascript in my job role. Google really is your friend when starting, just break any task you're trying to complete in javascipt down to individual operations, find out how to make arrays, how to add and remove / retrieve information from them. I'm no Javascript expert however I have been able to complete any javascript related task I've been given in my job as it's not usually huge scripts they need. It's used more to patch little things client side more here. You'll find it's actually a pretty flexible language and writing individual scripts are pretty fast. As for the job market I guess it depends where you are? I live in a capital city and see tons of jobs for C# or Javascript devs, I haven't noticed a draught in either roles. 
Ah, I always get the names of those types of operators wrong! Thanks for spotting that, should be fixed now
Typescript is a good transition because how much it reminds you of C# (and the end result is Javascript that works as you want it to)
Yeah, I'm just starting to realise how much python does for you under the hood, and also how nice those features are :( I'm learning c# for my grad job, I can't wait to start and become a real man!
How did we stay relevant in the job market?! I think you are under the misguided impression that JS is even mildly threatening C# job positions.
Same problem. I've submitted an issue to SharpCaster
I understand what you are saying, but c# is becoming a very complicated language now, especially around the runtime and library (technically separate, I know). Async/ await is very complicated - I certainly don't understand the full complexity of the implementation. Everything around threading is always complicated, even with the help of volatile (and I'd like to stay away from using Memory Barriers!). The "Dispose" pattern, with it's two implementations. Even defining an exception needs particular attributes and constructors to be done "correctly". Sure, you can copy and paste patterns of code, but that doesn't mean you actually understand why you are doing it. Good use of code rewriting can actually reduce this complexity - and so much of what has been added to the language recently is basically just code rewriting.
Luckily I work in the Games Industry, where it's only relatively recently that C# has been accepted as a mainstream dev language over C++. Hopefully JS is still a decade or two out!
JavaScript was always a part of the job. I'm doing C# professionally since 2005, and JS was always there. Back then (that was before JQuery and all the other libraries and helpers, just plain horrible JavaScript) JS was mostly used for client side form validation, and sometimes calling webservices (that's when Ajax was a big buzzword). I've never "transitioned" to JS, it was always part of the job. As new libraries came (and went) that part becomes easier, tools came out that let us debug JS code (like consoles in browsers, now VS has built-in debugger) so it is fine now. And now there's TypeScript, that is actually a pretty good language and I quite enjoy it. 
The question also assumes that you either use C# or javascript, while I (and I would assume many others) use both daily. Unless you are pushing the madness that is node they don't even really compete.
Wow, it works! Thank you man, this was an enormous help, you saved me from a whole lot of trouble! Yeah I know AttachThreadInput is a bad idea, but that was the only solution that I managed to get even barely working. Believe me, I attempted a lot of tricks before settling on it: - Used various function calls such as SwitchToThisWindow, BringToFront, SetWindowPos, etcetera. These all failed because they implement the same security principles as SetForegroundWindow. - Registered Alt-Tab as a global shortcut to get focus. This failed because Alt-Tab was already registered and there was no way to unregister it. - Registered Alt as a global shortcut, and use the usual low-level keyboard hook to detect Tab. This never worked properly for some reason. - Used uiAccess=true in the manifest, signed the executable, and ran from Program Files. I am noob in C# and Visual Studio, never managed to sign my application correctly. - Even considered DLL injection so I can override the default behavior, but I lack the expertise to do so, and it is not portable anyway. - Simulated various keyboard and mouse inputs to fool Windows into thinking the user initiated the task switch (which ironically he did). No luck. However I *knew* there was something funky going on with the Alt key, sometimes I managed to task switch, sometimes it failed, sometimes the Alt got stuck. Ironically, I *did* came across both that CodeProject site and the entire Switcheroo source code. Yet apparently I am blind, I completely overlooked this Alt trick, had a myopic focus on AttachThreadInput instead. Now that I think about it, I even saw an AutoHotKey script that did the exact same trick. Oh well. At least it is finally solved. Thank you very much again! 
OpenFileDialog returns a type of DialogResult, not a boolean. The correct way to hand the result is like this: if (op.ShowDialog() == DialogResult.OK) { //code } The error gives you the details required to see where the problem lay.
What's the list variable declared as?
This is the correct procedure, although I'd add that it's worth adding a step of "check for a document containing the style conventions for the project and ensure you follow it" If I see a pull request that doesn't follow our code standards, I don't even look at what it does, it isn't being added to the code. With the possible exception of security related code, which is the one time I'll consider re-writing it if I feel the fix is worthwhile 
Ok?
I have not, and it's pretty unlikely that I would bother. If I wind up doing more web stuff, I'll probably have to relearn JS, but I doubt I will ever be programming in it 100% of the time.
not sure I understand. What would make it worthwhile?
You may have missed an important part of the OP's question. He's using WPF. He's not using Windows Forms. The WPF version is in the Microsoft.Win32 namespace. It doesn't return a DialogResult enum. It returns a Nullable&lt;bool&gt; (bool?). However, the OP's information is contradictory. In the first, he states that the error is complaining about DialogResult and bool (which would seem to indicate he referenced the Windows.Forms variant). But, then later comes back and says it's complaining about it expecting a Nullable&lt;bool&gt;. Something smells. 
"Transitioned". This isn't a sex change, it's just wearing different hats. I knew Javascript way before I knew C# and can utilize both pretty decently. In the MVC world they go pretty hand in hand.
Basically I'd describe it as a flowchart/function block diagram. "Node" can mean any one of at least a dozen things.
I was sticking with the Windows Forms version since that was what the original error pointed to. I was assuming they'd messed with the namespaces somehow to get the WPF/UWP OpenFileDialog bool? result, which is why I pointed them to the MSDN doc. Now I'm looking at the code again, they're using a BitmapImage, which is a WPF/UWP namespace and not (easily) accessible from Winforms (though I've done it for, reasons). 
You can use Microsoft's UIA (ui automation) library to write a tool that scans internet explorer on a regular interval looking for that text. I am not sure how efficient this would be, though, and UIA has somewhat of a steep learning curve.
Thank you for trying to help me. I am new at this c# (WPF) type of coding. Do you have any suggestions how the code should be written? meybe in another way? The main porpuse is to click on a button select an image that is then shown in the XAML image area.
Now that you have the `using Microsoft.Win32`, change the if statement back to your original: if(op.ShowDialog() == true) *The other comments suggesting DialogResult.OK were assuming that you were using Windows Forms instead of WPF.* 
What you have going is fine; just a minor error.
Woooho that was it. Thank you very much. Such a stupid mistake.
I wasn't on the Reddit that time yet :)
Thank you sir. I will do that. I know my question was worded incorrectly just starting out. This has been most helpful response. I appreciate you taking the time to write that all out. 
I see. Thank you for the feedback. Is there a better subreddit to share posts about C#'s inner workings if they're not new features?
Even if you are pushing the madness that is node, they still don't even really compete.
Not off the top of my head, sorry.
(and for completeness, here is the nUnit version) https://www.nunit.org/index.php?p=collectionAssert&amp;r=2.5
How's Caliburn Micro? I don't know of any others
For classes, c++ parameter of (Class* myClass) is equivalent to c#'s notation of (Class myClass). You're right though, using the reference operation is like using Ref, since both are technically pass by reference.
found solution, thanks! https://stackoverflow.com/a/23395379/3101014
I think the thing I hate most on Stack Overflow is when people say 'I need to do X but it isn't working' and people answer by saying 'well, have you tried doing Y instead of X'? Yeah, not helpful. But in this case, I'm totally gonna do that. MVVM or not, I'm trying to imagine a situation in which a domain model can be reasonably expressed by a single class that's 30,000 lines of code. How many properties are on that thing? Why can't it be decomposed into a graph? And, even if you can't do that, why can't you factor out some of the code into domain services or other constructs?
Removed: Rule 4. You can use the `Title` property of the window to set the title: https://stackoverflow.com/questions/28437096/how-do-i-programmatically-change-the-title-in-a-wpf-window
Window3 is a new object. It has XAML code in it. I am pretty new to this type of coding so just asume I have the most simple option. 
Yeah, it doesn't have to be pretty but it sounds like you (the OP) do need to break that class down. There has to be some way to do that, even if it isn't "clean". I mean, the huge class isn't clean already so it's not like you can make it worse. If it helps, I had something very similar to this in a Visual Basic project. Some of the modules were so long and complex that the compiler choked on them. The only solution was to rip a bunch of code out and put it elsewhere. I just did it brute force. You might have to do the same.
Im not entirely sure what you mean. So make like a namespace? Add it to my c# code then how do i invoke it? Or do i need to make a class. Make an instance of that class, then run a function from there?
This might help: https://stackoverflow.com/questions/3898655/building-f-library-to-be-used-in-c-sharp
I have seen this link before and it is not working for me. the problem i described is not equal to the problem in the stackoverflow.
Seriously, use google. https://www.codeproject.com/questions/100718/calling-f-sharp-from-c-in-net http://blog.learningtree.com/how-to-call-f-code-from-c/ There are also some pretty nice articles. I recommend this one, it's pretty detailed: http://connelhooley.uk/blog/2017/04/30/f-sharp-to-c-sharp
None of those do what im actually asking. But thank you.
&gt; win2.Title = playlist.SelectedValue.ToString(); Oh shit it works. I am still bad at this type of programming. Thank you very much for helping me! 
np, keep at it. FYI, you'll often find StackOverflow posts that do not _exactly_ describe the exact same problem as you're having, but they're very likely applicable. In this case, the post I linked to describes exactly how to set a window title. When it didn't work for you, it doesn't help to say _"I have seen this link before and it is not working for me"_; describe what you tried and why it didn't work.
To elaborate a little without giving away any specific details... This is a telemetry visualization GUI that can display a large amount of information (obviously) about a given "system." This single GUI code base is used across multiple "products" by simply adding another model class to it for each new "product." The reason why the model is in a single/flat class is because our logging system uses reflection to take the model class and iterate it's member variables, and log them to disk, SQL, the cloud, etc. This way, for each new "product" we don't have to add a unique way to log it. That being said, this new product that breaks the debug build is obviously huge, and not the normal case. Understood that changing the way everything is handled could help, but the architecture decisions aren't mine to make. Any other thoughts?
Find who makes the architecture decisions and let them know you are hitting a wall that coding around wont fix. Any suggestion I believe would be a bandaid. (Realistically each product should have its AT THE LEAST have its own model, then you could dynamically resolve and log from there. Combining them all into one massive shit fest is not going to work.)
Yes, it's all Auto properties. It would be far fewer LOC if I could use arrays of "groups" of data, but our logging system iterates this model class using reflection, which doesn't work for arrays AFAIK. I'm open to workable suggestions though if I'm wrong. I really wish I could just share the code, but I can't (work.)
Why can't you have a base model that's shared by each "product" and simply extend that model with the versions specific to the product in question?
I tried many things. Stackoverflow. Google. My own coding. I asked reddit because its an easy way to find people that may have tried something you want to do and can give feedback
&gt; The reason why the model is in a single/flat class is because our logging system uses reflection to take the model class and iterate it's member variables, and log them to disk, SQL, the cloud, etc OK, but traversing an object graph using reflection is pretty trivial. E.g.: I found an array or collection type! Let's iterate through its members! Or I found a reference to another type. Let's recursively explore that reference. If ease of reflection is the *sole* reason for having a single class then it's not hard to change things so that that reason no longer applies. You wouldn't have to retrofit anything-- just upgrade your reflection scheme so it's smart enough to explore object graphs, *or not* in the case of your other models that are just a single class. You've tried partial classes, but that probably fails because it's just syntactic sure for building a single class at compile time from multiple declarations. 1) How about extension methods? (I doubt you can reflect over those, because they're probably also just syntactic sugar, but it's worth having a look at) 2) What about runtime code generation? Does the model have any behaviour? Or is it just a big property bag? (I doubt this will work either, since you're going to want to bind to a real model at design time)
Is that a NuGet package or a native resource? Thanks
CryEngine also supports C#.
JavaScript is an important technology to know in web development, but only because of its wide adoption. Personally I dislike the language, but there's no reason why I can't use both. I use JS to do things front-end, and C# back end. Everywhere else, I use C# unless I absolutely must use something lower level, then it's C++. So I guess you stay relevant by using the correct tool for the job. 
Thanks! 
Maybe ExpandoObject or DataTable could be a viable solution, since they would let you create properties (or columns in the DataTable case) dynamically based on the columns that are available for each log file. Of course there are some drawbacks like the lack of compile-time verification of property names and types, a drop in performance and the hassle of mapping properties to other types a hassle, but this is the best solution I can think of, given the information you provided.
Did you try using inheritance to split the properties into multiple classes. BigClass : HalfTheProps HalfTheProps : TheOtherHalf Also: you could put that one class into a separate project and turn off pdb just for it. 
I went with Caliburn.Micro and agree that the magical shit is kinda annoying. They can kinda get away with it because everything really does "work" pretty damn flawlessly, but it doesnt have a whole lot of surface structural logic
I find your abort functionality pointless. It does not halt the execution of the work delegate, instead it sets the state of the task to aborted after completion (if that even occurs). I'm not sure if this was your intent. Consider looking into a System.Collections.Concurrent.ConcurrentQueue in case your current Queue unexpectedly breaks. (for it is not "thread safe") I understand your efforts to write everything from scratch for the sake of learning, but do not use this for your projects. It is not portable, difficult to understand for others and it might contain bugs. The System.Threading.Tasks.Task class implements all of this functionality, and more, in a simple, standard, general and reliable way, that everyone understands. It should be used in every scenario where you just want simple multithreading.
For future reference he hasnt been supplying any useful information and if anything has been a belligerent troll. But ill just delete my post
I seem to be confused... so you have the computer read the UI, and then you process it? that still doesn't explain anything, seeing as the first part is in line with my idea, and I don't know how such a thing would be processed in the first place. currently, my working understanding at least requires my program to read the UI, build an ordered list of methods to send the arrays through, then somehow execute it, and my issue is that I don't know how to do that without building a program and executing it.
Its not exactly what i needed tho. But glad to know this worked for you.
Do you want to be able to do something like feeding F# code into a text box in a C# program, and make it run? I think you have to invoke the compiler for that to happen. Not sure how you do that, though, but I guess you could Google how to "eval F#".
Thats similar to what im doing. Im needing to compile and run an f# code. But i can use process.start and use the precompiled .exe
To process the graph you would go through each node and do the thing that the node indicates. You would start with the nodes at the beginning of the chain and work your way toward the nodes that give the final output, taking the output of each node and providing it as the input to the next node. One approach to this might be to start at the final output and work backward to find the first operation that has to be processed (you could use a recursive function for this.) To process each node, the trivial approach would be to have a big if/else or switch/case statement that decides how to handle each different kind of operation. Another approach might be to make the nodes objects and give every node a "process" method, and have the different kinds of operations be subclasses of the node class so they can override it with their own behaviour.
when it comes to interpreting the node graph, I think it would make sense to start at the output, and use a loop to step back through the nodes one at a time till everything reaches a node with a start tag, like a file input node, so that when you reverse it, any node's dependencies are at least taken care of by the nodes before. I'll also need a system to check for and prevent recursion first, though.
I think this is what you want, then. https://www.codeproject.com/Articles/241577/Embedded-scripting-using-Fsharp This article is ancient, but it ought to point you in the right direction.
I havent read it yet. But have you seen the new fsharp.fsx file type? Its a scripting file type for fsharp. I think it was introduced in the new fsharp framework
This is the error Im getting. https://image.prntscr.com/image/60f5d85eb5e84eeabafd704ffbd9089e.png
This is actually a really novel way to attack the problem, and might just work for us with minimal effort. I'll see if I can get our engineer to try it out. Thanks for the idea, can't believe I didn't think of that before!
This is also a really interesting approach to solving the problem. I wonder if csc.exe would treat these as a base class and super class for the purposes of generating the PDB file. Thanks for the suggestion!
For getting some actual data: Your controller get districts from _db.District_ref property, but you did not set this up in the mock. You need to do something like: mockDb.SetupGet(x =&gt; x.District_ref).Returns(new[] { *some districts* }); At least I think that might work. I've never personally tried mocking an EF db context. 
I saw a solution that does auto caching and invalidation - have you tried that http://www.heimdalldata.com/ 
In Linux is better use gtk# GtkSharp + Glade Gui builder.
Instead of trying to mock entity framework and your dbcontext setup an in memory dbcontext and then insert (and submit) your test data into it. If you aren't using the newest EF look at EFFORT. If you have issues I can help you later when not on mobile.
I will check up on that. Out of curiosity it states that this would be integration testing instead of unit testing. I am new to testing in general but as I understand it this is not what I want. Also My understand of the difference between unit testing and integration testing has been shattered because I thought I knew the difference... but i'm not sure anymore because I don't see how this is integration testing.
Is there any reason why you wouldn't just read all available bytes? I'm not sure the purpose of the 4 byte length header.
C# has most (if not all) of those features and more. You just haven't discovered them yet. Honestly, I much prefer statically typed languages to dynamic ones. I'd rather find out at compile time that I mis-matched a type than at run-time. Though I suppose that's partly what typing hinting and unit testing is for in Python.
Oh also, see if you can get a copy of the Resharper add-on for Visual Studio.
I tried a bit of it and changed a bit, and this is what I did. On the C# side using a European codepage, I have a simple input string in Hex as "E7" and I converted it into ASCIi and the output is Ç. And I open the C# .exe file using Shell command on VB6 (which displays Ç) but how can I pass Ç (the value itself) to VB6 code? 
Okay two things: First thing is you need to implement the Enum. public enum PatientPriority { High = 0, Medium = 1, Low = 2 } Second thing is that you need to pass a value of that enum to your ToConsoleColor-Method. Explanation: As you might see, there is a "this" keyword in your method signature. This indicates that this method is used as an extension to the type type which comes after the "this" keyword. The ability to extend types came with C# 3.0 which was part of .net framework 3.5. This is a magic tool because it enables you to write your own methods for closed types.
Unit testing can be surprisingly complicated at times. Don't worry, you seem to be asking the right questions. I think the reason you are having a difficult time is because the method is doing too much. You are testing the GET path in a web service, so your tests should focus on the API that you are presenting to clients. IF the db call works DOES the Get function return the right values? IF the db call fails, DOES it return the correct status code defined in the API documentation? Notice that you are not attempting to test the db connection at all in the test case, just the Get handler. So how do you test just the handler? Get the DB call out of there. Refactor the code to pull the DB call and conversion into another method (or, better, a class + interface). Then use moq to replace the data call with fake data. Ok, all good so far, but part of the api is that the data needs to be properly formatted. If you extracted the class above, then you can write a test to ensure the data is returned in the proper format. Just make sure you mock out the actual db call. You are just testing the formatting. These may seem like silly tests, but writing them helps you understand where the complexity in the code lies. If it's difficult to test, it's probably doing too much. 
Ok, actually my thinking was a bit off there. I think you got me on track but if it isn't too much trouble, Can you show me how you would separate the _db call in my get method. To me it feels like that is all the entire method is doing and taking that out would complicate things. From what you have said in my head i feel like maybe a separate method that uses like IQueryable&lt;District_ref&gt; I could then add logic there for both get all and get active. But It seems like that would be over complicating things a bit as it would be doing the exact process of... OH! (I am leaving that in case im wrong) I think you are saying that GET method mainly does the formatting of the return value, Returning OK(District) or BadRequest("Error") and that the logic of getting the information should belong elsewhere. (If that's right you answered my question on a Get request, I know how to do that.) Oh... but also if that's how I should approach it, i've got a ton of refactoring to do lol. Out of curiosity, How would you (personally) write that? I believe I included all the code relevant except the Convert method. Also, If i separated that logic into another method would I not want to just perform an integration test on that specific logic since I specifically care about its communication with the database? Edit: also, following this. Should all my methods only focus on having a singular concern? (I thought this one was simple, I have a significantly more complex post method that disables and adds based on an array that's passed in that will need some major refactoring if so.)
It never ended the loop because the client didn't terminate the connection. It was just waiting for more data to be sent from the client or for the client to terminate the connection. When connected, your server has a few states. It either is waiting for new data or has data to read. When data is available, you check the length of the data by seeing how many bytes were read from the socket. If you received more than 4 bytes, then you can parse the length and begin copying data out of the buffer into something else. If you read more bytes than the length that was provided, then there is more than one message available and once you deal with the first, you can begin reading the rest. If you read less than the length that was provided in the header, or the length is larger than the buffer size, then you need to copy the data out of the buffer and listen on the socket until you get more data, and repeat that until you get the whole message. If you want that thread doing other things while you wait for data on the socket, use the async calls. If you're expecting only short bursts of communication and the a disconnect, the synchronous calls should be fine. 
How would cancellationtoken even work for this? Every comment is asking for it
The more im forced to use the actor model at work the more I'm rapidly going off it. There are serious deficiency problems with all the .NET implementations. Akka didn't until recently support async await at all because the author has an irrational hatred for it. Orleans is just half assed and was the predecessor to Service Fabric. SF at least seems reliable and gets proper updates. Neither Akka or Orleans support dependency injection properly. Orleans does under some very specific scenarios but even then its bad. So in turn proper unit testing is practically impossible. Concrete types everywhere. This only encourages junior devs and bad seniors to never use interface even in non actor code. Where I am now, because of it they've scrapped entirely C# unit testing. I don't have confidence in the build quality (take a guess, the code is amateur level first year of college level). The seniors openly claim things like 32bit systems literally can't use 64bit numbers. Eg they are totally convinced `long` changes depending on it. And yes, despite them using .NET for years they still believe it. This is what happens when former vb programmers get to be in charge I guess. And im one of the juniors. At least I know what red flags to look for at future interviews.
&gt; I have a simple input string in Hex as "E7" and I converted it into ASCIi and the output is Ç. You definitly have **not** converted it into ASCII! ASCII contains only 127 code points (**7** Bit!); E7 (231 dec) is therefore not in the ASCII range. &gt; And I open the C# .exe file using Shell command on VB6 (which displays Ç) but how can I pass Ç (the value itself) to VB6 code? So what exactly are you doing in you C# program? Are you just *printing* the string into *stdout*? And you wanna get the putput to *stdout* as input within your VB6 program? If that's what you wanna achieve, you have to know **exactly** what encoding your VB6 program can read as **input** via *stdin*. That encoding you have to provide from your C# program. You can manipulate the Output Encoding for ``Console`` via the ``Console.OutputEncoding`` Property. I would assume that MS was so "clever" that VB6 assumes the **system default** encoding (called *ANSI* in MS jargon). Perhaps one could also define a different encoding for input, but I don't know VB6. You have to figure that out! To summarize: As I allready have said in older posts, you have to configure the encoding for **output** (C# part) in order to **encode** your strings and the encoding for **input** (VB6 part) in order to **decode** it there appropriatly. Last remark: Perhaps VB6 has no internal unicode representation and just uses bytes (as C or C++ for example). Then you have to provide the C# output with an encoding that VB6 can "naturally" deal with.
How so? If you're careful with inter-dependent ones, that should be fine?
Thanks :) I've been writing my own compilers and parsers for years so something like Klip wasn't hard. I hope my coding is clear enough for you to understand how it works. If you download the KlipBundleC#.zip file and extract it, then go to /KlipCompiler/KlipCompiler/bin/Debug/ you will see that there's an already built KlipCompiler.exe file and 6 examples.
&gt; So what exactly are you doing in you C# program? Are you just printing the string into stdout? And you wanna get the putput to stdout as input within your VB6 program? Yes that's absolutely right, regardless of the datatype conversion as mentioned, I want to pass the output of C# to Vb6. Okay, to make things even more simpler, let's forget encoding altogether and consider a string/int/double value as C# output which needs to be used in VB6. Is there any way to setup communication (to pass values) between C# and VB6? What about COM? 
Okay, to make things even more simpler, let's forget encoding altogether and consider a string/int/double value as C# output which needs to be used in VB6. Is there any way to setup communication (to pass values) between C# and VB6? What about COM?
Nice, samples / examples would be awesome; also If you change the readme extension to .MD, you can use markup (IMO is easier to read). Also in the CompileStmtList function, a C#7 switch would work quite nicely instead of a long if else and casting everything twice. Edit: oops didn't see the samples in the .zip folder, a samples directory in the root would be better :) 
Well when you get on your computer be sure to download and test it out :) Its syntax is a pretty standard c-like syntax so it won't be difficult to understand. Also, one thing I haven't included is error checking, if you attempt to do something like "if (string == int)" then it won't work properly. I thought I'd leave out all the error checking to reduce the line count but I've designed the compiler and runtime to be able to implement error checking easily if I need to.
I do have examples in the KlipBundleC#.zip file under /KlipCompiler/KlipCompiler/bin/Debug/ I know that using a switch statement would probably be more beneficial but I've written this to be more friendly to read, especially for beginners. I also don't use switch cases all that often, I try to avoid it, have had some bad experiences with them in the past
Since posting this on a few different subreddits I've had heaps of people request I make a tutorial series so I'll definitey start working on that asap :)
The blog incorrectly claims that &gt; In the compiler time, the async entrypoint method will be compiled to call GetAwaitor().GetResult() methods for each Task-like await expression. This is not how it's implemented. Instead, a new Main method is generated by the compiler, which waits on the entire async Main method, not on an await-by-await basis.
Presumably they wouldn't. Who would issue the token and under which circumstances would it be triggered?
Maybe put some examples on your ReadMe for those of us on a mobile. Some times we forget to look at saved posts for a long while.
Stop bullshit about DI please: http://getakka.net/docs/Dependency%20injection You could even inject different ActorRefs to diffrent actors. Example from my current project: https://pastebin.com/ra6hBhkt
Do you not use any outside libraries related to implementing programming languages? e.g. Antlr, DLR (don't know how relevant that is any more,) Roslyn (don't know if anything from it is relevant,) etc.
&gt; Stop bullshit about DI please: Stop breaking rule 5. It's not bullshit. OK so one of the one's I listed apparently supports DI, it also happens to be the one that has an author that hates async await. No thanks.
Akka.Net supports async/await. Example: https://pastebin.com/yVaDVmsE Article about: https://petabridge.com/blog/akkadotnet-async-actors-using-pipeto/
When I start uploading the videos I'll be posting on a few programming-related subreddits (at least programming, coding and learnprogramming). After I've finished all the tutorials I'm also going to attempt to rewrite Klip in C and Python and make tutorials for those as well. Rewriting it in C is going to be a challenge for me, I've worked with C in the past but I'm not all that confident.
For those looking for code samples, here are the ones included in the "KlipBundleC#.zip" file: https://gist.github.com/anonymous/75eaad8792aaba60f214fd9992e1d5d8
Better to configure that email in a desktop mail client and apply a rule to send a mails with 2B in title to a separate folder, and get notifications
Thanks for posting :)
Don't want to be too self-promotey, but I wrote a book that covers some of the intricacies of testing on MVC like what you're working on. You can check out the sample code here to get an idea of what it's about: https://github.com/heynickc/itmvc_sample_code. It's focused on applying testing to an app that's already been built and it follows a timeline that someone might take to get an MVC/WebAPI project into a condition where you can test it more easily.
RemindMe! 1 week "Lexer tutorial"
FWIW, null-checking an event is pretty straightforward, these days, too: OnPresence?.Invoke(this, new MyEventArgs(pubnub.JsonPluggableLibrary.SerializeToJsonString(presence)));
This is what I did. Created an Enum class - https://image.prntscr.com/image/878e37e1e1b04dbd91c73423b5c00038.png And then added this on my main but its not working - https://image.prntscr.com/image/c36c834bc5524d2387e069246ed38352.png Any ideas?
Even with Colors it says the same - https://image.prntscr.com/image/792d474f9ed54ae3b607e490973c6d50.png The name Colors doesn't exist in the Current context.
You don't have to create a class called "Enum"... you simply have to create an enum with a name of your choice. Don't wrap it with a class. For example: &gt; public enum PatientPriority &gt; { &gt; High = 0, &gt; Medium = 1, &gt; Low = 2 &gt; } 
in which cases this would be needed? like why am i need an async main? (just my ignorance asking)
So in my case something like this - https://image.prntscr.com/image/94840d8e55974f518a1b9d6a7fabe5eb.png Now whats the next step to create my Queue?
Each patient "Utente" needs a property of your enum type PatientPriority which holds the priority of the patient. Let's simply call it "Priority" Then you can order you patient list by using LINQ. ListSickPeople.OrderBy(x =&gt; x.Priority)
Yes... 
I did it like this - https://image.prntscr.com/image/87623e93502d40bda15ecbb1a1c90ca1.png and https://image.prntscr.com/image/975159b3410545739ac63a1b366aaa4e.png but I get this error when I add this propery on my list - https://image.prntscr.com/image/d3e38612a6304c5794aa95220fa3990f.png
Thank you! Apologies - I'm new to Reddit :)
Thank you! Appreciate the tip :)
So I added this on my Utente class like you sugested - https://image.prntscr.com/image/03656d7dfb9a48c2883fd7d48d6dfd1a.png and then https://image.prntscr.com/image/1fe676888da4415e8e0c89d22692a62d.png added the ListUtente.Sort() and got these errors. Is it because of this? - https://image.prntscr.com/image/7cf31d89e7a344bb835193a5076548c4.png 
&gt; Every comment is asking for it *2 out of 5 public comments
You duplicated the `colors` field. Remove the `public ConsoleColor colors;` line. You also have an extra curly brace `{` in the `ColorPriorities` declaration/initialization.
The problem simply is, that there isn't anything like a *universal* string data type outside of a specific programming language. There is only binary data and text. The latter is nothing but binary data for which exist common parsing methods (that transform the data into readable glyphs): *Encodings* So whenever you pass text data between programs, the input side absolutely needs to know, which encoding the output side has used to encode the text data. So as I said yet, you need to know what encoding the vb6 program needs, as it is quite easy to control the output of the C# program. There are of course serialization formats to share data between programs, like xml, json, protobuf and so on. Many of these define very well the encoding that one must use for text data. But if you are able to integrate some sort of serialization lib into the vb6 program, you should also be able to determine which encoding you should provide or even how you probably could *define* the input encoding for vb6 😉 Nevertheless it could of course be helpful to serialize the shared data into a common format, instead of inventing your own parser. This applies primarily if your data is structured! Probably you should read and learn more about the concept of unicode and encodings. Google for "absolut minimum a software developer must know about unicode" 😉 The match should be a blog with an outstanding description of the whole topic.
You don't need the priority number anymore. It's doing the prioritization dynamically via the `PatientPriority` array and `CompareTo` method.
You have 6 parameters: 1 2 3 4 5 6 public Utente(int numUtenteSaude, String nome, int telefone, String email, ConsoleColor colors, int PatientPriority) Just remove the `int PatientPriority` parameter: public Utente(int numUtenteSaude, String nome, int telefone, String email, ConsoleColor colors)
You see "sufficient", I see "complicated and/or less resilient". But hey, to each his own.
Thank you very much for taking out the time with the detailed information, kind sir. My problem and understanding of it has been progressive hence I am learning new things every single day. One more thing is, for the code given below, the value returned is a number and an .exe file is created when I build the code. However, if I want to create a DLL which I would like to use it in other programming languages, what do I need to do? Should I change the properties and save the code as a Class Library? public class Program { public static void Main(string[] args) { string HexString = "E7"; int n = Convert.ToInt32(HexString, 16); char c = (char)n; Console.WriteLine(c); return; } }
Iterate on your list of doctors, then you can remove the first entry of your patients list and assign it to that doctor. foreach (var doctor in myDoctorList) { if (sortedPatients.Count == 0) break; //no more patients var patient = sortedPatients[0]; sortedPatients.RemoveAt(0); //remove the patient from the listing/queue doctor.AssignedPatient = patient; } In general, you're going to have to show more initiative in making attempts and learning how to program. At this point you're asking very rudimentary questions and requiring hand-holding on the most basic of concepts. We can't do all the work for you.
A program that does any async work could conceivably bubble that async all the way up the call chain to the `Main` method. Since `Main` could not previously be async, you would create an async "MainAsync" and then wait on that in your `Main`. This change obviates that work-around. In terms of what value it provides, I would say it is minimal; the work-around was already pretty easy. If they had added in support in the CLR Host for a cancellation token (if, say, a kill signal were received), then I would consider it more valuable, but this adds little value over the previous one-line work-around.
The conversion only applies to a Class1 object, so it must be implemented as a member of Class1.
What do you mean convert `String` to `ASCII`? Maybe you can supply some sample API usage that you would like to have? That is, how would you like to use the type conversion?
Why do you have the compiler generate the source text of another language, then have the runtime reparse that second language into a byte code that you interpret later? Why wouldn't you simply emit the byte code from the compiler instead?
Seems very obvious now, thanks!
https://stackoverflow.com/questions/400733/how-to-get-ascii-value-of-string-in-c-sharp 
If I want to call this DLL in say, VB6, where can I use the functionality mentioned in the link, in the code I have posted above? 
C# uses Unicode, but ASCII is a subset of that. 
Surprisingly I haven't spent much time with GO, I'm not the type of programming who experiments with everything. I just find something that works and sticks with it, through thick and thin. Currently, I'd consider myself proficient in C#, JavaScript (as well as HTML) and Python. Those three languages provide everything that I need right now. I'm also trying to learn C so that I can create an interpreter or runtime for a Klip. I feel like learning and teaching how to make an interpreter in C would be more beneficial because C is what is used to implement actual languages like Python and Lua
I'll look in to it, I'm thinking about changing up Klip a little. For instance, in the buffer I'm writing everything to bytes which I don't really need, it's just habit because when dealing with large amounts of code for more complex languages writing to a bytecode format makes things more efficient. I'm thinkin about changing it to just a list of objects for simplicity. I might also change it up to a switch statement, although I don't need to do the "when ifBlock.IsValid()" because all of that is done during the runtime. Remember the compiler isn't trying to evaluate anything, all it does is compile what you give it to low-level code.
To be honest, I don't know much about fancy compiler terminology, 90% of this is all self-taught from reading through big chunks of code. I don't compile to IL, I honestly don't know how to, never thought about it. I'm happy running my code on a runtime like I do with Klip. With some of my actual programming languages that have much more functionality I have a runtime built for both Windows and Linux, that way the compiled bytecode can be multi-platform without having to recompile it (like what Java does). I could look in to compiling to IL. I used very few resources actually. When I first started learning I watched tutorials from GruntTheDivine (back then he was gruntlover2) but he has talent hem down unfortunately. Then I saw his source code for his Viper VM which heavily influenced how my runtime looks and works (his tutorials were based on his Viper VM as well). Although I made sure not to just copy his code, I read through and played around with it and took basic ideas and concepts but I didn't completely copy and paste his code in to my project. Then I got to the point where I could build a runtime similar to the KlipRT but I got stuck when trying to make high-level code, like what the KlipCompiler compiles. I looked around for months trying to figure it out until I came across another example programming language written in C#. I then learnt how a parser and abstract syntax tree worked, partnered that up with a lexer I generated using TokenIcer and everything else is my own. I tried reading articles and books about how to make compilers and programming languages but at the time I was only 14-16 and didn't understand a word, I figured out the best thing that helped me was to find source code of others who have built their own languages and virtual machines and play around with the code, figure out what variables do what, how does the code get parsed, what are the inputs and outputs like. I'd spend weeks or even months constantly breaking the code and having to redownload it until I finally figured it out. Back then there weren't any good tutorials for people who didn't know anything, that's why I decided to make the Klip language and am continueing to make a full tutorial series (it's probably going to have 15-20+ videos) on how everything works in great detail.
Yeah, I remember in highscool I was creating languages a little more complex than Klip and my teacher was super impressed. He said that he has done a full computer science degree at uni and even he didn't get up to the standard that I was already at when I was 17
Orleans was a research project that evolved over years. Service Fabric Actors are similar and informed by capabilities from Orleans but is entirely separate design and is focused on integration with Azure Service Fabric.
Oh yeah, I can see that. But you can still make a program to update your nuget packages, that's a thing I'm trying to do. But since I want to manage .Net version, project types, dependencies and so on, it's a bit annoying.
To the best of my knowledge the Private = True value for that reference indicates you've set Copy Local to true, which causes a local copy of the reference to be created in the output directory. https://msdn.microsoft.com/en-us/library/bb629388.aspx I'm not amazingly familiar with MSBuild, so can't really say if simply removing that line is an option.
Oh ohk, cool. All the best for your videos
You can also try giving the Clean Solution function a spin to delete all compiled resources/build artifacts, may need to run it separately from a rebuild if you need to purge all the projects before the build. 
Can I sponsor you $20 for you efforts?
Just try it out - much easier than asking and waiting for an answer 😉 You have to consider that you have to rewrite it then. Also the printing is just an unwanted side effect and should be removed - you cannot really capture it from the hosting program! Last but not least the code is very clumsy and cumbersome. You just need this: public string Data { get { return "\uE7"; } } 😎
&gt; await client.GetAsyn(string url) missing a c :)
Many people find The Dragon book too abstract and theoretical. It **is** the classic book but it's more like a reference than a good learning tool when you start out. #Books I think these are a better introduction when you start out: * [Engineering A Compiler](https://www.alibris.com/Engineering-A-Compiler-Linda-Torczon/book/15893482) * [Modern Compiler Contructions](https://www.cs.princeton.edu/~appel/modern/) in C/Java/ML * [Compiler Construction: Principles and Practice](https://www.alibris.com/Compiler-Construction-Principles-and-Practice-Kenneth-C-Louden/book/11066606) Also specific to .NET * [Build you own .NET Compiler](http://www.apress.com/us/book/9781590591345) by is a bit out of date (2004) # Courses * Stanford professor [Alex Aiken's Compilers](https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/info) course is great - it teaches you a lot of the basic building blocks and the practical exercises are well constructed so you don't have to do everything from scratch. * University of Washington's Compilers course is online - [Spring 2014](http://courses.cs.washington.edu/courses/csep501/14sp/) and [Winter 2016](http://courses.cs.washington.edu/courses/csep501/16wi/) * [Keith Schwarz's Archive](http://www.keithschwarz.com/cs143/) of Stanford CS143 Compiler course material - [2011](http://www.keithschwarz.com/cs143/WWW/sum2011/) and [2012](http://web.stanford.edu/class/archive/cs/cs143/cs143.1128/) # Links * Vidar Hokstad's blog [Writing a compiler in Ruby](http://hokstad.com/compiler) * ["Awesome Courses" - Programming language/Compilers section](https://github.com/prakhar1989/awesome-courses#programming-languages--compilers) * [Anders Hejlsberg on Modern Compiler Construction](https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction) * Robert Nystrom's budding book [Crafting Interpreters](http://www.craftinginterpreters.com/) (free to read online) &amp;nbsp; **[EDIT]:** I added the Crafting Interpreters book to Links since it's readable online.
 abstract class MyBase : MonoBehaviour { ... } class SomeOtherClass : BaseClass { ... } Or just place the code in a new class and instantiate it (composition instead of inheritance).
Very interesting thanks. Is there a reason you're exposing some dictionary fields instead of a property? Also I wasn't quite sure how to use your RestClient. The original HttpClient like you mentioned can be kept as a static field. Is that how you recommend using yours? Otherwise your example code with a using wrapping it will exhibit the same port exhaustion as the internal HttpClient appears to be getting new-ed up every time.
public class MyBaseClass : MonoBehaviour { } public class MyEntity : MyBaseClass { } MyEntity will now inherit from MyBaseClass which will inherit from MonoBehaviour. Put your common logic in MyBaseClass. edit: nvm, didn't read the whole thing too carefully.. edit2: What kind of functionality is it that you want to share? Essentially a base class is the way to share functionality (a dove and a bee both use wings to fly, but they have different speeds). When you want to indicate that the implementation of said feature is different, you have interface to group unrelated entities by shared observed feature (a bird and a plane can both fly, but they don't do it the same way).
I'm pretty sure Node lags even behind PHP 7, let alone C#...
I've been working on and off on [Stamper](https://github.com/Jameak/Stamper), which is a simple specialized image editor that makes it easy to turn any image into a token that you can use for tabletop games. I made it because I wasn't happy with the tools that already existed for creating these kinds of tokens and I've ended up using it quite frequently for my own D&amp;D games.
Yeah but that doesn't mean that VS/MSBuild should resolve the output location as the build-time reference to use :p
You should Google "composition vs inheritance". What you've described in this post is inheritance. Inheritance is how we model "A is a type of B". But it sounds like what you might want is something more like "A has a B", or "A makes use of a B", which is done by composition, rather than inheritance. The TL;DR of the subject is that you probably want to make a class that contains the shared functionality, then each of your classes that use that functionality can instantiate this new class to make use of it.
I wasn't sure, so I checked it, the request was cancelled even though it was streaming.
The methods are only described in an abstract way so I can't verify if your reasoning is correct. This way we can only discuss how to reuse methods rather than identifying if it makes sense. Important: I am not trying to advocate a specific solution, because the details of your project, your requirements, knowledge, personal/team preference and current code base/architecture would be considered before choosing approach. So, you can inject instances of objects that can do these things you try to share. The 'issue' with this is that you are extracting the responsibility to an external class. If someone is reading your code, does this make sense to them or are you making the code harder to understand? Again this really depends on what the methods are actually doing to determine if this is sane. You can do an approach similar to Unity's component system and have your individual classes themselves constructs these objects with the shared functionality. You should consider potential maintenance of this approach. You could have static classes with these methods and avoid injecting these in the constructor. This could be a more sane way if these methods will keep getting used by many of your classes (but you will be constructing tight coupling all over your code base). If these methods you are talking about take a certain dependency (let's say a string), you could perhaps make an extension method so that it appears that the method is on the string class itself instead. In some cases it makes sense to do this.
I agree with both of you. Once you take some time to learn how each option affects your application behavior, you're kind of good to go, however I'm sure not every developer on the team has the same attitude. You need some pretty thorough code review to point out that there's property's default value, which is not overridden. I don't think it's easy to spot issues like that. For me it's both fun and frustrating to debug issues like that. I think with HttpClient the barrier is even higher, but you won't notice that there's a barrier at all in the first place and you're having this false confidence. HttpClient only has four properties to tweak, the default timeout can surprise you the most. Then you realize there's the HttpClientHandler, which gives you even more control. I remember I came across some unexpected behaviors with the CookieContainer, too. I also run into issues with the proxy settings, or to be more precise not having proxy configured. Not using cookie containers and auto redirection can also cause long redirect loops. You also realize that you can use the same HttpClientHandler between different HttpClients. What could possibly go wrong? :D
I am not sure what fields you are referring to? The only reason for creating the [_RestClient_](https://github.com/NimaAra/Easy.Common/blob/master/Easy.Common/RestClient.cs) wrapper was to address the issue that a singleton _HttpClient_ does not respect _DNS_ changes otherwise it can be used as you would use the _HttpClient_. 
Yes that example was to showcase the _API_ and I did not intend to use the _RestClient_ again therefore I disposed it after use. Depending on your scenario you may wish to use it as a singleton for the purpose of reuse.
Just a suggestion, write as UWP and put it to the store. So all could benefit from it.
Fair enough! Just wanted to make sure I understand. Will be using your design, its really neat, thanks for making it public ☺ 
I work with a high-level .NET API for database migrations and database reflection, basically it is is an alternative to Entity Framework Migrations, DBUp and FluentMigrations. Supports SQL Server, MySql, PostgreSql and SQLite https://github.com/osjoberg/Upgrader
It is something I want to support in the future (I am not sure about the store but it could be a nice to have!) but right now I want to finish the basic functionality. What do you mean with "So all could benefit from it"? Right now you can download the application and in the store one could also download it. What's the difference
I believe migrations with Upgrader is a more streamlined workflow. With Entity Framework Migrations you need to invoke commands manually in the Package Manager Console. When you add and commit your Upgrade steps to a source code repository, your teammates will get their database up to sync with no extra step when they sync with the repository. Also I like that you do not need to create a new class for every migration you make.
I'm creating a windows application for Opendota (video game Dota2 statistics website) I'm split with the decision of just trying to create it as a UWP application instead of winforms app, what do you guys think? It's using the websites API to collect data and I'm trying to give the application some of the features that the website has, but mostly focusing on statistics of games per user.
It is easier to do from Store than from github. An ordinary user would find it confusing. And store is the only source for apps for Windows 10 S version as well as for windows phone. 
I'm putting together a Web app to help small businesses generate referrals and repeat business from existing customers. At the very least, it is something I can use at my own business. I've just pushed everything onto azure and need to learn what the work flow looks like for hosted apps. How to make a database there, view it's data, add migrations, debug, get failure notifications... Azure estimates the hosting will cost $55/mo. I was expecting it to be way cheaper but I need a db, domain and ssl.
&gt; relevant in the job market &gt; WPF Oh, honey...
Great work! I've been following Ruslan Spivak's [Let’s Build A Simple Interpreter](https://ruslanspivak.com/lsbasi-part1/) series. While it is amazing, the length is also intimidating. (Also, I've been translating from his python to C# which adds to the time.) If it's possible to make your tutorials more streamlined than his, I think many would appreciate it.
https://github.com/Testura/Testura.Code.UnitTestGenerator/issues/3
Working on pulling data from a baseball stats website to show updated statistics in augmented reality when you point your device at the back of a baseball card. I've got the front working by showing a highlight reel of the player but the stats are proving more difficult. This is the project so far: https://youtu.be/5eHokRV9ZlI
The most evil of .NET's APIs.
There is a LostFocus event... this would be more reliable then triggering on a new item gaining focus and also the event would pass the object of importance (the object with the value to save) rather then some arbitrary unrelated object as the sender. But, you might want to look into data binding... as I think data binding would solve your issue much better than events in this case. Data binding "binds" two variables to ensure that they are always synchronized. WPF has much more flexible databinding then winforms and allows all sorts of data transformations as well. When you say you are trying to save the values... are you saving them to a database? A file? An in memory cache? Personally, I'd advise avoiding binding directly to a backing store and instead keep the changes in memory until the user explicitly "commits" or "saves" the changes. Imagine a user wants to update a phone contact... they find the contact to update, open a contact edit form, they update the phone number, the fax number, the email address and then... oh, no... they noticed they clicked on the wrong contact... If you are saving changes directly to the backing store immediately then the user has to manually change those values back... additionally if they don't remember what the old value was... it is lost. If, you instead kept all the changes locally in memory, then you just forget about all the changes and it's as if the user never attempted the operation at all. Much cleaner in my opinion. 
I'm not too familiar with the API but shouldn't your content type be "application/json" ?
Tested, didn't work :( Their library ([last link](https://github.com/blockchain/api-v1-client-csharp/blob/master/src/Info.Blockchain.API/Client/BlockchainHttpClient.cs#L64)) is setting the content type to "application/x-www-form-urlencoded" `public async Task&lt;TResponse&gt; PostAsync(.., string contentType = "application/x-www-form-urlencoded")` And when it calls this method it doesn't change the `contentType` so it is the same for pusher.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [blockchain/api-v1-client-csharp/.../**BlockchainHttpClient.cs#L64** (master → 00bde43)](https://github.com/blockchain/api-v1-client-csharp/blob/00bde439d7acc360645ca83510af8a9691d0202c/src/Info.Blockchain.API/Client/BlockchainHttpClient.cs#L64) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dibh8v4.)^.
Whoops, I didn't know that. All I know about the store is that it is kinda shit (or it used to be in the Windows 8 days) and thus i assumed no one would use it. I am not all that sure about supporting W10 only, tho... I'd have to look up how many people still use 7/8/8.1 and determine if it's worth it. Although the improved UI does seem nice. I still have to do my research on UWP, but I cam probably assume that it's not backwards compatible with windows 7/8? 
All UI changes have to be dispacted to the UI thread. So if the call originated from any other thread than the UI thread it needs to be dispacted to the UI thread. Look at the first answer to this stack overflow link. https://stackoverflow.com/questions/11625208/accessing-ui-main-thread-safely-in-wpf You actually did it when you updated the stack panel but your button update and style are not in a dispatch and thus will error.
Do you mean that the sResult string, is a properly set string with the value; `"Parse: No transaction to submit"`? Maybe you can try doing the same request using a http debugger like Postman. Simulate the request and look at the actual response. If not, you can also run a local dev proxy through something like Fiddler, and inspect the in flight requests that way. And yeah, I would agree with cecilphillip .. sending JSON but setting the content type to `"application/x-www-form-urlencoded"` is really strange. If it's an API from blockchain, that seems unfortunate. Maybe their server just expects data in a certain format and ignore the supposed content type anyway. Overall very strange that their public API from their library would expose that apparent option like that. 
I cannot easily read what your showing in visual studio. That is quite off-putting.. 
You double posted :)
That doesn't solve the problem of correctly dispatching the event to the UI thread. I also don't understand what that destructor is supposed to accomplish.
How is that evil? Someone typed something wrong, that's the user's fault, not .NET's
 StackPanel FooStackPanel = new StackPanel(); spFoo.Dispatcher.Invoke(DispatcherPriority.Normal, new Action(() =&gt; { FooStackPanel = spFoo; })); This is wrong. Just assigning the control to a variable is not something that needs to be done on the UI thread, and doing this doesn't automatically make all subsequent interactions with the control in that variable thread safe. You need to wrap the entire code that is interacting with UI elements in the dispatcher delegate. There's also no point in instantiating that first `StackPanel` when you're just immediately replacing it.
That's a common piece of feedback I've gotten so far, thanks for letting me know. Definitely going to work on it going forward. 
You're right; but then I wouldn't muck with trying to dispatch events to the main UI thread either. UI should just be the UI, Business logic should be in its own model, and a ViewModel context should be used to bridge the gap. As for the destructor, it's an artifact from another colleague that was convinced listeners weren't being detached on instance destruction. He felt it would be a source of memory leaks, so I threw it there to quell his grumblings.
The most relevant example I can give is a friend of mine: - Was working as a contractor in the mid 2000s, making "contractor money" - Decided it was time for a break. Quit his contract, thought he'd live off the huge amount of money he'd made for maybe 6 months - 6 months turned into a year, which turned into two years - Before he knew it, there was a recession, and the chance of finding work diminished - Once his money started running out, he began looking for work, and realised that having been out of the industry for a couple of years, it was going to be hard to get back in again What he did was volunteer to do some work for a charity. Charities are usually open to people volunteering to do work even if they don't have recent experience. This gave him recent experience, *and* knowledge of the charity sector, and with that he was able to get a full-time paid job in the charity sector fairly easily. That was my friend. As for me, I was out of the IT industry completely for 12 years. For most of that time I was working as a flying instructor - so when I decided to get back into IT again, I made use of my experience of teaching people. I trained as a computing teacher in a secondary school and hated it... so now I'm teaching programming in a college and love it. Sometimes you have to be a bit creative, but if you work out what makes you different from everyone else, or even go out of your way to do something that makes you different from everyone else, there are jobs out there. Good luck!
Hey, Yes I was in the exact same situation before. Searching for a job is never nice or easy. Nobody likes doing it. Keep looking for similar jobs or whatever you feel you are capable of doing. Write down examples of all different tasks you were doing in that role while it is still fresh in your mind and have code snippets of work you've produced if you previous company are fine with you using it as an example and ensure it contains no sensitive information: No passwords or customer/company data. Speak highly of your experience at your previous employers and boss in interviews, most interviewers will be completely understanding and probably sympathetic when hearing about the reason you left your previous employers. Just keep searching and apply as much as you can, go to interviews for jobs even if you're not too keen on the role itself, once you're there and can ask more questions about the job it might actually be really appealing to you. When you're in the interview be as positive and keen about the job as you can, and remember that you can always turn down a job offer you're not interested in so you might as well try and at least put yourself in a position to have that option. I'm also self taught, use any experience gaps as a positive. Give across the message that you are a fast learner, enthusiastic and a nice person. Companies shouldn't mind small experience gaps since they can teach you the way that they do things and know you won't bring along any lazy or bad habits. Sorry to hear about you losing your job, it must be a rough time for you but just remember it's not the end of the world! You will find something and in my experience it will usually work out in the end, you might find an even better job or meet some really nice people in your new role. Good luck! 
Windows phone does it... It's a "feature" that I have no control over.
&gt; Do you mean that the sResult string, is a properly set string with the value; Yes! I'll give Postman a try, later and see what's up. Thanks.
Get-a-syn (sin)
Even with the quick header acceptance (HttpCompletionOption.ResponseHeadersRead)? Interesting, well thank you for all the testing and insight into how it works (and doesn't!) :D
No. Interop libraries are just .Net wrappers around COM objects. COM objects are provided by the libraries/executables that implement that COM service. And thus, the implementation for the Excel COM service comes from having the Excel application installed. In addition to EPPlus, I also recommend xlsgen (which is not free).
I started converting it to uwp but didn't know if I should continue. I don't get why everything has to be asynchronous , I ended up just wrapping the asynchronous tasks in a wait as they needed to be completed before continuing. It just seemed it would take much more time to write. I do like the idea of the application being able to run on multiple devices without rewriting it all thought so that's a good plus. Thanks for giving me a bit more to think​ about :)
I didn't have any problem seeing your Visual Studio code once I maximise the video. The volume of your voice could be a touch louder but no more than that.
I am not sure about the asynchronous thing, but I imagine it has to do with mobile devices! Think about it (someone please correct me if im wrong).. a phone can only do so much and to keep applications snappy you wanna divide big tasks in small parts so the app will be more responsive. If things are asynchronous the app doesnt have to wait as long for stuff to load. An example is iOS. The OS will kill your app if it hangs for just a couple seconds, android will display warnings if your app is slow. That is why things need to be loaded quickly and asynchronous operations help with that. Edit: Even if you arent all familair with UWP, i suggest using best practices. It's just a new experience and working against the framework will do more harm! It probably has good reasons to work the ways it does, so just stick with it.
I was unemployed for something like 18 or 20 months out of the first 4 years after I not-quite-graduated from college in 2001 (I was a few credit hours short due to some screw-ups on my part; my degree is officially dated 2002). I was let go after three months at my first job, moved back home, and took a few programming/IT-related jobs through a local temp agency. In 2006, I got hired as an entry-level programmer to Java work for a local company, which quickly turned into a C# job. I stayed there until 2014, when I finally got fed up enough with the Way Things Were Done to go someplace else. Honestly, unemployment sucked, but was often less stressful than working someplace that was about to go under. YMMV. Some of my classmates wound up in similar situations and did things like in-home IT consulting for a few years. Most of us worked a few different gigs those first few years, before employment became stable. A lucky few *didn't* go through all that messing around, though I gather it got a little bumpy for them, too. Stuff happens. 1. Verify whether or not you qualify for unemployment. If you qualify, get that going ASAP. Income's income, and it will leave you some additional time to go job searching. 2. Keep doing all the usual resumé-building stuff of contributing to OSS/github projects. 3. Apply for jobs. Go to interviews. Be prepared for a lot of rejection. If you can, get some references from you're last employer. I don't think they're really checked much, any more, but a good letter of recommendation can do a lot if they do.
I thought it would only run on Windows phones not iOS but I could be wrong. But the idea I think is still the same, however you still have the option for asynchronous tasks in other applications like wpf but the default is synchronous as it's more commonly needed. I guess it does make more sense it's to stop mobile device freeze as most of the tasks forced to asynchronous are ones that would usually take a while​ like http calls. 
It won't run on iOS, only the Windows platform. IOS was an example on how things are handled with slow apps and why async helps.
I've been laid-off several times, either because of a recession or company making changes. It's not a big deal, and yes the first time it happens to you it's distressing. Go through your email inbox and pull out all the ones from recruiters. Update your resume, and send it to them. "Looking for opportunities". Get a haircut, get the suit pressed, study up on data structures. In the future, to minimize any financial issues, make sure you have 6 months (or more) fixed-expenses saved up. I have it in auto-renewing CDs at the bank, so I'm not tempted to spend it on anything. Longest period of time I've spent without work? 8 months in 2008 during the recession. Nerve wracking to see other people losing their homes, but I had that money to tide me through. 
Your content type should be: application/json // and try to using the following code do the post. var httpContent = new StringContent(json, Encoding.UTF8, "application/json"); using (var httpClient = new HttpClient()) { // Do the actual request and await the response var httpResponse = await httpClient.PostAsync("https://blockchain.inf/pushtx", httpContent); // If the response contains content we want to read it! if (httpResponse.Content != null) { string sResult = await httpResponse.Content.ReadAsStringAsync(); } } another thing, txHex is a string already, why you do: string json = JsonConvert.SerializeObject(txHex); or the txHex should be some kind of class?
You can get the Unicode values of the string by converting each character to short. For characters actually in ASCII set I think these are the same values. If not, you should be able to use an encoding object to convert the string into bytes, though you'll have to understand multi-byte encodings.
I've been in IT since 94 and have been through this multiple times. What I always do is get off my ass and go do something else for a bit. Bartending, chef, construction, retail, etc. Something unrelated to computers or corporate. Then after awhile I put out my resume and start getting offers, starting locally then expanding the area. What I mainly look for initially is not $. It is something different in IT from my last job. Security, Hardware, Networking, Programming, etc... Dont' get me wrong money plays a part but I am after brushing up skills in multiple areas. As to unemployment. TBH when I have been on it, it is more of a hassle than it is worth.
As u/eightvo has already mentioned, look into DataBinding, as well as the MVVM pattern. This will solve your current problem by specifying in the binding when to update your source. &lt;Textbox Text="{Binding SomeText, UpdateSourceTrigger=LostFocus}"&gt; This is a much better solution that using code-behind to hook into each individual control's LostFocus event.
If you only have to read files I'd strongly recommend looking for a second option The official interop library is one of the worst I've ever worked with. For a sufficnetly big spreadsheet, it will start leaking handles and memory non stop, without the slightest clue of where is it coming from
I've been meaning to look into xamarin for a while now I just haven't found the drive to learn it. I'm sure I'll love it when I do try it out. If it's as you describe maybe it won't be as difficult to learn the basics as I thought 
thanks, because there's no other way to get a good answer https://meta.wikimedia.org/wiki/Cunningham%27s_Law I have been thinking of getting into C# and .net for a while, but i'm glad to see there are more reasons to do so :)
In settings :) https://msdn.microsoft.com/en-us/library/bb397757.aspx
The only thing I had a problem with it was I have a column at the very right that seldom has data in it, so I had to check for it's presence in my read loop. Would have been nice to have been able to insert it with empty values up front. Otherwise, yeah. It worked perfectly. 
I love how i keep coming back to /r/csharp and getting relevant information to my projects. One less question I need to ask later.
Why don't you use OpenXML?
Epic, I missed a couple of steps there and had problems. Thank you very much for that. Now I can efficiently explain the benefits of Moq instead of just having to use a test double.
actually, that looks like that will work, but Im wondering if there is a more generic solution to this problem. 
However you store the password, be careful. Passwords should be encrypted before storage.
I will warn you that hiring managers view this type of work history as a red flag when interviewing.
I quite like these, but Microsoft always do them with Black or at least really dark backgrounds. I'd prefer white backgrounds for things I might consider printing large.
Has never been a problem for me at all. I explain the gaps as recharging my batteries.
Better to just hash them than encrypt them and store a key somewhere 
All excellent answers, thanks everyone! This will eventually connect to a database but for now the values are very small and are simply being handled in memory to be displayed in a different part of this WPF. I will definitely be looking into data binding and MVVM asap. And that snippet looks like it will handle this event perfectly so I'll be trying that out as well. Thanks for that u/RecursivelyNerdy 
If you use DPAPI you don't have to store the key, Windows handles it for you.
6 months of work on a software development team as a junior, company went under, no degree. 2 weeks later I'd passed an interview, within a month of losing my previous job I was working again, though a bit strapped for cash. If you can get hired once you can get hired again, use your time between job hunting to practice software dev if you can.
Once you go ~~black~~ dracula you can never go back.
From your csproj, you're targeting .NET Standard 1.6: `&lt;TargetFramework&gt;netstandard1.6&lt;/TargetFramework&gt;` [.NET Standard 1.6, with the current tooling, isn't supported](https://docs.microsoft.com/en-us/dotnet/standard/library) by the .NET Framework. I'd either back down your target as far as it can go, or, alternatively, target multiple frameworks like so: `&lt;TargetFrameworks&gt;netstandard1.6;net45/TargetFrameworks&gt;`
Definitely recommend EPPlus. 
Glad to hear that! Ah Ha moments really are the best. 
For a month I was out of work. Other than that since school never, and that was a long, long time ago.
No C# does not have a similar built in construct.
You've got 6 months experience now. That will help a lot. Study for certification, and you'll be snatched up. I screwed up in 2004 or so, and when I was laid off a job I let myself chill out for a while, because I absolutely hate interviewing and the economy was tanking. Big mistake. After a year it got much harder to find a job. I ended up not working for years. Finally got a few temporary things going, some tech support work, and then someone gave me a shot doing dot net again. Had a few stumbles but I've been working again and I don't plan on letting my career lapse like that again.
Wait, .NET Standard includes System.Net.Mail? Awesome.
No, please don't.
Check out Akavache
This needs to be a dynamic web page that we can interact with, not a static poster.
Hi, author of Akka.NET here: &gt; There are serious deficiency problems with all the .NET implementations. Akka didn't until recently support async await at all because the author has an irrational hatred for it. Ummm.... no? No irrational hatred for async / await - it's just a model that is in conflict with how actors work and frankly it's unnecessary in that context. Actors are already asynchronous, but it's all implemented via message-passing. Doing async / await via method invocation inside an actor is possible and has been supported for years, but it's goofy - turn the result of an asynchronous task into a message and handle that instead so you can interleave operations and not have to suspend an actor's mailbox to allow the stages of an await FSM to complete. You'll hear the same feedback from people who use Akka on in Scala . &gt; So in turn proper unit testing is practically impossible. Concrete types everywhere. This only encourages junior devs and bad seniors to never use interface even in non actor code. ... I use injected components with interfaces all the time in my actors, although I don't like constructor-based dependency injection much because most DI containers have a hard time coping with actor lifecycles, based on empirical data I gathered a couple of years ago: https://github.com/akkadotnet/akka.net/pull/1139 Autofac handled actor lifecycles just fine, but the others aren't as well-suited.
EPPlus is also significantly faster than Interop in my experience especially when working with multiple files. EPPlus manipulates the files directly, where Interop will open a new instance of Excel for each file you touch, which is so much slower. 
What you see here is not my code, it is copied from the library that the API provider itself released! That is why there are some weirdness such as the `ContentType` and the `Json` thing (and yes `txHex` is just a string). The code that I had based on their documentation didn't work so I went ahead and copied everything but it still doesn't work!
Where does trail Octopack-Serilog-Humanier-NodaTime-NUnit-xUnit-Json.Net lead?
Why have you opened another topic? You allready have posed the question and got detailed answer imho: https://www.reddit.com/r/csharp/comments/6e19de/need_help_with_code_page/ On top of that the explanation of what you want is a big step back here. With all the knowledge gained from the original thread you could have elaborated your question in many ways!
I am using SimpleInjector in production for semi high load app and dont have any problem. I switched to SimpleInjector from Ninject because Ninject has some internal cache which overload itself after some period of time and completely stops constructing new actors.
This was the code for the testing: try { var outputFileName = "bytes.bin"; var client = new HttpClient { Timeout = TimeSpan.FromSeconds(10) }; using (var response = await client.GetAsync( /* 4K content - much bytes */ "http://downloads.4ksamples.com/downloads/sample-Elysium.2013.2160p.mkv", HttpCompletionOption.ResponseHeadersRead)) using (var remoteStream = await response.Content.ReadAsStreamAsync()) using (var content = File.Create(outputFileName)) { // // remoteStream.CopyTo(content); // var buffer = new byte[4096]; int read; Console.WriteLine("Started streaming"); while ((read = remoteStream.Read(buffer, 0, buffer.Length)) != 0) { content.Write(buffer, 0, read); //Only for demonstration reasons FlushFileBuffers(content.Handle); } Console.WriteLine("Finished"); } return outputFileName; } catch (Exception ex) { Console.WriteLine(ex); throw; } This was the output: Started streaming System.IO.IOException: The read operation failed, see inner exception. ---&gt; System.Net.WebException: The request was aborted: The request was canceled. at System.Net.ConnectStream.Read(Byte[] buffer, Int32 offset, Int32 size) at System.Net.Http.HttpClientHandler.WebExceptionWrapperStream.Read(Byte[] buffer, Int32 offset, Int32 count) --- End of inner exception stack trace --- at System.Net.Http.HttpClientHandler.WebExceptionWrapperStream.Read(Byte[] buffer, Int32 offset, Int32 count) at System.Net.Http.DelegatingStream.Read(Byte[] buffer, Int32 offset, Int32 count) at ConsoleApp1.Program.&lt;StreamingAndTimeout&gt;d__1.MoveNext() in C:\Users\boli\Documents\Visual Studio 2017\Projects\ConsoleApp1\Program.cs:line 39 Unhandled Exception: System.AggregateException: One or more errors occurred. ---&gt; System.IO.IOException: The read operation failed, see inner exception. ---&gt; System.Net.WebException: The request was aborted: The request was canceled. at System.Net.ConnectStream.Read(Byte[] buffer, Int32 offset, Int32 size) at System.Net.Http.HttpClientHandler.WebExceptionWrapperStream.Read(Byte[] buffer, Int32 offset, Int32 count) --- End of inner exception stack trace --- at System.Net.Http.HttpClientHandler.WebExceptionWrapperStream.Read(Byte[] buffer, Int32 offset, Int32 count) at System.Net.Http.DelegatingStream.Read(Byte[] buffer, Int32 offset, Int32 count) at ConsoleApp1.Program.&lt;StreamingAndTimeout&gt;d__1.MoveNext() in C:\Users\boli\Documents\Visual Studio 2017\Projects\ConsoleApp1\Program.cs:line 53 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at ConsoleApp1.Program.&lt;&gt;c.&lt;&lt;Main&gt;b__0_0&gt;d.MoveNext() in C:\Users\boli\Documents\Visual Studio 2017\Projects\ConsoleApp1\Program.cs:line 15 --- End of inner exception stack trace --- at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) at System.Threading.Tasks.Task.Wait() at ConsoleApp1.Program.Main(String[] args) in C:\Users\boli\Documents\Visual Studio 2017\Projects\ConsoleApp1\Program.cs:line 15 Press any key to continue . . .
Yes but as per the docs, they recommend MailKit.
Does your repository return IQueryable&lt;T&gt; at any point or accept Expression&lt;T&gt; ? If the answer is yes you are doing it wrong. Understanding why repository is wrong is not very hard. Ask yourself "What is the problem I am trying to solve with repository?" Presumably the answers are: - To have a place to write (isolate) our queries. Kind of organizational separation - An abstraction over the data store. We should be able to change the data access without touching the service layer (you have service layer right? service layer is much more important to have than a data access layer) So lets see what happens if you expose IQueryable&lt;T&gt; (or its mirror image Expression&lt;T&gt;) from your repository. You end up with code like this in your service (assuming that GetAll returns IQueryable&lt;T&gt;) customerRepository.GetAll().Where(c=&gt;c.CountryCode == "us").OrderBy(c=&gt;c.Name)... If you don't end up with such a code why is your IQueryable exposed to begin with? So lets see how this code relates to our stated goals 1. Do queries stay in the repository? Maybe some part of the queries do stay in the repository. Maybe GetAll has Where(c =&gt; !c.IsDeleted) in it but the fact is that most of the query is actually in your service layer OUT of the repository. We have failed our first goal of organizing our code so that query code stays in the repository and business logic stays in the service layer 2. Does this implementation provide abstraction? On first glance it does. No EF specific types were exposed to the caller. However there is another kind of coupling except coupling by type. It is coupling by interface. IQueryable is an interface that is very useful but also very hard to implement. It is in practice impossible to implement it yourself. Let alone that even when it is implemented (say you want to switch EF with NHibernate) you will find that many of your queries do not work because IQueryable is never implemented exactly the same way. If you honestly ask yourself "Am I able to replace EF without touching the service layer" and the answer is "no" you have failed at repository. Can you switch to a data access based on Stored Procedures for example? Does it make sense now? 
Why?
It depends on what your safety net is. How long can you go without a job? I have been fired twice and it surely hurts your confidence. One was a 3 months intership where I was not hired afterwards, my first dev job. Didn't care much, because at the time I owned a small business with an Internet Café and actually made more money than my university classmates who had entry-level programming jobs. The second time I had 2 years of experience. I was told I was let go because of my poor results. Less than a month later they let go 1/3rd of the company because they had financial troubles (I guess it was not my poor results after all). My confidence was really hurt and I was kind of worried (you know that feeling in your stomach...). I called a coworker to tell him I was being let go. 15 minutes later my phone started ringing with interview invitations. Apparently he told some headhunters... Landed a better job (higher pay, more interesting project, better atmosphere in the office) 2 weeks later. Since then I am not scared of being fired. If I am it will certainly feel bad but I do not live in fear of this happening. Just go out on the market and find another job. After all you managed to land this one without any experience what makes you think you won't be able to land another with 6 months of experience under your belt?
That's dead on :) check the updated OP for what I did to fix it. Thanks for the help
Shit that's a good idea.
Aren't the HttpClient examples wrong? I remember reading something about an issue with httpclients tieing up ports if a new one was created for each request. The fix was to only create one, iirc
Wow, that's a tricky one, thanks for posting. I'd also like to nominate this post as a perfect example of a [minimal, complete and verifiable example](https://stackoverflow.com/help/mcve) - so easy to follow exactly what the problem is, without needing any understanding of what the original project was about.
Please don't recommend a cancer license especially for a product that might need to be commercial. As others have pointed out, you should use the actually official library: https://msdn.microsoft.com/en-us/library/office/bb448854.aspx
Ah, I knew it had something to do with .NET Standard. I was initially going to make it target .NET Core, but then I remembered that .NET Standard exists and would be better to target that instead for compatibility, I obviously assumed that it would support the most common .NET platform but guess not, I think I'll downgrade it to .NET Standard 1.5 until 2.0 comes out. Thanks!
By the way, `List&lt;T&gt;` is not safe to access from multiple threads at the same time like you do with `ConnectedClients`.
What about encoding? That's a recurring problem on Windows.
The encoding is handled by the StreamWriter and StreamReader of the underlying process. They default to Console.InputEncoding and Console.OutputEncoding. Can you give some examples when it's an issue?
Not sure where you live but it's been the exact opposite for me.
For learning syntax, I really like Mosh Hamedani's courses on Udemy. You have to buy them, but I thought they were very well made. I first learned OOP with Ruby, and the book 'Practical Object-Oriented Design in Ruby' is simply fantastic. It's not C#, but the underlying principles are the same, and it really goes deep into the why of things and best practices. I've recommended it to a couple other junior colleagues (we work in a C#/.net dev shop) and they found it quite useful.
so, which line of code failed or where did you get the error message?
You know, I've configured ProcessStartInfo so many times in my life and never felt like wrapping it, but seeing this clean API makes me feel like I have wasted so much time doing this over and over again. Gonna give this library a try, thanks for sharing!
That's great to know. This should be the top post.
It is very hard to know if your design is solid without more details, but it _feels_ from your description that you might want to have some third class higher in the hierarchy that has knowledge about the two other classes. Rather than them knowing about each other. Separation of concerns is a good principle.
Lucky for me I never attempted to run things in parallel so I can't really relate but I'm sure that can be a pain in the ass.
This is the third or fourth time SimpleInjector has been brought up to me today - is it pretty popular? I used to be a big Ninject user myself; it has a reputation for being a bit slow but it was what I learned when I first picked up ASP.NET MVC years ago. The key challenge with the actor part of DI is that actors should ideally be given a way of resolving their own dependencies given that they can live indefinitely. Only major issue I've ever had in production was an incident where I used DI incorrectly on the first-ever Akka.NET production deployment and injected a DbContext object into my actors... Without realizing that those objects were recycled by the driver every 60 seconds. Given that the actors using them could be alive for months at a time, this was a problem. I ended up just passing the DI container directly to the actor to resolve it. These days I have an approach that uses a functional-style to allow me to hide the container instance from the actor but still be able to call it from within.
HttpClient is probably one of the worst components of .NET Framework, which is shocking — considering it's been implemented a lot later in the game. * HttpClient instance is meant to be reused...but you can't modify the parameters after you issue a first request — this makes it horrible for parallel systems. * You should reuse instance(s) but it implements the IDisposable. * GetAsync method throws TaskCanceledException when timed out (still not fixed after few years). * It handles redirects badly (a lot of bugs and different behavior on different platforms). * A lot of confusion between HttpClient and HttpClientHandler. 
It is pretty popular because it [promotes best practice](http://simpleinjector.readthedocs.io/en/latest/principles.html#push-developers-into-best-practices), it has [self-diagnostic mechanism](http://simpleinjector.readthedocs.io/en/latest/diagnostics.html), it is [SUPER fast](http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison) (article up to date 2017-03-18) and it has integration packages for all popular frameworks. [Akka.Net included](https://github.com/akkadotnet/Akka.DI.SimpleInjector).
&gt; So are you of the mind that all of these people who are speaking out against repositories are using them incorrectly? No. Most people who speak out against repositories do it because people who advocate for repositories (and practically every single tutorial on repository pattern with EF on the Internet) are doing it wrong. However there are more reasons to dislike repositories even when the repository is implemented correctly. People who use repositories are often tempted to let the IQueryable out because it is convenient. Without it you end up with a lot of parameters to your query methods and a lot of specific query methods. People instinctively dislike writing this code so they just release the IQueryable. Problems like loading related entities (Include in EF terms) and transactions are kind of annoying and result in somewhat complex methods with a lot of arguments when writing a proper repository. My view of the subject is that the repository implemented correctly is a heavy abstraction that has significant code and it should be considered carefully if the price is worth it. Most projects never need to change a data store. If your project has clear indications that you might need to change data store go ahead and implement proper repository. If not just write the queries in the service layer against EF (again the service layer is much more important than the data access layer). What happens if you are wrong and the data store needs to change? Well you just rework all the queries in the service layer (possibly adding proper repositories in the process). It is a risk assertion problem. One thing that I am quite confident does not require implementing repository is unit testing. EF supports unit testing just fine. You may have heard that a DbContext is an unit of work and a DbSet is a repository. This is true in a way. You can mock these objects just fine and provide lists of objects that pretend to be a DbSet. This way you can test your services. Very few things do not work this way for example related entities are always included even if you do not add Include so effectively your includes are not tested but this is also true for repositories. One argument against this approach is that queries should be tested separately from business logic but I do not think I agree with this. Queries are super closely related to the business logic in almost every sense. I even think it a bonus that when testing with EF in memory data I get to test my queries together with my business logic.
Excellent explanation!
You will be fine if your duck implements IBattery (as an interface) so that you can moq (or stub) it in your unit testing. Though I tend to agree that the higher level abstraction that puts document and image classes together is still a better idea. 
I'm new Akka, DataFlow and Rx. Is there a lot of overlap of functionality here? What's Akka providing that DataFlow and Rx aren't?
agree, think everyone when they see 'inherit' i immediately shudder, I think it's ok for something, especially if you're extending things in classes which have virtual methods, fluent validation is a good example. Maybe dto's too, they could be a good case, but composition is alot better, cause if you change the base class that means everything else is changing behavior which could cause havok, yes the reuse of code sucks, so look at what you're doing and build some generic functions to do what you're trying to repeat. 
Yeah i was aware. I figured out for what i need i can just make a function in a class and run it. Thanks for the input. :). I need to look up the difference in those two lists. I knew they didn't translate. Im still pretty new to f# i really like the language. I hope it gains more popularity
https://fsharpforfunandprofit.com/ functional programming is really powerful, separating state and behavior can really help you write better and more pure code. 
http://xenko.com/ but i'm not sure about linux
Thank you very much! I'll look into those
What a pointless graphic. What is this supposed to convey? It's just a mismash of random mostly .Net related development things on a faux circuit board background.
no prob man anytime, learn the terminology an methodology most importantly learn what composing a function is, how to curry, how to chain functions ect. the idea is to create a straight pipeline where data isn't mutated and state isn't mutated. data =&gt; calc =&gt; new data =&gt; calc =&gt; new data 
What issues were you having with async?
I really don't need a high end AAA engine with editor and stuff. I should have mentioned in my question (changed that now), that my game has fully procedural generated game content. It is a voxel sandbox game like Minecraft. And it should really be open source with a free license.
ok, lets make this a little easier. I have a class the will get imaged from a Url and either return a file, or a Bitmap my document class has images associated with it. here, I'll make a CRUDE CRUDE example.. Note where I use ImageEngine inside of the presentation class. presentation.cs using Some.Where.Else; namespace Over.here public class Presentation { public list&lt;Slide&gt; Slides; } public class Slide { public string SlideUrl {get; set;} public Bitmap SlideImage {get; set;} } public Bitmap GetSlideImage(string url, int width, int height) { ImageEngine ie = new ImageEngine(); return ie.GetImage(url, wifdth, height); } imageEngin.cs namespace Some.Where.Else public class ImageEngine { public Bitmap GetImage(string url, int width, int height) { some code... return ResizeImage(image,width, height); } public void GetImage(string url, string outputFileName { } public Bitmap ResizeImage(blah, blah, blah) { code.. return stuff.. } } 
I ran into this as well in the past but I never really figured out why it happened (I just did what is described at the end of the article: using a select to manually "cast"). It feels like there should be some compiler warning or something when something like this happens.
Looks neat. Some questions: 1) What is the benefit of ExecuteAndForget compared to just firing off the ExecuteAsync method and not awaiting it? 2) Is ThrowIf*() a desirable pattern now? Why not have an option in the input to require success and throw if a failure occurs (or require success implicitly)? 3) What's up with having a two partial class parts in a single file? 4) How reliable is StandardError with Windows binaries? Are return codes too much all over the place (so that no implicit validation can be done)?
Unfortunately the api was my first choice as its easier to work with, but it's only for user level information, I'm looking to work with the admin side which can only be accessed from powershell. Thank you though :)
What? I get great results with Android. Also it's what powers Unity games for Android. Sounds like you have issues with something specific. Edit: I see you did list something specific, sorry I could only see your first few sentences at first for some reason.
Just wanted to echo the same: volume was far too soft. Otherwise... keep em coming!
Urho 3D (C# bindings) https://github.com/xamarin/urho https://developer.xamarin.com/guides/cross-platform/urho/
There were no particular issues, just a lot of code to write and test (see `ExecuteAsync`).
It is, it is just they don't provide native library, you can build it yourself, if you check in the issue tracker, someone provide the patch for the script to build https://github.com/xamarin/urho/issues/108#issuecomment-276638797
You can also check this one: https://mellinoe.wordpress.com/2017/01/18/net-core-game-engine/ EDIT: https://mellinoe.wordpress.com/2017/02/08/designing-a-3d-rendering-library-for-net-core/
Usually in these cases the compiler simply doesn't let you do something that could be done in IL (e.g. certain generic constraints or generic pointers). But in this case, the compiler does let you do something, it just believes it to have a different result than it actually does at runtime. The two lines of code in the second example are functionally identical, but only in the first case does the compiler predict the result of the cast and replace it with a constant `false`. I think this is a problem even if this behavior was constant, but it wholly depends on how clever the compiler is and improvements could easily allow it to extend this 'optimization' to other cases in the future.
It's as simple as using System.Numerics - you don't have to do a thing. 
I only develop iOS using Xamarin/Mono. I find it to be a nightmare. Every update brings new bugs that I have to find a workaround for.
Is there a YouTube demo video?
Thanks, and yeah, I think I need some more help on the indexer part since myList.Sort((x,y)=&gt; x.[0].CompareTo(y.[0])); doesn't seem to work :x
 x[0] not x.[0] Cheers!
What is your whole program? Calling mono_jit_init is just part of the bootstrap. 
This sounds like you really want a SortedDictionary&lt;string, List&lt;string&gt;&gt;, FWIW.
Forms isn't quite where we'd all like it to be today. If specifically looking for code sharing for both Android and IOS, a better alternative would be React Native.
Caliburn.Micro. It helps to avoid the stupid concept of verbose commands, among other things. MVVM Light is so light it's useless. Catel is so bloated it's worse than XAML. Caliburn.Micro does include magic, but I avoid using it. Built-in magic rules lead to badly broken refactoring and stupid control names, besides being magic, so all my bindings are explicit.
Out of curiosity, what is it you're actually trying to achieve? 
"Feature-rich" easily turns into "bloated and verbose", especially in case of Catel. It makes writing hard things easier somewhat, I agree, but if 90% of time you need easier things then writing 3 times more code isn't worth it. Choosing the most powerful library isn't good idea, it's much better to understand requirements and choose library appropriately, otherwise you end up with heavy overengineering.
I prefer working refactoring and sensible control names (verb vs noun) so I use explicit bindings even with Caliburn. Sucks that method names are just strings for VS/R# though.
Using the mono embedding API is more involved than that. This is an example for macOS but may be useful (https://github.com/abock/EmbeddedXamarinMac/tree/master/EmbeddedXamarinMac). See main.mm and ViewController.mm. Also this documentation - http://www.mono-project.com/docs/advanced/embedding/
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [abock/EmbeddedXamarinMac/.../**EmbeddedXamarinMac** (master → 00110fa)](https://github.com/abock/EmbeddedXamarinMac/tree/00110fa18ee5f06ca14e9f4951819e81b6c338a4/EmbeddedXamarinMac) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dif67h5.)^.
C# by virtue of Visual Studio has some of the best refactoring tools available anywhere. My most common piece of advice to new programmers is not to get overly hung up on design patterns but to implement in the most straight forward way trusting to the tools to make it relatively easy to back yourself out of a bad decision. There are a few situations where it can be problematic being stuck with an old class hierarchy when you are forced to maintain a backwards compatible API, and in those cases a little more thought or at least experimentation is warranted, so have a read through "Design Patterns" [ISBN-13: 978-0201633610] when you have the time, but don't obsess or you will end up with an overly complex monstrosity like the Java SDK.
Not sure if that is sarcasm...
If you are planning on creating this, you should definitely use an engine such as Unity3D. It offers 2D support, sprites and UI control. It's also multi-platform for builds, meaning you can build the project for Desktops (Windows, Linux, Mac-OS), Android, and iOS. If you want to create a 3D environment, Unity does it as well. You'll need to learn how to create 3D objects or you can look into ripping the 3D objects from the Wii version of Stadium and animating yourself. Note, don't publicly release. Nintendo will shut you down quickly.
How are you handling the Pokemon data? If the datafiles are in a human-readable format you could get plenty of support post-release from interested users wanting to add new Pokemon.
Since your question has already been discussed... I would suggest you refactor your code if possible to have your List contains types that make more sense. What does this data represent?
right now, the data for a generic pokemon (base stats, move list, type, weight) are stored in a csv file. there is also a move file for each generation move list (also csv). I was planning on building these files in as resource files to prevent editing of them but that is definitely an interesting suggestion. The information needed to add a pokemon is simple. The only "complicated thing" is that I save the move list as a list of move indexes delimited by a "|".
thanks for the heads up. I am mostly doing this as a coding exercise to challenge myself. I tried a similar project in C++ 3 years ago on a lower scale and the code got extremely messy. I wanted to challenge myself to create a more organized, modular version of what I tried to implement in C++.
Call it zokemon change stuff up a little.. 'Model' it after something and bang you got your own. ;)
I am not an expert on IP, but I have always wondered how much something must be changed in order for it to "be something different".
Everyone mentions unity but if you are using this as a coding exercise, a library like monogame might be more your style.
Check out r/INAT if you need help down the road, even for testing. 
You don't want to build your graphics out of picture boxes. A better way would be to draw the entire board on to a single control or the form itself. If you do the form it has a drop down in the properties to allow double buffering. If you paint your graphics on a panel or some other control you'll need to find another way to buffer it.
Monster rancher, Digimon, Yugiho...
I'd just build it in unity or JavaScript with a .net online score board. 
Game content can be copyrighted but an idea can't. It's why PETA was able to create a Pokemon "clone" without violating civil law. Just create Pokemon but change factors such as the Pokemon sprites, don't call it Poke Center, call it "Healing Center" and "Marketplace". Gym badges should be changed to something like "Achievements"
Sorry! Im pretty new to posting in reddit!. I don't know. Thanks
This is probably a much better fit for /r/cscareerquestions. That said, the quick answer is that a PhD is a research degree. It is long, grueling, and spits you out into a job market that is relatively uncertain (jobs can be hard to find because of very infrequent turnover due to tenure, lots of adjuncts replacing traditional full professor positions, etc) compared to industrial CS. You may also need to do a postdoc or two after you finish the already long PhD and are still not guaranteed to get a tenure-track professor position after that (e.g. you may end up working a normal industry job after 4-12 years studying in academia). The opportunity cost of forgone income you could have made working in industry instead of doing a PhD plus postdoc is exorbitantly high, and the PhD salaries are not high enough that you're likely to ever make up that gap. I say this as someone who strongly considered a PhD but went to industry instead. I'm not trying to tell you not to do a PhD, just that you really need to fucking want it or it's not worth it.
Thanks for the input
That, and many companies will look at job candidates with PhDs and think either "We can't afford them" or "We aren't doing rocket-science here - what do we need with a doctor?" 
Don't try to think of this as gluing components together. The more traditional (and more process efficient) way is to create some sort of canvas, like an image, and draw your blocks onto the image. Then, when you're ready to display the frame, draw that image onto your UI.
Removed: Rule 3.
We need to convince someone to do that.
MonoGame isn't MS either, right? 
What are the blank spaces for? Things in the pipeline??
The drop down list would have to be databound with the value member being some kind of unique identification number and the display member being the person's name. Then you could have a stored procedure that gets the rest of the information in either the selected value changed event or the closed event that gets the rest of the data from you database based on the ID number selected. All this is really hypothetical though. I don't have any idea what your business case is.
Don't feel too novice to look and contribute to open source projects of any size. The one thing I try to do is make sure I match the "style" they are using from naming conventions to anything else. Looking at other people's code can help you learn what you like and don't like / understand. Sounds like any MVC related project would help you out. The SPA templates are great starter projects for learning the basics and will also help you learn at least 1 modern spa framework. Edit : add link https://blogs.msdn.microsoft.com/webdev/2017/02/14/building-single-page-applications-on-asp-net-core-with-javascriptservices/
Thanks, I'll take a look! (Hopefully it works on dotnet core, but I'm sure I'll find out soon)
no sound....
Care to add some commentary for those that are interested but have zero clue where what this is and no interest in doing research on a foreign subject just to see if this is worth knowing about?
Oh god, you said SOLID ... somewhere, grauenwolf is feeling a disturbance in the force and must quickly jump on the internet to bash SOLID as a set of stupid design principles. Anyway, it's hard to say without fully understanding your domain, but from what you've said, my gut tells me ... maybe it's ok practice to call your image class, so long as that image class is an abstraction and not the concrete class itself. However, I would argue that your document class shouldn't be retrieving anything, but should rather just model the document itself. The retrieval of the image should be a service. But again, I'm making a lot of assumption about your design based on little information. So I offer these questions to help you: - SRP says that a class should only have one reason to change. Sort of a vague statement, but what it means is that the class should only serve one responsibility (duh) in that if something changes in the Image class, it should not result in a change in the document class. The document class should only change because something about the "document" has changed. - What is the point or responsibility of the Document class? Why does it exist? What does it represent? Is it an entity in your domain or is it a service? - I'm a proponent of DDD, so I always ask myself this question when adding functionality to a class: If talking about a document class, "What does retrieving an image have to do with the functionality of a *document*?" In DDD, functionality that doesn't quite fit *inside* of a particular model is generally removed to a service. The service then mediates between functions and models. This keeps your models clean and facilitates SRP. So for example, you'd have a service class that uses an `HttpClient`to retrieve an image from a url and returns it as an instance of the `Image` class. You'd have a different "service" that would medate between the image retrieval service and the document. As for the document making calls to your image class, I'd have to understand the 'why' first to offer an opinion.
Also, if you wanna talk through it, try to catch me on the C# discord. My name is draepetan on there: https://discordapp.com/invite/0np62rq4o8GnQO9l
Check his other posts... is basically a way to run in C#, C++ compute kernel across all the gpu and cpus on a device.. it has load balancing, he just added pipelining and some other stuff. 
Well that is pretty cool, thanks for the laymen's terms :)
From reviewing his code on GitHub he is a very smart person. he RTFM'd..
https://github.com/tugrul512bit/Cekirdekler/wiki The wiki is pretty straightforward as well. If you want to know more.
And you could of course build a M~~V~~C api server to do both Razor and only Http-Methods, but with asp.net functionality like Cross Origin Request options 
Most C# 7.0 features will have Edit&amp;Continue support shortly (in Visual Studio 2017 version 15.3). You can track progress at https://github.com/dotnet/roslyn/issues/17891
I second this. I learned c# writing bots I had already written in php. Gave me great points of reference to compare.
The page linked references ASP.NET Core specifically.
I apologise for my harsh intro. Sometimes I feel anyone can understand me but sometimes noone does. I better add more commentary and music along with the video. Thank you for critisizing. I was sleeping since I put the video to youtube. GMT+3
I know that. If just calling mono_jit_init ends with an exit 1, I don't care about the rest of the process.
The idea is to have a main C++ application that uses Qt as its frontend, spawns a C# vm and acts as a platform for a Mono/C++ application. This gives me access to Qt as a platform and mono as a scripting language. That way I have a multiplatform solution that works anywhere Qt and Mono are supported. And if Qt is not supported, I can rollout my own platform implementation (not an implementation of Qt, just the bare minimum to communicate with the OS).
If you need time critical / less keyboard-to-pixel latency then you can use its load balancer with multiple GPUs if kernel is separable. If you need high throughput for batches of kernels, you can use single device pipelining feature. Buffer uploads to GPU and downloads from GPU are handled by simple field set/clear on wrappers. I just put a demo of matrix multiplication using single device pipelining feature.
It sounds like a lot of effort. Mono itself isn't a scripting language, I presume you mean C#? Why do you want to use C# as a scripting language in this case, would it not be better to use an existing scripting language like python or lua or something?
I have used lua for quite some times but I want to have a faster native API development cycle and C# so far is a good fit for that. As soon as you have a C++ launcher that embeds mono, there's not a lot of things to do besides bridging things between the platform (be it Qt, directly windows, a console OS, Android...) and the C# runtime (that itself talks to native implementations). This is potentially a huge time saver as it enables my application to run on everything supported by Qt/Mono without a lot of efforts.
Could you please clarify? I'm excited about playing with generics and lambda functions ;-)
I would also like to try that, but is it possible with dotnet core? 
It is possible: https://github.com/AvaloniaUI/Avalonia However I think WPF on .NET Framework is more mature.
You can use this http://github.com/okhosting/OKHOSTING.Files
It is possible, see the reaction that /u/nutidizen posted.. but right now that isn't mature yet and I'd advise against it. If you REALLY want to build crossplatform UI's with C# you can use Mono and Winforms :) But that would look outdated. 
Dapper is by far faster. It's made and maintained by stackoverflow team. EF is very slow and coming from PHP it is a complete 180. Everything is based on classes and writing complex queries is more difficult than it should be. Of course you can practice and learn this method. But it would be way more difficult to learn ef than dapper. Writing dapper queries is very similar to how it's typically done in PHP. 
Hi, yes, I come from a background of good OOP in Symfony Framework, but I think C#'s biggest difference is that it's compiled, and run in 1 instance (possibly multiple threads), while the PHP process is started on each request, and killed afterwards. I wonder how C#'s web-frameworks works compared to PHP frameworks here, do the same rules apply, with a request going in to your application code, expecting a response back, and very little shared memory between requests, or are they more "coupled"?
This wouldn't be hard at all to write. How are you pushing files to the server currently?
Thank you, i'll let you know if it works out
By publishing directly on azure servers
I understand that but HOW are you publishing it on an azure server. I.e. are you manually logging in and copying the files, are you using a ftp client, is it done in some sort of automated way?
Not moving the mouse may be problematic in a game that uses a drawing surface because there are no window handles on specific controls etc. if you were automating clicks on a regular app you normally use the windows API and send a click to a handle. Instead you will need to use coordinates that move the mouse to specific x/y and then click. Without really knowing more about the game and environment it is hard to say much
I recommend Autohotkey (the scripting language) as a testing and development platform for figuring out techniques that will work for your game. Then you can research how to do those specific things with C# if needed. There are a dozen ways to simulate mice and keyboards, and many games only work with one or two types of simulation (or try to prevent it entirely).
Interesting I know what you mean by locked center now but have never tested this scenario to know how this type of game even reacts to a move mouse command. That said this is java and I think you could always mod in an API for these behaviors so it handles natively and call that API from your tool remotely 
I think he is referring to VS publishing. If that's the case the option to delete content should be a checkbox you can turn off. This will leave it alone between publishes unless you are including the original file in the publish and its overwriting 
Sorry, didn't understand you question! I'm publishing via the publish option on visual studio, hence i don't have control over the files i publish.
Yea that makes sense. As /u/nimbomob mentioned, there should be an option when you publish to not copy. I think you just right click on the file and go to properties of that file and find it. Sorry, it's been a while since I've pushed anything with VS.
Interesting. Thanks for the information:)
From personal experience I can tell you that there is really not a tool that can tell you why your network is slow because there are just too many variables. Some network traffic is "acceptable" and some is not but an application cannot tell you that. The best thing to try is to try and isolate your problem area which will require a lot of manual effort. You can try some of the following things: * Pick a computer that you know is consistently having an issue * Figure out if it is only occurring during a certain period of time * See if you can find something on that computer or a network segment that is too "chatty" or consuming lots of bandwidth. * Remove the problem You might also have to look into things like the configuration of your network devices to make sure that routing is setup correctly and that you don't have things like package drops that might be causing network re-transmissions to occur. There are just so many things that could cause the problem that you are stating. BTW, this doesn't seem to be C# specific so its probably not the "correct" subreddit to post the question.
I was actually more referring to the publish option that will delete all files and folders before it attempts to publish. I may be wrong but I don't know if copy output using "if newer" is even considered during a publish unless there was already a previous build done locally 
The issue is intermittent... we think it has a lot to do with the operations a particular department executes at particular times throughout the month. We can't exactly "remove the problem" because they are important operations... but we'd like to at least see which operations it is, so we can look at refactoring the processes that execute them. We can't even really disable them one at a time to see which is causing the issue because of the inter-relationships of the operations... As far as looking into network configuration or just recording what network traffic exists during a slow time... is there a tool or set of tools for that? I don't know exactly... but I suppose I need some way to start quantifying and analyzing the traffic. I suppose I am looking for something that can point me toward a professional approach of collecting and interpreting this information... websites, software, tutorials? I mean, when it comes to the software end of things, I am pretty confident in my ability to make a computer do what I want it to do... and I am also somewhat able to analyze the expected hardware/network requirements of that individual piece of software... but when it comes to issues such as a) That piece of software being used by an unknown number of instances. or b) Timeouts and slow downs due to unknown other applications which may be either third party or proprietary, but written by a different developer... possibly so long ago that we no longer even have the code. Sometimes... and I am not a network engineer so I don't know the full story here... but sometimes, a set of machines start having network issues and we hymn and haw looking for long running queries or what have you and in the end the only thing that fixes the issue is rebooting some router or something... I mean... at microsoft or google or any software powerhouse if they start experiencing network issues there has to be someone there that knows some kind of procedure for identifying the issue right? Even if every issue requires a unique plan to address it... there is at least some standardish procedure that can help identify the problem that needs solving right? 
Ok, so copy if newer didn't work for me, sorry for forgetting to tell you. I'm starting to think that generate the file if it does not exist will be the less painfull task between all the solutions...
PingPlotter. Disclaimer: I work on it. 
Nothing about Akka.NET in your comment is true. 1) This is from the very very early even before it was rebranded as Akka.NET https://rogerjohansson.blog/2014/01/01/pigeon-akka-actors-for-net/ Await support in actors was present there. The reason why Await inside an actor is discouraged is because it prevents the actor from continuing processing other messages. It is not a limitation, it is by design. 2) DI support exists for most of the popular DI frameworks 3) Akka.Testkit was one of the first modules ported 4) I believe that the 32 vs 64 bit discussion you are referring to is the one on Interlocked / atomic operations in the custom threadpool? if so, that is not was discussed, it was the atomicity of writes of 64 bit values. 
The easiest way would be to use MonoGame and SpriteBatch to draw the blocks.
The ScriptEngine is expecting to find mscorlib and possibly other libraries in the GAC (general assembly cache) which I don't think is used by Mono. You'll have to make your own ScriptOptions instance that has the correct references for Mono to make this work.
&gt; Is there a performance hit to just using the bare bones Value { get; set; } pattern? Compared to what?
Stupid choice of a name. "Strong typing" is already a concept - why pick something almost guaranteed to cause confusion?
Removed: Rule 3. Maybe you'll have some luck over at /r/sysadmin, /r/techsupport, or /r/networking.
No. From the Visual Basic team: &gt;One argument I’ve heard for using fields over properties is that “fields are faster”, but for trivial properties that’s actually not true, as the CLR’s Just-In-Time (JIT) compiler will inline the property access and generate code that’s as efficient as accessing a field directly. -[Source](https://blogs.msdn.microsoft.com/vbteam/2009/09/04/properties-vs-fields-why-does-it-matter-jonathan-aneja/)
well what I do for my deployment is I have a custom script I wrote that pushes everything that needs pushed via ftps. You could easily add into that if a file exists, don't push it, then just run that as a console app
As long as they are not virtual or too large (validation etc.), properties are generally inlined, yeah.
Yep, I was confused by the name.
If what you mean by strong typing is needing to explicitly convert from one type to another rather than conversion being implicit then that is what this article is about. Using string or int for lots of concepts that are actually different is weak typing in a language that supports strong typing.
Honestly I think twitter is a bad source for this stuff but the same people who blog a lot like hanselman (sp?) might be worthwhile . They blog the good stuff and I don't care how they are doing on vacation etc myself. 
It sounds like you only need to deploy it once. I wouldn't spend much time complicating it, and there's definitely advantage to trusting that your deploys are not going to inadvertently destroy any data.
I have no feelings either way about async main. I'm not sold on the default literal, though. I think it makes those examples harder to read. 
ah, good point and maybe that's a community difference. Raymond Hettinger, one of the core python devs, makes a point about only blogging about tech. I did ask about tech accounts as well though. Also, it seems there is a trend of doing personal stuff on FB and informational stuff on twitter. Sometimes they mix and if it gets too much, I unfollow. 
what do you mean by "ancestors"?. they're deeply composed together but they do not inherit. i think you should look into dependency injection.
in Unity3D (Mono), properties are slower than fields as it does not inline them
I referred to it as an ancestor in the context of a logical tree or an object tree, since that's already a concept in WPF. The D would be a logical ancestor of A because C made D, and B made C, and A made B. At any rate, can you add a snippet of DI for the example?
Just using a straight-up string, int, etc?
What is `//before the first int//`? What's "int"? EDIT: What are you trying to achieve? Could be an [XY Problem](http://xyproblem.info/).
If this is the case, just test to see if IndexOf(',') == 0.
Minimal. If it's a struct, there is no additional allocation/GC overhead and even the memory locality should be the same. If the property accessor is inlined there might be as little as a 1 or 2 instruction difference in the JITed code.
So "2,2" would return `true`, but ",2" would return `false`? If so, then you can just use `Length.TrimStart().IndexOf(',') &gt;= 1`. This first strips leading whitespace (just in case), then ensures that the `,` appears at least once, and it is not the first character. (Checks for it being the 2nd or later character) You could also use a combination of checks if it makes more sense or easier for you: `if(Length.Contains(",") &amp;&amp; !Length.StartsWith(","))` That said, if you're looking to convert only viable inputs to numbers, perhaps you could look at `Decimal.TryParse`.
How do you know "copy if newer" does not work for you?
I'm not sure what you're trying to do here. If `decimal Length` is already a `decimal` as input, then what are we checking for here? Is this basically, "Given some user input for 'Length', check if it is a actually number?" If the user inputs: * `2,2`: valid * `0,2`: valid * `2`: invalid * `,2`: invalid * `asdf`: invalid * ` `: invalid Is this what you're trying to do? EDIT: What about `2,`? Is that valid or invalid?
A class would need to be allocated and later garbage collected. This isn't *slow* per se, but it is orders of magnitude more expensive relative to a plain `int`.
I tried it ^^
I wonder if the default literal also brings in another odd behavior of VB's Nothing: String.Empty and Nothing are considered equivalent. This can throw NullReferenceException: Private Sub PrintSomething(ByVal input As String) If input = "" Then Console.WriteLine(input.Length) Else Console.WriteLine(input) End If End Sub If you pass Nothing, when it's compared to "" VB considers them to be equivalent and returns True. Therefore you attempt to access a property of Nothing. Likewise, using the equality operator with Nothing can be problematic: Private Sub UhOh(ByVal input As String) If input = Nothing Then Console.WriteLine("Nothing!") Else If input = String.Empty Then Console.WriteLine("Something that counts as nothing!" End If End Sub This always prints "Nothing" whether it gets Nothing or String.Empty because for value equality purposes Nothing is String.Empty. So you have to be very careful with String and always evaluate in this order: If input Is Nothing Then Console.WriteLine("Nothing!") ElseIf input = String.Empty Then ... Maybe if C# brings in that exciting feature, it can also be tainted by default instances. Then VB's revenge would be complete. tl;dr: I wrote this because I feel like the 'default' literal is fairly stupid and don't understand the compelling use case. Had the article been written in terms of something really common that this simplifies I might be more excited. Instead I want to say snarky things like, "I guess bringing in VB-inspired features is more important than, say, syntax sugar for the dozens of INotifyPropertyChanged implementations I've written daily since 2003." 
Well, the method as you have it now is already a decimal so it's kind of pointless to check for correct formatting after-the-fact. You could try converting to a string first (`string lengthString = Length.ToString()`) then do the check for the comma. Kind of obtuse but if it's to meet the class requirements, then ¯\\\_(ツ)_/¯
I was using the one here http://www.vcskicks.com/image-from-file.php How would I implement the one that you mentioned? the red says that Image could not be found.
Yup, that's the same one. Go to your project references and make sure you have a reference to the `System.Drawing.dll` assembly added.
Wow, thank you so much! It worked! You're the best!
No. Empty strings equaling nothing is a VB 6 compatibility issue. It comes from an era where null strings didn't exist.
Mono and WPF 
The default proposal is dripping with arguments against itself. It doesn't pass the smell test. I get that `default(T)` has (mostly generic) uses, but it needs to stay as semantically detached from `null` as possible. It's needlessly confusing that these three sometimes, always, and never return null respectively: T getDefault&lt;T&gt;() =&gt; default; T getDefault&lt;T&gt;() where T : class =&gt; default; T getDefault&lt;T&gt;() where T : struct =&gt; default; Not to mention it would no longer be semantically detached from `default` as used in a switch. Which could end up looking like some sort of an alias for `case default:`.
BFS on hanselman and jon skeet
&gt; Which could end up looking like some sort of an alias for case default:. Ugh, that's a horrible thought.
For what it's worth, I want `default` for this use case and only this use case: Task Foo(CancellationToken ct = default(CancellationToken)) Task Foo(CancellationToken ct = default) 
OK. Thanks!
The question you're asking is unclear; you have a lot of ramblings here. What exactly are you trying to do? It sounds like you want an upsert, but I don't see your matching logic. 
I didn't know that, but makes total sense. Thanks.
&gt; can't be collected by the garbage collector Circular references aren't a problem for GC because it only cares about rooted references. A good tl;dr of rooted references is here: https://stackoverflow.com/a/8458890 This can be collected: class A { A _me; public A() { _me = this; } } Main () { var a = new A(); a = null; } This cannot: class A { static A _me; public A() { _me = this; } } Main () { var a = new A(); a = null; }
`static` members cannot be overidden by derived classes (you cannot declare them `virtual` or `abstract`)
The default literal doesn't add any new behavior. It is the same as the default(T) feature that already exists. The only difference is you can leave off the (T) part if the type can be inferred from context. It's just a convenience so you don't have to repeat the type name.
default(T) already exists. There is nothing new here except being able to leave off the (T) in some places where it can be inferred by the compiler.
Well that settles it, thank you very much! You saved me some beating my head against the wall. I've just come up with an alternate solution where I put a reference to the originating spawner on each enemy instance, so that when it dies, it tells the spawner to free up a slot. All is good! Cheers!
I'm very new to C# and have only done a desktop application so bear with me but from I understand is you have a class that you wish to store your max enemy count and there are sub classes which create instances and what you have: Enemy class: 10 So the total mages and skeletons cannot be greater than ten What you want: Enemy class: 10 Total Mages or Skeletons cannot be greater than 10. I'm not too sure with the code you have but couldn't you just have a static class storing the max enemy count class and then count the instances of your objects or increment each time one is created in separate variables? Eager to see what others have to suggest.
You need to pass it in through all the constructors.
Static fields, properties, and methods belong to the class that declares them. They can't be made virtual or abstract. There are some workarounds. The static bits of generic types are per-generic type. So, we could declare the static count property on a generic type derive from a common base type, and derive everything that you want to have be countable from that generic. using static System.Console; namespace ConsoleApplication7 { public class Enemy { } // derives from Enemy, and must implement itself, which parameterizes the type in a way that prevents duplication public class CountableEnemy&lt;T&gt; : Enemy where T : CountableEnemy&lt;T&gt; { public static int Count { get; private set; } protected CountableEnemy(){ Count++; } } public class FooEnemy : CountableEnemy&lt;FooEnemy&gt; { } public class BarEnemy : CountableEnemy&lt;BarEnemy&gt; { } public class BazEnemy : CountableEnemy&lt;BazEnemy&gt; { } internal class Program { private static void Main(string[] args) { WriteCounts(); new FooEnemy(); WriteCounts(); new FooEnemy(); WriteCounts(); new BarEnemy(); WriteCounts(); new FooEnemy(); WriteCounts(); ReadKey(); } private static void WriteCounts() { WriteLine($"FooEnemy: {FooEnemy.Count}"); WriteLine($"BarEnemy: {BarEnemy.Count}"); WriteLine($"BazEnemy: {BazEnemy.Count}"); } } } The downside is that this doesn't give you a count that's accessible from the shared base type, `Enemy`. On the upside, if you're already using a generic type parameter on your spawner object, you could just constrain it the same way it's constrained on the `CountableEnemy&lt;T&gt;` type, and then use `CountableEnemy&lt;T&gt;` to access the `Count` property public class Spawner&lt;T&gt; where T : CountableEnemy&lt;T&gt;, new() { public void DoTheThing() { while (CountableEnemy&lt;T&gt;.Count &lt; 10) { new T(); } } } (You can't access it directly from T, though, because generic type parameters are kind of limited in terms of what you can do. It's the same property, though.)
I'd just set it on each Constructor of the subclasses.
Sounds more like you should be using a factory pattern to manage spawning. 
It sounds like you want enemies to be observable by spawners so that the spawner can take appropriate action when the enemy dies. Consider [using events](https://msdn.microsoft.com/en-us/library/9aackb16\(v=vs.110\).aspx) for this. In the spawner: Enemy SpawnSkeleton() { // Don't create more than 10 skeletons if (NumEnemies[typeof(Skeleton)] &gt;= 10) return null; // Make a new skeleton and increment count var skeleton = new Skeleton(); NumEnemies[typeof(Skeleton)] += 1; // Ask the skeleton to inform me when it dies skeleton.HasDied += OnEnemyDeath; return skeleton; } void OnEnemyDeath(object sender, EventArgs e) { NumEnemies[sender.GetType()] -= 1; } Then in Skeleton: class Skeleton { public event EventHandler HasDied; void Kill() { OnDeath(EventArgs.Empty); } void OnDeath(EventArgs e) { EventHandler handler = HasDied; if (handler != null) { handler(this, e); } } }
Advice: PLEASE DON'T USE SOMETHING LIKE THIS IN A MANAGED LANGUAGE! This falsy proposal is based upon code in a destructor - this is always almost a no go, as there is no garantee from the language that it will *ever* run. So the counter might be lying! If you need to have a strong runtime garantee to run some code after the usage if an object, refer to the ``IDisposable`` interface. It is quite sad though, that the above answer got three upvotes yet!
OK, I see your point now. Possibly a different title might have been better but as the link /u/MakesGamesForFun has posted in [this comment](https://www.reddit.com/r/csharp/comments/6feemu/strong_typing_a_pattern_for_more_robust_and/diib121/) (http://www.fluentcpp.com/category/strong-types/) using "strong type" for this pattern is not unknown.
this sums up pretty much why I think twitter is not a good idea. Quality information requires explanation, so in the end, the only useful posts in twitter are links to blogs.. therefore, go directly to the source and save the middle man...
The only idea I have... Consts are compiled into the assembly making the reference - the value is hard coded right into the IL for my assembly, copying the value of the const. If a const ever needs to change, then every program in world that copied the const needs to be recompiled. This is not true for static readonly - that turns into a field read. So if I need to change its value, I only need to recompile my library. Perhaps they did this to prevent hard hard hard deps on the core library's values.
This explanation sounds reasonable enough to me.
In simple terms you create a rest api using asp.net MVC then just send requests to it from your web pages. The front end (web pages) doesn't care what the back end (rest api) is it just processes the responses.
Although the JIT compiler might easily reduce those two to the same thing.
Not necessarily. Maybe in this case.
For me, if the problem can be generically described as "needing an instance of this member variable/property to be the same instance for every instance of this type", that is usually when I *consider* using the static modifier. I rarely ever use static types this way because it *usually* breaks encapsulation in an unnecessary way. Your problem seems to be the type of case I spoke of (breaking encapsulation unnecessarily). The logic for this would be better suited in your spawner class so that every spawner instance can keep track of their own 'children'. Other people suggested using events which I also must suggest. Each enemy could have a "Destroyed" event that fires when the enemy is killed. When the spawner spawns a new enemy, it increments the count and registers to listen for the "Destroyed" event from the enemy object. Once the enemy is destroyed, it fires the destroyed event which the spawner now uses to decrement the count. This event can pass in contextual information like the type of enemy that was killed so that, if necessary, the spawner can decrement the correct counter. What I like to do with my games is to have a central static class that contains all of my "game settings" via public get/private set static properties. Initially I hard code these values but at some point I initialize these values with values in a DB table. While not really conventional, I usually name these properties in all uppercase. So, for your settings, I might do something like this: public static int MAX_SPAWN_SKELETONS {public get; private set;} = 5; ... with the above property being in a static class or in a singleton. Now, I will say that this approach should really only be done if you expect ALL spawners, current implementation and future implementations, to have the same max counts. Generally, my spawners 1) keep track of only one entity to spawn (my preference) 2) have default values for maximum and minimum spawned instances and 3) assume that the maximum and minimum spawned instances count can be different from one spawner to the next. I then have some tool or other method to describe metadata for particular spawners so that when spawners are created, they are initialized with values I came up witb during design time. When I use the Tiled map editor, I create "spawner" objects on the map. These spawners have custom properties attached, namely "min" and "max". When the map is created in my game, every spawner designed this way is initialized with the values in those min max properties. If those properties are not present (or have negative values), the defaults are used for that particular spawner. The default values would be grabbed from the global settings file I mentioned previously. In unity, you can create an instance of your spawner and all children that are created from the spawner can be underneath the spawner in the object heirarchy. This, at the very least, allows you to enumerate over the spawner's children and 'inspect' what enemies it does have. While inefficient, you could do this via the spawner's update method. Im not an expert in Unity by any means, though, so I could be somewhat or totally wrong there.
[removed]
Note that the link above copies the first couple section of and then links to [a longer article](http://findnerd.com/list/view/Complete-List-of-Advanced-C-7-Features-Web-Developer-Should-Know/31815/) at a different website and crediting a different author. The source article summarizes out vars; tuples; pattern matching; local functions; expression-bodied member syntax improvements; binary literals and numeric separators; and throw expressions. I don't think there's anything too amazing about this write-up, but YMMV.
"Complete"
Removed: blogspam.
Removed: Rule 6.
Wow, thank you very much
thanks
Cheers! Thanks
thanks!
Are you using .read() ? I wonder if maybe you should be returning the data rather than the reader? I don't know though, just an idea. while (myReader.Read()) { Message = ((string)myReader["CH_Message"]).Trim(); }
This is why I love what we do. So many options and variables. I've used all of these methods before for similar scenarios. I guess at the end of the day it really comes down to the existing code base or whatever came up first if it's early on. Just be consistent 
Are you getting a new DataReader instance each time through the loop?
I tried adding to the line above this: SqlDataReader myreader = sqlDataGetter.dataReaders(sqlQuery); and replacing the While loop so it says: while (myreader.Read()) And the same error occurs. 
I don't see how the connection is being associated with the DataReader. You go from constructing a connection to invoking some function called runCommand, which I presume constructs a SqlCommand instance, but it doesn't use the connection as far as I can tell.
My mistake. The connection is actually opened in runCommand, which has this code: SqlConnection myConnection = new SqlConnection(Properties.Settings.Default.ConnectionString); myConnection.Open(); SqlCommand myCommand = new SqlCommand(sqlQuery, myConnection); return myCommand; I updated the question to address this mistake
I think the rule just means that inference will be skipped for the name that is duplicated.
Without seeing the rest of the code, I wonder if you're not looking at the same data reader? It appears as though you're trying to use a pool of data readers.
 You're overthinking it, just return an empty string as a false answer. /u/Hayfever76 that would do it. 
That makes sense, I guess it depends on a lot of things, but whatever they do, there are certainly patterns to help simplify. 
^^^ Its the same reason I always hide constants as well. I never know who is going to use my class for what. 
Which method would that be?
DOH... thanks. I was overthinking it!
True, that might work. Will that blow up if the assembly you are loading is implementing an older version of a shared interface and is missing a new piece it needs? As long as that is not a concern it works fine!
I will take a look at AutoFac. Thanks for the snippet.
Hasn't broken yet :) 
This is truly terrible advice, IMO. This kind of UNDERthinking is the reason I have to waste so much time reading inane documentation to determine whether the author even considered edge cases, let alone how the function actually handles each edge case. /u/hayfever76, if you follow the conventions of a Try function, as others have recommended, most everything is communicated clearly in the interface. I, as a future caller, instantly know that a given value could not exist and I know that you'll return false (rather than throwing or returning a magic value) in that case. It makes the contract more explicit and intuitive, reducing the number of questions I have to answer to use your code.
Removed: Rule 4. Plenty of resources online available by searching. Look around, make an attempt. Feel free to post questions if you have specific issues about the code.
This assumes that literal value is nowhere to be found in the registry. Assumptions are bad. Edit sp 
Looks like it, can't check full discussion, GitHub is down :) They probably should extend inlining to inline interned string references, that's what ldstr is anyway.
&gt; null-valued or not, you still need to check a return value. The point of the other patterns is that they strongly encourage checking the return value as part of the normal use of the function or its return value. (Although, the code I currently work with has an unfortunate amount of stuff that never checks, e. g., if TryParse succeeded, which aggravates the hell out of me.)
Null checking can be avoided with TryParse style but Is replace with bool check. Previously this was less clutter than a null check. Obviously null checking has and should be used everywhere applicable ... it's redundant and ugly but the language is taking steps to reduce the clutter and recently is almost "invisible". 
This! It is intuitive based on the fact that is how the standard libraries handle this situation. It takes all the guess work out of how it should be used. 
Have you tried checking the error state after calling `PostMessage`? Does it return `false`? If so, what does `GetLastError` return?
Hi, I don't know enough about WPF, XAML, or the .NET networking APIs to comment on those portions of your application. That said, I forked your repository [here](https://github.com/dbremner/SharpPusher) and made a few changes. I renamed your Response class to ErrorCollection and made it a property of Response&lt;T&gt;. The effects of doing so can be seen in [d66be23](https://github.com/dbremner/SharpPusher/commit/d66be23607a0b7b5055929e083adf6167e27f934).
Create an object and have the function return the object. Null if not found? I'm not a fan of tuples, and in almost all cases would rather have a proper class.
hmm it returns true. but it was working with the game earlier. edit: figured it out, setup the process in the constructor before setting the value of the int holding the id.
That's completely unrelated. ~~EF would have to be taught that when it sees a ValueTuple that it needs to check for the attribute that holds the names. This can happen today, but probably won't because it would be a new dependency for EF. (Long term ValueTuple isn't a separate dependency and it will be more likely for EF to support this.)~~ 
Man... all I can say is, we've all been there in one form or another. But remember you spent those last 3 months designing and banging your head over things for your initial setup. You are not setting yourself back as far as you think. You'll probably put a few days or weeks into it before you hit some sort of epiphany. Rollercoaster of emotions, development is.
You may be biting off more than you can chew here. You can make desktop or web apps in C#, but this is a project that's probably a lot more complex than you think. I'd suggest finding some other, smaller project and playing around with that, and working your way up to it.
Can I suggest for your first project you don't write something your father will depend on for his business. If you google .Net / C# tutorials you'll gets tons of hits.
"Ancestry" refers to inheritance structure unless qualified.
What engines have you used in the past?
Ouch, things like this happens and you only get wiser with more experience. At some point my take-away is that I rarely use singletons. The pros of singletons comes at a great cost of potential concurrency bugs (as you experienced), some times much more difficult to debug and test, and the possibility memory leaks (since any reference hold by a singleton is never released). At the same time allocations in .NET are basically free, so you have to ask yourselves why do really so many classes need to be singletons? 
I get it's not technically relevant, but I was thinking that now that tuples are cleaner syntax than anonymous classes in any scenario (well maybe), that might give a bit more motivation for them to actually implement it.
I have found https://github.com/mehdime/DbContextScope to be a very good and useful library for managing DbContexts. It's well worth looking at for any future work you do.
Try checking the distance from the mouse to the player. If it's too close, just skip the looking code.
I agree. Exceptions should be left for actual errors accessing the registry (say, security exceptions).
&gt; I thought that it would be useful if we can mark a word or a quote or whatever, press a button, then my browser opens and directly googles for the marked text. So basically Chromes right click and search with google?
Yes, but system wide, and with a key😅
Honestly, although this isn't the Autohotkey sub that sounds exactly like what a small autohotkey script would be perfect for. https://autohotkey.com/board/topic/13404-google-search-on-highlighted-text/ I just tested this and it works well. If you wanted to go down a c# application for this I'm afraid I can't help but I'm sure someone else here can :) browser=%OutDir%\%OutNameNoExt%.exe Change this line to your browser of choice by the way... IE seems to be default. For a really simplified version : https://pastebin.com/jFfU0kpC 
Returning 2 values isn't the most common here. The hands down simplest solution is returning null if it doesn't exist. Strings are naturally nullable. This isn't necessarily perfect, because you need to "know" that the string can be null and "null-ness" occasionally causes trouble in the form of `NullReferenceException`s etc. if you make the wrong assumptions at the wrong time. Nevertheless, it is an extremely common practice. Another option is to use the "Try" method pattern, an example of which is `bool int.TryParse(string, out int)` where the bool specifies success/failure and the actual result is passed through the out parameter. Yet another option is to use a specific "Option" type, commonly called `Option&lt;T&gt;` or `Maybe&lt;T&gt;`. These are generalizations of `Nullable&lt;T&gt;` which rather weirdly only works on value types. I find myself reimplementing this time and again - the reason is that you now get a semantic and idiomatic way of making it obvious that you're not *sure* an object exists. It is probably my favorite way by far. Another option, still, is to create a new type (class) to specifically contain the information to be returned from this method. Not what I'd say should be the go-to solution in most cases, but it does have its uses. Then there's tuples. In the case of plain old Tuple&lt;T1, T2&gt; I'd have to say I'm skeptical. For purely internal and highly local helper methods and the like... I guess. Otherwise, no. It's opaque, it doesn't tell you or anyone else what the values are, and "consuming" it in code is ugly as fuck with all the .Item1/2/3 stuff floating around. C#7's named tuples help alleviate this problem, but I haven't used them enough to really comment on those.
I gave him an option. I could write a paper about each design choice, but I didn't. This is Reddit and the op isn't looking for general design principles. The OP can decide. I would obviously choose making a class with an Exists method of sorts.
&gt; is a project that's probably a lot more complex than you think. Can you suggest some projects that I should looking at doing? 
Yeah with coding, there are some common practices, but for the most part code is meant to be written for readability. 
If you want to do this in C#, remaining in your current browser, look into the user32.dll functions. There is likely an easier way, but that's the way I know of. Additionally, if you want to do this in C#, using a custom control, research the WebBrowser Control. Lastly, if you want to do this in a fun way, research Selenium.
This is unrelated; but you might have some thoughts on it since you've been doing it. I like the idea of DI built in from the get go... I did not however like how everything I saw wanted me to inject my context into the controller methods? Was I missing something or is this how they intended asp.net mvc core to work? In the application I've been working with the most lately we have this concept of the view matching with a "view model" that is negotiated by the controller. The "view model" is a composition of the domain model objects OR other view models (which have domain objects/fields). There is a "logic" layer/namespace where there are logic classes match the domain objects -- that is where my context is managed (wrapped in using statements). view &lt;-&gt; controller &lt;-&gt; view model &lt;-&gt; logic &lt;-&gt; model I don't know why I'd want my controller to know or care about the context itself? ---- As far as fixing your actual problem; I think /u/nnomae has it right with creating a request queue in front of everything to stream it through. At least it would be a decent interim measure.
&gt; st for your first project I know I currently don't have the skills to build something that big and complex but that's the goal I want achieve in the future. Thanks for the suggest though. 
Oh man you bit off a big project, that's awesome, let your ambition guide you. It looks like you know what your projects goals are, but because you are lacking experience in C# it might be difficult to break this into bite-sized accomplishment sized pieces. Here's a rough outline that helps you accomplish this giant project. It should help you learn and allow for the creation of useful parts of the project to be done and usable WHILE you build and learn. Note: I'm making an assumption here that this will be a web application, but you can alter it for desktop if needed. Assumed information. You'll need to understand HTML, CSS, Javascript. **Basic first steps.** 1. Create blank MVC .net 4.* website. Check it out, debug, learn how MVC works. Models, Views, Controllers. 2. Setup a local IIS installation. 3. Publish the blank MVC project to this local IIS environment, make sure its working. 4. Get a server to host this project on, figure out what it takes to publish there. **Setup the database.** 1. Download Sql Express (Note there are limitations here past the 10GB range, but you can always move to MySql or purchase Sql non express in the future if you go over 10 GB) 2. Download SSMS (Sql Server Management Tools) 3. Figure out how to connect to your local Sql Express from SSMS. 4. Create a database for your project. 5. Figure out howto connect to your database from inside the MVC C# project using entity. (Id advice learning code first, but it's a little more advanced than you likely know). **Bite sized parts**, sorry but I am not going to break these down for you. Note: Keep this local until you build a login/authorization system. 1. Build employee management section (Employee Table and management page, CRUD (Create, read, update, delete). 2. Add active flag to employee table, allow for activating/deactivating. 3. Create employee calendar. (Who works when) 4. Update employee management to have some sort of Hourly/Salary tracking. 5. Wire up calendar with employee management to calculate pay. (Likely need to put some calculation for taxes... Maybe you'll need a section for benefits) 6. Some sort of user login/authorization system. You may want to do this earlier as the system becomes useful. I'd advise looking up C# SOLID principles as you move forward. Good luck man, it may look like a lifetime of learning infront of you. But this is all achievable. 
It's just personal preference. I personally make own class for each enum (I even make a new folder/namespace for them) no matter what, I feel like it increases code quality, readability and project structure quality. Pretty sure Microsoft puts them in their own class as well. 
I would prefer if the examples in official documentation took this route.
It's not that things need to be, it's about knowing when they *can* be. All of my data access objects are singletons in my apps, because they're designed to be so. Thread-sensitive objects (very few and far between) are pooled and consumed on a per method basis via a pooling factory. Resource effective and no threading bugs.
Thanks man, this is what I was looking for. Look like a lot of work, but it will be worth it in the end. 
I am building a cross-platform (REST) API client in C# and Avalonia: https://github.com/x2bool/restofus Come and join me if you're interested.
You need to make sure currencydrop is initialized. If you defined `InitializeComponent()` then you should add a line like `currencydrop = new DropDownObject();` or else add it to the constructor function. This looks like it could be a webforms project, if that is the case make sure your Form1.aspx contains and asp markup tag with `id="currencydrop"`
What he described is a very common practice 
this, updooted.
I try to keep all enums in their own file, instead of having one file with multiple (or even all of them). I just find it easier to navigate to specific enum that way, for example: http://i.imgur.com/ykl76YW.png I don't think there is any official guideline on how you should do this, just use the way you find the best.
I think the quote on the right side of the website you linked summarize the tool perfectly: A fantastic learning tool. Any experienced programmer will probably use automated tests to test their code instead of coding in a separated interface. This also has the advantage of writing tests as you code, so you're sure you never have big surprise when running your app for the first time. But if you are learning and what to see result fast without learning how to test, I think its great.
Thanks for the suggestion,i'll try looking into it
I see your point. However, copying large value tuples around could be expensive.
We have a large internal service at work that exposes an API designed to be queried by LINQ. We use LINQpad to run quick queries against it and to author more permanent ones that we integrate into our own applications. 
This is where LINQ shines. You can use the LINQ Select function to return the row you want. There's no avoiding loops though - under the covers somewhere deep in the LINQ code there's a loop. You just don't see it, that's all. But the simplicity and readability of the LINQ statement will be so much better than that loop, you'll wonder why you never used LINQ before :)
An item in a drop down menu has a value and a text. Sometimes, when you bind the dropdownlist u insert the text but all items has value="" which is sent to code behind like null.
Hmm, actually never heard of it. now I have to look up and firgure out.. love learning new stuff. thanks!
Sometimes the I've been working on this and that posts are interesting, too. You might come across some fancy new lib.
I agree that nulls are bad, but the kind of breakage that is being envisaged seems too much. I would prefer an opt-in non-nullable T! rather than changing the semantics of the existing unadorned T.
I understand your stance, but then we still have T being nullable or non-nullable depending on the underlying type. This proposal makes T more consistent.
You could make it less worser: Comparing a boolean value to ``true`` is worthless! What could it be? Truer than true? That is only the case for Manowar 😈
and they don't exactly like it.
[removed]
Can you post the full source code of `ReadExcelFile.cs` and `Program.cs`?
How are you filling the data in the drop down? Is it from a datasource or is it static? Also, check to see what default value is set on the dropdown menu. Perhaps you are loading this code prior to setting a SelectedValue?
yeah, im looking into it now. Here's one I am trying to figure out (I know now it can be more easier!) this code does exactly what I need it to do. I call a php page and this helps build a querystring. (I am dealing with some shitty outdated code) anywho, my next question is going to be how to get my Office Addin to communicate with a asp.net (c#) application. What I have below there HAS TO BE a MORE EASIER, and Professional'er line of code. for (int i = 3; i &lt;= Answers.Count + 1; i++) { additionalAnswers = string.Join(string.Format("ans{0}&amp;", i), Answers[i].AnswerText.ToString()); } 
I am struggleing with formatting code on reddit... how did you make it like that? mine sucks... and I'm too lazy to research..
I also use it a lot to try out different approaches, once i'm confident in an approach then i take it to my code base and write tests then code it as needed. But Linqpad is great for testing out a method quickly without having to spin up a project or go through a lot of effort. It's also nice to use it to query a database and be able to try out different linq queries (originally why the project was started iirc). Great for testing different data manipulation techniques before putting them into your code base.
Daily. It's fantastic for simple scripts where i used to have to write console apps. Not too much in terms of limitations, it's just running your code for you, but it's not for writing production systems or anything like that if that's what you mean!
These are additional answers, two are mandatory so ans1 and ans2 are already define somewhere else. Like I said, I sending a querystring to some legacy code.. 
They will never release samples/documentation showing every design pattern as they are meant to be bare bones to allow you to easily wrap your head around the foundation. 
The "formatting help" link under any text box.
As I understand it, each assembly will have an optional Attribute that indicates whether or not it is using non-nullable by default semantics. So yea, there's going to be a long period while we wait for libraries to be updated.
In addition to what others have mentioned, you can also download and use the standard version for free. The main thing that's missing is intellisense. Even without that you should be able to get a good idea of what it can do. If you're interested, I suggest trying it out yourself and seeing if you like it and if it'd be useful for your workflow.
There are [libraries](https://stackoverflow.com/a/3779217) which handle that for you. Imho WPF -&gt; PDF seems the easiest most to me, given you used WPF before Alternatively: Generate *.tex from your data (using a TemplateString and `string.Replace("@CustomerName", data.Customer.Name).Replace(...)`) and call the appropriate compiler (Test/Design manually in a TeX IDE to get that stuff working) 
C# interactive won me over ;)
Have a look to iText7: http://itextpdf.com/itext7
As long as it is a convenient ! instead of an annotation, it may also work without being the default.
&gt;dbcontexts being disposed Are you using lazy loading? If so maybe some .Includes() could reduce the need to keep contexts alive. It seems odd that scoped would act so differently, are you keeping state across requests? 
&gt; currency = currencydrop.SelectedValue?.ToString() ?? "No currency has been selected"; SelectedValue? will return null if SelectedValue is null and won't continue to the ToString() method and cause a null reference exception. ?? is basically &gt; currencydrop.SelectedValue?.ToString() == null ? currencydrop.SelectedValue?.ToString() : "No currency has been selected"; When the SelectedValue is null then the currency will be set to "No currency has been selected". You could also set a default like "usd" I also see that you use SelectedValue, if you are using only a list of string something like: "usd", "eur", "chf" ... then you need to use SelectedText. My suggestion is to write the line like this (With default currency set to "usd"): &gt; currency = currencydrop.SelectedText ?? "usd"; You could also set a default value in the combobox.
If you have issues with formatting the PDF content, you could also consider generating Excel spreadsheet equivalents, say via [EPPlus](http://epplus.codeplex.com/) that print nicely and can be converted to PDFs as a second step if necessary. Other benefit of this is that they're easily editable (or password protected) if some of the data/formatting needs to be tweaked for occasional one-offs.
It's not a unit of work unless your DI is set up properly, and DbSets are not repositories if you prescribe to DDD They're thin wrappers around dataConnectors at best and OOTB can benefit from either A) multiple dbcontexts creating boundaries, or B) good repositories. If you have a single DB sure you may not need it. However if you're working with HBase, MSSQL, and other data stores at the same time, defining explicit repositories with appropriate data logic you may need to share between services *can* serve a purpose 
Also seeing that you are quite new, but its not bad to know about this (This bellow is a bit more advanced for someone new). I see that you are calling .Equals() to check which value has been selected. What you could use for currencies is an enum (Learn more about enums here: https://www.dotnetperls.com/enum) because you are not taking any random input here from an user, instead going of a fixed list the user can select. We can then assign this enum as a data source to your combobox so the user can select it. Litte code example: https://gist.github.com/BattleRush/82e0bea0f36ff6d13f9317b4b2d88a09 On form_load you load the enum into your combobox with: &gt; cBoxCurrencies.DataSource = Enum.GetValues(typeof(Currencies)); then in your button click event you could do: &gt; switch (cBoxCurrencies.SelectedItem) { case Currencies.USDollar: break; case Currencies.Euro: break; case Currencies.SwissFranc: break; default: break; } here now SelectedItem works because we assigned objects in the form_load event. In your example you likely only added a list of string which then results that you need to use SelectedText. Should SelectedItem be null or a new currency you added then it will go to the default case, meaning that none of the cases did match your SelectedItem. Here is a small trick how you can autogenerate switch from an enum in Visual Studio: https://www.reddit.com/r/csharp/comments/6aio1x/10_visual_studio_tips_you_wish_you_knew_10_years/dhfh5ta/ I hope its not too much confusing, but tought it maybe not be bad to know that you could solve it this way.
Manowar...that's a name I haven't heard in a *long* time
In my company we enforce the rule: * Separate file if other classes will use it. * Same file if you only use it in that class. 
https://www.youtube.com/watch?v=_uMEE7eaaUA
I just don't understand the purpose. do people really have to test out the linq expressions? What am I missing ? If you need to pull data why not just use sql management studio and write a query if you need 1 time data ? I see a lot of "testing without touching code base" but again another concept I don't understand ...can't even think of a valid reason except maybe you don't use version control ? 
This is all good advice. But I'm taking it as a given that you won't have time to fully address the problem before your deadline. It's important to adjust customer expectations as soon as possible. Don't just hope you can get it done. Give them the opportunity to mitigate the damage by giving them as much advance notice as you can.
I'd love to use it for quick prototyping, but the UI is Windows-only so I can't.
They may not need to update the BCL directly. I'm still trying to understand it, but I think they are working on something that would allow them to annotate an existing library. Basically add attributes to classes using a "metadata assembly" that is only referenced by the compiler. Kinda like what they did for Code Contracts.
Overall I agree with you, but... &gt; it's certainly much simpler than the old ASP.NET Only PHP or Classic ASP is simpler than the old ASP.NET. No routing, no controllers, just start adding pages.
I don't think that would even be possible in most scenarios. The compiler will only generate the attribute on publicly visible tuples (return values etc.) and not for locals, and the names are attached to the member/parameter and not to the tuple type/object that is passed to EF.
Oh, right. Yea, that's not going to work at all as I currently understand it.
Once in a rare while I turn off Option Strict so that I can work with COM or JObject. But yea, the vast majority of the time I turn everything on.
I believe you are seeing is attempting to spin to look at itself because the ray cast from mouse position hit the player geometry. It's been a long time since I've done any 3D related projects and this reminds me of unity. I think there was functionality to filter/specify a layer to do it on.
Yeah, Option Strict follows a pattern I find is often true in "helpful" programming features. It's best to tell newbies to turn it on and never look back, but as they gain experience it's OK to point out the exceptions. I wouldn't want to write COM/interop code with Option Strict on, and it was so miserable to do so in C# they introduced dynamic to help. Now default instances, damn. That's the best trap they ever laid. In 10 years of posting on VB forums, I've never seen code using default instances where the problem wasn't related to the default instance.
I try and do this as well - put them in their own .cs file. Microsoft is all over the place with this. Depends on which product you look at. 
Looks like an easy way to create user interface workflows in unity. I'm just starting to learn unity myself so I might look at it more once I get to interfaces.
[Ahem](https://www.reddit.com/r/dotnet/comments/62f76r/ive_created_a_new_platform_for_building/)
I use it to verify algorithms and LINQ queries. I don't want to create a new project in Visual Studio, in LINQpad it's faster.
Will those improvements be also implemented in the .NET franework?
id like to see how this compares to java throughput.
I use it alongside [this JSON driver](http://ryandavis.io/a-json-data-context-driver-for-linqpad/) so I can use LINQ to analyse, and experiment with, large JSON responses. I also use it sometimes to test out language features, though I will usually use C# Interactive in Visual Studio if I have that open already.
I've used https://github.com/jdiamond/Nustache before.
That's a good rule! see, where I am at, there is ZERO coding structure. we use 99% asp classic. I have been making a push for c#/ASP.NET and get a lot of push back, but I have a feeling we are about to make a change by the end of this year. I, However have already started doing everything in either php or c#.net, I told them (and they know they do not want to lose me, I wrote their entire docusign API's in php, no one else understands the code, the see my curl calls and they are like WTF does that do? I have people come to me to ask how to make better classes in vbscript, I tell them, you don't (you can... but, well, its pointless) anywho, I am putting together a bunch of req's for coding in a new lang, and THAT rule will go down. 
I'm 41... I have worked in IT for over 20 years. from a bench tech building computers in the late 90's to the Helpdesk lead of the FBI, to the main Application packager for the a US Army installation (20k+ users) To now, an application developer. I have always had coding experience. I know enough to make good stuff, but to make good stuff "good" the right way. I struggle. I have a design idea, then it falls apart as I am seriously ADHD, Dyslexic and Dysgraphic. Like I said, I found myself doing XML routines inside to form buttons. NO NO NO BAD HAYSEED! BAD! I am not the normal dichotomy of a developer. I do small engine repair, electrical, plumbing and also vehical repairs (damn near professional quality electrical work) as well as I am an avid hunter and outdoorsman.. finding time to learn new shit is hard. I just came back inside from jumping on my trampoline! im 40-teen as my scouts call me... See that tangent there. that is what happens in my code and I have to go back and clean it up. This time, I am doing ONE CLASS AT A TIME.
An example from one of my viewmodels: private void OnProductAdded(ProductAddedEventArgs args) { Application.Current.Dispatcher.Invoke(() =&gt; { Debug.WriteLine($"Adding product '{args.Data.Name}'"); Products.Add(args.Data); }); }
Seems alright to me for a basic way of computing difference. It's a pretty [complicated subject](https://stackoverflow.com/questions/613146/computing-the-difference-between-images) with a variety of ways of defining "difference", but I imagine for your purposes this is probably good enough. Two things I would suggest though: 1. Consider rewriting it to use 64 bit `long` types instead of 32 bit `int`. Reason being that for a large enough image you could overflow the total `dif` variable. Assuming a worst case scenario of comparing a full white and full black image, the maximum image size would be 1675x1675 pixels: `1675 * 1675 * (255 + 255 + 255) = 2,146,303,125`. Max value for `int` is 2,147,483,647. This is a worst case scenario, but even an image that is ~50% different (average of 128 units per colour channel off) your max image comparison size is 2364x2364. 25% different (64 units per channel) is 3343x3343. 2. Perhaps consider normalizing the return value with respect to the overall image size. Given an absolute count of difference can make it difficult to compare "how different" images of two different sizes are. For example, a 2x2 full white compared to full black results in a "difference" of 3,060. But a 100x100 comparison of images that are only one colour channel unit off full #000000 vs #000001 yields a difference of 10,000! Perhaps instead you can return a `double` value that represents a percentage difference of the total worst case scenario. A 2x2 has a full range of `2*2*(255+255+255) = 3,060` and the 100x100 is `100*100*(255+255+255) = 7,650,000` So in the above example, the 2x2 would report as 100% different (`3060/3060`), and the 100x100 would report as only ~0.131% different (`10000/7650000`). If having the absolute difference is still useful/imperative for you, you could return both values. Beyond that, any consideration for checking the alpha channel as well? I'm also not sure about calling `DoEvents` after checking every single pixel. I don't know if this is a good or bad idea, or if it should maybe be lessened and run on the outer loop (per `x`). Perhaps you could also just push all this to a background thread and not worry about calling it at all. If you find you're having performance issues, `GetPixel` can be a bit slow. There's a [few ways](https://www.google.ca/?gws_rd=ssl#q=C%23+Bitmap+GetPixel+fast) how to get around it.
Removed: Rule 6
I was introduced to it by a superior at work and I'm loving it. I mostly use it to do odata queries to impersonate a second computer and test my signalR entity update logic locally. So I basically use it for light probing and testing as I go. A very valuable tool that's worth the money.
I'd start with [Microsoft Access](https://products.office.com/en-us/access). It has all the functionality you'll need built-in (database, forms, reports, web, etc) presented simply. You just design your database, forms, reports and stuff "just works". It's limited, but you can run a small business off Access apps. Once you get a prototype working, you can tackle a true web application. Plus, tools exist to help you eventually move data/code from Access to more sophisticated platform later.
A point of pedantry: it isn't C# that has these numbers associated with it; it's the runtime. The .NET Micro Framework clearly will not use 700MB of memory on a 64KB memory microcontroller, but you can still write code for it in C#.
Lmao, touched a nerve?
[removed]
I'm really trying to wrap my head around why people hate null so much. Especially when you cant override a class `default(SomeType)`, what would the advantage be to something being instantiated to some arbitrary default? Also nulls are very convenient when writing XAML-use classes that have a very specific requirement for value instantiation order, ambient properties, complex deferred type conversion-dependendent XAML value set scenarios, etc. Also when executing resource-intensive effective value fetch once, only on an 'ad hoc' basis, then cache for future fetch calls" or doing things like a reflect-once and build a delegate to drastically improve performance of a function that is heavily used that relies on Reflection. Plus properly using things like `[NotNullAttribute], [CanBeNullAttribute], [ItemNotNullAttribute], [ItemCanBeNullAttribute]` on args if you have r# (nuget jetbrtains.annotations) makes it easy to tell when your code could potentially need to handle a null value.
Exactly, and how much $$$ are you willing to drop on an implementation...
Why is currency a string?
Join microsoft-70-483exam-questions.blogspot to gear up with 100% valid and latest 70-483 dumps and pass 70-483 exam easily. The [70-483 braindumps](http://microsoft-70-483exam-questions.blogspot.com/) here are consisting of competently planned and verified 70-483 questions answers. They are the true secret of success on a first try. While failing in the exam, the candidate will be totally refunded.
It might as well be a convention to always write T! instead of T. I didn't argue that having non-nullability is bad. I argued that it would add a benefit even if it wasn't the default, because it's still better than having to clutter everything with null checks. 
Note that in April's proposal, `x!` means "The compiler can't prove x isn't null, but trust me when I say it won't ever be null."
That sounds horrible. I'm glad you are slowing getting rid of that garbage.
There will be 5 to chose from. Each being a different value. 
Definitely throw ArgumentException.
um, the benchmarks game is p unbiased. [python is one of the worst performers on the site](http://benchmarksgame.alioth.debian.org/u64q/python.html)
My point was that typical Linux users have a strong hatred for managed languages like Java and C# and usually prefer C for some reason. Also, they like Python a lot despite it being interpreted and slower than Java and C# because DAE evil managed languages.
Wow, these are really quite impressive improvements, especially for the ad-hoc nature they're said to have been made. I'm already coding for netstandard 2.0, so I'll have to give them a try - I've been avoiding various APIs since I thought them to be slow - and they were, clearly - but I may be able to refactor to actually use them now, for ergonomics! Sweet! On the performance front, I've been rewriting a ringbuffer implementation of mine (it's on NuGet) with the new `Span&lt;T&gt;` API that's in the dotnet pipeline, and it's now super fast (I'd already thought it so, but it's now at least several times more so ;) ) as a result since it's all native buffers - including library user I/O, optionally - under the hood. So, I can already personally attest to some of the newest stuff being of great value. Thanks to everyone that contributed. I hope to make my own yet.
Awesome! Thanks for your efforts!
You are in the few then
[removed]
lmftfy enum FatScale {Big, Healthy, Husky, Fluffy, Damn, OHellNo};
I don't think you can beat iTextSharp. Someone else mentioned SSRS, which is also a good solution. If it's worth spending a bit of money on I've use devexpress reporting and it made my life a lot easier.
Everyone has already made great exceptions so I'll comment on the readability of the code. I'd refactor this: &gt; if (origin.Width != destiny.Width || origin.Height != destiny.Height) into a function and maybe call it WidthAndHeightDontMatch or something that reads well in English when you start the sentence with If. dif can be difference - intellisense is there so you don't have to abbreviation variable names. Same with ret in your other function. In your ColorDifference function I would make the parameters originColor and destinyColor for clarity. These recommendations are all for the next developer, the closer to English you code the easier it is to read.
Yes, mostly to build linq expression to query my db. 
BOOO! SingleOrDefault is the same error :( CS1061 'DataGridViewRowCollection' does not contain a definition for 'FirstOrDefault' and no extension method 'FirstOrDefault' accepting a first argument of type 'DataGridViewRowCollection' could be found (are you missing a using directive or an assembly reference?) 
&gt; hich of the approaches are preferred? 1. Creating Enum folder to hold all and categorize them inside. Enum yeah, I use var when defining most of the time. I am still getting used to being consistant. oh, and yes, I use good var names most of the time. I once used a variable (bool) goTellCustomerToFuckHimselfWithAnAlluminumBat 
Nope. I think I got it. correctAnswer = Convert.ToInt32(dataGridViewAnswers.Rows? .Cast&lt;DataGridView&gt;().SingleOrDefault (row =&gt; Convert.ToBoolean(row.SelectedCells[0].Value)));
I'm working on an SDK to read and manipulate Bethesda data files (basically plugin files for Skyrim &amp; Fallout 4). Once that's reached a stage I can work a little with, a more abstract layer will be built on top of that.
I think you're missing the larger point, especially because I'm not arguing for a registry object class. A function signature like: public string GetRegistryValue( string key ) gives you absolutely no hint about what it does if the key doesn't exist - that edge case is entirely left to assumption and documentation. The more assumptions the consumer has to make or documentation they have to read to understand your function, the more opportunities for a misunderstanding and a bug. You immediately thought returning empty string was a perfectly reasonable things to do. I disagree and would never have that function return an empty string - I'd have it throw, as I think calling _that specific signature_ implies that you expect the registry key to exist. But forget which way is "better". The point is this: If I was consuming your function and assumed you would throw, I would not handle that case correctly (perhaps my code would assume the registry is corrupt because "that key is never supposed to be empty!"). Similarly, if you were consuming my version of the function and didn't expect it to throw, you'd get an exception you never thought to handle; maybe that corrupts your state or crashes your program. Because the signature made no provision for declaring what it would do, we have several different possible approaches and that just means opportunities for disagreement and bugs. Much of good programming is, IMO, about clarifying intent and minimizing assumptions. A try function does that about as well as can be done in C#: public bool TryGetRegistryValue( string key, out string value ) This immediately makes it clear that you can fail to get a particular registry value. It makes the caller think about when it would return true vs false and what they should do in those scenarios. It also matches well-established conventions in the BCL. It's not perfect because C# isn't perfect, but it has strictly fewer ambiguities than GetRegistryValue.
If you aren't already, I suggest becoming familiar with these concepts. I see some potential problems in your code that will stick out once you read these. * [There Is No Thread](https://blog.stephencleary.com/2013/11/there-is-no-thread.html) * [Don't Block on Async Code](https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html) * [Tasks Are (Still) Not Threads and Async Is Not Parallel](https://blogs.msdn.microsoft.com/benwilli/2015/09/10/tasks-are-still-not-threads-and-async-is-not-parallel/)