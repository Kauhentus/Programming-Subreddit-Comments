Actually, user property can fit my needs. But my user object little bit complex. So I dont need only id, username etc. things. I need some mapped objects that connects user too. I could’t know how can i deal with it. 
Use memory cache.
You say, store class in memory cache and use it right ? 
You cannot store class, only instance of it. Memory cache stores objects whole without serialization. As any memory cache you should use it only for non-critical I information display. You should always pull latest data if you need to update something that cannot be updated partially. 
Thanks for help, i’ll give it try :)
Is it possible to for example execute a code in the policy if it success on retry? :)
Since I work part time for a large corp, we try everything out. For some older projects we landet on C#/.net too, unfortunately we found out that desktop vs. mobile doesn't really fly as *one solid codebase* in real circumstances. Mobile guis, in practise, can be abstracted away and Xamarin Forms is quite good at that. If you ask someone on IOS "does it feel native" then half of the users don't care or say "yeah, this looks like some sort of overlay, but I don't care either". Going full native is useful, when you make like an specialized app with lots of whistles, graphs or something. We a have a graphic, cpu intensive app for one of the customers and they keep a java + swift codebase, because these users are very sensitive to responsive design. There is discussion to use the swift backend part on Android too. The typical data entry kind of apps just don't have this kind of native requirements; and such layers like Xamarin.Forms, NativeScript or Googles Flutter can do 80% of usecases and you save lots of of time, money and don't need hyperquality devs. Xamarin Native is a good idea, when you have some tabs/forms that are visually specialized , but the rest of the app is the typical forms/list/image viewer. Is it the best available? No. I found Xamarin slow, bloated on lower end devices, and the teams seems always a little behind the curve. But at the end, its free. You could make some test apps/packaging and see if the result is what you (or your customers) would accept in terms of size, startup speed, visual performance etc. There are some options to speedup the experience, and maybe that is less work than write everything in a native way. There are also mix usecases like writing the whole backend in C# and adding a Java/Swift frontend to it - but thats a quite advanced usecase.
Is it possible to do ExecuteAsync multiple Task&lt;List&lt;string&gt;&gt; functions? Then assign data? IF so, how could I do this?
To be fair to OP, designing a DB schema can be considered "programming" a database since there are many SQL elements like indexes, indentities and constraints that modifies the behavior of the db. Still, though, using the phrase "programming a database" in place of something analogous to "designing a database" doesn't "feel" like it fits and, to me, is an odd way to phrase it. My guess is that this oddness of using the word "programming" comes from newbies learning ORMs like Entity Framework -- they write objects that design the database which **is** programming.
Alright thanks, I will change the link when I get a chance. I might take this post down.
public static Dictionary&lt;UserName, User&gt;()?
When fixing some typo or really trivial mistake &gt;0
Well done
It's like indenting the first sentence of a paragraph. It indicates the start of a new thought. To me, I often wonder why people *don't* use vertical braces. Reasons why you should: * Visual Studio defaults to vertical brace formatting. If you wish to use a different style, you'll either need to 1) fight VS when writing your code or 2) modify your default brace formatting. If you opt for #2, you'll need to also ensure your team uses the same settings or you're going to be seeing a lot of version control diffs that show format changes instead of the actual functional changes. Now you have to ensure everyone uses the same settings which introduces some overhead. This doesn't *really* apply if you are using an IDE that defaults to a different format, but most people will code in either VS proper or VS Code. * Vertical alignment creates visual space to separate the method declaration from the method implementation (as well as other scopes). This is like indenting paragraphs or putting a line break in between paragraphs. The benefits of vertical alignment are basically the same as the benefits you get when you format a Word document for readability like double spacing, indenting, etc. * For C# and many other compiled languages, white space has a negligible impact on compilation times, if an impact can even be measured. I've seen someone argue that it affects compilation time and it just simply isn't the case. I've even seen someone argue that it impacts *runtime* performance which is absolutely untrue. IMHO, I think vertical braces makes the code easier to read. This is going to differ from person to person but I just don't see the benefits of a different style. If you are using VS, I'd say that you are just causing unnecessary overhead by using anything other than the default formatting that VS provides. Ultimately, the "when in Rome" principle applies. If the rest of your team is using X format, you need to be using X, not Y. Preferably, you should be writing in with a style that is consistent with the conventions of the language you are writing in. In JS, use K&amp;R. In C#, use vertical.
Depends on how you wrote those functions. Functional programming is a thing :-P. However, consider how a change in "business requirements" of your game would affect your codebase. If you find that adding a new feature or fixing a bug requires extensive changes and/or refactoring, you've written poorly designed code, OOP or not.
what is a flower box? Never heard this term before.
[Midori](http://joeduffyblog.com/2015/11/03/blogging-about-midori/) is the Microsoft project that I was aware of. It sounded really compelling.
//*************** // comment //***************
It actually bothers me that we *can* use aliases to access the static functions. `Int32.Parse` has more of a "visual pop" than `int.Parse`, especially since we are accessing static members of a class with a *lowercase* name.
&gt; I recently finished a coding boot camp and I still don't feel like my skills are 100%. I've been working as a developer for several years and I still don't feel like my skills are 100%. Get used to it. &gt;I know a lot of interview questions revolve around C#, java, and other powerful languages. If you're applying for a position as a C# or Java developer, then you will obviously get questions about those languages. I doubt PHP or Node developers would get questioned on their C# knowledge though. &gt; But i'm here looking for practice resources that aren't ridiculous, Time to start developing a real application then. Those puzzles will not make you a better junior developer. Having an actual portfolio with projects will. If you have no inspiration, then I suggest building a good old 'to-do' app. if you've already done that, then another good alternative is building a blog.
To each his own. Web development has its headaches but I love the Wild Wild West type of arena, others prefer more structure in their environment. Redis cache was one of the most pleasurable caching experiences I've had in my lifetime. 
i was avoiding any intelligent paradigm at all, it was functional or data oriented or anything
I will always and forever declare private backing fields with underscore prefixes like this: private string _Name = "John Doe"; //or whatever I also use RAGE CAPS with underscores for constants like this: const bool RAGE_CAPS_ARE_ANGRY = true; For UI controle like in WPF and Winforms, I'll also prefix the control name with its type. For example, `txtUserName` for a `TextBox`, `pbxLogo` for a `PictureBox`, `cbxStyle` for a `ComboBox` etc. There are a few other scenarios where I break from convention but those require a specific set of circumstances whereas what I've said above is how I always write my code.
The Content.mgcb file is supposed to be opened with the MonoGame Pipeline Tool, which Visual Studio only knows if you're using a MonoGame template. By default, it tries to open the file in a text editor window. All you do is right-click the file in the Solution Explorer, choose "Open with..." and select the Pipeline Tool. You should be golden.
Someone is doing is part
is the source code available somewhere? didnt see it on your github, im trying to get more into csharp and this just looked like an interesting project
If you're using Identity store it in claims https://korzh.com/blogs/net-tricks/aspnet-identity-store-user-data-in-claims
Asking db is gonna make my database tired. So much operation i need. I’ll update my class when data has been changed. That’s the plan at least :)
I’m gonna check this out. Thanks
Not yet, but I will try to put it on github later on
How would I go about creating a to-do application? Can I create one with only C#?
You can use any language you like. If you want to get better at c#, then use that
I use the magic comment toggle trick. ``` //*/ SomeCode(); /*/ SomeOtherCode(): //*/ ```
&gt; How would I go about creating a to-do application? A to-do application is a good start app because you can make it as simple or complex as you wish. 1. Start with creating a list of to-dos and displaying this list. 2. Make the list interactive. Let users add, delete and modify to-dos. Make them able to check to-dos as 'completed'. 3. Modify your application to be able to track to-dos for multiple days. Add a calendar so a user can select one or more days and show only to-dos for that period. 4. Store your to-do's in a database, so they don't reset every time the page reloads. Make sure to learn about how to structure data in a database. 5. Read up on how to structure applications. Refactor your program to use 3-tier architecture. 5. Add a login system to your to-do app. Make sure users cannot see eachothers to-do's. Make sure your login system complies with standard security practices like hashing and salting passwords. &gt; Can I create one with only C#? Yes. I'm more focusses on the web side of things, so I'd go for MVC. Although I currently mostly use an SPA as frontend and a C# web api as backend.
[OP](https://media.giphy.com/media/YYfEjWVqZ6NDG/giphy.gif)
Store this user information inside the server side session variables on login. HttpContext.Session
I am extremely new to this sub (just came ~ 10 minutes ago), so i don't know of the recommended resources here; however, if you hop over to /r/learnprogramming they have a readme that has TONS of different projects. Pick one that sounds fun and shoot for the stars :D
I honestly have no clue what you're talking about. We use words to describe things. Turns out that works pretty well. I'm not just randomly writing tests because "lol code coverage!"
This solution, has the potential to fuck up the rest of the desktop environment on OpenSUSE tumbleweed with plasma environment - just for a heads up
Hi, can you confirm this is a problem under VS Pro? I have the same issue, and I'm running VS Pro (latest version)
Ah, makes sense now :-D.
They still made some mistakes and shipped a little too early, which is why we're stuck with a bit of crud.
I've seen exception-based codeflow in C# too... it's so bad. They used catch like if statements.
Why do I always get the impression that when the topic of ecosystem comes up, anything from Microsoft doesn't count? It's like you can build someone a pretty house but they'll add points in favor of the neighbor's worn-down shack because he let someone else make the door.
I was thinking the same thing! XD
Swashbuckle does not require xml documentation to work. It honestly works better without it. 
Show me then 😊
&gt; not the C# you know and love If you look at the "C#" code in this proof-of-concept, it's already not the C# you know and love. About 90% of it is marked as `unsafe` and resembles C++ more than C#. I didn't even know that C# used the `-&gt;` operator until I looked it up after seeing it in this code. (FYI: It can be used, along with * and &amp;, in `unsafe` portions of code.)
If you follow the basic setup, it works without xml out of the box. https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/README.md https://github.com/mattfrear/Swashbuckle.AspNetCore.Filters provides useful attributes to add even more data. 
Your link says that you need XML comments to have human readable documentation 😊 https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/README.md#include-descriptions-from-xml-comments
We implemented this by having an IUserContext interface, which is responsible for keeping track of the current user and provides a single, CurrentUser property. In the website portion of the app, our dependency injection maps the interface to a class that stores it in HttpContext.Items, effectively making it a per-request thing. The advantage here is that in portions of the code that are used from other contexts such as a scheduled task or a long-running daemon type service, we can just use a different implementation of IUserContext that stores the current user differently (such as in a static variable or in thread local storage) without having to change any of the code that is shared with the website or pass around the current user. [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-2.2)
A lot of the lessons learned from Midori have been applied to C# and Windows - [http://joeduffyblog.com/2015/11/19/asynchronous-everything/](http://joeduffyblog.com/2015/11/19/asynchronous-everything/) 
Every private, protected, internal, etc. member is upper camel cased. :\\
If you look at my second link, it includes attributes to handle creating more human readable documentation including examples. You can also easily write operation filters to customize how data is presented. 
Streams+QueryDsl=Linq, though QueryDsl doesn't have any dedicated language support like Linq does. Also Streams is so unpleasant compared to the IEnumerable extension methods in C#.
We have built a facade on top of the HttpContext.Session. Just make sure its loaded as scoped
Do you know any good Identity tutorials? I've been trying to set it up on my website, but every tutorial I find seems to offer out of date and conflicting data.
I see, you can actually add most of this via Attributes, some of it needs to be added in very weird ways, imho. But basically what you are saying is there is nothing the standard feature in C#, can't be solved by adding another NuGet package. For me it comes down to following best practices, and I would rather be using XML documentation, rather than some custom attribute types and styles. It does however add another solution to adding documentation, that could make this easier in some regards. I'll look into this and maybe post another blog post if I find that it adds value to the developers workflow. 
Hi, thanks! I checked with the senior Devs and they made quite clear that I shouldn't add new tables at the moment. I'm looking at the Action Filters now, perhaps those could work. Thanks!
The only experience I've had with it has been just from including it in File -&gt; New projects, not adding to an existing one. If you start a new MVC site and include it you'll see the files it adds.
I tried that too - for some reason, adding it when you start a new site, or adding it after the fact, adds two entirely different implementations of Identity. The one that comes with a new website is incomplete, and has migrations that include things like roles, but no implementation. You can Add Scaffolded Item -&gt; Identity, but all these files are Razor Pages, and still don't include any implementation for roles. I could add roles myself, but I'm trying to stick to what little standard there seems to be for Identity.
if you are using identity for your auth then it will be pretty easy. &amp;#x200B; im confused as to why a static currentUser will not work? i have a static class that holds userId, and it works for every user logged in on the platform
ive not had an issue using this &amp;#x200B; &amp;#x200B; public static string UserId { get { return HttpContext.Current.User.Identity.GetUserId(); } } &amp;#x200B;
Yes, totally join. If you dont include identit in first, everything going complex while you include it later. Scaffolding is not good way. 
Remember that `list1` and `list2` are not lists - they *point at* lists. Also, remember that if you write `list1 = ...`, you are changing the contents of the variable `lists1`, in other words, you are changing what it points at. Therefore: list1 = new List&lt;SomeClass&gt;; // Changes what list1 is pointing at list2 = list1; // Makes list2 point at the same thing that list1 points at list2 = null; // Makes list2 point at nothing
It is what i was trying to do. Do you have any example code ? 
Sadly i didnt use identity in first. Also i have two projects in one solution. I could’nt add identity properly. Static class make sense but lots of people didnt advice it to me. I got a solution with cookieAuthenticator anyway. 
how are you acheiving it using cookieAuthenticator
It's an amazing option for free, I use it for some projects even though I have full VS.
Visual Studio is still way more feature rich. The debugger is unbeatable. 
VS Code is a first-class citizen in .NET Core development because the CLI is so rich in .NET Core. That said, Visual Studio offers a more traditional IDE experience for those who prefer it. 
&gt; Are you running short on new lines? No, but I *do* have limited vertical screen space. As in, I can only see so many lines on the screen at once, and I would prefer those lines to be as efficiently filled with code as possible. Empty lines between methods make sense. Having an opening brace on its own line, when the beginning of the method does enough on its own to visually signal the beginning of a new code block, does not make any sense.
I referred, http://sikorsky.pro/en/blog/aspnet-core-custom-user-manager But for newer version of .net core. It is little bit outdated. I fix outdated parts by research. 
In very large solution, 1000s of files, the debugger is quite slow.. 
For this, identity required. My project does’nt include. 
yes but you could still use the concept of static string 
Yes, concepts fits with me. At the end i got something with familiar this. 
It's good for a freebie, but I find it much quicker developing in full visual studio than code. Probably just because I have been using visual studio daily for years but the short cuts and context menus make it better for me. 
Usually wondering if works with OData on .NET core
I guess your question is related whether Swashbuckle and OData works together in .NET Core. I don't know 😊
Visual studio has far better support for C# and .Net Core. Better code fixes, debugger, extensions and the compiler is Roslyn instead of omnisharp.
VS Code is fine (for lightweight development), yet I prefer using JetBrains Rider - it's great, very feature rich and comparable to full VS.
I use VS Code 
It’s a perfectly good editor. Hard to beat the price :) If someone else is paying i.e for work I’d recommend Jetbrains Rider if you want a “real” IDE. 
I'm not sure how this is an argument against using var? (if it was supposed to be) 
The lack of solution support makes it unusable for me
We wouldn't know what Animal was even if you wrote it as Animal animal = LoadAnimal(); I'd still likely need to go to the Animal class if I needed to know it's internals. As far as knowing the LoadAnimal() method returns an Animal object - I think it's pretty clear as is. I might change it to GetAnimal(), but other than that - I don't see what additional information spelling out the return type would give me here.
&gt; 100 iterations The issue avoided by reusing HTTPClient is port exhaustion (at the transport layer, so logical ports, not physical). As I understand it, an HttpClient instance can reuse ports it had reserved for previous requests, but if those ports aren't reused, the OS will leave them in some closing state (CLOSE_WAIT or TIME_WAIT or something) for a few minutes before they're free for other HttpClient instances to pick up. Since there are about 65k logical TCP ports, this is really only a problem when you're operating at scale and will need to send more than 65k requests over a few minutes. If you're on Windows, try running in PowerShell: netstat -an | ? { $_ -like "*_WAIT*" } then run your test, then run the above command again and see how many ports are now unusable (temporarily) due to waiting.
Ive used both VSCode and Rider on Linux. VSCode is fine but if you can afford Rider it is well worth the purchase
I use var exclusively. If I find that a particular assignment is confusing, that means my method names are probably poor and need refactoring. I've found that if I really care about the assignment object, I'm probably on my way to look at that object's internals. So spelling it out doesn't save me any time.
&gt; What I really hate is something like this: var x = SomeMethod() &gt; &gt; There is no way of knowing what x is by just looking at the code. You need to hover over SomeMethod in an IDE or open it to see. I've always wondered why people's answer to this code smell is to add unnecessary information rather than fixing the problem (refactoring the method name into something useful). 
It also just does more for you. No need to figure out cli switches, etc
Isn't there a solution plugin though? 
I just don't like omnisharp. Someday maybe it'll be there but its not what I want now. Yes I'm and resharper / rider user.
It's not argument against using var per se, it's argument against "why bother writing readable code when there are IDE tools". There are cases where var helps readability, there are cases where var hinders readability, and there are cases where it doesn't make a difference. I've seen plenty of all. I have no issue with using var, but I have issue with writing bad code and using IDE tools to be able to read it, where simply writing better code wold be so simple. Okay, less talking, some example: If I have (just an example of long type): List&lt;Dictionary&lt;IComparable, StreamReader&gt;&gt; someShit = new List&lt;Dictionary&lt;IComparable, StreamReader&gt;&gt;(); var someShit = new List&lt;Dictionary&lt;IComparable, StreamReader&gt;&gt;(); var helps a lot in readability. If I have: string str = "Hello, World!"; var str = "Hello, World!"; there's no difference. But what about this? var test = thisReturnsResult(); Everyone here is right that in IDE it'S really fucking simple to just put cursor on top of function and see immedietely what type it returns. But I can't see it at glance, I have to move my mouse. I can't see it outside of IDE, such as git diffs. It's not big problem, sure, but it still takes some readability away from code. Someone might argue that I don't care about type. That can be true, but how can you be sure that type will be *always* irrelevant? You might function that returns some kind of *map* and say "I don't care about exact type, it's just a map, whatever." Except half a year later you'll be investigating bug related to wrong order of elements, and suddenly whether it's kind of map that keeps order or not is important. You just can't know all possible contexts under which your code will be read for rest of eternity, so you shouldn't make assumptions and *just make that shit readable*. Especially if it's that easy. That's all.
Not really sure what you mean, by that? var salaries = GetSalaries(); vs Salary[] salaries = GetSalaries(); Would you name it GetSalariesAsAnArrayOfTypeSalaries() instead?
Rider is superior
I don't really know... visual studio works great for me, and I use it with a giant codebase at work
&gt;i once read a post here that httpClient should be instantiated once and use throughout the lifetime of a project. Don't do things because you once read them. Research them and understand the reasoning behind it. Because using a single HttpClient has issues just as always creating a new one.
I'm fairly certain that OmniSharp just wraps Roslyn
&gt; im confused as to why a static currentUser will not work? It's a terrible idea in a multi-user app like a website. You end up with thread-specific static variables and that fucks with async and/or performance.
I can't argue against writing readable code. Of course everyone should strive to that. But in your example "bad" usage of var, it isn't the use of var that is the problem. It's the method and variable name. If instead it was: var createdFoo = CreateAndReturnNewFoo(); Then there is no ambiguity. I can see at a glance what's going on. If I need to know more than what is being described there, I would likely need to go into the Foo internals anyway. I may not really know what a Foo is, but I wouldn't have known even if it was declared. Most arguments I see against using var are really arguments against writing crappy variable/method names. 
That's only true for Windows, apparently. From their Github [page](https://github.com/OmniSharp/omnisharp-roslyn): &gt; OmniSharp-Roslyn is built with the .NET Core SDK on Windows **and Mono on OSX/Linux.** It targets the net461 target framework. OmniSharp requires mono (&gt;=5.2.0) if it is run on a platform other than Windows.
yes, true. But it lags slightly behind and has it's own bugs.
65k request over a few minutes is crazy, my app isn't going to have that much users. the post i read made it seem really bad to use httpclient. now I understand the dangers alot better 
that's why I'm trying to get more clarification. searching online led me to blog posts that discourage creating new httpclient . what are the dangers in using a single httpclient 
Compared to Visual Studio aswell?
I think if you’re developing in .net all day, VS is probably best. I use a bunch of languages on both Mac and PC and am primarily an IT person. I like VS Code for being light and not having to switch between editors. 
Yes. It's not free though
I meant that code people use to argue against var typically looks like your example var x = SomeMethod() But the problem there isn't var, it's the method and variable name. var salaries = GetSalaries(); Seems fine to me. I know I'm getting a collection of Salary. &gt;Would you name it &gt;... &gt;instead? No, I'd probably name it GetSalariesArray() or GetSalariesAsArray() if I felt I needed to specify what kind of collection it is. Normally I wouldn't feel that need, but in the few cases where maybe it matters, I see no issue with documenting that it matters in the method name. 
[Rider](https://www.jetbrains.com/rider/) is a feature rich IDE with cross-platform support. Not free though
&gt; lot of methods are not as descriptive Refactor the method name instead of refactoring out the var keyword.
Roslyn runs on Mono just fine.
Oops, you are correct!
OK. I think it's a matter of preference, but: 1. I don't think putting the data type into a methods name is elegant 2. More importantly, when I skim over code, having Salary[] salaries = GetSalaries(); vs var salaries = GetSalariesArray(); I like the first one better. It's a split second faster for me to see what I'm dealing with and with 100% certainty.
&gt; I don't think putting the data type into a methods name is elegant If the data type matters, why not? If it doesn't matter, what good does specifying it do? 
What short cuts do you use most frequently? I use CTRL+W (Select word under cursor), CTRL+R+R (Rename), CTRL+Shift+L (Delete line) and Alt+Arrow Keys (Translate line(s) of text) the most, but I'm unsure about what else would really be useful almost every day.
It's "free" for students until a certain date. Still riding (ha) on my subscription for that. Also includes a graduation discount.
CTRL+K,S (varies by environment settings) - Format Document. Used dozens of times on a daily basis. Probably more often than CTRL+S/CTRL+SHIFT+S
So you are saying that you never really looked for a plugin, so vscode is unusable. Do you think that is fair criticism?
I mean, I don't really think much when posting in reddit, to be honest... I just use visual studio because it comes with everything I need, no need to look for plugins... 
I haven't used ninject to do this as I prefer to use simple injector for my projects, however, there are some concepts you will find interesting and probably helpful. The first is [Contextual Binding](https://github.com/ninject/Ninject/wiki/Contextual-Binding), which allows you to have named bindings like "GitHub", "GitLab", etc. The second is... [delegate methods](https://github.com/ninject/Ninject/wiki/Providers%2C-Factory-Methods-and-the-Activation-Context) (?, bottom of the page), it allows you to specify a method to execute when the injection occurs. Which you could use to initialize the factory with the correct settings I hope this helps.
Hijacking this comment to say that if you are a student, you can get a free license! Go grab it!
No, I can't agree with that. Not to mention it's against Microsoft guidelines for C#. Types are types. Type information shouldn't be put into variable and function names. If type is important, *just don't declare it as a var*. If it isn't, well, whatever. But adding type information to name is actually bad naming. What if type changes? Now you have to go and change all callings of that function. Easy with IDE, right? What about documentation? Now there are mentions of two functions, `createList` and `createArray`, are they the same? Besides, functions and variables should be named about their business meaning, not language syntax, so how should we balance these two? `var price = calculatePriceAndReturnDecimal();`? How is that better than simple `decimal price = calculatePrice();`. Sorry, but I have to disagree here.
That's great, and I'm glad it comes with everything you need. But your initial criticism wasn't strictly true, as it does have solution support, it's just not _out of the box_. 
&gt;**Edit:** In other words, will I be able to develop .NET Core apps of any scale on GNU/Linux? Linux user here: Yes, you can. VSCode is probably your best bet, however, it might require a bit of a setup, at least it did with me, debugger wouldn't work. You can use any text editor and compile it with dotnet.
No VS for Linux enviorements yet. I am unsure if Mac has VS?
Would you care to share the plugin you're referring to? 
&gt; If it doesn't matter, what good does specifying it do? We both probably know that in real life reading code takes much more time than actually writing it. Especially in complex systems. Explicitly declaring the type makes it (for me) easier and faster to read (we do read from the left to the right after all). Even if the method name is descriptive, I just mostly focus my eyes on the left side. So I read something like: `Salary[] salaries = GetBlablabla....()` At that point I don't really care what the method was named. I know it's something that gets salaries in a form of an array. I put that I have a "salaries" array into my short term memory and go to the next line. When I see: `var salaries = GetSalariesArray();` it takes considerably longer for me to reason about that. First I see "var" so I think "anonymous type", but .. no there is a method. What does it return? Let's read the name ... oh it ends with "Array" so probably an array, but is it really? Let's hover the mouse over it or F12 into it. Oh.. OK it's an array of type Salary\[\] You see where I'm going with this...
Number of available refactorings in Visual Studio is incomparable to what Visual Studio Code offers. I really don't get the fuss about Visual Studio Code. If you're working on bigger project and not just tiny micro service obviously and if you're using C# in object oriented manner as it was designed to be used then full VS helps you to spare great amount of time. Yes you can use Code for everything but why? It's true that using all features of full VS takes some time and effort but it's really worth it. And full VS with Resharper takes it into next level, while VS is taking over Resharper's features, it's still way behind, but again, it takes some time and effort. Code &lt; full VS &lt; full VS + Resharper 
It does for. But not Visual CPP
What is `web`? What is `wb`? Could you just us an `HttpClient` instead?
vscode-solution-explorer 
Don't use static variables for stuff related to an aspect of a system that you don't want to be globally available, like a userID. A static member belongs to the entire class itself, so in your example, as soon as another user comes along and logs in, this value will be overwritten with that user's UserID, and so on. This code *will not work* how you expect it to work, do not use this kind of code in any kind of web application.
That's the least of the worries presented by a solution like this: As soon as another user logs in, that user's ID will be stored in the static variable, then the next user, and so on. Static members belong to the class itself, and not the instance and thus is available to the entire app, which also opens up a huge security hole.
ah sorry, `web` is an HtmlWeb from HtmlAgilityPack `wb` is WebBrowser from System.Windows.Forms I'll check out HttpClient but I'm not sure if it's compatible with HtmlAgilityPack, which is how I handle the processing of the data
I understand your point perfectly. but i have this code currently in a web application with several users and it works as expected. I'll probably have to go and refactor the code. 
F12 (Go to definition) is my crack. My favorite VS feature isn't strictly a keyboard shortcut, but it is accessed with one: The Quick Actions and Refactoring menu (CTRL+.).
"VS for Mac" is not VS, not even close (it's a rename of Xamarin). The best macOS dotnet IDE is Rider, hands down.
CTRL+K+C (comment line) CTRL+K+U (uncomment line)
You just answered your own question: It'll work for every user logged into the platform, meaning, as soon as another user logs in, that static member will get overwritten with their userID, and so on. Also, static members are much harder to mock up and unit test. There's a whole litany of reasons why static "global" members are a bad idea in web apps actually. Avoid them, and if you need truly global objects, use the singleton pattern so it's thread safe/etc.
F5 F10 F11 F12
I'm going to start avoid static global variables going forward. but currently if i have 5 different users logged in they're assigned different userID and it doesn't conflict in anyway 
You can definitely get the html, which is in the body of the response using `HttpClient` which can be parsed or processed in many ways, including by `HtmlAgilityPack`.
The only reason not to is that you prefer Visual Studio or Rider or something else. You may prefer Code for it's responsiveness and extensibility. You may prefer Visual Studio because it provides a more comprehensive set of tools for scaffolding and debugging. But ultimately neither is more correct, it is just preference.
These 2, plus many of the other shortcuts stated, work just as well in VS Code. I found out testing it myself. I use Visual Studio Enterprise daily, but use VS Code for writing in Python. I like the shortcut to quick console in VS Code while doing Python. Whereas anything .NET is use regular VS.
Creating a new HttpClient each time will lead to port exhaustion which can be dangerous on a production web server. It might not matter much for a desktop application or a service that only runs once per minute. Creating a single HttpClient that lasts forever could eventually lead to DNS issues as the HttpClient will continue to use its old connection until it stops working, even if the DNS name changed minutes/hours (maybe even days) ago. HttpClients are fickle and an important concept. You should read **everything** on [this page](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests), in particular the section [HttpClient and lifetime management](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests#httpclient-and-lifetime-management).
Figured out what it is - I need to enable js.
 GNU/Linux is honestly my preferred way of developing and deploying .net apps core apps.
I'm not actually naming variables decimalPrice anymore than I'm naming my methods Foo(). Notice I didn't mention anything about you having a variable named "str" to represent a string - I assumed you don't actually do that and were just using that as a form of example. The point is your method name should give you a pretty reasonable indication of what it is returning. If it doesn't, you should refactor it because it's unclear. If I saw var price = calculatePrice(); I'm going to assume it's returning a decimal because the name is telling me it's a price. If it ISN'T returning a decimal, it should be indicated somehow in the name. For instance, the name should indicate WHY am I not returning a decimal. var price = calculateRoundedPrice(); Might be something I'd use to represent the fact that I'm going to be returning an int. &gt;What if type changes? The same thing that happens if you used a type declaration. You'd refactor. &gt;Easy with IDE, right? Why would I refactor outside the IDE? &gt;What about documentation? Now there are mentions of two functions, createList and createArray, are they the same? Why would there be two? I'm not just adding a new documentation entry because a name changed. I'm updating the relevant piece. You're getting a little pedantic in your examples and arguments. If you want to use type declarations, I certainly won't stop you, but there is nothing hard to read or unmanageable with var followed by appropriately named variables and methods. 
No resharper 
Both variable names and method names should not only be important, they should also be named correctly. When reading code, you're going to need to read both, not just the variable names. At the end of the day, you can use whatever you chose to use. 
In what way is it superior to regular VS (not code)?
I'm going to start avoid static global variables going forward. but currently if i have 5 different users logged in they're assigned different userID and it doesn't conflict in anyway 
VS Code for front end (React, angular), VS Enterprise for back end (C#). 
unfortunately I'm using asp mvc not asp.net core what happens when the old connection stops working? will it switch and use the new host resolution? 
Yep, I understand that. As I said I was using K&amp;B, but now my brain kind of repells it. If I see `if (bool) {` I instantly think "that's a new method here". It's purely my deviation. ;-)
no way
No, they meant there are 65000 ports available. It's one of those power of 2 things: 2, 4, 8, 16, 32, 64, ... 65536 &amp;#x200B; You can't really use all of them obviously, anything below 1024 is considered a bit special, and are reserved for things like HTTP (80) HTTPS (443) and a load of others :)
What specifically? The whole point of this sub is surely to share knowledge. It's like StackOverflow without the insanely over zealous moderators. &amp;#x200B; It's seems to me OP has done some research, but I'm with them that the web is full of conflicted information on this subject. It changes again once you get to .NET Core of course, and a lot of information is now geared around that. &amp;#x200B;
oh I get it. I changed my code to use static httpclient, and now i discovered that can also be an issue too, something about dns change or so 
Here's one of many examples. Text searching: Visual Studio: https://i.imgur.com/2desH5E.png barf Rider: https://i.imgur.com/2fII1Sh.png
His example code isn’t using a static variable; it’s effectively a static function, with no static state, and it _will_ work as he expects it to. I’m not saying this is the best way to do things, but there is absolutely nothing wrong or dangerous about the example code except for the fact that everything dependent on UserId will be difficult to test.
&gt; As soon as another user logs in, that user's ID will be stored in the static variable, then the next user, and so on. I gave the benefit of the doubt and assumed they were using thread-specific static variables (like `HttpContext.Current`). But there's a reason they did away with that in ASP.NET Core!
I have ctrl+d set to duplicate the current line and i use that daily. Also I have F12 set to go to implementation which is really helpful in an interface heavy codebase.
Vs for Mac is based on Monodevelop, a C# IDE built on top of GTK, which is a fork of sharpdevelop. Monodevelop works really well on linux 
Isn't this what session state is for? Just use the in-memory provider unless you need it to survive app restarts. Or use a Redis or memcached backed provider if you need something more robust. https://docs.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-2.2
Can anyone else chime in? Is it REALLY better than VS?
No, it's like moving house and not telling anyone your new address. Post will still go to your old address. &amp;#x200B; I was just writing a reply to your comment above and saw [u/wllmsaccnt](https://www.reddit.com/user/wllmsaccnt/) comment. There's is better so :) &amp;#x200B; The only things they didn't say is. HttpClientFactory exists to solve a lot of the confusing issues of the .NET Classic HttpClient, so it's worth reading the docs and blogs because they usually tell you where the .NET Classic version went wrong. &amp;#x200B; The only other thing I added was that the original HttpClient was disposable, so people assumed you were supposed to use it in a using block :/ 
Not being able to pop out windows alone makes me not use VS Code. The fact that Visual Studio has an encyclopedia full of features that VS Code doesn’t is just icing on the cake. 
There are some weird problems with Code though. Like you can't print without an extension. I've been using it to replace Notepad++ but there have been a few things like that I've run into. Basic things that you assume will work and they just...don't.
It’s functional, it’s also a fucking pain in the ass.
Eh, it’s different. I wouldn’t say better. Certainly less bloated. As to being better is subjective. That’s coming from someone who rather use Rider than VS. 
VS for Mac is a rebrand of Xamarin Studio, which in turn was a fork of MonoDevelop: https://adtmag.com/articles/2017/05/10/vs-for-mac.aspx
Can I boot this on my modern PC??? This is amazing ! 
So basically, exactly what I said :)
Yeah, that's fair point. I think in general we agree, I just slightly misunderstood your examples. &gt; Why would I refactor outside the IDE? I'm not talking about refactoring itself, but all the stuff that lives outside code base itself, mainly documentation. &gt; Why would there be two? I'm not just adding a new documentation entry because a name changed. I'm updating the relevant piece. I could express myself better. I meant inconsistencies that will arise with changes like that. 
You appeared to contradict me, and I was clarifying that my statement was correct. You skipped out Xamarin Studio.
I didn't know about IHttpClientFactory... Thanks for the link! Useful to know. 
Nah, was adding context. Vs for Mac has a pretty long history. A lot of developers will give it a skip because it has the MS branding, but it is really good. The folks who built it from Monodevelop forward, are the same people who are currently developing mono, .net core, Xamarin and tons of .net utilities. Some really cool stuff has come out of MS buying Xamarin, cross platform development was made possible by these folks.
VS Code doesn't seem to use breakpoints for one of my projects (on both windows and linux). I have to trick it by throwing exceptions inside a try/catch and click off break on handled exceptions. Not sure why. VS on windows seems to handle it fine but not code on either platform. Just saying but I may have been just unlucky
When? I can't think of an example. C# I can catch any exception I need or catch the base exception as a catch all. Why should I have to declare all expected failure types when I might not know in advance the failure I'm going to produce?
Dependency Injection ? Make a Middleware that constructs your thing then in DI resolve it and inject AsSingleton. I do this for multi tenant sites. I use a simple cache that get data from a store when needed or just uses in memory to remember it. The middleware part is a bit meh... but the rest is mint. Easy. 
Yes, a good way to do it, any example code you have ? 
I'd die without my go to definition and go to implementation shortcuts
That sounds like a security issue.
I mean there’s plenty of those. Looking for a new job in Auckland NZ, anyone out there. On second thought, I probably don’t want to work for anyone who knows my reddit account.
My team does xamarin development and most of the guys work on macs and never complain about it. So I figure it's at least alright. But I'm a Windows guy and love my VS Enterprise and I think macs suck and feel like trying to develop on them is like playing guitar backward 
The first time a request fails its going to try and make a new connection for future requests, which I think will cause it to do a DNS resolution. I think the issue is only if the connection is open and continues to work with the old IP (more typical in load balancers and environments that are swapped based on DNS entries).
I’ve found VS Code is pretty great for dotnet core development, as long as you are comfortable with the CLI.
When using .NET CORE, always use `HttpClientFactory`
Based on these screenshots, I prefer the Visual Studio Find in Files. The results are persistent, can be output to three different windows, and are navigable with F8 and Shift-F8. I can also append new search results to the existing results. But, overall, IDE preference is just personal.
I find developers who don't use vs don't know any better, let them stay blissfully ignorant.
Exactly why many prefer Code. Command line tools are more relevant now than ever, because its the common ground for anything cross platform. And everything has to be cross platform now, done are the days where cross platform meant hacky wacky frameworks not worth investing.
To that's cuz VS for mac is just a rebranded xamarin studio.
In my dev team I use vs2017 pro for windows to do the backend dev (in a windows vm) and the front ends use vs code for mac. It's awesome for the front ends since forcing them to use vs pro was always a battle. All they need to do is run the cli command and I tie all their webpack commands to the project bindings. I'm interested to try Rider since I use a Mac at work. Vs Pro for mac is horrible (crashes and odd behaviour), so I find myself using a vm whenever I need to do dotnet. Of course if I have to work on 4.6 I'll still need the VM but that's becoming rare now. I'd much prefer to work on the host OS.
This. The VS debugger has been top notch for a long time. The performance profilers are getting there too. The live code analysis stuff is awesome to catch basic mistakes, especially in C/C++. It’s saved me a lot of bug SCRs over the years for simple “I didn’t think of that” scenarios. Full disclosure: I run VS2017/2019 Professional from a corporate MSDN subscription. “Community” editions may lack some of these. 
I am studying in Lithuania where all education is free if you are not dumb and many people go for masters to keep student privileges.
I'm going to assume you're playing devils advocate because if you truely prefer VS Find in Files, you cannot be helped.
I learn c# for myself and need to use java for my studies. I need to learn nothing java-specific to get at least a B in programming. So yeah the simplest stuff is basically the same but if you go deeper into it you see differences. I basically hate java. 
I haven't tried in a while, but multi-project solutions were all but a non-starter in VSCode. Also my day to day work involves some ASP.Net MVC5 applications and Code has (had, I assume not still) no support for those at all.
I am serious. I have been using Visual Studio for what feels forever. I am very comfortable using it. I am also a heavy Vim user who relies heavily on tag navigation and grep searches :-)
Not to be rude or anything, but it sounds like you might be falling under the category of "I don't like change"
Vscode has this tho
I use Rider on Linux for out .net core app. Works great.
Why? I embrace all the other changes in Visual Studio, and I used ReSharper, Idea, and even Rider at some point. Your judgement couldn't be more wrong. I use Visual Studio the way because that is how I am efficient with the tool. Forcing myself to use another feature just for the sake of it will not be any good if I do not reach my goal as quickly as I would with my "old" way.
I would agree that it has its benefits over visual studio, but it also has some drawbacks. I've used Visual Studio for over a decade now, but now I'm using Rider exclusively and love it. I also use Linux and my only other option is visual studio code. Code is fine, but not for a major application like what I work on.
Day to day, I use VS on windows for mostly framework based projects. I recently tried firing up VSCode on ubuntu to make a simple .netcore 3 app for mining an api to collect data on my boardgame collection. I went a bit extentsion mad, but the only real issues I came up against was omnisharp not recognising the the SDK. Stackoverflow to the rescue and once sorted, my experience is much like debugging in VS. Breakpoints, intellisense, everything a dev could hope for. 
I'm finishing my masters next month and kind of freaking out losing all the free software lol
Isn't this a moot point if you use R# with Visual Studio?
Yep... If the DNS changes this may not be reflected. 
I've also replaced Notepad++ but haven't run into anything bad, I never print directly though. One thing that is somewhat related I found that's pretty cool is if you copy and paste code into Word it will show up with syntax highlighting and everything, makes it really easy to put code snippets in a report. Not the best for actual printing since it puts the black background but great for PDFs
Thats why there is HttpClientFactory since net core 2.1 IIRC.
I think the HttpClient caches the DNS lookups so even after the connection closes it buggers up. &amp;#x200B; But, I'm not going to bet more than a quid on that. I'll have to look it up now we're talking about it :) &amp;#x200B; It's actually prescient as I'm about to roll out a load balanced WebApi and I'd kind of like that to work :) &amp;#x200B;
Simple way is to convert the comma in strings to a different unicode character not likely to be used and do the reverse on import. 060c Arabic comma should do
That's not really a good argument because of course it takes time to become proficient with new tools. People have said the same thing going from paper to computers (obviously a gross exaggeration compared to going from IDE to IDE). All other features aside, I truely believe it's worth switch over purely because of how terrible find in files is on VS. To each their own, as you mentioned. I could never go back to using VS myself. 
Doing Xamarin too, it's unstable and not as functional as VS. Feels great to get home and use full VS.
More about the issue can be found here: https://github.com/dotnet/corefx/issues/11224 You can use HttpClientFactory with a timeout to 'recycle' your HttpClient periodically to solve the issue. Guidance on that can be found here: https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests 
I've read the replies down to the link to the solution explorer extension, but let me ask this: what in particular constitutes "solution support" to you ? A gui, like that extension offers, or something else ?
[https://gist.github.com/ppumkin/905ddeff3e4d3d86a183fb84ad92eb0f](https://gist.github.com/ppumkin/905ddeff3e4d3d86a183fb84ad92eb0f) &amp;#x200B; Very basic example of how my site does it
Because it isn’t an ide?
Top work, thank you :)
something else
 I remember it being significantly worse when I tried it about 6 months ago. I wish I remembered the issues I was having, but it just seemed to lack polish and the build system was buggy
Now try to input seconds and calculate years, days, hours, minutes and seconds and only show the parts that are not zero.
lol ok then
Actually there is no problem with session state. The main thing in this question setting a big object when user signed in and using it everywhere. You cant access session state some cases or the code readality is going to bad. Thanks for help:)
For me code it's first option today I use Visual Studio only for full framework. 
Actually i found a way and inject it to my project. But i’ll give it try and i wondered how did you handle this situtaion. That’s why i asked for an example code. Thanks for the codes :)
I actually found a bug after I posted this, I will need to fix it first, thanks for your idea, I will make sure to do it after I fix the bug :P
You know, I don't really thought much of what I wrote and people start to take me seriously in the internet... That's just not what I expect from life... I just don't want to extend anything. I just meant vs works better for me and vsc isn't my cup of tea, I've tried, but I'm lazy and I like it easy.
Ctrl + Alt + down arrow for multi-line editor. 
you can still get free edu email address very easily. the most common is signing up for a community college. it's a pain so i just paid someone online that sells it as a service for $7.
Make a game where it gives a random amount of seconds 1-1000 then asks you to pick the correct answer. If the user picks the wrong one it says try again. If the user picks the right one it says you win! ———————— **235 Seconds(random) is how many minutes and seconds?** A) 3:55 B) 4:00 C) 70:00
Here’s how to get the application root directory. https://stackoverflow.com/questions/43709657/how-to-get-root-directory-of-project-in-asp-net-core-directory-getcurrentdirect You can mark files as content and “Copy Always” or place then in your wwwroot folder as assets and make sure they get deployed. You can run a local publish to a folder to double check that. 
There is an extension for it. I cannot recall its name. Just search for “sln” and some results should come up. I know, not a complete IDE but it is not supposed to be. 
Very good! Congratulations! Reminds myself 20 years ago when I did my first program... simple af but it worked! Very satisfying ... keep growing 
Good job. Each success builds on the last and it doesn't matter how easy it would be for someone else. You challenged yourself and succeeded. That's all that matters. Take the win, you earned it.
http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/ seems like a good place to start.
To be fair to the OP the most regularly referenced article about the issues concerning HttpClient, IDisposable and socket issues is directly from Microsoft and the reason why they implemented HrtpClientFactory in Net Core 2.1: https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests So it’s a pretty damn good reason to question the right way to use it. 
Ctrl+F12 is also nice if you're programming against an interface and you have one class that implements the interface. It'll go to the implemented definition.
Thank you Big, I'll look over the links soon!
Hold on tight to that feeling! It'll keep you going thru the frustrating bits you'll encounter thru the years. Congrats on your accomplishment and good luck on your journey!
Great work. That it took you two days but you didn't give up shows your perseverance. That's the top most quality you need to be a good programmer 
at the beginning of your programming-experience, everything is big and awesome! don't talk yourself down. you probably learned a lot of stuff doing this. 
Be proud! The path to complex things is paved with lots of small victories like this. It always feels great when you write something that *works*.
Wut
ConsoleApp5 :) We all been there. Another thing you could learn is source control if you don't already know about it. Something like [git](https://imgs.xkcd.com/comics/git.png). 
And then have a difficulty level that sets the delta for the wrong answers from the correct one. On easy, there might be dozens or even hundreds of minutes of variation. On difficult, maybe a range of only a few. 
There's a "T" missing in the directory bar... 
You rock!
VS Code isn’t an ide. 
What does it take to qualify as an IDE for you?
Good Job! If you're not already using it, this is the perfect problem to use the [remainder operator (%)](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/remainder-operator) for.
Great job! It may not seem like much to you, but making this program means that you're better at programming than likely 99% of people in the world. It is projected that there will be approximately 23 million software engineers worldwide by 2020 - so let's just assume that a total of 100 million people have some knowledge of programming (being a bit generous). So that would be approximately 98.7% of people that have no clue how to write any code - exclude those that only know "Hello world!" - and you're probably at 99% or greater. Good job, keep it up!
Whatever you did was a good exercise. FYI, there is a TimeSpan.FromSeconds(double) function, if you ever need to do this in the future.
This is the key to success in programming. Be happy with what you are doing.
Comments like this really help as an professional software dev. Nice to be able to look to posts like this as a reminder of the joy programming brought us in days where it is the cause for many frustrations. Nice reminder that goes a long way. 
Nice job, no program you write yourself is too small. Keep it up!
Hide yo kellog's and yo Cheerios. There's a cereal killer in the area!
Good on you! Keep on learning and trying things!
Nice work, OP. Also, wow, this kind of positive response is amazing. Just found this subreddit, but I think I'll stick around for a while.
Try this guy.... https://html-agility-pack.net/ 
ConsoleApp22, I have a lot of small testing projects when I just need to test a small concept before moving it to my main project 
That's where we all started, and you should be proud of it, because a lot of people quits before you can even do that. So congrats, and keep learning. "stay hungry, stay fool".
What makes you think it is? It’s a text editor. It doesn’t have the features that define IDEs like VS or Rider. 
I mean, I have auto complete, debugging, Git integration, integrated terminal, etc. Some might be pedantic about needing extensions to accomplish that, but they are like two clicks away to install.
Thanks for the reminder to always celebrate learning :)
Awesome! How close is it to: using System; namespace FormatTime { class Program { static void Main() { int seconds; do { Console.Write("Number of seconds:"); } while (!int.TryParse(Console.ReadLine(), out seconds)); Console.WriteLine($"{TimeSpan.FromSeconds(seconds):mm\\:ss}"); } } } This is the shortest I could make it, including basic input checking. Some features... **do/while** I generally hate do/while loops. However, this is one of the rare occasions where it was justified for brevity. Note that it is providing the prompt, then immediately... **int.TryParse()** ...trying to parse the input into an integer (seconds). The are loads of &lt;TYPE&gt;.TryParse(string input, out &lt;TYPE&gt; output variable) - bool, int, long, DateTimeOffset etc. This is a very good option WHENEVER you have simple parsing to do., as they avoid throwing exceptions. If it can't do it, it goes round the while loop again, re-prompting the user. **TimeSpan** If I were to guess - you did your own maths and divided by 60 and took the remainder, right? Though a useful learning exercise, please do learn about all the existing types. Especially when processing time and dates, you really REALLY want to use the inbuilt TimeSpan and DateTimeOffset types. (Don't use DateTime, it's a bad habit to get into - timezones are a an awful reality - see [https://www.youtube.com/watch?v=-5wpm-gesOY](https://www.youtube.com/watch?v=-5wpm-gesOY)). **string interpolation** While some may prefer a simple ToString() here, I'm showing off C#'s awesome string interpolation. A simple introduction for the beginner: [https://www.youtube.com/watch?v=xQYmSVbacG4](https://www.youtube.com/watch?v=xQYmSVbacG4)
Stick at it! There will come hard to understand concepts.. I remember trying to understand classes and OOP and just not getting it! then one day it clicked and it changed my life and the way I programmed! The same happen for dependency injection. And the same is currently happening with reflection and programming around the type my method is being provided. Eventually it will click and you will feel yourself pulling up one more step of the ladder!
I use VS Code as my primary tool for C# coding at work. The simplicity and speed are amazing.
Can you post your code? I suspect I can do this in &lt;10lines but I'm curious what your method is
Sadly I think user friendliness is a thing of the past. Vs code will win in the end
VSCode is not itself an *integrated development environment*, whether VSCode + plugins could be considered one is a separate question.
You should open source this on GitHub!
It’s not about the lines. 
You forgot a [Console.Read](https://Console.Read)() at the end so it doesn't automatically end.
Here’s a challenge: Create a program that: - Asks for your player name - Greets you by name - Tells you your opponents name - Tells you to hit any key to roll a dice - Make it generate a random number for you and your opponent - Print out the winners name - Ask if you want to play again - If you type no, CMD exits. If you type yes, it restarts from step one Have fun!
That is irrelevant context, though. Who on this planet uses VS Code without plugins? It's simply a way to keep the development experience modular. If someone says "I use VS Code to develop in technology X", they most definitely have the appropriate plugin.
For everyone looking at the link who is still stuck on .net framework, it is as easy as pulling in a nicer package to get this feature. Easy to miss if you only skim the article!
I disagree. When everything is that modular you have an extensible *text editor*.
TIL you can use `:` in string interpolation. Thank you!
I was moreso commenting on the "what shortcuts do you use most frequently" question, rather than the main subject matter
But where is the line? Much of VS Code is integrated. The plugin is often the last mile for a given language. It comes with lousy auto complete, git, and terminal tabs. Is VS Code not at least a "bad" or "underpowered" IDE until plugins enter the picture? Is the F5 key the sacred differentiator?
Reminds me of my piece rate calculator i made about 9 years ago when i was managing a crew overnight stocking boxes. Took me a week to do but by the end i was able to put in a number of boxes and how many hours+minutes it took my employees to complete those and would calculate the piece per hour rate.
I have that but didn't think it worked with cefsharp.
So your saying I’m part of the 1% now? When do I get my money?
There are several ways to make it shorter but the simplest is just to remove the namespace.
What was the bug? I’m just curious. 
Maybe give [RoslynPad](https://roslynpad.net/) a go. It has replaced most of the random one-off console apps for me.
This only gets you so far though, because DateTime/Timespan formatting doesn't allow for a "total minutes" so once you pass 60 minutes, the intended program overflows leaving you with an inaccurate result. using System; class Program { static void Main() { do { Console.Write("Number of seconds: "); } while (!int.TryParse(Console.ReadLine(), out var seconds)); //Using TimeSpan var span = TimeSpan.FromSeconds(seconds); Console.WriteLine($"{Math.Floor(span.TotalMinutes)}:{span.Seconds}"); //Using math Console.WriteLine($"{seconds/60}:{seconds%60}"); } } &amp;#x200B;
My experience is that ReSharper is amazing but tanks performance. Like even on the most modern hardware opening a solution with even a medium number of projects (say, 30 or so) takes a full 20 seconds.
Yes install git and use it, you don't have to use and advanced features, just check in your code often. The reason why it's especially good for beginners to use source control is that often you will make some change, everything will stop working, and you will have no idea how to fix it or get back to where you were before. Even if it's just a simple project like this where you don't care if you lose all of the code, it can save you a lot of debugging if you can always go back to a version that was working.
httpcontext.items is a decent approach. it can be a little hard to reason about though, since it's just a dictionary. sounds like you have a nice accessor pattern to hide that though (extension methods can work ok too). i would discourage static variables and thread locals though. statics because testing is a pain and because its possible that a bug may expose/alter data across requests, and thread locals because they are difficult to reason about in the async world (and just generally).
they still use some magic like that, some new AsyncLocal thing. but just... no. keep everything scoped to the request. 
are you storing it in a dictionary or something? 
i dont think having an IUser or whatever on functions that need it is the worst thing. i actually would recommend that you do that first. readability of some hacked up "magic" will be worse than an extra parameter, in my opinion. 
I took programming last year and I remember a similar program. I’m proud of you, this is very cool, my favorite part of programming is the lines and naming, you could add a line before the output that says “minutes:” so it is more easily understood or even “is ________ minutes”. I hope you have a good time doing this. :)
Hey, our production system is throwing error in `ConsoleApp1920115-beta` you... uh, know what this is ? 
i would do a two tiered DI approach. have the session *cache* as a singleton, and created an accessor as Scoped into which the cache is injected. and that accessor is what you actually inject into your services. injecting the actual cache exposes the possibility of reading the wrong session. if your accessor is scoped to the request, it is easier to get it right just once. 
there's actually only 15k ish ephemeral ports available for outbound requests (by default). one small app will probably never hit this limit, but if youre running a server with many instances of different things, one bad actor can bring the whole thing down.
by that logic eclipse isn't either
Now post the source so we can show you how much simpler you could have made it
i want midori to be open sourced so bad. 
just use flurl instead &amp;#x200B; [https://flurl.io/](https://flurl.io/) &amp;#x200B; Does all the hard work for you.
does this mean that ilc is in a useable state? corert exists and is updated constantly but i haven't heard anything abour releases. 
publish it on github and share with us, so we can give you more advice
thanks, I'll check this out 
no it's just a static string
what about projects that wasn't built with core
In cefsharp there should be some event delegates that get fired that gives you access to the Dom (after the JavaScript has manipulated it) you can then parse it with the html agility lib.
Congratulations!
Isn't machine learning a bit early at this point 😉
Great job. We've all been there. You've taken a big step into a big world.
Try to break your own code.. think of an input that will crash the app or return some weird time..
That's the reward, you never get your money!
Try linqpad
Step one is to not underestimate the problem. Containerizing an application isn't trivial, unlike what the marketing might lead you to believe. Building and running a container is the easy part, you need to address each of these problems: &amp;#x200B; \- If your app isn't using .net core then it's a nonstarter pretty much. &amp;#x200B; \- Container images take a long time to build, containers pretty much mean you need solid continous integration and automated deployments. We use Jenkins to do this. &amp;#x200B; \- If you're using AWS, be prepared to spend a lot of time getting familiar with their at times confusing ECS infrastructure. If you're using AWS, make sure you're using Fargate as it saves you $$$ (but more complicated to setup) &amp;#x200B; \- Regardless of where you host this, you need a load balancer. Might be a blessing in disguise since your container can use http instead of https and your certificates can instead be taken care of by amazon or azure. &amp;#x200B; \- Configuration is also non-trivial. You don't want to bake configuration inside your containers as it makes it more difficult to deploy different environments and the fact your production credentials would be potentially unsafe inside your CI server. We fetch our configurations through S3 buckets. &amp;#x200B; These are the growing pains tutorials really don't tell you when you decide you want to take the plunge into the docker world. Is it worth it? Absolutely, it saves us a lot of money and our deployments are a one-click affair now that everything is setup. But it's going to be a pain in the ass.
This is what JWT tokens are for. Have a look :)
wow, nice work Op. I miss this feeling, just reminded me of my earlier days when little programs like this give me so much joy! 
let's relax please, Op is still learning 
lol for real 
then how are you dealing with concurrent requests? 
I literally have a folder called "experiments" and I'm up to consoleapp125 after many years of working...
Great! Now that you figured it out yourself, here is a nice, quick and easy solution. Maybe you can take this and improve yours! Minutes = floor(input/60) Seconds = input mod 60 minutes = floor(2000/60) = floor(33.333333) = 33 and Seconds = 2000 % 60 = 20 Keep going, and eventually things like this will become second nature, and you’ll be able to solve larger problems.
YouTube, Pluralsight, code academy, udemy.
currently it just works, I'm not doing anything special to handle multiple requests. I've never had any issue even while multiple users are logged in everyone's ID stays different although I've been advised against it and will go ahead to refactor the code
I missed the nuget package, please which is it? I'm also considering using flurl, it says it handles this lifetime problem really well
Congrats!!! If you need something, let me know! Are you trying to just learn C# for fun or do you have an end goal? I work for Microsoft and I'm curious. Most people are scared of showing their first step. You are not. The community is being welcoming with this. I love it. 😁😁😁
I just use the dotnet core command line. It's trivial to make a new project.. dotnet new console vscode consoleapp23 boom
Everyone starts somewhere. I remember typing in huge BASIC programs from magazines back in the 80's. I always loved the challenge of figuring out where I screwed up and was always tickled when it finally ran. Enjoy!
I prefer using Code as a light editor when I need to just look at a single file in source, light edits, or stuff like that. It's great as a light editor and replaced Notepad++ as my go-to right click context menu editor.
&gt; thread locals because they are difficult to reason about in the async world https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=netframework-4.7.2
&gt; use a Redis or memcached backed provider If you have multiple web application processes; for example, multiple hosts behind a load balancer.
My first program was on a VTech Toy Laptop from Toys R Us when I was 7 or so. It had a really basic BASIC interpreter on it with an 8 line LED display with something like 14 characters per row. I just followed the book and made a program to ask you for a password before letting you pic some random number 1-10. I thought I was a Wizard with magical powers at first. Even when I got my first 386 when I wasn't much older than that and configured the sound blaster to talk on boot up. I thought I was a Grand Wizard. They were like magical black boxes to me and I was doing magic. Fast forward 25 years and I basically know so much crap now it's boring, nothing is particularly challenging. Build a login form, do SSO auth, make a searchbox, do a single page app, build a date picker, or w/e "yawn" and I can build computers from parts, and I can even write ASM and inject it into other applications and hook asm instructions etc etc. Base 2, Base 10, Base 16, doesn't matter. /yawn Man, I wish I could go back to thinking they were magical black boxes.
If you think about it... Any complex finished piece of software is really just a giant pile of small individual successes.
It says “out of YouTube quota”. What does this mean?
Flurl was actually written at my company. We make 10's of millions of external api calls each day in a high reliability, high performance service. It's solid, and easy to use. You might want to check out Polly for retry policies, too.
Have you used linqpad? If so, how do they compare?
Except that it is, at least for Java. And while I'm not 100% sure, I would argue that, in the case of Eclipse, much of the core functionality expected in an IDE is not a plugin. Having to add syntax highlighting, autocompletion, debugging, etc via plugin is not the same as having it built-in.
VTech is amazing! Our son has 3 VTech toys and they all blow me away. VTech makes an actual digital camera for toddlers that can record movies. [Just check this out](https://www.walmart.com/ip/VTech-Kidizoom-Camera-Pix-Blue/136838715?wmlspartner=wlpa&amp;selectedSellerId=0&amp;adid=22222222228048988978&amp;wl0=&amp;wl1=g&amp;wl2=m&amp;wl3=147093370488&amp;wl4=pla-259851455916&amp;wl5=9052782&amp;wl6=&amp;wl7=&amp;wl8=&amp;wl9=pla&amp;wl10=8175035&amp;wl11=online&amp;wl12=136838715&amp;wl13=&amp;veh=sem&amp;gclid=CjwKCAjwm-fkBRBBEiwA966fZN7xd-t4FqaJS8_JBww7AYM2ONq7D3fWvKkZ-ODSjqYSQzniJtKQzxoCSWoQAvD_BwE) Sorry, I know that wasn't the point of your comment but that company is amazing.
I honestly don't know, but IDE to me implies one monolithic software package that includes all or at least most of the development tools and additional features usually not found in a text editor. That includes a built-in way to simply compile and run the program.
Where are you calling WriteToExcel? It looks like bugWorkSheet is probably an empty object that you are passing through
I use linqpad a lot and RoslynPad is almost to the point where I can use it for most things. It still have a few improvements to make though. It's getting there.
Why switch to roslynpad over linqpad? Ive used linqpad a handful of times and know nothing of roslynpad.
What happens on negative inputs, characters instead of numbers and input a zero?
Where is `AfterTest` getting `package` and `bugWorksheet` from? You have them declared as local variables in `CreateExcelBugList`
Ah, they are two separate classes. The Excel methods are in public class ExcelCreator and the AfterTest is in a Test Class.
I don't think so. This code doesn't say much about how well ILC works. And it seems [CoreRT as a whole isn't going to be ready for release anytime soon](https://github.com/dotnet/corert/issues/7200#issuecomment-475468939).
wow nice stuff. how come i never knew about these 3rd party libraries. will check Polly out also. flurl syntax looks to easy, I've never seen anything as simple as that tbh 
wow nice stuff. how come i never knew about these 3rd party libraries. will check Polly out also. flurl syntax looks to easy, I've never seen anything as simple as that tbh 
Ah, I'm kind of sad I missed that. My early programming memories are of QBasic on my old Win98SE machine. QBasic was bundled with its own documentation, so as someone who at the time only had very sporadic dial-up internet, it was freaking amazing. I also borrowed a book on it from the library. Good times. I recently found out that [QBasic is alive and well.](https://www.qb64.org/)
Repetition. It eventually sticks and Google usually jogs you memory if you forgot
This took me back to the first time I tried programming. One of the first things I've built was a "number" game like this although with VB6 and with a GUI. I still have the code for it too: https://i.imgur.com/tOJmr52.jpg It looks so silly though! You have to click start (it generates a random number that is also hidden behind the "cheap" clickable text box below), then you have to click a number which is your guess, then click # to check it against the random number https://i.imgur.com/uHwr1a8.jpg the number of tries and best time are shown in two bottom text boxes. The funnier part is that for some reason this is version 2.6.13 when I click About. :D
It's free and open source.
As others have mentioned, there are probably easier ways to do this (unless you already know about the modulus operator - % or the TimeSpan class). However, calling on those will not develop your algorithmic thinking as much as just building your own stuff from scratch. Therefore, good job! Now here's a homework assignment that will be useful. Rewrite this as a class that you call from your console. It's something we use literally all of the time. 
https://stackoverflow.com/a/51499006
Number of seconds: *abcd* ... _ConsoleApp5 stopped working_ Besides jokes, handling these stuff is what makes your code solid and safe
And that's how you learn how to do unit testing.. 
Anyone use C# interactive?
If you want to test something small out, you can also do so in a unit test. I write experimental code in a unit test often, it’s a nice way to execute small pieces of code and is set up very fast (assuming you have a unit test project already).
SQlite should do the trick
If you have a license for LinqPad and don't care that it's not FOSS, there is no reason not to use it. Otherwise RoslynPad is a decent alternative.
The way I did this is I do( the number of seconds in Double/60 — the number of seconds in Int/60) the result will be a percentage of a minute, then I multiply it by 60 and convert it to int32, the problem is when the number is like 2,89 it will turn into 3
Thay would actually be fun to do, still need to learn how to make the program write random numbers in a certain range
Thanks for the idea, I still need to learn somethings first but I will definitly try that 
Good effort, well done! For your own sanity, look up the Timespan class. It may save you some time and rounding errors :) There are properties of timespan that will do the conversion for you. This may add a slightly more robust base to add your next feature to the program. 
Indeed :)
Yes, people are being so nice to me I can't stop smiling while reading this :)
Make sure to learn the modulus %. It solves problems similar to this. 
Sure, i will do it once I get home
You don't have to use double for this. The expression can be as simple as this: int inputSeconds = int.Parse(Console.ReadLine()); int minutes = inputSeconds / 60; int seconds = inputSeconds % 60; % is the remainder operator and gives you the remainder after a division.
Good job, we've all been where you are now. &amp;#x200B; I would recommend you having a look at the reminder operator %. &amp;#x200B; Keep it up :) &amp;#x200B; &amp;#x200B;
That’s not actually the case in the CLR, but C# does enforce it, as you say (by automatically making all nested classes generic in the same parameters).
My personal opinion - with libraries like Dapper we do need a repository for DDD. But NOT with EF or NHibernate.
csi is pretty cool, and official, but it lacks a lot of the convenience features that makes RoslynPad nice. RoslynPad can download packages from Nuget and automatically include the #r reference, and it has pretty nice intellisense support.
Following this sub was a great idea!
I had a ton of test projects with the DeleteMe affix yet I don't want to delete them. 
Nice. It reminds me that an early triumph of mine was accepting a phone number like 800-flowers and returning "flowers" translated to the corresponding numbers. I was so proud! Congrats!
`Control.Invoke`/ `BeginInvoke` queues the delegate to be executed on the main thread. As long as the main thread is executing `runThreaded20`, it can't process any queued actions or fulfill any of its other duties like responding to events and redrawing the form.
Congratulations! now try making conversions in each direction (h:m:s &gt; s, h:m:s &gt; m, h:m:s &gt; h:m, etc.) you can use a switch statement to see what option the user chose.
\`System.Random\`, make an object of this class and call \`[objectName.Next](https://objectName.Next)(min, max)\` where objectName is the name of the object and min and max are integers.
You gotta start small, nice work dude, keep on coding! 😃
var elapsed = TimeSpan.FromSeconds(int.Parse(args[0]); Console.WriteLine($”{elapsed.TotalMinutes}:{elapsed.Seconds}”);
Have a look at a site called www.codewars.com They have tons of programming challenges like these.
Looks great :) you should build on that foundation (as others have mentioned). When you're ready to give other problems a try project Euler used to be my go to help my junior mentees: https://projecteuler.net
Hehe... Lol... I finally formatted the docs. Thanks ;)
I feel a little similar, and is one of the reasons I've been spending my free time learning Unreal. If there's nothing left you're interested in learning or doing, have you considered teaching? Kids these days love watching people live stream as they program.
Download pls?
If you WORK in the software industry, how would you feel about it if others were using your products without paying you? Please enlighten me, why this 'work-around' feels ethical for you? 
gratz! it's a small step but an important one, i remember when i started programming i made an interface for a web plugin for my brother's minecraft server and the feeling when it started working.. got me hooked faster than heroin &amp;#x200B; 
Perfect start to stay updated with these Mobile app Development tools. Thanks for sharing with us!
A tip: don't reinvent the wheel. Instead rely on the expertise of experts and use the tools available to you. Thus you Google your problem and [find a solution](https://stackoverflow.com/questions/463642/what-is-the-best-way-to-convert-seconds-into-hourminutessecondsmilliseconds) and learn from that, instead wasting hours/days doing it the wrong way.
Agreed also available for anything. I have lectures/workshops on things you may want to do later on, source control, tdd etc etc Just dm me if you are keen!
The Youtube data API gives you 10k requests per day, I make 2 requests/second (one for each channel), I use multiple keys (each of which gives me 10k/day) but it seems that it still is not enough to last one day.
any suggestions what i can do better?
&gt;And while I'm not 100% sure, I would argue that, in the case of Eclipse, much of the core functionality expected in an IDE is not a plugin. Having to add syntax highlighting, autocompletion, debugging, etc via plugin is not the same as having it built-in. &amp;#x200B; You don't get that out of the box with pure eclipse, you need to download the appropriate bundle (of plugins) &amp;#x200B; VSCode initially shipped with those features, which was later separated from the editor in the form of the C# extension. Just because an editor is modular doesn't mean it isn't an IDE. You have all the tools you need in VSCode.
Nice :). Keep Learning!!.
💰... It provides code completion which the free linqpad does not
The way I have handled this problem is to use a bool like "canPressKey". It would be something like: bool canPressKey = false; if(Key.IsDown &amp;&amp; canPressKey == true) { canPressKey = false; // DO STUFF HERE } else if(Key.IsUp) { canPressKey = true; } 
I totally disagree with this. Yes, for bigger projects or anything "professional," then don't reinvent the wheel. But when you're learning, you should spend the majority of your time reinventing the wheel! That's how you learn. Relying on someone else's work right from the beginning is a surefire way to learn none of the basics. You'll find yourself with a program that works perfectly but you'll have no idea why. And if something does go wrong, you'll have no idea how to debug. Reinvent the wheel, OP. That's how you learn. Keep up the good work! 
&gt; If your app isn't using .net core then it's a nonstarter pretty much. hmm, well then we're gonna have a lot of work to do... or just use that going forward. im not sure which they're gonna have us do. Thankfully im not involved much beyond just the dev part of it, but i have a feeling we're gonna need to work together a bit better here on out
hehehe
I woke up today and felt like I was 9 years old again, I wonder why...
This is a brilliant challenge. I'm learning too and will definitely try this! Thanks, loving all the program ideas in this thread. 
Nice! I remember my first program that would take a year and tell you if it was a leap year.
I see my mistake - thank you!
Great job. Everyone starts somewhere. Just keep growing now. 
That's okay, we forgive you.
Yup, I've moved projects to docker twice now and while the second time around was easier, it's a lot of logistics. The upside is all the work you have to do to get it all up and running right streamlines your pipeline and is a huge benefit to productivity.
Good to know the second time wont be as bad. we'll have work to do, but it sounds like it'll all be worth it. this is exciting i think it'll be fun!
Oh to feel this way about programming again...I miss the beginning days of exploration into the field.
Problem with this is that if you hold down the defined key, it will continue to plow through all the code since it detects it. But I figured that this could be fixed if you put your code in "if(Key.IsUp)". Still there needs to be a waiting period of 2 seconds and if the enter key is pressed then it ignores the 2 second wait.
Removed: Rule 4. You'll have to supply the code you used and describe in what way it's incorrectly executing. You mention grabbing a bunch of URLs and randomly picking from that, how did that not work out? Are your problems stemming from not discerning link posts from image posts from video posts from text posts? Are you looking for some general purpose API call you can use to get "just images"? These are the kind of questions you should be seeking to include answers for if you repost your issue.
Just helped my son write his first console app. It was based on [this askscience reply](https://old.reddit.com/r/askscience/comments/b5acw2/is_there_an_example_of_a_mathematical_problem/ejc7boa/). Specifically &gt;**Collatz Conjecture** Create a sequence by starting with any positive integer. If it is even, the next number in the sequence is obtained by dividing the previous one by 2. If it's odd, the next number is obtained by multiplying the previous one by 3 and adding 1. Repeat this procedure. For example: 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1. Once this sequence reaches 1, it'll start to repeat (1 -&gt; 4 -&gt; 2 -&gt; 1). An open question is: Does this sequence always end at 1, regardless of the starting number? This question has been tested computationally for a very large set of starting values and all have ended up with the sequence reaching 1. But a definitive proof is still missing. He was trying various numbers by hand, trying to disprove it. I told him we could write a program to do the math for him, and he just input the seed number. It spit out the whole sequence to the console and also said how many cycles it took to get down to `1`. I even had him create unit tests for is `IsEven`, `OperateOnEven`, `OperateOnOdd` methods. Was interesting to see how many loops various numbers took. Sometimes really big numbers were a lot faster than smaller ones. I might work with him to have it spit out the results to a csv next. Incidentally, every number we input (that didn't overflow) terminated at 1, as hypothesized.
Nice work! This is a great start! You could turn it into a timer if you to. A fun exercise would be to have it start counting down one second at a time.
&gt;it will continue to plow through all the code since it detects it Not sure what you mean by this. If it is setup something like if(Key.IsDown &amp;&amp; canPressKey == true) { canPressKey = false; // DO STUFF HERE } Then the canPressKey bool should stop it from running the code continuously 
Ah yes, sorry your right. How about the issue of pausing the code for 2 seconds unless key is pressed?
Actually I'm thinking of this &gt;&gt; **bool** canPressKey = **true**; **do** { **while** (!Console.*KeyAvailable* &amp;&amp; canPressKey == **true**) { //code that pauses for 2 seconds canPressKey = **false**; } } **while** (Console.*ReadKey*(**true**).Key != ConsoleKey.*Enter* || canPressKey == **false**);
I have considered teaching, and I know how I want to tackle that, I just get unambitious with building my website and making content. Not particularly someone who wants to stream either, kind of shy. If I could get past that, yeah, maybe.
Heh. The first thing I do to every VS installation is re-map Ctrl+W to File.Close, like it should be. If I need to select the current word, I can do Ctrl+Left Arrow, Ctrl+Shift+Right Arrow like god intended.
[This StackOverflow post](https://stackoverflow.com/questions/57615/how-to-add-a-timeout-to-console-readline) seems to be what you need unless I've misunderstood your requirements.
is this not standard though?
That won't work. You are going to need to use asynchronous programming to accomplish this. One thread needs to wait for console input while the main thread waits for the task to finish **or** waits for a timeout. If it times out, cancel the input thread and move on. If the input thread returns before the timeout then you have an input. Look at `async/await`, `Task.Delay()` and `Task.WhenAny()`. Your input async method should return a `Task&lt;string&gt;` where the string is the input the user entered. If you just need to wait for any keypress, then use `Console.ReadKey(true)` in the input async method and return just a plain old `Task` from it.
&gt;I recently found out that QBasic is alive and well. Very cool! My first professional program was written in QBasic!
Show me the mon ... code. 🤓
That's really cool! I wonder if it still is used professionally. 
For TTS there's the System.Speech library.
darn. thanks though 
Just to point out that this isn't quite an apples to apples comparison. VS does quite extensive semantic searching via ctrl+T: [https://imgur.com/a/gtR7Oo4](https://imgur.com/a/gtR7Oo4) &amp;#x200B; And the find result window view is also now a table view that you can configure the grouping on: [https://imgur.com/a/0bOD1PZ](https://imgur.com/a/0bOD1PZ) &amp;#x200B; At the end of the day it comes down to preference, but I just wanted to clarify the VS comparison.
I know it is something probably simple I am missing due to inexperience. Just can't find out what. Alternatively, I can just write to an existing file but wanted to finish this approach for the learning experience.
So many solutions for this. You could for instance use try-catch blocks, the static TryParse(string input, out variable) in an if statement, do Math.Abs(input) for negative numbers, and zero shouldn't be a mathematical problem unless you divide by it (simple if statements to handle stuff like this) 
Oh no, this is how I started. I'm now doing this eight hours a day for a living please stop now while you still can!
So when does CreateExcelBugList get called? Also, currentRow will always be 2 in WriteToExcel, so you'll never be able to add a third row no matter how many times you call it.
All Visual studio generated code is fragile (serializables, proxies, entity framework, linq, windows forms, templates, etc). Use of EntityFramework enitities as your business objects is a decission that will affect future development. If you need to change your data sources without deflection layers, you will get a lot of work. That might not happen during all project lifecycle. Take the risk or not, is your decission as software designer.
Use an [AutoResetEvent](https://docs.microsoft.com/en-us/dotnet/api/system.threading.autoresetevent) private AutoResetEvent ExecutionContinuesEvent { get; set; } MaybeInterruptedCode() { this.ExecutionContinuesEvent = new AutoResetEvent(false); this.ExecutionContinuesEvent.WaitOne(2000); // wait for 2 seconds or until ExecutionContinuesEvent is set // Do the thing } OnPressEnter(obj sender, EventArgs e) // whatever your press enter event is { this.ExecutionContinuesEvent?.Set(); } 
Hmmm, okay, I actually knew that there was a better and more compact way to do this but I wanted to try for my self, I will look for that. 
Ohh,thanks man, I won't have time today to try it because of some personal problems but I will make sure to try it out :)
Well, first I wanted to create a game, I installed unity but it lagged so much on my computer, after that I installed game maker studio and I noticed I couldn't do much without coding, I tried coding and I found it actually fun. I was enjoying more the programming then the creation of the game itself, that is the that I started learning c#, at the moment I just want to learn because I find it fun :)
Oh, I'm sorry. The CreateExcelBugList gets called at [ClassInitialize] when the test suite run starts. Also, you are right about currentRow. I wanted to get these methods fixed first before fixing the row writing. The WriteToExcel only runs if a test fails.
I am out of time today but if I have some tomorrow after I finish this program (because this has a bug) I probably will pm you, wait for me :)
Holy shit, this is a game changer. 
I actually was showing this to my girlfriend and she was the one who discovered a bug :P
Based on my understanding LINQ is just syntactic surgar while streams was implemented down at the VM layer.
Actually https://github.com/Yutoru/Uncomplete/commit/aeb96fcf146f0ed1ef2f7b3e45cfdcbb8c1729b2
That is nice, I usually go to r/dailyprogramming but usually the challenges are still hard for me so I need to come up with my own.
You can't download it but you have the code here ;) https://github.com/Yutoru/Uncomplete/commit/aeb96fcf146f0ed1ef2f7b3e45cfdcbb8c1729b2 
Here are the steps: * Start test run * [ClassInitialize] runs and calls the CreateExcelBugList (works) * When test fails, the WriteToExcel method is called (fails)
https://github.com/Yutoru/Uncomplete/commit/aeb96fcf146f0ed1ef2f7b3e45cfdcbb8c1729b2
oh, well, that as nothing to do with my code :) https://github.com/Yutoru/Uncomplete/commit/aeb96fcf146f0ed1ef2f7b3e45cfdcbb8c1729b2
https://github.com/Yutoru/Uncomplete/commit/aeb96fcf146f0ed1ef2f7b3e45cfdcbb8c1729b2
Yes. There are many technical solutions. But focus on use cases. What would a user want to happen? Most of the time a useful error message instead of some converting magic like abs or trimming all non number chars. 
(max should be 1 higher than your actual max, so if you want a number between 1 and 6 max should be 7)
Ofcourse. I was talking about, like you said, technical solutions. Feedback is always important to the user. I make video games, and player feedback based on use cases are what we dedicate most of our time to get right. But I didn't realize you were giving OP something to think about at the time I posted my reply 😅
I've looked back at previous code, especially from the learning phase, and not even recognize it. It's good to keep the old code around just for historical sake and to not forget the hard work it took getting to where you are now (or in the future).
Very cool work and love the use of Earthbound sprites!
Funny story, I used to be a Cisco qualified engineer many many many years ago, so I should have known that :) 
Nice!
&gt; Just to point out that this isn't quite an apples to apples comparison. VS does quite extensive semantic searching via Isn't that ReSharper? I can't get it to work on my VS :( &gt; And the find result window view is also now a table view that you can configure the grouping on: Is this on the latest VS? That's definitely a step in the right direction if so 
Was it similar to [this](https://www.ebay.com/i/273681270779?chn=ps)? The last time I used BASIC was on these.
Congrats. What's the bug you need to fix? Also, you can simplify the math a bit, at least for the seconds calculation, to make it more readable.
It was the second one, that exact one. I spent an entire beach vacation on that thing learning to program because it was more interesting to me than the beach which is quite an accomplishment as I love the beach.
&gt; Use of EntityFramework enitities as your business objects is a decission that will affect future development. Do you mean situations when we e.g. want to switch from EF to Dapper?
When making major changes. When making minor changes.
Data Sources and Databases are a detail. Your core business rules components must be agnostic of the database, orm or any connector. For example: A lot of companies do not allow use of EF. They could say you: we DENY SELECT permisson. Modify business-EF code will be hard. This apply for any database connector tecnology.
&gt; But I'm a Windows guy [..] and I think macs suck and feel like trying to develop on them is like playing guitar backward As a Linux guy on a mac, this is how I feel about Windows development.
So if VS code shipped as a pre-bundled package with all the appropriate plugins already installed, and removed the ability to add new ones, that would be an IDE? It's the same damn thing, man. The ability to enable or disable functionality as plugins does not make it any less of an IDE. What matters is the functionality provided when you sit down and get to work.
It’s not ReSharper, no. But R# may be intercepting the command and using its window. This is in VS2019, yes.
I've been programming for 20 years and even I want to do this now :D
TimeSpan is definitely the way to go here. It can convert seconds into a proper object with years, days, hours, minutes etc. I think it has precision down to 1ms. .NET Framework has lots of stuff like this, it can be very helpful to learn more about it. Lots of code you'd waste hours on already exists and has been battle-tested.
I understand, I loved mine as well! Looking back now I don't think I would be doing anything programming related had my grandma not bought me that thing.
Can you please check if style works fine in Firefox? The app looks good on Chrome but I cannot say the same about Firefox.
HttpClientFactory is the best solution, but honestly for 90% of uses the best solution is going to be "cache HttpClient for some length of time (e.g. 1 hour) and create a new one after the cache expires". This will give you an average of 15 minutes downtime every time DNS changes (which generally isn't often). Risk can be reduced by scaling horizontally (caches will expire at different times) or reducing cache duration to whatever you can stomach (if you have one user every 15 minutes, it doesn't make sense to evict cache every minute). For the other 10% of use cases, better options are available.
the remember me checkboxes are in the center (i don´t know why) besides that it works fine for firefox
Nope, what I described above isn't conventional as per Microsoft, even though you'll find plenty of example code written by Microsoft that uses the same styles I mentioned.
Ditto, invaluable educational toy.
Additionally, when you go to apply for a job and the say "what do you know about source control," the answer is "oh, I use it git for all of my personal projects." And that's the best answer you can give for that. 
Do you want to feel like a grand wizard again? Go a create a shader! https://www.shadertoy.com/api
you could adapt this into a CQS approach. MyCommandHanlder : ICommandHandler&lt;MyCommand&gt; { ... constructor public Task Handle(MyCommand command) { ... interact with context and save } }
I don't believe that a property like that exists, but couldn't you take the progress bar's value and add it to the textbox position? For example: - Progress bar value: 45 [Text box position] = (45 + [Text box position])*[scale] Sorry for not including the real property names 😅
Congratulations :) We're all been there and a lot of people would already have abandoned before this. Keep up the good work!!
you could adapt this into a CQS approach (and this is my preferred method for using a context) MyCommandHanlder : ICommandHandler&lt;MyCommand&gt; { ... constructor public Task Handle(MyCommand command) { ... interact with context and save } } For a simple application that's mostly CRUD type actions this could be quite suitable. I feel there are a few problems with this though: * You're locked to entity framework, which may cause problems down the road. * Database tables are not necessarily good domain models and you may be making sacrifices in your domain model or schema. * Any changes to your model are affecting most of your stack and require a database migration. * You're stuck with primitive types so lose the ability to create and use richer domain types or engage in 'type driven development' 
Is this related to MediatR library? If so - I see no point using it as it doesn't give us much in the way of benefits. E.g. if you press F12 it's impossible to easily navigate to the relevant handler. You have to look it up by naming convention. Moreover we can implement CQS using services which are injected into a controller - there'll be 2 types of services each per Query and Command.
If you go into the xaml template: [https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/progressbar-styles-and-templates](https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/progressbar-styles-and-templates) PART\_Indicator seems to contain the visual for the progress bar itself. The PART\_GlowRect with it's set width and negative margin makes me think it's the object you're going to want to align with. So you could put a textblock in the same grid as that rect, align right, and bind its margin and width to the margin and width of the PART\_GlowRect element. The full solution would be to derive a new progressbar from progressbar, give it your custom template, and then create a DP that lets you set the indicator value, which your template recognizes and binds to. Another possibility is to use Slider [https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/slider-styles-and-templates](https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/slider-styles-and-templates) which has a label on it that moves with the 'thumb', and then deactivate the interactive parts of the template. &amp;#x200B; If you want to do something more like GeneralAuguto is saying, you can use MyPRogressBar.Tempalte.FindName(PART\_GlowRect) and get the bounds off that or whatever to position your textblock arbitrarily next to the control.
Let me think... As per my example above (pastebin) - we have 2 entities: Customer and Payment (one-to-many). In this case Customer is an Aggregate Root. Am I right in thinking that I must implement a wrapper class, let's call it CustomerDomain which contains Customer property as POCO object? Say, we moved our method MakePayment() to CustomerDomain class... Then in order to store Payments should we inject repository/dbContext into CustomerDomain? I'm pretty sure so. CustomerDomain isn't persistence ignorant. Plus we have extra difficulties with this approach - change tracking must be implemented from scratch. Is that really fine?
Well, your business objects Customer and Payments know about database. There is no problem there because you don't have any business rule there, is just database saving. If you add business rules on CustomerService class or Customer class, you will get components that know too much. If your business rules and validations will be on another place there is not big problem.
I am getting an error on my Reader method. It said "Expected Method Name". So at first I thought the creator meant "static void Reader" instead of "static Reader", but even if you change it to the first, you still get an error when writing the line "**string** name = Reader.ReadLine(5000);" that says that "Reader is not resolved". Any thoughts?
Any suggestions?
&gt;Well, your business objects Customer and Payments know about database. Do you mean Change Tracking by this? customer.MakePayment(input.Amount); _dbContext.SaveChanges(); See, SaveChanges() call is not used internally by Customer class. Customer contains methods which make changes to object tree, right?
Sorry I'm new to C#. So I'm assuming that these methods should start with "public void" and also the "obj sender'' should be "object sender". I also looked over that link and I'm struggling to understand how to use this and how it works. What do you mean by "Do the Thing" and how should I call this?
Not necessarily MediatR. CQS is a pattern and the advantage of a command handler interface is all commands and/or queries are built on the same abstraction which makes it really easy to decorate handlers with both generic decorators or on a per handler basis. One logging decorator can be written for the entire application for example. As for finding command handlers, I usually have the handler in the same directory and Rider has no trouble at all showing me all the usages of a command or query. I find it really hard to believe visual studio would be incapable of finding usage quickly and accurately.
Actually CustomService class responsabilty is save a payment info to database using EF internally. Its perfecty ok because there is no business rules. You are right, Customer class don't know about EF, Customer is an entity (not a EF entity, on this case is both). The question is: where do your business rules and validations will live?. In CustomService class?, In Customer class?, or another not related component. I prefer build my business rules components and entitties first, database logic can wait. I asume you are designing your database right now too, i suggest you build first your core business components. If you are working on a legacy system or legacy database, build database connectors first is perfectly valid.
Your product class references DealFamily, and DealFamily references Product. It's a circular reference but should be one-way. Note, what you're calling a "deal family" is commonly referred to as a "discount schedule". I would just put the discount schedule in a dictionary that you initialize in the constructor. Something like this: public class Product { public decimal Price { get; set; } public Dictionary&lt;int, decimal&gt; DiscountSchedule { get; set; } public decimal GetDiscount(int orderQuantity) { var discountKey = DiscountSchedule.Keys.Where(x =&gt; x &lt; orderQuantity).Max(); return DiscountSchedule[discountKey]; } } 
Ah that explains a lot then. Thanks!
I've edited my code and now I have this bool canPressKey = true; DateTime Tthen = DateTime.Now; do { while (!Console.KeyAvailable &amp;&amp; canPressKey == true) { while(Tthen.AddSeconds(2) &gt; DateTime.Now) { canPressKey = true; } canPressKey = false; } } while (Console.ReadKey(true).Key != ConsoleKey.Enter || canPressKey == false); I'm not getting any errors, but when I run my code, it pauses forever. I'm looking over your suggestions right now and will get back to you once I have an idea of it. Thanks for the help
Discount code is in the link.
&gt;not a EF entity Well, it's actually a one.. And I tend to put validation into MakePayment method public class Customer : FullAudited&lt;long&gt; { public Customer() { Payments = new List&lt;Payment&gt;(); } public string FullName { get; set; } public virtual ICollection&lt;Payment&gt; Payments { get; set; } public void MakePayment(decimal amount) { //validation if (amount &lt; 0) { throw new Exception("bla bla bla"); } Payments.Add(new Payment() { Amount = amount }); } } So, in your opinion my approach is vulnerable, I see. Do you happen to have any code examples of how you go about implementing this part by any chance?
So the point of an API is it doesn't care who calls it, the logic is the same. Are you sure this is the way you want to go? Depending on your architecture it may be best to build this logic into the client itself and DI the correct interface per client on start up. Your API would then change to just retrieve any data that the client needs to perform the action. After your client has calculated the new result you would have another API endpoint to post the result to.
Can you elaborate a bit more on what specifically the behavior is that will be different depending on the client? Knowing what that difference is will help point to where the diversion should be placed.
Factory based strategy is the best. You can define a serie of general logic using interfaces or abstract classes. &amp;#x200B; If you need only one generic component with multiple variants, "strategy" design pattern is the right. But, if you need a family of components that do something related, then you need to implement "abstract factory" pattern. &amp;#x200B; You will need an if/else block or and switch for create instances, obviously, only one. &amp;#x200B; But oriented if logic (if client a then do a, if client b then do b) dispersed on all levels of your code will be a pain in the ass when you need to maintin it.
Awesome work, thank you.
I am king of lost with this task stuff, but I did find this code Task.Factory.StartNew(() =&gt; Console.ReadKey().Key == ConsoleKey.Enter).Wait(TimeSpan.FromSeconds(2.0)); It works well except that fact that you can just hold enter and go through this code many times. It would be great if there was some way to detect if the enter key was released and inject that code here. Another issue that I saw on the post is that the task if the task times out then it will continuously be searching for a key press which will take up a bit of memory.
Well, a customer does not require payments to exists. Any payment policy may not apply to every customer, a customer may not have payments, a payment may not related to any client. Talking from business rules perspective, not database model. Semantically your payment collection with his business rules and validations should live outside of Customer class. Obviously is easy to link Customer with payments because you are building from your database first. I would create an IPayments interface with MakePayment method, i would put an IPayments object as Customer property. If i don't know how to deal with payment logic right now, from Customer point of view Payment policies are irrelevant, Customer need to know how to make a payment, not how payments work.
I have looked over this code a few times and my lack of c# knowledge stumps me. I have worked to put this piece together and I can't figure the problem. bool canPressKey = true; bool enterPressed = false; DateTime Tthen = DateTime.UtcNow; TimeSpan breakDuration = TimeSpan.FromSeconds(2); while(DateTime.UtcNow - Tthen &lt; breakDuration &amp;&amp; canPressKey == true) { while (Console.ReadKey(true).Key == ConsoleKey.Enter) { enterPressed = true; } if (Console.ReadKey(true).Key != ConsoleKey.Enter &amp;&amp; enterPressed == true) { canPressKey = false; } } When I run this code, the console just pauses blankly. Would really appreciate any help.
I've brought the code to this bool canPressKey = true; bool enterPressed = false; DateTime Tthen = DateTime.UtcNow; TimeSpan breakDuration = TimeSpan.FromSeconds(2); while(DateTime.UtcNow - Tthen &lt;= breakDuration &amp;&amp; canPressKey == true) { if (DateTime.UtcNow - Tthen &gt;= breakDuration) { canPressKey = false; } while (Console.ReadKey(true).Key == ConsoleKey.Enter &amp;&amp; enterPressed == false) { enterPressed = true; if (Console.ReadKey(true).Key != ConsoleKey.Enter &amp;&amp; enterPressed == true) { canPressKey = false; } } } &amp;#x200B;
&gt; A lot of companies do not allow use of EF. Aside from the obvious not trusting devs to do something stupid or being a performance critical scenario what other reasons are there for flat out denying use of EF?
You could just package .NET Core zip release (rather than the installer). Then use the dotnet.exe from that zip to run your dlls
We did that for about 3 years, exactly as you described. Then found our controllers were depending on N handlers, one for each action. So instead of worrying too much about navigation, we consolidated and added a single mediator pattern. This also gave us the ability to design request handler pipelines, decorators, policies, enrichers, and more. We lost direct navigation. To make up for this, we placed handlers right next to the places they were used, and established a naming convention so you can do “Ctrl + T” (I use ReSharper so it’s a little different). I’ve used this pattern for maybe 15 years now? And I created MediatR to stop copying the same code around. You’d think it would be a deal breaker to lose navigation, and I thought it might, but after dozens of projects, some with over 1000 handlers, it hasn’t been the case. Now if I was using a functional language, all of it would go away but we’re in OO land so mediator pattern it is.
&gt; And I created MediatR to stop copying the same code around. You’d think it would be a deal breaker to lose navigation. Precisely why i have used MediatR, realizing i had just be writing MediatR anyway, although in my next project I may just be grabbing certain parts of it or rolling my own as i want to do some things a little differently. &gt;Now if I was using a functional language, all of it would go away but we’re in OO land so mediator pattern it is. With so many request handlers and decorators containing a single method it's really just functions and higher order functions with extra steps, kinda ironic that following SOLID principles leads to functional styles...
The behavior you're looking for is called throttling. [here is an example for c#](https://stackoverflow.com/a/28017571/1526306) While researching throttling, I also recommend reading up on debounce as well. 
Why are you navigating to your controllers in order to go to navigate to your handlers? Just navigate directly to your well-named handlers with fewer keystrokes. "I'd like to go to my FooBar handler. ctrl-N FB Enter."
Very cool to hear this response actually. I recently wrote about the navigational style OP is talking about ([bottom of this article](https://makingloops.com/visualizing-thin-controllers/) because I haven't used Mediatr yet. At the time I hadn't considered that you would end up with a lot of injected handlers in a controller depending on how many actions your Controller has. So it ended up getting out of hand in your projects? 
##Why visual studio is garbage &gt; With Resharper/Rider i have never once had this problem, i can press ctrl-b and easily find the handler in the navigation prompt. Now that i have that out of my system, a few thoughts. * MediatR isn't CQRS, it's just a library to provide a standard abstraction for CQS (and act as a primitive message bus) but that's a pedantic detail i'm not going to get caught up on. * Are you really throwing away the decoration and enhanced pipeline capabilities just so you can go to implementation in a single keystroke? * I could also argue if you care about the implementation of a function you've screwed something up. * What happens when i want to add a Find(), Get() or a few other functions for an Entity and those command and query services start blowing up? Personally, i prefer to have the single handler in a single file. This post as a whole seams petty, especially as i just told you the strengths of the pattern in another thread and you haven't bothered to address them here, you've just doubled down on your decisions in the your last post. 
Was going to mention Ctrl+T. A coworker turned me onto it. 
Just put Handler is inner Message. Navigate to Message =&gt; done. Seperate each batch by partial like. - UpdatePatientCommand.cs - UpdatePatientCommand.Handler.cs - UpdatePatientCommand.Validator.cs Use ext like Dpack 
Ah, we were discussing CQS in my other post. Seems like I've totally misunderstood the concept. It's really difficult to grasp it outright without relying on existing project template. Should I delete this particular post on MediatR? 
No because here's still valuable discussion being made. I just got a little annoyed as i had just replied to you in another thread and then found you had posted 'X is shit' anyway. If you want to understand this better i highly recommend [Dependency Injection Principles, Practices, and Patterns](https://www.manning.com/books/dependency-injection-principles-practices-patterns) which will introduce you to the concepts of CQS, decoration and how to leverage Dependency injection for an application. Probably one of the best .Net books i've read.
Decoration in particular is the part I've completely missed. Thanks a lot for pointing it out. And sorry for stupid questions/posts. 
&gt; Is there a middle ground where I can just compile the core to a single lib and have my other exe's dynamically link to it? Yes, if a single exe works for you, that's easy. Most of my projects have multi-command console utility apps using something like https://github.com/fschwiet/ManyConsole to handle arguments and dispatching. Otherwise as long as all your executables are targeting the same framework and library dependency versions and bitness, it should work to build them all and then copy all the files into the same directory with a post build step, then you'd only have the one copy of the self-contained .Net deployment files.
Any chance of adding this to github so I can navigate the code without having to download it?
thanks for the solution. I've decided to use flurl , I hear it handles most of the stuffs itself 
Or services, managers, whatever. All slightly different for no good reason. It’s not that big of a deal, but the lack of consistency just grew over time. I’ve blogged about it a ton but we were missing the bigger picture that the mediator pattern solved. I’m certainly not the first or only one to come to this same conclusion.
Good to know, thanks.
That is quite easy to achieve. Put the `ProgressBar` and a `TextBlock` right after each other inside a simple `Grid` panel. Then you can control alignment and margin to position it wherever you want. For example (simplified): &lt;UserControl&gt; &lt;DockPanel&gt; &lt;TextBlock DockPanel.Dock="Top" Text="My progress bar:" /&gt; &lt;Grid&gt; &lt;ProgressBar x:Name="MyProgressBar" HorizontalAlignment="Stretch" Value="{Binding Path=MyValue}" /&gt; &lt;TextBlock HorizontalAlignment="Center" Padding="2"&gt; &lt;TextBlock.Text&gt; &lt;MultiBinding StringFormat="{}{0:0}/{1:0}"&gt; &lt;Binding Path="Value" ElementName="MyProgressBar" /&gt; &lt;Binding Path="Maximum" ElementName="MyProgressBar" /&gt; &lt;/MultiBinding&gt; &lt;/TextBlock.Text&gt; &lt;/TextBlock&gt; &lt;/Grid&gt; &lt;/DockPanel&gt; &lt;/UserControl&gt; &amp;#x200B;
To help out this question, could you list what roughly you're comfortable with? Some suggestions: * Functional Programming * Dependency injection, i highly recommend [dependency injection principles practices patterns](https://www.manning.com/books/dependency-injection-principles-practices-patterns) and the authors [Blog](http://blog.ploeh.dk/) (for FP stuff as well). * some basic design or domain driven design courses, coding's fun but this is the important bit. * Concepts like CQRS or event driven design. Any one of these is a rabbit hole that could keep you busy for a while.
&gt; the point of an API is it doesn't care who calls it, the logic is the same Can't say I've ever seen that as part of an API definition. On the other hand, I have seen quite a few input variables that change the output of an API: client version, location, etc. Maybe I'm not quite understanding what you are saying?
I study software development in germany and i have learned it through books and „DailyCodingProblems“. My first thing was a chess game with/ in wpf-format. At the moment i learn nothing about programming in the my high school. I just skip the class and read books that help me way more. At the moment i read „CLR via C# fourth edition“ and i learn a lot. It helps me so much to go deeper into it. Also at the side i do a little unity candycrush clone. It should be done in a month and then i use this to build a portfolio website and describe the techniques i used and my thoughts on it to show that it is not just simple code snippets. I use to learn more about advanced things and try to involve them or even try to use other programming paradigms as dod. Also its cool to profile your project and see what you have done and what your changes do. The portfolio website will be also awesome to learn to build a website and stuff so another new point to learn. If this is finished in like 2 months (i hope) i will start and make an application that reada statistics and handles data to learn more in this field. As a foundation i use Dota 2 and make some more detailed statistics about the last games someone played. I want to show what my plans and history is to motivate you maybe to start and get slowly bigger projects. And people tend to look down at games as „real projects“ but this is stupid your learn experience is totally in your hand with it. Just so things from your life, it sosnt matter what about, it just matters what you learn. Long and hard to read text. Sorry for that its 4:30 am. 
Idk. I would consider it an IDE if all the functionality was integral to VSCode without a plugin architecture.
How do you know Visual Studio isn't built with a similar architect behind the scenes? "Plugin architecture" is just good decoupling.
&gt;you would end up with a lot of injected handlers in a controller Wrong. Just 2 services. One handling **Queries**, the other handling **Commands**.
I agree wholeheartedly. The number of files I had to touch went through the roof when my client mandated this. In some cases the number of classes I needed to add or modify exceeded the number of lines of actual code I wrote.
&gt; What do you mean by "Do the Thing" whatever your code was going to do after the 2 seconds &gt;how should I call this? You can slot it in to wherever you're already checking for the enter key being pressed. AutoResetEvent.WaitOne(2000) stops your code until either 2 seconds elapse or a different thread calls the set() method the AutoResetEvent. If you're just doing this in a console application, you could do something like bool isElapsed = false; this.ExecutionContinuesEvent = new AutoResetEvent(false); this.NextInput = Task.Factory.StartNew(() =&gt; { string input = Console.ReadLine(); //Did we receive it during the 2 seconds and was it what we were looking for? if (!isElapsed &amp;&amp; input == string.Empty) { //Cut the 2 second wait (which happens later in the code) short ExecutionContinuesEvent.Set(); //And get the next console input to use once we need it input = Console.ReadLine(); } return input; }); this.ExecutionContinuesEvent.WaitOne(2000); // more of your code here // then the next time you need input from the console string input = await this.NextInput; (or just don't await it if you never need to give control back to the user):
That’s the great part about this site, you can choose the difficulty. After you solve the problem they show you how others have solved the same problem.
&gt; How do you know Visual Studio isn't built with a similar architect behind the scenes? I don't, but it seems unlikely. &gt; "Plugin architecture" is just good decoupling, and loose coupling is good programming practice. Pfft. It adds an extra layer of crap between stuff. Just because something is a good programming practice does not make it the only or best one every time.
Sorta, but it’s far easier to just use TimeSpan This is good practice for %, but it’s also good to know the right tools for a job
JS is not “cutting edge” JS is a 40 year browser script that’s being abused. It doesn’t even have multi-threading Also, the dev team over at MS is doing with new feature development. The development of OWIN and LINUX compatibility have really opened up a lot of doors
&gt;Why inject a service per feature into your controller? I mean having 2 services per Aggregate / Entity. One handling **Queries**, the other handling **Commands**. That means QueryHandler contains **multiple** GetAll(), GetById(), Find(), etc.. CommandHandler contains **multiple** methods related to making changes.
Is it really? int seconds = int.Parse(Console.ReadLine()); Console.WriteLine("{0}:{1}", seconds / 60, seconds % 60); This looks pretty easy to both write and understand to me. The best alternative with TimeSpan that I could write is: TimeSpan timeSpan = TimeSpan.FromSeconds(int.Parse(Console.ReadLine())); Console.WriteLine("{0}:{1}", (int)timeSpan.TotalMinutes, timeSpan.Seconds); I don't think that's easier at all. The language already gives you the tools in the form of integer division and the remainder operator. It's what TimeSpan is more or less doing under the hood anyways: https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,120 Hopefully the compiler is smart enough to inline the functions, remove pointless casting, and simplify the arithmetic. If not, the reference to TimeSpan has created unnecessary computations, regardless of how small they may be. Importing libraries for simple tasks is how the JavaScript world got such ridiculousness like [is-odd](https://www.npmjs.com/package/is-odd) (Which apparently has 123M downloads, yikes!). If the problem were to increase in scope, like for example require printing hours or manipulating the time, then it may be wise to use TimeSpan, but at this point its unnecessary to use it. 
Timespan is easier. That doesn’t mean it’s *shorter* Timespan eliminates the mental burden of solving modulos and improves overall maintainability
[Check NuGet.](https://www.nuget.org/packages?q=Speech) Many if these use cloud services, but not all. The very first one seems like it could be a candidate.
Thanks!
[The previews now replace its C# editor with that of Windows](https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-preview-relnotes#new-editor) (but targeting Cocoa instead of WPF). That should help with a lot of things. There’s other pain points still, though. (Even trivial stuff like its NuGet UI being really weird.)
Remindme! 6 hours. 
I will be messaging you on [**2019-03-28 12:16:57 UTC**](http://www.wolframalpha.com/input/?i=2019-03-28 12:16:57 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/b6aqua/c_machine_learning_reverse_image_search_tutorial/ejk0h41/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/b6aqua/c_machine_learning_reverse_image_search_tutorial/ejk0h41/]%0A%0ARemindMe! 6 hours. ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Wrong.. That might be "CQRS", but it's horrible code. SRP from SOLID is very much broken having a service with 50 different methods to alter an object, not to talk about the size of those things :(
Hey good point mentioning SRP issue. I tend to agree.
The topic here seems more like bashing on single product/person.. maybe OP should revise to talk about "the mediator pattern" instead? Lots of products support it, and it's definitely not MediatR's fault. In other words: Shame the pattern/theory, praise the individual contributors who create great free products. If you don't like the product, move along.
Yes, I am planning to eventually add all my project to github. One of the main problems is that I really need to refactor the code before adding it to github. 
Mainly it is going to be loading objects from the database. It will validate them by checking they exist, checking the properties are as expected, etc. Then it will be writing new records out to the database if everything checks out ok. Else it will just return an error event which will get displayed to the user.
It’s crashing every half hour for me. Other fury points include making code changes that don’t compile and are skipped over when debugging. I have to clean to get them to be included. Any advice about that?
We have 2 separate API's at the moment, 1 for each client. We originally thought they would be quite different so it made sense to keep them apart, but it turns out that they are almost identical for the most part. Only minor differences in a few places. Now we need to add 2 more clients which should be working mostly the same. So we could copy/paste most code and create a new API, but instead we are going to try and unify them to create a single API. Since we are getting to that point where if 1 new change comes in to the operation, we may have to make the same change in 2-4 different API's which is just going to become a pain in the ass. &amp;#x200B; The clients are just web sites we were trying to keep as thin as possible.
I think you're hinting at it but please make sure you explain the relationship between Liskov substitution principle and Interface segregation principles, perhaps also introducing the idea of 'role based' vs 'header based' interfaces. Such a common misconception to have a `Service: IService` with multiple members which leads to the question "Why put it behind an interface if I'm not changing the implementation" or the idea you put a class behind an interface just for mocking. &gt; L. Child classes don't fake the parent. If you have a duck parent, but child duck needs batteries, you probably have the wrong abstraction. Use just what you need. Don't fake it. I don't feel this is correct, you may be missing some context in that summary though. I feel it should be "if you have a duck parent but the child duck acts like a goose you have the wrong abstraction." If the duck runs on batteries but otherwise behaves exactly the same then it's following the Liskov substitution principle as you can swap out a battery duck and a normal duck, the same way a good abstraction for persistence would be indistinguishable if it was a flat file or database.
Okay maybe I was a bit over zealous saying that APIs shouldn't do this. But I stand by the overall idea. Passing a variable to change this kind of functionality seems wrong to me. You're relying on the client being trust worthy in telling you the correct client type and you're coupling your API to your clients which seems completely wrong to me. 
As always thank you, if you have any ideas for a future project please let me know
Very well said. I will add that. 
Would this work to automatically recognize and categorize memes?
What about now? **L**. *Child classes don't fake the parent*. If you have a duck parent which derives from animal parent, but child duck needs batteries, you probably no longer want the duck parent. Use just what you need. Split it. Compose it. Don't fake it. **I**. Let others use just what they need. *Seperate interfaces* by splitting them in many small ones per operation or use inheritance of interfaces when you need a change (part of L). **D**. *Inject dependencies* from the outside, so that the change will not impact existing implementation (supplement of O). Break the chain of dependencies, inverting them and keeping to a 1:1 dependency (on interface). Use interfaces when there can be another implementation, but not necessarily is right now. Testability usually requires it.
Thanks I'm not huge into games dev, also wpf seems pointless as winforms does everything
afaik wpf is better for more advanced stuff.
C# was Java once. But it's a different beast now. C# is now stealing lots of ideas and features from F#. IMO, C# is gaining weight atleast in terms of syntax. Pattern matching, Async methods, Tuples, Type Inferences are all inspired from functional languages like F#. Java and C# diverged a lot. Java will feel inferior if you are used to C# or. NET ecosystem as a whole. But you cannot just compare dynamic and multi-paradigm language like JavaScript with statically typed and object oriented language like C#. 
I have no idea what most of that means. Thank you for the advice. My skill level is amateur I don't know if a lot of what I do is correct, but it works fine. Props to myself (or anyone who wants to judge) github.com/bendahon
Begone European regulation bot!
Yes it could, but please note depending on the memes you might need to do some additional image processing. I did a basic image classification some time ago and you can find it here: https://www.youtube.com/watch?v=QWbNCI7Whq0 But what I would suggest to you is the following: Get a pre-trained CNN - Convolutional Neural Network like VGG Pass you meme image through it and extract a feature vector from the pre-trained VGG model at some Convolutional layer (you might even go hire and extract from the fully connected layer). Then build either an unsupervised learning classifier like K-Means (if you are not sure how many classes (different meme images) are there in your meme images, or if you have labeled memes then just create a dataset out of them and use Supervised Learning, some Fully Connected Neural Network. Either way you would get really good results. I am working up to Convolutional Neural Networks and Pre-Trained models in C#, so hopefully I will do something really similar.
You can add it to Github and then refactor. It will also provide a mechanism for people to submit issues, pull requests and so on. I don't know if you're using source control now, but if not, start immediately!
I am not since this started as a side little project. Didn't care about it in the beginning but I do now, since I want to start like a little movement in the C# community towards ML. So I will take you up on the idea and just go ahead and start putting this to GitHub. Thank you
On Firefox 66.0: https://imgur.com/a/zhT6mCs
In visual studio, you can Ctrl+F5 (I think) to star the program without closing at the end
While I know people use JS and node for back-end stuff. Node has never really felt up to snuff, and often feels more like a way to get pure JS devs into the server side space with as minimal change to their programming mental model as possible. I'm less bothered about JS taking C# place than I am the rise of new native and safe languages coming up. Not that it's a problem, I'm happy to see these new languages, but in my head, the right one of these are more likely to topple c#. Especially if MS ever gets behind one with any sort of strength.
Motivation comes and goes. Build a habit instead. I work on my game every day. Doesn't matter if I tweak some spelling, jam pattern matching into the game types system or suck down modafinil and power through networked ai bugs. As long as I do something. Anything. Then I see a bump in my steam sales, and my hallway light turn green because my bot saw my build didn't make the build server fail. And I talk about that at meetups, and with dev friends, and post on reddit. And shit feels good man. Goddamit. Now I wanna code. Gonna put in that lobby privacy option meow. 
Remindme! 48 hours.
Remindme! 77 hours.
Create a third entity in your model that contains a product id and a deal family id. Many refer to these as bridge tables, but they go by different aliases.
This is the kind of excitement. OP, you're doing this right.
oh..
Could this be used to recognize if a photo is either hotdog or not hotdog?
yin yang used a Convolutional Neural Network to solve that problem :) I suggest the same. Train a CNN for that problem
1) Pace of innovation is good. There are some features that I don't use much (or ever) but I don't know if I would call them useless. What I worry about is that the language will grow so fast that it becomes really difficult for new programmers to pick it up. (That's already happening now) I'm worried they will put in features just for the sake of putting in new features. Like there has to be a new version of C# every year so we need to think of features to put in it. 2) I hope Javascript will disappear. It is one of the least fun languages to program in. WebAssembly will allow us to use pretty much any language we want for the web. C# isn't behind the curve at all. 3) That's a no-brainer. Yes it is. C# 1.0 was already ahead of Java. C# is innovating much faster than Java. When Java has taken one step, C# has taken 10. Java finally has lambda expressions, a decade after C#. And it will finally be getting local type inference, one of the last major programming languages to do so. Java is still used very much because of legacy code, but I always the cool and useful features in other languages when I use Java. &amp;#x200B; &amp;#x200B;
Might want to use TryParse instead, in case the cheeky user tries to input non-numbers, such as "butt". Input validation is important too!
I would like to see a new language, an offsplit of c# No inheritance, just composition. No linq. No nulls. 
Or a sandwich vs not a sandwich?
I love that you just called him yin yang but seriously this is pretty cool I'm currently learning C\# so this will be interesting to follow
awesome, thank you :) Not sure if this is suitable for beginner but it is interesting topic.
Would you maybe want to rephrase the D-part? Right now it's a bit all over the place and a little confusing. Dependency injection and testing are techniques that benefit a lot from dependency inversion, but I work in the gaming industry where testing and dependency injection aren't as common as in other coding domains, and even without them there are good reasons to adhere to dependency inversion. Not least because rapid prototyping plays a bigger role, so if your code says that it needs a Player when in fact it just needs any object that can react to a certain effect then your lack of effort to define the appropriately abstracted interface gets in your way. So I think the usual phrase "depend on abstractions, not concretions" is a better explanation. 
I only have a little bit of experience with machine learning techniques and most of this seems like mumble rumble to me. So if I am correct, you recommend using a pre trained neural network for feature detection, after which one could use some more conventional methods for further classification? In which the feature is the unique and comparable fingerprint of said image?
That's not universally true. Unsigned types are a minor thing but they are a VM-level thing. The big thing is generics. Java generics are the way they are partially because they didn't want to change the VM. C#'s reified generics required a pretty big change in the way the VM works.
what does modern mean to you and why do you care about it? why do you think javascript is cutting edge?
&gt; That's how you learn. That's how you learn bad habits. In real life you're never going to roll your own TimeSpan or whatever, but you're gonna need how to look for relevant packages on NuGet or use the built-in functionality, or solve an issue by using Google and/or Stack Overflow. You should learn how those things work. Learn about separation of concerns, about ORMs etc. Spending two days on creating a buggy implementation of something that is *built into the framework* learns you nothing. Your bricklaying skills won't improve by learning how to bake bricks.
And please, just use interfaces all day long. Most mocks cannot mock concrete types in c# for example. Thus, after creation you have to change binding configurations and introduce new interfaces to make classes with concrete types as dependencies testable. Kind regards
Exactly. You need something that would extract a unique features out of the memes. But you also need to disregard the upper layers of the pre-trained network, because what you need are more general meme features that would be expressed into the lower layers of the pre-trained network. There you can find more general features like: Lines, gradients etc. That would produce a matrix for you and you need to flatten it. Make it 1D vector with n-elements/features. All these elements/features are expressions of what is inside you meme image. Now you can get that output and put it as a input into a Fully Connected Neural Network or pass it to more conventional ML algorithms. I would start with the conventional algorithms because the feature vector you are going to get/extract is descriptive enough for a very light ML algorithm to classify the vector. If this is a PROD app. I would go with light calculations in case you want to deploy it to regular PC. If you don't care about memory and performance then attach a fully connected neural network. This is the fastest way to solve your problem, OR you can train a CNN from scratch. But again that would take time and resources. From developers point of view go for the most applicable solution. Good luck, If there is anything I can help you with, let me know.
Sure, if all you ever want to be is a bricklayer. But if you want to be a master of masonry, you've got to learn everything including brick laying and baking. By making a buggy implementation of something, you learn how to debug. It's not an exercise in knowing that TimeSpan exists. It's an exercise in problem-solving. You learn nothing just from copying the answers from the back of the book.
1). The syntax is getting kind of broad, but it allows me to slide around on a spectrum of productive vs performance. A web developer might not have learned the unsafe or zero copy memory operations, but its nice to know they are there when you need them. The IDEs are pretty solid; for a long time VS was a bit overdone, but now that they made the installer modular and faster its not as bad. I personally love VSCode, but sometimes it lags a bit in tooling that makes it hard to use as a full time C# IDE replacement (e.g. limited Razor / Razor Components support). 2). I think the best web projects today use C# on the backend and TypeScript on the front end. Using C# to process long running tasks, querying data, interacting with legacy or native systems and throwing off signalR hub events when real-time-ish interactivity is needed, and using Angular/React with supplemental libraries on the client with their robust vdom, async, state, routing and browser support. If you mean on the server side, then no...C# is not behind JS. C# makes some things really easy that JS struggles with. 3). C# the language blew past Java years and years ago, but the JVM and the CLR are very close. I used to envy the JVM with their better GC, tiered compilation and cross platform capabilities, but the dotnet core runtime has caught up in almost every way. The JVM *might* still have a small edge with their GC, and the dotnet runtime gets a slight edge from having reified generics.
Hard agree on "no inheritance, just composition". Curious on why you wouldn't have LINQ though.
While it sounds totally reasonable to be able to intercept (and/or reverse) the layout of a neural network, from an execution order point of view, is this also functionality generally provided with frameworks like Keras or TensorFlow? Any change I could follow you on GitHub to get the occasional update of the things you're working on?
Some people use interfaces for models. Don't do that please. Otherwise I would agree. 
I added that to the start and I agree. 
I'd suggest looking into interfaces before starting on dependency injection, but I do agree that book recommended by Octopork is a great resource.
No nulls is part of the new c# 8 All reference types are non-nullable by default
Yes it is. Keras and TensorFlow both support it. I may add here that DeepLearning4J has excellent support as well. Please note you can also do it yourself. For example when you download a computational graph that is just a huge matrix. You are able to extract layers of that matrix and reproduce the NN architecture and import it in C# let's say. But it's a lot of work though... I will be creating a GitHub account for these little projects. I realized that I would have to. I avoided GitHub because the code needs to be completely refactored before it goes on GH but I will spend some more time on the next project. Anyways for now best way to follow is my YouTube account (I want to start making a step by step tutorials) and my blog. On my blog you have my whole development process broken into pieces and I also recommend external 3-rd party libraries if you want to achieve the same result with less code.
Excellent demo, love your little Winforms app...great way of demonstrating everything you were doing in one little window! Will browse through the code soon. Thank you for sharing :)
C# is not exclusively statically typed and object oriented. The dynamic keyword makes it dynamically typed, the ExpandoObject facilitates duck typing and prototype based OO, Tuples are more useful in functional programming and Linq is functional. C# a have started as an object oriented language, but now it is definitely multi paradigm. 
Awesome, thank you taking the time to look at it. Code and Tutorial are available on my blog.
C#'s syntax is not as elegant as it could be and it lacks some important features. There are a lot of interesting proposals floating around their github, but who knows which ones will be implemented and on what timeline. Performance is fine for most purposes and I have faith that the JIT and framework will continue to improve. Javascript only overlaps with C# a tiny bit because Node js exists, so I don't see why this question is important. C# is not going to always have a place, but when it does get replaced it's not going to be by a language that's anything like Javascript. C# has been more modern than Java since C# 2.0 at least, and the gap has only gotten larger. I think it's more interesting to compare C# to Kotlin or Swift.
You can look at this at two distinct layers: the API layer, where the URLs and resources are defined, and the implementation layer, where your code makes it all happen. Your clients only care about the 1st layer - that's all they see, all they interact with. So, if each client needs their own special functionality, and there's no way around that, it can make sense to have `/api/client-a/foo/bar` and `/api/client-b/foo/bar`. URLs cost you nothing to add. Under the hood, maybe these two endpoints work exactly the same and it might make sense to have them handled by the same code, but that's an implementation decision, not an API decision. This way, any shared functionality can be handled by shared code, and any unique functionality stays separate.
Winforms does everyting *if* you subvert it and render "everything" yourself, and come up with your own binding framework and controls to go with that, and so on. Not a good thing.
So you've got client-specific validation? Ok, that's not crazy, however it sounds like what you need is a generalized way to handle validation that behaves based on client settings. That means this isn't an API question at all, but a question about multi-tenancy (which has plenty of its own challenges).
I see. Well if it's really mostly just differences in validation, a popular pattern with ASP.NET Web API is to use what are called "Validation Filters" that are essentially small classes that sit in front of an endpoint to validate the request before it makes it's way to your database. I assume you don't want the model itself changing, rather just the rules that are applied based on properties of the client. A simple approach would be to use an Action Filter (or stack several of them up) that checks the client properties and validates the incoming request based on some kind of rules. I wouldn't obsess too much about perfecting it at first, just get it working in the filter and then you can later refactor into something a bit more flexible. Your controller can then assume the request is valid and simply load the object (if it exists) or save the object. I'm not sure if that covers all your different scenarios, but definitely check out the different types of filters you can place along the request pipeline. I have [a few articles here](https://makingloops.com/restful-api-visual/) on this topic that may point you further in the right direction from a asp.net standpoint.
FYI, here's the talk Abstract Because you *can* and because you *want to!* You can because C# runs great on Mac, Linux, Android and iOS (oh, and Windows), is targeted by your favorite editor, rests on a rock solid, time-tested industrial grade platform and is open source. You *want to* because C# is an industry leader in language innovation, is your best option for native cross-platform mobile apps, and is toolable beyond compare. Let’s play around in the key of C#, see why it’s not your uncle’s, and where the language is headed.
Be careful with that advice about Mutex being 50 times slower than Monitor. There are situations where "slower" doesn't always mean slower. First of all, a quick look at the issue through a google search shows that the "50x slower" number is probably crap. The numbers from different sources range from 10x to 100x, and seem to vary according to the way the benchmark is constructed (or whose benchmark is being parroted). So while it's generally agreed that Mutex is slower, the amount is strictly "YMMV". And then there's the case I ran into that shows that sometimes, the flexibility of a Mutex is a performance *benefit*, regardless of it causing a context switch (which is *why* Mutex is technically slower). I have a system service. It checks for new data on a timer. The timer event fills processing queues. The queues are themselves an object with a "wake-up" timer, to force the queue processing to run if it isn't already. Once running, it runs until the queue is empty, then goes back to "sleep". (The queues are ConcurrentQueue&lt;T&gt;'s, so they're safe for this.) This "wake-up timer" uses a Mutex. The timer event runs, tries to grab the mutex, then runs a loop until the queue is empty. If that takes longer than the timer's interval, more timer events run, fail the mutex (they wait 0ms, failing immediately), *then exit*. The first-to-fire timer event eventually exits once the queue is empty, releasing the mutex on the way out. This proved to be *much* more efficient (and less deadlock-prone!) than a boolean flag with a lock. I haven't benchmarked it to get exact numbers, but the difference in the output (both in the error logs and in the actual processing output) was substantial. Don't avoid Mutexes just because some article on the web said they're "slow". Sometimes, the best tool for the job doesn't seem ideal until you try it.
Seems like you’re learning something important right now - project scope management. If you’re taking on too big of a project progress will go no where. Happens all the time in software development as a projects requirements just get out of control. Can you chop up this larger project into smaller ones that you can tackle one at a time? Maybe each one builds on the previous until you arrive at where you were trying to get to in the first place.
And another one of your spam questions...
They didn't even mention the excellent resource that is MSDN? There's little compare to Microsoft's documentation of .NET.
For your project, break it up into small pieces. For example you need to show an address form and save it to the database. Instead of doing this whole thing, make a list. Data model an address. What format does the country and region come in? What is an acceptable zip code? How many lines are there in a street address? How do you associate an address with another entity? Large effort Decide on a data store. Should this be in a sql database? Can it be in a document database? Small effort Create the persistence layer. This layer takes the model you came up with and saves it to the database. Medium effort Create the application of service layer. This layer validates the address. It checks if the zip code, country, etc are okay. It capitalized proper nouns. After that it hands it to the persistence layer. Large effort Create the api endpoint or controller action in the presentation layer. This layer is going to take your model and do input validation. Make sure required fields are not null or empty. Hand the data off to the service. Medium effort Create the UI of the presentation layer. This is your form. It’s slick; it’s fast; it’s responsive. It submits to the endpoint. Medium effort This seems soft, but it’s really important. Use a kanban board to see your progress. It really helps with the wow feeling. Also if you do this, you’ll be developing a skill that even some professionals have a hard time with. Good luck and happy coding. 
But why C# over F#?
Both are developed by Microsoft. And I assume the amount of companies that use C# compared to F# is huge.
The DDD style entity class is the way entities should be designed, otherwise you end up with anemic domain model antipattern. 
Removed: Rule 4. Try searching for "C# cheat sheet", you'll find plenty of hits. If you find one that works out for you, great! If not, feel free to repost the question, but include examples of the cheat sheets you found and specifically how you felt they deficient for you.
Spotted the F# fanboy. 
&gt; No linq Why?
To be clear: I meant objects with functions and logic, not pocos or pojos 😄 Thanks for the hint. Kind regards
Eh, I more often find myself on dotnetperls and SO/Google. Maybe I'm just a newb
Nice, looks like the same approach as https://github.com/Jetabroad/NunitToXunit
&gt; JS is a 40 year browser script You're only about 20 years off.
Nullable references types is off by default. You have to opt-in.
It’s by no means perfect (just like MSDN), but the only thing that I have seen come close to MSDN is MDN. Their reference for HTML/Js is a godsend for not-really-webdevs-doing-webdev-stuff like me.
Depends what you call innovation. F# might be more innovative because it’s bringing a different and new language parading to .NET. But in terms of moving forward the OO paradigm, C# is doing a lot of stuff, quite a bit of it original (like the new POCO-classes alternative)
Often found MSDN too cumbersome to read. When you just want a simple workable example 
&gt; But in terms of moving forward the OO paradigm, C# is doing a lot of stuff, quite a bit of it original (like the new POCO-classes alternative) F# had records since version 1.0 (2005). Since F# 4.1 records can be structs (tho that is an implementation detail). And that is really not an OO paradigm, but more of a functional one. &gt; F# might be more innovative because it’s bringing a different and new language parading to .NET. And a lot of awesome language features that slowly come to C#. For example async &amp; await, local methods, tuples, no-null references, pattern matching, using-clause.. All have been available in F# for a long while already. Meanwhile F# still has awesome features like advanced pattern matching, proper null-handling, strong type inference, discriminated unions, type providers. It's just a pity that Microsoft is not really supporting F# and pushing it.
Huh. Had no idea. Great info, thanks!
Yeah, but given the way Microsoft deals with both C# and F# it won't change any time soon. It's just really a pity that Microsoft is hardly recognizing and supporting F# while it's a great and feature rich language. I believe a lot of C# devs would benefit from learning F#, even when they keep writing C#.
Unix based operating systems &gt; all
According to [Dice.com](https://Dice.com) 291 jobs within 30 miles of me when I search for 'C#' 0 jobs within 30 miles of me when I search for 'F#'
Aye, MDN is also fantastic. I'm also rather fond of Rust. Working now as a Java dev, I'm very frustrated with Java docs. It's literally all over the place. I didn't know how much I took MSDN for granted.
👍
In some ways it's similar. I think I have a nicer way of specifying code patterns and what to convert to. They handle a lot more cases though. My tool is toy, theirs could probably be used for real. Thanks for showing me this repo.
So much this. I find MSDN opaque; it makes me feel stupid.
Don't use `object`, use the actual type. If necessary use a temporary variable. Do you have a C# beginners book?
What is MDN?
&gt; C# runs great on Mac, Linux... Okay let me stop at Linux. It runs great but dear *god* are the tools for it just *atrocious.* `dotnet` / `msbuild` need a fair amount of (in my opinion) not that easily decipherable configuration, and.. **where do I even build an EXE?** Normal builds produce a DLL that requires the runtimes, fair enough. `--self-contained` produces a folder *full* of DLLs. I know `csc` takes `/target:exe` but nothing else seems to support anything of the sort. I'm not seriously supposed to `ilmerge` everything to EXE, am I? Again. C# is a great language. I use it daily. I don't question it's performance. But the Linux CLI tools are either poorly documented or just not up to what I would assume are basic tasks.
Mozilla Developer Network. Has a lot of stuff, but especially HTML/JS reference.
That's totally convincing evidence.
I agree, but I really just think it's because Functional languages just aren't mainstream right now - not because Microsoft has some grand plan to cripple F#
I've removed their posts in the past but kinda gave them the benefit of the doubt. But I think you're right that enough is enough. It's just too _weird._ Plus they haven't changed their behaviour from the times I've removed their posts with the reasons included.
You don’t build EXEs in dotnetcore
Beginner programmer here. What do you mean by c# runs great on Mac, Linux, Android and iOS? You mean the compiler was built for all those operating systems? 
So then what am I supposed to do? Write a makefile to call `csc` a good 20 times?
Damn, you start to listen to me! Now tell me your credit card number.
You build **exe**cutables, but they don't have to have the **exe** file extension.
Single-file executables is not yet support. Self-contained applications are the best you get currently. This allows you to copy-paste to another system without having the .NET Core runtime installed first.
MSDN is where I go to to understand most things. The new docs of the past few years are amazingly out of this world compared to MSDN documents that were 4+ years ago
Linq is the best thing ever happened to C#.
You ship the runtime with the app (dll) or install it on the target system. Then run dotnet myApp.dll Self contained apps aren’t yet a thing yet AFAIK
I mean I like C# but that's the description of Python there! ^:p
I still find that weird... I know for a fact that the C# compiler supports it and trying to give my not exactly tech savvy friends a DLL and telling them "here open this strange window and type some magic voodoo words in" (cmd &gt; rundll nyApp.dll) really doesn't go over that well Just seems like a missing feature IMO
You could drop a .bat file in the distribution package?
&gt; Self contained apps aren’t a thing yet AFAIK They are. For a long time already. At least since 2016. https://docs.microsoft.com/en-us/dotnet/core/deploying/
He's wrong. Self-contained applications are a thing: https://docs.microsoft.com/en-us/dotnet/core/deploying/ It's just not that you get a single file. That is not yet supported. But you do get an .exe-file (on Windows) that you can just execute without having .NET core installed.
.NET Core can run on Mac &amp; Linux. Xamarin can run on Android &amp; iOS.
That's pretty much my situation. I use C# in my day job, and I doubt that will change anytime soon, but I'm definitely interested in learning F#.
Hey! There are dozens of us, *dozens*!
basically, you compile it once and it runs on all 3 platforms - that isn't shared by many languages - C, C++, D, etc, all need to be recompiled and sometimes rewritten for different platforms
In addition to that, you can develop for .Net Core on Mac and Linux with any editor, including VS Code and Rider. There's also "VS for Mac" for developing for Xamarin. Not sure about Xamarin and Linux.
&gt; --self-contained produces a folder full of DLLs. It produces a folder full of DLLs *and one executable*. It won't have the .exe extension, because that doesn't make sense for Linux.
Amazing. I read a little about this in Java about compiling to byte code and virtual machines(jvm) but I don't have enough clarity about this feature of compiling it once and running on different platforms. Can someone explain or have anything good to read from? 
&gt; I know for a fact that the C# compiler supports it The C# compiler supports creating *.Net Framework executables*. If you want something that runs on .Net Core, csc is not enough.
Or... Just use the `ConfigurationManager` class instead of this very wasteful approach of yours. Deserializing and serializing just to change a single value..
That’s... a pile of dlls and the run time exe branded as “self contained” by Microsoft
&gt; The executable won't have the .exe extension, because that doesn't make sense for Linux. There are two possible layouts: - Shared framework produces only dlls, no executable. You need to use `dotnet` to run the program. - Self-contained, which produces **one** executable. On Windows this has the .exe extension, on Linux it does not. But you can just execute it like any other program on Linux like `./myApp`.
Well the gist is that Java and .NET don't compile directly to machine code (code that's specific to one architecture). These two compile to an intermediate version of your code that is lower level than C# or Java, but higher than assembly. The benefit of this is that your code is portable, you can use it wherever there's a VM for your bytecode available. In the case of Java that's the JVM, for .NET it would the .NET runtime, so in this case CoreCLR.
Its a sample man, relax
I'm aware. But why do I have to pack and distribute an entire folder of DLLs with what's essentially a helper script to run them, why not combine it... Y'know, *self-contained* into one file?
Yes, and? Self-contained means you don't need to have .NET Core installed at the target system. The application has no additional dependencies, it is self-contained.
Yeah, but a very bad one. The internet is full of bad ones already.
They're working on it. It just was no priority. That's a luxury feature. In the meantime: https://www.hanselman.com/blog/BrainstormingCreatingASmallSingleSelfcontainedExecutableOutOfANETCoreApplication.aspx
Where can I get that shirt?!
It honestly is pretty great. Function style LINQ is a treat for sure.
I guess I should look again. 
Thanks!
For instance: https://docs.microsoft.com/en-us/dotnet/api/system.string?redirectedfrom=MSDN&amp;view=netframework-4.7.2 the String class reference
Last time I checked, It’s off for migrated projects, on for new projects. Did they change it?
tl;dr of it: When you compile C# using the C# compiler (called Rosyln), it is compiled to MSIL (Microsoft Intermediate Language, otherwise known as CIL, common intermediate language, or just IL). There is a textual form of IL, and a binary form - the binary form is the runnable version, the text format is just a human readable version - importantly, the binary is the same instructions, it's not changing the language it at all, just changing the format. This binary file is then run by the CLR, the Common Language Runtime. (For .NET Core, it is called coreclr and is open source at github.com/dotnet/coreclr) This basically consists of 4 parts - the VM, JIT, GC, and System.Private.CoreLib. The VM loads your types, finds your programs entry point, and in general coordinates everything else. The GC, the garbage collector, is responsible for deleting objects when they are no longer in use. System.Private.CoreLib contains the base types like `object, string, Int32, Exception, Attribute` etc.The JIT is in charge of translating this IL binary into native machine code. This is what gives C# it's compile once, run anywhere* (*anywhere meaning windows, Mac, or Linux, with the .NET Core runtime installed). So, the first time each method is called, it is translated into native machine code, and then that will be called on every method call. This IL can be handwritten, and I have done so many times :) - definitely a good thing to learn if you want to understand .NET better
*"But it's Windows only."* &amp;nbsp; *"But it's desktop only."* &amp;nbsp; *"It has really bad performance."* &amp;nbsp; *"It's not a good fit for video games/Games are written in C++."* &amp;nbsp; *"It basically is Microsoft's version of Java."* &amp;nbsp; *"But I'd have to use Visual Studio. I don't want to pay for that."* &amp;nbsp; *"I like Python/JavaScript/Ruby which are better because x/~~I'm deluded~~y/z."* &amp;nbsp; *"It has var, so it's not strongly typed."* &amp;nbsp; *"But it doesn't work on mobile."* &amp;nbsp; *"But it doesn't work on Android."* &amp;nbsp; *"But it doesn't work on iOS."* &amp;nbsp; ~~*"But it doesn't work on Windows Mobile."*~~ Sorry, nobody ever said this. &amp;nbsp; *"But it doesn't work on Linux."* &amp;nbsp; *"But it doesn't work on iOS."* &amp;nbsp; *"But it doesn't work on any game console."* &amp;nbsp; *"Go. Go is the future."*
No worries. I've seen too many disasters occur without some proper source control, even if it's literally just there to make sure you can get your work back :) ML interests me, although I have near to zero experience at this point, so stirring up some interest is good news :)
And we really appreciate your hard work testing out future C# features.
*Insert outdated comment about lack of ecosystem*
An interface defines a contract. Classes that don’t have anything to do with each other (and night even be in different assemblies) implement that interface to assert that they follow that contract.
In case you weren't aware, C#/.NET haven't always been available for platforms outside of Windows. I think maybe that's why the emphasis on taking _another_ look and the fact that it runs on macOS, Linux, Windows, et al.
&gt; Sorry for the advertising, it’s to recolect money for homeless dog.
It's an easy way to share API without defining implementations.
When you do, share link to your gitHub account please!
A contract that defines attributes and methods. I have an iHusband, iParent, iSubordibate, and iBoss interface. I'm the Person class with all the details about me, but I have to act certain ways around other objects. With my friends out drinking, I'm iBuddy.
Don't call it a contract. While it might be a fairly accurate representation it is something that is easy to just regurgitate without understanding what it actually means. I would propose when you hear the question, "What is an interface?" you should interpret that question as, "What does an interface do?" An interface defines abstract functionality that must be implemented by an inheriting class. This guarantees any class inheriting from the interface has a concrete implementation of that functionality.
Until we get to \`MasterAi.DesignGame(brainDump).Launch()\`, \*NOTHING\* is complete!
Totally agree!
FYI, I've found that that question is usually followed by, "What is the difference between inheritance and composition?"
Kind of dealing with the same thing at my company. We haven’t quite figured it out. We are looking to setup an identity server to house all the user info. Active directory stuff is kind of a pain, but auth0 has a feature to allow for ad to be pushed up to their servers. You could also use an ldap solution for AD and override the signinmanger/user manager. I’m definitely interested in hearing some thoughts on this issue. 
I like where are you heading with this. Basic ML knowledge will become a skill that every developer should posses. I love C# and I am not quitting. I want to prove that we can use it to do some really good ML projects. Python guys are hating on me at the moment :) So what :D
I will, for sure.
This was a comment I made about Single Responsibility Principle half a year ago, wonder what other developers think about this. It is about what is considered a responsibility, and when your class breaks SRP: &gt; Uncle Bob defines responsibility as 'axis of change', in this sense SRP means one and only one axis to change. This definition is a bit vague, but I can relate that to the geometric model of axis. In an one-dimensional(linear) space you have only X coordinate, and X can change from 0 to 1, or any arbitrary number. But the change is on the X axis only, and hence its one axis to change. In a two-dimensional(planar) space however, you have both X and Y coordinates. If both X and Y coordinates are allowed to change, ie from (0, 0) to (1, 1), you have two axis of changes. So we can view SRP in the same way as the geometric model, in which the class is the space, and methods are points inside the space, different methods correspond to different points in the class space. For example, you have a Serializer class that serialize a PHP object to string format, or unserialize the PHP string back to a PHP object. In this case, serialize() and unserialize() methods are two points of the class space, but on the same PHP axis. This class follows SRP, since it has only one axis and hence only one axis to change. However, when you expand this class to be able to serialize/unserialize JSON, alongside with PHP, you now have 2 axis with 4 methods serializePHP(), unserializePHP(), serializeJSON, unserializeJSON(). At this point, you are effectively violating SRP, as you now have 2 axis of changes. To follow SRP, you will need to refactor and break down the class into PHPSerializer/JSONSerializer, or Serializer/Unserializer. It doesnt matter which axis you break down with, although one may make better sense than the other logically. With this being said, the goal of SRP is to create small, readable, maintanable and easy to test classes. If the class are inherently small, like in the Serializer example, you will probably end up with less than 100 lines anyway, then breaking SRP isnt really a big problem. But more often than not, you end up with classes that will grow out of control, and in more than 1-2 axis. For newbies, following SRP is necessary as it prevents you from creating a God class with thousands of lines of code and tens of responsibilities(axis). At least, we will have less incompetent programmers writing such 9000 lines of class as the one shown below: https://pastebin.com/m76ZAUZc 
Documentation of System.String has been on there for years (since C# 1.0 on what was MSDN Library) - but I agree it's a good example of how comprehensive the documentation is.
So could I answer it this way: an interface defines the constraints with which a class can communicate with other classes connected to that interface?
&gt; An interface defines abstract functionality that must be implemented by an inheriting class. This changes with DIM. Calling it a contract that can be programmed against is much more fitting. That the interface must be implemented somewhere is completely irrelevant to the caller. The caller cares: What do you promise me to offer.
&gt; A contract that defines attributes and methods. Methods, properties, events or indexers. But not attributes.
A property is an implementation of an attribute. 
I already said that it is a contract in multiple interviews and it was good. The interviewers actually liked the keyword 'contract'. Of course you still need to give a more flowery response but still.
The term "Attribute" has a meaning in C#, and you seem to understand something differently from it. Saying "a property is an implementation of an attribute" makes no sense in C#. Attributes in C# are special types that inherit from the base class `Attribute` and can be attached as metadata to various elements, for example: [ThisIsMyAttribute] class SomeClass {} https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/attributes
In computer science, the definition of oop is "attributes and methods". That a language comes along and uses those for keywords is totally secondary. https://en.wikipedia.org/wiki/Object-oriented_programming Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which can contain data, in the form of fields *(often known as attributes)*, and code, in the form of procedures *(often known as methods)*. A feature of objects is an object's procedures that can access and often modify the data fields of the object with which they are associated (objects have a notion of "this" or "self"). In OOP, computer programs are designed by making them out of objects that interact with one another.[1][2] OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types. 
There's no reason why not. I've no problem with Python, but I spend most of my time in C#. It would be interesting to know how to integrate the two as well. Bizarrely I was offered a Python role years ago, without knowing one thing about it. I accepted a different role so to this day know bugger all Python :)
Again: We're talking specifically in the context of C#. And in the context of C# the term attributes refers to.. C# attributes: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/attributes
After a couple weeks of tinkering in Rust, the lack of discriminated unions feels like a pretty glaring deficiency in C#. They're adding pattern matching in 8.0. All [the examples](https://devblogs.microsoft.com/dotnet/do-more-with-patterns-in-c-8-0/) just used Object as a type parameter, which makes for opaque method signatures and throws compile-time type-safety checks out the window. Maybe I'm missing something, but it feels half-baked.
It's a c# subreddit but things like "interface" and "object" transcend that. I'd much rather hear the agnostic answer and then hear about how it's implemented in some particular framework. 
Agreed about discriminated unions. Pattern matching is half baked because they couldn't squeeze all the features they wanted (algebraic types) into recent releases. I think they will come eventually, though.. Many of the missing features already have propsals or specs written. 
And I'd prefer if people are context aware and understand that things are called differently by different implementations. **Especially** if the insistence on leaving the context leads to ambiguity.
Be sure to read this disclaimer: [https://github.com/CodeDead/MemPlus#anything-else](https://github.com/CodeDead/MemPlus#anything-else) &amp;#x200B; Anyway, if you don't have anything else to do, [we could use some translations](https://github.com/CodeDead/MemPlus/tree/master/MemPlus/Resources/Languages) :)
Not a perfect substitute, but do take a look at the OneOf library
Removed: Spam. Please review and adhere to the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion) Also, please provide source code in viewable formats without having to download binary/zip files. (e.g., upload the project to GitHub)
What a load of garbage. Memory is there to be used. Using snake-oil tools to reduce memory usage from 40 % to 20 % is just nonsense. You'll slow down your machine to get off of a low number. And nowhere does it mention what it **actually** does.
I agree. It would make no sense to effect x when y changes. No sense to change serialzation when deserializer is being changed. It's the mindset, coming from preferring composition above all else. 
I 100% agree with you! But if you want to know what these tools commonly do, it all comes down to calling the [EmptyWorkingSet](https://docs.microsoft.com/en-us/windows/desktop/api/psapi/nf-psapi-emptyworkingset) windows API function. [Example here](https://github.com/CodeDead/MemPlus/blob/master/MemPlus/Business/RAM/RamOptimizer.cs#L124).
I don't think they have a plan to cripple F#. But I'd hope for them to at least... support it a bit more. And I think they should make the F# team and the C# team come together more frequently. They should also listen to the very smart people on the F# side, e.g.: https://github.com/fsharp/fslang-suggestions/issues/679#issuecomment-399411192
This starts great. - Error shows "do A, or see link for additional options". - Article says: Error tells you to do A. - Article says one line later: Fret not, you don't have to do A, follow the link to see additional options. 
Depends on whose asking and why. If Computer Science major asks me how many interfaces does class A expose, I'll list * The public interface, consisting of all its public members, excluding those that are shadowed * The protected interface * The base class interface(s) all the way to System.Object * Any abstract interfaces If a novice C# or Java developer asks, I'll just list the last one as to not confuse him. **** In the case of a job interview, I default to the novice answer because far too many C#/Java devs confuse the concept of interfaces with the keyword for defining an abstract interface. If I'm trying to explain how an API (Application Programming Interface) should be designed to senior devs, we're going to talk through the implications of all of its interfaces. 
\&gt; So the error is clear, the article is wrong about what the error says, then the article corrects itself by repeating what was in the error. You must be misunderstanding something. &amp;#x200B; The error is not clear, hence why I created this blog post. &amp;#x200B; Yes Microsoft does at some point, hint towards that you don't actually need the interface, but it is well hidden. So the errors is vague and wrong, the MSDN article is confusing, and I try to explain why you don't need to listen to the error, and fix it in the correct way.
yeah, types as first class object is awesome, I hope class can be first class object too in C#. 
The error was clear: "Do A, or check HERE for other options." And the options on the MSDN page are fairly clear as well. &gt; Yes Microsoft does at some point, hint towards that you don't actually need the interface, but it is well hidden. Why do you think it is hidden? It's mentioned in the error message, linking to a page where two alternative options are mentioned even before describing how to use the `IDesignTimeDbContextFactory`. &gt; I try to explain why you don't need to listen to the error, and fix it in the correct way. You're just repeating what the page linked in the error says. Actually you just mention **one** of the options.
&gt; You're just repeating what the page linked in the error says. Actually you just mention **one** of the options You might see it that way, but actually I'm focusing on the correct solution in most cases. &amp;#x200B; &gt; Sure, and that's great. But I believe a better approach is to help people understand the documentation, instead of just telling them "do this and that". What was difficult for you to understand in the documentation? The MSDN article focuses too much on the \` IDesignTimeDbContextFactory \`, when it's only the rare case that it is needed. I would rather see that they focused on the simple stuff that caused this error. And then explain when you need it. I also added this to my blogpost :) If you disagree with the format, then by all means create a blog post yourself. I created this in the format that I like. The correct solution, and then answering the why after.
OneOf and ValueOf both look delightful.
Thanks for the help, I think I almost got this all figured out. I think my problem is that this is a c# console application. I'm trying to find a way to access this Key.IsUp or the keyboard state (ex.) "KeyboardState newState = Keyboard.GetState();", but I can't get it to something that my app is fine with
Repost: https://www.reddit.com/r/csharp/comments/b6nv4p/you_dont_need_a_idesigntimedbcontextfactory_in_ef/ This starts great. - Error shows "do A, or see link for additional options". - Article says: Error tells you to do A. - Article says one line later: Fret not, you don't have to do A, follow the link to see additional options. So the error is clear, the article is wrong about what the error says, then the article corrects itself by repeating what was in the error.
What I wouldn't do, to get rid of you :) &amp;#x200B; What you are saying is simply wrong. And I am done wasting time on you :) &amp;#x200B; Have a good night, troll someone else.
&gt; What you are saying is simply wrong. Article writes: &gt; Because the console will tell you to implemnt a IDesignTimeDbContextFactory so that is But the error actually says to implement that interface, **or** visit the link for more approaches. Earlier you even mentioned that the solution you suggest was presented in the linked homepage, but you removed that note now.
Indeed. I really like where the language is heading with C# 8.0. Making reference types non-nullable by default is going to be a big step forward.
I’m just waiting for OOP to finally die. 
This a million time. docs.microsoft.com is really good, the old msdn.microsoft.com was and still is terrible. IIRC, the team behind the new docs portal made an AMA on reddit when they launched. I can't find it on google tho.
It doesn't just persist them in memory. It edits the actual configuration item. The problem is that when you are debugging, the file it edits is 'app.exe.config' in /bin/debug. When you deploy the app this will not be an issue.
Configuration manager does not just persist changes in memory. It edits the actual configuration item . The problem is that when you are debugging, the file it edits is 'app.exe.config' in /bin/debug. When you deploy the app this will not be an issue.
I think C# is beautiful. It's what Java should have been.
What does it do when you fill in: \- something that is not a number \- the number zero \- a negative number \- a really big number Iow, how does it handle bad input?
I am conflicted whether I‘d support this project or not :D
While I sort of see how you are going about this, to use an analogy, Giving away healing crystals does nothing to dispel the fact that healing crystals are bullshit. EmptyWorkingSet (or the undocumented way of using NtSetInformationProcess to do the same to the system process) effectively just page out as much of a processes active working set as possible. While doing things like this will cause the memory numbers will be lower for those processes, it is temporary, because those pages were in physical memory for a reason. Applications will access them and they will be faulted back into their working set, all with excessive performance impact.
Seems reasonable. The entire idea behind this project actually started out thanks to [this reddit thread](https://www.reddit.com/r/Steam/comments/7vp94x/reminder_not_to_by_snake_oil_software_like_this/dtupqt8/?context=3), if you want to dive into its history. It's quite interesting.
I hate the word "contract" used here too because of how abstract the wording is. To me an interface is just a guarantee that you implement a specific set of methods and properties, so you can pass around something defined by the interface instead of passing around an explicit implementation.
Lots of interviewers basically go by the book and hope you regurgitate the exact wording they read from an answer online. It's lazy on the interviewer's part but it's unfortunately not something you can do much about.
Reference this on your page. It‘s great.
What version (above Community) of Visual Studio do people normally use?
Because for real apps that will require many external resource files, configuration files, and language support files anyway this isn't even a consideration. Not to mention packaging into one .exe is a terribly bad idea if you are ever going to update your app. Then you are pointlessly downloading a huge amount library code that didn't need to be updated because it hasn't changed at all. &amp;#x200B;
Interfaces are used to define the behaviors of a set of classes without defining how these classes work internally. Since classes can implement multiple interfaces, you generally want a separate interface for each type of behavior. For the record, yes I did just described the I in SOLID in those two sentences.
And that the people that want these magical healing crystals will not trust something as "open source software" as some sort of virus scam. Meanwhile a PAID product brings some magical "clout" that the program is not just a scam or a virus.
The comments kind of cover it, but I feel as though you'll get some extra points if you can being the question into a management or team-lead scenario. Higher-ups can use interfaces to define how the junior devs use a code-base. You can manage people's work by using code hierarchy, leaving no question as to how to achieve a goal or work with some codes.
Do you know the reasoning for this?
Some cool statistics: MemPlus was downloaded approximately 1314 times this month alone directly from my website, which, probably is half of the total number for this month because of all those mirror sites to which I don't have statistical access. Can't really rely on my 'phone home' statistic for update checks for the software, but if you want to know how many times users actually tried for updates this month, that would be 59,932 times, give or take.
The reasoning in C# is probably expectations. Since the inner class is inside the scope of the outer, it makes sense that it can access its type variables, just like its fields etc., so C# makes it generic as well and hides that from you. For the CLR, it could be coincidence, maximum flexibility or simplicity of the runtime. 
if(label.text.contains("word")){ }
Huh cool. btw I'm not trying to flame or be insulting. Maybe you could try to educate your users that your tool really isnt that useful or something. I have a friend that does a registry clean every weekend because it "speeds up my computer" while he hardly installs any new software other than video games via Steam lol anyways thanks for the indepth response. Also maybe you should see if you can put your app on Steam as free.. probably already thought of that tho.
Could anyone please provide with good references covering Ambient Context pattern?
&gt; An interface defines abstract functionality that must be implemented by an inheriting class. Classes implement interfaces, not inherit from them. And, honestly, I think this is just an overly verbose way of saying *contract*. 
If you need help answering this, I wouldn’t hire you. Also even if you read and repeat all the answers here, the next question you get asked you will probably mess up.
&gt; It’s by no means perfect (just like MSDN), but the only thing that I have seen come close to MSDN is MDN. They’re missing the “S”. 
Absolutely. After being a C# web developer with MSDN and MDN at my disposal trying to use any other language is like going into the dark ages. 
Hi Franz, in our company, at some projects they were contacting me and I notice that we have some big classes (models) but only query few fields, and in opposite, also have some stored procedures that returns big result sets (multiple columns) but we only use 4-5 columns. And this is the reality in the business, nowadays. &amp;#x200B; I made some caching of the models/dbdatareader mapping based on the columns, but I did have additional logic implied to identity which and who to iterate first. In this case, I will be implementing it soon in RepoDb that based on the scenario below, and I know, it will further boost the performance in the big result sets and in million rows extraction. &amp;#x200B; \[Scenarios\] 1. If the class has more properties than the dbdatareader number of columns, then iterate the dbdatareader columns and extract the result back to the model. 2. If the dbdatareader number of columns is much more greater than the number of class properties, then iterate the class properties and retrieve the value from the dbdatareader. &amp;#x200B; I just notice this as one way of optimization when extracting the result. All mappings must be pre-compiled and cached in the memory (as what my library is already doing). &amp;#x200B; Hope this will help as well. :)
Stop, this is too accurate. ):
The thread version is incompatible with async/await. You could use AsyncLocal storage for an ambient context. I do that sometimes when I need some request level information for logging purposes and don't want to (or can't) pass around the information. In general I try to avoid it because it is a form of global, making it hard to reason about. I haven't tried it with .NET Core, but it should work.
that's a feature
Definitely. Stoked for that too. 
I think your understanding is probably correct, but maybe too limited in use. It's [Mark Seemann currently seems to feel that Ambient Context is an antipattern.](https://blog.ploeh.dk/2019/01/21/some-thoughts-on-anti-patterns/) Make of that what you will. I think it's still useful, but it makes for some additional complexity that has to be managed, and it's not necessarily suitable for every possible application. Plus, it's invisible, which means it's a detail that your consumers (who may need to know about it) can miss. FWIW, I recently used something like to avoid having to pass along a bunch of extra data down the callstack just for error logging, because the additional data was polluting my method signatures (and making it harder to tell what was going on, and easier to forget to include something in the logging call). I wouldn't reuse that implementation without some additional testing and analysis, but I thought that worked out okay.
Makes sense. Thanks for sharing the link!
I’d suggest you learn what an interface is and use it in some throwaway project instead of asking here for the definition.
You could try F# instead. The type system in F# is pretty sublime.
I have no strong opinion on the usefulness one way or another, but I'd like to point out that this is complicated by async code where a single logical request or method chain is not associated with a specific, consistent thread, but with a `SynchronizationContext`. The complexity around managing this (see `AspNetSynchronizationContext`/`LegacyAspNetSynchronizationContext`) and resulting unreliability of `Thread.CurrentPrincipal` and similar properties is (presumably) part of the reason ASP.NET Core got rid of it and relies on DI instead. Some possibly relevant stuff/use cases to look into: https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.messaging.callcontext.logicalsetdata https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.correlationmanager https://github.com/serilog/serilog/wiki/Enrichment#the-logcontext 
&gt; O. The number of modifications are minimal, meaning that they are open for extension, but closed for change. Not even remotely close. 
You might have just set a record for longest tl;dr of all time
Not too complicated, I hope? [https://imgur.com/AICMDPs](https://imgur.com/AICMDPs)
Yeah idk what they talked about, but it's so much better. The documentation is all open source on github and anyone can go contribute to it. Makes it much easier for us devs to go write something if we find something lacking. Also, any feedback/comments on the documentation are directly linked to github issues on the repo, so it's just a very natural flow. It's suuuchhh a better system then what we had in the past, and I think the better quality documentation is a direct result of this. I would love to find this AMA though!
I'm going to google it, but I'm pretty damn sure there's a class you can use that will just let you print your form directly.
does that get rid of the fancy borders...boxes... etc? The goal here is trying to save ink. Just black and white text with no grey shading.
The best answer is to ask more questions. Stated as-is, the question is not clear if it is about the language feature, the OO design-pattern or the more generalized concept (API are interfaces).
If people are going to use snake oil, they may as well use free snake oil and not pay for it.
At least it isn't an ambient transaction. Those are damn near impossible to reason about.
Maybe I'm misunderstanding your question, but what do you mean Identity entity being " too bloated?". If you don't want everything shoved in the same class what is preventing you from storing additional data spread out into other entities/tables?
We do something similar but we use a clever trick to do this. We have a base controller class that providers a resolver, so you call "await UseResolver(async myResolver =&gt; ....)". **Everything** that gets resolved in that resolver uses a context built from the request. To access this context, you simply inject our custom Context class into your constructor. Completely solves the whole threading/request context issue.
Yeah. I don't follow. This sounds like a job for federated auth.
What an ML?
Please don't state, give some arguments why. The principle states that a working class should be closed and not touched anymore. I agree. This is achieved by injecting behaviour from the outside or using inheritance. But sometimes the design will change and target class will have to change. We cannot design 100% right all the time, and thus some sort of changes there will happen. Thus the keyword minimal. I would really appreciate a justified opinion as a statement like your is just an empty opinion for now. 
 **O**. The number of modifications are minimal on classes, meaning that they are *open for extension*, but *closed for change*. We should either inject the behaviour from the outside or use inheritance. A working class upon being designed well, should no longer be touched. Made some changes to clarify my point
In modern SOLID, OCP (and the other principals) basically means "whatever the fuck I want it to at this moment". *** The original meaning was quite specific. * Closed for modification: once a class is shipped (i.e. as part of a library), absolutely no changes other than bug fixes may be applied. That means no new methods nor can you change an existing method. * Open for extension: all classes can be subclassed, with any new or altered functionality overriding the base class functionality as necessary This heavy reliance on inheritance was popular in the 90's and led to the design of Java, where all classes are inheritable by default and all methods are overridable by default. They even use the keyword `extends` to denote inheritance, because that's what "extension" meant in the 90's in regards to classes. What made OCP a design principal was that these two rules could be demonstrably applied. You can look at two versions of a class and say unequivocally whether or not OCP design rules were adhered to. *** Over time the obsession with inheritance faded and there was even a backlash that led some to think that no implementation inheritance was permissible (e.g. Go). But people still loved to scream SOLID! so they just redefined OCP to mean whatever they were going to do anyways. But they didn't change any of the justifications. No matter what definition you see for OCP, it has exactly the same list of reasons why OCP is so great. No offense, but this is why I have zero respect for people who proclaim the benefits of SOLID. The so-called principals are more or less divorced from their original meanings, the justifications no longer apply to the claims, and the new meanings are so nebulous that you can't actually debate their merits. Even Uncle Bob is on record as saying you should apply them when they feel right, rather than offering any concrete advice on when they are applicable. 
Why dont you consider DI to achieve OPC? 
Also, thank you very much for this argument. Inheritance is not a good way to achieve clean code, as clean inheritance is difficult to design (inheritance without using parent in child, purely additive) 
&gt; I. Let others use just what they need. Seperate interfaces by splitting them in many small ones per operation or use inheritance of interfaces when you need a change (part of L). Why? How does that benefit the consumer of your API? In Java or C# it doesn't. In fact, ISP has completely inapplicable to those programming languages. To understand why, you first need to know what an interface is. And no, it has nothing to do with the `interface` keyword. An interface is merely the API exposed by a class. It's in the name, "application programming interface". In C++, that means the header file. So imagine you are a C++ programmer. Everyone needs access to this one ridiculously large class. It should be broken up, but that's not an option. You only need methods A, B, and C. But every time someone modifies the header to alter method X, Y, or Z, you have to recompile all of your code. This is slow today in C++, but a few decades ago is was downright painful. So what if instead of one header file (i.e. interface), we have four. Interface 1 has methods A thru C, which you need. Interface 2 has X thru Z for team 2. And there's a couple others for the remaining teams. Now you only have to recompile when something that actually affects you is changed. By segregating the interfaces, you have saved a lot of time. *** Turning back to C# and Java, we don't have that problem. We don't even have header files, compile times are short, and changing an implementaiton detail will trigger a recompile just like changing the API. Now I was somewhat factious when I said this didn't apply at all to C# and Java. It does, at the library level. You can and should apply ISP to your libraries since that's the level upon which code is compiled and dependencies are formed. For example, if I only need to modify JPEG files, I shouldn't have to ship a fat library that also deals with all of the various TIFF formats. 
Because that's not what OCP is. It's basically saying, "I don't like OCP, so I'm going to do this totally other thing. But I'll still call it OCP because SOLID!!!". This is the kind of intellectual dishonesty that makes me hate SOLID.
If I want to get only, I want to be able to use just that contract. IGetSomething is just what I might want. I don't want to Enforce implementing full crud of all that someone needs is a get. ISP provides us just that. 
There is nowhere defined that OCP is strictly inheritance. OCP is DI, it let's us change the inside choose the inside behaviour without going deeper. It's not OCP as a whole, but I think it's one way to achieve it. And I don't care about original definitions, the benefits for external changes are obvious. 
Ah. [ML](https://en.wikipedia.org/wiki/ML_(programming_language\)) is a language itself, but it heavily influenced some languages that follow it. F# is one of them. Others include ReasonML, OCaml, Elm. In fact, the wiki for [tagged unions](https://en.wikipedia.org/wiki/Tagged_union) actually has some of its examples in ML. I think it would be safe to say that ML was one of the influences for Rust, too.
&gt; Inheritance is not **always** a good way to achieve clean code. Don't fall into the trap of thinking that because "always do X" is wrong that "never do X" is right. There are times when inheritance is unquestionably the correct answer. Especially in languages where adding methods to existing abstract interfaces (the `interface` keyword this time) are breaking changes. Libraries such as ADO.NET are textbook examples of how well inheritance works. 
I totally agree. All I meant is the preference should be modularity, so composition over inheritance. Inheritance is not bad, it's just mostly overused. 
That has nothing to do with ISP, which talks about the benefits to the client of your code. Don't get me wrong. Having narrowly defined interfaces are great for the people implementing those interfaces. But that's a separate topic.
How come? ISP = seperstion of interfaces. That is needed so that interfaces already used, don't get changed. There are two ways how I can possibly thing how a change should happen. Either through modular design (interface per operation) or inheritance. Interface per operation is default segragation, as you cannot split it even more and extending it doesn't make sense. Inheritance is quite similar to OCP principle, except its for definitions, rather than implementations. 
That's literally what they meant when they said, "closed for modification, open for extension". Again, in context the word "modification" means changing the source code and the word "extension" means creating a subclass. &gt; At the time Meyer was writing, adding fields or functions to a library inevitably required changes to any programs depending on that library. Meyer's proposed solution to this dilemma relied on the notion of object-oriented inheritance (specifically implementation inheritance) https://en.wikipedia.org/wiki/Open–closed_principle Read the article. At no point did either Meyer, the originator, nor Martin talk about DI in this context. 
Sorry, I was not aware of it. But other than official definition, doesn't DI help better achieve that (going out of bounds of Solid and just rationally thinking)? 
&gt; That is needed so that interfaces already used, don't get changed, so that people who use them, don't be suddenly enforced to implement what they don't need. Again, that is beneficial. But that's not ISP. **** Here is the benefit that is most often cited, &gt; ISP splits interfaces that are very large into smaller and more specific ones **so that clients** will only have to know about the methods that are of interest to them. If you are implementing the interface, you are not a "client". The client is the one invoking the methods on that interface. *** So what are you describing? SRP. More specifically, you are applying the Single Responsibility Principle to abstract interfaces. (Which in my opinion is the only time SRP is an actual principal to be followed to the letter.) 
I have to agree. So basically ISP = OCP but for interfaces 🙂? Would that be official? 
Yes, definitely. Are you a C# programmer? If so, look at LINQ. It's not really an OOP style library, but it still uses dependency injection all over the place. When you call `.Where`, you have to inject an `IEnumerable` or `IQueryable` into the function call and that, along with your predicate, determine how the filter will actually be applied.
Yes, I am a C# dev. And yup, I understand that benefit, I just wondered how different principles are related and wanted to express those relations via my interpretations. 
Yeah a disclaimer saying this kind of thing makes your computer slower, and a link to how swapping works, maybe?
&gt; So basically ISP = OCP but for interfaces 🙂? No. ISP is a way to speed up compile time in C++ and other header-based languages. *** Does OCP apply to interfaces? Hell yes! Though not everyone agrees. Java (and future versions of C#) allow you to add methods to abstract interfaces in a way that's not a breaking change. Many of us think it's a bad idea. In C# 8 this had more negative votes and comments than all other features combined. To my knowledge, it's the only C# feature ever to get promoted to the language with more negative votes than positive ones. 
Yup. I am not for implementations in interfaces. It is not what an interface is for and for me that is a hack. I am most worried about devs who are starting out, seeing that and potentially thinking that the way to do everything. 
That I agree with. Inheritance is powerful, but when in doubt err on the side of not using it has always been successful for me.
Refactoring composition is easy. Refactoring inheritance- hell no🙂
I think the most important thing is concrete examples. Far too many blogs rant and rave about the benefits of SOLID, or other techniques, without providing a single real-world example. And that's not right. If the technique is useful and low-level, you should be able to find an example in the JDK or BCL that demonstrates it. I'll excuse high level architectural patterns such as micro-services. But if the pattern deals with classes and functions, it needs to be demonstrable.
Absolutely. I try teaching clean code on Twitch and I try to give contrasting examples of code, where benefits are obvious. For examples such as SOLID or OOP design, I try preparing workshops with dirty code at hand, to be refactored into clean version on. 
UML is also an okay example (so design patterns are okay templates). Though I don't like calling a collection of best practices a pattern. It should come naturally. 
Not necessarily. Step 1, make an interface that matches the base class. Step 2, for each subclass, change it from inheriting the base class to proxying it. Basically they become wrappers. Step 3, apply the interface(s) from step 1 to the proxy classes. At this point the code should compile. Step 4, comment out all of the methods from the interface [1]. Restore them one by one until the code compiles. Delete what wasn't used. Step 5. For each proxy, repeat step 4 to eliminate unused methods. Step 6. For the base class, repeat step 4 to eliminate unused methods. Now you no longer have inheritance and the classes are potentially a lot smaller than before. -- I deal with a lot of legacy code
Nice algorithm. But that's still 5 steps more than swapping a different module 🙂
Yea, but it's a mechanical process so I can do it while half-drunk.
True🙂 Well, thank you much for such detailed argumented opinion. That was the intention of this post. Much appreciated! 🙂
fyi the french translations are almost completely wrong
Regarding the integration, it is probably best just to execute the script from C#, get the result and do something with it after
Just had a look at it. It's so funny. Clear Memory = Mémoire claire Lol
DateTime struct is your friend. It allows to extract and create DateTimes from individual parts of a time: https://docs.microsoft.com/de-de/dotnet/api/system.datetime?view=netstandard-2.0 Also one can consider the TimeSpan struct. TimeSpan.FromHours might be interesting for you.
yeah lmao, pretty sure he used google translator or something
I like to think of interfaces in terms of real life scenarios. The USB-port is an interface for a multitude of devices, as long as they adhere to the interface. This is exactly the same as in code
Hello, yes this would work find. But let's say there is a case where I need to get the hours from all the datetime in the list and add it to a new list. Then it should avoid adding duplicates hour:minutes. Is it possible to achieve this?
Really depends on your goal. If you want to learn how to build a project, it’s the wrong tool. If you want to figure out exactly how a function works to avoid side-effect behavior it’s the best there is People forget that documentation does not mean tutorial
You can use something like a HashSet to only add unique entries, or use linq to return distinct() entries.
Thanks, I already do that :)
DateTime.Parse(time).Hour into a HashSet
Why not the latest stable one, .NET core if possible?
Depends on your data types if it's array of string you can do values.Select(v =&gt; DateTime.Parse(v).ToString("HH:00"))
For what purpose?
Ah, very interesting!
"most widely" would be NETFX 4.0, since every important windows distribution has atleast a CLR4 installed. &amp;#x200B; But this answer is useless, if you can use an installer (e.g WiX) to install prerequisites. i'll join /u/grauenwolf What do you intend to do? &amp;#x200B;
1. You could use the "remainder"-operator ( `%` ) to get the seconds, by doing `(int)Totalminutes % 60` = seconds 2. don't use `Convert.ToXXX` for numeric conversions that you know of. Instead "`cast`" the number. `(double)myInteger`, `(int)myHopefullyFittingDoubleOrFloat`, `(long)myDoubleOrFloat` &amp;#x200B; [Here](https://gist.github.com/Kirides/9c752de81132cc1229afa49683600b83) is a little more robust version of what you accomplished &amp;#x200B;
Just wondering what the (new POCO-classes alternative)?
"Records", I forgot the name when I wrote the original comment. Coming in C# 8.something
use .NET Core the difference are not that huge its stable and get the most support from microsoft
Reminds me of a group that does the same "tests" scientology does (including their snake-oil measuring machines) but do it for free and without the brain-washing or the cult aspect. It undermines the for-profit charlatans and hopefully removes some of the mystery behind the methods.
&gt;An interface defines abstract functionality that must be implemented by an inheriting class. This guarantees any class inheriting from the interface has a concrete implementation of that functionality. yea, more formal definitions and object oriented bullshit! Interface ensures that class which implements given interface will have everything that's inside that interface, so it's sort of contract.
I am in a similar situation. Honestly, MVC is a beast. I am sure that anyone who has learned it on their own without prior experience feels a lost sometimes. It will start to make sense the more you work on it and that will help you break up your work into logical pieces and speed up your development.
Ooff, appears like it. As a Belgian guy, I should have noticed this. [https://github.com/CodeDead/MemPlus/commits/master/MemPlus/Resources/Languages/fr\_FR.xaml](https://github.com/CodeDead/MemPlus/commits/master/MemPlus/Resources/Languages/fr_FR.xaml) &amp;#x200B; The original values come from a PR from a deleted user. Most of the new keys were indeed added using Google translate, although they are marked as such. But there's a reason there's this huge disclaimer in the readme asking for translation help. Thanks for pointing it out though!
Already added in the readme of the repository and in the help documentation ever since release, don't worry!
My pleasure ! I’ll try to translate it myself when I get home.
Oh I remember that thread lol, what a cunt
Removed: Rule 4.
That would be very nice of you, kind stranger!
Hahaha get it kind stranger thanks for the gold KiNd StRaNgEr!!!1!1111!
Bad bot
Thank you, Laurent9999, for voting on YoUaReSoHiLaRiOuS. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
:)
Yes but I'd like to see a "split" of c# (A branch) that has no-nulls built in from the start. It's nice that they'e going to be in c#8 though.
Pretty much everything you can do with linq you can do without, and with greater performance. Language features don't appear without consequences- time and effort that was spent on designing linq into the system is time and effort that could have been spent in a different direction. I think Linq was wasted time and effort that could have been spent better somewhere else; I think the syntax is pretty obscure and hard to understand compared to the rest of c#, and I'm not sure it really belongs with c# - it's almost like someone tried to merge c# and an SQL language together. 
Another programmer with too much time on his hands :')
[Asp.net](https://Asp.net) Framework person here, agreeing with Wirusiux , [Asp.net](https://Asp.net) framework getting the 4.8 update and then looks to be going to back burner like say VB 6 (Still can be used but why would you) .NET Core is the future as far as MS seems to be pushing and also can be "easily" so they say cross platform.
I'm pretty sure they looked at Java when creating it, correcting the mistakes the java devs made.
.net core, it makes writing code so much cleaner. Things like built in DI, injecting configuration, ability to run console apps as windows service without external components like top shelf, httpclientfactory are lifesavers. 
If you are going to stick with framework over core, use 4.7.2. Otherwise, use the latest version of core.
It's not lazy. It's because we want to know that you've read these things as well. We will also value any fluffy answer you can give, especially your own interpretations (assuming they aren't incorrect) because that is then also showing us you understand what you've read and you aren't just parroting it to us. However it is important that you _do_ use the same common terminology as and when required, so keywords are just as important. Pedantry matters.q
Agreed use .net core if possible. I write all my new projects in core and find its missing very little and most stuff I have come across that is missing can be added by a nugget package.
https://docs.microsoft.com/en-us/dotnet/api/system.drawing.printing.printdocument?view=netframework-4.7.2
a contract is a form of guarantee. You've literally just used a verbose synonym for one word. 
Even for desktop applications?
No, do use contract, but also explain what that means.
I haven't done desktop development in core yet but they have ported wpf over now but I'm not sure how stable that is as I think it's still in beta (may be out of beta now).
Just to add to that they have ported Windows forms over too. https://devblogs.microsoft.com/dotnet/net-core-3-and-support-for-windows-desktop-applications/
So, not a hot dog?
https://devblogs.microsoft.com/dotnet/net-core-3-and-support-for-windows-desktop-applications/
Google “how to use async await msdn”
Use the minimum version for the features you need
okay I will! I find it especially difficult to find out the best practice since there are so many ways to setup a thread, task, task factory or whatever. Every example looks different. Would the whole process I described be in a task or would each function there be a like async Task&lt;int&gt; turnTable.SetPosition(0) 
Array are zero based. So an array of length 4's last element is of index 3.
you are setting the i to name.length so in this case name\[name.length - 1\], arrays are 0 based index so to start with the first character you need to decrement by 1
&gt; I was enjoying more the programming then the creation of the game itself Hah! Same thing happened to me. I remember fiddling with the FlowGraph stuff in the CryEngine toolkit (Crysis 1 came with a whole SDK, awesome stuff if you're into modding). It's not like C#, but visual programming, well, more like visual scripting, but still. I started out wanting to control the AI and make them do stupid shit, but I ended up more interested in the way data and signals "flow" through my (terrible) scripts. So, great job, my first language was C#, too. Definitely a fine choice. Just a tip: Especially in the...well, let's call it "MS sphere of influence" there's a lot of focus on design patterns, best practices, and so on. Which is a good thing... for someone developing big applications, in teams, especially when it's their job. Don't get bogged down in those when starting out. Sometimes, when you ask for help in a specific scenario, people will tell you "what you really should be doing is this: XYZ". Now, that may be fine and dandy, but sometimes people propose the "right" way to solve the issue, which may be waaay overblown for your situation, as you're just starting out and playing around. It's important to just *try* stuff out to understand the reason behind these design patterns, etc. Sorry for the ramble, but I know this frustration. In my experience, the MS community seems a little bit more...dogmatic, if you wanna be harsh about it :D
The difference is that huge. .net core is a complete rewrite, and so is asp.net core. A ton of features is still missing, a ton of features are new, visibility approach is reversed compared to asp.net. Yes, the API controller coding approach is relatively untouched, but it's just a very small part of the much bigger DevOps picture.
Thats a really funky for loop lol
You need the i - 1 to prevent an array out of bounds error. for (var i = name.Length; i &gt; 0; i--) since theb array is starting at name.Length, without the i-1, your first call to name[i] would be out of bounds (your last call would be I=1). Because of this, you need to compensate for that by having i-1 
WCF (or whatever the .net core variant will be named) hasn't been ported yet. For desktops this is a pretty important piece for security access isolation.
Will WCF even get ported ? I was under the impression they where focusing on Web API and kinda left WCF behind (as ms likes to do lol ).
Microsoft's [ML.net](https://ML.net) should have support for SVMs
You should probably look at moving the whole chunk of processing into one async method just to get it off the UI thread. The thread.sleep() calls are locking you up too.
Imagine this var andy = new char[4] { 'A', 'n', 'd', 'y' }; when we want to reverse this with the for loop, we start with i = 4 which is the length of Andy. After each iteration we decrease i with 1 until i is 0. Iteration 1: Take index 3(4-1) character (y) and put at index 0(4-4) in new array. Iteration 2: Take index 2(4-2) character (d) and put at index 1(4-3) in new array. Iteration 3: Take index 1(4-3) character (n) and put at index 2(4-2) in new array. Iteration 4: Take index 0(4-4) character (A) and put at index 3(4-1) in new array.
ahhh thanks for the visual dude, thats really helpful! think i get it now!! &amp;#x200B; &amp;#x200B; &amp;#x200B;
Because some people need WPF and other Windows-only features. Additionally, not everyone has Core installed on their hosts so you're sending the full library with deployments. 
thanks all!!! really helpful answers! &amp;#x200B;
The only right answer given the lack of details in the OP. Aim for LCD
Can I generate something like this in vs community ?
&gt; Array are zero based. *AS THEY SHOULD BE* {looks askance at VB} 
If the library doesn't already support an async pattern, I'd probably write `Task` extension method wrappers for the callbacks with [`TaskCompletionSource`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource) to use it with async/await. Use `CancellationToken` and `IProgress&lt;T&gt;` to provide feedback to the UI.
[I'm afraid not](https://docs.microsoft.com/en-us/visualstudio/modeling/map-dependencies-across-your-solutions?view=vs-2017), but there are [other cool things](https://www.youtube.com/watch?v=Q5MO2ToHkg8) that you can do with tools like [Gource](https://gource.io/).
[https://github.com/nickdurcholz/UserContextSampleCode](https://github.com/nickdurcholz/UserContextSampleCode)
So with EF, for this to work efficiently, I'd have to be returning an unmaterialized IQueryable through the controller? Because that's a total non-starter..
&gt; ability to run console apps as windows service without external components like top shelf [citation needed]
How about security fixes? 
Try get a copy of the latest version of that book, came out this year.
You can, but it's still not as comfortable as using a windows service library ;)
Using generic host builder
Having a contract-based communication framework is on the backlog :)
Using session state makes it hard to scale a web app. Also, in legacy aspnet, session state is unreliable. When an app is under load and the runtime is looking for memory to free up, I've seen session state just get thrown away while a user was still logged in. [ASP.NET](https://ASP.NET) forms authentication has always had separate session and authentication cookies for a reason. If you aren't locked into an implementation that ties session state to authentication already, I'd avoid it. It may be fine for one-off things with only a handful of users, but mingling the two isn't a good idea for general use.
VB, gross! I have so many legacy applications written in VB and no funding to upgrade them to .net core /w C# Please send help :(
They do, OP if you use the library I believe the class is LinearSVM.
Core should support WPF soon. And most features have been ported to Core. I've been using Core for awhile now and haven't found any missing features. And most major hosts support Core. But if it's a desktop/CMD app, you can produce an exe that has all of the dependencies bundled in.
If you need WPF, you will be able to use .Net Core 3.0 in the future. But for, yes, .Net Framework is the only option for that.
I still use it, and find it very useful, for managing entity framework. Along the lines of https://mehdi.me/ambient-dbcontext-in-ef6/ but updated for AsyncLocal.
When it comes to APIs, ASP.NET Core is indeed brand new. But .Net Core is not, most libraries should work fine on it, or with only few modifications.
I'm assuming he target version not the runtime
It depends on what you’re trying to do. For example, if you wish to roll out a WPF app to end users, it matters what version they can be expected to already have installed. (They may not have admin rights to change it, especially if enterprise environments.)
4.6.1 is a good default, I'm using the same.
I think in general if it is in regards to C# it is safe to assume it is the language feature.
&gt; Array are zero based. They are usually zero based, but they don't have to. But if you create non-zero based arrays in C# to be used in C# you deserve pain.
&gt; Things like built in DI Which is ASP.NET Core, if I am not mistaken, not .net core. Also, DI is more a design principle, and what's built in will be a service locator.
&gt; The difference is that huge. .net core is a complete rewrite, That's not really true... the source code is definitely heavily based on .NET Framework.
The majority of the server stack is pure C# and should port easily. But the devil is in the detail of the channel part of the stack, I suppose.
Arrays and other collections in .Net are generally [zero-based](https://en.wikipedia.org/wiki/Zero-based_numbering), so the items in a list of 4 items are numbered 0, 1, 2, 3 instead of 1, 2, 3, 4. Honestly, this is something of a historical detail, carried over from C/C++/Java/etc. It's also pretty common among programming languages. If it helps, the index is actually an offset from the start of the collection: index 0 indicates the element that is 0 elements from the start, index 1 indicates the element that is 1 element away from the start, etc. There may be more idiomatic approaches to writing your loop, but you could also leverage the framework libraries to just do it, unless you're working on homework. I. e. you could use LINQ var array = name.Reverse().ToArray(); or a data structure var array = new Stack&lt;char&gt;(name).ToArray(); or one of the methods in Array: var array = name.ToCharArray(); Array.Reverse(array); Finally, an array of char values isn't quite the same thing as a string, so you'll probably need to turn your array back into a string before you print it. Conveniently, string has a perfectly good constructor for that.
I'm probably not explaining it right. The legacy apps cannot be changed, so I'm building a tool that will house the information in duplicate for a single pain of glass of a users access. So for User1, his identity may hold: **App1** UserId: jsmith FullName: Smith, John Role: Admin **App2** UserId: josmith FullName, Smith, John Role: Reader So in response to my worry about the identity getting bloated, if I follow my current line of thinking there will be \~15 additional entities per each of these various applications. The Identity entity will have collections pointing to each of these apps as potential access, as well as the AD and O365 stuff. So there could be 20+ collections along with maybe 10+ properties for the identity. 
&gt; built in DI I don't know what this is. What is it and where can I see an example?
You can see example here at www.stevejgordon.co.uk/running-net-core-generic-host-applications-as-a-windows-service. This is something we use with production code for hosting service bus handlers. And when we are using containers on Linux, we can easily remove run as service part and just host it
We use it because we want to be able to debug it while developing and that's why we were using topshelf. Using generic host builder let us run it in Linux container
Yeah, exactly. You have to provide an unmaterialized `IQueryable`. For example, this snippet would enable LightQuery and add sorting and pagination to an endpoint that returns users: [AsyncLightQuery] public IActionResult GetUsers() { var usersQuery = _context.Users .Select(u =&gt; new UserViewModel { Name = u.UserName }); return Ok(usersQuery); } The materialization happens later in the request pipeline, after the controll method has returned. It's in the `LightQuery.EntityFrameworkCore.OnResultExecutionAsync` method: [https://github.com/GeorgDangl/LightQuery/blob/dev/src/LightQuery.EntityFrameworkCore/AsyncLightQueryAttribute.cs ](https://github.com/GeorgDangl/LightQuery/blob/dev/src/LightQuery.EntityFrameworkCore/AsyncLightQueryAttribute.cs ) Maybe I'm missing something, but why is returning an `IQueryable` a non-starter? I think it would be the same if you'd supply a `page` parameter to the controller method and directly materialize the result in the controller.
You can use service collection and service provider. I run it using generic host builder. 
Not really true. You can do exactly same things in. Net core console apps too
I believe that is why he said: &gt; Why not the latest stable one, .NET core if possible? Instead of &gt;Why not .Net core? &amp;#x200B;
so you have a github link?
I would assume anyone who did that knows what they are doing and are just a dick. 
&gt; why is returning an IQueryable a non-starter? Because it's not at all common that an action can be filled with nothing more than a single, late bound db query. Most will need to materialize results from the db and then perform additional processing or data gathering before the result is complete. The scenario you describe, in my experience, is solely the domain of straight, dumb CRUD or simple example applications.
My point is that I used less abstract wording to describe it.
Don't use `Wait()` or `.Result`. It is a sync-over-async situation it will eventually explode.
I see "ability to run console apps as windows service without external components" covered but I'm still unsure what is "built in DI"?
Why not 4.7.X? also if you want full .net standard you need to have 4.6.2 
Make sure you are creating your client in the same project, as where you created your Service Reference. When you generated Service Reference, in your app.config or web.config file should appear some xml like: &lt;endpoint address="... &lt;/endpoint&gt; Make sure it is there. Then this code should work: var client = new AnmeldungBeimTraegerErstverfahrenClient(); var result = client.teilnehmerAnmelden(new teilnehmerAnmeldenRequest()); &amp;#x200B;
What I mean is: isn’t the service locator a package from asp.net? And also: if it’s a package anyway (and everything is, almost), in what sense is it built in?
but will I stuff all the functions like turntable.setPosition() or windtunnel.setVelocity() into one task or is each of these functions a task itself? During the "Calibration" procedure I would like to notify notify by writing status messages into a listview (ObservableCollection&lt;string&gt;) like "Speed set to xy", "Turntable reached position"
4.5, but if you'd use a feature released in newer version.. that's the answer. It really depends on what you use it for and clients you develop for. Probably there are institutions out there still having stuff on NET 2.0
NOTE: If you have a screen that's bigger than the page, the solution highlighted below will mean that you will have to apply scaling to the image based on orientation!
Ah, I see. You're right, LightQuery is indeed intended to be small and simple, so it certainly has some limitations. In practice, I mostly use it for tabular data where a query is enough, e.g. in overviews. When the query parameters are required in advance, there's nothing you could do with LightQuery. For all other cases, use it:) It's simply intended to be an alternative to manual, repetitive code (or using OData when all you need is pagination &amp; sorting).
I meant that DI is now a first class citizen of. Net world. You can pull the nuget package and just use it. And the extension methods to inject db context and httpclientfactory. Just using httpclient previously needed so much consideration. You had to worry about port exhaustion if you newed it every time, dns change issues if you were using singleton and the list goes on
No, it has no dependency on asp. Net core
Built in sense that it is now a first class citizen
I’m in the process of getting a high school teacher I’m still in contact with to teach c# in his intro to programming class instead of VB
I agree. When we first started migrating projects to. Net core, it looked very similar but more we are using, more features we are discovering. 
What does that mean?
What package is it?
```Microsoft.Extensions.DependencyInjection``` https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2
It's part of the ASP.NET project, but is provided outside of the ASP.NET namespaces. This explains why you're getting conflicting info.
It's sad how far behind even some colleges are when it comes to teaching programming. My PL/SQL teacher didn't even know how to install an instant Oracle client on her machine or any of her students' machine. She then asks us to create a table and tells us to use CHAR as our PK for a table instead of a Number. I had the whole class (Like 8 students including myself) basically watching my computer to learn stuff while the teacher took long pauses to figure what was wrong with simple sql statements. Nothing against the teacher but as long as you have a degree they just throw teachers into the wild and expect them to teach something they nothing about.
I use the lowest common denominator at my workplace, to avoid additional install times. At the moment that's 4.7
See semi normal's comment
Its true that DI is provided in a package but its support is more ingrained in asp.net core and. Net core. Remember traditionally when you used DI invc projects you had to register dependency injection separately for controllers. All this is now much better supported
My first use of DI, dependency injection, was Autofac, and it was nice. You can build methods, properties, etc. That accept interfaces instead of classes. And they will work with any class that implements that interface. Further, with DI you can tell your application that wherever it sees a call to a specific interface, you want it to construct or expect a specific implementer of that interface. This is good for decoupling reliance of your code on one class or service. So if im using azure service bus today behind an interface that calls GetAllTopics, but tomorrow we switch to Apache Kafka, I can write a new class that uses the same interface and has GetAllTopics, but performs kafka logic instead. All i'd have to do is tell my DI that the interface now prefers the kafka class. Done. I wrote this because I realized you may be unfamiliar with DI. Apologies if you were not. Anyway, built in DI would be the ability to perform DI without Autofac or a similar package. 
&gt; During the "Calibration" procedure I would like to notify notify by writing status messages into a listview (ObservableCollection&lt;string&gt;) like "Speed set to xy", "Turntable reached position" Add events to the classes.
Doing a bit of WPF but with this on the horizon, I've taken to creating libraries separately with standard and referencing that into my wpf app until it all becomes core. Do you guys think that's a viable strategy?
Why is this answer downvoted, it describes the important part with bundled executables + .NET Core.
I'd say that's quite viable and if your functionality doesn't need to be coupled in your app, the right strategy. 
Right. 
I seen, thanks. 
The webservice project is its own library, but the client will spawn in this library. I can't find any settings file for the project though, however the app.config does have these endpoints defined, yay. When I call the client without arguments or like this: var client = new AnmeldungBeimTraegerErstverfahrenClient("&lt;&lt;name I found in the app.config&gt;&gt;"); I get a 'endpoint not found' errors. Is there a specific way to access this config file? 
So package an installer that walks them through getting core. Or place a dependency in it in app repos , etc.
I threw up a little. Are DependencyInjections popular? I like my code as flat as possible and this looks like a daisy chain
You can build desktop apps via a self hosted web core and run them in the browser. Many popular apps do this, i.e Plex media server, etc.
Algebraic types is definitely the top missing feature from C# for me
The person doesn’t know what built in DI is. None of this is going to make sense. Don’t forget to slow down and remember that there are still plenty of people new to concepts like dependency injection and need a basic explanation. 
You are right, I didn't realize that initially. My intent was not to confuse them. But my bad
Like most things, it depends on what you want and what are the needs at the time. `Convert.ToInt32` is more generic to handle other types. `int.Parse` is fine if you know exactly what you have, nulls can be via a ternary operator. In the end, if the code is clear and not a heavily used function, then you're probably pretty good. If it isn't clear or obvious, then either explain it until it is or refactor so it makes sense. If you are in a heavily used function (billions of calls), then whatever is performant.
`int.TryParse`, so you have proper handling of invalid values. That said, `Convert.ToInt32(string)` will just call `int.Parse(value, CultureInfo.CurrentCulture)`: https://referencesource.microsoft.com/#mscorlib/system/convert.cs,069d595792a157df
The client side of WCF was ported ages ago, the server side hasn't because no one sane is still writing SOAP services in 2019 and if they are they're not doing them in dotnet. How exactly soap services have **anything** to do with security isolation on the desktop though, I have no idea. 
Situational, but int.TryParse is preferable in the general case.
Tryparse takes care of a lot of problems for you. No need for a klunky try/catch
If the machines your user base supports the most current version I always use that. Try to Taylor your framework use to that.
An open source desktop program of mine targets .NET Framework 4.5.0 at the moment. It's bundled with Windows 8, 8.1 and 10, but it's recent enough for [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) 1.2 support (which is a requirement for me).
If it is a small project, it might be overkill but bigger projects benifit greatly from it. Unit testing is much easier with dependency injection too. Imagine you have a method that calls some external service using web or http client. How do you test it. With dependency injection it becomes trivial. You can change it if client was injected. You could argue that you could do the same with mock library but in my opinion mocking makes your code brittle. And working with interfaces makes your codebase so much easier to maintain
This is what I use most often. You can even do an inline new int like: if (int.TryParse(someString, out int theInt)) { //use theInt here... }
In terms of idiomatic code, int.Parse and int.TryParse are far more common. If nulls need to be converted into a valid value, it's done explicitly even if a default of 0 is desired. Aside from the null handling, which most people don't even realize, Convert.ToXxx methods are not type safe. For example, calling `Convert.ToInt32(myFoo)` when you meant `Convert.ToInt32(myFoo.ToString)` will be a runtime error instead of a compiler error. 
Add a null check before the logic then add what you want to happen is null ex: if(!value = null) { \\\\you code here}
If you are sure that it's actually an int , use int.Parse. If it's not an int, it will crash with an exception, which is exactly what you want in such a situation. If you can not be sure that it's actually an int, for example when reading user input, always use int.TryParse and handle the false case. returning 0 for null is horrible behavior. Never use Convert.ToInt32. 
I've written funkier. For example: `for(string line = sr.ReadLine(); line != null; line = sr.ReadLine(), lineNumber++)` to traverse a text file line-by-line from a StreamReader. If it gets any weirder than that, though, I tend to just break it up and make it more readable.
if(int.TryParse(i, out var number)) Console.Writeline(number); 
An interface is good for defining a uniform set of behavior (methods and properties) that a varied set of implementations (classes) may conform to. It's good when the caller doesn't care about the specific implementation just the required behavior of the interface.
So .Net Frameworks are backwards compatible and you can only have 1 runtime installed. If you are running a .net 4.5 app running but you have .net 4.7.1 installed, the app will run on 4.7.1 with just the subset of APIs that are available in 4.5. I always use the latest personally. The only exception would be if the environment can't use the newest version. For example. Unity until recently only supported .Net 3.5. I have started using .Net Standard 2.x for every library now and I have been moving the driver programs to .Net Core if possible.
Huh. I always see ML &amp; think "machine learning".
What do you have to do to get some F# code to interoperate with some C# code you're writing? Anything much at all, or just build a DLL written in F#?
Nothing from your list requires you to use .NET Core.
Do you want to crate these buttons on the fly instead for writing the XMAL?
So many years working with C# and I always forget you can do this! This saves so much time and stops lazy developers from skipping invalid parsing exceptions logic.
Use `int.parse` when you know the input will be a number. It's normally best to use `int.TryParse` when you do not know it will be a number, although `Convert.ToInt32` is okay if you definitely always want it to default to 0 when null or invalid TryParse is a great little method - you pass it a string and an "out" int, and it returns a boolean value on whether the conversion was successful string source = '123'; int resultInt; bool isInt = int.TryParse(source, out resultInt); if(!isInt) { // You can set your own default value, perform logging, or throw exceptions etc here }
&gt; So many years working with C# and I always forget you can do this! Well, you can only do this since C# 7.0, which is not that old (early 2017).
I don't know that I've ever worked on a real-world, production .NET app that *didn't* use DI.
The count starts at 0 so the 4th letter counted will have the index of 3 etc. make sence?
Since other people already answered your question, I'll provide some color instead. Another way to get the same array at the end of the day: &amp;#x200B; var name = Console.ReadLine(); var array = name.ToCharArray().Reverse().ToArray();
Yeah I default to TryParse too int.Parse is going to be slightly faster than either of the other options, so is good if you know 100% that the input will be an integer (although if you're converting from a string it's hard to be 100% sure) Convert.ToInt32 is a good option when you don't care if it fails, you just want a 0 default And TryParse is great if you want to log the result of the conversion, set your own default, or throw an exception other than NullReferenceException on failure (as Parse does) So yeah, as you note, it's situational - but I find it's sensible to default to TryParse and then decide if I'm better off with something else. For one thing, I can never remember which way round Parse and ToInt32 are - I know one defaults to 0 and the other throws an exception, but I guarantee I'll forget which way round they are by the time I have to use it next
https://stackoverflow.com/a/199484/648075
No, I'm just confused about how to write the xaml in the most efficient way rather than writing xaml code for 64 buttons individually
Even with the try/catch you could be creating a lot of extra garbage from generating stack traces and exception objects that won't be used.
The reason .NET is so much better than Java is that there is so much compatibility between versions and multiple versions can live on the same machine. Just use the latest at all times. When a new version comes out recompile you app for the new version and there is a 99.99% chance you won't have to make a single change. 
WPF is C# code... You don't need to write your whole UI in XAML if you don't want to, you can new up the buttons in the code and add them... If you do want to be pure and define it in XAML what you'd probably want to do is have a collection of objects representing the buttons in the ViewModel - Then bind that to the ItemsSource property of an ItemsControl or ItemsPresenter element. You can then define a data template for how to render the buttons. If you wanted them in a grid you'd have to also override the ContainerTemplate to arrange them. Or you could always cheat and just quickly write to C# code that generates the XAML for you, maybe a T4 template. &amp;#x200B; &amp;#x200B;
You can write a small app that generates the xmal in text then copy and paste. 
You might be right, I'm not sure
I would suggest start from scratch. Create new console project, import the service through wsdl. Service Reference should appear. Now put this code in there: var client = new AnmeldungBeimTraegerErstverfahrenClient(); var result = client.teilnehmerAnmelden(new teilnehmerAnmeldenRequest()); It should work. When you verify it works, you can work from there.
`Option Base 1` You should be looking askance at matlab, julia, smalltalk, mathematica, erlang, and APL.
&gt; But if you create non-zero based arrays in C# Not possible. Prove me wrong.
Cool, thank you
A Google search of half a minute would have yielded you the result already. https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=netframework-4.7.2#System_Array_CreateInstance_System_Type_System_Int32___System_Int32___
Well, prior to the `out var` syntax, we could achieve the same effect using int theInt; if (int.TryParse(someString, out theInt)) { //use theInt here... } Which I'd argue is still better than the invalid parsing exception handling business /u/mmatiasn was speaking of.
Link? How does this work with topshelf?
Correct, but you still need 5 years of programming experience with C# 7.0 to get that job. So years.
Boot camps are absurdly expensive and can only offer guarantees by running at the speed of the slower learners. You sound motivated so I'm guessing you'll be bored and poor by the end of the first day. So build something. &amp;#x200B; Pick a project, it doesn't have to be useful, and make it work. Give PluralSight some money, or Udemy, etc. Books work as a sort of binding agent. Take that knowledge back to your pet project. The reason this works well is, the problems you will encounter will likely be the same problems you will encounter in "real" software. &amp;#x200B; Come here and ask questions if you get stuck, but start with a project and figure out how to make it work. If that seems daunting just remember all big problems are lots of little problems, most probably with families, who you need to slaughter mercilessly. What the project does doesn't matter. Build a new Reddit if you can't think of anything. Just pick anything and start the problem hack'n'slash. &amp;#x200B; &amp;#x200B;