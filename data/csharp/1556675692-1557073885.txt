Ah, I see. Drats!
Will you please summarize what it is your summarizer summarizes?
Paragraphs, big statements of words.
That’s interesting. Was there a real world use case for this or just a side project?
In my particular case, I wrote a "digital assistant" that utilizes sentence summarization. I thought other people might like playing with it, so it extracted it and cleaned it up a bit.
You really, really don't want to put this in production code... but it's not impossible. The trick is 1. Replace `Console.Out` with your own `TextWriter` 2. Read the stack frames of any method calling `Console.Out.Write` and if any frame is part of the blacklisted assembly, skip writing to console. This is *not* guaranteed to work for any code forever depending on how optimized the JIT gets, but you're probably OK if you just want to cut down on crap filling the console. Note that reading stack frames is also horribly slow... don't use this in production. https://gist.github.com/nemec/33125c7d0e9c0fa494776fa38f826d1c
It would be neat if we could submit an entire textbook and have it return the essential information. Or summarize long emails. How does it determine what is essential to the body of text and what can be truncated?
[https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;tabs=visual-studio) &amp;#x200B; [http://99.237.221.222/](http://99.237.221.222/)
Configure it correctly and it can. It uses a couple of different algorithms, namely the TextRank algorithm, others that I designed. The readme within the GitHub link has decent coverage that goes into those different algorithms though.
Also, "truncating" doesn't currently exist within my library, it is definitely something I am working on though.
I desperately wish C# had this. \&gt; But if you want to have multiple namespaces per file... Has anybody *ever* seen a C# source file from any reputable origin that does this? If I got a PR with multiple namespaces in one file, it would be **r-e-j-e-c-t-e-d.**
Kind of sounds like cheating.. but you should google "data encapsulation in c# ".
Think carefully about where the words private and public are in that statement. If a method is private, it can't be accessed from outside the class.
&gt; It is common practice in C# to make all of a class’s fields public no, fields are generally private &gt; and to provide access to those fields through private methods of the class you can't expose anything with a private method, since only the class itself can see it. private fields are exposed through properties of the class
Yes, it is rarely uncommon to not have non-public fields, in practice.
Practice breathing. I'm not being flippant here but actually being serious. If you're stressed in the interview you will have trouble thinking clearly. Being able to recognize that and knowing take a deep breath can help keep you keep from going awry.
have been a professional c# developer for several years. used it to develop everything from corporate web servers to virtual reality games. almost all programming (c# and otherwise) is done using additional libraries of code accessed through APIs. this could be windows forms or a game engine, but it’s all controlled by application code written by you the developer. the console stuff is mostly important - as others have said - to help you learn the basics of the language in isolation first. you’ll move onto building useful applications before long :)
Shame a lot of people didn't take the time to get your joke, condolences
Although I cannot answer your question, I highly suggest you visit/post this on r/cscareers they should be able to give you all the information you need.
I've been doing C# / .NET for almost 15 years now. Most of the work is pretty IMHO. Unless I am doing something significantly complicated and new I am normally bored. This won't change, doesn't matter than language, the industry etc. As you get more experienced things will get worse as well. A lot of developers will choose to use technology based on not what is good fit to solve the problem but because a developer fancied learning it or management wants the buzzword in the application description.
Thanks I'll share the link there too
This is actually along the lines of what PressKeysMakeWords suggested in his comment. Trying that, I’m actually able to launch a program (tiny console app that gathers the info) in a logged-on user’s session and get all the info I need. I’m stashing this into a custom registry key for reference in my main app. Then even if a user isn’t logged on, I’ll still have the info from the most recent time a user was on.
I’ve tried your suggestion and this WORKS for me. I’m able to launch a small console app in the user’s session to get the info I need. I’m stashing that in a registry key for reference in my main app. Thank you for this suggestion and the linked article!!
Per PressKeysMakeWords’s suggestion, this is exactly what I am doing and it works great for me.
Per PressKeysMakeWords’s suggestion, this is exactly what I am doing and it works great for me.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/cscareers] [Getting away from making APIs as an intermediate C# developer](https://www.reddit.com/r/cscareers/comments/bjd4ja/getting_away_from_making_apis_as_an_intermediate/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
1. No 2. Yes 3. Not sure what this is asking 4. GET
If you need more than one line to do it, give it a proper if statement
You don't need C#-specific material. *Most* of computer science is taught without programming languages at all. That's why you're not finding what you're looking for.
There's a whole world of interesting enterprise software development out there. Not everything has a GUI.
You also only really need enough to get your foot in the door. If you have any big projects you can point to and don't mind starting at the bottom, that can help. Experience is much more useful than education, the trick is just getting the experience. There may also be apprenticeship programs that will give you both a job and a degree.
Since it’s often easiest to learn by example &amp; someone else asked a question around here recently to which Reflection applied well, hopefully my answer to them can help you too: https://www.reddit.com/r/csharp/comments/ba67mx/seeding_a_relatively_large_database_with_random/ekairy3/
I found motivation to reach the Master degree in a *promise* of an interesting job in the future. Working 8 hours a day, 5 days a week is 1/4 of my life time, I can't accept the idea that I will be bored one fourth of my life, this will eventually make me quit the office world and do something completely different (eg: diving instructor). I love programming I want to continue doing that, but often when I'm in the office I'm thinking *what the hell am I doing here getting bored in front of a computer?* How do you accept being bored for roughly 15 years? How do you find motivation to wake up the morning?
True, you have a point here. However let's remove the online services because it's actually making APIs. So the only thing left I can think of is the libraries vendors. Is there another area I forgot? Could you tell me more about the non-GUI industry? That's a completely unknown world to me. Thanks
[removed]
For example, I work for a cloud SAAS provider that processes email on a large scale. The external interface is SMTP and the internal microservice architecture is a mix of web services and cloud event/cloud queue based services. There is a UI but it is a small part of the whole system.
for those of you who use rest api clients, I created a UWP client that is fast and memory efficient. Not perfect yet, but it gets the job done for simpler api calls. Would appreciate your feedback https://www.microsoft.com/en-us/p/nightingale-rest-api-client/9n2t6f9f5zdn
As much as I love C#, pigeonholing yourself as "a C# developer" is the wrong thing to do. It's quite common at the junior end to be pigeonholed that way by other people. "Oh, we need a Ruby/JavaScript/PHP developer." At the senior end, however, it's just assumed you'll adapt to whatever language they're using (or, in dreamland, you get to choose whatever is best for the job). Domain experience is much more important. Think of what kind of work you want to be doing, what kind of problems you want to be solving, and then focus your learning and career on what will get you there. &gt; So I'm realistic and working in the Embedded field is just a fantasy for me. No, it's not! Worst case scenario, get a C# gig doing stuff you're familiar with at a company that does embedded programming. Lots of companies have web/database stuff in-house. Become familiar with the product the company makes, and opportunities to work more closely with the product engineers will arise. Sit with them at lunch, even.
Hey thanks for your answer. The embedded world is kind of an hidden world, there's embedded everywhere but at the same time it's not really obvious. however The IoT world is a little bit more advertised. I've learnt a while ago to find internships how to act as a *detective* on LinkedIn. I know how to investigate on people's profiles because information is much more valuable than companies' pages or websites. I tried to look for companies using ASP.NET for their web servers but also dealing with IoT/embedded programming but I found nothing (filtering to the city I'll go of course). Historically the embedded world is Linux and the C# world is Windows so these two worlds are usually not mixed together. I'm a bit desperate now because I was dreaming I could find a company I can start with my C# skills and slowly move towards an Embedded position. But I don't think I will be able to find this, at least not in the location I go (I go there because my wife wants to go study there)
Enterprise software dev. My job is comprised of all different parts of a c#/javascript/sql stack. Building front end apps in javascript, most recently with react and associated stack. Before that I also used Xamarin when it was new. Building APIs, yes. Building enterprise architecture to direct real time flow of data to services for processing and designing/building those algorithms. Building/improving the CI pipeline and automated test systems. Dealing with db concerns. We're a small team, so we all do (almost) everything to a high level. I like the variety. Maybe you would like that? Look for startups or tiny companies where you can be exposed to a wide variety of different things and have a lot of freedom to try out new tech. On the other hand, if you want a deep dive into a technically difficult subject area, then you'd probably need to have studied it academically or now on your own time to get progress.
Okay i check those out
I also tend to prefer small to medium size companies for the same reasons you mentioned but also because there's no imposed dress code. I'm currently in small company dealing with the API of course but also SQL queries, creating tables, understanding good practices for performance on the SQL DB. Also among all the developers I've been the one who worked on Azure DevOps, taking care of the build pipelines, Nuget packages generation and Source Link + Symbol Server. All of this is interesting, I used to hate SQL but I like it now. But I don't know I have the feeling that whichever company I will choose to go I will end up doing pretty much the same things, except if I choose Unity.
I'd like to add, thanks for the tips to not advertise myself as a C# developer. You're right, I should broaden my field of research by just applying as a software engineer
A path many would go down at this point is to try to become a contractor to earn more money doing these same things. There's some motivation :) Or strike out on your own if you can make a business idea that works, or build something up from scratch. But that's really, really hard. &amp;#x200B; Doing something totally different like unity for a year or two wouldn't hurt! More exposure to different things is great and will help you with a different perspective even if you come back to boring old enterprise-y dev.
Mh the problem is that the interpolation calculated in python should be applied on real time data measured and displayed in C#
Hello. I assume "words" is a dictionary, but for some reason you are foreaching though it instead of using it as a look op table. You should also be able to move one of the ToLower methods. If you initialize your dict with your words all lowercase, you don't have to lower the key on each execution but only when there is a match and you have to increment by one. If mulithreading would help, depends if this code is cpu or data access bound.
If you have a bit of spare time, read this book! When I started I missed all my technical interview... Then I started to read this book and strangely it covers many of the topics I got on interviews + it's not too big and really well explained. A real hit for me! https://www.microsoftpressstore.com/store/adaptive-code-agile-coding-with-design-patterns-and-9781509302581
A small but immediate optimization would be to change how you handle word comparisons. Right now you're iterating through the list checking each word for a match (potentially slow with a large number of words to check), it's probably better to just check if your dictionary contains the given key (word) and increment the count entry if you are ie something like: foreach(string fileWord in fileWords) { if(words.ContainsKey(fileWord)) words[fileWord]++; } Note that this requires you seed your dictionary with the desired words, but it appears you're doing that already.
C# is a tool. If the job requires it, use it. You’re not a C# developer. You’re a software developer that knows C#. Learn some more languages/frameworks and diverse yourself to a world where you use the best tool to complete the job.
It's cool. Just a question: for basic tasks, why should I get and use your software instead of the basic built-in Remote Desktop already installed on Windows?
Use multithreading.
/u/[DietBatteryWater](https://www.reddit.com/user/DietBatteryWater) 's suggestion to use a dictionary lookup for existing words will probably help a lot but fwiw word count is the canonical example of something you can do using a map/reduce type approach. This is because if you count the number of words in one half of the file you can simply add that to the number of words in the other half to get the total number of words (aka it's eminently parallalizable). If you search map reduce and word count you'll see what i mean. If you search a bit harder you may find someone who implemented a similarly parallel approach in pure C#.
If you're interested in working with Unity, look into the Oil &amp; gas industry, and similar engineering heavy industries. That's where you'll find Unity used outside of video games.
This is a very good point, and almost certainly is the way to achieve best possible speeds. Single threaded dictionary lookup *should* be fast enough, but if you want to use very large texts or achieve very fast speeds this is the way to go. It should be reasonably easy to implement in C# with TPL/PLINQ etc (depending on your comfort with the language), but whether it's worth the time investment is going to depend entirely on use case.
It took me around 3 hours to understand the whole example but I think it may have worked, I will try creating an example in which i create a random enemy with random abilities (chosen from a dictionary) and then print them on screen for the user to use using reflection. Thank you!
Adding to the other comments, if `words` is a lowercase Dictionary, then doing the lowercase conversion one time for each line would reduce the number of strings created (and the resulting GC overhead), e.g. fileWords = line.ToLower().Split(...); Also, your separators list looks incomplete. I would add `'-', '(', ')', '\'', and '"'`.
Yeah... I've learned that as well. I learned python, C#, and C++ to make things (and I was super library dependant... Still am cause I'm lazy lmao), but when I took a programming class where it teaches you the fundamentals of loops, flow control, and mathematical representation of what your actually writing it blew my mind.
Along with what the others said, I think your Split function could also be a performance drainer. Maybe try for each of the 10 search words and look through the files with IndexOf() with the start parameter to continue where you left off after finding a word. Furthermore, you can also try Parallel programming.
A good place to start is through moocs like EdX or Coursera. I highly recommend mit's intro to programming 6.00.1x course. While you might know all the code, syntax, and things like what a class or function are... Some of the concepts were things I never knew til I took it. Plus you can take it for free, just don't fall for the "oh you can upgrade this course for $99 bucks" or whatnot. Anyway, good luck with your learning. Hope you find what you're looking for!
I've got rent to pay, food to buy. But also the environment. As long as I work in a place where I like it, I don't really care what I'm doing. Or how much I'm earning, for that matter. In all honesty, most developer jobs will pay better than most other jobs, so in the end it's fine. However, working in an environment that doesn't make me miserable, with people I like, is a lot more meaningful for me than the project type itself.
Have you considered using regex for this?
&gt; IndexOf [Boyer-Moore](https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm) is likely faster.
&gt; then doing the lowercase conversion one time for each line Using a case-insensitive string comparer for the dictionary will be faster than `ToLower` on the lines.
If you want to use multi-threading you can split the text in #n parts (make sure you split on the separator, not a word in half) and start #n threads or tasks to search for those words. In addition to that, have you considered using regular expressions to find those specific words?
I think there was an opportunity to alternate `while(true)` with `for(;;)` on both switch cases but one starting with `for` and the other with `while`. To show that they are in opposite order. Improves code readability, ya know
Use the right tool for the right problem. I'd use grep.
A dictionary can also be set up with a custom comparer, so it's quite easy to create a dictionary that ignores case. var dict = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase);
Building a game using Monogame :D Small post with video can be found here: [https://www.reddit.com/r/monogame/comments/bicgff/new\_feature\_for\_my\_game\_astroids\_d/](https://www.reddit.com/r/monogame/comments/bicgff/new_feature_for_my_game_astroids_d/)
Read each book in parallel creating a dictionary for each book. When all books has been read lookup the summation of the desired word in all the dictionaries.
Regarding multithreading: be aware of thrashing within the system dependent upon the size of the files you are searching and the number of concurrent threads running within the application. If the file size is so large that you are going to exceed your ram cap on the machine you should split up that document to not reach this limitation or your application will be extremely slow. Additionally, do not assign all of your cpu cores out to do the multithreaded workload. This will not allow the host OS to do the work that it needs to while your application is running, effectively choking the machine until it starts to chug. I am assuming, based on what you are doing in this application, that the size of the file is small and the number of concurrent document searches is large. This would mean that your search should be cpu bound and not I/O bound meaning you'll be able to load multiple documents into memore. If all of that is true then I would agree that multithreading is a good candidate for a significant performance increase.
It is necessary to `Convert.FromBase64String`? I do use `WriteAllBytes` with a Base64 string in one project but I don't convert it and is working.
Removed: Rule 4.
Nice. I didn't know you could do that. In case anyone else is curious, one of the Dictionary constructors has an IEqualityComparer parameter: https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.-ctor?view=netframework-4.8#System_Collections_Generic_Dictionary_2__ctor_System_Collections_Generic_IEqualityComparer__0__
There are a million ways to improve peak performance on this but a very simple improvement on his solution is to use String.IndexOf. Read the whole file in and use a loop with IndexOf to count the number words in the string. Beyond that he would be better off streaming the file and improving how he reads the files in.
Along with what other people suggested, a solution that’s commonly used in chat filters where you need immediate response is to build a trie with the words you want to find and then as you iterate over all characters (this doesn’t require you to first split the entire text into tokens by space) you can check if anything matches. The checking is actually done in O(n) if I remember all the steps correctly. The algorithm for this is called Aho-Corasicks. It’s quite an easy implementation and it’ll boost your results considerably (less than half your current running time).
From the description is probably homework or a learning exercise.
Its sort of the goto really. However, I wonder if cache misses is going to kill you with it. You tend to search for the first letter, then the last letter. I think I would try std::min( wordSize, cacheLine ) in a modern implementation of it. Itd be fun to see what AVX**2** could do too. 32 characters in a single register. All sorts of shifts and other ops. These are accessible through [system.runtime.intrinsics](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.avx2?view=dotnet-plat-ext-2.1). I agree with this chain. /u/Lashto , the split is already hitting each letter once, doing a bunch of work, THEN youre going through things again. So youre already hitting each letter 1 more time than you need to. Gotta check what youre bound by though. You could easily be IO bound on a 5400rpm drive, and literally anything you do to your searching code is going to be wasted work. The fastest thing to do there is to memory map the file, then use something like Boyer-Moore on top of that with nice cache aligned work. Im unsure if Boyer-Moore does well with multiple words or not. You might be able to get up to the memory bandwidth of your machine with just that, and in that case going multithreaded is worthless. Theres usually some headroom there though, so doing 2 or 4 cores would probably be good. I _think_ splitting the words onto different cores and searching the same book is going to be best. Youll be able to share the same L3 cache, (and on some architectures L2).
Cs 50 from Harvard is a great place to start, that’s where I started, You can find the course on EDX
We can do even better, too. RavenDB had some good examples of custom collections using a generic type parameter to retain the comparer's concrete type, helping the compiler devirtualize calls. Somewhat unfortunately, in order to maximize results you'll have to implement string comparers yourself because the BCL concrete types are internal. That said, if your string data domain is restricted (perhaps they're all GUID strings), you can often do better than the BCL's implementations of StringComparer anyways.
Personally, instead of reading the file line by line, I'd load it all into a single array and use a well formed LINQ statement or REGEX filter to handle counting.
I totally agree about your point of view on the environment and the earning too. However still, if I remove the sleeping time, my job is one third of my active time. And time feels long when it's boring
I think memory-mapping the file is worth considering.
I don't know about that, I would only suggest memory mapping it if you needed it more than once. Does it give a performance gain over simply streaming the file?
Couple of opportunities here. The first loop over the files could be changed to use a Parallel foreach instead. IF you switch to a threaded model, then you will need a different way of increasing the word count. Possibly change that to a ConcurrentDictionary might be the quickest switch-out but possibly not the cleanest.
CupofCoffee and CupofTea also need to implement The interface. public class cupOfTea : HotDrink, ICup { ... } Unless told by the instructor, C# should not use virtual Properties or virtual Methods, unless you need that very specific behavior. In you play ground it means nothing, but in large applications it has performance overheads you should be aware of.
I use VS Code on OS X, works really well.
Resharper is a bloated mess, it killed VS for me and ultimately I simply had to remove it.
You could go for something like [this](https://hastebin.com/ecebivoqad.cs), with the help of a task list (each file becomes a task) and concurrent Dictionary. I manages to scan through this little [bad boy](https://github.com/mxw/grmr/blob/master/src/finaltests/bible.txt) (bible ~4,2mb) 4 times in about 100-200ms depending on which machine I used. A few things to keep in mind: - I haven't really tested this code that much, just a fast and simple example - There are maybe more efficient ways of reading files, but the way I'm doing it here has served me well in the past with larger files and/or collections - This might use a lot of CPU, since we're trying to use all available threads
DataTier.Net is a 100% stored procedure powered alternative to Entity Framework. Getting Started with DataTier.Net: [https://youtu.be/GwjDKP9wLGk](https://youtu.be/GwjDKP9wLGk) &amp;#x200B; 100% free and all my open source projects come with a double your money back guarantee. [https://github.com/DataJuggler/SharedRepo](https://github.com/DataJuggler/SharedRepo)
Thanks for the suggestions. I'm looking at C# in depth or C# in a nutshell. Just need to make a choice.
I've created a wrapper for GraphQL.NET because there was no way I was going to create 3 x (however many models we have in our project), just to use GraphQL. ​ https://github.com/Michannne/graphql-core ​ Has some other useful features like explicit joins, and being ables to seperate queries into different files Feel free to contribute if you think of anything you can add to this project, it is MIT licensed.
This is bad advice. IndexOf isn't free, you've basically created a double for loop and now have O(N^2) behavior.
&gt; I also tend to prefer small to medium size companies for the same reasons you mentioned but also because there's no imposed dress code. I manage a team of 7. Our entire IT group is 12 including myself. We are solidly in the "small to medium" size range. Our work sounds very similar to everything /u/Skym_ said. We have some 3rd party products we integrate with (VDP, ERP, etc). We do order fulfillment. We have sales incentive services. All kinds of stuff. We build almost everything 100% internally. We have web apps, APIs, scheduled processes, all manner of integrations. There are tons of companies just like mine (in scale) where you can touch a little bit of everything.
Not exactly, see how i iterated, the next loop will always be shorter.
If youre not using sockets, what are you using? But to answer you question, you write that stuff yourself. So, if all the clients need to see a message, you write the message to each network stream.
TCP Pipes?
Thank you for answering, i'm using tcpClient and tcpListener. So i can't like "share" the same Networkstream between two or more clients?
The `HttpContextAccessor` has a `HttpContext` property that you use to work with the context. It's done for DI purposes, where you want to register your services early (at the start of the application) when the `HttpContext` probably doesn't even exist yet.
&gt;Why do we have HttpContextAccessor instead of HttpContext? `HttpContext` is still present – it can be found in any controller or the `Value` property of an `IHttpContextAccessor`. This is a way to help developers not shoot themselves in the foot. An HTTP context is only meaningful in the context of a particular request. A service with a Singleton lifetime with a need for the context would fail; it would be instantiated upon first request, and be broken thereafter. The context accessor will get the HTTP context _of the current request_ whenever `Value` is accessed.
[https://www.manning.com/books/functional-programming-in-c-sharp](https://www.manning.com/books/functional-programming-in-c-sharp)
There's a lot of good notes here about the algorithm. Dunno if this is also relevant but the first time you run a given function there is additional overhead (JIT stuff) so you might be unintentionally timing that as well. The typical solution is to run the function once before timing it. Since you embedded the stopwatch in the function you could maybe set up and run it on a single small file and ignore that part of the console output. This is only inportant if you want a very accurate sense of how much time it REALLY takes to execute your function - obviously it won't get you your word counts any faster.
Oh, you are using sockets, theyre just behind the scenes in TcpClient and TcpListener. Basically no. Streams are made to track position and other instance style variables that are per connection. You could probably hack something crazy, but its just not worth it in any way.
thank you so much!
Thanks for the answer! Amended my post.
Despite the downvotes, I'd go this way ... why ? well both linq and regex are implemented by the library, so you leveraging lower level (and potentially faster) execution. Yeah you dont get to geek about with tree structures etc , but I'd be surprised if plain old linq or regex wasn't at least as fast to execute and faster to develop and maintain
Isnt working when using ContainsKey() as suggested /u/DietBatteryWater.
LINQ is no matter how you look at it **slow**. that's the major downside to LINQ. is it extremely nice and powerful? yes. but it's slow af. does it particularly matter in most cases? definitely not! we got more raw power than ever that's just sitting there not being used in most cases. but recommending a LINQ implementation isn't really the way to go when the subject matter is speed. however, string searching algorithms are a well explored part of computer science, and the proper approach is to leverage that which is already there instead of reinventing the wheel. [https://en.wikipedia.org/wiki/String-searching\_algorithm](https://en.wikipedia.org/wiki/String-searching_algorithm) so simply read the entire texts into memory, and search for your keywords using one of these algorithms and you're done. no need for LINQ or regex. just implement or copy something like KMP, and your code will look something like: ReadAllTextIntoMemory(); var TextSearchResult = KMP(Text, target); however I do agree with you that using LINQ as a generic way to solve searching problems is generally speaking a very easy and efficient way to solve most issues.
Probably because you didn't specify the comparer in the dictionary constructor. To mimic your `.ToLower()` implementation you can instantiate the dictionary with OrdinalIgnoreCase
Clever use of synonym function with text rank.
I recently created a clone of the game Flappy Bird. It's my first project and it took mr. A bit and lots of looking things up but it finally works and it has sparked my interest in doing more.
You’re very welcome! Creating random enemies with random traits would be a great use case for this too, that’s a really good idea. Best of luck, and have fun!!
&gt; build a trie tree?
No. A trie is a data structure. You can read about it on Wikipedia. It’s not complicated to build but does require recursion.
Ahh yes, a Radix Tree: https://en.wikipedia.org/wiki/Trie I'm kind of surprised I never came across this word `trie` in my studies. TIL! Thanks, man. :)
Yeah i guess it's dependent on where you learned about it. In our CS classes, they called it trie, thus I knew about the word trie. But I've never came across the term Radix Trees, so I guess it goes both ways :p
Look at the MapReduce paradigm, and use it with multi threading. [MapReduce Wikipedia](https://en.wikipedia.org/wiki/MapReduce)
Psh, just spin up a spark cluster to run the word counts. Store the results to a distributed hash table cluster storing the results in memory.
*shrugs* yeah. No one called it `trie` in my CS classes. It was always called a Radix Tree or a search tree. No worries. Thanks for the insight.
You might like to have a look at the ZeroMQ library. It has a few pre-configured communication patterns like dealer and router that might handle some of the plumbing for you creating the network topology you want.
Search for "most common .NET interview questions" and practice writing out the answers for some of them, or speaking through them (whichever you think works best for you--some people prefer writing but I like talking to myself to prepare). Also search for "most common interview questions." Find out what the interview format will be by emailing someone now. Unless you're preparing for a top workplace and you know it's going to be a whiteboard interview, you should make CTCI style questions low priority. Instead figure out how to answer questions like "Why do you want to work here?" and "What are you currently working on?" and "What's the hardest problem you've ever had to solve, and how did you do it?" and "How did you resolve a team dispute?" and general questions about your background with energy and enthusiasm.
Could some of the downvoters explain why this is a bad idea? A regex matcher would build a DFA that only needs to check every character of the file once and go to the corresponding state. You can check the file in a single pass without splitting words or allocating any memory. In OPs code, `ToLower`, the creation of `KeyValuePairs` and `Split` all allocate memory. Finally, if the regex matcher is implemented in a lowlevel language, this would give you another (small) performance gain.
You'd think that, but I think our inexperience with writing programming languages does not benefit us here by speculating how easy or harf something would be to implement. I have often wondered why we don't have more constraints for generics or why we don't have generic attributes (yet... these are coming). Both *seem* fairly easy to implement, especially generic attributes, but looking at tasks and issues related to C#'s language development, there seems to be more involved. For example, each language element must be added to the grammar tree without breaking all previous grammars, etc. Still, I'd like to see an actual C# language dev explain what it would take, in detail, to implement something we think *looks* simple to add, like generic attributes or something.
... but can't you do that in C#? It wouldn't be a delegate but the class would contain the delegates to communicate with the events.
pm
You will read the whole file exactly once per word in the wordsList dictionary. So it's O(n*m). If the wordsList dictionary is big, it's very unoptimized.
Yes, use linux. Jk... but for real, use linux, or a lower level language. Nice work though.
read some bytes foreach client except the one i just read from, write the bytes put this in a function, call it share
You still have to bind the individual delegates separately, because delegates are individual functions. Of course you could just do the exact same thing as java and make interfaces and the like, but there is no need to reimplement it. I like c#’s way because you have finer grained control.
There is no suggestion that the word list is big and either way you look at it you will have to read the whole file for each word anyway. This way allows parallelism, the goal is speed.
I'd still try BOTH linq and regex before homebrewing a solution? the reason, it might be fast enough for the improvements you need. Years of inheriting per optimised code thats difficult to maintain or adapt makes be keen to avoid any hint of reinventing the wheel
Don't bother trying to explain. They have no idea how powerful regex is and what can be done with it. Regex can count words in the blink of an eye
I literally had a similar question, and ultimately I had a lot of help but did not understand what I needed to get the job done. What I was told was that I needed to have my clients subscribe to an event on the server to receive the data upon event trigger. Unfortunately, I haven't quite figured it out, but I found this course that I bought that *should* help when I get a chance to sit down. I'm sorry it's not free, but this is the only thing I think has hope in helping me learn, but that's just me. [This is the link](https://www.udemy.com/tcpip-socket-programming-for-coders-using-csharp-net/)
assuming this is a void function with no arguments Action\[\] actions = i % 2 == 0 ? new \[\] { helperA, helperB } : new \[\] { helperB, helperA }; foreach (var action in actions) { action(); }
Based on the message format it looks like a logging framework. &amp;#x200B; Are you using a logging framework like log4net, serilog, or microsoft.extensions.logging? There is probably a way to configure the framework to ignore the output messages.
You can optimize this further by using `words.TryGetValue`. https://stackoverflow.com/questions/9382681/what-is-more-efficient-dictionary-trygetvalue-or-containskeyitem Your string comparison could be altered to be `fileWord.Equals(word, StringComparison.InvariantCultureIgnoreCase)` Other ways it may be optimized: 1. If you have the memory, instead of reading line by line you can dump the entire file into memory and scan it all at once. 2. Assuming that is not an option you can look at using asynchronous methods and multi-threading (https://docs.microsoft.com/en-us/dotnet/standard/io/asynchronous-file-i-o)
Honestly I don't know how to answer this, especially based on your replies. My biggest hurdle here is I see in your title and in some of your replies, you reject a lot of things as reducing down to "making APIs". But *everything* is "making APIs". * If I'm writing a Bluetooth LE device, it has to advertise its services, those services have characteristics, and *that's an API*. The client has to talk to your device in terms of reads and writes to those endpoints. * If I'm writing a website, the client makes HTTP requests and that's an API using HTTP. The server does things in response to requests and sends responses based on the API I designed. * If I'm writing a desktop application, I'm writing an API whether it's WinForms, WPF, Electron, or anything else under the sun. The user interacts with a control, that causes me to call a method. The method takes inputs and produces outputs in a documented fashion... *it's an API*. This is even more true in applications that use MVC or other design patterns. * If I'm writing a console application, it takes input from stdin, does work, and produces output... *it's an API*. It turns out "making APIs" is all we do, just sometimes we're also the only consumer of the API. If you aren't building every app such that there's some UI layer and an API underneath, odds are your apps are either really small or really hard to maintain. So I don't think you're trying to get away from "making APIs" in the general sense. I think it just sounds like you're tired of making websites. So pick a different area! Keep in mind perceptions though. You mentioned you don't want to maintain "a dying Desktop app" but that's *exactly* what Blazor is going to be trying to do. I can specifically comment on Xamarin, I've done it for 6 years now. Check if there is demand in the areas you want to live first. I don't think it's widely adopted, even MS has been using Electron in areas where they *could be* using Xamarin. But if a company wants Xamarin they have a powerful need, and there aren't many Xamarin devs out here. I don't know if it's a long-term MS investment, but once you learn one XAML framework you more or less know them all. But keep in mind Xamarin tends to use an MVVM approach, which means you first write an API then put a GUI over it. ;)
in addition to other solutions: using \`string.Equals(a,b, InordinalCase)\` will help as well specific data structures wil probably be faster, but you can do this well with LINQ's methods \`Select\`, \`SelectMany\`, \`GroupBy\`
There is no suggestion that the word list is small either, it could be filled with every word in the Oxford English Dictionary. &gt; either way you look at it you will have to read the whole file data for each search term anyway No, this is 100% possible in O(n) with a single iteration of the input file instead of one iteration per search term. A few other commenters have already pointed out that you can do it with a trie. Instead because I'm lazy my solution would be running in O(2n) but the benefit is it's about 10 lines of code, dead easy to write, easy to implement and fast enough : 1. split into words with regex. Before you recoil in horror at regex... this is pretty much the only use case that is built for regex : search a very simple pattern (word) in a big input, without having to deal with charindexes, for loops, etc. Again, this is 2 lines of code, one to create the regex, one call to get the Matches 2. Iterate over the matches and match the words against a dictionary by key, using a keycomparer that ignores case. Again.. an extra 5 lines of code and that includes lines that open and close backets for the loop.
There a reason to use a `StreamReader` instead of just `File.ReadAllText()`?
A big one I see a lot of our candidates struggle with is passing by reference vs value. And really just reference and value types in general. Its good to have a basic understanding of the stack and heap and how c# interacts with them with it's various types of objects. We have certainly hired Jr's that don't fully understand the concept since its not really that indicative of ones skill, but its a good show that you have a firm understanding on how code is being compiled and executed at a lower level.
The real question is, did you summarize this manually or did you use your summarized to summarize itself?
Proper Professioanl asking the real questions..
u/Lashto my think they need to do it this way because they are comparing the result of `.ToLower()`. However, they can [initialize](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.-ctor?view=netframework-4.8#System_Collections_Generic_Dictionary_2__ctor_System_Collections_Generic_IEqualityComparer__0__) their dictionary using [`StringComparer.InvariantCultureIgnoreCase`](https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparer.invariantcultureignorecase?view=netframework-4.8) to get similar comparisons directly through the dictionary.
If you have it memory mapped processing the file in parallel is going to be a lot easier to implement. Also you can just rely on the OS' performance optimisation of reading in files rather than trying to beat it with your own code.
Try calling just `Hide();` instead.
It seems to work on my machine, running dotnet core 2.2.102 $ dotnet script &gt; var dict = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase); &gt; dict.Add("test", 1); &gt; dict Dictionary&lt;string, int&gt;(1) { { "test", 1 } } &gt; dict.ContainsKey("TEST") true
I have a bit of a hard time understanding you. 1. Why is LINQ and regex "worth" trying before KMP? here's KMP in C#: [https://gist.github.com/Nabid/fde41e7c2b0b681ac674ccc93c1daeb1](https://gist.github.com/Nabid/fde41e7c2b0b681ac674ccc93c1daeb1). I can copypaste that, implement and make the necessary modifications required at line 42 to suit our case in probably 30 seconds including the time it takes me to start Rider. can you say the same about writing your custom LINQ and regex code? 2. KMP is tried and tested and mathematically proven. Can you say the same about your homebrewed (why is KMP homebrewed? it's literally one of the standard ways to tackle pattern matching) LINQ and regex solution? so all in all, why are you so adamant about going at it with LINQ and regex first?
I see a lot of "solutions", but have you considered asking the developers of the dll you are consuming to not do that? Or they might have a configurable option to disable it. The output you pasted in another comment does make it look like they use a logging library, so you most likely can configure it to not output to the console.
oh I like this. thank you :)
You can use a parallel foreach loop which should iterate through the results much faster. You'll need to use a thread-safe collection to store the results.
You're totally right, because I have almost exclusively experiences in C#, I kind of forgot that no I'm not just a C# developer but a software developer. I'm trying to learn Embedded programming in C, I don't know if that will lead somewhere one day in terms of professional activity but that's what interest me for the moment. However it's very hard to find the time to program at home.
Cool thanks for the tips, I will have a look at that
r/badcode
multithread: https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-write-a-simple-parallel-for-loop Looks like your code can be trivially upgraded. Only issue I see is the word count incrementation, but that might be worked around if you made that per-file (ie. Dictionary[file][word] ..) Your biggest win would be reading more data at a time, now depending on your runtime settings you might be doing kernel-context switch (= giving up your runtime slice!) for every line of a file. I would definitely use regex. You don't even need anything complex, just Regex.Match("word|other|yetmore...") and then do what you do here. Another optimization would be finding out characters that are in "most" of the words and only looking at them before doing the full work on the line. So for example with (the, he, a, ball, hero) you have characters (h, e, a) that if they miss from that line, it's certain that none of the words are in the line and you don't need to do split and dictionary walk. Depends on amount and diversity of check words that you have if this helps runtime.
`grep` could work, I think the original was coded for this very purpose; but that is for you to decide.
Ok hear me out here. When you do everything you've suggested, are you still not reading everything the same amount of times? It's just that it's more obvious in my code and I happen to read y(x) instead of x(y). Think about how Regex in the backround must match strings, unless I am mistaken it seems like a fundamental necessity to compare everything by everything in nested loops like this. Even if the Regex function is specially optimised and performed natively, it is not something suited to be parallelised like this.
Sorry I haven't defined precisely the term API here. I know what an API is but I think based on what I wrote (experience almost exclusively on the ASP.NET Framework) it was quite clear that my meaning of API here was *web API with classic HTTP verbs* Thanks for your thought on Xamarin, I also had the feeling it wasn't widely adopted and not really advertised my Microsoft. I know XAML and MVVM, during my studies I've touched on Windows 8 app, Windows Phone 8, 8.1, 10, and WPF. But with the current state of Xamarin I'd prefer stay away from it for the moment.
\&gt; the problem is that the server create different networkstream for every client that connect &amp;#x200B; How is this a problem? you don't want to mix the data in the streams because it'll screw up who receives what and it could cause the data to be an unintelligble mess or interwoven messages. &amp;#x200B; If you want to share data between all your clients you need to read data from each client, do some manipulation of the data locally, then push the data to each client...
It's nice, but I still love postman
This may be a helpful link: [https://teachyourselfcs.com/](https://teachyourselfcs.com/)
&gt; But with the current state of Xamarin I'd prefer stay away from it for the moment. Can't disagree even though it's what I'm working on right now, haha. I'm also keeping my eyes on Blazor and WebAssembly. It's really hard to decide what MS is going to settle on.
Store all the network streams into a list, and write to all of them in a loop!
I know, I will get downvoted to hell and beyond for writing this, but: Why are you using WPF for making a game?
Multithreaded would be faster a lot faster since you could process the files in parallel. I would create a new class that you could pass a file path too (essentially lines 58-78) and incorporate all the optimization suggestions below. &amp;#x200B; Then your foreach(string file in files) would be updated to spawn a new thread from your file variable. &amp;#x200B; The overall speed of your app would be the speed of your biggest/slowest file (-ish).
I am working on an MSSQL wrapper library for building and executing queries more conveniently. It basically consists of a set of specialized string builders for building queries and some functions for executing them. The goal is to avoid having a bunch of SQL strings in my program which is not easy to read and reuse. I also try to avoid too many "magic strings" (cases where you just straight up write SQL queries in string) except for functions, which are too varied to turn them into C#-like code, such as operations between columns, cast, etc. I am currently writing tests for it which also serve as example usages. Hopefully the whole thing can be completed in within this month so that I can share it again on this sub. [https://github.com/Isaaafc/mssql-wrapper](https://github.com/Isaaafc/mssql-wrapper)
What we do is use azure devops ( [https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/) ) to build and push our nuget packages to our own repository ([nuget.org](https://nuget.org) is slow) automatically after a new commit has been pushed. &amp;#x200B; You set it up once, push project B drink some coffee and enjoy the joy that is updating packages.
Interesting! Thanks for the suggestion!
Call this.Close();
Depends on implementation but if the tree becomes big, you could be having lots of cache misses unless you are using arrays. Another option would be using a perfect hash function to map the keys he is looking for, then compare lengths and when the length is the same as what he is looking for, to compare the strings. Another idea is to simply drop each string that's bigger than the maximum length in his dictionary and then do the idea I mentioned earlier. This however, has a lot of branching but I don't think we are at a point where branching matters a lot.
I would alyave suggested this as well, even through I have not much experience with searching algorithems at all
I made a library to allow server-side aggregation of documents in Azure Cosmos DB, since that's not natively supported. It accepts .NET expressions (similar to how IQueryable works) for aggregating the data, and translates them to stored procs that get automatically created and executed in Cosmos. [https://github.com/csdahlberg/CodeTiger.Azure.Cosmos/wiki](https://github.com/csdahlberg/CodeTiger.Azure.Cosmos/wiki) Right now only very basic aggregation is implemented, but if there is demand I would be happy to build out support for more types of expressions. &amp;#x200B; An example that gets a sum of all `Amount` values for each store: CosmosContainer container = {{your_target_container}}; var queryOptions = new AggregateQueryOptions { PartitionKey = "13" }; var query = container.CreateAggregateDocumentQuery&lt;Sale&gt;(queryOptions) .GroupBy(x =&gt; x.StoreId) .Aggregate((aggregate, current) =&gt; new Sale { StoreId = aggregate.StoreId, Amount = aggregate.Amount + current.Amount, }) .AsDocumentQuery(); var results = new List&lt;Sale&gt;(); while (query.HasMoreResults) { var resultsPage = await query.ExecuteNextAsync(cancellationToken).ConfigureAwait(false); results.AddRange(resultsPage); }
Probably something like 3 in a row, checkers, etc... Not really worth involving Unity and the likes.
Even for a checkers or a 3 in a row, a framework like MonoGame would be a better alternative to WPF. But I'm not here to preach that, I am just curious.
The comment about automating the build and push is spot on. For picking up changes quickly for local development, what I've taken to doing is creating a symlink in the nuget lib folder for the package that points to the dll in the bin of the referenced project.
Usually these are class assignments with the explicit expectation of being made in WPF. I doubt OP has much choice
True. I would love to see a well made checkers with MVVM, though, but this is usually not the goal of assignments.
I would like to suggest a very minor optimization. **If you don't choose a better algorithim this is irrelevant**, it's only a way to squeeze the very last bit of performance. So, it appears you are counting every word in the file. Assuming that the file is very big and that there are a lot of repeated words, `ContainsKey()` will usually return `true`. At this point it could make sense to assume the happy path and handle the exceptional case: ``` class WordCounter : Dictionary&lt;string, int&gt; { public new this[string key] { get { try { return base[key] } except (Keyerror) { base[key] = 0; return 0; } } set =&gt; base[key] = value; } } ``` This is a specialized dictionary that will always assume that the word is present. When it's not, it assigns it a count of 0 on the fly and then continues. ``` var counter = new WordCounter(); foreach (var word in line.Split(separators)) counter[word]++; ``` **Note that exceptions are expensive**, but this approach might make sense if you have a large file with many repeated words. Instead of paying the usually true call to ContainsKey, you just handle the rare case where it was false. The only way to make sure it's faster is to test it **using your input**, the use of exceptions might very well make it slower depending on the text.
Question: do you happen to have a list of your inputs and results? That is, the following: * A list of text novels you have (where you got them or whatnot), and * The execution times you ended up with This is a really interesting problem and one that is related to something I did for fun a while back -- I tried to come up with a fast algorithm for counting the words in a string. I'd like to tackle this over the next few days and see how efficient I can get it, but if you have a baseline I could compare to using the same inputs that would give me a starting point of comparison. (If you want, DM me; that's fine.)
This is what we do, too.
Could do with some examples of input / output
jackmott2 under my comment has the basic method of implementing it. No event systems necessary. Sure later you might add one. Or, if youre making a game, you do a loop like, foreach( var client in room ) { client.SendMessage( &lt;whatever&gt; ); }
First thing I would say is 6 seconds for that type of task isn't that slow. You're already pretty fast. You may want to run a test of how fast your hard drive can even pull those files off the hard drive and into memory just to see how far off the mark you really are. Hardware has limits. Should be fine if this is for a homework assignment. If it's for a business case though there are some improvements you could make. You could get rid of RemoveEmptyEntries and see how that improves performance. If you need to go faster you can work on streams instead of splitting the string into an array. Every string split is a (relatively) expensive operation as the runtime is constantly allocating memory, copying memory, and deallocating and garbage collecting. If you built your own routine to iterate over the string in memory without splitting it, and counting like that, it would improve speed.
I rarely had language specific questions on my interviewes. Maybe things like: struct vs class, reff vs value type, dont use lists! why?, data structures (queue, stack, list, linkedlist, binary tree..), search algorithms, complexity (big o notation), number representation (int, uint, float), maybe some theory behind architecture, i liked when they asked assembly but that is mega rare. Some tend to go into some weird theories just to see if you paid attention only to development. So things about OSes, networks, virtualization and stuff like that which is covered at most universities might come as well. Good interviewer can see past the candidates that prepared only by some preparation book. That is why avoid suggesting a single "golden bullet" book for the interview. Also, it is ok to bomb the 1st one. :) The breathing comment i liked, dont panic. For junior position mostly theory is what they can and will check. They could try some practical stuff if you say you had internship before but not in sense of scoring your experience but just to learn what you encountered untill now.
how simple was/is it to put software on the microsoft "app" store? i have a few WinForm related image programs I might wanna throw up there for free
A `Dictionary` is the obvious way. If you need performance optimisation you could look into a Trie perhaps.
Use a dictionary. Yeah, you'll have to load it up with all ~150 of your code/country combinations, but once that's done, you should be able to pull the country's name by using countries["FRA"] //returns "France" provided your dictionary's name is 'countries' and you've loaded it in the code/name combination (not name/code)
Thanks! Dictionary it is!
Thanks! I'll use a dictionary.
&gt;Search for "most common .NET interview questions" I just checked two top results for that and basically huge majority of those questions were shitty - I mean there's way more better questions to ask.
Oh yeah. But it's important to glance over them and get it all fresh in your head. For instance, maybe you realize you forgot how to really explain MVC architecture or how to do a few things in LINQ. Getting refreshed on the most common trivia style questions is very helpful so you don't sound like a total fraud. But it's important to not spend too much time. You don't need to be a trivia master. Just be good at explaining all the technologies you claim to be good at (without relying on Google) and be aware of other things that are happening in the dotnet world so you don't sound like you haven't even heard of Core.
Question for y'all out there that use azure devops in this way... Here's my workflow when I need to update a nuget: * Build the project * Update the version in the project properties * Run `nuget pack` * Run `nuget push ...` Building is easy (ctrl-shift-b in Visual Studio). The other three steps are manual... Is there a way to automate all of this without azure devops? As far as using azure devops as described mentioned above goes, is there a link to some docs which talk about how to set this sort of thing up? Does the azure devops approach take care of automatically incrementing the version number? Does azure devops also take care of uploading the resulting nuget to nuget.org?
You mention GitHub so I'll propose something a bit different: In my opinion, if work on project A is likely to cause changes in project B, A referencing B as a git submodule is much easier than dealing with nuget. Git Submodules aren't without their headaches, but this is what they were designed for. Some of the benefits: 1) The biggest is that if you say "If I need to change B then I'll just make the change and push to get a new package built then test it out in A" it's not a very fluid model to work with and it's asking developers to push untested code into B. Then that 1-3 minute turn around for CI build/package turns into 3 1-3 minute turnaround and it just feels horrible when I've tried it in the past. It's a massive productivity killer. 2) Any other options around changing csproj files, they can work, but they're very error prone. Developers aren't always great about reviewing all changes before they commit them, you're going to have developers forgetting and checking in the change to a project reference and it's going to cause build failures. 3) Using B as a submodule for A doesn't prevent you from having automated builds on B that produce nuget packages, and maybe other projects which are less likely to change B could/should refer to those 4) At some point in the development of A, if it matures and becomes less likely to cause changes in B, then you can switch A-&gt;B to a nuget package reference also Another option, I remember reading an article years ago where someone had created a tool that generated an msbuild xproj file that would replace package references with project references. They had it set up where the xproj file was on the .gitignore and if the file didn't exist, the nuget package reference was used. In this way, a developer would run a command to switch over to project references, make the changes they need, commit them, push changes, then update the nuget reference. This seemed fairly clean to me, but I can't find the article and it was a bit more complicated than I'm making it sound. So I'd still go with the git submodule route. There are some quirks with git submodules but they have gotten a lot easier to deal with in the last couple years and it feels like the quirks are easier to explain than the other options. Having used this for a few projects now, it's very intuitive. Understand what a Git Submodule in a detached head state is and how to avoid it, make sure to use the -b &lt;branch&gt; option when adding a submodule, and find a good tool that can handle submodules well. For what it's worth, VS Code is the most intuitive interface I've found for working with submodules. Open A in VS Code then switch to the version control tab and you'll see A and any submodules listed up top along with the branches they're tracking. Commit changes to the submodule, then to the parent and you're good to go.
Yeah cache misses could occur, but you forget that tokenizing the initial text is an operation that just by itself takes O(n). So regardless of cache misses, just by tokenizing the initial text into words or whatever strings he wants to, you’ll have wasted quite a lot of time on it.
Update for [AdaptiveClient](https://www.nuget.org/packages/AdaptiveClient/) released yesterday.
This sounds like a promising approach. Thanks for the detailed suggestion!
Was thinking about it, but the output is fairly dynamic so I am not sure as to how useful it would be.
You may want to try different pages instead of different windows In your main window, you create a single frame and make it fill the screen https://www.c-sharpcorner.com/UploadFile/mahesh/using-xaml-frame-in-wpf857/ Then you can create a Page for each new screen Then you set the frame.framesource to a new instance of your page You may want to hide the frame navigation bar https://stackoverflow.com/questions/3059650/how-to-hide-the-navigation-bar-in-a-wpf-page This method prevents screen flashing or window “walking”
If anyone knows of any C# projects on github that are structured this way using git submodules, consider posting a link as an example would be interesting to see. Thanks!
You could push the package to multiple sources? When I kept one of my internal libraries as a nuget package we used a local network share as a source. I also built a small CMD script that did the packaging and pushing. The script is part of the project, so could be run directly from the solution explorer. Downside is that you can't publish that solution file for the library because now it includes the needed info to push it, but if it's external to the project it could still work.
Embedded work is usually based on C/C++; with new languages like Go/Rust are much more accepted then C#/Java etc. ever will. vm langs just take too much mem/cpu resources most embedded systems have. Realtime stuff was/is tricky in .net. Microsoft doesn't push embedded c# and Oracle was too jaded to push Java. C# as gui for an industrial application is gaining traction for a while, specificly because C++/Qt devs are expensive and most companies jump on any *stable* bandwagon to lower hourly costs. The big plus here is that those conveyor belt robots, chemical machinery, lasercutters etc. need frontend coders too, and those middle level companies can't send anyone away who wants to work for them. My suggestion would be, to check if there are industrial companies in/around the cities you are in to and if they need *any* coder. Sometimes those gave up a long time ago to advertise online and you have to search for them and look on their webpages if they are currently hiring. An old colleague of mine currently living in Italy with his wife went to six meetings and is now coding C# frontends for a company doing complex industrial QA tests. Not the most "fun" thing todo, lots of interface code to binary protocols and C++/pInvoke stuff. But they have a room full wtih Vive and Rift VRs sets, so this worked out for him ;\^)
Just started writing a custom filter, so this is relevant to me as well. I will get back here if I find an answer.
Why do you deleted it? I really need help for C# Memory Editing
The second part of your comment could be as easy as changing foreach() to Parallel.foreach(). You don't even have to write any thread or async code. Parallel.foreach is synchronous and returns when all are done
TeamCity provides some of the same functionality, might want to consider TC. Works fine in visual studio.
You are correct but considering he is moving sequentially, the data will probably get prefetched into the cache.
Another way to do it instead of running the nuget commands locally is to configure inside Azure pipelines a build for the project where one of the tasks is a nuget publish command. Just update the assembly version/file version whenever you need a new package generated and then push. You can enable/disable continuous integration as well so if disabled you would need to run the build manually for an updated package to be published.
You can add a nuget source in VS which points to a local directory, or a network share, and drop your nuget packages in there. Thus project b sees the updated package instantly. You could also add a nuget.config file to you project repo which means you don't need to add it specifically to VS nuget sources.
Yes. And if he has a very small text to search, no need for any optimizations. But on large amounts of texts (like his example with the 4mb bible) the sheer amount of difference in instructions will totally outweigh any hardware optimizations that can occur (things like prefetching or cache misses due to memory segmentation due to whatever non continuous data representation he chooses for his structures). But anyway, I guess in any realistic scenario it doesn’t really matter that it’s 5 seconds or 2 seconds for a human being. So in the end, a simpler implementation might be easier to maintain. So unless the OP desires the fastest way he can deal with it or wants to try some challenge in programming, there’s little point in trying to program and optimize such an algorithm as the one I’ve provided and instead he can just stick with optimizing his current algorithm, in ways many have suggested in this thread. And in the end, regarding your points, you make good points and your suggestion is certainly more accessible than mine. I appreciate the discussion we had.
In addition to what the others have said. There's no need to read the file line by line either. Just add newlines as another word separator and read the whole file at once.
Bit vague, what are you trying to do?
It's called a monorepo in the extreme scenario; last month Microsoft opensourced BuildXL as their tool for massively parallel and concurrent builds for their monorepo.
I'm trying to get a value out of a program and copy it in to a file.
&gt; I appreciate the discussion we had. Me so did I. Apologies if I sounded rude or anything alike I didn't mean to. I find these conversations very nurturing and indeed at 5 or 2 seconds wall time doesn't really matter.
Enum + description attribute sounds like the way to go for me here
I'm not sure a switch statement isn't the right way to go - you're still going to have to load the Dictionary with all the data, and that's going to be just as cumbersome, code wise, and far less efficient in execution.
quite easy. Create a developer account (I think it's a one-time $20 fee, but I got it for free when I was a student), reserve an app name on the developer portal, then in visual studio you associate your app to that app store name, then using visual studio you package the app, then you upload and publish the app package to the store
&gt; I wonder if cache misses is going to kill you with it That's bumping up against the limits of my knowledge, I wouldn't know how to determine actual cache misses, assuming it's possible (I would guess there's hardware counters that might be accessible). I can say that Boyer-Moore routinely beats String.IndexOf by a significant margin in my experience, but the margin does decrease to insignificant as the absolute size of your haystacks or the relative size of them compared to the needles your searching for decreases. I haven't had much time to play with intrinsics, yet. They do open up some serious performance opportunities.
what parts of postman do you love? It would be great to know so I can incorporate things into Nightingale.
sounds too easy to be true tbh haha
I don't know what exactly you're going for, maybe look into calling the windows api from c# for things like calling ReadProcessMemory to read address values from your program and using a memory reader e.g. CheatEngine to find addresses, it's kind of an involved process so you'd have to do a bit of reading
Do you want to implement an algorithm yourself? (the below is assuming you do) If you know the word(s) ahead of time you can use a dictionary of letters of how many letters you can skip. For letters not in it you can skip the length of the shortest word. You basically skip to the last letter of any word and try to compare backwards for it. I forget what the algorithm is called. If you don't know the words ahead of time or it's all/any word then you can use a DFA (some regex engines uses it) to figure it out. I use this and able to calculate 100mb in &lt; 1 second on one thread.
[This repo](https://github.com/Azure/Sia-Root) is embedded as a submodule in both [this repo](https://github.com/Azure/Sia-Gateway) and [this repo](https://github.com/Azure/Sia-Playbook) and contains the data transmission models and some shared foundational code.
`grep $word $file | wc -l`
It's surprisingly easy, yeah. I should mention that the "use visual studio to package the app" step might be more complicated for a WinForms app compared to UWP. For UWP, the packaging step is just clicking one button. Not sure what would be required for WinForms
&gt; [every client can] see what every client has wrote in the stream No, that's not how it works at all. In the naive case, you'll have to read some data from one of the network streams and then loop through all the other network streams and write the data you received to each of them, that's the only way to get the data to each client. If you have complete freedom to use anything, take a look at [signalr](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-2.2). It's purpose-built for this kind of broadcast communication, and although most tutorials will reference Javascript on the client, it supports [.NET-to-.NET client-server communication](https://docs.microsoft.com/en-us/aspnet/core/signalr/dotnet-client?view=aspnetcore-2.2) as well.
Thank you so much guys for your answers! Now i've understood networkstream better and i've come up with a solution!
Yeah, I was searching for AVX**256** intrinsics for C**++** and saw that there was some for C**#**! I was super excited. Check out [this talk from Scott Meyers](https://www.youtube.com/watch?v=WDIkqP4JbkE) /u/quentech. Around **19**:00 minutes in he shows a relative speed animation. Main memory is 107 cycles, while L1 is 4 cycles, with L2 and L3 being between them. So, you can do 103 cycles of instructions instead of hitting main memory. So as an aside, its often better to use calculations rather than lookup tables nowadays. So, most CPUs do a speculative read of the next cacheline. I want to say its 64 bytes on most modern CPUS. So, if youre operating on address 0, then it does an initial load of 0-63 bytes (the current cache line), and the next cache line, 63-127 bytes. So, if your word was over 128 characters long (most likely not of course), then the CPU is going to try and read the say, 135 character and hit main memory. If youre doing this all the time, life sucks. I did a just fun test where I searched for integers in a sorted vector. I used a binary search, and a linear search. This was on a Gen1 Threadripper. In fact, Scott is talking about just that right now at **26**:00 minutes. The two searches had equal times when the vector size was 40k. I didnt expect it to be that much of a difference. I have started using blocks of 16k or 32k. Binary searching down to the linear block, then a linear. In C++ my datastructures are templated on size, so I play around size, and its almost always better to be around 16k or 32k. For C**#** I try to use structs in lists or arrays. I always have to lookup what DS is a std::vector in C#. Another thing for multicore is to make sure you have padding in your lists and/or make them a non-power of two. Because of how caches work, if you are always hitting certain values of 2 addresses away, youll hit the same cache line, and your 2 cores will actually stomp on each other and always go back to main memory. Ugh. I thought there was a tool for checking cache misses. I believe VTune does it. I havent been able to find out how to do it with AMD tools.
Really helpful, but what do i have to do to change and save those values and adresses in C#?
if you arent doing anything crazy and you're lucky enough, a call using WriteProcessMemory with some setup for it that I'm forgetting might be sufficient if what you're accessing is handled in memory in a more complicated manner then you'd have to go down a reverse engineering rabbit hole to figure it out, which I don't know all the steps for
How do you handle versioning? I would like to have semantic versioning but haven't found an easy way to do it
I'd advise to make it `static readonly` or `const` too. if its like a member/property on a class
It's geared more toward providing support to other users, rather than using a remote computer yourself. As such, here's what it can do that differs from Remote Desktop: * Join another user's session (see what they see and share control of mouse/keyboard). * Connect to machines over WAN without forwarding ports. * Send PowerShell commands and get results in real-time. For doing your work on a remote computer, Remote Desktop is hands-down better. Most other mature remote support tools (like TeamViewer) are also better in most regards (performance, features, etc.). But Remotely has a couple unique features. Plus, it's free and open-source. :)
Do you think this could be used to identify if two or more news articles are, nominally, about the same event/subject?
Instead of having A reference B by DLL, why not just use a ProjectReference? I'm talking about .net core here so not sure how different it is in .net framework. But in ProjectA.csproj, just include a `&lt;ProjectReference Include="../ProjectB/ProjectB.csproj" /&gt;` Then when you're running locally it uses the local code, not pulling from nuget. But when you publish both to nuget they will be treated as nuget references, so a remote user who pulls ProjectA from nuget will automatically know to pull ProjectB from nuget as well (`dotnet restore`will handle that)
Maybe, you could definitely feed it both articles with similar topics and it would summarize it.
Actually, you could if you just extracted all the keywords (with the library's keyword extractor) for each of the articles then did a score comparison against both sets of keywords. It would give you a rough idea how similar they are.
Plus a dictionary can easily be deserialized or parsed from an xml or json file, allowing you to add, edit and localize (change language) countries without having to recompile and redeploy your code.
Lmao, it's an exam question. There's literally no code, it's just text on a paper. But "thanks" anyway.
As others have said, a Dictionary is the right approach. Interestingly, the compiler will actually generate and use a Dictionary internally if the switch statement has more than 7 options, I think. (Source: https://stackoverflow.com/questions/3366376/are-net-switch-statements-hashed-or-indexed/3366497#3366497).
I have been experimenting with implementing a SQL-based.. err.. implementation of TF-IDF to use as a starting point, what you described sounds like a similar starting point but presumably based on an NLP mechanism? I'll check it out!
You can use SemVer 2.0 with *NuGet* 4.3.0+ currently.
If anyone cares I've made a comparison between the three methods generally discussed in the thread: Dictionary, Switch and Enum with attribute. You can find the [source here](https://gist.github.com/UndyingJellyfish/88b7e46338d99b24c71a016430b95e7f). TL;DR: Dictionary and switch seems equally performant when using integers, Enum with attribute seems to be significantly slower due to reflection.
That's sweet, the TextRankbyFrequency summarizer basically does TF-IDF, but just optimized for summarization. If you have any questions or recommendations in during your ventures, feel free to shoot me a pm.
this works only if both projects are in the same solution and both are being publish as nuget packages.
I've always considered it bad to do this if the two projects live in different git repos (or referencing any file below the root of the current repo). A new dev on the project would have to check all the projects out with the exact same naming. That's not a big ask don't get me wrong, but if feels like its wrong. What does your ci server do in this scenario?
How would that work if the case statements have to perform parameter dependent computation? Store a func in the dictionary and execute it after retrieving?
It's been a while since I've looked at the IL, but I believe it's a Dictionary of case value and program offset. The offset is the address of the code to jump to, then the 'break' is the GOTO to come back to the original method.
Do I have to use azure virtual servers with the service? I am looking for a deployment service for our .net core api project, and we already have our webservers ready on digital ocean.
That doesn't do anything for reference types.
Why not use the new SDK project format to build project B? It will automatically generate a nuget package for you post-build and the SDK project is much cleaner. After that, you can use the post-build event of project B to automatically push the package to a location. **Do not** use git submodules. Yes, many companies use them (i.e Microsoft) in a mono-repo style but they have *teams* of people to manage shit like that and you'd only be trading one set of headaches for another set.
we dont know how hes programming it. is it a customer/user/person class that he then has an instance variable of this dictionary? every new instance of that class would allocate the whatever 20 KB or less that the dictionary would require. its kind of premature optimization, but still would be the correct way to do it.
Is there somewhere I can read up on the "new SDK project format" and how to go about using it? Is it supported with .NET Framework as opposed to just .NET Core? In my particular case, I'm using .NET Framework, not .NET Core as my "project B" is actually a WPF library and while I know that there are plans for .NET Core to support WPF, my understanding is that this support is not quite in place yet.
Yeah, don't use the SDK project types for anything that uses a designer (for now) -- it doesn't support designers so unless you are 100% comfortable writing the XAML by hand don't use it. However, if you don't need a designer, all you have to do is the following: * Create a new class library using the `.NET Standard Class Library` project template (yes, standard). * Right-click on the project and click on "Edit ClassLibrary1.csproj" (or whatever your project's name is) * In the `&lt;TargetFramework&gt;` element, change its value from `netstandard2.0` (or whatever) to a valid [Target Framework Moniker (TFM)](https://docs.microsoft.com/en-us/dotnet/standard/frameworks). For example, if you want the library to target .NET 4.7.2, you'd use the TFM value of `net472`. Voila. Your library is targeting .NET Framework 4.7.2 and not standard/core/etc. You can also target *multiple* frameworks by changing the element to `&lt;TargetFrameworks&gt;` (note the plural form) and then using a list of semicolon-delimited TFM's (i.e `net472;netstandard2.0;`).
@Crippled Eye, it sounds like our interests are very similar. The MS SQL Wrapper you are looking for, you might like my project DataTier.Net as my project is 15 years old and I have been doing the exact same thing, but it creates the full data tier. &amp;#x200B; I will check out yours if you will test out mine. (sounds like what I said on the playground when I was young). &amp;#x200B; Shared Rep [https://github.com/DataJuggler/SharedRepo](https://github.com/DataJuggler/SharedRepo) &amp;#x200B; Getting Started with DataTier.Net. Create 100% stored procedure powered data tiers. [https://www.youtube.com/watch?v=GwjDKP9wLGk&amp;t=7s](https://www.youtube.com/watch?v=GwjDKP9wLGk&amp;t=7s) &amp;#x200B; Sorry to post on your topic, I looked for a way to email you on GitHub and Reddit, and all I found was to follow you on GitHub, which I did. &amp;#x200B; My contact info is listed on GitHub if you want to contact me. &amp;#x200B; Thanks, &amp;#x200B; Corby
[Here is some information regarding the SDK format](https://docs.microsoft.com/en-us/dotnet/core/tools/csproj). While it *looks* like it pertains only to .NET Core, most of that information in that link also applies to .NET Framework libraries that are using the SDK format as well. My work exclusively uses the SDK project format for libraries unless the library requires the use of the designer (i.e custom winform/wpf controls, entity framework database/model first approaches) or there is some edge-case scenario where the SDK project format can't be used.
We solved this problem with Powershell scripts. We had one main script that managed the packing, publishing, and had options for changing version numbers or building Dev vs Prod packages and what not. Then we built one off scripts for various projects that could be run with default values by devs less familiar with the options. This was an interim solution while transitioning to Dev Ops. Now we have all out repos set up to build to our private nuget repo on commit to develop or production branches.
You can create a collection, use environments, write pre requisite script for every request
This is true but if you are doing what the OP said with projects in different repos you should of never directly linked them to begin with. The only time the OP's issue comes up is when both projects are in the same repo and solution
I love this article telling us we should compile with AOT and all the reasons we should, but never once describing how to actually do that.
`static readonly` *only* really makes a difference for reference types. References types go on the heap, which add to the work the GC needs to do. Even more so for objects like array's and dictionary's as they're often large enough to go right into gen3 (large object storage, slow cleanup). Value types go on the stack so they're generally pretty safe to recreate on the fly. In PowerShell that level of optimization is pretty meaningless (especially since value types get boxed at every step) but in C# if it can be `static readonly` it definitely should be. `const` might be what you're thinking of, those can only be primitives and strings because they're encoded directly into the assembly's metadata.
Thanks for the tips. I will have a look at that industry too
Believe it's just a datatype conversion. You can check out custom code like [BigArray&lt;T&gt;](https://blogs.msdn.microsoft.com/joshwil/2005/08/10/bigarrayt-getting-around-the-2gb-array-size-limit/)
for 150 elements a trie is likely slower than a dictionary. I would even go on a ledge and say that a naive trie implementation would be slower than an array (an unsorted one). The thing is, modern CPUs are very good at processing arrays, because they are contiguous chunks of memory, you would be surprised how hard it is to beat them for under 1k elements.
I should learn Perl.
https://docs.microsoft.com/en-us/dotnet/api/system.array.length https://docs.microsoft.com/en-us/dotnet/api/system.array.longlength &gt;the **total number** of elements **in all the dimensions** of the Array. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/arrays#array-element-access &gt;Array elements are accessed using [...] an expression of type int, uint, long, ulong [...] https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element &gt;Using this element in your application configuration file enables arrays that are larger than 2 GB in size, but does not change other limits on object size or array size: &gt;The maximum number of elements in an array is UInt32.MaxValue. &gt;The maximum index in any single dimension is 2,147,483,591 (0x7FFFFFC7) for byte arrays and arrays of single-byte structures, and 2,146,435,071 (0X7FEFFFFF) for other types.
Gotcha thanks. Sounds like Nightingale checks off all those except prerequisite scripts. Although, Nightingale does have the ability to run scripts after tests are run. I'll add prequisite scripts to the backlog. Thanks!
Linear searching an array is never going to be faster than directly indexing one. And doing `x[0] - ‘A’` is going to be obviously faster than `x.GetHashCode()` So unless by ‘naive’ you mean ‘terrible’ I don’t see how you propose beating a trie with a dictionary or linear searching an array.
&gt; Linear searching an array is never going to be faster than directly indexing one. If you consider dictionary to be indexes, then I never said that, I said that a dictionary (an index) will beat tries and an array will also beat tries for a small sample count. by naive I meant a naive tree implementation where each node is a pointer to a new object. A better implementation is implementing the tree on an array rather than allowing the runtime to randomly allocate objects in memory.
&gt; Linear searching an array is never going to be faster than directly indexing one. And doing x[0] - ‘A’ is going to be obviously faster than x.GetHashCode() Slightly faster. As I said, if you have an array (in this case a string - array of chars), processing one element is almost as slow as processing the whole string (for small sized strings like OP has). But what you gain there you lose because you will have to do the x[i] - 'A' operation for each of the words letters, meaning 'n' lookups to random places in memory. A dictionary calculates the hashcode once and does very few random gets from memory.
I’m left wondering if you know what a trie is.
what ? a trie is a tree of ngrams, or parts of the word. Now you can be edgy all you want, but I dare you to implement a tree or trie that is faster than a dictionary for small samples (150).
Regex is something I would try if I was trying to get more speed, but I have found regex can sometimes be a lot slower than just coding it out. normally this happens when you have a lot to compare against and/or the match setup is large. in this case I would suspect it to be slower.
Hi Corby thanks. From what I can see [DataTier.Net](https://DataTier.Net) is a client program? Just curious are there any plans to make it an importable library / framework?
A lot of effort re-working your build chain and then re-certifying all your code through QA since things can be different in this world. I have never run across a project where having an encapsulated exe was required though I am sure it exists. The speed savings might be important to some.
Working with nuget for local references is painful. Do you have a specific requirement to use nuget locally over just project references? Unless you have a specific requirement (e.g. multiple teams interacting with the same projects) the overhead might not be work it.
The Microsoft react-native-windows repo is using submodules. See RNTester and Yoga in the directory here: [here](https://github.com/Microsoft/react-native-windows/tree/master/RNWCS)
No, I just set up a Azure VM yesterday as a build agent and it wasn't too bad. Download the agent onto your machine, run through the setup, install VS Community and you should be good to go. Here's the link https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/v2-windows?view=azure-devops I initially tried replicating what the hosted agents include, would not recommend
Are you able to share more details of the PowerShell scripts you mention? How do you deal with the fact changes to the build variables do not live past the build? Our build number format is $(major).$(minor).$(BuildId) but this is already messy with multiple solutions needing builds
I'm going to come at this from a different approach, but: are you sure that your projects concerns are separated from each other in a logical way? It seems strange to me that one project would need to cause updates in another one unless they were very closely linked. For example, my game engine may depend on a JSON parser, but I don't need to regularly update the JSON parser to implement my game (in fact, the JSON parser is probably made by someone else and NEVER needs change requests from me). Why then, if it's a separate package, do you need to update it at all when you implement a different package? It seems like it's possible concerns are getting mixed up here.
Did the article not include this when you read it? "If you would like to give CoreRT a try, you can publish your .NET Core app with CoreRT by simply adding a new NuGet package reference. Instructions for that are here."
Hey, I finally worked it out! In the end I deleted everything I took from other people and just wrote a *two-line method that did the trick. public IEnumerable&lt;IAudioSession&gt; GetAudioProcesses() { CoreAudioDevice ctrl = new CoreAudioController().DefaultPlaybackDevice; return ctrl.SessionController.ActiveSessions(); } It was so damn simple and I'm really kicking myself, but I wouldn't have figured it out if it hadn't been for the fiddling around and learning I've done the past week. From here I save the sessions and read the names to be put into combo boxes: foreach (IAudioSession session in GetAudioProcesses()) { session_list.Add(session); Process session_process = Process.GetProcessById(session.ProcessId); process_names.Add(session_process.ProcessName); } and then further down in a few nested loops the volume can be changed as a IAudioSession property: IAudioSession app = session_list[index-1]; app.Volume = val; I didn't even have to use System.Runtime.InteropServices, which literally everyone seemed to be using. Maybe I'll run into some glaring error later, but right now the whole solution is running exactly as intended, minus some aesthetic polishing. Anyway, I wanted to thank you for your help and share the critical portions of my code in case someone else comes across here looking for a similar solution.
Using CD is definitely the best way to go with your own repo. I use MyGet, they're really cheap and FAST. Combine this with GitLab's CI/CD and you're good to go.
But does it stop visual studio grinding to a snails pace?
Not really. I installed preview and it made visual studio slow as ever. I have finally uninstalled ReSharper and installed some free extensions. Visual studio is now much faster with no lags and I can get pretty much everything done with free extensions.
It says "This build supports the “async packages auto-load” API in Visual Studio 2019." Which should dramatically improve visual studio start up times.
Sadly, with filters you don't get a lot of options. This is a good write-up with different options [DI in Action Filters](https://www.devtrends.co.uk/blog/dependency-injection-in-action-filters-in-asp.net-core) However, I typically do what was noted in the latest comment - have two constructors: one without parameters and one for testing so I am able to inject the values you want. This way you don't fully hide the dependencies that are needed for your filter. In my early days though, when I did use Service Locator outside of constructor, I used similar unit testing to this [StackOverflow](https://stackoverflow.com/questions/38285815/how-to-write-unit-test-for-actionfilter-when-using-service-locator) Hope that helps.
Yes
If they are projects in the same solution just use the new SDK style csproj (you get this by creating net standard projects, even if you then change the target framework to net framework or add multiple target frameworks) and add a project reference between them. When you build the solution it will use the direct reference. When you produce nuget packages from the projects (without a nuspec file) it will create a package for each with a dependency between them. Set your versions up and upload to a nuget package server like Azure DevOps and things outside the solution can use them too. You pretty much never want to add references to actual dlls.
I’ve given up on resharper because of the speed issues. I actually don’t miss it that much.
I wonder what the use case is for this?
I gave up on resharper a while back as it always slowed vs down considerably, even on a high end machine. I now use rider which has all those lovely refactoring abilities but without the slowdown. The IDE is actually very good and I don’t miss vs.
Visual Studio has most of the refactoring and "quick fixes" that I used to use in ReSharper. It made VS slow to a halt so I stopped using it and never looked back. As easy as "Alt + ." instead of "Alt + Enter".
Start-up time is not the issue.
Believing this fights global warming in any way is very naive.
In my case, projects *A* and *B* are not in the same solution. They would also be in different github repositories (which is kinda why the git submodule idea caught my attention as a possibility).
Any change I can get a higher resolution one...?
Used the tools, I don't think they provide a better one...! :"}
In this case, project *B* is a utility library that is generally useful to various projects of mine. While developing dependent projects, I'll sometimes add to *B* based on a need, especially while *B* is in the early stages of development. Yes, eventually, once *B* is mature, the iterations will be less frequent.
It's not just a datatype conversion. A conversion from an int to a long to represent the length of an array doesn't make sense anyway.
If anything it's helping, the more power we use the more cities will build solar, wind, and hydro plants, pushing the electrical power generation efficiency forward, electric cars are helping with that, both emitting less harmful exhaust, using less gas, and using more electricity, moving the inifficient conversion from fuel to the efficient power plants, even if some of those plants are burning fossil fuels, it's more efficient then a car.
The aim for using nuget is because projects *A* and *B* are intended to be available via their own separate github repositories. So it would be awkward to tell users: &gt; download *A*, then *B*, then manually setup a project reference to *B* It's doable, but using nuget seems the normal practice for dependencies in that case.
It's a large issue for me.
I recently got a new work machine with 32GB. It's still slow to start up and visual studio tells me that resharper caused an 8 or 10 second delay or whatever. But that's the only limitation. The rest of the time using it is smooth and fast. Even when I have 4 or 5 different solutions open. So I guess the fix to resharper being a hog is to just have more power :/
Can you configure rider to use visual studio key bindings?
I use a 32GB machine and while I'm sure it's not as slow for me as it is for a good number of people. It just cannot match up to VS without resharper installed.
I'd argue the extreme and constant run-time slowness is a bigger issue than waiting a little bit longer when starting. Annoying? Absolute.
&gt; It says “This build supports the “async packages auto-load” API in Visual Studio 2019.” It better, cause that’s a warning in 2019 and will be mandatory in 2019.1.
If visual studio were 64 bit and could take advantage of all that RAM it would probably help
Yes
For most people. This is a reality of working, unfortunately. My advice outside of work is to consider making moves now while you're young to gain financial independence. I happen to enjoy my job. I find that becoming more senior has bought in further challenges that make the work more interesting - certainly as you work more closely in domain driven design etc. But you're right, working for one third of your life for 30 odd years is a long time. It will be boring for periods of time. And frustrating at others. Working for other people can at times just suck. So outside of work I invest my money to aim for early retirement - or at least to gain independence so I work on my own terms ie. Take the roles or contracts I want. There are good sub reddits that discuss this, many with people working in IT in them. Take what you will from that. Look for FI (financial independence), FIRE, personal finance. Give me a shout if want to know more.
What extensions?
We use the build in pipelines to build &amp; push our nuget packages, the only thing you do locally is up the version and push &amp;#x200B; here's a screenshot of our pipeline. If you got questions about certain aspects let me know. &amp;#x200B; [https://imgur.com/8cSpkQk](https://imgur.com/8cSpkQk)
No you don't have to use any other azure service, you can setup deployment groups, from there you can generate a ps script you can simply execute on the machine you want to add to the deployment groups and then you can configure a release pipeline to do the magic.
Very helpful, thank you!
Roselynator and codemaid
It would likely not help. The issue is that ReSharper is part of the VS main process, so ReSharper operations slow down the entirety of VS. And if ReSharper would move out of the main process, then they could be 64bit just fine.
And here I am, using SharpDevelop.
Vs is the best
Vs is 32bit by purpose. Not only because of 32bit extensions, but they said VS does not need more memory and if some extension need more API has everything to start it in separate process.
The easiest approach you could use is to call windows api features like [ReadProcessMemory](https://www.pinvoke.net/default.aspx/kernel32.readprocessmemory) and [WriteProcessMemory](https://www.pinvoke.net/default.aspx/kernel32/WriteProcessMemory.html).. &amp;#x200B; You need a basic understanding of [Pointers](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/unsafe-code-pointers/pointer-types) and how the Variables are stored in the Memory. &amp;#x200B; If you just want to play arround (in OFFLINE!, Multiplayer would be harming to others) Games like [Assault Cube](https://assault.cubers.net/download.html) you could take a look at [this](https://github.com/xAfterLife/AC-EXTERNAL) sample i posted on Github. Some other recources: [https://nullprogram.com/blog/2016/09/03/](https://nullprogram.com/blog/2016/09/03/) [https://stackoverflow.com/a/34981261](https://stackoverflow.com/a/34981261) [https://reverseengineering.stackexchange.com/questions/4625/how-to-find-functions-in-games](https://reverseengineering.stackexchange.com/questions/4625/how-to-find-functions-in-games)
It's obviously trivial as it would just be doing the exact same thing a Dictionary does -&gt; looking up a bucket in an array and then searching the bucket, except every step is more efficient than the equivalent step of the Dictionary. But I do apologize for being rude, I shouldn't be writing reddit comments when I'm in a bad mood.
They've already said that Visual Studio is 32 bit for a reason. 64 bit would slow Visual studio down. 64 bit applications don't just get access to more RAM for free, they have to use larger pointers. Larger pointers means larger data structures to represent the same data. This isn't an issue for RAM access, as you have more RAM. What you don't have is more processor cache. While in large solutions, a lot more RAM might be nice, in small solutions where visual studio can make heavy use of the processor cache effectively, you would be slowing visual studio down.
It's not entirely because "visual studio doesnt need more memory". More memory would actually help with large solutions. The problem is that the increased pointer size of 64 bit means you effectively have much less processor cache available (the cache is the same size, but a 64 bit data structure takes up more room than the same 32 bit data). This means for small solutions that cannot benefit from the extra RAM, you would be slowing visual studio down.
take a look at gitversion. it generates a semver using git history. the same commit will give you same semver. tag on release and minor auto increments. https://github.com/GitTools/GitVersion
If it in early stages of development, avoid splitting to another repository. It is only going to hurt. I use a rule of copy 3 times before thinking of pulling out the code to be shared.
&gt; As others have said, a Dictionary is the right approach. &gt; &gt; &gt; &gt; Interestingly, the compiler will actually generate and use a Dictionary internally if the switch statement has more than 7 options, I think. (Source: https://stackoverflow.com/questions/3366376/are-net-switch-statements-hashed-or-indexed/3366497#3366497). I'm sure that's how it used to work, but Roslyn does it differently now: it hashes the input string (not `.GetHashCode()`, but a similar safer slower algorithm that's stable and baked into your assembly directly), and then does something like a binary search against the pre-computed hashes of the strings in your cases. [Here's](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBLANgHwAEAGAAkIEYA6AJQFcA7DbAWxioGEIWAHPGKAGUBAN2xgYAZwDcAWABQCyknIAmUhwUBvBaT3kKK7E1IBZAIbGAFJWIBtALqlzUAOaSAlLv075+/6SSAO7YGGAAFqRWLu52xA5efgF6vsnJYOaSMKQARAASMLi4EGikQdC4ACYAhDkg3mlphADspAVFEADqFZVWHnJJjckNQxlZuQDiEBCVwACeMKU8uOYMMBi19YND/i2kUzPzMAAKK2sYfQM7w9uNY9k5AIKV2BCSpQCiLhjhmyPX5Faz1eki+UB+l3+1yh6UyD2E2Tm5lKE3MMHMf1u1z2CIAmuZUejIVidjCAvdcgAhCAMABWEDoUFKFigkkxAN2rWpdIZUBZkmJHP0ZP8FJyE1g61IdHepAAajAGDL2ULAftJRgAKqSBVKgX9EVpQ16MUTFaVUjMF4MdylABSdD4GAEKqFezN5kqABVsNb3A6nQJBarjaRKjAAGbmOi4LChzmkYhXNIAXxGae2IzspnW4RmAEleLgrDmfgWiwB5HjMGmSKgAOQg+YYuGMxlcHgcI2UpGMGDahWK3SgVT6pAAvAA+UgUZN6LOlvOVQvLEu58vLKs1hh1xvN1sMdud7uGXsmA6zBanVbrMdT0iqOekBfr5dFtdlt+b6uvHcNpstm2NrHtsPZ9qQwJvGCEIeBO04AMxPi+n4rsWi4brgW6/ruAEHkeXagae4F4gSaLmHe04oEh2zZq+qEfkuqFYbW/77kBHYEbsREmNy9KMvyFGkAArNR/i0Sh77oV+mE/ixe6AYewGcfoYHnhq2q6jKglIKJ+jiYxkl0ZWsl/vJeFKSeRjnuaPp+pIAahEGsH3s0AwpkAA) an example on SharpLab. This particular one has 7 non-`default` cases, so it computes the hash, then does essentially: if (yourHash &lt; midpoint) { if (yourHash == hash1) { if (yourStr == str1) { DoThing1(); } else { DoTheDefaultThing(); } } else if (yourHash == hash1) { if (yourStr == str2) { DoThing2(); } else { DoTheDefaultThing(); } } else if (yourHash == hash3) { if (yourStr == str3) { DoThing3(); } else { DoTheDefaultThing(); } } else { DoTheDefaultThing(); } } else { if (yourHash == hash4) { if (yourStr == str4) { DoThing4(); } else { DoTheDefaultThing(); } } else if (yourHash == hash5) { if (yourStr == str5) { DoThing5(); } else { DoTheDefaultThing(); } } else if (yourHash == hash6) { if (yourStr == str6) { DoThing6(); } else { DoTheDefaultThing(); } } else if (yourHash == hash7) { if (yourStr == str7) { DoThing6(); } else { DoTheDefaultThing(); } } else { DoTheDefaultThing(); } }
This ^^ with the caveat that symbols arnt picked up correctly so you need to point back to the originally generated pdbs to step through.
Sorry but that's bullshit. All 32-bit pointers get converted to 64-bit on a 64-bit processor anyway. So you are paying for both 32-bit representation in the code and converting (thunking) them from 32-bit pointers to 64-bit every single access. You also pay extra processing from thunking from 32-bit wrapper kernal to the actual 64-bit kernel. If you unwrap VS team's lies, you understand the real reason is the codebase is too old, too large and they are too scared to refactor and rebuild it for 64-bit. They will probably break many extensions out there and thus the real reason is laziness. VS Code has both 32-bit and 64-bit, even fucking Office has a 64-bit version. Those development teams didn't make up excuses (and the Office team has an even older codebase with even more users that wouldn't accept their cruddy spreadsheet from 1995 not opening flawlessly in 64-bit Office 2019.
I unironically love playing with benchmarks. For best results, use BenchmarkDotNet, since that tool knows how to work with the runtime (and with statistics) to make sure you get the most defensible measurements possible. I expect naive `nanoTime`-like approaches to be **especially** bad starting in .NET Core 3.0, when tiered compilation is on by default and so the benchmarks will run differently as you keep running it. Anyway, enough of that, [here's](https://gist.github.com/airbreather/187f9792c5fa88318529804ccdec4613) my update using BenchmarkDotNet, and adding a neat little thing: pre-computing the display name attribute values. Recall that enum types and their attribute values don't change throughout the lifetime of your application since they're compiled-in, and enum values are just fancy ways of spelling integers, so you can totally just pre-compute the display name values into a static array (or, if the integer values are sparse, a static dictionary).
&gt; you're still going to have to load the Dictionary with all the data FYI, this isn't true anymore (and it was never guaranteed anyway, it was always an implementation detail). Newer versions of the compiler no longer build a `Dictionary&lt;TKey, TValue&gt;`.
I'll be having to deal with this issue soon, and my research points me towards two places. 1. General hosts. The information on this is a tad sketchy on the MSDN, and I don't see many people commenting on this. Eventually this will be used by dotNET core itself (tentatively on 3.0). 2. [Hangfire](https://www.hangfire.io). This appears to be the simplest approach at the moment. I haven't crossed this bridge yet, so I can't tell you pros and cons.
I hadn't considered that you could precompute the attributes values, nice catch.
I used to have a Dell Latitute with i5 mobile processor and 8GB RAM. The only thing I changed I put a 512GB Samsung EVO 850 SSD in there. I had 2 x 1080p monitors connected via DisplayPort + the laptop one. I could open 3\~7 Massive Enterprise Visual Studio projects and mega SQL DB eating up RAM. The only extension I had was productivity tools. Smooth experience, no shitty jittering while typing or clicking on stuff. I am a contractor so I use my own equipment but people on site were forced to use Resharper and they had twice as good machines as mine. When I had to go over to help people out with some code on their machines I wanted to die of boredom because Resharper just fucking destroys the VS experience. Like it looked like it was not responding and they said that is normal.. yea sure. I get it - Resharper has nice features but I'd rather quit my contract than get forced to install that fucking CPU hog.
Are you talking about Hosted Services? There is good information on this on docs microsoft :). We used those to clean up some database data every 5 minutes, or to check if when a resource exists for 2 hours, it should be deleted. Hosted Services are great for this. We didnt use Hangfire because I believe Hosted Services are good enough.
you can skip the part &gt; Get an image from the byte array &gt; &gt;[https://stackoverflow.com/questions/9173904/byte-array-to-image-conversion](https://stackoverflow.com/questions/9173904/byte-array-to-image-conversion) because it seems like the image is already TIFF, just base64 encoded and you want to store it on disk. &amp;#x200B; So just * Get the base64 string from xml * Decode to byte array * File.WriteAllBytes("MyFile."+someExtension, bytesFromBase64)
this
Agreed. I have a large solution and I cannot even type when resharper is running. I haven't even installed resharper with VS 2019.
I doubt Microsoft is too scared or lazy - they probably to busy making money. If you really want VS 64 bit you suggest it on UserVoice.
``item.QuantityAvailableInStock - Convert.ToInt32(ProductQuantityBought.Text)`` something like this? anyway ``Where(c =&gt; c.QuantityAvailableInStock == c.QuantityAvailableInStock)`` wtf is this?
yea I mentioned that :P
They don't listen to feedback anyway, it's been going on for 10 years now. They know internally that it's the right thing to do, but like you said, they care more about money and flashy features like "Intellicode" or whatever rather than improving the technical debt of their product. That's their choice. Meanwhile C# is eroding and most new developers prefer to learn node.js or Java because MS's main advantage was better tooling which is basically gone now.
I am new to C# This is the SubmitSalesButton code here. Maybe you will understand and be able to offer a solution Thanks `private void SubmitSalesButton_Click(object sender, RoutedEventArgs e)` `{` `decimal Balance = 0;` `//Check if inputs are empty` `if (AmountPaidInput.Text != "" &amp;&amp; AmountDueDisplay.Text != "")` `{` `//Calculating the Amount due and amount paid` `decimal AmtDue = Convert.ToDecimal(AmountDueDisplay.Text);` `decimal AmtPaid = Convert.ToDecimal(AmountPaidInput.Text);` `DisplayBalance.Text = (AmtDue - AmtPaid).ToString();` `}` `//pass the calculated balance to the balance display field` `Balance = Convert.ToDecimal(DisplayBalance.Text);` &amp;#x200B; `var newSalesDate = date.ToString("F");` `var salesDetails = new SalesDetail` `{` `SalesDetailsID = SaleDetailsID,` `SalesID = SaleId,` `SalesDetailsCustomerName = AddSalesCustomerNameComboBox.Text,` `SalesProductName = AddSalesProductNameComboBox.Text,` `AmountPaid = Convert.ToDecimal(AmountPaidInput.Text),` `Balance = Balance,` `Total = TotalQtyPurchased,` `SalesDetailsDate = Convert.ToDateTime(newSalesDate),` `};` &amp;#x200B; `var StockLevel = posDBcontext.Products.Where(c =&gt; c.QuantityAvailableInStock == c.QuantityAvailableInStock).ToList();` `foreach (var item in StockLevel)` `{` `var newStock = item - Convert.ToInt32(ProductQuantityBought.Text)` `}` `posDBcontext.GetSalesDetails.Add(salesDetails);` `posDBcontext.SaveChanges();` &amp;#x200B; `AmountPaidInput.Clear();` `AmountDueDisplay.Clear();` &amp;#x200B; `SalesDatagrid.ItemsSource = null;` `SalesDatagrid.Items.Clear();` &amp;#x200B; }
Please see my edit. My information was based on a reputable source posting from within Microsoft.
Item is a product. You can't subtract integer from an object
I know that article well. That guy was considered a laughing stock back in 2009 and when he doubled down on the same bullshit a few years later. No one believed him back then either.
What would foo be in the second example? You can't instantiate static classes to this syntax would be pretty inconsistent with the rest of C#.
How can I achieve that, please? &amp;#x200B; The problem is I don't know how to do update the quantity in Product. Can you put me through? Thanks
I am using hosted services and fluent scheduler in. Net core. Working very well for us. I think you are confusing async await with long running tasks. Async await may or may not start finish on the starting task. And async await should only be used on non CPU tasks. Otherwise you get absolutely no benifit from them
I’ve had this problem and disabling code sense was the key. Don’t want two code analyzers running at the same time anyways.
Or just change the key mappings and they are exactly the same keystroke ;)
I am assuming quantity is a property on product. In that case you can do something like this. Item.quantity=item.quantity- convert.toInt(textbox.text)
Can you try changing var user = UserPrincipal.FindByIdentity(context, IdentityType.SamAccountName, userPrincipal.UserPrincipalName); for var user = UserPrincipal.FindByIdentity(context, IdentityType.SamAccountName, userPrincipal.SamAccountName);
What is the point of creating an extension method for static class. You can't create objects for it.
I've just installed it. Initial tests are that it's slow. 8750-i7 (laptop) with 16gig and SSD. I just created a new Console app a few times, reloaded it, etc, both with and without R#. &amp;#x200B; I think I've figured out most of the shortcuts I use in Resharper and how they work without Resharper, but I can't find "show current file in Solution Explorer" (Shift+Alt+L ? Bloody muscle memory). Any ideas?
&gt;var StockLevel = posDBcontext.Products.Where(c =&gt; c.QuantityAvailableInStock == c.QuantityAvailableInStock).ToList(); &gt; &gt;foreach (var item in StockLevel) &gt; &gt;{ &gt; &gt;var newStock = item - Convert.ToInt32(ProductQuantityBought.Text) &gt; &gt;} It works man Thanks
Hi, I posted a video a while back from a simulaton on an evolutionary AI ecosystem I made, and I got a lot of comments asking to make a video explaining how I did it. It took me a while to learn how to video edit, voice act, and animate, but it's finally done :P &amp;#x200B; Inpiration : [http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf](http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf) &amp;#x200B; If you want the first 1-hour video of evolution : [https://www.youtube.com/watch?v=Yh0bWODa4rs](https://www.youtube.com/watch?v=Yh0bWODa4rs) &amp;#x200B; Sorry if my english is a little broken sometimes, it's not my first language.
This actually did the trick. Thank you!
Good summary! It's always bugged me that MS picked different names for functions that everyone else seems to have agreed on.
https://hackr.io/tutorials/learn-c-sharp You might be able to get some suggestions for learning resources from here. Rest depends upon your preference.
I've seen more and more people state that they're giving up on ReSharper due to performance issues. I can't help but feel that they really dropped the ball when they decided to be stubborn and stick with their legacy codebase instead of adapting once Roslyn was released because "replacing that much code would take an enormous amount of time". Instead they go and write an entirely new IDE which I can't imagine is even a fraction as popular as ReSharper used to be. It's a shame. People love VS, people love(d) ReSharper.
Surprised what people know.
I think they did somewhat overshoot their popularity and used that as leverage to not change their code base. A lot of people have a love hate relationship with it. I like the benefits of using it but it definitely makes things slower. &amp;#x200B; I'm surprised that one, the visual studio team hasn't adopted more of what's inside resharper and two, that another team hasn't tried to replicate it within Roslyn in it's entirety.
Hangfire looks interesting, but i might just look into doing it in an Azure function.
Seems to be better suited for CRON like jobs, no?
Yea i don't fully understand async/await yet.
Give me back my downvote button. Even this sub is invaded by JS articles.
NGEN unfortunately is pretty outdated and produces executables that do not take advantage of SIMD and other fast paths. The other AOT compilation is Windows 10 exclusive. I would like to use AOT but I can only recommend JIT compilation.
Microsoft's are better. They are either plain better (Any vs some) or take the name from SQL which is far more familiar to the everyday programmer than things from functional programming languages like map.
...why?
Everyone else agreed on? Everyone else as in "javascript developers"? I mean AFAIK (and I am probably totally wrong on this), I though the updated JS array methods (which some are recently new) kinda came from the whole underscore/lodash library method names that do the same thing, especially before JS updated the array prototype.
Use an alternative client.
I mostly work on small hobby projects, therefore I didn't want to spend money on an IDE. And Visual studio always felt pretty slow compared to SharpDevelop. Since I don't need most of the features of VS, I use the lighter and faster SharpDevelop, even if it's a bit outdated.
Ha. Pretty cool. My first Pong game I wrote in Java, my second I wrote with C# and Winforms and my third I wrote with C# and XNA. What did you use for this?
I need solution analysis, go to file. And go to implementation - If I had those I’d be R# free
First, I think the value proposition for extension to static classes is small. Static members are already simply access thru the type name, like for example with a method: SomeType.SomeMethod(). The only advantage of this type of extension is simply adding new extended members to an already static class. While some people may see a little value in extending "string" with new static methods so they do have to call "StringExt.Something()" here, it's not that much of an issue I think for most people. Also what would the syntax look like. In you example, your "this" parameter type still has "foo", which seems useless as that type is static and not an instance. In this case, I guess "foo" would a alias for the life of the function. However, nothing would stop the user from not using "foo" at all, or if they need to call another method on "ExtendedStaticClass", you could just use "ExtendedStaticClass". In addition, "this" makes no sense in a static class. Also, remember extension methods are just static methods. IIRC, in the first existing example of how extension methods already work, a dev can still call MyExtensionClass.NewMethod(obs as ExtendedClass, "something here"). If something like this was to be done for static classes though. I think a different paradigm might be needed here like: **public static void NewStaticMethod(string bar) as ExtendedStaticClass.NewStaticMethod {...}** Again, I pulled that out of my ass and still do not know if the benefits outweigh the additional language complexity (on top of already is there). Ultimately, static class extensions are really just method aliases. There is still not a good reason to NOT call MyStaticExtensionClass.NewStaticMethod("something") vs. ExtendedStaticClass.NewStaticMethod("something").
This doesn't answer your questions directly, but I found that programming simple games like Pong or Tetris using C# and Winforms helped me to learn the language. The code you write will likely be shit but you'll learn a lot.
Same here
Timed hosted services are advertised by microsoft. I also thought about cron jobs first but with this solution everything is in our project with C#. No external configuration or hard to find server settings or extra knowledge is required. :)
Sync with Active Document Ctrl+[, S
Why do they still bother with this hot pile of garbage?
&gt; var list = new List&lt;int&gt;() { 1, 4, 5, 6 }; &gt; &gt; list.All(c =&gt; c &gt; 0); // true &gt; list.All(c =&gt; c &gt; 5); // false &gt; list.All(); // true &gt; new List&lt;int&gt;().All(); // true There's no parameterless `All` overload. I'm not even sure what that would mean in practice. -------------- &gt; .OrderBy() / .sort() Probably ought to also mention that LINQ's `OrderBy` is a stable-sort, whereas JavaScript's `sort` is a ¯\\\_(ツ)_/¯-sort: https://medium.com/@fsufitch/is-javascript-array-sort-stable-46b90822543f Although this is [better now](https://mathiasbynens.be/demo/sort-stability), as far as I know, there's nothing specifying this behaviour and it's purely a browser/engine implementation detail. (In contrast, LINQ's `.OrderBy` documentation _specifies explicitly_ that it's stable.) May also be worth mentioning the [`OrderByDescending`](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderbydescending) flavour and the [`.ThenBy/.ThenByDescending`](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.thenby) concepts. ------------ &gt; .FirstOrDefault() / .find() Missing an example of the parameterless `FirstOrDefault()` which is pretty useful. (Of course, we have the other flavours of this like `First`, `Last`, and `LastOrDefault`) ------------ Future entries of this blog series is going to be implementing equivalent LINQ methods in JavaScript that are missing. If one is interested in doing this, or want to understand how these LINQ methods (more or less) work, check out [Jon Skeet's Edulinq series.](https://codeblog.jonskeet.uk/category/edulinq/) I know I've plugged this a 100 times, but I highly recommend it to anyone even remotely interested in understanding LINQ a bit more. (Or even to broaden their horizons with how to use deferred execution, `yield`, or creating their own LINQ-like extensions.)
Since you seem to love javascript, you could open the console (Ctrl+Shift+i) and run this code: document.querySelectorAll('.down').forEach(x =&gt; x.style.setProperty('display', 'block')); Or, you could go into your reddit preferences and disable custom themes for subreddits.
There's no compelling argument for making VS 64 bit and quite a few arguments for not doing so. Putting work that needs extra memory in a separate process is just a much better solution all round. And C# is anything but eroding, dotnet core is awesome and getting better, C# is actually quite competitive with node on the server and microservice side again while still working really well in the Microsoft ecosystem if that's what you want. For the first time in a long time you can write great dotnet code with almost no tooling at all, and the core cli is just amazing. I barely use VS anymore for new code. And if you think tooling is the only thing making C# better than Java or that any sane developer is going anywhere near that shit, you're nuts.
Not sure if I know exactly what you mean, but Code analysis is supported through a set of extensions, allowing you to build the rules and tools specific to your need [Code analysis in Visual Studio](https://docs.microsoft.com/en-us/visualstudio/code-quality/?view=vs-2019) File &gt; Go To &gt; Go To File... Ctrl+Shift+T Go To Implementation Ctrl+F12
I was lazy in explaining it my bad.... R# allows you to jump into views / partial views / action methods. That may sound small but for an MVC app that’s so convenient for me. I don’t see go to &gt; go to file, but there’s a conflict with keystroke so maybe I do have it... hmmmmmm I’ll need to look at the code analysis. Wasn’t aware. Thanks!
Have you taken a look at VSCode? It's pretty snappy, and it gets pretty close to feature parity w/ VS (particularly w/ plugins)
The simple way would be: Mi.subject = "[Secure]" + MI.subject; Remember, the `=` sign will *always* replace what's currently in the variable/field. So in my solution, I'm replacing what's in there with a new value - but the new value *includes* the old value, just with a bit of text added on to the front of it.
You can use whatever key bindings you want.
Not yet. The last thing I made was using Winforms and Net Framework, but as soon as I get something to do with Core, I'll take a look at VScode
Thank you so much this worked perfect.
Not sure about go to &gt; go to all, but I use Edit.GoToAll in place of r# ctrl+T.
Thanks :) I think I might have found that answer but got the chord wrong. But it works :)
Yep it was in edit. Not file. Wowwww that’s awesome.
This guy is either insincere or ignorant. Ridiculous statements completely out of touch with reality.
I am now picturing the entire team in cowboy hats. Thank you, this is fantastic.
If you split them across multiple lines, they can arguably be more readable than an ´if´ statement
And VS keybindings come listed.
My god, don't do that, really, dont. the .tolist() at the end of the where(true) is essentially grabbing ALL the table product !! Never, ever do a tolist() on a DbSet without prior selection. do this instead: &amp;#x200B; I can't even help you because this code is wrong on so many level. Please, if you want help, post your true code.
I know of no native ways to get this, however, if you can get it from and environment variable, try that way. Also, the article below shows via the command line, so you could execute a command in code and read the output. https://blogs.technet.microsoft.com/markrussinovich/2009/11/03/the-machine-sid-duplication-myth-and-why-sysprep-matters/
Visual studio community edition is free
To be fair, the ReSharper internal code is a lot faster than Roslyn. The immutability that Roslyn opted for, while surely having a lot of benefits, has a severe performance drawback. But the double parsing and memory representation is killing it..
&gt; spend money on an IDE You need to keep up with the times. Visual Studio Community is free and has most features you would need any day (extensions and such).
I tried to get rid of r# this time around, but in the end came crawling back when I needed to do some refactoring. Actually performance isn't so bad with it currently. When adjusting a large and sometimes messy codebase r# still saves me a lot of time. I thought I was doing ok without it, and roslynator instead, but once I put r# back I realised all the stuff I had been missing. Even the test runner is way better than the VS one. And r# build is so much better than normal vs build because it doesn't insist on building stuff that hasn't changed (spent days trying to fix that with vs alone with only some improvement ).
Completely agree. These aren't though. I get why they're in double-ternary form, but it's still not...great. They're essentially checks to see if a ViewState is initialized, by using a ternary ViewState cast. IE: `bIsTrue = ViewState["IsTrue"] != null ? (bool.TryParse(ViewState["IsTrue"].ToString(), out _bOutput ? _bOutput : false) : false;` This is extrapolated code from our codebase, with the obvious variable changes.
It always blows my mind that IT students doing courses, have to ask for a course so they can complete their course. The school is failing here. Go [here (Microsoft Dev Essentials)](https://visualstudio.microsoft.com/dev-essentials/) and create an account. They have a lot of their own training and usually have a free trial to PluralSight, varying in length from 3-12 months.
Any alternatives of fixes*
I hate the web so much that I am about to open the Reddit client on my Windows Phone and downvote from there :)
My vs2019 is super fast to start and never lags. But i miss ReSharper.
Microsoft Virtual Academy has free courses for many aspects of C#, including courses for beginners to the language. I did the the C# for Absolute Beginners course a few years ago and it gives you enough info to start using the language and to be able to better search for solutions to issues you're having.
&gt; FYI, this isn't true anymore How is it not true? Unless there's a Dictionary&lt;CountryCode, CountryName&gt; definition, you're going to have to populate it.
Agreed, but automatically pushing on build seems a little hasty. You can add B's bin folder as a nuget package location. Then update A's installed nuget package and it will use the local bits. When you make changes like this, you'll definitely want to use continuous integration testing before each nuget push, just to make sure things don't only work because of config local to your machine.
Even that could be readable if it had even spacing. value = condition1 == true ? conditon2 == false ? option1 : option2 : condition3 == true ? option3 : option4;
I'm trying to make a skyscanner like application based off property data from different data sources around the world. I'm writing the scrapers to use AWS Lambdas to auto scrape data sources and feed the data directly into Spark cluster to format the data for quick indexing by some searching engine (thinking about Sonic atm). Currently I've only got 2 data sources working and its turning out to be a lot of work when along side a regular 9 to 5 job.
First of all you should read [this](https://weblogs.asp.net/ashben/31773). So the behavior of FileSystemWatcher is caused by how the file system is handled at a low level. Now how you solve your problem depends on your scenario. Maybe you can use the NotifyFilter to filter out events, or maybe you can wait a bit on acting on the events and discard events for the same file. Without knowing what you’re trying to do it’s hard to come up with a fitting solution.
No, I meant the other IDEs like ReSharper. I am aware that VS Community exists.
I know, I was referring to ReSharper here. VisualStudio was just too big and slow for my taste.
You could extend static classes, for example write a `Math.Clamp` Method
FileSystemWatcher can miss events (the buffer gets full) so you can't depend on it telling you what events have occurred, only that something has happened. Therefore you need code to scan the directory and compare it to the previous state no matter what. When I use FileSystemWatcher I use it to notify me that some change that I care about has occurred but not to tell me which change(s) occurred. When the event fires I always do a scan to find the changes.
NotifyFilter lets you have only some of the notifications. However... if you're watching on changes to a file being written to, you can't escape multiple changes anyhow. We use an empirically devised and configurable wait time before working with the changed file. But all the bets are off with this, so a big amount of care is needed when using the file. Then, LMGTFY... https://stackoverflow.com/questions/324258/is-there-an-equivalent-to-the-net-filesystemwatcher-in-the-linux-world.
Oh thank you. I'm trying to make a file system watcher that watches for file edit, rename, move, delete in a directory(recursively). This is the output when editing one file: Changed /home/paddi/Misc/Sync-test/4913 Changed /home/paddi/Misc/Sync-test/4913 Changed /home/paddi/Misc/Sync-test/4913 Renamed /home/paddi/Misc/Sync-test/hi.txt to /home/paddi/Misc/Sync- test/hi.txt~ Changed /home/paddi/Misc/Sync-test/hi.txt Changed /home/paddi/Misc/Sync-test/hi.txt Changed /home/paddi/Misc/Sync-test/hi.txt Changed /home/paddi/Misc/Sync-test/hi.txt~
It's not brilliant, but I think I found a way of doing it through WMI... ObjectQuery query = new ObjectQuery("SELECT SID FROM Win32_UserAccount WHERE LocalAccount = 'True'"); ManagementObjectSearcher searcher = new ManagementObjectSearcher(query); ManagementObject queryResult = searcher.Get().Cast&lt;ManagementObject&gt;().First(); string userSidStr = (string)queryResult.Properties["SID"].Value; this.localMachineSid = new SecurityIdentifier(userSidStr).AccountDomainSid; I can't see a situation where the query can return zero results ... but that kind of attitude is usually why things go wrong! Just need to check permission requirements for this.
Yup. "Some" is grammatically wrong, and "map" is just mathematical wankery. LINQ method naming is much clearer.
It's just really shitty of JetBrains to act like that's the solution. "Oh, have you tried our IDE that doesn't suck?" JetBrains could put that effort into make a decoupled/async version of Resharper (and they even said something like that was coming last year!) - but yet, we still have Resharper running in the main thread causing typing delays and all sorts of wonkery. The Visual Studio team too needs to work with big extension devs (like JetBrains) and make sure VS's APIs/etc all work better for these sorts of concerns.
If you are referring to the Product ID that is listed when you Right Click -&gt; Properties on the This PC in Windows 10. &amp;#x200B; Open up Powershell and type `Get-ComputerInfo -Property WindowsProductID` &amp;#x200B; I am doing something similar, but I launch a console and read the output after my command is issued. public static async Task&lt;string&gt; GetMachineID() { Process process = new Process(); process.EnableRaisingEvents = true; process.OutputDataReceived += new System.Diagnostics.DataReceivedEventHandler(process_OutputDataReceived); process.StartInfo.FileName = "wmic"; process.StartInfo.Arguments = "baseboard get serialnumber"; process.StartInfo.UseShellExecute = false; process.StartInfo.RedirectStandardError = true; process.StartInfo.RedirectStandardOutput = true; process.Start(); process.BeginOutputReadLine(); while(machineID == "") { await Task.Delay(100); } return machineID.Trim(); } I just don't know exactly where that would be using WMIC. I know it's in there somewhere, just ... yea. I don't know if you can grab the output from a powershell window somehow, haven't gone that far.
So you’ve got to filter those events somehow. The editor writes the contents of the document to a file with a temp name, renames the current file to be a backup file and most likely renames the temp file to be the current file. That’s how it works, so to get the result you want you have to filter the events. If you don’t want to see the temp/backup files for example, you must handle that somehow. But it all depends on exactly what output you want to see, and how fast.
Return Ok without awaiting it and it will complete on it's own. Preferably you would have that task set on another microservice, so you can perform other logic there without worrying about blocking.
C'est la vie. They always keep their courses way to basic, and some teachers are really good, they rely only on their knowledge without any support. And they forget we actually may need one, with everything to know, in case if we dont. Thanks for your answer, is really helping me.
Rx + Throttle and distinct is what you need
Just create a stored procedure do it quickly. Stop using shity imperative code To deal with database.
Well.. that was a waste of time to read. :/
After last update Rider is perfect, even UI is improved :-)
Would you happen to know how to have it remove secure from the subject line if i click on my encrypt button. Right now it just adds secure again instead of removing it.
&gt; We use an empirically devised and configurable wait time before working with the changed file. When it's a write, couldn't you keep checking until the file size is stable for (a configurable empirically determined) wait time? If you're willing to assume that the file is only being written to *once* then that wait time could be very generous, so you don't run the risk of thinking the write is done before that's really true. If you can assume that the file is write-locked, you could check if the file is *un*locked, I guess? How would you do that? Try to open an exclusive stream, or something?
I've found the best way to deal with file system watchers is to disconnect the handler when your watch event fires off and connect it again when you're done processing.
Bon chance :)
&gt; Are there any alternatives to FileSystemWatcher(that is crossplatform)? No. And even FileSystemWatcher is not at all consistent on different filesystems that Windows supports -- especially network mounts! It's not exactly a critically reliable way of handling things, and is more of a convenience/performance boost for things like GUIs that want to update thumbnails in their folder view as files change. Your better off using it as a Fast Producer / Slow Consumer pattern where you bundle up a lot of change events into the idea that a certain file has changed, but only actually look at that file a limited number of times per second/minute. The only thing that works consistently cross platform with no platform-specific code is polling, and that's a minefield of potential bad implementations and gotchas. Polling incorrectly on a network filesystem can end up being seen as a denial of service attack from the other end. Most cross-platform software that monitors files, therefore, ends up having a ton of configuration options to specify how file monitoring is done on a per folder/file basis.
Resharper is not an IDE.....
Oh, must've confused something.
I second this notion. The way I learned C# originally was through Unity, and the fact that I could make things with my code that were really fun and awesome inspired me to continue learning C# and eventually master it. Plus, most games, whilst seeming simple at a surface level, actually require some complex data structures and algorithms to function properly. The satisfaction you’ll feel when finishing a game is excellent motivation to continue learning, and it’s something easier to show to your friends (and easier for them to appreciate without programming knowledge) than a stand-alone C# console-output script might be.
The best learning experiences I've ever had coding was writing shit/mediocre code. Then when you go back to it after learning new stuff, you realize how awful it is and internalize that in an effort to not make the same mistakes again. Rinse and repeat. Even today, I go to code I wrote several months back and am like, who coded this monstrosity. All you have to do is write code and have a desire to better yourself
I wrote my own and it works flawlessly and is not event driven. Yes, I saw the issues and avoided them
&gt;And go to implementation This is already in VS 2017 though... I use it all the time.
Honest question time. Code Rush or R#? I'm conflicted.... also the price difference is significant. I don't know if I'll use most of the R# features.
A client program is probably not the right word for it; the closest competitor would be Entity Framework probably, and the client part would be the equivalent of some of the wizards I have seen for Entity Framework. &amp;#x200B; What it actually does is create a 4 project data tier from a Visual Studio multi-project template, and it code generates all the stored procedures that perform the full CRUD methods. &amp;#x200B; So the client project is used to create a data tier, and the stored procedures but then after that your projects use the output; you can update your project (build) again in DataTier.Net if you update your database again if you add or remove tables / fields, etc. &amp;#x200B; So it is more of a tool to output a data tier than a framework. &amp;#x200B; Hope that answers your question. &amp;#x200B; Thanks
I'm just going to tell my manager 2019 has the ability to offload onto that 2080 TI I submitted a requisition for. *"Yeah, boss, it's the CUDA or something..."*
File System Watchers are notoriously difficult and depend on multiple factors, including the host OS, the underlying file system, and what caused the file to change. For instance, in Windows and NTFS, changing a file will also cause a metadata update to the parent folder for metadata calculations (update times, for example). If you have a file change due to Office, there are multiple files changed (Office temp file edit, original file delete, rename temp file to original file, delete temp file, parent folder metadata update). There aren't easy solutions to watching for file changes...and even fewer than can be done generically in the Watcher itself. The best solution, from experience writing FSW for the .NET framework and working internally at MSFT writing other FSWs, is to use the events from the FSW as hints to what happened and drive logic from that. Don't take the FSW as the whole truth since each OS and file system has nuances that cause issues. If you're only watching a small directory, you can do a full re-sync pretty quickly (ie iterate over each file / folder to re-sync your view of the world), but if you have a large directory (thousands of files / folders) then you need to get more creative
\&gt; Even when I have 4 or 5 different solutions open. Actually this makes things faster since you have 4-5 instances running in parallel instead of one single solution process to do everything.
Not sure why you got downvoted. It's literally the best way of dealing with FileSystemWatcher spamming multiple events for the same action.
Just as a note, Azure Functions has a max runtime length of ten minutes. If your long running task goes over that, you will see an exception in App Insights
If you have the possibility of using .NET Core you could check out the Core teams experimental implementation of a file system watcher. It seems to be more reliable and has a better API. Source: https://github.com/dotnet/corefxlab/tree/master/src/System.IO.FileSystem.Watcher.Polling
Expect to get grilled on MVVM. Know the separation of concerns for what should be in the view, viewmodel and models. Since there is debate on whether or not there should be code in the code behind for the view be prepared to discuss that. &amp;#x200B; Personally I wouldn't be asking any tricky WPF stuff in an interview, but more fundamentals like what a datacontext is and how/why you use one and how to do a binding. If the job involves creating/maintaining WPF controls then I might go into the differences between a FrameworkElement and a Panel, the Visual Tree, the Logical Tree and how WPF handles element arrangement, layout and rendering.
Wow, nice! I am actually using dotnet core! Thanks
&gt; You can't subtract integer from an object I'm not sorry. void Main() { var product = new Product { Quantity = 10 }; Console.WriteLine((product - 1).Quantity); Console.WriteLine((product + 1).Quantity); Console.WriteLine((product * 2).Quantity); Console.WriteLine((product / 2).Quantity); } public class Product { public int Quantity; public static Product operator -(Product a, int b) { a.Quantity -= b; return a; } public static Product operator +(Product a, int b) { a.Quantity += b; return a; } public static Product operator *(Product a, int b) { a.Quantity *= b; return a; } public static Product operator /(Product a, int b) { a.Quantity /= b; return a; } } &gt; 9 &gt; &gt; 10 &gt; &gt; 20 &gt; &gt; 10 Okay ... maybe a little.
Right, just introduce a huge maintenance headache without knowing their use case.
 I don't see how you could learn 3 languages not understand the fundamentals of loops?
 `private void SubmitSalesButton_Click(object sender, RoutedEventArgs e)` `{` &amp;#x200B; `decimal Balance = 0;` `//Check if inputs are empty` `if (AmountPaidInput.Text != "" &amp;&amp; AmountDueDisplay.Text != "")` `{` `//Calculating the Amount due and amouunt paid` `decimal AmtDue = Convert.ToDecimal(AmountDueDisplay.Text);` `decimal AmtPaid = Convert.ToDecimal(AmountPaidInput.Text);` `DisplayBalance.Text = (AmtDue - AmtPaid).ToString();` `}` &amp;#x200B; `//pass the calculated balance to the balance variable` `Balance = Convert.ToDecimal(DisplayBalance.Text);` &amp;#x200B; `//get current date` `var newSalesDate = date.ToString("F");` `var salesDetails = new SalesDetail` `{` `SalesDetailsID = SaleDetailsID,` `SalesID = SaleId,` `SalesDetailsCustomerName = AddSalesCustomerNameComboBox.Text,` `SalesProductName = AddSalesProductNameComboBox.Text,` `AmountPaid = Convert.ToDecimal(AmountPaidInput.Text),` `Balance = Balance,` `Total = TotalQtyPurchased,` `SalesDetailsDate = Convert.ToDateTime(newSalesDate),` `QuantityPuchased = Convert.ToInt32(ProductQuantityBought.Text),` &amp;#x200B; `};` `posDBcontext.GetSalesDetails.Add(salesDetails);` `posDBcontext.SaveChanges();` &amp;#x200B; `var StockLevel = posDBcontext.Products.Where(c =&gt; c.ProductID == c.QuantityAvailableInStock).ToList();` `foreach (var item in StockLevel)` `{` `item.QuantityAvailableInStock = item.QuantityAvailableInStock - Convert.ToInt32(ProductQuantityBought.Text);` `posDBcontext.SaveChanges();` `}` `AmountPaidInput.Clear();` `AmountDueDisplay.Clear()` &amp;#x200B; `SalesDatagrid.ItemsSource = null;` `SalesDatagrid.Items.Clear();` &amp;#x200B; `}`
I will appreciate if I can get resources on how to build a better POS with C# I am a rookie in C#
I really want the ability to declare functions as `readonly` in C#, like `const` in C++. I know they added the `PureAttribute` to achieve similar effects, but it's not enforced by compiler. :(
When an application is running it stores a lot of state information in system memory. Memory Editing is accessing that state information and manipulating it through a source that is not the original application. In order to be able to do it effectively without simply crashing the application you have to know specifically what segments of memory you want to alter and you also need to know if there are any other segments related to that segment that you have to alter... for example, if there is a header that states... the next 30 bytes are the players name and you modify that so the player name is only 20 bytes or is 40 bytes you still have an issue and will proabibly crash the application. &amp;#x200B; So... you need to first watch the memory... put data that is easily identifiable as various values and look for those values in memory... example... if you are able to specify a numeric value and you supply the value 3,735,928,559 you can look in memory for the hex value DEADBEEF Once you find a set of memory locations that MIGHT be the memory you want to alter you have to manipulate the data in the application and ensure that the data segment you are looking at updates accordingly. &amp;#x200B; At the end you might figure out that MyGame.exe always stores the players hitpoints at offset 0xAxb23420 so you can then write an application where you hit a button, it goes into the applications memory in the system and updates that offset to int.maxvalue and boom you have a health cheat. &amp;#x200B; You might also find that at offset R is where the players inventory header is stored... it might have a value of 10 indiciating you have 10 items in your inventory... you can then use that information to remove an item from inventory (decrease the value and delete one of the item data segments that followed), add an item to your inventory (increase the value and add more data after the last defined item) or modify an item (leave the value alone, but change the definition of one of the item in your inventory)... &amp;#x200B; You can look for the memory location that stores your gold value and manipulate that... &amp;#x200B; This only works on single player games. In a multiplayer game, you might find a memory location that stores those values... but they are for display purposes only... that actual value used in the game is stored on the multiplayer server.
The trick to not missing FileSystemWatcher events is to have event handlers that do nothing but post the handling action to a dedicated Dispatcher thread - this ensures the buffer never fills up. When I implemented this technique I went from losing events at 50~ simultaneous file changes to not missing a single event when 3000 files are deleted together. See here for more info https://stackoverflow.com/a/35432077
Queue them to a fifo queue and then use a consumer producer pattern....
I knew itiration and loops, almost never used them though. I never saw much utility in them until I learned sorting methods and other things that showed me their utility. Also if you knew my background I think itd make more sense... Arduino and game development are two places where you can get away with almost never writing a loop. Maybe an easy coroutine and loop for health regen, but nothing crazy.
 The entirety of a game engine is a massive loop of different sequenced events?
Just a couple of ideas, looking at the small set of words you want to keep track of ( 'a', 'the', 'he', ...): 1. You could look at the maximum length of the words you are tracking , e.g. 'the' is a 3 characters word. Then in your loop for 'fileWord in fileWords' you could check for the length of 'fileWord' before checking the whether the word is in the "words' list. 2. If you are tracking a lots of words, maybe having one dictionary instance for the tracked words per length could be another approach. &amp;#x200B; Here is a quick amended sample based off your code and observation 1: private static void CountWords(FileInfo[] files, Dictionary&lt;string, int&gt; wordsBeenTracked, char[] separators) { int maxTrackedWordLength = wordsBeenTracked.Keys.Max(k =&gt; k.Length); foreach(FileInfo fileInfo in files) { using (var fileStream = fileInfo.Open(FileMode.Open, FileAccess.Read)) using (var streamReader = new StreamReader(fileStream)) { string line; while ((line = streamReader.ReadLine()) != null) { var fileWords = line.Split(separators, StringSplitOptions.RemoveEmptyEntries); foreach(string word in fileWords) { if (word.Length &gt; maxTrackedWordLength) continue; int currentTimes = 0; if (wordsBeenTracked.TryGetValue(word, out currentTimes)) { wordsBeenTracked[word] = currentTimes + 1; } } } } } } Using the bible text file of 4.2Mb by using that check I gained about 20ms (from 130ms to 109ms).
What’s the itemsource of the data ? So I mean which kind of data structure do you have ?
I also use "Rosylnator" that has a lot of resharper features for free in it anyways https://github.com/JosefPihrt/Roslynator
Sounds interesting. Can you expand on this please? Thanks.
I‘m new to programming and I‘m not sure what this means, but I am filling the listview with strings, DateTime‘s and int‘s.
Are you / the user able to change the data in the list view ? So for example change the name, date, etc Can you show the code where you fill the data to the listview ?
Like this? :o) void Main() { var x = System.Math.Abs(-10); var min = 15; var max = 20; Console.WriteLine(Math.Clamp(x, min, max)); } public static class Math { public static int Clamp(int input, int min, int max) =&gt; input &gt; min ? input &lt; max ? input : max : min; }
Well.. sometimes stuff is boring. That's just the reality of it. There might not be a lot of opportunities out there where a fair bit of grunt work is uncommon. People pay you to provide value for them - not to feel good about your self fulfillment. You can always fall back to putting products on shelves in a super market if you need a refresher on how boring a boring job can be. Okay. Maybe I'm a bit grumpy because I can feel with you and find my job a bit boring at times too. But I do need the money and my employer pays well and the colleagues are great. That said: what do you do in your free time? I found that working on other stuff and learning on the side has brought me quite a bit of joy and has made coping with stretches of rather less interesting or frustrating activities at work quite a bit more bearable! As far as Unity goes: There a some opportunities in the Automotive sector. They are building configurator VR apps for customers, autonomous driving world models for their testing and more. I would also not discount working on enterprise desktop apps and clients. There is quite a bit to learn in those codebase and environments. They are often the complete counterpart of the stateless Web-API world that you know and provide a unique set of challenges. There are quite a few legacy codebases out there that can and will challenge/torture you in ways you could not even begin to imagine. But I don't know if this is the kind of thing that you would find interesting or rather frustrating. Either way: good luck!
No, the User can‘t change it. You can find the code on [github](https://github.com/gillohner/modul-318-student/blob/master/TransportAPP_GUI/Form1.cs) in the method connection.
I dropped using r#, but since vs2019 came out, r# feels a lot! Faster. Probably due to async loading, and I think offloading work to a non ui thread.
I really really really would like free standing functions in C# after learning some functional programming. F# (and even JS), and a bunch of others, let you declare a function on it's own. Not as part of a class. I think this would be great for those pure functions that you currently have to write a pointless static class that is usually named something irritating like `CalculationHelper`. Imagine this - AgeDifference.cs: namespace MyApp.Whatever.Functions { public/internal* AgeDifference(int firstAge, int secondAge) =&gt; secondAge - firstAge; } *public or internal are, I believe, the only accessibility modifiers that would make sense: Either you want it to be public or you want it restricted to their assembly. We have the start of this with local functions.
Thank you for making this! I can't wait to see where it leads. Bibite 2020!
We are slowly getting into a zone of stability where some major key frameworks stick around without too much drastic changes. The sentiment is still somewhat true. In web development there seems to be a new trend every month. Be it utility based css, hating bootstrap or jQuery, using all native CSS or writing and styling HTML code in JS. Those might be old news to you, but if so that just proves my point. Web development, except the fundamentals, is quite a volatile beast. And that's okay.
SignalR actually does that too, as a fallback when websockets arent available. Websockets was a newer technology that not all browsers supported at a certain time. Like you said, JS could be used to long poll a server for any new messages. It would depend on the implementation for how the messages were stored and retrieved.
I wouldn't personally, i would use the decorator pattern. So you would have an interface that has a request handling method something like `TResponse Handle(TRequest request);` lets call it `IRequestHandler&lt;TRequest, TResponse&gt;` One implementation handles the API request with the constructor taking whatever it needs to call the API, it sends the request and returns the response. The next implementation is constructed with whatever you need to persist the response and an IRequestHandler(in this case the implementation that sends the request), all it does is call the IRequestHandler then persist and forward the response back to the caller. The final usage of the API sees that IRequestHandler interface and has no idea what's going on behind the scenes.
Everything I write always has a static Misc class with all my stand alone functions in it. Not ideal but close.
I've tried that in the past and have found that running tasks without awaiting them can lead to some issues with scoped dependencies as the scope(the request) can be disposed before everything is done.
[CppSharp](https://github.com/mono/CppSharp) might help.
Be careful with it. Particularly if you have any anti-virus software running or other software that manages the file system on the machine. It may miss events or change to an event that you would not expect.
Looks promising, I'll start reading. Thanks! &amp;#x200B; I had originally gone down the C++/CLI route, but learned along the way that the CLI is not actually supported xplatform on Net Core -- so nope.
Yeah. P/Invoke is the way to go, and CppSharp should be able to generate P/Invoke bindings for you. Or if the native library's API is simple enough, you could do it by hand. It's not terribly hard. [Here's some docs](https://docs.microsoft.com/en-us/dotnet/standard/native-interop/).
I wonder if any /r/csharp posters here speak/are viet and can give you a good source in that language. Maybe chinese (mandarin?) would be a good alternative. https://docs.microsoft.com/zh-cn/aspnet/mvc/overview/getting-started/introduction/getting-started
Scores is a list of double. The .Text property of textbox2 is a string. If your intention was to enter a list of scores in that textbox and then parse them into the list, you'll need some code to handle that. You need to break that string into numbers that can be converted to doubles and placed into the list.
So like use a for each and convert them into a string? Also would this be in the student class?
The Student class wants a list of double. I'd make it the responsibility of your form to provide it. Look into the Split method of the string object and the Parse method of the double object.
Thanks, the generator looks promising. &amp;#x200B; Re MSDN Docs: Indeed the API surface is only 20 or so functions, an enum or two, some structs. I could push through by hand, but it's been almost a decade since I've played with C++, so I don't much trust myself. :)
I will recommend C# Fundamentals for Absolute Beginners [https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC\_2706218949](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949)
I had to look in my Murach's book to understand the parse and split. But I am not sure I am picking up what you're throwing down. It seems within the Tag = new Student { } I have to have the Scores to start code. (besides the FullName = textbox1.Text, ). Like below Scores = ... I have tried: Scores = Double.parse(textbox2.Text.Split(",")) Scores = Convert.ToDouble. Scores = double.Parse(textbox2.text.toString()) &lt;-- cannot implicitly convert type 'double' to sys.coll.gener.list&lt;double&gt;' &amp;#x200B; &amp;#x200B; Not sure if you have another hint :\[\] I can't find much on stack overflow that says that error msg.
Pffft. Back in my day, you had multiple frames for each part of the chat with an auto refresh. And that was when they were feeling fancy!! *rocks chair*
Typing on my phone so this won’t format right, but something like this: string[] temp = textbox2.Text.Split(‘,’); Scores = temp.Select(x =&gt; double.Parse(x)).ToArray(); So what we’ve done is split the text box data into an array on the commas. The next line uses LINQ to iterate through the array and convert each value into a double. That said, this is not great code. It will fail if .Text is null or if any of the elements of the array can’t be parsed into a double. And if your professor isn’t happy with using LINQ, you need to turn my second line into a for loop.
I highly recommend downloading [LINQPad](https://www.linqpad.net/) to aid in learning C#. It's a great sandbox and prototyping tool for getting immediate feedback on language concepts outside of a project/solution. Good luck!
Yes I thought for a while to work as a Freelancer/Contractor but that's a bit complicated now I've many things to take care to move back to Europe. Also it seems to me quite stressful, I don't have enough confidence in myself to do that now. And last thing, I like going to the office because I'm more motivated to work in such environment separated from my home and private life.
Thanks for the advises on financial independence. For a while I thought about becoming a Freelancer/Contractor but it's quite scary, I don't have the guts to do that. I lack of self confidence in myself to do that honestly even though I think I'm doing great at my job
Yeah that's something I also want. F# does it by creating an implicit class where to put your functions when you create a module. Kotlin does something similar using the package name. Honestly it would be great for C# to reduce it's verbosity if they truly want it to be a multiparadigm language.
 using static Prelude;
Yeah, I think this is as close as you can get in C# right now. I do this too. I haven't seen a better way yet. I'm still with OP above you though - I'd love to have functions that aren't stuck on a class. Even if the compiler has to translate it into a static class to make it work.
I would suggest you start with Hangfire. It is pretty bloody simple and doesn't come with the deployment complexity of azure functions. Hosted Services looks interesting, but I haven't had a chance to play with that yet.
The problem I've seen with most tut's, books, and courses is they rarely teach unit testing *as they code*. Unit testing feels more like an after-thought.
I've used your member variable 't'. You would only save an variable of the generated CSV string in the Connect method. &amp;#x200B; Afterwards just add a Button\_Click Handler for your new button where you can retreive the generated data. I've not included error handling so you have to think about that aswell. public string CreateCSVData(string departureStation, string targetStation, char seperator = ',') { string row = string.Empty; var sb = new StringBuilder(); Connections connections = t.GetConnections(departureStation, targetStation); foreach (var cn in connections.ConnectionList) { row = CreateCSVRow(cn, seperator); sb.AppendLine(row); } return sb.ToString(); } public string CreateCSVRow(Connection cn, char seperator = ',') { char sc = seperator; var sb = new StringBuilder(); var departure = DepartureDateTime.Parse(connection.From.Departure); var arrival = DateTime.Parse(connection.To.Arrival); sb.Append(departure.ToShortTimeString() + sp); sb.Append(arrival.ToShortTimeString() + sp); sb.Append(cn.From.Station.Name + sp); sb.Append(cn.From.Platform + sp); sb.Append(cn.To.Station.Name + sp); sb.Append(cn.To.Platform + sp); sb.Append(cn.Duration); if(cn.To.Delay != null) { sb.Append(sp + cn.From.Delay); } return sb.ToString(); } Best regards, Max
Thanks for your answer. On my free time I have many outdoor sport activities and now that I'm married life has become quite... busy Beside all of that I try to find few hours here and there to learn Embedded programming on ARM microcontrollers but those moments are very rare and I'm not learning at the pace I'd like. Thanks for your thoughts on Unity and enterprise desktop applications. Any information like this helps me picture the whole C# world.
You usually don’t actually convert the object to xml yourself, you return the object from the service and the framework does the serialization for you.
Just don't do it, after 10 years of c# development you will gain nothing and only make debugging more difficult
When you import a wsdl through add service reference, visual studio generates some code that sits on top of the windows communication foundation (wcf) which handles taking an object and converting it to xml. This makes it nice and easy to work with soap web services.
Right now I try to avoid those by using extension methods whenever possible. It just results in a cleaner syntax to right int.Add(int) than CalculationHelper.Add(int, int).
This post is now the first result from Reddit on Google. And some people actually look at the date posted when searching for stuff like this, because technology moves fast. You might get tired and sick of seeing posts like this, but to outsiders, we get tired and sick of seeing responses like "this has been posted a million times already! Read the sticky plz!"
You could also add an initializer for Scores to new List&lt;double&gt; so you could have a student without having to immediately parse scores.
The web used to be built primarily off real-time gifsockets. https://github.com/videlalvaro/gifsockets
As an OOP developer by heart, I totally agree. Debugging a functional app (however mine was in JS), was so hard and near impossible without third party tools (resharper again?). But now whenever I am doing any sort of View/Controller type work, I am still making short immutable functions so I can maintain logic outside the view as much as I can. It is so much easier to maintain a namespace with functions that literally have one use.
Then file changes while handler was disconnected, event is lost and developer spends months looking for the bug.
Functional concepts truly make code bases more testable and the intent far more clear. One thing I wish C# had was an [Immutable] attribute. This would be for classes whose attributes can only be set via the constructor and would be enforced at compile time. Possibly not practical but would provide a way to enforce some basic functional paradigms.
The very first thing I do after creating a new C# project is installing the language-ext nuget package.
I recently tried using VS19 without R# (with all the "You don't need R# anymore"-memes in this sub) and I ended up switching to Rider as well. I have some publishing problems, but without any extensions, VS19 is fast enough to just load it to publish ;)
It could work. Give the student a template that already has the nuget packages and a test fixture and then talk them through running the tests. It might be more complicated if you have to support command line test runners, VSCode and VS though.
You could always just mark every field as read-only, and in the latest C# version you have readonly structs.
I hadn’t seen the readonly structs but that sounds quite promising! My only issue with marking every field as readonly is that it is so easy to miss a non-readonly field being added down the line. Admittedly the same thing could happen by removing the proposed attribute but it would be a bit more obvious in a PR
You could use long polling etc. The client makes a request. The server keeps that request open until there is data to return or it tmes out. Repeat. Alternatively, you could use a Java applet or similar then use normal sockets.
Never used that generator but I'm sure you should still look through what is generated carefully e.g. is a char* an IntPtr or a LPStr?
Thanks! I‘il try it out today
I made a simple test where it would log after 3 seconds, however it didn't. I also got a warning saying without await it would runsynchrounously
This sub needs to stop helping people with their homework. It's nice that the members are nice, but we need to down vote posts like this. Get tutoring, that's what it's there for.
Also have a look at SWIG. I personally had better results than with CppSharp.
Denouncing (last event in n seconds) would be better than throttling (up to n events in n seconds).
I like it. You've covered everything well. You touched on testing and I think this is really important. One of the things I try and discourage is the excessive use of mocks (any use of mocks if feasible, but it isn't when you reach the boundary). The boundary includes the obvious things like databases, but also dates. DateTime.Now is a boundary service. You don't need to use functional patterns to make this testing approach work, but it does encourage it. One niggle, I'd change the example in the "Expression Instead of Statements" section. It's contrived as it should have been written: public static string GetSalutation(int hour) { if (hour &lt; 12) return "Good Morning"; else return "Good Afternoon"; } If it looked like that the premise breaks.
I would say yes, or use a bastardised version of Mediator which would involve messaging. In messaging you have a Messenger class which does only two things: Allow classes to send messages, and allow classes to register to receive messages. Your API calling class calls the Messenger's Send method with a message that encapsulates the API result. Then your persistence class listens for that message and acts accordingly. It's a nice pattern because any class can listen to any message, so in this example your API call message can be listened to by an entirely unrelated class that maintains aggregates of the API call data for example. For your example a more simple Mediator would work just as well. The interesting thing is that all the examples are a bit crap. I would probably write it more like this: public interface IApiData { int Result {get;} } public interface IPersist { void Persist(IApiData data); } public class Api { private IPersist _persist; public Api(IPersist persist) { _persist = persist; } public void Fetch() { _ApiData result = // go get the data. _persist.Persist(result); } } This gives you the I and D parts of SOLID as well. I've left out the implementation of IPersist because that's your mediator and does whatever the mediator does, write the result to a database and file.
They are not related. Mediator is a pattern of design where you route each "command" through a single "mediator", which initializes a handler for said command to complete whatever business logic is required for each command.
Good article, even though the author is biased in favor of functional programming, they're very honest about the drawbacks. The biggest one for me though is all the construction and destruction of entities with each function call... That has to be a major performance bottleneck in certain cases.
``` // consider using a constant for the text instead const string text = "[Secure] "; // add text // character '!' stands for not if (!Misubject.StartsWith("[Secure] ")) Misubject = "[Secure] " + Misubject; // remove text if (Misubject.StartsWith("[Secure] ")) { Misubject = Misubject.Replace("[Secure] ", ""); } // both 'if (..)' statements can use either form, with or without '{..}' ```
Marking the strict readonly makes the compiler enforce readonly on fields.
No school should be teaching Pascal these days but I have a feeling why it was offered to you. A few years back I walked through that large book store on Nguyen Hue in D1 in Saigon, looking through the science and other non fiction titles it was like I was thrown back into the 80s. Luckily you have the internet.
\&gt; My only issue with marking every field as readonly is that it is so easy to miss a non-readonly field being added down the line. Mark these classes with an attribute then use a unit test that checks all fields in classes with that attribute are readonly.
Get the CSV Helper library on nuget. Since you know what data is filling the listview. Simply send that data through CSV Helper. If the listview data can be sorted for example, keep track of the sort order for your non-listview'd copy of your data
I think it's just badly written. To summarise his points (hopefully more clearly) * His desktop app game had some code which looked like it might benefit from a mediator. * His mentor said it is not using the mediator pattern, but more like a controller. &amp;#x200B; I don't know anything about JavaFX (Java UI framework for desktops), but in .NET land we use patterns like MVVM, MVP and MVC. The Mediator-alike he seems to be describing is similar to a messenger. Messengers simply accept messages from one component to any other component that is subscribed to it. Messengers are very useful for UI work. Messenger isn't strictly mediator imo, but I think the distinction is moot.
Ok, this is epic
I have been working on my first actual project. I did a little HTML and Java (i think it was, can't remember) in a community college IT course I did nearly 20 years ago, and more recently in the last 6 months since I started learning again, I've done some simple scripts and other super simple learning begginer type stuff, otherwise I've only really been learning programming half-seriously for about 6 months; mostly in my spare time while I maintain a full time job (Who, a couple of these scripts have been put into production and used regularly by staff, WIN!) I decided that I want to go remote in the future, and learning programming is something that I really enjoy doing and has the best possibilities for remote work going forward. (and thanks, but I don't need the lecture on how a JNR will never go remote. I've got this) The company I work for is a business that produces spatial data from LiDAR. We essentially fly fixed-wing aircraft and measures/maps places and features from a fancy laser that produces 3D models. This data comes back to the office and is processed through a range a software to produce some really cool products used in mining, forestry, main roads etc etc. (I know, cool job right? Really landed on my feet with this one!) What I am working on is a web-app that takes an XML varient of logged flight data and parses that into a DB (Full disclosure, I didn't write the parser, it already existed. Though, I had already written one in python before changing to C#), then, draws from the DB and shows a map of the country (Leaflet.js) and displays a searchable table (datatable, jquery, ajax) and displays flight runs and metadata like job names, aircraft, altitude, capture speeds and associated data on the map. The data will help staff make decisions about how best and where to process the data for map projections etc. The app is an C# MVC app on Entity framework with code-first migrations. I started this project with only a little Python experience and I had this great idea that I thought might help my employer and the staff, my long term goal is to get a jnr dev. position with this business, so I thought I'll attempt something ambitious. I had zero idea where to start and I posted [this](https://stackoverflow.com/questions/54319492/mapping-project-i-want-to-show-kml-files-on-a-map-and-be-able-to-sort-them-bas/54327412#54327412) to stackoverflow and a nice guy called [Istopopoki](https://stackoverflow.com/users/1892308/istopopoki) (shoutout dude, seriously!) posted a really motivating comment: *"If you manage to get this project done...you definitely deserve that junior dev position."* So I bit off more than I can chew, and started chewing like buggery! I really didn't know how much I was getting in for, after spending a few weeks on Django and Python, someone at work talked me into using C#, so I took a bit of time off the project to start learning C#. I quickly got hooked on it and now I love it, I'm still shit, but I love it. I know it's probably not much to a lot of people here, but I've worked really hard on this, and had to learn a shitload of stuff I never previously knew existed (DB, Ajax, JQuery, MVC, Github) It needs a bit of tidying/prettying up and some added functionality which is planned, but people in the office seem really interested in the project and I think it will help production staff a lot. So I'm super proud of it and I can't wait ot finish it! It's been an emotional rollercoaster. Lol. [https://github.com/PaulVidler/Aerometrex\_Flight\_Lines](https://github.com/PaulVidler/Aerometrex_Flight_Lines) &amp;#x200B; TLDR; 38yo inept programmer bites off more than he can chew and has almost pulled it off. Wait, are these supposed to be in 3rd person? I guess he'll never know...
[It's part of the newer Windows crypto API](https://docs.microsoft.com/en-us/windows/desktop/api/bcrypt/) (and has nothing to do with the bcrypt algorithm that most Google results are probably for). Microsoft actually open-sourced [some of their crypto stuff](https://github.com/Microsoft/SymCrypt) a couple of days ago, but I don't know what the overlap between bcrypt/CNG/SymCrypt is. Probably also depends on the Windows version. .NET Core uses different native APIs for cryptography depending on the platform, including OpenSSL. I don't think anything notable happened on the managed side of things, other than adding some `Span&lt;T&gt;` overloads to the interop code.
I'm sure I don't know as much about the subject as some, but I wrote a paper recently analyzing different RNG implementations and found the same forwarding for [`RNGCryptoServiceProvider`](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=netframework-4.8) (note `System.Random` is purely managed and does no forwarding). It does indeed forward to `bcrypt.dll`, which is a Windows component and closed-source (you should be able to find this dll in your System32 folder). In the RNG case, it calls [`BCryptGenRandom()`](https://docs.microsoft.com/en-us/windows/desktop/api/bcrypt/nf-bcrypt-bcryptgenrandom) to get the bytes. Looking through it the same happens for `SHA256` and even `SHA256Managed`, calling the [`BCryptHashData()`](https://docs.microsoft.com/en-us/windows/desktop/api/bcrypt/nf-bcrypt-bcrypthashdata) function. Note that for obvious reasons BCrypt is only used when running under Windows. On Linux, from what I can tell, the same functions are forwarded to OpenSSL
I was trying to find an actual code that performs the hash function itself. Trying to figure out why my code runs 10% faster than framework's implementation specially if it is calling a native c code (I know I'm not *that* good!).
T4Editor =&gt; [https://marketplace.visualstudio.com/items?itemName=TimMaes.t4editor](https://marketplace.visualstudio.com/items?itemName=TimMaes.t4editor) It only highlights control blocks, class feature blocks and directives, but it's easier to see what's output and whats control block logic.
Old timer you made me lol! How about dial-up BBS...
We have readonly structs (C# 7.2), so maybe the same will happen to classes.
Is this for real? It sounds like trolling, but at the same time an awesome workaround... Mind blowing 🤯🤯
Well... With sockets and threads probably
This is a bad design. Operator overloading should be used very carefully in real life projects. It is often used with value type objects such as Age for example where it makes intuitive sense. Product is not a good candidate for that. Why not have methods to do the operations on quantity of product. Remember just because you can doesn't mean you should.
Nah, you're comparing a pattern and a language feature.
Unfortunately the product ID is something different. When the OS is installed or SysPrep'd, a base SID is generated for the machine to which relative SIDs are appended to create the SIDs for all local accounts (e.g. admininistrator, default user etc.). It's the base SID that I want. More information (including how this all relates to Active Directory) here: [https://blogs.msdn.microsoft.com/aaron\_margosis/2009/11/05/machine-sids-and-domain-sids/](https://blogs.msdn.microsoft.com/aaron_margosis/2009/11/05/machine-sids-and-domain-sids/) The reason I need it is that I need to be able to uniquely identify a machine with a value that is independent of domain membership, hardware and OS Serial but such that if a VM is duplicated and sysprep'd then both machines are seen as distinct. The Product ID might do the job, the preference for a SID is more for consistency in that my code already identifies domains, domain machines, security groups and users using SIDs. If I ultimately fail to find a way to get the local machine SID then I'll certainly look at this - Thank you.
System.Runtime.Caching.MemoryCache System.Runtime.Caching.HostFileChangeMonitor [https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications](https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications)
Check out https://github.com/louthy/language-ext/ , a lot of great types and methods to get you on functional in C#
You should take a look at async await. I don't fully understand it, but one of the key features is to keep the UI responsive. Microsoft have a very down to earth guide here: [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/)
Yes, I'm right now busy with it but I wish someone with some experience could show a best practice example on my simple code. Should only my OnStartCalibrationExecute be async? Or do the InitializeSensor() etc. methods have to be async as well? Does it have to return something? Who is awaiting something anyway? :D
have a look at Tasks: [https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1?redirectedfrom=MSDN&amp;view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1?redirectedfrom=MSDN&amp;view=netframework-4.8) Just remeber that you need to invoke the GUI functions on the GUI thread.
The calls that block your UI should be awaited. Cant really see which calls take time, but in the end, it can be a good idea to make everything async.
thanks! I just wanted to ask if somebody knows where to start if you're complete beginner(I learned a bit of Pascal back at school 15 years ago and that's it). seems great
Yeah I mean that’s how F# does it
You start with an async command - IIRC Prism has that. From there on you just use async/await (and use Task.Delay instead of Thread.Sleep). Remember to invoke your UI changes on the UI thread, or it won't work.
This could be a good opportunity for you to dip into multithreading, separate the calibrate function into a separate thread
It took me 12 hrs to download Doom!
The concept is async "all the way up". In order for the blocking function to be executed async, the calling function must either also be async
There's still the Records proposal which will deal with this use case.
Agree , functional programming causes more issues than it solves. idiots have downvoted you and will downvote me too, but that is expected from the morons that can not understand OOP.
I'm going to guess it's the Thread.Sleep calls haha
OH man... I've been using it in Powershell and having it fail now and then. If this is why I'm going to be jumping for joy my friend. Did you just make my Friday?!?!?!
Yup, why does that mess things up?
Multithreading using async/await and Tasks isn't as bad as you think and is actually fairly elegant if done well. Have a look into them.
Very simply, if you want to keep your UI responsive, you need to offload processing from the UI thread. WPF applications have a dedicated UI thread meant for handling user input and rendering. In addition, the controls you place on your page / window have thread affinity, which means they can only be modified from the UI thread. What this means for you is that when you invoke your calibrate method, you should immediately kick off a background thread to perform the calibration. You can accomplish thus with a c# thread or a task, but I'll recommend a task. Inside your background thread, you will do your processing and notify the UI thread of updates by using the `Dispatcher` property on your wpf page / window. `Dispatcher.BeginInvoke` is the item you will Google to see examples.
It's all running on the ui thread. So the 9 second lock up they mention is literally those sleep calls.
Nah man, Vietnamese is completely different from Chinese.
[Rx](http://reactivex.io/) maybe.
You are locking your UI with those Thread.Sleep, you could finish the execution of the UI thread after calling the new thread, and set the new thread to run the SetStatus procedure using invokes to make it thread safe. Each control have a "RequireInvoke" property that will tell you if you are accessing the control from the UI thread or from another one, so for your procedure you would start with If UIControl.InvokeRequired Then UIControl.Invoke(New Action(Of Object)(AddressOf Procedure), Parameter1, Parameter2, etc) Else Actual procedure code here End If Procedure being SetStatus or any other, you pass the same parameters so it runs again but on the UI thread. Btw this is Basic.Net code and kinda old (Did this a few years ago) but the logic should still be the same, you simple create a delegate to run your procedure again but on the UIControl thread using the Invoke function of said control... Then again i haven't worked with WPF and this is from making a windows form.
There was big device thing usually plonked on a side table that was connected by a wire into the wall. So what happens is the interested party manually flipped through hair thin pages full of random looking numbers matched up to names. On the device plugged into the wall you would punch in those numbers. Some really fantastic magic happens somewhere down that copper cable (probably monkeys scattering and looking where to connect the wires) and eventually a very similar device to the party you are calling would make a loud annoying ring. Usually a large metal bell. You could then Chat. Fancier versions offered digital bell signal instead of a real metal bell. And people who could afford to could upgrade to wireless headsets and chat in the comfort of their own home.
Thanks! Looks neat, especially the concurency problems it resolves, which I might start facing otherwise. Will look into it!
The Xml is actually generated by the contract serializer. The serializer inspects at the objects, and figures what Xml to generate based on the object.
Here's a starting point for you to check out. I'm assuming that you're interacting with some hardware device, and thus the calls to it return immediately but take some time to actually change the state of the device (e.g. focusing a camera, etc) which is why you're using Sleep. So what's happening here is that Task.Delay returns control back to the calling method (which is the UI thread), BUT because you've supplied an await execution will return back to your OnStartCalibrationExecute method and execute SetStatus once the Task.Delay completes. private async void OnStartCalibrationExecute() { if (IsConfigurationLoaded) { InitializeSensor(); await Task.Delay(2000); SetStatus("Initialized"); Measure(); await Task.Delay(3000); SetStatus("Measurement done"); SetNewPosition(1); await Task.Delay(4000); SetStatus("New Position set to 1"); } }
Also the issue of public readonly MutableTypeIDontHaveAccessTo variable;
Totally possible, but a royal pain. And it wouldn't work 100% of the time. But you can get a PDF parsing library, search for the box numbers, get the coordinates, and then use it to find the amount. Possible, yes, but it'll take you several weeks to several months to get it sort of working.
I'd vote for SWIG also - this is what I use at work for C++ to C# &amp; python bindings. It generally works pretty well.
If you are running a debug x64 dll included to a release build, that can cause some of your try catching to skip due to optimization. Ensure you’re running matching x64 builds when debugging the site. Also, ensure you are using an old version of IIS, roughly 3.0 for older ASP sites and ensure your ASP session object is newer than 1.24.9.
Why are you Thread.Sleep()ing? Surely you should be setting status based on what has actually occured? not an arbitrary time value...
The Measure() command will tell an external sensor device to do its measuring which will take 2,5 seconds, can't be influenced from me. So I want to wait till this time is over (and a bit more) before I repositon the sensor for another measurement. But I agree, this should be handled better. Maybe I should get a callback when the measurement is done.
\&gt;Maybe I should get a callback when the measurement is done. that would be much more sensible.
Oh thank you a lot. This is really helpful. I start to grasp the async/await piece by piece but I didnt get to the idea to use await on the Task.Delay yet
1) Make your command async. 2) Mark your OnStartCalibrationExecute async. 3)replace Thread.Sleep() by await Task.Delay() Your UI thread is now freed when it doesn't need to be used.
I can request that from the developer (a bachelor student) of the API of the sensor device, but for now I can just tell the device a "measure" command. await Task.Delay(n) seems to be my best bet for now.
To add to this (having done some PDF parsing) ... It also heavily depends upon the tool used to create the PDF, as PDFs can be anything from formatted sections of text, to one single large scanned image (but are often made up of combinations of text and images).
If you're not doing async/await, one of the old ways is to use the background worker class [https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker?view=netframework-4.8)
stackoverflow spacex lots ofbthings, also programming is a general skill, you wont be stuck knowing just c#
It’s definitely not hard to make a career out of it. Easiest would probably to do a search for jobs in your area and see what’s out there. There’s a huge amount of companies using C# and .NET. It might not be the biggest in web, but it’s not small there either. And with .NET Core going strong it’s not going away anytime soon. In Stack Overflow Developer Survey (that’s one huge site using .NET) 31% of respondents use C# and 67% say they love it. It’s a great multi-purpose language and .NET is a great framework so it’s definitely worth learning. Of course learning it with Unity is quite different since it has its own quirks and doesn’t always play by the rules of regular .NET.
I have done this with PDFLib. Kind of expensive but it works well for this purpose. As well as building PDFs on the fly or filling out forms on a PDF programmatically. https://www.pdflib.com/
Try getting the names of the pdf form components, this is a great starting point&gt; [https://stackoverflow.com/questions/3367390/how-to-read-pdf-form-data-using-itextsharp](https://stackoverflow.com/questions/3367390/how-to-read-pdf-form-data-using-itextsharp)
A lot of places use c#. Microsoft obviously, Stackoverflow, many old school enterprises (UPS, AVL softwares, Banks). A lot of other places use c# as well, but they are not that familiar. I for example use it for my Startup. C# is an amazing language and is pretty popular, it's far superior to Java in every way IMO as a language. The issue with C# is the old Microsoft. It used to be closed down, and when server development was mostly Linux, the cross platform Java won the battle. Today c# is a lot different than it used to be. It has a totally open source mentality, and is used to develop a lot of stuff. It is the most versatile language in the world, and you can develop with it to more platforms than any other language, except JS, and that will change once Blazor comes out. If you are worried it won't be easy finding work as a c# dev, you have nothing to worry about. Also, c# is beginning to gain traction again, Java is in decline. Kotlin, Scala are a superior JVM languages
Sure thing. Without being to pedantic, the await keyword allows execution to continue in the calling method. This is exactly what you want so that the UI will remain responsive while you're doing something else (like waiting on a device). If the InitializeSenor method is a 'fire and forget' type call, it wouldn't be too hard to make it an async method as well.
Yea I think what I will most likely try to play with is just an image of some random army form like a DD-214 or something and have the users input certain text/numbers in textboxs and then have those populate whatever fields on the army form. Its going to be interesting never done anything with PDF's before.
Interesting i'll take a look, but since i'm just doing some solo developing at home I don't think i'll be purchasing anything unless i'm really digging to see this through lol.
See this https://youtu.be/lw3HTm5EYuk it will clear a lot of clouds :)
Yep just was on that page about ITextSharp. Seems like a winner so far.
This, I've lost count how many languages I've used over the years. As your general knowledge expands you actually pick up new languages pretty quickly.
Should be an `async Task` not `async void`
I think no one mentionned BackgroundWorker. That's a convenient Thread capability. Ideally no long treatment should be done via the main thread (as it locks it)
🙋🏽‍♂️
Unit testing doesn’t mean “test every class separately” nor does it mean you need to inject things. You can easily test this: you create an instance of the class and provide data and go from there. You can easily test everything, outside of the scope of the whole application. Another question is why this kind of code exists. I don’t see any reason why CalculateCost class exists and if it has to exist why it just doesn’t have a static method for calculating.
&gt;Another question is why this kind of code exists. I don’t see any reason why CalculateCost class exists and if it has to exist why it just doesn’t have a static method for calculating. By turning Compute() method into a static one we turn CalculateCost into a helper class. And this design would be much uglier.
It’s a helper class already, and one that needs an instance of itself to perform a single action. That’s much uglier.
Yeah for personal use it isn't cost effective.
C# is one of the most used languages around, but it isn't a very trendy language. It is seen as kind of a boring enterprise language (which is far from the truth). So you don't really see it used by trendy places. If you go anywhere outside of Silicon Valley you will find it is very easy to find companies working with C# on a wide variety of projects.
Good point. But the approach is called **Replace Method With Method Object**. Hence it implies a class instance (object), not a static helper class.
🙋🏼‍♂️
With C# 7/8, it's definitely reaching into "trendy". I personally like the direction they're going and with a lot of languages adopting similar feature sets, which one you pick is becoming less important.
Ok, that explains it. So it’s an exercise in that method, not actual code written anywhere. That’s understandable.
VB.NET in the C# sub??
I'd like to second C# Fundamentals for Absolute Beginners. It's what I used at the very beginning to learn. Also, if you're using a laptop to learn, I recommend pulling the videos up on YouTube and watching them from your TV. That way you can easily pause and code along.
Since we're being pedantic, it is "without being *too* pedantic"
Found it: [TeX by Donald Knuth](https://en.m.wikipedia.org/wiki/TeX)
How did you add the link exactly?
If the PDF is NOT an image, then it is possible to read the structure and specifically get the text box values. I did this a while back and have linked the code below. I ended up creating a UI to walk though the document fields and map them to a destination. Again, this ONLY works if it's NOT image in a PDF. https://www.codeproject.com/Articles/37399/PDF-Parser-and-FlateDecoder
It was the closest example i had on hand sorry, and it is straightfoward to translate to C# anyway if (UIControl.InvokeRequired) { UIControl.Invoke(New Action(Of Object)(AddressOf Procedure), Parameter1, Parameter2, etc); } else { Actual procedure code here }
Pseudocode in the C# sub?
People coming into a post saying it's terrible without a proper explanation probably should be down voted I can understand FP making an architecture difficult to understand for the unfamiliar, but difficult to debug? FP is usually a series of transformations on immutable data with non-local mutation being isolated to it's own area. That makes things much more easy to debug than stateful objects with mutations occurring anywhere and everywhere, and that gets doubly complex when you have inheritance involved
Thank you!
you are welcome
What did you find difficult about debugging the app? To me the hardest part about debugging is tracking too many state changes which FP tries to minimize
yeah, it is Turkish. AND THANK YOU SO MUCH. I just solved it, I was not able compile just because of MSBuild being a total b!tch.
You can create and attach the event, but because the button is disabled, the original clicks will be caught and not bubble. You could, rather than disabling the button, recolour it (or fade) to look disabled and then hook up your events as desired.
I would capture a dump with ProcDump. It can trigger the dump when an unhandled exception occurs (use -e). https://docs.microsoft.com/en-us/sysinternals/downloads/procdump There are plenty of online resources to help you analyze the dump file.
Why even use Task.delay when you can just make the methods themselve return a task, and correctly await them? What if it takes longer than 2000ms or shorter?
This is what I'm excited for (currently a Jr dev with just about a year under my belt). I love C# and .NET, but am starting to wonder just what all else I'm able to pick up and use for a situation. Have used Python for a couple silly scripts along with SQL (required for my job) and VBA. Would love to learn C++ and whatever else though. It's definitely crazy to realize just how much you're actually picking up whether it's logic that's usable or something else.
Rather than disable to button just make it seem disabled. Either that or capture mouse location and use that to figure out if the button it being clicked. But thats messy if you ask me.
Not saying you should but you can use DI here by making this a bit more FizzBuzzEnterpriseEdition-y :) Write a CalculateCostFacotry that has a CreateCalculateCostFactory method that expects a PersonalComputer. Make this a dependency of PersonalComputer through the constructor then BAM! You can mock it. Might need to virtualize the Create* method. I hope I didn't help! :D
Never never use async void, if it crash you have no stacktrace. You can use it on event only.
Throw it on a [Task.Run](https://Task.Run) (background thread) and have a shared variable that flags when it's done. On your UI loop read this variable to update the UI element.
In ‘simple’ use cases my rule of thumb would be that if you can’t DI then maybe the design should change a little bit. In this case, I would ask why the calculator needs to take the parameters in its constructor. Another way of thinking about this would be to ask why do you need to have multiple instances of the same calculator class to calculate different sets of parameters? At least in this example it looks like the are transient parameters not long term dependencies. So I would suggest that they should be parameters to the calculate method. The outer class takes a calculator as the dependency and you can test everything individually (if you so wish). Added benefit is that you only ever need to instantiate a singe instance of the calculator, aren’t incurring allocation and GC overhead, it isn’t stateful and so is thread safe (eh they were readonly I guess) DI/IoC isn’t just about constructor injection, it can also be property or in this case functional injection. The point is to make the ‘thing’ flexible by not tying it to anything more specific than it needs to be. Constructor injection is entirely analogous to saying, I need to calculate 3!, so I’ll add a ThreeFactorial() method, and then needing 4! and adding FourFactorial. These reduce the functionality by being more specific than they need to be, as opposed to injecting the parameter and solving the general case. By injecting the parameters into the constructor you have tied that instance of the constructor to those parameters, and restricted it from solving the general / reusable case
Id also like to know this. :D
Not sure I understand what you want but for a starter, if you want to read a text file and do something with each line try this: `foreach (var link in File.ReadLines(@"c:\temp\links.txt"))` `{` `Console.WriteLine(link);` `}`
I haven’t done a lot but if you are wanting to expand or get into .Net plural site has tons of videos and source material. It does cost about $20-30 a month though.
I honestly think if you want to explore intermediate to advanced topics, start building an intermediate to advanced project. Build an e-commerce site authorization/authentication, shopping cart, with roles based permissions. Build a dashboard app to monitor different data points from different APIs. Build a web-based restaurant POS system. That's just me though. There are tons of free vids on youtube by Tim Corey, and he covers everything from interfaces to asynchronous programming and everything in between.
Since youre interested in games, quite a few places use it for backend servers of all kinds. Gameplay servers, leaderboards, matchmaking, etc.
&amp;#x200B; sorry i wasnt clear, im trying to download multiple files using WebClient, but i need to feed it links from a text file
More specifically on the design, maybe try thinking about the difference between things that represent data, and things that actually have something to do. Eg. a computer in this case is just a set of components, and what it should cost is distinct to what the computer object is describing // Domain object, describes data public class Computer { public IMotherBoard MotherBoard { get; } public ICPU CPU { get; } public IGPU GPU { get; } } // Service class, does stuff public class CostCalculator { private readonly IComponentCostService componentCostService; ... public decimal CalculateCost(Computer computer) { return componentCostService.CostOf(computer.MotherBoard) + componentCostService.CostOf(computer.CPU) + componentCostService.CostOf(computer.GPU); } } // Usage var computer = new Computer { MotherBoard = ... }; var calculator = new CostCalculator(); var cost = calculator.CalculateCost(computer);
Like others have said you can change the button's appearance rather than actually disabling it, but I feel like this will lead to a poor user experience - no one will ever think to double-click a button, let alone one which looks disabled. Is there perhaps a better UI element for your need?
which part are you having trouble on?
It is super annoying that they aren't going to support it. We have a massive native library and about 80k of cppclr mapping code that is just locking us out from thinking about core :(
I saw the title and thought Rx was probably the answer, but you beat me to it
here is a refactored version: [https://repl.it/repls/FabulousTartKnowledge](https://repl.it/repls/FabulousTartKnowledge)
We don't have it in C#?
Check out the courses by Mosh Hemedani on Udemy. I've done the beginner, intermediate, advanced and xamarin course and found them extremely useful.
Something like this.. ``` var wc = new WebClient(); foreach (var link in File.ReadLines(@"c:\temp\links.txt")) { var site = new Uri($"https://mysite.com/{link}"); wc.DownloadFile(site, $"c:\\download\\{link}"); } ```
Yeah, if you have a tricky problem then maybe that is more suitable to a code test or take-home problem, just because the WPF model it a little too complicated to figure out away from a compiler. For questions you could assess breadth of knowledge by asking some basic but not trivial questions about the various topic: dependency properties, layouts, databinding, commands, dispatcher &amp; threading, user controls, custom components, styling and control templates etc etc. If the candidate really knows their stuff, then maybe push a little bit harder, eg. the hardest I might go would be: why might setting a mutable default value to a dependency property on a custom control cause some issues
How much experience with other languages do you have?
I can't believe that in a question about optimising and strings there is basically no other mentions of the cost of the allocations, given it is going to be one of the costliest parts
NetMQ is a native c# implementation, would highly recommend
A property selector of type Expression&lt;Func&lt;TObj, TProp&gt;&gt; generally solves the problem when nameof() doesn't quite cut it
I am constantly surprised that more people don't use IronPython...
I like Angel Six YouTube channel. He is kinda intermediate to advanced
iamtimcorey.com is really good
Second for Mosh, although I didnt take any of his C# courses, his angular 4x course was great.
Scott Allen's courses on Pluralsight are great.
FreeCodecamp on YouTube
static partial class Misc But yeah. Tons of them.
This is where c# fails some basic oop principles. If it can be implemented entirely using the public API, it should be, and it should be separate from the class.
The global assembly cache was empty. I was able to determine this with DisableCacheViewer reg entry set to 0 and the c:\windows\assembly folder appearing empty. The NETFX Repair tool did the trick.
First of all the part where if i want to add more properties in the account i would have to keep write a set that will update the value in database, im not sure is the best way to do it. Second part, is the way i handle the player account (considering the player can leave and rejoin the server) so i "create" the account class when Initialize() is called so i dont have a null reference once it hits the OnConnected check and the populate AccountData property with the actual database data , is there a better way to do it?
Third for Mosh! His courses helped me secure my current job.
They may be considering corner cases that you have not. Or they use a crypto algorithm which is constant-speed to avoid side-channel attacks.
Yeah I misunderstood the question - I was thinking of two projects within the same solution. I feel like two projects from different solutions should not be so tightly coupled that they require direct references when developing both of them, and require developing both at the same time. I know that might be too idealistic but in general I try to just develop project A (in this example) by itself as a class library to be released as a nuget package, maybe with a test/example project alongside it to show possible uses of the library (that could possibly closely resemble the use case project B is looking for). And B would only be developed referencing the library through nuget.
&gt; 5 – Using immutable values and recursion can lead to more memory consumption. No shit.
After the Nth language, you start dividing along the lines of procedural (Pascal, QuickBasic, Fortran77, COBOL), object-oriented (Java, C#, Smalltalk) and functional (F#, etc.). Across most of those, a for loop is a for loop. If statements are if statements, etc. I did BASIC, Pascal, Fortran77, COBOL, ASM86, C, C++, VB6/VBScript, Java, C#, JavaScript/TypeScript. Got paid for using at least half of those languages at some point. Java -&gt; C# was a really easy jump. Two months to learn the syntax, six months to feel comfortable in ASP.NET, two years to become proficient enough that not much throws me.
.NET Core, I think, pushes it back into trendy territory. We'll roll out our first production app on .NET Core 2.2 within the next few months. Everything else is at least up to .NET 4.7. There's still a lot of shops in the area stuck back in .NET 3.5 or 4.5. We're not bleeding edge, but trying to keep up without crazy risks.
Hangfire is perfect for "I have something that needs to be done, but not this instant". It's also great for "I need something done at 2am, M/W/F". Depending on how you wire it up, the job can start within milliseconds of being injected into the Hangfire queue up to a few seconds. We use SQL back-end for almost everything and jobs start within a few hundred milliseconds (fast enough for us, for now).
Big advantage of using a dictionary, or a list, or some other IEnumerable is that you can eventually move the source of the data out of the code base. At which point, adding a new thing to whatever does not require a recompile and redeploy of the application.
When you upload or edit an extension, you can add ' Source code repository' link in the 'Community and support' section. Description states it is 'to share with the community' but I see nothing.
Follow up - I found that there is Bootstrap Studio that has drag&amp;drop functionality and you can also create your own components. I think it's pretty slick check it out!
You could try saving it as / converting it to a txt file, then parse that.
The same way they do now. SignalR doesn't power most chat.
Yes.
Here a link https://www.youtube.com/channel/UCJ3AxeCHGPZkMi3kRfCuiHw
Hate his teaching style. Knows his stuff but not a good teacher. The .net ecosystem suffers from that but we now have quite a few good teachers that also know their stuff.
[Microsoft Virtual Academy](https://mva.microsoft.com) which is moving to [Microsoft Learn](https://docs.microsoft.com/en-us/learn/) is a great resource and helped me out a TON when I was first starting in my career. &amp;#x200B; But like [u/letsjustbefriendz](https://www.reddit.com/user/letsjustbefriendz) says. You're best bet if to find an objective and try to build it. Try to clone an existing site (don't try to clone something like Amazon...) Cost: FREE
&gt; FP is usually a series of transformations on immutable data with non-local mutation being isolated to it’s own area. That makes things much more easy to debug than stateful objects with mutations occurring anywhere and everywhere, and that gets doubly complex when you have inheritance involved True. At the same time, OOP tends to mean imperative, and FP tends to mean not so much. OOP debugging tends to mean the well-known approach of stepping through code and seeing what happens. You’re right that it’s also more likely to have side effects, but you can add those you care about as watches.
The problem with tuples crossing serialization is that the tuple-names are just cosmetic and get lost when you serialize the tuple. Behind the scenes, a TupleElementNamesAttribute is created for each element, but that's just metadata that doesn't get passed along.
&gt;You can reference the elements of a named tuple by those semantic names anywhere in the same assembly. The compiler replaces the names you've defined with Item*equivalents when generating the compiled output. The compiled Microsoft Intermediate Language (MSIL) does not include the names you've given these elements. Be careful about that part. The name is only available in that project/assembly. A multi-project solution referring each other thus will lose the benefit. Also, while it looks nice when you have 2 or 3 item in a tuple, the syntax becomes bit unwieldy, might better off just using struct.
Yea I can see that too, with 1 or 2 items in the tuple it seemed nice but I can see how it can get ugly fast. I didn't see that quote in the documentation but that is an important detail and for bubbling information up it is probably better to use a poco/struct for passing values through my project layers.
I'd leave the company and go somewhere with a better tech stack
Absolutely this. In my admittedly limited experience, you can read about concepts and terminology all day but most of it won't click until you get truly hands-on.
sockets and threads in JAva no idea in C#; i only did this for education purposes.
I will say search on YouTube for IAmTimCorey, he is wonderful and the explanation is really good. Mosh is also great.
Like others have said, Async all the way(where it's necessary)
Oop is only hard to debug if you do it poorly. All too often these discussions boil down to 'well written fp is better than poorly written oop' and - well duh. Of course it is.
This appears to be an event handler, the one place where `async void` is ok/necessary. Wrapping it in some "safe" task handler that catches exceptions and informs the user may still be a better way to go in general, but for this simple example isn't necessary.
He is using `Task.Delay` because he is translating from an example that used `Thread.Sleep`.
Smack down the example using yield too. What is that? Just use where.
&gt; Also, ensure you are using an old version of IIS, roughly 3.0 for older ASP sites Why? My employer run webforms on IIS 10.
wow, a new level of idiotism
`ValueTuple`s are super handy for internal code, but the fact that the names get erased means you should avoid using them in public APIs. You can still enable `ValueTuple` deconstruction for users of a public API by returning a class with the `Deconstruct` method. ``` // library code public class ApiClass { public ReturnedType MyPublicMethod(){return (5, "Multiple Return Values!")} } public class ReturnedType { public int IntProperty {get;} public string StringProperty {get;} public ReturnedType(int i, string s){ IntProperty = i; StringProperty = s; } public void Deconstruct(out int i, out string s) { value1 = Property1; value2 = Property2; } } // user code var (i, s) = apiInstance.MyPublicMethod(); ```
Now you have to distinguish between System.Math and OtherNamespace.Math. Not very pretty.
To be fair, overloading "global" names like this isn't very pretty. It's been a bad practice across languages for decades.
PluralSight has some great ones, tho it's a paid service. The two Tips and Traps vids are great, as is the Parallelization Collections one.
Event handlers take parameters of `object` and `EventArgs` thus this is not an event handler and therefore should return a `Task`
Thought this would be nice to share. This is just a small cheat sheet I made since I use LINQ heavily in C#, but wanted to use the JavaScript "equivalents" of functions of the Array object in JS.
Ya i knew it was available through WMI, it's just what class it was in to pull the data from it is what I didn't know. &amp;#x200B; I was actually looking at doing something like this in the future, as my app has the console window pop up when you launch, and it's kind of annoying for me personally. It doesn't really affect the customer but the window flash is a little distracting.
I freakin love that guy, his vids are enlightening and not too dry.
After a look in your GitHub repo I got this code to work: /\* WorkingLinks.txt: [https://www.curseforge.com/wow/addons/deadly-boss-mods](https://www.curseforge.com/wow/addons/deadly-boss-mods) \*/ `foreach (var WorkingLinkInTextFile in File.ReadLines(@"c:\temp\WorkingLinks.txt"))` `if (new HtmlWeb().Load($"{WorkingLinkInTextFile}/download")` `.DocumentNode.SelectNodes("//p/a").First().GetAttributeValue("href", "") != "")` `using (var wc = new WebClient()) wc.DownloadFile(` `new Uri($"`[`https://www.curseforge.com`](https://www.curseforge.com)`{new HtmlWeb().Load($"{WorkingLinkInTextFile}/download").DocumentNode.SelectNodes("//p/a").First().GetAttributeValue("href", "")}"),` `$"c:\\temp\\{WorkingLinkInTextFile.Substring(WorkingLinkInTextFile.LastIndexOf("/") + 1)}.zip");` `}` `}`
The return value from the callback passed to \`.sort()\` should return a \`number\`, not a \`boolean\`. The bool will kind of work, since it will get coerced, but it doesn't distinguish between equal or less than, so it could fail.
Scores is a list of doubles and you are tying to assign it a string value. Try Scores.Add(textbox2.Text) instead of assigning.
I think they are awesome in the few cases I need to return 2 things but don't want to create a class for this one method. I personally would not use them in any public-facing API.
better than all the Indian tutorials
Ehh, this was always my problem with tuples and recently with addition of named tuples I was trying to make it work again, without success. How I understand tuples is "lambdas for classes" - just like we use lambdas not to create loads of small, specific functions I wanted to use tuples as a replacement for lots of POCOs. It does make sense sometimes, but in 99% of my cases it was actually better to just create a small class... and looking at your problem (returning status from microservice) it will be pain to mainain. I was doing something similar: I just needed `(bool success, string message)` in my code from service methods. I thought tuple will be great. I had great method definitions like `Task&lt;(bool success, string message)&gt; Update(MyClass model)` (by the way I think your example has an error, you missed angle brackets) and deconstructing was also great: `var (success, message) = Update(model);`. It was for some time... until I had to *add* something - like status code. I had to go through all method definitions and add yet another property to all those tuples. So in terms of maintainability tuples are horrible. As for your points your code will always be strongly typed with both POCOs or tuples and conciseness... if you name your classes appropriately it will be even better than tuples. I see you're not deconstructing to members, so you always have a "result" variable created that you have to name anyway, with member deconstruction you will have "random" variables like `success` or `status`. Success of what? Status of what? Then you rename them to `updateSuccess` which is not far from `update.Success` which is not far from POCO... &amp;#x200B; My 2 cents on tuples :-)
Well its more that i want to bubble my http response data up from my infrastructure layer, through services and to my ui layer(controller) and set http status and return the content so I can have better responses instead of everything 200OK. Not necessarily returning all the data to the consumer.
I think I was doing exactly the same thing. Then at some point I realised that I'm still doing trycatch on the service call anyway in case of database access errors, parsing errors etc. so I moved the trycatch into the service, but then we needed to log exceptions separately (as something to investigate) so I had to add another boolean if that was exception error or just validation error... I removed tuples completely and just added a POCO. I believe other devs added more stuff to it. I know this may sound like crap code, but my point is it's a pain to maintain tuples. There might be a feature you're not even aware of right now that will require you to update them one by one, method after method in the whole service. I had to do that once for few methods and it annoyed the hell out of me. ;-)
You can publish it on newer IIS and should, for security reasons. But you’ll have a better chance debugging an old version of ASP with an older version of IIS. Also, older versions of Visual Studio sometimes debug the older runtime easier than using the latest and greatest.
Good point lol
"FP making an architecture difficult to understand for the unfamiliar", not only the unfamiliar, it is a contorted way of describing problems that are un-intuitive , it adds no additional value and wastes time. We tried that once, but the wasted time was beyound justification. Before some FP hotshot tells us to ditch OOP maybe they can provide some concrete examples of implementations in both OOP and FP that show the benefits, not some hand picked fp examples just to show the type of problem good for fp. Where are some simple examples of everyday issues to contrast the fp way with oop?
Well, I am technically but I am not focusing on the terminology here but rather on the advantages or disadvantages.
I liked teamtreehouse a lot. I did their C#, Java and Swift courses and they were all fantastic with Swift being the best of the bunch. Huge fan of their teaching style.
You do get three months of pluralsight for free with a Microsoft account.
At https://gitlab.com/wilcoforr/csharplinqtojavascriptarraycheatsheet#linq-to-javascript-cheat-sheet-table-code-examples The C# code says `Any` instead of `All` and in the JavaScript column says `some` instead of `every` in the first two rows.
Custom authorization policies and attributes? Here's a .net core example: https://docs.microsoft.com/en-us/aspnet/core/security/authorization/iauthorizationpolicyprovider?view=aspnetcore-2.2
Any specific examples of where it's easier? I can't think of any issues I've really run into with this.
&gt;&gt; FYI, this isn't true anymore &gt; &gt;How is it not true? Unless there's a Dictionary&lt;CountryCode, CountryName&gt; definition, you're going to have to populate it. I misread that part of your point, sorry. I thought it said something more along the lines of, "it's going to build a dictionary anyway", since I had just gotten done writing [this comment] (https://www.reddit.com/r/csharp/comments/bjkh5g/looking_for_a_switch_statement_replacement/emaxy9e) debunking that misconception :)
Also a vote for Mosh here, but I would go directly to his site (codewithmosh.com) and subscribe. THAT being said, the temptation to leave .NET and begin with something like the MERN stack will be very strong there. Once I was very comfortable with ASP I immediately started React and love it.
I completely agree. The fact is that those hard to debug OO code are actually procedural code masquerading as objects. Not true OOP, but procedural programming. If done properly, OOP’s debuggability will be on par with FP at least.
Do not terminate the thread if you can help it. Lore suggests that this can cause stack corruption which may bite you unexpectedly later. Your Pointer proposal is fine. Another option is to return a handle to associate with the task and provide a cancelation method that accepts the task handle as an argument. The cancelation method would set the cancel flag instead of the user setting a pointer explicitly. The task would terminate itself as you have proposed.
One thing that helped me out a ton was pulling down repositories from github and reverse engineering the code, stepping through it while debugging and trying to find places I could make improvements. Also, I recommend downloading the source code for LINQ (found in the corefx repo on github) and stepping through the different methods. Very fun way to improve your code reading skills and you get to learn how LINQ works under the hood.
Ah so mapping the cancellation to the bool*, I see, I will definitely play around with that idea as well although it does seem a little bit boilerplate compared to just having a global bool variable that I can set to quit, since I only have one unmanaged call running at the same time. Thank you!
Yea, it's pretty verbose. It looks like it is meant to be a surrogate for an OO-approach where the async method returns an object that exposes a Cancel() method - or - a replacement for an object that exposes both the async method and the Cancel() method.
&gt; hand picked fp examples just to show the type of problem good for fp That's the point of FP It gives us new tools for solving problems. In the case of data transformations, which is the bulk of work I do, it is a more simple and transparent style than OO. I don't like to knock OO because I love it for creating abstractions around state, but it's completely over used, although that's in part because many modern OO languages force you to put everything behind objects &gt; it is a contorted way of describing problems that are un-intuitive , it adds no additional value and wastes time. *We tried that once* I'm sorry but it's hard to take what you say seriously with this. After working with OO for almost 10 years now and FP for a couple, FP has given me much simpler abstractions to solve particular problems, particularly in web development. It's been a wonderful breath of fresh air in designing web services, and for UIs the MVU architecture is dead easy to follow and implement compared to procedural UIs or MVVM
&gt; hand picked fp examples just to show the type of problem good for fp That's the point of FP It gives us new tools for solving problems. In the case of data transformations, which is the bulk of work I do, it is a more simple and transparent style than OO. I don't like to knock OO because I love it for creating abstractions around state, but it's completely over used, although that's in part because many modern OO languages force you to put everything behind objects &gt; it is a contorted way of describing problems that are un-intuitive , it adds no additional value and wastes time. We tried that once I'm sorry but it's hard to take what you say seriously with this. After working with OO for almost 10 years now and FP for a couple, FP has given me much simpler abstractions to solve particular problems, especially in web development. It's been a wonderful breath of fresh air in designing web services, and for UIs the MVU architecture is dead easy to follow and implement compared to procedural UIs or MVVM &gt; Where are some simple examples of everyday issues to contrast the fp way with oop? One particular example I had was a configuration editor where changes/operations are previewed before being committed, and unsuccessful operations didn't invalidate later operations. With an imperative approach that I first took I needed to clone the data structure for each operation, and the user could easily end up with a 500ms delay after a handful of heavy operations because of the data set size. By using immutable data structures I never needed to make any copies, and that 500ms delay turned into sub 100ms, while being easier to manage because it didn't matter whether I forgot to ensure I wasn't modifying the original data set
The lack of Roslyn can't be the reason that R# + VS is slow, otherwise Rider wouldn't be faster since Rider relies on Mono running the R# host process in order to do it's code analysis. So it's something else besides the static analysis engine.
Out of curiosity, is this button supposed to do things based on a "toggle" behavior, like a checkbox (IsChecked vs UnChecked state)? If so you may want to consider using a toggle button instead. Its been a while since I have used vanilla Winforms controls (and Winforms in general). DevExpress and Telerik have their own implementations, but I know you can make one with the standard controls by just using a checkbox and then setting its appearance to a Winforms button, if you don't want to mess with a component library. Again, not sure if this is what you are looking for, but it may be easier to work with than trying to fake a standard button being disabled.
This is why c# needs data classes like kotlin. Tuples are just a nasty hack imo.
I agree with the bool, but consider using CancellationToken.Register to register a callback that sets it. This will give your Task based API a standard CancellationToken and the rest of the world doesn't need to know anything about how it actually does the cancellation. Just don't forget to dispose the CancellationTokenRegistration when you're done with it.
I appreciate your last paragraph.
I have tried it shortly a while ago, but the lack of GPU acceleration made me stop investing any more time in it. I would also be interested in a solid C# ML framework, as Python is not really my first language 😁
Very handy, you could also map `Aggregate`, `Sum` and probably some others to `reduce`. I'll always be mildly irritated the C# uses non standard names for these things where most other languages I've used are broadly aligned.
It's down to one month now
Basically, the main idea I was looking for was to create a minesweeper game. I don't know if somebody knows how this game works. Besides using Left Click (open buttons) and Right Click (place flags), you can Double Click on a number button (a Left Clicked button) and if it has the exact same number of flags around it (8 directions), every button around it will be Left Clicked (if only those are not already left/right clicked). Because of that, I have been looking for some way to make it looks as close to the original version as possible. Anyway, if anybody has a better idea of doing it in a nice way, I'm waiting to hear it.
Just to clarify here, when you say build authorisation and shopping cart etc of ecommerce site. You don't mean to actually build a site just the programs that runs these parts?
I had to build a model, which, given an certain state, tells you what actions you can do and how the state would look like then. We built it in Python, but it’s a fairly complex program, so right now we run at 10 iterations per second. Since C# is my main language, I really wish too that ML.NET had already reached adulthood
Good news! https://github.com/SciSharp/TensorFlow.NET
Can you just remove the on click event handler and add an on double click event handler?
I assume this only works in compiled languages right? This doesn’t make you able to let Python call from the C# dll?
No, I need both. I explained why in a reply to a comment. &gt; the main idea I was looking for was to create a minesweeper game. I don't know if anybody knows how this game works. Besides using Left Click (open buttons) and Right Click (place flags), you can Double Click on a number button (a Left Clicked button) and if it has the exact same number of flags around it (8 directions), every button around it will be Left Clicked (if only those are not already left/right clicked).
But you can only double click after it has been left clicked already, no? So, on click you remove the event handler and add a double click handler.
Ah, well this is making a little more sense :) Interestingly in the versions of minesweeper that I have played you only need to single-left click on a number square in order to make it auto-click it's surrounding squares. If you're creating a new program then I would suggest using WPF rather than Windows Forms - it's still C# but it's newer and is much more diverse when it comes to changing how UI elements look and feel. If you're looking to make games specifically then I would suggest you look into the Unity game engine, as neither Windows Forms or WPF are really suited for games and it too is C#. As far as implementation goes in a Windows Forms application however, I would probably cheat it. I would have two layers of buttons. When you click a top layer button it disappears, revealing either nothing, a number, of a mine beneath it. Revealing a mine obviously ends the game. The buttons used for the gaps do nothing but the buttons used for numbers can be clicked to make the surrounding buttons in the layer above disappear.
I understand your idea now. I tried to do it, but the DoubleClick event isn't working, code looks like: btn.Click -= btn_Click; btn.DoubleClick += new EventHandler(btn_DoubleClick); void btn_DoubleClick(object sender, EventArgs e) { //code }
Thank you for suggestion. This is actually a school homework and it's kinda necessary to use Windows Forms, is not a self preference :) Your idea of creating another layer is really nice and I will probably try to use it. Thank you!
It compiles CIL(common intermediate language) to native code. So while python will be interpreted as it's not compiled to CIL(is iron python?) you should be able to interact with the native libraries.
that'll be because standard buttons don't react to double click events, see this SO answer for a workaround : [https://stackoverflow.com/a/13486487/1872776](https://stackoverflow.com/a/13486487/1872776)
Remember that LINQ is usually lazy and JS is not
Would be nice to extend it to Python
You should be able to call the library from python, but I am not sure about calling python from the library tbh
It doesn't work properly because (as I mentioned), I also have a Right Click event: btn.MouseUp += new MouseEventHandler(btn_MouseUp); public void btn_MouseUp(object sender, MouseEventArgs e) { if (e.Button == MouseButtons.Right) { //code } } If I do the SetStyle this event will be seen as a normally Click event (basically as a Left Click - for my project).
Right click on your solution and there should be an option for set startup projects. In there is an option for multiple startups
python has very good interop.with native code like c
I feel like `not` patterns are the one feature missing that'll let pattern matching really shine. Already itching to replace all `if (whatever is { List: {} list } &amp;&amp; list.Count &gt; 0) { // stuff with list }` with `if (whatever is { List: { Count: not 0 } list }) { // stuff with list }` This syntax might look alien as fuck to devs that haven't played around with the feature yet but trust me it really grows on you. Initially I didn't really saw much point in property patterns but I keep finding new ways to use them.
omg that's awesome. ty man
I looked into a couple of job search sites and found that C# and .NET have the most wanted ads with around 500\~550 ads , the next are Java(\~450) , Python(\~350) , JS technologies(Angular, React...) with around 300 ads and the rest are with 200 ads or below. &amp;#x200B; So it looks like you are right and the biggest demand(in my area atleast and according to the job search sites ive been to) is for C# and .Net but on the other hand ive also found this site: [https://stackshare.io/stacks](https://stackshare.io/stacks) which lists the stacks used to develop many of the big applications we know( and some Ive never heard of) and again C# and .Net arnt high in use or in the list of most used applications. I now understand that career wise its a good choice and developers like it but Id still like to know what exactly people build with it and get some sources of which major application or service/content providers uses it.(I honestly looked, not an easy find :/). &amp;#x200B; thank you and have a good day.
Does that speed up your program per definition? Or is there some initial cost you need to break even?
If I wanted JS content I'd go to /r/javascript.
Cant you just pattern match on integers too? Something in the likes of “Count: positive” or somethinting
No I mean a site with all of those features.
the only kind of pattern I ever see used in these examples is for matching an object against it's runtime type. Are there any other kinds of patterns that can be matched? In my experience, this kind of "if type == typeof(whatever)" logic is almost always an antipattern. Why are you even using OO? Whatever logic you're doing, if it depends on the type of the object, should be encapsulated *on that type*. If that violate's the type's single purpose, then you should introduce a proxy type that wraps it and adds the logic. Switching based on the runtime type of an object is not a good idea. Are you going to keep a list at your desk of every place you have such a switch so that when you introduce a new subclass in the future you can be sure it's covered? Of course not, that's ridiculous. That's why we invented OO.
What about images?
There's many reasons you may want to cast something to it's real type or perform a certain operation if it is a certain type. It's why it's in the language. Sure it can be abused but it's a useful tool.
C# is a multi paradigm language, not all C# is 100% OO 100% of the time. When writing functionally-oriented code pattern matching is plenty helpful.
You don't want to use OO everywhere because it isn't always the right tool for the job. This feature is about pragmatism over purism.
Can do it in a switch with `when`, just not an `if` (I think) switch (whatever) { case List&lt;int&gt; list when list.Count != 0:
Build an app
Probably better off building native apps unless you have a good use case to offset the disappointment Xamarin brings.
The real piece missing from C# that would make pattern matching really useful is a union type. If the language doesn't give me a way to say which subtypes are valid so the compiler can make sure I handle all of them, I don't see much benefit other than syntax. Better syntax is great but I still prefer languages with union types and real pattern matching. I've been using the OneOf package and it's great but it gets a little unwieldy when there are many possible types and C# does not allow me to alias the generic type.
I’m with you. F# has a great type system, I hope they bring some of it over in future versions.
At uni we had some courses where we used Java for which they really wanted us to use AssertJ assertions for unit testing. At first I hated it, actually I always thought I hated it when using it. However, when I went back to good old C#, I felt like my ability to write unit tests was hampered by the lack of "more complex" assertions. And because I had gotten used to the AssertJ style of assertions, I decided to create AssertNet (fluent assertions for .NET): [https://github.com/CptWesley/AssertNet](https://github.com/CptWesley/AssertNet) It does not have all the possible niche assertions present in AssertJ, but it has the most common ones (and some I thought of myself) on the most common types of objects. Most assertions (Enumerables being the exception) are documented in the wiki. It has support for MSTest, NUnit and xUnit. Additionally, it also provides an interface for making Moq verifications in a similar style. Furthermore, it is rather easy to add custom assertions through extension methods.
sure, but is _this_ kind of pattern matching helpful? can this be used for list destructuring like fsharp or racket? As you say, C# is multi-paradigm: You can use OO and Functional styles simultaneously. OO is not the opposite of Functional, procedural is.
You haven't made the case that this is more pragmatic, though.
I would much prefer "Count &gt; 0". The former reminds me of VB.NET in a bad way.
So, there are still APIs around that do things like [XPathEvaluate](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xpath.extensions.xpathevaluate?view=netframework-4.8#System_Xml_XPath_Extensions_XPathEvaluate_System_Xml_Linq_XNode_System_String_), and return `object` as a stand-in for a documented and finite set of disjoint types. It's not a *good* solution, but we don't have better ones in the language or API, yet. switch (node.EvaluateXPath(xpath)) { case null: DoNoThing(); break; case bool f: DoBoolThing(f); break; case double d: DoDoubleThing(d); break; case string s: DoStringThing(s); break; case IEnumerable&lt;object&gt; x: DoEnumerableThing(x); break; case var o =&gt; throw new ArgumentOutOfRangeException($"unexpected type {o.GetType()}"); } If you're going to have to do a bunch of type-sniffing, anyway, this is a minor improvement on using the pre-existing `as` or `is` operators to do the same thing. It *is* a useful alternative to the Visitor pattern, for simple use cases where all the possible implementations are knowable (i. e. everything is internal to the assembly), though. &gt; the only kind of pattern I ever see used in these examples is for matching an object against it's runtime type. That's because it's one of only a couple that are currently implemented, and the property pattern (illustrated in the article) requires the type to be known to be useful for anything other than a null-check.
Do a few scala classes.
I agree. However, wouldn't you say that cases like this are an ugly, unfortunate thing to be avoided when possible? Why streamline them with new syntax? This kind of pattern is occasionally necessary, but why encourage it? &gt; If you're going to have to do a bunch of type-sniffing, anyway, this is a minor improvement on using the pre-existing as or is operators to do the same thing. As you say, this is a minor improvement for something we should be trying to avoid anyway. When we're forced to occasionally do ugly things if (typeof(bool) == obj.Type) DoBoolThing((bool)obj); ... is ugly, but like a colorful frog or a cave full of skeletons, it warns us of holes in someone else's API.
Check out any other functional language, for example: https://docs.racket-lang.org/reference/match.html to see how much more useful this could be, but isn't.
Use 4.0, in particular use shell. 4.0 is in preview now but according to xamarin roadmap should be released this month. Will probably be announced on Monday at the build conference.
You may be interested in FluentAssertions - [https://fluentassertions.com/examples/](https://fluentassertions.com/examples/)
Agreed, I would love a switch that would enforce handling all cases where that’s applicable like enums. Typescript can do this and it’s awesome.
When possible, or when practical? You'd replace this with a Visitor implementation, which is a lot of boilerplate and indirection for smaller use cases. I used this for dealing with some dispatch code that dealt with a parsed message, recently. Worked fine and allowed me to keep more of the code in one place (since it wasn't a large class). It's not something I would be building a public API around, but it does have its uses. *Ideally*, we'd have some sort of discriminated union type, and this would be actually be using an active pattern on the union to match the type of different encapsulated values, *but* we don't actually have that, yet. In the meantime, it doesn't actually come up all that often, and this stuff is somewhat preliminary to getting some of those other features built out. It's also a fairly straightforward extension to the syntax of the pre-existing `is` operator, so it's not as huge a leap as all that.
I believe so, check this out: https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow/README.md
If I understand your question, I would just use another Linq query in your query. For example: &gt;outerList.Where(w =&gt; w.innerList.Any(a =&gt; a == something));
um, i think it would be more like allReports.Where(r=&gt;targetRolesIWantedToFilterOn.Contains(r.ReportAudience)); but it doesnt seem to like that...it's like a sql "where blah in (a,b,c)"
I know it exists, I just disliked the syntax (mainly the `Should()` and the properties that don't add anything), which is why I decided to make my own :) One of those examples (slightly modified) looks something like: `"ABCDEFGHI".Should().StartWith("AB").And.EndWith("HI").And.Contain("EF").And.HaveLength(9);` While in AssertNet it would look like: `AssertThat("ABCDEFGHI").StartsWith("AB").EndsWith("HI").Contains("EF").HasLength(9);` I can only imagine that way it works is rather similar. I'm guessing the `.Should()` extension method serves the same purpose as my `AssertThat(...)` static function and the properties such as `And` don't serve any purpose besides making it look more like natural language.
Thanks all for quick and meaningful responses. Following the pointers, so far evaluating courses from Pluralsight, youtube. Also found Lynda to have some good courses so created a playlist of adv topics. Will post my experience in sometime.
I'm almost positive that isn't going to work. targetRolesIWantedToFilterOn.Contains is looking for an individual AspNetRole object; however, r.ReportAudience is a collection of roles. Therefore, the targetRoles list will never contain an entire list as a single element of its collection. Am I missing something?
right, that's the problem...that it only takes one, for Contains. That's where I'm having difficulty.
So don't use contains, use another Linq call. Basically, I would do this first in a ForEach loop to understand the logic, and then refactor that logic to a single linq call. At some point you need to compare a single element to another single element. (Id == Id most likely).
EF / EF Core does not yet really support C# 8.0 yet (which is not released).
This is very well-written and for that I appreciate it. However, the fact that *so many* guides like this exist and that the conversation around them always centers on “cognitive load reduction” yet opens with “barely anyone understands/uses these constructs correctly” these should tell you something.
yeah, that's kinda what i have now, some foreach loops, but i thought there might be a cleaner LINQ way, with like Join and maybe SelectMany or something, but im not a linq guru
Post your ForEach code.
I would make a separate project and store them there. I believe VS even had a database project type that can help you with deployment
I have started down the path of creating my own script engine in C# (The easy way - just start, Solidify theory ((Make &amp; Correct mistakes along the way)), and most importantly get it working). I've started a [Youtube Playlist](https://www.youtube.com/playlist?list=PLnMF9In69aCVjJKg1UmtxXTh4NjTeGK-M) on it already. I'd be very curious to know what a community like this thinks of the material.
Write a method that takes a predicate and put the rest of your logic in that method. https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1?view=netframework-4.8
Func&lt;typeofObject, bool&gt;
Dynamically creating a LINQ query can be a pain, here the source i always use http://www.albahari.com/nutshell/predicatebuilder.aspx you could also extract the date part in its own separate function and then use that Expression&lt;Func&lt;object, bool&gt;&gt; DateIsNull(){ return dateIsNullCheck =&gt; dateIsNullCheck.date ==null; } and then using it Object.Where(DateIsNull).where(x =&gt; x.variable3 == this.variable3); It has been a while since i used this, so the syntax could be wrong.
[It's a "championed" proposal on dotnet/csharplang](https://github.com/dotnet/csharplang/issues/113), so there's a good chance it will be added to C# sooner or later (C# 9.0 at the earliest).
thank you that is useful
can you please mention some useful technologies to use for that such signalr?
I’m not so sure anyone has any idea what you are asking.
I can't say I disagree with you! Sometimes I wonder if it would be easier if we just stuck with task/promise chains...
If you are trying to see if there is any overlap between two lists, you can try like Alist.Intersect(Blist).Any() or Alist.Any(x=&gt;Blist.Contains(x)).
Been there, done that. I highly suggest you allow people to compile scripts to compiled assemblies - it's way faster that way, especially if you load it once and then just execute it.
Thank you very much. This got me down the path I needed!
Honestly, they seemed to have missed the point with Blazor on the "Unfortunate" section. They compare it with standard views and Razor Pages. Blazor is meant to be a replacement (different paradigm) entirely compared to Razor Pages and standard views. It's designed for single page applications, not some weird mix which they seemed to have been attempting.
Agreed. Author of the article doesn't seem to know what they're talking about.
The method should take a 'Selector' that takes a T So your function would look roughly like public IEnumerable&lt;T&gt; MyLinqThing&lt;T, TVakue&gt;(Func&lt;T, TValue&gt; selector, IEnumerable&lt;T&gt; collection) { return collection.Where(x =&gt; selector(x) == selector(this) &amp;&amp; date == null); } Doing that on my phone so pardon any syntax errors. This only works if the type of the collection T is the same or has a shared interface or base class as the class that the function belongs too
Great game!
Out of date...the author admits in comments he was working with an older version of Blazor. Preview 4 had already addressed some of his main issues and had come out ten days before the article was published.
Its not clear what you are asking for. But: 1. You should keep you questions in a database of some kind. 2. You can create a User Control to each question.
Wow! This seems like it could be really cool!
I already think about DB. But, I need place for this DB and stability connection (what I don't have), that's why searching on XML (for example). Thx for answer.
LiteDB is great. You can install it using Nuget and it uses hibernate.
Okay, I remember this, thx!
&gt; the former feels wrong Feelings aren't a great way to make technical decisions. What problems, specifically, does making your fields nullable cause? You can solve a specific problem. You can't solve a feeling.
I mixed those up, giving them default values feels wrong. Making them nullable is a complete pain because I have to check if they are null whenever I access any of them, but in reality I'm pretty sure they cannot be null because an exception would hae been thrown.
I thought this was about consuming legacy services. Instead, it's producing new SOAP web services. Kids, don't do that.
&gt; However, wouldn't you say that cases like this are an ugly, unfortunate thing to be avoided when possible? Sure, but you haven't really made a case on how to avoid this. C# also doesn't currently offer union types [(as mentioned elsewhere in this thread)](https://www.reddit.com/r/csharp/comments/bkjf7a/c_80_pattern_matching_in_c_80/emhjnpa/), so as soon as you deal with a method that accepts an int, a bool _or_ a string, you'll have to figure out the type at runtime. The Visitor pattern can do that with a lot of boilerplate, but C# 7 patterns can do it in a safe and reasonably concise and readable way.
It was! and it was much easier than I thought!
Why in the seven hell would you do soap?
I don't want to waste time on youtube (sorry). Would you please explain what a script engine is? What's a good use-case for what you're working on? Thanks.
You are young and I assume you have not obtained a degree in CS which isn’t necessary to be able to code but if you plan on getting a degree that will likely fill in any gaps you feel you have. You learn a lot of mathematics and CS more in-depth than just being able to code up an app. I don’t think you have anything to worry about at this point, get your CS degree and that will round your skills out.
Yes everyone feels that way... I complained to some coworkers about some code a while ago - then it turned out it was my own creation from 4 years ago. Don't sweat it. As to the best way to learn? Join a team and listen to the feedback you get. It's the quickest way to improve when if not everything you learn is 100% the best way to do things...
Okie doke, thank you for the reassurance! I've been meaning to look for some programming buddies for a long time anyway, so hopefully I can sometime soon for their honest feedback.
That's a pretty good idea, I'll have a look for opportunities in my country. From what I've seen, most courses for programming or games development are for beginners and up, so maybe I'll just have to bite the bullet and do a while of things I already know until I get to the good stuff.
An outstanding little extension that displays the Cyclomatic Complexity of every method in a Codebase and colour-codes it so you can see complex areas at a glance. I have found it to be an excellent help while doing Refactoring work and would highly recommend it! https://marketplace.visualstudio.com/items?itemName=Elisha.CodeMetrices
It’s called “imposter syndrome” and I’m sorry to tell you that it never goes away. A few good things about it though: a lot of other people have it, it means you’re self-aware enough to not be Dunning-Krugering your way through life, and it’ll help keep you humble and inquisitive.
I guess it's one of those silver lining situations then, I'd never heard of impostor syndrome until now but googling it and it does seem to be EXACTLY how I feel. Oh well, like you said, it'll keep my ego in check.
&gt; I have to check if they are null whenever I access any of them I haven't started using c# 8 yet, but is the compiler actually enforcing that? Because if it's not, no you don't, and you can simple enforce the constraint in one place, like you believe it already is, and not litter your code with `if (context.Stuff != null)` everywhere. And if the compiler is enforcing that, google the fundamental theorem of software engineering.
I'm paid tripple what I. Worth....
I would second this. Rather than a big list of “Here’s everything you can do in C#, with one concept per chapter” as is the norm for programming books. This book is excellent as it shows how C# evolved from its earliest incarnation up to C# 6 (I think) Plus Jon Skeet is a legendary figure in C# land. His contributions to Stack Overflow and the C# Language are too many to count.
It’s though to relay sarcasm and genuine encouragement together in a text-based medium, so apologies if it didn’t entirely come off as such but I truly meant to be fully encouraging. I’ve worked with so many people on the opposite end of the spectrum (that Dunning-Kruger end) and you cannot believe have destructive they can be without ever even realizing or comprehending it. In a field as exacting as ours, this is doubly dangerous a trait to have. TL;DR: don’t worry, you’re in great shape.
Okie, thank you very much! I didn't find it sarcastic at all, quite kind actually!
I'm not entirely sure what you mean. If I make the type nullable, then the compiler will throw warnings in every function where I use it without doing a null check. If I make it not nullable then I have to either give it a default value or set it in the constructor.
I use to teach at the college level. I could tell when a student was finally starting to learn or become knowledgeable when they realized how little they know. I would call you teachable because what you stated demonstrates that you know you need to learn. Believe it or not that puts you ahead of some people. I'm now in charge of a department of programmers and I'm still astonished at what some people accomplish and the conversations I witness; however when I remind myself how broad the amount of knowledge is that encompasses programming, I am encouraged and humbled at the same time. Just do you, and learn from those who awe you.
Yeah it will probably help to study different data structures and learn how they work. Kinda focus on the core of CS vs just writing apps. Learn how things work the way they do and that will give more insight into understanding more complicated programs.
If you don't feel stupid, it means you're not pushing yourself, and that's not good. You should get better over time so that things you did before are second hand, but that just means you'll have new battles/knowledge to conquer.
The nice thing about formal education starting at the basics is that you'll find you probably have gaps in your education. They won't seem important at the start but all things build on other things and by the time those gaps hurt you, it is too far from them to recognize what you need to know.
Is this like hard core meta programming? Love it
this is one of those times when overall effort and maintainability may be best optimized by repeating yourself. Only you can make that call but don’t feel like you have to DRY
I need an article explaining the why though.
thank you!
The part I'm weakest on is unit testing. It'd be nice to watch a simple crud app from start to finish for a mvc / pages asp.net or core. Alas, those are far and few between.
I have found that frequent code reviews keep importer syndrome in check and help everyone get better at programming. Even if you aren't coding professionally I would look for people to review your code.
It’s not just ok to fee that way but required in my opinion (after 15+ years of software experience). This feeling makes you humble and motivates you to go back and learn that damn this you just saw! So pickup stuff made you humble and make it look humble...Good luck !
well one thing you are missing is a mathematical education. i dont know where you are in life, but i guess you are about to finish school? i started programming with 16, and looking back i had no fucking idea. studying computer science taught me so much, which i wouldve never grasped or come accross if i had continued the selflearned way. i also have the feeling that my teenage brain wasnt really capable of doing this kind of thinking, but thats probably just me
What you may want is users.where(user =&gt; user.roles.any(role =&gt; rolesToFilterBy.contains(role))) This should get any users where any of their roles is contained in the rolesToFilterBy list. I wrote this on my phone so please excuse any errors.
I haven't used web forms or the grid view in a long time so this might be wrong. Normally I'd have the query populating the grid return the primary key. In the click event you can have that value as a parameter to the click event. onClick=eventNameInForm(id). If the click event is like winforms where you don't pass a parameter you could set a hidden cell in the grid view and try to access that.
My suggestion is, when you find something that gives you that feeling of awe, think about how you'd implement it. Google it and get at least a working theoretic model, no need to figure out the concrete implementation. Even better, if it's open source just read their source code! If you don't understand something in the code, google it or ask about it. Devour that knowledge and you'll feel much better about it. Also try to remember that specializations and division of labor exists. There will always be people much better than you at some things. Take one of your subskills and try to polish it. Having one thing you know really well can have great effects on your mindset. Just pick something: * Shaders * Particle Systems * Pathfinding * Behaviour Trees * Deep Learning * Reinforcement Learning * Procedural Generation * Multiplayer/Networking (actually I don't recommend this one) * Unit Testing * etc Making skills a part of your identity in order to secure isn't exactly a good idea. But I often find that it's a necessary and unavoidable step to developing a more mature personality. You have to get something right first, to the point that your brain can't deny it, flaunt a bit, then let go. Also sometimes thoughts of inadequacy can just arise from being used to thinking the same negative thoughts over and over. Try to monitor your thoughts and *interrupt* negative ones with alternative, more positive thoughts. Yes, sounds like bullshit, but this bit of CBT helped me with much worse issues. If you find yourself feeling too impressed, interrupt that thought and replace it with another thought about how their project is great but it's not something outside of your reach if you studied that problem. If you find yourself mentally denigrating your own ability, interrupt that thought and replace it with thinking that you're doing well and will continue to get better, so it doesn't matter that other people are good as long as you keep getting better and having fun doing so. Sometimes you can get *angry* about the feelings of inferiority, or at least feel some sort of determination, and sublimate those feelings of inferiority into creative force. You can then use that force to write more code on a personal project or read a (e)book. Pick up a book on Graph Theory, DevOps, Pathfinding, Machine Learning, something! Set up the foundation for a future where you're the one wowing people. It won't happen on its own, but it will definitely happen if you plant the seeds now. Just try to figure out how to enjoy getting there.
dude you're 18. You've got a long career ahead of you.
Yeah I noticed, but didn't really have any alternative equipment. Definitely at the top of the list.
I've toyed with what you are talking about, and got it working easy enough. I'm mainly just exploring alternatives to what people are doing. Appreciate the feedback though.
&gt; it turned out it was my own creation from 4 years ago. Here's a hint from an old-timer about how to avoid errors like that: *comment your code*. No one else does, so when you see comments you'll know it's yours. ;)
The fun thing about assemblies is that you can read their bytes and send them through TCP/IP. You could easily make a Xamarin app that allows you to write scripts, compile them, then send them to another device for execution.
My main goal is to write a dynamic language that requires no re-compile, that can act as an add-in to any (C# in this case) application. It can be good for allowing users to customize your applications on the fly, or even allow yourself to do the same with no need for recompile. The other goals that I have set out to accomplish with these videos, is to show how to quickly approach (Expression trees, Parsing, Lexing/Tokenizing, and Execution). That's the summary of it all anyway.
So it's yet another language, that users of your stuff would have to know to use it? &gt; Expression trees, Parsing, Lexing/Tokenizing Cool magic to be messing with. &gt; that requires no re-compile I don't even know what that means *theoretically*. In .Net world code has to be pre-compiled into IL, right? Are you avoiding that somehow? Sorry to ask dumb questions. I'd really like to know though.
This is so encouraging to me. I feel like the more I learn, the more I realize just how unbelievably vast the world of programming is. I had no idea how deeply I could delve into a single language or topic if I wanted to specialize. Going into college I basically thought that a programmer was a programmer was a programmer. Now that I have enough knowledge to putter around in just about anything I am learning that it is a slow and tedious process, but on the flip side it is incredibly rewarding learning to glue everything together. I can't get enough. The realization that there is an endless pool of knowledge to dive into is exciting to me.
You’re 17. You have so much time to learn. Continue to apply yourself. Love to learn. Seek out things you don’t understand and understand them.
This is great. Also, /u/TT456 I hope you have the understanding that Unity is not 'just' C#. Learning C# will help you understand how to program in C#. Unity is a framework for creating games with C# as a language. I think that's where you may be getting frustrated. The most amazing C# Programmer who has spent 10 years doing Enterprise level web services, will have a challenging time as well if they have never done 3D Graphical work either. It's a different beast that has a similar base language, but different dialect. Different things and new terminologies that don't exist anywhere but in 3D Worlds (Like Quaternions and Euler Angles, Raytracing, etc) these things don't exist in your average Enterprise Customer Management System (CMS). Don't fret it. But what I could recommend, is treat Unity like you were doing C# for the first time. You didn't just go all in creating a Server-Client Point of Sale solution for Multi-Location Franchises. You probably started off with very simple exercises, your standard "Hello World!" examples, and things like Black Jack in a console window application. &amp;#x200B; Start off simple, and expand. Each time you add a new feature you will have to learn how it works and pretty soon you will have some foundation knowledge of how Unity Engine works. The only thing I have to say, is when you say, "I am going to make a game that does this." and the first task has more than one topic you have to learn, do them individually. &amp;#x200B; Make a side project that deals with that ONE aspect. Nail it and learn it, then go back to the next aspect and make another side project that deals with that aspect. When you have learned those, then go back to the main project. You will have more of an understand of how it works together at that point.
&gt; In .Net world code has to be pre-compiled into IL, right? https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit?view=netframework-4.8
&gt; The System.Reflection.Emit namespace contains classes that allow a **compiler** or tool to emit metadata and Microsoft intermediate language (MSIL) and optionally generate a PE file on disk. The primary clients of these classes are script engines and compilers. Ah, so it *would* be compiled.
If you want to focus on that one word and ignore the rest of the article to feel like your original understanding is correct, go right ahead. But if you'd actually like to understand, then no, that library allows you to emit IL \*\*at runtime\*\*. That's how people \*\*make\*\* compilers in C\#.
It would depend on the use case, but in the general case (which is not very useful) something like the following: public abstract class IrritableBowelSyndrome { abstract T Callback&lt;T&gt;(Func&lt;int, T&gt; onInt, Func&lt;bool, T&gt; onBool, Func&lt;string, T&gt; onString); } internal class IBS&lt;S&gt;: IrritableBowelSyndrome { private S value; public IBS(S value) {this.value = value;} } internal class IrritableInt: IBS&lt;int&gt; { abstract T Callback&lt;T&gt;(Func&lt;int, T&gt; onInt, Func&lt;bool, T&gt; onBool, Func&lt;string, T&gt; onString) { return onInt(this.value); } } internal class BowelBool: IBS&lt;bool&gt; { abstract T Callback&lt;T&gt;(Func&lt;int, T&gt; onInt, Func&lt;bool, T&gt; onBool, Func&lt;string, T&gt; onString) { return onBool(this.value); } } internal class SydromeString: IBS&lt;string&gt; { abstract T Callback&lt;T&gt;(Func&lt;int, T&gt; onInt, Func&lt;bool, T&gt; onBool, Func&lt;string, T&gt; onString) { return onString(this.value); } } Unfortunately because as I said the general case is not very useful, this example looks extremely unappealing and if you asked me what its benefit was I could only give you weak answers. But when we step into real-world cases the benefits of good OO design become more clear. As you said, this really is just the visitor pattern, which is one of the absolute most important OO patterns. The pattern matching case being discussed is really just a question of "When the visitor pattern becomes sufficiently small, should we even use it?". I say yes, because software that is small now will not stay small for long.
&gt; hat library allows you to emit IL at runtime. Yeah, I knew that. Yes, I was thrown by that word, which is why I asked about it. Stupid me for not inferring that the word was misused. Thanks for your patronizing reply.
Coding is a tool akin to writing, you don't learn to read and expect to be able to read (understand) and write any book any one else wrote right? There are some truly advanced algorithms out there and tons waiting to be invented, and complaining you don't understand them would be like complaining you can't understand Einstein's relativity because it's written in a book. :) Like others have said, specialize in and advance your understanding of things you find interesting, and don't worry about understanding everything out there.
&gt; The other goals that I have set out to accomplish with these videos, is to show how to quickly approach (Expression trees, Parsing, Lexing/Tokenizing, and Execution). I just became your *second* subscriber. :) Good luck and thanks for doing this.
&gt; Does anyone besides Microsoft \*do\* that? Actually, I am. Most people use C or C++ because they're faster, but C\# isn't much slower (I've seen 3X in some tests) and it's the language in which I feel most productive ¯\\\_(ツ)\_/¯
You write C# compilers?
Compiler. I'm a novice at writing compilers. Mostly in the preliminary design/writing a lexer phase right now. Totally hobbyist project, btw. I work professionally with C\#, but not writing compilers. /r/ProgrammingLanguages if you're interested in that stuff.
Here's a sneak peek of /r/ProgrammingLanguages using the [top posts](https://np.reddit.com/r/ProgrammingLanguages/top/?sort=top&amp;t=year) of the year! \#1: [I made a "programming language" based on COBOL syntax](https://np.reddit.com/r/ProgrammingLanguages/comments/awr3th/i_made_a_programming_language_based_on_cobol/) \#2: [pLam - for anyone exploring λ-calculus](https://i.redd.it/kyx49egwsx021.gif) | [12 comments](https://np.reddit.com/r/ProgrammingLanguages/comments/a0yyfc/plam_for_anyone_exploring_λcalculus/) \#3: [LDPL 3.0.0 and why you should work on silly things](https://np.reddit.com/r/ProgrammingLanguages/comments/bcmhkn/ldpl_300_and_why_you_should_work_on_silly_things/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
The catch is to give examples you kind of need to do something trivial. Then when people have to do something non trivial, the just cant make the jump.
I've written software that's in active use by $LARGE\_CORPORATION. If it failed, $LARGE\_CORPORATION would be having a very bad day, and in turn, I would be having a very bad day. I still google how to format strings at times. Don't worry about it. I'd bet that a lot of people who show stuff off in Unity3D google how to format strings, too. Programming is such a massively wide area that you will never know everything, and you will never be proficient in everything. This is mostly because once you advance past the specifics of a language, you start to apply your ability to program towards a specialized field. For example, 3D programming is... 3D programming. It won't teach you machine learning. Likewise, machine learning won't teach you 3D. You may be able to do 3D and ML with C#, but realize that there is literally zero overlap between the two, other than the fact that you may be using C# to work with them. When you look at the "obscure and advanced mathematical functions" what you're really looking at is someone who understands 3D applying their knowledge to C#. Maybe you have room to improve your C# and general programming skills. But what you're really missing is an in-depth understanding of 3D, which takes time. A lot of time. It's something that you can practice every day for years and still learn something new every day. (And, I should add, just because someone makes something that looks cool doesn't mean that they understand what they're doing!) Pick something. Practice. Iterate. Improve. Don't let the success of others in one field be a reason to doubt yourself in another field, or even that same field. Doing that just doesn't make sense.
Cool stuff, man. I'll check the sub, thanks.
Find something less niche. Game development is a special breed of crazy. Most of the fancy math code in there is impossible to understand with a math degree and years of linear algebra/advanced geometry. So you can’t look at that stuff like regular code - you have to realize that it’s actually advanced math
I think a lot of stuff ure not 100% into looks like you could never do something like this. Its like going to an old, not commended project and try to understand what this super genius past-you did. I think a lot of the stuff seems way harder then it is if you just take a look.
I've been programming professionally for years and I still feel inadequate in my programming abilities. Especially when some college level kid can come in and program circles around me and that recently happened. Like you said, the subject is broad and there is a lot to learn.
Func is just calling itself. You don't need a thread if you're using a timer. Set your timer elapsed event to do your UI work (timer.Elapsed += uiWork;)
Plus you'll start with a nice GPA boost that will help you out when you're struggling in some of your advanced classes later on.
The job I'm at actually has coding standards _against_ comments. Because the code should be "self-documenting". While we do a great job at it and do proper code reviews, there's still cases where comments would've saved a great of time fixing a bug. Or at least not introducing a new one...
&gt; Because the code should be "self-documenting". Yeah, I think that one's dumb... but there's a large consensus that it isn't. &gt; Or at least not introducing a new one... Aggravating! Grrrr
What's the end goal here? It's possible to take a string of C# code and compile it at runtime into an "assembly" you can run. It's possible to emit IL to dynamically build classes, either manually or through something like Mono.Cecil. it's possible to build expression trees dynamically as well. If the goal is to build some sort of domain specific language that's based on c sharp and can leverage its features, then sure. But if it's to execute normal c sharp code at runtime, there's already solutions that handle that
It's a noble aspiration, but not one that should be too strictly adhered to. Otherwise it becomes, like many other things, a distraction from efficient, working code.
Programmers will always feel like they are behind on something or behind someone else. Don't let that get you down. We are all beginners and experts in some form or another. For example to another programmer, you may be light years ahead of them. &amp;#x200B; The great thing about programming is that you can never master it all, but you can continue to learn new ways to do something you were not able to do before. &amp;#x200B; Programming is just problem solving, the more you hone in the skill of problem-solving the more advanced your coding will become. &amp;#x200B; Some of the best advice I was ever given was, "If you can't read the code out loud and it can be understood generally, it may be too complicated or written incorrectly". This is when you go back and try to simplify it even further. Treat coding like a spoken language and really try to speak it fluidly. &amp;#x200B; Math is the next level after you have fine-tuned your skill set with a specific language. Start taking simple math algorithms you find and try to apply them to different data sets or real-world problems. This will help you build upon your skill sets and make your code even more fluid. &amp;#x200B; Once you have found the balance between math and code, you will find your self being feeling less "adequate" and more confident in your coding ability.
I just realized that I didn't address your questions... Sorry about that. &amp;#x200B; **Meta Programming**: As far as the meta programming side of it, yes in many ways your program can become shape shifted into just about anything you want using approaches like this. That being said, the main intent would be to allow you (the programmer) to expose or limit what users would be allowed to do dynamically, and as such essentially becomes like a script API to your application(s). &amp;#x200B; Beyond the meta aspects of the scripting nature of the code, the one I like the most is the power to somewhat break the type sensitivity that c# has with most efforts within. I definitely tried to keep some basic types that I know I would use all the time around, but I limit them to a small handful. In this way, I can leverage the DLR aspects of .NET, but I can also reason about things more generically. &amp;#x200B; To me this is similar to what Javascript has done to allow a variable to become a very limited set of things, and that's just it; a variable could be any one of those things (this wildcard disregard for type strictness allows for meta programming approaches to thrive). &amp;#x200B; **Open Source**: As far as anything that I share, I would consider it open as far as \[sharing it, learning from it, and basing other works via inspiration/direct copy/etc... for non-commercial work\], but I also like to have credit. &amp;#x200B; My Open Source License of choice is: [BY-NC-SA](https://en.wikipedia.org/wiki/Creative_Commons_license) &amp;#x200B; My reasons for this License choice is simple: * I've put a lot of hours into the things I've studied and figured out (this did not come free, it was at my time's expense). * The open source community has enabled me to freely learn many (***not all***) new concepts, technologies, etc... * Therefore I feel an obligation to share the things that I have learned, so others can grow likewise (freely at their own expense of time and effort). * I feel any works based on my own expense of time and effort should be protected, and therefore should not be freely exploited by any commercial effort that would not compensate me for it without me entering into agreement with them (whomever they may be).
Thanks a lot! Now I've another problem)) Time redraw if I move form under task bar
Because you work for a bunch of troglodytes. Seriously, some of the stupid shit I've seen companies force their employees to do just because the manager doesn't understand new tech is astounding. Hell my buddy works for a fortune 50 company, and they are redoing their entire e-commerce presence in asp.net web forms with .net framework 4.0. It's baffling.
Welcome to programming my friend! One indication of maturity is realizing how much you don't know. As long as you feel confident in your ability to learn you should never feel inadequate.
I realize that I can't expect everyone to watch these videos all the way through. If you could, you would most likely get the idea that this has more to do with learning **HOW to approach** language processing via Parsing/Lexing/Expression Trees/etc... With the added side effect of an admittedly improvable basic working script engine that goes through these processes to become a powerful domain specific scripting language processor. &amp;#x200B; Thank you for the feedback as it allowed me to reflect and answer for myself in a more articulated way what the goals of my efforts are. &amp;#x200B; In short the goals in order are: 1. Learn something: 1. Get the basic/main ideas that you need to make a script engine from scratch(ish) (Thanks C# and LISP for the help). 2. See how easily these concepts/topics can be approached upfront, without investing a bunch of time. 2. See how quickly these concepts can be put into working order in a very intentional / flexible way. 1. Watch something you make respond with behavior you would expect (Working Demo of the topics covered / AKA synapse). 3. Keep Learning (if you see the benefit for yourself). 4. Have a frame of reference for domain specific language building / scripting / etc... with confidence that you can approach the topic in fairly short order, with confidence.
This thread blew up faster than I could pay attention to it (Thanks for the subscribe). MY short answer is that I've compiled what I needed to, so that my [dynamic](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/using-type-dynamic?view=netframework-4.8) stuff (script language) can be handled at runtime. If you would like to dig further, I would look at this article describing the [DLR](https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/dynamic-language-runtime-overview).
thank you!
Debugging will be more difficult, unless you double down on the imperative nature of C# and .NET but use FP's concepts as much as possible. &amp;#x200B; In an imperative language you can have: Immutable types; algebraic data types (records and union types); pure functions; "method signature honesty" like shown in the blog; pattern matching; and more.
It is not dumb, just most people don't know how to write code that is "self-documenting". On the flip side, most people also don't know how to write comments that are useful.
First it is normal. Second obscure and advanced mathematical functions is not programming, that is math. They are applying that math through programming, but it is still first and foremost math not programming. You should measure your programming ability not based on how well you understand fancy math. You should base your measurement of yourself on how well you implement the logic to accomplish a goal. You should be asking, "Is the logic sound? Are there any bugs?" , "Is my implementation human readable?", and "Is this the most simple solution to my goal?". If you have something that is simple with sound logic and is human readable you are doing a good job as a programmer.
I felt this way and thought I could not program anything serious until I was in my mid 20s. Eventually it clicked and I realized how much more I needed to study. The feelings of inadequacy will never go away and they are a sign that you're still on the right path. If you can remain humble and also never stop learning from other people then you will succeed before you know it.
That's precisely what operator overloads are for. The derived type is in control of how it is to be matched.
Ridiculously common. Just keep learning, and don't lose your passion for figuring out the next thing you don't understand. It's part of the fun of programming.
Because SOAP + WSDL allows you to develop client applications that have a sane client mechanism that knows what to expect from the requirements and results of the service. DataContract objects are far more useful for consistency than loosey goosey REST services with random JSON.
Game development is not niche and not math heavy. It totally depends on what you are doing. If you draw a giant venn diagram of all the programming jobs that exist, you will see that people who write render pipelines will fit into your description, but also not fully, since it is more about experience and less about having a degree in anything. But graphics programmers are rare and mostly used in any part of the entertainment industry and scientific scenarios which involve CGI. But most of the people in the industry are not graphics programmers and especially not those people who actually create what would be considered the game itself. On the other hand, these are mostly very experienced programmers, so this would result for OP in just "learning by doing" to reach the desired qualification and knowledge.
I have a workshop project and it's all there. I have some wikis with tutorials. Unit testing is simply 3 steps: Setup Act Assert With tear down (if needed) in the end, to make tests Stateless. In workshop i have an example of how method shoot is tested, which has random chance of hitting. To test if shoot was Hit you do the following: Setup: Create shooter and target soldiers Mock Random (by overriding virtual method next to always return 100). Act: Shooter shoots at target Assert: Was target damaged by shooters damage
I had the same feeling as you. I first picked on programming when I was 12 and I have been sticking to it since then (I am 24 now). Well, I did feel like I have improved little by little I always felt like I am behind and still not understand many things about programming. Only after getting more serious and actually having a path to follow, that's when I finally started to understand things better and use programming to actually make real world applications. And that is only after years of messing around with programming. All of those years did not go to wasrw. They definitely made the process much easier and faster
This is great. We have to use SOAP for some interactions and it has delayed our full transition to Core.
If you have IFoo and from that you have 3 derived classes, FooA, FooB and FooC. If these objects are passed through several methods as IFoo but further down the line there’s a need to perform a specific operation with FooC, how does operator overloading help?
Thank you :)
I kinda switched to WebSurge some time ago. Using GraphiQL for GraphAPI projects
After working a lot with T4 templates, and publishing my first VS2019 extension (T4Executer), I decided to tackle another issue I had. T4 Templates are just plain text, so there is no syntax highlighting. It could be pretty frustrating to see the difference between outputted code and control logic, having output, statement blocks and class feature blocks all in plain white color. My next extension adds a custom editor with classifiers for .tt and .ttinclude extensions so you can easily see what code is outputted and what is logic. I still need to figure out how to apply full c# syntax highlighting inside these class feature blocks though. [Marketplace](https://marketplace.visualstudio.com/items?itemName=TimMaes.t4editor) [Github](http://www.github.com/Epsilekt/T4Editor)
This is a different scenario than the previous comment which was using composition to apply cross sub-type logic which is inherently internal to the subtypes involved. In your scenario FooC should not be downcast to IFoo to prevent potential casting runtime errors.
I'm working in Smart Metering Company. Recently I Integrated our system with Oracle MDM (Metering Data Management System), so I had no other choice instead of writing soap services because Oracle MDM can only consume Soap Web Services using WSDL. Last year we moved our System from .Net Framework to .Net Core &amp; minimised 7 servers from 10 for handling the same number of Smart Meters Requests. That's one of the reason I wrote Soap services for MDM Integration using .Net Core as well.
There are two main technologies you can go with for this, UIA, or IAccessible (MSAA). IAccessible is older, UIA is newer and generally recommended (but if it doesn't work for the application you are trying to control, see if IAccessible might help). There is also a newer IAccessible2, but support for that from C# is not great, so probably better off trying one of the other two. IAccessible is in the Accessibility namespace (reference the Accessibility assembly). You may also need some pinvoke calls on oleacc.dll, for example an easy entry point is the WindowFromAccessibleObject call, passing in the hwnd of the target application window. UIA is in the System.Windows.Automation namespace (reference UIAutomationClient, and probably UIAutomationTypes too). One common entry point is AutomationElement.FromHandle. You will probably find the Inspect.exe tool included with the Windows SDK helpful, as it can show a visual tree of what these automation APIs will be able to access, so you can inspect your target application. There are other Accessibility visualisation tools available. The whole idea is you work with objects (buttons, controls, etc.), not mouse co-ordinates, so it should be far less fragile.
Not in any intended way, but I suppose you could swap out the internal fields with reflection. It seems like a really bad idea though. Is the pool behavior completely outside your control?
I don't think so. I'm no engineer but I think that since a list is n-long and you're doing an operation on every element it's little o would be o(n) so its big-o can't be lower than that.
[removed]
Is there no way to just swap the first pointers in a list or something to this effect? Or is that not how lists work, I'm an infant babby boy.
No...
Yep, I just took a peek on List&lt;T&gt; with ILSpy, it seems that the underlying pointer is a private var. I think I should just work on the pool instead.
If you want to learn to make games and be efficient at it, you should create your own mini game-jams at home. Only allowing yourself to work on a project for a week makes shure you scope the project accordingly and forces you to manage your time better. Having done a couple of small games this way will teach you way more than spending the same amount of time following tutorials or building a game that never gets finished. If you want to show off your mini-game jam creations, i will be glad to find it on reddit :)
There is a pretty great PowerShell module written around the .NET UIAutomation framework (STUPS UIAutomation, should be on GitHub.) I’ve used it extensively for UI testing and it should handle your needs pretty easily.
You could return IList&lt;T&gt; instead and make a custom List&lt;T&gt; wrapper that implements IList&lt;T&gt; and lets you swap out the wrapped List&lt;T&gt;. Or you could reimplement List&lt;T&gt; yourself (e.g. copypaste MS' github source)
Programming social media is the same as regular social media. People show things they re proud of. If you take this as inspiration then that is great but it can for sure make you feel less good because all you see is other peoples success. I have 6+ years of experience now in the industry and I have done some things that turned out great and some things that turned out awful. I had a meeting recently with some new graduates that were scared of how good everyone else would be when they started working; but to be honest people are good at different things. Just because a person is experienced in CS doesn't mean that they are better in every aspect of it.
As said, swapping two `List`s can be done simply by swapping the top-level fields (pointer to elements, size, and capacity). There's no need to do something to every element.
C# itself can be scriptable, take a look on [http://www.csscript.net/](http://www.csscript.net/) . &amp;#x200B; Your own programming language can be indeed developed for fun, but doubt it will become de-facto standard programming language any time soon. I by myself want to explore deeper existing programming languages and making them scriptable - that is C# scripting, and C++ scripting. [https://www.reddit.com/r/cpp/comments/bg29qb/c\_as\_a\_scripting\_language\_c\_runtime\_type/](https://www.reddit.com/r/cpp/comments/bg29qb/c_as_a_scripting_language_c_runtime_type/) [https://www.reddit.com/r/csharp/comments/bh031f/c\_hotreloading\_scripting\_support/](https://www.reddit.com/r/csharp/comments/bh031f/c_hotreloading_scripting_support/) &amp;#x200B; But even there people recommended to use Julia, Python, and other languages. Basically before starting to write new programming language it makes sense to analyze existing programming languages and what they provide / offer. &amp;#x200B; Don't want to discourage you still - I have analyzed Abstract Syntax Tree (AST) construction in gcc / clang once upon a time, and it's heavy beast in overall. Just talking about parsing AST, not talking about contruction of AST tree. &amp;#x200B; But there are attempts to improve for example C++ AST - for example take a look on this one: A Principled, Complete, and Efficient Representation of C++ [http://www.stroustrup.com/gdr-bs-macis09.pdf](http://www.stroustrup.com/gdr-bs-macis09.pdf) &amp;#x200B; I suspect that one even thus this article exists - it's still a "prototype", and Gabriel Dos Reis and Microsoft team is trying to make a standard from it - but for C++ AST improvement/ C++ standardization is multi year project with a lot of broken glass on the way. &amp;#x200B; One approach which I can think of - is to collect ideas of what you want to do and how, and use that document as discussion base with various people. &amp;#x200B; C++ as scripting language [https://docs.google.com/document/d/11Tl3AMtTkd\_qfcgBzcQLCupHmI\_v0iJ1KuH7z\_rpBDw/edit#heading=h.4m7wir37r5jx](https://docs.google.com/document/d/11Tl3AMtTkd_qfcgBzcQLCupHmI_v0iJ1KuH7z_rpBDw/edit#heading=h.4m7wir37r5jx) (Notice: "Analogue projects" - chapter - it's description in my own terms of analysis of what is done, how and where) &amp;#x200B; But my own experience shows that even thus people have some interests in given area, they don't want to invest their time at least directly. &amp;#x200B; It's like a religion or cult - you want to drive in your idea and find contributors and followers for it. :) &amp;#x200B; But even if you don't want to form a cult around area, could be simple tutorial.
As an alternative to writing it in c# there is also autohotkey: https://www.autohotkey.com a scripting language specifically built to do this sort of thing.
Given lists a and b: var c = a; a = b; b = c;
Why not just make an FTP server?
&gt; Let's start with **why** (ref. Simon Sinek). Microsoft provides a structured and stable platform. Totally different than **hacker growing startups** that may disappear next month. &amp;#x200B; WTF are you smoking?
I feel like this all the time. Don't worry about it soldier on; you are still learning and always will be. I started programming in 1972.
I also worked at a Lidar Company few years ago and i also processed the data. I wrote a little program in c# which converted the fitting surfaces like roofs or similar in the correct order and the company was really happy because they always did it manually from a txt file.
&gt; Given lists a and b: var c = a; a = b; b = c; Well, this won't work. The returned list A is already referenced by the object pool, swapping the A &amp; B outside the pool won't prevent A gets returned and cleared.
&gt; loosey goosey REST services with random JSON. You make a shared library that contains the models. You make an ASP.NET server project that constructs and send them, and a client project that consumes them. You can even use TypeScript to do so, and TypeLite or similar to generate TS code from the C# models. Bam, strong, statically-typed models. Nothing loosey goosey or random about it. Meanwhile, it’s much simpler, faster, uses HTTP more correctly, and works in many more contexts.
Well, I asked myself **why** would I bet on using MS technologies. I don't want to count on *yet another crowdfunded startup* that will be gone (and I will end up in deep shit) &amp;#x200B; Thank you for the comment. Perhaps the text was not so intuitive (I've updated it).
[https://docs.microsoft.com/en-us/visualstudio/ide/?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/ide/?view=vs-2019)
RemindMe! 1 week
RemindMe! 1 week
I will be messaging you on [**2019-05-12 11:09:43 UTC**](http://www.wolframalpha.com/input/?i=2019-05-12 11:09:43 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/bkvdnp/is_there_some_way_to_swap_the_content_of_two/emjxgvz/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/bkvdnp/is_there_some_way_to_swap_the_content_of_two/emjxgvz/]%0A%0ARemindMe! 1 week) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! emjxh0x) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Have you tried doing this with pointers?
started in 1989 with turbo pascal. have designed and sold many apps. have made a great living writing code. feel exactly the same way about my abilities.
Core vs Framework: This boils down to Open Source and runs everywhere vs Closed and Windows exclusive. The Core is having less libraries than Framework, but the divide is shrinking with every version.
Down with oppressive temp variables! (a, b) = (b, a)
I'm not sure I quite understand op's question then, because he said "swap the content" not just swap the pointer to that list. I figure that if that what he wanted to do then a simple O(1) swap would indeed be straight forward and possible and not a question.
That just swaps references.
He can’t swap references since there are other references to the lists as well. He could swap the internal state, though, since there are no other references to that. This obviously requires some reflection magic.
&gt; Lore suggests that this can cause stack corruption which may bite you unexpectedly later. Well it can cause problems, sure, but stack corruption? Each thread has its own stack.
:) Sorry for being so abrupt. I should not post anything before I've had my first coffee :)
Instead of ILSpy, you could use [Reference Source](https://referencesource.microsoft.com). But to add to the discussion: I think reflection may work fine, however, don't forget that reflection executes slower.
Maybe implement a copy on write list? Then you can safely hold the reference. Part of me wonders why you’re holding the reference in the pool. Why return the object if you still need it.
I'm 37, developing professionally for 15 years now. I feel it's important to occasionally evaluate yourself, your career, your place in your career, and your career's place in your life. You may find that what you feel at 25 is different than what you'll feel at 30, and much different than what you'll feel at 40. Personally at 37 I resigned to the fact that I will not be a pimped out developer that knows the latest and greatest. I won't be able to hold a candle to many of the people in this sub for example, and that's after 15 years in the industry. You know what? I'm more than happy with that. There was a time I was with my nose in the book. Spending personal time on learning. Looking to change jobs at cost of comfort for career advancement. These days, I have a family. I make good money and I'm more than comfortable making more impact business wise than using the latest and greatest technology. I work to live, and I would never want to go back to living to work. I am not trying to discourage you, I'm simply saying stay true to yourself and what you really want to achieve. And keep in mind that you need to reevaluate every 5 or so years to see if it still makes sense to you.
random json ? You mean random as in "I can choose whatever I want", I guess, not in "I don't know what will happen" ? I perfectly know what to expect when I call a REST api, since it's as easy to read the documentation as the datacontrat of a soap service.
&gt; Instead of ILSpy, you could use Reference Source. wow, this is handy. But as I'm using Unity3d here, their mscorlib impl. has quite a few differences with MS .net lib, so I still have to use ILSpy to be sure. E.g.: Their List.AddRange( list ) doesn't generate GC. &gt; I think reflection may work fine I think it could work, but it would leave some uncertainty in code maintainance so I prefer not touching their internal impl.
._. welcome in 2008.
Please, why do you HAVE to use SOAP ? Is there something you couldn't do in REST ?
We integrate with the Swedish government mandated messaging platform for healthcare providers. It only accepts SOAP. That is actually not the biggest problem with it. As an example, it can take years (and a lot of work) to get an updated version of a contract approved...
Yes Please don't compare yourself to others! Here is the formula. In 2008-9 I wanted to make my first iPhone game. I called it Star Catch. Stars would move around the screen and you have to put a lasso around the same colored stars to make them join together. I had NO idea how to make a lasso with code and display it. Your value as a programming isn't the fact that you know this mathematical formula or that formula, it's that when presented with a problem you can find the best solution, the simplest solution to the problem. Knowing complicated stuff isn't the hallmark of a great programmer is. Facing the unknown, YOUR UNKNOWN (not someone else) and overcoming it is what makes you great. I was able to study all the aspects of getting my lasso code to work. I figured it out. Someone else could have done it better than me. SO WHAT! I don't give a crap about them because they weren't helping me anyway! Where ever you are and whatever problem you face, you face it and use what you know and what you have to overcome it. From this you will build a tool kit that some people today will look at you and wonder how you do it and in the future someone, like you are now, will look at you and wonder how in the hell did you get that knowledge? By figuring it out, that's how you got it!
My goal isn't to replace professionally built tools, or say that one of these languages is better than the other, or any such thing. That being said, even the C# Roslyn (CSScript) &amp; Linq Expression tools can be a little intimidating to wrap your head around from a beginners perspective. &amp;#x200B; My main goal was to remove the seemingly unknown strictness that comes with these tools, so that these same topics can be approached by others who would feel otherwise too intimidated to feel as if they to could leverage the power of what these kind of utilities/frameworks/etc... provide. &amp;#x200B; I know that in my Examples I used LISP (not saying LISP is better), but I chose that for these reasons: * It is a language that I am familiar (enough) with * That helped me, because it means that I was confident enough to teach using it. * It is very consistent in its structure * That helped me come up with a fast &amp; effective approach to parsing &amp; lexing * I didn't re-use / the language spec on purpose * The goal was only to facilitate reasoning on both the theory &amp; application sides. All that being said, I hope I succeeded at conveying the information in a digestible format. &amp;#x200B; You did me a great service by giving me this feedback and **I thank you** for it. I now have in the forefront of my mind to show that these topics aren't limited to a LISP language, once I have wrapped up my first overall series of videos. &amp;#x200B; As far as becoming the next de-facto standard, I'm not really looking for that either, at least not any time in the near future :). Especially with a language that I didn't invent myself. You are right it would be fun. &amp;#x200B; Thank you for the link sources - man that is a heavy endeavor :) Must be a cult - JK
Removed: Rule 4. Hard to see from the image, but you likely have a malformed C# file. Do you have a wrapping `class` definition? Incorrectly placed curly braces? Feel free to repost, but instead of posting a photograph of the partial code, please copy/paste the full code and either format it correctly for display on reddit or dump it on a site like pastebin.
Cool. Not come across the fluent assertions project before. Thanks for the heads up.
Well keep at it. Its always good to have competing libraries.
Yes, random JSON. No two REST calls have to implement the same input and output. It"s pure chaos. WCF has Xml Docs which are rendered in a consistent manner with just as much granularity as anything else.
well, this was really getting on my tits, so excuse the profane variable names. But, i started "sounding out" the predicate with Func&lt;SsrsLocalReport, List&lt;AspNetRoles&gt;, bool&gt; filteringFunction = ((Reports, Roles) =&gt; { var listOfFuckingReports = Reports.ReportAudience.Select(r =&gt; r.Id); var listOfFuckingRoles = Roles.Select(r =&gt; r.Id).ToList(); if (listOfFuckingRoles.Intersect(listOfFuckingReports).Any()) { return true; } else { return false; } }); which then let me whittle it down to .Where(r =&gt; roles.Select(rr =&gt; rr.Id) .Intersect(r.ReportAudience.Select(rs =&gt; rs.Id)) .Any() ); which seems to fit the bill. Thanks guys!
yep. that's where the secret sauce seemed to be hiding. Just had a hard time flattening things out to get them to play nicely.
[The S stands for Simple (?)](http://webcache.googleusercontent.com/search?q=cache:CQ-KvyXVqJAJ:harmful.cat-v.org/software/xml/soap/simple&amp;hl=en&amp;gl=us&amp;strip=1&amp;vwsrc=0)
And how are you defining the client objects? For every well designed REST service there's 50 terrible ones with nary a standard in sight for exposing metadata that actually gets used. With WSDL you know exactly what is required, what is sent back, and with WCF you get a test harness built in, no Postman or anything else is needed. I know that WCF isn't cool because it's a web 2.0 technology, but its far more capable than REST in all use cases. I dare you to name a use case that contradicts that statement.
Nobody could give you an explanation on how you're supposed to do this. It requires alot of research on the format to decode it. You should start reading on how file formats work and how to "crack" them.
The problem is that the only was to create union-types that work with pattern-matching (AFAIK) is inheritance, which is open-world, meaning that nothing's stopping someone else from adding a new case that you didn't think of later, or in a different assembly. Even if the compiler could check that you covered all known subtypes in your pattern, someone else could use your assembly as a library and feed in a new case into one of your functions which didn't expect it. The only way to make closed union-types is to have a class with a discriminator-field, but the problem is that deconstruction doesn't work with that. It'd be nice if you could write overloaded Deconstruct-methods that returned a bool, indicating that a pattern was matched, for instance: public enum ShapeType { Triangle, Circle } public sealed class Shape { private ShapeType Discriminator; public static Shape MakeTriangle(int a, int b, int c, float alpha) { return new Shape(...) { Discriminator = ShapeType.Triangle } } public static Shape MakeCircle(int radius) { return new Shape(...) { Discriminator = ShapeType.Circle } } //The return-value indicates whether the pattern was matched [PatternName("Circle")] public bool Deconstruct(out int radius) { ... } [PatternName("Triangle")] public bool Deconstruct(out int a, out int b, out int c, out int alpha, out int beta, out int gamma) { ... } } //Usage var tr = Shape.MakeCircle(45); switch (tr) { case ("Circle", r): Console.WriteLine($"A circle with radius: {r}"); case ("Triangle", a, b, c, alpha, beta, gamma): Console.WriteLine($"A triangle with sides {a}, {b}, {c}"); }
Thank you for the answer. I will look into this!
[removed]
This was my thought as well. Since the internal list can't do this, make a new list type where you can still access the original, but modifications are also saved. Probably wouldn't want full copy on write since OP seems to only need the first and last version, but I suppose if both are accessible then it's fine. And if downstream is expecting a List&lt;T&gt;, just make the new class a subclass of List&lt;T&gt; or implement an interface that downstream is expecting or something so that all get/set return/save the new values, but have a new property that is a List&lt;T&gt; that is the original list, or have a new method to get the original value at a position or something. There's probably some flaws somewhere in this pile of thought vomit, but I think that the concept would work even if these specific implementation thoughts are rubbish.
For every well designed SOAP service there are 1000 horrendous ones. Nothing prevents you from building a client library for your json / non SOAP API, you know.
And how consistent are those hand-rolled clients written by hundreds of customers, each reinventing the same wheel? And what if you want to change your transport layer? With REST you're screwed because of the tight coupling to http.
This is where I land on it. Writing readable code is a skill, and so is writing useful comments (and updating them!!). They are closely related but separate. So it'd be lovely if everyone was skilled at both, but given the choice I'd rather focus people on writing readable code with minimal or no comments. Bad comments are often worse then no comments, but code can't lie about what it's doing even if it's confusing.
Thanks
Is this something that I can use to run against log files? I'd like to feed baseline logs and then have something detect anomalies.
&gt; Shared library that contains the models Yes, I can, but... really?! Type safety etc with ~~JSON over HTTP~~REST services is achieved through ~~Swagger~~, I mean ~~Swashbuckle~~, I mean OpenAPI.
You are going to be fine. Others have mentioned impostor syndrome. So I won’t harp on about that. I would postulate the following theory to you if someone’s code or explanation is too difficult to understand. It could be something that they could improve on. Please don’t see that as an easy excuse to not try to learn and understand things. Anyone can write complicated code. Most people will just post their best work. I have seen code in successful businesses that have honestly scared the living daylights out of me. Stay humble, learn and take a break to let your mind rest. You got this
The better recommendation is to always put the comment, but then ask the question "Is there any way to communicate the same idea without this comment by refactoring the code?". Many times there is.
No no, your comment was very precise and I appreciate it. I should have express my thoughts better :)
This sub doesn’t exist to help you crack games.
:) Let's meet in the middle, shake hands and go on to better things :). And don't let idiots like me prevent you from producing content in the future :)
Nothing I have heard about. There is only this [https://azure.microsoft.com/en-us/blog/anomaly-detection-using-built-in-machine-learning-models-in-azure-stream-analytics/](https://azure.microsoft.com/en-us/blog/anomaly-detection-using-built-in-machine-learning-models-in-azure-stream-analytics/) and this [https://docs.microsoft.com/en-us/azure/stream-analytics/stream-analytics-machine-learning-anomaly-detection](https://docs.microsoft.com/en-us/azure/stream-analytics/stream-analytics-machine-learning-anomaly-detection) but (probably) it's not exactly what you are looking for.
hehe, sure. Have a nice day :)
Already an ongoing discussion about this article in this sub [here](https://www.reddit.com/r/csharp/comments/bkjf7a/c_80_pattern_matching_in_c_80/).
That's why "a union type" is "[t]he real piece missing from" the feature.
Removed: Rule 2.
Note 1 - yes, as everyone has said, you shouldn't worry about what you do and don't know at your age. Keep learning and try to get a broad understanding while your mind is flexible. Note 2 - the key skill is not understanding 3D programming or some obscure language or pattern or algorithm. The key skill is in imposing structure and distinctness and reliability and clarity on medium to large projects. You need to be able to look at 5000+ lines of code and know how it interacts and be confident that it works. And that's a difficult skill to master. Far more than mathematical formulae, which you can just cut and paste from examples.
I don't know where I heard this, but I've repeated it often: "The more you learn, the more you realize you don't know"
&gt;You occasionally swat at gnats that buzz around your ear - doesn't mean they interest you to have a conversation. Why do you continue writing?
Yep - i saw that after I shared this article. No way to remove posts from the android app?
&gt; The better recommendation is to always put the comment, but then ask the question "Is there any way to communicate the same idea without this comment by refactoring the code?". Many times there is. This is a knack I haven't yet developed. A kind soul on this sub refactored my code fragment to eliminate the loop (IIRC). His version in fact did that. It seemed like very odd code -- but that's because I don't (yet) understand why the refactored version is better or easier to understand.
Disclaimer: I'm not a C# person so don't know a whole lot about C#-specific performance characteristics. &amp;#x200B; How often is this operation occurring? Contiguous memory copy is typically an extremely fast, low overhead operation (unless your list is truly huge or something). This sounds like an "optimization" that probably just doesn't matter and is likely just a waste of your time. Have you actually profiled this to see if the memory copy is even a meaningful cost at runtime?
Don't return it to the pool. That's essentially what you are asking for anyways. So unless you want to create your own list like data structure where you control the internals just stop doing what you don't want to do.
I havent used Windows Forms for a while, though my first thoughts are that you should try: `FormWindowState.Normal` \- a "restored" window. `FormWindowState.Maximised` would be trying to make the window fill the screen with top-left corner at the origin.
Give an example of something you're admiring but don't understand. It sounds like it's just the math that's throwing you off, but at 17 that's totally expected. I don't think I saw a differential equation until I was a sophomore in college, with linear algebra coming even later than that. Maybe start working through some of the stuff at https://www.khanacademy.org
You can compile \*.cs files the same way you did with your c++ files and gcc. The tool is named [csc](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe). But in a c++ project you usually had a makefile when your project grows beyond a few files. C#'s csproj is kind of the same, it handles build profiles, build order, and runs various tools when building (like nuget to download package references, or runs a typescript compiler for some files, etc).
&gt; Because the code should be "self-documenting". It should. But in some cases you need comments to explain why the code is the way it is. But comments should never explain along the lines of "retrieving the index": I should know that you're retrieving the index because that's the method's name.
I'll have to give that a try, that makes sense.
Reimplement IList&lt;T&gt; and delegate it to an internal field that can be swapped out: class SwappableList&lt;T&gt; : IList&lt;T&gt; { private IList&lt;T&gt; _list = new List&lt;T&gt;(); public void Swap(IList&lt;T&gt; list){ _list = list; } //Implement IList&lt;T&gt; via delegation public void Add(T item) =&gt; _list.Add(item); //...etc... }
There is `.Hide()` to hide a form.