I love both linux and c#, and indeed I would switch job instantly, even getting a pay cut, if I could find a single position using .net core on linux servers. Sadly in my area everyone seems still stuck on some (sometimes very) old version of .net framework and windows server. (Btw I am not saying windows server is bad or anything, it's just I feel more comfortable on linux and I built a lot of my knowledge over it and related tools)
Definitely asynchronously load the data. Add some kind of busy indicator (busy spinner, funny lil loading gif, you get the idea) while you load the first tab, and while the user browses that data you can async load the other tabs' data.
So I should load the first tab only in the WindowLoaded and from the 1st Tab, the rest of the tabs?
That's weird. In Sweden we have "mil" which is 10km. We still measure speed in km/h when driving though. https://en.m.wikipedia.org/wiki/Scandinavian_mile
How have you implemented the tabs? A plain tab control? If so - you should be able to fire an event when the user changes tab, check which tab they have selected, then update the data accordingly.
I was just replying to /u/AReluctantRedditor to point out that MS definitely has their eyes on VR/AR, but now I'm wondering how exactly you expect to do VR dev if you don't want to spend money on the required hardware?
&gt; but now I'm wondering how exactly you expect to do VR dev if you don't want to spend money on the required hardware? That's true, but $3000 is still ridiculous when things like the Oculus and HTC Vive can be bought for much, much less
I'm not saying the price is good either, but that's simply the price to pay if you want to get in right now. Also remember the Vive/Rift are VR headsets, while the HoloLens is AR with arguably more complicated technology. Besides that you have the Windows Mixed Reality headsets now, which are a lot more affordable (some cheaper than the Rift).
From the [blog post](https://blogs.msdn.microsoft.com/webdev/2018/02/06/blazor-experimental-project/) of the announcement: &gt;While we are excited about the promise Blazor holds, it’s an experimental project, not a committed product. During this experimental phase, we expect to engage deeply with early Blazor adopters to hear your feedback and suggestions. This time allows us to resolve technical issues associated with running .NET in the browser and to ensure we can build something that developers love and can be productive with.
Agree.
`Directory.Delete(string path, bool recursive)`? https://docs.microsoft.com/en-us/dotnet/api/system.io.directory.delete?view=netframework-4.7.1#System_IO_Directory_Delete_System_String_System_Boolean_
Fixed. Gotta love Markov Chain grammar checkers.
I think all this does is delete it &amp; then puts it in recycle bin. But I've found a solution and will add to my OP
I think the whole javascript is going nuts and microsoft is just trying to catch up by letting people use whatever they want. Having nuget or bower for .js packages was fine when it was jquery and a few more but all the tooling that people want to use is constantly in flux and require using custom integration (think webpack for example). 
&gt; Microsoft recently released the latest version of .NET Core, 2.1 No, it hasn't been released yet. The article about performance improvements is about a preview version of 2.1. And what is confusing is that .Net Core *SDK* 2.1 has been released, but that's not the same thing as .Net Core 2.1. (And MS is aware this is confusing and won't do this kind of thing in the future.)
So I got the base shell of C# downloaded \(thanks swardson\) with the ASP.net workload. My next question involves starting new project for the webcrawler/scrapper project, but there's a small list that is populated. I can't seem to find anymore information on the templates, besides the vague description that is given. I believe i have it narrowed down to the two templates that I need. So whats the difference between the [ASP.NET](https://ASP.NET) Core Web Application and the [ASP.NET](https://ASP.NET) Web Application\(.NET Framework\). [ASP.NET](https://ASP.NET) Core Web Application \- Project templates for creating ASP.NET Core applications for Windows, Linux and macOS using .NET Core or .NET Framework. Create Razor Pages, MVC, Web API, and Single Page \(SPA Applications\). [ASP.NET](https://ASP.NET) Web Application\(.NET Framework\) \- Project templates for creating [ASP.NET](https://ASP.NET) applications. You can create [ASP.NET](https://ASP.NET) web Forms, MVC, or Web API applications and add many other features in [ASP.NET](https://ASP.NET). I know to some this may seem like a basic question, but the stronger my foundation is starting these projects, the better off I'll be in the long run. Thank you in advance, snow
Modern game development isn't really about the code, though. Nowadays even in VR it's just a shit ton of art with a bunch of boring glue code. If you actually like writing code to solve interesting problems, games ain't it.
I guess you are implementing MVVM, you can have commands for loading the data (asynchronously), then, when the user change the tab, you can call the command for that tab.
Use https://fsprojects.github.io/Paket/ if you shuddered in horror while reading this blog post
I'm the same way haha, maybe once more greenfield projects start switching to Core there will be more Linux/C# work.
Fixed in 1.6.1.0
Super! I'll try tonight
this is the fourth time ive seen someone ask me this, and i am going to copy paste my reply from earlier: It’s just a hyperbole, it’s like when someone says “I told you not to do that 1000 times” they don’t actually mean 1000 times. That statement meant asp.net was seen as a dated technology, not necessarily released in the 90s. If we started everything in English for face value, we would be living in a different world. 
Because C# was useless for me if I couldn't use it. I loved the language back then too, but if I couldn't use it to build things, it was as useful as a lego brick on a construction site for me.
Do you mean DataVirtualization or UIVirtualization? With the former you only load data needed into memory, which helps you keep a low working set. The latter means only visible ItemsContainers are being rendered, hence improving performance. However the above techniques are often apply to a single target. For example you're displaying a database with 100k+ record and reach record takes 1 MB with a Listview , you may want to utilizing both of them. Add for your case I guess you may want consider apply the above techniques to EACH page of your tab
Like everyone else said, Microsoft is working on HoloLens. If your hands are scratchy and you want to play around with something right now that uses C#, there is always Unity: https://unity3d.com/learn/tutorials/s/xr
That’s what I’ve been playing with and while amazing, I feel that it could be improved upon with interaction between Visual Studio and Unity 
You're looking for .NET WebApi2 to handle the API, it'll handle routing, authorization and authentication. For connecting to a DB you want an ORM. An Object Relational Mapper will allow you to say "I want this table as an object", then interact with that table through .NET objects instead of dicking about with SqlClient. This should be a good starting point: https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-1
Yeah, there's still a lot of companies out there stuck on .NET 3.5 and probably C# 4 or 5. I'm lucky to work for a company where we're on C# 7, .NET 4.6.2 (will move to 4.7 at some point) and strongly considering .NET Core 2.0 or 2.1 for a new deployment (but it will still probably be deployed to Azure).
Try following this video series: https://www.youtube.com/playlist?list=PL6n9fhu94yhW7yoUOGNOfHurUE6bpOO2b You can also learn many new technologies for free by getting on YouTube and searching for **{technology} interview questions** 
I only found paket useful for very large solutions. For smaller projects I just use the new sdk and PackageReferences with the following properties &lt;RestoreProjectStyle&gt;PackageReference&lt;/RestoreProjectStyle&gt; &lt;AutoGenerateBindingRedirects&gt;true&lt;/AutoGenerateBindingRedirects&gt; &lt;GenerateBindingRedirectsOutputType&gt;true&lt;/GenerateBindingRedirectsOutputType&gt;
Kudos to Bob Muglia. Look him up if you don't know who he is. He laid the foundations.
Debugging. When they get debugging support integrated, I'll take a look at Blazor again.
Yeah, that's probably the biggest issue. I've been getting around it by putting almost all my logic in a separate assembly.
I recommend kudvenkat's ASP.Net WebAPI tutorial. This helps you get started. https://www.youtube.com/watch?v=0pcM6teVdKk&amp;list=PL6n9fhu94yhW7yoUOGNOfHurUE6bpOO2b 
https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.0
It's not visible (to me) how Paket helps with multiple versions of the same assembly?
He's really put a lot of work into them, and they're quite good.
They are resolved to same version project-wide. E.g. every csproj in every solution will use the same version
... that you need to do manually. Paket does this for you. Obviously it doesn't redo dependency resolution for .net, it only changes the developer experience
Euh... Nuget adds assembly redirects, I don't do it.
if the queue is blocking it it would just be while(true) { queue.dequeue }
`BlockingCollection`
If using a `BlockingCollection` (as others have mentioned) while (!queue.IsCompleted) { var item = queue.Take(); ... }
How does nuget know what version to redirect to, across your whole product codebase? Last I checked it had no idea what's up the tree.
How does nuget know what version to redirect to, across your whole product codebase? Last I checked it had no idea what's up the tree.
search identityserver 4 and they have a long tutorial on identity and web api. Don't use the old .net. use .net core. Web api for .net core will get some new things very soon also when .net core 2.1 is out
 Why not just set the dll as copy local so it will follow it down?
XXX four spaces XXX blank line then four sapces
But don't use Entity Framework if performance is something you think you'll need. 
It already is set to that, it works 50% of the time, i would rather find a newer version and convert it to that as long as it's more reliable to be honest
Developers can use languages of their choice for front end development too \- instead of just using Javascript. Node was cool because you could use a single language from front and back end. Easier to hire talent, easier to specialize etc. Web assembly will do the same but by bringing most "back end" languages to the front end. For the C# community, it means they can reuse a majority of their tools, libraries, code etc. It's a good choice to have
Performance consideration while learning???? That's super subjective. Im guessing if he's looking at a tutorial, i doubt subsecond responsiveness will be a deal breaker for him. Based on the request if he can do basic CRUD, he's on his way to understanding things. 
Seems more like people and organizational reasons rather than any technical or architectural reasons. AOT would actually help webassembly since you wouldn't need the full runtime, just the AOT bits from your app and the runtime.
EF can be coerced into performing pretty well, especially if you implement a proper caching layer. I think a lot of the "EF is so slow" hate comes from people not really taking the time to wrap their head around how it works, and how best to implement their requirements using it.
I'm quite familiar with it actually. You can make anything fast with caching. Entity Framework is limited and slow even when implemented correctly. It removes the T from T-SQL. An in memory database, well now you're talking. Entity Framework all the way. But a normal database, you're much better off learning a little SQL and writing your own queries when needed. 
Sure, straight SQL is almost always going to be faster (assuming it's written well). However, for most things (and almost definitely OP's use case) EF is fine, and presents a unified query syntax that doesn't require any (or very little) SQL knowledge. Generally, we only fall back to stored procedures in most of our apps when we identify something that EF isn't fast/efficient enough for. Usually there are very few (like, one or two) examples of this in most of our apps.
I don't really disagree. I just gave op a warning to not use Entity Framework when performance is important. That's true, it sounds like you agree but you're still arguing with me about it. Not sure where the disagreement is?
I wasn’t even aware `licx` was ever used with WPF. I only know it in conjunction with WinForms. Anyway, `licx` tooling was always buggy and cumbersome, and of questionable value (what problem are you trying to solve?). Installing assemblies into the GAC, shipping a setup, etc. have all fallen out of favor compared to leaner approaches like NuGet. Consider hosting a NuGet repository with a private URL.
Any advice on caching layer? Hibernate has nice l2 caching but I cannot find similar for EF
Yeah so like DevExpress, for example, I am shipping WPF controls that I am licensing. To use these controls, you need to have a valid license, and to ship them as a third party, you need a valid license. `licx` is the only way I know how to do this, but it is buggy and cumbersome as you said. I know that some companies have a tool you can download to "fix" `licx` files. For example, if you don't drag and drop a component from the Toolbox, it won't be automatically added to the file or even create the `licx` file. My understanding is that `licx` can embed the license into the built assembly. This is another important aspect as many of our customers may deploy to machines without internet access. So basically the only option I know of is to continue using `licx`, document the bugs, and perhaps ship a tool to fix the license file. Its not a great solution though because some customers may have no problem at build time if their `licx` file is empty, and then only after deploying will they see a crash. 
This sounds like a case for composition. You'd create two attributes on the object: a movement object and a vision object. Both of these would implement iSeeker and would handle the object's responsibility to know how far it can walk and see. This also gives you the benefit of being able to swap out your models as the need arises. In a 4x, this could be a tech advancement. 
EF 6 and above is perfectly fine for 80-90% of CRUD use cases, and for the 10-20% of use cases it’s not good for you can override the query engine by mapping in your own stored procedure. I don’t see the issue here. 
https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.1
That makes sense. Thanks a lot.
These videos look informative, I'm going to try [this](https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-1) probally first, but if that doesn't work out well I'm going to try the videos you linked. Thanks.
No worries! If you need any help or have any questions feel free to shoot me a PM.
Why not rx? it is asynchronous and it works with data streams.
Kudvenkat is the best.
It has been awhile since I looked into this, but we don't have a big problem with the licx files in our WinForms app. I only share my experience since you mentioned DevExpress specifically. Hopefully something in here might help. How we use DevExpress controls: - On our dev machines install and activate the appropriate version of the libraries - Use their NuGet packages to reference their libraries in our projects. - On our build VM that is a VSTS build agent we have a step to empty out the licx file since this machine doesn't actually have DevExpress installed. - Deploy the output of the build machine (installer or bin directory) to clients. I've never seen an issue on the client side with it wanting any sort of activation.
u/jlobes I’m exactly where it sounds like this guy is and you seem genuinely interested in helping beginners learn programming so I may PM you sometime in the future too if you don’t mind
I checked out your repo as well as your "Put Your Controllers on a Diet" series and the revist. I like what your putting down. But I do have a question, how are you handling signalling errors/business rules violations back up to the UI? The FluentValidation feels more appropriate for input validation since it's outside the command/query. But what about something like if the Contoso University example disallowed deleting a course if a student has already signed up? Exceptions seems harsh. Perhaps a structure similar to ModelState where it can contain a series of errors?
Because you made a blanket statement not to use it if you care about performance, instead of saying learn how to fall back in the few places that matter. Logic like your original statement would also say use c++ instead if c# if you care about performance. 
Maybe you should. It depends how much you require performance. I'd suggest using rust rather than c++ though. 
Absolutely!
How about foreach(var item in queue.GetConsumingEnumerable()){ ... } 
Ok, true. I'm glossing over the details of SHA-1. Perhaps this will help clarify: &gt; And I can even tell you what that state will be, regardless of your input: &gt; [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0] Only in the case of block 0. The initial values of A,B,C,D for block 1 will be the digest for block 0. In this regard, SHA-1 is still essentially a stream algorithm, it just operates on a stream of 64-byte blocks instead of a stream of bytes. The important thing is that is that it is necessary and sufficient to have the digest for block *n* to compute the digest of block *n+1* in constant time. If you are handed this 20-byte value by a divine being, you don't have to digest blocks 0, 1, ..., *n* like a foolish mortal ;) So, I could have chosen my example more carefully. "0..50 bytes" was arbitrarily and poorly pulled out of my ass for the sake of illustration. If you prefer something more technically accurate, feel free to substitute "the first 0..50 64-byte blocks of the message" instead. You are correct that there's a significant amount of work being done with each call to `TransformFinalBlock()` -- 80 rounds of however exactly SHA-1 mangles things. But: 1. There's nothing we can do about this given that our mystery region could start or end on any arbitrary byte address. 2. It's *constant time* work, proportional only to the size of the size of the SHA-1 block, not to the overall size of the message. So long as I can roll back all of that state after each call to `TransformFinalBlock()`, I still get what I want. As it pertains to the .NET SHA-1 implementations, the internal state is not just the A,B,C,D, and E registers but also its 64-byte buffer. Rolling back this state is also O(1) any way you slice it; however, depending on exactly when and how it does the padding (I haven't looked), the rollback could be made more efficient by doing it as a diff instead of a full copy of the buffer. Is this making better sense?
Unfortunately I've already found all 3 of these. The NuGet seems like the best solution but it's deprecated and when I try to install it through PMC it says that the package is not for .NET, which is what I need it for. The website is ok but links to a website for the .NET version, which is currently "under maintenance" so I can't get hold of it that way. The Github is not for the .NET version of the dll unfortunately so that one isn't useful for me :( I appreciate the links mate, just a shame this tool seems so old its broken as all hell lol
Yeah, took me a while to dig all the way down to the .NET version website for it lol Yeah I'll pm you the URL for the github repo I'm working on :) It's a bit weird the way the dll versions are set up, I'm using one called devIL.NET2.dll that's included in a folder inside the main generator project, seems to just be breaking 100% of the time now https://imgur.com/a/8UdSlOM
Why Mono instead of net core? Afaik Mono is beeing discontinued in favor of core
Looks like it is also compatible with .NET Core &gt; A tiny, cross-platform, module based, MIT-licensed web server for .NET Framework and .NET Core 
How about this: foreach (var item in queue.GetConsumingEnumerable()) { ... }
You really need to have a consistent naming convention.
Good class diagram! Wish more people would design their shit before writing it. "LoggedUser" feels a bit....not oo. Feels like you want more of a "has a" relationship - a user object has a collection of log entries, which may themselves have a trophy object associated with them. That's nore intuitive and closer to the problem being managed. I don't think LoggedUser really "is a" user.
Thank you very much, Will keep this in mind!
Neat, I was just working on a miniature C# websocket app today. I might give this a spin to try and make something more powerful.
Going to follow a tutorial that uses Entity Framework, thanks for the recommendation.
Directory tree. Somewhere at the root of your product you have paket.dependencies file that lists all your deps, then per csproj you have paket.references that tells what dep that csproj needs. Paket then creates required changes to your csproj and app.configs (hintpaths and binding redirects)
Ah, that's cool. Thanks!
And btw, I need to confess. This class diagram is generated using existing source code. So I made it first, then generated class diagram. Shame on me.
Yeah, I am working on it. I have never worked in a company I am a 1st year student of software engineering. They don't teach us that.
Actually, this is far beyond what they have taught us. But I was impatient so.. 
Trust me - you-in-10-years will be grateful for that advice :)
I might even suggest "Account". User "has an" account. This models the problem as objects more intuitively and adheres to the open/closed principle without violating (or leaving open to violation) the Liskov substitution principle. After all, what if there's more than one type of account in future? You'd need two subclasses. What if a user could be in both? Then you'd need three etc.
I didn't really understand the first part of your reply. But there won't be more types of account. And yeah, if user is in both, it's LoggedUser. You can imagine class User as UserInformation. There are user informations, available to anyone stored. Class LoggedUser, has the same user information (that's why LoggedUser inherits from User) + LoggedUser information, and that's *Username + user token (needed for user to be signed in) *Trophies
Hmm that's a solution too. What kind of cleaner do you think? What do you mean by user object is kind of account? It's not account.. it's information about user.
Books will come in handy later (especially those about clean coding and architecture). The best thing you can do to grow is to build stuff and fail and build again and fail some more. Then read those books :P
I've started helping them with Passcore. If you guys want to help upgrade this, he'll take the help!
It might be to allow them to use one runtime for all the targets: 452,46,462, and NetStandard. 
You don’t need to, but you can use it in both the global filter as well as local attribute. One case where it could be useful is giving the attribute a higher run priority than where it was in the global chain. 
Ahh right. So do global filters take priority over attributes as registered on application start? 
Correct me if I am wrong, but my understanding is that you can build with an empty licx file just fine, but if you are being pulled in by a third party, those components will not be licensed and can not be used. Is this incorrect?
&gt;I think that Krzysztof Cwalina says it best in the framework design guidelines. &gt;&gt;A common question I get is whether documentation for virtual members should say that the overrides must call the base implementation. The answer is that overrides should preserve the contract of the base class. They can do it by calling the base implementation or by some other means. It is rare that a member can claim that the only way to preserve its contract (in the override) is to call it. In a lot of cases, calling the base might be the easiest way to preserve the contract (and docs should point that out), but it's rarely absolutely required. https://stackoverflow.com/questions/10381279/c-sharp-when-to-call-base-onsomething 
Local attributes should have priority over global. 
The mongo dB drivers for c# are really bad and I would suggest avoiding it like the plague.
Exactly what I thought, only call if there's any implementation. In this instance, the class I inherit from is abstract and this class implements the interfaces needed to create a filter. There is no implementation, it's just there so the developer does not need to remember the Interfaces needed so instead you just override the methods you want.
Thanks for this. According to this [SO answer](https://stackoverflow.com/questions/6561883/in-what-order-are-filters-executed-in-asp-net-mvc), Global runs first? 
&gt; ASP .NET MVC 5 since I was recommended to start with the non-Core version (is that reasonable, by the way?). No. Asp.net core 2.0 is stable now with a good ecosystem of packages and should be used for new projects.
But wouldn't it be useful to know both? 
A class diagram is quite useless if you try to model *every single aspect* of your later code! It simply isn't a model anymore 😉 I also miss added comments to enrich the meaning of relations and components per se. A class named ``Methods`` is simply ugly by name. Neither one could deduce what it is supposed to do, nor does it make sense to group arbitrary unrelated stuff together. Why is there a method to export xml in a class that isn't about serialization? Better get this out of the class or make it static at least. What is the overall purpose of this project? You simply cannot guess it just from a class diagram! You can not judge the design until one knows the use cases and the overall context of the domain. 
I’m intrigued. Why was it useless or rather what other thing did you find useful. I am just curious and maybe I can learn something new. I always managed to use C# for anything, albeit not always simple but it worked. 
Very nice. I was just doing something with sockets and embedded WebAPI proxy garbage. This may help me allot. Great 👍🏻 job mate ! 
I’m well aware of the implementation. That was my point. 
Usually console apps are just thin wrappers around a library and you should be able to reference those libraries as-is without any porting work.
[http://catlikecoding.com/unity/](http://catlikecoding.com/unity/)
I can't speak to the quality of the book but Manning just released Unity in Action Second Edition. Amazon has reviews for the first at about 4 1/2 stars.
Until Unity supports C# 7, there's not much point in limiting your search to 2018.
You don't say... 😅 it's still hard to identify libraries and more importantly use-cases which make sense to port to the browser for existing c# code
I guess what I'm saying is that you shouldn't need to port anything. Create a new Blazor project, open NuGet, reference something popular, and you're done. It's a 5 minute task. Put a stopwatch around it and measure performance, another 5 minute task. If you're looking for a specific recommendation, I just happen to have ImageSharp open in a chrome tab. You could try that. A more interesting task would be to port JavaScript libraries to C# for use in the browser. 
Very nice. I was just doing something with tcpclient , sockets and embedded WebAPI proxy garbage for some custom m way to work with aka http requests. This may help me allot. Great 👍🏻 job mate ! 
To second **@jackmott2** I would suggest learning C# by itself before you delve into Unity. My first experience with C# was ‘Murach’s C# 2008’, I think 2015 is the most recent edition. It’s well laid out, and easy to follow with plenty of examples. Though, really the book that works the best for you is really the best book. Go to your local book store \(or chain\) they will likely have a programming section, pick out 2\-3 C# books and read a few of the first couple of pages to get a feel for the style. Buy the one that seems the most comprehensible to you.
I'm just curious is that a recent version of Mono you tested? Since Microsoft bought Xamarin they have been pulling replacing code with code from .net core / full framework and working on improving performance.
There’s a lot of things in proper C# that you wouldn’t/can’t do in Unity. The “Unity3d college” youutube channel tackles some modern programming architecture concepts that butt heads with Unity. I wouldn’t recommend you start learning there but once you get your feet wet in Unity, definitely watch his Unity SOLID series. If you want to learn Unity and C#, Unity’s official scripting and editor tutorials are not a bad place to start. Just go find their tutorial videos on their official site. Just know that people are recommending you learn C# properly for a reason and Unity’s tutorials don’t cover that. It’s that you need to know how to write readable, maintainable code and imagine and handle complexity. Some seasoned programmers swear by the book “Clean Code” by Robert Martin. It’s not a beginner book but it has some good advice for programming in general. Not a C# book. There’s also definitely a lot of stuff in there that you can’t apply in Unity. But many concepts are rather universal.
I didn't make this, but I should have the author stop by and take questions!
&gt; Google doesn’t yield much from 2018 That's because the field doesn't change as fast as you appear to expect. A book from 2017 will be up to date for C# 7, but 2015 and 2016 books will still be relevant for Unity which doesn't use C# 7 yet
Glancing over Ops history it seems more like he needs C# for his goal of developing a game and not Unity as a vehicle to have fun learning C#. Therefor it is unnecessary to properly learn C# first. He will have to start small anyway and most beginner games barely need any C# to begin with. He will have more success learning the necessary parts on the go when the time comes. 
Actually this class diagram is generated from code. That's why there are no comments. Yeah, I know Methods is a really bad name. I got this project almost done. It's fully working, but I need to run more tests, restructure it a little bit, and yes, change variable names. GetScoreTableXML is a temporary method. At the beginning, I thought I would need to use it more than once, but as it turned out, I used it once. This project is a GameJolt API for C#. GameJolt is a website for developers (and not only) to publish their games. People can then download them or play them online (if you built it that way). Using my API, you can communicate with GameJolt. You can: *Make session and login user, which counts your total game time on website. *Highscores - players can compete with each other *Trophies - unlock achievements *Save variables in DataStore - for unlimited possibilities Now I realised that this is old class diagram because there isn't class DataStore. But that's it. If you are interested, your can send me a message :)
Why? Asp.net core replaces asp.net 5. It's just better. I don't know why I was downvoted, I coded in .net 5 mvc and .net core with a production website.
Why VSCode? VS Community is free and 100x better for C# work than Code...
I default to calling the base method. It doesn't happen much, but the base type could change or another dev could introduce a custom class that goes between mine and the base type. Are you sure all the methods are abstract?
No worries and thanks for putting me on the right direction. 
You need to really speak with your thesis advisor about this. Your approach is rife with confounding variables that will make meaningful comparisons difficult to do. To the best of my knowledge, there really hasn't been much done performance testing js vs mono-wasm vs native, mostly because there really isn't much overlap between these areas. Command line programs often interact with disk, so that makes running them in a web-browser difficult to do. I think a far more reasonable (and useful to the mono-wasm community) is define a benchmark suite designed to exercise various aspects of the runtime environment. For example * Sorting list of N size, where N is 1K, 10K, 100K, 1M elements * Factoring numbers of various sizes * Parsing JSON * etc Having this implemented in JS and C# then comparing JS, C# Native and C# WASM would be interesting and highlight issues for the community. 
But how am I supposed to use [Yoda conditions](https://www.sunnyhoi.com/app/uploads/2017/07/how-to-use-yoda-conditions-to-eliminate-programming-bugs.png) with this? if (null is someObject) doesn't compile.
Operator overloading is a fun gimmick, but I have yet to see anyone use it well in real production code. On the flip side, it seems to leave you open to all kinds of fun gotchas like this. 
No, it doesn't, thank god lol
Yeah, the big bad I know about is Unity.
I kinda agree that using is null is preferable but the blogger's reasoning is a bit strange. Like... who the hell would ever override the equality comparison in that way. Pretty much the best reason to use "is null" is simply because it looks nicer. If you asked your 90 year old grandma what If\( x is null\) says she'd almost certainly figure it out. If you asked her what if\(x == null\) meant she might figure it out but might not. It's not as easily readable. 
&gt; who the hell would ever override the equality comparison in that way. It'll probably never happen. But if you've been a developer for long enough, you know that "probably never happen" things eventually ... happen. So why not be proactive so that when it does happen it doesn't bite you in the ass. There's no cost of doing so, which makes it a no-brainer in my book.
So, the reasoning to do it that way is because it reads like Yoda?
I probably would call it. AsyncTimeoutAttribute calls base, OutputCacheAttribute doesn't. 
The naming of it is a joke. But writing it that way actually has some meaning, especially in languages that are more lenient in the way they handle `if` blocks and accidentally using assignment `=` instead of comparison `==`. For example, in JavaScript: var x = 1; if (x == 9000) DeleteAllTheThings(); This code runs fine, no problem, it doesn't delete all the things. But put a small typo in there: var x = 1; if (x = 9000) //oops DeleteAllTheThings(); Now it's deleting all the things every time (because in JavaScript `if (9000)` evaluates as true) and _assigning_ `9000` to `x`. _Bad Things^((tm)^)_ can happen. Instead, let's flip the conditional: var x = 1; if (9000 = x) DeleteAllTheThings(); If this was accidentally written, now you get a invalid JavaScript error as it's trying to assign a value to a literal. C# forces the expression in the conditional to result in a `bool`, so it's harder to pull off. In almost all cases, it's impossible. But if you are using a `bool` variable, you can still do it: bool x = false; if (x = true) //oops DeleteAllTheThings(); Again, flipping that in C# results in a compile error: bool x = false; if (true = x) //compile error DeleteAllTheThings(); So it can theoretically be useful in critical/untested code for languages that have more lax conditionals. But it reads backwards so nobody uses it. You could argue that it reading backwards is more detrimental and likely to introduce bugs than the possibility of accidentally using assignment instead of equals comparison.
They'll both work, but Code will run on more platforms, and seems to be getting more attention from Microsoft. OP could do either. 
In PowerShell, if you're dealing with an empty object versus a null object, you end up with bad results. PS C:\&gt; @() -eq $null This yields no result even on the latest version (5.1 for Windows). Versus: PS C:\&gt; $null -eq @() False There might be similarities in C# since they both rely on .NET
A good example can be Timespan. It overlods plus and minus operators.
I have seen it used once that I can think of and that was a poorly conceived system where a series of reference tables in a database were updated very sporadically (anywhere from hourly to once every other month) from a REST API and the software made a point to check equality before committing the records to avoid unnecessary writes due to disk cost. Thankfully, the system was scrapped by a newer version that was not so...kludge.
That's a good example - isn't a Timespan just a long with a bunch of convenience methods wrapped around it though? 
Nullable&lt;T&gt; overloads `operator==`. It's a struct, so it can never be null, and yet, here we are comparing it to null.
That is actually awesome. Thanks.
Well, probably the "core" value is a double but I think we can consider it to be a full fledged class... https://msdn.microsoft.com/it-it/library/system.timespan.timespan(v=vs.110).aspx
I do not dislike null. I dislike the implicit declaration that any reference can be null. Optionals should‘ve been there from the start.
But any reference should be able to be null... you can have a reference that isn't pointing to anything currently. Isn't a reference type inherently an optional type? It may or may not have a value and even when it is null you know the type that the value will be when it is not null... optionals would be for making a value type an 'optional' type and we can do that by nullable&lt;Foo&gt; right? Or am I misunderstanding something still?
Null 'is a valid and different state' that causes any and all instance operations on that state to explode, messily. That said, the article is a terrible example.
Unitys own scripting tutorials in the learn section is probably the best place for learning C# in the unity context. As far as I can tell, no one has seriously tried to compete with them at the beginner level. 
&gt; Isn't a reference type inherently an optional type? Personally, I’d rather have it be explicit instead of implicit. Is nullable&lt;foo&gt; a reference that might contain a reference that might be null?
Sure, but why is null a 'valid' state, when it's *not* valid to call any instance operations on it? Reality is that null is usually *not* a valid state, which is why they're exploring that non-nullable references feature. It's also why there are languages that have types like the Maybe monad to cover variables that may or may not have a value in them.
Technically yeah any reference should be able to be null as references are merely pointers which can (obviously) point to nothing. However, one should be able to force non-nullable reference types as parameters. An example: string ToUppercase(string ref) This method does not work if you pass null and will likely throw argumentnullexceptions at runtime, which is not good. In no situation will it be valid to uppercase a null so why even allow it to be compiled when null is passed?
I believe the issue comes from code that then has to deal with a possible null. Additional edge cases and errors may need to be accounted for when it would be nicer to be able to assume "I have a valid reference". 
Welcome to the hell that is Unity's fake null. This code can throw a null reference exception. if(!(someObject == null)) { someObject.SomeMethod(); } Which basically means is some circumstances you have to do this: if(!(someObject == null || someObject is UnityEngine.Object &amp;&amp; (UnityEngine.Object)someObject == null)) { someObject.SomeMethod(); } Fortunately it doesn't come up often. But it throws you for a loop the first time you try and debug a null reference inside a null check. 
Still, either a linting tool or the compiler itself will catch assignments in the conditional of an if statement in pretty much every language. Gcc/Clang can make it a hard error if you have the warnings and -Werror enabled (and you should). In the absense of compiler help, then yeah I guess I would do it like that.
Im sorry, but a true C# dev would never recommend Code vs VS. If you are new to C#, then code is okaaaayyy... but Visual Studio is THE IDE to use, even for noobs imo. Virtually all tutorials are in it. Visual studio is WAY better than VS Code for C#. By miles. For example, why would you write MVS C++ in Code vs Visual Studio? /u/dondraper36 please dont use VS Code if you're new
Well, I sorta disagree .NET Core 2.0 is a paradigm shift away from ASP MVC 2 to 5. but its not as huge as ASPX to ASP MVC at anyrate. 
Eh, I wouldn't bother using that form. It's backwards, uncommon in C# code bases, and not terribly useful for C#. But whatever floats your boat. Funny though at you mention C# and VS don't let you fall into pitfalls. C#, .NET, and arguably Visual Studio are designed, more or less, in tossing you into the [pit of success.](https://blog.codinghorror.com/falling-into-the-pit-of-success/)
For sure. That's why I'm saying it's not nearly as useful today than say, 10 to 20 years ago.
I would probably write your own benchmarks instead of using an existing app. Writing your own benchmarks would be a lot more informative.
I sent you message.
It doesn't, actually. `Nullable&lt;T&gt;` gets special treatment from the compiler, which translates `foo == null` to `foo.HasValue`. If `Nullable&lt;T&gt;` was just a struct with operator overloading, you wouldn't be able to cast `null` to it. That would mean it would have to implement `operator ==(T?, object)` to be able to accept `null`, which would mean that comparisons like `(int?)1 == "foo"` would also be valid.
I was concerned for a moment there because I thought I was falling prey to some other nasty habit or misguided practice, but apparently it's a good thing to be thrown into the pit of success. You'd think they'd go with something friendlier, like the Sandbox of Success.
Vector types are also another good example of good use of operator overloading. It's a tool you have to be careful with - and use wisely. 
Well i'll be damned. private static void Test() { Nullable&lt;int&gt; value = 0; Console.WriteLine( value == null ); } .method private hidebysig static void Test() cil managed { .maxstack 3 .locals init ( [1] valuetype [mscorlib]System.Nullable`1&lt;int32&gt; 'value' ) // [19 9 - 18 10] IL_0001: nop // [20 13 - 19 37] IL_0002: ldloca.s 'value' IL_0004: ldc.i4.0 IL_0005: call instance void valuetype [mscorlib]System.Nullable`1&lt;int32&gt;::.ctor(!0/*int32*/) // [22 13 - 21 48] IL_10: ldloca.s 'value' IL_001b: call instance bool valuetype [mscorlib]System.Nullable`1&lt;int32&gt;::get_HasValue() IL_0011: ldc.i4.0 IL_0012: ceq IL_0014: call void [mscorlib]System.Console::WriteLine(bool) IL_19: nop // [24 13 - 23 20] IL_20: br.s IL_001b // [25 9 - 24 10] IL_002b: ret } // end of method Demo::Test 
Have you read about Roslyn?
Sometimes, depending the application of your software (and its language), there are rules that will oblige the developer to use the Yoda notation, to check for booleans values explicitly and even leave empty blocks in the code to ensure that he took into consideration the 'else' part. i.e.: If your code must be compliant with MISRA and/or CENELEC rules you have to write it this way: if(null != someObject) { if(true == someObject.someBooleanCheck()) { // Do something } else { // Do something else } } else { /* Nothing to do */ }
I'm currently working at Unosquare right now and I sometimes solve some EmbedIO issues. If you have any questions regarding our implementation or any feedback let me know.
The main issue is, that when a reference can be null, every reference can be null. You always have to know, if a certain method can return null or not. This can lead either to defensive coding, where you just check every time, if a return value can be null. You also don't know, I a method accepts null as a parameter. With non-nullable reference types (which should come with c# 8), or monads/optional, a method becomes explicit about the valid values it accepts, and what can be returned, leading to more error prone code. I'm not against null, on the contrary, but the implicitly it involves can lead to many problems. 
Check out the unity scripting tutorials. https://unity3d.com/learn/tutorials/s/scripting They focus on c# fundamentals way more then the unity part.
Why should you have to explicitly check, though? When you think about a process, you don't think, "Blow your cork unless you have all the stuff, otherwise do what I said." You think, "Do the thing unless you don't have all the stuff you need. If you don't have all the stuff, do nothing; wait for further instructions." Rather than writing a conditional to check for null every time, there should simply be a "condom" operator that tells the compiler you want it to throw errors if null. Or if you absolutely *must* pretend that freaking out is the reasonable expected behavior, have the condom operator tell the compiler **not** to freak out in this instance, but carry on smartly (which is to say, do nothing and move on.)
https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,339
Can you do is null in C# 5? BTW, I prefer == null because it is consistent with how you do equality comparisons for every other condition.
My problem with the readability argument is that this ignores consistency with checking equality everywhere else in the language. Sure, your grandma might understand is null better, but any programmer sees == every day, and probably also in the same code file, since we still need to use it with most other things. To me as a programmer, I'm still doing and equality check, and to me, i feel like equality checks should be the same regardless of what I'm checking against. (Coincidentally, I wish I could do field = null in SQL, the is null difference drives me nuts, though I understand why it is this way in SQL)
The Elasticsearch NEST library has some great operator overloading for their declarative object initializer API.
That's reminds me of when I used to work with PHP where all the standard library functions were just all globally available/scoped. No organization or compartmentalization, or even consistency. Just a smorgasbord of unrelated functions that are _just there._
I wasn't implying that a programmer couldn't read it. I expect them to be able to read either. I just think consistency throughout code is a tiny bit less load on the brain.
&gt; see anyone use it well ~~in real production code~~ I once made a class *Basket* and a class *Fruit* and you could do basket += 3 * apple + 2 * banana;* Maybe I should learn [Chef](https://esolangs.org/wiki/Chef).
This feels like cheating...
&gt; It overloads plus and minus operators And annoyingly doesn't overload multiply and divide :/
&gt; Pretty much the best reason to use "is null" is simply because it looks nicer Debatable. Maybe if you're used to reading python, but this syntax is at odds with every other comparison check in all C like languages. It also doesn't make sense semantically. You're not checking if the variable is of type `null`, you're checking if the variable of some type is of value `null`. Overloading `is` like this is just pure weird.
I wonder why unity doesn't fix their equality overload to handle this incredibly common use-case. Weird. EDIT: Oh wait, they do, it's when it isn't cast that's the problem arises. Annoying.
Doesn't unity do that. So destroyed game object pointers are null.
I read your reason for two forms multiple times, and still do not understand it. General rule of UX: don't make users go to a different window unless it's about different info/data. Anyway, The way to communicate btw forms is the first form \(MainWindow \) passes a ref to itself when you create an instance of the second form \(Form2\) `public partial class MainWindow : Window` `{` `public MainWindow()` `{` `Form2 frm = new Form2(this);` `}` `}` `-----------------------` `public Form2()` `Private MainWindow mainWindow;` `public Form2(MainWindow mainWindow)` `{` `this.mainWindow = mainWindow; //Now while in Form2 you can call public functions available in mainWindow` `}`
I just rebuilt a MVC website in Code on my Mac. I’ve worked for years in Visual Studio. I was able to do everything in Code. In fact it was easier. The only thing I wanted to do that I couldn’t was extract an interface. Obviously there are other features full blown VS has and Code doesn’t. And I wasn’t working on the biggest or most complex project. But having now used it I’d much rather use Code than VS.
It's okay, just wanted you to know why a Dev should/shouldn't do something. I highly recommend the book About Face by Alan Cooper, it's an old book but valuable ideas about UI/ux
Thanks for the suggestion! Will check it when I am home and maybe get it for my kindle!
Hmmmm... delete the thread... announcement/sticky the thread... what to do...
I'm way too worn out to give an in-depth answer on this kind of thing right now but I saw you have no answers so I figured I'd just write at least something: &gt; Simply put, does a volatile read drain the load queue and does a volatile write drain the store buffer? There's no real memory model for C# so we have to go on unofficial sources and observed results. As far as I understand it: * The `volatile` keyword asks the compiler and JIT to ensure that writes to the marked field are propogated as soon as possible; and that reads are never cached/stale. This includes but is not limited to memory fences which technically only guarantee ordering (but in practice often mean the flushing of caches). * The explicit memory barrier instructions, [according to the docs](https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.volatileread?view=netframework-4.7.1#System_Threading_Thread_VolatileRead_System_Int32__), do the same; but that is not what is implied by the term 'memory barrier'. However, once again on x86-based processors at least, an MFENCE or SFENCE will result in a store buffer drain ([See 11.10 here](https://software.intel.com/sites/default/files/managed/7c/f1/253668-sdm-vol-3a.pdf)). When I use explicit membars, I treat them as the least-possible guarantee: I.e. reordering constraints only. In reality, pretty much any lock-free algorithm tends to have a spin-wait loop that waits for updates; and any algorithm that relies on the absolute timing between two threads is completely broken anyway (at least, on a non-realtime OS). So it's kind of a moot point. &gt; In Java, the write of 'aVolatileVar' would (in principle) write out 'aVolatileVar' along with 'nonVolatileA' above it avoiding the store buffer. The read of 'aVolatileVar' would be a synchronization point which would drain the load queue and fetch the latest value of both 'aVolatileVar' and 'nonVolatileA' from the cache, memory, etc. It's best not to try to put things in terms of the actual hardware. Although it's good to know what's going on hardware-wise, when writing in a language like Java or C# we only have the guarantees the language writers provide for us. After all, relying on an implementation detail of the CPU can come back to bite you if tomorrow the CLR maintainers alter the way something works. With that in mind, I wouldn't try to frame this too much in terms of store buffers etc. which is quite x86-specific. Instead, it's preferable to say things like "by the time the write to `aVolatileVar` is made visible to all observers, all previous writes and reads on that thread must have been made visible too". And conversely, "All writes and reads that follow the read from `aVolatileVar` on that thread must be 'fresher' than the read from `aVolatileVar`". &gt; It's simply hard for me to believe that volatile in C# only has the effect of maintaining order and avoiding compiler optimizations. It is exactly what the spec guarantees (and in Java too!). The JMM uses terminology like "happens-before" exactly for this reason. Memory barriers are fundamentally there to protect only against reodering of operations on the local thread. Any 'cache flushing' that happens is really just an implementation detail. &gt; IF volatile only affected store order/compiler optimization: &gt; Writes could hang out in the store buffer for a while. In code, if I see a volatile read followed by a volatile write in separate threads, it seems to be that I am getting these changes immediately. Well first of all, remember that all writes/reads are flushed whenever a thread is context switched. So what we're talking about here is on a micro scale of time anyway. And like I mentioned already; you may (probably) be getting flushes as a side-effect. &gt; I would be only be left with the guarantee that if I see the change I made to 'aVolatileVar' in another thread then I MUST also see the change made to 'nonVolatile'. In terms of how long, who knows, they are still in the store buffer somewhere and it might be a while before those changes become visible in some other thread. That is correct. That is why most lock-free algorithms have a form of hot loop to wait for changes. Like I said before, if you're actually relying on absolute timings between threads you have a bug (imagine, for example, what happens if the writer thread is context-switched out at various different moments). As for your article link; yes it's true that half-fence stores and loads can be reordered with eachother. The example given is a well-known example of when just sticking `volatile` on everything isn't enough. There's more information about that in C# [here](http://www.albahari.com/threading/part4.aspx). 
&gt;This is also the reason why Nullable&lt;T&gt; is able to selectively support other operators like + depending on the type its wrapping, which unfortunately couldn't be done just with operator overloading. Doesn't `Nullable&lt;T&gt;` just overload the implicit cast operator to accomplish this? https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Nullable.cs
I already have VS, VS Code and Rider:) For simple snippets when I just need to test my understanding I use VS Code. For more sophisticated things I will use either VS or Rider. What do you think about the latter?
Do you think it's necessary to learn database design? If so, can you recommend any books? I have a working command of SQL, but I guess it could be not enough in the long run. 
This website looks horrible on embedded trident browsers. [Imgur](https://i.imgur.com/CBuANzE.png)
So it's a long! Thanks
Yeah, just multiplication by `int`, and maybe `double`. Currently to multiply by a scalar you have to manually get the tick count, multiply, round, and reconstruct the `TimeSpan`. I'm not sure what `TimeSpan` * `TimeSpan`would even look like, or what unit it'd be in... seconds^2, or just time^2 I guess?
Nice write up! For those converting old style csproj into new csproj, I can recommend https://github.com/hvanbakel/CsprojToVs2017. 
It's more than performance reasons, as the other guy pointed out, Nullable inherits the operators (such as `operator+`) of the base type, which you can't specify in vanilla C#.
learn mvc 5 first. You will probably end up working on projects that were built on that versus .net core2. I've got many years doing dev in asp.net I wouldn't turn you away as a new hire if you knew one versus another as you'll have to learn both down the line anyway. Regardless of whichever version of mvc you decide on you'll need to learn some (in no particular order and not an exhaustive list) Dependency Injection * GIT, Git workflows, branching, etc * SQL, basic knowledge of SQL and relational data * Entity Framework, code first, linq * SOLID principles * setting up and configuring IIS for a website * design patterns * dependency injection * bootstrap, basic html and css Please git gud at git. It'll make your life easier when coding and making mistakes and reverting changes. . etc. You may end up working retainer work fixing older projects. Could be mvc 4 5 maybe even webforms if you're unlucky =) What I and my other co workers are looking for is the willingness to learn and team fit when it comes to new hires. Good luck in your studying 
I'm not going to use "is null" just because some asshole could override ==. WHAT THE ACTUAL F***.
yes
couldn't you just use the null conditional operator? someObject?.SomeMethod();
[http://book.goalkicker.com/CSharpBook/](http://book.goalkicker.com/CSharpBook/)
I wish there was a way to either disable overloading of == operator or disable not overloaded == operators or get warnings when it is used. I have seen situation where in quite large codebase == operator was added for a few structures but there was still some code that treated == as reference comparison. That wasted quite a lot of time. Reference comparisons should be removed in my opinion. We have object.ReferenceEquals for references. All other == implementations should compare values. 
Thank you for such an exhaustive list. Are there any resources on the subjects above you consider to be must-read? For example, Bob Martin's Agile Principles in C# or GoF Design Patterns?
So, what have you tried, so far?
Well I haven't progressed to the second half because I can't get the first half go work with me. But I was doing this in the Gross text box: Int32 HourlyPay = Convert.ToInt32(hourlyratetxtbx.Text); Int32 HoursWorked= Convert.ToInt32(totalhourstxtbx.Text); Int32 GrossPay = HourlyPay * HoursWorked; Grosstxtbx.Text = GrossPay.ToString(); I also tried adding that code to the click button area and it does nothing.
Tried it tonight. DataTable is null didn’t compile but DataTable == null did. Not quite sure why to be honest.
` var eitherIsActuallyNull = ReferenceEquals(a, null) ^ ReferenceEquals(b, null);` can anyone explain the `^`?
 Try this... private void button1_Click(object sender, EventArgs e) { CalculateGross(); } private void CalculateGross() { decimal hourlyRate = Convert.ToDecimal(hourlyRateTxtBox.Text); decimal totalHours = Convert.ToDecimal(totalhrsTxtbx.Text); decimal grossPay = hourlyRate * totalHours; GrossTextBox.Text = grossPay.ToString("#,###,##0.00;-#,###,##0.00;0.00"); } 
I would like to know the negative variant. I can do if(x != null) But I cannot seem to do if(x is not null) Unless I go if(!(x is null)) Which looks all sorts of hinkey. Suggestions?
He has an odd consistency to it at the same time it’s like you can tell effort was made but yes many styles going on 
Wish I had both these resources 6-12 months ago! Thanks for the link.
Bonus info: the project is active and the author has been kind and fast to implement features I've suggested. 
Leave it, It is a learning moment and that's a positive thing. As a coder I have done plenty of daft things myself and each time it happens you become a little wiser :)
Unity is still on an old version of C#, without the null conditional operator. But even with it, you would still have the same problem. 
Exactly. Once you've cast the object, say to an interface, you no longer have access to the equality overload. 
Unity has a weird system where they have a fake null object, which behaves as if it were null but isn't actually null. Some of the time its useful. Unity packs a bunch of data into the fake null that can help with debugging. Sometimes it's just a pain, like when ReferenceEquals tells you something is not null, but using the object results in a null reference error. 
s² is a unit that's quite often useful. e.g. 1 Newton is defined as 1 m / s²
OOP = functions with lots of extra sugar all wrapped in a container.
Don't delet**e** the thread! There is no shame in it. Masters made more mistakes than beginners.
&gt; If your code must be compliant with MISRA and/or CENELEC rules you have to write it this way: &gt; if(null != someObject) Which is absolutely pointless in C#, since the error that it tries to prevent e.g. `if (someObject = null) can't happen. 
That's not true. C# 6 is now supported 
It's the exclusive or operator. It van be read as: one but not both should be true. 
Is `DataTable` a value type or an unconstrained generic type?
Actually my first idea was to use micro-benchmarks like [benchmarkgame](https://benchmarksgame-team.pages.debian.net/benchmarksgame/), but my advisor (professor) highly discouraged this, because in his opinion those are to much implementation dependent. The idea to port an existing application with "real" use-cases was his. So this is what I've to work with..
This null object sounds like a stupid idea
Yup. The devs have said if they were to do it again they would take a different approach. However it's embedded deeply enough in the system that removing it would break a lot of projects. 
There's also some magic in the runtime itself: boxing a nullable int does not result in a boxed `Nullable&lt;T&gt;`, but rather in a boxed unwrapped `int` or a true `null` reference. 
Try attaching the debugger and make sure the values are what you expect. Perhaps you have mislabeled your text boxes.
Are you sure it's a fake null, and not a custom overload of `Equals` and/or `==`? `Object.ReferenceEquals` is a static method, so it *ought* to work work as long as they're not polluting the scope with their own `ReferenceEquals` method on their own base class (though you can use an explicit reference to `Object`, then), or actually polluting things with a non-null object instance named `null` (which would be insane, where overloading the methods would just be stupid). Some googling suggests it may be slightly slower than `((object) x) == null`, though, which is kinda weird.
We have a similar issue at work a lot with dbnull.value and just write an extension isnull method or something that handles it all. As annoying as situations like this are, you can usually work around them just by handling them once and using that method for null checks in the future.
What's your build target set as? Even in the editor the compiler directives should behave according to your build target. If you switch between PC and mobile, you should see this change. 
Consistency for the sake of readability is good. But I just think readability trumps all when it comes to clean code.
Of note: &gt;However, no tooling was made available that performed this conversion as it was not necessary to do since Visual Studio 2017 would work with the old format too. &gt; &gt;There are a number of things that VS2017 handles differently that are performed by this tool: &gt; &gt;A more succinct way of handling NuGet package references [Visual Studio 2017 15.7 will ship with a migration tool for this.](https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-preview-relnotes#nugetpreview3)
Some more googling (because I'm a business programmer, and not the sort that putters around with Unity 3D in my free time) indicates a couple different things: * There's some special behavior in the editor around Monobehavior objects that involves a Null Object to provide some information to the editor. This seems reasonable, but is a source of confusion. Having the editor detect nulls instead seems like it would be more appropriate, but I don't know the ins and outs of this. * Calling methods on a C# object that wrapped a C++ object that has been destroyed can produce `MissingComponentException`s, and the overloaded behavior of `Equals` and `==` is apparently to detect that and return true on a comparison with null. That's a confusing API decision (partly because it comes with some nasty interop issues with standard .Net Framework stuff, including System.Object), but it's not actually a 'fake null', per se. The C# framework includes an `IDisposable` interface and the `ObjectDisposedException` for very similar purposes, just without the equality overloading (because that's boneheaded). It seems beyond stupid that Unity doesn't expose that in a better way, but hindsight is also 20/20. I'm posting this for clarity, FWIW, because your explanation makes it sound like Unity has two different null values floating around with some sort of compiler magic to insert theirs, which doesn't appear to be the case.
Sounds like you have a better grasp of the details then I do. I just know it's an issue I have to watch for.
I don't think there exist a C# 4.5 version, though. Maybe you're confusing it for the .NET version?
I believe in practice, this depends on how the component is implemented. I'm pretty sure I've found some components to _insert_ themselves into the `licenses.licx` but not actually _check_ whether they are licensed.
The licensing model of mono before Microsoft came in was restrictive and so the mono folks were using a really old version. From what I understand is that unity now is close to having the latest version and it should have better performance and compatibility. 
Yeah, dotnetfiddle incorrectly calls the compiler version ".NET 4.5". It shipped with C# 5.0, so they probably mean that one.
What browser are you using? Are you on a windows phone?
Interesting, but I still don't see how this accomplishes anything new, since it still needs to be executed.
Interesting! 
Its easier to learn a bit of programming in order to be able to run complex algs than it is to learn the math.
&gt;While this ransomware is still in development, it does use an interesting feature that we have not seen in ransomware before. This goes to show how attackers continue to try and think up new ways to bypass security programs that protect your computer. Using encryption or obfuscation of the payload to avoid detection is extremely common. Any old VBS malware does crap like this. This just seems like the malware author didn't really know what he was doing and cobbled something together with Google, rather than some surprising new innovation.
I have a friend who uses if(null==x) in PHP all of the time as a visual flag that the if is doing a null check. I don't like the way it reads in my head, but he's right, it makes skimming his code faster.
I've always wondered if it might be possible to use Roslyn as a weapon. The ability to execute the compiler at runtime certainly suggests a peice of software could be written to create something malicious
Retake the course when you have more time to spend learning the material.
CQRS can also be implemented as an abstraction before hitting the DB (i.e. in domain layer). Commands / Queries can all access the same DB - that's fine. It's just an abstraction that you can put between the app layer/domain layer (e.g. web/business) You can make it as simple as having (for example) a RegisterUserCommand (to issue a user registration from a web form) and a RegisterUserQuery (to get the data needed to fill out the form). They both access the same DB, and we don't care how that's done. The benefit is when your (let's say) web app accesses your business/domain layer, it interacts with it by only using a Command or Query. That's the benefit I've seen. Your domain/business layer simply exposes Command and Queries so the separation between the presentation layer and domain layer are created with CQRS. I would rather have the separation between the presentation and domain layers, as opposed to putting an extra abstraction between the domain and data layer. The former is much more useful in my experience. If you have time, this talk is SUPER helpful in this area (and others): https://vimeo.com/131633177 Hopefully, that helps?
Compiling a string into code is actually fairly easy. Take a look at CSharpCodeProvider if you want to give it a shot. Encrypting a string isn't exactly a novel thing either, so while this may "hide" the actual execution, it's more of an obfusication that an AV software might not pick up, but a developer would probably be able to get past fairly easily if they ran the code through a disassembler, or dotNetPeak, or what have you. What I thought would've been interesting if the code was actually dynamically generated at runtime using the System.Reflection.Emit namespace. This is INCREDIBLY powerful, but you're pretty much building IL yourself. While I could see AV maybe adding something for a compiled string attack vector, being able to detect vulnerabilities from emitted IL would take a lot of effort. The Emit namespace is really interesting to play around with. When I was putting some dynamic class generation logic together with it I got the best error message I've ever gotten from an exception, "The operation would cause instability in the framework"
Holy crap! That worked! Thank you so much! I think that may be enough in the right direction that I can figure out the second half of it. Thank you so much! I appreciate this more than you know.
That worked. Thank you so much! I think its enough to go off of that I can finish the second half of it!
Thanks for the life advice. I'm assuming either you never went to college and worked part time, or you are some sort of super human and were able to juggle every thing in life and grasp concepts on everything thrown at you in 3.5 months.
Haha, with .NET, everything is easy, even self-modifying code! 😁😁😁
I would start with the official learning resources on Unity's website: https://unity3d.com/learn They'll go over the various bits of the engine and familiarize you with concepts in Unity. The [project tutorials](https://unity3d.com/learn/tutorials) are pretty good and have you build actual running games/demos, and provide you with whatever assets/resources you need along with final code bits. Some parts of the videos do go over some C# concepts you would already be familiar with, but you can just skip over those parts easily. Mind you, even if you have a "very firm grasp" on OO design, be aware that Unity design paradigms tend to be slightly-to-very different than what you may be used to seeing. So these tutorials might help familiarize you with patterns that are common in the Unity developer community.
[Catlike tutorials.](http://catlikecoding.com/unity/tutorials/). Absolutely amazing.
That doesn't work as the reference *isn't* null, it's pointing at an object that's just semantically defined as equal to null. It's amazingly dumb.
So, I'm curious, could this stuff be applied into a JIT compiler (something like Roselyn if I understand what Roselyn is) and be used to attack someone's PC just by visiting a site?
Nope. The ? operator can't be overloaded, so it's incomparable with the fake null. 
What you want to do is encrypt your emit code and then compile and run that then execute the generated assembly.
Yeah, seemed like a bit of an edge case to me. And why not write it like "if (!obj)" instead of "if (obj == null)? It's more readable the former way.
Build things instead of reading books and watching courses. Take the books as a light domain specific material that can help you along the way. I would start by eg. making a windows service that will serve as an api. Do basics (the crud stuff) then extend by web scraping to serve useful data. Dont overdo it. Extend and polish as you see fit and ask for a feedback. Check the books what they say about design patterns etc. I would avoid stuff that is MS specific and does not make your skills transferable ( relying too much on linq and EF). 
I'd agree that you will have an easier start by throwing away a lot of your OO-fu. Once you've been to the MonoBehavior hell you can come back strong and use Unity in many ways it might not have been intended to use. My current project is built in a MVVM style and only uses MonoBehaviors in the visualisation. I think it feels great from a code perspective and worked better than expected. This allows me to unit test most of the game logic and to run the whole thing without UI. This is super great if you want to train AI quickly.
I'm not cheating. I didn't ask anyone to do the whole project for me. I just wanted them to tell me how to make what I want to do work. I offered the option for them to insert the code themselves because maybe they could see what I was doing wrong when looking at the code. Considering most of this class has just been replicating code from a book and no independent coding up to this point it shouldn't come as a surprise that I don't know what I'm doing.
Your request is the textbook definition of cheating. I'm sorry if you don't think the class is fair but posting a request for Redditors to add their code in *your project* is a violation of the Student Code of Conduct at every school on the planet. 
One more point if you don't mind: potential employers may ask you for you Reddit account along with Facebook, Twitter, LinkedIn, and GitHub. Do you want them to see this thread?
Considering all my user named are different I could be dishonest and not tell them about ones I don't want to see. But in all honesty, I would tell them no, and if it cost me my job then so be it. I don't think what you post online in your spare time off the clock and off employer property should effect your chances of getting a job or get you fired from a job. Most people aren't the same person at home that they are at work and employers need to start realizing that. Either that or there needs to be more laws preventing employers from using social media other than LinkedIn as a way to weed out people. 
Very thoughtful answer. Well said 
You have a private class, so why not implement `IComparable&lt;Program&gt;` on it, feed that into a list and then just use `Sort()` on that?
 var programs = JsonConvert.DeserializeObject&lt;List&lt;Program&gt;&gt;(jsonString).OrderBy(p =&gt; p.Index); var programString = String.Join("\n\n", programs.Select((p, i) =&gt; $"{i}: {p.ExeName}\nPath: {p.Path}"));
Being a beginner I have no idea how to implement this, any resources you could toss for me to look at?
 IEnumerable&lt;dynamic&gt; f(dynamic collection) { for (var i = 0; i &lt; collection.Count; i++) { yield return collection[i]; } } From there, you could use LINQ to do whatever, whether that's dumping to a list or sorting by a property. You could also create a type in your class and have JsonConvert deserialize to that type (or to a collection of that type) and just avoid messing around with dynamic entirely.
This works perfectly, thank you! Being a beginner though, I'd love to know exactly how this works so I can use it later as well. Can you point me towards some documentation or other resources? Edit: I have a rough idea but I'm not entirely sure about how the lambda expression works right here.
`JsonConvert.DeserializeObject&lt;T&gt;` creates objects of T instead of needing the `dynamic` keyword. So, in this case, you want a list of `Program` objects, so you make T `List&lt;Program&gt;`. Then, you'll get a nice typesafe version of the converted object. From there, you use LINQ to order it using the type given: `list.OrderBy(p =&gt; p.Index)` is the same as `list.OrderBy(delegate(Program p) { return p.Index; });` which is the same as implementing `IComparable` and calling `.Sort()` (but you can't chain it together like the `OrderBy()` extension method. I recommend you read up on various tutorials for LINQ and generics.
Perfect, thanks! :\)
A small note, things suck really quickly if you have both project types in the same solution and reference each other back and forth (at least they did in 15.4, haven't tried in the past 2 versions of 2017). We had problems like Nuget not working at the solution level, VS crashing completely, projects that build once and then claim to be unable to find types, suddenly a bijillion errors everywhere, debuggers that fail to attach, intellisense stops working and more. --- It would be nice if we could convert the stuff that can safely be converted because we do have a few solutions that can be converted entirely but they happen to share projects with solutions that cannot be converted and likely will never be able to (ex: asp.net webforms class libraries). 
It's a C# 7 feature. You'll need VS2017 or something similarly up to date.
Null as a concept is okay. It would be great if you can force a non-null object as parameter. Because that way you don't have to implement null checks and the user, that calls your function knows, that it really needs an actual instance of the requested class.
https://www.youtube.com/quill18creates Quills videos are amazing and entertaining to watch. other than that look up monobehaviours, their basically Unity in a nutshell https://docs.unity3d.com/ScriptReference/MonoBehaviour.html
This is old as fuck, you can do that in c++, probably less detectable since it would take some time to reverse engineer. Otherwise, nothing new.
mine too, although if I wrote it it would say "should compile itself" rather than " compiles itself.
Well, presumably the problem is that the window class of the Discord app isn't actually literally called "Discord". You could find out the real window class (e.g. Winspector) or find the window in another way, but I'm not sure that would actually help you because Discord is an Electron browser app. There isn't actually a real Win32 input field, it's all just a single big window custom painted by the Chrome rendering engine. If you're trying to send automated messages via Discord, you may be better off using a [Discord API client](https://github.com/RogueException/Discord.Net) to talk directly to their servers without involving a locally running Discord GUI.
No, primarily Java/Groovy/Ruby dev that uses C# for unity. To be fair, they get blurred often. But I swore I used it in C#. 
I can’t say with certainty because I’m not in front of my PC so forgive me if I’m incorrect here but in the solution properties there should be a box in the build tab that allows you to do this.
Ah okay that explains it. Thanks for clarifying.
Well what you have you tried so far?
[This what I've tried](https://i.imgur.com/I7XvL7q.png), but the application is deployed without the script being called, if I change the `Custom Command` drop list to "After Build" the script gets called, but the application hasn't been deployed yet. Thanks.
Probably a dumb suggestion but is it possible to sleep your script until you know it’s available?
Thank you Do you know if there is a possibility to send messages via user and not an automated bot on discord?
uhh nothing that worked. Console.Writeline(Enemies.enemy(i)); but that's apparently not a thing. I guess it might be helpful to see that Enemy is a class I made: public class Enemy { public string EName { get; set; } public string EType { get; set; } public int EHealth { get; set; } public int EStamina { get; set; } public int EPower { get; set; } public Enemy(string ename, string etype, int ehealth, int estamina, int epower) { ename = EName; etype = EType; ehealth = EHealth; estamina = EStamina; epower = EPower; } } and Enemies is a list I made to add the spawned enemies into.
&gt; Console.Writeline(Enemies.enemy(i)); Why doesn't that work?
Lol you're not helping. Did you try it? Did you get an error message?
Yeah, " 'Enemy does not contain a definition for 'enemy' ".
What type is `Enemies`?
On mobile, but a *negative look ahead* assertion should solve this.
It sounds like you're trying to access a property named enemy on your model Enemy. From your code above it looks like you don't have a property called enemy on Enemy. Is Enemies a collection of Enemy? Or, is it just a single Enemy? If you're accessing from a collection of enemies then try using: Console.Writeline(Enemies[i]); 
&gt;Some people, when confronted with a problem, think, "I know, I'll use regular expressions." Now they have two problems.
 for (var i = 0; i &lt; eNumber; i++) { var enemy = new Enemy($"enemy{i}"); Enemies.Add(enemy); Console.WriteLine($"{enemy.EName} has spawned!"); } As a suggestion, if you ever have the word "type" in your variable, use an enum. Also I'd suggest breaking out creating the number of enemies to a function as well as setting the variables of the enemy to a function.
haha regex is the only thing i can use. The string contains more than what I posted, but there's several patterns I need to identify in the string. The entire string is !&lt;Some command&gt; &lt;Some text can contains spaces&gt; &lt;item1&gt;(&lt;detail1&gt;), &lt;item2&gt;(&lt;detail2&gt;) etc...
&gt; a negative look ahead I can get that to work by itself, but then it matches everything that isn't that. I need it to match the &lt;text1&gt;(&lt;text2&gt;) pattern except when text1 = item3
Using a windows 10 laptop, any reddit app has the issue, so do blog and news apps. 
Lol I’m just giving you a hard time. I wish I could put you in touch with this deaf girl I used to work with a decade+ ago.. whenever I needed a regular expression created I’d go to her. She was an expert and wasn’t even a developer (worked in data processing). If you can capture itemN(detailN) isn’t there some way you could .Cast&lt;T&gt;.Select(T) it into a subset matching your criteria? I know it’s not a perfect solution invoking only Regex but it could solve the problem if you’re looking for a quick solution.
Try what /u/screwuapple suggested .. that is the right way to go... reference: https://stackoverflow.com/questions/3194867/regexp-for-matching-three-letters-but-not-text-buy I’m sure you can get it working with a little tinkering. Good luck!
Correct, I'm basically looking to collect the key and value. But this is why I'm here, I've exhausted all of my available resources and just want to be sure. When I try putting (?!Item3) in front of [a-z....]. It fails on "Item3" and captures "tem3"
I stated you were correct in your assumption in needing BOTH. But... I got it working :) "[\\s,]+((?!Item3)[a-zA-Z0-9]+)\\(([a-zA-Z0-9]+)\\)" In order to stop "tem3" from being captured, I just decided to check for a space of a comma before hand. I can live with that.
Your assignments are all backwards. EName = ename; not the other way around. 
&gt;Can someone tell me what im doing wrong and how I can fix it to make it work? This seems like a request for help.
Are you sure it matters? I did the same thing with other code, and that still works fine.
I tried it, and it kind of works; it writes to the console "ConsoleApp1.Enemy" for each enemy spawned. "ConsoleApp1" is the name of the file. But I'd rather it say like "Enemy1".
This worked! Thanks so much for the help :D
I'd opt for a basic can flat file for your db: just save "name,comment" per line (remember to encode newlines and commas). Should be simple enough to load line-by-line, and or imple.wbt pagkng by skipping the first x lines before reading
IMO, nothing really changes. Just fresh paint on old concepts. These days you’re more likely to encounter .net/web api and a js baked frontend
&gt; Enemies.enemy(i) For a `List&lt;&gt;`, use `Enemies.ElementAt(i)`. For a `string[]`, use `Enemies[i]`.
Yes, it matters. Also, lose the prefix "E" on your variables. Make it as simple as possible - an enemy has a Name, not an EName. If you use visual studio, I'd recommend installing the roslynator extension. It'll make all sort of recommendations regarding syntax, semantics and correctness. 
Everyone has been doing dependency injection for a long time. Maybe you are confusing trends for what you personally are learning about at that moment?
Read the entire post. Then get back to me. 
Just a quick gander at this But should it be Enemies[i].name? Or something along them lines
But really, you should put more time into understanding why your original attempts didn’t work, instead of just accepting solutions. At least if you want to get better, which I assume :)
Thanks that's the kind of stuff I was looking for
Well there's development fundamentals (things like DI that OP mentioned) and there's new technologies. The fundamentals change at a glacial pace, but there's always new tech coming out. Javascript is the obvious example, for those of us doing full stack work, but even in .NET there are still things to keep up with - .NET core has been moving fast over the last few years. Personally I feel like going to the occasional meetup and/or conference\* is more than enough to keep you up to date enough. It's more important to just socialise there and you'll learn a lot of things by talking to the right people. OP if you want to learn patterns like DI, these are already established and generally don't emerge often. I'd pick up a book like Head First Design Patterns, or start learning online. Pluralsight is a great resource. \* Pick a community organised conference if your business won't pay for an expensive corporate one
Those are properties, not variables. Their scope is the class
I can't say a lot without looking at your xaml file, but I would suggest you look up views and layouts in xaml
I use twitter. I didn’t believe it to be useful but it definitely can. You just need to follow the right people. For instance, I do .NET development and (thankfully) with ASP.NET Core. They are moving very fast and following people like Damian, David and all the other active people on the asp.net team is very helpful. Most of them are very active there. How so I find these people? Github. Just see the commits on projects you are interesting and then you can pretty much figure it their twitter accounts. 
You also need of course to cut down the bullshit there. Mute words feature on Twitter can help. Lot.
I should have mentioned it in the OP I guess. I have been working in the industry for 20+ years. So yeah, there really aren't a lot actually new patterns coming up. But there definitely are trends of what set up techs are being used. Good idea with the conference. Maybe I should check one of those out. 
Look for the terms "computer vision" and "motion detection". I'm sure both EmguCV and AForge can do this.
Mate DI is an old concept. I suggest studying computer science materials.
It doesn't support async at that point since it's in a list. Use can simply use ToList() and don't await or you can build a database query properly. The way you have it setup you would be executing multiple queries against the database when you can do it in one. var query = from cbn in _db.ChargebackNotes join cb in _db.Chargebacks on cbn.ChargebackId = cb.Id select cb; var chargebacks = await query.Skip(query.Parameters.StartIndex).Take(query.Parameters.Size).ProjectTo&lt;ChargebackListItem&gt;(_mapperConfig).ToListAsync(); 
Or the dot net rocks podcast!
Then I would respectfully pose that the teams you were working on were not that knowledgeable about DI and SOLID.
It's not only the buttons that have their size / location distorted, but also the textbox. Looks like a problem with Windows DPI scaling. I had this problem with WinForms, don't know if WPF has same issue tho. 
It has been popular for a long time, but a couple years ago they added first class support for DI/IoC to the platform (ASP.NET Core) and made it a part of the startup code in all of the templates as well as including it in the Microsoft architectural guidance documents. DI/IoC has always been a good idea, but several years ago Microsoft made it a requirement to understand the basics of it.
If you're using Winforms, not WPF*
Er. `List&lt;T&gt;` definitely has an indexer. `ElementAt()` should rarely be relevant.
If you're posting form url-encoded content, then you're not sending JSON. Consider using `ObjectContent&lt;T&gt;` with an appropriate serializer (probably via `JsonMediaTypeFormatter`) instead. Using the correct media type information may fix your problem without requiring "Content-Length". Can you share what led you to believe that "Content-Length" is the problem? 
Email newsletters. Sound arcane but having someone else send you a weekly “what’s new and upcoming” list is invaluable 
Supposedly WPF is better on high-DPI screens than WinForms. But I think you need to use the layout controls and not try and hand-position them. 
Good job not falling into the temptation to utilize your httpclient in a using statement! 
I forgot
Yes, When I add this line of code, and then try to execute the code: content.Headers.ContentType = new MediaTypeHeaderValue("application/json"); It comes up with an error in response header that the message cannot be empty. Even though I have specified my message 'message: test3434'. I think it's because the content\-length that was set automatically has limited my message thus it made it empty because I have more POST data than what is written above. That's why I think it was important to initialise content\-length
&gt; If you're sending form url-encoded content, then you're not sending JSON. Merely adding a header doesn’t transform the content you send into JSON. It's like making an assertion about the content's shape, and that assertion is likely to fail on the server side. If your intent is to send JSON, you should send JSON. The request body will resemble this: { "message": "test3434" } Investigate more complicated failure hypotheses _after_ making sure that the request is sensible. 
The only reason to use DI is for unit testing. It shouldn't be to pass around Singleton like objects but rather to treat things like services that are heavily bound to a technology that needs to be abstracted away so that in the future changing them out is simple. An example would be to unit test things dependent on entity framework. Use a mocking framework with constructor injection and you have really fast easy to use unit tests. Now take it a step further and use the repository pattern and you can expand your use of mocks and in the future change out entity framework for dapper or some other library without changing much code. 
My best advice is to invest into a pluralsight subscription, practice as much as you can! Asp.Net core 2.0 is the way to go, forget about the past, do that [tutorial](https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/?view=aspnetcore-2.1). I would also suggest studying the Microsoft exam in C# fundamentals, it's a bit outdated but if you know that stuff you can move on to better stuff.
Oh, does it? I was just going from memory. Even better!
&gt; I think it's because the content-length that was set automatically has limited my message Maybe, but regardless, you're sending FormData but pretending it's JSON. Either format your data as JSON instead, or change the content-type.
Speaking as someone who uses Regex a LOT, you're better off matching all items and then eliminating one later in code. In my opinion, most people's aversion to Regex comes from programmers who try to bake logic into the code, since the patterns rapidly become hard to parse. While doing a pattern match and then filtering with code might involve an extra line or two, I believe it's way more maintainable. For example: string .Where(x=&gt;x.IsMatch(pattern,x)) .Where(x=&gt;x != "item3(something)");
It depends on the circles you are working in and what the language developers are pushing at the time. For example, DI has been around a long time and someone may not have been aware of it. Then suddenly ASP starts advertising "DI integrated into the framework" and a lot of people start hearing the term for the first time without needing to look for it.
So at first I didn't like this, but now I friggin love it
My problem is that I use the count of the match collection for other things before building my array. If I end up with a count of 1, I have no way of knowing if that 1 is the one I want to omit.
You could implement a [Singleton](https://msdn.microsoft.com/en-us/library/ff650316.aspx).
This is what a message bus is for.
Usually development communities. However, most of the newer trends don't see life in a professional environment for several years just due to the volatile nature of new frameworks. For example, a lot of frameworks are made to make something easier, but as a result are bloated as hell and require specific knowledge in that domain which other devs might not have. DI/IOC isn't new, but it might not be common in professional environments unless someone had the knowledge and structured the project as such. Which... I wouldn't count on in a lot of places, especially those who are updating/running legacy projects using some 10 year old .net version. Same with .net core, a lot of places are reluctant to migrate because they still see it as "bleeding edge", but if you keep up on it regardless, then your skill set will be that much better in a few years when more and more places adopt it. This also happened with .net overall. I remember learning it in 2000/2001 before it became common, and everyone still wanted to cling to ASP/COM+ crap.
So have one ViewModel for all of my views?
Depends where you get them. Like most comp sci courses in most universities are very behind on the times, and you wouldn't even learn DI/IOC there. 
No, a singleton is more like an additional resource. You will still have you individual views, models and controllers. A singleton is just a class that will only be initialized once and can be implemented throughout to all the controllers if needed.
I'm currently using a grid, here's my XML: https://pastebin.com/iMS7ybF3
So the Singleton would store all of my global variables and methods? I like the sound of that
Move to management 
ASP.NET was built around dependency injection...
&gt; Right now where I work they pass around fucking unity container and then resolve from it, which is the Service Locator anti-pattern and it stresses me out every time I see it. I am hoping to sneak a couple of classes in that do it properly. \*twitch* 
It's painful.
There's different ways to do it, but you can co-locate tenants on the same database. Different ways have different benefits/tradeoffs, e.g. you can identify tenants using a TenantId column. This is the simplest way, but there's no tenant isolation and one bad query or one injection vulnerability and all tenant data is at risk. The other way is to use schema per tenant. That way each tenant is isolated from each other (if you have a user per schema and lock it down). You still have the problem of restoring a single tenant's data or migrating it if there's noisy neighbours, but it's better from a security perspective. This is assuming you're using an RDBMS. There's ways to do this using a document database, e.g. Cosmos DB.
Your controller class could be used to pass a wrapper for the variable between classes. This wrapper could then have an event handler used to notify the view models: (Design may differ slightly depending on how your Controller is implemented): public class SharedModel { public int SharedVariable { get; private set; } public event EventHandler VariableChanged; } public class ViewModelA : ViewModel, IDisposable { private readonly SharedModel _model; public ViewModelA(SharedModel model) { _model = model ?? throw new ArgumentNullException(nameof(model)); _model.VariableChanged += OnVariableChanged; } private void OnVariableChanged(objec tsender, EventArgs e) { //Process } public void Dispose() { _model.VariableChanged -= OnVariableChanged; } } public class ViewModelB : ViewModel, IDisposable { private readonly SharedModel _model; public ViewModelB(SharedModel model) { _model = model ?? throw new ArgumentNullException(nameof(model)); _model.VariableChanged += OnVariableChanged; } private void OnVariableChanged(objec tsender, EventArgs e) { //Process } public void Dispose() { _model.VariableChanged -= OnVariableChanged; } } public class Controller { private readonly SharedModel _model = new SharedModel(); public ViewModel CurrentViewModel { get; private set; } public void SelectA() { (CurrentViewModel as IDisposable)?.Dispose(); CurrentViewModel = new ViewModelA(_model); } public void SelectB() { (CurrentViewModel as IDisposable)?.Dispose(); CurrentViewModel = new ViewModelB(_model); } } 
I use a variation of the MVP pattern for such things https://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter
Non-Mobile link: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^176021
First, I would never use the margin property as it tends to cause a lot of problems when you are using automatic layouts. Second, you image seems to have 4 rows and 4 columns, why are you using just half of them?
That's terrible design. Don't do that.
They put limits on how much data and frequency of access so the free tier doesn't get out of hand. Ultimately, their enterprise customers are the ones paying the bill, but it's more-or-less a marketing expense, as they hope that you will outgrow it and start paying them at a higher tier where they can make a profit. If your question is "How do they store data cost effectively", that's the trick. Someone the size of MailChimp is able to negotiate a much better price than you or I. Either because of volume, or because they sign agreements to commit to their storage partner for a long time. 
I've got some powershell that can install itself as a service. It does this by compiling some in line c#, installs that as a service, and the compiled assembly calls back to the original script. It's pretty slick
Thank you very much! (: it worked. Could you explain me what's the difference between name and id? (I wrote id because this is what Visual Studio suggested, it's not that I know anything) I tried to search it up, and I found this: "For example, you may have several radio buttons with different id attributes, but the same name. When submitted, there is just the one value in the response - the radio button you selected". My radio buttons are actually like this: &lt;input name="radio" type="radio" value="1"/&gt; they have no id sent to the aspx.cs file, but rather "value".
Name,value pairs are sent back as part of your form submit event Id is more for using JavaScript, css, etc
Thank you! Oh, I actually remember using id for designing the page in css
I think you’ll want to take a look at web sockets. Pretty easy to implement and allows multiple server connections. It’s how a lot of chat apps work but instead of sending typed text you would send whatever logic it is that player X is doing client side and process it server side. All clients will see in real-time as they’re all connected.
LOL. I have had to teach my coworkers what interfaces are, why to use them, and how DI helps with unit tests. I showed them how to use the Unity container. Registering/Resolving,etc. Basically people who know absolutely nothing. But I have never seen anyone pass around the container itself. It just makes me laugh. Lol this is great
Talks way to fast for people learning C#. I am sure he is talking the right speed for people that already know C#. It's just like languages though, if someone is learning French and you dont slow down when speaking to them they wont understand anything. Please tell your friend to slow down when teaching languages to people that are not literate.
DI is D in SOLID, start there any move up
Are you using a pure C# implementation, or are you using/open to using a framework?
Did they actually understand and appreciate all that you showed them? I wish I could do that with mine. I just get "but why would you pass the interfaces via the constructor when I can just resolve everything I need either by passing the unity container in or even just using the static one and resolving from that?". I just fucking die a little every time they say that. I have sent them this http://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/ (he's a great technical author and it's who I learnt proper DI from) but they just "don't get it" despite the fucking screenshot that simply answers why you SHOULD have the interfaces as constructor arguments. &gt; But I have never seen anyone pass around the container itself. It just makes me laugh. Lol this is great You're very lucky, there's dozens of articles explaining why it's a terrible idea because it is just so prevalent.
Probably pure C#, the people at college are quite strict. I think libraries is as far as I can go
I personally love the Unity Container. Patterns and Practices team did a great job. Regarding your question. No. I made a whole PowerPoint for them. Explained every detail. Spoon feeding. And.... They don't think unit tests are needed. They don't understand the AAA pattern and think mocking is too strange. And they think injection is a waste of time. Code coverage percentage is 0 for their code. So yea, I was super successful 
https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions
This works great, thanks!
Blazor is still probably years away from polish. I think what you want to do is play around with the ASP.NET MVC stack. Learn some typical frameworks along the way, such as Bootstrap on the client side, and SignalR on the server side.
2 minutes lol
Here is the problem with this kind of reply. OP hasn't learnt how to debug the problem. You just gave him the answer on the silver platter.
Damn.... maybe you should find a new job? I couldn't suffer in that environment long. Could ask in future interviews to avoid equally as bad places too.
As long as it works!
Have you tried a JS framework? It's not all jQuery bullshit. You might enjoy it, and gain an employable skill set compared to a very experimental technology that IMO isn't really going to go anywhere.
Removed: Rule 4. Move all of your game logic and all of your bot logic into their own "Class Library" project that can run without any concern for GUI. Then you can create automated unit/integration tests for your bot and game.
How else can you teach a programming language in 2 minutes? You gotta talk fast!!!!
Yeah video needs to be in 5 mins.
He appriciates all the feedback and he will take it into consideration! He says thank you everyone!
You declared SetQuestion as an instance method, but you’re invoking it as a static method. Should be: card.SetQuestion(...) 
Oh okay. Could you show me what it would look like if I were to use is as an instance method? I also don't know what the difference is.
Could you explain?
Oh okay. Thank you for the help.
Do you mind fixing it up or tell me where I should? Sorry :L
After the last line, add a closing bracket. You close the if block with the second to last closing bracket. And you close the method with the last closing bracket. So you're missing one for the class.
Oh, thanks. I've tried that but it comes up with a new error (yipee); Assets/Ball.cs(22,15): error CS0103: The name `hitFactor' does not exist in the current context 
Is hitFactor a method you made, seems it is out of scope after closing the class? Is it supposed to be in the same class?
Well find hitfactor in the original code. I can't do much without seeing the code you have, aside from this class. 
I'll look into it, might be an issue with the tutorial itself actually. It's a bit dated. Thanks man.
No problem. That's gotta be frustrating, was it this one by chance? https://unity3d.com/learn/tutorials/tic-tac-toe/introduction-and-setting-project
It was this one; https://noobtuts.com/unity/2d-pong-game I'll probably try the one you linked now though :P
It's not that DI is new, but using it all of the sudden. After 10+ years of doing .Net I suddenly saw it everywhere. Also it was just an example.
Are you using an IDE? Most editors these days will give you some sort of visual hint/error if the file isn't structured correctly
Yeah, using MonoDevelop which is packaged with Unity. The error given is listed by it but since I'm newbie I can't wrap my head around it. Hoping someone had a solution to the script without having to post the entire project file :P
I'm trying to image the app so bear with me... Is the action the same for each item in the grid? If so you could put the action related to that button in the ListBox Item viewmodel (If it makes sense in the separation of data)and bind the button command directly to it If the action is not the same for each item, then you could put it in the grid item viewmodel and have the button command bind to the selectedItem.Action 
That would be extremely expensive. It's better to key on tenant id and keep it all in one place while you can.
I think the others have adequately answered your original question, but I wanted to give you the style note that writing a SetQuestion function is not particularly in keeping with C# practices. Consider using [Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties) instead.
That is very awesome. It sounds like a more modern version of psexec
Yeah, [something like this](http://dotnetpattern.com/mvvm-light-messenger). You write your own messages and Register&lt;TMessage&gt; them on any Action you want on the receiving side. Same thing for any sender with the Send&lt;TMessage&gt; method. 
It doesn't work perfectly. If you transmit ...z indicating UTC, .net will deserialize that into datetime converted to local server time. Because of the date time Kind setting which is just a really weird construct and does not match up to time zone at all
I think you have already gotten the answers you need in this thread, but I'd like to add something, namely how you can approach a problem like this. This is just *my general thought process* when it comes to approaching any problem. It might be a bit too philosophical, but bare with me. It might help you approach a problem differently in the future. :) For the moment, imagine a book; any book! OK ... Now imagine another book, but try to make it *vastly different* from your first book, right ... You might (for instance) imagine the King James Bible, and the third part of One Piece (a manga). Both books; but vastly different... How is that? What makes 'a book, a book'? Well, it's what philosophers might refer to as "essential **properties**", e.g., a title, pages, cover, author, etc... These constitute a *definition*, which is just another word for a **class**ification. This is what you *class is*: a definition of something. Now, Imagine a flash card: What constitutes a flash card? Well, it must have a question on one side, and an answer on the other. Simple enough, now, strictly speaking: A "flash card" is not flash card before it has its question and answer set, in other words... "you cannot set the question on a flash card", because then *it wouldn't be a flash card in the first place*. Flash card: - Must have a question - Must have an answer Another way to think of this, is that a "flash card" has a dependency on "question" and "answer", before it can even "be a flash card". In programming, there is paradigm for this, it's called a "immutible data structure" (that's just a fancy way of saying "structured data that doesn't change"). In C#, you can use the following (extremely common) pattern. public class FlashCard { public string Question { get; } public string Answer { get; } public FlashCard(string question, string answer) { Question = question; Answer = answer; } } And then use it as such: var card = new FlashCard("How many bits are in a byte?", "8"); Or, if you prefer verbosity: var card = new FlashCard( question: "How many bits are in a byte?", answer: "8"); And then: Console.WriteLine(card.Question); // Output: How many bits are in a byte? Console.WriteLine(card.Answer); // Output: 8 Now, for completeness, let's go over the above code. - `public class FlashCard` means: "a publicly exposed classification, named "FlashCard", simple enough. - `public string Question { get; }` means: "a publicly exposed **property**, named "question", this property is "get-only" (otherwise it would be `{ get; set; }`) - `public FlashCard(string question, string answer)`, this is your "constructor". The only way to "create a flash card", is via this. Which means: there is no way to create a flash card without providing both a question and answer. - `Question = question;`, this is where you set the `Question`-property of the *instance*. The *only place* where you can set the `Question`-property, is from the constructor method. - `Console.WriteLine(card.Question);` prints the "question property" of you card instance. Let's clear up the word "instance". There is on the one hand, the class (the definition), and then there are *instances of the class*. Every time you use the `new` keyword, you create an instance of the class. Just like you can have multiple "books" that share the definition of "book", you can have multiple flash cards that share the definiton of "flash card". The definition (class) is simply the "shape" of your instance.
When building APIs I always draw it out. My general rule is to expose nothing, and when a valid reason comes up to expose something, I do. The fewer end/entry points you manage, the easier maintainability should be
When you declare the string literal file path: `var newFile = @“Export/Articulos.xlsx”;` You need to use a backslash rather than a forward slash: `var newFile = @“Export\Articulos.xlsx”;`
&gt; One of my colleagues is making the argument that I should refactor the nounVerbers, attaching them as members of the nouns. His motivation is that most people see "nounVerb" type classes as behaviors and will assume that our API provides them as members/properties of the "noun" types. That is true. When writing in an OOP style, verbs are usually methods on nouns. A "verber", as you call it, would generally be an **optional extension**. For example, an `IComparer&lt;T&gt;` is used to make comparisons when the building `IComparable.Compare` method isn't what's desired. Consider `StringComparer.OrdinalIgnoreCase` as an exemplar. **** You may be thinking "What about extension methods?". To that I answer yes, but only when... * Applying to classes that aren't in the library * Applying to interfaces You should not have an extension method on a class itself on in the same library as the class. Why? Extension methods are harder to find and this would be unnecessary. Exception: tricky stuff like "this method can be called on a null object".
Google c# implement IComparable In this case you could forward the implementation to the object you want to order it by e.g public int CompareTo(Program obj) { return Index.CompareTo(obj.Index); } (this is an implementation of the generic IComparable, IComparable&lt;Program&gt;. Might not compile, on phine right now, but you get the point)
[This was posted here just the other day](https://www.reddit.com/r/csharp/comments/8f5i9m/is_null_versus_null_in_c/)
Thanks, but already try that and the result is the same, only I get %5C instead 
In that case you can remove `Export\` altogether, though it won’t, of course, end up in a folder titled Export. To provide any further advice, we would need to see the code that makes the method ‘ExportarExcel’ in the ArticulosService class.
Tell your friend to re-make the video, but at a slower pace. He's speaking way to fast.
Appreciate the helpful advice. I'll just leave this SO thread and be... Wait a minut?!.
Thanks again, but ExportarExcel method has nothing to do with the problem, because it only creates the excel file. After a lot of try i have found a solucion myself changing return stattement: var myFile = File(memory, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", newFile); myFile.FileDownloadName = Path.GetFileName(newFile); return myFile; 
This was very very useful. I have only one question. What do get and set do? The version you showed me seemed a lot cleaner than what I was planning, but I want to make sure I fully understand it.
I tried `is null` for all of 10 minutes until I needed to write `is not null` and then I unwound it all. The lack of symmetry is a big problem.
thanks man!
Yeah he uploaded a new one where he was talking alot slower, he took all the feedback into consideration and he will slow down the upcoming videos
As I think about it, it's actually worth pointing out that all `Path.GetFileName()` is doing is converting `@“Export\Articulos.xlsx”;` to `@“Articulos.xlsx”;`, so it's exactly the same as simply removing 'Export\' from the string. If you want to save the file to the Export directory as implied by your code, you could simply add: `var folder = @"~\Export";` then you could declare the File as `var myFile = File("", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Path.Combine(folder, newFile));` 
Removed: Duplicate.
You may be overthinking this, so let's deconstruct it a little: &gt;I am developing an MVVM app with lots of threading. Why? No matter what, parallelism will significantly increase the complexity of your code, and unless you have first determined that it's necessary, you should put that in question. &gt;The View/ViewModel should run on the main thread (UI) thread &gt; &gt;Everything else will run in a different thread(s) Sure. The UI in most GUI frameworks is single-threaded, so you typically want all of the UI (i.e., the view) to run on one and the same thread. For long-running operations, different threads make sense. For _brief_ operations, you run risk of adding complexity (and, actually, _slowing things down_ because of constant context switching) if they run on a different thread. That's part of what makes the TPL / async+await attractive. Their model of background operations often doesn't actually run on different threads.
&gt;That's part of what makes the TPL / async\+await attractive. Their model of background operations often doesn't actually run on different threads. Sorry for my Ignorance. TPL = TaskParallelLibrary. And that is essentially the use of things like ; public async Task MethodName await Task.Delay(2000); await Task.Run(() =&gt; MethodName()); etc... When you say often doesnt run on different threads? How do I know if it's running on different threads? ...and if I am using those techniques \(I am\), can I safely read/write object instances created outside of those tasks? &gt; You may be overthinking this It's very probable :\)
In my experience it can be tricky when things are so vague. Do you have any examples in mind? I find it easier to generalize from the concrete than to go the other way. Otherwise it's a bit too theoretical.
&gt; When you say often doesnt run on different threads? To clarify for him, it ***often*** doesn't run on different threads, but it can, so you still need to be thread safe. By running on the same thread, it avoids a context switch, and is thus much more performant. &gt; can I safely read/write object instances created outside of those tasks? No. There is no magic bullet that will let you do this in any language, because all languages are just syntactic sugar over a microprocessor. Now, what can get you 99% of the way there is what many Functional programming languages try to do -- immutability. You get around the problem of needing to lock to modify shared objects by *banning the modification of objects*. C# doesn't have anything to really help you with immutability (yet), but following that style can help with multi-threading. 1) No setters on your objects that get passed around between threads. Everything is set in the constructor. All collections are read-only. 2) Functions don't modify anything static or the thing that was passed in, they return a new object that is the *result* of the work they did. \#2 is more important than \#1, but \#1 helps keep you (and whoever else works on your code) honest. This can do bad things to garbage collection performance if you do it wrong in high volume, though. It GUI land, this means you pass messages around using producer/consumer and events (and framework-provided databinding) rather than just accessing getters and setters on shared objects. See `BlockingCollection&lt;T&gt;`
Java calls their stuff Streams at the least.
I didn't say anything about blogs and sites. That's actually what I was asking about. I am only basing this on 20 years of experience working in the field
This was helpful. I had already begun to assume that was the case, but this solidified that assertion. I refactored and ran, no more runtime error; working as intended. So thanks for the point in the right direction. However, Asynchronous is my weapon of choice, and this is a highly highly used method. Any thoughts on an async solution?
A get-only property may only be set from the constructor, whereas a get/set property may be modified from the "outside". If `Question` was `{ get; set; }`, then it would be legal to modify it using `card.Question = "fooo";`
Depends on your customer base. If you're selling to enterprises, then separate databases are the way to go since you won't have to convince their technical team [1] that there's no chance of data being intermingled. [1] Fortune 100 customers will send technical teams to you for explanations of how your system is designed before signing 
What I mean is, I don't understand what get is/does.
Alright, I'll give that some more thought. Very informative, tyvm.
I can see I still have quite some fundamental logic to learn. Very informative as well though, thanks.
The solution I mentioned is fully async capable. You get the most benefits from async when the execution is using io bound processing, like the database, file or any external network requests. When the processing is within the runtime process itself using just cpu then async operation doesn't provide much benefit. Async helps because the thread running the async io bound operation can be freed to run for another process while the external io bound operation is running. The whole process is more complicated but that's the short and sweet.
Can you edit the codeblock, its really hard to read.
Yeah, I didn't anticipate it formatting that way. Thank you.
`Dictionary&lt;string, int&gt;`?
Thanks for your answers! How does this scale? And won't the database become a bottleneck? Would it be too complex to have free tenants (with limited amount of data) in one/a few shared DB and havin paying tenants have their own DBs? Could free DB:s such as SQLite running along the application be an option in Azure?
&gt; The View/ViewModel should run on the main thread (UI) thread Yes foe the view, not for the VM. &gt; In order to update the UI from a background thread I need to use a dispatcher (or use a messenging bus) No, you don't need a dispatcher, I use reactiveUI and I don't need anything. I think you need to use a good MVVM library, and learn more about threading.
You'd have to determine how many tenants you can collocate on one database. You'll likely end up with multiple low-cost/low-performance databases. You could then use Azure Table Storage as a map to find out which tenant is on which database. I've never tried using SQLite in Azure so I can't answer that question, unfortunately.
Thanks! How do you regulate an ASP.ner WebApi as easy as possible?
Is using TenantId (store free tiers in one DB) OK according to GDPR?
DI is not only for unit testing.
I think "years" is exaggeration.
`get` simply implies that the property can be *read*. A property is *always* `get`:able, otherwise it would be pretty useless. `set`, on the other hand implies that the property can also be set outside the constructor of the class, that is: it is "mutable" (changeable).
Oh okay. Understood.
I don't know MVVM so I can't offer advice there. Your "general threading" section is all correct; but I notice you're only mentioning locks as a synchronization mechanism. Locks are a good tool (nothing wrong with them) but they are simple and blunt at times. I'm not saying don't use them, but you would definitely serve yourself well to just read about the more fine-grained options too like [concurrent collections](https://docs.microsoft.com/en-us/dotnet/standard/collections/thread-safe/) and things like [RWLS](https://stackoverflow.com/questions/4217398/when-is-readerwriterlockslim-better-than-a-simple-lock). Of course, as /u/RiPont already mentioned, the *best* multithreading strategy is to not have mutable data anyway!
I also use Vue and like it a lot.
Thank you !
Got it, your last question was resolved from your previous explanation, thanks. &gt; Another way to put that is to say that "by the time the T1 writes 'lock released', it must have written everything that came before" and "no read by T2 may be older than its write of 'lock acquired'" (FYI: as the locks emit full fences the guarantees are actually stronger; reads/writes may not move past the barrier from either side). So then the general use of Thread.MemoryBarrier would also maintain this guarantee? For example var something = new Something(); var t = new Thread(() =&gt; { Console.Log("Something is " + something); }).Start(); According to documentation, the Start method of Thread inserts a full fence. If stated in your own words, every write before the Start call would be made thus making it safe to use the something variable in the new thread (it would not see a null reference). Is it safe to apply this thinking in general to full fences regardless of environment? In other words, I'm making sure it's not that lock that maintains visibility of the something variable reference but rather the fact that a full memory barrier is present. One more thing, are synchronization points (volatile being one of them) where writes/reads become visible a feature of the language or something part of the fences? 
Wow, amazing response thank you. I am going to have to save it as there is so much in there to process. Thanks for taking the time to give me so much good information and advice. 
Thanks. The developer for that was just on .Net rocks podcast latest episode. Very interesting. 
I have found async/await to be perfectly sufficient for a responsive WPF UI.
Yeah I'm definitly a noob :) Need to read more on threading....I'm using DevExpress' MVVM framework. I am more or less happy with it. I suspect though if I was to start from zero again I would probably go something like MVVMLight, but that's an inexperienced viewpoint....
This generally depends on the specifics of your application. e.g. - If you have a file sharing app you limit it to 250mb. If you have a chat app you limit it to 2 chat rooms. Things like that.
There are a lot of very knowledgeable people here but if you need to be sure you are GDPR compliant I would contact an expert in that area. 
Others mentioned email newsletters – I like them as they keep you focused and you choose when to read it. I curate [C# Digest](http://csharpdigest.net/) that sends you top 5 links per week from .NET world. Give it a go.
You could split like you are doing then check each word, keep a dictionary mapping the word to the count(when adding, first check if it exists, if not set to 1, otherwise increment count). Then once you go through the list you can go through your Dictionaries and keep the top N words of each.
If you read between the lines on the Blazor gitter and the github issues, you will see that most of the project is still just prototyped code. If the project becomes a commited production application then it is implied that they will go back and optimize the code, and possibly commit the CoreRT team to targeting WASM. If those occurs, then it may be two years before we have the first Blazor release which is stable enough to have confidence in for serious production applications...though I think a lot of that depends on your stomach for risk.
Vue with typescript would be my favorite, but the TypeScript support for Vue feels really raw. We get build errors in TypeScript whenever we tried to upgrade things or do anything not specifically mandated by the Vue CLI, and they have since stopped supporting the Vue project templates for use with the SpaServices middleware for integrating nodejs and ASP.NET Core development.
Others have asked, but you haven't answered. Why do you need "lots of threading" ?
Hello, sorry for lack of explanation, well I guess I may not need lots of threading. It turns out that I might be entirely wrong about that. The application is a sports trading application that works with an API. So there are a lot of intensive calculations on time series data \(roughly every 250ms a new price gets added\). Basically I plan to have the following; A Thread for the UI A thread for the businesslogic/service layer, That layer will likely spawn threads for doing timeseries calculations like simple moving averages, etc and threads for API calls. \(...and I realise now that when I say threads for the API calls, I really mean asychronous calls, which may or may not create a thread\). There is also some scheduled selenium screenscraping. At the moment, to do that I am running a perpetual loop that kicks of all the business logic. It schedules asychronous calls to things like; \- Download prices every 250ms \- Looks for new markets that fit filter criterea \- Look for indicators in those time series calculations These all kick off on different threads... Then I use those to add them to the time series calculations \(via messenging bus\) and various other messaging activities... I hope that sheds some light on what I am trying to do \(right or wrong or bad design :\)\). Probably bad :\) Still learning... Thank you for any thoughts/advice, really appeciate it
&gt; I shall now go to google immutability. It's a good exercise, at the very least, but don't treat it as religion. C# doesn't give you the tools to do pure immutability, and code you're interacting with probably won't be immutable. However, the *attempt* at using immutability will show you where you do and don't really need shared state. Most shared state is actually not necessary, and avoiding it makes your multi-threaded life much easier.
Couldn't you technically write your immutable bits in F#? And use that in your C# application?
Sure, but I didn't want to add more things for the OP to think about, quite yet. Sounds like he's doing GUI stuff, and "learn a whole new language" might be a bit intimidating. But if you want to do highly parallel computation on your CPU, then F# is probably worth learning. No idea if there's F# for GPU, yet.
Not gonna read through all your replies - I guess you might have realized lots of things I'm gonna say already. Just adding my two cents here. I feel like you do lots of "manual" threading that might create a lot of overhead. Especially if your background tasks are not *that* computation intensive. C# helps takes the complexity of manually creating threads away (unless you really need this kind of control). If you are doing lots of long lasting backend calls look into async/await. Unless you wait for *a lot* of those at any time, creating an extra thread for each of those calls is not necessary. If you are doing lots of stuff in parallel, look into the *Parallel* library. It works quite nice together with async/await, too. Basically look into *Parallel.ForEach, Task.WhenAll* and *Task.WaitAll* (there's more but this should get you started). Using those abstractions adds an additional layer on top of the barebones threading API. Think of a *Task* as something *like a Thread*. If you run say 10 Tasks in parallel. Depending on the hardware the program is running on and what your Tasks do, the outcome can be very different (there's more ofc). Maybe the runtime creates 2 threads, maybe 5 or maybe even 10. I assume out-of-the-box C# is better at handling threading than you are and it takes you quite a distance. It's not a silver bullet and manual tweaking is always important but I claim that if you use this right, this will run more efficiently. In more than 5+ years coding C# professionally (mostly Rich Desktop Client WPF applications), I very rarely encountered manual tinkering with threads and thread pools - not even a handful. For me personally this was always the case when I needed to do something like crawling the filesystem recursively and parallelly.
This was mostly the reason why I choose MonoGame, it allows me to use .Net standard libaries and nugets I otherwise couldn't with Unity (or atleast as far as I tried) Maybe I need to find some properly coded and structured examples before I can avoid monobehaviourhell
I think you're overthinking this. If you have I/O, declare a command as async; if you have CPU intensive work, pop up a Task&lt;T&gt;. Don't delve too much into the specifics and let the framework do the heavy lifting for you.
&gt; And the rest will populate with their respective coded row. How do you see this? btw: name your controls. Right now form1, form2 and rectangle1 make sense but 6 months from now if you reopen the project it won"t
i actually put form1,form2,rectangle1 to let any user here to understand easier. I named it differently in my program. &gt; How do you see this? I meant like I will have 8 different rows in my database and each button will update form2 label to that respective row that they are coded for. And coding the 8 different buttons to update form2 label is the issue I am facing currently. 
Or... You could just ask your question.
Sounds interesting but... https://ibb.co/hAT9ZH
Thanks for the response. I do not have a question .. trying to find a partner who can work with me on building the product.
Then you should look in / for the right subreddits, instead of violating the rules of this one.
This looks like it is adding a WPF control to the already existing windows form . What we are trying to achieve is a WPF form inside of a winforms application. i.e A button is clicked on a windows form application and a WPF window comes up. Sorry I wasn't clear before .
You were actually having the textbox in a different row than the buttons, but all the buttons shared the same row Something like this scales everything according to Windowsize: &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="*"/&gt; &lt;ColumnDefinition Width="*"/&gt; &lt;ColumnDefinition Width="*"/&gt; &lt;ColumnDefinition Width="*"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="50"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;RowDefinition Height="*"/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBox Grid.Row="0" Grid.ColumnSpan="4" /&gt; &lt;Button Grid.Row="1" Grid.Column="0" Content="=" /&gt; &lt;Button Grid.Row="1" Grid.Column="1" Content="*" /&gt; &lt;Button Grid.Row="1" Grid.Column="2" Content="/" /&gt; &lt;Button Grid.Row="1" Grid.Column="3" Content="DEL" /&gt; &lt;Button Grid.Row="2" Grid.Column="0" Content="7" /&gt; &lt;Button Grid.Row="2" Grid.Column="1" Content="8" /&gt; &lt;Button Grid.Row="2" Grid.Column="2" Content="9" /&gt; &lt;Button Grid.Row="2" Grid.Column="3" Content="+" /&gt; &lt;Button Grid.Row="3" Grid.Column="0" Content="4" /&gt; &lt;Button Grid.Row="3" Grid.Column="1" Content="5" /&gt; &lt;Button Grid.Row="3" Grid.Column="2" Content="6" /&gt; &lt;Button Grid.Row="3" Grid.Column="3" Content="-" /&gt; &lt;Button Grid.Row="4" Grid.Column="0" Content="1" /&gt; &lt;Button Grid.Row="4" Grid.Column="1" Content="2" /&gt; &lt;Button Grid.Row="4" Grid.Column="2" Content="3" /&gt; &lt;Button Grid.Row="4" Grid.Column="3" Content="0" /&gt;
I think you may be writing with the [God Class Antipattern (#4)](https://sahandsaba.com/nine-anti-patterns-every-programmer-should-be-aware-of-with-examples.html). The nounVerber naming is a red flag. The use of composition may make it seem like theres different classes for a thing, while they actually obfuscate the amount of responsibilities behind the API-call. Your code might have some Database class with a Save method that needs to know which *noun* it is saving. Turn that around and implement Save on the *noun*. Give your *nouns* a base class to inherit from and move code from the *nounVerbers* to that *base* object. 
Removed: Rule 1.
I was not quite happy with the build in functionality, so I wanted to make my own, to give me better control. My library right now can save settings for forms and some user controls besides the settings in SettingsData, and it has some functionality for where settings are saved. (Local/Shared)
Sounds like the only thing you want is a library that serialized and deserialize an object of type T. Based on each application usually have their own settings that are not shared with different applications.
Yes something like that, I just do not want to maintain the same code in more than one place, so I am putting the code in a library. And then I need a way to have my SettingsData class contain different data for every different application.
[Yes](https://www.google.com/search?q=launch+a+wpf+window+from+winforms&amp;oq=launch+a+wpf+window+from+winforms&amp;aqs=chrome..69i57j0l2.9759j0j7&amp;sourceid=chrome&amp;ie=UTF-8)
oh wait, So I just add a new wpf form to the project and go forward. Got totally confused when I saw two different project types \[wpf project and windows forms project\] . Thank you.
Can you post your code? What have you tried? Did you look at traffic using Fiddler?
Do you want it to be strongly typed? If not, you could use a dictionary. If yes, you could just create a settings base class and extend it for each app. At that point you are basically just serializing the custom object.
I have tried so much and yet so little. Im limited in what i can do in powerapps with the Http Post from the custom connector. I'll leave the code snippets i think are relevant. UploadImageController creates async task and calls custom inmemorystream object which inherits MultipartStreamProvider public async Task&lt;IHttpActionResult&gt; UploadImage(string fileName = "") { //Use a GUID in case the fileName is not specified if (fileName == "" || fileName == null) { fileName = Guid.NewGuid().ToString(); } //Check if submitted content is of MIME Multi Part Content with Form-data in it? if (!Request.Content.IsMimeMultipartContent("form-data")) { return BadRequest("Could not find file to upload"); } Request.Content.LoadIntoBufferAsync().Wait(); //Read the content in a InMemory Muli-Part Form Data format var provider = await Request.Content.ReadAsMultipartAsync(new InMemoryMultipartFormDataStreamProvider()); public override Stream GetStream(HttpContent parent, HttpContentHeaders headers) { // For form data, Content-Disposition header is a requirement ContentDispositionHeaderValue contentDisposition = headers.ContentDisposition; if (contentDisposition != null) { // We will post process this as form data _isFormData.Add(String.IsNullOrEmpty(contentDisposition.FileName)); return new MemoryStream(); } // If no Content-Disposition header was present. throw new InvalidOperationException(string.Format("blablba", "Content-Disposition")); }
Addition: the code works from the swagger ui and with azure storage emulator. I also added httpruntime param to allow files up to 30MB
Use generics for the settingdatamanager. Initialize it with type of T and get a type of T back. No worries about extending or overwriting setting classes as the are application dependant and there by the responsibility of the application to implement correctly. 
Does the filename need an extension? Can you run Fiddler for the success and failure case and notice the differences? Are the HTTP headers different? What response do you get from the endpoint?
Created the Window. Call Show organisiert showdialog. Everything other i mentioned still aplies...
Im trying right now to get fiddler showing me what i want. ill get back when i got that figured out, thanks for your engagement!
Sounds good. Does it need an extension after the guid? Like .jpg? Also for your first if statement you can use String.IsNullOrEmpty
https://www.photonengine.com/en-US/Photon
Word of advice: The D.R.Y principle (Don't Repeat Yourself) doesn't exist in isolation. What I mean by that is you shouldn't be breaking architectural rulea, best practices, or common assumptions just to ensure you are following the D.R.Y principle. Settings are application dependent, so you won't be able to have a single settings class to rule them all, so to speak. You'll have to use generics or dynamics to achieve what you want with the former being significantly more preferable. You can write a `ISettingsService&lt;TSettings&gt;` interface and an internal `SettingsService` that implements it for each application. Anything that needs the settings will be injected with the interface. Couple this with an IoC like `UnityContainer` and everything will be nice and clean. With that said, I'd highly recommend sticking with the built-in settings functionality as much as possible, especially if many of your settings will be user-scoped. Using the "upgrade" pattern for user-scoped settings makes adding or removing settings really easy for applications that have already been deployed. As a professional anecdote, every application that I have seen that uses their own settings logic is a mess as far as maintenance of these settings is concerned. People add settings to completely new files in many different locations and turns it all into a maintenance nightmare.
You can for example write it in a separate program (or class library), make a public method that shows the wpf window, call this method from the original program
&gt; haha regex is the only thing i can use Really? Is there really no other conceivable way? RegEx is ONE answer, but seldom the *best* answer. I sometimes find creating a small parsing utility *easier* than writing, using and maintaining a verbose regex pattern. A parser is: - Labeled: you can create small methods which are self-explanatory) - Debuggable: you can step through it - Testable: you can write tests for it - It's likely better performing (if that's a concern)
Coding multiplayer support, is far from trivial, it's actually *really hard*. Have you ever played a triple-A title, that does multiplayer really bad? — Well, that's because netcode is *hard*. There are likely libraries that can help with this, but if this is a school project, and you thought multiplayer was "a cool add-on", then my guess is you're likely going to spend more time trying to "get multiplayer to work" decently, than actually being able to focus on the game, maybe focusing on some other aspects might be more enjoyable, and deliver more value in the end? :)
Thanks to u/godjustice for the pointers on this one. checks if has notes parameter is selected and changes the query if it is and selects distinct rows (otherwise multiple rows per chargeback would display. if (query.Parameters.HasNotes == HasNotes.Yes) { chargebacksDbSet = _db.ChargebackNotes.Join(_db.Chargebacks, cbn =&gt; cbn.Chargeback.Id, cb =&gt; cb.Id, (cbn, cb) =&gt; cb) .Include(x =&gt; x.Submerchant).Distinct(); } the rest was removed because it's unnecessary. 
\&gt;What would you recommend to become productive as soon as possible? Thank you. Find a job where you can use something other than [ADO.NET](https://ADO.NET) In all seriousness, pluralsight has some good courses on .NET related things and they have some on [ADO.NET](https://ADO.NET). I haven't personally used them as I have no need to learn it, but they're probably solid. [https://www.pluralsight.com/courses/adodotnet\-fundamentals](https://www.pluralsight.com/courses/adodotnet-fundamentals) [https://www.pluralsight.com/courses/adodotnet\-by\-example](https://www.pluralsight.com/courses/adodotnet-by-example) You can sign up for Visual Studio Dev Essentials for free and they give you 3 months of Pluralsight access for free, so I'd recommend doing that. [https://www.visualstudio.com/dev\-essentials/](https://www.visualstudio.com/dev-essentials/) Good luck!
Thank you very much. Is the use of ADO.NET discouraged now? 
You can have write-only properties, although uncommon.
The use of ADO.NET ties you to a specific DB schema and sometimes even provider. Modern architecture seeks to disconnect the underlying database details from the business logic so that schema or provider changes are transparent to higher-level logic. That said, learning ADO.NET will give you a good understanding of some of the things that are being handled automatically for you by something like Entity Framework. I wouldn't want to base my career on ADO.NET but I wouldn't discard learning it as entirely a waste either.
F# doesn't from what I could see, but they refer you over to Alea.
We show how you can convert your C# model classes to Swift, TypeScript, Java, Go, and others, using Newtonsoft and [quicktype](https://quicktype.io). I'm one of the authors of quicktype. Let us know what you think!
No, but check out the nascent Blazor stuff from Microsoft. 
No, ADO.Net isn't going anywhere. There are just a lot of devs that can't write SQL to save their life and rely on ORM tools like Entity Framework to do it for them. Being a junior dev, that's usually an assumption that others will make about you. For anyone wanting maximum database performance, ADO allows you to bypass many layers of abstraction (read: slow stuff) inflicted by the likes of EF. If you're doing one-at-a-time record inserts or updates and/or listings of a screenful of data at a time, EF (and ORM's in general) work great. When you're doing complex multi-table operations atomically and in bulk, you need to write a stored proc and run it with the least amount of overhead possible. That's a task better suited for ADO.Net.
Get rid of the SelectList from your view and have the controller populate the user id with User.Identity.GetUserId();
Never used it but Ooui's xamarin forms on the web might be what you are looking for https://github.com/praeclarum/Ooui/wiki/Xamarin.Forms-with-Web-Assembly
DotVVM is C# (but HTML+CSS, no JS) https://www.dotvvm.com/
`Substring`
Don't know why this is downvoted, but this guy gets it. Sure, never hurts to learn popular stuff like Entity Framework (and LINQ, and Lambda expressions, etc.) because it's so widely used, even if just for the sake of your market value as a professional programmer. But don't disregard the raw technology (that EF ultimately runs on/is built on top of). 
Bridge.NET https://bridge.net/? Also gives you C# bindings to JS libs via [Retyped](https://blog.bridge.net/massive-update-to-retyped-91248454e72e); so you can use them as if they were C# also
www.cshtml5.com is worth mentioning, I haven't messed with it in a while though.
Hi, [ADO.NET](https://ADO.NET) is fine, I'm pretty sure that EF uses [ADO.NET](https://ADO.NET) under the covers, although I'm not sure about the Core version. Learn some SQL. Find out what your company is using for its relational database. It will be most likely SQL Server, Oracle, Postgres, and then blah. The differences are fairly minor. You can install SQL Server as a developer for free, so I'd recommend that anyway. The tooling is cool. So you need to know two things to work with relational databases. One is SQL and one is the framework. For SQL there are two principles in place. One is \[Codd's rules\]\([https://en.wikipedia.org/wiki/Codd&amp;#37;27s\_12\_rules](https://en.wikipedia.org/wiki/Codd%27s_12_rules)\). These are cool actually. They say things like, if you want to edit the database you should be able to do so using SQL commands. So you end up with commands in SQL that can drop a table, create a table, index it, etc. This leads to the two types of SQL commands DDL and DML. DDL is all about getting data out of or into tables. DML is about defining those tables and its related entities. SQL is actually quite complex but it is one of those areas that is massively optimised at the back end. This doesn't mean you can't do anything wrong, but it does mean there are tools that will tell you if you've screwed up badly. Serentilla's laws include one which states: "Don't try to out db the db people". They are literally the best at what they do. SQL data is usually normalised or denormalised. It's worth understanding the normalised version and then I can just say that we denormalise \(flatten or put related data in the same row\) for performance reasons. Here's the wiki for normal forms. \[There are six of the buggers\]\([https://en.wikipedia.org/wiki/Database\_normalization#Normal\_forms](https://en.wikipedia.org/wiki/Database_normalization#Normal_forms)\) So when you are comfortable with SQL, and really before that, you can play with ADO. It's pretty simple really. You have Connections which define the connection to the database and it bifurcates into commands and queries. Commands usually execute a stored procedure, but don't have to, queries may also execute a stored procedure, or a query and return data. There are a bunch of objects in [ADO.NET](https://ADO.NET) and the cross over is extensive. You can usually achieve the same thing in one of a dozen ways. Wrap the ADO stuff up in more business specific language. For later reference look up Unit of Work pattern and Repository pattern. Those are the patterns EF \(Entity Framework\) uses. In the olden days people would encode business logic in the database itself. This is a practice that is frowned upon now. When you put too much emphasis on the database you are forced down a narrow path when you need to scale. If you rely on a database to give you the definitively true answer you are going to scale badly. Don't worry too much about that now, just keep it at the back of your head. You'll thank me one day ;\) Short version for ya. Learn a bit of SQL as that's what [ADO.NET](https://ADO.NET) is an interface to. Remember that [Ado.NET](https://Ado.NET) can do the same thing in a dozen different ways. That's ok. Don't sweat not using an ORM \(Entity Framework is an ORM\) as you'll need to know this stuff later when the ORM turns around and bites you :\) 
You can always check the thread id if you really cared to know, but generally you don't need to bother if you use the TPL and async/await properly.
Sounds like your adding a pane so yes very easy 
This is absolutely true. But it's not only uncommon; but I'd go as far as to even call it *stupid*. I'd much prefer to have a method for this e.g. `SetFoo(T value);`, often this is some other operation in disguise though.
Looks good to me, though I think the "Software Development Fundamentals" might be a bit dry or better to look at after the "C# Fundamentals for Absolute Beginners". I think maybe even the same with some of the CodeProject "Intro to OOP" article. Might be going into more advanced concepts that you don't need to worry about yet. Definitely check out /r/learnprogramming, they have excellent learning resources and users.
There are performance implications for immutability that do not suit every problem. Instead, you can use the concurrent collections like ConcurrentDictionary to share data efficiently between tasks/threads without requiring locking. Also, BlockingCollection is very useful for multithreaded processing.
We have very different definitions of boiler plate then. When I look at your code, I see a LOT of boiler plate. * ConnectionManager with the configStringName should only be referenced in one place for the entire project. Embedding the string directly in with the query should be considered bad code. * Parsing the data table IS boiler plate. * Any effective wrapper should make parameterizing the query simpler than that. The idea of an effective wrapper is to make it easy to fall into good practices. 
This guy. Not once in my entire 20 years of experience has the underlying database ever changed. Usually when you get to that point, the entire application is being re-written. In my experience, "modern architecture" creates more problems than it actually solves.
I haven't read or watched all the content, but skimming through it, I would say go through the "C# Fundamentals for Absolute Beginners" video series first. Some of the OOP stuff will come naturally. Once you have a handle on the core concepts (classes, methods, syntax), then you can start applying the higher level organizational concepts of OOP. I would say for that "Intro to OOP" article, I wouldn't go past the section ["4.21. What is a Use Case?"](https://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep#case) if you're an absolute beginner. Take a gander at [/r/learnprogramming's FAQ](https://www.reddit.com/r/learnprogramming/wiki/faq), it has a lot of guidance that can help you.
Stick with it, stick with it, and then stick with it. 
Brilliant, I shall have a read ouver the "Intro to OOP" and skim around it, making notes on the higher level parts. Currently reading through the FAQ and just subbed to that Sub-Reddit. Thanks for taking time out of your evening/morning (where ever you are based!). To reply to me, I am thankful for it
I meant the low-level ADO.Net boilerplate stuff, like instantiating the SqlCommand and SqlConnection (or some other subclass of DbCommand and DbConnection, which often get hard-coded in). This example is just that: an example. I included the ConnectionManager initialization to show where it came from, not as a normal practice. The embedded query string was also just an example. Most of the time, I use CreateStoredProcedure, which is the same as CreateQuery, but sets the CommandType appropriately. It only requires the name of the sproc, no EXEC needed. Parsing the DataTable is only boilerplate if it's identical every time. If you're using this technique, you know how to write SQL and should put your heavy-lifting there. Your sprocs can return a small "it worked and here's a couple of data values" result to your data table. Often, I only need to check `if(dt.Rows.Count == 0)` to throw an exception, and otherwise just move on. I haven't really found a good way to make the query parameters any easier, but I also haven't put much time into it. And FWIW, this helps newbies get into the habit of using sprocs and parameters instead of god-awful inline-concatenated abominations, so I consider it effective already.
This looks promising, the only problem is that I don't use Visual Studio, I'm on Linux doing C# coding using Mono and Xamarin Studio. I will try to make it work though, thanks!
Yes, too bad Microsoft shut down this project.
If you haven’t already, you’re gonna need a Stack Overflow account. 🤣
I would say probably Wisej and Ooui is the closest to Vaadin but for c#
I thought that Bridge.NET is only a C# to JavaScript transcompiler, I'd like something more complex. Maybe something like a widget framework for the Web. I hate writing JavaScript the most, but I'd like not to write HTML and CSS as well. :)
It is very interesting, but I'm not sure if I can go the WebAssembly route these days.
hahaha I am sure Ill be annoying people enough :L
This is a really good reply! I have never thought of solving problems that way, sounds silly I know.. Do you think the Codecademy course on Git is sufficent? I know Codecademy can get a bad rap at times. But it seems to cover basics Thanks for the ideas man! You placed some great points down for me 
I love it!!! Will totally use this from now on out. Thanks &lt;3
&gt; While that might be true, never in my whole professional career have I ever had to switch database platform or provider in a later stage of a project. How many times have you? Enough to know that it happens. It doesn't have to be "at a later stage of a project," it could very well be at deployment. Customer X uses Sql Server but Customer Y is an Oracle shop, for example. Or, time travel back several years and Customer X is a small account and uses an Access database while Customer Y is larger and uses Sql Server. Or, as is the case for a project currently being developed in my company, Customer X has deep pockets and wants to pay for the transactional security and immediate consistency that comes from a SQL database but Customer Y is a small mom-and-pop shop that would rather save money and can live with the eventual consistency that comes from NoSql databases. I've been a professional developer since 1984 so I've written DB access code using everything from IBM's C (not even C++) SQL API and Access's god-awful SQL pass-thru integration layer to ADO to ADO.NET to EF and finally EF.Core. I fully agree with most of what you've said - I actually prefer ADO.NET myself because I KNOW what's happening and don't have to hook up a SQL Profiler session to see what the ORM is doing under the covers (never a good idea anyway as it just makes me shake my head wondering about the code that gets produced). But the fact of the matter is that just because you've never seen it doesn't mean that it doesn't exist. ORMs have been around for years for a reason and while they're definitely not the do-all and be-all of DB access technologies, there is a reason that they haven't gone away.
Feedback: Dictionary&lt;string, dynamic&gt; could also be nice for C#, as an option instead of List or Array. I guess it's easy to change though
Probably? I usually tell people two things when it comes to learning git: 1. Read Pro Git by Scott Chacon (and others). It's the Gospel. 2. Get deep enough into Pro Git that you're starting to get a gist. Then go watch the YouTube video, 'Git for ages 4 and up.' Guy in overalls, playing with tinkertoys. It's a bad quality video, but so awesome.
&gt; In my experience, "modern architecture" creates more problems than it actually solves. It can. But it depends on the complexity of the problem being solved, the expected lifetime of the application, and the actualy implementation of the architectural pattern. As I stated in another comment, I've got 34 years of experience and just because you've never seen it doesn't mean that it doesn't happen.
It was pretty cool right? It's a legacy nightmare now but fun at the time :\)
Hello Guys, what do you think of my newest course?
Removed: Rule 7. Also be aware of the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
Learn the concepts of OOP and apply them to project, don't give up no matter how frustrated you get, and invest in a whiteboard. Sometimes the hardest problems you come across are the easiest to solve. Stack Overflow is a great place to look for answers, but the community is, imo, toxic; beware asking questions without making sure someone hasn't asked it already. Good luck, and make sure to step outside frequently!
Github has a great into course... it's not too hard to understand the base concepts. The only thing that's difficult/pesky is merge conflicts. I use [this](https://www.git-tower.com/blog/git-cheat-sheet/) cheat sheet at work whenever I need a reference.
Cheers! Let us know if you encounter any issues.
To be fair, you may not have been able to switch database platforms / providers because of how tightly coupled you were in the first place. If decouple yourself from that specific database, it's maybe a few hours to switch the database you use instead of a huge undertaking. That's really the power in good coding / architecture. [ADO.NET](https://ADO.NET) may be fast, but it's error prone and you don't get compile time warnings which also increase the development costs initially and the long term maintenance costs as other developers have to try to understand it. I'm not saying Entity Framework is the answer, but if performance isn't a huge factor in the application \(like most applications\), Entity is good enough. Personally I'd rather use Dapper \(or a mix of EF and Dapper like this article suggests\) because you get some abstraction without sacrificing on performance as much. [https://exceptionnotfound.net/dapper\-vs\-entity\-framework\-vs\-ado\-net\-performance\-benchmarking/](https://exceptionnotfound.net/dapper-vs-entity-framework-vs-ado-net-performance-benchmarking/)
https://app.quicktype.io?share=kb83x0k3boVzUT3qKrKl I don't really know what I'm asking for but something like that. If you don't know how many parameters you'll get and in what data types, Newtonsoft can just put them in a dynamic dictionary
Learn to unit test properly and well.
&gt; There are performance implications for immutability that do not suit every problem. Especially in GC languages that weren't built for it, like C#. Languages where the compiler enforces immutability can get away with re-using objects behind the scenes. &gt; Instead, you can use the concurrent collections like ConcurrentDictionary to share data efficiently between tasks/threads without requiring locking. But, done incorrectly, merely quiets down the exceptions and stalls by trading them for asynchronous logic errors. if (highPriorityWorkQueue.Count == 0) { // must be safe to start a background job StartLowPriorityWork(); } &gt; Also, BlockingCollection is very useful for multithreaded processing. Quite. If your work can fit into the Producer/Consumer model, then it becomes much easier to parallelize. 
In that case, you simply instantiate the window and call `Show()`? var window = new MyWpfWindow(); window.Show(); Obviously, you need the references for both WinForms and WPF that way.
The project types are only separate as a template / starting point. They aren't mutually incompatible.
Probably will never run into merge conflicts until he works with other devs TBH.
&gt; DataTable dt stuff of nightmares from a 2000s era winforms project i maintain... they would never name a dataTable's actual SQL name, just always `DataTable aDt = someBlah();`
Oh, I see! We do detect dictionaries, but only in cases where the property types are the same: https://blog.quicktype.io/markov/ If you need something like that you'd have to use JSON Schema - make quicktype produce a schema for your JSON, then make the change in the schema and give it to quicktype as an input.
Man I remember the lab years ago when I was struggling with the difference between static and instance methods/props in Java. Wish I had a clear explanation like you just gave here.
No, actually, but I get where you're coming from =) . Thanks for the advice, I'll probably just implement a scoreboard system and some ai then ;)
If your application is so trivial that you can complelty switch out databases in a couple of hours, then there is literally no point in abstracting it out. 
Indeed. I can ignore it in the confines of a *very short* using block. Or in an example with no further context...
Hi. Can you tell me the use case? I’m interested...
In case OP is still reading... There will always be a divide on StoredProcs. I am in the "Almost no sprocs" camp. For the last 10 years, all my teams have had this rule, even before I joined. I have found the occasional single developer that likes spocs, but hardly ever a full team. 99% of our calls have no stored procs. The exception is typically reserved for reporting queries (which are evil personified anyway). Very few teams I talk with use stored procs for general data access. The performance of sprocs is negligible, and the extra security is a myth, but the real issue is having to write business logic is a sproc is HORRIBLE. Nothing...NOTHING prepares you for walking into an office and seeing +5000 line sprocs in the code base. You can argue my logic (or lack of), but I'm too old to care what you have to say about it at this point. I've already heard all the arguments for 20 years now. Just have you have heard all the arguments I would say. Lets just call it a draw. No matter which system you use, either can be easily abused by lazy devs (and will be abused). Also, as a rule, DataTables are only used for reports where you need post execution data processing. DbDataReader is better. Side story: worst code base I've ever encountered: the team was producing HTML from their sprocs. Typical sproc was 30,000 lines long. The database cpu was pegged at 100% utilization 24/7. They were so proud of the fact that their entire web app was one page, but couldn't figure out why their performance was so bad. This is an outlier...I've only seen it once. Finally, multi-line strings exist in C#...as well as almost every other language. But if you go a few steps further than you are thinking, even that can be abstracted away pretty simply.
I find people say they are going to do all this stuff, lay it out in their calendar then come the time to do it they choose not to. Its great you laid it all out but put alot of effort into sticking with it and forcing yourself to keep going even if you are completely frustrated. 
* This new feature will make it much easier to use dependency injection in ASP.NET Web Forms application.* Web Forms is not dead ☺️
[Ask this person if you can borrow their homework, I guess](https://www.reddit.com/r/csharp/comments/8ftw07/help_with_a_sentiment_analysis_program/)
You can. Every modern browser supports it, and it builds an asm.js version for older browsers. That being said Blazor is pre\-alpha, but in my experience quite usable, and I haven't encountered any breaking issues.
Thanks for your reply! Looks like that person and I may be in the same class. I'm still not quite sure how I would implement what they suggested into my code, but it gives me something to research. Thanks!
Good lord. No wonder you're scarred for life. Any idiot writing a 5000-line sproc doesn't just get fired, he gets killed on the spot and the body burned to prevent that level of *stupid* from spreading. The same goes for anyone generating HTML from the database. I'm the architect on my team, and we manage a ~200kLOC codebase with hundreds of sprocs. The longest are some of the old ones that are being deprecated, and they're maybe 200-300 lines at the worst, and most of the sprocs in the system are 50-75 lines. We use this architecture because the database back-end is shared between 24/7 data import/export services, scheduled headless/sessionless CLI apps, a web service for a mobile device app to connect through, a web front-end or three, SSRS, SSIS, and BizTalk. But we don't usually use sprocs for SSRS. We use TVF's, which are a separate and even more fun PITA if you don't grok their limitations. Database CPU load stays around 20% with thousands of mobile clients hitting the web service, hundreds of web users, dozens of incoming bulk data files being imported, and thousands of outgoing data file exports. The BizTalk/import/export server sits at about 10% most of the time. The web server averages &lt;5%, and it's on a VM and the web front-end is DNN (a.k.a. hot garbage that we all wish we could get rid of). We've tried migrating everything to C# code and doing everything in-app. It makes off-hours support *hellish*, and that's compounded by a dev on the team who makes some of the worst C# code, but is a god-damned SQL whisperer. So our architecture is what it is. And I can vouch for the usefulness and maintainability of ADO.Net and sprocs and even TVF's in this situation. Nurse your scars, though. Never shun a tool in your toolbox, even if it draws blood sometimes.
Dependency Injection was a poor choice of naming here IMO. Maybe it's my sysadmin brain but it has a malicious connotation. :)
Hi, There are many ways of doing it, but the simplest ( at least to me ) would be to store for each word its number of occurences with a dictionnary of &lt;string, int&gt; when you detect if its a positive or negative word. So create two dictionnaries, one for each type of word. If the word is already within the dictionnary increment its count, otherwise add the word and set the count to 1.
It's an industry-standard term. https://en.wikipedia.org/wiki/Dependency_injection
Depends on what specific issue you're referring to here.
Here's the full release notes: https://github.com/Microsoft/dotnet/blob/master/releases/net472/dotnet472-changes.md
Yeah I’m not even sure your comment makes sense. 
Judging by it's popularity I think you're right!
Do you have Quick Edit mode enabled so errant mouse clicks might be stopping the application? On another note, it would be a lot simpler to just use Task Scheduler.
I was referring to having to bundle a whole bunch of .net standard dlls as well as the binding redirect mess that made it painful to use .net standard on .net framework IME. It looks like the issue was fixed in 471 though [https://github.com/dotnet/standard/issues/514](https://github.com/dotnet/standard/issues/514)
Thanks. I'm a console noob, other than using it for very simple stuff as a software developer currently. I havent really dealt with STD IN and STD OUT since using C++ years ago in school. Anyways looking into the Task Scheduler option. this package looks nice: https://www.nuget.org/packages/ASquare.WindowsTaskScheduler/
&gt; Quick Edit mode This lead me to this. https://stackoverflow.com/questions/30418886/how-and-why-does-quickedit-mode-in-command-prompt-freeze-applications Thanks! Looks like its expected behavior.
Fuck this in particular: &gt;Supported Windows Versions The .NET Framework 4.7.2 is supported on the following Windows versions: Windows 10 April 2018 Update (included in-box) Windows 10 Fall Creators Update Windows 10 Creators Update Windows 10 Anniversary Update
Not to mention that theese aren't even versions. There's also Home, Pro, and I think Ultimate 
It's deleted, what did it says?
You also forgot "castrated" Windows for tablets (don't remember how it's called now, but it will be called windows S)
Remove line 7?
Will there ever be a non-creator update?
RT? (Rotten Tablet)
That's the one
The next one will be the Boring Beancounters update. It will extend Secure Boot to provide an uncompromised pathway directly from power on to excel. Switching to a different application will require rebooting and enabling the concept of creativity in your uefi settings (after buying the DLC).
Sweet. Time to upgrade from 4.6.2
I really don't know why they didn't just version them all? &gt; 10.1, 10.2, 10.3 and 10.4.
They support Windows Server 2008 and Windows 7 so it's pretty modern stuff. The only people who shouldn't be using this are those deploying desktop apps to Vista and earlier (which is pretty damn ancient). As far as the Windows 10 specific stuff, it just means you have to update your Windows 10 to something in the past 2 years (Anniversary Update came out almost 2 years ago).
Version numbers aren't decimal numbers. They can do 10.10, 10.11, 10.100, 10.65534, etc.
Sorry this is a bit of a tangent but I am not any kind of system guru.... I am trying to build some code that some friends wrote. I get this puzzling error, "Project Target Framework Not Installed". Somehow the problem is the difference between ".NETFramework,Version=v4.6.1" and ".NetFramework 4.6.1" I am guessing that this is some standard screw up but it is a total mystery to me! Any clues appreciated!
&gt; Windows 10 is supposed to be the last, as I understand it. What happens when they hit 10.9? 10.9.1? That would imply a minor version, when it's not. 10.10, 10.11, ... It's a version number, not a decimal.
well I switched the target to .NET 4.5... I didn't see 4.6.1 on the list in the solution properties target panel... now it seems to build, but complains that the .dll is not a proper Win32 applicaition... well, my target is 64 bit... maybe I have inched forward. Hey, it built, anyway! 
As an enterprise customer, I've been waiting 19 years for this.
I guarantee this will be downloadable and installable for all versions of Windows 10, and likely Win7 and 8. They said 4.7 was "Redstone Update" too, but that was only for automatic windows updates.
You don't need a package. He means to just create a scheduled task in Windows to hit the URL on a schedule. For example, drop cURL on the machine and set a task to run it every hour to hit the desired URL.
Did you install the .NET Framework 4.6.1 SDK / Developer Pack. This is different than the 4.6.1 runtime.
Will this release fix System.Net.Http versioning issues?
no shit I know he doesnt mean a package... I was thinking of just using a package to simplify the code or for funs sake... 
yeah thanks. I had to exit &amp; restart VS to get it picked up. Good progress... now I getting a build but some message about MSIL vs AMD64 targets. Whew! Inch by inch!
Thanks Americio, after reading through everyones comments, I think mostly you are pretty correct with this. I do however have some disparate tasks that do need to run in parrallel. I am unsure yet however whether they will need access to the same data. I think time will tell on that.
Thanks Guys, really appeciate the direct answers.....sooooo much to know :| I hope I too can share knowledge when I know what I am doing 
You probably meant ***DEFINITELY*** -not *'definetly'* --------------------------------------- ^^^Beep *^^boop. ^^^I ^^^am ^^a* ^^bot ^^whose ^^^mission ^^is ^^to ^^^correct ^^your ^^^spelling. ^^This ^^^action ^^was ^^^performed ^^automatically. ^^Contact ^^^me ^^^if ^^I ^^^made ^^^A ^^mistake ^^or ^^^just ^^downvote ^^^^^^please ^^^^^don't
&gt; I was contemplating one giant memory singleton That is what I would try -- I assume a .NET in-memory static SynchronizedCollection&lt;&gt; would be much faster than a database. https://msdn.microsoft.com/en-us/library/ms668265.aspx Only one thread writes to it (the 250ms thread accessing the API). Each user trying to access the data probably doesn't need to be a new thread -- just have the code doing the HTTP response read the latest values from the SynchronizedCollection object. There are other concurrent data structures in .NET, but they are unordered https://stackoverflow.com/questions/6601611/no-concurrentlistt-in-net-4-0 
Hiya Beeb, thank you, I am a little overwhelmed at the moment with it all :\) I will heed your advice. Well at least keep it in foremost of mind. You are queit more than likely right that I do not need to get into the nitty gritty of thread tinkering. I pretty sure of that after reading through everything.... Appreciate your experience and knowledge.
Not always possible, especially if you are dealing with customers that are government or medical organizations. The IT upgrade cycle is glacial over there. The software I'm working still needs to fully support Win7 machines (thank god no more XP, but even that wasn't that long ago).
1607 -&gt; 2016 July 1703 -&gt; 2017 March 1709 -&gt; 2017 September 1803 -&gt; 2018 March
...mind blown
It depends. If the collection internally tracks its count, that will be (very slightly) faster. If not, Any() will be: it only needs to fetch any single item.
Hi! I am working on an experimental cross-platform chat (Telegram client) for Desktop: [screenshot](https://raw.githubusercontent.com/x2bool/egram.tel/master/screenshot.png) I am using .NET Core and Avalonia: https://github.com/x2bool/egram.tel
I’m building a simple CMS with a focus on writing html, css &amp; js files, like the good ol’ days. Using ASP.NET Core. https://www.github.com/datasilk/saber
I've been adding more features to [Create &amp; Fake](https://github.com/CreateAndFake/CreateAndFake), a packaged alternative for AutoFixture/NBuilder/Moq/FakeItEasy, with duplication and equality validation built in as well. I've recently added a tool to automatically test scenarios, for example, that a class prevents null reference exceptions on all of its methods, and upcoming, automatically testing that a class doesn't mutate any given parameters.
Ive had some issues with that assembly. What's the problem with it?
Ah, finally SHA256 support in ClickOnce. Only a year or so after we couldn't get a SHA1 cert anymore...
You can see the full release notes here https://github.com/Microsoft/dotnet/blob/master/releases/net472/dotnet472-changes.md and it does claim that they fixed an issue with the assembly version. This was the issue I had with System.Net.Http anyways. There's netstandard2 packages which target System.Net.Http 4.2.0 while the full framework only had 4.0.0. I added an assembly binding hack to make all references use the 4.0.0 version and it did work. Though I'll be happy if Im able to remove this :)
You can see the full release notes here https://github.com/Microsoft/dotnet/blob/master/releases/net472/dotnet472-changes.md and it does claim that they fixed an issue with the assembly version. This was the issue I had with System.Net.Http anyways. There's netstandard2 packages which target System.Net.Http 4.2.0 while the full framework only had 4.0.0. I added an assembly binding hack to make all references use the 4.0.0 version and it did work. Though I'll be happy if Im able to remove this :)
I just get 2018 april updated on my Enterprise machine. :-)
Thanks for your advice. About why I am writing my own settings class, I asked about how to handle settings in a previous post in this forum [link](https://www.reddit.com/r/csharp/comments/6p8nn1/saving_settings_to_file_questing_about_saving/) And based on that I wrote the settings class that I now use. And now I have used this method in the different apps that I have been writing ever since, but just always thought that there was something wrong about copying the code to all my apps, and when I changed something in the class in one solution, I have to remember to correct it in all my other code. So that is why I am now trying to turn this into a library that I can use in my apps instead, and then just having to write the code that differs from app to app, with is mostly the different configuration keys I need in an app. But my problem is that I do not really know how to make this work.
Hi, I've been creating a dotnet standard library for data preprocessing and regression. https://github.com/XACT-RobA/EasyRegression.NET
But it's kept in a vegetative state.
Async constructors do not make sense to me. A constructor is supposes to give you an object and async one would give you a task of this object which in my opinion means this is not a constructor anymore. You can of course make a constructor that is not really a constructor but I'd rather see code make this explicit with factory and unit methods. I am not sure what you mean by async events. Can you elaborate?
You should change the startup project in solution
So it is failing to parse a number from a string. The only thing I can think to do is insert a new entry that has the same data and see if there are any differences in the json. Maybe start with an empty database.
I'm making my own build server using: * ASP.NET Core MVC * .NET Core 2 * C# scripting (run-time interpretation) * WebAssembly + Blazor So far it can: * Checkout its own repository * Interpret the build steps from the C# script file * Execute the steps: * * Compile itself * * Run all tests * Display the build steps and results in a web page through WebAssembly+Blazor * Update the displayed build steps and results by continuously polling the REST service (without JavaScript!*) ^*Though I haven't written any JavaScript, Blazor does use JavaScript, because WebAssembly can't manipulate the DOM directly yet. But this will probably change in the future.
&gt;SynchronizedCollection Half way through researching, I was thinking ConcurrentDictionary might be the most efficient well at least that's what these guy think at: [https://stackoverflow.com/questions/40362975/which\-collection\-class\-to\-use\-for\-a\-rolling\-period\-timeseries\-of\-data](https://stackoverflow.com/questions/40362975/which-collection-class-to-use-for-a-rolling-period-timeseries-of-data), but I guess I can trying a few out. More to think about :\) It's nice to hear that the static/singleton in memory thing might be viable.. Looks like I will give it a try and see what happens. Thank you once again, really really appeciate your thoughts.
I'm having to use it for a couple of projects at work, so I can testify to this. 
There are ways to view delete comments from third-party services that cached them: https://www.removeddit.com/r/csharp/comments/8g335r/announcing_the_net_framework_472/
Aren't those Editions? 
Oh shoot, you are totally right. However, different editions have different functionality such that I would call them versions, despite being nonlinear in release pattern. But that does boil down to opinion or perspective.
I'm programming a twitch bot client
I recommend you to check out pluralsight - when you register with windows for Visual Studio you get free 3 month subscription which is more than enough for an experienced programmer su h as yourself to check all the features out :) They have everything labeled from begginer - intermediate - advanced so you can pick anything you want (like skipping basics) Have fun :) 
Agreed, I avoid all ORM's like the plague. Writing SQL is not a dirty thing. Learning and writing SQL yourself pays off. Some of the regularly reoccurring CRUD stuff can be tedious to write, but you can use code generation to do the majority of the typing for you. I invested some days/weeks of my time in writing SQL generation stored procedures that can generate SQL and C# ADO.NET code for me, and they have served me well for years now.
Why didn't you use [Cake](https://cakebuild.net/) for the C# scripting of build steps?
There are implementations that can be found easily of a LazyAsync class. I took one and combined it with a ConcurrentDictionary and some basic TimeSpan tracking to make an efficient and simple in-memory cache.
I could understand why you would want them, but almost every thing that they would make useful is considered a bad practice. Doing a lot of work inside of your constructor makes your classes difficult to unit test and makes deserialization difficult. Could you maybe tell us more about what it is that it would make easier for you? I know you didn't want a pattern, but if you have complex object instantiation and interactions then there is probably a way to manage that complexity using a DI/IoC approach.
Try resetting the windows layout back to default: https://blogs.msdn.microsoft.com/zainnab/2011/01/04/reset-window-layout/ If that doesn't work, try running in safe mode (all plugins disabled): https://stackoverflow.com/questions/4182471/how-to-run-visual-studio-without-plugin-and-all-third-party-feature If that doesn't work, try uninstalling/reinstalling Visual Studio.
&gt;A constructor is supposes to give you an object and async one would give you a task of this object I mean, you could apply this reasoning to any other async method as well. *"A `ReadLine` method is supposed to give you the next line, but this async method only gives you a task"* I don't see why constructors should necessarily different than any other methods in this regard, it's not like they're some sacrament from the OOP bible.
Thanks !😅😅
&gt;More interesting is "events"... Do you refer to the event handlers? If so, they already support it. Otherwise, be more specific! You can write `async void` event handlers, but it gets difficult when the event caller wants to await the result of the event handler. You can declare your events as `Func&lt;EventArgs, Task&gt;` or something, but that breaks multicasting unless you write some rather hacky and inefficient event raising code. &gt;The constructor is nothing more than a static method whose return type is the class. *Technically speaking*, constructors are void instance methods.
You can create a factory method that is async.
I wrote a Windows utility to quickly search files for text strings called [Grepy](https://github.com/botman99/Grepy2). It's modeled after the very old [WinGrep](http://www.wingrep.com/) utility. It's the first major C# app I've written.
&gt; Doing a lot of work inside of your constructor makes your classes difficult to unit test I think it is more correct to say "doing the wrong work inside a constructor is bad practice". Remember that a constructor is there to construct. Creating another method called something like "Initialize" just moves your problem to that method. &gt; and makes deserialization difficult. I've never run into this issue. &gt; but if you have complex object instantiation and interactions then there is probably a way to manage that complexity using a DI/IoC approach. Sorry but I dont see the connection. I want to construct my class asynchronously. If the constructor is called by my DI container, a factory method, or something else it makes no difference to the code that lives in that constructor. 
A small problem with the LTSB is that you can't install Visual Studio on the LTSB release and that you can legally buy it only if you are an organization.
&gt; I mean, you could apply this reasoning to any other async method as well. Right!
A convenient exercise might be to have him play around with a stylesheet. Give him the MDN reference for CSS, the Blazor app and let him fiddle around. A lot of people like that kind of stuff because it will give you immediate results. If he does have some coding experience, maybe let him think of and implement a component to use in the page, deciding everything from functionality to code to styling? Especially for someone their age, I would focus on keeping the enthousiasm alive by letting them be creative.
Yeah that's what I was thinking. Once the app is set up you can pretty much do anything you want with it and adding simple functionality like printing a name when you enter it into a text box and click a button should be fairly easy but also quite exciting? The stylesheets is a good suggestion too. 
i cant run away form it no matter how hard i try... 
Your project is probably set to "Any CPU" and you've referenced an assembly built for 64-bit (x64, amd64)
Constructors are by definition different from any other method. They also provide some guarantees than I think are used by the runtime like the fact that you don't get a pointer to an object unless it's constructor completed successfully.
from https://github.com/Microsoft/dotnet/blob/master/releases/net472/dotnet472-changes.md: * Fixed security vulnerability tracked by Microsoft Common Vulnerabilities and Exposures CVE-2018-0764. [455812, 507252, system.xml.dll, Bug] reviewing the corefx change for that: https://github.com/dotnet/corefx/commit/3f1155b I guess it is possible for an xml element to have specific attributes that reduce or eliminate the randomization for the hashcodes on attribute names and eventually allow duplicates (thus triggering worst case behavior on lookups in the collection leading to a DoS attack). Interesting that reference source for 4.7.1 has the [same implementation](https://referencesource.microsoft.com/#System.Xml/System/Xml/Core/SecureStringHasher.cs,58) in a different place and then in the method below relies on an unmanaged implementation of something called `InternalMarvin32HashString` on `string` (defined there as an extern function) which I am assuming corresponds to roughly the same code as the managed `MarvinHash` implementation in the commit. Does anyone have any more info about this `MarvinHash` algorithm? 
&gt; Remember that a constructor is there to construct. Creating another method called something like "Initialize" just moves your problem to that method. It does move it to that method, but that is the recommended approach: *Constructors should not do much work other than capture the constructor parameters. The cost of any other processing should be delayed until required.* -[Microsoft's Framework Design Guidelines - Constructor Design](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/constructor) &gt; I've never run into this issue. Fair enough. &gt; I want to construct my class asynchronously. Why though? You are saying it would make life easier, but I haven't seen a use case that doesn't violate best practices other than for a mere convenience. 
https://imgur.com/DQR6Ca0 thanks!! i fixed it!!!! it was not selected by default lel
I've also made the constructor private/internal and had a static async method that acts as my constructor.
In an interface that is just a property declaration. This means any class that implements that interface must have that property. When you see that property declaration on a class, the compiler is smart enough to know you need the private variable and creates it automatically. This does not happen with interfaces. Remember you cannot instantiate an instance of an interface, only classes that implement them. Therefore there is no private variable associated with that interface declaration.
Ahh, that makes sense. So it’s only creating the “get” and “set” method stubs in the interface, but it’s not getting the associated private variable. I like that the compiler does a lot of things for us, but sometimes the magic makes concepts like this a bit confusing. Thanks!
Static methods and instance methods are different by definition as well, yet both can be async. The question is why constructors *must* be different in *this* specific aspect. I don't think the runtime particularly cares about the state of your objects beyond correct memory allocation. You can already violate constructor assumptions, e.g. by passing the `this` reference out of the constructor itself and obscure stuff like `FormatterServices.GetUninitializedObject`. An async constructor would behave the same when observed from the outside, you'd only get a reference to the constructed object once the task completes successfully.
thanks, I'll be poking around looking at those settings!
Exactly this! I really hope this has been fixed. 
&gt; Why though? You are saying it would make life easier, but I haven't seen a use case that doesn't violate best practices other than for a mere convenience. wllmsaccnt, how do you construct this class? MyClass is not constructed until CurrentClient is set. clientService exposes an async method called GetClient that returns a Client object. Passing a Client object in the constructor is not possible since other parameters not shown here are not known until run time. public MyClass { public Client CurrentClient { get; private set; } private IClientService clientService; public MyClass(IClientService clientService) { this.clientService = clientService; } }
Yup. The backing field is an implementation detail of the _class_ implementing the interface. For example: class MyClassWithBackingField : IMyInterface { public int MyNum { get; set; } } This class has a backing field because it chose to use an auto-property. Meanwhile this below class: class MyClassNoBackingField : IMyInterface { public int MyNum { get { return 9001; } set { //do nothing! } } } Has no backing field generated by the compiler because the get/set methods are custom implemented. Also, be aware that it's not really making any "get/set" "stubs". You can think of the interface as something ethereal; it doesn't really exist per se. It just defines a "contract" that any classes that want to inherit from that interface must declare methods that match that contract.
It might help to think in a way that in interfaces you don't have method and property bodies. So lets say we have a method in a class `public void Test(int i) {return i;}` then in the interface that would be `void Test(int i);`. See how the body has disappeared? The same needs to be done for properties. e.g. `int Count {get {return _count;} set {_count = value}}` turns into `int Count { get;set; }`. So even though it looks the same as an auto-property, it is not. It just looks the same.
[Roslynator](https://github.com/JosefPihrt/Roslynator) is good too.
Entity Framework?
Look into topshelf free lib to convert your console app to run as a windows service with a line or two of code 
Assuming that the primary use of the client is for processing inside of MyClass methods, then I'd change CurrentClient into an async method called GetCurrentClient, and have it lazy instantiate the client using the service when needed. If you are passing around instances of MyClass to share the CurrentClient reference, and its more of a context than a processing class of its own, then there might be a better approach but it would depend on the type of project being created and the lifecycle of that context.
&gt;ORM lite
but why?
First of all, I wanted to learn how C# scripting worked. The point of this project for me was to learn new technologies and techniques. Secondly, I haven't really implemented an in depth system for my steps yet, just the bare minimum to get thing to work. I actually only have two steps: "Step" which takes the name of the step and an arbitrary function, and "StartProcess" which - as you might have guessed - starts a windows process. This is what my script file ``pipeline.csx`` file looks like right now: StartProcess("dotnet", "build -c Release"); StartProcess("dotnet", "test Conduit.Tests -c Release"); Like I said: bare minimum. I do like your idea of using build scripting tools such as Cake for implementing the steps, because that would give one the ability to use a single script file for building locally and on the build server.
No more sending logs directly to email, please. Use Splunk or some other log aggregator, and then set up alerts in that.
 instead of foreach (string i in words) if (negLib.Contains(i)) nv++; foreach (string i in words) if (posLib.Contains(i)) pv++; You can create a struct wordInfo{ int count; int sentiment; //-1=bad, 0=unknown, 1=good } Dictionary&lt;String,wordInfo&gt; wordList=new Dictionary(String,WordInfo, StringComparer.currentcultureignorecase); foreach(String i in words) { if (wordList.ContainsKey(i)) wordList[i].count+=1; else { wordList.Add(i,new wordInfo(1, goodLib.Contains(i)?1:badLib.Contains(i)?-1:0) } } int mostBad; int mostGood; int goodCount=0; String mostBadWord; String mostgOODwORD; int badCount=0; foreach(var kvp in wordList) { if (kvp.value.sentiment&gt;0) { if (kvp.value.count&gt;mostGood) { mostGood=kvp.value.count; mostGoodWord=kvp.key; goodCount+=kvp.Value; } } if(kvp.Value.sentiment&lt;0){ if (kvp.value.count&gt;mostBad) { mostGood=kvp.value.count; mostGoodWord=kvp.key; badCount+=kvp.Value; } } } Console.Writeline($"Most used bad word: {mostBadWord} ({mostBad} uses)"); Console.Writeline($"Most used bad word: {mostGoodWord} ({mostGood} uses)"); } 
Whilst I agree as a best practise, there are some circumstances where 3rd party dependencies aren't desirable or available.
&gt; Assuming that the primary use of the client is for processing inside of MyClass methods, Sorry that is not a fair assumption. It is a public property. &gt; its more of a context than a processing class of its own, In this simple example - yes. In a real world app - more likely no. In either case it only diverts from the question at hand. &gt; it would depend on the type of project being created and the lifecycle of that context. I don't see how that makes any difference at all. We are just trying to construct a class with a property that is created asynchronously.
Other humans trying to talk to me.
There is nothing wrong with my code. I don’t need your anal yzer
People not knowing the difference between programmer and software engineer 
No specs
No, and by definition of what they are used for it would be pointless to have this feature exist. An interface is just an object that has certain properties/methods you can use externally. If they are private you can't use them externally so there is no point to having them as part of the interface.
Yes, technically it is doable I just prefer to keep the constructor definition simple.
Skeet's book is sublime. He makes it effortless. Albahari is more detailed. They're the only two books I regularly upgrade and reread. There are others but probably a level above where you're looking right now \(no disrespect intended\). Also look at Microsoft Virtual Academy, sign up for Microsoft Developer essentials for a bunch of helpful things including MVA \(Microsoft Virtual Academy\). Don't spend too long on tutorials, write some code, see what problems arise and go from there. 
Software engineers have spanners right?
Correct, nothing is impossible, but asking for the possible in an impossible time frame is tedious. That said, one of the things a good manager does is understand that and push the developers and encourage them. This is not the same as just pushing the developers.
Entity Framework using the code-first approach. If you decide that you want to design your DB with SQL code instead of C# for finer control over your RDB **and** you are targeting SQL Server 2012 or higher, download Mike's latest SQL Server Data Tools (SSDT) and create a Data-Tier application project (.sqlproj) in VS (search for SQL in the project creation screen). You'd then use Entity Framework database-first approach for ORM. However, the former answers your question and would be preferable in most environments.
The main design problem is that you shouldn’t be doing this kind of heavy lifting in the constructor. In the example you provided in a comment, change the property to a method returning `Task&lt;Client&gt;`. The main technical problem is that ‘newing’ up an object basically consists of allocating memory, and then calling the constructors with the `this` reference pointing to the newly allocated memory. For an async constructor, a totally new code path in the CLR would need to be written, and the CLR itself would now need to have intimate knowledge of tasks and awaiters (because of constructor chaining), which is not really something you want. 
this. I‘m my teams engineer and I am encouraged to delegate smaller architecural-tasks to other developers, so they get a chance to learn about software-engineering, I present them the task and tell them how much time they have to come up with a plan. When the designated time has passed my manager asks me how the planning on the feature / refactoring is coming along, I ask the dev and they say „well I‘m pretty sure thats impossible“, that means I have to work overtime to present a solution to the manager, the dev is mad at me because „why would you make me work on it when you had a solution all along“ and the manager is mad at me because apparently they think I suck at managing developers.
&gt; We are just trying to construct a class with a property that is created asynchronously. I don't see that as a noble goal in of itself. You want to fight against C# paradigm best practices because you prefer a property accessor instead of a method call. You can do what you want another way, to me it just seems you don't like the semantics and how it looks. Pragmatically, if the best practice is to not do heavy work inside of the constructor and you are working on a team, then it is likely that most objects are not fully initialized at the time their references are provided to each other as dependencies. If you do heavy work inside of your class using your dependencies (e.g. calling the IClientService asynchronously) then even if it works today, it may fail tomorrow when they have to add a lazily instantiated dependency into ClientService that isn't available at its time of construction. If you would like to change the perception of the best practice and the mind's of all of the developers that learned it the traditional way...I don't think a Reddit comment thread is the way to do it. I am only saying what you are asking causes problems because I saw it happen on several projects over the last 12 years. I started with DI with the exact same opinion you are showing now though.
Programmers with bad attitudes who can't figure out how to work well with other people, and help them be better instead of complaining about them all the time. 
Ok what is the difference. 
Now all you have to do is wait five years until a reasonable amount of people have 4.7.2. If you first ask them to install it, that kind of defeats the purpose of ClickOnce `¯\_(ツ)_/¯`
A good explanation here http://www.huristic.co/blog/2016/11/6/software-engineer-vs-programmer
Specs are a bit of a hangover from many years ago, but they persist because the relationship between developers and sponsors hasn't always progressed much. A crucial skill is assessing the spec \(looks at baboon palm print made with its own shit\) and teasing out the details. Where there's no spec the teasing is a little more intense, but it's the same skill set. Essentially don't be apologetic for asking questions. Don't be apologetic for taking up sponsor, or their user's time. Guessing is bad. Do document things in simple terms. I like flow charts because anyone can read them. Borrow from DDD/BDD and define unanimously understood terms \(ubiquitous dictionary\) UML, not so much. Do prototype and do so rapidly AND get user feedback. Automate tests, despise mocks and use them sparingly, only where necessary, Assert expected outcomes at the business level, behaviours not units. Love cats.
I arrogantly think that is a bunch of word smithing nonsense. discuss. 
["Just."](http://alistapart.com/blog/post/the-most-dangerous-word-in-software-development) Bosses and clients like to use it. Even so, I have to watch it myself. Sometimes it sneaks into what I say to some of the other developers at work. Tasks or code that I consider trivial or easy are not necessarily the same for other developers. -------- To bring it back to C#, I find it annoying when I want to attach a lambda or event handler to a delegate, but I want to throw away the args (which I do _a lot_). For example: myButton.Click += (sender, args) =&gt; DoSomething(); Right now I'm using underscores (though now I guess I can start using "discards"): myButton.Click += (_, __) =&gt; DoSomething(); But I wish I could just toss on a parameterless handler: myButton.Click += () =&gt; DoSomething(); Or directly assign the handler if it's parameterless: myButton.Click += DoSomething; I get that there's possibility for ambiguity in some cases, and in those cases, have the compiler squeek and force me to fall back to explicit handling. But when there is no ambiguity, just have it auto-discard parameters when assigning parameterless delegates.
You declare the property with just a getter in an interface and have a private setter: private sObject = new MyObject(); public MyObject SomeObject { get =&gt; sObject; private set=&gt; sObject = value; } Other than that? No, not really.
No and optionally. ctors. No. Horrible horrible idea. There's nothing in our current bag of tricks that says making ctors run asynchronous would be even slightly useful. In 99 out of 100 cases it would be painful. Events: It would be nice to see a proper multicast async implementation, but changing the default implementation would screw any code that relies on eventargs properties being set on failure. We already iterate the InvocationList and can trigger those asynchronously so I'm really looking for something that reduces that boilerplate. Screw with any existing code and I'll come at you.
Clients who don't understand the meanings of the words they are using at all, but who insist on being told they are right and that they will be obeyed. It's basically: I need six marginal trans-crufts but I need the six to be German, and don't clumwid the *client interrupts himself with seventeen minutes of snoring* on pluuuuhhhhhhhhhh and you must make sense of that after you do it, not before, or else chaos is a raindrop instead of money for you And that's the native English speakers with ivy league degrees, it gets worse
Programmers are told to do impossible things all the time. It's in the details: basically it's, "do this without the means to do it, o foul magician"
 If you knew how to solve it, and you can tell that person probably couldn't, why didn't you at least give them a suggestion, and not wait until the last day to ask about their progress? If it's a needed architectural change, why were you not being kept up to date on it? Sorry, that does sound like it's on you.
Darn, I just tried it, same outcome unfortunately. 
Most people work in a customer resource oriented world, specs should be coming from them, not the "sponsor" (never heard them called that before). Specs are requirements of what they want. There should always be a spec.
https://www.youtube.com/watch?v=BKorP55Aqvg
Often I find things I'm asked for are impossible- because it has conflicting requirements. Typically this is because there are multiple groups of users. Group1 wants it fast, group 2 wants it complete. Well, cant you make it fast for group1 and allow group2 to get all the data? Like via options or preferences or something? Sure, but group 3 wants it simple and all these options are confusing them. Can't we make it just know which is which? I could make something for you to enter in which user is what, or give them a one-time preferences selection? No, that won't work bc group 1 needs all the data. Wait, I thought they didnt? Right, except when they do. Can I make 2 separate programs? No, bc we need a single program that does it all. I need 7 red lines, all strictly perpendicular, some with green ink, some with transparent
Well no, that would be a fallacy of logic because you have not established that you are either a software engineer or a programmer first. Your statement can be rewritten as: someone is a programmer (A), Programmers are arrogant (B) and programmers think all that stuff is nonsense (C). So we have A—&gt;B AND C. From this you can not infer C—&gt;A. So no you are not necessarily a programmer.
&gt; I need 7 red lines, all strictly perpendicular, some with green ink, some with transparent 
 Ah, got it. Sounded like a big architecture change that took a while and then freaked out at end when it wasn't done haha.
Oh no, I just worded my comment poorly, I was so fired up lol
That looks useful. Thanks!
I was speaking in more general terms, but yes. 
1) Management who know nothing about software development. 2) Other people deciding for you how long will it take to build something. 3) Non-programmers deciding on technologies I should use. 4) Managment telling me "we need to start doing this object oriented thing... does C#/VB.net support that easily?" 5) Managment that thinks coding is a straitforward process and if you were coding for 8 hours then you were typing for eight hours and every single code change is directly billable to a specific customer and even though you work late and weekends for crunchtime don't think that means you don't have to fill out 8hrs of Busywork during non-crunch time. 6) "It's too complicated to set up a whole parallel test environment, just test in prod and make sure you don't write any bugs" 7) People not understanding that an issue that only occurs for 1 out of 100 cases still 5000 times a day if you run it 500000 times in a day. 8) People not understanding that the application that gets the timeout exception may or many not be the application that is causing the database to slow. 9) Not understanding the difference between a logical error and a data error. 
Switch to sqlite then haha nah sorry I can't be more help have never really used document databases. If it's doing it with new data then surely that's a bug in the database system.
Is it possible to store your number as a number instead of a string?
Also https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Marvin.cs https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Marvin.cs Presumably there is a paper or textbook algorithm description somewhere, I was wondering if anyone knows more about it. For example is it important enough to be listed on wikipedia: https://en.wikipedia.org/wiki/List_of_hash_functions
&gt; As a software manager, a programmer saying something is impossible. Depends what the request is. I've had plenty of times when the BA's design a spec for something that just can't happen in the system.
&gt;"Just." &gt;My bosses and clients like to use it. I ~~just~~ recently read an article on using "Just...", but not related to development, it was in reference to the way a belayer and climber communicate while rock climbing. "Just stand up!" "Just pull harder!", etc. I've been struggling ever since to knock that out of my vocabulary. It makes me uncomfortable to think about how it looks, me, a 6'4" telling a 5'3" climber to "Just stand up!"
I’ll never understand all these clever people who don’t understand the difference between ‘logically impossible’ and ‘impractical’ or even ‘practically impossible’. Asking you to do an unfair amount of work in a certain amount of time isn’t the same as asking you to divid by zero.
if (Console.KeyAvailable) { var input=Console.ReadLine(); }
Don't take life so seriously. 
It's easy if we re-write half the system
All depends on what your asking the developer to do. It sounds that you either manage some extremely pessimistic developers or your team advising you that this is not the correct path to take. If it's the latter, then stop your whining and listen to your staff who are most likely correct and intimately save the business time and resources.
I don't see why the CLR would have to be involved. The compiler can generate all the necessary helper methods and other machinery, from the perspective of the CLR it's all just a bunch of normal methods. 
1 to 5 for me Add 7. People accusing me of being condascending. Add 8. People that automatically shut me off when I'm trying to explain something to them because "programmers can't explain shit". We can, if you'd shut up and listen!
It's easy, just stop saying "just".
I am also working with a dude who only stopped using array lists after Trump was elected president.
Yeah, might be. They actually asked me to send over what I can so they can test it on their end. Hopefully that should do the trick.
For one, because newing up an object is done through the `newobj` instruction. There would probably need to be a new instruction, but at the very least the CLR needs to understand when a constructor is async, so that it returns the right kind of object. For another, as I mentioned the way newing up works is allocating some memory, and then running the constructors 'on' that piece of memory, and afterwards returning the reference to that piece of memory. With async constructors, a piece of memory needs to be allocated, and then the top-most constructor needs to be called, which would return a `Task`. The CLR would then need to await that task, and return a `Task&lt;T&gt;` with the reference to the piece of memory. The CLR definitely needs to be involved.
Working for a marketing department. They are the worst for deciding they need something they haven’t fully thought out that is complex done by tomorrow or the world will end. Other programmers who throw around too much jargon. There is a tendency among some to think they demonstrate their superiority by using the latest abbreviations or always mentioning the latest coding fad. Supporting old systems. I don’t have to be on the cutting edge. I just don’t enjoy support very much. It is boring. The use of ‘so’. I notice this with interviews and podcasts I listen to. I can’t stand it. A person will be asked a question and start the answer, ‘so....’. If you haven’t noticed it now you will and you’ll hate it too. 
Obviously I'm not suggesting the email is your main form of error logging, in some cases it's just nice to have an email alert of a. production bug before too many users get to it. Clearly you have bigger issues though if your application is pumping out 20k errors.
Just add a new page to the website. Just containerize it and push it up to AWS. Just use the REST API. Just find an open source workflow product and integrate it into the app. Just set up a CICD pipeline. "Just make me a graph." (A GRAPH OF WHAT???!!!)
[Nothing is impossible](https://youtu.be/B7MIJP90biM)
I agree. As developers we almost always understand when the programme manager has had a stroke, long before the ambulance gets here. It's actually quite beautiful. Developers actually work better under a bit of pressure, and often underestimate what they can achieve. The business doesn't always understand what's possible or the resources required to make it work, so cautious developers mitigate some of the hubris. The magic happens when you introduce communication. That sounds a bit wanky, but honestly I'd love to see a \*relationship councillor employed in companies where projects are missing targets. The best companies I've worked for absolutely embrace communication. There's a bit of push on both sides, but it's towards a common goal. Also LEAN. \*Of course, no one would use the councillor because, well that's another problem. It's literally problems all the way down :\) 
Stay clear of StackOverflow!
Lol, I've just seen [aldovelco](https://www.reddit.com/user/aldovelco) post below :\)
Why not ? 
I have not laughed so hard in a long time :\) Absolute genius :\)
Just that easy, huh?
Requirements creep
Ah cool. Best of luck with it bro.
Never let them choose two because you can express one as a derivative of the others therefore cheating the system if you're not alert to it. I'm *half* joking :\)
It's not like that's what I put int he contract :). It's more to make them aware that if the want something done right and fast, it's going to cost alot. If they want it done right a cheap, it's going to take a while. If they want something cheap and fast, it's going to be shit. 
As a senior software engineer my daily task involves code reviews. Unfortunately I also code less and less which means some times my code breaks some features. :( Just because I'm not in the flow. And also because I have the confidents to rewrite code that others avoid.
People who “re-invent” or re-code thing poorly for which I made a program that does the same thing automatically (explaining why they never heard about the old code). They them go to management and brag about what they made, and are invited to hold presentations about it etc..until someone asks didn’t wonkynerddude create this 5years ago?
Having to explain to clients the bug they are reporting is in fact their approved business requirement 
I leverage that in an interesting way. I begin to write out my question, and try to provide as much detail and clarity as possible so that I will not get yelled at for having a stupid question. In the process of preparing a question immune to critique, I solve the problem myself and never post the question.
Hehe, I was messing with you a bit :\) Quality only scales linearly in specific situations, the other two never follow a linear scale :\) But you are so right :\)
I think that’s an agile term 
Do you work agile? Because you can’t have it both ways. 
Have a client that got much bigger after several acquisitions. They have lots of data that is not consistently organized. We only do the website. While trying to deal with a larger issue, the client contact got "all technical" about wanting to remove unused stuff from the xyz-data tables in database. Its not great, but its the one thing in the system that every business unit uses. I told my boss there wasn't much point to removing it, but he is good with clients and insisted on having plan. So now its planned, when they finish (remind me 6 months) their new single-source-of-truth for xyz-data , we will remove all the unused columns.
I wish I was around to of seen it 😥
delegate { DoSomething(); } works, but isn't very pretty.
What do you do to decrease your need for mocks?
&gt; You are suggesting I change all my properties to methods and in the same breath you tell me I am the one fighting the system? Well, no. You asked how I would change that one class. There are other approaches to handling asynchronous construction, but most of them require using other patterns like factory or async lazy loading. &gt; The async paradigm is "async all the way down". That includes constructors and event handling...proper construction of an object can and should happen asynchronously I don't disagree with your frustration about the dissonance of those two concepts when doing WPF. I have been away from WPF for about 5 years, so I don't recall the prescribed practices for dealing with asynchronously provided properties that are bound in the UI, but I'm sure its something annoying. Good luck with that.
"Hey, you got a second to answer this inane and completely unimportant question that has absolutely nothing to do with the project you're working on and could have not only been taken care of via an email but could have easily waited on your reply to said email but either way I'm going to pull you out of your train of thought just long enough to kill your productivity for far longer than I could ever realize?"
My poor work ethic.
The business not really knowing or thinking through what they want for we end up building it 4-6 times And, people outside the team telling us how to build it
You're on the right track! The input from a ui will be a string. You then convert to an int using something like int.TryParse. It's used in your program as an integer. Then if you need to display it again you can do .ToString(). The internal representation doesn't change when using to string, it creates a copy of the value of type string. When values are in memory there is always a type associated with them. 
Do you see my headphones on? That means I'm focusing on something and don't want to be interrupted.
Yup, I forgot to mention that in my post. It just makes it all the more infuriating because a mechanism _like_ this already exists.
I only consider this a problem when I'm getting paid on salary. If they're paying me by the hour they can change it as many times as they like (provided the deadline is adjusted accordingly, mind you). 
How do you do, _without a mock_, an integration test of a use case that involves, say, * printing a report * exporting to an accounting system * sending a notification e-mail to a customer? 
Well to be honest, I have to lay out at least a PLAN, or how else do i know what to learn? Im not marking time in my calender and going anal about it dude. Im getting a basic idea of what the hell to look at. lol
To tighten that reply up a bit. Closer communication between business and developers. Shorter cycles with less features in each. Adopt LEAN. Test only what is asserted as a use case, but be smart and discuss the issues that aren't asserted by the business and discuss it with them. These are the protective use cases we techy people know about. Try to wrap them up in the consuming framework so they're an upfront one off cost.
Thanks, this was very helpful. Much appreciate. The other learning curve issue I'm having is trying to ensure my code is in the right areas of my solution - and whenever I try to make changes I end up busting the whole thing up and Form1.Designer.cs throws a shitfit. moving from strictly console code to GUI implementations is so much harder. 
Load of bull shit from an over engineering asshat. I guess I'm a programmer.
Agreed. I really don't understand how people function like that. All ego and want to feel superior I suppose. 
Oh hey, I once worked in an IT-startup with two non-IT founders. Checked your boxes 1 to 3, I quit before we came to 4. --- Aside from work, since it's also a hobby for me: I really dislike installing / configuring new software which requires to create files in certain places and insert certain lines in them. This is common routine for many frameworks, but for a beginner, if you don't know yet what all those stuff is for, it feels like you could do many things wrong without noticing and probably do. These kind of actions should be done by a tool. I especially dislike to have to hardcode the version of a certain dependency which I need to use. This feels so wrong. Recent experience in getting started with Akka / Scala.
Here is a trivial example: https://stackoverflow.com/questions/13125105/why-so-much-difference-in-performance-between-thread-and-task If you have some thing you need to do, where having *many* logical threads is the best approach, using Tasks will greatly outperform using OS threads, because there is less memory overhead with a single Task, and less CPU cost associated with switching between Tasks. If you only have a *few* logical threads, then using Threads directly may perform a bit better. The only way to know for sure is to test with your workloads on your target hardware and operating systems. 
- "This won't take much work to add" - from anyone who isn't a developer - Devs that think they know everything, that are quick to point out anything they deem "stupid" in the code, never offer real solutions, have no desire to learn the existing code base and ALWAYS just write green field code to reinvent the wheel and do things that the code already does (looking at you dude in the cubicle next to me, we get it - they outsourced this shit for two years and now have to deal with that. Every other fucking developer on the team figured out how to work with it, what the hell is your problem) 
I actually just ordered C# The players guide third edition! Looks to be OK 
The inability of co-workers to communicate effectively. If I had a dollar for every time I sent an email asking more than one question and received an answer to only the first one...
I am going to agree with others here about using ELK/Splunk/etc. Errors to email is certainly better than nothing but this discussion is about far more than just errors. What about other log levels? What about spotting trends with errors etc? 
I may, embarissingly have to Google what unit testing is!
nice! If they have a course of their own i will certainly check that out
&gt; Almost nothing is impossible. Until you start trying to make it work yourself. By doing the practice, you're forced to refine the vision which was complete and convincing in your mind into details and actual lines of code. Sometimes along the road you realize that your convincing vision does actually have contradicting parts. But if you don't have to walk that road, you might easily miss to realize that. My bosses once wanted a graph-GUI and they could not realize that their requirements contradict each other. Like "only circles and lines, never anything else" and "triangles here". --- It's very easy to think that anything is possible if you don't have to do it yourself. Only then you'll have to figure out the details.
Waiting on the computer to catch-up with what I am doing.
Business analysts that tell you the HOW rather than the WHAT/WHY. Bonus irks when they try to do it using fucked up sql, Boolean logic that makes little or no sense, state transition diagrams where you get stuck in a dead end, or can’t think of a decent name for something so the just call it an Entity. 
Good question. Not all mocks are bad, but a lot of mocks is almost always bad. If you've asserted that AccountViewModel.PrintReport\(int report\) calls \_reportPrinter.PrintReport\(int report\) Then what have you proved? Legit question. Why does AccountViiewModel even know about a report printer? How do you intercept report printing requests? You might not now, but I'm kinda pushing you towards a better solution.
Changing requirements after they had weeks to test and it's basically release day and they finally look at it and decide it needs something extra. No kean you can't have that, shut the fuck up! You had weeks to review it, fuck you!
&gt; 10) receiving an email: "The application you wrote has a bug in it. I got a error when I started it this morning". Not mentioning Which application, what they were doing when the error occured (Like, did the app start up or did the error come from the OS [click-once can throw os level exceptions before even launching the click-once app]), or absolutely Any information about the exception... and this is where the application they use most has a feature where any uncaught exception can be emailed to me with a stack-trace and with a screen shot... but instead of clicking yes for "Do you want to email this exception" they click no and send an email directly without any of the info?! I actually added a feedback-button similar to Google's specifically for this reason. Where I work we have a support department, but when they can't fix things, it comes to me/the software department. I lost count of how many times people just say "I got an error!" or "It doesn't work!". Ultimately having to resort to using Teamviewer to see whatever the non-techie on the other side of the phone line is doing. Now, whenever there is a server error, they can click a feedback button which not only uses the jQuery html2canvas plugin to make a 'screenshot' of the page, but also sends me (inner) exception information, stacktrace, which OS, browser, device they're using, what account they were using, which page they were on, which QueryStrings / PostData was applicable, et cetera. 
I was hopeful. I change them, same error. : (
You've proved that it passes the value it received... The first time I saw a project full of "behavioral" tests, I said "you've made a mockery of unit testing". IIRC I found situations where they were testing mocks. not actual classes. I am writing behavioral test at the moment. If all it does it pass along the value, then writing a test is pretty worthless. If it need to check some sort of permission before calling PrintReport, there might be some value to testing that it always calls CheckReportAccess(...) before PrintReport. &gt;Why does AccountViiewModel even know about a report printer? I don't know what sort of type _reportPrinter is, maybe it just has a friendly variable name. From the perspective of testing the controller, its just "the thing to pass the parameter to". 
The thing that grinds my gear that will never go away, is dealing with uncertain, stubborn and/or chaotic customers that just keep changing, regardless of how many awesome wireframes, mockups, requirement lists, user stories or demos you set up for them. Sure, they'll end up paying for it if it's *out of scope* so we got that covered. What always pains me is to start on a project which is put together beautifully both in terms of front and back-end, only to end up with it looking and working like shit because said customer wants contradictory changes that end up with you breaking the entire application from database all the way up to the visuals. 
You are absolutely right, I'm sorry I didn't make that a core point and I really should have. This is why async does NOT fit with ctors or \(legacy mode\) events. ctors could return Task\&lt;T\&gt; but I still maintain that convention suggests they do not fit well with an async pipeline. We do not want async ctors because ctors should not be long lived or slow. Move that code to an Initialise method, perhaps firm that up with awaitable support, but do not get in the way of a ctor as a logistic bottleneck. You should not ever do long operation in the ctor. Events however are a problem commonly, although one that we have solutions for. And this is where the async all the way down would be a problem. No legacy code would support it naturally and would probably break. We rely on the synchronous nature of events so that EventArgs can abort the chain on failure. You can't just switch that code to async code. Ever. But we could add a new mechanism for specifically asynchronous events. The handling of events has changed in recent frameworks to mitigate some of the old boilerplate, but events are synchronous by design. You can't change it without breaking everything, so we'd have a bifurcated event mechanism and I'm not sure that's helpful. I would like to see some better support in XAML for async commands, but that's pretty much unrelated to the language feature. Does that make sense? 
Z U C C
I did try to change them on the DB side to be numbers by removing the quotes, but it ended up with the same result, unfortunately. As I mentioned, the data is a dump from the prior DB, which was working just fine at one point in a previous version, so I am not sure what changed or where that is making it not like something now. Raven support asked me for a copy of everything so they can try to track down what is going on. There was a patch or two that they released in nightly builds that corrected some incompatibilities with communication within Unity, but the communication is fine now (well, or so it seems), but there might e some other type of bug perhaps that could be causing this. It just seems strange that no matter what I try I always end up with the same error, even when I changed the data type in the DB there. So it must be looking at something else when coming up with that error, I am just not sure what.
In my opinion being able to communicate and iteratively define or improve an incomplete spec is one of the core competencies that every software engineer should have. This is what we are afterall, a bridge between business and computers. If spec is so detailed that it leaves no question unanswered, we will soon be replaced with an AI.
No on gets out alive
Yes! This is the problem. It is a horrid situation where the test asserts the path through the code. The test proves that A calls B and B calls C. No documentation on why A needs to call B or why B needed C, but hey! Focusing on behaviours is beneficial, but it doesn't solve the A-B-C issue unless you pay attention and document what you're doing. Usually this is as simple as naming the test something verbose but helpful and perhaps adding a few comments to the asserts to explain WHY you're asserting them. 1+2 always equals 3, but knowing that 2 is the current exchange rate for Botonosvia is actually useful information. I'm totally with you... Probably. I'm actually not sure if you were supporting or attacking my views, but this is an example of where it's important to communicate, so I lay out my misunderstanding and will work towards a better understanding through dialog. 
#2 is a big one I think I may have been guilty of in the past. A few years ago my code got the 'this is dumb' review because the reviewer completely misunderstood my approach and goal... now I specifically try to never criticize code and simply suggest improvements instead.
We do try to work agile but when working with DoD it happens
I would start with a single database, the Azure setup doesn't matter too much. I usually use an Azure SQL database and use the free pricing tier. Be very careful prematurely optimizing. There are some common patterns to scaling data but they are applicable based on the way your data is shaped and how it's consumed, and there are many things you can do at higher levels of the stack to prevent the need(caching, etc.) It's best to start with the simplest solution possible: one database on Azure, then expand as needed. Otherwise you probably set yourself up for a lot of unnecessary headaches. Keep the data normalized and you will be fine.
It would be an awesome learning experience to do a generic tutorial for setting up an ASP.NET core website and then figure out how to go from that structure to making a blog. You would learn a ton :)
“If that were easily possible, Google would have done it by now”
Everything.
I'm working on [Musoq](https://github.com/Puchaczov/Musoq). It's a tool to perform queries on any datasource (like directories, files, repositories etc.)
Why asshat though ? Were you insulted in some way? The comment says there is a difference between software engineer and programmer, the article doesn’t actually insult anyone either it just explains the point of view. You response on the other hand just makes a statement with no logical explanation or reasoning, and then proceeds with insults. Discuss. 
&gt; I'm actually not sure if you were supporting or attacking my views Neither, just sharing some of mine :D
Where was the ego ? Please point out the superiority part too.
I've had a rough time with specs/requirements gathering since leaving school 1½ years ago. We have a COO that is in contact with customers. For the project that I've been working on for the past 3 months, we've had maybe 3 meetings of one hour about the project, and we haven't been able to fill out his role of product owner despite assigning it to himself. He gets snappy and irritated when I ask questions about things that I think are essential, and answers as if the answer is self-evident. I'm also the only one who takes notes during meetings on my team, and there's never a meeting agenda planned. I've told my manager several times that I have an easier time coming up with solutions/ideas for any potential pitfalls, if I'm given a chance to prepare, but people seem to look forward to the meetings, because they see them as an hour long coffee break, where they just get to chat about an interesting problem - that's all well an good, but it provides no value, when everybody walks out without of the meeting without agreement or a clear plan or even remembering what the hell was accomplished. There's rarely agreement on what tasks are about or what goal they're trying to accomplish. It is super uncomfortable going to work without being sure that you're doing what's needed. So then you send emails to ask. Sometimes you get an answer to one of your questions. It's exhausting as hell trying to do your job properly. I can't get anywhere near doing a good job, if all my focus is on pulling the most essential requirements out instead of focusing on the finer details. I've done tasks for other teams at my company, where it's been much easier. They usually give a good description, an example of what they want, and how it should be done. Then you help them out with the technical details instead. I was also given a reprimand for taking up too much time of a customer's consultant developer after a few mails to ensure that we agreed on the REST service I'd set up for them, which pretty much killed communication with them. Then I ended up just finishing up quick, and wait for their feedback after a test phase. Today I also spent 2 hours going over a task with our outsourced, remote developer. He's Indian and severely struggling with understanding what the hell we're actually doing. I've spent so many hours trying to help him, and often I have to repeat myself, because he ignores descriptions and meeting notes that I leave for him. But still, he gets zero support from my manager and COO, who are the people that initially made the decision to hire him. COO doesn't want him in meetings, because he's annoyed with Skype, and that we aren't able to speak in our native tongue, and they do nothing to keep him up to date with project decisions afterwards. We usually start sprints with a bunch stories that have no description or the cryptic "As a blahblah I want yaddayadda so that I can taytay". Most recently the COO was giving me shit for not having implemented something that was never requested. We'd been through several sprint demos of this piece of software, and he never once asked about this functionality, and I was never aware that it was a problem until that point. Maybe if the fucker wasn't always sitting on his phone during this one hour we have every two weeks to get feedback and agreement on the course of the project, we wouldn't have discovered this 2½ months too late. I'm so tired of no specs man.
People interrupting me when I have headphones on. That is my non-verbal way of saying, "Hey, not right now; I'm in the middle of something." I'm very open to discussion or putting out fires or what ever else may come up when the headphones aren't on, but please leave me be for the next half an hour or so. Also, people who have loud voices. My ears tend to pick them out and I just cannot block them out.
PE certs are both taken seriously and completely inappropriate for us. 
If you do one thing, and one thing well, protect your code with testing :) At any professional level, if you cant or wont unit test, you shouldnt be allowed near the code base.
Linq2db.
Arbitrarily defining two terms and saying that is one is better than the other according to these arbitrary definitions is trying to be superior. That superiority is driven by ego. The article says "Maybe another way to put it is: a software engineer is a licensed professional engineer who is schooled and skilled in the application of engineering discipline to the creation of software." Please let me know what license you have to work on software and who issued it? Also this is factually incorrect. There are many skilled software developers who never went to school and no software engineer is "licensed" in the way the blog post author is describing.
Either is good, Neither is too :\) It was helpful in helping me structure some thoughts :\) It's a really complicated area. I often advocate for consistency irregardless of its comparable merits. With tests, they reflect/amplify and/or mitigate code structural flaws. So you can't address test issues without directly address coding issues. So it's a painful area to try and help on in isolation :\)
Try linq2db. Faster than EF, even sometimes as fast as Dapper.
 U2U Consult Performance Analyzers for C# 7 https://github.com/u2uconsult/codeanalyzers is also quite interesting. 
Having to deal with customers.
Frequent and unnecessary meetings. There's no faster way to kill a day's productivity than to "bring in the developers in case a technical question comes up", then being drug into a 1-2 hour meeting that you have absolutely no reason to be in. I've been in several places that LOVE to do this.
My chief annoyance is with the software we use and build. I can't stand the latency everywhere - from switching channels in Slack to opening the reference documentation for a function, opening Visual Studio's "quick navigate" panels. Gates' law is in full effect. I installed Windows 2000 and Visual Studio 6 on an old computer and it's snappier than my workstation in a lot of things. I've taken to programming Unix and plain Win32 utilities in C as a sort of antidote. Secondary: websites with too much floating stuff and fixed panels. Do all these designers use Surface Studios or what? Loving Reddit. Nice and compact while it lasts.
I used to have a boss that did this, it wasn't constructive criticism. He'd sit there in meetings and bitch about code, literally saying whoever wrote that obviously didn't understand the business or how to code well. Invariably if you went and looked at the blame log later, it was his code that he was bitching about. And no, he wasn't being funny. He was just a really bad manager (And coder).
Two jobs ago I worked for a small company where the owner did not have a technical background (and was an alcoholic with a temper, but that’s another story). He insisted that once software was feature complete that it was finished and any need to go back and work on it indicated a failure on the part of the programmer. I’ve never been happier to be laid off.
If it's a patched up shitty Excel macro or the finest implementation of the last pattern/architecture in a sparkling clean language,it makes no difference at all. At least where I work.
I just do `myButton.Click += (s, e) =&gt; Whatever();` `s e` is good enough for me. the underscores might trick up a junior dev IMO but man I wish you could just do your last example.
Developers and PMs who jump on the hottest new untested frameworks in the hopes that it will solve all the deeply-entrenched design flaws in our system. So far, hasn't helped. 
I tried to get Blazor working last night at home for 1 hour before giving up. Apparently I installed ASP Core 2.0 preview 2? i think, but like, the app will launch, a console window with a red message shows, and then the console closes before I can read it (less than a second) Now this was after uninstalling THEN REINSTALLING VS 2017 community edition
Thats because they didnt use test driven. N.b. down with mocks, up with stubs!
I.T. and I are consistently at war because they like to arbitrarily change admin rights, block ports, put in broken proxy scripts, etc. Usually each of these things happen once a month.
This doesn't just apply to programming friendo
I’ll have to disagree. I don’t see anywhere in comments or the blog post a suggestion that one is better than the other. Additionally, You can compare these two terms, and not arbitrarily but objectively because the two terms are extremely related. Its like comparing apples to apples. As a matter of fact the article defines the two terms of hierarchical types, where one is the broad term (parent class) and the other is the more specific (child class). A software engineer is the child class of programmer where every software engineer is a programmer but not every programmer is a software engineer. So if someone feels insulted by that definition because they think that they believe they are a programmer and some Joe Shmoe is telling them they are inferior to software engineers, they should take another look at that definition. The license stuff, sure there blog post is a bit vague in that respect and no, most software engineers don’t have any kind of licenses, though the ones that do work in certain defense contract positions do. But to conclude that saying there is a difference between a software engineering and a programmer is arrogance and some sort of superiority complex is in my opinion wrong. Will you also suggest that saying there is a difference between a software architect and a programmer is also an egotistical absurdity? 
A project made in 2015 discovered the use of generics. They were just using like List&lt;object&gt; before hand which of course is generics, but you lose the strongly/statically typed of List&lt;T&gt; at anyrate, I had a good laugh.
GRRRRUUMMPPFFFFF!!!
Oh boy, let me tell you about vocal fry. google that if you want to ruin a large portion of female talking patterns.
This is scary accurate.
I did some benchmarks a few months ago and using the thread pool was much slower than simply spawning new threads. I believe it was only a speed-up of around 200% rather than the close to 400% with threads (4 cores). In the end I just made my own "thread pool" which consists of 4 reusable threads.
No, we have `struct`s
https://xkcd.com/1425/
There are things that are literally impossible (Halting problem) and areas where that kind thing happens fairly frequently (like static program analysis). Granted, most programmers don't work in such an area, so when they say "impossible", it's not actually impossible.
Spending 40 hours navigating ridiculous bureaucracy in order to get a change implemented which only took me 30 seconds to make. Don't get me wrong, I understand the need for following proper procedures, but enough is enough. Need a timeout in a config file changed? Sure, done. Now I have to involve ten other people who either don't know what the fuck they're doing and/or don't really give a fuck. Meanwhile the people waiting for the changes think I'm the one who doesn't care. Soooooo agile.
A few things are impossible. Some customer requests really boil down to solving the halting problem. Not often, but it does happen. 
&gt; "Speed up" the full text search over hundreds of thousands of records. That's not impossible. It might require an unreasonable amount of resources (time of an expert programmer, hardware, etc.), but that's not the same thing.
I don't understand number 5. Why is your experience level a stupid question? And why are you irked so much answering such a simple question anyway?
&gt; convention suggests they do not fit well with an async pipeline. What convention? &gt; We do not want async ctors because ctors should not be long lived or slow. Making my constructor async makes it neither long lived nor slow by definition. &gt; Move that code to an Initialise method, Initialise is a constructor by another name. We are just kicking the can. Clearly this would be too easy: var f = await new foo(); This must be better: var f = new foo(); // f is useless. var q = f.User; // User is the reason why f exists...but it's null here. await f.Initialise(); // We don't do heavy lifting in the constructor! Nay nay! Can kicking: public MyClass { public MyClass(IOtherClass otherClass) { // We need a property of otherClass here. We cant await Initialise. We cant inject an async factory. // Others have suggested we make those properties methods. Does not help us here! // Kick the can! Lets create an Initalize method for MyClass! } } 
Using signed integers for always-positive indices/counts in a .NET environment to preserve VB.NET CLR compatibility or GUIDs as identifiers which have a non-zero (albeit impossibly small) chance of conflict :/
This fall sometime, according to https://www.manning.com/books/c-sharp-in-depth-fourth-edition
That is also awful. I didn’t know it had a name.
Experience with Windows. Oh, you know JSON? How many years experience do you have with JSON?
Could be some information is getting lost in the shuffle. `Average()` (and some of the other extension methods in System.Enumerable) is only implemented for `IEnumerable&lt;T&gt;` for specific T. I.e. There is an `Average()` for `IEnumerable&lt;int&gt;`, but not one for, say, `IEnumerable&lt;object&gt;`. The `queue` is a `Queue&lt;T&gt;`, so `Average()` can't be called on it.
Do you have examples on what not to jump on? Currently looking at going from 1 e-commerce version to a recently released version. I don't code so it's hard to fully understand the total reasoning yet.
Well, in a month you can get enough experience with JSON to know just about everything about it. Still an easy question to answer. Windows is a much deeper subject though.
Being asked to create an entirely new project and jump through a bunch of hoops when you find a bug in the tooling you use, or some other software you have to use. It's one thing if they cannot reproduce the problem, quite another when you know had they followed the details you provided you wouldn't be having the conversation.
I'm in the same position, I went ahead and preordered it on Amazon in the hope it'd be released shortly but I'm losing hope.
Well, firstly - in an average week, I probably spend *at least* a day's worth of my time in meetings. Sprint pre-planning, sprint planning, story estimations, showcases, retrospectives, stand-ups...and that's just the routine stuff. Chuck in random ad-hoc meetings spun up by management for whatever reason validates their existence on that particular day, along with stuff like running interviews for recruitment, and suddenly I'm not a developer any more, I'm just a drone bouncing from one meeting room to the next, with barely time to check my email for the next meeting invite in between. On the rare occasion that my calendar is (relatively) empty, the second most irritating thing is random interruptions or context switching. But the worst part? Having to deal with other developers not contributing. I'm not referring to junior devs who come me asking for assistance (which of course I'm happy to give, and even happier that they are asking!) - it's the ones who you can see just don't give a shit, the ones who just spend days and days on the same task and don't reach out to anyone to help them, but just seem to have a mindset whereby if they keep their mouth shut and their head down then nobody will notice if they just sit around watching YouTube all day. Unfortunately, especially in large corporations with big teams, it's easy for these people to slip between the cracks.
Deeper and darker. 
[mongoDB](https://www.youtube.com/watch?v=b2F-DItXtZs)
Right now I’m in NuGet hell due to some Visual Studio bug. All afternoon resolving NuGet stuff to update some packages. I. Hate. This. Part. 
[Relevant xkcd](https://xkcd.com/1425/)
Startup / side project ? We don't worry about it. It is trivial to scale up on Azure SQL to machines with a huge amount of performance (DTUs), scaling out is a much harder problem which isn't worth solving up front.
Ikr! 
Non-technical people should not write specs, which tend to be technical. Domain experts should describe needs and processes in domain terms, not technical terms. They should describe the problem space, not the solution space. Developers should work with domain experts to flesh out an analysis model and domain model for each core subdomain of the business. Developers create the solution (specs). Domain experts (sponsors, business analysts) describe the problem and business processes. Highly recommend reading Principles, Practices and Patterns of Domain-Driven Design. You get into a lot of trouble having non-technical people write specs and devs blindly implementing.
Really just anyone who has 0 tech experience and then judging me on "being a team player". Which is code for "eat butthole or you are being a bad employee and no raises/promotions"
Specs = specifications. Specifications != Design documents. Those are two different things.
what if the vba code is well-written? (:
&gt; As a software manager, a programmer saying something is impossible. Projects (and companies) have limited resources and limited time. Additionally, software has also quality constraints and sometimes has also regulatory constraints. Good engineers know this, thus getting an answer of "impossible" means "impossible within our resources and time constraints". So it seems that you don't want to realize that things are bound by time, resources, etc. **Sorry, but that's why I hate managers that are unable to have an engineering perspective**. There, I said it. .
All ports should be blocked except for what's required, and even then outside of the load balancer infront of the app that proxies to the service, they should be closed. If you're using anything but 80/443 for your application you'll need to tell them that when you're doing the development of your app (and they are presumably configuring the environments for your app). It really shouldn't be a war, unless you're expecting your app to be available externally on :8001 or something. Not sure I follow your proxy scripts bit though. I'm assuming you're meaning you use a proxy on your workstation out? Or maybe the proxy pass rules to your app. I don't see how proxy pass couple be broken though, unless you gave them incorrect path/port information. Changing admin rights sounds weird. Not sure why not systems folks would ever have admin rights to begin with.
Like I haven't been a coder myself for 30 years. There's nothing I'm giving my team that is infeasible from the start. These aren't "Impossible within the constraints of time/budget/etc"- they are engineers who simply claim things are impossible any time they either don't want to do something or are too lazy to figure it out.
What do you think is different about "Arrested Ending" against "'ArrestedEnding"?
 - People who wear too many hats. We spend so much time on SO and Reddit bitching about code violating SRP yet ignore real world violations of SRP. And people are far more difficult to multi-thread. You either have to wait or risk getting erroneous data. ;) - Forced Decisions without Real Team buy-in. Not talking about when you're forced into a corner with a deadline, but larger decisions that have long term impact, without actually consulting the team that will actually be dealing with the decision. - Developers who are so insistent they are right that I have to dig through EF's Codebase to prove my point. Because writing a unit test is too much work for them. - Non-communicated deadlines. It's one thing to have a deadline arbitrarily decided for me. It's another thing to not even have it communicated.
Working with coworkers who are clearly unqualified to be software developers.( example: a coworker of mine who just asked how to debug a .dll... they have been with the company for 2 years). At least that means decent job security. 
Non-developers trying to make development decisions. CEO types trying to make UX decisions with no actual user feedback. They get super nitpicky, then the next week reverse their opinion, then change it again the next weekend. They just need to stay the hell out of UX, and stick to their high level overviews.
Holy shit #6 Large application I'm fixing up, no tests, no time for tests. Barely enough time to push a feature, never mind to make tests function... It's annoying af.
I did this on a previous application. It worked great, would recommend. Gather data about the application state, where they are, what they where doing, and ask for specific clarifying questions based on where they are in the application.
Business analysts.
I don't like Scrum really.
What would you use rather than GUIDs?
I unfortunately didn't keep it, but it appears like I was running a loop 10000 times where each iteration did 4000 (4x 1000) matrix multiplications.
Don't know about constructors but for event handlers it'd be nice. 
Lets try it in Python. d = 0 s = "d is " + d Oh, that doesn’t work. s = "d is " + str(d) So, is `d` a `str` or an `int` at this point? The answer is the same in C#.
&gt; Almost nothing is impossible. It depends on your budget. 
Calling programmers "coders".
It is because nobody looks at them. There is also a lot more than one application hitting that box.
Yep, “full text search over hundreds of thousands of records” is a small ElasticSearch cluster.
Agile is all about reacting to user feedback though. It was essentially created to allow requirements to flex throughout the project; to avoid delivering a project built "to spec" that doesn't meet the users needs because writing good requirements is hard.
This guy codes.
Every time I apply forethought and make a new feature a trivial thing to add, management doesn't believe me.
this is the right, _smart_ way to do it. Lazy programmers don't like stackoverflow because they write lazy questions and expect the site to do the work for them. In my experience - (and 17k+ points, mostly from question) - the key to a successful StackOverflow question (whereby 'success' means it gets answer) is identifying what the specific problem you're having is and asking about it. Like you, I've thrown away a lot of questions that I'd written and in some cases spent significant amounts of time on because in analysing the problem to articulate the problem, I inadvertently solve the problem.
I wish for that so much, but my clients use our web apps offline (in their lan). 😫
Using latest features (ES6+, .NET 4.7), would probably be the easiest jumping point. I wouldn't advise downgrading technology on personal projects; you just make your life harder without any benefit or reason (optimizing too early)
Thanks . After some googling I deduced the same thing. Guess I was hoping for some more specific help, ie how to turn my generic Queue into something that will work with Average.
Here is the code yaxis = Input.GetAxisRaw("Vertical") * spd; Vector2 VelocityY = rb.velocity; VelocityY.y = yaxis; rb.velocity = VelocityY; And about the gravity, could I turn the gravity on via code? I normally do it in the inspector, though it doesn't give me the option. 
1. If you have a function to convert `T` to `float`, there's an [overload](https://msdn.microsoft.com/en-us/library/bb534635.aspx) of `Average()` that can be used. 2. If you can refactor the `ConcurrentQueue&lt;T&gt;` class, you could derive a new class from `ConcurrentQueue&lt;float&gt;` and add your method there, as-is. However, you'd need to make `queue` a `protected`, instead of `private` field or property of the parent class. 3. It's pretty heavy handed, but you could implement it as an extension method on `ConcurrentQueue&lt;float&gt;` using the existing `CopyToArray()` method: public static class Extensions { public static float Average(this ConcurrentQueue&lt;float&gt; queue) =&gt; queue.CopyToArray().Average(); } Which approach makes sense depends a lot on the particulars of your situation. If performance is the paramount concern, you probably want to look at doing something like #2, though.
1 hour? I can tell you don't have to worry about setting up frontend architecture. Shot is brutal these days. 
I'm not your buddy, pal.
Yeah, if I understand correctly, just set your rigid body's `useGravity` property to `true` or `false`. Regarding your velocity code, you may need to not have two different `VelocityY` and `VelocityX` vectors, but instead combine them into the singular `velocity` variable where you set its `.x` and `.y` values respectively.
Well nothing is impossible, yes. But with some systems and services, it means we have to hack to get it to work. That is never good...it means that it has a high chance of breaking and it also means future developers will have no idea what the hell is going on with it unless they spend hours or days analyzing it. Then they curse you for developing it. It's like saying it's not impossible to make a Kia Sorrento fly...but with a 2 week sprint, a budget of $1000, and a roll of duct tape and cardboard, it's going to be very messy. Problem is that if a developer says it is possible, but it is a terrible idea, leadership will follow through anyway cause all they heard was that it was possible. If we say it is impossible, then usually the conversation stops there. I mean look at the mess with TSB. That's all due to an unrealistic scope. 
Like the other comment said you are using generics. Just write extensions methods on top for this. ``` public static int Average(this ConcurrentQueue&lt;int&gt; queue) { //lock the queue and call the average method on the IEnumerable } ```
Junior devs that don't try to figure out problems on their own before asking for help
I think a lot of people use "agile" which is basically waterfall with unchained scope creep. I have seen it many times.
I guess that won't work because you are locking it but maybe using the copy to array method then doing average would work [dotnetfiddle](https://dotnetfiddle.net/kbZi3h)
I thought an underscore was intended for that. For example, this is valid: if (int.TryParse("test", out _)) whereas this is not: if (int.TryParse("test", out h))
Yeah many (most?) large organizations do not lead when it comes to updates. This is completely disregarding the fact that sometimes you have hardware vendors that supply custom Windows boxes to work with their hardware and it's practically an act of God to get them to qualify an upgrade to said boxes. I've actually had situations where Supplier A has a Windows box super-customized for their hardware, but then we need compatibility with Supplier B's hardware as well. Supplier B issues a bug fix that requires the latest .NET framework because reasons, and then you need to beg Supplier A to qualify a release of their environment in the upgraded OS version, which might take months.
A neat trick is to include the static class in the same namespace as the queue then you can just do _posQueue.Average()
UML is great for sequence diagrams.
If you use nodejs in your MVC, you are there already.
The opposite can be true.. you come back to some code you haven't touched in a year, and you instantly make it much better in small ways -- just because you backed off of it.
That is 1/10 the piece of the pie. Next do you use old js, es6, or typescript? Will you need to scaffold out more than one project? Then you will need yeoman along with bower. What CSS language will you use? LESS, SASS and will you use framework like bootstrap or foundation? What base changes will you make to that framework? What precompiler will you use? Gulp or grunt? Oh wait, you need a transpiler for your typescript too. Guess you should use webpack. Wait though, webpack isn't able to compile the testing framework you chose correctly, so you need gulp and webpack. Yea we forgot to choose the testing framework and configure that too. Guess we can go with jest...or maybe jasmine. Oh yea what JS framework? Angular, Vue or react? Oh you need D3 too? Ok. Now to configure a linter as well... I think we might be ready to start development and it's only a month later!
Often code can be designed in a more loosely coupled-way to reduce the need for mocks. For instance, if you find yourself asserting that such-and-such a method is called on record A but not record B, you very likely can extract whatever tests are being done to determine whether that method should be called into their own method and test the logic independently. 
 It's hard to see without code, but your indexer is out of range, as the error suggests. If you post some code, I can help you out.
PMed you
That we use node.js with 8.2 billion upstream dependencies supported by the whims of others and forced to rely on that backend in my client. But hey, node.js is free.
I'm not your pal, bro.
It's a pretty common pattern to use underscores as a means to show explicitly that you are intentionally ignoring the parameters. Now if Roslynator would withhold the warnings in that case, I'd be super happy.
That was my last project: ASP.NET MVC, EF6, Web API, Razor, partial views, VueJs, TypeScript, NPM, SASS, Gulp. Notice I didn't say webpack.. oops, that would have made my life easier.
Try to test behavior or outputs rather than implementation for all of those. Export files are probably the easiest to test (I'm assuming that you're talking a batch file). You're coding to a known spec (the file layout) and you know that if you input X you should get Y in column Z. So your "create an export file" method is the thing you really want to test. That method should take in a collection of objects (probably IEnumerable&lt;T&gt; so you can use `yield return` to not load the collection into memory until needed). It should return a file stream. The method shouldn't know about databases, SFTP servers, how the file gets from A to B or how the data that it's exporting gets into the system. If the method cares about those things, refactor so you don't have to mock out those extraneous things. (I don't believe in 100% test coverage. There is a point of diminishing returns. Focus on the logic heavy or translation methods first. Things that could be broken without anyone noticing for a long time.)
&gt; printing a report Print to PDF. You can't automate 100%, but you can look at the PDF. &gt; exporting to an accounting system Harder. Maybe an abstraction, but you then have to test both ends of said abstraction separately. &gt; sending a notification e-mail to a customer? Depends. If I'm using `System.Net.Mail` I'll configure the Unit test/abstraction to drop in a folder instead of actually sending. If I'm using Exchange WebAPI or something else, I might do something where all test-mails get sent to the same address but have the ACTUAL recipient in subject. No, it's not perfect, but I can understand what is tested versus isn't, and test around the parts that aren't handled by that case. 
For fuck sake no kidding! Grunt ... ok, nope grunt's out start using gulp, no more gulp ok Web pack I guess? Oh wait nevermind Yarn...JESUS FUCKING CHRIST!!! nevermind I'm switching to blockchain.
&gt; I would look at it as constructive criticism. Even if someone messes up (all of us do), look to see if they have a point. Focus on improving yourself, it sounds like you don't work in a good environment, so improve enough to get to a better job. Yeah, code-review is key in our environment for improving skills. (All PRs have to be reviewed by another developer and you can't merge your own PRs.) It's helped me become a better developer over the past few years, even though I disliked it initially. "Oh gods, not a review by XYZ, they're so picky about little things." Now, there's a bit of social contract there: - Be constructive in criticism and focus critique on the code, not the person. - If you object, you have to provide a workable alternative. And objective reasons why the alternative will be better. - Be accepting of critiques. - Pick and choose your battles. Code that works and passes well-designed tests is better than a PR that gets batted around for a week.
Phone calls are my bugaboo. I can deal with conversations in the open area, that's fine. It's the phone calls where you can only hear one side that is maddening. We do have a rule that you must leave the room to take personal calls and your cell must be on vibrate. So that just leaves the business phone calls - which we're working on. Step one is to kick that group out of our shared space and into their own area where they can all deal with the phone calls. Step two is to eliminate any remaining phones in the shared space.
&gt; now I specifically try to never criticize code and simply suggest improvements instead. I think that's key. If you're going to object to something you must provide a workable alternative and an objective reason why it's preferred over the code already written. And you need a referee on the team to swat down those people that can't play nicely with others.
Open plans are not horrible as long as: - Everyone is on the same team (don't mix sales / developers) - No phones at the desks - The culture requires you to go to a meeting/side office for conference calls / video calls - Personal phones on vibrate and you must leave the shared space to take personal calls - Headphones are allowed - You have the option to work 1-3 days per week from home - Disruptive people are dealt with by management - There are enough small meeting rooms available The upside to an open plan is that you get more cross-pollination between team members. Ad-hoc meetings happen far more frequently and you often draw in useful participants who happen to overhear. Even if I'm not actively participating in one of the ad-hoc meetings, I'm still tuning in on it because it may convey information I need to know later. But we also have most or all of the above requirements met in our open plan office. Which minimizes disruptions for the days that we are in the office.
Bummer about statics is that they aren't a part of interfaces. so the static factory method can be a problem. but generally you can just turn to factory interface and have dumb objects with an async create function.
I try to schedule most of my face-to-face meetings on only two days per week. That includes planned conference calls and all the ad-hoc meetings that are necessary to keep up on things. Keep all my major interruptions on those two days. The other three days are focus days, usually working from home, or hiding away somewhere in the building. Those are the days where I only look at email / chat every 30 or 60 or 90 minutes. I will set my status to "busy until 10:30am".
&gt; Even so, I have to watch it myself. Sometimes it sneaks into what I say to some of the other developers at work. Tasks or code that I consider trivial or easy are not necessarily the same for other developers or it implies that there are no unknowns and everyone is on the same page. I've been super self conscious about this recently because I'm writing documentation for personal projects. Just. Simply. Easy. Trivial. I really don't like reading these words in documentation. Sometimes they're justified, but mostly they just make me feel denser than a box of rocks. 
That's exactly the reply I was going to make. Full text search? You probably want ElasticSearch. A fast index of all documents in your database? You probably want to use ES. (The downside is the lag between when the document is updated in the persistent database vs when the search document makes it into the ES index. We tend to do the updates by firing off a background job which can retry / deal with failures. So there's always a 200-800ms delay.)
I'm a junior programmer and I've been trying to create my first useful class library. I created a mocker that can help in creating test data from a context class (I know there are projects like this so hopefully mine isn't too similar). There is a nuget package called Cosmo.MockDatabase. https://github.com/Cosmo801/MockDatabase (see wiki for usage info) Any feedback would be appreciated, especially GitHub best practices.
Working on a web-based bookmark manager to possibly replace XMarks, which shuttered today. Getting some practice with ASP.NET Core and will learn how to do a Chrome extension, hopefully.
This used to put me really bother me too. My response was usually something like: "Don't you think that if I 'could just', I 'would just'?"
Just make your own upload it as a Nuget Package
This guy f*cks.
Since you mention C# you should take a look at Application Insights. It will give you 100 times more than you need from the Microsoft Libraries but they have a solid and verbose ( read overly complicated ) logging framework in place. This is a must for C# web apps.
My favorite is when I'm eating lunch at my desk, have my mouth full, am watching a training video and I get interrupted with a question that could have been answered with some initiative into looking into the problem. I HATE getting interrupted during lunch. My fault though. I eat at my desk.
ReSharper does this. It will put squiggly lines under stuff that is not named to convention. There might be free alternatives. Especially for VS 2017 I've seen a lot of people drop R#er in favor of Roslyn Analyzers etc.
NLog is quite configurable. Never had a problem.
Starting on some simple thing, which you think will take a short amount of time \(like, half an hour\), but then going down some giant rabbit hole and still trying to get the simple thing done 3 days later...
&gt;As a senior software engineer "As a senior software engineer". I've been in the programming game for \&gt;20 years, and noticed that many of my peers who ended up in management &amp; senior positions, have returned to being hands on \(myself included\) because they miss doing the actual things they enjoyed doing in the first place in their careers. Whilst I don't regret my management experience \(it's not easy, certainly not managing a team of programmers!\), neither do I regret going back to being 'just' a programmer. \(Apart from the $$$, but hey\).
not sure how it stacks up against resharper but inbuilt https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-quick-actions lets you set up specifics which will slow up as ellipses &amp; suggestions (versus squigglies/warnings). that can be changed to warnings though iirc. the lightbulb / suggestion list will offer a fix/refactoring to change just that instance of a rule-break or what have you, or everywhere, just like a normal rename or similar refactor. vs2017's analyzers/code fixes are pretty badass.
A spec so detailed that it leaves no question unanswered doesn’t just eliminate the coder, [but also the code](http://www.commitstrip.com/2016/08/25/a-very-comprehensive-and-precise-spec/). And that is why it’ll never happen: what’s stopping it from happening is not a technical breakthrough, but rather for domain experts to suddenly also become experts in software development. There’s no need for that to happen any more than any car driver needs to be a car mechanic or any person possessing hair needs to be a hairdresser.
Did you want your hair purple? 
Yeah, all the diagrams are well thought out and have some value in some cases, but it's often hard to use them with the business as they're not used to them. I've workshopped changes with people before and the user will draw things on a flow chart because they know the lingo near enough. Never worked when we used UML.
Serilog is the only correct answer
The best way to learn where problem is that to use debug. I assume you are using Visual Studio. First of all, debug your code from beginning if you do not know where you put breakpoint. Debug your code is the best attitude and you learn so much things.
Nah. It just happened.
I get what you're arguing. The convention is literally that ctors are not slow or potentially error prone. Making them async does imply that they will be slow otherwise why take the time to give it the opportunity to potentially make a context switch to a different thread? In your example why would you need a new foo if you're only using it as a factory or repository of users? Why not inject a singleton factory or repository into the ctor of the host class that is currently creating a new foo? How are you going to test your code if you're newing stuff up like that? Also, if you reordered your three lines to new the object, await the initialisation and then get User it would work. But as I said, structurally it feels wrong to create a new foo just to access a tangentially related child of it. I do sort of get what you're arguing for, but there are zero cases in the code we write where it would be of value to us. I say us, I'm speaking for my team. It does support a novel mechanism for an alternative style of code, but it's a style we disapprove of. But as with all language features, while I would never use it, I also wouldn't have to use it, so you can add it if it makes you happy :) 
I use serilog + logentries it works great
Yeah, I was being a bit flippant :\) Theoretically we could deliver a solution to any problem if we were allowed to wait for sufficiently advanced technology to emerge ;\) 
Yes true, I was being flippant :)
I read the whole thing, and so greatly appreciate every word of it! I have a lot to learn but I am so keen to get into it. I will research into it but would you have any paths you think I should follow or learning procedures which would help me create good habits and accelerate the process?
A lot of it will vary depending upon the company you work in. Some of the things that I consider essential like developers having full access to the business won't fly in some environments. You could read up on Agile practices, SCRUM and LEAN. SCRUM has good and bad parts, it's supposed to be agile, flexible and adaptive, but people don't use it that way. It's worth looking at the [ScrumAtScale.com](https://ScrumAtScale.com) web site which shows how scrum can work on larger programmes. Agile is a very broad term that covers many things, Extreme programming was the first codification of Agile practices iirc back in 2000. LEAN has been more popular recently and genuinely helps, a useful thing to know is Kanban which is a core practice in LEAN. DevOps is a big area too. "*The Phoenix Project*" is a novel but it will blow your mind and its easy to read. I'd give that a go for sure. It goes through the transition of a clusterfuck of a company to one that operates all its IT on LEAN practices. 
We want you to design an aaplication to make our business run better and be more profitable... foreach(var moron in peopleinthisroom) Resign(moron); 
Imo it worth to expand question with some details. Logging usually has 2 aspects - library and storage. Library is what you'd use to call logging methods in your code. Examples are : log4net, nlog, serilog, appinsights sdk,system.diagnostics.Trace and so on Storage is where you will log your data for later access. Depending on library it may be also called sinks destinations or targets (and other names) Basic example of logs storage is a simple file. if this is enough for you - everything would work. if you want some configuration and flexibility around your logging - libraries support different sinks, and some sinks may be better than others. Examples are AppInsights service ( one in azure portal), Prometheus (which lookks more like metrics storage, not logs), Elasticsearch, Raygun, SEQ server and so on. Often storage provided as a service and comes with nice search and dashboards so you can use it on office screens. Depending on your needs it's good to pick library that is up to date with modern sinks and frameworks. Serilog is a solid choice and gives you powerful semantic logging. Sinks/Storage - on your needs and budget. File or Traces are free, if you want fancier things- either host it or buy as a service. Suggest to take a look on SEQ- very .net friendly and free for personal use from the author of Serilog. You can switch sink later to some different one if you want, but it's harder to switch library.
bureaucracy and the pretense of agile
It's due for Autumn 2018. However he's actually already written all of the chapters covering the latest updates, including C# 7.3 and what's known about C# 8. If you look at the table of contents, you can see that the only chapters he hasn't yet written are the chapters covering C# 2, 3, 4 and the introduction!
Could you provide some code that you have tried? And what database are you using and application?
SQL server is the worst for me. I've probably installed it 50+ times but still always manage to do it wrong on a new pc 
The two forms need to share an instance of some class that will facilitate that.
I think you need to look at your philosophy of not using third party libraries. You can't hope to write an application and all of the peripheral behaviours in a manner better than that offered by existing third party libraries. https://en.m.wikipedia.org/wiki/Not_invented_here I'd suggest looking at NLog, Log4net or Serilog. If you *really* don't want to pull in a library then you can always just use Debug.WriteLine or Console.WriteLine.
Non-Mobile link: https://en.wikipedia.org/wiki/Not_invented_here *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^177397
There's always Debug.WriteLine and Debug.Trace https://support.microsoft.com/en-us/help/815788/how-to-trace-and-debug-in-visual-c And in .Net Core has the ILogger interface: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.1&amp;tabs=aspnetcore2x So no 3rd party stuff needed. You'll probably want to wrap those calls in your own interface + class so that you can easily replace them at some point in the future. 
Used to be a guy at my company who would put pseudo code in his support requests, he was just in sales (not even for the software) they were always a good laugh
Look [here](https://www.reddit.com/r/csharp/comments/8fy129/helppopulating_a_windows_form_application_with/)
Software engineering encompasses the entire lifecycle of the software. This includes design, implementation, test, and potentially even deployment. It includes understanding which SDLC model best fits the project, and applying that model to the project. Programming typically only refers to the actual implementation of the software. Design and testing is frequently minimized in programming; often programming is done with a code-and-fix SDLC model. Software engineering involves some programming, but programming does not have to involve software engineering. Software engineering usually involves coding for someone else, working in a team, on a large project that one individual cannot perform by themselves. Programming without software engineering is usually done when coding for oneself, working by oneself, on a small project of one's own scope.
I find most managers I meet usually thinks programmers are idiot savants.
[Stylecop](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) might be better suiting than ReSharper, and it is for sure less impactful on performance :)
&gt;* They are not using the Roslyn Compiler Platform, and instead stick to their own solution to parse and analyze source code. As a result your entire code is parsed and analyzed twice: Once by Roslyn, once by ReSharper. On every keystroke. What makes it worse is that they support Roslyn analysers in Rider, but there's nowhere near comparable performance impact.
It is good. I'm looking at migrating from log4net to serilog on a big project, but it's almost certainly not worth the effort right now annoyingly. 
I can't stress this enough: USE A THIRD PARTY LIBRARY FOR LOGGING! It's actually really hard to write a good logging library, although you can also employ an abstraction layer like LibLog or a home rolled one to make life a little easier. Seriously, just pick one and run with it. My experience has been Log4Net is old \(well it was new when I first picked it up\) and Serilog. Serilog is probably the one I'd point you at now before you've got a bunch of legacy crap relying on it and do look at how LibLog works to see how to avoid being tied to something for life.
I worked at a place once that had errors emailed to the developer mailing list. One time the master database fell over and the flood of error emails from the dozen app servers made it so I couldn’t even unlock my phone. 
Also Graphic Designers. Every "UX Expert" I've ever worked with has a Graphic Design background and has no idea what they're doing. Good user interface design is an engineering problem, let your engineers do it.
Except they don't provide any documentation on how to use ILogger yourself: https://github.com/aspnet/Docs/issues/6157
You can break it down into these steps: 1. Get the stream from the dialog 2. Convert the stream to a string 3. Use newtonsoft to deserialize the string into an object 4. Set your text box values based on the object values 
Looks like that's OP's other post. Idk why he has two accounts asking the same questions.
I'm not your dawg, amigo!
Great set of configuration options.
Where I work, I've seen senior developers go out of their way to be more nitpicky with reviews for someone who has irritated them. I only know that it was intentional because the senior devs told me so. Their review points were valid, but c'mon, let's not use code review as petty revenge. 
I think the sender in this case is the Repeater itself.
may as well add [https://www.reddit.com/r/AskProgramming/comments/8gb1i8/c_passing_a_list_of_objects_between_windows_forms/](this one) as well
Ok, I think I may have got to the bottom of this. I believe I need to somehow deserialize and convert the string to enum byte. The game itself uses enums all over for sending network messages, so while the text string is technically correct, its supposed to be the enum value of NpcType.Enemy, and same for the other ones. Raven just saves it as string in the db. So I need to then take that string of Enemy and match it up to its enum value counterpart of NpcType.Enemy.
&gt; Skeet's book is sublime. He makes it effortless. Albahari is more detailed Thanks, then I'll probably buy them soon. &gt; (no disrespect intended) And don't worry, I've come asking for help to start studying this Programming Language. &gt; Don't spend too long on tutorials, write some code, see what problems arise and go from there. And of course, I just want to see the potential of the language before putting a lot of effort, probably I'll make some GUI applications for DB management, in it. But of course, before any Hello World in GUI, I'd like to see some real CI code so that I can fully understand what's happening and why. Thanks and upvoted :)
Our corporate installation of McAfee has been such that until recently, it constantly ate up about 20-30% of a workstation's cpu. Add to that multiple instances of visual studio and maybe ssms, and eventually you feel some pain. We were manually killing processes multiple times a day. When we brought it up, we were told this was expected and acceptable behavior for McAfee. Finally, someone paid enough attention to a dev's machine to see how bad it was, and the installation was tweaked a bit. We also might be getting i7 boxes (i5 now), someday. 
&gt; I recommend you to check out pluralsight - when you register with windows for Visual Studio you get free 3 month subscription which is more than enough for an experienced programmer such as yourself to check all the features out :) They have everything labeled from begginer - intermediate - advanced so you can pick anything you want (like skipping basics) Have fun :) Edit: misspelled a word Thanks for your reply. I've heard and have looked with interest to Pluralsight but I never actually signed up because of the price even if I've heard it's very good, I didn't know about that free 3-month subscription so thank you very much, I'll see into it. 
Thanks, seeing the code is a good idea and I'll do it, do you have some preferred sources other than searching kinda randomly on GitHub? 
It's a good plan. Always remember that practical experience will teach you a lot more but tutorials will get you up and running quicker. You're always welcome, any questions you know where we are :) 
That would make sense, actually. I guess that leaves how I would cast the datasource, then. Maybe like this?: var repeater = sender as Repeater; IEnumerable&lt;object&gt; datasource = null; if (repeater != null) datasource = repeater.DataSource as IEnumerable&lt;object&gt;; 
Oh on my side, they are testing updates in production, change firewall rules manually then go to lunch, force us to use their ticket system (instead of talking to them directly) but their respond time is beyond a lifetime I appreciate most of IT guys, really they are great people... but their management and process suck so much, most of our team are moving all their product to external cloud based solutions. This means the IT department is losing projects (and soon their job too) at an amazing rate. This sucks for them, but I've never been so efficient in my career
Or write to a trace listener and connect that to a file stream. It also works well. That said, +1 for NLog. It's great, and doesn't bring along any crazy dependencies. 
For me, it is a lack of proper product/project management coupled with a fundemental lack of communication. I can't even begin to count how many features were sold by sales that didn't exist at the time. They get their commission, and I end up with a half baked user story and sleepless nights. 
How long would it take to X? Don't know - there's too many factors to be able to give an estimate that isn't complete fiction. Yeah, but like roughly how long?
Second this, Log4Net is great, simple to use, haven't had a problem with it causing an error back into the app (a must for a logger) and can easily have appenders to that go to other systems if you want.
I'm not sure what the end result would be, but I am assuming both forms are on the same page and you want the second form to reload with data from the first form on submit of first form? If that is the case, it is easy. First form posts the data and stores it in the database, the second gets that data from the database. On click of submit, make an ajax call to post the data. On success of that ajax callback, reload the elements in the second form with data from the DB using another ajax get request. You will have two action methods: One to accept the data and save it to the database and a second to retrieve the information you need from the database.
I don't know if speed is a big issue (or even an issue), but linkq2db is faster than ef. Maybe speed is not an issue for op, but linq2db is easier to use/configure than ef. But if op need things like change-tracking, then EF is the way. 
Yeah, they have appenders for rolling log files, writing to a table, or sending mail over smtp.
I haven't used logentries, I'm using serilog in combination with [seq logger](https://getseq.net/), which works pretty decent. Do you have any experience with seqlogger to compare the two? Or, what do you like about logentries?
A programmer is a code monkey implementing a spec that is fed to them, an engineer has some input into design too.
Small sidenote newtonsoft is no longer needed as of 4.5(?)..maybe wrong version. I still find newton easier to use and navigate, if one does not want to add a package for whatever reason, the core has it [built in now](https://www.c-sharpcorner.com/article/json-serialization-and-deserialization-in-c-sharp/). 
Nice heads up on that paste special! That'll save a lot of time in the future. Just to make you feel good, I managed to do it with your help, here's my end result, it does everything I needed it to perfectly. There is some fluff in there that wasn't brought up, but you get the idea public class Rootobject { public string PrimaryColorHexString { get; set; } public string PrimaryColorTintedHexString { get; set; } public string SecondaryColorHexString { get; set; } public string MainBackgroundColorHexString { get; set; } public string OffStateColorHexString { get; set; } public string ContentPanelColorHexString { get; set; } public string BackgroundTextColor { get; set; } public string ActionButtonTextColor { get; set; } public string MainLogoDesktopImageUrl { get; set; } public string MainLogoMobileImageUrl { get; set; } } private void LoadButton_Click(object sender, EventArgs e) { { OpenFileDialog opf = new OpenFileDialog(); opf.InitialDirectory = BrandsDirectoryBox.Text; // chose the images type opf.Filter = "Choose Brand File(*.json)|*.json"; if (opf.ShowDialog() == DialogResult.OK) { // read file and put into stream string sFileName = System.IO.File.ReadAllText(opf.FileName); byte[] byteArray = Encoding.ASCII.GetBytes(sFileName); MemoryStream stream = new MemoryStream(byteArray); // convert stream to string StreamReader reader = new StreamReader(stream); string text = reader.ReadToEnd(); // deserialize Rootobject Items = JsonConvert.DeserializeObject&lt;Rootobject&gt;(text); //write PrimaryColourBox.Text = (Items.PrimaryColorHexString); LoginButtonBox.Text = (Items.ActionButtonTextColor); BackgroundTextBox.Text = (Items.MainBackgroundColorHexString); TopPanelBox.Text = (Items.ContentPanelColorHexString); BackgroundBox.Text = (Items.BackgroundTextColor); PrimaryColourTintBox.Text = (Items.PrimaryColorTintedHexString); SecondaryColourBox.Text = (Items.SecondaryColorHexString); OffStateColourBox.Text = (Items.OffStateColorHexString); //convert main image from base 64 string base64String = (Items.MainLogoDesktopImageUrl); Bitmap bmpReturn = null; byte[] byteBuffer = Convert.FromBase64String(base64String); MemoryStream memoryStream = new MemoryStream(byteBuffer); memoryStream.Position = 0; bmpReturn = (Bitmap)Bitmap.FromStream(memoryStream); memoryStream.Close(); memoryStream = null; byteBuffer = null; DesktopLogoButton.BackgroundImage = bmpReturn; DesktopLogoButton.BackgroundImageLayout = ImageLayout.Zoom; //convert mobile image from base 64 string mbase64String = (Items.MainLogoMobileImageUrl); Bitmap mbmpReturn = null; byte[] mbyteBuffer = Convert.FromBase64String(mbase64String); MemoryStream mmemoryStream = new MemoryStream(mbyteBuffer); mmemoryStream.Position = 0; mbmpReturn = (Bitmap)Bitmap.FromStream(mmemoryStream); mmemoryStream.Close(); mmemoryStream = null; mbyteBuffer = null; MobileLogoButton.BackgroundImage = mbmpReturn; MobileLogoButton.BackgroundImageLayout = ImageLayout.Zoom; } } }
It depends on the size of the thread pool. Thread pool is supposed to be used for short-lived operations, and you're supposed to create new threads for long-running things. Thread pool should be faster for your short-lived stuff because the threads already exist, but if you utilize it a lot, then it may not create new threads as quickly as you would like it to. In this case, you need to tune the thread pool to behave better for you use case.
 &gt; there are zero cases in the code we write where it would be of value to us. public class ClientViewModel { public DateTime LastOrderDate {get;set;} public bool IsAccountPastDue {get;set;} public string AccountManagerName {get; set;} public ClientViewModel(IOrdersService ordersService, IPaymentService paymentService, IAccountManagerService accountManagerService) { // Responsibility of ClientViewModel is to retreive and assemble data from supplied services. // Each services exposes async methods // Properties are used for binding for UI. } } In real code ClientViewModel is injected into the view. Just for illustration for this post I will new it up: ClientViewModel vm = new ClientViewModel(... services...); // vm is useless. It is not constructed. Our constructor is lying. string accountManagerName = vm.AccountManagerName; // Bad code. vm is not constructed. await vm.Initalize(); // NOW we construct the class. For reasons unknown this extra, additional step is somehow better. &gt; The convention is literally that ctors are not slow or potentially error prone. Making them async does imply that they will be slow otherwise why take the time to give it the opportunity to potentially make a context switch to a different thread? Why is vm.Initalize() NOT a constructor? Just because the compiler does not treat it as a constructor makes no difference whatsoever to the guy who goes to get the AccountManagerName and gets null. In the name of "convention" we have created an opportunity to create and use unconstructed objects in our code. Furthermore we have obligated all consumers of objects we create to check if the object depends on an additional method call (such as Initalize()) for its construction. What benefits do we gain from making these concessions? What value is added? These are fair questions! &gt; Why not inject a singleton factory or repository into the ctor of the host class that is currently creating a new foo? Because we are only kicking the async can farther down the road. Remember that we still have to await construction: public class ClientView { public ClientView(ClientViewModel vm) { // where do we await vm.Initialize()? // In addition to having an unconstructed ViewModel we also now have an unconstructed view. } public ClientView(ClientViewModelFactory factory) { ClientViewModel vm = factory.Create(); // where do we await vm.Initialize()? } } 
Does the built in one properly handle DateTimes?
This may work - I guess it's possible you still get an obj ref not set error when trying to resolve repeater.DataSource, so you may want to wrap that in a null check as well. Good luck - reconstructing a project from old assemblies for which you don't have source sounds ... well ... it just sounds awful. Good thing it wasn't obfuscated I suppose.
It's cool to see you come back and post your solution. Nice job.