If compared to C++, C# is extremely type-safe. In terms of polymorphism it is less powerful than C++. It obviously lacks template support, but does support generics. Multiple inheritance is only supported through interfaces and one implementation, which can be a drawback, though most C++ guys will call it an anti-pattern anyway. Compared to Java which has roughly the same feature set, C# is much more elegant and thought out.
Pass Microsoft 70-412 exam easily by learning with Dumpspdf 70-412 study material. Dumpspdf now are offering the newest 70-412 exam dumps without any cost. Dumpspdf also provide 24/7 live chat with MS certification experts so if you are facing any problem during study you can message your experts any time round the clock. Keep visiting and stay updated about Microsoft certification. http://www.dumpspdf.com/70-412.html
Purchase
If a developer was simply browsing through demo's to see if the library could support what they wanted, then they might load up this demo, see the incorrect time, and assume the time implementation of the library is incorrect - And if they can't get the current time right - Why should you think that they could get anything else correct? This single demo could make many developers gloss over the engine in its entirety :p
Awesome project OP! That [collection of extension methods](https://github.com/Tyrrrz/Extensions/) is really neat too! Good work. Thanks for sharing.
I'm very impressed. I will definitley be making use of this. Actually tried using Youtube-dl on Windows earlier but couldn't get it to work right appearntly it only works well on *nix. This is literally perfect for me.
I'm just an lob-application dev whishing he could do stuff like that, so I wont. I was just browsing after seeing this question: https://www.reddit.com/r/csharp/comments/5wu83t/a_question_for_c_devs_and_more_specifically_cgame/ &gt; I'd probably just do it in pure C now. Why? Bit off-topic maybe, so feel free to answer in /u/bushido95's thread (or nowhere :).
I think you're over thinking things just a little... 
It's also pretty good at developing web applications. However, like Java, you generally see C# used in large scale ("enterprise") web development.
Are you trying to have this work outside the context of a window?
yeah
The only thing the ?? operator does behind the sheets is being compiled into a null check and assignment (or foo.HasValue if the argument is an explicit nullable type)
Why run it in a seperate thread? static Stopwatch watch = new Stopwatch(); static long lastTime = 0; public static void MouseEvent() { if (GetKeyState(0x01) &lt; 0 &amp;&amp; watch.ElapsedMilliseconds &gt; 130) //Trigger only every 130 ms { watch.Reset(); mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0); } }
No you don't. Compiling and linking, as it were, are combined in C# so you: 1. Reference assemblies (equivalent to referencing libraries when linking C or C++). 2. Type "using Some.Namespace;" in your code, which is nothing but a shorthand for not having to type the full names. Compile time is aware of all assembly references directly.
thanks &lt;3
Let's see
&gt; serendipitous TIL. What a beautiful (and useful) word.
Going to be completely honest here; This extremely basic concept can be explained significantly simpler than your bumbling around for fifteen minutes. Wanting to make tutorials is fine, but I honestly don't think this'll help anyone. Spending a third of the tutorial hunting down a trivial little error is a waste of everyone's time.
Thanks, that's interesting!
Would love NuGet support for Roslyn mode too. That would be insanely great.
That is awesome. Definitely some useful new features coming :D
Double click the button (on Visual Studio) and it should link an action to that button. Then you can write your code in that function. Do the same for all the buttons. You could make a single function and call it from all those click functions where everything will be handled.
Can't post it, but I'm making a math equation processor. Almost done done teaching it basic maths then the fun begins! I'm new!
We did, in fact. He preferred his way of doing things, which is fine.
Its the best for windows development which is the most widely used (desktop) OS. Also, even if its not the best at any single category its full stack and covers all your bases (again assuming windows side dev). For companies this means if all the programmers know C# they can pretty much do anything. If everyone only knows PHP and you need to make a website, windows service, mobile app, desktop app then you have a lot of learning to do. Yes its multi platform but I'm not convinced that is a huge selling point.
If you're trying to do what I think you are, then the key search words are: c# global mouse hook. There should be plenty of sample code available.
I can do that. 
Sure, but I was referring to your library, not in general. :-)
 :3 who're you really trying to attract with that... think about your target audience man.
If I do this again, there will be an optimised C core, with integrated runtimes on top, so that languages such as JavaScript, C# or Python can be used for gluing stuff together.
When would you use a tuple in place of a simple struct/class (e.g. Point, Size, etc)? Also, are functions inside methods simply syntactic sugar for `var MyFunction = (a) =&gt; { };`?
Nested functions don't allocate closure objects as far as I know, whereas your example does allocate.
This is a C# library intended to access Service-now data. The key features, is mostly everything is strongly typed, including tables, choices, etc... It allows a linq/entity like interface to query, insert, and delete data from your ServiceNow instance. I utilize this library in production for the purpose of automation a lot of my work. If you have feedback, please share.
It stands for Reverse Polish notation, but since you aren't dealing with a large string break down then it won't be that helpful. (I read your other comments). It's already been suggested but what I would do is, is have your number "permanently" stored in a local variable once an operator is selected. No need to go from string to int, go int to string when it comes to the display. Once the enter button is pressed you could easily just store that value then use a switch or a dictionary to match whatever operator was selected and evaluate the two inputs.
Hello everyone! I just wanted to share my main hobby project with you. I am working on this tool since 2012. Back then I mainly used Gyazo, but I hated those nasty ads (and I had to pay, to manage my images). So I created a one-file-script in Python and BAAAM the whole thing evolved into this in the following years.
How are you obtaining somenamespace.anothernamespace? You can't pass a string into nameof(...) so, aren't you explicitly providing the namespace at that time? why not string namespace="somenamespace.anothernamespace"? Also... what do you mean by trying to appropriately get the name of a namespace? Get the name of a namespace from where? An assembly doesn't in it's self have a namespace... **UsuallY** every class in an assembly share a root namespace, but it isn't required... When you create a new project you might be presented with a file that looks something like... using System; using &lt;otherstuff&gt; namespace MyProject { class Program { static void Main(String[] args); } } But it is equally valid to write something like using System; using &lt;otherstuff&gt; namespaec Some.Random.Namespace { public class MyClass{} } namespace MyProject { class Program { static void Main(String[] args) { Some.Random.Namespace.MyClass mC=new Some.Random.Namespace.MyClass(); } } } So... the namespace of an assembly doesn't make sense. A specific type is contained within a namespace... if you have a type (or even just an object of that type) you can access the types namespace Some.Name.Space.MyClass mClass = new Some.Name.Space.MyClass(); Console.WriteLine("nameof(mClass): {0}", nameof(mClass)); Console.WriteLine("mClass.GetType().Name: {0}", mClass.GetType().Name); Console.WriteLine("mClass.GetType().Namespace: {0}", mClass.GetType().Namespace); Console.WriteLine("mClass.GetType().FullName: {0}", mClass.GetType().FullName); outputs nameof(mClass): mClass mClass.GetTy().Name: MyClass mClass.GetType().Namespace: Some.Name.Space mClass.GetType().FullName: Some.Name.Space.MyClass --EDIT-- If you have an assembly A, containing a Type T that you are trying to instantiate into Object O from Executing Assembly eA where eA does not reference A and without any information from Assembly A being hardcoded into eA is to provide the fully qualified namespace. Anything else is a short-cut that could fail... For example, if you had Namespace Namespace1{ class AClass(){} } Namespace Namespace2{ class AClass(){} } how would you know if it was refering to AClass in Namespace1 or Namespace2 without providing Namespace1 or Namespace2? You mention in a post lower a switch stement on a signature... a type doesn't have a signiture... so I don't know what you mean by that. A method or function has a signiture, but you need the type to already be instantiated and they would be unique at that point so you'd be able to iterate the methods on the object looking for the correct signiture.... If by signature you mean the 4 character code then a switch statement would work... but a better way might be a dictionary from string-&gt;Typename but that limits your application to only handling the types of records known about at compile time so... why use reflection? --EDIT 2-- I suppose you could provide a mechanism for dynamically loaded assemblies to register their own four character signatures-&gt;typename mappings but still I think it is a lot of trouble to prevent typing a fully qualified namespace. 
Local functions can use yield, which is not available to Funcs/lambdas. Anonymous tuples offer a clean replacement for patterns that use out parameters, like TryParse without requiring the ceremony of a named type.
Depending on how good you are with it, anything. Most of the problems I've heard people complain about re C# exist between chair and keyboard, as they say.
Which part does it fail on? Seems to work fine for me.
The 1980's called, they wanted your attitude back.
Ahh this is interesting. I think there are some async issues somewhere. I opened the solution again and ran `DownloadVideoAsync_UnsignedUnrestricted_Test` and it passed. Then I ran the entire test file but this time `GetVideoInfoAsync_SignedUnrestrictedAdaptive_Test` failed. With this exception:- Test method YoutubeExplode.Tests.YoutubeClientIntegrationTests.GetVideoInfoAsync_SignedUnrestrictedAdaptive_Test threw exception: System.Exception: Could not obtain headers (HEAD request failed) at YoutubeExplode.YoutubeClient.&lt;GetFileSizeAsync&gt;d__8.MoveNext() in C:\Users\SikhGamer\Desktop\YoutubeExplode-master\YoutubeExplode\YoutubeClient.cs:line 202 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at YoutubeExplode.YoutubeClient.&lt;GetVideoInfoAsync&gt;d__6.MoveNext() in C:\Users\SikhGamer\Desktop\YoutubeExplode-master\YoutubeExplode\YoutubeClient.cs:line 163 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at YoutubeExplode.Tests.YoutubeClientIntegrationTests.&lt;GetVideoInfoAsync_SignedUnrestrictedAdaptive_Test&gt;d__4.MoveNext() in C:\Users\SikhGamer\Desktop\YoutubeExplode-master\YoutubeExplodeTests\YoutubeClientIntegrationTests.cs:line 62 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
Nah, looks like it can't get headers, which probably means it didn't decipher the signature correctly. What version are you testing (commit hash)? I made an update like 5 hours ago that was supposed to fix this issue.
 {"An error occurred while sending the request."} {"A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond 74.125.160.7:443"}
[removed]
I had one "awesome" every 5-10 lines. Verrrrrrry nice.
Good at: Windows Desktop, Windows Services, Web Development, Game Development, Cross Platform Apps, Enterprise Frameworks. It's used everywhere. However if you want to make money with Apps, you can't just release for Windows10 (yet). Drivers and kernels should be written with a lower level language. 
I don't think that big companies are uisng it so it's going to be good for him too. You have the background in c# which is good for you. But to use xamarin you still need to understand the platform and also if possible how does mono framework actually work in synching with Android and iOS. I would suggest start with xamarin.android or xamarin.ios learn the platform specifics and then get on to the forms and other aspect of xamarin.
It's been a joy to use for my latest project in school. Only hiccup is support for .net core project references on Visual Studio for Mac having inconsistent behavior compared to Visual Studio on Windows.
Oh boy I can't wait to use Optional type in C# 8!
It works well. If you are feeling adventurous I'd recommend just diving in and writing Swift in XCode. Very simple to understand language, and it's always good to learn new things. (also it's free)
https://github.com/nreco/data high-performance DAL for .NET Core projects (and .NET Framework 4.5+ too), like Dapper but better :) Features: abstract (db-independent) dynamic queries, SQL commands generator, customizable POCO mapping (micro-ORM), RecordSet model for schema-less data access, relex expressions parser and many others. Library can be used in addition to EntityFramework. 
Are you conflating Xamarin with Xamarin.Forms? I do cross-platform app development with Xamarin and build the UIs for each platform more or less individually (though I roll my own subclasses that expose the same API for stuff like generic listviews if the amount of reuse warrants it). It compiles to native code and has 1:1 API coverage, so there is no appreciable difference between an app done in Xcode versus one done with Xamarin. I find the JS offerings have too brittle a toolchain. I've inherited projects originally done with Cordova and they are a pain in the ass to get up and running (not to mention that they behave like glorified webviews, but I've heard good things about the performance of React native).
Cordova has woeful performance for anything beyond the simplest of apps - the UX simply isn't in the same league as Xamarin/Native frameworks. If the OP really wants to use Javascript (personally I'd rather cut my arms off), I'd be much more inclined to go down the React Native route. As the other poster pointed out, you're confusing Xamarin with Xamarin Forms. XF is essentially an additional abstration layer for Xamarin that provides shared UI. 
You're not going to convince them with arguments, and if they're your boss you can't force them to change their ways. Find a new job. Also, this has nothing to do with C#.
He is a C# developer frustrated by the kind of legacy code and organizational issues that .NET developers commonly have to deal with. Its tangential, but I'd say its related. -edit- Everyone here is telling you to look for a new job...depending on your situation that might be easier, but if interacting with this ASP app is only a small part of your job then maybe you can deal with it in other ways. You mention he is your "Boss"...is he your lead developer, or your manager? The distinction might matter here. If he is your lead developer, then definitely take this issue up with your manager under the guise of asking for his/her advice. If he is both your lead in development AND your manager, then your're kind of fucked in that position. Going over his head in that case might be a bad idea.
Incompetent programmers are very touchy about their code as they can't handle it if you take it out of their comfort zone. The only way you're going to be happy is to find a job where your competency is appreciated. People like your boss will see you as a threat and move to get rid of you because of your potential to expose their incompetence. 
So one tactic here that has had success before for me. Instead of calling the code terrible or legacy (which puts people on the defensive) build a proof of concept replacement in c# with what ever spare time you have. Have it cover as many of the features that the legacy code has. When presenting it to you manager, mention It's a grass roots effort to modernize the application and explain how it will speed up developer productivity. If that fails, then you should leave. Any company that doesn't appreciate efforts to modernize a system means you will be trapped in legacy forever. Tldr: Sell the value of a replacement, don't call code that they might have spent their whole life building and "perfecting" ugly. 
[I'll allow it.](http://i.imgur.com/dVDJiez.gif)
This is why I use trackballs.
It's an older more procedural format, and sounds like he doesn't understand what makes OOP beneficial in modern development. I would try to make examples, presentations about why OOP got developed and the problems it fixes. When you can build a 30 minute showcase... it'll be a stronger and more technical base of knowledge speaking. Avoid making yourself out to be a trouble maker, but do highlight how to improve production speed and quality. List problem areas and ways it can get better. A running log or example showcase of real work might help. How hard is it to read that while loop and understand it? How many if statements until you find your specific area to fix/change? Do you run into "problems" because small changes in one area cause bugs somewhere else?
Difficult situation. One realistic hope would be that you can find your own niche in that company. Someday, when a new project opens up and you get the chance, take the front seat, give it your best shot, and you might end up maintaining that project from then on. It's always annoying having to deal with legacy code, but at some point, there are chances to create your own legacy. Just don't lose motivation until you get to that point. If your bosses think you're not motivated they are likely to assign upcoming exciting projects to someone else. Arguing with that guy and putting him in his place is not going to help.
The massive if statements and for loops are certainly an issue, but he is on to something about making methods you only call once. There's mention of this in Code Complete. Basically, if the one-time use method is short, and the method calling it is under a couple hundred lines of code, it's easier to understand and maintain when you don't make a separate method. Also, read Code Complete. It gave me an entirely different approach to handling our legacy codebase
You see, the reason I am at this company is because I did something for them when my son worked here. he showed me his job, I wrote a tool to automate his job they loved it. They asked me what I can do, I said I am an automation expert, vbScript SME, and an odd thinker. they hired me on the spot. I have done a lot for this place, they know my value, but its been stressful lately with some large customer deadlines approaching. I was trying to do somethign the right way, they wanted it done the fast way.. I understand, but hey, its not my goat to fuck, im just holding the legs.
So, it's a more simplified version of [ShareX](https://github.com/ShareX/ShareX)?
I actually started something, I wrote a class in VBS, a utility that will search and replace certain code in over 100,000 asp pages to instead of using a session variable, move them to a new class that will store them in a database, THEN, I also wrote that same class in PHP, so now an asp page and a php page can share the same session data. This is going to allow me to move to a supported language that does not lock us to 1 system arch. lots of linux/mac folk in here. I am going to present this soon (once its fully tested)
yeah, I know it has nothing to do with c#, but I have gotten a bit of help from members in this sub, so I came here first.. sorry. 
Yes, it is like a little brother of ShareX. Cross platform, with less functionality, but with a simpler user interface. Currently only Windows and Linux are supported, because I do not a have a Mac - but I am planning to work on a virtual machine.
Methods should do one thing and do it well. If that means breaking up a large method into several smaller ones that are only used once then so be it
Do you guys already have php in your stack?
If you want to do do things differently, make a business case for it. How much time and money needs to be invested in redoing everything and training other developers to do things to the new way? How much time saving and cost saving does this bring in? What does switching paradigm mean in turns to profitability or customer turnover? Software in a business environment is different than software in an academic, start up, or personal environment. If you want to change things, make a business case for it.
Very. Mainly for processes that are not supported by ASP, like Cloud stuff.
They might have made Android apps which requires a mono runtime. 
I don't think its unreasonable for your management to tell you to code your fix/enhancement in a style/architecture matching the rest of the legacy application. You want to rewrite the app (on their dime, of course), they said no, they're fine with its performance and its out-dated/untrendy state. You're unhappy about this, so of course you're also unhappy about coding your fix in an out-dated style. To them its a simple request. To you, its some sort of transgression you need to vent on Reddit. I'm trying to figure out how someone who's been coding (professionally) for twenty years only now encounters this type of constraint. The nerve of someone telling me how to code! I know better! (Is it payday yet?)
At the end of the day the employer is the one paying you to do what they want. While there is nothing wrong with offering an alternative, once your superior says no you should do it the way they want as that is what you arer being paid to do. If everyone decided to quit their job over a disagreement about the right way to do something then most people would be unemployed. 
And Xamarin Forms is fine as well if you know what you are doing. Yes, out of the box offers a bunch of common controls but nothing prevents you to customize them for each platform. It has its share of issues but customization isn't one of them. 
Xamarin is great for mobile platform development. If you are doing cross platform development it can let you share a LOT of code. Plus it has all .net benefits. The downsides are a bigger deployment size and dual GC (.net and native). 
F12... Visual Studio... you're preaching it right. HOWEVER.... he is a mac user. and I am the only .NET Dev here, I have even recommended we just switch to a supported language like php, again, something more OO. But I do realize, he pays my hefty paycheck. so I get to code like a kid in high school for 6 figures... ok, sure thing, can I bring my skateboard to work?
Yes, this is because you currently don't understand generics. It is basically saying I am giving you a request (`TRequest`), and it is in the shape of `UserDto` and I expect a response (`TResponse`) in the shape of `UserDto`. Removing generics it would look something like this:- `UserDto userResponse = requester.Post(requester.MakeApplicationRequest(user, "/api/user"));`
Off the top of my head, beyond ticking off the basic "Optimize Code" checkbox in the project properties, I'm not too sure. With regards to `sizeof`, I think for the predefined built-in types, it just puts the equivalent constant in: https://msdn.microsoft.com/en-us/library/eahchzkf.aspx If you do run `sizeof` on a custom struct in an unsafe block, the `sizeof` IL instruction persists. But yeah, other than that, I'm not sure if you can disable them. Best I can think of is tricking the compiler to not do that. For example, changing `Console.WriteLine(25+25)` to: int x = 25; Console.WriteLine(x + x); Should go through the motions of loading `25` on to the stack twice and issuing an `add` IL instruction. EDIT: Another option might be to write your own IL from scratch. There are a few resources and utilities out there that let you do this.
An actual display server/compositor in C# on Linux that works on both Dotnet Core and Mono, I got all of the pieces together and it worked although it's still in progress. The most difficult part is working with OpenGL programming which isn't ideal for 2D rendering and that I have to write a raw binding for it too. The purpose of this project is to provide an alternative to X11 and Wayland protocols and platform with an easier and comprehensive protocol/library to use for any level of developers to make any GUI program, GUI Toolkit, or even a new compositor and it comes with a comprehensive documentation. All in all, I opened a very nasty jar of worms and had to deal with tons of undocumented codes regarding Compositor/Display Server development and finally got it all to work in C# without needing to create a helper/wrapper library in C. We might see the first release on Summer along with the project going open source. That's my side project at the moment, my main project is writing blog to explain C/C# P/Invoke and some of the extreme corner cases with it.
"This is the right way to do it" is not something that will convince a boss -- *nor should it*. I'm not defending your boss here, so much as giving you a hopefully productive way to address the situation. Coders tend to be obsessed with perfecting their craft, which is of course a good thing. Since technology changes rapidly, this means a constant desire to reinvent the wheel. A relatively contemporary c# example might be: arrays and FOR loops? Not the right way, we should be using collections and lambdas! Parameterized stored procedures and T-SQL? Not the right way, we should be using Entity Framework! As a boss, you inevitably care less about the new sexiness in coding and more about practical matters such as shipping applications on time and having them work reliably and performantly. Changing shit up constantly tends to work against all of those goals. So bosses tend to be conservative: *no, coder, the arrays are fine. I don't care about what you read on those blogs, the arrays do their thing and we know they do it well. Leave the arrays alone.* And even if there is some objective reason why the new way is better, you have to weigh that against the costs and risks of change. Now of course, the examples I gave are (I think) pretty reasonable. It's not crazy to use arrays or stored procedures and there's legitimate reasons to prefer these approaches. ASP.OLD in 2017, with 1200-line FOR loops... that is simply batshit crazy. But in either case, the way you go about convincing your boss is the same: talk to what they care about, which is costs and risks. If you can show your boss -- ideally with a tidy refactor of a particularly nasty bit of current code that drives them and everyone crazy -- that you can achieve the same functionality with vastly less effort and risk, you have a good chance of making your point. What you want to do, essentially, is establish a business case for change instead of a technical or best-practice one. 
I don't think it's enough to rule out that he doesn't fit in 'corp culture' based off one interaction with a boss giving bad programming directions.
I worked for a guy who was a Harvard graduate and vocal member of Mensa. He used to have hundreds of lines of code between if...else blocks. He would also copy and paste the same SQL statement with hard coded parameters instead of using @parms. I left after 4 months working for him.
That's not "removing generics", that's leaving out the explicit type parameters for a generic method call, which can be done if the compiler can infer the types from the context. It can't be done for generic types.
Yeah, but it doesn't work with strings
Sure it does.
mmm I feel super dumb now, I'll look more into that, thanks
The other common recommendation is to organise your code into a class hierarchy and just use the regular run-time dispatch mechanism built into C# (and most other OO languages.) This is sometimes referred to as replacing conditionals with polymorphism. 1. [Stack overflow question on replacing switch with inheritance](http://stackoverflow.com/questions/1404882/how-inheritance-replace-the-switch-case) 2. [Common refactoring technique - replace conditional with polymorphism](https://sourcemaking.com/refactoring/replace-conditional-with-polymorphism) 
Awesome. Thanks! If you don't mind me asking, is this a "finished" project (as in, it meets your needs, so there won't be much development on it) or do you plan on working on it in the future?
Hey there. Like many others, I'm about to tell you to move on, but maybe for a different reason (apologies if this has already been said or implied). Yes, you should look for a place that uses good tech and good practices. But, more importantly, being around bad code makes it easier for you to become a bad coder. The whole "this whole code base is shit, one more line of code that I'm not 100% satisfied with isn't the end of the world" trap is easy to fall into, and after a while pretty hard to climb out of. Be around people and software that pushes you to be a better dev. 
what about if the function is calling a DB or file system? 
Are you looking for a specific case? Because generally, if you encounter the need to a large if-else statement, it is a good idea to take a step back and see how you ended up in that situation. A switch is a good alternative, but not even needing it is even better. Especially if you find yourself switching over the same cases more than once, it is probably better to e.g. have a factory to have different classes. So instead of repeated "if (animal == dog), elseif (animal = cat)", you would just have either a dog or a cat that each have their own methods.
Get them to attend a tech conference. Preferably a craftsmanship conference, but really the more they hear and see other people saying theses practices are bad the quicker they will be convinced. tl;dr: opinions aren't shaped by a logical argument, it's the number of other people presenting it. 
That's not an obfuscation at all, not even close.
https://github.com/smatsson/tusdotnet - https://www.nuget.org/packages/tusdotnet/ A server side implementation of the tus.io protocol for resumable file uploads. It gives you the ability to resume a file upload if your connection to the server dies. It does this through streaming which allows for minimal re-sending of data. Currently we are working on a .NET Core version that should be release soon. :) 
Do not store the password for a database on the client machine. You need to use Web API or something and call your DB through that.
This so many times. Often you can refactor your architecture into a baseclass or interface, and a strategy pattern implementing the particular functionality you're switching on. Makes for really clean and easy to maintain code
The Strategy pattern is by far one of the most universally useful (non-fundamental) patterns
It's a damn shame that this isn't the top answer. Edit: I retract my statement.
No programmer never refer to the internet. Every programmer looks at websites (like stuckoverflow) when they get stuck. Even skilled programmer, too.
Don't feel dumb! Keep making mistakes, keep being wrong, and keep learning!
my bad. I mean I need this: https://github.com/dotnet/roslyn/issues/5032
Why do you want your code to look inefficient or is that just an unfortunate sentence structure? If the former, check out goto statements. If the latter, check out switch/case statements. 
This is awesome!
English is not my first language, thanks for the suggestions!
So you create an interface and then different concrete classes for each different case?
I said: &gt; If you don't like something just make a good argument as to why you shouldn't do it and suggest an alternative. If your boss doesn't agree with you then just swallow it and do it the way he wants it. If you don't do that then they can fire you and can enjoy the unemployment line. And after you are fired it will be done the way they want it anyway so holding grudges or forcing the issue is really pointless. 
If you are going to be pedantic, then you don't know that I didn't remove the generics from the called method.
I figured It be easier to apply rules in config if they are POCO types rather than strings. 
I don't get the string vs. POCO choice here. Just to be sure, you are aware that JSON.NET can deserialize JSON without a strongly typed class model (i.e. into `JObject`, `JArray` etc.), yes? 
Part of the reason for the C/C++/Rust better performance is they rely on pre-compilation. .Net with its JIT suffers there. Same with the .Net GC. CoreRT will fix some of that playing field by pre-compiling .Net Core apps. That just leaves the GC...
Don't try to fight him on it. Even if you win, you lose. What you can do is implement whatever better designs you can, that he doesn't actually outright refuse and let him learn through osmosis. It will happen. Might be agonizing for a while. Don't fight him, let the work do it for you. He sounds like he's from the school of monolithic code. Could be worse. He could be a block and copy programmer. That's the kind that writes a dozen methods all virtually the same rather than passing in parameters to a single one. Of course, alternatively you can try to shift out from under him, or to another company. 
Learn how to use the tertiary operator. Instead of If (x==1) { z = 0; } else { z = 2; } Use z = (x==1)?0:2; Obviously not good for all if blocks, but short ones it's great. Try to eliminate the if statements entirely first. Lots of programmers add way more if statements than necessary. More often than not, I end up maintaining someone else's code, and start simplifying the if blocks only to discover I can either switch them to tertiary statements, eliminate them entirely, or covert the block to a method with arguments. In fact last week I was able to eliminate 90% of one rather large method into under 10 lines. I could have shrunk it further by moving some of the formatting statements to the get;set; method. 
That's the full list right there. What makes you think it isn't?
My 2 cents... it sounds like your architect (those jerks, I am one) is interested in making sure your rules engine data isn't tied to a strongly typed object for the fear that doing so would require you to make code changes each time you introduce a new rule or data. That idea doesn't necessarily exclude the use of POCO objects, those POCO objects just need to be designed so that they are versatile for any data type. For example (not a very good example, I'll admit): public class Contact { public string Name { get; set; } public string PhoneNumber { get; set; } } vs public class RuleInputs { public IList&lt;Input&gt; Inputs { get; set; } } public class Input { public string Type { get; set; } public string Value { get; set; } } RuleInputs.Add(new Input { Type = "Name", Value = "Jane" }); RuleInputs.Add(new Input { Type = "PhoneNumber", Value = "555-555-5555" }); The first example has a POCO that is tightly coupled to a specific data, the second is versatile for holding lots of different data points. The first would require new deployments and code changes every time you want to add new data points, the second does not. P.S. What you will end up with in the end is basically what you can get by just using XSLTs. Don't tell your architect, but you could just transform the JSON into XML internally and then run it against the XML rules (XSLT) to get the results. 
Compilers are meant to be efficient, even with optimizations turned off, the compiler will perform optimizations and simple math operations on integer constants. If you want to preserve these obfuscations, you need to either: * Do a post-compilation pass on the emitted binaries (this is what the vast majority of obfuscation programs do) * Modify the compiler to preserve (and possibly emit) these additional obfuscations
While that would be a huge improvement, I'm not going to hold my breath.
Because 'id' and 'size' are not on that list, and I'm retrieving both.
Check the actual API reference here - the link you posted is just possible search parameters. https://developers.google.com/drive/v3/reference/files
It's a relative question, I've been using c# for almost 2 years and I don't believe I'm even close. But then I'm old, I self learn, and probably much stupider than you. See what I mean?
Depends on what your background is. I started my current job, to do C# programming, with zero experience in C#. I had some experience in C++ and Java in the past though, so I was able to come up to speed fairly quickly. If you have experience with object oriented programming, you should be fine spending a day or two learning the syntax of C# and be competent enough to be employed. If you have never programmed before, then maybe 6 months to a year? Just from reading your post, (more specifically: "make a software") I'm guessing don't have any past experience in programming. You just need to make it clear to your employer that you are not an expert.
https://www.reddit.com/r/programming/comments/5xlmc6/a_new_hobby_os_from_scratch_in_c/ https://www.reddit.com/r/csharp/comments/5xmdvn/a_new_hobby_os_from_scratch_in_c_rprogramming/
A new "hobby" OS from scratch in C# would be more accurate, this thing is really awesome. You should give credit to the creator: /u/amaneureka.
Bingo! Cannot believe I could not find that, Thank you very gladly.
&gt;It's like writing. Most 3rd graders can write. They are not ready to be authors. Love this.
I've been programming c# for about 13 years and I learn new practices and better ways of coding each day! Best thing about being a programmer IMO. 
Assuming you're a quick study. If you've got solid experience in a similar language (Java or C++), and you're willing to put in the time a couple weeks to a month. No one should care. Experience in a language with different characteristics(dynamic or no build chain), or more limited experience) somewhere in the range of a month or two. You might be annoying. If you've got zero dev experience, a year or maybe more with a lot of help. Your colleagues will hate you. If you're a slow learner double or triple these times, and remember this isn't to "I won't make massive fuck ups" it's to your colleagues stop wanting you gone. One of the nice things about .NET, at least on Windows is that Visual Studio handles a lot of the boilerplate so you can focus on getting the code done so the learning curve is a little less steep. You're still going to have to work your ass off though, and it'd help to have someone to show you the .NET specific stuff. Your problem is that since you're getting the job through abnormal channels you can basically double how much your colleagues hate you.
If you're an experienced Java programmer, it will be pretty trivial. I switched my Java team to C#, and we were writing code in a couple days, doing pretty well in a couple weeks. Really I think Visual Studio itself was a bigger learning curve to us than the language itself. If you have no Java experience but you know C syntax and you have experience with an object oriented language, I'd guess a month or two. If you have no experience in object oriented programming but you have worked in another programming language, I'd expect it to take more like 6 months to really wrap your brain around it. If you have no professional programming experience, you shouldn't be trying to get beyond an entry level job writing code, and if I were you I wouldn't assume that I'd necessarily be ever able to get good at it - some people have an aptitude for programming, some don't. 
That kind of shit never stays secret. A guy comes on when no interviews were done or who clearly wasn't the best candidate and he knows the owner. It's not a hard thing to work out. Especially if he's woefully unqualified. Folks who match option 3 are only ever internal or out of band hires. OP didn't say the usual "I know X" that comes with this question, so I'm guessing best case scenario he's a recent grad from a less than stellar program. Even code boot camp people usually think they know something and post it.
I'd love to see that project when you're done. Thinking of adding a section containing a list of projects using ReadLine
Several of the alternatives will definitely be less efficient than if-else chains :p
I said it doubled the hatred. If you turn up reasonably qualified and work hard that doubling is twice nothing much so no one cares. If you show up and you need a year of handholding before you're basically capable it's not going to be cool. That's the thing. No one really cares if the owner hires his or her kid and that kid pulls their weight. Everyone cares when the owner's kid is a boat anchor.
&gt; Is there a better or more efficient way to access the data directly from the file? Yes. Use an embedded database like SQLite.
Or, really, almost any, non-custom database. MS Access would almost certainly be a better solution, if only for the relatively ease with which you could replace it with something better when the time comes.
&gt; ow the boss is pushing to have the project finished faster. But they client paid for that year and half. If we push faster = same problem as before. &gt; O and the other Senior programmer just quit because he was fed up. Now try to finish a year and half project "faster" with a hopefully new Senior programmer ( if we can even find them! I hear nothing about replacing him. ). But do not worry, they just hired a cheap half time working student to help programming. :) Good to know, Thanks. I really did not expect this much response from everone on this thread. but whoa. Thanks man. I am in agreeance that they pay my bills, I'll give them what the want, but I will always tell them to please heed to my concern/experience..
I told them, look, if you want to pay me to code like I am still in high school, be my guest, 6 figures In this area is hard to come by in my area (I am actually in a quite rural area) The other developers here still tell me to do things my way as they do theirs, we all try to base ourselves on SOLID, but when we get jumped by the owner to just use a loop rather than creating a class for something, we mostly do it our want anyway, once it's working he'll give you some "advise" on how to do it right.. HAHHAHAH. 
&gt; that you can achieve the same functionality with vastly less effort and risk, you have a good chance of making your point. What you want to do, essentially, is establish a business case for change instead of a technical Hmm, I see your point. This is probably the most helpful information so far. I am the one that like's my code to be sexy! I want my code to look like the Messiah himself wrote it. But, to put forth a business case will be my best chance.
A programming language is a tool. Learning to express yourself in a particular language is not too terribly hard, especially if you already know a similar language, and there are a lot of popular languages that are similar to C#. But, as the man says, "programming is easy: software is hard." Knowing how to use a hammer will not make you a carpenter. Knowing how to use all the hammers and saws and screwdrivers and etc will not make you a contractor (nor does a contractor necessarily know how to be a carpenter). I don't wish to put you off this pursuit, only to encourage in you an awareness of your limitations.
If other devs there are following good programming principles, shouldn't it be a sign that it's "right"? Can't you guys find references and make a case for it? But yeah, 6 figures somewhere where that kind of salary is hard to come by is a pretty tempting offer, even with a crappy boss
As they say, "SQLite does not compete with client/server databases. SQLite competes with fopen()." Or in this case File.Open()... and it competes very well in all but the simplest or most specialized cases.
*The architect doesn't want us to create POCOs corresponding to input json strings for some reason.* I would figure out the reason why. This is probably important , and could have a large impact on the potential solutions. 
As far as I understand you're getting an Enum back, which is a Type, so you're checking a Type for *null* not a variable. If you want it to be nullable, you can write this: Opinion? PostOpinions = db.Opinions.FirstOrDefault(x =&gt; x.PostId == postId &amp;&amp; x.UserId == UserId); The question mark after the Type declaration makes it nullable.
".NET" is a pretty big ecosystem. I'd suggest you pick one aspect that interests you (ASP.NET, WPF, Unity3D, UWP, etc.) and pick up a decently rated book or learning resources for that. Dive deep and enjoy. When you feel like it, shift gears and try learning another .NET technology or something else entirely. Unless you're talking about ".NET" as in the CLR, in which case you can check out "CLR via C#" by Jeffrey Richter.
Right, but I think a slight amount of pedantry is warranted :p. "Removing generics" makes it sound like something it isn't, in my opinion.
Just to give a different perspective I think the strategy pattern will cause you, and especially the next guy who is maintaining your code a great deal of pain. The strategy pattern is sometimes useful. For instance if you are writing a library that needs to accept objects from the client code that modifies the behavior of your own classes. Ex. if you were writing an ordered list but you wanted to client to be able to implement their own code for ordering. Then the strategy plan would be very applicable. But don't abuse it, and in this case it doesn't look like you're writing a library so I would consider it overengineering.(also if you're in a tight loop the strategy pattern will be much slower than a simple switch or if-else statement)
Most code I've seen uses your first approach and it seems fine to me. It's easy to read, and it doesn't introduce a bunch of extra whitespace.
Isn't that essentially what happens under the hood when you use an enum, except you get worse semantics?
I've updated the Github repo with changes I made to the Opinions model. Here's the files again for your convenience: Controller https://github.com/ortund/fudge/blob/master/Forum/Controllers/PostController.cs Model https://github.com/ortund/fudge/blob/master/Forum/Models/Opinion.cs View https://github.com/ortund/fudge/blob/master/Forum/Views/View/Thread.cshtml
Depends on what you're doing with the objects. If it's a method that you need to work on it outside of the loop definitely declare it outside of the loop, but if you don't need to change it outside of the loop, you can declare it inline as in the second example.
If the objects are only used inside the loop, they should be declared inside the loop (your second example). That encapsulates everything and ensures that should you want to extract this code into a function it will be easy to do. I'm guessing (I'm not an IL expert) that both of your examples will result in exactly the same compiled instructions.
Information about the subscription model [here](https://blog.oz-code.com/ozcode-v3-0-new-subscription-model/). Reposting my comment from under the article, summing up my feelings about the subscription model: While I don't mind subscriptions per se (I am already subscribed to ReSharper and a few other "services"), I don't appreciate the price point. At least for me, OzCode is a minor convenience tool. It saves a few seconds and a few "brain hertz" here and there, it doesn't drastically enhance my workflow. I paid $40 for OzCode during the black friday sale, which was acceptable enough. But now, even as an existing customer with a "perpetual discount", I am expected to pay $65 per year. That's IIRC 60% of what I am paying for ReSharper, in comparison...and ReSharper is a tool that drastically improves productivity of almost every moment I am working with Visual Studio, having scope by orders of magnitude greater than OzCode. I also don't appreciate that the $40 spent less than 4 months ago bought me less than 10 months total of using the up-to-date version (something that I wasn't informed about when making the initial purchase). The case of subscription lapsing should also be cleared up, completely cutting off lapsing customers from using the tool is in my opinion direspectful, especially considering you are not providing any continuous service (Microsoft with their Office 365 offerings at least makes the gesture of giving you cloud space and skype credit for the duration of the subscription, to create an impression that they are continuously making some expense on your behalf, making it more acceptable to pay them continuously). Though, looking that 2.0 was released last spring and 3.0 is releasing now, the subscription and milking customers for updates is about equivalent in the long run (with the difference that new customers apparently won't even get to keep using an outdated version). To end on a constructive note, I can see myself paying $20-$30 for year, assuming lapsing customers are able to keep using the version that was current when the subscription started (that's how JetBrains handle it, I believe).
[Variables and Loops](http://stackoverflow.com/questions/407255/difference-between-declaring-variables-before-or-in-loop) This might be a case of premature optimizations, as the compilers tend to optimize the code anyways. So both styles might actually run identically in the end. This make strong case for declaring variables where you are actually using them. That way it's pretty clean and obvious the exact intentions of your code. It is possible to look at the IL code - [IL Tools referenced here](http://stackoverflow.com/questions/9025186/a-tool-for-easy-il-code-inspection), or run some measurement tests - [Time Measurement Tests](http://stackoverflow.com/questions/969290/exact-time-measurement-for-performance-testing), and for some code you might want to use a Profiler - [Visual Studio Profiler](https://msdn.microsoft.com/en-us/library/ms182372.aspx). Your test results might be a bit different with what the code is actually doing, always run your own measurement tests. This will help establish baseline performance, and you can see how changes impact it actual data. Edit - Added Links in case somebody wants to get into IL code or performance testing.
Yeah, only used inside the loop. Thanks
The long and short of it is use a database of some kind. File access can quickly bog down your application given how many files you are likely to have.
What is it about databases that makes their accessibility more efficient? Are they simply built with lower level languages? Is it possible to have efficient memory access like that just using C#? If file access is what bogs down the process, how do databases work around that?
For one, databases maintain indexes and transaction locks for you, so you can avoid linear searches and data corruption.
I doubt it. That's something way over my head
I am struggling with performance. It either hits an infinite loop or is just taking way to long to process. I need to load all locations, and print their full names. For a single location it should be very easy, however for the full data set, it's very slow. I am trying to make it usable.
Can you expand upon that statement? 
The advantage of databases over flat file access is the ability to refine your search for data. That being said selecting everything from a database is just as bad, if not worse, than flat file access. Given this you should strive to be as specific as possible when searching through a database to avoid this kind of slow down.
I don't mean to sound discouraging, but if you're still figuring out trivial things like *"Does a string contain this character?"*, writing an equation solver is probably quite a bit beyond your current skill level.
I know of OzCode and I have always thought "Oh, that's cool". I think it's a minor tool to help in edge cases. It doesn't begin to compare to R#. I wish them luck with their subscription model, but I do not think it'll work.
You are going to have to write a mini expression parser to figure out what the user typed in.
Yeah, unfortunately that's not a trivial operation at all, and there's definitely no equation solver built-in to .NET. You'll have to look into token parsing, detecting all the "x" terms and all the constant non-x terms, collecting like terms, then doing whatever math on the numeric components. And that's just for simple equations like these, not ones including exponents or parenthesis. But, best of luck to you! Plenty of resources out there on how to split strings, check characters, extract tokens, and the like.
Be careful declaring objects which you're going to access by reference outside of a loop. For instance, if you make a change to the objects after the loop completes, it would change the value within your array, which may not be desired. Keep the scope limited in order to avoid issues like this. Also, another issue that could crop up from things like this would be if you forget to create a new object for each iteration, you could end up with a list of repeating values. Anyways, limiting scope is a good thing, and the compiler is typically very good at optimizing code anyhow. Micro-optimizations like this are rarely ever needed, and unless you have a real concern for performance, I'd just stick to the limited scope (2nd example).
Store the data in a backing field somewhere in whatever format is useful for you. The textbox should be used only as the very, very last step of reporting some data to the user, or the very, very first step in retrieving some data from the user. EDIT: And regardless, yes you can manipulate strings from the textbox easily: string text = MyTextBox.Text; text = "asdf"; text = DoSomethingWithTheText(); MyTextBox.Text = text; But that said, sounds like you're best off just storing the string data as an array (or whatever class) and just outputting/formatting that data to the user via the textbox.
this entirely depends on the situation. don't try to incorporate the strategy pattern to replace your if statements unless the pattern fits your situation. checking for types is kinda frowned upon, because it couples your code to the types you are checking, which prevents your code to work 'out of the box' with future new types and such. some common situations i find that would replace if statements of *checking types* would be: * inheritance/polymorphism (if its okay to have the logic in the classes) * visitor pattern - if you want the logic to reside outside the objects and don't know which objects you'll be given (and don't want to if (obj is Cat), if (obj is Dog) etc.. etc, etc.
I'm sorry if I didn't get you right, I thought it would help you :-)
So how well does 2.x work with VS2017?
it probably doesn't :|
I agree. C# is trivial if you know OOP and static types in another language. Getting to know XAML/WPF, MVVM and the key bindings of Visual Studio and ReSharper takes considerably more time. Then again, syntax is always easy, architecture, frameworks (where is what?), design patterns and the nitty-gritty details are the harder part. 
I hear you on the unit test issue. There's nothing specifically *wrong* with the way you're testing - you just aren't unit testing. Rename it *integration testing* (since you're testing the integration between your data access layer and database) and you'll get fewer frowns from developers. My opinion is that not writing unit tests specifically isn't a cardinal sin - there are just good reasons to do so. Among them, in my experience: * unit tests startup and execute faster than complex tests * failing unit tests can be much more easily traced to an offending line of code. In complex tests you sometimes get errors due to a subtle setup issue rather than an actual code bug (guess what I've been doing all day?) * writing unit tests dictates some of the way you compose your production code - and it's almost always for the better. It not only makes it easier to write tests, but also leaves your code in a way that future refactoring is an awful lot easier * not requiring a database to run tests makes your tests faster, easier to configure, and easier to run in a third party container (e.g. a CI server) Really, if your tests are being run consistently, you have good code coverage, and the tests are passing, you're in pretty good shape. I'd suggest you do a reality check.. What's wrong with the way you structure your tests now? Are they fast enough? Are they accurate? Are they easy to add to? If so, what's the problem, other than them not being structured fashionably? Test code is test code - if it's not in your way, don't spend a lot of your employer's time fiddling with them. If you have a specific problem, like you write too much boilerplate code, or you end up making copy-paste errors a lot, then look at that. As to your main point.. I hate the way you're doing data access. But hey, that looks like pretty classic ADO.NET stuff that I still find in a few parts of the legacy app I maintain. My first thought is that you could probably reduce the total code by using an ORM (like Entity Framework). My second thought is that adding an ORM is never as painless as you think. Legacy systems find a way to get back at you. I'd also add that if you wanted to change your data access pattern, you need to do it *system-wide*. Don't change over to a "new way" and leave the old code the way it is. That just means instead of improving anything, you've made your data access *inconsistent*, which is a huge source of frustration and bugs. The longer I maintain a legacy system the more certain I am that making the code consistent and predictable is more valuable to a business than shoehorning in modern development techniques.
&gt; We use static methods almost exclusively for database access. Repent now and you can be saved (just kidding haha). Yeah, if you've only ever seen it done this way I suppose it's an easy trap to fall into. The problem is, statics are a spike trap that's also full of crocodiles. 99% of the time, you never need a static method. The 1% is rare and for things that truly have no state *or side effects*. Accessing a data store such as in your case absolutely is a side effect (in terms of functional programming, you are mutating the state of the database). &gt; private static MyDBConnection = new MyDBConnection(connectionstring); This is also really really bad, for 3 reasons. One is very much a fundamental of OOP, the other 2 are not always so obvious until you've previously experienced the points I'm going to make. Firstly, what happens when you have 2 instances of your class? What if one instance is trying to update some records, at exactly the same time as your other instance is deleting those same rows? You will end up with some horrible and inconsistent data, assuming either are even successful without the DB erroring. You are using transactions with rollback, right? (That's a whole other topic anyway.) The second is that you have coupled your class to that particular type, `MyDBConnection`. What happens when you want to use another database, rip out this type from every class that is using it? It's best to appropriately abstract and decouple your architecture to avoid this. This follows onto the next point very well. Static's also make it basically impossible to unit test. It's a complete disaster and every time you run a unit test, do you really want it to potentially delete from the DB?. The best approach is to use `interfaces`. By using an interface, you are constructing a contract to which implementing types abide by. In this case you would have, for example, `IMyDBConnection`. You would then have any type that you need implement this interface, and in this case you'd have `MyDBConnection : IMyDBConnection`. You're probably wondering where this is all leading. It's leading to a concept called *Dependency Injection/Inversion of Control*. They are not nearly as scary or as complicated as they sound or as some people like to make them out to be. Really it's following the basics of general programming and OOP practices; decoupling your code and abstracting away implementation details. This is coincidentally where the phrase "code to the interface not the implementation/concrete type" comes from. What you do with DI is "inject" your instance into a class, and don't `new` that type up, at all. You leave that to a higher up layer. This is ideally what you'd have: public class MyDataAccess { private readonly IMyDBConnection _dbConnection; public MyDataAccess(IMyDBConnection dbConnection) { if(dbConnection == null) { throw new ArgumentNullException(nameof(dbConnection)); // This check isn't strictly necessary, but it's common practice to check something further up the stack didn't screw up and pass a null. } _dbConnection = dbConnection; // Here, we do NOT new up an instance and instead simply use the one we have "injected" into the constructor. } public MyObject GetMyObject(int id) { var myObj = _dbConnection.RunSql("select blah"); //some code of course to convert sql results into an object return myObj; } public void UpdateTable(MyObject values) { MyDBConnection.RunSQL("update blah", values.Values) } } So to go over what this allows you to do: * Let's you decouple your code from the database, and you can now pass in an instance. * You can do the same as above, but in your tests too! This is known as "mocking", as you've noted. This way, you don't need to always be accessing your database for tests. Ideally, you should *also* be testing the expected behaviour of your code given good/bad inputs (good/bad data). e.g. what happens if for some reason the DB returns wildly incorrect results, does your code handle that? How does it work when I pass it known good data? Your manual testing 6 months ago might work, but you might have introduced a regression that you won't notice right away. Tests on the other hand will notice, right away. * You can still inject the "real" `MyDBConnection` for real database access. But please note, these are generally not called unit tests but instead integration tests, because it integrates many parts. A good test suite should have both unit tests and integration tests. &gt; The [AssemblyInitialize] (sp?) method will run when the test run starts which will drop the database (or multiple databases) and rebuild it from scratch (tables, sprocs, functions, etc). &gt; The [TestInitialize] (which runs before every test) will truncate every table in the database and re-populate the required values. Most of these values are going to be fairly constant. &gt; The [TestMethod] test itself will set up any additional data that it may need for the tested unit/class/method. &gt; While it can be a little slow constantly rebuilding, truncating and inserting data on every test-run, I can definitely see the value in doing it this way. &gt; Our applications are very data driven (as I'm sure many are) - they will constantly be reading/writing data - so it seems to be a lot more work for no gain to mock out the data access portions. &gt; I can understand it from a 'purist' standpoint, now a test is not one single unit, but 2, since it testing the database as well. But is this a bad thing? These are all integration tests, not unit tests, like I described. &gt; so doing them seperately means possibly creating twice as many tests. While I can understand that this might seem redundant, it absolutely is not. One thing to note here is that this is test code after all, so having duplicated code is a pretty normal thing to have. In fact, if I saw no duplicate code at all I'd be worried. There's simply no way to have comprehensive tests without duplicate code. It's not production code, which should not have unnecessary duplicated code. Testing your data access as well as all all of the business logic are both valuable, and having confidence in your code as well as knowing you'll get immediate feedback if you introduce a bug is truly worth the extra time spent testing all areas of your code. Hopefully you've found some of this helpful?
I disagree with /u/superdraco. If you are mocking database calls then you are doing it wrong (IMO). That's what we currently do, we spend so long setting up the mock and configuring it that the actual test is one or two lines. I actually prefer your way of doing it (not the static methods). But to have the entire database nuked and re-done. The only thing I would change is instead of having it hit physical hardware I'd make it do it all in memory.
Like others have said, there isn't a lot of value in unit testing database access methods; integration tests are better. If you have complicated logic in or around your database access methods, then you should refactor away the database dependencies from your complicated logic. Unit testing complicated logic without dependencies is easier. You can unit test the parts that call the database, but you'll need to use an interface with mocks, as noted in at least 1 other reply. The key is to limit as much as possible the parts of your code that have the kinds of dependencies that would need to be mocked when unit testing. 
&gt; If you are not mocking your database calls, then you are not doing Unit Tests. That's true, but the more mock objects in a unit test, the more noise and the less value. &gt; Say you're testing your error handling code (you do that, right?) and you need the Data Layer to throw an XYZ exception after a 2 second timeout. If the error handling logic can be in a different method from the database call, then it will be easier to unit test. The method that has the database call and try/catches can be procedural code that calls the (more heavily) unit tested methods. You can still unit test the "procedural" code with mock objects, but the tests for the more complex logic will have more value and less mock object noise if you can target it directly. &gt; Why is that bad? Why is it bad that the test is only a couple of lines? I think the point was that the code unique to that test was only a couple of lines, hidden inside excessive setup to accommodate mock objects. If we can limit the usage of mock objects it will reduce complexity in our unit tests and make them easier to read and maintain. Anyway, my point is that I think we're too eager to reach for mock objects when we should be doing more to reduce coupling. Mock objects should be more of a last resort, IMO. **edit** formatting 
using System; class HomeSale { static void Main() { string inputString; char response; Console.WriteLine("Please enter a salesperson's initial"); inputString = Console.ReadLine(); response = Convert.ToChar(inputString); double saleAmount = new double(); double saleAmount_A = new double(); Console.WriteLine("Enter next salesperson initial Z to quit"); inputString = Console.ReadLine(); response = Convert.ToChar(inputString); double saleAmount_B = new double(); Console.WriteLine("Enter next salesperson initial Z to quit"); inputString = Console.ReadLine(); response = Convert.ToChar(inputString); double saleAmount_E = new double(); double commission = 0.10 * saleAmount; while (response != 'Z') { if (response == 'D') { Console.WriteLine("Permitted user please enter the sale amount that you made."); inputString = Console.ReadLine(); saleAmount = Convert.ToDouble(inputString); saleAmount_A = commission; saleAmount_A += saleAmount; } if (response == 'E') { Console.WriteLine("Permitted user please enter the sale amount that you made."); inputString = Console.ReadLine(); saleAmount = Convert.ToDouble(inputString); saleAmount_B = commission; saleAmount_B += commission; } if (response == 'F') { Console.WriteLine("Permitted user please enter the sale amount that you made."); inputString = Console.ReadLine(); saleAmount = Convert.ToDouble(inputString); saleAmount_E = commission; saleAmount_E += commission; } Console.WriteLine("The total commission for each salesperson respectively is: Danielle with {0}, Edward with {1} and Francis with {2}.", saleAmount_A.ToString("C"), saleAmount_B.ToString("C"), saleAmount_E.ToString("C")); } } }
&gt; What happens to these values as far as memory goes. &gt; i might be misunderstanding you but are you saying that &gt; ActiveUser&lt;int&gt; and ActiveUser&lt;string&gt; have their own place in memory as they are initialized seperately? 
Basically, yes. typeof(ActiveUser&lt;int&gt;) != typeof(ActiveUser&lt;string&gt;)
Oh alright, thank you for the clarification. It just seemed very strange to me.
Removed: Rule 4. Feel free to repost your question, but please format it and remove irrelevant details.
It's for a homework assignment for a beginner's programming class. Professor asked that we utilize different classes, constructors, and get/set accessors to display four parameters: prefix of a class, its course number, credit hours, and a paragraph of descriptive text. I am a complete beginner, and we haven't learned anything about text files yet. 
So you can recursive build up your data on the server side like you're doing. Which is perfectly fine. But if you start running into performance issues you can push this to the database which will be faster. Here's a link on how to write a recursive join for SQL Server using Common Table Expressions database. https://technet.microsoft.com/en-us/library/ms190766(v=sql.105).aspx
If you want to use something like that today, you can try the Fody Plugin [AssertMessage](https://github.com/Fody/AssertMessage).
&gt; but the more mock objects in a unit test, the more noise and the less value. Only if you're mocking things that don't need to be mocked. Designing up front with unit tests in mind and "poor man's dependency injection" will make it so you don't need to mock very much in the first place. You'll end up with modular code with good design patterns. &gt; Anyway, my point is that I think we're too eager to reach for mock objects when we should be doing more to reduce coupling. Mock objects should be more of a last resort, IMO. Half and half. Your design should be so that you only need to mock things that fall outside of Unit Test-ability, like network calls or destructive methods. Also, if you design to interfaces with small, tight definitions, a "mock" object that implements that interface is simple and doesn't require any fancy mocking framework. Maybe that's where our arguments are differing. In my world, a plain-old-C# object that is implementing an interface for purely unit test purposes is still a mock object. It doesn't need to be a "real" object that's had methods and properties ripped out and replaced by Moq or something similar.
If you can do object-oriented programming, you can do C# already, you just don't know it yet. All of my past experience was in C++, and one day with the "Visual C# 2005" book was enough to impress in a live coding interview. There's a lot of breadth to the language, though. Lots of new stuff has been added since 2005. :) So you can get comfortable in a day, and spend the next few years getting better and better.
[removed]
Why are you quoting your own primary text?
That's fine its a lot to take in! Feel free to ask anything else after you've read it.
&gt; That's what we currently do, we spend so long setting up the mock and configuring it that the actual test is one or two lines. ... &gt; If you are not mocking your database calls, then you are not doing Unit Tests. ___ &gt; Why is that bad? Why is it bad that the test is only a couple of lines? It is bad because you want to focus on the test, not the setup/configuration. And it's not basic refactoring. If you start to do with that tests you've coupled all your tests (of which we have 1,000s) to few long setups/configurations. 
&gt; I can count on zero hands how many times I've ever seen anyone do this. Writing code for "if I want to do X in the future" when the chances of doing that is near zero makes the code now take longer and adds unnecessary complication. That was one of my thoughts as well. We will **always** need some sort of database - and sql is for the most part fairly interchangeable - so there shouldn't be any fundamental code changes if we swap technologies (unless we swap to an ORM technology but that's a whole different kettle of fish). In my case, the MyDBConnection is fairly generic itself - whether it connects to Sql server, mysql, oracle, whatever, it *shouldn't* matter. We just gotta use a different connection string. It will accept some sql, run it, and return a generic object of results when requested. 
&gt; You need a lot of "noise" to set up mocks? Maybe your code is bad. Maybe it is. But the fact remains people are way too eager to start mocking everything out. &gt; Even so, you can extract the setup and move it into a separate class to keep the tests clean. If you start to do with that tests you've coupled all your tests (of which we have 1,000s) to few long setups/configurations. The setup/configuration is now hidden away from your tests.
You need a specific project in mind. Otherwise the learning won't stick.
Are you not better off using tcplistener/tcpclient and using streams for a chat program?
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/EduWayne [It's about time you start using these C# 6 features](http://np.reddit.com/r/programming/comments/5xx6w1/its_about_time_you_start_using_these_c_6_features/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Or how about just a simple helper like: public static class AssertThat { public static void Expression(Expression&lt;Func&lt;bool&gt;&gt; expression) { if (!expression.Compile().Invoke()) { throw new AssertFailedException($"'{ expression.Body }' is false"); } } } USAGE: AssertThat.Expression(() =&gt; false); AssertThat.Expression(() =&gt; DateTime.Now == DateTime.UtcNow); EDIT: Result: &gt; Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: 'False' is false &gt; Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException: '(DateTime.Now == DateTime.UtcNow)' is false 
Thank you all SO much! You've been a great help :) 
That's sort of what I'm living, but this guy does not know what a name space is... hes pure asp classic... it's funny, he never questions my c# code (for external Middle ware apps I write to do jobs that classic ASP will not do.. 
My bad?! MY BAD!? You Know WHAT!? No Soup For You!
Really good answer 👍🏻
That almost sounds like a TV ad; just pay additional shipping and handling.
Dude great answer, im in the position of the op so this is great to see
While this achieves pretty much the same result, having to compile expression trees for every assert is going to have an impact on performance. 
I haven't worked with InstallShield so maybe somebody else can chime in for you on that. I do all my deployment with Wix (which I highly recommend) and it can change values in any XML file at install time with relative ease. Here's a relevant StackOverflow post on the topic. https://stackoverflow.com/questions/22898742/how-to-deploy-different-app-config-values-with-wix
Awesome, I can finally download the latest version of Visual Studio(RC is not an option) and enjoy the new C# 7 features. Congrats to Microsoft and Visual Studio team for this.
If anyone's having trouble downloading the installers, I've popped them on my Dropbox: Edit: links removed due to DMCA. If you're having trouble downloading form the main site, try disabling your ad blocker as that's what's reportedly preventing it. EDIT (Thanks to /u/SikhGamer): &gt; For offline:- &gt; `vs_community.exe --layout c:\path_to_somewhere --lang en-US`
Why is this targetting the *old* format? https://github.com/kekekeks/Perspex/commit/e7e9a535fd7b00c59566cec15168eac215aa8506 Why &lt;PackageReference Include="System.Reactive.Core"&gt; &lt;Version&gt;3.0.0&lt;/Version&gt; &lt;/PackageReference&gt; Instead of &lt;PackageReference Include="System.Reactive.Core" Version="3.0.0" /&gt; Besides: it's not really a script, it's a program.
For offline:- `vs_community.exe --layout c:\path_to_somewhere --lang en-US`
I've had several crashes already and it's only been an hour. I never once had a crash in all the weeks I was using the release candidate.
Removed: Rule 4. You'll have to do some of your own research and make an attempt. Several resources out there about repositories, services, and JSON parsing.
Xamarin alone is what, almost a quarter to a half of that? I get the sentiment though.
Interesting. Also those comments about the SQL team about "fortunately we got new managers" when they became part of the .NET team, ouch! I'm gonna guess there's some interesting back story there.
&gt; I remember when Visual Studio was a mere disc Like a DVD disc? If I remember correctly my first job had a copy of Visual Studio .NET (I think it later became VS 2002). I think the install was like 7 CDs. 3 if you didn't want the MSDN library locally. Although with everything discless now, I could be remembering how much of a pain it was to install everything on new workstations back then.
ConsoleApplication6 &gt; bin &gt; Debug &gt; ConsoleApplication6.exe (Application) Game is not even close to being done yet. As you can tell. 
I think comment should keep the article(-ID) and article should drop the comment list. Otherwide there should probably be a mapping (articleID, commendID) (not recommended though) 
probably going to wait for update 1 judging by these comments
It has crashed on me about 15 times so far. Going well!
Is there a en-other countries one too?
Removed: Rule 3, Rule 4
You could just put the code up on github, I mean, most of the sensible people wouldn't want to randomly download executable from the Internet.
Yeah...that thought came to me a second too late. It's not too important anyways. 
When I go to sign in to MSDN, I get an error. ERR_CERT_AUTHORITY_INVALID At home, I could just bypass this warning, but at work our security is pretty tight, so we can't even bypass the warning. Either way, it's a pretty serious issue if Microsoft's CA is untrusted. WTF is going on, Microsoft?
I think Microsoft's CA is untrusted by your own sysadmins. Not a Microsoft issue.
Because shipping projects on top of an unstable, pre-release codebase is a really bad idea? Just one excellent reason.
You might have some recursive dependency issue or something. I had a similar one with different projects targeting a mixture of 1.1 and 1.0 net core apps and such. Make sure you are targeting the right packages for your net core version, i.e. if you're targeting netcoreapp 1.0 don't use package version 4.3.0, you want 4.1.0 and stuff like that. I realise it's not very clear.
Yeah, it'd be one thing if it said invalid cert, but to blacklist the whole CA is a bit much. 
Yeah, I was thinking the same. We don't actually use dotnet core though - just MVC Core targeting 4.6. Might just blow out all the references/dependencies and rebuild it. Blarg
Avalonia is very similar to WPF and UWP from an architectural standpoint (because it is heavily inspired by them), in that the UI theme is distinctly separate from the UI controls' implementation. This means you can easily theme it however you want.
They are using a valid root and and no chain of trust would mean a cert error on any operating system/browser out there. There HAS to be a chain. It's trivial to make your own CA, if that could create "valid" certs, the whole system wouldn't work.
I gonna try it out then!
All the other comments are correct (kudos to all) but just wanted to throw in a bit of a round up that I think keeps things simple. Static fields on generic classes - a static field is created for each different T. If some cares to word that better please do, I couldn't think of a better way of saying it 
I tried it. It worked, but I feel like there much work left to do. For example, I can set a transparent background color which will crash WinForms. WPF does not support transparency, while without Eto it does. However, there are pros too. I used WinForms for Windows and GTK for Unix and with one code base, I could build an executable that runs everywhere - with transparency!
I have heard of database mocking and so on... but never got around to implementing testing this way... do you have any resources or links you could provide with more information on how to do it? I'd very much prefer not to require any third party tools, nuget packages or libs though... 
Never too late to delete the post, host it on GitHub, and repost a new link to the repo.
Removed: Spam. Please review Reddit's rules and guidelines regarding self promotion.
&gt; having to compile expression trees for every assert is going to have an impact on performance. Agreed. Plus, given argument validation is so common, it'd be a bit cumbersome to type out the `() =&gt;` on every assert.
There's been at least 3 new and open source ones been listed in here over the last couple of months. Hopefully someone can link the threads. There's the corefx lab option too: https://github.com/dotnet/corefxlab/blob/master/src/System.CommandLine/README.md
&gt; Might be nice to skip having to specify the parameter name (maybe with the parameterless constructor) and just have it produce a comma-delimited string of all argument expressions Nice idea, however wouldn't it be problematic to get back each of the expressions from the string? e.g. If you have a comma in a string literal like `Foo("hello,world")` and then call `string.Split` on the passed-in string you will get `"hello` and `world"`. &gt; If you had a method checking multiple arguments, it might suck to have to double-up the parameters. Also don't have to deal with duplicating the parameter name as a string literal. To be clear not every method doing argument validation is going to be annotated with this attribute. Only a handful of methods that actually do the asserting, like `Debug.Assert` or a helper function throwing an exception will use it. So the fact that the parameter name has to be hard-coded as a string literal is not likely to be much of a problem.
&gt; Can you receive and assign a username under this method? Yes... you can do it in a number of ways... when you are communicating over the network you are sending only bytes... no contextual information... it is up to your application to interpret those bytes as whatever data they represent. Basically, imagine that you are writing to a file, the file gets copied to the other machine and the other machine reads that file... (obviously it isn't that simple and depending on your protocols you might have to imagine that you are writing a file out of order but to an extent the idea is the same). So you have some options here on how to receive the information... you can use a predefined format... for example, say that username is always exactly n characters (add pad any that arent that long and chop those that are) and the receiving app would read n bytes into a string and assign that value to username. You could have a slightly more robust method where you send messages string as an int/char[] pair where the first four bytes (if you use int) represent how many characters are in the string and then read that number of bytes into a string. Another way you could do it is to encode the data in json or xml strings with name value pairs then parse this into the information you need. (you would need to tell the reciving app how long the json, xml string is though to be able to read it 
You might like to try a discriminated union: https://github.com/mcintyre321/OneOf
Read up on "poor man's dependency injection". Unfortunately, doing Unit Testing without requiring a mocking framework like Moq or something usually requires designing it in from the start. The more blog-o-riffic discussions of this topic will throw around terms like DI (Dependency Injection) and IoC (Inversion of Control). That's really just a fancy way of saying, "program to interfaces and use the Factory and Builder design patterns". The short version is that any "dependency" you have, i.e. any object that would need to be mocked in order to have 100% in-memory (no network, no file IO) unit tests, should be wrapped in an Interface. e.g. you would wrap SqlDataConnection in an IDataConnection, if it didn't already implement such an interface. Your app/service should have one global point of configuration (App_Start in global.asax for IIS web services) where it configures all necessary IDataConnectionFactory and such. In your real app, you would do Global.DataConnectionFactory = new RealDataConnectionFactory(); In your unit tests, you would do var mockDataConnectionFactory = new MockDataConnectionFactory(); This is quite a rabbit hole, and really too much for a simple reddit post to do justice.
Thanks for reminding me, I need to update Linqpad.
It'll be very hard, if not impossible, to find a mature and solid framework like WinForms/WPF targetting Mono or anything not-Windows/.Net. Otherwise, get as many people as possible and support [this issue on github for .Net Core](https://github.com/dotnet/corefx/issues/5766). Edit: If you do want a fancy UI and still use Mono under the hood and you don't mind messing around with JavaScript, you could try [Electron](https://electron.atom.io/) in combination with [Edge.js(electron-edge)](https://github.com/kexplo/electron-edge)
I'm definitely not brave enough for that. Everyone will have to live with ConsoleWriteDebug()! Thanks for your comment and time
It's actually gotten a lot smaller and the installer is a lot more specific. The issue is that Xamarin is an (optional) part of the installer now, and there's not a whole lot you can do to shrink down emulators. It's also the whole install, which is a lot of different stuff you may or may not need.
Also, I've tried RC - it's crash happy and damn near unusable for .NET Core projects. If you want to actually get things done in a business environment, it's not a good fit.
For a bit of closure, I did end up deciding to go with a more traditional model of passing data, after seeing the pitfalls of singletons
It wouldn't be so bad if the SDKs and stuff didn't have to be on C:\.
Yeah, that crossed my mind. You could have them tossed all into an array (or other collection/iterable) and `String.Join` them together. But I figure that might introduce some runtime overhead cost to instantiate/populate some kind of immutable collection (or copy of a mutable one) vs a constant string literal that may even be interned. Especially if one considers that plausibly the argument may rarely or never be used (say typically only in the exceptional bad case that needs to be logged) that may not be worth it. I agree though, you wouldn't want to split them by comma and assume that each element corresponds to a matching argument. But if you wanted to do that, perhaps one ought to stick with the explicitly named parameter constructor overloads instead. If the intent is to allow quick and easy basic debugging/reporting/logging, then given a quick string that one can basically log out the call stack and the method arguments _as the user wrote them_, to the point that you might just be able to copy-paste them into C# as-is could be good enough. Given one of the code examples that you have: public static void MyHighPerfByteArrayStreamMethod(byte[] buffer, int index, int count, Stream stream) { // No nameof! Each parameter name only has to be typed once. Requires.NotNull(buffer); // paramName: "buffer" Requires.Range(index &gt;= 0 &amp;&amp; count &gt;= 0); // message: "index &gt;= 0 &amp;&amp; count &gt;= 0 failed." Requires.Range(buffer.Length - index &gt;= count); // message: "buffer.Length - index &gt;= count failed." Requires.CanRead(stream); // message: "stream can't read." } If something was wrong here, say you want to catch any other set of errors that could result from accessing arbitrary streams. Or heck, even if one of the code contracts was caught at runtime, debugging it might only go so far since you don't know _why_ the user supplied/calculated `index` as less than zero, or `buffer.Length - index &gt;= count` was violated since you can't actually see how the user determined what those arguments were. If the code was updated to be: public static void MyHighPerfByteArrayStreamMethod(byte[] buffer, int index, int count, Stream stream, [CallerArgumentExpression()] string argExpressions = null) { try { // No nameof! Each parameter name only has to be typed once. Requires.NotNull(buffer); // paramName: "buffer" Requires.Range(index &gt;= 0 &amp;&amp; count &gt;= 0); // message: "index &gt;= 0 &amp;&amp; count &gt;= 0 failed." Requires.Range(buffer.Length - index &gt;= count); // message: "buffer.Length - index &gt;= count failed." Requires.CanRead(stream); // message: "stream can't read." //read the stream } catch (Exception ex) { LOG.Error(ex); LOG.Error("Caller argument expressions: " + argExpressions); throw; } } Then you'll get a log error reporting something like: EXCEPTION+CALLSTACK Caller argument expressions: MyHighPerfByteArrayStreamMethod(myBuffer, someStartValue + someOffset, myBuffer.Length - someOffset, theWrongStream) But I may be barking up the wrong tree here. It may not be entirely useful as debugging production code or something since you can just look at the callstack anyway to find the call site and see the code used. Regardless it would still simplify the method declaration even in the simple contract examples you have. No need to specify the single, other parameter or deal with keeping the string literal matching with the parameter. Completely unrelated to all this, I also assume when it comes to dynamically invoking delegates rather than the direct call, it would just supply the `CallerArgumentExpression` as `null` since you wouldn't be able to determine the expressions at compile time? 
Don't be alarmed. It's not difficult. Just create a new class, make it static, and give it a WriteDebug() method. Really not much different than what you're doing already. static class MyConsole { private bool checked = false; private bool debug = false; static public method WriteDebug(string text) { if (!checked) { debug = GetForDebug(); checked = true; } if (debug) { Console.WriteLine(text); } } } See, not so much. And since it's static, you can call it anywhere without having to create the object. Just use MyConsole.WriteDebug("this will print to the console if debug is enabled."); 
And how many languages, frameworks, refactoring features, debugging features, and code inspection features did it ship with back then? 
I like /u/g2petter's answer. One thing I'll add is a vague principle I was told once upon a time that stuck with me, and generally has to do with scoping your testing. Put simply: don't test libraries; test your code. So, suppose you're using an ORM like EF and you're writing tests. You test that you can create an entity, write it to the database, then query and get it back from the database. Great! Except your job isn't to test whether EF knows how to construct insert and select queries - stop testing the framework. In your context, your code is actually composing queries - that SQL construction is on you, so should be tested. The integrationey way to test that is exactly how you're doing it - run your app code and make sure it's reading and writing from the db correctly. I'd love to be able to suggest a better way to test what you're doing, but to me your method sounds appropriate. Sure, you could rip out and rewrite tons of code to better abstract some of that, but there's no business case for that unless you can demonstrate your current means is too expensive/slow/error prone. FWIW, nearly all my tests interact with a database and I'm perfectly happy with it.
Frankly, I did not check it myself yet. I assumed that they'd use the new syntax, because they announced previously that they would support it. If they really did not switch to a Version-attribute, then this would be very very stupid of them. Did they not learn of the horrible merge conflicts resulting from HintPath? This will be no different. Edit: I did check it. VS 2017 RTM does use the new syntax, the Version is now an attribute. Are you sure **you** have the RTM installed?
I feel more organized with the new nested functions feature. Haven't experienced any crashes, but I get warnings about certain components not working and needing to reenable it. Other than that, it runs pretty good.
I just bought C# 6.0 in a Nutshell. No reason to call it out of date. Everything in the book is true, even with C# 7.
I have an asp.net core project doing just fine. Never saw VS crash. It could be also an extension fault (assuming you use them). 
Initial observations... I have not used any other intermediate versions of 2017. I have 2015 already installed with active Cordova development. I downloaded the exe and ran it . I chose required workloads. Whoaaaaa 18+ GB w/o Xamarin and I already had all the Android SDks!!! Anyway, install completed with warning - Incomplete components - SDK 23 and Java SE Development Kit (8.0.920.14). No problem. I created a new Cordova project, and it now defaults to 6.3, understandable. So now you have multiple Browser emulations. Seems not using ripple now for Cordova. Browser emulation still opens in Chrome (as opposed to Edge or any other browser of choice). The Ripple Emulator options on the settings page is gone. Browser emulator controls show up in IDE (Why???). I am hoping 2015 is not messed up after this new installation. NPM etc. I will try to compile an apk in 2017 next. So far so good. I am wondering though How much build time (% wise) 2017 brings down to? (It takes almost about 1 min to compile an apk for me now in 2015) Does it recognize custom plugin code change in source folder? (Remove/add plugin after every iffing code change is pain) 
&gt; I have an asp.net core project doing just fine. Never saw VS crash Same here, but I was only doing some basic stuff on a sample ASP.NET Project.
GTK Sharp seems pretty solid, but outdated - if we put aside that it is cancer, haha. I will experiment with something...
The command only create a complete offline installer. Later on you pick the features by running the generated installer.
Or a virtual machine; then again, I've been quite disappointed to learn by experience that you can't use your GPUs in a virtual machine...
I think you should encapsulate console in an adapter.. class ConsoleWriter:IConsoleWriter { public void WriteLine( string text){ #if DEBUG Console.WriteLine( text); #endif } } also: http://stackoverflow.com/questions/3788605/if-debug-vs-conditionaldebug
What's with this stupid affiliate link?
Removed: spam.
I wonder of it's related to particular tools/workflows?
Those having crashes: What tools/workflows are you using?
&gt; large program but wouldn't let anyone see it. It wasn't in a normal language. They worked with a product with it's own language but it had similar elements to c. &gt; The woman couldn't figure out how to convert a number into a string, or a string into a number, with this language, The is the Di-polar opposite of "Fucking Epic" But still with the word "Fucking" as an enhancement.
Visual InterDev was the Internet development tool for Visual Studio 6.0. It handled HTML, JS (and VBS) and ASP classic. At that point, all the different languages had their own environments. Visual InterDev I would claim is the precursor to the single environment we know today as Visual Studio.
It should automatically update after it goes gold. I'll say though, the beta and RCs have been pretty stable. 
I have been using the RC for several months. I am still PISSED. They still did not implement support for FTPS - implicit when opening a webpage! da fuck microsoft, clear text only?
One look at the SQL Server installer tells you all you need to know about the mindset of that group. They shouldn't be anywhere near consumers or devs. They should be left alone to draw circles and lines on whiteboards. But imagine you're the guy who's been nursing tricky datastructures and micromanaging NT kernel optimizations for ten years. For whom one release that corrupts an index or loses data is a multi-billion dollar mistake. Meanwhile down the hall you've got these EF knuckleheads who don't even understand SemVer. Not a lot of synergy at the annual wine and t-shirt parties I'd imagine.
Quite a lot to be fair as I like to experiment. Pretty much everything .net and C++. Install size was about 45GB.
In IL there is no such thing as scopes inside methods; all methods have one set of local variables. So yeah, they are moved up. Note that the garbage collector isn't dependent on lexical scopes.
Guys from VS team said that they don't have a good idea how to handle installation of non-VS core parts yet. They are looking into various possibilities, but there are noticeable drawbacks to each of them. Do you put those dependencies into subfolder inside VS folder? Or you ask for path for each of these? You might not think so now, but selecting 6 or more paths in addition to the VS path is very annoying. I am gald they are at least looking into this. If you have any good idea how to solve this, contact them. If you feel like certain annoyances are acceptable, if you get what you want, let them know. VS team relies heavily on user feedback to make decisions where to put effort. I personally would be ok with selecting path for each dependency.
I appreciate what has been done in this area so far. VS itself is much better about it. I wish I had an answer. Many times folks use junction points to move the stuff but that breaks Windows updates many times.
Hung on both an ASP.Net Core project and WPF project. Trying to remember if all hangs were on startup. Maybe. Resharper is installed.
You will have to write a parser, like a fairly simple recursive descent parser should do the trick.
Thanks mate. Huge fan and active user!
Thank you! Hope you dig the new features!
https://github.com/tidusjar/Ombi Ombi, It's basically a front end for family/friends to request media on your server either hosted on Plex or Emby.
Thank you, it's very nice. I always used Material for webdesign but not for Windows Forms but this will change. Thanky you :)
Yes, always!
&gt; Edit: Further, is there a way any one can think my ConsoleWriteDebug could automatically indicate how it was called. E.g. "Called by Method: SendUDP()" You want the attribute `[CallerMemberName]`: public sealed class Logger { public void TraceMessage(string message, [CallerMemberName] string memberName = "", [CallerFilePath] string sourceFilePath = "", [CallerLineNumber] int sourceLineNumber = 0) { Debug.WriteLine("message: " + message); Debug.WriteLine("member name: " + memberName); Debug.WriteLine("source file path: " + sourceFilePath); Debug.WriteLine("source line number: " + sourceLineNumber); } }
The google team would frown on anything non web, so don't need to pay attention to their complaints 
Removed: Rule 4. Some basic functions that might be useful for you to be able to make an attempt are `Int32.Parse`, `String.StartsWith`, `String.EndsWith`, `String.Split`, `Path.GetFileNameWithoutExtension`, `Path.GetExtension`, and `File.Copy`. You could potentially use regex to filter for the "Prog" files, but you can do the same using various `Path` and `String.StartsWith` or `EndsWith` calls. Give it a shot with those and if you still run into issues, post the attempt you have with them and we'll see what we can do.
Got into sharp only yesterday, perfect timing, I guess. 
Wow, thank you very much! Makes hunting things down in our 80 files and 50 classes so much easier! thanks again
thank you man, this is very good series, appreciate that you shared it. if by any chance you know more this kind of series, but maybe creating not a game but other kind of application. maybe even using sql. then i would be happy if you share it with me ;))
Well, they have Android....
Thank you for the sincere feedback. We have thought long and hard on how to structure the benefits. Ultimately – it is just really hard to please everybody. Those that bought OzCode v2.0 on the day it came out (July 20th 2015, same day as VS2015 release) will probably find the extra 6 months FREE usage of OzCode v3.0 a sweet boon, while those who purchased more recently will not. As for pricing – I hope you will give us a chance to prove ourselves and take the FREE 6 months (there is no obligation to continue), and see whether OzCode v3.0, with the shiny new LINQ debugging capabilities saves you time. If it only saves you 10 minutes every week, then it has saved you more than 8 hours out of the year, and hopefully paid for its expense. 
Thanks for the honesty. I'll note that speeding up the release cadence is one of the big advantages of the new model in our view – it will allow us to release features faster, without having to wait for one "momentous" occasion where we announce and ship a new major version, to justify the upgrade. We're currently hard at work on OzCode v3.5 cool new features and can't wait to ship them, as soon as they're ready. BTW if you'd like to give the rest of your team a chance to try OzCode v3.0, we just announced a freebie that will give them all 6 months FREE. https://www.reddit.com/r/csharp/comments/5ya6jw/ozcode_celebrates_v30_with_freebie_get_5/ 
It does not, but existing v2.0 licensees get 6 months FREE usage of OzCode v3.0, which does. If you decide not to continue past those free 6 months, you don't pay a penny.
Removed: Rule 6.
I'll try it here in a bit. Thanks!
Gotcha, thanks for letting me know, wasn't sure. 
Does this work with UWP apps? 
Removed: Rule 4. Make an attempt and if you still have issues, post the relevant code that you have and the specific issue you're having with it.
Even if it's not as fast, it's much more readable most of the time. So unless you need the fastest possible performance does it really matter? 
Call it "the latest in productivity apps."
Would I use double on wan Counter?
Sorry, I misread the code (figures since you posted VB to a C# board). It's not integer division. I think it might be because you divide by `dblTotal` before giving it a non-zero value. Try calculating/assigning it before calculating `dblPercent`.
I'll give it a try thanks! That makes sense
I tried rewriting it so that dblTotal and dblPassing were given values before Dividing but it did not work. I still get the same errors. https://gyazo.com/92231a59ef2271c9bc65fe950b01eeca this is the error in action
1. Windows Identity is Impersonated for a Web API Call 2. Web API completes request and returns OK or No Content (based upon request) 3. MVC handles this response and does a RedirectToAction (302) to another View in the MVC application (usually parsing the response content as JSON and using that as the model in the case of a POST or PUT) Sorry if I made it seem confusing, I'm just very frustrated with this issue right now. 
Chrome debugging! That's handy. 
Our team also needed a replacement for NDesk and we settled on Command Line Parser https://github.com/gsscoder/commandline It is simple, well documented, auto generates help text and even supports verbs very easily: ``` program.exe upload --address http://localhost ```
Where is it crashing and what does the exception say? Learning to use the debugger is helpful for situations like this. I'm sure someone who can run the code can give you better insight, but I'm guessing the SelectNodes is not finding any matches, so index zero would be null, and you're trying to make a call on that. Are you sure that your string is right?
The reason that you get the exception is that you assume that SelectNodes("//*[@id=\"uid_0\"]/div[1]/div/div[1]/div[2]/div[2]/ol/li[1]/div/div/div[2]/div[1]/div[1]/span") will return some nodes and then you take the innertext of the first one. Since SelectNodes returns null you get the exception! If you split it into two function calls then you have a possibility to check if you have gotten any nodes or not. e.g. string definition = "Nothing Was Found!"; var nodes = doc.DocumentNode.SelectNodes("//*[@id=\"uid_0\"]/div[1]/div/div[1]/div[2]/div[2]/ol/li[1]/div/div/div[2]/div[1]/div[1]/span"); if (nodes != null) { definition = nodes[0].InnerText; } 
It should be noted that some data is unnecessarily duplicated. If you pass around `IEnumerable`, `ToList` becomes unnecessary (but now you'll have to make sure you don't enumerate it several times). If you pass a stream to `File` method, generating byte array becomes unnecessary. You shouldn't worry about this before making sure everything works, of course.
[This question](http://softwareengineering.stackexchange.com/questions/134118/why-are-shortcuts-like-x-y-considered-good-practice) should help.
I do not see any assignment in x + y. The compiler will not guess.
I would verify the install. There plenty of options to select before the install begins
You just need the .Design packages, which every EF core provider has, I use Pomelo right now. You also need the .Tools packages from Microsoft to add the package manager CLI commands. This is all covered in quite good detail in the EF core documentation on migrations.
Thank you aloisdg. Another question. After adding my .gitignore file i do the next step on the guid. git add. The answer from that is "Nothing specified, nothing added. Maybe you wanted to say 'git add .'" What does this mean?
Ah thanks. I'll continue like this then. I just looked at the identical classes and felt like it just had to be inefficient; not only in structure and operation but even in the few seconds it took to write them both...
&gt; If x += y is equivalent to x = x + y, what's the point? Why not just type x + y? Because it's equivalent to x = x + y not x + y. There are plenty of things that can be accomplished in several ways in programming languages. If you don't like these, don't use them.
Debug it in Visual Studio, it will tell you what is null.
Was is a template from sidewaffle maybe?
Denormalization is actually used to improve performance (at the cost of having more complex code and a risk of inconsistency).
You should pick a more descriptive guide, like this: [Git Basics](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository)
No, open 2015 and you'll find the in built HTML 5 template 
I think you should learn a bit more about git first. * https://try.github.io/levels/1/challenges/1 * http://learngitbranching.js.org/
See https://github.com/quozd/awesome-dotnet#cli
You forgot the space between add and the dot. Because "git add" requires the file name what you want to stage for example git add read.me but in your case you're trying to add all the files then, instead of file name you type the dot git add . which basically mean all files recursively.
Honestly, it's pretty great. I use it for all of my C# projects and it works just fine. 
[removed]
Good introduction into fundamental concepts of DI and design patterns.
I just tried debugging it and it seems it is being passed in correctly, but the problem I'm having is only when the index page loads does the list get passed into the exportexcel method. when I try to click the exportexcel, I'm getting an error that says "Object reference not set to an instance of an object." and when I did debug, nothing is getting passed in. so how can I have it where when I click the export button, it gets the current data displayed on the index page?
I'm not 10% positive, but I'm reasonably certain that x += y will simply add y to x, while x = x + y will add x + y and them put them in place of x. The former should take fewer cycles than the latter. x *= y instead of x = x * y has x only being evaluated once according to microsoft. No idea what -+ is all about. Where did you see that one?
I'm picking up the video feed from my drone and passing it out to a web page using node.js as a server. So you can probably do the same thing. try something like this: https://www.youtube.com/watch?v=OZHinPswQ1g
I tried making an instance variable and putting the list in there so that both methods could reach it but it seems that isn't working either.
Could be partly a legacy of C and the days of unoptimized compilers, where x += y might involve fewer MOV instructions than x = x + y. Other than that, it's just syntactic sugar. You don't have to use them if you don't want to.
Damn, i'm using smarterasp.net. Id have to pay extra to use an node.js server. Is there another way? 
yeah trying to get it to work but I think my main problem is just being able to pass in the list which I can, but it only happens on page load. I need to retrieve the list from another method on button click.
You can re-stream video to another live streaming server (like youtube) with ffmpeg: https://trac.ffmpeg.org/wiki/StreamingGuide FFMpeg can be executed from C# code with System.Diagnostics.Process. Also you can use one of the existing ffmpeg .net wrappers to do that in one line of code.
probably. I'm using node because that's what the api uses. You can probably pick up the feed from the camera and stream it from the server yourself. I haven't personally done it, but i know someone who is using swift to do some image manipulation right from the stream. How about this? http://stackoverflow.com/questions/7595191/how-to-get-an-ip-camera-stream-into-c 
It's a bug in the compiler. I've seen it from time to time.
As others have pointed out, only like 5 majors things are introduced for every release and are covered within 2 pages on a blog post. I insist you check out StackOverflow's new documentation site http://stackoverflow.com/documentation/c%23/topics and here's a page just on C# 7 http://stackoverflow.com/documentation/c%23/1936/c-sharp-7-0-features
Yeah, no. That's not it even slightly. Do you think they don't test their compiler?
This may help you as well. https://github.com/github/gitignore
Their default web template does not use it anymore. But it's still supported. And frankly, the default templates were always pretty big shit. Just a quick glance of what's possible, but never something to build a new project upon.
Within your usual DbContext class, override your OnConfiguring method that takes a DbContextOptionsBuilder parameter and just call .UseMysql("connectionString") on that parameter. 
Did you install ASP.NET etc?
Of course.
Keeping bower does seem odd. 
Sorry if my comment came off like a complaint. I want to be able to use them. I just needed to clarify the difference. :)
Thank you. I appreciate it!
It's shorter, which means less characters to type. Programmers love to be lazy, I know I sure am.
I'm having the same issue. My best guess is that you are supposed to load them in some particular way - unbundled, unminified, the path must be resolvable to actual files, no ?random stuff - or something to that effect. It wven says it supports Typescript, so it obviously needs code mappings for that. Maybe it needs code mapping for JS files also. I am also having a serious issue with BrowserLink, where it scrolls down the page each time it updates. Really annoying-like. But there I suspect web essentials, which is now just a meta package. Many odd bugs/quirks with this release - exactly as it always is. ;)
Compilers don't have bugs?
I'd just be shocked of something as simple as this causes a bug
Well the solution file doesn't load for me: https://gist.github.com/anonymous/97ac77b371bd230e06043686249c1cc1 Edit* Looks like you made it in VS15 but I am using VS14.
Thanks, that one certainly seems compreeeeeeeeheeeenssiiiivee!! thanks again
I think not. If your target is Windows Desktop only, you can use the DesktopBridgeToUWP. However try to style your WPF app like an UWP app, because else users will rate you down. (e.g. Hamburger Menu, 48pt height menu items, etc..)
I recommend you start with WinForms. Though being old, it's really friendly with beginners. When you're familiar with WinForms , switch to WPF. Maybe it's hard to switch to XAML , but once you've done, well, welcome to modern era where UI it's declared instead of drag and drop from designer. After that you can try Uwp/Xamarin(XAML),Android(XML) or web(HTML), it's fairly easy once you've get used to one of those markup languages. For books I personally recommend head first c#. It lead me the way from console to UWP. Good luck and happy coding☺
&gt;&gt;I'm not 10% positive Doh! Interesting. I wonder what Microsoft means then that the *= has the x evaluating only once while the x = x *y evaluates twice. Unless that code works out differently.
Thanks for the link. I'm enjoying the new C# features already. Nice improvements. Tuples and local methods being my two favorites.
Ah, I got it. They're referring to nested objects (e.g. `Outer.Inner.Value`) are only calculated once, so something like: var tmp = outer.Inner; tmp.Value = tmp.Value + 1; The getter for `Inner` is only called once instead of twice in the naive case. void Main() { var s = new DataStructure { Nest = new Nested() }; Add(s); Console.WriteLine("----"); AddEq(s); } public class DataStructure { private Nested _nest; public Nested Nest { get { Console.WriteLine("Executed get nest"); return _nest; } set { _nest = value; } } } public class Nested { private int _value; public int Value { get { Console.WriteLine("Executed get value"); return _value; } set { _value = value; } } } public void Add(DataStructure s) { s.Nest.Value = s.Nest.Value + 1; } public void AddEq(DataStructure s) { s.Nest.Value += 1; } Prints: Executed get nest Executed get nest Executed get value ---- Executed get nest Executed get value
my thoughts exactly
Know the feeling. Using unity which is stuck on 3.5 cry
You will see hint of some other language in every language.
It's useful for decomposition patterns which I am not sure made it into C# 7. E.g. `case (var x, 7):` would match a tuple with 7 as its second element.
\#2 is not true, you cannot separately overload any of the assignment operators. And there would only ever be one method call in the first place – for the `+` operation – as assignment is defined by the C# spec to be a simple copy. You seem to be thinking of how C++ works instead of C#, where you *can* implement your own assignment semantics. \#3 is also not true, events are a special case. You cannot overload `+=` and not `+` or the other way around. For events you can implement `add` and `remove` like how you implement `set` and `get` on properties. Relevant documentation: [Overloadable Operators](https://msdn.microsoft.com/en-us/library/8edha89s.aspx) &gt;Assignment operators cannot be overloaded, but +=, for example, is evaluated using +, which can be overloaded. C# spec, section *7.3.2 Operator overloading* &gt;When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded. For example, an overload of operator * is also an overload of operator *=. This is described further in §7.17.2. Note that the assignment operator itself (=) cannot be overloaded. An assignment always performs a simple bit-wise copy of a value into a variable. See section *7.17.2 Compound assignment* of the C# spec for the details of how the operation works. 
The real answer is there is no difference between `x += y` and `x = x + y` apart from the fact `x` is only evaluated once, and possibly some type conversion when the type of `x` is not equal to the type of `x + y`. (Exception: events are a special case where the `+=` and `-=` operators map to `add` and `remove`). The difference in evaluation can certainly matter. E.g. compare: int[] a = new int[2] { 0, 2 }; int i = 0; a[i++] = a[i++] + 5; // i is now 2, a[0] is 7, With: int[] a = new int[2] { 0, 2 }; int i = 0; a[i++] += 5; // i is 1, a[0] is 5 Most of the time though, it's simply more convenient and less repetitive to write `x += y` than `x = x + y`.
They announced a few months back that they're not gonna get pattern matching completely working in time. So they decided to split it up - parts of the features we got now, rest still has to come. Or use F# and get all that fancy stuff years before C#. :-)
&gt; goto considered harmful.
The *is* operator has been around since C# 1.0 was released in 2002. C# 7 added on the idea of patterns, which apply to *is* expressions. The operators also do different things: C#: Checks if an object is compatible with a given type. Python: Checks if two operands are the same object.
By code generators, do you mean replace and original? I thought those were in C# 7 after they took the time to even demo the feature being used for INPC. I've noticed this feature gets left out of most C# 7 resources. 
Thanks. Do you know if the latest tooling still supports the old project.json model? I have a project at work using that and I don't know if management will buy "new and shiny" as a reason to upgrade to a vs 2017 license
I can't wait to try them out, the tuple literals and deconstructors look awesome. In one of my recent projects I wanted local functions because it made perfect sense (I had also been working with JavaScript at the same time so was in that closure mindset). Was able to get some thing that looked like a local function ... Kinda of. 
I don't know if the new tooling still supports the project.json model. I suspect it will always try to migrate it. That model is deprecated and not really supported anymore in the long term. It was always a preview anyway. If you're working on a .NET Core project, there's really no other option than upgrading to VS2017 or to abandon VS and use VS Code instead.
Super minor nitpick that I feel compelled to point out because it's driving me crazy: In your [RabbitMqBootstrapper class](https://github.com/kstatz12/Busey.Core/blob/master/Busey.Core.RabbitMq/RabbitMqBootstrapper.cs), you have a java style getter for the private IBus field. Why not use a property? It just seems bizarre to see a Get&lt;X&gt;() method in C# code. If you want to maintain control over it, use a private setter. private IBus _bus; public IBus Bus{ get{ return _bus; } private set{ _bus = value; } } Neat project though! Thanks for sharing.
The `GetMethods` has an overload accepting `BindingFlags`. With the `BindingFlags` you can limit what methods are retrieved, e.g. you only want public member methods declared in the class, without the base class methods.
Which i can't use because of backwards compatibility with 2013 and 2015
That makes sense. Brilliant way to test it.
... var isn't a type. Do you mean "the auto-out parameter var pattern"? If so, it's just so you can use the new auto-out-param introduction code while keeping your type inference.
It even gives you a warning to do so.
It doesn't - it does a forced migration. Project.json is dead and everyone needs to get over it and migrate or get stuck in a pre-release ghetto.
There are SOAP, SOAP and also SOAP and SOAP. So be sure it is compatible =) (just saying - the easiest way to do it to implement WCF service. But it can get tricky if there are some special requirements to this as the details of the Implementation for SOAP differs for WCF, JAVA, php and older microsoft asmx implementations) And you might want to get a look on SoapUI - a usefull tool to debug any soap service or create a mock for it.
I mean that I already have a variable that I put into the switch. Why would I need another one that is literally the same?
Thanks, I've tried something to this effect Task.Run(() =&gt; { using (var udpClient = new UdpClient(port)) { while (true) { //IPEndPoint object will allow us to read datagrams sent from any source. var remoteEndPoint = new IPEndPoint(IPAddress.Any, port); var receivedResults = udpClient.Receive(ref remoteEndPoint); input_data += Encoding.ASCII.GetString(receivedResults); SimplerAES simpleAES = new SimplerAES(); string decrypted_message = simpleAES.Decrypt(input_data); LogManager.ConsoleOut("Recevied " + decrypted_message); } } }); the problem is the same, I still end up with a shared memory thing to pass the input
 int max = int.MinValue; foreach (int x in xs) { if (x &gt; max) max = x; } 
So you would only ever use `is null` to check if a variable contains a reference type? That seems odd. 
So is `1 is 2` true or false in C#7? The new is-constant-expression doesn't make sense to me.
There is a lot of resources on the [Xamarin website itself](https://developer.xamarin.com/). They made something really nice called [Xamarin Workbooks](https://developer.xamarin.com/workbooks/). It's basically an interactive tutorial where you read the course and test the code in the same place. You can update the examples with your code and see the changes directly on the emulator. You can check [this video from VS 2017 launch event](https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2017-Launch/160) where the speaker talks about this.
1. Would you have several instances of the same application running on the same computer at once? 2. Where would they be running if not on the same computer? 3. What is your application doing that the instances need separate data files. 
I don't know what kind of work would be involved. But there are tools out there already I think: http://www.ndepend.com/static-analysis-c
Pretty cool but not free :P 
What about starting your application with administrative rights?
I don't understand how the new `is` works. &gt;Examples of patterns in C# 7.0 are: &gt; &gt; **Constant patterns of the form c (where c is a constant expression in C#), which test that the input is equal to c** &gt; &gt; Type patterns of the form T x (where T is a type and x is an identifier), which test that the input has type T, and if so, extracts the value of the input into a fresh variable x of type T &gt; &gt; Var patterns of the form var x (where x is an identifier), which always match, and simply put the value of the input into a fresh variable x with the same type as the input. if (o is null) return; // constant pattern "null" So in this example, the pattern is a constant of value `null`. But later: case null: throw new ArgumentNullException(nameof(shape)); &gt; The null clause at the end is not unreachable: This is because type patterns follow the example of the current is expression and **do not match null**. This ensures that null values aren’t accidentally snapped up by whichever type pattern happens to come first; you have to be more explicit about how to handle them (or leave them for the default clause). This is a conflicting message. One thing is telling me null can succeed in pattern matching, but another is telling me it can't. I don't get it. 
You're not alone. I understand why they did it, but it still looks weird and hackish. I'd rather 'out' never became a thing and we just had proper tuples from the start...although I guess that would ruin the elegance of if(TryParse).
 int Max(List&lt;int&gt; x) =&gt; x.Aggregate(int.MinValue, (i, j) =&gt; i &gt; j ? i : j); But if you *must* use a loop: int Max(List&lt;int&gt; x) { var max = int.MinValue; foreach (var i in x) { max = i &gt; max ? i : max; } return max; } Really, though, you should do your own homework.
It didn't make it, and for now I think it's uncertain if they will continue working on it. However it could enable huge performance improvements and also solve many problems where you have repetitive code. 
Sorry but last couple questions. 1. How is the hash part being made? Is it only temporary and just based on the instance. 2. If it is based on just the instance data then do you have any plans to persist the data or would you just reset the server connection and redo the settings if the program is restarted. 
What about code generators, would you have used them if they'd have made it? 
The type pattern is perfectly clear. The question is what is the use of the var pattern.
Maybe, maybe not. I don't have anything specific on the docket that would benefit from such a thing, but I was thinking it might be a good way to template a discriminated union.
Oh, I think I misunderstood what you were saying. I guess you're talking about `if (x is var y)`. If that's true, then I agree, and it's basically pointless. Maybe you could get some use out of it in an expression like this. (Foo.Bar.Method() is var y) &amp;&amp; y.IsActive &amp;&amp; y.IsEnabled
also case var i:
:(
Your description makes sense to me. The only thing I'm struggling with is this piece from OP. &gt; The null clause at the end is not unreachable: This is because type patterns follow the example of the current is expression and do not match null. This ensures that null values aren’t accidentally snapped up by whichever type pattern happens to come first; you have to be more explicit about how to handle them (or leave them for the default clause). It makes it sound like `case null` can never possibly be hit, but you're saying you've executed code that hits it. Maybe it's just a mistake in the blog.
Do you actually need to use the command prompt to accomplish it? I think most windows config can be controlled via registry or COM outside of CMD. You may need to [require your application to run as admin](http://stackoverflow.com/a/6413024/564755) since applications can't elevate themselves in Windows (would otherwise need to launch a new process as admin) http://stackoverflow.com/questions/33700164/how-can-i-disable-windows-firewall
Check out NCrunch as well.
Again, it's because it's running in another thread and you're seeing the usual multi-threading access issue (two threads attempting to access the same variable at the same time) Try this: Put a lock around the string appending code. And move the console write outside the task, also inside a lock (using the same lock variable for all of them). This separates the writing to the string from the reading from the string, and the common lock variable means they won't be stepping on each other. 
Thank you for taking the time to reply and clarify. I think I can handle the locking - I guess my confusion or question here is, is this normal? To me this feels wrong :D As I mentioned I've not really done anything with async, I've done tons of little things with multi threaded apps, but I thought async was supposed to magically fix this for me. Secondary to that, I guess, is there a better way, or is this a normal path I am going down here?
One one hand, I love that it enables a more general AOP solution instead of catering only to INPC. On the other hand, it seemed like a language feature devoted to tools only. What if I want to make INPC easier or perform some other AOP task without integrating a new tool into my build?
Ohh ok, so I am confused about nothing. Basically async does nothing for me in terms of reading UDP. I might as well just spawn a seperate thread receiving UDP and use a global exchange string with locks and skip async all together. Hah, who knew. Thanks
...this sounds like a question that would be asked on a homework assignment.
If you want to do it via registry without cmd, you can just this (You need to be admin): var data = 1; // Set 1 for enable or 0 for disable using (var key = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile", true)) { if (key != null) { key.SetValue("EnableFirewall", data); } } For reference: https://technet.microsoft.com/en-us/library/bb490624.aspx
That word can have so many different meanings, you're not explaining in what context, ... how are we supposed to answer it!?
It hurts so bad man... I want tuples too. Damn Unity guys, get to work!
Yes. This is it.
Holy crap that site takes over two seconds to load!
This won't really take off until they make it available to all versions. Until I'll stick to nCrunch.
nCrunch Grid is *amazing*.
A slightly cleaner way would be this:- var methodInfos = (TypeInfo) typeof(YourService); var declaredMethods = methodInfos.DeclaredMethods;
If you are just after getting what directory your program is executing from: Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) That way it doesn't matter if you are in AppData or ProgramFiles, etc. That said, isn't there some sort of centralized place that you can store settings and then use a unique identifier, such as your weird hash thing, to associate them with different instances or your app? 
I highly recommend Resharper command line tool. Free and supports c# and there is a c++ version. https://www.jetbrains.com/resharper/features/command-line.html
Also: * There're attributes like [NotNull] which you can put on arguments, properties, return values etc. to help R# find null-related mistakes. * JetBrains decorated most of .NET Framework with these attributes. * Within functions, flow is fully analyzed to find possible NREs.
It should be noted that while this is a fine exircise, **never ever do it**. You shouldn't store binary data as base-64 if you can avoid it, especially with large images, especially in UTF-16 strings.\* You shouldn't convert binary data to byte array, you should write to target stream instead (file stream, HTTP output stream etc.) Otherwise you pointlessly waste resources. \* There're some exceptions to avoiding base-64 encoding, like embedding tiny images in inline UTF-8 CSS to avoid extra queries when transfering data over non-pipelined HTTP 1.1, where it actually improves performance, but these cases are rare.
For build servers you can install the `Microsoft.Net.Compilers` package to your project. It will cause the project to be built with a more recent C# version than available. So there's no need to upgrade your TeamCity - just add a Task to add this package to all projects.
Oof. This SKU gating again? I was hoping to move off of nCrunch (memory gets tight in 32 bit land), but I guess that's not super likely. 
Start with the resources on the sidebar. Let us know if you have specific questions. 
Oh didn't see it thanks allot :)
Thank you so much :)
(:
Any updates?
Doesn't ncrunch use out of process to run tests? 
NCrunch is brilliant. Love it. I've never had a single problem with it. Recently, I've been trying ReSharper Ultimate in VS2015 and the live testing functionality is just broken. It's absolutely terrible. Half the time it just doesn't work, and when it does, it's unbelievably slow compared to NCrunch (which is uninstalled right now). In the two weeks it's been on my machine, I've submitted half a dozen bug reports and at least a dozen actual exceptions (I'm fairness, two were actually VS exceptions).
&gt; and disappointed that all the genuinely interesting stuff in pattern matching was deferred to a future release. Same here! I really like these changes, but full-fledged pattern matching is *so good* that I'd consider it and deconstruction alone worthy of a major version bump. Add something like Scala's `case class` or Kotlin's `data class` and I might even find myself using C# again for personal projects! Consider the deconstructor example they used: class Point { public int X { get; } public int Y { get; } public Point(int x, int y) { X = x; Y = y; } public void Deconstruct(out int x, out int y) { x = X; y = Y; } } In Scala, the equivalent code is this: case class Point(x: Int, y: Int) This also gets you structural equality, a toString implementation that looks exactly like the constructor syntax, and some more esoteric Scala stuff that allows you to instantiate `Point`s without the `new` keyword (which is kinda nice, as `new` clutters expressions where you're trying to represent the shape of some kind of nested data). I think tuples with named elements might be a better fit for C# in general, though, as something like the `case class` syntax would be a pretty serious deviation from C#'s current design. I really like having a convenient syntax for declaring types like that, though, as it means people reading my code don't have to read through a bunch of noisy properties + code that sets their values in the constructor to grok their behavior. It's not a whole lot shorter in absolute terms (though it can be if you start declaring instance methods), but I have a huge boner for reducing syntactic clutter to improve the signal-to-noise ratio of my code, so I'm a fan. I'm also a little torn on pattern matching in `switch` statements, because now the same keyword is used to declare a block where patterns are evaluated top-to-bottom *and* old-style `switch`es. I like that it introduces minimal new syntax, but those seem conceptually different enough that a different keyword might be appropriate. Perhaps `match`? &gt;Local functions improve usage for some things like generators using `yield` and can do save you an allocation on some things that would currently mean lambdas and closures. They're also nice for expressing recursive algorithms that are most easily expressed with an accumulator of some kind, as you can hide that implementation detail from callers and guarantee that nobody's calling your function with some rando garbage in its accumulator that your type system can't enforce the correctness of: // it's also nice that the implementation details are no longer part of the function's type signature public int ThingImplementedRecursively(int x) { if (x &lt; 0) throw new ArgumentException("ayy lmao ur parameter sucks", nameof(x)); return RecursiveHelper(x, 4).current; (int current, int notBlatantlyModifiedFromTheirExample) RecursiveHelper(int i, int j) { // recursion or some shit } } Standard disclaimer that I'm nowhere near as good a language designer as the people working on C# and also haven't written anything in it since 3.5 (so my opinions are probably hilariously outdated, haha) :)
:)
There is no "faster" way. From the runtime's perspective, there is zero difference between the two, it is solely a convenience feature so you can write shorter code.
:)
There's a StackOverflow question on [how to retrieve system uptime using C#](http://stackoverflow.com/questions/972105/retrieve-system-uptime-using-c-sharp). Not sure if Mono supports PerformanceCounter though. Might be worth checking the [Stopwatch answer](http://stackoverflow.com/a/22408542/15880) to that question. Might also be worth checking if .NET Core does. .NET Core's SDK and tooling finally reached a first release instead of being betas and release candidates.
The attributes are really neat - NotNullAttribute, CanBeNullAttribute, custom contract annotations for Guard-style helper methods, string formatting parameter lists. On top of annotating .NET framework code, you can provide your own annotations for third-party assemblies. It is quite powerful and really useful.
I prefer to have all my namespace references in `using` directives at the top of my files. This provides a consistent place to examine what a file's external references are, while eliminating the need for creating some arbitrary system to determine how many namespace usages warrant a `using` statement. --- An interesting related topic would be C# 6's new `using static` feature. I personally have never implemented it, but can see the value. 
Apologies, I mistook what you meant by your first statement, and that changed how I read the rest of your post. 
So you could include but not actually have the reference? I'm not seeing the difference. (C# programmer here) It would seem like in both cases it's doing the same thing, just with different syntax.
It's not performance problems. Sometimes the nCrunch test engine gets "stuck". It will say a test is failing when it isn't - re-running the test in a new test runner process fixes it. It happens vice versa too. Not sure why it gets stuck, it just does. Unfortunately it has happened enough time for it to be questioned and disregarded as a useful tool. It has happened to me at least five times. I wish I could narrow down why it happens or even reproduce it.
There is absolutely no difference here. Anyone who tells you there is, is lying. In this particular situation it comes down to readability preference. I personally have all my `using`s at the top of my files.
Never forget: the compiler is smarter than you
Is it not possible to use a native unix command to get the uptime?
Yah ended up doing that, plus starting a counter with a thread sleep of 60000 milliseconds piped into a long. The process I am working starts on boot. Thanks for your comment
There is no difference in terms of performance. The resulting Intermediate Language code should be the same.
In C#, all your references are centralized in one spot. In C, each file declares its own references. Also, the `#include` directive literally copies the code from the included file into your own file. This can be done because C uses separate header and code files. Which also means you need to write include guards for your header files to prevent the same file from being included more than once which will cause compiler errors. I could also talk about static and dynamic linking, but you never have to worry about that in C# as everything in C# is dynamically linked (DLL files).
Write a program named ChatAWhile that stores the area codes and rates in parallel arrays and allows a user to enter an area code and length of time for a call in minutes, and then display the total cost of the call. here is the problem sorry i am on spring break and i cant go to tutoring like i usually do so help me out guys, thanks in advance
Are you getting an error when you compile? Or just not getting the result you want?
No I'm getting an error from the line above the while loop that says "for x ect " my teacher told me to put that and I also forgot to put the length of the call from the user input. Should I put that in the bottom or right after I ask for the area code 
I love how Microsoft never predicted running .Net on an OS capable of staying up for more than a month.
in your first for loop, you are referencing area.Length - there is no variable called area. You are also referencing a boolean called 'found' which is not declared, or used anywhere so there is some fundamental problem with the logic in your looping.
Ok I will try to following solution you guys suggested when I get off work. Thanks guys for the replies and help. 
They did, which is why we have Stopwatch. Environment.TickCount returns a value directly from the OS.
That solution really isn't the greatest - you're gonna get a good amount of drift or error as that thread won't ever sleep for exactly 60000 ms. Here's a better solution: Query Stopwatch and save value as watch1. Query Uptime and save value uptime1. When you want to know how much Uptime has passed, query Stopwatch again as watch2 Uptime = (watch2 - watch1) + uptime1. Here's an even better solution: use pinvoke to call the syscall that uptime does.
You're calling a method which expects milliseconds with a tick count. Ticks are not milliseconds, so there is probably just an overflow. 
As somebody who came from PHPStorm ( another Jetbrain product using the same base ) and several weeks building with Rider. My exposure to VS is more limited,and i always found it somewhat lacking. VS 2017 feels a bit too much MS integrated. Rider is a good product, there is no doubt about it. The code analyser is great and very helpful. Even to extreme helpful in detecting small coding issues. No wonder because it uses the same tech as there VS+ReSharper plugin. You get a lot of the other benefits from the years that Jetbrain put in there platforms. But ... a few issues kept popping up. Like how its been a struggle when there are errors in your project.json file and it simply will not load the project ( and indirectly forces you to use a external editor to fix the files ). A issue that i ran into several times. When working on two locations ( home + work sync via private git ) at times the Rider configuration files get messy. One machine can influence the way rider makes some of the xproj and other configuration files. To the point that i spend hours trying to fix changes on one machine and visa versa. So despite being a great supporter of Jetbrain products, i ended up switching over to Visual Studio Code + OmniSharp C# plugin. It became frustrating by changing things without my permission. With Visual Studio Code, my entire project became a single configuration ( csproj ), instead of 4 different files. Having a issue in VSC with a configuration files, did not prevent VSC from loading the files. Technically, this does not answer your question, but it shows some of my experiences with Rider. If your only a single PC develop, that will be not a issue but in a team or multiple locations Rider can give some issues ( for now ). My vote is simply try out all products. Everybody has different needs and requirements.
Thanks, but that didn't help
The fact that it's an `ArgumentNullException` rather than a `NullReferenceException` seems to indicate to me that you're passing in a `null` reference _into a method_. If I had to guess, either the exception is being thrown in the `inputs.CAMERAFromArray` method, or the result of this method is returning `null` which then might cause the exception to be thrown from `Items.Contains` (But I don't know off the top of my head whether or not `Items.Contains` checks or cares about a `null` value passed in. The MSDN docs don't specify that it throws such an error, so I suspect not.) Can you post your `inputs.CAMERAFromArray` method?
 public string CAMERAFromArray(int phone) { //Console.WriteLine("hello" + phoneDataArray[13, phone]); return phoneDataArray[13, phone]; } This is the method, thing is it usually handles null, would it be because I'm using visual studio enterprise instead of the version i usually use? 
Try putting a breakpoint in there and double-checking that `phoneDataArray[13, phone]` isn't a `null` value. If you haven't explicitly initialized that element, it will be `null` by default.
I have had this issue in the past with .NET Core and VS2015. I had to craft a custom .testsettings file that explicitly included my test projects and select that file under the Test menu.
&gt; VS 2017 feels a bit too much MS integrated. I always found this (and similar) criticism of a Microsoft product to be weird; and kind of... pointless? "You are too integrated with your company's toolset!" Like that is kind of the point of using their tooling; it all works together. Honestly that is a huge strength of VS in my opinion. &gt; project.json file Is this a Rider only thing? MS / .NET has ditched json project files. &gt; When working on two locations ( home + work sync via private git ) at times the Rider configuration files get messy. This is a struggle no matter what; but at least when you are signed in with VS your settings sync / stick with your Microsoft account.
I love resharper; and was 'meh' on Rider. I spoz if I was already used to their other IDEs it wouldn't be so bad? Given there is the Community edition of Visual Studio; I am not sure Rider would hold much appeal to me even if I didn't have MSDN at work.
VS Code with plugins is the only reasonable alternative to VS2017 for .Net core if you're on their new build system, so if you don't qualify for the community edition of 2017, that could be a good driver
Project.json files are the main project files in .Net Core prior to last weeks update and the release of VS2017. Since the new tooling is so new, it'll probably be a little bit before everyone is migrated off.
That's correct. For instance, you can build a .csproj or .sln file from the command prompt using msbuild (this is essentially what a build server does). I may have been a bit unclear about that point. I believe (it's been a long time since I did any Visual Studio extensibility) that msbuild can build a .csproj file because it complies with the msbuild standard for project files, and/or Visual Studio has installed extensions and build targets that allow msbuild to figure out any directives in the .csproj that it doesn't natively understand. So it might be more accurate to say 'it's not C#.. it's Visual Studio and msbuild', but it's still definitely not C# :) And now I've realized I'm way down the rabbit hole on this one and, in the best Reddit tradition, have written a thousand words of response to correct a tiny error in someone's post that has nothing to do with OP's topic. So I'll shut up :)
Thank you for your input i appreciate it
Thank you for your input i appreciate it and will test this out
Wasn't sure if this was something Rider was doing / keeping itself.
VS Code is pretty light weight; and free. Rider is still EA... but I can't imagine it will be free.
Of course there's VS Code and VS for Mac nowadays. Neither can fully replace VS on Windows, but Microsoft is working on it for VS for Mac- it relies on Mono for the pre-core stuff and Xamarin for the cross-platform stuff, but I'm very enthusiastic about .NET Core. 
You are welcome ! I've edited the post with further clarifications, I hope they help you
NTL;DR thank you :) (Not Too Long, Did Read)
They should be switching to the Roslyn Project System, a new library for working with csproj files. I don't know if it is RTM.
Download Visual Studio 2017 by March 14, get free 60-day access to Xamarin University. https://www.visualstudio.com/vs/whatsnew/
I personally like both Visual Studio and Jetbrains IDEs in general. Normally I'm a proponent of trying out both to see which you prefer (and this could vary depending on what you're working on, e.g. API vs front end vs console). However, you can't use both for the same project at the moment, since VS 2017 dropped project.json entirely; it's pretty safe to assume Rider will be updated soon, but I could not tell you when. Rider is also not actually release ready itself (I get different errors behind the scenes all the time; they haven't impacted me yet, but all the same they're there). So, for R&amp;D I'd recommend checking out both. For a production application I'd say VS 2017, with the caveat of that answer changing in the next year. 
Thank you!
I will add another Rider vs VSC comparison here, for the people who are interested. Fast ... Rider like most Jetbrain products is one hell of a lot of Java code loading at startup. VSC is darn fast to start. * Rider is ... loading platform ... ( Not counting project selection ) loading ... loading ... Editor open ... Loading Project. Loading project Index ( what can be painful for big projects ). Loading Project ... Done. * VSC is ... loading, ... loading... Done. Memory usage. Rider is pulling at around 400MB here. The same project is doing 100MB on Visual Studio Code. Not a real issue with most systems but nice if for instance you have a small tablet with 2 or 4GB. Big projects in for instance PHPStorm ( the same base as Rider ) easily push 500+ MB triggering a warning to increase memory. Mobile. You can have VSC as a mobile development platform on a USB stick. Technically it can be done with Jetbrain products but its way more difficult ( and slower to start etc ). No slowdowns: Something that i forgot to mention is frequent lag spikes on Rider, when you change a setting and it tries to reload the whole project. I can understand reloading the project after you save but it becomes frustrating as you tip, it constantly lag spikes on each character as it tries to reload / deal with changes. Because Visual Studio Code works more like a Editor, it does not have that issue. Multi-platform: VS2015/2017 is still somewhat platform locked to Windows. Rider and VSC are multi-platform. In regards of getting it working on different platforms VSC has the upper hand ( in my opinion ). Rider relies too much on there own Java platform and there can be conflicts ( as i have had with PHPStorm on Linux at times ). Disadvantages: Omnisharp has less configurable options then Rider. It also lacks some of the nice hints to write better code. Omnisharp is more basic in analyzing code. Errors, some specific issues, hints but not so extensive like Rider. Some history: Omnisharp is also much newer, the real development has only been pushed by MS employees a year or so. Its called Omnisharp but the ownership is technically MS as they took this over. Where as Rider using the Resharper plugin base had years to fine tune. Part of that same push from MS to be more open source, is pushing Omnisharp development forward with more focus. A lot of those alternative plugins like Resharper are all paid. The biggest difference: * Rider will probably cost 100 euro / year ( Subscription model ) or more for a single developer. * VSC + Omnisharp is free. And frankly, VSC/Omnisharp is developing at a much faster pace then Jetbrain does with there products. 
Remco is great. We've had a few issues with getting a licence server working properly. He was super helpful. I've hesitated contacting him regarding this engine problem as I can't reproduce it at all.
Can't live without NCrunch! 
Can you show us how do you assign your result to the DoWorkEventArgs.Result property ? Additionally can you post the complete code of the DoWork method and how you set up the BackgroundWorker ?
That's what my team thought, took a week to reinstall R#. VS still has issues with navigation and lacks many refactoring tools (or they're not documented). 
[ReAttach](https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach) is quite useful when you need to attach many times to the same processes for example when dealing with IIS altough it's useful only for previous versions of Visual Studio because Visual Studio 2017 has the same feature [already built in](https://blogs.msdn.microsoft.com/visualstudioalm/2017/03/07/reattach-to-process-in-visual-studio-2017/) 
Assuming management approves your purchase request for vs2017 licenses......*sigh*
Very handy 2017 tip, thanks! 
It is doing the same thing in both cases. Both statements reference the static Console.WriteLine method. The namespace declaration is very different from a C/C++ include. The namespace reference is not actually pulling in a reference to the type; the type is referenced by CSC.exe during compilation. mscorlib.dll is implicitly linked into all assemblies created by the C# compiler. Even if a referenced assembly is not used at all (there is a reference but no calls are made to assembly members), there is no runtime overhead because the CLR only loads DLL files when the DLL is actually needed.
Maybe I'm confusing some of the code but you appear to be setting the list to **DoWork**EventArgs.Result but trying to process a list which doesn't exist in **RunWorkerCompleted**EventArgs.Result, which is reserved for errors and does not have a public setter. Might be a couple ways of dealing with this, again, if I'm understanding what you're doing. Create a class shared`List&lt;Update&gt;` and add to it, then in the RunWorkerCompleted method, trigger a `Process()` method to do the work. Another way would be to create a class shared `ObservableCollection&lt;Update&gt;`which can trigger the updates when the collection is updated.
Yes, I use it every day on [Vaporum](http://vaporum-game.com/landing-page/), a steampunk dungeon crawler being made in Unity, and I just can't go back to VS which feels like a disonaur compared to a jet. I definitely recommend it over VS 2017. Code navigation, intellisense, intelligent code completion, quick fixes, ergonomic and natural-feeling hotkeys, all that stuff is far better in Rider. For me, it's all about productivity, and Rider gives me a lot more of that than VS does.
Really? What option is it under? 
That's actually pretty useful. I'll try it out. I think I could actually use that on my current project to some benefit.
I feel unbelievably dumb right now. You are a genius hahah. Turns out I ended up accidentally commenting out the null check on the list before sending the updates from the objects in the list to their respective server in the ListView. The way I have the background worker...working, (and this may be bad practice because it certainly doesn't feel 'right') is sort of like a ski lift. I wasn't sure how else to run it continuously, so at the end of `RunWorkerCompleted`, I call `RunWorkerAsync`again to start it over. Before I left out the null check, if the object returned from `DoWork` was null, it just skipped through and restarted (this would be the case immediately after opening the program, and until you actually added a server address to the list). At that point, it would scoop it up and actually have something to work with. Thanks for making me look back through it! I hadn't removed that check when I was still testing with just a single instance of `ServerInfo` being returned, so I hadn't even thought about it. 
CodeRush for Roslyn - Easy on the RAM, quick templating of common language constructs, disassembler, etc.
The reason I'm using the `RunWorkerCompleted` event to send the updated info to the ListView is so that I can safely call `RunWorkerAsync` again at the end of it, to loop the bgWorker continuously. I say safely, but honestly I don't feel like it's the best way of going about that. I mean it works, but yeah haha. Would you know of a better way of keeping the bgworker running continuously to handle the updates every few seconds while using `ProgressChanged` instead? As far as I'm aware, if I tried calling `RunWorkerAsync` at the end of ProgressChanged, it would throw an exception because the bgWorker was still in a busy state, no? As I mentioned in my other comment above, it turned out I had accidentally commented out the null check on the object. After fixing that, I was able to retrieve the objects in the list from `RunWorkerCompleted` just fine haha. I feel pretty dumb, but I've been testing for a week now only using 1 server and returning 1 single instance of the `ServerInfo` class without issue, and at some point today accidentally removed that null check. Thank you for your tips though! Definitely gives me some more stuff to read about :)
* Productivity Power Tools * SmartPaster
I actually disagree. I find Rider to be faster and easier, once I became familiar with it than VS. It could also be because I'm a VS hater and think it is too bloated and tries to do too much. Jack of all trades, master of nine is perfect for my opinion of VS.
I believe it is integrated, since VS 2013, with the VS feature known as the enhanced scrollbar. In VS head to Options | Text Editor | All Languages | Scroll Bars and make sure the "behavior" setting is set to "Map Mode". Then, head into ReSharper's settings and under Environment | Editor | Editor Appearance you can set the ReSharper marks width to adjust to your preferred style. 
Could you post the code in question so we can see it please? Kinda hard to tell what the issue is with no code.
First off, where can I find that ATM to use myself? Secondly, feel free to post the relevant parts of your code and someone may take a look at it.
I would consider ditching the manual XML parsing and traversal and leverage the built-in `XmlSerializer`. That will setup your parent/child trees automatically for you. Then you can start diving in to what is/isn't working much more easily without worrying if your XML traversal is correct. For example, given the XML you posted: [XmlType("node")] public class Node { [XmlAttribute("black-hits")] public string BlackHits { get; set;} [XmlAttribute("white-hits")] public string WhiteHits { get; set;} [XmlAttribute("guess")] public string Guess { get; set;} [XmlElement("node")] public List&lt;Node&gt; Nodes { get; set; } } XmlSerializer serializer = new XmlSerializer(typeof(Node)); Node rootNode; using (var file = File.OpenRead(@"C:\myDecisionTree.xml")) { rootNode = (Node)serializer.Deserialize(file); } //do something with the nodes
np, we've all been there. Glad to hear you got it working!
"tries to do too much" is a complaint?
Or people who can't use Visual Studio *due to it being a crashy and horrendously slow*. Rider looks like it will be a solid replacement, but it is not ready yet.
It's good so far, but it needs a lot of work.
&gt; I would want the events to be invoked the same way and time as any object that implements ITurnable. Interfaces cannot tell classes how to implement anything. Maybe what you're looking for is to keep your interface, and then also make an abstract class (e.g. MultiplayerGame) that has your implementations of the interface. Then you could create new classes (e.g. Hangman) that inherits from Multiplayer game, and you won't have to rewrite any implementations of your ITurnable interface.
Ok whenever you are implementing repetitive code it means you need abstraction, this is doable in both abstract classes and interfaces. Your situation is quite common in game dev, look up the command pattern for details... Just an example, you abstract away with another layer, which is necessary as you need event called in the methods. ITurnable gameObj = new TurnableRegenPotion(); ICommand regenCommand = new RegenAtTurnEnd(gameObj); Turn myTurn = new Turn(regenCommand); //or you could have used method yo add the command, but that makes Turn mutable If (some game logic) myTurn.Execute();
I don't like the integration with databases or Team Services/VCS. I'd like to disable them and not have VS try to "help" out.
What is message pack for those of of the loop?
I don't want to 'ignore' it. I want VS to stop trying to even reference it. I use git and can read the git history from the command line. As for DB integration, I'll use a DB tool, like SQL Management Studio, which is what it is for. I can write an essay in excel/powerpoint/visio, but I'd rather use the right tool for the job.
Codemaid 
You have to replace it with something, but you can do that for free. The big issue with ditching resharper is that it completely changed all you keyboard shortcuts which makes unlearning it difficult.
Even then it tends to fuck with your shortcuts, but more importantly most people don't, which is why this happens.
I think a more useful tip would be to tell you to test it more with different criteria and try to figure out what's going on. Issues like this are going to be a common everyday occurrence and it's critical to be able to problem solve issues. That being said, from what it sounds like, dregran's suggestion sounds like a likely culprit to me as well. You're either not storing the value for the next calculation and/or you're resetting the original value back to $5000.
How much do you use the extensions you listed? LINQ debugging in OzCode seems handy but VisualSVN and VisualHG to me would be more like malware or adware. I normally just install a test runner like the nUnit one. A few colleagues use R# and I have a license allocated to me but it gives visual studio aids in my opinion, especially so for WPF projects or projects with XAML in them.
&gt; I don't feel this is an issue; Not saying its a big issue but one can tell its not a primary item and the focus is on TS. Like i said, its a "silly example". For you its not a issue, for me it was. It also helps when people come from specific eco systems, that they are more easy to adopt to new versions of the same software. I assume you have a background in VS. Just as i have a background in Jetbrain products. So getting Git going in the interface is indeed more easy for our preferred products. The big difference being that Visual Studio Code trumps both in this regards, no mater the preferred / past editor/ide background. &gt; not if you are using the CLI (which you should be for git anyway). If your Editor/Ide is good, you do not even need to touch your console interface for git. That's the point about a good integration. If you need to go back to the CLI, it means the integration is not complete. If its up to me, in regards to default GIT integration: 1. Visual Studio Code 2. Rider 3. Visual Studio 2017
Why is this not called ZeroFormatter 2.0? Now it seems a competitor and you have to adress that situation: &gt;When situation matches with ZeroFormatter, it demonstrates power of format. But for many common uses, MessagePack for C# would be better. 
Whichever project you ran `enable-migrations` on, which should be your Data project where you house your DatabaseContext.
You may soon be able to. Visual Studio 2017 has (very basic) live unit testing but let's hope that MS expands on this. 
If you have implementation details that must be the same across all implementations, an abstract class makes plenty of sense. You may want an interface *in addition to* the abstract type, in case you wind up with a Turnable that can't inherit from your abstract class, directly--that would allow you to implement the interface and then delegate its implementation to a nested child of the abstract type. Something like public class AbstractTurnable : ITurnable { Action ITurnable.TurnBegin { get; set; } Action ITurnable.TurnEnd { get; set; } void ITurnable.OnTurnBegin() =&gt; ((ITurnable)this).TurnBegin(); void ITurnable.OnTurnEnd() =&gt; ((ITurnable)this).TurnEnd(); } public class DelegatingTurnable : SomeOtherType, ITurnable { private class TurnableImpl : AbstractTurnable, ITurnable { // gives TurnableImpl access to the containing class, if it needs them // to do things--if it doesn't, you could omit this field. private readonly DelegatingTurnable _container; public TurnableImpl(DelegatingTurnable x) { _container = x; } } private readonly ITurnable _impl; public DelegatingTurnable() { _impl = new TurnableImpl(this); } Action ITurnable.TurnBegin { get { return _impl.TurnBegin; } set { _impl.TurnBegin = value; } } Action ITurnable.TurnEnd { get { return _impl.TurnEnd; } set { _impl.TurnEnd = value; } } void ITurnable.OnTurnBegin() =&gt; _impl.OnTurnBegin(); void ITurnable.OnTurnEnd() =&gt; _impl.OnTurnEnd(); } My main point being that this doesn't have to be an either/or sort of situation. You can have both, and, depending on your situation, might even *need* both. ETA: and, as u/badlife pointed out, you should probably look into events and the `event` keyword.
[Reverse POCO Generator](https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator) Been using this for a few projects. I'm used to building the database at the database level so I use this to generate the Code First models after I've created my database objects. Makes it so easy!
They've just bumped up their prices and also moved to a subscription model. Wouldn't really see it as value for money at the new higher price.
Yeah the only thing resharper adds on 2015 is latency.
I don't remember what it's called, but there is a plugin that lets you completely reskin visual studio. I've made a nearly complete custom reskin for myself that I really like.
I'd be curious about your issues with git integration in VS 2017. I haven't installed it yet; but even with 2013 and 2015 it seemed fine. Although I admittedly don't use it from the IDE that much. VS Code does seem to knock a lot of stuff outta the park.
First, if you are going to learn C#, I recommend reading and studying algorithms. It is a pillar to understand and apply programming.
I haven't coded in ages but I went through the yellow book from start to finish with little problems(a few clarifications from my computing teacher) when I was 16. I haven't went through head first but I can say the yellow book is really useful.
Their syntax color is much richer as well. Without Viasfora being installed, it feels like a handicap to me. I would say Viasfora is a must have compare to R#.
It was a lazy answer. To be fair, if he/she has been a lecturer for a long time and not working in the field for sometime then they wouldn't know any better. How old were they? By all means, prepare yourself and get all the studying done you can that you think will help
I'm on the side of learning WPF out of the gate. XAML, the markup language, is akin to looking at HTML. You should not try to incorporate libraries until you become familiar with the default WPF controls because that will get you familiar with XAML syntax. Most importantly recognize that the WPF framework was designed to separate UI from logic. If you learn the patterns of making some code over here for the GUI, and some code over there for the objects you want to show in the UI, and finally some code to connect the two, you will have a much clearer context to understand the organizing logic behind the various controls' behaviors.
Wait there is no compiler warning? I thought I saw one when I was playing with overriding and shadowing in VS2012 .
Yup. Maybe I wouldn't have to come here asking questions constantly if our professor could write the specifications without it being a fucking riddle. 
Auto formats code, even entire projects. Fixes superfluous using statements. Can reorganize files/classes to have members ordered by your liking (Eg private variables, then constructors, then properties, then events, then methods, etc). Can Auto format comments so they fit in 80 chars or whatever you configure. Can find the current file in the solution explorer. Hotkeys for everything.
Only if you shell out £1000's for the Enterprise Edition.
[removed]
Create an abstract class that implements your interface. This will be your default implementation. Then for any other implementation, derive from your abstract class but override any methods that you want changed. This way you are only writing new code that definitely requires writing and not repeating anything, since your abstract class provides the default behaviour. Edit: Mark your abstract members as Virtual to be able to override them. If you want the behaviour to remain the same, leave them be. Edit Edit: If your interface implementation is going to be different each time, then an abstract class is not required and is a waste of time.
I suppose you could use a switch on the loop iterator, though that seems like a really weird choice. You'd still need to have five separate assignment statements, but that would be a way to use a loop. Have you asked your instructor for some clarification on what you're supposed to be learning from this?
Agreed. I was confused when I saw that VS didn't support multiple configs in app.config like it does in web.configs. Seemed like such a stupid over sight.
Algorithm is just an application of logic, with is absolutely mandatory. Yet, you don't need to learn every sorting algorithms and such (moreso with C#), but just how to implement your own for when they'll be fatally needed. Of course, learning how these algorithms are implemented is always a plus to build experience, as is studying other people's code (github and stackoverflow are your friends). Mathematics are just like any other field of knowledge, only useful when it is useful :p For example, I did a little project that was about home construction, and specifically its project management. I knew nothing of this, so I just learned what I needed on the go. I'd say it's the exact same thing with maths. 
Perhaps there was something with the way build and deployment worked? I have no idea. Having written a program that allowed users to provide the ability to set replacement strings for specified configuration tags and crawl through an installation directory (withou around 50 such configs; it was a big project and database connection strings were the devil), I wish SlowCheetah had been around even sooner.
Algorithms is useful stuff for understanding the cost of operations. As a business programmer, I don't regularly use any of the math I picked up in college or even high school, really. Algebra is more useful for being comfortable with variables than anything else. So, no, you don't need to be a math wiz to be a computer programmer. Doesn't hurt, though, and being outright innumerate is going to be a detriment. If you're looking for topics to focus on: * Combinatorics and discrete math, generally, are good to know, as are set theory and *relational* algebra * Linear algebra should be useful if you start looking at computer graphics * Statistics is useful for statistics, which is more widely applicable than you might think Some of those will require some calculus to get into. There are also some more advanced topics that may be useful if you get into somewhat more esoteric programming languages or areas, like lambda calculus and category theory, but they're probably things you can get by without in most programming careers. That said, while you can just google anything, having the knowledge in your background often makes your googling faster/more efficient by letting you ask more useful questions and spend less time getting up to speed on the math (when it's necessary).
Ok, so create a method in the business layer called, let's say, CalculatePrice(decimal price, decimal taxationRate). Then, without a loop: label1.Text = $"{CalculatePrice(price, rate):0.00"; label2.Text = $"{CalculatePrice(price, rate):0.00"; etc, etc. (Obviously change the formatting to whatever's required.) Or, with a loop (which seems like a bizarre way of doing it): for (int i=0; i&lt;5; i++) { switch(i) { case 0: label1.Text = $"{CalculatePrice(price, rate):0.00"; case 1: label2.Text = $"{CalculatePrice(price, rate):0.00"; // etc } } Honestly, though, I can't see how the loop is needed here, unless there's something I'm missing.
And how many years ago was that?
Methods can be marked as abstract but they will need to be declared the same way you'd declare an interface method. public interface IMyInterface { void DoStuff(); void DoStuff2(); } public abstract class MyAbstract : IMyInterface { public virtual void DoStuff() { DoStuff2(); } public abstract void DoStuff2(); public abstract int ANumber { get; set; } } public class MyClass : MyAbstract { public override void DoStuff2() { Console.WriteLine("Do Stuff 2"); } public override int ANumber { get; set; } } Also anything marked as abstract MUST be implemented in the inheriting class
Ah I get you. That kind of opens up the whole Interface vs Abstract debate. Personally I would see no need to do the above, but I take your point. Edit: Have an upvote :)
I did it recently in a monogame project. The abstract class needed the result of a calculation that varied based on the inheriting class, in my example above I've edited to give an idea of what was happening. The abstract class had a function like DoStuff that relied on the result of DoStuff2 but it would be specific to the implementing class. In my case it was calculating a Scaling Transform Matrix that changed based on which view the user was looking at. The code of the Draw function (DoStuff) remained the same from view to view but the Calculate function (DoStuff2) had to change.
&gt; Methods cannot be marked as abstract, [...] Properties can be marked as abstract. Methods *can* be marked abstract. public abstract class AbstractFoo { public abstract void Bar(); } And properties are just syntactic sugar for get/set methods, so if the latter can be abstract, it stands to reason that the former can, too. &gt; If they are not marked as virtual they can be still called from the inheriting class but not overridden. This is correct as long as the method is visible to the child class. They can, however, be shadowed, which can lead to confusion and should be avoided when possible. See the `new` keyword. &gt; If a property is marked abstract you must provide an overridden implementation otherwise the base is used. A virtual member may be overridden to change its behavior in a child class. An abstract member *must* be overridden to *define* its behavior. You can, however, still shadow a virtual member, so be scrupulous about using `override`. public class Foo : AbstractFoo { public override void Bar() { Console.WriteLine("Bar"); } } // the following is valid, but will generate a warning--if you really intend to do this, you can get the warning to go away // by declaring the method public new void Bar() -- but you probably meant to override! public class DerivedFoo : Foo { public void Bar() { Console.WriteLine("Baz"); } } var x = new DerivedFoo(); x.Bar(); // prints Baz Foo xAsFoo = x; xAsFoo.Bar(); // prints Bar!
Yes what confused me was the interface like definition of abstract methods in abstract classes. TIL. thanks.
I use everything daily, multiple times a day actually. If I didn't use it I would get rid of it rather quickly. 
I'm stuck on 2015. 2017 refuses to run on my machine :/
I feel like all of that behaviour exists ether by default or in Resharper. What does it do better/differently? 
I love the codeMAP feature to see all your methods at a glance. Its also significantly cheaper than resharper. If you need just these type of tools, its cheaper to get supercharger. If you need more stuff, then go with Resharper. Even then, I ended up with both tools haha. Year | SuperCharger | Resharper --- | ---|--- 1st Year | $119 | $299 2nd Year | $79 | $239 3rd Year | $59 | $179 
As a guy that had several fails on school mathematics, trust me when i say that math is less important then school make it out to be. The issue is that school maths rely too much om knowing formulas out of your head. This is not a issue when you daily program with google access ;) As long as you can take the time to understand some formulas, your ok. It only becomes more difficult if you enter like game development and you want to write your own 3d engine or work for a financial company that is very formule intensive. 90+ Procent of programming does not rely heavily on math, unlike the propaganda that schools sell.
Eh, I get all most things for free as a student so price isn't an issue for most things.
God I know right. I do exactly what it says, "recursively construct that node and assign it to the corresponding index in the array" or whatever and it just doesn't work. I feel like I've tried everything and I just can't get it.
Hey dude, Yes the style is what has attracted me to them! I really do find the MVA bland and dull - I need something a bit more engaging, or at least interesting and lets me build something! Thanks for your input much appreciated 
* [ReAttach](https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach) (pre-VS2017) - for reattaching to IIS for debugging * [Layouts O Rama](https://marketplace.visualstudio.com/items?itemName=LayoutsORama.LayoutsORama) - I have a dual monitor configuration but if I remote to my desktop from a single monitor system it moves my windows around. This extension fixes that problem by allowing me to save a multiple monitor config and a single monitor one and switch between them.
Yeah, same. I graduate in 3 months so I know I'll have to start paying eventually lol. I downgraded to VS community editions and have been getting used to it.
And it doesn't even render the pdf on Windows Phone! Such a well built phone OS. Do you have a link to an image version of the pdf? EDIT Theres a web infographic version, pretty cool. Always been a fan of the diagrams made for VS and Azure. 
Yeah, I have my edu still, licensing will always be an issue though. I know some people don't take it seriously and use Community editions at Enterprise level. I just don't ever want it to be an issue.
**What I Usually Have Installed:** * Custom color style (https://studiostyl.es/) * NuGet Package Manager - now included * Git(hub) - now included * Indent guides - now included * Resharper - navigation, shortcuts, code generation, clean up, code quality improvements, etc. * VSColorOutput - colorizes the output window. much nicer to read build output and such. * Open Command Line - open command line window, powershell, or vscmd, at any level of your project folder hierarchy. * VSSpellChecker * XAML Styler - for WPF **Outside the IDE:** * ILSpy/Reflector * SublimeText/NP++ (plus extensions) * BareTail/LogExpert/TailBlazer * SQLDBX * Postman
here's my opinion: Developing algorithms and data structures is an exercise in manipulating symbols. Math is one way of learning how to work with symbolic systems, but not the only one we have, there's also language. I personally view software as a narrative, as opposed to a mathematical, thing. Developing an algorithm to solve a problem is like telling a story, but telling a story where every tiny step is completely described. I honestly think that this approach leads to better software in some cases, because it helps you write better function and variable names, and better organize the flow of your code so that it is easier to read and understand.
MSDN post hard trying to crush my phone
&gt;Advanced Intellisense So is this using Roslyn's intellisense stuff? &gt;out variables, tuple return types, expression-bodied members, generalized async return types Very very cool &gt;.NET Core Very exciting &gt;Open Folder Holy fuck fucking finally &gt;Live Unit Testing Hnnnnggggg
Thank you for the heads up! I'll definitely take this into consideration when I get further ahead in the program. This is how they want us to do the program now... I don't get it, just going with it. Thanks again!
It loaded on the second try for me, but it didn't crash RiF the first time.
same, crashes when I open in the Chrome app too though edit: [direct link to the image](https://msdnshared.blob.core.windows.net/media/2017/03/VisualStudio2017_ProductLaunchPoster-1.png)
They're going to have a pretty shallow introduction to the language, but they'll get you started. Grab either/both, but realize you may have to unlearn some of the things they said once you've been doing it for a while. Also - note that these are language books, not application design books. So all their examples are going to be pretty contrived and you'll need to look elsewhere for best practices (let your experience guide you, other programmer's code, etc) 
Crashed chrome and safari on iOS 10.2 as well.
I agree. When people say that, even in regards to VS2017, I can't help but wonder if they're using the same Resharper I'm using.
- Github Extension: it extends the Team Explorer with Github-specific features. Also handles 2FA properly. - Markdown Editor: a really good .md editor with a preview window. - XAML Styler: lets me absolutely not care about formatting my XAML, because the extension fully takes care of it. - Productivity Power Tools: color coded tabs, blank line compression, sort and remove usings for entire solution, column guidelines and some other stuff.
I open all pdfs in Adobe Reader. Had no problem. On galaxy s7. If someone's having issues, try the app specificly for pdfs
I may actually use this as well, that's pretty useful for large solutions.
It renders properly with Adobe reader.
Removed: Rule 4 You already posted this and received an answer. If it's not working, you neglected to clarify or attempt to resolve it with the answerer.
As long as the Menu Bar isn't in SCREAMING CAPS it's all good!
Why not have an event on the class controlling the turns expose some events that other classes can subscribe to? Ie `public event Action OnTurn = delegate { };`
Also a tip for future posts, please use pastebin as reddits formattting can get... Interesting
G̲ood Thing Talking Like This Is Only Annoying When It's In Long Sentences And Not In Menus Because That Could Get Annoying As Well Do You Know What I Mean ? R̲eally, How/Why Does This Happen In Real Life ? M̲y Pinky Finger Hurts From All Of The Shift. /randomrant
Haha, noted. Kind of glad it worked out the way it did above! First time posting code on here.
Because you can't invoke events outside of an object? You can with actions, but I need to use events as well. Seeing the object that implements the interface won't be invoking the events, I need a method to invoke them in. 
The problem with this is there is a lot of different classes that need to implement ITurnable and other interfaces like it (like, an interface with events that will be invoked when a unit is spawned), so I'll need many abstract classes and interfaces. This will just lead to a massive chain of polymorphism with objects that have no connection together besides the interfaces they share. Also, if I go with abstract classes, I lose a lot of freedom. If I also create an ISpawnable, an interface that has events that handles when a unit has spawned, how will I chain the abstract classes together without requiring the ISpawnable abstract class to inherit from the ITurnable abstract class or vice versa? This is why you're supposed to use interfaces, but seeing I can't invoke events without a method, I'm forced to do something that I wrote in the post. &gt;ETA: and, as u/badlife pointed out, you should probably look into events and the event keyword. Like I told him, you can't invoke an event outside of the object its in. This requires me to use a method to invoke the event which requires the interface to also have the method. The code I wrote for the post actually works to what I need because you *can* invoke Actions outside of their object, but you cannot with events.
*Whew* it's not just me
If you use an interface, but also have an abstract base type, your classes can implement the interface directly if or when it doesn't make sense to derive from your base class. In this scenario, you use the interface type for things like parameters and properties, and derive from the abstract type (which should implement the interface in whole or part) only when it makes sense. &gt; If I also create an ISpawnable, an interface that has events that handles when a unit has spawned, how will I chain the abstract classes together without requiring the ISpawnable abstract class to inherit from the ITurnable abstract class or vice versa? If you want to have behavior from two different types specialized into a single other type, C#'s only answers are copy-and-paste, and composition. So, you'll probably want interfaces in that situation, anyway. There's not some magic way to really wave all that away, unfortunately. You can probably get a tool to generate the glue code to delegate the implementation of interface A to property B (Resharper will do this, f or instance), but you'll still have to maintain it. Another possibility might be to look into the Visitor pattern. That has its own problems, but YMMV.
MessagePack and ZeroFormatter is completely different format, same as FlatBuffers is not Protocol Buffers2.0, Protocol Buffers is not FlatBuffers 2.0. This is a comparison table --- Serialization Performance: MessagePack for C# won, but ZeroFormatter has almost same speed and re-serialization ZeroFormatter is extremely fast Deserialization Performance: If type is lazy(IList, etc...) or large object, ZeroFormatter is infinitely fast. Standard deserialization, MessagePack for C# won. Binary Size: MessagePack for C# won, it is very compact and embedded LZ4 support is more efficient Debuggability: MessagePack for C# won, supports binary to JSON dump Interoperability: MessagePack for C# won, MsgPack is already widely used on cross-platform message exchange --- If you needs infinitely fast deserializer(situation:use only a part of a large object, for example large location map), infintely fast reserializer(situation:Transfer data without processing, for example server to server to server to server relay) These are functions of ZeroFormatter only. Normally serialization/deserialization performance should also be beneficial. But MessagePack for C# is a game changer. That performance outperforms various things.
Crashes RiF and google hangouts embedded browser. Doesn't show images in chrome. Wtf is this webpage? 
That link caused my phone to kernel panic and reboot. There must be something really weird about the png.
This is what I proposed. I don't think OP is explaining the problem very clearly..
Then why not just have an interface with just `BeginTurn` and `EndTurn`? There's no reason to have `OnTurnBegin` just call the `BeginTurn` method. Have one method that implements it directly.
Test case for Pdf renderer ;)
You might've mixed them up, but in my example BeginTurn is an event - not a method. I don't mean to sound harsh, but you're asking why I need an event over a method? They're completely different things. A single method would not suffice in my situation.
Yeah that's it. It's a bit frustrating at times, but you can get really specific with your colors.
I'd just like it to remember my solution files like every other version of VS, then I'd be happy. **EDIT:** Original was unclear, need more detail. [Here's a screenshot.](https://i.imgur.com/WPAvC6v.png) VS 2017 doesn't put my solution file in the section at the bottom like previous versions did. Most of the time using the Open dialog doesn't work either. I have to do "Show Folder View" and open it from there.
Yes, that's why I asked
&gt;&gt; Live Unit Testing &gt; Hnnnnggggg VS 2017 Enterprise version only, I think.
You will want to stay away from Double when using money values. Use Decimal. :)
Idiot question: how to use it? I have it installed, but dont see an option anywhere...
If you arent using Resharper, use [Roslynator](https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2017)
Unrelated to your problem, just some observations on your code: //Creation of switch to turn program on and off bool program = true; //Begin running actual program while (program == true) First, I think `program` is a poor name for the variable. A variable's name should represent succinctly what it's content represents. This bool doesn't represent a program of any sort. When it's `true` it indicates that the program should continue running, so perhaps `continueRunning`, or simply `running` would be a better name. And then when checking the value of a `bool`, you don't need to explicitly compare it to `true` or `false`, since the condition of a `while` or `if` is just a boolean expression. So I'd be inclined to change those lines of your code to: //Creation of switch to turn program on and off bool running = true; //Begin running actual program while ( running ) Naming seems like a simple thing at first, but choosing a good name for a variable, class or method is very important; it is part of the documentation for your code, so needs to be accurate, clear and concise. So, I also wouldn't use the variable name `checking`. What does this variable hold? It doesn't hold a "checking". It holds the balance of the checking account, so `checkingBalance` or `checkingAccountBalance` would be better names. It seems like a trivial point, but it makes a big difference to your code. On another note you have multiple lines of code which are the same in 2 places: Console.WriteLine("1.) Checking:"); Console.WriteLine("2.) Savings:"); Console.WriteLine("3.) Reserve:"); int balanceChoice = int.Parse(Console.ReadLine()); It's usually a good idea to extract common code to a separate method; it saves writing the code more than once, any changes only need to be made in one place, and if there's a bug in those lines, you only have to fix it once. I'd pull out at least those lines, something like: private int ChooseBalance( string question ) { Console.WriteLine( question + " Please choose from the numbers below:"); Console.WriteLine( "1) Checking" ); Console.WriteLine( "2) Savings" ); Console.WriteLine( "3) Reserve" ); // What if the user enters a letter instead of a number? Consider using TryParse() instead. int balanceChoice = int.Parse( Console.ReadLine() ); return balanceChoice; } Then you could write: case 2: //ask user if viewing checking savings, checking or reserve balance int balanceChoice = ChooseBalance( "Which balance would you like to check? " ); if (balanceChoice == 1) // ... etc ... Also, you should avoid using `double` to hold monetary amounts - [it will cause problems](http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency/3730040#3730040). Instead use [decimal](https://msdn.microsoft.com/en-us/library/system.decimal.aspx). Hope that helps! 
[here's the PDF of the chart](http://download.microsoft.com/download/7/6/8/768D3A52-460C-4B80-A94E-F239D14124E2/VisualStudio2017_ProductLaunchPoster.pdf) 
As I would write code review: x) &gt;MakeWithdraw(double withdraw, double checking) &gt;MakeDeposit(double deposit, double checking) First argument should be your currect balance, not how much you want to withdraw. x) &gt;if (checking &gt; 0) Check for invalid conditions, before proceeding, use: if (!double.TryParse(&lt;...&gt;))exit if (checking &lt;= 0)exit if (other conditions)exit Proceeding with your calculations, return good resut x) &gt;withdraw = double.Parse(Console.ReadLine()); &gt;userInput = int.Parse(Console.ReadLine()); Read console output into variable, them use TryParse method. x) &gt;checkingAccount.MakeWithdraw(withdraw, checking); Pointless call, returning value is not used. x) &gt;switch (userInput) No default jump condition, user might enter 99.
Awesome !
Another option to look into is changing the checking parameter to a ref parameter (Passing the double (or decimal as suggested) by reference. Then any modification to the checking parameter in the method will also happen to the variable you passed into the method. Then you don't return it at all. *note: Primitives are passed by value, a class is passed by reference. Also since the scope of "deposit" is local to the method MakeDeposit you could declare it inside the method rather than a parameter. Or ask the user for the deposit amount and the withdraw amount before you call MakeDeposit or MakeWithdraw then pass the value in to each method respectively.
Basically, your opening and closing curly braces aren't matching up with your "if" statements. The format of if statements should be this: if (something) { // start doing stuff } // done doing stuff From what it looks like, line 47 needs to be moved up to line 45. Remove the open curly brace on line 48. Replace the closing curly brace on line 50 with an open curly brace.
That was unclear, sorry. [Here's a screenshot.](https://i.imgur.com/WPAvC6v.png) VS 2017 doesn't put my solution file in the section at the bottom like previous versions did. Most of the time using the Open dialog doesn't work either. I have to do "Show Folder View" and open it from there. Just a minor thing, but it'd be nice.
I'd go even further - since OP is using an "else" (line 49) after a Console.WriteLine (line 47). The format of the statements should be: if (something) { // start doing stuff } // done doing stuff else if (something else) { // start doing stuff } // done doing stuff else if (something else) { // start doing stuff } // done doing stuff else { // start doing stuff } // done doing stuff OP - as well as what /u/justin_144 has pointed out about the curly brackets not matching, you also need to understand that "else" and "else if" can *only* follow "if" or "else if". Since your Console.WriteLine is in Swedish, I can't tell what it says so I can't guess where it ought to be - but it definitely shouldn't be where it is because it's causing the "else if" to not follow directly after the "else".
that template you wrote is actually better than what the books says, i'll have this in mind, thanks for your tips ! :D
Please explain 
Is that you Steve Mould?
Whats with the custom implementation of SecureRandom? What not use the system built RNG?
Mostly habit when high entropy is desired. 
Removed: Rule 3.
More pranks are sure gonna come ;) Stay tuned!
3.1415**92** - Your accuracy is off so early :( It's better than 22/7 I guess...
Neither is superior. They're both pretty arbitrary choices. It probably makes sense to use tau in places where you've got a lot of 2*pi expressions, but to use pi in other places. The choice of the ancient Greeks to consider the ratio of the circumference to the diameter instead of the radius is pretty arbitrary, but it does appear that pi pops up in a lot more somewhat unrelated areas of mathematics than 2pi. Maybe this is a form of selection bias, where we going looking for expressions or equations that have pi in them solely because they have pi in them (like all the various sequences that converge to some polynomial expression in pi). Maybe if the Greeks used tau, we'd say "e^(i*tau/2) + 1 = 0" is the most beautiful equation in math (if we argued that this now also has the first prime number in addition to all the other basic constants needed to build up arithmetic, calculus, etc., we could say it's just as beautiful and mystical) instead of "e^(i*pi) + 1 = 0".
Can't overstate this enough. If you use Double for monetary transactions in a professional position, you could cost your company a lot of money.
There are some odd bugs that have slipped through though. I recently submitted a bug where, in VS 2015, a crash down in Roslyn occurs when renaming a class to a name prepended with 'Current' or a method with 'MoveNext'. Was kind of proud of myself for finding that. :P 
Why do you use int count and var total? Ether use var in both or int :)
I belted this out in a few seconds. I'm normally consistent about the usage of var vs explicit name.
It doesn't multiply. It's a bitwise operator: for each bit in the left and right, the output contains 0 if any value is 0, or 1 if both values are 1. Specifically, I'm using 0x7FFFFFFF as a bitmask (the binary value for it is 0b‭01111111111111111111111111111111‬), which has the effect of chopping off the first bit and forcing it to be zero. I'm essentially using this to ensure that I always have a positive number, because in .net, signed numbers (like int) are stored using two's complement. Basically, voodoo witchcraft that takes any number and forces it to be positive.
http://tauday.com/tau-manifesto Seriously, he's right. This is exactly as the convention for current before we knew that the charge carriers were negatives, hence current flows in the wrong direction. Pi is not the circle constant. Tau is. 1 tau is one turn of the circle. You draw (and define) a circle with the radius, not the diameter. 
 if (boolean_value) { } Is the cleaner option and the one I tend to see more often. I don't really have a preference, other than being lazy, so less typing == better. I use the second method even when checking for integers that are non-zero or strings that are not empty or not null.
Follow your heart. But I think developers tend towards the more succinct `if(boolean_value)` option.
What about using a generator function and a moving average? IEnumerable&lt;(int, int)&gt; GetRandoms() { var rand = new Random(); while (true) { yield return (rand.Next(), rand.Next()); } } But yes, I agree that it's only meant to be for fun :)
&gt; less typing == better Thanks. I very much appreciate the reasoning for the answer.
If you are using `Boolean?` (`Nullable&lt;Boolean&gt;`) you explicitely need the `== true` part. Just in case you're ever going to see that. 
**e^iτ = 1** which is arguably nicer than **e^iπ = -1** though :p
Another person gave me a link, to nullable boolean. I did not even know that type existed. Since you said it first, and I didn't notice I thought I would come back again and say thank you (again) for giving me that info. It was my fault that I did not get your point. Have a great evening
&gt; I've avoided them in this language as being rather arcane and usually not that practical Ever used flag enums (`MyEnum.A | MyEnum.B`)? Then you've used bitwise operations :)
And i'm sitting here using var everywhere, cause var, var never changes.
And the same prerequisite applied when using `var` is to have a descriptive function/variable name.
Foxpro? OB1: "Now there is a name I haven't heard in a long, long time." I started with VB 2 back in 93. I never used FP but heard about how great it was a number of times. Times change, and so do technologies and patterns. I **LIKE** the more verbose way I do it. But just because I like it does not mean it's the best way, so I ask just in case. Thank you again for the feedback (and the walk down memory lane)
I cannot agree more with the point about descriptive variable names. I would much rather see: iNumberOfUsers that just "i" or "iNOU" Thanks again
In the end, if you're working on your own you can use whatever conventions you like. If you're working in a team, you should use whatever the team (company) conventions are. Sometimes you have to hold your nose and just do it... In the end, the compiled code is identical so there's no performance impact either way. FoxPro was awesome in its time. Embedded SQL a few decades before Microsoft thought LINQ was a new idea :)
For the greater good brother.
I had actually never heard of enum flags before this moment. I'd always used `Enum.GetName` instead of `ToString`. That being an enum variable while containing multiple values trick is really cool. Thanks for showing me something new!
Also curious about this. Would like it for storing objects in reddis cache. Edit: it's good for reddis cache lol
If you are learning C#, I would skip the BackgroundWorker entirely unless you need to maintain legacy code or are stuck on .NET 4.0. Try looking at the Task Parallel Library and working with the async keyword: https://www.codeproject.com/Articles/518856/Task-Parallel-Library-and-async-await-Functionalit It is life altering, much more powerful, has an easy mechanism to update objects in the UI context, and is very compact.
 103993/33102
what's the `i` prefix for?
But what about the circles area? Or the roots of the sine function?
Re tau, I think programmers are way more up for a refactoring than mathematicians. As a programmer, I think "this codebase will be around for a long time... might as well get it right", but I get the impression most mathematicians don't really give a shit one way or the other.
&gt; var player = new Player(); &gt; is better than: &gt; Player player = new Player(); Ok, please clarify why the top one is better? I'm not saying it's not, I would just like to understand EDIT: The reason I have an issue is that with "var" I wouldn't know if the number type is byte of Int64.
&gt; My solution to this kind of situation is to use the explicit type in those situations (if it matters), but to use 'var' most of the time for clarity/readability. Ok, thanks. I appreciate that clarification. However, that said I rarely have an object named the same as the object type. So that type of naming isn't common with me, but I really do see your point. Thank you again for your time.
Okay, excuse my grammar nazi-ness, but wouldn't it be better to say less typing = better Because double equals does not set a value?.... &lt;/s&gt;
Tip for the future: don't title a post "need help with error", that was almost the exact bad example they used in the "read before posting" thread
Just a pointer: You can say a = a - b Or you can say a -= b Just a little tip
There is already a TS to C# compiler called "Bridge": http://bridge.net/ 
&gt; why introduce fractions when you dont have too? ok... why do I have to remember that pi is half a circle ? 
it first that i found: "Expression bodied methods, properties etc. are a big hit in C# 6.0, but we didn’t allow them in all kinds of members. C# 7.0 adds accessors, constructors and finalizers to the list of things that can have expression bodies" [link](https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/)
Are you familiar with this wonderful tool? https://roslynquoter.azurewebsites.net/ Something like this should do it: constructor.WithExpressionBody( ArrowExpressionClause( AssignmentExpression( SyntaxKind.SimpleAssignmentExpression, IdentifierName("_firstName"), IdentifierName("FirstName")))) That's assuming you're statically importing SyntaxFactory (`using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;`) 
Thnx. Now it's clearer.
The logic behind not comparing to true is to make the code sound more like a reasonable English sentence. if(store.IsOpen) { DoSomething(); } sounds like the English sentence "If the store is open do something" if(store.IsOpen == true) { DoSomething(); } Transferred to an English sentence is much more unnatural - "If store is open is truth do something". I think readable code resembles English sentences. I even wrote about that a while ago - http://sietch.net/ViewNewsItem.aspx?NewsItemID=257
&gt;My solution to this kind of situation is to use the explicit type in those situations (if it matters), but to use 'var' most of the time for clarity/readability. I agree with what /u/djgreedo says. To expand: This makes sense: var customers = GetCustomers(query); This doesn't: var someStuff = DoSomethingAndOther(weirdness); Ideally your method signatures should be clear enough that you know what you get back simply by writing *var*, but if they're not (like when you're using a 3rd party library that you don't have control of) it makes sense to be explicit.
Its the same author. If you check out the code between both projects you see the same design logic and functions between both versions. I only figured it out when searching for serialisers and how they work and noticing that same EnsureCapacity, FastResize functions in ZeroFormatter and Messagepack. Technically Zeroformatter is ideal when you need to read / transfer large amounts of data, without deserializing them on the spot. Because of the lazy deserialization when you request the data. For serializing the same content, both Zeroformatter and MessagePack are very close together.
Think of ZeroFormatter as the authors answer to Google Flatbuffers. Where as the MessagePack for C# goes for a complete implementation of the MessagePack standard.
This is not accurate Pi
`numUsers` or `numberOfUsers` is preferable to anything involving type prefixing (the convention of `i` in a `for` loop is derived from its use as an *index*, not from its probably being an int). The VB-style Hungarian notation that prefixes variables according to their physical type is lousy, in that it tightly couples your variable names to their storage types, instead of/in addition to their logical purpose. If your system grows, and `iNumberOfUsers` ever becomes a `long`, your variable name will become *misleading*, which is *worse* than being uninformative. (I think McConnell has a good chapter on variable names in Code Complete, *including* a good rundown on how Hungarian Notation was supposed to work, but there's also a good write up by Joel Spolsky somewhere or other.) Unless `int`-ness is essential to the purpose of the variable, it shouldn't be in the variable's name. Ditto for other types. And I like to see variable names that are descriptive relative to their lifetime. A variable that lives for a line doesn't need much of a name, but one that lives for a hundred had better be descriptive. Name length is ... not necessarily a value. A long name is probably more descriptive than a short one, but concision is highly beneficial to comprehension, too.
 bool? nullableIsThing = /* nullable bool */; bool isThing = nullableIsThing ?? false; I don't think there's much value in nullable bools in most uses, though.
It's within 0.000123217% of the real deal.
Thanks kindly for the feedback.
Ok, thanks kindly for the info.
I prefer nulls when it should be obvious a decision hasn't been made yet (at which point it becomes true or false, a definite decision), rather than defaulting to false.
Thanks kindly for the feedback. I am unlikely to use var in the future unless the company I am at uses it, but I do get the point you are making.
A couple of others have mentioned the name of the boolean variable can really help in the process. I'll take a peek at your post and thanks for the feedback
That's pretty much the one case, but it's been my experience that most cases wind up treating false and unknown as basically the same. Maybe with some logging for a null.
Powerful but rather tedious to produce/transform C# in, in my view.
&gt; the perverted one just ugly, error prone and dangerous! Pretty dramatic :p. I mean, I don't like it either, but ugly is subjective and how is it dangerous?
I wouldn't call it a shorthand version. It's how booleans work; `a == b` is an expression with a boolean result. Comparing it further to `true` is completely redundant.
In general, you should have a strong focus on naming all your variables well :)
There is a reason we have conventions for Booleans. They are supposed to start with Is, Has and Can
YES. 1000x this. Have a great day
So many malicious uses.
The description clearly mentions code analysis APIs. Sorry if the title was misleading, obviously not intentional, but the description clarifies it.
Admittedly, I just skimmed the article on mobile so perhaps my understanding is flawed, but isn't this just IoC+ServiceLocator pattern with dependencies tossed into string literals and type safety thrown out the window? 
Without the source code, it's difficult to say. The File-Reader ist the only "suspicious" thing in your explanaintion as far as I know. For your information: I once wrote a program, which would download a file from the internet (url entered in textbox). Avira didn't like the background-download and market my program as a virus. **TL;DR** Probably the File-Reader. Is there something going on in the background which could be suspicious?
This seems like a home-grown implementation of `dynamic`, and it looks like a nightmare, to me.
Exactly. Seems like the author wants to use a dynamic language and is forced to use C#.
So, when I compile it at the end with an installer, this issue is gone? If so, then that's my solution, thanks! Otherwise I have really to tell the client, that he has to customize his AntiVirus program.
The `QueryExecutor` class is an implementation detail. It'll work with any class that extends `DbContext` and any model that has a property decorated with the `[Key]` attribute. In my example, it implements query support for Entity Framework, but you could easily provide another implementation that supports NHibernate. &amp;nbsp; `IQuery&lt;,&gt;` is what you would inject into your controller. Below is an example of how you might set it up and use it in your .NET Core project. &amp;nbsp; **Setup** public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddTransient(typeof(IQuery&lt;,&gt;), typeof(QueryExecutor&lt;,&gt;)); } } &amp;nbsp; **Usage** public class MyController : Controller { private readonly IQuery&lt;FirstQuery, int&gt; _query; public MyController(IQuery&lt;FirstQuery, int&gt; query) { _query = query; } public IActionResult Index(int id) { var result = _query.Execute(id); return View(result); } }
This was in Release Mode :(
The signing of the compiled output will allow most scanners to ignore it. By installing normally (in the users folder) the app should be running from a folder that the virus scanner trusts. It does not ensure that you wont have problems but these are often the triggers for virus software.
Unfortunately they're hard to avoid if the values come from a database. A lot of database designs have nullable boolean columns. I try to avoid them wherever possible (preferring a boolean column with a default) but sometimes the value just plain IS unknown (null) and there's no way to avoid it.
yeah of course... it's Avast (antivir of client)
Any struct or value type can have a nullable reference declared using the System.Nullable&lt;T&gt; type. There's some handy syntax around that, so that a question mark after the type denotes this sort of nullable reference. I. e. int? maybeNum = null; DateTime? maybeDateTime = DateTime.Now;
Thank you VERY much for that info. If I was only lucky enough to work with people like you.
Maybe they all don't use Avast :D
Yeah, I'm trying to think of the last time I created a table with a nullable bit column and failing. I think there was one, but it was a long time ago and it was actually a requirement that was added later. The column was originally a bit but then something came up where the null value was also required (as a "not applicable" kind of thing). And you're right: if that requirement had existed when the table was created it probably would have been a foreign key to a code table with "yes, no, NA" as options. 
This is horrendous.
What you're running into is likely Windows' SmartScreen or other application whitelisting service. Any executable that isn't signed will trigger that warning when attempting to run the application if it was originally downloaded from the internet. To avoid that warning, you'd need to purchase a code signing certificate. But to be clear, it doesn't sound like your executable is being detected as malicious. Windows Defender would immediately quarantine the file if that were the case and you'd get an explicit warning about malicious software being found.
You probably want to do some googling on 'C# class' and 'C# constructor'. A class is a custom reference type, a constructor is a specialized method for creating instances of a type. You *may* want to *also* google 'C# struct'--a struct is a custom value type, which has some different characteristics than a class, but is overall pretty similar.
Just to add to this, you should prefer to use `classes` until you're more proficient with C#: `structs` are an advanced use-case for performance-related concerns.
They are called Arrays or Lists. var creatures = new List&lt;Creature&gt;() { new Creature(), new Creature() }; So in this case, you have a List of two Creature objects, which you can modify the properties of each one independently. 
I've never heard of it by this name, but other names for it are "cancer", "disease", and "please fire this moron right away". So, basically the guy decides to not go with IOC/DI and instead some absolute clusterfuck of magic strings? He also seems to be allergic to interfaces as demonstrated by his `Node` class. * He's using concrete collection types rather than the much preferred and standard interfaces that implement `IEnumerable`/`ICollection` * Not even using properties * Uses `object Value` in what I believed to be the public facing API That alone should be a fucking red flag! That's like what some junior developer ends up creating by accident, not by a guy who has "Hire me!" on his website. I did some digging, and boy we're in for a treat. I managed to find his website/blog the his github repo for the software he's discussing. And yes, the code is as bad as you'd expect it to be judging by the article. The code also has a total mixed bunch of formatting and styles going on, showing a lack of care of his work too. Oh and to top it off, it's using ASP.NET's Web Forms in 2017. One of his blog posts also discusses "creating an instance of an interface"... hmm. So on to the crazy bits: * **Claims he's been targeted for assassination by the CIA** (https://gaiasoul.com/2017/03/15/the-cia-tried-to-assassinate-me-in-20112012/) * Claims the CIA were blocking his emails that he was sending to the Dalai Lama * Claims he's "trolled" the "CIA/NSA" into giving him a nuclear bomb (yeah, the NSA does not have nuclear weapons for starters) * Claims that he has been to prison because "he believed in Jesus" who had told him that the CIA etc were spying on basically everyone. (I certainly believed he *believes* jesus told him that, I also believe he has probably been arrested several times because he is clearly deranged and a probably threat if I'm honest even if only to himself) * Claims that because the CIA hacked you, they have in fact given Al Queda "your soul" If you don't believe that this guy really is so tin foil conspiracy crazy then go have a look at his site: https://gaiasoul.com/2017/03/02/i-have-been-published-in-msdn-magazine/ I could go on but honestly I'm getting more and more exasperated that he is posting such absolute shit to the internet, he genuinely needs help. I'm no expert on mental health but from his writing style, his mannerisms in his weird youtube video, his delusional "the cia are trying to kill me" posts... I'm going to bet this is schizophrenia. Really though, the article is of a very poor quality and I don't think it should have been published at all. Plus it's probably going to mean we might have to see more of his shit in MSDN magazine.
guys I am sorry for wasting your time. I should have looked up my guess before posting. I learned structs vs classes / class inheritance in 5 minutes, &amp; I am definitely going with classes. I blame it on my current 20hour work day. here is my learning reference: https://www.youtube.com/watch?v=G5KJolM2uzs
It's either should **HAVE** or should**'VE**, but never should **OF**. See [Grammar Errors](http://www.grammarerrors.com/grammar/could-of-would-of-should-of/) for more information.
I also stopped reading when I saw magic strings. I'm with you - if I see these types of strings in an implementation, it's a huge code smell to me.
Every program I've built and uploaded to virustotal (including signed binaries!) has been a false-positive by Qihoo. I'm convinced it really just reports anything as malware.
Is it possible to use this without having to set [MessagePackObject] on every class/struct? Looks like can avoid the Key(0) attributes by doing [MessagePackObject(keyAsPropertyName: true)], but is there any way to avoid the MessagePackObject attribute?
Avast can just be an angry bitch sometimes. Try making sure you don't have any code that prevents the program from closing when the user hits the close button, and if you do just make a variable at the top for your class such as bool shouldClose, set it to true in your form initialization, and then check if(shouldClose) on your form's close event. That has helped me with a lot of false positives. I looked at your code and saw you were doing that so it's something else, but the general idea is that Avast is detecting something in your file that malware its detected in the past has had (in the case I posted it would be malware that doesn't let the user close it) You could also try using obfuscation to hide the signature. 
Also, reporting a false positive to the AV vendor can help too
Probably not much or not at all. As a new developer I overused inheitance a lot, like so many others do. Then I inherited some legacy code that used inheritance horribly wrong and it took me years to break it apart. Lately I'm doing a lot more composition, and inherit only when it really makes sense. 
That actually is both readable and efficient. But you should actually add this at the end: &amp;&amp; != false
Academic programming does the math heavy parts while business programming does the rest.
'Is it executable? Must be bad!'
Instead of requiring the class name to match the record id (which I personally wouldn't like anyway due to violating naming conventions, but ymmv), have an (optional?) `RecordSignatureAttribute` that can be used to specify the signature and then create multiple different classes with different class names but the same `RecordSignatureAttribute`?
Why would I use this over [**BenchmarkDotNet**](https://github.com/dotnet/BenchmarkDotNet)?
Most devs treat any kind of inheritance like a giant spider running at them. I personally, have been burned by it. I haven't used it professionally except for maintaining legacy code.
I would ignore those no-name AVs. As long as you pass the big brands, you'll be fine.
Look at media queries in CSS. You can style your printed copy with CSS. I think it's @media print or something 
I am coding a text adventure game in CSharp.
I like that idea. Certainly better than what I initially tried. I try to rigidly stick to C# naming conventions, but in this situation I thought it was a clever solution &amp; wanted to experiment with it. I also liked how the casing matched the signature; made it easier to connect the two when debugging.
Who even still uses anti virus!!! Anyhow, As u/HellGate94 also mention this is most likely because the project inst signed. At least from me this has been the case more then once.
Not drastically, but it would be useful
Yes, but he implemented it for you whereas if you wanted to use IoC you'd have to do it yourself because no frameworks exist therefore it'd take more lines of code! ^^/s
because at some point you just stop caring about circles?
Thank you for this! We haven't gotten this far, but I know that it's something I need to research and learn about. 
WOW, I really appreciate such a thorough review of my code! Thank you especially for the variable naming reminder. Not sure how I missed that! This was really helpful, and it's neat (and overwhelming) to see how much more there is to learn. I suppose it comes with more experience... 
Thank you for the reminder! Not sure how I missed that.
I smell irony 
No change at all. I simply wouldn't venture into that.
and stll we have to use a constant that is half its natural value? it would be like using the gravitational constant half of what it is, and then put a 2 in front of the equation. 
The problem with composition is you can't have *both* inheritance *and* interface declaration. For example, if you have more than one interface that could offer sensible default behaviour (say, `IBinarySerializable`), currently in C# you are forced to either copy that behaviour in every class that implements those interfaces or write tedious boilerplate that simply defers your implementation to some (usually static) code elsewhere each time. Currently, if you're lucky enough that your design has only *one* interface that has sensible default behaviour, you can turn that interface in to an abstract base class and get the inheritance. But frankly, I don't think I've ever seen a design that *really* worked that way. Single inheritance is a daft idea, ultimately. Being able to pick up default behaviour in a polymorphic fashion is actually great when used with caution as it reduces code duplication. 
Ah, okay. Thanks for explaining. :)
Linq queries are a good example of where var can be preferable. e.g. take this example var highScores = from student in students where student.ExamScores[exam] &gt; score select new {Name = student.FirstName, Score = student.ExamScores[exam]}; foreach (var item in highScores) { Console.WriteLine("{0,-15}{1}", item.Name, item.Score); } It doesn't add any clarity in this case to explicitly state what type highScores or item are. You only care that item has those fields you're writing and highScores is an enumerable collection of those. When you start getting into more complex queries with ordering and grouping, you can end up with some horrendous looking type names containing a mix of Expressions, Funcs, Groupings, OrderedEnumerables, etc. and explicitly declaring them can make the code more difficult to read and provide no benefit. And similarly if you have long-winded type names, it's easier to read when you use var in the definition, so you only have the type once. Consider: Dictionary&lt;string, ISomeGenericType&lt;int, ISomeOtherType&gt; items = new Dictionary&lt;string, ISomeGenericType&lt;int, ISomeOtherType&gt;(); vs var items = new Dictionary&lt;string, ISomeGenericType&lt;int, ISomeOtherType&gt;(); It definitely has its place, but it can certainly be overused. You just need to look at what provides the most clarity for a particular bit of code.
Sure, but this question is about multiple inheritance, which I'd assumed to be C++-like, including it's pitfalls. It might be convenient to have the ability to define a trait or mixin using a dedicated language concept, but I still don't know I'd use such a thing. My main issue with traits/mixins is that the syntax constructs to use them usually *require* that the class/class author decides on the trait/mixin to include, whereas the interface-based solution to this problem does not suffer this requirement. Using a combination of small implementations and interfaces allows the class author the option to tie down the implementation explicitly, or leave it up to the consumer. Leaving it up to the consumer leads to more reusable and well organized code in my opinion, because mocking becomes extremely easy, and it enforces coding to interfaces throughout a larger portion of your codebase, which is, once again IMO, a good thing.
I've been a professional developer for only say 2 years, and I've never done any significant inheritance. In fact the only times I've seen it used on a larger scale was at a previous job. Occasionally I'll use an abstract class with shared logic in there. I guess im an outlier then, if everyone else started off with inheritance first before going to composition. Fortunately I worked with some good devs who basically taught me about interfaces and DI and I guess I got lucky and avoided lots of inheritance. Are there any advantages to lots of inheritance? Can't you basically emulate MI by just having A inherit B which inherits C? Then A has access to both.
Is this Entity Framework? You don't mention what tool you're using. My hunch is to try removing the .ToList()s in the Select. I don't know why but it seems unnecessary. And maybe try adding a ToList() after the Select. I've definitely done what you're trying to do in EF (if that's what you're using)
Composition and inheritance solve different problems well, and are piss-poor substitutes for each other. The statement "favor composition over inheritance" is only useful for junior developers who don't really understand either, as it makes it easier for the senior developer to fix their shoddy work. 
Mix-in style multiple inheritance would be convenient but not game changing. The only thing it does is reduce the need to manually wire-up helper methods and matching abstract interfaces. Honestly though, most uses of MI that affect me were covered by extension methods.
[some java memery](https://i.redd.it/jh5e6isp99hy.png)
I would have used it three times in the last 10 years.
You don't use inheritance? 
I try to avoid it.
Not at all.
I think he/she wants any PriceInformation or PriceList associated to each Price record. The problem isn't that he's getting 900 rows, the problem is he's getting 900 rows using 900 queries. Adding a Where() isn't going to give the correct results. And `.Select (b =&gt; b)` is a no-op an doesn't actually do anything.
How? I can't think of any .net platform that doesn't need it. 
Second this question.
Glanced over the GitHub ReadMe. It's intriguing, actually. It's not just benchmarking, and I think it would be inferior to BenchmarkDotNet on that front. It's performance based unit testing in the mold of NUnit, hence the name. It allows you to set performance based constraints. For example, you can require that the method, on average, have no Gen 2 garbage collections, or allocate less than 32kb total memory, or they'll fail the test.
I would argue that many (most?) of us chose C# not despite what it's missing from C++ but exactly because it doesn't have these "features". If you want everything that C++ has to offer stick with it. Not trying to ruffle any feathers but if C++ was safe and productive, Java (and later C#) would​ have never been invented.
Could anyone recommend readings or videos on composition or inheritance for beginners? I'm new to programming and get lost as to the distinction and when to use them.
My thought is that this has to be an April Fool's day joke.
It'd be great!! Doing Xamarin Native development for iOS, you have to deal with a framework written for Objective-C. A lot of iOS designs are based around being able to use multiple inheritance to optionally simplify an otherwise complex implementation. E.g. TableViewDataSource/Delegate/ViewController.
Yes, this is essentially correct. RoslynPad stops listening to output once the main method finishes. To restart the host process and stop all the threads, hit the button with the circle arrow or hit Shift+F5.
The select new creates an anonymous type, with the properties "Name" and "Score", and highScores is an enumerable collection of those. I don't have Visual Studio installed right now, but dotnetfiddle reports the type as something like: System.Linq.Enumerable+WhereSelectListIterator`2[Student,&gt;f__AnonymousType0`2[System.String,System.Int32]] The point is, in this instance, particularly with an anonymous types created by the select new statement, the type name is irrelevant and even if you could figure out how to declare it, the spaghetti name along the lines above won't clarify anything for somebody reading the code. The code tells you that it is parsing "students" (this will be defined elsewhere e.g. as a List&lt;Student&gt;). And it tells you what we're creating (an enumerable collection of an anonymous type with properties "Name" and "Score"). It's pretty clear cut for an anonymous type, but you will often find similar to be true for non-anonymous types that you're using locally (if you were returning the collection from a method then that may well not be true, you need to take each case on its merits as to what is clearest).
Personal experience was that the habit was generally held by less experienced developers (we had a bunch of off-shore contractors at $previous_job, and that was the first place I saw this habit outside of student work), but that obviously isn't the case for everybody.
&gt; Can't you basically emulate MI by just having A inherit B which inherits C? Then A has access to both. That's really, *really* not the same thing. That's just a chain of single inheritance. Multiple inheritance is more like declaring a class as implementing IA and IB, but a default implementation is also included, optionally overridable.
This is table of compare. --- Person(int, strin, string, Enum) serialization test Serialize: MsgPack-Cli(Array): 8.11ms MsgPack-Cli(Map): 13.08ms MessagePack for C#(Array): 2.44ms MessagePack for C#(Map): 3.14ms Deserialize: MsgPack-Cli(Array): 10.79ms MsgPack-Cli(Map): 18.35ms MessagePack for C#(Array): 2.02ms MessagePack for C#(Map): 5.92ms --- Encoding/Decoding of property name string is definitely cost. However, it is also tuned for Map mode and there is no unnecessary allocation etc, so it is sufficiently faster than others.
Not sure what you mean by that?
I don't think this is actually a problem that needs solving, in *most* cases. This boilerplate is rarely more than a slight annoyance and I think we often overvalue eliminating slight annoyances. A few extra tiny touch points for a relatively stable interface just doesn't matter in the big scheme of things. Plus if you nicely factor out that logic into a static function, it's instantly testable without jumping through stubbing/DI hoops. I personally find those testing hoops to be more annoying and detrimental, on the whole, than having to pipe a few parameters in a few places. 
I forgot to mention I'm testing in LINQPad and it uses "LINQ to SQL Classes" if I'm not wrong. I don't have **.Include(...)**. But I will try later with Entity Framework instead. I tried setting **DeferredLoadingEnabled** to false, but it didn't change the result.
Just disabling it of course won't help, you actually need to instruct it to load your data with the initial request. With LINQ-to-SQL you do this by defining the `DataLoadOptions` and assign it to the `LoadOptions` property of your context. In LINQPad your entire script is running in a from the context derived class, so you can access the property directly: LoadOptions = new DataLoadOptions(); LoadOptions.LoadWith&lt;Price&gt;(p =&gt; p.PriceInformation); LoadOptions.LoadWith&lt;Price&gt;(p =&gt; p.PriceLists); 
True. I suppose most of that though is fairly simple case. You can still use inheritance for those particular bits but avoid it totally for all the business logic.
Whenever a client asks me to make a print preview for anything, I nowadays just coerce them to get a pdf download instead. And here's why: Where every other aspect of the web is forming standards and is getting their shit together, printing is still a crap shoot. There are media queries that hardly work on most browsers. Most browsers remove colors, some don't. That's configurable for some browsers through js, but not for all. Some have specific css things for it. There's no good way of finding out where break points will be, there's no standard for where which browser will have their margins and I can probably rant on about this for a while. There's currently no reliable way to predict how a page looks when printed, unless you can control browsers or have way too much time on your hands to figure out every detail. My goto solution, implement a script that creates a pdf (wkhtmltopdf is my favorite pdf creator for this) from a web page. This is the most manageable way of doing things. 
Significantly. In my current project, I have implemented automatic reactive delegation to backing objects because there are multiple classes which share a lot of logic between each other but aren't related in a way that allows single inheritance. However, I am not arguing for multiple inheritance - I would prefer Kotlin-like properties instead.
Don't let that bot push you around. Fight the singularity! Bad grammar for humanity!
Ah then I am not able to help. EF is able to do what you want but I am not sure if LINQ to SQL can or cannot.
Yes, you are missing something. SelectMany isn't much different from Select and won't magically fix the problem. I'm honestly not sure why you suggested SelectMany. I see no rationale for how it would be useful or solve their problem. WHY do they need to use SelectMany? The signature of SelectMany is essentially: `IEnumerable &lt;IEnumerable&lt;T&gt;&gt; -&gt; IEnumerable&lt;T&gt;` and essentially maps a list of lists to a list. Or, in other words, flattens a list of lists. The signature for Select is `IEnumerable &lt;T&gt; -&gt; IEnumerable &lt;U&gt;` and maps from one type to another. (Which is why `Select (b =&gt; b)` is a no-op. It doesn't actually map anything) They map things, and don't typically fix N+1 issues caused by poor query generation like OP is experiencing.
Thanks for the reply, but the points I have been attempting to make is to avoid vague code. An anonymous type is just that, vague. Don't get me wrong, just because I don't use that doesn't mean it isn't of value. It's that **I** really don't like code that is implied.
[removed]
That's covered, with its weaknesses, in the article. Mainly that its just sacrificed polymorphism and properties.
VS for Mac is a shadow of VS on Windows. You'd be best off with a VM of Windows on your Mac for the Windows Visual Studio. 
Sometimes, the value of multiple inheritance is inherited state, rather than just inherited behavior.
Head First Design Patterns has some good stuff on composition in its explanation of the Strategy plan, but the long and the short of it is this: **Inheritance** public class A : B { } A inherits from B. An A is a B, and all public members of B are automatically public members of A. A also has access to protected members of B. Might also be described as A being a subclass of B and B being the superclass of A; A as a child or child class of B and B as the parent or parent class of A; B as the base class of A; A extends B; A derives from B; or A as a specialization of B. If A is a class or struct and B is an interface, A *implements* B. C# has three categories of types that can be involved in inheritance: structs, classes, and interfaces. A struct may implement zero or more interfaces. It cannot inherit from a class or struct, and cannot be extended. A class may extend up to one other class, and may implement zero or more interfaces. A class may be sealed, so that it cannot be extended. An interface may extend zero or more interfaces. It cannot be sealed. Inheritance is a tighter coupling of types than composition: A is tied directly to B, and changes to that relationship can break things downstream of it. **Composition** public class A { private B _b; public A(B b) { _b = b; } } A contains an instance of B. A can be a class or struct, B can be a class, struct, or interface instance. That's it. Any public part of B that A wants to expose, A can expose. Any public part of B that A doesn't want to expose, it can keep hidden. A doesn't have access to B's protected members, but B also doesn't have to expose its protected members to A. Composition may also be called *aggregation*. With composition, even if A has all the same methods and properties as B, A has more control over how B's operations are presented and A is more likely to be reusable because it can be composed with *any implementation or extension of B* instead of being tied directly to B. Composition also makes it easier to split up responsibilities into smaller, more reusable pieces (e. g. the Strategy pattern). The downside to composition is that it is tedious and verbose to do, compared with inheritance. I haven't seen a language that really 'solves' this problem, because the things that make composition more verbose than inheritance are also the things that make it more useful. 
His website is legit... https://gaiasoul.com/ WTF.
I can see how MI would work better for the problem in the linked article. However, *my* current codebase benefits greatly from the delegation solution. A large portion of what I need to do involves swapping out dependencies for a different implementation of the same interface, with no changes to the consumer. Using interfaces and delegating to them is the ideal solution for this use case, so MI would likely be a relatively unused tool in my proverbial tool belt. 
VS for Mac is a rebranded Xamarin Studio.
VS for Mac is essentially just a rebranding of Xamarin Studio. 
It's got some extra stuff (bigger focus on .net core) but it's very similar to Xamarin Studio.
Okay, I see that I'm using a different instance of Form 1. That's my bad for not fully understanding objects. But I'm not sure what you mean by passing it into the constructor of Form 2? Something like this? Form2 f2 = new Form2(Form1); Not quite understanding this.
I came from C++ background (~10 years of experience at the time of my switch to C#). Almost never used multiple inheritance in C++. 
Passing in another form in a constructor is a little strange. Also you can't access a protected field from a different class. It might be easier to have Form2 set a property and get the property value in Form1: public class Form1 : Form { protected string FileName; //property private void button() { Form2 f2 = new Form2(); f2.Show(); FileName = f2.FileName; } } public class Form2 : Form { public string FileName { get; private set; } private void button() { FileName = textBox1.Text; this.Close(); } }
No problem. I'd recommend trying them out though as they do have their place. I think the reason they seem vague to you though is just that you're not used to them. Once you're more familiar they can be much clearer than the alternatives in the right situation. If you start getting into database queries with entity framework, etc. your code will potentially become more difficult to maintain to achieve the same performance without them due to all additional classes you'll need to create.
Sorry, I just tried that and it is still not working/intuitive to me.
Oh, I am ABSOLUTELY sure you are right. Esp the Dictionary example. I very much appreciate the info. As for db queries, I have long used stored procedures to do the heavy lifting in that arena. But I will keep it in mind. Thanks again
Oh sorry about not including that. Well first in the Form 2 class, I made the constructor take a Form1 object as a parameter and then in the Form1 class I did: Form2 f2 = new Form2(this) Then I wasn't sure where to go from there. The next thing I tried was in the Form2 class, I made an object like this: Form1 f1 = new Form1(this) which gave me an error as I don't really understand putting an object of a class as a parameter of the constructor of that same class.
Then in the constructor for form 2 you need to accept the form.. Public form 2(form1 f1) 
On the phone, so fix up the capitals of course. 
You might find the automation API useful, if the application bothered to use it to make automated testing easier. It makes finding content easier than just using win32.
Do you know a good guide for this? Seems very complicated
It might help to describe what sort of context you are working in. Is it WebForms?
I just tried this, sadly it made no difference. I've tried with and without .ToList() DeferredLoadingEnabled = false; var ds = new DataLoadOptions(); ds.LoadWith&lt;Price&gt;(c =&gt; c.PriceInformation); ds.LoadWith&lt;Price&gt;(o =&gt; o.PriceLists); LoadOptions = ds; Prices .Where(a =&gt; a.ProductID == 123) .Select(a =&gt; new { a.PriceID, InfoIDs = a.PriceInformation.Select(b =&gt; b.PriceInformationID).ToList(), ListID = a.PriceLists.Select(b =&gt; b.PriceListID).ToList() }) .Dump();
I used the long form yesterday in PHP because I was reading in a boolean config parameter and decided that it wasn't worth my time parsing typos in the config so I don't have to consider "abcxyz" to be 'true'. if ($useAuth === true) Even a necessary use of it drove me nuts.
I really do appreciate all the feedback. Have a good day
Got it to work, thank you so much
Using Entity Framework produced a different query (bigger and with union). Code: Prices .Where(a =&gt; a.ProductID == 123) .Select(a =&gt; new { a.PriceID, InfoIDs = a.PriceInformations.Select(b =&gt; b.PriceInformationID), ListID = a.PriceLists.Select(b =&gt; b.PriceListID) }) .Dump(); It made no difference when testing if I used **.Include(a =&gt; a....)** and **Configuration.LazyLoadingEnabled = false**. It produced the same SQL. What it produced for those who are interested: SELECT [UnionAll1].[PriceID] AS [C1], [UnionAll1].[PriceID1] AS [C2], [UnionAll1].[C1] AS [C3], [UnionAll1].[PriceInformationID] AS [C4], [UnionAll1].[C2] AS [C5] FROM (SELECT CASE WHEN ([Extent2].[PriceInformationID] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C1], [Extent1].[PriceID] AS [PriceID], [Extent1].[PriceID] AS [PriceID1], [Extent2].[PriceInformationID] AS [PriceInformationID], CAST(NULL AS int) AS [C2] FROM [dbo].[Price] AS [Extent1] LEFT OUTER JOIN [dbo].[PriceInformation] AS [Extent2] ON [Extent1].[PriceID] = [Extent2].[PriceID] WHERE 123 = [Extent1].[ProductID] UNION ALL SELECT 2 AS [C1], [Extent3].[PriceID] AS [PriceID], [Extent3].[PriceID] AS [PriceID1], CAST(NULL AS int) AS [C2], [Extent4].[PriceListID] AS [PriceListID] FROM [dbo].[Price] AS [Extent3] INNER JOIN [dbo].[PriceList] AS [Extent4] ON [Extent3].[PriceID] = [Extent4].[PriceID] WHERE 123 = [Extent3].[ProductID]) AS [UnionAll1] ORDER BY [UnionAll1].[PriceID1] ASC, [UnionAll1].[C1] ASC
As someone who jumped from Autohotkey to C# years ago, i have an advice for you: "Stop recreating stuff you did with AutoIT." The reason is simple, AutoIT and Autohotkey is just a wrapper around winAPI. To accomplish the same tricks directly with the winapi - especially early - is beyond your programming knowledge (if you only did AutoIT before). You will quickly realize how awesome AHK and AIT are, and how much easier to do stuff with them, instead of communicating with the winAPI directly through C#. Try to write apps that can do what you want out-of-the-box, instead of just pulling out information from one application and manipulating with AutoIT. Right now you have the *scripting mentality*. You look at a 3rd party app, and you see a bunch of opportunities how you can manipulate it with AutoIT. With C# you can recreate that 3rd party app and it will do exactly what you want. Just to give you an example: * At work we are using an ERP (MS Navision), previously i had scripts that could automate certain tasks. * Obviously recreating Navision as a whole is pretty much impossible, but... * I'm lucky enough to have SQL access to ERP's database, so i can directly pull data, instead of using the desktop client + AHK. Here is an other one: * I had to use 2 apps to do my work. Both are for - to simplify it - to fill databases with data. I used AHK too fill textboxes, getText from Comboboxes, press buttons, and such. * Years ago i wrote a C# app, that was able to do the same thing that 2 apps did, but automatically. tl;dr: stop the "window manipulating" thinking, and create the application that does exactly what you want. I started learning C# with this playlist, not the most professional, but covers a lot of stuff that you will find interesting: https://www.youtube.com/watch?v=x_9lfHjYtVg&amp;list=PL0EE421AE8BCEBA4A
I completely agree with this guy... using programming to recreate user scenarios is probably the hardest task in .Net. If this is a programming exercise, it's the worst one I've ever heard of, there are far better ways to learn programming. If you're goal is to get better at Windows automation, I suggest you don't move into a programming language, the automation tools are far easier. This is classic "just because you can, doesn't mean you should".
 var descrepantPercentage = (totalDMR * 100) / totalOrdered; var fpyPercentage = 100 - descrepantPercentage; if you're set on using `int` values. You're getting clobbered by integer division, where x / y = 0 for all x and y where x &lt; y (the remainder gets calculated behind the scenes, but you either use the `%` operator to get the just the remainder or you use `Math.DivRem()` to get both values in one pass). You *can* coerce one or more of your parameters into a floating-point type (i. e. `decimal`, `float`, or `double`), or you can move your operations around so that you're not dividing a small number by a larger one and exploit commutation to get the value you wanted without a lot of coercion and floating point arithmetic.
The above method would have worked if you had used f2.ShowDialog(); since that waits for f2 to close before continuing... in this case the assignment Filename=f2.FileName occurs immediatly after showing the form, before the user could have pressed the button to change the value of form2.FileName. I don't like the idea of updating a property of a different form from within another... in this case, I would be more likely to create an event that occurs whenever form2 should update form1 and have form1 attach an event handler to that event. 
What's the output you expect? Just interfaces? Because that's all you could get from .d.ts files.
Okay, I understand. And yeah my code isn't the greatest. I've been working with C# now for 2 months, so I'm still looking at ways to make my code more efficient. Thank you for the advice
I'm not sure I understand what the end goal of this would be. Why use C# as a middle-man to go from TypeScript to JavaScript?
Seems like everything you need is in the .d.ts file. Namespace, members, some interface definitions could be converted to a class in .cs. Tricky to pull off, but if you could get it working, it would expose all js libraries with defined .d.ts files to a C# project.
I'm not 100% what you are trying to accomplish, but my initial gut reaction is "Why would I want to compile from TypeScript to C# when I can just write C#?". However, I'm probably missing the point completely. Is your idea to just create Interfaces that mirror TypeScript definitions so you can more easily create C# classes that map to a TypeScript object?
&gt; The implementation is missing. ? Explain further Edit: okay, I think I understand what you're saying. The JavaScript or TypeScript function body (implementation) is not required because Bridge would only output the calls these members, not their implementation. The implementation is ultimately handled by the original .js (or compiled .ts) files, which would need to be included when you're running the compiled .js app.
Convert .d.ts definitions into "real" C# assemblies. Those assemblies would be referenced in your C# project. You would write your C# code with access to those new JavaScript apis. Your app code could then compile into JavaScript by Bridge.NET. Output of the compilation process are .js file(s), instead of .dll's. Hope this helps provide more explanation. 
You could just write your app in TS, but then you have no access to the C# api. Without the .d.ts files converted into .cs, you have no access to those apis from C#. C# is being compiled to JavaScript using Bridge.NET. 
Ah, in that case I wouldn't personally have any interest. I'm looking forward to the day WebAssembly is more mature and I can compile C# -&gt; wasm without any gross JavaScript in the middle.
It may not sound amazing, but is easy to type/remember. `Install-Package L`
Look into AutoItX
Interesting position to take.
Yeah, no. I consider that contra-productive. Besides, some other issues: - Writing to a file is IO business, so why no async? This is 2017. - The `name` is kinda like a magic string. Very nasty, essentially "info" and "INFO" are different formats. - The `Log` calls the `FileWriter.Append` method. In this method you immediately open a log, this is very bad when you want to log from multiple threads. - You use the static constructor to initialize **a lot** of stuff. This makes this code very hard to debug, if ever goes something wrong, like... - Using `AppDomain.CurrentDomain.BaseDirectory` as the directory to store files to. Very often the executables are in a folder with limited write access (as they should be) - this would crash, ... - And since it's in the static constructor, you get a nasty `TypeLoadException`. Where? Well, wherever you first access `L` and cause the type initialization. That could be wherever unless adding a fake call for initialization. - There's no point in letting the timer run every 2 hours to close "past streams" when you only close streams before the current day. You know it's always just to the day, so calculate the time to the next day and just let it run once daily. Unless you expect to constantly get different dates stream.. Which the code kinda implies, but honestly makes no sense to me So yeah, "zero configuration", but also a very very very limited use case.
https://www.reddit.com/r/xamarindevelopers
Thanks man! Not very active, ah well!
CLR does not support multiple inheritance for performance reasons mainly; it has very little to do with the diamond problem. Multiple inheritance makes calls slower; see how interface calls are slower that virtual method calls in C#/CLR. Also, some techniques for implementing multiple inheritance require adjusting the object pointer/reference and this is especially bad for garbage collected languages the the GC wants to have the smallest number of pointers to each object (ideally zero or one), yet a cast in such multiple inheritance type system might mean multiple different pointers to the same object (one pointing to base class A and another to base class B). 
Beat bet would be to find out if those apps use a database or not. If so eventually you can learn to work with it and get data that way. Outside of that you're looking at APIs, interop and calls to the winAPI dll which are no fun for people with experience let alone a beginner. 
Just jump in at 2017. It has some nice ui touches like traking lines for your curly braces. 2017 will do exactly what 2015 does, so those tutorials will work. Theres a posibility that there is an easier way to do it, but older ways tend to still work, they just became a less efficient way of diong it. Like old get; set; etc.
Yes.
Sorry man I don't agree, to correlate functionality you are comfortable with to functionality in a new environment helps to understand how your first tool accomplished its task. I think this is the important reverse connection that I think really helps a programmer get comfortable in a new space.. source: I used AutoIT, I currently am on track to get C# certified and use excel access and IDOCs from SAP to import data into SQL. having a targetable data mentality really helps.
Alright thanks! Downloading it right now.
I imagine local functions should generally be pretty basic and straight forward. Just little helpers that are related to the method that they reside in. 
You shouldn't be sucking downvotes for having an opinion on the feature. We leave that for the political subreddits.
Did you try googling for information about the package? "L" is a shitty thing to have to search for.
Time to troll my new intern... 
If (boolean_value.ToString() == "true") 
how about their documentation https://our.umbraco.org/documentation/
Close but... This improves on your idea: If (boolean_value.ToString().ToLower() == "true")
I would call it half its natural value if it's odd multiples werent roots of the sine function. Also the range of the arcsin and arccos functions only span pi radians. The main argument for tau seems to be "but circles radius 2pi something something" but maybe now I'm just trolling.
Compiler, lexer, parser, tokenizer design is fucking very very challenging but incredibly interesting. I've been (rather slowly...) writing a language that transpiles into xaml that is inspired by json, c#, and c++. Postfix transformation trees, templates, iterative generation, xaml structure emitters, a precompiler, generic type support... Its pretty cool but highly abusable and probably bad practice, but it can simplify your code by like 70% in some cases. Nobody is ever gonna use it, but its one of the most interesting learning experiences ive had in terms of personal projects. I was shocked by how much there is about language theory, symantic syntax trees, AST, type theory, fucking visual studio integration with syntax highlighting (many failed attempts at this portion). Im not totally sure what your compiler is trying to accomplish, im only mildly familiar with typescript. But if youre looking for a cool project, a language service/compiler/code gen project is the holy grail.
I may be missing something, but where the MyTimer event that is called when the timer reaches 1000? There should be something like: private void myTimer_Tick(object sender, EventArgs e) { myTimer.Enabled = false; RepeatAction(); } 
You should use 2017 definitely. and also maybe you should try write C# in vscode :)
What a nice feedback (despite being unnecessary harsh, eh). I like how you have been the able to grasp the whole code base in very few minutes (making it nimble is the whole point of it). Below are some comments on your remarks, I would love to hear some more back from you. &gt; *Writing to a file is IO business, so why no async? This is 2017.* Yeah, it should offer a `LogAsync` version of the method. I'm afraid some people will end up using it as fire and forget, but that's their choice. &gt; *The name is kinda like a magic string. Very nasty, essentially "info" and "INFO" are different formats.* That's a very stupid bug on my part, fortunately calling `ToUpperInvariant` solves it. &gt; *You use the static constructor to initialize a lot of stuff. This makes this code very hard to debug, if ever goes something wrong, like...* Yup, I've being bitten by a static constructor before (not by the library tough) and I agree with you. Thankfully, it's easy to fix, it's just a matter to change it to a static `Initialize` method (and check for it on the other methods, ofc). &gt; *Using AppDomain.CurrentDomain.BaseDirectory as the directory to store files to. Very often the executables are in a folder with limited write access (as they should be) - this would crash, ...* Spot on again. Following the `Initialize` idea above, the library could receive an optional parameter with the desired path. &gt; *And since it's in the static constructor, you get a nasty TypeLoadException. Where? Well, wherever you first access L and cause the type initialization. That could be wherever unless adding a fake call for initialization.* `Initialize` would fix that too. &gt; *There's no point in letting the timer run every 2 hours to close "past streams" when you only close streams before the current day. You know it's always just to the day, so calculate the time to the next day and just let it run once daily. Unless you expect to constantly get different dates stream.. Which the code kinda implies, but honestly makes no sense to me* I'm not so sure if it's that's simple considering things like DST or just the user changing the machine time, but I would been lying if I said that I'm happy with the 2 hour heuristic here. &gt; *So yeah, "zero configuration", but also a very very very limited use case.* I intentionally went for "limited use case", there are plenty of flexible (with their fair bit of burden) options out there. I'm not sure about the "very very very" part. There are folks that want to split their log files (log4net). Then there are folks that want some fancy interface (ELMAH). Then there are the rest of us, that just want to add some logging and get over it (the use case that I'm after).
Installation options: https://github.com/pythonnet/pythonnet/wiki/Installation Re-designed docs: http://pythonnet.github.io/ Short intro and tags: https://github.com/pythonnet/pythonnet/blob/master/README.md
I wouldn't recommend VS Code to a novice. The enhanced static analysis tools in VS act as a mentor, training you to avoid common mistakes.
So, you have access to some libraries in C# ... that also MUST exist in either the browser (such as what deck.net provides) or nodejs. But I suppose I agree with the parent, that if you find the project interesting, you should do it for yourself. I can empathize with the goal of writing C# instead of JS (I personally can't stand JS), I just wasn't sure what the point of the TypeScript part was since you can just define your interfaces in C#. How does Bridge.NET handle undefined vs null when transpiling between languages?
I would recommend Rider from JetBrains (https://www.jetbrains.com/rider/). It is still in preview stage so is a bit rough around the edges. It may be a bit heretical to bring it up in this sub... but hear me out. I have used Visual Studio for a **long** time. It is great if a bit too big and slow. However, investing in learning C# isn't really about the IDE but about the language. So why do I suggest Rider? Well, if you learn one of JetBrains IDE's you, in essence, learn them all. It is cross-language and on top of that cross-platform. So, if later you decide to hop on over to Python... you have PyCharm. Same familiar key commands, same familiar experience. Java? IntelliJ. Ruby? RubyMine Node? WebStorm. etc. etc. The changes in VS 2013, 2015, and 2017 are really small and most of the improvements are in the language not the IDE. I figure, while you are in a learning mood why not pick up an IDE that you can use on Mac, Linux, and Windows and even switch languages should that come to pass. Lastly, they have created a new licensing model where for $150 a year (250 first year, 200 second year, 150 every year after that) you get a license to **all** of their IDE's. That's a steal. To get your own license of VS Pro would cost you 500 alone or 800 per year with an MSDN subscription (1200 the first year). True, they do have the free one as does JetBrains offering "community editions" of some of theirs but in both cases with fewer features.
Not going to happen, but the days of writing old school raw js (ES3, etc.) are quickly coming to an end. JavaScript is fast becoming a compiler target only.
Why would you compile to JS when you can compile to WASM WASM doesn't have every JS API ... yet. It'll grow.
Mind elaborating why? I'm from the JS frontend world, trying my first hand at C# on a Mac. I've got a slow Windows laptop and am debating if it's worth shelling $120 to dual boot Windows on my faster Mac, so I can install VS Community. Which would way would be better to learn in the long term - VS Code on Mac or VS Community on either a slow Windows or dualboot?
I have 2015 and 2017 RC running on my workstation. I think I could not find some features in 2017 hahaha. 
please inform me if i am subjected to ban or this text is subjected to being deleted because of the links
Oh okay. I thought C#7 added something even better than auto-properties. Thanks, anyways!
I agree with you. WASM will be a compiler target, although for the foreseeable future WASM will mostly apply to porting non-web apps onto the web. Think gaming, mobile apps, or maybe even something like native Photoshop running in a browser with native-like performance. WASM is very exciting and opens vast new markets for apps. Also, think monster sized downloads. There will be little practical application of WASM as a pure web app development target for a long time. Maybe supercritical performance bits and pieces of web apps could be WASM compiled with clean interop hooks out to vanilla js libs. That would be interesting. At the moment, WASM offers few benefits, realistically nothing, for web app developers, but yes, that should change over time. It's an exciting technology and a perfect cross-compilation target. It should be possible some day soon(ish) to compile your C# app for both desktop (.dll) and web (js or WASM) deployment, using the same source, compiled for multiple targets. We're already building assemblies written once in C# that deploy to the web (.js) and desktop/server apps (.dll) using Bridge. A very cool moment when you get this working for the first time.
Oh, there are new things with properties. Check it out, returning structs from properties in a way that actually works. public class Shape { Rectangle m_Size; public ref Rectangle Size { get { return ref m_Size; } } } var s = new Shape(); s.Size.Width = 5; var rect = new Rectangle(0, 0, 10, 20); s.Size = rect; You couldn't do this before without it fucking up (C# 1) or giving you a compiler error (C# 6). 
1. Declare the courseList outside of any method as a class member. 2. Instantiate it and add your default entries at start of your program 3. Dont declare the input variables at class level and add the course with the input variables from the user at the end of the c==1 path. 4. On c==2 just delete the entry from the list. 5. On c==3 make sure you have overridden the .ToString() method of your Course class Other things -&gt; Try to use Switch/Case statement instead of if/else conditional. Use Int32.TryParse to catch wrong inputs. If you need further explanation on any of these things, feel free to ask.
When I used to install Visual Studio, it would explode all over my machine and install so many different things. It was a behemoth. Visual Studio 2017 only installs what you need. Uninstalling and updating is way better. It's just way better.
It was only a few extra lines, or maybe one extra lines telling the get to return a value etc. But the current.... public int myVar { get; set; } is the 'new' way. 
 public T Parse() { return ParsePrimary(0); } private T ParsePrimary(int level) { } or public T Parse() { T ParsePrimary(int level) { } return ParsePrimary(0); } With local functions, the two can even share state easily (for whatever reason). It helps you keep a narrow scope.
If you have a student email (.edu) you should also go ahead and get ReSharper for free! It will help you learn many c sharp specific language features 
agreed. also really use resharper. if you see something underlined in red or green right click it and read what R# is saying. click on the red bubbles as well. you'll get to learn a lot of the language by following it's tips
Thanks, I will give that a try!
It's the form of the post that causes the downvotes, not an opinion. 
I second this. I find myself to be much more productive in Rider than in VS2017. Rider is just so ergonomic, smart, and fast.
Uh, auto properties have been around since way before VS2017. 
I'm a fan of expression bodied properties. `public ref Rectangle Size =&gt; ref m_Size;` 
What have you made the gridview in? is it an asp.net web project, winform ,wpf or UWP? How have you added the data to it already? 
This is also possible in older version.
ffmpeg is rather old tool so you can google a lot of information/examples about its usage + official docs: http://ffmpeg.org/documentation.html
TIL I thought it was just aquired by MS and still exists 
Look into cscore
With jumping in, make sure you take a gander at Microsoft virtual academy, they have some very nice tutorials for different features and practices.
They've currently got Visual Studio for Mac in beta
I don't really see anyone finding such small library by googling (despite the name), what really matters is tagging it properly on NuGet and GitHub IMO.
You are already working with GUI framework before getting to know the fundamental basics of the language. You should spend 2-4 weeks (depends on how fast you can learn new stuff) on getting to know the language fundamentals + some basic concepts commonly used (classes, OOP, exceptions etc.) and then try to apply that knowledge. With your current approach you will spend a lot of time trying to find answers which are present in any good tutorial.
I've been using vs 2017 since about two hours after it was available. Other than breaking the build with new C# 7.0 features (build still uses vs 2015) it's been great. And no more vshost.exe crap anymore. You won't have problems using 2017 with 2015 tutorials.
&gt; Change the name, at least of the actual code implementation. It doesn't make sense, especially if... I understand the dislike about the name but I won't change it (the package is already published). I don't really see anyone finding such small library by googling (despite the name), in this regard what really matters is tagging it properly on NuGet and GitHub IMO. &gt; Make it a concrete class which inherits from an interface (this makes mocking and dependency injection easy) and people can make thread-safe singletons that use that concrete class if they want. I don't think that's a good practice. My suggestion is to isolate the use of a third-party library by wrapping it in a class of your own instead. It's much better to rely on an interface of yours than of a vendor. If you use a vendor interface throughout your code base you end up entangling your design with theirs. By using an interface of your own you are able to have multiple implementations of your interface for different (similar) libraries and your mocking needs (making dependency injection to really work). Removing a reference for a library it's a breeze, just uninstall the package and delete the single interface implementation that uses it. &gt; ZeroConfiguration isn't really something a lot of developers look for when choosing libraries. What they usually want is EASY configuration. In the sentiment of the library, I agree that things like Log4Net are probably too complication from a configuration point of view -- but that doesn't mean absolutely no configuration is all that useful. I disagree. They aren't the majority, but there's plenty of people out there looking for "just works" solutions. A quick google search shows that I'm not alone on NuGet: [[1]](https://www.google.com/search?q=%22no+configuration%22+site%3Anuget.org) [[2]](https://www.google.com/search?q=%22zero+configuration%22+site%3Anuget.org). &gt; /u/AngularBeginner had a lot of great points in the other comment as well. Yeah, he made great points! I made a comment on each of it, please join that conversation if you have anything to add :)
I would definitely not recommend learning C# on OSX at this moment in time. Rider is not quite there, and VS for Mac is not great. VS Code is a wonderful tool, but if you must use a Mac (I do!), then I urge you to install Parallels and run VS2017. Having both OS's on the same awesome Mac hardware is truly the best of both worlds.
Thanks, I understand now. For some reason I was picturing something else completely.
Looks like a lot of fun. You need to pet that project more, I guess. :0)
It's mostly related to the new project system with PackageReference and .NET Core SDK based projects. And there is a known issue with nuget 4.0 and solutions with many projects where it spends tons of time resolving whole dependency trees for each project. And that is done every time on project load/reload and build...
Is the literal 'True' a valid bool value?
I did have logins selected but at this point it's worth giving a try, will report back
I feel like Visual Studio team is not connected to Core team in any way. The whole experience is painful when working with Core, new touted features like Live Unit Testing just say "oops, don't work with core, sorries!" Just feels very weird. Then they have cromagnons on the team who are still actively refusing 64-bit, just tells me they are so deep in technical debt they can't even fathom it. Visual Studio is in dire need of an overhaul, they should probably just re-dedicate most of those resources to building Microsoft supported VS Code extensions to rebuild most of the functionality from Visual Studio in a cross-platform way.
640k of ram is plenty
You're doing it wrong... I've yet to encounter a single crash or freeze. I have experienced plugins crashing - VS display a notification and reboots it, which seems like a fairly robust way of handling it.
Creating a new ASP.Net project, WebAPI is checked by default, creates exactly the same AccountController and the only login related thing is: [Route("ExternalLogin", Name = "ExternalLogin")] public async Task&lt;IHttpActionResult&gt; GetExternalLogin(string provider, string error = null) 
Only the 5 richest kings of Europe will own a computer!
I installed VS2017 on my PC. It totally corrupted my profile somehow. Even after uninstalling, the whole PC crashes when I log into that profile. The new profile works great...and I'm happy to keep using VS2015. 
Shot in the dark. What if you try creating a new MVC project? This should give you the Account Controller and views for logging in.
Two steps ahead of you, already did so; unchecked WebAPI to get a traditional controller, pointing it to my existing DB (since it used template based tables called AspNetUsers and others, so I suspect this hasn't changed in WebAPI vs MVVC ASP.Net). I wasn't able to login with an existing user and debugging hasn't made it apparent yet.
I only recently discovered this Viasfora. Now, it's a must-have.
No visual studio releases have been too different from the previous. Its a complex app with a lot of features so even the smallest changes would inconvenience developers so for the most part they don't mess with stuff. A few times I have accidentally opened up a file or project in a different version and don't even notice right away. I have not used 2017 yet but assume what I said is true since I've used every version since 2005. As long as you are aware your using a different version than a tutorial it should be fine, if something doesn't match what you see in a picture maybe it was moved to a different location and you can just google what your looking for. If its the same version and you can't find something, then it gets difficult.
Honestly it sounds unrelated. Did you also install a bunch of Windows updates?
Well, crashes of background processes every now and then and random crashes of VS itself several times per day are still there regardless of that nuget issue. It's just the one that irritates me the most, since it slows down builds and solution reload and makes those crashes actually make a huge impact on my productivity.
&gt; Is the literal 'True' a valid book value? Some books are true, and some are not.
Too much orange, OP. Switch colors, and try again.
Not being inside MS, I don't know who's responsibility it is to make sure that something works in VS. The Core team moved a long way from the existing .Net framework and only recently started moving back. If they had not done things like moving away from MSBuild, there might have been more time to get things smoothed out with VS. VS is huge flagship product, getting only the things I use or only the things you use working in something like VS Code is going to be a fair bit of work. Getting everything that everyone uses is a massive amount of work. 
My problems so far ... build events macros dont work https://stackoverflow.com/questions/42777573/visual-studio-2017-macros-show-empty-on-build-but-not-in-macro-selector nuget packages wont install unless the entire project can compile including compile errors due to missing dll references .... migrated projects dont delete the old xproj which remains in git so the next time someone loads the project in 2017 it tries to convert it corrupting the solution file. to fix you need to delete the xproj manually and readd the project to the solution.
That's my experience with 2015, constantly freezing or "busy" messages. So far 2017 has been OK for me but I haven't had much time to use it yet.
I installed VS2017, had a lot of issues so decided to remove and go back to VS2015. It removed a load of system files and rendered the pc unusable. Thank god for backups 
Why do you want to debug that on top of some .NET monstrosity? In any case, I'm pretty sure that's a dedicated tool that just sends data back to the shell (similar to how debugging works in VSCode), so it would be essentially the same behavior except you might have various competing extensions trying to push the tooling forward.
I've been using it for about a week now and no issues. I work on solutions with several projects, custom dll/api references. I debug in multiple instances of VS which has cause IIS to crash an apppool but a simple restart fixes that. I do like the integration with GIT repositories, I can do a lot more now in VS , I still used GIT, just not for sync/fetch/pull/push so much anymore.
&gt; It'd take an average developer about the same amount of time to write a basic logger than it would to wrap an external lib. The library is indeed not that complex, but creating an interface and implementing it just calling something external is way simpler. By using the library you don't have to: * Make sure the stream gets closed. * Make it thread-safe. * Clean up old logs (the library does that!). * Apply a format for specific log types. * Disabling log types. I find that such logging is needed in a myriad of applications. Folks that don't want to use a complex configurable log library end up copying and pasting. It's much better to `Update-Package` than dive into all copy and paste of the past (just think about all the suggestions/corrections on this reddit post alone). &gt; I looked through a few of those packages and they're not terribly popular. Fair is fair. I believe that such approach is not that popular in the Java/.NET world ("enterprise"), but is very common in other ecosystems. The [standardjs](https://github.com/feross/standard) project is a good example of people running away from configuration to no configuration. &gt; but a bit more flexible than L What kind of flexibility in a logging library would you personally value? I would love to hear it.
&gt; Why do you want to debug that on top of some .NET monstrosity? C# (and .NET) was designed for engineering large-scale complex applications (e.g. full-blooded IDEs). Javascript was designed for making table rows change colour when you hover over them with your cursor :P. Flippancy aside, I have no problem with VS Code being a thing, and it's about time we had some real competition for lightweight editors anyway (Sublime's UI makes me shudder and Atom is a joke). But the idea of building something that even approaches the depth/complexity of VS **Proper** in Javascript (or Typescript) is going to end in tears. The language just isn't as structured, fast enough, easily parallelizable, well designed, etc. If I said I wanted to build nuclear-reactor software with Node.JS I hope you would want to punch some sense in to me. An IDE obviously isn't quite a nuclear-reactor but the point is there's a limit to what JS should be used for.
There's VS 2017? Good to know...
How are Java and C# more productive in this case without multiple inheritance?
Come on, you can't even do an effective search of your own project for a single letter.
Agreed: I've been using it since the early RCs in December 2016 (November?) and I haven't used VS 2015 since. My main solution has over 120 projects.
I would do a fresh install and remove all the legacy .netcore installations. I had problems too especially when I had all the .net core betas installed and VS 15 17 +Code. But now that I just have the latest and things are very stable.
My first installation didn't run. Reinstalled it again and its been running fine since their launch.
Exaggerated? OP said "*my* experience".
Maybe it is a bit crazy but did you consider using files? All requirements are satisfied: * Multi-user - YES * Object oriented or document - YES * Can be bundled with installer - YES * Up to 10GB of data - YES * Free for any use - YES Why work with databases if files satisfy all needs? On the other hand requirements that are not on the list could be the real game changers. Do you need search? What kind of search? Transactions? Indexes? Updates? Maybe shared server or cluster of servers in the future? 
In order for FlexArraysMethod to take in the arrays, it has to be declared like this: private static void FlexArraysMethod(int[] nums1, int[] nums2, int[] nums3) { .... Then you need to call it from your main method: FlexArraysMethod(nums1, nums2, nums3); Then you may want to have a loop in your Flex method to add up all the numbers in each array. 
Sounds like a subset of ReSharper to me
Yeah, I tried bare bones for a month after upgrading to VS2015, and really missed find usages with the filters, find anything with wildcard searches and code cleanup amongst other things. But it's quite resource intensive, I find closing all open documents every now and then helps. 
180 projects in one solution?! O.O Jesus and I thought I was cool with 5 lol! (I'm still rather new, only been programming for a little over a year)
Go deep - learn along the way.
Please cross- post this to /r/programmerHumor and I thought I was cool with five lol!
Thanks for the reply. This is a large, existing code base. I can't monkey around much with that structure unfortunately. 
Hmm, shame. I'd create a new folder for constants though, its best to keep that stuff in one place.
Redis
It appears you were right. The hard drive actually died today. 
The biggest one that blows my mind is how often they lock up the UI. That, and how hopelessly fucked everything about the way VS watches files is (God help you if you accidentally include node_modules in your project). It really does just need gutted and basically rebuilt from scratch.
Removed: Rule 4. You'll have to make an attempt at least.
Ever heard of debugging? Btw: Name your controls. Noone can tell what label8 is for
So far they have done weekly releases, so I'm going to give it a few more months before trying it: https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes 
Same here. Opens a hell of a lot faster then 2015 too.
I'm not sure exactly what kind of answer you're looking for. You'll have to provide some more information. What does your receive and transmitting code look like?
Try using .Net core projects. I'm trying to develop a .Net core app and 2017 is completely unusable.
I've used Sqlite before just with the combined dll you can get from nuget. If you want 'data source' support you are going to have to give some more context on what kind of application you are trying to make. Is it a windows forms application, a wpf app, a web forms ASP.NET application, or an ASP.net MVC web application? Most of them have different ways you use data sources for binding or queries.
RX/TX will all be through the native SerialPort class, with the .Send() method and the .DataRecieved event. I haven't really touched that part of the code yet, as I am trying to get the encoding into a beta state first. The basis of it is My Code sends raw bytes to the TNC. TNC then does some magic modulation, and passes audio to the radio, which is transmitted. RX end: Radio sends audio to TNC. TNC demodulates the data, and sends me raw bytes. Most of this was just background. What I need is a way to somehow 'view' each byte received and then manipulate it. **If there are five 1's in a row, it needs to insert a zero into it on the TX side. On the RX side, If there are five 1's followed by a 0, I need to discard that 0.** 
Maybe he should ctrl-f 'const' first and see where most of the other existing constants are defined first?
Which is part of why I don't want what you're describing. I love that VS Code is just this smaller, open source little tool with plugins to do stuff. I don't want the 15 adverts per project spamming Azure integration in my face. Let VS have their Azure and their bulky Enterprise services, and leave the pure little vs code alone
Is 100% of the memory pointers? I doubt it, it'd be more like 10% tops. And right now the IDE hard stops when it hits its 32-bit 2GB process limit, I'd rather it run smooth at 2.2GB with room to grow as a 64-bit process. Never mind the performance increases from more registers, less thunking between 32-bit and 64-bit and running at the processor's native bit level instead of some CPU emulated 32-bit mode.
Why can't you modify the library source? Does it expose any async method variants?
VS Code is going to be the future iteration of Visual Studio - but to get there, MS has to start developing extensions that bring all the other features that VS has right now in a modular way so that they can finally kill the old goat that is failing under its own bloat.
That wouldn't work well for low end machines on databases up to 10gb.
start with the simplest solution your input is a byte array. read 1 bit at a time and write it to an intermediate buffer. keep a counter of how many 1s you read in a row. if it hits 5, write a 0 and reset your counter. same thing when you are decoding, except drop the next bit.
You'd be surprised how much of dotnet memory usage is pointers. The most convenient way to possibly show this right now is if you have a web app on your local machine, switch the IIS application pool to 32 bit mode. Observe memory usage, then go back to 64 bit mode. It will pretty much almost exactly double memory usage. More registers wouldn't increase performance that much. Modern processors have hundreds of registers and use what's called register renaming. Basically if you push a register to the stack to make room for some operand, instead of doing that it instead "renames" some register that is free to whatever one you want to put the value in. Then when you go to retrieve the value you previously pushed on the stack, it instead just references the register directly. No actual pushing or popping took place. In the decoding stage the processor changes the registers being referenced to some internal register. This is one of the ways modern processors do better than 1 instruction per clock. For reference (the latest CPU I read about) AMD Ryzen has 168 Integer registers and 160 Floating point registers and can retire 8 instructions per cycle (like up to 8 instructions that can constitute "thunking" in a single cycle, so not really thunking). Furthermore, the majority of operations visual Studio performs are not 64 bit, so there is very little thunking going on. The only reason to go to 64bit is to increase pointer size so that you can address more ram. But in doing so, you greatly increase memory usage and memory bandwidth. ----------------------- EDIT: Wow I typed this on my phone earlier while tipsy and pooping. After re-reading it had some serious rambling, typos, and was way to detailed. Also I should admit I don't know what thunking means. But using context clues and an educated guess about what he could possibly be referring to, I imagine it's similar to when you are trying to add or multiply a 64 bit integer using an 8 bit processor. Basically a lot of 8 bit operations to do a single 64 bit operation, this takes a lot of moving data around 8 bits at a time. Some 320ish cycles on an Atmel AVR (Arduino) if I remembering correctly from when I worked with them. Here's a table of the clockcycles just to do basic 16 bit operations on an 8 bit AVR. If these were 8 bit they'd be single cycle. This should give you a pretty good idea how hard 64bit is to do on one of these. | Operation | Type | min| max | avg (cycles)| configuration | code size (bytes) | ---|---|----|----|----|----|----|---- | add | int16_t | 49 | 60 | 52 | Rounding + Ovf Detection | 74 | | add | int16_t | 14 | 14 | 14 | Unchecked Math | ~14 (inlined) | | add | float32_t | 606 | 1262 | 982 | | 90 | | subtract | int16_t | 49 | 60 | 53 | Rounding + Ovf Detection | 74 | | subtract | int16_t | 14 | 14 | 14 | Unchecked Math | ~14 (inlined) | | subtract | float32_t | 612 | 1231 | 988 | | 98 | | multiply | int16_t | 294 | 453 | 344 | Rounding + Ovf Detection | 818 | | multiply | int16_t | 205 | 379 | 257 | Unchecked Math | 696 | | multiply | float32_t | 466 | 2112 | 1742 | | 500 | | divide | int16_t | 171 | 1329 | 752 | Rounding + Ovf Detection | 414 | | divide | int16_t | 162 | 1307 | 738 | Unchecked Math | 382 | | divide | float32_t | 438 | 1370 | 1293 | | 348 | | sq. root | int16_t | 605 | 934 | 714 | Rounding + Ovf Detection | 386 | | sq. root | int16_t | 599 | 925 | 707 | Unchecked Math | 368 | | sq. root | float32_t | 486 | 497 | 493 | | 144 | Source: https://code.google.com/archive/p/libfixmath/wikis/Benchmarks.wiki
Well, you can "view" and "manipulate" a byte by creating a mask for the specific bits (i.e. shift 1 to the desired spot) and then ANDing/ORing the value with that mask. You'd do this repeatedly for every bit in the byte and keep track of the number of consecutive 1s. The stuffing part is a bit tricky because you can't do it on a byte-by-byte basis as the 5 consecutive 1s could overlap two bytes and stuffing in a 0 changes the length of the bit stream. You'll have to maintain a buffer that you fill bit-by-bit from the source bytes. The things I'm not sure about is how the order of bits plays into this, as well as how to deal with partial bytes resulting from the stuffed 0s. At least the former is probably specified in the format.
say x is a byte, it might look like 0111 0000 (x &amp; 128) == 128 when the first bit is a 1 x &lt;&lt; 1 will shift all the bits left one 
Are you considering using third party library, like SharpCompress?
Do you mean phpMyAdmin? So you mean this is a MySql database, I assume. I'm not familiar with datetimer. I don't think that is a common .NET type unless you mean DateTime. 
Thank you so much. This took a little more "experimentation" on my part (because I'm such a newbie), but I finally got it to work using your steps here. THANK YOU. 
Most people in my office have upgraded and no real problems. 
If you fancy reading, try some books. Alternatively you can try basic youtube tutorials. However, if you're like me, you learn by doing. Search the web for some basic source codes for like a calculator. Ideally find one that has comments on what each bit of code does. Study the code, and then try to replicate the project without directly copy and pasting. Repeat this process many many times, gradually moving up towards more complicated projects. At some point, you will reach an understanding to where you can make your own first project/idea. Hope that helps!
Honestly, I haven't used it to develop any .NET Core projects yet, maybe that's why I haven't had any issues with it. But it works a lot faster than VS2015 in my opinion.
I can relate... Experiencing many hangs 
Oh nah wanted to learn C# on program Visual Basic. Correct now?
This is only tangentially related, but why is it that Microsoft still not figured out how to install Visual Studios dependencies on the same drive you install Visual Studio to instead of on the system drive? It's annoying enough with Windows own stuff, but it insists on installing Android's stuff on the system drive if you try to install Xamarin. (Side note: a 128GB SSD seemed like a good idea as a system drive 6 years ago, not so much now.)
You can use symlinks. I've installed VS2015 on SDCard this way on my tablet.
"**simply** by loading a single autogenerated **500,000-line** file"... Why on earth would you have a 500,000-line file?! To quote Mr. T: I pity the fool that has to work with that kind of code base.
Ok thanks. I guess I will gradually learn my way up there. Just another question: Is Visual Studio 2017 free? I am currently downloading that and begin installation but currently stuck at the part where you have to pick what components to install like Workloads etc... which should I install and not install? Or should I install all of them? If all it's more than 50gb worth of space. - I'm puzzled lol Help please.....
Visual studio i think is what you mean 
Ctrl shift f
Yes im sorry, im on high school btw, i dont know that much about parameters and etc, im doing this just to learn.
Really I have been doing a .Net core MVC app with a .net Standard library that is shared with a .Net 4.6.2 app and I have not seen any problems yet. Do you know what specifically is causing it? Compilation? Deployment? just coding in the IDE?
There are so many reasons I disagree with this response. The best way to lean to code is to write code, review other peoples code, and really, I mean really, read as much as you can about our craft. Relying on your IDE to teach you how to code is a recipe for disaster. While all Visual Studio tools, like scaffolding and code analysis, can be a useful aid, especially for quickly spinning up an app, or discovering .net "gotchas", this isn't a replacement for really learning the framework. Anyway, VS code is a tool just like any other IDE or text editor. It is more than capable for learning a new language, and is a fantastic resource for simply exploring and reading others code without all of the bloat of VS. 
Makes me wonder how people ever learned to write code without Visual Studio. Also, VS isn't "checking" against a guidelines structure. It has first class support for communicating errors and issues reported by Roslyn's API, which is exactly what VSCode does (in fact, it supports OmiSharp as well).
Can you post the _exact_ value of the `inserir1` string when it fails? Also, click the "Copy exception detail to the clipboard" link in the exception dialogue and paste it here.
You can install Android SDK manually anywhere and use it instead of installing through Visual Studio. 
Fair enough, I was just asking from an educational point of view, as you say it's not really a programming question. Sorry if it broke the rules of this sub
I would not auto assign them but rather have them bee claimed, its is easier for you since you do not have to consider staff beeing on holydays or when they are ill - in that case a ticket may be assigned and not been worked on for a week :/
What XML? Just The SQL query. 
Java has completely stagnated because Oracle literally no longer cares. IMHO C# is the best and most complete language for modern development. Add to that the incredible cross-platform portability of Mono (a modified version of which powers Xamarin!), and soon, .NET Core as well.
This has given me something to think about, thanks for your input.
Is it open source? I really want to learn more about this type of thing.
Removed: Rule 3. Got some good advice already, but sorry, this probably isn't too relevant for the sub. I agree with the other posters. For the purposes of education, this is a good case to experiment with the strategy pattern. For the purposes of practicality, self-assignment is probably best -- assuming the volume of assignees and assignments is manageable that way.
If you have not already done so, you might want to consider a mapping layer that moves data from the EF models, to the Domain models, and back again. (See also this article from Mehdi Khalili: http://www.mehdi-khalili.com/orm-anti-patterns-part-4-persistence-domain-model/ )
Yeah, tough to find. I can't show any of my own (work!) and they'd be in another language anyway. If you can imagine it, think of having your Repository get whatever it needs from EF to build the domain model, then pass the EF objects into a Domain factory; it can deconstruct the persistence objects and build a Domain entity or aggregate (that's your mapper). You'll need a corresponding piece of logic to take a Domain model and deconstruct it into EF objects, which you can then pass back to the database. Hope that begins to help.
buarhar ! i no longer feel so silly for this deconstruct-derp... [Adelaide .NET User Group - C# 7 with Jon Skeet ](https://www.youtube.com/watch?v=v5AffJAQvzA&amp;t=34m35s) 
Started off great but now I have the same problem with it on at least 3 different computers. At random, any given instance of VS will start freezing every few seconds.
/u/krhek beat me to the punch! +1 to him. Also, as a tip, you should upload code go pastebin or gist so that it has code formatting and code highlighting. 
Similar experience for me so far. Created a new .NET Standard library and in quick succession experienced 3 different exceptions with poor to useless error messages. The first when trying to install nunit package, the error gave absolutely no indication of why it might have failed. The second while trying to set the copy to output property on a file. Repeatedly would not allow me to set this to any value with a strange error message. Later on it sorted itself out, I'm not sure what changed. Finally it just wouldn't even build the project due to some issue with .NET Standard, again not clear what the real issue was. This is a fresh install of VS2017 (no extensions) on a fresh install of Windows 10. I've had some really annoying experiences with extensions in past versions of VS but I've never encountered these kinds of exceptions in just normal usage before.
If you want to shorten things up, check out the [*var* keyword](https://msdn.microsoft.com/pl-pl/library/bb383973.aspx). You can just write: var subdirectories = di.GetDirectories(); The GetDirectories method has a defined return type - the compiler will know that *subdirectories* is of type *DirectoryInfo[]*, so you don't have to type the whole thing. If you are just beginning, I would recommend going easy on *var*. Even though typing whole type names explicitly can get a bit tedious, it gives you a better idea how things work.
&gt; or from an initializer. No, only constructors. An initializer is just sugar for property setters. 
pmjones nailed it. You want proper separation of concerns in your app (SoC). Take a look at the article below for a better understanding. "Do not mix different types of components in the same logical layer. Start by identifying different areas of concern, and then group components associated with each area of concern into logical layers. For example, the UI layer should not contain business processing components, but instead should contain components used to handle user input and process user requests." https://msdn.microsoft.com/en-us/library/ee658124.aspx
Since comments say that Visual Studio Community is free. What would be the difference between Visual Studio Community and Visual Studio 2017? Will I be able to still create the same stuff on the free one as to the non free one? Could someone who knows please shed some light on this. Thanks.
Take a look at [SignalR](https://www.asp.net/signalr).
Im a little on the fence about open sourcing it cause a lot of people here would call it horrible practice and an unpredictable language, but i want to maybe release it as an "experimental language". Theres a lot of restructuring and cleanup id wanna do before releasing it though. Right now im trying to open source a library for complex recursive, iterative, generative, planar, and multidimentional matrix animations! But after that ill probably get back on the XamlSharp compiler
Well thanks for that useless answer 
Don't mention it.
The first hit is 1st edition, not 2nd edition. Not sure if anything changed to be worth 2nd over the 1st. 
I just made a .Net core webapi project and had no issues at all.
Well since the server has to be running for the clients to connect, you will need to have two instances of Visual Studio up. Run your Server app in one instance, and then run the client app in the other instance. To remember which username is associated with each client, you could store this info in a global [Dictionary](https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.110).aspx) variable in the Server class. The Key of the dictionary would be the clients' username, and the Value of the dictionary would be the clients' IP Address. So in your server class, that declaration would look like this: private Dictionary&lt;string, IPAddress&gt; clients; You can do google searches to get MSDN documentation of these classes. [Here](https://msdn.microsoft.com/en-us/library/system.net.sockets(v=vs.110).aspx) is documentation for all the classes in the System.Net.Sockets namespace. Perhaps instead of using straight Sockets, consider using TCPListener and TCPClient classes, as it might be more friendly for a beginner. 
FYI - this doesn't look correct: for (int i = 0; subdirectories.Length+1 &gt;= 0; i++) You probably want: for (int i = 0; i &lt; subdirectories.Length; i++) Also, shouldn't the rest of your code be inside the `if (fbd.ShowDialog() ...)` block?
It's an autogenerated strongly-typed representation of our database. There's no reason for devs to go in there, but sometimes you forget and push F12 and then Visual Studio grinds for a while and then you realise you done fucked up and it eventually opens the file and you immediately close it because you know you didn't mean to open it but Visual Studio still crashes shortly afterwards anyway.
You don't need two instance of VS for this. Just put the two projects in the same solution and you can launch them together.
Don't bother with this. Just dive in and learn from Unity's learning resources first.
No all wanted to keep the data in memory which is in clipboard .. so i can reuse it. Even after the clipboard data gets changed. Is there any other option to retrieve the data in text form ?
If you copy an image to the clipboard, the clipboard contains the image. If you copy text to the clipboard, the clipboard contains the text. You cannot have an image on the clipboard and get meaningful text from it by just reading it.
oh darn... so i can only read texts from clipboard.. that sucks..But thanks for the info :) 
With two separate Main methods?
How's it compare to Orleans? I've used that a bit, I'm just not really a fan of how it's practically impossible to use dependency injection. And if you can get it working, it appears to be a massive hack. None of the main IoC libraries support it directly either. I also really hate how you can't/arent supposed to use anything beyond `async/await` or `Task.Run`! Want to use any modern TPL or Dataflow stuff? Nope you aren't allowed, as Orleans overrides the underlying .NET thread scheduling system so if you use them it totally screws things up.
Async await is certainly not perfect - and there are important pieces that were left out of the final implementation (like inline context changes) that I think make it weaker than it needs to be - but overall it is an amazingly developer friendly language feature. I think C# 7's task-like types might allow for a better actor/task hybrid.
It would eliminate the rule that you can't add new methods to existing interfaces. A lot of "out of date" interfaces in System.Data were not implemented in .NET Core because they couldn't add the missing methods without introducing a breaking change. Which in turn pissed off people who relied on them.
How is it more complicated than existing MI implementations?
You can turn those POCOs into domain models (for the most part) by making your properties private set and adding methods for domain actions. Make sure to keep a private, parameterless constructor so EF can create the object. I've found that having another set of objects as your domain models and mapping introduces a lot of extra complexity. Jimmy Bogard gave a talk on this: https://vimeo.com/43598193